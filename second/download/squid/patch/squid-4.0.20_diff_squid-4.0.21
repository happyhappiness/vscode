diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/aclocal.m4 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/aclocal.m4
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/aclocal.m4	2017-06-01 20:51:04.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/aclocal.m4	2017-07-02 16:41:21.000000000 +0800
@@ -1,9 +1,9 @@
-# generated automatically by aclocal 1.15 -*- Autoconf -*-
+# generated automatically by aclocal 1.15.1 -*- Autoconf -*-
 
-# Copyright (C) 1996-2014 Free Software Foundation, Inc.
+# Copyright (C) 1996-2017 Free Software Foundation, Inc.
 
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
@@ -10049,13 +10049,13 @@
 m4_ifndef([_LT_PREPARE_SED_QUOTE_VARS],	[AC_DEFUN([_LT_PREPARE_SED_QUOTE_VARS])])
 m4_ifndef([_LT_PROG_ECHO_BACKSLASH],	[AC_DEFUN([_LT_PROG_ECHO_BACKSLASH])])
 m4_ifndef([_LT_PROG_F77],		[AC_DEFUN([_LT_PROG_F77])])
 m4_ifndef([_LT_PROG_FC],		[AC_DEFUN([_LT_PROG_FC])])
 m4_ifndef([_LT_PROG_CXX],		[AC_DEFUN([_LT_PROG_CXX])])
 
-# Copyright (C) 2002-2014 Free Software Foundation, Inc.
+# Copyright (C) 2002-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_AUTOMAKE_VERSION(VERSION)
@@ -10064,13 +10064,13 @@
 # generated from the m4 files accompanying Automake X.Y.
 # (This private macro should not be called outside this file.)
 AC_DEFUN([AM_AUTOMAKE_VERSION],
 [am__api_version='1.15'
 dnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to
 dnl require some minimum version.  Point them to the right macro.
-m4_if([$1], [1.15], [],
+m4_if([$1], [1.15.1], [],
       [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl
 ])
 
 # _AM_AUTOCONF_VERSION(VERSION)
 # -----------------------------
 # aclocal traces this macro to find the Autoconf version.
@@ -10080,20 +10080,20 @@
 
 # AM_SET_CURRENT_AUTOMAKE_VERSION
 # -------------------------------
 # Call AM_AUTOMAKE_VERSION and AM_AUTOMAKE_VERSION so they can be traced.
 # This function is AC_REQUIREd by AM_INIT_AUTOMAKE.
 AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],
-[AM_AUTOMAKE_VERSION([1.15])dnl
+[AM_AUTOMAKE_VERSION([1.15.1])dnl
 m4_ifndef([AC_AUTOCONF_VERSION],
   [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl
 _AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])
 
 # AM_AUX_DIR_EXPAND                                         -*- Autoconf -*-
 
-# Copyright (C) 2001-2014 Free Software Foundation, Inc.
+# Copyright (C) 2001-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # For projects using AC_CONFIG_AUX_DIR([foo]), Autoconf sets
@@ -10139,13 +10139,13 @@
 # Expand $ac_aux_dir to an absolute path.
 am_aux_dir=`cd "$ac_aux_dir" && pwd`
 ])
 
 # AM_CONDITIONAL                                            -*- Autoconf -*-
 
-# Copyright (C) 1997-2014 Free Software Foundation, Inc.
+# Copyright (C) 1997-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_CONDITIONAL(NAME, SHELL-CONDITION)
@@ -10170,13 +10170,13 @@
 AC_CONFIG_COMMANDS_PRE(
 [if test -z "${$1_TRUE}" && test -z "${$1_FALSE}"; then
   AC_MSG_ERROR([[conditional "$1" was never defined.
 Usually this means the macro was only invoked conditionally.]])
 fi])])
 
-# Copyright (C) 1999-2014 Free Software Foundation, Inc.
+# Copyright (C) 1999-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 
@@ -10361,13 +10361,13 @@
 AC_SUBST([am__nodep])dnl
 _AM_SUBST_NOTMAKE([am__nodep])dnl
 ])
 
 # Generate code to set up dependency tracking.              -*- Autoconf -*-
 
-# Copyright (C) 1999-2014 Free Software Foundation, Inc.
+# Copyright (C) 1999-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 
@@ -10437,13 +10437,13 @@
      [test x"$AMDEP_TRUE" != x"" || _AM_OUTPUT_DEPENDENCY_COMMANDS],
      [AMDEP_TRUE="$AMDEP_TRUE" ac_aux_dir="$ac_aux_dir"])
 ])
 
 # Do all the work for Automake.                             -*- Autoconf -*-
 
-# Copyright (C) 1996-2014 Free Software Foundation, Inc.
+# Copyright (C) 1996-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This macro actually does too much.  Some checks are only needed if
@@ -10634,13 +10634,13 @@
     * )
       _am_stamp_count=`expr $_am_stamp_count + 1` ;;
   esac
 done
 echo "timestamp for $_am_arg" >`AS_DIRNAME(["$_am_arg"])`/stamp-h[]$_am_stamp_count])
 
-# Copyright (C) 2001-2014 Free Software Foundation, Inc.
+# Copyright (C) 2001-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_PROG_INSTALL_SH
@@ -10655,13 +10655,13 @@
   *)
     install_sh="\${SHELL} $am_aux_dir/install-sh"
   esac
 fi
 AC_SUBST([install_sh])])
 
-# Copyright (C) 2003-2014 Free Software Foundation, Inc.
+# Copyright (C) 2003-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # Check whether the underlying file-system supports filenames
@@ -10677,13 +10677,13 @@
 rmdir .tst 2>/dev/null
 AC_SUBST([am__leading_dot])])
 
 # Add --enable-maintainer-mode option to configure.         -*- Autoconf -*-
 # From Jim Meyering
 
-# Copyright (C) 1996-2014 Free Software Foundation, Inc.
+# Copyright (C) 1996-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_MAINTAINER_MODE([DEFAULT-MODE])
@@ -10712,13 +10712,13 @@
   AC_SUBST([MAINT])dnl
 ]
 )
 
 # Check to see how 'make' treats includes.	            -*- Autoconf -*-
 
-# Copyright (C) 2001-2014 Free Software Foundation, Inc.
+# Copyright (C) 2001-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_MAKE_INCLUDE()
@@ -10762,13 +10762,13 @@
 AC_MSG_RESULT([$_am_result])
 rm -f confinc confmf
 ])
 
 # Fake the existence of programs that GNU maintainers use.  -*- Autoconf -*-
 
-# Copyright (C) 1997-2014 Free Software Foundation, Inc.
+# Copyright (C) 1997-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_MISSING_PROG(NAME, PROGRAM)
@@ -10801,13 +10801,13 @@
   AC_MSG_WARN(['missing' script is too old or missing])
 fi
 ])
 
 # Helper functions for option handling.                     -*- Autoconf -*-
 
-# Copyright (C) 2001-2014 Free Software Foundation, Inc.
+# Copyright (C) 2001-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # _AM_MANGLE_OPTION(NAME)
@@ -10830,13 +10830,13 @@
 # _AM_IF_OPTION(OPTION, IF-SET, [IF-NOT-SET])
 # -------------------------------------------
 # Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.
 AC_DEFUN([_AM_IF_OPTION],
 [m4_ifset(_AM_MANGLE_OPTION([$1]), [$2], [$3])])
 
-# Copyright (C) 1999-2014 Free Software Foundation, Inc.
+# Copyright (C) 1999-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # _AM_PROG_CC_C_O
@@ -10877,13 +10877,13 @@
 fi
 AC_LANG_POP([C])])
 
 # For backward compatibility.
 AC_DEFUN_ONCE([AM_PROG_CC_C_O], [AC_REQUIRE([AC_PROG_CC])])
 
-# Copyright (C) 2001-2014 Free Software Foundation, Inc.
+# Copyright (C) 2001-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_RUN_LOG(COMMAND)
@@ -10896,13 +10896,13 @@
    ac_status=$?
    echo "$as_me:$LINENO: \$? = $ac_status" >&AS_MESSAGE_LOG_FD
    (exit $ac_status); }])
 
 # Check to make sure that the build environment is sane.    -*- Autoconf -*-
 
-# Copyright (C) 1996-2014 Free Software Foundation, Inc.
+# Copyright (C) 1996-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_SANITY_CHECK
@@ -10977,13 +10977,13 @@
      wait $am_sleep_pid 2>/dev/null
    fi
    AC_MSG_RESULT([done])])
 rm -f conftest.file
 ])
 
-# Copyright (C) 2009-2014 Free Software Foundation, Inc.
+# Copyright (C) 2009-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_SILENT_RULES([DEFAULT])
@@ -11037,13 +11037,13 @@
 AC_SUBST([AM_DEFAULT_VERBOSITY])dnl
 AM_BACKSLASH='\'
 AC_SUBST([AM_BACKSLASH])dnl
 _AM_SUBST_NOTMAKE([AM_BACKSLASH])dnl
 ])
 
-# Copyright (C) 2001-2014 Free Software Foundation, Inc.
+# Copyright (C) 2001-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_PROG_INSTALL_STRIP
@@ -11065,13 +11065,13 @@
 if test "$cross_compiling" != no; then
   AC_CHECK_TOOL([STRIP], [strip], :)
 fi
 INSTALL_STRIP_PROGRAM="\$(install_sh) -c -s"
 AC_SUBST([INSTALL_STRIP_PROGRAM])])
 
-# Copyright (C) 2006-2014 Free Software Foundation, Inc.
+# Copyright (C) 2006-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # _AM_SUBST_NOTMAKE(VARIABLE)
@@ -11084,13 +11084,13 @@
 # --------------------------
 # Public sister of _AM_SUBST_NOTMAKE.
 AC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])
 
 # Check how to create a tarball.                            -*- Autoconf -*-
 
-# Copyright (C) 2004-2014 Free Software Foundation, Inc.
+# Copyright (C) 2004-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # _AM_PROG_TAR(FORMAT)
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/cfgaux/depcomp /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/cfgaux/depcomp
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/cfgaux/depcomp	2017-06-01 21:01:27.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/cfgaux/depcomp	2017-07-02 16:41:28.000000000 +0800
@@ -1,12 +1,12 @@
 #! /bin/sh
 # depcomp - compile a program generating dependencies as side-effects
 
-scriptversion=2013-05-30.07; # UTC
+scriptversion=2016-01-11.22; # UTC
 
-# Copyright (C) 1999-2014 Free Software Foundation, Inc.
+# Copyright (C) 1999-2017 Free Software Foundation, Inc.
 
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2, or (at your option)
 # any later version.
 
@@ -783,9 +783,9 @@
 # Local Variables:
 # mode: shell-script
 # sh-indentation: 2
 # eval: (add-hook 'write-file-hooks 'time-stamp)
 # time-stamp-start: "scriptversion="
 # time-stamp-format: "%:y-%02m-%02d.%02H"
-# time-stamp-time-zone: "UTC"
+# time-stamp-time-zone: "UTC0"
 # time-stamp-end: "; # UTC"
 # End:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/ChangeLog /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/ChangeLog
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/ChangeLog	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/ChangeLog	2017-07-02 16:41:18.000000000 +0800
@@ -1,6 +1,25 @@
+Changes to squid-4.0.21 (02 Jul 2017):
+
+	- Bug 4730: segfault while processing internal HTTP requests
+	- Bug 4492: Chunk extension parser is too pedantic
+	- Bug 1961: Redesign urlParse() API
+	- TLS: recognise tls:: namespace on logformat tokens
+	- SSL-Bump: tproxy does not spoof spliced connections
+	- security_file_certgen: collapse queued requests
+	- Add a basic apparmour profile
+	- Add transaction_initiator ACL for detecting various unusual transactions
+	- Add ssl::server_name options to control matching logic
+	- Support for --long-acl-options
+	- Do not die silently when dying via std::terminate()
+	- Fix option --foreground to implement expected behavior
+	- Translations: update .po and .pot to latest texts
+	- ... and some documentation updates
+	- ... and many code cleanup and stability fixes
+	- ... and all fixes from 3.5.27
+
 Changes to squid-4.0.20 (01 Jun 2017):
 
 	- Bug #4692: SslBump breaks intercepted IPv6 connections
 	- Bug #4682: ignoring http_access deny when client-first bumping mode is used
 	- Bug #4662: build errors with LibreSSL 2.4.4
 	- Bug #4659: sslproxy_foreign_intermediate_certs does not work
@@ -13,13 +32,13 @@
 	- SSL-Bump: Fix crashes when server-first bumping mode is used with openSSL-1.1.0
 	- eCAP: Fix empty header handling in Ecap::HeaderRep::hasAny()
 	- SSL-Bump: Second adaptation missing for CONNECTs
 	- ext_session_acl: cope with new logformat inputs
 	- ... and some documentation updates
 	- ... and some code stability fixes
-	- ... and all fixes from 3.5.25
+	- ... and all fixes from 3.5.26
 
 Changes to squid-4.0.19 (02 Apr 2017):
 
 	- Bug 4674: delay_parameters for class 3 and 4 assertion failed
 	- Bug 4671: GCC 7 compile errors
 	- Bug 4663: GCC 5+ compile errors with optimization level -O3
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/compat/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/compat/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/compat/Makefile.in	2017-06-01 20:52:42.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/compat/Makefile.in	2017-07-02 16:41:23.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/configure /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/configure
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/configure	2017-06-01 21:01:44.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/configure	2017-07-02 16:41:29.000000000 +0800
@@ -1,10 +1,10 @@
 #! /bin/sh
 # From configure.ac Revision.
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.69 for Squid Web Proxy 4.0.20.
+# Generated by GNU Autoconf 2.69 for Squid Web Proxy 4.0.21.
 #
 # Report bugs to <http://bugs.squid-cache.org/>.
 #
 #
 # Copyright (C) 1992-1996, 1998-2012 Free Software Foundation, Inc.
 #
@@ -592,14 +592,14 @@
 MFLAGS=
 MAKEFLAGS=
 
 # Identity of this package.
 PACKAGE_NAME='Squid Web Proxy'
 PACKAGE_TARNAME='squid'
-PACKAGE_VERSION='4.0.20'
-PACKAGE_STRING='Squid Web Proxy 4.0.20'
+PACKAGE_VERSION='4.0.21'
+PACKAGE_STRING='Squid Web Proxy 4.0.21'
 PACKAGE_BUGREPORT='http://bugs.squid-cache.org/'
 PACKAGE_URL=''
 
 ac_unique_file="src/main.cc"
 ac_default_prefix=/usr/local/squid
 # Factoring default headers for most tests.
@@ -1644,13 +1644,13 @@
 # Report the --help message.
 #
 if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures Squid Web Proxy 4.0.20 to adapt to many kinds of systems.
+\`configure' configures Squid Web Proxy 4.0.21 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
 To assign environment variables (e.g., CC, CFLAGS...), specify them as
 VAR=VALUE.  See below for descriptions of some of the useful variables.
 
@@ -1715,13 +1715,13 @@
   --host=HOST       cross-compile to build programs to run on HOST [BUILD]
 _ACEOF
 fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of Squid Web Proxy 4.0.20:";;
+     short | recursive ) echo "Configuration of Squid Web Proxy 4.0.21:";;
    esac
   cat <<\_ACEOF
 
 Optional Features:
   --disable-option-checking  ignore unrecognized --enable/--with options
   --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
@@ -2144,13 +2144,13 @@
   done
 fi
 
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-Squid Web Proxy configure 4.0.20
+Squid Web Proxy configure 4.0.21
 generated by GNU Autoconf 2.69
 
 Copyright (C) 2012 Free Software Foundation, Inc.
 This configure script is free software; the Free Software Foundation
 gives unlimited permission to copy, distribute and modify it.
 _ACEOF
@@ -3248,13 +3248,13 @@
 
 } # ac_fn_c_find_uintX_t
 cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by Squid Web Proxy $as_me 4.0.20, which was
+It was created by Squid Web Proxy $as_me 4.0.21, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   $ $0 $@
 
 _ACEOF
 exec 5>>config.log
@@ -4115,13 +4115,13 @@
   fi
 fi
 
 
 # Define the identity of the package.
  PACKAGE='squid'
- VERSION='4.0.20'
+ VERSION='4.0.21'
 
 
 cat >>confdefs.h <<_ACEOF
 #define PACKAGE "$PACKAGE"
 _ACEOF
 
@@ -42907,13 +42907,13 @@
 $as_echo "$as_me: BUILD EXTRA C++ FLAGS: $SQUID_CXXFLAGS" >&6;}
 { $as_echo "$as_me:${as_lineno-$LINENO}: BUILD Tools C++ FLAGS: $BUILDCXXFLAGS" >&5
 $as_echo "$as_me: BUILD Tools C++ FLAGS: $BUILDCXXFLAGS" >&6;}
 
 rm -f core
 
-ac_config_files="$ac_config_files Makefile compat/Makefile contrib/Makefile doc/Makefile doc/manuals/Makefile doc/release-notes/Makefile errors/Makefile icons/Makefile lib/Makefile lib/libTrie/Makefile lib/libTrie/test/Makefile lib/ntlmauth/Makefile lib/profiler/Makefile lib/rfcnb/Makefile lib/smblib/Makefile lib/snmplib/Makefile scripts/Makefile src/Makefile src/acl/Makefile src/acl/external/Makefile src/acl/external/AD_group/Makefile src/acl/external/delayer/Makefile src/acl/external/eDirectory_userip/Makefile src/acl/external/file_userip/Makefile src/acl/external/kerberos_ldap_group/Makefile src/acl/external/LDAP_group/Makefile src/acl/external/LM_group/Makefile src/acl/external/session/Makefile src/acl/external/SQL_session/Makefile src/acl/external/unix_group/Makefile src/acl/external/wbinfo_group/Makefile src/acl/external/time_quota/Makefile src/adaptation/Makefile src/adaptation/icap/Makefile src/adaptation/ecap/Makefile src/anyp/Makefile src/auth/Makefile src/auth/basic/Makefile src/auth/basic/DB/Makefile src/auth/basic/fake/Makefile src/auth/basic/getpwnam/Makefile src/auth/basic/LDAP/Makefile src/auth/basic/NCSA/Makefile src/auth/basic/NIS/Makefile src/auth/basic/PAM/Makefile src/auth/basic/POP3/Makefile src/auth/basic/RADIUS/Makefile src/auth/basic/SASL/Makefile src/auth/basic/SMB/Makefile src/auth/basic/SMB_LM/Makefile src/auth/basic/SSPI/Makefile src/auth/digest/Makefile src/auth/digest/eDirectory/Makefile src/auth/digest/file/Makefile src/auth/digest/LDAP/Makefile src/auth/negotiate/Makefile src/auth/negotiate/kerberos/Makefile src/auth/negotiate/SSPI/Makefile src/auth/negotiate/wrapper/Makefile src/auth/ntlm/Makefile src/auth/ntlm/fake/Makefile src/auth/ntlm/SMB_LM/Makefile src/auth/ntlm/SSPI/Makefile src/base/Makefile src/clients/Makefile src/comm/Makefile src/dns/Makefile src/DiskIO/Makefile src/DiskIO/AIO/Makefile src/DiskIO/Blocking/Makefile src/DiskIO/DiskDaemon/Makefile src/DiskIO/DiskThreads/Makefile src/DiskIO/IpcIo/Makefile src/DiskIO/Mmapped/Makefile src/esi/Makefile src/eui/Makefile src/format/Makefile src/fs/Makefile src/ftp/Makefile src/helper/Makefile src/http/Makefile src/http/one/Makefile src/http/url_rewriters/Makefile src/http/url_rewriters/fake/Makefile src/http/url_rewriters/LFS/Makefile src/icmp/Makefile src/ident/Makefile src/ip/Makefile src/ipc/Makefile src/log/Makefile src/log/DB/Makefile src/log/file/Makefile src/mem/Makefile src/mgr/Makefile src/parser/Makefile src/repl/Makefile src/sbuf/Makefile src/security/Makefile src/security/cert_generators/Makefile src/security/cert_generators/file/Makefile src/security/cert_validators/Makefile src/security/cert_validators/fake/Makefile src/servers/Makefile src/snmp/Makefile src/ssl/Makefile src/store/Makefile src/store/id_rewriters/Makefile src/store/id_rewriters/file/Makefile test-suite/Makefile tools/Makefile tools/helper-mux/Makefile tools/purge/Makefile tools/squidclient/Makefile tools/systemd/Makefile tools/sysvinit/Makefile"
+ac_config_files="$ac_config_files Makefile compat/Makefile contrib/Makefile doc/Makefile doc/manuals/Makefile doc/release-notes/Makefile errors/Makefile icons/Makefile lib/Makefile lib/libTrie/Makefile lib/libTrie/test/Makefile lib/ntlmauth/Makefile lib/profiler/Makefile lib/rfcnb/Makefile lib/smblib/Makefile lib/snmplib/Makefile scripts/Makefile src/Makefile src/acl/Makefile src/acl/external/Makefile src/acl/external/AD_group/Makefile src/acl/external/delayer/Makefile src/acl/external/eDirectory_userip/Makefile src/acl/external/file_userip/Makefile src/acl/external/kerberos_ldap_group/Makefile src/acl/external/LDAP_group/Makefile src/acl/external/LM_group/Makefile src/acl/external/session/Makefile src/acl/external/SQL_session/Makefile src/acl/external/unix_group/Makefile src/acl/external/wbinfo_group/Makefile src/acl/external/time_quota/Makefile src/adaptation/Makefile src/adaptation/icap/Makefile src/adaptation/ecap/Makefile src/anyp/Makefile src/auth/Makefile src/auth/basic/Makefile src/auth/basic/DB/Makefile src/auth/basic/fake/Makefile src/auth/basic/getpwnam/Makefile src/auth/basic/LDAP/Makefile src/auth/basic/NCSA/Makefile src/auth/basic/NIS/Makefile src/auth/basic/PAM/Makefile src/auth/basic/POP3/Makefile src/auth/basic/RADIUS/Makefile src/auth/basic/SASL/Makefile src/auth/basic/SMB/Makefile src/auth/basic/SMB_LM/Makefile src/auth/basic/SSPI/Makefile src/auth/digest/Makefile src/auth/digest/eDirectory/Makefile src/auth/digest/file/Makefile src/auth/digest/LDAP/Makefile src/auth/negotiate/Makefile src/auth/negotiate/kerberos/Makefile src/auth/negotiate/SSPI/Makefile src/auth/negotiate/wrapper/Makefile src/auth/ntlm/Makefile src/auth/ntlm/fake/Makefile src/auth/ntlm/SMB_LM/Makefile src/auth/ntlm/SSPI/Makefile src/base/Makefile src/clients/Makefile src/comm/Makefile src/dns/Makefile src/DiskIO/Makefile src/DiskIO/AIO/Makefile src/DiskIO/Blocking/Makefile src/DiskIO/DiskDaemon/Makefile src/DiskIO/DiskThreads/Makefile src/DiskIO/IpcIo/Makefile src/DiskIO/Mmapped/Makefile src/esi/Makefile src/eui/Makefile src/format/Makefile src/fs/Makefile src/ftp/Makefile src/helper/Makefile src/http/Makefile src/http/one/Makefile src/http/url_rewriters/Makefile src/http/url_rewriters/fake/Makefile src/http/url_rewriters/LFS/Makefile src/icmp/Makefile src/ident/Makefile src/ip/Makefile src/ipc/Makefile src/log/Makefile src/log/DB/Makefile src/log/file/Makefile src/mem/Makefile src/mgr/Makefile src/parser/Makefile src/repl/Makefile src/sbuf/Makefile src/security/Makefile src/security/cert_generators/Makefile src/security/cert_generators/file/Makefile src/security/cert_validators/Makefile src/security/cert_validators/fake/Makefile src/servers/Makefile src/snmp/Makefile src/ssl/Makefile src/store/Makefile src/store/id_rewriters/Makefile src/store/id_rewriters/file/Makefile test-suite/Makefile tools/Makefile tools/apparmor/Makefile tools/helper-mux/Makefile tools/purge/Makefile tools/squidclient/Makefile tools/systemd/Makefile tools/sysvinit/Makefile"
 
 
 # must configure libltdl subdir unconditionally for "make distcheck" to work
 #AC_CONFIG_SUBDIRS(libltdl)
 
 cat >confcache <<\_ACEOF
@@ -43653,13 +43653,13 @@
 
 cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
 # Save the log message, to keep $0 and so on meaningful, and to
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by Squid Web Proxy $as_me 4.0.20, which was
+This file was extended by Squid Web Proxy $as_me 4.0.21, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
   CONFIG_HEADERS  = $CONFIG_HEADERS
   CONFIG_LINKS    = $CONFIG_LINKS
   CONFIG_COMMANDS = $CONFIG_COMMANDS
@@ -43719,13 +43719,13 @@
 Report bugs to <http://bugs.squid-cache.org/>."
 
 _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-Squid Web Proxy config.status 4.0.20
+Squid Web Proxy config.status 4.0.21
 configured by $0, generated by GNU Autoconf 2.69,
   with options \\"\$ac_cs_config\\"
 
 Copyright (C) 2012 Free Software Foundation, Inc.
 This config.status script is free software; the Free Software Foundation
 gives unlimited permission to copy, distribute and modify it."
@@ -44342,12 +44342,13 @@
     "src/ssl/Makefile") CONFIG_FILES="$CONFIG_FILES src/ssl/Makefile" ;;
     "src/store/Makefile") CONFIG_FILES="$CONFIG_FILES src/store/Makefile" ;;
     "src/store/id_rewriters/Makefile") CONFIG_FILES="$CONFIG_FILES src/store/id_rewriters/Makefile" ;;
     "src/store/id_rewriters/file/Makefile") CONFIG_FILES="$CONFIG_FILES src/store/id_rewriters/file/Makefile" ;;
     "test-suite/Makefile") CONFIG_FILES="$CONFIG_FILES test-suite/Makefile" ;;
     "tools/Makefile") CONFIG_FILES="$CONFIG_FILES tools/Makefile" ;;
+    "tools/apparmor/Makefile") CONFIG_FILES="$CONFIG_FILES tools/apparmor/Makefile" ;;
     "tools/helper-mux/Makefile") CONFIG_FILES="$CONFIG_FILES tools/helper-mux/Makefile" ;;
     "tools/purge/Makefile") CONFIG_FILES="$CONFIG_FILES tools/purge/Makefile" ;;
     "tools/squidclient/Makefile") CONFIG_FILES="$CONFIG_FILES tools/squidclient/Makefile" ;;
     "tools/systemd/Makefile") CONFIG_FILES="$CONFIG_FILES tools/systemd/Makefile" ;;
     "tools/sysvinit/Makefile") CONFIG_FILES="$CONFIG_FILES tools/sysvinit/Makefile" ;;
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/configure.ac /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/configure.ac
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/configure.ac	2017-06-01 21:01:44.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/configure.ac	2017-07-02 16:41:29.000000000 +0800
@@ -2,13 +2,13 @@
 ##
 ## Squid software is distributed under GPLv2+ license and includes
 ## contributions from numerous individuals and organizations.
 ## Please see the COPYING and CONTRIBUTORS files for details.
 ##
 
-AC_INIT([Squid Web Proxy],[4.0.20],[http://bugs.squid-cache.org/],[squid])
+AC_INIT([Squid Web Proxy],[4.0.21],[http://bugs.squid-cache.org/],[squid])
 AC_PREREQ(2.61)
 AC_CONFIG_HEADERS([include/autoconf.h])
 AC_CONFIG_AUX_DIR(cfgaux)
 AC_CONFIG_SRCDIR([src/main.cc])
 AM_INIT_AUTOMAKE([tar-ustar nostdinc subdir-objects])
 AC_REVISION($Revision$)dnl
@@ -3873,12 +3873,13 @@
 	src/ssl/Makefile
 	src/store/Makefile
 	src/store/id_rewriters/Makefile
 	src/store/id_rewriters/file/Makefile
 	test-suite/Makefile
 	tools/Makefile
+	tools/apparmor/Makefile
 	tools/helper-mux/Makefile
 	tools/purge/Makefile
 	tools/squidclient/Makefile
 	tools/systemd/Makefile
 	tools/sysvinit/Makefile
 ])
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/contrib/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/contrib/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/contrib/Makefile.in	2017-06-01 20:52:44.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/contrib/Makefile.in	2017-07-02 16:41:23.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/contrib/solaris/solaris-krb5-include.patch /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/contrib/solaris/solaris-krb5-include.patch
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/contrib/solaris/solaris-krb5-include.patch	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/contrib/solaris/solaris-krb5-include.patch	2017-07-02 16:41:18.000000000 +0800
@@ -1,6 +1,14 @@
+/*
+ * Copyright (C) 1996-2017 The Squid Software Foundation and contributors
+ *
+ * Squid software is distributed under GPLv2+ license and includes
+ * contributions from numerous individuals and organizations.
+ * Please see the COPYING and CONTRIBUTORS files for details.
+ */
+
 --- /usr/include/kerberosv5/krb5.h.orig	Mon Aug 23 04:09:23 2010
 +++ /usr/include/kerberosv5/krb5.h	Mon Aug 23 04:10:53 2010
 @@ -171,6 +171,7 @@
  #define KRB5INT_END_DECLS
  #endif
  #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/doc/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/doc/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/doc/Makefile.in	2017-06-01 20:52:46.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/doc/Makefile.in	2017-07-02 16:41:23.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/doc/manuals/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/doc/manuals/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/doc/manuals/Makefile.in	2017-06-01 20:52:48.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/doc/manuals/Makefile.in	2017-07-02 16:41:23.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/doc/release-notes/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/doc/release-notes/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/doc/release-notes/Makefile.in	2017-06-01 20:52:50.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/doc/release-notes/Makefile.in	2017-07-02 16:41:23.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/doc/release-notes/release-4.html /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/doc/release-notes/release-4.html
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/doc/release-notes/release-4.html	2017-06-02 05:49:09.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/doc/release-notes/release-4.html	2017-07-02 16:57:33.000000000 +0800
@@ -1,14 +1,14 @@
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
 <HTML>
 <HEAD>
  <META NAME="GENERATOR" CONTENT="LinuxDoc-Tools 0.9.72">
- <TITLE>Squid 4.0.20 release notes</TITLE>
+ <TITLE>Squid 4.0.21 release notes</TITLE>
 </HEAD>
 <BODY>
-<H1>Squid 4.0.20 release notes</H1>
+<H1>Squid 4.0.21 release notes</H1>
 
 <H2>Squid Developers</H2>
 <HR>
 <EM>This document contains the release notes for version 4 of Squid.
 Squid is a WWW Cache application developed by the National Laboratory
 for Applied Network Research and members of the Web Caching community.</EM>
@@ -59,13 +59,13 @@
 <H2><A NAME="toc6">6.</A> <A HREF="#s6">Copyright</A></H2>
 
 
 <HR>
 <H2><A NAME="s1">1.</A> <A HREF="#toc1">Notice</A></H2>
 
-<P>The Squid Team are pleased to announce the release of Squid-4.0.20 for testing.</P>
+<P>The Squid Team are pleased to announce the release of Squid-4.0.21 for testing.</P>
 <P>This new release is available for download from 
 <A HREF="http://www.squid-cache.org/Versions/v4/">http://www.squid-cache.org/Versions/v4/</A> or the
 <A HREF="http://www.squid-cache.org/Download/http-mirrors.html">mirrors</A>.</P>
 
 <P>While this release is not deemed ready for production use, we believe it is ready for wider testing by the community.</P>
 
@@ -234,16 +234,15 @@
 <P>The Squid process which places its PID into the squid.pid file has always
 been the process to which control signals are sent. The manager process is
 now taking on signal handling instead of the main daemon process. Enabling
 integration with daemon managers such as Upstart or systemd which assume the
 process they initiated is the daemon with a PID to control.</P>
 
-<P>The squid binary now has a new <EM>--foreground</EM> command line option
-which prevents the process from exiting early while background workers
-continue their processing. When run with this option Squid will now wait
-for the worker(s) to finish before exiting. Unlike the old <EM>-N</EM> option
+<P>The squid binary now has a new <EM>--foreground</EM> command line option,
+which (only) prevents daemonizing the master process.
+Unlike the old <EM>-N</EM> option,
 <EM>--foreground</EM> supports SMP workers and multi-process features.
 <EM>--foreground</EM> is particularly useful for use with <EM>-z</EM> (disk
 cache structures creation), as it allows the caller to wait until Squid has
 finished.</P>
 
 
@@ -339,12 +338,17 @@
 <P>New <EM>-m</EM> flag for <EM>note</EM> ACL to match substrings.</P>
 <P>New <EM>connections_encrypted</EM> type for matching transactions
 where all HTTP messages were received over TLS transport connections,
 including messages received from ICAP servers.</P>
 <P>New <EM>has</EM> type for matching whether or not Squid is able to provide
 certain sets of transaction state. For example HTTP reply headers.</P>
+<P>New <EM>transaction_initiator</EM> type for detecting various
+unusual transactions.</P>
+<P>New <EM>--consensus</EM>, <EM>--client-requested</EM> and
+<EM>--server-provided</EM> flags for the <EM>ssl::server_name</EM>
+type to control which server name to match against.</P>
 
 <DT><B>auth_param</B><DD>
 <P>New parameter <EM>queue-size=</EM> to set the maximum number
 of queued requests.</P>
 <P>New parameter <EM>on-persistent-overload=</EM> to set the action taken
 when the helper queue is overloaded.</P>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/errors/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/errors/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/errors/Makefile.in	2017-06-01 20:52:54.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/errors/Makefile.in	2017-07-02 16:41:23.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/errors/TRANSLATORS /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/errors/TRANSLATORS
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/errors/TRANSLATORS	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/errors/TRANSLATORS	2017-07-02 16:41:18.000000000 +0800
@@ -1,6 +1,12 @@
+ * Copyright (C) 1996-2017 The Squid Software Foundation and contributors
+ *
+ * Squid software is distributed under GPLv2+ license and includes
+ * contributions from numerous individuals and organizations.
+ * Please see the COPYING and CONTRIBUTORS files for details.
+
 Special thanks go to people who have volunteered their time, effort,
 and ideas to make Squid available as multi-langual software.
 
 	Adi Sudana
 	Aecio F. Neto
 	Alexandre Correa <ajcorrea@gmail.com>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/icons/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/icons/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/icons/Makefile.in	2017-06-01 20:52:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/icons/Makefile.in	2017-07-02 16:41:23.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/include/version.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/include/version.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/include/version.h	2017-06-01 21:01:44.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/include/version.h	2017-07-02 16:41:29.000000000 +0800
@@ -4,13 +4,13 @@
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_RELEASE_TIME
-#define SQUID_RELEASE_TIME 1496321346
+#define SQUID_RELEASE_TIME 1498984863
 #endif
 
 /*
  * String for version id of this distribution
  * is now the automake "VERSION" string.
  */
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/lib/libTrie/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/lib/libTrie/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/lib/libTrie/Makefile.in	2017-06-01 20:53:04.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/lib/libTrie/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/lib/libTrie/test/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/lib/libTrie/test/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/lib/libTrie/test/Makefile.in	2017-06-01 20:53:07.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/lib/libTrie/test/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/lib/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/lib/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/lib/Makefile.in	2017-06-01 20:53:01.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/lib/Makefile.in	2017-07-02 16:41:23.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/lib/ntlmauth/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/lib/ntlmauth/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/lib/ntlmauth/Makefile.in	2017-06-01 20:53:09.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/lib/ntlmauth/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/lib/profiler/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/lib/profiler/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/lib/profiler/Makefile.in	2017-06-01 20:53:16.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/lib/profiler/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/lib/rfcnb/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/lib/rfcnb/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/lib/rfcnb/Makefile.in	2017-06-01 20:53:19.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/lib/rfcnb/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/lib/smblib/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/lib/smblib/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/lib/smblib/Makefile.in	2017-06-01 20:53:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/lib/smblib/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/lib/snmplib/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/lib/snmplib/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/lib/snmplib/Makefile.in	2017-06-01 20:53:22.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/lib/snmplib/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/libltdl/aclocal.m4 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/libltdl/aclocal.m4
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/libltdl/aclocal.m4	2017-06-01 20:52:00.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/libltdl/aclocal.m4	2017-07-02 16:41:56.000000000 +0800
@@ -1,9 +1,9 @@
-# generated automatically by aclocal 1.15 -*- Autoconf -*-
+# generated automatically by aclocal 1.15.1 -*- Autoconf -*-
 
-# Copyright (C) 1996-2014 Free Software Foundation, Inc.
+# Copyright (C) 1996-2017 Free Software Foundation, Inc.
 
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
@@ -17,13 +17,13 @@
 m4_if(m4_defn([AC_AUTOCONF_VERSION]), [2.69],,
 [m4_warning([this file was generated for autoconf 2.69.
 You have another version of autoconf.  It may work, but is not guaranteed to.
 If you have problems, you may need to regenerate the build system entirely.
 To do so, use the procedure documented by the package, typically 'autoreconf'.])])
 
-# Copyright (C) 2002-2014 Free Software Foundation, Inc.
+# Copyright (C) 2002-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_AUTOMAKE_VERSION(VERSION)
@@ -32,13 +32,13 @@
 # generated from the m4 files accompanying Automake X.Y.
 # (This private macro should not be called outside this file.)
 AC_DEFUN([AM_AUTOMAKE_VERSION],
 [am__api_version='1.15'
 dnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to
 dnl require some minimum version.  Point them to the right macro.
-m4_if([$1], [1.15], [],
+m4_if([$1], [1.15.1], [],
       [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl
 ])
 
 # _AM_AUTOCONF_VERSION(VERSION)
 # -----------------------------
 # aclocal traces this macro to find the Autoconf version.
@@ -48,20 +48,20 @@
 
 # AM_SET_CURRENT_AUTOMAKE_VERSION
 # -------------------------------
 # Call AM_AUTOMAKE_VERSION and AM_AUTOMAKE_VERSION so they can be traced.
 # This function is AC_REQUIREd by AM_INIT_AUTOMAKE.
 AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],
-[AM_AUTOMAKE_VERSION([1.15])dnl
+[AM_AUTOMAKE_VERSION([1.15.1])dnl
 m4_ifndef([AC_AUTOCONF_VERSION],
   [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl
 _AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])
 
 # AM_AUX_DIR_EXPAND                                         -*- Autoconf -*-
 
-# Copyright (C) 2001-2014 Free Software Foundation, Inc.
+# Copyright (C) 2001-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # For projects using AC_CONFIG_AUX_DIR([foo]), Autoconf sets
@@ -107,13 +107,13 @@
 # Expand $ac_aux_dir to an absolute path.
 am_aux_dir=`cd "$ac_aux_dir" && pwd`
 ])
 
 # AM_CONDITIONAL                                            -*- Autoconf -*-
 
-# Copyright (C) 1997-2014 Free Software Foundation, Inc.
+# Copyright (C) 1997-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_CONDITIONAL(NAME, SHELL-CONDITION)
@@ -138,13 +138,13 @@
 AC_CONFIG_COMMANDS_PRE(
 [if test -z "${$1_TRUE}" && test -z "${$1_FALSE}"; then
   AC_MSG_ERROR([[conditional "$1" was never defined.
 Usually this means the macro was only invoked conditionally.]])
 fi])])
 
-# Copyright (C) 1999-2014 Free Software Foundation, Inc.
+# Copyright (C) 1999-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 
@@ -329,13 +329,13 @@
 AC_SUBST([am__nodep])dnl
 _AM_SUBST_NOTMAKE([am__nodep])dnl
 ])
 
 # Generate code to set up dependency tracking.              -*- Autoconf -*-
 
-# Copyright (C) 1999-2014 Free Software Foundation, Inc.
+# Copyright (C) 1999-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 
@@ -405,13 +405,13 @@
      [test x"$AMDEP_TRUE" != x"" || _AM_OUTPUT_DEPENDENCY_COMMANDS],
      [AMDEP_TRUE="$AMDEP_TRUE" ac_aux_dir="$ac_aux_dir"])
 ])
 
 # Do all the work for Automake.                             -*- Autoconf -*-
 
-# Copyright (C) 1996-2014 Free Software Foundation, Inc.
+# Copyright (C) 1996-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This macro actually does too much.  Some checks are only needed if
@@ -602,13 +602,13 @@
     * )
       _am_stamp_count=`expr $_am_stamp_count + 1` ;;
   esac
 done
 echo "timestamp for $_am_arg" >`AS_DIRNAME(["$_am_arg"])`/stamp-h[]$_am_stamp_count])
 
-# Copyright (C) 2001-2014 Free Software Foundation, Inc.
+# Copyright (C) 2001-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_PROG_INSTALL_SH
@@ -623,13 +623,13 @@
   *)
     install_sh="\${SHELL} $am_aux_dir/install-sh"
   esac
 fi
 AC_SUBST([install_sh])])
 
-# Copyright (C) 2003-2014 Free Software Foundation, Inc.
+# Copyright (C) 2003-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # Check whether the underlying file-system supports filenames
@@ -644,13 +644,13 @@
 fi
 rmdir .tst 2>/dev/null
 AC_SUBST([am__leading_dot])])
 
 # Check to see how 'make' treats includes.	            -*- Autoconf -*-
 
-# Copyright (C) 2001-2014 Free Software Foundation, Inc.
+# Copyright (C) 2001-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_MAKE_INCLUDE()
@@ -694,13 +694,13 @@
 AC_MSG_RESULT([$_am_result])
 rm -f confinc confmf
 ])
 
 # Fake the existence of programs that GNU maintainers use.  -*- Autoconf -*-
 
-# Copyright (C) 1997-2014 Free Software Foundation, Inc.
+# Copyright (C) 1997-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_MISSING_PROG(NAME, PROGRAM)
@@ -733,13 +733,13 @@
   AC_MSG_WARN(['missing' script is too old or missing])
 fi
 ])
 
 # Helper functions for option handling.                     -*- Autoconf -*-
 
-# Copyright (C) 2001-2014 Free Software Foundation, Inc.
+# Copyright (C) 2001-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # _AM_MANGLE_OPTION(NAME)
@@ -762,13 +762,13 @@
 # _AM_IF_OPTION(OPTION, IF-SET, [IF-NOT-SET])
 # -------------------------------------------
 # Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.
 AC_DEFUN([_AM_IF_OPTION],
 [m4_ifset(_AM_MANGLE_OPTION([$1]), [$2], [$3])])
 
-# Copyright (C) 1999-2014 Free Software Foundation, Inc.
+# Copyright (C) 1999-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # _AM_PROG_CC_C_O
@@ -809,13 +809,13 @@
 fi
 AC_LANG_POP([C])])
 
 # For backward compatibility.
 AC_DEFUN_ONCE([AM_PROG_CC_C_O], [AC_REQUIRE([AC_PROG_CC])])
 
-# Copyright (C) 2001-2014 Free Software Foundation, Inc.
+# Copyright (C) 2001-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_RUN_LOG(COMMAND)
@@ -828,13 +828,13 @@
    ac_status=$?
    echo "$as_me:$LINENO: \$? = $ac_status" >&AS_MESSAGE_LOG_FD
    (exit $ac_status); }])
 
 # Check to make sure that the build environment is sane.    -*- Autoconf -*-
 
-# Copyright (C) 1996-2014 Free Software Foundation, Inc.
+# Copyright (C) 1996-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_SANITY_CHECK
@@ -909,13 +909,13 @@
      wait $am_sleep_pid 2>/dev/null
    fi
    AC_MSG_RESULT([done])])
 rm -f conftest.file
 ])
 
-# Copyright (C) 2009-2014 Free Software Foundation, Inc.
+# Copyright (C) 2009-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_SILENT_RULES([DEFAULT])
@@ -969,13 +969,13 @@
 AC_SUBST([AM_DEFAULT_VERBOSITY])dnl
 AM_BACKSLASH='\'
 AC_SUBST([AM_BACKSLASH])dnl
 _AM_SUBST_NOTMAKE([AM_BACKSLASH])dnl
 ])
 
-# Copyright (C) 2001-2014 Free Software Foundation, Inc.
+# Copyright (C) 2001-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # AM_PROG_INSTALL_STRIP
@@ -997,13 +997,13 @@
 if test "$cross_compiling" != no; then
   AC_CHECK_TOOL([STRIP], [strip], :)
 fi
 INSTALL_STRIP_PROGRAM="\$(install_sh) -c -s"
 AC_SUBST([INSTALL_STRIP_PROGRAM])])
 
-# Copyright (C) 2006-2014 Free Software Foundation, Inc.
+# Copyright (C) 2006-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # _AM_SUBST_NOTMAKE(VARIABLE)
@@ -1016,13 +1016,13 @@
 # --------------------------
 # Public sister of _AM_SUBST_NOTMAKE.
 AC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])
 
 # Check how to create a tarball.                            -*- Autoconf -*-
 
-# Copyright (C) 2004-2014 Free Software Foundation, Inc.
+# Copyright (C) 2004-2017 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # _AM_PROG_TAR(FORMAT)
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/libltdl/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/libltdl/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/libltdl/Makefile.in	2017-06-01 21:18:08.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/libltdl/Makefile.in	2017-07-02 16:41:56.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
@@ -930,13 +930,13 @@
 		-exec chmod u+rwx,go+rx {} \; -o \
 	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
 	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
 	  ! -type d ! -perm -444 -exec $(install_sh) -c -m a+r {} {} \; \
 	|| chmod -R a+r "$(distdir)"
 dist-gzip: distdir
-	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
+	tardir=$(distdir) && $(am__tar) | eval GZIP= gzip $(GZIP_ENV) -c >$(distdir).tar.gz
 	$(am__post_remove_distdir)
 
 dist-bzip2: distdir
 	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2
 	$(am__post_remove_distdir)
 
@@ -956,13 +956,13 @@
 	$(am__post_remove_distdir)
 
 dist-shar: distdir
 	@echo WARNING: "Support for shar distribution archives is" \
 	               "deprecated." >&2
 	@echo WARNING: "It will be removed altogether in Automake 2.0" >&2
-	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
+	shar $(distdir) | eval GZIP= gzip $(GZIP_ENV) -c >$(distdir).shar.gz
 	$(am__post_remove_distdir)
 
 dist-zip: distdir
 	-rm -f $(distdir).zip
 	zip -rq $(distdir).zip $(distdir)
 	$(am__post_remove_distdir)
@@ -974,23 +974,23 @@
 # This target untars the dist file and tries a VPATH configuration.  Then
 # it guarantees that the distribution is self-contained by making another
 # tarfile.
 distcheck: dist
 	case '$(DIST_ARCHIVES)' in \
 	*.tar.gz*) \
-	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).tar.gz | $(am__untar) ;;\
+	  eval GZIP= gzip $(GZIP_ENV) -dc $(distdir).tar.gz | $(am__untar) ;;\
 	*.tar.bz2*) \
 	  bzip2 -dc $(distdir).tar.bz2 | $(am__untar) ;;\
 	*.tar.lz*) \
 	  lzip -dc $(distdir).tar.lz | $(am__untar) ;;\
 	*.tar.xz*) \
 	  xz -dc $(distdir).tar.xz | $(am__untar) ;;\
 	*.tar.Z*) \
 	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
 	*.shar.gz*) \
-	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).shar.gz | unshar ;;\
+	  eval GZIP= gzip $(GZIP_ENV) -dc $(distdir).shar.gz | unshar ;;\
 	*.zip*) \
 	  unzip $(distdir).zip ;;\
 	esac
 	chmod -R a-w $(distdir)
 	chmod u+w $(distdir)
 	mkdir $(distdir)/_build $(distdir)/_build/sub $(distdir)/_inst
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/Makefile.in	2017-06-01 20:52:41.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/Makefile.in	2017-07-02 16:41:23.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
@@ -743,13 +743,13 @@
 		-exec chmod u+rwx,go+rx {} \; -o \
 	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
 	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
 	  ! -type d ! -perm -444 -exec $(install_sh) -c -m a+r {} {} \; \
 	|| chmod -R a+r "$(distdir)"
 dist-gzip: distdir
-	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
+	tardir=$(distdir) && $(am__tar) | eval GZIP= gzip $(GZIP_ENV) -c >$(distdir).tar.gz
 	$(am__post_remove_distdir)
 dist-bzip2: distdir
 	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2
 	$(am__post_remove_distdir)
 
 dist-lzip: distdir
@@ -768,13 +768,13 @@
 	$(am__post_remove_distdir)
 
 dist-shar: distdir
 	@echo WARNING: "Support for shar distribution archives is" \
 	               "deprecated." >&2
 	@echo WARNING: "It will be removed altogether in Automake 2.0" >&2
-	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
+	shar $(distdir) | eval GZIP= gzip $(GZIP_ENV) -c >$(distdir).shar.gz
 	$(am__post_remove_distdir)
 
 dist-zip: distdir
 	-rm -f $(distdir).zip
 	zip -rq $(distdir).zip $(distdir)
 	$(am__post_remove_distdir)
@@ -786,23 +786,23 @@
 # This target untars the dist file and tries a VPATH configuration.  Then
 # it guarantees that the distribution is self-contained by making another
 # tarfile.
 distcheck: dist
 	case '$(DIST_ARCHIVES)' in \
 	*.tar.gz*) \
-	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).tar.gz | $(am__untar) ;;\
+	  eval GZIP= gzip $(GZIP_ENV) -dc $(distdir).tar.gz | $(am__untar) ;;\
 	*.tar.bz2*) \
 	  bzip2 -dc $(distdir).tar.bz2 | $(am__untar) ;;\
 	*.tar.lz*) \
 	  lzip -dc $(distdir).tar.lz | $(am__untar) ;;\
 	*.tar.xz*) \
 	  xz -dc $(distdir).tar.xz | $(am__untar) ;;\
 	*.tar.Z*) \
 	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
 	*.shar.gz*) \
-	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).shar.gz | unshar ;;\
+	  eval GZIP= gzip $(GZIP_ENV) -dc $(distdir).shar.gz | unshar ;;\
 	*.zip*) \
 	  unzip $(distdir).zip ;;\
 	esac
 	chmod -R a-w $(distdir)
 	chmod u+w $(distdir)
 	mkdir $(distdir)/_build $(distdir)/_build/sub $(distdir)/_inst
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/po4a.conf /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/po4a.conf
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/po4a.conf	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/po4a.conf	2017-07-02 16:41:18.000000000 +0800
@@ -1,47 +1,51 @@
 [po4a_langs] ar cs de en en_AU ru
 
 [po4a_paths] doc/manuals/manuals.pot $lang:doc/manuals/$lang.po
 
-[type: man] helpers/basic_auth/getpwnam/basic_getpwnam_auth.8 $lang:doc/manuals/$lang/basic_getpwnam_auth.8
+[type: man] src/acl/external/AD_group/ext_ad_group_acl.8 $lang:doc/manuals/$lang/ext_ad_group_acl.8
 
-[type: man] helpers/basic_auth/LDAP/basic_ldap_auth.8 $lang:doc/manuals/$lang/basic_ldap_auth.8
+[type: man] src/acl/external/eDirectory_userip/ext_edirectory_userip_acl.8 $lang:doc/manuals/$lang/ext_edirectory_userip_acl.8
 
-[type: man] helpers/basic_auth/NCSA/basic_ncsa_auth.8 $lang:doc/manuals/$lang/basic_ncsa_auth.8
+[type: man] src/acl/external/file_userip/ext_file_userip_acl.8 $lang:doc/manuals/$lang/ext_file_userip_acl.8
 
-[type: man] helpers/basic_auth/PAM/basic_pam_auth.8 $lang:doc/manuals/$lang/basic_pam_auth.8
+[type: man] src/acl/external/kerberos_ldap_group/ext_kerberos_ldap_group_acl.8 $lang:doc/manuals/$lang/ext_kerberos_ldap_group_acl.8
 
-[type: man] helpers/basic_auth/RADIUS/basic_radius_auth.8 $lang:doc/manuals/$lang/basic_radius_auth.8
+[type: man] src/acl/external/LDAP_group/ext_ldap_group_acl.8 $lang:doc/manuals/$lang/ext_ldap_group_acl.8
 
-[type: man] helpers/basic_auth/SASL/basic_sasl_auth.8 $lang:doc/manuals/$lang/basic_sasl_auth.8
+[type: man] src/acl/external/LM_group/ext_lm_group_acl.8 $lang:doc/manuals/$lang/ext_lm_group_acl.8
 
-[type: man] helpers/basic_auth/SSPI/basic_sspi_auth.8 $lang:doc/manuals/$lang/basic_sspi_auth.8
+[type: man] src/acl/external/session/ext_session_acl.8 $lang:doc/manuals/$lang/ext_session_acl.8
 
-[type: man] helpers/digest_auth/file/digest_file_auth.8 $lang:doc/manuals/$lang/digest_file_auth.8
+[type: man] src/acl/external/time_quota/ext_time_quota_acl.8 $lang:doc/manuals/$lang/ext_time_quota_acl.8
 
-[type: man] helpers/external_acl/AD_group/ext_ad_group_acl.8 $lang:doc/manuals/$lang/ext_ad_group_acl.8
+[type: man] src/acl/external/unix_group/ext_unix_group_acl.8 $lang:doc/manuals/$lang/ext_unix_group_acl.8
 
-[type: man] helpers/external_acl/eDirectory_userip/ext_edirectory_userip_acl.8 $lang:doc/manuals/$lang/ext_edirectory_userip_acl.8
+[type: man] src/auth/basic/getpwnam/basic_getpwnam_auth.8 $lang:doc/manuals/$lang/basic_getpwnam_auth.8
 
-[type: man] helpers/external_acl/file_userip/ext_file_userip_acl.8 $lang:doc/manuals/$lang/ext_file_userip_acl.8
+[type: man] src/auth/basic/LDAP/basic_ldap_auth.8 $lang:doc/manuals/$lang/basic_ldap_auth.8
 
-[type: man] helpers/external_acl/kerberos_ldap_group/ext_kerberos_ldap_group_acl.8 $lang:doc/manuals/$lang/ext_kerberos_ldap_group_acl.8
+[type: man] src/auth/basic/NCSA/basic_ncsa_auth.8 $lang:doc/manuals/$lang/basic_ncsa_auth.8
 
-[type: man] helpers/external_acl/LDAP_group/ext_ldap_group_acl.8 $lang:doc/manuals/$lang/ext_ldap_group_acl.8
+[type: man] src/auth/basic/PAM/basic_pam_auth.8 $lang:doc/manuals/$lang/basic_pam_auth.8
 
-[type: man] helpers/external_acl/LM_group/ext_lm_group_acl.8 $lang:doc/manuals/$lang/ext_lm_group_acl.8
+[type: man] src/auth/basic/RADIUS/basic_radius_auth.8 $lang:doc/manuals/$lang/basic_radius_auth.8
 
-[type: man] helpers/external_acl/session/ext_session_acl.8 $lang:doc/manuals/$lang/ext_session_acl.8
+[type: man] src/auth/basic/SASL/basic_sasl_auth.8 $lang:doc/manuals/$lang/basic_sasl_auth.8
 
-[type: man] helpers/external_acl/time_quota/ext_time_quota_acl.8 $lang:doc/manuals/$lang/ext_time_quota_acl.8
+[type: man] src/auth/basic/SSPI/basic_sspi_auth.8 $lang:doc/manuals/$lang/basic_sspi_auth.8
 
-[type: man] helpers/external_acl/unix_group/ext_unix_group_acl.8 $lang:doc/manuals/$lang/ext_unix_group_acl.8
+[type: man] src/auth/digest/file/digest_file_auth.8 $lang:doc/manuals/$lang/digest_file_auth.8
 
-[type: man] helpers/negotiate_auth/kerberos/negotiate_kerberos_auth.8 $lang:doc/manuals/$lang/negotiate_kerberos_auth.8
+[type: man] src/auth/negotiate/kerberos/negotiate_kerberos_auth.8 $lang:doc/manuals/$lang/negotiate_kerberos_auth.8
 
-[type: man] helpers/ntlm_auth/SSPI/ntlm_sspi_auth.8 $lang:doc/manuals/$lang/ntlm_sspi_auth.8
+[type: man] src/auth/ntlm/SSPI/ntlm_sspi_auth.8 $lang:doc/manuals/$lang/ntlm_sspi_auth.8
+
+[type: man] src/security/cert_generators/file/security_file_certgen.8.in $lang:doc/manuals/$lang/security_file_certgen.8.in
 
 [type: man] src/squid.8.in $lang:doc/manuals/$lang/squid.8.in
 
 [type: man] tools/cachemgr.cgi.8.in $lang:doc/manuals/$lang/cachemgr.cgi.8.in
 
+[type: man] tools/purge/purge.1 $lang:doc/manuals/$lang/purge.1
+
 [type: man] tools/squidclient/squidclient.1 $lang:doc/manuals/$lang/squidclient.1
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/RELEASENOTES.html /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/RELEASENOTES.html
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/RELEASENOTES.html	2017-06-02 05:49:09.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/RELEASENOTES.html	2017-07-02 16:57:33.000000000 +0800
@@ -1,14 +1,14 @@
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
 <HTML>
 <HEAD>
  <META NAME="GENERATOR" CONTENT="LinuxDoc-Tools 0.9.72">
- <TITLE>Squid 4.0.20 release notes</TITLE>
+ <TITLE>Squid 4.0.21 release notes</TITLE>
 </HEAD>
 <BODY>
-<H1>Squid 4.0.20 release notes</H1>
+<H1>Squid 4.0.21 release notes</H1>
 
 <H2>Squid Developers</H2>
 <HR>
 <EM>This document contains the release notes for version 4 of Squid.
 Squid is a WWW Cache application developed by the National Laboratory
 for Applied Network Research and members of the Web Caching community.</EM>
@@ -59,13 +59,13 @@
 <H2><A NAME="toc6">6.</A> <A HREF="#s6">Copyright</A></H2>
 
 
 <HR>
 <H2><A NAME="s1">1.</A> <A HREF="#toc1">Notice</A></H2>
 
-<P>The Squid Team are pleased to announce the release of Squid-4.0.20 for testing.</P>
+<P>The Squid Team are pleased to announce the release of Squid-4.0.21 for testing.</P>
 <P>This new release is available for download from 
 <A HREF="http://www.squid-cache.org/Versions/v4/">http://www.squid-cache.org/Versions/v4/</A> or the
 <A HREF="http://www.squid-cache.org/Download/http-mirrors.html">mirrors</A>.</P>
 
 <P>While this release is not deemed ready for production use, we believe it is ready for wider testing by the community.</P>
 
@@ -234,16 +234,15 @@
 <P>The Squid process which places its PID into the squid.pid file has always
 been the process to which control signals are sent. The manager process is
 now taking on signal handling instead of the main daemon process. Enabling
 integration with daemon managers such as Upstart or systemd which assume the
 process they initiated is the daemon with a PID to control.</P>
 
-<P>The squid binary now has a new <EM>--foreground</EM> command line option
-which prevents the process from exiting early while background workers
-continue their processing. When run with this option Squid will now wait
-for the worker(s) to finish before exiting. Unlike the old <EM>-N</EM> option
+<P>The squid binary now has a new <EM>--foreground</EM> command line option,
+which (only) prevents daemonizing the master process.
+Unlike the old <EM>-N</EM> option,
 <EM>--foreground</EM> supports SMP workers and multi-process features.
 <EM>--foreground</EM> is particularly useful for use with <EM>-z</EM> (disk
 cache structures creation), as it allows the caller to wait until Squid has
 finished.</P>
 
 
@@ -339,12 +338,17 @@
 <P>New <EM>-m</EM> flag for <EM>note</EM> ACL to match substrings.</P>
 <P>New <EM>connections_encrypted</EM> type for matching transactions
 where all HTTP messages were received over TLS transport connections,
 including messages received from ICAP servers.</P>
 <P>New <EM>has</EM> type for matching whether or not Squid is able to provide
 certain sets of transaction state. For example HTTP reply headers.</P>
+<P>New <EM>transaction_initiator</EM> type for detecting various
+unusual transactions.</P>
+<P>New <EM>--consensus</EM>, <EM>--client-requested</EM> and
+<EM>--server-provided</EM> flags for the <EM>ssl::server_name</EM>
+type to control which server name to match against.</P>
 
 <DT><B>auth_param</B><DD>
 <P>New parameter <EM>queue-size=</EM> to set the maximum number
 of queued requests.</P>
 <P>New parameter <EM>on-persistent-overload=</EM> to set the action taken
 when the helper queue is overloaded.</P>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/scripts/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/scripts/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/scripts/Makefile.in	2017-06-01 20:53:23.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/scripts/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Acl.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Acl.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Acl.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Acl.cc	2017-07-02 16:41:18.000000000 +0800
@@ -9,193 +9,74 @@
 /* DEBUG: section 28    Access Control */
 
 #include "squid.h"
 #include "acl/Acl.h"
 #include "acl/Checklist.h"
 #include "acl/Gadgets.h"
+#include "acl/Options.h"
 #include "anyp/PortCfg.h"
 #include "cache_cf.h"
 #include "ConfigParser.h"
 #include "Debug.h"
-#include "dlink.h"
 #include "fatal.h"
 #include "globals.h"
 #include "profiler/Profiler.h"
+#include "sbuf/List.h"
+#include "sbuf/Stream.h"
 #include "SquidConfig.h"
 
-#include <vector>
-
-#define abortFlags(CONTENT) \
-   do { \
-    debugs(28, 0, CONTENT); \
-    self_destruct(); \
-   } while (0)
-
-const ACLFlag ACLFlags::NoFlags[1] = {ACL_F_END};
+#include <algorithm>
+#include <map>
 
 const char *AclMatchedName = NULL;
 
-ACLFlags::FlagsTokenizer::FlagsTokenizer(): tokPos(NULL) { }
+namespace Acl {
 
-ACLFlag
-ACLFlags::FlagsTokenizer::nextFlag()
-{
-    if (needNextToken()) {
-        if (!nextToken())
-            return 0;
-    } else
-        ++tokPos;
-    return *tokPos;
-}
-
-bool
-ACLFlags::FlagsTokenizer::hasParameter() const
-{
-    return tokPos && tokPos[0] && tokPos[1] == '=' && tokPos[2];
-}
+/// ACL type name comparison functor
+class TypeNameCmp {
+public:
+    bool operator()(TypeName a, TypeName b) const { return strcmp(a, b) < 0; }
+};
 
-SBuf
-ACLFlags::FlagsTokenizer::getParameter() const
-{
-    return hasParameter() ? SBuf(&tokPos[2]) : SBuf();
-}
+/// ACL makers indexed by ACL type name
+typedef std::map<TypeName, Maker, TypeNameCmp> Makers;
 
-bool
-ACLFlags::FlagsTokenizer::needNextToken() const
+/// registered ACL Makers
+static Makers &
+TheMakers()
 {
-    return !tokPos || !tokPos[0] || !tokPos[1] || tokPos[1] == '=';
-}
-
-bool
-ACLFlags::FlagsTokenizer::nextToken()
-{
-    char *t = ConfigParser::PeekAtToken();
-    if (t == NULL || t[0] != '-' || !t[1])
-        return false;
-    (void)ConfigParser::NextQuotedToken();
-    if (strcmp(t, "--") == 0)
-        return false;
-    tokPos = t + 1;
-    return true;
-}
-
-ACLFlags::~ACLFlags()
-{
-    delete delimiters_;
-}
-
-ACLFlags::Status
-ACLFlags::flagStatus(const ACLFlag f) const
-{
-    if (f == ACL_F_REGEX_CASE)
-        return noParameter;
-    if (f == ACL_F_SUBSTRING)
-        return parameterOptional;
-    if (supported_.find(f) != std::string::npos)
-        return noParameter;
-    return notSupported;
-}
-
-bool
-ACLFlags::parameterSupported(const ACLFlag f, const SBuf &val) const
-{
-    if (f == ACL_F_SUBSTRING)
-        return val.findFirstOf(CharacterSet::ALPHA + CharacterSet::DIGIT) == SBuf::npos;
-    return true;
+    static Makers Registry;
+    return Registry;
 }
 
-void
-ACLFlags::makeSet(const ACLFlag f, const SBuf &param)
-{
-    flags_ |= flagToInt(f);
-    if (!param.isEmpty())
-        flagParameters_[f].append(param);
-}
-
-void
-ACLFlags::makeUnSet(const ACLFlag f)
-{
-    flags_ &= ~flagToInt(f);
-    flagParameters_[f].clear();
-}
-
-void
-ACLFlags::parseFlags()
+/// creates an ACL object of the named (and already registered) ACL child type
+static
+ACL *
+Make(TypeName typeName)
 {
-    FlagsTokenizer tokenizer;
-    ACLFlag flag('\0');
-    while ((flag = tokenizer.nextFlag())) {
-        switch (flagStatus(flag))
-        {
-        case notSupported:
-            abortFlags("Flag '" << flag << "' not supported");
-            break;
-        case noParameter:
-            makeSet(flag);
-            break;
-        case parameterRequired:
-            if (!tokenizer.hasParameter()) {
-                abortFlags("Flag '" << flag << "' must have a parameter");
-                break;
-            }
-        case parameterOptional:
-            SBuf param;
-            if (tokenizer.hasParameter()) {
-                param = tokenizer.getParameter();
-                if (!parameterSupported(flag, param))
-                    abortFlags("Parameter '" << param << "' for flag '" << flag << "' not supported");
-            }
-            makeSet(flag, param);
-            break;
-        }
-    }
-
-    /*Regex code needs to parse -i file*/
-    if ( isSet(ACL_F_REGEX_CASE)) {
-        ConfigParser::TokenPutBack("-i");
-        makeUnSet('i');
+    const auto pos = TheMakers().find(typeName);
+    if (pos == TheMakers().end()) {
+        debugs(28, DBG_CRITICAL, "FATAL: Invalid ACL type '" << typeName << "'");
+        self_destruct();
+        assert(false); // not reached
     }
-}
 
-SBuf
-ACLFlags::parameter(const ACLFlag f) const
-{
-    assert(static_cast<uint32_t>(f - 'A') < FlagIndexMax);
-    auto p = flagParameters_.find(f);
-    return p == flagParameters_.end() ? SBuf() : p->second;
+    ACL *result = (pos->second)(pos->first);
+    debugs(28, 4, typeName << '=' << result);
+    assert(result);
+    return result;
 }
 
-const CharacterSet *
-ACLFlags::delimiters()
-{
-    if (isSet(ACL_F_SUBSTRING) && !delimiters_) {
-        static const SBuf defaultParameter(",");
-        SBuf rawParameter = parameter(ACL_F_SUBSTRING);
-        if (rawParameter.isEmpty())
-            rawParameter = defaultParameter;
-        delimiters_ = new CharacterSet("ACLFlags::delimiters", rawParameter.c_str());
-    }
-    return delimiters_;
-}
+} // namespace Acl
 
-const char *
-ACLFlags::flagsStr() const
+void
+Acl::RegisterMaker(TypeName typeName, Maker maker)
 {
-    static char buf[64];
-    if (flags_ == 0)
-        return "";
-
-    char *s = buf;
-    *s++ = '-';
-    for (ACLFlag f = 'A'; f <= 'z'; f++) {
-        // ACL_F_REGEX_CASE (-i) flag handled by ACLRegexData class, ignore
-        if (isSet(f) && f != ACL_F_REGEX_CASE)
-            *s++ = f;
-    }
-    *s = '\0';
-    return buf;
+    assert(typeName);
+    assert(*typeName);
+    TheMakers().emplace(typeName, maker);
 }
 
 void *
 ACL::operator new (size_t)
 {
     fatal ("unusable ACL::new");
@@ -220,40 +101,20 @@
 
     debugs(28, 9, "ACL::FindByName found no match");
 
     return NULL;
 }
 
-ACL *
-ACL::Factory (char const *type)
-{
-    ACL *result = Prototype::Factory (type);
-
-    if (!result)
-        fatal ("Unknown acl type in ACL::Factory");
-
-    return result;
-}
-
 ACL::ACL() :
     cfgline(nullptr),
     next(nullptr),
     registered(false)
 {
     *name = 0;
 }
 
-ACL::ACL(const ACLFlag flgs[]) :
-    cfgline(NULL),
-    next(NULL),
-    flags(flgs),
-    registered(false)
-{
-    *name = 0;
-}
-
 bool ACL::valid () const
 {
     return true;
 }
 
 bool
@@ -362,22 +223,15 @@
     } else if (strcmp(theType, "proto") == 0 && strcmp(aclname, "manager") == 0) {
         // ACL manager is now a built-in and has a different type.
         debugs(28, DBG_PARSE_NOTE(DBG_IMPORTANT), "UPGRADE: ACL 'manager' is now a built-in ACL. Remove it from your config file.");
         return; // ignore the line
     }
 
-    if (!Prototype::Registered(theType)) {
-        debugs(28, DBG_CRITICAL, "FATAL: Invalid ACL type '" << theType << "'");
-        // XXX: make this an ERROR and skip the ACL creation. We *may* die later when its use is attempted. Or may not.
-        parser.destruct();
-        return;
-    }
-
     if ((A = FindByName(aclname)) == NULL) {
         debugs(28, 3, "aclParseAclLine: Creating ACL '" << aclname << "'");
-        A = ACL::Factory(theType);
+        A = Acl::Make(theType);
         A->context(aclname, config_input_line);
         new_acl = 1;
     } else {
         if (strcmp (A->typeString(),theType) ) {
             debugs(28, DBG_CRITICAL, "aclParseAclLine: ACL '" << A->name << "' already exists with different type.");
             parser.destruct();
@@ -391,13 +245,13 @@
     /*
      * Here we set AclMatchedName in case we need to use it in a
      * warning message in aclDomainCompare().
      */
     AclMatchedName = A->name;   /* ugly */
 
-    A->flags.parseFlags();
+    A->parseFlags();
 
     /*split the function here */
     A->parse();
 
     /*
      * Clear AclMatchedName from our temporary hack
@@ -428,12 +282,36 @@
 bool
 ACL::isProxyAuth() const
 {
     return false;
 }
 
+void
+ACL::parseFlags()
+{
+    // ACL kids that carry ACLData which supports parameter flags override this
+    Acl::ParseFlags(options(), Acl::NoFlags());
+}
+
+SBufList
+ACL::dumpOptions()
+{
+    SBufList result;
+    const auto &myOptions = options();
+    // optimization: most ACLs do not have myOptions
+    // this check also works around dump_SBufList() adding ' ' after empty items
+    if (!myOptions.empty()) {
+        SBufStream stream;
+        stream << myOptions;
+        const SBuf optionsImage = stream.buf();
+        if (!optionsImage.isEmpty())
+            result.push_back(optionsImage);
+    }
+    return result;
+}
+
 /* ACL result caching routines */
 
 int
 ACL::matchForCache(ACLChecklist *)
 {
     /* This is a fatal to ensure that cacheMatchAcl calls are _only_
@@ -519,75 +397,12 @@
 {
     debugs(28, 3, "freeing ACL " << name);
     safe_free(cfgline);
     AclMatchedName = NULL; // in case it was pointing to our name
 }
 
-ACL::Prototype::Prototype() : prototype (NULL), typeString (NULL) {}
-
-ACL::Prototype::Prototype (ACL const *aPrototype, char const *aType) : prototype (aPrototype), typeString (aType)
-{
-    registerMe ();
-}
-
-std::vector<ACL::Prototype const *> * ACL::Prototype::Registry;
-void *ACL::Prototype::Initialized;
-
-bool
-ACL::Prototype::Registered(char const *aType)
-{
-    debugs(28, 7, "ACL::Prototype::Registered: invoked for type " << aType);
-
-    for (iterator i = Registry->begin(); i != Registry->end(); ++i)
-        if (!strcmp (aType, (*i)->typeString)) {
-            debugs(28, 7, "ACL::Prototype::Registered:    yes");
-            return true;
-        }
-
-    debugs(28, 7, "ACL::Prototype::Registered:    no");
-    return false;
-}
-
-void
-ACL::Prototype::registerMe ()
-{
-    if (!Registry || (Initialized != ((char *)Registry - 5))  ) {
-        /* TODO: extract this */
-        /* Not initialised */
-        Registry = new std::vector<ACL::Prototype const *>;
-        Initialized = (char *)Registry - 5;
-    }
-
-    if (Registered (typeString))
-        fatalf ("Attempt to register %s twice", typeString);
-
-    Registry->push_back (this);
-}
-
-ACL::Prototype::~Prototype()
-{
-    // TODO: unregister me
-}
-
-ACL *
-ACL::Prototype::Factory (char const *typeToClone)
-{
-    debugs(28, 4, "ACL::Prototype::Factory: cloning an object for type '" << typeToClone << "'");
-
-    for (iterator i = Registry->begin(); i != Registry->end(); ++i)
-        if (!strcmp (typeToClone, (*i)->typeString)) {
-            ACL *A = (*i)->prototype->clone();
-            A->flags = (*i)->prototype->flags;
-            return A;
-        }
-
-    debugs(28, 4, "ACL::Prototype::Factory: cloning failed, no type '" << typeToClone << "' available");
-
-    return NULL;
-}
-
 void
 ACL::Initialize()
 {
     ACL *a = Config.aclList;
     debugs(53, 3, "ACL::Initialize");
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Acl.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Acl.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Acl.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Acl.h	2017-07-02 16:41:18.000000000 +0800
@@ -7,146 +7,66 @@
  */
 
 #ifndef SQUID_ACL_H
 #define SQUID_ACL_H
 
 #include "acl/forward.h"
-#include "base/CharacterSet.h"
+#include "acl/Options.h"
 #include "cbdata.h"
 #include "defines.h"
 #include "dlink.h"
-#include "sbuf/List.h"
+#include "sbuf/forward.h"
 
-#include <map>
+#include <algorithm>
 #include <ostream>
-#include <string>
-#include <vector>
 
 class ConfigParser;
 
-typedef char ACLFlag;
-// ACLData Flags
-#define ACL_F_REGEX_CASE 'i'
-#define ACL_F_NO_LOOKUP 'n'
-#define ACL_F_STRICT 's'
-#define ACL_F_SUBSTRING 'm'
-#define ACL_F_END '\0'
-
-/**
- * \ingroup ACLAPI
- * Used to hold a list of one-letter flags which can be passed as parameters
- * to acls  (eg '-i', '-n' etc)
- */
-class ACLFlags
-{
-public:
-    enum Status
-    {
-        notSupported,
-        noParameter,
-        parameterOptional,
-        parameterRequired
-    };
-
-    explicit ACLFlags(const ACLFlag flags[]) : supported_(flags), flags_(0), delimiters_(nullptr) {}
-    ACLFlags() : flags_(0), delimiters_(nullptr) {}
-    ~ACLFlags();
-    /// \return a Status for the given ACLFlag.
-    Status flagStatus(const ACLFlag f) const;
-    /// \return true if the parameter for the given flag is acceptable.
-    bool parameterSupported(const ACLFlag f, const SBuf &val) const;
-    /// Set the given flag
-    void makeSet(const ACLFlag f, const SBuf &param = SBuf(""));
-    void makeUnSet(const ACLFlag f); ///< Unset the given flag
-    /// \return true if the given flag is set.
-    bool isSet(const ACLFlag f) const { return flags_ & flagToInt(f);}
-    /// \return the parameter value of the given flag if set.
-    SBuf parameter(const ACLFlag f) const;
-    /// \return ACL_F_SUBSTRING parameter value(if set) converted to CharacterSet.
-    const CharacterSet *delimiters();
-    /// Parse optional flags given in the form -[A..Z|a..z]
-    void parseFlags();
-    const char *flagsStr() const; ///< Convert the flags to a string representation
-    /**
-     * Lexical analyzer for ACL flags
-     *
-     * Support tokens in the form:
-     *   flag := '-' [A-Z|a-z]+ ['=' parameter ]
-     * Each token consist by one or more single-letter flags, which may
-     * followed by a parameter string.
-     * The parameter can belongs only to the last flag in token.
-     */
-    class FlagsTokenizer
-    {
-    public:
-        FlagsTokenizer();
-        ACLFlag nextFlag(); ///< The next flag or '\0' if finished
-        /// \return true if a parameter follows the last parsed flag.
-        bool hasParameter() const;
-        /// \return the parameter of last parsed flag, if exist.
-        SBuf getParameter() const;
-
-    private:
-        /// \return true if the current token parsing is finished.
-        bool needNextToken() const;
-        /// Peeks at the next token and return false if the next token
-        /// is not flag, or a '--' is read.
-        bool nextToken();
-
-        char *tokPos;
-    };
+namespace Acl {
 
-private:
-    /// Convert a flag to a 64bit unsigned integer.
-    /// The characters from 'A' to 'z' represented by the values from 65 to 122.
-    /// They are 57 different characters which can be fit to the bits of an 64bit
-    /// integer.
-    uint64_t flagToInt(const ACLFlag f) const {
-        assert('A' <= f && f <= 'z');
-        return ((uint64_t)1 << (f - 'A'));
-    }
+/// the ACL type name known to admins
+typedef const char *TypeName;
+/// a "factory" function for making ACL objects (of some ACL child type)
+typedef ACL *(*Maker)(TypeName typeName);
+/// use the given ACL Maker for all ACLs of the named type
+void RegisterMaker(TypeName typeName, Maker maker);
 
-    std::string supported_; ///< The supported character flags
-    uint64_t flags_; ///< The flags which are set
-    static const uint32_t FlagIndexMax = 'z' - 'A';
-    std::map<ACLFlag, SBuf> flagParameters_;
-    CharacterSet *delimiters_;
-public:
-    static const ACLFlag NoFlags[1]; ///< An empty flags list
-};
+} // namespace Acl
 
 /// A configurable condition. A node in the ACL expression tree.
 /// Can evaluate itself in FilledChecklist context.
 /// Does not change during evaluation.
 /// \ingroup ACLAPI
 class ACL
 {
 
 public:
     void *operator new(size_t);
     void operator delete(void *);
 
-    static ACL *Factory(char const *);
     static void ParseAclLine(ConfigParser &parser, ACL ** head);
     static void Initialize();
     static ACL *FindByName(const char *name);
 
     ACL();
-    explicit ACL(const ACLFlag flgs[]);
     virtual ~ACL();
 
     /// sets user-specified ACL name and squid.conf context
     void context(const char *name, const char *configuration);
 
     /// Orchestrates matching checklist against the ACL using match(),
     /// after checking preconditions and while providing debugging.
     /// \return true if and only if there was a successful match.
     /// Updates the checklist state on match, async, and failure.
     bool matches(ACLChecklist *checklist) const;
 
-    virtual ACL *clone() const = 0;
+    /// \returns (linked) Options supported by this ACL
+    virtual const Acl::Options &options() { return Acl::NoOptions(); }
+
+    /// configures ACL options, throwing on configuration errors
+    virtual void parseFlags();
 
     /// parses node represenation in squid.conf; dies on failures
     virtual void parse() = 0;
     virtual char const *typeString() const = 0;
     virtual bool isProxyAuth() const;
     virtual SBufList dump() const = 0;
@@ -155,42 +75,19 @@
 
     int cacheMatchAcl(dlink_list * cache, ACLChecklist *);
     virtual int matchForCache(ACLChecklist *checklist);
 
     virtual void prepareForUse() {}
 
+    SBufList dumpOptions(); ///< \returns approximate options configuration
+
     char name[ACL_NAME_SZ];
     char *cfgline;
     ACL *next; // XXX: remove or at least use refcounting
-    ACLFlags flags; ///< The list of given ACL flags
     bool registered; ///< added to the global list of ACLs via aclRegister()
 
-public:
-
-    class Prototype
-    {
-
-    public:
-        Prototype();
-        Prototype(ACL const *, char const *);
-        ~Prototype();
-        static bool Registered(char const *);
-        static ACL *Factory(char const *);
-
-    private:
-        ACL const *prototype;
-        char const *typeString;
-
-    private:
-        static std::vector<Prototype const *> * Registry;
-        static void *Initialized;
-        typedef std::vector<Prototype const*>::iterator iterator;
-        typedef std::vector<Prototype const*>::const_iterator const_iterator;
-        void registerMe();
-    };
-
 private:
     /// Matches the actual data in checklist against this ACL.
     virtual int match(ACLChecklist *checklist) = 0; // XXX: missing const
 
     /// whether our (i.e. shallow) match() requires checklist to have a AccessLogEntry
     virtual bool requiresAle() const;
@@ -234,12 +131,28 @@
     }
 
     operator aclMatchCode() const {
         return code;
     }
 
+    /// Whether an "allow" rule matched. If in doubt, use this popular method.
+    /// Also use this method to treat exceptional ACCESS_DUNNO and
+    /// ACCESS_AUTH_REQUIRED outcomes as if a "deny" rule matched.
+    /// See also: denied().
+    bool allowed() const { return code == ACCESS_ALLOWED; }
+
+    /// Whether a "deny" rule matched. Avoid this rarely used method.
+    /// Use this method (only) to treat exceptional ACCESS_DUNNO and
+    /// ACCESS_AUTH_REQUIRED outcomes as if an "allow" rule matched.
+    /// See also: allowed().
+    bool denied() const { return code == ACCESS_DENIED; }
+
+    /// whether there was either a default rule, a rule without any ACLs, or a
+    /// a rule with ACLs that all matched
+    bool someRuleMatched() const { return allowed() || denied(); }
+
     aclMatchCode code; ///< ACCESS_* code
     int kind; ///< which custom access list verb matched
 };
 
 inline std::ostream &
 operator <<(std::ostream &o, const allow_t a)
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/AdaptationService.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/AdaptationService.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/AdaptationService.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/AdaptationService.cc	2017-07-02 16:41:18.000000000 +0800
@@ -5,20 +5,20 @@
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
 #include "acl/AdaptationService.h"
-#include "acl/Checklist.h"
+#include "acl/FilledChecklist.h"
 #include "acl/IntRange.h"
 #include "adaptation/Config.h"
 #include "adaptation/History.h"
 #include "HttpRequest.h"
 
 int
-ACLAdaptationServiceStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLAdaptationServiceStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     HttpRequest::Pointer request = checklist->request;
     if (request == NULL)
         return 0;
     Adaptation::History::Pointer ah = request->adaptHistory();
     if (ah == NULL)
@@ -30,14 +30,6 @@
             return 1;
     }
 
     return 0;
 }
 
-ACLAdaptationServiceStrategy *
-ACLAdaptationServiceStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLAdaptationServiceStrategy ACLAdaptationServiceStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/AdaptationService.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/AdaptationService.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/AdaptationService.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/AdaptationService.h	2017-07-02 16:41:18.000000000 +0800
@@ -6,39 +6,18 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLADAPTATIONSERVICE_H
 #define SQUID_ACLADAPTATIONSERVICE_H
 
-#include "acl/Strategised.h"
 #include "acl/Strategy.h"
 
 /// \ingroup ACLAPI
 class ACLAdaptationServiceStrategy : public ACLStrategy<const char *>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-    static ACLAdaptationServiceStrategy *Instance();
-    /**
-     * Not implemented to prevent copies of the instance.
-     */
-    ACLAdaptationServiceStrategy(ACLAdaptationServiceStrategy const &);
-
-private:
-    static ACLAdaptationServiceStrategy Instance_;
-    ACLAdaptationServiceStrategy() {}
-
-    ACLAdaptationServiceStrategy &operator = (ACLAdaptationServiceStrategy const &);
-};
-
-/// \ingroup ACLAPI
-class ACLAdaptationService
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<const char *> RegistryEntry_;
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *) override;
 };
 
 #endif /* SQUID_ACLADAPTATIONSERVICE_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/AllOf.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/AllOf.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/AllOf.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/AllOf.h	2017-07-02 16:41:18.000000000 +0800
@@ -28,15 +28,12 @@
     virtual void parse();
     virtual SBufList dump() const;
 
 private:
     /* Acl::InnerNode API */
     virtual int doMatch(ACLChecklist *checklist, Nodes::const_iterator start) const;
-
-    static Prototype RegistryProtoype;
-    static AllOf RegistryEntry_;
 };
 
 } // namespace Acl
 
 #endif /* SQUID_ACL_ALL_OF_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/AnyOf.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/AnyOf.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/AnyOf.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/AnyOf.h	2017-07-02 16:41:18.000000000 +0800
@@ -21,16 +21,12 @@
 
 public:
     /* ACL API */
     virtual char const *typeString() const;
     virtual ACL *clone() const;
     virtual void parse();
-
-private:
-    static Prototype RegistryProtoype;
-    static AnyOf RegistryEntry_;
 };
 
 } // namespace Acl
 
 #endif /* SQUID_ACL_ANY_OF_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Arp.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Arp.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Arp.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Arp.h	2017-07-02 16:41:18.000000000 +0800
@@ -7,13 +7,12 @@
  */
 
 #ifndef SQUID_ACLARP_H
 #define SQUID_ACLARP_H
 
 #include "acl/Acl.h"
-#include "acl/Checklist.h"
 
 #include <set>
 
 namespace Eui
 {
 class Eui48;
@@ -35,14 +34,12 @@
     virtual void parse();
     virtual int match(ACLChecklist *checklist);
     virtual SBufList dump() const;
     virtual bool empty () const;
 
 protected:
-    static Prototype RegistryProtoype;
-    static ACLARP RegistryEntry_;
     char const *class_;
     typedef std::set<Eui::Eui48> AclArpData_t;
     AclArpData_t aclArpData;
 };
 
 #endif /* SQUID_ACLARP_H */
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Asn.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Asn.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Asn.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Asn.cc	2017-07-02 16:41:18.000000000 +0800
@@ -12,16 +12,18 @@
 #include "acl/Acl.h"
 #include "acl/Asn.h"
 #include "acl/Checklist.h"
 #include "acl/DestinationAsn.h"
 #include "acl/DestinationIp.h"
 #include "acl/SourceAsn.h"
+#include "acl/Strategised.h"
 #include "FwdState.h"
 #include "HttpReply.h"
 #include "HttpRequest.h"
 #include "ipcache.h"
+#include "MasterXaction.h"
 #include "mgr/Registration.h"
 #include "radix.h"
 #include "RequestFlags.h"
 #include "SquidConfig.h"
 #include "Store.h"
 #include "StoreClient.h"
@@ -236,13 +238,14 @@
     LOCAL_ARRAY(char, asres, 4096);
     StoreEntry *e;
     ASState *asState = new ASState;
     debugs(53, 3, "AS " << as);
     snprintf(asres, 4096, "whois://%s/!gAS%d", Config.as_whois_server, as);
     asState->as_number = as;
-    asState->request = HttpRequest::CreateFromUrl(asres);
+    const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initAsn);
+    asState->request = HttpRequest::FromUrl(asres, mx);
     assert(asState->request != NULL);
 
     if ((e = storeGetPublic(asres, Http::METHOD_GET)) == NULL) {
         e = storeCreateEntry(asres, asres, RequestFlags(), Http::METHOD_GET);
         asState->sc = storeClientListAdd(e, asState);
         FwdState::fwdStart(Comm::ConnectionPointer(), e, asState->request.getRaw());
@@ -574,36 +577,20 @@
 }
 
 /* explicit template instantiation required for some systems */
 
 template class ACLStrategised<Ip::Address>;
 
-ACL::Prototype ACLASN::SourceRegistryProtoype(&ACLASN::SourceRegistryEntry_, "src_as");
-
-ACLStrategised<Ip::Address> ACLASN::SourceRegistryEntry_(new ACLASN, ACLSourceASNStrategy::Instance(), "src_as");
-
-ACL::Prototype ACLASN::DestinationRegistryProtoype(&ACLASN::DestinationRegistryEntry_, "dst_as");
-
-ACLStrategised<Ip::Address> ACLASN::DestinationRegistryEntry_(new ACLASN, ACLDestinationASNStrategy::Instance(), "dst_as");
-
 int
-ACLSourceASNStrategy::match (ACLData<Ip::Address> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLSourceASNStrategy::match (ACLData<Ip::Address> * &data, ACLFilledChecklist *checklist)
 {
     return data->match(checklist->src_addr);
 }
 
-ACLSourceASNStrategy *
-ACLSourceASNStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLSourceASNStrategy ACLSourceASNStrategy::Instance_;
-
 int
-ACLDestinationASNStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLDestinationASNStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     const ipcache_addrs *ia = ipcache_gethostbyname(checklist->request->url.host(), IP_LOOKUP_IF_MISS);
 
     if (ia) {
         for (int k = 0; k < (int) ia->count; ++k) {
             if (data->match(ia->in_addrs[k]))
@@ -621,14 +608,6 @@
     }
     Ip::Address noaddr;
     noaddr.setNoAddr();
     return data->match(noaddr);
 }
 
-ACLDestinationASNStrategy *
-ACLDestinationASNStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLDestinationASNStrategy ACLDestinationASNStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Asn.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Asn.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Asn.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Asn.h	2017-07-02 16:41:18.000000000 +0800
@@ -6,15 +6,13 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLASN_H
 #define SQUID_ACLASN_H
 
-#include "acl/Checklist.h"
 #include "acl/Data.h"
-#include "acl/Strategised.h"
 #include "base/CbDataList.h"
 #include "ip/Address.h"
 
 int asnMatchIp(CbDataList<int> *, Ip::Address &);
 
 /// \ingroup ACLAPI
@@ -37,15 +35,11 @@
     virtual void parse();
     bool empty() const;
     virtual ACLData<Ip::Address> *clone() const;
     virtual void prepareForUse();
 
 private:
-    static ACL::Prototype SourceRegistryProtoype;
-    static ACLStrategised<Ip::Address> SourceRegistryEntry_;
-    static ACL::Prototype DestinationRegistryProtoype;
-    static ACLStrategised<Ip::Address> DestinationRegistryEntry_;
     CbDataList<int> *data;
 };
 
 #endif /* SQUID_ACLASN_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/AtStep.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/AtStep.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/AtStep.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/AtStep.cc	2017-07-02 16:41:18.000000000 +0800
@@ -9,32 +9,24 @@
 #include "squid.h"
 
 #if USE_OPENSSL
 
 #include "acl/AtStep.h"
 #include "acl/AtStepData.h"
-#include "acl/Checklist.h"
+#include "acl/FilledChecklist.h"
 #include "client_side.h"
 #include "http/Stream.h"
 #include "ssl/ServerBump.h"
 
 int
-ACLAtStepStrategy::match (ACLData<Ssl::BumpStep> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLAtStepStrategy::match (ACLData<Ssl::BumpStep> * &data, ACLFilledChecklist *checklist)
 {
     Ssl::ServerBump *bump = NULL;
     if (checklist->conn() != NULL && (bump = checklist->conn()->serverBump()))
         return data->match(bump->step);
     else
         return data->match(Ssl::bumpStep1);
     return 0;
 }
 
-ACLAtStepStrategy *
-ACLAtStepStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLAtStepStrategy ACLAtStepStrategy::Instance_;
-
 #endif /* USE_OPENSSL */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/AtStep.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/AtStep.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/AtStep.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/AtStep.h	2017-07-02 16:41:18.000000000 +0800
@@ -8,40 +8,21 @@
 
 #ifndef SQUID_ACLATSTEP_H
 #define SQUID_ACLATSTEP_H
 
 #if USE_OPENSSL
 
-#include "acl/Strategised.h"
 #include "acl/Strategy.h"
 #include "ssl/support.h"
 
 /// \ingroup ACLAPI
 class ACLAtStepStrategy : public ACLStrategy<Ssl::BumpStep>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-    static ACLAtStepStrategy *Instance();
-
-    // Not implemented to prevent copies of the instance.
-    ACLAtStepStrategy(ACLAtStepStrategy const &);
-
-private:
-    static ACLAtStepStrategy Instance_;
-    ACLAtStepStrategy() {}
-
-    ACLAtStepStrategy&operator=(ACLAtStepStrategy const &);
-};
-
-class ACLAtStep
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<Ssl::BumpStep> RegistryEntry_;
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *) override;
 };
 
 #endif /* USE_OPENSSL */
 
 #endif /* SQUID_ACLATSTEP_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/BoolOps.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/BoolOps.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/BoolOps.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/BoolOps.cc	2017-07-02 16:41:18.000000000 +0800
@@ -7,12 +7,13 @@
  */
 
 #include "squid.h"
 #include "acl/BoolOps.h"
 #include "acl/Checklist.h"
 #include "Debug.h"
+#include "sbuf/SBuf.h"
 
 /* Acl::NotNode */
 
 Acl::NotNode::NotNode(ACL *acl)
 {
     assert(acl);
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl: Browser.cc
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl: Browser.h
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Certificate.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Certificate.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Certificate.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Certificate.cc	2017-07-02 16:41:18.000000000 +0800
@@ -22,27 +22,19 @@
 #include "fde.h"
 #include "globals.h"
 #include "http/Stream.h"
 #include "HttpRequest.h"
 
 int
-ACLCertificateStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLCertificateStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     const int fd = checklist->fd();
     const bool goodDescriptor = 0 <= fd && fd <= Biggest_FD;
     auto ssl = goodDescriptor ? fd_table[fd].ssl.get() : nullptr;
     X509 *cert = SSL_get_peer_certificate(ssl);
     const bool res = data->match (cert);
     X509_free(cert);
     return res;
 }
 
-ACLCertificateStrategy *
-ACLCertificateStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLCertificateStrategy ACLCertificateStrategy::Instance_;
-
 #endif /* USE_OPENSSL */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Certificate.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Certificate.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Certificate.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Certificate.h	2017-07-02 16:41:18.000000000 +0800
@@ -17,33 +17,11 @@
 
 /// \ingroup ACLAPI
 class ACLCertificateStrategy : public ACLStrategy<X509 *>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-    static ACLCertificateStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLCertificateStrategy(ACLCertificateStrategy const &);
-
-private:
-    static ACLCertificateStrategy Instance_;
-    ACLCertificateStrategy() {}
-
-    ACLCertificateStrategy&operator=(ACLCertificateStrategy const &);
-};
-
-/// \ingroup ACLAPI
-class ACLCertificate
-{
-
-private:
-    static ACL::Prototype UserRegistryProtoype;
-    static ACLStrategised<X509*> UserRegistryEntry_;
-    static ACL::Prototype CARegistryProtoype;
-    static ACLStrategised<X509 *> CARegistryEntry_;
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *);
 };
 
 #endif /* SQUID_ACLCERTIFICATE_H */
 
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl: CharacterSetOption.h
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ConnectionsEncrypted.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ConnectionsEncrypted.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ConnectionsEncrypted.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ConnectionsEncrypted.h	2017-07-02 16:41:18.000000000 +0800
@@ -30,14 +30,12 @@
     virtual void parse();
     virtual int match(ACLChecklist *checklist);
     virtual SBufList dump() const;
     virtual bool empty () const;
 
 protected:
-    static Prototype RegistryProtoype;
-    static ConnectionsEncrypted RegistryEntry_;
     char const *class_;
 };
 
 } // namespace Acl
 
 #endif /* SQUID_ACL_CONNECTIONS_ENCRYPTED_H */
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Data.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Data.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Data.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Data.h	2017-07-02 16:41:18.000000000 +0800
@@ -6,23 +6,27 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLDATA_H
 #define SQUID_ACLDATA_H
 
+#include "acl/Options.h"
 #include "sbuf/List.h"
 
-/// \ingroup ACLAPI
+/// Configured ACL parameter(s) (e.g., domain names in dstdomain ACL).
 template <class M>
 class ACLData
 {
 
 public:
 
     virtual ~ACLData() {}
 
+    /// \returns the flags supported by these ACL parameters (e.g., "-i")
+    virtual const Acl::ParameterFlags &supportedFlags() const { return Acl::NoFlags(); }
+
     virtual bool match(M) =0;
     virtual SBufList dump() const =0;
     virtual void parse() =0;
     virtual ACLData *clone() const =0;
     virtual void prepareForUse() {}
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/DestinationAsn.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/DestinationAsn.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/DestinationAsn.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/DestinationAsn.h	2017-07-02 16:41:18.000000000 +0800
@@ -15,28 +15,12 @@
 
 /// \ingroup ACLAPI
 class ACLDestinationASNStrategy : public ACLStrategy<Ip::Address>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *);
     virtual bool requiresRequest() const {return true;}
-
-    static ACLDestinationASNStrategy *Instance();
-
-    /**
-     * Not implemented to prevent copies of the instance.
-     \par
-     * Not private to prevent brain dead g++ warnings about
-     * private constructors with no friends
-     */
-    ACLDestinationASNStrategy(ACLDestinationASNStrategy const &);
-
-private:
-    static ACLDestinationASNStrategy Instance_;
-    ACLDestinationASNStrategy() {}
-
-    ACLDestinationASNStrategy&operator=(ACLDestinationASNStrategy const &);
 };
 
 #endif /* SQUID_ACLDESTINATIONASN_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/DestinationDomain.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/DestinationDomain.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/DestinationDomain.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/DestinationDomain.cc	2017-07-02 16:41:18.000000000 +0800
@@ -38,22 +38,33 @@
     ACLFilledChecklist *checklist = Filled((ACLChecklist*)data);
     checklist->markDestinationDomainChecked();
     checklist->request->recordLookup(details);
     checklist->resumeNonBlockingCheck(DestinationDomainLookup::Instance());
 }
 
+/* ACLDestinationDomainStrategy */
+
+const Acl::Options &
+ACLDestinationDomainStrategy::options()
+{
+    static const Acl::BooleanOption LookupBanFlag;
+    static const Acl::Options MyOptions = { { "-n", &LookupBanFlag } };
+    LookupBanFlag.linkWith(&lookupBanned);
+    return MyOptions;
+}
+
 int
-ACLDestinationDomainStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &flags)
+ACLDestinationDomainStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     assert(checklist != NULL && checklist->request != NULL);
 
     if (data->match(checklist->request->url.host())) {
         return 1;
     }
 
-    if (flags.isSet(ACL_F_NO_LOOKUP)) {
+    if (lookupBanned) {
         debugs(28, 3, "No-lookup DNS ACL '" << AclMatchedName << "' for " << checklist->request->url.host());
         return 0;
     }
 
     /* numeric IPA? no, trust the above result. */
     if (!checklist->request->url.hostIsNumeric()) {
@@ -88,14 +99,6 @@
         // else fall through to "none" match, hiding the lookup failure (XXX)
     }
 
     return data->match("none");
 }
 
-ACLDestinationDomainStrategy *
-ACLDestinationDomainStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLDestinationDomainStrategy ACLDestinationDomainStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/DestinationDomain.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/DestinationDomain.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/DestinationDomain.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/DestinationDomain.h	2017-07-02 16:41:18.000000000 +0800
@@ -17,29 +17,19 @@
 
 /// \ingroup ACLAPI
 class ACLDestinationDomainStrategy : public ACLStrategy<char const *>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-    static ACLDestinationDomainStrategy *Instance();
+    /* ACLStrategy API */
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *);
     virtual bool requiresRequest() const {return true;}
-
-    /**
-     * Not implemented to prevent copies of the instance.
-     \par
-     * Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends
-     */
-    ACLDestinationDomainStrategy(ACLDestinationDomainStrategy const &);
+    virtual const Acl::Options &options();
 
 private:
-    static ACLDestinationDomainStrategy Instance_;
-    ACLDestinationDomainStrategy() {}
-
-    ACLDestinationDomainStrategy&operator=(ACLDestinationDomainStrategy const &);
+    Acl::BooleanOptionValue lookupBanned; ///< Are DNS lookups allowed?
 };
 
 /// \ingroup ACLAPI
 class DestinationDomainLookup : public ACLChecklist::AsyncState
 {
 
@@ -49,19 +39,8 @@
 
 private:
     static DestinationDomainLookup instance_;
     static void LookupDone(const char *, const Dns::LookupDetails &, void *);
 };
 
-/// \ingroup ACLAPI
-class ACLDestinationDomain
-{
-
-private:
-    static ACL::Prototype LiteralRegistryProtoype;
-    static ACLStrategised<char const *> LiteralRegistryEntry_;
-    static ACL::Prototype RegexRegistryProtoype;
-    static ACLStrategised<char const *> RegexRegistryEntry_;
-};
-
 #endif /* SQUID_ACLDESTINATIONDOMAIN_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/DestinationIp.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/DestinationIp.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/DestinationIp.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/DestinationIp.cc	2017-07-02 16:41:18.000000000 +0800
@@ -14,20 +14,27 @@
 #include "client_side.h"
 #include "comm/Connection.h"
 #include "http/Stream.h"
 #include "HttpRequest.h"
 #include "SquidConfig.h"
 
-ACLFlag ACLDestinationIP::SupportedFlags[] = {ACL_F_NO_LOOKUP, ACL_F_END};
-
 char const *
 ACLDestinationIP::typeString() const
 {
     return "dst";
 }
 
+const Acl::Options &
+ACLDestinationIP::options()
+{
+    static const Acl::BooleanOption LookupBan;
+    static const Acl::Options MyOptions = { { "-n", &LookupBan } };
+    LookupBan.linkWith(&lookupBanned);
+    return MyOptions;
+}
+
 int
 ACLDestinationIP::match(ACLChecklist *cl)
 {
     ACLFilledChecklist *checklist = Filled(cl);
 
     // if there is no HTTP request details fallback to the dst_addr
@@ -41,13 +48,13 @@
     if (Config.onoff.client_dst_passthru && (checklist->request->flags.intercepted || checklist->request->flags.interceptTproxy)) {
         const auto conn = checklist->conn();
         return (conn && conn->clientConnection) ?
                ACLIP::match(conn->clientConnection->local) : -1;
     }
 
-    if (flags.isSet(ACL_F_NO_LOOKUP)) {
+    if (lookupBanned) {
         if (!checklist->request->url.hostIsNumeric()) {
             debugs(28, 3, "No-lookup DNS ACL '" << AclMatchedName << "' for " << checklist->request->url.host());
             return 0;
         }
 
         if (ACLIP::match(checklist->request->url.hostIP()))
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/DestinationIp.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/DestinationIp.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/DestinationIp.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/DestinationIp.h	2017-07-02 16:41:18.000000000 +0800
@@ -27,20 +27,18 @@
 
 class ACLDestinationIP : public ACLIP
 {
     MEMPROXY_CLASS(ACLDestinationIP);
 
 public:
-    ACLDestinationIP(): ACLIP(ACLDestinationIP::SupportedFlags) {}
     virtual char const *typeString() const;
+    virtual const Acl::Options &options();
     virtual int match(ACLChecklist *checklist);
 
     virtual ACL *clone()const;
 
-    static ACLFlag SupportedFlags[];
 private:
-    static Prototype RegistryProtoype;
-    static ACLDestinationIP RegistryEntry_;
+    Acl::BooleanOptionValue lookupBanned; ///< are DNS lookups allowed?
 };
 
 #endif /* SQUID_ACLDESTINATIONIP_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Eui64.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Eui64.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Eui64.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Eui64.h	2017-07-02 16:41:18.000000000 +0800
@@ -7,13 +7,12 @@
  */
 
 #ifndef SQUID_ACLEUI64_H
 #define SQUID_ACLEUI64_H
 
 #include "acl/Acl.h"
-#include "acl/Checklist.h"
 
 #include <set>
 
 namespace Eui
 {
 class Eui64;
@@ -34,14 +33,12 @@
     virtual void parse();
     virtual int match(ACLChecklist *checklist);
     virtual SBufList dump() const;
     virtual bool empty () const;
 
 protected:
-    static Prototype RegistryProtoype;
-    static ACLEui64 RegistryEntry_;
     typedef std::set<Eui::Eui64> Eui64Data_t;
     Eui64Data_t eui64Data;
     char const *class_;
 };
 
 #endif /* SQUID_ACLEUI64_H */
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/AD_group/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/AD_group/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/AD_group/Makefile.in	2017-06-01 20:54:32.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/AD_group/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/delayer/ext_delayer_acl.8 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/delayer/ext_delayer_acl.8
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/delayer/ext_delayer_acl.8	2017-06-02 05:52:23.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/delayer/ext_delayer_acl.8	2017-07-02 16:57:34.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 4.08 (Pod::Simple 3.32)
+.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -126,13 +126,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "EXT_DELAYER_ACL 8"
-.TH EXT_DELAYER_ACL 8 "2017-06-01" "perl v5.24.1" "User Contributed Perl Documentation"
+.TH EXT_DELAYER_ACL 8 "2017-07-02" "perl v5.24.1" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 .Vb 1
@@ -218,11 +218,11 @@
 .PP
 Report serious security bugs to \fISquid Bugs <squid\-bugs@squid\-cache.org\fR>
 .PP
 Report ideas for new improvements to the \fISquid Developers mailing list <squid\-dev@squid\-cache.org\fR>
 .SH "SEE ALSO"
 .IX Header "SEE ALSO"
-squid (8), \s-1GPL\s0 (7),
+squid (8), \s-1GPL \\fIs0\fR\|(7),
 .PP
 The Squid \s-1FAQ\s0 wiki http://wiki.squid\-cache.org/SquidFaq
 .PP
 The Squid Configuration Manual http://www.squid\-cache.org/Doc/config/
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/delayer/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/delayer/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/delayer/Makefile.in	2017-06-01 20:54:53.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/delayer/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/eDirectory_userip/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/eDirectory_userip/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/eDirectory_userip/Makefile.in	2017-06-01 20:54:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/eDirectory_userip/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/file_userip/example.conf /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/file_userip/example.conf
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/file_userip/example.conf	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/file_userip/example.conf	2017-07-02 16:41:18.000000000 +0800
@@ -40,6 +40,11 @@
 #
 # User "jayk" may athenticate only from his station ip address
 # 192.168.3.45	jayk
 #
 # Users of the "tol" group may authenticate from their VLAN
 # 10.0.0.0/255.255.0.0	@tol
+#
+# User "diniz" may authenticate from the LAN, but deny all others
+# 192.168.1.0/255.255.255.0	diniz
+# 0.0.0.0/0.0.0.0	NONE
+
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/file_userip: example-deny_all_but.conf
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/file_userip/Makefile.am /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/file_userip/Makefile.am
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/file_userip/Makefile.am	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/file_userip/Makefile.am	2017-07-02 16:41:18.000000000 +0800
@@ -16,9 +16,8 @@
 	$(top_builddir)/lib/libmiscencoding.la \
 	$(COMPAT_LIB) \
 	$(XTRA_LIBS)
 
 EXTRA_DIST = \
 	example.conf \
-	example-deny_all_but.conf \
 	ext_file_userip_acl.8 \
 	required.m4
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/file_userip/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/file_userip/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/file_userip/Makefile.in	2017-06-01 20:55:01.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/file_userip/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
@@ -709,13 +709,12 @@
 	$(top_builddir)/lib/libmiscencoding.la \
 	$(COMPAT_LIB) \
 	$(XTRA_LIBS)
 
 EXTRA_DIST = \
 	example.conf \
-	example-deny_all_but.conf \
 	ext_file_userip_acl.8 \
 	required.m4
 
 all: all-am
 
 .SUFFIXES:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/kerberos_ldap_group/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/kerberos_ldap_group/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/kerberos_ldap_group/Makefile.in	2017-06-01 20:55:06.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/kerberos_ldap_group/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/LDAP_group/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/LDAP_group/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/LDAP_group/Makefile.in	2017-06-01 20:54:36.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/LDAP_group/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/LM_group/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/LM_group/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/LM_group/Makefile.in	2017-06-01 20:54:43.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/LM_group/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/Makefile.in	2017-06-01 20:54:46.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/session/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/session/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/session/Makefile.in	2017-06-01 20:55:13.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/session/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/SQL_session/ext_sql_session_acl.8 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/SQL_session/ext_sql_session_acl.8
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/SQL_session/ext_sql_session_acl.8	2017-06-02 05:52:58.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/SQL_session/ext_sql_session_acl.8	2017-07-02 16:57:34.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 4.08 (Pod::Simple 3.32)
+.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -126,13 +126,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "EXT_SQL_SESSION_ACL 8"
-.TH EXT_SQL_SESSION_ACL 8 "2017-06-01" "perl v5.24.1" "User Contributed Perl Documentation"
+.TH EXT_SQL_SESSION_ACL 8 "2017-07-02" "perl v5.24.1" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 .Vb 1
@@ -147,13 +147,13 @@
 .IX Header "DESCRIPTION"
 Validates an \s-1HTTP\s0 requests access authorization with a session database.
 .PP
 Taking an identity token to be validated (as determined by the external_acl_type format)
 it returns a username or tag associated with the identity token passed in.
 .PP
-Common forms of identifiers are \s-1IP\s0 address, \s-1EUI\s0 (\s-1MAC\s0) address, passwords, or \s-1UUID\s0 tokens.
+Common forms of identifiers are \s-1IP\s0 address, \s-1EUI \s0(\s-1MAC\s0) address, passwords, or \s-1UUID\s0 tokens.
 .PP
 This program uses Squid concurrency support.
 .SH "OPTIONS"
 .IX Header "OPTIONS"
 .IP "\fB\-\-dsn\fR" 12
 .IX Item "--dsn"
@@ -218,11 +218,11 @@
 .PP
 Report serious security bugs to \fISquid Bugs <squid\-bugs@squid\-cache.org\fR>
 .PP
 Report ideas for new improvements to the \fISquid Developers mailing list <squid\-dev@squid\-cache.org\fR>
 .SH "SEE ALSO"
 .IX Header "SEE ALSO"
-squid (8), \s-1GPL\s0 (7),
+squid (8), \s-1GPL \\fIs0\fR\|(7),
 .PP
 The Squid \s-1FAQ\s0 wiki http://wiki.squid\-cache.org/SquidFaq
 .PP
 The Squid Configuration Manual http://www.squid\-cache.org/Doc/config/
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/SQL_session/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/SQL_session/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/SQL_session/Makefile.in	2017-06-01 20:54:49.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/SQL_session/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/time_quota/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/time_quota/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/time_quota/Makefile.in	2017-06-01 20:55:21.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/time_quota/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/unix_group/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/unix_group/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/unix_group/Makefile.in	2017-06-01 20:55:24.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/unix_group/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/wbinfo_group/ext_wbinfo_group_acl.8 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/wbinfo_group/ext_wbinfo_group_acl.8
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/wbinfo_group/ext_wbinfo_group_acl.8	2017-06-02 05:53:11.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/wbinfo_group/ext_wbinfo_group_acl.8	2017-07-02 16:57:34.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 4.08 (Pod::Simple 3.32)
+.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -126,13 +126,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "EXT_WBINFO_GROUP_ACL 8"
-.TH EXT_WBINFO_GROUP_ACL 8 "2017-06-01" "perl v5.24.1" "User Contributed Perl Documentation"
+.TH EXT_WBINFO_GROUP_ACL 8 "2017-07-02" "perl v5.24.1" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 .Vb 1
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/wbinfo_group/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/wbinfo_group/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/external/wbinfo_group/Makefile.in	2017-06-01 20:55:29.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/external/wbinfo_group/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ExtUser.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ExtUser.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ExtUser.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ExtUser.cc	2017-07-02 16:41:18.000000000 +0800
@@ -41,12 +41,18 @@
 ACLExtUser::typeString() const
 {
     return type_;
 }
 
 void
+ACLExtUser::parseFlags()
+{
+    ParseFlags(Acl::NoOptions(), data->supportedFlags());
+}
+
+void
 ACLExtUser::parse()
 {
     data->parse();
 }
 
 int
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ExtUser.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ExtUser.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ExtUser.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ExtUser.h	2017-07-02 16:41:18.000000000 +0800
@@ -22,25 +22,22 @@
 public:
     ACLExtUser(ACLData<char const *> *newData, char const *);
     ACLExtUser (ACLExtUser const &old);
     ACLExtUser & operator= (ACLExtUser const &rhs);
     ~ACLExtUser();
 
+    /* ACL API */
     virtual char const *typeString() const;
     virtual void parse();
-
+    virtual void parseFlags();
     virtual int match(ACLChecklist *checklist);
     virtual SBufList dump() const;
     virtual bool empty () const;
     virtual ACL *clone()const;
 
 private:
-    static Prototype UserRegistryProtoype;
-    static ACLExtUser UserRegistryEntry_;
-    static Prototype RegexRegistryProtoype;
-    static ACLExtUser RegexRegistryEntry_;
     ACLData<char const *> *data;
     char const *type_;
 };
 
 #endif /* USE_AUTH */
 #endif /* SQUID_EXTUSER_H */
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/forward.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/forward.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/forward.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/forward.h	2017-07-02 16:41:18.000000000 +0800
@@ -26,12 +26,15 @@
 class InnerNode;
 class NotNode;
 class AndNode;
 class OrNode;
 class Tree;
 
+/// prepares to parse ACLs configuration
+void Init(void);
+
 } // namespace Acl
 
 class allow_t;
 typedef void ACLCB(allow_t, void *);
 
 #define ACL_NAME_SZ 64
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HasComponent.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HasComponent.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HasComponent.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HasComponent.cc	2017-07-02 16:41:18.000000000 +0800
@@ -8,21 +8,13 @@
 
 #include "squid.h"
 #include "acl/HasComponent.h"
 #include "acl/HasComponentData.h"
 
 int
-ACLHasComponentStrategy::match(ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &flags)
+ACLHasComponentStrategy::match(ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     ACLHasComponentData *cdata = dynamic_cast<ACLHasComponentData*>(data);
     assert(cdata);
     return cdata->match(checklist);
 }
 
-ACLHasComponentStrategy *
-ACLHasComponentStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLHasComponentStrategy ACLHasComponentStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HasComponent.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HasComponent.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HasComponent.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HasComponent.h	2017-07-02 16:41:18.000000000 +0800
@@ -13,26 +13,11 @@
 #include "acl/Strategy.h"
 
 /// \ingroup ACLAPI
 class ACLHasComponentStrategy : public ACLStrategy<ACLChecklist *>
 {
 public:
-    static ACLHasComponentStrategy *Instance();
-    ACLHasComponentStrategy(ACLHasComponentStrategy const &) = delete;
-    ACLHasComponentStrategy& operator=(ACLHasComponentStrategy const &) = delete;
-    virtual int match(ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-
-private:
-    static ACLHasComponentStrategy Instance_;
-    ACLHasComponentStrategy() { }
-};
-
-/// \ingroup ACLAPI
-class ACLHasComponent
-{
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<ACLChecklist *> RegistryEntry_;
+    virtual int match(ACLData<MatchType> * &, ACLFilledChecklist *);
 };
 
 #endif
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HierCode.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HierCode.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HierCode.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HierCode.cc	2017-07-02 16:41:18.000000000 +0800
@@ -7,26 +7,19 @@
  */
 
 #include "squid.h"
 #include "acl/Checklist.h"
 #include "acl/HierCode.h"
 #include "acl/HierCodeData.h"
+#include "acl/Strategised.h"
 #include "HttpRequest.h"
 
 /* explicit template instantiation required for some systems */
 
 template class ACLStrategised<hier_code>;
 
 int
-ACLHierCodeStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLHierCodeStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     return data->match (checklist->request->hier.code);
 }
 
-ACLHierCodeStrategy *
-ACLHierCodeStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLHierCodeStrategy ACLHierCodeStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HierCode.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HierCode.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HierCode.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HierCode.h	2017-07-02 16:41:18.000000000 +0800
@@ -6,46 +6,20 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLHIERCODE_H
 #define SQUID_ACLHIERCODE_H
 
-#include "acl/Strategised.h"
 #include "acl/Strategy.h"
 #include "hier_code.h"
 
 /// \ingroup ACLAPI
 class ACLHierCodeStrategy : public ACLStrategy<hier_code>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *);
     virtual bool requiresRequest() const {return true;}
-
-    static ACLHierCodeStrategy *Instance();
-
-    /**
-     * Not implemented to prevent copies of the instance.
-     \par
-     * Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends
-     */
-    ACLHierCodeStrategy(ACLHierCodeStrategy const &);
-
-private:
-    static ACLHierCodeStrategy Instance_;
-    ACLHierCodeStrategy() {}
-
-    ACLHierCodeStrategy &operator=(ACLHierCodeStrategy const &);
-};
-
-/// \ingroup ACLAPI
-class ACLHierCode
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<hier_code> RegistryEntry_;
 };
 
 #endif /* SQUID_ACLHIERCODE_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HttpRepHeader.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HttpRepHeader.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HttpRepHeader.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HttpRepHeader.cc	2017-07-02 16:41:18.000000000 +0800
@@ -4,25 +4,17 @@
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
-#include "acl/Checklist.h"
+#include "acl/FilledChecklist.h"
 #include "acl/HttpHeaderData.h"
 #include "acl/HttpRepHeader.h"
 #include "HttpReply.h"
 
 int
-ACLHTTPRepHeaderStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLHTTPRepHeaderStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     return data->match (&checklist->reply->header);
 }
 
-ACLHTTPRepHeaderStrategy *
-ACLHTTPRepHeaderStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLHTTPRepHeaderStrategy ACLHTTPRepHeaderStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HttpRepHeader.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HttpRepHeader.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HttpRepHeader.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HttpRepHeader.h	2017-07-02 16:41:18.000000000 +0800
@@ -15,36 +15,12 @@
 
 /// \ingroup ACLAPI
 class ACLHTTPRepHeaderStrategy : public ACLStrategy<HttpHeader*>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *);
     virtual bool requiresReply() const { return true; }
-
-    static ACLHTTPRepHeaderStrategy *Instance();
-    /**
-     * Not implemented to prevent copies of the instance.
-     \par
-     * Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends
-     */
-    ACLHTTPRepHeaderStrategy(ACLHTTPRepHeaderStrategy const &);
-
-private:
-    static ACLHTTPRepHeaderStrategy Instance_;
-    ACLHTTPRepHeaderStrategy() { }
-
-    ACLHTTPRepHeaderStrategy&operator = (ACLHTTPRepHeaderStrategy const &);
-};
-
-/// \ingroup ACLAPI
-class ACLHTTPRepHeader
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<HttpHeader*> RegistryEntry_;
 };
 
 #endif /* SQUID_ACLHTTPREPHEADER_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HttpReqHeader.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HttpReqHeader.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HttpReqHeader.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HttpReqHeader.cc	2017-07-02 16:41:18.000000000 +0800
@@ -4,25 +4,17 @@
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
-#include "acl/Checklist.h"
+#include "acl/FilledChecklist.h"
 #include "acl/HttpHeaderData.h"
 #include "acl/HttpReqHeader.h"
 #include "HttpRequest.h"
 
 int
-ACLHTTPReqHeaderStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLHTTPReqHeaderStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     return data->match (&checklist->request->header);
 }
 
-ACLHTTPReqHeaderStrategy *
-ACLHTTPReqHeaderStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLHTTPReqHeaderStrategy ACLHTTPReqHeaderStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HttpReqHeader.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HttpReqHeader.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HttpReqHeader.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HttpReqHeader.h	2017-07-02 16:41:18.000000000 +0800
@@ -6,42 +6,20 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLHTTPREQHEADER_H
 #define SQUID_ACLHTTPREQHEADER_H
 
-#include "acl/Strategised.h"
 #include "acl/Strategy.h"
 #include "HttpHeader.h"
 
 /// \ingroup ACLAPI
 class ACLHTTPReqHeaderStrategy : public ACLStrategy<HttpHeader*>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *);
     virtual bool requiresRequest() const { return true; }
-
-    static ACLHTTPReqHeaderStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLHTTPReqHeaderStrategy(ACLHTTPReqHeaderStrategy const &);
-
-private:
-    static ACLHTTPReqHeaderStrategy Instance_;
-    ACLHTTPReqHeaderStrategy() { }
-
-    ACLHTTPReqHeaderStrategy&operator = (ACLHTTPReqHeaderStrategy const &);
-};
-
-/// \ingroup ACLAPI
-class ACLHTTPReqHeader
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<HttpHeader*> RegistryEntry_;
 };
 
 #endif /* SQUID_ACLHTTPREQHEADER_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HttpStatus.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HttpStatus.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/HttpStatus.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/HttpStatus.h	2017-07-02 16:41:18.000000000 +0800
@@ -40,14 +40,12 @@
     virtual int match(ACLChecklist *checklist);
     virtual SBufList dump() const;
     virtual bool empty () const;
     virtual bool requiresReply() const { return true; }
 
 protected:
-    static Prototype RegistryProtoype;
-    static ACLHTTPStatus RegistryEntry_;
     Splay<acl_httpstatus_data*> *data;
     char const *class_;
 };
 
 #endif /* SQUID_ACLHTTPSTATUS_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Ip.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Ip.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Ip.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Ip.cc	2017-07-02 16:41:18.000000000 +0800
@@ -474,14 +474,12 @@
 void
 ACLIP::parse()
 {
     if (data == NULL)
         data = new IPSplay();
 
-    flags.parseFlags();
-
     while (char *t = ConfigParser::strtokFile()) {
         acl_ip_data *q = acl_ip_data::FactoryParse(t);
 
         while (q != NULL) {
             /* pop each result off the list and add it to the data tree individually */
             acl_ip_data *next_node = q->next;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Ip.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Ip.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Ip.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Ip.h	2017-07-02 16:41:18.000000000 +0800
@@ -45,14 +45,12 @@
 {
 public:
     void *operator new(size_t);
     void operator delete(void *);
 
     ACLIP() : data(NULL) {}
-    explicit ACLIP(const ACLFlag flgs[]) : ACL(flgs), data(NULL) {}
-
     ~ACLIP();
 
     typedef Splay<acl_ip_data *> IPSplay;
 
     virtual char const *typeString() const = 0;
     virtual void parse();
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/LocalIp.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/LocalIp.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/LocalIp.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/LocalIp.h	2017-07-02 16:41:18.000000000 +0800
@@ -14,19 +14,13 @@
 /// \ingroup ACLAPI
 class ACLLocalIP : public ACLIP
 {
     MEMPROXY_CLASS(ACLLocalIP);
 
 public:
-    static ACLLocalIP const &RegistryEntry();
-
     virtual char const *typeString() const;
     virtual int match(ACLChecklist *checklist);
     virtual ACL *clone()const;
-
-private:
-    static Prototype RegistryProtoype;
-    static ACLLocalIP RegistryEntry_;
 };
 
 #endif /* SQUID_ACLLOCALIP_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/LocalPort.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/LocalPort.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/LocalPort.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/LocalPort.cc	2017-07-02 16:41:18.000000000 +0800
@@ -4,24 +4,15 @@
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
-#include "acl/Checklist.h"
-#include "acl/IntRange.h"
+#include "acl/FilledChecklist.h"
 #include "acl/LocalPort.h"
 
 int
-ACLLocalPortStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLLocalPortStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     return data->match (checklist->my_addr.port());
 }
 
-ACLLocalPortStrategy *
-ACLLocalPortStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLLocalPortStrategy ACLLocalPortStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/LocalPort.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/LocalPort.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/LocalPort.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/LocalPort.h	2017-07-02 16:41:18.000000000 +0800
@@ -6,42 +6,18 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLLOCALPORT_H
 #define SQUID_ACLLOCALPORT_H
 
-#include "acl/Strategised.h"
 #include "acl/Strategy.h"
 
 /// \ingroup ACLAPI
 class ACLLocalPortStrategy : public ACLStrategy<int>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-    static ACLLocalPortStrategy *Instance();
-    /**
-     * Not implemented to prevent copies of the instance.
-     \par
-     * Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends
-     */
-    ACLLocalPortStrategy(ACLLocalPortStrategy const &);
-
-private:
-    static ACLLocalPortStrategy Instance_;
-    ACLLocalPortStrategy() {}
-
-    ACLLocalPortStrategy&operator=(ACLLocalPortStrategy const &);
-};
-
-/// \ingroup ACLAPI
-class ACLLocalPort
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<int> RegistryEntry_;
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *) override;
 };
 
 #endif /* SQUID_ACLLOCALPORT_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Makefile.am /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Makefile.am
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Makefile.am	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Makefile.am	2017-07-02 16:41:18.000000000 +0800
@@ -20,18 +20,21 @@
 	BoolOps.h \
 	Checklist.cc \
 	Checklist.h \
 	forward.h \
 	InnerNode.cc \
 	InnerNode.h \
+	Options.h \
+	Options.cc \
 	Tree.cc \
 	Tree.h
 
 ## Data-dependent Squid/transaction state used by specific ACLs.
 ## Does not refer to specific ACLs to avoid circular dependencies.
 libstate_la_SOURCES = \
+	CharacterSetOption.h \
 	Data.h \
 	Strategy.h \
 	Strategised.cc \
 	Strategised.h \
 	FilledChecklist.cc \
 	FilledChecklist.h \
@@ -53,14 +56,12 @@
 	AllOf.cc \
 	AllOf.h \
 	AnyOf.cc \
 	AnyOf.h \
 	Asn.cc \
 	Asn.h \
-	Browser.cc \
-	Browser.h \
 	ConnectionsEncrypted.cc \
 	ConnectionsEncrypted.h \
 	DestinationAsn.h \
 	DestinationDomain.cc \
 	DestinationDomain.h \
 	DestinationIp.cc \
@@ -108,31 +109,29 @@
 	Protocol.cc \
 	ProtocolData.cc \
 	ProtocolData.h \
 	Protocol.h \
 	Random.cc \
 	Random.h \
-	Referer.cc \
-	Referer.h \
 	ReplyHeaderStrategy.h \
-	ReplyMimeType.cc \
 	ReplyMimeType.h \
 	RequestHeaderStrategy.h \
-	RequestMimeType.cc \
 	RequestMimeType.h \
 	SourceAsn.h \
 	SourceDomain.cc \
 	SourceDomain.h \
 	SourceIp.cc \
 	SourceIp.h \
 	SquidError.h \
 	SquidError.cc \
 	SquidErrorData.cc \
 	SquidErrorData.h \
 	Tag.cc \
 	Tag.h \
+	TransactionInitiator.cc \
+	TransactionInitiator.h \
 	Url.cc \
 	Url.h \
 	UrlLogin.cc \
 	UrlLogin.h \
 	UrlPath.cc \
 	UrlPath.h \
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Makefile.in	2017-06-01 20:54:27.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
@@ -166,70 +166,68 @@
 CONFIG_CLEAN_VPATH_FILES =
 LTLIBRARIES = $(noinst_LTLIBRARIES)
 libacls_la_LIBADD =
 am__libacls_la_SOURCES_DIST = IntRange.cc IntRange.h RegexData.cc \
 	RegexData.h StringData.cc StringData.h Time.cc Time.h \
 	TimeData.cc TimeData.h AllOf.cc AllOf.h AnyOf.cc AnyOf.h \
-	Asn.cc Asn.h Browser.cc Browser.h ConnectionsEncrypted.cc \
-	ConnectionsEncrypted.h DestinationAsn.h DestinationDomain.cc \
-	DestinationDomain.h DestinationIp.cc DestinationIp.h \
-	DomainData.cc DomainData.h ExtUser.cc ExtUser.h \
-	HasComponent.cc HasComponent.h HasComponentData.cc \
-	HasComponentData.h HierCodeData.cc HierCodeData.h HierCode.cc \
-	HierCode.h HttpHeaderData.cc HttpHeaderData.h HttpRepHeader.cc \
-	HttpRepHeader.h HttpReqHeader.cc HttpReqHeader.h HttpStatus.cc \
-	HttpStatus.h Ip.cc Ip.h LocalIp.cc LocalIp.h LocalPort.cc \
-	LocalPort.h MaxConnection.cc MaxConnection.h Method.cc \
-	MethodData.cc MethodData.h Method.h MyPortName.cc MyPortName.h \
-	Note.h Note.cc NoteData.h NoteData.cc PeerName.cc PeerName.h \
+	Asn.cc Asn.h ConnectionsEncrypted.cc ConnectionsEncrypted.h \
+	DestinationAsn.h DestinationDomain.cc DestinationDomain.h \
+	DestinationIp.cc DestinationIp.h DomainData.cc DomainData.h \
+	ExtUser.cc ExtUser.h HasComponent.cc HasComponent.h \
+	HasComponentData.cc HasComponentData.h HierCodeData.cc \
+	HierCodeData.h HierCode.cc HierCode.h HttpHeaderData.cc \
+	HttpHeaderData.h HttpRepHeader.cc HttpRepHeader.h \
+	HttpReqHeader.cc HttpReqHeader.h HttpStatus.cc HttpStatus.h \
+	Ip.cc Ip.h LocalIp.cc LocalIp.h LocalPort.cc LocalPort.h \
+	MaxConnection.cc MaxConnection.h Method.cc MethodData.cc \
+	MethodData.h Method.h MyPortName.cc MyPortName.h Note.h \
+	Note.cc NoteData.h NoteData.cc PeerName.cc PeerName.h \
 	Protocol.cc ProtocolData.cc ProtocolData.h Protocol.h \
-	Random.cc Random.h Referer.cc Referer.h ReplyHeaderStrategy.h \
-	ReplyMimeType.cc ReplyMimeType.h RequestHeaderStrategy.h \
-	RequestMimeType.cc RequestMimeType.h SourceAsn.h \
+	Random.cc Random.h ReplyHeaderStrategy.h ReplyMimeType.h \
+	RequestHeaderStrategy.h RequestMimeType.h SourceAsn.h \
 	SourceDomain.cc SourceDomain.h SourceIp.cc SourceIp.h \
 	SquidError.h SquidError.cc SquidErrorData.cc SquidErrorData.h \
-	Tag.cc Tag.h Url.cc Url.h UrlLogin.cc UrlLogin.h UrlPath.cc \
-	UrlPath.h UrlPort.cc UrlPort.h UserData.cc UserData.h \
-	AclNameList.h AclDenyInfoList.h Gadgets.cc Gadgets.h \
-	AclSizeLimit.cc AclSizeLimit.h AtStep.cc AtStep.h \
-	AtStepData.cc AtStepData.h CertificateData.cc \
-	CertificateData.h Certificate.cc Certificate.h \
-	ServerCertificate.cc ServerCertificate.h ServerName.cc \
-	ServerName.h SslError.cc SslError.h SslErrorData.cc \
-	SslErrorData.h AdaptationService.h AdaptationService.cc \
-	AdaptationServiceData.h AdaptationServiceData.cc Arp.cc Arp.h \
-	Eui64.cc Eui64.h
+	Tag.cc Tag.h TransactionInitiator.cc TransactionInitiator.h \
+	Url.cc Url.h UrlLogin.cc UrlLogin.h UrlPath.cc UrlPath.h \
+	UrlPort.cc UrlPort.h UserData.cc UserData.h AclNameList.h \
+	AclDenyInfoList.h Gadgets.cc Gadgets.h AclSizeLimit.cc \
+	AclSizeLimit.h AtStep.cc AtStep.h AtStepData.cc AtStepData.h \
+	CertificateData.cc CertificateData.h Certificate.cc \
+	Certificate.h ServerCertificate.cc ServerCertificate.h \
+	ServerName.cc ServerName.h SslError.cc SslError.h \
+	SslErrorData.cc SslErrorData.h AdaptationService.h \
+	AdaptationService.cc AdaptationServiceData.h \
+	AdaptationServiceData.cc Arp.cc Arp.h Eui64.cc Eui64.h
 am__objects_1 = AtStep.lo AtStepData.lo CertificateData.lo \
 	Certificate.lo ServerCertificate.lo ServerName.lo SslError.lo \
 	SslErrorData.lo
 @ENABLE_SSL_TRUE@am__objects_2 = $(am__objects_1)
 am__objects_3 = AdaptationService.lo AdaptationServiceData.lo
 @ENABLE_ADAPTATION_TRUE@am__objects_4 = $(am__objects_3)
 am__objects_5 = Arp.lo Eui64.lo
 @ENABLE_EUI_TRUE@am__objects_6 = $(am__objects_5)
 am_libacls_la_OBJECTS = IntRange.lo RegexData.lo StringData.lo Time.lo \
-	TimeData.lo AllOf.lo AnyOf.lo Asn.lo Browser.lo \
-	ConnectionsEncrypted.lo DestinationDomain.lo DestinationIp.lo \
-	DomainData.lo ExtUser.lo HasComponent.lo HasComponentData.lo \
-	HierCodeData.lo HierCode.lo HttpHeaderData.lo HttpRepHeader.lo \
+	TimeData.lo AllOf.lo AnyOf.lo Asn.lo ConnectionsEncrypted.lo \
+	DestinationDomain.lo DestinationIp.lo DomainData.lo ExtUser.lo \
+	HasComponent.lo HasComponentData.lo HierCodeData.lo \
+	HierCode.lo HttpHeaderData.lo HttpRepHeader.lo \
 	HttpReqHeader.lo HttpStatus.lo Ip.lo LocalIp.lo LocalPort.lo \
 	MaxConnection.lo Method.lo MethodData.lo MyPortName.lo Note.lo \
 	NoteData.lo PeerName.lo Protocol.lo ProtocolData.lo Random.lo \
-	Referer.lo ReplyMimeType.lo RequestMimeType.lo SourceDomain.lo \
-	SourceIp.lo SquidError.lo SquidErrorData.lo Tag.lo Url.lo \
-	UrlLogin.lo UrlPath.lo UrlPort.lo UserData.lo Gadgets.lo \
-	AclSizeLimit.lo $(am__objects_2) $(am__objects_4) \
-	$(am__objects_6)
+	SourceDomain.lo SourceIp.lo SquidError.lo SquidErrorData.lo \
+	Tag.lo TransactionInitiator.lo Url.lo UrlLogin.lo UrlPath.lo \
+	UrlPort.lo UserData.lo Gadgets.lo AclSizeLimit.lo \
+	$(am__objects_2) $(am__objects_4) $(am__objects_6)
 libacls_la_OBJECTS = $(am_libacls_la_OBJECTS)
 AM_V_lt = $(am__v_lt_@AM_V@)
 am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
 am__v_lt_0 = --silent
 am__v_lt_1 = 
 libapi_la_LIBADD =
 am_libapi_la_OBJECTS = Acl.lo BoolOps.lo Checklist.lo InnerNode.lo \
-	Tree.lo
+	Options.lo Tree.lo
 libapi_la_OBJECTS = $(am_libapi_la_OBJECTS)
 libstate_la_LIBADD =
 am_libstate_la_OBJECTS = Strategised.lo FilledChecklist.lo Address.lo
 libstate_la_OBJECTS = $(am_libstate_la_OBJECTS)
 AM_V_P = $(am__v_P_@AM_V@)
 am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
@@ -826,51 +824,53 @@
 	BoolOps.h \
 	Checklist.cc \
 	Checklist.h \
 	forward.h \
 	InnerNode.cc \
 	InnerNode.h \
+	Options.h \
+	Options.cc \
 	Tree.cc \
 	Tree.h
 
 libstate_la_SOURCES = \
+	CharacterSetOption.h \
 	Data.h \
 	Strategy.h \
 	Strategised.cc \
 	Strategised.h \
 	FilledChecklist.cc \
 	FilledChecklist.h \
 	Address.h \
 	Address.cc
 
 libacls_la_SOURCES = IntRange.cc IntRange.h RegexData.cc RegexData.h \
 	StringData.cc StringData.h Time.cc Time.h TimeData.cc \
 	TimeData.h AllOf.cc AllOf.h AnyOf.cc AnyOf.h Asn.cc Asn.h \
-	Browser.cc Browser.h ConnectionsEncrypted.cc \
-	ConnectionsEncrypted.h DestinationAsn.h DestinationDomain.cc \
-	DestinationDomain.h DestinationIp.cc DestinationIp.h \
-	DomainData.cc DomainData.h ExtUser.cc ExtUser.h \
-	HasComponent.cc HasComponent.h HasComponentData.cc \
-	HasComponentData.h HierCodeData.cc HierCodeData.h HierCode.cc \
-	HierCode.h HttpHeaderData.cc HttpHeaderData.h HttpRepHeader.cc \
-	HttpRepHeader.h HttpReqHeader.cc HttpReqHeader.h HttpStatus.cc \
-	HttpStatus.h Ip.cc Ip.h LocalIp.cc LocalIp.h LocalPort.cc \
-	LocalPort.h MaxConnection.cc MaxConnection.h Method.cc \
-	MethodData.cc MethodData.h Method.h MyPortName.cc MyPortName.h \
-	Note.h Note.cc NoteData.h NoteData.cc PeerName.cc PeerName.h \
+	ConnectionsEncrypted.cc ConnectionsEncrypted.h \
+	DestinationAsn.h DestinationDomain.cc DestinationDomain.h \
+	DestinationIp.cc DestinationIp.h DomainData.cc DomainData.h \
+	ExtUser.cc ExtUser.h HasComponent.cc HasComponent.h \
+	HasComponentData.cc HasComponentData.h HierCodeData.cc \
+	HierCodeData.h HierCode.cc HierCode.h HttpHeaderData.cc \
+	HttpHeaderData.h HttpRepHeader.cc HttpRepHeader.h \
+	HttpReqHeader.cc HttpReqHeader.h HttpStatus.cc HttpStatus.h \
+	Ip.cc Ip.h LocalIp.cc LocalIp.h LocalPort.cc LocalPort.h \
+	MaxConnection.cc MaxConnection.h Method.cc MethodData.cc \
+	MethodData.h Method.h MyPortName.cc MyPortName.h Note.h \
+	Note.cc NoteData.h NoteData.cc PeerName.cc PeerName.h \
 	Protocol.cc ProtocolData.cc ProtocolData.h Protocol.h \
-	Random.cc Random.h Referer.cc Referer.h ReplyHeaderStrategy.h \
-	ReplyMimeType.cc ReplyMimeType.h RequestHeaderStrategy.h \
-	RequestMimeType.cc RequestMimeType.h SourceAsn.h \
+	Random.cc Random.h ReplyHeaderStrategy.h ReplyMimeType.h \
+	RequestHeaderStrategy.h RequestMimeType.h SourceAsn.h \
 	SourceDomain.cc SourceDomain.h SourceIp.cc SourceIp.h \
 	SquidError.h SquidError.cc SquidErrorData.cc SquidErrorData.h \
-	Tag.cc Tag.h Url.cc Url.h UrlLogin.cc UrlLogin.h UrlPath.cc \
-	UrlPath.h UrlPort.cc UrlPort.h UserData.cc UserData.h \
-	AclNameList.h AclDenyInfoList.h Gadgets.cc Gadgets.h \
-	AclSizeLimit.cc AclSizeLimit.h $(am__append_2) $(am__append_3) \
-	$(am__append_4)
+	Tag.cc Tag.h TransactionInitiator.cc TransactionInitiator.h \
+	Url.cc Url.h UrlLogin.cc UrlLogin.h UrlPath.cc UrlPath.h \
+	UrlPort.cc UrlPort.h UserData.cc UserData.h AclNameList.h \
+	AclDenyInfoList.h Gadgets.cc Gadgets.h AclSizeLimit.cc \
+	AclSizeLimit.h $(am__append_2) $(am__append_3) $(am__append_4)
 EXTRA_libacls_la_SOURCES = $(SSL_ACLS) $(ADAPT_ACLS) $(ARP_ACLS)
 SSL_ACLS = \
 	AtStep.cc \
 	AtStep.h \
 	AtStepData.cc \
 	AtStepData.h \
@@ -973,13 +973,12 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AnyOf.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Arp.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Asn.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AtStep.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AtStepData.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/BoolOps.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Browser.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Certificate.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/CertificateData.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Checklist.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ConnectionsEncrypted.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DestinationDomain.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DestinationIp.Plo@am__quote@
@@ -1004,20 +1003,18 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MaxConnection.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Method.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MethodData.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MyPortName.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Note.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/NoteData.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Options.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/PeerName.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Protocol.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ProtocolData.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Random.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Referer.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/RegexData.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ReplyMimeType.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/RequestMimeType.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ServerCertificate.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ServerName.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SourceDomain.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SourceIp.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SquidError.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SquidErrorData.Plo@am__quote@
@@ -1025,12 +1022,13 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SslErrorData.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Strategised.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/StringData.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Tag.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Time.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/TimeData.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/TransactionInitiator.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Tree.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Url.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/UrlLogin.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/UrlPath.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/UrlPort.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/UserData.Plo@am__quote@
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/MaxConnection.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/MaxConnection.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/MaxConnection.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/MaxConnection.h	2017-07-02 16:41:18.000000000 +0800
@@ -7,13 +7,12 @@
  */
 
 #ifndef SQUID_ACLMAXCONNECTION_H
 #define SQUID_ACLMAXCONNECTION_H
 
 #include "acl/Acl.h"
-#include "acl/Checklist.h"
 
 /// \ingroup ACLAPI
 class ACLMaxConnection : public ACL
 {
     MEMPROXY_CLASS(ACLMaxConnection);
 
@@ -30,14 +29,12 @@
     virtual SBufList dump() const;
     virtual bool empty () const;
     virtual bool valid () const;
     virtual void prepareForUse();
 
 protected:
-    static Prototype RegistryProtoype;
-    static ACLMaxConnection RegistryEntry_;
     char const *class_;
     int limit;
 };
 
 #endif /* SQUID_ACLMAXCONNECTION_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Method.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Method.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Method.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Method.cc	2017-07-02 16:41:18.000000000 +0800
@@ -4,29 +4,22 @@
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
-#include "acl/Checklist.h"
+#include "acl/FilledChecklist.h"
 #include "acl/Method.h"
 #include "acl/MethodData.h"
+#include "acl/Strategised.h"
 #include "HttpRequest.h"
 
 /* explicit template instantiation required for some systems */
 
 template class ACLStrategised<HttpRequestMethod>;
 
 int
-ACLMethodStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLMethodStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     return data->match (checklist->request->method);
 }
 
-ACLMethodStrategy *
-ACLMethodStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLMethodStrategy ACLMethodStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Method.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Method.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Method.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Method.h	2017-07-02 16:41:18.000000000 +0800
@@ -6,46 +6,20 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLMETHOD_H
 #define SQUID_ACLMETHOD_H
 
-#include "acl/Strategised.h"
 #include "acl/Strategy.h"
 #include "http/RequestMethod.h"
 
 /// \ingroup ACLAPI
 class ACLMethodStrategy : public ACLStrategy<HttpRequestMethod>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *);
     virtual bool requiresRequest() const {return true;}
-
-    static ACLMethodStrategy *Instance();
-
-    /**
-     * Not implemented to prevent copies of the instance.
-     \par
-     * Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends
-     */
-    ACLMethodStrategy(ACLMethodStrategy const &);
-
-private:
-    static ACLMethodStrategy Instance_;
-    ACLMethodStrategy() {}
-
-    ACLMethodStrategy&operator=(ACLMethodStrategy const &);
-};
-
-/// \ingroup ACLAPI
-class ACLMethod
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<HttpRequestMethod> RegistryEntry_;
 };
 
 #endif /* SQUID_ACLMETHOD_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/MyPortName.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/MyPortName.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/MyPortName.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/MyPortName.cc	2017-07-02 16:41:18.000000000 +0800
@@ -4,32 +4,24 @@
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
-#include "acl/Checklist.h"
+#include "acl/FilledChecklist.h"
 #include "acl/MyPortName.h"
 #include "acl/StringData.h"
 #include "anyp/PortCfg.h"
 #include "client_side.h"
 #include "http/Stream.h"
 #include "HttpRequest.h"
 
 int
-ACLMyPortNameStrategy::match(ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLMyPortNameStrategy::match(ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     if (checklist->conn() != NULL && checklist->conn()->port != NULL)
         return data->match(checklist->conn()->port->name);
     if (checklist->request != NULL)
         return data->match(checklist->request->myportname.termedBuf());
     return 0;
 }
 
-ACLMyPortNameStrategy *
-ACLMyPortNameStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLMyPortNameStrategy ACLMyPortNameStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/MyPortName.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/MyPortName.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/MyPortName.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/MyPortName.h	2017-07-02 16:41:18.000000000 +0800
@@ -5,37 +5,17 @@
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLMYPORTNAME_H
 #define SQUID_ACLMYPORTNAME_H
-#include "acl/Strategised.h"
 #include "acl/Strategy.h"
 
 class ACLMyPortNameStrategy : public ACLStrategy<const char *>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-    static ACLMyPortNameStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLMyPortNameStrategy(ACLMyPortNameStrategy const &);
-
-private:
-    static ACLMyPortNameStrategy Instance_;
-    ACLMyPortNameStrategy() {}
-
-    ACLMyPortNameStrategy&operator=(ACLMyPortNameStrategy const &);
-};
-
-class ACLMyPortName
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<const char *> RegistryEntry_;
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *) override;
 };
 
 #endif /* SQUID_ACLMYPORTNAME_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Note.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Note.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Note.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Note.cc	2017-07-02 16:41:18.000000000 +0800
@@ -4,45 +4,59 @@
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
-#include "acl/Checklist.h"
+#include "acl/FilledChecklist.h"
 #include "acl/HttpHeaderData.h"
 #include "acl/Note.h"
 #include "acl/NoteData.h"
 #include "HttpRequest.h"
-#include "Notes.h"
 #include "parser/Tokenizer.h"
 #include "sbuf/StringConvert.h"
 
+/* Acl::AnnotationStrategy */
+
+const Acl::Options &
+Acl::AnnotationStrategy::options()
+{
+    static const Acl::CharacterSetOption Delimiters;
+    static const Acl::Options MyOptions = {
+        { "-m", &Delimiters }
+    };
+    Delimiters.linkWith(&delimiters);
+    return MyOptions;
+}
+
+/* ACLNoteStrategy */
+
 int
-ACLNoteStrategy::match(ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &flags)
+ACLNoteStrategy::match(ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     if (const auto request = checklist->request) {
-        if (request->notes != NULL && matchNotes(data, request->notes.getRaw(), flags.delimiters()))
+        if (request->notes != NULL && matchNotes(data, request->notes.getRaw()))
             return 1;
 #if USE_ADAPTATION
         const Adaptation::History::Pointer ah = request->adaptLogHistory();
-        if (ah != NULL && ah->metaHeaders != NULL && matchNotes(data, ah->metaHeaders.getRaw(), flags.delimiters()))
+        if (ah != NULL && ah->metaHeaders != NULL && matchNotes(data, ah->metaHeaders.getRaw()))
             return 1;
 #endif
     }
     return 0;
 }
 
 bool
-ACLNoteStrategy::matchNotes(ACLData<MatchType> *noteData, const NotePairs *note, const CharacterSet *delimiters) const
+ACLNoteStrategy::matchNotes(ACLData<MatchType> *noteData, const NotePairs *note) const
 {
     for (auto &entry: note->entries) {
-        if (delimiters) {
+        if (!delimiters.value.isEmpty()) {
             NotePairs::Entry e(entry->name.termedBuf(), "");
             Parser::Tokenizer t(StringToSBuf(entry->value));
             SBuf s;
-            while (t.token(s, *delimiters)) {
+            while (t.token(s, delimiters.value)) {
                 e.value = s.c_str();
                 if (noteData->match(&e))
                     return true;
             }
             s = t.remaining();
             e.value = s.c_str();
@@ -52,14 +66,6 @@
         if (noteData->match(entry))
             return true;
     }
     return false;
 }
 
-ACLNoteStrategy *
-ACLNoteStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLNoteStrategy ACLNoteStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Note.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Note.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Note.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Note.h	2017-07-02 16:41:18.000000000 +0800
@@ -6,46 +6,40 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLNOTE_H
 #define SQUID_ACLNOTE_H
 
-#include "acl/Strategised.h"
+#include "acl/CharacterSetOption.h"
+#include "acl/Data.h"
 #include "acl/Strategy.h"
+#include "Notes.h"
 
-class ACLNoteData;
-class CharacterSet;
-class HttpRequest;
+namespace Acl {
 
-/// \ingroup ACLAPI
-class ACLNoteStrategy : public ACLStrategy<NotePairs::Entry *>
+/// common parent of several ACLs dealing with transaction annotations
+class AnnotationStrategy: public ACLStrategy<NotePairs::Entry *>
 {
-
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-    virtual bool requiresRequest() const { return true; }
+    AnnotationStrategy(): delimiters(CharacterSet(__FILE__, ",")) {}
 
-    static ACLNoteStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLNoteStrategy(ACLNoteStrategy const &);
-
-private:
-    static ACLNoteStrategy Instance_;
-    ACLNoteStrategy() { }
+    virtual const Acl::Options &options() override;
 
-    ACLNoteStrategy& operator = (ACLNoteStrategy const &);
-    bool matchNotes(ACLData<MatchType> *, const NotePairs *, const CharacterSet *) const;
+    Acl::CharacterSetOptionValue delimiters; ///< annotation separators
 };
 
+} // namespace Acl
+
 /// \ingroup ACLAPI
-class ACLNote
+class ACLNoteStrategy: public Acl::AnnotationStrategy
 {
 
+public:
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *);
+    virtual bool requiresRequest() const { return true; }
+
 private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<NotePairs::Entry *> RegistryEntry_;
+    bool matchNotes(ACLData<MatchType> *, const NotePairs *) const;
 };
 
 #endif /* SQUID_ACLNOTE_H */
 
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl: Options.cc
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl: Options.h
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/PeerName.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/PeerName.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/PeerName.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/PeerName.cc	2017-07-02 16:41:18.000000000 +0800
@@ -4,28 +4,19 @@
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
-#include "acl/Checklist.h"
+#include "acl/FilledChecklist.h"
 #include "acl/PeerName.h"
 #include "acl/RegexData.h"
 #include "acl/StringData.h"
-#include "CachePeer.h"
 
 int
-ACLPeerNameStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLPeerNameStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     if (!checklist->dst_peer_name.isEmpty())
         return data->match(checklist->dst_peer_name.c_str());
     return 0;
 }
 
-ACLPeerNameStrategy *
-ACLPeerNameStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLPeerNameStrategy ACLPeerNameStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/PeerName.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/PeerName.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/PeerName.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/PeerName.h	2017-07-02 16:41:18.000000000 +0800
@@ -6,39 +6,17 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLPEERNAME_H
 #define SQUID_ACLPEERNAME_H
 
-#include "acl/Strategised.h"
 #include "acl/Strategy.h"
 
 class ACLPeerNameStrategy : public ACLStrategy<const char *>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-    static ACLPeerNameStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLPeerNameStrategy(ACLPeerNameStrategy const &);
-
-private:
-    static ACLPeerNameStrategy Instance_;
-    ACLPeerNameStrategy() {}
-
-    ACLPeerNameStrategy&operator=(ACLPeerNameStrategy const &);
-};
-
-class ACLPeerName
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<const char *> RegistryEntry_;
-    static ACL::Prototype RegexRegistryProtoype;
-    static ACLStrategised<char const *> RegexRegistryEntry_;
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *) override;
 };
 
 #endif /* SQUID_ACLPEERNAME_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Protocol.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Protocol.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Protocol.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Protocol.cc	2017-07-02 16:41:18.000000000 +0800
@@ -4,29 +4,22 @@
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
-#include "acl/Checklist.h"
+#include "acl/FilledChecklist.h"
 #include "acl/Protocol.h"
 #include "acl/ProtocolData.h"
+#include "acl/Strategised.h"
 #include "HttpRequest.h"
 
 /* explicit template instantiation required for some systems */
 
 template class ACLStrategised<AnyP::ProtocolType>;
 
 int
-ACLProtocolStrategy::match(ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLProtocolStrategy::match(ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     return data->match(checklist->request->url.getScheme());
 }
 
-ACLProtocolStrategy *
-ACLProtocolStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLProtocolStrategy ACLProtocolStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Protocol.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Protocol.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Protocol.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Protocol.h	2017-07-02 16:41:18.000000000 +0800
@@ -6,40 +6,19 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLPROTOCOL_H
 #define SQUID_ACLPROTOCOL_H
 
-#include "acl/Strategised.h"
 #include "acl/Strategy.h"
 #include "anyp/ProtocolType.h"
 
 class ACLProtocolStrategy : public ACLStrategy<AnyP::ProtocolType>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *);
     virtual bool requiresRequest() const {return true;}
-
-    static ACLProtocolStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLProtocolStrategy(ACLProtocolStrategy const &);
-
-private:
-    static ACLProtocolStrategy Instance_;
-    ACLProtocolStrategy() {}
-
-    ACLProtocolStrategy&operator=(ACLProtocolStrategy const &);
-};
-
-class ACLProtocol
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<AnyP::ProtocolType> RegistryEntry_;
 };
 
 #endif /* SQUID_ACLPROTOCOL_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Random.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Random.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Random.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Random.h	2017-07-02 16:41:18.000000000 +0800
@@ -7,13 +7,12 @@
  */
 
 #ifndef SQUID_ACL_RANDOM_H
 #define SQUID_ACL_RANDOM_H
 
 #include "acl/Acl.h"
-#include "acl/Checklist.h"
 
 class ACLRandom : public ACL
 {
     MEMPROXY_CLASS(ACLRandom);
 
 public:
@@ -28,14 +27,12 @@
     virtual int match(ACLChecklist *checklist);
     virtual SBufList dump() const;
     virtual bool empty () const;
     virtual bool valid() const;
 
 protected:
-    static Prototype RegistryProtoype;
-    static ACLRandom RegistryEntry_;
     double data;        // value to be exceeded before this ACL will match
     char pattern[256];  // pattern from config file. Used to generate 'data'
     char const *class_;
 };
 
 #endif /* SQUID_ACL_RANDOM_H */
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl: Referer.cc
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl: Referer.h
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/RegexData.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/RegexData.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/RegexData.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/RegexData.cc	2017-07-02 16:41:18.000000000 +0800
@@ -24,12 +24,19 @@
 #include "sbuf/List.h"
 
 ACLRegexData::~ACLRegexData()
 {
 }
 
+const Acl::ParameterFlags &
+ACLRegexData::supportedFlags() const
+{
+    static const Acl::ParameterFlags flags = { "-i", "+i" };
+    return flags;
+}
+
 bool
 ACLRegexData::match(char const *word)
 {
     if (!word)
         return 0;
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/RegexData.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/RegexData.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/RegexData.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/RegexData.h	2017-07-02 16:41:18.000000000 +0800
@@ -21,12 +21,13 @@
 
 public:
     virtual ~ACLRegexData();
     virtual bool match(char const *user);
     virtual SBufList dump() const;
     virtual void parse();
+    virtual const Acl::ParameterFlags &supportedFlags() const;
     virtual bool empty() const;
     virtual ACLData<char const *> *clone() const;
 
 private:
     std::list<RegexPattern> data;
 };
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ReplyHeaderStrategy.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ReplyHeaderStrategy.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ReplyHeaderStrategy.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ReplyHeaderStrategy.h	2017-07-02 16:41:18.000000000 +0800
@@ -6,62 +6,35 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLREPLYHEADERSTRATEGY_H
 #define SQUID_ACLREPLYHEADERSTRATEGY_H
 
-class ACLChecklist;
-
 #include "acl/Acl.h"
 #include "acl/Data.h"
 #include "acl/FilledChecklist.h"
 #include "acl/Strategy.h"
 #include "HttpReply.h"
 
 template <Http::HdrType header>
 class ACLReplyHeaderStrategy : public ACLStrategy<char const *>
 {
 
 public:
-    virtual int match (ACLData<char const *> * &, ACLFilledChecklist *, ACLFlags &);
+    virtual int match (ACLData<char const *> * &, ACLFilledChecklist *);
     virtual bool requiresReply() const {return true;}
-
-    static ACLReplyHeaderStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLReplyHeaderStrategy(ACLReplyHeaderStrategy const &);
-
-private:
-    static ACLReplyHeaderStrategy *Instance_;
-    ACLReplyHeaderStrategy() {}
-
-    ACLReplyHeaderStrategy&operator=(ACLReplyHeaderStrategy const &);
 };
 
 template <Http::HdrType header>
 int
-ACLReplyHeaderStrategy<header>::match (ACLData<char const *> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLReplyHeaderStrategy<header>::match (ACLData<char const *> * &data, ACLFilledChecklist *checklist)
 {
     char const *theHeader = checklist->reply->header.getStr(header);
 
     if (NULL == theHeader)
         return 0;
 
     return data->match(theHeader);
 }
 
-template <Http::HdrType header>
-ACLReplyHeaderStrategy<header> *
-ACLReplyHeaderStrategy<header>::Instance()
-{
-    if (!Instance_)
-        Instance_ = new ACLReplyHeaderStrategy<header>;
-
-    return Instance_;
-}
-
-template <Http::HdrType header>
-ACLReplyHeaderStrategy<header> * ACLReplyHeaderStrategy<header>::Instance_ = NULL;
-
 #endif /* SQUID_REPLYHEADERSTRATEGY_H */
 
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl: ReplyMimeType.cc
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ReplyMimeType.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ReplyMimeType.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ReplyMimeType.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ReplyMimeType.h	2017-07-02 16:41:18.000000000 +0800
@@ -6,32 +6,21 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLREPLYMIMETYPE_H
 #define SQUID_ACLREPLYMIMETYPE_H
 
-#include "acl/Acl.h"
-#include "acl/Strategised.h"
-
-class ACLReplyMIMEType
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<char const *> RegistryEntry_;
-};
-
-/* partial specialisation */
-
-#include "acl/Checklist.h"
 #include "acl/Data.h"
+#include "acl/FilledChecklist.h"
 #include "acl/ReplyHeaderStrategy.h"
 
+/* partial specialisation */
+
 template <>
 inline int
-ACLReplyHeaderStrategy<Http::HdrType::CONTENT_TYPE>::match(ACLData<char const *> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLReplyHeaderStrategy<Http::HdrType::CONTENT_TYPE>::match(ACLData<char const *> * &data, ACLFilledChecklist *checklist)
 {
     char const *theHeader = checklist->reply->header.getStr(Http::HdrType::CONTENT_TYPE);
 
     if (NULL == theHeader)
         theHeader = "";
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/RequestHeaderStrategy.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/RequestHeaderStrategy.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/RequestHeaderStrategy.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/RequestHeaderStrategy.h	2017-07-02 16:41:18.000000000 +0800
@@ -16,49 +16,24 @@
 
 template <Http::HdrType header>
 class ACLRequestHeaderStrategy : public ACLStrategy<char const *>
 {
 
 public:
-    virtual int match (ACLData<char const *> * &, ACLFilledChecklist *, ACLFlags &);
+    virtual int match (ACLData<char const *> * &, ACLFilledChecklist *);
     virtual bool requiresRequest() const {return true;}
-
-    static ACLRequestHeaderStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLRequestHeaderStrategy(ACLRequestHeaderStrategy const &);
-
-private:
-    static ACLRequestHeaderStrategy *Instance_;
-    ACLRequestHeaderStrategy() {}
-
-    ACLRequestHeaderStrategy&operator=(ACLRequestHeaderStrategy const &);
 };
 
 template <Http::HdrType header>
 int
-ACLRequestHeaderStrategy<header>::match (ACLData<char const *> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLRequestHeaderStrategy<header>::match (ACLData<char const *> * &data, ACLFilledChecklist *checklist)
 {
     char const *theHeader = checklist->request->header.getStr(header);
 
     if (NULL == theHeader)
         return 0;
 
     return data->match(theHeader);
 }
 
-template <Http::HdrType header>
-ACLRequestHeaderStrategy<header> *
-ACLRequestHeaderStrategy<header>::Instance()
-{
-    if (!Instance_)
-        Instance_ = new ACLRequestHeaderStrategy<header>;
-
-    return Instance_;
-}
-
-template <Http::HdrType header>
-ACLRequestHeaderStrategy<header> * ACLRequestHeaderStrategy<header>::Instance_ = NULL;
-
 #endif /* SQUID_REQUESTHEADERSTRATEGY_H */
 
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl: RequestMimeType.cc
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/RequestMimeType.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/RequestMimeType.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/RequestMimeType.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/RequestMimeType.h	2017-07-02 16:41:18.000000000 +0800
@@ -6,32 +6,21 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLREQUESTMIMETYPE_H
 #define SQUID_ACLREQUESTMIMETYPE_H
 
-#include "acl/Acl.h"
-#include "acl/Strategised.h"
-
-class ACLRequestMIMEType
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<char const *> RegistryEntry_;
-};
-
-/* partial specialisation */
-
-#include "acl/Checklist.h"
 #include "acl/Data.h"
+#include "acl/FilledChecklist.h"
 #include "acl/RequestHeaderStrategy.h"
 
+/* partial specialisation */
+
 template <>
 inline int
-ACLRequestHeaderStrategy<Http::HdrType::CONTENT_TYPE>::match (ACLData<char const *> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLRequestHeaderStrategy<Http::HdrType::CONTENT_TYPE>::match (ACLData<char const *> * &data, ACLFilledChecklist *checklist)
 {
     char const *theHeader = checklist->request->header.getStr(Http::HdrType::CONTENT_TYPE);
 
     if (NULL == theHeader)
         theHeader = "";
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ServerCertificate.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ServerCertificate.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ServerCertificate.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ServerCertificate.cc	2017-07-02 16:41:18.000000000 +0800
@@ -16,13 +16,13 @@
 #include "client_side.h"
 #include "fde.h"
 #include "http/Stream.h"
 #include "ssl/ServerBump.h"
 
 int
-ACLServerCertificateStrategy::match(ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLServerCertificateStrategy::match(ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     Security::CertPointer cert;
     if (checklist->serverCert)
         cert = checklist->serverCert;
     else if (checklist->conn() != NULL && checklist->conn()->serverBump())
         cert = checklist->conn()->serverBump()->serverCert;
@@ -30,16 +30,8 @@
     if (!cert)
         return 0;
 
     return data->match(cert.get());
 }
 
-ACLServerCertificateStrategy *
-ACLServerCertificateStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLServerCertificateStrategy ACLServerCertificateStrategy::Instance_;
-
 #endif /* USE_OPENSSL */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ServerCertificate.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ServerCertificate.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ServerCertificate.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ServerCertificate.h	2017-07-02 16:41:18.000000000 +0800
@@ -16,30 +16,11 @@
 #include "ssl/support.h"
 
 /// \ingroup ACLAPI
 class ACLServerCertificateStrategy : public ACLStrategy<X509 *>
 {
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-    static ACLServerCertificateStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLServerCertificateStrategy(ACLServerCertificateStrategy const &);
-
-private:
-    static ACLServerCertificateStrategy Instance_;
-    ACLServerCertificateStrategy() {}
-
-    ACLServerCertificateStrategy&operator=(ACLServerCertificateStrategy const &);
-};
-
-/// \ingroup ACLAPI
-class ACLServerCertificate
-{
-private:
-    static ACL::Prototype X509FingerprintRegistryProtoype;
-    static ACLStrategised<X509*> X509FingerprintRegistryEntry_;
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *) override;
 };
 
 #endif /* SQUID_ACLSERVERCERTIFICATE_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ServerName.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ServerName.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ServerName.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ServerName.cc	2017-07-02 16:41:18.000000000 +0800
@@ -6,14 +6,14 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 /* DEBUG: section 28    Access Control */
 
 #include "squid.h"
-#include "acl/Checklist.h"
 #include "acl/DomainData.h"
+#include "acl/FilledChecklist.h"
 #include "acl/RegexData.h"
 #include "acl/ServerName.h"
 #include "client_side.h"
 #include "fde.h"
 #include "http/Stream.h"
 #include "HttpRequest.h"
@@ -84,43 +84,81 @@
     if (data->match(cn))
         return 0;
     return 1;
 }
 
 int
-ACLServerNameStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &flags)
+ACLServerNameStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     assert(checklist != NULL && checklist->request != NULL);
 
     const char *serverName = nullptr;
-    SBuf serverNameKeeper; // because c_str() is not constant
+    SBuf clientSniKeeper; // because c_str() is not constant
     if (ConnStateData *conn = checklist->conn()) {
-
-        if (conn->serverBump()) {
-            if (X509 *peer_cert = conn->serverBump()->serverCert.get())
-                return Ssl::matchX509CommonNames(peer_cert, (void *)data, check_cert_domain<MatchType>);
-        }
-
-        if (conn->sslCommonName().isEmpty()) {
+        const char *clientRequestedServerName = nullptr;
+        clientSniKeeper = conn->tlsClientSni();
+        if (clientSniKeeper.isEmpty()) {
             const char *host = checklist->request->url.host();
             if (host && *host) // paranoid first condition: host() is never nil
-                serverName = host;
-        } else {
-            serverNameKeeper = conn->sslCommonName();
-            serverName = serverNameKeeper.c_str();
+                clientRequestedServerName = host;
+        } else
+            clientRequestedServerName = clientSniKeeper.c_str();
+
+        if (useConsensus) {
+            X509 *peer_cert = conn->serverBump() ? conn->serverBump()->serverCert.get() : nullptr;
+            // use the client requested name if it matches the server
+            // certificate or if the certificate is not available
+            if (!peer_cert || Ssl::checkX509ServerValidity(peer_cert, clientRequestedServerName))
+                serverName = clientRequestedServerName;
+        } else if (useClientRequested)
+            serverName = clientRequestedServerName;
+        else { // either no options or useServerProvided
+            if (X509 *peer_cert = (conn->serverBump() ? conn->serverBump()->serverCert.get() : nullptr))
+                return Ssl::matchX509CommonNames(peer_cert, (void *)data, check_cert_domain<MatchType>);
+            if (!useServerProvided)
+                serverName = clientRequestedServerName;
         }
     }
 
     if (!serverName)
         serverName = "none";
 
     return data->match(serverName);
 }
 
-ACLServerNameStrategy *
-ACLServerNameStrategy::Instance()
+const Acl::Options &
+ACLServerNameStrategy::options()
 {
-    return &Instance_;
+    static const Acl::BooleanOption ClientRequested;
+    static const Acl::BooleanOption ServerProvided;
+    static const Acl::BooleanOption Consensus;
+    static const Acl::Options MyOptions = {
+        {"--client-requested", &ClientRequested},
+        {"--server-provided", &ServerProvided},
+        {"--consensus", &Consensus}
+    };
+
+    ClientRequested.linkWith(&useClientRequested);
+    ServerProvided.linkWith(&useServerProvided);
+    Consensus.linkWith(&useConsensus);
+    return MyOptions;
 }
 
-ACLServerNameStrategy ACLServerNameStrategy::Instance_;
+bool
+ACLServerNameStrategy::valid() const
+{
+    int optionCount = 0;
+
+    if (useClientRequested)
+        optionCount++;
+    if (useServerProvided)
+        optionCount++;
+    if (useConsensus)
+        optionCount++;
+
+    if (optionCount > 1) {
+        debugs(28, DBG_CRITICAL, "ERROR: Multiple options given for the server_name ACL");
+        return false;
+    }
+    return true;
+}
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ServerName.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ServerName.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/ServerName.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/ServerName.h	2017-07-02 16:41:18.000000000 +0800
@@ -7,16 +7,14 @@
  */
 
 #ifndef SQUID_ACLSERVERNAME_H
 #define SQUID_ACLSERVERNAME_H
 
 #include "acl/Acl.h"
-#include "acl/Checklist.h"
-#include "acl/Data.h"
 #include "acl/DomainData.h"
-#include "acl/Strategised.h"
+#include "acl/Strategy.h"
 
 class ACLServerNameData : public ACLDomainData {
     MEMPROXY_CLASS(ACLServerNameData);
 public:
     ACLServerNameData() : ACLDomainData() {}
     virtual bool match(const char *);
@@ -24,37 +22,20 @@
 };
 
 class ACLServerNameStrategy : public ACLStrategy<char const *>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-    static ACLServerNameStrategy *Instance();
+    /* ACLStrategy API */
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *);
     virtual bool requiresRequest() const {return true;}
-
-    /**
-     * Not implemented to prevent copies of the instance.
-     \par
-     * Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends
-     */
-    ACLServerNameStrategy(ACLServerNameStrategy const &);
-
-private:
-    static ACLServerNameStrategy Instance_;
-    ACLServerNameStrategy() {}
-
-    ACLServerNameStrategy&operator=(ACLServerNameStrategy const &);
-};
-
-class ACLServerName
-{
+    virtual const Acl::Options &options();
+    virtual bool valid() const;
 
 private:
-    static ACL::Prototype LiteralRegistryProtoype;
-    static ACLStrategised<char const *> LiteralRegistryEntry_;
-    static ACL::Prototype RegexRegistryProtoype;
-    static ACLStrategised<char const *> RegexRegistryEntry_;
+    Acl::BooleanOptionValue useClientRequested; ///< Ignore server-supplied names
+    Acl::BooleanOptionValue useServerProvided; ///< Ignore client-supplied names
+    Acl::BooleanOptionValue useConsensus; ///< Ignore mismatching names
 };
 
 #endif /* SQUID_ACLSERVERNAME_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/SourceAsn.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/SourceAsn.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/SourceAsn.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/SourceAsn.h	2017-07-02 16:41:18.000000000 +0800
@@ -15,22 +15,11 @@
 class ACLChecklist;
 
 class ACLSourceASNStrategy : public ACLStrategy<Ip::Address>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-    static ACLSourceASNStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLSourceASNStrategy(ACLSourceASNStrategy const &);
-
-private:
-    static ACLSourceASNStrategy Instance_;
-    ACLSourceASNStrategy() {}
-
-    ACLSourceASNStrategy&operator=(ACLSourceASNStrategy const &);
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *) override;
 };
 
 #endif /* SQUID_ACL_SOURCEASN_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/SourceDomain.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/SourceDomain.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/SourceDomain.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/SourceDomain.cc	2017-07-02 16:41:18.000000000 +0800
@@ -8,12 +8,13 @@
 
 /* DEBUG: section 28    Access Control */
 
 #include "squid.h"
 #include "acl/Checklist.h"
 #include "acl/DomainData.h"
+#include "acl/FilledChecklist.h"
 #include "acl/RegexData.h"
 #include "acl/SourceDomain.h"
 #include "fqdncache.h"
 #include "HttpRequest.h"
 
 SourceDomainLookup SourceDomainLookup::instance_;
@@ -37,13 +38,13 @@
     checklist->markSourceDomainChecked();
     checklist->request->recordLookup(details);
     checklist->resumeNonBlockingCheck(SourceDomainLookup::Instance());
 }
 
 int
-ACLSourceDomainStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLSourceDomainStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     const char *fqdn = NULL;
     fqdn = fqdncache_gethostbyaddr(checklist->src_addr, FQDN_LOOKUP_IF_MISS);
 
     if (fqdn) {
         return data->match(fqdn);
@@ -55,14 +56,6 @@
         // else fall through to "none" match, hiding the lookup failure (XXX)
     }
 
     return data->match("none");
 }
 
-ACLSourceDomainStrategy *
-ACLSourceDomainStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLSourceDomainStrategy ACLSourceDomainStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/SourceDomain.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/SourceDomain.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/SourceDomain.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/SourceDomain.h	2017-07-02 16:41:18.000000000 +0800
@@ -8,31 +8,20 @@
 
 #ifndef SQUID_ACLSOURCEDOMAIN_H
 #define SQUID_ACLSOURCEDOMAIN_H
 #include "acl/Acl.h"
 #include "acl/Checklist.h"
 #include "acl/Data.h"
-#include "acl/Strategised.h"
+#include "acl/Strategy.h"
 #include "dns/forward.h"
 
 class ACLSourceDomainStrategy : public ACLStrategy<char const *>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-    static ACLSourceDomainStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLSourceDomainStrategy(ACLSourceDomainStrategy const &);
-
-private:
-    static ACLSourceDomainStrategy Instance_;
-    ACLSourceDomainStrategy() {}
-
-    ACLSourceDomainStrategy&operator=(ACLSourceDomainStrategy const &);
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *) override;
 };
 
 class SourceDomainLookup : public ACLChecklist::AsyncState
 {
 
 public:
@@ -41,18 +30,8 @@
 
 private:
     static SourceDomainLookup instance_;
     static void LookupDone(const char *, const Dns::LookupDetails &, void *);
 };
 
-class ACLSourceDomain
-{
-
-private:
-    static ACL::Prototype LiteralRegistryProtoype;
-    static ACLStrategised<char const *> LiteralRegistryEntry_;
-    static ACL::Prototype RegexRegistryProtoype;
-    static ACLStrategised<char const *> RegexRegistryEntry_;
-};
-
 #endif /* SQUID_ACLSOURCEDOMAIN_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/SourceIp.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/SourceIp.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/SourceIp.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/SourceIp.h	2017-07-02 16:41:18.000000000 +0800
@@ -16,14 +16,10 @@
     MEMPROXY_CLASS(ACLSourceIP);
 
 public:
     virtual char const *typeString() const;
     virtual int match(ACLChecklist *checklist);
     virtual ACL *clone()const;
-
-private:
-    static Prototype RegistryProtoype;
-    static ACLSourceIP RegistryEntry_;
 };
 
 #endif /* SQUID_ACLSOURCEIP_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/SquidError.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/SquidError.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/SquidError.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/SquidError.cc	2017-07-02 16:41:18.000000000 +0800
@@ -4,28 +4,20 @@
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
-#include "acl/Checklist.h"
+#include "acl/FilledChecklist.h"
 #include "acl/SquidError.h"
 #include "HttpRequest.h"
 
 int
-ACLSquidErrorStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLSquidErrorStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     if (checklist->requestErrorType != ERR_MAX)
         return data->match(checklist->requestErrorType);
     else if (checklist->request)
         return data->match(checklist->request->errType);
     return 0;
 }
 
-ACLSquidErrorStrategy *
-ACLSquidErrorStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLSquidErrorStrategy ACLSquidErrorStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/SquidError.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/SquidError.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/SquidError.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/SquidError.h	2017-07-02 16:41:18.000000000 +0800
@@ -6,39 +6,18 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLSQUIDERROR_H
 #define SQUID_ACLSQUIDERROR_H
 
-#include "acl/Strategised.h"
 #include "acl/Strategy.h"
 #include "err_type.h"
 
 class ACLSquidErrorStrategy : public ACLStrategy<err_type>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-
-    static ACLSquidErrorStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLSquidErrorStrategy(ACLSquidErrorStrategy const &);
-
-private:
-    static ACLSquidErrorStrategy Instance_;
-    ACLSquidErrorStrategy() {}
-
-    ACLSquidErrorStrategy&operator=(ACLSquidErrorStrategy const &);
-};
-
-class ACLSquidError
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<err_type> RegistryEntry_;
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *) override;
 };
 
 #endif /* SQUID_ACLSQUIDERROR_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/SslError.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/SslError.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/SslError.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/SslError.cc	2017-07-02 16:41:18.000000000 +0800
@@ -4,24 +4,16 @@
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
-#include "acl/Checklist.h"
+#include "acl/FilledChecklist.h"
 #include "acl/SslError.h"
 #include "acl/SslErrorData.h"
 
 int
-ACLSslErrorStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLSslErrorStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     return data->match (checklist->sslErrors);
 }
 
-ACLSslErrorStrategy *
-ACLSslErrorStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLSslErrorStrategy ACLSslErrorStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/SslError.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/SslError.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/SslError.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/SslError.h	2017-07-02 16:41:18.000000000 +0800
@@ -6,37 +6,18 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLSSL_ERROR_H
 #define SQUID_ACLSSL_ERROR_H
 
-#include "acl/Strategised.h"
 #include "acl/Strategy.h"
+#include "security/forward.h"
 
 class ACLSslErrorStrategy : public ACLStrategy<const Security::CertErrors *>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-    static ACLSslErrorStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLSslErrorStrategy(ACLSslErrorStrategy const &);
-
-private:
-    static ACLSslErrorStrategy Instance_;
-    ACLSslErrorStrategy() {}
-
-    ACLSslErrorStrategy&operator=(ACLSslErrorStrategy const &);
-};
-
-class ACLSslError
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<const Security::CertErrors *> RegistryEntry_;
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *) override;
 };
 
 #endif /* SQUID_ACLSSL_ERROR_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Strategised.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Strategised.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Strategised.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Strategised.h	2017-07-02 16:41:18.000000000 +0800
@@ -11,39 +11,49 @@
 
 #include "acl/Acl.h"
 #include "acl/Data.h"
 #include "acl/FilledChecklist.h"
 #include "acl/Strategy.h"
 
+// XXX: Replace with a much simpler abstract ACL child class without the
+// ACLStrategy parameter (and associated call forwarding). Duplicating key
+// portions of the ACL class API in ACLStrategy is not needed because
+// ACLStrategy is unused outside the ACLStrategised context. Existing classes
+// like ACLExtUser, ACLProxyAuth, and ACLIdent seem to confirm this assertion.
+// It also requires forwarding ACL info to ACLStrategy as method parameters.
+
+/// Splits the ACL API into two individually configurable components:
+/// * ACLStrategy that usually extracts information from the current transaction
+/// * ACLData that usually matches information against admin-configured values
 template <class M>
 class ACLStrategised : public ACL
 {
     MEMPROXY_CLASS(ACLStrategised);
 
 public:
     typedef M MatchType;
 
     ~ACLStrategised();
-    ACLStrategised(ACLData<MatchType> *, ACLStrategy<MatchType> *, char const *, const ACLFlag flags[] = ACLFlags::NoFlags);
-    ACLStrategised (ACLStrategised const &);
-    ACLStrategised &operator= (ACLStrategised const &);
+    ACLStrategised(ACLData<MatchType> *, ACLStrategy<MatchType> *, char const *);
+    ACLStrategised(ACLStrategised const &&) = delete;
 
     virtual char const *typeString() const;
+    virtual void parseFlags();
+
     virtual bool requiresRequest() const {return matcher->requiresRequest();}
 
     virtual bool requiresReply() const {return matcher->requiresReply();}
 
     virtual void prepareForUse() { data->prepareForUse();}
-
+    virtual const Acl::Options &options() { return matcher->options(); }
     virtual void parse();
     virtual int match(ACLChecklist *checklist);
     virtual int match (M const &);
     virtual SBufList dump() const;
     virtual bool empty () const;
     virtual bool valid () const;
-    virtual ACL *clone()const;
 
 private:
     ACLData<MatchType> *data;
     char const *type_;
     ACLStrategy<MatchType> *matcher;
 };
@@ -54,33 +64,27 @@
 ACLStrategised<MatchType>::~ACLStrategised()
 {
     delete data;
 }
 
 template <class MatchType>
-ACLStrategised<MatchType>::ACLStrategised(ACLData<MatchType> *newData, ACLStrategy<MatchType> *theStrategy, char const *theType, const ACLFlag flgs[]) : ACL(flgs), data (newData), type_(theType), matcher(theStrategy) {}
-
-template <class MatchType>
-ACLStrategised<MatchType>::ACLStrategised (ACLStrategised const &old) : data (old.data->clone()), type_(old.type_), matcher (old.matcher)
+ACLStrategised<MatchType>::ACLStrategised(ACLData<MatchType> *newData, ACLStrategy<MatchType> *theStrategy, char const *theType): data(newData), type_(theType), matcher(theStrategy)
 {}
 
 template <class MatchType>
-ACLStrategised<MatchType> &
-ACLStrategised<MatchType>::operator= (ACLStrategised const &rhs)
+char const *
+ACLStrategised<MatchType>::typeString() const
 {
-    data = rhs.data->clone();
-    type_ = rhs.type_;
-    matcher = rhs.matcher;
-    return *this;
+    return type_;
 }
 
 template <class MatchType>
-char const *
-ACLStrategised<MatchType>::typeString() const
+void
+ACLStrategised<MatchType>::parseFlags()
 {
-    return type_;
+    ParseFlags(options(), data->supportedFlags());
 }
 
 template <class MatchType>
 void
 ACLStrategised<MatchType>::parse()
 {
@@ -97,13 +101,13 @@
 template <class MatchType>
 int
 ACLStrategised<MatchType>::match(ACLChecklist *cl)
 {
     ACLFilledChecklist *checklist = dynamic_cast<ACLFilledChecklist*>(cl);
     assert(checklist);
-    return matcher->match(data, checklist, flags);
+    return matcher->match(data, checklist);
 }
 
 template <class MatchType>
 int
 ACLStrategised<MatchType>::match(MatchType const &toFind)
 {
@@ -121,15 +125,8 @@
 bool
 ACLStrategised<MatchType>::valid () const
 {
     return matcher->valid();
 }
 
-template <class MatchType>
-ACL *
-ACLStrategised<MatchType>::clone() const
-{
-    return new ACLStrategised(*this);
-}
-
 #endif /* SQUID_ACLSTRATEGISED_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Strategy.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Strategy.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Strategy.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Strategy.h	2017-07-02 16:41:18.000000000 +0800
@@ -8,23 +8,28 @@
 
 #ifndef SQUID_ACLSTRATEGY_H
 #define SQUID_ACLSTRATEGY_H
 
 #include "acl/Acl.h"
 #include "acl/Data.h"
+#include "acl/Options.h"
 
 class ACLFilledChecklist;
 
 template<class M>
 
+/// A matching algorithm.
 class ACLStrategy
 {
 
 public:
     typedef M MatchType;
-    virtual int match (ACLData<M> * &, ACLFilledChecklist *, ACLFlags &) = 0;
+
+    /* Replicate ACL API parts relevant to the matching algorithm. */
+    virtual const Acl::Options &options() { return Acl::NoOptions(); }
+    virtual int match (ACLData<M> * &, ACLFilledChecklist *) = 0;
     virtual bool requiresRequest() const {return false;}
 
     virtual bool requiresReply() const {return false;}
 
     virtual bool valid() const {return true;}
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Tag.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Tag.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Tag.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Tag.cc	2017-07-02 16:41:18.000000000 +0800
@@ -4,27 +4,19 @@
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
-#include "acl/Checklist.h"
+#include "acl/FilledChecklist.h"
 #include "acl/StringData.h"
 #include "acl/Tag.h"
 #include "HttpRequest.h"
 
 int
-ACLTagStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLTagStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     if (checklist->request != NULL)
         return data->match (checklist->request->tag.termedBuf());
     return 0;
 }
 
-ACLTagStrategy *
-ACLTagStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLTagStrategy ACLTagStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Tag.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Tag.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Tag.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Tag.h	2017-07-02 16:41:18.000000000 +0800
@@ -6,37 +6,17 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLTAG_H
 #define SQUID_ACLTAG_H
 
-#include "acl/Strategised.h"
 #include "acl/Strategy.h"
 
 class ACLTagStrategy : public ACLStrategy<const char *>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-    static ACLTagStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLTagStrategy(ACLTagStrategy const &);
-
-private:
-    static ACLTagStrategy Instance_;
-    ACLTagStrategy() {}
-
-    ACLTagStrategy&operator=(ACLTagStrategy const &);
-};
-
-class ACLTag
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<const char *> RegistryEntry_;
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *) override;
 };
 
 #endif /* SQUID_ACLMYPORTNAME_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Time.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Time.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Time.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Time.cc	2017-07-02 16:41:18.000000000 +0800
@@ -11,19 +11,11 @@
 #include "squid.h"
 #include "acl/Time.h"
 #include "acl/TimeData.h"
 #include "SquidTime.h"
 
 int
-ACLTimeStrategy::match(ACLData<MatchType> * &data, ACLFilledChecklist *, ACLFlags &)
+ACLTimeStrategy::match(ACLData<MatchType> * &data, ACLFilledChecklist *)
 {
     return data->match(squid_curtime);
 }
 
-ACLTimeStrategy *
-ACLTimeStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLTimeStrategy ACLTimeStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Time.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Time.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Time.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Time.h	2017-07-02 16:41:18.000000000 +0800
@@ -5,40 +5,18 @@
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLTIME_H
 #define SQUID_ACLTIME_H
-#include "acl/Acl.h"
 #include "acl/Data.h"
 #include "acl/Strategised.h"
 
-class ACLChecklist; // XXX: we do not need it
-
 class ACLTimeStrategy : public ACLStrategy<time_t>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-    static ACLTimeStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLTimeStrategy(ACLTimeStrategy const &);
-
-private:
-    static ACLTimeStrategy Instance_;
-    ACLTimeStrategy() {}
-
-    ACLTimeStrategy&operator=(ACLTimeStrategy const &);
-};
-
-class ACLTime
-{
-
-public:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<time_t> RegistryEntry_;
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *) override;
 };
 
 #endif /* SQUID_ACLTIME_H */
 
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl: TransactionInitiator.cc
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl: TransactionInitiator.h
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Tree.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Tree.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Tree.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Tree.h	2017-07-02 16:41:18.000000000 +0800
@@ -49,13 +49,13 @@
     Actions actions;
 };
 
 inline const char *
 AllowOrDeny(const allow_t &action)
 {
-    return action == ACCESS_ALLOWED ? "allow" : "deny";
+    return action.allowed() ? "allow" : "deny";
 }
 
 template <class ActionToStringConverter>
 inline SBufList
 Tree::treeDump(const char *prefix, ActionToStringConverter converter) const
 {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Url.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Url.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Url.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Url.cc	2017-07-02 16:41:18.000000000 +0800
@@ -6,31 +6,23 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 /* DEBUG: section 28    Access Control */
 
 #include "squid.h"
-#include "acl/Checklist.h"
+#include "acl/FilledChecklist.h"
 #include "acl/RegexData.h"
 #include "acl/Url.h"
 #include "HttpRequest.h"
 #include "rfc1738.h"
 #include "src/URL.h"
 
 int
-ACLUrlStrategy::match (ACLData<char const *> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLUrlStrategy::match (ACLData<char const *> * &data, ACLFilledChecklist *checklist)
 {
     char *esc_buf = SBufToCstring(checklist->request->effectiveRequestUri());
     rfc1738_unescape(esc_buf);
     int result = data->match(esc_buf);
     xfree(esc_buf);
     return result;
 }
 
-ACLUrlStrategy *
-ACLUrlStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLUrlStrategy ACLUrlStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Url.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Url.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/Url.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/Url.h	2017-07-02 16:41:18.000000000 +0800
@@ -5,41 +5,20 @@
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLURL_H
 #define SQUID_ACLURL_H
-#include "acl/Acl.h"
+
 #include "acl/Data.h"
 #include "acl/Strategised.h"
 
 class ACLUrlStrategy : public ACLStrategy<char const *>
 {
 
 public:
-    virtual int match (ACLData<char const *> * &, ACLFilledChecklist *, ACLFlags &);
+    virtual int match (ACLData<char const *> * &, ACLFilledChecklist *);
     virtual bool requiresRequest() const {return true;}
-
-    static ACLUrlStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLUrlStrategy(ACLUrlStrategy const &);
-
-private:
-    static ACLUrlStrategy Instance_;
-    ACLUrlStrategy() {}
-
-    ACLUrlStrategy&operator=(ACLUrlStrategy const &);
-};
-
-class ACLUrl
-{
-
-public:
-    static ACL::Prototype RegistryProtoype;
-    static ACL::Prototype LegacyRegistryProtoype;
-    static ACLStrategised<char const *> RegistryEntry_;
 };
 
 #endif /* SQUID_ACLURL_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/UrlLogin.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/UrlLogin.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/UrlLogin.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/UrlLogin.cc	2017-07-02 16:41:18.000000000 +0800
@@ -6,20 +6,20 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 /* DEBUG: section 28    Access Control */
 
 #include "squid.h"
-#include "acl/Checklist.h"
+#include "acl/FilledChecklist.h"
 #include "acl/RegexData.h"
 #include "acl/UrlLogin.h"
 #include "HttpRequest.h"
 #include "rfc1738.h"
 
 int
-ACLUrlLoginStrategy::match(ACLData<char const *> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLUrlLoginStrategy::match(ACLData<char const *> * &data, ACLFilledChecklist *checklist)
 {
     if (checklist->request->url.userInfo().isEmpty()) {
         debugs(28, 5, "URL has no user-info details. cannot match");
         return 0; // nothing can match
     }
 
@@ -28,14 +28,6 @@
     const SBuf::size_type len = checklist->request->url.userInfo().copy(str, sizeof(str)-1);
     str[len] = '\0';
     rfc1738_unescape(str);
     return data->match(str);
 }
 
-ACLUrlLoginStrategy *
-ACLUrlLoginStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLUrlLoginStrategy ACLUrlLoginStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/UrlLogin.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/UrlLogin.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/UrlLogin.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/UrlLogin.h	2017-07-02 16:41:18.000000000 +0800
@@ -8,40 +8,18 @@
 
 #ifndef SQUID_ACLURLLOGIN_H
 #define SQUID_ACLURLLOGIN_H
 
 #include "acl/Acl.h"
 #include "acl/Data.h"
-#include "acl/Strategised.h"
 #include "acl/Strategy.h"
 
 class ACLUrlLoginStrategy : public ACLStrategy<char const *>
 {
 
 public:
-    virtual int match (ACLData<char const *> * &, ACLFilledChecklist *, ACLFlags &);
+    virtual int match (ACLData<char const *> * &, ACLFilledChecklist *);
     virtual bool requiresRequest() const {return true;}
-
-    static ACLUrlLoginStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLUrlLoginStrategy(ACLUrlLoginStrategy const &);
-
-private:
-    static ACLUrlLoginStrategy Instance_;
-    ACLUrlLoginStrategy() {}
-
-    ACLUrlLoginStrategy&operator=(ACLUrlLoginStrategy const &);
-};
-
-class ACLUrlLogin
-{
-
-public:
-    static ACL::Prototype RegistryProtoype;
-    static ACL::Prototype LegacyRegistryProtoype;
-    static ACLStrategised<char const *> RegistryEntry_;
 };
 
 #endif /* SQUID_ACLURLLOGIN_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/UrlPath.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/UrlPath.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/UrlPath.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/UrlPath.cc	2017-07-02 16:41:18.000000000 +0800
@@ -6,33 +6,25 @@
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 /* DEBUG: section 28    Access Control */
 
 #include "squid.h"
-#include "acl/Checklist.h"
+#include "acl/FilledChecklist.h"
 #include "acl/RegexData.h"
 #include "acl/UrlPath.h"
 #include "HttpRequest.h"
 #include "rfc1738.h"
 
 int
-ACLUrlPathStrategy::match (ACLData<char const *> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLUrlPathStrategy::match (ACLData<char const *> * &data, ACLFilledChecklist *checklist)
 {
     if (checklist->request->url.path().isEmpty())
         return -1;
 
     char *esc_buf = SBufToCstring(checklist->request->url.path());
     rfc1738_unescape(esc_buf);
     int result = data->match(esc_buf);
     xfree(esc_buf);
     return result;
 }
 
-ACLUrlPathStrategy *
-ACLUrlPathStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLUrlPathStrategy ACLUrlPathStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/UrlPath.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/UrlPath.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/UrlPath.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/UrlPath.h	2017-07-02 16:41:18.000000000 +0800
@@ -5,42 +5,19 @@
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLURLPATH_H
 #define SQUID_ACLURLPATH_H
-#include "acl/Acl.h"
-#include "acl/Data.h"
-#include "acl/Strategised.h"
+
 #include "acl/Strategy.h"
 
 class ACLUrlPathStrategy : public ACLStrategy<char const *>
 {
 
 public:
-    virtual int match (ACLData<char const *> * &, ACLFilledChecklist *, ACLFlags &);
+    virtual int match (ACLData<char const *> * &, ACLFilledChecklist *);
     virtual bool requiresRequest() const {return true;}
-
-    static ACLUrlPathStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLUrlPathStrategy(ACLUrlPathStrategy const &);
-
-private:
-    static ACLUrlPathStrategy Instance_;
-    ACLUrlPathStrategy() {}
-
-    ACLUrlPathStrategy&operator=(ACLUrlPathStrategy const &);
-};
-
-class ACLUrlPath
-{
-
-public:
-    static ACL::Prototype RegistryProtoype;
-    static ACL::Prototype LegacyRegistryProtoype;
-    static ACLStrategised<char const *> RegistryEntry_;
 };
 
 #endif /* SQUID_ACLURLPATH_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/UrlPort.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/UrlPort.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/UrlPort.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/UrlPort.cc	2017-07-02 16:41:18.000000000 +0800
@@ -4,25 +4,16 @@
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
-#include "acl/Checklist.h"
-#include "acl/IntRange.h"
+#include "acl/FilledChecklist.h"
 #include "acl/UrlPort.h"
 #include "HttpRequest.h"
 
 int
-ACLUrlPortStrategy::match(ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLUrlPortStrategy::match(ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     return data->match(checklist->request->url.port());
 }
 
-ACLUrlPortStrategy *
-ACLUrlPortStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLUrlPortStrategy ACLUrlPortStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/UrlPort.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/UrlPort.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/acl/UrlPort.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/acl/UrlPort.h	2017-07-02 16:41:18.000000000 +0800
@@ -5,39 +5,19 @@
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #ifndef SQUID_ACLURLPORT_H
 #define SQUID_ACLURLPORT_H
-#include "acl/Strategised.h"
+
 #include "acl/Strategy.h"
 
 class ACLUrlPortStrategy : public ACLStrategy<int>
 {
 
 public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
+    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *);
     virtual bool requiresRequest() const {return true;}
-
-    static ACLUrlPortStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g+++ warnings about
-     * private constructors with no friends */
-    ACLUrlPortStrategy(ACLUrlPortStrategy const &);
-
-private:
-    static ACLUrlPortStrategy Instance_;
-    ACLUrlPortStrategy() {}
-
-    ACLUrlPortStrategy&operator=(ACLUrlPortStrategy const &);
-};
-
-class ACLUrlPort
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<int> RegistryEntry_;
 };
 
 #endif /* SQUID_ACLURLPORT_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/AclRegs.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/AclRegs.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/AclRegs.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/AclRegs.cc	2017-07-02 16:41:18.000000000 +0800
@@ -5,17 +5,12 @@
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
 
-/** This file exists to provide satic registration code to executables
-    that need ACLs. We cannot place this code in acl/lib*.la because it
-    does not get linked in, because nobody is using these classes by name.
-*/
-
 #if USE_ADAPTATION
 #include "acl/AdaptationService.h"
 #include "acl/AdaptationServiceData.h"
 #endif
 #include "acl/AllOf.h"
 #include "acl/AnyOf.h"
@@ -25,24 +20,24 @@
 #endif
 #if USE_OPENSSL
 #include "acl/AtStep.h"
 #include "acl/AtStepData.h"
 #endif
 #include "acl/Asn.h"
-#include "acl/Browser.h"
 #include "acl/Checklist.h"
 #include "acl/ConnectionsEncrypted.h"
 #include "acl/Data.h"
 #include "acl/DestinationAsn.h"
 #include "acl/DestinationDomain.h"
 #include "acl/DestinationIp.h"
 #include "acl/DomainData.h"
 #if USE_AUTH
 #include "acl/ExtUser.h"
 #endif
 #include "acl/FilledChecklist.h"
+#include "acl/forward.h"
 #include "acl/Gadgets.h"
 #include "acl/HasComponent.h"
 #include "acl/HasComponentData.h"
 #include "acl/HierCode.h"
 #include "acl/HierCodeData.h"
 #include "acl/HttpHeaderData.h"
@@ -60,13 +55,12 @@
 #include "acl/Note.h"
 #include "acl/NoteData.h"
 #include "acl/PeerName.h"
 #include "acl/Protocol.h"
 #include "acl/ProtocolData.h"
 #include "acl/Random.h"
-#include "acl/Referer.h"
 #include "acl/RegexData.h"
 #include "acl/ReplyHeaderStrategy.h"
 #include "acl/ReplyMimeType.h"
 #include "acl/RequestHeaderStrategy.h"
 #include "acl/RequestMimeType.h"
 #include "acl/SourceAsn.h"
@@ -87,156 +81,112 @@
 #if USE_OPENSSL
 #include "acl/ServerCertificate.h"
 #endif
 #include "acl/Tag.h"
 #include "acl/Time.h"
 #include "acl/TimeData.h"
+#include "acl/TransactionInitiator.h"
 #include "acl/Url.h"
 #include "acl/UrlLogin.h"
 #include "acl/UrlPath.h"
 #include "acl/UrlPort.h"
 #include "acl/UserData.h"
 #if USE_AUTH
 #include "auth/AclMaxUserIp.h"
 #include "auth/AclProxyAuth.h"
 #endif
 #include "base/RegexPattern.h"
+#include "ExternalACL.h"
 #if USE_IDENT
 #include "ident/AclIdent.h"
 #endif
+#if SQUID_SNMP
+#include "snmp_core.h"
+#endif
 
-ACL::Prototype ACLBrowser::RegistryProtoype(&ACLBrowser::RegistryEntry_, "browser");
-ACLStrategised<char const *> ACLBrowser::RegistryEntry_(new ACLRegexData, ACLRequestHeaderStrategy<Http::HdrType::USER_AGENT>::Instance(), "browser");
-ACLFlag  DestinationDomainFlags[] = {ACL_F_NO_LOOKUP, ACL_F_END};
-ACL::Prototype ACLDestinationDomain::LiteralRegistryProtoype(&ACLDestinationDomain::LiteralRegistryEntry_, "dstdomain");
-ACLStrategised<char const *> ACLDestinationDomain::LiteralRegistryEntry_(new ACLDomainData, ACLDestinationDomainStrategy::Instance(), "dstdomain", DestinationDomainFlags);
-ACL::Prototype ACLDestinationDomain::RegexRegistryProtoype(&ACLDestinationDomain::RegexRegistryEntry_, "dstdom_regex");
-ACLFlag  DestinationDomainRegexFlags[] = {ACL_F_NO_LOOKUP, ACL_F_REGEX_CASE, ACL_F_END};
-ACLStrategised<char const *> ACLDestinationDomain::RegexRegistryEntry_(new ACLRegexData,ACLDestinationDomainStrategy::Instance() ,"dstdom_regex", DestinationDomainRegexFlags);
-ACL::Prototype ACLDestinationIP::RegistryProtoype(&ACLDestinationIP::RegistryEntry_, "dst");
-ACLDestinationIP ACLDestinationIP::RegistryEntry_;
-#if USE_AUTH
-ACL::Prototype ACLExtUser::UserRegistryProtoype(&ACLExtUser::UserRegistryEntry_, "ext_user");
-ACLExtUser ACLExtUser::UserRegistryEntry_(new ACLUserData, "ext_user");
-ACL::Prototype ACLExtUser::RegexRegistryProtoype(&ACLExtUser::RegexRegistryEntry_, "ext_user_regex" );
-ACLExtUser ACLExtUser::RegexRegistryEntry_(new ACLRegexData, "ext_user_regex");
-#endif
-ACL::Prototype ACLHierCode::RegistryProtoype(&ACLHierCode::RegistryEntry_, "hier_code");
-ACLStrategised<hier_code> ACLHierCode::RegistryEntry_(new ACLHierCodeData, ACLHierCodeStrategy::Instance(), "hier_code");
-ACL::Prototype ACLHTTPRepHeader::RegistryProtoype(&ACLHTTPRepHeader::RegistryEntry_, "rep_header");
-ACLStrategised<HttpHeader*> ACLHTTPRepHeader::RegistryEntry_(new ACLHTTPHeaderData, ACLHTTPRepHeaderStrategy::Instance(), "rep_header");
-ACL::Prototype ACLHTTPReqHeader::RegistryProtoype(&ACLHTTPReqHeader::RegistryEntry_, "req_header");
-ACLStrategised<HttpHeader*> ACLHTTPReqHeader::RegistryEntry_(new ACLHTTPHeaderData, ACLHTTPReqHeaderStrategy::Instance(), "req_header");
-ACL::Prototype ACLHTTPStatus::RegistryProtoype(&ACLHTTPStatus::RegistryEntry_, "http_status");
-ACLHTTPStatus ACLHTTPStatus::RegistryEntry_("http_status");
-ACL::Prototype ACLMaxConnection::RegistryProtoype(&ACLMaxConnection::RegistryEntry_, "maxconn");
-ACLMaxConnection ACLMaxConnection::RegistryEntry_("maxconn");
-ACL::Prototype ACLMethod::RegistryProtoype(&ACLMethod::RegistryEntry_, "method");
-ACLStrategised<HttpRequestMethod> ACLMethod::RegistryEntry_(new ACLMethodData, ACLMethodStrategy::Instance(), "method");
-ACL::Prototype ACLLocalIP::RegistryProtoype(&ACLLocalIP::RegistryEntry_, "localip");
-ACLLocalIP ACLLocalIP::RegistryEntry_;
-ACL::Prototype ACLLocalPort::RegistryProtoype(&ACLLocalPort::RegistryEntry_, "localport");
-ACLStrategised<int> ACLLocalPort::RegistryEntry_(new ACLIntRange, ACLLocalPortStrategy::Instance(), "localport");
-ACL::Prototype ACLMyPortName::RegistryProtoype(&ACLMyPortName::RegistryEntry_, "myportname");
-ACLStrategised<const char *> ACLMyPortName::RegistryEntry_(new ACLStringData, ACLMyPortNameStrategy::Instance(), "myportname");
-ACL::Prototype ACLPeerName::RegistryProtoype(&ACLPeerName::RegistryEntry_, "peername");
-ACLStrategised<const char *> ACLPeerName::RegistryEntry_(new ACLStringData, ACLPeerNameStrategy::Instance(), "peername");
-ACL::Prototype ACLPeerName::RegexRegistryProtoype(&ACLPeerName::RegexRegistryEntry_, "peername_regex");
-ACLStrategised<char const *> ACLPeerName::RegexRegistryEntry_(new ACLRegexData, ACLPeerNameStrategy::Instance(), "peername_regex");
-ACL::Prototype ACLProtocol::RegistryProtoype(&ACLProtocol::RegistryEntry_, "proto");
-ACLStrategised<AnyP::ProtocolType> ACLProtocol::RegistryEntry_(new ACLProtocolData, ACLProtocolStrategy::Instance(), "proto");
-ACL::Prototype ACLRandom::RegistryProtoype(&ACLRandom::RegistryEntry_, "random");
-ACLRandom ACLRandom::RegistryEntry_("random");
-ACL::Prototype ACLReferer::RegistryProtoype(&ACLReferer::RegistryEntry_, "referer_regex");
-ACLStrategised<char const *> ACLReferer::RegistryEntry_(new ACLRegexData, ACLRequestHeaderStrategy<Http::HdrType::REFERER>::Instance(), "referer_regex");
-ACL::Prototype ACLReplyMIMEType::RegistryProtoype(&ACLReplyMIMEType::RegistryEntry_, "rep_mime_type");
-ACLStrategised<char const *> ACLReplyMIMEType::RegistryEntry_(new ACLRegexData, ACLReplyHeaderStrategy<Http::HdrType::CONTENT_TYPE>::Instance(), "rep_mime_type");
-ACL::Prototype ACLRequestMIMEType::RegistryProtoype(&ACLRequestMIMEType::RegistryEntry_, "req_mime_type");
-ACLStrategised<char const *> ACLRequestMIMEType::RegistryEntry_(new ACLRegexData, ACLRequestHeaderStrategy<Http::HdrType::CONTENT_TYPE>::Instance(), "req_mime_type");
-ACL::Prototype ACLSourceDomain::LiteralRegistryProtoype(&ACLSourceDomain::LiteralRegistryEntry_, "srcdomain");
-ACLStrategised<char const *> ACLSourceDomain::LiteralRegistryEntry_(new ACLDomainData, ACLSourceDomainStrategy::Instance(), "srcdomain");
-ACL::Prototype ACLSourceDomain::RegexRegistryProtoype(&ACLSourceDomain::RegexRegistryEntry_, "srcdom_regex");
-ACLStrategised<char const *> ACLSourceDomain::RegexRegistryEntry_(new ACLRegexData,ACLSourceDomainStrategy::Instance() ,"srcdom_regex");
-ACL::Prototype ACLSourceIP::RegistryProtoype(&ACLSourceIP::RegistryEntry_, "src");
-ACLSourceIP ACLSourceIP::RegistryEntry_;
-ACL::Prototype ACLTime::RegistryProtoype(&ACLTime::RegistryEntry_, "time");
-ACLStrategised<time_t> ACLTime::RegistryEntry_(new ACLTimeData, ACLTimeStrategy::Instance(), "time");
-ACL::Prototype ACLUrl::RegistryProtoype(&ACLUrl::RegistryEntry_, "url_regex");
-ACLStrategised<char const *> ACLUrl::RegistryEntry_(new ACLRegexData, ACLUrlStrategy::Instance(), "url_regex");
-ACL::Prototype ACLUrlLogin::RegistryProtoype(&ACLUrlLogin::RegistryEntry_, "urllogin");
-ACLStrategised<char const *> ACLUrlLogin::RegistryEntry_(new ACLRegexData, ACLUrlLoginStrategy::Instance(), "urllogin");
-ACL::Prototype ACLUrlPath::LegacyRegistryProtoype(&ACLUrlPath::RegistryEntry_, "pattern");
-ACL::Prototype ACLUrlPath::RegistryProtoype(&ACLUrlPath::RegistryEntry_, "urlpath_regex");
-ACLStrategised<char const *> ACLUrlPath::RegistryEntry_(new ACLRegexData, ACLUrlPathStrategy::Instance(), "urlpath_regex");
-ACL::Prototype ACLUrlPort::RegistryProtoype(&ACLUrlPort::RegistryEntry_, "port");
-ACLStrategised<int> ACLUrlPort::RegistryEntry_(new ACLIntRange, ACLUrlPortStrategy::Instance(), "port");
+// Not in src/acl/ because some of the ACLs it registers are not in src/acl/.
+void
+Acl::Init()
+{
+    /* the registration order does not matter */
+
+    // The explicit return type (ACL*) for lambdas is needed because the type
+    // of the return expression inside lambda is not ACL* but AclFoo* while
+    // Acl::Maker is defined to return ACL*.
+
+    RegisterMaker("all-of", [](TypeName)->ACL* { return new Acl::AllOf; }); // XXX: Add name parameter to ctor
+    RegisterMaker("any-of", [](TypeName)->ACL* { return new Acl::AnyOf; }); // XXX: Add name parameter to ctor
+    RegisterMaker("random", [](TypeName name)->ACL* { return new ACLRandom(name); });
+    RegisterMaker("time", [](TypeName name)->ACL* { return new ACLStrategised<time_t>(new ACLTimeData, new ACLTimeStrategy, name); });
+    RegisterMaker("src_as", [](TypeName name)->ACL* { return new ACLStrategised<Ip::Address>(new ACLASN, new ACLSourceASNStrategy, name); });
+    RegisterMaker("dst_as", [](TypeName name)->ACL* { return new ACLStrategised<Ip::Address>(new ACLASN, new ACLDestinationASNStrategy, name); });
+    RegisterMaker("browser", [](TypeName name)->ACL* { return new ACLStrategised<char const *>(new ACLRegexData, new ACLRequestHeaderStrategy<Http::HdrType::USER_AGENT>, name); });
+    RegisterMaker("dstdomain", [](TypeName name)->ACL* { return new ACLStrategised<char const *>(new ACLDomainData, new ACLDestinationDomainStrategy, name); });
+    RegisterMaker("dstdom_regex", [](TypeName name)->ACL* { return new ACLStrategised<char const *>(new ACLRegexData, new ACLDestinationDomainStrategy , name); });
+    RegisterMaker("dst", [](TypeName)->ACL* { return new ACLDestinationIP; }); // XXX: Add name parameter to ctor
+    RegisterMaker("hier_code", [](TypeName name)->ACL* { return new ACLStrategised<hier_code>(new ACLHierCodeData, new ACLHierCodeStrategy, name); });
+    RegisterMaker("rep_header", [](TypeName name)->ACL* { return new ACLStrategised<HttpHeader*>(new ACLHTTPHeaderData, new ACLHTTPRepHeaderStrategy, name); });
+    RegisterMaker("req_header", [](TypeName name)->ACL* { return new ACLStrategised<HttpHeader*>(new ACLHTTPHeaderData, new ACLHTTPReqHeaderStrategy, name); });
+    RegisterMaker("http_status", [](TypeName name)->ACL* { return new ACLHTTPStatus(name); });
+    RegisterMaker("maxconn", [](TypeName name)->ACL* { return new ACLMaxConnection(name); });
+    RegisterMaker("method", [](TypeName name)->ACL* { return new ACLStrategised<HttpRequestMethod>(new ACLMethodData, new ACLMethodStrategy, name); });
+    RegisterMaker("localip", [](TypeName)->ACL* { return new ACLLocalIP; }); // XXX: Add name parameter to ctor
+    RegisterMaker("localport", [](TypeName name)->ACL* { return new ACLStrategised<int>(new ACLIntRange, new ACLLocalPortStrategy, name); });
+    RegisterMaker("myportname", [](TypeName name)->ACL* { return new ACLStrategised<const char *>(new ACLStringData, new ACLMyPortNameStrategy, name); });
+    RegisterMaker("peername", [](TypeName name)->ACL* { return new ACLStrategised<const char *>(new ACLStringData, new ACLPeerNameStrategy, name); });
+    RegisterMaker("peername_regex", [](TypeName name)->ACL* { return new ACLStrategised<char const *>(new ACLRegexData, new ACLPeerNameStrategy, name); });
+    RegisterMaker("proto", [](TypeName name)->ACL* { return new ACLStrategised<AnyP::ProtocolType>(new ACLProtocolData, new ACLProtocolStrategy, name); });
+    RegisterMaker("referer_regex", [](TypeName name)->ACL* { return new ACLStrategised<char const *>(new ACLRegexData, new ACLRequestHeaderStrategy<Http::HdrType::REFERER>, name); });
+    RegisterMaker("rep_mime_type", [](TypeName name)->ACL* { return new ACLStrategised<char const *>(new ACLRegexData, new ACLReplyHeaderStrategy<Http::HdrType::CONTENT_TYPE>, name); });
+    RegisterMaker("req_mime_type", [](TypeName name)->ACL* { return new ACLStrategised<char const *>(new ACLRegexData, new ACLRequestHeaderStrategy<Http::HdrType::CONTENT_TYPE>, name); });
+    RegisterMaker("srcdomain", [](TypeName name)->ACL* { return new ACLStrategised<char const *>(new ACLDomainData, new ACLSourceDomainStrategy, name); });
+    RegisterMaker("srcdom_regex", [](TypeName name)->ACL* { return new ACLStrategised<char const *>(new ACLRegexData, new ACLSourceDomainStrategy, name); });
+    RegisterMaker("src", [](TypeName)->ACL* { return new ACLSourceIP; }); // XXX: Add name parameter to ctor
+    RegisterMaker("url_regex", [](TypeName name)->ACL* { return new ACLStrategised<char const *>(new ACLRegexData, new ACLUrlStrategy, name); });
+    RegisterMaker("urllogin", [](TypeName name)->ACL* { return new ACLStrategised<char const *>(new ACLRegexData, new ACLUrlLoginStrategy, name); });
+    RegisterMaker("urlpath_regex", [](TypeName name)->ACL* { return new ACLStrategised<char const *>(new ACLRegexData, new ACLUrlPathStrategy, name); });
+    RegisterMaker("port", [](TypeName name)->ACL* { return new ACLStrategised<int>(new ACLIntRange, new ACLUrlPortStrategy, name); });
+    RegisterMaker("external", [](TypeName name)->ACL* { return new ACLExternal(name); });
+    RegisterMaker("squid_error", [](TypeName name)->ACL* { return new ACLStrategised<err_type>(new ACLSquidErrorData, new ACLSquidErrorStrategy, name); });
+    RegisterMaker("connections_encrypted", [](TypeName name)->ACL* { return new Acl::ConnectionsEncrypted(name); });
+    RegisterMaker("tag", [](TypeName name)->ACL* { return new ACLStrategised<const char *>(new ACLStringData, new ACLTagStrategy, name); });
+    RegisterMaker("note", [](TypeName name)->ACL* { return new ACLStrategised<NotePairs::Entry*>(new ACLNoteData, new ACLNoteStrategy, name); });
+    RegisterMaker("has", [](TypeName name)->ACL* {return new ACLStrategised<ACLChecklist *>(new ACLHasComponentData, new ACLHasComponentStrategy, name); });
+    RegisterMaker("transaction_initiator", [](TypeName name)->ACL* {return new Acl::TransactionInitiator(name);});
 
 #if USE_OPENSSL
-ACL::Prototype ACLSslError::RegistryProtoype(&ACLSslError::RegistryEntry_, "ssl_error");
-ACLStrategised<const Security::CertErrors *> ACLSslError::RegistryEntry_(new ACLSslErrorData, ACLSslErrorStrategy::Instance(), "ssl_error");
-ACL::Prototype ACLCertificate::UserRegistryProtoype(&ACLCertificate::UserRegistryEntry_, "user_cert");
-ACLStrategised<X509 *> ACLCertificate::UserRegistryEntry_(new ACLCertificateData (Ssl::GetX509UserAttribute, "*"), ACLCertificateStrategy::Instance(), "user_cert");
-ACL::Prototype ACLCertificate::CARegistryProtoype(&ACLCertificate::CARegistryEntry_, "ca_cert");
-ACLStrategised<X509 *> ACLCertificate::CARegistryEntry_(new ACLCertificateData (Ssl::GetX509CAAttribute, "*"), ACLCertificateStrategy::Instance(), "ca_cert");
-ACL::Prototype ACLServerCertificate::X509FingerprintRegistryProtoype(&ACLServerCertificate::X509FingerprintRegistryEntry_, "server_cert_fingerprint");
-ACLStrategised<X509 *> ACLServerCertificate::X509FingerprintRegistryEntry_(new ACLCertificateData(Ssl::GetX509Fingerprint, "-sha1", true), ACLServerCertificateStrategy::Instance(), "server_cert_fingerprint");
-
-ACL::Prototype ACLAtStep::RegistryProtoype(&ACLAtStep::RegistryEntry_, "at_step");
-ACLStrategised<Ssl::BumpStep> ACLAtStep::RegistryEntry_(new ACLAtStepData, ACLAtStepStrategy::Instance(), "at_step");
-
-ACL::Prototype ACLServerName::LiteralRegistryProtoype(&ACLServerName::LiteralRegistryEntry_, "ssl::server_name");
-ACLStrategised<char const *> ACLServerName::LiteralRegistryEntry_(new ACLServerNameData, ACLServerNameStrategy::Instance(), "ssl::server_name");
-ACL::Prototype ACLServerName::RegexRegistryProtoype(&ACLServerName::RegexRegistryEntry_, "ssl::server_name_regex");
-ACLFlag  ServerNameRegexFlags[] = {ACL_F_REGEX_CASE, ACL_F_END};
-ACLStrategised<char const *> ACLServerName::RegexRegistryEntry_(new ACLRegexData, ACLServerNameStrategy::Instance(), "ssl::server_name_regex", ServerNameRegexFlags);
+    RegisterMaker("ssl_error", [](TypeName name)->ACL* { return new ACLStrategised<const Security::CertErrors *>(new ACLSslErrorData, new ACLSslErrorStrategy, name); });
+    RegisterMaker("user_cert", [](TypeName name)->ACL* { return new ACLStrategised<X509*>(new ACLCertificateData(Ssl::GetX509UserAttribute, "*"), new ACLCertificateStrategy, name); });
+    RegisterMaker("ca_cert", [](TypeName name)->ACL* { return new ACLStrategised<X509*>(new ACLCertificateData(Ssl::GetX509CAAttribute, "*"), new ACLCertificateStrategy, name); });
+    RegisterMaker("server_cert_fingerprint", [](TypeName name)->ACL* { return new ACLStrategised<X509*>(new ACLCertificateData(Ssl::GetX509Fingerprint, "-sha1", true), new ACLServerCertificateStrategy, name); });
+    RegisterMaker("at_step", [](TypeName name)->ACL* { return new ACLStrategised<Ssl::BumpStep>(new ACLAtStepData, new ACLAtStepStrategy, name); });
+    RegisterMaker("ssl::server_name", [](TypeName name)->ACL* { return new ACLStrategised<char const *>(new ACLServerNameData, new ACLServerNameStrategy, name); });
+    RegisterMaker("ssl::server_name_regex", [](TypeName name)->ACL* { return new ACLStrategised<char const *>(new ACLRegexData, new ACLServerNameStrategy, name); });
 #endif
 
 #if USE_SQUID_EUI
-ACL::Prototype ACLARP::RegistryProtoype(&ACLARP::RegistryEntry_, "arp");
-ACLARP ACLARP::RegistryEntry_("arp");
-ACL::Prototype ACLEui64::RegistryProtoype(&ACLEui64::RegistryEntry_, "eui64");
-ACLEui64 ACLEui64::RegistryEntry_("eui64");
+    RegisterMaker("arp", [](TypeName name)->ACL* { return new ACLARP(name); });
+    RegisterMaker("eui64", [](TypeName name)->ACL* { return new ACLEui64(name); });
 #endif
 
 #if USE_IDENT
-ACL::Prototype ACLIdent::UserRegistryProtoype(&ACLIdent::UserRegistryEntry_, "ident");
-ACLIdent ACLIdent::UserRegistryEntry_(new ACLUserData, "ident");
-ACL::Prototype ACLIdent::RegexRegistryProtoype(&ACLIdent::RegexRegistryEntry_, "ident_regex" );
-ACLIdent ACLIdent::RegexRegistryEntry_(new ACLRegexData, "ident_regex");
+    RegisterMaker("ident", [](TypeName name)->ACL* { return new ACLIdent(new ACLUserData, name); });
+    RegisterMaker("ident_regex", [](TypeName name)->ACL* { return new ACLIdent(new ACLRegexData, name); });
 #endif
 
 #if USE_AUTH
-ACL::Prototype ACLProxyAuth::UserRegistryProtoype(&ACLProxyAuth::UserRegistryEntry_, "proxy_auth");
-ACLProxyAuth ACLProxyAuth::UserRegistryEntry_(new ACLUserData, "proxy_auth");
-ACL::Prototype ACLProxyAuth::RegexRegistryProtoype(&ACLProxyAuth::RegexRegistryEntry_, "proxy_auth_regex" );
-ACLProxyAuth ACLProxyAuth::RegexRegistryEntry_(new ACLRegexData, "proxy_auth_regex");
-
-ACL::Prototype ACLMaxUserIP::RegistryProtoype(&ACLMaxUserIP::RegistryEntry_, "max_user_ip");
-ACLMaxUserIP ACLMaxUserIP::RegistryEntry_("max_user_ip");
+    RegisterMaker("ext_user", [](TypeName name)->ACL* { return new ACLExtUser(new ACLUserData, name); });
+    RegisterMaker("ext_user_regex", [](TypeName name)->ACL* { return new ACLExtUser(new ACLRegexData, name); });
+    RegisterMaker("proxy_auth", [](TypeName name)->ACL* { return new ACLProxyAuth(new ACLUserData, name); });
+    RegisterMaker("proxy_auth_regex", [](TypeName name)->ACL* { return new ACLProxyAuth(new ACLRegexData, name); });
+    RegisterMaker("max_user_ip", [](TypeName name)->ACL* { return new ACLMaxUserIP(name); });
 #endif
 
-ACL::Prototype ACLTag::RegistryProtoype(&ACLTag::RegistryEntry_, "tag");
-ACLStrategised<const char *> ACLTag::RegistryEntry_(new ACLStringData, ACLTagStrategy::Instance(), "tag");
-
-ACL::Prototype Acl::AnyOf::RegistryProtoype(&Acl::AnyOf::RegistryEntry_, "any-of");
-Acl::AnyOf Acl::AnyOf::RegistryEntry_;
-
-ACL::Prototype Acl::AllOf::RegistryProtoype(&Acl::AllOf::RegistryEntry_, "all-of");
-Acl::AllOf Acl::AllOf::RegistryEntry_;
-
-ACL::Prototype ACLNote::RegistryProtoype(&ACLNote::RegistryEntry_, "note");
-ACLStrategised<NotePairs::Entry *> ACLNote::RegistryEntry_(new ACLNoteData, ACLNoteStrategy::Instance(), "note");
-
 #if USE_ADAPTATION
-ACL::Prototype ACLAdaptationService::RegistryProtoype(&ACLAdaptationService::RegistryEntry_, "adaptation_service");
-ACLStrategised<const char *> ACLAdaptationService::RegistryEntry_(new ACLAdaptationServiceData, ACLAdaptationServiceStrategy::Instance(), "adaptation_service");
+    RegisterMaker("adaptation_service", [](TypeName name)->ACL* { return new ACLStrategised<const char *>(new ACLAdaptationServiceData, new ACLAdaptationServiceStrategy, name); });
 #endif
 
-ACL::Prototype ACLSquidError::RegistryProtoype(&ACLSquidError::RegistryEntry_, "squid_error");
-ACLStrategised<err_type> ACLSquidError::RegistryEntry_(new ACLSquidErrorData, ACLSquidErrorStrategy::Instance(), "squid_error");
-
-ACL::Prototype Acl::ConnectionsEncrypted::RegistryProtoype(&Acl::ConnectionsEncrypted::RegistryEntry_, "connections_encrypted");
-Acl::ConnectionsEncrypted Acl::ConnectionsEncrypted::RegistryEntry_("connections_encrypted");
-
-ACL::Prototype ACLHasComponent::RegistryProtoype(&ACLHasComponent::RegistryEntry_, "has");
-ACLStrategised<ACLChecklist *> ACLHasComponent::RegistryEntry_(new ACLHasComponentData, ACLHasComponentStrategy::Instance(), "has");
+#if SQUID_SNMP
+    RegisterMaker("snmp_community", [](TypeName name)->ACL* { return new ACLStrategised<const char *>(new ACLStringData, new ACLSNMPCommunityStrategy, name); });
+#endif
+}
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/AccessCheck.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/AccessCheck.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/AccessCheck.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/AccessCheck.cc	2017-07-02 16:41:18.000000000 +0800
@@ -171,13 +171,13 @@
 void
 Adaptation::AccessCheck::noteAnswer(allow_t answer)
 {
     Must(!candidates.empty()); // the candidate we were checking must be there
     debugs(93,5, HERE << topCandidate() << " answer=" << answer);
 
-    if (answer == ACCESS_ALLOWED) { // the rule matched
+    if (answer.allowed()) { // the rule matched
         ServiceGroupPointer g = topGroup();
         if (g != NULL) { // the corresponding group found
             callBack(g);
             Must(done());
             return;
         }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/ecap/Host.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/ecap/Host.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/ecap/Host.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/ecap/Host.cc	2017-07-02 16:41:18.000000000 +0800
@@ -15,12 +15,13 @@
 #include "adaptation/ecap/Host.h"
 #include "adaptation/ecap/MessageRep.h"
 #include "adaptation/ecap/ServiceRep.h"
 #include "base/TextException.h"
 #include "HttpReply.h"
 #include "HttpRequest.h"
+#include "MasterXaction.h"
 
 const libecap::Name Adaptation::Ecap::protocolInternal("internal", libecap::Name::NextId());
 const libecap::Name Adaptation::Ecap::protocolCacheObj("cache_object", libecap::Name::NextId());
 const libecap::Name Adaptation::Ecap::protocolIcp("ICP", libecap::Name::NextId());
 #if USE_HTCP
 const libecap::Name Adaptation::Ecap::protocolHtcp("Htcp", libecap::Name::NextId());
@@ -159,13 +160,14 @@
         Debug::Finish();
 }
 
 Adaptation::Ecap::Host::MessagePtr
 Adaptation::Ecap::Host::newRequest() const
 {
-    return MessagePtr(new Adaptation::Ecap::MessageRep(new HttpRequest));
+    static const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initAdaptationOrphan_);
+    return MessagePtr(new Adaptation::Ecap::MessageRep(new HttpRequest(mx)));
 }
 
 Adaptation::Ecap::Host::MessagePtr
 Adaptation::Ecap::Host::newResponse() const
 {
     return MessagePtr(new Adaptation::Ecap::MessageRep(new HttpReply));
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/ecap/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/ecap/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/ecap/Makefile.in	2017-06-01 20:55:40.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/ecap/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/ecap/MessageRep.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/ecap/MessageRep.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/ecap/MessageRep.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/ecap/MessageRep.cc	2017-07-02 16:41:18.000000000 +0800
@@ -196,17 +196,17 @@
 {
 }
 
 void
 Adaptation::Ecap::RequestLineRep::uri(const Area &aUri)
 {
-    // TODO: if method is not set, urlPath will assume it is not connect;
-    // Can we change urlParse API to remove the method parameter?
-    // TODO: optimize: urlPath should take constant URL buffer
+    // TODO: if method is not set, URL::parse will assume it is not connect;
+    // Can we change URL::parse API to remove the method parameter?
+    // TODO: optimize: URL::parse should take constant URL buffer
     char *buf = xstrdup(aUri.toString().c_str());
-    const bool ok = urlParse(theMessage.method, buf, &theMessage);
+    const bool ok = theMessage.url.parse(theMessage.method, buf);
     xfree(buf);
     Must(ok);
 }
 
 Adaptation::Ecap::RequestLineRep::Area
 Adaptation::Ecap::RequestLineRep::uri() const
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/ecap/XactionRep.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/ecap/XactionRep.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/ecap/XactionRep.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/ecap/XactionRep.cc	2017-07-02 16:41:18.000000000 +0800
@@ -20,12 +20,13 @@
 #include "adaptation/Initiator.h"
 #include "base/AsyncJobCalls.h"
 #include "base/TextException.h"
 #include "format/Format.h"
 #include "HttpReply.h"
 #include "HttpRequest.h"
+#include "MasterXaction.h"
 #include "SquidTime.h"
 
 CBDATA_NAMESPACED_CLASS_INIT(Adaptation::Ecap::XactionRep, XactionRep);
 
 /// a libecap Visitor for converting adapter transaction options to HttpHeader
 class OptionsExtractor: public libecap::NamedValueVisitor
@@ -735,8 +736,16 @@
 }
 
 void
 Adaptation::Ecap::XactionRep::updateSources(HttpMsg *adapted)
 {
     adapted->sources |= service().cfg().connectionEncryption ? HttpMsg::srcEcaps : HttpMsg::srcEcap;
+
+    // Update masterXaction object for adapted HTTP requests.
+    if (HttpRequest *adaptedReq = dynamic_cast<HttpRequest*>(adapted)) {
+        HttpRequest *request = dynamic_cast<HttpRequest*> (theCauseRep ?
+                               theCauseRep->raw().header : theVirginRep.raw().header);
+        Must(request);
+        adaptedReq->masterXaction = request->masterXaction;
+    }
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/icap/Launcher.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/icap/Launcher.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/icap/Launcher.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/icap/Launcher.cc	2017-07-02 16:41:18.000000000 +0800
@@ -144,13 +144,13 @@
 
     ACLFilledChecklist *cl =
         new ACLFilledChecklist(TheConfig.repeat, info.icapRequest, dash_str);
     cl->reply = info.icapReply;
     HTTPMSGLOCK(cl->reply);
 
-    bool result = cl->fastCheck() == ACCESS_ALLOWED;
+    bool result = cl->fastCheck().allowed();
     delete cl;
     return result;
 }
 
 /* ICAPXactAbortInfo */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/icap/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/icap/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/icap/Makefile.in	2017-06-01 20:55:45.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/icap/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/icap/ModXact.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/icap/ModXact.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/icap/ModXact.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/icap/ModXact.cc	2017-07-02 16:41:18.000000000 +0800
@@ -27,12 +27,13 @@
 #include "err_detail_type.h"
 #include "http/one/TeChunkedParser.h"
 #include "HttpHeaderTools.h"
 #include "HttpMsg.h"
 #include "HttpReply.h"
 #include "HttpRequest.h"
+#include "MasterXaction.h"
 #include "SquidTime.h"
 #include "URL.h"
 
 // flow and terminology:
 //     HTTP| --> receive --> encode --> write --> |network
 //     end | <-- send    <-- parse  <-- read  <-- |end
@@ -731,13 +732,13 @@
 
     if (gotEncapsulated("res-hdr")) {
         adapted.setHeader(new HttpReply);
         setOutcome(service().cfg().method == ICAP::methodReqmod ?
                    xoSatisfied : xoModified);
     } else if (gotEncapsulated("req-hdr")) {
-        adapted.setHeader(new HttpRequest);
+        adapted.setHeader(new HttpRequest(virginRequest().masterXaction));
         setOutcome(xoModified);
     } else
         throw TexcHere("Neither res-hdr nor req-hdr in maybeAllocateHttpMsg()");
 }
 
 void Adaptation::Icap::ModXact::parseHeaders()
@@ -958,14 +959,14 @@
     packHead(httpBuf, oldHead);
 
     // allocate the adapted message and copy metainfo
     Must(!adapted.header);
     {
         HttpMsg::Pointer newHead;
-        if (dynamic_cast<const HttpRequest*>(oldHead)) {
-            newHead = new HttpRequest;
+        if (const HttpRequest *r = dynamic_cast<const HttpRequest*>(oldHead)) {
+            newHead = new HttpRequest(r->masterXaction);
         } else if (dynamic_cast<const HttpReply*>(oldHead)) {
             newHead = new HttpReply;
         }
         Must(newHead);
 
         newHead->inheritProperties(oldHead);
@@ -1544,13 +1545,13 @@
     icapBuf.appendf("%s=%d, ", section, (int) httpBuf.contentSize());
 
     // begin cloning
     HttpMsg::Pointer headClone;
 
     if (const HttpRequest* old_request = dynamic_cast<const HttpRequest*>(head)) {
-        HttpRequest::Pointer new_request(new HttpRequest);
+        HttpRequest::Pointer new_request(new HttpRequest(old_request->masterXaction));
         // copy the requst-line details
         new_request->method = old_request->method;
         new_request->url = old_request->url;
         new_request->http_ver = old_request->http_ver;
         headClone = new_request.getRaw();
     } else if (const HttpReply *old_reply = dynamic_cast<const HttpReply*>(head)) {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/icap/Xaction.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/icap/Xaction.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/icap/Xaction.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/icap/Xaction.cc	2017-07-02 16:41:18.000000000 +0800
@@ -96,13 +96,14 @@
     alep(new AccessLogEntry),
     al(*alep),
     cs(NULL)
 {
     debugs(93,3, typeName << " constructed, this=" << this <<
            " [icapx" << id << ']'); // we should not call virtual status() here
-    icapRequest = new HttpRequest;
+    const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initAdaptation);
+    icapRequest = new HttpRequest(mx);
     HTTPMSGLOCK(icapRequest);
     icap_tr_start = current_time;
     memset(&icap_tio_start, 0, sizeof(icap_tio_start));
     memset(&icap_tio_finish, 0, sizeof(icap_tio_finish));
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/Makefile.in	2017-06-01 20:55:34.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/ServiceConfig.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/ServiceConfig.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/adaptation/ServiceConfig.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/adaptation/ServiceConfig.cc	2017-07-02 16:41:18.000000000 +0800
@@ -186,13 +186,13 @@
 }
 
 bool
 Adaptation::ServiceConfig::grokUri(const char *value)
 {
     // TODO: find core code that parses URLs and extracts various parts
-    // AYJ: most of this is duplicate of urlParse() in src/url.cc
+    // AYJ: most of this is duplicate of URL::parse() in src/url.cc
 
     if (!value || !*value) {
         debugs(3, DBG_CRITICAL, HERE << cfg_filename << ':' << config_lineno << ": " <<
                "empty adaptation service URI");
         return false;
     }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/anyp/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/anyp/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/anyp/Makefile.in	2017-06-01 20:55:53.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/anyp/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/AclMaxUserIp.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/AclMaxUserIp.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/AclMaxUserIp.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/AclMaxUserIp.cc	2017-07-02 16:41:18.000000000 +0800
@@ -15,30 +15,17 @@
 #include "auth/UserRequest.h"
 #include "ConfigParser.h"
 #include "Debug.h"
 #include "Parsing.h"
 #include "wordlist.h"
 
-ACLFlag ACLMaxUserIP::SupportedFlags[] = {ACL_F_STRICT, ACL_F_END};
-
 ACLMaxUserIP::ACLMaxUserIP(char const *theClass) :
-    ACL(SupportedFlags),
     class_(theClass),
     maximum(0)
 {}
 
-ACLMaxUserIP::ACLMaxUserIP(ACLMaxUserIP const &old) :
-    class_(old.class_),
-    maximum(old.maximum)
-{
-    flags = old.flags;
-}
-
-ACLMaxUserIP::~ACLMaxUserIP()
-{}
-
 ACL *
 ACLMaxUserIP::clone() const
 {
     return new ACLMaxUserIP(*this);
 }
 
@@ -57,12 +44,21 @@
 bool
 ACLMaxUserIP::valid() const
 {
     return maximum > 0;
 }
 
+const Acl::Options &
+ACLMaxUserIP::options()
+{
+    static const Acl::BooleanOption BeStrict;
+    static const Acl::Options MyOptions = { { "-s", &BeStrict } };
+    BeStrict.linkWith(&beStrict);
+    return MyOptions;
+}
+
 void
 ACLMaxUserIP::parse()
 {
     if (maximum) {
         debugs(28, DBG_IMPORTANT, "Attempting to alter already set User max IP acl");
         return;
@@ -99,13 +95,13 @@
     if (authenticateAuthUserRequestIPCount(auth_user_request) <= maximum)
         return 0;
 
     debugs(28, DBG_IMPORTANT, "aclMatchUserMaxIP: user '" << auth_user_request->username() << "' tries to use too many IP addresses (max " << maximum << " allowed)!");
 
     /* this is a match */
-    if (flags.isSet(ACL_F_STRICT)) {
+    if (beStrict) {
         /*
          * simply deny access - the user name is already associated with
          * the request
          */
         /* remove _this_ ip, as it is the culprit for going over the limit */
         authenticateAuthUserRequestRemoveIp(auth_user_request, src_addr);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/AclMaxUserIp.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/AclMaxUserIp.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/AclMaxUserIp.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/AclMaxUserIp.h	2017-07-02 16:41:18.000000000 +0800
@@ -9,44 +9,40 @@
 #ifndef SQUID_ACLMAXUSERIP_H
 #define SQUID_ACLMAXUSERIP_H
 
 #if USE_AUTH
 
 #include "acl/Acl.h"
-#include "acl/Checklist.h"
 #include "auth/UserRequest.h"
 
 class ACLMaxUserIP : public ACL
 {
     MEMPROXY_CLASS(ACLMaxUserIP);
 
 public:
-    ACLMaxUserIP(char const *theClass);
-    ACLMaxUserIP(ACLMaxUserIP const &old);
-    ~ACLMaxUserIP();
-    ACLMaxUserIP &operator =(ACLMaxUserIP const &);
+    explicit ACLMaxUserIP(char const *theClass);
 
     virtual ACL *clone() const;
     virtual char const *typeString() const;
+    virtual const Acl::Options &options();
     virtual void parse();
     virtual int match(ACLChecklist *cl);
     virtual SBufList dump() const;
     virtual bool empty() const;
     virtual bool valid() const;
     virtual bool requiresRequest() const {return true;}
 
     int getMaximum() const {return maximum;}
 
-    bool getStrict() const {return flags.isSet(ACL_F_STRICT);}
-
 private:
-    static Prototype RegistryProtoype;
-    static ACLMaxUserIP RegistryEntry_;
-    static ACLFlag SupportedFlags[];
-
     int match(Auth::UserRequest::Pointer auth_user_request, Ip::Address const &src_addr);
+
+public:
+    Acl::BooleanOptionValue beStrict; ///< Enforce "one user, one device" policy?
+
+private:
     char const *class_;
     int maximum;
 };
 
 #endif /* USE_AUTH */
 #endif /* SQUID_ACLMAXUSERIP_H */
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/AclProxyAuth.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/AclProxyAuth.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/AclProxyAuth.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/AclProxyAuth.cc	2017-07-02 16:41:18.000000000 +0800
@@ -48,12 +48,18 @@
 ACLProxyAuth::typeString() const
 {
     return type_;
 }
 
 void
+ACLProxyAuth::parseFlags()
+{
+    ParseFlags(Acl::NoOptions(), data->supportedFlags());
+}
+
+void
 ACLProxyAuth::parse()
 {
     data->parse();
 }
 
 int
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/AclProxyAuth.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/AclProxyAuth.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/AclProxyAuth.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/AclProxyAuth.h	2017-07-02 16:41:18.000000000 +0800
@@ -34,30 +34,26 @@
 public:
     ~ACLProxyAuth();
     ACLProxyAuth(ACLData<char const *> *, char const *);
     ACLProxyAuth(ACLProxyAuth const &);
     ACLProxyAuth &operator =(ACLProxyAuth const &);
 
+    /* ACL API */
     virtual char const *typeString() const;
     virtual void parse();
     virtual bool isProxyAuth() const {return true;}
-
+    virtual void parseFlags();
     virtual int match(ACLChecklist *checklist);
     virtual SBufList dump() const;
     virtual bool valid() const;
     virtual bool empty() const;
     virtual bool requiresRequest() const {return true;}
-
     virtual ACL *clone() const;
     virtual int matchForCache(ACLChecklist *checklist);
 
 private:
-    static Prototype UserRegistryProtoype;
-    static ACLProxyAuth UserRegistryEntry_;
-    static Prototype RegexRegistryProtoype;
-    static ACLProxyAuth RegexRegistryEntry_;
     int matchProxyAuth(ACLChecklist *);
     ACLData<char const *> *data;
     char const *type_;
 };
 
 #endif /* USE_AUTH */
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/DB/basic_db_auth.8 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/DB/basic_db_auth.8
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/DB/basic_db_auth.8	2017-06-02 05:55:21.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/DB/basic_db_auth.8	2017-07-02 16:57:35.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 4.08 (Pod::Simple 3.32)
+.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -126,13 +126,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "BASIC_DB_AUTH 8"
-.TH BASIC_DB_AUTH 8 "2017-06-01" "perl v5.24.1" "User Contributed Perl Documentation"
+.TH BASIC_DB_AUTH 8 "2017-07-02" "perl v5.24.1" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 .Vb 1
@@ -187,13 +187,13 @@
 Selects the correct salt to evaluate passwords
 .IP "\fB\-\-persist\fR" 12
 .IX Item "--persist"
 Keep a persistent database connection open between queries.
 .IP "\fB\-\-joomla\fR" 12
 .IX Item "--joomla"
-Tells helper that user database is Joomla \s-1DB.\s0  So their unusual salt 
+Tells helper that user database is Joomla \s-1DB. \s0 So their unusual salt 
 hashing is understood.
 .SH "AUTHOR"
 .IX Header "AUTHOR"
 This program was written by
 \&\fIHenrik Nordstrom <henrik@henriknordstrom.net\fR> and
 \&\fILuis Daniel Lucio Quiroz <dlucio@okay.com.mx\fR>
@@ -226,11 +226,11 @@
 .PP
 Report serious security bugs to \fISquid Bugs <squid\-bugs@squid\-cache.org\fR>
 .PP
 Report ideas for new improvements to the \fISquid Developers mailing list <squid\-dev@squid\-cache.org\fR>
 .SH "SEE ALSO"
 .IX Header "SEE ALSO"
-squid (8), \s-1GPL\s0 (7),
+squid (8), \s-1GPL \\fIs0\fR\|(7),
 .PP
 The Squid \s-1FAQ\s0 wiki http://wiki.squid\-cache.org/SquidFaq
 .PP
 The Squid Configuration Manual http://www.squid\-cache.org/Doc/config/
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/DB/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/DB/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/DB/Makefile.in	2017-06-01 20:56:05.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/DB/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/fake/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/fake/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/fake/Makefile.in	2017-06-01 20:57:29.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/fake/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/getpwnam/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/getpwnam/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/getpwnam/Makefile.in	2017-06-01 20:57:34.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/getpwnam/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/LDAP/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/LDAP/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/LDAP/Makefile.in	2017-06-01 20:56:16.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/LDAP/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/Makefile.in	2017-06-01 20:56:22.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/NCSA/basic_ncsa_auth.8 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/NCSA/basic_ncsa_auth.8
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/NCSA/basic_ncsa_auth.8	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/NCSA/basic_ncsa_auth.8	2017-07-02 16:41:18.000000000 +0800
@@ -15,21 +15,21 @@
 This password file can be manipulated using
 .B htpasswd.
 .
 .PP
 This authenticator accepts:
 .BR
-* Blowfish - for passwords 72 characters or less in length
+ * Blowfish \- for passwords 72 characters or less in length.
 .BR
-* SHA256 - with salting and magic strings
+ * SHA256 \- with salting and magic strings.
 .BR
-* SHA512 - with salting and magic strings
+ * SHA512 \- with salting and magic strings.
 .BR
-* MD5 - with optional salt and magic strings
+ * MD5 \- with optional salt and magic strings.
 .BR
-* DES - for passwords 8 characters or less in length
+ * DES \- for passwords 8 characters or less in length.
 .
 NOTE: Blowfish and SHA algorithms require system-specific support.
 .
 .SH OPTIONS
 The only parameter is the password file.
 It must have permissions to be read by the user that Squid is running as.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/NCSA/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/NCSA/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/NCSA/Makefile.in	2017-06-01 20:56:30.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/NCSA/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/NIS/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/NIS/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/NIS/Makefile.in	2017-06-01 20:56:35.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/NIS/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/PAM/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/PAM/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/PAM/Makefile.in	2017-06-01 20:56:46.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/PAM/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/POP3/basic_pop3_auth.8 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/POP3/basic_pop3_auth.8
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/POP3/basic_pop3_auth.8	2017-06-02 05:56:01.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/POP3/basic_pop3_auth.8	2017-07-02 16:57:35.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 4.08 (Pod::Simple 3.32)
+.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -126,13 +126,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "BASIC_POP3_AUTH 8"
-.TH BASIC_POP3_AUTH 8 "2017-06-01" "perl v5.24.1" "User Contributed Perl Documentation"
+.TH BASIC_POP3_AUTH 8 "2017-07-02" "perl v5.24.1" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 .Vb 1
@@ -195,11 +195,11 @@
 .PP
 Report serious security bugs to \fISquid Bugs <squid\-bugs@squid\-cache.org\fR>
 .PP
 Report ideas for new improvements to the \fISquid Developers mailing list <squid\-dev@squid\-cache.org\fR>
 .SH "SEE ALSO"
 .IX Header "SEE ALSO"
-squid (8), \s-1GPL\s0 (7),
+squid (8), \s-1GPL \\fIs0\fR\|(7),
 .PP
 The Squid \s-1FAQ\s0 wiki http://wiki.squid\-cache.org/SquidFaq
 .PP
 The Squid Configuration Manual http://www.squid\-cache.org/Doc/config/
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/POP3/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/POP3/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/POP3/Makefile.in	2017-06-01 20:56:53.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/POP3/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/RADIUS/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/RADIUS/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/RADIUS/Makefile.in	2017-06-01 20:57:02.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/RADIUS/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/SASL/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/SASL/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/SASL/Makefile.in	2017-06-01 20:57:07.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/SASL/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/SMB/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/SMB/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/SMB/Makefile.in	2017-06-01 20:57:13.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/SMB/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/SMB_LM/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/SMB_LM/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/SMB_LM/Makefile.in	2017-06-01 20:57:18.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/SMB_LM/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/SSPI/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/SSPI/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/basic/SSPI/Makefile.in	2017-06-01 20:57:25.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/basic/SSPI/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/digest/eDirectory/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/digest/eDirectory/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/digest/eDirectory/Makefile.in	2017-06-01 20:57:48.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/digest/eDirectory/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/digest/file/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/digest/file/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/digest/file/Makefile.in	2017-06-01 20:57:53.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/digest/file/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/digest/LDAP/ldap_backend.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/digest/LDAP/ldap_backend.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/digest/LDAP/ldap_backend.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/digest/LDAP/ldap_backend.cc	2017-07-02 16:41:18.000000000 +0800
@@ -652,13 +652,13 @@
     char *password = NULL;
     ldapconnect();
 
     // use the -l delimiter to find realm, or
     // only honor the -r specified realm
     const bool lookup = (!*frealm && *delimiter) ||
-                        (*frealm && strcmp(requestData->realm, frealm) != 0);
+                        (*frealm && strcmp(requestData->realm, frealm) == 0);
 
     if (lookup)
         password = getpassword(requestData->user, requestData->realm);
 
     if (password != NULL) {
         if (encrpass)
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/digest/LDAP/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/digest/LDAP/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/digest/LDAP/Makefile.in	2017-06-01 20:57:38.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/digest/LDAP/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/digest/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/digest/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/digest/Makefile.in	2017-06-01 20:57:42.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/digest/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/Makefile.in	2017-06-01 20:56:02.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/Makefile.in	2017-07-02 16:41:25.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/negotiate/kerberos/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/negotiate/kerberos/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/negotiate/kerberos/Makefile.in	2017-06-01 20:58:09.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/negotiate/kerberos/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/negotiate/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/negotiate/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/negotiate/Makefile.in	2017-06-01 20:58:00.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/negotiate/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/negotiate/SSPI/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/negotiate/SSPI/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/negotiate/SSPI/Makefile.in	2017-06-01 20:58:04.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/negotiate/SSPI/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/negotiate/wrapper/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/negotiate/wrapper/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/negotiate/wrapper/Makefile.in	2017-06-01 20:58:15.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/negotiate/wrapper/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/ntlm/fake/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/ntlm/fake/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/ntlm/fake/Makefile.in	2017-06-01 20:58:34.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/ntlm/fake/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/ntlm/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/ntlm/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/ntlm/Makefile.in	2017-06-01 20:58:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/ntlm/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/ntlm/SMB_LM/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/ntlm/SMB_LM/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/ntlm/SMB_LM/Makefile.in	2017-06-01 20:58:25.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/ntlm/SMB_LM/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/ntlm/SSPI/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/ntlm/SSPI/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/auth/ntlm/SSPI/Makefile.in	2017-06-01 20:58:29.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/auth/ntlm/SSPI/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/base/CharacterSet.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/base/CharacterSet.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/base/CharacterSet.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/base/CharacterSet.cc	2017-07-02 16:41:18.000000000 +0800
@@ -94,12 +94,21 @@
     chars_(Storage(256,0))
 {
     for (auto range: ranges)
         addRange(range.first, range.second);
 }
 
+void
+CharacterSet::printChars(std::ostream &os) const
+{
+    for (size_t idx = 0; idx < 256; ++idx) {
+        if (chars_[idx])
+            os << static_cast<char>(idx);
+    }
+}
+
 CharacterSet
 operator+ (CharacterSet lhs, const CharacterSet &rhs)
 {
     lhs += rhs;
     return lhs;
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/base/CharacterSet.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/base/CharacterSet.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/base/CharacterSet.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/base/CharacterSet.h	2017-07-02 16:41:18.000000000 +0800
@@ -16,26 +16,28 @@
 /// optimized set of C chars, with quick membership test and merge support
 class CharacterSet
 {
 public:
     typedef std::vector<uint8_t> Storage;
 
-    /// define a character set with the given label ("anonymous" if nullptr)
-    ///  with specified initial contents
-    CharacterSet(const char *label, const char * const initial);
+    /// a character set with a given label and contents
+    explicit CharacterSet(const char *label = "anonymous", const char * const chars = "");
 
     /// define a character set with the given label ("anonymous" if nullptr)
     ///  containing characters defined in the supplied ranges
     /// \see addRange
     CharacterSet(const char *label, unsigned char low, unsigned char high);
 
     /// define a character set with the given label ("anonymous" if nullptr)
     ///  containing characters defined in the supplied list of low-high ranges
     /// \see addRange
     CharacterSet(const char *label, std::initializer_list<std::pair<uint8_t,uint8_t>> ranges);
 
+    /// whether the set lacks any members
+    bool isEmpty() const { return chars_.empty(); }
+
     /// whether a given character exists in the set
     bool operator[](unsigned char c) const {return chars_[static_cast<uint8_t>(c)] != 0;}
 
     /// add a given character to the character set
     CharacterSet & add(const unsigned char c);
 
@@ -57,12 +59,15 @@
 
     /// \note Ignores label
     bool operator == (const CharacterSet &cs) const { return chars_ == cs.chars_; }
     /// \note Ignores label
     bool operator != (const CharacterSet &cs) const { return !operator==(cs); }
 
+    /// prints all chars in arbitrary order, without any quoting/escaping
+    void printChars(std::ostream &os) const;
+
     /// optional set label for debugging (default: "anonymous")
     const char * name;
 
     // common character sets, RFC 5234
     // A-Za-z
     static const CharacterSet ALPHA;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/base/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/base/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/base/Makefile.in	2017-06-01 20:58:40.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/base/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/base/RefCount.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/base/RefCount.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/base/RefCount.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/base/RefCount.h	2017-07-02 16:41:18.000000000 +0800
@@ -67,17 +67,18 @@
     explicit operator bool() const { return p_; }
 
     bool operator !() const { return !p_; }
 
     C * operator-> () const {return const_cast<C *>(p_); }
 
-    C & operator * () const {return *const_cast<C *>(p_); }
-
-    C const * getRaw() const {return p_; }
+    C & operator * () const {
+        assert(p_);
+        return *const_cast<C *>(p_);
+    }
 
-    C * getRaw() {return const_cast<C *>(p_); }
+    C * getRaw() const { return const_cast<C *>(p_); }
 
     bool operator == (const RefCount& p) const {
         return p.p_ == p_;
     }
 
     bool operator != (const RefCount &p) const {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/cache_cf.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/cache_cf.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/cache_cf.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/cache_cf.cc	2017-07-02 16:41:18.000000000 +0800
@@ -564,14 +564,15 @@
     config_lineno = orig_config_lineno;
 
     xfree(tmp_line);
     return err_count;
 }
 
+static
 int
-parseConfigFile(const char *file_name)
+parseConfigFileOrThrow(const char *file_name)
 {
     int err_count = 0;
 
     debugs(5, 4, HERE);
 
     configFreeMemory();
@@ -606,12 +607,26 @@
                             1, 1);
     }
 
     return err_count;
 }
 
+// TODO: Refactor main.cc to centrally handle (and report) all exceptions.
+int
+parseConfigFile(const char *file_name)
+{
+    try {
+        return parseConfigFileOrThrow(file_name);
+    }
+    catch (const std::exception &ex) {
+        debugs(3, DBG_CRITICAL, "FATAL: bad configuration: " << ex.what());
+        self_destruct();
+        return 1; // not reached
+    }
+}
+
 static void
 configDoConfigure(void)
 {
     Config2.clear();
     /* init memory as early as possible */
     memConfigure();
@@ -1305,18 +1320,20 @@
 
 static void
 dump_acl(StoreEntry * entry, const char *name, ACL * ae)
 {
     while (ae != NULL) {
         debugs(3, 3, "dump_acl: " << name << " " << ae->name);
-        storeAppendPrintf(entry, "%s %s %s %s ",
+        storeAppendPrintf(entry, "%s %s %s ",
                           name,
                           ae->name,
-                          ae->typeString(),
-                          ae->flags.flagsStr());
-        dump_SBufList(entry, ae->dump());
+                          ae->typeString());
+        SBufList tail;
+        tail.splice(tail.end(), ae->dumpOptions());
+        tail.splice(tail.end(), ae->dump()); // ACL parameters
+        dump_SBufList(entry, tail);
         ae = ae->next;
     }
 }
 
 static void
 parse_acl(ACL ** ae)
@@ -2400,13 +2417,13 @@
         self_destruct();
         return;
     }
 
     CachePeer *p = peerFindByName(host);
     if (!p) {
-        debugs(15, DBG_CRITICAL, "" << cfg_filename << ", line " << config_lineno << ": No cache_peer '" << host << "'");
+        debugs(15, DBG_CRITICAL, "ERROR: " << cfg_filename << ", line " << config_lineno << ": No cache_peer '" << host << "'");
         return;
     }
 
     std::string directive = "peer_access ";
     directive += host;
     aclParseAccessLine(directive.c_str(), LegacyParser, &p->access);
@@ -4035,13 +4052,13 @@
     assert(cl);
     assert(logdef_name);
 
     debugs(3, 9, "possible " << cl->filename << " logformat: " << logdef_name);
 
     if (cl->type != Log::Format::CLF_UNKNOWN) {
-        debugs(3, DBG_CRITICAL, "Second logformat name in one access_log: " <<
+        debugs(3, DBG_CRITICAL, "FATAL: Second logformat name in one access_log: " <<
                logdef_name << " " << cl->type << " ? " << Log::Format::CLF_NONE);
         self_destruct();
         return false;
     }
 
     /* look for the definition pointer corresponding to this name */
@@ -4074,13 +4091,13 @@
 #endif
     } else if (strcmp(logdef_name, "useragent") == 0) {
         cl->type = Log::Format::CLF_USERAGENT;
     } else if (strcmp(logdef_name, "referrer") == 0) {
         cl->type = Log::Format::CLF_REFERER;
     } else if (dieWhenMissing) {
-        debugs(3, DBG_CRITICAL, "Log format '" << logdef_name << "' is not defined");
+        debugs(3, DBG_CRITICAL, "FATAL: Log format '" << logdef_name << "' is not defined");
         self_destruct();
         return false;
     } else {
         return false;
     }
 
@@ -4109,13 +4126,14 @@
 
         case Log::Format::CLF_NONE:
             storeAppendPrintf(entry, "logformat=none");
             break;
 
         case Log::Format::CLF_SQUID:
-            storeAppendPrintf(entry, "%s logformat=squid", log->filename);
+            // this is the default, no need to add to the dump
+            //storeAppendPrintf(entry, "%s logformat=squid", log->filename);
             break;
 
         case Log::Format::CLF_COMBINED:
             storeAppendPrintf(entry, "%s logformat=combined", log->filename);
             break;
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/cbdata.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/cbdata.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/cbdata.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/cbdata.h	2017-07-02 16:41:18.000000000 +0800
@@ -368,8 +368,28 @@
     }
 
 private:
     void *data;
 };
 
+// Discouraged: Use CbcPointer<> and asynchronous calls instead if possible.
+/// an old-style void* callback parameter
+class CallbackData
+{
+public:
+    CallbackData(): data_(nullptr) {}
+    CallbackData(void *data): data_(cbdataReference(data)) {}
+    CallbackData(const CallbackData &other): data_(cbdataReference(other.data_)) {}
+    CallbackData(CallbackData &&other): data_(other.data_) { other.data_ = nullptr; }
+    ~CallbackData() { cbdataReferenceDone(data_); }
+
+    // implement if needed
+    CallbackData &operator =(const CallbackData &other) = delete;
+
+    void *validDone() { void *result; return cbdataReferenceValidDone(data_, &result) ? result : nullptr; }
+
+private:
+    void *data_; ///< raw callback data, maybe invalid
+};
+
 #endif /* SQUID_CBDATA_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/cf.data.pre /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/cf.data.pre
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/cf.data.pre	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/cf.data.pre	2017-07-02 16:41:18.000000000 +0800
@@ -1239,12 +1239,34 @@
 	  # has used (or attempted to use) for the master transaction.
 	  # This ACL must be defined after the corresponding adaptation
 	  # service is named in squid.conf. This ACL is usable with
 	  # adaptation_meta because it starts matching immediately after
 	  # the service has been selected for adaptation.
 
+	acl aclname transaction_initiator initiator ...
+	  # Matches transaction's initiator [fast]
+	  #
+	  # Supported initiators are:
+	  #  esi: matches transactions fetching ESI resources
+	  #  certificate-fetching: matches transactions fetching
+	  #     a missing intermediate TLS certificate
+	  #  cache-digest: matches transactions fetching Cache Digests
+	  #     from a cache_peer
+	  #  htcp: matches HTCP requests from peers
+	  #  icp: matches ICP requests to peers
+	  #  icmp: matches ICMP RTT database (NetDB) requests to peers
+	  #  asn: matches asns db requests
+	  #  internal: matches any of the above
+	  #  client: matches transactions containing an HTTP or FTP
+	  #     client request received at a Squid *_port
+	  #  all: matches any transaction, including internal transactions
+	  #     without a configurable initiator and hopefully rare
+	  #     transactions without a known-to-Squid initiator
+	  #
+	  # Multiple initiators are ORed.
+
 	acl aclname has component
 	  # matches a transaction "component" [fast]
 	  #
 	  # Supported transaction components are:
 	  #  request: transaction has a request header (at least)
 	  #  response: transaction has a response header (at least)
@@ -1308,23 +1330,53 @@
 	  # the next bumping action (e.g., peek or splice). Valid SslBump step
 	  # values and the corresponding ssl_bump evaluation moments are:
 	  #   SslBump1: After getting TCP-level and HTTP CONNECT info.
 	  #   SslBump2: After getting SSL Client Hello info.
 	  #   SslBump3: After getting SSL Server Hello info.
 
-	acl aclname ssl::server_name .foo.com ...
+	acl aclname ssl::server_name [option] .foo.com ...
 	  # matches server name obtained from various sources [fast]
 	  #
-	  # The server name is obtained during Ssl-Bump steps from such sources
-	  # as CONNECT request URI, client SNI, and SSL server certificate CN.
-	  # During each Ssl-Bump step, Squid may improve its understanding of a
-	  # "true server name". Unlike dstdomain, this ACL does not perform
-	  # DNS lookups.
-	  # The "none" name can be used to match transactions where Squid
+	  # The ACL computes server name(s) using such information sources as
+	  # CONNECT request URI, TLS client SNI, and TLS server certificate 
+	  # subject (CN and SubjectAltName). The computed server name(s) usually
+	  # change with each SslBump step, as more info becomes available:
+	  # * SNI is used as the server name instead of the request URI,
+	  # * subject name(s) from the server certificate (CN and
+	  #   SubjectAltName) are used as the server names instead of SNI.
+	  #
+	  # When the ACL computes multiple server names, matching any single
+	  # computed name is sufficient for the ACL to match.
+	  #
+	  # The "none" name can be used to match transactions where the ACL
 	  # could not compute the server name using any information source
-	  # already available at the ACL evaluation time.
+	  # that was both available and allowed to be used by the ACL options at
+	  # the ACL evaluation time.
+	  #
+	  # Unlike dstdomain, this ACL does not perform DNS lookups.
+	  #
+	  # An ACL option below may be used to restrict what information 
+	  # sources are used to extract the server names from:
+	  #
+	  # --client-requested
+	  #   The server name is SNI regardless of what the server says.
+	  # --server-provided
+	  #   The server name(s) are the certificate subject name(s), regardless
+	  #   of what the client has requested. If the server certificate is
+	  #   unavailable, then the name is "none".
+	  # --consensus
+	  #   The server name is either SNI (if SNI matches at least one of the
+	  #   certificate subject names) or "none" (otherwise). When the server
+	  #   certificate is unavailable, the consensus server name is SNI.
+	  #
+	  # Combining multiple options in one ACL is a fatal configuration
+	  # error.
+	  #
+	  # For all options: If no SNI is available, then the CONNECT request
+	  # target (a.k.a. URI) is used instead of SNI (for an intercepted
+	  # connection, this target is the destination IP address).
 
 	acl aclname ssl::server_name_regex [-i] \.foo\.com ...
 	  # regex matches server name obtained from various sources [fast]
 
 	acl aclname connections_encrypted
 	  # matches transactions with all HTTP messages received over TLS
@@ -4347,15 +4399,13 @@
 				triggered "ssl_bump" ACL evaluation matching
 				a "none" rule.
 
 				In all other cases, a single dash ("-") is
 				logged.
 
-		ssl::>sni	SSL client SNI sent to Squid. Available only
-				after the peek, stare, or splice SSL bumping
-				actions.
+		ssl::>sni	SSL client SNI sent to Squid.
 
 		ssl::>cert_subject
 				The Subject field of the received client
 				SSL certificate or a dash ('-') if Squid has
 				received an invalid/malformed certificate or
 				no certificate at all. Consider encoding the
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/clients/Client.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/clients/Client.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/clients/Client.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/clients/Client.cc	2017-07-02 16:41:18.000000000 +0800
@@ -536,13 +536,13 @@
     if (const Acl::Tree *acl = Config.accessList.storeMiss) {
         // This relatively expensive check is not in StoreEntry::checkCachable:
         // That method lacks HttpRequest and may be called too many times.
         ACLFilledChecklist ch(acl, originalRequest(), NULL);
         ch.reply = const_cast<HttpReply*>(entry->getReply()); // ACLFilledChecklist API bug
         HTTPMSGLOCK(ch.reply);
-        if (ch.fastCheck() != ACCESS_ALLOWED) { // when in doubt, block
+        if (!ch.fastCheck().allowed()) { // when in doubt, block
             debugs(20, 3, "store_miss prohibits caching");
             return true;
         }
     }
     return false;
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/clients/FtpClient.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/clients/FtpClient.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/clients/FtpClient.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/clients/FtpClient.cc	2017-07-02 16:41:18.000000000 +0800
@@ -702,13 +702,13 @@
         break;
 
     default: {
         bool doEpsv = true;
         if (Config.accessList.ftp_epsv) {
             ACLFilledChecklist checklist(Config.accessList.ftp_epsv, fwd->request, NULL);
-            doEpsv = (checklist.fastCheck() == ACCESS_ALLOWED);
+            doEpsv = checklist.fastCheck().allowed();
         }
         if (!doEpsv) {
             debugs(9, 5, "EPSV support manually disabled. Sending PASV for FTP Channel (" << ctrl.conn->remote <<")");
             mb.appendf("PASV%s", Ftp::crlf);
             state = SENT_PASV;
         } else if (Config.Ftp.epsv_all) {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/clients/FtpRelay.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/clients/FtpRelay.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/clients/FtpRelay.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/clients/FtpRelay.cc	2017-07-02 16:41:18.000000000 +0800
@@ -208,15 +208,16 @@
                    " after " << ctrl.replycode);
             fwd->unregister(ctrl.conn);
             if (ctrl.replycode == 221) { // Server sends FTP 221 before closing
                 mgr->unpinConnection(false);
                 ctrl.close();
             } else {
-                mgr->pinConnection(ctrl.conn, fwd->request,
-                                   ctrl.conn->getPeer(),
-                                   fwd->request->flags.connectionAuth);
+                CallJobHere1(9, 4, mgr,
+                             ConnStateData,
+                             notePinnedConnectionBecameIdle,
+                             ConnStateData::PinnedIdleContext(ctrl.conn, fwd->request));
                 ctrl.forget();
             }
         }
     }
     Ftp::Client::serverComplete();
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/clients/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/clients/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/clients/Makefile.in	2017-06-01 20:58:46.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/clients/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/client_side.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/client_side.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/client_side.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/client_side.cc	2017-07-02 16:41:18.000000000 +0800
@@ -458,13 +458,13 @@
     if (Config.accessList.stats_collection) {
         ACLFilledChecklist statsCheck(Config.accessList.stats_collection, request, NULL);
         if (al->reply) {
             statsCheck.reply = al->reply;
             HTTPMSGLOCK(statsCheck.reply);
         }
-        updatePerformanceCounters = (statsCheck.fastCheck() == ACCESS_ALLOWED);
+        updatePerformanceCounters = statsCheck.fastCheck().allowed();
     }
 
     if (updatePerformanceCounters) {
         if (request)
             updateCounters();
 
@@ -589,12 +589,13 @@
     checkLogging();
 
     flags.readMore = false;
     clientdbEstablished(clientConnection->remote, -1);  /* decrement */
     pipeline.terminateAll(0);
 
+    // XXX: Closing pinned conn is too harsh: The Client may want to continue!
     unpinConnection(true);
 
     Server::swanSong(); // closes the client connection
 
 #if USE_AUTH
     // NP: do this bit after closing the connections to avoid side effects from unwanted TCP RST
@@ -1523,13 +1524,13 @@
                    "does not match domainname " << request->url.host());
 
             bool allowDomainMismatch = false;
             if (Config.ssl_client.cert_error) {
                 ACLFilledChecklist check(Config.ssl_client.cert_error, request, dash_str);
                 check.sslErrors = new Security::CertErrors(Security::CertError(SQUID_X509_V_ERR_DOMAIN_MISMATCH, srvCert));
-                allowDomainMismatch = (check.fastCheck() == ACCESS_ALLOWED);
+                allowDomainMismatch = check.fastCheck().allowed();
                 delete check.sslErrors;
                 check.sslErrors = NULL;
             }
 
             if (!allowDomainMismatch) {
                 quitAfterError(request);
@@ -1577,13 +1578,13 @@
         ACLFilledChecklist checklist(Config.accessList.on_unsupported_protocol, request.getRaw(), nullptr);
         checklist.requestErrorType = requestError;
         checklist.src_addr = conn->clientConnection->remote;
         checklist.my_addr = conn->clientConnection->local;
         checklist.conn(conn);
         allow_t answer = checklist.fastCheck();
-        if (answer == ACCESS_ALLOWED && answer.kind == 1) {
+        if (answer.allowed() && answer.kind == 1) {
             debugs(33, 3, "Request will be tunneled to server");
             if (context) {
                 assert(conn->pipeline.front() == context); // XXX: still assumes HTTP/1 semantics
                 context->finished(); // Will remove from conn->pipeline queue
             }
             Comm::SetSelect(conn->clientConnection->fd, COMM_SELECT_READ, NULL, NULL, 0);
@@ -1630,48 +1631,28 @@
     const bool isFtp = !hp;
 
     // Some blobs below are still HTTP-specific, but we would have to rewrite
     // this entire function to remove them from the FTP code path. Connection
     // setup and body_pipe preparation blobs are needed for FTP.
 
-    request->clientConnectionManager = conn;
+    request->manager(conn, http->al);
 
     request->flags.accelerated = http->flags.accel;
     request->flags.sslBumped=conn->switchedToHttps();
-    request->flags.ignoreCc = conn->port->ignore_cc;
     // TODO: decouple http->flags.accel from request->flags.sslBumped
     request->flags.noDirect = (request->flags.accelerated && !request->flags.sslBumped) ?
                               !conn->port->allow_direct : 0;
     request->sources |= isFtp ? HttpMsg::srcFtp :
                         ((request->flags.sslBumped || conn->port->transport.protocol == AnyP::PROTO_HTTPS) ? HttpMsg::srcHttps : HttpMsg::srcHttp);
 #if USE_AUTH
     if (request->flags.sslBumped) {
         if (conn->getAuth() != NULL)
             request->auth_user_request = conn->getAuth();
     }
 #endif
 
-    /** \par
-     * If transparent or interception mode is working clone the transparent and interception flags
-     * from the port settings to the request.
-     */
-    if (http->clientConnection != NULL) {
-        request->flags.intercepted = ((http->clientConnection->flags & COMM_INTERCEPTION) != 0);
-        request->flags.interceptTproxy = ((http->clientConnection->flags & COMM_TRANSPARENT) != 0 ) ;
-        static const bool proxyProtocolPort = (conn->port != NULL) ? conn->port->flags.proxySurrogate : false;
-        if (request->flags.interceptTproxy && !proxyProtocolPort) {
-            if (Config.accessList.spoof_client_ip) {
-                ACLFilledChecklist *checklist = clientAclChecklistCreate(Config.accessList.spoof_client_ip, http);
-                request->flags.spoofClientIp = (checklist->fastCheck() == ACCESS_ALLOWED);
-                delete checklist;
-            } else
-                request->flags.spoofClientIp = true;
-        } else
-            request->flags.spoofClientIp = false;
-    }
-
     if (internalCheck(request->url.path())) {
         if (internalHostnameIs(request->url.host()) && request->url.port() == getMyPort()) {
             debugs(33, 2, "internal URL found: " << request->url.getScheme() << "://" << request->url.authority(true));
             http->flags.internal = true;
         } else if (Config.onoff.global_internal_static && internalStaticCheck(request->url.path())) {
             debugs(33, 2, "internal URL found: " << request->url.getScheme() << "://" << request->url.authority(true) << " (global_internal_static on)");
@@ -1682,34 +1663,22 @@
         } else
             debugs(33, 2, "internal URL found: " << request->url.getScheme() << "://" << request->url.authority(true) << " (not this proxy)");
     }
 
     request->flags.internal = http->flags.internal;
     setLogUri (http, urlCanonicalClean(request.getRaw()));
-    request->client_addr = conn->clientConnection->remote; // XXX: remove request->client_addr member.
-#if FOLLOW_X_FORWARDED_FOR
-    // indirect client gets stored here because it is an HTTP header result (from X-Forwarded-For:)
-    // not details about the TCP connection itself
-    request->indirect_client_addr = conn->clientConnection->remote;
-#endif /* FOLLOW_X_FORWARDED_FOR */
-    request->my_addr = conn->clientConnection->local;
-    request->myportname = conn->port->name;
 
     if (!isFtp) {
         // XXX: for non-HTTP messages instantiate a different HttpMsg child type
         // for now Squid only supports HTTP requests
         const AnyP::ProtocolVersion &http_ver = hp->messageProtocol();
         assert(request->http_ver.protocol == http_ver.protocol);
         request->http_ver.major = http_ver.major;
         request->http_ver.minor = http_ver.minor;
     }
 
-    // Link this HttpRequest to ConnStateData relatively early so the following complex handling can use it
-    // TODO: this effectively obsoletes a lot of conn->FOO copying. That needs cleaning up later.
-    request->clientConnectionManager = conn;
-
     if (request->header.chunked()) {
         chunked = true;
     } else if (request->header.has(Http::HdrType::TRANSFER_ENCODING)) {
         const String te = request->header.getList(Http::HdrType::TRANSFER_ENCODING);
         // HTTP/1.1 requires chunking to be the last encoding if there is one
         unsupportedTe = te.size() && te != "identity";
@@ -1854,13 +1823,13 @@
 
     ACLFilledChecklist ch(Config.accessList.proxyProtocol, NULL, clientConnection->rfc931);
     ch.src_addr = clientConnection->remote;
     ch.my_addr = clientConnection->local;
     ch.conn(this);
 
-    if (ch.fastCheck() != ACCESS_ALLOWED)
+    if (!ch.fastCheck().allowed())
         return proxyProtocolError("PROXY client not permitted by ACLs");
 
     return true;
 }
 
 /**
@@ -2126,12 +2095,19 @@
     debugs(33, 5, HERE << clientConnection << ": attempting to parse");
 
     // Loop while we have read bytes that are not needed for producing the body
     // On errors, bodyPipe may become nil, but readMore will be cleared
     while (!inBuf.isEmpty() && !bodyPipe && flags.readMore) {
 
+        // Prohibit concurrent requests when using a pinned to-server connection
+        // because our Client classes do not support request pipelining.
+        if (pinning.pinned && !pinning.readHandler) {
+            debugs(33, 3, clientConnection << " waits for busy " << pinning.serverConnection);
+            break;
+        }
+
         /* Limit the number of concurrent requests */
         if (concurrentRequestQueueFilled())
             break;
 
         // try to parse the PROXY protocol header magic bytes
         if (needProxyProtocolHeader_) {
@@ -2474,13 +2450,13 @@
 
 #if USE_IDENT
     if (Ident::TheConfig.identLookup) {
         ACLFilledChecklist identChecklist(Ident::TheConfig.identLookup, NULL, NULL);
         identChecklist.src_addr = clientConnection->remote;
         identChecklist.my_addr = clientConnection->local;
-        if (identChecklist.fastCheck() == ACCESS_ALLOWED)
+        if (identChecklist.fastCheck().allowed())
             Ident::Start(clientConnection, clientIdentDone, this);
     }
 #endif
 
     clientdbEstablished(clientConnection->remote, 1);
 
@@ -2502,13 +2478,13 @@
         for (unsigned int pool = 0; pool < pools.size(); ++pool) {
 
             /* pools require explicit 'allow' to assign a client into them */
             if (pools[pool].access) {
                 ch.changeAcl(pools[pool].access);
                 allow_t answer = ch.fastCheck();
-                if (answer == ACCESS_ALLOWED) {
+                if (answer.allowed()) {
 
                     /*  request client information from db after we did all checks
                         this will save hash lookup if client failed checks */
                     ClientInfo * cli = clientdbGetInfo(clientConnection->remote);
                     assert(cli);
 
@@ -2734,13 +2710,13 @@
     ConnStateData *connState = (ConnStateData *) data;
 
     // if the connection is closed or closing, just return.
     if (!connState->isOpen())
         return;
 
-    if (answer == ACCESS_ALLOWED) {
+    if (answer.allowed()) {
         debugs(33, 2, "sslBump action " << Ssl::bumpMode(answer.kind) << "needed for " << connState->clientConnection);
         connState->sslBumpMode = static_cast<Ssl::BumpMode>(answer.kind);
     } else {
         debugs(33, 3, "sslBump not needed for " << connState->clientConnection);
         connState->sslBumpMode = Ssl::bumpSplice;
     }
@@ -2790,15 +2766,17 @@
 
         if (!Config.accessList.ssl_bump) {
             httpsSslBumpAccessCheckDone(ACCESS_DENIED, this);
             return;
         }
 
+        MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initClient);
+        mx->tcpClient = clientConnection;
         // Create a fake HTTP request for ssl_bump ACL check,
         // using tproxy/intercept provided destination IP and port.
-        HttpRequest *request = new HttpRequest();
+        HttpRequest *request = new HttpRequest(mx);
         static char ip[MAX_IPSTRLEN];
         assert(clientConnection->flags & (COMM_TRANSPARENT | COMM_INTERCEPTION));
         request->url.host(clientConnection->local.toStr(ip, sizeof(ip)));
         request->url.port(clientConnection->local.port());
         request->myportname = port->name;
 
@@ -2888,13 +2866,13 @@
             // If the algorithm already set, then ignore it.
             if ((ca->alg == Ssl::algSetCommonName && certProperties.setCommonName) ||
                     (ca->alg == Ssl::algSetValidAfter && certProperties.setValidAfter) ||
                     (ca->alg == Ssl::algSetValidBefore && certProperties.setValidBefore) )
                 continue;
 
-            if (ca->aclList && checklist.fastCheck(ca->aclList) == ACCESS_ALLOWED) {
+            if (ca->aclList && checklist.fastCheck(ca->aclList).allowed()) {
                 const char *alg = Ssl::CertAdaptAlgorithmStr[ca->alg];
                 const char *param = ca->param;
 
                 // For parameterless CN adaptation, use hostname from the
                 // CONNECT request.
                 if (ca->alg == Ssl::algSetCommonName) {
@@ -2911,13 +2889,13 @@
                        alg << " param: " << (param ? param : "-"));
             }
         }
 
         certProperties.signAlgorithm = Ssl::algSignEnd;
         for (sslproxy_cert_sign *sg = Config.ssl_client.cert_sign; sg != NULL; sg = sg->next) {
-            if (sg->aclList && checklist.fastCheck(sg->aclList) == ACCESS_ALLOWED) {
+            if (sg->aclList && checklist.fastCheck(sg->aclList).allowed()) {
                 certProperties.signAlgorithm = (Ssl::CertSignAlgorithm)sg->alg;
                 break;
             }
         }
     } else {// did not try to connect (e.g. client-first) or failed to connect
         // In case of an error while connecting to the secure server, use a
@@ -3154,14 +3132,13 @@
     // Even if the parser failed, each TLS detail should either be set
     // correctly or still be "unknown"; copying unknown detail is a no-op.
     Security::TlsDetails::Pointer const &details = tlsParser.details;
     clientConnection->tlsNegotiations()->retrieveParsedInfo(details);
     if (details && !details->serverName.isEmpty()) {
         resetSslCommonName(details->serverName.c_str());
-        if (sslServerBump)
-            sslServerBump->clientSni = details->serverName;
+        tlsClientSni_ = details->serverName;
     }
 
     // We should disable read/write handlers
     Comm::SetSelect(clientConnection->fd, COMM_SELECT_READ, NULL, NULL, 0);
     Comm::SetSelect(clientConnection->fd, COMM_SELECT_WRITE, NULL, NULL, 0);
 
@@ -3197,13 +3174,13 @@
     if (!connState->isOpen())
         return;
 
     debugs(33, 5, "Answer: " << answer << " kind:" << answer.kind);
     assert(connState->serverBump());
     Ssl::BumpMode bumpAction;
-    if (answer == ACCESS_ALLOWED) {
+    if (answer.allowed()) {
         bumpAction = (Ssl::BumpMode)answer.kind;
     } else
         bumpAction = Ssl::bumpSplice;
 
     connState->serverBump()->act.step2 = bumpAction;
     connState->sslBumpMode = bumpAction;
@@ -3326,28 +3303,24 @@
 
     Comm::SetSelect(clientConnection->fd, COMM_SELECT_WRITE, clientNegotiateSSL, this, 0);
     switchedToHttps_ = true;
 }
 
 void
-ConnStateData::httpsPeeked(Comm::ConnectionPointer serverConnection)
+ConnStateData::httpsPeeked(PinnedIdleContext pic)
 {
     Must(sslServerBump != NULL);
+    Must(sslServerBump->request == pic.request);
+    Must(pipeline.empty() || pipeline.front()->http == nullptr || pipeline.front()->http->request == pic.request.getRaw());
 
-    if (Comm::IsConnOpen(serverConnection)) {
-        pinConnection(serverConnection, NULL, NULL, false);
-
+    if (Comm::IsConnOpen(pic.connection)) {
+        notePinnedConnectionBecameIdle(pic);
         debugs(33, 5, HERE << "bumped HTTPS server: " << sslConnectHostOrIp);
-    } else {
+    } else
         debugs(33, 5, HERE << "Error while bumping: " << sslConnectHostOrIp);
 
-        //  copy error detail from bump-server-first request to CONNECT request
-        if (!pipeline.empty() && pipeline.front()->http != nullptr && pipeline.front()->http->request)
-            pipeline.front()->http->request->detailError(sslServerBump->request->errType, sslServerBump->request->errDetail);
-    }
-
     getSslContextStart();
 }
 
 #endif /* USE_OPENSSL */
 
 bool
@@ -3388,14 +3361,14 @@
 
     SBuf connectHost;
     assert(transparent());
     const unsigned short connectPort = clientConnection->local.port();
 
 #if USE_OPENSSL
-    if (serverBump() && !serverBump()->clientSni.isEmpty())
-        connectHost.assign(serverBump()->clientSni);
+    if (!tlsClientSni_.isEmpty())
+        connectHost.assign(tlsClientSni_);
     else
 #endif
     {
         static char ip[MAX_IPSTRLEN];
         clientConnection->local.toHostStr(ip, sizeof(ip));
         connectHost.assign(ip);
@@ -3433,40 +3406,35 @@
     AsyncCall::Pointer timeoutCall = commCbCall(5, 4, "clientLifetimeTimeout",
                                      CommTimeoutCbPtrFun(clientLifetimeTimeout, stream->http));
     commSetConnTimeout(clientConnection, Config.Timeout.lifetime, timeoutCall);
 
     stream->registerWithConn();
 
+    MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initClient);
+    mx->tcpClient = clientConnection;
     // Setup Http::Request object. Maybe should be replaced by a call to (modified)
     // clientProcessRequest
-    HttpRequest::Pointer request = new HttpRequest();
+    HttpRequest::Pointer request = new HttpRequest(mx);
     AnyP::ProtocolType proto = (method == Http::METHOD_NONE) ? AnyP::PROTO_AUTHORITY_FORM : AnyP::PROTO_HTTP;
     request->url.setScheme(proto, nullptr);
     request->method = method;
     request->url.host(useHost.c_str());
     request->url.port(usePort);
     http->request = request.getRaw();
     HTTPMSGLOCK(http->request);
 
-    request->clientConnectionManager = this;
+    request->manager(this, http->al);
 
     if (proto == AnyP::PROTO_HTTP)
         request->header.putStr(Http::HOST, useHost.c_str());
-    request->flags.intercepted = ((clientConnection->flags & COMM_INTERCEPTION) != 0);
-    request->flags.interceptTproxy = ((clientConnection->flags & COMM_TRANSPARENT) != 0 );
+
     request->sources |= ((switchedToHttps() || port->transport.protocol == AnyP::PROTO_HTTPS) ? HttpMsg::srcHttps : HttpMsg::srcHttp);
 #if USE_AUTH
     if (getAuth())
         request->auth_user_request = getAuth();
 #endif
-    request->client_addr = clientConnection->remote;
-#if FOLLOW_X_FORWARDED_FOR
-    request->indirect_client_addr = clientConnection->remote;
-#endif /* FOLLOW_X_FORWARDED_FOR */
-    request->my_addr = clientConnection->local;
-    request->myportname = port->name;
 
     inBuf = payload;
     flags.readMore = false;
 
     setLogUri(http, urlCanonicalClean(request.getRaw()));
     return http;
@@ -3888,50 +3856,61 @@
         clientConnection->close();
     }
 
 }
 
 void
-ConnStateData::pinConnection(const Comm::ConnectionPointer &pinServer, HttpRequest *request, CachePeer *aPeer, bool auth, bool monitor)
+ConnStateData::pinBusyConnection(const Comm::ConnectionPointer &pinServer, const HttpRequest::Pointer &request)
 {
-    if (!Comm::IsConnOpen(pinning.serverConnection) ||
-            pinning.serverConnection->fd != pinServer->fd)
-        pinNewConnection(pinServer, request, aPeer, auth);
+    pinConnection(pinServer, *request);
+}
 
-    if (monitor)
-        startPinnedConnectionMonitoring();
+void
+ConnStateData::notePinnedConnectionBecameIdle(PinnedIdleContext pic)
+{
+    Must(pic.connection);
+    Must(pic.request);
+    pinConnection(pic.connection, *pic.request);
+
+    // monitor pinned server connection for remote-end closures.
+    startPinnedConnectionMonitoring();
+
+    if (pipeline.empty())
+        kick(); // in case clientParseRequests() was blocked by a busy pic.connection
 }
 
+/// Forward future client requests using the given server connection.
 void
-ConnStateData::pinNewConnection(const Comm::ConnectionPointer &pinServer, HttpRequest *request, CachePeer *aPeer, bool auth)
+ConnStateData::pinConnection(const Comm::ConnectionPointer &pinServer, const HttpRequest &request)
 {
+    if (Comm::IsConnOpen(pinning.serverConnection) &&
+            pinning.serverConnection->fd == pinServer->fd) {
+        debugs(33, 3, "already pinned" << pinServer);
+        return;
+    }
+
     unpinConnection(true); // closes pinned connection, if any, and resets fields
 
     pinning.serverConnection = pinServer;
 
     debugs(33, 3, HERE << pinning.serverConnection);
 
     Must(pinning.serverConnection != NULL);
 
-    // when pinning an SSL bumped connection, the request may be NULL
     const char *pinnedHost = "[unknown]";
-    if (request) {
-        pinning.host = xstrdup(request->url.host());
-        pinning.port = request->url.port();
-        pinnedHost = pinning.host;
-    } else {
-        pinning.port = pinServer->remote.port();
-    }
+    pinning.host = xstrdup(request.url.host());
+    pinning.port = request.url.port();
+    pinnedHost = pinning.host;
     pinning.pinned = true;
-    if (aPeer)
+    if (CachePeer *aPeer = pinServer->getPeer())
         pinning.peer = cbdataReference(aPeer);
-    pinning.auth = auth;
+    pinning.auth = request.flags.connectionAuth;
     char stmp[MAX_IPSTRLEN];
     char desc[FD_DESC_SZ];
     snprintf(desc, FD_DESC_SZ, "%s pinned connection for %s (%d)",
-             (auth || !aPeer) ? pinnedHost : aPeer->name,
+             (pinning.auth || !pinning.peer) ? pinnedHost : pinning.peer->name,
              clientConnection->remote.toUrl(stmp,MAX_IPSTRLEN),
              clientConnection->fd);
     fd_note(pinning.serverConnection->fd, desc);
 
     typedef CommCbMemFunT<ConnStateData, CommCloseCbParams> Dialer;
     pinning.closeHandler = JobCallback(33, 5,
@@ -4124,12 +4103,13 @@
     if (pipeline.nrequests && inBuf.isEmpty())
         return;
 
     /* Create a temporary ClientHttpRequest object. Its destructor will log. */
     ClientHttpRequest http(this);
     http.req_sz = inBuf.length();
+    // XXX: Or we died while waiting for the pinned connection to become idle.
     char const *uri = "error:transaction-end-before-headers";
     http.uri = xstrdup(uri);
     setLogUri(&http, uri);
 }
 
 bool
@@ -4141,6 +4121,12 @@
            ((port->flags.isIntercepted() && port->flags.tunnelSslBumping)
             || (serverBump() && pinning.serverConnection))
 #endif
            ;
 }
 
+std::ostream &
+operator <<(std::ostream &os, const ConnStateData::PinnedIdleContext &pic)
+{
+    return os << pic.connection << ", request=" << pic.request;
+}
+
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/client_side.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/client_side.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/client_side.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/client_side.h	2017-07-02 16:41:18.000000000 +0800
@@ -25,15 +25,20 @@
 #endif
 #if USE_OPENSSL
 #include "security/Handshake.h"
 #include "ssl/support.h"
 #endif
 
+#include <iosfwd>
+
 class ClientHttpRequest;
 class HttpHdrRangeSpec;
 
+class MasterXaction;
+typedef RefCount<MasterXaction> MasterXactionPointer;
+
 #if USE_OPENSSL
 namespace Ssl
 {
 class ServerBump;
 }
 #endif
@@ -63,13 +68,13 @@
  * stopSending() methods.
  */
 class ConnStateData : public Server, public HttpControlMsgSink, private IndependentRunner
 {
 
 public:
-    explicit ConnStateData(const MasterXaction::Pointer &xact);
+    explicit ConnStateData(const MasterXactionPointer &xact);
     virtual ~ConnStateData();
 
     /* ::Server API */
     virtual void receivedFirstByte();
     virtual bool handleReadData();
     virtual void afterClientRead();
@@ -152,15 +157,27 @@
     BodyPipe::Pointer expectRequestBody(int64_t size);
     virtual void noteMoreBodySpaceAvailable(BodyPipe::Pointer) = 0;
     virtual void noteBodyConsumerAborted(BodyPipe::Pointer) = 0;
 
     bool handleRequestBodyData();
 
-    /// Forward future client requests using the given server connection.
-    /// Optionally, monitor pinned server connection for remote-end closures.
-    void pinConnection(const Comm::ConnectionPointer &pinServerConn, HttpRequest *request, CachePeer *peer, bool auth, bool monitor = true);
+    /// parameters for the async notePinnedConnectionBecameIdle() call
+    class PinnedIdleContext
+    {
+    public:
+        PinnedIdleContext(const Comm::ConnectionPointer &conn, const HttpRequest::Pointer &req): connection(conn), request(req) {}
+
+        Comm::ConnectionPointer connection; ///< to-server connection to be pinned
+        HttpRequest::Pointer request; ///< to-server request that initiated serverConnection
+    };
+
+    /// Called when a pinned connection becomes available for forwarding the next request.
+    void notePinnedConnectionBecameIdle(PinnedIdleContext pic);
+    /// Forward future client requests using the given to-server connection.
+    /// The connection is still being used by the current client request.
+    void pinBusyConnection(const Comm::ConnectionPointer &pinServerConn, const HttpRequest::Pointer &request);
     /// Undo pinConnection() and, optionally, close the pinned connection.
     void unpinConnection(const bool andClose);
     /// Returns validated pinnned server connection (and stops its monitoring).
     Comm::ConnectionPointer borrowPinnedConnection(HttpRequest *request, const CachePeer *aPeer);
     /**
      * Checks if there is pinning info if it is valid. It can close the server side connection
@@ -208,13 +225,13 @@
 
     /// Called when a peek-and-splice step finished. For example after
     /// server SSL certificates received and fake server SSL certificates
     /// generated
     void doPeekAndSpliceStep();
     /// called by FwdState when it is done bumping the server
-    void httpsPeeked(Comm::ConnectionPointer serverConnection);
+    void httpsPeeked(PinnedIdleContext pic);
 
     /// Splice a bumped client connection on peek-and-splice mode
     bool splice();
 
     /// Start to create dynamic Security::ContextPointer for host or uses static port SSL context.
     void getSslContextStart();
@@ -238,12 +255,13 @@
             sslServerBump = srvBump;
         else
             assert(sslServerBump == srvBump);
     }
     const SBuf &sslCommonName() const {return sslCommonName_;}
     void resetSslCommonName(const char *name) {sslCommonName_ = name;}
+    const SBuf &tlsClientSni() const { return tlsClientSni_; }
     /// Fill the certAdaptParams with the required data for certificate adaptation
     /// and create the key for storing/retrieve the certificate to/from the cache
     void buildSslCertGenerationParams(Ssl::CertificateProperties &certProperties);
     /// Called when the client sends the first request on a bumped connection.
     /// Returns false if no [delayed] error should be written to the client.
     /// Otherwise, writes the error to the client and returns true. Also checks
@@ -339,13 +357,13 @@
     virtual bool connFinishedWithConn(int size);
     virtual void checkLogging();
 
     void clientAfterReadingRequests();
     bool concurrentRequestQueueFilled() const;
 
-    void pinNewConnection(const Comm::ConnectionPointer &pinServer, HttpRequest *request, CachePeer *aPeer, bool auth);
+    void pinConnection(const Comm::ConnectionPointer &pinServerConn, const HttpRequest &request);
 
     /* PROXY protocol functionality */
     bool proxyProtocolValidateClient();
     bool parseProxyProtocolHeader();
     bool parseProxy1p0();
     bool parseProxy2p0();
@@ -366,12 +384,15 @@
     bool switchedToHttps_;
     bool parsingTlsHandshake; ///< whether we are getting/parsing TLS Hello bytes
 
     /// The SSL server host name appears in CONNECT request or the server ip address for the intercepted requests
     String sslConnectHostOrIp; ///< The SSL server host name as passed in the CONNECT request
     SBuf sslCommonName_; ///< CN name for SSL certificate generation
+
+    /// TLS client delivered SNI value. Empty string if none has been received.
+    SBuf tlsClientSni_;
     String sslBumpCertKey; ///< Key to use to store/retrieve generated certificate
 
     /// HTTPS server cert. fetching state for bump-ssl-server-first
     Ssl::ServerBump *sslServerBump;
     Ssl::CertSignAlgorithm signAlgorithm; ///< The signing algorithm to use
 #endif
@@ -415,8 +436,10 @@
 
 /* TODO: Move to HttpServer. Warning: Move requires large code nonchanges! */
 Http::Stream *parseHttpRequest(ConnStateData *, const Http1::RequestParserPointer &);
 void clientProcessRequest(ConnStateData *, const Http1::RequestParserPointer &, Http::Stream *);
 void clientPostHttpsAccept(ConnStateData *);
 
+std::ostream &operator <<(std::ostream &os, const ConnStateData::PinnedIdleContext &pic);
+
 #endif /* SQUID_CLIENTSIDE_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/client_side_reply.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/client_side_reply.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/client_side_reply.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/client_side_reply.cc	2017-07-02 16:41:18.000000000 +0800
@@ -86,12 +86,13 @@
     lookup_type(NULL),
 #endif
     ourNode(NULL),
     reply(NULL),
     old_entry(NULL),
     old_sc(NULL),
+    old_lastmod(-1),
     deleting(false),
     collapsedRevalidation(crNone)
 {
     *tempbuf = 0;
 }
 
@@ -201,12 +202,14 @@
 clientReplyContext::saveState()
 {
     assert(old_sc == NULL);
     debugs(88, 3, "clientReplyContext::saveState: saving store context");
     old_entry = http->storeEntry();
     old_sc = sc;
+    old_lastmod = http->request->lastmod;
+    old_etag = http->request->etag;
     old_reqsize = reqsize;
     tempBuffer.offset = reqofs;
     /* Prevent accessing the now saved entries */
     http->storeEntry(NULL);
     sc = NULL;
     reqsize = 0;
@@ -220,15 +223,19 @@
     debugs(88, 3, "clientReplyContext::restoreState: Restoring store context");
     removeClientStoreReference(&sc, http);
     http->storeEntry(old_entry);
     sc = old_sc;
     reqsize = old_reqsize;
     reqofs = tempBuffer.offset;
+    http->request->lastmod = old_lastmod;
+    http->request->etag = old_etag;
     /* Prevent accessed the old saved entries */
     old_entry = NULL;
     old_sc = NULL;
+    old_lastmod = -1;
+    old_etag.clean();
     old_reqsize = 0;
     tempBuffer.offset = 0;
 }
 
 void
 clientReplyContext::startError(ErrorState * err)
@@ -412,14 +419,14 @@
     if (http->storeEntry() == NULL)
         return;
 
     if (result.flags.error && !EBIT_TEST(http->storeEntry()->flags, ENTRY_ABORTED))
         return;
 
-    if (collapsedRevalidation == crSlave && EBIT_TEST(http->storeEntry()->flags, KEY_PRIVATE)) {
-        debugs(88, 3, "CF slave hit private " << *http->storeEntry() << ". MISS");
+    if (collapsedRevalidation == crSlave && !http->storeEntry()->mayStartHitting()) {
+        debugs(88, 3, "CF slave hit private non-shareable " << *http->storeEntry() << ". MISS");
         // restore context to meet processMiss() expectations
         restoreState();
         http->logType = LOG_TCP_MISS;
         processMiss();
         return;
     }
@@ -545,13 +552,13 @@
         return;
     }
 
     // The previously identified hit suddenly became unsharable!
     // This is common for collapsed forwarding slaves but might also
     // happen to regular hits because we are called asynchronously.
-    if (EBIT_TEST(e->flags, KEY_PRIVATE)) {
+    if (!e->mayStartHitting()) {
         debugs(88, 3, "unsharable " << *e << ". MISS");
         http->logType = LOG_TCP_MISS;
         processMiss();
         return;
     }
 
@@ -743,16 +750,19 @@
     /** Check if 'only-if-cached' flag is set. Action if so. */
     if (http->onlyIfCached()) {
         processOnlyIfCachedMiss();
         return;
     }
 
+    Comm::ConnectionPointer conn = http->getConn() != nullptr ? http->getConn()->clientConnection : nullptr;
     /// Deny loops
     if (r->flags.loopDetected) {
         http->al->http.code = Http::scForbidden;
-        err = clientBuildError(ERR_ACCESS_DENIED, Http::scForbidden, NULL, http->getConn()->clientConnection->remote, http->request);
+        Ip::Address tmp_noaddr;
+        tmp_noaddr.setNoAddr();
+        err = clientBuildError(ERR_ACCESS_DENIED, Http::scForbidden, nullptr, conn ? conn->remote : tmp_noaddr, http->request);
         createStoreEntry(r->method, RequestFlags());
         errorAppendEntry(http->storeEntry(), err);
         triggerInitialStoreRead();
         return;
     } else {
         assert(http->out.offset == 0);
@@ -769,13 +779,12 @@
             return;
         }
 
         assert(r->clientConnectionManager == http->getConn());
 
         /** Start forwarding to get the new object from network */
-        Comm::ConnectionPointer conn = http->getConn() != NULL ? http->getConn()->clientConnection : NULL;
         FwdState::Start(conn, http->storeEntry(), r, http->al);
     }
 }
 
 /**
  * client issued a request with an only-if-cached cache-control directive;
@@ -785,14 +794,17 @@
  */
 void
 clientReplyContext::processOnlyIfCachedMiss()
 {
     debugs(88, 4, http->request->method << ' ' << http->uri);
     http->al->http.code = Http::scGatewayTimeout;
+    Ip::Address tmp_noaddr;
+    tmp_noaddr.setNoAddr();
     ErrorState *err = clientBuildError(ERR_ONLY_IF_CACHED_MISS, Http::scGatewayTimeout, NULL,
-                                       http->getConn()->clientConnection->remote, http->request);
+                                       http->getConn() ? http->getConn()->clientConnection->remote : tmp_noaddr,
+                                       http->request);
     removeClientStoreReference(&sc, http);
     startError(err);
 }
 
 /// process conditional request from client
 bool
@@ -858,13 +870,13 @@
         return false; // internal content "hits" cannot be blocked
 
     if (const HttpReply *rep = http->storeEntry()->getReply()) {
         std::unique_ptr<ACLFilledChecklist> chl(clientAclChecklistCreate(Config.accessList.sendHit, http));
         chl->reply = const_cast<HttpReply*>(rep); // ACLChecklist API bug
         HTTPMSGLOCK(chl->reply);
-        return chl->fastCheck() != ACCESS_ALLOWED; // when in doubt, block
+        return !chl->fastCheck().allowed(); // when in doubt, block
     }
 
     // This does not happen, I hope, because we are called from CacheHit, which
     // is called via a storeClientCopy() callback, and store should initialize
     // the reply before calling that callback.
     debugs(88, 3, "Missing reply!");
@@ -964,14 +976,17 @@
 clientReplyContext::purgeFoundObject(StoreEntry *entry)
 {
     assert (entry && !entry->isNull());
 
     if (EBIT_TEST(entry->flags, ENTRY_SPECIAL)) {
         http->logType = LOG_TCP_DENIED;
+        Ip::Address tmp_noaddr;
+        tmp_noaddr.setNoAddr(); // TODO: make a global const
         ErrorState *err = clientBuildError(ERR_ACCESS_DENIED, Http::scForbidden, NULL,
-                                           http->getConn()->clientConnection->remote, http->request);
+                                           http->getConn() ? http->getConn()->clientConnection->remote : tmp_noaddr,
+                                           http->request);
         startError(err);
         return; // XXX: leaking unused entry if some store does not keep it
     }
 
     StoreIOBuffer localTempBuffer;
     /* Swap in the metadata */
@@ -1002,13 +1017,16 @@
 {
     debugs(88, 3, "Config2.onoff.enable_purge = " <<
            Config2.onoff.enable_purge);
 
     if (!Config2.onoff.enable_purge) {
         http->logType = LOG_TCP_DENIED;
-        ErrorState *err = clientBuildError(ERR_ACCESS_DENIED, Http::scForbidden, NULL, http->getConn()->clientConnection->remote, http->request);
+        Ip::Address tmp_noaddr;
+        tmp_noaddr.setNoAddr();
+        ErrorState *err = clientBuildError(ERR_ACCESS_DENIED, Http::scForbidden, NULL,
+                                           http->getConn() ? http->getConn()->clientConnection->remote : tmp_noaddr, http->request);
         startError(err);
         return;
     }
 
     /* Release both IP cache */
     ipcacheInvalidate(http->request->url.host());
@@ -1221,21 +1239,23 @@
 int
 clientHttpRequestStatus(int fd, ClientHttpRequest const *http)
 {
 #if SIZEOF_INT64_T == 4
     if (http->out.size > 0x7FFF0000) {
         debugs(88, DBG_IMPORTANT, "WARNING: closing FD " << fd << " to prevent out.size counter overflow");
-        debugs(88, DBG_IMPORTANT, "\tclient " << http->getConn()->peer);
+        if (http->getConn())
+            debugs(88, DBG_IMPORTANT, "\tclient " << http->getConn()->peer);
         debugs(88, DBG_IMPORTANT, "\treceived " << http->out.size << " bytes");
         debugs(88, DBG_IMPORTANT, "\tURI " << http->log_uri);
         return 1;
     }
 
     if (http->out.offset > 0x7FFF0000) {
         debugs(88, DBG_IMPORTANT, "WARNING: closing FD " << fd < " to prevent out.offset counter overflow");
-        debugs(88, DBG_IMPORTANT, "\tclient " << http->getConn()->peer);
+        if (http->getConn())
+            debugs(88, DBG_IMPORTANT, "\tclient " << http->getConn()->peer);
         debugs(88, DBG_IMPORTANT, "\treceived " << http->out.size << " bytes, offset " << http->out.offset);
         debugs(88, DBG_IMPORTANT, "\tURI " << http->log_uri);
         return 1;
     }
 
 #endif
@@ -1849,18 +1869,20 @@
         assert(http->logType.oldType == LOG_TCP_HIT);
         reqofs = 0;
         /* guarantee nothing has been sent yet! */
         assert(http->out.size == 0);
         assert(http->out.offset == 0);
 
-        if (Ip::Qos::TheConfig.isHitTosActive()) {
-            Ip::Qos::doTosLocalHit(http->getConn()->clientConnection);
-        }
+        if (ConnStateData *conn = http->getConn()) {
+            if (Ip::Qos::TheConfig.isHitTosActive()) {
+                Ip::Qos::doTosLocalHit(conn->clientConnection);
+            }
 
-        if (Ip::Qos::TheConfig.isHitNfmarkActive()) {
-            Ip::Qos::doNfmarkLocalHit(http->getConn()->clientConnection);
+            if (Ip::Qos::TheConfig.isHitNfmarkActive()) {
+                Ip::Qos::doNfmarkLocalHit(conn->clientConnection);
+            }
         }
 
         localTempBuffer.offset = reqofs;
         localTempBuffer.length = getNextNode()->readBuffer.length;
         localTempBuffer.data = getNextNode()->readBuffer.data;
         storeClientCopy(sc, http->storeEntry(), localTempBuffer, CacheHit, this);
@@ -1968,15 +1990,17 @@
 
 /// send 412 (Precondition Failed) to client
 void
 clientReplyContext::sendPreconditionFailedError()
 {
     http->logType = LOG_TCP_HIT;
+    Ip::Address tmp_noaddr;
+    tmp_noaddr.setNoAddr();
     ErrorState *const err =
         clientBuildError(ERR_PRECONDITION_FAILED, Http::scPreconditionFailed,
-                         NULL, http->getConn()->clientConnection->remote, http->request);
+                         NULL, http->getConn() ? http->getConn()->clientConnection->remote : tmp_noaddr, http->request);
     removeClientStoreReference(&sc, http);
     HTTPMSGUNLOCK(reply);
     startError(err);
 }
 
 /// send 304 (Not Modified) to client
@@ -2069,13 +2093,13 @@
 clientReplyContext::processReplyAccessResult(const allow_t &accessAllowed)
 {
     debugs(88, 2, "The reply for " << http->request->method
            << ' ' << http->uri << " is " << accessAllowed << ", because it matched "
            << (AclMatchedName ? AclMatchedName : "NO ACL's"));
 
-    if (accessAllowed != ACCESS_ALLOWED) {
+    if (!accessAllowed.allowed()) {
         ErrorState *err;
         err_type page_id;
         page_id = aclGetDenyInfoPage(&Config.denyInfoList, AclMatchedName, 1);
 
         http->logType = LOG_TCP_DENIED_REPLY;
 
@@ -2269,13 +2293,14 @@
     /*
      * For erroneous requests, we might not have a h->request,
      * so make a fake one.
      */
 
     if (http->request == NULL) {
-        http->request = new HttpRequest(m, AnyP::PROTO_NONE, "http", null_string);
+        const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initClient);
+        http->request = new HttpRequest(m, AnyP::PROTO_NONE, "http", null_string, mx);
         HTTPMSGLOCK(http->request);
     }
 
     StoreEntry *e = storeCreateEntry(storeId(), http->log_uri, reqFlags, m);
 
     // Make entry collapsable ASAP, to increase collapsing chances for others,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/client_side_reply.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/client_side_reply.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/client_side_reply.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/client_side_reply.h	2017-07-02 16:41:18.000000000 +0800
@@ -128,13 +128,17 @@
     void sendBodyTooLargeError();
     void sendPreconditionFailedError();
     void sendNotModified();
     void sendNotModifiedOrPreconditionFailedError();
 
     StoreEntry *old_entry;
-    store_client *old_sc;   /* ... for entry to be validated */
+    /* ... for entry to be validated */
+    store_client *old_sc;
+    time_t old_lastmod;
+    String old_etag;
+
     bool deleting;
 
     typedef enum {
         crNone = 0, ///< collapsed revalidation is not allowed for this context
         crInitiator, ///< we initiated collapsed revalidation request
         crSlave ///< we collapsed on the existing revalidation request
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/client_side_request.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/client_side_request.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/client_side_request.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/client_side_request.cc	2017-07-02 16:41:18.000000000 +0800
@@ -317,13 +317,13 @@
  * TODO: Pass in the buffers to be used in the inital Read request, as they are
  * determined by the user
  */
 int
 clientBeginRequest(const HttpRequestMethod& method, char const *url, CSCB * streamcallback,
                    CSD * streamdetach, ClientStreamData streamdata, HttpHeader const *header,
-                   char *tailbuf, size_t taillen)
+                   char *tailbuf, size_t taillen, const MasterXaction::Pointer &mx)
 {
     size_t url_sz;
     ClientHttpRequest *http = new ClientHttpRequest(NULL);
     HttpRequest *request;
     StoreIOBuffer tempBuffer;
     if (http->al != NULL)
@@ -343,21 +343,21 @@
     http->flags.accel = true;
     /* allow size for url rewriting */
     url_sz = strlen(url) + Config.appendDomainLen + 5;
     http->uri = (char *)xcalloc(url_sz, 1);
     strcpy(http->uri, url);
 
-    if ((request = HttpRequest::CreateFromUrl(http->uri, method)) == NULL) {
+    if ((request = HttpRequest::FromUrl(http->uri, mx, method)) == NULL) {
         debugs(85, 5, "Invalid URL: " << http->uri);
         return -1;
     }
 
     /*
-     * now update the headers in request with our supplied headers. urlParse
-     * should return a blank header set, but we use Update to be sure of
-     * correctness.
+     * now update the headers in request with our supplied headers.
+     * HttpRequest::FromUrl() should return a blank header set, but
+     * we use Update to be sure of correctness.
      */
     if (header)
         request->header.update(header);
 
     http->log_uri = xstrdup(urlCanonicalClean(request));
 
@@ -365,14 +365,12 @@
 
     /*
      * build new header list *? TODO
      */
     request->flags.accelerated = http->flags.accel;
 
-    request->flags.internalClient = true;
-
     /* this is an internally created
      * request, not subject to acceleration
      * target overrides */
     /*
      * FIXME? Do we want to detect and handle internal requests of internal
      * objects ?
@@ -448,19 +446,13 @@
     if (!calloutContext->httpStateIsValid())
         return;
 
     ClientHttpRequest *http = calloutContext->http;
     HttpRequest *request = http->request;
 
-    /*
-     * answer should be be ACCESS_ALLOWED or ACCESS_DENIED if we are
-     * called as a result of ACL checks, or -1 if we are called when
-     * there's nothing left to do.
-     */
-    if (answer == ACCESS_ALLOWED &&
-            request->x_forwarded_for_iterator.size () != 0) {
+    if (answer.allowed() && request->x_forwarded_for_iterator.size() != 0) {
 
         /*
          * Remove the last comma-delimited element from the
          * x_forwarded_for_iterator and use it to repeat the cycle.
          */
         const char *p;
@@ -496,14 +488,13 @@
                 /* override the default src_addr tested if we have to go deeper than one level into XFF */
                 Filled(calloutContext->acl_checklist)->src_addr = request->indirect_client_addr;
             }
             calloutContext->acl_checklist->nonBlockingCheck(clientFollowXForwardedForCheck, data);
             return;
         }
-    } /*if (answer == ACCESS_ALLOWED &&
-        request->x_forwarded_for_iterator.size () != 0)*/
+    }
 
     /* clean up, and pass control to clientAccessCheck */
     if (Config.onoff.log_uses_indirect_client) {
         /*
         * Ensure that the access log shows the indirect client
         * instead of the direct client.
@@ -512,13 +503,13 @@
         conn->log_addr = request->indirect_client_addr;
         http->al->cache.caddr = conn->log_addr;
     }
     request->x_forwarded_for_iterator.clean();
     request->flags.done_follow_x_forwarded_for = true;
 
-    if (answer != ACCESS_ALLOWED && answer != ACCESS_DENIED) {
+    if (!answer.someRuleMatched()) {
         debugs(28, DBG_CRITICAL, "ERROR: Processing X-Forwarded-For. Stopping at IP address: " << request->indirect_client_addr );
     }
 
     /* process actual access ACL as normal. */
     calloutContext->clientAccessCheck();
 }
@@ -768,13 +759,13 @@
     if (http->getConn() != NULL && http->getConn()->getAuth() != NULL)
         proxy_auth_msg = http->getConn()->getAuth()->denyMessage("<null>");
     else if (http->request->auth_user_request != NULL)
         proxy_auth_msg = http->request->auth_user_request->denyMessage("<null>");
 #endif
 
-    if (answer != ACCESS_ALLOWED) {
+    if (!answer.allowed()) {
         // auth has a grace period where credentials can be expired but okay not to challenge.
 
         /* Send an auth challenge or error */
         // XXX: do we still need aclIsProxyAuth() ?
         bool auth_challenge = (answer == ACCESS_AUTH_REQUIRED || aclIsProxyAuth(AclMatchedName));
         debugs(85, 5, "Access Denied: " << http->uri);
@@ -879,13 +870,13 @@
 clientRedirectAccessCheckDone(allow_t answer, void *data)
 {
     ClientRequestContext *context = (ClientRequestContext *)data;
     ClientHttpRequest *http = context->http;
     context->acl_checklist = NULL;
 
-    if (answer == ACCESS_ALLOWED)
+    if (answer.allowed())
         redirectStart(http, clientRedirectDoneWrapper, context);
     else {
         Helper::Reply const nilReply(Helper::Error);
         context->clientRedirectDone(nilReply);
     }
 }
@@ -910,13 +901,13 @@
 clientStoreIdAccessCheckDone(allow_t answer, void *data)
 {
     ClientRequestContext *context = static_cast<ClientRequestContext *>(data);
     ClientHttpRequest *http = context->http;
     context->acl_checklist = NULL;
 
-    if (answer == ACCESS_ALLOWED)
+    if (answer.allowed())
         storeIdStart(http, clientStoreIdDoneWrapper, context);
     else {
         debugs(85, 3, "access denied expected ERR reply handling: " << answer);
         Helper::Reply const nilReply(Helper::Error);
         context->clientStoreIdDone(nilReply);
     }
@@ -1270,16 +1261,16 @@
         } else {
             // URL-rewrite wanted. Ew.
             urlNote = reply.notes.findFirst("rewrite-url");
 
             // prevent broken helpers causing too much damage. If old URL == new URL skip the re-write.
             if (urlNote != NULL && strcmp(urlNote, http->uri)) {
-                // XXX: validate the URL properly *without* generating a whole new request object right here.
-                // XXX: the clone() should be done only AFTER we know the new URL is valid.
-                HttpRequest *new_request = old_request->clone();
-                if (urlParse(old_request->method, const_cast<char*>(urlNote), new_request)) {
+                URL tmpUrl;
+                if (tmpUrl.parse(old_request->method, const_cast<char*>(urlNote))) {
+                    HttpRequest *new_request = old_request->clone();
+                    new_request->url = tmpUrl;
                     debugs(61, 2, "URL-rewriter diverts URL from " << old_request->effectiveRequestUri() << " to " << new_request->effectiveRequestUri());
 
                     // update the new request to flag the re-writing was done on it
                     new_request->flags.redirected = true;
 
                     // unlink bodypipe from the old request. Not needed there any longer.
@@ -1295,13 +1286,12 @@
                     HTTPMSGUNLOCK(old_request);
                     http->request = new_request;
                     HTTPMSGLOCK(http->request);
                 } else {
                     debugs(85, DBG_CRITICAL, "ERROR: URL-rewrite produces invalid request: " <<
                            old_request->method << " " << urlNote << " " << old_request->http_ver);
-                    delete new_request;
                 }
             }
         }
     }
     break;
     }
@@ -1396,13 +1386,13 @@
 }
 
 void
 ClientRequestContext::checkNoCacheDone(const allow_t &answer)
 {
     acl_checklist = NULL;
-    if (answer == ACCESS_DENIED) {
+    if (answer.denied()) {
         http->request->flags.noCache = true; // dont read reply from cache
         http->request->flags.cachable = false; // dont store reply into cache
     }
     http->doCallouts();
 }
 
@@ -1495,13 +1485,13 @@
 void
 ClientRequestContext::sslBumpAccessCheckDone(const allow_t &answer)
 {
     if (!httpStateIsValid())
         return;
 
-    const Ssl::BumpMode bumpMode = answer == ACCESS_ALLOWED ?
+    const Ssl::BumpMode bumpMode = answer.allowed() ?
                                    static_cast<Ssl::BumpMode>(answer.kind) : Ssl::bumpSplice;
     http->sslBumpNeed(bumpMode); // for processRequest() to bump if needed
     http->al->ssl.bumpMode = bumpMode; // for logging
 
     if (bumpMode == Ssl::bumpTerminate) {
         const Comm::ConnectionPointer clientConn = http->getConn() ? http->getConn()->clientConnection : nullptr;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/client_side_request.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/client_side_request.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/client_side_request.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/client_side_request.h	2017-07-02 16:41:18.000000000 +0800
@@ -10,12 +10,13 @@
 #define SQUID_CLIENTSIDEREQUEST_H
 
 #include "AccessLogEntry.h"
 #include "acl/forward.h"
 #include "client_side.h"
 #include "clientStream.h"
+#include "http/forward.h"
 #include "HttpHeaderRange.h"
 #include "LogTags.h"
 
 #if USE_ADAPTATION
 #include "adaptation/forward.h"
 #include "adaptation/Initiator.h"
@@ -24,13 +25,13 @@
 
 class ClientRequestContext;
 class ConnStateData;
 class MemObject;
 
 /* client_side_request.c - client side request related routines (pure logic) */
-int clientBeginRequest(const HttpRequestMethod&, char const *, CSCB *, CSD *, ClientStreamData, HttpHeader const *, char *, size_t);
+int clientBeginRequest(const HttpRequestMethod&, char const *, CSCB *, CSD *, ClientStreamData, HttpHeader const *, char *, size_t, const MasterXactionPointer &);
 
 class ClientHttpRequest
 #if USE_ADAPTATION
     : public Adaptation::Initiator, // to start adaptation transactions
       public BodyConsumer     // to receive reply bodies in request satisf. mode
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/comm/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/comm/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/comm/Makefile.in	2017-06-01 20:58:52.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/comm/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/comm/TcpAcceptor.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/comm/TcpAcceptor.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/comm/TcpAcceptor.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/comm/TcpAcceptor.cc	2017-07-02 16:41:18.000000000 +0800
@@ -325,13 +325,13 @@
         return;
     }
 
     if (theCallSub != NULL) {
         AsyncCall::Pointer call = theCallSub->callback();
         CommAcceptCbParams &params = GetCommParams<CommAcceptCbParams>(call);
-        params.xaction = new MasterXaction;
+        params.xaction = new MasterXaction(XactionInitiator::initClient);
         params.xaction->squidPort = listenPort_;
         params.fd = conn->fd;
         params.conn = params.xaction->tcpClient = newConnDetails;
         params.flag = flag;
         params.xerrno = errcode;
         ScheduleCallHere(call);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/defines.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/defines.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/defines.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/defines.h	2017-07-02 16:41:18.000000000 +0800
@@ -90,14 +90,12 @@
 
 #define AUTHENTICATE_AV_FACTOR 1000
 /* AUTHENTICATION */
 
 #define NTLM_CHALLENGE_SZ 300
 
-#define  CONNECT_PORT        443
-
 #define current_stacksize(stack) ((stack)->top - (stack)->base)
 
 /* logfile status */
 #define LOG_ENABLE  1
 #define LOG_DISABLE 0
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/DelayId.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/DelayId.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/DelayId.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/DelayId.cc	2017-07-02 16:41:18.000000000 +0800
@@ -98,13 +98,13 @@
             ch.src_addr = r->client_addr;
         ch.my_addr = r->my_addr;
 
         if (http->getConn() != NULL)
             ch.conn(http->getConn());
 
-        if (DelayPools::delay_data[pool].theComposite().getRaw() && ch.fastCheck() == ACCESS_ALLOWED) {
+        if (DelayPools::delay_data[pool].theComposite().getRaw() && ch.fastCheck().allowed()) {
 
             DelayId result (pool + 1);
             CompositePoolNode::CompositeSelectionDetails details;
             details.src_addr = ch.src_addr;
 #if USE_AUTH
             details.user = r->auth_user_request;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/DiskIO/AIO/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/DiskIO/AIO/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/DiskIO/AIO/Makefile.in	2017-06-01 20:53:26.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/DiskIO/AIO/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/DiskIO/Blocking/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/DiskIO/Blocking/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/DiskIO/Blocking/Makefile.in	2017-06-01 20:53:29.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/DiskIO/Blocking/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/DiskIO/DiskDaemon/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/DiskIO/DiskDaemon/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/DiskIO/DiskDaemon/Makefile.in	2017-06-01 20:53:34.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/DiskIO/DiskDaemon/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/DiskIO/DiskThreads/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/DiskIO/DiskThreads/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/DiskIO/DiskThreads/Makefile.in	2017-06-01 20:53:43.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/DiskIO/DiskThreads/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/DiskIO/IpcIo/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/DiskIO/IpcIo/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/DiskIO/IpcIo/Makefile.in	2017-06-01 20:53:52.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/DiskIO/IpcIo/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/DiskIO/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/DiskIO/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/DiskIO/Makefile.in	2017-06-01 20:53:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/DiskIO/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/DiskIO/Mmapped/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/DiskIO/Mmapped/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/DiskIO/Mmapped/Makefile.in	2017-06-01 20:54:02.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/DiskIO/Mmapped/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/dns/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/dns/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/dns/Makefile.in	2017-06-01 20:58:58.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/dns/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/Downloader.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/Downloader.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/Downloader.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/Downloader.cc	2017-07-02 16:41:18.000000000 +0800
@@ -60,17 +60,18 @@
 void
 Downloader::CbDialer::print(std::ostream &os) const
 {
     os << " Http Status:" << status << Raw("body data", object.rawContent(), 64).hex();
 }
 
-Downloader::Downloader(SBuf &url, AsyncCall::Pointer &aCallback, unsigned int level):
+Downloader::Downloader(SBuf &url, AsyncCall::Pointer &aCallback, const XactionInitiator initiator, unsigned int level):
     AsyncJob("Downloader"),
     url_(url),
     callback_(aCallback),
-    level_(level)
+    level_(level),
+    initiator_(initiator)
 {
 }
 
 Downloader::~Downloader()
 {
     debugs(33, 6, this);
@@ -125,22 +126,22 @@
 bool
 Downloader::buildRequest()
 {
     const HttpRequestMethod method = Http::METHOD_GET;
 
     char *uri = xstrdup(url_.c_str());
-    HttpRequest *const request = HttpRequest::CreateFromUrl(uri, method);
+    const MasterXaction::Pointer mx = new MasterXaction(initiator_);
+    HttpRequest *const request = HttpRequest::FromUrl(uri, mx, method);
     if (!request) {
         debugs(33, 5, "Invalid URI: " << url_);
         xfree(uri);
         return false; //earlyError(...)
     }
     request->http_ver = Http::ProtocolVersion();
     request->header.putStr(Http::HdrType::HOST, request->url.host());
     request->header.putTime(Http::HdrType::DATE, squid_curtime);
-    request->flags.internalClient = true;
     request->client_addr.setNoAddr();
 #if FOLLOW_X_FORWARDED_FOR
     request->indirect_client_addr.setNoAddr();
 #endif /* FOLLOW_X_FORWARDED_FOR */
     request->my_addr.setNoAddr();   /* undefined for internal requests */
     request->my_addr.port(0);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/Downloader.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/Downloader.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/Downloader.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/Downloader.h	2017-07-02 16:41:18.000000000 +0800
@@ -11,12 +11,13 @@
 
 #include "base/AsyncJob.h"
 #include "defines.h"
 #include "http/forward.h"
 #include "http/StatusCode.h"
 #include "sbuf/SBuf.h"
+#include "XactionInitiator.h"
 
 class ClientHttpRequest;
 class StoreIOBuffer;
 class clientStreamNode;
 class DownloaderContext;
 typedef RefCount<DownloaderContext> DownloaderContextPointer;
@@ -42,13 +43,13 @@
         virtual void print(std::ostream &os) const;
 
         SBuf object;
         Http::StatusCode status;
     };
 
-    Downloader(SBuf &url, AsyncCall::Pointer &aCallback, unsigned int level = 0);
+    Downloader(SBuf &url, AsyncCall::Pointer &aCallback, const XactionInitiator initiator, unsigned int level = 0);
     virtual ~Downloader();
     virtual void swanSong();
 
     /// delays destruction to protect doCallouts()
     void downloadFinished();
 
@@ -72,12 +73,14 @@
     static const size_t MaxObjectSize = 1*1024*1024;
 
     SBuf url_; ///< the url to download
     AsyncCall::Pointer callback_; ///< callback to call when download finishes
     SBuf object_; ///< the object body data
     const unsigned int level_; ///< holds the nested downloads level
+    /// The initiator of the download request.
+    XactionInitiator initiator_;
 
     /// Pointer to an object that stores the clientStream required info
     DownloaderContextPointer context_;
 };
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/esi/Include.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/esi/Include.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/esi/Include.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/esi/Include.cc	2017-07-02 16:41:18.000000000 +0800
@@ -296,14 +296,14 @@
     vars->feedData(url, strlen (url));
 
     /* tempUrl is eaten by the request */
     char const *tempUrl = vars->extractChar ();
 
     debugs(86, 5, "ESIIncludeStart: Starting subrequest with url '" << tempUrl << "'");
-
-    if (clientBeginRequest(Http::METHOD_GET, tempUrl, esiBufferRecipient, esiBufferDetach, stream.getRaw(), &tempheaders, stream->localbuffer->buf, HTTP_REQBUF_SZ)) {
+    const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initEsi);
+    if (clientBeginRequest(Http::METHOD_GET, tempUrl, esiBufferRecipient, esiBufferDetach, stream.getRaw(), &tempheaders, stream->localbuffer->buf, HTTP_REQBUF_SZ, mx)) {
         debugs(86, DBG_CRITICAL, "starting new ESI subrequest failed");
     }
 
     tempheaders.clean();
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/esi/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/esi/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/esi/Makefile.in	2017-06-01 20:59:03.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/esi/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/eui/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/eui/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/eui/Makefile.in	2017-06-01 20:59:10.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/eui/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/external_acl.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/external_acl.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/external_acl.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/external_acl.cc	2017-07-02 16:41:18.000000000 +0800
@@ -453,13 +453,13 @@
     if (cache_size <= 0)
         return false; // cache is disabled
 
     if (result == ACCESS_DUNNO)
         return false; // non-cacheable response
 
-    if ((result == ACCESS_ALLOWED ? ttl : negative_ttl) <= 0)
+    if ((result.allowed() ? ttl : negative_ttl) <= 0)
         return false; // not caching this type of response
 
     return true;
 }
 
 /******************************************************************
@@ -612,13 +612,13 @@
         debugs(82, 9, HERE << "No helper entry available");
 #if USE_AUTH
         if (acl->def->require_auth) {
             /* Make sure the user is authenticated */
             debugs(82, 3, HERE << acl->def->name << " check user authenticated.");
             const allow_t ti = AuthenticateAcl(ch);
-            if (ti != ACCESS_ALLOWED) {
+            if (!ti.allowed()) {
                 debugs(82, 2, HERE << acl->def->name << " user not authenticated (" << ti << ")");
                 return ti;
             }
             debugs(82, 3, HERE << acl->def->name << " user is authenticated.");
         }
 #endif
@@ -799,26 +799,26 @@
 static int
 external_acl_entry_expired(external_acl * def, const ExternalACLEntryPointer &entry)
 {
     if (def->cache_size <= 0 || entry->result == ACCESS_DUNNO)
         return 1;
 
-    if (entry->date + (entry->result == ACCESS_ALLOWED ? def->ttl : def->negative_ttl) < squid_curtime)
+    if (entry->date + (entry->result.allowed() ? def->ttl : def->negative_ttl) < squid_curtime)
         return 1;
     else
         return 0;
 }
 
 static int
 external_acl_grace_expired(external_acl * def, const ExternalACLEntryPointer &entry)
 {
     if (def->cache_size <= 0 || entry->result == ACCESS_DUNNO)
         return 1;
 
     int ttl;
-    ttl = entry->result == ACCESS_ALLOWED ? def->ttl : def->negative_ttl;
+    ttl = entry->result.allowed() ? def->ttl : def->negative_ttl;
     ttl = (ttl * (100 - def->grace)) / 100;
 
     if (entry->date + ttl <= squid_curtime)
         return 1;
     else
         return 0;
@@ -1146,23 +1146,12 @@
 {
     ACLFilledChecklist *checklist = Filled(static_cast<ACLChecklist*>(data));
     checklist->extacl_entry = result;
     checklist->resumeNonBlockingCheck(ExternalACLLookup::Instance());
 }
 
-/* This registers "external" in the registry. To do dynamic definitions
- * of external ACL's, rather than a static prototype, have a Prototype instance
- * prototype in the class that defines each external acl 'class'.
- * Then, then the external acl instance is created, it self registers under
- * it's name.
- * Be sure that clone is fully functional for that acl class though!
- */
-ACL::Prototype ACLExternal::RegistryProtoype(&ACLExternal::RegistryEntry_, "external");
-
-ACLExternal ACLExternal::RegistryEntry_("external");
-
 ACL *
 ACLExternal::clone() const
 {
     return new ACLExternal(*this);
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ExternalACL.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ExternalACL.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ExternalACL.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ExternalACL.h	2017-07-02 16:41:18.000000000 +0800
@@ -59,14 +59,12 @@
     virtual bool isProxyAuth() const;
     virtual SBufList dump() const;
     virtual bool valid () const;
     virtual bool empty () const;
 
 protected:
-    static Prototype RegistryProtoype;
-    static ACLExternal RegistryEntry_;
     external_acl_data *data;
     char const *class_;
 };
 
 void parse_externalAclHelper(external_acl **);
 void dump_externalAclHelper(StoreEntry * sentry, const char *name, const external_acl *);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/format/Format.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/format/Format.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/format/Format.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/format/Format.cc	2017-07-02 16:41:18.000000000 +0800
@@ -1233,15 +1233,17 @@
                 }
             }
             break;
 
         case LFT_SSL_CLIENT_SNI:
             if (al->request && al->request->clientConnectionManager.valid()) {
-                if (Ssl::ServerBump * srvBump = al->request->clientConnectionManager->serverBump()) {
-                    if (!srvBump->clientSni.isEmpty())
-                        out = srvBump->clientSni.c_str();
+                if (const ConnStateData *conn = al->request->clientConnectionManager.get()) {
+                    if (!conn->tlsClientSni().isEmpty()) {
+                        sb = conn->tlsClientSni();
+                        out = sb.c_str();
+                    }
                 }
             }
             break;
 
         case LFT_SSL_SERVER_CERT_ERRORS:
             if (al->request && al->request->clientConnectionManager.valid()) {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/format/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/format/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/format/Makefile.in	2017-06-01 20:59:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/format/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/format/Token.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/format/Token.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/format/Token.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/format/Token.cc	2017-07-02 16:41:18.000000000 +0800
@@ -207,13 +207,13 @@
 
     TokenTableEntry(NULL, LFT_NONE)           /* this must be last */
 };
 #endif
 
 #if USE_OPENSSL
-// SSL (ssl::) tokens
+// TLS/SSL (tls:: or ssl::) tokens
 static TokenTableEntry TokenTableSsl[] = {
     TokenTableEntry("bump_mode", LFT_SSL_BUMP_MODE),
     TokenTableEntry(">cert_subject", LFT_SSL_USER_CERT_SUBJECT),
     TokenTableEntry(">cert_issuer", LFT_SSL_USER_CERT_ISSUER),
     TokenTableEntry(">sni", LFT_SSL_CLIENT_SNI),
     TokenTableEntry("<cert_subject", LFT_SSL_SERVER_CERT_SUBJECT),
@@ -242,12 +242,13 @@
     TheConfig.registerTokens(String("adapt"),::Format::TokenTableAdapt);
 #endif
 #if ICAP_CLIENT
     TheConfig.registerTokens(String("icap"),::Format::TokenTableIcap);
 #endif
 #if USE_OPENSSL
+    TheConfig.registerTokens(String("tls"),::Format::TokenTableSsl);
     TheConfig.registerTokens(String("ssl"),::Format::TokenTableSsl);
 #endif
 }
 
 /// Scans a token table to see if the next token exists there
 /// returns a pointer to next unparsed byte and updates type member if found
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/fs/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/fs/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/fs/Makefile.in	2017-06-01 20:59:23.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/fs/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/fs/rock/RockSwapDir.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/fs/rock/RockSwapDir.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/fs/rock/RockSwapDir.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/fs/rock/RockSwapDir.cc	2017-07-02 16:41:18.000000000 +0800
@@ -134,13 +134,13 @@
         e.swap_status = SWAPOUT_WRITING; // even though another worker writes?
     }
 
     e.ping_status = PING_NONE;
 
     EBIT_CLR(e.flags, RELEASE_REQUEST);
-    EBIT_CLR(e.flags, KEY_PRIVATE);
+    e.clearPrivate();
     EBIT_SET(e.flags, ENTRY_VALIDATED);
 
     e.swap_dirn = index;
     e.swap_filen = filen;
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/fs/ufs/UFSSwapDir.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/fs/ufs/UFSSwapDir.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/fs/ufs/UFSSwapDir.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/fs/ufs/UFSSwapDir.cc	2017-07-02 16:41:18.000000000 +0800
@@ -809,13 +809,13 @@
     e->timestamp = timestamp;
     e->expires = expires;
     e->lastModified(lastmod);
     e->refcount = refcount;
     e->flags = newFlags;
     EBIT_CLR(e->flags, RELEASE_REQUEST);
-    EBIT_CLR(e->flags, KEY_PRIVATE);
+    e->clearPrivate();
     e->ping_status = PING_NONE;
     EBIT_CLR(e->flags, ENTRY_VALIDATED);
     mapBitSet(e->swap_filen);
     cur_size += fs.blksize * sizeInBlocks(e->swap_file_sz);
     ++n_disk_objects;
     e->hashInsert(key); /* do it after we clear KEY_PRIVATE */
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ftp/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ftp/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ftp/Makefile.in	2017-06-01 20:59:31.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ftp/Makefile.in	2017-07-02 16:41:26.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/FwdState.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/FwdState.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/FwdState.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/FwdState.cc	2017-07-02 16:41:18.000000000 +0800
@@ -251,13 +251,13 @@
             assert(err);
             errorAppendEntry(entry, err);
             err = NULL;
 #if USE_OPENSSL
             if (request->flags.sslPeek && request->clientConnectionManager.valid()) {
                 CallJobHere1(17, 4, request->clientConnectionManager, ConnStateData,
-                             ConnStateData::httpsPeeked, Comm::ConnectionPointer(NULL));
+                             ConnStateData::httpsPeeked, ConnStateData::PinnedIdleContext(Comm::ConnectionPointer(nullptr), request));
             }
 #endif
         } else {
             EBIT_CLR(entry->flags, ENTRY_FWD_HDR_WAIT);
             entry->complete();
             entry->releaseRequest();
@@ -321,13 +321,13 @@
          * Check if this host is allowed to fetch MISSES from us (miss_access).
          * Intentionally replace the src_addr automatically selected by the checklist code
          * we do NOT want the indirect client address to be tested here.
          */
         ACLFilledChecklist ch(Config.accessList.miss, request, NULL);
         ch.src_addr = request->client_addr;
-        if (ch.fastCheck() == ACCESS_DENIED) {
+        if (ch.fastCheck().denied()) {
             err_type page_id;
             page_id = aclGetDenyInfoPage(&Config.denyInfoList, AclMatchedName, 1);
 
             if (page_id == ERR_NONE)
                 page_id = ERR_FORWARDING_DENIED;
 
@@ -972,13 +972,13 @@
     }
 #endif
 
 #if USE_OPENSSL
     if (request->flags.sslPeek) {
         CallJobHere1(17, 4, request->clientConnectionManager, ConnStateData,
-                     ConnStateData::httpsPeeked, serverConnection());
+                     ConnStateData::httpsPeeked, ConnStateData::PinnedIdleContext(serverConnection(), request));
         unregister(serverConn); // async call owns it now
         complete(); // destroys us
         return;
     }
 #endif
 
@@ -1177,13 +1177,13 @@
 Comm::ConnectionPointer
 FwdState::pconnPop(const Comm::ConnectionPointer &dest, const char *domain)
 {
     bool retriable = checkRetriable();
     if (!retriable && Config.accessList.serverPconnForNonretriable) {
         ACLFilledChecklist ch(Config.accessList.serverPconnForNonretriable, request, NULL);
-        retriable = (ch.fastCheck() == ACCESS_ALLOWED);
+        retriable = ch.fastCheck().allowed();
     }
     // always call shared pool first because we need to close an idle
     // connection there if we have to use a standby connection.
     Comm::ConnectionPointer conn = fwdPconnPool->pop(dest, domain, retriable);
     if (!Comm::IsConnOpen(conn)) {
         // either there was no pconn to pop or this is not a retriable xaction
@@ -1229,25 +1229,25 @@
  */
 /// Checks for a TOS value to apply depending on the ACL
 tos_t
 aclMapTOS(acl_tos * head, ACLChecklist * ch)
 {
     for (acl_tos *l = head; l; l = l->next) {
-        if (!l->aclList || ch->fastCheck(l->aclList) == ACCESS_ALLOWED)
+        if (!l->aclList || ch->fastCheck(l->aclList).allowed())
             return l->tos;
     }
 
     return 0;
 }
 
 /// Checks for a netfilter mark value to apply depending on the ACL
 nfmark_t
 aclMapNfmark(acl_nfmark * head, ACLChecklist * ch)
 {
     for (acl_nfmark *l = head; l; l = l->next) {
-        if (!l->aclList || ch->fastCheck(l->aclList) == ACCESS_ALLOWED)
+        if (!l->aclList || ch->fastCheck(l->aclList).allowed())
             return l->nfmark;
     }
 
     return 0;
 }
 
@@ -1292,13 +1292,13 @@
     for (Acl::Address *l = Config.accessList.outgoing_address; l; l = l->next) {
 
         /* check if the outgoing address is usable to the destination */
         if (conn->remote.isIPv4() != l->addr.isIPv4()) continue;
 
         /* check ACLs for this outgoing address */
-        if (!l->aclList || ch.fastCheck(l->aclList) == ACCESS_ALLOWED) {
+        if (!l->aclList || ch.fastCheck(l->aclList).allowed()) {
             conn->local = l->addr;
             return;
         }
     }
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/helper/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/helper/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/helper/Makefile.in	2017-06-01 20:59:35.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/helper/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/htcp.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/htcp.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/htcp.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/htcp.cc	2017-07-02 16:41:18.000000000 +0800
@@ -675,13 +675,14 @@
      */
     *buf = '\0';
 
     // Parse the request
     method.HttpRequestMethodXXX(s->method);
 
-    s->request = HttpRequest::CreateFromUrl(s->uri, method == Http::METHOD_NONE ? HttpRequestMethod(Http::METHOD_GET) : method);
+    const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initHtcp);
+    s->request = HttpRequest::FromUrl(s->uri, mx, method == Http::METHOD_NONE ? HttpRequestMethod(Http::METHOD_GET) : method);
     return s;
 }
 
 /*
  * Unpack an HTCP DETAIL in place
  * This will overwrite any following AUTH block
@@ -771,13 +772,13 @@
     if (!acl)
         return false;
 
     ACLFilledChecklist checklist(acl, s->request.getRaw(), nullptr);
     checklist.src_addr = from;
     checklist.my_addr.setNoAddr();
-    return (checklist.fastCheck() == ACCESS_ALLOWED);
+    return checklist.fastCheck().allowed();
 }
 
 static void
 htcpTstReply(htcpDataHeader * dhdr, StoreEntry * e, htcpSpecifier * spec, Ip::Address &from)
 {
     static char pkt[8192];
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/Makefile.in	2017-06-01 20:59:43.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/one/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/one/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/one/Makefile.in	2017-06-01 20:59:47.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/one/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/one/Parser.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/one/Parser.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/one/Parser.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/one/Parser.cc	2017-07-02 16:41:18.000000000 +0800
@@ -44,13 +44,19 @@
          CharacterSet("VT,FF","\x0B\x0C") +
          CharacterSet::CR).rename("relaxed-WSP");
 
     return RelaxedDels;
 }
 
-/// characters used to separate HTTP fields
+const CharacterSet &
+Http::One::Parser::WhitespaceCharacters()
+{
+    return Config.onoff.relaxed_header_parser ?
+           RelaxedDelimiterCharacters() : CharacterSet::WSP;
+}
+
 const CharacterSet &
 Http::One::Parser::DelimiterCharacters()
 {
     return Config.onoff.relaxed_header_parser ?
            RelaxedDelimiterCharacters() : CharacterSet::SP;
 }
@@ -256,14 +262,27 @@
         return header;
     }
 
     return NULL;
 }
 
-#if USE_HTTP_VIOLATIONS
 int
-Http::One::Parser::violationLevel() const
+Http::One::ErrorLevel()
 {
     return Config.onoff.relaxed_header_parser < 0 ? DBG_IMPORTANT : 5;
 }
-#endif
+
+// BWS = *( SP / HTAB ) ; WhitespaceCharacters() may relax this RFC 7230 rule
+bool
+Http::One::ParseBws(Tokenizer &tok)
+{
+    if (const auto count = tok.skipAll(Parser::WhitespaceCharacters())) {
+        // Generating BWS is a MUST-level violation so warn about it as needed.
+        debugs(33, ErrorLevel(), "found " << count << " BWS octets");
+        // RFC 7230 says we MUST parse BWS, so we fall through even if
+        // Config.onoff.relaxed_header_parser is off.
+    }
+    // else we successfully "parsed" an empty BWS sequence
+
+    return true;
+}
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/one/Parser.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/one/Parser.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/one/Parser.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/one/Parser.h	2017-07-02 16:41:18.000000000 +0800
@@ -88,29 +88,32 @@
      */
     char *getHeaderField(const char *name);
 
     /// the remaining unprocessed section of buffer
     const SBuf &remaining() const {return buf_;}
 
-#if USE_HTTP_VIOLATIONS
-    /// the right debugs() level for parsing HTTP violation messages
-    int violationLevel() const;
-#endif
-
     /**
      * HTTP status code resulting from the parse process.
      * to be used on the invalid message handling.
      *
      * Http::scNone indicates incomplete parse,
      * Http::scOkay indicates no error,
      * other codes represent a parse error.
      */
     Http::StatusCode parseStatusCode;
 
-    /// the characters which are to be considered valid whitespace
-    /// (WSP / BSP / OWS)
+    /// Whitespace between regular protocol elements.
+    /// Seen in RFCs as OWS, RWS, BWS, SP/HTAB but may be "relaxed" by us.
+    /// See also: DelimiterCharacters().
+    static const CharacterSet &WhitespaceCharacters();
+
+    /// Whitespace between protocol elements in restricted contexts like
+    /// request line, status line, asctime-date, and credentials
+    /// Seen in RFCs as SP but may be "relaxed" by us.
+    /// See also: WhitespaceCharacters().
+    /// XXX: Misnamed and overused.
     static const CharacterSet &DelimiterCharacters();
 
 protected:
     /**
      * detect and skip the CRLF or (if tolerant) LF line terminator
      * consume from the tokenizer.
@@ -152,11 +155,18 @@
 
 private:
     void cleanMimePrefix();
     void unfoldMime();
 };
 
+/// skips and, if needed, warns about RFC 7230 BWS ("bad" whitespace)
+/// \returns true (always; unlike all the skip*() functions)
+bool ParseBws(Tokenizer &tok);
+
+/// the right debugs() level for logging HTTP violation messages
+int ErrorLevel();
+
 } // namespace One
 } // namespace Http
 
 #endif /*  _SQUID_SRC_HTTP_ONE_PARSER_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/one/RequestParser.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/one/RequestParser.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/one/RequestParser.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/one/RequestParser.cc	2017-07-02 16:41:18.000000000 +0800
@@ -11,18 +11,12 @@
 #include "http/one/RequestParser.h"
 #include "http/one/Tokenizer.h"
 #include "http/ProtocolVersion.h"
 #include "profiler/Profiler.h"
 #include "SquidConfig.h"
 
-// the right debugs() level for parsing errors
-inline static int
-ErrorLevel() {
-    return Config.onoff.relaxed_header_parser < 0 ? DBG_IMPORTANT : 5;
-}
-
 Http::One::RequestParser::RequestParser(bool preserveParsed) :
     Parser(),
     preserveParsed_(preserveParsed)
 {}
 
 Http1::Parser::size_type
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/one/TeChunkedParser.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/one/TeChunkedParser.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/one/TeChunkedParser.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/one/TeChunkedParser.cc	2017-07-02 16:41:18.000000000 +0800
@@ -102,35 +102,34 @@
     // else error
     throw TexcHere("corrupted chunk size");
     return false; // should not be reachable
 }
 
 /**
- * Parses a set of RFC 7230 section 4.1.1 chunk-ext
- * http://tools.ietf.org/html/rfc7230#section-4.1.1
+ * Parses chunk metadata suffix, looking for interesting extensions and/or
+ * getting to the line terminator. RFC 7230 section 4.1.1 and its Errata #4667:
  *
- *   chunk-ext      = *( ";" chunk-ext-name [ "=" chunk-ext-val ] )
+ *   chunk-ext = *( BWS  ";" BWS chunk-ext-name [ BWS "=" BWS chunk-ext-val ] )
  *   chunk-ext-name = token
  *   chunk-ext-val  = token / quoted-string
  *
  * ICAP 'use-original-body=N' extension is supported.
  */
 bool
 Http::One::TeChunkedParser::parseChunkExtension(Http1::Tokenizer &tok, bool skipKnown)
 {
-    // Bug 4492: IBM_HTTP_Server sends SP padding
-    if (auto n = tok.skipAll(CharacterSet::SP)) {
-        debugs(94, 3, "skipping " << n << " spurious whitespace at start of chunk extension");
-    }
-
     SBuf ext;
     SBuf value;
-    while (tok.skip(';') && tok.prefix(ext, CharacterSet::TCHAR)) {
+    while (
+        ParseBws(tok) && // Bug 4492: IBM_HTTP_Server sends SP after chunk-size
+        tok.skip(';') &&
+        ParseBws(tok) && // Bug 4492: ICAP servers send SP before chunk-ext-name
+        tok.prefix(ext, CharacterSet::TCHAR)) { // chunk-ext-name
 
         // whole value part is optional. if no '=' expect next chunk-ext
-        if (tok.skip('=')) {
+        if (ParseBws(tok) && tok.skip('=') && ParseBws(tok)) {
 
             if (!skipKnown) {
                 if (ext.cmp("use-original-body",17) == 0 && tok.int64(useOriginBody, 10)) {
                     debugs(94, 3, "Found chunk extension " << ext << "=" << useOriginBody);
                     buf_ = tok.remaining(); // parse checkpoint
                     continue;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/url_rewriters/fake/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/url_rewriters/fake/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/url_rewriters/fake/Makefile.in	2017-06-01 21:00:01.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/url_rewriters/fake/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/url_rewriters/LFS/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/url_rewriters/LFS/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/url_rewriters/LFS/Makefile.in	2017-06-01 20:59:51.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/url_rewriters/LFS/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/url_rewriters/LFS/url_lfs_rewrite.8 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/url_rewriters/LFS/url_lfs_rewrite.8
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/url_rewriters/LFS/url_lfs_rewrite.8	2017-06-02 05:57:33.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/url_rewriters/LFS/url_lfs_rewrite.8	2017-07-02 16:57:35.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 4.08 (Pod::Simple 3.32)
+.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -126,13 +126,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "URL_LFS_REWRITE 8"
-.TH URL_LFS_REWRITE 8 "2017-06-01" "perl v5.24.1" "User Contributed Perl Documentation"
+.TH URL_LFS_REWRITE 8 "2017-07-02" "perl v5.24.1" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 url_lfs_rewrite
@@ -231,11 +231,11 @@
 .PP
 Report serious security bugs to \fISquid Bugs <squid\-bugs@squid\-cache.org\fR>
 .PP
 Report ideas for new improvements to the \fISquid Developers mailing list <squid\-dev@squid\-cache.org\fR>
 .SH "SEE ALSO"
 .IX Header "SEE ALSO"
-squid (8), \s-1GPL\s0 (7),
+squid (8), \s-1GPL \\fIs0\fR\|(7),
 .PP
 The Squid \s-1FAQ\s0 wiki http://wiki.squid\-cache.org/SquidFaq
 .PP
 The Squid Configuration Manual http://www.squid\-cache.org/Doc/config/
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/url_rewriters/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/url_rewriters/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http/url_rewriters/Makefile.in	2017-06-01 20:59:55.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http/url_rewriters/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http.cc	2017-07-02 16:41:18.000000000 +0800
@@ -285,13 +285,15 @@
 
         if (sctusable) {
             if (sctusable->hasNoStore() ||
                     (Config.onoff.surrogate_is_remote
                      && sctusable->noStoreRemote())) {
                 surrogateNoStore = true;
-                entry->makePrivate();
+                // Be conservative for now and make it non-shareable because
+                // there is no enough information here to make the decision.
+                entry->makePrivate(false);
             }
 
             /* The HttpHeader logic cannot tell if the header it's parsing is a reply to an
              * accelerated request or not...
              * Still, this is an abstraction breach. - RC
              */
@@ -310,14 +312,14 @@
 
             delete sctusable;
         }
     }
 }
 
-int
-HttpStateData::cacheableReply()
+HttpStateData::ReuseDecision::Answers
+HttpStateData::reusableReply(HttpStateData::ReuseDecision &decision)
 {
     HttpReply const *rep = finalReply();
     HttpHeader const *hdr = &rep->header;
     const char *v;
 #if USE_HTTP_VIOLATIONS
 
@@ -332,93 +334,84 @@
     ((R = (R ? R : refreshLimits(entry->mem_obj->storeId()))) , \
     (R && R->flags.flag))
 #else
 #define REFRESH_OVERRIDE(flag) 0
 #endif
 
-    if (EBIT_TEST(entry->flags, RELEASE_REQUEST)) {
-        debugs(22, 3, "NO because " << *entry << " has been released.");
-        return 0;
-    }
+    if (EBIT_TEST(entry->flags, RELEASE_REQUEST))
+        return decision.make(ReuseDecision::reuseNot, "the entry has been released");
 
     // RFC 7234 section 4: a cache MUST use the most recent response
     // (as determined by the Date header field)
-    if (sawDateGoBack) {
-        debugs(22, 3, "NO because " << *entry << " has an older date header.");
-        return 0;
-    }
+    // TODO: whether such responses could be shareable?
+    if (sawDateGoBack)
+        return decision.make(ReuseDecision::reuseNot, "the response has an older date header");
 
     // Check for Surrogate/1.0 protocol conditions
     // NP: reverse-proxy traffic our parent server has instructed us never to cache
-    if (surrogateNoStore) {
-        debugs(22, 3, HERE << "NO because Surrogate-Control:no-store");
-        return 0;
-    }
+    if (surrogateNoStore)
+        return decision.make(ReuseDecision::reuseNot, "Surrogate-Control:no-store");
 
     // RFC 2616: HTTP/1.1 Cache-Control conditions
     if (!ignoreCacheControl) {
         // XXX: check to see if the request headers alone were enough to prevent caching earlier
         // (ie no-store request header) no need to check those all again here if so.
         // for now we are not reliably doing that so we waste CPU re-checking request CC
 
         // RFC 2616 section 14.9.2 - MUST NOT cache any response with request CC:no-store
         if (request && request->cache_control && request->cache_control->hasNoStore() &&
-                !REFRESH_OVERRIDE(ignore_no_store)) {
-            debugs(22, 3, HERE << "NO because client request Cache-Control:no-store");
-            return 0;
-        }
+                !REFRESH_OVERRIDE(ignore_no_store))
+            return decision.make(ReuseDecision::reuseNot,
+                                 "client request Cache-Control:no-store");
 
         // NP: request CC:no-cache only means cache READ is forbidden. STORE is permitted.
         if (rep->cache_control && rep->cache_control->hasNoCacheWithParameters()) {
             /* TODO: we are allowed to cache when no-cache= has parameters.
              * Provided we strip away any of the listed headers unless they are revalidated
              * successfully (ie, must revalidate AND these headers are prohibited on stale replies).
              * That is a bit tricky for squid right now so we avoid caching entirely.
              */
-            debugs(22, 3, HERE << "NO because server reply Cache-Control:no-cache has parameters");
-            return 0;
+            return decision.make(ReuseDecision::reuseNot,
+                                 "server reply Cache-Control:no-cache has parameters");
         }
 
         // NP: request CC:private is undefined. We ignore.
         // NP: other request CC flags are limiters on HIT/MISS. We don't care about here.
 
         // RFC 2616 section 14.9.2 - MUST NOT cache any response with CC:no-store
         if (rep->cache_control && rep->cache_control->hasNoStore() &&
-                !REFRESH_OVERRIDE(ignore_no_store)) {
-            debugs(22, 3, HERE << "NO because server reply Cache-Control:no-store");
-            return 0;
-        }
+                !REFRESH_OVERRIDE(ignore_no_store))
+            return decision.make(ReuseDecision::reuseNot,
+                                 "server reply Cache-Control:no-store");
 
         // RFC 2616 section 14.9.1 - MUST NOT cache any response with CC:private in a shared cache like Squid.
         // CC:private overrides CC:public when both are present in a response.
         // TODO: add a shared/private cache configuration possibility.
         if (rep->cache_control &&
                 rep->cache_control->hasPrivate() &&
                 !REFRESH_OVERRIDE(ignore_private)) {
             /* TODO: we are allowed to cache when private= has parameters.
              * Provided we strip away any of the listed headers unless they are revalidated
              * successfully (ie, must revalidate AND these headers are prohibited on stale replies).
              * That is a bit tricky for squid right now so we avoid caching entirely.
              */
-            debugs(22, 3, HERE << "NO because server reply Cache-Control:private");
-            return 0;
+            return decision.make(ReuseDecision::reuseNot,
+                                 "server reply Cache-Control:private");
         }
     }
 
     // RFC 2068, sec 14.9.4 - MUST NOT cache any response with Authentication UNLESS certain CC controls are present
     // allow HTTP violations to IGNORE those controls (ie re-block caching Auth)
     if (request && (request->flags.auth || request->flags.authSent)) {
-        if (!rep->cache_control) {
-            debugs(22, 3, HERE << "NO because Authenticated and server reply missing Cache-Control");
-            return 0;
-        }
-
-        if (ignoreCacheControl) {
-            debugs(22, 3, HERE << "NO because Authenticated and ignoring Cache-Control");
-            return 0;
-        }
+        if (!rep->cache_control)
+            return decision.make(ReuseDecision::reuseNot,
+                                 "authenticated and server reply missing Cache-Control");
+
+        if (ignoreCacheControl)
+            return decision.make(ReuseDecision::reuseNot,
+                                 "authenticated and ignoring Cache-Control");
 
         bool mayStore = false;
         // HTTPbis pt6 section 3.2: a response CC:public is present
         if (rep->cache_control->hasPublic()) {
             debugs(22, 3, HERE << "Authenticated but server reply Cache-Control:public");
             mayStore = true;
@@ -441,32 +434,44 @@
             // HTTPbis pt6 section 3.2: a response CC:s-maxage is present
         } else if (rep->cache_control->hasSMaxAge()) {
             debugs(22, 3, HERE << "Authenticated but server reply Cache-Control:s-maxage");
             mayStore = true;
         }
 
-        if (!mayStore) {
-            debugs(22, 3, HERE << "NO because Authenticated transaction");
-            return 0;
-        }
+        if (!mayStore)
+            return decision.make(ReuseDecision::reuseNot, "authenticated transaction");
 
         // NP: response CC:no-cache is equivalent to CC:must-revalidate,max-age=0. We MAY cache, and do so.
         // NP: other request CC flags are limiters on HIT/MISS/REFRESH. We don't care about here.
     }
 
     /* HACK: The "multipart/x-mixed-replace" content type is used for
      * continuous push replies.  These are generally dynamic and
      * probably should not be cachable
      */
     if ((v = hdr->getStr(Http::HdrType::CONTENT_TYPE)))
-        if (!strncasecmp(v, "multipart/x-mixed-replace", 25)) {
-            debugs(22, 3, HERE << "NO because Content-Type:multipart/x-mixed-replace");
-            return 0;
-        }
+        if (!strncasecmp(v, "multipart/x-mixed-replace", 25))
+            return decision.make(ReuseDecision::reuseNot, "Content-Type:multipart/x-mixed-replace");
+
+    // TODO: if possible, provide more specific message for each status code
+    static const char *shareableError = "shareable error status code";
+    static const char *nonShareableError = "non-shareable error status code";
+    ReuseDecision::Answers statusAnswer = ReuseDecision::reuseNot;
+    const char *statusReason = nonShareableError;
 
     switch (rep->sline.status()) {
+
+    /* There are several situations when a non-cacheable response may be
+     * still shareable (e.g., among collapsed clients). We assume that these
+     * are 3xx and 5xx responses, indicating server problems and some of
+     * 4xx responses, common for all clients with a given cache key (e.g.,
+     * 404 Not Found or 414 URI Too Long). On the other hand, we should not
+     * share non-cacheable client-specific errors, such as 400 Bad Request
+     * or 406 Not Acceptable.
+     */
+
     /* Responses that are cacheable */
 
     case Http::scOkay:
 
     case Http::scNonAuthoritativeInformation:
 
@@ -478,117 +483,93 @@
     case Http::scGone:
         /*
          * Don't cache objects that need to be refreshed on next request,
          * unless we know how to refresh it.
          */
 
-        if (!refreshIsCachable(entry) && !REFRESH_OVERRIDE(store_stale)) {
-            debugs(22, 3, "NO because refreshIsCachable() returned non-cacheable..");
-            return 0;
-        } else {
-            debugs(22, 3, HERE << "YES because HTTP status " << rep->sline.status());
-            return 1;
-        }
-        /* NOTREACHED */
+        if (refreshIsCachable(entry) || REFRESH_OVERRIDE(store_stale))
+            decision.make(ReuseDecision::cachePositively, "refresh check returned cacheable");
+        else
+            decision.make(ReuseDecision::doNotCacheButShare, "refresh check returned non-cacheable");
         break;
 
     /* Responses that only are cacheable if the server says so */
 
     case Http::scFound:
     case Http::scTemporaryRedirect:
-        if (rep->date <= 0) {
-            debugs(22, 3, HERE << "NO because HTTP status " << rep->sline.status() << " and Date missing/invalid");
-            return 0;
-        }
-        if (rep->expires > rep->date) {
-            debugs(22, 3, HERE << "YES because HTTP status " << rep->sline.status() << " and Expires > Date");
-            return 1;
-        } else {
-            debugs(22, 3, HERE << "NO because HTTP status " << rep->sline.status() << " and Expires <= Date");
-            return 0;
-        }
-        /* NOTREACHED */
+        if (rep->date <= 0)
+            decision.make(ReuseDecision::doNotCacheButShare, "Date is missing/invalid");
+        else if (rep->expires > rep->date)
+            decision.make(ReuseDecision::cachePositively, "Expires > Date");
+        else
+            decision.make(ReuseDecision::doNotCacheButShare, "Expires <= Date");
         break;
 
-    /* Errors can be negatively cached */
-
+    /* These responses can be negatively cached. Most can also be shared. */
     case Http::scNoContent:
-
     case Http::scUseProxy:
-
-    case Http::scBadRequest:
-
     case Http::scForbidden:
-
     case Http::scNotFound:
-
     case Http::scMethodNotAllowed:
-
     case Http::scUriTooLong:
-
     case Http::scInternalServerError:
-
     case Http::scNotImplemented:
-
     case Http::scBadGateway:
-
     case Http::scServiceUnavailable:
-
     case Http::scGatewayTimeout:
     case Http::scMisdirectedRequest:
+        statusAnswer = ReuseDecision::doNotCacheButShare;
+        statusReason = shareableError;
+    // fall through to the actual decision making below
 
-        debugs(22, 3, "MAYBE because HTTP status " << rep->sline.status());
-        return -1;
-
-        /* NOTREACHED */
+    case Http::scBadRequest: // no sharing; perhaps the server did not like something specific to this request
+#if USE_HTTP_VIOLATIONS
+        if (Config.negativeTtl > 0)
+            decision.make(ReuseDecision::cacheNegatively, "Config.negativeTtl > 0");
+        else
+#endif
+            decision.make(statusAnswer, statusReason);
         break;
 
-    /* Some responses can never be cached */
-
-    case Http::scPartialContent:    /* Not yet supported */
-
+    /* these responses can never be cached, some
+       of them can be shared though */
     case Http::scSeeOther:
-
     case Http::scNotModified:
-
     case Http::scUnauthorized:
-
     case Http::scProxyAuthenticationRequired:
-
-    case Http::scInvalidHeader: /* Squid header parsing error */
-
-    case Http::scHeaderTooLarge:
-
     case Http::scPaymentRequired:
+    case Http::scInsufficientStorage:
+        // TODO: use more specific reason for non-error status codes
+        decision.make(ReuseDecision::doNotCacheButShare, shareableError);
+        break;
+
+    case Http::scPartialContent: /* Not yet supported. TODO: make shareable for suitable ranges */
     case Http::scNotAcceptable:
-    case Http::scRequestTimeout:
-    case Http::scConflict:
+    case Http::scRequestTimeout: // TODO: is this shareable?
+    case Http::scConflict: // TODO: is this shareable?
     case Http::scLengthRequired:
     case Http::scPreconditionFailed:
     case Http::scPayloadTooLarge:
     case Http::scUnsupportedMediaType:
     case Http::scUnprocessableEntity:
-    case Http::scLocked:
+    case Http::scLocked: // TODO: is this shareable?
     case Http::scFailedDependency:
-    case Http::scInsufficientStorage:
     case Http::scRequestedRangeNotSatisfied:
     case Http::scExpectationFailed:
-
-        debugs(22, 3, HERE << "NO because HTTP status " << rep->sline.status());
-        return 0;
+    case Http::scInvalidHeader: /* Squid header parsing error */
+    case Http::scHeaderTooLarge:
+        decision.make(ReuseDecision::reuseNot, nonShareableError);
+        break;
 
     default:
         /* RFC 2616 section 6.1.1: an unrecognized response MUST NOT be cached. */
-        debugs (11, 3, HERE << "NO because unknown HTTP status code " << rep->sline.status());
-        return 0;
-
-        /* NOTREACHED */
+        decision.make(ReuseDecision::reuseNot, "unknown status code");
         break;
     }
 
-    /* NOTREACHED */
+    return decision.answer;
 }
 
 /// assemble a variant key (vary-mark) from the given Vary header and HTTP request
 static void
 assembleVaryKey(String &vary, SBuf &vstr, const HttpRequest &request)
 {
@@ -823,13 +804,13 @@
 #if USE_HTTP_VIOLATIONS
     // check whether the 1xx response forwarding is allowed by squid.conf
     if (Config.accessList.reply) {
         ACLFilledChecklist ch(Config.accessList.reply, originalRequest(), NULL);
         ch.reply = reply;
         HTTPMSGLOCK(ch.reply);
-        if (ch.fastCheck() != ACCESS_ALLOWED) { // TODO: support slow lookups?
+        if (!ch.fastCheck().allowed()) { // TODO: support slow lookups?
             debugs(11, 3, HERE << "ignoring denied 1xx");
             proceedAfter1xx();
             return;
         }
     }
 #endif // USE_HTTP_VIOLATIONS
@@ -918,17 +899,18 @@
 HttpStateData::haveParsedReplyHeaders()
 {
     Client::haveParsedReplyHeaders();
 
     Ctx ctx = ctx_enter(entry->mem_obj->urlXXX());
     HttpReply *rep = finalReply();
+    const Http::StatusCode statusCode = rep->sline.status();
 
     entry->timestampsSet();
 
     /* Check if object is cacheable or not based on reply code */
-    debugs(11, 3, "HTTP CODE: " << rep->sline.status());
+    debugs(11, 3, "HTTP CODE: " << statusCode);
 
     if (const StoreEntry *oldEntry = findPreviouslyCachedEntry(entry))
         sawDateGoBack = rep->olderThan(oldEntry->getReply());
 
     if (neighbors_do_private_keys && !sawDateGoBack)
         httpMaybeRemovePublic(entry, rep->sline.status());
@@ -939,13 +921,15 @@
             || rep->header.has(Http::HdrType::HDR_X_ACCELERATOR_VARY)
 #endif
        ) {
         const SBuf vary(httpMakeVaryMark(request, rep));
 
         if (vary.isEmpty()) {
-            entry->makePrivate();
+            // TODO: check whether such responses are shareable.
+            // Do not share for now.
+            entry->makePrivate(false);
             if (!fwd->reforwardableStatus(rep->sline.status()))
                 EBIT_CLR(entry->flags, ENTRY_FWD_HDR_WAIT);
             varyFailure = true;
         } else {
             entry->mem_obj->vary_headers = vary;
 
@@ -962,36 +946,37 @@
          * If its not a reply that we will re-forward, then
          * allow the client to get it.
          */
         if (!fwd->reforwardableStatus(rep->sline.status()))
             EBIT_CLR(entry->flags, ENTRY_FWD_HDR_WAIT);
 
-        switch (cacheableReply()) {
+        ReuseDecision decision(entry, statusCode);
 
-        case 1:
-            entry->makePublic();
+        switch (reusableReply(decision)) {
+
+        case ReuseDecision::reuseNot:
+            entry->makePrivate(false);
             break;
 
-        case 0:
-            entry->makePrivate();
+        case ReuseDecision::cachePositively:
+            entry->makePublic();
             break;
 
-        case -1:
+        case ReuseDecision::cacheNegatively:
+            entry->cacheNegatively();
+            break;
 
-#if USE_HTTP_VIOLATIONS
-            if (Config.negativeTtl > 0)
-                entry->cacheNegatively();
-            else
-#endif
-                entry->makePrivate();
+        case ReuseDecision::doNotCacheButShare:
+            entry->makePrivate(true);
             break;
 
         default:
             assert(0);
             break;
         }
+        debugs(11, 3, "decided: " << decision);
     }
 
     if (!ignoreCacheControl) {
         if (rep->cache_control) {
             // We are required to revalidate on many conditions.
             // For security reasons we do so even if storage was caused by refresh_pattern ignore-* option
@@ -1406,15 +1391,12 @@
  *  2 - see if we made it to the end of the response (persistent
  *      connections and such)
  */
 void
 HttpStateData::processReplyBody()
 {
-    Ip::Address client_addr;
-    bool ispinned = false;
-
     if (!flags.headers_parsed) {
         flags.do_next_read = true;
         maybeReadVirginBody();
         return;
     }
 
@@ -1461,41 +1443,55 @@
             }
 
             flags.do_next_read = true;
         }
         break;
 
-        case COMPLETE_PERSISTENT_MSG:
+        case COMPLETE_PERSISTENT_MSG: {
             debugs(11, 5, "processReplyBody: COMPLETE_PERSISTENT_MSG from " << serverConnection);
-            /* yes we have to clear all these! */
+
+            // TODO: Remove serverConnectionSaved but preserve exception safety.
+
             commUnsetConnTimeout(serverConnection);
             flags.do_next_read = false;
 
             comm_remove_close_handler(serverConnection->fd, closeHandler);
             closeHandler = NULL;
-            fwd->unregister(serverConnection);
 
+            Ip::Address client_addr; // XXX: Remove as unused. Why was it added?
             if (request->flags.spoofClientIp)
                 client_addr = request->client_addr;
 
+            auto serverConnectionSaved = serverConnection;
+            fwd->unregister(serverConnection);
+            serverConnection = nullptr;
+
+            bool ispinned = false; // TODO: Rename to isOrShouldBePinned
             if (request->flags.pinned) {
                 ispinned = true;
             } else if (request->flags.connectionAuth && request->flags.authSent) {
                 ispinned = true;
             }
 
-            if (ispinned && request->clientConnectionManager.valid()) {
-                request->clientConnectionManager->pinConnection(serverConnection, request, _peer,
-                        (request->flags.connectionAuth));
+            if (ispinned) {
+                if (request->clientConnectionManager.valid()) {
+                    CallJobHere1(11, 4, request->clientConnectionManager,
+                                 ConnStateData,
+                                 notePinnedConnectionBecameIdle,
+                                 ConnStateData::PinnedIdleContext(serverConnectionSaved, request));
+                } else {
+                    // must not pool/share ispinned connections, even orphaned ones
+                    serverConnectionSaved->close();
+                }
             } else {
-                fwd->pconnPush(serverConnection, request->url.host());
+                fwd->pconnPush(serverConnectionSaved, request->url.host());
             }
 
-            serverConnection = NULL;
             serverComplete();
             return;
+        }
 
         case COMPLETE_NONPERSISTENT_MSG:
             debugs(11, 5, "processReplyBody: COMPLETE_NONPERSISTENT_MSG from " << serverConnection);
             serverComplete();
             return;
         }
@@ -2330,13 +2326,13 @@
     if (!Config.accessList.brokenPosts) {
         debugs(11, 5, HERE << "No brokenPosts list");
         return false;
     }
 
     ACLFilledChecklist ch(Config.accessList.brokenPosts, originalRequest(), NULL);
-    if (ch.fastCheck() != ACCESS_ALLOWED) {
+    if (!ch.fastCheck().allowed()) {
         debugs(11, 5, HERE << "didn't match brokenPosts");
         return false;
     }
 
     if (!Comm::IsConnOpen(serverConnection)) {
         debugs(11, 3, HERE << "ignoring broken POST for closed " << serverConnection);
@@ -2454,6 +2450,32 @@
 {
     debugs(11,5, HERE << "aborting transaction for " << reason <<
            "; " << serverConnection << ", this " << this);
     mustStop(reason);
 }
 
+HttpStateData::ReuseDecision::ReuseDecision(const StoreEntry *e, const Http::StatusCode code)
+    : answer(HttpStateData::ReuseDecision::reuseNot), reason(nullptr), entry(e), statusCode(code) {}
+
+HttpStateData::ReuseDecision::Answers
+HttpStateData::ReuseDecision::make(const HttpStateData::ReuseDecision::Answers ans, const char *why)
+{
+    answer = ans;
+    reason = why;
+    return answer;
+}
+
+std::ostream &operator <<(std::ostream &os, const HttpStateData::ReuseDecision &d)
+{
+    static const char *ReuseMessages[] = {
+        "do not cache and do not share", // reuseNot
+        "cache positively and share", // cachePositively
+        "cache negatively and share", // cacheNegatively
+        "do not cache but share" // doNotCacheButShare
+    };
+
+    assert(d.answer >= HttpStateData::ReuseDecision::reuseNot &&
+           d.answer <= HttpStateData::ReuseDecision::doNotCacheButShare);
+    return os << ReuseMessages[d.answer] << " because " << d.reason <<
+           "; HTTP status " << d.statusCode << " " << *(d.entry);
+}
+
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/http.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/http.h	2017-07-02 16:41:18.000000000 +0800
@@ -20,12 +20,29 @@
 
 class HttpStateData : public Client
 {
     CBDATA_CLASS(HttpStateData);
 
 public:
+
+    /// assists in making and relaying entry caching/sharing decision
+    class ReuseDecision
+    {
+    public:
+        enum Answers { reuseNot = 0, cachePositively, cacheNegatively, doNotCacheButShare };
+
+        ReuseDecision(const StoreEntry *e, const Http::StatusCode code);
+        /// stores the corresponding decision
+        Answers make(const Answers ans, const char *why);
+
+        Answers answer; ///< the decision id
+        const char *reason; ///< the decision reason
+        const StoreEntry *entry; ///< entry for debugging
+        const Http::StatusCode statusCode; ///< HTTP status for debugging
+    };
+
     HttpStateData(FwdState *);
     ~HttpStateData();
 
     static void httpBuildRequestHeader(HttpRequest * request,
                                        StoreEntry * entry,
                                        const AccessLogEntryPointer &al,
@@ -37,14 +54,14 @@
     bool sendRequest();
     void processReplyHeader();
     void processReplyBody();
     void readReply(const CommIoCbParams &io);
     virtual void maybeReadVirginBody(); // read response data from the network
 
-    // Determine whether the response is a cacheable representation
-    int cacheableReply();
+    // Checks whether the response is cacheable/shareable.
+    ReuseDecision::Answers reusableReply(ReuseDecision &decision);
 
     CachePeer *_peer;       /* CachePeer request made to */
     int eof;            /* reached end-of-object? */
     int lastChunk;      /* reached last chunk of a chunk-encoded reply */
     Http::StateFlags flags;
     size_t read_sz;
@@ -132,12 +149,14 @@
 
     /// Whether we received a Date header older than that of a matching
     /// cached response.
     bool sawDateGoBack;
 };
 
+std::ostream &operator <<(std::ostream &os, const HttpStateData::ReuseDecision &d);
+
 int httpCachable(const HttpRequestMethod&);
 void httpStart(FwdState *);
 SBuf httpMakeVaryMark(HttpRequest * request, HttpReply const * reply);
 
 #endif /* SQUID_HTTP_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/HttpHeaderTools.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/HttpHeaderTools.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/HttpHeaderTools.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/HttpHeaderTools.cc	2017-07-02 16:41:18.000000000 +0800
@@ -286,13 +286,13 @@
         debugs(66, 7, "couldn't find mangler or access list. Allowing");
         return 1;
     }
 
     ACLFilledChecklist checklist(hm->access_list, request, NULL);
 
-    if (checklist.fastCheck() == ACCESS_ALLOWED) {
+    if (checklist.fastCheck().allowed()) {
         /* aclCheckFast returns true for allow. */
         debugs(66, 7, "checklist for mangler is positive. Mangle");
         retval = 1;
     } else if (NULL == hm->replacement) {
         /* It was denied, and we don't have any replacement */
         debugs(66, 7, "checklist denied, we have no replacement. Pass");
@@ -475,13 +475,13 @@
 void
 httpHdrAdd(HttpHeader *heads, HttpRequest *request, const AccessLogEntryPointer &al, HeaderWithAclList &headersAdd)
 {
     ACLFilledChecklist checklist(NULL, request, NULL);
 
     for (HeaderWithAclList::const_iterator hwa = headersAdd.begin(); hwa != headersAdd.end(); ++hwa) {
-        if (!hwa->aclList || checklist.fastCheck(hwa->aclList) == ACCESS_ALLOWED) {
+        if (!hwa->aclList || checklist.fastCheck(hwa->aclList).allowed()) {
             const char *fieldValue = NULL;
             MemBuf mb;
             if (hwa->quoted) {
                 if (al != NULL) {
                     mb.init();
                     hwa->valueFormat->assemble(mb, al, 0);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/HttpReply.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/HttpReply.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/HttpReply.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/HttpReply.cc	2017-07-02 16:41:18.000000000 +0800
@@ -514,13 +514,13 @@
     ACLFilledChecklist ch(NULL, &request, NULL);
     // XXX: cont-cast becomes irrelevant when checklist is HttpReply::Pointer
     ch.reply = const_cast<HttpReply *>(this);
     HTTPMSGLOCK(ch.reply);
     for (AclSizeLimit *l = Config.ReplyBodySize; l; l = l -> next) {
         /* if there is no ACL list or if the ACLs listed match use this size value */
-        if (!l->aclList || ch.fastCheck(l->aclList) == ACCESS_ALLOWED) {
+        if (!l->aclList || ch.fastCheck(l->aclList).allowed()) {
             debugs(58, 4, HERE << "bodySizeMax=" << bodySizeMax);
             bodySizeMax = l->size; // may be -1
             break;
         }
     }
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/HttpRequest.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/HttpRequest.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/HttpRequest.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/HttpRequest.cc	2017-07-02 16:41:18.000000000 +0800
@@ -10,12 +10,13 @@
 
 #include "squid.h"
 #include "AccessLogEntry.h"
 #include "acl/AclSizeLimit.h"
 #include "acl/FilledChecklist.h"
 #include "client_side.h"
+#include "client_side_request.h"
 #include "dns/LookupDetails.h"
 #include "Downloader.h"
 #include "err_detail_type.h"
 #include "globals.h"
 #include "gopher.h"
 #include "http.h"
@@ -35,21 +36,25 @@
 #include "auth/UserRequest.h"
 #endif
 #if ICAP_CLIENT
 #include "adaptation/icap/icap_log.h"
 #endif
 
-HttpRequest::HttpRequest() :
-    HttpMsg(hoRequest)
+HttpRequest::HttpRequest(const MasterXaction::Pointer &mx) :
+    HttpMsg(hoRequest),
+    masterXaction(mx)
 {
+    assert(mx);
     init();
 }
 
-HttpRequest::HttpRequest(const HttpRequestMethod& aMethod, AnyP::ProtocolType aProtocol, const char *aSchemeImg, const char *aUrlpath) :
-    HttpMsg(hoRequest)
+HttpRequest::HttpRequest(const HttpRequestMethod& aMethod, AnyP::ProtocolType aProtocol, const char *aSchemeImg, const char *aUrlpath, const MasterXaction::Pointer &mx) :
+    HttpMsg(hoRequest),
+    masterXaction(mx)
 {
+    assert(mx);
     static unsigned int id = 1;
     debugs(93,7, HERE << "constructed, this=" << this << " id=" << ++id);
     init();
     initHTTP(aMethod, aProtocol, aSchemeImg, aUrlpath);
 }
 
@@ -167,13 +172,13 @@
     init();
 }
 
 HttpRequest *
 HttpRequest::clone() const
 {
-    HttpRequest *copy = new HttpRequest();
+    HttpRequest *copy = new HttpRequest(masterXaction);
     copy->method = method;
     // TODO: move common cloning clone to Msg::copyTo() or copy ctor
     copy->header.append(&header);
     copy->hdrCacheInit();
     copy->hdr_sz = hdr_sz;
     copy->http_ver = http_ver;
@@ -324,20 +329,17 @@
         return false;
 
     char save = *end;
 
     * (char *) end = '\0';     // temp terminate URI, XXX dangerous?
 
-    HttpRequest *tmp = urlParse(method, (char *) start, this);
+    const bool ret = url.parse(method, (char *) start);
 
     * (char *) end = save;
 
-    if (NULL == tmp)
-        return false;
-
-    return true;
+    return ret;
 }
 
 /* swaps out request using httpRequestPack */
 void
 HttpRequest::swapOut(StoreEntry * e)
 {
@@ -515,15 +517,20 @@
  * Create a Request from a URL and METHOD.
  *
  * If the METHOD is CONNECT, then a host:port pair is looked for instead of a URL.
  * If the request cannot be created cleanly, NULL is returned
  */
 HttpRequest *
-HttpRequest::CreateFromUrl(char * url, const HttpRequestMethod& method)
+HttpRequest::FromUrl(char * url, const MasterXaction::Pointer &mx, const HttpRequestMethod& method)
 {
-    return urlParse(method, url, NULL);
+    std::unique_ptr<HttpRequest> req(new HttpRequest(mx));
+    if (req->url.parse(method, url)) {
+        req->method = method;
+        return req.release();
+    }
+    return nullptr;
 }
 
 /**
  * Are responses to this request possible cacheable ?
  * If false then no matter what the response must not be cached.
  */
@@ -601,13 +608,13 @@
     ACLFilledChecklist ch(NULL, this, NULL);
     ch.src_addr = client_addr;
     ch.my_addr =  my_addr;
 
     for (AclSizeLimit *l = Config.rangeOffsetLimit; l; l = l -> next) {
         /* if there is no ACL list or if the ACLs listed match use this limit value */
-        if (!l->aclList || ch.fastCheck(l->aclList) == ACCESS_ALLOWED) {
+        if (!l->aclList || ch.fastCheck(l->aclList).allowed()) {
             debugs(58, 4, HERE << "rangeOffsetLimit=" << rangeOffsetLimit);
             rangeOffsetLimit = l->size; // may be -1
             break;
         }
     }
 
@@ -664,6 +671,45 @@
 {
     if (method.id() == Http::METHOD_CONNECT || url.getScheme() == AnyP::PROTO_AUTHORITY_FORM)
         return url.authority(true); // host:port
     return url.absolute();
 }
 
+void
+HttpRequest::manager(const CbcPointer<ConnStateData> &aMgr, const AccessLogEntryPointer &al)
+{
+    clientConnectionManager = aMgr;
+
+    if (!clientConnectionManager.valid())
+        return;
+
+    AnyP::PortCfgPointer port = clientConnectionManager->port;
+    if (port) {
+        myportname = port->name;
+        flags.ignoreCc = port->ignore_cc;
+    }
+
+    if (auto clientConnection = clientConnectionManager->clientConnection) {
+        client_addr = clientConnection->remote; // XXX: remove request->client_addr member.
+#if FOLLOW_X_FORWARDED_FOR
+        // indirect client gets stored here because it is an HTTP header result (from X-Forwarded-For:)
+        // not details about the TCP connection itself
+        indirect_client_addr = clientConnection->remote;
+#endif /* FOLLOW_X_FORWARDED_FOR */
+        my_addr = clientConnection->local;
+
+        flags.intercepted = ((clientConnection->flags & COMM_INTERCEPTION) != 0);
+        flags.interceptTproxy = ((clientConnection->flags & COMM_TRANSPARENT) != 0 ) ;
+        const bool proxyProtocolPort = port ? port->flags.proxySurrogate : false;
+        if (flags.interceptTproxy && !proxyProtocolPort) {
+            if (Config.accessList.spoof_client_ip) {
+                ACLFilledChecklist *checklist = new ACLFilledChecklist(Config.accessList.spoof_client_ip, this, clientConnection->rfc931);
+                checklist->al = al;
+                flags.spoofClientIp = checklist->fastCheck().allowed();
+                delete checklist;
+            } else
+                flags.spoofClientIp = true;
+        } else
+            flags.spoofClientIp = false;
+    }
+}
+
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/HttpRequest.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/HttpRequest.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/HttpRequest.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/HttpRequest.h	2017-07-02 16:41:18.000000000 +0800
@@ -12,12 +12,13 @@
 #include "base/CbcPointer.h"
 #include "dns/forward.h"
 #include "err_type.h"
 #include "HierarchyLogEntry.h"
 #include "http/RequestMethod.h"
 #include "HttpMsg.h"
+#include "MasterXaction.h"
 #include "Notes.h"
 #include "RequestFlags.h"
 #include "URL.h"
 
 #if USE_AUTH
 #include "auth/UserRequest.h"
@@ -32,12 +33,14 @@
 #include "eui/Eui48.h"
 #include "eui/Eui64.h"
 #endif
 
 class ConnStateData;
 class Downloader;
+class AccessLogEntry;
+typedef RefCount<AccessLogEntry> AccessLogEntryPointer;
 
 /*  Http Request */
 void httpRequestPack(void *obj, Packable *p);
 
 class HttpHdrRange;
 
@@ -45,14 +48,14 @@
 {
     MEMPROXY_CLASS(HttpRequest);
 
 public:
     typedef RefCount<HttpRequest> Pointer;
 
-    HttpRequest();
-    HttpRequest(const HttpRequestMethod& aMethod, AnyP::ProtocolType aProtocol, const char *schemeImage, const char *aUrlpath);
+    HttpRequest(const MasterXaction::Pointer &);
+    HttpRequest(const HttpRequestMethod& aMethod, AnyP::ProtocolType aProtocol, const char *schemeImage, const char *aUrlpath, const MasterXaction::Pointer &);
     ~HttpRequest();
     virtual void reset();
 
     void initHTTP(const HttpRequestMethod& aMethod, AnyP::ProtocolType aProtocol, const char *schemeImage, const char *aUrlpath);
 
     virtual HttpRequest *clone() const;
@@ -84,12 +87,15 @@
 
     /// sets error detail if no earlier detail was available
     void detailError(err_type aType, int aDetail);
     /// clear error details, useful for retries/repeats
     void clearError();
 
+    /// associates the request with a from-client connection manager
+    void manager(const CbcPointer<ConnStateData> &aMgr, const AccessLogEntryPointer &al);
+
 protected:
     void clean();
 
     void init();
 
 public:
@@ -192,13 +198,13 @@
     void swapOut(StoreEntry * e);
 
     void pack(Packable * p) const;
 
     static void httpRequestPack(void *obj, Packable *p);
 
-    static HttpRequest * CreateFromUrl(char * url, const HttpRequestMethod &method = Http::METHOD_GET);
+    static HttpRequest * FromUrl(char * url, const MasterXaction::Pointer &, const HttpRequestMethod &method = Http::METHOD_GET);
 
     ConnStateData *pinnedConnection();
 
     /**
      * Returns the current StoreID for the request as a nul-terminated char*.
      * Always returns the current id for the request
@@ -213,12 +219,15 @@
      */
     CbcPointer<ConnStateData> clientConnectionManager;
 
     /// The Downloader object which initiated the HTTP request if any
     CbcPointer<Downloader> downloader;
 
+    /// the master transaction this request belongs to. Never nil.
+    MasterXaction::Pointer masterXaction;
+
     /// forgets about the cached Range header (for a reason)
     void ignoreRange(const char *reason);
     int64_t getRangeOffsetLimit(); /* the result of this function gets cached in rangeOffsetLimit */
 
 private:
     mutable int64_t rangeOffsetLimit;  /* caches the result of getRangeOffsetLimit */
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/icmp/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/icmp/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/icmp/Makefile.in	2017-06-01 21:00:08.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/icmp/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/icmp/net_db.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/icmp/net_db.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/icmp/net_db.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/icmp/net_db.cc	2017-07-02 16:41:18.000000000 +0800
@@ -1283,13 +1283,14 @@
 #if USE_ICMP
     CachePeer *p = (CachePeer *)data;
     static const SBuf netDB("netdb");
     char *uri = internalRemoteUri(p->host, p->http_port, "/squid-internal-dynamic/", netDB);
     debugs(38, 3, "netdbExchangeStart: Requesting '" << uri << "'");
     assert(NULL != uri);
-    HttpRequest *req = HttpRequest::CreateFromUrl(uri);
+    const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initIcmp);
+    HttpRequest *req = HttpRequest::FromUrl(uri, mx);
 
     if (req == NULL) {
         debugs(38, DBG_IMPORTANT, "netdbExchangeStart: Bad URI " << uri);
         return;
     }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/icp_v2.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/icp_v2.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/icp_v2.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/icp_v2.cc	2017-07-02 16:41:18.000000000 +0800
@@ -414,13 +414,13 @@
     if (!Config.accessList.icp)
         return false;
 
     ACLFilledChecklist checklist(Config.accessList.icp, icp_request, NULL);
     checklist.src_addr = from;
     checklist.my_addr.setNoAddr();
-    return (checklist.fastCheck() == ACCESS_ALLOWED);
+    return checklist.fastCheck().allowed();
 }
 
 char const *
 icpGetUrlToSend(char *url)
 {
     if (strpbrk(url, w_space))
@@ -436,14 +436,14 @@
         url = rfc1738_escape(url);
         icpCreateAndSend(ICP_ERR, 0, rfc1738_escape(url), reqnum, 0, fd, from);
         return NULL;
     }
 
     HttpRequest *result;
-
-    if ((result = HttpRequest::CreateFromUrl(url)) == NULL)
+    const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initIcp);
+    if ((result = HttpRequest::FromUrl(url, mx)) == NULL)
         icpCreateAndSend(ICP_ERR, 0, url, reqnum, 0, fd, from);
 
     return result;
 
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ident/AclIdent.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ident/AclIdent.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ident/AclIdent.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ident/AclIdent.cc	2017-07-02 16:41:18.000000000 +0800
@@ -44,12 +44,18 @@
 ACLIdent::typeString() const
 {
     return type_;
 }
 
 void
+ACLIdent::parseFlags()
+{
+    ParseFlags(Acl::NoOptions(), data->supportedFlags());
+}
+
+void
 ACLIdent::parse()
 {
     if (!data) {
         debugs(28, 3, HERE << "current is null. Creating");
         data = new ACLUserData;
     }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ident/AclIdent.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ident/AclIdent.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ident/AclIdent.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ident/AclIdent.h	2017-07-02 16:41:18.000000000 +0800
@@ -37,26 +37,23 @@
 public:
     ACLIdent(ACLData<char const *> *newData, char const *);
     ACLIdent (ACLIdent const &old);
     ACLIdent & operator= (ACLIdent const &rhs);
     ~ACLIdent();
 
+    /* ACL API */
     virtual char const *typeString() const;
     virtual void parse();
     virtual bool isProxyAuth() const {return true;}
-
+    virtual void parseFlags();
     virtual int match(ACLChecklist *checklist);
     virtual SBufList dump() const;
     virtual bool empty () const;
     virtual ACL *clone()const;
 
 private:
-    static Prototype UserRegistryProtoype;
-    static ACLIdent UserRegistryEntry_;
-    static Prototype RegexRegistryProtoype;
-    static ACLIdent RegexRegistryEntry_;
     ACLData<char const *> *data;
     char const *type_;
 };
 
 #endif /* USE_IDENT */
 #endif /* SQUID_IDENT_ACLIDENT_H */
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ident/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ident/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ident/Makefile.in	2017-06-01 21:00:11.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ident/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ip/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ip/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ip/Makefile.in	2017-06-01 21:00:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ip/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ipc/Forwarder.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ipc/Forwarder.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ipc/Forwarder.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ipc/Forwarder.cc	2017-07-02 16:41:18.000000000 +0800
@@ -59,12 +59,13 @@
     try {
         request->pack(message);
     } catch (...) {
         // assume the pack() call failed because the message did not fit
         // TODO: add a more specific exception?
         handleError();
+        return;
     }
 
     SendMessage(Ipc::Port::CoordinatorAddr(), message);
     eventAdd("Ipc::Forwarder::requestTimedOut", &Forwarder::RequestTimedOut,
              this, timeout, 0, false);
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ipc/Forwarder.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ipc/Forwarder.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ipc/Forwarder.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ipc/Forwarder.h	2017-07-02 16:41:18.000000000 +0800
@@ -46,18 +46,20 @@
     virtual bool doneAll() const;
 
     virtual void cleanup(); ///< perform cleanup actions
     virtual void handleError();
     virtual void handleTimeout();
     virtual void handleException(const std::exception& e);
-    virtual void handleRemoteAck();
 
 private:
     static void RequestTimedOut(void* param);
     void requestTimedOut();
     void removeTimeoutEvent();
+
+    void handleRemoteAck();
+
     static AsyncCall::Pointer DequeueRequest(unsigned int requestId);
 
 protected:
     Request::Pointer request;
     const double timeout; ///< response wait timeout in seconds
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ipc/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ipc/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ipc/Makefile.in	2017-06-01 21:00:22.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ipc/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/log/access_log.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/log/access_log.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/log/access_log.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/log/access_log.cc	2017-07-02 16:41:18.000000000 +0800
@@ -81,13 +81,13 @@
         al->http.content_type = dash_str;
 
     if (al->hier.host[0] == '\0')
         xstrncpy(al->hier.host, dash_str, SQUIDHOSTNAMELEN);
 
     for (; log; log = log->next) {
-        if (log->aclList && checklist && checklist->fastCheck(log->aclList) != ACCESS_ALLOWED)
+        if (log->aclList && checklist && !checklist->fastCheck(log->aclList).allowed())
             continue;
 
         // The special-case "none" type has no logfile object set
         if (log->type == Log::Format::CLF_NONE)
             return;
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/log/Config.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/log/Config.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/log/Config.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/log/Config.cc	2017-07-02 16:41:18.000000000 +0800
@@ -17,13 +17,33 @@
 void
 Log::LogConfig::parseFormats()
 {
     char *name, *def;
 
     if (!(name = ConfigParser::NextToken())) {
+        debugs(3, DBG_CRITICAL, "FATAL: missing logformat details in " << cfg_filename << " line " << config_lineno);
         self_destruct();
+        return;
+    }
+
+    // check for re-definition of built-in formats
+    if (strcmp(name, "squid") == 0 ||
+            strcmp(name, "common") == 0 ||
+            strcmp(name, "combined") == 0 ||
+            strcmp(name, "useragent") == 0 ||
+            strcmp(name, "referrer") == 0) {
+        debugs(3, DBG_PARSE_NOTE(DBG_IMPORTANT), "ERROR: logformat " << name << " is already defined. Ignoring.");
+        return;
+    }
+
+    // check for re-definition of custom formats
+    for (auto i = logformats; i ; i = i->next) {
+        if (strcmp(i->name, name) == 0) {
+            debugs(3, DBG_PARSE_NOTE(DBG_IMPORTANT), "ERROR: logformat " << name << " is already defined. Ignoring.");
+            return;
+        }
     }
 
     ::Format::Format *nlf = new ::Format::Format(name);
 
     ConfigParser::EnableMacros();
     if (!(def = ConfigParser::NextQuotedOrToEol())) {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/log/DB/log_db_daemon.8 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/log/DB/log_db_daemon.8
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/log/DB/log_db_daemon.8	2017-06-02 05:57:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/log/DB/log_db_daemon.8	2017-07-02 16:57:36.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 4.08 (Pod::Simple 3.32)
+.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -126,13 +126,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "LOG_DB_DAEMON 8"
-.TH LOG_DB_DAEMON 8 "2017-06-01" "perl v5.24.1" "User Contributed Perl Documentation"
+.TH LOG_DB_DAEMON 8 "2017-07-02" "perl v5.24.1" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 log_db_daemon \- Database logging daemon for Squid
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/log/DB/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/log/DB/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/log/DB/Makefile.in	2017-06-01 21:00:27.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/log/DB/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/log/file/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/log/file/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/log/file/Makefile.in	2017-06-01 21:00:36.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/log/file/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/log/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/log/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/log/Makefile.in	2017-06-01 21:00:31.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/log/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/main.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/main.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/main.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/main.cc	2017-07-02 16:41:18.000000000 +0800
@@ -7,14 +7,15 @@
  */
 
 /* DEBUG: section 01    Startup and Main Loop */
 
 #include "squid.h"
 #include "AccessLogEntry.h"
-#include "acl/Acl.h"
+//#include "acl/Acl.h"
 #include "acl/Asn.h"
+#include "acl/forward.h"
 #include "anyp/UriScheme.h"
 #include "AuthReg.h"
 #include "base/RunnersRegistry.h"
 #include "base/Subscription.h"
 #include "base/TextException.h"
 #include "cache_cf.h"
@@ -384,15 +385,15 @@
             "                 Enable logging to syslog.\n"
             "       -u port   Specify ICP port number (default: %d), disable with 0.\n"
             "       -z        Create missing swap directories and then exit.\n"
             "       -C        Do not catch fatal signals.\n"
             "       -D        OBSOLETE. Scheduled for removal.\n"
             "       -F        Don't serve any requests until store is rebuilt.\n"
-            "       -N        No daemon mode.\n"
+            "       -N        Master process runs in foreground and is a worker. No kids.\n"
             "       --foreground\n"
-            "                 Parent process does not exit until its children have finished.\n"
+            "                 Master process runs in foreground and creates worker kids.\n"
 #if USE_WIN32_SERVICE
             "       -O options\n"
             "                 Set Windows Service Command line options in Registry.\n"
 #endif
             "       -R        Do not set REUSEADDR on port.\n"
             "       -S        Double-check swap during rebuild.\n"
@@ -1336,12 +1337,45 @@
         eventAdd("memPoolCleanIdlePools", Mem::CleanIdlePools, NULL, 15.0, 1);
     }
 
     configured_once = 1;
 }
 
+/// describes active (i.e., thrown but not yet handled) exception
+static std::ostream &
+CurrentException(std::ostream &os)
+{
+    if (std::current_exception()) {
+        try {
+            throw; // re-throw to recognize the exception type
+        }
+        catch (const std::exception &ex) {
+            os << ex.what();
+        }
+        catch (...) {
+            os << "[unknown exception type]";
+        }
+    } else {
+        os << "[no active exception]";
+    }
+    return os;
+}
+
+static void
+OnTerminate()
+{
+    // ignore recursive calls to avoid termination loops
+    static bool terminating = false;
+    if (terminating)
+        return;
+    terminating = true;
+
+    debugs(1, DBG_CRITICAL, "FATAL: Dying from an exception handling failure; exception: " << CurrentException);
+    abort();
+}
+
 /// unsafe main routine -- may throw
 int SquidMain(int argc, char **argv);
 /// unsafe main routine wrapper to catch exceptions
 static int SquidMainSafe(int argc, char **argv);
 
 #if USE_WIN32_SERVICE
@@ -1369,18 +1403,21 @@
     return SquidMainSafe(argc, argv);
 }
 
 static int
 SquidMainSafe(int argc, char **argv)
 {
+    (void)std::set_terminate(&OnTerminate);
+    // XXX: This top-level catch works great for startup, but, during runtime,
+    // it erases valuable stack info. TODO: Let stack-preserving OnTerminate()
+    // handle FATAL runtime errors by splitting main code into protected
+    // startup, unprotected runtime, and protected termination sections!
     try {
         return SquidMain(argc, argv);
-    } catch (const std::exception &e) {
-        debugs(1, DBG_CRITICAL, "FATAL: " << e.what());
     } catch (...) {
-        debugs(1, DBG_CRITICAL, "FATAL: dying from an unhandled exception.");
+        debugs(1, DBG_CRITICAL, "FATAL: " << CurrentException);
     }
     return -1; // TODO: return EXIT_FAILURE instead
 }
 
 /// computes name and ID for the current kid process
 static void
@@ -1518,12 +1555,13 @@
 
         /* Shouldn't be needed for config parsing, but have not audited for such */
         StoreFileSystem::SetupAllFs();
 
         /* we may want the parsing process to set this up in the future */
         Store::Init();
+        Acl::Init();
         Auth::Init();      /* required for config parsing. NOP if !USE_AUTH */
         Ip::ProbeTransport(); // determine IPv4 or IPv6 capabilities before parsing.
 
         Format::Token::Init(); // XXX: temporary. Use a runners registry of pre-parse runners instead.
 
         try {
@@ -1759,45 +1797,53 @@
 static inline bool
 masterSignaled()
 {
     return (DebugSignal > 0 || RotateSignal > 0 || ReconfigureSignal > 0 || ShutdownSignal > 0);
 }
 
+#if !_SQUID_WINDOWS_
+/// makes the caller a daemon process running in the background
+static void
+GoIntoBackground()
+{
+    pid_t pid;
+    if ((pid = fork()) < 0) {
+        int xerrno = errno;
+        syslog(LOG_ALERT, "fork failed: %s", xstrerr(xerrno));
+        // continue anyway, mimicking --foreground mode (XXX?)
+    } else if (pid > 0) {
+        // parent
+        exit(EXIT_SUCCESS);
+    }
+    // child, running as a background daemon (or a failed-to-fork parent)
+}
+#endif /* !_SQUID_WINDOWS_ */
+
 static void
 watch_child(char *argv[])
 {
 #if !_SQUID_WINDOWS_
     char *prog;
-    PidStatus status_f, status;
     pid_t pid;
 #ifdef TIOCNOTTY
 
     int i;
 #endif
 
     int nullfd;
 
     enter_suid();
 
     openlog(APP_SHORTNAME, LOG_PID | LOG_NDELAY | LOG_CONS, LOG_LOCAL4);
 
-    if ((pid = fork()) < 0) {
-        int xerrno = errno;
-        syslog(LOG_ALERT, "fork failed: %s", xstrerr(xerrno));
-    } else if (pid > 0) {
-        // parent
-        if (opt_foreground) {
-            if (WaitForAnyPid(status_f, 0) < 0) {
-                int xerrno = errno;
-                syslog(LOG_ALERT, "WaitForAnyPid failed: %s", xstrerr(xerrno));
-            }
-        }
-
-        exit(0);
-    }
+    if (!opt_foreground)
+        GoIntoBackground();
 
+    // TODO: Fails with --foreground if the calling process is process group
+    //       leader, which is always (?) the case. Should probably moved to
+    //       GoIntoBackground and executed only after successfully forking
     if (setsid() < 0) {
         int xerrno = errno;
         syslog(LOG_ALERT, "setsid failed: %s", xstrerr(xerrno));
     }
 
     closelog();
@@ -1901,12 +1947,13 @@
         // With the WNOHANG option, we could check whether WaitForAnyPid() was
         // aborted by a dying kid or a signal, but it is not required: The
         // next do/while loop will check again for any dying kids.
         int waitFlag = 0;
         if (masterSignaled())
             waitFlag = WNOHANG;
+        PidStatus status;
         pid = WaitForAnyPid(status, waitFlag);
 
         // check for a stopped kid
         Kid* kid = pid > 0 ? TheKids.find(pid) : NULL;
         if (kid) {
             kid->stop(status);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/Makefile.am /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/Makefile.am
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/Makefile.am	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/Makefile.am	2017-07-02 16:41:18.000000000 +0800
@@ -480,12 +480,14 @@
 	wccp2.h \
 	wccp2.cc \
 	whois.h \
 	whois.cc \
 	wordlist.h \
 	wordlist.cc \
+	XactionInitiator.h \
+	XactionInitiator.cc \
 	$(WIN32_SOURCE) \
 	$(WINSVC_SOURCE)
 
 EXTRA_squid_SOURCES = \
 	$(all_AUTHMODULES) \
 	ConfigOption.h \
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/Makefile.in	2017-06-01 20:54:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/Makefile.in	2017-07-02 16:41:24.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
@@ -306,14 +306,15 @@
 	StoreMetaVary.cc StoreMetaVary.h StoreSearch.h StoreStats.cc \
 	StoreStats.h StoreSwapLogData.cc StoreSwapLogData.h \
 	swap_log_op.h Transients.cc Transients.h MemStore.cc \
 	MemStore.h time.cc TimeOrTag.h tools.h tools.cc tunnel.cc \
 	typedefs.h unlinkd.h unlinkd.cc url.cc URL.h urn.h urn.cc \
 	wccp.h wccp.cc wccp2.h wccp2.cc whois.h whois.cc wordlist.h \
-	wordlist.cc win32.cc WinSvc.cc LoadableModule.h \
-	LoadableModule.cc LoadableModules.h LoadableModules.cc
+	wordlist.cc XactionInitiator.h XactionInitiator.cc win32.cc \
+	WinSvc.cc LoadableModule.h LoadableModule.cc LoadableModules.h \
+	LoadableModules.cc
 am__objects_1 = AclRegs.$(OBJEXT) AuthReg.$(OBJEXT)
 am__objects_2 = delay_pools.$(OBJEXT) DelayId.$(OBJEXT) \
 	DelayBucket.$(OBJEXT) DelayConfig.$(OBJEXT) \
 	DelayPool.$(OBJEXT) DelaySpec.$(OBJEXT) DelayTagged.$(OBJEXT) \
 	DelayUser.$(OBJEXT) DelayVector.$(OBJEXT) \
 	ClientDelayConfig.$(OBJEXT)
@@ -380,14 +381,14 @@
 	store_swapout.$(OBJEXT) StoreMetaUnpacker.$(OBJEXT) \
 	$(am__objects_11) StoreStats.$(OBJEXT) \
 	StoreSwapLogData.$(OBJEXT) Transients.$(OBJEXT) \
 	MemStore.$(OBJEXT) time.$(OBJEXT) tools.$(OBJEXT) \
 	tunnel.$(OBJEXT) $(am__objects_12) url.$(OBJEXT) urn.$(OBJEXT) \
 	wccp.$(OBJEXT) wccp2.$(OBJEXT) whois.$(OBJEXT) \
-	wordlist.$(OBJEXT) $(am__objects_13) $(am__objects_14) \
-	$(am__objects_16)
+	wordlist.$(OBJEXT) XactionInitiator.$(OBJEXT) \
+	$(am__objects_13) $(am__objects_14) $(am__objects_16)
 am__EXTRA_squid_SOURCES_DIST = ConfigOption.h CommonPool.h \
 	CompositePoolNode.h delay_pools.cc DelayId.cc DelayId.h \
 	DelayIdComposite.h DelayBucket.cc DelayBucket.h DelayConfig.cc \
 	DelayConfig.h DelayPool.cc DelayPool.h DelayPools.h \
 	DelaySpec.cc DelaySpec.h DelayTagged.cc DelayTagged.h \
 	DelayUser.cc DelayUser.h DelayVector.cc DelayVector.h \
@@ -2902,14 +2903,14 @@
 	StoreMetaUnpacker.cc StoreMetaUnpacker.h $(STOREMETA_SOURCE) \
 	StoreSearch.h StoreStats.cc StoreStats.h StoreSwapLogData.cc \
 	StoreSwapLogData.h swap_log_op.h Transients.cc Transients.h \
 	MemStore.cc MemStore.h time.cc TimeOrTag.h tools.h tools.cc \
 	tunnel.cc typedefs.h $(UNLINKDSOURCE) url.cc URL.h urn.h \
 	urn.cc wccp.h wccp.cc wccp2.h wccp2.cc whois.h whois.cc \
-	wordlist.h wordlist.cc $(WIN32_SOURCE) $(WINSVC_SOURCE) \
-	$(am__append_9)
+	wordlist.h wordlist.cc XactionInitiator.h XactionInitiator.cc \
+	$(WIN32_SOURCE) $(WINSVC_SOURCE) $(am__append_9)
 EXTRA_squid_SOURCES = \
 	$(all_AUTHMODULES) \
 	ConfigOption.h \
 	$(DELAY_POOL_ALL_SOURCE) \
 	htcp.cc \
 	htcp.h \
@@ -6613,12 +6614,13 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/StoreStats.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/StoreSwapLogData.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/StrList.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/String.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Transients.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/WinSvc.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/XactionInitiator.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cache_cf.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cache_manager.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/carp.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cbdata.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cf_gen.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clientStream.Po@am__quote@
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/MasterXaction.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/MasterXaction.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/MasterXaction.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/MasterXaction.h	2017-07-02 16:41:18.000000000 +0800
@@ -7,15 +7,18 @@
  */
 
 #ifndef SQUID_SRC_MASTERXACTION_H
 #define SQUID_SRC_MASTERXACTION_H
 
 #include "anyp/forward.h"
+#include "anyp/PortCfg.h"
 #include "base/InstanceId.h"
 #include "base/Lock.h"
+#include "base/RefCount.h"
 #include "comm/forward.h"
+#include "XactionInitiator.h"
 
 /** Master transaction details.
  *
  * Aggregates historical data from individual related protocol-specific
  * transactions such as an HTTP client transaction and the corresponding
  * HTTP or FTP server transaction.
@@ -35,20 +38,25 @@
  */
 class MasterXaction : public RefCountable
 {
 public:
     typedef RefCount<MasterXaction> Pointer;
 
+    explicit MasterXaction(const XactionInitiator anInitiator) : initiator(anInitiator) {};
+
     /// transaction ID.
     InstanceId<MasterXaction> id;
 
     /// the listening port which originated this transaction
     AnyP::PortCfgPointer squidPort;
 
     /// the client TCP connection which originated this transaction
     Comm::ConnectionPointer tcpClient;
 
+    /// the initiator of this transaction
+    XactionInitiator initiator;
+
     // TODO: add state from other Jobs in the transaction
 };
 
 #endif /* SQUID_SRC_MASTERXACTION_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/mem/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/mem/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/mem/Makefile.in	2017-06-01 21:00:44.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/mem/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/MemStore.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/MemStore.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/MemStore.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/MemStore.cc	2017-07-02 16:41:18.000000000 +0800
@@ -471,13 +471,13 @@
         e.setMemStatus(NOT_IN_MEMORY);
     }
     assert(e.swap_status == SWAPOUT_NONE); // set in StoreEntry constructor
     e.ping_status = PING_NONE;
 
     EBIT_CLR(e.flags, RELEASE_REQUEST);
-    EBIT_CLR(e.flags, KEY_PRIVATE);
+    e.clearPrivate();
     EBIT_SET(e.flags, ENTRY_VALIDATED);
 
     MemObject::MemCache &mc = e.mem_obj->memCache;
     mc.index = index;
     mc.io = MemObject::ioReading;
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/mgr/Forwarder.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/mgr/Forwarder.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/mgr/Forwarder.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/mgr/Forwarder.cc	2017-07-02 16:41:18.000000000 +0800
@@ -99,23 +99,12 @@
 {
     debugs(16, 5, HERE);
     conn = NULL; // needed?
     mustStop("commClosed");
 }
 
-/// called when Coordinator starts processing the request
-void
-Mgr::Forwarder::handleRemoteAck()
-{
-    Ipc::Forwarder::handleRemoteAck();
-
-    Must(entry != NULL);
-    EBIT_CLR(entry->flags, ENTRY_FWD_HDR_WAIT);
-    entry->complete();
-}
-
 /// send error page
 void
 Mgr::Forwarder::sendError(ErrorState *error)
 {
     debugs(16, 3, HERE);
     Must(error != NULL);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/mgr/Forwarder.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/mgr/Forwarder.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/mgr/Forwarder.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/mgr/Forwarder.h	2017-07-02 16:41:18.000000000 +0800
@@ -39,13 +39,12 @@
 protected:
     /* Ipc::Forwarder API */
     virtual void cleanup(); ///< perform cleanup actions
     virtual void handleError();
     virtual void handleTimeout();
     virtual void handleException(const std::exception& e);
-    virtual void handleRemoteAck();
 
 private:
     void noteCommClosed(const CommCloseCbParams& params);
     void sendError(ErrorState* error);
 
 private:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/mgr/Inquirer.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/mgr/Inquirer.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/mgr/Inquirer.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/mgr/Inquirer.cc	2017-07-02 16:41:18.000000000 +0800
@@ -73,13 +73,14 @@
     Must(aggrAction != NULL);
 
     std::unique_ptr<MemBuf> replyBuf;
     if (strands.empty()) {
         LOCAL_ARRAY(char, url, MAX_URL);
         snprintf(url, MAX_URL, "%s", aggrAction->command().params.httpUri.termedBuf());
-        HttpRequest *req = HttpRequest::CreateFromUrl(url);
+        const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initIpc);
+        HttpRequest *req = HttpRequest::FromUrl(url, mx);
         ErrorState err(ERR_INVALID_URL, Http::scNotFound, req);
         std::unique_ptr<HttpReply> reply(err.BuildHttpReply());
         replyBuf.reset(reply->pack());
     } else {
         std::unique_ptr<HttpReply> reply(new HttpReply);
         reply->setHeaders(Http::scOkay, NULL, "text/plain", -1, squid_curtime, squid_curtime);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/mgr/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/mgr/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/mgr/Makefile.in	2017-06-01 21:00:48.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/mgr/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/mime.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/mime.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/mime.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/mime.cc	2017-07-02 16:41:18.000000000 +0800
@@ -399,13 +399,14 @@
     flags.cachable = true;
     StoreEntry *e = storeCreateEntry(url_,url_,flags,Http::METHOD_GET);
     assert(e != NULL);
     EBIT_SET(e->flags, ENTRY_SPECIAL);
     e->setPublicKey();
     e->buffer();
-    HttpRequest *r = HttpRequest::CreateFromUrl(url_);
+    const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initIcon);
+    HttpRequest *r = HttpRequest::FromUrl(url_, mx);
 
     if (NULL == r)
         fatalf("mimeLoadIcon: cannot parse internal URL: %s", url_);
 
     e->mem_obj->request = r;
     HTTPMSGLOCK(e->mem_obj->request);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/neighbors.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/neighbors.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/neighbors.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/neighbors.cc	2017-07-02 16:41:18.000000000 +0800
@@ -165,13 +165,13 @@
 
     if (p->access == NULL)
         return true;
 
     ACLFilledChecklist checklist(p->access, request, NULL);
 
-    return (checklist.fastCheck() == ACCESS_ALLOWED);
+    return checklist.fastCheck().allowed();
 }
 
 /* Return TRUE if it is okay to send an ICP request to this CachePeer.   */
 static int
 peerWouldBePinged(const CachePeer * p, HttpRequest * request)
 {
@@ -1379,13 +1379,14 @@
     assert(p->type == PEER_MULTICAST);
     p->mcast.flags.count_event_pending = false;
     snprintf(url, MAX_URL, "http://");
     p->in_addr.toUrl(url+7, MAX_URL -8 );
     strcat(url, "/");
     fake = storeCreateEntry(url, url, RequestFlags(), Http::METHOD_GET);
-    HttpRequest *req = HttpRequest::CreateFromUrl(url);
+    const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initPeerMcast);
+    HttpRequest *req = HttpRequest::FromUrl(url, mx);
     psstate = new ps_state;
     psstate->request = req;
     HTTPMSGLOCK(psstate->request);
     psstate->entry = fake;
     psstate->callback = NULL;
     psstate->callback_data = cbdataReference(p);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/Notes.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/Notes.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/Notes.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/Notes.cc	2017-07-02 16:41:18.000000000 +0800
@@ -44,16 +44,16 @@
     ACLFilledChecklist ch(NULL, request, NULL);
     ch.reply = reply;
     if (reply)
         HTTPMSGLOCK(ch.reply);
 
     for (VLI i = values.begin(); i != values.end(); ++i ) {
-        const int ret= ch.fastCheck((*i)->aclList);
+        const auto ret= ch.fastCheck((*i)->aclList);
         debugs(93, 5, HERE << "Check for header name: " << key << ": " << (*i)->value
                <<", HttpRequest: " << request << " HttpReply: " << reply << " matched: " << ret);
-        if (ret == ACCESS_ALLOWED) {
+        if (ret.allowed()) {
             if (al != NULL && (*i)->valueFormat != NULL) {
                 static MemBuf mb;
                 mb.reset();
                 (*i)->valueFormat->assemble(mb, al, 0);
                 return mb.content();
             } else
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/parser/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/parser/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/parser/Makefile.in	2017-06-01 21:00:53.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/parser/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/peer_digest.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/peer_digest.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/peer_digest.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/peer_digest.cc	2017-07-02 16:41:18.000000000 +0800
@@ -316,13 +316,14 @@
 
     if (p->digest_url)
         url = xstrdup(p->digest_url);
     else
         url = xstrdup(internalRemoteUri(p->host, p->http_port, "/squid-internal-periodic/", SBuf(StoreDigestFileName)));
 
-    req = HttpRequest::CreateFromUrl(url);
+    const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initCacheDigest);
+    req = HttpRequest::FromUrl(url, mx);
 
     assert(req);
 
     key = storeKeyPublicByRequest(req);
 
     debugs(72, 2, "peerDigestRequest: " << url << " key: " << storeKeyText(key));
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/PeerPoolMgr.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/PeerPoolMgr.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/PeerPoolMgr.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/PeerPoolMgr.cc	2017-07-02 16:41:18.000000000 +0800
@@ -15,12 +15,13 @@
 #include "comm/ConnOpener.h"
 #include "Debug.h"
 #include "fd.h"
 #include "FwdState.h"
 #include "globals.h"
 #include "HttpRequest.h"
+#include "MasterXaction.h"
 #include "neighbors.h"
 #include "pconn.h"
 #include "PeerPoolMgr.h"
 #include "security/BlindPeerConnector.h"
 #include "SquidConfig.h"
 #include "SquidTime.h"
@@ -56,15 +57,16 @@
 
 void
 PeerPoolMgr::start()
 {
     AsyncJob::start();
 
+    const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initPeerPool);
     // ErrorState, getOutgoingAddress(), and other APIs may require a request.
     // We fake one. TODO: Optionally send this request to peers?
-    request = new HttpRequest(Http::METHOD_OPTIONS, AnyP::PROTO_HTTP, "http", "*");
+    request = new HttpRequest(Http::METHOD_OPTIONS, AnyP::PROTO_HTTP, "http", "*", mx);
     request->url.host(peer->host);
 
     checkpoint("peer initialized");
 }
 
 void
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/redirect.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/redirect.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/redirect.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/redirect.cc	2017-07-02 16:41:18.000000000 +0800
@@ -105,15 +105,15 @@
             } else
                 replySize = reply.other().contentSize();
 
             // if we still have anything in other() after all that
             // parse it into status=, url= and rewrite-url= keys
             if (replySize) {
-                /* 2012-06-28: This cast is due to urlParse() truncating too-long URLs itself.
+                /* 2012-06-28: This cast is due to URL::parse() truncating too-long URLs itself.
                  * At this point altering the helper buffer in that way is not harmful, but annoying.
-                 * When Bug 1961 is resolved and urlParse has a const API, this needs to die.
+                 * When Bug 1961 is resolved and URL::parse has a const API, this needs to die.
                  */
                 MemBuf replyBuffer;
                 replyBuffer.init(replySize, replySize);
                 replyBuffer.append(reply.other().content(), reply.other().contentSize());
                 char * result = replyBuffer.content();
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/repl/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/repl/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/repl/Makefile.in	2017-06-01 21:00:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/repl/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/RequestFlags.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/RequestFlags.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/RequestFlags.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/RequestFlags.h	2017-07-02 16:41:18.000000000 +0800
@@ -69,15 +69,12 @@
     /// The client IP address should be spoofed when connecting to the web server.
     /// This applies to TPROXY traffic that has not had spoofing disabled through
     /// the spoof_client_ip squid.conf ACL.
     bool spoofClientIp = false;
     /** set if the request is internal (\see ClientHttpRequest::flags.internal)*/
     bool internal = false;
-    //XXX this is set in in clientBeginRequest, but never tested.
-    /** set for internally-generated requests */
-    bool internalClient = false;
     /** if set, request to try very hard to keep the connection alive */
     bool mustKeepalive = false;
     /** set if the rquest wants connection oriented auth */
     bool connectionAuth = false;
     /** set if connection oriented auth can not be supported */
     bool connectionAuthDisabled = false;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/sbuf/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/sbuf/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/sbuf/Makefile.in	2017-06-01 21:00:59.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/sbuf/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/cert_generators/file/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/cert_generators/file/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/cert_generators/file/Makefile.in	2017-06-01 21:01:04.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/cert_generators/file/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/cert_generators/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/cert_generators/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/cert_generators/Makefile.in	2017-06-01 21:01:03.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/cert_generators/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/cert_validators/fake/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/cert_validators/fake/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/cert_validators/fake/Makefile.in	2017-06-01 21:01:07.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/cert_validators/fake/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/cert_validators/fake/security_fake_certverify.8 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/cert_validators/fake/security_fake_certverify.8
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/cert_validators/fake/security_fake_certverify.8	2017-06-02 05:59:08.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/cert_validators/fake/security_fake_certverify.8	2017-07-02 16:57:36.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 4.08 (Pod::Simple 3.32)
+.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -126,13 +126,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "SECURITY_FAKE_CERTVERIFY 8"
-.TH SECURITY_FAKE_CERTVERIFY 8 "2017-06-01" "perl v5.24.1" "User Contributed Perl Documentation"
+.TH SECURITY_FAKE_CERTVERIFY 8 "2017-07-02" "perl v5.24.1" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 security_fake_certverify \- A fake cert validation helper for Squid
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/cert_validators/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/cert_validators/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/cert_validators/Makefile.in	2017-06-01 21:01:05.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/cert_validators/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/Makefile.in	2017-06-01 21:01:01.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/PeerConnector.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/PeerConnector.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/PeerConnector.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/PeerConnector.cc	2017-07-02 16:41:18.000000000 +0800
@@ -335,13 +335,13 @@
         assert(i->error_no != SSL_ERROR_NONE);
 
         if (!errDetails) {
             bool allowed = false;
             if (check) {
                 check->sslErrors = new Security::CertErrors(Security::CertError(i->error_no, i->cert, i->error_depth));
-                if (check->fastCheck() == ACCESS_ALLOWED)
+                if (check->fastCheck().allowed())
                     allowed = true;
             }
             // else the Config.ssl_client.cert_error access list is not defined
             // and the first error will cause the error page
 
             if (allowed) {
@@ -630,13 +630,13 @@
 {
     AsyncCall::Pointer certCallback = asyncCall(81, 4,
                                       "Security::PeerConnector::certDownloadingDone",
                                       PeerConnectorCertDownloaderDialer(&Security::PeerConnector::certDownloadingDone, this));
 
     const Downloader *csd = (request ? dynamic_cast<const Downloader*>(request->downloader.valid()) : nullptr);
-    Downloader *dl = new Downloader(url, certCallback, csd ? csd->nestedLevel() + 1 : 1);
+    Downloader *dl = new Downloader(url, certCallback, XactionInitiator::initCertFetcher, csd ? csd->nestedLevel() + 1 : 1);
     AsyncJob::Start(dl);
 }
 
 void
 Security::PeerConnector::certDownloadingDone(SBuf &obj, int downloadStatus)
 {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/Session.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/Session.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/Session.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/Session.cc	2017-07-02 16:41:18.000000000 +0800
@@ -20,12 +20,17 @@
 #include "SquidConfig.h"
 #include "ssl/bio.h"
 
 #define SSL_SESSION_ID_SIZE 32
 #define SSL_SESSION_MAX_SIZE 10*1024
 
+#if USE_OPENSSL
+static Ipc::MemMap *SessionCache = nullptr;
+static const char *SessionCacheName = "tls_session_cache";
+#endif
+
 #if USE_OPENSSL || USE_GNUTLS
 static int
 tls_read_method(int fd, char *buf, int len)
 {
     auto session = fd_table[fd].ssl.get();
     debugs(83, 3, "started for session=" << (void*)session);
@@ -271,32 +276,139 @@
             return true;
     }
 
     return false;
 }
 
+#if USE_OPENSSL
+static int
+store_session_cb(SSL *ssl, SSL_SESSION *session)
+{
+    if (!SessionCache)
+        return 0;
+
+    debugs(83, 5, "Request to store SSL_SESSION");
+
+    SSL_SESSION_set_timeout(session, Config.SSL.session_ttl);
+
+#if HAVE_LIBSSL_SSL_SESSION_GET_ID
+    unsigned int idlen;
+    const unsigned char *id = SSL_SESSION_get_id(session, &idlen);
+#else
+    unsigned char *id = session->session_id;
+    unsigned int idlen = session->session_id_length;
+#endif
+    // XXX: the other calls [to openForReading()] do not copy the sessionId to a char buffer, does this really have to?
+    unsigned char key[MEMMAP_SLOT_KEY_SIZE];
+    // Session ids are of size 32bytes. They should always fit to a
+    // MemMap::Slot::key
+    assert(idlen <= MEMMAP_SLOT_KEY_SIZE);
+    memset(key, 0, sizeof(key));
+    memcpy(key, id, idlen);
+    int pos;
+    if (auto slotW = SessionCache->openForWriting(static_cast<const cache_key*>(key), pos)) {
+        int lenRequired = i2d_SSL_SESSION(session, nullptr);
+        if (lenRequired <  MEMMAP_SLOT_DATA_SIZE) {
+            unsigned char *p = static_cast<unsigned char *>(slotW->p);
+            lenRequired = i2d_SSL_SESSION(session, &p);
+            slotW->set(key, nullptr, lenRequired, squid_curtime + Config.SSL.session_ttl);
+        }
+        SessionCache->closeForWriting(pos);
+        debugs(83, 5, "wrote an SSL_SESSION entry of size " << lenRequired << " at pos " << pos);
+    }
+    return 0;
+}
+
+static void
+remove_session_cb(SSL_CTX *, SSL_SESSION *sessionID)
+{
+    if (!SessionCache)
+        return;
+
+    debugs(83, 5, "Request to remove corrupted or not valid SSL_SESSION");
+    int pos;
+    if (SessionCache->openForReading(reinterpret_cast<const cache_key*>(sessionID), pos)) {
+        SessionCache->closeForReading(pos);
+        // TODO:
+        // What if we are not able to remove the session?
+        // Maybe schedule a job to remove it later?
+        // For now we just have an invalid entry in cache until will be expired
+        // The OpenSSL library will reject it when we try to use it
+        SessionCache->free(pos);
+    }
+}
+
+static SSL_SESSION *
+#if SQUID_USE_CONST_SSL_SESSION_CBID
+get_session_cb(SSL *, const unsigned char *sessionID, int len, int *copy)
+#else
+get_session_cb(SSL *, unsigned char *sessionID, int len, int *copy)
+#endif
+{
+    if (!SessionCache)
+        return nullptr;
+
+    const unsigned int *p = reinterpret_cast<const unsigned int *>(sessionID);
+    debugs(83, 5, "Request to search for SSL_SESSION of len: " <<
+           len << p[0] << ":" << p[1]);
+
+    SSL_SESSION *session = nullptr;
+    int pos;
+    if (const auto slot = SessionCache->openForReading(static_cast<const cache_key*>(sessionID), pos)) {
+        if (slot->expire > squid_curtime) {
+            const unsigned char *ptr = slot->p;
+            session = d2i_SSL_SESSION(nullptr, &ptr, slot->pSize);
+            debugs(83, 5, "SSL_SESSION retrieved from cache at pos " << pos);
+        } else
+            debugs(83, 5, "SSL_SESSION in cache expired");
+        SessionCache->closeForReading(pos);
+    }
+
+    if (!session)
+        debugs(83, 5, "Failed to retrieve SSL_SESSION from cache\n");
+
+    // With the parameter copy the callback can require the SSL engine
+    // to increment the reference count of the SSL_SESSION object, Normally
+    // the reference count is not incremented and therefore the session must
+    // not be explicitly freed with SSL_SESSION_free(3).
+    *copy = 0;
+    return session;
+}
+
+void
+Security::SetSessionCacheCallbacks(Security::ContextPointer &ctx)
+{
+    if (SessionCache) {
+        SSL_CTX_set_session_cache_mode(ctx.get(), SSL_SESS_CACHE_SERVER|SSL_SESS_CACHE_NO_INTERNAL);
+        SSL_CTX_sess_set_new_cb(ctx.get(), store_session_cb);
+        SSL_CTX_sess_set_remove_cb(ctx.get(), remove_session_cb);
+        SSL_CTX_sess_set_get_cb(ctx.get(), get_session_cb);
+    }
+}
+#endif /* USE_OPENSSL */
+
 void
 initializeSessionCache()
 {
 #if USE_OPENSSL
     // Check if the MemMap keys and data are enough big to hold
     // session ids and session data
     assert(SSL_SESSION_ID_SIZE >= MEMMAP_SLOT_KEY_SIZE);
     assert(SSL_SESSION_MAX_SIZE >= MEMMAP_SLOT_DATA_SIZE);
 
     int configuredItems = ::Config.SSL.sessionCacheSize / sizeof(Ipc::MemMap::Slot);
     if (IamWorkerProcess() && configuredItems)
-        Ssl::SessionCache = new Ipc::MemMap(Ssl::SessionCacheName);
+        SessionCache = new Ipc::MemMap(SessionCacheName);
     else {
-        Ssl::SessionCache = nullptr;
+        SessionCache = nullptr;
         return;
     }
 
     for (AnyP::PortCfgPointer s = HttpPortList; s != nullptr; s = s->next) {
         if (s->secure.staticContext)
-            Ssl::SetSessionCallbacks(s->secure.staticContext);
+            Security::SetSessionCacheCallbacks(s->secure.staticContext);
     }
 #endif
 }
 
 /// initializes shared memory segments used by MemStore
 class SharedSessionCacheRr: public Ipc::Mem::RegisteredRunner
@@ -316,35 +428,35 @@
 
 RunnerRegistrationEntry(SharedSessionCacheRr);
 
 void
 SharedSessionCacheRr::useConfig()
 {
-#if USE_OPENSSL // while Ssl:: bits in use
-    if (Ssl::SessionCache || !isTlsServer()) //no need to configure ssl session cache.
+#if USE_OPENSSL
+    if (SessionCache || !isTlsServer()) // no need to configure SSL_SESSION* cache.
         return;
 
     Ipc::Mem::RegisteredRunner::useConfig();
     initializeSessionCache();
 #endif
 }
 
 void
 SharedSessionCacheRr::create()
 {
-    if (!isTlsServer()) //no need to configure ssl session cache.
+    if (!isTlsServer()) // no need to configure SSL_SESSION* cache.
         return;
 
-#if USE_OPENSSL // while Ssl:: bits in use
+#if USE_OPENSSL
     if (int items = Config.SSL.sessionCacheSize / sizeof(Ipc::MemMap::Slot))
-        owner = Ipc::MemMap::Init(Ssl::SessionCacheName, items);
+        owner = Ipc::MemMap::Init(SessionCacheName, items);
 #endif
 }
 
 SharedSessionCacheRr::~SharedSessionCacheRr()
 {
     // XXX: Enable after testing to reduce at-exit memory "leaks".
-    // delete Ssl::SessionCache;
+    // delete SessionCache;
 
     delete owner;
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/Session.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/Session.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/security/Session.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/security/Session.h	2017-07-02 16:41:18.000000000 +0800
@@ -75,12 +75,16 @@
 
 /// Set the data for resuming a previous session.
 /// Needs to be done before using the SessionPointer for a handshake.
 void SetSessionResumeData(const Security::SessionPointer &, const Security::SessionStatePointer &);
 
 #if USE_OPENSSL
+// TODO: remove from public API. It is only public because of configureSslContext() in ssl/support.cc
+/// Setup the given TLS context with callbacks used to manage the session cache
+void SetSessionCacheCallbacks(Security::ContextPointer &);
+
 /// Helper function to retrieve a (non-locked) ContextPointer from a SessionPointer
 inline Security::ContextPointer
 GetFrom(Security::SessionPointer &s)
 {
     auto *ctx = SSL_get_SSL_CTX(s.get());
     return Security::ContextPointer(ctx, [](SSL_CTX *) {/* nothing to unlock/free */});
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/servers/FtpServer.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/servers/FtpServer.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/servers/FtpServer.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/servers/FtpServer.cc	2017-07-02 16:41:18.000000000 +0800
@@ -300,18 +300,14 @@
     Http::StreamPointer context = pipeline.front();
     Must(context != nullptr);
     ClientHttpRequest *const http = context->http;
     Must(http != NULL);
     HttpRequest *const request = http->request;
     Must(request != NULL);
-
-    // this is not an idle connection, so we do not want I/O monitoring
-    const bool monitor = false;
-
     // make FTP peer connection exclusive to our request
-    pinConnection(conn, request, conn->getPeer(), false, monitor);
+    pinBusyConnection(conn, request);
 }
 
 void
 Ftp::Server::clientPinnedConnectionClosed(const CommCloseCbParams &io)
 {
     ConnStateData::clientPinnedConnectionClosed(io);
@@ -725,13 +721,15 @@
         Http::METHOD_PUT : Http::METHOD_GET;
 
     const SBuf *path = (params.length() && CommandHasPathParameter(cmd)) ?
                        &params : NULL;
     calcUri(path);
     char *newUri = xstrdup(uri.c_str());
-    HttpRequest *const request = HttpRequest::CreateFromUrl(newUri, method);
+    MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initClient);
+    mx->tcpClient = clientConnection;
+    HttpRequest *const request = HttpRequest::FromUrl(newUri, mx, method);
     if (!request) {
         debugs(33, 5, "Invalid FTP URL: " << uri);
         uri.clear();
         safe_free(newUri);
         return earlyError(EarlyErrorKind::InvalidUri);
     }
@@ -1542,13 +1540,13 @@
         return false;
 
     if (Config.accessList.forceRequestBodyContinuation) {
         ClientHttpRequest *http = pipeline.front()->http;
         HttpRequest *request = http->request;
         ACLFilledChecklist bodyContinuationCheck(Config.accessList.forceRequestBodyContinuation, request, NULL);
-        if (bodyContinuationCheck.fastCheck() == ACCESS_ALLOWED) {
+        if (bodyContinuationCheck.fastCheck().allowed()) {
             request->forcedBodyContinuation = true;
             if (checkDataConnPost()) {
                 // Write control Msg
                 writeEarlyReply(150, "Data connection opened");
                 maybeReadUploadData();
             } else {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/servers/Http1Server.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/servers/Http1Server.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/servers/Http1Server.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/servers/Http1Server.cc	2017-07-02 16:41:18.000000000 +0800
@@ -129,13 +129,15 @@
             // clientProcessRequestFinished method
         }
 
         return false;
     }
 
-    if ((request = HttpRequest::CreateFromUrl(http->uri, parser_->method())) == NULL) {
+    MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initClient);
+    mx->tcpClient = clientConnection;
+    if ((request = HttpRequest::FromUrl(http->uri, mx, parser_->method())) == NULL) {
         debugs(33, 5, "Invalid URL: " << http->uri);
         // setLogUri should called before repContext->setReplyToError
         setLogUri(http, http->uri, true);
 
         const char * requestErrorBytes = inBuf.c_str();
         if (!clientTunnelOnError(this, context, request, parser_->method(), ERR_INVALID_URL)) {
@@ -245,13 +247,13 @@
             clientProcessRequestFinished(this, request);
             return;
         }
 
         if (Config.accessList.forceRequestBodyContinuation) {
             ACLFilledChecklist bodyContinuationCheck(Config.accessList.forceRequestBodyContinuation, request.getRaw(), NULL);
-            if (bodyContinuationCheck.fastCheck() == ACCESS_ALLOWED) {
+            if (bodyContinuationCheck.fastCheck().allowed()) {
                 debugs(33, 5, "Body Continuation forced");
                 request->forcedBodyContinuation = true;
                 //sendControlMsg
                 HttpReply::Pointer rep = new HttpReply;
                 rep->sline.set(Http::ProtocolVersion(), Http::scContinue);
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/servers/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/servers/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/servers/Makefile.in	2017-06-01 21:01:09.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/servers/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/servers/Server.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/servers/Server.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/servers/Server.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/servers/Server.h	2017-07-02 16:41:18.000000000 +0800
@@ -16,21 +16,22 @@
 #include "base/AsyncJob.h"
 #include "BodyPipe.h"
 #include "comm/Write.h"
 #include "CommCalls.h"
 #include "Pipeline.h"
 #include "sbuf/SBuf.h"
+#include "servers/forward.h"
 
 /**
  * Common base for all Server classes used
  * to manage connections from clients.
  */
 class Server : virtual public AsyncJob, public BodyProducer
 {
 public:
-    Server(const MasterXaction::Pointer &xact);
+    Server(const MasterXactionPointer &xact);
     virtual ~Server() {}
 
     /* AsyncJob API */
     virtual void start();
     virtual bool doneAll() const;
     virtual void swanSong();
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/snmp/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/snmp/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/snmp/Makefile.in	2017-06-01 21:01:11.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/snmp/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/snmp_core.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/snmp_core.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/snmp_core.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/snmp_core.cc	2017-07-02 16:41:18.000000000 +0800
@@ -380,13 +380,12 @@
 snmpDecodePacket(SnmpRequest * rq)
 {
     struct snmp_pdu *PDU;
     u_char *Community;
     u_char *buf = rq->buf;
     int len = rq->len;
-    allow_t allow = ACCESS_DENIED;
 
     if (!Config.accessList.snmp) {
         debugs(49, DBG_IMPORTANT, "WARNING: snmp_access not configured. agent query DENIED from : " << rq->from);
         return;
     }
 
@@ -399,15 +398,14 @@
     /* Check if we have explicit permission to access SNMP data.
      * default (set above) is to deny all */
     if (Community) {
         ACLFilledChecklist checklist(Config.accessList.snmp, NULL, NULL);
         checklist.src_addr = rq->from;
         checklist.snmp_community = (char *) Community;
-        allow = checklist.fastCheck();
 
-        if (allow == ACCESS_ALLOWED && (snmp_coexist_V2toV1(PDU))) {
+        if (checklist.fastCheck().allowed() && (snmp_coexist_V2toV1(PDU))) {
             rq->community = Community;
             rq->PDU = PDU;
             debugs(49, 5, "snmpAgentParse: reqid=[" << PDU->reqid << "]");
             snmpConstructReponse(rq);
         } else {
             debugs(49, DBG_IMPORTANT, "WARNING: SNMP agent query DENIED from : " << rq->from);
@@ -1127,54 +1125,12 @@
     if ( size == sizeof(struct in_addr) )
         addr = i4addr;
     else
         addr = i6addr;
 }
 
-/* SNMP checklists */
-#include "acl/Strategised.h"
-#include "acl/Strategy.h"
-#include "acl/StringData.h"
-
-class ACLSNMPCommunityStrategy : public ACLStrategy<char const *>
-{
-
-public:
-    virtual int match (ACLData<MatchType> * &, ACLFilledChecklist *, ACLFlags &);
-    static ACLSNMPCommunityStrategy *Instance();
-    /* Not implemented to prevent copies of the instance. */
-    /* Not private to prevent brain dead g++ warnings about
-     * private constructors with no friends */
-    ACLSNMPCommunityStrategy(ACLSNMPCommunityStrategy const &);
-
-private:
-    static ACLSNMPCommunityStrategy Instance_;
-    ACLSNMPCommunityStrategy() {}
-
-    ACLSNMPCommunityStrategy&operator=(ACLSNMPCommunityStrategy const &);
-};
-
-class ACLSNMPCommunity
-{
-
-private:
-    static ACL::Prototype RegistryProtoype;
-    static ACLStrategised<char const *> RegistryEntry_;
-};
-
-ACL::Prototype ACLSNMPCommunity::RegistryProtoype(&ACLSNMPCommunity::RegistryEntry_, "snmp_community");
-ACLStrategised<char const *> ACLSNMPCommunity::RegistryEntry_(new ACLStringData, ACLSNMPCommunityStrategy::Instance(), "snmp_community");
-
 int
-ACLSNMPCommunityStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist, ACLFlags &)
+ACLSNMPCommunityStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist *checklist)
 {
     return data->match (checklist->snmp_community);
 }
 
-ACLSNMPCommunityStrategy *
-ACLSNMPCommunityStrategy::Instance()
-{
-    return &Instance_;
-}
-
-ACLSNMPCommunityStrategy ACLSNMPCommunityStrategy::Instance_;
-
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/snmp_core.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/snmp_core.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/snmp_core.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/snmp_core.h	2017-07-02 16:41:18.000000000 +0800
@@ -8,12 +8,13 @@
 
 /* DEBUG: section 49    SNMP Interface */
 
 #ifndef SQUID_SNMP_CORE_H
 #define SQUID_SNMP_CORE_H
 
+#include "acl/Strategy.h"
 #include "cache_snmp.h"
 #include "comm/forward.h"
 #include "ip/forward.h"
 
 class MemBuf;
 
@@ -48,8 +49,14 @@
 void snmpOpenPorts(void);
 void snmpClosePorts(void);
 const char * snmpDebugOid(oid * Name, snint Len, MemBuf &outbuf);
 void addr2oid(Ip::Address &addr, oid *Dest);
 void oid2addr(oid *Dest, Ip::Address &addr, u_int code);
 
+class ACLSNMPCommunityStrategy: public ACLStrategy<char const *>
+{
+public:
+    virtual int match (ACLData<MatchType> *&data, ACLFilledChecklist *checklist) override;
+};
+
 #endif /* SQUID_SNMP_CORE_H */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/squid.8.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/squid.8.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/squid.8.in	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/squid.8.in	2017-07-02 16:41:18.000000000 +0800
@@ -268,17 +268,17 @@
 .I Squid Developers mailing list
 .if !'po4a'hide' <squid-dev@squid-cache.org>
 .
 .SH SEE ALSO
 .if !'po4a'hide' .B cachemgr.cgi "(8), "
 .if !'po4a'hide' .B squidclient "(1), "
-.if !'po4a'hide' .B pam_auth "(8), "
-.if !'po4a'hide' .B squid_ldap_auth "(8), "
-.if !'po4a'hide' .B squid_ldap_group "(8), "
+.if !'po4a'hide' .B basic_pam_auth "(8), "
+.if !'po4a'hide' .B basic_ldap_auth "(8), "
+.if !'po4a'hide' .B ext_ldap_group_acl "(8), "
 .if !'po4a'hide' .B ext_session_acl "(8), "
-.if !'po4a'hide' .B squid_unix_group "(8), "
+.if !'po4a'hide' .B ext_unix_group_acl "(8), "
 .br
 The Squid FAQ wiki
 .if !'po4a'hide' http://wiki.squid-cache.org/SquidFaq
 .br
 The Squid Configuration Manual
 .if !'po4a'hide' http://www.squid-cache.org/Doc/config/
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ssl/helper.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ssl/helper.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ssl/helper.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ssl/helper.cc	2017-07-02 16:41:18.000000000 +0800
@@ -4,27 +4,72 @@
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
-#include "../helper.h"
 #include "anyp/PortCfg.h"
 #include "fs_io.h"
 #include "helper/Reply.h"
 #include "SquidConfig.h"
 #include "SquidString.h"
 #include "SquidTime.h"
+#include "src/helper.h"
 #include "ssl/cert_validate_message.h"
 #include "ssl/Config.h"
 #include "ssl/helper.h"
 #include "wordlist.h"
 
 Ssl::CertValidationHelper::LruCache *Ssl::CertValidationHelper::HelperCache = nullptr;
 
 #if USE_SSL_CRTD
+
+namespace Ssl {
+
+/// Initiator of an Ssl::Helper query.
+class GeneratorRequestor {
+public:
+    GeneratorRequestor(HLPCB *aCallback, void *aData): callback(aCallback), data(aData) {}
+    HLPCB *callback;
+    CallbackData data;
+};
+
+/// A pending Ssl::Helper request, combining the original and collapsed queries.
+class GeneratorRequest {
+    CBDATA_CLASS(GeneratorRequest);
+
+public:
+    /// adds a GeneratorRequestor
+    void emplace(HLPCB *callback, void *data) { requestors.emplace_back(callback, data); }
+
+    SBuf query; ///< Ssl::Helper request message (GeneratorRequests key)
+
+    /// Ssl::Helper request initiators waiting for the same answer (FIFO).
+    typedef std::vector<GeneratorRequestor> GeneratorRequestors;
+    GeneratorRequestors requestors;
+};
+
+/// Ssl::Helper query:GeneratorRequest map
+typedef std::unordered_map<SBuf, GeneratorRequest*> GeneratorRequests;
+
+static void HandleGeneratorReply(void *data, const ::Helper::Reply &reply);
+
+} // namespace Ssl
+
+CBDATA_NAMESPACED_CLASS_INIT(Ssl, GeneratorRequest);
+
+/// prints Ssl::GeneratorRequest for debugging
+static std::ostream &
+operator <<(std::ostream &os, const Ssl::GeneratorRequest &gr)
+{
+    return os << "crtGenRq" << gr.query.id.value << "/" << gr.requestors.size();
+}
+
+/// pending Ssl::Helper requests (to all certificate generator helpers combined)
+static Ssl::GeneratorRequests TheGeneratorRequests;
+
 Ssl::Helper * Ssl::Helper::GetInstance()
 {
     static Ssl::Helper sslHelper;
     return &sslHelper;
 }
 
@@ -79,20 +124,50 @@
 }
 
 void Ssl::Helper::sslSubmit(CrtdMessage const & message, HLPCB * callback, void * data)
 {
     assert(ssl_crtd);
 
-    std::string msg = message.compose();
-    msg += '\n';
-    if (!ssl_crtd->trySubmit(msg.c_str(), callback, data)) {
-        ::Helper::Reply failReply(::Helper::BrokenHelper);
-        failReply.notes.add("message", "error 45 Temporary network problem, please retry later");
-        callback(data, failReply);
+    SBuf rawMessage(message.compose().c_str()); // XXX: helpers cannot use SBuf
+    rawMessage.append("\n", 1);
+
+    const auto pending = TheGeneratorRequests.find(rawMessage);
+    if (pending != TheGeneratorRequests.end()) {
+        pending->second->emplace(callback, data);
+        debugs(83, 5, "collapsed request from " << data << " onto " << *pending->second);
         return;
     }
+
+    GeneratorRequest *request = new GeneratorRequest;
+    request->query = rawMessage;
+    request->emplace(callback, data);
+    TheGeneratorRequests.emplace(request->query, request);
+    debugs(83, 5, "request from " << data << " as " << *request);
+    if (ssl_crtd->trySubmit(request->query.c_str(), HandleGeneratorReply, request))
+        return;
+
+    ::Helper::Reply failReply(::Helper::BrokenHelper);
+    failReply.notes.add("message", "error 45 Temporary network problem, please retry later");
+    HandleGeneratorReply(request, failReply);
+}
+
+/// receives helper response
+static void
+Ssl::HandleGeneratorReply(void *data, const ::Helper::Reply &reply)
+{
+    const std::unique_ptr<Ssl::GeneratorRequest> request(static_cast<Ssl::GeneratorRequest*>(data));
+    assert(request);
+    const auto erased = TheGeneratorRequests.erase(request->query);
+    assert(erased);
+
+    for (auto &requestor: request->requestors) {
+        if (void *cbdata = requestor.data.validDone()) {
+            debugs(83, 5, "to " << cbdata << " in " << *request);
+            requestor.callback(cbdata, reply);
+        }
+    }
 }
 #endif //USE_SSL_CRTD
 
 Ssl::CertValidationHelper * Ssl::CertValidationHelper::GetInstance()
 {
     static Ssl::CertValidationHelper sslHelper;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ssl/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ssl/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ssl/Makefile.in	2017-06-01 21:01:13.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ssl/Makefile.in	2017-07-02 16:41:27.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ssl/PeekingPeerConnector.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ssl/PeekingPeerConnector.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ssl/PeekingPeerConnector.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ssl/PeekingPeerConnector.cc	2017-07-02 16:41:18.000000000 +0800
@@ -33,13 +33,13 @@
     CallJobHere1(83, 7, CbcPointer<PeekingPeerConnector>(peerConnect), Ssl::PeekingPeerConnector, checkForPeekAndSpliceDone, answer);
 }
 
 void
 Ssl::PeekingPeerConnector::checkForPeekAndSpliceDone(allow_t answer)
 {
-    const Ssl::BumpMode finalAction = (answer.code == ACCESS_ALLOWED) ?
+    const Ssl::BumpMode finalAction = answer.allowed() ?
                                       static_cast<Ssl::BumpMode>(answer.kind):
                                       checkForPeekAndSpliceGuess();
     checkForPeekAndSpliceMatched(finalAction);
 }
 
 void
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ssl/ServerBump.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ssl/ServerBump.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ssl/ServerBump.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ssl/ServerBump.h	2017-07-02 16:41:18.000000000 +0800
@@ -44,13 +44,12 @@
     struct {
         Ssl::BumpMode step1; ///< The SSL bump mode at step1
         Ssl::BumpMode step2; ///< The SSL bump mode at step2
         Ssl::BumpMode step3; ///< The SSL bump mode at step3
     } act; ///< bumping actions at various bumping steps
     Ssl::BumpStep step; ///< The SSL bumping step
-    SBuf clientSni; ///< the SSL client SNI name
 
 private:
     Security::SessionPointer serverSession; ///< The TLS session object on server side.
     store_client *sc; ///< dummy client to prevent entry trimming
 };
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ssl/support.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ssl/support.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ssl/support.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ssl/support.cc	2017-07-02 16:41:18.000000000 +0800
@@ -35,15 +35,12 @@
 
 #include <cerrno>
 
 // TODO: Move ssl_ex_index_* global variables from global.cc here.
 int ssl_ex_index_ssl_untrusted_chain = -1;
 
-Ipc::MemMap *Ssl::SessionCache = NULL;
-const char *Ssl::SessionCacheName = "ssl_session_cache";
-
 static Ssl::CertsIndexedList SquidUntrustedCerts;
 
 const EVP_MD *Ssl::DefaultSignHash = NULL;
 
 std::vector<const char *> Ssl::BumpModeStr = {
     "none",
@@ -329,13 +326,13 @@
         if (error_no != SQUID_X509_V_ERR_INFINITE_VALIDATION) {
             if (check) {
                 ACLFilledChecklist *filledCheck = Filled(check);
                 assert(!filledCheck->sslErrors);
                 filledCheck->sslErrors = new Security::CertErrors(Security::CertError(error_no, broken_cert));
                 filledCheck->serverCert = peer_cert;
-                if (check->fastCheck() == ACCESS_ALLOWED) {
+                if (check->fastCheck().allowed()) {
                     debugs(83, 3, "bypassing SSL error " << error_no << " in " << buffer);
                     ok = 1;
                 } else {
                     debugs(83, 5, "confirming SSL error " << error_no);
                 }
                 delete filledCheck->sslErrors;
@@ -469,12 +466,13 @@
 
     SSL_load_error_strings();
     SSLeay_add_ssl_algorithms();
 
 #if HAVE_OPENSSL_ENGINE_H
     if (::Config.SSL.ssl_engine) {
+        ENGINE_load_builtin_engines();
         ENGINE *e;
         if (!(e = ENGINE_by_id(::Config.SSL.ssl_engine)))
             fatalf("Unable to find SSL engine '%s'\n", ::Config.SSL.ssl_engine);
 
         if (!ENGINE_set_default(e, ENGINE_METHOD_ALL)) {
             const int ssl_error = ERR_get_error();
@@ -561,13 +559,13 @@
         SSL_CTX_set_verify(ctx.get(), SSL_VERIFY_NONE, NULL);
     }
 
     if (port.secure.parsedFlags & SSL_FLAG_DONT_VERIFY_DOMAIN)
         SSL_CTX_set_ex_data(ctx.get(), ssl_ctx_ex_index_dont_verify_domain, (void *) -1);
 
-    Ssl::SetSessionCallbacks(ctx);
+    Security::SetSessionCacheCallbacks(ctx);
 
     return true;
 }
 
 bool
 Ssl::InitServerContext(Security::ContextPointer &ctx, AnyP::PortCfg &port)
@@ -1378,116 +1376,8 @@
     certProperties.signAlgorithm = Ssl::algSignSelf;
     certProperties.signWithPkey.resetAndLock(pkey.get());
     certProperties.mimicCert.resetAndLock(cert.get());
     return Ssl::generateSslCertificate(untrustedCert, untrustedPkey, certProperties);
 }
 
-static int
-store_session_cb(SSL *ssl, SSL_SESSION *session)
-{
-    if (!Ssl::SessionCache)
-        return 0;
-
-    debugs(83, 5, "Request to store SSL Session ");
-
-    SSL_SESSION_set_timeout(session, Config.SSL.session_ttl);
-
-#if HAVE_LIBSSL_SSL_SESSION_GET_ID
-    unsigned int idlen;
-    const unsigned char *id = SSL_SESSION_get_id(session, &idlen);
-#else
-    unsigned char *id = session->session_id;
-    unsigned int idlen = session->session_id_length;
-#endif
-    unsigned char key[MEMMAP_SLOT_KEY_SIZE];
-    // Session ids are of size 32bytes. They should always fit to a
-    // MemMap::Slot::key
-    assert(idlen <= MEMMAP_SLOT_KEY_SIZE);
-    memset(key, 0, sizeof(key));
-    memcpy(key, id, idlen);
-    int pos;
-    Ipc::MemMap::Slot *slotW = Ssl::SessionCache->openForWriting((const cache_key*)key, pos);
-    if (slotW) {
-        int lenRequired =  i2d_SSL_SESSION(session, NULL);
-        if (lenRequired <  MEMMAP_SLOT_DATA_SIZE) {
-            unsigned char *p = (unsigned char *)slotW->p;
-            lenRequired = i2d_SSL_SESSION(session, &p);
-            slotW->set(key, NULL, lenRequired, squid_curtime + Config.SSL.session_ttl);
-        }
-        Ssl::SessionCache->closeForWriting(pos);
-        debugs(83, 5, "wrote an ssl session entry of size " << lenRequired << " at pos " << pos);
-    }
-    return 0;
-}
-
-static void
-remove_session_cb(SSL_CTX *, SSL_SESSION *sessionID)
-{
-    if (!Ssl::SessionCache)
-        return ;
-
-    debugs(83, 5, "Request to remove corrupted or not valid SSL Session ");
-    int pos;
-    Ipc::MemMap::Slot const *slot = Ssl::SessionCache->openForReading((const cache_key*)sessionID, pos);
-    if (slot == NULL)
-        return;
-    Ssl::SessionCache->closeForReading(pos);
-    // TODO:
-    // What if we are not able to remove the session?
-    // Maybe schedule a job to remove it later?
-    // For now we just have an invalid entry in cache until will be expired
-    // The openSSL will reject it when we try to use it
-    Ssl::SessionCache->free(pos);
-}
-
-static SSL_SESSION *
-#if SQUID_USE_CONST_SSL_SESSION_CBID
-get_session_cb(SSL *, const unsigned char *sessionID, int len, int *copy)
-#else
-get_session_cb(SSL *, unsigned char *sessionID, int len, int *copy)
-#endif
-{
-    if (!Ssl::SessionCache)
-        return NULL;
-
-    SSL_SESSION *session = NULL;
-    const unsigned int *p;
-    p = (unsigned int *)sessionID;
-    debugs(83, 5, "Request to search for SSL Session of len:" <<
-           len << p[0] << ":" << p[1]);
-
-    int pos;
-    Ipc::MemMap::Slot const *slot = Ssl::SessionCache->openForReading((const cache_key*)sessionID, pos);
-    if (slot != NULL) {
-        if (slot->expire > squid_curtime) {
-            const unsigned char *ptr = slot->p;
-            session = d2i_SSL_SESSION(NULL, &ptr, slot->pSize);
-            debugs(83, 5, "Session retrieved from cache at pos " << pos);
-        } else
-            debugs(83, 5, "Session in cache expired");
-        Ssl::SessionCache->closeForReading(pos);
-    }
-
-    if (!session)
-        debugs(83, 5, "Failed to retrieved from cache\n");
-
-    // With the parameter copy the callback can require the SSL engine
-    // to increment the reference count of the SSL_SESSION object, Normally
-    // the reference count is not incremented and therefore the session must
-    // not be explicitly freed with SSL_SESSION_free(3).
-    *copy = 0;
-    return session;
-}
-
-void
-Ssl::SetSessionCallbacks(Security::ContextPointer &ctx)
-{
-    if (Ssl::SessionCache) {
-        SSL_CTX_set_session_cache_mode(ctx.get(), SSL_SESS_CACHE_SERVER|SSL_SESS_CACHE_NO_INTERNAL);
-        SSL_CTX_sess_set_new_cb(ctx.get(), store_session_cb);
-        SSL_CTX_sess_set_remove_cb(ctx.get(), remove_session_cb);
-        SSL_CTX_sess_set_get_cb(ctx.get(), get_session_cb);
-    }
-}
-
 #endif /* USE_OPENSSL */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ssl/support.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ssl/support.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/ssl/support.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/ssl/support.h	2017-07-02 16:41:18.000000000 +0800
@@ -70,16 +70,12 @@
 void Initialize();
 
 class ErrorDetail;
 class CertValidationResponse;
 typedef RefCount<CertValidationResponse> CertValidationResponsePointer;
 
-void SetSessionCallbacks(Security::ContextPointer &);
-extern Ipc::MemMap *SessionCache;
-extern const char *SessionCacheName;
-
 /// initialize a TLS server context with OpenSSL specific settings
 bool InitServerContext(Security::ContextPointer &, AnyP::PortCfg &);
 
 /// initialize a TLS client context with OpenSSL specific settings
 bool InitClientContext(Security::ContextPointer &, Security::PeerOptions &, long flags);
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/store/id_rewriters/file/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/store/id_rewriters/file/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/store/id_rewriters/file/Makefile.in	2017-06-01 21:01:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/store/id_rewriters/file/Makefile.in	2017-07-02 16:41:28.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/store/id_rewriters/file/storeid_file_rewrite.8 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/store/id_rewriters/file/storeid_file_rewrite.8
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/store/id_rewriters/file/storeid_file_rewrite.8	2017-06-02 05:54:12.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/store/id_rewriters/file/storeid_file_rewrite.8	2017-07-02 16:57:34.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 4.08 (Pod::Simple 3.32)
+.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -126,13 +126,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "STOREID_FILE_REWRITE 8"
-.TH STOREID_FILE_REWRITE 8 "2017-06-01" "perl v5.24.1" "User Contributed Perl Documentation"
+.TH STOREID_FILE_REWRITE 8 "2017-07-02" "perl v5.24.1" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 .Vb 1
@@ -206,11 +206,11 @@
 .PP
 Report serious security bugs to \fISquid Bugs <squid\-bugs@squid\-cache.org\fR>
 .PP
 Report ideas for new improvements to the \fISquid Developers mailing list <squid\-dev@squid\-cache.org\fR>
 .SH "SEE ALSO"
 .IX Header "SEE ALSO"
-squid (8), \s-1GPL\s0 (7),
+squid (8), \s-1GPL \\fIs0\fR\|(7),
 .PP
 The Squid wiki http://wiki.squid\-cache.org/Features/StoreID
 .PP
 The Squid Configuration Manual http://www.squid\-cache.org/Doc/config/
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/store/id_rewriters/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/store/id_rewriters/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/store/id_rewriters/Makefile.in	2017-06-01 21:01:16.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/store/id_rewriters/Makefile.in	2017-07-02 16:41:28.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/store/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/store/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/store/Makefile.in	2017-06-01 21:01:15.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/store/Makefile.in	2017-07-02 16:41:28.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/store.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/store.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/store.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/store.cc	2017-07-02 16:41:18.000000000 +0800
@@ -144,17 +144,24 @@
     /* This object can be cached for a long time */
     if (!EBIT_TEST(flags, RELEASE_REQUEST))
         setPublicKey(scope);
 }
 
 void
-StoreEntry::makePrivate()
+StoreEntry::makePrivate(const bool shareable)
 {
     /* This object should never be cached at all */
     expireNow();
-    releaseRequest(); /* delete object when not used */
+    releaseRequest(shareable); /* delete object when not used */
+}
+
+void
+StoreEntry::clearPrivate()
+{
+    EBIT_CLR(flags, KEY_PRIVATE);
+    shareableWhenPrivate = false;
 }
 
 void
 StoreEntry::cacheNegatively()
 {
     /* This object may be negatively cached */
@@ -324,13 +331,14 @@
     swap_filen(-1),
     swap_dirn(-1),
     mem_status(NOT_IN_MEMORY),
     ping_status(PING_NONE),
     store_status(STORE_PENDING),
     swap_status(SWAPOUT_NONE),
-    lock_count(0)
+    lock_count(0),
+    shareableWhenPrivate(false)
 {
     debugs(20, 5, "StoreEntry constructed, this=" << this);
 }
 
 StoreEntry::~StoreEntry()
 {
@@ -460,20 +468,20 @@
     EBIT_SET(flags, RELEASE_REQUEST);
 
     Store::Root().markForUnlink(*this);
 }
 
 void
-StoreEntry::releaseRequest()
+StoreEntry::releaseRequest(const bool shareable)
 {
     if (EBIT_TEST(flags, RELEASE_REQUEST))
         return;
 
     setReleaseFlag(); // makes validToSend() false, preventing future hits
 
-    setPrivateKey();
+    setPrivateKey(shareable);
 }
 
 int
 StoreEntry::unlock(const char *context)
 {
     debugs(20, 3, (context ? context : "somebody") <<
@@ -579,16 +587,20 @@
  * current manner.
  * Also, clean log writing should skip over ia,t
  * Otherwise, we need a 'remove from the index but not the store
  * concept'.
  */
 void
-StoreEntry::setPrivateKey()
+StoreEntry::setPrivateKey(const bool shareable)
 {
-    if (key && EBIT_TEST(flags, KEY_PRIVATE))
-        return;                 /* is already private */
+    if (key && EBIT_TEST(flags, KEY_PRIVATE)) {
+        // The entry is already private, but it may be still shareable.
+        if (!shareable)
+            shareableWhenPrivate = false;
+        return;
+    }
 
     if (key) {
         setReleaseFlag(); // will markForUnlink(); all caches/workers will know
 
         // TODO: move into SwapDir::markForUnlink() already called by Root()
         if (swap_filen > -1)
@@ -600,12 +612,13 @@
     if (mem_obj && mem_obj->hasUris())
         mem_obj->id = getKeyCounter();
     const cache_key *newkey = storeKeyPrivate();
 
     assert(hash_lookup(store_table, newkey) == NULL);
     EBIT_SET(flags, KEY_PRIVATE);
+    shareableWhenPrivate = shareable;
     hashInsert(newkey);
 }
 
 void
 StoreEntry::setPublicKey(const KeyScope scope)
 {
@@ -656,20 +669,23 @@
 void
 StoreEntry::forcePublicKey(const cache_key *newkey)
 {
     if (StoreEntry *e2 = (StoreEntry *)hash_lookup(store_table, newkey)) {
         assert(e2 != this);
         debugs(20, 3, "Making old " << *e2 << " private.");
-        e2->setPrivateKey();
-        e2->release();
+
+        // TODO: check whether there is any sense in keeping old entry
+        // shareable here. Leaving it non-shareable for now.
+        e2->setPrivateKey(false);
+        e2->release(false);
     }
 
     if (key)
         hashDelete();
 
-    EBIT_CLR(flags, KEY_PRIVATE);
+    clearPrivate();
 
     hashInsert(newkey);
 
     if (swap_filen > -1)
         storeDirSwapLog(this, SWAP_LOG_ADD);
 }
@@ -785,13 +801,13 @@
 storeCreateEntry(const char *url, const char *logUrl, const RequestFlags &flags, const HttpRequestMethod& method)
 {
     StoreEntry *e = storeCreatePureEntry(url, logUrl, flags, method);
     e->lock("storeCreateEntry");
 
     if (neighbors_do_private_keys || !flags.hierarchical)
-        e->setPrivateKey();
+        e->setPrivateKey(false);
     else
         e->setPublicKey();
 
     return e;
 }
 
@@ -1229,33 +1245,33 @@
 /* The maximum objects to scan for maintain storage space */
 #define MAINTAIN_MAX_SCAN       1024
 #define MAINTAIN_MAX_REMOVE     64
 
 /* release an object from a cache */
 void
-StoreEntry::release()
+StoreEntry::release(const bool shareable)
 {
     PROF_start(storeRelease);
     debugs(20, 3, "releasing " << *this << ' ' << getMD5Text());
     /* If, for any reason we can't discard this object because of an
      * outstanding request, mark it for pending release */
 
     if (locked()) {
         expireNow();
         debugs(20, 3, "storeRelease: Only setting RELEASE_REQUEST bit");
-        releaseRequest();
+        releaseRequest(shareable);
         PROF_stop(storeRelease);
         return;
     }
 
     if (Store::Controller::store_dirs_rebuilding && swap_filen > -1) {
         /* TODO: Teach disk stores to handle releases during rebuild instead. */
 
         Store::Root().memoryUnlink(*this);
 
-        setPrivateKey();
+        setPrivateKey(shareable);
 
         // lock the entry until rebuilding is done
         lock("storeLateRelease");
         setReleaseFlag();
         LateReleaseStack.push(this);
         return;
@@ -2100,13 +2116,17 @@
         if (EBIT_TEST(e.flags, ENTRY_SPECIAL)) os << 'S';
         if (EBIT_TEST(e.flags, ENTRY_REVALIDATE_ALWAYS)) os << 'R';
         if (EBIT_TEST(e.flags, DELAY_SENDING)) os << 'P';
         if (EBIT_TEST(e.flags, RELEASE_REQUEST)) os << 'X';
         if (EBIT_TEST(e.flags, REFRESH_REQUEST)) os << 'F';
         if (EBIT_TEST(e.flags, ENTRY_REVALIDATE_STALE)) os << 'E';
-        if (EBIT_TEST(e.flags, ENTRY_DISPATCHED)) os << 'D';
+        if (EBIT_TEST(e.flags, KEY_PRIVATE)) {
+            os << 'I';
+            if (e.shareableWhenPrivate)
+                os << 'H';
+        }
         if (EBIT_TEST(e.flags, KEY_PRIVATE)) os << 'I';
         if (EBIT_TEST(e.flags, ENTRY_FWD_HDR_WAIT)) os << 'W';
         if (EBIT_TEST(e.flags, ENTRY_NEGCACHED)) os << 'N';
         if (EBIT_TEST(e.flags, ENTRY_VALIDATED)) os << 'V';
         if (EBIT_TEST(e.flags, ENTRY_BAD_LENGTH)) os << 'L';
         if (EBIT_TEST(e.flags, ENTRY_ABORTED)) os << 'A';
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/store_digest.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/store_digest.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/store_digest.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/store_digest.cc	2017-07-02 16:41:18.000000000 +0800
@@ -418,13 +418,14 @@
     url = internalLocalUri("/squid-internal-periodic/", SBuf(StoreDigestFileName));
     flags.cachable = true;
     e = storeCreateEntry(url, url, flags, Http::METHOD_GET);
     assert(e);
     sd_state.rewrite_lock = e;
     debugs(71, 3, "storeDigestRewrite: url: " << url << " key: " << e->getMD5Text());
-    HttpRequest *req = HttpRequest::CreateFromUrl(url);
+    const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initCacheDigest);
+    HttpRequest *req = HttpRequest::FromUrl(url, mx);
     e->mem_obj->request = req;
     HTTPMSGLOCK(e->mem_obj->request);
     /* wait for rebuild (if any) to finish */
 
     if (sd_state.rebuild_lock) {
         debugs(71, 2, "storeDigestRewriteStart: waiting for rebuild to finish.");
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/Store.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/Store.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/Store.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/Store.h	2017-07-02 16:41:18.000000000 +0800
@@ -80,21 +80,25 @@
     void memOutDecision(const bool willCacheInRam);
     // called when a decision to cache on disk has been made
     void swapOutDecision(const MemObject::SwapOut::Decision &decision);
 
     void abort();
     void makePublic(const KeyScope keyScope = ksDefault);
-    void makePrivate();
+    void makePrivate(const bool shareable);
+    /// A low-level method just resetting "private key" flags.
+    /// To avoid key inconsistency please use forcePublicKey()
+    /// or similar instead.
+    void clearPrivate();
     void setPublicKey(const KeyScope keyScope = ksDefault);
     /// Resets existing public key to a public key with default scope,
     /// releasing the old default-scope entry (if any).
     /// Does nothing if the existing public key already has default scope.
     void clearPublicKeyScope();
-    void setPrivateKey();
+    void setPrivateKey(const bool shareable);
     void expireNow();
-    void releaseRequest();
+    void releaseRequest(const bool shareable = false);
     void negativeCache();
     void cacheNegatively();     /** \todo argh, why both? */
     void invokeHandlers();
     void purgeMem();
     void cacheInMemory(); ///< start or continue storing in memory cache
     void swapOut();
@@ -209,13 +213,19 @@
     /// returns a local concurrent use counter, for debugging
     int locks() const { return static_cast<int>(lock_count); }
 
     /// update last reference timestamp and related Store metadata
     void touch();
 
-    virtual void release();
+    virtual void release(const bool shareable = false);
+
+    /// May the caller commit to treating this [previously locked]
+    /// entry as a cache hit?
+    bool mayStartHitting() const {
+        return !EBIT_TEST(flags, KEY_PRIVATE) || shareableWhenPrivate;
+    }
 
 #if USE_ADAPTATION
     /// call back producer when more buffer space is available
     void deferProducer(const AsyncCall::Pointer &producer);
     /// calls back producer registered with deferProducer
     void kickProducer();
@@ -237,19 +247,28 @@
     const cache_key *calcPublicKey(const KeyScope keyScope);
 
     static MemAllocator *pool;
 
     unsigned short lock_count;      /* Assume < 65536! */
 
+    /// Nobody can find/lock KEY_PRIVATE entries, but some transactions
+    /// (e.g., collapsed requests) find/lock a public entry before it becomes
+    /// private. May such transactions start using the now-private entry
+    /// they previously locked? This member should not affect transactions
+    /// that already started reading from the entry.
+    bool shareableWhenPrivate;
+
 #if USE_ADAPTATION
     /// producer callback registered with deferProducer
     AsyncCall::Pointer deferredProducer;
 #endif
 
     bool validLength() const;
     bool hasOneOfEtags(const String &reqETags, const bool allowWeakMatch) const;
+
+    friend std::ostream &operator <<(std::ostream &os, const StoreEntry &e);
 };
 
 std::ostream &operator <<(std::ostream &os, const StoreEntry &e);
 
 /// \ingroup StoreAPI
 class NullStoreEntry:public StoreEntry
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/stub_client_side.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/stub_client_side.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/stub_client_side.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/stub_client_side.cc	2017-07-02 16:41:18.000000000 +0800
@@ -28,22 +28,23 @@
 void ConnStateData::stopSending(const char *) STUB
 void ConnStateData::expectNoForwarding() STUB
 void ConnStateData::noteMoreBodySpaceAvailable(BodyPipe::Pointer) STUB
 void ConnStateData::noteBodyConsumerAborted(BodyPipe::Pointer) STUB
 bool ConnStateData::handleReadData() STUB_RETVAL(false)
 bool ConnStateData::handleRequestBodyData() STUB_RETVAL(false)
-void ConnStateData::pinConnection(const Comm::ConnectionPointer &, HttpRequest *, CachePeer *, bool, bool) STUB
+void ConnStateData::pinBusyConnection(const Comm::ConnectionPointer &, const HttpRequest::Pointer &) STUB
+void ConnStateData::notePinnedConnectionBecameIdle(PinnedIdleContext) STUB
 void ConnStateData::unpinConnection(const bool) STUB
 const Comm::ConnectionPointer ConnStateData::validatePinnedConnection(HttpRequest *, const CachePeer *) STUB_RETVAL(NULL)
 void ConnStateData::clientPinnedConnectionClosed(const CommCloseCbParams &) STUB
 void ConnStateData::connStateClosed(const CommCloseCbParams &) STUB
 void ConnStateData::requestTimeout(const CommTimeoutCbParams &) STUB
 void ConnStateData::swanSong() STUB
 void ConnStateData::quitAfterError(HttpRequest *) STUB
 #if USE_OPENSSL
-void ConnStateData::httpsPeeked(Comm::ConnectionPointer) STUB
+void ConnStateData::httpsPeeked(PinnedIdleContext) STUB
 void ConnStateData::getSslContextStart() STUB
 void ConnStateData::getSslContextDone(Security::ContextPointer &, bool) STUB
 void ConnStateData::sslCrtdHandleReplyWrapper(void *, const Helper::Reply &) STUB
 void ConnStateData::sslCrtdHandleReply(const Helper::Reply &) STUB
 void ConnStateData::switchToHttps(HttpRequest *, Ssl::BumpMode) STUB
 void ConnStateData::buildSslCertGenerationParams(Ssl::CertificateProperties &) STUB
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/stub_HttpRequest.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/stub_HttpRequest.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/stub_HttpRequest.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/stub_HttpRequest.cc	2017-07-02 16:41:18.000000000 +0800
@@ -12,14 +12,14 @@
 
 #define STUB_API "HttpRequest.cc"
 #include "tests/STUB.h"
 
 // void httpRequestPack(void *obj, Packable *p);
 
-HttpRequest::HttpRequest() : HttpMsg(hoRequest) {STUB}
-HttpRequest::HttpRequest(const HttpRequestMethod &, AnyP::ProtocolType, const char *, const char *) : HttpMsg(hoRequest) {STUB}
+HttpRequest::HttpRequest(const MasterXaction::Pointer&) : HttpMsg(hoRequest) {STUB}
+HttpRequest::HttpRequest(const HttpRequestMethod &, AnyP::ProtocolType, const char *, const char *, const MasterXaction::Pointer &) : HttpMsg(hoRequest) {STUB}
 HttpRequest::~HttpRequest() STUB
 void HttpRequest::reset() STUB
 void HttpRequest::initHTTP(const HttpRequestMethod &, AnyP::ProtocolType, const char *, const char *) STUB
 HttpRequest * HttpRequest::clone() const STUB_RETVAL(NULL)
 bool HttpRequest::maybeCacheable() STUB_RETVAL(false)
 bool HttpRequest::conditional() const STUB_RETVAL(false)
@@ -44,13 +44,13 @@
 bool HttpRequest::expectingBody(const HttpRequestMethod &, int64_t &) const STUB_RETVAL(false)
 bool HttpRequest::bodyNibbled() const STUB_RETVAL(false)
 int HttpRequest::prefixLen() const STUB_RETVAL(0)
 void HttpRequest::swapOut(StoreEntry *) STUB
 void HttpRequest::pack(Packable *) const STUB
 void HttpRequest::httpRequestPack(void *, Packable *) STUB
-HttpRequest * HttpRequest::CreateFromUrl(char *, const HttpRequestMethod &) STUB_RETVAL(NULL)
+HttpRequest * HttpRequest::FromUrl(char *, const MasterXaction::Pointer &, const HttpRequestMethod &) STUB_RETVAL(NULL)
 ConnStateData *HttpRequest::pinnedConnection() STUB_RETVAL(NULL)
 const SBuf HttpRequest::storeId() STUB_RETVAL(SBuf("."))
 void HttpRequest::ignoreRange(const char *) STUB
 int64_t HttpRequest::getRangeOffsetLimit() STUB_RETVAL(0)
 void HttpRequest::packFirstLineInto(Packable *, bool) const STUB
 bool HttpRequest::sanityCheckStartLine(const char *, const size_t, Http::StatusCode *) STUB_RETVAL(false)
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/stub_libauth_acls.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/stub_libauth_acls.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/stub_libauth_acls.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/stub_libauth_acls.cc	2017-07-02 16:41:18.000000000 +0800
@@ -17,21 +17,20 @@
 #include "auth/Acl.h"
 allow_t AuthenticateAcl(ACLChecklist *) STUB_RETVAL(ACCESS_DENIED)
 
 #include "auth/AclMaxUserIp.h"
 ACL * ACLMaxUserIP::clone() const STUB_RETVAL(NULL)
 ACLMaxUserIP::ACLMaxUserIP (char const *) STUB
-ACLMaxUserIP::ACLMaxUserIP (ACLMaxUserIP const &) STUB
-ACLMaxUserIP::~ACLMaxUserIP() STUB
 char const * ACLMaxUserIP::typeString() const STUB_RETVAL(NULL)
 bool ACLMaxUserIP::empty () const STUB_RETVAL(false)
 bool ACLMaxUserIP::valid () const STUB_RETVAL(false)
 void ACLMaxUserIP::parse() STUB
 int ACLMaxUserIP::match(Auth::UserRequest::Pointer, Ip::Address const &) STUB_RETVAL(0)
 int ACLMaxUserIP::match(ACLChecklist *) STUB_RETVAL(0)
 SBufList ACLMaxUserIP::dump() const STUB_RETVAL(SBufList())
+const Acl::Options &ACLMaxUserIP::options() STUB_RETVAL(Acl::NoOptions())
 
 #include "auth/AclProxyAuth.h"
 ACLProxyAuth::~ACLProxyAuth() STUB
 ACLProxyAuth::ACLProxyAuth(ACLData<char const *> *, char const *) STUB
 ACLProxyAuth::ACLProxyAuth (ACLProxyAuth const &) STUB
 ACLProxyAuth & ACLProxyAuth::operator= (ACLProxyAuth const & a) STUB_RETVAL(const_cast<ACLProxyAuth &>(a))
@@ -44,9 +43,10 @@
 ProxyAuthLookup * ProxyAuthLookup::Instance() STUB_RETVAL(NULL)
 void ProxyAuthLookup::checkForAsync(ACLChecklist *) const STUB
 void ProxyAuthLookup::LookupDone(void *) STUB
 ACL * ACLProxyAuth::clone() const STUB_RETVAL(NULL)
 int ACLProxyAuth::matchForCache(ACLChecklist *) STUB_RETVAL(0)
 int ACLProxyAuth::matchProxyAuth(ACLChecklist *) STUB_RETVAL(0)
+void ACLProxyAuth::parseFlags() STUB
 
 #endif /* USE_AUTH */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/stub_libmgr.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/stub_libmgr.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/stub_libmgr.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/stub_libmgr.cc	2017-07-02 16:41:18.000000000 +0800
@@ -97,13 +97,12 @@
 //Mgr::Forwarder::~Forwarder() STUB
 //protected:
 void Mgr::Forwarder::cleanup() STUB
 void Mgr::Forwarder::handleError() STUB
 void Mgr::Forwarder::handleTimeout() STUB
 void Mgr::Forwarder::handleException(const std::exception& e) STUB
-void Mgr::Forwarder::handleRemoteAck() STUB
 
 #include "mgr/FunAction.h"
 Mgr::Action::Pointer Mgr::FunAction::Create(const CommandPointer &cmd, OBJH *aHandler) STUB_RETVAL(dummyAction)
 void Mgr::FunAction::respond(const Request& request) STUB
 //protected:
 //Mgr::FunAction::FunAction(const CommandPointer &cmd, OBJH *aHandler) STUB
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/stub_libsecurity.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/stub_libsecurity.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/stub_libsecurity.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/stub_libsecurity.cc	2017-07-02 16:41:18.000000000 +0800
@@ -99,10 +99,11 @@
 bool CreateServerSession(const Security::ContextPointer &, const Comm::ConnectionPointer &, const char *) STUB_RETVAL(false)
 void SessionSendGoodbye(const Security::SessionPointer &) STUB
 bool SessionIsResumed(const Security::SessionPointer &) STUB_RETVAL(false)
 void MaybeGetSessionResumeData(const Security::SessionPointer &, Security::SessionStatePointer &) STUB
 void SetSessionResumeData(const Security::SessionPointer &, const Security::SessionStatePointer &) STUB
 #if USE_OPENSSL
+void SetSessionCacheCallbacks(Security::ContextPointer &) STUB
 Security::SessionPointer NewSessionObject(const Security::ContextPointer &) STUB_RETVAL(nullptr)
 #endif
 } // namespace Security
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/stub_SBuf.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/stub_SBuf.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/stub_SBuf.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/stub_SBuf.cc	2017-07-02 16:41:18.000000000 +0800
@@ -4,12 +4,13 @@
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
+#include "sbuf/DetailedStats.h"
 
 #define STUB_API "SBuf.cc"
 #include "tests/STUB.h"
 
 #include "sbuf/SBuf.h"
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/stub_store.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/stub_store.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/stub_store.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/stub_store.cc	2017-07-02 16:41:18.000000000 +0800
@@ -35,17 +35,17 @@
 char const *StoreEntry::getSerialisedMetaData() STUB_RETVAL(NULL)
 void StoreEntry::replaceHttpReply(HttpReply *, bool andStartWriting) STUB
 bool StoreEntry::mayStartSwapOut() STUB_RETVAL(false)
 void StoreEntry::trimMemory(const bool preserveSwappable) STUB
 void StoreEntry::abort() STUB
 void StoreEntry::makePublic(const KeyScope scope) STUB
-void StoreEntry::makePrivate() STUB
+void StoreEntry::makePrivate(const bool shareable) STUB
 void StoreEntry::setPublicKey(const KeyScope scope) STUB
-void StoreEntry::setPrivateKey() STUB
+void StoreEntry::setPrivateKey(const bool shareable) STUB
 void StoreEntry::expireNow() STUB
-void StoreEntry::releaseRequest() STUB
+void StoreEntry::releaseRequest(const bool shareable) STUB
 void StoreEntry::negativeCache() STUB
 void StoreEntry::cacheNegatively() STUB
 void StoreEntry::purgeMem() STUB
 void StoreEntry::swapOut() STUB
 void StoreEntry::swapOutFileClose(int how) STUB
 const char *StoreEntry::url() const STUB_RETVAL(NULL)
@@ -90,13 +90,13 @@
 void StoreEntry::flush() STUB
 int StoreEntry::unlock(const char *) STUB_RETVAL(0)
 int64_t StoreEntry::objectLen() const STUB_RETVAL(0)
 int64_t StoreEntry::contentLen() const STUB_RETVAL(0)
 void StoreEntry::lock(const char *) STUB
 void StoreEntry::touch() STUB
-void StoreEntry::release() STUB
+void StoreEntry::release(const bool shareable) STUB
 void StoreEntry::append(char const *, int) STUB
 void StoreEntry::vappendf(const char *, va_list) STUB
 
 NullStoreEntry *NullStoreEntry::getInstance() STUB_RETVAL(NULL)
 const char *NullStoreEntry::getMD5Text() const STUB_RETVAL(NULL)
 void NullStoreEntry::operator delete(void *address) STUB
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/testACLMaxUserIP.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/testACLMaxUserIP.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/testACLMaxUserIP.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/testACLMaxUserIP.cc	2017-07-02 16:41:18.000000000 +0800
@@ -7,13 +7,15 @@
  */
 
 #include "squid.h"
 
 #if USE_AUTH
 
+#include "acl/Acl.h"
 #include "auth/AclMaxUserIp.h"
+#include "auth/UserRequest.h"
 #include "ConfigParser.h"
 #include "testACLMaxUserIP.h"
 #include "unitTestMain.h"
 
 #include <stdexcept>
 
@@ -23,19 +25,23 @@
 testACLMaxUserIP::testDefaults()
 {
     ACLMaxUserIP anACL("max_user_ip");
     /* 0 is not a valid maximum, so we start at 0 */
     CPPUNIT_ASSERT_EQUAL(0,anACL.getMaximum());
     /* and we have no option to turn strict OFF, so start ON. */
-    CPPUNIT_ASSERT_EQUAL(false,anACL.getStrict());
+    CPPUNIT_ASSERT_EQUAL(false, static_cast<bool>(anACL.beStrict));
     /* an unparsed acl must not be valid - there is no sane default */
     CPPUNIT_ASSERT_EQUAL(false,anACL.valid());
 }
 
-ACL::Prototype ACLMaxUserIP::RegistryProtoype(&ACLMaxUserIP::RegistryEntry_, "max_user_ip");
-ACLMaxUserIP ACLMaxUserIP::RegistryEntry_("max_user_ip");
+void
+testACLMaxUserIP::setUp()
+{
+    CPPUNIT_NS::TestFixture::setUp();
+    Acl::RegisterMaker("max_user_ip", [](Acl::TypeName name)->ACL* { return new ACLMaxUserIP(name); });
+}
 
 void
 testACLMaxUserIP::testParseLine()
 {
     /* a config line to pass with a lead-in token to seed the parser. */
     char * line = xstrdup("test max_user_ip -s 1");
@@ -46,13 +52,13 @@
     ACL::ParseAclLine(LegacyParser, &anACL);
     ACLMaxUserIP *maxUserIpACL = dynamic_cast<ACLMaxUserIP *>(anACL);
     CPPUNIT_ASSERT(maxUserIpACL);
     if (maxUserIpACL) {
         /* we want a maximum of one, and strict to be true */
         CPPUNIT_ASSERT_EQUAL(1, maxUserIpACL->getMaximum());
-        CPPUNIT_ASSERT_EQUAL(true, maxUserIpACL->getStrict());
+        CPPUNIT_ASSERT_EQUAL(true, static_cast<bool>(maxUserIpACL->beStrict));
         /* the acl must be vaid */
         CPPUNIT_ASSERT_EQUAL(true, maxUserIpACL->valid());
     }
     delete anACL;
     xfree(line);
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/testACLMaxUserIP.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/testACLMaxUserIP.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/testACLMaxUserIP.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/testACLMaxUserIP.h	2017-07-02 16:41:18.000000000 +0800
@@ -24,12 +24,13 @@
     /* note the statement here and then the actual prototype below */
     CPPUNIT_TEST( testDefaults );
     CPPUNIT_TEST( testParseLine );
     CPPUNIT_TEST_SUITE_END();
 
 public:
+    virtual void setUp() override;
 
 protected:
     void testDefaults();
     void testParseLine();
 };
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/testHttpRequest.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/testHttpRequest.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/testHttpRequest.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/testHttpRequest.cc	2017-07-02 16:41:18.000000000 +0800
@@ -9,22 +9,24 @@
 #include "squid.h"
 
 #include <cppunit/TestAssert.h>
 
 #include "HttpHeader.h"
 #include "HttpRequest.h"
+#include "MasterXaction.h"
 #include "mime_header.h"
 #include "testHttpRequest.h"
 #include "unitTestMain.h"
 
 CPPUNIT_TEST_SUITE_REGISTRATION( testHttpRequest );
 
 /** wrapper for testing HttpRequest object private and protected functions */
 class PrivateHttpRequest : public HttpRequest
 {
 public:
+    PrivateHttpRequest(const MasterXaction::Pointer &mx) : HttpRequest(mx) {}
     bool doSanityCheckStartLine(const char *b, const size_t h, Http::StatusCode *e) { return sanityCheckStartLine(b,h,e); };
 };
 
 /* init memory pools */
 
 void
@@ -41,56 +43,57 @@
 void
 testHttpRequest::testCreateFromUrl()
 {
     /* vanilla url, implict method */
     unsigned short expected_port;
     char * url = xstrdup("http://foo:90/bar");
-    HttpRequest *aRequest = HttpRequest::CreateFromUrl(url);
+    const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initClient);
+    HttpRequest *aRequest = HttpRequest::FromUrl(url, mx);
     expected_port = 90;
     CPPUNIT_ASSERT_EQUAL(expected_port, aRequest->url.port());
     CPPUNIT_ASSERT(aRequest->method == Http::METHOD_GET);
     CPPUNIT_ASSERT_EQUAL(String("foo"), String(aRequest->url.host()));
     CPPUNIT_ASSERT_EQUAL(SBuf("/bar"), aRequest->url.path());
     CPPUNIT_ASSERT_EQUAL(AnyP::PROTO_HTTP, static_cast<AnyP::ProtocolType>(aRequest->url.getScheme()));
     CPPUNIT_ASSERT_EQUAL(String("http://foo:90/bar"), String(url));
     xfree(url);
 
     /* vanilla url */
     url = xstrdup("http://foo:90/bar");
-    aRequest = HttpRequest::CreateFromUrl(url, Http::METHOD_GET);
+    aRequest = HttpRequest::FromUrl(url, mx, Http::METHOD_GET);
     expected_port = 90;
     CPPUNIT_ASSERT_EQUAL(expected_port, aRequest->url.port());
     CPPUNIT_ASSERT(aRequest->method == Http::METHOD_GET);
     CPPUNIT_ASSERT_EQUAL(String("foo"), String(aRequest->url.host()));
     CPPUNIT_ASSERT_EQUAL(SBuf("/bar"), aRequest->url.path());
     CPPUNIT_ASSERT_EQUAL(AnyP::PROTO_HTTP, static_cast<AnyP::ProtocolType>(aRequest->url.getScheme()));
     CPPUNIT_ASSERT_EQUAL(String("http://foo:90/bar"), String(url));
     xfree(url);
 
     /* vanilla url, different method */
     url = xstrdup("http://foo/bar");
-    aRequest = HttpRequest::CreateFromUrl(url, Http::METHOD_PUT);
+    aRequest = HttpRequest::FromUrl(url, mx, Http::METHOD_PUT);
     expected_port = 80;
     CPPUNIT_ASSERT_EQUAL(expected_port, aRequest->url.port());
     CPPUNIT_ASSERT(aRequest->method == Http::METHOD_PUT);
     CPPUNIT_ASSERT_EQUAL(String("foo"), String(aRequest->url.host()));
     CPPUNIT_ASSERT_EQUAL(SBuf("/bar"), aRequest->url.path());
     CPPUNIT_ASSERT_EQUAL(AnyP::PROTO_HTTP, static_cast<AnyP::ProtocolType>(aRequest->url.getScheme()));
     CPPUNIT_ASSERT_EQUAL(String("http://foo/bar"), String(url));
     xfree(url);
 
     /* a connect url with non-CONNECT data */
     HttpRequest *nullRequest = nullptr;
     url = xstrdup(":foo/bar");
-    aRequest = HttpRequest::CreateFromUrl(url, Http::METHOD_CONNECT);
+    aRequest = HttpRequest::FromUrl(url, mx, Http::METHOD_CONNECT);
     xfree(url);
     CPPUNIT_ASSERT_EQUAL(nullRequest, aRequest);
 
     /* a CONNECT url with CONNECT data */
     url = xstrdup("foo:45");
-    aRequest = HttpRequest::CreateFromUrl(url, Http::METHOD_CONNECT);
+    aRequest = HttpRequest::FromUrl(url, mx, Http::METHOD_CONNECT);
     expected_port = 45;
     CPPUNIT_ASSERT_EQUAL(expected_port, aRequest->url.port());
     CPPUNIT_ASSERT(aRequest->method == Http::METHOD_CONNECT);
     CPPUNIT_ASSERT_EQUAL(String("foo"), String(aRequest->url.host()));
     CPPUNIT_ASSERT_EQUAL(SBuf(), aRequest->url.path());
     CPPUNIT_ASSERT_EQUAL(AnyP::PROTO_NONE, static_cast<AnyP::ProtocolType>(aRequest->url.getScheme()));
@@ -109,37 +112,38 @@
     unsigned short expected_port;
     char * url = NULL;
     HttpRequest *aRequest = NULL;
 
     /* valid IPv6 address without port */
     url = xstrdup("http://[2000:800::45]/foo");
-    aRequest = HttpRequest::CreateFromUrl(url, Http::METHOD_GET);
+    const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initClient);
+    aRequest = HttpRequest::FromUrl(url, mx, Http::METHOD_GET);
     expected_port = 80;
     CPPUNIT_ASSERT_EQUAL(expected_port, aRequest->url.port());
     CPPUNIT_ASSERT(aRequest->method == Http::METHOD_GET);
     CPPUNIT_ASSERT_EQUAL(String("[2000:800::45]"), String(aRequest->url.host()));
     CPPUNIT_ASSERT_EQUAL(SBuf("/foo"), aRequest->url.path());
     CPPUNIT_ASSERT_EQUAL(AnyP::PROTO_HTTP, static_cast<AnyP::ProtocolType>(aRequest->url.getScheme()));
     CPPUNIT_ASSERT_EQUAL(String("http://[2000:800::45]/foo"), String(url));
     xfree(url);
 
     /* valid IPv6 address with port */
     url = xstrdup("http://[2000:800::45]:90/foo");
-    aRequest = HttpRequest::CreateFromUrl(url, Http::METHOD_GET);
+    aRequest = HttpRequest::FromUrl(url, mx, Http::METHOD_GET);
     expected_port = 90;
     CPPUNIT_ASSERT_EQUAL(expected_port, aRequest->url.port());
     CPPUNIT_ASSERT(aRequest->method == Http::METHOD_GET);
     CPPUNIT_ASSERT_EQUAL(String("[2000:800::45]"), String(aRequest->url.host()));
     CPPUNIT_ASSERT_EQUAL(SBuf("/foo"), aRequest->url.path());
     CPPUNIT_ASSERT_EQUAL(AnyP::PROTO_HTTP, static_cast<AnyP::ProtocolType>(aRequest->url.getScheme()));
     CPPUNIT_ASSERT_EQUAL(String("http://[2000:800::45]:90/foo"), String(url));
     xfree(url);
 
     /* IPv6 address as invalid (bug trigger) */
     url = xstrdup("http://2000:800::45/foo");
-    aRequest = HttpRequest::CreateFromUrl(url, Http::METHOD_GET);
+    aRequest = HttpRequest::FromUrl(url, mx, Http::METHOD_GET);
     expected_port = 80;
     CPPUNIT_ASSERT_EQUAL(expected_port, aRequest->url.port());
     CPPUNIT_ASSERT(aRequest->method == Http::METHOD_GET);
     CPPUNIT_ASSERT_EQUAL(String("[2000:800::45]"), String(aRequest->url.host()));
     CPPUNIT_ASSERT_EQUAL(SBuf("/foo"), aRequest->url.path());
     CPPUNIT_ASSERT_EQUAL(AnyP::PROTO_HTTP, static_cast<AnyP::ProtocolType>(aRequest->url.getScheme()));
@@ -148,13 +152,14 @@
 }
 
 void
 testHttpRequest::testSanityCheckStartLine()
 {
     MemBuf input;
-    PrivateHttpRequest engine;
+    const MasterXaction::Pointer mx = new MasterXaction(XactionInitiator::initClient);
+    PrivateHttpRequest engine(mx);
     Http::StatusCode error = Http::scNone;
     size_t hdr_len;
     input.init();
 
     // a valid request line
     input.append("GET / HTTP/1.1\n\n", 16);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/testStoreController.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/testStoreController.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/testStoreController.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/testStoreController.cc	2017-07-02 16:41:18.000000000 +0800
@@ -111,13 +111,13 @@
     e->lastref = squid_curtime;
     e->timestamp = squid_curtime;
     e->expires = squid_curtime;
     e->lastModified(squid_curtime);
     e->refcount = 1;
     EBIT_CLR(e->flags, RELEASE_REQUEST);
-    EBIT_CLR(e->flags, KEY_PRIVATE);
+    e->clearPrivate();
     e->ping_status = PING_NONE;
     EBIT_CLR(e->flags, ENTRY_VALIDATED);
     e->hashInsert((const cache_key *)name.termedBuf()); /* do it after we clear KEY_PRIVATE */
     return e;
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/testStoreHashIndex.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/testStoreHashIndex.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tests/testStoreHashIndex.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tests/testStoreHashIndex.cc	2017-07-02 16:41:18.000000000 +0800
@@ -89,13 +89,13 @@
     e->lastref = squid_curtime;
     e->timestamp = squid_curtime;
     e->expires = squid_curtime;
     e->lastModified(squid_curtime);
     e->refcount = 1;
     EBIT_CLR(e->flags, RELEASE_REQUEST);
-    EBIT_CLR(e->flags, KEY_PRIVATE);
+    e->clearPrivate();
     e->ping_status = PING_NONE;
     EBIT_CLR(e->flags, ENTRY_VALIDATED);
     e->hashInsert((const cache_key *)name.termedBuf()); /* do it after we clear KEY_PRIVATE */
     return e;
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tunnel.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tunnel.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/tunnel.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/tunnel.cc	2017-07-02 16:41:18.000000000 +0800
@@ -1081,13 +1081,13 @@
          * Check if this host is allowed to fetch MISSES from us (miss_access)
          * default is to allow.
          */
         ACLFilledChecklist ch(Config.accessList.miss, request, NULL);
         ch.src_addr = request->client_addr;
         ch.my_addr = request->my_addr;
-        if (ch.fastCheck() == ACCESS_DENIED) {
+        if (ch.fastCheck().denied()) {
             debugs(26, 4, HERE << "MISS access forbidden.");
             err = new ErrorState(ERR_FORWARDING_DENIED, Http::scForbidden, request);
             http->al->http.code = Http::scForbidden;
             errorSend(http->getConn()->clientConnection, err);
             return;
         }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/url.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/url.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/url.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/url.cc	2017-07-02 16:41:18.000000000 +0800
@@ -13,21 +13,12 @@
 #include "HttpRequest.h"
 #include "rfc1738.h"
 #include "SquidConfig.h"
 #include "SquidString.h"
 #include "URL.h"
 
-static HttpRequest *urlParseFinish(const HttpRequestMethod& method,
-                                   const AnyP::ProtocolType protocol,
-                                   const char *const protoStr,
-                                   const char *const urlpath,
-                                   const char *const host,
-                                   const SBuf &login,
-                                   const int port,
-                                   HttpRequest *request);
-static HttpRequest *urnParse(const HttpRequestMethod& method, char *urn, HttpRequest *request);
 static const char valid_hostname_chars_u[] =
     "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
     "abcdefghijklmnopqrstuvwxyz"
     "0123456789-._"
     "[:]"
     ;
@@ -176,14 +167,13 @@
     return AnyP::PROTO_NONE;
 }
 
 /*
  * Parse a URI/URL.
  *
- * If the 'request' arg is non-NULL, put parsed values there instead
- * of allocating a new HttpRequest.
+ * Stores parsed values in the `request` argument.
  *
  * This abuses HttpRequest as a way of representing the parsed url
  * and its components.
  * method is used to switch parsers and to init the HttpRequest.
  * If method is Http::METHOD_CONNECT, then rather than a URL a hostname:port is
  * looked for.
@@ -194,82 +184,93 @@
  * This routine parses a URL. Its assumed that the URL is complete -
  * ie, the end of the string is the end of the URL. Don't pass a partial
  * URL here as this routine doesn't have any way of knowing whether
  * its partial or not (ie, it handles the case of no trailing slash as
  * being "end of host with implied path of /".
  */
-HttpRequest *
-urlParse(const HttpRequestMethod& method, char *url, HttpRequest *request)
+bool
+URL::parse(const HttpRequestMethod& method, char *url)
 {
     LOCAL_ARRAY(char, proto, MAX_URL);
     LOCAL_ARRAY(char, login, MAX_URL);
-    LOCAL_ARRAY(char, host, MAX_URL);
+    LOCAL_ARRAY(char, foundHost, MAX_URL);
     LOCAL_ARRAY(char, urlpath, MAX_URL);
     char *t = NULL;
     char *q = NULL;
-    int port;
+    int foundPort;
     AnyP::ProtocolType protocol = AnyP::PROTO_NONE;
     int l;
     int i;
     const char *src;
     char *dst;
-    proto[0] = host[0] = urlpath[0] = login[0] = '\0';
+    proto[0] = foundHost[0] = urlpath[0] = login[0] = '\0';
 
     if ((l = strlen(url)) + Config.appendDomainLen > (MAX_URL - 1)) {
         /* terminate so it doesn't overflow other buffers */
         *(url + (MAX_URL >> 1)) = '\0';
-        debugs(23, DBG_IMPORTANT, "urlParse: URL too large (" << l << " bytes)");
-        return NULL;
+        debugs(23, DBG_IMPORTANT, MYNAME << "URL too large (" << l << " bytes)");
+        return false;
     }
     if (method == Http::METHOD_CONNECT) {
-        port = CONNECT_PORT;
+        /*
+         * RFC 7230 section 5.3.3:  authority-form = authority
+         *  "excluding any userinfo and its "@" delimiter"
+         *
+         * RFC 3986 section 3.2:    authority = [ userinfo "@" ] host [ ":" port ]
+         *
+         * As an HTTP(S) proxy we assume HTTPS (443) if no port provided.
+         */
+        foundPort = 443;
 
-        if (sscanf(url, "[%[^]]]:%d", host, &port) < 1)
-            if (sscanf(url, "%[^:]:%d", host, &port) < 1)
-                return NULL;
+        if (sscanf(url, "[%[^]]]:%d", foundHost, &foundPort) < 1)
+            if (sscanf(url, "%[^:]:%d", foundHost, &foundPort) < 1)
+                return false;
 
     } else if ((method == Http::METHOD_OPTIONS || method == Http::METHOD_TRACE) &&
                URL::Asterisk().cmp(url) == 0) {
-        protocol = AnyP::PROTO_HTTP;
-        port = 80; // or the slow way ...  AnyP::UriScheme(protocol,"http").defaultPort();
-        return urlParseFinish(method, protocol, "http", url, host, SBuf(), port, request);
-    } else if (!strncmp(url, "urn:", 4)) {
-        return urnParse(method, url, request);
+        parseFinish(AnyP::PROTO_HTTP, nullptr, url, foundHost, SBuf(), 80 /* HTTP default port */);
+        return true;
+    } else if (strncmp(url, "urn:", 4) == 0) {
+        debugs(23, 3, "Split URI '" << url << "' into proto='urn', path='" << (url+4) << "'");
+        debugs(50, 5, "urn=" << (url+4));
+        setScheme(AnyP::PROTO_URN, nullptr);
+        path(url + 4);
+        return true;
     } else {
         /* Parse the URL: */
         src = url;
         i = 0;
         /* Find first : - everything before is protocol */
         for (i = 0, dst = proto; i < l && *src != ':'; ++i, ++src, ++dst) {
             *dst = *src;
         }
         if (i >= l)
-            return NULL;
+            return false;
         *dst = '\0';
 
         /* Then its :// */
         if ((i+3) > l || *src != ':' || *(src + 1) != '/' || *(src + 2) != '/')
-            return NULL;
+            return false;
         i += 3;
         src += 3;
 
         /* Then everything until first /; thats host (and port; which we'll look for here later) */
         // bug 1881: If we don't get a "/" then we imply it was there
         // bug 3074: We could just be given a "?" or "#". These also imply "/"
         // bug 3233: whitespace is also a hostname delimiter.
-        for (dst = host; i < l && *src != '/' && *src != '?' && *src != '#' && *src != '\0' && !xisspace(*src); ++i, ++src, ++dst) {
+        for (dst = foundHost; i < l && *src != '/' && *src != '?' && *src != '#' && *src != '\0' && !xisspace(*src); ++i, ++src, ++dst) {
             *dst = *src;
         }
 
         /*
          * We can't check for "i >= l" here because we could be at the end of the line
          * and have a perfectly valid URL w/ no trailing '/'. In this case we assume we've
          * been -given- a valid URL and the path is just '/'.
          */
         if (i > l)
-            return NULL;
+            return false;
         *dst = '\0';
 
         // bug 3074: received 'path' starting with '?', '#', or '\0' implies '/'
         if (*src == '?' || *src == '#' || *src == '\0') {
             urlpath[0] = '/';
             dst = &urlpath[1];
@@ -280,44 +281,44 @@
         for (; i < l && *src != '\r' && *src != '\n' && *src != '\0'; ++i, ++src, ++dst) {
             *dst = *src;
         }
 
         /* We -could- be at the end of the buffer here */
         if (i > l)
-            return NULL;
+            return false;
         /* If the URL path is empty we set it to be "/" */
         if (dst == urlpath) {
             *dst = '/';
             ++dst;
         }
         *dst = '\0';
 
         protocol = urlParseProtocol(proto);
-        port = AnyP::UriScheme(protocol).defaultPort();
+        foundPort = AnyP::UriScheme(protocol).defaultPort();
 
         /* Is there any login information? (we should eventually parse it above) */
-        t = strrchr(host, '@');
+        t = strrchr(foundHost, '@');
         if (t != NULL) {
-            strncpy((char *) login, (char *) host, sizeof(login)-1);
+            strncpy((char *) login, (char *) foundHost, sizeof(login)-1);
             login[sizeof(login)-1] = '\0';
             t = strrchr(login, '@');
             *t = 0;
-            strncpy((char *) host, t + 1, sizeof(host)-1);
-            host[sizeof(host)-1] = '\0';
+            strncpy((char *) foundHost, t + 1, sizeof(foundHost)-1);
+            foundHost[sizeof(foundHost)-1] = '\0';
             // Bug 4498: URL-unescape the login info after extraction
             rfc1738_unescape(login);
         }
 
         /* Is there any host information? (we should eventually parse it above) */
-        if (*host == '[') {
+        if (*foundHost == '[') {
             /* strip any IPA brackets. valid under IPv6. */
-            dst = host;
+            dst = foundHost;
             /* only for IPv6 sadly, pre-IPv6/URL code can't handle the clean result properly anyway. */
-            src = host;
+            src = foundHost;
             ++src;
-            l = strlen(host);
+            l = strlen(foundHost);
             i = 1;
             for (; i < l && *src != ']' && *src != '\0'; ++i, ++src, ++dst) {
                 *dst = *src;
             }
 
             /* we moved in-place, so truncate the actual hostname found */
@@ -326,94 +327,95 @@
 
             /* skip ahead to either start of port, or original EOS */
             while (*dst != '\0' && *dst != ':')
                 ++dst;
             t = dst;
         } else {
-            t = strrchr(host, ':');
+            t = strrchr(foundHost, ':');
 
-            if (t != strchr(host,':') ) {
+            if (t != strchr(foundHost,':') ) {
                 /* RFC 2732 states IPv6 "SHOULD" be bracketed. allowing for times when its not. */
                 /* RFC 3986 'update' simply modifies this to an "is" with no emphasis at all! */
                 /* therefore we MUST accept the case where they are not bracketed at all. */
                 t = NULL;
             }
         }
 
         // Bug 3183 sanity check: If scheme is present, host must be too.
-        if (protocol != AnyP::PROTO_NONE && host[0] == '\0') {
+        if (protocol != AnyP::PROTO_NONE && foundHost[0] == '\0') {
             debugs(23, DBG_IMPORTANT, "SECURITY ALERT: Missing hostname in URL '" << url << "'. see access.log for details.");
-            return NULL;
+            return false;
         }
 
         if (t && *t == ':') {
             *t = '\0';
             ++t;
-            port = atoi(t);
+            foundPort = atoi(t);
         }
     }
 
-    for (t = host; *t; ++t)
+    for (t = foundHost; *t; ++t)
         *t = xtolower(*t);
 
-    if (stringHasWhitespace(host)) {
+    if (stringHasWhitespace(foundHost)) {
         if (URI_WHITESPACE_STRIP == Config.uri_whitespace) {
-            t = q = host;
+            t = q = foundHost;
             while (*t) {
                 if (!xisspace(*t)) {
                     *q = *t;
                     ++q;
                 }
                 ++t;
             }
             *q = '\0';
         }
     }
 
-    debugs(23, 3, "urlParse: Split URL '" << url << "' into proto='" << proto << "', host='" << host << "', port='" << port << "', path='" << urlpath << "'");
+    debugs(23, 3, "Split URL '" << url << "' into proto='" << proto << "', host='" << foundHost << "', port='" << foundPort << "', path='" << urlpath << "'");
 
-    if (Config.onoff.check_hostnames && strspn(host, Config.onoff.allow_underscore ? valid_hostname_chars_u : valid_hostname_chars) != strlen(host)) {
-        debugs(23, DBG_IMPORTANT, "urlParse: Illegal character in hostname '" << host << "'");
-        return NULL;
+    if (Config.onoff.check_hostnames &&
+            strspn(foundHost, Config.onoff.allow_underscore ? valid_hostname_chars_u : valid_hostname_chars) != strlen(foundHost)) {
+        debugs(23, DBG_IMPORTANT, MYNAME << "Illegal character in hostname '" << foundHost << "'");
+        return false;
     }
 
     /* For IPV6 addresses also check for a colon */
-    if (Config.appendDomain && !strchr(host, '.') && !strchr(host, ':'))
-        strncat(host, Config.appendDomain, SQUIDHOSTNAMELEN - strlen(host) - 1);
+    if (Config.appendDomain && !strchr(foundHost, '.') && !strchr(foundHost, ':'))
+        strncat(foundHost, Config.appendDomain, SQUIDHOSTNAMELEN - strlen(foundHost) - 1);
 
     /* remove trailing dots from hostnames */
-    while ((l = strlen(host)) > 0 && host[--l] == '.')
-        host[l] = '\0';
+    while ((l = strlen(foundHost)) > 0 && foundHost[--l] == '.')
+        foundHost[l] = '\0';
 
     /* reject duplicate or leading dots */
-    if (strstr(host, "..") || *host == '.') {
-        debugs(23, DBG_IMPORTANT, "urlParse: Illegal hostname '" << host << "'");
-        return NULL;
+    if (strstr(foundHost, "..") || *foundHost == '.') {
+        debugs(23, DBG_IMPORTANT, MYNAME << "Illegal hostname '" << foundHost << "'");
+        return false;
     }
 
-    if (port < 1 || port > 65535) {
-        debugs(23, 3, "urlParse: Invalid port '" << port << "'");
-        return NULL;
+    if (foundPort < 1 || foundPort > 65535) {
+        debugs(23, 3, "Invalid port '" << foundPort << "'");
+        return false;
     }
 
 #if HARDCODE_DENY_PORTS
     /* These ports are filtered in the default squid.conf, but
      * maybe someone wants them hardcoded... */
-    if (port == 7 || port == 9 || port == 19) {
-        debugs(23, DBG_CRITICAL, "urlParse: Deny access to port " << port);
-        return NULL;
+    if (foundPort == 7 || foundPort == 9 || foundPort == 19) {
+        debugs(23, DBG_CRITICAL, MYNAME << "Deny access to port " << foundPort);
+        return false;
     }
 #endif
 
     if (stringHasWhitespace(urlpath)) {
-        debugs(23, 2, "urlParse: URI has whitespace: {" << url << "}");
+        debugs(23, 2, "URI has whitespace: {" << url << "}");
 
         switch (Config.uri_whitespace) {
 
         case URI_WHITESPACE_DENY:
-            return NULL;
+            return false;
 
         case URI_WHITESPACE_ALLOW:
             break;
 
         case URI_WHITESPACE_ENCODE:
             t = rfc1738_escape_unescaped(urlpath);
@@ -435,52 +437,30 @@
                 ++t;
             }
             *q = '\0';
         }
     }
 
-    return urlParseFinish(method, protocol, proto, urlpath, host, SBuf(login), port, request);
-}
-
-/**
- * Update request with parsed URI data.  If the request arg is
- * non-NULL, put parsed values there instead of allocating a new
- * HttpRequest.
- */
-static HttpRequest *
-urlParseFinish(const HttpRequestMethod& method,
-               const AnyP::ProtocolType protocol,
-               const char *const protoStr, // for unknown protocols
-               const char *const urlpath,
-               const char *const host,
-               const SBuf &login,
-               const int port,
-               HttpRequest *request)
-{
-    if (NULL == request)
-        request = new HttpRequest(method, protocol, protoStr, urlpath);
-    else {
-        request->initHTTP(method, protocol, protoStr, urlpath);
-    }
-
-    request->url.host(host);
-    request->url.userInfo(login);
-    request->url.port(port);
-    return request;
+    parseFinish(protocol, proto, urlpath, foundHost, SBuf(login), foundPort);
+    return true;
 }
 
-static HttpRequest *
-urnParse(const HttpRequestMethod& method, char *urn, HttpRequest *request)
+/// Update the URL object with parsed URI data.
+void
+URL::parseFinish(const AnyP::ProtocolType protocol,
+                 const char *const protoStr, // for unknown protocols
+                 const char *const aUrlPath,
+                 const char *const aHost,
+                 const SBuf &aLogin,
+                 const int aPort)
 {
-    debugs(50, 5, "urnParse: " << urn);
-    if (request) {
-        request->initHTTP(method, AnyP::PROTO_URN, "urn", urn + 4);
-        return request;
-    }
-
-    return new HttpRequest(method, AnyP::PROTO_URN, "urn", urn + 4);
+    setScheme(protocol, protoStr);
+    path(aUrlPath);
+    host(aHost);
+    userInfo(aLogin);
+    port(aPort);
 }
 
 void
 URL::touch()
 {
     absolute_.clear();
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/URL.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/URL.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/URL.h	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/URL.h	2017-07-02 16:41:18.000000000 +0800
@@ -50,12 +50,14 @@
         hostAddr_.setEmpty();
         port_ = 0;
         touch();
     }
     void touch(); ///< clear the cached URI display forms
 
+    bool parse(const HttpRequestMethod &, char *url);
+
     AnyP::UriScheme const & getScheme() const {return scheme_;}
 
     /// convert the URL scheme to that given
     void setScheme(const AnyP::ProtocolType &p, const char *str) {
         scheme_ = AnyP::UriScheme(p, str);
         touch();
@@ -101,12 +103,14 @@
      * userinfo@ field from RFC 3986 defined authority segments
      * when the protocol scheme is http: or https:.
      */
     SBuf &absolute() const;
 
 private:
+    void parseFinish(const AnyP::ProtocolType, const char *const, const char *const, const char *const, const SBuf &, const int);
+
     /**
      \par
      * The scheme of this URL. This has the 'type code' smell about it.
      * In future we may want to make the methods that dispatch based on
      * the scheme virtual and have a class per protocol.
      \par
@@ -163,13 +167,13 @@
 }
 
 class HttpRequest;
 class HttpRequestMethod;
 
 void urlInitialize(void);
-HttpRequest *urlParse(const HttpRequestMethod&, char *, HttpRequest *request = NULL);
+bool urlParse(const HttpRequestMethod&, char *, HttpRequest &request);
 char *urlCanonicalClean(const HttpRequest *);
 const char *urlCanonicalFakeHttps(const HttpRequest * request);
 bool urlIsRelative(const char *);
 char *urlMakeAbsolute(const HttpRequest *, const char *);
 char *urlRInternal(const char *host, unsigned short port, const char *dir, const char *name);
 char *urlInternal(const char *dir, const char *name);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/urn.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/urn.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/src/urn.cc	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src/urn.cc	2017-07-02 16:41:18.000000000 +0800
@@ -148,13 +148,13 @@
     LOCAL_ARRAY(char, local_urlres, 4096);
     char *host = getHost(uri);
     snprintf(local_urlres, 4096, "http://%s/uri-res/N2L?urn:" SQUIDSBUFPH, host, SQUIDSBUFPRINT(uri));
     safe_free(host);
     safe_free(urlres);
     urlres = xstrdup(local_urlres);
-    urlres_r = HttpRequest::CreateFromUrl(urlres);
+    urlres_r = HttpRequest::FromUrl(urlres, r->masterXaction);
 
     if (urlres_r == NULL) {
         debugs(52, 3, "urnStart: Bad uri-res URL " << urlres);
         ErrorState *err = new ErrorState(ERR_URN_RESOLVE, Http::scNotFound, r);
         err->url = urlres;
         urlres = NULL;
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src: XactionInitiator.cc
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/src: XactionInitiator.h
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/test-suite/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/test-suite/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/test-suite/Makefile.in	2017-06-01 21:01:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/test-suite/Makefile.in	2017-07-02 16:41:28.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/test-suite/squidconf/regressions-4.0.18 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/test-suite/squidconf/regressions-4.0.18
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/test-suite/squidconf/regressions-4.0.18	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/test-suite/squidconf/regressions-4.0.18	2017-07-02 16:41:18.000000000 +0800
@@ -1,7 +1,16 @@
+## Copyright (C) 1996-2017 The Squid Software Foundation and contributors
+##
+## Squid software is distributed under GPLv2+ license and includes
+## contributions from numerous individuals and organizations.
+## Please see the COPYING and CONTRIBUTORS files for details.
+##
+
+#
 # see Bug 4674
+#
 delay_pools 5
 
 delay_class 1 1 64000/64000
 
 delay_class 2 2
 delay_parameters 2 64000/64000 32000/32000
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/test-suite/stub_SBuf.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/test-suite/stub_SBuf.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/test-suite/stub_SBuf.cc	2017-06-02 05:59:52.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/test-suite/stub_SBuf.cc	2017-07-02 16:57:36.000000000 +0800
@@ -4,12 +4,13 @@
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
  */
 
 #include "squid.h"
+#include "sbuf/DetailedStats.h"
 
 #define STUB_API "SBuf.cc"
 #include "tests/STUB.h"
 
 #include "sbuf/SBuf.h"
 
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools: apparmor
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/helper-mux/helper-mux.8 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/helper-mux/helper-mux.8
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/helper-mux/helper-mux.8	2017-06-02 06:00:07.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/helper-mux/helper-mux.8	2017-07-02 16:57:36.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 4.08 (Pod::Simple 3.32)
+.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -126,13 +126,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "HELPER-MUX 8"
-.TH HELPER-MUX 8 "2017-06-01" "perl v5.24.1" "User Contributed Perl Documentation"
+.TH HELPER-MUX 8 "2017-07-02" "perl v5.24.1" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 helper\-mux \- Concurrency protocol multiplexer for Squid helpers
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/helper-mux/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/helper-mux/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/helper-mux/Makefile.in	2017-06-01 21:01:24.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/helper-mux/Makefile.in	2017-07-02 16:41:28.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/Makefile.am /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/Makefile.am
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/Makefile.am	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/Makefile.am	2017-07-02 16:41:18.000000000 +0800
@@ -7,13 +7,13 @@
 
 include $(top_srcdir)/src/Common.am
 
 ## we need our local files too (but avoid -I. at all costs)
 AM_CPPFLAGS += -I$(srcdir)
 
-SUBDIRS= helper-mux purge squidclient systemd sysvinit
+SUBDIRS= apparmor helper-mux purge squidclient systemd sysvinit
 EXTRA_DIST=
 man_MANS=
 DISTCLEANFILES=
 
 LDADD= \
 	$(top_builddir)/src/ip/libip.la \
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/Makefile.in	2017-06-01 21:01:23.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/Makefile.in	2017-07-02 16:41:28.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
@@ -773,13 +773,13 @@
 	-I$(top_builddir)/include $(LIBCPPUNIT_CFLAGS) $(KRB5INCS) \
 	$(am__append_1) -I$(srcdir)
 @ENABLE_XPROF_STATS_FALSE@LIBPROFILER = 
 @ENABLE_XPROF_STATS_TRUE@LIBPROFILER = $(top_builddir)/lib/profiler/libprofiler.la
 COMPAT_LIB = $(top_builddir)/compat/libcompatsquid.la $(LIBPROFILER)
 subst_perlshell = sed -e 's,[@]PERL[@],$(PERL),g' <$(srcdir)/$@.pl.in >$@ || ($(RM) -f $@ ; exit 1)
-SUBDIRS = helper-mux purge squidclient systemd sysvinit
+SUBDIRS = apparmor helper-mux purge squidclient systemd sysvinit
 EXTRA_DIST = helper-ok-dying.pl helper-ok.pl cachemgr.conf \
 	cachemgr.cgi.8 cachemgr.cgi.8.in
 man_MANS = cachemgr.cgi.8
 DISTCLEANFILES = 
 LDADD = \
 	$(top_builddir)/src/ip/libip.la \
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/purge/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/purge/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/purge/Makefile.in	2017-06-01 21:01:26.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/purge/Makefile.in	2017-07-02 16:41:28.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/purge/purge.1 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/purge/purge.1
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/purge/purge.1	2017-06-01 20:49:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/purge/purge.1	2017-07-02 16:41:18.000000000 +0800
@@ -255,13 +255,13 @@
 This program and manual was written by
 .if !'po4a'hide' .B Santiago Garcia Mantinan <manty@debian.org>
 .if !'po4a'hide' .I Amos Jeffries <amosjeffries@squid-cache.org>
 .PP
 Based on original squidpurge README.
 .
-..SH COPYRIGHT
+.SH COPYRIGHT
 .PP
  * Copyright (C) 1996-2017 The Squid Software Foundation and contributors
  *
  * Squid software is distributed under GPLv2+ license and includes
  * contributions from numerous individuals and organizations.
  * Please see the COPYING and CONTRIBUTORS files for details.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/squidclient/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/squidclient/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/squidclient/Makefile.in	2017-06-01 21:01:28.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/squidclient/Makefile.in	2017-07-02 16:41:28.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/systemd/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/systemd/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/systemd/Makefile.in	2017-06-01 21:01:29.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/systemd/Makefile.in	2017-07-02 16:41:28.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/sysvinit/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/sysvinit/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.20/tools/sysvinit/Makefile.in	2017-06-01 21:01:30.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/repos/squid-4.0.21/tools/sysvinit/Makefile.in	2017-07-02 16:41:28.000000000 +0800
@@ -1,10 +1,10 @@
-# Makefile.in generated by automake 1.15 from Makefile.am.
+# Makefile.in generated by automake 1.15.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+# Copyright (C) 1994-2017 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
 
 # This program is distributed in the hope that it will be useful,
