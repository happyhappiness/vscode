diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/config.h.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/config.h.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/config.h.in	2005-10-15 00:44:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/config.h.in	2005-11-22 00:57:30.000000000 +0800
@@ -21,12 +21,15 @@
 /* Define to the version of this package. */
 #undef PACKAGE_VERSION
 
 /* Use execinfo.h */
 #undef USE_EXECINFO
 
+/* Enable extra debugging checks. */
+#undef USE_EXTRA_DEBUG
+
 /* defined when we allow the use of fd_set's of any size */
 #undef USE_VARIABLE_FDSET
 
 /* Version number of package */
 #undef VERSION
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/configure /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/configure
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/configure	2005-10-15 00:37:15.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/configure	2005-11-22 00:57:34.000000000 +0800
@@ -1,9 +1,9 @@
 #! /bin/sh
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.59 for rtorrent 0.3.6.
+# Generated by GNU Autoconf 2.59 for rtorrent 0.4.0.
 #
 # Report bugs to <jaris@ifi.uio.no>.
 #
 # Copyright (C) 2003 Free Software Foundation, Inc.
 # This configure script is free software; the Free Software Foundation
 # gives unlimited permission to copy, distribute and modify it.
@@ -266,14 +266,14 @@
 # only ac_max_sed_lines should be used.
 : ${ac_max_here_lines=38}
 
 # Identity of this package.
 PACKAGE_NAME='rtorrent'
 PACKAGE_TARNAME='rtorrent'
-PACKAGE_VERSION='0.3.6'
-PACKAGE_STRING='rtorrent 0.3.6'
+PACKAGE_VERSION='0.4.0'
+PACKAGE_STRING='rtorrent 0.4.0'
 PACKAGE_BUGREPORT='jaris@ifi.uio.no'
 
 ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar CXX CXXFLAGS LDFLAGS CPPFLAGS ac_ct_CXX EXEEXT OBJEXT DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CXXDEPMODE am__fastdepCXX_TRUE am__fastdepCXX_FALSE RANLIB ac_ct_RANLIB CC CFLAGS ac_ct_CC CCDEPMODE am__fastdepCC_TRUE am__fastdepCC_FALSE PKG_CONFIG STUFF_CFLAGS STUFF_LIBS LIBOBJS LTLIBOBJS'
 ac_subst_files=''
 
 # Initialize some variables set by options.
@@ -743,13 +743,13 @@
 # Report the --help message.
 #
 if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures rtorrent 0.3.6 to adapt to many kinds of systems.
+\`configure' configures rtorrent 0.4.0 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
 To assign environment variables (e.g., CC, CFLAGS...), specify them as
 VAR=VALUE.  See below for descriptions of some of the useful variables.
 
@@ -805,21 +805,22 @@
   --program-transform-name=PROGRAM   run sed PROGRAM on installed program names
 _ACEOF
 fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of rtorrent 0.3.6:";;
+     short | recursive ) echo "Configuration of rtorrent 0.4.0:";;
    esac
   cat <<\_ACEOF
 
 Optional Features:
   --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
   --enable-debug          enable debug information [default=yes]
-  --enable-werror         enable the -Werror flag [default=no]
+  --enable-extra-debug    enable extra debugging checks. [default=no]
+  --enable-werror         enable the -Werror and -Wall flag [default=no]
   --disable-dependency-tracking  speeds up one-time build
   --enable-dependency-tracking   do not reject slow dependency extractors
   --disable-largefile     omit support for large files
 
 Optional Packages:
   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
@@ -932,13 +933,13 @@
   done
 fi
 
 test -n "$ac_init_help" && exit 0
 if $ac_init_version; then
   cat <<\_ACEOF
-rtorrent configure 0.3.6
+rtorrent configure 0.4.0
 generated by GNU Autoconf 2.59
 
 Copyright (C) 2003 Free Software Foundation, Inc.
 This configure script is free software; the Free Software Foundation
 gives unlimited permission to copy, distribute and modify it.
 _ACEOF
@@ -946,13 +947,13 @@
 fi
 exec 5>config.log
 cat >&5 <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by rtorrent $as_me 0.3.6, which was
+It was created by rtorrent $as_me 0.4.0, which was
 generated by GNU Autoconf 2.59.  Invocation command line was
 
   $ $0 $@
 
 _ACEOF
 {
@@ -1590,13 +1591,13 @@
   fi
 fi
 
 
 # Define the identity of the package.
  PACKAGE='rtorrent'
- VERSION='0.3.6'
+ VERSION='0.4.0'
 
 
 cat >>confdefs.h <<_ACEOF
 #define PACKAGE "$PACKAGE"
 _ACEOF
 
@@ -1808,18 +1809,33 @@
 
         CXXFLAGS="$CXXFLAGS -g -DDEBUG"
 
 fi;
 
 
+  # Check whether --enable-extra-debug or --disable-extra-debug was given.
+if test "${enable_extra_debug+set}" = set; then
+  enableval="$enable_extra_debug"
+
+        if test "$enableval" = "yes"; then
+
+cat >>confdefs.h <<\_ACEOF
+#define USE_EXTRA_DEBUG 1
+_ACEOF
+
+        fi
+
+fi;
+
+
   # Check whether --enable-werror or --disable-werror was given.
 if test "${enable_werror+set}" = set; then
   enableval="$enable_werror"
 
         if test "$enableval" = "yes"; then
-            CXXFLAGS="$CXXFLAGS -Werror"
+            CXXFLAGS="$CXXFLAGS -Werror -Wall"
         fi
 
 fi;
 
 
 ac_ext=cc
@@ -4200,37 +4216,37 @@
      echo "*** in your path, or set the PKG_CONFIG environment variable"
      echo "*** to the full path to pkg-config."
      echo "*** Or see http://www.freedesktop.org/software/pkgconfig to get pkg-config."
   else
      PKG_CONFIG_MIN_VERSION=0.9.0
      if $PKG_CONFIG --atleast-pkgconfig-version $PKG_CONFIG_MIN_VERSION; then
-        echo "$as_me:$LINENO: checking for sigc++-2.0 libtorrent >= 0.7.6" >&5
-echo $ECHO_N "checking for sigc++-2.0 libtorrent >= 0.7.6... $ECHO_C" >&6
+        echo "$as_me:$LINENO: checking for sigc++-2.0 libtorrent >= 0.8.0" >&5
+echo $ECHO_N "checking for sigc++-2.0 libtorrent >= 0.8.0... $ECHO_C" >&6
 
-        if $PKG_CONFIG --exists "sigc++-2.0 libtorrent >= 0.7.6" ; then
+        if $PKG_CONFIG --exists "sigc++-2.0 libtorrent >= 0.8.0" ; then
             echo "$as_me:$LINENO: result: yes" >&5
 echo "${ECHO_T}yes" >&6
             succeeded=yes
 
             echo "$as_me:$LINENO: checking STUFF_CFLAGS" >&5
 echo $ECHO_N "checking STUFF_CFLAGS... $ECHO_C" >&6
-            STUFF_CFLAGS=`$PKG_CONFIG --cflags "sigc++-2.0 libtorrent >= 0.7.6"`
+            STUFF_CFLAGS=`$PKG_CONFIG --cflags "sigc++-2.0 libtorrent >= 0.8.0"`
             echo "$as_me:$LINENO: result: $STUFF_CFLAGS" >&5
 echo "${ECHO_T}$STUFF_CFLAGS" >&6
 
             echo "$as_me:$LINENO: checking STUFF_LIBS" >&5
 echo $ECHO_N "checking STUFF_LIBS... $ECHO_C" >&6
-            STUFF_LIBS=`$PKG_CONFIG --libs "sigc++-2.0 libtorrent >= 0.7.6"`
+            STUFF_LIBS=`$PKG_CONFIG --libs "sigc++-2.0 libtorrent >= 0.8.0"`
             echo "$as_me:$LINENO: result: $STUFF_LIBS" >&5
 echo "${ECHO_T}$STUFF_LIBS" >&6
         else
             STUFF_CFLAGS=""
             STUFF_LIBS=""
             ## If we have a custom action on failure, don't print errors, but
             ## do set a variable so people can do so.
-            STUFF_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "sigc++-2.0 libtorrent >= 0.7.6"`
+            STUFF_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "sigc++-2.0 libtorrent >= 0.8.0"`
             echo $STUFF_PKG_ERRORS
         fi
 
 
 
      else
@@ -4240,14 +4256,14 @@
   fi
 
   if test $succeeded = yes; then
      CXXFLAGS="$CXXFLAGS $STUFF_CFLAGS $CURL_CFLAGS";
 		  LIBS="$LIBS $STUFF_LIBS $CURL_LIBS"
   else
-     { { echo "$as_me:$LINENO: error: Library requirements (sigc++-2.0 libtorrent >= 0.7.6) not met; consider adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a nonstandard prefix so pkg-config can find them." >&5
-echo "$as_me: error: Library requirements (sigc++-2.0 libtorrent >= 0.7.6) not met; consider adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a nonstandard prefix so pkg-config can find them." >&2;}
+     { { echo "$as_me:$LINENO: error: Library requirements (sigc++-2.0 libtorrent >= 0.8.0) not met; consider adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a nonstandard prefix so pkg-config can find them." >&5
+echo "$as_me: error: Library requirements (sigc++-2.0 libtorrent >= 0.8.0) not met; consider adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a nonstandard prefix so pkg-config can find them." >&2;}
    { (exit 1); exit 1; }; }
   fi
 
 
 
 cat >>confdefs.h <<\_ACEOF
@@ -4636,13 +4652,13 @@
   sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
 ## Running $as_me. ##
 _ASBOX
 } >&5
 cat >&5 <<_CSEOF
 
-This file was extended by rtorrent $as_me 0.3.6, which was
+This file was extended by rtorrent $as_me 0.4.0, which was
 generated by GNU Autoconf 2.59.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
   CONFIG_HEADERS  = $CONFIG_HEADERS
   CONFIG_LINKS    = $CONFIG_LINKS
   CONFIG_COMMANDS = $CONFIG_COMMANDS
@@ -4699,13 +4715,13 @@
 
 Report bugs to <bug-autoconf@gnu.org>."
 _ACEOF
 
 cat >>$CONFIG_STATUS <<_ACEOF
 ac_cs_version="\\
-rtorrent config.status 0.3.6
+rtorrent config.status 0.4.0
 configured by $0, generated by GNU Autoconf 2.59,
   with options \\"`echo "$ac_configure_args" | sed 's/[\\""\`\$]/\\\\&/g'`\\"
 
 Copyright (C) 2003 Free Software Foundation, Inc.
 This config.status script is free software; the Free Software Foundation
 gives unlimited permission to copy, distribute and modify it."
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/configure.ac /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/configure.ac
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/configure.ac	2005-10-15 00:31:49.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/configure.ac	2005-11-22 00:57:18.000000000 +0800
@@ -1,16 +1,17 @@
-AC_INIT(rtorrent, 0.3.6, jaris@ifi.uio.no)
+AC_INIT(rtorrent, 0.4.0, jaris@ifi.uio.no)
 
 AM_INIT_AUTOMAKE
 AM_CONFIG_HEADER(config.h)
 
 sinclude(scripts/checks.m4)
 sinclude(scripts/common.m4)
 
 TORRENT_CHECK_CXXFLAGS()
 TORRENT_ENABLE_DEBUG()
+TORRENT_ENABLE_EXTRA_DEBUG()
 TORRENT_ENABLE_WERROR()
 
 AC_PROG_CXX
 AC_PROG_RANLIB
 AC_SYS_LARGEFILE
 
@@ -19,13 +20,13 @@
 TORRENT_CHECK_EXECINFO()
 TORRENT_CHECK_CURL()
 TORRENT_OTFD()
 
 TORRENT_WITHOUT_VARIABLE_FDSET()
 
-PKG_CHECK_MODULES(STUFF, sigc++-2.0 libtorrent >= 0.7.6,
+PKG_CHECK_MODULES(STUFF, sigc++-2.0 libtorrent >= 0.8.0,
 	          CXXFLAGS="$CXXFLAGS $STUFF_CFLAGS $CURL_CFLAGS";
 		  LIBS="$LIBS $STUFF_LIBS $CURL_LIBS")
 
 AC_DEFINE(HAVE_CONFIG_H, 1, true if config.h was included)
 
 AC_OUTPUT([
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/doc/rtorrent.1 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/doc/rtorrent.1
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/doc/rtorrent.1	2005-09-03 03:07:47.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/doc/rtorrent.1	2005-11-13 05:10:24.000000000 +0800
@@ -1,12 +1,12 @@
 .\" This manpage has been automatically generated by docbook2man 
 .\" from a DocBook document.  This tool can be found at:
 .\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
 .\" Please send any bug reports, improvements, comments, patches, 
 .\" etc. to Steve Cheng <steve@ggi-project.org>.
-.TH "RTORRENT" "1" "02 September 2005" "BitTorrent client for ncurses" ""
+.TH "RTORRENT" "1" "12 November 2005" "BitTorrent client for ncurses" ""
 
 .SH NAME
 rtorrent \- a BitTorrent client for ncurses
 .SH SYNOPSIS
 
 \fBrtorrent\fR [ \fB-h\fR ] [ \fB-o key1=opt1,...\fR ] [ \fBURL | FILE\fR\fI ...\fR ]
@@ -164,12 +164,17 @@
 \fBsession = \fIdirectory\fB\fR
 Session management will be enabled and the torrent files for
 all open downloads will be stored in this directory. Only
 one instance of rtorrent should be used with each session
 directory, though at the moment no locking is done. An empty
 string will disable the session directory.
+.TP
+\fBencoding_list = \fIencoding\fB\fR
+Add a preferred filename encoding to the list. The encodings
+are attempted in the order they are inserted, if none match
+the torrent default is used.
 .SH "ADVANCED SETTINGS"
 .PP
 This list contains settings users shouldn't need to touch.
 .TP
 \fBhash_read_ahead = \fIMB\fB\fR
 Configure how far ahead we ask the kernel to read when doing
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/doc/rtorrent.1.xml /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/doc/rtorrent.1.xml
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/doc/rtorrent.1.xml	2005-08-28 01:10:51.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/doc/rtorrent.1.xml	2005-11-12 23:31:48.000000000 +0800
@@ -391,12 +391,23 @@
           directory, though at the moment no locking is done. An empty
           string will disable the session directory.
 
         </para></listitem>
       </varlistentry>
 
+      <varlistentry>
+        <term>encoding_list = <replaceable>encoding</replaceable></term>
+        <listitem><para>
+
+          Add a preferred filename encoding to the list. The encodings
+          are attempted in the order they are inserted, if none match
+          the torrent default is used.
+
+        </para></listitem>
+      </varlistentry>
+
     </variablelist>
 
   </refsect1>
 
 
   <refsect1>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/rak/functional.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/rak/functional.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/rak/functional.h	2005-10-15 05:51:04.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/rak/functional.h	2005-11-12 23:31:58.000000000 +0800
@@ -408,13 +408,13 @@
 private:
   Object* m_object;
   Function m_function;
 };
 
 template <typename Object, typename Ret, typename Arg1, typename Arg2>
-class mem_fn2 {
+class mem_fn2 : public std::binary_function<Arg1, Arg2, Ret> {
 public:
   typedef Ret (Object::*Function)(Arg1, Arg2);
 
   mem_fn2() : m_object(NULL) {}
   mem_fn2(Object* o, Function f) : m_object(o), m_function(f) {}
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/scripts/common.m4 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/scripts/common.m4
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/scripts/common.m4	2005-09-01 18:30:48.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/scripts/common.m4	2005-11-12 23:31:49.000000000 +0800
@@ -25,16 +25,16 @@
   ])
 ])
 
 
 AC_DEFUN([TORRENT_ENABLE_WERROR], [
   AC_ARG_ENABLE(werror,
-    [  --enable-werror         enable the -Werror flag [[default=no]]],
+    [  --enable-werror         enable the -Werror and -Wall flag [[default=no]]],
     [
         if test "$enableval" = "yes"; then
-            CXXFLAGS="$CXXFLAGS -Werror"
+            CXXFLAGS="$CXXFLAGS -Werror -Wall"
         fi
   ])
 ])
 
 
 AC_DEFUN([TORRENT_ENABLE_EXTRA_DEBUG], [
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/control.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/control.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/control.cc	2005-10-08 01:48:09.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/control.cc	2005-11-12 23:31:57.000000000 +0800
@@ -76,12 +76,13 @@
 Control::initialize() {
   display::Canvas::initialize();
   display::Window::slot_adjust(sigc::mem_fun(m_display, &display::Manager::adjust_layout));
 
   m_core->get_poll_manager()->signal_interrupted().connect(sigc::mem_fun(*m_inputStdin, &input::InputEvent::event_read));
   m_core->get_poll_manager()->signal_interrupted().connect(sigc::ptr_fun(display::Canvas::do_update));
+  m_core->get_poll_manager()->get_http_stack()->set_user_agent(std::string(PACKAGE "/" VERSION "/") + torrent::version());
 
   m_core->initialize_second();
 
   m_ui->init(this);
 
   m_inputStdin->insert(m_core->get_poll_manager()->get_torrent_poll());
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/curl_get.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/curl_get.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/curl_get.cc	2005-09-17 07:44:26.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/curl_get.cc	2005-11-22 00:45:44.000000000 +0800
@@ -43,12 +43,20 @@
 
 #include "curl_get.h"
 #include "curl_stack.h"
 
 namespace core {
 
+size_t
+curl_get_receive_write(void* data, size_t size, size_t nmemb, void* handle) {
+  if (!((CurlGet*)handle)->stream()->write((char*)data, size * nmemb).fail())
+    return size * nmemb;
+  else
+    return 0;
+}
+
 CurlGet::CurlGet(CurlStack* s) :
   m_handle(NULL),
   m_stack(s) {
 
   if (m_stack == NULL)
     throw std::logic_error("Tried to create CurlGet without a valid CurlStack");
@@ -70,18 +78,23 @@
 
   if (m_stream == NULL)
     throw std::logic_error("Tried to call CurlGet::start without a valid output stream");
 
   m_handle = curl_easy_init();
 
-  curl_easy_setopt(m_handle, CURLOPT_URL,           m_url.c_str());
-  curl_easy_setopt(m_handle, CURLOPT_USERAGENT,     m_userAgent.c_str());
-  curl_easy_setopt(m_handle, CURLOPT_WRITEFUNCTION, &curl_get_receive_write);
-  curl_easy_setopt(m_handle, CURLOPT_WRITEDATA,     this);
+  curl_easy_setopt(m_handle, CURLOPT_URL,            m_url.c_str());
+  curl_easy_setopt(m_handle, CURLOPT_WRITEFUNCTION,  &curl_get_receive_write);
+  curl_easy_setopt(m_handle, CURLOPT_WRITEDATA,      this);
+
+  if (m_timeout != 0) {
+    curl_easy_setopt(m_handle, CURLOPT_CONNECTTIMEOUT, 60);
+    curl_easy_setopt(m_handle, CURLOPT_TIMEOUT,        m_timeout);
+  }
 
   curl_easy_setopt(m_handle, CURLOPT_FORBID_REUSE,   1);
+  curl_easy_setopt(m_handle, CURLOPT_NOSIGNAL,       1);
   curl_easy_setopt(m_handle, CURLOPT_FOLLOWLOCATION, 1);
   curl_easy_setopt(m_handle, CURLOPT_MAXREDIRS,      5);
 
   m_stack->add_get(this);
 }
 
@@ -96,38 +109,38 @@
 
   m_handle = NULL;
 }
 
 
 double
-CurlGet::get_size_done() {
+CurlGet::size_done() {
   double d = 0.0;
   curl_easy_getinfo(m_handle, CURLINFO_SIZE_DOWNLOAD, &d);
 
   return d;
 }
 
 double
-CurlGet::get_size_total() {
+CurlGet::size_total() {
   double d = 0.0;
   curl_easy_getinfo(m_handle, CURLINFO_CONTENT_LENGTH_DOWNLOAD, &d);
 
   return d;
 }
 
 void
+CurlGet::set_user_agent(const char* s) {
+  curl_easy_setopt(m_handle, CURLOPT_USERAGENT, s);
+}
+
+void
 CurlGet::perform(CURLMsg* msg) {
   if (msg->msg != CURLMSG_DONE)
     throw std::logic_error("CurlGet::process got CURLMSG that isn't done");
 
   if (msg->data.result == CURLE_OK)
     m_signalDone.emit();
   else
     m_signalFailed.emit(curl_easy_strerror(msg->data.result));
 }
 
-size_t
-curl_get_receive_write(void* data, size_t size, size_t nmemb, void* handle) {
-  return ((CurlGet*)handle)->m_stream->write((char*)data, size * nmemb).fail() ? 0 : size * nmemb;
-}
-
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/curl_get.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/curl_get.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/curl_get.h	2005-08-28 01:10:54.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/curl_get.h	2005-11-12 23:31:50.000000000 +0800
@@ -58,28 +58,28 @@
 
   static CurlGet*    new_object(CurlStack* s);
 
   void               start();
   void               close();
 
-  bool               is_busy() { return m_handle; }
+  bool               is_busy()                      { return m_handle; }
 
-  double             get_size_done();
-  double             get_size_total();
+  double             size_done();
+  double             size_total();
+
+  void               set_user_agent(const char* s);
 
  protected:
-  CURL*              handle() { return m_handle; }
+  CURL*              handle()                       { return m_handle; }
 
   void               perform(CURLMsg* msg);
 
  private:
   CurlGet(const CurlGet&);
   void operator = (const CurlGet&);
 
-  friend size_t      curl_get_receive_write(void* data, size_t size, size_t nmemb, void* handle);
-
   CURL*              m_handle;
 
   CurlStack*         m_stack;
 };
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/curl_stack.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/curl_stack.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/curl_stack.cc	2005-09-17 07:44:52.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/curl_stack.cc	2005-11-12 23:31:51.000000000 +0800
@@ -100,12 +100,14 @@
 
   return std::max(maxFd, 0);
 }
 
 void
 CurlStack::add_get(CurlGet* get) {
+  get->set_user_agent(m_userAgent.c_str());
+
   CURLMcode code;
 
   if ((code = curl_multi_add_handle((CURLM*)m_handle, get->handle())) > 0)
     throw std::logic_error("curl_multi_add_handle \"" + std::string(curl_multi_strerror(code)));
 
   m_size++;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/curl_stack.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/curl_stack.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/curl_stack.h	2005-08-28 01:10:53.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/curl_stack.h	2005-11-12 23:31:50.000000000 +0800
@@ -35,12 +35,13 @@
 //           3185 Skoppum, NORWAY
 
 #ifndef RTORRENT_CORE_CURL_STACK_H
 #define RTORRENT_CORE_CURL_STACK_H
 
 #include <list>
+#include <string>
 #include <sigc++/slot.h>
 
 namespace core {
 
 class CurlGet;
 
@@ -61,12 +62,15 @@
 
   // TODO: Set fd_set's only once?
   unsigned int        fdset(fd_set* readfds, fd_set* writefds, fd_set* exceptfds);
 
   SlotFactory         get_http_factory();
 
+  const std::string&  user_agent() const                   { return m_userAgent; }
+  void                set_user_agent(const std::string& s) { m_userAgent = s; }
+
   static void         global_init();
   static void         global_cleanup();
 
  protected:
   void                add_get(CurlGet* get);
   void                remove_get(CurlGet* get);
@@ -76,11 +80,13 @@
   void operator = (const CurlStack&);
 
   void*               m_handle;
 
   int                 m_size;
   CurlGetList         m_getList;
+
+  std::string         m_userAgent;
 };
 
 }
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/download.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/download.cc	2005-10-11 03:03:28.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download.cc	2005-11-12 23:31:50.000000000 +0800
@@ -49,16 +49,19 @@
   m_connectionLeech(torrent::Download::CONNECTION_LEECH),
   m_connectionSeed(torrent::Download::CONNECTION_SEED) {
 }
 
 void
 Download::start() {
-  if (is_done())
+  if (is_done()) {
     m_download.set_connection_type(m_connectionSeed);
-  else
+    torrent::download_set_priority(m_download, 2);
+  } else {
     m_download.set_connection_type(m_connectionLeech);
+    torrent::download_set_priority(m_download, 4);
+  }
 
   m_download.start();
 }
 
 void
 Download::set_download(torrent::Download d) {
@@ -70,20 +73,23 @@
 }
 
 void
 Download::set_root_directory(const std::string& d) {
   m_download.set_root_dir(d +
 			  (!d.empty() && *d.rbegin() != '/' ? "/" : "") +
-			  (m_download.get_entry_size() > 1 ? m_download.get_name() : ""));
+			  (m_download.size_file_entries() > 1 ? m_download.name() : ""));
 }
 
 void
 Download::enable_udp_trackers(bool state) {
-  for (int i = 0, last = m_download.get_tracker_size(); i < last; ++i)
-    if (m_download.get_tracker(i).get_type() == torrent::Tracker::TRACKER_UDP)
-      m_download.get_tracker(i).enable(state);
+  for (int i = 0, last = m_download.size_trackers(); i < last; ++i)
+    if (m_download.tracker(i).tracker_type() == torrent::Tracker::TRACKER_UDP)
+      if (state)
+	m_download.tracker(i).enable();
+      else
+	m_download.tracker(i).disable();
 }
 
 void
 Download::release_download() {
   if (!m_download.is_valid())
     return;
@@ -95,12 +101,13 @@
   m_download = torrent::Download();
 }
 
 void
 Download::receive_finished() {
   m_download.set_connection_type(m_connectionSeed);
+  torrent::download_set_priority(m_download, 2);
 }
 
 void
 Download::receive_tracker_msg(std::string msg) {
   if (msg.empty())
     m_message = "";
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/download_factory.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download_factory.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/download_factory.cc	2005-10-18 00:26:39.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download_factory.cc	2005-11-17 04:38:54.000000000 +0800
@@ -138,13 +138,13 @@
     return;
   }
 
   if (m_session) {
     torrent::Bencode& bencode = (*itr)->get_bencode();
     
-    if (bencode["rtorrent"]["state"].as_string() == "started")
+    if (bencode.get_key("rtorrent").get_key("state").as_string() == "started")
       m_manager->start(*itr);
 
   } else {
     if (m_start)
       m_manager->start(*itr);
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/download.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/download.h	2005-08-31 23:15:00.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download.h	2005-11-12 23:31:50.000000000 +0800
@@ -57,20 +57,20 @@
 
   void               set_download(torrent::Download d);
   void               release_download();
 
   torrent::Download& get_download()                  { return m_download; }
   const torrent::Download& get_download() const      { return m_download; }
-  std::string        get_hash()                      { return m_download.get_hash(); }
-  torrent::Bencode&  get_bencode()                   { return m_download.get_bencode(); }
+  std::string        get_hash()                      { return m_download.info_hash(); }
+  torrent::Bencode&  get_bencode()                   { return m_download.bencode(); }
   
   const std::string& get_message()                   { return m_message; }
 
   void               set_root_directory(const std::string& d);
 
-  ConnType           get_connection_current() const                { return m_download.get_connection_type(); }
+  ConnType           get_connection_current() const                { return m_download.connection_type(); }
   ConnType           get_connection_leech() const                  { return m_connectionLeech; }
   ConnType           get_connection_seed() const                   { return m_connectionSeed; }
 
   void               set_connection_leech(const std::string& name) { m_connectionLeech = string_to_connection_type(name); }
   void               set_connection_seed(const std::string& name)  { m_connectionSeed = string_to_connection_type(name); }
 
@@ -81,13 +81,13 @@
   template <typename Ret, Ret (torrent::Download::*func)()>
   void               call()                                                { (m_download.*func)(); }
 
   template <typename Ret, typename Arg1, Ret (torrent::Download::*func)(Arg1)>
   void               call(Arg1 a1)                                         { (m_download.*func)(a1); }
 
-  bool operator == (const std::string& str)                                { return str == m_download.get_hash(); }
+  bool operator == (const std::string& str)                                { return str == m_download.info_hash(); }
 
   void               receive_finished();
 
   static ConnType    string_to_connection_type(const std::string& name);
   static const char* connection_type_to_string(ConnType t);
 
@@ -106,12 +106,12 @@
   sigc::connection   m_connTrackerFailed;
   sigc::connection   m_connStorageError;
 };
 
 inline bool
 Download::is_done() {
-  return m_download.get_chunks_done() == m_download.get_chunks_total();
+  return m_download.chunks_done() == m_download.chunks_total();
 }
 
 }
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/download_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/download_list.cc	2005-10-11 01:42:09.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download_list.cc	2005-11-12 23:31:50.000000000 +0800
@@ -61,13 +61,13 @@
 }
 
 DownloadList::iterator
 DownloadList::erase(iterator itr) {
   m_slotMapErase.for_each(*itr);
 
-  torrent::download_remove((*itr)->get_hash());
+  torrent::download_remove((*itr)->get_download());
   (*itr)->release_download();
   delete *itr;
 
   return Base::erase(itr);
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/download_store.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download_store.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/download_store.cc	2005-08-28 01:10:54.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download_store.cc	2005-11-12 23:31:50.000000000 +0800
@@ -50,13 +50,13 @@
 namespace core {
 
 void
 DownloadStore::use(const std::string& path) {
   m_path = path;
 
-  if (*m_path.rbegin() != '/')
+  if (!m_path.empty() && *m_path.rbegin() != '/')
     m_path += '/';
 }
 
 void
 DownloadStore::save(Download* d) {
   if (!is_active())
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/manager.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/manager.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/manager.cc	2005-10-18 00:41:54.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/manager.cc	2005-11-17 04:39:46.000000000 +0800
@@ -173,13 +173,13 @@
   return m_downloadList.erase(itr);
 }  
 
 void
 Manager::start(Download* d) {
   try {
-    d->get_bencode()["rtorrent"]["state"] = "started";
+    d->get_bencode().get_key("rtorrent").get_key("state") = "started";
 
     if (d->get_download().is_active())
       return;
 
     if (!d->get_download().is_open())
       m_downloadList.open(d);
@@ -196,13 +196,13 @@
   }
 }
 
 void
 Manager::stop(Download* d) {
   try {
-    d->get_bencode()["rtorrent"]["state"] = "stopped";
+    d->get_bencode().get_key("rtorrent").get_key("state") = "stopped";
 
     m_downloadList.stop(d);
 
   } catch (torrent::local_error& e) {
     m_logImportant.push_front(e.what());
     m_logComplete.push_front(e.what());
@@ -262,18 +262,18 @@
 
 void
 Manager::initialize_bencode(Download* d) {
   torrent::Bencode& bencode = d->get_bencode();
 
   if (!bencode.has_key("rtorrent") ||
-      !bencode["rtorrent"].is_map())
+      !bencode.get_key("rtorrent").is_map())
     bencode.insert_key("rtorrent", torrent::Bencode(torrent::Bencode::TYPE_MAP));
     
-  if (!bencode["rtorrent"].has_key("state") ||
-      !bencode["rtorrent"]["state"].is_string())
-    bencode["rtorrent"].insert_key("state", "started");
+  if (!bencode.get_key("rtorrent").has_key("state") ||
+      !bencode.get_key("rtorrent").get_key("state").is_string())
+    bencode.get_key("rtorrent").insert_key("state", "stopped");
 }
 
 void
 Manager::prepare_hash_check(Download* d) {
   m_downloadList.close(d);
   d->get_download().hash_resume_clear();
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/poll_manager.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/poll_manager.cc	2005-09-17 09:07:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager.cc	2005-11-12 23:31:50.000000000 +0800
@@ -47,22 +47,22 @@
   m_poll(poll) {
 
   if (m_poll == NULL)
     throw std::logic_error("PollManager::PollManager(...) received poll == NULL");
 
 #if defined USE_VARIABLE_FDSET
-  m_setSize = m_poll->get_open_max() / 8;
+  m_setSize = m_poll->open_max() / 8;
   m_readSet = (fd_set*)new char[m_setSize];
   m_writeSet = (fd_set*)new char[m_setSize];
   m_errorSet = (fd_set*)new char[m_setSize];
 
   std::memset(m_readSet, 0, m_setSize);
   std::memset(m_writeSet, 0, m_setSize);
   std::memset(m_errorSet, 0, m_setSize);
 #else
-  if (m_poll->get_open_max() > FD_SETSIZE)
+  if (m_poll->open_max() > FD_SETSIZE)
     throw std::logic_error("PollManager::PollManager(...) received a max open sockets >= FD_SETSIZE, but USE_VARIABLE_FDSET was not defined");
 
   m_setSize = FD_SETSIZE / 8;
   m_readSet = new fd_set;
   m_writeSet = new fd_set;
   m_errorSet = new fd_set;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/poll_manager_epoll.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager_epoll.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/poll_manager_epoll.cc	2005-10-07 04:06:44.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager_epoll.cc	2005-11-12 23:31:50.000000000 +0800
@@ -59,13 +59,16 @@
 
 PollManagerEPoll::~PollManagerEPoll() {
 }
 
 void
 PollManagerEPoll::poll(utils::Timer timeout) {
-  timeout = std::min(timeout, utils::Timer(torrent::get_next_timeout()));
+  // Add 1ms to ensure we don't idle loop due to the lack of
+  // resolution.
+  torrent::perform();
+  timeout = std::min(timeout, utils::Timer(torrent::next_timeout()));
 
   if (m_httpStack.is_busy()) {
     // When we're using libcurl we need to use select, but as this is
     // inefficient we try avoiding it whenever possible.
 #if defined USE_VARIABLE_FDSET
     std::memset(m_readSet, 0, m_setSize);
@@ -73,41 +76,40 @@
     std::memset(m_errorSet, 0, m_setSize);
 #else
     FD_ZERO(m_readSet);
     FD_ZERO(m_writeSet);
     FD_ZERO(m_errorSet);
 #endif    
-    FD_SET(static_cast<torrent::PollEPoll*>(m_poll)->get_fd(), m_readSet);
+    FD_SET(static_cast<torrent::PollEPoll*>(m_poll)->file_descriptor(), m_readSet);
 
-    unsigned int maxFd = std::max((unsigned int)static_cast<torrent::PollEPoll*>(m_poll)->get_fd(),
+    unsigned int maxFd = std::max((unsigned int)static_cast<torrent::PollEPoll*>(m_poll)->file_descriptor(),
 				  m_httpStack.fdset(m_readSet, m_writeSet, m_errorSet));
 
     timeval t = timeout.tval();
 
     if (select(maxFd + 1, m_readSet, m_writeSet, m_errorSet, &t) == -1)
       return check_error();
 
     m_httpStack.perform();
 
-    if (!FD_ISSET(static_cast<torrent::PollEPoll*>(m_poll)->get_fd(), m_readSet)) {
+    if (!FD_ISSET(static_cast<torrent::PollEPoll*>(m_poll)->file_descriptor(), m_readSet)) {
       // Need to call perform here so that scheduled task get done
       // even if there's no socket events outside of the http stuff.
       torrent::perform();
       return;
     }
 
     // Clear the timeout since we've already used it in the select call.
     timeout = utils::Timer();
   }
 
   // Yes, below is how much code really *should* have been in this
   // function. ;)
-  torrent::perform();
 
-  if (static_cast<torrent::PollEPoll*>(m_poll)->poll(timeout.usec() / 1000) == -1)
+  if (static_cast<torrent::PollEPoll*>(m_poll)->poll((timeout.usec() + 999) / 1000) == -1)
     return check_error();
 
-  static_cast<torrent::PollEPoll*>(m_poll)->perform();
   torrent::perform();
+  static_cast<torrent::PollEPoll*>(m_poll)->perform();
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/poll_manager.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/poll_manager.h	2005-08-28 01:10:53.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager.h	2005-11-12 23:31:50.000000000 +0800
@@ -53,13 +53,13 @@
 public:
   typedef sigc::signal0<void> Signal;
 
   PollManager(torrent::Poll* poll);
   virtual ~PollManager();
 
-  unsigned int        get_open_max() const         { return m_poll->get_open_max(); }
+  unsigned int        get_open_max() const         { return m_poll->open_max(); }
 
   CurlStack*          get_http_stack()             { return &m_httpStack; }
   torrent::Poll*      get_torrent_poll()           { return m_poll; }
 
   virtual void        poll(utils::Timer timeout) = 0;
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/poll_manager_select.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager_select.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/core/poll_manager_select.cc	2005-08-28 01:10:53.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager_select.cc	2005-11-12 23:31:50.000000000 +0800
@@ -59,13 +59,14 @@
 
 PollManagerSelect::~PollManagerSelect() {
 }
 
 void
 PollManagerSelect::poll(utils::Timer timeout) {
-  timeout = std::min(timeout, utils::Timer(torrent::get_next_timeout()));
+  torrent::perform();
+  timeout = std::min(timeout, utils::Timer(torrent::next_timeout()));
 
 #if defined USE_VARIABLE_FDSET
   std::memset(m_readSet, 0, m_setSize);
   std::memset(m_writeSet, 0, m_setSize);
   std::memset(m_errorSet, 0, m_setSize);
 #else
@@ -86,10 +87,9 @@
 
   if (m_httpStack.is_busy())
     m_httpStack.perform();
 
   torrent::perform();
   static_cast<torrent::PollSelect*>(m_poll)->perform(m_readSet, m_writeSet, m_errorSet);
-  torrent::perform();
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/utils.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/utils.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/utils.cc	2005-10-18 03:14:49.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/utils.cc	2005-11-16 01:42:39.000000000 +0800
@@ -57,84 +57,93 @@
     *(buf++) = *(str++);
 
   return buf;
 }
 
 char*
+print_hhmmss(char* buf, unsigned int length, time_t t) {
+  std::tm *u = std::localtime(&t);
+  
+  if (u == NULL)
+    return "inv_time";
+
+  unsigned int s = snprintf(buf, length, "%02u:%02u:%02u", u->tm_hour, u->tm_min, u->tm_sec);
+
+  return buf + std::min(s, length);
+}
+
+char*
+print_ddmmyyyy(char* buf, unsigned int length, time_t t) {
+  std::tm *u = std::gmtime(&t);
+  
+  if (u == NULL)
+    return "inv_time";
+
+  unsigned int s = snprintf(buf, length, "%02u/%02u/%04u", u->tm_mday, (u->tm_mon + 1), (1900 + u->tm_year));
+
+  return buf + std::min(s, length);
+}
+
+char*
 print_download_title(char* buf, unsigned int length, core::Download* d) {
   return buf + std::max(0, snprintf(buf, length, "%s",
-				    d->get_download().get_name().c_str()));
+				    d->get_download().name().c_str()));
 }
 
 char*
 print_download_info(char* buf, unsigned int length, core::Download* d) {
   char* last = buf + length;
 
   buf += std::max(0, snprintf(buf, last - buf, "Torrent: "));
 
   if (!d->get_download().is_open())
     buf += std::max(0, snprintf(buf, last - buf, "closed            "));
   else if (d->is_done())
     buf += std::max(0, snprintf(buf, last - buf, "done %10.1f MB",
-				(double)d->get_download().get_bytes_total() / (double)(1 << 20)));
+				(double)d->get_download().bytes_total() / (double)(1 << 20)));
   else
     buf += std::max(0, snprintf(buf, last - buf, "%6.1f / %6.1f MB",
-				(double)d->get_download().get_bytes_done() / (double)(1 << 20),
-				(double)d->get_download().get_bytes_total() / (double)(1 << 20)));
+				(double)d->get_download().bytes_done() / (double)(1 << 20),
+				(double)d->get_download().bytes_total() / (double)(1 << 20)));
   
   buf += std::max(0, snprintf(buf, last - buf, " Rate: %5.1f / %5.1f KB Uploaded: %.1f MB",
-			      (double)d->get_download().get_up_rate().rate() / (1 << 10),
-			      (double)d->get_download().get_down_rate().rate() / (1 << 10),
-			      (double)d->get_download().get_up_rate().total() / (1 << 20)));
+			      (double)d->get_download().up_rate()->rate() / (1 << 10),
+			      (double)d->get_download().down_rate()->rate() / (1 << 10),
+			      (double)d->get_download().up_rate()->total() / (1 << 20)));
 
   return buf;
 }
 
 char*
 print_download_status(char* buf, unsigned int length, core::Download* d) {
   if (!d->get_download().is_active())
     buf += std::max(0, snprintf(buf, length, "Inactive: "));
 
   if (d->get_download().is_hash_checking())
-    buf += std::max(0, snprintf(buf, length, "Checking hash"));
+    buf += std::max(0, snprintf(buf, length, "Checking hash [%2i%%]",
+				(d->get_download().chunks_hashed() * 100) / d->get_download().chunks_total()));
 
   else if (d->get_download().is_tracker_busy() &&
-	   d->get_download().get_tracker_focus() < d->get_download().get_tracker_size())
+	   d->get_download().tracker_focus() < d->get_download().size_trackers())
     buf += std::max(0, snprintf(buf, length, "Tracker[%i:%i]: Connecting to %s",
-				d->get_download().get_tracker(d->get_download().get_tracker_focus()).get_group(),
-				d->get_download().get_tracker_focus(),
-				d->get_download().get_tracker(d->get_download().get_tracker_focus()).get_url().c_str()));
+				d->get_download().tracker(d->get_download().tracker_focus()).group(),
+				d->get_download().tracker_focus(),
+				d->get_download().tracker(d->get_download().tracker_focus()).url().c_str()));
 
   else if (!d->get_message().empty())
     buf += std::max(0, snprintf(buf, length, "%s", d->get_message().c_str()));
 
   else
     buf[0] = '\0';
 
   return buf;
 }
 
-char*
-print_hhmmss(char* buf, unsigned int length, time_t t) {
-  std::tm *u = std::localtime(&t);
-  
-  if (u == NULL)
-    return "inv_time";
-
-  unsigned int s = snprintf(buf, length, "%02u:%02u:%02u", u->tm_hour, u->tm_min, u->tm_sec);
-
-  return buf + std::min(s, length);
-}
-
-char*
-print_ddmmyyyy(char* buf, unsigned int length, time_t t) {
-  std::tm *u = std::gmtime(&t);
+// char*
+// print_entry_tags(char* buf, unsigned int length) {
   
-  if (u == NULL)
-    return "inv_time";
-
-  unsigned int s = snprintf(buf, length, "%02u/%02u/%04u", u->tm_mday, (u->tm_mon + 1), (1900 + u->tm_year));
+// }
 
-  return buf + std::min(s, length);
-}
+// char*
+// print_entry_file(char* buf, unsigned int length, const torrent::Entry& entry);
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/utils.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/utils.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/utils.h	2005-10-18 02:54:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/utils.h	2005-11-14 22:39:32.000000000 +0800
@@ -45,20 +45,27 @@
 }
 
 namespace utils {
   class Timer;
 }
 
+namespace torrent {
+  class Entry;
+}
+
 namespace display {
 
 char*       print_string(char* buf, unsigned int length, char* str);
 
+char*       print_hhmmss(char* buf, unsigned int length, time_t t);
+char*       print_ddmmyyyy(char* buf, unsigned int length, time_t t);
+
 char*       print_download_title(char* buf, unsigned int length, core::Download* d);
 char*       print_download_info(char* buf, unsigned int length, core::Download* d);
 char*       print_download_status(char* buf, unsigned int length, core::Download* d);
 
-char*       print_hhmmss(char* buf, unsigned int length, time_t t);
-char*       print_ddmmyyyy(char* buf, unsigned int length, time_t t);
+char*       print_entry_tags(char* buf, unsigned int length);
+char*       print_entry_file(char* buf, unsigned int length, const torrent::Entry& entry);
 
 }
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/window_download_statusbar.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_download_statusbar.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/window_download_statusbar.cc	2005-08-28 01:10:58.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_download_statusbar.cc	2005-11-14 22:38:49.000000000 +0800
@@ -61,36 +61,23 @@
   char* position;
   char* last = buffer + m_canvas->get_width() - 2;
 
   position = print_download_info(buffer, last - buffer, m_download);
   m_canvas->print(0, 0, "%s", buffer);
 
-//   if (m_download->get_download().get_chunks_done() != m_download->get_download().get_chunks_total() || !m_download->get_download().is_open())
-//     m_canvas->print(0, 0, "Torrent: %.1f / %.1f MiB Rate: %5.1f / %5.1f KiB Uploaded: %.1f MiB",
-// 		    (double)m_download->get_download().get_bytes_done() / (double)(1 << 20),
-// 		    (double)m_download->get_download().get_bytes_total() / (double)(1 << 20),
-// 		    (double)m_download->get_download().get_write_rate().rate() / 1024.0,
-// 		    (double)m_download->get_download().get_read_rate().rate() / 1024.0,
-// 		    (double)m_download->get_download().get_write_rate().total() / (double)(1 << 20));
- 
-//   else
-//     m_canvas->print(0, 0, "Torrent: Done %.1f MiB Rate: %5.1f / %5.1f KiB Uploaded: %.1f MiB",
-// 		    (double)m_download->get_download().get_bytes_total() / (double)(1 << 20),
-// 		    (double)m_download->get_download().get_write_rate().rate() / 1024.0,
-// 		    (double)m_download->get_download().get_read_rate().rate() / 1024.0,
-// 		    (double)m_download->get_download().get_write_rate().total() / (double)(1 << 20));
-    
-  m_canvas->print(0, 1, "Peers: %i(%i) Min/Max: %i/%i Uploads: %i",
-		  (int)m_download->get_download().get_peers_connected(),
-		  (int)m_download->get_download().get_peers_not_connected(),
-		  (int)m_download->get_download().get_peers_min(),
-		  (int)m_download->get_download().get_peers_max(),
-		  (int)m_download->get_download().get_uploads_max());
+  m_canvas->print(0, 1, "Peers: %i(%i) Min/Max: %i/%i Uploads: %i U/I: %i/%i",
+		  (int)m_download->get_download().peers_connected(),
+		  (int)m_download->get_download().peers_not_connected(),
+		  (int)m_download->get_download().peers_min(),
+		  (int)m_download->get_download().peers_max(),
+		  (int)m_download->get_download().uploads_max(),
+		  (int)m_download->get_download().peers_currently_unchoked(),
+		  (int)m_download->get_download().peers_currently_interested());
 
   position = print_download_status(buffer, last - buffer, m_download);
   m_canvas->print(0, 2, "[%c:%i] %s",
 		  m_download->get_download().is_tracker_busy() ? 'C' : ' ',
-		  (int)(m_download->get_download().get_tracker_timeout() / 1000000),
+		  (int)(m_download->get_download().tracker_timeout() / 1000000),
 		  buffer);
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/window_file_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_file_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/window_file_list.cc	2005-08-28 01:10:58.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_file_list.cc	2005-11-12 23:31:54.000000000 +0800
@@ -34,12 +34,13 @@
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
 #include <stdexcept>
+#include <torrent/path.h>
 
 #include "core/download.h"
 #include "rak/algorithm.h"
 
 #include "window_file_list.h"
 
@@ -53,47 +54,49 @@
 
 void
 WindowFileList::redraw() {
   utils::displayScheduler.insert(&m_taskUpdate, (utils::Timer::cache() + 10 * 1000000).round_seconds());
   m_canvas->erase();
 
-  if (m_download->get_download().get_entry_size() == 0 ||
+  if (m_download->get_download().size_file_entries() == 0 ||
       m_canvas->get_height() < 2)
     return;
 
   int pos = 0;
 
   m_canvas->print( 2, pos, "File");
   m_canvas->print(55, pos, "Size");
   m_canvas->print(63, pos, "Pri");
   m_canvas->print(68, pos, "Cmpl");
+  m_canvas->print(74, pos, "Encoding");
+  m_canvas->print(84, pos, "Chunks");
 
   ++pos;
 
-  if (*m_focus >= m_download->get_download().get_entry_size())
+  if (*m_focus >= m_download->get_download().size_file_entries())
     throw std::logic_error("WindowFileList::redraw() called on an object with a bad focus value");
 
   Range range = rak::advance_bidirectional<unsigned int>(0,
 							 *m_focus,
-							 m_download->get_download().get_entry_size(),
+							 m_download->get_download().size_file_entries(),
 							 m_canvas->get_height() - pos);
 
   while (range.first != range.second) {
-    torrent::Entry e = m_download->get_download().get_entry(range.first);
+    torrent::Entry e = m_download->get_download().file_entry(range.first);
 
-    std::string path = e.get_path();
+    std::string path = e.path_str();
 
     if (path.length() <= 50)
       path = path + std::string(50 - path.length(), ' ');
     else
       path = path.substr(0, 50);
 
     std::string priority;
 
-    switch (e.get_priority()) {
-    case torrent::Entry::STOPPED:
+    switch (e.priority()) {
+    case torrent::Entry::OFF:
       priority = "off";
       break;
 
     case torrent::Entry::NORMAL:
       priority = "   ";
       break;
@@ -104,27 +107,32 @@
 
     default:
       priority = "BUG";
       break;
     };
 
-    m_canvas->print(0, pos, "%c %s  %6.1f   %s   %3d",
+    m_canvas->print(0, pos, "%c %s  %6.1f   %s   %3d  %9s",
 		    range.first == *m_focus ? '*' : ' ',
 		    path.c_str(),
-		    (double)e.get_size() / (double)(1 << 20),
+		    (double)e.size_bytes() / (double)(1 << 20),
 		    priority.c_str(),
-		    done_percentage(e));
+		    done_percentage(e),
+		    e.path()->encoding().c_str());
+
+    m_canvas->print(84, pos, "%i - %i",
+		    e.chunk_begin(),
+		    e.chunk_end());
 
     ++range.first;
     ++pos;
   }
 
 }
 
 int
 WindowFileList::done_percentage(torrent::Entry& e) {
-  int chunks = e.get_chunk_end() - e.get_chunk_begin();
+  int chunks = e.chunk_end() - e.chunk_begin();
 
-  return chunks ? (e.get_completed() * 100) / chunks : 100;
+  return chunks ? (e.completed_chunks() * 100) / chunks : 100;
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/window_http_queue.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_http_queue.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/window_http_queue.cc	2005-08-28 01:10:58.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_http_queue.cc	2005-11-12 23:31:54.000000000 +0800
@@ -76,19 +76,19 @@
   Container::iterator itr = m_container.begin();
 
   while (itr != m_container.end() && pos + 20 < m_canvas->get_width()) {
     if (itr->m_http == NULL)
       m_canvas->print(pos, 0, "%s done", itr->m_name.c_str());
 
-    else if (itr->m_http->get_size_total() == 0)
+    else if (itr->m_http->size_total() == 0)
       m_canvas->print(pos, 0, "%s ---%%", itr->m_name.c_str());
 
     else
       m_canvas->print(pos, 0, "%s %3i%%",
 		      itr->m_name.c_str(),
-		      (int)(100.0 * itr->m_http->get_size_done() / itr->m_http->get_size_total()));
+		      (int)(100.0 * itr->m_http->size_done() / itr->m_http->size_total()));
 
     pos += itr->m_name.size() + 6;
     ++itr;
   }
 }
 
@@ -102,15 +102,15 @@
 
   mark_dirty();
 }
 
 std::string
 WindowHttpQueue::create_name(core::CurlGet* h) {
-  size_t p = h->get_url().rfind('/', h->get_url().size() - std::min<int>(10, h->get_url().size()));
+  size_t p = h->url().rfind('/', h->url().size() - std::min<int>(10, h->url().size()));
 
-  std::string n = p != std::string::npos ? h->get_url().substr(p) : h->get_url();
+  std::string n = p != std::string::npos ? h->url().substr(p) : h->url();
 
   if (n.empty())
     throw std::logic_error("WindowHttpQueue::create_name(...) made a bad string");
 
   if (n.size() > 2 && n[0] == '/')
     n = n.substr(1);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/window_peer_info.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_peer_info.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/window_peer_info.cc	2005-10-18 02:50:58.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_peer_info.cc	2005-11-14 22:41:31.000000000 +0800
@@ -60,23 +60,23 @@
   utils::displayScheduler.insert(&m_taskUpdate, (utils::Timer::cache() + 1000000).round_seconds());
   m_canvas->erase();
 
   int y = 0;
   torrent::Download d = m_download->get_download();
 
-  m_canvas->print(0, y++, "Hash:    %s", utils::string_to_hex(d.get_hash()).c_str());
-  m_canvas->print(0, y++, "Id:      %s", utils::escape_string(d.get_id()).c_str());
+  m_canvas->print(0, y++, "Hash:    %s", utils::string_to_hex(d.info_hash()).c_str());
+  m_canvas->print(0, y++, "Id:      %s", utils::escape_string(d.local_id()).c_str());
   m_canvas->print(0, y++, "Chunks:  %u / %u * %u",
-		  d.get_chunks_done(),
-		  d.get_chunks_total(),
-		  d.get_chunks_size());
+		  d.chunks_done(),
+		  d.chunks_total(),
+		  d.chunks_size());
 
   char buffer[32], *position;
-  position = print_ddmmyyyy(buffer, 32, static_cast<time_t>(d.get_creation_date()));
+  position = print_ddmmyyyy(buffer, 32, static_cast<time_t>(d.creation_date()));
   position = print_string(position, buffer + 32 - position, " ");
-  position = print_hhmmss(position, buffer + 32 - position, static_cast<time_t>(d.get_creation_date()));
+  position = print_hhmmss(position, buffer + 32 - position, static_cast<time_t>(d.creation_date()));
 
   m_canvas->print(0, y++, "Created: %s", buffer);
 
   y++;
 
   m_canvas->print(0, y++, "Connection Type: %s ( %s / %s )",
@@ -91,29 +91,29 @@
 
     return;
   }
 
   m_canvas->print(0, y++, "*** Peer Info ***");
 
-  m_canvas->print(0, y++, "DNS: %s:%hu", (*m_focus)->get_dns().c_str(), (*m_focus)->get_port());
-  m_canvas->print(0, y++, "Id: %s" , utils::escape_string((*m_focus)->get_id()).c_str());
-  m_canvas->print(0, y++, "Options: %s" , utils::string_to_hex(std::string((*m_focus)->get_options(), 8)).c_str());
-  m_canvas->print(0, y++, "Snubbed: %s", (*m_focus)->get_snubbed() ? "yes" : "no");
+  m_canvas->print(0, y++, "DNS: %s:%hu", (*m_focus)->address().c_str(), (*m_focus)->port());
+  m_canvas->print(0, y++, "Id: %s" , utils::escape_string((*m_focus)->id()).c_str());
+  m_canvas->print(0, y++, "Options: %s" , utils::string_to_hex(std::string((*m_focus)->options(), 8)).c_str());
+  m_canvas->print(0, y++, "Snubbed: %s", (*m_focus)->is_snubbed() ? "yes" : "no");
   m_canvas->print(0, y++, "Connected: %s", (*m_focus)->is_incoming() ? "remote" : "local");
 
   m_canvas->print(0, y++, "Done: %i%", done_percentage(**m_focus));
 
   m_canvas->print(0, y++, "Rate: %5.1f/%5.1f KB Total: %.1f/%.1f MB",
-		  (double)(*m_focus)->get_up_rate().rate() / (double)(1 << 10),
-		  (double)(*m_focus)->get_down_rate().rate() / (double)(1 << 10),
-		  (double)(*m_focus)->get_up_rate().total() / (double)(1 << 20),
-		  (double)(*m_focus)->get_down_rate().total() / (double)(1 << 20));
+		  (double)(*m_focus)->up_rate()->rate() / (double)(1 << 10),
+		  (double)(*m_focus)->down_rate()->rate() / (double)(1 << 10),
+		  (double)(*m_focus)->up_rate()->total() / (double)(1 << 20),
+		  (double)(*m_focus)->down_rate()->total() / (double)(1 << 20));
 }
 
 int
 WindowPeerInfo::done_percentage(torrent::Peer& p) {
-  int chunks = m_download->get_download().get_chunks_total();
+  int chunks = m_download->get_download().chunks_total();
 
-  return chunks ? (100 * p.get_chunks_done()) / chunks : 0;
+  return chunks ? (100 * p.chunks_done()) / chunks : 0;
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/window_peer_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_peer_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/window_peer_list.cc	2005-08-28 06:41:51.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_peer_list.cc	2005-11-14 22:41:52.000000000 +0800
@@ -81,60 +81,60 @@
 
   Range range = rak::advance_bidirectional(m_list->begin(),
 					   *m_focus != m_list->end() ? *m_focus : m_list->begin(),
 					   m_list->end(),
 					   m_canvas->get_height() - y);
 
-  if (m_download->get_download().get_chunks_total() <= 0)
+  if (m_download->get_download().chunks_total() <= 0)
     throw std::logic_error("WindowPeerList::redraw() m_slotChunksTotal() returned invalid value");
 
   while (range.first != range.second) {
     torrent::Peer& p = *range.first;
 
     x = 0;
 
     m_canvas->print(x, y, "%c %s",
 		    range.first == *m_focus ? '*' : ' ',
-		    p.get_dns().c_str());
+		    p.address().c_str());
     x += 18;
 
-    m_canvas->print(x, y, "%.1f", (double)p.get_up_rate().rate() / 1024); x += 7;
-    m_canvas->print(x, y, "%.1f", (double)p.get_down_rate().rate() / 1024); x += 7;
-    m_canvas->print(x, y, "%.1f", (double)p.get_peer_rate().rate() / 1024); x += 7;
+    m_canvas->print(x, y, "%.1f", (double)p.up_rate()->rate() / 1024); x += 7;
+    m_canvas->print(x, y, "%.1f", (double)p.down_rate()->rate() / 1024); x += 7;
+    m_canvas->print(x, y, "%.1f", (double)p.peer_rate()->rate() / 1024); x += 7;
 
     m_canvas->print(x, y, "%c/%c%c/%c%c",
 		    p.is_incoming() ? 'r' : 'l',
-		    p.get_remote_choked() ? 'c' : 'u',
-		    p.get_remote_interested() ? 'i' : 'n',
-		    p.get_local_choked() ? 'c' : 'u',
-		    p.get_local_interested() ? 'i' : 'n');
+		    p.is_remote_choked() ? 'c' : 'u',
+		    p.is_remote_interested() ? 'i' : 'n',
+		    p.is_local_choked() ? 'c' : 'u',
+		    p.is_local_interested() ? 'i' : 'n');
     x += 9;
 
     m_canvas->print(x, y, "%i/%i",
-		    p.get_outgoing_queue_size(),
-		    p.get_incoming_queue_size());
+		    p.outgoing_queue_size(),
+		    p.incoming_queue_size());
     x += 6;
 
     m_canvas->print(x, y, "%3i", done_percentage(*range.first));
     x += 6;
 
-    if (p.get_incoming_queue_size())
-      m_canvas->print(x, y, "%i", p.get_incoming_index(0));
+    if (p.incoming_queue_size())
+      m_canvas->print(x, y, "%i", p.incoming_index(0));
 
     x += 6;
 
-    if (p.get_snubbed())
+    if (p.is_snubbed())
       m_canvas->print(x, y, "*");
 
     ++y;
     ++range.first;
   }
 }
 
 int
 WindowPeerList::done_percentage(torrent::Peer& p) {
-  int chunks = m_download->get_download().get_chunks_total();
+  int chunks = m_download->get_download().chunks_total();
 
-  return chunks ? (100 * p.get_chunks_done()) / chunks : 0;
+  return chunks ? (100 * p.chunks_done()) / chunks : 0;
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/window_statusbar.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_statusbar.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/window_statusbar.cc	2005-08-28 06:43:47.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_statusbar.cc	2005-11-22 00:19:08.000000000 +0800
@@ -41,12 +41,14 @@
 
 #include "core/manager.h"
 
 #include "canvas.h"
 #include "window_statusbar.h"
 
+extern uint32_t countTicks;
+
 namespace display {
 
 WindowStatusbar::WindowStatusbar(core::Manager* c) :
   Window(new Canvas, false, 1),
   m_counter(0),
   m_core(c) {
@@ -59,35 +61,44 @@
   m_canvas->erase();
 
   // TODO: Make a buffer with size = get_width?
   int pos = 0;
   char buf[128];
 
-  if (torrent::get_up_throttle() == 0)
+  if (torrent::up_throttle() == 0)
     pos = snprintf(buf, 128, "off/");
   else
-    pos = snprintf(buf, 128, "%3i/", torrent::get_up_throttle() / 1024);
+    pos = snprintf(buf, 128, "%3i/", torrent::up_throttle() / 1024);
 
-  if (torrent::get_down_throttle() == 0)
+  if (torrent::down_throttle() == 0)
     pos = snprintf(buf + pos, 128 - pos, "off");
   else
-    pos = snprintf(buf + pos, 128 - pos, "%-3i", torrent::get_down_throttle() / 1024);
+    pos = snprintf(buf + pos, 128 - pos, "%-3i", torrent::down_throttle() / 1024);
 
   m_canvas->print(0, 0, "Throttle U/D: %s  Rate: %5.1f / %5.1f KB  Listen: %s:%i%s",
 		  buf,
-		  (double)torrent::get_up_rate().rate() / 1024.0,
-		  (double)torrent::get_down_rate().rate() / 1024.0,
-		  !torrent::get_local_address().empty() ? torrent::get_local_address().c_str() : "<default>",
-		  (int)torrent::get_listen_port(),
-		  !torrent::get_bind_address().empty() ? ("  Bind: " + torrent::get_bind_address()).c_str() : "");
-
-  pos = snprintf(buf, 128, "[S %i/%i/%i] [F %i/%i]",
-		 torrent::get_total_handshakes(),
-		 torrent::get_open_sockets(),
-		 torrent::get_max_open_sockets(),
-		 torrent::get_open_files(),
-		 torrent::get_max_open_files());
+		  (double)torrent::up_rate()->rate() / 1024.0,
+		  (double)torrent::down_rate()->rate() / 1024.0,
+		  !torrent::local_address().empty() ? torrent::local_address().c_str() : "<default>",
+		  (int)torrent::listen_port(),
+		  !torrent::bind_address().empty() ? ("  Bind: " + torrent::bind_address()).c_str() : "");
+
+#ifndef USE_EXTRA_DEBUG
+  pos = snprintf(buf, 128, "[U %i/%i][S %i/%i/%i][F %i/%i]",
+#else
+  pos = snprintf(buf, 128, "%i [U %i/%i][S %i/%i/%i][F %i/%i]",
+		 countTicks,
+#endif
+		 torrent::currently_unchoked(),
+		 torrent::max_unchoked(),
+		 torrent::total_handshakes(),
+		 torrent::open_sockets(),
+		 torrent::max_open_sockets(),
+		 torrent::open_files(),
+		 torrent::max_open_files());
+
+  countTicks = 0;
 
   m_canvas->print(m_canvas->get_width() - pos, 0, "%s", buf);
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/window_tracker_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_tracker_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/display/window_tracker_list.cc	2005-08-28 01:10:58.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_tracker_list.cc	2005-11-12 23:31:55.000000000 +0800
@@ -61,37 +61,37 @@
   int pos = 0;
 
   m_canvas->print( 2, pos, "Trackers:");
 
   ++pos;
 
-  if (m_download->get_download().get_tracker_size() == 0)
+  if (m_download->get_download().size_trackers() == 0)
     return;
 
-  if (*m_focus >= m_download->get_download().get_tracker_size())
+  if (*m_focus >= m_download->get_download().size_trackers())
     throw std::logic_error("WindowTrackerList::redraw() called on an object with a bad focus value");
 
   typedef std::pair<unsigned int, unsigned int> Range;
 
   Range range = rak::advance_bidirectional<unsigned int>(0,
 							 *m_focus,
-							 m_download->get_download().get_tracker_size(),
+							 m_download->get_download().size_trackers(),
 							 (m_canvas->get_height() + 1) / 2);
 
   while (range.first != range.second) {
-    torrent::Tracker t = m_download->get_download().get_tracker(range.first);
+    torrent::Tracker t = m_download->get_download().tracker(range.first);
 
     m_canvas->print(0, pos++, "%c %s",
 		    range.first == *m_focus ? '*' : ' ',
-		    t.get_url().c_str());
+		    t.url().c_str());
 
     m_canvas->print(0, pos++, "%c Group: %2i Id: %s Focus: %s Enabled: %s Open: %s",
 		    range.first == *m_focus ? '*' : ' ',
-		    t.get_group(),
-		    utils::escape_string(t.get_tracker_id()).c_str(),
-		    range.first == m_download->get_download().get_tracker_focus() ? "yes" : " no",
+		    t.group(),
+		    utils::escape_string(t.tracker_id()).c_str(),
+		    range.first == m_download->get_download().tracker_focus() ? "yes" : " no",
 		    t.is_enabled() ? "yes" : " no",
 		    t.is_open() ? "yes" : " no");
 
     ++range.first;
   }
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/input/input_event.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/input/input_event.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/input/input_event.cc	2005-08-28 01:10:55.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/input/input_event.cc	2005-11-12 23:31:51.000000000 +0800
@@ -53,15 +53,15 @@
   p->remove_read(this);
   p->close(this);
 }
 
 void
 InputEvent::event_read() {
-  int c = getch();
+  int c;
 
-  if (c != ERR)
+  while ((c = getch()) != ERR)
     m_slotPressed(c);
 }
 
 void
 InputEvent::event_write() {
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/main.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/main.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/main.cc	2005-10-08 01:01:09.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/main.cc	2005-11-12 23:31:57.000000000 +0800
@@ -72,12 +72,14 @@
 #include "option_handler.h"
 #include "option_handler_rules.h"
 #include "option_parser.h"
 
 int64_t utils::Timer::m_cache;
 
+uint32_t countTicks = 0;
+
 void do_panic(int signum);
 void print_help();
 
 namespace utils {
   TaskScheduler taskScheduler;
   TaskScheduler displayScheduler;
@@ -133,18 +135,18 @@
 
   optionHandler->insert("hash_read_ahead",     new OptionHandlerInt(c, &apply_hash_read_ahead, &validate_hash_read_ahead));
   optionHandler->insert("hash_interval",       new OptionHandlerInt(c, &apply_hash_interval, &validate_hash_interval));
   optionHandler->insert("hash_max_tries",      new OptionHandlerInt(c, &apply_hash_max_tries, &validate_hash_max_tries));
   optionHandler->insert("max_open_files",      new OptionHandlerInt(c, &apply_max_open_files, &validate_fd));
   optionHandler->insert("max_open_sockets",    new OptionHandlerInt(c, &apply_max_open_sockets, &validate_fd));
-  optionHandler->insert("throttle_interval",   new OptionHandlerInt(c, &apply_throttle_interval, &validate_throttle_interval));
 
   optionHandler->insert("connection_leech",    new OptionHandlerString(c, &apply_connection_leech, &validate_non_empty));
   optionHandler->insert("connection_seed",     new OptionHandlerString(c, &apply_connection_seed, &validate_non_empty));
 
   optionHandler->insert("session",             new OptionHandlerString(c, &apply_session_directory, &validate_directory));
+  optionHandler->insert("encoding_list",       new OptionHandlerString(c, &apply_encoding_list, &validate_non_empty));
   optionHandler->insert("tracker_dump",        new OptionHandlerString(c, &apply_tracker_dump, &validate_yes_no));
   optionHandler->insert("use_udp_trackers",    new OptionHandlerString(c, &apply_use_udp_trackers, &validate_yes_no));
 }
 
 void
 load_option_file(const std::string& filename, OptionHandler* optionHandler, bool require = false) {
@@ -223,12 +225,14 @@
     load_session_torrents(&uiControl);
     load_arg_torrents(&uiControl, argv + firstArg, argv + argc);
 
     uiControl.display()->adjust_layout();
 
     while (!uiControl.is_shutdown_completed()) {
+      countTicks++;
+
       utils::Timer::update();
       utils::taskScheduler.execute(utils::Timer::cache());
 
       // This needs to be called every second or so. Currently done by
       // the throttle task in libtorrent.
       if (!utils::displayScheduler.empty() &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/option_handler_rules.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/option_handler_rules.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/option_handler_rules.cc	2005-10-08 01:04:32.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/option_handler_rules.cc	2005-11-12 23:31:57.000000000 +0800
@@ -38,12 +38,13 @@
 
 #include <arpa/inet.h>
 #include <torrent/torrent.h>
 #include <netinet/in.h>
 
 #include "core/manager.h"
+#include "ui/root.h"
 #include "utils/directory.h"
 
 #include "control.h"
 #include "option_handler_rules.h"
 
 void receive_tracker_dump(std::istream* s);
@@ -108,17 +109,12 @@
 
 bool
 validate_fd(int arg) {
   return arg >= 1 && arg < (1 << 16);
 }
 
-bool
-validate_throttle_interval(int arg) {
-  return arg > 0 && arg < 5000;
-}
-
 void
 apply_download_min_peers(Control* m, int arg) {
   m->core()->get_download_list().slot_map_insert()["1_min_peers"] = sigc::bind(sigc::mem_fun(&core::Download::call<void, uint32_t, &torrent::Download::set_peers_min>), arg);
 }
 
 void
@@ -148,18 +144,18 @@
 apply_connection_seed(Control* m, const std::string& arg) {
   m->core()->get_download_list().slot_map_insert()["1_connection_seed"] = sigc::bind(sigc::mem_fun(&core::Download::set_connection_seed), arg);
 }
 
 void
 apply_global_download_rate(Control* m, int arg) {
-  torrent::set_down_throttle(arg * 1024);
+  m->ui()->receive_down_throttle(arg);
 }
 
 void
 apply_global_upload_rate(Control* m, int arg) {
-  torrent::set_up_throttle(arg * 1024);
+  m->ui()->receive_up_throttle(arg);
 }
 
 void
 apply_hash_read_ahead(Control* m, int arg) {
   torrent::set_hash_read_ahead(arg << 20);
 }
@@ -182,17 +178,12 @@
 void
 apply_max_open_sockets(Control* m, int arg) {
   torrent::set_max_open_sockets(arg);
 }
 
 void
-apply_throttle_interval(Control* m, int arg) {
-  torrent::set_throttle_interval(arg * 1000);
-}
-
-void
 apply_bind(Control* m, const std::string& arg) {
   torrent::set_bind_address(arg);
 }
 
 void
 apply_ip(Control* m, const std::string& arg) {
@@ -240,6 +231,12 @@
 }
 
 void
 apply_session_directory(Control* m, const std::string& arg) {
   m->core()->get_download_store().use(arg);
 }
+
+void
+apply_encoding_list(Control* m, const std::string& arg) {
+  torrent::encoding_list()->push_back(arg);
+}
+
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/option_handler_rules.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/option_handler_rules.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/option_handler_rules.h	2005-10-03 20:43:31.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/option_handler_rules.h	2005-11-12 23:31:57.000000000 +0800
@@ -58,14 +58,12 @@
 bool validate_rate(int arg);
 bool validate_hash_read_ahead(int arg);
 bool validate_hash_interval(int arg);
 bool validate_hash_max_tries(int arg);
 bool validate_fd(int arg);
 
-bool validate_throttle_interval(int arg);
-
 void apply_download_min_peers(Control* m, int arg);
 void apply_download_max_peers(Control* m, int arg);
 void apply_download_max_uploads(Control* m, int arg);
 void apply_download_directory(Control* m, const std::string& arg);
 
 void apply_connection_leech(Control* m, const std::string& arg);
@@ -76,23 +74,23 @@
 
 void apply_hash_read_ahead(Control* m, int arg);
 void apply_hash_interval(Control* m, int arg);
 void apply_hash_max_tries(Control* m, int arg);
 void apply_max_open_files(Control* m, int arg);
 void apply_max_open_sockets(Control* m, int arg);
-void apply_throttle_interval(Control* m, int arg);
 
 void apply_ip(Control* m, const std::string& arg);
 void apply_bind(Control* m, const std::string& arg);
 void apply_port_range(Control* m, const std::string& arg);
 void apply_port_random(Control* m, const std::string& arg);
 void apply_tracker_dump(Control* m, const std::string& arg);
 void apply_use_udp_trackers(Control* m, const std::string& arg);
 void apply_check_hash(Control* m, const std::string& arg);
 
 void apply_session_directory(Control* m, const std::string& arg);
+void apply_encoding_list(Control* m, const std::string& arg);
 
 class OptionHandlerInt : public OptionHandlerBase {
 public:
   typedef bool (*Validate)(int);
   typedef void (*Apply)(Control*, int);
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/ui/download.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/download.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/ui/download.cc	2005-10-08 00:47:54.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/download.cc	2005-11-12 23:31:56.000000000 +0800
@@ -57,13 +57,13 @@
 namespace ui {
 
 Download::Download(DPtr d, Control* c) :
   m_download(d),
   m_state(DISPLAY_MAX_SIZE),
 
-  m_windowTitle(new WTitle(d->get_download().get_name())),
+  m_windowTitle(new WTitle(d->get_download().name())),
   m_windowDownloadStatus(new WDownloadStatus(d)),
 
   m_window(c->display()->end()),
 
   m_control(c),
   m_bindings(new input::Bindings) {
@@ -190,27 +190,27 @@
 }
 
 void
 Download::receive_max_uploads(int t) {
   m_windowDownloadStatus->mark_dirty();
 
-  m_download->get_download().set_uploads_max(std::max(m_download->get_download().get_uploads_max() + t, (uint32_t)2));
+  m_download->get_download().set_uploads_max(std::max(m_download->get_download().uploads_max() + t, (uint32_t)2));
 }
 
 void
 Download::receive_min_peers(int t) {
   m_windowDownloadStatus->mark_dirty();
 
-  m_download->get_download().set_peers_min(std::max(m_download->get_download().get_peers_min() + t, (uint32_t)5));
+  m_download->get_download().set_peers_min(std::max(m_download->get_download().peers_min() + t, (uint32_t)5));
 }
 
 void
 Download::receive_max_peers(int t) {
   m_windowDownloadStatus->mark_dirty();
 
-  m_download->get_download().set_peers_max(std::max(m_download->get_download().get_peers_max() + t, (uint32_t)5));
+  m_download->get_download().set_peers_max(std::max(m_download->get_download().peers_max() + t, (uint32_t)5));
 }
 
 void
 Download::receive_change(Display d) {
   if (d == m_state)
     return;
@@ -221,13 +221,13 @@
 
 void
 Download::receive_snub_peer() {
   if (m_focus == m_peers.end())
     return;
 
-  m_focus->set_snubbed(!m_focus->get_snubbed());
+  m_focus->set_snubbed(!m_focus->is_snubbed());
 
   mark_dirty();
 }
 
 void
 Download::bind_keys() {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/ui/download_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/download_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/ui/download_list.cc	2005-10-08 00:49:38.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/download_list.cc	2005-11-12 23:31:56.000000000 +0800
@@ -68,13 +68,13 @@
 
 DownloadList::DownloadList(Control* c) :
   m_state(DISPLAY_MAX_SIZE),
 
   m_window(c->display()->end()),
 
-  m_windowTitle(new WTitle("rTorrent " VERSION " - libTorrent " + std::string(torrent::get_version()))),
+  m_windowTitle(new WTitle("rTorrent " VERSION " - libTorrent " + std::string(torrent::version()))),
   m_windowHttpQueue(new WHttp(&c->core()->get_http_queue())),
 
   m_uiDownload(NULL),
 
   m_downloadList(&c->core()->get_download_list()),
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/ui/element_file_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/element_file_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/ui/element_file_list.cc	2005-10-08 00:51:59.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/element_file_list.cc	2005-11-12 23:31:57.000000000 +0800
@@ -80,75 +80,75 @@
 
 void
 ElementFileList::receive_next() {
   if (m_window == NULL)
     throw std::logic_error("ui::ElementFileList::receive_next(...) called on a disabled object");
 
-  if (++m_focus >= m_download->get_download().get_entry_size())
+  if (++m_focus >= m_download->get_download().size_file_entries())
     m_focus = 0;
 
   m_window->mark_dirty();
 }
 
 void
 ElementFileList::receive_prev() {
   if (m_window == NULL)
     throw std::logic_error("ui::ElementFileList::receive_prev(...) called on a disabled object");
 
-  if (m_download->get_download().get_entry_size() == 0)
+  if (m_download->get_download().size_file_entries() == 0)
     return;
 
   if (m_focus != 0)
     --m_focus;
   else 
-    m_focus = m_download->get_download().get_entry_size() - 1;
+    m_focus = m_download->get_download().size_file_entries() - 1;
 
   m_window->mark_dirty();
 }
 
 void
 ElementFileList::receive_priority() {
   if (m_window == NULL)
     throw std::logic_error("ui::ElementFileList::receive_prev(...) called on a disabled object");
 
-  if (m_focus >= m_download->get_download().get_entry_size())
+  if (m_focus >= m_download->get_download().size_file_entries())
     return;
 
-  torrent::Entry e = m_download->get_download().get_entry(m_focus);
+  torrent::Entry e = m_download->get_download().file_entry(m_focus);
 
-  e.set_priority(next_priority(e.get_priority()));
+  e.set_priority(next_priority(e.priority()));
 
   m_download->get_download().update_priorities();
   m_window->mark_dirty();
 }
 
 void
 ElementFileList::receive_change_all() {
   if (m_window == NULL)
     throw std::logic_error("ui::ElementFileList::receive_prev(...) called on a disabled object");
 
-  if (m_focus >= m_download->get_download().get_entry_size())
+  if (m_focus >= m_download->get_download().size_file_entries())
     return;
 
-  Priority p = next_priority(m_download->get_download().get_entry(m_focus).get_priority());
+  Priority p = next_priority(m_download->get_download().file_entry(m_focus).priority());
 
-  for (int i = 0, e = m_download->get_download().get_entry_size(); i != e; ++i)
-    m_download->get_download().get_entry(i).set_priority(p);
+  for (int i = 0, e = m_download->get_download().size_file_entries(); i != e; ++i)
+    m_download->get_download().file_entry(i).set_priority(p);
 
   m_download->get_download().update_priorities();
   m_window->mark_dirty();
 }
 
 ElementFileList::Priority
 ElementFileList::next_priority(Priority p) {
   switch(p) {
-  case torrent::Entry::STOPPED:
+  case torrent::Entry::OFF:
     return torrent::Entry::HIGH;
 
   case torrent::Entry::NORMAL:
-    return torrent::Entry::STOPPED;
+    return torrent::Entry::OFF;
 
   case torrent::Entry::HIGH:
     return torrent::Entry::NORMAL;
 	
   default:
     return torrent::Entry::NORMAL;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/ui/element_tracker_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/element_tracker_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/ui/element_tracker_list.cc	2005-10-08 00:55:29.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/element_tracker_list.cc	2005-11-18 02:59:22.000000000 +0800
@@ -51,12 +51,13 @@
   m_window(NULL),
   m_focus(0) {
 
   m_bindings[KEY_DOWN] = sigc::mem_fun(*this, &ElementTrackerList::receive_next);
   m_bindings[KEY_UP]   = sigc::mem_fun(*this, &ElementTrackerList::receive_prev);
   m_bindings[' ']      = sigc::mem_fun(*this, &ElementTrackerList::receive_cycle_group);
+  m_bindings['*']      = sigc::mem_fun(*this, &ElementTrackerList::receive_disable);
 }
 
 void
 ElementTrackerList::activate(Control* c, MItr mItr) {
   if (m_window != NULL)
     throw std::logic_error("ui::ElementTrackerList::activate(...) called on an object in the wrong state");
@@ -75,46 +76,59 @@
 
   delete m_window;
   m_window = NULL;
 }
 
 void
+ElementTrackerList::receive_disable() {
+  if (m_window == NULL)
+    throw std::logic_error("ui::ElementTrackerList::receive_disable(...) called on a disabled object");
+
+  if (m_download->get_download().tracker(m_focus).is_enabled())
+    m_download->get_download().tracker(m_focus).disable();
+  else
+    m_download->get_download().tracker(m_focus).enable();
+
+  m_window->mark_dirty();
+}
+
+void
 ElementTrackerList::receive_next() {
   if (m_window == NULL)
     throw std::logic_error("ui::ElementTrackerList::receive_next(...) called on a disabled object");
 
-  if (++m_focus >= m_download->get_download().get_tracker_size())
+  if (++m_focus >= m_download->get_download().size_trackers())
     m_focus = 0;
 
   m_window->mark_dirty();
 }
 
 void
 ElementTrackerList::receive_prev() {
   if (m_window == NULL)
     throw std::logic_error("ui::ElementTrackerList::receive_prev(...) called on a disabled object");
 
-  if (m_download->get_download().get_tracker_size() == 0)
+  if (m_download->get_download().size_trackers() == 0)
     return;
 
   if (m_focus != 0)
     --m_focus;
   else 
-    m_focus = m_download->get_download().get_tracker_size() - 1;
+    m_focus = m_download->get_download().size_trackers() - 1;
 
   m_window->mark_dirty();
 }
 
 void
 ElementTrackerList::receive_cycle_group() {
   if (m_window == NULL)
     throw std::logic_error("ui::ElementTrackerList::receive_group_cycle(...) called on a disabled object");
 
-  if (m_focus >= m_download->get_download().get_tracker_size())
+  if (m_focus >= m_download->get_download().size_trackers())
     throw std::logic_error("ui::ElementTrackerList::receive_group_cycle(...) called with an invalid focus");
 
-  m_download->get_download().tracker_cycle_group(m_download->get_download().get_tracker(m_focus).get_group());
+  m_download->get_download().tracker_cycle_group(m_download->get_download().tracker(m_focus).group());
 
   m_window->mark_dirty();
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/ui/element_tracker_list.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/element_tracker_list.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/ui/element_tracker_list.h	2005-10-03 20:43:30.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/element_tracker_list.h	2005-11-18 02:56:24.000000000 +0800
@@ -59,12 +59,14 @@
   void                disable(Control* c);
 
 private:
   void                receive_next();
   void                receive_prev();
 
+  void                receive_disable();
+
   void                receive_cycle_group();
 
   core::Download*     m_download;
   WTrackerList*       m_window;
   
   // Change to unsigned, please.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/ui/root.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/root.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/ui/root.cc	2005-10-08 00:58:39.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/root.cc	2005-11-12 23:31:57.000000000 +0800
@@ -111,19 +111,32 @@
   m_bindings[KEY_RESIZE]    = sigc::mem_fun(*m_control->display(), &display::Manager::adjust_layout);
   m_bindings['\x11']        = sigc::mem_fun(*m_control, &Control::receive_shutdown);
 }
 
 void
 Root::receive_down_throttle(int t) {
-  m_windowStatusbar->mark_dirty();
+  if (m_windowStatusbar != NULL)
+    m_windowStatusbar->mark_dirty();
 
-  torrent::set_down_throttle(torrent::get_down_throttle() + t * 1024);
+  torrent::set_down_throttle(std::max<int>(torrent::down_throttle() + t * 1024, 0));
 }
 
 void
 Root::receive_up_throttle(int t) {
-  m_windowStatusbar->mark_dirty();
+  if (m_windowStatusbar != NULL)
+    m_windowStatusbar->mark_dirty();
 
-  torrent::set_up_throttle(torrent::get_up_throttle() + t * 1024);
+  uint32_t throttle = std::max<int>(torrent::up_throttle() + t * 1024, 0);
+
+  torrent::set_up_throttle(throttle);
+
+  if (throttle == 0)
+    torrent::set_max_unchoked(0);
+
+  else if (throttle <= 10 << 10)
+    torrent::set_max_unchoked(1 + throttle / (1 << 10));
+
+  else
+    torrent::set_max_unchoked(10 + throttle / (5 << 10));
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/ui/root.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/root.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/ui/root.h	2005-10-03 20:42:10.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/root.h	2005-11-12 23:31:57.000000000 +0800
@@ -57,18 +57,18 @@
 
   void                init(Control* c);
   void                cleanup();
 
   WStatusbar*         window_statusbar()            { return m_windowStatusbar; }
 
-private:
-  void                setup_keys();
-
   void                receive_down_throttle(int t);
   void                receive_up_throttle(int t);
 
+private:
+  void                setup_keys();
+
   Control*            m_control;
   DownloadList*       m_downloadList;
 
   WStatusbar*         m_windowStatusbar;
 
   input::Bindings     m_bindings;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/utils/task_scheduler.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/utils/task_scheduler.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.6/src/utils/task_scheduler.cc	2005-08-28 01:10:56.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/utils/task_scheduler.cc	2005-11-12 23:31:52.000000000 +0800
@@ -72,13 +72,13 @@
 
   task->set_iterator(end());
 }
 
 void
 TaskScheduler::execute(Timer time) {
-  m_entry = std::find_if(begin(), end(), rak::less_equal(time, rak::mem_ptr_ref(&value_type::first)));
+  m_entry = std::find_if(begin(), end(), rak::less(time, rak::mem_ptr_ref(&value_type::first)));
 
   // Since we are always using the front rather than a splice of the
   // due tasks, it is safe to erase them from within other tasks.
   while (begin() != m_entry) {
     if (!is_scheduled(Base::front().second))
       throw std::logic_error("TaskScheduler::execute_task(iterator) received an invalid iterator");
