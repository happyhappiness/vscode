diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/configure /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/configure
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/configure	2005-11-22 00:57:34.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/configure	2005-12-05 03:54:20.000000000 +0800
@@ -1,9 +1,9 @@
 #! /bin/sh
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.59 for rtorrent 0.4.0.
+# Generated by GNU Autoconf 2.59 for rtorrent 0.4.1.
 #
 # Report bugs to <jaris@ifi.uio.no>.
 #
 # Copyright (C) 2003 Free Software Foundation, Inc.
 # This configure script is free software; the Free Software Foundation
 # gives unlimited permission to copy, distribute and modify it.
@@ -266,14 +266,14 @@
 # only ac_max_sed_lines should be used.
 : ${ac_max_here_lines=38}
 
 # Identity of this package.
 PACKAGE_NAME='rtorrent'
 PACKAGE_TARNAME='rtorrent'
-PACKAGE_VERSION='0.4.0'
-PACKAGE_STRING='rtorrent 0.4.0'
+PACKAGE_VERSION='0.4.1'
+PACKAGE_STRING='rtorrent 0.4.1'
 PACKAGE_BUGREPORT='jaris@ifi.uio.no'
 
 ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar CXX CXXFLAGS LDFLAGS CPPFLAGS ac_ct_CXX EXEEXT OBJEXT DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CXXDEPMODE am__fastdepCXX_TRUE am__fastdepCXX_FALSE RANLIB ac_ct_RANLIB CC CFLAGS ac_ct_CC CCDEPMODE am__fastdepCC_TRUE am__fastdepCC_FALSE PKG_CONFIG STUFF_CFLAGS STUFF_LIBS LIBOBJS LTLIBOBJS'
 ac_subst_files=''
 
 # Initialize some variables set by options.
@@ -743,13 +743,13 @@
 # Report the --help message.
 #
 if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures rtorrent 0.4.0 to adapt to many kinds of systems.
+\`configure' configures rtorrent 0.4.1 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
 To assign environment variables (e.g., CC, CFLAGS...), specify them as
 VAR=VALUE.  See below for descriptions of some of the useful variables.
 
@@ -805,13 +805,13 @@
   --program-transform-name=PROGRAM   run sed PROGRAM on installed program names
 _ACEOF
 fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of rtorrent 0.4.0:";;
+     short | recursive ) echo "Configuration of rtorrent 0.4.1:";;
    esac
   cat <<\_ACEOF
 
 Optional Features:
   --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
@@ -933,13 +933,13 @@
   done
 fi
 
 test -n "$ac_init_help" && exit 0
 if $ac_init_version; then
   cat <<\_ACEOF
-rtorrent configure 0.4.0
+rtorrent configure 0.4.1
 generated by GNU Autoconf 2.59
 
 Copyright (C) 2003 Free Software Foundation, Inc.
 This configure script is free software; the Free Software Foundation
 gives unlimited permission to copy, distribute and modify it.
 _ACEOF
@@ -947,13 +947,13 @@
 fi
 exec 5>config.log
 cat >&5 <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by rtorrent $as_me 0.4.0, which was
+It was created by rtorrent $as_me 0.4.1, which was
 generated by GNU Autoconf 2.59.  Invocation command line was
 
   $ $0 $@
 
 _ACEOF
 {
@@ -1591,13 +1591,13 @@
   fi
 fi
 
 
 # Define the identity of the package.
  PACKAGE='rtorrent'
- VERSION='0.4.0'
+ VERSION='0.4.1'
 
 
 cat >>confdefs.h <<_ACEOF
 #define PACKAGE "$PACKAGE"
 _ACEOF
 
@@ -4652,13 +4652,13 @@
   sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
 ## Running $as_me. ##
 _ASBOX
 } >&5
 cat >&5 <<_CSEOF
 
-This file was extended by rtorrent $as_me 0.4.0, which was
+This file was extended by rtorrent $as_me 0.4.1, which was
 generated by GNU Autoconf 2.59.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
   CONFIG_HEADERS  = $CONFIG_HEADERS
   CONFIG_LINKS    = $CONFIG_LINKS
   CONFIG_COMMANDS = $CONFIG_COMMANDS
@@ -4715,13 +4715,13 @@
 
 Report bugs to <bug-autoconf@gnu.org>."
 _ACEOF
 
 cat >>$CONFIG_STATUS <<_ACEOF
 ac_cs_version="\\
-rtorrent config.status 0.4.0
+rtorrent config.status 0.4.1
 configured by $0, generated by GNU Autoconf 2.59,
   with options \\"`echo "$ac_configure_args" | sed 's/[\\""\`\$]/\\\\&/g'`\\"
 
 Copyright (C) 2003 Free Software Foundation, Inc.
 This config.status script is free software; the Free Software Foundation
 gives unlimited permission to copy, distribute and modify it."
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/configure.ac /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/configure.ac
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/configure.ac	2005-11-22 00:57:18.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/configure.ac	2005-12-03 08:00:53.000000000 +0800
@@ -1,7 +1,7 @@
-AC_INIT(rtorrent, 0.4.0, jaris@ifi.uio.no)
+AC_INIT(rtorrent, 0.4.1, jaris@ifi.uio.no)
 
 AM_INIT_AUTOMAKE
 AM_CONFIG_HEADER(config.h)
 
 sinclude(scripts/checks.m4)
 sinclude(scripts/common.m4)
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/doc/rtorrent.1 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/doc/rtorrent.1
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/doc/rtorrent.1	2005-11-13 05:10:24.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/doc/rtorrent.1	2005-12-20 08:54:14.000000000 +0800
@@ -1,12 +1,12 @@
 .\" This manpage has been automatically generated by docbook2man 
 .\" from a DocBook document.  This tool can be found at:
 .\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
 .\" Please send any bug reports, improvements, comments, patches, 
 .\" etc. to Steve Cheng <steve@ggi-project.org>.
-.TH "RTORRENT" "1" "12 November 2005" "BitTorrent client for ncurses" ""
+.TH "RTORRENT" "1" "20 December 2005" "BitTorrent client for ncurses" ""
 
 .SH NAME
 rtorrent \- a BitTorrent client for ncurses
 .SH SYNOPSIS
 
 \fBrtorrent\fR [ \fB-h\fR ] [ \fB-o key1=opt1,...\fR ] [ \fBURL | FILE\fR\fI ...\fR ]
@@ -165,16 +165,29 @@
 Session management will be enabled and the torrent files for
 all open downloads will be stored in this directory. Only
 one instance of rtorrent should be used with each session
 directory, though at the moment no locking is done. An empty
 string will disable the session directory.
 .TP
+\fBhttp_proxy = \fIurl\fB\fR
+Use a http proxy. Use an empty string to disable.
+.TP
 \fBencoding_list = \fIencoding\fB\fR
 Add a preferred filename encoding to the list. The encodings
 are attempted in the order they are inserted, if none match
 the torrent default is used.
+.TP
+\fBschedule = \fIid\fB,\fIstart\fB,\fIinterval\fB,\fIcommand\fB\fR
+Call \fBcommand\fR every \fBinterval\fR
+seconds, starting from \fBstart\fR\&. An
+\fBinterval\fR of zero stops the task, while a
+\fBstart\fR of zero calls it immediately. Currently
+\fBcommand\fR is forwarded to the option handler.
+.TP
+\fBschedule_remove = \fIid\fB\fR
+Delete \fBid\fR from the scheduler.
 .SH "ADVANCED SETTINGS"
 .PP
 This list contains settings users shouldn't need to touch.
 .TP
 \fBhash_read_ahead = \fIMB\fB\fR
 Configure how far ahead we ask the kernel to read when doing
@@ -198,19 +211,13 @@
 \fBmax_open_sockets = \fIvalue\fB\fR
 Number of sockets to simultaneously keep open. This value is
 set to be \fBsysconf(_SC_OPEN_MAX) - 256\fR
 at startup. This gives the client 128 sockets to use as it
 wishes.
 .TP
-\fBthrottle_interval = \fIms\fB\fR
-Interval between throttle ticks in milli-seconds, must be
-between \fB1-5000\fR and defaults to
-\fB1000\fR\&. Shorter intervals will cause less
-bandwidth usage spikes while requiring more CPU resources.
-.TP
-\fBtracker_dump = \fIyes | no\fB\fR
-Dump data received from trackers to the files
-"./tracker_dump.*".
+\fBumask = \fI0644\fB\fR
+Set the umask for this process, which is applied to all
+files created by the program.
 .SH "AUTHORS"
 .PP
 
 Jari "Rakshasa" Sundell <jaris@ifi.uio.no>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/doc/rtorrent.1.xml /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/doc/rtorrent.1.xml
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/doc/rtorrent.1.xml	2005-11-12 23:31:48.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/doc/rtorrent.1.xml	2005-12-20 09:01:15.000000000 +0800
@@ -392,22 +392,53 @@
           string will disable the session directory.
 
         </para></listitem>
       </varlistentry>
 
       <varlistentry>
+        <term>http_proxy = <replaceable>url</replaceable></term>
+        <listitem><para>
+
+          Use a http proxy. Use an empty string to disable.
+
+        </para></listitem>
+      </varlistentry>
+
+      <varlistentry>
         <term>encoding_list = <replaceable>encoding</replaceable></term>
         <listitem><para>
 
           Add a preferred filename encoding to the list. The encodings
           are attempted in the order they are inserted, if none match
           the torrent default is used.
 
         </para></listitem>
       </varlistentry>
 
+      <varlistentry>
+        <term>schedule = <replaceable>id</replaceable>,<replaceable>start</replaceable>,<replaceable>interval</replaceable>,<replaceable>command</replaceable></term>
+        <listitem><para>
+
+Call <emphasis>command</emphasis> every <emphasis>interval</emphasis>
+seconds, starting from <emphasis>start</emphasis>. An
+<emphasis>interval</emphasis> of zero calls the task once, while a
+<emphasis>start</emphasis> of zero calls it immediately. Currently
+<emphasis>command</emphasis> is forwarded to the option handler.
+
+        </para></listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term>schedule_remove = <replaceable>id</replaceable></term>
+        <listitem><para>
+
+          Delete <emphasis>id</emphasis> from the scheduler.
+
+        </para></listitem>
+      </varlistentry>
+
     </variablelist>
 
   </refsect1>
 
 
   <refsect1>
@@ -461,29 +492,39 @@
           at startup. This gives the client 128 sockets to use as it
           wishes.
         </para></listitem>
       </varlistentry>
 
       <varlistentry>
-        <term>throttle_interval = <replaceable>ms</replaceable></term>
+        <term>umask = <replaceable>0644</replaceable></term>
         <listitem><para>
-          Interval between throttle ticks in milli-seconds, must be
-          between <emphasis>1-5000</emphasis> and defaults to
-          <emphasis>1000</emphasis>. Shorter intervals will cause less
-          bandwidth usage spikes while requiring more CPU resources.
-        </para></listitem>
-      </varlistentry>
 
-      <varlistentry>
-        <term>tracker_dump = <replaceable>yes | no</replaceable></term>
-        <listitem><para>
-          Dump data received from trackers to the files
-          "./tracker_dump.*".
+          Set the umask for this process, which is applied to all
+          files created by the program.
+
         </para></listitem>
       </varlistentry>
 
+<!--       <varlistentry> -->
+<!--         <term>throttle_interval = <replaceable>ms</replaceable></term> -->
+<!--         <listitem><para> -->
+<!--           Interval between throttle ticks in milli-seconds, must be -->
+<!--           between <emphasis>1-5000</emphasis> and defaults to -->
+<!--           <emphasis>1000</emphasis>. Shorter intervals will cause less -->
+<!--           bandwidth usage spikes while requiring more CPU resources. -->
+<!--         </para></listitem> -->
+<!--       </varlistentry> -->
+
+<!--       <varlistentry> -->
+<!--         <term>tracker_dump = <replaceable>yes | no</replaceable></term> -->
+<!--         <listitem><para> -->
+<!--           Dump data received from trackers to the files -->
+<!--           "./tracker_dump.*". -->
+<!--         </para></listitem> -->
+<!--       </varlistentry> -->
+
     </variablelist>
 
   </refsect1>
 
 
   <refsect1>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/doc/rtorrent.rc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/doc/rtorrent.rc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/doc/rtorrent.rc	2005-11-12 23:31:48.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/doc/rtorrent.rc	2005-12-20 10:03:22.000000000 +0800
@@ -21,20 +21,20 @@
 # space yet.
 #directory = ./
 
 # Default session directory. Make sure you don't run multiple instance
 # of rtorrent using the same session directory. Perhaps using a
 # relative path?
-#session = 
+#session = ./session
 
 # The ip address reported to the tracker.
-#ip = 127.0.0.1
+#ip = rakshasa
 
 # The ip address the listening socket and outgoing connections is
 # bound to.
-#bind = 127.0.0.1
+#bind = rakshasa
 
 # Port range to use for listening.
 #port_range = 6890-6999
 
 # Start opening ports at a random position within the port range.
 #port_random = no
@@ -43,12 +43,16 @@
 # fixed that causes lack of diskspace not to be properly reported.
 #check_hash = no
 
 # Set whetever the client should try to connect to UDP trackers.
 #use_udp_trackers = yes
 
+# Alternative calls to bind and ip that should handle dynamic ip's.
+#schedule = ip_tick,0,1800,ip=rakshasa
+#schedule = bind_tick,0,1800,bind=rakshasa
+
 #
 # Do not modify the following parameters unless you know what you're doing.
 #
 
 # Hash read-ahead controls how many MB to request the kernel to read
 # ahead. If the value is too low the disk may not be fully utilized,
@@ -67,13 +71,14 @@
 # Max number of files to keep open simultaniously.
 #max_open_files = 128
 
 # Number of sockets to simultaneously keep open.
 #max_open_sockets = <no default>
 
-# Dump data received from trackers to the files
-# "./tracker_dump.<time>".
-#tracker_dump = no
-
-# Change the interval between each throttle tick, in milliseconds. In
-# the range 1-5000 ms.
-#throttle_interval = 1000
+
+# Example of scheduling commands: Switch between two ip's every 5
+# seconds.
+#schedule = "ip_tick1,5,10,ip=torretta"
+#schedule = "ip_tick2,10,10,ip=lampedusa"
+
+# Remove a scheduled event.
+#schedule_remove = "ip_tick1"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/Makefile.am /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/Makefile.am
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/Makefile.am	2005-11-12 23:31:58.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/Makefile.am	2005-12-09 00:25:52.000000000 +0800
@@ -4,10 +4,14 @@
 
 EXTRA_DIST= \
 	autogen.sh \
 	rak/algorithm.h \
 	rak/error_number.h \
 	rak/functional.h \
+	rak/functional_fun.h \
+	rak/priority_queue.h \
+	rak/priority_queue_default.h \
 	rak/string_manip.h \
+	rak/timer.h \
 	rak/unordered_vector.h \
 	scripts/checks.m4 \
 	scripts/common.m4
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/Makefile.in	2005-11-22 00:57:33.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/Makefile.in	2005-12-16 10:53:56.000000000 +0800
@@ -159,13 +159,17 @@
 
 EXTRA_DIST = \
 	autogen.sh \
 	rak/algorithm.h \
 	rak/error_number.h \
 	rak/functional.h \
+	rak/functional_fun.h \
+	rak/priority_queue.h \
+	rak/priority_queue_default.h \
 	rak/string_manip.h \
+	rak/timer.h \
 	rak/unordered_vector.h \
 	scripts/checks.m4 \
 	scripts/common.m4
 
 all: config.h
 	$(MAKE) $(AM_MAKEFLAGS) all-recursive
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/rak/algorithm.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/rak/algorithm.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/rak/algorithm.h	2005-11-12 23:31:58.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/rak/algorithm.h	2005-12-05 04:42:21.000000000 +0800
@@ -35,12 +35,13 @@
 //           3185 Skoppum, NORWAY
 
 #ifndef RAK_ALGORITHM_H
 #define RAK_ALGORITHM_H
 
 #include <algorithm>
+#include <functional>
 
 namespace rak {
 
 template <typename _InputIter, typename _Function>
 _Function
 for_each_pre(_InputIter __first, _InputIter __last, _Function __f) {
@@ -87,14 +88,13 @@
   } while (true);
 
   return std::make_pair(__middle1, __middle2);
 }
 
 template <typename _Value>
-struct
-compare_base : public std::binary_function<_Value, _Value, bool> {
+struct compare_base : public std::binary_function<_Value, _Value, bool> {
   bool operator () (const _Value& complete, const _Value& base) const {
     return !complete.compare(0, base.size(), base);
   }
 };
 
 // Count the number of elements from the start of the containers to
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/rak/error_number.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/rak/error_number.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/rak/error_number.h	2005-11-12 23:31:58.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/rak/error_number.h	2005-11-25 05:03:05.000000000 +0800
@@ -44,12 +44,14 @@
 
 class error_number {
 public:
   error_number() : m_errno(0) {}
   error_number(int e) : m_errno(e) {}
 
+  bool                is_valid() const             { return m_errno != 0; }
+
   int                 value() const                { return m_errno; }
   const char*         c_str() const                { return strerror(m_errno); }
 
   bool                is_blocked_momentary() const { return m_errno == EAGAIN || m_errno == EINTR; }
   bool                is_blocked_prolonged() const { return m_errno == EDEADLK; }
 
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/rak: functional_fun.h
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/rak/functional.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/rak/functional.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/rak/functional.h	2005-11-12 23:31:58.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/rak/functional.h	2005-12-09 00:24:58.000000000 +0800
@@ -208,12 +208,18 @@
 template <typename Type, typename Ftor>
 inline greater_equal_t<Type, Ftor>
 greater_equal(Type t, Ftor f) {
   return greater_equal_t<Type, Ftor>(t, f);
 }
 
+template<typename Tp>
+struct invert : public std::unary_function<Tp, Tp> {
+  Tp
+  operator () (const Tp& x) const { return ~x; }
+};
+
 template <typename Src, typename Dest>
 struct on_t : public std::unary_function<typename Src::argument_type, typename Dest::result_type> {
   typedef typename Dest::result_type result_type;
 
   on_t(Src s, Dest d) : m_dest(d), m_src(s) {}
 
@@ -340,146 +346,146 @@
 
 // Lightweight callback function including pointer to object. Should
 // be replaced by TR1 stuff later. Requires an object to bind, instead
 // of using a seperate functor for that.
 
 template <typename Object, typename Ret>
-class mem_fn0 {
+class mem_fun0 {
 public:
   typedef Ret (Object::*Function)();
 
-  mem_fn0() : m_object(NULL) {}
-  mem_fn0(Object* o, Function f) : m_object(o), m_function(f) {}
+  mem_fun0() : m_object(NULL) {}
+  mem_fun0(Object* o, Function f) : m_object(o), m_function(f) {}
 
   bool is_valid() const { return m_object; }
 
   Ret operator () () { return (m_object->*m_function)(); }
   
 private:
   Object* m_object;
   Function m_function;
 };
 
 template <typename Object, typename Ret>
-class const_mem_fn0 {
+class const_mem_fun0 {
 public:
   typedef Ret (Object::*Function)() const;
 
-  const_mem_fn0() : m_object(NULL) {}
-  const_mem_fn0(Object* o, Function f) : m_object(o), m_function(f) {}
+  const_mem_fun0() : m_object(NULL) {}
+  const_mem_fun0(Object* o, Function f) : m_object(o), m_function(f) {}
 
   bool is_valid() const { return m_object; }
 
   Ret operator () () { return (m_object->*m_function)(); }
   
 private:
   Object* m_object;
   Function m_function;
 };
 
 template <typename Object, typename Ret, typename Arg1>
-class mem_fn1 {
+class mem_fun1 {
 public:
   typedef Ret (Object::*Function)(Arg1);
 
-  mem_fn1() : m_object(NULL) {}
-  mem_fn1(Object* o, Function f) : m_object(o), m_function(f) {}
+  mem_fun1() : m_object(NULL) {}
+  mem_fun1(Object* o, Function f) : m_object(o), m_function(f) {}
 
   bool is_valid() const { return m_object; }
 
   Ret operator () (Arg1 a1) { return (m_object->*m_function)(a1); }
   
 private:
   Object* m_object;
   Function m_function;
 };
 
 template <typename Object, typename Ret, typename Arg1>
-class const_mem_fn1 {
+class const_mem_fun1 {
 public:
   typedef Ret (Object::*Function)(Arg1) const;
 
-  const_mem_fn1() : m_object(NULL) {}
-  const_mem_fn1(Object* o, Function f) : m_object(o), m_function(f) {}
+  const_mem_fun1() : m_object(NULL) {}
+  const_mem_fun1(Object* o, Function f) : m_object(o), m_function(f) {}
 
   bool is_valid() const { return m_object; }
 
   Ret operator () (Arg1 a1) { return (m_object->*m_function)(a1); }
   
 private:
   Object* m_object;
   Function m_function;
 };
 
 template <typename Object, typename Ret, typename Arg1, typename Arg2>
-class mem_fn2 : public std::binary_function<Arg1, Arg2, Ret> {
+class mem_fun2 : public std::binary_function<Arg1, Arg2, Ret> {
 public:
   typedef Ret (Object::*Function)(Arg1, Arg2);
 
-  mem_fn2() : m_object(NULL) {}
-  mem_fn2(Object* o, Function f) : m_object(o), m_function(f) {}
+  mem_fun2() : m_object(NULL) {}
+  mem_fun2(Object* o, Function f) : m_object(o), m_function(f) {}
 
   bool is_valid() const { return m_object; }
 
   Ret operator () (Arg1 a1, Arg2 a2) { return (m_object->*m_function)(a1, a2); }
   
 private:
   Object* m_object;
   Function m_function;
 };
 
 template <typename Object, typename Ret, typename Arg1, typename Arg2, typename Arg3>
-class mem_fn3 {
+class mem_fun3 {
 public:
   typedef Ret (Object::*Function)(Arg1, Arg2, Arg3);
 
-  mem_fn3() : m_object(NULL) {}
-  mem_fn3(Object* o, Function f) : m_object(o), m_function(f) {}
+  mem_fun3() : m_object(NULL) {}
+  mem_fun3(Object* o, Function f) : m_object(o), m_function(f) {}
 
   bool is_valid() const { return m_object; }
 
   Ret operator () (Arg1 a1, Arg2 a2, Arg3 a3) { return (m_object->*m_function)(a1, a2, a3); }
   
 private:
   Object* m_object;
   Function m_function;
 };
 
 template <typename Object, typename Ret>
-inline mem_fn0<Object, Ret>
-make_mem_fn(Object* o, Ret (Object::*f)()) {
- return mem_fn0<Object, Ret>(o, f);
+inline mem_fun0<Object, Ret>
+make_mem_fun(Object* o, Ret (Object::*f)()) {
+ return mem_fun0<Object, Ret>(o, f);
 }
 
 template <typename Object, typename Ret>
-inline const_mem_fn0<Object, Ret>
-make_mem_fn(Object* o, Ret (Object::*f)() const) {
- return const_mem_fn0<Object, Ret>(o, f);
+inline const_mem_fun0<Object, Ret>
+make_mem_fun(Object* o, Ret (Object::*f)() const) {
+ return const_mem_fun0<Object, Ret>(o, f);
 }
 
 template <typename Object, typename Ret, typename Arg1>
-inline mem_fn1<Object, Ret, Arg1>
-make_mem_fn(Object* o, Ret (Object::*f)(Arg1)) {
- return mem_fn1<Object, Ret, Arg1>(o, f);
+inline mem_fun1<Object, Ret, Arg1>
+make_mem_fun(Object* o, Ret (Object::*f)(Arg1)) {
+ return mem_fun1<Object, Ret, Arg1>(o, f);
 }
 
 template <typename Object, typename Ret, typename Arg1>
-inline const_mem_fn1<Object, Ret, Arg1>
-make_mem_fn(Object* o, Ret (Object::*f)(Arg1) const) {
- return const_mem_fn1<Object, Ret, Arg1>(o, f);
+inline const_mem_fun1<Object, Ret, Arg1>
+make_mem_fun(Object* o, Ret (Object::*f)(Arg1) const) {
+ return const_mem_fun1<Object, Ret, Arg1>(o, f);
 }
 
 template <typename Object, typename Ret, typename Arg1, typename Arg2>
-inline mem_fn2<Object, Ret, Arg1, Arg2>
-make_mem_fn(Object* o, Ret (Object::*f)(Arg1, Arg2)) {
- return mem_fn2<Object, Ret, Arg1, Arg2>(o, f);
+inline mem_fun2<Object, Ret, Arg1, Arg2>
+make_mem_fun(Object* o, Ret (Object::*f)(Arg1, Arg2)) {
+ return mem_fun2<Object, Ret, Arg1, Arg2>(o, f);
 }
 
 template <typename Object, typename Ret, typename Arg1, typename Arg2, typename Arg3>
-inline mem_fn3<Object, Ret, Arg1, Arg2, Arg3>
-make_mem_fn(Object* o, Ret (Object::*f)(Arg1, Arg2, Arg3)) {
- return mem_fn3<Object, Ret, Arg1, Arg2, Arg3>(o, f);
+inline mem_fun3<Object, Ret, Arg1, Arg2, Arg3>
+make_mem_fun(Object* o, Ret (Object::*f)(Arg1, Arg2, Arg3)) {
+ return mem_fun3<Object, Ret, Arg1, Arg2, Arg3>(o, f);
 }
 
 }
 
 #endif
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/rak: priority_queue_default.h
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/rak: priority_queue.h
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/rak: timer.h
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src: command_scheduler.cc
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src: command_scheduler.h
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src: command_scheduler_item.cc
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src: command_scheduler_item.h
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/control.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/control.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/control.cc	2005-11-12 23:31:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/control.cc	2005-12-17 04:11:00.000000000 +0800
@@ -43,33 +43,38 @@
 #include "display/window.h"
 #include "display/manager.h"
 #include "input/manager.h"
 #include "input/input_event.h"
 #include "ui/root.h"
 
+#include "command_scheduler.h"
+
 #include "control.h"
 
 Control::Control() :
   m_shutdownReceived(false),
 
   m_ui(new ui::Root()),
   m_core(new core::Manager()),
   m_display(new display::Manager()),
   m_input(new input::Manager()),
-  m_inputStdin(new input::InputEvent(STDIN_FILENO)) {
+  m_inputStdin(new input::InputEvent(STDIN_FILENO)),
+
+  m_commandScheduler(new CommandScheduler()) {
 
   m_inputStdin->slot_pressed(sigc::mem_fun(m_input, &input::Manager::pressed));
 
-  m_taskShutdown.set_iterator(utils::taskScheduler.end());
-  m_taskShutdown.set_slot(sigc::mem_fun(*this, &Control::receive_shutdown));
+  m_taskShutdown.set_slot(rak::mem_fn(this, &Control::receive_shutdown));
 }
 
 Control::~Control() {
   delete m_inputStdin;
   delete m_input;
 
+  delete m_commandScheduler;
+
   delete m_ui;
   delete m_display;
   delete m_core;
 }
 
 void
@@ -87,13 +92,13 @@
 
   m_inputStdin->insert(m_core->get_poll_manager()->get_torrent_poll());
 }
 
 void
 Control::cleanup() {
-  utils::taskScheduler.erase(&m_taskShutdown);
+  priority_queue_erase(&taskScheduler, &m_taskShutdown);
 
   m_inputStdin->remove(m_core->get_poll_manager()->get_torrent_poll());
 
   m_ui->cleanup();
   m_core->cleanup();
   
@@ -110,13 +115,13 @@
   if (!m_shutdownReceived) {
     torrent::listen_close();
     
     m_core->shutdown(false);
     m_shutdownReceived = true;
 
-    if (!utils::taskScheduler.is_scheduled(&m_taskShutdown))
-      utils::taskScheduler.insert(&m_taskShutdown, utils::Timer::cache() + 5 * 1000000);
+    if (!m_taskShutdown.is_queued())
+      priority_queue_insert(&taskScheduler, &m_taskShutdown, cachedTime + 5 * 1000000);
 
   } else {
     m_core->shutdown(true);
   }
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/control.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/control.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/control.h	2005-11-12 23:31:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/control.h	2005-12-17 04:10:13.000000000 +0800
@@ -36,13 +36,13 @@
 
 #ifndef RTORRENT_CONTROL_H
 #define RTORRENT_CONTROL_H
 
 #include <torrent/torrent.h>
 
-#include "utils/task.h"
+#include "globals.h"
 
 namespace ui {
   class Root;
 }
 
 namespace core {
@@ -55,30 +55,34 @@
 
 namespace input {
   class InputEvent;
   class Manager;
 }  
 
+class CommandScheduler;
+
 class Control {
 public:
   Control();
   ~Control();
   
   bool                is_shutdown_completed()       { return m_shutdownReceived && torrent::is_inactive(); }
   bool                is_shutdown_received()        { return m_shutdownReceived; }
 
+  void                initialize();
+  void                cleanup();
+
+  void                receive_shutdown();
+
   ui::Root*           ui()                          { return m_ui; }
   core::Manager*      core()                        { return m_core; }
   display::Manager*   display()                     { return m_display; }
   input::Manager*     input()                       { return m_input; }
   input::InputEvent*  input_stdin()                 { return m_inputStdin; }
 
-  void                initialize();
-  void                cleanup();
-
-  void                receive_shutdown();
+  CommandScheduler*   command_scheduler()           { return m_commandScheduler; }
 
 private:
   Control(const Control&);
   void operator = (const Control&);
 
   bool                m_shutdownReceived;
@@ -86,10 +90,12 @@
   ui::Root*           m_ui;
   core::Manager*      m_core;
   display::Manager*   m_display;
   input::Manager*     m_input;
   input::InputEvent*  m_inputStdin;
 
-  utils::TaskItem     m_taskShutdown;
+  CommandScheduler*   m_commandScheduler;
+
+  rak::priority_item  m_taskShutdown;
 };
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/curl_get.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/curl_get.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/curl_get.cc	2005-11-22 00:45:44.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/curl_get.cc	2005-12-05 12:08:51.000000000 +0800
@@ -130,17 +130,26 @@
 void
 CurlGet::set_user_agent(const char* s) {
   curl_easy_setopt(m_handle, CURLOPT_USERAGENT, s);
 }
 
 void
+CurlGet::set_http_proxy(const char* s) {
+  curl_easy_setopt(m_handle, CURLOPT_PROXY, s);
+}
+
+void
 CurlGet::perform(CURLMsg* msg) {
   if (msg->msg != CURLMSG_DONE)
     throw std::logic_error("CurlGet::process got CURLMSG that isn't done");
 
   if (msg->data.result == CURLE_OK)
     m_signalDone.emit();
   else
     m_signalFailed.emit(curl_easy_strerror(msg->data.result));
+
+  if (m_handle != NULL)
+    throw std::logic_error("CurlGet::perform finished but the object wasn't closed.");
+
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/curl_get.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/curl_get.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/curl_get.h	2005-11-12 23:31:50.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/curl_get.h	2005-12-05 11:47:39.000000000 +0800
@@ -64,12 +64,13 @@
   bool               is_busy()                      { return m_handle; }
 
   double             size_done();
   double             size_total();
 
   void               set_user_agent(const char* s);
+  void               set_http_proxy(const char* s);
 
  protected:
   CURL*              handle()                       { return m_handle; }
 
   void               perform(CURLMsg* msg);
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/curl_stack.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/curl_stack.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/curl_stack.cc	2005-11-12 23:31:51.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/curl_stack.cc	2005-12-05 12:07:51.000000000 +0800
@@ -100,13 +100,17 @@
 
   return std::max(maxFd, 0);
 }
 
 void
 CurlStack::add_get(CurlGet* get) {
-  get->set_user_agent(m_userAgent.c_str());
+  if (!m_userAgent.empty())
+    get->set_user_agent(m_userAgent.c_str());
+
+  if (!m_httpProxy.empty())
+    get->set_http_proxy(m_httpProxy.c_str());
 
   CURLMcode code;
 
   if ((code = curl_multi_add_handle((CURLM*)m_handle, get->handle())) > 0)
     throw std::logic_error("curl_multi_add_handle \"" + std::string(curl_multi_strerror(code)));
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/curl_stack.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/curl_stack.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/curl_stack.h	2005-11-12 23:31:50.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/curl_stack.h	2005-12-05 11:49:05.000000000 +0800
@@ -65,12 +65,15 @@
 
   SlotFactory         get_http_factory();
 
   const std::string&  user_agent() const                   { return m_userAgent; }
   void                set_user_agent(const std::string& s) { m_userAgent = s; }
 
+  const std::string&  http_proxy() const                   { return m_httpProxy; }
+  void                set_http_proxy(const std::string& s) { m_httpProxy = s; }
+
   static void         global_init();
   static void         global_cleanup();
 
  protected:
   void                add_get(CurlGet* get);
   void                remove_get(CurlGet* get);
@@ -82,11 +85,12 @@
   void*               m_handle;
 
   int                 m_size;
   CurlGetList         m_getList;
 
   std::string         m_userAgent;
+  std::string         m_httpProxy;
 };
 
 }
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/download.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download.cc	2005-11-12 23:31:50.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/download.cc	2005-12-20 06:00:14.000000000 +0800
@@ -37,18 +37,20 @@
 #include "config.h"
 
 #include <stdexcept>
 #include <sigc++/bind.h>
 #include <sigc++/hide.h>
 #include <sigc++/signal.h>
+#include <torrent/exceptions.h>
 
 #include "download.h"
 
 namespace core {
 
 Download::Download() :
+  m_chunksFailed(0),
   m_connectionLeech(torrent::Download::CONNECTION_LEECH),
   m_connectionSeed(torrent::Download::CONNECTION_SEED) {
 }
 
 void
 Download::start() {
@@ -67,12 +69,14 @@
 Download::set_download(torrent::Download d) {
   m_download = d;
 
   m_connTrackerSucceded = m_download.signal_tracker_succeded(sigc::bind(sigc::mem_fun(*this, &Download::receive_tracker_msg), ""));
   m_connTrackerFailed = m_download.signal_tracker_failed(sigc::mem_fun(*this, &Download::receive_tracker_msg));
   m_connStorageError = m_download.signal_storage_error(sigc::mem_fun(*this, &Download::receive_storage_error));
+
+  m_download.signal_chunk_failed(sigc::mem_fun(*this, &Download::receive_chunk_failed));
 }
 
 void
 Download::set_root_directory(const std::string& d) {
   m_download.set_root_dir(d +
 			  (!d.empty() && *d.rbegin() != '/' ? "/" : "") +
@@ -125,13 +129,13 @@
   // Return default if the name isn't found.
   if (name == "leech")
     return torrent::Download::CONNECTION_LEECH;
   else if (name == "seed")
     return torrent::Download::CONNECTION_SEED;
   else
-    throw std::runtime_error("Invalid connection type selected: \"" + name + "\"");
+    throw torrent::input_error("Unknown peer connection type selected: \"" + name + "\"");
 }
 
 const char*
 Download::connection_type_to_string(torrent::Download::ConnectionType t) {
   switch (t) {
   case torrent::Download::CONNECTION_LEECH:
@@ -140,7 +144,12 @@
     return "seed";
   default:
     return "unknown";
   }
 }
 
+void
+Download::receive_chunk_failed(uint32_t idx) {
+  m_chunksFailed++;
+}
+
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download_factory.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/download_factory.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download_factory.cc	2005-11-17 04:38:54.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/download_factory.cc	2005-12-16 03:41:53.000000000 +0800
@@ -38,15 +38,15 @@
 
 #include <fstream>
 #include <sstream>
 #include <stdexcept>
 #include <torrent/bencode.h>
 
-#include "utils/task.h"
 #include "curl_get.h"
 #include "http_queue.h"
+#include "globals.h"
 #include "manager.h"
 
 #include "download_factory.h"
 
 namespace core {
 
@@ -57,35 +57,32 @@
   m_loaded(false),
 
   m_uri(uri),
   m_session(false),
   m_start(false) {
 
-  m_taskLoad.set_iterator(utils::taskScheduler.end());
-  m_taskLoad.set_slot(sigc::mem_fun(*this, &DownloadFactory::receive_load));
-
-  m_taskCommit.set_iterator(utils::taskScheduler.end());
-  m_taskCommit.set_slot(sigc::mem_fun(*this, &DownloadFactory::receive_commit));
+  m_taskLoad.set_slot(rak::mem_fn(this, &DownloadFactory::receive_load));
+  m_taskCommit.set_slot(rak::mem_fn(this, &DownloadFactory::receive_commit));
 }  
 
 DownloadFactory::~DownloadFactory() {
-  utils::taskScheduler.erase(&m_taskLoad);
-  utils::taskScheduler.erase(&m_taskCommit);
+  priority_queue_erase(&taskScheduler, &m_taskLoad);
+  priority_queue_erase(&taskScheduler, &m_taskCommit);
 
   delete m_stream;
   m_stream = NULL;
 }
 
 void
 DownloadFactory::load() {
-  utils::taskScheduler.insert(&m_taskLoad, utils::Timer::cache());
+  priority_queue_insert(&taskScheduler, &m_taskLoad, cachedTime);
 }
 
 void
 DownloadFactory::commit() {
-  utils::taskScheduler.insert(&m_taskCommit, utils::Timer::cache());
+  priority_queue_insert(&taskScheduler, &m_taskCommit, cachedTime);
 }
 
 void
 DownloadFactory::receive_load() {
   if (m_stream)
     throw std::logic_error("DownloadFactory::load() called on an object with m_stream != NULL");
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download_factory.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/download_factory.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download_factory.h	2005-11-12 23:31:50.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/download_factory.h	2005-12-09 01:14:14.000000000 +0800
@@ -36,14 +36,14 @@
 
 #ifndef RTORRENT_CORE_DOWNLOAD_FACTORY_H
 #define RTORRENT_CORE_DOWNLOAD_FACTORY_H
 
 #include <iosfwd>
 #include <sigc++/slot.h>
+#include <rak/priority_queue_default.h>
 
-#include "utils/task_item.h"
 #include "http_queue.h"
 
 namespace core {
 
 class Manager;
 
@@ -84,13 +84,13 @@
 
   std::string         m_uri;
   bool                m_session;
   bool                m_start;
 
   Slot                m_slotFinished;
-  utils::TaskItem     m_taskLoad;
-  utils::TaskItem     m_taskCommit;
+  rak::priority_item  m_taskLoad;
+  rak::priority_item  m_taskCommit;
 };
 
 }
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/download.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download.h	2005-11-12 23:31:50.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/download.h	2005-12-20 05:58:21.000000000 +0800
@@ -62,12 +62,14 @@
   const torrent::Download& get_download() const      { return m_download; }
   std::string        get_hash()                      { return m_download.info_hash(); }
   torrent::Bencode&  get_bencode()                   { return m_download.bencode(); }
   
   const std::string& get_message()                   { return m_message; }
 
+  uint32_t           chunks_failed() const                         { return m_chunksFailed; }
+
   void               set_root_directory(const std::string& d);
 
   ConnType           get_connection_current() const                { return m_download.connection_type(); }
   ConnType           get_connection_leech() const                  { return m_connectionLeech; }
   ConnType           get_connection_seed() const                   { return m_connectionSeed; }
 
@@ -92,15 +94,18 @@
   static const char* connection_type_to_string(ConnType t);
 
 private:
   void               receive_tracker_msg(std::string msg);
   void               receive_storage_error(std::string msg);
 
+  void               receive_chunk_failed(uint32_t idx);
+
   torrent::Download  m_download;
 
   std::string        m_message;
+  uint32_t           m_chunksFailed;
 
   ConnType           m_connectionLeech;
   ConnType           m_connectionSeed;
 
   sigc::connection   m_connTrackerSucceded;
   sigc::connection   m_connTrackerFailed;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download_list.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/download_list.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/download_list.h	2005-11-12 23:31:50.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/download_list.h	2005-11-25 04:22:37.000000000 +0800
@@ -43,12 +43,16 @@
 #include "download_slot_map.h"
 
 namespace core {
 
 class Download;
 
+// Container for all downloads. Add slots to the slot maps to cause
+// some action to be taken when the torrent changes states. Don't
+// change the states from outside of core.
+
 class DownloadList : private std::list<Download*> {
 public:
   typedef std::list<Download*> Base;
 
   using Base::iterator;
   using Base::const_iterator;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/log.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/log.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/log.cc	2005-11-12 23:31:50.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/log.cc	2005-12-05 04:25:41.000000000 +0800
@@ -34,28 +34,29 @@
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
 #include <algorithm>
+#include <rak/functional.h>
 
+#include "globals.h"
 #include "log.h"
-#include "rak/functional.h"
 
 namespace core {
 
 void
 Log::push_front(const std::string& msg) {
-  Base::push_front(Type(utils::Timer::cache(), msg));
+  Base::push_front(Type(cachedTime, msg));
 
   if (size() > 50)
     Base::pop_back();
 
   m_signalUpdate.emit();
 }
 
 Log::iterator
-Log::find_older(utils::Timer t) {
-  return std::find_if(begin(), end(), rak::on(rak::mem_ptr_ref(&Type::first), std::bind2nd(std::less_equal<utils::Timer>(), t)));
+Log::find_older(rak::timer t) {
+  return std::find_if(begin(), end(), rak::on(rak::mem_ptr_ref(&Type::first), std::bind2nd(std::less_equal<rak::timer>(), t)));
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/log.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/log.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/log.h	2005-11-12 23:31:50.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/log.h	2005-12-05 04:19:36.000000000 +0800
@@ -38,19 +38,19 @@
 #define RTORRENT_CORE_LOG_H
 
 #include <deque>
 #include <string>
 #include <sigc++/signal.h>
 
-#include "utils/timer.h"
+#include <rak/timer.h>
 
 namespace core {
 
-class Log : private std::deque<std::pair<utils::Timer, std::string> > {
+class Log : private std::deque<std::pair<rak::timer, std::string> > {
 public:
-  typedef std::pair<utils::Timer, std::string> Type;
+  typedef std::pair<rak::timer, std::string> Type;
   typedef std::deque<Type>                     Base;
   typedef sigc::signal0<void>                  Signal;
 
   using Base::iterator;
   using Base::const_iterator;
   using Base::reverse_iterator;
@@ -63,13 +63,13 @@
 
   using Base::empty;
   using Base::size;
 
   void      push_front(const std::string& msg);
 
-  iterator  find_older(utils::Timer t);
+  iterator  find_older(rak::timer t);
 
   Signal&   signal_update() { return m_signalUpdate; }
 
 private:
   Signal    m_signalUpdate;
 };
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/manager.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/manager.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/manager.cc	2005-11-17 04:39:46.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/manager.cc	2005-12-20 05:53:51.000000000 +0800
@@ -79,17 +79,17 @@
   m_checkHash(true) {
 }
 
 void
 Manager::initialize_first() {
   if ((m_pollManager = PollManagerEPoll::create(sysconf(_SC_OPEN_MAX))) != NULL)
-    m_logImportant.push_front("Using 'epoll' based polling");
+    m_logImportant.push_front("Using 'epoll' based polling.");
   else if ((m_pollManager = PollManagerSelect::create(sysconf(_SC_OPEN_MAX))) != NULL)
-    m_logImportant.push_front("Using 'select' based polling");
+    m_logImportant.push_front("Using 'select' based polling.");
   else
-    throw std::runtime_error("Could not create any PollManager");
+    throw std::runtime_error("Could not create any PollManager.");
 
   // Need to initialize this before parseing options.
   torrent::initialize(m_pollManager->get_torrent_poll());
 }
 
 void
@@ -242,24 +242,24 @@
   }
 }
 
 void
 Manager::listen_open() {
   if (m_portFirst > m_portLast)
-    throw std::runtime_error("Invalid port range for listening");
+    throw torrent::input_error("Invalid port range for listening");
 
   if (m_portRandom) {
     int boundary = m_portFirst + random() % (m_portLast - m_portFirst + 1);
 
     if (!torrent::listen_open(boundary, m_portLast) &&
 	!torrent::listen_open(m_portFirst, boundary))
-      throw std::runtime_error("Could not open port for listening.");
+      throw torrent::input_error("Could not open/bind a port for listening.");
 
   } else {
     if (!torrent::listen_open(m_portFirst, m_portLast))
-      throw std::runtime_error("Could not open port for listening.");
+      throw torrent::input_error("Could not open/bind a port for listening.");
   }
 }
 
 void
 Manager::initialize_bencode(Download* d) {
   torrent::Bencode& bencode = d->get_bencode();
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/manager.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/manager.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/manager.h	2005-11-12 23:31:50.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/manager.h	2005-12-19 00:17:03.000000000 +0800
@@ -76,25 +76,27 @@
 
   // Really should find a more descriptive name.
   void                initialize_first();
   void                initialize_second();
   void                cleanup();
 
+  void                listen_open();
+
   void                shutdown(bool force);
 
   DListItr            insert(std::istream* s);
   DListItr            erase(DListItr itr);
 
   void                start(Download* d);
   void                stop(Download* d);
 
   void                check_hash(Download* d);
 
-private:
-  void                listen_open();
+  void                push_log(const std::string& msg)    { m_logImportant.push_front(msg); m_logComplete.push_front(msg); }
 
+private:
   void                create_http(const std::string& uri);
   void                create_final(std::istream* s);
 
   void                initialize_bencode(Download* d);
 
   void                prepare_hash_check(Download* d);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager_epoll.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/poll_manager_epoll.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager_epoll.cc	2005-11-12 23:31:50.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/poll_manager_epoll.cc	2005-12-05 04:19:36.000000000 +0800
@@ -58,17 +58,17 @@
 }
 
 PollManagerEPoll::~PollManagerEPoll() {
 }
 
 void
-PollManagerEPoll::poll(utils::Timer timeout) {
+PollManagerEPoll::poll(rak::timer timeout) {
   // Add 1ms to ensure we don't idle loop due to the lack of
   // resolution.
   torrent::perform();
-  timeout = std::min(timeout, utils::Timer(torrent::next_timeout()));
+  timeout = std::min(timeout, rak::timer(torrent::next_timeout()));
 
   if (m_httpStack.is_busy()) {
     // When we're using libcurl we need to use select, but as this is
     // inefficient we try avoiding it whenever possible.
 #if defined USE_VARIABLE_FDSET
     std::memset(m_readSet, 0, m_setSize);
@@ -96,13 +96,13 @@
       // even if there's no socket events outside of the http stuff.
       torrent::perform();
       return;
     }
 
     // Clear the timeout since we've already used it in the select call.
-    timeout = utils::Timer();
+    timeout = rak::timer();
   }
 
   // Yes, below is how much code really *should* have been in this
   // function. ;)
 
   if (static_cast<torrent::PollEPoll*>(m_poll)->poll((timeout.usec() + 999) / 1000) == -1)
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager_epoll.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/poll_manager_epoll.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager_epoll.h	2005-11-12 23:31:50.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/poll_manager_epoll.h	2005-12-05 04:19:36.000000000 +0800
@@ -49,13 +49,13 @@
 public:
   static PollManagerEPoll* create(int maxOpenSockets);
   ~PollManagerEPoll();
 
   torrent::Poll*      get_torrent_poll();
 
-  void                poll(utils::Timer timeout);
+  void                poll(rak::timer timeout);
 
 private:
   PollManagerEPoll(torrent::Poll* p) : PollManager(p) {}
 };
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/poll_manager.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager.h	2005-11-12 23:31:50.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/poll_manager.h	2005-12-05 04:22:35.000000000 +0800
@@ -35,17 +35,17 @@
 //           3185 Skoppum, NORWAY
 
 #ifndef RTORRENT_CORE_POLL_MANAGER_H
 #define RTORRENT_CORE_POLL_MANAGER_H
 
 #include <sys/select.h>
+#include <rak/timer.h>
 #include <sigc++/signal.h>
 #include <torrent/poll.h>
 
 #include "curl_stack.h"
-#include "utils/timer.h"
 
 namespace core {
 
 // CurlStack really should be somewhere else, but that won't happen
 // until they add an epoll friendly API.
 
@@ -58,13 +58,13 @@
 
   unsigned int        get_open_max() const         { return m_poll->open_max(); }
 
   CurlStack*          get_http_stack()             { return &m_httpStack; }
   torrent::Poll*      get_torrent_poll()           { return m_poll; }
 
-  virtual void        poll(utils::Timer timeout) = 0;
+  virtual void        poll(rak::timer timeout) = 0;
 
   // Use a signal, connect checking for input and updating the display.
   Signal&             signal_interrupted()         { return m_signalInterrupted; }
 
 protected:
   PollManager(const PollManager&);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager_select.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/poll_manager_select.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager_select.cc	2005-11-12 23:31:50.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/poll_manager_select.cc	2005-12-05 04:19:36.000000000 +0800
@@ -58,15 +58,15 @@
 }
 
 PollManagerSelect::~PollManagerSelect() {
 }
 
 void
-PollManagerSelect::poll(utils::Timer timeout) {
+PollManagerSelect::poll(rak::timer timeout) {
   torrent::perform();
-  timeout = std::min(timeout, utils::Timer(torrent::next_timeout()));
+  timeout = std::min(timeout, rak::timer(torrent::next_timeout()));
 
 #if defined USE_VARIABLE_FDSET
   std::memset(m_readSet, 0, m_setSize);
   std::memset(m_writeSet, 0, m_setSize);
   std::memset(m_errorSet, 0, m_setSize);
 #else
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager_select.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/poll_manager_select.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/core/poll_manager_select.h	2005-11-12 23:31:50.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/core/poll_manager_select.h	2005-12-05 04:19:36.000000000 +0800
@@ -47,13 +47,13 @@
 
 class PollManagerSelect : public PollManager {
 public:
   static PollManagerSelect* create(int maxOpenSockets);
   ~PollManagerSelect();
 
-  void                poll(utils::Timer timeout);
+  void                poll(rak::timer timeout);
 
 private:
   PollManagerSelect(torrent::Poll* p) : PollManager(p) {}
 };
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/canvas.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/canvas.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/canvas.h	2005-11-12 23:31:54.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/canvas.h	2005-12-20 06:02:56.000000000 +0800
@@ -100,12 +100,16 @@
 			    A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6)         { mvwprintw(m_window, y, x, str, a1, a2, a3, a4, a5, a6); }
 
   template <typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
   void                print(int x, int y, char* str,
                	            A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7)  { mvwprintw(m_window, y, x, str, a1, a2, a3, a4, a5, a6, a7); }
 
+  template <typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7, typename A8>
+  void                print(int x, int y, char* str,
+               	            A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8) { mvwprintw(m_window, y, x, str, a1, a2, a3, a4, a5, a6, a7, a8); }
+
   void                set_attr(int x, int y, int n, int attr, int color)      { mvwchgat(m_window, y, x, n, attr, color, NULL); }
 
   // Initialize stdscr.
   static void         initialize();
   static void         cleanup();
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/manager.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/manager.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/manager.cc	2005-11-12 23:31:55.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/manager.cc	2005-12-16 06:47:38.000000000 +0800
@@ -35,16 +35,16 @@
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
 #include <stdexcept>
 #include <algorithm>
-
-#include "rak/functional.h"
+#include <rak/functional.h>
 
 #include "canvas.h"
+#include "globals.h"
 #include "manager.h"
 #include "window.h"
 
 namespace display {
 
 Manager::iterator
@@ -95,13 +95,28 @@
 }
 
 void
 Manager::do_update() {
   Canvas::refresh_std();
 
-  utils::displayScheduler.execute(utils::Timer::cache());
+//   std::list<rak::priority_item*> workQueue;
+
+//   std::copy(rak::queue_popper(displayScheduler, rak::bind2nd(std::mem_fun(&rak::priority_item::compare), cachedTime)),
+// 	    rak::queue_popper(displayScheduler, rak::bind2nd(std::mem_fun(&rak::priority_item::compare), rak::timer())),
+// 	    std::back_inserter(workQueue));
+//   std::for_each(workQueue.begin(), workQueue.end(), std::mem_fun(&rak::priority_item::clear_time));
+//   std::for_each(workQueue.begin(), workQueue.end(), std::mem_fun(&rak::priority_item::call));
+
+  while (!displayScheduler.empty() && displayScheduler.top()->time() <= cachedTime) {
+    rak::priority_item* v = displayScheduler.top();
+    displayScheduler.pop();
+
+    v->clear_time();
+    v->call();
+  }
+
   std::for_each(begin(), end(), rak::if_then(std::mem_fun(&Window::is_active), std::mem_fun(&Window::refresh)));
 
   Canvas::do_update();
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/utils.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/utils.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/utils.cc	2005-11-16 01:42:39.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/utils.cc	2005-12-20 03:49:01.000000000 +0800
@@ -40,13 +40,13 @@
 #include <sstream>
 #include <iomanip>
 #include <torrent/rate.h>
 #include <torrent/tracker.h>
 
 #include "core/download.h"
-#include "utils/timer.h"
+#include <rak/timer.h>
 
 #include "utils.h"
 
 namespace display {
 
 char*
@@ -63,18 +63,30 @@
 print_hhmmss(char* buf, unsigned int length, time_t t) {
   std::tm *u = std::localtime(&t);
   
   if (u == NULL)
     return "inv_time";
 
-  unsigned int s = snprintf(buf, length, "%02u:%02u:%02u", u->tm_hour, u->tm_min, u->tm_sec);
+  unsigned int s = snprintf(buf, length, "%2u:%02u:%02u", u->tm_hour, u->tm_min, u->tm_sec);
 
   return buf + std::min(s, length);
 }
 
 char*
+print_ddhhmm(char* buf, unsigned int length, time_t t) {
+  unsigned int s;
+
+  if (t / (24 * 3600) < 100)
+    s = snprintf(buf, length, "%2i:%02i:%02i", (int)t / (24 * 3600), ((int)t / 3600) % 24, ((int)t / 60) % 60);
+  else
+    s = snprintf(buf, length, "--:--:--");
+  
+  return buf + std::min(s, length);
+}
+
+char*
 print_ddmmyyyy(char* buf, unsigned int length, time_t t) {
   std::tm *u = std::gmtime(&t);
   
   if (u == NULL)
     return "inv_time";
 
@@ -102,17 +114,20 @@
 				(double)d->get_download().bytes_total() / (double)(1 << 20)));
   else
     buf += std::max(0, snprintf(buf, last - buf, "%6.1f / %6.1f MB",
 				(double)d->get_download().bytes_done() / (double)(1 << 20),
 				(double)d->get_download().bytes_total() / (double)(1 << 20)));
   
-  buf += std::max(0, snprintf(buf, last - buf, " Rate: %5.1f / %5.1f KB Uploaded: %.1f MB",
+  buf += std::max(0, snprintf(buf, last - buf, " Rate: %5.1f / %5.1f KB Uploaded: %7.1f MB ",
 			      (double)d->get_download().up_rate()->rate() / (1 << 10),
 			      (double)d->get_download().down_rate()->rate() / (1 << 10),
 			      (double)d->get_download().up_rate()->total() / (1 << 20)));
 
+  //buf += std::max(0, snprintf(buf, length, " Left: "));
+  buf = print_download_time_left(buf, length, d);
+
   return buf;
 }
 
 char*
 print_download_status(char* buf, unsigned int length, core::Download* d) {
   if (!d->get_download().is_active())
@@ -135,12 +150,27 @@
   else
     buf[0] = '\0';
 
   return buf;
 }
 
+char*
+print_download_time_left(char* buf, unsigned int length, core::Download* d) {
+  uint32_t rate;
+
+  if (!d->get_download().is_active() ||
+      (rate = d->get_download().down_rate()->rate()) < 512) {
+    buf += std::max(0, snprintf(buf, length, "--:--:--"));
+    return buf;
+  }
+  
+  time_t remaining = (d->get_download().bytes_total() - d->get_download().bytes_done()) / (rate & ~(uint32_t)(512 - 1));
+
+  return print_ddhhmm(buf, length, remaining);
+}
+
 // char*
 // print_entry_tags(char* buf, unsigned int length) {
   
 // }
 
 // char*
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/utils.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/utils.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/utils.h	2005-11-14 22:39:32.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/utils.h	2005-12-19 01:28:38.000000000 +0800
@@ -54,17 +54,19 @@
 
 namespace display {
 
 char*       print_string(char* buf, unsigned int length, char* str);
 
 char*       print_hhmmss(char* buf, unsigned int length, time_t t);
+char*       print_ddhhmm(char* buf, unsigned int length, time_t t);
 char*       print_ddmmyyyy(char* buf, unsigned int length, time_t t);
 
 char*       print_download_title(char* buf, unsigned int length, core::Download* d);
 char*       print_download_info(char* buf, unsigned int length, core::Download* d);
 char*       print_download_status(char* buf, unsigned int length, core::Download* d);
+char*       print_download_time_left(char* buf, unsigned int length, core::Download* d);
 
 char*       print_entry_tags(char* buf, unsigned int length);
 char*       print_entry_file(char* buf, unsigned int length, const torrent::Entry& entry);
 
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window.cc	2005-11-12 23:31:55.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window.cc	2005-12-16 03:39:29.000000000 +0800
@@ -47,27 +47,26 @@
 Window::Window(Canvas* c, bool d, int h) :
   m_canvas(c),
   m_active(true),
   m_dynamic(d),
   m_minHeight(h) {
 
-  m_taskUpdate.set_iterator(utils::displayScheduler.end());
-  m_taskUpdate.set_slot(sigc::mem_fun(*this, &Window::redraw));
+  m_taskUpdate.set_slot(rak::mem_fn(this, &Window::redraw));
 }
 
 Window::~Window() {
-  utils::displayScheduler.erase(&m_taskUpdate);
+  priority_queue_erase(&displayScheduler, &m_taskUpdate);
   delete m_canvas;
 }
 
 void
 Window::set_active(bool a) {
   if (a)
     mark_dirty();
   else
-    utils::displayScheduler.erase(&m_taskUpdate);
+    priority_queue_erase(&displayScheduler, &m_taskUpdate);
 
   m_active = a;
 }
 
 void
 Window::resize(int x, int y, int w, int h) {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_download_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_download_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_download_list.cc	2005-11-12 23:31:55.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_download_list.cc	2005-12-16 03:21:00.000000000 +0800
@@ -33,16 +33,18 @@
 //
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
+#include <rak/algorithm.h>
+
 #include "core/download.h"
-#include "rak/algorithm.h"
 
 #include "canvas.h"
+#include "globals.h"
 #include "utils.h"
 #include "window_download_list.h"
 
 namespace display {
 
 WindowDownloadList::WindowDownloadList(DList* l) :
@@ -55,13 +57,13 @@
 WindowDownloadList::~WindowDownloadList() {
   m_connChanged.disconnect();
 }
 
 void
 WindowDownloadList::redraw() {
-  utils::displayScheduler.insert(&m_taskUpdate, (utils::Timer::cache() + 1000000).round_seconds());
+  priority_queue_insert(&displayScheduler, &m_taskUpdate, (cachedTime + 1000000).round_seconds());
 
   m_canvas->erase();
 
   if (m_list->base().empty() || m_canvas->get_width() < 5)
     return;
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_download_statusbar.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_download_statusbar.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_download_statusbar.cc	2005-11-14 22:38:49.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_download_statusbar.cc	2005-12-20 05:59:52.000000000 +0800
@@ -36,12 +36,13 @@
 
 #include "config.h"
 
 #include <torrent/rate.h>
 
 #include "canvas.h"
+#include "globals.h"
 #include "utils.h"
 #include "window_download_statusbar.h"
 
 #include "core/download.h"
 
 namespace display {
@@ -50,31 +51,32 @@
   Window(new Canvas, false, 3),
   m_download(d) {
 }
 
 void
 WindowDownloadStatusbar::redraw() {
-  utils::displayScheduler.insert(&m_taskUpdate, (utils::Timer::cache() + 1000000).round_seconds());
+  priority_queue_insert(&displayScheduler, &m_taskUpdate, (cachedTime + 1000000).round_seconds());
 
   m_canvas->erase();
 
   char buffer[m_canvas->get_width() - 2];
   char* position;
   char* last = buffer + m_canvas->get_width() - 2;
 
   position = print_download_info(buffer, last - buffer, m_download);
   m_canvas->print(0, 0, "%s", buffer);
 
-  m_canvas->print(0, 1, "Peers: %i(%i) Min/Max: %i/%i Uploads: %i U/I: %i/%i",
+  m_canvas->print(0, 1, "Peers: %i(%i) Min/Max: %i/%i Uploads: %i U/I: %i/%i Failed: %i",
 		  (int)m_download->get_download().peers_connected(),
 		  (int)m_download->get_download().peers_not_connected(),
 		  (int)m_download->get_download().peers_min(),
 		  (int)m_download->get_download().peers_max(),
 		  (int)m_download->get_download().uploads_max(),
 		  (int)m_download->get_download().peers_currently_unchoked(),
-		  (int)m_download->get_download().peers_currently_interested());
+		  (int)m_download->get_download().peers_currently_interested(),
+		  (int)m_download->chunks_failed());
 
   position = print_download_status(buffer, last - buffer, m_download);
   m_canvas->print(0, 2, "[%c:%i] %s",
 		  m_download->get_download().is_tracker_busy() ? 'C' : ' ',
 		  (int)(m_download->get_download().tracker_timeout() / 1000000),
 		  buffer);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_file_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_file_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_file_list.cc	2005-11-12 23:31:54.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_file_list.cc	2005-12-16 03:21:00.000000000 +0800
@@ -34,16 +34,16 @@
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
 #include <stdexcept>
+#include <rak/algorithm.h>
 #include <torrent/path.h>
 
 #include "core/download.h"
-#include "rak/algorithm.h"
 
 #include "window_file_list.h"
 
 namespace display {
 
 WindowFileList::WindowFileList(core::Download* d, unsigned int* focus) :
@@ -51,13 +51,13 @@
   m_download(d),
   m_focus(focus) {
 }
 
 void
 WindowFileList::redraw() {
-  utils::displayScheduler.insert(&m_taskUpdate, (utils::Timer::cache() + 10 * 1000000).round_seconds());
+  priority_queue_insert(&displayScheduler, &m_taskUpdate, (cachedTime + 10 * 1000000).round_seconds());
   m_canvas->erase();
 
   if (m_download->get_download().size_file_entries() == 0 ||
       m_canvas->get_height() < 2)
     return;
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window.h	2005-11-12 23:31:55.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window.h	2005-12-20 01:12:11.000000000 +0800
@@ -34,17 +34,17 @@
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #ifndef RTORRENT_WINDOW_BASE_H
 #define RTORRENT_WINDOW_BASE_H
 
+#include <rak/timer.h>
 #include <sigc++/slot.h>
 
 #include "canvas.h"
-#include "utils/task.h"
-#include "utils/timer.h"
+#include "globals.h"
 
 namespace display {
 
 class Canvas;
 
 class Window {
@@ -54,15 +54,15 @@
   Window(Canvas* c = NULL, bool d = false, int h = 1);
 
   virtual ~Window();
 
   bool                is_active()                          { return m_active; }
   bool                is_dynamic()                         { return m_dynamic; }
-  bool                is_dirty()                           { return utils::displayScheduler.is_scheduled(&m_taskUpdate); }
+  bool                is_dirty()                           { return m_taskUpdate.is_queued(); }
 
-  //utils::Timer        get_next_draw()                      { return m_nextDraw; }
+  //utils::rak::timer   get_next_draw()                      { return m_nextDraw; }
 
   int                 get_min_height()                     { return m_minHeight; }
 
   bool                get_active()                         { return m_active; }
   void                set_active(bool a);
 
@@ -84,19 +84,19 @@
   Canvas*             m_canvas;
 
   bool                m_active;
   bool                m_dynamic;
   int                 m_minHeight;
 
-  utils::TaskItem     m_taskUpdate;
+  rak::priority_item  m_taskUpdate;
 };
 
 inline void
 Window::mark_dirty() {
-  utils::displayScheduler.erase(&m_taskUpdate);
-  utils::displayScheduler.insert(&m_taskUpdate, utils::Timer::cache());
+  priority_queue_erase(&displayScheduler, &m_taskUpdate);
+  priority_queue_insert(&displayScheduler, &m_taskUpdate, cachedTime + 1);
 }
 
 }
 
 #endif
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_http_queue.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_http_queue.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_http_queue.cc	2005-11-12 23:31:54.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_http_queue.cc	2005-12-16 03:21:00.000000000 +0800
@@ -55,13 +55,13 @@
   m_connInsert = m_queue->signal_insert().connect(sigc::mem_fun(*this, &WindowHttpQueue::receive_insert));
   m_connErase  = m_queue->signal_erase().connect(sigc::mem_fun(*this, &WindowHttpQueue::receive_erase));
 }
 
 void
 WindowHttpQueue::redraw() {
-  utils::displayScheduler.insert(&m_taskUpdate, (utils::Timer::cache() + 1000000).round_seconds());
+  priority_queue_insert(&displayScheduler, &m_taskUpdate, (cachedTime + 1000000).round_seconds());
 
   cleanup_list();
 
   if (m_container.empty()) {
     set_active(false);
     m_slotAdjust();
@@ -92,13 +92,13 @@
   }
 }
 
 void
 WindowHttpQueue::cleanup_list() {
   for (Container::iterator itr = m_container.begin(); itr != m_container.end();)
-    if (itr->m_http == NULL && itr->m_timer < utils::Timer::cache())
+    if (itr->m_http == NULL && itr->m_timer < cachedTime)
       itr = m_container.erase(itr);
     else
       ++itr;
 
   mark_dirty();
 }
@@ -144,12 +144,12 @@
 					 rak::equal(h, std::mem_fun_ref(&Node::get_http)));
 
   if (itr == m_container.end())
     throw std::logic_error("WindowHttpQueue::receive_erase(...) tried to remove an object we don't have");
 
   itr->m_http = NULL;
-  itr->m_timer = utils::Timer::cache() + 10000000;
+  itr->m_timer = cachedTime + 10000000;
 
   mark_dirty();
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_http_queue.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_http_queue.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_http_queue.h	2005-11-12 23:31:55.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_http_queue.h	2005-12-05 04:44:47.000000000 +0800
@@ -60,13 +60,13 @@
     Node(core::CurlGet* h, const std::string& n) : m_http(h), m_name(n) {}
 
     core::CurlGet* get_http() { return m_http; }
 
     core::CurlGet* m_http;
     std::string    m_name;
-    utils::Timer          m_timer;
+    rak::timer     m_timer;
   };
 
   typedef std::list<Node> Container;
 
   void                cleanup_list();
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_log.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_log.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_log.cc	2005-11-12 23:31:55.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_log.cc	2005-12-05 04:19:36.000000000 +0800
@@ -57,13 +57,13 @@
 WindowLog::~WindowLog() {
   m_connUpdate.disconnect();
 }
 
 WindowLog::iterator
 WindowLog::find_older() {
-  return m_log->find_older(utils::Timer::cache() - 60*1000000);
+  return m_log->find_older(cachedTime - 60*1000000);
 }
 
 void
 WindowLog::redraw() {
   m_canvas->erase();
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_log_complete.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_log_complete.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_log_complete.cc	2005-11-12 23:31:54.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_log_complete.cc	2005-12-05 04:19:36.000000000 +0800
@@ -55,13 +55,13 @@
 WindowLogComplete::~WindowLogComplete() {
   m_connUpdate.disconnect();
 }
 
 WindowLogComplete::iterator
 WindowLogComplete::find_older() {
-  return m_log->find_older(utils::Timer::cache() - 60*1000000);
+  return m_log->find_older(cachedTime - 60*1000000);
 }
 
 void
 WindowLogComplete::redraw() {
   m_canvas->erase();
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_peer_info.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_peer_info.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_peer_info.cc	2005-11-14 22:41:31.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_peer_info.cc	2005-12-16 03:21:00.000000000 +0800
@@ -54,13 +54,13 @@
   m_list(l),
   m_focus(f) {
 }
 
 void
 WindowPeerInfo::redraw() {
-  utils::displayScheduler.insert(&m_taskUpdate, (utils::Timer::cache() + 1000000).round_seconds());
+  priority_queue_insert(&displayScheduler, &m_taskUpdate, (cachedTime + 1000000).round_seconds());
   m_canvas->erase();
 
   int y = 0;
   torrent::Download d = m_download->get_download();
 
   m_canvas->print(0, y++, "Hash:    %s", utils::string_to_hex(d.info_hash()).c_str());
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_peer_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_peer_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_peer_list.cc	2005-11-14 22:41:52.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_peer_list.cc	2005-12-16 03:21:00.000000000 +0800
@@ -53,13 +53,13 @@
   m_list(l),
   m_focus(f) {
 }
 
 void
 WindowPeerList::redraw() {
-  utils::displayScheduler.insert(&m_taskUpdate, (utils::Timer::cache() + 1000000).round_seconds());
+  priority_queue_insert(&displayScheduler, &m_taskUpdate, (cachedTime + 1000000).round_seconds());
   m_canvas->erase();
 
   int x = 2;
   int y = 0;
 
   m_canvas->print(x, y, "DNS");     x += 16;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_statusbar.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_statusbar.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_statusbar.cc	2005-11-22 00:19:08.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_statusbar.cc	2005-12-16 03:21:00.000000000 +0800
@@ -53,13 +53,13 @@
   m_counter(0),
   m_core(c) {
 }
 
 void
 WindowStatusbar::redraw() {
-  utils::displayScheduler.insert(&m_taskUpdate, (utils::Timer::cache() + 1000000).round_seconds());
+  priority_queue_insert(&displayScheduler, &m_taskUpdate, (cachedTime + 1000000).round_seconds());
 
   m_canvas->erase();
 
   // TODO: Make a buffer with size = get_width?
   int pos = 0;
   char buf[128];
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_title.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_title.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_title.cc	2005-11-12 23:31:54.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_title.cc	2005-12-16 03:21:00.000000000 +0800
@@ -45,13 +45,13 @@
   Window(new Canvas, false, 1),
   m_title(s) {
 }
 
 void
 WindowTitle::redraw() {
-  utils::displayScheduler.insert(&m_taskUpdate, (utils::Timer::cache() + 1000000).round_seconds());
+  priority_queue_insert(&displayScheduler, &m_taskUpdate, (cachedTime + 1000000).round_seconds());
   m_canvas->erase();
 
   m_canvas->print(std::max(0, (m_canvas->get_width() - (int)m_title.size()) / 2 - 4), 0,
 		  "*** %s ***", m_title.c_str());
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_tracker_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_tracker_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/display/window_tracker_list.cc	2005-11-12 23:31:55.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/display/window_tracker_list.cc	2005-12-16 03:21:00.000000000 +0800
@@ -52,13 +52,13 @@
   m_focus(focus) {
 }
 
 void
 WindowTrackerList::redraw() {
   // TODO: Make this depend on tracker signal.
-  utils::displayScheduler.insert(&m_taskUpdate, (utils::Timer::cache() + 10 * 1000000).round_seconds());
+  priority_queue_insert(&displayScheduler, &m_taskUpdate, (cachedTime + 10 * 1000000).round_seconds());
   m_canvas->erase();
 
   int pos = 0;
 
   m_canvas->print( 2, pos, "Trackers:");
 
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src: globals.cc
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src: globals.h
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/main.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/main.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/main.cc	2005-11-12 23:31:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/main.cc	2005-12-17 10:46:44.000000000 +0800
@@ -59,35 +59,29 @@
 #include "core/manager.h"
 #include "display/canvas.h"
 #include "display/window.h"
 #include "display/manager.h"
 #include "input/bindings.h"
 
-#include "utils/task.h"
-#include "utils/timer.h"
 #include "utils/directory.h"
 
 #include "control.h"
+#include "globals.h"
 #include "signal_handler.h"
 #include "option_file.h"
 #include "option_handler.h"
 #include "option_handler_rules.h"
 #include "option_parser.h"
-
-int64_t utils::Timer::m_cache;
+#include "command_scheduler.h"
+#include "command_scheduler_item.h"
 
 uint32_t countTicks = 0;
 
 void do_panic(int signum);
 void print_help();
 
-namespace utils {
-  TaskScheduler taskScheduler;
-  TaskScheduler displayScheduler;
-}
-
 bool
 is_resized() {
   static int x = 0;
   static int y = 0;
   
   bool r = display::Canvas::get_screen_width() != x || display::Canvas::get_screen_height() != y;
@@ -97,73 +91,69 @@
 
   return r;
 }
 
 int
 parse_options(Control* c, OptionHandler* optionHandler, int argc, char** argv) {
-  OptionParser optionParser;
+  try {
+    OptionParser optionParser;
 
-  // Converted.
-  optionParser.insert_flag('h', sigc::ptr_fun(&print_help));
+    // Converted.
+    optionParser.insert_flag('h', sigc::ptr_fun(&print_help));
 
-  optionParser.insert_option('b', sigc::bind<0>(sigc::mem_fun(*optionHandler, &OptionHandler::process), "bind"));
-  optionParser.insert_option('d', sigc::bind<0>(sigc::mem_fun(*optionHandler, &OptionHandler::process), "directory"));
-  optionParser.insert_option('i', sigc::bind<0>(sigc::mem_fun(*optionHandler, &OptionHandler::process), "ip"));
-  optionParser.insert_option('p', sigc::bind<0>(sigc::mem_fun(*optionHandler, &OptionHandler::process), "port_range"));
-  optionParser.insert_option('s', sigc::bind<0>(sigc::mem_fun(*optionHandler, &OptionHandler::process), "session"));
+    optionParser.insert_option('b', sigc::bind<0>(sigc::mem_fun(*optionHandler, &OptionHandler::process), "bind"));
+    optionParser.insert_option('d', sigc::bind<0>(sigc::mem_fun(*optionHandler, &OptionHandler::process), "directory"));
+    optionParser.insert_option('i', sigc::bind<0>(sigc::mem_fun(*optionHandler, &OptionHandler::process), "ip"));
+    optionParser.insert_option('p', sigc::bind<0>(sigc::mem_fun(*optionHandler, &OptionHandler::process), "port_range"));
+    optionParser.insert_option('s', sigc::bind<0>(sigc::mem_fun(*optionHandler, &OptionHandler::process), "session"));
 
-  optionParser.insert_option_list('o', sigc::mem_fun(*optionHandler, &OptionHandler::process));
+    optionParser.insert_option_list('o', sigc::mem_fun(*optionHandler, &OptionHandler::process));
 
-  return optionParser.process(argc, argv);
-}
+    return optionParser.process(argc, argv);
 
-void
-initialize_option_handler(Control* c, OptionHandler* optionHandler) {
-  optionHandler->insert("max_peers",           new OptionHandlerInt(c, &apply_download_max_peers, &validate_download_peers));
-  optionHandler->insert("min_peers",           new OptionHandlerInt(c, &apply_download_min_peers, &validate_download_peers));
-  optionHandler->insert("max_uploads",         new OptionHandlerInt(c, &apply_download_max_uploads, &validate_download_peers));
-
-  optionHandler->insert("download_rate",       new OptionHandlerInt(c, &apply_global_download_rate, &validate_rate));
-  optionHandler->insert("upload_rate",         new OptionHandlerInt(c, &apply_global_upload_rate, &validate_rate));
-
-  optionHandler->insert("bind",                new OptionHandlerString(c, &apply_bind, &validate_ip));
-  optionHandler->insert("ip",                  new OptionHandlerString(c, &apply_ip, &validate_ip));
-  optionHandler->insert("port_range",          new OptionHandlerString(c, &apply_port_range, &validate_port_range));
-  optionHandler->insert("port_random",         new OptionHandlerString(c, &apply_port_random, &validate_yes_no));
-
-  optionHandler->insert("check_hash",          new OptionHandlerString(c, &apply_check_hash, &validate_yes_no));
-  optionHandler->insert("directory",           new OptionHandlerString(c, &apply_download_directory, &validate_directory));
-
-  optionHandler->insert("hash_read_ahead",     new OptionHandlerInt(c, &apply_hash_read_ahead, &validate_hash_read_ahead));
-  optionHandler->insert("hash_interval",       new OptionHandlerInt(c, &apply_hash_interval, &validate_hash_interval));
-  optionHandler->insert("hash_max_tries",      new OptionHandlerInt(c, &apply_hash_max_tries, &validate_hash_max_tries));
-  optionHandler->insert("max_open_files",      new OptionHandlerInt(c, &apply_max_open_files, &validate_fd));
-  optionHandler->insert("max_open_sockets",    new OptionHandlerInt(c, &apply_max_open_sockets, &validate_fd));
-
-  optionHandler->insert("connection_leech",    new OptionHandlerString(c, &apply_connection_leech, &validate_non_empty));
-  optionHandler->insert("connection_seed",     new OptionHandlerString(c, &apply_connection_seed, &validate_non_empty));
-
-  optionHandler->insert("session",             new OptionHandlerString(c, &apply_session_directory, &validate_directory));
-  optionHandler->insert("encoding_list",       new OptionHandlerString(c, &apply_encoding_list, &validate_non_empty));
-  optionHandler->insert("tracker_dump",        new OptionHandlerString(c, &apply_tracker_dump, &validate_yes_no));
-  optionHandler->insert("use_udp_trackers",    new OptionHandlerString(c, &apply_use_udp_trackers, &validate_yes_no));
+  } catch (torrent::input_error& e) {
+    throw std::runtime_error("Failed to parse command line option: " + std::string(e.what()));
+  }
 }
 
 void
-load_option_file(const std::string& filename, OptionHandler* optionHandler, bool require = false) {
-  std::fstream f(filename.c_str(), std::ios::in);
-
-  if (!f.is_open()) {
-    std::cout << "Could not open option file \"" << filename << "\"" << std::endl;
-    return;
-  }
-
-  OptionFile optionFile;
-
-  optionFile.slot_option(sigc::mem_fun(*optionHandler, &OptionHandler::process));
-  optionFile.process(&f);
+initialize_option_handler(Control* c, OptionHandler* optionHandler) {
+  optionHandler->insert("max_peers",           new OptionHandlerInt(c, &apply_download_max_peers));
+  optionHandler->insert("min_peers",           new OptionHandlerInt(c, &apply_download_min_peers));
+  optionHandler->insert("max_uploads",         new OptionHandlerInt(c, &apply_download_max_uploads));
+
+  optionHandler->insert("download_rate",       new OptionHandlerInt(c, &apply_global_download_rate));
+  optionHandler->insert("upload_rate",         new OptionHandlerInt(c, &apply_global_upload_rate));
+
+  optionHandler->insert("bind",                new OptionHandlerString(c, &apply_bind));
+  optionHandler->insert("ip",                  new OptionHandlerString(c, &apply_ip));
+  optionHandler->insert("port_range",          new OptionHandlerString(c, &apply_port_range));
+  optionHandler->insert("port_random",         new OptionHandlerString(c, &apply_port_random));
+
+  optionHandler->insert("check_hash",          new OptionHandlerString(c, &apply_check_hash));
+  optionHandler->insert("directory",           new OptionHandlerString(c, &apply_download_directory));
+
+  optionHandler->insert("hash_read_ahead",     new OptionHandlerInt(c, &apply_hash_read_ahead));
+  optionHandler->insert("hash_interval",       new OptionHandlerInt(c, &apply_hash_interval));
+  optionHandler->insert("hash_max_tries",      new OptionHandlerInt(c, &apply_hash_max_tries));
+  optionHandler->insert("max_open_files",      new OptionHandlerInt(c, &apply_max_open_files));
+  optionHandler->insert("max_open_sockets",    new OptionHandlerInt(c, &apply_max_open_sockets));
+
+  optionHandler->insert("umask",               new OptionHandlerOctal(c, &apply_umask));
+
+  optionHandler->insert("connection_leech",    new OptionHandlerString(c, &apply_connection_leech));
+  optionHandler->insert("connection_seed",     new OptionHandlerString(c, &apply_connection_seed));
+
+  optionHandler->insert("session",             new OptionHandlerString(c, &apply_session_directory));
+  optionHandler->insert("encoding_list",       new OptionHandlerString(c, &apply_encoding_list));
+  optionHandler->insert("tracker_dump",        new OptionHandlerString(c, &apply_tracker_dump));
+  optionHandler->insert("use_udp_trackers",    new OptionHandlerString(c, &apply_use_udp_trackers));
+
+  optionHandler->insert("http_proxy",          new OptionHandlerString(c, &apply_http_proxy));
+  optionHandler->insert("schedule",            new OptionHandlerString(c, &apply_schedule));
+  optionHandler->insert("schedule_remove",     new OptionHandlerString(c, &apply_schedule_remove));
 }
 
 void
 load_session_torrents(Control* c) {
   // Load session torrents.
   std::list<std::string> l = c->core()->get_download_store().get_formated_entries().make_list();
@@ -192,74 +182,102 @@
     f->commit();
   }
 }
 
 int
 main(int argc, char** argv) {
-  utils::Timer::update();
+  try {
 
-  OptionHandler optionHandler;
-  Control   uiControl;
+    cachedTime = rak::timer::current();
 
-  srandom(utils::Timer::cache().usec());
-  srand48(utils::Timer::cache().usec());
+    OptionHandler optionHandler;
+    Control       control;
+    
+    control.command_scheduler()->set_slot_command(rak::mem_fn(&optionHandler, &OptionHandler::process_command));
+    control.command_scheduler()->set_slot_error_message(rak::mem_fn(control.core(), &core::Manager::push_log));
 
-  initialize_option_handler(&uiControl, &optionHandler);
+    srandom(cachedTime.usec());
+    srand48(cachedTime.usec());
 
-  try {
+    initialize_option_handler(&control, &optionHandler);
+
+    OptionFile optionFile;
+    optionFile.slot_option(sigc::mem_fun(optionHandler, &OptionHandler::process));
 
     SignalHandler::set_ignore(SIGPIPE);
-    SignalHandler::set_handler(SIGINT,  sigc::mem_fun(uiControl, &Control::receive_shutdown));
+    SignalHandler::set_handler(SIGINT,  sigc::mem_fun(control, &Control::receive_shutdown));
     SignalHandler::set_handler(SIGSEGV, sigc::bind(sigc::ptr_fun(&do_panic), SIGSEGV));
     SignalHandler::set_handler(SIGBUS,  sigc::bind(sigc::ptr_fun(&do_panic), SIGBUS));
     SignalHandler::set_handler(SIGFPE,  sigc::bind(sigc::ptr_fun(&do_panic), SIGFPE));
 
-    uiControl.core()->initialize_first();
+    control.core()->initialize_first();
 
-    if (getenv("HOME"))
-      load_option_file(getenv("HOME") + std::string("/.rtorrent.rc"), &optionHandler);
+    if (getenv("HOME") && !optionFile.process_file(getenv("HOME") + std::string("/.rtorrent.rc")))
+      control.core()->get_log_important().push_front("Could not load \"~/.rtorrent.rc\".");
 
-    int firstArg = parse_options(&uiControl, &optionHandler, argc, argv);
+    int firstArg = parse_options(&control, &optionHandler, argc, argv);
 
-    uiControl.initialize();
+    control.initialize();
 
-    load_session_torrents(&uiControl);
-    load_arg_torrents(&uiControl, argv + firstArg, argv + argc);
+    // Just to make sure we did all the stuff on the queue before
+    // loading any torrents.
+    while (!taskScheduler.empty() && taskScheduler.top()->time() <= cachedTime) {
+      rak::priority_item* v = taskScheduler.top();
+      taskScheduler.pop();
 
-    uiControl.display()->adjust_layout();
+      v->clear_time();
+      v->call();
+    }
 
-    while (!uiControl.is_shutdown_completed()) {
+    load_session_torrents(&control);
+    load_arg_torrents(&control, argv + firstArg, argv + argc);
+
+    control.display()->adjust_layout();
+
+    while (!control.is_shutdown_completed()) {
       countTicks++;
 
-      utils::Timer::update();
-      utils::taskScheduler.execute(utils::Timer::cache());
+      cachedTime = rak::timer::current();
+
+//       std::list<rak::priority_item*> workQueue;
+
+//       std::copy(rak::queue_popper(taskScheduler, rak::bind2nd(std::mem_fun(&rak::priority_item::compare), cachedTime)),
+// 		rak::queue_popper(taskScheduler, rak::bind2nd(std::mem_fun(&rak::priority_item::compare), rak::timer())),
+// 		std::back_inserter(workQueue));
+//       std::for_each(workQueue.begin(), workQueue.end(), std::mem_fun(&rak::priority_item::clear_time));
+//       std::for_each(workQueue.begin(), workQueue.end(), std::mem_fun(&rak::priority_item::call));
+
+      while (!taskScheduler.empty() && taskScheduler.top()->time() <= cachedTime) {
+	rak::priority_item* v = taskScheduler.top();
+	taskScheduler.pop();
+
+	v->clear_time();
+	v->call();
+      }
 
       // This needs to be called every second or so. Currently done by
       // the throttle task in libtorrent.
-      if (!utils::displayScheduler.empty() &&
-	  utils::displayScheduler.get_next_timeout() <= utils::Timer::cache())
-	uiControl.display()->do_update();
+      if (!displayScheduler.empty() && displayScheduler.top()->time() <= cachedTime)
+	control.display()->do_update();
 
       // Do shutdown check before poll, not after.
-      uiControl.core()->get_poll_manager()->poll(!utils::taskScheduler.empty() ?
-						    utils::taskScheduler.get_next_timeout() - utils::Timer::cache() :
-						    60 * 1000000);
+      control.core()->get_poll_manager()->poll(!taskScheduler.empty() ? taskScheduler.top()->time() - cachedTime : 60 * 1000000);
     }
 
-    uiControl.cleanup();
+    control.cleanup();
 
   } catch (torrent::base_error& e) {
     display::Canvas::cleanup();
 
-    std::cout << "Caught exception from libtorrent: \"" << e.what() << '"' << std::endl;
+    std::cout << "Caught exception from libtorrent: " << e.what() << std::endl;
     return -1;
 
   } catch (std::exception& e) {
     display::Canvas::cleanup();
 
-    std::cout << "Caught exception: \"" << e.what() << '"' << std::endl;
+    std::cout << e.what() << std::endl;
     return -1;
   }
 
   return 0;
 }
 
@@ -285,22 +303,20 @@
 #else
   std::cout << "Stack dump not enabled." << std::endl;
 #endif
   
   if (signum == SIGBUS)
     std::cout << "A bus error propably means you ran out of diskspace." << std::endl;
-  
-  std::cout << "TO AVOID CORRUPT DOWNLOADS, RUN \"touch\" ON ALL DOWNLOADED FILES OR INITATE HASH RECHECK WITH ^R ON ALL TORRENTS." << std::endl;
 
   exit(-1);
 }
 
 void
 receive_tracker_dump(std::istream* s) {
   std::stringstream filename;
-  filename << "./tracker_dump." << utils::Timer::current().seconds();
+  filename << "./tracker_dump." << rak::timer::current().seconds();
 
   std::fstream out(filename.str().c_str(), std::ios::out | std::ios::trunc);
 
   if (!out.is_open())
     return;
   
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/Makefile.am /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/Makefile.am
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/Makefile.am	2005-11-12 23:31:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/Makefile.am	2005-12-16 10:53:37.000000000 +0800
@@ -12,14 +12,20 @@
 	$(top_srcdir)/src/core/libsub_core.a \
 	$(top_srcdir)/src/display/libsub_display.a \
 	$(top_srcdir)/src/input/libsub_input.a \
 	$(top_srcdir)/src/utils/libsub_utils.a
 
 rtorrent_SOURCES = \
+	command_scheduler.cc \
+	command_scheduler.h \
+	command_scheduler_item.cc \
+	command_scheduler_item.h \
 	control.cc \
 	control.h \
+	globals.cc \
+	globals.h \
 	main.cc \
 	option_file.cc \
 	option_file.h \
 	option_handler.cc \
 	option_handler.h \
 	option_handler_rules.cc \
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/Makefile.in	2005-11-22 00:57:32.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/Makefile.in	2005-12-16 10:53:53.000000000 +0800
@@ -49,16 +49,17 @@
 mkinstalldirs = $(install_sh) -d
 CONFIG_HEADER = $(top_builddir)/config.h
 CONFIG_CLEAN_FILES =
 am__installdirs = "$(DESTDIR)$(bindir)"
 binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
 PROGRAMS = $(bin_PROGRAMS)
-am_rtorrent_OBJECTS = control.$(OBJEXT) main.$(OBJEXT) \
-	option_file.$(OBJEXT) option_handler.$(OBJEXT) \
-	option_handler_rules.$(OBJEXT) option_parser.$(OBJEXT) \
-	signal_handler.$(OBJEXT)
+am_rtorrent_OBJECTS = command_scheduler.$(OBJEXT) \
+	command_scheduler_item.$(OBJEXT) control.$(OBJEXT) \
+	globals.$(OBJEXT) main.$(OBJEXT) option_file.$(OBJEXT) \
+	option_handler.$(OBJEXT) option_handler_rules.$(OBJEXT) \
+	option_parser.$(OBJEXT) signal_handler.$(OBJEXT)
 rtorrent_OBJECTS = $(am_rtorrent_OBJECTS)
 rtorrent_DEPENDENCIES = $(top_srcdir)/src/ui/libsub_ui.a \
 	$(top_srcdir)/src/core/libsub_core.a \
 	$(top_srcdir)/src/display/libsub_display.a \
 	$(top_srcdir)/src/input/libsub_input.a \
 	$(top_srcdir)/src/utils/libsub_utils.a
@@ -178,14 +179,20 @@
 	$(top_srcdir)/src/core/libsub_core.a \
 	$(top_srcdir)/src/display/libsub_display.a \
 	$(top_srcdir)/src/input/libsub_input.a \
 	$(top_srcdir)/src/utils/libsub_utils.a
 
 rtorrent_SOURCES = \
+	command_scheduler.cc \
+	command_scheduler.h \
+	command_scheduler_item.cc \
+	command_scheduler_item.h \
 	control.cc \
 	control.h \
+	globals.cc \
+	globals.h \
 	main.cc \
 	option_file.cc \
 	option_file.h \
 	option_handler.cc \
 	option_handler.h \
 	option_handler_rules.cc \
@@ -258,13 +265,16 @@
 mostlyclean-compile:
 	-rm -f *.$(OBJEXT)
 
 distclean-compile:
 	-rm -f *.tab.c
 
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/command_scheduler.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/command_scheduler_item.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/control.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/globals.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/main.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/option_file.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/option_handler.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/option_handler_rules.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/option_parser.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/signal_handler.Po@am__quote@
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/option_file.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/option_file.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/option_file.cc	2005-11-12 23:31:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/option_file.cc	2005-12-17 10:15:51.000000000 +0800
@@ -35,24 +35,41 @@
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
 #include <fstream>
 #include <stdexcept>
+#include <stdio.h>
+#include <torrent/exceptions.h>
 
 #include "option_file.h"
 
-void
-OptionFile::process(std::istream* stream) {
-  char buf[max_size_line];
+bool
+OptionFile::process_file(const std::string& filename) {
+  std::fstream file(filename.c_str(), std::ios::in);
+
+  if (!file.good())
+    return false;
+
+  int lineNumber = 0;
+  char buffer[max_size_line];
 
-  while (stream->good()) {
-    stream->getline(buf, max_size_line);
+  try {
 
-    parse_line(buf);
+    while (file.getline(buffer, max_size_line).good()) {
+      lineNumber++;
+      parse_line(buffer);
+    }
+
+  } catch (torrent::input_error& e) {
+    snprintf(buffer, max_size_line, "Error in option file: %s:%i: %s", filename.c_str(), lineNumber, e.what());
+
+    throw std::runtime_error(buffer);
   }
+
+  return true;
 }
 
 void
 OptionFile::parse_line(const char* line) {
   //const char* last = std::find(line, line + max_size_line, '\0');
 
@@ -63,16 +80,16 @@
   char key[64];
   char opt[512];
 
   opt[0] = '\0';
 
   // Check for empty lines, and options within "abc".
-  if ((result = std::sscanf(line, "%63s = \"%511[^\"]s", key, opt)) != 2 &&
+  if ((result = std::sscanf(line, "%63s = \"%511[^\"]", key, opt)) != 2 &&
       (result = std::sscanf(line, "%63s = %511s", key, opt)) != 2 &&
       result == 1)
-    throw std::runtime_error("Error parseing option file.");
+    throw torrent::input_error("Error parseing option file.");
 
   if (opt[0] == '"' && opt[1] == '"')
     opt[0] = '\0';
 
   if (result >= 1)
     m_slotOption(key, opt);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/option_file.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/option_file.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/option_file.h	2005-11-12 23:31:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/option_file.h	2005-11-23 03:44:29.000000000 +0800
@@ -34,29 +34,31 @@
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #ifndef RTORRENT_OPTION_FILE_H
 #define RTORRENT_OPTION_FILE_H
 
-#include <iosfwd>
 #include <string>
 #include <sigc++/slot.h>
 
 class OptionFile {
 public:
-  static const int max_size_key = 64;
-  static const int max_size_opt = 512;
+  static const int max_size_key = 128;
+  static const int max_size_opt = 1024;
   static const int max_size_line = max_size_key + max_size_opt + 64;
 
   typedef sigc::slot2<void, const std::string&, const std::string&> SlotStringPair;
   
-  void                slot_option(const SlotStringPair& s) { m_slotOption = s; }
+  // Returns false when the file doesn't exist or cannot be opened.
+  bool                process_file(const std::string& filename);
 
-  void                process(std::istream* stream);
+  void                slot_option(const SlotStringPair& s) { m_slotOption = s; }
 
 private:
   void                parse_line(const char* line);
 
+  static char*        fill_buffer(int fd, char* buffer, char* first, char* last);
+
   SlotStringPair      m_slotOption;
 };
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/option_handler.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/option_handler.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/option_handler.cc	2005-11-12 23:31:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/option_handler.cc	2005-12-17 04:42:05.000000000 +0800
@@ -36,12 +36,13 @@
 
 #include "config.h"
 
 #include <stdexcept>
 #include <sigc++/bind.h>
 #include <sigc++/hide.h>
+#include <torrent/exceptions.h>
 
 #include "option_handler.h"
 
 void
 OptionHandler::insert(const std::string& key, OptionHandlerBase* opt) {
   iterator itr = find(key);
@@ -75,10 +76,20 @@
 
 void
 OptionHandler::process(const std::string& key, const std::string& arg) const {
   const_iterator itr = find(key);
 
   if (itr == end())
-    throw std::runtime_error("Could not find option key matching \"" + key + "\"");
+    throw torrent::input_error("Could not find option key \"" + key + "\".");
 
   itr->second->process(key, arg);
 }
+
+void
+OptionHandler::process_command(const std::string& command) const {
+  std::string::size_type pos = command.find('=');
+
+  if (pos == std::string::npos)
+    throw torrent::input_error("Option handler could not find '=' in command.");
+
+  process(command.substr(0, pos), command.substr(pos + 1, std::string::npos));
+}
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/option_handler.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/option_handler.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/option_handler.h	2005-11-12 23:31:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/option_handler.h	2005-12-17 04:13:31.000000000 +0800
@@ -74,10 +74,14 @@
   // We take over ownership of opt.
   void                insert(const std::string& key, OptionHandlerBase* opt);
   void                erase(const std::string& key);
 
   void                clear();
 
+  // The caller must catch torrent::input_error in case of bad input.
   void                process(const std::string& key, const std::string& arg) const;
+
+  // Temporary.
+  void                process_command(const std::string& command) const;
 };
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/option_handler_rules.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/option_handler_rules.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/option_handler_rules.cc	2005-11-12 23:31:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/option_handler_rules.cc	2005-12-19 00:22:25.000000000 +0800
@@ -33,86 +33,55 @@
 //
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
+#include <cstdio>
 #include <arpa/inet.h>
-#include <torrent/torrent.h>
 #include <netinet/in.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <rak/string_manip.h>
+#include <torrent/exceptions.h>
+#include <torrent/torrent.h>
 
 #include "core/manager.h"
 #include "ui/root.h"
 #include "utils/directory.h"
 
 #include "control.h"
 #include "option_handler_rules.h"
+#include "command_scheduler.h"
+#include "command_scheduler_item.h"
 
 void receive_tracker_dump(std::istream* s);
 
-bool
-validate_ip(const std::string& arg) {
-  struct in_addr addr;
-
-  return inet_aton(arg.c_str(), &addr);
-}
-
-// We consider an empty string to be valid as this allows us to
-// disable options.
-bool
-validate_directory(const std::string& arg) {
-  //return arg.empty() || utils::Directory(arg).is_valid();
-  return true;
-}
-
-bool
-validate_port_range(const std::string& arg) {
-  int a, b;
-  
-  return std::sscanf(arg.c_str(), "%i-%i", &a, &b) == 2 &&
-    a <= b && a > 0 && b < (1 << 16);
-}
-
-bool
-validate_yes_no(const std::string& arg) {
-  return arg == "yes" || arg == "no";
-}
-
-bool
-validate_non_empty(const std::string& arg) {
-  return !arg.empty();
-}
-
-bool
-validate_download_peers(int arg) {
-  return arg > 0 && arg < (1 << 16);
-}
-
-bool
-validate_rate(int arg) {
-  return arg >= 0 && arg < (1 << 20);
-}
-
-bool
-validate_hash_read_ahead(int arg) {
-  return arg >= 1 && arg < 64;
-}
-
-bool
-validate_hash_interval(int arg) {
-  return arg >= 1 && arg < 1000;
+void
+OptionHandlerInt::process(const std::string& key, const std::string& arg) {
+  int a;
+    
+  if (std::sscanf(arg.c_str(), "%i", &a) != 1)
+    throw torrent::input_error("Invalid argument for \"" + key + "\": \"" + arg + "\", must be an integer.");
+    
+  m_apply(m_control, a);
 }
 
-bool
-validate_hash_max_tries(int arg) {
-  return arg >= 1 && arg < 20;
+void
+OptionHandlerOctal::process(const std::string& key, const std::string& arg) {
+  int a;
+    
+  if (std::sscanf(arg.c_str(), "%o", &a) != 1)
+    throw torrent::input_error("Invalid argument for \"" + key + "\": \"" + arg + "\", must be an octal.");
+    
+  m_apply(m_control, a);
 }
 
-bool
-validate_fd(int arg) {
-  return arg >= 1 && arg < (1 << 16);
+void
+OptionHandlerString::process(const std::string& key, const std::string& arg) {
+  m_apply(m_control, arg);
 }
 
 void
 apply_download_min_peers(Control* m, int arg) {
   m->core()->get_download_list().slot_map_insert()["1_min_peers"] = sigc::bind(sigc::mem_fun(&core::Download::call<void, uint32_t, &torrent::Download::set_peers_min>), arg);
 }
@@ -134,28 +103,35 @@
   else
     m->core()->get_download_list().slot_map_insert().erase("1_directory");
 }
 
 void
 apply_connection_leech(Control* m, const std::string& arg) {
+  core::Download::string_to_connection_type(arg);
   m->core()->get_download_list().slot_map_insert()["1_connection_leech"] = sigc::bind(sigc::mem_fun(&core::Download::set_connection_leech), arg);
 }
 
 void
 apply_connection_seed(Control* m, const std::string& arg) {
+  core::Download::string_to_connection_type(arg);
   m->core()->get_download_list().slot_map_insert()["1_connection_seed"] = sigc::bind(sigc::mem_fun(&core::Download::set_connection_seed), arg);
 }
 
 void
 apply_global_download_rate(Control* m, int arg) {
-  m->ui()->receive_down_throttle(arg);
+  m->ui()->set_down_throttle(arg);
 }
 
 void
 apply_global_upload_rate(Control* m, int arg) {
-  m->ui()->receive_up_throttle(arg);
+  m->ui()->set_up_throttle(arg);
+}
+
+void
+apply_umask(Control* m, int arg) {
+  umask(arg);
 }
 
 void
 apply_hash_read_ahead(Control* m, int arg) {
   torrent::set_hash_read_ahead(arg << 20);
 }
@@ -179,13 +155,21 @@
 apply_max_open_sockets(Control* m, int arg) {
   torrent::set_max_open_sockets(arg);
 }
 
 void
 apply_bind(Control* m, const std::string& arg) {
+  bool reopenListen = torrent::listen_port();
+
+  if (reopenListen)
+    torrent::listen_close();
+
   torrent::set_bind_address(arg);
+
+  if (reopenListen)
+    m->core()->listen_open();
 }
 
 void
 apply_ip(Control* m, const std::string& arg) {
   torrent::set_local_address(arg);
 }
@@ -228,15 +212,42 @@
     m->core()->set_check_hash(true);
   else
     m->core()->set_check_hash(false);
 }
 
 void
+apply_http_proxy(Control* m, const std::string& arg) {
+  m->core()->get_poll_manager()->get_http_stack()->set_http_proxy(arg);
+}
+
+void
 apply_session_directory(Control* m, const std::string& arg) {
   m->core()->get_download_store().use(arg);
 }
 
 void
 apply_encoding_list(Control* m, const std::string& arg) {
   torrent::encoding_list()->push_back(arg);
 }
 
+void
+apply_schedule(Control* m, const std::string& arg) {
+  int first;
+  int interval;
+  char key[21];
+  char command[2048];
+
+  if (std::sscanf(arg.c_str(), "%20[^,],%i,%i,%2047[^\n]", key, &first, &interval, command) != 4)
+    throw torrent::input_error("Invalid arguments to command.");
+
+  CommandSchedulerItem* item = *m->command_scheduler()->insert(rak::trim(std::string(key)));
+
+  item->set_command(rak::trim(std::string(command)));
+  item->set_interval(interval);
+
+  item->enable(first);
+}
+
+void
+apply_schedule_remove(Control* m, const std::string& arg) {
+  m->command_scheduler()->erase(m->command_scheduler()->find(rak::trim(arg)));
+}
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/option_handler_rules.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/option_handler_rules.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/option_handler_rules.h	2005-11-12 23:31:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/option_handler_rules.h	2005-12-17 07:56:58.000000000 +0800
@@ -45,36 +45,25 @@
 #include "core/download_slot_map.h"
 
 class Control;
 
 // Not pretty, but it is simple and easy to modify.
 
-bool validate_ip(const std::string& arg);
-bool validate_directory(const std::string& arg);
-bool validate_port_range(const std::string& arg);
-bool validate_yes_no(const std::string& arg);
-bool validate_non_empty(const std::string& arg);
-
-bool validate_download_peers(int arg);
-bool validate_rate(int arg);
-bool validate_hash_read_ahead(int arg);
-bool validate_hash_interval(int arg);
-bool validate_hash_max_tries(int arg);
-bool validate_fd(int arg);
-
 void apply_download_min_peers(Control* m, int arg);
 void apply_download_max_peers(Control* m, int arg);
 void apply_download_max_uploads(Control* m, int arg);
 void apply_download_directory(Control* m, const std::string& arg);
 
 void apply_connection_leech(Control* m, const std::string& arg);
 void apply_connection_seed(Control* m, const std::string& arg);
 
 void apply_global_download_rate(Control* m, int arg);
 void apply_global_upload_rate(Control* m, int arg);
 
+void apply_umask(Control* m, int arg);
+
 void apply_hash_read_ahead(Control* m, int arg);
 void apply_hash_interval(Control* m, int arg);
 void apply_hash_max_tries(Control* m, int arg);
 void apply_max_open_files(Control* m, int arg);
 void apply_max_open_sockets(Control* m, int arg);
 
@@ -83,55 +72,57 @@
 void apply_port_range(Control* m, const std::string& arg);
 void apply_port_random(Control* m, const std::string& arg);
 void apply_tracker_dump(Control* m, const std::string& arg);
 void apply_use_udp_trackers(Control* m, const std::string& arg);
 void apply_check_hash(Control* m, const std::string& arg);
 
+void apply_http_proxy(Control* m, const std::string& arg);
+
 void apply_session_directory(Control* m, const std::string& arg);
 void apply_encoding_list(Control* m, const std::string& arg);
 
+void apply_schedule(Control* m, const std::string& arg);
+void apply_schedule_remove(Control* m, const std::string& arg);
+
 class OptionHandlerInt : public OptionHandlerBase {
 public:
-  typedef bool (*Validate)(int);
   typedef void (*Apply)(Control*, int);
 
-  OptionHandlerInt(Control* c, Apply a, Validate v) :
-    m_control(c), m_apply(a), m_validate(v) {}
+  OptionHandlerInt(Control* c, Apply a) :
+    m_control(c), m_apply(a) {}
+
+  virtual void process(const std::string& key, const std::string& arg);
+
+private:
+  Control* m_control;
+  Apply        m_apply;
+};
+
+class OptionHandlerOctal : public OptionHandlerBase {
+public:
+  typedef void (*Apply)(Control*, int);
+
+  OptionHandlerOctal(Control* c, Apply a) :
+    m_control(c), m_apply(a) {}
 
-  virtual void process(const std::string& key, const std::string& arg) {
-    int a;
-    
-    if (std::sscanf(arg.c_str(), "%i", &a) != 1 ||
-	!m_validate(a))
-      throw std::runtime_error("Invalid argument for \"" + key + "\": \"" + arg + "\"");
-    
-    m_apply(m_control, a);
-  }
+  virtual void process(const std::string& key, const std::string& arg);
 
 private:
   Control* m_control;
   Apply        m_apply;
-  Validate     m_validate;
 };
 
 class OptionHandlerString : public OptionHandlerBase {
 public:
-  typedef bool (*Validate)(const std::string&);
   typedef void (*Apply)(Control*, const std::string&);
 
-  OptionHandlerString(Control* c, Apply a, Validate v) :
-    m_control(c), m_apply(a), m_validate(v) {}
+  OptionHandlerString(Control* c, Apply a) :
+    m_control(c), m_apply(a) {}
 
-  virtual void process(const std::string& key, const std::string& arg) {
-    if (!m_validate(arg))
-      throw std::runtime_error("Invalid argument for \"" + key + "\": \"" + arg + "\"");
-    
-    m_apply(m_control, arg);
-  }
+  virtual void process(const std::string& key, const std::string& arg);
 
 private:
   Control*     m_control;
   Apply        m_apply;
-  Validate     m_validate;
 };
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/download_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/ui/download_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/download_list.cc	2005-11-12 23:31:56.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/ui/download_list.cc	2005-12-20 01:13:36.000000000 +0800
@@ -82,14 +82,13 @@
   m_bindings(new input::Bindings)
 {
   m_uiArray[DISPLAY_DOWNLOAD_LIST] = new ElementDownloadList(&m_downloadList);
   m_uiArray[DISPLAY_LOG]           = new ElementLogComplete(&m_control->core()->get_log_complete());
   m_windowLog                      = new WLog(&m_control->core()->get_log_important());
 
-  m_taskUpdate.set_iterator(utils::taskScheduler.end());
-  m_taskUpdate.set_slot(sigc::mem_fun(*this, &DownloadList::task_update)),
+  m_taskUpdate.set_slot(rak::mem_fn(this, &DownloadList::task_update)),
 
   setup_keys();
   setup_input();
 }
 
 DownloadList::~DownloadList() {
@@ -109,13 +108,13 @@
 
 void
 DownloadList::activate() {
   if (is_active())
     throw std::logic_error("ui::Download::activate() called on an already activated object");
 
-  utils::taskScheduler.insert(&m_taskUpdate, utils::Timer::cache() + 1000000);
+  priority_queue_insert(&taskScheduler, &m_taskUpdate, cachedTime);
 
   m_windowTextInput->set_active(false);
 
   m_control->display()->push_front(m_windowTextInput);
   m_control->display()->push_front(m_windowHttpQueue);
   m_control->display()->push_front(m_windowLog);
@@ -136,13 +135,13 @@
     m_windowTextInput->get_input()->clear();
     receive_exit_input(true);
   }
 
   disable_display();
 
-  utils::taskScheduler.erase(&m_taskUpdate);
+  priority_queue_erase(&taskScheduler, &m_taskUpdate);
 
   m_control->display()->erase(m_window);
   m_control->display()->erase(m_windowTitle);
   m_control->display()->erase(m_windowTextInput);
   m_control->display()->erase(m_windowLog);
   m_control->display()->erase(m_windowHttpQueue);
@@ -301,13 +300,13 @@
 }
 
 void
 DownloadList::task_update() {
   m_windowLog->receive_update();
 
-  utils::taskScheduler.insert(&m_taskUpdate, (utils::Timer::cache() + 1000000).round_seconds());
+  priority_queue_insert(&taskScheduler, &m_taskUpdate, (cachedTime + 1000000).round_seconds());
 }
 
 void
 DownloadList::setup_keys() {
   (*m_bindings)['\x13']        = sigc::mem_fun(*this, &DownloadList::receive_start_download);
   (*m_bindings)['\x04']        = sigc::mem_fun(*this, &DownloadList::receive_stop_download);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/download_list.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/ui/download_list.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/download_list.h	2005-11-12 23:31:56.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/ui/download_list.h	2005-12-09 01:00:17.000000000 +0800
@@ -38,15 +38,16 @@
 #define RTORRENT_UI_DOWNLOAD_LIST_H
 
 #include <sigc++/slot.h>
 
 #include "core/download_list.h"
 #include "display/manager.h"
-#include "utils/task.h"
 #include "utils/list_focus.h"
 
+#include "globals.h"
+
 class Control;
 
 namespace input {
   class Bindings;
 }
 
@@ -134,13 +135,13 @@
 
   WTitle*             m_windowTitle;
   WLog*               m_windowLog;
   WInput*             m_windowTextInput;
   WHttp*              m_windowHttpQueue;
 
-  utils::TaskItem     m_taskUpdate;
+  rak::priority_item  m_taskUpdate;
 
   Download*           m_uiDownload;
 
   DList               m_downloadList;
 
   Control*            m_control;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/root.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/ui/root.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/root.cc	2005-11-12 23:31:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/ui/root.cc	2005-11-24 22:15:07.000000000 +0800
@@ -91,52 +91,60 @@
 }
 
 void
 Root::setup_keys() {
   m_control->input()->push_back(&m_bindings);
 
-  m_bindings['a']           = sigc::bind(sigc::mem_fun(*this, &Root::receive_up_throttle), 1);
-  m_bindings['z']           = sigc::bind(sigc::mem_fun(*this, &Root::receive_up_throttle), -1);
-  m_bindings['s']           = sigc::bind(sigc::mem_fun(*this, &Root::receive_up_throttle), 5);
-  m_bindings['x']           = sigc::bind(sigc::mem_fun(*this, &Root::receive_up_throttle), -5);
-  m_bindings['d']           = sigc::bind(sigc::mem_fun(*this, &Root::receive_up_throttle), 50);
-  m_bindings['c']           = sigc::bind(sigc::mem_fun(*this, &Root::receive_up_throttle), -50);
-
-  m_bindings['A']           = sigc::bind(sigc::mem_fun(*this, &Root::receive_down_throttle), 1);
-  m_bindings['Z']           = sigc::bind(sigc::mem_fun(*this, &Root::receive_down_throttle), -1);
-  m_bindings['S']           = sigc::bind(sigc::mem_fun(*this, &Root::receive_down_throttle), 5);
-  m_bindings['X']           = sigc::bind(sigc::mem_fun(*this, &Root::receive_down_throttle), -5);
-  m_bindings['D']           = sigc::bind(sigc::mem_fun(*this, &Root::receive_down_throttle), 50);
-  m_bindings['C']           = sigc::bind(sigc::mem_fun(*this, &Root::receive_down_throttle), -50);
+  m_bindings['a']           = sigc::bind(sigc::mem_fun(*this, &Root::adjust_up_throttle), 1);
+  m_bindings['z']           = sigc::bind(sigc::mem_fun(*this, &Root::adjust_up_throttle), -1);
+  m_bindings['s']           = sigc::bind(sigc::mem_fun(*this, &Root::adjust_up_throttle), 5);
+  m_bindings['x']           = sigc::bind(sigc::mem_fun(*this, &Root::adjust_up_throttle), -5);
+  m_bindings['d']           = sigc::bind(sigc::mem_fun(*this, &Root::adjust_up_throttle), 50);
+  m_bindings['c']           = sigc::bind(sigc::mem_fun(*this, &Root::adjust_up_throttle), -50);
+
+  m_bindings['A']           = sigc::bind(sigc::mem_fun(*this, &Root::adjust_down_throttle), 1);
+  m_bindings['Z']           = sigc::bind(sigc::mem_fun(*this, &Root::adjust_down_throttle), -1);
+  m_bindings['S']           = sigc::bind(sigc::mem_fun(*this, &Root::adjust_down_throttle), 5);
+  m_bindings['X']           = sigc::bind(sigc::mem_fun(*this, &Root::adjust_down_throttle), -5);
+  m_bindings['D']           = sigc::bind(sigc::mem_fun(*this, &Root::adjust_down_throttle), 50);
+  m_bindings['C']           = sigc::bind(sigc::mem_fun(*this, &Root::adjust_down_throttle), -50);
 
   m_bindings[KEY_RESIZE]    = sigc::mem_fun(*m_control->display(), &display::Manager::adjust_layout);
   m_bindings['\x11']        = sigc::mem_fun(*m_control, &Control::receive_shutdown);
 }
 
 void
-Root::receive_down_throttle(int t) {
+Root::set_down_throttle(unsigned int throttle) {
   if (m_windowStatusbar != NULL)
     m_windowStatusbar->mark_dirty();
 
-  torrent::set_down_throttle(std::max<int>(torrent::down_throttle() + t * 1024, 0));
+  torrent::set_down_throttle(throttle * 1024);
 }
 
 void
-Root::receive_up_throttle(int t) {
+Root::set_up_throttle(unsigned int throttle) {
   if (m_windowStatusbar != NULL)
     m_windowStatusbar->mark_dirty();
 
-  uint32_t throttle = std::max<int>(torrent::up_throttle() + t * 1024, 0);
-
-  torrent::set_up_throttle(throttle);
+  torrent::set_up_throttle(throttle * 1024);
 
   if (throttle == 0)
     torrent::set_max_unchoked(0);
 
-  else if (throttle <= 10 << 10)
-    torrent::set_max_unchoked(1 + throttle / (1 << 10));
+  else if (throttle <= 10)
+    torrent::set_max_unchoked(1 + throttle / 1);
 
   else
-    torrent::set_max_unchoked(10 + throttle / (5 << 10));
+    torrent::set_max_unchoked(10 + throttle / 5);
+}
+
+void
+Root::adjust_down_throttle(int throttle) {
+  set_down_throttle(std::max<int>(torrent::down_throttle() / 1024 + throttle, 0));
+}
+
+void
+Root::adjust_up_throttle(int throttle) {
+  set_up_throttle(std::max<int>(torrent::up_throttle() / 1024 + throttle, 0));
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/root.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/ui/root.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/ui/root.h	2005-11-12 23:31:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/ui/root.h	2005-11-24 22:11:03.000000000 +0800
@@ -57,14 +57,17 @@
 
   void                init(Control* c);
   void                cleanup();
 
   WStatusbar*         window_statusbar()            { return m_windowStatusbar; }
 
-  void                receive_down_throttle(int t);
-  void                receive_up_throttle(int t);
+  void                set_down_throttle(unsigned int throttle);
+  void                set_up_throttle(unsigned int throttle);
+
+  void                adjust_down_throttle(int throttle);
+  void                adjust_up_throttle(int throttle);
 
 private:
   void                setup_keys();
 
   Control*            m_control;
   DownloadList*       m_downloadList;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/utils/Makefile.am /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/utils/Makefile.am
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/utils/Makefile.am	2005-11-12 23:31:52.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/utils/Makefile.am	2005-12-09 00:24:04.000000000 +0800
@@ -4,14 +4,9 @@
 	directory.cc \
 	directory.h \
 	file_stat.cc \
 	file_stat.h \
 	list_focus.h \
 	parse.cc \
-	parse.h \
-	task.h \
-	task_item.h \
-	task_scheduler.cc \
-	task_scheduler.h \
-	timer.h
+	parse.h
 
 INCLUDES = -I$(srcdir) -I$(srcdir)/.. -I$(top_srcdir)
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/utils/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/utils/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/utils/Makefile.in	2005-11-22 00:57:33.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.1/src/utils/Makefile.in	2005-12-16 10:53:56.000000000 +0800
@@ -51,13 +51,13 @@
 LIBRARIES = $(noinst_LIBRARIES)
 AR = ar
 ARFLAGS = cru
 libsub_utils_a_AR = $(AR) $(ARFLAGS)
 libsub_utils_a_LIBADD =
 am_libsub_utils_a_OBJECTS = directory.$(OBJEXT) file_stat.$(OBJEXT) \
-	parse.$(OBJEXT) task_scheduler.$(OBJEXT)
+	parse.$(OBJEXT)
 libsub_utils_a_OBJECTS = $(am_libsub_utils_a_OBJECTS)
 DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
 depcomp = $(SHELL) $(top_srcdir)/depcomp
 am__depfiles_maybe = depfiles
 CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
@@ -158,18 +158,13 @@
 	directory.cc \
 	directory.h \
 	file_stat.cc \
 	file_stat.h \
 	list_focus.h \
 	parse.cc \
-	parse.h \
-	task.h \
-	task_item.h \
-	task_scheduler.cc \
-	task_scheduler.h \
-	timer.h
+	parse.h
 
 INCLUDES = -I$(srcdir) -I$(srcdir)/.. -I$(top_srcdir)
 all: all-am
 
 .SUFFIXES:
 .SUFFIXES: .cc .o .obj
@@ -216,13 +211,12 @@
 distclean-compile:
 	-rm -f *.tab.c
 
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/directory.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/file_stat.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/parse.Po@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/task_scheduler.Po@am__quote@
 
 .cc.o:
 @am__fastdepCXX_TRUE@	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
 @am__fastdepCXX_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
 @AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/utils: task.h
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/utils: task_item.h
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/utils: task_scheduler.cc
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/utils: task_scheduler.h
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.4.0/src/utils: timer.h
