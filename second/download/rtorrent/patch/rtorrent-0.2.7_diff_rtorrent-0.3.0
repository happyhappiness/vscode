diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/configure /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/configure
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/configure	2005-07-01 15:57:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/configure	2005-07-19 22:16:30.000000000 +0800
@@ -1,9 +1,9 @@
 #! /bin/sh
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.57 for rtorrent 0.2.7.
+# Generated by GNU Autoconf 2.57 for rtorrent 0.3.0.
 #
 # Report bugs to <jaris@ifi.uio.no>.
 #
 # Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002
 # Free Software Foundation, Inc.
 # This configure script is free software; the Free Software Foundation
@@ -265,14 +265,14 @@
 # only ac_max_sed_lines should be used.
 : ${ac_max_here_lines=38}
 
 # Identity of this package.
 PACKAGE_NAME='rtorrent'
 PACKAGE_TARNAME='rtorrent'
-PACKAGE_VERSION='0.2.7'
-PACKAGE_STRING='rtorrent 0.2.7'
+PACKAGE_VERSION='0.3.0'
+PACKAGE_STRING='rtorrent 0.3.0'
 PACKAGE_BUGREPORT='jaris@ifi.uio.no'
 
 ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO AMTAR install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM AWK SET_MAKE CXX CXXFLAGS LDFLAGS CPPFLAGS ac_ct_CXX EXEEXT OBJEXT DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CXXDEPMODE RANLIB ac_ct_RANLIB CC CFLAGS ac_ct_CC CCDEPMODE PKG_CONFIG STUFF_CFLAGS STUFF_LIBS LIBOBJS LTLIBOBJS'
 ac_subst_files=''
 
 # Initialize some variables set by options.
@@ -742,13 +742,13 @@
 # Report the --help message.
 #
 if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures rtorrent 0.2.7 to adapt to many kinds of systems.
+\`configure' configures rtorrent 0.3.0 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
 To assign environment variables (e.g., CC, CFLAGS...), specify them as
 VAR=VALUE.  See below for descriptions of some of the useful variables.
 
@@ -804,13 +804,13 @@
   --program-transform-name=PROGRAM   run sed PROGRAM on installed program names
 _ACEOF
 fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of rtorrent 0.2.7:";;
+     short | recursive ) echo "Configuration of rtorrent 0.3.0:";;
    esac
   cat <<\_ACEOF
 
 Optional Features:
   --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
@@ -893,13 +893,13 @@
   done
 fi
 
 test -n "$ac_init_help" && exit 0
 if $ac_init_version; then
   cat <<\_ACEOF
-rtorrent configure 0.2.7
+rtorrent configure 0.3.0
 generated by GNU Autoconf 2.57
 
 Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002
 Free Software Foundation, Inc.
 This configure script is free software; the Free Software Foundation
 gives unlimited permission to copy, distribute and modify it.
@@ -908,13 +908,13 @@
 fi
 exec 5>config.log
 cat >&5 <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by rtorrent $as_me 0.2.7, which was
+It was created by rtorrent $as_me 0.3.0, which was
 generated by GNU Autoconf 2.57.  Invocation command line was
 
   $ $0 $@
 
 _ACEOF
 {
@@ -1499,13 +1499,13 @@
 echo "$as_me: error: source directory already configured; run \"make distclean\" there first" >&2;}
    { (exit 1); exit 1; }; }
 fi
 
 # Define the identity of the package.
  PACKAGE=rtorrent
- VERSION=0.2.7
+ VERSION=0.3.0
 
 
 cat >>confdefs.h <<_ACEOF
 #define PACKAGE "$PACKAGE"
 _ACEOF
 
@@ -3793,37 +3793,37 @@
      echo "*** in your path, or set the PKG_CONFIG environment variable"
      echo "*** to the full path to pkg-config."
      echo "*** Or see http://www.freedesktop.org/software/pkgconfig to get pkg-config."
   else
      PKG_CONFIG_MIN_VERSION=0.9.0
      if $PKG_CONFIG --atleast-pkgconfig-version $PKG_CONFIG_MIN_VERSION; then
-        echo "$as_me:$LINENO: checking for sigc++-2.0 libtorrent >= 0.6.7" >&5
-echo $ECHO_N "checking for sigc++-2.0 libtorrent >= 0.6.7... $ECHO_C" >&6
+        echo "$as_me:$LINENO: checking for sigc++-2.0 libtorrent >= 0.7.0" >&5
+echo $ECHO_N "checking for sigc++-2.0 libtorrent >= 0.7.0... $ECHO_C" >&6
 
-        if $PKG_CONFIG --exists "sigc++-2.0 libtorrent >= 0.6.7" ; then
+        if $PKG_CONFIG --exists "sigc++-2.0 libtorrent >= 0.7.0" ; then
             echo "$as_me:$LINENO: result: yes" >&5
 echo "${ECHO_T}yes" >&6
             succeeded=yes
 
             echo "$as_me:$LINENO: checking STUFF_CFLAGS" >&5
 echo $ECHO_N "checking STUFF_CFLAGS... $ECHO_C" >&6
-            STUFF_CFLAGS=`$PKG_CONFIG --cflags "sigc++-2.0 libtorrent >= 0.6.7"`
+            STUFF_CFLAGS=`$PKG_CONFIG --cflags "sigc++-2.0 libtorrent >= 0.7.0"`
             echo "$as_me:$LINENO: result: $STUFF_CFLAGS" >&5
 echo "${ECHO_T}$STUFF_CFLAGS" >&6
 
             echo "$as_me:$LINENO: checking STUFF_LIBS" >&5
 echo $ECHO_N "checking STUFF_LIBS... $ECHO_C" >&6
-            STUFF_LIBS=`$PKG_CONFIG --libs "sigc++-2.0 libtorrent >= 0.6.7"`
+            STUFF_LIBS=`$PKG_CONFIG --libs "sigc++-2.0 libtorrent >= 0.7.0"`
             echo "$as_me:$LINENO: result: $STUFF_LIBS" >&5
 echo "${ECHO_T}$STUFF_LIBS" >&6
         else
             STUFF_CFLAGS=""
             STUFF_LIBS=""
             ## If we have a custom action on failure, don't print errors, but
             ## do set a variable so people can do so.
-            STUFF_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "sigc++-2.0 libtorrent >= 0.6.7"`
+            STUFF_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "sigc++-2.0 libtorrent >= 0.7.0"`
             echo $STUFF_PKG_ERRORS
         fi
 
 
 
      else
@@ -3833,14 +3833,14 @@
   fi
 
   if test $succeeded = yes; then
      CXXFLAGS="$CXXFLAGS $STUFF_CFLAGS $CURL_CFLAGS";
 		  LIBS="$LIBS $STUFF_LIBS $CURL_LIBS"
   else
-     { { echo "$as_me:$LINENO: error: Library requirements (sigc++-2.0 libtorrent >= 0.6.7) not met; consider adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a nonstandard prefix so pkg-config can find them." >&5
-echo "$as_me: error: Library requirements (sigc++-2.0 libtorrent >= 0.6.7) not met; consider adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a nonstandard prefix so pkg-config can find them." >&2;}
+     { { echo "$as_me:$LINENO: error: Library requirements (sigc++-2.0 libtorrent >= 0.7.0) not met; consider adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a nonstandard prefix so pkg-config can find them." >&5
+echo "$as_me: error: Library requirements (sigc++-2.0 libtorrent >= 0.7.0) not met; consider adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a nonstandard prefix so pkg-config can find them." >&2;}
    { (exit 1); exit 1; }; }
   fi
 
 
 
 cat >>confdefs.h <<\_ACEOF
@@ -4213,13 +4213,13 @@
   sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
 ## Running $as_me. ##
 _ASBOX
 } >&5
 cat >&5 <<_CSEOF
 
-This file was extended by rtorrent $as_me 0.2.7, which was
+This file was extended by rtorrent $as_me 0.3.0, which was
 generated by GNU Autoconf 2.57.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
   CONFIG_HEADERS  = $CONFIG_HEADERS
   CONFIG_LINKS    = $CONFIG_LINKS
   CONFIG_COMMANDS = $CONFIG_COMMANDS
@@ -4276,13 +4276,13 @@
 
 Report bugs to <bug-autoconf@gnu.org>."
 _ACEOF
 
 cat >>$CONFIG_STATUS <<_ACEOF
 ac_cs_version="\\
-rtorrent config.status 0.2.7
+rtorrent config.status 0.3.0
 configured by $0, generated by GNU Autoconf 2.57,
   with options \\"`echo "$ac_configure_args" | sed 's/[\\""\`\$]/\\\\&/g'`\\"
 
 Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001
 Free Software Foundation, Inc.
 This config.status script is free software; the Free Software Foundation
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/configure.ac /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/configure.ac
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/configure.ac	2005-06-29 04:50:31.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/configure.ac	2005-07-10 02:40:00.000000000 +0800
@@ -1,7 +1,7 @@
-AC_INIT(rtorrent, 0.2.7, jaris@ifi.uio.no)
+AC_INIT(rtorrent, 0.3.0, jaris@ifi.uio.no)
 
 AM_INIT_AUTOMAKE
 AM_CONFIG_HEADER(config.h)
 
 sinclude(scripts/checks.m4)
 sinclude(scripts/common.m4)
@@ -17,13 +17,13 @@
 AC_SEARCH_LIBS(wbkgdset, ncurses curses,,echo "*** The ncurses library is required!";exit 1)
 
 TORRENT_CHECK_EXECINFO()
 TORRENT_CHECK_CURL()
 TORRENT_OTFD()
 
-PKG_CHECK_MODULES(STUFF, sigc++-2.0 libtorrent >= 0.6.7,
+PKG_CHECK_MODULES(STUFF, sigc++-2.0 libtorrent >= 0.7.0,
 	          CXXFLAGS="$CXXFLAGS $STUFF_CFLAGS $CURL_CFLAGS";
 		  LIBS="$LIBS $STUFF_LIBS $CURL_LIBS")
 
 AC_DEFINE(HAVE_CONFIG_H, 1, true if config.h was included)
 
 AC_OUTPUT([
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/doc/faq.xml /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/doc/faq.xml
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/doc/faq.xml	2005-06-29 04:50:32.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/doc/faq.xml	2005-07-07 18:52:42.000000000 +0800
@@ -85,9 +85,22 @@
         application. There's no configuration files for keys yet, so
         modify rtorrent/src/ui/root.cc:56 to use whatever key you want
         for quitting.
       </para></answer>
     </qandaentry>
 
+    <qandaentry>
+      <question><para>
+        When I try downloading a torrent the client aborts (SIGABRT), what should I do?
+      </para></question>
+      <answer><para>
+        Make sure you arn't using "-fomit-frame-pointer" when
+        compiling libtorrent and rtorrent, this is known to produce
+        bad code for C++ exception handling. If this doesn't help, run
+        the client in gdb and use "bt -20" to get a backtrace. Send
+        this with a bug report.
+      </para></answer>
+    </qandaentry>
+
   </qandaset>
 
 </article>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/doc/rtorrent.rc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/doc/rtorrent.rc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/doc/rtorrent.rc	2005-07-06 18:34:36.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/doc/rtorrent.rc	2005-07-14 04:26:39.000000000 +0800
@@ -40,12 +40,15 @@
 #port_random = no
 
 # Check hash for finished torrents. Might be usefull until the bug is
 # fixed that causes lack of diskspace not to be properly reported.
 #check_hash = no
 
+# Set whetever the client should try to connect to UDP trackers.
+#use_udp_trackers = yes
+
 #
 # Do not modify the following parameters unless you know what you're doing.
 #
 
 # Hash read-ahead controls how many MB to request the kernel to read
 # ahead. If the value is too low the disk may not be fully utilized,
@@ -64,12 +67,13 @@
 # Max number of files to keep open simultaniously.
 #max_open_files = 128
 
 # Number of sockets to simultaneously keep open.
 #max_open_sockets = <no default>
 
-# Dump data received from trackers to the files "./tracker_dump.<time>".
+# Dump data received from trackers to the files
+# "./tracker_dump.<time>".
 #tracker_dump = no
 
 # Change the interval between each throttle tick, in milliseconds. In
 # the range 1-5000 ms.
 #throttle_interval = 1000
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/rak/functional.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/rak/functional.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/rak/functional.h	2005-07-02 04:45:12.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/rak/functional.h	2005-07-10 02:40:00.000000000 +0800
@@ -225,12 +225,18 @@
 struct call_delete : public std::unary_function<T*, void> {
   void operator () (T* t) {
     delete t;
   }
 };
 
+template <typename T>
+inline void
+call_delete_func(T* t) {
+  delete t;
+}
+
 template <typename Operation>
 class bind1st_t : public std::unary_function<typename Operation::second_argument_type,
 					     typename Operation::result_type> {
 protected:
   typedef typename reference_fix<typename Operation::first_argument_type>::type value_type;
   typedef typename reference_fix<typename Operation::second_argument_type>::type argument_type;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/README /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/README
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/README	2005-07-02 04:11:44.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/README	2005-07-10 02:40:00.000000000 +0800
@@ -11,13 +11,22 @@
 USAGE
 
  See the man page or website for instructions.
 
 LICENSE
 
- GNU GPL, see COPYING.
+ GNU GPL, see COPYING. "libtorrent/src/utils/sha_fast.{cc,h}" is
+originally from the Mozilla NSS and is under a triple license; MPL,
+LGPL and GPL. An exception to non-NSS code has been added for linking
+to OpenSSL as requested by Debian, though the author considers that
+library to be part of the Operative System and thus linking is allowed
+according to the GPL.
+
+ Use whatever fits your purpose, the code required to compile with
+Mozilla's NSS implementation of SHA1 has been retained and can be
+compiled if the user wishes to avoid using OpenSSL.
 
 DEPENDENCIES
 
   libcurl >= 7.12.0
   ncurses
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/download.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/download.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/download.cc	2005-07-02 04:45:24.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/download.cc	2005-07-14 04:26:39.000000000 +0800
@@ -74,12 +74,19 @@
   m_download.set_root_dir(d +
 			  (!d.empty() && *d.rbegin() != '/' ? "/" : "") +
 			  (m_download.get_entry_size() > 1 ? m_download.get_name() : ""));
 }
 
 void
+Download::enable_udp_trackers(bool state) {
+  for (int i = 0, last = m_download.get_tracker_size(); i < last; ++i)
+    if (m_download.get_tracker(i).get_type() == torrent::Tracker::TRACKER_UDP)
+      m_download.get_tracker(i).enable(state);
+}
+
+void
 Download::release_download() {
   if (!m_download.is_valid())
     return;
 
   m_connTrackerSucceded.disconnect();
   m_connTrackerFailed.disconnect();
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core: download_factory.cc
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core: download_factory.h
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/download.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/download.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/download.h	2005-07-02 04:45:11.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/download.h	2005-07-19 03:10:24.000000000 +0800
@@ -54,22 +54,25 @@
   void               start();
 
   void               set_download(torrent::Download d);
   void               release_download();
 
   torrent::Download& get_download()                  { return m_download; }
+  const torrent::Download& get_download() const      { return m_download; }
   std::string        get_hash()                      { return m_download.get_hash(); }
-  torrent::Bencode&  get_bencode()                   { return torrent::download_bencode(m_download.get_hash()); }
+  torrent::Bencode&  get_bencode()                   { return m_download.get_bencode(); }
   
   const std::string& get_message()                   { return m_message; }
 
   void               set_root_directory(const std::string& d);
 
   void               set_connection_leech(const std::string& name) { m_connectionLeech = name; }
   void               set_connection_seed(const std::string& name)  { m_connectionSeed = name; }
 
+  void               enable_udp_trackers(bool state);
+
   // Helper functions for calling functions in torrent::Download
   // through sigc++.
   template <typename Ret, Ret (torrent::Download::*func)()>
   void               call()                                                { (m_download.*func)(); }
 
   template <typename Ret, typename Arg1, Ret (torrent::Download::*func)(Arg1)>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/download_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/download_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/download_list.cc	2005-07-06 18:34:36.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/download_list.cc	2005-07-10 02:39:59.000000000 +0800
@@ -46,13 +46,13 @@
 #include "download_list.h"
 
 namespace core {
 
 DownloadList::iterator
 DownloadList::insert(std::istream* str) {
-  torrent::Download d = torrent::download_create(str);
+  torrent::Download d = torrent::download_add(str);
 
   iterator itr = Base::insert(end(), new Download);
   (*itr)->set_download(d);
   (*itr)->get_download().signal_download_done(sigc::bind(sigc::mem_fun(*this, &DownloadList::finished), *itr));
 
   m_slotMapInsert.for_each(*itr);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/download_slot_map.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/download_slot_map.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/download_slot_map.h	2005-07-02 04:45:11.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/download_slot_map.h	2005-07-14 04:26:39.000000000 +0800
@@ -47,14 +47,14 @@
 
 class DownloadSlotMap : public std::map<std::string, sigc::slot1<void, Download*> > {
 public:
   typedef sigc::slot1<void, Download*>        SlotDownload;
   typedef std::map<std::string, SlotDownload> Base;
   
-  void                insert(const std::string& key, SlotDownload s)    { Base::operator[](key) = s; }
-  void                erase(const std::string& key) {}
+  void                insert(const std::string& key, SlotDownload s) { Base::operator[](key) = s; }
+  void                erase(const std::string& key)                  { Base::erase(key); }
 
   void                for_each(Download* d);
 };
 
 inline void
 DownloadSlotMap::for_each(Download* d) {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/download_store.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/download_store.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/download_store.cc	2005-07-02 06:33:33.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/download_store.cc	2005-07-19 03:10:24.000000000 +0800
@@ -64,13 +64,13 @@
 
   std::fstream f(create_filename(d).c_str(), std::ios::out | std::ios::trunc);
 
   if (!f.is_open())
     throw std::runtime_error("core::DownloadStore::save(...) could not open file");
 
-  f << torrent::download_bencode(d->get_hash());
+  f << d->get_bencode();
 
   if (f.fail())
     throw std::runtime_error("core::DownloadStore::save(...) could not write torrent");
 }
 
 void
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/http_queue.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/http_queue.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/http_queue.cc	2005-07-02 04:45:24.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/http_queue.cc	2005-07-10 02:39:59.000000000 +0800
@@ -46,40 +46,41 @@
 #include "http_queue.h"
 #include "curl_get.h"
 
 namespace core {
 
 HttpQueue::iterator
-HttpQueue::insert(const std::string& url) {
+HttpQueue::insert(const std::string& url, std::iostream* s) {
   std::auto_ptr<CurlGet> h(m_slotFactory());
-  std::auto_ptr<std::stringstream> s(new std::stringstream);
+  //std::auto_ptr<std::stringstream> s(new std::stringstream);
   
   h->set_url(url);
-  h->set_stream(s.get());
+  //h->set_stream(s.get());
+  h->set_stream(s);
   h->set_user_agent("rtorrent/" VERSION);
 
   iterator itr = Base::insert(end(), h.get());
 
   h->signal_done().connect(sigc::bind(sigc::mem_fun(this, &HttpQueue::erase), itr));
   h->signal_failed().connect(sigc::bind<0>(sigc::hide(sigc::mem_fun(this, &HttpQueue::erase)), itr));
 
   (*itr)->start();
 
   h.release();
-  s.release();
+  //s.release();
 
   m_signalInsert.emit(*itr);
 
   return itr;
 }
 
 void
 HttpQueue::erase(iterator itr) {
   m_signalErase.emit(*itr);
 
-  delete (*itr)->get_stream();
+  //delete (*itr)->get_stream();
   delete *itr;
 
   Base::erase(itr);
 }
 
 void
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/http_queue.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/http_queue.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/http_queue.h	2005-07-02 04:45:11.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/http_queue.h	2005-07-10 02:39:59.000000000 +0800
@@ -66,13 +66,16 @@
 
   HttpQueue() {}
   ~HttpQueue() { clear(); }
 
   // Note that any slots connected to the CurlGet signals must be
   // pushed in front of the erase slot added by HttpQueue::insert.
-  iterator    insert(const std::string& url);
+  //
+  // Consider adding a flag to indicate whetever HttpQueue should
+  // delete the stream.
+  iterator    insert(const std::string& url, std::iostream* s);
   void        erase(iterator itr);
 
   void        clear();
 
   void        slot_factory(SlotFactory s) { m_slotFactory = s; }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/Makefile.am /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/Makefile.am
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/Makefile.am	2005-06-29 04:50:29.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/Makefile.am	2005-07-10 02:39:59.000000000 +0800
@@ -4,12 +4,14 @@
 	curl_get.cc \
 	curl_get.h \
 	curl_stack.cc \
 	curl_stack.h \
 	download.cc \
 	download.h \
+	download_factory.cc \
+	download_factory.h \
 	download_list.cc \
 	download_list.h \
 	download_slot_map.h \
 	download_store.cc \
 	download_store.h \
 	hash_queue.cc \
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/Makefile.in	2005-06-29 05:42:33.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/Makefile.in	2005-07-19 22:16:29.000000000 +0800
@@ -82,12 +82,14 @@
 	curl_get.cc \
 	curl_get.h \
 	curl_stack.cc \
 	curl_stack.h \
 	download.cc \
 	download.h \
+	download_factory.cc \
+	download_factory.h \
 	download_list.cc \
 	download_list.h \
 	download_slot_map.h \
 	download_store.cc \
 	download_store.h \
 	hash_queue.cc \
@@ -109,27 +111,28 @@
 CONFIG_CLEAN_FILES =
 LIBRARIES = $(noinst_LIBRARIES)
 
 libsub_core_a_AR = $(AR) cru
 libsub_core_a_LIBADD =
 am_libsub_core_a_OBJECTS = curl_get.$(OBJEXT) curl_stack.$(OBJEXT) \
-	download.$(OBJEXT) download_list.$(OBJEXT) \
-	download_store.$(OBJEXT) hash_queue.$(OBJEXT) \
-	http_queue.$(OBJEXT) log.$(OBJEXT) manager.$(OBJEXT) \
-	poll.$(OBJEXT)
+	download.$(OBJEXT) download_factory.$(OBJEXT) \
+	download_list.$(OBJEXT) download_store.$(OBJEXT) \
+	hash_queue.$(OBJEXT) http_queue.$(OBJEXT) log.$(OBJEXT) \
+	manager.$(OBJEXT) poll.$(OBJEXT)
 libsub_core_a_OBJECTS = $(am_libsub_core_a_OBJECTS)
 
 DEFS = @DEFS@
 DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
 CPPFLAGS = @CPPFLAGS@
 LDFLAGS = @LDFLAGS@
 LIBS = @LIBS@
 depcomp = $(SHELL) $(top_srcdir)/depcomp
 am__depfiles_maybe = depfiles
 @AMDEP_TRUE@DEP_FILES = ./$(DEPDIR)/curl_get.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/curl_stack.Po ./$(DEPDIR)/download.Po \
+@AMDEP_TRUE@	./$(DEPDIR)/download_factory.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/download_list.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/download_store.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/hash_queue.Po ./$(DEPDIR)/http_queue.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/log.Po ./$(DEPDIR)/manager.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/poll.Po
 CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
@@ -172,12 +175,13 @@
 distclean-compile:
 	-rm -f *.tab.c
 
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/curl_get.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/curl_stack.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/download.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/download_factory.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/download_list.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/download_store.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hash_queue.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/http_queue.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/log.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/manager.Po@am__quote@
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/manager.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/manager.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/manager.cc	2005-07-06 18:34:36.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/manager.cc	2005-07-19 03:10:24.000000000 +0800
@@ -38,12 +38,14 @@
 
 #include <stdexcept>
 #include <cstdio>
 #include <cstring>
 #include <fstream>
 #include <istream>
+#include <unistd.h>
+#include <sys/select.h>
 #include <sigc++/bind.h>
 #include <sigc++/hide.h>
 #include <torrent/bencode.h>
 #include <torrent/exceptions.h>
 
 #include "download.h"
@@ -54,46 +56,60 @@
 
 static void
 connect_signal_network_log(Download* d, torrent::Download::SlotString s) {
   d->get_download().signal_network_log(s);
 }
 
+static void
+connect_signal_tracker_log(Download* d, torrent::Download::SlotString s) {
+  d->get_download().signal_tracker_failed(s);
+}
+
 void
 Manager::initialize() {
   torrent::Http::set_factory(m_poll.get_http_factory());
   m_httpQueue.slot_factory(m_poll.get_http_factory());
 
   CurlStack::init();
   listen_open();
 
+  if (torrent::get_max_open_files() + torrent::get_max_open_sockets() + 32 > FD_SETSIZE) {
+    m_logImportant.push_front("Warning: Max open sockets and files exceeds FD_SETSIZE");
+    m_logComplete.push_front("Warning: Max open sockets and files exceeds FD_SETSIZE");
+  }    
+
+  if (torrent::get_max_open_files() + torrent::get_max_open_sockets() + 32 > (unsigned int)sysconf(_SC_OPEN_MAX)) {
+    m_logImportant.push_front("Warning: Max open sockets and files exceeds _SC_OPEN_MAX");
+    m_logComplete.push_front("Warning: Max open sockets and files exceeds _SC_OPEN_MAX");
+  }
+
   // Register slots to be called when a download is inserted/erased,
   // opened or closed.
-  m_downloadList.slot_map_insert().insert("0_initialize_bencode",  sigc::mem_fun(*this, &Manager::initialize_bencode));
-  m_downloadList.slot_map_insert().insert("1_connect_network_log", sigc::bind(sigc::ptr_fun(&connect_signal_network_log), sigc::mem_fun(m_logComplete, &Log::push_front)));
-  m_downloadList.slot_map_insert().insert("3_manager_inserted",    sigc::mem_fun(*this, &Manager::receive_download_inserted));
-  m_downloadList.slot_map_insert().insert("4_store_save",          sigc::mem_fun(m_downloadStore, &DownloadStore::save));
+  m_downloadList.slot_map_insert()["0_initialize_bencode"]  = sigc::mem_fun(*this, &Manager::initialize_bencode);
+  m_downloadList.slot_map_insert()["1_connect_network_log"] = sigc::bind(sigc::ptr_fun(&connect_signal_network_log), sigc::mem_fun(m_logComplete, &Log::push_front));
+  m_downloadList.slot_map_insert()["1_connect_tracker_log"] = sigc::bind(sigc::ptr_fun(&connect_signal_tracker_log), sigc::mem_fun(m_logComplete, &Log::push_front));
+  //m_downloadList.slot_map_insert()["1_enable_udp_trackers"] = sigc::bind(sigc::mem_fun(&core::Download::enable_udp_trackers), true);
 
-  m_downloadList.slot_map_erase().insert("1_hash_queue_remove",    sigc::mem_fun(m_hashQueue, &HashQueue::remove));
-  m_downloadList.slot_map_erase().insert("1_store_remove",         sigc::mem_fun(m_downloadStore, &DownloadStore::remove));
+  m_downloadList.slot_map_erase()["1_hash_queue_remove"]    = sigc::mem_fun(m_hashQueue, &HashQueue::remove);
+  m_downloadList.slot_map_erase()["1_store_remove"]         = sigc::mem_fun(m_downloadStore, &DownloadStore::remove);
 
-  //m_downloadList.slot_map_open().insert("1_download_open",         sigc::mem_fun(&Download::open));
-  m_downloadList.slot_map_open().insert("1_download_open",         sigc::mem_fun(&Download::call<void, &torrent::Download::open>));
+  m_downloadList.slot_map_open()["1_download_open"]         = sigc::mem_fun(&Download::call<void, &torrent::Download::open>);
 
   // Currently does not call stop, might want to add a function that
   // checks if we're running, and if so stop?
-  m_downloadList.slot_map_close().insert("1_hash_queue_remove",    sigc::mem_fun(m_hashQueue, &HashQueue::remove));
-  m_downloadList.slot_map_close().insert("2_download_close",       sigc::mem_fun(&Download::call<void, &torrent::Download::close>));
+  m_downloadList.slot_map_close()["1_hash_queue_remove"]    = sigc::mem_fun(m_hashQueue, &HashQueue::remove);
+  m_downloadList.slot_map_close()["2_download_close"]       = sigc::mem_fun(&Download::call<void, &torrent::Download::close>);
 
-  m_downloadList.slot_map_start().insert("1_download_start",       sigc::mem_fun(&Download::start));
+  m_downloadList.slot_map_start()["1_download_start"]       = sigc::mem_fun(&Download::start);
 
-  m_downloadList.slot_map_stop().insert("1_download_stop",         sigc::mem_fun(&Download::call<void, &torrent::Download::stop>));
-  m_downloadList.slot_map_stop().insert("2_hash_resume_save",      sigc::mem_fun(&Download::call<void, &torrent::Download::hash_resume_save>));
-  m_downloadList.slot_map_stop().insert("3_store_save",            sigc::mem_fun(m_downloadStore, &DownloadStore::save));
+  m_downloadList.slot_map_stop()["1_download_stop"]         = sigc::mem_fun(&Download::call<void, &torrent::Download::stop>);
+  m_downloadList.slot_map_stop()["2_hash_resume_save"]      = sigc::mem_fun(&Download::call<void, &torrent::Download::hash_resume_save>);
+  m_downloadList.slot_map_stop()["3_store_save"]            = sigc::mem_fun(m_downloadStore, &DownloadStore::save);
 
-  m_downloadList.slot_map_finished().insert("1_download_done",     sigc::bind(sigc::mem_fun(*this, &Manager::receive_download_done), true));
-  m_downloadList.slot_map_finished().insert("2_receive_finished",  sigc::mem_fun(&Download::receive_finished));
+  m_downloadList.slot_map_finished()["1_download_done"]     = sigc::mem_fun(*this, &Manager::receive_download_done);
+  m_downloadList.slot_map_finished()["2_receive_finished"]  = sigc::mem_fun(&Download::receive_finished);
 }
 
 void
 Manager::cleanup() {
   // Need to disconnect log signals? Not really since we won't receive
   // any more.
@@ -109,29 +125,32 @@
 		  std::bind1st(std::mem_fun(&DownloadList::stop), &m_downloadList));
   else
     std::for_each(m_downloadList.begin(), m_downloadList.end(),
 		  std::bind1st(std::mem_fun(&DownloadList::close), &m_downloadList));
 }
 
-void
-Manager::insert(std::string uri) {
-  if (std::strncmp(uri.c_str(), "http://", 7) == 0) {
-    create_http(uri);
-  } else {
-    std::fstream f(uri.c_str(), std::ios::in);
-    create_final(&f);
+Manager::DListItr
+Manager::insert(std::istream* s) {
+  try {
+    return m_downloadList.insert(s);
+
+  } catch (torrent::local_error& e) {
+    m_logImportant.push_front(e.what());
+    m_logComplete.push_front(e.what());
+
+    return m_downloadList.end();
   }
 }
 
 Manager::DListItr
 Manager::erase(DListItr itr) {
   if ((*itr)->get_download().is_active())
     throw std::logic_error("core::Manager::erase(...) called on an active download");
 
-  if (!(*itr)->get_download().is_open())
-    throw std::logic_error("core::Manager::erase(...) called on an closed download");
+//   if (!(*itr)->get_download().is_open())
+//     throw std::logic_error("core::Manager::erase(...) called on an closed download");
 
   return m_downloadList.erase(itr);
 }  
 
 void
 Manager::start(Download* d) {
@@ -144,13 +163,13 @@
     if (!d->get_download().is_open())
       m_downloadList.open(d);
 
     if (d->get_download().is_hash_checked())
       m_downloadList.start(d);
     else
-      // This can cause infinit loops.
+      // This can cause infinit loops?
       m_hashQueue.insert(d, sigc::bind(sigc::mem_fun(m_downloadList, &DownloadList::start), d));
 
   } catch (torrent::local_error& e) {
     m_logImportant.push_front(e.what());
     m_logComplete.push_front(e.what());
   }
@@ -185,14 +204,14 @@
     m_logImportant.push_front(e.what());
     m_logComplete.push_front(e.what());
   }
 }  
 
 void
-Manager::receive_download_done(Download* d, bool check_hash) {
-  if (check_hash) {
+Manager::receive_download_done(Download* d) {
+  if (m_checkHash) {
     // Start the hash checking, send completed to tracker after
     // finishing.
     prepare_hash_check(d);
 
     // TODO: Need to restart the torrent.
     m_hashQueue.insert(d, sigc::bind(sigc::mem_fun(*this, &Manager::receive_download_done_hash_checked), d));
@@ -218,45 +237,22 @@
     if (!torrent::listen_open(m_portFirst, m_portLast))
       throw std::runtime_error("Could not open port for listening.");
   }
 }
 
 void
-Manager::create_http(const std::string& uri) {
-  HttpQueue::iterator itr = m_httpQueue.insert(uri);
-
-  (*itr)->signal_done().slots().push_front(sigc::bind(sigc::mem_fun(*this, &Manager::create_final),
-						      (*itr)->get_stream()));
-  (*itr)->signal_failed().slots().push_front(sigc::mem_fun(*this, &Manager::receive_http_failed));
-}
-
-void
-Manager::create_final(std::istream* s) {
-  try {
-    m_downloadList.insert(s);
-
-  } catch (torrent::local_error& e) {
-    // What to do? Keep in list for now.
-    m_logImportant.push_front(e.what());
-    m_logComplete.push_front(e.what());
-  }
-}
-
-void
 Manager::initialize_bencode(Download* d) {
   torrent::Bencode& bencode = d->get_bencode();
 
-  // TODO: Check that stuff are the right type, like state etc.
-  if (bencode.has_key("rtorrent") &&
-      bencode["rtorrent"].is_map() &&
-      bencode["rtorrent"].has_key("state") &&
-      bencode["rtorrent"]["state"].is_string())
-    return;
-
-  bencode.insert_key("rtorrent", torrent::Bencode(torrent::Bencode::TYPE_MAP));
-  bencode["rtorrent"].insert_key("state", "started");
+  if (!bencode.has_key("rtorrent") ||
+      !bencode["rtorrent"].is_map())
+    bencode.insert_key("rtorrent", torrent::Bencode(torrent::Bencode::TYPE_MAP));
+    
+  if (!bencode["rtorrent"].has_key("state") ||
+      !bencode["rtorrent"]["state"].is_string())
+    bencode["rtorrent"].insert_key("state", "started");
 }
 
 void
 Manager::prepare_hash_check(Download* d) {
   m_downloadList.close(d);
   d->get_download().hash_resume_clear();
@@ -283,17 +279,7 @@
 
   // Don't send if we did a hash check and found incompelete chunks.
   //if (d->is_done())
     d->get_download().tracker_send_completed();
 }
 
-void
-Manager::receive_download_inserted(Download* d) {
-  // Check if there is an "rtorrent" section in the bencoded data.
-
-  torrent::Bencode& bencode = d->get_bencode();
-
-  if (bencode["rtorrent"]["state"].as_string() == "started")
-    start(d);
-}
-
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/manager.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/manager.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/manager.h	2005-07-02 04:45:11.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/manager.h	2005-07-14 04:26:39.000000000 +0800
@@ -55,13 +55,13 @@
 class Manager {
 public:
   typedef DownloadList::iterator                    DListItr;
   typedef sigc::slot1<void, DownloadList::iterator> SlotReady;
   typedef sigc::slot0<void>                         SlotFailed;
 
-  Manager() : m_portRandom(false), m_portFirst(6890), m_portLast(6999) {}
+  Manager() : m_portRandom(false), m_portFirst(6890), m_portLast(6999), m_checkHash(true) {}
 
   DownloadList&       get_download_list()                 { return m_downloadList; }
   DownloadStore&      get_download_store()                { return m_downloadStore; }
   HashQueue&          get_hash_queue()                    { return m_hashQueue; }
   HttpQueue&          get_http_queue()                    { return m_httpQueue; }
 
@@ -69,27 +69,27 @@
   Log&                get_log_important()                 { return m_logImportant; }
   Log&                get_log_complete()                  { return m_logComplete; }
 
   void                set_port_random(bool v)             { m_portRandom = v; }
   void                set_port_range(int a, int b)        { m_portFirst = a; m_portLast = b; }
 
+  void                set_check_hash(bool state)          { m_checkHash = state; }
+
   void                initialize();
   void                cleanup();
 
   void                shutdown(bool force);
 
-  void                insert(std::string uri);
+  DListItr            insert(std::istream* s);
   DListItr            erase(DListItr itr);
 
   void                start(Download* d);
   void                stop(Download* d);
 
   void                check_hash(Download* d);
 
-  void                receive_download_done(Download* d, bool check_hash);
-
 private:
   void                listen_open();
 
   void                create_http(const std::string& uri);
   void                create_final(std::istream* s);
 
@@ -97,12 +97,13 @@
 
   void                prepare_hash_check(Download* d);
 
   void                receive_http_failed(std::string msg);
   void                receive_download_done_hash_checked(Download* d);
   void                receive_download_inserted(Download* d);
+  void                receive_download_done(Download* d);
 
   DownloadList        m_downloadList;
   DownloadStore       m_downloadStore;
   HashQueue           m_hashQueue;
   HttpQueue           m_httpQueue;
 
@@ -110,11 +111,13 @@
   Log                 m_logImportant;
   Log                 m_logComplete;
 
   bool                m_portRandom;
   int                 m_portFirst;
   int                 m_portLast;
+
+  bool                m_checkHash;
 };
 
 }
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/poll.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/poll.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/core/poll.cc	2005-07-02 04:45:24.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/core/poll.cc	2005-07-19 03:10:24.000000000 +0800
@@ -68,25 +68,27 @@
     m_curlStack.fdset(m_readSet, m_writeSet, m_exceptSet, &n);
     m_maxFd = std::max(m_maxFd, n);
   }
 
   timeval t = std::min(timeout, utils::Timer(torrent::get_next_timeout())).tval();
 
+  if (m_maxFd >= FD_SETSIZE)
+    throw std::runtime_error("Poll::work(): max fd >= FD_SETSIZE");
+
   errno = 0;
   m_maxFd = select(m_maxFd + 1, m_readSet, m_writeSet, m_exceptSet, &t);
 
-  if (m_maxFd >= 0) {
-    work();
+  if (m_maxFd >= 0)
+    return work();
 
-  } else if (errno == EINTR) {
+  if (errno == EINTR) {
     m_slotSelectInterrupted();
-    work_input();
-
-  } else if (errno < 0) {
-    throw std::runtime_error("Poll::work(): select error");
+    return work_input();
   }
+
+  throw std::runtime_error("Poll::work(): select error");
 }
 
 void
 Poll::work() {
   if (FD_ISSET(0, m_readSet))
     work_input();
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/display/utils.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/display/utils.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/display/utils.cc	2005-07-02 04:45:24.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/display/utils.cc	2005-07-13 20:04:47.000000000 +0800
@@ -35,37 +35,69 @@
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
 #include <sstream>
 #include <iomanip>
+#include <torrent/rate.h>
 
 #include "core/download.h"
 #include "utils/timer.h"
 
 #include "utils.h"
 
 namespace display {
 
-std::string
-print_download_status(core::Download* d) {
-  if (d->get_download().is_hash_checking()) {
-    return "Checking hash";
-
-  } else if (d->get_download().is_tracker_busy()) {
-    return "Tracker: Connecting";
-
-  } else if (!d->get_download().is_active()) {
-    return "Inactive";
-
-  } else if (!d->get_message().empty()) {
-    return d->get_message();
-
-  } else {
-    return "";
-  }
+char*
+print_download_title(char* buf, unsigned int length, core::Download* d) {
+  return buf + std::max(0, snprintf(buf, length, "%s",
+				    d->get_download().get_name().c_str()));
+}
+
+char*
+print_download_info(char* buf, unsigned int length, core::Download* d) {
+  char* last = buf + length;
+
+  buf += std::max(0, snprintf(buf, last - buf, "Torrent: "));
+
+  if (!d->get_download().is_open())
+    buf += std::max(0, snprintf(buf, last - buf, "closed            "));
+  else if (d->is_done())
+    buf += std::max(0, snprintf(buf, last - buf, "done %10.1f MB",
+				(double)d->get_download().get_bytes_total() / (double)(1 << 20)));
+  else
+    buf += std::max(0, snprintf(buf, last - buf, "%6.1f / %6.1f MB",
+				(double)d->get_download().get_bytes_done() / (double)(1 << 20),
+				(double)d->get_download().get_bytes_total() / (double)(1 << 20)));
+  
+  buf += std::max(0, snprintf(buf, last - buf, " Rate: %5.1f / %5.1f KiB Uploaded: %.1f MiB",
+			      (double)d->get_download().get_write_rate().rate() / (1 << 10),
+			      (double)d->get_download().get_read_rate().rate() / (1 << 10),
+			      (double)d->get_download().get_write_rate().total() / (1 << 20)));
+
+  return buf;
+}
+
+char*
+print_download_status(char* buf, unsigned int length, core::Download* d) {
+  if (d->get_download().is_hash_checking())
+    buf += std::max(0, snprintf(buf, length, "Checking hash"));
+
+  else if (d->get_download().is_tracker_busy())
+    buf += std::max(0, snprintf(buf, length, "Tracker: Connecting"));
+
+  else if (!d->get_download().is_active())
+    buf += std::max(0, snprintf(buf, length, "Inactive"));
+
+  else if (!d->get_message().empty())
+    buf += std::max(0, snprintf(buf, length, "%s", d->get_message().c_str()));
+
+  else
+    buf[0] = '\0';
+
+  return buf;
 }
 
 std::string
 print_hhmmss(utils::Timer t) {
   time_t tv_sec = static_cast<time_t>(t.tval().tv_sec);
   std::tm *u = std::localtime(&tv_sec);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/display/utils.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/display/utils.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/display/utils.h	2005-07-02 04:45:11.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/display/utils.h	2005-07-13 19:59:51.000000000 +0800
@@ -47,13 +47,15 @@
 namespace utils {
   class Timer;
 }
 
 namespace display {
 
-std::string print_download_status(core::Download* d);
+char*       print_download_title(char* buf, unsigned int length, core::Download* d);
+char*       print_download_info(char* buf, unsigned int length, core::Download* d);
+char*       print_download_status(char* buf, unsigned int length, core::Download* d);
 
 std::string print_hhmmss(utils::Timer t);
 std::string print_ddmmyyyy(time_t t);
 
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/display/window_download_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/display/window_download_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/display/window_download_list.cc	2005-07-02 04:45:24.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/display/window_download_list.cc	2005-07-13 20:04:39.000000000 +0800
@@ -59,13 +59,13 @@
 void
 WindowDownloadList::redraw() {
   utils::displayScheduler.insert(&m_taskUpdate, utils::Timer::cache().round_seconds() + 1000000);
 
   m_canvas->erase();
 
-  if (m_list->base().empty())
+  if (m_list->base().empty() || m_canvas->get_width() < 5)
     return;
 
   typedef std::pair<DList::iterator, DList::iterator> Range;
 
   Range range = rak::advance_bidirectional(m_list->begin(),
 					   m_list->get_focus() != m_list->end() ? m_list->get_focus() : m_list->begin(),
@@ -78,37 +78,24 @@
   if (range.second != m_list->end())
     ++range.second;
 
   int pos = 0;
 
   while (range.first != range.second) {
-    torrent::Download& d = (*range.first)->get_download();
+    char buffer[m_canvas->get_width() - 2];
+    char* position;
+    char* last = buffer + m_canvas->get_width() - 2;
 
-    m_canvas->print(0, pos++, "%c %s",
-		    range.first == m_list->get_focus() ? '*' : ' ',
-		    d.get_name().c_str());
-
-    if ((*range.first)->is_open() && (*range.first)->is_done())
-      m_canvas->print(0, pos++, "%c Torrent: Done %10.1f MiB Rate: %5.1f / %5.1f KiB Uploaded: %.1f MiB",
-		      range.first == m_list->get_focus() ? '*' : ' ',
-		      (double)d.get_bytes_total() / (double)(1 << 20),
-		      (double)d.get_rate_up() / 1024.0,
-		      (double)d.get_rate_down() / 1024.0,
-		      (double)d.get_bytes_up() / (double)(1 << 20));
-    else
-      m_canvas->print(0, pos++, "%c Torrent: %6.1f / %6.1f MiB Rate: %5.1f / %5.1f KiB Uploaded: %.1f MiB",
-		      range.first == m_list->get_focus() ? '*' : ' ',
-		      (double)d.get_bytes_done() / (double)(1 << 20),
-		      (double)d.get_bytes_total() / (double)(1 << 20),
-		      (double)d.get_rate_up() / 1024.0,
-		      (double)d.get_rate_down() / 1024.0,
-		      (double)d.get_bytes_up() / (double)(1 << 20));
+    position = print_download_title(buffer, last - buffer, *range.first);
+    m_canvas->print(0, pos++, "%c %s", range.first == m_list->get_focus() ? '*' : ' ', buffer);
     
-    m_canvas->print(0, pos++, "%c %s",
-		    range.first == m_list->get_focus() ? '*' : ' ',
-		    print_download_status(*range.first).c_str());
+    position = print_download_info(buffer, last - buffer, *range.first);
+    m_canvas->print(0, pos++, "%c %s", range.first == m_list->get_focus() ? '*' : ' ', buffer);
+
+    position = print_download_status(buffer, last - buffer, *range.first);
+    m_canvas->print(0, pos++, "%c %s", range.first == m_list->get_focus() ? '*' : ' ', buffer);
 
     ++range.first;
   }    
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/display/window_download_statusbar.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/display/window_download_statusbar.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/display/window_download_statusbar.cc	2005-07-02 04:45:24.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/display/window_download_statusbar.cc	2005-07-13 20:03:51.000000000 +0800
@@ -33,12 +33,14 @@
 //
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
+#include <torrent/rate.h>
+
 #include "canvas.h"
 #include "utils.h"
 #include "window_download_statusbar.h"
 
 #include "core/download.h"
 
@@ -52,35 +54,43 @@
 void
 WindowDownloadStatusbar::redraw() {
   utils::displayScheduler.insert(&m_taskUpdate, utils::Timer::cache().round_seconds() + 1000000);
 
   m_canvas->erase();
 
-  if (m_download->get_download().get_chunks_done() != m_download->get_download().get_chunks_total() || !m_download->get_download().is_open())
-    m_canvas->print(0, 0, "Torrent: %.1f / %.1f MiB Rate: %5.1f / %5.1f KiB Uploaded: %.1f MiB",
-		    (double)m_download->get_download().get_bytes_done() / (double)(1 << 20),
-		    (double)m_download->get_download().get_bytes_total() / (double)(1 << 20),
-		    (double)m_download->get_download().get_rate_up() / 1024.0,
-		    (double)m_download->get_download().get_rate_down() / 1024.0,
-		    (double)m_download->get_download().get_bytes_up() / (double)(1 << 20));
+  char buffer[m_canvas->get_width() - 2];
+  char* position;
+  char* last = buffer + m_canvas->get_width() - 2;
+
+  position = print_download_info(buffer, last - buffer, m_download);
+  m_canvas->print(0, 0, "%s", buffer);
+
+//   if (m_download->get_download().get_chunks_done() != m_download->get_download().get_chunks_total() || !m_download->get_download().is_open())
+//     m_canvas->print(0, 0, "Torrent: %.1f / %.1f MiB Rate: %5.1f / %5.1f KiB Uploaded: %.1f MiB",
+// 		    (double)m_download->get_download().get_bytes_done() / (double)(1 << 20),
+// 		    (double)m_download->get_download().get_bytes_total() / (double)(1 << 20),
+// 		    (double)m_download->get_download().get_write_rate().rate() / 1024.0,
+// 		    (double)m_download->get_download().get_read_rate().rate() / 1024.0,
+// 		    (double)m_download->get_download().get_write_rate().total() / (double)(1 << 20));
  
-  else
-    m_canvas->print(0, 0, "Torrent: Done %.1f MiB Rate: %5.1f / %5.1f KiB Uploaded: %.1f MiB",
-		    (double)m_download->get_download().get_bytes_total() / (double)(1 << 20),
-		    (double)m_download->get_download().get_rate_up() / 1024.0,
-		    (double)m_download->get_download().get_rate_down() / 1024.0,
-		    (double)m_download->get_download().get_bytes_up() / (double)(1 << 20));
+//   else
+//     m_canvas->print(0, 0, "Torrent: Done %.1f MiB Rate: %5.1f / %5.1f KiB Uploaded: %.1f MiB",
+// 		    (double)m_download->get_download().get_bytes_total() / (double)(1 << 20),
+// 		    (double)m_download->get_download().get_write_rate().rate() / 1024.0,
+// 		    (double)m_download->get_download().get_read_rate().rate() / 1024.0,
+// 		    (double)m_download->get_download().get_write_rate().total() / (double)(1 << 20));
     
   m_canvas->print(0, 1, "Peers: %i(%i) Min/Max: %i/%i Uploads: %i",
 		  (int)m_download->get_download().get_peers_connected(),
 		  (int)m_download->get_download().get_peers_not_connected(),
 		  (int)m_download->get_download().get_peers_min(),
 		  (int)m_download->get_download().get_peers_max(),
 		  (int)m_download->get_download().get_uploads_max());
 
+  position = print_download_status(buffer, last - buffer, m_download);
   m_canvas->print(0, 2, "[%c:%i] %s",
 		  m_download->get_download().is_tracker_busy() ? 'C' : ' ',
 		  (int)(m_download->get_download().get_tracker_timeout() / 1000000),
-		  print_download_status(m_download).c_str());
+		  buffer);
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/display/window_peer_info.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/display/window_peer_info.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/display/window_peer_info.cc	2005-07-02 04:45:24.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/display/window_peer_info.cc	2005-07-10 02:39:59.000000000 +0800
@@ -34,12 +34,13 @@
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
 #include <stdexcept>
+#include <torrent/rate.h>
 
 #include "core/download.h"
 
 #include "utils/parse.h"
 #include "canvas.h"
 #include "utils.h"
@@ -85,16 +86,16 @@
   m_canvas->print(0, y++, "Id: %s" , utils::escape_string((*m_focus)->get_id()).c_str());
   m_canvas->print(0, y++, "Snubbed: %s", (*m_focus)->get_snubbed() ? "Yes" : "No");
 
   m_canvas->print(0, y++, "Done: %i%", done_percentage(**m_focus));
 
   m_canvas->print(0, y++, "Rate: %5.1f/%5.1f KB Total: %.1f/%.1f MB",
-		  (double)(*m_focus)->get_rate_up() / (double)(1 << 10),
-		  (double)(*m_focus)->get_rate_down() / (double)(1 << 10),
-		  (double)(*m_focus)->get_transfered_up() / (double)(1 << 20),
-		  (double)(*m_focus)->get_transfered_down() / (double)(1 << 20));
+		  (double)(*m_focus)->get_write_rate().rate() / (double)(1 << 10),
+		  (double)(*m_focus)->get_read_rate().rate() / (double)(1 << 10),
+		  (double)(*m_focus)->get_write_rate().total() / (double)(1 << 20),
+		  (double)(*m_focus)->get_read_rate().total() / (double)(1 << 20));
 }
 
 int
 WindowPeerInfo::done_percentage(torrent::Peer& p) {
   int chunks = m_download->get_download().get_chunks_total();
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/display/window_peer_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/display/window_peer_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/display/window_peer_list.cc	2005-07-02 04:45:24.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/display/window_peer_list.cc	2005-07-10 02:39:59.000000000 +0800
@@ -34,12 +34,13 @@
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
 #include <stdexcept>
+#include <torrent/rate.h>
 
 #include "core/download.h"
 #include "rak/algorithm.h"
 
 #include "canvas.h"
 #include "window_peer_list.h"
@@ -93,20 +94,15 @@
 
     m_canvas->print(x, y, "%c %s",
 		    range.first == *m_focus ? '*' : ' ',
 		    p.get_dns().c_str());
     x += 18;
 
-    m_canvas->print(x, y, "%.1f", (double)p.get_rate_up() / 1024);
-    x += 7;
-
-    m_canvas->print(x, y, "%.1f", (double)p.get_rate_down() / 1024);
-    x += 7;
-
-    m_canvas->print(x, y, "%.1f", (double)p.get_rate_peer() / 1024);
-    x += 7;
+    m_canvas->print(x, y, "%.1f", (double)p.get_write_rate().rate() / 1024); x += 7;
+    m_canvas->print(x, y, "%.1f", (double)p.get_read_rate().rate() / 1024); x += 7;
+    m_canvas->print(x, y, "%.1f", (double)p.get_peer_rate().rate() / 1024); x += 7;
 
     m_canvas->print(x, y, "%c%c/%c%c",
 		    p.get_remote_choked() ? 'c' : 'u',
 		    p.get_remote_interested() ? 'i' : 'n',
 		    p.get_local_choked() ? 'c' : 'u',
 		    p.get_local_interested() ? 'i' : 'n');
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/display/window_statusbar.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/display/window_statusbar.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/display/window_statusbar.cc	2005-07-06 18:34:37.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/display/window_statusbar.cc	2005-07-19 03:10:24.000000000 +0800
@@ -33,12 +33,13 @@
 //
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
+#include <torrent/rate.h>
 #include <torrent/torrent.h>
 
 #include "core/manager.h"
 
 #include "canvas.h"
 #include "window_statusbar.h"
@@ -70,17 +71,17 @@
     pos = snprintf(buf + pos, 128 - pos, "off");
   else
     pos = snprintf(buf + pos, 128 - pos, "%-3i", torrent::get_read_throttle() / 1024);
 
   m_canvas->print(0, 0, "Throttle U/D: %s  Rate: %5.1f / %5.1f KiB  Listen: %s:%i%s",
 		  buf,
-		  (double)torrent::get_write_rate() / 1024.0,
-		  (double)torrent::get_read_rate() / 1024.0,
-		  !torrent::get_ip().empty() ? torrent::get_ip().c_str() : "<default>",
+		  (double)torrent::get_write_rate().rate() / 1024.0,
+		  (double)torrent::get_read_rate().rate() / 1024.0,
+		  !torrent::get_address().empty() ? torrent::get_address().c_str() : "<default>",
 		  (int)torrent::get_listen_port(),
-		  !torrent::get_bind().empty() ? ("  Bind: " + torrent::get_bind()).c_str() : "");
+		  !torrent::get_bind_address().empty() ? ("  Bind: " + torrent::get_bind_address()).c_str() : "");
 
   pos = snprintf(buf, 128, "[%3i/%3i/%3i]",
 		 torrent::get_total_handshakes(),
 		 torrent::get_open_sockets(),
 		 torrent::get_max_open_sockets());
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/display/window_tracker_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/display/window_tracker_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/display/window_tracker_list.cc	2005-07-02 04:45:24.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/display/window_tracker_list.cc	2005-07-19 03:10:24.000000000 +0800
@@ -81,16 +81,18 @@
     torrent::Tracker t = m_download->get_download().get_tracker(range.first);
 
     m_canvas->print(0, pos++, "%c %s",
 		    range.first == *m_focus ? '*' : ' ',
 		    t.get_url().c_str());
 
-    m_canvas->print(0, pos++, "%c Group: %2i Id: %s",
+    m_canvas->print(0, pos++, "%c Group: %2i Id: %s Enabled: %s Open: %s",
 		    range.first == *m_focus ? '*' : ' ',
 		    t.get_group(),
-		    utils::escape_string(t.get_tracker_id()).c_str());
+		    utils::escape_string(t.get_tracker_id()).c_str(),
+		    t.is_enabled() ? "yes" : "no",
+		    t.is_open() ? "yes" : "no");
 
     ++range.first;
   }
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/input/text_input.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/input/text_input.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/input/text_input.cc	2005-07-02 04:45:24.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/input/text_input.cc	2005-07-19 22:14:34.000000000 +0800
@@ -33,23 +33,20 @@
 //
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
-#include <sstream>
 #include <ncurses.h>
 
 #include "text_input.h"
 
 namespace input {
 
 bool
 TextInput::pressed(int key) {
-  //std::stringstream str;
-
   if (m_alt) {
     m_alt = false;
 
     switch (key) {
 //     case 'b':
 //       Base::insert(m_pos, "M^b");
@@ -99,24 +96,12 @@
       m_alt = true;
 
       break;
 
     default:
       return false;
-
-      // Testcode.
-//       if (key == KEY_ENTER || key == '\n')
-// 	return false;
-
-//       str << "\\x" << std::hex << key;
-
-//       Base::insert(m_pos, str.str());
-
-//       m_pos += str.str().length();
-
-//       return true;
     }
   }
 
   m_slotDirty();
 
   return true;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/main.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/main.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/main.cc	2005-07-06 18:34:37.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/main.cc	2005-07-14 04:26:39.000000000 +0800
@@ -44,18 +44,20 @@
 #include <stdlib.h>
 #include <sstream>
 #include <sigc++/bind.h>
 #include <sigc++/retype_return.h>
 #include <torrent/http.h>
 #include <torrent/torrent.h>
+#include <rak/functional.h>
 
 #ifdef USE_EXECINFO
 #include <execinfo.h>
 #endif
 
 #include "core/download.h"
+#include "core/download_factory.h"
 #include "display/canvas.h"
 #include "display/window.h"
 #include "ui/control.h"
 #include "input/bindings.h"
 
 #include "utils/task.h"
@@ -67,14 +69,12 @@
 #include "option_handler.h"
 #include "option_handler_rules.h"
 #include "option_parser.h"
 
 int64_t utils::Timer::m_cache;
 
-bool is_shutting_down = false;
-
 void do_panic(int signum);
 void print_help();
 
 namespace utils {
   TaskScheduler taskScheduler;
   TaskScheduler displayScheduler;
@@ -90,27 +90,12 @@
   x = display::Canvas::get_screen_width();
   y = display::Canvas::get_screen_height();
 
   return r;
 }
 
-void
-do_shutdown(ui::Control* c) {
-  if (!is_shutting_down) {
-    is_shutting_down = true;
-
-    torrent::listen_close();
-    c->get_core().shutdown(false);
-
-  } else {
-    // Close all torrents, this will stop all tracker connections and cause
-    // a quick shutdown.
-    c->get_core().shutdown(true);
-  }
-}
-
 int
 parse_options(ui::Control* c, OptionHandler* optionHandler, int argc, char** argv) {
   OptionParser optionParser;
 
   // Converted.
   optionParser.insert_flag('h', sigc::ptr_fun(&print_help));
@@ -125,39 +110,40 @@
 
   return optionParser.process(argc, argv);
 }
 
 void
 initialize_option_handler(ui::Control* c, OptionHandler* optionHandler) {
-  optionHandler->insert("max_peers",         new OptionHandlerInt(c, &apply_download_max_peers, &validate_download_peers));
-  optionHandler->insert("min_peers",         new OptionHandlerInt(c, &apply_download_min_peers, &validate_download_peers));
-  optionHandler->insert("max_uploads",       new OptionHandlerInt(c, &apply_download_max_uploads, &validate_download_peers));
-
-  optionHandler->insert("download_rate",     new OptionHandlerInt(c, &apply_global_download_rate, &validate_rate));
-  optionHandler->insert("upload_rate",       new OptionHandlerInt(c, &apply_global_upload_rate, &validate_rate));
-
-  optionHandler->insert("bind",              new OptionHandlerString(c, &apply_bind, &validate_ip));
-  optionHandler->insert("ip",                new OptionHandlerString(c, &apply_ip, &validate_ip));
-  optionHandler->insert("port_range",        new OptionHandlerString(c, &apply_port_range, &validate_port_range));
-  optionHandler->insert("port_random",       new OptionHandlerString(c, &apply_port_random, &validate_yes_no));
-
-  optionHandler->insert("check_hash",        new OptionHandlerString(c, &apply_check_hash, &validate_yes_no));
-  optionHandler->insert("directory",         new OptionHandlerString(c, &apply_download_directory, &validate_directory));
-
-  optionHandler->insert("hash_read_ahead",   new OptionHandlerInt(c, &apply_hash_read_ahead, &validate_hash_read_ahead));
-  optionHandler->insert("hash_interval",     new OptionHandlerInt(c, &apply_hash_interval, &validate_hash_interval));
-  optionHandler->insert("hash_max_tries",    new OptionHandlerInt(c, &apply_hash_max_tries, &validate_hash_max_tries));
-  optionHandler->insert("max_open_files",    new OptionHandlerInt(c, &apply_max_open_files, &validate_fd));
-  optionHandler->insert("max_open_sockets",  new OptionHandlerInt(c, &apply_max_open_sockets, &validate_fd));
-  optionHandler->insert("throttle_interval", new OptionHandlerInt(c, &apply_throttle_interval, &validate_throttle_interval));
-
-  optionHandler->insert("connection_leech",  new OptionHandlerString(c, &apply_connection_leech, &validate_non_empty));
-  optionHandler->insert("connection_seed",   new OptionHandlerString(c, &apply_connection_seed, &validate_non_empty));
-
-  optionHandler->insert("session",           new OptionHandlerString(c, &apply_session_directory, &validate_directory));
-  optionHandler->insert("tracker_dump",      new OptionHandlerString(c, &apply_tracker_dump, &validate_yes_no));
+  optionHandler->insert("max_peers",           new OptionHandlerInt(c, &apply_download_max_peers, &validate_download_peers));
+  optionHandler->insert("min_peers",           new OptionHandlerInt(c, &apply_download_min_peers, &validate_download_peers));
+  optionHandler->insert("max_uploads",         new OptionHandlerInt(c, &apply_download_max_uploads, &validate_download_peers));
+
+  optionHandler->insert("download_rate",       new OptionHandlerInt(c, &apply_global_download_rate, &validate_rate));
+  optionHandler->insert("upload_rate",         new OptionHandlerInt(c, &apply_global_upload_rate, &validate_rate));
+
+  optionHandler->insert("bind",                new OptionHandlerString(c, &apply_bind, &validate_ip));
+  optionHandler->insert("ip",                  new OptionHandlerString(c, &apply_ip, &validate_ip));
+  optionHandler->insert("port_range",          new OptionHandlerString(c, &apply_port_range, &validate_port_range));
+  optionHandler->insert("port_random",         new OptionHandlerString(c, &apply_port_random, &validate_yes_no));
+
+  optionHandler->insert("check_hash",          new OptionHandlerString(c, &apply_check_hash, &validate_yes_no));
+  optionHandler->insert("directory",           new OptionHandlerString(c, &apply_download_directory, &validate_directory));
+
+  optionHandler->insert("hash_read_ahead",     new OptionHandlerInt(c, &apply_hash_read_ahead, &validate_hash_read_ahead));
+  optionHandler->insert("hash_interval",       new OptionHandlerInt(c, &apply_hash_interval, &validate_hash_interval));
+  optionHandler->insert("hash_max_tries",      new OptionHandlerInt(c, &apply_hash_max_tries, &validate_hash_max_tries));
+  optionHandler->insert("max_open_files",      new OptionHandlerInt(c, &apply_max_open_files, &validate_fd));
+  optionHandler->insert("max_open_sockets",    new OptionHandlerInt(c, &apply_max_open_sockets, &validate_fd));
+  optionHandler->insert("throttle_interval",   new OptionHandlerInt(c, &apply_throttle_interval, &validate_throttle_interval));
+
+  optionHandler->insert("connection_leech",    new OptionHandlerString(c, &apply_connection_leech, &validate_non_empty));
+  optionHandler->insert("connection_seed",     new OptionHandlerString(c, &apply_connection_seed, &validate_non_empty));
+
+  optionHandler->insert("session",             new OptionHandlerString(c, &apply_session_directory, &validate_directory));
+  optionHandler->insert("tracker_dump",        new OptionHandlerString(c, &apply_tracker_dump, &validate_yes_no));
+  optionHandler->insert("use_udp_trackers",    new OptionHandlerString(c, &apply_use_udp_trackers, &validate_yes_no));
 }
 
 void
 load_option_file(const std::string& filename, OptionHandler* optionHandler, bool require = false) {
   std::fstream f(filename.c_str(), std::ios::in);
 
@@ -174,18 +160,35 @@
 
 void
 load_session_torrents(ui::Control* c) {
   // Load session torrents.
   std::list<std::string> l = c->get_core().get_download_store().get_formated_entries().make_list();
 
-  std::for_each(l.begin(), l.end(), std::bind1st(std::mem_fun(&core::Manager::insert), &c->get_core()));
+  for (std::list<std::string>::iterator first = l.begin(), last = l.end(); first != last; ++first) {
+    core::DownloadFactory* f = new core::DownloadFactory(*first, &c->get_core());
+
+    // Replace with session torrent flag.
+    f->set_session(true);
+    f->slot_finished(sigc::bind(sigc::ptr_fun(&rak::call_delete_func<core::DownloadFactory>), f));
+    f->load();
+    f->commit();
+  }
 }
 
 void
-load_arg_torrents(ui::Control* c, char** begin, char** end) {
-  std::for_each(begin, end, std::bind1st(std::mem_fun(&core::Manager::insert), &c->get_core()));
+load_arg_torrents(ui::Control* c, char** first, char** last) {
+  //std::for_each(begin, end, std::bind1st(std::mem_fun(&core::Manager::insert), &c->get_core()));
+  for (; first != last; ++first) {
+    core::DownloadFactory* f = new core::DownloadFactory(*first, &c->get_core());
+
+    // Replace with session torrent flag.
+    f->set_start(true);
+    f->slot_finished(sigc::bind(sigc::ptr_fun(&rak::call_delete_func<core::DownloadFactory>), f));
+    f->load();
+    f->commit();
+  }
 }
 
 void
 initialize_display(ui::Control* c) {
   display::Canvas::init();
   display::Window::slot_adjust(sigc::mem_fun(c->get_display(), &display::Manager::adjust_layout));
@@ -211,13 +214,13 @@
 
   initialize_option_handler(&uiControl, &optionHandler);
 
   try {
 
     SignalHandler::set_ignore(SIGPIPE);
-    SignalHandler::set_handler(SIGINT,  sigc::bind(sigc::mem_fun(uiControl, &ui::Control::set_shutdown_received), true));
+    SignalHandler::set_handler(SIGINT,  sigc::mem_fun(uiControl, &ui::Control::receive_shutdown));
     SignalHandler::set_handler(SIGSEGV, sigc::bind(sigc::ptr_fun(&do_panic), SIGSEGV));
     SignalHandler::set_handler(SIGBUS,  sigc::bind(sigc::ptr_fun(&do_panic), SIGBUS));
     SignalHandler::set_handler(SIGFPE,  sigc::bind(sigc::ptr_fun(&do_panic), SIGFPE));
 
     // Need to initialize this before parseing options.
     torrent::initialize();
@@ -234,28 +237,23 @@
 
     load_session_torrents(&uiControl);
     load_arg_torrents(&uiControl, argv + firstArg, argv + argc);
 
     uiControl.get_display().adjust_layout();
 
-    while (!is_shutting_down || !torrent::is_inactive()) {
-
-      if (uiControl.get_shutdown_received()) {
-	do_shutdown(&uiControl);
-	uiControl.set_shutdown_received(false);
-      }
-
+    while (!uiControl.is_shutdown_completed()) {
       utils::Timer::update();
       utils::taskScheduler.execute(utils::Timer::cache());
     
       // This needs to be called every second or so. Currently done by
       // the throttle task in libtorrent.
       if (!utils::displayScheduler.empty() &&
 	  utils::displayScheduler.get_next_timeout() <= utils::Timer::cache())
 	uiControl.get_display().do_update();
 
+      // Do shutdown check before poll, not after.
       uiControl.get_core().get_poll().poll(!utils::taskScheduler.empty() ?
 					   utils::taskScheduler.get_next_timeout() - utils::Timer::cache() :
 					   60 * 1000000);
     }
 
     uiControl.get_ui().cleanup();
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/option_handler_rules.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/option_handler_rules.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/option_handler_rules.cc	2005-07-06 18:34:37.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/option_handler_rules.cc	2005-07-19 03:10:24.000000000 +0800
@@ -113,41 +113,41 @@
 validate_throttle_interval(int arg) {
   return arg > 0 && arg < 5000;
 }
 
 void
 apply_download_min_peers(ui::Control* m, int arg) {
-  m->get_core().get_download_list().slot_map_insert().insert("1_min_peers", sigc::bind(sigc::mem_fun(&core::Download::call<void, uint32_t, &torrent::Download::set_peers_min>), arg));
+  m->get_core().get_download_list().slot_map_insert()["1_min_peers"] = sigc::bind(sigc::mem_fun(&core::Download::call<void, uint32_t, &torrent::Download::set_peers_min>), arg);
 }
 
 void
 apply_download_max_peers(ui::Control* m, int arg) {
-  m->get_core().get_download_list().slot_map_insert().insert("1_max_peers", sigc::bind(sigc::mem_fun(&core::Download::call<void, uint32_t, &torrent::Download::set_peers_max>), arg));
+  m->get_core().get_download_list().slot_map_insert()["1_max_peers"] = sigc::bind(sigc::mem_fun(&core::Download::call<void, uint32_t, &torrent::Download::set_peers_max>), arg);
 }
 
 void
 apply_download_max_uploads(ui::Control* m, int arg) {
-  m->get_core().get_download_list().slot_map_insert().insert("1_max_uploads", sigc::bind(sigc::mem_fun(&core::Download::call<void, uint32_t, &torrent::Download::set_uploads_max>), arg));
+  m->get_core().get_download_list().slot_map_insert()["1_max_uploads"] = sigc::bind(sigc::mem_fun(&core::Download::call<void, uint32_t, &torrent::Download::set_uploads_max>), arg);
 }
 
 void
 apply_download_directory(ui::Control* m, const std::string& arg) {
   if (!arg.empty())
-    m->get_core().get_download_list().slot_map_insert().insert("1_directory", sigc::bind(sigc::mem_fun(&core::Download::set_root_directory), arg));
+    m->get_core().get_download_list().slot_map_insert()["1_directory"] = sigc::bind(sigc::mem_fun(&core::Download::set_root_directory), arg);
   else
     m->get_core().get_download_list().slot_map_insert().erase("1_directory");
 }
 
 void
 apply_connection_leech(ui::Control* m, const std::string& arg) {
-  m->get_core().get_download_list().slot_map_insert().insert("1_connection_leech", sigc::bind(sigc::mem_fun(&core::Download::set_connection_leech), arg));
+  m->get_core().get_download_list().slot_map_insert()["1_connection_leech"] = sigc::bind(sigc::mem_fun(&core::Download::set_connection_leech), arg);
 }
 
 void
 apply_connection_seed(ui::Control* m, const std::string& arg) {
-  m->get_core().get_download_list().slot_map_insert().insert("1_connection_seed", sigc::bind(sigc::mem_fun(&core::Download::set_connection_seed), arg));
+  m->get_core().get_download_list().slot_map_insert()["1_connection_seed"] = sigc::bind(sigc::mem_fun(&core::Download::set_connection_seed), arg);
 }
 
 void
 apply_global_download_rate(ui::Control* m, int arg) {
   torrent::set_read_throttle(arg * 1024);
 }
@@ -186,18 +186,18 @@
 apply_throttle_interval(ui::Control* m, int arg) {
   torrent::set_throttle_interval(arg * 1000);
 }
 
 void
 apply_bind(ui::Control* m, const std::string& arg) {
-  torrent::set_bind(arg);
+  torrent::set_bind_address(arg);
 }
 
 void
 apply_ip(ui::Control* m, const std::string& arg) {
-  torrent::set_ip(arg);
+  torrent::set_address(arg);
 }
 
 // The arg string *must* have been checked with validate_port_range
 // first.
 void
 apply_port_range(ui::Control* m, const std::string& arg) {
@@ -213,23 +213,31 @@
   m->get_core().set_port_random(arg == "yes");
 }
 
 void
 apply_tracker_dump(ui::Control* m, const std::string& arg) {
   if (arg == "yes")
-    m->get_core().get_download_list().slot_map_insert().insert("1_tracker_dump", sigc::bind(sigc::mem_fun(&core::Download::call<sigc::connection, torrent::Download::SlotIStream, &torrent::Download::signal_tracker_dump>), sigc::ptr_fun(&receive_tracker_dump)));
+    m->get_core().get_download_list().slot_map_insert()["1_tracker_dump"] = sigc::bind(sigc::mem_fun(&core::Download::call<sigc::connection, torrent::Download::SlotIStream, &torrent::Download::signal_tracker_dump>), sigc::ptr_fun(&receive_tracker_dump));
   else
     m->get_core().get_download_list().slot_map_insert().erase("1_tracker_dump");
 }
 
 void
+apply_use_udp_trackers(ui::Control* m, const std::string& arg) {
+  if (arg == "yes")
+    m->get_core().get_download_list().slot_map_insert().erase("1_use_udp_trackers");
+  else
+    m->get_core().get_download_list().slot_map_insert()["1_use_udp_trackers"] = sigc::bind(sigc::mem_fun(&core::Download::enable_udp_trackers), false);
+}
+
+void
 apply_check_hash(ui::Control* m, const std::string& arg) {
   if (arg == "yes")
-    m->get_core().get_download_list().slot_map_finished().insert("1_download_done", sigc::bind(sigc::mem_fun(m->get_core(), &core::Manager::receive_download_done), true));
+    m->get_core().set_check_hash(true);
   else
-    m->get_core().get_download_list().slot_map_finished().insert("1_download_done", sigc::bind(sigc::mem_fun(m->get_core(), &core::Manager::receive_download_done), false));
+    m->get_core().set_check_hash(false);
 }
 
 void
 apply_session_directory(ui::Control* m, const std::string& arg) {
   m->get_core().get_download_store().use(arg);
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/option_handler_rules.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/option_handler_rules.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/option_handler_rules.h	2005-07-06 18:34:37.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/option_handler_rules.h	2005-07-14 04:26:39.000000000 +0800
@@ -85,12 +85,13 @@
 
 void apply_ip(ui::Control* m, const std::string& arg);
 void apply_bind(ui::Control* m, const std::string& arg);
 void apply_port_range(ui::Control* m, const std::string& arg);
 void apply_port_random(ui::Control* m, const std::string& arg);
 void apply_tracker_dump(ui::Control* m, const std::string& arg);
+void apply_use_udp_trackers(ui::Control* m, const std::string& arg);
 void apply_check_hash(ui::Control* m, const std::string& arg);
 
 void apply_session_directory(ui::Control* m, const std::string& arg);
 
 class OptionHandlerInt : public OptionHandlerBase {
 public:
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/ui: control.cc
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/ui/control.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/ui/control.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/ui/control.h	2005-07-02 04:45:11.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/ui/control.h	2005-07-10 02:39:59.000000000 +0800
@@ -34,32 +34,36 @@
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #ifndef RTORRENT_UI_CONTROL_H
 #define RTORRENT_UI_CONTROL_H
 
+#include <torrent/torrent.h>
+
 #include "core/manager.h"
 #include "display/manager.h"
 #include "input/manager.h"
 
 #include "root.h"
 
 namespace ui {
 
 class Control {
 public:
   Control() : m_shutdownReceived(false) {}
   
-  bool                get_shutdown_received()       { return m_shutdownReceived; }
-  void                set_shutdown_received(bool v) { m_shutdownReceived = v; }
+  bool                is_shutdown_completed()       { return m_shutdownReceived && torrent::is_inactive(); }
+  bool                is_shutdown_received()        { return m_shutdownReceived; }
 
   Root&               get_ui()                      { return m_ui; }
   core::Manager&      get_core()                    { return m_core; }
   display::Manager&   get_display()                 { return m_display; }
   input::Manager&     get_input()                   { return m_input; }
 
+  void                receive_shutdown();
+
 private:
   Control(const Control&);
   void operator = (const Control&);
 
   bool                m_shutdownReceived;
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/ui/download_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/ui/download_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/ui/download_list.cc	2005-07-02 04:45:24.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/ui/download_list.cc	2005-07-19 22:14:34.000000000 +0800
@@ -40,12 +40,13 @@
 #include <rak/functional.h>
 #include <sigc++/bind.h>
 #include <sigc++/hide.h>
 #include <torrent/torrent.h>
 
 #include "core/download.h"
+#include "core/download_factory.h"
 
 #include "input/bindings.h"
 #include "input/path_input.h"
 
 #include "display/window_http_queue.h"
 #include "display/window_input.h"
@@ -64,13 +65,13 @@
 
 DownloadList::DownloadList(Control* c) :
   m_state(DISPLAY_MAX_SIZE),
 
   m_window(c->get_display().end()),
 
-  m_windowTitle(new WTitle("rTorrent " VERSION " - libTorrent " + torrent::get_version())),
+  m_windowTitle(new WTitle("rTorrent " VERSION " - libTorrent " + std::string(torrent::get_version()))),
   m_windowHttpQueue(new WHttp(&c->get_core().get_http_queue())),
 
   m_uiDownload(NULL),
 
   m_downloadList(&c->get_core().get_download_list()),
 
@@ -127,13 +128,13 @@
 DownloadList::disable() {
   if (!is_active())
     throw std::logic_error("ui::Download::disable() called on an already disabled object");
 
   if (m_windowTextInput->is_active()) {
     m_windowTextInput->get_input()->clear();
-    receive_exit_input();
+    receive_exit_input(true);
   }
 
   disable_display();
 
   utils::taskScheduler.erase(&m_taskUpdate);
 
@@ -236,40 +237,57 @@
     return;
 
   m_control->get_core().check_hash(*m_downloadList.get_focus());
 }
 
 void
-DownloadList::receive_view_input() {
+DownloadList::receive_view_input(bool useDefault) {
+  if (m_windowTextInput->get_active())
+    return;
+
   m_control->get_ui().window_statusbar()->set_active(false);
   m_windowTextInput->set_active(true);
   m_control->get_display().adjust_layout();
 
   m_control->get_input().set_text_input(m_windowTextInput->get_input());
 
   m_windowTextInput->set_focus(true);
 
-  (*m_bindings)['\n'] = sigc::mem_fun(*this, &DownloadList::receive_exit_input);
-  (*m_bindings)[KEY_ENTER] = sigc::mem_fun(*this, &DownloadList::receive_exit_input);
+  (*m_bindings)['\n'] = sigc::bind(sigc::mem_fun(*this, &DownloadList::receive_exit_input), useDefault);
+  (*m_bindings)[KEY_ENTER] = sigc::bind(sigc::mem_fun(*this, &DownloadList::receive_exit_input), useDefault);
 }
 
 void
-DownloadList::receive_exit_input() {
+DownloadList::receive_exit_input(bool useDefault) {
+  if (!m_windowTextInput->get_active())
+    return;
+
   m_control->get_ui().window_statusbar()->set_active(true);
   m_windowTextInput->set_active(false);
 
   m_control->get_input().set_text_input();
 
-  m_slotOpenUri(m_windowTextInput->get_input()->str());
+  // Adding download.
+  core::DownloadFactory* f = new core::DownloadFactory(m_windowTextInput->get_input()->str(), &m_control->get_core());
+
+  f->set_start(useDefault);
+  f->slot_finished(sigc::bind(sigc::ptr_fun(&rak::call_delete_func<core::DownloadFactory>), f));
+  f->load();
+  f->commit();
 
+  // Clean up.
   m_windowTextInput->get_input()->clear();
   m_windowTextInput->set_focus(false);
 
   m_bindings->erase('\n');
   m_bindings->erase(KEY_ENTER);
 
+  // Urgh... this is ugly...
+  (*m_bindings)['\n']          = sigc::bind(sigc::mem_fun(*this, &DownloadList::receive_view_input), false);
+  (*m_bindings)[KEY_ENTER]     = sigc::bind(sigc::mem_fun(*this, &DownloadList::receive_view_input), false);
+
   receive_change(DISPLAY_DOWNLOAD_LIST);
 }
 
 void
 DownloadList::receive_change(Display d) {
   if (d == m_state)
@@ -289,14 +307,16 @@
 void
 DownloadList::setup_keys() {
   (*m_bindings)['\x13']        = sigc::mem_fun(*this, &DownloadList::receive_start_download);
   (*m_bindings)['\x04']        = sigc::mem_fun(*this, &DownloadList::receive_stop_download);
   (*m_bindings)['\x12']        = sigc::mem_fun(*this, &DownloadList::receive_check_hash);
 
-  (*m_bindings)['\x7f']        = sigc::mem_fun(*this, &DownloadList::receive_view_input);
-  (*m_bindings)[KEY_BACKSPACE] = sigc::mem_fun(*this, &DownloadList::receive_view_input);
+  (*m_bindings)['\x7f']        = sigc::bind(sigc::mem_fun(*this, &DownloadList::receive_view_input), true);
+  (*m_bindings)[KEY_BACKSPACE] = sigc::bind(sigc::mem_fun(*this, &DownloadList::receive_view_input), true);
+  (*m_bindings)['\n']          = sigc::bind(sigc::mem_fun(*this, &DownloadList::receive_view_input), false);
+  (*m_bindings)[KEY_ENTER]     = sigc::bind(sigc::mem_fun(*this, &DownloadList::receive_view_input), false);
 
   (*m_bindings)[KEY_UP]        = sigc::mem_fun(*this, &DownloadList::receive_prev);
   (*m_bindings)[KEY_DOWN]      = sigc::mem_fun(*this, &DownloadList::receive_next);
   (*m_bindings)[KEY_RIGHT]     = sigc::mem_fun(*this, &DownloadList::receive_view_download);
   (*m_bindings)['l']           = sigc::bind(sigc::mem_fun(*this, &DownloadList::receive_change), DISPLAY_LOG);
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/ui/download_list.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/ui/download_list.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/ui/download_list.h	2005-07-02 04:45:11.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/ui/download_list.h	2005-07-10 02:39:59.000000000 +0800
@@ -111,14 +111,14 @@
 
   void                receive_view_download();
   void                receive_exit_download();
 
   void                receive_check_hash();
 
-  void                receive_view_input();
-  void                receive_exit_input();
+  void                receive_view_input(bool useDefault);
+  void                receive_exit_input(bool useDefault);
 
   void                receive_change(Display d);
 
   void                task_update();
 
   void                setup_keys();
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/ui/Makefile.am /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/ui/Makefile.am
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/ui/Makefile.am	2005-06-29 04:50:30.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/ui/Makefile.am	2005-07-10 02:40:00.000000000 +0800
@@ -1,9 +1,10 @@
 noinst_LIBRARIES = libsub_ui.a
 
 libsub_ui_a_SOURCES = \
+	control.cc \
 	control.h \
 	download.cc \
 	download.h \
 	download_list.cc \
 	download_list.h \
 	element_base.h \
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/ui/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/ui/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/ui/Makefile.in	2005-06-29 05:42:33.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/ui/Makefile.in	2005-07-19 22:16:29.000000000 +0800
@@ -76,12 +76,13 @@
 am__include = @am__include@
 am__quote = @am__quote@
 install_sh = @install_sh@
 noinst_LIBRARIES = libsub_ui.a
 
 libsub_ui_a_SOURCES = \
+	control.cc \
 	control.h \
 	download.cc \
 	download.h \
 	download_list.cc \
 	download_list.h \
 	element_base.h \
@@ -109,27 +110,28 @@
 CONFIG_HEADER = $(top_builddir)/config.h
 CONFIG_CLEAN_FILES =
 LIBRARIES = $(noinst_LIBRARIES)
 
 libsub_ui_a_AR = $(AR) cru
 libsub_ui_a_LIBADD =
-am_libsub_ui_a_OBJECTS = download.$(OBJEXT) download_list.$(OBJEXT) \
-	element_download_list.$(OBJEXT) element_file_list.$(OBJEXT) \
-	element_log_complete.$(OBJEXT) element_peer_info.$(OBJEXT) \
-	element_peer_list.$(OBJEXT) element_string_list.$(OBJEXT) \
-	element_tracker_list.$(OBJEXT) root.$(OBJEXT)
+am_libsub_ui_a_OBJECTS = control.$(OBJEXT) download.$(OBJEXT) \
+	download_list.$(OBJEXT) element_download_list.$(OBJEXT) \
+	element_file_list.$(OBJEXT) element_log_complete.$(OBJEXT) \
+	element_peer_info.$(OBJEXT) element_peer_list.$(OBJEXT) \
+	element_string_list.$(OBJEXT) element_tracker_list.$(OBJEXT) \
+	root.$(OBJEXT)
 libsub_ui_a_OBJECTS = $(am_libsub_ui_a_OBJECTS)
 
 DEFS = @DEFS@
 DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
 CPPFLAGS = @CPPFLAGS@
 LDFLAGS = @LDFLAGS@
 LIBS = @LIBS@
 depcomp = $(SHELL) $(top_srcdir)/depcomp
 am__depfiles_maybe = depfiles
-@AMDEP_TRUE@DEP_FILES = ./$(DEPDIR)/download.Po \
+@AMDEP_TRUE@DEP_FILES = ./$(DEPDIR)/control.Po ./$(DEPDIR)/download.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/download_list.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/element_download_list.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/element_file_list.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/element_log_complete.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/element_peer_info.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/element_peer_list.Po \
@@ -173,12 +175,13 @@
 mostlyclean-compile:
 	-rm -f *.$(OBJEXT) core *.core
 
 distclean-compile:
 	-rm -f *.tab.c
 
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/control.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/download.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/download_list.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/element_download_list.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/element_file_list.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/element_log_complete.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/element_peer_info.Po@am__quote@
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/ui/root.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/ui/root.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.7/src/ui/root.cc	2005-07-02 04:45:25.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.3.0/src/ui/root.cc	2005-07-10 02:40:00.000000000 +0800
@@ -65,13 +65,13 @@
   m_windowStatusbar = new WStatusbar(&m_control->get_core());
   m_downloadList =    new DownloadList(m_control);
 
   m_control->get_display().push_back(m_windowStatusbar);
 
   m_downloadList->activate();
-  m_downloadList->slot_open_uri(sigc::mem_fun(m_control->get_core(), &core::Manager::insert));
+  //  m_downloadList->slot_open_uri(sigc::mem_fun(m_control->get_core(), &core::Manager::insert));
 }
 
 void
 Root::cleanup() {
   if (m_control == NULL)
     throw std::logic_error("Root::cleanup() called twice on the same object");
@@ -104,13 +104,13 @@
   m_bindings['S']           = sigc::bind(sigc::mem_fun(*this, &Root::receive_read_throttle), 5);
   m_bindings['X']           = sigc::bind(sigc::mem_fun(*this, &Root::receive_read_throttle), -5);
   m_bindings['D']           = sigc::bind(sigc::mem_fun(*this, &Root::receive_read_throttle), 50);
   m_bindings['C']           = sigc::bind(sigc::mem_fun(*this, &Root::receive_read_throttle), -50);
 
   m_bindings[KEY_RESIZE]    = sigc::mem_fun(m_control->get_display(), &display::Manager::adjust_layout);
-  m_bindings['\x11']        = sigc::bind(sigc::mem_fun(*m_control, &Control::set_shutdown_received), true);
+  m_bindings['\x11']        = sigc::mem_fun(*m_control, &Control::receive_shutdown);
 }
 
 void
 Root::receive_read_throttle(int t) {
   m_windowStatusbar->mark_dirty();
 
