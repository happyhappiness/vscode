diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/configure /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/configure
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/configure	2005-06-16 04:24:45.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/configure	2005-06-27 03:59:34.000000000 +0800
@@ -1,9 +1,9 @@
 #! /bin/sh
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.57 for rtorrent 0.2.5.
+# Generated by GNU Autoconf 2.57 for rtorrent 0.2.6.
 #
 # Report bugs to <jaris@ifi.uio.no>.
 #
 # Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002
 # Free Software Foundation, Inc.
 # This configure script is free software; the Free Software Foundation
@@ -265,14 +265,14 @@
 # only ac_max_sed_lines should be used.
 : ${ac_max_here_lines=38}
 
 # Identity of this package.
 PACKAGE_NAME='rtorrent'
 PACKAGE_TARNAME='rtorrent'
-PACKAGE_VERSION='0.2.5'
-PACKAGE_STRING='rtorrent 0.2.5'
+PACKAGE_VERSION='0.2.6'
+PACKAGE_STRING='rtorrent 0.2.6'
 PACKAGE_BUGREPORT='jaris@ifi.uio.no'
 
 ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO AMTAR install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM AWK SET_MAKE CXX CXXFLAGS LDFLAGS CPPFLAGS ac_ct_CXX EXEEXT OBJEXT DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CXXDEPMODE RANLIB ac_ct_RANLIB CC CFLAGS ac_ct_CC CCDEPMODE PKG_CONFIG STUFF_CFLAGS STUFF_LIBS LIBOBJS LTLIBOBJS'
 ac_subst_files=''
 
 # Initialize some variables set by options.
@@ -742,13 +742,13 @@
 # Report the --help message.
 #
 if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures rtorrent 0.2.5 to adapt to many kinds of systems.
+\`configure' configures rtorrent 0.2.6 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
 To assign environment variables (e.g., CC, CFLAGS...), specify them as
 VAR=VALUE.  See below for descriptions of some of the useful variables.
 
@@ -804,13 +804,13 @@
   --program-transform-name=PROGRAM   run sed PROGRAM on installed program names
 _ACEOF
 fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of rtorrent 0.2.5:";;
+     short | recursive ) echo "Configuration of rtorrent 0.2.6:";;
    esac
   cat <<\_ACEOF
 
 Optional Features:
   --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
@@ -893,13 +893,13 @@
   done
 fi
 
 test -n "$ac_init_help" && exit 0
 if $ac_init_version; then
   cat <<\_ACEOF
-rtorrent configure 0.2.5
+rtorrent configure 0.2.6
 generated by GNU Autoconf 2.57
 
 Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002
 Free Software Foundation, Inc.
 This configure script is free software; the Free Software Foundation
 gives unlimited permission to copy, distribute and modify it.
@@ -908,13 +908,13 @@
 fi
 exec 5>config.log
 cat >&5 <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by rtorrent $as_me 0.2.5, which was
+It was created by rtorrent $as_me 0.2.6, which was
 generated by GNU Autoconf 2.57.  Invocation command line was
 
   $ $0 $@
 
 _ACEOF
 {
@@ -1499,13 +1499,13 @@
 echo "$as_me: error: source directory already configured; run \"make distclean\" there first" >&2;}
    { (exit 1); exit 1; }; }
 fi
 
 # Define the identity of the package.
  PACKAGE=rtorrent
- VERSION=0.2.5
+ VERSION=0.2.6
 
 
 cat >>confdefs.h <<_ACEOF
 #define PACKAGE "$PACKAGE"
 _ACEOF
 
@@ -3793,37 +3793,37 @@
      echo "*** in your path, or set the PKG_CONFIG environment variable"
      echo "*** to the full path to pkg-config."
      echo "*** Or see http://www.freedesktop.org/software/pkgconfig to get pkg-config."
   else
      PKG_CONFIG_MIN_VERSION=0.9.0
      if $PKG_CONFIG --atleast-pkgconfig-version $PKG_CONFIG_MIN_VERSION; then
-        echo "$as_me:$LINENO: checking for sigc++-2.0 libtorrent >= 0.6.5" >&5
-echo $ECHO_N "checking for sigc++-2.0 libtorrent >= 0.6.5... $ECHO_C" >&6
+        echo "$as_me:$LINENO: checking for sigc++-2.0 libtorrent >= 0.6.6" >&5
+echo $ECHO_N "checking for sigc++-2.0 libtorrent >= 0.6.6... $ECHO_C" >&6
 
-        if $PKG_CONFIG --exists "sigc++-2.0 libtorrent >= 0.6.5" ; then
+        if $PKG_CONFIG --exists "sigc++-2.0 libtorrent >= 0.6.6" ; then
             echo "$as_me:$LINENO: result: yes" >&5
 echo "${ECHO_T}yes" >&6
             succeeded=yes
 
             echo "$as_me:$LINENO: checking STUFF_CFLAGS" >&5
 echo $ECHO_N "checking STUFF_CFLAGS... $ECHO_C" >&6
-            STUFF_CFLAGS=`$PKG_CONFIG --cflags "sigc++-2.0 libtorrent >= 0.6.5"`
+            STUFF_CFLAGS=`$PKG_CONFIG --cflags "sigc++-2.0 libtorrent >= 0.6.6"`
             echo "$as_me:$LINENO: result: $STUFF_CFLAGS" >&5
 echo "${ECHO_T}$STUFF_CFLAGS" >&6
 
             echo "$as_me:$LINENO: checking STUFF_LIBS" >&5
 echo $ECHO_N "checking STUFF_LIBS... $ECHO_C" >&6
-            STUFF_LIBS=`$PKG_CONFIG --libs "sigc++-2.0 libtorrent >= 0.6.5"`
+            STUFF_LIBS=`$PKG_CONFIG --libs "sigc++-2.0 libtorrent >= 0.6.6"`
             echo "$as_me:$LINENO: result: $STUFF_LIBS" >&5
 echo "${ECHO_T}$STUFF_LIBS" >&6
         else
             STUFF_CFLAGS=""
             STUFF_LIBS=""
             ## If we have a custom action on failure, don't print errors, but
             ## do set a variable so people can do so.
-            STUFF_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "sigc++-2.0 libtorrent >= 0.6.5"`
+            STUFF_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "sigc++-2.0 libtorrent >= 0.6.6"`
             echo $STUFF_PKG_ERRORS
         fi
 
 
 
      else
@@ -3833,25 +3833,25 @@
   fi
 
   if test $succeeded = yes; then
      CXXFLAGS="$CXXFLAGS $STUFF_CFLAGS $CURL_CFLAGS";
 		  LIBS="$LIBS $STUFF_LIBS $CURL_LIBS"
   else
-     { { echo "$as_me:$LINENO: error: Library requirements (sigc++-2.0 libtorrent >= 0.6.5) not met; consider adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a nonstandard prefix so pkg-config can find them." >&5
-echo "$as_me: error: Library requirements (sigc++-2.0 libtorrent >= 0.6.5) not met; consider adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a nonstandard prefix so pkg-config can find them." >&2;}
+     { { echo "$as_me:$LINENO: error: Library requirements (sigc++-2.0 libtorrent >= 0.6.6) not met; consider adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a nonstandard prefix so pkg-config can find them." >&5
+echo "$as_me: error: Library requirements (sigc++-2.0 libtorrent >= 0.6.6) not met; consider adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a nonstandard prefix so pkg-config can find them." >&2;}
    { (exit 1); exit 1; }; }
   fi
 
 
 
 cat >>confdefs.h <<\_ACEOF
 #define HAVE_CONFIG_H 1
 _ACEOF
 
 
-                                                                      ac_config_files="$ac_config_files Makefile src/Makefile src/core/Makefile src/display/Makefile src/input/Makefile src/ui/Makefile src/utils/Makefile"
+                                                                                ac_config_files="$ac_config_files Makefile doc/Makefile src/Makefile src/core/Makefile src/display/Makefile src/input/Makefile src/ui/Makefile src/utils/Makefile"
 cat >confcache <<\_ACEOF
 # This file is a shell script that caches the results of configure
 # tests run on this system so they can be shared between configure
 # scripts and configure runs, see configure's option --config-cache.
 # It is not useful on other systems.  If it contains results you don't
 # want to keep, you may remove or edit it.
@@ -4213,13 +4213,13 @@
   sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
 ## Running $as_me. ##
 _ASBOX
 } >&5
 cat >&5 <<_CSEOF
 
-This file was extended by rtorrent $as_me 0.2.5, which was
+This file was extended by rtorrent $as_me 0.2.6, which was
 generated by GNU Autoconf 2.57.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
   CONFIG_HEADERS  = $CONFIG_HEADERS
   CONFIG_LINKS    = $CONFIG_LINKS
   CONFIG_COMMANDS = $CONFIG_COMMANDS
@@ -4276,13 +4276,13 @@
 
 Report bugs to <bug-autoconf@gnu.org>."
 _ACEOF
 
 cat >>$CONFIG_STATUS <<_ACEOF
 ac_cs_version="\\
-rtorrent config.status 0.2.5
+rtorrent config.status 0.2.6
 configured by $0, generated by GNU Autoconf 2.57,
   with options \\"`echo "$ac_configure_args" | sed 's/[\\""\`\$]/\\\\&/g'`\\"
 
 Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001
 Free Software Foundation, Inc.
 This config.status script is free software; the Free Software Foundation
@@ -4388,12 +4388,13 @@
 cat >>$CONFIG_STATUS <<\_ACEOF
 for ac_config_target in $ac_config_targets
 do
   case "$ac_config_target" in
   # Handling of arguments.
   "Makefile" ) CONFIG_FILES="$CONFIG_FILES Makefile" ;;
+  "doc/Makefile" ) CONFIG_FILES="$CONFIG_FILES doc/Makefile" ;;
   "src/Makefile" ) CONFIG_FILES="$CONFIG_FILES src/Makefile" ;;
   "src/core/Makefile" ) CONFIG_FILES="$CONFIG_FILES src/core/Makefile" ;;
   "src/display/Makefile" ) CONFIG_FILES="$CONFIG_FILES src/display/Makefile" ;;
   "src/input/Makefile" ) CONFIG_FILES="$CONFIG_FILES src/input/Makefile" ;;
   "src/ui/Makefile" ) CONFIG_FILES="$CONFIG_FILES src/ui/Makefile" ;;
   "src/utils/Makefile" ) CONFIG_FILES="$CONFIG_FILES src/utils/Makefile" ;;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/configure.ac /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/configure.ac
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/configure.ac	2005-06-15 18:16:55.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/configure.ac	2005-06-26 05:32:10.000000000 +0800
@@ -1,7 +1,7 @@
-AC_INIT(rtorrent, 0.2.5, jaris@ifi.uio.no)
+AC_INIT(rtorrent, 0.2.6, jaris@ifi.uio.no)
 
 AM_INIT_AUTOMAKE
 AM_CONFIG_HEADER(config.h)
 
 sinclude(scripts/checks.m4)
 sinclude(scripts/common.m4)
@@ -17,20 +17,21 @@
 AC_SEARCH_LIBS(wbkgdset, ncurses curses,,echo "*** The ncurses library is required!";exit 1)
 
 TORRENT_CHECK_EXECINFO()
 TORRENT_CHECK_CURL()
 TORRENT_OTFD()
 
-PKG_CHECK_MODULES(STUFF, sigc++-2.0 libtorrent >= 0.6.5,
+PKG_CHECK_MODULES(STUFF, sigc++-2.0 libtorrent >= 0.6.6,
 	          CXXFLAGS="$CXXFLAGS $STUFF_CFLAGS $CURL_CFLAGS";
 		  LIBS="$LIBS $STUFF_LIBS $CURL_LIBS")
 
 AC_DEFINE(HAVE_CONFIG_H, 1, true if config.h was included)
 
 AC_OUTPUT([
 	Makefile
+	doc/Makefile
 	src/Makefile
 	src/core/Makefile
 	src/display/Makefile
 	src/input/Makefile
 	src/ui/Makefile
 	src/utils/Makefile
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/doc: faq.xml
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/doc: Makefile.am
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/doc: Makefile.in
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/doc: rtorrent.1
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/doc: rtorrent.1.txt
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/doc: rtorrent.1.xml
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/doc/rtorrent.rc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/doc/rtorrent.rc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/doc/rtorrent.rc	2005-06-09 02:01:39.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/doc/rtorrent.rc	2005-06-26 09:16:14.000000000 +0800
@@ -1,8 +1,9 @@
 # This is an example resource file for rTorrent. Copy to
-# ~/.rtorrent.rc and enable/modify the options as needed.
+# ~/.rtorrent.rc and enable/modify the options as needed. Remember to
+# uncomment the options you wish to enable.
 
 # Minumum amount of peers to connect per torrent, if available.
 #min_peers = 40
 
 # Minumum amount of peers to connect per torrent.
 #max_peers = 100
@@ -17,24 +18,40 @@
 #upload_rate = 0
 
 # Default directory to save downloaded files. Note it doesn't support
 # space yet.
 #directory = ./
 
+# Default session directory. Make sure you don't run multiple instance
+# of rtorrent using the same session directory. Perhaps using a
+# relative path?
+#session = 
+
 # The ip address reported to the tracker.
 #ip = 127.0.0.1
 
 # The ip address the listening socket and outgoing connections is
 # bound to.
 #bind = 127.0.0.1
 
 # Port range to use for listening.
 #port = 6890-6999
 
+# Check hash for finished torrents. Might be usefull until the bug is
+# fixed that causes lack of diskspace not to be properly reported.
+#check_hash = no
+
+#
+# Do not modify the following parameters unless you know what you're doing.
+#
+
 # Hash read-ahead controls how many MB to request the kernel to read
 # ahead. If the value is too low the disk may not be fully utilized,
 # while if too high the kernel might not be able to keep the read
 # pages in memory thus end up trashing.
 #hash_read_ahead = 10
 
 # Max number of files to keep open simultaniously.
 #max_open_files = 100
+
+# Dump data received from trackers to the files "./tracker_dump.<time>".
+#tracker_dump = no
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/Makefile.am /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/Makefile.am
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/Makefile.am	2005-06-08 06:19:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/Makefile.am	2005-06-27 03:57:37.000000000 +0800
@@ -1,10 +1,10 @@
-SUBDIRS = src
+SUBDIRS = \
+	doc \
+	src
 
 EXTRA_DIST= \
 	autogen.sh \
-	doc/rtorrent.1.txt \
-	doc/rtorrent.rc \
 	rak/algorithm.h \
 	rak/functional.h \
 	scripts/checks.m4 \
 	scripts/common.m4
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/Makefile.in	2005-06-16 04:24:38.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/Makefile.in	2005-06-27 03:59:32.000000000 +0800
@@ -73,18 +73,19 @@
 RANLIB = @RANLIB@
 STRIP = @STRIP@
 VERSION = @VERSION@
 am__include = @am__include@
 am__quote = @am__quote@
 install_sh = @install_sh@
-SUBDIRS = src
+SUBDIRS = \
+	doc \
+	src
+
 
 EXTRA_DIST = \
 	autogen.sh \
-	doc/rtorrent.1.txt \
-	doc/rtorrent.rc \
 	rak/algorithm.h \
 	rak/functional.h \
 	scripts/checks.m4 \
 	scripts/common.m4
 
 subdir = .
@@ -250,13 +251,13 @@
 GZIP_ENV = --best
 distcleancheck_listfiles = find . -type f -print
 
 distdir: $(DISTFILES)
 	$(am__remove_distdir)
 	mkdir $(distdir)
-	$(mkinstalldirs) $(distdir)/doc $(distdir)/rak $(distdir)/scripts
+	$(mkinstalldirs) $(distdir)/rak $(distdir)/scripts
 	@list='$(DISTFILES)'; for file in $$list; do \
 	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
 	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
 	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
 	    dir="/$$dir"; \
 	    $(mkinstalldirs) "$(distdir)$$dir"; \
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/README /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/README
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/README	2005-06-02 00:21:08.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/README	2005-06-24 00:51:30.000000000 +0800
@@ -41,14 +41,16 @@
               paths. Arrows/C^f/C^b for navigation, enter/C^m.
 
   Up/Down   - Select torrent
 
   Right     - View torrent
 
-  Ctrl-S    - Start torrent
-  Ctrl-D    - Stop/delete torrent
+  ^s        - Start torrent
+  ^d        - Stop/delete torrent
+
+  ^r        - Manually start a hash check of the torrent
 
 
 In torrent view:
 
   Up/Down   - Select peer
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/download.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/download.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/download.cc	2005-04-10 05:29:22.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/download.cc	2005-06-23 19:49:42.000000000 +0800
@@ -37,12 +37,19 @@
   m_connTrackerSucceded = m_download.signal_tracker_succeded(sigc::bind(sigc::mem_fun(*this, &Download::receive_tracker_msg), ""));
   m_connTrackerFailed = m_download.signal_tracker_failed(sigc::mem_fun(*this, &Download::receive_tracker_msg));
   m_connStorageError = m_download.signal_storage_error(sigc::mem_fun(*this, &Download::receive_tracker_msg));
 }
 
 void
+Download::set_root_directory(const std::string& d) {
+  m_download.set_root_dir(d +
+			  (!d.empty() && *d.rbegin() != '/' ? "/" : "") +
+			  (m_download.get_entry_size() > 1 ? m_download.get_name() : ""));
+}
+
+void
 Download::release_download() {
   m_connTrackerSucceded.disconnect();
   m_connTrackerFailed.disconnect();
   m_connStorageError.disconnect();
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/download.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/download.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/download.h	2005-04-10 05:20:05.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/download.h	2005-06-23 19:49:43.000000000 +0800
@@ -28,29 +28,31 @@
 
 namespace core {
 
 class Download {
 public:
   bool               is_open()                       { return m_download.is_open(); }
-  bool               is_done()                       { return m_download.get_chunks_done() == m_download.get_chunks_total(); }
+  inline bool        is_done();
 
   void               set_download(torrent::Download d);
   void               release_download();
 
   torrent::Download& get_download()                  { return m_download; }
   std::string        get_hash()                      { return m_download.get_hash(); }
   
   const std::string& get_message()                   { return m_message; }
 
-  void               start()                         { m_download.start(); }
-  void               stop()                          { m_download.stop(); }
+  void               set_root_directory(const std::string& d);
 
-  void               open()                          { m_download.open(); }
-  void               close()                         { m_download.close(); }
+  template <typename Ret, Ret (torrent::Download::*func)()>
+  void               call()                                                { (m_download.*func)(); }
 
-  bool operator == (const std::string& str)          { return str == m_download.get_hash(); }
+  template <typename Ret, typename Arg1, Ret (torrent::Download::*func)(Arg1)>
+  void               call(Arg1 a1)                                         { (m_download.*func)(a1); }
+
+  bool operator == (const std::string& str)                                { return str == m_download.get_hash(); }
 
 private:
   void               receive_tracker_msg(std::string msg);
   void               receive_storage_error(std::string msg);
 
   torrent::Download  m_download;
@@ -59,9 +61,14 @@
 
   sigc::connection   m_connTrackerSucceded;
   sigc::connection   m_connTrackerFailed;
   sigc::connection   m_connStorageError;
 };
 
+inline bool
+Download::is_done() {
+  return m_download.get_chunks_done() == m_download.get_chunks_total();
+}
+
 }
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/download_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/download_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/download_list.cc	2005-03-17 04:35:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/download_list.cc	2005-06-23 19:49:42.000000000 +0800
@@ -20,12 +20,13 @@
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
 #include <algorithm>
+#include <sigc++/bind.h>
 #include <torrent/torrent.h>
 
 #include "rak/functional.h"
 
 #include "download.h"
 #include "download_list.h"
@@ -35,28 +36,71 @@
 DownloadList::iterator
 DownloadList::insert(std::istream* str) {
   torrent::Download d = torrent::download_create(str);
 
   iterator itr = Base::insert(end(), new Download);
   (*itr)->set_download(d);
+  (*itr)->get_download().signal_download_done(sigc::bind(sigc::mem_fun(*this, &DownloadList::finished), *itr));
+
+  m_slotMapInsert.for_each(*itr);
 
   return itr;
 }
 
 DownloadList::iterator
 DownloadList::erase(iterator itr) {
-  (*itr)->release_download();
+  m_slotMapErase.for_each(*itr);
 
+  (*itr)->release_download();
   torrent::download_remove((*itr)->get_hash());
   delete *itr;
 
   return Base::erase(itr);
 }
 
 void
+DownloadList::open(Download* d) {
+  if (d->get_download().is_open())
+    return;
+
+  m_slotMapOpen.for_each(d);
+}
+
+void
+DownloadList::close(Download* d) {
+  if (!d->get_download().is_open())
+    return;
+
+  stop(d);
+  m_slotMapClose.for_each(d);
+}
+
+void
+DownloadList::start(Download* d) {
+  if (d->get_download().is_active())
+    return;
+
+  open(d);
+  m_slotMapStart.for_each(d);
+}
+
+void
+DownloadList::stop(Download* d) {
+  if (!d->get_download().is_active())
+    return;
+
+  m_slotMapStop.for_each(d);
+}
+
+void
 DownloadList::clear() {
   std::for_each(begin(), end(), rak::call_delete<Download>());
 
   Base::clear();
 }
 
+void
+DownloadList::finished(Download* d) {
+  m_slotMapFinished.for_each(d);
+}
+
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/download_list.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/download_list.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/download_list.h	2005-03-18 08:16:30.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/download_list.h	2005-06-23 19:49:42.000000000 +0800
@@ -23,12 +23,14 @@
 #ifndef RTORRENT_CORE_DOWNLOAD_LIST_H
 #define RTORRENT_CORE_DOWNLOAD_LIST_H
 
 #include <iosfwd>
 #include <list>
 
+#include "download_slot_map.h"
+
 namespace core {
 
 class Download;
 
 class DownloadList : private std::list<Download*> {
 public:
@@ -48,16 +50,42 @@
 
   using Base::empty;
   using Base::size;
 
   ~DownloadList() { clear(); }
 
-  iterator  insert(std::istream* str);
-  iterator  erase(iterator itr);
+  iterator            insert(std::istream* str);
+  iterator            erase(iterator itr);
+
+  void                open(Download* d);
+  void                close(Download* d);
+
+  void                start(Download* d);
+  void                stop(Download* d);
+
+  DownloadSlotMap&    slot_map_insert()     { return m_slotMapInsert; }
+  DownloadSlotMap&    slot_map_erase()      { return m_slotMapErase; }
+  DownloadSlotMap&    slot_map_open()       { return m_slotMapOpen; }
+  DownloadSlotMap&    slot_map_close()      { return m_slotMapClose; }
+  DownloadSlotMap&    slot_map_start()      { return m_slotMapStart; }
+  DownloadSlotMap&    slot_map_stop()       { return m_slotMapStop; }
+
+  DownloadSlotMap&    slot_map_finished()   { return m_slotMapFinished; }
 
 private:
-  void      clear();
+  void                clear();
+
+  void                finished(Download* d);
+
+  DownloadSlotMap     m_slotMapInsert;
+  DownloadSlotMap     m_slotMapErase;
+  DownloadSlotMap     m_slotMapOpen;
+  DownloadSlotMap     m_slotMapClose;
+  DownloadSlotMap     m_slotMapStart;
+  DownloadSlotMap     m_slotMapStop;
+
+  DownloadSlotMap     m_slotMapFinished;
 };
 
 }
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/download_slot_map.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/download_slot_map.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/download_slot_map.h	2005-06-01 00:21:49.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/download_slot_map.h	2005-06-23 19:49:43.000000000 +0800
@@ -33,15 +33,16 @@
 
 class DownloadSlotMap : public std::map<std::string, sigc::slot1<void, Download*> > {
 public:
   typedef sigc::slot1<void, Download*>        SlotDownload;
   typedef std::map<std::string, SlotDownload> Base;
   
-  void insert(const std::string& key, SlotDownload s) { Base::operator[](key) = s; }
+  void                insert(const std::string& key, SlotDownload s)    { Base::operator[](key) = s; }
+  void                erase(const std::string& key) {}
 
-  void for_each(Download* d);
+  void                for_each(Download* d);
 };
 
 inline void
 DownloadSlotMap::for_each(Download* d) {
   for (iterator itr = begin(), last = end(); itr != last; ++itr)
     itr->second(d);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/download_store.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/download_store.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/download_store.cc	2005-03-17 06:58:44.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/download_store.cc	2005-06-26 09:06:21.000000000 +0800
@@ -33,28 +33,20 @@
 #include "download.h"
 #include "download_store.h"
 
 namespace core {
 
 void
-DownloadStore::activate(const std::string& path) {
+DownloadStore::use(const std::string& path) {
   m_path = path;
 
-  if (m_path.empty())
-    throw std::logic_error("core::DownloadStore::activate(...) received an empty path");
-
   if (*m_path.rbegin() != '/')
     m_path += '/';
 }
 
 void
-DownloadStore::disable() {
-  m_path = "";
-}
-
-void
 DownloadStore::save(Download* d) {
   if (!is_active())
     return;
 
   std::fstream f(create_filename(d).c_str(), std::ios::out | std::ios::trunc);
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/download_store.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/download_store.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/download_store.h	2005-03-17 04:35:58.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/download_store.h	2005-06-26 09:06:04.000000000 +0800
@@ -31,14 +31,14 @@
 
 class Download;
 
 class DownloadStore {
 public:
 
-  void              activate(const std::string& path);
-  void              disable();
+  // Disable by passing an empty string.
+  void              use(const std::string& path);
 
   bool              is_active() { return !m_path.empty(); }
 
   void              save(Download* d);
   void              remove(Download* d);
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/hash_queue.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/hash_queue.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/hash_queue.h	2005-05-26 09:16:03.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/hash_queue.h	2005-06-21 04:17:43.000000000 +0800
@@ -51,41 +51,41 @@
   using Base::front;
   using Base::back;
 
   using Base::empty;
   using Base::size;
 
-  void insert(Download* d, Slot s);
+  void                insert(Download* d, Slot s);
 
   // It's safe to try to remove downloads not in the queue. The hash
   // checking is not stopped if it has already started.
-  void remove(Download* d);
+  void                remove(Download* d);
 
-  iterator find(Download* d);
+  iterator            find(Download* d);
 
 private:
-  void receive_hash_done(Download* d);
+  void                receive_hash_done(Download* d);
 
-  void fill_queue();
+  void                fill_queue();
 };
 
 class HashQueueNode {
 public:
   HashQueueNode(Download* d, HashQueue::Slot s) : m_download(d), m_slot(s) {}
-  ~HashQueueNode()                                    { disconnect(); }
+  ~HashQueueNode()                                       { disconnect(); }
 
-  void             disconnect()                       { m_connection.disconnect(); }
+  void                disconnect()                       { m_connection.disconnect(); }
 
-  Download*        get_download()                     { return m_download; }
-  HashQueue::Slot  get_slot()                         { return m_slot; }
+  Download*           get_download()                     { return m_download; }
+  HashQueue::Slot     get_slot()                         { return m_slot; }
 
-  void             set_connection(sigc::connection c) { m_connection = c; }
+  void                set_connection(sigc::connection c) { m_connection = c; }
 
 private:
-  Download*        m_download;
-  HashQueue::Slot  m_slot;
-  sigc::connection m_connection;
+  Download*           m_download;
+  HashQueue::Slot     m_slot;
+  sigc::connection    m_connection;
 };
 
 }
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/manager.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/manager.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/manager.cc	2005-06-07 08:41:45.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/manager.cc	2005-06-26 08:51:21.000000000 +0800
@@ -24,38 +24,61 @@
 
 #include <stdexcept>
 #include <cstdio>
 #include <cstring>
 #include <fstream>
 #include <istream>
-#include <sstream>
-#include <iterator>
 #include <sigc++/bind.h>
+#include <sigc++/hide.h>
 #include <torrent/bencode.h>
 #include <torrent/exceptions.h>
 #include <torrent/torrent.h>
 
 #include "download.h"
 #include "manager.h"
 #include "curl_get.h"
 
 namespace core {
 
+static void
+connect_signal_network_log(Download* d, torrent::Download::SlotString s) {
+  d->get_download().signal_network_log(s);
+}
+
 void
 Manager::initialize() {
   torrent::Http::set_factory(m_poll.get_http_factory());
   m_httpQueue.slot_factory(m_poll.get_http_factory());
 
   CurlStack::init();
 
-  //torrent::initialize();
-
   if (!torrent::listen_open(m_portFirst, m_portLast))
     throw std::runtime_error("Could not open port for listening.");
 
-  // Register log signals.
+  // Register slots to be called when a download is inserted/erased,
+  // opened or closed.
+  m_downloadList.slot_map_insert().insert("2_connect_network_log", sigc::bind(sigc::ptr_fun(&connect_signal_network_log), sigc::mem_fun(m_logComplete, &Log::push_front)));
+  m_downloadList.slot_map_insert().insert("3_manager_start",       sigc::mem_fun(*this, &Manager::start));
+  m_downloadList.slot_map_insert().insert("4_store_save",          sigc::mem_fun(m_downloadStore, &DownloadStore::save));
+
+  m_downloadList.slot_map_erase().insert("1_hash_queue_remove",    sigc::mem_fun(m_hashQueue, &HashQueue::remove));
+  m_downloadList.slot_map_erase().insert("1_store_remove",         sigc::mem_fun(m_downloadStore, &DownloadStore::remove));
+
+  //m_downloadList.slot_map_open().insert("1_download_open",         sigc::mem_fun(&Download::open));
+  m_downloadList.slot_map_open().insert("1_download_open",         sigc::mem_fun(&Download::call<void, &torrent::Download::open>));
+
+  // Currently does not call stop, might want to add a function that
+  // checks if we're running, and if so stop?
+  m_downloadList.slot_map_close().insert("1_download_close",       sigc::mem_fun(&Download::call<void, &torrent::Download::close>));
+  m_downloadList.slot_map_close().insert("1_hash_queue_remove",    sigc::mem_fun(m_hashQueue, &HashQueue::remove));
+
+  m_downloadList.slot_map_start().insert("1_download_start",       sigc::mem_fun(&Download::call<void, &torrent::Download::start>));
+
+  m_downloadList.slot_map_stop().insert("1_download_stop",         sigc::mem_fun(&Download::call<void, &torrent::Download::stop>));
+  m_downloadList.slot_map_stop().insert("2_hash_resume_save",      sigc::mem_fun(&Download::call<void, &torrent::Download::hash_resume_save>));
+  m_downloadList.slot_map_stop().insert("3_store_save",            sigc::mem_fun(m_downloadStore, &DownloadStore::save));
 }
 
 void
 Manager::cleanup() {
   // Need to disconnect log signals? Not really since we won't receive
   // any more.
@@ -63,82 +86,89 @@
   torrent::cleanup();
   core::CurlStack::cleanup();
 }
 
 void
 Manager::insert(std::string uri) {
-  if (std::strncmp(uri.c_str(), "http://", 7))
-    create_file(uri);
-  else
+  if (std::strncmp(uri.c_str(), "http://", 7) == 0) {
     create_http(uri);
+  } else {
+    std::fstream f(uri.c_str(), std::ios::in);
+    create_final(&f);
+  }
 }
 
-Manager::iterator
-Manager::erase(DownloadList::iterator itr) {
+Manager::DListItr
+Manager::erase(DListItr itr) {
   if ((*itr)->get_download().is_active())
     throw std::logic_error("core::Manager::erase(...) called on an active download");
 
   if (!(*itr)->get_download().is_open())
     throw std::logic_error("core::Manager::erase(...) called on an closed download");
 
-  m_hashQueue.remove(*itr);
-  m_downloadStore.remove(*itr);
-
   return m_downloadList.erase(itr);
 }  
 
 void
 Manager::start(Download* d) {
   try {
     if (d->get_download().is_active())
       return;
 
     if (!d->get_download().is_open())
-      d->open();
+      m_downloadList.open(d);
 
     if (d->get_download().is_hash_checked())
-      d->start();
+      m_downloadList.start(d);
     else
       // This can cause infinit loops.
-      m_hashQueue.insert(d, sigc::mem_fun(d, &Download::start));
+      m_hashQueue.insert(d, sigc::bind(sigc::mem_fun(m_downloadList, &DownloadList::start), d));
 
   } catch (torrent::local_error& e) {
     m_logImportant.push_front(e.what());
     m_logComplete.push_front(e.what());
   }
 }
 
 void
 Manager::stop(Download* d) {
   try {
-    m_hashQueue.remove(d);
-    d->stop();
-
-    if (d->get_download().is_hash_checked())
-      d->get_download().hash_save();
-
-    m_downloadStore.save(d);
+    m_downloadList.stop(d);
 
   } catch (torrent::local_error& e) {
     m_logImportant.push_front(e.what());
     m_logComplete.push_front(e.what());
   }
 }
 
 void
-Manager::receive_http_failed(std::string msg) {
-  m_logImportant.push_front("Http download error: \"" + msg + "\"");
-  m_logComplete.push_front("Http download error: \"" + msg + "\"");
-}
+Manager::check_hash(Download* d) {
+  bool restart = d->get_download().is_active();
 
-void
-Manager::create_file(const std::string& uri) {
-  std::fstream f(uri.c_str(), std::ios::in);
-  
-  create_final(&f);
-}
+  try {
+    m_downloadList.close(d);
+    d->get_download().hash_resume_clear();
+    m_downloadList.open(d);
+
+    if (d->get_download().is_hash_checking() ||
+	d->get_download().is_hash_checked())
+      throw std::logic_error("Manager::check_hash(...) closed the torrent but is_hash_check{ing,ed}() == true");
+
+    if (m_hashQueue.find(d) != m_hashQueue.end())
+      throw std::logic_error("Manager::check_hash(...) closed the torrent but it was found in m_hashQueue");
+
+    if (restart)
+      m_hashQueue.insert(d, sigc::bind(sigc::mem_fun(m_downloadList, &DownloadList::start), d));
+    else
+      m_hashQueue.insert(d, sigc::slot0<void>());
+
+  } catch (torrent::local_error& e) {
+    m_logImportant.push_front(e.what());
+    m_logComplete.push_front(e.what());
+  }
+}  
 
 void
 Manager::create_http(const std::string& uri) {
   core::HttpQueue::iterator itr = m_httpQueue.insert(uri);
 
   (*itr)->signal_done().slots().push_front(sigc::bind(sigc::mem_fun(*this, &core::Manager::create_final),
@@ -146,48 +176,22 @@
   (*itr)->signal_failed().slots().push_front(sigc::mem_fun(*this, &core::Manager::receive_http_failed));
 }
 
 void
 Manager::create_final(std::istream* s) {
   try {
-    iterator itr = m_downloadList.insert(s);
-  
-    setup_download(*itr);
-    start(*itr);
-
-    m_downloadStore.save(*itr);
+    m_downloadList.insert(s);
 
   } catch (torrent::local_error& e) {
     // What to do? Keep in list for now.
     m_logImportant.push_front(e.what());
     m_logComplete.push_front(e.what());
   }
 }
 
 void
-Manager::setup_download(Download* d) {
-  m_defaultSettings.for_each(d);
-
-  if (m_debugTracker >= 0)
-    d->get_download().signal_tracker_dump(sigc::mem_fun(*this, &Manager::receive_debug_tracker));
-
-  // If we want to monitor network stuff.
-  d->get_download().signal_network_log(sigc::mem_fun(m_logComplete, &Log::push_front));
-}
-
-void
-Manager::receive_debug_tracker(std::istream* s) {
-  std::stringstream filename;
-  filename << "./tracker_dump." << m_debugTracker++;
-
-  std::fstream out(filename.str().c_str(), std::ios::out | std::ios::trunc);
-
-  if (!out.is_open())
-    return;
-  
-  s->seekg(0);
-
-  std::copy(std::istream_iterator<char>(*s), std::istream_iterator<char>(),
-	    std::ostream_iterator<char>(out));
+Manager::receive_http_failed(std::string msg) {
+  m_logImportant.push_front("Http download error: \"" + msg + "\"");
+  m_logComplete.push_front("Http download error: \"" + msg + "\"");
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/manager.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/manager.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/core/manager.h	2005-06-07 08:41:32.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/core/manager.h	2005-06-26 08:50:41.000000000 +0800
@@ -23,13 +23,12 @@
 #ifndef RTORRENT_CORE_MANAGER_H
 #define RTORRENT_CORE_MANAGER_H
 
 #include <iosfwd>
 
 #include "download_list.h"
-#include "download_slot_map.h"
 #include "download_store.h"
 #include "hash_queue.h"
 #include "http_queue.h"
 #include "poll.h"
 #include "log.h"
 
@@ -38,68 +37,57 @@
 }
 
 namespace core {
 
 class Manager {
 public:
-  typedef DownloadList::iterator                    iterator;
+  typedef DownloadList::iterator                    DListItr;
   typedef sigc::slot1<void, DownloadList::iterator> SlotReady;
   typedef sigc::slot0<void>                         SlotFailed;
 
-  Manager() : m_portFirst(6890), m_portLast(6999), m_debugTracker(-1) {}
+  Manager() : m_portFirst(6890), m_portLast(6999) {}
 
   DownloadList&       get_download_list()                 { return m_downloadList; }
   DownloadStore&      get_download_store()                { return m_downloadStore; }
   HashQueue&          get_hash_queue()                    { return m_hashQueue; }
   HttpQueue&          get_http_queue()                    { return m_httpQueue; }
 
-  DownloadSlotMap&    get_default_settings()              { return m_defaultSettings; }
-
   Poll&               get_poll()                          { return m_poll; }
   Log&                get_log_important()                 { return m_logImportant; }
   Log&                get_log_complete()                  { return m_logComplete; }
 
   void                initialize();
   void                cleanup();
 
   void                insert(std::string uri);
-  iterator            erase(DownloadList::iterator itr);
+  DListItr            erase(DListItr itr);
 
   void                start(Download* d);
   void                stop(Download* d);
 
-  void                set_port_range(int a, int b)            { m_portFirst = a; m_portLast = b; }
+  void                check_hash(Download* d);
 
-  void                debug_tracker()                         { m_debugTracker = 0; }
+  void                set_port_range(int a, int b)            { m_portFirst = a; m_portLast = b; }
 
 private:
-  void                receive_http_failed(std::string msg);
-
-  void                create_file(const std::string& uri);
   void                create_http(const std::string& uri);
-
   void                create_final(std::istream* s);
 
-  void                setup_download(Download* itr);
-
   void                receive_debug_tracker(std::istream* s);
+  void                receive_http_failed(std::string msg);
 
   DownloadList        m_downloadList;
   DownloadStore       m_downloadStore;
   HashQueue           m_hashQueue;
   HttpQueue           m_httpQueue;
 
-  DownloadSlotMap     m_defaultSettings;
-
   Poll                m_poll;
   Log                 m_logImportant;
   Log                 m_logComplete;
 
   int                 m_portFirst;
   int                 m_portLast;
-
-  int                 m_debugTracker;
 };
 
 }
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/display/canvas.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/display/canvas.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/display/canvas.h	2005-06-15 17:22:53.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/display/canvas.h	2005-06-23 19:49:43.000000000 +0800
@@ -47,12 +47,13 @@
   int         get_height()                                     { int x, y; getmaxyx(m_window, y, x); return y; }
 
   chtype      get_background()                                 { return getbkgd(m_window); }
   void        set_background(chtype c)                         { return wbkgdset(m_window, c); }
 
   void        erase()                                          { werase(m_window); }
+  static void erase_std()                                      { werase(stdscr); }
 
   void        print_border(chtype ls, chtype rs,
 			   chtype ts, chtype bs,
 			   chtype tl, chtype tr,
 			   chtype bl, chtype br)               { wborder(m_window, ls, rs, ts, bs, tl, tr, bl, br); }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/display/utils.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/display/utils.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/display/utils.cc	2005-04-20 22:16:05.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/display/utils.cc	2005-06-20 03:56:07.000000000 +0800
@@ -19,13 +19,12 @@
 //
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
-#include <ctime>
 #include <sstream>
 #include <iomanip>
 
 #include "core/download.h"
 #include "utils/timer.h"
 
@@ -65,7 +64,24 @@
   
   str << std::setw(2) << u->tm_hour << ':' << std::setw(2) << u->tm_min << ':' << std::setw(2) << u->tm_sec;
 
   return str.str();
 }
 
+std::string
+print_ddmmyyyy(time_t t) {
+  std::tm *u = std::gmtime(&t);
+  
+  if (u == NULL)
+    return "inv_time";
+
+  std::stringstream str;
+  str.fill('0');
+  
+  str << std::setw(2) << u->tm_mday << '/'
+      << std::setw(2) << u->tm_mon << '/'
+      << std::setw(4) << (1900 + u->tm_year);
+
+  return str.str();
+}
+
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/display/utils.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/display/utils.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/display/utils.h	2005-03-17 04:35:55.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/display/utils.h	2005-06-20 03:30:24.000000000 +0800
@@ -20,12 +20,13 @@
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #ifndef RTORRENT_DISPLAY_UTILS_H
 #define RTORRENT_DISPLAY_UTILS_H
 
+#include <ctime>
 #include <string>
 
 namespace core {
   class Download;
 }
 
@@ -35,10 +36,11 @@
 
 namespace display {
 
 std::string print_download_status(core::Download* d);
 
 std::string print_hhmmss(utils::Timer t);
+std::string print_ddmmyyyy(time_t t);
 
 }
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/display/window_peer_info.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/display/window_peer_info.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/display/window_peer_info.cc	2005-03-17 04:35:55.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/display/window_peer_info.cc	2005-06-20 03:38:07.000000000 +0800
@@ -25,12 +25,13 @@
 #include <stdexcept>
 
 #include "core/download.h"
 
 #include "utils/parse.h"
 #include "canvas.h"
+#include "utils.h"
 #include "window_peer_info.h"
 
 namespace display {
 
 WindowPeerInfo::WindowPeerInfo(core::Download* d, PList* l, PList::iterator* f) :
   Window(new Canvas, true),
@@ -44,18 +45,20 @@
   m_nextDraw = utils::Timer::cache().round_seconds() + 1000000;
   m_canvas->erase();
 
   int y = 0;
   torrent::Download d = m_download->get_download();
 
-  m_canvas->print(0, y++, "Hash: %s", utils::string_to_hex(d.get_hash()).c_str());
-  m_canvas->print(0, y++, "Id:   %s", utils::escape_string(d.get_id()).c_str());
-  m_canvas->print(0, y++, "Chunks: %u / %u * %u",
+  m_canvas->print(0, y++, "Hash:    %s", utils::string_to_hex(d.get_hash()).c_str());
+  m_canvas->print(0, y++, "Id:      %s", utils::escape_string(d.get_id()).c_str());
+  m_canvas->print(0, y++, "Chunks:  %u / %u * %u",
 		  d.get_chunks_done(),
 		  d.get_chunks_total(),
 		  d.get_chunks_size());
+  m_canvas->print(0, y++, "Created: %s",
+		  print_ddmmyyyy(static_cast<time_t>(d.get_creation_date())).c_str());
 
   y++;
 
   if (*m_focus == m_list->end()) {
     m_canvas->print(0, y++, "No peer in focus");
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/main.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/main.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/main.cc	2005-06-15 05:00:41.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/main.cc	2005-06-26 09:07:29.000000000 +0800
@@ -19,36 +19,38 @@
 //
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
-#include <string>
-#include <stdexcept>
-#include <iostream>
 #include <fstream>
+#include <iostream>
+#include <iterator>
+#include <stdexcept>
+#include <string>
 #include <stdlib.h>
-#include <torrent/http.h>
-#include <torrent/torrent.h>
+#include <sstream>
 #include <sigc++/bind.h>
 #include <sigc++/retype_return.h>
+#include <torrent/http.h>
+#include <torrent/torrent.h>
 
 #ifdef USE_EXECINFO
 #include <execinfo.h>
 #endif
 
 #include "core/download.h"
 #include "display/canvas.h"
 #include "display/window.h"
 #include "ui/control.h"
 #include "ui/root.h"
 #include "input/bindings.h"
 
+#include "utils/task.h"
 #include "utils/timer.h"
 #include "utils/directory.h"
-#include "utils/task_schedule.h"
 
 #include "signal_handler.h"
 #include "option_file.h"
 #include "option_handler.h"
 #include "option_handler_rules.h"
 #include "option_parser.h"
@@ -57,12 +59,16 @@
 
 bool is_shutting_down = false;
 
 void do_panic(int signum);
 void print_help();
 
+namespace utils {
+  TaskScheduler taskScheduler;
+}
+
 bool
 is_resized() {
   static int x = 0;
   static int y = 0;
   
   bool r = display::Canvas::get_screen_width() != x || display::Canvas::get_screen_height() != y;
@@ -84,53 +90,54 @@
 		  std::bind1st(std::mem_fun(&core::Manager::stop), &c->get_core()));
 
   } else {
     // Close all torrents, this will stop all tracker connections and cause
     // a quick shutdown.
     std::for_each(c->get_core().get_download_list().begin(), c->get_core().get_download_list().end(),
-		  std::mem_fun(&core::Download::close));
+		  std::mem_fun(&core::Download::call<void, &torrent::Download::close>));
   }
 }
 
 int
 parse_options(ui::Control* c, OptionHandler* optionHandler, int argc, char** argv) {
   OptionParser optionParser;
 
   // Converted.
   optionParser.insert_flag('h', sigc::ptr_fun(&print_help));
-  optionParser.insert_flag('t', sigc::mem_fun(c->get_core(), &core::Manager::debug_tracker));
 
   optionParser.insert_option('b', sigc::bind<0>(sigc::mem_fun(*optionHandler, &OptionHandler::process), "bind"));
   optionParser.insert_option('d', sigc::bind<0>(sigc::mem_fun(*optionHandler, &OptionHandler::process), "directory"));
   optionParser.insert_option('i', sigc::bind<0>(sigc::mem_fun(*optionHandler, &OptionHandler::process), "ip"));
   optionParser.insert_option('p', sigc::bind<0>(sigc::mem_fun(*optionHandler, &OptionHandler::process), "port"));
-  optionParser.insert_option('s', sigc::mem_fun(c->get_core().get_download_store(), &core::DownloadStore::activate));
+  optionParser.insert_option('s', sigc::bind<0>(sigc::mem_fun(*optionHandler, &OptionHandler::process), "session"));
 
   optionParser.insert_option_list('o', sigc::mem_fun(*optionHandler, &OptionHandler::process));
 
   return optionParser.process(argc, argv);
 }
 
 void
 initialize_option_handler(ui::Control* c, OptionHandler* optionHandler) {
-  core::DownloadSlotMap* dsm = &c->get_core().get_default_settings();
-
-  optionHandler->insert("min_peers",   new OptionHandlerDownloadInt(dsm, &apply_download_min_peers, &validate_download_peers));
-  optionHandler->insert("max_peers",   new OptionHandlerDownloadInt(dsm, &apply_download_max_peers, &validate_download_peers));
-  optionHandler->insert("max_uploads", new OptionHandlerDownloadInt(dsm, &apply_download_max_uploads, &validate_download_peers));
+  optionHandler->insert("max_peers",       new OptionHandlerInt(c, &apply_download_max_peers, &validate_download_peers));
+  optionHandler->insert("min_peers",       new OptionHandlerInt(c, &apply_download_min_peers, &validate_download_peers));
+  optionHandler->insert("max_uploads",     new OptionHandlerInt(c, &apply_download_max_uploads, &validate_download_peers));
 
   optionHandler->insert("download_rate",   new OptionHandlerInt(c, &apply_global_download_rate, &validate_rate));
   optionHandler->insert("upload_rate",     new OptionHandlerInt(c, &apply_global_upload_rate, &validate_rate));
-  optionHandler->insert("hash_read_ahead", new OptionHandlerInt(c, &apply_hash_read_ahead, &validate_read_ahead));
-  optionHandler->insert("max_open_files",  new OptionHandlerInt(c, &apply_max_open_files, &validate_fd));
 
-  optionHandler->insert("directory", new OptionHandlerDownloadString(dsm, &apply_download_directory, &validate_directory));
+  optionHandler->insert("bind",            new OptionHandlerString(c, &apply_bind, &validate_ip));
+  optionHandler->insert("ip",              new OptionHandlerString(c, &apply_ip, &validate_ip));
+  optionHandler->insert("port",            new OptionHandlerString(c, &apply_port_range, &validate_port_range));
 
-  optionHandler->insert("ip",   new OptionHandlerString(c, &apply_ip, &validate_ip));
-  optionHandler->insert("bind", new OptionHandlerString(c, &apply_bind, &validate_ip));
-  optionHandler->insert("port", new OptionHandlerString(c, &apply_port_range, &validate_port_range));
+  optionHandler->insert("check_hash",      new OptionHandlerString(c, &apply_check_hash, &validate_yes_no));
+  optionHandler->insert("directory",       new OptionHandlerString(c, &apply_download_directory, &validate_directory));
+
+  optionHandler->insert("hash_read_ahead", new OptionHandlerInt(c, &apply_hash_read_ahead, &validate_read_ahead));
+  optionHandler->insert("max_open_files",  new OptionHandlerInt(c, &apply_max_open_files, &validate_fd));
+  optionHandler->insert("session",         new OptionHandlerString(c, &apply_session_directory, &validate_directory));
+  optionHandler->insert("tracker_dump",    new OptionHandlerString(c, &apply_tracker_dump, &validate_yes_no));
 }
 
 void
 load_option_file(const std::string& filename, OptionHandler* optionHandler, bool require = false) {
   std::fstream f(filename.c_str(), std::ios::in);
 
@@ -216,39 +223,44 @@
       if (uiRoot.get_shutdown_received()) {
 	do_shutdown(&uiControl);
 	uiRoot.set_shutdown_received(false);
       }
 
       utils::Timer::update();
-      utils::TaskSchedule::perform(utils::Timer::cache());
+      utils::taskScheduler.execute(utils::Timer::cache());
     
       // This needs to be called every second or so. Currently done by
       // the throttle task in libtorrent.
       uiControl.get_display().do_update();
 
-      uiControl.get_core().get_poll().poll(utils::TaskSchedule::get_timeout());
+      uiControl.get_core().get_poll().poll(!utils::taskScheduler.empty() ?
+					   utils::taskScheduler.get_next_timeout() - utils::Timer::cache() :
+					   60 * 1000000);
     }
 
     uiRoot.cleanup();
-    display::Canvas::cleanup();
-
     uiControl.get_core().cleanup();
 
+    display::Canvas::erase_std();
+    display::Canvas::refresh_std();
+    display::Canvas::do_update();
+    display::Canvas::cleanup();
+
   } catch (std::exception& e) {
     display::Canvas::cleanup();
 
     std::cout << "Caught exception: \"" << e.what() << '"' << std::endl;
     return -1;
   }
 
   return 0;
 }
 
 void
 do_panic(int signum) {
-  // Use the default signal handler in the future to avoid infint
+  // Use the default signal handler in the future to avoid infinit
   // loops.
   SignalHandler::set_default(signum);
   display::Canvas::cleanup();
 
   std::cout << "Caught " << SignalHandler::as_string(signum) << ", dumping stack:" << std::endl;
   
@@ -270,12 +282,28 @@
     std::cout << "A bus error might mean you ran out of diskspace." << std::endl;
   
   exit(-1);
 }
 
 void
+receive_tracker_dump(std::istream* s) {
+  std::stringstream filename;
+  filename << "./tracker_dump." << utils::Timer::current().sec();
+
+  std::fstream out(filename.str().c_str(), std::ios::out | std::ios::trunc);
+
+  if (!out.is_open())
+    return;
+  
+  s->seekg(0);
+
+  std::copy(std::istream_iterator<char>(*s), std::istream_iterator<char>(),
+	    std::ostream_iterator<char>(out));
+}
+
+void
 print_help() {
   std::cout << "Rakshasa's BitTorrent client " VERSION "." << std::endl;
   std::cout << std::endl;
   std::cout << "All value pairs (f.ex rate and queue size) will be in the UP/DOWN" << std::endl;
   std::cout << "order. Use the up/down/left/right arrow keys to move between screens." << std::endl;
   std::cout << std::endl;
@@ -289,12 +317,13 @@
   std::cout << "  -o key=opt,...    Set options, see 'rtorrent.rc' file" << std::endl;
   std::cout << std::endl;
   std::cout << "Main view keys:" << std::endl;
   std::cout << "  backspace         Add a torrent url or path" << std::endl;
   std::cout << "  ^s                Start torrent" << std::endl;
   std::cout << "  ^d                Stop torrent or delete a stopped torrent" << std::endl;
+  std::cout << "  ^r                Manually initiate hash checking" << std::endl;
   std::cout << "  ^q                Initiate shutdown or skip shutdown process" << std::endl;
   std::cout << "  a,s,d,z,x,c       Adjust upload throttle" << std::endl;
   std::cout << "  A,S,D,Z,X,C       Adjust download throttle" << std::endl;
   std::cout << "  right             View torrent" << std::endl;
   std::cout << std::endl;
   std::cout << "Download view keys:" << std::endl;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/option_file.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/option_file.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/option_file.cc	2005-06-01 22:29:21.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/option_file.cc	2005-06-27 02:50:18.000000000 +0800
@@ -19,14 +19,12 @@
 //
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
-#include <algorithm>
-#include <functional>
 #include <fstream>
 #include <stdexcept>
 
 #include "option_file.h"
 
 void
@@ -44,19 +42,24 @@
 OptionFile::parse_line(const char* line) {
   //const char* last = std::find(line, line + max_size_line, '\0');
 
   if (line[0] == '#')
     return;
 
+  int result;
   char key[64];
   char opt[512];
 
-  int result;
+  opt[0] = '\0';
 
   // Check for empty lines, and options within "abc".
-  if ((result = std::sscanf(line, "%64s = %512s", key, opt)) == 2)
-    m_slotOption(key, opt);
-
-  // Don't throw on empty lines or lines with key and opt.
-  if (result == 1)
+  if ((result = std::sscanf(line, "%64s = \"%512[^\"]s", key, opt)) != 2 &&
+      (result = std::sscanf(line, "%64s = %512s", key, opt)) != 2 &&
+      result == 1)
     throw std::runtime_error("Error parseing option file.");
+
+  if (opt[0] == '"' && opt[1] == '"')
+    opt[0] = '\0';
+
+  if (result >= 1)
+    m_slotOption(key, opt);
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/option_handler.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/option_handler.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/option_handler.h	2005-06-01 20:47:39.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/option_handler.h	2005-06-20 04:00:29.000000000 +0800
@@ -25,12 +25,14 @@
 
 #include <map>
 #include <string>
 
 // No members with dtor's allowed.
 struct OptionHandlerBase {
+  virtual ~OptionHandlerBase() {}
+
   virtual void process(const std::string& key, const std::string& arg) = 0;
 };
 
 class OptionHandler : private std::map<std::string, OptionHandlerBase*> {
 public:
   typedef std::map<std::string, OptionHandlerBase*> Base;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/option_handler_rules.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/option_handler_rules.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/option_handler_rules.cc	2005-06-16 02:41:00.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/option_handler_rules.cc	2005-06-27 03:00:33.000000000 +0800
@@ -23,36 +23,47 @@
 #include "config.h"
 
 #include <arpa/inet.h>
 #include <torrent/torrent.h>
 #include <netinet/in.h>
 
+#include "utils/directory.h"
 #include "ui/control.h"
 #include "option_handler_rules.h"
 
+void receive_tracker_dump(std::istream* s);
+
 bool
 validate_ip(const std::string& arg) {
   struct in_addr addr;
 
   return inet_aton(arg.c_str(), &addr);
 }
 
+// We consider an empty string to be valid as this allows us to
+// disable options.
 bool
 validate_directory(const std::string& arg) {
+  //return arg.empty() || utils::Directory(arg).is_valid();
   return true;
 }
 
 bool
 validate_port_range(const std::string& arg) {
   int a, b;
-    
+  
   return std::sscanf(arg.c_str(), "%i-%i", &a, &b) == 2 &&
     a <= b && a > 0 && b < (1 << 16);
 }
 
 bool
+validate_yes_no(const std::string& arg) {
+  return arg == "yes" || arg == "no";
+}
+
+bool
 validate_download_peers(int arg) {
   return arg > 0 && arg < (1 << 16);
 }
 
 bool
 validate_rate(int arg) {
@@ -63,35 +74,36 @@
 validate_read_ahead(int arg) {
   return arg >= 1 && arg < 64;
 }
 
 bool
 validate_fd(int arg) {
-  return arg >= 10 && arg < 1024;
+  return arg >= 10 && arg < (1 << 16);
 }
 
 void
-apply_download_min_peers(core::Download* d, int arg) {
-  d->get_download().set_peers_min(arg);
+apply_download_min_peers(ui::Control* m, int arg) {
+  m->get_core().get_download_list().slot_map_insert().insert("1_min_peers", sigc::bind(sigc::mem_fun(&core::Download::call<void, uint32_t, &torrent::Download::set_peers_min>), arg));
 }
 
 void
-apply_download_max_peers(core::Download* d, int arg) {
-  d->get_download().set_peers_max(arg);
+apply_download_max_peers(ui::Control* m, int arg) {
+  m->get_core().get_download_list().slot_map_insert().insert("1_max_peers", sigc::bind(sigc::mem_fun(&core::Download::call<void, uint32_t, &torrent::Download::set_peers_max>), arg));
 }
 
 void
-apply_download_max_uploads(core::Download* d, int arg) {
-  d->get_download().set_uploads_max(arg);
+apply_download_max_uploads(ui::Control* m, int arg) {
+  m->get_core().get_download_list().slot_map_insert().insert("1_max_uploads", sigc::bind(sigc::mem_fun(&core::Download::call<void, uint32_t, &torrent::Download::set_uploads_max>), arg));
 }
 
 void
-apply_download_directory(core::Download* d, const std::string& arg) {
-  d->get_download().set_root_dir(arg +
-				 (!arg.empty() && *arg.rbegin() != '/' ? "/" : "") +
-				 (d->get_download().get_entry_size() > 1 ? d->get_download().get_name() : ""));
+apply_download_directory(ui::Control* m, const std::string& arg) {
+  if (!arg.empty())
+    m->get_core().get_download_list().slot_map_insert().insert("1_directory", sigc::bind(sigc::mem_fun(&core::Download::set_root_directory), arg));
+  else
+    m->get_core().get_download_list().slot_map_insert().erase("1_directory");
 }
 
 void
 apply_global_download_rate(ui::Control* m, int arg) {
   torrent::set_read_throttle(arg * 1024);
 }
@@ -128,6 +140,27 @@
   int a = 0, b = 0;
     
   std::sscanf(arg.c_str(), "%i-%i", &a, &b);
 
   m->get_core().set_port_range(a, b);
 }
+
+void
+apply_tracker_dump(ui::Control* m, const std::string& arg) {
+  if (arg == "yes")
+    m->get_core().get_download_list().slot_map_insert().insert("1_tracker_dump", sigc::bind(sigc::mem_fun(&core::Download::call<sigc::connection, torrent::Download::SlotIStream, &torrent::Download::signal_tracker_dump>), sigc::ptr_fun(&receive_tracker_dump)));
+  else
+    m->get_core().get_download_list().slot_map_insert().erase("1_tracker_dump");
+}
+
+void
+apply_check_hash(ui::Control* m, const std::string& arg) {
+  if (arg == "yes")
+    m->get_core().get_download_list().slot_map_finished().insert("1_check_hash", sigc::mem_fun(m->get_core(), &core::Manager::check_hash));
+  else
+    m->get_core().get_download_list().slot_map_finished().erase("1_check_hash");
+}
+
+void
+apply_session_directory(ui::Control* m, const std::string& arg) {
+  m->get_core().get_download_store().use(arg);
+}
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/option_handler_rules.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/option_handler_rules.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/option_handler_rules.h	2005-06-09 01:58:42.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/option_handler_rules.h	2005-06-26 09:00:24.000000000 +0800
@@ -34,78 +34,38 @@
   class Control;
 }
 
 bool validate_ip(const std::string& arg);
 bool validate_directory(const std::string& arg);
 bool validate_port_range(const std::string& arg);
+bool validate_yes_no(const std::string& arg);
 
 bool validate_download_peers(int arg);
 bool validate_rate(int arg);
 bool validate_read_ahead(int arg);
 bool validate_fd(int arg);
 
-void apply_download_min_peers(core::Download* d, int arg);
-void apply_download_max_peers(core::Download* d, int arg);
-void apply_download_max_uploads(core::Download* d, int arg);
+void apply_download_min_peers(ui::Control* m, int arg);
+void apply_download_max_peers(ui::Control* m, int arg);
+void apply_download_max_uploads(ui::Control* m, int arg);
 
-void apply_download_directory(core::Download* d, const std::string& arg);
+void apply_download_directory(ui::Control* m, const std::string& arg);
 
 void apply_global_download_rate(ui::Control* m, int arg);
 void apply_global_upload_rate(ui::Control* m, int arg);
 
 void apply_hash_read_ahead(ui::Control* m, int arg);
 void apply_max_open_files(ui::Control* m, int arg);
 
 void apply_ip(ui::Control* m, const std::string& arg);
 void apply_bind(ui::Control* m, const std::string& arg);
 void apply_port_range(ui::Control* m, const std::string& arg);
+void apply_tracker_dump(ui::Control* m, const std::string& arg);
+void apply_check_hash(ui::Control* m, const std::string& arg);
 
-class OptionHandlerDownloadInt : public OptionHandlerBase {
-public:
-  typedef void (*Apply)(core::Download*, int);
-  typedef bool (*Validate)(int);
-
-  OptionHandlerDownloadInt(core::DownloadSlotMap* m, Apply a, Validate v) :
-    m_map(m), m_apply(a), m_validate(v) {}
-
-  virtual void process(const std::string& key, const std::string& arg) {
-    int a;
-    
-    if (std::sscanf(arg.c_str(), "%i", &a) != 1 ||
-	!m_validate(a))
-      throw std::runtime_error("Invalid argument for \"" + key + "\": \"" + arg + "\"");
-    
-    (*m_map)[key] = sigc::bind(sigc::ptr_fun(m_apply), a);
-  }
-
-private:
-  core::DownloadSlotMap* m_map;
-  Apply                  m_apply;
-  Validate               m_validate;
-};
-
-class OptionHandlerString : public OptionHandlerBase {
-public:
-  typedef bool (*Validate)(const std::string&);
-  typedef void (*Apply)(ui::Control*, const std::string&);
-
-  OptionHandlerString(ui::Control* c, Apply a, Validate v) :
-    m_control(c), m_apply(a), m_validate(v) {}
-
-  virtual void process(const std::string& key, const std::string& arg) {
-    if (!m_validate(arg))
-      throw std::runtime_error("Invalid argument for \"" + key + "\": \"" + arg + "\"");
-    
-    m_apply(m_control, arg);
-  }
-
-private:
-  ui::Control* m_control;
-  Apply        m_apply;
-  Validate     m_validate;
-};
+void apply_session_directory(ui::Control* m, const std::string& arg);
 
 class OptionHandlerInt : public OptionHandlerBase {
 public:
   typedef bool (*Validate)(int);
   typedef void (*Apply)(ui::Control*, int);
 
@@ -125,28 +85,28 @@
 private:
   ui::Control* m_control;
   Apply        m_apply;
   Validate     m_validate;
 };
 
-class OptionHandlerDownloadString : public OptionHandlerBase {
+class OptionHandlerString : public OptionHandlerBase {
 public:
-  typedef void (*Apply)(core::Download*, const std::string&);
   typedef bool (*Validate)(const std::string&);
+  typedef void (*Apply)(ui::Control*, const std::string&);
 
-  OptionHandlerDownloadString(core::DownloadSlotMap* m, Apply a, Validate v) :
-    m_map(m), m_apply(a), m_validate(v) {}
+  OptionHandlerString(ui::Control* c, Apply a, Validate v) :
+    m_control(c), m_apply(a), m_validate(v) {}
 
   virtual void process(const std::string& key, const std::string& arg) {
     if (!m_validate(arg))
       throw std::runtime_error("Invalid argument for \"" + key + "\": \"" + arg + "\"");
     
-    (*m_map)[key] = sigc::bind(sigc::ptr_fun(m_apply), arg);
+    m_apply(m_control, arg);
   }
 
 private:
-  core::DownloadSlotMap* m_map;
-  Apply                  m_apply;
-  Validate               m_validate;
+  ui::Control* m_control;
+  Apply        m_apply;
+  Validate     m_validate;
 };
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/ui/download.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/ui/download.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/ui/download.cc	2005-06-08 04:02:52.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/ui/download.cc	2005-06-27 02:57:00.000000000 +0800
@@ -71,22 +71,22 @@
 }
 
 Download::~Download() {
   if (m_window != m_control->get_display().end())
     throw std::logic_error("ui::Download::~Download() called on an active object");
 
+  m_connPeerConnected.disconnect();
+  m_connPeerDisconnected.disconnect();
+
+  delete m_bindings;
+
   std::for_each(m_uiArray, m_uiArray + DISPLAY_MAX_SIZE, rak::call_delete<ElementBase>());
 
   delete m_windowTitle;
   delete m_windowDownloadStatus;
   delete m_windowMainStatus;
-
-  delete m_bindings;
-
-  m_connPeerConnected.disconnect();
-  m_connPeerDisconnected.disconnect();
 }
 
 void
 Download::activate() {
   if (m_window != m_control->get_display().end())
     throw std::logic_error("ui::Download::activate() called on an already activated object");
@@ -264,17 +264,18 @@
   (*m_bindings)['o'] = sigc::bind(sigc::mem_fun(*this, &Download::receive_change), DISPLAY_TRACKER_LIST);
 
   (*m_bindings)[KEY_UP]   = sigc::mem_fun(*this, &Download::receive_prev);
   (*m_bindings)[KEY_DOWN] = sigc::mem_fun(*this, &Download::receive_next);
 
   // Key bindings for sub-ui's.
-  m_uiArray[DISPLAY_PEER_LIST]->get_bindings()[KEY_RIGHT] = sigc::bind(sigc::mem_fun(*this, &Download::receive_change), DISPLAY_FILE_LIST);
-  m_uiArray[DISPLAY_PEER_INFO]->get_bindings()[' ']       = sigc::bind(sigc::mem_fun(*this, &Download::receive_change), DISPLAY_PEER_LIST);
-  m_uiArray[DISPLAY_FILE_LIST]->get_bindings()[KEY_LEFT]  = sigc::bind(sigc::mem_fun(*this, &Download::receive_change), DISPLAY_PEER_LIST);
-  m_uiArray[DISPLAY_TRACKER_LIST]->get_bindings()[' ']    = sigc::bind(sigc::mem_fun(*this, &Download::receive_change), DISPLAY_PEER_LIST);
+  m_uiArray[DISPLAY_PEER_LIST]->get_bindings()[KEY_RIGHT]   = sigc::bind(sigc::mem_fun(*this, &Download::receive_change), DISPLAY_FILE_LIST);
+  m_uiArray[DISPLAY_PEER_INFO]->get_bindings()[KEY_LEFT]    = sigc::bind(sigc::mem_fun(*this, &Download::receive_change), DISPLAY_PEER_LIST);
+  m_uiArray[DISPLAY_FILE_LIST]->get_bindings()[KEY_LEFT]    = sigc::bind(sigc::mem_fun(*this, &Download::receive_change), DISPLAY_PEER_LIST);
+  m_uiArray[DISPLAY_TRACKER_LIST]->get_bindings()[KEY_LEFT] = sigc::bind(sigc::mem_fun(*this, &Download::receive_change), DISPLAY_PEER_LIST);
 
+  // Doesn't belong here.
   m_uiArray[DISPLAY_PEER_LIST]->get_bindings()['*'] = sigc::mem_fun(*this, &Download::receive_snub_peer);
   m_uiArray[DISPLAY_PEER_INFO]->get_bindings()['*'] = sigc::mem_fun(*this, &Download::receive_snub_peer);
 }
 
 void
 Download::mark_dirty() {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/ui/download_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/ui/download_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/ui/download_list.cc	2005-06-08 04:06:13.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/ui/download_list.cc	2005-06-26 02:19:06.000000000 +0800
@@ -54,30 +54,34 @@
   m_window(c->get_display().end()),
 
   m_windowTitle(new WTitle("rTorrent " VERSION " - libTorrent " + torrent::get_version())),
   m_windowStatus(new WStatus(&c->get_core())),
   m_windowHttpQueue(new WHttp(&c->get_core().get_http_queue())),
 
-  m_taskUpdate(sigc::mem_fun(*this, &DownloadList::task_update)),
   m_uiDownload(NULL),
 
   m_downloadList(&c->get_core().get_download_list()),
 
   m_control(c),
-  m_bindings(new input::Bindings) {
-
+  m_bindings(new input::Bindings)
+{
   m_uiArray[DISPLAY_DOWNLOAD_LIST] = new ElementDownloadList(&m_downloadList);
   m_uiArray[DISPLAY_LOG]           = new ElementLogComplete(&m_control->get_core().get_log_complete());
-
   m_windowLog                      = new WLog(&m_control->get_core().get_log_important());
 
+  m_taskUpdate.set_iterator(utils::taskScheduler.end());
+  m_taskUpdate.set_slot(sigc::mem_fun(*this, &DownloadList::task_update)),
+
   setup_keys();
   setup_input();
 }
 
 DownloadList::~DownloadList() {
+  if (is_active())
+    throw std::logic_error("ui::DownloadList::~DownloadList() called on an active object");
+
   std::for_each(m_uiArray, m_uiArray + DISPLAY_MAX_SIZE, rak::call_delete<ElementBase>());
 
   delete m_windowTitle;
   delete m_windowStatus;
   delete m_bindings;
 
@@ -86,16 +90,16 @@
   delete m_windowTextInput;
   delete m_windowHttpQueue;
 }
 
 void
 DownloadList::activate() {
-  if (m_window != m_control->get_display().end())
+  if (is_active())
     throw std::logic_error("ui::Download::activate() called on an already activated object");
 
-  m_taskUpdate.insert(utils::Timer::cache() + 1000000);
+  utils::taskScheduler.insert(&m_taskUpdate, utils::Timer::cache() + 1000000);
 
   m_windowTextInput->set_active(false);
 
   m_window = m_control->get_display().insert(m_control->get_display().begin(), NULL);
   m_control->get_display().push_front(m_windowTitle);
 
@@ -108,18 +112,18 @@
 
   activate_display(DISPLAY_DOWNLOAD_LIST);
 }
 
 void
 DownloadList::disable() {
-  if (m_window == m_control->get_display().end())
+  if (!is_active())
     throw std::logic_error("ui::Download::disable() called on an already disabled object");
 
   disable_display();
 
-  m_taskUpdate.remove();
+  utils::taskScheduler.erase(&m_taskUpdate);
 
   if (m_windowTextInput->is_active()) {
     m_windowTextInput->get_input()->clear();
     receive_exit_input();
   }
 
@@ -134,13 +138,13 @@
 
   m_control->get_input().erase(m_bindings);
 }
 
 void
 DownloadList::activate_display(Display d) {
-  if (m_window == m_control->get_display().end())
+  if (!is_active())
     throw std::logic_error("ui::DownloadList::activate_display(...) could not find previous display iterator");
 
   if (d >= DISPLAY_MAX_SIZE)
     throw std::logic_error("ui::DownloadList::activate_display(...) out of bounds");
 
   m_state = d;
@@ -229,12 +233,20 @@
   activate();
 
   m_control->get_display().adjust_layout();
 }
 
 void
+DownloadList::receive_check_hash() {
+  if (m_downloadList.get_focus() == m_downloadList.end())
+    return;
+
+  m_control->get_core().check_hash(*m_downloadList.get_focus());
+}
+
+void
 DownloadList::receive_view_input() {
   m_windowStatus->set_active(false);
   m_windowTextInput->set_active(true);
   m_control->get_display().adjust_layout();
 
   m_control->get_input().set_text_input(m_windowTextInput->get_input());
@@ -273,13 +285,13 @@
 }
 
 void
 DownloadList::task_update() {
   m_windowLog->receive_update();
 
-  m_taskUpdate.insert(utils::Timer::cache() + 1000000);
+  utils::taskScheduler.insert(&m_taskUpdate, (utils::Timer::cache() + 1000000).round_seconds());
 }
 
 void
 DownloadList::setup_keys() {
   (*m_bindings)['a']           = sigc::bind(sigc::mem_fun(*this, &DownloadList::receive_write_throttle), 1);
   (*m_bindings)['z']           = sigc::bind(sigc::mem_fun(*this, &DownloadList::receive_write_throttle), -1);
@@ -294,12 +306,13 @@
   (*m_bindings)['X']           = sigc::bind(sigc::mem_fun(*this, &DownloadList::receive_read_throttle), -5);
   (*m_bindings)['D']           = sigc::bind(sigc::mem_fun(*this, &DownloadList::receive_read_throttle), 50);
   (*m_bindings)['C']           = sigc::bind(sigc::mem_fun(*this, &DownloadList::receive_read_throttle), -50);
 
   (*m_bindings)['\x13']        = sigc::mem_fun(*this, &DownloadList::receive_start_download);
   (*m_bindings)['\x04']        = sigc::mem_fun(*this, &DownloadList::receive_stop_download);
+  (*m_bindings)['\x12']        = sigc::mem_fun(*this, &DownloadList::receive_check_hash);
 
   (*m_bindings)['\x7f']        = sigc::mem_fun(*this, &DownloadList::receive_view_input);
   (*m_bindings)[KEY_BACKSPACE] = sigc::mem_fun(*this, &DownloadList::receive_view_input);
 
   (*m_bindings)[KEY_UP]        = sigc::mem_fun(*this, &DownloadList::receive_prev);
   (*m_bindings)[KEY_DOWN]      = sigc::mem_fun(*this, &DownloadList::receive_next);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/ui/download_list.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/ui/download_list.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/ui/download_list.h	2005-05-02 08:05:48.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/ui/download_list.h	2005-06-26 02:18:07.000000000 +0800
@@ -74,12 +74,14 @@
 
   DownloadList(Control* c);
   ~DownloadList();
 
   input::Bindings&    get_bindings()               { return *m_bindings; }
 
+  bool                is_active() const            { return m_window != m_control->get_display().end(); }
+
   void                activate();
   void                disable();
 
   void                activate_display(Display d);
   void                disable_display();
 
@@ -98,12 +100,14 @@
   void                receive_start_download();
   void                receive_stop_download();
 
   void                receive_view_download();
   void                receive_exit_download();
 
+  void                receive_check_hash();
+
   void                receive_view_input();
   void                receive_exit_input();
 
   void                receive_change(Display d);
 
   void                task_update();
@@ -120,13 +124,13 @@
   WTitle*             m_windowTitle;
   WStatus*            m_windowStatus;
   WLog*               m_windowLog;
   WInput*             m_windowTextInput;
   WHttp*              m_windowHttpQueue;
 
-  utils::Task         m_taskUpdate;
+  utils::TaskItem     m_taskUpdate;
 
   Download*           m_uiDownload;
 
   DList               m_downloadList;
 
   Control*            m_control;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/ui/element_file_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/ui/element_file_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/ui/element_file_list.cc	2005-03-18 02:51:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/ui/element_file_list.cc	2005-06-26 23:30:16.000000000 +0800
@@ -34,12 +34,13 @@
 ElementFileList::ElementFileList(core::Download* d) :
   m_download(d),
   m_window(NULL),
   m_focus(0) {
 
   m_bindings[' '] = sigc::mem_fun(*this, &ElementFileList::receive_priority);
+  m_bindings['*'] = sigc::mem_fun(*this, &ElementFileList::receive_change_all);
   m_bindings[KEY_DOWN] = sigc::mem_fun(*this, &ElementFileList::receive_next);
   m_bindings[KEY_UP] = sigc::mem_fun(*this, &ElementFileList::receive_prev);
 }
 
 void
 ElementFileList::activate(Control* c, MItr mItr) {
@@ -96,29 +97,47 @@
 
   if (m_focus >= m_download->get_download().get_entry_size())
     return;
 
   torrent::Entry e = m_download->get_download().get_entry(m_focus);
 
-  switch (e.get_priority()) {
+  e.set_priority(next_priority(e.get_priority()));
+
+  m_download->get_download().update_priorities();
+  m_window->mark_dirty();
+}
+
+void
+ElementFileList::receive_change_all() {
+  if (m_window == NULL)
+    throw std::logic_error("ui::ElementFileList::receive_prev(...) called on a disabled object");
+
+  if (m_focus >= m_download->get_download().get_entry_size())
+    return;
+
+  Priority p = next_priority(m_download->get_download().get_entry(m_focus).get_priority());
+
+  for (int i = 0, e = m_download->get_download().get_entry_size(); i != e; ++i)
+    m_download->get_download().get_entry(i).set_priority(p);
+
+  m_download->get_download().update_priorities();
+  m_window->mark_dirty();
+}
+
+ElementFileList::Priority
+ElementFileList::next_priority(Priority p) {
+  switch(p) {
   case torrent::Entry::STOPPED:
-    e.set_priority(torrent::Entry::HIGH);
-    break;
+    return torrent::Entry::HIGH;
 
   case torrent::Entry::NORMAL:
-    e.set_priority(torrent::Entry::STOPPED);
-    break;
+    return torrent::Entry::STOPPED;
 
   case torrent::Entry::HIGH:
-    e.set_priority(torrent::Entry::NORMAL);
-    break;
+    return torrent::Entry::NORMAL;
 	
   default:
-    e.set_priority(torrent::Entry::NORMAL);
-    break;
+    return torrent::Entry::NORMAL;
   };
-
-  m_download->get_download().update_priorities();
-  m_window->mark_dirty();
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/ui/element_file_list.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/ui/element_file_list.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/ui/element_file_list.h	2005-03-18 02:40:55.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/ui/element_file_list.h	2005-06-26 23:20:35.000000000 +0800
@@ -34,24 +34,28 @@
 namespace ui {
 
 class Control;
 
 class ElementFileList : public ElementBase {
 public:
-  typedef display::WindowFileList    WFileList;
+  typedef torrent::Entry::Priority Priority;
+  typedef display::WindowFileList  WFileList;
 
   ElementFileList(core::Download* d);
 
   void                activate(Control* c, MItr mItr);
   void                disable(Control* c);
 
 private:
   void                receive_next();
   void                receive_prev();
 
   void                receive_priority();
+  void                receive_change_all();
+
+  Priority            next_priority(Priority p);
 
   core::Download*     m_download;
   WFileList*          m_window;
   
   // Change to unsigned, please.
   unsigned int        m_focus;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/ui/element_tracker_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/ui/element_tracker_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/ui/element_tracker_list.cc	2005-03-18 02:51:53.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/ui/element_tracker_list.cc	2005-06-20 02:45:33.000000000 +0800
@@ -34,13 +34,14 @@
 ElementTrackerList::ElementTrackerList(core::Download* d) :
   m_download(d),
   m_window(NULL),
   m_focus(0) {
 
   m_bindings[KEY_DOWN] = sigc::mem_fun(*this, &ElementTrackerList::receive_next);
-  m_bindings[KEY_UP] = sigc::mem_fun(*this, &ElementTrackerList::receive_prev);
+  m_bindings[KEY_UP]   = sigc::mem_fun(*this, &ElementTrackerList::receive_prev);
+  m_bindings[' ']      = sigc::mem_fun(*this, &ElementTrackerList::receive_cycle_group);
 }
 
 void
 ElementTrackerList::activate(Control* c, MItr mItr) {
   if (m_window != NULL)
     throw std::logic_error("ui::ElementTrackerList::activate(...) called on an object in the wrong state");
@@ -85,7 +86,20 @@
   else 
     m_focus = m_download->get_download().get_tracker_size() - 1;
 
   m_window->mark_dirty();
 }
 
+void
+ElementTrackerList::receive_cycle_group() {
+  if (m_window == NULL)
+    throw std::logic_error("ui::ElementTrackerList::receive_group_cycle(...) called on a disabled object");
+
+  if (m_focus >= m_download->get_download().get_tracker_size())
+    throw std::logic_error("ui::ElementTrackerList::receive_group_cycle(...) called with an invalid focus");
+
+  m_download->get_download().cycle_tracker_group(m_download->get_download().get_tracker(m_focus).get_group());
+
+  m_window->mark_dirty();
+}
+
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/ui/element_tracker_list.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/ui/element_tracker_list.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/ui/element_tracker_list.h	2005-03-18 02:41:29.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/ui/element_tracker_list.h	2005-06-20 02:02:35.000000000 +0800
@@ -45,12 +45,14 @@
   void                disable(Control* c);
 
 private:
   void                receive_next();
   void                receive_prev();
 
+  void                receive_cycle_group();
+
   core::Download*     m_download;
   WTrackerList*       m_window;
   
   // Change to unsigned, please.
   unsigned int        m_focus;
 };
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/ui/root.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/ui/root.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/ui/root.cc	2005-03-17 04:35:59.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/ui/root.cc	2005-06-26 02:22:30.000000000 +0800
@@ -40,12 +40,15 @@
   m_downloadList->activate();
   m_downloadList->slot_open_uri(sigc::mem_fun(m_control->get_core(), &core::Manager::insert));
 }
 
 void
 Root::cleanup() {
+  if (m_downloadList->is_active())
+    m_downloadList->disable();
+
   delete m_downloadList;
 
   m_control->get_input().erase(&m_bindings);
 }
 
 void
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/utils/directory.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/utils/directory.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/utils/directory.cc	2005-03-17 07:01:11.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/utils/directory.cc	2005-06-26 09:21:52.000000000 +0800
@@ -29,12 +29,23 @@
 
 #include "directory.h"
 
 namespace utils {
 
 bool
+Directory::is_valid() const {
+  if (m_path.empty())
+    return false;
+
+  DIR* d = opendir(m_path.c_str());
+  closedir(d);
+
+  return d;
+}
+
+bool
 Directory::update() {
   if (m_path.empty())
     throw std::logic_error("Directory::update() tried to open an empty path");
 
   DIR* d = opendir(m_path.c_str());
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/utils/directory.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/utils/directory.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/utils/directory.h	2005-03-17 06:57:33.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/utils/directory.h	2005-06-26 09:21:45.000000000 +0800
@@ -47,12 +47,14 @@
 
   using Base::erase;
 
   Directory() {}
   Directory(const std::string& path) : m_path(path) {}
 
+  bool                is_valid() const;
+
   bool                update();
 
   const std::string&  get_path() { return m_path; }
 
   // Make a list with full path names.
   Base                make_list();
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/utils/Makefile.am /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/utils/Makefile.am
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/utils/Makefile.am	2005-03-30 02:36:57.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/utils/Makefile.am	2005-06-24 02:27:18.000000000 +0800
@@ -6,11 +6,12 @@
 	file_stat.cc \
 	file_stat.h \
 	list_focus.h \
 	parse.cc \
 	parse.h \
 	task.h \
-	task_schedule.cc \
-	task_schedule.h \
+	task_item.h \
+	task_scheduler.cc \
+	task_scheduler.h \
 	timer.h
 
 INCLUDES = -I$(srcdir) -I$(srcdir)/.. -I$(top_srcdir)
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/utils/Makefile.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/utils/Makefile.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/utils/Makefile.in	2005-06-16 04:24:40.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/utils/Makefile.in	2005-06-27 03:59:33.000000000 +0800
@@ -84,14 +84,15 @@
 	file_stat.cc \
 	file_stat.h \
 	list_focus.h \
 	parse.cc \
 	parse.h \
 	task.h \
-	task_schedule.cc \
-	task_schedule.h \
+	task_item.h \
+	task_scheduler.cc \
+	task_scheduler.h \
 	timer.h
 
 
 INCLUDES = -I$(srcdir) -I$(srcdir)/.. -I$(top_srcdir)
 subdir = src/utils
 mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
@@ -99,25 +100,25 @@
 CONFIG_CLEAN_FILES =
 LIBRARIES = $(noinst_LIBRARIES)
 
 libsub_utils_a_AR = $(AR) cru
 libsub_utils_a_LIBADD =
 am_libsub_utils_a_OBJECTS = directory.$(OBJEXT) file_stat.$(OBJEXT) \
-	parse.$(OBJEXT) task_schedule.$(OBJEXT)
+	parse.$(OBJEXT) task_scheduler.$(OBJEXT)
 libsub_utils_a_OBJECTS = $(am_libsub_utils_a_OBJECTS)
 
 DEFS = @DEFS@
 DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
 CPPFLAGS = @CPPFLAGS@
 LDFLAGS = @LDFLAGS@
 LIBS = @LIBS@
 depcomp = $(SHELL) $(top_srcdir)/depcomp
 am__depfiles_maybe = depfiles
 @AMDEP_TRUE@DEP_FILES = ./$(DEPDIR)/directory.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/file_stat.Po ./$(DEPDIR)/parse.Po \
-@AMDEP_TRUE@	./$(DEPDIR)/task_schedule.Po
+@AMDEP_TRUE@	./$(DEPDIR)/task_scheduler.Po
 CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
 CXXLD = $(CXX)
 CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
 	-o $@
 CXXFLAGS = @CXXFLAGS@
@@ -155,13 +156,13 @@
 distclean-compile:
 	-rm -f *.tab.c
 
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/directory.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/file_stat.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/parse.Po@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/task_schedule.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/task_scheduler.Po@am__quote@
 
 distclean-depend:
 	-rm -rf ./$(DEPDIR)
 
 .cc.o:
 @AMDEP_TRUE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/utils/task.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/utils/task.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/utils/task.h	2005-03-17 04:35:53.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/utils/task.h	2005-06-24 02:27:37.000000000 +0800
@@ -1,7 +1,7 @@
-// rTorrent - BitTorrent client
+// rTorrent - BitTorrent library
 // Copyright (C) 2005, Jari Sundell
 //
 // This program is free software; you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
 // the Free Software Foundation; either version 2 of the License, or
 // (at your option) any later version.
@@ -20,59 +20,15 @@
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
 #ifndef RTORRENT_UTILS_TASK_H
 #define RTORRENT_UTILS_TASK_H
 
-#include <sigc++/slot.h>
-
-#include "timer.h"
-#include "task_schedule.h"
+#include "task_scheduler.h"
 
 namespace utils {
-
-class Task {
-public:
-  typedef sigc::slot<void> Slot;
-
-  Task(Slot s = Slot()) : m_slot(s)       { clear_iterator(); }
-  ~Task()                                 { remove(); }
-
-  bool  is_scheduled()                    { return m_itr != TaskSchedule::end(); }
-
-  void  set_slot(Slot s)                  { m_slot = s; }
-  Slot& get_slot()                        { return m_slot; }
-
-  Timer get_time()                        { return m_time; }
-
-  void  insert(Timer t) {
-    remove();
-
-    m_time = t;
-    m_itr = TaskSchedule::insert(this);
-  }
-
-  void  remove() {
-    if (m_itr != TaskSchedule::end()) {
-      TaskSchedule::erase(m_itr);
-      clear_iterator();
-    }
-  }
-
-protected:
-  friend class TaskSchedule;
-
-  TaskSchedule::iterator get_iterator()   { return m_itr; }
-  void                   clear_iterator() { m_itr = TaskSchedule::end(); }
-
-private:
-  Task(const Task&);
-  void operator () (const Task&);
-
-  Timer                  m_time;
-  TaskSchedule::iterator m_itr;
-  Slot                   m_slot;
-};
-
+  
+extern TaskScheduler taskScheduler;
+  
 }
 
 #endif
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/utils: task_item.h
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/utils: task_schedule.cc
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/utils: task_schedule.h
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/utils: task_scheduler.cc
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/utils: task_scheduler.h
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/utils/timer.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/utils/timer.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/src/utils/timer.h	2005-03-18 05:33:53.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/src/utils/timer.h	2005-06-21 04:17:43.000000000 +0800
@@ -34,12 +34,13 @@
  public:
   Timer() : m_time(0) {}
   Timer(int64_t usec) : m_time(usec) {}
   Timer(timeval tv) : m_time((int64_t)(uint32_t)tv.tv_sec * 1000000 + (int64_t)(uint32_t)tv.tv_usec % 1000000) {}
 
   int64_t   usec() const                   { return m_time; }
+  int32_t   sec() const                    { return m_time / 1000000; }
   timeval   tval() const                   { return (timeval) { m_time / 1000000, m_time % 1000000}; }
 
   Timer     round_seconds() const          { return (m_time / 1000000) * 1000000; }
 
   static Timer current() {
     timeval t;
@@ -52,12 +53,13 @@
   // Don't use outside socket_base read/write/except or Service::service.
   
   // TODO: Find out if it's worth it. The kernel is supposed to cache the
   // time. Though system calls would be more expensive than we can afford.
   static Timer cache()                     { return Timer(m_cache); }
 
+  // TODO: Create sd::numeric_limits for these?
   static Timer min()                       { return 0; }
   static Timer max()                       { return (int64_t)std::numeric_limits<time_t>::max() * 1000000; }
 
   static void  update()                    { m_cache = Timer::current().usec(); }
 
   Timer operator - (const Timer& t) const  { return Timer(m_time - t.m_time); }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/TODO /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/TODO
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.5/TODO	2005-06-11 02:28:11.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.2.6/TODO	2005-06-26 02:15:03.000000000 +0800
@@ -5,26 +5,13 @@
 
 Some kind of indication that a tracker request was tried, but won't be
 allowed since the tracker set a min interval.
 
 Make accumulate return the value, no refs please...
 
->   - listing the total upload / download bandwidth at the bottom of the
->     screen;
-
 >   - seeing the number of seeds / leechers of a torrent on the main
 >     screen (and the level of distribution between leechers);
 
 >   - being able to delete not just the torrent file, but the files it
 >     created from rtorrent.  Like when you start a torrent, but it is too
 >     slow or broken or for various reasons you don't want to download it.
 
-
-Show torrent creation date?
-
-Recheck hash key.
-
-Seperate download management from core::management.
-
-Allow switching/cycling of tracker.
-
-Remember to add virtual dtor to OptionHandlerBase
