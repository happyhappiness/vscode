diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/configure /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/configure
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/configure	2011-05-09 22:04:48.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/configure	2011-06-21 15:11:21.000000000 +0800
@@ -1,9 +1,9 @@
 #! /bin/sh
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.68 for rtorrent 0.8.8.
+# Generated by GNU Autoconf 2.68 for rtorrent 0.8.9.
 #
 # Report bugs to <jaris@ifi.uio.no>.
 #
 #
 # Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,
 # 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 Free Software
@@ -567,14 +567,14 @@
 MFLAGS=
 MAKEFLAGS=
 
 # Identity of this package.
 PACKAGE_NAME='rtorrent'
 PACKAGE_TARNAME='rtorrent'
-PACKAGE_VERSION='0.8.8'
-PACKAGE_STRING='rtorrent 0.8.8'
+PACKAGE_VERSION='0.8.9'
+PACKAGE_STRING='rtorrent 0.8.9'
 PACKAGE_BUGREPORT='jaris@ifi.uio.no'
 PACKAGE_URL=''
 
 # Factoring default headers for most tests.
 ac_includes_default="\
 #include <stdio.h>
@@ -1327,13 +1327,13 @@
 # Report the --help message.
 #
 if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures rtorrent 0.8.8 to adapt to many kinds of systems.
+\`configure' configures rtorrent 0.8.9 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
 To assign environment variables (e.g., CC, CFLAGS...), specify them as
 VAR=VALUE.  See below for descriptions of some of the useful variables.
 
@@ -1397,13 +1397,13 @@
   --host=HOST       cross-compile to build programs to run on HOST [BUILD]
 _ACEOF
 fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of rtorrent 0.8.8:";;
+     short | recursive ) echo "Configuration of rtorrent 0.8.9:";;
    esac
   cat <<\_ACEOF
 
 Optional Features:
   --disable-option-checking  ignore unrecognized --enable/--with options
   --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
@@ -1530,13 +1530,13 @@
   done
 fi
 
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-rtorrent configure 0.8.8
+rtorrent configure 0.8.9
 generated by GNU Autoconf 2.68
 
 Copyright (C) 2010 Free Software Foundation, Inc.
 This configure script is free software; the Free Software Foundation
 gives unlimited permission to copy, distribute and modify it.
 _ACEOF
@@ -2020,13 +2020,13 @@
 
 } # ac_fn_c_check_header_mongrel
 cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by rtorrent $as_me 0.8.8, which was
+It was created by rtorrent $as_me 0.8.9, which was
 generated by GNU Autoconf 2.68.  Invocation command line was
 
   $ $0 $@
 
 _ACEOF
 exec 5>>config.log
@@ -2836,13 +2836,13 @@
   fi
 fi
 
 
 # Define the identity of the package.
  PACKAGE='rtorrent'
- VERSION='0.8.8'
+ VERSION='0.8.9'
 
 
 cat >>confdefs.h <<_ACEOF
 #define PACKAGE "$PACKAGE"
 _ACEOF
 
@@ -16541,34 +16541,34 @@
 $as_echo_n "checking for libtorrent... " >&6; }
 
 if test -n "$libtorrent_CFLAGS"; then
     pkg_cv_libtorrent_CFLAGS="$libtorrent_CFLAGS"
  elif test -n "$PKG_CONFIG"; then
     if test -n "$PKG_CONFIG" && \
-    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"libtorrent >= 0.12.8\""; } >&5
-  ($PKG_CONFIG --exists --print-errors "libtorrent >= 0.12.8") 2>&5
+    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"libtorrent >= 0.12.9\""; } >&5
+  ($PKG_CONFIG --exists --print-errors "libtorrent >= 0.12.9") 2>&5
   ac_status=$?
   $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
   test $ac_status = 0; }; then
-  pkg_cv_libtorrent_CFLAGS=`$PKG_CONFIG --cflags "libtorrent >= 0.12.8" 2>/dev/null`
+  pkg_cv_libtorrent_CFLAGS=`$PKG_CONFIG --cflags "libtorrent >= 0.12.9" 2>/dev/null`
 else
   pkg_failed=yes
 fi
  else
     pkg_failed=untried
 fi
 if test -n "$libtorrent_LIBS"; then
     pkg_cv_libtorrent_LIBS="$libtorrent_LIBS"
  elif test -n "$PKG_CONFIG"; then
     if test -n "$PKG_CONFIG" && \
-    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"libtorrent >= 0.12.8\""; } >&5
-  ($PKG_CONFIG --exists --print-errors "libtorrent >= 0.12.8") 2>&5
+    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"libtorrent >= 0.12.9\""; } >&5
+  ($PKG_CONFIG --exists --print-errors "libtorrent >= 0.12.9") 2>&5
   ac_status=$?
   $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
   test $ac_status = 0; }; then
-  pkg_cv_libtorrent_LIBS=`$PKG_CONFIG --libs "libtorrent >= 0.12.8" 2>/dev/null`
+  pkg_cv_libtorrent_LIBS=`$PKG_CONFIG --libs "libtorrent >= 0.12.9" 2>/dev/null`
 else
   pkg_failed=yes
 fi
  else
     pkg_failed=untried
 fi
@@ -16582,20 +16582,20 @@
 if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then
         _pkg_short_errors_supported=yes
 else
         _pkg_short_errors_supported=no
 fi
         if test $_pkg_short_errors_supported = yes; then
-	        libtorrent_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors "libtorrent >= 0.12.8" 2>&1`
+	        libtorrent_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors "libtorrent >= 0.12.9" 2>&1`
         else
-	        libtorrent_PKG_ERRORS=`$PKG_CONFIG --print-errors "libtorrent >= 0.12.8" 2>&1`
+	        libtorrent_PKG_ERRORS=`$PKG_CONFIG --print-errors "libtorrent >= 0.12.9" 2>&1`
         fi
 	# Put the nasty error message in config.log where it belongs
 	echo "$libtorrent_PKG_ERRORS" >&5
 
-	as_fn_error $? "Package requirements (libtorrent >= 0.12.8) were not met:
+	as_fn_error $? "Package requirements (libtorrent >= 0.12.9) were not met:
 
 $libtorrent_PKG_ERRORS
 
 Consider adjusting the PKG_CONFIG_PATH environment variable if you
 installed software in a non-standard prefix.
 
@@ -17343,13 +17343,13 @@
 
 cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
 # Save the log message, to keep $0 and so on meaningful, and to
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by rtorrent $as_me 0.8.8, which was
+This file was extended by rtorrent $as_me 0.8.9, which was
 generated by GNU Autoconf 2.68.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
   CONFIG_HEADERS  = $CONFIG_HEADERS
   CONFIG_LINKS    = $CONFIG_LINKS
   CONFIG_COMMANDS = $CONFIG_COMMANDS
@@ -17409,13 +17409,13 @@
 Report bugs to <jaris@ifi.uio.no>."
 
 _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-rtorrent config.status 0.8.8
+rtorrent config.status 0.8.9
 configured by $0, generated by GNU Autoconf 2.68,
   with options \\"\$ac_cs_config\\"
 
 Copyright (C) 2010 Free Software Foundation, Inc.
 This config.status script is free software; the Free Software Foundation
 gives unlimited permission to copy, distribute and modify it."
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/configure.ac /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/configure.ac
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/configure.ac	2011-05-09 21:57:26.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/configure.ac	2011-06-21 15:05:45.000000000 +0800
@@ -1,7 +1,7 @@
-AC_INIT(rtorrent, 0.8.8, jaris@ifi.uio.no)
+AC_INIT(rtorrent, 0.8.9, jaris@ifi.uio.no)
 
 AM_INIT_AUTOMAKE
 AM_CONFIG_HEADER(config.h)
 AM_PATH_CPPUNIT(1.9.6)
 
 AC_PROG_CXX
@@ -32,13 +32,13 @@
 		  LIBS="$LIBS $sigc_LIBS")
 
 PKG_CHECK_MODULES(libcurl, libcurl >= 7.15.4,
 	          CXXFLAGS="$CXXFLAGS $libcurl_CFLAGS";
 		  LIBS="$LIBS $libcurl_LIBS")
 
-PKG_CHECK_MODULES(libtorrent, libtorrent >= 0.12.8,
+PKG_CHECK_MODULES(libtorrent, libtorrent >= 0.12.9,
 	          CXXFLAGS="$CXXFLAGS $libtorrent_CFLAGS";
 		  LIBS="$LIBS $libtorrent_LIBS")
 
 AC_LANG_PUSH(C++)
 TORRENT_WITH_XMLRPC_C
 AC_LANG_POP(C++)
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/rak/regex.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/rak/regex.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/rak/regex.h	2011-04-05 18:26:00.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/rak/regex.h	2011-05-21 22:24:24.000000000 +0800
@@ -61,13 +61,13 @@
 
 private:
   std::string m_pattern;
 };
 
 // This isn't optimized, or very clean. A simple hack that should work.
-bool
+inline bool
 regex::operator () (const std::string& text) const {
   if (m_pattern.empty() ||
       text.empty() ||
       (m_pattern[0] != '*' && m_pattern[0] != text[0]))
     return false;
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/command_download.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/command_download.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/command_download.cc	2011-04-24 19:08:31.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/command_download.cc	2011-06-04 12:01:19.000000000 +0800
@@ -41,12 +41,13 @@
 #include <cstdio>
 #include <rak/file_stat.h>
 #include <rak/error_number.h>
 #include <rak/path.h>
 #include <rak/socket_address.h>
 #include <rak/string_manip.h>
+#include <rak/regex.h>
 #include <torrent/rate.h>
 #include <torrent/throttle.h>
 #include <torrent/tracker.h>
 #include <torrent/connection_manager.h>
 #include <torrent/data/file.h>
 #include <torrent/data/file_list.h>
@@ -334,14 +335,31 @@
   // selecting what files to include.
 
   // Add some pre-parsing of the commands, so we don't spend time
   // parsing and searching command map for every single call.
   torrent::Object             resultRaw = torrent::Object::create_list();
   torrent::Object::list_type& result = resultRaw.as_list();
+  std::vector<rak::regex>     regex_list;
+
+  bool use_regex = true;
+
+  if (args.front().is_list())
+    std::transform(args.front().as_list().begin(), args.front().as_list().end(),
+                   std::back_inserter(regex_list),
+                   std::bind(&torrent::Object::as_string_c, std::placeholders::_1));
+  else if (args.front().is_string() && !args.front().as_string().empty())
+    regex_list.push_back(args.front().as_string());
+  else
+    use_regex = false;
 
   for (torrent::FileList::const_iterator itr = download->file_list()->begin(), last = download->file_list()->end(); itr != last; itr++) {
+    if (use_regex &&
+        std::find_if(regex_list.begin(), regex_list.end(),
+                     std::bind(&rak::regex::operator(), std::placeholders::_1, (*itr)->path()->as_string())) == regex_list.end())
+      continue;
+
     torrent::Object::list_type& row = result.insert(result.end(), torrent::Object::create_list())->as_list();
 
     for (torrent::Object::list_const_iterator cItr = ++args.begin(), cLast = args.end(); cItr != args.end(); cItr++) {
       const std::string& cmd = cItr->as_string();
       row.push_back(rpc::parse_command(rpc::make_target(*itr), cmd.c_str(), cmd.c_str() + cmd.size()).first);
     }
@@ -606,12 +624,13 @@
   CMD2_DL         ("d.is_pex_active",    CMD2_ON_INFO(is_pex_active));
 
   CMD2_DL_V       ("d.resume",     std::bind(&core::DownloadList::resume_default, control->core()->download_list(), std::placeholders::_1));
   CMD2_DL_V       ("d.pause",      std::bind(&core::DownloadList::pause_default, control->core()->download_list(), std::placeholders::_1));
   CMD2_DL_V       ("d.open",       std::bind(&core::DownloadList::open_throw, control->core()->download_list(), std::placeholders::_1));
   CMD2_DL_V       ("d.close",      std::bind(&core::DownloadList::close_throw, control->core()->download_list(), std::placeholders::_1));
+  CMD2_DL_V       ("d.close.directly", std::bind(&core::DownloadList::close_directly, control->core()->download_list(), std::placeholders::_1));
   CMD2_DL_V       ("d.erase",      std::bind(&core::DownloadList::erase_ptr, control->core()->download_list(), std::placeholders::_1));
   CMD2_DL_V       ("d.check_hash", std::bind(&core::DownloadList::check_hash, control->core()->download_list(), std::placeholders::_1));
 
   CMD2_DL         ("d.save_resume",       std::bind(&core::DownloadStore::save_resume, control->core()->download_store(), std::placeholders::_1));
   CMD2_DL         ("d.save_full_session", std::bind(&core::DownloadStore::save_full, control->core()->download_store(), std::placeholders::_1));
 
@@ -632,14 +651,16 @@
   CMD2_DL_VAR_STRING_PUBLIC("d.custom3", "rtorrent", "custom3");
   CMD2_DL_VAR_STRING_PUBLIC("d.custom4", "rtorrent", "custom4");
   CMD2_DL_VAR_STRING_PUBLIC("d.custom5", "rtorrent", "custom5");
 
   // 0 - stopped
   // 1 - started
-  CMD2_DL_VAR_VALUE("d.state", "rtorrent", "state");
-  CMD2_DL_VAR_VALUE("d.complete", "rtorrent", "complete");
+  CMD2_DL_VAR_VALUE("d.state",      "rtorrent", "state");
+  CMD2_DL_VAR_VALUE("d.complete",   "rtorrent", "complete");
+
+  CMD2_FUNC_SINGLE ("d.incomplete", "not=(d.complete)");
 
   // 0 off
   // 1 scheduled, being controlled by a download scheduler. Includes a priority.
   // 3 forced off
   // 2 forced on
   CMD2_DL_VAR_VALUE("d.mode", "rtorrent", "mode");
@@ -662,12 +683,14 @@
   // value, it indicates the last time the torrent changed its state,
   // resume/pause.
   CMD2_DL_VAR_VALUE("d.state_changed",          "rtorrent", "state_changed");
   CMD2_DL_VAR_VALUE("d.state_counter",          "rtorrent", "state_counter");
   CMD2_DL_VAR_VALUE_PUBLIC("d.ignore_commands", "rtorrent", "ignore_commands");
 
+  CMD2_DL_VAR_VALUE("d.timestamp.finished",     "rtorrent", "timestamp.finished");
+
   CMD2_DL       ("d.connection_current",     std::bind(&torrent::option_as_string, torrent::OPTION_CONNECTION_TYPE, CMD2_ON_DL(connection_type)));
   CMD2_DL_STRING("d.connection_current.set", std::bind(&apply_d_connection_type, std::placeholders::_1, std::placeholders::_2));
 
   CMD2_DL_VAR_STRING("d.connection_leech",      "rtorrent", "connection_leech");
   CMD2_DL_VAR_STRING("d.connection_seed",       "rtorrent", "connection_seed");
 
@@ -726,12 +749,13 @@
   CMD2_DL         ("d.max_size_pex",   CMD2_ON_DL(max_size_pex));
 
   CMD2_DL         ("d.completed_bytes",  CMD2_ON_FL(completed_bytes));
   CMD2_DL         ("d.completed_chunks", CMD2_ON_FL(completed_chunks));
   CMD2_DL         ("d.left_bytes",       CMD2_ON_FL(left_bytes));
 
+  CMD2_DL_V       ("d.tracker_announce",     std::bind(&torrent::TrackerList::manual_request, CMD2_BIND_TL, false)); 
   CMD2_DL         ("d.tracker_numwant",      std::bind(&torrent::TrackerList::numwant, CMD2_BIND_TL));
   CMD2_DL_VALUE_V ("d.tracker_numwant.set",  std::bind(&torrent::TrackerList::set_numwant, CMD2_BIND_TL, std::placeholders::_2));
   CMD2_DL         ("d.tracker_focus",        std::bind(&torrent::TrackerList::focus_index, CMD2_BIND_TL));
   CMD2_DL         ("d.tracker_size",         std::bind(&core::Download::tracker_list_size, std::placeholders::_1));
 
   CMD2_DL         ("d.directory",          CMD2_ON_FL(root_dir));
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/command_dynamic.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/command_dynamic.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/command_dynamic.cc	2011-04-07 15:44:07.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/command_dynamic.cc	2011-06-04 12:01:19.000000000 +0800
@@ -167,12 +167,21 @@
       (create_new_key<0>(rawKey, ""),
        std::bind(&rpc::object_storage::get_str, control->object_storage(), rawKey),
        &rpc::command_base_call<rpc::target_type>,
        cmd_flags, NULL, NULL);
   }
 
+  // Not the right argument.
+  // if (flags & rpc::object_storage::flag_rlookup) {
+  //   rpc::commands.insert_slot<rpc::command_base_is_type<rpc::command_base_call_string<rpc::target_type> >::type>
+  //     (create_new_key<9>(rawKey, ".rlookup"),
+  //      std::bind(&rpc::object_storage::rlookup_obj_list, control->object_storage(), rawKey),
+  //      &rpc::command_base_call_string<rpc::target_type>,
+  //      cmd_flags, NULL, NULL);
+  // }
+
   // TODO: Next... Make test class for this.
 
 //   // Ehm... no proper handling if these throw.
 
   if (!(flags & rpc::object_storage::flag_constant)) {
     switch (flags & rpc::object_storage::mask_type) {
@@ -251,12 +260,14 @@
     if (options.find("static") != std::string::npos)
       new_flags |= rpc::object_storage::flag_static;
     if (options.find("private") != std::string::npos)
       new_flags |= rpc::object_storage::flag_private;
     if (options.find("const") != std::string::npos)
       new_flags |= rpc::object_storage::flag_constant;
+    if (options.find("rlookup") != std::string::npos)
+      new_flags |= rpc::object_storage::flag_rlookup;
 
     return system_method_insert_object(new_args, new_flags);
 
   } else if (options.find("simple") != std::string::npos) {
     torrent::Object::list_type new_args;
     new_args.push_back(rawKey);
@@ -380,16 +391,21 @@
     throw torrent::input_error("Invalid argument count.");
 
   torrent::Object::list_const_iterator itrArgs = args.begin();
   const std::string& key = (itrArgs++)->as_string();
   const std::string& cmd_key = (itrArgs++)->as_string();
   
-  if (itrArgs != args.end())
-    control->object_storage()->set_str_multi_key(key, cmd_key, system_method_generate_command(itrArgs, args.end()));
-  else
+  if (itrArgs == args.end()) {
     control->object_storage()->erase_str_multi_key(key, cmd_key);
+    return torrent::Object();
+  }
+
+  if (itrArgs->is_dict_key())
+    control->object_storage()->set_str_multi_key_obj(key.c_str(), cmd_key, *itrArgs);
+  else
+    control->object_storage()->set_str_multi_key(key, cmd_key, system_method_generate_command(itrArgs, args.end()));
 
   return torrent::Object();
 }
 
 torrent::Object
 system_method_list_keys(const torrent::Object::string_type& args) {
@@ -428,7 +444,10 @@
                                                        std::placeholders::_2));
   CMD2_ANY_LIST    ("method.set",       std::bind(&system_method_set_function, std::placeholders::_2));
 
   CMD2_ANY_LIST    ("method.has_key",   std::bind(&system_method_has_key, std::placeholders::_2));
   CMD2_ANY_LIST    ("method.set_key",   std::bind(&system_method_set_key, std::placeholders::_2));
   CMD2_ANY_STRING  ("method.list_keys", std::bind(&system_method_list_keys, std::placeholders::_2));
+
+  CMD2_ANY_STRING  ("method.rlookup",       std::bind(&rpc::object_storage::rlookup_obj_list, control->object_storage(), std::placeholders::_2));
+  CMD2_ANY_STRING_V("method.rlookup.clear", std::bind(&rpc::object_storage::rlookup_clear, control->object_storage(), std::placeholders::_2));
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/command_file.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/command_file.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/command_file.cc	2011-04-07 15:44:06.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/command_file.cc	2011-05-21 22:32:58.000000000 +0800
@@ -53,12 +53,13 @@
   if (value > torrent::PRIORITY_HIGH)
     throw torrent::input_error("Invalid value.");
 
   file->set_priority((torrent::priority_t)value);
 }
 
+// TODO: Redundant.
 torrent::Object
 apply_f_path(torrent::File* file) {
   if (file->path()->empty())
     return std::string();
 
   torrent::Object resultRaw(*file->path()->begin());
@@ -107,12 +108,19 @@
 
   CMD2_FILE_VALUE_V("f.set_create_queued",   std::bind(&torrent::File::set_flags,   std::placeholders::_1, torrent::File::flag_create_queued));
   CMD2_FILE_VALUE_V("f.set_resize_queued",   std::bind(&torrent::File::set_flags,   std::placeholders::_1, torrent::File::flag_resize_queued));
   CMD2_FILE_VALUE_V("f.unset_create_queued", std::bind(&torrent::File::unset_flags, std::placeholders::_1, torrent::File::flag_create_queued));
   CMD2_FILE_VALUE_V("f.unset_resize_queued", std::bind(&torrent::File::unset_flags, std::placeholders::_1, torrent::File::flag_resize_queued));
 
+  CMD2_FILE  ("f.prioritize_first",         std::bind(&torrent::File::has_flags,   std::placeholders::_1, torrent::File::flag_prioritize_first));
+  CMD2_FILE_V("f.prioritize_first.enable",  std::bind(&torrent::File::set_flags,   std::placeholders::_1, torrent::File::flag_prioritize_first));
+  CMD2_FILE_V("f.prioritize_first.disable", std::bind(&torrent::File::unset_flags, std::placeholders::_1, torrent::File::flag_prioritize_first));
+  CMD2_FILE  ("f.prioritize_last",          std::bind(&torrent::File::has_flags,   std::placeholders::_1, torrent::File::flag_prioritize_last));
+  CMD2_FILE_V("f.prioritize_last.enable",   std::bind(&torrent::File::set_flags,   std::placeholders::_1, torrent::File::flag_prioritize_last));
+  CMD2_FILE_V("f.prioritize_last.disable",  std::bind(&torrent::File::unset_flags, std::placeholders::_1, torrent::File::flag_prioritize_last));
+
   CMD2_FILE("f.size_bytes",             std::bind(&torrent::File::size_bytes, std::placeholders::_1));
   CMD2_FILE("f.size_chunks",            std::bind(&torrent::File::size_chunks, std::placeholders::_1));
   CMD2_FILE("f.completed_chunks",       std::bind(&torrent::File::completed_chunks, std::placeholders::_1));
 
   CMD2_FILE("f.offset",                 std::bind(&torrent::File::offset, std::placeholders::_1));
   CMD2_FILE("f.range_first",            std::bind(&torrent::File::range_first, std::placeholders::_1));
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/command_helpers.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/command_helpers.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/command_helpers.h	2011-04-07 15:44:07.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/command_helpers.h	2011-05-21 22:53:21.000000000 +0800
@@ -119,12 +119,19 @@
 
 #define CMD2_VAR_C_STRING(key, value)                                   \
   control->object_storage()->insert_c_str(key, value, rpc::object_storage::flag_string_type); \
   CMD2_ANY(key, std::bind(&rpc::object_storage::get, control->object_storage(),   \
                                torrent::raw_string::from_c_str(key)));
 
+#define CMD2_VAR_LIST(key)                                              \
+  control->object_storage()->insert_c_str(key, torrent::Object::create_list(), rpc::object_storage::flag_list_type); \
+  CMD2_ANY(key, std::bind(&rpc::object_storage::get, control->object_storage(),   \
+                               torrent::raw_string::from_c_str(key)));  \
+  CMD2_ANY_LIST(key ".set", std::bind(&rpc::object_storage::set_list, control->object_storage(), \
+                                      torrent::raw_string::from_c_str(key), std::placeholders::_2));
+
 #define CMD2_FUNC_SINGLE(key, cmds)                                  \
   CMD2_ANY(key, std::bind(&rpc::command_function_call, torrent::raw_string::from_c_str(cmds), \
                                std::placeholders::_1, std::placeholders::_2));
 
 #define CMD2_REDIRECT(from_key, to_key) \
   rpc::commands.create_redirect(from_key, to_key, rpc::CommandMap::flag_public_xmlrpc | rpc::CommandMap::flag_dont_delete);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/command_local.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/command_local.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/command_local.cc	2011-04-22 09:59:32.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/command_local.cc	2011-06-14 10:57:10.000000000 +0800
@@ -307,20 +307,24 @@
   CMD2_ANY         ("system.hostname", std::bind(&system_hostname));
   CMD2_ANY         ("system.pid",      std::bind(&getpid));
 
   CMD2_VAR_C_STRING("system.client_version",        PACKAGE_VERSION);
   CMD2_VAR_C_STRING("system.library_version",       torrent::version());
   CMD2_VAR_VALUE   ("system.file.allocate",         0);
-  CMD2_VAR_VALUE   ("system.file.max_size",         -1);
+  CMD2_VAR_VALUE   ("system.file.max_size",         (int64_t)64 << 30);
   CMD2_VAR_VALUE   ("system.file.split_size",       -1);
   CMD2_VAR_STRING  ("system.file.split_suffix",     ".part");
 
   CMD2_ANY         ("system.file_status_cache.size",   std::bind(&utils::FileStatusCache::size,
                                                                       (utils::FileStatusCache::base_type*)control->core()->file_status_cache()));
   CMD2_ANY_V       ("system.file_status_cache.prune",  std::bind(&utils::FileStatusCache::prune, control->core()->file_status_cache()));
 
+  CMD2_VAR_BOOL    ("file.prioritize_toc",          0);
+  CMD2_VAR_LIST    ("file.prioritize_toc.first");
+  CMD2_VAR_LIST    ("file.prioritize_toc.last");
+
   CMD2_ANY         ("system.files.opened_counter",     std::bind(&FM_t::files_opened_counter, fileManager));
   CMD2_ANY         ("system.files.closed_counter",     std::bind(&FM_t::files_closed_counter, fileManager));
   CMD2_ANY         ("system.files.failed_counter",     std::bind(&FM_t::files_failed_counter, fileManager));
 
   CMD2_ANY         ("system.time",                     std::bind(&rak::timer::seconds, &cachedTime));
   CMD2_ANY         ("system.time_seconds",             std::bind(&rak::timer::current_seconds));
@@ -373,15 +377,19 @@
 
 #define CMD2_EXECUTE(key, flags)                                         \
   CMD2_ANY(key, std::bind(&rpc::ExecFile::execute_object, &rpc::execFile, std::placeholders::_2, flags));
 
   CMD2_EXECUTE     ("execute2",                rpc::ExecFile::flag_expand_tilde | rpc::ExecFile::flag_throw);
   CMD2_EXECUTE     ("execute.throw",           rpc::ExecFile::flag_expand_tilde | rpc::ExecFile::flag_throw);
+  CMD2_EXECUTE     ("execute.throw.bg",        rpc::ExecFile::flag_expand_tilde | rpc::ExecFile::flag_throw | rpc::ExecFile::flag_background);
   CMD2_EXECUTE     ("execute.nothrow",         rpc::ExecFile::flag_expand_tilde);
+  CMD2_EXECUTE     ("execute.nothrow.bg",      rpc::ExecFile::flag_expand_tilde | rpc::ExecFile::flag_background);
   CMD2_EXECUTE     ("execute.raw",             rpc::ExecFile::flag_throw);
+  CMD2_EXECUTE     ("execute.raw.bg",          rpc::ExecFile::flag_throw | rpc::ExecFile::flag_background);
   CMD2_EXECUTE     ("execute.raw_nothrow",     0);
+  CMD2_EXECUTE     ("execute.raw_nothrow.bg",  rpc::ExecFile::flag_background);
   CMD2_EXECUTE     ("execute.capture",         rpc::ExecFile::flag_throw | rpc::ExecFile::flag_expand_tilde | rpc::ExecFile::flag_capture);
   CMD2_EXECUTE     ("execute.capture_nothrow", rpc::ExecFile::flag_expand_tilde | rpc::ExecFile::flag_capture);
 
   CMD2_ANY_STRING  ("log.execute",    std::bind(&apply_log, std::placeholders::_2, 0));
   CMD2_ANY_STRING  ("log.vmmap.dump", std::bind(&log_vmmap_dump, std::placeholders::_2));
   CMD2_ANY_STRING_V("log.xmlrpc",     std::bind(&ThreadWorker::set_xmlrpc_log, worker_thread, std::placeholders::_2));
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/command_network.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/command_network.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/command_network.cc	2011-04-23 20:27:56.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/command_network.cc	2011-06-21 14:46:48.000000000 +0800
@@ -637,18 +637,18 @@
   CMD2_VAR_STRING  ("protocol.choke_heuristics.down.leech", "download_leech");
   CMD2_VAR_STRING  ("protocol.choke_heuristics.down.seed",  "download_leech");
 
   CMD2_ANY         ("throttle.unchoked_uploads",   std::bind(&torrent::ResourceManager::currently_upload_unchoked, torrent::resource_manager()));
   CMD2_ANY         ("throttle.unchoked_downloads", std::bind(&torrent::ResourceManager::currently_download_unchoked, torrent::resource_manager()));
 
-  CMD2_VAR_VALUE   ("throttle.min_peers.normal", 40);
-  CMD2_VAR_VALUE   ("throttle.max_peers.normal", 100);
+  CMD2_VAR_VALUE   ("throttle.min_peers.normal", 100);
+  CMD2_VAR_VALUE   ("throttle.max_peers.normal", 200);
   CMD2_VAR_VALUE   ("throttle.min_peers.seed",   -1);
   CMD2_VAR_VALUE   ("throttle.max_peers.seed",   -1);
 
-  CMD2_VAR_VALUE   ("throttle.max_uploads", 15);
+  CMD2_VAR_VALUE   ("throttle.max_uploads",      50);
 
   CMD2_VAR_VALUE   ("throttle.max_uploads.div",      1);
   CMD2_VAR_VALUE   ("throttle.max_uploads.global",   0);
   CMD2_VAR_VALUE   ("throttle.max_downloads.div",    1);
   CMD2_VAR_VALUE   ("throttle.max_downloads.global", 0);
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/command_ui.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/command_ui.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/command_ui.cc	2011-05-07 22:11:02.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/command_ui.cc	2011-06-04 12:01:19.000000000 +0800
@@ -401,12 +401,14 @@
   while (itr != args.end() && itr != --args.end()) {
     torrent::Object tmp;
     const torrent::Object* conditional;
 
     if (flags & 0x1 && itr->is_string())
       conditional = &(tmp = rpc::parse_command(target, itr->as_string().c_str(), itr->as_string().c_str() + itr->as_string().size()).first);
+    else if (flags & 0x1 && itr->is_dict_key())
+      conditional = &(tmp = rpc::commands.call_command(itr->as_dict_key().c_str(), itr->as_dict_obj(), target));
     else
       conditional = &*itr;
 
     bool result;
 
     switch (conditional->type()) {
@@ -434,12 +436,15 @@
   if (itr == args.end())
     return torrent::Object();
 
   if (flags & 0x1 && itr->is_string()) {
     return rpc::parse_command(target, itr->as_string().c_str(), itr->as_string().c_str() + itr->as_string().size()).first;
 
+  } else if (flags & 0x1 && itr->is_dict_key()) {
+    return rpc::commands.call_command(itr->as_dict_key().c_str(), itr->as_dict_obj(), target);
+
   } else if (flags & 0x1 && itr->is_list()) {
     // Move this into a special function or something. Also, might be
     // nice to have a parse_command function that takes list
     // iterator...
 
     for (torrent::Object::list_type::const_iterator cmdItr = itr->as_list().begin(), last = itr->as_list().end(); cmdItr != last; cmdItr++)
@@ -509,12 +514,32 @@
 cmd_view_set_not_visible(core::Download* download, const torrent::Object::string_type& args) {
   (*control->view_manager()->find_throw(args))->set_not_visible(download);
 
   return torrent::Object();
 }
 
+torrent::Object
+apply_elapsed_less(const torrent::Object::list_type& args) {
+  if (args.size() != 2)
+    throw torrent::input_error("Wrong argument count.");
+
+  int64_t start_time = rpc::convert_to_value(args.front());
+
+  return (int64_t)(start_time != 0 && rak::timer::current_seconds() - start_time < rpc::convert_to_value(args.back()));
+}
+
+torrent::Object
+apply_elapsed_greater(const torrent::Object::list_type& args) {
+  if (args.size() != 2)
+    throw torrent::input_error("Wrong argument count.");
+
+  int64_t start_time = rpc::convert_to_value(args.front());
+
+  return (int64_t)(start_time != 0 && rak::timer::current_seconds() - start_time > rpc::convert_to_value(args.back()));
+}
+
 void
 initialize_command_ui() {
   CMD2_VAR_STRING("keys.layout", "qwerty");
 
   CMD2_ANY_STRING("view.add", object_convert_void(std::bind(&core::ViewManager::insert_throw, control->view_manager(), std::placeholders::_2)));
 
@@ -570,7 +595,10 @@
   CMD2_ANY_VALUE("convert.date",         std::bind(&apply_to_time, std::placeholders::_2, 0x1 | 0x2));
   CMD2_ANY_VALUE("convert.elapsed_time", std::bind(&apply_to_elapsed_time, std::placeholders::_2));
   CMD2_ANY_VALUE("convert.kb",           std::bind(&apply_to_kb, std::placeholders::_2));
   CMD2_ANY_VALUE("convert.mb",           std::bind(&apply_to_mb, std::placeholders::_2));
   CMD2_ANY_VALUE("convert.xb",           std::bind(&apply_to_xb, std::placeholders::_2));
   CMD2_ANY_VALUE("convert.throttle",     std::bind(&apply_to_throttle, std::placeholders::_2));
+
+  CMD2_ANY_LIST ("elapsed.less",         std::bind(&apply_elapsed_less, std::placeholders::_2));
+  CMD2_ANY_LIST ("elapsed.greater",      std::bind(&apply_elapsed_greater, std::placeholders::_2));
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/core/download_factory.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/core/download_factory.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/core/download_factory.cc	2011-04-05 18:26:03.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/core/download_factory.cc	2011-06-14 10:56:43.000000000 +0800
@@ -254,27 +254,25 @@
   if (!rtorrent->has_key_string("custom5")) rtorrent->insert_key("custom5", std::string());
 
   rpc::call_command("d.uploads_max.set",      rpc::call_command_void("throttle.max_uploads"), rpc::make_target(download));
   rpc::call_command("d.peers_min.set",        rpc::call_command_void("throttle.min_peers.normal"), rpc::make_target(download));
   rpc::call_command("d.peers_max.set",        rpc::call_command_void("throttle.max_peers.normal"), rpc::make_target(download));
   rpc::call_command("d.tracker_numwant.set",  rpc::call_command_void("trackers.numwant"), rpc::make_target(download));
+  rpc::call_command("d.max_file_size.set",    rpc::call_command_void("system.file.max_size"), rpc::make_target(download));
 
   if (rpc::call_command_value("d.complete", rpc::make_target(download)) != 0) {
     if (rpc::call_command_value("throttle.min_peers.seed") >= 0)
       rpc::call_command("d.peers_min.set", rpc::call_command_void("throttle.min_peers.seed"), rpc::make_target(download));
 
     if (rpc::call_command_value("throttle.max_peers.seed") >= 0)
       rpc::call_command("d.peers_max.set", rpc::call_command_void("throttle.max_peers.seed"), rpc::make_target(download));
   }
 
   if (!rpc::call_command_value("trackers.use_udp"))
     download->enable_udp_trackers(false);
 
-  if (rpc::call_command_value("system.file.max_size") > 0)
-    rpc::call_command("d.max_file_size.set", rpc::call_command_void("system.file.max_size"), rpc::make_target(download));
-
   // Check first if we already have these values set in the session
   // torrent, so that it is safe to change the values.
   //
   // Need to also catch the exceptions.
   if (rpc::call_command_value("system.file.split_size") >= 0)
     torrent::file_split_all(download->download()->file_list(),
@@ -365,12 +363,14 @@
     rtorrent->insert_key("state_counter", int64_t());
   }
 
   rtorrent->insert_preserve_copy("complete", (int64_t)0);
   rtorrent->insert_preserve_copy("hashing",  (int64_t)Download::variable_hashing_stopped);
 
+  rtorrent->insert_preserve_copy("timestamp.finished", (int64_t)0);
+
   rtorrent->insert_preserve_copy("tied_to_file", "");
   rtorrent->insert_key("loaded_file", m_isFile ? m_uri : std::string());
 
   if (rtorrent->has_key_value("priority"))
     rpc::call_command("d.priority.set", rtorrent->get_key_value("priority") % 4, rpc::make_target(download));
   else
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/core/download_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/core/download_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/core/download_list.cc	2011-04-05 18:26:03.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/core/download_list.cc	2011-06-04 12:01:19.000000000 +0800
@@ -530,14 +530,15 @@
       confirm_finished(download);
     } else {
       download->set_message("Hash check on download completion found bad chunks, consider using \"safe_sync\".");
       control->core()->push_log("Hash check on download completion found bad chunks, consider using \"safe_sync\".");
       rpc::commands.call_catch("event.download.hash_final_failed", rpc::make_target(download), torrent::Object(), "Download event action failed: ");
     }
-    
-    break;
+
+    // TODO: Should we skip the 'hash_done' event here?
+    return;
 
   case Download::variable_hashing_stopped:
   default:
     // Either an error or someone wrote to the hashing variable...
     download->set_message("Hash check completed but the \"hashing\" variable is in an invalid state.");
     return;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/core/view.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/core/view.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/core/view.cc	2011-04-20 22:01:24.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/core/view.cc	2011-05-26 12:14:11.000000000 +0800
@@ -37,17 +37,18 @@
 #include "config.h"
 
 #include <algorithm>
 #include <functional>
 #include <rak/functional.h>
 #include <rak/functional_fun.h>
-#include <rpc/parse_commands.h>
 #include <sigc++/adaptors/bind.h>
 #include <torrent/download.h>
 #include <torrent/exceptions.h>
 
+#include "rpc/parse_commands.h"
+#include "rpc/object_storage.h"
 #include "control.h"
 #include "download.h"
 #include "download_list.h"
 #include "manager.h"
 #include "view.h"
 
@@ -319,25 +320,18 @@
 
   emit_changed();
 }
 
 void
 View::set_filter_on_event(const std::string& event) {
-  if (std::find(m_events.begin(), m_events.end(), event) != m_events.end())
-    return;
-
-  rpc::commands.call_catch("method.set_key", rpc::make_target(), rpc::create_object_list(event, "!view." + m_name, "view.filter_download=" + m_name));
-  m_events.push_back(event);
+  control->object_storage()->set_str_multi_key(event, "!view." + m_name, "view.filter_download=" + m_name);
 }
 
 void
 View::clear_filter_on() {
-  // Don't clear insert and erase as these are required to keep the
-  // View up-to-date with the available downloads.
-  for (event_list_type::const_iterator itr = m_events.begin(); itr != m_events.end(); itr++)
-    rpc::commands.call_catch("method.set_key", rpc::make_target(), rpc::create_object_list(*itr, "!view." + m_name));
+  control->object_storage()->rlookup_clear("!view." + m_name);
 }
 
 inline void
 View::insert_visible(Download* d) {
   iterator itr = std::find_if(begin_visible(), end_visible(), std::bind1st(view_downloads_compare(m_sortNew), d));
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/core/view.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/core/view.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/core/view.h	2011-04-20 21:35:55.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/core/view.h	2011-05-26 12:09:12.000000000 +0800
@@ -62,13 +62,12 @@
 
 class Download;
 
 class View : private std::vector<Download*> {
 public:
   typedef std::vector<Download*>         base_type;
-  typedef std::vector<std::string>       event_list_type;
   typedef sigc::signal0<void>            signal_type;
 
   using base_type::iterator;
   using base_type::const_iterator;
   using base_type::reverse_iterator;
   using base_type::const_reverse_iterator;
@@ -169,13 +168,12 @@
 
   // These should be replaced by a faster non-string command type.
   torrent::Object     m_sortNew;
   torrent::Object     m_sortCurrent;
 
   torrent::Object     m_filter;
-  event_list_type     m_events;
 
   std::string         m_eventAdded;
   std::string         m_eventRemoved;
 
   rak::timer          m_lastChanged;
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/core/view_manager.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/core/view_manager.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/core/view_manager.cc	2011-04-20 21:38:04.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/core/view_manager.cc	2011-05-26 12:05:27.000000000 +0800
@@ -112,11 +112,13 @@
 void
 ViewManager::set_filter_on(const std::string& name, const filter_args& args) {
   iterator viewItr = find_throw(name);
 
   (*viewItr)->clear_filter_on();
 
+  // TODO: Ensure the filter keys are rlookup.
+
   for (filter_args::const_iterator itr = args.begin(); itr != args.end(); ++itr)
     (*viewItr)->set_filter_on_event(*itr);
 }
 
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/main.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/main.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/main.cc	2011-05-09 21:08:03.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/main.cc	2011-06-12 14:43:04.000000000 +0800
@@ -214,49 +214,56 @@
 //        "method.insert = test.string,string,6\n"
 //        "method.insert = test.bool,bool,true\n"
 
        // "method.insert.simple = test.method.simple,((print,simple_test_,$argument.0=))\n"
        // "method.insert.simple = test.method.double,((print,simple_test_,$argument.0=)),\"print=simple_test_,$argument.1=\"\n"
 
-       "method.insert = event.download.inserted,multi\n"
-       "method.insert = event.download.inserted_new,multi\n"
-       "method.insert = event.download.inserted_session,multi\n"
-       "method.insert = event.download.erased,multi\n"
-       "method.insert = event.download.opened,multi\n"
-       "method.insert = event.download.closed,multi\n"
-       "method.insert = event.download.resumed,multi\n"
-       "method.insert = event.download.paused,multi\n"
+       "method.insert = event.download.inserted,multi|rlookup|static\n"
+       "method.insert = event.download.inserted_new,multi|rlookup|static\n"
+       "method.insert = event.download.inserted_session,multi|rlookup|static\n"
+       "method.insert = event.download.erased,multi|rlookup|static\n"
+       "method.insert = event.download.opened,multi|rlookup|static\n"
+       "method.insert = event.download.closed,multi|rlookup|static\n"
+       "method.insert = event.download.resumed,multi|rlookup|static\n"
+       "method.insert = event.download.paused,multi|rlookup|static\n"
        
-       "method.insert = event.download.finished,multi\n"
-       "method.insert = event.download.hash_done,multi\n"
-       "method.insert = event.download.hash_failed,multi\n"
-       "method.insert = event.download.hash_final_failed,multi\n"
-       "method.insert = event.download.hash_removed,multi\n"
-       "method.insert = event.download.hash_queued,multi\n"
+       "method.insert = event.download.finished,multi|rlookup|static\n"
+       "method.insert = event.download.hash_done,multi|rlookup|static\n"
+       "method.insert = event.download.hash_failed,multi|rlookup|static\n"
+       "method.insert = event.download.hash_final_failed,multi|rlookup|static\n"
+       "method.insert = event.download.hash_removed,multi|rlookup|static\n"
+       "method.insert = event.download.hash_queued,multi|rlookup|static\n"
 
        "method.set_key = event.download.inserted,         1_connect_logs, d.initialize_logs=\n"
        "method.set_key = event.download.inserted_new,     1_prepare, \"branch=d.state=,view.set_visible=started,view.set_visible=stopped ;d.save_full_session=\"\n"
        "method.set_key = event.download.inserted_session, 1_prepare, \"branch=d.state=,view.set_visible=started,view.set_visible=stopped\"\n"
 
+       "method.set_key = event.download.inserted, 1_prioritize_toc, \"branch=file.prioritize_toc=,{\\\"f.multicall=(file.prioritize_toc.first),f.prioritize_first.enable=\\\",\\\"f.multicall=(file.prioritize_toc.last),f.prioritize_last.enable=\\\",d.update_priorities=}\"\n"
+
        "method.set_key = event.download.erased, !_download_list, ui.unfocus_download=\n"
        "method.set_key = event.download.erased, ~_delete_tied, d.delete_tied=\n"
 
+       "method.set_key = event.download.finished,  !_timestamp, ((d.timestamp.finished.set, ((system.time)) ))\n"
+
        "method.insert.c_simple = group.insert_persistent_view,"
        "((view.add,((argument.0)))),((view.persistent,((argument.0)))),((group.insert,((argument.0)),((argument.0))))\n"
 
+       "file.prioritize_toc.first.set = {*.avi,*.mp4,*.mkv,*.gz}\n"
+       "file.prioritize_toc.last.set  = {*.zip}\n"
+
        // Allow setting 'group2.view' as constant, so that we can't
        // modify the value. And look into the possibility of making
        // 'const' use non-heap memory, as we know they can't be
        // erased.
 
        // TODO: Remember to ensure it doesn't get restarted by watch
        // dir, etc. Set ignore commands, or something.
 
        "group.insert = seeding,seeding\n"
 
-       "session.name = \"$cat=$system.hostname=,:,$system.pid=\"\n"
+       "session.name.set = \"$cat=$system.hostname=,:,$system.pid=\"\n"
 
        // Currently not doing any sorting on main.
        "view.add = main\n"
        "view.add = default\n"
 
        "view.add = name\n"
@@ -290,13 +297,13 @@
        // "view.sort_current = incomplete,((less,((d.state_changed))))\n"
 
        // The hashing view does not include stopped torrents.
        "view.add = hashing\n"
        "view.filter = hashing,((d.hashing))\n"
        "view.filter_on = hashing,event.download.hash_queued,event.download.hash_removed,"
-                                "event.download.hash_done,event.download.hash_failed,event.download.hash_final_failed\n"
+                                "event.download.hash_done,event.download.hash_failed,event.download.hash_final_failed,event.download.finished\n"
 //        "view.sort_new     = hashing,less=d.state_changed=\n"
 //        "view.sort_current = hashing,less=d.state_changed=\n"
 
        "view.add    = seeding\n"
        "view.filter = seeding,((and,((d.state)),((d.complete))))\n"
        "view.filter_on    = seeding,event.download.resumed,event.download.paused,event.download.finished\n"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/rpc/exec_file.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/rpc/exec_file.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/rpc/exec_file.cc	2011-04-06 17:43:14.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/rpc/exec_file.cc	2011-05-21 20:52:29.000000000 +0800
@@ -128,17 +128,25 @@
       if (m_logFd != -1) {
         write(m_logFd, "Captured output:\n", sizeof("Captured output:\n"));
         write(m_logFd, m_capture.data(), m_capture.length());
       }
     }
 
+    if (flags & flag_background) {
+      if (m_logFd != -1)
+        write(m_logFd, "\n--- Background task ---\n", sizeof("\n--- Background task ---\n"));
+        
+      return 0;
+    }
+
     int status;
-    int wpid = waitpid(childPid, &status, 0);
+    int wpid;
 
-    while (wpid == -1 && rak::error_number::current().value() == rak::error_number::e_intr)
+    do {
       wpid = waitpid(childPid, &status, 0);
+    } while (wpid == -1 && rak::error_number::current().value() == rak::error_number::e_intr);
 
     if (wpid != childPid)
       throw torrent::internal_error("ExecFile::execute(...) waitpid failed.");
 
     // Check return value?
     if (m_logFd != -1) {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/rpc/exec_file.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/rpc/exec_file.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/rpc/exec_file.h	2011-04-05 18:26:10.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/rpc/exec_file.h	2011-05-21 20:37:44.000000000 +0800
@@ -46,12 +46,13 @@
   static const unsigned int max_args    = 128;
   static const unsigned int buffer_size = 4096;
     
   static const int flag_expand_tilde = 0x1;
   static const int flag_throw        = 0x2;
   static const int flag_capture      = 0x4;
+  static const int flag_background   = 0x8;
 
   ExecFile() : m_logFd(-1) {}
 
   int                 log_fd() const     { return m_logFd; }
   void                set_log_fd(int fd) { m_logFd = fd; }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/rpc/fixed_key.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/rpc/fixed_key.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/rpc/fixed_key.h	2011-04-05 18:26:10.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/rpc/fixed_key.h	2011-05-25 17:52:12.000000000 +0800
@@ -77,12 +77,15 @@
   void              set_c_str(const value_type* src_data);
   void              set_c_str(const value_type* src_data, size_type src_size);
 
   bool operator == (const fixed_key_type& rhs) const { return m_size == rhs.m_size && std::memcmp(m_data, rhs.m_data, m_size) == 0; }
   bool operator != (const fixed_key_type& rhs) const { return m_size != rhs.m_size || std::memcmp(m_data, rhs.m_data, m_size) != 0; }
 
+  bool operator == (const torrent::raw_string& rhs) const { return m_size == rhs.size() && std::memcmp(m_data, rhs.data(), m_size) == 0; }
+  bool operator != (const torrent::raw_string& rhs) const { return m_size != rhs.size() || std::memcmp(m_data, rhs.data(), m_size) != 0; }
+
   bool operator == (const std::string& rhs) const { return m_size == rhs.size() && std::memcmp(m_data, rhs.data(), m_size) == 0; }
 
 private:
   size_type   m_size;
   char        m_data[max_size];
 };
@@ -107,9 +110,14 @@
       result = (result * 131) + *data++;
 
     return result;
   }
 };
 
+template <size_t MaxSize>
+bool operator == (const torrent::raw_string& lhs, const fixed_key_type<MaxSize>& rhs) {
+  return lhs.size() == rhs.size() && std::memcmp(lhs.data(), rhs.data(), lhs.size()) == 0;
+}
+
 }
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/rpc/object_storage.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/rpc/object_storage.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/rpc/object_storage.cc	2011-04-05 18:26:10.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/rpc/object_storage.cc	2011-06-04 12:01:18.000000000 +0800
@@ -35,12 +35,13 @@
 //           3185 Skoppum, NORWAY
 
 #include "config.h"
 
 #include "object_storage.h"
 
+#include "rak/functional.h"
 #include "parse.h"
 #include "parse_commands.h"
 
 namespace rpc {
 
 object_storage::local_iterator
@@ -66,19 +67,23 @@
   torrent::Object object;
 
   switch (flags & mask_type) {
   case flag_bool_type:     object = !!convert_to_value(rawObject); break;
   case flag_value_type:    object = convert_to_value(rawObject); break;
   case flag_string_type:   object = convert_to_string(rawObject); break;
+  case flag_list_type:     use_raw = true; break;
   case flag_function_type: use_raw = true; break;
   case flag_multi_type:    object = torrent::Object::create_map(); break;
   }
 
   if (!(flags & mask_type))
     throw torrent::input_error("No type flags set when calling object_storage::insert.");
 
+  if ((flags & flag_rlookup) && (!(flags & flag_static) || !(flags & flag_multi_type)))
+    throw torrent::input_error("Cannot insert non-static or non-multi-type object with rlookup enabled.");
+
   std::pair<iterator, bool> result = base_type::insert(std::make_pair(key_type(key_data, key_size), object_storage_node()));
 
   if (!result.second)
     throw torrent::input_error("Key already exists in object_storage.");
 
   result.first->second.flags = flags;
@@ -127,12 +132,22 @@
     throw torrent::input_error("Key not found or wrong type.");
 
   return itr->second.object = object;
 }
 
 const torrent::Object&
+object_storage::set_list(const torrent::raw_string& key, const torrent::Object::list_type& object) {
+  local_iterator itr = find_local(key);
+
+  if (itr == end(bucket_count()) || (itr->second.flags & mask_type) != flag_list_type)
+    throw torrent::input_error("Key not found or wrong type.");
+
+  return itr->second.object = torrent::Object::create_list_range(object.begin(), object.end());
+}
+
+const torrent::Object&
 object_storage::set_function(const torrent::raw_string& key, const std::string& object) {
   local_iterator itr = find_local(key);
 
   if (itr == end(bucket_count()) || (itr->second.flags & mask_type) != flag_function_type)
     throw torrent::input_error("Key not found or wrong type.");
 
@@ -169,19 +184,74 @@
   local_iterator itr = find_local(key);
 
   if (itr != end(0) && (itr->second.flags & mask_type) == flag_multi_type)
     return;
 
   itr->second.object.erase_key(cmd_key);
+
+  if (!(itr->second.flags & flag_rlookup))
+    return;
+
+  // Remove the rlookup entry.
+  rlookup_iterator r_itr = m_rlookup.find(cmd_key);
+
+  if (r_itr == m_rlookup.end())
+    return;
+
+  rlookup_mapped_iterator rm_itr = std::find_if(r_itr->second.begin(), r_itr->second.end(),
+                                                rak::equal(key, rak::mem_ptr(&value_type::first)));
+
+  if (rm_itr != r_itr->second.end())
+    r_itr->second.erase(rm_itr);
 }
 
 void
-object_storage::set_multi_key(const torrent::raw_string& key, const std::string& cmd_key, const std::string& object) {
+object_storage::set_multi_key_obj(const torrent::raw_string& key, const std::string& cmd_key, const torrent::Object& object) {
+  if (!object.is_string() && !object.is_dict_key())
+    throw torrent::input_error("Object is wrong type.");
+
   local_iterator itr = find_local(key);
 
   if (itr == end(0) || (itr->second.flags & mask_type) != flag_multi_type)
     throw torrent::input_error("Key not found or wrong type.");
 
+  if (itr->second.flags & flag_rlookup) {
+    rlookup_iterator r_itr = m_rlookup.find(cmd_key);
+
+    if (r_itr == m_rlookup.end())
+      r_itr = m_rlookup.insert(std::make_pair(cmd_key, rlookup_type::mapped_type())).first;
+
+    if (std::find_if(r_itr->second.begin(), r_itr->second.end(),
+                     rak::equal(key, rak::mem_ptr(&value_type::first))) == r_itr->second.end())
+      r_itr->second.push_back(&*itr);
+  }
+
   itr->second.object.insert_key(cmd_key, object);
 }
 
+torrent::Object::list_type
+object_storage::rlookup_list(const std::string& cmd_key) {
+  torrent::Object::list_type result;
+
+  rlookup_iterator r_itr = m_rlookup.find(cmd_key);
+  
+  if (r_itr != m_rlookup.end())
+    std::transform(r_itr->second.begin(), r_itr->second.end(), std::back_inserter(result),
+                   std::bind(&key_type::c_str, std::bind(rak::mem_ptr(&value_type::first), std::placeholders::_1)));
+
+  return result;
+}
+
+void
+object_storage::rlookup_clear(const std::string& cmd_key) {
+  rlookup_iterator r_itr = m_rlookup.find(cmd_key);
+  
+  if (r_itr == m_rlookup.end())
+    return;
+
+  for (rlookup_mapped_iterator first = r_itr->second.begin(), last = r_itr->second.end(); first != last; first++)
+    (*first)->second.object.erase_key(cmd_key);
+
+  r_itr->second.clear();
+}
+
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/rpc/object_storage.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/rpc/object_storage.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/rpc/object_storage.h	2011-04-07 15:44:06.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/rpc/object_storage.h	2011-06-04 12:01:18.000000000 +0800
@@ -42,59 +42,71 @@
 #define RTORRENT_RPC_OBJECT_STORAGE_H
 
 #include <cstring>
 #include <tr1/unordered_map>
 #include <torrent/object.h>
 
+#include "rak/unordered_vector.h"
 #include "command.h"
 #include "fixed_key.h"
 
 namespace rpc {
 
 struct object_storage_node {
   torrent::Object object;
   char            flags;
 };
 
-class object_storage : private std::unordered_map<fixed_key_type<64>, object_storage_node, hash_fixed_key_type> {
+typedef std::unordered_map<fixed_key_type<64>, object_storage_node, hash_fixed_key_type> object_storage_base_type;
+
+class object_storage : private object_storage_base_type {
 public:
-  typedef std::unordered_map<fixed_key_type<64>, object_storage_node, hash_fixed_key_type> base_type;
+  // Should really change rlookup_type into a set with pair values.
+  typedef object_storage_base_type                                              base_type;
+  typedef std::map<std::string, rak::unordered_vector<base_type::value_type*> > rlookup_type;
 
   using base_type::key_type;
   using base_type::value_type;
   using base_type::iterator;
   using base_type::const_iterator;
   using base_type::local_iterator;
   using base_type::const_local_iterator;
 
+  typedef rlookup_type::iterator              rlookup_iterator;
+  typedef rlookup_type::mapped_type::iterator rlookup_mapped_iterator;
+
   using base_type::begin;
   using base_type::end;
   using base_type::size;
   using base_type::empty;
   using base_type::key_eq;
   using base_type::bucket;
   using base_type::bucket_count;
   using base_type::max_bucket_count;
   using base_type::load_factor;
 
+  // Verify rlookup is static / const.
+
   using base_type::clear;
   using base_type::find;
   using base_type::erase;
   
   static const unsigned int flag_generic_type  = 0x1;
   static const unsigned int flag_bool_type     = 0x2;
   static const unsigned int flag_value_type    = 0x3;
   static const unsigned int flag_string_type   = 0x4;
-  static const unsigned int flag_function_type = 0x5;
-  static const unsigned int flag_multi_type    = 0x6;
+  static const unsigned int flag_list_type     = 0x5;
+  static const unsigned int flag_function_type = 0x6;
+  static const unsigned int flag_multi_type    = 0x7;
 
   static const unsigned int mask_type          = 0xf;
 
-  static const unsigned int flag_constant = 0x10;
-  static const unsigned int flag_static   = 0x20;
-  static const unsigned int flag_private  = 0x40;
+  static const unsigned int flag_constant      = 0x10;
+  static const unsigned int flag_static        = 0x20;
+  static const unsigned int flag_private       = 0x40;
+  static const unsigned int flag_rlookup       = 0x80;
 
   static const size_t key_size = key_type::max_size;
 
   local_iterator find_local(const torrent::raw_string& key);
 
   iterator insert(const char* key_data, uint32_t key_size, const torrent::Object& object, unsigned int flags);
@@ -119,29 +131,44 @@
   const torrent::Object& set_str_value(const std::string& str, int64_t object) { return set_value(torrent::raw_string::from_string(str), object); }
 
   const torrent::Object& set_string(const torrent::raw_string& key, const std::string& object);
   const torrent::Object& set_c_str_string(const char* str, const std::string& object) { return set_string(torrent::raw_string::from_c_str(str), object); }
   const torrent::Object& set_str_string(const std::string& str, const std::string& object) { return set_string(torrent::raw_string::from_string(str), object); }
   
+  const torrent::Object& set_list(const torrent::raw_string& key, const torrent::Object::list_type& object);
+  const torrent::Object& set_c_str_list(const char* str, const torrent::Object::list_type& object) { return set_list(torrent::raw_string::from_c_str(str), object); }
+  const torrent::Object& set_str_list(const std::string& str, const torrent::Object::list_type& object) { return set_list(torrent::raw_string::from_string(str), object); }
+
   // Functions callers:
-  torrent::Object call_function(const torrent::raw_string& key, target_type target, const torrent::Object& object);
-  torrent::Object call_function_str(const std::string& key, target_type target, const torrent::Object& object);
+  torrent::Object        call_function(const torrent::raw_string& key, target_type target, const torrent::Object& object);
+  torrent::Object        call_function_str(const std::string& key, target_type target, const torrent::Object& object);
 
   // Single-command function:
 
   const torrent::Object& set_function(const torrent::raw_string& key, const std::string& object);
   const torrent::Object& set_str_function(const std::string& key, const std::string& object);
 
   // Multi-command function:
   bool                   has_multi_key(const torrent::raw_string& key, const std::string& cmd_key);
   void                   erase_multi_key(const torrent::raw_string& key, const std::string& cmd_key);
-  void                   set_multi_key(const torrent::raw_string& key, const std::string& cmd_key, const std::string& object);
+  void                   set_multi_key_obj(const torrent::raw_string& key, const std::string& cmd_key, const torrent::Object& object);
+
+  void                   set_multi_key(const torrent::raw_string& key, const std::string& cmd_key, const std::string& object) { set_multi_key_obj(key, cmd_key, object); }
 
   bool                   has_str_multi_key(const std::string& key, const std::string& cmd_key);
   void                   erase_str_multi_key(const std::string& key, const std::string& cmd_key);
   void                   set_str_multi_key(const std::string& key, const std::string& cmd_key, const std::string& object);
+  void                   set_str_multi_key_obj(const std::string& key, const std::string& cmd_key, const torrent::Object& object);
+
+  torrent::Object::list_type rlookup_list(const std::string& cmd_key);
+  torrent::Object            rlookup_obj_list(const std::string& cmd_key) { return torrent::Object::from_list(rlookup_list(cmd_key)); }
+
+  void                       rlookup_clear(const std::string& cmd_key);
+
+private:
+  rlookup_type m_rlookup;
 };
 
 //
 // Implementation:
 //
 
@@ -214,12 +241,17 @@
 object_storage::erase_str_multi_key(const std::string& key, const std::string& cmd_key) {
   erase_multi_key(torrent::raw_string::from_string(key), cmd_key);
 }
 
 inline void
 object_storage::set_str_multi_key(const std::string& key, const std::string& cmd_key, const std::string& object) {
-  return set_multi_key(torrent::raw_string::from_string(key), cmd_key, object);
+  return set_multi_key_obj(torrent::raw_string::from_string(key), cmd_key, object);
+}
+
+inline void
+object_storage::set_str_multi_key_obj(const std::string& key, const std::string& cmd_key, const torrent::Object& object) {
+  return set_multi_key_obj(torrent::raw_string::from_string(key), cmd_key, object);
 }
 
 }
 
 #endif
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/rpc/parse.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/rpc/parse.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/rpc/parse.cc	2011-04-20 20:52:47.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/rpc/parse.cc	2011-05-26 11:32:31.000000000 +0800
@@ -449,22 +449,28 @@
   }
 
   case torrent::Object::TYPE_VALUE:
     return std::min(first + snprintf(first, std::distance(first, last), "%lli", src->as_value()), last);
 
   case torrent::Object::TYPE_LIST:
+    if (first != last)
+      *first = '\0';
+
     for (torrent::Object::list_const_iterator itr = src->as_list().begin(), itrEnd = src->as_list().end(); itr != itrEnd; itr++) {
       first = print_object(first, last, &*itr, flags);
 
       // Don't expand tilde after the first element in the list.
       flags &= ~print_expand_tilde;
     }
 
     return first;
 
   case torrent::Object::TYPE_NONE:
+    if (first != last)
+      *first = '\0';
+
     return first;
   default:
     throw torrent::input_error("Invalid type.");
   }
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/rpc/parse_commands.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/rpc/parse_commands.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/rpc/parse_commands.cc	2011-04-20 20:42:40.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/rpc/parse_commands.cc	2011-06-04 12:01:18.000000000 +0800
@@ -292,16 +292,24 @@
         
         rpc::parse_command_execute(target, &tmp_cmd);
         result = rpc::commands.call_command(tmp_cmd.as_dict_key().c_str(), tmp_cmd.as_dict_obj());
       }
       
     } else {
-      torrent::Object tmp_cmd = cmd;
-      
-      rpc::parse_command_execute(target, &tmp_cmd);
-      result = rpc::commands.call_command(tmp_cmd.as_dict_key().c_str(), tmp_cmd.as_dict_obj());
+      torrent::Object tmp_command = cmd;
+
+      // Unquote the root function object so 'parse_command_execute'
+      // doesn't end up calling it.
+      //
+      // TODO: Only call this if mask_function is set?
+      uint32_t flags = tmp_command.flags() & torrent::Object::mask_function;
+      tmp_command.unset_flags(torrent::Object::mask_function);
+      tmp_command.set_flags((flags >> 1) & torrent::Object::mask_function);
+
+      rpc::parse_command_execute(target, &tmp_command);
+      rpc::commands.call_command(tmp_command.as_dict_key().c_str(), tmp_command.as_dict_obj(), target);
     }
 
     rpc::command_base::pop_stack(&stack, last_stack);
     return result;
 
   } catch (torrent::bencode_error& e) {
@@ -321,12 +329,29 @@
     last_stack = rpc::command_base::push_stack(&args, &args + 1, &stack);
   else
     last_stack = rpc::command_base::push_stack(NULL, NULL, &stack);
 
   try {
     for (torrent::Object::map_const_iterator itr = cmd.begin(), last = cmd.end(); itr != last; itr++) {
+      if (itr->second.is_dict_key()) {
+        // This can/should be optimized...
+        torrent::Object tmp_command = itr->second;
+
+        // Unquote the root function object so 'parse_command_execute'
+        // doesn't end up calling it.
+        //
+        // TODO: Only call this if mask_function is set?
+        uint32_t flags = tmp_command.flags() & torrent::Object::mask_function;
+        tmp_command.unset_flags(torrent::Object::mask_function);
+        tmp_command.set_flags((flags >> 1) & torrent::Object::mask_function);
+
+        rpc::parse_command_execute(target, &tmp_command);
+        rpc::commands.call_command(tmp_command.as_dict_key().c_str(), tmp_command.as_dict_obj(), target);
+        continue;
+      }
+
       const std::string& cmd_str = itr->second.as_string();
       parse_command_multiple(target, cmd_str.c_str(), cmd_str.c_str() + cmd_str.size());
     }
 
   } catch (torrent::bencode_error& e) {
     rpc::command_base::pop_stack(&stack, last_stack);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/ui/element_file_list.cc /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/ui/element_file_list.cc
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.8/src/ui/element_file_list.cc	2011-04-05 18:26:12.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/repos/rtorrent-0.8.9/src/ui/element_file_list.cc	2011-05-21 21:49:37.000000000 +0800
@@ -94,13 +94,14 @@
   
   element->push_column("Size:",   te_command("if=$fi.is_file=,$convert.xb=$f.size_bytes=,---"));
   element->push_column("Chunks:", te_command("cat=$f.completed_chunks=,\" / \",$f.size_chunks="));
   element->push_column("Range:",  te_command("cat=$f.range_first=,\" - \",$f.range_second="));
   element->push_back("");
 
-  element->push_column("Queued:", te_command("cat=\"$if=$f.is_create_queued=,create\",\" \",\"$if=$f.is_resize_queued=,resize\""));
+  element->push_column("Queued:",     te_command("cat=\"$if=$f.is_create_queued=,create\",\" \",\"$if=$f.is_resize_queued=,resize\""));
+  element->push_column("Prioritize:", te_command("cat=\"$if=$f.prioritize_first=,first\",\" \",\"$if=$f.prioritize_last=,last\""));
 
   element->set_column_width(element->column_width() + 1);
 
   return element;
 }
 
