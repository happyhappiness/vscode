<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_86.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">initialize_command_peer<pos:position pos:line="2" pos:column="24"/></name><parameter_list pos:line="2" pos:column="24">()<pos:position pos:line="2" pos:column="26"/></parameter_list> <block pos:line="2" pos:column="27">{
<comment type="line" pos:line="3" pos:column="1">//   ADD_CP_VALUE_UNI("is_created",       std::mem_fun(&amp;torrent::Peer::is_created));</comment>
<comment type="line" pos:line="4" pos:column="1">//   ADD_CP_VALUE_UNI("is_open",          std::mem_fun(&amp;torrent::Peer::is_open));</comment>

<comment type="line" pos:line="6" pos:column="1">//   ADD_CP_VALUE_UNI("size_bytes",       std::mem_fun(&amp;torrent::Peer::size_bytes));</comment>
<comment type="line" pos:line="7" pos:column="1">//   ADD_CP_VALUE_UNI("size_chunks",      std::mem_fun(&amp;torrent::Peer::size_chunks));</comment>
<comment type="line" pos:line="8" pos:column="1">//   ADD_CP_VALUE_UNI("completed_chunks", std::mem_fun(&amp;torrent::Peer::completed_chunks));</comment>

<comment type="line" pos:line="10" pos:column="1">//   ADD_CP_VALUE_UNI("offset",           std::mem_fun(&amp;torrent::Peer::offset));</comment>
<comment type="line" pos:line="11" pos:column="1">//   ADD_CP_VALUE_UNI("range_first",      std::mem_fun(&amp;torrent::Peer::range_first));</comment>
<comment type="line" pos:line="12" pos:column="1">//   ADD_CP_VALUE_UNI("range_second",     std::mem_fun(&amp;torrent::Peer::range_second));</comment>

<comment type="line" pos:line="14" pos:column="1">//   ADD_CP_VALUE_BI("priority",          std::ptr_fun(&amp;apply_f_set_priority), std::mem_fun(&amp;torrent::Peer::priority));</comment>

<comment type="line" pos:line="16" pos:column="1">//   ADD_CP_STRING_UNI("path",            std::ptr_fun(&amp;apply_f_path));</comment>
<comment type="line" pos:line="17" pos:column="1">//   ADD_CP_STRING_UNI("path_components", std::ptr_fun(&amp;apply_f_path_components));</comment>
<comment type="line" pos:line="18" pos:column="1">//   ADD_CP_STRING_UNI("path_depth",      std::ptr_fun(&amp;apply_f_path_depth));</comment>
<comment type="line" pos:line="19" pos:column="1">//   ADD_CP_STRING_UNI("frozen_path",     std::mem_fun(&amp;torrent::Peer::frozen_path));</comment>

<comment type="line" pos:line="21" pos:column="1">//   ADD_CP_VALUE_UNI("match_depth_prev", std::mem_fun(&amp;torrent::Peer::match_depth_prev));</comment>
<comment type="line" pos:line="22" pos:column="1">//   ADD_CP_VALUE_UNI("match_depth_next", std::mem_fun(&amp;torrent::Peer::match_depth_next));</comment>

<comment type="line" pos:line="24" pos:column="1">//   ADD_CP_VALUE_UNI("last_touched",     std::mem_fun(&amp;torrent::Peer::last_touched));</comment>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
