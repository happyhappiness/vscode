<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_170.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name><modifier pos:line="1" pos:column="11">*<pos:position pos:line="1" pos:column="12"/></modifier></type>
<name pos:line="2" pos:column="1">parse_string<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><specifier pos:line="2" pos:column="14">const<pos:position pos:line="2" pos:column="19"/></specifier> <name pos:line="2" pos:column="20">char<pos:position pos:line="2" pos:column="24"/></name><modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type> <name pos:line="2" pos:column="26">first<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <name pos:line="2" pos:column="39">char<pos:position pos:line="2" pos:column="43"/></name><modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type> <name pos:line="2" pos:column="45">last<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="51">std<pos:position pos:line="2" pos:column="54"/></name><operator pos:line="2" pos:column="54">::<pos:position pos:line="2" pos:column="56"/></operator><name pos:line="2" pos:column="56">string<pos:position pos:line="2" pos:column="62"/></name></name><modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type> <name pos:line="2" pos:column="64">dest<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>, <parameter><function_decl><type><name pos:line="2" pos:column="70">bool<pos:position pos:line="2" pos:column="74"/></name></type> (<modifier pos:line="2" pos:column="76">*<pos:position pos:line="2" pos:column="77"/></modifier><name pos:line="2" pos:column="77">delim<pos:position pos:line="2" pos:column="82"/></name>)<parameter_list pos:line="2" pos:column="83">(<parameter><decl><type><specifier pos:line="2" pos:column="84">const<pos:position pos:line="2" pos:column="89"/></specifier> <name pos:line="2" pos:column="90">char<pos:position pos:line="2" pos:column="94"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="95"/></parameter_list></function_decl></parameter>)<pos:position pos:line="2" pos:column="96"/></parameter_list> <block pos:line="2" pos:column="97">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">first<pos:position pos:line="3" pos:column="12"/></name> <operator pos:line="3" pos:column="13">==<pos:position pos:line="3" pos:column="15"/></operator> <name pos:line="3" pos:column="16">last<pos:position pos:line="3" pos:column="20"/></name></expr>)<pos:position pos:line="3" pos:column="21"/></condition><then pos:line="3" pos:column="21">
    <block type="pseudo"><return pos:line="4" pos:column="5">return <expr><name pos:line="4" pos:column="12">first<pos:position pos:line="4" pos:column="17"/></name></expr>;<pos:position pos:line="4" pos:column="18"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">bool<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">quoted<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><call><name pos:line="6" pos:column="17">parse_is_quote<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><operator pos:line="6" pos:column="32">*<pos:position pos:line="6" pos:column="33"/></operator><name pos:line="6" pos:column="33">first<pos:position pos:line="6" pos:column="38"/></name></expr></argument>)<pos:position pos:line="6" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="40"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name pos:line="8" pos:column="7">quoted<pos:position pos:line="8" pos:column="13"/></name></expr>)<pos:position pos:line="8" pos:column="14"/></condition><then pos:line="8" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="5">first<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">++<pos:position pos:line="9" pos:column="12"/></operator></expr>;<pos:position pos:line="9" pos:column="13"/></expr_stmt></block></then></if>

  <while pos:line="11" pos:column="3">while <condition pos:line="11" pos:column="9">(<expr><name pos:line="11" pos:column="10">first<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">!=<pos:position pos:line="11" pos:column="18"/></operator> <name pos:line="11" pos:column="19">last<pos:position pos:line="11" pos:column="23"/></name></expr>)<pos:position pos:line="11" pos:column="24"/></condition> <block pos:line="11" pos:column="25">{
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">quoted<pos:position pos:line="12" pos:column="15"/></name></expr>)<pos:position pos:line="12" pos:column="16"/></condition><then pos:line="12" pos:column="16"> <block pos:line="12" pos:column="17">{
      <if pos:line="13" pos:column="7">if <condition pos:line="13" pos:column="10">(<expr><call><name pos:line="13" pos:column="11">parse_is_quote<pos:position pos:line="13" pos:column="25"/></name><argument_list pos:line="13" pos:column="25">(<argument><expr><operator pos:line="13" pos:column="26">*<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="27">first<pos:position pos:line="13" pos:column="32"/></name></expr></argument>)<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="34"/></condition><then pos:line="13" pos:column="34">
        <block type="pseudo"><return pos:line="14" pos:column="9">return <expr><operator pos:line="14" pos:column="16">++<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">first<pos:position pos:line="14" pos:column="23"/></name></expr>;<pos:position pos:line="14" pos:column="24"/></return></block></then></if>

    }<pos:position pos:line="16" pos:column="6"/></block></then> <else pos:line="16" pos:column="7">else <block pos:line="16" pos:column="12">{
      <if pos:line="17" pos:column="7">if <condition pos:line="17" pos:column="10">(<expr><call><name pos:line="17" pos:column="11">delim<pos:position pos:line="17" pos:column="16"/></name><argument_list pos:line="17" pos:column="16">(<argument><expr><operator pos:line="17" pos:column="17">*<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">first<pos:position pos:line="17" pos:column="23"/></name></expr></argument>)<pos:position pos:line="17" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="25"/></condition><then pos:line="17" pos:column="25">
        <block type="pseudo"><return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">first<pos:position pos:line="18" pos:column="21"/></name></expr>;<pos:position pos:line="18" pos:column="22"/></return></block></then></if>
    }<pos:position pos:line="19" pos:column="6"/></block></else></if>
        
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name pos:line="21" pos:column="9">parse_is_escape<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><operator pos:line="21" pos:column="25">*<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="26">first<pos:position pos:line="21" pos:column="31"/></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call> <operator pos:line="21" pos:column="33">&amp;&amp;<pos:position pos:line="21" pos:column="43"/></operator> <operator pos:line="21" pos:column="36">++<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="38">first<pos:position pos:line="21" pos:column="43"/></name> <operator pos:line="21" pos:column="44">==<pos:position pos:line="21" pos:column="46"/></operator> <name pos:line="21" pos:column="47">last<pos:position pos:line="21" pos:column="51"/></name></expr>)<pos:position pos:line="21" pos:column="52"/></condition><then pos:line="21" pos:column="52">
      <block type="pseudo"><throw pos:line="22" pos:column="7">throw <expr><call><name><name pos:line="22" pos:column="13">torrent<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">::<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">input_error<pos:position pos:line="22" pos:column="33"/></name></name><argument_list pos:line="22" pos:column="33">(<argument><expr><literal type="string" pos:line="22" pos:column="34">"Escape character at end of input."<pos:position pos:line="22" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="71"/></throw></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="24" pos:column="5">dest<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">-&gt;<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="11">push_back<pos:position pos:line="24" pos:column="20"/></name></name><argument_list pos:line="24" pos:column="20">(<argument><expr><operator pos:line="24" pos:column="21">*<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">first<pos:position pos:line="24" pos:column="27"/></name></expr></argument>)<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="25" pos:column="5">first<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">++<pos:position pos:line="25" pos:column="12"/></operator></expr>;<pos:position pos:line="25" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="26" pos:column="4"/></block></while>
  
  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><name pos:line="28" pos:column="7">quoted<pos:position pos:line="28" pos:column="13"/></name></expr>)<pos:position pos:line="28" pos:column="14"/></condition><then pos:line="28" pos:column="14">
    <block type="pseudo"><throw pos:line="29" pos:column="5">throw <expr><call><name><name pos:line="29" pos:column="11">torrent<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">::<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="20">input_error<pos:position pos:line="29" pos:column="31"/></name></name><argument_list pos:line="29" pos:column="31">(<argument><expr><literal type="string" pos:line="29" pos:column="32">"Missing closing quote."<pos:position pos:line="29" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="58"/></throw></block></then></if>

  <return pos:line="31" pos:column="3">return <expr><name pos:line="31" pos:column="10">first<pos:position pos:line="31" pos:column="15"/></name></expr>;<pos:position pos:line="31" pos:column="16"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
