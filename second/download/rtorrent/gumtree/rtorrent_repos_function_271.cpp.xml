<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_271.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">SCgiTask<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">event_read<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">()<pos:position pos:line="2" pos:column="23"/></parameter_list> <block pos:line="2" pos:column="24">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">bytes<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><call><name><operator pos:line="3" pos:column="15">::<pos:position pos:line="3" pos:column="17"/></operator><name pos:line="3" pos:column="17">recv<pos:position pos:line="3" pos:column="21"/></name></name><argument_list pos:line="3" pos:column="21">(<argument><expr><name pos:line="3" pos:column="22">m_fileDesc<pos:position pos:line="3" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="34">m_position<pos:position pos:line="3" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="46">m_bufferSize<pos:position pos:line="3" pos:column="58"/></name> <operator pos:line="3" pos:column="59">-<pos:position pos:line="3" pos:column="60"/></operator> <operator pos:line="3" pos:column="61">(<pos:position pos:line="3" pos:column="62"/></operator><name pos:line="3" pos:column="62">m_position<pos:position pos:line="3" pos:column="72"/></name> <operator pos:line="3" pos:column="73">-<pos:position pos:line="3" pos:column="74"/></operator> <name pos:line="3" pos:column="75">m_buffer<pos:position pos:line="3" pos:column="83"/></name><operator pos:line="3" pos:column="83">)<pos:position pos:line="3" pos:column="84"/></operator></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="86">0<pos:position pos:line="3" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="88"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="89"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">bytes<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">==<pos:position pos:line="5" pos:column="15"/></operator> <operator pos:line="5" pos:column="16">-<pos:position pos:line="5" pos:column="17"/></operator><literal type="number" pos:line="5" pos:column="17">1<pos:position pos:line="5" pos:column="18"/></literal></expr>)<pos:position pos:line="5" pos:column="19"/></condition><then pos:line="5" pos:column="19"> <block pos:line="5" pos:column="20">{
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name><name pos:line="6" pos:column="10">rak<pos:position pos:line="6" pos:column="13"/></name><operator pos:line="6" pos:column="13">::<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="15">error_number<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">::<pos:position pos:line="6" pos:column="29"/></operator><name pos:line="6" pos:column="29">current<pos:position pos:line="6" pos:column="36"/></name></name><argument_list pos:line="6" pos:column="36">()<pos:position pos:line="6" pos:column="38"/></argument_list></call><operator pos:line="6" pos:column="38">.<pos:position pos:line="6" pos:column="39"/></operator><call><name pos:line="6" pos:column="39">is_blocked_momentary<pos:position pos:line="6" pos:column="59"/></name><argument_list pos:line="6" pos:column="59">()<pos:position pos:line="6" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="62"/></condition><then pos:line="6" pos:column="62">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="7">close<pos:position pos:line="7" pos:column="12"/></name><argument_list pos:line="7" pos:column="12">()<pos:position pos:line="7" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="15"/></expr_stmt></block></then></if>

    <return pos:line="9" pos:column="5">return;<pos:position pos:line="9" pos:column="12"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

  <comment type="line" pos:line="12" pos:column="3">// The buffer has space to nul-terminate to ease the parsing below.</comment>
  <expr_stmt><expr><name pos:line="13" pos:column="3">m_position<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">+=<pos:position pos:line="13" pos:column="16"/></operator> <name pos:line="13" pos:column="17">bytes<pos:position pos:line="13" pos:column="22"/></name></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="14" pos:column="3">*<pos:position pos:line="14" pos:column="4"/></operator><name pos:line="14" pos:column="4">m_position<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <literal type="char" pos:line="14" pos:column="17">'\0'<pos:position pos:line="14" pos:column="21"/></literal></expr>;<pos:position pos:line="14" pos:column="22"/></expr_stmt>

  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">m_body<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">==<pos:position pos:line="16" pos:column="16"/></operator> <name pos:line="16" pos:column="17">NULL<pos:position pos:line="16" pos:column="21"/></name></expr>)<pos:position pos:line="16" pos:column="22"/></condition><then pos:line="16" pos:column="22"> <block pos:line="16" pos:column="23">{
    <comment type="line" pos:line="17" pos:column="5">// Don't bother caching the parsed values, as we're likely to</comment>
    <comment type="line" pos:line="18" pos:column="5">// receive all the data we need the first time.</comment>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">char<pos:position pos:line="19" pos:column="9"/></name><modifier pos:line="19" pos:column="9">*<pos:position pos:line="19" pos:column="10"/></modifier></type> <name pos:line="19" pos:column="11">current<pos:position pos:line="19" pos:column="18"/></name></decl>;<pos:position pos:line="19" pos:column="19"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="21" pos:column="5">int<pos:position pos:line="21" pos:column="8"/></name></type> <name pos:line="21" pos:column="9">contentSize<pos:position pos:line="21" pos:column="20"/></name></decl>;<pos:position pos:line="21" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">int<pos:position pos:line="22" pos:column="8"/></name></type> <name pos:line="22" pos:column="9">headerSize<pos:position pos:line="22" pos:column="19"/></name> <init pos:line="22" pos:column="20">= <expr><call><name pos:line="22" pos:column="22">strtol<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">m_buffer<pos:position pos:line="22" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="39">&amp;<pos:position pos:line="22" pos:column="44"/></operator><name pos:line="22" pos:column="40">current<pos:position pos:line="22" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="49">0<pos:position pos:line="22" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="52"/></decl_stmt>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">current<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">==<pos:position pos:line="24" pos:column="19"/></operator> <name pos:line="24" pos:column="20">m_buffer<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">||<pos:position pos:line="24" pos:column="31"/></operator> <name pos:line="24" pos:column="32">current<pos:position pos:line="24" pos:column="39"/></name> <operator pos:line="24" pos:column="40">==<pos:position pos:line="24" pos:column="42"/></operator> <name pos:line="24" pos:column="43">m_position<pos:position pos:line="24" pos:column="53"/></name></expr>)<pos:position pos:line="24" pos:column="54"/></condition><then pos:line="24" pos:column="54">
      <block type="pseudo"><return pos:line="25" pos:column="7">return;<pos:position pos:line="25" pos:column="14"/></return></block></then></if>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><operator pos:line="27" pos:column="9">*<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">current<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">!=<pos:position pos:line="27" pos:column="20"/></operator> <literal type="char" pos:line="27" pos:column="21">':'<pos:position pos:line="27" pos:column="24"/></literal> <operator pos:line="27" pos:column="25">||<pos:position pos:line="27" pos:column="27"/></operator> <name><name pos:line="27" pos:column="28">headerSize<pos:position pos:line="27" pos:column="38"/></name> <argument_list type="generic" pos:line="27" pos:column="39">&lt; <argument><expr><literal type="number" pos:line="27" pos:column="41">17<pos:position pos:line="27" pos:column="43"/></literal> <operator pos:line="27" pos:column="44">||<pos:position pos:line="27" pos:column="46"/></operator> <name pos:line="27" pos:column="47">headerSize<pos:position pos:line="27" pos:column="57"/></name></expr></argument> &gt;<pos:position pos:line="27" pos:column="62"/></argument_list></name> <name pos:line="27" pos:column="60">max_header_size<pos:position pos:line="27" pos:column="75"/></name></expr>)<pos:position pos:line="27" pos:column="76"/></condition><then pos:line="27" pos:column="76">
      <block type="pseudo"><goto pos:line="28" pos:column="7">goto <name pos:line="28" pos:column="12">event_read_failed<pos:position pos:line="28" pos:column="29"/></name>;<pos:position pos:line="28" pos:column="30"/></goto></block></then></if>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><call><name><name pos:line="30" pos:column="9">std<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">::<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">distance<pos:position pos:line="30" pos:column="22"/></name></name><argument_list pos:line="30" pos:column="22">(<argument><expr><operator pos:line="30" pos:column="23">++<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="25">current<pos:position pos:line="30" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="34">m_position<pos:position pos:line="30" pos:column="44"/></name></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call> <operator pos:line="30" pos:column="46">&lt;<pos:position pos:line="30" pos:column="50"/></operator> <name pos:line="30" pos:column="48">headerSize<pos:position pos:line="30" pos:column="58"/></name> <operator pos:line="30" pos:column="59">+<pos:position pos:line="30" pos:column="60"/></operator> <literal type="number" pos:line="30" pos:column="61">1<pos:position pos:line="30" pos:column="62"/></literal></expr>)<pos:position pos:line="30" pos:column="63"/></condition><then pos:line="30" pos:column="63">
      <block type="pseudo"><return pos:line="31" pos:column="7">return;<pos:position pos:line="31" pos:column="14"/></return></block></then></if>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><call><name><name pos:line="33" pos:column="9">std<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">::<pos:position pos:line="33" pos:column="14"/></operator><name pos:line="33" pos:column="14">memcmp<pos:position pos:line="33" pos:column="20"/></name></name><argument_list pos:line="33" pos:column="20">(<argument><expr><name pos:line="33" pos:column="21">current<pos:position pos:line="33" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="30">"CONTENT_LENGTH"<pos:position pos:line="33" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="48">15<pos:position pos:line="33" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="51"/></argument_list></call> <operator pos:line="33" pos:column="52">!=<pos:position pos:line="33" pos:column="54"/></operator> <literal type="number" pos:line="33" pos:column="55">0<pos:position pos:line="33" pos:column="56"/></literal></expr>)<pos:position pos:line="33" pos:column="57"/></condition><then pos:line="33" pos:column="57">
      <block type="pseudo"><goto pos:line="34" pos:column="7">goto <name pos:line="34" pos:column="12">event_read_failed<pos:position pos:line="34" pos:column="29"/></name>;<pos:position pos:line="34" pos:column="30"/></goto></block></then></if>

    <decl_stmt><decl><type><name pos:line="36" pos:column="5">char<pos:position pos:line="36" pos:column="9"/></name><modifier pos:line="36" pos:column="9">*<pos:position pos:line="36" pos:column="10"/></modifier></type> <name pos:line="36" pos:column="11">contentPos<pos:position pos:line="36" pos:column="21"/></name></decl>;<pos:position pos:line="36" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><name pos:line="37" pos:column="5">contentSize<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">=<pos:position pos:line="37" pos:column="18"/></operator> <call><name pos:line="37" pos:column="19">strtol<pos:position pos:line="37" pos:column="25"/></name><argument_list pos:line="37" pos:column="25">(<argument><expr><name pos:line="37" pos:column="26">current<pos:position pos:line="37" pos:column="33"/></name> <operator pos:line="37" pos:column="34">+<pos:position pos:line="37" pos:column="35"/></operator> <literal type="number" pos:line="37" pos:column="36">15<pos:position pos:line="37" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="37" pos:column="40">&amp;<pos:position pos:line="37" pos:column="45"/></operator><name pos:line="37" pos:column="41">contentPos<pos:position pos:line="37" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="53">0<pos:position pos:line="37" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="56"/></expr_stmt>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><operator pos:line="39" pos:column="9">*<pos:position pos:line="39" pos:column="10"/></operator><name pos:line="39" pos:column="10">contentPos<pos:position pos:line="39" pos:column="20"/></name> <operator pos:line="39" pos:column="21">!=<pos:position pos:line="39" pos:column="23"/></operator> <literal type="char" pos:line="39" pos:column="24">'\0'<pos:position pos:line="39" pos:column="28"/></literal> <operator pos:line="39" pos:column="29">||<pos:position pos:line="39" pos:column="31"/></operator> <name pos:line="39" pos:column="32">contentSize<pos:position pos:line="39" pos:column="43"/></name> <operator pos:line="39" pos:column="44">&lt;=<pos:position pos:line="39" pos:column="49"/></operator> <literal type="number" pos:line="39" pos:column="47">0<pos:position pos:line="39" pos:column="48"/></literal> <operator pos:line="39" pos:column="49">||<pos:position pos:line="39" pos:column="51"/></operator> <name pos:line="39" pos:column="52">contentSize<pos:position pos:line="39" pos:column="63"/></name> <operator pos:line="39" pos:column="64">&gt;<pos:position pos:line="39" pos:column="68"/></operator> <name pos:line="39" pos:column="66">max_content_size<pos:position pos:line="39" pos:column="82"/></name></expr>)<pos:position pos:line="39" pos:column="83"/></condition><then pos:line="39" pos:column="83">
      <block type="pseudo"><goto pos:line="40" pos:column="7">goto <name pos:line="40" pos:column="12">event_read_failed<pos:position pos:line="40" pos:column="29"/></name>;<pos:position pos:line="40" pos:column="30"/></goto></block></then></if>

    <expr_stmt><expr><name pos:line="42" pos:column="5">m_body<pos:position pos:line="42" pos:column="11"/></name> <operator pos:line="42" pos:column="12">=<pos:position pos:line="42" pos:column="13"/></operator> <name pos:line="42" pos:column="14">current<pos:position pos:line="42" pos:column="21"/></name> <operator pos:line="42" pos:column="22">+<pos:position pos:line="42" pos:column="23"/></operator> <name pos:line="42" pos:column="24">headerSize<pos:position pos:line="42" pos:column="34"/></name> <operator pos:line="42" pos:column="35">+<pos:position pos:line="42" pos:column="36"/></operator> <literal type="number" pos:line="42" pos:column="37">1<pos:position pos:line="42" pos:column="38"/></literal></expr>;<pos:position pos:line="42" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="43" pos:column="5">headerSize<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <call><name><name pos:line="43" pos:column="18">std<pos:position pos:line="43" pos:column="21"/></name><operator pos:line="43" pos:column="21">::<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="23">distance<pos:position pos:line="43" pos:column="31"/></name></name><argument_list pos:line="43" pos:column="31">(<argument><expr><name pos:line="43" pos:column="32">m_buffer<pos:position pos:line="43" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="42">m_body<pos:position pos:line="43" pos:column="48"/></name></expr></argument>)<pos:position pos:line="43" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="50"/></expr_stmt>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><call pos:line="45" pos:column="9">(<name pos:line="45" pos:column="10">unsigned<pos:position pos:line="45" pos:column="18"/></name> <name pos:line="45" pos:column="19">int<pos:position pos:line="45" pos:column="22"/></name>)<argument_list pos:line="45" pos:column="23">(<argument><expr><name pos:line="45" pos:column="24">contentSize<pos:position pos:line="45" pos:column="35"/></name> <operator pos:line="45" pos:column="36">+<pos:position pos:line="45" pos:column="37"/></operator> <name pos:line="45" pos:column="38">headerSize<pos:position pos:line="45" pos:column="48"/></name></expr></argument>)<pos:position pos:line="45" pos:column="49"/></argument_list></call> <operator pos:line="45" pos:column="50">&lt;<pos:position pos:line="45" pos:column="54"/></operator> <name pos:line="45" pos:column="52">m_bufferSize<pos:position pos:line="45" pos:column="64"/></name></expr>)<pos:position pos:line="45" pos:column="65"/></condition><then pos:line="45" pos:column="65"> <block pos:line="45" pos:column="66">{
      <expr_stmt><expr><name pos:line="46" pos:column="7">m_bufferSize<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">=<pos:position pos:line="46" pos:column="21"/></operator> <name pos:line="46" pos:column="22">contentSize<pos:position pos:line="46" pos:column="33"/></name> <operator pos:line="46" pos:column="34">+<pos:position pos:line="46" pos:column="35"/></operator> <name pos:line="46" pos:column="36">headerSize<pos:position pos:line="46" pos:column="46"/></name></expr>;<pos:position pos:line="46" pos:column="47"/></expr_stmt>

    }<pos:position pos:line="48" pos:column="6"/></block></then> <elseif pos:line="48" pos:column="7">else <if pos:line="48" pos:column="12">if <condition pos:line="48" pos:column="15">(<expr><call pos:line="48" pos:column="16">(<name pos:line="48" pos:column="17">unsigned<pos:position pos:line="48" pos:column="25"/></name> <name pos:line="48" pos:column="26">int<pos:position pos:line="48" pos:column="29"/></name>)<argument_list pos:line="48" pos:column="30">(<argument><expr><name pos:line="48" pos:column="31">contentSize<pos:position pos:line="48" pos:column="42"/></name> <operator pos:line="48" pos:column="43">+<pos:position pos:line="48" pos:column="44"/></operator> <name pos:line="48" pos:column="45">headerSize<pos:position pos:line="48" pos:column="55"/></name></expr></argument>)<pos:position pos:line="48" pos:column="56"/></argument_list></call> <operator pos:line="48" pos:column="57">&lt;=<pos:position pos:line="48" pos:column="62"/></operator> <name pos:line="48" pos:column="60">default_buffer_size<pos:position pos:line="48" pos:column="79"/></name></expr>)<pos:position pos:line="48" pos:column="80"/></condition><then pos:line="48" pos:column="80"> <block pos:line="48" pos:column="81">{
      <expr_stmt><expr><name pos:line="49" pos:column="7">m_bufferSize<pos:position pos:line="49" pos:column="19"/></name> <operator pos:line="49" pos:column="20">=<pos:position pos:line="49" pos:column="21"/></operator> <name pos:line="49" pos:column="22">contentSize<pos:position pos:line="49" pos:column="33"/></name></expr>;<pos:position pos:line="49" pos:column="34"/></expr_stmt>

      <expr_stmt><expr><call><name><name pos:line="51" pos:column="7">std<pos:position pos:line="51" pos:column="10"/></name><operator pos:line="51" pos:column="10">::<pos:position pos:line="51" pos:column="12"/></operator><name pos:line="51" pos:column="12">memmove<pos:position pos:line="51" pos:column="19"/></name></name><argument_list pos:line="51" pos:column="19">(<argument><expr><name pos:line="51" pos:column="20">m_buffer<pos:position pos:line="51" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="30">m_body<pos:position pos:line="51" pos:column="36"/></name></expr></argument>, <argument><expr><call><name><name pos:line="51" pos:column="38">std<pos:position pos:line="51" pos:column="41"/></name><operator pos:line="51" pos:column="41">::<pos:position pos:line="51" pos:column="43"/></operator><name pos:line="51" pos:column="43">distance<pos:position pos:line="51" pos:column="51"/></name></name><argument_list pos:line="51" pos:column="51">(<argument><expr><name pos:line="51" pos:column="52">m_body<pos:position pos:line="51" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="60">m_position<pos:position pos:line="51" pos:column="70"/></name></expr></argument>)<pos:position pos:line="51" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="73"/></expr_stmt>
      <expr_stmt><expr><name pos:line="52" pos:column="7">m_position<pos:position pos:line="52" pos:column="17"/></name> <operator pos:line="52" pos:column="18">=<pos:position pos:line="52" pos:column="19"/></operator> <name pos:line="52" pos:column="20">m_buffer<pos:position pos:line="52" pos:column="28"/></name> <operator pos:line="52" pos:column="29">+<pos:position pos:line="52" pos:column="30"/></operator> <call><name><name pos:line="52" pos:column="31">std<pos:position pos:line="52" pos:column="34"/></name><operator pos:line="52" pos:column="34">::<pos:position pos:line="52" pos:column="36"/></operator><name pos:line="52" pos:column="36">distance<pos:position pos:line="52" pos:column="44"/></name></name><argument_list pos:line="52" pos:column="44">(<argument><expr><name pos:line="52" pos:column="45">m_body<pos:position pos:line="52" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="53">m_position<pos:position pos:line="52" pos:column="63"/></name></expr></argument>)<pos:position pos:line="52" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="65"/></expr_stmt>
      <expr_stmt><expr><name pos:line="53" pos:column="7">m_body<pos:position pos:line="53" pos:column="13"/></name> <operator pos:line="53" pos:column="14">=<pos:position pos:line="53" pos:column="15"/></operator> <name pos:line="53" pos:column="16">m_buffer<pos:position pos:line="53" pos:column="24"/></name></expr>;<pos:position pos:line="53" pos:column="25"/></expr_stmt>

    }<pos:position pos:line="55" pos:column="6"/></block></then></if></elseif> <else pos:line="55" pos:column="7">else <block pos:line="55" pos:column="12">{
      <decl_stmt><decl><type><name pos:line="56" pos:column="7">char<pos:position pos:line="56" pos:column="11"/></name><modifier pos:line="56" pos:column="11">*<pos:position pos:line="56" pos:column="12"/></modifier></type> <name pos:line="56" pos:column="13">tmp<pos:position pos:line="56" pos:column="16"/></name> <init pos:line="56" pos:column="17">= <expr><operator pos:line="56" pos:column="19">new<pos:position pos:line="56" pos:column="22"/></operator> <name><name pos:line="56" pos:column="23">char<pos:position pos:line="56" pos:column="27"/></name><index pos:line="56" pos:column="27">[<expr><operator pos:line="56" pos:column="28">(<pos:position pos:line="56" pos:column="29"/></operator><name pos:line="56" pos:column="29">m_bufferSize<pos:position pos:line="56" pos:column="41"/></name> <operator pos:line="56" pos:column="42">=<pos:position pos:line="56" pos:column="43"/></operator> <name pos:line="56" pos:column="44">contentSize<pos:position pos:line="56" pos:column="55"/></name><operator pos:line="56" pos:column="55">)<pos:position pos:line="56" pos:column="56"/></operator></expr>]<pos:position pos:line="56" pos:column="57"/></index></name></expr></init></decl>;<pos:position pos:line="56" pos:column="58"/></decl_stmt>
      <expr_stmt><expr><call><name><name pos:line="57" pos:column="7">std<pos:position pos:line="57" pos:column="10"/></name><operator pos:line="57" pos:column="10">::<pos:position pos:line="57" pos:column="12"/></operator><name pos:line="57" pos:column="12">memcpy<pos:position pos:line="57" pos:column="18"/></name></name><argument_list pos:line="57" pos:column="18">(<argument><expr><name pos:line="57" pos:column="19">tmp<pos:position pos:line="57" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="24">m_body<pos:position pos:line="57" pos:column="30"/></name></expr></argument>, <argument><expr><call><name><name pos:line="57" pos:column="32">std<pos:position pos:line="57" pos:column="35"/></name><operator pos:line="57" pos:column="35">::<pos:position pos:line="57" pos:column="37"/></operator><name pos:line="57" pos:column="37">distance<pos:position pos:line="57" pos:column="45"/></name></name><argument_list pos:line="57" pos:column="45">(<argument><expr><name pos:line="57" pos:column="46">m_body<pos:position pos:line="57" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="54">m_position<pos:position pos:line="57" pos:column="64"/></name></expr></argument>)<pos:position pos:line="57" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="67"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="58" pos:column="7">delete<pos:position pos:line="58" pos:column="13"/></operator> <index pos:line="58" pos:column="14">[]<pos:position pos:line="58" pos:column="16"/></index> <name pos:line="58" pos:column="17">m_buffer<pos:position pos:line="58" pos:column="25"/></name></expr>;<pos:position pos:line="58" pos:column="26"/></expr_stmt>

      <expr_stmt><expr><name pos:line="60" pos:column="7">m_position<pos:position pos:line="60" pos:column="17"/></name> <operator pos:line="60" pos:column="18">=<pos:position pos:line="60" pos:column="19"/></operator> <name pos:line="60" pos:column="20">tmp<pos:position pos:line="60" pos:column="23"/></name> <operator pos:line="60" pos:column="24">+<pos:position pos:line="60" pos:column="25"/></operator> <call><name><name pos:line="60" pos:column="26">std<pos:position pos:line="60" pos:column="29"/></name><operator pos:line="60" pos:column="29">::<pos:position pos:line="60" pos:column="31"/></operator><name pos:line="60" pos:column="31">distance<pos:position pos:line="60" pos:column="39"/></name></name><argument_list pos:line="60" pos:column="39">(<argument><expr><name pos:line="60" pos:column="40">m_body<pos:position pos:line="60" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="48">m_position<pos:position pos:line="60" pos:column="58"/></name></expr></argument>)<pos:position pos:line="60" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="60"/></expr_stmt>
      <expr_stmt><expr><name pos:line="61" pos:column="7">m_buffer<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">=<pos:position pos:line="61" pos:column="17"/></operator> <name pos:line="61" pos:column="18">tmp<pos:position pos:line="61" pos:column="21"/></name></expr>;<pos:position pos:line="61" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="62" pos:column="7">m_body<pos:position pos:line="62" pos:column="13"/></name> <operator pos:line="62" pos:column="14">=<pos:position pos:line="62" pos:column="15"/></operator> <name pos:line="62" pos:column="16">tmp<pos:position pos:line="62" pos:column="19"/></name></expr>;<pos:position pos:line="62" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="63" pos:column="6"/></block></else></if>
  }<pos:position pos:line="64" pos:column="4"/></block></then></if>

  <if pos:line="66" pos:column="3">if <condition pos:line="66" pos:column="6">(<expr><operator pos:line="66" pos:column="7">(<pos:position pos:line="66" pos:column="8"/></operator><name pos:line="66" pos:column="8">unsigned<pos:position pos:line="66" pos:column="16"/></name> <name pos:line="66" pos:column="17">int<pos:position pos:line="66" pos:column="20"/></name><operator pos:line="66" pos:column="20">)<pos:position pos:line="66" pos:column="21"/></operator><call><name><name pos:line="66" pos:column="21">std<pos:position pos:line="66" pos:column="24"/></name><operator pos:line="66" pos:column="24">::<pos:position pos:line="66" pos:column="26"/></operator><name pos:line="66" pos:column="26">distance<pos:position pos:line="66" pos:column="34"/></name></name><argument_list pos:line="66" pos:column="34">(<argument><expr><name pos:line="66" pos:column="35">m_buffer<pos:position pos:line="66" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="45">m_position<pos:position pos:line="66" pos:column="55"/></name></expr></argument>)<pos:position pos:line="66" pos:column="56"/></argument_list></call> <operator pos:line="66" pos:column="57">!=<pos:position pos:line="66" pos:column="59"/></operator> <name pos:line="66" pos:column="60">m_bufferSize<pos:position pos:line="66" pos:column="72"/></name></expr>)<pos:position pos:line="66" pos:column="73"/></condition><then pos:line="66" pos:column="73">
    <block type="pseudo"><return pos:line="67" pos:column="5">return;<pos:position pos:line="67" pos:column="12"/></return></block></then></if>

  <expr_stmt><expr><call><name><name pos:line="69" pos:column="3">control<pos:position pos:line="69" pos:column="10"/></name><operator pos:line="69" pos:column="10">-&gt;<pos:position pos:line="69" pos:column="15"/></operator><name pos:line="69" pos:column="12">poll<pos:position pos:line="69" pos:column="16"/></name></name><argument_list pos:line="69" pos:column="16">()<pos:position pos:line="69" pos:column="18"/></argument_list></call><operator pos:line="69" pos:column="18">-&gt;<pos:position pos:line="69" pos:column="23"/></operator><call><name pos:line="69" pos:column="20">remove_read<pos:position pos:line="69" pos:column="31"/></name><argument_list pos:line="69" pos:column="31">(<argument><expr><name pos:line="69" pos:column="32">this<pos:position pos:line="69" pos:column="36"/></name></expr></argument>)<pos:position pos:line="69" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name><name pos:line="70" pos:column="3">control<pos:position pos:line="70" pos:column="10"/></name><operator pos:line="70" pos:column="10">-&gt;<pos:position pos:line="70" pos:column="15"/></operator><name pos:line="70" pos:column="12">poll<pos:position pos:line="70" pos:column="16"/></name></name><argument_list pos:line="70" pos:column="16">()<pos:position pos:line="70" pos:column="18"/></argument_list></call><operator pos:line="70" pos:column="18">-&gt;<pos:position pos:line="70" pos:column="23"/></operator><call><name pos:line="70" pos:column="20">insert_write<pos:position pos:line="70" pos:column="32"/></name><argument_list pos:line="70" pos:column="32">(<argument><expr><name pos:line="70" pos:column="33">this<pos:position pos:line="70" pos:column="37"/></name></expr></argument>)<pos:position pos:line="70" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="39"/></expr_stmt>

  <comment type="line" pos:line="72" pos:column="3">// Close if the call failed, else stay open to write back data.</comment>
  <if pos:line="73" pos:column="3">if <condition pos:line="73" pos:column="6">(<expr><operator pos:line="73" pos:column="7">!<pos:position pos:line="73" pos:column="8"/></operator><call><name><name pos:line="73" pos:column="8">m_parent<pos:position pos:line="73" pos:column="16"/></name><operator pos:line="73" pos:column="16">-&gt;<pos:position pos:line="73" pos:column="21"/></operator><name pos:line="73" pos:column="18">receive_call<pos:position pos:line="73" pos:column="30"/></name></name><argument_list pos:line="73" pos:column="30">(<argument><expr><name pos:line="73" pos:column="31">this<pos:position pos:line="73" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="37">m_body<pos:position pos:line="73" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="45">m_bufferSize<pos:position pos:line="73" pos:column="57"/></name> <operator pos:line="73" pos:column="58">-<pos:position pos:line="73" pos:column="59"/></operator> <call><name><name pos:line="73" pos:column="60">std<pos:position pos:line="73" pos:column="63"/></name><operator pos:line="73" pos:column="63">::<pos:position pos:line="73" pos:column="65"/></operator><name pos:line="73" pos:column="65">distance<pos:position pos:line="73" pos:column="73"/></name></name><argument_list pos:line="73" pos:column="73">(<argument><expr><name pos:line="73" pos:column="74">m_buffer<pos:position pos:line="73" pos:column="82"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="84">m_body<pos:position pos:line="73" pos:column="90"/></name></expr></argument>)<pos:position pos:line="73" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="73" pos:column="92"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="93"/></condition><then pos:line="73" pos:column="93">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="74" pos:column="5">close<pos:position pos:line="74" pos:column="10"/></name><argument_list pos:line="74" pos:column="10">()<pos:position pos:line="74" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="13"/></expr_stmt></block></then></if>

  <return pos:line="76" pos:column="3">return;<pos:position pos:line="76" pos:column="10"/></return>

 <label><name pos:line="78" pos:column="2">event_read_failed<pos:position pos:line="78" pos:column="19"/></name>:<pos:position pos:line="78" pos:column="20"/></label>
  <throw pos:line="79" pos:column="3">throw <expr><call><name><name pos:line="79" pos:column="9">torrent<pos:position pos:line="79" pos:column="16"/></name><operator pos:line="79" pos:column="16">::<pos:position pos:line="79" pos:column="18"/></operator><name pos:line="79" pos:column="18">internal_error<pos:position pos:line="79" pos:column="32"/></name></name><argument_list pos:line="79" pos:column="32">(<argument><expr><literal type="string" pos:line="79" pos:column="33">"SCgiTask::event_read() fault not handled."<pos:position pos:line="79" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="78"/></throw>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
