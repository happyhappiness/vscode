<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_478.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">PollManagerSelect<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">poll<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name><name pos:line="2" pos:column="25">rak<pos:position pos:line="2" pos:column="28"/></name><operator pos:line="2" pos:column="28">::<pos:position pos:line="2" pos:column="30"/></operator><name pos:line="2" pos:column="30">timer<pos:position pos:line="2" pos:column="35"/></name></name></type> <name pos:line="2" pos:column="36">timeout<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="44"/></parameter_list> <block pos:line="2" pos:column="45">{
  <expr_stmt><expr><call><name><name pos:line="3" pos:column="3">torrent<pos:position pos:line="3" pos:column="10"/></name><operator pos:line="3" pos:column="10">::<pos:position pos:line="3" pos:column="12"/></operator><name pos:line="3" pos:column="12">perform<pos:position pos:line="3" pos:column="19"/></name></name><argument_list pos:line="3" pos:column="19">()<pos:position pos:line="3" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4" pos:column="3">timeout<pos:position pos:line="4" pos:column="10"/></name> <operator pos:line="4" pos:column="11">=<pos:position pos:line="4" pos:column="12"/></operator> <call><name><name pos:line="4" pos:column="13">std<pos:position pos:line="4" pos:column="16"/></name><operator pos:line="4" pos:column="16">::<pos:position pos:line="4" pos:column="18"/></operator><name pos:line="4" pos:column="18">min<pos:position pos:line="4" pos:column="21"/></name></name><argument_list pos:line="4" pos:column="21">(<argument><expr><name pos:line="4" pos:column="22">timeout<pos:position pos:line="4" pos:column="29"/></name></expr></argument>, <argument><expr><call><name><name pos:line="4" pos:column="31">rak<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">::<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="36">timer<pos:position pos:line="4" pos:column="41"/></name></name><argument_list pos:line="4" pos:column="41">(<argument><expr><call><name><name pos:line="4" pos:column="42">torrent<pos:position pos:line="4" pos:column="49"/></name><operator pos:line="4" pos:column="49">::<pos:position pos:line="4" pos:column="51"/></operator><name pos:line="4" pos:column="51">next_timeout<pos:position pos:line="4" pos:column="63"/></name></name><argument_list pos:line="4" pos:column="63">()<pos:position pos:line="4" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="67"/></argument_list></call> <operator pos:line="4" pos:column="68">+<pos:position pos:line="4" pos:column="69"/></operator> <literal type="number" pos:line="4" pos:column="70">1000<pos:position pos:line="4" pos:column="74"/></literal></expr>;<pos:position pos:line="4" pos:column="75"/></expr_stmt>

<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><name pos:line="6" pos:column="5">defined<pos:position pos:line="6" pos:column="12"/></name> <name pos:line="6" pos:column="13">USE_VARIABLE_FDSET<pos:position pos:line="6" pos:column="31"/></name></expr></cpp:if>
  <expr_stmt><expr><call><name><name pos:line="7" pos:column="3">std<pos:position pos:line="7" pos:column="6"/></name><operator pos:line="7" pos:column="6">::<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">memset<pos:position pos:line="7" pos:column="14"/></name></name><argument_list pos:line="7" pos:column="14">(<argument><expr><name pos:line="7" pos:column="15">m_readSet<pos:position pos:line="7" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="26">0<pos:position pos:line="7" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="29">m_setSize<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name><name pos:line="8" pos:column="3">std<pos:position pos:line="8" pos:column="6"/></name><operator pos:line="8" pos:column="6">::<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">memset<pos:position pos:line="8" pos:column="14"/></name></name><argument_list pos:line="8" pos:column="14">(<argument><expr><name pos:line="8" pos:column="15">m_writeSet<pos:position pos:line="8" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="27">0<pos:position pos:line="8" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="30">m_setSize<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name><name pos:line="9" pos:column="3">std<pos:position pos:line="9" pos:column="6"/></name><operator pos:line="9" pos:column="6">::<pos:position pos:line="9" pos:column="8"/></operator><name pos:line="9" pos:column="8">memset<pos:position pos:line="9" pos:column="14"/></name></name><argument_list pos:line="9" pos:column="14">(<argument><expr><name pos:line="9" pos:column="15">m_errorSet<pos:position pos:line="9" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="27">0<pos:position pos:line="9" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="30">m_setSize<pos:position pos:line="9" pos:column="39"/></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt>
<cpp:else pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">else<pos:position pos:line="10" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">FD_ZERO<pos:position pos:line="11" pos:column="10"/></name><argument_list pos:line="11" pos:column="10">(<argument><expr><name pos:line="11" pos:column="11">m_readSet<pos:position pos:line="11" pos:column="20"/></name></expr></argument>)<pos:position pos:line="11" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">FD_ZERO<pos:position pos:line="12" pos:column="10"/></name><argument_list pos:line="12" pos:column="10">(<argument><expr><name pos:line="12" pos:column="11">m_writeSet<pos:position pos:line="12" pos:column="21"/></name></expr></argument>)<pos:position pos:line="12" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">FD_ZERO<pos:position pos:line="13" pos:column="10"/></name><argument_list pos:line="13" pos:column="10">(<argument><expr><name pos:line="13" pos:column="11">m_errorSet<pos:position pos:line="13" pos:column="21"/></name></expr></argument>)<pos:position pos:line="13" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>    

  <decl_stmt><decl><type><name pos:line="16" pos:column="3">unsigned<pos:position pos:line="16" pos:column="11"/></name> <name pos:line="16" pos:column="12">int<pos:position pos:line="16" pos:column="15"/></name></type> <name pos:line="16" pos:column="16">maxFd<pos:position pos:line="16" pos:column="21"/></name> <init pos:line="16" pos:column="22">= <expr><cast type="static" pos:line="16" pos:column="24">static_cast<argument_list type="generic" pos:line="16" pos:column="35">&lt;<argument><expr><name><name pos:line="16" pos:column="36">torrent<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">::<pos:position pos:line="16" pos:column="45"/></operator><name pos:line="16" pos:column="45">PollSelect<pos:position pos:line="16" pos:column="55"/></name></name><operator pos:line="16" pos:column="55">*<pos:position pos:line="16" pos:column="56"/></operator></expr></argument>&gt;<pos:position pos:line="16" pos:column="60"/></argument_list><argument_list pos:line="16" pos:column="57">(<argument><expr><name pos:line="16" pos:column="58">m_poll<pos:position pos:line="16" pos:column="64"/></name></expr></argument>)<pos:position pos:line="16" pos:column="65"/></argument_list></cast><operator pos:line="16" pos:column="65">-&gt;<pos:position pos:line="16" pos:column="70"/></operator><call><name pos:line="16" pos:column="67">fdset<pos:position pos:line="16" pos:column="72"/></name><argument_list pos:line="16" pos:column="72">(<argument><expr><name pos:line="16" pos:column="73">m_readSet<pos:position pos:line="16" pos:column="82"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="84">m_writeSet<pos:position pos:line="16" pos:column="94"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="96">m_errorSet<pos:position pos:line="16" pos:column="106"/></name></expr></argument>)<pos:position pos:line="16" pos:column="107"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="108"/></decl_stmt>

  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><operator pos:line="18" pos:column="7">!<pos:position pos:line="18" pos:column="8"/></operator><call><name><name pos:line="18" pos:column="8">m_httpStack<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">.<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="20">empty<pos:position pos:line="18" pos:column="25"/></name></name><argument_list pos:line="18" pos:column="25">()<pos:position pos:line="18" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="5">maxFd<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <call><name><name pos:line="19" pos:column="13">std<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">::<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">max<pos:position pos:line="19" pos:column="21"/></name></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">maxFd<pos:position pos:line="19" pos:column="27"/></name></expr></argument>, <argument><expr><call><name><name pos:line="19" pos:column="29">m_httpStack<pos:position pos:line="19" pos:column="40"/></name><operator pos:line="19" pos:column="40">.<pos:position pos:line="19" pos:column="41"/></operator><name pos:line="19" pos:column="41">fdset<pos:position pos:line="19" pos:column="46"/></name></name><argument_list pos:line="19" pos:column="46">(<argument><expr><name pos:line="19" pos:column="47">m_readSet<pos:position pos:line="19" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="58">m_writeSet<pos:position pos:line="19" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="70">m_errorSet<pos:position pos:line="19" pos:column="80"/></name></expr></argument>)<pos:position pos:line="19" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="83"/></expr_stmt></block></then></if>

  <decl_stmt><decl><type><name pos:line="21" pos:column="3">timeval<pos:position pos:line="21" pos:column="10"/></name></type> <name pos:line="21" pos:column="11">t<pos:position pos:line="21" pos:column="12"/></name> <init pos:line="21" pos:column="13">= <expr><call><name><name pos:line="21" pos:column="15">timeout<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">.<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">tval<pos:position pos:line="21" pos:column="27"/></name></name><argument_list pos:line="21" pos:column="27">()<pos:position pos:line="21" pos:column="29"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="30"/></decl_stmt>

  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><call><name pos:line="23" pos:column="7">select<pos:position pos:line="23" pos:column="13"/></name><argument_list pos:line="23" pos:column="13">(<argument><expr><name pos:line="23" pos:column="14">maxFd<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">+<pos:position pos:line="23" pos:column="21"/></operator> <literal type="number" pos:line="23" pos:column="22">1<pos:position pos:line="23" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="25">m_readSet<pos:position pos:line="23" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="36">m_writeSet<pos:position pos:line="23" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="48">m_errorSet<pos:position pos:line="23" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="60">&amp;<pos:position pos:line="23" pos:column="65"/></operator><name pos:line="23" pos:column="61">t<pos:position pos:line="23" pos:column="62"/></name></expr></argument>)<pos:position pos:line="23" pos:column="63"/></argument_list></call> <operator pos:line="23" pos:column="64">==<pos:position pos:line="23" pos:column="66"/></operator> <operator pos:line="23" pos:column="67">-<pos:position pos:line="23" pos:column="68"/></operator><literal type="number" pos:line="23" pos:column="68">1<pos:position pos:line="23" pos:column="69"/></literal></expr>)<pos:position pos:line="23" pos:column="70"/></condition><then pos:line="23" pos:column="70">
    <block type="pseudo"><return pos:line="24" pos:column="5">return <expr><call><name pos:line="24" pos:column="12">check_error<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">()<pos:position pos:line="24" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="26"/></return></block></then></if>

  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><operator pos:line="26" pos:column="7">!<pos:position pos:line="26" pos:column="8"/></operator><call><name><name pos:line="26" pos:column="8">m_httpStack<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">.<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="20">empty<pos:position pos:line="26" pos:column="25"/></name></name><argument_list pos:line="26" pos:column="25">()<pos:position pos:line="26" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="28"/></condition><then pos:line="26" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="27" pos:column="5">m_httpStack<pos:position pos:line="27" pos:column="16"/></name><operator pos:line="27" pos:column="16">.<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="17">perform<pos:position pos:line="27" pos:column="24"/></name></name><argument_list pos:line="27" pos:column="24">()<pos:position pos:line="27" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name><name pos:line="29" pos:column="3">torrent<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">::<pos:position pos:line="29" pos:column="12"/></operator><name pos:line="29" pos:column="12">perform<pos:position pos:line="29" pos:column="19"/></name></name><argument_list pos:line="29" pos:column="19">()<pos:position pos:line="29" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><cast type="static" pos:line="30" pos:column="3">static_cast<argument_list type="generic" pos:line="30" pos:column="14">&lt;<argument><expr><name><name pos:line="30" pos:column="15">torrent<pos:position pos:line="30" pos:column="22"/></name><operator pos:line="30" pos:column="22">::<pos:position pos:line="30" pos:column="24"/></operator><name pos:line="30" pos:column="24">PollSelect<pos:position pos:line="30" pos:column="34"/></name></name><operator pos:line="30" pos:column="34">*<pos:position pos:line="30" pos:column="35"/></operator></expr></argument>&gt;<pos:position pos:line="30" pos:column="39"/></argument_list><argument_list pos:line="30" pos:column="36">(<argument><expr><name pos:line="30" pos:column="37">m_poll<pos:position pos:line="30" pos:column="43"/></name></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></cast><operator pos:line="30" pos:column="44">-&gt;<pos:position pos:line="30" pos:column="49"/></operator><call><name pos:line="30" pos:column="46">perform<pos:position pos:line="30" pos:column="53"/></name><argument_list pos:line="30" pos:column="53">(<argument><expr><name pos:line="30" pos:column="54">m_readSet<pos:position pos:line="30" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="65">m_writeSet<pos:position pos:line="30" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="77">m_errorSet<pos:position pos:line="30" pos:column="87"/></name></expr></argument>)<pos:position pos:line="30" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="89"/></expr_stmt>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
