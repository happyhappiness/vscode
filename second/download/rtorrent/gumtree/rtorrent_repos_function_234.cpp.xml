<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_234.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name><modifier pos:line="1" pos:column="5">*<pos:position pos:line="1" pos:column="6"/></modifier></type>
<name pos:line="2" pos:column="1">xmlrpc_to_index_type<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">xmlrpc_env<pos:position pos:line="2" pos:column="32"/></name><modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type> <name pos:line="2" pos:column="34">env<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">xmlrpc_value<pos:position pos:line="2" pos:column="51"/></name><modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type> <name pos:line="2" pos:column="53">value<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="60">int<pos:position pos:line="2" pos:column="63"/></name></type> <name pos:line="2" pos:column="64">callType<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="74">core<pos:position pos:line="2" pos:column="78"/></name><operator pos:line="2" pos:column="78">::<pos:position pos:line="2" pos:column="80"/></operator><name pos:line="2" pos:column="80">Download<pos:position pos:line="2" pos:column="88"/></name></name><modifier pos:line="2" pos:column="88">*<pos:position pos:line="2" pos:column="89"/></modifier></type> <name pos:line="2" pos:column="90">download<pos:position pos:line="2" pos:column="98"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="99"/></parameter_list> <block pos:line="2" pos:column="100">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">index<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>

  <switch pos:line="5" pos:column="3">switch <condition pos:line="5" pos:column="10">(<expr><call><name pos:line="5" pos:column="11">xmlrpc_value_type<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">(<argument><expr><name pos:line="5" pos:column="29">value<pos:position pos:line="5" pos:column="34"/></name></expr></argument>)<pos:position pos:line="5" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="36"/></condition> <block pos:line="5" pos:column="37">{
  <case pos:line="6" pos:column="3">case <expr><name pos:line="6" pos:column="8">XMLRPC_TYPE_INT<pos:position pos:line="6" pos:column="23"/></name></expr>:<pos:position pos:line="6" pos:column="24"/></case>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">xmlrpc_read_int<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name pos:line="7" pos:column="21">env<pos:position pos:line="7" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="26">value<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="33">&amp;<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="34">index<pos:position pos:line="7" pos:column="39"/></name></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="41"/></expr_stmt>
    <break pos:line="8" pos:column="5">break;<pos:position pos:line="8" pos:column="11"/></break>

<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">XMLRPC_HAVE_I8<pos:position pos:line="10" pos:column="22"/></name></cpp:ifdef>
  <case pos:line="11" pos:column="3">case <expr><name pos:line="11" pos:column="8">XMLRPC_TYPE_I8<pos:position pos:line="11" pos:column="22"/></name></expr>:<pos:position pos:line="11" pos:column="23"/></case>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">long<pos:position pos:line="12" pos:column="9"/></name> <name pos:line="12" pos:column="10">long<pos:position pos:line="12" pos:column="14"/></name></type> <name pos:line="12" pos:column="15">v2<pos:position pos:line="12" pos:column="17"/></name></decl>;<pos:position pos:line="12" pos:column="18"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">xmlrpc_read_i8<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name pos:line="13" pos:column="20">env<pos:position pos:line="13" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="25">value<pos:position pos:line="13" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="32">&amp;<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="33">v2<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
      
    <expr_stmt><expr><name pos:line="15" pos:column="5">index<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">=<pos:position pos:line="15" pos:column="12"/></operator> <name pos:line="15" pos:column="13">v2<pos:position pos:line="15" pos:column="15"/></name></expr>;<pos:position pos:line="15" pos:column="16"/></expr_stmt>
    <break pos:line="16" pos:column="5">break;<pos:position pos:line="16" pos:column="11"/></break>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>

  <case pos:line="19" pos:column="3">case <expr><name pos:line="19" pos:column="8">XMLRPC_TYPE_STRING<pos:position pos:line="19" pos:column="26"/></name></expr>:<pos:position pos:line="19" pos:column="27"/></case>
  <block pos:line="20" pos:column="3">{
    <decl_stmt><decl><type><specifier pos:line="21" pos:column="5">const<pos:position pos:line="21" pos:column="10"/></specifier> <name pos:line="21" pos:column="11">char<pos:position pos:line="21" pos:column="15"/></name><modifier pos:line="21" pos:column="15">*<pos:position pos:line="21" pos:column="16"/></modifier></type> <name pos:line="21" pos:column="17">str<pos:position pos:line="21" pos:column="20"/></name></decl>;<pos:position pos:line="21" pos:column="21"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">xmlrpc_read_string<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><name pos:line="22" pos:column="24">env<pos:position pos:line="22" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="29">value<pos:position pos:line="22" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="36">&amp;<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="37">str<pos:position pos:line="22" pos:column="40"/></name></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name><name pos:line="24" pos:column="9">env<pos:position pos:line="24" pos:column="12"/></name><operator pos:line="24" pos:column="12">-&gt;<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="14">fault_occurred<pos:position pos:line="24" pos:column="28"/></name></name></expr>)<pos:position pos:line="24" pos:column="29"/></condition><then pos:line="24" pos:column="29">
      <block type="pseudo"><return pos:line="25" pos:column="7">return <expr><name pos:line="25" pos:column="14">NULL<pos:position pos:line="25" pos:column="18"/></name></expr>;<pos:position pos:line="25" pos:column="19"/></return></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="27" pos:column="5">const<pos:position pos:line="27" pos:column="10"/></specifier> <name pos:line="27" pos:column="11">char<pos:position pos:line="27" pos:column="15"/></name><modifier pos:line="27" pos:column="15">*<pos:position pos:line="27" pos:column="16"/></modifier></type> <name pos:line="27" pos:column="17">end<pos:position pos:line="27" pos:column="20"/></name> <init pos:line="27" pos:column="21">= <expr><name pos:line="27" pos:column="23">str<pos:position pos:line="27" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="27" pos:column="27"/></decl_stmt>
    <expr_stmt><expr><name pos:line="28" pos:column="5">index<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">=<pos:position pos:line="28" pos:column="12"/></operator> <call><name><operator pos:line="28" pos:column="13">::<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="15">strtol<pos:position pos:line="28" pos:column="21"/></name></name><argument_list pos:line="28" pos:column="21">(<argument><expr><name pos:line="28" pos:column="22">str<pos:position pos:line="28" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="27">(<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="28">char<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">*<pos:position pos:line="28" pos:column="33"/></operator><operator pos:line="28" pos:column="33">*<pos:position pos:line="28" pos:column="34"/></operator><operator pos:line="28" pos:column="34">)<pos:position pos:line="28" pos:column="35"/></operator><operator pos:line="28" pos:column="35">&amp;<pos:position pos:line="28" pos:column="40"/></operator><name pos:line="28" pos:column="36">end<pos:position pos:line="28" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="41">0<pos:position pos:line="28" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><call><name><operator pos:line="30" pos:column="5">::<pos:position pos:line="30" pos:column="7"/></operator><name pos:line="30" pos:column="7">free<pos:position pos:line="30" pos:column="11"/></name></name><argument_list pos:line="30" pos:column="11">(<argument><expr><operator pos:line="30" pos:column="12">(<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="13">void<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">*<pos:position pos:line="30" pos:column="18"/></operator><operator pos:line="30" pos:column="18">)<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="19">str<pos:position pos:line="30" pos:column="22"/></name></expr></argument>)<pos:position pos:line="30" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><operator pos:line="32" pos:column="9">*<pos:position pos:line="32" pos:column="10"/></operator><name pos:line="32" pos:column="10">str<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">==<pos:position pos:line="32" pos:column="16"/></operator> <literal type="char" pos:line="32" pos:column="17">'\0'<pos:position pos:line="32" pos:column="21"/></literal> <operator pos:line="32" pos:column="22">||<pos:position pos:line="32" pos:column="24"/></operator> <operator pos:line="32" pos:column="25">*<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="26">end<pos:position pos:line="32" pos:column="29"/></name> <operator pos:line="32" pos:column="30">!=<pos:position pos:line="32" pos:column="32"/></operator> <literal type="char" pos:line="32" pos:column="33">'\0'<pos:position pos:line="32" pos:column="37"/></literal></expr>)<pos:position pos:line="32" pos:column="38"/></condition><then pos:line="32" pos:column="38"> <block pos:line="32" pos:column="39">{
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">xmlrpc_env_set_fault<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">(<argument><expr><name pos:line="33" pos:column="28">env<pos:position pos:line="33" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="33">XMLRPC_TYPE_ERROR<pos:position pos:line="33" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="52">"Invalid index."<pos:position pos:line="33" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="70"/></expr_stmt>
      <return pos:line="34" pos:column="7">return <expr><name pos:line="34" pos:column="14">NULL<pos:position pos:line="34" pos:column="18"/></name></expr>;<pos:position pos:line="34" pos:column="19"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <break pos:line="37" pos:column="5">break;<pos:position pos:line="37" pos:column="11"/></break>
  }<pos:position pos:line="38" pos:column="4"/></block>

  <default pos:line="40" pos:column="3">default:<pos:position pos:line="40" pos:column="11"/></default>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">xmlrpc_env_set_fault<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">(<argument><expr><name pos:line="41" pos:column="26">env<pos:position pos:line="41" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="31">XMLRPC_TYPE_ERROR<pos:position pos:line="41" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="50">"Unsupported type found."<pos:position pos:line="41" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="77"/></expr_stmt>
    <return pos:line="42" pos:column="5">return <expr><name pos:line="42" pos:column="12">NULL<pos:position pos:line="42" pos:column="16"/></name></expr>;<pos:position pos:line="42" pos:column="17"/></return>
  }<pos:position pos:line="43" pos:column="4"/></block></switch>

  <if pos:line="45" pos:column="3">if <condition pos:line="45" pos:column="6">(<expr><name><name pos:line="45" pos:column="7">env<pos:position pos:line="45" pos:column="10"/></name><operator pos:line="45" pos:column="10">-&gt;<pos:position pos:line="45" pos:column="15"/></operator><name pos:line="45" pos:column="12">fault_occurred<pos:position pos:line="45" pos:column="26"/></name></name></expr>)<pos:position pos:line="45" pos:column="27"/></condition><then pos:line="45" pos:column="27">
    <block type="pseudo"><return pos:line="46" pos:column="5">return <expr><name pos:line="46" pos:column="12">NULL<pos:position pos:line="46" pos:column="16"/></name></expr>;<pos:position pos:line="46" pos:column="17"/></return></block></then></if>
    
  <decl_stmt><decl><type><name pos:line="48" pos:column="3">void<pos:position pos:line="48" pos:column="7"/></name><modifier pos:line="48" pos:column="7">*<pos:position pos:line="48" pos:column="8"/></modifier></type> <name pos:line="48" pos:column="9">result<pos:position pos:line="48" pos:column="15"/></name></decl>;<pos:position pos:line="48" pos:column="16"/></decl_stmt>

  <switch pos:line="50" pos:column="3">switch <condition pos:line="50" pos:column="10">(<expr><name pos:line="50" pos:column="11">callType<pos:position pos:line="50" pos:column="19"/></name></expr>)<pos:position pos:line="50" pos:column="20"/></condition> <block pos:line="50" pos:column="21">{
  <case pos:line="51" pos:column="3">case <expr><name><name pos:line="51" pos:column="8">XmlRpc<pos:position pos:line="51" pos:column="14"/></name><operator pos:line="51" pos:column="14">::<pos:position pos:line="51" pos:column="16"/></operator><name pos:line="51" pos:column="16">call_file<pos:position pos:line="51" pos:column="25"/></name></name></expr>:<pos:position pos:line="51" pos:column="26"/></case>    <expr_stmt><expr><name pos:line="51" pos:column="30">result<pos:position pos:line="51" pos:column="36"/></name> <operator pos:line="51" pos:column="37">=<pos:position pos:line="51" pos:column="38"/></operator> <call><call><name><name pos:line="51" pos:column="39">xmlrpc<pos:position pos:line="51" pos:column="45"/></name><operator pos:line="51" pos:column="45">.<pos:position pos:line="51" pos:column="46"/></operator><name pos:line="51" pos:column="46">get_slot_find_file<pos:position pos:line="51" pos:column="64"/></name></name><argument_list pos:line="51" pos:column="64">()<pos:position pos:line="51" pos:column="66"/></argument_list></call><argument_list pos:line="51" pos:column="66">(<argument><expr><name pos:line="51" pos:column="67">download<pos:position pos:line="51" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="77">index<pos:position pos:line="51" pos:column="82"/></name></expr></argument>)<pos:position pos:line="51" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="84"/></expr_stmt> <break pos:line="51" pos:column="85">break;<pos:position pos:line="51" pos:column="91"/></break>
  <case pos:line="52" pos:column="3">case <expr><name><name pos:line="52" pos:column="8">XmlRpc<pos:position pos:line="52" pos:column="14"/></name><operator pos:line="52" pos:column="14">::<pos:position pos:line="52" pos:column="16"/></operator><name pos:line="52" pos:column="16">call_tracker<pos:position pos:line="52" pos:column="28"/></name></name></expr>:<pos:position pos:line="52" pos:column="29"/></case> <expr_stmt><expr><name pos:line="52" pos:column="30">result<pos:position pos:line="52" pos:column="36"/></name> <operator pos:line="52" pos:column="37">=<pos:position pos:line="52" pos:column="38"/></operator> <call><call><name><name pos:line="52" pos:column="39">xmlrpc<pos:position pos:line="52" pos:column="45"/></name><operator pos:line="52" pos:column="45">.<pos:position pos:line="52" pos:column="46"/></operator><name pos:line="52" pos:column="46">get_slot_find_tracker<pos:position pos:line="52" pos:column="67"/></name></name><argument_list pos:line="52" pos:column="67">()<pos:position pos:line="52" pos:column="69"/></argument_list></call><argument_list pos:line="52" pos:column="69">(<argument><expr><name pos:line="52" pos:column="70">download<pos:position pos:line="52" pos:column="78"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="80">index<pos:position pos:line="52" pos:column="85"/></name></expr></argument>)<pos:position pos:line="52" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="87"/></expr_stmt> <break pos:line="52" pos:column="88">break;<pos:position pos:line="52" pos:column="94"/></break>
  <default pos:line="53" pos:column="3">default:<pos:position pos:line="53" pos:column="11"/></default> <expr_stmt><expr><name pos:line="53" pos:column="12">result<pos:position pos:line="53" pos:column="18"/></name> <operator pos:line="53" pos:column="19">=<pos:position pos:line="53" pos:column="20"/></operator> <name pos:line="53" pos:column="21">NULL<pos:position pos:line="53" pos:column="25"/></name></expr>;<pos:position pos:line="53" pos:column="26"/></expr_stmt> <break pos:line="53" pos:column="27">break;<pos:position pos:line="53" pos:column="33"/></break>
  }<pos:position pos:line="54" pos:column="4"/></block></switch>

  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><name pos:line="56" pos:column="7">result<pos:position pos:line="56" pos:column="13"/></name> <operator pos:line="56" pos:column="14">==<pos:position pos:line="56" pos:column="16"/></operator> <name pos:line="56" pos:column="17">NULL<pos:position pos:line="56" pos:column="21"/></name></expr>)<pos:position pos:line="56" pos:column="22"/></condition><then pos:line="56" pos:column="22">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="5">xmlrpc_env_set_fault<pos:position pos:line="57" pos:column="25"/></name><argument_list pos:line="57" pos:column="25">(<argument><expr><name pos:line="57" pos:column="26">env<pos:position pos:line="57" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="31">XMLRPC_TYPE_ERROR<pos:position pos:line="57" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="50">"Invalid index."<pos:position pos:line="57" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="68"/></expr_stmt></block></then></if>
      
  <return pos:line="59" pos:column="3">return <expr><name pos:line="59" pos:column="10">result<pos:position pos:line="59" pos:column="16"/></name></expr>;<pos:position pos:line="59" pos:column="17"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
