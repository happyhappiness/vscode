<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_613.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">WindowLog<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">receive_update<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">()<pos:position pos:line="2" pos:column="28"/></parameter_list> <block pos:line="2" pos:column="29">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><operator pos:line="3" pos:column="7">!<pos:position pos:line="3" pos:column="8"/></operator><call><name pos:line="3" pos:column="8">is_active<pos:position pos:line="3" pos:column="17"/></name><argument_list pos:line="3" pos:column="17">()<pos:position pos:line="3" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="20"/></condition><then pos:line="3" pos:column="20">
    <block type="pseudo"><return pos:line="4" pos:column="5">return;<pos:position pos:line="4" pos:column="12"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">iterator<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">itr<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><call><name pos:line="6" pos:column="18">find_older<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">()<pos:position pos:line="6" pos:column="30"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">extent_type<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">height<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><call><name><name pos:line="7" pos:column="24">std<pos:position pos:line="7" pos:column="27"/></name><operator pos:line="7" pos:column="27">::<pos:position pos:line="7" pos:column="29"/></operator><name pos:line="7" pos:column="29">min<pos:position pos:line="7" pos:column="32"/></name></name><argument_list pos:line="7" pos:column="32">(<argument><expr><call><name><name pos:line="7" pos:column="33">std<pos:position pos:line="7" pos:column="36"/></name><operator pos:line="7" pos:column="36">::<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="38">distance<pos:position pos:line="7" pos:column="46"/></name></name><argument_list pos:line="7" pos:column="46">(<argument><expr><call><name><name pos:line="7" pos:column="47">m_log<pos:position pos:line="7" pos:column="52"/></name><operator pos:line="7" pos:column="52">-&gt;<pos:position pos:line="7" pos:column="57"/></operator><name pos:line="7" pos:column="54">begin<pos:position pos:line="7" pos:column="59"/></name></name><argument_list pos:line="7" pos:column="59">()<pos:position pos:line="7" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="7" pos:column="63">itr<pos:position pos:line="7" pos:column="66"/></name></expr></argument>)<pos:position pos:line="7" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="7" pos:column="69">(<pos:position pos:line="7" pos:column="70"/></operator><name><name pos:line="7" pos:column="70">std<pos:position pos:line="7" pos:column="73"/></name><operator pos:line="7" pos:column="73">::<pos:position pos:line="7" pos:column="75"/></operator><name><name pos:line="7" pos:column="75">iterator_traits<pos:position pos:line="7" pos:column="90"/></name><argument_list type="generic" pos:line="7" pos:column="90">&lt;<argument><expr><name pos:line="7" pos:column="91">iterator<pos:position pos:line="7" pos:column="99"/></name></expr></argument>&gt;<pos:position pos:line="7" pos:column="103"/></argument_list></name><operator pos:line="7" pos:column="100">::<pos:position pos:line="7" pos:column="102"/></operator><name pos:line="7" pos:column="102">difference_type<pos:position pos:line="7" pos:column="117"/></name></name><operator pos:line="7" pos:column="117">)<pos:position pos:line="7" pos:column="118"/></operator><literal type="number" pos:line="7" pos:column="118">10<pos:position pos:line="7" pos:column="120"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="121"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="122"/></decl_stmt>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">height<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">!=<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">m_maxHeight<pos:position pos:line="9" pos:column="28"/></name></expr>)<pos:position pos:line="9" pos:column="29"/></condition><then pos:line="9" pos:column="29"> <block pos:line="9" pos:column="30">{
    <expr_stmt><expr><name pos:line="10" pos:column="5">m_minHeight<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">=<pos:position pos:line="10" pos:column="18"/></operator> <ternary><condition><expr><name pos:line="10" pos:column="19">height<pos:position pos:line="10" pos:column="25"/></name> <operator pos:line="10" pos:column="26">!=<pos:position pos:line="10" pos:column="28"/></operator> <literal type="number" pos:line="10" pos:column="29">0<pos:position pos:line="10" pos:column="30"/></literal></expr> ?<pos:position pos:line="10" pos:column="32"/></condition><then pos:line="10" pos:column="32"> <expr><literal type="number" pos:line="10" pos:column="33">1<pos:position pos:line="10" pos:column="34"/></literal></expr> <pos:position pos:line="10" pos:column="35"/></then><else pos:line="10" pos:column="35">: <expr><literal type="number" pos:line="10" pos:column="37">0<pos:position pos:line="10" pos:column="38"/></literal></expr></else></ternary></expr>;<pos:position pos:line="10" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">m_maxHeight<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">=<pos:position pos:line="11" pos:column="18"/></operator> <name pos:line="11" pos:column="19">height<pos:position pos:line="11" pos:column="25"/></name></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">m_slotAdjust<pos:position pos:line="12" pos:column="17"/></name><argument_list pos:line="12" pos:column="17">()<pos:position pos:line="12" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="20"/></expr_stmt>

  }<pos:position pos:line="14" pos:column="4"/></block></then> <else pos:line="14" pos:column="5">else <block pos:line="14" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">mark_dirty<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">()<pos:position pos:line="15" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="18" pos:column="3">priority_queue_erase<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><operator pos:line="18" pos:column="24">&amp;<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="25">taskScheduler<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="40">&amp;<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="41">m_taskUpdate<pos:position pos:line="18" pos:column="53"/></name></expr></argument>)<pos:position pos:line="18" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="55"/></expr_stmt>

  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name pos:line="20" pos:column="7">height<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">!=<pos:position pos:line="20" pos:column="16"/></operator> <literal type="number" pos:line="20" pos:column="17">0<pos:position pos:line="20" pos:column="18"/></literal></expr>)<pos:position pos:line="20" pos:column="19"/></condition><then pos:line="20" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="5">priority_queue_insert<pos:position pos:line="21" pos:column="26"/></name><argument_list pos:line="21" pos:column="26">(<argument><expr><operator pos:line="21" pos:column="27">&amp;<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="28">taskScheduler<pos:position pos:line="21" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="43">&amp;<pos:position pos:line="21" pos:column="48"/></operator><name pos:line="21" pos:column="44">m_taskUpdate<pos:position pos:line="21" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="58">(<pos:position pos:line="21" pos:column="59"/></operator><name pos:line="21" pos:column="59">cachedTime<pos:position pos:line="21" pos:column="69"/></name> <operator pos:line="21" pos:column="70">+<pos:position pos:line="21" pos:column="71"/></operator> <call><name><name pos:line="21" pos:column="72">rak<pos:position pos:line="21" pos:column="75"/></name><operator pos:line="21" pos:column="75">::<pos:position pos:line="21" pos:column="77"/></operator><name pos:line="21" pos:column="77">timer<pos:position pos:line="21" pos:column="82"/></name><operator pos:line="21" pos:column="82">::<pos:position pos:line="21" pos:column="84"/></operator><name pos:line="21" pos:column="84">from_seconds<pos:position pos:line="21" pos:column="96"/></name></name><argument_list pos:line="21" pos:column="96">(<argument><expr><literal type="number" pos:line="21" pos:column="97">30<pos:position pos:line="21" pos:column="99"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="100"/></argument_list></call><operator pos:line="21" pos:column="100">)<pos:position pos:line="21" pos:column="101"/></operator><operator pos:line="21" pos:column="101">.<pos:position pos:line="21" pos:column="102"/></operator><call><name pos:line="21" pos:column="102">round_seconds<pos:position pos:line="21" pos:column="115"/></name><argument_list pos:line="21" pos:column="115">()<pos:position pos:line="21" pos:column="117"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="118"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="119"/></expr_stmt></block></then></if>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
