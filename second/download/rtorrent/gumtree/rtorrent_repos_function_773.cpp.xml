<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_773.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Directory<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">update<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">bool<pos:position pos:line="2" pos:column="23"/></name></type> <name pos:line="2" pos:column="24">hideDot<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="32"/></parameter_list> <block pos:line="2" pos:column="33">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><call><name><name pos:line="3" pos:column="7">m_path<pos:position pos:line="3" pos:column="13"/></name><operator pos:line="3" pos:column="13">.<pos:position pos:line="3" pos:column="14"/></operator><name pos:line="3" pos:column="14">empty<pos:position pos:line="3" pos:column="19"/></name></name><argument_list pos:line="3" pos:column="19">()<pos:position pos:line="3" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="22"/></condition><then pos:line="3" pos:column="22">
    <block type="pseudo"><throw pos:line="4" pos:column="5">throw <expr><call><name><name pos:line="4" pos:column="11">std<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">::<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">logic_error<pos:position pos:line="4" pos:column="27"/></name></name><argument_list pos:line="4" pos:column="27">(<argument><expr><literal type="string" pos:line="4" pos:column="28">"Directory::update() tried to open an empty path"<pos:position pos:line="4" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="79"/></throw></block></then></if>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">DIR<pos:position pos:line="6" pos:column="6"/></name><modifier pos:line="6" pos:column="6">*<pos:position pos:line="6" pos:column="7"/></modifier></type> <name pos:line="6" pos:column="8">d<pos:position pos:line="6" pos:column="9"/></name> <init pos:line="6" pos:column="10">= <expr><call><name pos:line="6" pos:column="12">opendir<pos:position pos:line="6" pos:column="19"/></name><argument_list pos:line="6" pos:column="19">(<argument><expr><call><name><name pos:line="6" pos:column="20">rak<pos:position pos:line="6" pos:column="23"/></name><operator pos:line="6" pos:column="23">::<pos:position pos:line="6" pos:column="25"/></operator><name pos:line="6" pos:column="25">path_expand<pos:position pos:line="6" pos:column="36"/></name></name><argument_list pos:line="6" pos:column="36">(<argument><expr><name pos:line="6" pos:column="37">m_path<pos:position pos:line="6" pos:column="43"/></name></expr></argument>)<pos:position pos:line="6" pos:column="44"/></argument_list></call><operator pos:line="6" pos:column="44">.<pos:position pos:line="6" pos:column="45"/></operator><call><name pos:line="6" pos:column="45">c_str<pos:position pos:line="6" pos:column="50"/></name><argument_list pos:line="6" pos:column="50">()<pos:position pos:line="6" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="54"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name pos:line="8" pos:column="7">d<pos:position pos:line="8" pos:column="8"/></name> <operator pos:line="8" pos:column="9">==<pos:position pos:line="8" pos:column="11"/></operator> <name pos:line="8" pos:column="12">NULL<pos:position pos:line="8" pos:column="16"/></name></expr>)<pos:position pos:line="8" pos:column="17"/></condition><then pos:line="8" pos:column="17">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><literal type="boolean" pos:line="9" pos:column="12">false<pos:position pos:line="9" pos:column="17"/></literal></expr>;<pos:position pos:line="9" pos:column="18"/></return></block></then></if>

  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">dirent<pos:position pos:line="11" pos:column="16"/></name></name><modifier pos:line="11" pos:column="16">*<pos:position pos:line="11" pos:column="17"/></modifier></type> <name pos:line="11" pos:column="18">ent<pos:position pos:line="11" pos:column="21"/></name></decl>;<pos:position pos:line="11" pos:column="22"/></decl_stmt>

  <while pos:line="13" pos:column="3">while <condition pos:line="13" pos:column="9">(<expr><operator pos:line="13" pos:column="10">(<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">ent<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <call><name pos:line="13" pos:column="17">readdir<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">d<pos:position pos:line="13" pos:column="26"/></name></expr></argument>)<pos:position pos:line="13" pos:column="27"/></argument_list></call><operator pos:line="13" pos:column="27">)<pos:position pos:line="13" pos:column="28"/></operator> <operator pos:line="13" pos:column="29">!=<pos:position pos:line="13" pos:column="31"/></operator> <name pos:line="13" pos:column="32">NULL<pos:position pos:line="13" pos:column="36"/></name></expr>)<pos:position pos:line="13" pos:column="37"/></condition> <block pos:line="13" pos:column="38">{
    <decl_stmt><decl><type><name><name pos:line="14" pos:column="5">std<pos:position pos:line="14" pos:column="8"/></name><operator pos:line="14" pos:column="8">::<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">string<pos:position pos:line="14" pos:column="16"/></name></name></type> <name pos:line="14" pos:column="17">de<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><name><name pos:line="14" pos:column="20">ent<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">-&gt;<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="25">d_name<pos:position pos:line="14" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></decl>;<pos:position pos:line="14" pos:column="33"/></decl_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">!<pos:position pos:line="16" pos:column="10"/></operator><call><name><name pos:line="16" pos:column="10">de<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">.<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">empty<pos:position pos:line="16" pos:column="18"/></name></name><argument_list pos:line="16" pos:column="18">()<pos:position pos:line="16" pos:column="20"/></argument_list></call> <operator pos:line="16" pos:column="21">&amp;&amp;<pos:position pos:line="16" pos:column="31"/></operator> <operator pos:line="16" pos:column="24">(<pos:position pos:line="16" pos:column="25"/></operator><operator pos:line="16" pos:column="25">!<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="26">hideDot<pos:position pos:line="16" pos:column="33"/></name> <operator pos:line="16" pos:column="34">||<pos:position pos:line="16" pos:column="36"/></operator> <name><name pos:line="16" pos:column="37">de<pos:position pos:line="16" pos:column="39"/></name><index pos:line="16" pos:column="39">[<expr><literal type="number" pos:line="16" pos:column="40">0<pos:position pos:line="16" pos:column="41"/></literal></expr>]<pos:position pos:line="16" pos:column="42"/></index></name> <operator pos:line="16" pos:column="43">!=<pos:position pos:line="16" pos:column="45"/></operator> <literal type="char" pos:line="16" pos:column="46">'.'<pos:position pos:line="16" pos:column="49"/></literal><operator pos:line="16" pos:column="49">)<pos:position pos:line="16" pos:column="50"/></operator></expr>)<pos:position pos:line="16" pos:column="51"/></condition><then pos:line="16" pos:column="51">
      <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="17" pos:column="7">Base<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">::<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">push_back<pos:position pos:line="17" pos:column="22"/></name></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name><name pos:line="17" pos:column="23">ent<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">-&gt;<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="28">d_name<pos:position pos:line="17" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="36"/></expr_stmt></block></then></if>
  }<pos:position pos:line="18" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="20" pos:column="3">closedir<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><name pos:line="20" pos:column="12">d<pos:position pos:line="20" pos:column="13"/></name></expr></argument>)<pos:position pos:line="20" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name><name pos:line="21" pos:column="3">Base<pos:position pos:line="21" pos:column="7"/></name><operator pos:line="21" pos:column="7">::<pos:position pos:line="21" pos:column="9"/></operator><name pos:line="21" pos:column="9">sort<pos:position pos:line="21" pos:column="13"/></name></name><argument_list pos:line="21" pos:column="13">(<argument><expr><call><name><name pos:line="21" pos:column="14">std<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">::<pos:position pos:line="21" pos:column="19"/></operator><name><name pos:line="21" pos:column="19">less<pos:position pos:line="21" pos:column="23"/></name><argument_list type="generic" pos:line="21" pos:column="23">&lt;<argument><expr><name><name pos:line="21" pos:column="24">std<pos:position pos:line="21" pos:column="27"/></name><operator pos:line="21" pos:column="27">::<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="29">string<pos:position pos:line="21" pos:column="35"/></name></name></expr></argument>&gt;<pos:position pos:line="21" pos:column="39"/></argument_list></name></name><argument_list pos:line="21" pos:column="36">()<pos:position pos:line="21" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>

  <return pos:line="23" pos:column="3">return <expr><literal type="boolean" pos:line="23" pos:column="10">true<pos:position pos:line="23" pos:column="14"/></literal></expr>;<pos:position pos:line="23" pos:column="15"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
