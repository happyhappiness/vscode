<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_176.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name><modifier pos:line="1" pos:column="11">*<pos:position pos:line="1" pos:column="12"/></modifier></type>
<name pos:line="2" pos:column="1">parse_object<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><specifier pos:line="2" pos:column="14">const<pos:position pos:line="2" pos:column="19"/></specifier> <name pos:line="2" pos:column="20">char<pos:position pos:line="2" pos:column="24"/></name><modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type> <name pos:line="2" pos:column="26">first<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <name pos:line="2" pos:column="39">char<pos:position pos:line="2" pos:column="43"/></name><modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type> <name pos:line="2" pos:column="45">last<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="51">torrent<pos:position pos:line="2" pos:column="58"/></name><operator pos:line="2" pos:column="58">::<pos:position pos:line="2" pos:column="60"/></operator><name pos:line="2" pos:column="60">Object<pos:position pos:line="2" pos:column="66"/></name></name><modifier pos:line="2" pos:column="66">*<pos:position pos:line="2" pos:column="67"/></modifier></type> <name pos:line="2" pos:column="68">dest<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>, <parameter><function_decl><type><name pos:line="2" pos:column="74">bool<pos:position pos:line="2" pos:column="78"/></name></type> (<modifier pos:line="2" pos:column="80">*<pos:position pos:line="2" pos:column="81"/></modifier><name pos:line="2" pos:column="81">delim<pos:position pos:line="2" pos:column="86"/></name>)<parameter_list pos:line="2" pos:column="87">(<parameter><decl><type><specifier pos:line="2" pos:column="88">const<pos:position pos:line="2" pos:column="93"/></specifier> <name pos:line="2" pos:column="94">char<pos:position pos:line="2" pos:column="98"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="99"/></parameter_list></function_decl></parameter>)<pos:position pos:line="2" pos:column="100"/></parameter_list> <block pos:line="2" pos:column="101">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><operator pos:line="3" pos:column="7">*<pos:position pos:line="3" pos:column="8"/></operator><name pos:line="3" pos:column="8">first<pos:position pos:line="3" pos:column="13"/></name> <operator pos:line="3" pos:column="14">==<pos:position pos:line="3" pos:column="16"/></operator> <literal type="char" pos:line="3" pos:column="17">'{'<pos:position pos:line="3" pos:column="20"/></literal></expr>)<pos:position pos:line="3" pos:column="21"/></condition><then pos:line="3" pos:column="21"> <block pos:line="3" pos:column="22">{
    <expr_stmt><expr><operator pos:line="4" pos:column="5">*<pos:position pos:line="4" pos:column="6"/></operator><name pos:line="4" pos:column="6">dest<pos:position pos:line="4" pos:column="10"/></name> <operator pos:line="4" pos:column="11">=<pos:position pos:line="4" pos:column="12"/></operator> <call><name><name pos:line="4" pos:column="13">torrent<pos:position pos:line="4" pos:column="20"/></name><operator pos:line="4" pos:column="20">::<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="22">Object<pos:position pos:line="4" pos:column="28"/></name></name><argument_list pos:line="4" pos:column="28">(<argument><expr><name><name pos:line="4" pos:column="29">torrent<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">::<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="38">Object<pos:position pos:line="4" pos:column="44"/></name><operator pos:line="4" pos:column="44">::<pos:position pos:line="4" pos:column="46"/></operator><name pos:line="4" pos:column="46">TYPE_LIST<pos:position pos:line="4" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name pos:line="5" pos:column="5">first<pos:position pos:line="5" pos:column="10"/></name> <operator pos:line="5" pos:column="11">=<pos:position pos:line="5" pos:column="12"/></operator> <call><name pos:line="5" pos:column="13">parse_list<pos:position pos:line="5" pos:column="23"/></name><argument_list pos:line="5" pos:column="23">(<argument><expr><name pos:line="5" pos:column="24">first<pos:position pos:line="5" pos:column="29"/></name> <operator pos:line="5" pos:column="30">+<pos:position pos:line="5" pos:column="31"/></operator> <literal type="number" pos:line="5" pos:column="32">1<pos:position pos:line="5" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="35">last<pos:position pos:line="5" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="41">dest<pos:position pos:line="5" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="47">&amp;<pos:position pos:line="5" pos:column="52"/></operator><name pos:line="5" pos:column="48">parse_is_delim_list<pos:position pos:line="5" pos:column="67"/></name></expr></argument>)<pos:position pos:line="5" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">first<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">=<pos:position pos:line="6" pos:column="12"/></operator> <call><name pos:line="6" pos:column="13">parse_skip_wspace<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">first<pos:position pos:line="6" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="38">last<pos:position pos:line="6" pos:column="42"/></name></expr></argument>)<pos:position pos:line="6" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="44"/></expr_stmt>
    
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">first<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">==<pos:position pos:line="8" pos:column="17"/></operator> <name pos:line="8" pos:column="18">last<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">||<pos:position pos:line="8" pos:column="25"/></operator> <operator pos:line="8" pos:column="26">*<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="27">first<pos:position pos:line="8" pos:column="32"/></name> <operator pos:line="8" pos:column="33">!=<pos:position pos:line="8" pos:column="35"/></operator> <literal type="char" pos:line="8" pos:column="36">'}'<pos:position pos:line="8" pos:column="39"/></literal></expr>)<pos:position pos:line="8" pos:column="40"/></condition><then pos:line="8" pos:column="40">
      <block type="pseudo"><throw pos:line="9" pos:column="7">throw <expr><call><name><name pos:line="9" pos:column="13">torrent<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">::<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">input_error<pos:position pos:line="9" pos:column="33"/></name></name><argument_list pos:line="9" pos:column="33">(<argument><expr><literal type="string" pos:line="9" pos:column="34">"Could not find closing '}'."<pos:position pos:line="9" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="65"/></throw></block></then></if>

    <return pos:line="11" pos:column="5">return <expr><operator pos:line="11" pos:column="12">++<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">first<pos:position pos:line="11" pos:column="19"/></name></expr>;<pos:position pos:line="11" pos:column="20"/></return>

  }<pos:position pos:line="13" pos:column="4"/></block></then> <else pos:line="13" pos:column="5">else <block pos:line="13" pos:column="10">{
    <expr_stmt><expr><operator pos:line="14" pos:column="5">*<pos:position pos:line="14" pos:column="6"/></operator><name pos:line="14" pos:column="6">dest<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <call><name><name pos:line="14" pos:column="13">std<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">::<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">string<pos:position pos:line="14" pos:column="24"/></name></name><argument_list pos:line="14" pos:column="24">()<pos:position pos:line="14" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>

    <return pos:line="16" pos:column="5">return <expr><call><name pos:line="16" pos:column="12">parse_string<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">first<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="32">last<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="38">&amp;<pos:position pos:line="16" pos:column="43"/></operator><call><name><name pos:line="16" pos:column="39">dest<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">-&gt;<pos:position pos:line="16" pos:column="48"/></operator><name pos:line="16" pos:column="45">as_string<pos:position pos:line="16" pos:column="54"/></name></name><argument_list pos:line="16" pos:column="54">()<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="16" pos:column="58">delim<pos:position pos:line="16" pos:column="63"/></name></expr></argument>)<pos:position pos:line="16" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="65"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></else></if>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
