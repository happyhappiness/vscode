<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_778.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Lockfile<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">try_lock<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">()<pos:position pos:line="2" pos:column="21"/></parameter_list> <block pos:line="2" pos:column="22">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><call><name><name pos:line="3" pos:column="7">m_path<pos:position pos:line="3" pos:column="13"/></name><operator pos:line="3" pos:column="13">.<pos:position pos:line="3" pos:column="14"/></operator><name pos:line="3" pos:column="14">empty<pos:position pos:line="3" pos:column="19"/></name></name><argument_list pos:line="3" pos:column="19">()<pos:position pos:line="3" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="22"/></condition><then pos:line="3" pos:column="22"> <block pos:line="3" pos:column="23">{
    <expr_stmt><expr><name pos:line="4" pos:column="5">m_locked<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">=<pos:position pos:line="4" pos:column="15"/></operator> <literal type="boolean" pos:line="4" pos:column="16">true<pos:position pos:line="4" pos:column="20"/></literal></expr>;<pos:position pos:line="4" pos:column="21"/></expr_stmt>
    <return pos:line="5" pos:column="5">return <expr><literal type="boolean" pos:line="5" pos:column="12">true<pos:position pos:line="5" pos:column="16"/></literal></expr>;<pos:position pos:line="5" pos:column="17"/></return>
  }<pos:position pos:line="6" pos:column="4"/></block></then></if>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><call><name pos:line="8" pos:column="7">is_stale<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">()<pos:position pos:line="8" pos:column="17"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="18"/></condition><then pos:line="8" pos:column="18">
    <block type="pseudo"><expr_stmt><expr><call><name><operator pos:line="9" pos:column="5">::<pos:position pos:line="9" pos:column="7"/></operator><name pos:line="9" pos:column="7">unlink<pos:position pos:line="9" pos:column="13"/></name></name><argument_list pos:line="9" pos:column="13">(<argument><expr><call><name><name pos:line="9" pos:column="14">m_path<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">.<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="21">c_str<pos:position pos:line="9" pos:column="26"/></name></name><argument_list pos:line="9" pos:column="26">()<pos:position pos:line="9" pos:column="28"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt></block></then></if>

  <comment type="line" pos:line="11" pos:column="3">// Just do a simple locking for now that isn't safe for network</comment>
  <comment type="line" pos:line="12" pos:column="3">// devices.</comment>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">fd<pos:position pos:line="13" pos:column="9"/></name> <init pos:line="13" pos:column="10">= <expr><call><name><operator pos:line="13" pos:column="12">::<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">open<pos:position pos:line="13" pos:column="18"/></name></name><argument_list pos:line="13" pos:column="18">(<argument><expr><call><name><name pos:line="13" pos:column="19">m_path<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">.<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">c_str<pos:position pos:line="13" pos:column="31"/></name></name><argument_list pos:line="13" pos:column="31">()<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="13" pos:column="35">O_RDWR<pos:position pos:line="13" pos:column="41"/></name> <operator pos:line="13" pos:column="42">|<pos:position pos:line="13" pos:column="43"/></operator> <name pos:line="13" pos:column="44">O_CREAT<pos:position pos:line="13" pos:column="51"/></name> <operator pos:line="13" pos:column="52">|<pos:position pos:line="13" pos:column="53"/></operator> <name pos:line="13" pos:column="54">O_EXCL<pos:position pos:line="13" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="62">0444<pos:position pos:line="13" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="68"/></decl_stmt>

  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">fd<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">==<pos:position pos:line="15" pos:column="12"/></operator> <operator pos:line="15" pos:column="13">-<pos:position pos:line="15" pos:column="14"/></operator><literal type="number" pos:line="15" pos:column="14">1<pos:position pos:line="15" pos:column="15"/></literal></expr>)<pos:position pos:line="15" pos:column="16"/></condition><then pos:line="15" pos:column="16">
    <block type="pseudo"><return pos:line="16" pos:column="5">return <expr><literal type="boolean" pos:line="16" pos:column="12">false<pos:position pos:line="16" pos:column="17"/></literal></expr>;<pos:position pos:line="16" pos:column="18"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="18" pos:column="3">char<pos:position pos:line="18" pos:column="7"/></name></type> <name><name pos:line="18" pos:column="8">buf<pos:position pos:line="18" pos:column="11"/></name><index pos:line="18" pos:column="11">[<expr><literal type="number" pos:line="18" pos:column="12">256<pos:position pos:line="18" pos:column="15"/></literal></expr>]<pos:position pos:line="18" pos:column="16"/></index></name></decl>;<pos:position pos:line="18" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">int<pos:position pos:line="19" pos:column="6"/></name></type> <name pos:line="19" pos:column="7">pos<pos:position pos:line="19" pos:column="10"/></name> <init pos:line="19" pos:column="11">= <expr><call><name><operator pos:line="19" pos:column="13">::<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">gethostname<pos:position pos:line="19" pos:column="26"/></name></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name pos:line="19" pos:column="27">buf<pos:position pos:line="19" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="32">255<pos:position pos:line="19" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="37"/></decl_stmt>

  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name pos:line="21" pos:column="7">pos<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">==<pos:position pos:line="21" pos:column="13"/></operator> <literal type="number" pos:line="21" pos:column="14">0<pos:position pos:line="21" pos:column="15"/></literal></expr>)<pos:position pos:line="21" pos:column="16"/></condition><then pos:line="21" pos:column="16"> <block pos:line="21" pos:column="17">{
    <expr_stmt><expr><call><name><operator pos:line="22" pos:column="5">::<pos:position pos:line="22" pos:column="7"/></operator><name pos:line="22" pos:column="7">snprintf<pos:position pos:line="22" pos:column="15"/></name></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name pos:line="22" pos:column="16">buf<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">+<pos:position pos:line="22" pos:column="21"/></operator> <call><name><name pos:line="22" pos:column="22">std<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">::<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="27">strlen<pos:position pos:line="22" pos:column="33"/></name></name><argument_list pos:line="22" pos:column="33">(<argument><expr><name pos:line="22" pos:column="34">buf<pos:position pos:line="22" pos:column="37"/></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="40">255<pos:position pos:line="22" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="45">":+%i\n"<pos:position pos:line="22" pos:column="53"/></literal></expr></argument>, <argument><expr><call><name><operator pos:line="22" pos:column="55">::<pos:position pos:line="22" pos:column="57"/></operator><name pos:line="22" pos:column="57">getpid<pos:position pos:line="22" pos:column="63"/></name></name><argument_list pos:line="22" pos:column="63">()<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="67"/></expr_stmt>
    <expr_stmt><expr><call><name><operator pos:line="23" pos:column="5">::<pos:position pos:line="23" pos:column="7"/></operator><name pos:line="23" pos:column="7">write<pos:position pos:line="23" pos:column="12"/></name></name><argument_list pos:line="23" pos:column="12">(<argument><expr><name pos:line="23" pos:column="13">fd<pos:position pos:line="23" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="17">buf<pos:position pos:line="23" pos:column="20"/></name></expr></argument>, <argument><expr><call><name><name pos:line="23" pos:column="22">std<pos:position pos:line="23" pos:column="25"/></name><operator pos:line="23" pos:column="25">::<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="27">strlen<pos:position pos:line="23" pos:column="33"/></name></name><argument_list pos:line="23" pos:column="33">(<argument><expr><name pos:line="23" pos:column="34">buf<pos:position pos:line="23" pos:column="37"/></name></expr></argument>)<pos:position pos:line="23" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name><operator pos:line="26" pos:column="3">::<pos:position pos:line="26" pos:column="5"/></operator><name pos:line="26" pos:column="5">close<pos:position pos:line="26" pos:column="10"/></name></name><argument_list pos:line="26" pos:column="10">(<argument><expr><name pos:line="26" pos:column="11">fd<pos:position pos:line="26" pos:column="13"/></name></expr></argument>)<pos:position pos:line="26" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="15"/></expr_stmt>

  <expr_stmt><expr><name pos:line="28" pos:column="3">m_locked<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <literal type="boolean" pos:line="28" pos:column="14">true<pos:position pos:line="28" pos:column="18"/></literal></expr>;<pos:position pos:line="28" pos:column="19"/></expr_stmt>
  <return pos:line="29" pos:column="3">return <expr><literal type="boolean" pos:line="29" pos:column="10">true<pos:position pos:line="29" pos:column="14"/></literal></expr>;<pos:position pos:line="29" pos:column="15"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
