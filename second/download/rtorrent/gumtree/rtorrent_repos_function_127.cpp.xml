<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_127.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">OptionParser<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">call<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">char<pos:position pos:line="2" pos:column="24"/></name></type> <name pos:line="2" pos:column="25">c<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name><name pos:line="2" pos:column="34">std<pos:position pos:line="2" pos:column="37"/></name><operator pos:line="2" pos:column="37">::<pos:position pos:line="2" pos:column="39"/></operator><name pos:line="2" pos:column="39">string<pos:position pos:line="2" pos:column="45"/></name></name><modifier pos:line="2" pos:column="45">&amp;<pos:position pos:line="2" pos:column="50"/></modifier></type> <name pos:line="2" pos:column="47">arg<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list> <block pos:line="2" pos:column="52">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">Container<pos:position pos:line="3" pos:column="12"/></name><operator pos:line="3" pos:column="12">::<pos:position pos:line="3" pos:column="14"/></operator><name pos:line="3" pos:column="14">iterator<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">itr<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><call><name><name pos:line="3" pos:column="29">m_container<pos:position pos:line="3" pos:column="40"/></name><operator pos:line="3" pos:column="40">.<pos:position pos:line="3" pos:column="41"/></operator><name pos:line="3" pos:column="41">find<pos:position pos:line="3" pos:column="45"/></name></name><argument_list pos:line="3" pos:column="45">(<argument><expr><name pos:line="3" pos:column="46">c<pos:position pos:line="3" pos:column="47"/></name></expr></argument>)<pos:position pos:line="3" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="49"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">itr<pos:position pos:line="5" pos:column="10"/></name> <operator pos:line="5" pos:column="11">==<pos:position pos:line="5" pos:column="13"/></operator> <call><name><name pos:line="5" pos:column="14">m_container<pos:position pos:line="5" pos:column="25"/></name><operator pos:line="5" pos:column="25">.<pos:position pos:line="5" pos:column="26"/></operator><name pos:line="5" pos:column="26">end<pos:position pos:line="5" pos:column="29"/></name></name><argument_list pos:line="5" pos:column="29">()<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="32"/></condition><then pos:line="5" pos:column="32">
    <block type="pseudo"><throw pos:line="6" pos:column="5">throw <expr><call><name><name pos:line="6" pos:column="11">std<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">::<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="16">logic_error<pos:position pos:line="6" pos:column="27"/></name></name><argument_list pos:line="6" pos:column="27">(<argument><expr><literal type="string" pos:line="6" pos:column="28">"OptionParser::call_flag(...) could not find the flag"<pos:position pos:line="6" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="84"/></throw></block></then></if>

  <expr_stmt><expr><call><name><name pos:line="8" pos:column="3">itr<pos:position pos:line="8" pos:column="6"/></name><operator pos:line="8" pos:column="6">-&gt;<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="8">second<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">.<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">m_slot<pos:position pos:line="8" pos:column="21"/></name></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">arg<pos:position pos:line="8" pos:column="25"/></name></expr></argument>)<pos:position pos:line="8" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="27"/></expr_stmt>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
