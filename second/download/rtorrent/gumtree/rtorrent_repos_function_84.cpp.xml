<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_84.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">torrent<pos:position pos:line="1" pos:column="8"/></name><operator pos:line="1" pos:column="8">::<pos:position pos:line="1" pos:column="10"/></operator><name pos:line="1" pos:column="10">Object<pos:position pos:line="1" pos:column="16"/></name></name></type>
<name pos:line="2" pos:column="1">apply_call_download<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><specifier pos:line="2" pos:column="21">const<pos:position pos:line="2" pos:column="26"/></specifier> <name><name pos:line="2" pos:column="27">torrent<pos:position pos:line="2" pos:column="34"/></name><operator pos:line="2" pos:column="34">::<pos:position pos:line="2" pos:column="36"/></operator><name pos:line="2" pos:column="36">Object<pos:position pos:line="2" pos:column="42"/></name></name><modifier pos:line="2" pos:column="42">&amp;<pos:position pos:line="2" pos:column="47"/></modifier></type> <name pos:line="2" pos:column="44">rawArgs<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list> <block pos:line="2" pos:column="53">{
  <decl_stmt><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name><name pos:line="3" pos:column="9">torrent<pos:position pos:line="3" pos:column="16"/></name><operator pos:line="3" pos:column="16">::<pos:position pos:line="3" pos:column="18"/></operator><name pos:line="3" pos:column="18">Object<pos:position pos:line="3" pos:column="24"/></name><operator pos:line="3" pos:column="24">::<pos:position pos:line="3" pos:column="26"/></operator><name pos:line="3" pos:column="26">list_type<pos:position pos:line="3" pos:column="35"/></name></name><modifier pos:line="3" pos:column="35">&amp;<pos:position pos:line="3" pos:column="40"/></modifier></type>          <name pos:line="3" pos:column="46">args<pos:position pos:line="3" pos:column="50"/></name> <init pos:line="3" pos:column="51">= <expr><call><name><name pos:line="3" pos:column="53">rawArgs<pos:position pos:line="3" pos:column="60"/></name><operator pos:line="3" pos:column="60">.<pos:position pos:line="3" pos:column="61"/></operator><name pos:line="3" pos:column="61">as_list<pos:position pos:line="3" pos:column="68"/></name></name><argument_list pos:line="3" pos:column="68">()<pos:position pos:line="3" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="71"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><call><name><name pos:line="5" pos:column="7">args<pos:position pos:line="5" pos:column="11"/></name><operator pos:line="5" pos:column="11">.<pos:position pos:line="5" pos:column="12"/></operator><name pos:line="5" pos:column="12">empty<pos:position pos:line="5" pos:column="17"/></name></name><argument_list pos:line="5" pos:column="17">()<pos:position pos:line="5" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="20"/></condition><then pos:line="5" pos:column="20">
    <block type="pseudo"><throw pos:line="6" pos:column="5">throw <expr><call><name><name pos:line="6" pos:column="11">torrent<pos:position pos:line="6" pos:column="18"/></name><operator pos:line="6" pos:column="18">::<pos:position pos:line="6" pos:column="20"/></operator><name pos:line="6" pos:column="20">input_error<pos:position pos:line="6" pos:column="31"/></name></name><argument_list pos:line="6" pos:column="31">(<argument><expr><literal type="string" pos:line="6" pos:column="32">"Too few arguments."<pos:position pos:line="6" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="54"/></throw></block></then></if>

<comment type="line" pos:line="8" pos:column="1">//   const torrent::Object::string_type&amp; infoHash = args.begin()-&gt;as_string();</comment>

<comment type="line" pos:line="10" pos:column="1">//   core::DownloadList*          dList = control-&gt;core()-&gt;download_list();</comment>
<comment type="line" pos:line="11" pos:column="1">//   core::DownloadList::iterator dItr  = dList-&gt;end();</comment>

<comment type="line" pos:line="13" pos:column="1">//   if (infoHash.size() == 40)</comment>
<comment type="line" pos:line="14" pos:column="1">//     dItr = dList-&gt;find_hex(infoHash.c_str());</comment>

<comment type="line" pos:line="16" pos:column="1">//   if (dItr == dList-&gt;end())</comment>
<comment type="line" pos:line="17" pos:column="1">//     throw torrent::input_error("Not a valid info-hash.");</comment>

  <decl_stmt><decl><type><name><name pos:line="19" pos:column="3">core<pos:position pos:line="19" pos:column="7"/></name><operator pos:line="19" pos:column="7">::<pos:position pos:line="19" pos:column="9"/></operator><name pos:line="19" pos:column="9">ViewManager<pos:position pos:line="19" pos:column="20"/></name></name><modifier pos:line="19" pos:column="20">*<pos:position pos:line="19" pos:column="21"/></modifier></type> <name pos:line="19" pos:column="22">viewManager<pos:position pos:line="19" pos:column="33"/></name> <init pos:line="19" pos:column="34">= <expr><call><name><name pos:line="19" pos:column="36">control<pos:position pos:line="19" pos:column="43"/></name><operator pos:line="19" pos:column="43">-&gt;<pos:position pos:line="19" pos:column="48"/></operator><name pos:line="19" pos:column="45">view_manager<pos:position pos:line="19" pos:column="57"/></name></name><argument_list pos:line="19" pos:column="57">()<pos:position pos:line="19" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="20" pos:column="3">core<pos:position pos:line="20" pos:column="7"/></name><operator pos:line="20" pos:column="7">::<pos:position pos:line="20" pos:column="9"/></operator><name pos:line="20" pos:column="9">ViewManager<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">::<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">iterator<pos:position pos:line="20" pos:column="30"/></name></name></type> <name pos:line="20" pos:column="31">viewItr<pos:position pos:line="20" pos:column="38"/></name></decl>;<pos:position pos:line="20" pos:column="39"/></decl_stmt>

  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><operator pos:line="22" pos:column="7">!<pos:position pos:line="22" pos:column="8"/></operator><call><name><name pos:line="22" pos:column="8">args<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">.<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="13">front<pos:position pos:line="22" pos:column="18"/></name></name><argument_list pos:line="22" pos:column="18">()<pos:position pos:line="22" pos:column="20"/></argument_list></call><operator pos:line="22" pos:column="20">.<pos:position pos:line="22" pos:column="21"/></operator><call><name pos:line="22" pos:column="21">as_string<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">()<pos:position pos:line="22" pos:column="32"/></argument_list></call><operator pos:line="22" pos:column="32">.<pos:position pos:line="22" pos:column="33"/></operator><call><name pos:line="22" pos:column="33">empty<pos:position pos:line="22" pos:column="38"/></name><argument_list pos:line="22" pos:column="38">()<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="41"/></condition><then pos:line="22" pos:column="41">
    <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="5">viewItr<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <call><name><name pos:line="23" pos:column="15">viewManager<pos:position pos:line="23" pos:column="26"/></name><operator pos:line="23" pos:column="26">-&gt;<pos:position pos:line="23" pos:column="31"/></operator><name pos:line="23" pos:column="28">find<pos:position pos:line="23" pos:column="32"/></name></name><argument_list pos:line="23" pos:column="32">(<argument><expr><call><name><name pos:line="23" pos:column="33">args<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">.<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="38">front<pos:position pos:line="23" pos:column="43"/></name></name><argument_list pos:line="23" pos:column="43">()<pos:position pos:line="23" pos:column="45"/></argument_list></call><operator pos:line="23" pos:column="45">.<pos:position pos:line="23" pos:column="46"/></operator><call><name pos:line="23" pos:column="46">as_string<pos:position pos:line="23" pos:column="55"/></name><argument_list pos:line="23" pos:column="55">()<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="59"/></expr_stmt></block></then>
  <else pos:line="24" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="5">viewItr<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">=<pos:position pos:line="25" pos:column="14"/></operator> <call><name><name pos:line="25" pos:column="15">viewManager<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">-&gt;<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="28">find<pos:position pos:line="25" pos:column="32"/></name></name><argument_list pos:line="25" pos:column="32">(<argument><expr><literal type="string" pos:line="25" pos:column="33">"default"<pos:position pos:line="25" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt></block></else></if>

  <if pos:line="27" pos:column="3">if <condition pos:line="27" pos:column="6">(<expr><name pos:line="27" pos:column="7">viewItr<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">==<pos:position pos:line="27" pos:column="17"/></operator> <call><name><name pos:line="27" pos:column="18">viewManager<pos:position pos:line="27" pos:column="29"/></name><operator pos:line="27" pos:column="29">-&gt;<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="31">end<pos:position pos:line="27" pos:column="34"/></name></name><argument_list pos:line="27" pos:column="34">()<pos:position pos:line="27" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="37"/></condition><then pos:line="27" pos:column="37">
    <block type="pseudo"><throw pos:line="28" pos:column="5">throw <expr><call><name><name pos:line="28" pos:column="11">torrent<pos:position pos:line="28" pos:column="18"/></name><operator pos:line="28" pos:column="18">::<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="20">input_error<pos:position pos:line="28" pos:column="31"/></name></name><argument_list pos:line="28" pos:column="31">(<argument><expr><literal type="string" pos:line="28" pos:column="32">"Could not find view."<pos:position pos:line="28" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="56"/></throw></block></then></if>

  <comment type="line" pos:line="30" pos:column="3">// Add some pre-parsing of the commands, so we don't spend time</comment>
  <comment type="line" pos:line="31" pos:column="3">// parsing and searching command map for every single call.</comment>
  <decl_stmt><decl><type><name><name pos:line="32" pos:column="3">torrent<pos:position pos:line="32" pos:column="10"/></name><operator pos:line="32" pos:column="10">::<pos:position pos:line="32" pos:column="12"/></operator><name pos:line="32" pos:column="12">Object<pos:position pos:line="32" pos:column="18"/></name></name></type>             <name pos:line="32" pos:column="31">resultRaw<pos:position pos:line="32" pos:column="40"/></name><argument_list pos:line="32" pos:column="40">(<argument><expr><name><name pos:line="32" pos:column="41">torrent<pos:position pos:line="32" pos:column="48"/></name><operator pos:line="32" pos:column="48">::<pos:position pos:line="32" pos:column="50"/></operator><name pos:line="32" pos:column="50">Object<pos:position pos:line="32" pos:column="56"/></name><operator pos:line="32" pos:column="56">::<pos:position pos:line="32" pos:column="58"/></operator><name pos:line="32" pos:column="58">TYPE_LIST<pos:position pos:line="32" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="68"/></argument_list></decl>;<pos:position pos:line="32" pos:column="69"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="33" pos:column="3">torrent<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">::<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="12">Object<pos:position pos:line="33" pos:column="18"/></name><operator pos:line="33" pos:column="18">::<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">list_type<pos:position pos:line="33" pos:column="29"/></name></name><modifier pos:line="33" pos:column="29">&amp;<pos:position pos:line="33" pos:column="34"/></modifier></type> <name pos:line="33" pos:column="31">result<pos:position pos:line="33" pos:column="37"/></name> <init pos:line="33" pos:column="38">= <expr><call><name><name pos:line="33" pos:column="40">resultRaw<pos:position pos:line="33" pos:column="49"/></name><operator pos:line="33" pos:column="49">.<pos:position pos:line="33" pos:column="50"/></operator><name pos:line="33" pos:column="50">as_list<pos:position pos:line="33" pos:column="57"/></name></name><argument_list pos:line="33" pos:column="57">()<pos:position pos:line="33" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="60"/></decl_stmt>

  <for pos:line="35" pos:column="3">for <control pos:line="35" pos:column="7">(<init><decl><type><name><name pos:line="35" pos:column="8">core<pos:position pos:line="35" pos:column="12"/></name><operator pos:line="35" pos:column="12">::<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">View<pos:position pos:line="35" pos:column="18"/></name><operator pos:line="35" pos:column="18">::<pos:position pos:line="35" pos:column="20"/></operator><name pos:line="35" pos:column="20">const_iterator<pos:position pos:line="35" pos:column="34"/></name></name></type> <name pos:line="35" pos:column="35">vItr<pos:position pos:line="35" pos:column="39"/></name> <init pos:line="35" pos:column="40">= <expr><call><name><operator pos:line="35" pos:column="42">(<pos:position pos:line="35" pos:column="43"/></operator><operator pos:line="35" pos:column="43">*<pos:position pos:line="35" pos:column="44"/></operator><name pos:line="35" pos:column="44">viewItr<pos:position pos:line="35" pos:column="51"/></name><operator pos:line="35" pos:column="51">)<pos:position pos:line="35" pos:column="52"/></operator><operator pos:line="35" pos:column="52">-&gt;<pos:position pos:line="35" pos:column="57"/></operator><name pos:line="35" pos:column="54">begin_visible<pos:position pos:line="35" pos:column="67"/></name></name><argument_list pos:line="35" pos:column="67">()<pos:position pos:line="35" pos:column="69"/></argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name pos:line="35" pos:column="71">vLast<pos:position pos:line="35" pos:column="76"/></name> <init pos:line="35" pos:column="77">= <expr><call><name><operator pos:line="35" pos:column="79">(<pos:position pos:line="35" pos:column="80"/></operator><operator pos:line="35" pos:column="80">*<pos:position pos:line="35" pos:column="81"/></operator><name pos:line="35" pos:column="81">viewItr<pos:position pos:line="35" pos:column="88"/></name><operator pos:line="35" pos:column="88">)<pos:position pos:line="35" pos:column="89"/></operator><operator pos:line="35" pos:column="89">-&gt;<pos:position pos:line="35" pos:column="94"/></operator><name pos:line="35" pos:column="91">end_visible<pos:position pos:line="35" pos:column="102"/></name></name><argument_list pos:line="35" pos:column="102">()<pos:position pos:line="35" pos:column="104"/></argument_list></call></expr></init></decl>;<pos:position pos:line="35" pos:column="105"/></init> <condition><expr><name pos:line="35" pos:column="106">vItr<pos:position pos:line="35" pos:column="110"/></name> <operator pos:line="35" pos:column="111">!=<pos:position pos:line="35" pos:column="113"/></operator> <name pos:line="35" pos:column="114">vLast<pos:position pos:line="35" pos:column="119"/></name></expr>;<pos:position pos:line="35" pos:column="120"/></condition> <incr><expr><name pos:line="35" pos:column="121">vItr<pos:position pos:line="35" pos:column="125"/></name><operator pos:line="35" pos:column="125">++<pos:position pos:line="35" pos:column="127"/></operator></expr></incr>)<pos:position pos:line="35" pos:column="128"/></control> <block pos:line="35" pos:column="129">{
    <decl_stmt><decl><type><name><name pos:line="36" pos:column="5">torrent<pos:position pos:line="36" pos:column="12"/></name><operator pos:line="36" pos:column="12">::<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">Object<pos:position pos:line="36" pos:column="20"/></name><operator pos:line="36" pos:column="20">::<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="22">list_type<pos:position pos:line="36" pos:column="31"/></name></name><modifier pos:line="36" pos:column="31">&amp;<pos:position pos:line="36" pos:column="36"/></modifier></type> <name pos:line="36" pos:column="33">row<pos:position pos:line="36" pos:column="36"/></name> <init pos:line="36" pos:column="37">= <expr><call><name><name pos:line="36" pos:column="39">result<pos:position pos:line="36" pos:column="45"/></name><operator pos:line="36" pos:column="45">.<pos:position pos:line="36" pos:column="46"/></operator><name pos:line="36" pos:column="46">insert<pos:position pos:line="36" pos:column="52"/></name></name><argument_list pos:line="36" pos:column="52">(<argument><expr><call><name><name pos:line="36" pos:column="53">result<pos:position pos:line="36" pos:column="59"/></name><operator pos:line="36" pos:column="59">.<pos:position pos:line="36" pos:column="60"/></operator><name pos:line="36" pos:column="60">end<pos:position pos:line="36" pos:column="63"/></name></name><argument_list pos:line="36" pos:column="63">()<pos:position pos:line="36" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="36" pos:column="67">torrent<pos:position pos:line="36" pos:column="74"/></name><operator pos:line="36" pos:column="74">::<pos:position pos:line="36" pos:column="76"/></operator><name pos:line="36" pos:column="76">Object<pos:position pos:line="36" pos:column="82"/></name></name><argument_list pos:line="36" pos:column="82">(<argument><expr><name><name pos:line="36" pos:column="83">torrent<pos:position pos:line="36" pos:column="90"/></name><operator pos:line="36" pos:column="90">::<pos:position pos:line="36" pos:column="92"/></operator><name pos:line="36" pos:column="92">Object<pos:position pos:line="36" pos:column="98"/></name><operator pos:line="36" pos:column="98">::<pos:position pos:line="36" pos:column="100"/></operator><name pos:line="36" pos:column="100">TYPE_LIST<pos:position pos:line="36" pos:column="109"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="110"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="111"/></argument_list></call><operator pos:line="36" pos:column="111">-&gt;<pos:position pos:line="36" pos:column="116"/></operator><call><name pos:line="36" pos:column="113">as_list<pos:position pos:line="36" pos:column="120"/></name><argument_list pos:line="36" pos:column="120">()<pos:position pos:line="36" pos:column="122"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="123"/></decl_stmt>

    <for pos:line="38" pos:column="5">for <control pos:line="38" pos:column="9">(<init><decl><type><name><name pos:line="38" pos:column="10">torrent<pos:position pos:line="38" pos:column="17"/></name><operator pos:line="38" pos:column="17">::<pos:position pos:line="38" pos:column="19"/></operator><name pos:line="38" pos:column="19">Object<pos:position pos:line="38" pos:column="25"/></name><operator pos:line="38" pos:column="25">::<pos:position pos:line="38" pos:column="27"/></operator><name pos:line="38" pos:column="27">list_type<pos:position pos:line="38" pos:column="36"/></name><operator pos:line="38" pos:column="36">::<pos:position pos:line="38" pos:column="38"/></operator><name pos:line="38" pos:column="38">const_iterator<pos:position pos:line="38" pos:column="52"/></name></name></type> <name pos:line="38" pos:column="53">cItr<pos:position pos:line="38" pos:column="57"/></name> <init pos:line="38" pos:column="58">= <expr><operator pos:line="38" pos:column="60">++<pos:position pos:line="38" pos:column="62"/></operator><call><name><name pos:line="38" pos:column="62">args<pos:position pos:line="38" pos:column="66"/></name><operator pos:line="38" pos:column="66">.<pos:position pos:line="38" pos:column="67"/></operator><name pos:line="38" pos:column="67">begin<pos:position pos:line="38" pos:column="72"/></name></name><argument_list pos:line="38" pos:column="72">()<pos:position pos:line="38" pos:column="74"/></argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name pos:line="38" pos:column="76">cLast<pos:position pos:line="38" pos:column="81"/></name> <init pos:line="38" pos:column="82">= <expr><call><name><name pos:line="38" pos:column="84">args<pos:position pos:line="38" pos:column="88"/></name><operator pos:line="38" pos:column="88">.<pos:position pos:line="38" pos:column="89"/></operator><name pos:line="38" pos:column="89">end<pos:position pos:line="38" pos:column="92"/></name></name><argument_list pos:line="38" pos:column="92">()<pos:position pos:line="38" pos:column="94"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="95"/></init> <condition><expr><name pos:line="38" pos:column="96">cItr<pos:position pos:line="38" pos:column="100"/></name> <operator pos:line="38" pos:column="101">!=<pos:position pos:line="38" pos:column="103"/></operator> <call><name><name pos:line="38" pos:column="104">args<pos:position pos:line="38" pos:column="108"/></name><operator pos:line="38" pos:column="108">.<pos:position pos:line="38" pos:column="109"/></operator><name pos:line="38" pos:column="109">end<pos:position pos:line="38" pos:column="112"/></name></name><argument_list pos:line="38" pos:column="112">()<pos:position pos:line="38" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="115"/></condition> <incr><expr><name pos:line="38" pos:column="116">cItr<pos:position pos:line="38" pos:column="120"/></name><operator pos:line="38" pos:column="120">++<pos:position pos:line="38" pos:column="122"/></operator></expr></incr>)<pos:position pos:line="38" pos:column="123"/></control> <block pos:line="38" pos:column="124">{
      <decl_stmt><decl><type><specifier pos:line="39" pos:column="7">const<pos:position pos:line="39" pos:column="12"/></specifier> <name><name pos:line="39" pos:column="13">std<pos:position pos:line="39" pos:column="16"/></name><operator pos:line="39" pos:column="16">::<pos:position pos:line="39" pos:column="18"/></operator><name pos:line="39" pos:column="18">string<pos:position pos:line="39" pos:column="24"/></name></name><modifier pos:line="39" pos:column="24">&amp;<pos:position pos:line="39" pos:column="29"/></modifier></type> <name pos:line="39" pos:column="26">cmd<pos:position pos:line="39" pos:column="29"/></name> <init pos:line="39" pos:column="30">= <expr><call><name><name pos:line="39" pos:column="32">cItr<pos:position pos:line="39" pos:column="36"/></name><operator pos:line="39" pos:column="36">-&gt;<pos:position pos:line="39" pos:column="41"/></operator><name pos:line="39" pos:column="38">as_string<pos:position pos:line="39" pos:column="47"/></name></name><argument_list pos:line="39" pos:column="47">()<pos:position pos:line="39" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="39" pos:column="50"/></decl_stmt>
      <expr_stmt><expr><call><name><name pos:line="40" pos:column="7">row<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">.<pos:position pos:line="40" pos:column="11"/></operator><name pos:line="40" pos:column="11">push_back<pos:position pos:line="40" pos:column="20"/></name></name><argument_list pos:line="40" pos:column="20">(<argument><expr><call><name><name pos:line="40" pos:column="21">rpc<pos:position pos:line="40" pos:column="24"/></name><operator pos:line="40" pos:column="24">::<pos:position pos:line="40" pos:column="26"/></operator><name pos:line="40" pos:column="26">parse_command_d_single<pos:position pos:line="40" pos:column="48"/></name></name><argument_list pos:line="40" pos:column="48">(<argument><expr><operator pos:line="40" pos:column="49">*<pos:position pos:line="40" pos:column="50"/></operator><name pos:line="40" pos:column="50">vItr<pos:position pos:line="40" pos:column="54"/></name></expr></argument>, <argument><expr><call><name><name pos:line="40" pos:column="56">cmd<pos:position pos:line="40" pos:column="59"/></name><operator pos:line="40" pos:column="59">.<pos:position pos:line="40" pos:column="60"/></operator><name pos:line="40" pos:column="60">c_str<pos:position pos:line="40" pos:column="65"/></name></name><argument_list pos:line="40" pos:column="65">()<pos:position pos:line="40" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="40" pos:column="69">cmd<pos:position pos:line="40" pos:column="72"/></name><operator pos:line="40" pos:column="72">.<pos:position pos:line="40" pos:column="73"/></operator><name pos:line="40" pos:column="73">c_str<pos:position pos:line="40" pos:column="78"/></name></name><argument_list pos:line="40" pos:column="78">()<pos:position pos:line="40" pos:column="80"/></argument_list></call> <operator pos:line="40" pos:column="81">+<pos:position pos:line="40" pos:column="82"/></operator> <call><name><name pos:line="40" pos:column="83">cmd<pos:position pos:line="40" pos:column="86"/></name><operator pos:line="40" pos:column="86">.<pos:position pos:line="40" pos:column="87"/></operator><name pos:line="40" pos:column="87">size<pos:position pos:line="40" pos:column="91"/></name></name><argument_list pos:line="40" pos:column="91">()<pos:position pos:line="40" pos:column="93"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="94"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="96"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></for>
  }<pos:position pos:line="42" pos:column="4"/></block></for>

  <return pos:line="44" pos:column="3">return <expr><name pos:line="44" pos:column="10">resultRaw<pos:position pos:line="44" pos:column="19"/></name></expr>;<pos:position pos:line="44" pos:column="20"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
