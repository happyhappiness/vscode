<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_178.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name><modifier pos:line="1" pos:column="11">*<pos:position pos:line="1" pos:column="12"/></modifier></type>
<name pos:line="2" pos:column="1">parse_whole_list<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name pos:line="2" pos:column="24">char<pos:position pos:line="2" pos:column="28"/></name><modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type> <name pos:line="2" pos:column="30">first<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="37">const<pos:position pos:line="2" pos:column="42"/></specifier> <name pos:line="2" pos:column="43">char<pos:position pos:line="2" pos:column="47"/></name><modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type> <name pos:line="2" pos:column="49">last<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="55">torrent<pos:position pos:line="2" pos:column="62"/></name><operator pos:line="2" pos:column="62">::<pos:position pos:line="2" pos:column="64"/></operator><name pos:line="2" pos:column="64">Object<pos:position pos:line="2" pos:column="70"/></name></name><modifier pos:line="2" pos:column="70">*<pos:position pos:line="2" pos:column="71"/></modifier></type> <name pos:line="2" pos:column="72">dest<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="77"/></parameter_list> <block pos:line="2" pos:column="78">{
  <expr_stmt><expr><name pos:line="3" pos:column="3">first<pos:position pos:line="3" pos:column="8"/></name> <operator pos:line="3" pos:column="9">=<pos:position pos:line="3" pos:column="10"/></operator> <call><name pos:line="3" pos:column="11">parse_skip_wspace<pos:position pos:line="3" pos:column="28"/></name><argument_list pos:line="3" pos:column="28">(<argument><expr><name pos:line="3" pos:column="29">first<pos:position pos:line="3" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="36">last<pos:position pos:line="3" pos:column="40"/></name></expr></argument>)<pos:position pos:line="3" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4" pos:column="3">first<pos:position pos:line="4" pos:column="8"/></name> <operator pos:line="4" pos:column="9">=<pos:position pos:line="4" pos:column="10"/></operator> <call><name pos:line="4" pos:column="11">parse_object<pos:position pos:line="4" pos:column="23"/></name><argument_list pos:line="4" pos:column="23">(<argument><expr><name pos:line="4" pos:column="24">first<pos:position pos:line="4" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="31">last<pos:position pos:line="4" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="37">dest<pos:position pos:line="4" pos:column="41"/></name></expr></argument>)<pos:position pos:line="4" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5" pos:column="3">first<pos:position pos:line="5" pos:column="8"/></name> <operator pos:line="5" pos:column="9">=<pos:position pos:line="5" pos:column="10"/></operator> <call><name pos:line="5" pos:column="11">parse_skip_wspace<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">(<argument><expr><name pos:line="5" pos:column="29">first<pos:position pos:line="5" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="36">last<pos:position pos:line="5" pos:column="40"/></name></expr></argument>)<pos:position pos:line="5" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="42"/></expr_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">first<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">!=<pos:position pos:line="7" pos:column="15"/></operator> <name pos:line="7" pos:column="16">last<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">&amp;&amp;<pos:position pos:line="7" pos:column="31"/></operator> <call><name pos:line="7" pos:column="24">parse_is_seperator<pos:position pos:line="7" pos:column="42"/></name><argument_list pos:line="7" pos:column="42">(<argument><expr><operator pos:line="7" pos:column="43">*<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="44">first<pos:position pos:line="7" pos:column="49"/></name></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="51"/></condition><then pos:line="7" pos:column="51"> <block pos:line="7" pos:column="52">{
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">torrent<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">::<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">Object<pos:position pos:line="8" pos:column="20"/></name></name></type> <name pos:line="8" pos:column="21">tmp<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><call><name><name pos:line="8" pos:column="27">torrent<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">::<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="36">Object<pos:position pos:line="8" pos:column="42"/></name></name><argument_list pos:line="8" pos:column="42">(<argument><expr><name><name pos:line="8" pos:column="43">torrent<pos:position pos:line="8" pos:column="50"/></name><operator pos:line="8" pos:column="50">::<pos:position pos:line="8" pos:column="52"/></operator><name pos:line="8" pos:column="52">Object<pos:position pos:line="8" pos:column="58"/></name><operator pos:line="8" pos:column="58">::<pos:position pos:line="8" pos:column="60"/></operator><name pos:line="8" pos:column="60">TYPE_LIST<pos:position pos:line="8" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="71"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="9" pos:column="5">tmp<pos:position pos:line="9" pos:column="8"/></name><operator pos:line="9" pos:column="8">.<pos:position pos:line="9" pos:column="9"/></operator><name pos:line="9" pos:column="9">swap<pos:position pos:line="9" pos:column="13"/></name></name><argument_list pos:line="9" pos:column="13">(<argument><expr><operator pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="15">dest<pos:position pos:line="9" pos:column="19"/></name></expr></argument>)<pos:position pos:line="9" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="11" pos:column="5">dest<pos:position pos:line="11" pos:column="9"/></name><operator pos:line="11" pos:column="9">-&gt;<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="11">as_list<pos:position pos:line="11" pos:column="18"/></name></name><argument_list pos:line="11" pos:column="18">()<pos:position pos:line="11" pos:column="20"/></argument_list></call><operator pos:line="11" pos:column="20">.<pos:position pos:line="11" pos:column="21"/></operator><call><name pos:line="11" pos:column="21">push_back<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><name pos:line="11" pos:column="31">tmp<pos:position pos:line="11" pos:column="34"/></name></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">first<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <call><name pos:line="12" pos:column="13">parse_list<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><operator pos:line="12" pos:column="24">++<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="26">first<pos:position pos:line="12" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="33">last<pos:position pos:line="12" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="39">dest<pos:position pos:line="12" pos:column="43"/></name></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <return pos:line="15" pos:column="3">return <expr><name pos:line="15" pos:column="10">first<pos:position pos:line="15" pos:column="15"/></name></expr>;<pos:position pos:line="15" pos:column="16"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
