<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_171.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">parse_whole_string<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name pos:line="2" pos:column="26">char<pos:position pos:line="2" pos:column="30"/></name><modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type> <name pos:line="2" pos:column="32">first<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <name pos:line="2" pos:column="45">char<pos:position pos:line="2" pos:column="49"/></name><modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type> <name pos:line="2" pos:column="51">last<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="57">std<pos:position pos:line="2" pos:column="60"/></name><operator pos:line="2" pos:column="60">::<pos:position pos:line="2" pos:column="62"/></operator><name pos:line="2" pos:column="62">string<pos:position pos:line="2" pos:column="68"/></name></name><modifier pos:line="2" pos:column="68">*<pos:position pos:line="2" pos:column="69"/></modifier></type> <name pos:line="2" pos:column="70">dest<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="75"/></parameter_list> <block pos:line="2" pos:column="76">{
  <expr_stmt><expr><name pos:line="3" pos:column="3">first<pos:position pos:line="3" pos:column="8"/></name> <operator pos:line="3" pos:column="9">=<pos:position pos:line="3" pos:column="10"/></operator> <call><name pos:line="3" pos:column="11">parse_skip_wspace<pos:position pos:line="3" pos:column="28"/></name><argument_list pos:line="3" pos:column="28">(<argument><expr><name pos:line="3" pos:column="29">first<pos:position pos:line="3" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="36">last<pos:position pos:line="3" pos:column="40"/></name></expr></argument>)<pos:position pos:line="3" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4" pos:column="3">first<pos:position pos:line="4" pos:column="8"/></name> <operator pos:line="4" pos:column="9">=<pos:position pos:line="4" pos:column="10"/></operator> <call><name pos:line="4" pos:column="11">parse_string<pos:position pos:line="4" pos:column="23"/></name><argument_list pos:line="4" pos:column="23">(<argument><expr><name pos:line="4" pos:column="24">first<pos:position pos:line="4" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="31">last<pos:position pos:line="4" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="37">dest<pos:position pos:line="4" pos:column="41"/></name></expr></argument>)<pos:position pos:line="4" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5" pos:column="3">first<pos:position pos:line="5" pos:column="8"/></name> <operator pos:line="5" pos:column="9">=<pos:position pos:line="5" pos:column="10"/></operator> <call><name pos:line="5" pos:column="11">parse_skip_wspace<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">(<argument><expr><name pos:line="5" pos:column="29">first<pos:position pos:line="5" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="36">last<pos:position pos:line="5" pos:column="40"/></name></expr></argument>)<pos:position pos:line="5" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="42"/></expr_stmt>
   
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">first<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">!=<pos:position pos:line="7" pos:column="15"/></operator> <name pos:line="7" pos:column="16">last<pos:position pos:line="7" pos:column="20"/></name></expr>)<pos:position pos:line="7" pos:column="21"/></condition><then pos:line="7" pos:column="21">
    <block type="pseudo"><throw pos:line="8" pos:column="5">throw <expr><call><name><name pos:line="8" pos:column="11">torrent<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">::<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="20">input_error<pos:position pos:line="8" pos:column="31"/></name></name><argument_list pos:line="8" pos:column="31">(<argument><expr><literal type="string" pos:line="8" pos:column="32">"Junk at end of input."<pos:position pos:line="8" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="57"/></throw></block></then></if>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
