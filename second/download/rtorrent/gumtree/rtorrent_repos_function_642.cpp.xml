<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_642.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name><modifier pos:line="1" pos:column="5">*<pos:position pos:line="1" pos:column="6"/></modifier></type>
<name pos:line="2" pos:column="1">print_string<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">char<pos:position pos:line="2" pos:column="18"/></name><modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type> <name pos:line="2" pos:column="20">first<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="27">char<pos:position pos:line="2" pos:column="31"/></name><modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type> <name pos:line="2" pos:column="33">last<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">char<pos:position pos:line="2" pos:column="43"/></name><modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type> <name pos:line="2" pos:column="45">str<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list> <block pos:line="2" pos:column="50">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">first<pos:position pos:line="3" pos:column="12"/></name> <operator pos:line="3" pos:column="13">==<pos:position pos:line="3" pos:column="15"/></operator> <name pos:line="3" pos:column="16">last<pos:position pos:line="3" pos:column="20"/></name></expr>)<pos:position pos:line="3" pos:column="21"/></condition><then pos:line="3" pos:column="21">
    <block type="pseudo"><return pos:line="4" pos:column="5">return <expr><name pos:line="4" pos:column="12">first<pos:position pos:line="4" pos:column="17"/></name></expr>;<pos:position pos:line="4" pos:column="18"/></return></block></then></if>

  <comment type="line" pos:line="6" pos:column="3">// We don't have any nice simple functions for copying strings that</comment>
  <comment type="line" pos:line="7" pos:column="3">// return the end address.</comment>
  <while pos:line="8" pos:column="3">while <condition pos:line="8" pos:column="9">(<expr><name pos:line="8" pos:column="10">first<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">+<pos:position pos:line="8" pos:column="17"/></operator> <literal type="number" pos:line="8" pos:column="18">1<pos:position pos:line="8" pos:column="19"/></literal> <operator pos:line="8" pos:column="20">!=<pos:position pos:line="8" pos:column="22"/></operator> <name pos:line="8" pos:column="23">last<pos:position pos:line="8" pos:column="27"/></name> <operator pos:line="8" pos:column="28">&amp;&amp;<pos:position pos:line="8" pos:column="38"/></operator> <operator pos:line="8" pos:column="31">*<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="32">str<pos:position pos:line="8" pos:column="35"/></name> <operator pos:line="8" pos:column="36">!=<pos:position pos:line="8" pos:column="38"/></operator> <literal type="char" pos:line="8" pos:column="39">'\0'<pos:position pos:line="8" pos:column="43"/></literal></expr>)<pos:position pos:line="8" pos:column="44"/></condition>
    <block type="pseudo"><expr_stmt><expr><operator pos:line="9" pos:column="5">*<pos:position pos:line="9" pos:column="6"/></operator><operator pos:line="9" pos:column="6">(<pos:position pos:line="9" pos:column="7"/></operator><name pos:line="9" pos:column="7">first<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">++<pos:position pos:line="9" pos:column="14"/></operator><operator pos:line="9" pos:column="14">)<pos:position pos:line="9" pos:column="15"/></operator> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <operator pos:line="9" pos:column="18">*<pos:position pos:line="9" pos:column="19"/></operator><operator pos:line="9" pos:column="19">(<pos:position pos:line="9" pos:column="20"/></operator><name pos:line="9" pos:column="20">str<pos:position pos:line="9" pos:column="23"/></name><operator pos:line="9" pos:column="23">++<pos:position pos:line="9" pos:column="25"/></operator><operator pos:line="9" pos:column="25">)<pos:position pos:line="9" pos:column="26"/></operator></expr>;<pos:position pos:line="9" pos:column="27"/></expr_stmt></block></while>

  <expr_stmt><expr><operator pos:line="11" pos:column="3">*<pos:position pos:line="11" pos:column="4"/></operator><name pos:line="11" pos:column="4">first<pos:position pos:line="11" pos:column="9"/></name> <operator pos:line="11" pos:column="10">=<pos:position pos:line="11" pos:column="11"/></operator> <literal type="char" pos:line="11" pos:column="12">'\0'<pos:position pos:line="11" pos:column="16"/></literal></expr>;<pos:position pos:line="11" pos:column="17"/></expr_stmt>

  <return pos:line="13" pos:column="3">return <expr><name pos:line="13" pos:column="10">first<pos:position pos:line="13" pos:column="15"/></name></expr>;<pos:position pos:line="13" pos:column="16"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
