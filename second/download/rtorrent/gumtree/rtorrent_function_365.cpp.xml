<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_function_365.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">ExecFile<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">execute<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name><modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type> <name pos:line="2" pos:column="31">file<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name><modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier> <specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier><modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type> <name pos:line="2" pos:column="50">argv<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">int<pos:position pos:line="2" pos:column="59"/></name></type> <name pos:line="2" pos:column="60">flags<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list> <block pos:line="2" pos:column="67">{
  <comment type="line" pos:line="3" pos:column="3">// Write the execued command and its parameters to the log fd.</comment>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name> <name pos:line="4" pos:column="7">__UNUSED<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">result<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">m_logFd<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">!=<pos:position pos:line="6" pos:column="17"/></operator> <operator pos:line="6" pos:column="18">-<pos:position pos:line="6" pos:column="19"/></operator><literal type="number" pos:line="6" pos:column="19">1<pos:position pos:line="6" pos:column="20"/></literal></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21"> <block pos:line="6" pos:column="22">{
    <for pos:line="7" pos:column="5">for <control pos:line="7" pos:column="9">(<init><decl><type><name pos:line="7" pos:column="10">char<pos:position pos:line="7" pos:column="14"/></name><modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier> <specifier pos:line="7" pos:column="16">const<pos:position pos:line="7" pos:column="21"/></specifier><modifier pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></modifier></type> <name pos:line="7" pos:column="23">itr<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><name pos:line="7" pos:column="29">argv<pos:position pos:line="7" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="34"/></init> <condition><expr><operator pos:line="7" pos:column="35">*<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="36">itr<pos:position pos:line="7" pos:column="39"/></name> <operator pos:line="7" pos:column="40">!=<pos:position pos:line="7" pos:column="42"/></operator> <name pos:line="7" pos:column="43">NULL<pos:position pos:line="7" pos:column="47"/></name></expr>;<pos:position pos:line="7" pos:column="48"/></condition> <incr><expr><name pos:line="7" pos:column="49">itr<pos:position pos:line="7" pos:column="52"/></name><operator pos:line="7" pos:column="52">++<pos:position pos:line="7" pos:column="54"/></operator></expr></incr>)<pos:position pos:line="7" pos:column="55"/></control> <block pos:line="7" pos:column="56">{
      <if pos:line="8" pos:column="7">if <condition pos:line="8" pos:column="10">(<expr><name pos:line="8" pos:column="11">itr<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">==<pos:position pos:line="8" pos:column="17"/></operator> <name pos:line="8" pos:column="18">argv<pos:position pos:line="8" pos:column="22"/></name></expr>)<pos:position pos:line="8" pos:column="23"/></condition><then pos:line="8" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="9">result<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <call><name pos:line="9" pos:column="18">write<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><name pos:line="9" pos:column="24">m_logFd<pos:position pos:line="9" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="33">"\n---\n"<pos:position pos:line="9" pos:column="42"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="44">sizeof<argument_list pos:line="9" pos:column="50">(<argument><expr><literal type="string" pos:line="9" pos:column="51">"\n---\n"<pos:position pos:line="9" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="63"/></expr_stmt></block></then>
      <else pos:line="10" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="9">result<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <call><name pos:line="11" pos:column="18">write<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">m_logFd<pos:position pos:line="11" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="33">" "<pos:position pos:line="11" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="38">1<pos:position pos:line="11" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt></block></else></if>

      <expr_stmt><expr><name pos:line="13" pos:column="7">result<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <call><name pos:line="13" pos:column="16">write<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">m_logFd<pos:position pos:line="13" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="31">*<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="32">itr<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><call><name><name pos:line="13" pos:column="37">std<pos:position pos:line="13" pos:column="40"/></name><operator pos:line="13" pos:column="40">::<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="42">strlen<pos:position pos:line="13" pos:column="48"/></name></name><argument_list pos:line="13" pos:column="48">(<argument><expr><operator pos:line="13" pos:column="49">*<pos:position pos:line="13" pos:column="50"/></operator><name pos:line="13" pos:column="50">itr<pos:position pos:line="13" pos:column="53"/></name></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></for>

    <expr_stmt><expr><name pos:line="16" pos:column="5">result<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <call><name pos:line="16" pos:column="14">write<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><name pos:line="16" pos:column="20">m_logFd<pos:position pos:line="16" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="29">"\n---\n"<pos:position pos:line="16" pos:column="38"/></literal></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="40">sizeof<argument_list pos:line="16" pos:column="46">(<argument><expr><literal type="string" pos:line="16" pos:column="47">"\n---\n"<pos:position pos:line="16" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="59"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="19" pos:column="3">int<pos:position pos:line="19" pos:column="6"/></name></type> <name><name pos:line="19" pos:column="7">pipeFd<pos:position pos:line="19" pos:column="13"/></name><index pos:line="19" pos:column="13">[<expr><literal type="number" pos:line="19" pos:column="14">2<pos:position pos:line="19" pos:column="15"/></literal></expr>]<pos:position pos:line="19" pos:column="16"/></index></name></decl>;<pos:position pos:line="19" pos:column="17"/></decl_stmt>

  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><operator pos:line="21" pos:column="7">(<pos:position pos:line="21" pos:column="8"/></operator><name pos:line="21" pos:column="8">flags<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">&amp;<pos:position pos:line="21" pos:column="19"/></operator> <name pos:line="21" pos:column="16">flag_capture<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">)<pos:position pos:line="21" pos:column="29"/></operator> <operator pos:line="21" pos:column="30">&amp;&amp;<pos:position pos:line="21" pos:column="40"/></operator> <call><name pos:line="21" pos:column="33">pipe<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><name pos:line="21" pos:column="38">pipeFd<pos:position pos:line="21" pos:column="44"/></name></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="46"/></condition><then pos:line="21" pos:column="46">
    <block type="pseudo"><throw pos:line="22" pos:column="5">throw <expr><call><name><name pos:line="22" pos:column="11">torrent<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">::<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="20">input_error<pos:position pos:line="22" pos:column="31"/></name></name><argument_list pos:line="22" pos:column="31">(<argument><expr><literal type="string" pos:line="22" pos:column="32">"ExecFile::execute(...) Pipe creation failed."<pos:position pos:line="22" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="80"/></throw></block></then></if>

  <decl_stmt><decl><type><name pos:line="24" pos:column="3">pid_t<pos:position pos:line="24" pos:column="8"/></name></type> <name pos:line="24" pos:column="9">childPid<pos:position pos:line="24" pos:column="17"/></name> <init pos:line="24" pos:column="18">= <expr><call><name pos:line="24" pos:column="20">fork<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">()<pos:position pos:line="24" pos:column="26"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="27"/></decl_stmt>

  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name pos:line="26" pos:column="7">childPid<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">==<pos:position pos:line="26" pos:column="18"/></operator> <operator pos:line="26" pos:column="19">-<pos:position pos:line="26" pos:column="20"/></operator><literal type="number" pos:line="26" pos:column="20">1<pos:position pos:line="26" pos:column="21"/></literal></expr>)<pos:position pos:line="26" pos:column="22"/></condition><then pos:line="26" pos:column="22">
    <block type="pseudo"><throw pos:line="27" pos:column="5">throw <expr><call><name><name pos:line="27" pos:column="11">torrent<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">::<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="20">input_error<pos:position pos:line="27" pos:column="31"/></name></name><argument_list pos:line="27" pos:column="31">(<argument><expr><literal type="string" pos:line="27" pos:column="32">"ExecFile::execute(...) Fork failed."<pos:position pos:line="27" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="71"/></throw></block></then></if>

  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name pos:line="29" pos:column="7">childPid<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">==<pos:position pos:line="29" pos:column="18"/></operator> <literal type="number" pos:line="29" pos:column="19">0<pos:position pos:line="29" pos:column="20"/></literal></expr>)<pos:position pos:line="29" pos:column="21"/></condition><then pos:line="29" pos:column="21"> <block pos:line="29" pos:column="22">{
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">flags<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">&amp;<pos:position pos:line="30" pos:column="20"/></operator> <name pos:line="30" pos:column="17">flag_background<pos:position pos:line="30" pos:column="32"/></name></expr>)<pos:position pos:line="30" pos:column="33"/></condition><then pos:line="30" pos:column="33"> <block pos:line="30" pos:column="34">{
      <decl_stmt><decl><type><name pos:line="31" pos:column="7">pid_t<pos:position pos:line="31" pos:column="12"/></name></type> <name pos:line="31" pos:column="13">detached_pid<pos:position pos:line="31" pos:column="25"/></name> <init pos:line="31" pos:column="26">= <expr><call><name pos:line="31" pos:column="28">fork<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">()<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="35"/></decl_stmt>

      <if pos:line="33" pos:column="7">if <condition pos:line="33" pos:column="10">(<expr><name pos:line="33" pos:column="11">detached_pid<pos:position pos:line="33" pos:column="23"/></name> <operator pos:line="33" pos:column="24">==<pos:position pos:line="33" pos:column="26"/></operator> <operator pos:line="33" pos:column="27">-<pos:position pos:line="33" pos:column="28"/></operator><literal type="number" pos:line="33" pos:column="28">1<pos:position pos:line="33" pos:column="29"/></literal></expr>)<pos:position pos:line="33" pos:column="30"/></condition><then pos:line="33" pos:column="30">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="9">_exit<pos:position pos:line="34" pos:column="14"/></name><argument_list pos:line="34" pos:column="14">(<argument><expr><operator pos:line="34" pos:column="15">-<pos:position pos:line="34" pos:column="16"/></operator><literal type="number" pos:line="34" pos:column="16">1<pos:position pos:line="34" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="19"/></expr_stmt></block></then></if>

      <if pos:line="36" pos:column="7">if <condition pos:line="36" pos:column="10">(<expr><name pos:line="36" pos:column="11">detached_pid<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">!=<pos:position pos:line="36" pos:column="26"/></operator> <literal type="number" pos:line="36" pos:column="27">0<pos:position pos:line="36" pos:column="28"/></literal></expr>)<pos:position pos:line="36" pos:column="29"/></condition><then pos:line="36" pos:column="29"> <block pos:line="36" pos:column="30">{
        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">m_logFd<pos:position pos:line="37" pos:column="20"/></name> <operator pos:line="37" pos:column="21">!=<pos:position pos:line="37" pos:column="23"/></operator> <operator pos:line="37" pos:column="24">-<pos:position pos:line="37" pos:column="25"/></operator><literal type="number" pos:line="37" pos:column="25">1<pos:position pos:line="37" pos:column="26"/></literal></expr>)<pos:position pos:line="37" pos:column="27"/></condition><then pos:line="37" pos:column="27">
          <block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="11">result<pos:position pos:line="38" pos:column="17"/></name> <operator pos:line="38" pos:column="18">=<pos:position pos:line="38" pos:column="19"/></operator> <call><name pos:line="38" pos:column="20">write<pos:position pos:line="38" pos:column="25"/></name><argument_list pos:line="38" pos:column="25">(<argument><expr><name pos:line="38" pos:column="26">m_logFd<pos:position pos:line="38" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="35">"\n--- Background task ---\n"<pos:position pos:line="38" pos:column="64"/></literal></expr></argument>, <argument><expr><sizeof pos:line="38" pos:column="66">sizeof<argument_list pos:line="38" pos:column="72">(<argument><expr><literal type="string" pos:line="38" pos:column="73">"\n--- Background task ---\n"<pos:position pos:line="38" pos:column="102"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="103"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="38" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="105"/></expr_stmt></block></then></if>
        
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">_exit<pos:position pos:line="40" pos:column="14"/></name><argument_list pos:line="40" pos:column="14">(<argument><expr><literal type="number" pos:line="40" pos:column="15">0<pos:position pos:line="40" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="18"/></expr_stmt>
      }<pos:position pos:line="41" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="43" pos:column="7">m_logFd<pos:position pos:line="43" pos:column="14"/></name> <operator pos:line="43" pos:column="15">=<pos:position pos:line="43" pos:column="16"/></operator> <operator pos:line="43" pos:column="17">-<pos:position pos:line="43" pos:column="18"/></operator><literal type="number" pos:line="43" pos:column="18">1<pos:position pos:line="43" pos:column="19"/></literal></expr>;<pos:position pos:line="43" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><name pos:line="44" pos:column="7">flags<pos:position pos:line="44" pos:column="12"/></name> <operator pos:line="44" pos:column="13">&amp;=<pos:position pos:line="44" pos:column="19"/></operator> <operator pos:line="44" pos:column="16">~<pos:position pos:line="44" pos:column="17"/></operator><name pos:line="44" pos:column="17">flag_capture<pos:position pos:line="44" pos:column="29"/></name></expr>;<pos:position pos:line="44" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="47" pos:column="5">int<pos:position pos:line="47" pos:column="8"/></name></type> <name pos:line="47" pos:column="9">devNull<pos:position pos:line="47" pos:column="16"/></name> <init pos:line="47" pos:column="17">= <expr><call><name pos:line="47" pos:column="19">open<pos:position pos:line="47" pos:column="23"/></name><argument_list pos:line="47" pos:column="23">(<argument><expr><literal type="string" pos:line="47" pos:column="24">"/dev/null"<pos:position pos:line="47" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="37">O_RDWR<pos:position pos:line="47" pos:column="43"/></name></expr></argument>)<pos:position pos:line="47" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="47" pos:column="45"/></decl_stmt>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name pos:line="48" pos:column="9">devNull<pos:position pos:line="48" pos:column="16"/></name> <operator pos:line="48" pos:column="17">!=<pos:position pos:line="48" pos:column="19"/></operator> <operator pos:line="48" pos:column="20">-<pos:position pos:line="48" pos:column="21"/></operator><literal type="number" pos:line="48" pos:column="21">1<pos:position pos:line="48" pos:column="22"/></literal></expr>)<pos:position pos:line="48" pos:column="23"/></condition><then pos:line="48" pos:column="23">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="7">dup2<pos:position pos:line="49" pos:column="11"/></name><argument_list pos:line="49" pos:column="11">(<argument><expr><name pos:line="49" pos:column="12">devNull<pos:position pos:line="49" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="21">0<pos:position pos:line="49" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="24"/></expr_stmt></block></then>
    <else pos:line="50" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name><operator pos:line="51" pos:column="7">::<pos:position pos:line="51" pos:column="9"/></operator><name pos:line="51" pos:column="9">close<pos:position pos:line="51" pos:column="14"/></name></name><argument_list pos:line="51" pos:column="14">(<argument><expr><literal type="number" pos:line="51" pos:column="15">0<pos:position pos:line="51" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="18"/></expr_stmt></block></else></if>

    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><name pos:line="53" pos:column="9">flags<pos:position pos:line="53" pos:column="14"/></name> <operator pos:line="53" pos:column="15">&amp;<pos:position pos:line="53" pos:column="20"/></operator> <name pos:line="53" pos:column="17">flag_capture<pos:position pos:line="53" pos:column="29"/></name></expr>)<pos:position pos:line="53" pos:column="30"/></condition><then pos:line="53" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="7">dup2<pos:position pos:line="54" pos:column="11"/></name><argument_list pos:line="54" pos:column="11">(<argument><expr><name><name pos:line="54" pos:column="12">pipeFd<pos:position pos:line="54" pos:column="18"/></name><index pos:line="54" pos:column="18">[<expr><literal type="number" pos:line="54" pos:column="19">1<pos:position pos:line="54" pos:column="20"/></literal></expr>]<pos:position pos:line="54" pos:column="21"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="23">1<pos:position pos:line="54" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="26"/></expr_stmt></block></then>
    <elseif pos:line="55" pos:column="5">else <if pos:line="55" pos:column="10">if <condition pos:line="55" pos:column="13">(<expr><name pos:line="55" pos:column="14">m_logFd<pos:position pos:line="55" pos:column="21"/></name> <operator pos:line="55" pos:column="22">!=<pos:position pos:line="55" pos:column="24"/></operator> <operator pos:line="55" pos:column="25">-<pos:position pos:line="55" pos:column="26"/></operator><literal type="number" pos:line="55" pos:column="26">1<pos:position pos:line="55" pos:column="27"/></literal></expr>)<pos:position pos:line="55" pos:column="28"/></condition><then pos:line="55" pos:column="28">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="7">dup2<pos:position pos:line="56" pos:column="11"/></name><argument_list pos:line="56" pos:column="11">(<argument><expr><name pos:line="56" pos:column="12">m_logFd<pos:position pos:line="56" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="21">1<pos:position pos:line="56" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="24"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="57" pos:column="5">else <if pos:line="57" pos:column="10">if <condition pos:line="57" pos:column="13">(<expr><name pos:line="57" pos:column="14">devNull<pos:position pos:line="57" pos:column="21"/></name> <operator pos:line="57" pos:column="22">!=<pos:position pos:line="57" pos:column="24"/></operator> <operator pos:line="57" pos:column="25">-<pos:position pos:line="57" pos:column="26"/></operator><literal type="number" pos:line="57" pos:column="26">1<pos:position pos:line="57" pos:column="27"/></literal></expr>)<pos:position pos:line="57" pos:column="28"/></condition><then pos:line="57" pos:column="28">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="7">dup2<pos:position pos:line="58" pos:column="11"/></name><argument_list pos:line="58" pos:column="11">(<argument><expr><name pos:line="58" pos:column="12">devNull<pos:position pos:line="58" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="21">1<pos:position pos:line="58" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="24"/></expr_stmt></block></then></if></elseif>
    <else pos:line="59" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name><operator pos:line="60" pos:column="7">::<pos:position pos:line="60" pos:column="9"/></operator><name pos:line="60" pos:column="9">close<pos:position pos:line="60" pos:column="14"/></name></name><argument_list pos:line="60" pos:column="14">(<argument><expr><literal type="number" pos:line="60" pos:column="15">1<pos:position pos:line="60" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="18"/></expr_stmt></block></else></if>

    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><name pos:line="62" pos:column="9">m_logFd<pos:position pos:line="62" pos:column="16"/></name> <operator pos:line="62" pos:column="17">!=<pos:position pos:line="62" pos:column="19"/></operator> <operator pos:line="62" pos:column="20">-<pos:position pos:line="62" pos:column="21"/></operator><literal type="number" pos:line="62" pos:column="21">1<pos:position pos:line="62" pos:column="22"/></literal></expr>)<pos:position pos:line="62" pos:column="23"/></condition><then pos:line="62" pos:column="23">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="7">dup2<pos:position pos:line="63" pos:column="11"/></name><argument_list pos:line="63" pos:column="11">(<argument><expr><name pos:line="63" pos:column="12">m_logFd<pos:position pos:line="63" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="21">2<pos:position pos:line="63" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="24"/></expr_stmt></block></then>
    <elseif pos:line="64" pos:column="5">else <if pos:line="64" pos:column="10">if <condition pos:line="64" pos:column="13">(<expr><name pos:line="64" pos:column="14">devNull<pos:position pos:line="64" pos:column="21"/></name> <operator pos:line="64" pos:column="22">!=<pos:position pos:line="64" pos:column="24"/></operator> <operator pos:line="64" pos:column="25">-<pos:position pos:line="64" pos:column="26"/></operator><literal type="number" pos:line="64" pos:column="26">1<pos:position pos:line="64" pos:column="27"/></literal></expr>)<pos:position pos:line="64" pos:column="28"/></condition><then pos:line="64" pos:column="28">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="7">dup2<pos:position pos:line="65" pos:column="11"/></name><argument_list pos:line="65" pos:column="11">(<argument><expr><name pos:line="65" pos:column="12">devNull<pos:position pos:line="65" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="21">2<pos:position pos:line="65" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="24"/></expr_stmt></block></then></if></elseif>
    <else pos:line="66" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name><operator pos:line="67" pos:column="7">::<pos:position pos:line="67" pos:column="9"/></operator><name pos:line="67" pos:column="9">close<pos:position pos:line="67" pos:column="14"/></name></name><argument_list pos:line="67" pos:column="14">(<argument><expr><literal type="number" pos:line="67" pos:column="15">2<pos:position pos:line="67" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="18"/></expr_stmt></block></else></if>

    <comment type="line" pos:line="69" pos:column="5">// Close all fd's.</comment>
    <for pos:line="70" pos:column="5">for <control pos:line="70" pos:column="9">(<init><decl><type><name pos:line="70" pos:column="10">int<pos:position pos:line="70" pos:column="13"/></name></type> <name pos:line="70" pos:column="14">i<pos:position pos:line="70" pos:column="15"/></name> <init pos:line="70" pos:column="16">= <expr><literal type="number" pos:line="70" pos:column="18">3<pos:position pos:line="70" pos:column="19"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="70" pos:column="21">last<pos:position pos:line="70" pos:column="25"/></name> <init pos:line="70" pos:column="26">= <expr><call><name pos:line="70" pos:column="28">sysconf<pos:position pos:line="70" pos:column="35"/></name><argument_list pos:line="70" pos:column="35">(<argument><expr><name pos:line="70" pos:column="36">_SC_OPEN_MAX<pos:position pos:line="70" pos:column="48"/></name></expr></argument>)<pos:position pos:line="70" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="70" pos:column="50"/></init> <condition><expr><name pos:line="70" pos:column="51">i<pos:position pos:line="70" pos:column="52"/></name> <operator pos:line="70" pos:column="53">!=<pos:position pos:line="70" pos:column="55"/></operator> <name pos:line="70" pos:column="56">last<pos:position pos:line="70" pos:column="60"/></name></expr>;<pos:position pos:line="70" pos:column="61"/></condition> <incr><expr><name pos:line="70" pos:column="62">i<pos:position pos:line="70" pos:column="63"/></name><operator pos:line="70" pos:column="63">++<pos:position pos:line="70" pos:column="65"/></operator></expr></incr>)<pos:position pos:line="70" pos:column="66"/></control>
      <block type="pseudo"><expr_stmt><expr><call><name><operator pos:line="71" pos:column="7">::<pos:position pos:line="71" pos:column="9"/></operator><name pos:line="71" pos:column="9">close<pos:position pos:line="71" pos:column="14"/></name></name><argument_list pos:line="71" pos:column="14">(<argument><expr><name pos:line="71" pos:column="15">i<pos:position pos:line="71" pos:column="16"/></name></expr></argument>)<pos:position pos:line="71" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="18"/></expr_stmt></block></for>

    <decl_stmt><decl><type><name pos:line="73" pos:column="5">int<pos:position pos:line="73" pos:column="8"/></name></type> <name pos:line="73" pos:column="9">result<pos:position pos:line="73" pos:column="15"/></name> <init pos:line="73" pos:column="16">= <expr><call><name pos:line="73" pos:column="18">execvp<pos:position pos:line="73" pos:column="24"/></name><argument_list pos:line="73" pos:column="24">(<argument><expr><name pos:line="73" pos:column="25">file<pos:position pos:line="73" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="31">argv<pos:position pos:line="73" pos:column="35"/></name></expr></argument>)<pos:position pos:line="73" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="73" pos:column="37"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="75" pos:column="5">_exit<pos:position pos:line="75" pos:column="10"/></name><argument_list pos:line="75" pos:column="10">(<argument><expr><name pos:line="75" pos:column="11">result<pos:position pos:line="75" pos:column="17"/></name></expr></argument>)<pos:position pos:line="75" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="76" pos:column="4"/></block></then></if>

  <comment type="line" pos:line="78" pos:column="3">// We yield the global lock when waiting for the executed command to</comment>
  <comment type="line" pos:line="79" pos:column="3">// finish so that XMLRPC and other threads can continue working.</comment>
  <expr_stmt><expr><call><name><name pos:line="80" pos:column="3">ThreadBase<pos:position pos:line="80" pos:column="13"/></name><operator pos:line="80" pos:column="13">::<pos:position pos:line="80" pos:column="15"/></operator><name pos:line="80" pos:column="15">release_global_lock<pos:position pos:line="80" pos:column="34"/></name></name><argument_list pos:line="80" pos:column="34">()<pos:position pos:line="80" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="37"/></expr_stmt>

  <if pos:line="82" pos:column="3">if <condition pos:line="82" pos:column="6">(<expr><name pos:line="82" pos:column="7">flags<pos:position pos:line="82" pos:column="12"/></name> <operator pos:line="82" pos:column="13">&amp;<pos:position pos:line="82" pos:column="18"/></operator> <name pos:line="82" pos:column="15">flag_capture<pos:position pos:line="82" pos:column="27"/></name></expr>)<pos:position pos:line="82" pos:column="28"/></condition><then pos:line="82" pos:column="28"> <block pos:line="82" pos:column="29">{
    <expr_stmt><expr><name pos:line="83" pos:column="5">m_capture<pos:position pos:line="83" pos:column="14"/></name> <operator pos:line="83" pos:column="15">=<pos:position pos:line="83" pos:column="16"/></operator> <call><name><name pos:line="83" pos:column="17">std<pos:position pos:line="83" pos:column="20"/></name><operator pos:line="83" pos:column="20">::<pos:position pos:line="83" pos:column="22"/></operator><name pos:line="83" pos:column="22">string<pos:position pos:line="83" pos:column="28"/></name></name><argument_list pos:line="83" pos:column="28">()<pos:position pos:line="83" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name><operator pos:line="84" pos:column="5">::<pos:position pos:line="84" pos:column="7"/></operator><name pos:line="84" pos:column="7">close<pos:position pos:line="84" pos:column="12"/></name></name><argument_list pos:line="84" pos:column="12">(<argument><expr><name><name pos:line="84" pos:column="13">pipeFd<pos:position pos:line="84" pos:column="19"/></name><index pos:line="84" pos:column="19">[<expr><literal type="number" pos:line="84" pos:column="20">1<pos:position pos:line="84" pos:column="21"/></literal></expr>]<pos:position pos:line="84" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="84" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="24"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="86" pos:column="5">char<pos:position pos:line="86" pos:column="9"/></name></type> <name><name pos:line="86" pos:column="10">buffer<pos:position pos:line="86" pos:column="16"/></name><index pos:line="86" pos:column="16">[<expr><literal type="number" pos:line="86" pos:column="17">4096<pos:position pos:line="86" pos:column="21"/></literal></expr>]<pos:position pos:line="86" pos:column="22"/></index></name></decl>;<pos:position pos:line="86" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="87" pos:column="5">ssize_t<pos:position pos:line="87" pos:column="12"/></name></type> <name pos:line="87" pos:column="13">length<pos:position pos:line="87" pos:column="19"/></name></decl>;<pos:position pos:line="87" pos:column="20"/></decl_stmt>

    <do pos:line="89" pos:column="5">do <block pos:line="89" pos:column="8">{
      <expr_stmt><expr><name pos:line="90" pos:column="7">length<pos:position pos:line="90" pos:column="13"/></name> <operator pos:line="90" pos:column="14">=<pos:position pos:line="90" pos:column="15"/></operator> <call><name pos:line="90" pos:column="16">read<pos:position pos:line="90" pos:column="20"/></name><argument_list pos:line="90" pos:column="20">(<argument><expr><name><name pos:line="90" pos:column="21">pipeFd<pos:position pos:line="90" pos:column="27"/></name><index pos:line="90" pos:column="27">[<expr><literal type="number" pos:line="90" pos:column="28">0<pos:position pos:line="90" pos:column="29"/></literal></expr>]<pos:position pos:line="90" pos:column="30"/></index></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="32">buffer<pos:position pos:line="90" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="90" pos:column="40">sizeof<argument_list pos:line="90" pos:column="46">(<argument><expr><name pos:line="90" pos:column="47">buffer<pos:position pos:line="90" pos:column="53"/></name></expr></argument>)<pos:position pos:line="90" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="90" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="56"/></expr_stmt>

      <if pos:line="92" pos:column="7">if <condition pos:line="92" pos:column="10">(<expr><name pos:line="92" pos:column="11">length<pos:position pos:line="92" pos:column="17"/></name> <operator pos:line="92" pos:column="18">&gt;<pos:position pos:line="92" pos:column="22"/></operator> <literal type="number" pos:line="92" pos:column="20">0<pos:position pos:line="92" pos:column="21"/></literal></expr>)<pos:position pos:line="92" pos:column="22"/></condition><then pos:line="92" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><name pos:line="93" pos:column="9">m_capture<pos:position pos:line="93" pos:column="18"/></name> <operator pos:line="93" pos:column="19">+=<pos:position pos:line="93" pos:column="21"/></operator> <call><name><name pos:line="93" pos:column="22">std<pos:position pos:line="93" pos:column="25"/></name><operator pos:line="93" pos:column="25">::<pos:position pos:line="93" pos:column="27"/></operator><name pos:line="93" pos:column="27">string<pos:position pos:line="93" pos:column="33"/></name></name><argument_list pos:line="93" pos:column="33">(<argument><expr><name pos:line="93" pos:column="34">buffer<pos:position pos:line="93" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="42">length<pos:position pos:line="93" pos:column="48"/></name></expr></argument>)<pos:position pos:line="93" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="50"/></expr_stmt></block></then></if>
    }<pos:position pos:line="94" pos:column="6"/></block> while <condition pos:line="94" pos:column="13">(<expr><name pos:line="94" pos:column="14">length<pos:position pos:line="94" pos:column="20"/></name> <operator pos:line="94" pos:column="21">&gt;<pos:position pos:line="94" pos:column="25"/></operator> <literal type="number" pos:line="94" pos:column="23">0<pos:position pos:line="94" pos:column="24"/></literal></expr>)<pos:position pos:line="94" pos:column="25"/></condition>;<pos:position pos:line="94" pos:column="26"/></do>

    <expr_stmt><expr><call><name><operator pos:line="96" pos:column="5">::<pos:position pos:line="96" pos:column="7"/></operator><name pos:line="96" pos:column="7">close<pos:position pos:line="96" pos:column="12"/></name></name><argument_list pos:line="96" pos:column="12">(<argument><expr><name><name pos:line="96" pos:column="13">pipeFd<pos:position pos:line="96" pos:column="19"/></name><index pos:line="96" pos:column="19">[<expr><literal type="number" pos:line="96" pos:column="20">0<pos:position pos:line="96" pos:column="21"/></literal></expr>]<pos:position pos:line="96" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="96" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="24"/></expr_stmt>

    <if pos:line="98" pos:column="5">if <condition pos:line="98" pos:column="8">(<expr><name pos:line="98" pos:column="9">m_logFd<pos:position pos:line="98" pos:column="16"/></name> <operator pos:line="98" pos:column="17">!=<pos:position pos:line="98" pos:column="19"/></operator> <operator pos:line="98" pos:column="20">-<pos:position pos:line="98" pos:column="21"/></operator><literal type="number" pos:line="98" pos:column="21">1<pos:position pos:line="98" pos:column="22"/></literal></expr>)<pos:position pos:line="98" pos:column="23"/></condition><then pos:line="98" pos:column="23"> <block pos:line="98" pos:column="24">{
      <expr_stmt><expr><name pos:line="99" pos:column="7">result<pos:position pos:line="99" pos:column="13"/></name> <operator pos:line="99" pos:column="14">=<pos:position pos:line="99" pos:column="15"/></operator> <call><name pos:line="99" pos:column="16">write<pos:position pos:line="99" pos:column="21"/></name><argument_list pos:line="99" pos:column="21">(<argument><expr><name pos:line="99" pos:column="22">m_logFd<pos:position pos:line="99" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="31">"Captured output:\n"<pos:position pos:line="99" pos:column="51"/></literal></expr></argument>, <argument><expr><sizeof pos:line="99" pos:column="53">sizeof<argument_list pos:line="99" pos:column="59">(<argument><expr><literal type="string" pos:line="99" pos:column="60">"Captured output:\n"<pos:position pos:line="99" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="81"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="99" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="83"/></expr_stmt>
      <expr_stmt><expr><name pos:line="100" pos:column="7">result<pos:position pos:line="100" pos:column="13"/></name> <operator pos:line="100" pos:column="14">=<pos:position pos:line="100" pos:column="15"/></operator> <call><name pos:line="100" pos:column="16">write<pos:position pos:line="100" pos:column="21"/></name><argument_list pos:line="100" pos:column="21">(<argument><expr><name pos:line="100" pos:column="22">m_logFd<pos:position pos:line="100" pos:column="29"/></name></expr></argument>, <argument><expr><call><name><name pos:line="100" pos:column="31">m_capture<pos:position pos:line="100" pos:column="40"/></name><operator pos:line="100" pos:column="40">.<pos:position pos:line="100" pos:column="41"/></operator><name pos:line="100" pos:column="41">data<pos:position pos:line="100" pos:column="45"/></name></name><argument_list pos:line="100" pos:column="45">()<pos:position pos:line="100" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="100" pos:column="49">m_capture<pos:position pos:line="100" pos:column="58"/></name><operator pos:line="100" pos:column="58">.<pos:position pos:line="100" pos:column="59"/></operator><name pos:line="100" pos:column="59">length<pos:position pos:line="100" pos:column="65"/></name></name><argument_list pos:line="100" pos:column="65">()<pos:position pos:line="100" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="100" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="69"/></expr_stmt>
    }<pos:position pos:line="101" pos:column="6"/></block></then></if>
  }<pos:position pos:line="102" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="104" pos:column="3">int<pos:position pos:line="104" pos:column="6"/></name></type> <name pos:line="104" pos:column="7">status<pos:position pos:line="104" pos:column="13"/></name></decl>;<pos:position pos:line="104" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="105" pos:column="3">int<pos:position pos:line="105" pos:column="6"/></name></type> <name pos:line="105" pos:column="7">wpid<pos:position pos:line="105" pos:column="11"/></name></decl>;<pos:position pos:line="105" pos:column="12"/></decl_stmt>

  <do pos:line="107" pos:column="3">do <block pos:line="107" pos:column="6">{
    <expr_stmt><expr><name pos:line="108" pos:column="5">wpid<pos:position pos:line="108" pos:column="9"/></name> <operator pos:line="108" pos:column="10">=<pos:position pos:line="108" pos:column="11"/></operator> <call><name pos:line="108" pos:column="12">waitpid<pos:position pos:line="108" pos:column="19"/></name><argument_list pos:line="108" pos:column="19">(<argument><expr><name pos:line="108" pos:column="20">childPid<pos:position pos:line="108" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="30">&amp;<pos:position pos:line="108" pos:column="35"/></operator><name pos:line="108" pos:column="31">status<pos:position pos:line="108" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="108" pos:column="39">0<pos:position pos:line="108" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="42"/></expr_stmt>
  }<pos:position pos:line="109" pos:column="4"/></block> while <condition pos:line="109" pos:column="11">(<expr><name pos:line="109" pos:column="12">wpid<pos:position pos:line="109" pos:column="16"/></name> <operator pos:line="109" pos:column="17">==<pos:position pos:line="109" pos:column="19"/></operator> <operator pos:line="109" pos:column="20">-<pos:position pos:line="109" pos:column="21"/></operator><literal type="number" pos:line="109" pos:column="21">1<pos:position pos:line="109" pos:column="22"/></literal> <operator pos:line="109" pos:column="23">&amp;&amp;<pos:position pos:line="109" pos:column="33"/></operator> <call><name><name pos:line="109" pos:column="26">rak<pos:position pos:line="109" pos:column="29"/></name><operator pos:line="109" pos:column="29">::<pos:position pos:line="109" pos:column="31"/></operator><name pos:line="109" pos:column="31">error_number<pos:position pos:line="109" pos:column="43"/></name><operator pos:line="109" pos:column="43">::<pos:position pos:line="109" pos:column="45"/></operator><name pos:line="109" pos:column="45">current<pos:position pos:line="109" pos:column="52"/></name></name><argument_list pos:line="109" pos:column="52">()<pos:position pos:line="109" pos:column="54"/></argument_list></call><operator pos:line="109" pos:column="54">.<pos:position pos:line="109" pos:column="55"/></operator><call><name pos:line="109" pos:column="55">value<pos:position pos:line="109" pos:column="60"/></name><argument_list pos:line="109" pos:column="60">()<pos:position pos:line="109" pos:column="62"/></argument_list></call> <operator pos:line="109" pos:column="63">==<pos:position pos:line="109" pos:column="65"/></operator> <name><name pos:line="109" pos:column="66">rak<pos:position pos:line="109" pos:column="69"/></name><operator pos:line="109" pos:column="69">::<pos:position pos:line="109" pos:column="71"/></operator><name pos:line="109" pos:column="71">error_number<pos:position pos:line="109" pos:column="83"/></name><operator pos:line="109" pos:column="83">::<pos:position pos:line="109" pos:column="85"/></operator><name pos:line="109" pos:column="85">e_intr<pos:position pos:line="109" pos:column="91"/></name></name></expr>)<pos:position pos:line="109" pos:column="92"/></condition>;<pos:position pos:line="109" pos:column="93"/></do>

  <expr_stmt><expr><call><name><name pos:line="111" pos:column="3">ThreadBase<pos:position pos:line="111" pos:column="13"/></name><operator pos:line="111" pos:column="13">::<pos:position pos:line="111" pos:column="15"/></operator><name pos:line="111" pos:column="15">acquire_global_lock<pos:position pos:line="111" pos:column="34"/></name></name><argument_list pos:line="111" pos:column="34">()<pos:position pos:line="111" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="37"/></expr_stmt>

  <if pos:line="113" pos:column="3">if <condition pos:line="113" pos:column="6">(<expr><name pos:line="113" pos:column="7">wpid<pos:position pos:line="113" pos:column="11"/></name> <operator pos:line="113" pos:column="12">!=<pos:position pos:line="113" pos:column="14"/></operator> <name pos:line="113" pos:column="15">childPid<pos:position pos:line="113" pos:column="23"/></name></expr>)<pos:position pos:line="113" pos:column="24"/></condition><then pos:line="113" pos:column="24">
    <block type="pseudo"><throw pos:line="114" pos:column="5">throw <expr><call><name><name pos:line="114" pos:column="11">torrent<pos:position pos:line="114" pos:column="18"/></name><operator pos:line="114" pos:column="18">::<pos:position pos:line="114" pos:column="20"/></operator><name pos:line="114" pos:column="20">internal_error<pos:position pos:line="114" pos:column="34"/></name></name><argument_list pos:line="114" pos:column="34">(<argument><expr><literal type="string" pos:line="114" pos:column="35">"ExecFile::execute(...) waitpid failed."<pos:position pos:line="114" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="77"/></throw></block></then></if>

  <comment type="line" pos:line="116" pos:column="3">// Check return value?</comment>
  <if pos:line="117" pos:column="3">if <condition pos:line="117" pos:column="6">(<expr><name pos:line="117" pos:column="7">m_logFd<pos:position pos:line="117" pos:column="14"/></name> <operator pos:line="117" pos:column="15">!=<pos:position pos:line="117" pos:column="17"/></operator> <operator pos:line="117" pos:column="18">-<pos:position pos:line="117" pos:column="19"/></operator><literal type="number" pos:line="117" pos:column="19">1<pos:position pos:line="117" pos:column="20"/></literal></expr>)<pos:position pos:line="117" pos:column="21"/></condition><then pos:line="117" pos:column="21"> <block pos:line="117" pos:column="22">{
    <if pos:line="118" pos:column="5">if <condition pos:line="118" pos:column="8">(<expr><name pos:line="118" pos:column="9">status<pos:position pos:line="118" pos:column="15"/></name> <operator pos:line="118" pos:column="16">==<pos:position pos:line="118" pos:column="18"/></operator> <literal type="number" pos:line="118" pos:column="19">0<pos:position pos:line="118" pos:column="20"/></literal></expr>)<pos:position pos:line="118" pos:column="21"/></condition><then pos:line="118" pos:column="21">
      <block type="pseudo"><expr_stmt><expr><name pos:line="119" pos:column="7">result<pos:position pos:line="119" pos:column="13"/></name> <operator pos:line="119" pos:column="14">=<pos:position pos:line="119" pos:column="15"/></operator> <call><name pos:line="119" pos:column="16">write<pos:position pos:line="119" pos:column="21"/></name><argument_list pos:line="119" pos:column="21">(<argument><expr><name pos:line="119" pos:column="22">m_logFd<pos:position pos:line="119" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="31">"\n--- Success ---\n"<pos:position pos:line="119" pos:column="52"/></literal></expr></argument>, <argument><expr><sizeof pos:line="119" pos:column="54">sizeof<argument_list pos:line="119" pos:column="60">(<argument><expr><literal type="string" pos:line="119" pos:column="61">"\n--- Success ---\n"<pos:position pos:line="119" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="83"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="119" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="85"/></expr_stmt></block></then>
    <else pos:line="120" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="121" pos:column="7">result<pos:position pos:line="121" pos:column="13"/></name> <operator pos:line="121" pos:column="14">=<pos:position pos:line="121" pos:column="15"/></operator> <call><name pos:line="121" pos:column="16">write<pos:position pos:line="121" pos:column="21"/></name><argument_list pos:line="121" pos:column="21">(<argument><expr><name pos:line="121" pos:column="22">m_logFd<pos:position pos:line="121" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="121" pos:column="31">"\n--- Error ---\n"<pos:position pos:line="121" pos:column="50"/></literal></expr></argument>, <argument><expr><sizeof pos:line="121" pos:column="52">sizeof<argument_list pos:line="121" pos:column="58">(<argument><expr><literal type="string" pos:line="121" pos:column="59">"\n--- Error ---\n"<pos:position pos:line="121" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="79"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="121" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="81"/></expr_stmt></block></else></if>
  }<pos:position pos:line="122" pos:column="4"/></block></then></if>

  <return pos:line="124" pos:column="3">return <expr><name pos:line="124" pos:column="10">status<pos:position pos:line="124" pos:column="16"/></name></expr>;<pos:position pos:line="124" pos:column="17"/></return>
}<pos:position pos:line="125" pos:column="2"/></block></function></unit>
