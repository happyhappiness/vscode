<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_218.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">std<pos:position pos:line="1" pos:column="4"/></name><operator pos:line="1" pos:column="4">::<pos:position pos:line="1" pos:column="6"/></operator><name><name pos:line="1" pos:column="6">pair<pos:position pos:line="1" pos:column="10"/></name><argument_list type="generic" pos:line="1" pos:column="10">&lt;<argument><expr><name><name pos:line="1" pos:column="11">torrent<pos:position pos:line="1" pos:column="18"/></name><operator pos:line="1" pos:column="18">::<pos:position pos:line="1" pos:column="20"/></operator><name pos:line="1" pos:column="20">Object<pos:position pos:line="1" pos:column="26"/></name></name></expr></argument>, <argument><expr><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name><modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></expr></argument>&gt;<pos:position pos:line="1" pos:column="43"/></argument_list></name></name></type>
<name pos:line="2" pos:column="1">parse_command<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name><name pos:line="2" pos:column="15">core<pos:position pos:line="2" pos:column="19"/></name><operator pos:line="2" pos:column="19">::<pos:position pos:line="2" pos:column="21"/></operator><name pos:line="2" pos:column="21">Download<pos:position pos:line="2" pos:column="29"/></name></name><modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type> <name pos:line="2" pos:column="31">download<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">char<pos:position pos:line="2" pos:column="51"/></name><modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type> <name pos:line="2" pos:column="53">first<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="60">const<pos:position pos:line="2" pos:column="65"/></specifier> <name pos:line="2" pos:column="66">char<pos:position pos:line="2" pos:column="70"/></name><modifier pos:line="2" pos:column="70">*<pos:position pos:line="2" pos:column="71"/></modifier></type> <name pos:line="2" pos:column="72">last<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="77"/></parameter_list> <block pos:line="2" pos:column="78">{
  <expr_stmt><expr><name pos:line="3" pos:column="3">first<pos:position pos:line="3" pos:column="8"/></name> <operator pos:line="3" pos:column="9">=<pos:position pos:line="3" pos:column="10"/></operator> <call><name><name pos:line="3" pos:column="11">std<pos:position pos:line="3" pos:column="14"/></name><operator pos:line="3" pos:column="14">::<pos:position pos:line="3" pos:column="16"/></operator><name pos:line="3" pos:column="16">find_if<pos:position pos:line="3" pos:column="23"/></name></name><argument_list pos:line="3" pos:column="23">(<argument><expr><name pos:line="3" pos:column="24">first<pos:position pos:line="3" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="31">last<pos:position pos:line="3" pos:column="35"/></name></expr></argument>, <argument><expr><call><name><name pos:line="3" pos:column="37">std<pos:position pos:line="3" pos:column="40"/></name><operator pos:line="3" pos:column="40">::<pos:position pos:line="3" pos:column="42"/></operator><name pos:line="3" pos:column="42">not1<pos:position pos:line="3" pos:column="46"/></name></name><argument_list pos:line="3" pos:column="46">(<argument><expr><call><name pos:line="3" pos:column="47">command_map_is_space<pos:position pos:line="3" pos:column="67"/></name><argument_list pos:line="3" pos:column="67">()<pos:position pos:line="3" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="72"/></expr_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">first<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">==<pos:position pos:line="5" pos:column="15"/></operator> <name pos:line="5" pos:column="16">last<pos:position pos:line="5" pos:column="20"/></name> <operator pos:line="5" pos:column="21">||<pos:position pos:line="5" pos:column="23"/></operator> <operator pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="25">first<pos:position pos:line="5" pos:column="30"/></name> <operator pos:line="5" pos:column="31">==<pos:position pos:line="5" pos:column="33"/></operator> <literal type="char" pos:line="5" pos:column="34">'#'<pos:position pos:line="5" pos:column="37"/></literal></expr>)<pos:position pos:line="5" pos:column="38"/></condition><then pos:line="5" pos:column="38">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><call><name><name pos:line="6" pos:column="12">std<pos:position pos:line="6" pos:column="15"/></name><operator pos:line="6" pos:column="15">::<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">make_pair<pos:position pos:line="6" pos:column="26"/></name></name><argument_list pos:line="6" pos:column="26">(<argument><expr><call><name><name pos:line="6" pos:column="27">torrent<pos:position pos:line="6" pos:column="34"/></name><operator pos:line="6" pos:column="34">::<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="36">Object<pos:position pos:line="6" pos:column="42"/></name></name><argument_list pos:line="6" pos:column="42">()<pos:position pos:line="6" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="6" pos:column="46">first<pos:position pos:line="6" pos:column="51"/></name></expr></argument>)<pos:position pos:line="6" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="53"/></return></block></then></if>
  
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">std<pos:position pos:line="8" pos:column="6"/></name><operator pos:line="8" pos:column="6">::<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">string<pos:position pos:line="8" pos:column="14"/></name></name></type> <name pos:line="8" pos:column="15">key<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
  <expr_stmt><expr><name pos:line="9" pos:column="3">first<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <call><name pos:line="9" pos:column="11">parse_command_name<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">first<pos:position pos:line="9" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="37">last<pos:position pos:line="9" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="43">&amp;<pos:position pos:line="9" pos:column="48"/></operator><name pos:line="9" pos:column="44">key<pos:position pos:line="9" pos:column="47"/></name></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">first<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">=<pos:position pos:line="10" pos:column="10"/></operator> <call><name><name pos:line="10" pos:column="11">std<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">::<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">find_if<pos:position pos:line="10" pos:column="23"/></name></name><argument_list pos:line="10" pos:column="23">(<argument><expr><name pos:line="10" pos:column="24">first<pos:position pos:line="10" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="31">last<pos:position pos:line="10" pos:column="35"/></name></expr></argument>, <argument><expr><call><name><name pos:line="10" pos:column="37">std<pos:position pos:line="10" pos:column="40"/></name><operator pos:line="10" pos:column="40">::<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="42">not1<pos:position pos:line="10" pos:column="46"/></name></name><argument_list pos:line="10" pos:column="46">(<argument><expr><call><name pos:line="10" pos:column="47">command_map_is_space<pos:position pos:line="10" pos:column="67"/></name><argument_list pos:line="10" pos:column="67">()<pos:position pos:line="10" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="72"/></expr_stmt>
  
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">first<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">==<pos:position pos:line="12" pos:column="15"/></operator> <name pos:line="12" pos:column="16">last<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">||<pos:position pos:line="12" pos:column="23"/></operator> <operator pos:line="12" pos:column="24">*<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="25">first<pos:position pos:line="12" pos:column="30"/></name> <operator pos:line="12" pos:column="31">!=<pos:position pos:line="12" pos:column="33"/></operator> <literal type="char" pos:line="12" pos:column="34">'='<pos:position pos:line="12" pos:column="37"/></literal></expr>)<pos:position pos:line="12" pos:column="38"/></condition><then pos:line="12" pos:column="38">
    <block type="pseudo"><throw pos:line="13" pos:column="5">throw <expr><call><name><name pos:line="13" pos:column="11">torrent<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">::<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">input_error<pos:position pos:line="13" pos:column="31"/></name></name><argument_list pos:line="13" pos:column="31">(<argument><expr><literal type="string" pos:line="13" pos:column="32">"Could not find '='."<pos:position pos:line="13" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="55"/></throw></block></then></if>

  <decl_stmt><decl><type><name><name pos:line="15" pos:column="3">torrent<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">::<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="12">Object<pos:position pos:line="15" pos:column="18"/></name></name></type> <name pos:line="15" pos:column="19">args<pos:position pos:line="15" pos:column="23"/></name></decl>;<pos:position pos:line="15" pos:column="24"/></decl_stmt>
  <expr_stmt><expr><name pos:line="16" pos:column="3">first<pos:position pos:line="16" pos:column="8"/></name> <operator pos:line="16" pos:column="9">=<pos:position pos:line="16" pos:column="10"/></operator> <call><name pos:line="16" pos:column="11">parse_whole_list<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">first<pos:position pos:line="16" pos:column="33"/></name> <operator pos:line="16" pos:column="34">+<pos:position pos:line="16" pos:column="35"/></operator> <literal type="number" pos:line="16" pos:column="36">1<pos:position pos:line="16" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="39">last<pos:position pos:line="16" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="45">&amp;<pos:position pos:line="16" pos:column="50"/></operator><name pos:line="16" pos:column="46">args<pos:position pos:line="16" pos:column="50"/></name></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="52"/></expr_stmt>

  <comment type="line" pos:line="18" pos:column="3">// Find the last character that is part of this command, skipping</comment>
  <comment type="line" pos:line="19" pos:column="3">// the whitespace at the end. This ensures us that the caller</comment>
  <comment type="line" pos:line="20" pos:column="3">// doesn't need to do this nor check for junk at the end.</comment>
  <expr_stmt><expr><name pos:line="21" pos:column="3">first<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">=<pos:position pos:line="21" pos:column="10"/></operator> <call><name><name pos:line="21" pos:column="11">std<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">::<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="16">find_if<pos:position pos:line="21" pos:column="23"/></name></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">first<pos:position pos:line="21" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="31">last<pos:position pos:line="21" pos:column="35"/></name></expr></argument>, <argument><expr><call><name><name pos:line="21" pos:column="37">std<pos:position pos:line="21" pos:column="40"/></name><operator pos:line="21" pos:column="40">::<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="42">not1<pos:position pos:line="21" pos:column="46"/></name></name><argument_list pos:line="21" pos:column="46">(<argument><expr><call><name pos:line="21" pos:column="47">command_map_is_space<pos:position pos:line="21" pos:column="67"/></name><argument_list pos:line="21" pos:column="67">()<pos:position pos:line="21" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="72"/></expr_stmt>
  
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name pos:line="23" pos:column="7">first<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">!=<pos:position pos:line="23" pos:column="15"/></operator> <name pos:line="23" pos:column="16">last<pos:position pos:line="23" pos:column="20"/></name></expr>)<pos:position pos:line="23" pos:column="21"/></condition><then pos:line="23" pos:column="21"> <block pos:line="23" pos:column="22">{
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><operator pos:line="24" pos:column="9">*<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">first<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">!=<pos:position pos:line="24" pos:column="18"/></operator> <literal type="char" pos:line="24" pos:column="19">'\n'<pos:position pos:line="24" pos:column="23"/></literal> <operator pos:line="24" pos:column="24">&amp;&amp;<pos:position pos:line="24" pos:column="34"/></operator> <operator pos:line="24" pos:column="27">*<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="28">first<pos:position pos:line="24" pos:column="33"/></name> <operator pos:line="24" pos:column="34">!=<pos:position pos:line="24" pos:column="36"/></operator> <literal type="char" pos:line="24" pos:column="37">';'<pos:position pos:line="24" pos:column="40"/></literal> <operator pos:line="24" pos:column="41">&amp;&amp;<pos:position pos:line="24" pos:column="51"/></operator> <operator pos:line="24" pos:column="44">*<pos:position pos:line="24" pos:column="45"/></operator><name pos:line="24" pos:column="45">first<pos:position pos:line="24" pos:column="50"/></name> <operator pos:line="24" pos:column="51">!=<pos:position pos:line="24" pos:column="53"/></operator> <literal type="char" pos:line="24" pos:column="54">'\0'<pos:position pos:line="24" pos:column="58"/></literal></expr>)<pos:position pos:line="24" pos:column="59"/></condition><then pos:line="24" pos:column="59">
      <block type="pseudo"><throw pos:line="25" pos:column="7">throw <expr><call><name><name pos:line="25" pos:column="13">torrent<pos:position pos:line="25" pos:column="20"/></name><operator pos:line="25" pos:column="20">::<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">input_error<pos:position pos:line="25" pos:column="33"/></name></name><argument_list pos:line="25" pos:column="33">(<argument><expr><literal type="string" pos:line="25" pos:column="34">"Junk at end of input."<pos:position pos:line="25" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="59"/></throw></block></then></if>

    <expr_stmt><expr><name pos:line="27" pos:column="5">first<pos:position pos:line="27" pos:column="10"/></name><operator pos:line="27" pos:column="10">++<pos:position pos:line="27" pos:column="12"/></operator></expr>;<pos:position pos:line="27" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>

  <comment type="line" pos:line="30" pos:column="3">// Replace any strings starting with '$' with the result of the</comment>
  <comment type="line" pos:line="31" pos:column="3">// following command.</comment>
  <expr_stmt><expr><call><name pos:line="32" pos:column="3">parse_command_execute<pos:position pos:line="32" pos:column="24"/></name><argument_list pos:line="32" pos:column="24">(<argument><expr><name pos:line="32" pos:column="25">download<pos:position pos:line="32" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="35">&amp;<pos:position pos:line="32" pos:column="40"/></operator><name pos:line="32" pos:column="36">args<pos:position pos:line="32" pos:column="40"/></name></expr></argument>)<pos:position pos:line="32" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="42"/></expr_stmt>

  <return pos:line="34" pos:column="3">return <expr><call><name><name pos:line="34" pos:column="10">std<pos:position pos:line="34" pos:column="13"/></name><operator pos:line="34" pos:column="13">::<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="15">make_pair<pos:position pos:line="34" pos:column="24"/></name></name><argument_list pos:line="34" pos:column="24">(<argument><expr><call><name><name pos:line="34" pos:column="25">commands<pos:position pos:line="34" pos:column="33"/></name><operator pos:line="34" pos:column="33">.<pos:position pos:line="34" pos:column="34"/></operator><name pos:line="34" pos:column="34">call_command_d<pos:position pos:line="34" pos:column="48"/></name></name><argument_list pos:line="34" pos:column="48">(<argument><expr><call><name><name pos:line="34" pos:column="49">key<pos:position pos:line="34" pos:column="52"/></name><operator pos:line="34" pos:column="52">.<pos:position pos:line="34" pos:column="53"/></operator><name pos:line="34" pos:column="53">c_str<pos:position pos:line="34" pos:column="58"/></name></name><argument_list pos:line="34" pos:column="58">()<pos:position pos:line="34" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="34" pos:column="62">download<pos:position pos:line="34" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="72">args<pos:position pos:line="34" pos:column="76"/></name></expr></argument>)<pos:position pos:line="34" pos:column="77"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="34" pos:column="79">first<pos:position pos:line="34" pos:column="84"/></name></expr></argument>)<pos:position pos:line="34" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="86"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
