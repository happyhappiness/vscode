<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_184.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name><modifier pos:line="1" pos:column="5">*<pos:position pos:line="1" pos:column="6"/></modifier></type>
<name pos:line="2" pos:column="1">print_object<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">char<pos:position pos:line="2" pos:column="18"/></name><modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type> <name pos:line="2" pos:column="20">first<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="27">char<pos:position pos:line="2" pos:column="31"/></name><modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type> <name pos:line="2" pos:column="33">last<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <name><name pos:line="2" pos:column="45">torrent<pos:position pos:line="2" pos:column="52"/></name><operator pos:line="2" pos:column="52">::<pos:position pos:line="2" pos:column="54"/></operator><name pos:line="2" pos:column="54">Object<pos:position pos:line="2" pos:column="60"/></name></name><modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type> <name pos:line="2" pos:column="62">src<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="67">int<pos:position pos:line="2" pos:column="70"/></name></type> <name pos:line="2" pos:column="71">flags<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="77"/></parameter_list> <block pos:line="2" pos:column="78">{
  <switch pos:line="3" pos:column="3">switch <condition pos:line="3" pos:column="10">(<expr><call><name><name pos:line="3" pos:column="11">src<pos:position pos:line="3" pos:column="14"/></name><operator pos:line="3" pos:column="14">-&gt;<pos:position pos:line="3" pos:column="19"/></operator><name pos:line="3" pos:column="16">type<pos:position pos:line="3" pos:column="20"/></name></name><argument_list pos:line="3" pos:column="20">()<pos:position pos:line="3" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="23"/></condition> <block pos:line="3" pos:column="24">{
  <case pos:line="4" pos:column="3">case <expr><name><name pos:line="4" pos:column="8">torrent<pos:position pos:line="4" pos:column="15"/></name><operator pos:line="4" pos:column="15">::<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">Object<pos:position pos:line="4" pos:column="23"/></name><operator pos:line="4" pos:column="23">::<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">TYPE_STRING<pos:position pos:line="4" pos:column="36"/></name></name></expr>:<pos:position pos:line="4" pos:column="37"/></case>
  <block pos:line="5" pos:column="3">{
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name><name pos:line="6" pos:column="11">std<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">::<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="16">string<pos:position pos:line="6" pos:column="22"/></name></name><modifier pos:line="6" pos:column="22">&amp;<pos:position pos:line="6" pos:column="27"/></modifier></type> <name pos:line="6" pos:column="24">str<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><call><name><name pos:line="6" pos:column="30">src<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">-&gt;<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="35">as_string<pos:position pos:line="6" pos:column="44"/></name></name><argument_list pos:line="6" pos:column="44">()<pos:position pos:line="6" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="47"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">(<pos:position pos:line="8" pos:column="10"/></operator><name pos:line="8" pos:column="10">flags<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">&amp;<pos:position pos:line="8" pos:column="21"/></operator> <name pos:line="8" pos:column="18">print_expand_tilde<pos:position pos:line="8" pos:column="36"/></name><operator pos:line="8" pos:column="36">)<pos:position pos:line="8" pos:column="37"/></operator> <operator pos:line="8" pos:column="38">&amp;&amp;<pos:position pos:line="8" pos:column="48"/></operator> <operator pos:line="8" pos:column="41">*<pos:position pos:line="8" pos:column="42"/></operator><call><name><name pos:line="8" pos:column="42">str<pos:position pos:line="8" pos:column="45"/></name><operator pos:line="8" pos:column="45">.<pos:position pos:line="8" pos:column="46"/></operator><name pos:line="8" pos:column="46">c_str<pos:position pos:line="8" pos:column="51"/></name></name><argument_list pos:line="8" pos:column="51">()<pos:position pos:line="8" pos:column="53"/></argument_list></call> <operator pos:line="8" pos:column="54">==<pos:position pos:line="8" pos:column="56"/></operator> <literal type="char" pos:line="8" pos:column="57">'~'<pos:position pos:line="8" pos:column="60"/></literal></expr>)<pos:position pos:line="8" pos:column="61"/></condition><then pos:line="8" pos:column="61"> <block pos:line="8" pos:column="62">{
      <return pos:line="9" pos:column="7">return <expr><call><name><name pos:line="9" pos:column="14">rak<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">::<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">path_expand<pos:position pos:line="9" pos:column="30"/></name></name><argument_list pos:line="9" pos:column="30">(<argument><expr><call><name><name pos:line="9" pos:column="31">str<pos:position pos:line="9" pos:column="34"/></name><operator pos:line="9" pos:column="34">.<pos:position pos:line="9" pos:column="35"/></operator><name pos:line="9" pos:column="35">c_str<pos:position pos:line="9" pos:column="40"/></name></name><argument_list pos:line="9" pos:column="40">()<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="9" pos:column="44">first<pos:position pos:line="9" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="51">last<pos:position pos:line="9" pos:column="55"/></name></expr></argument>)<pos:position pos:line="9" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="57"/></return>

    }<pos:position pos:line="11" pos:column="6"/></block></then> <else pos:line="11" pos:column="7">else <block pos:line="11" pos:column="12">{
      <if pos:line="12" pos:column="7">if <condition pos:line="12" pos:column="10">(<expr><name pos:line="12" pos:column="11">first<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">==<pos:position pos:line="12" pos:column="19"/></operator> <name pos:line="12" pos:column="20">last<pos:position pos:line="12" pos:column="24"/></name></expr>)<pos:position pos:line="12" pos:column="25"/></condition><then pos:line="12" pos:column="25">
        <block type="pseudo"><return pos:line="13" pos:column="9">return <expr><name pos:line="13" pos:column="16">first<pos:position pos:line="13" pos:column="21"/></name></expr>;<pos:position pos:line="13" pos:column="22"/></return></block></then></if>

      <decl_stmt><decl><type><name pos:line="15" pos:column="7">size_t<pos:position pos:line="15" pos:column="13"/></name></type> <name pos:line="15" pos:column="14">n<pos:position pos:line="15" pos:column="15"/></name> <init pos:line="15" pos:column="16">= <expr><call><name><name pos:line="15" pos:column="18">std<pos:position pos:line="15" pos:column="21"/></name><operator pos:line="15" pos:column="21">::<pos:position pos:line="15" pos:column="23"/></operator><name><name pos:line="15" pos:column="23">min<pos:position pos:line="15" pos:column="26"/></name><argument_list type="generic" pos:line="15" pos:column="26">&lt;<argument><expr><name pos:line="15" pos:column="27">size_t<pos:position pos:line="15" pos:column="33"/></name></expr></argument>&gt;<pos:position pos:line="15" pos:column="37"/></argument_list></name></name><argument_list pos:line="15" pos:column="34">(<argument><expr><call><name><name pos:line="15" pos:column="35">str<pos:position pos:line="15" pos:column="38"/></name><operator pos:line="15" pos:column="38">.<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="39">size<pos:position pos:line="15" pos:column="43"/></name></name><argument_list pos:line="15" pos:column="43">()<pos:position pos:line="15" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="15" pos:column="47">std<pos:position pos:line="15" pos:column="50"/></name><operator pos:line="15" pos:column="50">::<pos:position pos:line="15" pos:column="52"/></operator><name pos:line="15" pos:column="52">distance<pos:position pos:line="15" pos:column="60"/></name></name><argument_list pos:line="15" pos:column="60">(<argument><expr><name pos:line="15" pos:column="61">first<pos:position pos:line="15" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="68">last<pos:position pos:line="15" pos:column="72"/></name></expr></argument>)<pos:position pos:line="15" pos:column="73"/></argument_list></call> <operator pos:line="15" pos:column="74">-<pos:position pos:line="15" pos:column="75"/></operator> <literal type="number" pos:line="15" pos:column="76">1<pos:position pos:line="15" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="79"/></decl_stmt>

      <expr_stmt><expr><call><name><name pos:line="17" pos:column="7">std<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">::<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="12">memcpy<pos:position pos:line="17" pos:column="18"/></name></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">first<pos:position pos:line="17" pos:column="24"/></name></expr></argument>, <argument><expr><call><name><name pos:line="17" pos:column="26">str<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">.<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="30">c_str<pos:position pos:line="17" pos:column="35"/></name></name><argument_list pos:line="17" pos:column="35">()<pos:position pos:line="17" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="17" pos:column="39">n<pos:position pos:line="17" pos:column="40"/></name></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="18" pos:column="7">*<pos:position pos:line="18" pos:column="8"/></operator><operator pos:line="18" pos:column="8">(<pos:position pos:line="18" pos:column="9"/></operator><name pos:line="18" pos:column="9">first<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">+=<pos:position pos:line="18" pos:column="17"/></operator> <name pos:line="18" pos:column="18">n<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">)<pos:position pos:line="18" pos:column="20"/></operator> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <literal type="char" pos:line="18" pos:column="23">'\0'<pos:position pos:line="18" pos:column="27"/></literal></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt>

      <return pos:line="20" pos:column="7">return <expr><name pos:line="20" pos:column="14">first<pos:position pos:line="20" pos:column="19"/></name></expr>;<pos:position pos:line="20" pos:column="20"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></else></if>
  }<pos:position pos:line="22" pos:column="4"/></block>
  <case pos:line="23" pos:column="3">case <expr><name><name pos:line="23" pos:column="8">torrent<pos:position pos:line="23" pos:column="15"/></name><operator pos:line="23" pos:column="15">::<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="17">Object<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">::<pos:position pos:line="23" pos:column="25"/></operator><name pos:line="23" pos:column="25">TYPE_VALUE<pos:position pos:line="23" pos:column="35"/></name></name></expr>:<pos:position pos:line="23" pos:column="36"/></case>
    <return pos:line="24" pos:column="5">return <expr><call><name><name pos:line="24" pos:column="12">std<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">::<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="17">max<pos:position pos:line="24" pos:column="20"/></name></name><argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">first<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">+<pos:position pos:line="24" pos:column="28"/></operator> <call><name pos:line="24" pos:column="29">snprintf<pos:position pos:line="24" pos:column="37"/></name><argument_list pos:line="24" pos:column="37">(<argument><expr><name pos:line="24" pos:column="38">first<pos:position pos:line="24" pos:column="43"/></name></expr></argument>, <argument><expr><call><name><name pos:line="24" pos:column="45">std<pos:position pos:line="24" pos:column="48"/></name><operator pos:line="24" pos:column="48">::<pos:position pos:line="24" pos:column="50"/></operator><name pos:line="24" pos:column="50">distance<pos:position pos:line="24" pos:column="58"/></name></name><argument_list pos:line="24" pos:column="58">(<argument><expr><name pos:line="24" pos:column="59">first<pos:position pos:line="24" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="66">last<pos:position pos:line="24" pos:column="70"/></name></expr></argument>)<pos:position pos:line="24" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="73">"%lli"<pos:position pos:line="24" pos:column="79"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="24" pos:column="81">src<pos:position pos:line="24" pos:column="84"/></name><operator pos:line="24" pos:column="84">-&gt;<pos:position pos:line="24" pos:column="89"/></operator><name pos:line="24" pos:column="86">as_value<pos:position pos:line="24" pos:column="94"/></name></name><argument_list pos:line="24" pos:column="94">()<pos:position pos:line="24" pos:column="96"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="97"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="24" pos:column="99">last<pos:position pos:line="24" pos:column="103"/></name></expr></argument>)<pos:position pos:line="24" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="105"/></return>

  <case pos:line="26" pos:column="3">case <expr><name><name pos:line="26" pos:column="8">torrent<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">::<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="17">Object<pos:position pos:line="26" pos:column="23"/></name><operator pos:line="26" pos:column="23">::<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="25">TYPE_LIST<pos:position pos:line="26" pos:column="34"/></name></name></expr>:<pos:position pos:line="26" pos:column="35"/></case>
    <for pos:line="27" pos:column="5">for <control pos:line="27" pos:column="9">(<init><decl><type><name><name pos:line="27" pos:column="10">torrent<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">::<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="19">Object<pos:position pos:line="27" pos:column="25"/></name><operator pos:line="27" pos:column="25">::<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="27">list_type<pos:position pos:line="27" pos:column="36"/></name><operator pos:line="27" pos:column="36">::<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="38">const_iterator<pos:position pos:line="27" pos:column="52"/></name></name></type> <name pos:line="27" pos:column="53">itr<pos:position pos:line="27" pos:column="56"/></name> <init pos:line="27" pos:column="57">= <expr><call><name><name pos:line="27" pos:column="59">src<pos:position pos:line="27" pos:column="62"/></name><operator pos:line="27" pos:column="62">-&gt;<pos:position pos:line="27" pos:column="67"/></operator><name pos:line="27" pos:column="64">as_list<pos:position pos:line="27" pos:column="71"/></name></name><argument_list pos:line="27" pos:column="71">()<pos:position pos:line="27" pos:column="73"/></argument_list></call><operator pos:line="27" pos:column="73">.<pos:position pos:line="27" pos:column="74"/></operator><call><name pos:line="27" pos:column="74">begin<pos:position pos:line="27" pos:column="79"/></name><argument_list pos:line="27" pos:column="79">()<pos:position pos:line="27" pos:column="81"/></argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name pos:line="27" pos:column="83">itrEnd<pos:position pos:line="27" pos:column="89"/></name> <init pos:line="27" pos:column="90">= <expr><call><name><name pos:line="27" pos:column="92">src<pos:position pos:line="27" pos:column="95"/></name><operator pos:line="27" pos:column="95">-&gt;<pos:position pos:line="27" pos:column="100"/></operator><name pos:line="27" pos:column="97">as_list<pos:position pos:line="27" pos:column="104"/></name></name><argument_list pos:line="27" pos:column="104">()<pos:position pos:line="27" pos:column="106"/></argument_list></call><operator pos:line="27" pos:column="106">.<pos:position pos:line="27" pos:column="107"/></operator><call><name pos:line="27" pos:column="107">end<pos:position pos:line="27" pos:column="110"/></name><argument_list pos:line="27" pos:column="110">()<pos:position pos:line="27" pos:column="112"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="113"/></init> <condition><expr><name pos:line="27" pos:column="114">itr<pos:position pos:line="27" pos:column="117"/></name> <operator pos:line="27" pos:column="118">!=<pos:position pos:line="27" pos:column="120"/></operator> <name pos:line="27" pos:column="121">itrEnd<pos:position pos:line="27" pos:column="127"/></name></expr>;<pos:position pos:line="27" pos:column="128"/></condition> <incr><expr><name pos:line="27" pos:column="129">itr<pos:position pos:line="27" pos:column="132"/></name><operator pos:line="27" pos:column="132">++<pos:position pos:line="27" pos:column="134"/></operator></expr></incr>)<pos:position pos:line="27" pos:column="135"/></control> <block pos:line="27" pos:column="136">{
      <expr_stmt><expr><name pos:line="28" pos:column="7">first<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">=<pos:position pos:line="28" pos:column="14"/></operator> <call><name pos:line="28" pos:column="15">print_object<pos:position pos:line="28" pos:column="27"/></name><argument_list pos:line="28" pos:column="27">(<argument><expr><name pos:line="28" pos:column="28">first<pos:position pos:line="28" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="35">last<pos:position pos:line="28" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="41">&amp;<pos:position pos:line="28" pos:column="46"/></operator><operator pos:line="28" pos:column="42">*<pos:position pos:line="28" pos:column="43"/></operator><name pos:line="28" pos:column="43">itr<pos:position pos:line="28" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="48">flags<pos:position pos:line="28" pos:column="53"/></name></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="55"/></expr_stmt>

      <comment type="line" pos:line="30" pos:column="7">// Don't expand tilde after the first element in the list.</comment>
      <expr_stmt><expr><name pos:line="31" pos:column="7">flags<pos:position pos:line="31" pos:column="12"/></name> <operator pos:line="31" pos:column="13">&amp;=<pos:position pos:line="31" pos:column="19"/></operator> <operator pos:line="31" pos:column="16">~<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="17">print_expand_tilde<pos:position pos:line="31" pos:column="35"/></name></expr>;<pos:position pos:line="31" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></for>

    <return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">first<pos:position pos:line="34" pos:column="17"/></name></expr>;<pos:position pos:line="34" pos:column="18"/></return>

  <default pos:line="36" pos:column="3">default:<pos:position pos:line="36" pos:column="11"/></default>
    <throw pos:line="37" pos:column="5">throw <expr><call><name><name pos:line="37" pos:column="11">torrent<pos:position pos:line="37" pos:column="18"/></name><operator pos:line="37" pos:column="18">::<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="20">input_error<pos:position pos:line="37" pos:column="31"/></name></name><argument_list pos:line="37" pos:column="31">(<argument><expr><literal type="string" pos:line="37" pos:column="32">"Invalid type."<pos:position pos:line="37" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="49"/></throw>
  }<pos:position pos:line="38" pos:column="4"/></block></switch>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
