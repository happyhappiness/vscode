<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_function_295.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">ExecFile<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">execute<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name><modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type> <name pos:line="2" pos:column="31">file<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name><modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier> <specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier><modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type> <name pos:line="2" pos:column="50">argv<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list> <block pos:line="2" pos:column="56">{
  <comment type="line" pos:line="3" pos:column="3">// Write the execued command and its parameters to the log fd.</comment>
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name pos:line="4" pos:column="7">m_logFd<pos:position pos:line="4" pos:column="14"/></name> <operator pos:line="4" pos:column="15">!=<pos:position pos:line="4" pos:column="17"/></operator> <operator pos:line="4" pos:column="18">-<pos:position pos:line="4" pos:column="19"/></operator><literal type="number" pos:line="4" pos:column="19">1<pos:position pos:line="4" pos:column="20"/></literal></expr>)<pos:position pos:line="4" pos:column="21"/></condition><then pos:line="4" pos:column="21"> <block pos:line="4" pos:column="22">{
    <for pos:line="5" pos:column="5">for <control pos:line="5" pos:column="9">(<init><decl><type><name pos:line="5" pos:column="10">char<pos:position pos:line="5" pos:column="14"/></name><modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier> <specifier pos:line="5" pos:column="16">const<pos:position pos:line="5" pos:column="21"/></specifier><modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type> <name pos:line="5" pos:column="23">itr<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name pos:line="5" pos:column="29">argv<pos:position pos:line="5" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></init> <condition><expr><operator pos:line="5" pos:column="35">*<pos:position pos:line="5" pos:column="36"/></operator><name pos:line="5" pos:column="36">itr<pos:position pos:line="5" pos:column="39"/></name> <operator pos:line="5" pos:column="40">!=<pos:position pos:line="5" pos:column="42"/></operator> <name pos:line="5" pos:column="43">NULL<pos:position pos:line="5" pos:column="47"/></name></expr>;<pos:position pos:line="5" pos:column="48"/></condition> <incr><expr><name pos:line="5" pos:column="49">itr<pos:position pos:line="5" pos:column="52"/></name><operator pos:line="5" pos:column="52">++<pos:position pos:line="5" pos:column="54"/></operator></expr></incr>)<pos:position pos:line="5" pos:column="55"/></control> <block pos:line="5" pos:column="56">{
      <if pos:line="6" pos:column="7">if <condition pos:line="6" pos:column="10">(<expr><name pos:line="6" pos:column="11">itr<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">==<pos:position pos:line="6" pos:column="17"/></operator> <name pos:line="6" pos:column="18">argv<pos:position pos:line="6" pos:column="22"/></name></expr>)<pos:position pos:line="6" pos:column="23"/></condition><then pos:line="6" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="9">write<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><name pos:line="7" pos:column="15">m_logFd<pos:position pos:line="7" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="24">"\n---\n"<pos:position pos:line="7" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="35">sizeof<argument_list pos:line="7" pos:column="41">(<argument><expr><literal type="string" pos:line="7" pos:column="42">"\n---\n"<pos:position pos:line="7" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="54"/></expr_stmt></block></then>
      <else pos:line="8" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="9">write<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><name pos:line="9" pos:column="15">m_logFd<pos:position pos:line="9" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="24">" "<pos:position pos:line="9" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="29">1<pos:position pos:line="9" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt></block></else></if>

      <expr_stmt><expr><call><name pos:line="11" pos:column="7">write<pos:position pos:line="11" pos:column="12"/></name><argument_list pos:line="11" pos:column="12">(<argument><expr><name pos:line="11" pos:column="13">m_logFd<pos:position pos:line="11" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="22">*<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="23">itr<pos:position pos:line="11" pos:column="26"/></name></expr></argument>, <argument><expr><call><name><name pos:line="11" pos:column="28">std<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">::<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">strlen<pos:position pos:line="11" pos:column="39"/></name></name><argument_list pos:line="11" pos:column="39">(<argument><expr><operator pos:line="11" pos:column="40">*<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="41">itr<pos:position pos:line="11" pos:column="44"/></name></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">write<pos:position pos:line="14" pos:column="10"/></name><argument_list pos:line="14" pos:column="10">(<argument><expr><name pos:line="14" pos:column="11">m_logFd<pos:position pos:line="14" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="20">"\n---\n"<pos:position pos:line="14" pos:column="29"/></literal></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="31">sizeof<argument_list pos:line="14" pos:column="37">(<argument><expr><literal type="string" pos:line="14" pos:column="38">"\n---\n"<pos:position pos:line="14" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="50"/></expr_stmt>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="17" pos:column="3">pid_t<pos:position pos:line="17" pos:column="8"/></name></type> <name pos:line="17" pos:column="9">childPid<pos:position pos:line="17" pos:column="17"/></name> <init pos:line="17" pos:column="18">= <expr><call><name pos:line="17" pos:column="20">fork<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">()<pos:position pos:line="17" pos:column="26"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="27"/></decl_stmt>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">childPid<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">==<pos:position pos:line="19" pos:column="18"/></operator> <operator pos:line="19" pos:column="19">-<pos:position pos:line="19" pos:column="20"/></operator><literal type="number" pos:line="19" pos:column="20">1<pos:position pos:line="19" pos:column="21"/></literal></expr>)<pos:position pos:line="19" pos:column="22"/></condition><then pos:line="19" pos:column="22">
    <block type="pseudo"><throw pos:line="20" pos:column="5">throw <expr><call><name><name pos:line="20" pos:column="11">torrent<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">::<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="20">input_error<pos:position pos:line="20" pos:column="31"/></name></name><argument_list pos:line="20" pos:column="31">(<argument><expr><literal type="string" pos:line="20" pos:column="32">"ExecFile::execute(...) Fork failed."<pos:position pos:line="20" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="71"/></throw></block></then></if>

  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><name pos:line="22" pos:column="7">childPid<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">==<pos:position pos:line="22" pos:column="18"/></operator> <literal type="number" pos:line="22" pos:column="19">0<pos:position pos:line="22" pos:column="20"/></literal></expr>)<pos:position pos:line="22" pos:column="21"/></condition><then pos:line="22" pos:column="21"> <block pos:line="22" pos:column="22">{
    <expr_stmt><expr><call><name><operator pos:line="23" pos:column="5">::<pos:position pos:line="23" pos:column="7"/></operator><name pos:line="23" pos:column="7">close<pos:position pos:line="23" pos:column="12"/></name></name><argument_list pos:line="23" pos:column="12">(<argument><expr><literal type="number" pos:line="23" pos:column="13">0<pos:position pos:line="23" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name><operator pos:line="24" pos:column="5">::<pos:position pos:line="24" pos:column="7"/></operator><name pos:line="24" pos:column="7">close<pos:position pos:line="24" pos:column="12"/></name></name><argument_list pos:line="24" pos:column="12">(<argument><expr><literal type="number" pos:line="24" pos:column="13">1<pos:position pos:line="24" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name><operator pos:line="25" pos:column="5">::<pos:position pos:line="25" pos:column="7"/></operator><name pos:line="25" pos:column="7">close<pos:position pos:line="25" pos:column="12"/></name></name><argument_list pos:line="25" pos:column="12">(<argument><expr><literal type="number" pos:line="25" pos:column="13">2<pos:position pos:line="25" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="16"/></expr_stmt>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">m_logFd<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">!=<pos:position pos:line="27" pos:column="19"/></operator> <operator pos:line="27" pos:column="20">-<pos:position pos:line="27" pos:column="21"/></operator><literal type="number" pos:line="27" pos:column="21">1<pos:position pos:line="27" pos:column="22"/></literal></expr>)<pos:position pos:line="27" pos:column="23"/></condition><then pos:line="27" pos:column="23"> <block pos:line="27" pos:column="24">{
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">dup2<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><name pos:line="28" pos:column="12">m_logFd<pos:position pos:line="28" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="21">1<pos:position pos:line="28" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">dup2<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><name pos:line="29" pos:column="12">m_logFd<pos:position pos:line="29" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="21">2<pos:position pos:line="29" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="32" pos:column="5">// Close all fd's.</comment>
    <for pos:line="33" pos:column="5">for <control pos:line="33" pos:column="9">(<init><decl><type><name pos:line="33" pos:column="10">int<pos:position pos:line="33" pos:column="13"/></name></type> <name pos:line="33" pos:column="14">i<pos:position pos:line="33" pos:column="15"/></name> <init pos:line="33" pos:column="16">= <expr><literal type="number" pos:line="33" pos:column="18">3<pos:position pos:line="33" pos:column="19"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="33" pos:column="21">last<pos:position pos:line="33" pos:column="25"/></name> <init pos:line="33" pos:column="26">= <expr><call><name pos:line="33" pos:column="28">sysconf<pos:position pos:line="33" pos:column="35"/></name><argument_list pos:line="33" pos:column="35">(<argument><expr><name pos:line="33" pos:column="36">_SC_OPEN_MAX<pos:position pos:line="33" pos:column="48"/></name></expr></argument>)<pos:position pos:line="33" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="50"/></init> <condition><expr><name pos:line="33" pos:column="51">i<pos:position pos:line="33" pos:column="52"/></name> <operator pos:line="33" pos:column="53">!=<pos:position pos:line="33" pos:column="55"/></operator> <name pos:line="33" pos:column="56">last<pos:position pos:line="33" pos:column="60"/></name></expr>;<pos:position pos:line="33" pos:column="61"/></condition> <incr><expr><name pos:line="33" pos:column="62">i<pos:position pos:line="33" pos:column="63"/></name><operator pos:line="33" pos:column="63">++<pos:position pos:line="33" pos:column="65"/></operator></expr></incr>)<pos:position pos:line="33" pos:column="66"/></control>
      <block type="pseudo"><expr_stmt><expr><call><name><operator pos:line="34" pos:column="7">::<pos:position pos:line="34" pos:column="9"/></operator><name pos:line="34" pos:column="9">close<pos:position pos:line="34" pos:column="14"/></name></name><argument_list pos:line="34" pos:column="14">(<argument><expr><name pos:line="34" pos:column="15">i<pos:position pos:line="34" pos:column="16"/></name></expr></argument>)<pos:position pos:line="34" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="18"/></expr_stmt></block></for>

    <decl_stmt><decl><type><name pos:line="36" pos:column="5">int<pos:position pos:line="36" pos:column="8"/></name></type> <name pos:line="36" pos:column="9">result<pos:position pos:line="36" pos:column="15"/></name> <init pos:line="36" pos:column="16">= <expr><call><name pos:line="36" pos:column="18">execvp<pos:position pos:line="36" pos:column="24"/></name><argument_list pos:line="36" pos:column="24">(<argument><expr><name pos:line="36" pos:column="25">file<pos:position pos:line="36" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="31">argv<pos:position pos:line="36" pos:column="35"/></name></expr></argument>)<pos:position pos:line="36" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="37"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="38" pos:column="5">_exit<pos:position pos:line="38" pos:column="10"/></name><argument_list pos:line="38" pos:column="10">(<argument><expr><name pos:line="38" pos:column="11">result<pos:position pos:line="38" pos:column="17"/></name></expr></argument>)<pos:position pos:line="38" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="19"/></expr_stmt>

  }<pos:position pos:line="40" pos:column="4"/></block></then> <else pos:line="40" pos:column="5">else <block pos:line="40" pos:column="10">{
    <decl_stmt><decl><type><name pos:line="41" pos:column="5">int<pos:position pos:line="41" pos:column="8"/></name></type> <name pos:line="41" pos:column="9">status<pos:position pos:line="41" pos:column="15"/></name></decl>;<pos:position pos:line="41" pos:column="16"/></decl_stmt>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><call><name pos:line="43" pos:column="9">waitpid<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><name pos:line="43" pos:column="17">childPid<pos:position pos:line="43" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="27">&amp;<pos:position pos:line="43" pos:column="32"/></operator><name pos:line="43" pos:column="28">status<pos:position pos:line="43" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="36">0<pos:position pos:line="43" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="38"/></argument_list></call> <operator pos:line="43" pos:column="39">!=<pos:position pos:line="43" pos:column="41"/></operator> <name pos:line="43" pos:column="42">childPid<pos:position pos:line="43" pos:column="50"/></name></expr>)<pos:position pos:line="43" pos:column="51"/></condition><then pos:line="43" pos:column="51">
      <block type="pseudo"><throw pos:line="44" pos:column="7">throw <expr><call><name><name pos:line="44" pos:column="13">torrent<pos:position pos:line="44" pos:column="20"/></name><operator pos:line="44" pos:column="20">::<pos:position pos:line="44" pos:column="22"/></operator><name pos:line="44" pos:column="22">internal_error<pos:position pos:line="44" pos:column="36"/></name></name><argument_list pos:line="44" pos:column="36">(<argument><expr><literal type="string" pos:line="44" pos:column="37">"ExecFile::execute(...) waitpid failed."<pos:position pos:line="44" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="79"/></throw></block></then></if>

    <comment type="line" pos:line="46" pos:column="5">// Check return value?</comment>
    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><name pos:line="47" pos:column="9">m_logFd<pos:position pos:line="47" pos:column="16"/></name></expr>)<pos:position pos:line="47" pos:column="17"/></condition><then pos:line="47" pos:column="17"> <block pos:line="47" pos:column="18">{
      <if pos:line="48" pos:column="7">if <condition pos:line="48" pos:column="10">(<expr><name pos:line="48" pos:column="11">status<pos:position pos:line="48" pos:column="17"/></name> <operator pos:line="48" pos:column="18">==<pos:position pos:line="48" pos:column="20"/></operator> <literal type="number" pos:line="48" pos:column="21">0<pos:position pos:line="48" pos:column="22"/></literal></expr>)<pos:position pos:line="48" pos:column="23"/></condition><then pos:line="48" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="9">write<pos:position pos:line="49" pos:column="14"/></name><argument_list pos:line="49" pos:column="14">(<argument><expr><name pos:line="49" pos:column="15">m_logFd<pos:position pos:line="49" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="24">"\n--- Success ---\n"<pos:position pos:line="49" pos:column="45"/></literal></expr></argument>, <argument><expr><sizeof pos:line="49" pos:column="47">sizeof<argument_list pos:line="49" pos:column="53">(<argument><expr><literal type="string" pos:line="49" pos:column="54">"\n--- Success ---\n"<pos:position pos:line="49" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="49" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="78"/></expr_stmt></block></then>
      <else pos:line="50" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="9">write<pos:position pos:line="51" pos:column="14"/></name><argument_list pos:line="51" pos:column="14">(<argument><expr><name pos:line="51" pos:column="15">m_logFd<pos:position pos:line="51" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="24">"\n--- Error ---\n"<pos:position pos:line="51" pos:column="43"/></literal></expr></argument>, <argument><expr><sizeof pos:line="51" pos:column="45">sizeof<argument_list pos:line="51" pos:column="51">(<argument><expr><literal type="string" pos:line="51" pos:column="52">"\n--- Error ---\n"<pos:position pos:line="51" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="51" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="74"/></expr_stmt></block></else></if>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>

    <return pos:line="54" pos:column="5">return <expr><name pos:line="54" pos:column="12">status<pos:position pos:line="54" pos:column="18"/></name></expr>;<pos:position pos:line="54" pos:column="19"/></return>
  }<pos:position pos:line="55" pos:column="4"/></block></else></if>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
