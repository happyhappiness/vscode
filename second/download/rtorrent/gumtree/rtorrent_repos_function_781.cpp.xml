<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_781.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">std<pos:position pos:line="1" pos:column="4"/></name><operator pos:line="1" pos:column="4">::<pos:position pos:line="1" pos:column="6"/></operator><name pos:line="1" pos:column="6">string<pos:position pos:line="1" pos:column="12"/></name></name></type>
<name><name pos:line="2" pos:column="1">Lockfile<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">locked_by_as_string<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">()<pos:position pos:line="2" pos:column="32"/></parameter_list> <specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <block pos:line="2" pos:column="39">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">process_type<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">p<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><call><name pos:line="3" pos:column="20">locked_by<pos:position pos:line="3" pos:column="29"/></name><argument_list pos:line="3" pos:column="29">()<pos:position pos:line="3" pos:column="31"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><call><name><name pos:line="5" pos:column="7">p<pos:position pos:line="5" pos:column="8"/></name><operator pos:line="5" pos:column="8">.<pos:position pos:line="5" pos:column="9"/></operator><name pos:line="5" pos:column="9">first<pos:position pos:line="5" pos:column="14"/></name><operator pos:line="5" pos:column="14">.<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="15">empty<pos:position pos:line="5" pos:column="20"/></name></name><argument_list pos:line="5" pos:column="20">()<pos:position pos:line="5" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="23"/></condition><then pos:line="5" pos:column="23">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><literal type="string" pos:line="6" pos:column="12">"&lt;error&gt;"<pos:position pos:line="6" pos:column="27"/></literal></expr>;<pos:position pos:line="6" pos:column="22"/></return></block></then></if>

  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">std<pos:position pos:line="8" pos:column="6"/></name><operator pos:line="8" pos:column="6">::<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">stringstream<pos:position pos:line="8" pos:column="20"/></name></name></type> <name pos:line="8" pos:column="21">str<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
  <expr_stmt><expr><name pos:line="9" pos:column="3">str<pos:position pos:line="9" pos:column="6"/></name> <operator pos:line="9" pos:column="7">&lt;&lt;<pos:position pos:line="9" pos:column="15"/></operator> <name><name pos:line="9" pos:column="10">p<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">.<pos:position pos:line="9" pos:column="12"/></operator><name pos:line="9" pos:column="12">first<pos:position pos:line="9" pos:column="17"/></name></name> <operator pos:line="9" pos:column="18">&lt;&lt;<pos:position pos:line="9" pos:column="26"/></operator> <literal type="string" pos:line="9" pos:column="21">":+"<pos:position pos:line="9" pos:column="25"/></literal> <operator pos:line="9" pos:column="26">&lt;&lt;<pos:position pos:line="9" pos:column="34"/></operator> <name><name pos:line="9" pos:column="29">p<pos:position pos:line="9" pos:column="30"/></name><operator pos:line="9" pos:column="30">.<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="31">second<pos:position pos:line="9" pos:column="37"/></name></name></expr>;<pos:position pos:line="9" pos:column="38"/></expr_stmt>

  <return pos:line="11" pos:column="3">return <expr><call><name><name pos:line="11" pos:column="10">str<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">.<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">str<pos:position pos:line="11" pos:column="17"/></name></name><argument_list pos:line="11" pos:column="17">()<pos:position pos:line="11" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="20"/></return>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
