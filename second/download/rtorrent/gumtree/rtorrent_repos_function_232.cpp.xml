<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_232.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">torrent<pos:position pos:line="1" pos:column="8"/></name><operator pos:line="1" pos:column="8">::<pos:position pos:line="1" pos:column="10"/></operator><name pos:line="1" pos:column="10">Object<pos:position pos:line="1" pos:column="16"/></name></name></type>
<name pos:line="2" pos:column="1">xmlrpc_to_object<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">xmlrpc_env<pos:position pos:line="2" pos:column="28"/></name><modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type> <name pos:line="2" pos:column="30">env<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="35">xmlrpc_value<pos:position pos:line="2" pos:column="47"/></name><modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type> <name pos:line="2" pos:column="49">value<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list> <block pos:line="2" pos:column="56">{
  <switch pos:line="3" pos:column="3">switch <condition pos:line="3" pos:column="10">(<expr><call><name pos:line="3" pos:column="11">xmlrpc_value_type<pos:position pos:line="3" pos:column="28"/></name><argument_list pos:line="3" pos:column="28">(<argument><expr><name pos:line="3" pos:column="29">value<pos:position pos:line="3" pos:column="34"/></name></expr></argument>)<pos:position pos:line="3" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="36"/></condition> <block pos:line="3" pos:column="37">{
  <case pos:line="4" pos:column="3">case <expr><name pos:line="4" pos:column="8">XMLRPC_TYPE_INT<pos:position pos:line="4" pos:column="23"/></name></expr>:<pos:position pos:line="4" pos:column="24"/></case>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">v<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">xmlrpc_read_int<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><name pos:line="6" pos:column="21">env<pos:position pos:line="6" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="26">value<pos:position pos:line="6" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="33">&amp;<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="34">v<pos:position pos:line="6" pos:column="35"/></name></expr></argument>)<pos:position pos:line="6" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="37"/></expr_stmt>
      
    <return pos:line="8" pos:column="5">return <expr><call><name><name pos:line="8" pos:column="12">torrent<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">::<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">Object<pos:position pos:line="8" pos:column="27"/></name></name><argument_list pos:line="8" pos:column="27">(<argument><expr><operator pos:line="8" pos:column="28">(<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="29">int64_t<pos:position pos:line="8" pos:column="36"/></name><operator pos:line="8" pos:column="36">)<pos:position pos:line="8" pos:column="37"/></operator><name pos:line="8" pos:column="37">v<pos:position pos:line="8" pos:column="38"/></name></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="40"/></return>

<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">XMLRPC_HAVE_I8<pos:position pos:line="10" pos:column="22"/></name></cpp:ifdef>
  <case pos:line="11" pos:column="3">case <expr><name pos:line="11" pos:column="8">XMLRPC_TYPE_I8<pos:position pos:line="11" pos:column="22"/></name></expr>:<pos:position pos:line="11" pos:column="23"/></case>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">long<pos:position pos:line="12" pos:column="9"/></name> <name pos:line="12" pos:column="10">long<pos:position pos:line="12" pos:column="14"/></name></type> <name pos:line="12" pos:column="15">v2<pos:position pos:line="12" pos:column="17"/></name></decl>;<pos:position pos:line="12" pos:column="18"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">xmlrpc_read_i8<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name pos:line="13" pos:column="20">env<pos:position pos:line="13" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="25">value<pos:position pos:line="13" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="32">&amp;<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="33">v2<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
      
    <return pos:line="15" pos:column="5">return <expr><call><name><name pos:line="15" pos:column="12">torrent<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">::<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="21">Object<pos:position pos:line="15" pos:column="27"/></name></name><argument_list pos:line="15" pos:column="27">(<argument><expr><operator pos:line="15" pos:column="28">(<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="29">int64_t<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">)<pos:position pos:line="15" pos:column="37"/></operator><name pos:line="15" pos:column="37">v2<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="41"/></return>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="line" pos:line="18" pos:column="5">//     case XMLRPC_TYPE_BOOL:</comment>
    <comment type="line" pos:line="19" pos:column="5">//     case XMLRPC_TYPE_DOUBLE:</comment>
    <comment type="line" pos:line="20" pos:column="5">//     case XMLRPC_TYPE_DATETIME:</comment>

  <case pos:line="22" pos:column="3">case <expr><name pos:line="22" pos:column="8">XMLRPC_TYPE_STRING<pos:position pos:line="22" pos:column="26"/></name></expr>:<pos:position pos:line="22" pos:column="27"/></case>
  <block pos:line="23" pos:column="3">{
    <decl_stmt><decl><type><specifier pos:line="24" pos:column="5">const<pos:position pos:line="24" pos:column="10"/></specifier> <name pos:line="24" pos:column="11">char<pos:position pos:line="24" pos:column="15"/></name><modifier pos:line="24" pos:column="15">*<pos:position pos:line="24" pos:column="16"/></modifier></type> <name pos:line="24" pos:column="17">valueString<pos:position pos:line="24" pos:column="28"/></name></decl>;<pos:position pos:line="24" pos:column="29"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">xmlrpc_read_string<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><name pos:line="25" pos:column="24">env<pos:position pos:line="25" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="29">value<pos:position pos:line="25" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="36">&amp;<pos:position pos:line="25" pos:column="41"/></operator><name pos:line="25" pos:column="37">valueString<pos:position pos:line="25" pos:column="48"/></name></expr></argument>)<pos:position pos:line="25" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="50"/></expr_stmt>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name><name pos:line="27" pos:column="9">env<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">-&gt;<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="14">fault_occurred<pos:position pos:line="27" pos:column="28"/></name></name></expr>)<pos:position pos:line="27" pos:column="29"/></condition><then pos:line="27" pos:column="29">
      <block type="pseudo"><return pos:line="28" pos:column="7">return <expr><call><name><name pos:line="28" pos:column="14">torrent<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">::<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="23">Object<pos:position pos:line="28" pos:column="29"/></name></name><argument_list pos:line="28" pos:column="29">()<pos:position pos:line="28" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="32"/></return></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="30" pos:column="5">torrent<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">::<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">Object<pos:position pos:line="30" pos:column="20"/></name></name></type> <name pos:line="30" pos:column="21">result<pos:position pos:line="30" pos:column="27"/></name> <init pos:line="30" pos:column="28">= <expr><call><name><name pos:line="30" pos:column="30">torrent<pos:position pos:line="30" pos:column="37"/></name><operator pos:line="30" pos:column="37">::<pos:position pos:line="30" pos:column="39"/></operator><name pos:line="30" pos:column="39">Object<pos:position pos:line="30" pos:column="45"/></name></name><argument_list pos:line="30" pos:column="45">(<argument><expr><call><name><name pos:line="30" pos:column="46">std<pos:position pos:line="30" pos:column="49"/></name><operator pos:line="30" pos:column="49">::<pos:position pos:line="30" pos:column="51"/></operator><name pos:line="30" pos:column="51">string<pos:position pos:line="30" pos:column="57"/></name></name><argument_list pos:line="30" pos:column="57">(<argument><expr><name pos:line="30" pos:column="58">valueString<pos:position pos:line="30" pos:column="69"/></name></expr></argument>)<pos:position pos:line="30" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="72"/></decl_stmt>

    <comment type="line" pos:line="32" pos:column="5">// Urgh, seriously?</comment>
    <expr_stmt><expr><call><name><operator pos:line="33" pos:column="5">::<pos:position pos:line="33" pos:column="7"/></operator><name pos:line="33" pos:column="7">free<pos:position pos:line="33" pos:column="11"/></name></name><argument_list pos:line="33" pos:column="11">(<argument><expr><operator pos:line="33" pos:column="12">(<pos:position pos:line="33" pos:column="13"/></operator><name pos:line="33" pos:column="13">void<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">*<pos:position pos:line="33" pos:column="18"/></operator><operator pos:line="33" pos:column="18">)<pos:position pos:line="33" pos:column="19"/></operator><name pos:line="33" pos:column="19">valueString<pos:position pos:line="33" pos:column="30"/></name></expr></argument>)<pos:position pos:line="33" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">result<pos:position pos:line="34" pos:column="18"/></name></expr>;<pos:position pos:line="34" pos:column="19"/></return>
  }<pos:position pos:line="35" pos:column="4"/></block>

    <comment type="line" pos:line="37" pos:column="5">//     case XMLRPC_TYPE_BASE64:</comment>
  <case pos:line="38" pos:column="3">case <expr><name pos:line="38" pos:column="8">XMLRPC_TYPE_ARRAY<pos:position pos:line="38" pos:column="25"/></name></expr>:<pos:position pos:line="38" pos:column="26"/></case>
  <block pos:line="39" pos:column="3">{
    <decl_stmt><decl><type><name><name pos:line="40" pos:column="5">torrent<pos:position pos:line="40" pos:column="12"/></name><operator pos:line="40" pos:column="12">::<pos:position pos:line="40" pos:column="14"/></operator><name pos:line="40" pos:column="14">Object<pos:position pos:line="40" pos:column="20"/></name></name></type> <name pos:line="40" pos:column="21">result<pos:position pos:line="40" pos:column="27"/></name><argument_list pos:line="40" pos:column="27">(<argument><expr><name><name pos:line="40" pos:column="28">torrent<pos:position pos:line="40" pos:column="35"/></name><operator pos:line="40" pos:column="35">::<pos:position pos:line="40" pos:column="37"/></operator><name pos:line="40" pos:column="37">Object<pos:position pos:line="40" pos:column="43"/></name><operator pos:line="40" pos:column="43">::<pos:position pos:line="40" pos:column="45"/></operator><name pos:line="40" pos:column="45">TYPE_LIST<pos:position pos:line="40" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="55"/></argument_list></decl>;<pos:position pos:line="40" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="41" pos:column="5">torrent<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">::<pos:position pos:line="41" pos:column="14"/></operator><name pos:line="41" pos:column="14">Object<pos:position pos:line="41" pos:column="20"/></name><operator pos:line="41" pos:column="20">::<pos:position pos:line="41" pos:column="22"/></operator><name pos:line="41" pos:column="22">list_type<pos:position pos:line="41" pos:column="31"/></name></name><modifier pos:line="41" pos:column="31">&amp;<pos:position pos:line="41" pos:column="36"/></modifier></type> <name pos:line="41" pos:column="33">listRef<pos:position pos:line="41" pos:column="40"/></name> <init pos:line="41" pos:column="41">= <expr><call><name><name pos:line="41" pos:column="43">result<pos:position pos:line="41" pos:column="49"/></name><operator pos:line="41" pos:column="49">.<pos:position pos:line="41" pos:column="50"/></operator><name pos:line="41" pos:column="50">as_list<pos:position pos:line="41" pos:column="57"/></name></name><argument_list pos:line="41" pos:column="57">()<pos:position pos:line="41" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="60"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="43" pos:column="5">unsigned<pos:position pos:line="43" pos:column="13"/></name> <name pos:line="43" pos:column="14">int<pos:position pos:line="43" pos:column="17"/></name></type> <name pos:line="43" pos:column="18">last<pos:position pos:line="43" pos:column="22"/></name> <init pos:line="43" pos:column="23">= <expr><call><name pos:line="43" pos:column="25">xmlrpc_array_size<pos:position pos:line="43" pos:column="42"/></name><argument_list pos:line="43" pos:column="42">(<argument><expr><name pos:line="43" pos:column="43">env<pos:position pos:line="43" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="48">value<pos:position pos:line="43" pos:column="53"/></name></expr></argument>)<pos:position pos:line="43" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="43" pos:column="55"/></decl_stmt>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name><name pos:line="45" pos:column="9">env<pos:position pos:line="45" pos:column="12"/></name><operator pos:line="45" pos:column="12">-&gt;<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="14">fault_occurred<pos:position pos:line="45" pos:column="28"/></name></name></expr>)<pos:position pos:line="45" pos:column="29"/></condition><then pos:line="45" pos:column="29">
      <block type="pseudo"><return pos:line="46" pos:column="7">return <expr><call><name><name pos:line="46" pos:column="14">torrent<pos:position pos:line="46" pos:column="21"/></name><operator pos:line="46" pos:column="21">::<pos:position pos:line="46" pos:column="23"/></operator><name pos:line="46" pos:column="23">Object<pos:position pos:line="46" pos:column="29"/></name></name><argument_list pos:line="46" pos:column="29">()<pos:position pos:line="46" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="32"/></return></block></then></if>

    <comment type="line" pos:line="48" pos:column="5">// Move this into a helper function.</comment>
    <for pos:line="49" pos:column="5">for <control pos:line="49" pos:column="9">(<init><decl><type><name pos:line="49" pos:column="10">unsigned<pos:position pos:line="49" pos:column="18"/></name> <name pos:line="49" pos:column="19">int<pos:position pos:line="49" pos:column="22"/></name></type> <name pos:line="49" pos:column="23">i<pos:position pos:line="49" pos:column="24"/></name> <init pos:line="49" pos:column="25">= <expr><literal type="number" pos:line="49" pos:column="27">0<pos:position pos:line="49" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="49" pos:column="29"/></init> <condition><expr><name pos:line="49" pos:column="30">i<pos:position pos:line="49" pos:column="31"/></name> <operator pos:line="49" pos:column="32">!=<pos:position pos:line="49" pos:column="34"/></operator> <name pos:line="49" pos:column="35">last<pos:position pos:line="49" pos:column="39"/></name></expr>;<pos:position pos:line="49" pos:column="40"/></condition> <incr><expr><name pos:line="49" pos:column="41">i<pos:position pos:line="49" pos:column="42"/></name><operator pos:line="49" pos:column="42">++<pos:position pos:line="49" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="49" pos:column="45"/></control> <block pos:line="49" pos:column="46">{
      <comment type="line" pos:line="50" pos:column="7">// Need to decref.</comment>
      <decl_stmt><decl><type><name pos:line="51" pos:column="7">xmlrpc_value<pos:position pos:line="51" pos:column="19"/></name><modifier pos:line="51" pos:column="19">*<pos:position pos:line="51" pos:column="20"/></modifier></type> <name pos:line="51" pos:column="21">tmp<pos:position pos:line="51" pos:column="24"/></name></decl>;<pos:position pos:line="51" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">xmlrpc_array_read_item<pos:position pos:line="52" pos:column="29"/></name><argument_list pos:line="52" pos:column="29">(<argument><expr><name pos:line="52" pos:column="30">env<pos:position pos:line="52" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="35">value<pos:position pos:line="52" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="42">i<pos:position pos:line="52" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="45">&amp;<pos:position pos:line="52" pos:column="50"/></operator><name pos:line="52" pos:column="46">tmp<pos:position pos:line="52" pos:column="49"/></name></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="51"/></expr_stmt>

      <if pos:line="54" pos:column="7">if <condition pos:line="54" pos:column="10">(<expr><name><name pos:line="54" pos:column="11">env<pos:position pos:line="54" pos:column="14"/></name><operator pos:line="54" pos:column="14">-&gt;<pos:position pos:line="54" pos:column="19"/></operator><name pos:line="54" pos:column="16">fault_occurred<pos:position pos:line="54" pos:column="30"/></name></name></expr>)<pos:position pos:line="54" pos:column="31"/></condition><then pos:line="54" pos:column="31">
        <block type="pseudo"><return pos:line="55" pos:column="9">return <expr><call><name><name pos:line="55" pos:column="16">torrent<pos:position pos:line="55" pos:column="23"/></name><operator pos:line="55" pos:column="23">::<pos:position pos:line="55" pos:column="25"/></operator><name pos:line="55" pos:column="25">Object<pos:position pos:line="55" pos:column="31"/></name></name><argument_list pos:line="55" pos:column="31">()<pos:position pos:line="55" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="34"/></return></block></then></if>

      <expr_stmt><expr><call><name><name pos:line="57" pos:column="7">listRef<pos:position pos:line="57" pos:column="14"/></name><operator pos:line="57" pos:column="14">.<pos:position pos:line="57" pos:column="15"/></operator><name pos:line="57" pos:column="15">push_back<pos:position pos:line="57" pos:column="24"/></name></name><argument_list pos:line="57" pos:column="24">(<argument><expr><call><name pos:line="57" pos:column="25">xmlrpc_to_object<pos:position pos:line="57" pos:column="41"/></name><argument_list pos:line="57" pos:column="41">(<argument><expr><name pos:line="57" pos:column="42">env<pos:position pos:line="57" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="47">tmp<pos:position pos:line="57" pos:column="50"/></name></expr></argument>)<pos:position pos:line="57" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="53"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="58" pos:column="7">xmlrpc_DECREF<pos:position pos:line="58" pos:column="20"/></name><argument_list pos:line="58" pos:column="20">(<argument><expr><name pos:line="58" pos:column="21">tmp<pos:position pos:line="58" pos:column="24"/></name></expr></argument>)<pos:position pos:line="58" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="59" pos:column="6"/></block></for>

    <return pos:line="61" pos:column="5">return <expr><name pos:line="61" pos:column="12">result<pos:position pos:line="61" pos:column="18"/></name></expr>;<pos:position pos:line="61" pos:column="19"/></return>
  }<pos:position pos:line="62" pos:column="4"/></block>

  <comment type="line" pos:line="64" pos:column="3">//     case XMLRPC_TYPE_STRUCT:</comment>
    <comment type="line" pos:line="65" pos:column="5">//     case XMLRPC_TYPE_C_PTR:</comment>
    <comment type="line" pos:line="66" pos:column="5">//     case XMLRPC_TYPE_NIL:</comment>
    <comment type="line" pos:line="67" pos:column="5">//     case XMLRPC_TYPE_DEAD:</comment>
  <default pos:line="68" pos:column="3">default:<pos:position pos:line="68" pos:column="11"/></default>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">xmlrpc_env_set_fault<pos:position pos:line="69" pos:column="25"/></name><argument_list pos:line="69" pos:column="25">(<argument><expr><name pos:line="69" pos:column="26">env<pos:position pos:line="69" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="31">XMLRPC_TYPE_ERROR<pos:position pos:line="69" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="50">"Unsupported type found."<pos:position pos:line="69" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="77"/></expr_stmt>
    <return pos:line="70" pos:column="5">return <expr><call><name><name pos:line="70" pos:column="12">torrent<pos:position pos:line="70" pos:column="19"/></name><operator pos:line="70" pos:column="19">::<pos:position pos:line="70" pos:column="21"/></operator><name pos:line="70" pos:column="21">Object<pos:position pos:line="70" pos:column="27"/></name></name><argument_list pos:line="70" pos:column="27">()<pos:position pos:line="70" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="30"/></return>
  }<pos:position pos:line="71" pos:column="4"/></block></switch>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
