<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_78.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">torrent<pos:position pos:line="1" pos:column="8"/></name><operator pos:line="1" pos:column="8">::<pos:position pos:line="1" pos:column="10"/></operator><name pos:line="1" pos:column="10">Object<pos:position pos:line="1" pos:column="16"/></name></name></type>
<name pos:line="2" pos:column="1">apply_schedule<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><specifier pos:line="2" pos:column="16">const<pos:position pos:line="2" pos:column="21"/></specifier> <name><name pos:line="2" pos:column="22">torrent<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">Object<pos:position pos:line="2" pos:column="37"/></name></name><modifier pos:line="2" pos:column="37">&amp;<pos:position pos:line="2" pos:column="42"/></modifier></type> <name pos:line="2" pos:column="39">rawArgs<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list> <block pos:line="2" pos:column="48">{
  <decl_stmt><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name><name pos:line="3" pos:column="9">torrent<pos:position pos:line="3" pos:column="16"/></name><operator pos:line="3" pos:column="16">::<pos:position pos:line="3" pos:column="18"/></operator><name pos:line="3" pos:column="18">Object<pos:position pos:line="3" pos:column="24"/></name><operator pos:line="3" pos:column="24">::<pos:position pos:line="3" pos:column="26"/></operator><name pos:line="3" pos:column="26">list_type<pos:position pos:line="3" pos:column="35"/></name></name><modifier pos:line="3" pos:column="35">&amp;<pos:position pos:line="3" pos:column="40"/></modifier></type> <name pos:line="3" pos:column="37">args<pos:position pos:line="3" pos:column="41"/></name> <init pos:line="3" pos:column="42">= <expr><call><name><name pos:line="3" pos:column="44">rawArgs<pos:position pos:line="3" pos:column="51"/></name><operator pos:line="3" pos:column="51">.<pos:position pos:line="3" pos:column="52"/></operator><name pos:line="3" pos:column="52">as_list<pos:position pos:line="3" pos:column="59"/></name></name><argument_list pos:line="3" pos:column="59">()<pos:position pos:line="3" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="62"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><call><name><name pos:line="5" pos:column="7">args<pos:position pos:line="5" pos:column="11"/></name><operator pos:line="5" pos:column="11">.<pos:position pos:line="5" pos:column="12"/></operator><name pos:line="5" pos:column="12">size<pos:position pos:line="5" pos:column="16"/></name></name><argument_list pos:line="5" pos:column="16">()<pos:position pos:line="5" pos:column="18"/></argument_list></call> <operator pos:line="5" pos:column="19">!=<pos:position pos:line="5" pos:column="21"/></operator> <literal type="number" pos:line="5" pos:column="22">4<pos:position pos:line="5" pos:column="23"/></literal></expr>)<pos:position pos:line="5" pos:column="24"/></condition><then pos:line="5" pos:column="24">
    <block type="pseudo"><throw pos:line="6" pos:column="5">throw <expr><call><name><name pos:line="6" pos:column="11">torrent<pos:position pos:line="6" pos:column="18"/></name><operator pos:line="6" pos:column="18">::<pos:position pos:line="6" pos:column="20"/></operator><name pos:line="6" pos:column="20">input_error<pos:position pos:line="6" pos:column="31"/></name></name><argument_list pos:line="6" pos:column="31">(<argument><expr><literal type="string" pos:line="6" pos:column="32">"Wrong number of arguments."<pos:position pos:line="6" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="62"/></throw></block></then></if>

  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">torrent<pos:position pos:line="8" pos:column="10"/></name><operator pos:line="8" pos:column="10">::<pos:position pos:line="8" pos:column="12"/></operator><name pos:line="8" pos:column="12">Object<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">::<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="20">list_type<pos:position pos:line="8" pos:column="29"/></name><operator pos:line="8" pos:column="29">::<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="31">const_iterator<pos:position pos:line="8" pos:column="45"/></name></name></type> <name pos:line="8" pos:column="46">itr<pos:position pos:line="8" pos:column="49"/></name> <init pos:line="8" pos:column="50">= <expr><call><name><name pos:line="8" pos:column="52">args<pos:position pos:line="8" pos:column="56"/></name><operator pos:line="8" pos:column="56">.<pos:position pos:line="8" pos:column="57"/></operator><name pos:line="8" pos:column="57">begin<pos:position pos:line="8" pos:column="62"/></name></name><argument_list pos:line="8" pos:column="62">()<pos:position pos:line="8" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="65"/></decl_stmt>

  <decl_stmt><decl><type><specifier pos:line="10" pos:column="3">const<pos:position pos:line="10" pos:column="8"/></specifier> <name><name pos:line="10" pos:column="9">std<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">::<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">string<pos:position pos:line="10" pos:column="20"/></name></name><modifier pos:line="10" pos:column="20">&amp;<pos:position pos:line="10" pos:column="25"/></modifier></type> <name pos:line="10" pos:column="22">arg1<pos:position pos:line="10" pos:column="26"/></name> <init pos:line="10" pos:column="27">= <expr><operator pos:line="10" pos:column="29">(<pos:position pos:line="10" pos:column="30"/></operator><name pos:line="10" pos:column="30">itr<pos:position pos:line="10" pos:column="33"/></name><operator pos:line="10" pos:column="33">++<pos:position pos:line="10" pos:column="35"/></operator><operator pos:line="10" pos:column="35">)<pos:position pos:line="10" pos:column="36"/></operator><operator pos:line="10" pos:column="36">-&gt;<pos:position pos:line="10" pos:column="41"/></operator><call><name pos:line="10" pos:column="38">as_string<pos:position pos:line="10" pos:column="47"/></name><argument_list pos:line="10" pos:column="47">()<pos:position pos:line="10" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="50"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="11" pos:column="3">const<pos:position pos:line="11" pos:column="8"/></specifier> <name><name pos:line="11" pos:column="9">std<pos:position pos:line="11" pos:column="12"/></name><operator pos:line="11" pos:column="12">::<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">string<pos:position pos:line="11" pos:column="20"/></name></name><modifier pos:line="11" pos:column="20">&amp;<pos:position pos:line="11" pos:column="25"/></modifier></type> <name pos:line="11" pos:column="22">arg2<pos:position pos:line="11" pos:column="26"/></name> <init pos:line="11" pos:column="27">= <expr><operator pos:line="11" pos:column="29">(<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="30">itr<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">++<pos:position pos:line="11" pos:column="35"/></operator><operator pos:line="11" pos:column="35">)<pos:position pos:line="11" pos:column="36"/></operator><operator pos:line="11" pos:column="36">-&gt;<pos:position pos:line="11" pos:column="41"/></operator><call><name pos:line="11" pos:column="38">as_string<pos:position pos:line="11" pos:column="47"/></name><argument_list pos:line="11" pos:column="47">()<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="50"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="12" pos:column="3">const<pos:position pos:line="12" pos:column="8"/></specifier> <name><name pos:line="12" pos:column="9">std<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">::<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">string<pos:position pos:line="12" pos:column="20"/></name></name><modifier pos:line="12" pos:column="20">&amp;<pos:position pos:line="12" pos:column="25"/></modifier></type> <name pos:line="12" pos:column="22">arg3<pos:position pos:line="12" pos:column="26"/></name> <init pos:line="12" pos:column="27">= <expr><operator pos:line="12" pos:column="29">(<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">itr<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">++<pos:position pos:line="12" pos:column="35"/></operator><operator pos:line="12" pos:column="35">)<pos:position pos:line="12" pos:column="36"/></operator><operator pos:line="12" pos:column="36">-&gt;<pos:position pos:line="12" pos:column="41"/></operator><call><name pos:line="12" pos:column="38">as_string<pos:position pos:line="12" pos:column="47"/></name><argument_list pos:line="12" pos:column="47">()<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="50"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="13" pos:column="3">const<pos:position pos:line="13" pos:column="8"/></specifier> <name><name pos:line="13" pos:column="9">std<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">::<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">string<pos:position pos:line="13" pos:column="20"/></name></name><modifier pos:line="13" pos:column="20">&amp;<pos:position pos:line="13" pos:column="25"/></modifier></type> <name pos:line="13" pos:column="22">arg4<pos:position pos:line="13" pos:column="26"/></name> <init pos:line="13" pos:column="27">= <expr><operator pos:line="13" pos:column="29">(<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="30">itr<pos:position pos:line="13" pos:column="33"/></name><operator pos:line="13" pos:column="33">++<pos:position pos:line="13" pos:column="35"/></operator><operator pos:line="13" pos:column="35">)<pos:position pos:line="13" pos:column="36"/></operator><operator pos:line="13" pos:column="36">-&gt;<pos:position pos:line="13" pos:column="41"/></operator><call><name pos:line="13" pos:column="38">as_string<pos:position pos:line="13" pos:column="47"/></name><argument_list pos:line="13" pos:column="47">()<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="50"/></decl_stmt>

  <expr_stmt><expr><call><name><name pos:line="15" pos:column="3">control<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">-&gt;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="12">command_scheduler<pos:position pos:line="15" pos:column="29"/></name></name><argument_list pos:line="15" pos:column="29">()<pos:position pos:line="15" pos:column="31"/></argument_list></call><operator pos:line="15" pos:column="31">-&gt;<pos:position pos:line="15" pos:column="36"/></operator><call><name pos:line="15" pos:column="33">parse<pos:position pos:line="15" pos:column="38"/></name><argument_list pos:line="15" pos:column="38">(<argument><expr><name pos:line="15" pos:column="39">arg1<pos:position pos:line="15" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="45">arg2<pos:position pos:line="15" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="51">arg3<pos:position pos:line="15" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="57">arg4<pos:position pos:line="15" pos:column="61"/></name></expr></argument>)<pos:position pos:line="15" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="63"/></expr_stmt>

  <return pos:line="17" pos:column="3">return <expr><call><name><name pos:line="17" pos:column="10">torrent<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">::<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="19">Object<pos:position pos:line="17" pos:column="25"/></name></name><argument_list pos:line="17" pos:column="25">()<pos:position pos:line="17" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="28"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
