<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_586.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">path_expand<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name><name pos:line="2" pos:column="13">std<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name><name pos:line="2" pos:column="18">vector<pos:position pos:line="2" pos:column="24"/></name><argument_list type="generic" pos:line="2" pos:column="24">&lt;<argument><expr><name><name pos:line="2" pos:column="25">std<pos:position pos:line="2" pos:column="28"/></name><operator pos:line="2" pos:column="28">::<pos:position pos:line="2" pos:column="30"/></operator><name pos:line="2" pos:column="30">string<pos:position pos:line="2" pos:column="36"/></name></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="40"/></argument_list></name></name><modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type> <name pos:line="2" pos:column="39">paths<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="46">const<pos:position pos:line="2" pos:column="51"/></specifier> <name><name pos:line="2" pos:column="52">std<pos:position pos:line="2" pos:column="55"/></name><operator pos:line="2" pos:column="55">::<pos:position pos:line="2" pos:column="57"/></operator><name pos:line="2" pos:column="57">string<pos:position pos:line="2" pos:column="63"/></name></name><modifier pos:line="2" pos:column="63">&amp;<pos:position pos:line="2" pos:column="68"/></modifier></type> <name pos:line="2" pos:column="65">pattern<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list> <block pos:line="2" pos:column="74">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">std<pos:position pos:line="3" pos:column="6"/></name><operator pos:line="3" pos:column="6">::<pos:position pos:line="3" pos:column="8"/></operator><name><name pos:line="3" pos:column="8">vector<pos:position pos:line="3" pos:column="14"/></name><argument_list type="generic" pos:line="3" pos:column="14">&lt;<argument><expr><name><name pos:line="3" pos:column="15">utils<pos:position pos:line="3" pos:column="20"/></name><operator pos:line="3" pos:column="20">::<pos:position pos:line="3" pos:column="22"/></operator><name pos:line="3" pos:column="22">Directory<pos:position pos:line="3" pos:column="31"/></name></name></expr></argument>&gt;<pos:position pos:line="3" pos:column="35"/></argument_list></name></name></type> <name pos:line="3" pos:column="33">currentCache<pos:position pos:line="3" pos:column="45"/></name></decl>;<pos:position pos:line="3" pos:column="46"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">std<pos:position pos:line="4" pos:column="6"/></name><operator pos:line="4" pos:column="6">::<pos:position pos:line="4" pos:column="8"/></operator><name><name pos:line="4" pos:column="8">vector<pos:position pos:line="4" pos:column="14"/></name><argument_list type="generic" pos:line="4" pos:column="14">&lt;<argument><expr><name><name pos:line="4" pos:column="15">utils<pos:position pos:line="4" pos:column="20"/></name><operator pos:line="4" pos:column="20">::<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="22">Directory<pos:position pos:line="4" pos:column="31"/></name></name></expr></argument>&gt;<pos:position pos:line="4" pos:column="35"/></argument_list></name></name></type> <name pos:line="4" pos:column="33">nextCache<pos:position pos:line="4" pos:column="42"/></name></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">rak<pos:position pos:line="6" pos:column="6"/></name><operator pos:line="6" pos:column="6">::<pos:position pos:line="6" pos:column="8"/></operator><name><name pos:line="6" pos:column="8">split_iterator_t<pos:position pos:line="6" pos:column="24"/></name><argument_list type="generic" pos:line="6" pos:column="24">&lt;<argument><expr><name><name pos:line="6" pos:column="25">std<pos:position pos:line="6" pos:column="28"/></name><operator pos:line="6" pos:column="28">::<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="30">string<pos:position pos:line="6" pos:column="36"/></name></name></expr></argument>&gt;<pos:position pos:line="6" pos:column="40"/></argument_list></name></name></type> <name pos:line="6" pos:column="38">first<pos:position pos:line="6" pos:column="43"/></name> <init pos:line="6" pos:column="44">= <expr><call><name><name pos:line="6" pos:column="46">rak<pos:position pos:line="6" pos:column="49"/></name><operator pos:line="6" pos:column="49">::<pos:position pos:line="6" pos:column="51"/></operator><name pos:line="6" pos:column="51">split_iterator<pos:position pos:line="6" pos:column="65"/></name></name><argument_list pos:line="6" pos:column="65">(<argument><expr><name pos:line="6" pos:column="66">pattern<pos:position pos:line="6" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="6" pos:column="75">'/'<pos:position pos:line="6" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="80"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">rak<pos:position pos:line="7" pos:column="6"/></name><operator pos:line="7" pos:column="6">::<pos:position pos:line="7" pos:column="8"/></operator><name><name pos:line="7" pos:column="8">split_iterator_t<pos:position pos:line="7" pos:column="24"/></name><argument_list type="generic" pos:line="7" pos:column="24">&lt;<argument><expr><name><name pos:line="7" pos:column="25">std<pos:position pos:line="7" pos:column="28"/></name><operator pos:line="7" pos:column="28">::<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="30">string<pos:position pos:line="7" pos:column="36"/></name></name></expr></argument>&gt;<pos:position pos:line="7" pos:column="40"/></argument_list></name></name></type> <name pos:line="7" pos:column="38">last<pos:position pos:line="7" pos:column="42"/></name> <init pos:line="7" pos:column="43">= <expr><call><name><name pos:line="7" pos:column="45">rak<pos:position pos:line="7" pos:column="48"/></name><operator pos:line="7" pos:column="48">::<pos:position pos:line="7" pos:column="50"/></operator><name pos:line="7" pos:column="50">split_iterator<pos:position pos:line="7" pos:column="64"/></name></name><argument_list pos:line="7" pos:column="64">(<argument><expr><name pos:line="7" pos:column="65">pattern<pos:position pos:line="7" pos:column="72"/></name></expr></argument>)<pos:position pos:line="7" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="74"/></decl_stmt>
    
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">first<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">==<pos:position pos:line="9" pos:column="15"/></operator> <name pos:line="9" pos:column="16">last<pos:position pos:line="9" pos:column="20"/></name></expr>)<pos:position pos:line="9" pos:column="21"/></condition><then pos:line="9" pos:column="21">
    <block type="pseudo"><return pos:line="10" pos:column="5">return;<pos:position pos:line="10" pos:column="12"/></return></block></then></if>

  <comment type="line" pos:line="12" pos:column="3">// Check for initial '/' that indicates the root.</comment>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><call><name><operator pos:line="13" pos:column="7">(<pos:position pos:line="13" pos:column="8"/></operator><operator pos:line="13" pos:column="8">*<pos:position pos:line="13" pos:column="9"/></operator><name pos:line="13" pos:column="9">first<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">)<pos:position pos:line="13" pos:column="15"/></operator><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">empty<pos:position pos:line="13" pos:column="21"/></name></name><argument_list pos:line="13" pos:column="21">()<pos:position pos:line="13" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="24"/></condition><then pos:line="13" pos:column="24"> <block pos:line="13" pos:column="25">{
    <expr_stmt><expr><call><name><name pos:line="14" pos:column="5">currentCache<pos:position pos:line="14" pos:column="17"/></name><operator pos:line="14" pos:column="17">.<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">push_back<pos:position pos:line="14" pos:column="27"/></name></name><argument_list pos:line="14" pos:column="27">(<argument><expr><call><name><name pos:line="14" pos:column="28">utils<pos:position pos:line="14" pos:column="33"/></name><operator pos:line="14" pos:column="33">::<pos:position pos:line="14" pos:column="35"/></operator><name pos:line="14" pos:column="35">Directory<pos:position pos:line="14" pos:column="44"/></name></name><argument_list pos:line="14" pos:column="44">(<argument><expr><literal type="string" pos:line="14" pos:column="45">"/"<pos:position pos:line="14" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="15" pos:column="5">++<pos:position pos:line="15" pos:column="7"/></operator><name pos:line="15" pos:column="7">first<pos:position pos:line="15" pos:column="12"/></name></expr>;<pos:position pos:line="15" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></then> <elseif pos:line="16" pos:column="5">else <if pos:line="16" pos:column="10">if <condition pos:line="16" pos:column="13">(<expr><call><name><name pos:line="16" pos:column="14">rak<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">::<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="19">trim<pos:position pos:line="16" pos:column="23"/></name></name><argument_list pos:line="16" pos:column="23">(<argument><expr><operator pos:line="16" pos:column="24">*<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">first<pos:position pos:line="16" pos:column="30"/></name></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></call> <operator pos:line="16" pos:column="32">==<pos:position pos:line="16" pos:column="34"/></operator> <literal type="string" pos:line="16" pos:column="35">"~"<pos:position pos:line="16" pos:column="38"/></literal></expr>)<pos:position pos:line="16" pos:column="39"/></condition><then pos:line="16" pos:column="39"> <block pos:line="16" pos:column="40">{
    <expr_stmt><expr><call><name><name pos:line="17" pos:column="5">currentCache<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">.<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">push_back<pos:position pos:line="17" pos:column="27"/></name></name><argument_list pos:line="17" pos:column="27">(<argument><expr><call><name><name pos:line="17" pos:column="28">utils<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">::<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="35">Directory<pos:position pos:line="17" pos:column="44"/></name></name><argument_list pos:line="17" pos:column="44">(<argument><expr><literal type="string" pos:line="17" pos:column="45">"~"<pos:position pos:line="17" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="18" pos:column="5">++<pos:position pos:line="18" pos:column="7"/></operator><name pos:line="18" pos:column="7">first<pos:position pos:line="18" pos:column="12"/></name></expr>;<pos:position pos:line="18" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if></elseif> <else pos:line="19" pos:column="5">else <block pos:line="19" pos:column="10">{
    <expr_stmt><expr><call><name><name pos:line="20" pos:column="5">currentCache<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">.<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">push_back<pos:position pos:line="20" pos:column="27"/></name></name><argument_list pos:line="20" pos:column="27">(<argument><expr><call><name><name pos:line="20" pos:column="28">utils<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">::<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="35">Directory<pos:position pos:line="20" pos:column="44"/></name></name><argument_list pos:line="20" pos:column="44">(<argument><expr><literal type="string" pos:line="20" pos:column="45">"."<pos:position pos:line="20" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="51"/></expr_stmt>
  }<pos:position pos:line="21" pos:column="4"/></block></else></if>

  <comment type="line" pos:line="23" pos:column="3">// Might be an idea to use depth-first search instead.</comment>

  <for pos:line="25" pos:column="3">for <control pos:line="25" pos:column="7">(<init pos:line="25" pos:column="8">;<pos:position pos:line="25" pos:column="9"/></init> <condition><expr><name pos:line="25" pos:column="10">first<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">!=<pos:position pos:line="25" pos:column="18"/></operator> <name pos:line="25" pos:column="19">last<pos:position pos:line="25" pos:column="23"/></name></expr>;<pos:position pos:line="25" pos:column="24"/></condition> <incr><expr><operator pos:line="25" pos:column="25">++<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="27">first<pos:position pos:line="25" pos:column="32"/></name></expr></incr>)<pos:position pos:line="25" pos:column="33"/></control> <block pos:line="25" pos:column="34">{
    <decl_stmt><decl><type><name><name pos:line="26" pos:column="5">rak<pos:position pos:line="26" pos:column="8"/></name><operator pos:line="26" pos:column="8">::<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">regex<pos:position pos:line="26" pos:column="15"/></name></name></type> <name pos:line="26" pos:column="16">r<pos:position pos:line="26" pos:column="17"/></name><argument_list pos:line="26" pos:column="17">(<argument><expr><operator pos:line="26" pos:column="18">*<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="19">first<pos:position pos:line="26" pos:column="24"/></name></expr></argument>)<pos:position pos:line="26" pos:column="25"/></argument_list></decl>;<pos:position pos:line="26" pos:column="26"/></decl_stmt>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><call><name><name pos:line="28" pos:column="9">r<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">.<pos:position pos:line="28" pos:column="11"/></operator><name pos:line="28" pos:column="11">pattern<pos:position pos:line="28" pos:column="18"/></name></name><argument_list pos:line="28" pos:column="18">()<pos:position pos:line="28" pos:column="20"/></argument_list></call><operator pos:line="28" pos:column="20">.<pos:position pos:line="28" pos:column="21"/></operator><call><name pos:line="28" pos:column="21">empty<pos:position pos:line="28" pos:column="26"/></name><argument_list pos:line="28" pos:column="26">()<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="29"/></condition><then pos:line="28" pos:column="29">
      <block type="pseudo"><continue pos:line="29" pos:column="7">continue;<pos:position pos:line="29" pos:column="16"/></continue></block></then></if>

    <comment type="line" pos:line="31" pos:column="5">// Special case for ".."?</comment>

    <for pos:line="33" pos:column="5">for <control pos:line="33" pos:column="9">(<init><decl><type><name><name pos:line="33" pos:column="10">std<pos:position pos:line="33" pos:column="13"/></name><operator pos:line="33" pos:column="13">::<pos:position pos:line="33" pos:column="15"/></operator><name><name pos:line="33" pos:column="15">vector<pos:position pos:line="33" pos:column="21"/></name><argument_list type="generic" pos:line="33" pos:column="21">&lt;<argument><expr><name><name pos:line="33" pos:column="22">utils<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">::<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="29">Directory<pos:position pos:line="33" pos:column="38"/></name></name></expr></argument>&gt;<pos:position pos:line="33" pos:column="42"/></argument_list></name><operator pos:line="33" pos:column="39">::<pos:position pos:line="33" pos:column="41"/></operator><name pos:line="33" pos:column="41">iterator<pos:position pos:line="33" pos:column="49"/></name></name></type> <name pos:line="33" pos:column="50">itr<pos:position pos:line="33" pos:column="53"/></name> <init pos:line="33" pos:column="54">= <expr><call><name><name pos:line="33" pos:column="56">currentCache<pos:position pos:line="33" pos:column="68"/></name><operator pos:line="33" pos:column="68">.<pos:position pos:line="33" pos:column="69"/></operator><name pos:line="33" pos:column="69">begin<pos:position pos:line="33" pos:column="74"/></name></name><argument_list pos:line="33" pos:column="74">()<pos:position pos:line="33" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="77"/></init> <condition><expr><name pos:line="33" pos:column="78">itr<pos:position pos:line="33" pos:column="81"/></name> <operator pos:line="33" pos:column="82">!=<pos:position pos:line="33" pos:column="84"/></operator> <call><name><name pos:line="33" pos:column="85">currentCache<pos:position pos:line="33" pos:column="97"/></name><operator pos:line="33" pos:column="97">.<pos:position pos:line="33" pos:column="98"/></operator><name pos:line="33" pos:column="98">end<pos:position pos:line="33" pos:column="101"/></name></name><argument_list pos:line="33" pos:column="101">()<pos:position pos:line="33" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="104"/></condition> <incr><expr><operator pos:line="33" pos:column="105">++<pos:position pos:line="33" pos:column="107"/></operator><name pos:line="33" pos:column="107">itr<pos:position pos:line="33" pos:column="110"/></name></expr></incr>)<pos:position pos:line="33" pos:column="111"/></control> <block pos:line="33" pos:column="112">{
      <comment type="line" pos:line="34" pos:column="7">// Only include filenames starting with '.' if the pattern</comment>
      <comment type="line" pos:line="35" pos:column="7">// starts with the same.</comment>
      <expr_stmt><expr><call><name><name pos:line="36" pos:column="7">itr<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">-&gt;<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="12">update<pos:position pos:line="36" pos:column="18"/></name></name><argument_list pos:line="36" pos:column="18">(<argument><expr><call><name><name pos:line="36" pos:column="19">r<pos:position pos:line="36" pos:column="20"/></name><operator pos:line="36" pos:column="20">.<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="21">pattern<pos:position pos:line="36" pos:column="28"/></name></name><argument_list pos:line="36" pos:column="28">()<pos:position pos:line="36" pos:column="30"/></argument_list></call><index pos:line="36" pos:column="30">[<expr><literal type="number" pos:line="36" pos:column="31">0<pos:position pos:line="36" pos:column="32"/></literal></expr>]<pos:position pos:line="36" pos:column="33"/></index> <operator pos:line="36" pos:column="34">!=<pos:position pos:line="36" pos:column="36"/></operator> <literal type="char" pos:line="36" pos:column="37">'.'<pos:position pos:line="36" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><call><name><name pos:line="37" pos:column="7">itr<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">-&gt;<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="12">erase<pos:position pos:line="37" pos:column="17"/></name></name><argument_list pos:line="37" pos:column="17">(<argument><expr><call><name><name pos:line="37" pos:column="18">std<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">::<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="23">remove_if<pos:position pos:line="37" pos:column="32"/></name></name><argument_list pos:line="37" pos:column="32">(<argument><expr><call><name><name pos:line="37" pos:column="33">itr<pos:position pos:line="37" pos:column="36"/></name><operator pos:line="37" pos:column="36">-&gt;<pos:position pos:line="37" pos:column="41"/></operator><name pos:line="37" pos:column="38">begin<pos:position pos:line="37" pos:column="43"/></name></name><argument_list pos:line="37" pos:column="43">()<pos:position pos:line="37" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="37" pos:column="47">itr<pos:position pos:line="37" pos:column="50"/></name><operator pos:line="37" pos:column="50">-&gt;<pos:position pos:line="37" pos:column="55"/></operator><name pos:line="37" pos:column="52">end<pos:position pos:line="37" pos:column="55"/></name></name><argument_list pos:line="37" pos:column="55">()<pos:position pos:line="37" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="37" pos:column="59">std<pos:position pos:line="37" pos:column="62"/></name><operator pos:line="37" pos:column="62">::<pos:position pos:line="37" pos:column="64"/></operator><name pos:line="37" pos:column="64">not1<pos:position pos:line="37" pos:column="68"/></name></name><argument_list pos:line="37" pos:column="68">(<argument><expr><name pos:line="37" pos:column="69">r<pos:position pos:line="37" pos:column="70"/></name></expr></argument>)<pos:position pos:line="37" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="37" pos:column="74">itr<pos:position pos:line="37" pos:column="77"/></name><operator pos:line="37" pos:column="77">-&gt;<pos:position pos:line="37" pos:column="82"/></operator><name pos:line="37" pos:column="79">end<pos:position pos:line="37" pos:column="82"/></name></name><argument_list pos:line="37" pos:column="82">()<pos:position pos:line="37" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="86"/></expr_stmt>

      <expr_stmt><expr><call><name><name pos:line="39" pos:column="7">std<pos:position pos:line="39" pos:column="10"/></name><operator pos:line="39" pos:column="10">::<pos:position pos:line="39" pos:column="12"/></operator><name pos:line="39" pos:column="12">transform<pos:position pos:line="39" pos:column="21"/></name></name><argument_list pos:line="39" pos:column="21">(<argument><expr><call><name><name pos:line="39" pos:column="22">itr<pos:position pos:line="39" pos:column="25"/></name><operator pos:line="39" pos:column="25">-&gt;<pos:position pos:line="39" pos:column="30"/></operator><name pos:line="39" pos:column="27">begin<pos:position pos:line="39" pos:column="32"/></name></name><argument_list pos:line="39" pos:column="32">()<pos:position pos:line="39" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="39" pos:column="36">itr<pos:position pos:line="39" pos:column="39"/></name><operator pos:line="39" pos:column="39">-&gt;<pos:position pos:line="39" pos:column="44"/></operator><name pos:line="39" pos:column="41">end<pos:position pos:line="39" pos:column="44"/></name></name><argument_list pos:line="39" pos:column="44">()<pos:position pos:line="39" pos:column="46"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="39" pos:column="48">std<pos:position pos:line="39" pos:column="51"/></name><operator pos:line="39" pos:column="51">::<pos:position pos:line="39" pos:column="53"/></operator><name pos:line="39" pos:column="53">back_inserter<pos:position pos:line="39" pos:column="66"/></name></name><argument_list pos:line="39" pos:column="66">(<argument><expr><name pos:line="39" pos:column="67">nextCache<pos:position pos:line="39" pos:column="76"/></name></expr></argument>)<pos:position pos:line="39" pos:column="77"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="39" pos:column="79">std<pos:position pos:line="39" pos:column="82"/></name><operator pos:line="39" pos:column="82">::<pos:position pos:line="39" pos:column="84"/></operator><name pos:line="39" pos:column="84">bind1st<pos:position pos:line="39" pos:column="91"/></name></name><argument_list pos:line="39" pos:column="91">(<argument><expr><call><name><name pos:line="39" pos:column="92">std<pos:position pos:line="39" pos:column="95"/></name><operator pos:line="39" pos:column="95">::<pos:position pos:line="39" pos:column="97"/></operator><name><name pos:line="39" pos:column="97">plus<pos:position pos:line="39" pos:column="101"/></name><argument_list type="generic" pos:line="39" pos:column="101">&lt;<argument><expr><name><name pos:line="39" pos:column="102">std<pos:position pos:line="39" pos:column="105"/></name><operator pos:line="39" pos:column="105">::<pos:position pos:line="39" pos:column="107"/></operator><name pos:line="39" pos:column="107">string<pos:position pos:line="39" pos:column="113"/></name></name></expr></argument>&gt;<pos:position pos:line="39" pos:column="117"/></argument_list></name></name><argument_list pos:line="39" pos:column="114">()<pos:position pos:line="39" pos:column="116"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="39" pos:column="118">itr<pos:position pos:line="39" pos:column="121"/></name><operator pos:line="39" pos:column="121">-&gt;<pos:position pos:line="39" pos:column="126"/></operator><name pos:line="39" pos:column="123">get_path<pos:position pos:line="39" pos:column="131"/></name></name><argument_list pos:line="39" pos:column="131">()<pos:position pos:line="39" pos:column="133"/></argument_list></call> <operator pos:line="39" pos:column="134">+<pos:position pos:line="39" pos:column="135"/></operator> <literal type="string" pos:line="39" pos:column="136">"/"<pos:position pos:line="39" pos:column="139"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="140"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="141"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="142"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name><name pos:line="42" pos:column="5">currentCache<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">.<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="18">clear<pos:position pos:line="42" pos:column="23"/></name></name><argument_list pos:line="42" pos:column="23">()<pos:position pos:line="42" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="43" pos:column="5">currentCache<pos:position pos:line="43" pos:column="17"/></name><operator pos:line="43" pos:column="17">.<pos:position pos:line="43" pos:column="18"/></operator><name pos:line="43" pos:column="18">swap<pos:position pos:line="43" pos:column="22"/></name></name><argument_list pos:line="43" pos:column="22">(<argument><expr><name pos:line="43" pos:column="23">nextCache<pos:position pos:line="43" pos:column="32"/></name></expr></argument>)<pos:position pos:line="43" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="44" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name><name pos:line="46" pos:column="3">std<pos:position pos:line="46" pos:column="6"/></name><operator pos:line="46" pos:column="6">::<pos:position pos:line="46" pos:column="8"/></operator><name pos:line="46" pos:column="8">transform<pos:position pos:line="46" pos:column="17"/></name></name><argument_list pos:line="46" pos:column="17">(<argument><expr><call><name><name pos:line="46" pos:column="18">currentCache<pos:position pos:line="46" pos:column="30"/></name><operator pos:line="46" pos:column="30">.<pos:position pos:line="46" pos:column="31"/></operator><name pos:line="46" pos:column="31">begin<pos:position pos:line="46" pos:column="36"/></name></name><argument_list pos:line="46" pos:column="36">()<pos:position pos:line="46" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="46" pos:column="40">currentCache<pos:position pos:line="46" pos:column="52"/></name><operator pos:line="46" pos:column="52">.<pos:position pos:line="46" pos:column="53"/></operator><name pos:line="46" pos:column="53">end<pos:position pos:line="46" pos:column="56"/></name></name><argument_list pos:line="46" pos:column="56">()<pos:position pos:line="46" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="46" pos:column="60">std<pos:position pos:line="46" pos:column="63"/></name><operator pos:line="46" pos:column="63">::<pos:position pos:line="46" pos:column="65"/></operator><name pos:line="46" pos:column="65">back_inserter<pos:position pos:line="46" pos:column="78"/></name></name><argument_list pos:line="46" pos:column="78">(<argument><expr><operator pos:line="46" pos:column="79">*<pos:position pos:line="46" pos:column="80"/></operator><name pos:line="46" pos:column="80">paths<pos:position pos:line="46" pos:column="85"/></name></expr></argument>)<pos:position pos:line="46" pos:column="86"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="46" pos:column="88">std<pos:position pos:line="46" pos:column="91"/></name><operator pos:line="46" pos:column="91">::<pos:position pos:line="46" pos:column="93"/></operator><name pos:line="46" pos:column="93">mem_fun_ref<pos:position pos:line="46" pos:column="104"/></name></name><argument_list pos:line="46" pos:column="104">(<argument><expr><operator pos:line="46" pos:column="105">&amp;<pos:position pos:line="46" pos:column="110"/></operator><name><name pos:line="46" pos:column="106">utils<pos:position pos:line="46" pos:column="111"/></name><operator pos:line="46" pos:column="111">::<pos:position pos:line="46" pos:column="113"/></operator><name pos:line="46" pos:column="113">Directory<pos:position pos:line="46" pos:column="122"/></name><operator pos:line="46" pos:column="122">::<pos:position pos:line="46" pos:column="124"/></operator><name pos:line="46" pos:column="124">get_path<pos:position pos:line="46" pos:column="132"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="133"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="134"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="135"/></expr_stmt>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
