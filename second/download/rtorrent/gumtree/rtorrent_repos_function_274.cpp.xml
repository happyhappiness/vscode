<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_274.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">SCgiTask<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">receive_write<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name pos:line="2" pos:column="31">char<pos:position pos:line="2" pos:column="35"/></name><modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type> <name pos:line="2" pos:column="37">buffer<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">uint32_t<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">length<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list> <block pos:line="2" pos:column="62">{
  <comment type="line" pos:line="3" pos:column="3">// Need to cast due to a bug in MacOSX gcc-4.0.1.</comment>
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name pos:line="4" pos:column="7">length<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">+<pos:position pos:line="4" pos:column="15"/></operator> <literal type="number" pos:line="4" pos:column="16">256<pos:position pos:line="4" pos:column="19"/></literal> <operator pos:line="4" pos:column="20">&gt;<pos:position pos:line="4" pos:column="24"/></operator> <call><name><name pos:line="4" pos:column="22">std<pos:position pos:line="4" pos:column="25"/></name><operator pos:line="4" pos:column="25">::<pos:position pos:line="4" pos:column="27"/></operator><name pos:line="4" pos:column="27">max<pos:position pos:line="4" pos:column="30"/></name></name><argument_list pos:line="4" pos:column="30">(<argument><expr><name pos:line="4" pos:column="31">m_bufferSize<pos:position pos:line="4" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="4" pos:column="45">(<pos:position pos:line="4" pos:column="46"/></operator><name pos:line="4" pos:column="46">unsigned<pos:position pos:line="4" pos:column="54"/></name> <name pos:line="4" pos:column="55">int<pos:position pos:line="4" pos:column="58"/></name><operator pos:line="4" pos:column="58">)<pos:position pos:line="4" pos:column="59"/></operator><name pos:line="4" pos:column="59">default_buffer_size<pos:position pos:line="4" pos:column="78"/></name></expr></argument>)<pos:position pos:line="4" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="80"/></condition><then pos:line="4" pos:column="80"> <block pos:line="4" pos:column="81">{
    <expr_stmt><expr><operator pos:line="5" pos:column="5">delete<pos:position pos:line="5" pos:column="11"/></operator> <index pos:line="5" pos:column="12">[]<pos:position pos:line="5" pos:column="14"/></index> <name pos:line="5" pos:column="15">m_buffer<pos:position pos:line="5" pos:column="23"/></name></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">m_buffer<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">=<pos:position pos:line="6" pos:column="15"/></operator> <operator pos:line="6" pos:column="16">new<pos:position pos:line="6" pos:column="19"/></operator> <name><name pos:line="6" pos:column="20">char<pos:position pos:line="6" pos:column="24"/></name><index pos:line="6" pos:column="24">[<expr><name pos:line="6" pos:column="25">length<pos:position pos:line="6" pos:column="31"/></name> <operator pos:line="6" pos:column="32">+<pos:position pos:line="6" pos:column="33"/></operator> <literal type="number" pos:line="6" pos:column="34">256<pos:position pos:line="6" pos:column="37"/></literal></expr>]<pos:position pos:line="6" pos:column="38"/></index></name></expr>;<pos:position pos:line="6" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="7" pos:column="4"/></block></then></if>

  <comment type="line" pos:line="9" pos:column="3">// Who ever bothers to check the return value?</comment>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">headerSize<pos:position pos:line="10" pos:column="17"/></name> <init pos:line="10" pos:column="18">= <expr><call><name pos:line="10" pos:column="20">sprintf<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">m_buffer<pos:position pos:line="10" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="38">"Status: 200 OK\r\nContent-Type: text/xml\r\nContent-Length: %i\r\n\r\n"<pos:position pos:line="10" pos:column="110"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="112">length<pos:position pos:line="10" pos:column="118"/></name></expr></argument>)<pos:position pos:line="10" pos:column="119"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="120"/></decl_stmt>

  <expr_stmt><expr><name pos:line="12" pos:column="3">m_position<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <name pos:line="12" pos:column="16">m_buffer<pos:position pos:line="12" pos:column="24"/></name></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="13" pos:column="3">m_bufferSize<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <name pos:line="13" pos:column="18">length<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">+<pos:position pos:line="13" pos:column="26"/></operator> <name pos:line="13" pos:column="27">headerSize<pos:position pos:line="13" pos:column="37"/></name></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
  
  <expr_stmt><expr><call><name><name pos:line="15" pos:column="3">std<pos:position pos:line="15" pos:column="6"/></name><operator pos:line="15" pos:column="6">::<pos:position pos:line="15" pos:column="8"/></operator><name pos:line="15" pos:column="8">memcpy<pos:position pos:line="15" pos:column="14"/></name></name><argument_list pos:line="15" pos:column="14">(<argument><expr><name pos:line="15" pos:column="15">m_buffer<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">+<pos:position pos:line="15" pos:column="25"/></operator> <name pos:line="15" pos:column="26">headerSize<pos:position pos:line="15" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="38">buffer<pos:position pos:line="15" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="46">length<pos:position pos:line="15" pos:column="52"/></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="54"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">event_write<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">()<pos:position pos:line="16" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="17"/></expr_stmt>

  <return pos:line="18" pos:column="3">return <expr><literal type="boolean" pos:line="18" pos:column="10">true<pos:position pos:line="18" pos:column="14"/></literal></expr>;<pos:position pos:line="18" pos:column="15"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
