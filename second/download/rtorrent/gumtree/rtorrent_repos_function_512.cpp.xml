<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_512.cpp" pos:tabs="8"><function type="operator"><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">operator <name pos:line="1" pos:column="15">()<pos:position pos:line="1" pos:column="17"/></name></name> <parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">Download<pos:position pos:line="1" pos:column="27"/></name><modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type> <name pos:line="1" pos:column="29">d1<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list> <specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <block pos:line="1" pos:column="39">{
    <for pos:line="2" pos:column="5">for <control pos:line="2" pos:column="9">(<init><decl><type><name><name pos:line="2" pos:column="10">View<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">filter_list<pos:position pos:line="2" pos:column="27"/></name><operator pos:line="2" pos:column="27">::<pos:position pos:line="2" pos:column="29"/></operator><name pos:line="2" pos:column="29">const_iterator<pos:position pos:line="2" pos:column="43"/></name></name></type> <name pos:line="2" pos:column="44">itr<pos:position pos:line="2" pos:column="47"/></name> <init pos:line="2" pos:column="48">= <expr><call><name><name pos:line="2" pos:column="50">m_filter<pos:position pos:line="2" pos:column="58"/></name><operator pos:line="2" pos:column="58">.<pos:position pos:line="2" pos:column="59"/></operator><name pos:line="2" pos:column="59">begin<pos:position pos:line="2" pos:column="64"/></name></name><argument_list pos:line="2" pos:column="64">()<pos:position pos:line="2" pos:column="66"/></argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name pos:line="2" pos:column="68">last<pos:position pos:line="2" pos:column="72"/></name> <init pos:line="2" pos:column="73">= <expr><call><name><name pos:line="2" pos:column="75">m_filter<pos:position pos:line="2" pos:column="83"/></name><operator pos:line="2" pos:column="83">.<pos:position pos:line="2" pos:column="84"/></operator><name pos:line="2" pos:column="84">end<pos:position pos:line="2" pos:column="87"/></name></name><argument_list pos:line="2" pos:column="87">()<pos:position pos:line="2" pos:column="89"/></argument_list></call></expr></init></decl>;<pos:position pos:line="2" pos:column="90"/></init> <condition><expr><name pos:line="2" pos:column="91">itr<pos:position pos:line="2" pos:column="94"/></name> <operator pos:line="2" pos:column="95">!=<pos:position pos:line="2" pos:column="97"/></operator> <name pos:line="2" pos:column="98">last<pos:position pos:line="2" pos:column="102"/></name></expr>;<pos:position pos:line="2" pos:column="103"/></condition> <incr><expr><operator pos:line="2" pos:column="104">++<pos:position pos:line="2" pos:column="106"/></operator><name pos:line="2" pos:column="106">itr<pos:position pos:line="2" pos:column="109"/></name></expr></incr>)<pos:position pos:line="2" pos:column="110"/></control>
      <block type="pseudo"><if pos:line="3" pos:column="7">if <condition pos:line="3" pos:column="10">(<expr><operator pos:line="3" pos:column="11">!<pos:position pos:line="3" pos:column="12"/></operator><call pos:line="3" pos:column="12">(<modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier><modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier><name pos:line="3" pos:column="15">itr<pos:position pos:line="3" pos:column="18"/></name>)<argument_list pos:line="3" pos:column="19">(<argument><expr><name pos:line="3" pos:column="20">d1<pos:position pos:line="3" pos:column="22"/></name></expr></argument>)<pos:position pos:line="3" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="24"/></condition><then pos:line="3" pos:column="24">
        <block type="pseudo"><return pos:line="4" pos:column="9">return <expr><literal type="boolean" pos:line="4" pos:column="16">false<pos:position pos:line="4" pos:column="21"/></literal></expr>;<pos:position pos:line="4" pos:column="22"/></return></block></then></if></block></for>

    <comment type="line" pos:line="6" pos:column="5">// The default filter action is to return true, to not filter the</comment>
    <comment type="line" pos:line="7" pos:column="5">// download out.</comment>
    <return pos:line="8" pos:column="5">return <expr><literal type="boolean" pos:line="8" pos:column="12">true<pos:position pos:line="8" pos:column="16"/></literal></expr>;<pos:position pos:line="8" pos:column="17"/></return>
  }<pos:position pos:line="9" pos:column="4"/></block></function></unit>
