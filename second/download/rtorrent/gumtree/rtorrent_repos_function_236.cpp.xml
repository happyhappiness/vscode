<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_236.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">xmlrpc_value<pos:position pos:line="1" pos:column="13"/></name><modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type>
<name pos:line="2" pos:column="1">object_to_xmlrpc<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">xmlrpc_env<pos:position pos:line="2" pos:column="28"/></name><modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type> <name pos:line="2" pos:column="30">env<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name><name pos:line="2" pos:column="41">torrent<pos:position pos:line="2" pos:column="48"/></name><operator pos:line="2" pos:column="48">::<pos:position pos:line="2" pos:column="50"/></operator><name pos:line="2" pos:column="50">Object<pos:position pos:line="2" pos:column="56"/></name></name><modifier pos:line="2" pos:column="56">&amp;<pos:position pos:line="2" pos:column="61"/></modifier></type> <name pos:line="2" pos:column="58">object<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list> <block pos:line="2" pos:column="66">{
  <switch pos:line="3" pos:column="3">switch <condition pos:line="3" pos:column="10">(<expr><call><name><name pos:line="3" pos:column="11">object<pos:position pos:line="3" pos:column="17"/></name><operator pos:line="3" pos:column="17">.<pos:position pos:line="3" pos:column="18"/></operator><name pos:line="3" pos:column="18">type<pos:position pos:line="3" pos:column="22"/></name></name><argument_list pos:line="3" pos:column="22">()<pos:position pos:line="3" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="25"/></condition> <block pos:line="3" pos:column="26">{
  <case pos:line="4" pos:column="3">case <expr><name><name pos:line="4" pos:column="8">torrent<pos:position pos:line="4" pos:column="15"/></name><operator pos:line="4" pos:column="15">::<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">Object<pos:position pos:line="4" pos:column="23"/></name><operator pos:line="4" pos:column="23">::<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">TYPE_VALUE<pos:position pos:line="4" pos:column="35"/></name></name></expr>:<pos:position pos:line="4" pos:column="36"/></case>

<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">XMLRPC_HAVE_I8<pos:position pos:line="6" pos:column="22"/></name></cpp:ifdef>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name><name pos:line="7" pos:column="9">xmlrpc<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">.<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">dialect<pos:position pos:line="7" pos:column="23"/></name></name><argument_list pos:line="7" pos:column="23">()<pos:position pos:line="7" pos:column="25"/></argument_list></call> <operator pos:line="7" pos:column="26">!=<pos:position pos:line="7" pos:column="28"/></operator> <name><name pos:line="7" pos:column="29">XmlRpc<pos:position pos:line="7" pos:column="35"/></name><operator pos:line="7" pos:column="35">::<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="37">dialect_generic<pos:position pos:line="7" pos:column="52"/></name></name></expr>)<pos:position pos:line="7" pos:column="53"/></condition><then pos:line="7" pos:column="53">
      <block type="pseudo"><return pos:line="8" pos:column="7">return <expr><call><name pos:line="8" pos:column="14">xmlrpc_i8_new<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><name pos:line="8" pos:column="28">env<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><call><name><name pos:line="8" pos:column="33">object<pos:position pos:line="8" pos:column="39"/></name><operator pos:line="8" pos:column="39">.<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="40">as_value<pos:position pos:line="8" pos:column="48"/></name></name><argument_list pos:line="8" pos:column="48">()<pos:position pos:line="8" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="52"/></return></block></then></if>
<cpp:else pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">else<pos:position pos:line="9" pos:column="6"/></cpp:directive></cpp:else>
    <return pos:line="10" pos:column="5">return <expr><call><name pos:line="10" pos:column="12">xmlrpc_int_new<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><name pos:line="10" pos:column="27">env<pos:position pos:line="10" pos:column="30"/></name></expr></argument>, <argument><expr><call><name><name pos:line="10" pos:column="32">object<pos:position pos:line="10" pos:column="38"/></name><operator pos:line="10" pos:column="38">.<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="39">as_value<pos:position pos:line="10" pos:column="47"/></name></name><argument_list pos:line="10" pos:column="47">()<pos:position pos:line="10" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="51"/></return>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

  <case pos:line="13" pos:column="3">case <expr><name><name pos:line="13" pos:column="8">torrent<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">::<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">Object<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">::<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="25">TYPE_STRING<pos:position pos:line="13" pos:column="36"/></name></name></expr>:<pos:position pos:line="13" pos:column="37"/></case>
    <return pos:line="14" pos:column="5">return <expr><call><name pos:line="14" pos:column="12">xmlrpc_string_new<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">env<pos:position pos:line="14" pos:column="33"/></name></expr></argument>, <argument><expr><call><name><name pos:line="14" pos:column="35">object<pos:position pos:line="14" pos:column="41"/></name><operator pos:line="14" pos:column="41">.<pos:position pos:line="14" pos:column="42"/></operator><name pos:line="14" pos:column="42">as_string<pos:position pos:line="14" pos:column="51"/></name></name><argument_list pos:line="14" pos:column="51">()<pos:position pos:line="14" pos:column="53"/></argument_list></call><operator pos:line="14" pos:column="53">.<pos:position pos:line="14" pos:column="54"/></operator><call><name pos:line="14" pos:column="54">c_str<pos:position pos:line="14" pos:column="59"/></name><argument_list pos:line="14" pos:column="59">()<pos:position pos:line="14" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="63"/></return>

  <case pos:line="16" pos:column="3">case <expr><name><name pos:line="16" pos:column="8">torrent<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">::<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">Object<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">::<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">TYPE_LIST<pos:position pos:line="16" pos:column="34"/></name></name></expr>:<pos:position pos:line="16" pos:column="35"/></case>
  <block pos:line="17" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">xmlrpc_value<pos:position pos:line="18" pos:column="17"/></name><modifier pos:line="18" pos:column="17">*<pos:position pos:line="18" pos:column="18"/></modifier></type> <name pos:line="18" pos:column="19">result<pos:position pos:line="18" pos:column="25"/></name> <init pos:line="18" pos:column="26">= <expr><call><name pos:line="18" pos:column="28">xmlrpc_array_new<pos:position pos:line="18" pos:column="44"/></name><argument_list pos:line="18" pos:column="44">(<argument><expr><name pos:line="18" pos:column="45">env<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="50"/></decl_stmt>
    
    <for pos:line="20" pos:column="5">for <control pos:line="20" pos:column="9">(<init><decl><type><name><name pos:line="20" pos:column="10">torrent<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">::<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">Object<pos:position pos:line="20" pos:column="25"/></name><operator pos:line="20" pos:column="25">::<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="27">list_type<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">::<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="38">const_iterator<pos:position pos:line="20" pos:column="52"/></name></name></type> <name pos:line="20" pos:column="53">itr<pos:position pos:line="20" pos:column="56"/></name> <init pos:line="20" pos:column="57">= <expr><call><name><name pos:line="20" pos:column="59">object<pos:position pos:line="20" pos:column="65"/></name><operator pos:line="20" pos:column="65">.<pos:position pos:line="20" pos:column="66"/></operator><name pos:line="20" pos:column="66">as_list<pos:position pos:line="20" pos:column="73"/></name></name><argument_list pos:line="20" pos:column="73">()<pos:position pos:line="20" pos:column="75"/></argument_list></call><operator pos:line="20" pos:column="75">.<pos:position pos:line="20" pos:column="76"/></operator><call><name pos:line="20" pos:column="76">begin<pos:position pos:line="20" pos:column="81"/></name><argument_list pos:line="20" pos:column="81">()<pos:position pos:line="20" pos:column="83"/></argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name pos:line="20" pos:column="85">last<pos:position pos:line="20" pos:column="89"/></name> <init pos:line="20" pos:column="90">= <expr><call><name><name pos:line="20" pos:column="92">object<pos:position pos:line="20" pos:column="98"/></name><operator pos:line="20" pos:column="98">.<pos:position pos:line="20" pos:column="99"/></operator><name pos:line="20" pos:column="99">as_list<pos:position pos:line="20" pos:column="106"/></name></name><argument_list pos:line="20" pos:column="106">()<pos:position pos:line="20" pos:column="108"/></argument_list></call><operator pos:line="20" pos:column="108">.<pos:position pos:line="20" pos:column="109"/></operator><call><name pos:line="20" pos:column="109">end<pos:position pos:line="20" pos:column="112"/></name><argument_list pos:line="20" pos:column="112">()<pos:position pos:line="20" pos:column="114"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="115"/></init> <condition><expr><name pos:line="20" pos:column="116">itr<pos:position pos:line="20" pos:column="119"/></name> <operator pos:line="20" pos:column="120">!=<pos:position pos:line="20" pos:column="122"/></operator> <name pos:line="20" pos:column="123">last<pos:position pos:line="20" pos:column="127"/></name></expr>;<pos:position pos:line="20" pos:column="128"/></condition> <incr><expr><name pos:line="20" pos:column="129">itr<pos:position pos:line="20" pos:column="132"/></name><operator pos:line="20" pos:column="132">++<pos:position pos:line="20" pos:column="134"/></operator></expr></incr>)<pos:position pos:line="20" pos:column="135"/></control>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="7">xmlrpc_array_append_item<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">env<pos:position pos:line="21" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="37">result<pos:position pos:line="21" pos:column="43"/></name></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="45">object_to_xmlrpc<pos:position pos:line="21" pos:column="61"/></name><argument_list pos:line="21" pos:column="61">(<argument><expr><name pos:line="21" pos:column="62">env<pos:position pos:line="21" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="67">*<pos:position pos:line="21" pos:column="68"/></operator><name pos:line="21" pos:column="68">itr<pos:position pos:line="21" pos:column="71"/></name></expr></argument>)<pos:position pos:line="21" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="74"/></expr_stmt></block></for>

    <return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">result<pos:position pos:line="23" pos:column="18"/></name></expr>;<pos:position pos:line="23" pos:column="19"/></return>
  }<pos:position pos:line="24" pos:column="4"/></block>

  <case pos:line="26" pos:column="3">case <expr><name><name pos:line="26" pos:column="8">torrent<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">::<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="17">Object<pos:position pos:line="26" pos:column="23"/></name><operator pos:line="26" pos:column="23">::<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="25">TYPE_MAP<pos:position pos:line="26" pos:column="33"/></name></name></expr>:<pos:position pos:line="26" pos:column="34"/></case>
  <block pos:line="27" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="28" pos:column="5">xmlrpc_value<pos:position pos:line="28" pos:column="17"/></name><modifier pos:line="28" pos:column="17">*<pos:position pos:line="28" pos:column="18"/></modifier></type> <name pos:line="28" pos:column="19">result<pos:position pos:line="28" pos:column="25"/></name> <init pos:line="28" pos:column="26">= <expr><call><name pos:line="28" pos:column="28">xmlrpc_struct_new<pos:position pos:line="28" pos:column="45"/></name><argument_list pos:line="28" pos:column="45">(<argument><expr><name pos:line="28" pos:column="46">env<pos:position pos:line="28" pos:column="49"/></name></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="51"/></decl_stmt>
    
    <for pos:line="30" pos:column="5">for <control pos:line="30" pos:column="9">(<init><decl><type><name><name pos:line="30" pos:column="10">torrent<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">::<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="19">Object<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">::<pos:position pos:line="30" pos:column="27"/></operator><name pos:line="30" pos:column="27">map_type<pos:position pos:line="30" pos:column="35"/></name><operator pos:line="30" pos:column="35">::<pos:position pos:line="30" pos:column="37"/></operator><name pos:line="30" pos:column="37">const_iterator<pos:position pos:line="30" pos:column="51"/></name></name></type> <name pos:line="30" pos:column="52">itr<pos:position pos:line="30" pos:column="55"/></name> <init pos:line="30" pos:column="56">= <expr><call><name><name pos:line="30" pos:column="58">object<pos:position pos:line="30" pos:column="64"/></name><operator pos:line="30" pos:column="64">.<pos:position pos:line="30" pos:column="65"/></operator><name pos:line="30" pos:column="65">as_map<pos:position pos:line="30" pos:column="71"/></name></name><argument_list pos:line="30" pos:column="71">()<pos:position pos:line="30" pos:column="73"/></argument_list></call><operator pos:line="30" pos:column="73">.<pos:position pos:line="30" pos:column="74"/></operator><call><name pos:line="30" pos:column="74">begin<pos:position pos:line="30" pos:column="79"/></name><argument_list pos:line="30" pos:column="79">()<pos:position pos:line="30" pos:column="81"/></argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name pos:line="30" pos:column="83">last<pos:position pos:line="30" pos:column="87"/></name> <init pos:line="30" pos:column="88">= <expr><call><name><name pos:line="30" pos:column="90">object<pos:position pos:line="30" pos:column="96"/></name><operator pos:line="30" pos:column="96">.<pos:position pos:line="30" pos:column="97"/></operator><name pos:line="30" pos:column="97">as_map<pos:position pos:line="30" pos:column="103"/></name></name><argument_list pos:line="30" pos:column="103">()<pos:position pos:line="30" pos:column="105"/></argument_list></call><operator pos:line="30" pos:column="105">.<pos:position pos:line="30" pos:column="106"/></operator><call><name pos:line="30" pos:column="106">end<pos:position pos:line="30" pos:column="109"/></name><argument_list pos:line="30" pos:column="109">()<pos:position pos:line="30" pos:column="111"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="112"/></init> <condition><expr><name pos:line="30" pos:column="113">itr<pos:position pos:line="30" pos:column="116"/></name> <operator pos:line="30" pos:column="117">!=<pos:position pos:line="30" pos:column="119"/></operator> <name pos:line="30" pos:column="120">last<pos:position pos:line="30" pos:column="124"/></name></expr>;<pos:position pos:line="30" pos:column="125"/></condition> <incr><expr><name pos:line="30" pos:column="126">itr<pos:position pos:line="30" pos:column="129"/></name><operator pos:line="30" pos:column="129">++<pos:position pos:line="30" pos:column="131"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="132"/></control>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="7">xmlrpc_struct_set_value<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><name pos:line="31" pos:column="31">env<pos:position pos:line="31" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="36">result<pos:position pos:line="31" pos:column="42"/></name></expr></argument>, <argument><expr><call><name><name pos:line="31" pos:column="44">itr<pos:position pos:line="31" pos:column="47"/></name><operator pos:line="31" pos:column="47">-&gt;<pos:position pos:line="31" pos:column="52"/></operator><name pos:line="31" pos:column="49">first<pos:position pos:line="31" pos:column="54"/></name><operator pos:line="31" pos:column="54">.<pos:position pos:line="31" pos:column="55"/></operator><name pos:line="31" pos:column="55">c_str<pos:position pos:line="31" pos:column="60"/></name></name><argument_list pos:line="31" pos:column="60">()<pos:position pos:line="31" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="64">object_to_xmlrpc<pos:position pos:line="31" pos:column="80"/></name><argument_list pos:line="31" pos:column="80">(<argument><expr><name pos:line="31" pos:column="81">env<pos:position pos:line="31" pos:column="84"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="86">itr<pos:position pos:line="31" pos:column="89"/></name><operator pos:line="31" pos:column="89">-&gt;<pos:position pos:line="31" pos:column="94"/></operator><name pos:line="31" pos:column="91">second<pos:position pos:line="31" pos:column="97"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="98"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="100"/></expr_stmt></block></for>

    <return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">result<pos:position pos:line="33" pos:column="18"/></name></expr>;<pos:position pos:line="33" pos:column="19"/></return>
  }<pos:position pos:line="34" pos:column="4"/></block>

  <default pos:line="36" pos:column="3">default:<pos:position pos:line="36" pos:column="11"/></default>
    <return pos:line="37" pos:column="5">return <expr><call><name pos:line="37" pos:column="12">xmlrpc_int_new<pos:position pos:line="37" pos:column="26"/></name><argument_list pos:line="37" pos:column="26">(<argument><expr><name pos:line="37" pos:column="27">env<pos:position pos:line="37" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="32">0<pos:position pos:line="37" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="35"/></return>
  }<pos:position pos:line="38" pos:column="4"/></block></switch>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
