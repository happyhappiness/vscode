<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_409.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">PollManagerEPoll<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">poll<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name><name pos:line="2" pos:column="24">rak<pos:position pos:line="2" pos:column="27"/></name><operator pos:line="2" pos:column="27">::<pos:position pos:line="2" pos:column="29"/></operator><name pos:line="2" pos:column="29">timer<pos:position pos:line="2" pos:column="34"/></name></name></type> <name pos:line="2" pos:column="35">timeout<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list> <block pos:line="2" pos:column="44">{
  <comment type="line" pos:line="3" pos:column="3">// Add 1ms to ensure we don't idle loop due to the lack of</comment>
  <comment type="line" pos:line="4" pos:column="3">// resolution.</comment>
  <expr_stmt><expr><call><name><name pos:line="5" pos:column="3">torrent<pos:position pos:line="5" pos:column="10"/></name><operator pos:line="5" pos:column="10">::<pos:position pos:line="5" pos:column="12"/></operator><name pos:line="5" pos:column="12">perform<pos:position pos:line="5" pos:column="19"/></name></name><argument_list pos:line="5" pos:column="19">()<pos:position pos:line="5" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6" pos:column="3">timeout<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">=<pos:position pos:line="6" pos:column="12"/></operator> <call><name><name pos:line="6" pos:column="13">std<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">::<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="18">min<pos:position pos:line="6" pos:column="21"/></name></name><argument_list pos:line="6" pos:column="21">(<argument><expr><name pos:line="6" pos:column="22">timeout<pos:position pos:line="6" pos:column="29"/></name></expr></argument>, <argument><expr><call><name><name pos:line="6" pos:column="31">rak<pos:position pos:line="6" pos:column="34"/></name><operator pos:line="6" pos:column="34">::<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="36">timer<pos:position pos:line="6" pos:column="41"/></name></name><argument_list pos:line="6" pos:column="41">(<argument><expr><call><name><name pos:line="6" pos:column="42">torrent<pos:position pos:line="6" pos:column="49"/></name><operator pos:line="6" pos:column="49">::<pos:position pos:line="6" pos:column="51"/></operator><name pos:line="6" pos:column="51">next_timeout<pos:position pos:line="6" pos:column="63"/></name></name><argument_list pos:line="6" pos:column="63">()<pos:position pos:line="6" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="67"/></argument_list></call> <operator pos:line="6" pos:column="68">+<pos:position pos:line="6" pos:column="69"/></operator> <literal type="number" pos:line="6" pos:column="70">1000<pos:position pos:line="6" pos:column="74"/></literal></expr>;<pos:position pos:line="6" pos:column="75"/></expr_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><operator pos:line="8" pos:column="7">!<pos:position pos:line="8" pos:column="8"/></operator><call><name><name pos:line="8" pos:column="8">m_httpStack<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">.<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="20">empty<pos:position pos:line="8" pos:column="25"/></name></name><argument_list pos:line="8" pos:column="25">()<pos:position pos:line="8" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="28"/></condition><then pos:line="8" pos:column="28"> <block pos:line="8" pos:column="29">{
    <comment type="line" pos:line="9" pos:column="5">// When we're using libcurl we need to use select, but as this is</comment>
    <comment type="line" pos:line="10" pos:column="5">// inefficient we try avoiding it whenever possible.</comment>
<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if<pos:position pos:line="11" pos:column="4"/></cpp:directive> <expr><name pos:line="11" pos:column="5">defined<pos:position pos:line="11" pos:column="12"/></name> <name pos:line="11" pos:column="13">USE_VARIABLE_FDSET<pos:position pos:line="11" pos:column="31"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="12" pos:column="5">std<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">::<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">memset<pos:position pos:line="12" pos:column="16"/></name></name><argument_list pos:line="12" pos:column="16">(<argument><expr><name pos:line="12" pos:column="17">m_readSet<pos:position pos:line="12" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="28">0<pos:position pos:line="12" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="31">m_setSize<pos:position pos:line="12" pos:column="40"/></name></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="13" pos:column="5">std<pos:position pos:line="13" pos:column="8"/></name><operator pos:line="13" pos:column="8">::<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">memset<pos:position pos:line="13" pos:column="16"/></name></name><argument_list pos:line="13" pos:column="16">(<argument><expr><name pos:line="13" pos:column="17">m_writeSet<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="29">0<pos:position pos:line="13" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="32">m_setSize<pos:position pos:line="13" pos:column="41"/></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="14" pos:column="5">std<pos:position pos:line="14" pos:column="8"/></name><operator pos:line="14" pos:column="8">::<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">memset<pos:position pos:line="14" pos:column="16"/></name></name><argument_list pos:line="14" pos:column="16">(<argument><expr><name pos:line="14" pos:column="17">m_errorSet<pos:position pos:line="14" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="29">0<pos:position pos:line="14" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="32">m_setSize<pos:position pos:line="14" pos:column="41"/></name></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt>
<cpp:else pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">else<pos:position pos:line="15" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">FD_ZERO<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">m_readSet<pos:position pos:line="16" pos:column="22"/></name></expr></argument>)<pos:position pos:line="16" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">FD_ZERO<pos:position pos:line="17" pos:column="12"/></name><argument_list pos:line="17" pos:column="12">(<argument><expr><name pos:line="17" pos:column="13">m_writeSet<pos:position pos:line="17" pos:column="23"/></name></expr></argument>)<pos:position pos:line="17" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">FD_ZERO<pos:position pos:line="18" pos:column="12"/></name><argument_list pos:line="18" pos:column="12">(<argument><expr><name pos:line="18" pos:column="13">m_errorSet<pos:position pos:line="18" pos:column="23"/></name></expr></argument>)<pos:position pos:line="18" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>    
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">FD_SET<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><cast type="static" pos:line="20" pos:column="12">static_cast<argument_list type="generic" pos:line="20" pos:column="23">&lt;<argument><expr><name><name pos:line="20" pos:column="24">torrent<pos:position pos:line="20" pos:column="31"/></name><operator pos:line="20" pos:column="31">::<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="33">PollEPoll<pos:position pos:line="20" pos:column="42"/></name></name><operator pos:line="20" pos:column="42">*<pos:position pos:line="20" pos:column="43"/></operator></expr></argument>&gt;<pos:position pos:line="20" pos:column="47"/></argument_list><argument_list pos:line="20" pos:column="44">(<argument><expr><name pos:line="20" pos:column="45">m_poll<pos:position pos:line="20" pos:column="51"/></name></expr></argument>)<pos:position pos:line="20" pos:column="52"/></argument_list></cast><operator pos:line="20" pos:column="52">-&gt;<pos:position pos:line="20" pos:column="57"/></operator><call><name pos:line="20" pos:column="54">file_descriptor<pos:position pos:line="20" pos:column="69"/></name><argument_list pos:line="20" pos:column="69">()<pos:position pos:line="20" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="20" pos:column="73">m_readSet<pos:position pos:line="20" pos:column="82"/></name></expr></argument>)<pos:position pos:line="20" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="84"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="22" pos:column="5">unsigned<pos:position pos:line="22" pos:column="13"/></name> <name pos:line="22" pos:column="14">int<pos:position pos:line="22" pos:column="17"/></name></type> <name pos:line="22" pos:column="18">maxFd<pos:position pos:line="22" pos:column="23"/></name> <init pos:line="22" pos:column="24">= <expr><call><name><name pos:line="22" pos:column="26">std<pos:position pos:line="22" pos:column="29"/></name><operator pos:line="22" pos:column="29">::<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="31">max<pos:position pos:line="22" pos:column="34"/></name></name><argument_list pos:line="22" pos:column="34">(<argument><expr><operator pos:line="22" pos:column="35">(<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="36">unsigned<pos:position pos:line="22" pos:column="44"/></name> <name pos:line="22" pos:column="45">int<pos:position pos:line="22" pos:column="48"/></name><operator pos:line="22" pos:column="48">)<pos:position pos:line="22" pos:column="49"/></operator><cast type="static" pos:line="22" pos:column="49">static_cast<argument_list type="generic" pos:line="22" pos:column="60">&lt;<argument><expr><name><name pos:line="22" pos:column="61">torrent<pos:position pos:line="22" pos:column="68"/></name><operator pos:line="22" pos:column="68">::<pos:position pos:line="22" pos:column="70"/></operator><name pos:line="22" pos:column="70">PollEPoll<pos:position pos:line="22" pos:column="79"/></name></name><operator pos:line="22" pos:column="79">*<pos:position pos:line="22" pos:column="80"/></operator></expr></argument>&gt;<pos:position pos:line="22" pos:column="84"/></argument_list><argument_list pos:line="22" pos:column="81">(<argument><expr><name pos:line="22" pos:column="82">m_poll<pos:position pos:line="22" pos:column="88"/></name></expr></argument>)<pos:position pos:line="22" pos:column="89"/></argument_list></cast><operator pos:line="22" pos:column="89">-&gt;<pos:position pos:line="22" pos:column="94"/></operator><call><name pos:line="22" pos:column="91">file_descriptor<pos:position pos:line="22" pos:column="106"/></name><argument_list pos:line="22" pos:column="106">()<pos:position pos:line="22" pos:column="108"/></argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name pos:line="23" pos:column="35">m_httpStack<pos:position pos:line="23" pos:column="46"/></name><operator pos:line="23" pos:column="46">.<pos:position pos:line="23" pos:column="47"/></operator><name pos:line="23" pos:column="47">fdset<pos:position pos:line="23" pos:column="52"/></name></name><argument_list pos:line="23" pos:column="52">(<argument><expr><name pos:line="23" pos:column="53">m_readSet<pos:position pos:line="23" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="64">m_writeSet<pos:position pos:line="23" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="76">m_errorSet<pos:position pos:line="23" pos:column="86"/></name></expr></argument>)<pos:position pos:line="23" pos:column="87"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="88"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="89"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="25" pos:column="5">timeval<pos:position pos:line="25" pos:column="12"/></name></type> <name pos:line="25" pos:column="13">t<pos:position pos:line="25" pos:column="14"/></name> <init pos:line="25" pos:column="15">= <expr><call><name><name pos:line="25" pos:column="17">timeout<pos:position pos:line="25" pos:column="24"/></name><operator pos:line="25" pos:column="24">.<pos:position pos:line="25" pos:column="25"/></operator><name pos:line="25" pos:column="25">tval<pos:position pos:line="25" pos:column="29"/></name></name><argument_list pos:line="25" pos:column="29">()<pos:position pos:line="25" pos:column="31"/></argument_list></call></expr></init></decl>;<pos:position pos:line="25" pos:column="32"/></decl_stmt>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><call><name pos:line="27" pos:column="9">select<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><name pos:line="27" pos:column="16">maxFd<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">+<pos:position pos:line="27" pos:column="23"/></operator> <literal type="number" pos:line="27" pos:column="24">1<pos:position pos:line="27" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="27">m_readSet<pos:position pos:line="27" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="38">m_writeSet<pos:position pos:line="27" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="50">m_errorSet<pos:position pos:line="27" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="62">&amp;<pos:position pos:line="27" pos:column="67"/></operator><name pos:line="27" pos:column="63">t<pos:position pos:line="27" pos:column="64"/></name></expr></argument>)<pos:position pos:line="27" pos:column="65"/></argument_list></call> <operator pos:line="27" pos:column="66">==<pos:position pos:line="27" pos:column="68"/></operator> <operator pos:line="27" pos:column="69">-<pos:position pos:line="27" pos:column="70"/></operator><literal type="number" pos:line="27" pos:column="70">1<pos:position pos:line="27" pos:column="71"/></literal></expr>)<pos:position pos:line="27" pos:column="72"/></condition><then pos:line="27" pos:column="72">
      <block type="pseudo"><return pos:line="28" pos:column="7">return <expr><call><name pos:line="28" pos:column="14">check_error<pos:position pos:line="28" pos:column="25"/></name><argument_list pos:line="28" pos:column="25">()<pos:position pos:line="28" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="28"/></return></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="30" pos:column="5">m_httpStack<pos:position pos:line="30" pos:column="16"/></name><operator pos:line="30" pos:column="16">.<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="17">perform<pos:position pos:line="30" pos:column="24"/></name></name><argument_list pos:line="30" pos:column="24">()<pos:position pos:line="30" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="27"/></expr_stmt>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><operator pos:line="32" pos:column="9">!<pos:position pos:line="32" pos:column="10"/></operator><call><name pos:line="32" pos:column="10">FD_ISSET<pos:position pos:line="32" pos:column="18"/></name><argument_list pos:line="32" pos:column="18">(<argument><expr><cast type="static" pos:line="32" pos:column="19">static_cast<argument_list type="generic" pos:line="32" pos:column="30">&lt;<argument><expr><name><name pos:line="32" pos:column="31">torrent<pos:position pos:line="32" pos:column="38"/></name><operator pos:line="32" pos:column="38">::<pos:position pos:line="32" pos:column="40"/></operator><name pos:line="32" pos:column="40">PollEPoll<pos:position pos:line="32" pos:column="49"/></name></name><operator pos:line="32" pos:column="49">*<pos:position pos:line="32" pos:column="50"/></operator></expr></argument>&gt;<pos:position pos:line="32" pos:column="54"/></argument_list><argument_list pos:line="32" pos:column="51">(<argument><expr><name pos:line="32" pos:column="52">m_poll<pos:position pos:line="32" pos:column="58"/></name></expr></argument>)<pos:position pos:line="32" pos:column="59"/></argument_list></cast><operator pos:line="32" pos:column="59">-&gt;<pos:position pos:line="32" pos:column="64"/></operator><call><name pos:line="32" pos:column="61">file_descriptor<pos:position pos:line="32" pos:column="76"/></name><argument_list pos:line="32" pos:column="76">()<pos:position pos:line="32" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="32" pos:column="80">m_readSet<pos:position pos:line="32" pos:column="89"/></name></expr></argument>)<pos:position pos:line="32" pos:column="90"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="91"/></condition><then pos:line="32" pos:column="91"> <block pos:line="32" pos:column="92">{
      <comment type="line" pos:line="33" pos:column="7">// Need to call perform here so that scheduled task get done</comment>
      <comment type="line" pos:line="34" pos:column="7">// even if there's no socket events outside of the http stuff.</comment>
      <expr_stmt><expr><call><name><name pos:line="35" pos:column="7">torrent<pos:position pos:line="35" pos:column="14"/></name><operator pos:line="35" pos:column="14">::<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="16">perform<pos:position pos:line="35" pos:column="23"/></name></name><argument_list pos:line="35" pos:column="23">()<pos:position pos:line="35" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="26"/></expr_stmt>
      <return pos:line="36" pos:column="7">return;<pos:position pos:line="36" pos:column="14"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="39" pos:column="5">// Clear the timeout since we've already used it in the select call.</comment>
    <expr_stmt><expr><name pos:line="40" pos:column="5">timeout<pos:position pos:line="40" pos:column="12"/></name> <operator pos:line="40" pos:column="13">=<pos:position pos:line="40" pos:column="14"/></operator> <call><name><name pos:line="40" pos:column="15">rak<pos:position pos:line="40" pos:column="18"/></name><operator pos:line="40" pos:column="18">::<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="20">timer<pos:position pos:line="40" pos:column="25"/></name></name><argument_list pos:line="40" pos:column="25">()<pos:position pos:line="40" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if>

  <comment type="line" pos:line="43" pos:column="3">// Yes, below is how much code really *should* have been in this</comment>
  <comment type="line" pos:line="44" pos:column="3">// function. ;)</comment>

  <if pos:line="46" pos:column="3">if <condition pos:line="46" pos:column="6">(<expr><cast type="static" pos:line="46" pos:column="7">static_cast<argument_list type="generic" pos:line="46" pos:column="18">&lt;<argument><expr><name><name pos:line="46" pos:column="19">torrent<pos:position pos:line="46" pos:column="26"/></name><operator pos:line="46" pos:column="26">::<pos:position pos:line="46" pos:column="28"/></operator><name pos:line="46" pos:column="28">PollEPoll<pos:position pos:line="46" pos:column="37"/></name></name><operator pos:line="46" pos:column="37">*<pos:position pos:line="46" pos:column="38"/></operator></expr></argument>&gt;<pos:position pos:line="46" pos:column="42"/></argument_list><argument_list pos:line="46" pos:column="39">(<argument><expr><name pos:line="46" pos:column="40">m_poll<pos:position pos:line="46" pos:column="46"/></name></expr></argument>)<pos:position pos:line="46" pos:column="47"/></argument_list></cast><operator pos:line="46" pos:column="47">-&gt;<pos:position pos:line="46" pos:column="52"/></operator><call><name pos:line="46" pos:column="49">poll<pos:position pos:line="46" pos:column="53"/></name><argument_list pos:line="46" pos:column="53">(<argument><expr><operator pos:line="46" pos:column="54">(<pos:position pos:line="46" pos:column="55"/></operator><call><name><name pos:line="46" pos:column="55">timeout<pos:position pos:line="46" pos:column="62"/></name><operator pos:line="46" pos:column="62">.<pos:position pos:line="46" pos:column="63"/></operator><name pos:line="46" pos:column="63">usec<pos:position pos:line="46" pos:column="67"/></name></name><argument_list pos:line="46" pos:column="67">()<pos:position pos:line="46" pos:column="69"/></argument_list></call> <operator pos:line="46" pos:column="70">+<pos:position pos:line="46" pos:column="71"/></operator> <literal type="number" pos:line="46" pos:column="72">999<pos:position pos:line="46" pos:column="75"/></literal><operator pos:line="46" pos:column="75">)<pos:position pos:line="46" pos:column="76"/></operator> <operator pos:line="46" pos:column="77">/<pos:position pos:line="46" pos:column="78"/></operator> <literal type="number" pos:line="46" pos:column="79">1000<pos:position pos:line="46" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="84"/></argument_list></call> <operator pos:line="46" pos:column="85">==<pos:position pos:line="46" pos:column="87"/></operator> <operator pos:line="46" pos:column="88">-<pos:position pos:line="46" pos:column="89"/></operator><literal type="number" pos:line="46" pos:column="89">1<pos:position pos:line="46" pos:column="90"/></literal></expr>)<pos:position pos:line="46" pos:column="91"/></condition><then pos:line="46" pos:column="91">
    <block type="pseudo"><return pos:line="47" pos:column="5">return <expr><call><name pos:line="47" pos:column="12">check_error<pos:position pos:line="47" pos:column="23"/></name><argument_list pos:line="47" pos:column="23">()<pos:position pos:line="47" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="26"/></return></block></then></if>

  <expr_stmt><expr><call><name><name pos:line="49" pos:column="3">torrent<pos:position pos:line="49" pos:column="10"/></name><operator pos:line="49" pos:column="10">::<pos:position pos:line="49" pos:column="12"/></operator><name pos:line="49" pos:column="12">perform<pos:position pos:line="49" pos:column="19"/></name></name><argument_list pos:line="49" pos:column="19">()<pos:position pos:line="49" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><cast type="static" pos:line="50" pos:column="3">static_cast<argument_list type="generic" pos:line="50" pos:column="14">&lt;<argument><expr><name><name pos:line="50" pos:column="15">torrent<pos:position pos:line="50" pos:column="22"/></name><operator pos:line="50" pos:column="22">::<pos:position pos:line="50" pos:column="24"/></operator><name pos:line="50" pos:column="24">PollEPoll<pos:position pos:line="50" pos:column="33"/></name></name><operator pos:line="50" pos:column="33">*<pos:position pos:line="50" pos:column="34"/></operator></expr></argument>&gt;<pos:position pos:line="50" pos:column="38"/></argument_list><argument_list pos:line="50" pos:column="35">(<argument><expr><name pos:line="50" pos:column="36">m_poll<pos:position pos:line="50" pos:column="42"/></name></expr></argument>)<pos:position pos:line="50" pos:column="43"/></argument_list></cast><operator pos:line="50" pos:column="43">-&gt;<pos:position pos:line="50" pos:column="48"/></operator><call><name pos:line="50" pos:column="45">perform<pos:position pos:line="50" pos:column="52"/></name><argument_list pos:line="50" pos:column="52">()<pos:position pos:line="50" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="55"/></expr_stmt>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
