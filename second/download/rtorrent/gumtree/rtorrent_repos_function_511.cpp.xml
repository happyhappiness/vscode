<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_511.cpp" pos:tabs="8"><function type="operator"><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">operator <name pos:line="1" pos:column="15">()<pos:position pos:line="1" pos:column="17"/></name></name> <parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">Download<pos:position pos:line="1" pos:column="27"/></name><modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type> <name pos:line="1" pos:column="29">d1<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">Download<pos:position pos:line="1" pos:column="41"/></name><modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type> <name pos:line="1" pos:column="43">d2<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list> <specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <block pos:line="1" pos:column="53">{
    <for pos:line="2" pos:column="5">for <control pos:line="2" pos:column="9">(<init><decl><type><name><name pos:line="2" pos:column="10">View<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">sort_list<pos:position pos:line="2" pos:column="25"/></name><operator pos:line="2" pos:column="25">::<pos:position pos:line="2" pos:column="27"/></operator><name pos:line="2" pos:column="27">const_iterator<pos:position pos:line="2" pos:column="41"/></name></name></type> <name pos:line="2" pos:column="42">itr<pos:position pos:line="2" pos:column="45"/></name> <init pos:line="2" pos:column="46">= <expr><call><name><name pos:line="2" pos:column="48">m_sort<pos:position pos:line="2" pos:column="54"/></name><operator pos:line="2" pos:column="54">.<pos:position pos:line="2" pos:column="55"/></operator><name pos:line="2" pos:column="55">begin<pos:position pos:line="2" pos:column="60"/></name></name><argument_list pos:line="2" pos:column="60">()<pos:position pos:line="2" pos:column="62"/></argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name pos:line="2" pos:column="64">last<pos:position pos:line="2" pos:column="68"/></name> <init pos:line="2" pos:column="69">= <expr><call><name><name pos:line="2" pos:column="71">m_sort<pos:position pos:line="2" pos:column="77"/></name><operator pos:line="2" pos:column="77">.<pos:position pos:line="2" pos:column="78"/></operator><name pos:line="2" pos:column="78">end<pos:position pos:line="2" pos:column="81"/></name></name><argument_list pos:line="2" pos:column="81">()<pos:position pos:line="2" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="2" pos:column="84"/></init> <condition><expr><name pos:line="2" pos:column="85">itr<pos:position pos:line="2" pos:column="88"/></name> <operator pos:line="2" pos:column="89">!=<pos:position pos:line="2" pos:column="91"/></operator> <name pos:line="2" pos:column="92">last<pos:position pos:line="2" pos:column="96"/></name></expr>;<pos:position pos:line="2" pos:column="97"/></condition> <incr><expr><operator pos:line="2" pos:column="98">++<pos:position pos:line="2" pos:column="100"/></operator><name pos:line="2" pos:column="100">itr<pos:position pos:line="2" pos:column="103"/></name></expr></incr>)<pos:position pos:line="2" pos:column="104"/></control>
      <block type="pseudo"><if pos:line="3" pos:column="7">if <condition pos:line="3" pos:column="10">(<expr><call pos:line="3" pos:column="11">(<modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier><modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier><name pos:line="3" pos:column="14">itr<pos:position pos:line="3" pos:column="17"/></name>)<argument_list pos:line="3" pos:column="18">(<argument><expr><name pos:line="3" pos:column="19">d1<pos:position pos:line="3" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="23">d2<pos:position pos:line="3" pos:column="25"/></name></expr></argument>)<pos:position pos:line="3" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="27"/></condition><then pos:line="3" pos:column="27">
        <block type="pseudo"><return pos:line="4" pos:column="9">return <expr><literal type="boolean" pos:line="4" pos:column="16">true<pos:position pos:line="4" pos:column="20"/></literal></expr>;<pos:position pos:line="4" pos:column="21"/></return></block></then>
      <elseif pos:line="5" pos:column="7">else <if pos:line="5" pos:column="12">if <condition pos:line="5" pos:column="15">(<expr><call pos:line="5" pos:column="16">(<modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier><modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier><name pos:line="5" pos:column="19">itr<pos:position pos:line="5" pos:column="22"/></name>)<argument_list pos:line="5" pos:column="23">(<argument><expr><name pos:line="5" pos:column="24">d2<pos:position pos:line="5" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="28">d1<pos:position pos:line="5" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="32"/></condition><then pos:line="5" pos:column="32">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><literal type="boolean" pos:line="6" pos:column="16">false<pos:position pos:line="6" pos:column="21"/></literal></expr>;<pos:position pos:line="6" pos:column="22"/></return></block></then></if></elseif></if></block></for>

    <comment type="line" pos:line="8" pos:column="5">// Since we're testing equivalence, return false if we're</comment>
    <comment type="line" pos:line="9" pos:column="5">// equal. This is a requirement for the stl sorting algorithms.</comment>
    <return pos:line="10" pos:column="5">return <expr><literal type="boolean" pos:line="10" pos:column="12">false<pos:position pos:line="10" pos:column="17"/></literal></expr>;<pos:position pos:line="10" pos:column="18"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></function></unit>
