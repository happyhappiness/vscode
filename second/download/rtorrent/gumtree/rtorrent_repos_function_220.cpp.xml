<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_220.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">parse_command_multiple<pos:position pos:line="2" pos:column="23"/></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name><name pos:line="2" pos:column="24">core<pos:position pos:line="2" pos:column="28"/></name><operator pos:line="2" pos:column="28">::<pos:position pos:line="2" pos:column="30"/></operator><name pos:line="2" pos:column="30">Download<pos:position pos:line="2" pos:column="38"/></name></name><modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type> <name pos:line="2" pos:column="40">download<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="50">const<pos:position pos:line="2" pos:column="55"/></specifier> <name pos:line="2" pos:column="56">char<pos:position pos:line="2" pos:column="60"/></name><modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type> <name pos:line="2" pos:column="62">first<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="69">const<pos:position pos:line="2" pos:column="74"/></specifier> <name pos:line="2" pos:column="75">char<pos:position pos:line="2" pos:column="79"/></name><modifier pos:line="2" pos:column="79">*<pos:position pos:line="2" pos:column="80"/></modifier></type> <name pos:line="2" pos:column="81">last<pos:position pos:line="2" pos:column="85"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="86"/></parameter_list> <block pos:line="2" pos:column="87">{
  <while pos:line="3" pos:column="3">while <condition pos:line="3" pos:column="9">(<expr><name pos:line="3" pos:column="10">first<pos:position pos:line="3" pos:column="15"/></name> <operator pos:line="3" pos:column="16">!=<pos:position pos:line="3" pos:column="18"/></operator> <name pos:line="3" pos:column="19">last<pos:position pos:line="3" pos:column="23"/></name></expr>)<pos:position pos:line="3" pos:column="24"/></condition> <block pos:line="3" pos:column="25">{
    <comment type="line" pos:line="4" pos:column="5">// Should we check the return value? Probably not necessary as</comment>
    <comment type="line" pos:line="5" pos:column="5">// parse_args throws on unquoted multi-word input.</comment>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">std<pos:position pos:line="6" pos:column="8"/></name><operator pos:line="6" pos:column="8">::<pos:position pos:line="6" pos:column="10"/></operator><name><name pos:line="6" pos:column="10">pair<pos:position pos:line="6" pos:column="14"/></name><argument_list type="generic" pos:line="6" pos:column="14">&lt;<argument><expr><name><name pos:line="6" pos:column="15">torrent<pos:position pos:line="6" pos:column="22"/></name><operator pos:line="6" pos:column="22">::<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="24">Object<pos:position pos:line="6" pos:column="30"/></name></name></expr></argument>, <argument><expr><specifier pos:line="6" pos:column="32">const<pos:position pos:line="6" pos:column="37"/></specifier> <name pos:line="6" pos:column="38">char<pos:position pos:line="6" pos:column="42"/></name><modifier pos:line="6" pos:column="42">*<pos:position pos:line="6" pos:column="43"/></modifier></expr></argument>&gt;<pos:position pos:line="6" pos:column="47"/></argument_list></name></name></type> <name pos:line="6" pos:column="45">result<pos:position pos:line="6" pos:column="51"/></name> <init pos:line="6" pos:column="52">= <expr><call><name pos:line="6" pos:column="54">parse_command<pos:position pos:line="6" pos:column="67"/></name><argument_list pos:line="6" pos:column="67">(<argument><expr><name pos:line="6" pos:column="68">download<pos:position pos:line="6" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="78">first<pos:position pos:line="6" pos:column="83"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="85">last<pos:position pos:line="6" pos:column="89"/></name></expr></argument>)<pos:position pos:line="6" pos:column="90"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="91"/></decl_stmt>

    <expr_stmt><expr><name pos:line="8" pos:column="5">first<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">=<pos:position pos:line="8" pos:column="12"/></operator> <name><name pos:line="8" pos:column="13">result<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">.<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="20">second<pos:position pos:line="8" pos:column="26"/></name></name></expr>;<pos:position pos:line="8" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="9" pos:column="4"/></block></while>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
