<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_619.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">virtual<pos:position pos:line="1" pos:column="8"/></specifier> <type><name pos:line="1" pos:column="9">char<pos:position pos:line="1" pos:column="13"/></name><modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type> <name pos:line="1" pos:column="15">copy_string<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name><modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type> <name pos:line="1" pos:column="33">first<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name><modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type> <name pos:line="1" pos:column="46">last<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">void<pos:position pos:line="1" pos:column="56"/></name><modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type> <name pos:line="1" pos:column="58">object<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list> <block pos:line="1" pos:column="66">{
    <if pos:line="2" pos:column="5">if <condition pos:line="2" pos:column="8">(<expr><name pos:line="2" pos:column="9">object<pos:position pos:line="2" pos:column="15"/></name> <operator pos:line="2" pos:column="16">==<pos:position pos:line="2" pos:column="18"/></operator> <name pos:line="2" pos:column="19">NULL<pos:position pos:line="2" pos:column="23"/></name></expr>)<pos:position pos:line="2" pos:column="24"/></condition><then pos:line="2" pos:column="24">
      <block type="pseudo"><return pos:line="3" pos:column="7">return <expr><name pos:line="3" pos:column="14">first<pos:position pos:line="3" pos:column="19"/></name></expr>;<pos:position pos:line="3" pos:column="20"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="5" pos:column="5">result_type<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">result<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><call><name pos:line="5" pos:column="26">m_slot<pos:position pos:line="5" pos:column="32"/></name><argument_list pos:line="5" pos:column="32">(<argument><expr><cast type="reinterpret" pos:line="5" pos:column="33">reinterpret_cast<argument_list type="generic" pos:line="5" pos:column="49">&lt;<argument><expr><name pos:line="5" pos:column="50">arg1_type<pos:position pos:line="5" pos:column="59"/></name></expr></argument>&gt;<pos:position pos:line="5" pos:column="63"/></argument_list><argument_list pos:line="5" pos:column="60">(<argument><expr><name pos:line="5" pos:column="61">object<pos:position pos:line="5" pos:column="67"/></name></expr></argument>)<pos:position pos:line="5" pos:column="68"/></argument_list></cast></expr></argument>)<pos:position pos:line="5" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="70"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">extent_type<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">length<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><call><name><name pos:line="6" pos:column="26">std<pos:position pos:line="6" pos:column="29"/></name><operator pos:line="6" pos:column="29">::<pos:position pos:line="6" pos:column="31"/></operator><name><name pos:line="6" pos:column="31">min<pos:position pos:line="6" pos:column="34"/></name><argument_list type="generic" pos:line="6" pos:column="34">&lt;<argument><expr><name pos:line="6" pos:column="35">extent_type<pos:position pos:line="6" pos:column="46"/></name></expr></argument>&gt;<pos:position pos:line="6" pos:column="50"/></argument_list></name></name><argument_list pos:line="6" pos:column="47">(<argument><expr><call><name pos:line="6" pos:column="48">result_length<pos:position pos:line="6" pos:column="61"/></name><argument_list pos:line="6" pos:column="61">(<argument><expr><operator pos:line="6" pos:column="62">&amp;<pos:position pos:line="6" pos:column="67"/></operator><name pos:line="6" pos:column="63">result<pos:position pos:line="6" pos:column="69"/></name></expr></argument>)<pos:position pos:line="6" pos:column="70"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="6" pos:column="72">last<pos:position pos:line="6" pos:column="76"/></name> <operator pos:line="6" pos:column="77">-<pos:position pos:line="6" pos:column="78"/></operator> <name pos:line="6" pos:column="79">first<pos:position pos:line="6" pos:column="84"/></name></expr></argument>)<pos:position pos:line="6" pos:column="85"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="86"/></decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="8" pos:column="5">std<pos:position pos:line="8" pos:column="8"/></name><operator pos:line="8" pos:column="8">::<pos:position pos:line="8" pos:column="10"/></operator><name pos:line="8" pos:column="10">memcpy<pos:position pos:line="8" pos:column="16"/></name></name><argument_list pos:line="8" pos:column="16">(<argument><expr><name pos:line="8" pos:column="17">first<pos:position pos:line="8" pos:column="22"/></name></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="24">result_buffer<pos:position pos:line="8" pos:column="37"/></name><argument_list pos:line="8" pos:column="37">(<argument><expr><operator pos:line="8" pos:column="38">&amp;<pos:position pos:line="8" pos:column="43"/></operator><name pos:line="8" pos:column="39">result<pos:position pos:line="8" pos:column="45"/></name></expr></argument>)<pos:position pos:line="8" pos:column="46"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="8" pos:column="48">length<pos:position pos:line="8" pos:column="54"/></name></expr></argument>)<pos:position pos:line="8" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="56"/></expr_stmt>

    <return pos:line="10" pos:column="5">return <expr><name pos:line="10" pos:column="12">first<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">+<pos:position pos:line="10" pos:column="19"/></operator> <name pos:line="10" pos:column="20">length<pos:position pos:line="10" pos:column="26"/></name></expr>;<pos:position pos:line="10" pos:column="27"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></function></unit>
