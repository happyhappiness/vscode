<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_106.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">do_panic<pos:position pos:line="2" pos:column="9"/></name><parameter_list pos:line="2" pos:column="9">(<parameter><decl><type><name pos:line="2" pos:column="10">int<pos:position pos:line="2" pos:column="13"/></name></type> <name pos:line="2" pos:column="14">signum<pos:position pos:line="2" pos:column="20"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="21"/></parameter_list> <block pos:line="2" pos:column="22">{
  <comment type="line" pos:line="3" pos:column="3">// Use the default signal handler in the future to avoid infinit</comment>
  <comment type="line" pos:line="4" pos:column="3">// loops.</comment>
  <expr_stmt><expr><call><name><name pos:line="5" pos:column="3">SignalHandler<pos:position pos:line="5" pos:column="16"/></name><operator pos:line="5" pos:column="16">::<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="18">set_default<pos:position pos:line="5" pos:column="29"/></name></name><argument_list pos:line="5" pos:column="29">(<argument><expr><name pos:line="5" pos:column="30">signum<pos:position pos:line="5" pos:column="36"/></name></expr></argument>)<pos:position pos:line="5" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name><name pos:line="6" pos:column="3">display<pos:position pos:line="6" pos:column="10"/></name><operator pos:line="6" pos:column="10">::<pos:position pos:line="6" pos:column="12"/></operator><name pos:line="6" pos:column="12">Canvas<pos:position pos:line="6" pos:column="18"/></name><operator pos:line="6" pos:column="18">::<pos:position pos:line="6" pos:column="20"/></operator><name pos:line="6" pos:column="20">cleanup<pos:position pos:line="6" pos:column="27"/></name></name><argument_list pos:line="6" pos:column="27">()<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="30"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="8" pos:column="3">std<pos:position pos:line="8" pos:column="6"/></name><operator pos:line="8" pos:column="6">::<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">cout<pos:position pos:line="8" pos:column="12"/></name></name> <operator pos:line="8" pos:column="13">&lt;&lt;<pos:position pos:line="8" pos:column="21"/></operator> <literal type="string" pos:line="8" pos:column="16">"Caught "<pos:position pos:line="8" pos:column="25"/></literal> <operator pos:line="8" pos:column="26">&lt;&lt;<pos:position pos:line="8" pos:column="34"/></operator> <call><name><name pos:line="8" pos:column="29">SignalHandler<pos:position pos:line="8" pos:column="42"/></name><operator pos:line="8" pos:column="42">::<pos:position pos:line="8" pos:column="44"/></operator><name pos:line="8" pos:column="44">as_string<pos:position pos:line="8" pos:column="53"/></name></name><argument_list pos:line="8" pos:column="53">(<argument><expr><name pos:line="8" pos:column="54">signum<pos:position pos:line="8" pos:column="60"/></name></expr></argument>)<pos:position pos:line="8" pos:column="61"/></argument_list></call> <operator pos:line="8" pos:column="62">&lt;&lt;<pos:position pos:line="8" pos:column="70"/></operator> <literal type="string" pos:line="8" pos:column="65">", dumping stack:"<pos:position pos:line="8" pos:column="83"/></literal> <operator pos:line="8" pos:column="84">&lt;&lt;<pos:position pos:line="8" pos:column="92"/></operator> <name><name pos:line="8" pos:column="87">std<pos:position pos:line="8" pos:column="90"/></name><operator pos:line="8" pos:column="90">::<pos:position pos:line="8" pos:column="92"/></operator><name pos:line="8" pos:column="92">endl<pos:position pos:line="8" pos:column="96"/></name></name></expr>;<pos:position pos:line="8" pos:column="97"/></expr_stmt>
  
<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">USE_EXECINFO<pos:position pos:line="10" pos:column="20"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">void<pos:position pos:line="11" pos:column="7"/></name><modifier pos:line="11" pos:column="7">*<pos:position pos:line="11" pos:column="8"/></modifier></type> <name><name pos:line="11" pos:column="9">stackPtrs<pos:position pos:line="11" pos:column="18"/></name><index pos:line="11" pos:column="18">[<expr><literal type="number" pos:line="11" pos:column="19">20<pos:position pos:line="11" pos:column="21"/></literal></expr>]<pos:position pos:line="11" pos:column="22"/></index></name></decl>;<pos:position pos:line="11" pos:column="23"/></decl_stmt>

  <comment type="line" pos:line="13" pos:column="3">// Print the stack and exit.</comment>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">stackSize<pos:position pos:line="14" pos:column="16"/></name> <init pos:line="14" pos:column="17">= <expr><call><name pos:line="14" pos:column="19">backtrace<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">stackPtrs<pos:position pos:line="14" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="40">20<pos:position pos:line="14" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="44"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">char<pos:position pos:line="15" pos:column="7"/></name><modifier pos:line="15" pos:column="7">*<pos:position pos:line="15" pos:column="8"/></modifier><modifier pos:line="15" pos:column="8">*<pos:position pos:line="15" pos:column="9"/></modifier></type> <name pos:line="15" pos:column="10">stackStrings<pos:position pos:line="15" pos:column="22"/></name> <init pos:line="15" pos:column="23">= <expr><call><name pos:line="15" pos:column="25">backtrace_symbols<pos:position pos:line="15" pos:column="42"/></name><argument_list pos:line="15" pos:column="42">(<argument><expr><name pos:line="15" pos:column="43">stackPtrs<pos:position pos:line="15" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="54">stackSize<pos:position pos:line="15" pos:column="63"/></name></expr></argument>)<pos:position pos:line="15" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="65"/></decl_stmt>

  <for pos:line="17" pos:column="3">for <control pos:line="17" pos:column="7">(<init><decl><type><name pos:line="17" pos:column="8">int<pos:position pos:line="17" pos:column="11"/></name></type> <name pos:line="17" pos:column="12">i<pos:position pos:line="17" pos:column="13"/></name> <init pos:line="17" pos:column="14">= <expr><literal type="number" pos:line="17" pos:column="16">0<pos:position pos:line="17" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="18"/></init> <condition><expr><name pos:line="17" pos:column="19">i<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">&lt;<pos:position pos:line="17" pos:column="25"/></operator> <name pos:line="17" pos:column="23">stackSize<pos:position pos:line="17" pos:column="32"/></name></expr>;<pos:position pos:line="17" pos:column="33"/></condition> <incr><expr><operator pos:line="17" pos:column="34">++<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="36">i<pos:position pos:line="17" pos:column="37"/></name></expr></incr>)<pos:position pos:line="17" pos:column="38"/></control>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="18" pos:column="5">std<pos:position pos:line="18" pos:column="8"/></name><operator pos:line="18" pos:column="8">::<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">cout<pos:position pos:line="18" pos:column="14"/></name></name> <operator pos:line="18" pos:column="15">&lt;&lt;<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="18">i<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">&lt;&lt;<pos:position pos:line="18" pos:column="28"/></operator> <literal type="char" pos:line="18" pos:column="23">' '<pos:position pos:line="18" pos:column="26"/></literal> <operator pos:line="18" pos:column="27">&lt;&lt;<pos:position pos:line="18" pos:column="35"/></operator> <name><name pos:line="18" pos:column="30">stackStrings<pos:position pos:line="18" pos:column="42"/></name><index pos:line="18" pos:column="42">[<expr><name pos:line="18" pos:column="43">i<pos:position pos:line="18" pos:column="44"/></name></expr>]<pos:position pos:line="18" pos:column="45"/></index></name> <operator pos:line="18" pos:column="46">&lt;&lt;<pos:position pos:line="18" pos:column="54"/></operator> <name><name pos:line="18" pos:column="49">std<pos:position pos:line="18" pos:column="52"/></name><operator pos:line="18" pos:column="52">::<pos:position pos:line="18" pos:column="54"/></operator><name pos:line="18" pos:column="54">endl<pos:position pos:line="18" pos:column="58"/></name></name></expr>;<pos:position pos:line="18" pos:column="59"/></expr_stmt></block></for>

<cpp:else pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">else<pos:position pos:line="20" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name><name pos:line="21" pos:column="3">std<pos:position pos:line="21" pos:column="6"/></name><operator pos:line="21" pos:column="6">::<pos:position pos:line="21" pos:column="8"/></operator><name pos:line="21" pos:column="8">cout<pos:position pos:line="21" pos:column="12"/></name></name> <operator pos:line="21" pos:column="13">&lt;&lt;<pos:position pos:line="21" pos:column="21"/></operator> <literal type="string" pos:line="21" pos:column="16">"Stack dump not enabled."<pos:position pos:line="21" pos:column="41"/></literal> <operator pos:line="21" pos:column="42">&lt;&lt;<pos:position pos:line="21" pos:column="50"/></operator> <name><name pos:line="21" pos:column="45">std<pos:position pos:line="21" pos:column="48"/></name><operator pos:line="21" pos:column="48">::<pos:position pos:line="21" pos:column="50"/></operator><name pos:line="21" pos:column="50">endl<pos:position pos:line="21" pos:column="54"/></name></name></expr>;<pos:position pos:line="21" pos:column="55"/></expr_stmt>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
  
  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><name pos:line="24" pos:column="7">signum<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">==<pos:position pos:line="24" pos:column="16"/></operator> <name pos:line="24" pos:column="17">SIGBUS<pos:position pos:line="24" pos:column="23"/></name></expr>)<pos:position pos:line="24" pos:column="24"/></condition><then pos:line="24" pos:column="24">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="25" pos:column="5">std<pos:position pos:line="25" pos:column="8"/></name><operator pos:line="25" pos:column="8">::<pos:position pos:line="25" pos:column="10"/></operator><name pos:line="25" pos:column="10">cout<pos:position pos:line="25" pos:column="14"/></name></name> <operator pos:line="25" pos:column="15">&lt;&lt;<pos:position pos:line="25" pos:column="23"/></operator> <literal type="string" pos:line="25" pos:column="18">"A bus error probably means you ran out of diskspace."<pos:position pos:line="25" pos:column="72"/></literal> <operator pos:line="25" pos:column="73">&lt;&lt;<pos:position pos:line="25" pos:column="81"/></operator> <name><name pos:line="25" pos:column="76">std<pos:position pos:line="25" pos:column="79"/></name><operator pos:line="25" pos:column="79">::<pos:position pos:line="25" pos:column="81"/></operator><name pos:line="25" pos:column="81">endl<pos:position pos:line="25" pos:column="85"/></name></name></expr>;<pos:position pos:line="25" pos:column="86"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name><name pos:line="27" pos:column="3">std<pos:position pos:line="27" pos:column="6"/></name><operator pos:line="27" pos:column="6">::<pos:position pos:line="27" pos:column="8"/></operator><name pos:line="27" pos:column="8">abort<pos:position pos:line="27" pos:column="13"/></name></name><argument_list pos:line="27" pos:column="13">()<pos:position pos:line="27" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="16"/></expr_stmt>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
