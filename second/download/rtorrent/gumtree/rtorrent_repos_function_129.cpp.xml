<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_129.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">OptionParser<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">call_int_pair<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><name pos:line="2" pos:column="29">SlotIntPair<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">slot<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="47">const<pos:position pos:line="2" pos:column="52"/></specifier> <name><name pos:line="2" pos:column="53">std<pos:position pos:line="2" pos:column="56"/></name><operator pos:line="2" pos:column="56">::<pos:position pos:line="2" pos:column="58"/></operator><name pos:line="2" pos:column="58">string<pos:position pos:line="2" pos:column="64"/></name></name><modifier pos:line="2" pos:column="64">&amp;<pos:position pos:line="2" pos:column="69"/></modifier></type> <name pos:line="2" pos:column="66">arg<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list> <block pos:line="2" pos:column="71">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">a<pos:position pos:line="3" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="10">b<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><call><name><name pos:line="5" pos:column="7">std<pos:position pos:line="5" pos:column="10"/></name><operator pos:line="5" pos:column="10">::<pos:position pos:line="5" pos:column="12"/></operator><name pos:line="5" pos:column="12">sscanf<pos:position pos:line="5" pos:column="18"/></name></name><argument_list pos:line="5" pos:column="18">(<argument><expr><call><name><name pos:line="5" pos:column="19">arg<pos:position pos:line="5" pos:column="22"/></name><operator pos:line="5" pos:column="22">.<pos:position pos:line="5" pos:column="23"/></operator><name pos:line="5" pos:column="23">c_str<pos:position pos:line="5" pos:column="28"/></name></name><argument_list pos:line="5" pos:column="28">()<pos:position pos:line="5" pos:column="30"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="32">"%u-%u"<pos:position pos:line="5" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="5" pos:column="41">&amp;<pos:position pos:line="5" pos:column="46"/></operator><name pos:line="5" pos:column="42">a<pos:position pos:line="5" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="45">&amp;<pos:position pos:line="5" pos:column="50"/></operator><name pos:line="5" pos:column="46">b<pos:position pos:line="5" pos:column="47"/></name></expr></argument>)<pos:position pos:line="5" pos:column="48"/></argument_list></call> <operator pos:line="5" pos:column="49">!=<pos:position pos:line="5" pos:column="51"/></operator> <literal type="number" pos:line="5" pos:column="52">2<pos:position pos:line="5" pos:column="53"/></literal></expr>)<pos:position pos:line="5" pos:column="54"/></condition><then pos:line="5" pos:column="54">
    <block type="pseudo"><throw pos:line="6" pos:column="5">throw <expr><call><name><name pos:line="6" pos:column="11">std<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">::<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="16">runtime_error<pos:position pos:line="6" pos:column="29"/></name></name><argument_list pos:line="6" pos:column="29">(<argument><expr><literal type="string" pos:line="6" pos:column="30">"Invalid argument, \""<pos:position pos:line="6" pos:column="52"/></literal> <operator pos:line="6" pos:column="53">+<pos:position pos:line="6" pos:column="54"/></operator> <name pos:line="6" pos:column="55">arg<pos:position pos:line="6" pos:column="58"/></name> <operator pos:line="6" pos:column="59">+<pos:position pos:line="6" pos:column="60"/></operator> <literal type="string" pos:line="6" pos:column="61">"\" should be \"a-b\""<pos:position pos:line="6" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="85"/></throw></block></then></if>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">slot<pos:position pos:line="8" pos:column="7"/></name><argument_list pos:line="8" pos:column="7">(<argument><expr><name pos:line="8" pos:column="8">a<pos:position pos:line="8" pos:column="9"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="11">b<pos:position pos:line="8" pos:column="12"/></name></expr></argument>)<pos:position pos:line="8" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="14"/></expr_stmt>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
