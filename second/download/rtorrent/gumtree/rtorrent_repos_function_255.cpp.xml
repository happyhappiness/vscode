<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/rtorrent/gumtree/rtorrent_repos_function_255.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name><name pos:line="1" pos:column="7">torrent<pos:position pos:line="1" pos:column="14"/></name><operator pos:line="1" pos:column="14">::<pos:position pos:line="1" pos:column="16"/></operator><name pos:line="1" pos:column="16">Object<pos:position pos:line="1" pos:column="22"/></name></name></type>
<name><name pos:line="2" pos:column="1">CommandVariable<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">set_bool<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><name pos:line="2" pos:column="27">Command<pos:position pos:line="2" pos:column="34"/></name><modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type> <name pos:line="2" pos:column="36">rawCommand<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="48">const<pos:position pos:line="2" pos:column="53"/></specifier> <name><name pos:line="2" pos:column="54">torrent<pos:position pos:line="2" pos:column="61"/></name><operator pos:line="2" pos:column="61">::<pos:position pos:line="2" pos:column="63"/></operator><name pos:line="2" pos:column="63">Object<pos:position pos:line="2" pos:column="69"/></name></name><modifier pos:line="2" pos:column="69">&amp;<pos:position pos:line="2" pos:column="74"/></modifier></type> <name pos:line="2" pos:column="71">rawArgs<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="79"/></parameter_list> <block pos:line="2" pos:column="80">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CommandVariable<pos:position pos:line="3" pos:column="18"/></name><modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier></type> <name pos:line="3" pos:column="20">variable<pos:position pos:line="3" pos:column="28"/></name> <init pos:line="3" pos:column="29">= <expr><cast type="static" pos:line="3" pos:column="31">static_cast<argument_list type="generic" pos:line="3" pos:column="42">&lt;<argument><expr><name pos:line="3" pos:column="43">CommandVariable<pos:position pos:line="3" pos:column="58"/></name><operator pos:line="3" pos:column="58">*<pos:position pos:line="3" pos:column="59"/></operator></expr></argument>&gt;<pos:position pos:line="3" pos:column="63"/></argument_list><argument_list pos:line="3" pos:column="60">(<argument><expr><name pos:line="3" pos:column="61">rawCommand<pos:position pos:line="3" pos:column="71"/></name></expr></argument>)<pos:position pos:line="3" pos:column="72"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="3" pos:column="73"/></decl_stmt>

  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name><name pos:line="5" pos:column="9">torrent<pos:position pos:line="5" pos:column="16"/></name><operator pos:line="5" pos:column="16">::<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="18">Object<pos:position pos:line="5" pos:column="24"/></name></name><modifier pos:line="5" pos:column="24">&amp;<pos:position pos:line="5" pos:column="29"/></modifier></type> <name pos:line="5" pos:column="26">arg<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><call><name pos:line="5" pos:column="32">convert_to_single_argument<pos:position pos:line="5" pos:column="58"/></name><argument_list pos:line="5" pos:column="58">(<argument><expr><name pos:line="5" pos:column="59">rawArgs<pos:position pos:line="5" pos:column="66"/></name></expr></argument>)<pos:position pos:line="5" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="68"/></decl_stmt>

  <switch pos:line="7" pos:column="3">switch <condition pos:line="7" pos:column="10">(<expr><call><name><name pos:line="7" pos:column="11">arg<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">.<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="15">type<pos:position pos:line="7" pos:column="19"/></name></name><argument_list pos:line="7" pos:column="19">()<pos:position pos:line="7" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="22"/></condition> <block pos:line="7" pos:column="23">{
  <case pos:line="8" pos:column="3">case <expr><name><name pos:line="8" pos:column="8">torrent<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">::<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">Object<pos:position pos:line="8" pos:column="23"/></name><operator pos:line="8" pos:column="23">::<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">TYPE_VALUE<pos:position pos:line="8" pos:column="35"/></name></name></expr>:<pos:position pos:line="8" pos:column="36"/></case>
    <expr_stmt><expr><name><name pos:line="9" pos:column="5">variable<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">-&gt;<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="15">m_variable<pos:position pos:line="9" pos:column="25"/></name></name> <operator pos:line="9" pos:column="26">=<pos:position pos:line="9" pos:column="27"/></operator> <ternary><condition><expr><call><name><name pos:line="9" pos:column="28">arg<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">.<pos:position pos:line="9" pos:column="32"/></operator><name pos:line="9" pos:column="32">as_value<pos:position pos:line="9" pos:column="40"/></name></name><argument_list pos:line="9" pos:column="40">()<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr> ?<pos:position pos:line="9" pos:column="44"/></condition><then pos:line="9" pos:column="44"> <expr><operator pos:line="9" pos:column="45">(<pos:position pos:line="9" pos:column="46"/></operator><name pos:line="9" pos:column="46">int64_t<pos:position pos:line="9" pos:column="53"/></name><operator pos:line="9" pos:column="53">)<pos:position pos:line="9" pos:column="54"/></operator><literal type="number" pos:line="9" pos:column="54">1<pos:position pos:line="9" pos:column="55"/></literal></expr> <pos:position pos:line="9" pos:column="56"/></then><else pos:line="9" pos:column="56">: <expr><operator pos:line="9" pos:column="58">(<pos:position pos:line="9" pos:column="59"/></operator><name pos:line="9" pos:column="59">int64_t<pos:position pos:line="9" pos:column="66"/></name><operator pos:line="9" pos:column="66">)<pos:position pos:line="9" pos:column="67"/></operator><literal type="number" pos:line="9" pos:column="67">0<pos:position pos:line="9" pos:column="68"/></literal></expr></else></ternary></expr>;<pos:position pos:line="9" pos:column="69"/></expr_stmt>
    <break pos:line="10" pos:column="5">break;<pos:position pos:line="10" pos:column="11"/></break>

  <case pos:line="12" pos:column="3">case <expr><name><name pos:line="12" pos:column="8">torrent<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">::<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">Object<pos:position pos:line="12" pos:column="23"/></name><operator pos:line="12" pos:column="23">::<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="25">TYPE_STRING<pos:position pos:line="12" pos:column="36"/></name></name></expr>:<pos:position pos:line="12" pos:column="37"/></case>
    <comment type="line" pos:line="13" pos:column="5">// Move the checks into some is_true, is_false think in Command.</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name><name pos:line="14" pos:column="9">arg<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">.<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">as_string<pos:position pos:line="14" pos:column="22"/></name></name><argument_list pos:line="14" pos:column="22">()<pos:position pos:line="14" pos:column="24"/></argument_list></call> <operator pos:line="14" pos:column="25">==<pos:position pos:line="14" pos:column="27"/></operator> <literal type="string" pos:line="14" pos:column="28">"yes"<pos:position pos:line="14" pos:column="33"/></literal> <operator pos:line="14" pos:column="34">||<pos:position pos:line="14" pos:column="36"/></operator> <call><name><name pos:line="14" pos:column="37">arg<pos:position pos:line="14" pos:column="40"/></name><operator pos:line="14" pos:column="40">.<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="41">as_string<pos:position pos:line="14" pos:column="50"/></name></name><argument_list pos:line="14" pos:column="50">()<pos:position pos:line="14" pos:column="52"/></argument_list></call> <operator pos:line="14" pos:column="53">==<pos:position pos:line="14" pos:column="55"/></operator> <literal type="string" pos:line="14" pos:column="56">"true"<pos:position pos:line="14" pos:column="62"/></literal></expr>)<pos:position pos:line="14" pos:column="63"/></condition><then pos:line="14" pos:column="63">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="15" pos:column="7">variable<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">-&gt;<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="17">m_variable<pos:position pos:line="15" pos:column="27"/></name></name> <operator pos:line="15" pos:column="28">=<pos:position pos:line="15" pos:column="29"/></operator> <operator pos:line="15" pos:column="30">(<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="31">int64_t<pos:position pos:line="15" pos:column="38"/></name><operator pos:line="15" pos:column="38">)<pos:position pos:line="15" pos:column="39"/></operator><literal type="number" pos:line="15" pos:column="39">1<pos:position pos:line="15" pos:column="40"/></literal></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt></block></then>

    <elseif pos:line="17" pos:column="5">else <if pos:line="17" pos:column="10">if <condition pos:line="17" pos:column="13">(<expr><call><name><name pos:line="17" pos:column="14">arg<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">.<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">as_string<pos:position pos:line="17" pos:column="27"/></name></name><argument_list pos:line="17" pos:column="27">()<pos:position pos:line="17" pos:column="29"/></argument_list></call> <operator pos:line="17" pos:column="30">==<pos:position pos:line="17" pos:column="32"/></operator> <literal type="string" pos:line="17" pos:column="33">"no"<pos:position pos:line="17" pos:column="37"/></literal> <operator pos:line="17" pos:column="38">||<pos:position pos:line="17" pos:column="40"/></operator> <call><name><name pos:line="17" pos:column="41">arg<pos:position pos:line="17" pos:column="44"/></name><operator pos:line="17" pos:column="44">.<pos:position pos:line="17" pos:column="45"/></operator><name pos:line="17" pos:column="45">as_string<pos:position pos:line="17" pos:column="54"/></name></name><argument_list pos:line="17" pos:column="54">()<pos:position pos:line="17" pos:column="56"/></argument_list></call> <operator pos:line="17" pos:column="57">==<pos:position pos:line="17" pos:column="59"/></operator> <literal type="string" pos:line="17" pos:column="60">"false"<pos:position pos:line="17" pos:column="67"/></literal></expr>)<pos:position pos:line="17" pos:column="68"/></condition><then pos:line="17" pos:column="68">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="18" pos:column="7">variable<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">-&gt;<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="17">m_variable<pos:position pos:line="18" pos:column="27"/></name></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <operator pos:line="18" pos:column="30">(<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="31">int64_t<pos:position pos:line="18" pos:column="38"/></name><operator pos:line="18" pos:column="38">)<pos:position pos:line="18" pos:column="39"/></operator><literal type="number" pos:line="18" pos:column="39">0<pos:position pos:line="18" pos:column="40"/></literal></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt></block></then></if></elseif>

    <else pos:line="20" pos:column="5">else
      <block type="pseudo"><throw pos:line="21" pos:column="7">throw <expr><call><name><name pos:line="21" pos:column="13">torrent<pos:position pos:line="21" pos:column="20"/></name><operator pos:line="21" pos:column="20">::<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">input_error<pos:position pos:line="21" pos:column="33"/></name></name><argument_list pos:line="21" pos:column="33">(<argument><expr><literal type="string" pos:line="21" pos:column="34">"String does not parse as a boolean."<pos:position pos:line="21" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="73"/></throw></block></else></if>

    <break pos:line="23" pos:column="5">break;<pos:position pos:line="23" pos:column="11"/></break>

  <default pos:line="25" pos:column="3">default:<pos:position pos:line="25" pos:column="11"/></default>
    <throw pos:line="26" pos:column="5">throw <expr><call><name><name pos:line="26" pos:column="11">torrent<pos:position pos:line="26" pos:column="18"/></name><operator pos:line="26" pos:column="18">::<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="20">input_error<pos:position pos:line="26" pos:column="31"/></name></name><argument_list pos:line="26" pos:column="31">(<argument><expr><literal type="string" pos:line="26" pos:column="32">"Input is not a boolean."<pos:position pos:line="26" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></throw>
  }<pos:position pos:line="27" pos:column="4"/></block></switch>

  <return pos:line="29" pos:column="3">return <expr><name><name pos:line="29" pos:column="10">variable<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">-&gt;<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="20">m_variable<pos:position pos:line="29" pos:column="30"/></name></name></expr>;<pos:position pos:line="29" pos:column="31"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
