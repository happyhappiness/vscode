--- /dev/null
+++ /dev/null
@@ -4068,33 +6012,204 @@
     }
 }
 
-std::string cmCTest::GetDartConfiguration(const char *name)
+int cmCTest::ExecuteCommands(tm_VectorOfStrings& vec)
+{
+  tm_VectorOfStrings::iterator it;
+  for ( it = vec.begin(); it != vec.end(); ++it )
+    {
+    int retVal = 0;
+    if ( m_Verbose )
+      {
+      std::cout << "Run command: " << *it << std::endl;
+      }
+    if ( !cmSystemTools::RunSingleCommand(it->c_str(), 0, &retVal, 0, true /*m_Verbose*/) || 
+      retVal != 0 )
+      {
+      std::cerr << "Problem running command: " << *it << std::endl;
+      return 0;
+      }
+    }
+  return 1;
+}
+
+
+// get the next number in a string with numbers separated by ,
+// pos is the start of the search and pos2 is the end of the search
+// pos becomes pos2 after a call to GetNextNumber.   
+// -1 is returned at the end of the list.
+inline int GetNextNumber(std::string const& in, 
+                         int& val,
+                         std::string::size_type& pos,
+                         std::string::size_type& pos2)
+{
+  pos2 = in.find(',', pos);
+  if(pos2 != in.npos)
+    {
+    if(pos2-pos == 0)
+      {
+      val = -1;
+      }
+    else
+      {
+      val = atoi(in.substr(pos, pos2-pos).c_str());
+      }
+    pos = pos2+1;
+    return 1;
+    }
+  else
+    {
+    if(in.size()-pos == 0)
+      {
+       val = -1;
+      }
+    else
+      {
+      val = atoi(in.substr(pos, in.size()-pos).c_str());
+      }
+    return 0;
+    }
+}
+
+// get the next number in a string with numbers separated by ,
+// pos is the start of the search and pos2 is the end of the search
+// pos becomes pos2 after a call to GetNextNumber.   
+// -1 is returned at the end of the list.
+inline int GetNextRealNumber(std::string const& in, 
+                             double& val,
+                             std::string::size_type& pos,
+                             std::string::size_type& pos2)
 {
-  return m_DartConfiguration[name];
+  pos2 = in.find(',', pos);
+  if(pos2 != in.npos)
+    {
+    if(pos2-pos == 0)
+      {
+      val = -1;
+      }
+    else
+      {
+      val = atof(in.substr(pos, pos2-pos).c_str());
+      }
+    pos = pos2+1;
+    return 1;
+    }
+  else
+    {
+    if(in.size()-pos == 0)
+      {
+       val = -1;
+      }
+    else
+      {
+      val = atof(in.substr(pos, in.size()-pos).c_str());
+      }
+    return 0;
+    }
 }
 
-  
-std::string cmCTest::GetCurrentTag()
+                         
+void cmCTest::SetTestsToRunInformation(const char* in)
 {
-  return m_CurrentTag;
+  this->TestsToRunString = in;
+  // if the argument is a file, then read it and use the contents as the string
+  if(cmSystemTools::FileExists(in))
+    {
+    std::ifstream fin(in);
+    unsigned long filelen = cmSystemTools::FileLength(in);
+    char* buff = new char[filelen+1];
+    fin.getline(buff, filelen);
+    buff[fin.gcount()] = 0;
+    this->TestsToRunString = buff;
+    }
 }
 
-std::string cmCTest::GetToplevelPath()
+void cmCTest::ExpandTestsToRunInformation(int numTests)
 {
-  return m_ToplevelPath;
+  if (this->TestsToRunString.empty())
+    {
+    return;
+    }
+  
+  int start;
+  int end = -1;
+  double stride = -1;
+  std::string::size_type pos = 0;
+  std::string::size_type pos2;
+  // read start
+  if(GetNextNumber(this->TestsToRunString, start, pos, pos2))
+    {
+    // read end
+    if(GetNextNumber(this->TestsToRunString, end, pos, pos2))
+      {
+      // read stride
+      if(GetNextRealNumber(this->TestsToRunString, stride, pos, pos2))
+        {
+        int val =0;
+        // now read specific numbers
+        while(GetNextNumber(this->TestsToRunString, val, pos, pos2))
+          {
+          m_TestsToRun.push_back(val);
+          }
+        m_TestsToRun.push_back(val);
+        }
+      }
+    }
+
+  // if start is not specified then we assume we start at 1
+  if(start == -1)
+    {
+    start = 1;
+    }
+
+  // if end isnot specified then we assume we end with the last test
+  if(end == -1)
+    {
+    end = numTests;
+    }
+  
+  // if the stride wasn't specified then it defaults to 1
+  if(stride == -1)
+    {
+    stride = 1;
+    }
+
+  // if we have a range then add it
+  if(end != -1 && start != -1 && stride > 0)
+    {
+    int i = 0;
+    while (i*stride + start <= end)
+      {
+      m_TestsToRun.push_back(static_cast<int>(i*stride+start));
+      ++i;
+      }
+    }
+
+  // sort the array
+  std::sort(m_TestsToRun.begin(), m_TestsToRun.end(), std::less<int>());
+  // remove duplicates
+  std::vector<int>::iterator new_end = 
+    std::unique(m_TestsToRun.begin(), m_TestsToRun.end());
+  m_TestsToRun.erase(new_end, m_TestsToRun.end());
+  std::cout << "Running tests: ";
+  for(unsigned int i =0; i < m_TestsToRun.size(); ++i)
+    {
+    std::cout << m_TestsToRun[i] << " ";
+    }
+  std::cout << "\n";
 }
 
-std::string cmCTest::GetConfigType()
+std::string cmCTest::GetDartConfiguration(const char *name)
 {
-  return m_ConfigType;
+  return m_DartConfiguration[name];
 }
 
-bool cmCTest::GetShowOnly()
+  
+std::string cmCTest::GetCurrentTag()
 {
-  return m_ShowOnly;
+  return m_CurrentTag;
 }
 
-bool cmCTest::GetProduceXML()
+bool cmCTest::GetShowOnly()
 {
-  return m_DartMode;
+  return m_ShowOnly;
 
