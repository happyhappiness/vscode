; ModuleID = '/data/download/cmake/cmake-master/Utilities/cmlibrhash/librhash/sha256.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sha256_ctx = type { [16 x i32], i64, [8 x i32], i32 }

@rhash_sha256_init.SHA256_H0 = internal constant [8 x i32] [i32 1779033703, i32 -1150833019, i32 1013904242, i32 -1521486534, i32 1359893119, i32 -1694144372, i32 528734635, i32 1541459225], align 16
@rhash_sha224_init.SHA224_H0 = internal constant [8 x i32] [i32 -1056596264, i32 914150663, i32 812702999, i32 -150054599, i32 -4191439, i32 1750603025, i32 1694076839, i32 -1090891868], align 16
@rhash_k256 = internal constant [64 x i32] [i32 1116352408, i32 1899447441, i32 -1245643825, i32 -373957723, i32 961987163, i32 1508970993, i32 -1841331548, i32 -1424204075, i32 -670586216, i32 310598401, i32 607225278, i32 1426881987, i32 1925078388, i32 -2132889090, i32 -1680079193, i32 -1046744716, i32 -459576895, i32 -272742522, i32 264347078, i32 604807628, i32 770255983, i32 1249150122, i32 1555081692, i32 1996064986, i32 -1740746414, i32 -1473132947, i32 -1341970488, i32 -1084653625, i32 -958395405, i32 -710438585, i32 113926993, i32 338241895, i32 666307205, i32 773529912, i32 1294757372, i32 1396182291, i32 1695183700, i32 1986661051, i32 -2117940946, i32 -1838011259, i32 -1564481375, i32 -1474664885, i32 -1035236496, i32 -949202525, i32 -778901479, i32 -694614492, i32 -200395387, i32 275423344, i32 430227734, i32 506948616, i32 659060556, i32 883997877, i32 958139571, i32 1322822218, i32 1537002063, i32 1747873779, i32 1955562222, i32 2024104815, i32 -2067236844, i32 -1933114872, i32 -1866530822, i32 -1538233109, i32 -1090935817, i32 -965641998], align 16

; Function Attrs: nounwind uwtable
define void @rhash_sha256_init(%struct.sha256_ctx* %ctx) #0 !dbg !14 {
entry:
  %ctx.addr = alloca %struct.sha256_ctx*, align 8
  store %struct.sha256_ctx* %ctx, %struct.sha256_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sha256_ctx** %ctx.addr, metadata !63, metadata !64), !dbg !65
  %0 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !66
  %length = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %0, i32 0, i32 1, !dbg !67
  store i64 0, i64* %length, align 8, !dbg !68
  %1 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !69
  %digest_length = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %1, i32 0, i32 3, !dbg !70
  store i32 32, i32* %digest_length, align 8, !dbg !71
  %2 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !72
  %hash = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %2, i32 0, i32 2, !dbg !73
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %hash, i32 0, i32 0, !dbg !74
  %3 = bitcast i32* %arraydecay to i8*, !dbg !74
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* bitcast ([8 x i32]* @rhash_sha256_init.SHA256_H0 to i8*), i64 32, i32 8, i1 false), !dbg !74
  ret void, !dbg !75
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define void @rhash_sha224_init(%struct.sha256_ctx* %ctx) #0 !dbg !34 {
entry:
  %ctx.addr = alloca %struct.sha256_ctx*, align 8
  store %struct.sha256_ctx* %ctx, %struct.sha256_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sha256_ctx** %ctx.addr, metadata !76, metadata !64), !dbg !77
  %0 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !78
  %length = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %0, i32 0, i32 1, !dbg !79
  store i64 0, i64* %length, align 8, !dbg !80
  %1 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !81
  %digest_length = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %1, i32 0, i32 3, !dbg !82
  store i32 28, i32* %digest_length, align 8, !dbg !83
  %2 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !84
  %hash = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %2, i32 0, i32 2, !dbg !85
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %hash, i32 0, i32 0, !dbg !86
  %3 = bitcast i32* %arraydecay to i8*, !dbg !86
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* bitcast ([8 x i32]* @rhash_sha224_init.SHA224_H0 to i8*), i64 32, i32 8, i1 false), !dbg !86
  ret void, !dbg !87
}

; Function Attrs: nounwind uwtable
define void @rhash_sha256_update(%struct.sha256_ctx* %ctx, i8* %msg, i64 %size) #0 !dbg !38 {
entry:
  %ctx.addr = alloca %struct.sha256_ctx*, align 8
  %msg.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %index = alloca i64, align 8
  %left = alloca i64, align 8
  %aligned_message_block = alloca i32*, align 8
  store %struct.sha256_ctx* %ctx, %struct.sha256_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sha256_ctx** %ctx.addr, metadata !88, metadata !64), !dbg !89
  store i8* %msg, i8** %msg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msg.addr, metadata !90, metadata !64), !dbg !91
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !92, metadata !64), !dbg !93
  call void @llvm.dbg.declare(metadata i64* %index, metadata !94, metadata !64), !dbg !95
  %0 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !96
  %length = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %0, i32 0, i32 1, !dbg !97
  %1 = load i64, i64* %length, align 8, !dbg !97
  %and = and i64 %1, 63, !dbg !98
  store i64 %and, i64* %index, align 8, !dbg !95
  %2 = load i64, i64* %size.addr, align 8, !dbg !99
  %3 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !100
  %length1 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %3, i32 0, i32 1, !dbg !101
  %4 = load i64, i64* %length1, align 8, !dbg !102
  %add = add i64 %4, %2, !dbg !102
  store i64 %add, i64* %length1, align 8, !dbg !102
  %5 = load i64, i64* %index, align 8, !dbg !103
  %tobool = icmp ne i64 %5, 0, !dbg !103
  br i1 %tobool, label %if.then, label %if.end9, !dbg !105

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %left, metadata !106, metadata !64), !dbg !108
  %6 = load i64, i64* %index, align 8, !dbg !109
  %sub = sub i64 64, %6, !dbg !110
  store i64 %sub, i64* %left, align 8, !dbg !108
  %7 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !111
  %message = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %7, i32 0, i32 0, !dbg !112
  %arraydecay = getelementptr inbounds [16 x i32], [16 x i32]* %message, i32 0, i32 0, !dbg !111
  %8 = bitcast i32* %arraydecay to i8*, !dbg !113
  %9 = load i64, i64* %index, align 8, !dbg !114
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 %9, !dbg !115
  %10 = load i8*, i8** %msg.addr, align 8, !dbg !116
  %11 = load i64, i64* %size.addr, align 8, !dbg !117
  %12 = load i64, i64* %left, align 8, !dbg !118
  %cmp = icmp ult i64 %11, %12, !dbg !119
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !117

cond.true:                                        ; preds = %if.then
  %13 = load i64, i64* %size.addr, align 8, !dbg !120
  br label %cond.end, !dbg !122

cond.false:                                       ; preds = %if.then
  %14 = load i64, i64* %left, align 8, !dbg !123
  br label %cond.end, !dbg !125

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %13, %cond.true ], [ %14, %cond.false ], !dbg !126
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %10, i64 %cond, i32 1, i1 false), !dbg !128
  %15 = load i64, i64* %size.addr, align 8, !dbg !129
  %16 = load i64, i64* %left, align 8, !dbg !131
  %cmp2 = icmp ult i64 %15, %16, !dbg !132
  br i1 %cmp2, label %if.then3, label %if.end, !dbg !133

if.then3:                                         ; preds = %cond.end
  br label %if.end27, !dbg !134

if.end:                                           ; preds = %cond.end
  %17 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !136
  %hash = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %17, i32 0, i32 2, !dbg !137
  %arraydecay4 = getelementptr inbounds [8 x i32], [8 x i32]* %hash, i32 0, i32 0, !dbg !136
  %18 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !138
  %message5 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %18, i32 0, i32 0, !dbg !139
  %arraydecay6 = getelementptr inbounds [16 x i32], [16 x i32]* %message5, i32 0, i32 0, !dbg !138
  call void @rhash_sha256_process_block(i32* %arraydecay4, i32* %arraydecay6), !dbg !140
  %19 = load i64, i64* %left, align 8, !dbg !141
  %20 = load i8*, i8** %msg.addr, align 8, !dbg !142
  %add.ptr7 = getelementptr inbounds i8, i8* %20, i64 %19, !dbg !142
  store i8* %add.ptr7, i8** %msg.addr, align 8, !dbg !142
  %21 = load i64, i64* %left, align 8, !dbg !143
  %22 = load i64, i64* %size.addr, align 8, !dbg !144
  %sub8 = sub i64 %22, %21, !dbg !144
  store i64 %sub8, i64* %size.addr, align 8, !dbg !144
  br label %if.end9, !dbg !145

if.end9:                                          ; preds = %if.end, %entry
  br label %while.cond, !dbg !146

while.cond:                                       ; preds = %if.end18, %if.end9
  %23 = load i64, i64* %size.addr, align 8, !dbg !147
  %cmp10 = icmp uge i64 %23, 64, !dbg !149
  br i1 %cmp10, label %while.body, label %while.end, !dbg !150

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32** %aligned_message_block, metadata !151, metadata !64), !dbg !153
  %24 = load i8*, i8** %msg.addr, align 8, !dbg !154
  %sub.ptr.lhs.cast = ptrtoint i8* %24 to i64, !dbg !154
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, 0, !dbg !154
  %and11 = and i64 3, %sub.ptr.sub, !dbg !154
  %cmp12 = icmp eq i64 0, %and11, !dbg !154
  br i1 %cmp12, label %if.then13, label %if.else, !dbg !156

if.then13:                                        ; preds = %while.body
  %25 = load i8*, i8** %msg.addr, align 8, !dbg !157
  %26 = bitcast i8* %25 to i32*, !dbg !159
  store i32* %26, i32** %aligned_message_block, align 8, !dbg !160
  br label %if.end18, !dbg !161

if.else:                                          ; preds = %while.body
  %27 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !162
  %message14 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %27, i32 0, i32 0, !dbg !164
  %arraydecay15 = getelementptr inbounds [16 x i32], [16 x i32]* %message14, i32 0, i32 0, !dbg !165
  %28 = bitcast i32* %arraydecay15 to i8*, !dbg !165
  %29 = load i8*, i8** %msg.addr, align 8, !dbg !166
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 64, i32 1, i1 false), !dbg !165
  %30 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !167
  %message16 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %30, i32 0, i32 0, !dbg !168
  %arraydecay17 = getelementptr inbounds [16 x i32], [16 x i32]* %message16, i32 0, i32 0, !dbg !167
  store i32* %arraydecay17, i32** %aligned_message_block, align 8, !dbg !169
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.then13
  %31 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !170
  %hash19 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %31, i32 0, i32 2, !dbg !171
  %arraydecay20 = getelementptr inbounds [8 x i32], [8 x i32]* %hash19, i32 0, i32 0, !dbg !170
  %32 = load i32*, i32** %aligned_message_block, align 8, !dbg !172
  call void @rhash_sha256_process_block(i32* %arraydecay20, i32* %32), !dbg !173
  %33 = load i8*, i8** %msg.addr, align 8, !dbg !174
  %add.ptr21 = getelementptr inbounds i8, i8* %33, i64 64, !dbg !174
  store i8* %add.ptr21, i8** %msg.addr, align 8, !dbg !174
  %34 = load i64, i64* %size.addr, align 8, !dbg !175
  %sub22 = sub i64 %34, 64, !dbg !175
  store i64 %sub22, i64* %size.addr, align 8, !dbg !175
  br label %while.cond, !dbg !176

while.end:                                        ; preds = %while.cond
  %35 = load i64, i64* %size.addr, align 8, !dbg !178
  %tobool23 = icmp ne i64 %35, 0, !dbg !178
  br i1 %tobool23, label %if.then24, label %if.end27, !dbg !180

if.then24:                                        ; preds = %while.end
  %36 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !181
  %message25 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %36, i32 0, i32 0, !dbg !183
  %arraydecay26 = getelementptr inbounds [16 x i32], [16 x i32]* %message25, i32 0, i32 0, !dbg !184
  %37 = bitcast i32* %arraydecay26 to i8*, !dbg !184
  %38 = load i8*, i8** %msg.addr, align 8, !dbg !185
  %39 = load i64, i64* %size.addr, align 8, !dbg !186
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 %39, i32 1, i1 false), !dbg !184
  br label %if.end27, !dbg !187

if.end27:                                         ; preds = %if.then3, %if.then24, %while.end
  ret void, !dbg !188
}

; Function Attrs: nounwind uwtable
define internal void @rhash_sha256_process_block(i32* %hash, i32* %block) #0 !dbg !48 {
entry:
  %hash.addr = alloca i32*, align 8
  %block.addr = alloca i32*, align 8
  %A = alloca i32, align 4
  %B = alloca i32, align 4
  %C = alloca i32, align 4
  %D = alloca i32, align 4
  %E = alloca i32, align 4
  %F = alloca i32, align 4
  %G = alloca i32, align 4
  %H = alloca i32, align 4
  %W = alloca [16 x i32], align 16
  %k = alloca i32*, align 8
  %i = alloca i32, align 4
  %T1 = alloca i32, align 4
  %T141 = alloca i32, align 4
  %T180 = alloca i32, align 4
  %T1119 = alloca i32, align 4
  %T1158 = alloca i32, align 4
  %T1197 = alloca i32, align 4
  %T1236 = alloca i32, align 4
  %T1275 = alloca i32, align 4
  %T1314 = alloca i32, align 4
  %T1353 = alloca i32, align 4
  %T1392 = alloca i32, align 4
  %T1431 = alloca i32, align 4
  %T1470 = alloca i32, align 4
  %T1509 = alloca i32, align 4
  %T1548 = alloca i32, align 4
  %T1587 = alloca i32, align 4
  %T1626 = alloca i32, align 4
  %T1697 = alloca i32, align 4
  %T1768 = alloca i32, align 4
  %T1839 = alloca i32, align 4
  %T1910 = alloca i32, align 4
  %T1981 = alloca i32, align 4
  %T11052 = alloca i32, align 4
  %T11123 = alloca i32, align 4
  %T11194 = alloca i32, align 4
  %T11265 = alloca i32, align 4
  %T11336 = alloca i32, align 4
  %T11407 = alloca i32, align 4
  %T11478 = alloca i32, align 4
  %T11549 = alloca i32, align 4
  %T11620 = alloca i32, align 4
  %T11691 = alloca i32, align 4
  store i32* %hash, i32** %hash.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %hash.addr, metadata !189, metadata !64), !dbg !190
  store i32* %block, i32** %block.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %block.addr, metadata !191, metadata !64), !dbg !192
  call void @llvm.dbg.declare(metadata i32* %A, metadata !193, metadata !64), !dbg !194
  call void @llvm.dbg.declare(metadata i32* %B, metadata !195, metadata !64), !dbg !196
  call void @llvm.dbg.declare(metadata i32* %C, metadata !197, metadata !64), !dbg !198
  call void @llvm.dbg.declare(metadata i32* %D, metadata !199, metadata !64), !dbg !200
  call void @llvm.dbg.declare(metadata i32* %E, metadata !201, metadata !64), !dbg !202
  call void @llvm.dbg.declare(metadata i32* %F, metadata !203, metadata !64), !dbg !204
  call void @llvm.dbg.declare(metadata i32* %G, metadata !205, metadata !64), !dbg !206
  call void @llvm.dbg.declare(metadata i32* %H, metadata !207, metadata !64), !dbg !208
  call void @llvm.dbg.declare(metadata [16 x i32]* %W, metadata !209, metadata !64), !dbg !210
  call void @llvm.dbg.declare(metadata i32** %k, metadata !211, metadata !64), !dbg !213
  call void @llvm.dbg.declare(metadata i32* %i, metadata !214, metadata !64), !dbg !216
  %0 = load i32*, i32** %hash.addr, align 8, !dbg !217
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 0, !dbg !217
  %1 = load i32, i32* %arrayidx, align 4, !dbg !217
  store i32 %1, i32* %A, align 4, !dbg !218
  %2 = load i32*, i32** %hash.addr, align 8, !dbg !219
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i64 1, !dbg !219
  %3 = load i32, i32* %arrayidx1, align 4, !dbg !219
  store i32 %3, i32* %B, align 4, !dbg !220
  %4 = load i32*, i32** %hash.addr, align 8, !dbg !221
  %arrayidx2 = getelementptr inbounds i32, i32* %4, i64 2, !dbg !221
  %5 = load i32, i32* %arrayidx2, align 4, !dbg !221
  store i32 %5, i32* %C, align 4, !dbg !222
  %6 = load i32*, i32** %hash.addr, align 8, !dbg !223
  %arrayidx3 = getelementptr inbounds i32, i32* %6, i64 3, !dbg !223
  %7 = load i32, i32* %arrayidx3, align 4, !dbg !223
  store i32 %7, i32* %D, align 4, !dbg !224
  %8 = load i32*, i32** %hash.addr, align 8, !dbg !225
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i64 4, !dbg !225
  %9 = load i32, i32* %arrayidx4, align 4, !dbg !225
  store i32 %9, i32* %E, align 4, !dbg !226
  %10 = load i32*, i32** %hash.addr, align 8, !dbg !227
  %arrayidx5 = getelementptr inbounds i32, i32* %10, i64 5, !dbg !227
  %11 = load i32, i32* %arrayidx5, align 4, !dbg !227
  store i32 %11, i32* %F, align 4, !dbg !228
  %12 = load i32*, i32** %hash.addr, align 8, !dbg !229
  %arrayidx6 = getelementptr inbounds i32, i32* %12, i64 6, !dbg !229
  %13 = load i32, i32* %arrayidx6, align 4, !dbg !229
  store i32 %13, i32* %G, align 4, !dbg !230
  %14 = load i32*, i32** %hash.addr, align 8, !dbg !231
  %arrayidx7 = getelementptr inbounds i32, i32* %14, i64 7, !dbg !231
  %15 = load i32, i32* %arrayidx7, align 4, !dbg !231
  store i32 %15, i32* %H, align 4, !dbg !232
  call void @llvm.dbg.declare(metadata i32* %T1, metadata !233, metadata !64), !dbg !235
  %16 = load i32, i32* %H, align 4, !dbg !235
  %17 = load i32, i32* %E, align 4, !dbg !235
  %shr = lshr i32 %17, 6, !dbg !235
  %18 = load i32, i32* %E, align 4, !dbg !235
  %shl = shl i32 %18, 26, !dbg !235
  %xor = xor i32 %shr, %shl, !dbg !235
  %19 = load i32, i32* %E, align 4, !dbg !235
  %shr8 = lshr i32 %19, 11, !dbg !235
  %20 = load i32, i32* %E, align 4, !dbg !235
  %shl9 = shl i32 %20, 21, !dbg !235
  %xor10 = xor i32 %shr8, %shl9, !dbg !235
  %xor11 = xor i32 %xor, %xor10, !dbg !235
  %21 = load i32, i32* %E, align 4, !dbg !235
  %shr12 = lshr i32 %21, 25, !dbg !235
  %22 = load i32, i32* %E, align 4, !dbg !235
  %shl13 = shl i32 %22, 7, !dbg !235
  %xor14 = xor i32 %shr12, %shl13, !dbg !235
  %xor15 = xor i32 %xor11, %xor14, !dbg !235
  %add = add i32 %16, %xor15, !dbg !235
  %23 = load i32, i32* %G, align 4, !dbg !235
  %24 = load i32, i32* %E, align 4, !dbg !235
  %25 = load i32, i32* %F, align 4, !dbg !235
  %26 = load i32, i32* %G, align 4, !dbg !235
  %xor16 = xor i32 %25, %26, !dbg !235
  %and = and i32 %24, %xor16, !dbg !235
  %xor17 = xor i32 %23, %and, !dbg !235
  %add18 = add i32 %add, %xor17, !dbg !235
  %27 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 0), align 16, !dbg !235
  %add19 = add i32 %add18, %27, !dbg !235
  %28 = load i32*, i32** %block.addr, align 8, !dbg !235
  %arrayidx20 = getelementptr inbounds i32, i32* %28, i64 0, !dbg !235
  %29 = load i32, i32* %arrayidx20, align 4, !dbg !235
  %30 = call i32 @llvm.bswap.i32(i32 %29), !dbg !235
  %arrayidx21 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 0, !dbg !235
  store i32 %30, i32* %arrayidx21, align 16, !dbg !235
  %add22 = add i32 %add19, %30, !dbg !235
  store i32 %add22, i32* %T1, align 4, !dbg !235
  %31 = load i32, i32* %T1, align 4, !dbg !235
  %32 = load i32, i32* %D, align 4, !dbg !235
  %add23 = add i32 %32, %31, !dbg !235
  store i32 %add23, i32* %D, align 4, !dbg !235
  %33 = load i32, i32* %T1, align 4, !dbg !235
  %34 = load i32, i32* %A, align 4, !dbg !235
  %shr24 = lshr i32 %34, 2, !dbg !235
  %35 = load i32, i32* %A, align 4, !dbg !235
  %shl25 = shl i32 %35, 30, !dbg !235
  %xor26 = xor i32 %shr24, %shl25, !dbg !235
  %36 = load i32, i32* %A, align 4, !dbg !235
  %shr27 = lshr i32 %36, 13, !dbg !235
  %37 = load i32, i32* %A, align 4, !dbg !235
  %shl28 = shl i32 %37, 19, !dbg !235
  %xor29 = xor i32 %shr27, %shl28, !dbg !235
  %xor30 = xor i32 %xor26, %xor29, !dbg !235
  %38 = load i32, i32* %A, align 4, !dbg !235
  %shr31 = lshr i32 %38, 22, !dbg !235
  %39 = load i32, i32* %A, align 4, !dbg !235
  %shl32 = shl i32 %39, 10, !dbg !235
  %xor33 = xor i32 %shr31, %shl32, !dbg !235
  %xor34 = xor i32 %xor30, %xor33, !dbg !235
  %add35 = add i32 %33, %xor34, !dbg !235
  %40 = load i32, i32* %A, align 4, !dbg !235
  %41 = load i32, i32* %B, align 4, !dbg !235
  %and36 = and i32 %40, %41, !dbg !235
  %42 = load i32, i32* %C, align 4, !dbg !235
  %43 = load i32, i32* %A, align 4, !dbg !235
  %44 = load i32, i32* %B, align 4, !dbg !235
  %xor37 = xor i32 %43, %44, !dbg !235
  %and38 = and i32 %42, %xor37, !dbg !235
  %xor39 = xor i32 %and36, %and38, !dbg !235
  %add40 = add i32 %add35, %xor39, !dbg !235
  store i32 %add40, i32* %H, align 4, !dbg !235
  call void @llvm.dbg.declare(metadata i32* %T141, metadata !236, metadata !64), !dbg !238
  %45 = load i32, i32* %G, align 4, !dbg !238
  %46 = load i32, i32* %D, align 4, !dbg !238
  %shr42 = lshr i32 %46, 6, !dbg !238
  %47 = load i32, i32* %D, align 4, !dbg !238
  %shl43 = shl i32 %47, 26, !dbg !238
  %xor44 = xor i32 %shr42, %shl43, !dbg !238
  %48 = load i32, i32* %D, align 4, !dbg !238
  %shr45 = lshr i32 %48, 11, !dbg !238
  %49 = load i32, i32* %D, align 4, !dbg !238
  %shl46 = shl i32 %49, 21, !dbg !238
  %xor47 = xor i32 %shr45, %shl46, !dbg !238
  %xor48 = xor i32 %xor44, %xor47, !dbg !238
  %50 = load i32, i32* %D, align 4, !dbg !238
  %shr49 = lshr i32 %50, 25, !dbg !238
  %51 = load i32, i32* %D, align 4, !dbg !238
  %shl50 = shl i32 %51, 7, !dbg !238
  %xor51 = xor i32 %shr49, %shl50, !dbg !238
  %xor52 = xor i32 %xor48, %xor51, !dbg !238
  %add53 = add i32 %45, %xor52, !dbg !238
  %52 = load i32, i32* %F, align 4, !dbg !238
  %53 = load i32, i32* %D, align 4, !dbg !238
  %54 = load i32, i32* %E, align 4, !dbg !238
  %55 = load i32, i32* %F, align 4, !dbg !238
  %xor54 = xor i32 %54, %55, !dbg !238
  %and55 = and i32 %53, %xor54, !dbg !238
  %xor56 = xor i32 %52, %and55, !dbg !238
  %add57 = add i32 %add53, %xor56, !dbg !238
  %56 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 1), align 4, !dbg !238
  %add58 = add i32 %add57, %56, !dbg !238
  %57 = load i32*, i32** %block.addr, align 8, !dbg !238
  %arrayidx59 = getelementptr inbounds i32, i32* %57, i64 1, !dbg !238
  %58 = load i32, i32* %arrayidx59, align 4, !dbg !238
  %59 = call i32 @llvm.bswap.i32(i32 %58), !dbg !238
  %arrayidx60 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 1, !dbg !238
  store i32 %59, i32* %arrayidx60, align 4, !dbg !238
  %add61 = add i32 %add58, %59, !dbg !238
  store i32 %add61, i32* %T141, align 4, !dbg !238
  %60 = load i32, i32* %T141, align 4, !dbg !238
  %61 = load i32, i32* %C, align 4, !dbg !238
  %add62 = add i32 %61, %60, !dbg !238
  store i32 %add62, i32* %C, align 4, !dbg !238
  %62 = load i32, i32* %T141, align 4, !dbg !238
  %63 = load i32, i32* %H, align 4, !dbg !238
  %shr63 = lshr i32 %63, 2, !dbg !238
  %64 = load i32, i32* %H, align 4, !dbg !238
  %shl64 = shl i32 %64, 30, !dbg !238
  %xor65 = xor i32 %shr63, %shl64, !dbg !238
  %65 = load i32, i32* %H, align 4, !dbg !238
  %shr66 = lshr i32 %65, 13, !dbg !238
  %66 = load i32, i32* %H, align 4, !dbg !238
  %shl67 = shl i32 %66, 19, !dbg !238
  %xor68 = xor i32 %shr66, %shl67, !dbg !238
  %xor69 = xor i32 %xor65, %xor68, !dbg !238
  %67 = load i32, i32* %H, align 4, !dbg !238
  %shr70 = lshr i32 %67, 22, !dbg !238
  %68 = load i32, i32* %H, align 4, !dbg !238
  %shl71 = shl i32 %68, 10, !dbg !238
  %xor72 = xor i32 %shr70, %shl71, !dbg !238
  %xor73 = xor i32 %xor69, %xor72, !dbg !238
  %add74 = add i32 %62, %xor73, !dbg !238
  %69 = load i32, i32* %H, align 4, !dbg !238
  %70 = load i32, i32* %A, align 4, !dbg !238
  %and75 = and i32 %69, %70, !dbg !238
  %71 = load i32, i32* %B, align 4, !dbg !238
  %72 = load i32, i32* %H, align 4, !dbg !238
  %73 = load i32, i32* %A, align 4, !dbg !238
  %xor76 = xor i32 %72, %73, !dbg !238
  %and77 = and i32 %71, %xor76, !dbg !238
  %xor78 = xor i32 %and75, %and77, !dbg !238
  %add79 = add i32 %add74, %xor78, !dbg !238
  store i32 %add79, i32* %G, align 4, !dbg !238
  call void @llvm.dbg.declare(metadata i32* %T180, metadata !239, metadata !64), !dbg !241
  %74 = load i32, i32* %F, align 4, !dbg !241
  %75 = load i32, i32* %C, align 4, !dbg !241
  %shr81 = lshr i32 %75, 6, !dbg !241
  %76 = load i32, i32* %C, align 4, !dbg !241
  %shl82 = shl i32 %76, 26, !dbg !241
  %xor83 = xor i32 %shr81, %shl82, !dbg !241
  %77 = load i32, i32* %C, align 4, !dbg !241
  %shr84 = lshr i32 %77, 11, !dbg !241
  %78 = load i32, i32* %C, align 4, !dbg !241
  %shl85 = shl i32 %78, 21, !dbg !241
  %xor86 = xor i32 %shr84, %shl85, !dbg !241
  %xor87 = xor i32 %xor83, %xor86, !dbg !241
  %79 = load i32, i32* %C, align 4, !dbg !241
  %shr88 = lshr i32 %79, 25, !dbg !241
  %80 = load i32, i32* %C, align 4, !dbg !241
  %shl89 = shl i32 %80, 7, !dbg !241
  %xor90 = xor i32 %shr88, %shl89, !dbg !241
  %xor91 = xor i32 %xor87, %xor90, !dbg !241
  %add92 = add i32 %74, %xor91, !dbg !241
  %81 = load i32, i32* %E, align 4, !dbg !241
  %82 = load i32, i32* %C, align 4, !dbg !241
  %83 = load i32, i32* %D, align 4, !dbg !241
  %84 = load i32, i32* %E, align 4, !dbg !241
  %xor93 = xor i32 %83, %84, !dbg !241
  %and94 = and i32 %82, %xor93, !dbg !241
  %xor95 = xor i32 %81, %and94, !dbg !241
  %add96 = add i32 %add92, %xor95, !dbg !241
  %85 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 2), align 8, !dbg !241
  %add97 = add i32 %add96, %85, !dbg !241
  %86 = load i32*, i32** %block.addr, align 8, !dbg !241
  %arrayidx98 = getelementptr inbounds i32, i32* %86, i64 2, !dbg !241
  %87 = load i32, i32* %arrayidx98, align 4, !dbg !241
  %88 = call i32 @llvm.bswap.i32(i32 %87), !dbg !241
  %arrayidx99 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 2, !dbg !241
  store i32 %88, i32* %arrayidx99, align 8, !dbg !241
  %add100 = add i32 %add97, %88, !dbg !241
  store i32 %add100, i32* %T180, align 4, !dbg !241
  %89 = load i32, i32* %T180, align 4, !dbg !241
  %90 = load i32, i32* %B, align 4, !dbg !241
  %add101 = add i32 %90, %89, !dbg !241
  store i32 %add101, i32* %B, align 4, !dbg !241
  %91 = load i32, i32* %T180, align 4, !dbg !241
  %92 = load i32, i32* %G, align 4, !dbg !241
  %shr102 = lshr i32 %92, 2, !dbg !241
  %93 = load i32, i32* %G, align 4, !dbg !241
  %shl103 = shl i32 %93, 30, !dbg !241
  %xor104 = xor i32 %shr102, %shl103, !dbg !241
  %94 = load i32, i32* %G, align 4, !dbg !241
  %shr105 = lshr i32 %94, 13, !dbg !241
  %95 = load i32, i32* %G, align 4, !dbg !241
  %shl106 = shl i32 %95, 19, !dbg !241
  %xor107 = xor i32 %shr105, %shl106, !dbg !241
  %xor108 = xor i32 %xor104, %xor107, !dbg !241
  %96 = load i32, i32* %G, align 4, !dbg !241
  %shr109 = lshr i32 %96, 22, !dbg !241
  %97 = load i32, i32* %G, align 4, !dbg !241
  %shl110 = shl i32 %97, 10, !dbg !241
  %xor111 = xor i32 %shr109, %shl110, !dbg !241
  %xor112 = xor i32 %xor108, %xor111, !dbg !241
  %add113 = add i32 %91, %xor112, !dbg !241
  %98 = load i32, i32* %G, align 4, !dbg !241
  %99 = load i32, i32* %H, align 4, !dbg !241
  %and114 = and i32 %98, %99, !dbg !241
  %100 = load i32, i32* %A, align 4, !dbg !241
  %101 = load i32, i32* %G, align 4, !dbg !241
  %102 = load i32, i32* %H, align 4, !dbg !241
  %xor115 = xor i32 %101, %102, !dbg !241
  %and116 = and i32 %100, %xor115, !dbg !241
  %xor117 = xor i32 %and114, %and116, !dbg !241
  %add118 = add i32 %add113, %xor117, !dbg !241
  store i32 %add118, i32* %F, align 4, !dbg !241
  call void @llvm.dbg.declare(metadata i32* %T1119, metadata !242, metadata !64), !dbg !244
  %103 = load i32, i32* %E, align 4, !dbg !244
  %104 = load i32, i32* %B, align 4, !dbg !244
  %shr120 = lshr i32 %104, 6, !dbg !244
  %105 = load i32, i32* %B, align 4, !dbg !244
  %shl121 = shl i32 %105, 26, !dbg !244
  %xor122 = xor i32 %shr120, %shl121, !dbg !244
  %106 = load i32, i32* %B, align 4, !dbg !244
  %shr123 = lshr i32 %106, 11, !dbg !244
  %107 = load i32, i32* %B, align 4, !dbg !244
  %shl124 = shl i32 %107, 21, !dbg !244
  %xor125 = xor i32 %shr123, %shl124, !dbg !244
  %xor126 = xor i32 %xor122, %xor125, !dbg !244
  %108 = load i32, i32* %B, align 4, !dbg !244
  %shr127 = lshr i32 %108, 25, !dbg !244
  %109 = load i32, i32* %B, align 4, !dbg !244
  %shl128 = shl i32 %109, 7, !dbg !244
  %xor129 = xor i32 %shr127, %shl128, !dbg !244
  %xor130 = xor i32 %xor126, %xor129, !dbg !244
  %add131 = add i32 %103, %xor130, !dbg !244
  %110 = load i32, i32* %D, align 4, !dbg !244
  %111 = load i32, i32* %B, align 4, !dbg !244
  %112 = load i32, i32* %C, align 4, !dbg !244
  %113 = load i32, i32* %D, align 4, !dbg !244
  %xor132 = xor i32 %112, %113, !dbg !244
  %and133 = and i32 %111, %xor132, !dbg !244
  %xor134 = xor i32 %110, %and133, !dbg !244
  %add135 = add i32 %add131, %xor134, !dbg !244
  %114 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 3), align 4, !dbg !244
  %add136 = add i32 %add135, %114, !dbg !244
  %115 = load i32*, i32** %block.addr, align 8, !dbg !244
  %arrayidx137 = getelementptr inbounds i32, i32* %115, i64 3, !dbg !244
  %116 = load i32, i32* %arrayidx137, align 4, !dbg !244
  %117 = call i32 @llvm.bswap.i32(i32 %116), !dbg !244
  %arrayidx138 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 3, !dbg !244
  store i32 %117, i32* %arrayidx138, align 4, !dbg !244
  %add139 = add i32 %add136, %117, !dbg !244
  store i32 %add139, i32* %T1119, align 4, !dbg !244
  %118 = load i32, i32* %T1119, align 4, !dbg !244
  %119 = load i32, i32* %A, align 4, !dbg !244
  %add140 = add i32 %119, %118, !dbg !244
  store i32 %add140, i32* %A, align 4, !dbg !244
  %120 = load i32, i32* %T1119, align 4, !dbg !244
  %121 = load i32, i32* %F, align 4, !dbg !244
  %shr141 = lshr i32 %121, 2, !dbg !244
  %122 = load i32, i32* %F, align 4, !dbg !244
  %shl142 = shl i32 %122, 30, !dbg !244
  %xor143 = xor i32 %shr141, %shl142, !dbg !244
  %123 = load i32, i32* %F, align 4, !dbg !244
  %shr144 = lshr i32 %123, 13, !dbg !244
  %124 = load i32, i32* %F, align 4, !dbg !244
  %shl145 = shl i32 %124, 19, !dbg !244
  %xor146 = xor i32 %shr144, %shl145, !dbg !244
  %xor147 = xor i32 %xor143, %xor146, !dbg !244
  %125 = load i32, i32* %F, align 4, !dbg !244
  %shr148 = lshr i32 %125, 22, !dbg !244
  %126 = load i32, i32* %F, align 4, !dbg !244
  %shl149 = shl i32 %126, 10, !dbg !244
  %xor150 = xor i32 %shr148, %shl149, !dbg !244
  %xor151 = xor i32 %xor147, %xor150, !dbg !244
  %add152 = add i32 %120, %xor151, !dbg !244
  %127 = load i32, i32* %F, align 4, !dbg !244
  %128 = load i32, i32* %G, align 4, !dbg !244
  %and153 = and i32 %127, %128, !dbg !244
  %129 = load i32, i32* %H, align 4, !dbg !244
  %130 = load i32, i32* %F, align 4, !dbg !244
  %131 = load i32, i32* %G, align 4, !dbg !244
  %xor154 = xor i32 %130, %131, !dbg !244
  %and155 = and i32 %129, %xor154, !dbg !244
  %xor156 = xor i32 %and153, %and155, !dbg !244
  %add157 = add i32 %add152, %xor156, !dbg !244
  store i32 %add157, i32* %E, align 4, !dbg !244
  call void @llvm.dbg.declare(metadata i32* %T1158, metadata !245, metadata !64), !dbg !247
  %132 = load i32, i32* %D, align 4, !dbg !247
  %133 = load i32, i32* %A, align 4, !dbg !247
  %shr159 = lshr i32 %133, 6, !dbg !247
  %134 = load i32, i32* %A, align 4, !dbg !247
  %shl160 = shl i32 %134, 26, !dbg !247
  %xor161 = xor i32 %shr159, %shl160, !dbg !247
  %135 = load i32, i32* %A, align 4, !dbg !247
  %shr162 = lshr i32 %135, 11, !dbg !247
  %136 = load i32, i32* %A, align 4, !dbg !247
  %shl163 = shl i32 %136, 21, !dbg !247
  %xor164 = xor i32 %shr162, %shl163, !dbg !247
  %xor165 = xor i32 %xor161, %xor164, !dbg !247
  %137 = load i32, i32* %A, align 4, !dbg !247
  %shr166 = lshr i32 %137, 25, !dbg !247
  %138 = load i32, i32* %A, align 4, !dbg !247
  %shl167 = shl i32 %138, 7, !dbg !247
  %xor168 = xor i32 %shr166, %shl167, !dbg !247
  %xor169 = xor i32 %xor165, %xor168, !dbg !247
  %add170 = add i32 %132, %xor169, !dbg !247
  %139 = load i32, i32* %C, align 4, !dbg !247
  %140 = load i32, i32* %A, align 4, !dbg !247
  %141 = load i32, i32* %B, align 4, !dbg !247
  %142 = load i32, i32* %C, align 4, !dbg !247
  %xor171 = xor i32 %141, %142, !dbg !247
  %and172 = and i32 %140, %xor171, !dbg !247
  %xor173 = xor i32 %139, %and172, !dbg !247
  %add174 = add i32 %add170, %xor173, !dbg !247
  %143 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 4), align 16, !dbg !247
  %add175 = add i32 %add174, %143, !dbg !247
  %144 = load i32*, i32** %block.addr, align 8, !dbg !247
  %arrayidx176 = getelementptr inbounds i32, i32* %144, i64 4, !dbg !247
  %145 = load i32, i32* %arrayidx176, align 4, !dbg !247
  %146 = call i32 @llvm.bswap.i32(i32 %145), !dbg !247
  %arrayidx177 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 4, !dbg !247
  store i32 %146, i32* %arrayidx177, align 16, !dbg !247
  %add178 = add i32 %add175, %146, !dbg !247
  store i32 %add178, i32* %T1158, align 4, !dbg !247
  %147 = load i32, i32* %T1158, align 4, !dbg !247
  %148 = load i32, i32* %H, align 4, !dbg !247
  %add179 = add i32 %148, %147, !dbg !247
  store i32 %add179, i32* %H, align 4, !dbg !247
  %149 = load i32, i32* %T1158, align 4, !dbg !247
  %150 = load i32, i32* %E, align 4, !dbg !247
  %shr180 = lshr i32 %150, 2, !dbg !247
  %151 = load i32, i32* %E, align 4, !dbg !247
  %shl181 = shl i32 %151, 30, !dbg !247
  %xor182 = xor i32 %shr180, %shl181, !dbg !247
  %152 = load i32, i32* %E, align 4, !dbg !247
  %shr183 = lshr i32 %152, 13, !dbg !247
  %153 = load i32, i32* %E, align 4, !dbg !247
  %shl184 = shl i32 %153, 19, !dbg !247
  %xor185 = xor i32 %shr183, %shl184, !dbg !247
  %xor186 = xor i32 %xor182, %xor185, !dbg !247
  %154 = load i32, i32* %E, align 4, !dbg !247
  %shr187 = lshr i32 %154, 22, !dbg !247
  %155 = load i32, i32* %E, align 4, !dbg !247
  %shl188 = shl i32 %155, 10, !dbg !247
  %xor189 = xor i32 %shr187, %shl188, !dbg !247
  %xor190 = xor i32 %xor186, %xor189, !dbg !247
  %add191 = add i32 %149, %xor190, !dbg !247
  %156 = load i32, i32* %E, align 4, !dbg !247
  %157 = load i32, i32* %F, align 4, !dbg !247
  %and192 = and i32 %156, %157, !dbg !247
  %158 = load i32, i32* %G, align 4, !dbg !247
  %159 = load i32, i32* %E, align 4, !dbg !247
  %160 = load i32, i32* %F, align 4, !dbg !247
  %xor193 = xor i32 %159, %160, !dbg !247
  %and194 = and i32 %158, %xor193, !dbg !247
  %xor195 = xor i32 %and192, %and194, !dbg !247
  %add196 = add i32 %add191, %xor195, !dbg !247
  store i32 %add196, i32* %D, align 4, !dbg !247
  call void @llvm.dbg.declare(metadata i32* %T1197, metadata !248, metadata !64), !dbg !250
  %161 = load i32, i32* %C, align 4, !dbg !250
  %162 = load i32, i32* %H, align 4, !dbg !250
  %shr198 = lshr i32 %162, 6, !dbg !250
  %163 = load i32, i32* %H, align 4, !dbg !250
  %shl199 = shl i32 %163, 26, !dbg !250
  %xor200 = xor i32 %shr198, %shl199, !dbg !250
  %164 = load i32, i32* %H, align 4, !dbg !250
  %shr201 = lshr i32 %164, 11, !dbg !250
  %165 = load i32, i32* %H, align 4, !dbg !250
  %shl202 = shl i32 %165, 21, !dbg !250
  %xor203 = xor i32 %shr201, %shl202, !dbg !250
  %xor204 = xor i32 %xor200, %xor203, !dbg !250
  %166 = load i32, i32* %H, align 4, !dbg !250
  %shr205 = lshr i32 %166, 25, !dbg !250
  %167 = load i32, i32* %H, align 4, !dbg !250
  %shl206 = shl i32 %167, 7, !dbg !250
  %xor207 = xor i32 %shr205, %shl206, !dbg !250
  %xor208 = xor i32 %xor204, %xor207, !dbg !250
  %add209 = add i32 %161, %xor208, !dbg !250
  %168 = load i32, i32* %B, align 4, !dbg !250
  %169 = load i32, i32* %H, align 4, !dbg !250
  %170 = load i32, i32* %A, align 4, !dbg !250
  %171 = load i32, i32* %B, align 4, !dbg !250
  %xor210 = xor i32 %170, %171, !dbg !250
  %and211 = and i32 %169, %xor210, !dbg !250
  %xor212 = xor i32 %168, %and211, !dbg !250
  %add213 = add i32 %add209, %xor212, !dbg !250
  %172 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 5), align 4, !dbg !250
  %add214 = add i32 %add213, %172, !dbg !250
  %173 = load i32*, i32** %block.addr, align 8, !dbg !250
  %arrayidx215 = getelementptr inbounds i32, i32* %173, i64 5, !dbg !250
  %174 = load i32, i32* %arrayidx215, align 4, !dbg !250
  %175 = call i32 @llvm.bswap.i32(i32 %174), !dbg !250
  %arrayidx216 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 5, !dbg !250
  store i32 %175, i32* %arrayidx216, align 4, !dbg !250
  %add217 = add i32 %add214, %175, !dbg !250
  store i32 %add217, i32* %T1197, align 4, !dbg !250
  %176 = load i32, i32* %T1197, align 4, !dbg !250
  %177 = load i32, i32* %G, align 4, !dbg !250
  %add218 = add i32 %177, %176, !dbg !250
  store i32 %add218, i32* %G, align 4, !dbg !250
  %178 = load i32, i32* %T1197, align 4, !dbg !250
  %179 = load i32, i32* %D, align 4, !dbg !250
  %shr219 = lshr i32 %179, 2, !dbg !250
  %180 = load i32, i32* %D, align 4, !dbg !250
  %shl220 = shl i32 %180, 30, !dbg !250
  %xor221 = xor i32 %shr219, %shl220, !dbg !250
  %181 = load i32, i32* %D, align 4, !dbg !250
  %shr222 = lshr i32 %181, 13, !dbg !250
  %182 = load i32, i32* %D, align 4, !dbg !250
  %shl223 = shl i32 %182, 19, !dbg !250
  %xor224 = xor i32 %shr222, %shl223, !dbg !250
  %xor225 = xor i32 %xor221, %xor224, !dbg !250
  %183 = load i32, i32* %D, align 4, !dbg !250
  %shr226 = lshr i32 %183, 22, !dbg !250
  %184 = load i32, i32* %D, align 4, !dbg !250
  %shl227 = shl i32 %184, 10, !dbg !250
  %xor228 = xor i32 %shr226, %shl227, !dbg !250
  %xor229 = xor i32 %xor225, %xor228, !dbg !250
  %add230 = add i32 %178, %xor229, !dbg !250
  %185 = load i32, i32* %D, align 4, !dbg !250
  %186 = load i32, i32* %E, align 4, !dbg !250
  %and231 = and i32 %185, %186, !dbg !250
  %187 = load i32, i32* %F, align 4, !dbg !250
  %188 = load i32, i32* %D, align 4, !dbg !250
  %189 = load i32, i32* %E, align 4, !dbg !250
  %xor232 = xor i32 %188, %189, !dbg !250
  %and233 = and i32 %187, %xor232, !dbg !250
  %xor234 = xor i32 %and231, %and233, !dbg !250
  %add235 = add i32 %add230, %xor234, !dbg !250
  store i32 %add235, i32* %C, align 4, !dbg !250
  call void @llvm.dbg.declare(metadata i32* %T1236, metadata !251, metadata !64), !dbg !253
  %190 = load i32, i32* %B, align 4, !dbg !253
  %191 = load i32, i32* %G, align 4, !dbg !253
  %shr237 = lshr i32 %191, 6, !dbg !253
  %192 = load i32, i32* %G, align 4, !dbg !253
  %shl238 = shl i32 %192, 26, !dbg !253
  %xor239 = xor i32 %shr237, %shl238, !dbg !253
  %193 = load i32, i32* %G, align 4, !dbg !253
  %shr240 = lshr i32 %193, 11, !dbg !253
  %194 = load i32, i32* %G, align 4, !dbg !253
  %shl241 = shl i32 %194, 21, !dbg !253
  %xor242 = xor i32 %shr240, %shl241, !dbg !253
  %xor243 = xor i32 %xor239, %xor242, !dbg !253
  %195 = load i32, i32* %G, align 4, !dbg !253
  %shr244 = lshr i32 %195, 25, !dbg !253
  %196 = load i32, i32* %G, align 4, !dbg !253
  %shl245 = shl i32 %196, 7, !dbg !253
  %xor246 = xor i32 %shr244, %shl245, !dbg !253
  %xor247 = xor i32 %xor243, %xor246, !dbg !253
  %add248 = add i32 %190, %xor247, !dbg !253
  %197 = load i32, i32* %A, align 4, !dbg !253
  %198 = load i32, i32* %G, align 4, !dbg !253
  %199 = load i32, i32* %H, align 4, !dbg !253
  %200 = load i32, i32* %A, align 4, !dbg !253
  %xor249 = xor i32 %199, %200, !dbg !253
  %and250 = and i32 %198, %xor249, !dbg !253
  %xor251 = xor i32 %197, %and250, !dbg !253
  %add252 = add i32 %add248, %xor251, !dbg !253
  %201 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 6), align 8, !dbg !253
  %add253 = add i32 %add252, %201, !dbg !253
  %202 = load i32*, i32** %block.addr, align 8, !dbg !253
  %arrayidx254 = getelementptr inbounds i32, i32* %202, i64 6, !dbg !253
  %203 = load i32, i32* %arrayidx254, align 4, !dbg !253
  %204 = call i32 @llvm.bswap.i32(i32 %203), !dbg !253
  %arrayidx255 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 6, !dbg !253
  store i32 %204, i32* %arrayidx255, align 8, !dbg !253
  %add256 = add i32 %add253, %204, !dbg !253
  store i32 %add256, i32* %T1236, align 4, !dbg !253
  %205 = load i32, i32* %T1236, align 4, !dbg !253
  %206 = load i32, i32* %F, align 4, !dbg !253
  %add257 = add i32 %206, %205, !dbg !253
  store i32 %add257, i32* %F, align 4, !dbg !253
  %207 = load i32, i32* %T1236, align 4, !dbg !253
  %208 = load i32, i32* %C, align 4, !dbg !253
  %shr258 = lshr i32 %208, 2, !dbg !253
  %209 = load i32, i32* %C, align 4, !dbg !253
  %shl259 = shl i32 %209, 30, !dbg !253
  %xor260 = xor i32 %shr258, %shl259, !dbg !253
  %210 = load i32, i32* %C, align 4, !dbg !253
  %shr261 = lshr i32 %210, 13, !dbg !253
  %211 = load i32, i32* %C, align 4, !dbg !253
  %shl262 = shl i32 %211, 19, !dbg !253
  %xor263 = xor i32 %shr261, %shl262, !dbg !253
  %xor264 = xor i32 %xor260, %xor263, !dbg !253
  %212 = load i32, i32* %C, align 4, !dbg !253
  %shr265 = lshr i32 %212, 22, !dbg !253
  %213 = load i32, i32* %C, align 4, !dbg !253
  %shl266 = shl i32 %213, 10, !dbg !253
  %xor267 = xor i32 %shr265, %shl266, !dbg !253
  %xor268 = xor i32 %xor264, %xor267, !dbg !253
  %add269 = add i32 %207, %xor268, !dbg !253
  %214 = load i32, i32* %C, align 4, !dbg !253
  %215 = load i32, i32* %D, align 4, !dbg !253
  %and270 = and i32 %214, %215, !dbg !253
  %216 = load i32, i32* %E, align 4, !dbg !253
  %217 = load i32, i32* %C, align 4, !dbg !253
  %218 = load i32, i32* %D, align 4, !dbg !253
  %xor271 = xor i32 %217, %218, !dbg !253
  %and272 = and i32 %216, %xor271, !dbg !253
  %xor273 = xor i32 %and270, %and272, !dbg !253
  %add274 = add i32 %add269, %xor273, !dbg !253
  store i32 %add274, i32* %B, align 4, !dbg !253
  call void @llvm.dbg.declare(metadata i32* %T1275, metadata !254, metadata !64), !dbg !256
  %219 = load i32, i32* %A, align 4, !dbg !256
  %220 = load i32, i32* %F, align 4, !dbg !256
  %shr276 = lshr i32 %220, 6, !dbg !256
  %221 = load i32, i32* %F, align 4, !dbg !256
  %shl277 = shl i32 %221, 26, !dbg !256
  %xor278 = xor i32 %shr276, %shl277, !dbg !256
  %222 = load i32, i32* %F, align 4, !dbg !256
  %shr279 = lshr i32 %222, 11, !dbg !256
  %223 = load i32, i32* %F, align 4, !dbg !256
  %shl280 = shl i32 %223, 21, !dbg !256
  %xor281 = xor i32 %shr279, %shl280, !dbg !256
  %xor282 = xor i32 %xor278, %xor281, !dbg !256
  %224 = load i32, i32* %F, align 4, !dbg !256
  %shr283 = lshr i32 %224, 25, !dbg !256
  %225 = load i32, i32* %F, align 4, !dbg !256
  %shl284 = shl i32 %225, 7, !dbg !256
  %xor285 = xor i32 %shr283, %shl284, !dbg !256
  %xor286 = xor i32 %xor282, %xor285, !dbg !256
  %add287 = add i32 %219, %xor286, !dbg !256
  %226 = load i32, i32* %H, align 4, !dbg !256
  %227 = load i32, i32* %F, align 4, !dbg !256
  %228 = load i32, i32* %G, align 4, !dbg !256
  %229 = load i32, i32* %H, align 4, !dbg !256
  %xor288 = xor i32 %228, %229, !dbg !256
  %and289 = and i32 %227, %xor288, !dbg !256
  %xor290 = xor i32 %226, %and289, !dbg !256
  %add291 = add i32 %add287, %xor290, !dbg !256
  %230 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 7), align 4, !dbg !256
  %add292 = add i32 %add291, %230, !dbg !256
  %231 = load i32*, i32** %block.addr, align 8, !dbg !256
  %arrayidx293 = getelementptr inbounds i32, i32* %231, i64 7, !dbg !256
  %232 = load i32, i32* %arrayidx293, align 4, !dbg !256
  %233 = call i32 @llvm.bswap.i32(i32 %232), !dbg !256
  %arrayidx294 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 7, !dbg !256
  store i32 %233, i32* %arrayidx294, align 4, !dbg !256
  %add295 = add i32 %add292, %233, !dbg !256
  store i32 %add295, i32* %T1275, align 4, !dbg !256
  %234 = load i32, i32* %T1275, align 4, !dbg !256
  %235 = load i32, i32* %E, align 4, !dbg !256
  %add296 = add i32 %235, %234, !dbg !256
  store i32 %add296, i32* %E, align 4, !dbg !256
  %236 = load i32, i32* %T1275, align 4, !dbg !256
  %237 = load i32, i32* %B, align 4, !dbg !256
  %shr297 = lshr i32 %237, 2, !dbg !256
  %238 = load i32, i32* %B, align 4, !dbg !256
  %shl298 = shl i32 %238, 30, !dbg !256
  %xor299 = xor i32 %shr297, %shl298, !dbg !256
  %239 = load i32, i32* %B, align 4, !dbg !256
  %shr300 = lshr i32 %239, 13, !dbg !256
  %240 = load i32, i32* %B, align 4, !dbg !256
  %shl301 = shl i32 %240, 19, !dbg !256
  %xor302 = xor i32 %shr300, %shl301, !dbg !256
  %xor303 = xor i32 %xor299, %xor302, !dbg !256
  %241 = load i32, i32* %B, align 4, !dbg !256
  %shr304 = lshr i32 %241, 22, !dbg !256
  %242 = load i32, i32* %B, align 4, !dbg !256
  %shl305 = shl i32 %242, 10, !dbg !256
  %xor306 = xor i32 %shr304, %shl305, !dbg !256
  %xor307 = xor i32 %xor303, %xor306, !dbg !256
  %add308 = add i32 %236, %xor307, !dbg !256
  %243 = load i32, i32* %B, align 4, !dbg !256
  %244 = load i32, i32* %C, align 4, !dbg !256
  %and309 = and i32 %243, %244, !dbg !256
  %245 = load i32, i32* %D, align 4, !dbg !256
  %246 = load i32, i32* %B, align 4, !dbg !256
  %247 = load i32, i32* %C, align 4, !dbg !256
  %xor310 = xor i32 %246, %247, !dbg !256
  %and311 = and i32 %245, %xor310, !dbg !256
  %xor312 = xor i32 %and309, %and311, !dbg !256
  %add313 = add i32 %add308, %xor312, !dbg !256
  store i32 %add313, i32* %A, align 4, !dbg !256
  call void @llvm.dbg.declare(metadata i32* %T1314, metadata !257, metadata !64), !dbg !259
  %248 = load i32, i32* %H, align 4, !dbg !259
  %249 = load i32, i32* %E, align 4, !dbg !259
  %shr315 = lshr i32 %249, 6, !dbg !259
  %250 = load i32, i32* %E, align 4, !dbg !259
  %shl316 = shl i32 %250, 26, !dbg !259
  %xor317 = xor i32 %shr315, %shl316, !dbg !259
  %251 = load i32, i32* %E, align 4, !dbg !259
  %shr318 = lshr i32 %251, 11, !dbg !259
  %252 = load i32, i32* %E, align 4, !dbg !259
  %shl319 = shl i32 %252, 21, !dbg !259
  %xor320 = xor i32 %shr318, %shl319, !dbg !259
  %xor321 = xor i32 %xor317, %xor320, !dbg !259
  %253 = load i32, i32* %E, align 4, !dbg !259
  %shr322 = lshr i32 %253, 25, !dbg !259
  %254 = load i32, i32* %E, align 4, !dbg !259
  %shl323 = shl i32 %254, 7, !dbg !259
  %xor324 = xor i32 %shr322, %shl323, !dbg !259
  %xor325 = xor i32 %xor321, %xor324, !dbg !259
  %add326 = add i32 %248, %xor325, !dbg !259
  %255 = load i32, i32* %G, align 4, !dbg !259
  %256 = load i32, i32* %E, align 4, !dbg !259
  %257 = load i32, i32* %F, align 4, !dbg !259
  %258 = load i32, i32* %G, align 4, !dbg !259
  %xor327 = xor i32 %257, %258, !dbg !259
  %and328 = and i32 %256, %xor327, !dbg !259
  %xor329 = xor i32 %255, %and328, !dbg !259
  %add330 = add i32 %add326, %xor329, !dbg !259
  %259 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 8), align 16, !dbg !259
  %add331 = add i32 %add330, %259, !dbg !259
  %260 = load i32*, i32** %block.addr, align 8, !dbg !259
  %arrayidx332 = getelementptr inbounds i32, i32* %260, i64 8, !dbg !259
  %261 = load i32, i32* %arrayidx332, align 4, !dbg !259
  %262 = call i32 @llvm.bswap.i32(i32 %261), !dbg !259
  %arrayidx333 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 8, !dbg !259
  store i32 %262, i32* %arrayidx333, align 16, !dbg !259
  %add334 = add i32 %add331, %262, !dbg !259
  store i32 %add334, i32* %T1314, align 4, !dbg !259
  %263 = load i32, i32* %T1314, align 4, !dbg !259
  %264 = load i32, i32* %D, align 4, !dbg !259
  %add335 = add i32 %264, %263, !dbg !259
  store i32 %add335, i32* %D, align 4, !dbg !259
  %265 = load i32, i32* %T1314, align 4, !dbg !259
  %266 = load i32, i32* %A, align 4, !dbg !259
  %shr336 = lshr i32 %266, 2, !dbg !259
  %267 = load i32, i32* %A, align 4, !dbg !259
  %shl337 = shl i32 %267, 30, !dbg !259
  %xor338 = xor i32 %shr336, %shl337, !dbg !259
  %268 = load i32, i32* %A, align 4, !dbg !259
  %shr339 = lshr i32 %268, 13, !dbg !259
  %269 = load i32, i32* %A, align 4, !dbg !259
  %shl340 = shl i32 %269, 19, !dbg !259
  %xor341 = xor i32 %shr339, %shl340, !dbg !259
  %xor342 = xor i32 %xor338, %xor341, !dbg !259
  %270 = load i32, i32* %A, align 4, !dbg !259
  %shr343 = lshr i32 %270, 22, !dbg !259
  %271 = load i32, i32* %A, align 4, !dbg !259
  %shl344 = shl i32 %271, 10, !dbg !259
  %xor345 = xor i32 %shr343, %shl344, !dbg !259
  %xor346 = xor i32 %xor342, %xor345, !dbg !259
  %add347 = add i32 %265, %xor346, !dbg !259
  %272 = load i32, i32* %A, align 4, !dbg !259
  %273 = load i32, i32* %B, align 4, !dbg !259
  %and348 = and i32 %272, %273, !dbg !259
  %274 = load i32, i32* %C, align 4, !dbg !259
  %275 = load i32, i32* %A, align 4, !dbg !259
  %276 = load i32, i32* %B, align 4, !dbg !259
  %xor349 = xor i32 %275, %276, !dbg !259
  %and350 = and i32 %274, %xor349, !dbg !259
  %xor351 = xor i32 %and348, %and350, !dbg !259
  %add352 = add i32 %add347, %xor351, !dbg !259
  store i32 %add352, i32* %H, align 4, !dbg !259
  call void @llvm.dbg.declare(metadata i32* %T1353, metadata !260, metadata !64), !dbg !262
  %277 = load i32, i32* %G, align 4, !dbg !262
  %278 = load i32, i32* %D, align 4, !dbg !262
  %shr354 = lshr i32 %278, 6, !dbg !262
  %279 = load i32, i32* %D, align 4, !dbg !262
  %shl355 = shl i32 %279, 26, !dbg !262
  %xor356 = xor i32 %shr354, %shl355, !dbg !262
  %280 = load i32, i32* %D, align 4, !dbg !262
  %shr357 = lshr i32 %280, 11, !dbg !262
  %281 = load i32, i32* %D, align 4, !dbg !262
  %shl358 = shl i32 %281, 21, !dbg !262
  %xor359 = xor i32 %shr357, %shl358, !dbg !262
  %xor360 = xor i32 %xor356, %xor359, !dbg !262
  %282 = load i32, i32* %D, align 4, !dbg !262
  %shr361 = lshr i32 %282, 25, !dbg !262
  %283 = load i32, i32* %D, align 4, !dbg !262
  %shl362 = shl i32 %283, 7, !dbg !262
  %xor363 = xor i32 %shr361, %shl362, !dbg !262
  %xor364 = xor i32 %xor360, %xor363, !dbg !262
  %add365 = add i32 %277, %xor364, !dbg !262
  %284 = load i32, i32* %F, align 4, !dbg !262
  %285 = load i32, i32* %D, align 4, !dbg !262
  %286 = load i32, i32* %E, align 4, !dbg !262
  %287 = load i32, i32* %F, align 4, !dbg !262
  %xor366 = xor i32 %286, %287, !dbg !262
  %and367 = and i32 %285, %xor366, !dbg !262
  %xor368 = xor i32 %284, %and367, !dbg !262
  %add369 = add i32 %add365, %xor368, !dbg !262
  %288 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 9), align 4, !dbg !262
  %add370 = add i32 %add369, %288, !dbg !262
  %289 = load i32*, i32** %block.addr, align 8, !dbg !262
  %arrayidx371 = getelementptr inbounds i32, i32* %289, i64 9, !dbg !262
  %290 = load i32, i32* %arrayidx371, align 4, !dbg !262
  %291 = call i32 @llvm.bswap.i32(i32 %290), !dbg !262
  %arrayidx372 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 9, !dbg !262
  store i32 %291, i32* %arrayidx372, align 4, !dbg !262
  %add373 = add i32 %add370, %291, !dbg !262
  store i32 %add373, i32* %T1353, align 4, !dbg !262
  %292 = load i32, i32* %T1353, align 4, !dbg !262
  %293 = load i32, i32* %C, align 4, !dbg !262
  %add374 = add i32 %293, %292, !dbg !262
  store i32 %add374, i32* %C, align 4, !dbg !262
  %294 = load i32, i32* %T1353, align 4, !dbg !262
  %295 = load i32, i32* %H, align 4, !dbg !262
  %shr375 = lshr i32 %295, 2, !dbg !262
  %296 = load i32, i32* %H, align 4, !dbg !262
  %shl376 = shl i32 %296, 30, !dbg !262
  %xor377 = xor i32 %shr375, %shl376, !dbg !262
  %297 = load i32, i32* %H, align 4, !dbg !262
  %shr378 = lshr i32 %297, 13, !dbg !262
  %298 = load i32, i32* %H, align 4, !dbg !262
  %shl379 = shl i32 %298, 19, !dbg !262
  %xor380 = xor i32 %shr378, %shl379, !dbg !262
  %xor381 = xor i32 %xor377, %xor380, !dbg !262
  %299 = load i32, i32* %H, align 4, !dbg !262
  %shr382 = lshr i32 %299, 22, !dbg !262
  %300 = load i32, i32* %H, align 4, !dbg !262
  %shl383 = shl i32 %300, 10, !dbg !262
  %xor384 = xor i32 %shr382, %shl383, !dbg !262
  %xor385 = xor i32 %xor381, %xor384, !dbg !262
  %add386 = add i32 %294, %xor385, !dbg !262
  %301 = load i32, i32* %H, align 4, !dbg !262
  %302 = load i32, i32* %A, align 4, !dbg !262
  %and387 = and i32 %301, %302, !dbg !262
  %303 = load i32, i32* %B, align 4, !dbg !262
  %304 = load i32, i32* %H, align 4, !dbg !262
  %305 = load i32, i32* %A, align 4, !dbg !262
  %xor388 = xor i32 %304, %305, !dbg !262
  %and389 = and i32 %303, %xor388, !dbg !262
  %xor390 = xor i32 %and387, %and389, !dbg !262
  %add391 = add i32 %add386, %xor390, !dbg !262
  store i32 %add391, i32* %G, align 4, !dbg !262
  call void @llvm.dbg.declare(metadata i32* %T1392, metadata !263, metadata !64), !dbg !265
  %306 = load i32, i32* %F, align 4, !dbg !265
  %307 = load i32, i32* %C, align 4, !dbg !265
  %shr393 = lshr i32 %307, 6, !dbg !265
  %308 = load i32, i32* %C, align 4, !dbg !265
  %shl394 = shl i32 %308, 26, !dbg !265
  %xor395 = xor i32 %shr393, %shl394, !dbg !265
  %309 = load i32, i32* %C, align 4, !dbg !265
  %shr396 = lshr i32 %309, 11, !dbg !265
  %310 = load i32, i32* %C, align 4, !dbg !265
  %shl397 = shl i32 %310, 21, !dbg !265
  %xor398 = xor i32 %shr396, %shl397, !dbg !265
  %xor399 = xor i32 %xor395, %xor398, !dbg !265
  %311 = load i32, i32* %C, align 4, !dbg !265
  %shr400 = lshr i32 %311, 25, !dbg !265
  %312 = load i32, i32* %C, align 4, !dbg !265
  %shl401 = shl i32 %312, 7, !dbg !265
  %xor402 = xor i32 %shr400, %shl401, !dbg !265
  %xor403 = xor i32 %xor399, %xor402, !dbg !265
  %add404 = add i32 %306, %xor403, !dbg !265
  %313 = load i32, i32* %E, align 4, !dbg !265
  %314 = load i32, i32* %C, align 4, !dbg !265
  %315 = load i32, i32* %D, align 4, !dbg !265
  %316 = load i32, i32* %E, align 4, !dbg !265
  %xor405 = xor i32 %315, %316, !dbg !265
  %and406 = and i32 %314, %xor405, !dbg !265
  %xor407 = xor i32 %313, %and406, !dbg !265
  %add408 = add i32 %add404, %xor407, !dbg !265
  %317 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 10), align 8, !dbg !265
  %add409 = add i32 %add408, %317, !dbg !265
  %318 = load i32*, i32** %block.addr, align 8, !dbg !265
  %arrayidx410 = getelementptr inbounds i32, i32* %318, i64 10, !dbg !265
  %319 = load i32, i32* %arrayidx410, align 4, !dbg !265
  %320 = call i32 @llvm.bswap.i32(i32 %319), !dbg !265
  %arrayidx411 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 10, !dbg !265
  store i32 %320, i32* %arrayidx411, align 8, !dbg !265
  %add412 = add i32 %add409, %320, !dbg !265
  store i32 %add412, i32* %T1392, align 4, !dbg !265
  %321 = load i32, i32* %T1392, align 4, !dbg !265
  %322 = load i32, i32* %B, align 4, !dbg !265
  %add413 = add i32 %322, %321, !dbg !265
  store i32 %add413, i32* %B, align 4, !dbg !265
  %323 = load i32, i32* %T1392, align 4, !dbg !265
  %324 = load i32, i32* %G, align 4, !dbg !265
  %shr414 = lshr i32 %324, 2, !dbg !265
  %325 = load i32, i32* %G, align 4, !dbg !265
  %shl415 = shl i32 %325, 30, !dbg !265
  %xor416 = xor i32 %shr414, %shl415, !dbg !265
  %326 = load i32, i32* %G, align 4, !dbg !265
  %shr417 = lshr i32 %326, 13, !dbg !265
  %327 = load i32, i32* %G, align 4, !dbg !265
  %shl418 = shl i32 %327, 19, !dbg !265
  %xor419 = xor i32 %shr417, %shl418, !dbg !265
  %xor420 = xor i32 %xor416, %xor419, !dbg !265
  %328 = load i32, i32* %G, align 4, !dbg !265
  %shr421 = lshr i32 %328, 22, !dbg !265
  %329 = load i32, i32* %G, align 4, !dbg !265
  %shl422 = shl i32 %329, 10, !dbg !265
  %xor423 = xor i32 %shr421, %shl422, !dbg !265
  %xor424 = xor i32 %xor420, %xor423, !dbg !265
  %add425 = add i32 %323, %xor424, !dbg !265
  %330 = load i32, i32* %G, align 4, !dbg !265
  %331 = load i32, i32* %H, align 4, !dbg !265
  %and426 = and i32 %330, %331, !dbg !265
  %332 = load i32, i32* %A, align 4, !dbg !265
  %333 = load i32, i32* %G, align 4, !dbg !265
  %334 = load i32, i32* %H, align 4, !dbg !265
  %xor427 = xor i32 %333, %334, !dbg !265
  %and428 = and i32 %332, %xor427, !dbg !265
  %xor429 = xor i32 %and426, %and428, !dbg !265
  %add430 = add i32 %add425, %xor429, !dbg !265
  store i32 %add430, i32* %F, align 4, !dbg !265
  call void @llvm.dbg.declare(metadata i32* %T1431, metadata !266, metadata !64), !dbg !268
  %335 = load i32, i32* %E, align 4, !dbg !268
  %336 = load i32, i32* %B, align 4, !dbg !268
  %shr432 = lshr i32 %336, 6, !dbg !268
  %337 = load i32, i32* %B, align 4, !dbg !268
  %shl433 = shl i32 %337, 26, !dbg !268
  %xor434 = xor i32 %shr432, %shl433, !dbg !268
  %338 = load i32, i32* %B, align 4, !dbg !268
  %shr435 = lshr i32 %338, 11, !dbg !268
  %339 = load i32, i32* %B, align 4, !dbg !268
  %shl436 = shl i32 %339, 21, !dbg !268
  %xor437 = xor i32 %shr435, %shl436, !dbg !268
  %xor438 = xor i32 %xor434, %xor437, !dbg !268
  %340 = load i32, i32* %B, align 4, !dbg !268
  %shr439 = lshr i32 %340, 25, !dbg !268
  %341 = load i32, i32* %B, align 4, !dbg !268
  %shl440 = shl i32 %341, 7, !dbg !268
  %xor441 = xor i32 %shr439, %shl440, !dbg !268
  %xor442 = xor i32 %xor438, %xor441, !dbg !268
  %add443 = add i32 %335, %xor442, !dbg !268
  %342 = load i32, i32* %D, align 4, !dbg !268
  %343 = load i32, i32* %B, align 4, !dbg !268
  %344 = load i32, i32* %C, align 4, !dbg !268
  %345 = load i32, i32* %D, align 4, !dbg !268
  %xor444 = xor i32 %344, %345, !dbg !268
  %and445 = and i32 %343, %xor444, !dbg !268
  %xor446 = xor i32 %342, %and445, !dbg !268
  %add447 = add i32 %add443, %xor446, !dbg !268
  %346 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 11), align 4, !dbg !268
  %add448 = add i32 %add447, %346, !dbg !268
  %347 = load i32*, i32** %block.addr, align 8, !dbg !268
  %arrayidx449 = getelementptr inbounds i32, i32* %347, i64 11, !dbg !268
  %348 = load i32, i32* %arrayidx449, align 4, !dbg !268
  %349 = call i32 @llvm.bswap.i32(i32 %348), !dbg !268
  %arrayidx450 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 11, !dbg !268
  store i32 %349, i32* %arrayidx450, align 4, !dbg !268
  %add451 = add i32 %add448, %349, !dbg !268
  store i32 %add451, i32* %T1431, align 4, !dbg !268
  %350 = load i32, i32* %T1431, align 4, !dbg !268
  %351 = load i32, i32* %A, align 4, !dbg !268
  %add452 = add i32 %351, %350, !dbg !268
  store i32 %add452, i32* %A, align 4, !dbg !268
  %352 = load i32, i32* %T1431, align 4, !dbg !268
  %353 = load i32, i32* %F, align 4, !dbg !268
  %shr453 = lshr i32 %353, 2, !dbg !268
  %354 = load i32, i32* %F, align 4, !dbg !268
  %shl454 = shl i32 %354, 30, !dbg !268
  %xor455 = xor i32 %shr453, %shl454, !dbg !268
  %355 = load i32, i32* %F, align 4, !dbg !268
  %shr456 = lshr i32 %355, 13, !dbg !268
  %356 = load i32, i32* %F, align 4, !dbg !268
  %shl457 = shl i32 %356, 19, !dbg !268
  %xor458 = xor i32 %shr456, %shl457, !dbg !268
  %xor459 = xor i32 %xor455, %xor458, !dbg !268
  %357 = load i32, i32* %F, align 4, !dbg !268
  %shr460 = lshr i32 %357, 22, !dbg !268
  %358 = load i32, i32* %F, align 4, !dbg !268
  %shl461 = shl i32 %358, 10, !dbg !268
  %xor462 = xor i32 %shr460, %shl461, !dbg !268
  %xor463 = xor i32 %xor459, %xor462, !dbg !268
  %add464 = add i32 %352, %xor463, !dbg !268
  %359 = load i32, i32* %F, align 4, !dbg !268
  %360 = load i32, i32* %G, align 4, !dbg !268
  %and465 = and i32 %359, %360, !dbg !268
  %361 = load i32, i32* %H, align 4, !dbg !268
  %362 = load i32, i32* %F, align 4, !dbg !268
  %363 = load i32, i32* %G, align 4, !dbg !268
  %xor466 = xor i32 %362, %363, !dbg !268
  %and467 = and i32 %361, %xor466, !dbg !268
  %xor468 = xor i32 %and465, %and467, !dbg !268
  %add469 = add i32 %add464, %xor468, !dbg !268
  store i32 %add469, i32* %E, align 4, !dbg !268
  call void @llvm.dbg.declare(metadata i32* %T1470, metadata !269, metadata !64), !dbg !271
  %364 = load i32, i32* %D, align 4, !dbg !271
  %365 = load i32, i32* %A, align 4, !dbg !271
  %shr471 = lshr i32 %365, 6, !dbg !271
  %366 = load i32, i32* %A, align 4, !dbg !271
  %shl472 = shl i32 %366, 26, !dbg !271
  %xor473 = xor i32 %shr471, %shl472, !dbg !271
  %367 = load i32, i32* %A, align 4, !dbg !271
  %shr474 = lshr i32 %367, 11, !dbg !271
  %368 = load i32, i32* %A, align 4, !dbg !271
  %shl475 = shl i32 %368, 21, !dbg !271
  %xor476 = xor i32 %shr474, %shl475, !dbg !271
  %xor477 = xor i32 %xor473, %xor476, !dbg !271
  %369 = load i32, i32* %A, align 4, !dbg !271
  %shr478 = lshr i32 %369, 25, !dbg !271
  %370 = load i32, i32* %A, align 4, !dbg !271
  %shl479 = shl i32 %370, 7, !dbg !271
  %xor480 = xor i32 %shr478, %shl479, !dbg !271
  %xor481 = xor i32 %xor477, %xor480, !dbg !271
  %add482 = add i32 %364, %xor481, !dbg !271
  %371 = load i32, i32* %C, align 4, !dbg !271
  %372 = load i32, i32* %A, align 4, !dbg !271
  %373 = load i32, i32* %B, align 4, !dbg !271
  %374 = load i32, i32* %C, align 4, !dbg !271
  %xor483 = xor i32 %373, %374, !dbg !271
  %and484 = and i32 %372, %xor483, !dbg !271
  %xor485 = xor i32 %371, %and484, !dbg !271
  %add486 = add i32 %add482, %xor485, !dbg !271
  %375 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 12), align 16, !dbg !271
  %add487 = add i32 %add486, %375, !dbg !271
  %376 = load i32*, i32** %block.addr, align 8, !dbg !271
  %arrayidx488 = getelementptr inbounds i32, i32* %376, i64 12, !dbg !271
  %377 = load i32, i32* %arrayidx488, align 4, !dbg !271
  %378 = call i32 @llvm.bswap.i32(i32 %377), !dbg !271
  %arrayidx489 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 12, !dbg !271
  store i32 %378, i32* %arrayidx489, align 16, !dbg !271
  %add490 = add i32 %add487, %378, !dbg !271
  store i32 %add490, i32* %T1470, align 4, !dbg !271
  %379 = load i32, i32* %T1470, align 4, !dbg !271
  %380 = load i32, i32* %H, align 4, !dbg !271
  %add491 = add i32 %380, %379, !dbg !271
  store i32 %add491, i32* %H, align 4, !dbg !271
  %381 = load i32, i32* %T1470, align 4, !dbg !271
  %382 = load i32, i32* %E, align 4, !dbg !271
  %shr492 = lshr i32 %382, 2, !dbg !271
  %383 = load i32, i32* %E, align 4, !dbg !271
  %shl493 = shl i32 %383, 30, !dbg !271
  %xor494 = xor i32 %shr492, %shl493, !dbg !271
  %384 = load i32, i32* %E, align 4, !dbg !271
  %shr495 = lshr i32 %384, 13, !dbg !271
  %385 = load i32, i32* %E, align 4, !dbg !271
  %shl496 = shl i32 %385, 19, !dbg !271
  %xor497 = xor i32 %shr495, %shl496, !dbg !271
  %xor498 = xor i32 %xor494, %xor497, !dbg !271
  %386 = load i32, i32* %E, align 4, !dbg !271
  %shr499 = lshr i32 %386, 22, !dbg !271
  %387 = load i32, i32* %E, align 4, !dbg !271
  %shl500 = shl i32 %387, 10, !dbg !271
  %xor501 = xor i32 %shr499, %shl500, !dbg !271
  %xor502 = xor i32 %xor498, %xor501, !dbg !271
  %add503 = add i32 %381, %xor502, !dbg !271
  %388 = load i32, i32* %E, align 4, !dbg !271
  %389 = load i32, i32* %F, align 4, !dbg !271
  %and504 = and i32 %388, %389, !dbg !271
  %390 = load i32, i32* %G, align 4, !dbg !271
  %391 = load i32, i32* %E, align 4, !dbg !271
  %392 = load i32, i32* %F, align 4, !dbg !271
  %xor505 = xor i32 %391, %392, !dbg !271
  %and506 = and i32 %390, %xor505, !dbg !271
  %xor507 = xor i32 %and504, %and506, !dbg !271
  %add508 = add i32 %add503, %xor507, !dbg !271
  store i32 %add508, i32* %D, align 4, !dbg !271
  call void @llvm.dbg.declare(metadata i32* %T1509, metadata !272, metadata !64), !dbg !274
  %393 = load i32, i32* %C, align 4, !dbg !274
  %394 = load i32, i32* %H, align 4, !dbg !274
  %shr510 = lshr i32 %394, 6, !dbg !274
  %395 = load i32, i32* %H, align 4, !dbg !274
  %shl511 = shl i32 %395, 26, !dbg !274
  %xor512 = xor i32 %shr510, %shl511, !dbg !274
  %396 = load i32, i32* %H, align 4, !dbg !274
  %shr513 = lshr i32 %396, 11, !dbg !274
  %397 = load i32, i32* %H, align 4, !dbg !274
  %shl514 = shl i32 %397, 21, !dbg !274
  %xor515 = xor i32 %shr513, %shl514, !dbg !274
  %xor516 = xor i32 %xor512, %xor515, !dbg !274
  %398 = load i32, i32* %H, align 4, !dbg !274
  %shr517 = lshr i32 %398, 25, !dbg !274
  %399 = load i32, i32* %H, align 4, !dbg !274
  %shl518 = shl i32 %399, 7, !dbg !274
  %xor519 = xor i32 %shr517, %shl518, !dbg !274
  %xor520 = xor i32 %xor516, %xor519, !dbg !274
  %add521 = add i32 %393, %xor520, !dbg !274
  %400 = load i32, i32* %B, align 4, !dbg !274
  %401 = load i32, i32* %H, align 4, !dbg !274
  %402 = load i32, i32* %A, align 4, !dbg !274
  %403 = load i32, i32* %B, align 4, !dbg !274
  %xor522 = xor i32 %402, %403, !dbg !274
  %and523 = and i32 %401, %xor522, !dbg !274
  %xor524 = xor i32 %400, %and523, !dbg !274
  %add525 = add i32 %add521, %xor524, !dbg !274
  %404 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 13), align 4, !dbg !274
  %add526 = add i32 %add525, %404, !dbg !274
  %405 = load i32*, i32** %block.addr, align 8, !dbg !274
  %arrayidx527 = getelementptr inbounds i32, i32* %405, i64 13, !dbg !274
  %406 = load i32, i32* %arrayidx527, align 4, !dbg !274
  %407 = call i32 @llvm.bswap.i32(i32 %406), !dbg !274
  %arrayidx528 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 13, !dbg !274
  store i32 %407, i32* %arrayidx528, align 4, !dbg !274
  %add529 = add i32 %add526, %407, !dbg !274
  store i32 %add529, i32* %T1509, align 4, !dbg !274
  %408 = load i32, i32* %T1509, align 4, !dbg !274
  %409 = load i32, i32* %G, align 4, !dbg !274
  %add530 = add i32 %409, %408, !dbg !274
  store i32 %add530, i32* %G, align 4, !dbg !274
  %410 = load i32, i32* %T1509, align 4, !dbg !274
  %411 = load i32, i32* %D, align 4, !dbg !274
  %shr531 = lshr i32 %411, 2, !dbg !274
  %412 = load i32, i32* %D, align 4, !dbg !274
  %shl532 = shl i32 %412, 30, !dbg !274
  %xor533 = xor i32 %shr531, %shl532, !dbg !274
  %413 = load i32, i32* %D, align 4, !dbg !274
  %shr534 = lshr i32 %413, 13, !dbg !274
  %414 = load i32, i32* %D, align 4, !dbg !274
  %shl535 = shl i32 %414, 19, !dbg !274
  %xor536 = xor i32 %shr534, %shl535, !dbg !274
  %xor537 = xor i32 %xor533, %xor536, !dbg !274
  %415 = load i32, i32* %D, align 4, !dbg !274
  %shr538 = lshr i32 %415, 22, !dbg !274
  %416 = load i32, i32* %D, align 4, !dbg !274
  %shl539 = shl i32 %416, 10, !dbg !274
  %xor540 = xor i32 %shr538, %shl539, !dbg !274
  %xor541 = xor i32 %xor537, %xor540, !dbg !274
  %add542 = add i32 %410, %xor541, !dbg !274
  %417 = load i32, i32* %D, align 4, !dbg !274
  %418 = load i32, i32* %E, align 4, !dbg !274
  %and543 = and i32 %417, %418, !dbg !274
  %419 = load i32, i32* %F, align 4, !dbg !274
  %420 = load i32, i32* %D, align 4, !dbg !274
  %421 = load i32, i32* %E, align 4, !dbg !274
  %xor544 = xor i32 %420, %421, !dbg !274
  %and545 = and i32 %419, %xor544, !dbg !274
  %xor546 = xor i32 %and543, %and545, !dbg !274
  %add547 = add i32 %add542, %xor546, !dbg !274
  store i32 %add547, i32* %C, align 4, !dbg !274
  call void @llvm.dbg.declare(metadata i32* %T1548, metadata !275, metadata !64), !dbg !277
  %422 = load i32, i32* %B, align 4, !dbg !277
  %423 = load i32, i32* %G, align 4, !dbg !277
  %shr549 = lshr i32 %423, 6, !dbg !277
  %424 = load i32, i32* %G, align 4, !dbg !277
  %shl550 = shl i32 %424, 26, !dbg !277
  %xor551 = xor i32 %shr549, %shl550, !dbg !277
  %425 = load i32, i32* %G, align 4, !dbg !277
  %shr552 = lshr i32 %425, 11, !dbg !277
  %426 = load i32, i32* %G, align 4, !dbg !277
  %shl553 = shl i32 %426, 21, !dbg !277
  %xor554 = xor i32 %shr552, %shl553, !dbg !277
  %xor555 = xor i32 %xor551, %xor554, !dbg !277
  %427 = load i32, i32* %G, align 4, !dbg !277
  %shr556 = lshr i32 %427, 25, !dbg !277
  %428 = load i32, i32* %G, align 4, !dbg !277
  %shl557 = shl i32 %428, 7, !dbg !277
  %xor558 = xor i32 %shr556, %shl557, !dbg !277
  %xor559 = xor i32 %xor555, %xor558, !dbg !277
  %add560 = add i32 %422, %xor559, !dbg !277
  %429 = load i32, i32* %A, align 4, !dbg !277
  %430 = load i32, i32* %G, align 4, !dbg !277
  %431 = load i32, i32* %H, align 4, !dbg !277
  %432 = load i32, i32* %A, align 4, !dbg !277
  %xor561 = xor i32 %431, %432, !dbg !277
  %and562 = and i32 %430, %xor561, !dbg !277
  %xor563 = xor i32 %429, %and562, !dbg !277
  %add564 = add i32 %add560, %xor563, !dbg !277
  %433 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 14), align 8, !dbg !277
  %add565 = add i32 %add564, %433, !dbg !277
  %434 = load i32*, i32** %block.addr, align 8, !dbg !277
  %arrayidx566 = getelementptr inbounds i32, i32* %434, i64 14, !dbg !277
  %435 = load i32, i32* %arrayidx566, align 4, !dbg !277
  %436 = call i32 @llvm.bswap.i32(i32 %435), !dbg !277
  %arrayidx567 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 14, !dbg !277
  store i32 %436, i32* %arrayidx567, align 8, !dbg !277
  %add568 = add i32 %add565, %436, !dbg !277
  store i32 %add568, i32* %T1548, align 4, !dbg !277
  %437 = load i32, i32* %T1548, align 4, !dbg !277
  %438 = load i32, i32* %F, align 4, !dbg !277
  %add569 = add i32 %438, %437, !dbg !277
  store i32 %add569, i32* %F, align 4, !dbg !277
  %439 = load i32, i32* %T1548, align 4, !dbg !277
  %440 = load i32, i32* %C, align 4, !dbg !277
  %shr570 = lshr i32 %440, 2, !dbg !277
  %441 = load i32, i32* %C, align 4, !dbg !277
  %shl571 = shl i32 %441, 30, !dbg !277
  %xor572 = xor i32 %shr570, %shl571, !dbg !277
  %442 = load i32, i32* %C, align 4, !dbg !277
  %shr573 = lshr i32 %442, 13, !dbg !277
  %443 = load i32, i32* %C, align 4, !dbg !277
  %shl574 = shl i32 %443, 19, !dbg !277
  %xor575 = xor i32 %shr573, %shl574, !dbg !277
  %xor576 = xor i32 %xor572, %xor575, !dbg !277
  %444 = load i32, i32* %C, align 4, !dbg !277
  %shr577 = lshr i32 %444, 22, !dbg !277
  %445 = load i32, i32* %C, align 4, !dbg !277
  %shl578 = shl i32 %445, 10, !dbg !277
  %xor579 = xor i32 %shr577, %shl578, !dbg !277
  %xor580 = xor i32 %xor576, %xor579, !dbg !277
  %add581 = add i32 %439, %xor580, !dbg !277
  %446 = load i32, i32* %C, align 4, !dbg !277
  %447 = load i32, i32* %D, align 4, !dbg !277
  %and582 = and i32 %446, %447, !dbg !277
  %448 = load i32, i32* %E, align 4, !dbg !277
  %449 = load i32, i32* %C, align 4, !dbg !277
  %450 = load i32, i32* %D, align 4, !dbg !277
  %xor583 = xor i32 %449, %450, !dbg !277
  %and584 = and i32 %448, %xor583, !dbg !277
  %xor585 = xor i32 %and582, %and584, !dbg !277
  %add586 = add i32 %add581, %xor585, !dbg !277
  store i32 %add586, i32* %B, align 4, !dbg !277
  call void @llvm.dbg.declare(metadata i32* %T1587, metadata !278, metadata !64), !dbg !280
  %451 = load i32, i32* %A, align 4, !dbg !280
  %452 = load i32, i32* %F, align 4, !dbg !280
  %shr588 = lshr i32 %452, 6, !dbg !280
  %453 = load i32, i32* %F, align 4, !dbg !280
  %shl589 = shl i32 %453, 26, !dbg !280
  %xor590 = xor i32 %shr588, %shl589, !dbg !280
  %454 = load i32, i32* %F, align 4, !dbg !280
  %shr591 = lshr i32 %454, 11, !dbg !280
  %455 = load i32, i32* %F, align 4, !dbg !280
  %shl592 = shl i32 %455, 21, !dbg !280
  %xor593 = xor i32 %shr591, %shl592, !dbg !280
  %xor594 = xor i32 %xor590, %xor593, !dbg !280
  %456 = load i32, i32* %F, align 4, !dbg !280
  %shr595 = lshr i32 %456, 25, !dbg !280
  %457 = load i32, i32* %F, align 4, !dbg !280
  %shl596 = shl i32 %457, 7, !dbg !280
  %xor597 = xor i32 %shr595, %shl596, !dbg !280
  %xor598 = xor i32 %xor594, %xor597, !dbg !280
  %add599 = add i32 %451, %xor598, !dbg !280
  %458 = load i32, i32* %H, align 4, !dbg !280
  %459 = load i32, i32* %F, align 4, !dbg !280
  %460 = load i32, i32* %G, align 4, !dbg !280
  %461 = load i32, i32* %H, align 4, !dbg !280
  %xor600 = xor i32 %460, %461, !dbg !280
  %and601 = and i32 %459, %xor600, !dbg !280
  %xor602 = xor i32 %458, %and601, !dbg !280
  %add603 = add i32 %add599, %xor602, !dbg !280
  %462 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 15), align 4, !dbg !280
  %add604 = add i32 %add603, %462, !dbg !280
  %463 = load i32*, i32** %block.addr, align 8, !dbg !280
  %arrayidx605 = getelementptr inbounds i32, i32* %463, i64 15, !dbg !280
  %464 = load i32, i32* %arrayidx605, align 4, !dbg !280
  %465 = call i32 @llvm.bswap.i32(i32 %464), !dbg !280
  %arrayidx606 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 15, !dbg !280
  store i32 %465, i32* %arrayidx606, align 4, !dbg !280
  %add607 = add i32 %add604, %465, !dbg !280
  store i32 %add607, i32* %T1587, align 4, !dbg !280
  %466 = load i32, i32* %T1587, align 4, !dbg !280
  %467 = load i32, i32* %E, align 4, !dbg !280
  %add608 = add i32 %467, %466, !dbg !280
  store i32 %add608, i32* %E, align 4, !dbg !280
  %468 = load i32, i32* %T1587, align 4, !dbg !280
  %469 = load i32, i32* %B, align 4, !dbg !280
  %shr609 = lshr i32 %469, 2, !dbg !280
  %470 = load i32, i32* %B, align 4, !dbg !280
  %shl610 = shl i32 %470, 30, !dbg !280
  %xor611 = xor i32 %shr609, %shl610, !dbg !280
  %471 = load i32, i32* %B, align 4, !dbg !280
  %shr612 = lshr i32 %471, 13, !dbg !280
  %472 = load i32, i32* %B, align 4, !dbg !280
  %shl613 = shl i32 %472, 19, !dbg !280
  %xor614 = xor i32 %shr612, %shl613, !dbg !280
  %xor615 = xor i32 %xor611, %xor614, !dbg !280
  %473 = load i32, i32* %B, align 4, !dbg !280
  %shr616 = lshr i32 %473, 22, !dbg !280
  %474 = load i32, i32* %B, align 4, !dbg !280
  %shl617 = shl i32 %474, 10, !dbg !280
  %xor618 = xor i32 %shr616, %shl617, !dbg !280
  %xor619 = xor i32 %xor615, %xor618, !dbg !280
  %add620 = add i32 %468, %xor619, !dbg !280
  %475 = load i32, i32* %B, align 4, !dbg !280
  %476 = load i32, i32* %C, align 4, !dbg !280
  %and621 = and i32 %475, %476, !dbg !280
  %477 = load i32, i32* %D, align 4, !dbg !280
  %478 = load i32, i32* %B, align 4, !dbg !280
  %479 = load i32, i32* %C, align 4, !dbg !280
  %xor622 = xor i32 %478, %479, !dbg !280
  %and623 = and i32 %477, %xor622, !dbg !280
  %xor624 = xor i32 %and621, %and623, !dbg !280
  %add625 = add i32 %add620, %xor624, !dbg !280
  store i32 %add625, i32* %A, align 4, !dbg !280
  store i32 16, i32* %i, align 4, !dbg !281
  store i32* getelementptr inbounds ([64 x i32], [64 x i32]* @rhash_k256, i64 0, i64 16), i32** %k, align 8, !dbg !283
  br label %for.cond, !dbg !284

for.cond:                                         ; preds = %for.inc, %entry
  %480 = load i32, i32* %i, align 4, !dbg !285
  %cmp = icmp slt i32 %480, 64, !dbg !288
  br i1 %cmp, label %for.body, label %for.end, !dbg !289

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %T1626, metadata !290, metadata !64), !dbg !293
  %481 = load i32, i32* %H, align 4, !dbg !293
  %482 = load i32, i32* %E, align 4, !dbg !293
  %shr627 = lshr i32 %482, 6, !dbg !293
  %483 = load i32, i32* %E, align 4, !dbg !293
  %shl628 = shl i32 %483, 26, !dbg !293
  %xor629 = xor i32 %shr627, %shl628, !dbg !293
  %484 = load i32, i32* %E, align 4, !dbg !293
  %shr630 = lshr i32 %484, 11, !dbg !293
  %485 = load i32, i32* %E, align 4, !dbg !293
  %shl631 = shl i32 %485, 21, !dbg !293
  %xor632 = xor i32 %shr630, %shl631, !dbg !293
  %xor633 = xor i32 %xor629, %xor632, !dbg !293
  %486 = load i32, i32* %E, align 4, !dbg !293
  %shr634 = lshr i32 %486, 25, !dbg !293
  %487 = load i32, i32* %E, align 4, !dbg !293
  %shl635 = shl i32 %487, 7, !dbg !293
  %xor636 = xor i32 %shr634, %shl635, !dbg !293
  %xor637 = xor i32 %xor633, %xor636, !dbg !293
  %add638 = add i32 %481, %xor637, !dbg !293
  %488 = load i32, i32* %G, align 4, !dbg !293
  %489 = load i32, i32* %E, align 4, !dbg !293
  %490 = load i32, i32* %F, align 4, !dbg !293
  %491 = load i32, i32* %G, align 4, !dbg !293
  %xor639 = xor i32 %490, %491, !dbg !293
  %and640 = and i32 %489, %xor639, !dbg !293
  %xor641 = xor i32 %488, %and640, !dbg !293
  %add642 = add i32 %add638, %xor641, !dbg !293
  %492 = load i32*, i32** %k, align 8, !dbg !293
  %arrayidx643 = getelementptr inbounds i32, i32* %492, i64 0, !dbg !293
  %493 = load i32, i32* %arrayidx643, align 4, !dbg !293
  %add644 = add i32 %add642, %493, !dbg !293
  %arrayidx645 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 14, !dbg !293
  %494 = load i32, i32* %arrayidx645, align 8, !dbg !293
  %shr646 = lshr i32 %494, 17, !dbg !293
  %arrayidx647 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 14, !dbg !293
  %495 = load i32, i32* %arrayidx647, align 8, !dbg !293
  %shl648 = shl i32 %495, 15, !dbg !293
  %xor649 = xor i32 %shr646, %shl648, !dbg !293
  %arrayidx650 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 14, !dbg !293
  %496 = load i32, i32* %arrayidx650, align 8, !dbg !293
  %shr651 = lshr i32 %496, 19, !dbg !293
  %arrayidx652 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 14, !dbg !293
  %497 = load i32, i32* %arrayidx652, align 8, !dbg !293
  %shl653 = shl i32 %497, 13, !dbg !293
  %xor654 = xor i32 %shr651, %shl653, !dbg !293
  %xor655 = xor i32 %xor649, %xor654, !dbg !293
  %arrayidx656 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 14, !dbg !293
  %498 = load i32, i32* %arrayidx656, align 8, !dbg !293
  %shr657 = lshr i32 %498, 10, !dbg !293
  %xor658 = xor i32 %xor655, %shr657, !dbg !293
  %arrayidx659 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 9, !dbg !293
  %499 = load i32, i32* %arrayidx659, align 4, !dbg !293
  %add660 = add i32 %xor658, %499, !dbg !293
  %arrayidx661 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 1, !dbg !293
  %500 = load i32, i32* %arrayidx661, align 4, !dbg !293
  %shr662 = lshr i32 %500, 7, !dbg !293
  %arrayidx663 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 1, !dbg !293
  %501 = load i32, i32* %arrayidx663, align 4, !dbg !293
  %shl664 = shl i32 %501, 25, !dbg !293
  %xor665 = xor i32 %shr662, %shl664, !dbg !293
  %arrayidx666 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 1, !dbg !293
  %502 = load i32, i32* %arrayidx666, align 4, !dbg !293
  %shr667 = lshr i32 %502, 18, !dbg !293
  %arrayidx668 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 1, !dbg !293
  %503 = load i32, i32* %arrayidx668, align 4, !dbg !293
  %shl669 = shl i32 %503, 14, !dbg !293
  %xor670 = xor i32 %shr667, %shl669, !dbg !293
  %xor671 = xor i32 %xor665, %xor670, !dbg !293
  %arrayidx672 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 1, !dbg !293
  %504 = load i32, i32* %arrayidx672, align 4, !dbg !293
  %shr673 = lshr i32 %504, 3, !dbg !293
  %xor674 = xor i32 %xor671, %shr673, !dbg !293
  %add675 = add i32 %add660, %xor674, !dbg !293
  %arrayidx676 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 0, !dbg !293
  %505 = load i32, i32* %arrayidx676, align 16, !dbg !293
  %add677 = add i32 %505, %add675, !dbg !293
  store i32 %add677, i32* %arrayidx676, align 16, !dbg !293
  %add678 = add i32 %add644, %add677, !dbg !293
  store i32 %add678, i32* %T1626, align 4, !dbg !293
  %506 = load i32, i32* %T1626, align 4, !dbg !293
  %507 = load i32, i32* %D, align 4, !dbg !293
  %add679 = add i32 %507, %506, !dbg !293
  store i32 %add679, i32* %D, align 4, !dbg !293
  %508 = load i32, i32* %T1626, align 4, !dbg !293
  %509 = load i32, i32* %A, align 4, !dbg !293
  %shr680 = lshr i32 %509, 2, !dbg !293
  %510 = load i32, i32* %A, align 4, !dbg !293
  %shl681 = shl i32 %510, 30, !dbg !293
  %xor682 = xor i32 %shr680, %shl681, !dbg !293
  %511 = load i32, i32* %A, align 4, !dbg !293
  %shr683 = lshr i32 %511, 13, !dbg !293
  %512 = load i32, i32* %A, align 4, !dbg !293
  %shl684 = shl i32 %512, 19, !dbg !293
  %xor685 = xor i32 %shr683, %shl684, !dbg !293
  %xor686 = xor i32 %xor682, %xor685, !dbg !293
  %513 = load i32, i32* %A, align 4, !dbg !293
  %shr687 = lshr i32 %513, 22, !dbg !293
  %514 = load i32, i32* %A, align 4, !dbg !293
  %shl688 = shl i32 %514, 10, !dbg !293
  %xor689 = xor i32 %shr687, %shl688, !dbg !293
  %xor690 = xor i32 %xor686, %xor689, !dbg !293
  %add691 = add i32 %508, %xor690, !dbg !293
  %515 = load i32, i32* %A, align 4, !dbg !293
  %516 = load i32, i32* %B, align 4, !dbg !293
  %and692 = and i32 %515, %516, !dbg !293
  %517 = load i32, i32* %C, align 4, !dbg !293
  %518 = load i32, i32* %A, align 4, !dbg !293
  %519 = load i32, i32* %B, align 4, !dbg !293
  %xor693 = xor i32 %518, %519, !dbg !293
  %and694 = and i32 %517, %xor693, !dbg !293
  %xor695 = xor i32 %and692, %and694, !dbg !293
  %add696 = add i32 %add691, %xor695, !dbg !293
  store i32 %add696, i32* %H, align 4, !dbg !293
  call void @llvm.dbg.declare(metadata i32* %T1697, metadata !294, metadata !64), !dbg !296
  %520 = load i32, i32* %G, align 4, !dbg !296
  %521 = load i32, i32* %D, align 4, !dbg !296
  %shr698 = lshr i32 %521, 6, !dbg !296
  %522 = load i32, i32* %D, align 4, !dbg !296
  %shl699 = shl i32 %522, 26, !dbg !296
  %xor700 = xor i32 %shr698, %shl699, !dbg !296
  %523 = load i32, i32* %D, align 4, !dbg !296
  %shr701 = lshr i32 %523, 11, !dbg !296
  %524 = load i32, i32* %D, align 4, !dbg !296
  %shl702 = shl i32 %524, 21, !dbg !296
  %xor703 = xor i32 %shr701, %shl702, !dbg !296
  %xor704 = xor i32 %xor700, %xor703, !dbg !296
  %525 = load i32, i32* %D, align 4, !dbg !296
  %shr705 = lshr i32 %525, 25, !dbg !296
  %526 = load i32, i32* %D, align 4, !dbg !296
  %shl706 = shl i32 %526, 7, !dbg !296
  %xor707 = xor i32 %shr705, %shl706, !dbg !296
  %xor708 = xor i32 %xor704, %xor707, !dbg !296
  %add709 = add i32 %520, %xor708, !dbg !296
  %527 = load i32, i32* %F, align 4, !dbg !296
  %528 = load i32, i32* %D, align 4, !dbg !296
  %529 = load i32, i32* %E, align 4, !dbg !296
  %530 = load i32, i32* %F, align 4, !dbg !296
  %xor710 = xor i32 %529, %530, !dbg !296
  %and711 = and i32 %528, %xor710, !dbg !296
  %xor712 = xor i32 %527, %and711, !dbg !296
  %add713 = add i32 %add709, %xor712, !dbg !296
  %531 = load i32*, i32** %k, align 8, !dbg !296
  %arrayidx714 = getelementptr inbounds i32, i32* %531, i64 1, !dbg !296
  %532 = load i32, i32* %arrayidx714, align 4, !dbg !296
  %add715 = add i32 %add713, %532, !dbg !296
  %arrayidx716 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 15, !dbg !296
  %533 = load i32, i32* %arrayidx716, align 4, !dbg !296
  %shr717 = lshr i32 %533, 17, !dbg !296
  %arrayidx718 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 15, !dbg !296
  %534 = load i32, i32* %arrayidx718, align 4, !dbg !296
  %shl719 = shl i32 %534, 15, !dbg !296
  %xor720 = xor i32 %shr717, %shl719, !dbg !296
  %arrayidx721 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 15, !dbg !296
  %535 = load i32, i32* %arrayidx721, align 4, !dbg !296
  %shr722 = lshr i32 %535, 19, !dbg !296
  %arrayidx723 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 15, !dbg !296
  %536 = load i32, i32* %arrayidx723, align 4, !dbg !296
  %shl724 = shl i32 %536, 13, !dbg !296
  %xor725 = xor i32 %shr722, %shl724, !dbg !296
  %xor726 = xor i32 %xor720, %xor725, !dbg !296
  %arrayidx727 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 15, !dbg !296
  %537 = load i32, i32* %arrayidx727, align 4, !dbg !296
  %shr728 = lshr i32 %537, 10, !dbg !296
  %xor729 = xor i32 %xor726, %shr728, !dbg !296
  %arrayidx730 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 10, !dbg !296
  %538 = load i32, i32* %arrayidx730, align 8, !dbg !296
  %add731 = add i32 %xor729, %538, !dbg !296
  %arrayidx732 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 2, !dbg !296
  %539 = load i32, i32* %arrayidx732, align 8, !dbg !296
  %shr733 = lshr i32 %539, 7, !dbg !296
  %arrayidx734 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 2, !dbg !296
  %540 = load i32, i32* %arrayidx734, align 8, !dbg !296
  %shl735 = shl i32 %540, 25, !dbg !296
  %xor736 = xor i32 %shr733, %shl735, !dbg !296
  %arrayidx737 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 2, !dbg !296
  %541 = load i32, i32* %arrayidx737, align 8, !dbg !296
  %shr738 = lshr i32 %541, 18, !dbg !296
  %arrayidx739 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 2, !dbg !296
  %542 = load i32, i32* %arrayidx739, align 8, !dbg !296
  %shl740 = shl i32 %542, 14, !dbg !296
  %xor741 = xor i32 %shr738, %shl740, !dbg !296
  %xor742 = xor i32 %xor736, %xor741, !dbg !296
  %arrayidx743 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 2, !dbg !296
  %543 = load i32, i32* %arrayidx743, align 8, !dbg !296
  %shr744 = lshr i32 %543, 3, !dbg !296
  %xor745 = xor i32 %xor742, %shr744, !dbg !296
  %add746 = add i32 %add731, %xor745, !dbg !296
  %arrayidx747 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 1, !dbg !296
  %544 = load i32, i32* %arrayidx747, align 4, !dbg !296
  %add748 = add i32 %544, %add746, !dbg !296
  store i32 %add748, i32* %arrayidx747, align 4, !dbg !296
  %add749 = add i32 %add715, %add748, !dbg !296
  store i32 %add749, i32* %T1697, align 4, !dbg !296
  %545 = load i32, i32* %T1697, align 4, !dbg !296
  %546 = load i32, i32* %C, align 4, !dbg !296
  %add750 = add i32 %546, %545, !dbg !296
  store i32 %add750, i32* %C, align 4, !dbg !296
  %547 = load i32, i32* %T1697, align 4, !dbg !296
  %548 = load i32, i32* %H, align 4, !dbg !296
  %shr751 = lshr i32 %548, 2, !dbg !296
  %549 = load i32, i32* %H, align 4, !dbg !296
  %shl752 = shl i32 %549, 30, !dbg !296
  %xor753 = xor i32 %shr751, %shl752, !dbg !296
  %550 = load i32, i32* %H, align 4, !dbg !296
  %shr754 = lshr i32 %550, 13, !dbg !296
  %551 = load i32, i32* %H, align 4, !dbg !296
  %shl755 = shl i32 %551, 19, !dbg !296
  %xor756 = xor i32 %shr754, %shl755, !dbg !296
  %xor757 = xor i32 %xor753, %xor756, !dbg !296
  %552 = load i32, i32* %H, align 4, !dbg !296
  %shr758 = lshr i32 %552, 22, !dbg !296
  %553 = load i32, i32* %H, align 4, !dbg !296
  %shl759 = shl i32 %553, 10, !dbg !296
  %xor760 = xor i32 %shr758, %shl759, !dbg !296
  %xor761 = xor i32 %xor757, %xor760, !dbg !296
  %add762 = add i32 %547, %xor761, !dbg !296
  %554 = load i32, i32* %H, align 4, !dbg !296
  %555 = load i32, i32* %A, align 4, !dbg !296
  %and763 = and i32 %554, %555, !dbg !296
  %556 = load i32, i32* %B, align 4, !dbg !296
  %557 = load i32, i32* %H, align 4, !dbg !296
  %558 = load i32, i32* %A, align 4, !dbg !296
  %xor764 = xor i32 %557, %558, !dbg !296
  %and765 = and i32 %556, %xor764, !dbg !296
  %xor766 = xor i32 %and763, %and765, !dbg !296
  %add767 = add i32 %add762, %xor766, !dbg !296
  store i32 %add767, i32* %G, align 4, !dbg !296
  call void @llvm.dbg.declare(metadata i32* %T1768, metadata !297, metadata !64), !dbg !299
  %559 = load i32, i32* %F, align 4, !dbg !299
  %560 = load i32, i32* %C, align 4, !dbg !299
  %shr769 = lshr i32 %560, 6, !dbg !299
  %561 = load i32, i32* %C, align 4, !dbg !299
  %shl770 = shl i32 %561, 26, !dbg !299
  %xor771 = xor i32 %shr769, %shl770, !dbg !299
  %562 = load i32, i32* %C, align 4, !dbg !299
  %shr772 = lshr i32 %562, 11, !dbg !299
  %563 = load i32, i32* %C, align 4, !dbg !299
  %shl773 = shl i32 %563, 21, !dbg !299
  %xor774 = xor i32 %shr772, %shl773, !dbg !299
  %xor775 = xor i32 %xor771, %xor774, !dbg !299
  %564 = load i32, i32* %C, align 4, !dbg !299
  %shr776 = lshr i32 %564, 25, !dbg !299
  %565 = load i32, i32* %C, align 4, !dbg !299
  %shl777 = shl i32 %565, 7, !dbg !299
  %xor778 = xor i32 %shr776, %shl777, !dbg !299
  %xor779 = xor i32 %xor775, %xor778, !dbg !299
  %add780 = add i32 %559, %xor779, !dbg !299
  %566 = load i32, i32* %E, align 4, !dbg !299
  %567 = load i32, i32* %C, align 4, !dbg !299
  %568 = load i32, i32* %D, align 4, !dbg !299
  %569 = load i32, i32* %E, align 4, !dbg !299
  %xor781 = xor i32 %568, %569, !dbg !299
  %and782 = and i32 %567, %xor781, !dbg !299
  %xor783 = xor i32 %566, %and782, !dbg !299
  %add784 = add i32 %add780, %xor783, !dbg !299
  %570 = load i32*, i32** %k, align 8, !dbg !299
  %arrayidx785 = getelementptr inbounds i32, i32* %570, i64 2, !dbg !299
  %571 = load i32, i32* %arrayidx785, align 4, !dbg !299
  %add786 = add i32 %add784, %571, !dbg !299
  %arrayidx787 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 0, !dbg !299
  %572 = load i32, i32* %arrayidx787, align 16, !dbg !299
  %shr788 = lshr i32 %572, 17, !dbg !299
  %arrayidx789 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 0, !dbg !299
  %573 = load i32, i32* %arrayidx789, align 16, !dbg !299
  %shl790 = shl i32 %573, 15, !dbg !299
  %xor791 = xor i32 %shr788, %shl790, !dbg !299
  %arrayidx792 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 0, !dbg !299
  %574 = load i32, i32* %arrayidx792, align 16, !dbg !299
  %shr793 = lshr i32 %574, 19, !dbg !299
  %arrayidx794 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 0, !dbg !299
  %575 = load i32, i32* %arrayidx794, align 16, !dbg !299
  %shl795 = shl i32 %575, 13, !dbg !299
  %xor796 = xor i32 %shr793, %shl795, !dbg !299
  %xor797 = xor i32 %xor791, %xor796, !dbg !299
  %arrayidx798 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 0, !dbg !299
  %576 = load i32, i32* %arrayidx798, align 16, !dbg !299
  %shr799 = lshr i32 %576, 10, !dbg !299
  %xor800 = xor i32 %xor797, %shr799, !dbg !299
  %arrayidx801 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 11, !dbg !299
  %577 = load i32, i32* %arrayidx801, align 4, !dbg !299
  %add802 = add i32 %xor800, %577, !dbg !299
  %arrayidx803 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 3, !dbg !299
  %578 = load i32, i32* %arrayidx803, align 4, !dbg !299
  %shr804 = lshr i32 %578, 7, !dbg !299
  %arrayidx805 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 3, !dbg !299
  %579 = load i32, i32* %arrayidx805, align 4, !dbg !299
  %shl806 = shl i32 %579, 25, !dbg !299
  %xor807 = xor i32 %shr804, %shl806, !dbg !299
  %arrayidx808 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 3, !dbg !299
  %580 = load i32, i32* %arrayidx808, align 4, !dbg !299
  %shr809 = lshr i32 %580, 18, !dbg !299
  %arrayidx810 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 3, !dbg !299
  %581 = load i32, i32* %arrayidx810, align 4, !dbg !299
  %shl811 = shl i32 %581, 14, !dbg !299
  %xor812 = xor i32 %shr809, %shl811, !dbg !299
  %xor813 = xor i32 %xor807, %xor812, !dbg !299
  %arrayidx814 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 3, !dbg !299
  %582 = load i32, i32* %arrayidx814, align 4, !dbg !299
  %shr815 = lshr i32 %582, 3, !dbg !299
  %xor816 = xor i32 %xor813, %shr815, !dbg !299
  %add817 = add i32 %add802, %xor816, !dbg !299
  %arrayidx818 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 2, !dbg !299
  %583 = load i32, i32* %arrayidx818, align 8, !dbg !299
  %add819 = add i32 %583, %add817, !dbg !299
  store i32 %add819, i32* %arrayidx818, align 8, !dbg !299
  %add820 = add i32 %add786, %add819, !dbg !299
  store i32 %add820, i32* %T1768, align 4, !dbg !299
  %584 = load i32, i32* %T1768, align 4, !dbg !299
  %585 = load i32, i32* %B, align 4, !dbg !299
  %add821 = add i32 %585, %584, !dbg !299
  store i32 %add821, i32* %B, align 4, !dbg !299
  %586 = load i32, i32* %T1768, align 4, !dbg !299
  %587 = load i32, i32* %G, align 4, !dbg !299
  %shr822 = lshr i32 %587, 2, !dbg !299
  %588 = load i32, i32* %G, align 4, !dbg !299
  %shl823 = shl i32 %588, 30, !dbg !299
  %xor824 = xor i32 %shr822, %shl823, !dbg !299
  %589 = load i32, i32* %G, align 4, !dbg !299
  %shr825 = lshr i32 %589, 13, !dbg !299
  %590 = load i32, i32* %G, align 4, !dbg !299
  %shl826 = shl i32 %590, 19, !dbg !299
  %xor827 = xor i32 %shr825, %shl826, !dbg !299
  %xor828 = xor i32 %xor824, %xor827, !dbg !299
  %591 = load i32, i32* %G, align 4, !dbg !299
  %shr829 = lshr i32 %591, 22, !dbg !299
  %592 = load i32, i32* %G, align 4, !dbg !299
  %shl830 = shl i32 %592, 10, !dbg !299
  %xor831 = xor i32 %shr829, %shl830, !dbg !299
  %xor832 = xor i32 %xor828, %xor831, !dbg !299
  %add833 = add i32 %586, %xor832, !dbg !299
  %593 = load i32, i32* %G, align 4, !dbg !299
  %594 = load i32, i32* %H, align 4, !dbg !299
  %and834 = and i32 %593, %594, !dbg !299
  %595 = load i32, i32* %A, align 4, !dbg !299
  %596 = load i32, i32* %G, align 4, !dbg !299
  %597 = load i32, i32* %H, align 4, !dbg !299
  %xor835 = xor i32 %596, %597, !dbg !299
  %and836 = and i32 %595, %xor835, !dbg !299
  %xor837 = xor i32 %and834, %and836, !dbg !299
  %add838 = add i32 %add833, %xor837, !dbg !299
  store i32 %add838, i32* %F, align 4, !dbg !299
  call void @llvm.dbg.declare(metadata i32* %T1839, metadata !300, metadata !64), !dbg !302
  %598 = load i32, i32* %E, align 4, !dbg !302
  %599 = load i32, i32* %B, align 4, !dbg !302
  %shr840 = lshr i32 %599, 6, !dbg !302
  %600 = load i32, i32* %B, align 4, !dbg !302
  %shl841 = shl i32 %600, 26, !dbg !302
  %xor842 = xor i32 %shr840, %shl841, !dbg !302
  %601 = load i32, i32* %B, align 4, !dbg !302
  %shr843 = lshr i32 %601, 11, !dbg !302
  %602 = load i32, i32* %B, align 4, !dbg !302
  %shl844 = shl i32 %602, 21, !dbg !302
  %xor845 = xor i32 %shr843, %shl844, !dbg !302
  %xor846 = xor i32 %xor842, %xor845, !dbg !302
  %603 = load i32, i32* %B, align 4, !dbg !302
  %shr847 = lshr i32 %603, 25, !dbg !302
  %604 = load i32, i32* %B, align 4, !dbg !302
  %shl848 = shl i32 %604, 7, !dbg !302
  %xor849 = xor i32 %shr847, %shl848, !dbg !302
  %xor850 = xor i32 %xor846, %xor849, !dbg !302
  %add851 = add i32 %598, %xor850, !dbg !302
  %605 = load i32, i32* %D, align 4, !dbg !302
  %606 = load i32, i32* %B, align 4, !dbg !302
  %607 = load i32, i32* %C, align 4, !dbg !302
  %608 = load i32, i32* %D, align 4, !dbg !302
  %xor852 = xor i32 %607, %608, !dbg !302
  %and853 = and i32 %606, %xor852, !dbg !302
  %xor854 = xor i32 %605, %and853, !dbg !302
  %add855 = add i32 %add851, %xor854, !dbg !302
  %609 = load i32*, i32** %k, align 8, !dbg !302
  %arrayidx856 = getelementptr inbounds i32, i32* %609, i64 3, !dbg !302
  %610 = load i32, i32* %arrayidx856, align 4, !dbg !302
  %add857 = add i32 %add855, %610, !dbg !302
  %arrayidx858 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 1, !dbg !302
  %611 = load i32, i32* %arrayidx858, align 4, !dbg !302
  %shr859 = lshr i32 %611, 17, !dbg !302
  %arrayidx860 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 1, !dbg !302
  %612 = load i32, i32* %arrayidx860, align 4, !dbg !302
  %shl861 = shl i32 %612, 15, !dbg !302
  %xor862 = xor i32 %shr859, %shl861, !dbg !302
  %arrayidx863 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 1, !dbg !302
  %613 = load i32, i32* %arrayidx863, align 4, !dbg !302
  %shr864 = lshr i32 %613, 19, !dbg !302
  %arrayidx865 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 1, !dbg !302
  %614 = load i32, i32* %arrayidx865, align 4, !dbg !302
  %shl866 = shl i32 %614, 13, !dbg !302
  %xor867 = xor i32 %shr864, %shl866, !dbg !302
  %xor868 = xor i32 %xor862, %xor867, !dbg !302
  %arrayidx869 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 1, !dbg !302
  %615 = load i32, i32* %arrayidx869, align 4, !dbg !302
  %shr870 = lshr i32 %615, 10, !dbg !302
  %xor871 = xor i32 %xor868, %shr870, !dbg !302
  %arrayidx872 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 12, !dbg !302
  %616 = load i32, i32* %arrayidx872, align 16, !dbg !302
  %add873 = add i32 %xor871, %616, !dbg !302
  %arrayidx874 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 4, !dbg !302
  %617 = load i32, i32* %arrayidx874, align 16, !dbg !302
  %shr875 = lshr i32 %617, 7, !dbg !302
  %arrayidx876 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 4, !dbg !302
  %618 = load i32, i32* %arrayidx876, align 16, !dbg !302
  %shl877 = shl i32 %618, 25, !dbg !302
  %xor878 = xor i32 %shr875, %shl877, !dbg !302
  %arrayidx879 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 4, !dbg !302
  %619 = load i32, i32* %arrayidx879, align 16, !dbg !302
  %shr880 = lshr i32 %619, 18, !dbg !302
  %arrayidx881 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 4, !dbg !302
  %620 = load i32, i32* %arrayidx881, align 16, !dbg !302
  %shl882 = shl i32 %620, 14, !dbg !302
  %xor883 = xor i32 %shr880, %shl882, !dbg !302
  %xor884 = xor i32 %xor878, %xor883, !dbg !302
  %arrayidx885 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 4, !dbg !302
  %621 = load i32, i32* %arrayidx885, align 16, !dbg !302
  %shr886 = lshr i32 %621, 3, !dbg !302
  %xor887 = xor i32 %xor884, %shr886, !dbg !302
  %add888 = add i32 %add873, %xor887, !dbg !302
  %arrayidx889 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 3, !dbg !302
  %622 = load i32, i32* %arrayidx889, align 4, !dbg !302
  %add890 = add i32 %622, %add888, !dbg !302
  store i32 %add890, i32* %arrayidx889, align 4, !dbg !302
  %add891 = add i32 %add857, %add890, !dbg !302
  store i32 %add891, i32* %T1839, align 4, !dbg !302
  %623 = load i32, i32* %T1839, align 4, !dbg !302
  %624 = load i32, i32* %A, align 4, !dbg !302
  %add892 = add i32 %624, %623, !dbg !302
  store i32 %add892, i32* %A, align 4, !dbg !302
  %625 = load i32, i32* %T1839, align 4, !dbg !302
  %626 = load i32, i32* %F, align 4, !dbg !302
  %shr893 = lshr i32 %626, 2, !dbg !302
  %627 = load i32, i32* %F, align 4, !dbg !302
  %shl894 = shl i32 %627, 30, !dbg !302
  %xor895 = xor i32 %shr893, %shl894, !dbg !302
  %628 = load i32, i32* %F, align 4, !dbg !302
  %shr896 = lshr i32 %628, 13, !dbg !302
  %629 = load i32, i32* %F, align 4, !dbg !302
  %shl897 = shl i32 %629, 19, !dbg !302
  %xor898 = xor i32 %shr896, %shl897, !dbg !302
  %xor899 = xor i32 %xor895, %xor898, !dbg !302
  %630 = load i32, i32* %F, align 4, !dbg !302
  %shr900 = lshr i32 %630, 22, !dbg !302
  %631 = load i32, i32* %F, align 4, !dbg !302
  %shl901 = shl i32 %631, 10, !dbg !302
  %xor902 = xor i32 %shr900, %shl901, !dbg !302
  %xor903 = xor i32 %xor899, %xor902, !dbg !302
  %add904 = add i32 %625, %xor903, !dbg !302
  %632 = load i32, i32* %F, align 4, !dbg !302
  %633 = load i32, i32* %G, align 4, !dbg !302
  %and905 = and i32 %632, %633, !dbg !302
  %634 = load i32, i32* %H, align 4, !dbg !302
  %635 = load i32, i32* %F, align 4, !dbg !302
  %636 = load i32, i32* %G, align 4, !dbg !302
  %xor906 = xor i32 %635, %636, !dbg !302
  %and907 = and i32 %634, %xor906, !dbg !302
  %xor908 = xor i32 %and905, %and907, !dbg !302
  %add909 = add i32 %add904, %xor908, !dbg !302
  store i32 %add909, i32* %E, align 4, !dbg !302
  call void @llvm.dbg.declare(metadata i32* %T1910, metadata !303, metadata !64), !dbg !305
  %637 = load i32, i32* %D, align 4, !dbg !305
  %638 = load i32, i32* %A, align 4, !dbg !305
  %shr911 = lshr i32 %638, 6, !dbg !305
  %639 = load i32, i32* %A, align 4, !dbg !305
  %shl912 = shl i32 %639, 26, !dbg !305
  %xor913 = xor i32 %shr911, %shl912, !dbg !305
  %640 = load i32, i32* %A, align 4, !dbg !305
  %shr914 = lshr i32 %640, 11, !dbg !305
  %641 = load i32, i32* %A, align 4, !dbg !305
  %shl915 = shl i32 %641, 21, !dbg !305
  %xor916 = xor i32 %shr914, %shl915, !dbg !305
  %xor917 = xor i32 %xor913, %xor916, !dbg !305
  %642 = load i32, i32* %A, align 4, !dbg !305
  %shr918 = lshr i32 %642, 25, !dbg !305
  %643 = load i32, i32* %A, align 4, !dbg !305
  %shl919 = shl i32 %643, 7, !dbg !305
  %xor920 = xor i32 %shr918, %shl919, !dbg !305
  %xor921 = xor i32 %xor917, %xor920, !dbg !305
  %add922 = add i32 %637, %xor921, !dbg !305
  %644 = load i32, i32* %C, align 4, !dbg !305
  %645 = load i32, i32* %A, align 4, !dbg !305
  %646 = load i32, i32* %B, align 4, !dbg !305
  %647 = load i32, i32* %C, align 4, !dbg !305
  %xor923 = xor i32 %646, %647, !dbg !305
  %and924 = and i32 %645, %xor923, !dbg !305
  %xor925 = xor i32 %644, %and924, !dbg !305
  %add926 = add i32 %add922, %xor925, !dbg !305
  %648 = load i32*, i32** %k, align 8, !dbg !305
  %arrayidx927 = getelementptr inbounds i32, i32* %648, i64 4, !dbg !305
  %649 = load i32, i32* %arrayidx927, align 4, !dbg !305
  %add928 = add i32 %add926, %649, !dbg !305
  %arrayidx929 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 2, !dbg !305
  %650 = load i32, i32* %arrayidx929, align 8, !dbg !305
  %shr930 = lshr i32 %650, 17, !dbg !305
  %arrayidx931 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 2, !dbg !305
  %651 = load i32, i32* %arrayidx931, align 8, !dbg !305
  %shl932 = shl i32 %651, 15, !dbg !305
  %xor933 = xor i32 %shr930, %shl932, !dbg !305
  %arrayidx934 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 2, !dbg !305
  %652 = load i32, i32* %arrayidx934, align 8, !dbg !305
  %shr935 = lshr i32 %652, 19, !dbg !305
  %arrayidx936 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 2, !dbg !305
  %653 = load i32, i32* %arrayidx936, align 8, !dbg !305
  %shl937 = shl i32 %653, 13, !dbg !305
  %xor938 = xor i32 %shr935, %shl937, !dbg !305
  %xor939 = xor i32 %xor933, %xor938, !dbg !305
  %arrayidx940 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 2, !dbg !305
  %654 = load i32, i32* %arrayidx940, align 8, !dbg !305
  %shr941 = lshr i32 %654, 10, !dbg !305
  %xor942 = xor i32 %xor939, %shr941, !dbg !305
  %arrayidx943 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 13, !dbg !305
  %655 = load i32, i32* %arrayidx943, align 4, !dbg !305
  %add944 = add i32 %xor942, %655, !dbg !305
  %arrayidx945 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 5, !dbg !305
  %656 = load i32, i32* %arrayidx945, align 4, !dbg !305
  %shr946 = lshr i32 %656, 7, !dbg !305
  %arrayidx947 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 5, !dbg !305
  %657 = load i32, i32* %arrayidx947, align 4, !dbg !305
  %shl948 = shl i32 %657, 25, !dbg !305
  %xor949 = xor i32 %shr946, %shl948, !dbg !305
  %arrayidx950 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 5, !dbg !305
  %658 = load i32, i32* %arrayidx950, align 4, !dbg !305
  %shr951 = lshr i32 %658, 18, !dbg !305
  %arrayidx952 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 5, !dbg !305
  %659 = load i32, i32* %arrayidx952, align 4, !dbg !305
  %shl953 = shl i32 %659, 14, !dbg !305
  %xor954 = xor i32 %shr951, %shl953, !dbg !305
  %xor955 = xor i32 %xor949, %xor954, !dbg !305
  %arrayidx956 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 5, !dbg !305
  %660 = load i32, i32* %arrayidx956, align 4, !dbg !305
  %shr957 = lshr i32 %660, 3, !dbg !305
  %xor958 = xor i32 %xor955, %shr957, !dbg !305
  %add959 = add i32 %add944, %xor958, !dbg !305
  %arrayidx960 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 4, !dbg !305
  %661 = load i32, i32* %arrayidx960, align 16, !dbg !305
  %add961 = add i32 %661, %add959, !dbg !305
  store i32 %add961, i32* %arrayidx960, align 16, !dbg !305
  %add962 = add i32 %add928, %add961, !dbg !305
  store i32 %add962, i32* %T1910, align 4, !dbg !305
  %662 = load i32, i32* %T1910, align 4, !dbg !305
  %663 = load i32, i32* %H, align 4, !dbg !305
  %add963 = add i32 %663, %662, !dbg !305
  store i32 %add963, i32* %H, align 4, !dbg !305
  %664 = load i32, i32* %T1910, align 4, !dbg !305
  %665 = load i32, i32* %E, align 4, !dbg !305
  %shr964 = lshr i32 %665, 2, !dbg !305
  %666 = load i32, i32* %E, align 4, !dbg !305
  %shl965 = shl i32 %666, 30, !dbg !305
  %xor966 = xor i32 %shr964, %shl965, !dbg !305
  %667 = load i32, i32* %E, align 4, !dbg !305
  %shr967 = lshr i32 %667, 13, !dbg !305
  %668 = load i32, i32* %E, align 4, !dbg !305
  %shl968 = shl i32 %668, 19, !dbg !305
  %xor969 = xor i32 %shr967, %shl968, !dbg !305
  %xor970 = xor i32 %xor966, %xor969, !dbg !305
  %669 = load i32, i32* %E, align 4, !dbg !305
  %shr971 = lshr i32 %669, 22, !dbg !305
  %670 = load i32, i32* %E, align 4, !dbg !305
  %shl972 = shl i32 %670, 10, !dbg !305
  %xor973 = xor i32 %shr971, %shl972, !dbg !305
  %xor974 = xor i32 %xor970, %xor973, !dbg !305
  %add975 = add i32 %664, %xor974, !dbg !305
  %671 = load i32, i32* %E, align 4, !dbg !305
  %672 = load i32, i32* %F, align 4, !dbg !305
  %and976 = and i32 %671, %672, !dbg !305
  %673 = load i32, i32* %G, align 4, !dbg !305
  %674 = load i32, i32* %E, align 4, !dbg !305
  %675 = load i32, i32* %F, align 4, !dbg !305
  %xor977 = xor i32 %674, %675, !dbg !305
  %and978 = and i32 %673, %xor977, !dbg !305
  %xor979 = xor i32 %and976, %and978, !dbg !305
  %add980 = add i32 %add975, %xor979, !dbg !305
  store i32 %add980, i32* %D, align 4, !dbg !305
  call void @llvm.dbg.declare(metadata i32* %T1981, metadata !306, metadata !64), !dbg !308
  %676 = load i32, i32* %C, align 4, !dbg !308
  %677 = load i32, i32* %H, align 4, !dbg !308
  %shr982 = lshr i32 %677, 6, !dbg !308
  %678 = load i32, i32* %H, align 4, !dbg !308
  %shl983 = shl i32 %678, 26, !dbg !308
  %xor984 = xor i32 %shr982, %shl983, !dbg !308
  %679 = load i32, i32* %H, align 4, !dbg !308
  %shr985 = lshr i32 %679, 11, !dbg !308
  %680 = load i32, i32* %H, align 4, !dbg !308
  %shl986 = shl i32 %680, 21, !dbg !308
  %xor987 = xor i32 %shr985, %shl986, !dbg !308
  %xor988 = xor i32 %xor984, %xor987, !dbg !308
  %681 = load i32, i32* %H, align 4, !dbg !308
  %shr989 = lshr i32 %681, 25, !dbg !308
  %682 = load i32, i32* %H, align 4, !dbg !308
  %shl990 = shl i32 %682, 7, !dbg !308
  %xor991 = xor i32 %shr989, %shl990, !dbg !308
  %xor992 = xor i32 %xor988, %xor991, !dbg !308
  %add993 = add i32 %676, %xor992, !dbg !308
  %683 = load i32, i32* %B, align 4, !dbg !308
  %684 = load i32, i32* %H, align 4, !dbg !308
  %685 = load i32, i32* %A, align 4, !dbg !308
  %686 = load i32, i32* %B, align 4, !dbg !308
  %xor994 = xor i32 %685, %686, !dbg !308
  %and995 = and i32 %684, %xor994, !dbg !308
  %xor996 = xor i32 %683, %and995, !dbg !308
  %add997 = add i32 %add993, %xor996, !dbg !308
  %687 = load i32*, i32** %k, align 8, !dbg !308
  %arrayidx998 = getelementptr inbounds i32, i32* %687, i64 5, !dbg !308
  %688 = load i32, i32* %arrayidx998, align 4, !dbg !308
  %add999 = add i32 %add997, %688, !dbg !308
  %arrayidx1000 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 3, !dbg !308
  %689 = load i32, i32* %arrayidx1000, align 4, !dbg !308
  %shr1001 = lshr i32 %689, 17, !dbg !308
  %arrayidx1002 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 3, !dbg !308
  %690 = load i32, i32* %arrayidx1002, align 4, !dbg !308
  %shl1003 = shl i32 %690, 15, !dbg !308
  %xor1004 = xor i32 %shr1001, %shl1003, !dbg !308
  %arrayidx1005 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 3, !dbg !308
  %691 = load i32, i32* %arrayidx1005, align 4, !dbg !308
  %shr1006 = lshr i32 %691, 19, !dbg !308
  %arrayidx1007 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 3, !dbg !308
  %692 = load i32, i32* %arrayidx1007, align 4, !dbg !308
  %shl1008 = shl i32 %692, 13, !dbg !308
  %xor1009 = xor i32 %shr1006, %shl1008, !dbg !308
  %xor1010 = xor i32 %xor1004, %xor1009, !dbg !308
  %arrayidx1011 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 3, !dbg !308
  %693 = load i32, i32* %arrayidx1011, align 4, !dbg !308
  %shr1012 = lshr i32 %693, 10, !dbg !308
  %xor1013 = xor i32 %xor1010, %shr1012, !dbg !308
  %arrayidx1014 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 14, !dbg !308
  %694 = load i32, i32* %arrayidx1014, align 8, !dbg !308
  %add1015 = add i32 %xor1013, %694, !dbg !308
  %arrayidx1016 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 6, !dbg !308
  %695 = load i32, i32* %arrayidx1016, align 8, !dbg !308
  %shr1017 = lshr i32 %695, 7, !dbg !308
  %arrayidx1018 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 6, !dbg !308
  %696 = load i32, i32* %arrayidx1018, align 8, !dbg !308
  %shl1019 = shl i32 %696, 25, !dbg !308
  %xor1020 = xor i32 %shr1017, %shl1019, !dbg !308
  %arrayidx1021 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 6, !dbg !308
  %697 = load i32, i32* %arrayidx1021, align 8, !dbg !308
  %shr1022 = lshr i32 %697, 18, !dbg !308
  %arrayidx1023 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 6, !dbg !308
  %698 = load i32, i32* %arrayidx1023, align 8, !dbg !308
  %shl1024 = shl i32 %698, 14, !dbg !308
  %xor1025 = xor i32 %shr1022, %shl1024, !dbg !308
  %xor1026 = xor i32 %xor1020, %xor1025, !dbg !308
  %arrayidx1027 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 6, !dbg !308
  %699 = load i32, i32* %arrayidx1027, align 8, !dbg !308
  %shr1028 = lshr i32 %699, 3, !dbg !308
  %xor1029 = xor i32 %xor1026, %shr1028, !dbg !308
  %add1030 = add i32 %add1015, %xor1029, !dbg !308
  %arrayidx1031 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 5, !dbg !308
  %700 = load i32, i32* %arrayidx1031, align 4, !dbg !308
  %add1032 = add i32 %700, %add1030, !dbg !308
  store i32 %add1032, i32* %arrayidx1031, align 4, !dbg !308
  %add1033 = add i32 %add999, %add1032, !dbg !308
  store i32 %add1033, i32* %T1981, align 4, !dbg !308
  %701 = load i32, i32* %T1981, align 4, !dbg !308
  %702 = load i32, i32* %G, align 4, !dbg !308
  %add1034 = add i32 %702, %701, !dbg !308
  store i32 %add1034, i32* %G, align 4, !dbg !308
  %703 = load i32, i32* %T1981, align 4, !dbg !308
  %704 = load i32, i32* %D, align 4, !dbg !308
  %shr1035 = lshr i32 %704, 2, !dbg !308
  %705 = load i32, i32* %D, align 4, !dbg !308
  %shl1036 = shl i32 %705, 30, !dbg !308
  %xor1037 = xor i32 %shr1035, %shl1036, !dbg !308
  %706 = load i32, i32* %D, align 4, !dbg !308
  %shr1038 = lshr i32 %706, 13, !dbg !308
  %707 = load i32, i32* %D, align 4, !dbg !308
  %shl1039 = shl i32 %707, 19, !dbg !308
  %xor1040 = xor i32 %shr1038, %shl1039, !dbg !308
  %xor1041 = xor i32 %xor1037, %xor1040, !dbg !308
  %708 = load i32, i32* %D, align 4, !dbg !308
  %shr1042 = lshr i32 %708, 22, !dbg !308
  %709 = load i32, i32* %D, align 4, !dbg !308
  %shl1043 = shl i32 %709, 10, !dbg !308
  %xor1044 = xor i32 %shr1042, %shl1043, !dbg !308
  %xor1045 = xor i32 %xor1041, %xor1044, !dbg !308
  %add1046 = add i32 %703, %xor1045, !dbg !308
  %710 = load i32, i32* %D, align 4, !dbg !308
  %711 = load i32, i32* %E, align 4, !dbg !308
  %and1047 = and i32 %710, %711, !dbg !308
  %712 = load i32, i32* %F, align 4, !dbg !308
  %713 = load i32, i32* %D, align 4, !dbg !308
  %714 = load i32, i32* %E, align 4, !dbg !308
  %xor1048 = xor i32 %713, %714, !dbg !308
  %and1049 = and i32 %712, %xor1048, !dbg !308
  %xor1050 = xor i32 %and1047, %and1049, !dbg !308
  %add1051 = add i32 %add1046, %xor1050, !dbg !308
  store i32 %add1051, i32* %C, align 4, !dbg !308
  call void @llvm.dbg.declare(metadata i32* %T11052, metadata !309, metadata !64), !dbg !311
  %715 = load i32, i32* %B, align 4, !dbg !311
  %716 = load i32, i32* %G, align 4, !dbg !311
  %shr1053 = lshr i32 %716, 6, !dbg !311
  %717 = load i32, i32* %G, align 4, !dbg !311
  %shl1054 = shl i32 %717, 26, !dbg !311
  %xor1055 = xor i32 %shr1053, %shl1054, !dbg !311
  %718 = load i32, i32* %G, align 4, !dbg !311
  %shr1056 = lshr i32 %718, 11, !dbg !311
  %719 = load i32, i32* %G, align 4, !dbg !311
  %shl1057 = shl i32 %719, 21, !dbg !311
  %xor1058 = xor i32 %shr1056, %shl1057, !dbg !311
  %xor1059 = xor i32 %xor1055, %xor1058, !dbg !311
  %720 = load i32, i32* %G, align 4, !dbg !311
  %shr1060 = lshr i32 %720, 25, !dbg !311
  %721 = load i32, i32* %G, align 4, !dbg !311
  %shl1061 = shl i32 %721, 7, !dbg !311
  %xor1062 = xor i32 %shr1060, %shl1061, !dbg !311
  %xor1063 = xor i32 %xor1059, %xor1062, !dbg !311
  %add1064 = add i32 %715, %xor1063, !dbg !311
  %722 = load i32, i32* %A, align 4, !dbg !311
  %723 = load i32, i32* %G, align 4, !dbg !311
  %724 = load i32, i32* %H, align 4, !dbg !311
  %725 = load i32, i32* %A, align 4, !dbg !311
  %xor1065 = xor i32 %724, %725, !dbg !311
  %and1066 = and i32 %723, %xor1065, !dbg !311
  %xor1067 = xor i32 %722, %and1066, !dbg !311
  %add1068 = add i32 %add1064, %xor1067, !dbg !311
  %726 = load i32*, i32** %k, align 8, !dbg !311
  %arrayidx1069 = getelementptr inbounds i32, i32* %726, i64 6, !dbg !311
  %727 = load i32, i32* %arrayidx1069, align 4, !dbg !311
  %add1070 = add i32 %add1068, %727, !dbg !311
  %arrayidx1071 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 4, !dbg !311
  %728 = load i32, i32* %arrayidx1071, align 16, !dbg !311
  %shr1072 = lshr i32 %728, 17, !dbg !311
  %arrayidx1073 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 4, !dbg !311
  %729 = load i32, i32* %arrayidx1073, align 16, !dbg !311
  %shl1074 = shl i32 %729, 15, !dbg !311
  %xor1075 = xor i32 %shr1072, %shl1074, !dbg !311
  %arrayidx1076 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 4, !dbg !311
  %730 = load i32, i32* %arrayidx1076, align 16, !dbg !311
  %shr1077 = lshr i32 %730, 19, !dbg !311
  %arrayidx1078 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 4, !dbg !311
  %731 = load i32, i32* %arrayidx1078, align 16, !dbg !311
  %shl1079 = shl i32 %731, 13, !dbg !311
  %xor1080 = xor i32 %shr1077, %shl1079, !dbg !311
  %xor1081 = xor i32 %xor1075, %xor1080, !dbg !311
  %arrayidx1082 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 4, !dbg !311
  %732 = load i32, i32* %arrayidx1082, align 16, !dbg !311
  %shr1083 = lshr i32 %732, 10, !dbg !311
  %xor1084 = xor i32 %xor1081, %shr1083, !dbg !311
  %arrayidx1085 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 15, !dbg !311
  %733 = load i32, i32* %arrayidx1085, align 4, !dbg !311
  %add1086 = add i32 %xor1084, %733, !dbg !311
  %arrayidx1087 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 7, !dbg !311
  %734 = load i32, i32* %arrayidx1087, align 4, !dbg !311
  %shr1088 = lshr i32 %734, 7, !dbg !311
  %arrayidx1089 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 7, !dbg !311
  %735 = load i32, i32* %arrayidx1089, align 4, !dbg !311
  %shl1090 = shl i32 %735, 25, !dbg !311
  %xor1091 = xor i32 %shr1088, %shl1090, !dbg !311
  %arrayidx1092 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 7, !dbg !311
  %736 = load i32, i32* %arrayidx1092, align 4, !dbg !311
  %shr1093 = lshr i32 %736, 18, !dbg !311
  %arrayidx1094 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 7, !dbg !311
  %737 = load i32, i32* %arrayidx1094, align 4, !dbg !311
  %shl1095 = shl i32 %737, 14, !dbg !311
  %xor1096 = xor i32 %shr1093, %shl1095, !dbg !311
  %xor1097 = xor i32 %xor1091, %xor1096, !dbg !311
  %arrayidx1098 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 7, !dbg !311
  %738 = load i32, i32* %arrayidx1098, align 4, !dbg !311
  %shr1099 = lshr i32 %738, 3, !dbg !311
  %xor1100 = xor i32 %xor1097, %shr1099, !dbg !311
  %add1101 = add i32 %add1086, %xor1100, !dbg !311
  %arrayidx1102 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 6, !dbg !311
  %739 = load i32, i32* %arrayidx1102, align 8, !dbg !311
  %add1103 = add i32 %739, %add1101, !dbg !311
  store i32 %add1103, i32* %arrayidx1102, align 8, !dbg !311
  %add1104 = add i32 %add1070, %add1103, !dbg !311
  store i32 %add1104, i32* %T11052, align 4, !dbg !311
  %740 = load i32, i32* %T11052, align 4, !dbg !311
  %741 = load i32, i32* %F, align 4, !dbg !311
  %add1105 = add i32 %741, %740, !dbg !311
  store i32 %add1105, i32* %F, align 4, !dbg !311
  %742 = load i32, i32* %T11052, align 4, !dbg !311
  %743 = load i32, i32* %C, align 4, !dbg !311
  %shr1106 = lshr i32 %743, 2, !dbg !311
  %744 = load i32, i32* %C, align 4, !dbg !311
  %shl1107 = shl i32 %744, 30, !dbg !311
  %xor1108 = xor i32 %shr1106, %shl1107, !dbg !311
  %745 = load i32, i32* %C, align 4, !dbg !311
  %shr1109 = lshr i32 %745, 13, !dbg !311
  %746 = load i32, i32* %C, align 4, !dbg !311
  %shl1110 = shl i32 %746, 19, !dbg !311
  %xor1111 = xor i32 %shr1109, %shl1110, !dbg !311
  %xor1112 = xor i32 %xor1108, %xor1111, !dbg !311
  %747 = load i32, i32* %C, align 4, !dbg !311
  %shr1113 = lshr i32 %747, 22, !dbg !311
  %748 = load i32, i32* %C, align 4, !dbg !311
  %shl1114 = shl i32 %748, 10, !dbg !311
  %xor1115 = xor i32 %shr1113, %shl1114, !dbg !311
  %xor1116 = xor i32 %xor1112, %xor1115, !dbg !311
  %add1117 = add i32 %742, %xor1116, !dbg !311
  %749 = load i32, i32* %C, align 4, !dbg !311
  %750 = load i32, i32* %D, align 4, !dbg !311
  %and1118 = and i32 %749, %750, !dbg !311
  %751 = load i32, i32* %E, align 4, !dbg !311
  %752 = load i32, i32* %C, align 4, !dbg !311
  %753 = load i32, i32* %D, align 4, !dbg !311
  %xor1119 = xor i32 %752, %753, !dbg !311
  %and1120 = and i32 %751, %xor1119, !dbg !311
  %xor1121 = xor i32 %and1118, %and1120, !dbg !311
  %add1122 = add i32 %add1117, %xor1121, !dbg !311
  store i32 %add1122, i32* %B, align 4, !dbg !311
  call void @llvm.dbg.declare(metadata i32* %T11123, metadata !312, metadata !64), !dbg !314
  %754 = load i32, i32* %A, align 4, !dbg !314
  %755 = load i32, i32* %F, align 4, !dbg !314
  %shr1124 = lshr i32 %755, 6, !dbg !314
  %756 = load i32, i32* %F, align 4, !dbg !314
  %shl1125 = shl i32 %756, 26, !dbg !314
  %xor1126 = xor i32 %shr1124, %shl1125, !dbg !314
  %757 = load i32, i32* %F, align 4, !dbg !314
  %shr1127 = lshr i32 %757, 11, !dbg !314
  %758 = load i32, i32* %F, align 4, !dbg !314
  %shl1128 = shl i32 %758, 21, !dbg !314
  %xor1129 = xor i32 %shr1127, %shl1128, !dbg !314
  %xor1130 = xor i32 %xor1126, %xor1129, !dbg !314
  %759 = load i32, i32* %F, align 4, !dbg !314
  %shr1131 = lshr i32 %759, 25, !dbg !314
  %760 = load i32, i32* %F, align 4, !dbg !314
  %shl1132 = shl i32 %760, 7, !dbg !314
  %xor1133 = xor i32 %shr1131, %shl1132, !dbg !314
  %xor1134 = xor i32 %xor1130, %xor1133, !dbg !314
  %add1135 = add i32 %754, %xor1134, !dbg !314
  %761 = load i32, i32* %H, align 4, !dbg !314
  %762 = load i32, i32* %F, align 4, !dbg !314
  %763 = load i32, i32* %G, align 4, !dbg !314
  %764 = load i32, i32* %H, align 4, !dbg !314
  %xor1136 = xor i32 %763, %764, !dbg !314
  %and1137 = and i32 %762, %xor1136, !dbg !314
  %xor1138 = xor i32 %761, %and1137, !dbg !314
  %add1139 = add i32 %add1135, %xor1138, !dbg !314
  %765 = load i32*, i32** %k, align 8, !dbg !314
  %arrayidx1140 = getelementptr inbounds i32, i32* %765, i64 7, !dbg !314
  %766 = load i32, i32* %arrayidx1140, align 4, !dbg !314
  %add1141 = add i32 %add1139, %766, !dbg !314
  %arrayidx1142 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 5, !dbg !314
  %767 = load i32, i32* %arrayidx1142, align 4, !dbg !314
  %shr1143 = lshr i32 %767, 17, !dbg !314
  %arrayidx1144 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 5, !dbg !314
  %768 = load i32, i32* %arrayidx1144, align 4, !dbg !314
  %shl1145 = shl i32 %768, 15, !dbg !314
  %xor1146 = xor i32 %shr1143, %shl1145, !dbg !314
  %arrayidx1147 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 5, !dbg !314
  %769 = load i32, i32* %arrayidx1147, align 4, !dbg !314
  %shr1148 = lshr i32 %769, 19, !dbg !314
  %arrayidx1149 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 5, !dbg !314
  %770 = load i32, i32* %arrayidx1149, align 4, !dbg !314
  %shl1150 = shl i32 %770, 13, !dbg !314
  %xor1151 = xor i32 %shr1148, %shl1150, !dbg !314
  %xor1152 = xor i32 %xor1146, %xor1151, !dbg !314
  %arrayidx1153 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 5, !dbg !314
  %771 = load i32, i32* %arrayidx1153, align 4, !dbg !314
  %shr1154 = lshr i32 %771, 10, !dbg !314
  %xor1155 = xor i32 %xor1152, %shr1154, !dbg !314
  %arrayidx1156 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 0, !dbg !314
  %772 = load i32, i32* %arrayidx1156, align 16, !dbg !314
  %add1157 = add i32 %xor1155, %772, !dbg !314
  %arrayidx1158 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 8, !dbg !314
  %773 = load i32, i32* %arrayidx1158, align 16, !dbg !314
  %shr1159 = lshr i32 %773, 7, !dbg !314
  %arrayidx1160 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 8, !dbg !314
  %774 = load i32, i32* %arrayidx1160, align 16, !dbg !314
  %shl1161 = shl i32 %774, 25, !dbg !314
  %xor1162 = xor i32 %shr1159, %shl1161, !dbg !314
  %arrayidx1163 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 8, !dbg !314
  %775 = load i32, i32* %arrayidx1163, align 16, !dbg !314
  %shr1164 = lshr i32 %775, 18, !dbg !314
  %arrayidx1165 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 8, !dbg !314
  %776 = load i32, i32* %arrayidx1165, align 16, !dbg !314
  %shl1166 = shl i32 %776, 14, !dbg !314
  %xor1167 = xor i32 %shr1164, %shl1166, !dbg !314
  %xor1168 = xor i32 %xor1162, %xor1167, !dbg !314
  %arrayidx1169 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 8, !dbg !314
  %777 = load i32, i32* %arrayidx1169, align 16, !dbg !314
  %shr1170 = lshr i32 %777, 3, !dbg !314
  %xor1171 = xor i32 %xor1168, %shr1170, !dbg !314
  %add1172 = add i32 %add1157, %xor1171, !dbg !314
  %arrayidx1173 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 7, !dbg !314
  %778 = load i32, i32* %arrayidx1173, align 4, !dbg !314
  %add1174 = add i32 %778, %add1172, !dbg !314
  store i32 %add1174, i32* %arrayidx1173, align 4, !dbg !314
  %add1175 = add i32 %add1141, %add1174, !dbg !314
  store i32 %add1175, i32* %T11123, align 4, !dbg !314
  %779 = load i32, i32* %T11123, align 4, !dbg !314
  %780 = load i32, i32* %E, align 4, !dbg !314
  %add1176 = add i32 %780, %779, !dbg !314
  store i32 %add1176, i32* %E, align 4, !dbg !314
  %781 = load i32, i32* %T11123, align 4, !dbg !314
  %782 = load i32, i32* %B, align 4, !dbg !314
  %shr1177 = lshr i32 %782, 2, !dbg !314
  %783 = load i32, i32* %B, align 4, !dbg !314
  %shl1178 = shl i32 %783, 30, !dbg !314
  %xor1179 = xor i32 %shr1177, %shl1178, !dbg !314
  %784 = load i32, i32* %B, align 4, !dbg !314
  %shr1180 = lshr i32 %784, 13, !dbg !314
  %785 = load i32, i32* %B, align 4, !dbg !314
  %shl1181 = shl i32 %785, 19, !dbg !314
  %xor1182 = xor i32 %shr1180, %shl1181, !dbg !314
  %xor1183 = xor i32 %xor1179, %xor1182, !dbg !314
  %786 = load i32, i32* %B, align 4, !dbg !314
  %shr1184 = lshr i32 %786, 22, !dbg !314
  %787 = load i32, i32* %B, align 4, !dbg !314
  %shl1185 = shl i32 %787, 10, !dbg !314
  %xor1186 = xor i32 %shr1184, %shl1185, !dbg !314
  %xor1187 = xor i32 %xor1183, %xor1186, !dbg !314
  %add1188 = add i32 %781, %xor1187, !dbg !314
  %788 = load i32, i32* %B, align 4, !dbg !314
  %789 = load i32, i32* %C, align 4, !dbg !314
  %and1189 = and i32 %788, %789, !dbg !314
  %790 = load i32, i32* %D, align 4, !dbg !314
  %791 = load i32, i32* %B, align 4, !dbg !314
  %792 = load i32, i32* %C, align 4, !dbg !314
  %xor1190 = xor i32 %791, %792, !dbg !314
  %and1191 = and i32 %790, %xor1190, !dbg !314
  %xor1192 = xor i32 %and1189, %and1191, !dbg !314
  %add1193 = add i32 %add1188, %xor1192, !dbg !314
  store i32 %add1193, i32* %A, align 4, !dbg !314
  call void @llvm.dbg.declare(metadata i32* %T11194, metadata !315, metadata !64), !dbg !317
  %793 = load i32, i32* %H, align 4, !dbg !317
  %794 = load i32, i32* %E, align 4, !dbg !317
  %shr1195 = lshr i32 %794, 6, !dbg !317
  %795 = load i32, i32* %E, align 4, !dbg !317
  %shl1196 = shl i32 %795, 26, !dbg !317
  %xor1197 = xor i32 %shr1195, %shl1196, !dbg !317
  %796 = load i32, i32* %E, align 4, !dbg !317
  %shr1198 = lshr i32 %796, 11, !dbg !317
  %797 = load i32, i32* %E, align 4, !dbg !317
  %shl1199 = shl i32 %797, 21, !dbg !317
  %xor1200 = xor i32 %shr1198, %shl1199, !dbg !317
  %xor1201 = xor i32 %xor1197, %xor1200, !dbg !317
  %798 = load i32, i32* %E, align 4, !dbg !317
  %shr1202 = lshr i32 %798, 25, !dbg !317
  %799 = load i32, i32* %E, align 4, !dbg !317
  %shl1203 = shl i32 %799, 7, !dbg !317
  %xor1204 = xor i32 %shr1202, %shl1203, !dbg !317
  %xor1205 = xor i32 %xor1201, %xor1204, !dbg !317
  %add1206 = add i32 %793, %xor1205, !dbg !317
  %800 = load i32, i32* %G, align 4, !dbg !317
  %801 = load i32, i32* %E, align 4, !dbg !317
  %802 = load i32, i32* %F, align 4, !dbg !317
  %803 = load i32, i32* %G, align 4, !dbg !317
  %xor1207 = xor i32 %802, %803, !dbg !317
  %and1208 = and i32 %801, %xor1207, !dbg !317
  %xor1209 = xor i32 %800, %and1208, !dbg !317
  %add1210 = add i32 %add1206, %xor1209, !dbg !317
  %804 = load i32*, i32** %k, align 8, !dbg !317
  %arrayidx1211 = getelementptr inbounds i32, i32* %804, i64 8, !dbg !317
  %805 = load i32, i32* %arrayidx1211, align 4, !dbg !317
  %add1212 = add i32 %add1210, %805, !dbg !317
  %arrayidx1213 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 6, !dbg !317
  %806 = load i32, i32* %arrayidx1213, align 8, !dbg !317
  %shr1214 = lshr i32 %806, 17, !dbg !317
  %arrayidx1215 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 6, !dbg !317
  %807 = load i32, i32* %arrayidx1215, align 8, !dbg !317
  %shl1216 = shl i32 %807, 15, !dbg !317
  %xor1217 = xor i32 %shr1214, %shl1216, !dbg !317
  %arrayidx1218 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 6, !dbg !317
  %808 = load i32, i32* %arrayidx1218, align 8, !dbg !317
  %shr1219 = lshr i32 %808, 19, !dbg !317
  %arrayidx1220 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 6, !dbg !317
  %809 = load i32, i32* %arrayidx1220, align 8, !dbg !317
  %shl1221 = shl i32 %809, 13, !dbg !317
  %xor1222 = xor i32 %shr1219, %shl1221, !dbg !317
  %xor1223 = xor i32 %xor1217, %xor1222, !dbg !317
  %arrayidx1224 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 6, !dbg !317
  %810 = load i32, i32* %arrayidx1224, align 8, !dbg !317
  %shr1225 = lshr i32 %810, 10, !dbg !317
  %xor1226 = xor i32 %xor1223, %shr1225, !dbg !317
  %arrayidx1227 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 1, !dbg !317
  %811 = load i32, i32* %arrayidx1227, align 4, !dbg !317
  %add1228 = add i32 %xor1226, %811, !dbg !317
  %arrayidx1229 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 9, !dbg !317
  %812 = load i32, i32* %arrayidx1229, align 4, !dbg !317
  %shr1230 = lshr i32 %812, 7, !dbg !317
  %arrayidx1231 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 9, !dbg !317
  %813 = load i32, i32* %arrayidx1231, align 4, !dbg !317
  %shl1232 = shl i32 %813, 25, !dbg !317
  %xor1233 = xor i32 %shr1230, %shl1232, !dbg !317
  %arrayidx1234 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 9, !dbg !317
  %814 = load i32, i32* %arrayidx1234, align 4, !dbg !317
  %shr1235 = lshr i32 %814, 18, !dbg !317
  %arrayidx1236 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 9, !dbg !317
  %815 = load i32, i32* %arrayidx1236, align 4, !dbg !317
  %shl1237 = shl i32 %815, 14, !dbg !317
  %xor1238 = xor i32 %shr1235, %shl1237, !dbg !317
  %xor1239 = xor i32 %xor1233, %xor1238, !dbg !317
  %arrayidx1240 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 9, !dbg !317
  %816 = load i32, i32* %arrayidx1240, align 4, !dbg !317
  %shr1241 = lshr i32 %816, 3, !dbg !317
  %xor1242 = xor i32 %xor1239, %shr1241, !dbg !317
  %add1243 = add i32 %add1228, %xor1242, !dbg !317
  %arrayidx1244 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 8, !dbg !317
  %817 = load i32, i32* %arrayidx1244, align 16, !dbg !317
  %add1245 = add i32 %817, %add1243, !dbg !317
  store i32 %add1245, i32* %arrayidx1244, align 16, !dbg !317
  %add1246 = add i32 %add1212, %add1245, !dbg !317
  store i32 %add1246, i32* %T11194, align 4, !dbg !317
  %818 = load i32, i32* %T11194, align 4, !dbg !317
  %819 = load i32, i32* %D, align 4, !dbg !317
  %add1247 = add i32 %819, %818, !dbg !317
  store i32 %add1247, i32* %D, align 4, !dbg !317
  %820 = load i32, i32* %T11194, align 4, !dbg !317
  %821 = load i32, i32* %A, align 4, !dbg !317
  %shr1248 = lshr i32 %821, 2, !dbg !317
  %822 = load i32, i32* %A, align 4, !dbg !317
  %shl1249 = shl i32 %822, 30, !dbg !317
  %xor1250 = xor i32 %shr1248, %shl1249, !dbg !317
  %823 = load i32, i32* %A, align 4, !dbg !317
  %shr1251 = lshr i32 %823, 13, !dbg !317
  %824 = load i32, i32* %A, align 4, !dbg !317
  %shl1252 = shl i32 %824, 19, !dbg !317
  %xor1253 = xor i32 %shr1251, %shl1252, !dbg !317
  %xor1254 = xor i32 %xor1250, %xor1253, !dbg !317
  %825 = load i32, i32* %A, align 4, !dbg !317
  %shr1255 = lshr i32 %825, 22, !dbg !317
  %826 = load i32, i32* %A, align 4, !dbg !317
  %shl1256 = shl i32 %826, 10, !dbg !317
  %xor1257 = xor i32 %shr1255, %shl1256, !dbg !317
  %xor1258 = xor i32 %xor1254, %xor1257, !dbg !317
  %add1259 = add i32 %820, %xor1258, !dbg !317
  %827 = load i32, i32* %A, align 4, !dbg !317
  %828 = load i32, i32* %B, align 4, !dbg !317
  %and1260 = and i32 %827, %828, !dbg !317
  %829 = load i32, i32* %C, align 4, !dbg !317
  %830 = load i32, i32* %A, align 4, !dbg !317
  %831 = load i32, i32* %B, align 4, !dbg !317
  %xor1261 = xor i32 %830, %831, !dbg !317
  %and1262 = and i32 %829, %xor1261, !dbg !317
  %xor1263 = xor i32 %and1260, %and1262, !dbg !317
  %add1264 = add i32 %add1259, %xor1263, !dbg !317
  store i32 %add1264, i32* %H, align 4, !dbg !317
  call void @llvm.dbg.declare(metadata i32* %T11265, metadata !318, metadata !64), !dbg !320
  %832 = load i32, i32* %G, align 4, !dbg !320
  %833 = load i32, i32* %D, align 4, !dbg !320
  %shr1266 = lshr i32 %833, 6, !dbg !320
  %834 = load i32, i32* %D, align 4, !dbg !320
  %shl1267 = shl i32 %834, 26, !dbg !320
  %xor1268 = xor i32 %shr1266, %shl1267, !dbg !320
  %835 = load i32, i32* %D, align 4, !dbg !320
  %shr1269 = lshr i32 %835, 11, !dbg !320
  %836 = load i32, i32* %D, align 4, !dbg !320
  %shl1270 = shl i32 %836, 21, !dbg !320
  %xor1271 = xor i32 %shr1269, %shl1270, !dbg !320
  %xor1272 = xor i32 %xor1268, %xor1271, !dbg !320
  %837 = load i32, i32* %D, align 4, !dbg !320
  %shr1273 = lshr i32 %837, 25, !dbg !320
  %838 = load i32, i32* %D, align 4, !dbg !320
  %shl1274 = shl i32 %838, 7, !dbg !320
  %xor1275 = xor i32 %shr1273, %shl1274, !dbg !320
  %xor1276 = xor i32 %xor1272, %xor1275, !dbg !320
  %add1277 = add i32 %832, %xor1276, !dbg !320
  %839 = load i32, i32* %F, align 4, !dbg !320
  %840 = load i32, i32* %D, align 4, !dbg !320
  %841 = load i32, i32* %E, align 4, !dbg !320
  %842 = load i32, i32* %F, align 4, !dbg !320
  %xor1278 = xor i32 %841, %842, !dbg !320
  %and1279 = and i32 %840, %xor1278, !dbg !320
  %xor1280 = xor i32 %839, %and1279, !dbg !320
  %add1281 = add i32 %add1277, %xor1280, !dbg !320
  %843 = load i32*, i32** %k, align 8, !dbg !320
  %arrayidx1282 = getelementptr inbounds i32, i32* %843, i64 9, !dbg !320
  %844 = load i32, i32* %arrayidx1282, align 4, !dbg !320
  %add1283 = add i32 %add1281, %844, !dbg !320
  %arrayidx1284 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 7, !dbg !320
  %845 = load i32, i32* %arrayidx1284, align 4, !dbg !320
  %shr1285 = lshr i32 %845, 17, !dbg !320
  %arrayidx1286 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 7, !dbg !320
  %846 = load i32, i32* %arrayidx1286, align 4, !dbg !320
  %shl1287 = shl i32 %846, 15, !dbg !320
  %xor1288 = xor i32 %shr1285, %shl1287, !dbg !320
  %arrayidx1289 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 7, !dbg !320
  %847 = load i32, i32* %arrayidx1289, align 4, !dbg !320
  %shr1290 = lshr i32 %847, 19, !dbg !320
  %arrayidx1291 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 7, !dbg !320
  %848 = load i32, i32* %arrayidx1291, align 4, !dbg !320
  %shl1292 = shl i32 %848, 13, !dbg !320
  %xor1293 = xor i32 %shr1290, %shl1292, !dbg !320
  %xor1294 = xor i32 %xor1288, %xor1293, !dbg !320
  %arrayidx1295 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 7, !dbg !320
  %849 = load i32, i32* %arrayidx1295, align 4, !dbg !320
  %shr1296 = lshr i32 %849, 10, !dbg !320
  %xor1297 = xor i32 %xor1294, %shr1296, !dbg !320
  %arrayidx1298 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 2, !dbg !320
  %850 = load i32, i32* %arrayidx1298, align 8, !dbg !320
  %add1299 = add i32 %xor1297, %850, !dbg !320
  %arrayidx1300 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 10, !dbg !320
  %851 = load i32, i32* %arrayidx1300, align 8, !dbg !320
  %shr1301 = lshr i32 %851, 7, !dbg !320
  %arrayidx1302 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 10, !dbg !320
  %852 = load i32, i32* %arrayidx1302, align 8, !dbg !320
  %shl1303 = shl i32 %852, 25, !dbg !320
  %xor1304 = xor i32 %shr1301, %shl1303, !dbg !320
  %arrayidx1305 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 10, !dbg !320
  %853 = load i32, i32* %arrayidx1305, align 8, !dbg !320
  %shr1306 = lshr i32 %853, 18, !dbg !320
  %arrayidx1307 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 10, !dbg !320
  %854 = load i32, i32* %arrayidx1307, align 8, !dbg !320
  %shl1308 = shl i32 %854, 14, !dbg !320
  %xor1309 = xor i32 %shr1306, %shl1308, !dbg !320
  %xor1310 = xor i32 %xor1304, %xor1309, !dbg !320
  %arrayidx1311 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 10, !dbg !320
  %855 = load i32, i32* %arrayidx1311, align 8, !dbg !320
  %shr1312 = lshr i32 %855, 3, !dbg !320
  %xor1313 = xor i32 %xor1310, %shr1312, !dbg !320
  %add1314 = add i32 %add1299, %xor1313, !dbg !320
  %arrayidx1315 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 9, !dbg !320
  %856 = load i32, i32* %arrayidx1315, align 4, !dbg !320
  %add1316 = add i32 %856, %add1314, !dbg !320
  store i32 %add1316, i32* %arrayidx1315, align 4, !dbg !320
  %add1317 = add i32 %add1283, %add1316, !dbg !320
  store i32 %add1317, i32* %T11265, align 4, !dbg !320
  %857 = load i32, i32* %T11265, align 4, !dbg !320
  %858 = load i32, i32* %C, align 4, !dbg !320
  %add1318 = add i32 %858, %857, !dbg !320
  store i32 %add1318, i32* %C, align 4, !dbg !320
  %859 = load i32, i32* %T11265, align 4, !dbg !320
  %860 = load i32, i32* %H, align 4, !dbg !320
  %shr1319 = lshr i32 %860, 2, !dbg !320
  %861 = load i32, i32* %H, align 4, !dbg !320
  %shl1320 = shl i32 %861, 30, !dbg !320
  %xor1321 = xor i32 %shr1319, %shl1320, !dbg !320
  %862 = load i32, i32* %H, align 4, !dbg !320
  %shr1322 = lshr i32 %862, 13, !dbg !320
  %863 = load i32, i32* %H, align 4, !dbg !320
  %shl1323 = shl i32 %863, 19, !dbg !320
  %xor1324 = xor i32 %shr1322, %shl1323, !dbg !320
  %xor1325 = xor i32 %xor1321, %xor1324, !dbg !320
  %864 = load i32, i32* %H, align 4, !dbg !320
  %shr1326 = lshr i32 %864, 22, !dbg !320
  %865 = load i32, i32* %H, align 4, !dbg !320
  %shl1327 = shl i32 %865, 10, !dbg !320
  %xor1328 = xor i32 %shr1326, %shl1327, !dbg !320
  %xor1329 = xor i32 %xor1325, %xor1328, !dbg !320
  %add1330 = add i32 %859, %xor1329, !dbg !320
  %866 = load i32, i32* %H, align 4, !dbg !320
  %867 = load i32, i32* %A, align 4, !dbg !320
  %and1331 = and i32 %866, %867, !dbg !320
  %868 = load i32, i32* %B, align 4, !dbg !320
  %869 = load i32, i32* %H, align 4, !dbg !320
  %870 = load i32, i32* %A, align 4, !dbg !320
  %xor1332 = xor i32 %869, %870, !dbg !320
  %and1333 = and i32 %868, %xor1332, !dbg !320
  %xor1334 = xor i32 %and1331, %and1333, !dbg !320
  %add1335 = add i32 %add1330, %xor1334, !dbg !320
  store i32 %add1335, i32* %G, align 4, !dbg !320
  call void @llvm.dbg.declare(metadata i32* %T11336, metadata !321, metadata !64), !dbg !323
  %871 = load i32, i32* %F, align 4, !dbg !323
  %872 = load i32, i32* %C, align 4, !dbg !323
  %shr1337 = lshr i32 %872, 6, !dbg !323
  %873 = load i32, i32* %C, align 4, !dbg !323
  %shl1338 = shl i32 %873, 26, !dbg !323
  %xor1339 = xor i32 %shr1337, %shl1338, !dbg !323
  %874 = load i32, i32* %C, align 4, !dbg !323
  %shr1340 = lshr i32 %874, 11, !dbg !323
  %875 = load i32, i32* %C, align 4, !dbg !323
  %shl1341 = shl i32 %875, 21, !dbg !323
  %xor1342 = xor i32 %shr1340, %shl1341, !dbg !323
  %xor1343 = xor i32 %xor1339, %xor1342, !dbg !323
  %876 = load i32, i32* %C, align 4, !dbg !323
  %shr1344 = lshr i32 %876, 25, !dbg !323
  %877 = load i32, i32* %C, align 4, !dbg !323
  %shl1345 = shl i32 %877, 7, !dbg !323
  %xor1346 = xor i32 %shr1344, %shl1345, !dbg !323
  %xor1347 = xor i32 %xor1343, %xor1346, !dbg !323
  %add1348 = add i32 %871, %xor1347, !dbg !323
  %878 = load i32, i32* %E, align 4, !dbg !323
  %879 = load i32, i32* %C, align 4, !dbg !323
  %880 = load i32, i32* %D, align 4, !dbg !323
  %881 = load i32, i32* %E, align 4, !dbg !323
  %xor1349 = xor i32 %880, %881, !dbg !323
  %and1350 = and i32 %879, %xor1349, !dbg !323
  %xor1351 = xor i32 %878, %and1350, !dbg !323
  %add1352 = add i32 %add1348, %xor1351, !dbg !323
  %882 = load i32*, i32** %k, align 8, !dbg !323
  %arrayidx1353 = getelementptr inbounds i32, i32* %882, i64 10, !dbg !323
  %883 = load i32, i32* %arrayidx1353, align 4, !dbg !323
  %add1354 = add i32 %add1352, %883, !dbg !323
  %arrayidx1355 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 8, !dbg !323
  %884 = load i32, i32* %arrayidx1355, align 16, !dbg !323
  %shr1356 = lshr i32 %884, 17, !dbg !323
  %arrayidx1357 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 8, !dbg !323
  %885 = load i32, i32* %arrayidx1357, align 16, !dbg !323
  %shl1358 = shl i32 %885, 15, !dbg !323
  %xor1359 = xor i32 %shr1356, %shl1358, !dbg !323
  %arrayidx1360 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 8, !dbg !323
  %886 = load i32, i32* %arrayidx1360, align 16, !dbg !323
  %shr1361 = lshr i32 %886, 19, !dbg !323
  %arrayidx1362 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 8, !dbg !323
  %887 = load i32, i32* %arrayidx1362, align 16, !dbg !323
  %shl1363 = shl i32 %887, 13, !dbg !323
  %xor1364 = xor i32 %shr1361, %shl1363, !dbg !323
  %xor1365 = xor i32 %xor1359, %xor1364, !dbg !323
  %arrayidx1366 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 8, !dbg !323
  %888 = load i32, i32* %arrayidx1366, align 16, !dbg !323
  %shr1367 = lshr i32 %888, 10, !dbg !323
  %xor1368 = xor i32 %xor1365, %shr1367, !dbg !323
  %arrayidx1369 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 3, !dbg !323
  %889 = load i32, i32* %arrayidx1369, align 4, !dbg !323
  %add1370 = add i32 %xor1368, %889, !dbg !323
  %arrayidx1371 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 11, !dbg !323
  %890 = load i32, i32* %arrayidx1371, align 4, !dbg !323
  %shr1372 = lshr i32 %890, 7, !dbg !323
  %arrayidx1373 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 11, !dbg !323
  %891 = load i32, i32* %arrayidx1373, align 4, !dbg !323
  %shl1374 = shl i32 %891, 25, !dbg !323
  %xor1375 = xor i32 %shr1372, %shl1374, !dbg !323
  %arrayidx1376 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 11, !dbg !323
  %892 = load i32, i32* %arrayidx1376, align 4, !dbg !323
  %shr1377 = lshr i32 %892, 18, !dbg !323
  %arrayidx1378 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 11, !dbg !323
  %893 = load i32, i32* %arrayidx1378, align 4, !dbg !323
  %shl1379 = shl i32 %893, 14, !dbg !323
  %xor1380 = xor i32 %shr1377, %shl1379, !dbg !323
  %xor1381 = xor i32 %xor1375, %xor1380, !dbg !323
  %arrayidx1382 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 11, !dbg !323
  %894 = load i32, i32* %arrayidx1382, align 4, !dbg !323
  %shr1383 = lshr i32 %894, 3, !dbg !323
  %xor1384 = xor i32 %xor1381, %shr1383, !dbg !323
  %add1385 = add i32 %add1370, %xor1384, !dbg !323
  %arrayidx1386 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 10, !dbg !323
  %895 = load i32, i32* %arrayidx1386, align 8, !dbg !323
  %add1387 = add i32 %895, %add1385, !dbg !323
  store i32 %add1387, i32* %arrayidx1386, align 8, !dbg !323
  %add1388 = add i32 %add1354, %add1387, !dbg !323
  store i32 %add1388, i32* %T11336, align 4, !dbg !323
  %896 = load i32, i32* %T11336, align 4, !dbg !323
  %897 = load i32, i32* %B, align 4, !dbg !323
  %add1389 = add i32 %897, %896, !dbg !323
  store i32 %add1389, i32* %B, align 4, !dbg !323
  %898 = load i32, i32* %T11336, align 4, !dbg !323
  %899 = load i32, i32* %G, align 4, !dbg !323
  %shr1390 = lshr i32 %899, 2, !dbg !323
  %900 = load i32, i32* %G, align 4, !dbg !323
  %shl1391 = shl i32 %900, 30, !dbg !323
  %xor1392 = xor i32 %shr1390, %shl1391, !dbg !323
  %901 = load i32, i32* %G, align 4, !dbg !323
  %shr1393 = lshr i32 %901, 13, !dbg !323
  %902 = load i32, i32* %G, align 4, !dbg !323
  %shl1394 = shl i32 %902, 19, !dbg !323
  %xor1395 = xor i32 %shr1393, %shl1394, !dbg !323
  %xor1396 = xor i32 %xor1392, %xor1395, !dbg !323
  %903 = load i32, i32* %G, align 4, !dbg !323
  %shr1397 = lshr i32 %903, 22, !dbg !323
  %904 = load i32, i32* %G, align 4, !dbg !323
  %shl1398 = shl i32 %904, 10, !dbg !323
  %xor1399 = xor i32 %shr1397, %shl1398, !dbg !323
  %xor1400 = xor i32 %xor1396, %xor1399, !dbg !323
  %add1401 = add i32 %898, %xor1400, !dbg !323
  %905 = load i32, i32* %G, align 4, !dbg !323
  %906 = load i32, i32* %H, align 4, !dbg !323
  %and1402 = and i32 %905, %906, !dbg !323
  %907 = load i32, i32* %A, align 4, !dbg !323
  %908 = load i32, i32* %G, align 4, !dbg !323
  %909 = load i32, i32* %H, align 4, !dbg !323
  %xor1403 = xor i32 %908, %909, !dbg !323
  %and1404 = and i32 %907, %xor1403, !dbg !323
  %xor1405 = xor i32 %and1402, %and1404, !dbg !323
  %add1406 = add i32 %add1401, %xor1405, !dbg !323
  store i32 %add1406, i32* %F, align 4, !dbg !323
  call void @llvm.dbg.declare(metadata i32* %T11407, metadata !324, metadata !64), !dbg !326
  %910 = load i32, i32* %E, align 4, !dbg !326
  %911 = load i32, i32* %B, align 4, !dbg !326
  %shr1408 = lshr i32 %911, 6, !dbg !326
  %912 = load i32, i32* %B, align 4, !dbg !326
  %shl1409 = shl i32 %912, 26, !dbg !326
  %xor1410 = xor i32 %shr1408, %shl1409, !dbg !326
  %913 = load i32, i32* %B, align 4, !dbg !326
  %shr1411 = lshr i32 %913, 11, !dbg !326
  %914 = load i32, i32* %B, align 4, !dbg !326
  %shl1412 = shl i32 %914, 21, !dbg !326
  %xor1413 = xor i32 %shr1411, %shl1412, !dbg !326
  %xor1414 = xor i32 %xor1410, %xor1413, !dbg !326
  %915 = load i32, i32* %B, align 4, !dbg !326
  %shr1415 = lshr i32 %915, 25, !dbg !326
  %916 = load i32, i32* %B, align 4, !dbg !326
  %shl1416 = shl i32 %916, 7, !dbg !326
  %xor1417 = xor i32 %shr1415, %shl1416, !dbg !326
  %xor1418 = xor i32 %xor1414, %xor1417, !dbg !326
  %add1419 = add i32 %910, %xor1418, !dbg !326
  %917 = load i32, i32* %D, align 4, !dbg !326
  %918 = load i32, i32* %B, align 4, !dbg !326
  %919 = load i32, i32* %C, align 4, !dbg !326
  %920 = load i32, i32* %D, align 4, !dbg !326
  %xor1420 = xor i32 %919, %920, !dbg !326
  %and1421 = and i32 %918, %xor1420, !dbg !326
  %xor1422 = xor i32 %917, %and1421, !dbg !326
  %add1423 = add i32 %add1419, %xor1422, !dbg !326
  %921 = load i32*, i32** %k, align 8, !dbg !326
  %arrayidx1424 = getelementptr inbounds i32, i32* %921, i64 11, !dbg !326
  %922 = load i32, i32* %arrayidx1424, align 4, !dbg !326
  %add1425 = add i32 %add1423, %922, !dbg !326
  %arrayidx1426 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 9, !dbg !326
  %923 = load i32, i32* %arrayidx1426, align 4, !dbg !326
  %shr1427 = lshr i32 %923, 17, !dbg !326
  %arrayidx1428 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 9, !dbg !326
  %924 = load i32, i32* %arrayidx1428, align 4, !dbg !326
  %shl1429 = shl i32 %924, 15, !dbg !326
  %xor1430 = xor i32 %shr1427, %shl1429, !dbg !326
  %arrayidx1431 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 9, !dbg !326
  %925 = load i32, i32* %arrayidx1431, align 4, !dbg !326
  %shr1432 = lshr i32 %925, 19, !dbg !326
  %arrayidx1433 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 9, !dbg !326
  %926 = load i32, i32* %arrayidx1433, align 4, !dbg !326
  %shl1434 = shl i32 %926, 13, !dbg !326
  %xor1435 = xor i32 %shr1432, %shl1434, !dbg !326
  %xor1436 = xor i32 %xor1430, %xor1435, !dbg !326
  %arrayidx1437 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 9, !dbg !326
  %927 = load i32, i32* %arrayidx1437, align 4, !dbg !326
  %shr1438 = lshr i32 %927, 10, !dbg !326
  %xor1439 = xor i32 %xor1436, %shr1438, !dbg !326
  %arrayidx1440 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 4, !dbg !326
  %928 = load i32, i32* %arrayidx1440, align 16, !dbg !326
  %add1441 = add i32 %xor1439, %928, !dbg !326
  %arrayidx1442 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 12, !dbg !326
  %929 = load i32, i32* %arrayidx1442, align 16, !dbg !326
  %shr1443 = lshr i32 %929, 7, !dbg !326
  %arrayidx1444 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 12, !dbg !326
  %930 = load i32, i32* %arrayidx1444, align 16, !dbg !326
  %shl1445 = shl i32 %930, 25, !dbg !326
  %xor1446 = xor i32 %shr1443, %shl1445, !dbg !326
  %arrayidx1447 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 12, !dbg !326
  %931 = load i32, i32* %arrayidx1447, align 16, !dbg !326
  %shr1448 = lshr i32 %931, 18, !dbg !326
  %arrayidx1449 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 12, !dbg !326
  %932 = load i32, i32* %arrayidx1449, align 16, !dbg !326
  %shl1450 = shl i32 %932, 14, !dbg !326
  %xor1451 = xor i32 %shr1448, %shl1450, !dbg !326
  %xor1452 = xor i32 %xor1446, %xor1451, !dbg !326
  %arrayidx1453 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 12, !dbg !326
  %933 = load i32, i32* %arrayidx1453, align 16, !dbg !326
  %shr1454 = lshr i32 %933, 3, !dbg !326
  %xor1455 = xor i32 %xor1452, %shr1454, !dbg !326
  %add1456 = add i32 %add1441, %xor1455, !dbg !326
  %arrayidx1457 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 11, !dbg !326
  %934 = load i32, i32* %arrayidx1457, align 4, !dbg !326
  %add1458 = add i32 %934, %add1456, !dbg !326
  store i32 %add1458, i32* %arrayidx1457, align 4, !dbg !326
  %add1459 = add i32 %add1425, %add1458, !dbg !326
  store i32 %add1459, i32* %T11407, align 4, !dbg !326
  %935 = load i32, i32* %T11407, align 4, !dbg !326
  %936 = load i32, i32* %A, align 4, !dbg !326
  %add1460 = add i32 %936, %935, !dbg !326
  store i32 %add1460, i32* %A, align 4, !dbg !326
  %937 = load i32, i32* %T11407, align 4, !dbg !326
  %938 = load i32, i32* %F, align 4, !dbg !326
  %shr1461 = lshr i32 %938, 2, !dbg !326
  %939 = load i32, i32* %F, align 4, !dbg !326
  %shl1462 = shl i32 %939, 30, !dbg !326
  %xor1463 = xor i32 %shr1461, %shl1462, !dbg !326
  %940 = load i32, i32* %F, align 4, !dbg !326
  %shr1464 = lshr i32 %940, 13, !dbg !326
  %941 = load i32, i32* %F, align 4, !dbg !326
  %shl1465 = shl i32 %941, 19, !dbg !326
  %xor1466 = xor i32 %shr1464, %shl1465, !dbg !326
  %xor1467 = xor i32 %xor1463, %xor1466, !dbg !326
  %942 = load i32, i32* %F, align 4, !dbg !326
  %shr1468 = lshr i32 %942, 22, !dbg !326
  %943 = load i32, i32* %F, align 4, !dbg !326
  %shl1469 = shl i32 %943, 10, !dbg !326
  %xor1470 = xor i32 %shr1468, %shl1469, !dbg !326
  %xor1471 = xor i32 %xor1467, %xor1470, !dbg !326
  %add1472 = add i32 %937, %xor1471, !dbg !326
  %944 = load i32, i32* %F, align 4, !dbg !326
  %945 = load i32, i32* %G, align 4, !dbg !326
  %and1473 = and i32 %944, %945, !dbg !326
  %946 = load i32, i32* %H, align 4, !dbg !326
  %947 = load i32, i32* %F, align 4, !dbg !326
  %948 = load i32, i32* %G, align 4, !dbg !326
  %xor1474 = xor i32 %947, %948, !dbg !326
  %and1475 = and i32 %946, %xor1474, !dbg !326
  %xor1476 = xor i32 %and1473, %and1475, !dbg !326
  %add1477 = add i32 %add1472, %xor1476, !dbg !326
  store i32 %add1477, i32* %E, align 4, !dbg !326
  call void @llvm.dbg.declare(metadata i32* %T11478, metadata !327, metadata !64), !dbg !329
  %949 = load i32, i32* %D, align 4, !dbg !329
  %950 = load i32, i32* %A, align 4, !dbg !329
  %shr1479 = lshr i32 %950, 6, !dbg !329
  %951 = load i32, i32* %A, align 4, !dbg !329
  %shl1480 = shl i32 %951, 26, !dbg !329
  %xor1481 = xor i32 %shr1479, %shl1480, !dbg !329
  %952 = load i32, i32* %A, align 4, !dbg !329
  %shr1482 = lshr i32 %952, 11, !dbg !329
  %953 = load i32, i32* %A, align 4, !dbg !329
  %shl1483 = shl i32 %953, 21, !dbg !329
  %xor1484 = xor i32 %shr1482, %shl1483, !dbg !329
  %xor1485 = xor i32 %xor1481, %xor1484, !dbg !329
  %954 = load i32, i32* %A, align 4, !dbg !329
  %shr1486 = lshr i32 %954, 25, !dbg !329
  %955 = load i32, i32* %A, align 4, !dbg !329
  %shl1487 = shl i32 %955, 7, !dbg !329
  %xor1488 = xor i32 %shr1486, %shl1487, !dbg !329
  %xor1489 = xor i32 %xor1485, %xor1488, !dbg !329
  %add1490 = add i32 %949, %xor1489, !dbg !329
  %956 = load i32, i32* %C, align 4, !dbg !329
  %957 = load i32, i32* %A, align 4, !dbg !329
  %958 = load i32, i32* %B, align 4, !dbg !329
  %959 = load i32, i32* %C, align 4, !dbg !329
  %xor1491 = xor i32 %958, %959, !dbg !329
  %and1492 = and i32 %957, %xor1491, !dbg !329
  %xor1493 = xor i32 %956, %and1492, !dbg !329
  %add1494 = add i32 %add1490, %xor1493, !dbg !329
  %960 = load i32*, i32** %k, align 8, !dbg !329
  %arrayidx1495 = getelementptr inbounds i32, i32* %960, i64 12, !dbg !329
  %961 = load i32, i32* %arrayidx1495, align 4, !dbg !329
  %add1496 = add i32 %add1494, %961, !dbg !329
  %arrayidx1497 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 10, !dbg !329
  %962 = load i32, i32* %arrayidx1497, align 8, !dbg !329
  %shr1498 = lshr i32 %962, 17, !dbg !329
  %arrayidx1499 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 10, !dbg !329
  %963 = load i32, i32* %arrayidx1499, align 8, !dbg !329
  %shl1500 = shl i32 %963, 15, !dbg !329
  %xor1501 = xor i32 %shr1498, %shl1500, !dbg !329
  %arrayidx1502 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 10, !dbg !329
  %964 = load i32, i32* %arrayidx1502, align 8, !dbg !329
  %shr1503 = lshr i32 %964, 19, !dbg !329
  %arrayidx1504 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 10, !dbg !329
  %965 = load i32, i32* %arrayidx1504, align 8, !dbg !329
  %shl1505 = shl i32 %965, 13, !dbg !329
  %xor1506 = xor i32 %shr1503, %shl1505, !dbg !329
  %xor1507 = xor i32 %xor1501, %xor1506, !dbg !329
  %arrayidx1508 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 10, !dbg !329
  %966 = load i32, i32* %arrayidx1508, align 8, !dbg !329
  %shr1509 = lshr i32 %966, 10, !dbg !329
  %xor1510 = xor i32 %xor1507, %shr1509, !dbg !329
  %arrayidx1511 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 5, !dbg !329
  %967 = load i32, i32* %arrayidx1511, align 4, !dbg !329
  %add1512 = add i32 %xor1510, %967, !dbg !329
  %arrayidx1513 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 13, !dbg !329
  %968 = load i32, i32* %arrayidx1513, align 4, !dbg !329
  %shr1514 = lshr i32 %968, 7, !dbg !329
  %arrayidx1515 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 13, !dbg !329
  %969 = load i32, i32* %arrayidx1515, align 4, !dbg !329
  %shl1516 = shl i32 %969, 25, !dbg !329
  %xor1517 = xor i32 %shr1514, %shl1516, !dbg !329
  %arrayidx1518 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 13, !dbg !329
  %970 = load i32, i32* %arrayidx1518, align 4, !dbg !329
  %shr1519 = lshr i32 %970, 18, !dbg !329
  %arrayidx1520 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 13, !dbg !329
  %971 = load i32, i32* %arrayidx1520, align 4, !dbg !329
  %shl1521 = shl i32 %971, 14, !dbg !329
  %xor1522 = xor i32 %shr1519, %shl1521, !dbg !329
  %xor1523 = xor i32 %xor1517, %xor1522, !dbg !329
  %arrayidx1524 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 13, !dbg !329
  %972 = load i32, i32* %arrayidx1524, align 4, !dbg !329
  %shr1525 = lshr i32 %972, 3, !dbg !329
  %xor1526 = xor i32 %xor1523, %shr1525, !dbg !329
  %add1527 = add i32 %add1512, %xor1526, !dbg !329
  %arrayidx1528 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 12, !dbg !329
  %973 = load i32, i32* %arrayidx1528, align 16, !dbg !329
  %add1529 = add i32 %973, %add1527, !dbg !329
  store i32 %add1529, i32* %arrayidx1528, align 16, !dbg !329
  %add1530 = add i32 %add1496, %add1529, !dbg !329
  store i32 %add1530, i32* %T11478, align 4, !dbg !329
  %974 = load i32, i32* %T11478, align 4, !dbg !329
  %975 = load i32, i32* %H, align 4, !dbg !329
  %add1531 = add i32 %975, %974, !dbg !329
  store i32 %add1531, i32* %H, align 4, !dbg !329
  %976 = load i32, i32* %T11478, align 4, !dbg !329
  %977 = load i32, i32* %E, align 4, !dbg !329
  %shr1532 = lshr i32 %977, 2, !dbg !329
  %978 = load i32, i32* %E, align 4, !dbg !329
  %shl1533 = shl i32 %978, 30, !dbg !329
  %xor1534 = xor i32 %shr1532, %shl1533, !dbg !329
  %979 = load i32, i32* %E, align 4, !dbg !329
  %shr1535 = lshr i32 %979, 13, !dbg !329
  %980 = load i32, i32* %E, align 4, !dbg !329
  %shl1536 = shl i32 %980, 19, !dbg !329
  %xor1537 = xor i32 %shr1535, %shl1536, !dbg !329
  %xor1538 = xor i32 %xor1534, %xor1537, !dbg !329
  %981 = load i32, i32* %E, align 4, !dbg !329
  %shr1539 = lshr i32 %981, 22, !dbg !329
  %982 = load i32, i32* %E, align 4, !dbg !329
  %shl1540 = shl i32 %982, 10, !dbg !329
  %xor1541 = xor i32 %shr1539, %shl1540, !dbg !329
  %xor1542 = xor i32 %xor1538, %xor1541, !dbg !329
  %add1543 = add i32 %976, %xor1542, !dbg !329
  %983 = load i32, i32* %E, align 4, !dbg !329
  %984 = load i32, i32* %F, align 4, !dbg !329
  %and1544 = and i32 %983, %984, !dbg !329
  %985 = load i32, i32* %G, align 4, !dbg !329
  %986 = load i32, i32* %E, align 4, !dbg !329
  %987 = load i32, i32* %F, align 4, !dbg !329
  %xor1545 = xor i32 %986, %987, !dbg !329
  %and1546 = and i32 %985, %xor1545, !dbg !329
  %xor1547 = xor i32 %and1544, %and1546, !dbg !329
  %add1548 = add i32 %add1543, %xor1547, !dbg !329
  store i32 %add1548, i32* %D, align 4, !dbg !329
  call void @llvm.dbg.declare(metadata i32* %T11549, metadata !330, metadata !64), !dbg !332
  %988 = load i32, i32* %C, align 4, !dbg !332
  %989 = load i32, i32* %H, align 4, !dbg !332
  %shr1550 = lshr i32 %989, 6, !dbg !332
  %990 = load i32, i32* %H, align 4, !dbg !332
  %shl1551 = shl i32 %990, 26, !dbg !332
  %xor1552 = xor i32 %shr1550, %shl1551, !dbg !332
  %991 = load i32, i32* %H, align 4, !dbg !332
  %shr1553 = lshr i32 %991, 11, !dbg !332
  %992 = load i32, i32* %H, align 4, !dbg !332
  %shl1554 = shl i32 %992, 21, !dbg !332
  %xor1555 = xor i32 %shr1553, %shl1554, !dbg !332
  %xor1556 = xor i32 %xor1552, %xor1555, !dbg !332
  %993 = load i32, i32* %H, align 4, !dbg !332
  %shr1557 = lshr i32 %993, 25, !dbg !332
  %994 = load i32, i32* %H, align 4, !dbg !332
  %shl1558 = shl i32 %994, 7, !dbg !332
  %xor1559 = xor i32 %shr1557, %shl1558, !dbg !332
  %xor1560 = xor i32 %xor1556, %xor1559, !dbg !332
  %add1561 = add i32 %988, %xor1560, !dbg !332
  %995 = load i32, i32* %B, align 4, !dbg !332
  %996 = load i32, i32* %H, align 4, !dbg !332
  %997 = load i32, i32* %A, align 4, !dbg !332
  %998 = load i32, i32* %B, align 4, !dbg !332
  %xor1562 = xor i32 %997, %998, !dbg !332
  %and1563 = and i32 %996, %xor1562, !dbg !332
  %xor1564 = xor i32 %995, %and1563, !dbg !332
  %add1565 = add i32 %add1561, %xor1564, !dbg !332
  %999 = load i32*, i32** %k, align 8, !dbg !332
  %arrayidx1566 = getelementptr inbounds i32, i32* %999, i64 13, !dbg !332
  %1000 = load i32, i32* %arrayidx1566, align 4, !dbg !332
  %add1567 = add i32 %add1565, %1000, !dbg !332
  %arrayidx1568 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 11, !dbg !332
  %1001 = load i32, i32* %arrayidx1568, align 4, !dbg !332
  %shr1569 = lshr i32 %1001, 17, !dbg !332
  %arrayidx1570 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 11, !dbg !332
  %1002 = load i32, i32* %arrayidx1570, align 4, !dbg !332
  %shl1571 = shl i32 %1002, 15, !dbg !332
  %xor1572 = xor i32 %shr1569, %shl1571, !dbg !332
  %arrayidx1573 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 11, !dbg !332
  %1003 = load i32, i32* %arrayidx1573, align 4, !dbg !332
  %shr1574 = lshr i32 %1003, 19, !dbg !332
  %arrayidx1575 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 11, !dbg !332
  %1004 = load i32, i32* %arrayidx1575, align 4, !dbg !332
  %shl1576 = shl i32 %1004, 13, !dbg !332
  %xor1577 = xor i32 %shr1574, %shl1576, !dbg !332
  %xor1578 = xor i32 %xor1572, %xor1577, !dbg !332
  %arrayidx1579 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 11, !dbg !332
  %1005 = load i32, i32* %arrayidx1579, align 4, !dbg !332
  %shr1580 = lshr i32 %1005, 10, !dbg !332
  %xor1581 = xor i32 %xor1578, %shr1580, !dbg !332
  %arrayidx1582 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 6, !dbg !332
  %1006 = load i32, i32* %arrayidx1582, align 8, !dbg !332
  %add1583 = add i32 %xor1581, %1006, !dbg !332
  %arrayidx1584 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 14, !dbg !332
  %1007 = load i32, i32* %arrayidx1584, align 8, !dbg !332
  %shr1585 = lshr i32 %1007, 7, !dbg !332
  %arrayidx1586 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 14, !dbg !332
  %1008 = load i32, i32* %arrayidx1586, align 8, !dbg !332
  %shl1587 = shl i32 %1008, 25, !dbg !332
  %xor1588 = xor i32 %shr1585, %shl1587, !dbg !332
  %arrayidx1589 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 14, !dbg !332
  %1009 = load i32, i32* %arrayidx1589, align 8, !dbg !332
  %shr1590 = lshr i32 %1009, 18, !dbg !332
  %arrayidx1591 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 14, !dbg !332
  %1010 = load i32, i32* %arrayidx1591, align 8, !dbg !332
  %shl1592 = shl i32 %1010, 14, !dbg !332
  %xor1593 = xor i32 %shr1590, %shl1592, !dbg !332
  %xor1594 = xor i32 %xor1588, %xor1593, !dbg !332
  %arrayidx1595 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 14, !dbg !332
  %1011 = load i32, i32* %arrayidx1595, align 8, !dbg !332
  %shr1596 = lshr i32 %1011, 3, !dbg !332
  %xor1597 = xor i32 %xor1594, %shr1596, !dbg !332
  %add1598 = add i32 %add1583, %xor1597, !dbg !332
  %arrayidx1599 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 13, !dbg !332
  %1012 = load i32, i32* %arrayidx1599, align 4, !dbg !332
  %add1600 = add i32 %1012, %add1598, !dbg !332
  store i32 %add1600, i32* %arrayidx1599, align 4, !dbg !332
  %add1601 = add i32 %add1567, %add1600, !dbg !332
  store i32 %add1601, i32* %T11549, align 4, !dbg !332
  %1013 = load i32, i32* %T11549, align 4, !dbg !332
  %1014 = load i32, i32* %G, align 4, !dbg !332
  %add1602 = add i32 %1014, %1013, !dbg !332
  store i32 %add1602, i32* %G, align 4, !dbg !332
  %1015 = load i32, i32* %T11549, align 4, !dbg !332
  %1016 = load i32, i32* %D, align 4, !dbg !332
  %shr1603 = lshr i32 %1016, 2, !dbg !332
  %1017 = load i32, i32* %D, align 4, !dbg !332
  %shl1604 = shl i32 %1017, 30, !dbg !332
  %xor1605 = xor i32 %shr1603, %shl1604, !dbg !332
  %1018 = load i32, i32* %D, align 4, !dbg !332
  %shr1606 = lshr i32 %1018, 13, !dbg !332
  %1019 = load i32, i32* %D, align 4, !dbg !332
  %shl1607 = shl i32 %1019, 19, !dbg !332
  %xor1608 = xor i32 %shr1606, %shl1607, !dbg !332
  %xor1609 = xor i32 %xor1605, %xor1608, !dbg !332
  %1020 = load i32, i32* %D, align 4, !dbg !332
  %shr1610 = lshr i32 %1020, 22, !dbg !332
  %1021 = load i32, i32* %D, align 4, !dbg !332
  %shl1611 = shl i32 %1021, 10, !dbg !332
  %xor1612 = xor i32 %shr1610, %shl1611, !dbg !332
  %xor1613 = xor i32 %xor1609, %xor1612, !dbg !332
  %add1614 = add i32 %1015, %xor1613, !dbg !332
  %1022 = load i32, i32* %D, align 4, !dbg !332
  %1023 = load i32, i32* %E, align 4, !dbg !332
  %and1615 = and i32 %1022, %1023, !dbg !332
  %1024 = load i32, i32* %F, align 4, !dbg !332
  %1025 = load i32, i32* %D, align 4, !dbg !332
  %1026 = load i32, i32* %E, align 4, !dbg !332
  %xor1616 = xor i32 %1025, %1026, !dbg !332
  %and1617 = and i32 %1024, %xor1616, !dbg !332
  %xor1618 = xor i32 %and1615, %and1617, !dbg !332
  %add1619 = add i32 %add1614, %xor1618, !dbg !332
  store i32 %add1619, i32* %C, align 4, !dbg !332
  call void @llvm.dbg.declare(metadata i32* %T11620, metadata !333, metadata !64), !dbg !335
  %1027 = load i32, i32* %B, align 4, !dbg !335
  %1028 = load i32, i32* %G, align 4, !dbg !335
  %shr1621 = lshr i32 %1028, 6, !dbg !335
  %1029 = load i32, i32* %G, align 4, !dbg !335
  %shl1622 = shl i32 %1029, 26, !dbg !335
  %xor1623 = xor i32 %shr1621, %shl1622, !dbg !335
  %1030 = load i32, i32* %G, align 4, !dbg !335
  %shr1624 = lshr i32 %1030, 11, !dbg !335
  %1031 = load i32, i32* %G, align 4, !dbg !335
  %shl1625 = shl i32 %1031, 21, !dbg !335
  %xor1626 = xor i32 %shr1624, %shl1625, !dbg !335
  %xor1627 = xor i32 %xor1623, %xor1626, !dbg !335
  %1032 = load i32, i32* %G, align 4, !dbg !335
  %shr1628 = lshr i32 %1032, 25, !dbg !335
  %1033 = load i32, i32* %G, align 4, !dbg !335
  %shl1629 = shl i32 %1033, 7, !dbg !335
  %xor1630 = xor i32 %shr1628, %shl1629, !dbg !335
  %xor1631 = xor i32 %xor1627, %xor1630, !dbg !335
  %add1632 = add i32 %1027, %xor1631, !dbg !335
  %1034 = load i32, i32* %A, align 4, !dbg !335
  %1035 = load i32, i32* %G, align 4, !dbg !335
  %1036 = load i32, i32* %H, align 4, !dbg !335
  %1037 = load i32, i32* %A, align 4, !dbg !335
  %xor1633 = xor i32 %1036, %1037, !dbg !335
  %and1634 = and i32 %1035, %xor1633, !dbg !335
  %xor1635 = xor i32 %1034, %and1634, !dbg !335
  %add1636 = add i32 %add1632, %xor1635, !dbg !335
  %1038 = load i32*, i32** %k, align 8, !dbg !335
  %arrayidx1637 = getelementptr inbounds i32, i32* %1038, i64 14, !dbg !335
  %1039 = load i32, i32* %arrayidx1637, align 4, !dbg !335
  %add1638 = add i32 %add1636, %1039, !dbg !335
  %arrayidx1639 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 12, !dbg !335
  %1040 = load i32, i32* %arrayidx1639, align 16, !dbg !335
  %shr1640 = lshr i32 %1040, 17, !dbg !335
  %arrayidx1641 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 12, !dbg !335
  %1041 = load i32, i32* %arrayidx1641, align 16, !dbg !335
  %shl1642 = shl i32 %1041, 15, !dbg !335
  %xor1643 = xor i32 %shr1640, %shl1642, !dbg !335
  %arrayidx1644 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 12, !dbg !335
  %1042 = load i32, i32* %arrayidx1644, align 16, !dbg !335
  %shr1645 = lshr i32 %1042, 19, !dbg !335
  %arrayidx1646 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 12, !dbg !335
  %1043 = load i32, i32* %arrayidx1646, align 16, !dbg !335
  %shl1647 = shl i32 %1043, 13, !dbg !335
  %xor1648 = xor i32 %shr1645, %shl1647, !dbg !335
  %xor1649 = xor i32 %xor1643, %xor1648, !dbg !335
  %arrayidx1650 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 12, !dbg !335
  %1044 = load i32, i32* %arrayidx1650, align 16, !dbg !335
  %shr1651 = lshr i32 %1044, 10, !dbg !335
  %xor1652 = xor i32 %xor1649, %shr1651, !dbg !335
  %arrayidx1653 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 7, !dbg !335
  %1045 = load i32, i32* %arrayidx1653, align 4, !dbg !335
  %add1654 = add i32 %xor1652, %1045, !dbg !335
  %arrayidx1655 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 15, !dbg !335
  %1046 = load i32, i32* %arrayidx1655, align 4, !dbg !335
  %shr1656 = lshr i32 %1046, 7, !dbg !335
  %arrayidx1657 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 15, !dbg !335
  %1047 = load i32, i32* %arrayidx1657, align 4, !dbg !335
  %shl1658 = shl i32 %1047, 25, !dbg !335
  %xor1659 = xor i32 %shr1656, %shl1658, !dbg !335
  %arrayidx1660 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 15, !dbg !335
  %1048 = load i32, i32* %arrayidx1660, align 4, !dbg !335
  %shr1661 = lshr i32 %1048, 18, !dbg !335
  %arrayidx1662 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 15, !dbg !335
  %1049 = load i32, i32* %arrayidx1662, align 4, !dbg !335
  %shl1663 = shl i32 %1049, 14, !dbg !335
  %xor1664 = xor i32 %shr1661, %shl1663, !dbg !335
  %xor1665 = xor i32 %xor1659, %xor1664, !dbg !335
  %arrayidx1666 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 15, !dbg !335
  %1050 = load i32, i32* %arrayidx1666, align 4, !dbg !335
  %shr1667 = lshr i32 %1050, 3, !dbg !335
  %xor1668 = xor i32 %xor1665, %shr1667, !dbg !335
  %add1669 = add i32 %add1654, %xor1668, !dbg !335
  %arrayidx1670 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 14, !dbg !335
  %1051 = load i32, i32* %arrayidx1670, align 8, !dbg !335
  %add1671 = add i32 %1051, %add1669, !dbg !335
  store i32 %add1671, i32* %arrayidx1670, align 8, !dbg !335
  %add1672 = add i32 %add1638, %add1671, !dbg !335
  store i32 %add1672, i32* %T11620, align 4, !dbg !335
  %1052 = load i32, i32* %T11620, align 4, !dbg !335
  %1053 = load i32, i32* %F, align 4, !dbg !335
  %add1673 = add i32 %1053, %1052, !dbg !335
  store i32 %add1673, i32* %F, align 4, !dbg !335
  %1054 = load i32, i32* %T11620, align 4, !dbg !335
  %1055 = load i32, i32* %C, align 4, !dbg !335
  %shr1674 = lshr i32 %1055, 2, !dbg !335
  %1056 = load i32, i32* %C, align 4, !dbg !335
  %shl1675 = shl i32 %1056, 30, !dbg !335
  %xor1676 = xor i32 %shr1674, %shl1675, !dbg !335
  %1057 = load i32, i32* %C, align 4, !dbg !335
  %shr1677 = lshr i32 %1057, 13, !dbg !335
  %1058 = load i32, i32* %C, align 4, !dbg !335
  %shl1678 = shl i32 %1058, 19, !dbg !335
  %xor1679 = xor i32 %shr1677, %shl1678, !dbg !335
  %xor1680 = xor i32 %xor1676, %xor1679, !dbg !335
  %1059 = load i32, i32* %C, align 4, !dbg !335
  %shr1681 = lshr i32 %1059, 22, !dbg !335
  %1060 = load i32, i32* %C, align 4, !dbg !335
  %shl1682 = shl i32 %1060, 10, !dbg !335
  %xor1683 = xor i32 %shr1681, %shl1682, !dbg !335
  %xor1684 = xor i32 %xor1680, %xor1683, !dbg !335
  %add1685 = add i32 %1054, %xor1684, !dbg !335
  %1061 = load i32, i32* %C, align 4, !dbg !335
  %1062 = load i32, i32* %D, align 4, !dbg !335
  %and1686 = and i32 %1061, %1062, !dbg !335
  %1063 = load i32, i32* %E, align 4, !dbg !335
  %1064 = load i32, i32* %C, align 4, !dbg !335
  %1065 = load i32, i32* %D, align 4, !dbg !335
  %xor1687 = xor i32 %1064, %1065, !dbg !335
  %and1688 = and i32 %1063, %xor1687, !dbg !335
  %xor1689 = xor i32 %and1686, %and1688, !dbg !335
  %add1690 = add i32 %add1685, %xor1689, !dbg !335
  store i32 %add1690, i32* %B, align 4, !dbg !335
  call void @llvm.dbg.declare(metadata i32* %T11691, metadata !336, metadata !64), !dbg !338
  %1066 = load i32, i32* %A, align 4, !dbg !338
  %1067 = load i32, i32* %F, align 4, !dbg !338
  %shr1692 = lshr i32 %1067, 6, !dbg !338
  %1068 = load i32, i32* %F, align 4, !dbg !338
  %shl1693 = shl i32 %1068, 26, !dbg !338
  %xor1694 = xor i32 %shr1692, %shl1693, !dbg !338
  %1069 = load i32, i32* %F, align 4, !dbg !338
  %shr1695 = lshr i32 %1069, 11, !dbg !338
  %1070 = load i32, i32* %F, align 4, !dbg !338
  %shl1696 = shl i32 %1070, 21, !dbg !338
  %xor1697 = xor i32 %shr1695, %shl1696, !dbg !338
  %xor1698 = xor i32 %xor1694, %xor1697, !dbg !338
  %1071 = load i32, i32* %F, align 4, !dbg !338
  %shr1699 = lshr i32 %1071, 25, !dbg !338
  %1072 = load i32, i32* %F, align 4, !dbg !338
  %shl1700 = shl i32 %1072, 7, !dbg !338
  %xor1701 = xor i32 %shr1699, %shl1700, !dbg !338
  %xor1702 = xor i32 %xor1698, %xor1701, !dbg !338
  %add1703 = add i32 %1066, %xor1702, !dbg !338
  %1073 = load i32, i32* %H, align 4, !dbg !338
  %1074 = load i32, i32* %F, align 4, !dbg !338
  %1075 = load i32, i32* %G, align 4, !dbg !338
  %1076 = load i32, i32* %H, align 4, !dbg !338
  %xor1704 = xor i32 %1075, %1076, !dbg !338
  %and1705 = and i32 %1074, %xor1704, !dbg !338
  %xor1706 = xor i32 %1073, %and1705, !dbg !338
  %add1707 = add i32 %add1703, %xor1706, !dbg !338
  %1077 = load i32*, i32** %k, align 8, !dbg !338
  %arrayidx1708 = getelementptr inbounds i32, i32* %1077, i64 15, !dbg !338
  %1078 = load i32, i32* %arrayidx1708, align 4, !dbg !338
  %add1709 = add i32 %add1707, %1078, !dbg !338
  %arrayidx1710 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 13, !dbg !338
  %1079 = load i32, i32* %arrayidx1710, align 4, !dbg !338
  %shr1711 = lshr i32 %1079, 17, !dbg !338
  %arrayidx1712 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 13, !dbg !338
  %1080 = load i32, i32* %arrayidx1712, align 4, !dbg !338
  %shl1713 = shl i32 %1080, 15, !dbg !338
  %xor1714 = xor i32 %shr1711, %shl1713, !dbg !338
  %arrayidx1715 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 13, !dbg !338
  %1081 = load i32, i32* %arrayidx1715, align 4, !dbg !338
  %shr1716 = lshr i32 %1081, 19, !dbg !338
  %arrayidx1717 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 13, !dbg !338
  %1082 = load i32, i32* %arrayidx1717, align 4, !dbg !338
  %shl1718 = shl i32 %1082, 13, !dbg !338
  %xor1719 = xor i32 %shr1716, %shl1718, !dbg !338
  %xor1720 = xor i32 %xor1714, %xor1719, !dbg !338
  %arrayidx1721 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 13, !dbg !338
  %1083 = load i32, i32* %arrayidx1721, align 4, !dbg !338
  %shr1722 = lshr i32 %1083, 10, !dbg !338
  %xor1723 = xor i32 %xor1720, %shr1722, !dbg !338
  %arrayidx1724 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 8, !dbg !338
  %1084 = load i32, i32* %arrayidx1724, align 16, !dbg !338
  %add1725 = add i32 %xor1723, %1084, !dbg !338
  %arrayidx1726 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 0, !dbg !338
  %1085 = load i32, i32* %arrayidx1726, align 16, !dbg !338
  %shr1727 = lshr i32 %1085, 7, !dbg !338
  %arrayidx1728 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 0, !dbg !338
  %1086 = load i32, i32* %arrayidx1728, align 16, !dbg !338
  %shl1729 = shl i32 %1086, 25, !dbg !338
  %xor1730 = xor i32 %shr1727, %shl1729, !dbg !338
  %arrayidx1731 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 0, !dbg !338
  %1087 = load i32, i32* %arrayidx1731, align 16, !dbg !338
  %shr1732 = lshr i32 %1087, 18, !dbg !338
  %arrayidx1733 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 0, !dbg !338
  %1088 = load i32, i32* %arrayidx1733, align 16, !dbg !338
  %shl1734 = shl i32 %1088, 14, !dbg !338
  %xor1735 = xor i32 %shr1732, %shl1734, !dbg !338
  %xor1736 = xor i32 %xor1730, %xor1735, !dbg !338
  %arrayidx1737 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 0, !dbg !338
  %1089 = load i32, i32* %arrayidx1737, align 16, !dbg !338
  %shr1738 = lshr i32 %1089, 3, !dbg !338
  %xor1739 = xor i32 %xor1736, %shr1738, !dbg !338
  %add1740 = add i32 %add1725, %xor1739, !dbg !338
  %arrayidx1741 = getelementptr inbounds [16 x i32], [16 x i32]* %W, i64 0, i64 15, !dbg !338
  %1090 = load i32, i32* %arrayidx1741, align 4, !dbg !338
  %add1742 = add i32 %1090, %add1740, !dbg !338
  store i32 %add1742, i32* %arrayidx1741, align 4, !dbg !338
  %add1743 = add i32 %add1709, %add1742, !dbg !338
  store i32 %add1743, i32* %T11691, align 4, !dbg !338
  %1091 = load i32, i32* %T11691, align 4, !dbg !338
  %1092 = load i32, i32* %E, align 4, !dbg !338
  %add1744 = add i32 %1092, %1091, !dbg !338
  store i32 %add1744, i32* %E, align 4, !dbg !338
  %1093 = load i32, i32* %T11691, align 4, !dbg !338
  %1094 = load i32, i32* %B, align 4, !dbg !338
  %shr1745 = lshr i32 %1094, 2, !dbg !338
  %1095 = load i32, i32* %B, align 4, !dbg !338
  %shl1746 = shl i32 %1095, 30, !dbg !338
  %xor1747 = xor i32 %shr1745, %shl1746, !dbg !338
  %1096 = load i32, i32* %B, align 4, !dbg !338
  %shr1748 = lshr i32 %1096, 13, !dbg !338
  %1097 = load i32, i32* %B, align 4, !dbg !338
  %shl1749 = shl i32 %1097, 19, !dbg !338
  %xor1750 = xor i32 %shr1748, %shl1749, !dbg !338
  %xor1751 = xor i32 %xor1747, %xor1750, !dbg !338
  %1098 = load i32, i32* %B, align 4, !dbg !338
  %shr1752 = lshr i32 %1098, 22, !dbg !338
  %1099 = load i32, i32* %B, align 4, !dbg !338
  %shl1753 = shl i32 %1099, 10, !dbg !338
  %xor1754 = xor i32 %shr1752, %shl1753, !dbg !338
  %xor1755 = xor i32 %xor1751, %xor1754, !dbg !338
  %add1756 = add i32 %1093, %xor1755, !dbg !338
  %1100 = load i32, i32* %B, align 4, !dbg !338
  %1101 = load i32, i32* %C, align 4, !dbg !338
  %and1757 = and i32 %1100, %1101, !dbg !338
  %1102 = load i32, i32* %D, align 4, !dbg !338
  %1103 = load i32, i32* %B, align 4, !dbg !338
  %1104 = load i32, i32* %C, align 4, !dbg !338
  %xor1758 = xor i32 %1103, %1104, !dbg !338
  %and1759 = and i32 %1102, %xor1758, !dbg !338
  %xor1760 = xor i32 %and1757, %and1759, !dbg !338
  %add1761 = add i32 %add1756, %xor1760, !dbg !338
  store i32 %add1761, i32* %A, align 4, !dbg !338
  br label %for.inc, !dbg !339

for.inc:                                          ; preds = %for.body
  %1105 = load i32, i32* %i, align 4, !dbg !340
  %add1762 = add nsw i32 %1105, 16, !dbg !340
  store i32 %add1762, i32* %i, align 4, !dbg !340
  %1106 = load i32*, i32** %k, align 8, !dbg !342
  %add.ptr = getelementptr inbounds i32, i32* %1106, i64 16, !dbg !342
  store i32* %add.ptr, i32** %k, align 8, !dbg !342
  br label %for.cond, !dbg !343

for.end:                                          ; preds = %for.cond
  %1107 = load i32, i32* %A, align 4, !dbg !344
  %1108 = load i32*, i32** %hash.addr, align 8, !dbg !345
  %arrayidx1763 = getelementptr inbounds i32, i32* %1108, i64 0, !dbg !345
  %1109 = load i32, i32* %arrayidx1763, align 4, !dbg !346
  %add1764 = add i32 %1109, %1107, !dbg !346
  store i32 %add1764, i32* %arrayidx1763, align 4, !dbg !346
  %1110 = load i32, i32* %B, align 4, !dbg !347
  %1111 = load i32*, i32** %hash.addr, align 8, !dbg !348
  %arrayidx1765 = getelementptr inbounds i32, i32* %1111, i64 1, !dbg !348
  %1112 = load i32, i32* %arrayidx1765, align 4, !dbg !349
  %add1766 = add i32 %1112, %1110, !dbg !349
  store i32 %add1766, i32* %arrayidx1765, align 4, !dbg !349
  %1113 = load i32, i32* %C, align 4, !dbg !350
  %1114 = load i32*, i32** %hash.addr, align 8, !dbg !351
  %arrayidx1767 = getelementptr inbounds i32, i32* %1114, i64 2, !dbg !351
  %1115 = load i32, i32* %arrayidx1767, align 4, !dbg !352
  %add1768 = add i32 %1115, %1113, !dbg !352
  store i32 %add1768, i32* %arrayidx1767, align 4, !dbg !352
  %1116 = load i32, i32* %D, align 4, !dbg !353
  %1117 = load i32*, i32** %hash.addr, align 8, !dbg !354
  %arrayidx1769 = getelementptr inbounds i32, i32* %1117, i64 3, !dbg !354
  %1118 = load i32, i32* %arrayidx1769, align 4, !dbg !355
  %add1770 = add i32 %1118, %1116, !dbg !355
  store i32 %add1770, i32* %arrayidx1769, align 4, !dbg !355
  %1119 = load i32, i32* %E, align 4, !dbg !356
  %1120 = load i32*, i32** %hash.addr, align 8, !dbg !357
  %arrayidx1771 = getelementptr inbounds i32, i32* %1120, i64 4, !dbg !357
  %1121 = load i32, i32* %arrayidx1771, align 4, !dbg !358
  %add1772 = add i32 %1121, %1119, !dbg !358
  store i32 %add1772, i32* %arrayidx1771, align 4, !dbg !358
  %1122 = load i32, i32* %F, align 4, !dbg !359
  %1123 = load i32*, i32** %hash.addr, align 8, !dbg !360
  %arrayidx1773 = getelementptr inbounds i32, i32* %1123, i64 5, !dbg !360
  %1124 = load i32, i32* %arrayidx1773, align 4, !dbg !361
  %add1774 = add i32 %1124, %1122, !dbg !361
  store i32 %add1774, i32* %arrayidx1773, align 4, !dbg !361
  %1125 = load i32, i32* %G, align 4, !dbg !362
  %1126 = load i32*, i32** %hash.addr, align 8, !dbg !363
  %arrayidx1775 = getelementptr inbounds i32, i32* %1126, i64 6, !dbg !363
  %1127 = load i32, i32* %arrayidx1775, align 4, !dbg !364
  %add1776 = add i32 %1127, %1125, !dbg !364
  store i32 %add1776, i32* %arrayidx1775, align 4, !dbg !364
  %1128 = load i32, i32* %H, align 4, !dbg !365
  %1129 = load i32*, i32** %hash.addr, align 8, !dbg !366
  %arrayidx1777 = getelementptr inbounds i32, i32* %1129, i64 7, !dbg !366
  %1130 = load i32, i32* %arrayidx1777, align 4, !dbg !367
  %add1778 = add i32 %1130, %1128, !dbg !367
  store i32 %add1778, i32* %arrayidx1777, align 4, !dbg !367
  ret void, !dbg !368
}

; Function Attrs: nounwind uwtable
define void @rhash_sha256_final(%struct.sha256_ctx* %ctx, i8* %result) #0 !dbg !44 {
entry:
  %ctx.addr = alloca %struct.sha256_ctx*, align 8
  %result.addr = alloca i8*, align 8
  %index = alloca i64, align 8
  %shift = alloca i32, align 4
  store %struct.sha256_ctx* %ctx, %struct.sha256_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sha256_ctx** %ctx.addr, metadata !369, metadata !64), !dbg !370
  store i8* %result, i8** %result.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %result.addr, metadata !371, metadata !64), !dbg !372
  call void @llvm.dbg.declare(metadata i64* %index, metadata !373, metadata !64), !dbg !374
  %0 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !375
  %length = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %0, i32 0, i32 1, !dbg !376
  %1 = load i64, i64* %length, align 8, !dbg !376
  %conv = trunc i64 %1 to i32, !dbg !377
  %and = and i32 %conv, 63, !dbg !378
  %shr = lshr i32 %and, 2, !dbg !379
  %conv1 = zext i32 %shr to i64, !dbg !380
  store i64 %conv1, i64* %index, align 8, !dbg !374
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !381, metadata !64), !dbg !382
  %2 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !383
  %length2 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %2, i32 0, i32 1, !dbg !384
  %3 = load i64, i64* %length2, align 8, !dbg !384
  %conv3 = trunc i64 %3 to i32, !dbg !385
  %and4 = and i32 %conv3, 3, !dbg !386
  %mul = mul i32 %and4, 8, !dbg !387
  store i32 %mul, i32* %shift, align 4, !dbg !382
  %4 = load i32, i32* %shift, align 4, !dbg !388
  %shl = shl i32 -1, %4, !dbg !388
  %neg = xor i32 %shl, -1, !dbg !388
  %5 = load i64, i64* %index, align 8, !dbg !389
  %6 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !390
  %message = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %6, i32 0, i32 0, !dbg !391
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32]* %message, i64 0, i64 %5, !dbg !390
  %7 = load i32, i32* %arrayidx, align 4, !dbg !392
  %and5 = and i32 %7, %neg, !dbg !392
  store i32 %and5, i32* %arrayidx, align 4, !dbg !392
  %8 = load i32, i32* %shift, align 4, !dbg !393
  %shl6 = shl i32 128, %8, !dbg !393
  %9 = load i64, i64* %index, align 8, !dbg !394
  %inc = add i64 %9, 1, !dbg !394
  store i64 %inc, i64* %index, align 8, !dbg !394
  %10 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !395
  %message7 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %10, i32 0, i32 0, !dbg !396
  %arrayidx8 = getelementptr inbounds [16 x i32], [16 x i32]* %message7, i64 0, i64 %9, !dbg !395
  %11 = load i32, i32* %arrayidx8, align 4, !dbg !397
  %xor = xor i32 %11, %shl6, !dbg !397
  store i32 %xor, i32* %arrayidx8, align 4, !dbg !397
  %12 = load i64, i64* %index, align 8, !dbg !398
  %cmp = icmp ugt i64 %12, 14, !dbg !400
  br i1 %cmp, label %if.then, label %if.end, !dbg !401

if.then:                                          ; preds = %entry
  br label %while.cond, !dbg !402

while.cond:                                       ; preds = %while.body, %if.then
  %13 = load i64, i64* %index, align 8, !dbg !404
  %cmp10 = icmp ult i64 %13, 16, !dbg !406
  br i1 %cmp10, label %while.body, label %while.end, !dbg !407

while.body:                                       ; preds = %while.cond
  %14 = load i64, i64* %index, align 8, !dbg !408
  %inc12 = add i64 %14, 1, !dbg !408
  store i64 %inc12, i64* %index, align 8, !dbg !408
  %15 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !410
  %message13 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %15, i32 0, i32 0, !dbg !411
  %arrayidx14 = getelementptr inbounds [16 x i32], [16 x i32]* %message13, i64 0, i64 %14, !dbg !410
  store i32 0, i32* %arrayidx14, align 4, !dbg !412
  br label %while.cond, !dbg !413

while.end:                                        ; preds = %while.cond
  %16 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !415
  %hash = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %16, i32 0, i32 2, !dbg !416
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %hash, i32 0, i32 0, !dbg !415
  %17 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !417
  %message15 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %17, i32 0, i32 0, !dbg !418
  %arraydecay16 = getelementptr inbounds [16 x i32], [16 x i32]* %message15, i32 0, i32 0, !dbg !417
  call void @rhash_sha256_process_block(i32* %arraydecay, i32* %arraydecay16), !dbg !419
  store i64 0, i64* %index, align 8, !dbg !420
  br label %if.end, !dbg !421

if.end:                                           ; preds = %while.end, %entry
  br label %while.cond17, !dbg !422

while.cond17:                                     ; preds = %while.body20, %if.end
  %18 = load i64, i64* %index, align 8, !dbg !423
  %cmp18 = icmp ult i64 %18, 14, !dbg !425
  br i1 %cmp18, label %while.body20, label %while.end24, !dbg !426

while.body20:                                     ; preds = %while.cond17
  %19 = load i64, i64* %index, align 8, !dbg !427
  %inc21 = add i64 %19, 1, !dbg !427
  store i64 %inc21, i64* %index, align 8, !dbg !427
  %20 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !429
  %message22 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %20, i32 0, i32 0, !dbg !430
  %arrayidx23 = getelementptr inbounds [16 x i32], [16 x i32]* %message22, i64 0, i64 %19, !dbg !429
  store i32 0, i32* %arrayidx23, align 4, !dbg !431
  br label %while.cond17, !dbg !432

while.end24:                                      ; preds = %while.cond17
  %21 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !434
  %length25 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %21, i32 0, i32 1, !dbg !434
  %22 = load i64, i64* %length25, align 8, !dbg !434
  %shr26 = lshr i64 %22, 29, !dbg !434
  %conv27 = trunc i64 %shr26 to i32, !dbg !434
  %23 = call i32 @llvm.bswap.i32(i32 %conv27), !dbg !434
  %24 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !435
  %message28 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %24, i32 0, i32 0, !dbg !436
  %arrayidx29 = getelementptr inbounds [16 x i32], [16 x i32]* %message28, i64 0, i64 14, !dbg !435
  store i32 %23, i32* %arrayidx29, align 8, !dbg !437
  %25 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !438
  %length30 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %25, i32 0, i32 1, !dbg !438
  %26 = load i64, i64* %length30, align 8, !dbg !438
  %shl31 = shl i64 %26, 3, !dbg !438
  %conv32 = trunc i64 %shl31 to i32, !dbg !438
  %27 = call i32 @llvm.bswap.i32(i32 %conv32), !dbg !438
  %28 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !439
  %message33 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %28, i32 0, i32 0, !dbg !440
  %arrayidx34 = getelementptr inbounds [16 x i32], [16 x i32]* %message33, i64 0, i64 15, !dbg !439
  store i32 %27, i32* %arrayidx34, align 4, !dbg !441
  %29 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !442
  %hash35 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %29, i32 0, i32 2, !dbg !443
  %arraydecay36 = getelementptr inbounds [8 x i32], [8 x i32]* %hash35, i32 0, i32 0, !dbg !442
  %30 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !444
  %message37 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %30, i32 0, i32 0, !dbg !445
  %arraydecay38 = getelementptr inbounds [16 x i32], [16 x i32]* %message37, i32 0, i32 0, !dbg !444
  call void @rhash_sha256_process_block(i32* %arraydecay36, i32* %arraydecay38), !dbg !446
  %31 = load i8*, i8** %result.addr, align 8, !dbg !447
  %tobool = icmp ne i8* %31, null, !dbg !447
  br i1 %tobool, label %if.then39, label %if.end43, !dbg !449

if.then39:                                        ; preds = %while.end24
  %32 = load i8*, i8** %result.addr, align 8, !dbg !450
  %33 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !450
  %hash40 = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %33, i32 0, i32 2, !dbg !450
  %arraydecay41 = getelementptr inbounds [8 x i32], [8 x i32]* %hash40, i32 0, i32 0, !dbg !450
  %34 = bitcast i32* %arraydecay41 to i8*, !dbg !450
  %35 = load %struct.sha256_ctx*, %struct.sha256_ctx** %ctx.addr, align 8, !dbg !450
  %digest_length = getelementptr inbounds %struct.sha256_ctx, %struct.sha256_ctx* %35, i32 0, i32 3, !dbg !450
  %36 = load i32, i32* %digest_length, align 8, !dbg !450
  %conv42 = zext i32 %36 to i64, !dbg !450
  call void @rhash_swap_copy_str_to_u32(i8* %32, i32 0, i8* %34, i64 %conv42), !dbg !450
  br label %if.end43, !dbg !450

if.end43:                                         ; preds = %if.then39, %while.end24
  ret void, !dbg !452
}

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

declare void @rhash_swap_copy_str_to_u32(i8*, i32, i8*, i64) #3

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!60, !61}
!llvm.ident = !{!62}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.8.0 (tags/RELEASE_380/final)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !13, globals: !51)
!1 = !DIFile(filename: "/data/download/cmake/cmake-master/Utilities/cmlibrhash/librhash/sha256.c", directory: "/data/download/cmake/cmake-master/Utilities/cmlibrhash")
!2 = !{}
!3 = !{!4, !7, !9, !11, !10}
!4 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !5, line: 62, baseType: !6)
!5 = !DIFile(filename: "/opt/llvm-build/bin/../lib/clang/3.8.0/include/stddef.h", directory: "/data/download/cmake/cmake-master/Utilities/cmlibrhash")
!6 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!8 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, align: 64)
!12 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8)
!13 = !{!14, !34, !38, !44, !48}
!14 = distinct !DISubprogram(name: "rhash_sha256_init", scope: !1, file: !1, line: 68, type: !15, isLocal: false, isDefinition: true, scopeLine: 69, flags: DIFlagPrototyped, isOptimized: false, variables: !2)
!15 = !DISubroutineType(types: !16)
!16 = !{null, !17}
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18, size: 64, align: 64)
!18 = !DIDerivedType(tag: DW_TAG_typedef, name: "sha256_ctx", file: !19, line: 21, baseType: !20)
!19 = !DIFile(filename: "/data/download/cmake/cmake-master/Utilities/cmlibrhash/librhash/sha256.h", directory: "/data/download/cmake/cmake-master/Utilities/cmlibrhash")
!20 = !DICompositeType(tag: DW_TAG_structure_type, name: "sha256_ctx", file: !19, line: 15, size: 896, align: 64, elements: !21)
!21 = !{!22, !26, !29, !33}
!22 = !DIDerivedType(tag: DW_TAG_member, name: "message", scope: !20, file: !19, line: 17, baseType: !23, size: 512, align: 32)
!23 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10, size: 512, align: 32, elements: !24)
!24 = !{!25}
!25 = !DISubrange(count: 16)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !20, file: !19, line: 18, baseType: !27, size: 64, align: 64, offset: 512)
!27 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !28, line: 55, baseType: !6)
!28 = !DIFile(filename: "/usr/include/stdint.h", directory: "/data/download/cmake/cmake-master/Utilities/cmlibrhash")
!29 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !20, file: !19, line: 19, baseType: !30, size: 256, align: 32, offset: 576)
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10, size: 256, align: 32, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 8)
!33 = !DIDerivedType(tag: DW_TAG_member, name: "digest_length", scope: !20, file: !19, line: 20, baseType: !10, size: 32, align: 32, offset: 832)
!34 = distinct !DISubprogram(name: "rhash_sha224_init", scope: !1, file: !1, line: 90, type: !35, isLocal: false, isDefinition: true, scopeLine: 91, flags: DIFlagPrototyped, isOptimized: false, variables: !2)
!35 = !DISubroutineType(types: !36)
!36 = !{null, !37}
!37 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64, align: 64)
!38 = distinct !DISubprogram(name: "rhash_sha256_update", scope: !1, file: !1, line: 171, type: !39, isLocal: false, isDefinition: true, scopeLine: 172, flags: DIFlagPrototyped, isOptimized: false, variables: !2)
!39 = !DISubroutineType(types: !40)
!40 = !{null, !17, !41, !4}
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64, align: 64)
!42 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !43)
!43 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!44 = distinct !DISubprogram(name: "rhash_sha256_final", scope: !1, file: !1, line: 213, type: !45, isLocal: false, isDefinition: true, scopeLine: 214, flags: DIFlagPrototyped, isOptimized: false, variables: !2)
!45 = !DISubroutineType(types: !46)
!46 = !{null, !17, !47}
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !43, size: 64, align: 64)
!48 = distinct !DISubprogram(name: "rhash_sha256_process_block", scope: !1, file: !1, line: 112, type: !49, isLocal: true, isDefinition: true, scopeLine: 113, flags: DIFlagPrototyped, isOptimized: false, variables: !2)
!49 = !DISubroutineType(types: !50)
!50 = !{null, !9, !9}
!51 = !{!52, !55, !56}
!52 = !DIGlobalVariable(name: "SHA256_H0", scope: !14, file: !1, line: 73, type: !53, isLocal: true, isDefinition: true, variable: [8 x i32]* @rhash_sha256_init.SHA256_H0)
!53 = !DICompositeType(tag: DW_TAG_array_type, baseType: !54, size: 256, align: 32, elements: !31)
!54 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !10)
!55 = !DIGlobalVariable(name: "SHA224_H0", scope: !34, file: !1, line: 95, type: !53, isLocal: true, isDefinition: true, variable: [8 x i32]* @rhash_sha224_init.SHA224_H0)
!56 = !DIGlobalVariable(name: "rhash_k256", scope: !0, file: !1, line: 25, type: !57, isLocal: true, isDefinition: true, variable: [64 x i32]* @rhash_k256)
!57 = !DICompositeType(tag: DW_TAG_array_type, baseType: !54, size: 2048, align: 32, elements: !58)
!58 = !{!59}
!59 = !DISubrange(count: 64)
!60 = !{i32 2, !"Dwarf Version", i32 4}
!61 = !{i32 2, !"Debug Info Version", i32 3}
!62 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!63 = !DILocalVariable(name: "ctx", arg: 1, scope: !14, file: !1, line: 68, type: !17)
!64 = !DIExpression()
!65 = !DILocation(line: 68, column: 36, scope: !14)
!66 = !DILocation(line: 78, column: 2, scope: !14)
!67 = !DILocation(line: 78, column: 7, scope: !14)
!68 = !DILocation(line: 78, column: 14, scope: !14)
!69 = !DILocation(line: 79, column: 2, scope: !14)
!70 = !DILocation(line: 79, column: 7, scope: !14)
!71 = !DILocation(line: 79, column: 21, scope: !14)
!72 = !DILocation(line: 82, column: 9, scope: !14)
!73 = !DILocation(line: 82, column: 14, scope: !14)
!74 = !DILocation(line: 82, column: 2, scope: !14)
!75 = !DILocation(line: 83, column: 1, scope: !14)
!76 = !DILocalVariable(name: "ctx", arg: 1, scope: !34, file: !1, line: 90, type: !37)
!77 = !DILocation(line: 90, column: 43, scope: !34)
!78 = !DILocation(line: 100, column: 2, scope: !34)
!79 = !DILocation(line: 100, column: 7, scope: !34)
!80 = !DILocation(line: 100, column: 14, scope: !34)
!81 = !DILocation(line: 101, column: 2, scope: !34)
!82 = !DILocation(line: 101, column: 7, scope: !34)
!83 = !DILocation(line: 101, column: 21, scope: !34)
!84 = !DILocation(line: 103, column: 9, scope: !34)
!85 = !DILocation(line: 103, column: 14, scope: !34)
!86 = !DILocation(line: 103, column: 2, scope: !34)
!87 = !DILocation(line: 104, column: 1, scope: !34)
!88 = !DILocalVariable(name: "ctx", arg: 1, scope: !38, file: !1, line: 171, type: !17)
!89 = !DILocation(line: 171, column: 38, scope: !38)
!90 = !DILocalVariable(name: "msg", arg: 2, scope: !38, file: !1, line: 171, type: !41)
!91 = !DILocation(line: 171, column: 64, scope: !38)
!92 = !DILocalVariable(name: "size", arg: 3, scope: !38, file: !1, line: 171, type: !4)
!93 = !DILocation(line: 171, column: 76, scope: !38)
!94 = !DILocalVariable(name: "index", scope: !38, file: !1, line: 173, type: !4)
!95 = !DILocation(line: 173, column: 9, scope: !38)
!96 = !DILocation(line: 173, column: 25, scope: !38)
!97 = !DILocation(line: 173, column: 30, scope: !38)
!98 = !DILocation(line: 173, column: 37, scope: !38)
!99 = !DILocation(line: 174, column: 17, scope: !38)
!100 = !DILocation(line: 174, column: 2, scope: !38)
!101 = !DILocation(line: 174, column: 7, scope: !38)
!102 = !DILocation(line: 174, column: 14, scope: !38)
!103 = !DILocation(line: 177, column: 6, scope: !104)
!104 = distinct !DILexicalBlock(scope: !38, file: !1, line: 177, column: 6)
!105 = !DILocation(line: 177, column: 6, scope: !38)
!106 = !DILocalVariable(name: "left", scope: !107, file: !1, line: 178, type: !4)
!107 = distinct !DILexicalBlock(scope: !104, file: !1, line: 177, column: 13)
!108 = !DILocation(line: 178, column: 10, scope: !107)
!109 = !DILocation(line: 178, column: 37, scope: !107)
!110 = !DILocation(line: 178, column: 35, scope: !107)
!111 = !DILocation(line: 179, column: 17, scope: !107)
!112 = !DILocation(line: 179, column: 22, scope: !107)
!113 = !DILocation(line: 179, column: 10, scope: !107)
!114 = !DILocation(line: 179, column: 32, scope: !107)
!115 = !DILocation(line: 179, column: 30, scope: !107)
!116 = !DILocation(line: 179, column: 39, scope: !107)
!117 = !DILocation(line: 179, column: 45, scope: !107)
!118 = !DILocation(line: 179, column: 52, scope: !107)
!119 = !DILocation(line: 179, column: 50, scope: !107)
!120 = !DILocation(line: 179, column: 59, scope: !121)
!121 = !DILexicalBlockFile(scope: !107, file: !1, discriminator: 1)
!122 = !DILocation(line: 179, column: 45, scope: !121)
!123 = !DILocation(line: 179, column: 66, scope: !124)
!124 = !DILexicalBlockFile(scope: !107, file: !1, discriminator: 2)
!125 = !DILocation(line: 179, column: 45, scope: !124)
!126 = !DILocation(line: 179, column: 45, scope: !127)
!127 = !DILexicalBlockFile(scope: !107, file: !1, discriminator: 3)
!128 = !DILocation(line: 179, column: 3, scope: !127)
!129 = !DILocation(line: 180, column: 7, scope: !130)
!130 = distinct !DILexicalBlock(scope: !107, file: !1, line: 180, column: 7)
!131 = !DILocation(line: 180, column: 14, scope: !130)
!132 = !DILocation(line: 180, column: 12, scope: !130)
!133 = !DILocation(line: 180, column: 7, scope: !107)
!134 = !DILocation(line: 180, column: 20, scope: !135)
!135 = !DILexicalBlockFile(scope: !130, file: !1, discriminator: 1)
!136 = !DILocation(line: 183, column: 30, scope: !107)
!137 = !DILocation(line: 183, column: 35, scope: !107)
!138 = !DILocation(line: 183, column: 52, scope: !107)
!139 = !DILocation(line: 183, column: 57, scope: !107)
!140 = !DILocation(line: 183, column: 3, scope: !107)
!141 = !DILocation(line: 184, column: 11, scope: !107)
!142 = !DILocation(line: 184, column: 8, scope: !107)
!143 = !DILocation(line: 185, column: 11, scope: !107)
!144 = !DILocation(line: 185, column: 8, scope: !107)
!145 = !DILocation(line: 186, column: 2, scope: !107)
!146 = !DILocation(line: 187, column: 2, scope: !38)
!147 = !DILocation(line: 187, column: 9, scope: !148)
!148 = !DILexicalBlockFile(scope: !38, file: !1, discriminator: 1)
!149 = !DILocation(line: 187, column: 14, scope: !148)
!150 = !DILocation(line: 187, column: 2, scope: !148)
!151 = !DILocalVariable(name: "aligned_message_block", scope: !152, file: !1, line: 188, type: !9)
!152 = distinct !DILexicalBlock(scope: !38, file: !1, line: 187, column: 36)
!153 = !DILocation(line: 188, column: 13, scope: !152)
!154 = !DILocation(line: 189, column: 7, scope: !155)
!155 = distinct !DILexicalBlock(scope: !152, file: !1, line: 189, column: 7)
!156 = !DILocation(line: 189, column: 7, scope: !152)
!157 = !DILocation(line: 192, column: 39, scope: !158)
!158 = distinct !DILexicalBlock(scope: !155, file: !1, line: 189, column: 27)
!159 = !DILocation(line: 192, column: 28, scope: !158)
!160 = !DILocation(line: 192, column: 26, scope: !158)
!161 = !DILocation(line: 193, column: 3, scope: !158)
!162 = !DILocation(line: 194, column: 11, scope: !163)
!163 = distinct !DILexicalBlock(scope: !155, file: !1, line: 193, column: 10)
!164 = !DILocation(line: 194, column: 16, scope: !163)
!165 = !DILocation(line: 194, column: 4, scope: !163)
!166 = !DILocation(line: 194, column: 25, scope: !163)
!167 = !DILocation(line: 195, column: 39, scope: !163)
!168 = !DILocation(line: 195, column: 44, scope: !163)
!169 = !DILocation(line: 195, column: 26, scope: !163)
!170 = !DILocation(line: 198, column: 30, scope: !152)
!171 = !DILocation(line: 198, column: 35, scope: !152)
!172 = !DILocation(line: 198, column: 41, scope: !152)
!173 = !DILocation(line: 198, column: 3, scope: !152)
!174 = !DILocation(line: 199, column: 8, scope: !152)
!175 = !DILocation(line: 200, column: 8, scope: !152)
!176 = !DILocation(line: 187, column: 2, scope: !177)
!177 = !DILexicalBlockFile(scope: !38, file: !1, discriminator: 2)
!178 = !DILocation(line: 202, column: 6, scope: !179)
!179 = distinct !DILexicalBlock(scope: !38, file: !1, line: 202, column: 6)
!180 = !DILocation(line: 202, column: 6, scope: !38)
!181 = !DILocation(line: 203, column: 10, scope: !182)
!182 = distinct !DILexicalBlock(scope: !179, file: !1, line: 202, column: 12)
!183 = !DILocation(line: 203, column: 15, scope: !182)
!184 = !DILocation(line: 203, column: 3, scope: !182)
!185 = !DILocation(line: 203, column: 24, scope: !182)
!186 = !DILocation(line: 203, column: 29, scope: !182)
!187 = !DILocation(line: 204, column: 2, scope: !182)
!188 = !DILocation(line: 205, column: 1, scope: !38)
!189 = !DILocalVariable(name: "hash", arg: 1, scope: !48, file: !1, line: 112, type: !9)
!190 = !DILocation(line: 112, column: 49, scope: !48)
!191 = !DILocalVariable(name: "block", arg: 2, scope: !48, file: !1, line: 112, type: !9)
!192 = !DILocation(line: 112, column: 67, scope: !48)
!193 = !DILocalVariable(name: "A", scope: !48, file: !1, line: 114, type: !10)
!194 = !DILocation(line: 114, column: 11, scope: !48)
!195 = !DILocalVariable(name: "B", scope: !48, file: !1, line: 114, type: !10)
!196 = !DILocation(line: 114, column: 14, scope: !48)
!197 = !DILocalVariable(name: "C", scope: !48, file: !1, line: 114, type: !10)
!198 = !DILocation(line: 114, column: 17, scope: !48)
!199 = !DILocalVariable(name: "D", scope: !48, file: !1, line: 114, type: !10)
!200 = !DILocation(line: 114, column: 20, scope: !48)
!201 = !DILocalVariable(name: "E", scope: !48, file: !1, line: 114, type: !10)
!202 = !DILocation(line: 114, column: 23, scope: !48)
!203 = !DILocalVariable(name: "F", scope: !48, file: !1, line: 114, type: !10)
!204 = !DILocation(line: 114, column: 26, scope: !48)
!205 = !DILocalVariable(name: "G", scope: !48, file: !1, line: 114, type: !10)
!206 = !DILocation(line: 114, column: 29, scope: !48)
!207 = !DILocalVariable(name: "H", scope: !48, file: !1, line: 114, type: !10)
!208 = !DILocation(line: 114, column: 32, scope: !48)
!209 = !DILocalVariable(name: "W", scope: !48, file: !1, line: 115, type: !23)
!210 = !DILocation(line: 115, column: 11, scope: !48)
!211 = !DILocalVariable(name: "k", scope: !48, file: !1, line: 116, type: !212)
!212 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !54, size: 64, align: 64)
!213 = !DILocation(line: 116, column: 18, scope: !48)
!214 = !DILocalVariable(name: "i", scope: !48, file: !1, line: 117, type: !215)
!215 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!216 = !DILocation(line: 117, column: 6, scope: !48)
!217 = !DILocation(line: 119, column: 6, scope: !48)
!218 = !DILocation(line: 119, column: 4, scope: !48)
!219 = !DILocation(line: 119, column: 19, scope: !48)
!220 = !DILocation(line: 119, column: 17, scope: !48)
!221 = !DILocation(line: 119, column: 32, scope: !48)
!222 = !DILocation(line: 119, column: 30, scope: !48)
!223 = !DILocation(line: 119, column: 45, scope: !48)
!224 = !DILocation(line: 119, column: 43, scope: !48)
!225 = !DILocation(line: 120, column: 6, scope: !48)
!226 = !DILocation(line: 120, column: 4, scope: !48)
!227 = !DILocation(line: 120, column: 19, scope: !48)
!228 = !DILocation(line: 120, column: 17, scope: !48)
!229 = !DILocation(line: 120, column: 32, scope: !48)
!230 = !DILocation(line: 120, column: 30, scope: !48)
!231 = !DILocation(line: 120, column: 45, scope: !48)
!232 = !DILocation(line: 120, column: 43, scope: !48)
!233 = !DILocalVariable(name: "T1", scope: !234, file: !1, line: 123, type: !10)
!234 = distinct !DILexicalBlock(scope: !48, file: !1, line: 123, column: 2)
!235 = !DILocation(line: 123, column: 2, scope: !234)
!236 = !DILocalVariable(name: "T1", scope: !237, file: !1, line: 124, type: !10)
!237 = distinct !DILexicalBlock(scope: !48, file: !1, line: 124, column: 2)
!238 = !DILocation(line: 124, column: 2, scope: !237)
!239 = !DILocalVariable(name: "T1", scope: !240, file: !1, line: 125, type: !10)
!240 = distinct !DILexicalBlock(scope: !48, file: !1, line: 125, column: 2)
!241 = !DILocation(line: 125, column: 2, scope: !240)
!242 = !DILocalVariable(name: "T1", scope: !243, file: !1, line: 126, type: !10)
!243 = distinct !DILexicalBlock(scope: !48, file: !1, line: 126, column: 2)
!244 = !DILocation(line: 126, column: 2, scope: !243)
!245 = !DILocalVariable(name: "T1", scope: !246, file: !1, line: 127, type: !10)
!246 = distinct !DILexicalBlock(scope: !48, file: !1, line: 127, column: 2)
!247 = !DILocation(line: 127, column: 2, scope: !246)
!248 = !DILocalVariable(name: "T1", scope: !249, file: !1, line: 128, type: !10)
!249 = distinct !DILexicalBlock(scope: !48, file: !1, line: 128, column: 2)
!250 = !DILocation(line: 128, column: 2, scope: !249)
!251 = !DILocalVariable(name: "T1", scope: !252, file: !1, line: 129, type: !10)
!252 = distinct !DILexicalBlock(scope: !48, file: !1, line: 129, column: 2)
!253 = !DILocation(line: 129, column: 2, scope: !252)
!254 = !DILocalVariable(name: "T1", scope: !255, file: !1, line: 130, type: !10)
!255 = distinct !DILexicalBlock(scope: !48, file: !1, line: 130, column: 2)
!256 = !DILocation(line: 130, column: 2, scope: !255)
!257 = !DILocalVariable(name: "T1", scope: !258, file: !1, line: 131, type: !10)
!258 = distinct !DILexicalBlock(scope: !48, file: !1, line: 131, column: 2)
!259 = !DILocation(line: 131, column: 2, scope: !258)
!260 = !DILocalVariable(name: "T1", scope: !261, file: !1, line: 132, type: !10)
!261 = distinct !DILexicalBlock(scope: !48, file: !1, line: 132, column: 2)
!262 = !DILocation(line: 132, column: 2, scope: !261)
!263 = !DILocalVariable(name: "T1", scope: !264, file: !1, line: 133, type: !10)
!264 = distinct !DILexicalBlock(scope: !48, file: !1, line: 133, column: 2)
!265 = !DILocation(line: 133, column: 2, scope: !264)
!266 = !DILocalVariable(name: "T1", scope: !267, file: !1, line: 134, type: !10)
!267 = distinct !DILexicalBlock(scope: !48, file: !1, line: 134, column: 2)
!268 = !DILocation(line: 134, column: 2, scope: !267)
!269 = !DILocalVariable(name: "T1", scope: !270, file: !1, line: 135, type: !10)
!270 = distinct !DILexicalBlock(scope: !48, file: !1, line: 135, column: 2)
!271 = !DILocation(line: 135, column: 2, scope: !270)
!272 = !DILocalVariable(name: "T1", scope: !273, file: !1, line: 136, type: !10)
!273 = distinct !DILexicalBlock(scope: !48, file: !1, line: 136, column: 2)
!274 = !DILocation(line: 136, column: 2, scope: !273)
!275 = !DILocalVariable(name: "T1", scope: !276, file: !1, line: 137, type: !10)
!276 = distinct !DILexicalBlock(scope: !48, file: !1, line: 137, column: 2)
!277 = !DILocation(line: 137, column: 2, scope: !276)
!278 = !DILocalVariable(name: "T1", scope: !279, file: !1, line: 138, type: !10)
!279 = distinct !DILexicalBlock(scope: !48, file: !1, line: 138, column: 2)
!280 = !DILocation(line: 138, column: 2, scope: !279)
!281 = !DILocation(line: 140, column: 9, scope: !282)
!282 = distinct !DILexicalBlock(scope: !48, file: !1, line: 140, column: 2)
!283 = !DILocation(line: 140, column: 17, scope: !282)
!284 = !DILocation(line: 140, column: 7, scope: !282)
!285 = !DILocation(line: 140, column: 36, scope: !286)
!286 = !DILexicalBlockFile(scope: !287, file: !1, discriminator: 1)
!287 = distinct !DILexicalBlock(scope: !282, file: !1, line: 140, column: 2)
!288 = !DILocation(line: 140, column: 38, scope: !286)
!289 = !DILocation(line: 140, column: 2, scope: !286)
!290 = !DILocalVariable(name: "T1", scope: !291, file: !1, line: 141, type: !10)
!291 = distinct !DILexicalBlock(scope: !292, file: !1, line: 141, column: 3)
!292 = distinct !DILexicalBlock(scope: !287, file: !1, line: 140, column: 62)
!293 = !DILocation(line: 141, column: 3, scope: !291)
!294 = !DILocalVariable(name: "T1", scope: !295, file: !1, line: 142, type: !10)
!295 = distinct !DILexicalBlock(scope: !292, file: !1, line: 142, column: 3)
!296 = !DILocation(line: 142, column: 3, scope: !295)
!297 = !DILocalVariable(name: "T1", scope: !298, file: !1, line: 143, type: !10)
!298 = distinct !DILexicalBlock(scope: !292, file: !1, line: 143, column: 3)
!299 = !DILocation(line: 143, column: 3, scope: !298)
!300 = !DILocalVariable(name: "T1", scope: !301, file: !1, line: 144, type: !10)
!301 = distinct !DILexicalBlock(scope: !292, file: !1, line: 144, column: 3)
!302 = !DILocation(line: 144, column: 3, scope: !301)
!303 = !DILocalVariable(name: "T1", scope: !304, file: !1, line: 145, type: !10)
!304 = distinct !DILexicalBlock(scope: !292, file: !1, line: 145, column: 3)
!305 = !DILocation(line: 145, column: 3, scope: !304)
!306 = !DILocalVariable(name: "T1", scope: !307, file: !1, line: 146, type: !10)
!307 = distinct !DILexicalBlock(scope: !292, file: !1, line: 146, column: 3)
!308 = !DILocation(line: 146, column: 3, scope: !307)
!309 = !DILocalVariable(name: "T1", scope: !310, file: !1, line: 147, type: !10)
!310 = distinct !DILexicalBlock(scope: !292, file: !1, line: 147, column: 3)
!311 = !DILocation(line: 147, column: 3, scope: !310)
!312 = !DILocalVariable(name: "T1", scope: !313, file: !1, line: 148, type: !10)
!313 = distinct !DILexicalBlock(scope: !292, file: !1, line: 148, column: 3)
!314 = !DILocation(line: 148, column: 3, scope: !313)
!315 = !DILocalVariable(name: "T1", scope: !316, file: !1, line: 149, type: !10)
!316 = distinct !DILexicalBlock(scope: !292, file: !1, line: 149, column: 3)
!317 = !DILocation(line: 149, column: 3, scope: !316)
!318 = !DILocalVariable(name: "T1", scope: !319, file: !1, line: 150, type: !10)
!319 = distinct !DILexicalBlock(scope: !292, file: !1, line: 150, column: 3)
!320 = !DILocation(line: 150, column: 3, scope: !319)
!321 = !DILocalVariable(name: "T1", scope: !322, file: !1, line: 151, type: !10)
!322 = distinct !DILexicalBlock(scope: !292, file: !1, line: 151, column: 3)
!323 = !DILocation(line: 151, column: 3, scope: !322)
!324 = !DILocalVariable(name: "T1", scope: !325, file: !1, line: 152, type: !10)
!325 = distinct !DILexicalBlock(scope: !292, file: !1, line: 152, column: 3)
!326 = !DILocation(line: 152, column: 3, scope: !325)
!327 = !DILocalVariable(name: "T1", scope: !328, file: !1, line: 153, type: !10)
!328 = distinct !DILexicalBlock(scope: !292, file: !1, line: 153, column: 3)
!329 = !DILocation(line: 153, column: 3, scope: !328)
!330 = !DILocalVariable(name: "T1", scope: !331, file: !1, line: 154, type: !10)
!331 = distinct !DILexicalBlock(scope: !292, file: !1, line: 154, column: 3)
!332 = !DILocation(line: 154, column: 3, scope: !331)
!333 = !DILocalVariable(name: "T1", scope: !334, file: !1, line: 155, type: !10)
!334 = distinct !DILexicalBlock(scope: !292, file: !1, line: 155, column: 3)
!335 = !DILocation(line: 155, column: 3, scope: !334)
!336 = !DILocalVariable(name: "T1", scope: !337, file: !1, line: 156, type: !10)
!337 = distinct !DILexicalBlock(scope: !292, file: !1, line: 156, column: 3)
!338 = !DILocation(line: 156, column: 3, scope: !337)
!339 = !DILocation(line: 157, column: 2, scope: !292)
!340 = !DILocation(line: 140, column: 46, scope: !341)
!341 = !DILexicalBlockFile(scope: !287, file: !1, discriminator: 2)
!342 = !DILocation(line: 140, column: 55, scope: !341)
!343 = !DILocation(line: 140, column: 2, scope: !341)
!344 = !DILocation(line: 159, column: 13, scope: !48)
!345 = !DILocation(line: 159, column: 2, scope: !48)
!346 = !DILocation(line: 159, column: 10, scope: !48)
!347 = !DILocation(line: 159, column: 27, scope: !48)
!348 = !DILocation(line: 159, column: 16, scope: !48)
!349 = !DILocation(line: 159, column: 24, scope: !48)
!350 = !DILocation(line: 159, column: 41, scope: !48)
!351 = !DILocation(line: 159, column: 30, scope: !48)
!352 = !DILocation(line: 159, column: 38, scope: !48)
!353 = !DILocation(line: 159, column: 55, scope: !48)
!354 = !DILocation(line: 159, column: 44, scope: !48)
!355 = !DILocation(line: 159, column: 52, scope: !48)
!356 = !DILocation(line: 160, column: 13, scope: !48)
!357 = !DILocation(line: 160, column: 2, scope: !48)
!358 = !DILocation(line: 160, column: 10, scope: !48)
!359 = !DILocation(line: 160, column: 27, scope: !48)
!360 = !DILocation(line: 160, column: 16, scope: !48)
!361 = !DILocation(line: 160, column: 24, scope: !48)
!362 = !DILocation(line: 160, column: 41, scope: !48)
!363 = !DILocation(line: 160, column: 30, scope: !48)
!364 = !DILocation(line: 160, column: 38, scope: !48)
!365 = !DILocation(line: 160, column: 55, scope: !48)
!366 = !DILocation(line: 160, column: 44, scope: !48)
!367 = !DILocation(line: 160, column: 52, scope: !48)
!368 = !DILocation(line: 161, column: 1, scope: !48)
!369 = !DILocalVariable(name: "ctx", arg: 1, scope: !44, file: !1, line: 213, type: !17)
!370 = !DILocation(line: 213, column: 37, scope: !44)
!371 = !DILocalVariable(name: "result", arg: 2, scope: !44, file: !1, line: 213, type: !47)
!372 = !DILocation(line: 213, column: 57, scope: !44)
!373 = !DILocalVariable(name: "index", scope: !44, file: !1, line: 215, type: !4)
!374 = !DILocation(line: 215, column: 9, scope: !44)
!375 = !DILocation(line: 215, column: 28, scope: !44)
!376 = !DILocation(line: 215, column: 33, scope: !44)
!377 = !DILocation(line: 215, column: 18, scope: !44)
!378 = !DILocation(line: 215, column: 40, scope: !44)
!379 = !DILocation(line: 215, column: 46, scope: !44)
!380 = !DILocation(line: 215, column: 17, scope: !44)
!381 = !DILocalVariable(name: "shift", scope: !44, file: !1, line: 216, type: !10)
!382 = !DILocation(line: 216, column: 11, scope: !44)
!383 = !DILocation(line: 216, column: 30, scope: !44)
!384 = !DILocation(line: 216, column: 35, scope: !44)
!385 = !DILocation(line: 216, column: 20, scope: !44)
!386 = !DILocation(line: 216, column: 42, scope: !44)
!387 = !DILocation(line: 216, column: 47, scope: !44)
!388 = !DILocation(line: 221, column: 27, scope: !44)
!389 = !DILocation(line: 221, column: 15, scope: !44)
!390 = !DILocation(line: 221, column: 2, scope: !44)
!391 = !DILocation(line: 221, column: 7, scope: !44)
!392 = !DILocation(line: 221, column: 24, scope: !44)
!393 = !DILocation(line: 222, column: 27, scope: !44)
!394 = !DILocation(line: 222, column: 20, scope: !44)
!395 = !DILocation(line: 222, column: 2, scope: !44)
!396 = !DILocation(line: 222, column: 7, scope: !44)
!397 = !DILocation(line: 222, column: 24, scope: !44)
!398 = !DILocation(line: 225, column: 6, scope: !399)
!399 = distinct !DILexicalBlock(scope: !44, file: !1, line: 225, column: 6)
!400 = !DILocation(line: 225, column: 12, scope: !399)
!401 = !DILocation(line: 225, column: 6, scope: !44)
!402 = !DILocation(line: 227, column: 3, scope: !403)
!403 = distinct !DILexicalBlock(scope: !399, file: !1, line: 225, column: 18)
!404 = !DILocation(line: 227, column: 10, scope: !405)
!405 = !DILexicalBlockFile(scope: !403, file: !1, discriminator: 1)
!406 = !DILocation(line: 227, column: 16, scope: !405)
!407 = !DILocation(line: 227, column: 3, scope: !405)
!408 = !DILocation(line: 228, column: 22, scope: !409)
!409 = distinct !DILexicalBlock(scope: !403, file: !1, line: 227, column: 22)
!410 = !DILocation(line: 228, column: 4, scope: !409)
!411 = !DILocation(line: 228, column: 9, scope: !409)
!412 = !DILocation(line: 228, column: 26, scope: !409)
!413 = !DILocation(line: 227, column: 3, scope: !414)
!414 = !DILexicalBlockFile(scope: !403, file: !1, discriminator: 2)
!415 = !DILocation(line: 230, column: 30, scope: !403)
!416 = !DILocation(line: 230, column: 35, scope: !403)
!417 = !DILocation(line: 230, column: 41, scope: !403)
!418 = !DILocation(line: 230, column: 46, scope: !403)
!419 = !DILocation(line: 230, column: 3, scope: !403)
!420 = !DILocation(line: 231, column: 9, scope: !403)
!421 = !DILocation(line: 232, column: 2, scope: !403)
!422 = !DILocation(line: 233, column: 2, scope: !44)
!423 = !DILocation(line: 233, column: 9, scope: !424)
!424 = !DILexicalBlockFile(scope: !44, file: !1, discriminator: 1)
!425 = !DILocation(line: 233, column: 15, scope: !424)
!426 = !DILocation(line: 233, column: 2, scope: !424)
!427 = !DILocation(line: 234, column: 21, scope: !428)
!428 = distinct !DILexicalBlock(scope: !44, file: !1, line: 233, column: 21)
!429 = !DILocation(line: 234, column: 3, scope: !428)
!430 = !DILocation(line: 234, column: 8, scope: !428)
!431 = !DILocation(line: 234, column: 25, scope: !428)
!432 = !DILocation(line: 233, column: 2, scope: !433)
!433 = !DILexicalBlockFile(scope: !44, file: !1, discriminator: 2)
!434 = !DILocation(line: 236, column: 21, scope: !44)
!435 = !DILocation(line: 236, column: 2, scope: !44)
!436 = !DILocation(line: 236, column: 7, scope: !44)
!437 = !DILocation(line: 236, column: 19, scope: !44)
!438 = !DILocation(line: 237, column: 21, scope: !44)
!439 = !DILocation(line: 237, column: 2, scope: !44)
!440 = !DILocation(line: 237, column: 7, scope: !44)
!441 = !DILocation(line: 237, column: 19, scope: !44)
!442 = !DILocation(line: 238, column: 29, scope: !44)
!443 = !DILocation(line: 238, column: 34, scope: !44)
!444 = !DILocation(line: 238, column: 40, scope: !44)
!445 = !DILocation(line: 238, column: 45, scope: !44)
!446 = !DILocation(line: 238, column: 2, scope: !44)
!447 = !DILocation(line: 240, column: 6, scope: !448)
!448 = distinct !DILexicalBlock(scope: !44, file: !1, line: 240, column: 6)
!449 = !DILocation(line: 240, column: 6, scope: !44)
!450 = !DILocation(line: 240, column: 14, scope: !451)
!451 = !DILexicalBlockFile(scope: !448, file: !1, discriminator: 1)
!452 = !DILocation(line: 241, column: 1, scope: !44)
