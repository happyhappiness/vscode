; ModuleID = '/data/download/cmake/cmake-master/Utilities/cmzlib/crc32.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@crc_table = internal constant [8 x [256 x i64]] [[256 x i64] [i64 0, i64 1996959894, i64 3993919788, i64 2567524794, i64 124634137, i64 1886057615, i64 3915621685, i64 2657392035, i64 249268274, i64 2044508324, i64 3772115230, i64 2547177864, i64 162941995, i64 2125561021, i64 3887607047, i64 2428444049, i64 498536548, i64 1789927666, i64 4089016648, i64 2227061214, i64 450548861, i64 1843258603, i64 4107580753, i64 2211677639, i64 325883990, i64 1684777152, i64 4251122042, i64 2321926636, i64 335633487, i64 1661365465, i64 4195302755, i64 2366115317, i64 997073096, i64 1281953886, i64 3579855332, i64 2724688242, i64 1006888145, i64 1258607687, i64 3524101629, i64 2768942443, i64 901097722, i64 1119000684, i64 3686517206, i64 2898065728, i64 853044451, i64 1172266101, i64 3705015759, i64 2882616665, i64 651767980, i64 1373503546, i64 3369554304, i64 3218104598, i64 565507253, i64 1454621731, i64 3485111705, i64 3099436303, i64 671266974, i64 1594198024, i64 3322730930, i64 2970347812, i64 795835527, i64 1483230225, i64 3244367275, i64 3060149565, i64 1994146192, i64 31158534, i64 2563907772, i64 4023717930, i64 1907459465, i64 112637215, i64 2680153253, i64 3904427059, i64 2013776290, i64 251722036, i64 2517215374, i64 3775830040, i64 2137656763, i64 141376813, i64 2439277719, i64 3865271297, i64 1802195444, i64 476864866, i64 2238001368, i64 4066508878, i64 1812370925, i64 453092731, i64 2181625025, i64 4111451223, i64 1706088902, i64 314042704, i64 2344532202, i64 4240017532, i64 1658658271, i64 366619977, i64 2362670323, i64 4224994405, i64 1303535960, i64 984961486, i64 2747007092, i64 3569037538, i64 1256170817, i64 1037604311, i64 2765210733, i64 3554079995, i64 1131014506, i64 879679996, i64 2909243462, i64 3663771856, i64 1141124467, i64 855842277, i64 2852801631, i64 3708648649, i64 1342533948, i64 654459306, i64 3188396048, i64 3373015174, i64 1466479909, i64 544179635, i64 3110523913, i64 3462522015, i64 1591671054, i64 702138776, i64 2966460450, i64 3352799412, i64 1504918807, i64 783551873, i64 3082640443, i64 3233442989, i64 3988292384, i64 2596254646, i64 62317068, i64 1957810842, i64 3939845945, i64 2647816111, i64 81470997, i64 1943803523, i64 3814918930, i64 2489596804, i64 225274430, i64 2053790376, i64 3826175755, i64 2466906013, i64 167816743, i64 2097651377, i64 4027552580, i64 2265490386, i64 503444072, i64 1762050814, i64 4150417245, i64 2154129355, i64 426522225, i64 1852507879, i64 4275313526, i64 2312317920, i64 282753626, i64 1742555852, i64 4189708143, i64 2394877945, i64 397917763, i64 1622183637, i64 3604390888, i64 2714866558, i64 953729732, i64 1340076626, i64 3518719985, i64 2797360999, i64 1068828381, i64 1219638859, i64 3624741850, i64 2936675148, i64 906185462, i64 1090812512, i64 3747672003, i64 2825379669, i64 829329135, i64 1181335161, i64 3412177804, i64 3160834842, i64 628085408, i64 1382605366, i64 3423369109, i64 3138078467, i64 570562233, i64 1426400815, i64 3317316542, i64 2998733608, i64 733239954, i64 1555261956, i64 3268935591, i64 3050360625, i64 752459403, i64 1541320221, i64 2607071920, i64 3965973030, i64 1969922972, i64 40735498, i64 2617837225, i64 3943577151, i64 1913087877, i64 83908371, i64 2512341634, i64 3803740692, i64 2075208622, i64 213261112, i64 2463272603, i64 3855990285, i64 2094854071, i64 198958881, i64 2262029012, i64 4057260610, i64 1759359992, i64 534414190, i64 2176718541, i64 4139329115, i64 1873836001, i64 414664567, i64 2282248934, i64 4279200368, i64 1711684554, i64 285281116, i64 2405801727, i64 4167216745, i64 1634467795, i64 376229701, i64 2685067896, i64 3608007406, i64 1308918612, i64 956543938, i64 2808555105, i64 3495958263, i64 1231636301, i64 1047427035, i64 2932959818, i64 3654703836, i64 1088359270, i64 936918000, i64 2847714899, i64 3736837829, i64 1202900863, i64 817233897, i64 3183342108, i64 3401237130, i64 1404277552, i64 615818150, i64 3134207493, i64 3453421203, i64 1423857449, i64 601450431, i64 3009837614, i64 3294710456, i64 1567103746, i64 711928724, i64 3020668471, i64 3272380065, i64 1510334235, i64 755167117], [256 x i64] [i64 0, i64 421212481, i64 842424962, i64 724390851, i64 1684849924, i64 2105013317, i64 1448781702, i64 1329698503, i64 3369699848, i64 3519200073, i64 4210026634, i64 3824474571, i64 2897563404, i64 3048111693, i64 2659397006, i64 2274893007, i64 1254232657, i64 1406739216, i64 2029285587, i64 1643069842, i64 783210325, i64 934667796, i64 479770071, i64 92505238, i64 2182846553, i64 2600511768, i64 2955803355, i64 2838940570, i64 3866582365, i64 4285295644, i64 3561045983, i64 3445231262, i64 2508465314, i64 2359236067, i64 2813478432, i64 3198777185, i64 4058571174, i64 3908292839, i64 3286139684, i64 3670389349, i64 1566420650, i64 1145479147, i64 1869335592, i64 1987116393, i64 959540142, i64 539646703, i64 185010476, i64 303839341, i64 3745920755, i64 3327985586, i64 3983561841, i64 4100678960, i64 3140154359, i64 2721170102, i64 2300350837, i64 2416418868, i64 396344571, i64 243568058, i64 631889529, i64 1018359608, i64 1945336319, i64 1793607870, i64 1103436669, i64 1490954812, i64 4034481925, i64 3915546180, i64 3259968903, i64 3679722694, i64 2484439553, i64 2366552896, i64 2787371139, i64 3208174018, i64 950060301, i64 565965900, i64 177645455, i64 328046286, i64 1556873225, i64 1171730760, i64 1861902987, i64 2011255754, i64 3132841300, i64 2745199637, i64 2290958294, i64 2442530455, i64 3738671184, i64 3352078609, i64 3974232786, i64 4126854035, i64 1919080284, i64 1803150877, i64 1079293406, i64 1498383519, i64 370020952, i64 253043481, i64 607678682, i64 1025720731, i64 1711106983, i64 2095471334, i64 1472923941, i64 1322268772, i64 26324643, i64 411738082, i64 866634785, i64 717028704, i64 2904875439, i64 3024081134, i64 2668790573, i64 2248782444, i64 3376948395, i64 3495106026, i64 4219356713, i64 3798300520, i64 792689142, i64 908347575, i64 487136116, i64 68299317, i64 1263779058, i64 1380486579, i64 2036719216, i64 1618931505, i64 3890672638, i64 4278043327, i64 3587215740, i64 3435896893, i64 2206873338, i64 2593195963, i64 2981909624, i64 2829542713, i64 998479947, i64 580430090, i64 162921161, i64 279890824, i64 1609522511, i64 1190423566, i64 1842954189, i64 1958874764, i64 4082766403, i64 3930137346, i64 3245109441, i64 3631694208, i64 2536953671, i64 2385372678, i64 2768287173, i64 3155920004, i64 1900120602, i64 1750776667, i64 1131931800, i64 1517083097, i64 355290910, i64 204897887, i64 656092572, i64 1040194781, i64 3113746450, i64 2692952403, i64 2343461520, i64 2461357009, i64 3723805974, i64 3304059991, i64 4022511508, i64 4141455061, i64 2919742697, i64 3072101800, i64 2620513899, i64 2234183466, i64 3396041197, i64 3547351212, i64 4166851439, i64 3779471918, i64 1725839073, i64 2143618976, i64 1424512099, i64 1307796770, i64 45282277, i64 464110244, i64 813994343, i64 698327078, i64 3838160568, i64 4259225593, i64 3606301754, i64 3488152955, i64 2158586812, i64 2578602749, i64 2996767038, i64 2877569151, i64 740041904, i64 889656817, i64 506086962, i64 120682355, i64 1215357364, i64 1366020341, i64 2051441462, i64 1667084919, i64 3422213966, i64 3538019855, i64 4190942668, i64 3772220557, i64 2945847882, i64 3062702859, i64 2644537544, i64 2226864521, i64 52649286, i64 439905287, i64 823476164, i64 672009861, i64 1733269570, i64 2119477507, i64 1434057408, i64 1281543041, i64 2167981343, i64 2552493150, i64 3004082077, i64 2853541596, i64 3847487515, i64 4233048410, i64 3613549209, i64 3464057816, i64 1239502615, i64 1358593622, i64 2077699477, i64 1657543892, i64 764250643, i64 882293586, i64 532408465, i64 111204816, i64 1585378284, i64 1197851309, i64 1816695150, i64 1968414767, i64 974272232, i64 587794345, i64 136598634, i64 289367339, i64 2527558116, i64 2411481253, i64 2760973158, i64 3179948583, i64 4073438432, i64 3956313505, i64 3237863010, i64 3655790371, i64 347922877, i64 229101820, i64 646611775, i64 1066513022, i64 1892689081, i64 1774917112, i64 1122387515, i64 1543337850, i64 3697634229, i64 3313392372, i64 3998419255, i64 4148705398, i64 3087642289, i64 2702352368, i64 2319436851, i64 2468674930], [256 x i64] [i64 0, i64 29518391, i64 59036782, i64 38190681, i64 118073564, i64 114017003, i64 76381362, i64 89069189, i64 236147128, i64 265370511, i64 228034006, i64 206958561, i64 152762724, i64 148411219, i64 178138378, i64 190596925, i64 472294256, i64 501532999, i64 530741022, i64 509615401, i64 456068012, i64 451764635, i64 413917122, i64 426358261, i64 305525448, i64 334993663, i64 296822438, i64 275991697, i64 356276756, i64 352202787, i64 381193850, i64 393929805, i64 944588512, i64 965684439, i64 1003065998, i64 973863097, i64 1061482044, i64 1049003019, i64 1019230802, i64 1023561829, i64 912136024, i64 933002607, i64 903529270, i64 874031361, i64 827834244, i64 815125939, i64 852716522, i64 856752605, i64 611050896, i64 631869351, i64 669987326, i64 640506825, i64 593644876, i64 580921211, i64 551983394, i64 556069653, i64 712553512, i64 733666847, i64 704405574, i64 675154545, i64 762387700, i64 749958851, i64 787859610, i64 792175277, i64 1889177024, i64 1901651959, i64 1931368878, i64 1927033753, i64 2006131996, i64 1985040171, i64 1947726194, i64 1976933189, i64 2122964088, i64 2135668303, i64 2098006038, i64 2093965857, i64 2038461604, i64 2017599123, i64 2047123658, i64 2076625661, i64 1824272048, i64 1836991623, i64 1866005214, i64 1861914857, i64 1807058540, i64 1786244187, i64 1748062722, i64 1777547317, i64 1655668488, i64 1668093247, i64 1630251878, i64 1625932113, i64 1705433044, i64 1684323811, i64 1713505210, i64 1742760333, i64 1222101792, i64 1226154263, i64 1263738702, i64 1251046777, i64 1339974652, i64 1310460363, i64 1281013650, i64 1301863845, i64 1187289752, i64 1191637167, i64 1161842422, i64 1149379777, i64 1103966788, i64 1074747507, i64 1112139306, i64 1133218845, i64 1425107024, i64 1429406311, i64 1467333694, i64 1454888457, i64 1408811148, i64 1379576507, i64 1350309090, i64 1371438805, i64 1524775400, i64 1528845279, i64 1499917702, i64 1487177649, i64 1575719220, i64 1546255107, i64 1584350554, i64 1605185389, i64 3778354048, i64 3774312887, i64 3803303918, i64 3816007129, i64 3862737756, i64 3892238699, i64 3854067506, i64 3833203973, i64 4012263992, i64 4007927823, i64 3970080342, i64 3982554209, i64 3895452388, i64 3924658387, i64 3953866378, i64 3932773565, i64 4245928176, i64 4241609415, i64 4271336606, i64 4283762345, i64 4196012076, i64 4225268251, i64 4187931714, i64 4166823541, i64 4076923208, i64 4072833919, i64 4035198246, i64 4047918865, i64 4094247316, i64 4123732899, i64 4153251322, i64 4132437965, i64 3648544096, i64 3636082519, i64 3673983246, i64 3678331705, i64 3732010428, i64 3753090955, i64 3723829714, i64 3694611429, i64 3614117080, i64 3601426159, i64 3572488374, i64 3576541825, i64 3496125444, i64 3516976691, i64 3555094634, i64 3525581405, i64 3311336976, i64 3298595879, i64 3336186494, i64 3340255305, i64 3260503756, i64 3281337595, i64 3251864226, i64 3222399125, i64 3410866088, i64 3398419871, i64 3368647622, i64 3372945905, i64 3427010420, i64 3448139075, i64 3485520666, i64 3456284973, i64 2444203584, i64 2423127159, i64 2452308526, i64 2481530905, i64 2527477404, i64 2539934891, i64 2502093554, i64 2497740997, i64 2679949304, i64 2659102159, i64 2620920726, i64 2650438049, i64 2562027300, i64 2574714131, i64 2603727690, i64 2599670141, i64 2374579504, i64 2353749767, i64 2383274334, i64 2412743529, i64 2323684844, i64 2336421851, i64 2298759554, i64 2294686645, i64 2207933576, i64 2186809023, i64 2149495014, i64 2178734801, i64 2224278612, i64 2236720739, i64 2266437690, i64 2262135309, i64 2850214048, i64 2820717207, i64 2858812622, i64 2879680249, i64 2934667388, i64 2938704459, i64 2909776914, i64 2897069605, i64 2817622296, i64 2788420399, i64 2759153014, i64 2780249921, i64 2700618180, i64 2704950259, i64 2742877610, i64 2730399645, i64 3049550800, i64 3020298727, i64 3057690558, i64 3078802825, i64 2999835404, i64 3004150075, i64 2974355298, i64 2961925461, i64 3151438440, i64 3121956959, i64 3092510214, i64 3113327665, i64 3168701108, i64 3172786307, i64 3210370778, i64 3197646061], [256 x i64] [i64 0, i64 3099354981, i64 2852767883, i64 313896942, i64 2405603159, i64 937357362, i64 627793884, i64 2648127673, i64 3316918511, i64 2097696650, i64 1874714724, i64 3607201537, i64 1255587768, i64 4067088605, i64 3772741427, i64 1482887254, i64 1343838111, i64 3903140090, i64 4195393300, i64 1118632049, i64 3749429448, i64 1741137837, i64 1970407491, i64 3452858150, i64 2511175536, i64 756094997, i64 1067759611, i64 2266550430, i64 449832999, i64 2725482306, i64 2965774508, i64 142231497, i64 2687676222, i64 412010587, i64 171665333, i64 2995192016, i64 793786473, i64 2548850444, i64 2237264098, i64 1038456711, i64 1703315409, i64 3711623348, i64 3482275674, i64 1999841343, i64 3940814982, i64 1381529571, i64 1089329165, i64 4166106984, i64 4029413537, i64 1217896388, i64 1512189994, i64 3802027855, i64 2135519222, i64 3354724499, i64 3577784189, i64 1845280792, i64 899665998, i64 2367928107, i64 2677414085, i64 657096608, i64 3137160985, i64 37822588, i64 284462994, i64 2823350519, i64 2601801789, i64 598228824, i64 824021174, i64 2309093331, i64 343330666, i64 2898962447, i64 3195996129, i64 113467524, i64 1587572946, i64 3860600759, i64 4104763481, i64 1276501820, i64 3519211397, i64 1769898208, i64 2076913422, i64 3279374443, i64 3406630818, i64 1941006535, i64 1627703081, i64 3652755532, i64 1148164341, i64 4241751952, i64 3999682686, i64 1457141531, i64 247015245, i64 3053797416, i64 2763059142, i64 470583459, i64 2178658330, i64 963106687, i64 735213713, i64 2473467892, i64 992409347, i64 2207944806, i64 2435792776, i64 697522413, i64 3024379988, i64 217581361, i64 508405983, i64 2800865210, i64 4271038444, i64 1177467017, i64 1419450215, i64 3962007554, i64 1911572667, i64 3377213406, i64 3690561584, i64 1665525589, i64 1799331996, i64 3548628985, i64 3241568279, i64 2039091058, i64 3831314379, i64 1558270126, i64 1314193216, i64 4142438437, i64 2928380019, i64 372764438, i64 75645176, i64 3158189981, i64 568925988, i64 2572515393, i64 2346768303, i64 861712586, i64 3982079547, i64 1441124702, i64 1196457648, i64 4293663189, i64 1648042348, i64 3666298377, i64 3358779879, i64 1888390786, i64 686661332, i64 2421291441, i64 2196002399, i64 978858298, i64 2811169155, i64 523464422, i64 226935048, i64 3040519789, i64 3175145892, i64 100435649, i64 390670639, i64 2952089162, i64 841119475, i64 2325614998, i64 2553003640, i64 546822429, i64 2029308235, i64 3225988654, i64 3539796416, i64 1782671013, i64 4153826844, i64 1328167289, i64 1570739863, i64 3844338162, i64 1298864389, i64 4124540512, i64 3882013070, i64 1608431339, i64 3255406162, i64 2058742071, i64 1744848601, i64 3501990332, i64 2296328682, i64 811816591, i64 584513889, i64 2590678532, i64 129869501, i64 3204563416, i64 2914283062, i64 352848211, i64 494030490, i64 2781751807, i64 3078325777, i64 264757620, i64 2450577869, i64 715964072, i64 941166918, i64 2158327331, i64 3636881013, i64 1618608400, i64 1926213374, i64 3396585883, i64 1470427426, i64 4011365959, i64 4255988137, i64 1158766284, i64 1984818694, i64 3471935843, i64 3695453837, i64 1693991400, i64 4180638033, i64 1100160564, i64 1395044826, i64 3952793279, i64 3019491049, i64 189112716, i64 435162722, i64 2706139399, i64 1016811966, i64 2217162459, i64 2526189877, i64 774831696, i64 643086745, i64 2666061564, i64 2354934034, i64 887166583, i64 2838900430, i64 294275499, i64 54519365, i64 3145957664, i64 3823145334, i64 1532818963, i64 1240029693, i64 4048895640, i64 1820460577, i64 3560857924, i64 3331051178, i64 2117577167, i64 3598663992, i64 1858283101, i64 2088143283, i64 3301633750, i64 1495127663, i64 3785470218, i64 4078182116, i64 1269332353, i64 332098007, i64 2876706482, i64 3116540252, i64 25085497, i64 2628386432, i64 605395429, i64 916469259, i64 2384220526, i64 2254837415, i64 1054503362, i64 745528876, i64 2496903497, i64 151290352, i64 2981684885, i64 2735556987, i64 464596510, i64 1137851976, i64 4218313005, i64 3923506883, i64 1365741990, i64 3434129695, i64 1946996346, i64 1723425172, i64 3724871409], [256 x i64] [i64 0, i64 2519730039, i64 744558318, i64 3125873049, i64 432303367, i64 2415159920, i64 900031465, i64 2744476830, i64 847829774, i64 2763578489, i64 518641120, i64 2295976599, i64 726447625, i64 3179065726, i64 120436967, i64 2434645904, i64 1678817053, i64 4062228586, i64 1215412723, i64 3728850564, i64 2111101466, i64 3957644653, i64 1370871028, i64 3347436419, i64 1452829715, i64 3232263012, i64 2063164157, i64 3972621706, i64 1331429652, i64 3647735395, i64 1664946170, i64 4111272077, i64 3357568571, i64 1578133836, i64 3829489877, i64 1920034722, i64 3521381180, i64 1205077067, i64 4253355474, i64 1807026853, i64 4205360437, i64 1821946434, i64 3603545051, i64 1090108588, i64 3815561266, i64 1969020741, i64 3473790684, i64 1497223595, i64 2888882470, i64 973135441, i64 2152847304, i64 375509183, i64 3052712993, i64 600093526, i64 2576726735, i64 262520248, i64 2662859304, i64 143131999, i64 3000569030, i64 619252657, i64 2273079087, i64 290220120, i64 2870829505, i64 1026385590, i64 2420235382, i64 108124929, i64 3156267672, i64 705746415, i64 2307240305, i64 532002310, i64 2783231903, i64 869578984, i64 2731083640, i64 888733711, i64 2393377174, i64 412618465, i64 3138218623, i64 759000328, i64 2540463249, i64 22832102, i64 4098976619, i64 1650551836, i64 3627050373, i64 1308648178, i64 3985966700, i64 2074411291, i64 3253995650, i64 1472466933, i64 3336155237, i64 1357494034, i64 3937975947, i64 2089335292, i64 3743276386, i64 1227741717, i64 4085044108, i64 1699534075, i64 1482797645, i64 3461461306, i64 1946205347, i64 3794844628, i64 1101389642, i64 3616921661, i64 1841615268, i64 4227126995, i64 1793681731, i64 4242107956, i64 1183344557, i64 3501744346, i64 1932330052, i64 3843883827, i64 1598818986, i64 3380350429, i64 1014039888, i64 2856387111, i64 269487038, i64 2250247369, i64 632645719, i64 3011866400, i64 164914873, i64 2682544590, i64 251256414, i64 2563365161, i64 580440240, i64 3030964167, i64 389919577, i64 2165158958, i64 995933623, i64 2909584064, i64 545503469, i64 3065233306, i64 216184323, i64 2597499252, i64 961009130, i64 2943865501, i64 354867972, i64 2199313523, i64 302736355, i64 2218484884, i64 1047162125, i64 2824497786, i64 198119140, i64 2650737043, i64 665714698, i64 2979923837, i64 1150488560, i64 3533899911, i64 1760690462, i64 4274128489, i64 1566008055, i64 3412551040, i64 1899392025, i64 3875957614, i64 1981535486, i64 3760968585, i64 1518000656, i64 3427458407, i64 1876933113, i64 4193238670, i64 1136572183, i64 3582898272, i64 3903051478, i64 2123616673, i64 3301103672, i64 1391648591, i64 4050107345, i64 1733803174, i64 3708204351, i64 1261875784, i64 3660254680, i64 1276840623, i64 4132045622, i64 1618609217, i64 3287245023, i64 1440704424, i64 4019088945, i64 2042521926, i64 2360566219, i64 444819132, i64 2698145573, i64 920807506, i64 2507607244, i64 54987707, i64 3105227298, i64 791020885, i64 3191585477, i64 671858098, i64 2455417899, i64 74101596, i64 2818561986, i64 835702965, i64 2342443308, i64 497999451, i64 2965529755, i64 653419500, i64 2627955317, i64 177433858, i64 2835745180, i64 1060507371, i64 2238121842, i64 324468741, i64 2185936789, i64 343587042, i64 2922099067, i64 941340172, i64 2609828498, i64 230610405, i64 3085950076, i64 568318731, i64 3570586502, i64 1122161905, i64 4172537192, i64 1854134815, i64 3440819841, i64 1529264630, i64 3782717551, i64 2001188632, i64 3864660104, i64 1885999103, i64 3392865894, i64 1544225041, i64 4288570767, i64 1773036280, i64 3556731745, i64 1171221526, i64 2028079776, i64 4006743511, i64 1417872462, i64 3266511673, i64 1629906855, i64 4145438928, i64 1296525641, i64 3682037310, i64 1248514478, i64 3696940761, i64 1712054080, i64 4030453815, i64 1403960489, i64 3315514334, i64 2144318023, i64 3925849392, i64 485670333, i64 2328017610, i64 814986067, i64 2795746340, i64 87478458, i64 2466699213, i64 693624404, i64 3211254051, i64 779773619, i64 3091882436, i64 35350621, i64 2485874474, i64 935201716, i64 2710441155, i64 467600730, i64 2381251117], [256 x i64] [i64 0, i64 1093737241, i64 2187474482, i64 3277008171, i64 80047204, i64 1173649277, i64 2259114582, i64 3348513103, i64 143317448, i64 1237041873, i64 2330521594, i64 3420058851, i64 206550444, i64 1300147893, i64 2385347486, i64 3474757767, i64 1360183882, i64 270784851, i64 3547395192, i64 2453794657, i64 1440198190, i64 350663991, i64 3619002396, i64 2525266693, i64 1503140738, i64 413728923, i64 3690606000, i64 2597009065, i64 1566406630, i64 476867839, i64 3745464788, i64 2651740877, i64 2720302229, i64 3809845132, i64 541504167, i64 1635232190, i64 2799823089, i64 3889230824, i64 612622019, i64 1706214874, i64 2863553885, i64 3953083972, i64 684485487, i64 1778217078, i64 2926260537, i64 4015663648, i64 738789131, i64 1832393746, i64 4080420575, i64 2986827206, i64 1901359341, i64 811953140, i64 4159908539, i64 3066180002, i64 1972444297, i64 882902928, i64 4223442711, i64 3129836558, i64 2044635429, i64 955232828, i64 4286182259, i64 3192449130, i64 2098971969, i64 1009442392, i64 89094640, i64 1149133545, i64 2267893698, i64 3323745499, i64 25826708, i64 1086000781, i64 2213028774, i64 3269015743, i64 231055416, i64 1291107105, i64 2410124810, i64 3465973011, i64 151047260, i64 1211225925, i64 2338519662, i64 3394494839, i64 1415429050, i64 359440547, i64 3594489224, i64 2534315665, i64 1352194014, i64 296340679, i64 3539657196, i64 2479618805, i64 1557619314, i64 501643627, i64 3736425536, i64 2676248409, i64 1477578262, i64 421729551, i64 3664787492, i64 2604737341, i64 2808872293, i64 3864716924, i64 621398871, i64 1681444942, i64 2746126593, i64 3802106392, i64 567060275, i64 1627241514, i64 2950767789, i64 4006625204, i64 763564703, i64 1823607174, i64 2871281865, i64 3927266256, i64 692485883, i64 1752655330, i64 4135141167, i64 3074958390, i64 1947928861, i64 891949572, i64 4072428363, i64 3012380754, i64 1893623161, i64 837779040, i64 4277397223, i64 3217227262, i64 2089930965, i64 1033948108, i64 4197878403, i64 3137835418, i64 2018819249, i64 962963368, i64 1268286267, i64 178886690, i64 3388650761, i64 2295049744, i64 1331556191, i64 242021446, i64 3443513709, i64 2349777524, i64 1125276403, i64 35865066, i64 3245370561, i64 2151774168, i64 1205286551, i64 115748238, i64 3316973733, i64 2223250364, i64 445268337, i64 1539005032, i64 2565371715, i64 3654904922, i64 508505365, i64 1602106892, i64 2620201767, i64 3709599806, i64 302028985, i64 1395753888, i64 2422386315, i64 3511924114, i64 382072029, i64 1475669956, i64 2494022383, i64 3583433206, i64 3921414062, i64 2827820215, i64 1809723804, i64 720317061, i64 3984157642, i64 2890428627, i64 1864064504, i64 774522593, i64 3778469478, i64 2684863871, i64 1666508884, i64 577106765, i64 3857953282, i64 2764220699, i64 1737589808, i64 648060713, i64 3098461668, i64 4188004093, i64 986510294, i64 2080237775, i64 3161172352, i64 4250579609, i64 1040818098, i64 2134410411, i64 2955156524, i64 4044687157, i64 843459102, i64 1937191175, i64 3034673224, i64 4124076881, i64 914572922, i64 2008178019, i64 1322777291, i64 266789330, i64 3434466553, i64 2374293472, i64 1242732207, i64 186879414, i64 3362824349, i64 2302786436, i64 1180508931, i64 124532762, i64 3292468529, i64 2232290856, i64 1117278055, i64 61428862, i64 3237640533, i64 2177589836, i64 533018753, i64 1593058200, i64 2644971187, i64 3700823466, i64 453006565, i64 1513181180, i64 2573361879, i64 3629349326, i64 391110985, i64 1451162192, i64 2502809467, i64 3558657122, i64 327847213, i64 1388025396, i64 2447948575, i64 3503923206, i64 3975380574, i64 2915198279, i64 1855015020, i64 799036277, i64 3895857722, i64 2835810595, i64 1783899144, i64 728055569, i64 3833178006, i64 2773007503, i64 1713082788, i64 657099453, i64 3770469362, i64 2710425835, i64 1658781120, i64 602924761, i64 3185687572, i64 4241532685, i64 1065585190, i64 2125631807, i64 3106197616, i64 4162177897, i64 994502210, i64 2054683995, i64 3043714524, i64 4099571397, i64 923358190, i64 1983400183, i64 2980972984, i64 4036956833, i64 869023626, i64 1929192595], [256 x i64] [i64 0, i64 929743361, i64 1859421187, i64 1505641986, i64 3701999879, i64 3955411718, i64 2994507012, i64 2232831749, i64 3092321038, i64 2403062031, i64 3599079181, i64 3790558476, i64 1694046729, i64 1402198024, i64 170761738, i64 1028086795, i64 1889740316, i64 1204413469, i64 511156767, i64 689791006, i64 2886414107, i64 2606886170, i64 3269438232, i64 4122306841, i64 3371316498, i64 4288214803, i64 2787553553, i64 2437706512, i64 341457941, i64 590413332, i64 2056173590, i64 1306819095, i64 3762703672, i64 3610021689, i64 2391984443, i64 3120040762, i64 1022247999, i64 193234494, i64 1379582012, i64 1699742269, i64 1477926454, i64 1870502967, i64 918805045, i64 27858996, i64 2227132209, i64 3017119024, i64 3932934962, i64 3707834675, i64 2430954276, i64 2811210021, i64 4264685351, i64 3378195750, i64 1280139811, i64 2066194466, i64 580511264, i64 368256033, i64 682915882, i64 534690347, i64 1180761129, i64 1896496680, i64 4095504685, i64 3279336236, i64 2596861230, i64 2913089327, i64 3230505584, i64 4159133809, i64 2925076083, i64 2570312818, i64 472224631, i64 726618486, i64 1928402804, i64 1167840629, i64 2027719038, i64 1337346943, i64 369626493, i64 560123772, i64 2759098489, i64 2468233848, i64 3399484538, i64 4257924731, i64 2955852908, i64 2269412973, i64 3740940399, i64 3918592622, i64 1820767595, i64 1542223722, i64 38941032, i64 892924777, i64 142585698, i64 1058368867, i64 1722493793, i64 1371662688, i64 3570902629, i64 3820840036, i64 3120767590, i64 2372526183, i64 550229832, i64 396432713, i64 1310675787, i64 2037748042, i64 4234403407, i64 3406371918, i64 2461489740, i64 2782763085, i64 2560279622, i64 2951743047, i64 4132323397, i64 3240395332, i64 1144180033, i64 1935150912, i64 719735106, i64 495749955, i64 1349054804, i64 1728197461, i64 1052538199, i64 165066582, i64 2361456723, i64 3148495442, i64 3792993360, i64 3581853265, i64 3896107610, i64 3746766939, i64 2263705177, i64 2978456664, i64 881978205, i64 66791772, i64 1514499934, i64 1831841119, i64 2149266913, i64 3077699552, i64 4006588898, i64 3651498979, i64 1555250406, i64 1809448679, i64 845658341, i64 84769508, i64 944383727, i64 253813998, i64 1453236972, i64 1643405549, i64 3840028648, i64 3548966377, i64 2318838763, i64 3176950250, i64 4038595581, i64 3352482300, i64 2657916926, i64 2835764735, i64 739252986, i64 461035771, i64 1120182009, i64 1974361336, i64 1223229683, i64 2139341554, i64 641565936, i64 290932465, i64 2487290356, i64 2737556469, i64 4204105207, i64 3456061430, i64 1616738521, i64 1463270104, i64 243924186, i64 971194075, i64 3170202078, i64 2342499295, i64 3525440989, i64 3846911964, i64 3624692695, i64 4016482774, i64 3067670484, i64 2175938005, i64 77882064, i64 869179601, i64 1785784019, i64 1561994450, i64 285105861, i64 664050884, i64 2116737734, i64 1228937415, i64 3428210626, i64 4215051715, i64 2726482881, i64 2515014080, i64 2830061003, i64 2680524746, i64 3330001352, i64 4044426185, i64 1946633420, i64 1131251405, i64 450085071, i64 767099598, i64 1083617169, i64 2013031824, i64 776088466, i64 422111635, i64 2621351574, i64 2874434711, i64 4075430549, i64 3313557652, i64 4173839519, i64 3484253854, i64 2517842076, i64 2709125789, i64 611300760, i64 319125401, i64 1253781915, i64 2110911386, i64 808814989, i64 123685772, i64 1591807374, i64 1770770319, i64 3969745034, i64 3690414731, i64 2185823369, i64 3039020680, i64 2288294531, i64 3205388418, i64 3870301824, i64 3520781441, i64 1422693252, i64 1671844229, i64 974657415, i64 225629574, i64 2698044073, i64 2545557672, i64 3456394922, i64 4184777899, i64 2088299438, i64 1259481519, i64 313290669, i64 633777580, i64 411169191, i64 803943334, i64 1985312164, i64 1094694821, i64 3291084960, i64 4081269409, i64 2868739235, i64 2643967650, i64 3497247925, i64 3877177012, i64 3198632118, i64 2311946935, i64 215731634, i64 1001459635, i64 1645169073, i64 1432718256, i64 1747113915, i64 1598559674, i64 116806584, i64 832344505, i64 3028999868, i64 2212502717, i64 3663616703, i64 3979647166], [256 x i64] [i64 0, i64 1701297336, i64 2345142698, i64 4004492562, i64 1469538959, i64 854646327, i64 3697240869, i64 3107510173, i64 4012422341, i64 2320435325, i64 1692450159, i64 25625047, i64 3099579978, i64 3721947890, i64 863494112, i64 1443914584, i64 2673285456, i64 4197492200, i64 345968890, i64 1912122434, i64 3368057823, i64 2913453927, i64 1124627061, i64 644861645, i64 1887415701, i64 353898797, i64 4223116351, i64 2664437895, i64 669568794, i64 1116697506, i64 2887829168, i64 3376904712, i64 1051669152, i64 1539870232, i64 3043441418, i64 3489695666, i64 1765298223, i64 207613079, i64 3807402373, i64 2274878781, i64 3515319909, i64 3034594013, i64 1515163599, i64 1059599223, i64 2249254122, i64 3816249426, i64 232320320, i64 1757368824, i64 2717395952, i64 3298793288, i64 707797594, i64 1331142370, i64 4134488447, i64 2466837959, i64 2108113109, i64 415300717, i64 1322295093, i64 733422477, i64 3306722975, i64 2692688423, i64 424148410, i64 2082488578, i64 2458907664, i64 4159195304, i64 1029182619, i64 1480566819, i64 3062897969, i64 3556221321, i64 1791981076, i64 262720172, i64 3775365054, i64 2220933894, i64 3530596446, i64 3071745254, i64 1505274356, i64 1021252940, i64 2246558417, i64 3766517353, i64 238013307, i64 1799911363, i64 2718895563, i64 3345527155, i64 700908641, i64 1285601497, i64 4120407876, i64 2432685052, i64 2119198446, i64 456645206, i64 1294448910, i64 675284406, i64 3337597092, i64 2743602204, i64 447798145, i64 2144823097, i64 2440614443, i64 4095700627, i64 66528827, i64 1720752771, i64 2285842321, i64 3982005033, i64 1415595188, i64 822605836, i64 3752348958, i64 3134189990, i64 3974075134, i64 2310549062, i64 1729600340, i64 40904684, i64 3142119537, i64 3727641801, i64 813758939, i64 1441219939, i64 2627747691, i64 4190602195, i64 392705729, i64 1913621113, i64 3409403364, i64 2924536156, i64 1090475086, i64 630778102, i64 1938328494, i64 384775958, i64 4164977156, i64 2636594876, i64 606071073, i64 1098405273, i64 2950160523, i64 3400555571, i64 1001806317, i64 1590814037, i64 2961068103, i64 3575246079, i64 1814117218, i64 155617242, i64 3890819784, i64 2190380656, i64 3567185192, i64 2985906576, i64 1599530114, i64 976312378, i64 2198441895, i64 3865981727, i64 146900493, i64 1839610549, i64 2766225597, i64 3246849029, i64 791234839, i64 1246688687, i64 4084605490, i64 2517737098, i64 2025728920, i64 500799264, i64 1271526520, i64 783173824, i64 3221355986, i64 2774942058, i64 475961079, i64 2033789519, i64 2543230813, i64 4075889637, i64 85551949, i64 1618925557, i64 2396087015, i64 3954630239, i64 1385040322, i64 938063226, i64 3645243496, i64 3156327632, i64 3929137032, i64 2404803376, i64 1643763234, i64 77490842, i64 3181821191, i64 3636527551, i64 913224877, i64 1393100821, i64 2588832285, i64 4280929957, i64 294026167, i64 1960953615, i64 3453554834, i64 2831068202, i64 1175525688, i64 594978176, i64 1969669848, i64 268532320, i64 4272869234, i64 2613670858, i64 586261591, i64 1201019119, i64 2839129597, i64 3428716869, i64 116280694, i64 1669984718, i64 2368095452, i64 3896637540, i64 1366896633, i64 874419009, i64 3669042771, i64 3218512619, i64 3922131379, i64 2359379211, i64 1645146137, i64 124341409, i64 3193019196, i64 3677759364, i64 899256982, i64 1358835246, i64 2579059750, i64 4242466974, i64 309419404, i64 1997988148, i64 3459135145, i64 2873723409, i64 1172717315, i64 545358779, i64 1989271779, i64 334912603, i64 4250528073, i64 2554222065, i64 554074732, i64 1147223764, i64 2865662918, i64 3483973502, i64 943816662, i64 1562821486, i64 3012130428, i64 3605973700, i64 1876303193, i64 179413473, i64 3827176691, i64 2172233803, i64 3614034707, i64 2987292587, i64 1554105017, i64 969309697, i64 2164173212, i64 3852014884, i64 188129334, i64 1850809486, i64 2803263110, i64 3262241342, i64 752774956, i64 1236915092, i64 4034987017, i64 2514925745, i64 2068385187, i64 506376475, i64 1212076611, i64 760835835, i64 3287735273, i64 2794547025, i64 531214540, i64 2060323956, i64 2489432422, i64 4043703774]], align 16

; Function Attrs: nounwind uwtable
define i64* @cm_zlib_get_crc_table() #0 !dbg !21 {
entry:
  ret i64* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i32 0, i32 0, i32 0), !dbg !56
}

; Function Attrs: nounwind uwtable
define i64 @cm_zlib_crc32(i64 %crc, i8* %buf, i32 %len) #0 !dbg !29 {
entry:
  %retval = alloca i64, align 8
  %crc.addr = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %endian = alloca i32, align 4
  store i64 %crc, i64* %crc.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %crc.addr, metadata !57, metadata !58), !dbg !59
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !60, metadata !58), !dbg !61
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !62, metadata !58), !dbg !63
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !64
  %cmp = icmp eq i8* %0, null, !dbg !66
  br i1 %cmp, label %if.then, label %if.end, !dbg !67

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8, !dbg !68
  br label %return, !dbg !68

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %endian, metadata !70, metadata !58), !dbg !73
  store i32 1, i32* %endian, align 4, !dbg !74
  %1 = bitcast i32* %endian to i8*, !dbg !75
  %2 = load i8, i8* %1, align 4, !dbg !75
  %tobool = icmp ne i8 %2, 0, !dbg !75
  br i1 %tobool, label %if.then1, label %if.else, !dbg !77

if.then1:                                         ; preds = %if.end
  %3 = load i64, i64* %crc.addr, align 8, !dbg !78
  %4 = load i8*, i8** %buf.addr, align 8, !dbg !79
  %5 = load i32, i32* %len.addr, align 4, !dbg !80
  %call = call i64 @crc32_little(i64 %3, i8* %4, i32 %5), !dbg !81
  store i64 %call, i64* %retval, align 8, !dbg !82
  br label %return, !dbg !82

if.else:                                          ; preds = %if.end
  %6 = load i64, i64* %crc.addr, align 8, !dbg !83
  %7 = load i8*, i8** %buf.addr, align 8, !dbg !84
  %8 = load i32, i32* %len.addr, align 4, !dbg !85
  %call2 = call i64 @crc32_big(i64 %6, i8* %7, i32 %8), !dbg !86
  store i64 %call2, i64* %retval, align 8, !dbg !87
  br label %return, !dbg !87

return:                                           ; preds = %if.else, %if.then1, %if.then
  %9 = load i64, i64* %retval, align 8, !dbg !88
  ret i64 %9, !dbg !88
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define internal i64 @crc32_little(i64 %crc, i8* %buf, i32 %len) #0 !dbg !35 {
entry:
  %crc.addr = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %c = alloca i32, align 4
  %buf4 = alloca i32*, align 8
  store i64 %crc, i64* %crc.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %crc.addr, metadata !89, metadata !58), !dbg !90
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !91, metadata !58), !dbg !92
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !93, metadata !58), !dbg !94
  call void @llvm.dbg.declare(metadata i32* %c, metadata !95, metadata !58), !dbg !96
  call void @llvm.dbg.declare(metadata i32** %buf4, metadata !97, metadata !58), !dbg !98
  %0 = load i64, i64* %crc.addr, align 8, !dbg !99
  %conv = trunc i64 %0 to i32, !dbg !100
  store i32 %conv, i32* %c, align 4, !dbg !101
  %1 = load i32, i32* %c, align 4, !dbg !102
  %neg = xor i32 %1, -1, !dbg !103
  store i32 %neg, i32* %c, align 4, !dbg !104
  br label %while.cond, !dbg !105

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %len.addr, align 4, !dbg !106
  %tobool = icmp ne i32 %2, 0, !dbg !106
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !108

land.rhs:                                         ; preds = %while.cond
  %3 = load i8*, i8** %buf.addr, align 8, !dbg !109
  %4 = ptrtoint i8* %3 to i64, !dbg !111
  %and = and i64 %4, 3, !dbg !112
  %tobool1 = icmp ne i64 %and, 0, !dbg !113
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %tobool1, %land.rhs ]
  br i1 %5, label %while.body, label %while.end, !dbg !114

while.body:                                       ; preds = %land.end
  %6 = load i32, i32* %c, align 4, !dbg !116
  %7 = load i8*, i8** %buf.addr, align 8, !dbg !118
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1, !dbg !118
  store i8* %incdec.ptr, i8** %buf.addr, align 8, !dbg !118
  %8 = load i8, i8* %7, align 1, !dbg !119
  %conv2 = zext i8 %8 to i32, !dbg !119
  %xor = xor i32 %6, %conv2, !dbg !120
  %and3 = and i32 %xor, 255, !dbg !121
  %idxprom = zext i32 %and3 to i64, !dbg !122
  %arrayidx = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 0), i64 0, i64 %idxprom, !dbg !122
  %9 = load i64, i64* %arrayidx, align 8, !dbg !122
  %10 = load i32, i32* %c, align 4, !dbg !123
  %shr = lshr i32 %10, 8, !dbg !124
  %conv4 = zext i32 %shr to i64, !dbg !125
  %xor5 = xor i64 %9, %conv4, !dbg !126
  %conv6 = trunc i64 %xor5 to i32, !dbg !122
  store i32 %conv6, i32* %c, align 4, !dbg !127
  %11 = load i32, i32* %len.addr, align 4, !dbg !128
  %dec = add i32 %11, -1, !dbg !128
  store i32 %dec, i32* %len.addr, align 4, !dbg !128
  br label %while.cond, !dbg !129

while.end:                                        ; preds = %land.end
  %12 = load i8*, i8** %buf.addr, align 8, !dbg !131
  %13 = bitcast i8* %12 to i32*, !dbg !132
  store i32* %13, i32** %buf4, align 8, !dbg !133
  br label %while.cond7, !dbg !134

while.cond7:                                      ; preds = %while.body9, %while.end
  %14 = load i32, i32* %len.addr, align 4, !dbg !135
  %cmp = icmp uge i32 %14, 32, !dbg !136
  br i1 %cmp, label %while.body9, label %while.end170, !dbg !137

while.body9:                                      ; preds = %while.cond7
  %15 = load i32*, i32** %buf4, align 8, !dbg !138
  %incdec.ptr10 = getelementptr inbounds i32, i32* %15, i32 1, !dbg !138
  store i32* %incdec.ptr10, i32** %buf4, align 8, !dbg !138
  %16 = load i32, i32* %15, align 4, !dbg !138
  %17 = load i32, i32* %c, align 4, !dbg !138
  %xor11 = xor i32 %17, %16, !dbg !138
  store i32 %xor11, i32* %c, align 4, !dbg !138
  %18 = load i32, i32* %c, align 4, !dbg !138
  %and12 = and i32 %18, 255, !dbg !138
  %idxprom13 = zext i32 %and12 to i64, !dbg !138
  %arrayidx14 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 3), i64 0, i64 %idxprom13, !dbg !138
  %19 = load i64, i64* %arrayidx14, align 8, !dbg !138
  %20 = load i32, i32* %c, align 4, !dbg !138
  %shr15 = lshr i32 %20, 8, !dbg !138
  %and16 = and i32 %shr15, 255, !dbg !138
  %idxprom17 = zext i32 %and16 to i64, !dbg !138
  %arrayidx18 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 2), i64 0, i64 %idxprom17, !dbg !138
  %21 = load i64, i64* %arrayidx18, align 8, !dbg !138
  %xor19 = xor i64 %19, %21, !dbg !138
  %22 = load i32, i32* %c, align 4, !dbg !138
  %shr20 = lshr i32 %22, 16, !dbg !138
  %and21 = and i32 %shr20, 255, !dbg !138
  %idxprom22 = zext i32 %and21 to i64, !dbg !138
  %arrayidx23 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 1), i64 0, i64 %idxprom22, !dbg !138
  %23 = load i64, i64* %arrayidx23, align 8, !dbg !138
  %xor24 = xor i64 %xor19, %23, !dbg !138
  %24 = load i32, i32* %c, align 4, !dbg !138
  %shr25 = lshr i32 %24, 24, !dbg !138
  %idxprom26 = zext i32 %shr25 to i64, !dbg !138
  %arrayidx27 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 0), i64 0, i64 %idxprom26, !dbg !138
  %25 = load i64, i64* %arrayidx27, align 8, !dbg !138
  %xor28 = xor i64 %xor24, %25, !dbg !138
  %conv29 = trunc i64 %xor28 to i32, !dbg !138
  store i32 %conv29, i32* %c, align 4, !dbg !138
  %26 = load i32*, i32** %buf4, align 8, !dbg !138
  %incdec.ptr30 = getelementptr inbounds i32, i32* %26, i32 1, !dbg !138
  store i32* %incdec.ptr30, i32** %buf4, align 8, !dbg !138
  %27 = load i32, i32* %26, align 4, !dbg !138
  %28 = load i32, i32* %c, align 4, !dbg !138
  %xor31 = xor i32 %28, %27, !dbg !138
  store i32 %xor31, i32* %c, align 4, !dbg !138
  %29 = load i32, i32* %c, align 4, !dbg !138
  %and32 = and i32 %29, 255, !dbg !138
  %idxprom33 = zext i32 %and32 to i64, !dbg !138
  %arrayidx34 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 3), i64 0, i64 %idxprom33, !dbg !138
  %30 = load i64, i64* %arrayidx34, align 8, !dbg !138
  %31 = load i32, i32* %c, align 4, !dbg !138
  %shr35 = lshr i32 %31, 8, !dbg !138
  %and36 = and i32 %shr35, 255, !dbg !138
  %idxprom37 = zext i32 %and36 to i64, !dbg !138
  %arrayidx38 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 2), i64 0, i64 %idxprom37, !dbg !138
  %32 = load i64, i64* %arrayidx38, align 8, !dbg !138
  %xor39 = xor i64 %30, %32, !dbg !138
  %33 = load i32, i32* %c, align 4, !dbg !138
  %shr40 = lshr i32 %33, 16, !dbg !138
  %and41 = and i32 %shr40, 255, !dbg !138
  %idxprom42 = zext i32 %and41 to i64, !dbg !138
  %arrayidx43 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 1), i64 0, i64 %idxprom42, !dbg !138
  %34 = load i64, i64* %arrayidx43, align 8, !dbg !138
  %xor44 = xor i64 %xor39, %34, !dbg !138
  %35 = load i32, i32* %c, align 4, !dbg !138
  %shr45 = lshr i32 %35, 24, !dbg !138
  %idxprom46 = zext i32 %shr45 to i64, !dbg !138
  %arrayidx47 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 0), i64 0, i64 %idxprom46, !dbg !138
  %36 = load i64, i64* %arrayidx47, align 8, !dbg !138
  %xor48 = xor i64 %xor44, %36, !dbg !138
  %conv49 = trunc i64 %xor48 to i32, !dbg !138
  store i32 %conv49, i32* %c, align 4, !dbg !138
  %37 = load i32*, i32** %buf4, align 8, !dbg !138
  %incdec.ptr50 = getelementptr inbounds i32, i32* %37, i32 1, !dbg !138
  store i32* %incdec.ptr50, i32** %buf4, align 8, !dbg !138
  %38 = load i32, i32* %37, align 4, !dbg !138
  %39 = load i32, i32* %c, align 4, !dbg !138
  %xor51 = xor i32 %39, %38, !dbg !138
  store i32 %xor51, i32* %c, align 4, !dbg !138
  %40 = load i32, i32* %c, align 4, !dbg !138
  %and52 = and i32 %40, 255, !dbg !138
  %idxprom53 = zext i32 %and52 to i64, !dbg !138
  %arrayidx54 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 3), i64 0, i64 %idxprom53, !dbg !138
  %41 = load i64, i64* %arrayidx54, align 8, !dbg !138
  %42 = load i32, i32* %c, align 4, !dbg !138
  %shr55 = lshr i32 %42, 8, !dbg !138
  %and56 = and i32 %shr55, 255, !dbg !138
  %idxprom57 = zext i32 %and56 to i64, !dbg !138
  %arrayidx58 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 2), i64 0, i64 %idxprom57, !dbg !138
  %43 = load i64, i64* %arrayidx58, align 8, !dbg !138
  %xor59 = xor i64 %41, %43, !dbg !138
  %44 = load i32, i32* %c, align 4, !dbg !138
  %shr60 = lshr i32 %44, 16, !dbg !138
  %and61 = and i32 %shr60, 255, !dbg !138
  %idxprom62 = zext i32 %and61 to i64, !dbg !138
  %arrayidx63 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 1), i64 0, i64 %idxprom62, !dbg !138
  %45 = load i64, i64* %arrayidx63, align 8, !dbg !138
  %xor64 = xor i64 %xor59, %45, !dbg !138
  %46 = load i32, i32* %c, align 4, !dbg !138
  %shr65 = lshr i32 %46, 24, !dbg !138
  %idxprom66 = zext i32 %shr65 to i64, !dbg !138
  %arrayidx67 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 0), i64 0, i64 %idxprom66, !dbg !138
  %47 = load i64, i64* %arrayidx67, align 8, !dbg !138
  %xor68 = xor i64 %xor64, %47, !dbg !138
  %conv69 = trunc i64 %xor68 to i32, !dbg !138
  store i32 %conv69, i32* %c, align 4, !dbg !138
  %48 = load i32*, i32** %buf4, align 8, !dbg !138
  %incdec.ptr70 = getelementptr inbounds i32, i32* %48, i32 1, !dbg !138
  store i32* %incdec.ptr70, i32** %buf4, align 8, !dbg !138
  %49 = load i32, i32* %48, align 4, !dbg !138
  %50 = load i32, i32* %c, align 4, !dbg !138
  %xor71 = xor i32 %50, %49, !dbg !138
  store i32 %xor71, i32* %c, align 4, !dbg !138
  %51 = load i32, i32* %c, align 4, !dbg !138
  %and72 = and i32 %51, 255, !dbg !138
  %idxprom73 = zext i32 %and72 to i64, !dbg !138
  %arrayidx74 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 3), i64 0, i64 %idxprom73, !dbg !138
  %52 = load i64, i64* %arrayidx74, align 8, !dbg !138
  %53 = load i32, i32* %c, align 4, !dbg !138
  %shr75 = lshr i32 %53, 8, !dbg !138
  %and76 = and i32 %shr75, 255, !dbg !138
  %idxprom77 = zext i32 %and76 to i64, !dbg !138
  %arrayidx78 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 2), i64 0, i64 %idxprom77, !dbg !138
  %54 = load i64, i64* %arrayidx78, align 8, !dbg !138
  %xor79 = xor i64 %52, %54, !dbg !138
  %55 = load i32, i32* %c, align 4, !dbg !138
  %shr80 = lshr i32 %55, 16, !dbg !138
  %and81 = and i32 %shr80, 255, !dbg !138
  %idxprom82 = zext i32 %and81 to i64, !dbg !138
  %arrayidx83 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 1), i64 0, i64 %idxprom82, !dbg !138
  %56 = load i64, i64* %arrayidx83, align 8, !dbg !138
  %xor84 = xor i64 %xor79, %56, !dbg !138
  %57 = load i32, i32* %c, align 4, !dbg !138
  %shr85 = lshr i32 %57, 24, !dbg !138
  %idxprom86 = zext i32 %shr85 to i64, !dbg !138
  %arrayidx87 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 0), i64 0, i64 %idxprom86, !dbg !138
  %58 = load i64, i64* %arrayidx87, align 8, !dbg !138
  %xor88 = xor i64 %xor84, %58, !dbg !138
  %conv89 = trunc i64 %xor88 to i32, !dbg !138
  store i32 %conv89, i32* %c, align 4, !dbg !138
  %59 = load i32*, i32** %buf4, align 8, !dbg !138
  %incdec.ptr90 = getelementptr inbounds i32, i32* %59, i32 1, !dbg !138
  store i32* %incdec.ptr90, i32** %buf4, align 8, !dbg !138
  %60 = load i32, i32* %59, align 4, !dbg !138
  %61 = load i32, i32* %c, align 4, !dbg !138
  %xor91 = xor i32 %61, %60, !dbg !138
  store i32 %xor91, i32* %c, align 4, !dbg !138
  %62 = load i32, i32* %c, align 4, !dbg !138
  %and92 = and i32 %62, 255, !dbg !138
  %idxprom93 = zext i32 %and92 to i64, !dbg !138
  %arrayidx94 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 3), i64 0, i64 %idxprom93, !dbg !138
  %63 = load i64, i64* %arrayidx94, align 8, !dbg !138
  %64 = load i32, i32* %c, align 4, !dbg !138
  %shr95 = lshr i32 %64, 8, !dbg !138
  %and96 = and i32 %shr95, 255, !dbg !138
  %idxprom97 = zext i32 %and96 to i64, !dbg !138
  %arrayidx98 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 2), i64 0, i64 %idxprom97, !dbg !138
  %65 = load i64, i64* %arrayidx98, align 8, !dbg !138
  %xor99 = xor i64 %63, %65, !dbg !138
  %66 = load i32, i32* %c, align 4, !dbg !138
  %shr100 = lshr i32 %66, 16, !dbg !138
  %and101 = and i32 %shr100, 255, !dbg !138
  %idxprom102 = zext i32 %and101 to i64, !dbg !138
  %arrayidx103 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 1), i64 0, i64 %idxprom102, !dbg !138
  %67 = load i64, i64* %arrayidx103, align 8, !dbg !138
  %xor104 = xor i64 %xor99, %67, !dbg !138
  %68 = load i32, i32* %c, align 4, !dbg !138
  %shr105 = lshr i32 %68, 24, !dbg !138
  %idxprom106 = zext i32 %shr105 to i64, !dbg !138
  %arrayidx107 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 0), i64 0, i64 %idxprom106, !dbg !138
  %69 = load i64, i64* %arrayidx107, align 8, !dbg !138
  %xor108 = xor i64 %xor104, %69, !dbg !138
  %conv109 = trunc i64 %xor108 to i32, !dbg !138
  store i32 %conv109, i32* %c, align 4, !dbg !138
  %70 = load i32*, i32** %buf4, align 8, !dbg !138
  %incdec.ptr110 = getelementptr inbounds i32, i32* %70, i32 1, !dbg !138
  store i32* %incdec.ptr110, i32** %buf4, align 8, !dbg !138
  %71 = load i32, i32* %70, align 4, !dbg !138
  %72 = load i32, i32* %c, align 4, !dbg !138
  %xor111 = xor i32 %72, %71, !dbg !138
  store i32 %xor111, i32* %c, align 4, !dbg !138
  %73 = load i32, i32* %c, align 4, !dbg !138
  %and112 = and i32 %73, 255, !dbg !138
  %idxprom113 = zext i32 %and112 to i64, !dbg !138
  %arrayidx114 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 3), i64 0, i64 %idxprom113, !dbg !138
  %74 = load i64, i64* %arrayidx114, align 8, !dbg !138
  %75 = load i32, i32* %c, align 4, !dbg !138
  %shr115 = lshr i32 %75, 8, !dbg !138
  %and116 = and i32 %shr115, 255, !dbg !138
  %idxprom117 = zext i32 %and116 to i64, !dbg !138
  %arrayidx118 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 2), i64 0, i64 %idxprom117, !dbg !138
  %76 = load i64, i64* %arrayidx118, align 8, !dbg !138
  %xor119 = xor i64 %74, %76, !dbg !138
  %77 = load i32, i32* %c, align 4, !dbg !138
  %shr120 = lshr i32 %77, 16, !dbg !138
  %and121 = and i32 %shr120, 255, !dbg !138
  %idxprom122 = zext i32 %and121 to i64, !dbg !138
  %arrayidx123 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 1), i64 0, i64 %idxprom122, !dbg !138
  %78 = load i64, i64* %arrayidx123, align 8, !dbg !138
  %xor124 = xor i64 %xor119, %78, !dbg !138
  %79 = load i32, i32* %c, align 4, !dbg !138
  %shr125 = lshr i32 %79, 24, !dbg !138
  %idxprom126 = zext i32 %shr125 to i64, !dbg !138
  %arrayidx127 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 0), i64 0, i64 %idxprom126, !dbg !138
  %80 = load i64, i64* %arrayidx127, align 8, !dbg !138
  %xor128 = xor i64 %xor124, %80, !dbg !138
  %conv129 = trunc i64 %xor128 to i32, !dbg !138
  store i32 %conv129, i32* %c, align 4, !dbg !138
  %81 = load i32*, i32** %buf4, align 8, !dbg !138
  %incdec.ptr130 = getelementptr inbounds i32, i32* %81, i32 1, !dbg !138
  store i32* %incdec.ptr130, i32** %buf4, align 8, !dbg !138
  %82 = load i32, i32* %81, align 4, !dbg !138
  %83 = load i32, i32* %c, align 4, !dbg !138
  %xor131 = xor i32 %83, %82, !dbg !138
  store i32 %xor131, i32* %c, align 4, !dbg !138
  %84 = load i32, i32* %c, align 4, !dbg !138
  %and132 = and i32 %84, 255, !dbg !138
  %idxprom133 = zext i32 %and132 to i64, !dbg !138
  %arrayidx134 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 3), i64 0, i64 %idxprom133, !dbg !138
  %85 = load i64, i64* %arrayidx134, align 8, !dbg !138
  %86 = load i32, i32* %c, align 4, !dbg !138
  %shr135 = lshr i32 %86, 8, !dbg !138
  %and136 = and i32 %shr135, 255, !dbg !138
  %idxprom137 = zext i32 %and136 to i64, !dbg !138
  %arrayidx138 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 2), i64 0, i64 %idxprom137, !dbg !138
  %87 = load i64, i64* %arrayidx138, align 8, !dbg !138
  %xor139 = xor i64 %85, %87, !dbg !138
  %88 = load i32, i32* %c, align 4, !dbg !138
  %shr140 = lshr i32 %88, 16, !dbg !138
  %and141 = and i32 %shr140, 255, !dbg !138
  %idxprom142 = zext i32 %and141 to i64, !dbg !138
  %arrayidx143 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 1), i64 0, i64 %idxprom142, !dbg !138
  %89 = load i64, i64* %arrayidx143, align 8, !dbg !138
  %xor144 = xor i64 %xor139, %89, !dbg !138
  %90 = load i32, i32* %c, align 4, !dbg !138
  %shr145 = lshr i32 %90, 24, !dbg !138
  %idxprom146 = zext i32 %shr145 to i64, !dbg !138
  %arrayidx147 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 0), i64 0, i64 %idxprom146, !dbg !138
  %91 = load i64, i64* %arrayidx147, align 8, !dbg !138
  %xor148 = xor i64 %xor144, %91, !dbg !138
  %conv149 = trunc i64 %xor148 to i32, !dbg !138
  store i32 %conv149, i32* %c, align 4, !dbg !138
  %92 = load i32*, i32** %buf4, align 8, !dbg !138
  %incdec.ptr150 = getelementptr inbounds i32, i32* %92, i32 1, !dbg !138
  store i32* %incdec.ptr150, i32** %buf4, align 8, !dbg !138
  %93 = load i32, i32* %92, align 4, !dbg !138
  %94 = load i32, i32* %c, align 4, !dbg !138
  %xor151 = xor i32 %94, %93, !dbg !138
  store i32 %xor151, i32* %c, align 4, !dbg !138
  %95 = load i32, i32* %c, align 4, !dbg !138
  %and152 = and i32 %95, 255, !dbg !138
  %idxprom153 = zext i32 %and152 to i64, !dbg !138
  %arrayidx154 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 3), i64 0, i64 %idxprom153, !dbg !138
  %96 = load i64, i64* %arrayidx154, align 8, !dbg !138
  %97 = load i32, i32* %c, align 4, !dbg !138
  %shr155 = lshr i32 %97, 8, !dbg !138
  %and156 = and i32 %shr155, 255, !dbg !138
  %idxprom157 = zext i32 %and156 to i64, !dbg !138
  %arrayidx158 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 2), i64 0, i64 %idxprom157, !dbg !138
  %98 = load i64, i64* %arrayidx158, align 8, !dbg !138
  %xor159 = xor i64 %96, %98, !dbg !138
  %99 = load i32, i32* %c, align 4, !dbg !138
  %shr160 = lshr i32 %99, 16, !dbg !138
  %and161 = and i32 %shr160, 255, !dbg !138
  %idxprom162 = zext i32 %and161 to i64, !dbg !138
  %arrayidx163 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 1), i64 0, i64 %idxprom162, !dbg !138
  %100 = load i64, i64* %arrayidx163, align 8, !dbg !138
  %xor164 = xor i64 %xor159, %100, !dbg !138
  %101 = load i32, i32* %c, align 4, !dbg !138
  %shr165 = lshr i32 %101, 24, !dbg !138
  %idxprom166 = zext i32 %shr165 to i64, !dbg !138
  %arrayidx167 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 0), i64 0, i64 %idxprom166, !dbg !138
  %102 = load i64, i64* %arrayidx167, align 8, !dbg !138
  %xor168 = xor i64 %xor164, %102, !dbg !138
  %conv169 = trunc i64 %xor168 to i32, !dbg !138
  store i32 %conv169, i32* %c, align 4, !dbg !138
  %103 = load i32, i32* %len.addr, align 4, !dbg !140
  %sub = sub i32 %103, 32, !dbg !140
  store i32 %sub, i32* %len.addr, align 4, !dbg !140
  br label %while.cond7, !dbg !141

while.end170:                                     ; preds = %while.cond7
  br label %while.cond171, !dbg !142

while.cond171:                                    ; preds = %while.body174, %while.end170
  %104 = load i32, i32* %len.addr, align 4, !dbg !143
  %cmp172 = icmp uge i32 %104, 4, !dbg !144
  br i1 %cmp172, label %while.body174, label %while.end196, !dbg !145

while.body174:                                    ; preds = %while.cond171
  %105 = load i32*, i32** %buf4, align 8, !dbg !146
  %incdec.ptr175 = getelementptr inbounds i32, i32* %105, i32 1, !dbg !146
  store i32* %incdec.ptr175, i32** %buf4, align 8, !dbg !146
  %106 = load i32, i32* %105, align 4, !dbg !146
  %107 = load i32, i32* %c, align 4, !dbg !146
  %xor176 = xor i32 %107, %106, !dbg !146
  store i32 %xor176, i32* %c, align 4, !dbg !146
  %108 = load i32, i32* %c, align 4, !dbg !146
  %and177 = and i32 %108, 255, !dbg !146
  %idxprom178 = zext i32 %and177 to i64, !dbg !146
  %arrayidx179 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 3), i64 0, i64 %idxprom178, !dbg !146
  %109 = load i64, i64* %arrayidx179, align 8, !dbg !146
  %110 = load i32, i32* %c, align 4, !dbg !146
  %shr180 = lshr i32 %110, 8, !dbg !146
  %and181 = and i32 %shr180, 255, !dbg !146
  %idxprom182 = zext i32 %and181 to i64, !dbg !146
  %arrayidx183 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 2), i64 0, i64 %idxprom182, !dbg !146
  %111 = load i64, i64* %arrayidx183, align 8, !dbg !146
  %xor184 = xor i64 %109, %111, !dbg !146
  %112 = load i32, i32* %c, align 4, !dbg !146
  %shr185 = lshr i32 %112, 16, !dbg !146
  %and186 = and i32 %shr185, 255, !dbg !146
  %idxprom187 = zext i32 %and186 to i64, !dbg !146
  %arrayidx188 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 1), i64 0, i64 %idxprom187, !dbg !146
  %113 = load i64, i64* %arrayidx188, align 8, !dbg !146
  %xor189 = xor i64 %xor184, %113, !dbg !146
  %114 = load i32, i32* %c, align 4, !dbg !146
  %shr190 = lshr i32 %114, 24, !dbg !146
  %idxprom191 = zext i32 %shr190 to i64, !dbg !146
  %arrayidx192 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 0), i64 0, i64 %idxprom191, !dbg !146
  %115 = load i64, i64* %arrayidx192, align 8, !dbg !146
  %xor193 = xor i64 %xor189, %115, !dbg !146
  %conv194 = trunc i64 %xor193 to i32, !dbg !146
  store i32 %conv194, i32* %c, align 4, !dbg !146
  %116 = load i32, i32* %len.addr, align 4, !dbg !148
  %sub195 = sub i32 %116, 4, !dbg !148
  store i32 %sub195, i32* %len.addr, align 4, !dbg !148
  br label %while.cond171, !dbg !149

while.end196:                                     ; preds = %while.cond171
  %117 = load i32*, i32** %buf4, align 8, !dbg !150
  %118 = bitcast i32* %117 to i8*, !dbg !151
  store i8* %118, i8** %buf.addr, align 8, !dbg !152
  %119 = load i32, i32* %len.addr, align 4, !dbg !153
  %tobool197 = icmp ne i32 %119, 0, !dbg !153
  br i1 %tobool197, label %if.then, label %if.end, !dbg !155

if.then:                                          ; preds = %while.end196
  br label %do.body, !dbg !156

do.body:                                          ; preds = %do.cond, %if.then
  %120 = load i32, i32* %c, align 4, !dbg !158
  %121 = load i8*, i8** %buf.addr, align 8, !dbg !160
  %incdec.ptr198 = getelementptr inbounds i8, i8* %121, i32 1, !dbg !160
  store i8* %incdec.ptr198, i8** %buf.addr, align 8, !dbg !160
  %122 = load i8, i8* %121, align 1, !dbg !161
  %conv199 = zext i8 %122 to i32, !dbg !161
  %xor200 = xor i32 %120, %conv199, !dbg !162
  %and201 = and i32 %xor200, 255, !dbg !163
  %idxprom202 = zext i32 %and201 to i64, !dbg !164
  %arrayidx203 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 0), i64 0, i64 %idxprom202, !dbg !164
  %123 = load i64, i64* %arrayidx203, align 8, !dbg !164
  %124 = load i32, i32* %c, align 4, !dbg !165
  %shr204 = lshr i32 %124, 8, !dbg !166
  %conv205 = zext i32 %shr204 to i64, !dbg !167
  %xor206 = xor i64 %123, %conv205, !dbg !168
  %conv207 = trunc i64 %xor206 to i32, !dbg !164
  store i32 %conv207, i32* %c, align 4, !dbg !169
  br label %do.cond, !dbg !170

do.cond:                                          ; preds = %do.body
  %125 = load i32, i32* %len.addr, align 4, !dbg !171
  %dec208 = add i32 %125, -1, !dbg !171
  store i32 %dec208, i32* %len.addr, align 4, !dbg !171
  %tobool209 = icmp ne i32 %dec208, 0, !dbg !172
  br i1 %tobool209, label %do.body, label %do.end, !dbg !172

do.end:                                           ; preds = %do.cond
  br label %if.end, !dbg !173

if.end:                                           ; preds = %do.end, %while.end196
  %126 = load i32, i32* %c, align 4, !dbg !175
  %neg210 = xor i32 %126, -1, !dbg !176
  store i32 %neg210, i32* %c, align 4, !dbg !177
  %127 = load i32, i32* %c, align 4, !dbg !178
  %conv211 = zext i32 %127 to i64, !dbg !179
  ret i64 %conv211, !dbg !180
}

; Function Attrs: nounwind uwtable
define internal i64 @crc32_big(i64 %crc, i8* %buf, i32 %len) #0 !dbg !38 {
entry:
  %crc.addr = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %c = alloca i32, align 4
  %buf4 = alloca i32*, align 8
  store i64 %crc, i64* %crc.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %crc.addr, metadata !181, metadata !58), !dbg !182
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !183, metadata !58), !dbg !184
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !185, metadata !58), !dbg !186
  call void @llvm.dbg.declare(metadata i32* %c, metadata !187, metadata !58), !dbg !188
  call void @llvm.dbg.declare(metadata i32** %buf4, metadata !189, metadata !58), !dbg !190
  %0 = load i64, i64* %crc.addr, align 8, !dbg !191
  %conv = trunc i64 %0 to i32, !dbg !191
  %shr = lshr i32 %conv, 24, !dbg !191
  %1 = load i64, i64* %crc.addr, align 8, !dbg !191
  %conv1 = trunc i64 %1 to i32, !dbg !191
  %shr2 = lshr i32 %conv1, 8, !dbg !191
  %and = and i32 %shr2, 65280, !dbg !191
  %add = add i32 %shr, %and, !dbg !191
  %2 = load i64, i64* %crc.addr, align 8, !dbg !191
  %conv3 = trunc i64 %2 to i32, !dbg !191
  %and4 = and i32 %conv3, 65280, !dbg !191
  %shl = shl i32 %and4, 8, !dbg !191
  %add5 = add i32 %add, %shl, !dbg !191
  %3 = load i64, i64* %crc.addr, align 8, !dbg !191
  %conv6 = trunc i64 %3 to i32, !dbg !191
  %and7 = and i32 %conv6, 255, !dbg !191
  %shl8 = shl i32 %and7, 24, !dbg !191
  %add9 = add i32 %add5, %shl8, !dbg !191
  store i32 %add9, i32* %c, align 4, !dbg !192
  %4 = load i32, i32* %c, align 4, !dbg !193
  %neg = xor i32 %4, -1, !dbg !194
  store i32 %neg, i32* %c, align 4, !dbg !195
  br label %while.cond, !dbg !196

while.cond:                                       ; preds = %while.body, %entry
  %5 = load i32, i32* %len.addr, align 4, !dbg !197
  %tobool = icmp ne i32 %5, 0, !dbg !197
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !199

land.rhs:                                         ; preds = %while.cond
  %6 = load i8*, i8** %buf.addr, align 8, !dbg !200
  %7 = ptrtoint i8* %6 to i64, !dbg !202
  %and10 = and i64 %7, 3, !dbg !203
  %tobool11 = icmp ne i64 %and10, 0, !dbg !204
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %tobool11, %land.rhs ]
  br i1 %8, label %while.body, label %while.end, !dbg !205

while.body:                                       ; preds = %land.end
  %9 = load i32, i32* %c, align 4, !dbg !207
  %shr12 = lshr i32 %9, 24, !dbg !209
  %10 = load i8*, i8** %buf.addr, align 8, !dbg !210
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1, !dbg !210
  store i8* %incdec.ptr, i8** %buf.addr, align 8, !dbg !210
  %11 = load i8, i8* %10, align 1, !dbg !211
  %conv13 = zext i8 %11 to i32, !dbg !211
  %xor = xor i32 %shr12, %conv13, !dbg !212
  %idxprom = zext i32 %xor to i64, !dbg !213
  %arrayidx = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 4), i64 0, i64 %idxprom, !dbg !213
  %12 = load i64, i64* %arrayidx, align 8, !dbg !213
  %13 = load i32, i32* %c, align 4, !dbg !214
  %shl14 = shl i32 %13, 8, !dbg !215
  %conv15 = zext i32 %shl14 to i64, !dbg !216
  %xor16 = xor i64 %12, %conv15, !dbg !217
  %conv17 = trunc i64 %xor16 to i32, !dbg !213
  store i32 %conv17, i32* %c, align 4, !dbg !218
  %14 = load i32, i32* %len.addr, align 4, !dbg !219
  %dec = add i32 %14, -1, !dbg !219
  store i32 %dec, i32* %len.addr, align 4, !dbg !219
  br label %while.cond, !dbg !220

while.end:                                        ; preds = %land.end
  %15 = load i8*, i8** %buf.addr, align 8, !dbg !222
  %16 = bitcast i8* %15 to i32*, !dbg !223
  store i32* %16, i32** %buf4, align 8, !dbg !224
  %17 = load i32*, i32** %buf4, align 8, !dbg !225
  %incdec.ptr18 = getelementptr inbounds i32, i32* %17, i32 -1, !dbg !225
  store i32* %incdec.ptr18, i32** %buf4, align 8, !dbg !225
  br label %while.cond19, !dbg !226

while.cond19:                                     ; preds = %while.body21, %while.end
  %18 = load i32, i32* %len.addr, align 4, !dbg !227
  %cmp = icmp uge i32 %18, 32, !dbg !228
  br i1 %cmp, label %while.body21, label %while.end182, !dbg !229

while.body21:                                     ; preds = %while.cond19
  %19 = load i32*, i32** %buf4, align 8, !dbg !230
  %incdec.ptr22 = getelementptr inbounds i32, i32* %19, i32 1, !dbg !230
  store i32* %incdec.ptr22, i32** %buf4, align 8, !dbg !230
  %20 = load i32, i32* %incdec.ptr22, align 4, !dbg !230
  %21 = load i32, i32* %c, align 4, !dbg !230
  %xor23 = xor i32 %21, %20, !dbg !230
  store i32 %xor23, i32* %c, align 4, !dbg !230
  %22 = load i32, i32* %c, align 4, !dbg !230
  %and24 = and i32 %22, 255, !dbg !230
  %idxprom25 = zext i32 %and24 to i64, !dbg !230
  %arrayidx26 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 4), i64 0, i64 %idxprom25, !dbg !230
  %23 = load i64, i64* %arrayidx26, align 8, !dbg !230
  %24 = load i32, i32* %c, align 4, !dbg !230
  %shr27 = lshr i32 %24, 8, !dbg !230
  %and28 = and i32 %shr27, 255, !dbg !230
  %idxprom29 = zext i32 %and28 to i64, !dbg !230
  %arrayidx30 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 5), i64 0, i64 %idxprom29, !dbg !230
  %25 = load i64, i64* %arrayidx30, align 8, !dbg !230
  %xor31 = xor i64 %23, %25, !dbg !230
  %26 = load i32, i32* %c, align 4, !dbg !230
  %shr32 = lshr i32 %26, 16, !dbg !230
  %and33 = and i32 %shr32, 255, !dbg !230
  %idxprom34 = zext i32 %and33 to i64, !dbg !230
  %arrayidx35 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 6), i64 0, i64 %idxprom34, !dbg !230
  %27 = load i64, i64* %arrayidx35, align 8, !dbg !230
  %xor36 = xor i64 %xor31, %27, !dbg !230
  %28 = load i32, i32* %c, align 4, !dbg !230
  %shr37 = lshr i32 %28, 24, !dbg !230
  %idxprom38 = zext i32 %shr37 to i64, !dbg !230
  %arrayidx39 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 7), i64 0, i64 %idxprom38, !dbg !230
  %29 = load i64, i64* %arrayidx39, align 8, !dbg !230
  %xor40 = xor i64 %xor36, %29, !dbg !230
  %conv41 = trunc i64 %xor40 to i32, !dbg !230
  store i32 %conv41, i32* %c, align 4, !dbg !230
  %30 = load i32*, i32** %buf4, align 8, !dbg !230
  %incdec.ptr42 = getelementptr inbounds i32, i32* %30, i32 1, !dbg !230
  store i32* %incdec.ptr42, i32** %buf4, align 8, !dbg !230
  %31 = load i32, i32* %incdec.ptr42, align 4, !dbg !230
  %32 = load i32, i32* %c, align 4, !dbg !230
  %xor43 = xor i32 %32, %31, !dbg !230
  store i32 %xor43, i32* %c, align 4, !dbg !230
  %33 = load i32, i32* %c, align 4, !dbg !230
  %and44 = and i32 %33, 255, !dbg !230
  %idxprom45 = zext i32 %and44 to i64, !dbg !230
  %arrayidx46 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 4), i64 0, i64 %idxprom45, !dbg !230
  %34 = load i64, i64* %arrayidx46, align 8, !dbg !230
  %35 = load i32, i32* %c, align 4, !dbg !230
  %shr47 = lshr i32 %35, 8, !dbg !230
  %and48 = and i32 %shr47, 255, !dbg !230
  %idxprom49 = zext i32 %and48 to i64, !dbg !230
  %arrayidx50 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 5), i64 0, i64 %idxprom49, !dbg !230
  %36 = load i64, i64* %arrayidx50, align 8, !dbg !230
  %xor51 = xor i64 %34, %36, !dbg !230
  %37 = load i32, i32* %c, align 4, !dbg !230
  %shr52 = lshr i32 %37, 16, !dbg !230
  %and53 = and i32 %shr52, 255, !dbg !230
  %idxprom54 = zext i32 %and53 to i64, !dbg !230
  %arrayidx55 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 6), i64 0, i64 %idxprom54, !dbg !230
  %38 = load i64, i64* %arrayidx55, align 8, !dbg !230
  %xor56 = xor i64 %xor51, %38, !dbg !230
  %39 = load i32, i32* %c, align 4, !dbg !230
  %shr57 = lshr i32 %39, 24, !dbg !230
  %idxprom58 = zext i32 %shr57 to i64, !dbg !230
  %arrayidx59 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 7), i64 0, i64 %idxprom58, !dbg !230
  %40 = load i64, i64* %arrayidx59, align 8, !dbg !230
  %xor60 = xor i64 %xor56, %40, !dbg !230
  %conv61 = trunc i64 %xor60 to i32, !dbg !230
  store i32 %conv61, i32* %c, align 4, !dbg !230
  %41 = load i32*, i32** %buf4, align 8, !dbg !230
  %incdec.ptr62 = getelementptr inbounds i32, i32* %41, i32 1, !dbg !230
  store i32* %incdec.ptr62, i32** %buf4, align 8, !dbg !230
  %42 = load i32, i32* %incdec.ptr62, align 4, !dbg !230
  %43 = load i32, i32* %c, align 4, !dbg !230
  %xor63 = xor i32 %43, %42, !dbg !230
  store i32 %xor63, i32* %c, align 4, !dbg !230
  %44 = load i32, i32* %c, align 4, !dbg !230
  %and64 = and i32 %44, 255, !dbg !230
  %idxprom65 = zext i32 %and64 to i64, !dbg !230
  %arrayidx66 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 4), i64 0, i64 %idxprom65, !dbg !230
  %45 = load i64, i64* %arrayidx66, align 8, !dbg !230
  %46 = load i32, i32* %c, align 4, !dbg !230
  %shr67 = lshr i32 %46, 8, !dbg !230
  %and68 = and i32 %shr67, 255, !dbg !230
  %idxprom69 = zext i32 %and68 to i64, !dbg !230
  %arrayidx70 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 5), i64 0, i64 %idxprom69, !dbg !230
  %47 = load i64, i64* %arrayidx70, align 8, !dbg !230
  %xor71 = xor i64 %45, %47, !dbg !230
  %48 = load i32, i32* %c, align 4, !dbg !230
  %shr72 = lshr i32 %48, 16, !dbg !230
  %and73 = and i32 %shr72, 255, !dbg !230
  %idxprom74 = zext i32 %and73 to i64, !dbg !230
  %arrayidx75 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 6), i64 0, i64 %idxprom74, !dbg !230
  %49 = load i64, i64* %arrayidx75, align 8, !dbg !230
  %xor76 = xor i64 %xor71, %49, !dbg !230
  %50 = load i32, i32* %c, align 4, !dbg !230
  %shr77 = lshr i32 %50, 24, !dbg !230
  %idxprom78 = zext i32 %shr77 to i64, !dbg !230
  %arrayidx79 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 7), i64 0, i64 %idxprom78, !dbg !230
  %51 = load i64, i64* %arrayidx79, align 8, !dbg !230
  %xor80 = xor i64 %xor76, %51, !dbg !230
  %conv81 = trunc i64 %xor80 to i32, !dbg !230
  store i32 %conv81, i32* %c, align 4, !dbg !230
  %52 = load i32*, i32** %buf4, align 8, !dbg !230
  %incdec.ptr82 = getelementptr inbounds i32, i32* %52, i32 1, !dbg !230
  store i32* %incdec.ptr82, i32** %buf4, align 8, !dbg !230
  %53 = load i32, i32* %incdec.ptr82, align 4, !dbg !230
  %54 = load i32, i32* %c, align 4, !dbg !230
  %xor83 = xor i32 %54, %53, !dbg !230
  store i32 %xor83, i32* %c, align 4, !dbg !230
  %55 = load i32, i32* %c, align 4, !dbg !230
  %and84 = and i32 %55, 255, !dbg !230
  %idxprom85 = zext i32 %and84 to i64, !dbg !230
  %arrayidx86 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 4), i64 0, i64 %idxprom85, !dbg !230
  %56 = load i64, i64* %arrayidx86, align 8, !dbg !230
  %57 = load i32, i32* %c, align 4, !dbg !230
  %shr87 = lshr i32 %57, 8, !dbg !230
  %and88 = and i32 %shr87, 255, !dbg !230
  %idxprom89 = zext i32 %and88 to i64, !dbg !230
  %arrayidx90 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 5), i64 0, i64 %idxprom89, !dbg !230
  %58 = load i64, i64* %arrayidx90, align 8, !dbg !230
  %xor91 = xor i64 %56, %58, !dbg !230
  %59 = load i32, i32* %c, align 4, !dbg !230
  %shr92 = lshr i32 %59, 16, !dbg !230
  %and93 = and i32 %shr92, 255, !dbg !230
  %idxprom94 = zext i32 %and93 to i64, !dbg !230
  %arrayidx95 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 6), i64 0, i64 %idxprom94, !dbg !230
  %60 = load i64, i64* %arrayidx95, align 8, !dbg !230
  %xor96 = xor i64 %xor91, %60, !dbg !230
  %61 = load i32, i32* %c, align 4, !dbg !230
  %shr97 = lshr i32 %61, 24, !dbg !230
  %idxprom98 = zext i32 %shr97 to i64, !dbg !230
  %arrayidx99 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 7), i64 0, i64 %idxprom98, !dbg !230
  %62 = load i64, i64* %arrayidx99, align 8, !dbg !230
  %xor100 = xor i64 %xor96, %62, !dbg !230
  %conv101 = trunc i64 %xor100 to i32, !dbg !230
  store i32 %conv101, i32* %c, align 4, !dbg !230
  %63 = load i32*, i32** %buf4, align 8, !dbg !230
  %incdec.ptr102 = getelementptr inbounds i32, i32* %63, i32 1, !dbg !230
  store i32* %incdec.ptr102, i32** %buf4, align 8, !dbg !230
  %64 = load i32, i32* %incdec.ptr102, align 4, !dbg !230
  %65 = load i32, i32* %c, align 4, !dbg !230
  %xor103 = xor i32 %65, %64, !dbg !230
  store i32 %xor103, i32* %c, align 4, !dbg !230
  %66 = load i32, i32* %c, align 4, !dbg !230
  %and104 = and i32 %66, 255, !dbg !230
  %idxprom105 = zext i32 %and104 to i64, !dbg !230
  %arrayidx106 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 4), i64 0, i64 %idxprom105, !dbg !230
  %67 = load i64, i64* %arrayidx106, align 8, !dbg !230
  %68 = load i32, i32* %c, align 4, !dbg !230
  %shr107 = lshr i32 %68, 8, !dbg !230
  %and108 = and i32 %shr107, 255, !dbg !230
  %idxprom109 = zext i32 %and108 to i64, !dbg !230
  %arrayidx110 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 5), i64 0, i64 %idxprom109, !dbg !230
  %69 = load i64, i64* %arrayidx110, align 8, !dbg !230
  %xor111 = xor i64 %67, %69, !dbg !230
  %70 = load i32, i32* %c, align 4, !dbg !230
  %shr112 = lshr i32 %70, 16, !dbg !230
  %and113 = and i32 %shr112, 255, !dbg !230
  %idxprom114 = zext i32 %and113 to i64, !dbg !230
  %arrayidx115 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 6), i64 0, i64 %idxprom114, !dbg !230
  %71 = load i64, i64* %arrayidx115, align 8, !dbg !230
  %xor116 = xor i64 %xor111, %71, !dbg !230
  %72 = load i32, i32* %c, align 4, !dbg !230
  %shr117 = lshr i32 %72, 24, !dbg !230
  %idxprom118 = zext i32 %shr117 to i64, !dbg !230
  %arrayidx119 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 7), i64 0, i64 %idxprom118, !dbg !230
  %73 = load i64, i64* %arrayidx119, align 8, !dbg !230
  %xor120 = xor i64 %xor116, %73, !dbg !230
  %conv121 = trunc i64 %xor120 to i32, !dbg !230
  store i32 %conv121, i32* %c, align 4, !dbg !230
  %74 = load i32*, i32** %buf4, align 8, !dbg !230
  %incdec.ptr122 = getelementptr inbounds i32, i32* %74, i32 1, !dbg !230
  store i32* %incdec.ptr122, i32** %buf4, align 8, !dbg !230
  %75 = load i32, i32* %incdec.ptr122, align 4, !dbg !230
  %76 = load i32, i32* %c, align 4, !dbg !230
  %xor123 = xor i32 %76, %75, !dbg !230
  store i32 %xor123, i32* %c, align 4, !dbg !230
  %77 = load i32, i32* %c, align 4, !dbg !230
  %and124 = and i32 %77, 255, !dbg !230
  %idxprom125 = zext i32 %and124 to i64, !dbg !230
  %arrayidx126 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 4), i64 0, i64 %idxprom125, !dbg !230
  %78 = load i64, i64* %arrayidx126, align 8, !dbg !230
  %79 = load i32, i32* %c, align 4, !dbg !230
  %shr127 = lshr i32 %79, 8, !dbg !230
  %and128 = and i32 %shr127, 255, !dbg !230
  %idxprom129 = zext i32 %and128 to i64, !dbg !230
  %arrayidx130 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 5), i64 0, i64 %idxprom129, !dbg !230
  %80 = load i64, i64* %arrayidx130, align 8, !dbg !230
  %xor131 = xor i64 %78, %80, !dbg !230
  %81 = load i32, i32* %c, align 4, !dbg !230
  %shr132 = lshr i32 %81, 16, !dbg !230
  %and133 = and i32 %shr132, 255, !dbg !230
  %idxprom134 = zext i32 %and133 to i64, !dbg !230
  %arrayidx135 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 6), i64 0, i64 %idxprom134, !dbg !230
  %82 = load i64, i64* %arrayidx135, align 8, !dbg !230
  %xor136 = xor i64 %xor131, %82, !dbg !230
  %83 = load i32, i32* %c, align 4, !dbg !230
  %shr137 = lshr i32 %83, 24, !dbg !230
  %idxprom138 = zext i32 %shr137 to i64, !dbg !230
  %arrayidx139 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 7), i64 0, i64 %idxprom138, !dbg !230
  %84 = load i64, i64* %arrayidx139, align 8, !dbg !230
  %xor140 = xor i64 %xor136, %84, !dbg !230
  %conv141 = trunc i64 %xor140 to i32, !dbg !230
  store i32 %conv141, i32* %c, align 4, !dbg !230
  %85 = load i32*, i32** %buf4, align 8, !dbg !230
  %incdec.ptr142 = getelementptr inbounds i32, i32* %85, i32 1, !dbg !230
  store i32* %incdec.ptr142, i32** %buf4, align 8, !dbg !230
  %86 = load i32, i32* %incdec.ptr142, align 4, !dbg !230
  %87 = load i32, i32* %c, align 4, !dbg !230
  %xor143 = xor i32 %87, %86, !dbg !230
  store i32 %xor143, i32* %c, align 4, !dbg !230
  %88 = load i32, i32* %c, align 4, !dbg !230
  %and144 = and i32 %88, 255, !dbg !230
  %idxprom145 = zext i32 %and144 to i64, !dbg !230
  %arrayidx146 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 4), i64 0, i64 %idxprom145, !dbg !230
  %89 = load i64, i64* %arrayidx146, align 8, !dbg !230
  %90 = load i32, i32* %c, align 4, !dbg !230
  %shr147 = lshr i32 %90, 8, !dbg !230
  %and148 = and i32 %shr147, 255, !dbg !230
  %idxprom149 = zext i32 %and148 to i64, !dbg !230
  %arrayidx150 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 5), i64 0, i64 %idxprom149, !dbg !230
  %91 = load i64, i64* %arrayidx150, align 8, !dbg !230
  %xor151 = xor i64 %89, %91, !dbg !230
  %92 = load i32, i32* %c, align 4, !dbg !230
  %shr152 = lshr i32 %92, 16, !dbg !230
  %and153 = and i32 %shr152, 255, !dbg !230
  %idxprom154 = zext i32 %and153 to i64, !dbg !230
  %arrayidx155 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 6), i64 0, i64 %idxprom154, !dbg !230
  %93 = load i64, i64* %arrayidx155, align 8, !dbg !230
  %xor156 = xor i64 %xor151, %93, !dbg !230
  %94 = load i32, i32* %c, align 4, !dbg !230
  %shr157 = lshr i32 %94, 24, !dbg !230
  %idxprom158 = zext i32 %shr157 to i64, !dbg !230
  %arrayidx159 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 7), i64 0, i64 %idxprom158, !dbg !230
  %95 = load i64, i64* %arrayidx159, align 8, !dbg !230
  %xor160 = xor i64 %xor156, %95, !dbg !230
  %conv161 = trunc i64 %xor160 to i32, !dbg !230
  store i32 %conv161, i32* %c, align 4, !dbg !230
  %96 = load i32*, i32** %buf4, align 8, !dbg !230
  %incdec.ptr162 = getelementptr inbounds i32, i32* %96, i32 1, !dbg !230
  store i32* %incdec.ptr162, i32** %buf4, align 8, !dbg !230
  %97 = load i32, i32* %incdec.ptr162, align 4, !dbg !230
  %98 = load i32, i32* %c, align 4, !dbg !230
  %xor163 = xor i32 %98, %97, !dbg !230
  store i32 %xor163, i32* %c, align 4, !dbg !230
  %99 = load i32, i32* %c, align 4, !dbg !230
  %and164 = and i32 %99, 255, !dbg !230
  %idxprom165 = zext i32 %and164 to i64, !dbg !230
  %arrayidx166 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 4), i64 0, i64 %idxprom165, !dbg !230
  %100 = load i64, i64* %arrayidx166, align 8, !dbg !230
  %101 = load i32, i32* %c, align 4, !dbg !230
  %shr167 = lshr i32 %101, 8, !dbg !230
  %and168 = and i32 %shr167, 255, !dbg !230
  %idxprom169 = zext i32 %and168 to i64, !dbg !230
  %arrayidx170 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 5), i64 0, i64 %idxprom169, !dbg !230
  %102 = load i64, i64* %arrayidx170, align 8, !dbg !230
  %xor171 = xor i64 %100, %102, !dbg !230
  %103 = load i32, i32* %c, align 4, !dbg !230
  %shr172 = lshr i32 %103, 16, !dbg !230
  %and173 = and i32 %shr172, 255, !dbg !230
  %idxprom174 = zext i32 %and173 to i64, !dbg !230
  %arrayidx175 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 6), i64 0, i64 %idxprom174, !dbg !230
  %104 = load i64, i64* %arrayidx175, align 8, !dbg !230
  %xor176 = xor i64 %xor171, %104, !dbg !230
  %105 = load i32, i32* %c, align 4, !dbg !230
  %shr177 = lshr i32 %105, 24, !dbg !230
  %idxprom178 = zext i32 %shr177 to i64, !dbg !230
  %arrayidx179 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 7), i64 0, i64 %idxprom178, !dbg !230
  %106 = load i64, i64* %arrayidx179, align 8, !dbg !230
  %xor180 = xor i64 %xor176, %106, !dbg !230
  %conv181 = trunc i64 %xor180 to i32, !dbg !230
  store i32 %conv181, i32* %c, align 4, !dbg !230
  %107 = load i32, i32* %len.addr, align 4, !dbg !232
  %sub = sub i32 %107, 32, !dbg !232
  store i32 %sub, i32* %len.addr, align 4, !dbg !232
  br label %while.cond19, !dbg !233

while.end182:                                     ; preds = %while.cond19
  br label %while.cond183, !dbg !234

while.cond183:                                    ; preds = %while.body186, %while.end182
  %108 = load i32, i32* %len.addr, align 4, !dbg !235
  %cmp184 = icmp uge i32 %108, 4, !dbg !236
  br i1 %cmp184, label %while.body186, label %while.end208, !dbg !237

while.body186:                                    ; preds = %while.cond183
  %109 = load i32*, i32** %buf4, align 8, !dbg !238
  %incdec.ptr187 = getelementptr inbounds i32, i32* %109, i32 1, !dbg !238
  store i32* %incdec.ptr187, i32** %buf4, align 8, !dbg !238
  %110 = load i32, i32* %incdec.ptr187, align 4, !dbg !238
  %111 = load i32, i32* %c, align 4, !dbg !238
  %xor188 = xor i32 %111, %110, !dbg !238
  store i32 %xor188, i32* %c, align 4, !dbg !238
  %112 = load i32, i32* %c, align 4, !dbg !238
  %and189 = and i32 %112, 255, !dbg !238
  %idxprom190 = zext i32 %and189 to i64, !dbg !238
  %arrayidx191 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 4), i64 0, i64 %idxprom190, !dbg !238
  %113 = load i64, i64* %arrayidx191, align 8, !dbg !238
  %114 = load i32, i32* %c, align 4, !dbg !238
  %shr192 = lshr i32 %114, 8, !dbg !238
  %and193 = and i32 %shr192, 255, !dbg !238
  %idxprom194 = zext i32 %and193 to i64, !dbg !238
  %arrayidx195 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 5), i64 0, i64 %idxprom194, !dbg !238
  %115 = load i64, i64* %arrayidx195, align 8, !dbg !238
  %xor196 = xor i64 %113, %115, !dbg !238
  %116 = load i32, i32* %c, align 4, !dbg !238
  %shr197 = lshr i32 %116, 16, !dbg !238
  %and198 = and i32 %shr197, 255, !dbg !238
  %idxprom199 = zext i32 %and198 to i64, !dbg !238
  %arrayidx200 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 6), i64 0, i64 %idxprom199, !dbg !238
  %117 = load i64, i64* %arrayidx200, align 8, !dbg !238
  %xor201 = xor i64 %xor196, %117, !dbg !238
  %118 = load i32, i32* %c, align 4, !dbg !238
  %shr202 = lshr i32 %118, 24, !dbg !238
  %idxprom203 = zext i32 %shr202 to i64, !dbg !238
  %arrayidx204 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 7), i64 0, i64 %idxprom203, !dbg !238
  %119 = load i64, i64* %arrayidx204, align 8, !dbg !238
  %xor205 = xor i64 %xor201, %119, !dbg !238
  %conv206 = trunc i64 %xor205 to i32, !dbg !238
  store i32 %conv206, i32* %c, align 4, !dbg !238
  %120 = load i32, i32* %len.addr, align 4, !dbg !240
  %sub207 = sub i32 %120, 4, !dbg !240
  store i32 %sub207, i32* %len.addr, align 4, !dbg !240
  br label %while.cond183, !dbg !241

while.end208:                                     ; preds = %while.cond183
  %121 = load i32*, i32** %buf4, align 8, !dbg !242
  %incdec.ptr209 = getelementptr inbounds i32, i32* %121, i32 1, !dbg !242
  store i32* %incdec.ptr209, i32** %buf4, align 8, !dbg !242
  %122 = load i32*, i32** %buf4, align 8, !dbg !243
  %123 = bitcast i32* %122 to i8*, !dbg !244
  store i8* %123, i8** %buf.addr, align 8, !dbg !245
  %124 = load i32, i32* %len.addr, align 4, !dbg !246
  %tobool210 = icmp ne i32 %124, 0, !dbg !246
  br i1 %tobool210, label %if.then, label %if.end, !dbg !248

if.then:                                          ; preds = %while.end208
  br label %do.body, !dbg !249

do.body:                                          ; preds = %do.cond, %if.then
  %125 = load i32, i32* %c, align 4, !dbg !251
  %shr211 = lshr i32 %125, 24, !dbg !253
  %126 = load i8*, i8** %buf.addr, align 8, !dbg !254
  %incdec.ptr212 = getelementptr inbounds i8, i8* %126, i32 1, !dbg !254
  store i8* %incdec.ptr212, i8** %buf.addr, align 8, !dbg !254
  %127 = load i8, i8* %126, align 1, !dbg !255
  %conv213 = zext i8 %127 to i32, !dbg !255
  %xor214 = xor i32 %shr211, %conv213, !dbg !256
  %idxprom215 = zext i32 %xor214 to i64, !dbg !257
  %arrayidx216 = getelementptr inbounds [256 x i64], [256 x i64]* getelementptr inbounds ([8 x [256 x i64]], [8 x [256 x i64]]* @crc_table, i64 0, i64 4), i64 0, i64 %idxprom215, !dbg !257
  %128 = load i64, i64* %arrayidx216, align 8, !dbg !257
  %129 = load i32, i32* %c, align 4, !dbg !258
  %shl217 = shl i32 %129, 8, !dbg !259
  %conv218 = zext i32 %shl217 to i64, !dbg !260
  %xor219 = xor i64 %128, %conv218, !dbg !261
  %conv220 = trunc i64 %xor219 to i32, !dbg !257
  store i32 %conv220, i32* %c, align 4, !dbg !262
  br label %do.cond, !dbg !263

do.cond:                                          ; preds = %do.body
  %130 = load i32, i32* %len.addr, align 4, !dbg !264
  %dec221 = add i32 %130, -1, !dbg !264
  store i32 %dec221, i32* %len.addr, align 4, !dbg !264
  %tobool222 = icmp ne i32 %dec221, 0, !dbg !265
  br i1 %tobool222, label %do.body, label %do.end, !dbg !265

do.end:                                           ; preds = %do.cond
  br label %if.end, !dbg !266

if.end:                                           ; preds = %do.end, %while.end208
  %131 = load i32, i32* %c, align 4, !dbg !268
  %neg223 = xor i32 %131, -1, !dbg !269
  store i32 %neg223, i32* %c, align 4, !dbg !270
  %132 = load i32, i32* %c, align 4, !dbg !271
  %shr224 = lshr i32 %132, 24, !dbg !271
  %133 = load i32, i32* %c, align 4, !dbg !271
  %shr225 = lshr i32 %133, 8, !dbg !271
  %and226 = and i32 %shr225, 65280, !dbg !271
  %add227 = add i32 %shr224, %and226, !dbg !271
  %134 = load i32, i32* %c, align 4, !dbg !271
  %and228 = and i32 %134, 65280, !dbg !271
  %shl229 = shl i32 %and228, 8, !dbg !271
  %add230 = add i32 %add227, %shl229, !dbg !271
  %135 = load i32, i32* %c, align 4, !dbg !271
  %and231 = and i32 %135, 255, !dbg !271
  %shl232 = shl i32 %and231, 24, !dbg !271
  %add233 = add i32 %add230, %shl232, !dbg !271
  %conv234 = zext i32 %add233 to i64, !dbg !272
  ret i64 %conv234, !dbg !273
}

; Function Attrs: nounwind uwtable
define i64 @cm_zlib_crc32_combine(i64 %crc1, i64 %crc2, i64 %len2) #0 !dbg !32 {
entry:
  %retval = alloca i64, align 8
  %crc1.addr = alloca i64, align 8
  %crc2.addr = alloca i64, align 8
  %len2.addr = alloca i64, align 8
  %n = alloca i32, align 4
  %row = alloca i64, align 8
  %even = alloca [32 x i64], align 16
  %odd = alloca [32 x i64], align 16
  store i64 %crc1, i64* %crc1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %crc1.addr, metadata !274, metadata !58), !dbg !275
  store i64 %crc2, i64* %crc2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %crc2.addr, metadata !276, metadata !58), !dbg !277
  store i64 %len2, i64* %len2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len2.addr, metadata !278, metadata !58), !dbg !279
  call void @llvm.dbg.declare(metadata i32* %n, metadata !280, metadata !58), !dbg !282
  call void @llvm.dbg.declare(metadata i64* %row, metadata !283, metadata !58), !dbg !284
  call void @llvm.dbg.declare(metadata [32 x i64]* %even, metadata !285, metadata !58), !dbg !289
  call void @llvm.dbg.declare(metadata [32 x i64]* %odd, metadata !290, metadata !58), !dbg !291
  %0 = load i64, i64* %len2.addr, align 8, !dbg !292
  %cmp = icmp eq i64 %0, 0, !dbg !294
  br i1 %cmp, label %if.then, label %if.end, !dbg !295

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %crc1.addr, align 8, !dbg !296
  store i64 %1, i64* %retval, align 8, !dbg !297
  br label %return, !dbg !297

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds [32 x i64], [32 x i64]* %odd, i64 0, i64 0, !dbg !298
  store i64 3988292384, i64* %arrayidx, align 16, !dbg !299
  store i64 1, i64* %row, align 8, !dbg !300
  store i32 1, i32* %n, align 4, !dbg !301
  br label %for.cond, !dbg !303

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %n, align 4, !dbg !304
  %cmp1 = icmp slt i32 %2, 32, !dbg !307
  br i1 %cmp1, label %for.body, label %for.end, !dbg !308

for.body:                                         ; preds = %for.cond
  %3 = load i64, i64* %row, align 8, !dbg !309
  %4 = load i32, i32* %n, align 4, !dbg !311
  %idxprom = sext i32 %4 to i64, !dbg !312
  %arrayidx2 = getelementptr inbounds [32 x i64], [32 x i64]* %odd, i64 0, i64 %idxprom, !dbg !312
  store i64 %3, i64* %arrayidx2, align 8, !dbg !313
  %5 = load i64, i64* %row, align 8, !dbg !314
  %shl = shl i64 %5, 1, !dbg !314
  store i64 %shl, i64* %row, align 8, !dbg !314
  br label %for.inc, !dbg !315

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %n, align 4, !dbg !316
  %inc = add nsw i32 %6, 1, !dbg !316
  store i32 %inc, i32* %n, align 4, !dbg !316
  br label %for.cond, !dbg !318

for.end:                                          ; preds = %for.cond
  %arraydecay = getelementptr inbounds [32 x i64], [32 x i64]* %even, i32 0, i32 0, !dbg !319
  %arraydecay3 = getelementptr inbounds [32 x i64], [32 x i64]* %odd, i32 0, i32 0, !dbg !320
  call void @gf2_matrix_square(i64* %arraydecay, i64* %arraydecay3), !dbg !321
  %arraydecay4 = getelementptr inbounds [32 x i64], [32 x i64]* %odd, i32 0, i32 0, !dbg !322
  %arraydecay5 = getelementptr inbounds [32 x i64], [32 x i64]* %even, i32 0, i32 0, !dbg !323
  call void @gf2_matrix_square(i64* %arraydecay4, i64* %arraydecay5), !dbg !324
  br label %do.body, !dbg !325

do.body:                                          ; preds = %do.cond, %for.end
  %arraydecay6 = getelementptr inbounds [32 x i64], [32 x i64]* %even, i32 0, i32 0, !dbg !326
  %arraydecay7 = getelementptr inbounds [32 x i64], [32 x i64]* %odd, i32 0, i32 0, !dbg !328
  call void @gf2_matrix_square(i64* %arraydecay6, i64* %arraydecay7), !dbg !329
  %7 = load i64, i64* %len2.addr, align 8, !dbg !330
  %and = and i64 %7, 1, !dbg !332
  %tobool = icmp ne i64 %and, 0, !dbg !332
  br i1 %tobool, label %if.then8, label %if.end10, !dbg !333

if.then8:                                         ; preds = %do.body
  %arraydecay9 = getelementptr inbounds [32 x i64], [32 x i64]* %even, i32 0, i32 0, !dbg !334
  %8 = load i64, i64* %crc1.addr, align 8, !dbg !335
  %call = call i64 @gf2_matrix_times(i64* %arraydecay9, i64 %8), !dbg !336
  store i64 %call, i64* %crc1.addr, align 8, !dbg !337
  br label %if.end10, !dbg !338

if.end10:                                         ; preds = %if.then8, %do.body
  %9 = load i64, i64* %len2.addr, align 8, !dbg !339
  %shr = ashr i64 %9, 1, !dbg !339
  store i64 %shr, i64* %len2.addr, align 8, !dbg !339
  %10 = load i64, i64* %len2.addr, align 8, !dbg !340
  %cmp11 = icmp eq i64 %10, 0, !dbg !342
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !343

if.then12:                                        ; preds = %if.end10
  br label %do.end, !dbg !344

if.end13:                                         ; preds = %if.end10
  %arraydecay14 = getelementptr inbounds [32 x i64], [32 x i64]* %odd, i32 0, i32 0, !dbg !345
  %arraydecay15 = getelementptr inbounds [32 x i64], [32 x i64]* %even, i32 0, i32 0, !dbg !346
  call void @gf2_matrix_square(i64* %arraydecay14, i64* %arraydecay15), !dbg !347
  %11 = load i64, i64* %len2.addr, align 8, !dbg !348
  %and16 = and i64 %11, 1, !dbg !350
  %tobool17 = icmp ne i64 %and16, 0, !dbg !350
  br i1 %tobool17, label %if.then18, label %if.end21, !dbg !351

if.then18:                                        ; preds = %if.end13
  %arraydecay19 = getelementptr inbounds [32 x i64], [32 x i64]* %odd, i32 0, i32 0, !dbg !352
  %12 = load i64, i64* %crc1.addr, align 8, !dbg !353
  %call20 = call i64 @gf2_matrix_times(i64* %arraydecay19, i64 %12), !dbg !354
  store i64 %call20, i64* %crc1.addr, align 8, !dbg !355
  br label %if.end21, !dbg !356

if.end21:                                         ; preds = %if.then18, %if.end13
  %13 = load i64, i64* %len2.addr, align 8, !dbg !357
  %shr22 = ashr i64 %13, 1, !dbg !357
  store i64 %shr22, i64* %len2.addr, align 8, !dbg !357
  br label %do.cond, !dbg !358

do.cond:                                          ; preds = %if.end21
  %14 = load i64, i64* %len2.addr, align 8, !dbg !359
  %cmp23 = icmp ne i64 %14, 0, !dbg !361
  br i1 %cmp23, label %do.body, label %do.end, !dbg !362

do.end:                                           ; preds = %do.cond, %if.then12
  %15 = load i64, i64* %crc2.addr, align 8, !dbg !363
  %16 = load i64, i64* %crc1.addr, align 8, !dbg !364
  %xor = xor i64 %16, %15, !dbg !364
  store i64 %xor, i64* %crc1.addr, align 8, !dbg !364
  %17 = load i64, i64* %crc1.addr, align 8, !dbg !365
  store i64 %17, i64* %retval, align 8, !dbg !366
  br label %return, !dbg !366

return:                                           ; preds = %do.end, %if.then
  %18 = load i64, i64* %retval, align 8, !dbg !367
  ret i64 %18, !dbg !367
}

; Function Attrs: nounwind uwtable
define internal void @gf2_matrix_square(i64* %square, i64* %mat) #0 !dbg !39 {
entry:
  %square.addr = alloca i64*, align 8
  %mat.addr = alloca i64*, align 8
  %n = alloca i32, align 4
  store i64* %square, i64** %square.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %square.addr, metadata !368, metadata !58), !dbg !369
  store i64* %mat, i64** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %mat.addr, metadata !370, metadata !58), !dbg !371
  call void @llvm.dbg.declare(metadata i32* %n, metadata !372, metadata !58), !dbg !373
  store i32 0, i32* %n, align 4, !dbg !374
  br label %for.cond, !dbg !376

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n, align 4, !dbg !377
  %cmp = icmp slt i32 %0, 32, !dbg !380
  br i1 %cmp, label %for.body, label %for.end, !dbg !381

for.body:                                         ; preds = %for.cond
  %1 = load i64*, i64** %mat.addr, align 8, !dbg !382
  %2 = load i32, i32* %n, align 4, !dbg !383
  %idxprom = sext i32 %2 to i64, !dbg !384
  %3 = load i64*, i64** %mat.addr, align 8, !dbg !384
  %arrayidx = getelementptr inbounds i64, i64* %3, i64 %idxprom, !dbg !384
  %4 = load i64, i64* %arrayidx, align 8, !dbg !384
  %call = call i64 @gf2_matrix_times(i64* %1, i64 %4), !dbg !385
  %5 = load i32, i32* %n, align 4, !dbg !386
  %idxprom1 = sext i32 %5 to i64, !dbg !387
  %6 = load i64*, i64** %square.addr, align 8, !dbg !387
  %arrayidx2 = getelementptr inbounds i64, i64* %6, i64 %idxprom1, !dbg !387
  store i64 %call, i64* %arrayidx2, align 8, !dbg !388
  br label %for.inc, !dbg !387

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %n, align 4, !dbg !389
  %inc = add nsw i32 %7, 1, !dbg !389
  store i32 %inc, i32* %n, align 4, !dbg !389
  br label %for.cond, !dbg !391

for.end:                                          ; preds = %for.cond
  ret void, !dbg !392
}

; Function Attrs: nounwind uwtable
define internal i64 @gf2_matrix_times(i64* %mat, i64 %vec) #0 !dbg !43 {
entry:
  %mat.addr = alloca i64*, align 8
  %vec.addr = alloca i64, align 8
  %sum = alloca i64, align 8
  store i64* %mat, i64** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %mat.addr, metadata !393, metadata !58), !dbg !394
  store i64 %vec, i64* %vec.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %vec.addr, metadata !395, metadata !58), !dbg !396
  call void @llvm.dbg.declare(metadata i64* %sum, metadata !397, metadata !58), !dbg !398
  store i64 0, i64* %sum, align 8, !dbg !399
  br label %while.cond, !dbg !400

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i64, i64* %vec.addr, align 8, !dbg !401
  %tobool = icmp ne i64 %0, 0, !dbg !403
  br i1 %tobool, label %while.body, label %while.end, !dbg !403

while.body:                                       ; preds = %while.cond
  %1 = load i64, i64* %vec.addr, align 8, !dbg !404
  %and = and i64 %1, 1, !dbg !407
  %tobool1 = icmp ne i64 %and, 0, !dbg !407
  br i1 %tobool1, label %if.then, label %if.end, !dbg !408

if.then:                                          ; preds = %while.body
  %2 = load i64*, i64** %mat.addr, align 8, !dbg !409
  %3 = load i64, i64* %2, align 8, !dbg !410
  %4 = load i64, i64* %sum, align 8, !dbg !411
  %xor = xor i64 %4, %3, !dbg !411
  store i64 %xor, i64* %sum, align 8, !dbg !411
  br label %if.end, !dbg !412

if.end:                                           ; preds = %if.then, %while.body
  %5 = load i64, i64* %vec.addr, align 8, !dbg !413
  %shr = lshr i64 %5, 1, !dbg !413
  store i64 %shr, i64* %vec.addr, align 8, !dbg !413
  %6 = load i64*, i64** %mat.addr, align 8, !dbg !414
  %incdec.ptr = getelementptr inbounds i64, i64* %6, i32 1, !dbg !414
  store i64* %incdec.ptr, i64** %mat.addr, align 8, !dbg !414
  br label %while.cond, !dbg !415

while.end:                                        ; preds = %while.cond
  %7 = load i64, i64* %sum, align 8, !dbg !417
  ret i64 %7, !dbg !418
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!53, !54}
!llvm.ident = !{!55}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.8.0 (tags/RELEASE_380/final)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !20, globals: !46)
!1 = !DIFile(filename: "/data/download/cmake/cmake-master/Utilities/cmzlib/crc32.c", directory: "/data/download/cmake/cmake-master/Utilities/cmzlib")
!2 = !{}
!3 = !{!4, !7, !9, !11, !14, !16, !18, !6}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6)
!6 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!8 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!9 = !DIDerivedType(tag: DW_TAG_typedef, name: "u4", file: !1, line: 39, baseType: !10)
!10 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!11 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", file: !12, line: 51, baseType: !13)
!12 = !DIFile(filename: "/opt/llvm-build/bin/../lib/clang/3.8.0/include/stddef.h", directory: "/data/download/cmake/cmake-master/Utilities/cmzlib")
!13 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64, align: 64)
!15 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, align: 64)
!17 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64, align: 64)
!19 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8)
!20 = !{!21, !29, !32, !35, !38, !39, !43}
!21 = distinct !DISubprogram(name: "cm_zlib_get_crc_table", scope: !1, file: !1, line: 205, type: !22, isLocal: false, isDefinition: true, scopeLine: 206, flags: DIFlagPrototyped, isOptimized: false, variables: !2)
!22 = !DISubroutineType(types: !23)
!23 = !{!24}
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64, align: 64)
!25 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !26)
!26 = !DIDerivedType(tag: DW_TAG_typedef, name: "uLongf", file: !27, line: 281, baseType: !28)
!27 = !DIFile(filename: "/data/download/cmake/cmake-master/Utilities/cmzlib/zconf.h", directory: "/data/download/cmake/cmake-master/Utilities/cmzlib")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uLong", file: !27, line: 270, baseType: !6)
!29 = distinct !DISubprogram(name: "cm_zlib_crc32", scope: !1, file: !1, line: 219, type: !30, isLocal: false, isDefinition: true, scopeLine: 223, isOptimized: false, variables: !2)
!30 = !DISubroutineType(types: !31)
!31 = !{!28, !6, !18, !10}
!32 = distinct !DISubprogram(name: "cm_zlib_crc32_combine", scope: !1, file: !1, line: 370, type: !33, isLocal: false, isDefinition: true, scopeLine: 374, isOptimized: false, variables: !2)
!33 = !DISubroutineType(types: !34)
!34 = !{!28, !28, !28, !13}
!35 = distinct !DISubprogram(name: "crc32_little", scope: !1, file: !1, line: 262, type: !36, isLocal: true, isDefinition: true, scopeLine: 266, isOptimized: false, variables: !2)
!36 = !DISubroutineType(types: !37)
!37 = !{!6, !6, !18, !10}
!38 = distinct !DISubprogram(name: "crc32_big", scope: !1, file: !1, line: 302, type: !36, isLocal: true, isDefinition: true, scopeLine: 306, isOptimized: false, variables: !2)
!39 = distinct !DISubprogram(name: "gf2_matrix_square", scope: !1, file: !1, line: 359, type: !40, isLocal: true, isDefinition: true, scopeLine: 362, isOptimized: false, variables: !2)
!40 = !DISubroutineType(types: !41)
!41 = !{null, !42, !42}
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64, align: 64)
!43 = distinct !DISubprogram(name: "gf2_matrix_times", scope: !1, file: !1, line: 342, type: !44, isLocal: true, isDefinition: true, scopeLine: 345, isOptimized: false, variables: !2)
!44 = !DISubroutineType(types: !45)
!45 = !{!6, !42, !6}
!46 = !{!47}
!47 = !DIGlobalVariable(name: "crc_table", scope: !0, file: !48, line: 5, type: !49, isLocal: true, isDefinition: true, variable: [8 x [256 x i64]]* @crc_table)
!48 = !DIFile(filename: "/data/download/cmake/cmake-master/Utilities/cmzlib/crc32.h", directory: "/data/download/cmake/cmake-master/Utilities/cmzlib")
!49 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 131072, align: 64, elements: !50)
!50 = !{!51, !52}
!51 = !DISubrange(count: 8)
!52 = !DISubrange(count: 256)
!53 = !{i32 2, !"Dwarf Version", i32 4}
!54 = !{i32 2, !"Debug Info Version", i32 3}
!55 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!56 = !DILocation(line: 211, column: 5, scope: !21)
!57 = !DILocalVariable(name: "crc", arg: 1, scope: !29, file: !1, line: 220, type: !6)
!58 = !DIExpression()
!59 = !DILocation(line: 220, column: 19, scope: !29)
!60 = !DILocalVariable(name: "buf", arg: 2, scope: !29, file: !1, line: 221, type: !18)
!61 = !DILocation(line: 221, column: 30, scope: !29)
!62 = !DILocalVariable(name: "len", arg: 3, scope: !29, file: !1, line: 222, type: !10)
!63 = !DILocation(line: 222, column: 14, scope: !29)
!64 = !DILocation(line: 224, column: 9, scope: !65)
!65 = distinct !DILexicalBlock(scope: !29, file: !1, line: 224, column: 9)
!66 = !DILocation(line: 224, column: 13, scope: !65)
!67 = !DILocation(line: 224, column: 9, scope: !29)
!68 = !DILocation(line: 224, column: 24, scope: !69)
!69 = !DILexicalBlockFile(scope: !65, file: !1, discriminator: 1)
!70 = !DILocalVariable(name: "endian", scope: !71, file: !1, line: 233, type: !9)
!71 = distinct !DILexicalBlock(scope: !72, file: !1, line: 232, column: 46)
!72 = distinct !DILexicalBlock(scope: !29, file: !1, line: 232, column: 9)
!73 = !DILocation(line: 233, column: 12, scope: !71)
!74 = !DILocation(line: 235, column: 16, scope: !71)
!75 = !DILocation(line: 236, column: 13, scope: !76)
!76 = distinct !DILexicalBlock(scope: !71, file: !1, line: 236, column: 13)
!77 = !DILocation(line: 236, column: 13, scope: !71)
!78 = !DILocation(line: 237, column: 33, scope: !76)
!79 = !DILocation(line: 237, column: 38, scope: !76)
!80 = !DILocation(line: 237, column: 43, scope: !76)
!81 = !DILocation(line: 237, column: 20, scope: !76)
!82 = !DILocation(line: 237, column: 13, scope: !76)
!83 = !DILocation(line: 239, column: 30, scope: !76)
!84 = !DILocation(line: 239, column: 35, scope: !76)
!85 = !DILocation(line: 239, column: 40, scope: !76)
!86 = !DILocation(line: 239, column: 20, scope: !76)
!87 = !DILocation(line: 239, column: 13, scope: !76)
!88 = !DILocation(line: 251, column: 1, scope: !29)
!89 = !DILocalVariable(name: "crc", arg: 1, scope: !35, file: !1, line: 263, type: !6)
!90 = !DILocation(line: 263, column: 19, scope: !35)
!91 = !DILocalVariable(name: "buf", arg: 2, scope: !35, file: !1, line: 264, type: !18)
!92 = !DILocation(line: 264, column: 30, scope: !35)
!93 = !DILocalVariable(name: "len", arg: 3, scope: !35, file: !1, line: 265, type: !10)
!94 = !DILocation(line: 265, column: 14, scope: !35)
!95 = !DILocalVariable(name: "c", scope: !35, file: !1, line: 267, type: !9)
!96 = !DILocation(line: 267, column: 17, scope: !35)
!97 = !DILocalVariable(name: "buf4", scope: !35, file: !1, line: 268, type: !14)
!98 = !DILocation(line: 268, column: 28, scope: !35)
!99 = !DILocation(line: 270, column: 13, scope: !35)
!100 = !DILocation(line: 270, column: 9, scope: !35)
!101 = !DILocation(line: 270, column: 7, scope: !35)
!102 = !DILocation(line: 271, column: 10, scope: !35)
!103 = !DILocation(line: 271, column: 9, scope: !35)
!104 = !DILocation(line: 271, column: 7, scope: !35)
!105 = !DILocation(line: 272, column: 5, scope: !35)
!106 = !DILocation(line: 272, column: 12, scope: !107)
!107 = !DILexicalBlockFile(scope: !35, file: !1, discriminator: 1)
!108 = !DILocation(line: 272, column: 16, scope: !107)
!109 = !DILocation(line: 272, column: 31, scope: !110)
!110 = !DILexicalBlockFile(scope: !35, file: !1, discriminator: 2)
!111 = !DILocation(line: 272, column: 20, scope: !110)
!112 = !DILocation(line: 272, column: 35, scope: !110)
!113 = !DILocation(line: 272, column: 16, scope: !110)
!114 = !DILocation(line: 272, column: 5, scope: !115)
!115 = !DILexicalBlockFile(scope: !35, file: !1, discriminator: 3)
!116 = !DILocation(line: 273, column: 27, scope: !117)
!117 = distinct !DILexicalBlock(scope: !35, file: !1, line: 272, column: 41)
!118 = !DILocation(line: 273, column: 35, scope: !117)
!119 = !DILocation(line: 273, column: 31, scope: !117)
!120 = !DILocation(line: 273, column: 29, scope: !117)
!121 = !DILocation(line: 273, column: 39, scope: !117)
!122 = !DILocation(line: 273, column: 13, scope: !117)
!123 = !DILocation(line: 273, column: 50, scope: !117)
!124 = !DILocation(line: 273, column: 52, scope: !117)
!125 = !DILocation(line: 273, column: 49, scope: !117)
!126 = !DILocation(line: 273, column: 47, scope: !117)
!127 = !DILocation(line: 273, column: 11, scope: !117)
!128 = !DILocation(line: 274, column: 12, scope: !117)
!129 = !DILocation(line: 272, column: 5, scope: !130)
!130 = !DILexicalBlockFile(scope: !35, file: !1, discriminator: 4)
!131 = !DILocation(line: 277, column: 46, scope: !35)
!132 = !DILocation(line: 277, column: 12, scope: !35)
!133 = !DILocation(line: 277, column: 10, scope: !35)
!134 = !DILocation(line: 278, column: 5, scope: !35)
!135 = !DILocation(line: 278, column: 12, scope: !107)
!136 = !DILocation(line: 278, column: 16, scope: !107)
!137 = !DILocation(line: 278, column: 5, scope: !107)
!138 = !DILocation(line: 279, column: 9, scope: !139)
!139 = distinct !DILexicalBlock(scope: !35, file: !1, line: 278, column: 23)
!140 = !DILocation(line: 280, column: 13, scope: !139)
!141 = !DILocation(line: 278, column: 5, scope: !110)
!142 = !DILocation(line: 282, column: 5, scope: !35)
!143 = !DILocation(line: 282, column: 12, scope: !107)
!144 = !DILocation(line: 282, column: 16, scope: !107)
!145 = !DILocation(line: 282, column: 5, scope: !107)
!146 = !DILocation(line: 283, column: 9, scope: !147)
!147 = distinct !DILexicalBlock(scope: !35, file: !1, line: 282, column: 22)
!148 = !DILocation(line: 284, column: 13, scope: !147)
!149 = !DILocation(line: 282, column: 5, scope: !110)
!150 = !DILocation(line: 286, column: 38, scope: !35)
!151 = !DILocation(line: 286, column: 11, scope: !35)
!152 = !DILocation(line: 286, column: 9, scope: !35)
!153 = !DILocation(line: 288, column: 9, scope: !154)
!154 = distinct !DILexicalBlock(scope: !35, file: !1, line: 288, column: 9)
!155 = !DILocation(line: 288, column: 9, scope: !35)
!156 = !DILocation(line: 288, column: 14, scope: !157)
!157 = !DILexicalBlockFile(scope: !154, file: !1, discriminator: 1)
!158 = !DILocation(line: 289, column: 27, scope: !159)
!159 = distinct !DILexicalBlock(scope: !154, file: !1, line: 288, column: 17)
!160 = !DILocation(line: 289, column: 35, scope: !159)
!161 = !DILocation(line: 289, column: 31, scope: !159)
!162 = !DILocation(line: 289, column: 29, scope: !159)
!163 = !DILocation(line: 289, column: 39, scope: !159)
!164 = !DILocation(line: 289, column: 13, scope: !159)
!165 = !DILocation(line: 289, column: 50, scope: !159)
!166 = !DILocation(line: 289, column: 52, scope: !159)
!167 = !DILocation(line: 289, column: 49, scope: !159)
!168 = !DILocation(line: 289, column: 47, scope: !159)
!169 = !DILocation(line: 289, column: 11, scope: !159)
!170 = !DILocation(line: 290, column: 5, scope: !159)
!171 = !DILocation(line: 290, column: 14, scope: !157)
!172 = !DILocation(line: 290, column: 5, scope: !157)
!173 = !DILocation(line: 290, column: 5, scope: !174)
!174 = !DILexicalBlockFile(scope: !159, file: !1, discriminator: 2)
!175 = !DILocation(line: 291, column: 10, scope: !35)
!176 = !DILocation(line: 291, column: 9, scope: !35)
!177 = !DILocation(line: 291, column: 7, scope: !35)
!178 = !DILocation(line: 292, column: 27, scope: !35)
!179 = !DILocation(line: 292, column: 12, scope: !35)
!180 = !DILocation(line: 292, column: 5, scope: !35)
!181 = !DILocalVariable(name: "crc", arg: 1, scope: !38, file: !1, line: 303, type: !6)
!182 = !DILocation(line: 303, column: 19, scope: !38)
!183 = !DILocalVariable(name: "buf", arg: 2, scope: !38, file: !1, line: 304, type: !18)
!184 = !DILocation(line: 304, column: 30, scope: !38)
!185 = !DILocalVariable(name: "len", arg: 3, scope: !38, file: !1, line: 305, type: !10)
!186 = !DILocation(line: 305, column: 14, scope: !38)
!187 = !DILocalVariable(name: "c", scope: !38, file: !1, line: 307, type: !9)
!188 = !DILocation(line: 307, column: 17, scope: !38)
!189 = !DILocalVariable(name: "buf4", scope: !38, file: !1, line: 308, type: !14)
!190 = !DILocation(line: 308, column: 28, scope: !38)
!191 = !DILocation(line: 310, column: 9, scope: !38)
!192 = !DILocation(line: 310, column: 7, scope: !38)
!193 = !DILocation(line: 311, column: 10, scope: !38)
!194 = !DILocation(line: 311, column: 9, scope: !38)
!195 = !DILocation(line: 311, column: 7, scope: !38)
!196 = !DILocation(line: 312, column: 5, scope: !38)
!197 = !DILocation(line: 312, column: 12, scope: !198)
!198 = !DILexicalBlockFile(scope: !38, file: !1, discriminator: 1)
!199 = !DILocation(line: 312, column: 16, scope: !198)
!200 = !DILocation(line: 312, column: 31, scope: !201)
!201 = !DILexicalBlockFile(scope: !38, file: !1, discriminator: 2)
!202 = !DILocation(line: 312, column: 20, scope: !201)
!203 = !DILocation(line: 312, column: 35, scope: !201)
!204 = !DILocation(line: 312, column: 16, scope: !201)
!205 = !DILocation(line: 312, column: 5, scope: !206)
!206 = !DILexicalBlockFile(scope: !38, file: !1, discriminator: 3)
!207 = !DILocation(line: 313, column: 27, scope: !208)
!208 = distinct !DILexicalBlock(scope: !38, file: !1, line: 312, column: 41)
!209 = !DILocation(line: 313, column: 29, scope: !208)
!210 = !DILocation(line: 313, column: 42, scope: !208)
!211 = !DILocation(line: 313, column: 38, scope: !208)
!212 = !DILocation(line: 313, column: 36, scope: !208)
!213 = !DILocation(line: 313, column: 13, scope: !208)
!214 = !DILocation(line: 313, column: 49, scope: !208)
!215 = !DILocation(line: 313, column: 51, scope: !208)
!216 = !DILocation(line: 313, column: 48, scope: !208)
!217 = !DILocation(line: 313, column: 46, scope: !208)
!218 = !DILocation(line: 313, column: 11, scope: !208)
!219 = !DILocation(line: 314, column: 12, scope: !208)
!220 = !DILocation(line: 312, column: 5, scope: !221)
!221 = !DILexicalBlockFile(scope: !38, file: !1, discriminator: 4)
!222 = !DILocation(line: 317, column: 46, scope: !38)
!223 = !DILocation(line: 317, column: 12, scope: !38)
!224 = !DILocation(line: 317, column: 10, scope: !38)
!225 = !DILocation(line: 318, column: 9, scope: !38)
!226 = !DILocation(line: 319, column: 5, scope: !38)
!227 = !DILocation(line: 319, column: 12, scope: !198)
!228 = !DILocation(line: 319, column: 16, scope: !198)
!229 = !DILocation(line: 319, column: 5, scope: !198)
!230 = !DILocation(line: 320, column: 9, scope: !231)
!231 = distinct !DILexicalBlock(scope: !38, file: !1, line: 319, column: 23)
!232 = !DILocation(line: 321, column: 13, scope: !231)
!233 = !DILocation(line: 319, column: 5, scope: !201)
!234 = !DILocation(line: 323, column: 5, scope: !38)
!235 = !DILocation(line: 323, column: 12, scope: !198)
!236 = !DILocation(line: 323, column: 16, scope: !198)
!237 = !DILocation(line: 323, column: 5, scope: !198)
!238 = !DILocation(line: 324, column: 9, scope: !239)
!239 = distinct !DILexicalBlock(scope: !38, file: !1, line: 323, column: 22)
!240 = !DILocation(line: 325, column: 13, scope: !239)
!241 = !DILocation(line: 323, column: 5, scope: !201)
!242 = !DILocation(line: 327, column: 9, scope: !38)
!243 = !DILocation(line: 328, column: 38, scope: !38)
!244 = !DILocation(line: 328, column: 11, scope: !38)
!245 = !DILocation(line: 328, column: 9, scope: !38)
!246 = !DILocation(line: 330, column: 9, scope: !247)
!247 = distinct !DILexicalBlock(scope: !38, file: !1, line: 330, column: 9)
!248 = !DILocation(line: 330, column: 9, scope: !38)
!249 = !DILocation(line: 330, column: 14, scope: !250)
!250 = !DILexicalBlockFile(scope: !247, file: !1, discriminator: 1)
!251 = !DILocation(line: 331, column: 27, scope: !252)
!252 = distinct !DILexicalBlock(scope: !247, file: !1, line: 330, column: 17)
!253 = !DILocation(line: 331, column: 29, scope: !252)
!254 = !DILocation(line: 331, column: 42, scope: !252)
!255 = !DILocation(line: 331, column: 38, scope: !252)
!256 = !DILocation(line: 331, column: 36, scope: !252)
!257 = !DILocation(line: 331, column: 13, scope: !252)
!258 = !DILocation(line: 331, column: 49, scope: !252)
!259 = !DILocation(line: 331, column: 51, scope: !252)
!260 = !DILocation(line: 331, column: 48, scope: !252)
!261 = !DILocation(line: 331, column: 46, scope: !252)
!262 = !DILocation(line: 331, column: 11, scope: !252)
!263 = !DILocation(line: 332, column: 5, scope: !252)
!264 = !DILocation(line: 332, column: 14, scope: !250)
!265 = !DILocation(line: 332, column: 5, scope: !250)
!266 = !DILocation(line: 332, column: 5, scope: !267)
!267 = !DILexicalBlockFile(scope: !252, file: !1, discriminator: 2)
!268 = !DILocation(line: 333, column: 10, scope: !38)
!269 = !DILocation(line: 333, column: 9, scope: !38)
!270 = !DILocation(line: 333, column: 7, scope: !38)
!271 = !DILocation(line: 334, column: 28, scope: !38)
!272 = !DILocation(line: 334, column: 12, scope: !38)
!273 = !DILocation(line: 334, column: 5, scope: !38)
!274 = !DILocalVariable(name: "crc1", arg: 1, scope: !32, file: !1, line: 371, type: !28)
!275 = !DILocation(line: 371, column: 11, scope: !32)
!276 = !DILocalVariable(name: "crc2", arg: 2, scope: !32, file: !1, line: 372, type: !28)
!277 = !DILocation(line: 372, column: 11, scope: !32)
!278 = !DILocalVariable(name: "len2", arg: 3, scope: !32, file: !1, line: 373, type: !13)
!279 = !DILocation(line: 373, column: 13, scope: !32)
!280 = !DILocalVariable(name: "n", scope: !32, file: !1, line: 375, type: !281)
!281 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!282 = !DILocation(line: 375, column: 9, scope: !32)
!283 = !DILocalVariable(name: "row", scope: !32, file: !1, line: 376, type: !6)
!284 = !DILocation(line: 376, column: 19, scope: !32)
!285 = !DILocalVariable(name: "even", scope: !32, file: !1, line: 377, type: !286)
!286 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 2048, align: 64, elements: !287)
!287 = !{!288}
!288 = !DISubrange(count: 32)
!289 = !DILocation(line: 377, column: 19, scope: !32)
!290 = !DILocalVariable(name: "odd", scope: !32, file: !1, line: 378, type: !286)
!291 = !DILocation(line: 378, column: 19, scope: !32)
!292 = !DILocation(line: 381, column: 9, scope: !293)
!293 = distinct !DILexicalBlock(scope: !32, file: !1, line: 381, column: 9)
!294 = !DILocation(line: 381, column: 14, scope: !293)
!295 = !DILocation(line: 381, column: 9, scope: !32)
!296 = !DILocation(line: 382, column: 16, scope: !293)
!297 = !DILocation(line: 382, column: 9, scope: !293)
!298 = !DILocation(line: 385, column: 5, scope: !32)
!299 = !DILocation(line: 385, column: 12, scope: !32)
!300 = !DILocation(line: 386, column: 9, scope: !32)
!301 = !DILocation(line: 387, column: 12, scope: !302)
!302 = distinct !DILexicalBlock(scope: !32, file: !1, line: 387, column: 5)
!303 = !DILocation(line: 387, column: 10, scope: !302)
!304 = !DILocation(line: 387, column: 17, scope: !305)
!305 = !DILexicalBlockFile(scope: !306, file: !1, discriminator: 1)
!306 = distinct !DILexicalBlock(scope: !302, file: !1, line: 387, column: 5)
!307 = !DILocation(line: 387, column: 19, scope: !305)
!308 = !DILocation(line: 387, column: 5, scope: !305)
!309 = !DILocation(line: 388, column: 18, scope: !310)
!310 = distinct !DILexicalBlock(scope: !306, file: !1, line: 387, column: 35)
!311 = !DILocation(line: 388, column: 13, scope: !310)
!312 = !DILocation(line: 388, column: 9, scope: !310)
!313 = !DILocation(line: 388, column: 16, scope: !310)
!314 = !DILocation(line: 389, column: 13, scope: !310)
!315 = !DILocation(line: 390, column: 5, scope: !310)
!316 = !DILocation(line: 387, column: 31, scope: !317)
!317 = !DILexicalBlockFile(scope: !306, file: !1, discriminator: 2)
!318 = !DILocation(line: 387, column: 5, scope: !317)
!319 = !DILocation(line: 393, column: 23, scope: !32)
!320 = !DILocation(line: 393, column: 29, scope: !32)
!321 = !DILocation(line: 393, column: 5, scope: !32)
!322 = !DILocation(line: 396, column: 23, scope: !32)
!323 = !DILocation(line: 396, column: 28, scope: !32)
!324 = !DILocation(line: 396, column: 5, scope: !32)
!325 = !DILocation(line: 400, column: 5, scope: !32)
!326 = !DILocation(line: 402, column: 27, scope: !327)
!327 = distinct !DILexicalBlock(scope: !32, file: !1, line: 400, column: 8)
!328 = !DILocation(line: 402, column: 33, scope: !327)
!329 = !DILocation(line: 402, column: 9, scope: !327)
!330 = !DILocation(line: 403, column: 13, scope: !331)
!331 = distinct !DILexicalBlock(scope: !327, file: !1, line: 403, column: 13)
!332 = !DILocation(line: 403, column: 18, scope: !331)
!333 = !DILocation(line: 403, column: 13, scope: !327)
!334 = !DILocation(line: 404, column: 37, scope: !331)
!335 = !DILocation(line: 404, column: 43, scope: !331)
!336 = !DILocation(line: 404, column: 20, scope: !331)
!337 = !DILocation(line: 404, column: 18, scope: !331)
!338 = !DILocation(line: 404, column: 13, scope: !331)
!339 = !DILocation(line: 405, column: 14, scope: !327)
!340 = !DILocation(line: 408, column: 13, scope: !341)
!341 = distinct !DILexicalBlock(scope: !327, file: !1, line: 408, column: 13)
!342 = !DILocation(line: 408, column: 18, scope: !341)
!343 = !DILocation(line: 408, column: 13, scope: !327)
!344 = !DILocation(line: 409, column: 13, scope: !341)
!345 = !DILocation(line: 412, column: 27, scope: !327)
!346 = !DILocation(line: 412, column: 32, scope: !327)
!347 = !DILocation(line: 412, column: 9, scope: !327)
!348 = !DILocation(line: 413, column: 13, scope: !349)
!349 = distinct !DILexicalBlock(scope: !327, file: !1, line: 413, column: 13)
!350 = !DILocation(line: 413, column: 18, scope: !349)
!351 = !DILocation(line: 413, column: 13, scope: !327)
!352 = !DILocation(line: 414, column: 37, scope: !349)
!353 = !DILocation(line: 414, column: 42, scope: !349)
!354 = !DILocation(line: 414, column: 20, scope: !349)
!355 = !DILocation(line: 414, column: 18, scope: !349)
!356 = !DILocation(line: 414, column: 13, scope: !349)
!357 = !DILocation(line: 415, column: 14, scope: !327)
!358 = !DILocation(line: 418, column: 5, scope: !327)
!359 = !DILocation(line: 418, column: 14, scope: !360)
!360 = !DILexicalBlockFile(scope: !32, file: !1, discriminator: 1)
!361 = !DILocation(line: 418, column: 19, scope: !360)
!362 = !DILocation(line: 418, column: 5, scope: !360)
!363 = !DILocation(line: 421, column: 13, scope: !32)
!364 = !DILocation(line: 421, column: 10, scope: !32)
!365 = !DILocation(line: 422, column: 12, scope: !32)
!366 = !DILocation(line: 422, column: 5, scope: !32)
!367 = !DILocation(line: 423, column: 1, scope: !32)
!368 = !DILocalVariable(name: "square", arg: 1, scope: !39, file: !1, line: 360, type: !42)
!369 = !DILocation(line: 360, column: 20, scope: !39)
!370 = !DILocalVariable(name: "mat", arg: 2, scope: !39, file: !1, line: 361, type: !42)
!371 = !DILocation(line: 361, column: 20, scope: !39)
!372 = !DILocalVariable(name: "n", scope: !39, file: !1, line: 363, type: !281)
!373 = !DILocation(line: 363, column: 9, scope: !39)
!374 = !DILocation(line: 365, column: 12, scope: !375)
!375 = distinct !DILexicalBlock(scope: !39, file: !1, line: 365, column: 5)
!376 = !DILocation(line: 365, column: 10, scope: !375)
!377 = !DILocation(line: 365, column: 17, scope: !378)
!378 = !DILexicalBlockFile(scope: !379, file: !1, discriminator: 1)
!379 = distinct !DILexicalBlock(scope: !375, file: !1, line: 365, column: 5)
!380 = !DILocation(line: 365, column: 19, scope: !378)
!381 = !DILocation(line: 365, column: 5, scope: !378)
!382 = !DILocation(line: 366, column: 38, scope: !379)
!383 = !DILocation(line: 366, column: 47, scope: !379)
!384 = !DILocation(line: 366, column: 43, scope: !379)
!385 = !DILocation(line: 366, column: 21, scope: !379)
!386 = !DILocation(line: 366, column: 16, scope: !379)
!387 = !DILocation(line: 366, column: 9, scope: !379)
!388 = !DILocation(line: 366, column: 19, scope: !379)
!389 = !DILocation(line: 365, column: 31, scope: !390)
!390 = !DILexicalBlockFile(scope: !379, file: !1, discriminator: 2)
!391 = !DILocation(line: 365, column: 5, scope: !390)
!392 = !DILocation(line: 367, column: 1, scope: !39)
!393 = !DILocalVariable(name: "mat", arg: 1, scope: !43, file: !1, line: 343, type: !42)
!394 = !DILocation(line: 343, column: 20, scope: !43)
!395 = !DILocalVariable(name: "vec", arg: 2, scope: !43, file: !1, line: 344, type: !6)
!396 = !DILocation(line: 344, column: 19, scope: !43)
!397 = !DILocalVariable(name: "sum", scope: !43, file: !1, line: 346, type: !6)
!398 = !DILocation(line: 346, column: 19, scope: !43)
!399 = !DILocation(line: 348, column: 9, scope: !43)
!400 = !DILocation(line: 349, column: 5, scope: !43)
!401 = !DILocation(line: 349, column: 12, scope: !402)
!402 = !DILexicalBlockFile(scope: !43, file: !1, discriminator: 1)
!403 = !DILocation(line: 349, column: 5, scope: !402)
!404 = !DILocation(line: 350, column: 13, scope: !405)
!405 = distinct !DILexicalBlock(scope: !406, file: !1, line: 350, column: 13)
!406 = distinct !DILexicalBlock(scope: !43, file: !1, line: 349, column: 17)
!407 = !DILocation(line: 350, column: 17, scope: !405)
!408 = !DILocation(line: 350, column: 13, scope: !406)
!409 = !DILocation(line: 351, column: 21, scope: !405)
!410 = !DILocation(line: 351, column: 20, scope: !405)
!411 = !DILocation(line: 351, column: 17, scope: !405)
!412 = !DILocation(line: 351, column: 13, scope: !405)
!413 = !DILocation(line: 352, column: 13, scope: !406)
!414 = !DILocation(line: 353, column: 12, scope: !406)
!415 = !DILocation(line: 349, column: 5, scope: !416)
!416 = !DILexicalBlockFile(scope: !43, file: !1, discriminator: 2)
!417 = !DILocation(line: 355, column: 12, scope: !43)
!418 = !DILocation(line: 355, column: 5, scope: !43)
