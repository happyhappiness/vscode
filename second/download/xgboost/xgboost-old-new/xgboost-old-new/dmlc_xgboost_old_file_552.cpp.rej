--- /dev/null
+++ /dev/null
@@ -163,20 +96,17 @@
             inline void LoadBinary( utils::IStream &fi ){
                 size_t nrow;
                 utils::Assert( fi.Read( &nrow, sizeof(size_t) ) != 0, "Load FMatrixS" );
-                row_ptr_.resize( nrow + 1 );
-                utils::Assert( fi.Read( &row_ptr_[0], row_ptr_.size() * sizeof(size_t) ), "Load FMatrixS" );
+                row_ptr.resize( nrow + 1 );
+                utils::Assert( fi.Read( &row_ptr[0], row_ptr.size() * sizeof(size_t) ), "Load FMatrixS" );
 
-                row_data_.resize( row_ptr_.back() ); 
-                if( row_data_.size() != 0 ){
-                    utils::Assert( fi.Read( &row_data_[0] , row_data_.size() * sizeof(REntry) ) , "Load FMatrixS" );
+                findex.resize( row_ptr.back() ); fvalue.resize( row_ptr.back() );                
+                if( findex.size() != 0 ){
+                    utils::Assert( fi.Read( &findex[0] , findex.size() * sizeof(bst_uint) ) , "Load FMatrixS" );
+                    utils::Assert( fi.Read( &fvalue[0] , fvalue.size() * sizeof(bst_float) ), "Load FMatrixS" );
                 }
             }
-        private:
-            /*! \brief row pointer of CSR sparse storage */
-            std::vector<size_t>  row_ptr_;
-            /*! \brief data in the row */
-            std::vector<REntry>  row_data_;
-        };        
-    };
+        };
+    };    
 };
+
 
