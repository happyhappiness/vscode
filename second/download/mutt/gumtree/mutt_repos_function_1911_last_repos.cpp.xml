<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1911_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">alias_compare<pos:position pos:line="2" pos:column="14"/></name> <argument_list pos:line="2" pos:column="15">(<argument><expr><name pos:line="2" pos:column="16">map1<pos:position pos:line="2" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="22">map2<pos:position pos:line="2" pos:column="26"/></name></expr></argument>)<pos:position pos:line="2" pos:column="27"/></argument_list>
     const struct <name pos:line="3" pos:column="19">alias_map<pos:position pos:line="3" pos:column="28"/></name> <modifier pos:line="3" pos:column="29">*<pos:position pos:line="3" pos:column="30"/></modifier><name pos:line="3" pos:column="30">map1<pos:position pos:line="3" pos:column="34"/></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
     <decl_stmt><decl><type><specifier pos:line="4" pos:column="6">const<pos:position pos:line="4" pos:column="11"/></specifier> <name><name pos:line="4" pos:column="12">struct<pos:position pos:line="4" pos:column="18"/></name> <name pos:line="4" pos:column="19">alias_map<pos:position pos:line="4" pos:column="28"/></name></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">map2<pos:position pos:line="4" pos:column="34"/></name></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
<block pos:line="5" pos:column="1">{
<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><name pos:line="6" pos:column="5">defined<pos:position pos:line="6" pos:column="12"/></name> <name pos:line="6" pos:column="13">_LIBC<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">||<pos:position pos:line="6" pos:column="21"/></operator> <name pos:line="6" pos:column="22">defined<pos:position pos:line="6" pos:column="29"/></name> <name pos:line="6" pos:column="30">HAVE_STRCASECMP<pos:position pos:line="6" pos:column="45"/></name></expr></cpp:if>
  <return pos:line="7" pos:column="3">return <expr><call><name pos:line="7" pos:column="10">strcasecmp<pos:position pos:line="7" pos:column="20"/></name> <argument_list pos:line="7" pos:column="21">(<argument><expr><name><name pos:line="7" pos:column="22">map1<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">-&gt;<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="28">alias<pos:position pos:line="7" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="35">map2<pos:position pos:line="7" pos:column="39"/></name><operator pos:line="7" pos:column="39">-&gt;<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="41">alias<pos:position pos:line="7" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="48"/></return>
<cpp:else pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">else<pos:position pos:line="8" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name pos:line="9" pos:column="9">unsigned<pos:position pos:line="9" pos:column="17"/></name> <name pos:line="9" pos:column="18">char<pos:position pos:line="9" pos:column="22"/></name> <modifier pos:line="9" pos:column="23">*<pos:position pos:line="9" pos:column="24"/></modifier></type><name pos:line="9" pos:column="24">p1<pos:position pos:line="9" pos:column="26"/></name> <init pos:line="9" pos:column="27">= <expr><operator pos:line="9" pos:column="29">(<pos:position pos:line="9" pos:column="30"/></operator><specifier pos:line="9" pos:column="30">const<pos:position pos:line="9" pos:column="35"/></specifier> <name pos:line="9" pos:column="36">unsigned<pos:position pos:line="9" pos:column="44"/></name> <name pos:line="9" pos:column="45">char<pos:position pos:line="9" pos:column="49"/></name> <operator pos:line="9" pos:column="50">*<pos:position pos:line="9" pos:column="51"/></operator><operator pos:line="9" pos:column="51">)<pos:position pos:line="9" pos:column="52"/></operator> <name><name pos:line="9" pos:column="53">map1<pos:position pos:line="9" pos:column="57"/></name><operator pos:line="9" pos:column="57">-&gt;<pos:position pos:line="9" pos:column="62"/></operator><name pos:line="9" pos:column="59">alias<pos:position pos:line="9" pos:column="64"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="65"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="10" pos:column="3">const<pos:position pos:line="10" pos:column="8"/></specifier> <name pos:line="10" pos:column="9">unsigned<pos:position pos:line="10" pos:column="17"/></name> <name pos:line="10" pos:column="18">char<pos:position pos:line="10" pos:column="22"/></name> <modifier pos:line="10" pos:column="23">*<pos:position pos:line="10" pos:column="24"/></modifier></type><name pos:line="10" pos:column="24">p2<pos:position pos:line="10" pos:column="26"/></name> <init pos:line="10" pos:column="27">= <expr><operator pos:line="10" pos:column="29">(<pos:position pos:line="10" pos:column="30"/></operator><specifier pos:line="10" pos:column="30">const<pos:position pos:line="10" pos:column="35"/></specifier> <name pos:line="10" pos:column="36">unsigned<pos:position pos:line="10" pos:column="44"/></name> <name pos:line="10" pos:column="45">char<pos:position pos:line="10" pos:column="49"/></name> <operator pos:line="10" pos:column="50">*<pos:position pos:line="10" pos:column="51"/></operator><operator pos:line="10" pos:column="51">)<pos:position pos:line="10" pos:column="52"/></operator> <name><name pos:line="10" pos:column="53">map2<pos:position pos:line="10" pos:column="57"/></name><operator pos:line="10" pos:column="57">-&gt;<pos:position pos:line="10" pos:column="62"/></operator><name pos:line="10" pos:column="59">alias<pos:position pos:line="10" pos:column="64"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="65"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">unsigned<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">char<pos:position pos:line="11" pos:column="16"/></name></type> <name pos:line="11" pos:column="17">c1<pos:position pos:line="11" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="21">c2<pos:position pos:line="11" pos:column="23"/></name></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">p1<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">==<pos:position pos:line="13" pos:column="12"/></operator> <name pos:line="13" pos:column="13">p2<pos:position pos:line="13" pos:column="15"/></name></expr>)<pos:position pos:line="13" pos:column="16"/></condition><then pos:line="13" pos:column="16">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><literal type="number" pos:line="14" pos:column="12">0<pos:position pos:line="14" pos:column="13"/></literal></expr>;<pos:position pos:line="14" pos:column="14"/></return></block></then></if>

  <do pos:line="16" pos:column="3">do
    <block pos:line="17" pos:column="5">{
      <comment type="block" pos:line="18" pos:column="7">/* I know this seems to be odd but the tolower() function in
	 some systems libc cannot handle nonalpha characters.  */</comment>
      <expr_stmt><expr><name pos:line="20" pos:column="7">c1<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <ternary><condition><expr><call><name pos:line="20" pos:column="12">isupper<pos:position pos:line="20" pos:column="19"/></name> <argument_list pos:line="20" pos:column="20">(<argument><expr><operator pos:line="20" pos:column="21">*<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">p1<pos:position pos:line="20" pos:column="24"/></name></expr></argument>)<pos:position pos:line="20" pos:column="25"/></argument_list></call></expr> ?<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27"> <expr><call><name pos:line="20" pos:column="28">tolower<pos:position pos:line="20" pos:column="35"/></name> <argument_list pos:line="20" pos:column="36">(<argument><expr><operator pos:line="20" pos:column="37">*<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="38">p1<pos:position pos:line="20" pos:column="40"/></name></expr></argument>)<pos:position pos:line="20" pos:column="41"/></argument_list></call></expr> <pos:position pos:line="20" pos:column="42"/></then><else pos:line="20" pos:column="42">: <expr><operator pos:line="20" pos:column="44">*<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="45">p1<pos:position pos:line="20" pos:column="47"/></name></expr></else></ternary></expr>;<pos:position pos:line="20" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><name pos:line="21" pos:column="7">c2<pos:position pos:line="21" pos:column="9"/></name> <operator pos:line="21" pos:column="10">=<pos:position pos:line="21" pos:column="11"/></operator> <ternary><condition><expr><call><name pos:line="21" pos:column="12">isupper<pos:position pos:line="21" pos:column="19"/></name> <argument_list pos:line="21" pos:column="20">(<argument><expr><operator pos:line="21" pos:column="21">*<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">p2<pos:position pos:line="21" pos:column="24"/></name></expr></argument>)<pos:position pos:line="21" pos:column="25"/></argument_list></call></expr> ?<pos:position pos:line="21" pos:column="27"/></condition><then pos:line="21" pos:column="27"> <expr><call><name pos:line="21" pos:column="28">tolower<pos:position pos:line="21" pos:column="35"/></name> <argument_list pos:line="21" pos:column="36">(<argument><expr><operator pos:line="21" pos:column="37">*<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="38">p2<pos:position pos:line="21" pos:column="40"/></name></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr> <pos:position pos:line="21" pos:column="42"/></then><else pos:line="21" pos:column="42">: <expr><operator pos:line="21" pos:column="44">*<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="45">p2<pos:position pos:line="21" pos:column="47"/></name></expr></else></ternary></expr>;<pos:position pos:line="21" pos:column="48"/></expr_stmt>
      <if pos:line="22" pos:column="7">if <condition pos:line="22" pos:column="10">(<expr><name pos:line="22" pos:column="11">c1<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">==<pos:position pos:line="22" pos:column="16"/></operator> <literal type="char" pos:line="22" pos:column="17">'\0'<pos:position pos:line="22" pos:column="21"/></literal></expr>)<pos:position pos:line="22" pos:column="22"/></condition><then pos:line="22" pos:column="22">
	<block type="pseudo"><break pos:line="23" pos:column="9">break;<pos:position pos:line="23" pos:column="15"/></break></block></then></if>
      <expr_stmt><expr><operator pos:line="24" pos:column="7">++<pos:position pos:line="24" pos:column="9"/></operator><name pos:line="24" pos:column="9">p1<pos:position pos:line="24" pos:column="11"/></name></expr>;<pos:position pos:line="24" pos:column="12"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="25" pos:column="7">++<pos:position pos:line="25" pos:column="9"/></operator><name pos:line="25" pos:column="9">p2<pos:position pos:line="25" pos:column="11"/></name></expr>;<pos:position pos:line="25" pos:column="12"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block>
  while <condition pos:line="27" pos:column="9">(<expr><name pos:line="27" pos:column="10">c1<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">==<pos:position pos:line="27" pos:column="15"/></operator> <name pos:line="27" pos:column="16">c2<pos:position pos:line="27" pos:column="18"/></name></expr>)<pos:position pos:line="27" pos:column="19"/></condition>;<pos:position pos:line="27" pos:column="20"/></do>

  <return pos:line="29" pos:column="3">return <expr><name pos:line="29" pos:column="10">c1<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">-<pos:position pos:line="29" pos:column="14"/></operator> <name pos:line="29" pos:column="15">c2<pos:position pos:line="29" pos:column="17"/></name></expr>;<pos:position pos:line="29" pos:column="18"/></return>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif<pos:position pos:line="30" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="31" pos:column="2"/></block></unit>
