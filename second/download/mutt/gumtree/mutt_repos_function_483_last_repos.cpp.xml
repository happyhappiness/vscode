<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_483_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">mutt_endwin<pos:position pos:line="1" pos:column="17"/></name> <parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">msg<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="35"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">e<pos:position pos:line="3" pos:column="8"/></name> <init pos:line="3" pos:column="9">= <expr><name pos:line="3" pos:column="11">errno<pos:position pos:line="3" pos:column="16"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><operator pos:line="5" pos:column="7">!<pos:position pos:line="5" pos:column="8"/></operator><call><name pos:line="5" pos:column="8">option<pos:position pos:line="5" pos:column="14"/></name> <argument_list pos:line="5" pos:column="15">(<argument><expr><name pos:line="5" pos:column="16">OPTNOCURSES<pos:position pos:line="5" pos:column="27"/></name></expr></argument>)<pos:position pos:line="5" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="29"/></condition><then pos:line="5" pos:column="29">
  <block pos:line="6" pos:column="3">{
    <comment type="block" pos:line="7" pos:column="5">/* at least in some situations (screen + xterm under SuSE11/12) endwin()
     * doesn't properly flush the screen without an explicit call.
     */</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">mutt_refresh<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">()<pos:position pos:line="10" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">endwin<pos:position pos:line="11" pos:column="11"/></name> <argument_list pos:line="11" pos:column="12">()<pos:position pos:line="11" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="15"/></expr_stmt>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>
  
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">msg<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">&amp;&amp;<pos:position pos:line="14" pos:column="21"/></operator> <operator pos:line="14" pos:column="14">*<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="15">msg<pos:position pos:line="14" pos:column="18"/></name></expr>)<pos:position pos:line="14" pos:column="19"/></condition><then pos:line="14" pos:column="19">
  <block pos:line="15" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">puts<pos:position pos:line="16" pos:column="9"/></name> <argument_list pos:line="16" pos:column="10">(<argument><expr><name pos:line="16" pos:column="11">msg<pos:position pos:line="16" pos:column="14"/></name></expr></argument>)<pos:position pos:line="16" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">fflush<pos:position pos:line="17" pos:column="11"/></name> <argument_list pos:line="17" pos:column="12">(<argument><expr><name pos:line="17" pos:column="13">stdout<pos:position pos:line="17" pos:column="19"/></name></expr></argument>)<pos:position pos:line="17" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="20" pos:column="3">errno<pos:position pos:line="20" pos:column="8"/></name> <operator pos:line="20" pos:column="9">=<pos:position pos:line="20" pos:column="10"/></operator> <name pos:line="20" pos:column="11">e<pos:position pos:line="20" pos:column="12"/></name></expr>;<pos:position pos:line="20" pos:column="13"/></expr_stmt>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
