<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_504_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_strwidth<pos:position pos:line="1" pos:column="18"/></name> <parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">s<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">wchar_t<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">wc<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">w<pos:position pos:line="4" pos:column="8"/></name></decl>;<pos:position pos:line="4" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">k<pos:position pos:line="5" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="13">n<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">mbstate_t<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">mbstate<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><operator pos:line="8" pos:column="7">!<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">s<pos:position pos:line="8" pos:column="9"/></name></expr>)<pos:position pos:line="8" pos:column="10"/></condition><then pos:line="8" pos:column="10"> <block type="pseudo"><return pos:line="8" pos:column="11">return <expr><literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr>;<pos:position pos:line="8" pos:column="20"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="10" pos:column="3">n<pos:position pos:line="10" pos:column="4"/></name> <operator pos:line="10" pos:column="5">=<pos:position pos:line="10" pos:column="6"/></operator> <call><name pos:line="10" pos:column="7">mutt_strlen<pos:position pos:line="10" pos:column="18"/></name> <argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">s<pos:position pos:line="10" pos:column="21"/></name></expr></argument>)<pos:position pos:line="10" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">memset<pos:position pos:line="12" pos:column="9"/></name> <argument_list pos:line="12" pos:column="10">(<argument><expr><operator pos:line="12" pos:column="11">&amp;<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="12">mbstate<pos:position pos:line="12" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="21">0<pos:position pos:line="12" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="24">sizeof <argument_list pos:line="12" pos:column="31">(<argument><expr><name pos:line="12" pos:column="32">mbstate<pos:position pos:line="12" pos:column="39"/></name></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="42"/></expr_stmt>
  <for pos:line="13" pos:column="3">for <control pos:line="13" pos:column="7">(<init><expr><name pos:line="13" pos:column="8">w<pos:position pos:line="13" pos:column="9"/></name><operator pos:line="13" pos:column="9">=<pos:position pos:line="13" pos:column="10"/></operator><literal type="number" pos:line="13" pos:column="10">0<pos:position pos:line="13" pos:column="11"/></literal></expr>;<pos:position pos:line="13" pos:column="12"/></init> <condition><expr><name pos:line="13" pos:column="13">n<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">&amp;&amp;<pos:position pos:line="13" pos:column="25"/></operator> <operator pos:line="13" pos:column="18">(<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">k<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <call><name pos:line="13" pos:column="23">mbrtowc<pos:position pos:line="13" pos:column="30"/></name> <argument_list pos:line="13" pos:column="31">(<argument><expr><operator pos:line="13" pos:column="32">&amp;<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="33">wc<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="37">s<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="40">n<pos:position pos:line="13" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="43">&amp;<pos:position pos:line="13" pos:column="48"/></operator><name pos:line="13" pos:column="44">mbstate<pos:position pos:line="13" pos:column="51"/></name></expr></argument>)<pos:position pos:line="13" pos:column="52"/></argument_list></call><operator pos:line="13" pos:column="52">)<pos:position pos:line="13" pos:column="53"/></operator></expr>;<pos:position pos:line="13" pos:column="54"/></condition> <incr><expr><name pos:line="13" pos:column="55">s<pos:position pos:line="13" pos:column="56"/></name> <operator pos:line="13" pos:column="57">+=<pos:position pos:line="13" pos:column="59"/></operator> <name pos:line="13" pos:column="60">k<pos:position pos:line="13" pos:column="61"/></name></expr><operator pos:line="13" pos:column="61">,<pos:position pos:line="13" pos:column="62"/></operator> <expr><name pos:line="13" pos:column="63">n<pos:position pos:line="13" pos:column="64"/></name> <operator pos:line="13" pos:column="65">-=<pos:position pos:line="13" pos:column="67"/></operator> <name pos:line="13" pos:column="68">k<pos:position pos:line="13" pos:column="69"/></name></expr></incr>)<pos:position pos:line="13" pos:column="70"/></control>
  <block pos:line="14" pos:column="3">{
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">k<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">==<pos:position pos:line="15" pos:column="13"/></operator> <call pos:line="15" pos:column="14">(<name pos:line="15" pos:column="15">size_t<pos:position pos:line="15" pos:column="21"/></name>)<argument_list pos:line="15" pos:column="22">(<argument><expr><operator pos:line="15" pos:column="23">-<pos:position pos:line="15" pos:column="24"/></operator><literal type="number" pos:line="15" pos:column="24">1<pos:position pos:line="15" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></call> <operator pos:line="15" pos:column="27">||<pos:position pos:line="15" pos:column="29"/></operator> <name pos:line="15" pos:column="30">k<pos:position pos:line="15" pos:column="31"/></name> <operator pos:line="15" pos:column="32">==<pos:position pos:line="15" pos:column="34"/></operator> <call pos:line="15" pos:column="35">(<name pos:line="15" pos:column="36">size_t<pos:position pos:line="15" pos:column="42"/></name>)<argument_list pos:line="15" pos:column="43">(<argument><expr><operator pos:line="15" pos:column="44">-<pos:position pos:line="15" pos:column="45"/></operator><literal type="number" pos:line="15" pos:column="45">2<pos:position pos:line="15" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="48"/></condition><then pos:line="15" pos:column="48">
    <block pos:line="16" pos:column="5">{
      <if pos:line="17" pos:column="7">if <condition pos:line="17" pos:column="10">(<expr><name pos:line="17" pos:column="11">k<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">==<pos:position pos:line="17" pos:column="15"/></operator> <call pos:line="17" pos:column="16">(<name pos:line="17" pos:column="17">size_t<pos:position pos:line="17" pos:column="23"/></name>)<argument_list pos:line="17" pos:column="24">(<argument><expr><operator pos:line="17" pos:column="25">-<pos:position pos:line="17" pos:column="26"/></operator><literal type="number" pos:line="17" pos:column="26">1<pos:position pos:line="17" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="29"/></condition><then pos:line="17" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="9">memset<pos:position pos:line="18" pos:column="15"/></name> <argument_list pos:line="18" pos:column="16">(<argument><expr><operator pos:line="18" pos:column="17">&amp;<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="18">mbstate<pos:position pos:line="18" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="27">0<pos:position pos:line="18" pos:column="28"/></literal></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="30">sizeof <argument_list pos:line="18" pos:column="37">(<argument><expr><name pos:line="18" pos:column="38">mbstate<pos:position pos:line="18" pos:column="45"/></name></expr></argument>)<pos:position pos:line="18" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name pos:line="19" pos:column="7">k<pos:position pos:line="19" pos:column="8"/></name> <operator pos:line="19" pos:column="9">=<pos:position pos:line="19" pos:column="10"/></operator> <ternary><condition><expr><operator pos:line="19" pos:column="11">(<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="12">k<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">==<pos:position pos:line="19" pos:column="16"/></operator> <call pos:line="19" pos:column="17">(<name pos:line="19" pos:column="18">size_t<pos:position pos:line="19" pos:column="24"/></name>)<argument_list pos:line="19" pos:column="25">(<argument><expr><operator pos:line="19" pos:column="26">-<pos:position pos:line="19" pos:column="27"/></operator><literal type="number" pos:line="19" pos:column="27">1<pos:position pos:line="19" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="29"/></argument_list></call><operator pos:line="19" pos:column="29">)<pos:position pos:line="19" pos:column="30"/></operator></expr> ?<pos:position pos:line="19" pos:column="32"/></condition><then pos:line="19" pos:column="32"> <expr><literal type="number" pos:line="19" pos:column="33">1<pos:position pos:line="19" pos:column="34"/></literal></expr> <pos:position pos:line="19" pos:column="35"/></then><else pos:line="19" pos:column="35">: <expr><name pos:line="19" pos:column="37">n<pos:position pos:line="19" pos:column="38"/></name></expr></else></ternary></expr>;<pos:position pos:line="19" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name pos:line="20" pos:column="7">wc<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <call><name pos:line="20" pos:column="12">replacement_char<pos:position pos:line="20" pos:column="28"/></name> <argument_list pos:line="20" pos:column="29">()<pos:position pos:line="20" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">!<pos:position pos:line="22" pos:column="10"/></operator><call><name pos:line="22" pos:column="10">IsWPrint<pos:position pos:line="22" pos:column="18"/></name> <argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">wc<pos:position pos:line="22" pos:column="22"/></name></expr></argument>)<pos:position pos:line="22" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="24"/></condition><then pos:line="22" pos:column="24">
      <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="7">wc<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <literal type="char" pos:line="23" pos:column="12">'?'<pos:position pos:line="23" pos:column="15"/></literal></expr>;<pos:position pos:line="23" pos:column="16"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="24" pos:column="5">w<pos:position pos:line="24" pos:column="6"/></name> <operator pos:line="24" pos:column="7">+=<pos:position pos:line="24" pos:column="9"/></operator> <call><name pos:line="24" pos:column="10">wcwidth<pos:position pos:line="24" pos:column="17"/></name> <argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">wc<pos:position pos:line="24" pos:column="21"/></name></expr></argument>)<pos:position pos:line="24" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="25" pos:column="4"/></block></for>
  <return pos:line="26" pos:column="3">return <expr><name pos:line="26" pos:column="10">w<pos:position pos:line="26" pos:column="11"/></name></expr>;<pos:position pos:line="26" pos:column="12"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
