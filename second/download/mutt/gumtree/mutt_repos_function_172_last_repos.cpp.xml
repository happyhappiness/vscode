<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_172_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_copy_bytes<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">FILE<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">in<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">FILE<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">out<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">size_t<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">size<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">buf<pos:position pos:line="3" pos:column="11"/></name><index pos:line="3" pos:column="11">[<expr><literal type="number" pos:line="3" pos:column="12">2048<pos:position pos:line="3" pos:column="16"/></literal></expr>]<pos:position pos:line="3" pos:column="17"/></index></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">chunk<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>

  <while pos:line="6" pos:column="3">while <condition pos:line="6" pos:column="9">(<expr><name pos:line="6" pos:column="10">size<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">&gt;<pos:position pos:line="6" pos:column="19"/></operator> <literal type="number" pos:line="6" pos:column="17">0<pos:position pos:line="6" pos:column="18"/></literal></expr>)<pos:position pos:line="6" pos:column="19"/></condition>
  <block pos:line="7" pos:column="3">{
    <expr_stmt><expr><name pos:line="8" pos:column="5">chunk<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">=<pos:position pos:line="8" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="8" pos:column="13">(<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">size<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">&gt;<pos:position pos:line="8" pos:column="23"/></operator> <sizeof pos:line="8" pos:column="21">sizeof <argument_list pos:line="8" pos:column="28">(<argument><expr><name pos:line="8" pos:column="29">buf<pos:position pos:line="8" pos:column="32"/></name></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></sizeof><operator pos:line="8" pos:column="33">)<pos:position pos:line="8" pos:column="34"/></operator></expr> ?<pos:position pos:line="8" pos:column="36"/></condition><then pos:line="8" pos:column="36"> <expr><sizeof pos:line="8" pos:column="37">sizeof <argument_list pos:line="8" pos:column="44">(<argument><expr><name pos:line="8" pos:column="45">buf<pos:position pos:line="8" pos:column="48"/></name></expr></argument>)<pos:position pos:line="8" pos:column="49"/></argument_list></sizeof></expr> <pos:position pos:line="8" pos:column="50"/></then><else pos:line="8" pos:column="50">: <expr><name pos:line="8" pos:column="52">size<pos:position pos:line="8" pos:column="56"/></name></expr></else></ternary></expr>;<pos:position pos:line="8" pos:column="57"/></expr_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">(<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">chunk<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <call><name pos:line="9" pos:column="18">fread<pos:position pos:line="9" pos:column="23"/></name> <argument_list pos:line="9" pos:column="24">(<argument><expr><name pos:line="9" pos:column="25">buf<pos:position pos:line="9" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="30">1<pos:position pos:line="9" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="33">chunk<pos:position pos:line="9" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="40">in<pos:position pos:line="9" pos:column="42"/></name></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></call><operator pos:line="9" pos:column="43">)<pos:position pos:line="9" pos:column="44"/></operator> <operator pos:line="9" pos:column="45">&lt;<pos:position pos:line="9" pos:column="49"/></operator> <literal type="number" pos:line="9" pos:column="47">1<pos:position pos:line="9" pos:column="48"/></literal></expr>)<pos:position pos:line="9" pos:column="49"/></condition><then pos:line="9" pos:column="49">
      <block type="pseudo"><break pos:line="10" pos:column="7">break;<pos:position pos:line="10" pos:column="13"/></break></block></then></if>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">fwrite<pos:position pos:line="11" pos:column="15"/></name> <argument_list pos:line="11" pos:column="16">(<argument><expr><name pos:line="11" pos:column="17">buf<pos:position pos:line="11" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="22">1<pos:position pos:line="11" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="25">chunk<pos:position pos:line="11" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="32">out<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call> <operator pos:line="11" pos:column="37">!=<pos:position pos:line="11" pos:column="39"/></operator> <name pos:line="11" pos:column="40">chunk<pos:position pos:line="11" pos:column="45"/></name></expr>)<pos:position pos:line="11" pos:column="46"/></condition><then pos:line="11" pos:column="46">
    <block pos:line="12" pos:column="5">{
      <comment type="block" pos:line="13" pos:column="7">/* dprint (1, (debugfile, "mutt_copy_bytes(): fwrite() returned short byte count\n")); */</comment>
      <return pos:line="14" pos:column="7">return <expr><operator pos:line="14" pos:column="14">(<pos:position pos:line="14" pos:column="15"/></operator><operator pos:line="14" pos:column="15">-<pos:position pos:line="14" pos:column="16"/></operator><literal type="number" pos:line="14" pos:column="16">1<pos:position pos:line="14" pos:column="17"/></literal><operator pos:line="14" pos:column="17">)<pos:position pos:line="14" pos:column="18"/></operator></expr>;<pos:position pos:line="14" pos:column="19"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="16" pos:column="5">size<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">-=<pos:position pos:line="16" pos:column="12"/></operator> <name pos:line="16" pos:column="13">chunk<pos:position pos:line="16" pos:column="18"/></name></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></while>

  <return pos:line="19" pos:column="3">return <expr><literal type="number" pos:line="19" pos:column="10">0<pos:position pos:line="19" pos:column="11"/></literal></expr>;<pos:position pos:line="19" pos:column="12"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
