<function xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position"><type><name pos:line="3121" pos:column="1">int<pos:position pos:line="3121" pos:column="4"/></name></type>
<name pos:line="3122" pos:column="1">re_compile_fastmap<pos:position pos:line="3122" pos:column="19"/></name> <parameter_list pos:line="3122" pos:column="20">(<parameter><decl><type><name pos:line="3122" pos:column="21">bufp<pos:position pos:line="3122" pos:column="25"/></name></type></decl></parameter>)<pos:position pos:line="3122" pos:column="26"/></parameter_list>
     <decl_stmt><decl><type><name><name pos:line="3123" pos:column="6">struct<pos:position pos:line="3123" pos:column="12"/></name> <name pos:line="3123" pos:column="13">re_pattern_buffer<pos:position pos:line="3123" pos:column="30"/></name></name> <modifier pos:line="3123" pos:column="31">*<pos:position pos:line="3123" pos:column="32"/></modifier></type><name pos:line="3123" pos:column="32">bufp<pos:position pos:line="3123" pos:column="36"/></name></decl>;<pos:position pos:line="3123" pos:column="37"/></decl_stmt>
<block pos:line="3124" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3125" pos:column="3">int<pos:position pos:line="3125" pos:column="6"/></name></type> <name pos:line="3125" pos:column="7">j<pos:position pos:line="3125" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="3125" pos:column="10">k<pos:position pos:line="3125" pos:column="11"/></name></decl>;<pos:position pos:line="3125" pos:column="12"/></decl_stmt>
<cpp:ifdef pos:line="3126" pos:column="1">#<cpp:directive pos:line="3126" pos:column="2">ifdef<pos:position pos:line="3126" pos:column="7"/></cpp:directive> <name pos:line="3126" pos:column="8">MATCH_MAY_ALLOCATE<pos:position pos:line="3126" pos:column="26"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="3127" pos:column="3">fail_stack_type<pos:position pos:line="3127" pos:column="18"/></name></type> <name pos:line="3127" pos:column="19">fail_stack<pos:position pos:line="3127" pos:column="29"/></name></decl>;<pos:position pos:line="3127" pos:column="30"/></decl_stmt>
<cpp:endif pos:line="3128" pos:column="1">#<cpp:directive pos:line="3128" pos:column="2">endif<pos:position pos:line="3128" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifndef pos:line="3129" pos:column="1">#<cpp:directive pos:line="3129" pos:column="2">ifndef<pos:position pos:line="3129" pos:column="8"/></cpp:directive> <name pos:line="3129" pos:column="9">REGEX_MALLOC<pos:position pos:line="3129" pos:column="21"/></name></cpp:ifndef>
  <decl_stmt><decl><type><name pos:line="3130" pos:column="3">char<pos:position pos:line="3130" pos:column="7"/></name> <modifier pos:line="3130" pos:column="8">*<pos:position pos:line="3130" pos:column="9"/></modifier></type><name pos:line="3130" pos:column="9">destination<pos:position pos:line="3130" pos:column="20"/></name></decl>;<pos:position pos:line="3130" pos:column="21"/></decl_stmt>
<cpp:endif pos:line="3131" pos:column="1">#<cpp:directive pos:line="3131" pos:column="2">endif<pos:position pos:line="3131" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><specifier pos:line="3132" pos:column="3">register<pos:position pos:line="3132" pos:column="11"/></specifier> <name pos:line="3132" pos:column="12">char<pos:position pos:line="3132" pos:column="16"/></name> <modifier pos:line="3132" pos:column="17">*<pos:position pos:line="3132" pos:column="18"/></modifier></type><name pos:line="3132" pos:column="18">fastmap<pos:position pos:line="3132" pos:column="25"/></name> <init pos:line="3132" pos:column="26">= <expr><name><name pos:line="3132" pos:column="28">bufp<pos:position pos:line="3132" pos:column="32"/></name><operator pos:line="3132" pos:column="32">-&gt;<pos:position pos:line="3132" pos:column="37"/></operator><name pos:line="3132" pos:column="34">fastmap<pos:position pos:line="3132" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="3132" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3133" pos:column="3">unsigned<pos:position pos:line="3133" pos:column="11"/></name> <name pos:line="3133" pos:column="12">char<pos:position pos:line="3133" pos:column="16"/></name> <modifier pos:line="3133" pos:column="17">*<pos:position pos:line="3133" pos:column="18"/></modifier></type><name pos:line="3133" pos:column="18">pattern<pos:position pos:line="3133" pos:column="25"/></name> <init pos:line="3133" pos:column="26">= <expr><name><name pos:line="3133" pos:column="28">bufp<pos:position pos:line="3133" pos:column="32"/></name><operator pos:line="3133" pos:column="32">-&gt;<pos:position pos:line="3133" pos:column="37"/></operator><name pos:line="3133" pos:column="34">buffer<pos:position pos:line="3133" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="3133" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3134" pos:column="3">unsigned<pos:position pos:line="3134" pos:column="11"/></name> <name pos:line="3134" pos:column="12">char<pos:position pos:line="3134" pos:column="16"/></name> <modifier pos:line="3134" pos:column="17">*<pos:position pos:line="3134" pos:column="18"/></modifier></type><name pos:line="3134" pos:column="18">p<pos:position pos:line="3134" pos:column="19"/></name> <init pos:line="3134" pos:column="20">= <expr><name pos:line="3134" pos:column="22">pattern<pos:position pos:line="3134" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3134" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="3135" pos:column="3">register<pos:position pos:line="3135" pos:column="11"/></specifier> <name pos:line="3135" pos:column="12">unsigned<pos:position pos:line="3135" pos:column="20"/></name> <name pos:line="3135" pos:column="21">char<pos:position pos:line="3135" pos:column="25"/></name> <modifier pos:line="3135" pos:column="26">*<pos:position pos:line="3135" pos:column="27"/></modifier></type><name pos:line="3135" pos:column="27">pend<pos:position pos:line="3135" pos:column="31"/></name> <init pos:line="3135" pos:column="32">= <expr><name pos:line="3135" pos:column="34">pattern<pos:position pos:line="3135" pos:column="41"/></name> <operator pos:line="3135" pos:column="42">+<pos:position pos:line="3135" pos:column="43"/></operator> <name><name pos:line="3135" pos:column="44">bufp<pos:position pos:line="3135" pos:column="48"/></name><operator pos:line="3135" pos:column="48">-&gt;<pos:position pos:line="3135" pos:column="53"/></operator><name pos:line="3135" pos:column="50">used<pos:position pos:line="3135" pos:column="54"/></name></name></expr></init></decl>;<pos:position pos:line="3135" pos:column="55"/></decl_stmt>

<cpp:ifdef pos:line="3137" pos:column="1">#<cpp:directive pos:line="3137" pos:column="2">ifdef<pos:position pos:line="3137" pos:column="7"/></cpp:directive> <name pos:line="3137" pos:column="8">REL_ALLOC<pos:position pos:line="3137" pos:column="17"/></name></cpp:ifdef>
  <comment type="block" pos:line="3138" pos:column="3">/* This holds the pointer to the failure stack, when
     it is allocated relocatably.  */</comment>
  <decl_stmt><decl><type><name pos:line="3140" pos:column="3">fail_stack_elt_t<pos:position pos:line="3140" pos:column="19"/></name> <modifier pos:line="3140" pos:column="20">*<pos:position pos:line="3140" pos:column="21"/></modifier></type><name pos:line="3140" pos:column="21">failure_stack_ptr<pos:position pos:line="3140" pos:column="38"/></name></decl>;<pos:position pos:line="3140" pos:column="39"/></decl_stmt>
<cpp:endif pos:line="3141" pos:column="1">#<cpp:directive pos:line="3141" pos:column="2">endif<pos:position pos:line="3141" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="3143" pos:column="3">/* Assume that each path through the pattern can be null until
     proven otherwise.  We set this false at the bottom of switch
     statement, to which we get only if a particular path doesn't
     match the empty string.  */</comment>
  <decl_stmt><decl><type><name pos:line="3147" pos:column="3">boolean<pos:position pos:line="3147" pos:column="10"/></name></type> <name pos:line="3147" pos:column="11">path_can_be_null<pos:position pos:line="3147" pos:column="27"/></name> <init pos:line="3147" pos:column="28">= <expr><name pos:line="3147" pos:column="30">true<pos:position pos:line="3147" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="3147" pos:column="35"/></decl_stmt>

  <comment type="block" pos:line="3149" pos:column="3">/* We aren't doing a `succeed_n' to begin with.  */</comment>
  <decl_stmt><decl><type><name pos:line="3150" pos:column="3">boolean<pos:position pos:line="3150" pos:column="10"/></name></type> <name pos:line="3150" pos:column="11">succeed_n_p<pos:position pos:line="3150" pos:column="22"/></name> <init pos:line="3150" pos:column="23">= <expr><name pos:line="3150" pos:column="25">false<pos:position pos:line="3150" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="3150" pos:column="31"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="3152" pos:column="3">assert<pos:position pos:line="3152" pos:column="9"/></name> <argument_list pos:line="3152" pos:column="10">(<argument><expr><name pos:line="3152" pos:column="11">fastmap<pos:position pos:line="3152" pos:column="18"/></name> <operator pos:line="3152" pos:column="19">!=<pos:position pos:line="3152" pos:column="21"/></operator> <name pos:line="3152" pos:column="22">NULL<pos:position pos:line="3152" pos:column="26"/></name> <operator pos:line="3152" pos:column="27">&amp;&amp;<pos:position pos:line="3152" pos:column="37"/></operator> <name pos:line="3152" pos:column="30">p<pos:position pos:line="3152" pos:column="31"/></name> <operator pos:line="3152" pos:column="32">!=<pos:position pos:line="3152" pos:column="34"/></operator> <name pos:line="3152" pos:column="35">NULL<pos:position pos:line="3152" pos:column="39"/></name></expr></argument>)<pos:position pos:line="3152" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="3152" pos:column="41"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="3154" pos:column="3">INIT_FAIL_STACK<pos:position pos:line="3154" pos:column="18"/></name> <argument_list pos:line="3154" pos:column="19">()<pos:position pos:line="3154" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="3154" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3155" pos:column="3">bzero<pos:position pos:line="3155" pos:column="8"/></name> <argument_list pos:line="3155" pos:column="9">(<argument><expr><name pos:line="3155" pos:column="10">fastmap<pos:position pos:line="3155" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3155" pos:column="19">1<pos:position pos:line="3155" pos:column="20"/></literal> <operator pos:line="3155" pos:column="21">&lt;&lt;<pos:position pos:line="3155" pos:column="29"/></operator> <name pos:line="3155" pos:column="24">BYTEWIDTH<pos:position pos:line="3155" pos:column="33"/></name></expr></argument>)<pos:position pos:line="3155" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="3155" pos:column="35"/></expr_stmt>  <comment type="block" pos:line="3155" pos:column="37">/* Assume nothing's valid.  */</comment>
  <expr_stmt><expr><name><name pos:line="3156" pos:column="3">bufp<pos:position pos:line="3156" pos:column="7"/></name><operator pos:line="3156" pos:column="7">-&gt;<pos:position pos:line="3156" pos:column="12"/></operator><name pos:line="3156" pos:column="9">fastmap_accurate<pos:position pos:line="3156" pos:column="25"/></name></name> <operator pos:line="3156" pos:column="26">=<pos:position pos:line="3156" pos:column="27"/></operator> <literal type="number" pos:line="3156" pos:column="28">1<pos:position pos:line="3156" pos:column="29"/></literal></expr>;<pos:position pos:line="3156" pos:column="30"/></expr_stmt>	    <comment type="block" pos:line="3156" pos:column="37">/* It will be when we're done.  */</comment>
  <expr_stmt><expr><name><name pos:line="3157" pos:column="3">bufp<pos:position pos:line="3157" pos:column="7"/></name><operator pos:line="3157" pos:column="7">-&gt;<pos:position pos:line="3157" pos:column="12"/></operator><name pos:line="3157" pos:column="9">can_be_null<pos:position pos:line="3157" pos:column="20"/></name></name> <operator pos:line="3157" pos:column="21">=<pos:position pos:line="3157" pos:column="22"/></operator> <literal type="number" pos:line="3157" pos:column="23">0<pos:position pos:line="3157" pos:column="24"/></literal></expr>;<pos:position pos:line="3157" pos:column="25"/></expr_stmt>

  <while pos:line="3159" pos:column="3">while <condition pos:line="3159" pos:column="9">(<expr><literal type="number" pos:line="3159" pos:column="10">1<pos:position pos:line="3159" pos:column="11"/></literal></expr>)<pos:position pos:line="3159" pos:column="12"/></condition>
    <block pos:line="3160" pos:column="5">{
      <if pos:line="3161" pos:column="7">if <condition pos:line="3161" pos:column="10">(<expr><name pos:line="3161" pos:column="11">p<pos:position pos:line="3161" pos:column="12"/></name> <operator pos:line="3161" pos:column="13">==<pos:position pos:line="3161" pos:column="15"/></operator> <name pos:line="3161" pos:column="16">pend<pos:position pos:line="3161" pos:column="20"/></name> <operator pos:line="3161" pos:column="21">||<pos:position pos:line="3161" pos:column="23"/></operator> <operator pos:line="3161" pos:column="24">*<pos:position pos:line="3161" pos:column="25"/></operator><name pos:line="3161" pos:column="25">p<pos:position pos:line="3161" pos:column="26"/></name> <operator pos:line="3161" pos:column="27">==<pos:position pos:line="3161" pos:column="29"/></operator> <name pos:line="3161" pos:column="30">succeed<pos:position pos:line="3161" pos:column="37"/></name></expr>)<pos:position pos:line="3161" pos:column="38"/></condition><then pos:line="3161" pos:column="38">
	<block pos:line="3162" pos:column="9">{
	  <comment type="block" pos:line="3163" pos:column="11">/* We have reached the (effective) end of pattern.  */</comment>
	  <if pos:line="3164" pos:column="11">if <condition pos:line="3164" pos:column="14">(<expr><operator pos:line="3164" pos:column="15">!<pos:position pos:line="3164" pos:column="16"/></operator><call><name pos:line="3164" pos:column="16">FAIL_STACK_EMPTY<pos:position pos:line="3164" pos:column="32"/></name> <argument_list pos:line="3164" pos:column="33">()<pos:position pos:line="3164" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="3164" pos:column="36"/></condition><then pos:line="3164" pos:column="36">
	    <block pos:line="3165" pos:column="13">{
	      <expr_stmt><expr><name><name pos:line="3166" pos:column="15">bufp<pos:position pos:line="3166" pos:column="19"/></name><operator pos:line="3166" pos:column="19">-&gt;<pos:position pos:line="3166" pos:column="24"/></operator><name pos:line="3166" pos:column="21">can_be_null<pos:position pos:line="3166" pos:column="32"/></name></name> <operator pos:line="3166" pos:column="33">|=<pos:position pos:line="3166" pos:column="35"/></operator> <name pos:line="3166" pos:column="36">path_can_be_null<pos:position pos:line="3166" pos:column="52"/></name></expr>;<pos:position pos:line="3166" pos:column="53"/></expr_stmt>

	      <comment type="block" pos:line="3168" pos:column="15">/* Reset for next path.  */</comment>
	      <expr_stmt><expr><name pos:line="3169" pos:column="15">path_can_be_null<pos:position pos:line="3169" pos:column="31"/></name> <operator pos:line="3169" pos:column="32">=<pos:position pos:line="3169" pos:column="33"/></operator> <name pos:line="3169" pos:column="34">true<pos:position pos:line="3169" pos:column="38"/></name></expr>;<pos:position pos:line="3169" pos:column="39"/></expr_stmt>

	      <expr_stmt><expr><name pos:line="3171" pos:column="15">p<pos:position pos:line="3171" pos:column="16"/></name> <operator pos:line="3171" pos:column="17">=<pos:position pos:line="3171" pos:column="18"/></operator> <name><name pos:line="3171" pos:column="19">fail_stack<pos:position pos:line="3171" pos:column="29"/></name><operator pos:line="3171" pos:column="29">.<pos:position pos:line="3171" pos:column="30"/></operator><name pos:line="3171" pos:column="30">stack<pos:position pos:line="3171" pos:column="35"/></name><index pos:line="3171" pos:column="35">[<expr><operator pos:line="3171" pos:column="36">--<pos:position pos:line="3171" pos:column="38"/></operator><name><name pos:line="3171" pos:column="38">fail_stack<pos:position pos:line="3171" pos:column="48"/></name><operator pos:line="3171" pos:column="48">.<pos:position pos:line="3171" pos:column="49"/></operator><name pos:line="3171" pos:column="49">avail<pos:position pos:line="3171" pos:column="54"/></name></name></expr>]<pos:position pos:line="3171" pos:column="55"/></index></name><operator pos:line="3171" pos:column="55">.<pos:position pos:line="3171" pos:column="56"/></operator><name pos:line="3171" pos:column="56">pointer<pos:position pos:line="3171" pos:column="63"/></name></expr>;<pos:position pos:line="3171" pos:column="64"/></expr_stmt>

	      <continue pos:line="3173" pos:column="15">continue;<pos:position pos:line="3173" pos:column="24"/></continue>
	    }<pos:position pos:line="3174" pos:column="14"/></block></then>
	  <else pos:line="3175" pos:column="11">else
	    <block type="pseudo"><break pos:line="3176" pos:column="13">break;<pos:position pos:line="3176" pos:column="19"/></break></block></else></if>
	}<pos:position pos:line="3177" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="3179" pos:column="7">/* We should never be about to go beyond the end of the pattern.  */</comment>
      <expr_stmt><expr><call><name pos:line="3180" pos:column="7">assert<pos:position pos:line="3180" pos:column="13"/></name> <argument_list pos:line="3180" pos:column="14">(<argument><expr><name pos:line="3180" pos:column="15">p<pos:position pos:line="3180" pos:column="16"/></name> <operator pos:line="3180" pos:column="17">&lt;<pos:position pos:line="3180" pos:column="21"/></operator> <name pos:line="3180" pos:column="19">pend<pos:position pos:line="3180" pos:column="23"/></name></expr></argument>)<pos:position pos:line="3180" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="3180" pos:column="25"/></expr_stmt>

      <switch pos:line="3182" pos:column="7">switch <condition pos:line="3182" pos:column="14">(<expr><call><name pos:line="3182" pos:column="15">SWITCH_ENUM_CAST<pos:position pos:line="3182" pos:column="31"/></name> <argument_list pos:line="3182" pos:column="32">(<argument><expr><operator pos:line="3182" pos:column="33">(<pos:position pos:line="3182" pos:column="34"/></operator><name pos:line="3182" pos:column="34">re_opcode_t<pos:position pos:line="3182" pos:column="45"/></name><operator pos:line="3182" pos:column="45">)<pos:position pos:line="3182" pos:column="46"/></operator> <operator pos:line="3182" pos:column="47">*<pos:position pos:line="3182" pos:column="48"/></operator><name pos:line="3182" pos:column="48">p<pos:position pos:line="3182" pos:column="49"/></name><operator pos:line="3182" pos:column="49">++<pos:position pos:line="3182" pos:column="51"/></operator></expr></argument>)<pos:position pos:line="3182" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="3182" pos:column="53"/></condition>
	<block pos:line="3183" pos:column="9">{

        <comment type="block" pos:line="3185" pos:column="9">/* I guess the idea here is to simply not bother with a fastmap
           if a backreference is used, since it's too hard to figure out
           the fastmap for the corresponding group.  Setting
           `can_be_null' stops `re_search_2' from using the fastmap, so
           that is all we do.  */</comment>
	<case pos:line="3190" pos:column="9">case <expr><name pos:line="3190" pos:column="14">duplicate<pos:position pos:line="3190" pos:column="23"/></name></expr>:<pos:position pos:line="3190" pos:column="24"/></case>
	  <expr_stmt><expr><name><name pos:line="3191" pos:column="11">bufp<pos:position pos:line="3191" pos:column="15"/></name><operator pos:line="3191" pos:column="15">-&gt;<pos:position pos:line="3191" pos:column="20"/></operator><name pos:line="3191" pos:column="17">can_be_null<pos:position pos:line="3191" pos:column="28"/></name></name> <operator pos:line="3191" pos:column="29">=<pos:position pos:line="3191" pos:column="30"/></operator> <literal type="number" pos:line="3191" pos:column="31">1<pos:position pos:line="3191" pos:column="32"/></literal></expr>;<pos:position pos:line="3191" pos:column="33"/></expr_stmt>
          <goto pos:line="3192" pos:column="11">goto <name pos:line="3192" pos:column="16">done<pos:position pos:line="3192" pos:column="20"/></name>;<pos:position pos:line="3192" pos:column="21"/></goto>


      <comment type="block" pos:line="3195" pos:column="7">/* Following are the cases which match a character.  These end
         with `break'.  */</comment>

	<case pos:line="3198" pos:column="9">case <expr><name pos:line="3198" pos:column="14">exactn<pos:position pos:line="3198" pos:column="20"/></name></expr>:<pos:position pos:line="3198" pos:column="21"/></case>
          <expr_stmt><expr><name><name pos:line="3199" pos:column="11">fastmap<pos:position pos:line="3199" pos:column="18"/></name><index pos:line="3199" pos:column="18">[<expr><name><name pos:line="3199" pos:column="19">p<pos:position pos:line="3199" pos:column="20"/></name><index pos:line="3199" pos:column="20">[<expr><literal type="number" pos:line="3199" pos:column="21">1<pos:position pos:line="3199" pos:column="22"/></literal></expr>]<pos:position pos:line="3199" pos:column="23"/></index></name></expr>]<pos:position pos:line="3199" pos:column="24"/></index></name> <operator pos:line="3199" pos:column="25">=<pos:position pos:line="3199" pos:column="26"/></operator> <literal type="number" pos:line="3199" pos:column="27">1<pos:position pos:line="3199" pos:column="28"/></literal></expr>;<pos:position pos:line="3199" pos:column="29"/></expr_stmt>
	  <break pos:line="3200" pos:column="11">break;<pos:position pos:line="3200" pos:column="17"/></break>


        <case pos:line="3203" pos:column="9">case <expr><name pos:line="3203" pos:column="14">charset<pos:position pos:line="3203" pos:column="21"/></name></expr>:<pos:position pos:line="3203" pos:column="22"/></case>
          <for pos:line="3204" pos:column="11">for <control pos:line="3204" pos:column="15">(<init><expr><name pos:line="3204" pos:column="16">j<pos:position pos:line="3204" pos:column="17"/></name> <operator pos:line="3204" pos:column="18">=<pos:position pos:line="3204" pos:column="19"/></operator> <operator pos:line="3204" pos:column="20">*<pos:position pos:line="3204" pos:column="21"/></operator><name pos:line="3204" pos:column="21">p<pos:position pos:line="3204" pos:column="22"/></name><operator pos:line="3204" pos:column="22">++<pos:position pos:line="3204" pos:column="24"/></operator> <operator pos:line="3204" pos:column="25">*<pos:position pos:line="3204" pos:column="26"/></operator> <name pos:line="3204" pos:column="27">BYTEWIDTH<pos:position pos:line="3204" pos:column="36"/></name> <operator pos:line="3204" pos:column="37">-<pos:position pos:line="3204" pos:column="38"/></operator> <literal type="number" pos:line="3204" pos:column="39">1<pos:position pos:line="3204" pos:column="40"/></literal></expr>;<pos:position pos:line="3204" pos:column="41"/></init> <condition><expr><name pos:line="3204" pos:column="42">j<pos:position pos:line="3204" pos:column="43"/></name> <operator pos:line="3204" pos:column="44">&gt;=<pos:position pos:line="3204" pos:column="49"/></operator> <literal type="number" pos:line="3204" pos:column="47">0<pos:position pos:line="3204" pos:column="48"/></literal></expr>;<pos:position pos:line="3204" pos:column="49"/></condition> <incr><expr><name pos:line="3204" pos:column="50">j<pos:position pos:line="3204" pos:column="51"/></name><operator pos:line="3204" pos:column="51">--<pos:position pos:line="3204" pos:column="53"/></operator></expr></incr>)<pos:position pos:line="3204" pos:column="54"/></control>
	    <block type="pseudo"><if pos:line="3205" pos:column="13">if <condition pos:line="3205" pos:column="16">(<expr><name><name pos:line="3205" pos:column="17">p<pos:position pos:line="3205" pos:column="18"/></name><index pos:line="3205" pos:column="18">[<expr><name pos:line="3205" pos:column="19">j<pos:position pos:line="3205" pos:column="20"/></name> <operator pos:line="3205" pos:column="21">/<pos:position pos:line="3205" pos:column="22"/></operator> <name pos:line="3205" pos:column="23">BYTEWIDTH<pos:position pos:line="3205" pos:column="32"/></name></expr>]<pos:position pos:line="3205" pos:column="33"/></index></name> <operator pos:line="3205" pos:column="34">&amp;<pos:position pos:line="3205" pos:column="39"/></operator> <operator pos:line="3205" pos:column="36">(<pos:position pos:line="3205" pos:column="37"/></operator><literal type="number" pos:line="3205" pos:column="37">1<pos:position pos:line="3205" pos:column="38"/></literal> <operator pos:line="3205" pos:column="39">&lt;&lt;<pos:position pos:line="3205" pos:column="47"/></operator> <operator pos:line="3205" pos:column="42">(<pos:position pos:line="3205" pos:column="43"/></operator><name pos:line="3205" pos:column="43">j<pos:position pos:line="3205" pos:column="44"/></name> <operator pos:line="3205" pos:column="45">%<pos:position pos:line="3205" pos:column="46"/></operator> <name pos:line="3205" pos:column="47">BYTEWIDTH<pos:position pos:line="3205" pos:column="56"/></name><operator pos:line="3205" pos:column="56">)<pos:position pos:line="3205" pos:column="57"/></operator><operator pos:line="3205" pos:column="57">)<pos:position pos:line="3205" pos:column="58"/></operator></expr>)<pos:position pos:line="3205" pos:column="59"/></condition><then pos:line="3205" pos:column="59">
              <block type="pseudo"><expr_stmt><expr><name><name pos:line="3206" pos:column="15">fastmap<pos:position pos:line="3206" pos:column="22"/></name><index pos:line="3206" pos:column="22">[<expr><name pos:line="3206" pos:column="23">j<pos:position pos:line="3206" pos:column="24"/></name></expr>]<pos:position pos:line="3206" pos:column="25"/></index></name> <operator pos:line="3206" pos:column="26">=<pos:position pos:line="3206" pos:column="27"/></operator> <literal type="number" pos:line="3206" pos:column="28">1<pos:position pos:line="3206" pos:column="29"/></literal></expr>;<pos:position pos:line="3206" pos:column="30"/></expr_stmt></block></then></if></block></for>
	  <break pos:line="3207" pos:column="11">break;<pos:position pos:line="3207" pos:column="17"/></break>


	<case pos:line="3210" pos:column="9">case <expr><name pos:line="3210" pos:column="14">charset_not<pos:position pos:line="3210" pos:column="25"/></name></expr>:<pos:position pos:line="3210" pos:column="26"/></case>
	  <comment type="block" pos:line="3211" pos:column="11">/* Chars beyond end of map must be allowed.  */</comment>
	  <for pos:line="3212" pos:column="11">for <control pos:line="3212" pos:column="15">(<init><expr><name pos:line="3212" pos:column="16">j<pos:position pos:line="3212" pos:column="17"/></name> <operator pos:line="3212" pos:column="18">=<pos:position pos:line="3212" pos:column="19"/></operator> <operator pos:line="3212" pos:column="20">*<pos:position pos:line="3212" pos:column="21"/></operator><name pos:line="3212" pos:column="21">p<pos:position pos:line="3212" pos:column="22"/></name> <operator pos:line="3212" pos:column="23">*<pos:position pos:line="3212" pos:column="24"/></operator> <name pos:line="3212" pos:column="25">BYTEWIDTH<pos:position pos:line="3212" pos:column="34"/></name></expr>;<pos:position pos:line="3212" pos:column="35"/></init> <condition><expr><name pos:line="3212" pos:column="36">j<pos:position pos:line="3212" pos:column="37"/></name> <operator pos:line="3212" pos:column="38">&lt;<pos:position pos:line="3212" pos:column="42"/></operator> <operator pos:line="3212" pos:column="40">(<pos:position pos:line="3212" pos:column="41"/></operator><literal type="number" pos:line="3212" pos:column="41">1<pos:position pos:line="3212" pos:column="42"/></literal> <operator pos:line="3212" pos:column="43">&lt;&lt;<pos:position pos:line="3212" pos:column="51"/></operator> <name pos:line="3212" pos:column="46">BYTEWIDTH<pos:position pos:line="3212" pos:column="55"/></name><operator pos:line="3212" pos:column="55">)<pos:position pos:line="3212" pos:column="56"/></operator></expr>;<pos:position pos:line="3212" pos:column="57"/></condition> <incr><expr><name pos:line="3212" pos:column="58">j<pos:position pos:line="3212" pos:column="59"/></name><operator pos:line="3212" pos:column="59">++<pos:position pos:line="3212" pos:column="61"/></operator></expr></incr>)<pos:position pos:line="3212" pos:column="62"/></control>
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="3213" pos:column="13">fastmap<pos:position pos:line="3213" pos:column="20"/></name><index pos:line="3213" pos:column="20">[<expr><name pos:line="3213" pos:column="21">j<pos:position pos:line="3213" pos:column="22"/></name></expr>]<pos:position pos:line="3213" pos:column="23"/></index></name> <operator pos:line="3213" pos:column="24">=<pos:position pos:line="3213" pos:column="25"/></operator> <literal type="number" pos:line="3213" pos:column="26">1<pos:position pos:line="3213" pos:column="27"/></literal></expr>;<pos:position pos:line="3213" pos:column="28"/></expr_stmt></block></for>

	  <for pos:line="3215" pos:column="11">for <control pos:line="3215" pos:column="15">(<init><expr><name pos:line="3215" pos:column="16">j<pos:position pos:line="3215" pos:column="17"/></name> <operator pos:line="3215" pos:column="18">=<pos:position pos:line="3215" pos:column="19"/></operator> <operator pos:line="3215" pos:column="20">*<pos:position pos:line="3215" pos:column="21"/></operator><name pos:line="3215" pos:column="21">p<pos:position pos:line="3215" pos:column="22"/></name><operator pos:line="3215" pos:column="22">++<pos:position pos:line="3215" pos:column="24"/></operator> <operator pos:line="3215" pos:column="25">*<pos:position pos:line="3215" pos:column="26"/></operator> <name pos:line="3215" pos:column="27">BYTEWIDTH<pos:position pos:line="3215" pos:column="36"/></name> <operator pos:line="3215" pos:column="37">-<pos:position pos:line="3215" pos:column="38"/></operator> <literal type="number" pos:line="3215" pos:column="39">1<pos:position pos:line="3215" pos:column="40"/></literal></expr>;<pos:position pos:line="3215" pos:column="41"/></init> <condition><expr><name pos:line="3215" pos:column="42">j<pos:position pos:line="3215" pos:column="43"/></name> <operator pos:line="3215" pos:column="44">&gt;=<pos:position pos:line="3215" pos:column="49"/></operator> <literal type="number" pos:line="3215" pos:column="47">0<pos:position pos:line="3215" pos:column="48"/></literal></expr>;<pos:position pos:line="3215" pos:column="49"/></condition> <incr><expr><name pos:line="3215" pos:column="50">j<pos:position pos:line="3215" pos:column="51"/></name><operator pos:line="3215" pos:column="51">--<pos:position pos:line="3215" pos:column="53"/></operator></expr></incr>)<pos:position pos:line="3215" pos:column="54"/></control>
	    <block type="pseudo"><if pos:line="3216" pos:column="13">if <condition pos:line="3216" pos:column="16">(<expr><operator pos:line="3216" pos:column="17">!<pos:position pos:line="3216" pos:column="18"/></operator><operator pos:line="3216" pos:column="18">(<pos:position pos:line="3216" pos:column="19"/></operator><name><name pos:line="3216" pos:column="19">p<pos:position pos:line="3216" pos:column="20"/></name><index pos:line="3216" pos:column="20">[<expr><name pos:line="3216" pos:column="21">j<pos:position pos:line="3216" pos:column="22"/></name> <operator pos:line="3216" pos:column="23">/<pos:position pos:line="3216" pos:column="24"/></operator> <name pos:line="3216" pos:column="25">BYTEWIDTH<pos:position pos:line="3216" pos:column="34"/></name></expr>]<pos:position pos:line="3216" pos:column="35"/></index></name> <operator pos:line="3216" pos:column="36">&amp;<pos:position pos:line="3216" pos:column="41"/></operator> <operator pos:line="3216" pos:column="38">(<pos:position pos:line="3216" pos:column="39"/></operator><literal type="number" pos:line="3216" pos:column="39">1<pos:position pos:line="3216" pos:column="40"/></literal> <operator pos:line="3216" pos:column="41">&lt;&lt;<pos:position pos:line="3216" pos:column="49"/></operator> <operator pos:line="3216" pos:column="44">(<pos:position pos:line="3216" pos:column="45"/></operator><name pos:line="3216" pos:column="45">j<pos:position pos:line="3216" pos:column="46"/></name> <operator pos:line="3216" pos:column="47">%<pos:position pos:line="3216" pos:column="48"/></operator> <name pos:line="3216" pos:column="49">BYTEWIDTH<pos:position pos:line="3216" pos:column="58"/></name><operator pos:line="3216" pos:column="58">)<pos:position pos:line="3216" pos:column="59"/></operator><operator pos:line="3216" pos:column="59">)<pos:position pos:line="3216" pos:column="60"/></operator><operator pos:line="3216" pos:column="60">)<pos:position pos:line="3216" pos:column="61"/></operator></expr>)<pos:position pos:line="3216" pos:column="62"/></condition><then pos:line="3216" pos:column="62">
              <block type="pseudo"><expr_stmt><expr><name><name pos:line="3217" pos:column="15">fastmap<pos:position pos:line="3217" pos:column="22"/></name><index pos:line="3217" pos:column="22">[<expr><name pos:line="3217" pos:column="23">j<pos:position pos:line="3217" pos:column="24"/></name></expr>]<pos:position pos:line="3217" pos:column="25"/></index></name> <operator pos:line="3217" pos:column="26">=<pos:position pos:line="3217" pos:column="27"/></operator> <literal type="number" pos:line="3217" pos:column="28">1<pos:position pos:line="3217" pos:column="29"/></literal></expr>;<pos:position pos:line="3217" pos:column="30"/></expr_stmt></block></then></if></block></for>
          <break pos:line="3218" pos:column="11">break;<pos:position pos:line="3218" pos:column="17"/></break>


	<case pos:line="3221" pos:column="9">case <expr><name pos:line="3221" pos:column="14">wordchar<pos:position pos:line="3221" pos:column="22"/></name></expr>:<pos:position pos:line="3221" pos:column="23"/></case>
	  <for pos:line="3222" pos:column="11">for <control pos:line="3222" pos:column="15">(<init><expr><name pos:line="3222" pos:column="16">j<pos:position pos:line="3222" pos:column="17"/></name> <operator pos:line="3222" pos:column="18">=<pos:position pos:line="3222" pos:column="19"/></operator> <literal type="number" pos:line="3222" pos:column="20">0<pos:position pos:line="3222" pos:column="21"/></literal></expr>;<pos:position pos:line="3222" pos:column="22"/></init> <condition><expr><name pos:line="3222" pos:column="23">j<pos:position pos:line="3222" pos:column="24"/></name> <operator pos:line="3222" pos:column="25">&lt;<pos:position pos:line="3222" pos:column="29"/></operator> <operator pos:line="3222" pos:column="27">(<pos:position pos:line="3222" pos:column="28"/></operator><literal type="number" pos:line="3222" pos:column="28">1<pos:position pos:line="3222" pos:column="29"/></literal> <operator pos:line="3222" pos:column="30">&lt;&lt;<pos:position pos:line="3222" pos:column="38"/></operator> <name pos:line="3222" pos:column="33">BYTEWIDTH<pos:position pos:line="3222" pos:column="42"/></name><operator pos:line="3222" pos:column="42">)<pos:position pos:line="3222" pos:column="43"/></operator></expr>;<pos:position pos:line="3222" pos:column="44"/></condition> <incr><expr><name pos:line="3222" pos:column="45">j<pos:position pos:line="3222" pos:column="46"/></name><operator pos:line="3222" pos:column="46">++<pos:position pos:line="3222" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="3222" pos:column="49"/></control>
	    <block type="pseudo"><if pos:line="3223" pos:column="13">if <condition pos:line="3223" pos:column="16">(<expr><call><name pos:line="3223" pos:column="17">SYNTAX<pos:position pos:line="3223" pos:column="23"/></name> <argument_list pos:line="3223" pos:column="24">(<argument><expr><name pos:line="3223" pos:column="25">j<pos:position pos:line="3223" pos:column="26"/></name></expr></argument>)<pos:position pos:line="3223" pos:column="27"/></argument_list></call> <operator pos:line="3223" pos:column="28">==<pos:position pos:line="3223" pos:column="30"/></operator> <name pos:line="3223" pos:column="31">Sword<pos:position pos:line="3223" pos:column="36"/></name></expr>)<pos:position pos:line="3223" pos:column="37"/></condition><then pos:line="3223" pos:column="37">
	      <block type="pseudo"><expr_stmt><expr><name><name pos:line="3224" pos:column="15">fastmap<pos:position pos:line="3224" pos:column="22"/></name><index pos:line="3224" pos:column="22">[<expr><name pos:line="3224" pos:column="23">j<pos:position pos:line="3224" pos:column="24"/></name></expr>]<pos:position pos:line="3224" pos:column="25"/></index></name> <operator pos:line="3224" pos:column="26">=<pos:position pos:line="3224" pos:column="27"/></operator> <literal type="number" pos:line="3224" pos:column="28">1<pos:position pos:line="3224" pos:column="29"/></literal></expr>;<pos:position pos:line="3224" pos:column="30"/></expr_stmt></block></then></if></block></for>
	  <break pos:line="3225" pos:column="11">break;<pos:position pos:line="3225" pos:column="17"/></break>


	<case pos:line="3228" pos:column="9">case <expr><name pos:line="3228" pos:column="14">notwordchar<pos:position pos:line="3228" pos:column="25"/></name></expr>:<pos:position pos:line="3228" pos:column="26"/></case>
	  <for pos:line="3229" pos:column="11">for <control pos:line="3229" pos:column="15">(<init><expr><name pos:line="3229" pos:column="16">j<pos:position pos:line="3229" pos:column="17"/></name> <operator pos:line="3229" pos:column="18">=<pos:position pos:line="3229" pos:column="19"/></operator> <literal type="number" pos:line="3229" pos:column="20">0<pos:position pos:line="3229" pos:column="21"/></literal></expr>;<pos:position pos:line="3229" pos:column="22"/></init> <condition><expr><name pos:line="3229" pos:column="23">j<pos:position pos:line="3229" pos:column="24"/></name> <operator pos:line="3229" pos:column="25">&lt;<pos:position pos:line="3229" pos:column="29"/></operator> <operator pos:line="3229" pos:column="27">(<pos:position pos:line="3229" pos:column="28"/></operator><literal type="number" pos:line="3229" pos:column="28">1<pos:position pos:line="3229" pos:column="29"/></literal> <operator pos:line="3229" pos:column="30">&lt;&lt;<pos:position pos:line="3229" pos:column="38"/></operator> <name pos:line="3229" pos:column="33">BYTEWIDTH<pos:position pos:line="3229" pos:column="42"/></name><operator pos:line="3229" pos:column="42">)<pos:position pos:line="3229" pos:column="43"/></operator></expr>;<pos:position pos:line="3229" pos:column="44"/></condition> <incr><expr><name pos:line="3229" pos:column="45">j<pos:position pos:line="3229" pos:column="46"/></name><operator pos:line="3229" pos:column="46">++<pos:position pos:line="3229" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="3229" pos:column="49"/></control>
	    <block type="pseudo"><if pos:line="3230" pos:column="13">if <condition pos:line="3230" pos:column="16">(<expr><call><name pos:line="3230" pos:column="17">SYNTAX<pos:position pos:line="3230" pos:column="23"/></name> <argument_list pos:line="3230" pos:column="24">(<argument><expr><name pos:line="3230" pos:column="25">j<pos:position pos:line="3230" pos:column="26"/></name></expr></argument>)<pos:position pos:line="3230" pos:column="27"/></argument_list></call> <operator pos:line="3230" pos:column="28">!=<pos:position pos:line="3230" pos:column="30"/></operator> <name pos:line="3230" pos:column="31">Sword<pos:position pos:line="3230" pos:column="36"/></name></expr>)<pos:position pos:line="3230" pos:column="37"/></condition><then pos:line="3230" pos:column="37">
	      <block type="pseudo"><expr_stmt><expr><name><name pos:line="3231" pos:column="15">fastmap<pos:position pos:line="3231" pos:column="22"/></name><index pos:line="3231" pos:column="22">[<expr><name pos:line="3231" pos:column="23">j<pos:position pos:line="3231" pos:column="24"/></name></expr>]<pos:position pos:line="3231" pos:column="25"/></index></name> <operator pos:line="3231" pos:column="26">=<pos:position pos:line="3231" pos:column="27"/></operator> <literal type="number" pos:line="3231" pos:column="28">1<pos:position pos:line="3231" pos:column="29"/></literal></expr>;<pos:position pos:line="3231" pos:column="30"/></expr_stmt></block></then></if></block></for>
	  <break pos:line="3232" pos:column="11">break;<pos:position pos:line="3232" pos:column="17"/></break>


        <case pos:line="3235" pos:column="9">case <expr><name pos:line="3235" pos:column="14">anychar<pos:position pos:line="3235" pos:column="21"/></name></expr>:<pos:position pos:line="3235" pos:column="22"/></case>
	  <block pos:line="3236" pos:column="11">{
	    <decl_stmt><decl><type><name pos:line="3237" pos:column="13">int<pos:position pos:line="3237" pos:column="16"/></name></type> <name pos:line="3237" pos:column="17">fastmap_newline<pos:position pos:line="3237" pos:column="32"/></name> <init pos:line="3237" pos:column="33">= <expr><name><name pos:line="3237" pos:column="35">fastmap<pos:position pos:line="3237" pos:column="42"/></name><index pos:line="3237" pos:column="42">[<expr><literal type="char" pos:line="3237" pos:column="43">'\n'<pos:position pos:line="3237" pos:column="47"/></literal></expr>]<pos:position pos:line="3237" pos:column="48"/></index></name></expr></init></decl>;<pos:position pos:line="3237" pos:column="49"/></decl_stmt>

	    <comment type="block" pos:line="3239" pos:column="13">/* `.' matches anything ...  */</comment>
	    <for pos:line="3240" pos:column="13">for <control pos:line="3240" pos:column="17">(<init><expr><name pos:line="3240" pos:column="18">j<pos:position pos:line="3240" pos:column="19"/></name> <operator pos:line="3240" pos:column="20">=<pos:position pos:line="3240" pos:column="21"/></operator> <literal type="number" pos:line="3240" pos:column="22">0<pos:position pos:line="3240" pos:column="23"/></literal></expr>;<pos:position pos:line="3240" pos:column="24"/></init> <condition><expr><name pos:line="3240" pos:column="25">j<pos:position pos:line="3240" pos:column="26"/></name> <operator pos:line="3240" pos:column="27">&lt;<pos:position pos:line="3240" pos:column="31"/></operator> <operator pos:line="3240" pos:column="29">(<pos:position pos:line="3240" pos:column="30"/></operator><literal type="number" pos:line="3240" pos:column="30">1<pos:position pos:line="3240" pos:column="31"/></literal> <operator pos:line="3240" pos:column="32">&lt;&lt;<pos:position pos:line="3240" pos:column="40"/></operator> <name pos:line="3240" pos:column="35">BYTEWIDTH<pos:position pos:line="3240" pos:column="44"/></name><operator pos:line="3240" pos:column="44">)<pos:position pos:line="3240" pos:column="45"/></operator></expr>;<pos:position pos:line="3240" pos:column="46"/></condition> <incr><expr><name pos:line="3240" pos:column="47">j<pos:position pos:line="3240" pos:column="48"/></name><operator pos:line="3240" pos:column="48">++<pos:position pos:line="3240" pos:column="50"/></operator></expr></incr>)<pos:position pos:line="3240" pos:column="51"/></control>
	      <block type="pseudo"><expr_stmt><expr><name><name pos:line="3241" pos:column="15">fastmap<pos:position pos:line="3241" pos:column="22"/></name><index pos:line="3241" pos:column="22">[<expr><name pos:line="3241" pos:column="23">j<pos:position pos:line="3241" pos:column="24"/></name></expr>]<pos:position pos:line="3241" pos:column="25"/></index></name> <operator pos:line="3241" pos:column="26">=<pos:position pos:line="3241" pos:column="27"/></operator> <literal type="number" pos:line="3241" pos:column="28">1<pos:position pos:line="3241" pos:column="29"/></literal></expr>;<pos:position pos:line="3241" pos:column="30"/></expr_stmt></block></for>

	    <comment type="block" pos:line="3243" pos:column="13">/* ... except perhaps newline.  */</comment>
	    <if pos:line="3244" pos:column="13">if <condition pos:line="3244" pos:column="16">(<expr><operator pos:line="3244" pos:column="17">!<pos:position pos:line="3244" pos:column="18"/></operator><operator pos:line="3244" pos:column="18">(<pos:position pos:line="3244" pos:column="19"/></operator><name><name pos:line="3244" pos:column="19">bufp<pos:position pos:line="3244" pos:column="23"/></name><operator pos:line="3244" pos:column="23">-&gt;<pos:position pos:line="3244" pos:column="28"/></operator><name pos:line="3244" pos:column="25">syntax<pos:position pos:line="3244" pos:column="31"/></name></name> <operator pos:line="3244" pos:column="32">&amp;<pos:position pos:line="3244" pos:column="37"/></operator> <name pos:line="3244" pos:column="34">RE_DOT_NEWLINE<pos:position pos:line="3244" pos:column="48"/></name><operator pos:line="3244" pos:column="48">)<pos:position pos:line="3244" pos:column="49"/></operator></expr>)<pos:position pos:line="3244" pos:column="50"/></condition><then pos:line="3244" pos:column="50">
	      <block type="pseudo"><expr_stmt><expr><name><name pos:line="3245" pos:column="15">fastmap<pos:position pos:line="3245" pos:column="22"/></name><index pos:line="3245" pos:column="22">[<expr><literal type="char" pos:line="3245" pos:column="23">'\n'<pos:position pos:line="3245" pos:column="27"/></literal></expr>]<pos:position pos:line="3245" pos:column="28"/></index></name> <operator pos:line="3245" pos:column="29">=<pos:position pos:line="3245" pos:column="30"/></operator> <name pos:line="3245" pos:column="31">fastmap_newline<pos:position pos:line="3245" pos:column="46"/></name></expr>;<pos:position pos:line="3245" pos:column="47"/></expr_stmt></block></then>

	    <comment type="block" pos:line="3247" pos:column="13">/* Return if we have already set `can_be_null'; if we have,
	       then the fastmap is irrelevant.  Something's wrong here.  */</comment>
	    <elseif pos:line="3249" pos:column="13">else <if pos:line="3249" pos:column="18">if <condition pos:line="3249" pos:column="21">(<expr><name><name pos:line="3249" pos:column="22">bufp<pos:position pos:line="3249" pos:column="26"/></name><operator pos:line="3249" pos:column="26">-&gt;<pos:position pos:line="3249" pos:column="31"/></operator><name pos:line="3249" pos:column="28">can_be_null<pos:position pos:line="3249" pos:column="39"/></name></name></expr>)<pos:position pos:line="3249" pos:column="40"/></condition><then pos:line="3249" pos:column="40">
	      <block type="pseudo"><goto pos:line="3250" pos:column="15">goto <name pos:line="3250" pos:column="20">done<pos:position pos:line="3250" pos:column="24"/></name>;<pos:position pos:line="3250" pos:column="25"/></goto></block></then></if></elseif></if>

	    <comment type="block" pos:line="3252" pos:column="13">/* Otherwise, have to check alternative paths.  */</comment>
	    <break pos:line="3253" pos:column="13">break;<pos:position pos:line="3253" pos:column="19"/></break>
	  }<pos:position pos:line="3254" pos:column="12"/></block>

<cpp:ifdef pos:line="3256" pos:column="1">#<cpp:directive pos:line="3256" pos:column="2">ifdef<pos:position pos:line="3256" pos:column="7"/></cpp:directive> <name pos:line="3256" pos:column="8">emacs<pos:position pos:line="3256" pos:column="13"/></name></cpp:ifdef>
        <case pos:line="3257" pos:column="9">case <expr><name pos:line="3257" pos:column="14">syntaxspec<pos:position pos:line="3257" pos:column="24"/></name></expr>:<pos:position pos:line="3257" pos:column="25"/></case>
	  <expr_stmt><expr><name pos:line="3258" pos:column="11">k<pos:position pos:line="3258" pos:column="12"/></name> <operator pos:line="3258" pos:column="13">=<pos:position pos:line="3258" pos:column="14"/></operator> <operator pos:line="3258" pos:column="15">*<pos:position pos:line="3258" pos:column="16"/></operator><name pos:line="3258" pos:column="16">p<pos:position pos:line="3258" pos:column="17"/></name><operator pos:line="3258" pos:column="17">++<pos:position pos:line="3258" pos:column="19"/></operator></expr>;<pos:position pos:line="3258" pos:column="20"/></expr_stmt>
	  <for pos:line="3259" pos:column="11">for <control pos:line="3259" pos:column="15">(<init><expr><name pos:line="3259" pos:column="16">j<pos:position pos:line="3259" pos:column="17"/></name> <operator pos:line="3259" pos:column="18">=<pos:position pos:line="3259" pos:column="19"/></operator> <literal type="number" pos:line="3259" pos:column="20">0<pos:position pos:line="3259" pos:column="21"/></literal></expr>;<pos:position pos:line="3259" pos:column="22"/></init> <condition><expr><name pos:line="3259" pos:column="23">j<pos:position pos:line="3259" pos:column="24"/></name> <operator pos:line="3259" pos:column="25">&lt;<pos:position pos:line="3259" pos:column="29"/></operator> <operator pos:line="3259" pos:column="27">(<pos:position pos:line="3259" pos:column="28"/></operator><literal type="number" pos:line="3259" pos:column="28">1<pos:position pos:line="3259" pos:column="29"/></literal> <operator pos:line="3259" pos:column="30">&lt;&lt;<pos:position pos:line="3259" pos:column="38"/></operator> <name pos:line="3259" pos:column="33">BYTEWIDTH<pos:position pos:line="3259" pos:column="42"/></name><operator pos:line="3259" pos:column="42">)<pos:position pos:line="3259" pos:column="43"/></operator></expr>;<pos:position pos:line="3259" pos:column="44"/></condition> <incr><expr><name pos:line="3259" pos:column="45">j<pos:position pos:line="3259" pos:column="46"/></name><operator pos:line="3259" pos:column="46">++<pos:position pos:line="3259" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="3259" pos:column="49"/></control>
	    <block type="pseudo"><if pos:line="3260" pos:column="13">if <condition pos:line="3260" pos:column="16">(<expr><call><name pos:line="3260" pos:column="17">SYNTAX<pos:position pos:line="3260" pos:column="23"/></name> <argument_list pos:line="3260" pos:column="24">(<argument><expr><name pos:line="3260" pos:column="25">j<pos:position pos:line="3260" pos:column="26"/></name></expr></argument>)<pos:position pos:line="3260" pos:column="27"/></argument_list></call> <operator pos:line="3260" pos:column="28">==<pos:position pos:line="3260" pos:column="30"/></operator> <operator pos:line="3260" pos:column="31">(<pos:position pos:line="3260" pos:column="32"/></operator>enum <name pos:line="3260" pos:column="37">syntaxcode<pos:position pos:line="3260" pos:column="47"/></name><operator pos:line="3260" pos:column="47">)<pos:position pos:line="3260" pos:column="48"/></operator> <name pos:line="3260" pos:column="49">k<pos:position pos:line="3260" pos:column="50"/></name></expr>)<pos:position pos:line="3260" pos:column="51"/></condition><then pos:line="3260" pos:column="51">
	      <block type="pseudo"><expr_stmt><expr><name><name pos:line="3261" pos:column="15">fastmap<pos:position pos:line="3261" pos:column="22"/></name><index pos:line="3261" pos:column="22">[<expr><name pos:line="3261" pos:column="23">j<pos:position pos:line="3261" pos:column="24"/></name></expr>]<pos:position pos:line="3261" pos:column="25"/></index></name> <operator pos:line="3261" pos:column="26">=<pos:position pos:line="3261" pos:column="27"/></operator> <literal type="number" pos:line="3261" pos:column="28">1<pos:position pos:line="3261" pos:column="29"/></literal></expr>;<pos:position pos:line="3261" pos:column="30"/></expr_stmt></block></then></if></block></for>
	  <break pos:line="3262" pos:column="11">break;<pos:position pos:line="3262" pos:column="17"/></break>


	<case pos:line="3265" pos:column="9">case <expr><name pos:line="3265" pos:column="14">notsyntaxspec<pos:position pos:line="3265" pos:column="27"/></name></expr>:<pos:position pos:line="3265" pos:column="28"/></case>
	  <expr_stmt><expr><name pos:line="3266" pos:column="11">k<pos:position pos:line="3266" pos:column="12"/></name> <operator pos:line="3266" pos:column="13">=<pos:position pos:line="3266" pos:column="14"/></operator> <operator pos:line="3266" pos:column="15">*<pos:position pos:line="3266" pos:column="16"/></operator><name pos:line="3266" pos:column="16">p<pos:position pos:line="3266" pos:column="17"/></name><operator pos:line="3266" pos:column="17">++<pos:position pos:line="3266" pos:column="19"/></operator></expr>;<pos:position pos:line="3266" pos:column="20"/></expr_stmt>
	  <for pos:line="3267" pos:column="11">for <control pos:line="3267" pos:column="15">(<init><expr><name pos:line="3267" pos:column="16">j<pos:position pos:line="3267" pos:column="17"/></name> <operator pos:line="3267" pos:column="18">=<pos:position pos:line="3267" pos:column="19"/></operator> <literal type="number" pos:line="3267" pos:column="20">0<pos:position pos:line="3267" pos:column="21"/></literal></expr>;<pos:position pos:line="3267" pos:column="22"/></init> <condition><expr><name pos:line="3267" pos:column="23">j<pos:position pos:line="3267" pos:column="24"/></name> <operator pos:line="3267" pos:column="25">&lt;<pos:position pos:line="3267" pos:column="29"/></operator> <operator pos:line="3267" pos:column="27">(<pos:position pos:line="3267" pos:column="28"/></operator><literal type="number" pos:line="3267" pos:column="28">1<pos:position pos:line="3267" pos:column="29"/></literal> <operator pos:line="3267" pos:column="30">&lt;&lt;<pos:position pos:line="3267" pos:column="38"/></operator> <name pos:line="3267" pos:column="33">BYTEWIDTH<pos:position pos:line="3267" pos:column="42"/></name><operator pos:line="3267" pos:column="42">)<pos:position pos:line="3267" pos:column="43"/></operator></expr>;<pos:position pos:line="3267" pos:column="44"/></condition> <incr><expr><name pos:line="3267" pos:column="45">j<pos:position pos:line="3267" pos:column="46"/></name><operator pos:line="3267" pos:column="46">++<pos:position pos:line="3267" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="3267" pos:column="49"/></control>
	    <block type="pseudo"><if pos:line="3268" pos:column="13">if <condition pos:line="3268" pos:column="16">(<expr><call><name pos:line="3268" pos:column="17">SYNTAX<pos:position pos:line="3268" pos:column="23"/></name> <argument_list pos:line="3268" pos:column="24">(<argument><expr><name pos:line="3268" pos:column="25">j<pos:position pos:line="3268" pos:column="26"/></name></expr></argument>)<pos:position pos:line="3268" pos:column="27"/></argument_list></call> <operator pos:line="3268" pos:column="28">!=<pos:position pos:line="3268" pos:column="30"/></operator> <operator pos:line="3268" pos:column="31">(<pos:position pos:line="3268" pos:column="32"/></operator>enum <name pos:line="3268" pos:column="37">syntaxcode<pos:position pos:line="3268" pos:column="47"/></name><operator pos:line="3268" pos:column="47">)<pos:position pos:line="3268" pos:column="48"/></operator> <name pos:line="3268" pos:column="49">k<pos:position pos:line="3268" pos:column="50"/></name></expr>)<pos:position pos:line="3268" pos:column="51"/></condition><then pos:line="3268" pos:column="51">
	      <block type="pseudo"><expr_stmt><expr><name><name pos:line="3269" pos:column="15">fastmap<pos:position pos:line="3269" pos:column="22"/></name><index pos:line="3269" pos:column="22">[<expr><name pos:line="3269" pos:column="23">j<pos:position pos:line="3269" pos:column="24"/></name></expr>]<pos:position pos:line="3269" pos:column="25"/></index></name> <operator pos:line="3269" pos:column="26">=<pos:position pos:line="3269" pos:column="27"/></operator> <literal type="number" pos:line="3269" pos:column="28">1<pos:position pos:line="3269" pos:column="29"/></literal></expr>;<pos:position pos:line="3269" pos:column="30"/></expr_stmt></block></then></if></block></for>
	  <break pos:line="3270" pos:column="11">break;<pos:position pos:line="3270" pos:column="17"/></break>


      <comment type="block" pos:line="3273" pos:column="7">/* All cases after this match the empty string.  These end with
         `continue'.  */</comment>


	<case pos:line="3277" pos:column="9">case <expr><name pos:line="3277" pos:column="14">before_dot<pos:position pos:line="3277" pos:column="24"/></name></expr>:<pos:position pos:line="3277" pos:column="25"/></case>
	<case pos:line="3278" pos:column="9">case <expr><name pos:line="3278" pos:column="14">at_dot<pos:position pos:line="3278" pos:column="20"/></name></expr>:<pos:position pos:line="3278" pos:column="21"/></case>
	<case pos:line="3279" pos:column="9">case <expr><name pos:line="3279" pos:column="14">after_dot<pos:position pos:line="3279" pos:column="23"/></name></expr>:<pos:position pos:line="3279" pos:column="24"/></case>
          <continue pos:line="3280" pos:column="11">continue;<pos:position pos:line="3280" pos:column="20"/></continue>
<cpp:endif pos:line="3281" pos:column="1">#<cpp:directive pos:line="3281" pos:column="2">endif<pos:position pos:line="3281" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="3281" pos:column="8">/* emacs */</comment>


        <case pos:line="3284" pos:column="9">case <expr><name pos:line="3284" pos:column="14">no_op<pos:position pos:line="3284" pos:column="19"/></name></expr>:<pos:position pos:line="3284" pos:column="20"/></case>
        <case pos:line="3285" pos:column="9">case <expr><name pos:line="3285" pos:column="14">begline<pos:position pos:line="3285" pos:column="21"/></name></expr>:<pos:position pos:line="3285" pos:column="22"/></case>
        <case pos:line="3286" pos:column="9">case <expr><name pos:line="3286" pos:column="14">endline<pos:position pos:line="3286" pos:column="21"/></name></expr>:<pos:position pos:line="3286" pos:column="22"/></case>
	<case pos:line="3287" pos:column="9">case <expr><name pos:line="3287" pos:column="14">begbuf<pos:position pos:line="3287" pos:column="20"/></name></expr>:<pos:position pos:line="3287" pos:column="21"/></case>
	<case pos:line="3288" pos:column="9">case <expr><name pos:line="3288" pos:column="14">endbuf<pos:position pos:line="3288" pos:column="20"/></name></expr>:<pos:position pos:line="3288" pos:column="21"/></case>
	<case pos:line="3289" pos:column="9">case <expr><name pos:line="3289" pos:column="14">wordbound<pos:position pos:line="3289" pos:column="23"/></name></expr>:<pos:position pos:line="3289" pos:column="24"/></case>
	<case pos:line="3290" pos:column="9">case <expr><name pos:line="3290" pos:column="14">notwordbound<pos:position pos:line="3290" pos:column="26"/></name></expr>:<pos:position pos:line="3290" pos:column="27"/></case>
	<case pos:line="3291" pos:column="9">case <expr><name pos:line="3291" pos:column="14">wordbeg<pos:position pos:line="3291" pos:column="21"/></name></expr>:<pos:position pos:line="3291" pos:column="22"/></case>
	<case pos:line="3292" pos:column="9">case <expr><name pos:line="3292" pos:column="14">wordend<pos:position pos:line="3292" pos:column="21"/></name></expr>:<pos:position pos:line="3292" pos:column="22"/></case>
        <case pos:line="3293" pos:column="9">case <expr><name pos:line="3293" pos:column="14">push_dummy_failure<pos:position pos:line="3293" pos:column="32"/></name></expr>:<pos:position pos:line="3293" pos:column="33"/></case>
          <continue pos:line="3294" pos:column="11">continue;<pos:position pos:line="3294" pos:column="20"/></continue>


	<case pos:line="3297" pos:column="9">case <expr><name pos:line="3297" pos:column="14">jump_n<pos:position pos:line="3297" pos:column="20"/></name></expr>:<pos:position pos:line="3297" pos:column="21"/></case>
        <case pos:line="3298" pos:column="9">case <expr><name pos:line="3298" pos:column="14">pop_failure_jump<pos:position pos:line="3298" pos:column="30"/></name></expr>:<pos:position pos:line="3298" pos:column="31"/></case>
	<case pos:line="3299" pos:column="9">case <expr><name pos:line="3299" pos:column="14">maybe_pop_jump<pos:position pos:line="3299" pos:column="28"/></name></expr>:<pos:position pos:line="3299" pos:column="29"/></case>
	<case pos:line="3300" pos:column="9">case <expr><name pos:line="3300" pos:column="14">jump<pos:position pos:line="3300" pos:column="18"/></name></expr>:<pos:position pos:line="3300" pos:column="19"/></case>
        <case pos:line="3301" pos:column="9">case <expr><name pos:line="3301" pos:column="14">jump_past_alt<pos:position pos:line="3301" pos:column="27"/></name></expr>:<pos:position pos:line="3301" pos:column="28"/></case>
	<case pos:line="3302" pos:column="9">case <expr><name pos:line="3302" pos:column="14">dummy_failure_jump<pos:position pos:line="3302" pos:column="32"/></name></expr>:<pos:position pos:line="3302" pos:column="33"/></case>
          <expr_stmt><expr><call><name pos:line="3303" pos:column="11">EXTRACT_NUMBER_AND_INCR<pos:position pos:line="3303" pos:column="34"/></name> <argument_list pos:line="3303" pos:column="35">(<argument><expr><name pos:line="3303" pos:column="36">j<pos:position pos:line="3303" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="3303" pos:column="39">p<pos:position pos:line="3303" pos:column="40"/></name></expr></argument>)<pos:position pos:line="3303" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="3303" pos:column="42"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="3304" pos:column="11">p<pos:position pos:line="3304" pos:column="12"/></name> <operator pos:line="3304" pos:column="13">+=<pos:position pos:line="3304" pos:column="15"/></operator> <name pos:line="3304" pos:column="16">j<pos:position pos:line="3304" pos:column="17"/></name></expr>;<pos:position pos:line="3304" pos:column="18"/></expr_stmt>
	  <if pos:line="3305" pos:column="11">if <condition pos:line="3305" pos:column="14">(<expr><name pos:line="3305" pos:column="15">j<pos:position pos:line="3305" pos:column="16"/></name> <operator pos:line="3305" pos:column="17">&gt;<pos:position pos:line="3305" pos:column="21"/></operator> <literal type="number" pos:line="3305" pos:column="19">0<pos:position pos:line="3305" pos:column="20"/></literal></expr>)<pos:position pos:line="3305" pos:column="21"/></condition><then pos:line="3305" pos:column="21">
	    <block type="pseudo"><continue pos:line="3306" pos:column="13">continue;<pos:position pos:line="3306" pos:column="22"/></continue></block></then></if>

          <comment type="block" pos:line="3308" pos:column="11">/* Jump backward implies we just went through the body of a
             loop and matched nothing.  Opcode jumped to should be
             `on_failure_jump' or `succeed_n'.  Just treat it like an
             ordinary jump.  For a * loop, it has pushed its failure
             point already; if so, discard that as redundant.  */</comment>
          <if pos:line="3313" pos:column="11">if <condition pos:line="3313" pos:column="14">(<expr><operator pos:line="3313" pos:column="15">(<pos:position pos:line="3313" pos:column="16"/></operator><name pos:line="3313" pos:column="16">re_opcode_t<pos:position pos:line="3313" pos:column="27"/></name><operator pos:line="3313" pos:column="27">)<pos:position pos:line="3313" pos:column="28"/></operator> <operator pos:line="3313" pos:column="29">*<pos:position pos:line="3313" pos:column="30"/></operator><name pos:line="3313" pos:column="30">p<pos:position pos:line="3313" pos:column="31"/></name> <operator pos:line="3313" pos:column="32">!=<pos:position pos:line="3313" pos:column="34"/></operator> <name pos:line="3313" pos:column="35">on_failure_jump<pos:position pos:line="3313" pos:column="50"/></name>
	      <operator pos:line="3314" pos:column="15">&amp;&amp;<pos:position pos:line="3314" pos:column="25"/></operator> <operator pos:line="3314" pos:column="18">(<pos:position pos:line="3314" pos:column="19"/></operator><name pos:line="3314" pos:column="19">re_opcode_t<pos:position pos:line="3314" pos:column="30"/></name><operator pos:line="3314" pos:column="30">)<pos:position pos:line="3314" pos:column="31"/></operator> <operator pos:line="3314" pos:column="32">*<pos:position pos:line="3314" pos:column="33"/></operator><name pos:line="3314" pos:column="33">p<pos:position pos:line="3314" pos:column="34"/></name> <operator pos:line="3314" pos:column="35">!=<pos:position pos:line="3314" pos:column="37"/></operator> <name pos:line="3314" pos:column="38">succeed_n<pos:position pos:line="3314" pos:column="47"/></name></expr>)<pos:position pos:line="3314" pos:column="48"/></condition><then pos:line="3314" pos:column="48">
	    <block type="pseudo"><continue pos:line="3315" pos:column="13">continue;<pos:position pos:line="3315" pos:column="22"/></continue></block></then></if>

          <expr_stmt><expr><name pos:line="3317" pos:column="11">p<pos:position pos:line="3317" pos:column="12"/></name><operator pos:line="3317" pos:column="12">++<pos:position pos:line="3317" pos:column="14"/></operator></expr>;<pos:position pos:line="3317" pos:column="15"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="3318" pos:column="11">EXTRACT_NUMBER_AND_INCR<pos:position pos:line="3318" pos:column="34"/></name> <argument_list pos:line="3318" pos:column="35">(<argument><expr><name pos:line="3318" pos:column="36">j<pos:position pos:line="3318" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="3318" pos:column="39">p<pos:position pos:line="3318" pos:column="40"/></name></expr></argument>)<pos:position pos:line="3318" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="3318" pos:column="42"/></expr_stmt>
          <expr_stmt><expr><name pos:line="3319" pos:column="11">p<pos:position pos:line="3319" pos:column="12"/></name> <operator pos:line="3319" pos:column="13">+=<pos:position pos:line="3319" pos:column="15"/></operator> <name pos:line="3319" pos:column="16">j<pos:position pos:line="3319" pos:column="17"/></name></expr>;<pos:position pos:line="3319" pos:column="18"/></expr_stmt>

          <comment type="block" pos:line="3321" pos:column="11">/* If what's on the stack is where we are now, pop it.  */</comment>
          <if pos:line="3322" pos:column="11">if <condition pos:line="3322" pos:column="14">(<expr><operator pos:line="3322" pos:column="15">!<pos:position pos:line="3322" pos:column="16"/></operator><call><name pos:line="3322" pos:column="16">FAIL_STACK_EMPTY<pos:position pos:line="3322" pos:column="32"/></name> <argument_list pos:line="3322" pos:column="33">()<pos:position pos:line="3322" pos:column="35"/></argument_list></call>
	      <operator pos:line="3323" pos:column="15">&amp;&amp;<pos:position pos:line="3323" pos:column="25"/></operator> <name><name pos:line="3323" pos:column="18">fail_stack<pos:position pos:line="3323" pos:column="28"/></name><operator pos:line="3323" pos:column="28">.<pos:position pos:line="3323" pos:column="29"/></operator><name pos:line="3323" pos:column="29">stack<pos:position pos:line="3323" pos:column="34"/></name><index pos:line="3323" pos:column="34">[<expr><name><name pos:line="3323" pos:column="35">fail_stack<pos:position pos:line="3323" pos:column="45"/></name><operator pos:line="3323" pos:column="45">.<pos:position pos:line="3323" pos:column="46"/></operator><name pos:line="3323" pos:column="46">avail<pos:position pos:line="3323" pos:column="51"/></name></name> <operator pos:line="3323" pos:column="52">-<pos:position pos:line="3323" pos:column="53"/></operator> <literal type="number" pos:line="3323" pos:column="54">1<pos:position pos:line="3323" pos:column="55"/></literal></expr>]<pos:position pos:line="3323" pos:column="56"/></index></name><operator pos:line="3323" pos:column="56">.<pos:position pos:line="3323" pos:column="57"/></operator><name pos:line="3323" pos:column="57">pointer<pos:position pos:line="3323" pos:column="64"/></name> <operator pos:line="3323" pos:column="65">==<pos:position pos:line="3323" pos:column="67"/></operator> <name pos:line="3323" pos:column="68">p<pos:position pos:line="3323" pos:column="69"/></name></expr>)<pos:position pos:line="3323" pos:column="70"/></condition><then pos:line="3323" pos:column="70">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="3324" pos:column="13">fail_stack<pos:position pos:line="3324" pos:column="23"/></name><operator pos:line="3324" pos:column="23">.<pos:position pos:line="3324" pos:column="24"/></operator><name pos:line="3324" pos:column="24">avail<pos:position pos:line="3324" pos:column="29"/></name></name><operator pos:line="3324" pos:column="29">--<pos:position pos:line="3324" pos:column="31"/></operator></expr>;<pos:position pos:line="3324" pos:column="32"/></expr_stmt></block></then></if>

          <continue pos:line="3326" pos:column="11">continue;<pos:position pos:line="3326" pos:column="20"/></continue>


        <case pos:line="3329" pos:column="9">case <expr><name pos:line="3329" pos:column="14">on_failure_jump<pos:position pos:line="3329" pos:column="29"/></name></expr>:<pos:position pos:line="3329" pos:column="30"/></case>
        <case pos:line="3330" pos:column="9">case <expr><name pos:line="3330" pos:column="14">on_failure_keep_string_jump<pos:position pos:line="3330" pos:column="41"/></name></expr>:<pos:position pos:line="3330" pos:column="42"/></case>
	<label><name pos:line="3331" pos:column="9">handle_on_failure_jump<pos:position pos:line="3331" pos:column="31"/></name>:<pos:position pos:line="3331" pos:column="32"/></label>
          <expr_stmt><expr><call><name pos:line="3332" pos:column="11">EXTRACT_NUMBER_AND_INCR<pos:position pos:line="3332" pos:column="34"/></name> <argument_list pos:line="3332" pos:column="35">(<argument><expr><name pos:line="3332" pos:column="36">j<pos:position pos:line="3332" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="3332" pos:column="39">p<pos:position pos:line="3332" pos:column="40"/></name></expr></argument>)<pos:position pos:line="3332" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="3332" pos:column="42"/></expr_stmt>

          <comment type="block" pos:line="3334" pos:column="11">/* For some patterns, e.g., `(a?)?', `p+j' here points to the
             end of the pattern.  We don't want to push such a point,
             since when we restore it above, entering the switch will
             increment `p' past the end of the pattern.  We don't need
             to push such a point since we obviously won't find any more
             fastmap entries beyond `pend'.  Such a pattern can match
             the null string, though.  */</comment>
          <if pos:line="3341" pos:column="11">if <condition pos:line="3341" pos:column="14">(<expr><name pos:line="3341" pos:column="15">p<pos:position pos:line="3341" pos:column="16"/></name> <operator pos:line="3341" pos:column="17">+<pos:position pos:line="3341" pos:column="18"/></operator> <name pos:line="3341" pos:column="19">j<pos:position pos:line="3341" pos:column="20"/></name> <operator pos:line="3341" pos:column="21">&lt;<pos:position pos:line="3341" pos:column="25"/></operator> <name pos:line="3341" pos:column="23">pend<pos:position pos:line="3341" pos:column="27"/></name></expr>)<pos:position pos:line="3341" pos:column="28"/></condition><then pos:line="3341" pos:column="28">
            <block pos:line="3342" pos:column="13">{
              <if pos:line="3343" pos:column="15">if <condition pos:line="3343" pos:column="18">(<expr><operator pos:line="3343" pos:column="19">!<pos:position pos:line="3343" pos:column="20"/></operator><call><name pos:line="3343" pos:column="20">PUSH_PATTERN_OP<pos:position pos:line="3343" pos:column="35"/></name> <argument_list pos:line="3343" pos:column="36">(<argument><expr><name pos:line="3343" pos:column="37">p<pos:position pos:line="3343" pos:column="38"/></name> <operator pos:line="3343" pos:column="39">+<pos:position pos:line="3343" pos:column="40"/></operator> <name pos:line="3343" pos:column="41">j<pos:position pos:line="3343" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="3343" pos:column="44">fail_stack<pos:position pos:line="3343" pos:column="54"/></name></expr></argument>)<pos:position pos:line="3343" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="3343" pos:column="56"/></condition><then pos:line="3343" pos:column="56">
		<block pos:line="3344" pos:column="17">{
		  <expr_stmt><expr><call><name pos:line="3345" pos:column="19">RESET_FAIL_STACK<pos:position pos:line="3345" pos:column="35"/></name> <argument_list pos:line="3345" pos:column="36">()<pos:position pos:line="3345" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="3345" pos:column="39"/></expr_stmt>
		  <return pos:line="3346" pos:column="19">return <expr><operator pos:line="3346" pos:column="26">-<pos:position pos:line="3346" pos:column="27"/></operator><literal type="number" pos:line="3346" pos:column="27">2<pos:position pos:line="3346" pos:column="28"/></literal></expr>;<pos:position pos:line="3346" pos:column="29"/></return>
		}<pos:position pos:line="3347" pos:column="18"/></block></then></if>
            }<pos:position pos:line="3348" pos:column="14"/></block></then>
          <else pos:line="3349" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="3350" pos:column="13">bufp<pos:position pos:line="3350" pos:column="17"/></name><operator pos:line="3350" pos:column="17">-&gt;<pos:position pos:line="3350" pos:column="22"/></operator><name pos:line="3350" pos:column="19">can_be_null<pos:position pos:line="3350" pos:column="30"/></name></name> <operator pos:line="3350" pos:column="31">=<pos:position pos:line="3350" pos:column="32"/></operator> <literal type="number" pos:line="3350" pos:column="33">1<pos:position pos:line="3350" pos:column="34"/></literal></expr>;<pos:position pos:line="3350" pos:column="35"/></expr_stmt></block></else></if>

          <if pos:line="3352" pos:column="11">if <condition pos:line="3352" pos:column="14">(<expr><name pos:line="3352" pos:column="15">succeed_n_p<pos:position pos:line="3352" pos:column="26"/></name></expr>)<pos:position pos:line="3352" pos:column="27"/></condition><then pos:line="3352" pos:column="27">
            <block pos:line="3353" pos:column="13">{
              <expr_stmt><expr><call><name pos:line="3354" pos:column="15">EXTRACT_NUMBER_AND_INCR<pos:position pos:line="3354" pos:column="38"/></name> <argument_list pos:line="3354" pos:column="39">(<argument><expr><name pos:line="3354" pos:column="40">k<pos:position pos:line="3354" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="3354" pos:column="43">p<pos:position pos:line="3354" pos:column="44"/></name></expr></argument>)<pos:position pos:line="3354" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3354" pos:column="46"/></expr_stmt>	<comment type="block" pos:line="3354" pos:column="49">/* Skip the n.  */</comment>
              <expr_stmt><expr><name pos:line="3355" pos:column="15">succeed_n_p<pos:position pos:line="3355" pos:column="26"/></name> <operator pos:line="3355" pos:column="27">=<pos:position pos:line="3355" pos:column="28"/></operator> <name pos:line="3355" pos:column="29">false<pos:position pos:line="3355" pos:column="34"/></name></expr>;<pos:position pos:line="3355" pos:column="35"/></expr_stmt>
	    }<pos:position pos:line="3356" pos:column="14"/></block></then></if>

          <continue pos:line="3358" pos:column="11">continue;<pos:position pos:line="3358" pos:column="20"/></continue>


	<case pos:line="3361" pos:column="9">case <expr><name pos:line="3361" pos:column="14">succeed_n<pos:position pos:line="3361" pos:column="23"/></name></expr>:<pos:position pos:line="3361" pos:column="24"/></case>
          <comment type="block" pos:line="3362" pos:column="11">/* Get to the number of times to succeed.  */</comment>
          <expr_stmt><expr><name pos:line="3363" pos:column="11">p<pos:position pos:line="3363" pos:column="12"/></name> <operator pos:line="3363" pos:column="13">+=<pos:position pos:line="3363" pos:column="15"/></operator> <literal type="number" pos:line="3363" pos:column="16">2<pos:position pos:line="3363" pos:column="17"/></literal></expr>;<pos:position pos:line="3363" pos:column="18"/></expr_stmt>

          <comment type="block" pos:line="3365" pos:column="11">/* Increment p past the n for when k != 0.  */</comment>
          <expr_stmt><expr><call><name pos:line="3366" pos:column="11">EXTRACT_NUMBER_AND_INCR<pos:position pos:line="3366" pos:column="34"/></name> <argument_list pos:line="3366" pos:column="35">(<argument><expr><name pos:line="3366" pos:column="36">k<pos:position pos:line="3366" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="3366" pos:column="39">p<pos:position pos:line="3366" pos:column="40"/></name></expr></argument>)<pos:position pos:line="3366" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="3366" pos:column="42"/></expr_stmt>
          <if pos:line="3367" pos:column="11">if <condition pos:line="3367" pos:column="14">(<expr><name pos:line="3367" pos:column="15">k<pos:position pos:line="3367" pos:column="16"/></name> <operator pos:line="3367" pos:column="17">==<pos:position pos:line="3367" pos:column="19"/></operator> <literal type="number" pos:line="3367" pos:column="20">0<pos:position pos:line="3367" pos:column="21"/></literal></expr>)<pos:position pos:line="3367" pos:column="22"/></condition><then pos:line="3367" pos:column="22">
	    <block pos:line="3368" pos:column="13">{
              <expr_stmt><expr><name pos:line="3369" pos:column="15">p<pos:position pos:line="3369" pos:column="16"/></name> <operator pos:line="3369" pos:column="17">-=<pos:position pos:line="3369" pos:column="19"/></operator> <literal type="number" pos:line="3369" pos:column="20">4<pos:position pos:line="3369" pos:column="21"/></literal></expr>;<pos:position pos:line="3369" pos:column="22"/></expr_stmt>
  	      <expr_stmt><expr><name pos:line="3370" pos:column="15">succeed_n_p<pos:position pos:line="3370" pos:column="26"/></name> <operator pos:line="3370" pos:column="27">=<pos:position pos:line="3370" pos:column="28"/></operator> <name pos:line="3370" pos:column="29">true<pos:position pos:line="3370" pos:column="33"/></name></expr>;<pos:position pos:line="3370" pos:column="34"/></expr_stmt>  <comment type="block" pos:line="3370" pos:column="36">/* Spaghetti code alert.  */</comment>
              <goto pos:line="3371" pos:column="15">goto <name pos:line="3371" pos:column="20">handle_on_failure_jump<pos:position pos:line="3371" pos:column="42"/></name>;<pos:position pos:line="3371" pos:column="43"/></goto>
            }<pos:position pos:line="3372" pos:column="14"/></block></then></if>
          <continue pos:line="3373" pos:column="11">continue;<pos:position pos:line="3373" pos:column="20"/></continue>


	<case pos:line="3376" pos:column="9">case <expr><name pos:line="3376" pos:column="14">set_number_at<pos:position pos:line="3376" pos:column="27"/></name></expr>:<pos:position pos:line="3376" pos:column="28"/></case>
          <expr_stmt><expr><name pos:line="3377" pos:column="11">p<pos:position pos:line="3377" pos:column="12"/></name> <operator pos:line="3377" pos:column="13">+=<pos:position pos:line="3377" pos:column="15"/></operator> <literal type="number" pos:line="3377" pos:column="16">4<pos:position pos:line="3377" pos:column="17"/></literal></expr>;<pos:position pos:line="3377" pos:column="18"/></expr_stmt>
          <continue pos:line="3378" pos:column="11">continue;<pos:position pos:line="3378" pos:column="20"/></continue>


	<case pos:line="3381" pos:column="9">case <expr><name pos:line="3381" pos:column="14">start_memory<pos:position pos:line="3381" pos:column="26"/></name></expr>:<pos:position pos:line="3381" pos:column="27"/></case>
        <case pos:line="3382" pos:column="9">case <expr><name pos:line="3382" pos:column="14">stop_memory<pos:position pos:line="3382" pos:column="25"/></name></expr>:<pos:position pos:line="3382" pos:column="26"/></case>
	  <expr_stmt><expr><name pos:line="3383" pos:column="11">p<pos:position pos:line="3383" pos:column="12"/></name> <operator pos:line="3383" pos:column="13">+=<pos:position pos:line="3383" pos:column="15"/></operator> <literal type="number" pos:line="3383" pos:column="16">2<pos:position pos:line="3383" pos:column="17"/></literal></expr>;<pos:position pos:line="3383" pos:column="18"/></expr_stmt>
	  <continue pos:line="3384" pos:column="11">continue;<pos:position pos:line="3384" pos:column="20"/></continue>


	<default pos:line="3387" pos:column="9">default:<pos:position pos:line="3387" pos:column="17"/></default>
          <expr_stmt><expr><call><name pos:line="3388" pos:column="11">abort<pos:position pos:line="3388" pos:column="16"/></name> <argument_list pos:line="3388" pos:column="17">()<pos:position pos:line="3388" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="3388" pos:column="20"/></expr_stmt> <comment type="block" pos:line="3388" pos:column="21">/* We have listed all the cases.  */</comment>
        }<pos:position pos:line="3389" pos:column="10"/></block></switch> <comment type="block" pos:line="3389" pos:column="11">/* switch *p++ */</comment>

      <comment type="block" pos:line="3391" pos:column="7">/* Getting here means we have found the possible starting
         characters for one path of the pattern -- and that the empty
         string does not match.  We need not follow this path further.
         Instead, look at the next alternative (remembered on the
         stack), or quit if no more.  The test at the top of the loop
         does these things.  */</comment>
      <expr_stmt><expr><name pos:line="3397" pos:column="7">path_can_be_null<pos:position pos:line="3397" pos:column="23"/></name> <operator pos:line="3397" pos:column="24">=<pos:position pos:line="3397" pos:column="25"/></operator> <name pos:line="3397" pos:column="26">false<pos:position pos:line="3397" pos:column="31"/></name></expr>;<pos:position pos:line="3397" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name pos:line="3398" pos:column="7">p<pos:position pos:line="3398" pos:column="8"/></name> <operator pos:line="3398" pos:column="9">=<pos:position pos:line="3398" pos:column="10"/></operator> <name pos:line="3398" pos:column="11">pend<pos:position pos:line="3398" pos:column="15"/></name></expr>;<pos:position pos:line="3398" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="3399" pos:column="6"/></block></while> <comment type="block" pos:line="3399" pos:column="7">/* while p */</comment>

  <comment type="block" pos:line="3401" pos:column="3">/* Set `can_be_null' for the last path (also the first path, if the
     pattern is empty).  */</comment>
  <expr_stmt><expr><name><name pos:line="3403" pos:column="3">bufp<pos:position pos:line="3403" pos:column="7"/></name><operator pos:line="3403" pos:column="7">-&gt;<pos:position pos:line="3403" pos:column="12"/></operator><name pos:line="3403" pos:column="9">can_be_null<pos:position pos:line="3403" pos:column="20"/></name></name> <operator pos:line="3403" pos:column="21">|=<pos:position pos:line="3403" pos:column="23"/></operator> <name pos:line="3403" pos:column="24">path_can_be_null<pos:position pos:line="3403" pos:column="40"/></name></expr>;<pos:position pos:line="3403" pos:column="41"/></expr_stmt>

 <label><name pos:line="3405" pos:column="2">done<pos:position pos:line="3405" pos:column="6"/></name>:<pos:position pos:line="3405" pos:column="7"/></label>
  <expr_stmt><expr><call><name pos:line="3406" pos:column="3">RESET_FAIL_STACK<pos:position pos:line="3406" pos:column="19"/></name> <argument_list pos:line="3406" pos:column="20">()<pos:position pos:line="3406" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="3406" pos:column="23"/></expr_stmt>
  <return pos:line="3407" pos:column="3">return <expr><literal type="number" pos:line="3407" pos:column="10">0<pos:position pos:line="3407" pos:column="11"/></literal></expr>;<pos:position pos:line="3407" pos:column="12"/></return>
}<pos:position pos:line="3408" pos:column="2"/></block></function> 