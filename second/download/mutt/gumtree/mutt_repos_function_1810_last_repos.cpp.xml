<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1810_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">mutt_init<pos:position pos:line="1" pos:column="15"/></name> <parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name pos:line="1" pos:column="17">int<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">skip_sys_rc<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">LIST<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">commands<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">passwd<pos:position pos:line="3" pos:column="16"/></name></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">pw<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">utsname<pos:position pos:line="4" pos:column="17"/></name></name></type> <name pos:line="4" pos:column="18">utsname<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">p<pos:position pos:line="5" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name><name pos:line="5" pos:column="12">buffer<pos:position pos:line="5" pos:column="18"/></name><index pos:line="5" pos:column="18">[<expr><name pos:line="5" pos:column="19">STRING<pos:position pos:line="5" pos:column="25"/></name></expr>]<pos:position pos:line="5" pos:column="26"/></index></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">domain<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><name pos:line="6" pos:column="18">NULL<pos:position pos:line="6" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="10">need_pause<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">BUFFER<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">err<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">mutt_buffer_init<pos:position pos:line="10" pos:column="19"/></name> <argument_list pos:line="10" pos:column="20">(<argument><expr><operator pos:line="10" pos:column="21">&amp;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="22">err<pos:position pos:line="10" pos:column="25"/></name></expr></argument>)<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="11" pos:column="3">err<pos:position pos:line="11" pos:column="6"/></name><operator pos:line="11" pos:column="6">.<pos:position pos:line="11" pos:column="7"/></operator><name pos:line="11" pos:column="7">dsize<pos:position pos:line="11" pos:column="12"/></name></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <name pos:line="11" pos:column="15">STRING<pos:position pos:line="11" pos:column="21"/></name></expr>;<pos:position pos:line="11" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">err<pos:position pos:line="12" pos:column="6"/></name><operator pos:line="12" pos:column="6">.<pos:position pos:line="12" pos:column="7"/></operator><name pos:line="12" pos:column="7">data<pos:position pos:line="12" pos:column="11"/></name></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">safe_malloc<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><name><name pos:line="12" pos:column="26">err<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">.<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">dsize<pos:position pos:line="12" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="13" pos:column="3">err<pos:position pos:line="13" pos:column="6"/></name><operator pos:line="13" pos:column="6">.<pos:position pos:line="13" pos:column="7"/></operator><name pos:line="13" pos:column="7">dptr<pos:position pos:line="13" pos:column="11"/></name></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <name><name pos:line="13" pos:column="14">err<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">.<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="18">data<pos:position pos:line="13" pos:column="22"/></name></name></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><name pos:line="15" pos:column="3">Groups<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <call><name pos:line="15" pos:column="12">hash_create<pos:position pos:line="15" pos:column="23"/></name> <argument_list pos:line="15" pos:column="24">(<argument><expr><literal type="number" pos:line="15" pos:column="25">1031<pos:position pos:line="15" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="31">0<pos:position pos:line="15" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
  <comment type="block" pos:line="16" pos:column="3">/* reverse alias keys need to be strdup'ed because of idna conversions */</comment>
  <expr_stmt><expr><name pos:line="17" pos:column="3">ReverseAlias<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <call><name pos:line="17" pos:column="18">hash_create<pos:position pos:line="17" pos:column="29"/></name> <argument_list pos:line="17" pos:column="30">(<argument><expr><literal type="number" pos:line="17" pos:column="31">1031<pos:position pos:line="17" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="37">MUTT_HASH_STRCASECMP<pos:position pos:line="17" pos:column="57"/></name> <operator pos:line="17" pos:column="58">|<pos:position pos:line="17" pos:column="59"/></operator> <name pos:line="17" pos:column="60">MUTT_HASH_STRDUP_KEYS<pos:position pos:line="17" pos:column="81"/></name> <operator pos:line="17" pos:column="82">|<pos:position pos:line="17" pos:column="83"/></operator>
                              <name pos:line="18" pos:column="31">MUTT_HASH_ALLOW_DUPS<pos:position pos:line="18" pos:column="51"/></name></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="53"/></expr_stmt>
  
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">mutt_menu_init<pos:position pos:line="20" pos:column="17"/></name> <argument_list pos:line="20" pos:column="18">()<pos:position pos:line="20" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">mutt_srandom<pos:position pos:line="21" pos:column="15"/></name> <argument_list pos:line="21" pos:column="16">()<pos:position pos:line="21" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="19"/></expr_stmt>

  <comment type="block" pos:line="23" pos:column="3">/* 
   * XXX - use something even more difficult to predict?
   */</comment>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">snprintf<pos:position pos:line="26" pos:column="11"/></name> <argument_list pos:line="26" pos:column="12">(<argument><expr><name pos:line="26" pos:column="13">AttachmentMarker<pos:position pos:line="26" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="31">sizeof <argument_list pos:line="26" pos:column="38">(<argument><expr><name pos:line="26" pos:column="39">AttachmentMarker<pos:position pos:line="26" pos:column="55"/></name></expr></argument>)<pos:position pos:line="26" pos:column="56"/></argument_list></sizeof></expr></argument>,
	    <argument><expr><literal type="string" pos:line="27" pos:column="13">"\033]9;%ld\a"<pos:position pos:line="27" pos:column="27"/></literal></expr></argument>, <argument><expr><operator pos:line="27" pos:column="29">(<pos:position pos:line="27" pos:column="30"/></operator><name pos:line="27" pos:column="30">long<pos:position pos:line="27" pos:column="34"/></name><operator pos:line="27" pos:column="34">)<pos:position pos:line="27" pos:column="35"/></operator> <call><name pos:line="27" pos:column="36">time<pos:position pos:line="27" pos:column="40"/></name> <argument_list pos:line="27" pos:column="41">(<argument><expr><name pos:line="27" pos:column="42">NULL<pos:position pos:line="27" pos:column="46"/></name></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="49"/></expr_stmt>
  
  <comment type="block" pos:line="29" pos:column="3">/* on one of the systems I use, getcwd() does not return the same prefix
     as is listed in the passwd file */</comment>
  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><operator pos:line="31" pos:column="7">(<pos:position pos:line="31" pos:column="8"/></operator><name pos:line="31" pos:column="8">p<pos:position pos:line="31" pos:column="9"/></name> <operator pos:line="31" pos:column="10">=<pos:position pos:line="31" pos:column="11"/></operator> <call><name pos:line="31" pos:column="12">getenv<pos:position pos:line="31" pos:column="18"/></name> <argument_list pos:line="31" pos:column="19">(<argument><expr><literal type="string" pos:line="31" pos:column="20">"HOME"<pos:position pos:line="31" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="27"/></argument_list></call><operator pos:line="31" pos:column="27">)<pos:position pos:line="31" pos:column="28"/></operator></expr>)<pos:position pos:line="31" pos:column="29"/></condition><then pos:line="31" pos:column="29">
    <block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="5">Homedir<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <call><name pos:line="32" pos:column="15">safe_strdup<pos:position pos:line="32" pos:column="26"/></name> <argument_list pos:line="32" pos:column="27">(<argument><expr><name pos:line="32" pos:column="28">p<pos:position pos:line="32" pos:column="29"/></name></expr></argument>)<pos:position pos:line="32" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="31"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="34" pos:column="3">/* Get some information about the user */</comment>
  <if pos:line="35" pos:column="3">if <condition pos:line="35" pos:column="6">(<expr><operator pos:line="35" pos:column="7">(<pos:position pos:line="35" pos:column="8"/></operator><name pos:line="35" pos:column="8">pw<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">=<pos:position pos:line="35" pos:column="12"/></operator> <call><name pos:line="35" pos:column="13">getpwuid<pos:position pos:line="35" pos:column="21"/></name> <argument_list pos:line="35" pos:column="22">(<argument><expr><call><name pos:line="35" pos:column="23">getuid<pos:position pos:line="35" pos:column="29"/></name> <argument_list pos:line="35" pos:column="30">()<pos:position pos:line="35" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="33"/></argument_list></call><operator pos:line="35" pos:column="33">)<pos:position pos:line="35" pos:column="34"/></operator></expr>)<pos:position pos:line="35" pos:column="35"/></condition><then pos:line="35" pos:column="35">
  <block pos:line="36" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="37" pos:column="5">char<pos:position pos:line="37" pos:column="9"/></name></type> <name><name pos:line="37" pos:column="10">rnbuf<pos:position pos:line="37" pos:column="15"/></name><index pos:line="37" pos:column="15">[<expr><name pos:line="37" pos:column="16">STRING<pos:position pos:line="37" pos:column="22"/></name></expr>]<pos:position pos:line="37" pos:column="23"/></index></name></decl>;<pos:position pos:line="37" pos:column="24"/></decl_stmt>

    <expr_stmt><expr><name pos:line="39" pos:column="5">Username<pos:position pos:line="39" pos:column="13"/></name> <operator pos:line="39" pos:column="14">=<pos:position pos:line="39" pos:column="15"/></operator> <call><name pos:line="39" pos:column="16">safe_strdup<pos:position pos:line="39" pos:column="27"/></name> <argument_list pos:line="39" pos:column="28">(<argument><expr><name><name pos:line="39" pos:column="29">pw<pos:position pos:line="39" pos:column="31"/></name><operator pos:line="39" pos:column="31">-&gt;<pos:position pos:line="39" pos:column="36"/></operator><name pos:line="39" pos:column="33">pw_name<pos:position pos:line="39" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="42"/></expr_stmt>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><operator pos:line="40" pos:column="9">!<pos:position pos:line="40" pos:column="10"/></operator><name pos:line="40" pos:column="10">Homedir<pos:position pos:line="40" pos:column="17"/></name></expr>)<pos:position pos:line="40" pos:column="18"/></condition><then pos:line="40" pos:column="18">
      <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="7">Homedir<pos:position pos:line="41" pos:column="14"/></name> <operator pos:line="41" pos:column="15">=<pos:position pos:line="41" pos:column="16"/></operator> <call><name pos:line="41" pos:column="17">safe_strdup<pos:position pos:line="41" pos:column="28"/></name> <argument_list pos:line="41" pos:column="29">(<argument><expr><name><name pos:line="41" pos:column="30">pw<pos:position pos:line="41" pos:column="32"/></name><operator pos:line="41" pos:column="32">-&gt;<pos:position pos:line="41" pos:column="37"/></operator><name pos:line="41" pos:column="34">pw_dir<pos:position pos:line="41" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="42"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="43" pos:column="5">Realname<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">=<pos:position pos:line="43" pos:column="15"/></operator> <call><name pos:line="43" pos:column="16">safe_strdup<pos:position pos:line="43" pos:column="27"/></name> <argument_list pos:line="43" pos:column="28">(<argument><expr><call><name pos:line="43" pos:column="29">mutt_gecos_name<pos:position pos:line="43" pos:column="44"/></name> <argument_list pos:line="43" pos:column="45">(<argument><expr><name pos:line="43" pos:column="46">rnbuf<pos:position pos:line="43" pos:column="51"/></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="53">sizeof <argument_list pos:line="43" pos:column="60">(<argument><expr><name pos:line="43" pos:column="61">rnbuf<pos:position pos:line="43" pos:column="66"/></name></expr></argument>)<pos:position pos:line="43" pos:column="67"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="43" pos:column="69">pw<pos:position pos:line="43" pos:column="71"/></name></expr></argument>)<pos:position pos:line="43" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><name pos:line="44" pos:column="5">Shell<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">=<pos:position pos:line="44" pos:column="12"/></operator> <call><name pos:line="44" pos:column="13">safe_strdup<pos:position pos:line="44" pos:column="24"/></name> <argument_list pos:line="44" pos:column="25">(<argument><expr><name><name pos:line="44" pos:column="26">pw<pos:position pos:line="44" pos:column="28"/></name><operator pos:line="44" pos:column="28">-&gt;<pos:position pos:line="44" pos:column="33"/></operator><name pos:line="44" pos:column="30">pw_shell<pos:position pos:line="44" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">endpwent<pos:position pos:line="45" pos:column="13"/></name> <argument_list pos:line="45" pos:column="14">()<pos:position pos:line="45" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="46" pos:column="4"/></block></then>
  <else pos:line="47" pos:column="3">else 
  <block pos:line="48" pos:column="3">{
    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><operator pos:line="49" pos:column="9">!<pos:position pos:line="49" pos:column="10"/></operator><name pos:line="49" pos:column="10">Homedir<pos:position pos:line="49" pos:column="17"/></name></expr>)<pos:position pos:line="49" pos:column="18"/></condition><then pos:line="49" pos:column="18">
    <block pos:line="50" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="51" pos:column="7">mutt_endwin<pos:position pos:line="51" pos:column="18"/></name> <argument_list pos:line="51" pos:column="19">(<argument><expr><name pos:line="51" pos:column="20">NULL<pos:position pos:line="51" pos:column="24"/></name></expr></argument>)<pos:position pos:line="51" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">fputs<pos:position pos:line="52" pos:column="12"/></name> <argument_list pos:line="52" pos:column="13">(<argument><expr><call><name pos:line="52" pos:column="14">_<pos:position pos:line="52" pos:column="15"/></name><argument_list pos:line="52" pos:column="15">(<argument><expr><literal type="string" pos:line="52" pos:column="16">"unable to determine home directory"<pos:position pos:line="52" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="52" pos:column="55">stderr<pos:position pos:line="52" pos:column="61"/></name></expr></argument>)<pos:position pos:line="52" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="63"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="53" pos:column="7">exit<pos:position pos:line="53" pos:column="11"/></name> <argument_list pos:line="53" pos:column="12">(<argument><expr><literal type="number" pos:line="53" pos:column="13">1<pos:position pos:line="53" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>
    <if pos:line="55" pos:column="5">if <condition pos:line="55" pos:column="8">(<expr><operator pos:line="55" pos:column="9">(<pos:position pos:line="55" pos:column="10"/></operator><name pos:line="55" pos:column="10">p<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">=<pos:position pos:line="55" pos:column="13"/></operator> <call><name pos:line="55" pos:column="14">getenv<pos:position pos:line="55" pos:column="20"/></name> <argument_list pos:line="55" pos:column="21">(<argument><expr><literal type="string" pos:line="55" pos:column="22">"USER"<pos:position pos:line="55" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="29"/></argument_list></call><operator pos:line="55" pos:column="29">)<pos:position pos:line="55" pos:column="30"/></operator></expr>)<pos:position pos:line="55" pos:column="31"/></condition><then pos:line="55" pos:column="31">
      <block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="7">Username<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">=<pos:position pos:line="56" pos:column="17"/></operator> <call><name pos:line="56" pos:column="18">safe_strdup<pos:position pos:line="56" pos:column="29"/></name> <argument_list pos:line="56" pos:column="30">(<argument><expr><name pos:line="56" pos:column="31">p<pos:position pos:line="56" pos:column="32"/></name></expr></argument>)<pos:position pos:line="56" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="34"/></expr_stmt></block></then>
    <else pos:line="57" pos:column="5">else
    <block pos:line="58" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="59" pos:column="7">mutt_endwin<pos:position pos:line="59" pos:column="18"/></name> <argument_list pos:line="59" pos:column="19">(<argument><expr><name pos:line="59" pos:column="20">NULL<pos:position pos:line="59" pos:column="24"/></name></expr></argument>)<pos:position pos:line="59" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="60" pos:column="7">fputs<pos:position pos:line="60" pos:column="12"/></name> <argument_list pos:line="60" pos:column="13">(<argument><expr><call><name pos:line="60" pos:column="14">_<pos:position pos:line="60" pos:column="15"/></name><argument_list pos:line="60" pos:column="15">(<argument><expr><literal type="string" pos:line="60" pos:column="16">"unable to determine username"<pos:position pos:line="60" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="60" pos:column="49">stderr<pos:position pos:line="60" pos:column="55"/></name></expr></argument>)<pos:position pos:line="60" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="61" pos:column="7">exit<pos:position pos:line="61" pos:column="11"/></name> <argument_list pos:line="61" pos:column="12">(<argument><expr><literal type="number" pos:line="61" pos:column="13">1<pos:position pos:line="61" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="62" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="63" pos:column="5">Shell<pos:position pos:line="63" pos:column="10"/></name> <operator pos:line="63" pos:column="11">=<pos:position pos:line="63" pos:column="12"/></operator> <call><name pos:line="63" pos:column="13">safe_strdup<pos:position pos:line="63" pos:column="24"/></name> <argument_list pos:line="63" pos:column="25">(<argument><expr><ternary><condition><expr><operator pos:line="63" pos:column="26">(<pos:position pos:line="63" pos:column="27"/></operator><name pos:line="63" pos:column="27">p<pos:position pos:line="63" pos:column="28"/></name> <operator pos:line="63" pos:column="29">=<pos:position pos:line="63" pos:column="30"/></operator> <call><name pos:line="63" pos:column="31">getenv<pos:position pos:line="63" pos:column="37"/></name> <argument_list pos:line="63" pos:column="38">(<argument><expr><literal type="string" pos:line="63" pos:column="39">"SHELL"<pos:position pos:line="63" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="47"/></argument_list></call><operator pos:line="63" pos:column="47">)<pos:position pos:line="63" pos:column="48"/></operator></expr> ?<pos:position pos:line="63" pos:column="50"/></condition><then pos:line="63" pos:column="50"> <expr><name pos:line="63" pos:column="51">p<pos:position pos:line="63" pos:column="52"/></name></expr> <pos:position pos:line="63" pos:column="53"/></then><else pos:line="63" pos:column="53">: <expr><literal type="string" pos:line="63" pos:column="55">"/bin/sh"<pos:position pos:line="63" pos:column="64"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="63" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="66"/></expr_stmt>
  }<pos:position pos:line="64" pos:column="4"/></block></else></if>

<cpp:ifdef pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">ifdef<pos:position pos:line="66" pos:column="7"/></cpp:directive> <name pos:line="66" pos:column="8">DEBUG<pos:position pos:line="66" pos:column="13"/></name></cpp:ifdef>
  <comment type="block" pos:line="67" pos:column="3">/* Start up debugging mode if requested */</comment>
  <if pos:line="68" pos:column="3">if <condition pos:line="68" pos:column="6">(<expr><name pos:line="68" pos:column="7">debuglevel<pos:position pos:line="68" pos:column="17"/></name> <operator pos:line="68" pos:column="18">&gt;<pos:position pos:line="68" pos:column="22"/></operator> <literal type="number" pos:line="68" pos:column="20">0<pos:position pos:line="68" pos:column="21"/></literal></expr>)<pos:position pos:line="68" pos:column="22"/></condition><then pos:line="68" pos:column="22">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="5">start_debug<pos:position pos:line="69" pos:column="16"/></name> <argument_list pos:line="69" pos:column="17">()<pos:position pos:line="69" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="20"/></expr_stmt></block></then></if>
<cpp:endif pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">endif<pos:position pos:line="70" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="72" pos:column="3">/* And about the host... */</comment>

<cpp:ifdef pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">ifdef<pos:position pos:line="74" pos:column="7"/></cpp:directive> <name pos:line="74" pos:column="8">DOMAIN<pos:position pos:line="74" pos:column="14"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="75" pos:column="3">domain<pos:position pos:line="75" pos:column="9"/></name> <operator pos:line="75" pos:column="10">=<pos:position pos:line="75" pos:column="11"/></operator> <call><name pos:line="75" pos:column="12">safe_strdup<pos:position pos:line="75" pos:column="23"/></name> <argument_list pos:line="75" pos:column="24">(<argument><expr><name pos:line="75" pos:column="25">DOMAIN<pos:position pos:line="75" pos:column="31"/></name></expr></argument>)<pos:position pos:line="75" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="33"/></expr_stmt>
<cpp:endif pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">endif<pos:position pos:line="76" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="76" pos:column="8">/* DOMAIN */</comment>

  <comment type="block" pos:line="78" pos:column="3">/*
   * The call to uname() shouldn't fail, but if it does, the system is horribly
   * broken, and the system's networking configuration is in an unreliable
   * state.  We should bail.
   */</comment>
  <if pos:line="83" pos:column="3">if <condition pos:line="83" pos:column="6">(<expr><operator pos:line="83" pos:column="7">(<pos:position pos:line="83" pos:column="8"/></operator><call><name pos:line="83" pos:column="8">uname<pos:position pos:line="83" pos:column="13"/></name> <argument_list pos:line="83" pos:column="14">(<argument><expr><operator pos:line="83" pos:column="15">&amp;<pos:position pos:line="83" pos:column="20"/></operator><name pos:line="83" pos:column="16">utsname<pos:position pos:line="83" pos:column="23"/></name></expr></argument>)<pos:position pos:line="83" pos:column="24"/></argument_list></call><operator pos:line="83" pos:column="24">)<pos:position pos:line="83" pos:column="25"/></operator> <operator pos:line="83" pos:column="26">==<pos:position pos:line="83" pos:column="28"/></operator> <operator pos:line="83" pos:column="29">-<pos:position pos:line="83" pos:column="30"/></operator><literal type="number" pos:line="83" pos:column="30">1<pos:position pos:line="83" pos:column="31"/></literal></expr>)<pos:position pos:line="83" pos:column="32"/></condition><then pos:line="83" pos:column="32">
  <block pos:line="84" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">mutt_endwin<pos:position pos:line="85" pos:column="16"/></name> <argument_list pos:line="85" pos:column="17">(<argument><expr><name pos:line="85" pos:column="18">NULL<pos:position pos:line="85" pos:column="22"/></name></expr></argument>)<pos:position pos:line="85" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="86" pos:column="5">perror<pos:position pos:line="86" pos:column="11"/></name> <argument_list pos:line="86" pos:column="12">(<argument><expr><call><name pos:line="86" pos:column="13">_<pos:position pos:line="86" pos:column="14"/></name><argument_list pos:line="86" pos:column="14">(<argument><expr><literal type="string" pos:line="86" pos:column="15">"unable to determine nodename via uname()"<pos:position pos:line="86" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="86" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="87" pos:column="5">exit<pos:position pos:line="87" pos:column="9"/></name> <argument_list pos:line="87" pos:column="10">(<argument><expr><literal type="number" pos:line="87" pos:column="11">1<pos:position pos:line="87" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="88" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="90" pos:column="3">/* some systems report the FQDN instead of just the hostname */</comment>
  <if pos:line="91" pos:column="3">if <condition pos:line="91" pos:column="6">(<expr><operator pos:line="91" pos:column="7">(<pos:position pos:line="91" pos:column="8"/></operator><name pos:line="91" pos:column="8">p<pos:position pos:line="91" pos:column="9"/></name> <operator pos:line="91" pos:column="10">=<pos:position pos:line="91" pos:column="11"/></operator> <call><name pos:line="91" pos:column="12">strchr<pos:position pos:line="91" pos:column="18"/></name> <argument_list pos:line="91" pos:column="19">(<argument><expr><name><name pos:line="91" pos:column="20">utsname<pos:position pos:line="91" pos:column="27"/></name><operator pos:line="91" pos:column="27">.<pos:position pos:line="91" pos:column="28"/></operator><name pos:line="91" pos:column="28">nodename<pos:position pos:line="91" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="91" pos:column="38">'.'<pos:position pos:line="91" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="42"/></argument_list></call><operator pos:line="91" pos:column="42">)<pos:position pos:line="91" pos:column="43"/></operator></expr>)<pos:position pos:line="91" pos:column="44"/></condition><then pos:line="91" pos:column="44">
    <block type="pseudo"><expr_stmt><expr><name pos:line="92" pos:column="5">Hostname<pos:position pos:line="92" pos:column="13"/></name> <operator pos:line="92" pos:column="14">=<pos:position pos:line="92" pos:column="15"/></operator> <call><name pos:line="92" pos:column="16">mutt_substrdup<pos:position pos:line="92" pos:column="30"/></name> <argument_list pos:line="92" pos:column="31">(<argument><expr><name><name pos:line="92" pos:column="32">utsname<pos:position pos:line="92" pos:column="39"/></name><operator pos:line="92" pos:column="39">.<pos:position pos:line="92" pos:column="40"/></operator><name pos:line="92" pos:column="40">nodename<pos:position pos:line="92" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="50">p<pos:position pos:line="92" pos:column="51"/></name></expr></argument>)<pos:position pos:line="92" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="53"/></expr_stmt></block></then>
  <else pos:line="93" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="94" pos:column="5">Hostname<pos:position pos:line="94" pos:column="13"/></name> <operator pos:line="94" pos:column="14">=<pos:position pos:line="94" pos:column="15"/></operator> <call><name pos:line="94" pos:column="16">safe_strdup<pos:position pos:line="94" pos:column="27"/></name> <argument_list pos:line="94" pos:column="28">(<argument><expr><name><name pos:line="94" pos:column="29">utsname<pos:position pos:line="94" pos:column="36"/></name><operator pos:line="94" pos:column="36">.<pos:position pos:line="94" pos:column="37"/></operator><name pos:line="94" pos:column="37">nodename<pos:position pos:line="94" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="94" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="47"/></expr_stmt></block></else></if>

  <comment type="block" pos:line="96" pos:column="3">/* now get FQDN.  Use configured domain first, DNS next, then uname */</comment>
  <if pos:line="97" pos:column="3">if <condition pos:line="97" pos:column="6">(<expr><name pos:line="97" pos:column="7">domain<pos:position pos:line="97" pos:column="13"/></name></expr>)<pos:position pos:line="97" pos:column="14"/></condition><then pos:line="97" pos:column="14">
  <block pos:line="98" pos:column="3">{
    <comment type="block" pos:line="99" pos:column="5">/* we have a compile-time domain name, use that for Fqdn */</comment>
    <expr_stmt><expr><name pos:line="100" pos:column="5">Fqdn<pos:position pos:line="100" pos:column="9"/></name> <operator pos:line="100" pos:column="10">=<pos:position pos:line="100" pos:column="11"/></operator> <call><name pos:line="100" pos:column="12">safe_malloc<pos:position pos:line="100" pos:column="23"/></name> <argument_list pos:line="100" pos:column="24">(<argument><expr><call><name pos:line="100" pos:column="25">mutt_strlen<pos:position pos:line="100" pos:column="36"/></name> <argument_list pos:line="100" pos:column="37">(<argument><expr><name pos:line="100" pos:column="38">domain<pos:position pos:line="100" pos:column="44"/></name></expr></argument>)<pos:position pos:line="100" pos:column="45"/></argument_list></call> <operator pos:line="100" pos:column="46">+<pos:position pos:line="100" pos:column="47"/></operator> <call><name pos:line="100" pos:column="48">mutt_strlen<pos:position pos:line="100" pos:column="59"/></name> <argument_list pos:line="100" pos:column="60">(<argument><expr><name pos:line="100" pos:column="61">Hostname<pos:position pos:line="100" pos:column="69"/></name></expr></argument>)<pos:position pos:line="100" pos:column="70"/></argument_list></call> <operator pos:line="100" pos:column="71">+<pos:position pos:line="100" pos:column="72"/></operator> <literal type="number" pos:line="100" pos:column="73">2<pos:position pos:line="100" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="76"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="101" pos:column="5">sprintf<pos:position pos:line="101" pos:column="12"/></name> <argument_list pos:line="101" pos:column="13">(<argument><expr><name pos:line="101" pos:column="14">Fqdn<pos:position pos:line="101" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="20">"%s.%s"<pos:position pos:line="101" pos:column="27"/></literal></expr></argument>, <argument><expr><call><name pos:line="101" pos:column="29">NONULL<pos:position pos:line="101" pos:column="35"/></name><argument_list pos:line="101" pos:column="35">(<argument><expr><name pos:line="101" pos:column="36">Hostname<pos:position pos:line="101" pos:column="44"/></name></expr></argument>)<pos:position pos:line="101" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="101" pos:column="47">domain<pos:position pos:line="101" pos:column="53"/></name></expr></argument>)<pos:position pos:line="101" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="55"/></expr_stmt>	<comment type="block" pos:line="101" pos:column="57">/* __SPRINTF_CHECKED__ */</comment>
  }<pos:position pos:line="102" pos:column="4"/></block></then>
  <elseif pos:line="103" pos:column="3">else <if pos:line="103" pos:column="8">if <condition pos:line="103" pos:column="11">(<expr><operator pos:line="103" pos:column="12">!<pos:position pos:line="103" pos:column="13"/></operator><operator pos:line="103" pos:column="13">(<pos:position pos:line="103" pos:column="14"/></operator><call><name pos:line="103" pos:column="14">getdnsdomainname<pos:position pos:line="103" pos:column="30"/></name> <argument_list pos:line="103" pos:column="31">(<argument><expr><name pos:line="103" pos:column="32">buffer<pos:position pos:line="103" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="103" pos:column="40">sizeof <name pos:line="103" pos:column="47">buffer<pos:position pos:line="103" pos:column="53"/></name></sizeof></expr></argument>)<pos:position pos:line="103" pos:column="54"/></argument_list></call><operator pos:line="103" pos:column="54">)<pos:position pos:line="103" pos:column="55"/></operator></expr>)<pos:position pos:line="103" pos:column="56"/></condition><then pos:line="103" pos:column="56">
  <block pos:line="104" pos:column="3">{
    <expr_stmt><expr><name pos:line="105" pos:column="5">Fqdn<pos:position pos:line="105" pos:column="9"/></name> <operator pos:line="105" pos:column="10">=<pos:position pos:line="105" pos:column="11"/></operator> <call><name pos:line="105" pos:column="12">safe_malloc<pos:position pos:line="105" pos:column="23"/></name> <argument_list pos:line="105" pos:column="24">(<argument><expr><call><name pos:line="105" pos:column="25">mutt_strlen<pos:position pos:line="105" pos:column="36"/></name> <argument_list pos:line="105" pos:column="37">(<argument><expr><name pos:line="105" pos:column="38">buffer<pos:position pos:line="105" pos:column="44"/></name></expr></argument>)<pos:position pos:line="105" pos:column="45"/></argument_list></call> <operator pos:line="105" pos:column="46">+<pos:position pos:line="105" pos:column="47"/></operator> <call><name pos:line="105" pos:column="48">mutt_strlen<pos:position pos:line="105" pos:column="59"/></name> <argument_list pos:line="105" pos:column="60">(<argument><expr><name pos:line="105" pos:column="61">Hostname<pos:position pos:line="105" pos:column="69"/></name></expr></argument>)<pos:position pos:line="105" pos:column="70"/></argument_list></call> <operator pos:line="105" pos:column="71">+<pos:position pos:line="105" pos:column="72"/></operator> <literal type="number" pos:line="105" pos:column="73">2<pos:position pos:line="105" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="76"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="106" pos:column="5">sprintf<pos:position pos:line="106" pos:column="12"/></name> <argument_list pos:line="106" pos:column="13">(<argument><expr><name pos:line="106" pos:column="14">Fqdn<pos:position pos:line="106" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="20">"%s.%s"<pos:position pos:line="106" pos:column="27"/></literal></expr></argument>, <argument><expr><call><name pos:line="106" pos:column="29">NONULL<pos:position pos:line="106" pos:column="35"/></name><argument_list pos:line="106" pos:column="35">(<argument><expr><name pos:line="106" pos:column="36">Hostname<pos:position pos:line="106" pos:column="44"/></name></expr></argument>)<pos:position pos:line="106" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="106" pos:column="47">buffer<pos:position pos:line="106" pos:column="53"/></name></expr></argument>)<pos:position pos:line="106" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="55"/></expr_stmt>	<comment type="block" pos:line="106" pos:column="57">/* __SPRINTF_CHECKED__ */</comment>
  }<pos:position pos:line="107" pos:column="4"/></block></then></if></elseif>
  <else pos:line="108" pos:column="3">else
    <comment type="block" pos:line="109" pos:column="5">/*
     * DNS failed, use the nodename.  Whether or not the nodename had a '.' in
     * it, we can use the nodename as the FQDN.  On hosts where DNS is not
     * being used, e.g. small network that relies on hosts files, a short host
     * name is all that is required for SMTP to work correctly.  It could be
     * wrong, but we've done the best we can, at this point the onus is on the
     * user to provide the correct hostname if the nodename won't work in their
     * network.
     */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="118" pos:column="5">Fqdn<pos:position pos:line="118" pos:column="9"/></name> <operator pos:line="118" pos:column="10">=<pos:position pos:line="118" pos:column="11"/></operator> <call><name pos:line="118" pos:column="12">safe_strdup<pos:position pos:line="118" pos:column="23"/></name><argument_list pos:line="118" pos:column="23">(<argument><expr><name><name pos:line="118" pos:column="24">utsname<pos:position pos:line="118" pos:column="31"/></name><operator pos:line="118" pos:column="31">.<pos:position pos:line="118" pos:column="32"/></operator><name pos:line="118" pos:column="32">nodename<pos:position pos:line="118" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="118" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="42"/></expr_stmt></block></else></if>


  <if pos:line="121" pos:column="3">if <condition pos:line="121" pos:column="6">(<expr><operator pos:line="121" pos:column="7">(<pos:position pos:line="121" pos:column="8"/></operator><name pos:line="121" pos:column="8">p<pos:position pos:line="121" pos:column="9"/></name> <operator pos:line="121" pos:column="10">=<pos:position pos:line="121" pos:column="11"/></operator> <call><name pos:line="121" pos:column="12">getenv<pos:position pos:line="121" pos:column="18"/></name> <argument_list pos:line="121" pos:column="19">(<argument><expr><literal type="string" pos:line="121" pos:column="20">"MAIL"<pos:position pos:line="121" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="27"/></argument_list></call><operator pos:line="121" pos:column="27">)<pos:position pos:line="121" pos:column="28"/></operator></expr>)<pos:position pos:line="121" pos:column="29"/></condition><then pos:line="121" pos:column="29">
    <block type="pseudo"><expr_stmt><expr><name pos:line="122" pos:column="5">Spoolfile<pos:position pos:line="122" pos:column="14"/></name> <operator pos:line="122" pos:column="15">=<pos:position pos:line="122" pos:column="16"/></operator> <call><name pos:line="122" pos:column="17">safe_strdup<pos:position pos:line="122" pos:column="28"/></name> <argument_list pos:line="122" pos:column="29">(<argument><expr><name pos:line="122" pos:column="30">p<pos:position pos:line="122" pos:column="31"/></name></expr></argument>)<pos:position pos:line="122" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="33"/></expr_stmt></block></then>
  <elseif pos:line="123" pos:column="3">else <if pos:line="123" pos:column="8">if <condition pos:line="123" pos:column="11">(<expr><operator pos:line="123" pos:column="12">(<pos:position pos:line="123" pos:column="13"/></operator><name pos:line="123" pos:column="13">p<pos:position pos:line="123" pos:column="14"/></name> <operator pos:line="123" pos:column="15">=<pos:position pos:line="123" pos:column="16"/></operator> <call><name pos:line="123" pos:column="17">getenv<pos:position pos:line="123" pos:column="23"/></name> <argument_list pos:line="123" pos:column="24">(<argument><expr><literal type="string" pos:line="123" pos:column="25">"MAILDIR"<pos:position pos:line="123" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="35"/></argument_list></call><operator pos:line="123" pos:column="35">)<pos:position pos:line="123" pos:column="36"/></operator></expr>)<pos:position pos:line="123" pos:column="37"/></condition><then pos:line="123" pos:column="37">
    <block type="pseudo"><expr_stmt><expr><name pos:line="124" pos:column="5">Spoolfile<pos:position pos:line="124" pos:column="14"/></name> <operator pos:line="124" pos:column="15">=<pos:position pos:line="124" pos:column="16"/></operator> <call><name pos:line="124" pos:column="17">safe_strdup<pos:position pos:line="124" pos:column="28"/></name> <argument_list pos:line="124" pos:column="29">(<argument><expr><name pos:line="124" pos:column="30">p<pos:position pos:line="124" pos:column="31"/></name></expr></argument>)<pos:position pos:line="124" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="33"/></expr_stmt></block></then></if></elseif>
  <else pos:line="125" pos:column="3">else
  <block pos:line="126" pos:column="3">{
<cpp:ifdef pos:line="127" pos:column="1">#<cpp:directive pos:line="127" pos:column="2">ifdef<pos:position pos:line="127" pos:column="7"/></cpp:directive> <name pos:line="127" pos:column="8">HOMESPOOL<pos:position pos:line="127" pos:column="17"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="128" pos:column="5">mutt_concat_path<pos:position pos:line="128" pos:column="21"/></name> <argument_list pos:line="128" pos:column="22">(<argument><expr><name pos:line="128" pos:column="23">buffer<pos:position pos:line="128" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="128" pos:column="31">NONULL<pos:position pos:line="128" pos:column="37"/></name> <argument_list pos:line="128" pos:column="38">(<argument><expr><name pos:line="128" pos:column="39">Homedir<pos:position pos:line="128" pos:column="46"/></name></expr></argument>)<pos:position pos:line="128" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="128" pos:column="49">MAILPATH<pos:position pos:line="128" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="128" pos:column="59">sizeof <argument_list pos:line="128" pos:column="66">(<argument><expr><name pos:line="128" pos:column="67">buffer<pos:position pos:line="128" pos:column="73"/></name></expr></argument>)<pos:position pos:line="128" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="128" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="76"/></expr_stmt>
<cpp:else pos:line="129" pos:column="1">#<cpp:directive pos:line="129" pos:column="2">else<pos:position pos:line="129" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="130" pos:column="5">mutt_concat_path<pos:position pos:line="130" pos:column="21"/></name> <argument_list pos:line="130" pos:column="22">(<argument><expr><name pos:line="130" pos:column="23">buffer<pos:position pos:line="130" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="31">MAILPATH<pos:position pos:line="130" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="130" pos:column="41">NONULL<pos:position pos:line="130" pos:column="47"/></name><argument_list pos:line="130" pos:column="47">(<argument><expr><name pos:line="130" pos:column="48">Username<pos:position pos:line="130" pos:column="56"/></name></expr></argument>)<pos:position pos:line="130" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><sizeof pos:line="130" pos:column="59">sizeof <argument_list pos:line="130" pos:column="66">(<argument><expr><name pos:line="130" pos:column="67">buffer<pos:position pos:line="130" pos:column="73"/></name></expr></argument>)<pos:position pos:line="130" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="130" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="76"/></expr_stmt>
<cpp:endif pos:line="131" pos:column="1">#<cpp:directive pos:line="131" pos:column="2">endif<pos:position pos:line="131" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="132" pos:column="5">Spoolfile<pos:position pos:line="132" pos:column="14"/></name> <operator pos:line="132" pos:column="15">=<pos:position pos:line="132" pos:column="16"/></operator> <call><name pos:line="132" pos:column="17">safe_strdup<pos:position pos:line="132" pos:column="28"/></name> <argument_list pos:line="132" pos:column="29">(<argument><expr><name pos:line="132" pos:column="30">buffer<pos:position pos:line="132" pos:column="36"/></name></expr></argument>)<pos:position pos:line="132" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="133" pos:column="4"/></block></else></if>

  <if pos:line="135" pos:column="3">if <condition pos:line="135" pos:column="6">(<expr><operator pos:line="135" pos:column="7">(<pos:position pos:line="135" pos:column="8"/></operator><name pos:line="135" pos:column="8">p<pos:position pos:line="135" pos:column="9"/></name> <operator pos:line="135" pos:column="10">=<pos:position pos:line="135" pos:column="11"/></operator> <call><name pos:line="135" pos:column="12">getenv<pos:position pos:line="135" pos:column="18"/></name> <argument_list pos:line="135" pos:column="19">(<argument><expr><literal type="string" pos:line="135" pos:column="20">"MAILCAPS"<pos:position pos:line="135" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="135" pos:column="31"/></argument_list></call><operator pos:line="135" pos:column="31">)<pos:position pos:line="135" pos:column="32"/></operator></expr>)<pos:position pos:line="135" pos:column="33"/></condition><then pos:line="135" pos:column="33">
    <block type="pseudo"><expr_stmt><expr><name pos:line="136" pos:column="5">MailcapPath<pos:position pos:line="136" pos:column="16"/></name> <operator pos:line="136" pos:column="17">=<pos:position pos:line="136" pos:column="18"/></operator> <call><name pos:line="136" pos:column="19">safe_strdup<pos:position pos:line="136" pos:column="30"/></name> <argument_list pos:line="136" pos:column="31">(<argument><expr><name pos:line="136" pos:column="32">p<pos:position pos:line="136" pos:column="33"/></name></expr></argument>)<pos:position pos:line="136" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="35"/></expr_stmt></block></then>
  <else pos:line="137" pos:column="3">else
  <block pos:line="138" pos:column="3">{
    <comment type="block" pos:line="139" pos:column="5">/* Default search path from RFC1524 */</comment>
    <expr_stmt><expr><name pos:line="140" pos:column="5">MailcapPath<pos:position pos:line="140" pos:column="16"/></name> <operator pos:line="140" pos:column="17">=<pos:position pos:line="140" pos:column="18"/></operator> <call><name pos:line="140" pos:column="19">safe_strdup<pos:position pos:line="140" pos:column="30"/></name> <argument_list pos:line="140" pos:column="31">(<argument><expr><literal type="string" pos:line="140" pos:column="32">"~/.mailcap:"<pos:position pos:line="140" pos:column="45"/></literal> <name pos:line="140" pos:column="46">PKGDATADIR<pos:position pos:line="140" pos:column="56"/></name> <literal type="string" pos:line="140" pos:column="57">"/mailcap:"<pos:position pos:line="140" pos:column="68"/></literal> <name pos:line="140" pos:column="69">SYSCONFDIR<pos:position pos:line="140" pos:column="79"/></name> <literal type="string" pos:line="140" pos:column="80">"/mailcap:/etc/mailcap:/usr/etc/mailcap:/usr/local/etc/mailcap"<pos:position pos:line="140" pos:column="143"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="144"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="145"/></expr_stmt>
  }<pos:position pos:line="141" pos:column="4"/></block></else></if>

  <expr_stmt><expr><name pos:line="143" pos:column="3">Tempdir<pos:position pos:line="143" pos:column="10"/></name> <operator pos:line="143" pos:column="11">=<pos:position pos:line="143" pos:column="12"/></operator> <call><name pos:line="143" pos:column="13">safe_strdup<pos:position pos:line="143" pos:column="24"/></name> <argument_list pos:line="143" pos:column="25">(<argument><expr><ternary><condition><expr><operator pos:line="143" pos:column="26">(<pos:position pos:line="143" pos:column="27"/></operator><name pos:line="143" pos:column="27">p<pos:position pos:line="143" pos:column="28"/></name> <operator pos:line="143" pos:column="29">=<pos:position pos:line="143" pos:column="30"/></operator> <call><name pos:line="143" pos:column="31">getenv<pos:position pos:line="143" pos:column="37"/></name> <argument_list pos:line="143" pos:column="38">(<argument><expr><literal type="string" pos:line="143" pos:column="39">"TMPDIR"<pos:position pos:line="143" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="143" pos:column="48"/></argument_list></call><operator pos:line="143" pos:column="48">)<pos:position pos:line="143" pos:column="49"/></operator></expr> ?<pos:position pos:line="143" pos:column="51"/></condition><then pos:line="143" pos:column="51"> <expr><name pos:line="143" pos:column="52">p<pos:position pos:line="143" pos:column="53"/></name></expr> <pos:position pos:line="143" pos:column="54"/></then><else pos:line="143" pos:column="54">: <expr><literal type="string" pos:line="143" pos:column="56">"/tmp"<pos:position pos:line="143" pos:column="62"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="143" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="64"/></expr_stmt>

  <expr_stmt><expr><name pos:line="145" pos:column="3">p<pos:position pos:line="145" pos:column="4"/></name> <operator pos:line="145" pos:column="5">=<pos:position pos:line="145" pos:column="6"/></operator> <call><name pos:line="145" pos:column="7">getenv<pos:position pos:line="145" pos:column="13"/></name> <argument_list pos:line="145" pos:column="14">(<argument><expr><literal type="string" pos:line="145" pos:column="15">"VISUAL"<pos:position pos:line="145" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="25"/></expr_stmt>
  <if pos:line="146" pos:column="3">if <condition pos:line="146" pos:column="6">(<expr><operator pos:line="146" pos:column="7">!<pos:position pos:line="146" pos:column="8"/></operator><name pos:line="146" pos:column="8">p<pos:position pos:line="146" pos:column="9"/></name></expr>)<pos:position pos:line="146" pos:column="10"/></condition><then pos:line="146" pos:column="10">
  <block pos:line="147" pos:column="3">{
    <expr_stmt><expr><name pos:line="148" pos:column="5">p<pos:position pos:line="148" pos:column="6"/></name> <operator pos:line="148" pos:column="7">=<pos:position pos:line="148" pos:column="8"/></operator> <call><name pos:line="148" pos:column="9">getenv<pos:position pos:line="148" pos:column="15"/></name> <argument_list pos:line="148" pos:column="16">(<argument><expr><literal type="string" pos:line="148" pos:column="17">"EDITOR"<pos:position pos:line="148" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="27"/></expr_stmt>
    <if pos:line="149" pos:column="5">if <condition pos:line="149" pos:column="8">(<expr><operator pos:line="149" pos:column="9">!<pos:position pos:line="149" pos:column="10"/></operator><name pos:line="149" pos:column="10">p<pos:position pos:line="149" pos:column="11"/></name></expr>)<pos:position pos:line="149" pos:column="12"/></condition><then pos:line="149" pos:column="12">
      <block type="pseudo"><expr_stmt><expr><name pos:line="150" pos:column="7">p<pos:position pos:line="150" pos:column="8"/></name> <operator pos:line="150" pos:column="9">=<pos:position pos:line="150" pos:column="10"/></operator> <literal type="string" pos:line="150" pos:column="11">"vi"<pos:position pos:line="150" pos:column="15"/></literal></expr>;<pos:position pos:line="150" pos:column="16"/></expr_stmt></block></then></if>
  }<pos:position pos:line="151" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="152" pos:column="3">Editor<pos:position pos:line="152" pos:column="9"/></name> <operator pos:line="152" pos:column="10">=<pos:position pos:line="152" pos:column="11"/></operator> <call><name pos:line="152" pos:column="12">safe_strdup<pos:position pos:line="152" pos:column="23"/></name> <argument_list pos:line="152" pos:column="24">(<argument><expr><name pos:line="152" pos:column="25">p<pos:position pos:line="152" pos:column="26"/></name></expr></argument>)<pos:position pos:line="152" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="153" pos:column="3">Visual<pos:position pos:line="153" pos:column="9"/></name> <operator pos:line="153" pos:column="10">=<pos:position pos:line="153" pos:column="11"/></operator> <call><name pos:line="153" pos:column="12">safe_strdup<pos:position pos:line="153" pos:column="23"/></name> <argument_list pos:line="153" pos:column="24">(<argument><expr><name pos:line="153" pos:column="25">p<pos:position pos:line="153" pos:column="26"/></name></expr></argument>)<pos:position pos:line="153" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="28"/></expr_stmt>

  <if pos:line="155" pos:column="3">if <condition pos:line="155" pos:column="6">(<expr><operator pos:line="155" pos:column="7">(<pos:position pos:line="155" pos:column="8"/></operator><name pos:line="155" pos:column="8">p<pos:position pos:line="155" pos:column="9"/></name> <operator pos:line="155" pos:column="10">=<pos:position pos:line="155" pos:column="11"/></operator> <call><name pos:line="155" pos:column="12">getenv<pos:position pos:line="155" pos:column="18"/></name> <argument_list pos:line="155" pos:column="19">(<argument><expr><literal type="string" pos:line="155" pos:column="20">"REPLYTO"<pos:position pos:line="155" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="155" pos:column="30"/></argument_list></call><operator pos:line="155" pos:column="30">)<pos:position pos:line="155" pos:column="31"/></operator> <operator pos:line="155" pos:column="32">!=<pos:position pos:line="155" pos:column="34"/></operator> <name pos:line="155" pos:column="35">NULL<pos:position pos:line="155" pos:column="39"/></name></expr>)<pos:position pos:line="155" pos:column="40"/></condition><then pos:line="155" pos:column="40">
  <block pos:line="156" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="157" pos:column="5">BUFFER<pos:position pos:line="157" pos:column="11"/></name></type> <name pos:line="157" pos:column="12">buf<pos:position pos:line="157" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="157" pos:column="17">token<pos:position pos:line="157" pos:column="22"/></name></decl>;<pos:position pos:line="157" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="159" pos:column="5">snprintf<pos:position pos:line="159" pos:column="13"/></name> <argument_list pos:line="159" pos:column="14">(<argument><expr><name pos:line="159" pos:column="15">buffer<pos:position pos:line="159" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="159" pos:column="23">sizeof <argument_list pos:line="159" pos:column="30">(<argument><expr><name pos:line="159" pos:column="31">buffer<pos:position pos:line="159" pos:column="37"/></name></expr></argument>)<pos:position pos:line="159" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="159" pos:column="40">"Reply-To: %s"<pos:position pos:line="159" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="159" pos:column="56">p<pos:position pos:line="159" pos:column="57"/></name></expr></argument>)<pos:position pos:line="159" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="59"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="161" pos:column="5">mutt_buffer_init<pos:position pos:line="161" pos:column="21"/></name> <argument_list pos:line="161" pos:column="22">(<argument><expr><operator pos:line="161" pos:column="23">&amp;<pos:position pos:line="161" pos:column="28"/></operator><name pos:line="161" pos:column="24">buf<pos:position pos:line="161" pos:column="27"/></name></expr></argument>)<pos:position pos:line="161" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="162" pos:column="5">buf<pos:position pos:line="162" pos:column="8"/></name><operator pos:line="162" pos:column="8">.<pos:position pos:line="162" pos:column="9"/></operator><name pos:line="162" pos:column="9">data<pos:position pos:line="162" pos:column="13"/></name></name> <operator pos:line="162" pos:column="14">=<pos:position pos:line="162" pos:column="15"/></operator> <name><name pos:line="162" pos:column="16">buf<pos:position pos:line="162" pos:column="19"/></name><operator pos:line="162" pos:column="19">.<pos:position pos:line="162" pos:column="20"/></operator><name pos:line="162" pos:column="20">dptr<pos:position pos:line="162" pos:column="24"/></name></name> <operator pos:line="162" pos:column="25">=<pos:position pos:line="162" pos:column="26"/></operator> <name pos:line="162" pos:column="27">buffer<pos:position pos:line="162" pos:column="33"/></name></expr>;<pos:position pos:line="162" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="163" pos:column="5">buf<pos:position pos:line="163" pos:column="8"/></name><operator pos:line="163" pos:column="8">.<pos:position pos:line="163" pos:column="9"/></operator><name pos:line="163" pos:column="9">dsize<pos:position pos:line="163" pos:column="14"/></name></name> <operator pos:line="163" pos:column="15">=<pos:position pos:line="163" pos:column="16"/></operator> <call><name pos:line="163" pos:column="17">mutt_strlen<pos:position pos:line="163" pos:column="28"/></name> <argument_list pos:line="163" pos:column="29">(<argument><expr><name pos:line="163" pos:column="30">buffer<pos:position pos:line="163" pos:column="36"/></name></expr></argument>)<pos:position pos:line="163" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="38"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="165" pos:column="5">mutt_buffer_init<pos:position pos:line="165" pos:column="21"/></name> <argument_list pos:line="165" pos:column="22">(<argument><expr><operator pos:line="165" pos:column="23">&amp;<pos:position pos:line="165" pos:column="28"/></operator><name pos:line="165" pos:column="24">token<pos:position pos:line="165" pos:column="29"/></name></expr></argument>)<pos:position pos:line="165" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="166" pos:column="5">parse_my_hdr<pos:position pos:line="166" pos:column="17"/></name> <argument_list pos:line="166" pos:column="18">(<argument><expr><operator pos:line="166" pos:column="19">&amp;<pos:position pos:line="166" pos:column="24"/></operator><name pos:line="166" pos:column="20">token<pos:position pos:line="166" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="166" pos:column="27">&amp;<pos:position pos:line="166" pos:column="32"/></operator><name pos:line="166" pos:column="28">buf<pos:position pos:line="166" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="166" pos:column="33">0<pos:position pos:line="166" pos:column="34"/></literal></expr></argument>, <argument><expr><operator pos:line="166" pos:column="36">&amp;<pos:position pos:line="166" pos:column="41"/></operator><name pos:line="166" pos:column="37">err<pos:position pos:line="166" pos:column="40"/></name></expr></argument>)<pos:position pos:line="166" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="167" pos:column="5">FREE<pos:position pos:line="167" pos:column="9"/></name> <argument_list pos:line="167" pos:column="10">(<argument><expr><operator pos:line="167" pos:column="11">&amp;<pos:position pos:line="167" pos:column="16"/></operator><name><name pos:line="167" pos:column="12">token<pos:position pos:line="167" pos:column="17"/></name><operator pos:line="167" pos:column="17">.<pos:position pos:line="167" pos:column="18"/></operator><name pos:line="167" pos:column="18">data<pos:position pos:line="167" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="167" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="168" pos:column="4"/></block></then></if>

  <if pos:line="170" pos:column="3">if <condition pos:line="170" pos:column="6">(<expr><operator pos:line="170" pos:column="7">(<pos:position pos:line="170" pos:column="8"/></operator><name pos:line="170" pos:column="8">p<pos:position pos:line="170" pos:column="9"/></name> <operator pos:line="170" pos:column="10">=<pos:position pos:line="170" pos:column="11"/></operator> <call><name pos:line="170" pos:column="12">getenv<pos:position pos:line="170" pos:column="18"/></name> <argument_list pos:line="170" pos:column="19">(<argument><expr><literal type="string" pos:line="170" pos:column="20">"EMAIL"<pos:position pos:line="170" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="170" pos:column="28"/></argument_list></call><operator pos:line="170" pos:column="28">)<pos:position pos:line="170" pos:column="29"/></operator> <operator pos:line="170" pos:column="30">!=<pos:position pos:line="170" pos:column="32"/></operator> <name pos:line="170" pos:column="33">NULL<pos:position pos:line="170" pos:column="37"/></name></expr>)<pos:position pos:line="170" pos:column="38"/></condition><then pos:line="170" pos:column="38">
    <block type="pseudo"><expr_stmt><expr><name pos:line="171" pos:column="5">From<pos:position pos:line="171" pos:column="9"/></name> <operator pos:line="171" pos:column="10">=<pos:position pos:line="171" pos:column="11"/></operator> <call><name pos:line="171" pos:column="12">rfc822_parse_adrlist<pos:position pos:line="171" pos:column="32"/></name> <argument_list pos:line="171" pos:column="33">(<argument><expr><name pos:line="171" pos:column="34">NULL<pos:position pos:line="171" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="40">p<pos:position pos:line="171" pos:column="41"/></name></expr></argument>)<pos:position pos:line="171" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="43"/></expr_stmt></block></then></if>
  
  <expr_stmt><expr><call><name pos:line="173" pos:column="3">mutt_set_langinfo_charset<pos:position pos:line="173" pos:column="28"/></name> <argument_list pos:line="173" pos:column="29">()<pos:position pos:line="173" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="174" pos:column="3">mutt_set_charset<pos:position pos:line="174" pos:column="19"/></name> <argument_list pos:line="174" pos:column="20">(<argument><expr><name pos:line="174" pos:column="21">Charset<pos:position pos:line="174" pos:column="28"/></name></expr></argument>)<pos:position pos:line="174" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="30"/></expr_stmt>
  
  <expr_stmt><expr><name pos:line="176" pos:column="3">Matches<pos:position pos:line="176" pos:column="10"/></name> <operator pos:line="176" pos:column="11">=<pos:position pos:line="176" pos:column="12"/></operator> <call><name pos:line="176" pos:column="13">safe_calloc<pos:position pos:line="176" pos:column="24"/></name> <argument_list pos:line="176" pos:column="25">(<argument><expr><name pos:line="176" pos:column="26">Matches_listsize<pos:position pos:line="176" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="176" pos:column="44">sizeof <argument_list pos:line="176" pos:column="51">(<argument><expr><name pos:line="176" pos:column="52">char<pos:position pos:line="176" pos:column="56"/></name> <operator pos:line="176" pos:column="57">*<pos:position pos:line="176" pos:column="58"/></operator></expr></argument>)<pos:position pos:line="176" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="176" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="61"/></expr_stmt>
  
  <comment type="block" pos:line="178" pos:column="3">/* Set standard defaults */</comment>
  <for pos:line="179" pos:column="3">for <control pos:line="179" pos:column="7">(<init><expr><name pos:line="179" pos:column="8">i<pos:position pos:line="179" pos:column="9"/></name> <operator pos:line="179" pos:column="10">=<pos:position pos:line="179" pos:column="11"/></operator> <literal type="number" pos:line="179" pos:column="12">0<pos:position pos:line="179" pos:column="13"/></literal></expr>;<pos:position pos:line="179" pos:column="14"/></init> <condition><expr><name><name pos:line="179" pos:column="15">MuttVars<pos:position pos:line="179" pos:column="23"/></name><index pos:line="179" pos:column="23">[<expr><name pos:line="179" pos:column="24">i<pos:position pos:line="179" pos:column="25"/></name></expr>]<pos:position pos:line="179" pos:column="26"/></index></name><operator pos:line="179" pos:column="26">.<pos:position pos:line="179" pos:column="27"/></operator><name pos:line="179" pos:column="27">option<pos:position pos:line="179" pos:column="33"/></name></expr>;<pos:position pos:line="179" pos:column="34"/></condition> <incr><expr><name pos:line="179" pos:column="35">i<pos:position pos:line="179" pos:column="36"/></name><operator pos:line="179" pos:column="36">++<pos:position pos:line="179" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="179" pos:column="39"/></control>
  <block pos:line="180" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="181" pos:column="5">mutt_set_default<pos:position pos:line="181" pos:column="21"/></name> <argument_list pos:line="181" pos:column="22">(<argument><expr><operator pos:line="181" pos:column="23">&amp;<pos:position pos:line="181" pos:column="28"/></operator><name><name pos:line="181" pos:column="24">MuttVars<pos:position pos:line="181" pos:column="32"/></name><index pos:line="181" pos:column="32">[<expr><name pos:line="181" pos:column="33">i<pos:position pos:line="181" pos:column="34"/></name></expr>]<pos:position pos:line="181" pos:column="35"/></index></name></expr></argument>)<pos:position pos:line="181" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="182" pos:column="5">mutt_restore_default<pos:position pos:line="182" pos:column="25"/></name> <argument_list pos:line="182" pos:column="26">(<argument><expr><operator pos:line="182" pos:column="27">&amp;<pos:position pos:line="182" pos:column="32"/></operator><name><name pos:line="182" pos:column="28">MuttVars<pos:position pos:line="182" pos:column="36"/></name><index pos:line="182" pos:column="36">[<expr><name pos:line="182" pos:column="37">i<pos:position pos:line="182" pos:column="38"/></name></expr>]<pos:position pos:line="182" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="182" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="183" pos:column="4"/></block></for>

  <expr_stmt><expr><name pos:line="185" pos:column="3">CurrentMenu<pos:position pos:line="185" pos:column="14"/></name> <operator pos:line="185" pos:column="15">=<pos:position pos:line="185" pos:column="16"/></operator> <name pos:line="185" pos:column="17">MENU_MAIN<pos:position pos:line="185" pos:column="26"/></name></expr>;<pos:position pos:line="185" pos:column="27"/></expr_stmt>


<cpp:ifndef pos:line="188" pos:column="1">#<cpp:directive pos:line="188" pos:column="2">ifndef<pos:position pos:line="188" pos:column="8"/></cpp:directive> <name pos:line="188" pos:column="9">LOCALES_HACK<pos:position pos:line="188" pos:column="21"/></name></cpp:ifndef>
  <comment type="block" pos:line="189" pos:column="3">/* Do we have a locale definition? */</comment>
  <if pos:line="190" pos:column="3">if <condition pos:line="190" pos:column="6">(<expr><operator pos:line="190" pos:column="7">(<pos:position pos:line="190" pos:column="8"/></operator><operator pos:line="190" pos:column="8">(<pos:position pos:line="190" pos:column="9"/></operator><name pos:line="190" pos:column="9">p<pos:position pos:line="190" pos:column="10"/></name> <operator pos:line="190" pos:column="11">=<pos:position pos:line="190" pos:column="12"/></operator> <call><name pos:line="190" pos:column="13">getenv<pos:position pos:line="190" pos:column="19"/></name> <argument_list pos:line="190" pos:column="20">(<argument><expr><literal type="string" pos:line="190" pos:column="21">"LC_ALL"<pos:position pos:line="190" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="190" pos:column="30"/></argument_list></call><operator pos:line="190" pos:column="30">)<pos:position pos:line="190" pos:column="31"/></operator> <operator pos:line="190" pos:column="32">!=<pos:position pos:line="190" pos:column="34"/></operator> <name pos:line="190" pos:column="35">NULL<pos:position pos:line="190" pos:column="39"/></name> <operator pos:line="190" pos:column="40">&amp;&amp;<pos:position pos:line="190" pos:column="50"/></operator> <name><name pos:line="190" pos:column="43">p<pos:position pos:line="190" pos:column="44"/></name><index pos:line="190" pos:column="44">[<expr><literal type="number" pos:line="190" pos:column="45">0<pos:position pos:line="190" pos:column="46"/></literal></expr>]<pos:position pos:line="190" pos:column="47"/></index></name><operator pos:line="190" pos:column="47">)<pos:position pos:line="190" pos:column="48"/></operator> <operator pos:line="190" pos:column="49">||<pos:position pos:line="190" pos:column="51"/></operator>
      <operator pos:line="191" pos:column="7">(<pos:position pos:line="191" pos:column="8"/></operator><operator pos:line="191" pos:column="8">(<pos:position pos:line="191" pos:column="9"/></operator><name pos:line="191" pos:column="9">p<pos:position pos:line="191" pos:column="10"/></name> <operator pos:line="191" pos:column="11">=<pos:position pos:line="191" pos:column="12"/></operator> <call><name pos:line="191" pos:column="13">getenv<pos:position pos:line="191" pos:column="19"/></name> <argument_list pos:line="191" pos:column="20">(<argument><expr><literal type="string" pos:line="191" pos:column="21">"LANG"<pos:position pos:line="191" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="191" pos:column="28"/></argument_list></call><operator pos:line="191" pos:column="28">)<pos:position pos:line="191" pos:column="29"/></operator> <operator pos:line="191" pos:column="30">!=<pos:position pos:line="191" pos:column="32"/></operator> <name pos:line="191" pos:column="33">NULL<pos:position pos:line="191" pos:column="37"/></name> <operator pos:line="191" pos:column="38">&amp;&amp;<pos:position pos:line="191" pos:column="48"/></operator> <name><name pos:line="191" pos:column="41">p<pos:position pos:line="191" pos:column="42"/></name><index pos:line="191" pos:column="42">[<expr><literal type="number" pos:line="191" pos:column="43">0<pos:position pos:line="191" pos:column="44"/></literal></expr>]<pos:position pos:line="191" pos:column="45"/></index></name><operator pos:line="191" pos:column="45">)<pos:position pos:line="191" pos:column="46"/></operator> <operator pos:line="191" pos:column="47">||<pos:position pos:line="191" pos:column="49"/></operator>
      <operator pos:line="192" pos:column="7">(<pos:position pos:line="192" pos:column="8"/></operator><operator pos:line="192" pos:column="8">(<pos:position pos:line="192" pos:column="9"/></operator><name pos:line="192" pos:column="9">p<pos:position pos:line="192" pos:column="10"/></name> <operator pos:line="192" pos:column="11">=<pos:position pos:line="192" pos:column="12"/></operator> <call><name pos:line="192" pos:column="13">getenv<pos:position pos:line="192" pos:column="19"/></name> <argument_list pos:line="192" pos:column="20">(<argument><expr><literal type="string" pos:line="192" pos:column="21">"LC_CTYPE"<pos:position pos:line="192" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="192" pos:column="32"/></argument_list></call><operator pos:line="192" pos:column="32">)<pos:position pos:line="192" pos:column="33"/></operator> <operator pos:line="192" pos:column="34">!=<pos:position pos:line="192" pos:column="36"/></operator> <name pos:line="192" pos:column="37">NULL<pos:position pos:line="192" pos:column="41"/></name> <operator pos:line="192" pos:column="42">&amp;&amp;<pos:position pos:line="192" pos:column="52"/></operator> <name><name pos:line="192" pos:column="45">p<pos:position pos:line="192" pos:column="46"/></name><index pos:line="192" pos:column="46">[<expr><literal type="number" pos:line="192" pos:column="47">0<pos:position pos:line="192" pos:column="48"/></literal></expr>]<pos:position pos:line="192" pos:column="49"/></index></name><operator pos:line="192" pos:column="49">)<pos:position pos:line="192" pos:column="50"/></operator></expr>)<pos:position pos:line="192" pos:column="51"/></condition><then pos:line="192" pos:column="51">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="193" pos:column="5">set_option<pos:position pos:line="193" pos:column="15"/></name> <argument_list pos:line="193" pos:column="16">(<argument><expr><name pos:line="193" pos:column="17">OPTLOCALES<pos:position pos:line="193" pos:column="27"/></name></expr></argument>)<pos:position pos:line="193" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="29"/></expr_stmt></block></then></if>
<cpp:endif pos:line="194" pos:column="1">#<cpp:directive pos:line="194" pos:column="2">endif<pos:position pos:line="194" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="196" pos:column="1">#<cpp:directive pos:line="196" pos:column="2">ifdef<pos:position pos:line="196" pos:column="7"/></cpp:directive> <name pos:line="196" pos:column="8">HAVE_GETSID<pos:position pos:line="196" pos:column="19"/></name></cpp:ifdef>
  <comment type="block" pos:line="197" pos:column="3">/* Unset suspend by default if we're the session leader */</comment>
  <if pos:line="198" pos:column="3">if <condition pos:line="198" pos:column="6">(<expr><call><name pos:line="198" pos:column="7">getsid<pos:position pos:line="198" pos:column="13"/></name><argument_list pos:line="198" pos:column="13">(<argument><expr><literal type="number" pos:line="198" pos:column="14">0<pos:position pos:line="198" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="198" pos:column="16"/></argument_list></call> <operator pos:line="198" pos:column="17">==<pos:position pos:line="198" pos:column="19"/></operator> <call><name pos:line="198" pos:column="20">getpid<pos:position pos:line="198" pos:column="26"/></name><argument_list pos:line="198" pos:column="26">()<pos:position pos:line="198" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="198" pos:column="29"/></condition><then pos:line="198" pos:column="29">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="199" pos:column="5">unset_option<pos:position pos:line="199" pos:column="17"/></name> <argument_list pos:line="199" pos:column="18">(<argument><expr><name pos:line="199" pos:column="19">OPTSUSPEND<pos:position pos:line="199" pos:column="29"/></name></expr></argument>)<pos:position pos:line="199" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="31"/></expr_stmt></block></then></if>
<cpp:endif pos:line="200" pos:column="1">#<cpp:directive pos:line="200" pos:column="2">endif<pos:position pos:line="200" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="202" pos:column="3">mutt_init_history<pos:position pos:line="202" pos:column="20"/></name> <argument_list pos:line="202" pos:column="21">()<pos:position pos:line="202" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="204" pos:column="3">/* RFC2368, "4. Unsafe headers"
   * The creator of a mailto URL cannot expect the resolver of a URL to
   * understand more than the "subject" and "body" headers. Clients that
   * resolve mailto URLs into mail messages should be able to correctly
   * create RFC 822-compliant mail messages using the "subject" and "body"
   * headers.
   */</comment>
  <expr_stmt><expr><call><name pos:line="211" pos:column="3">add_to_list<pos:position pos:line="211" pos:column="14"/></name><argument_list pos:line="211" pos:column="14">(<argument><expr><operator pos:line="211" pos:column="15">&amp;<pos:position pos:line="211" pos:column="20"/></operator><name pos:line="211" pos:column="16">MailtoAllow<pos:position pos:line="211" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="211" pos:column="29">"body"<pos:position pos:line="211" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="211" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="212" pos:column="3">add_to_list<pos:position pos:line="212" pos:column="14"/></name><argument_list pos:line="212" pos:column="14">(<argument><expr><operator pos:line="212" pos:column="15">&amp;<pos:position pos:line="212" pos:column="20"/></operator><name pos:line="212" pos:column="16">MailtoAllow<pos:position pos:line="212" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="212" pos:column="29">"subject"<pos:position pos:line="212" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="212" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="40"/></expr_stmt>
  
  
  
  <comment type="block" pos:line="216" pos:column="3">/*
   * 
   *			   BIG FAT WARNING
   * 
   * When changing the code which looks for a configuration file,
   * please also change the corresponding code in muttbug.sh.in.
   * 
   * 
   */</comment>

  <if pos:line="226" pos:column="3">if <condition pos:line="226" pos:column="6">(<expr><operator pos:line="226" pos:column="7">!<pos:position pos:line="226" pos:column="8"/></operator><name pos:line="226" pos:column="8">Muttrc<pos:position pos:line="226" pos:column="14"/></name></expr>)<pos:position pos:line="226" pos:column="15"/></condition><then pos:line="226" pos:column="15">
  <block pos:line="227" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="228" pos:column="5">char<pos:position pos:line="228" pos:column="9"/></name> <modifier pos:line="228" pos:column="10">*<pos:position pos:line="228" pos:column="11"/></modifier></type><name pos:line="228" pos:column="11">xdg_cfg_home<pos:position pos:line="228" pos:column="23"/></name> <init pos:line="228" pos:column="24">= <expr><call><name pos:line="228" pos:column="26">getenv<pos:position pos:line="228" pos:column="32"/></name> <argument_list pos:line="228" pos:column="33">(<argument><expr><literal type="string" pos:line="228" pos:column="34">"XDG_CONFIG_HOME"<pos:position pos:line="228" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="228" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="228" pos:column="53"/></decl_stmt>

    <if pos:line="230" pos:column="5">if <condition pos:line="230" pos:column="8">(<expr><operator pos:line="230" pos:column="9">!<pos:position pos:line="230" pos:column="10"/></operator><name pos:line="230" pos:column="10">xdg_cfg_home<pos:position pos:line="230" pos:column="22"/></name> <operator pos:line="230" pos:column="23">&amp;&amp;<pos:position pos:line="230" pos:column="33"/></operator> <name pos:line="230" pos:column="26">Homedir<pos:position pos:line="230" pos:column="33"/></name></expr>)<pos:position pos:line="230" pos:column="34"/></condition><then pos:line="230" pos:column="34">
    <block pos:line="231" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="232" pos:column="7">snprintf<pos:position pos:line="232" pos:column="15"/></name> <argument_list pos:line="232" pos:column="16">(<argument><expr><name pos:line="232" pos:column="17">buffer<pos:position pos:line="232" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="232" pos:column="25">sizeof <argument_list pos:line="232" pos:column="32">(<argument><expr><name pos:line="232" pos:column="33">buffer<pos:position pos:line="232" pos:column="39"/></name></expr></argument>)<pos:position pos:line="232" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="232" pos:column="42">"%s/.config"<pos:position pos:line="232" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="232" pos:column="56">Homedir<pos:position pos:line="232" pos:column="63"/></name></expr></argument>)<pos:position pos:line="232" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="65"/></expr_stmt>
      <expr_stmt><expr><name pos:line="233" pos:column="7">xdg_cfg_home<pos:position pos:line="233" pos:column="19"/></name> <operator pos:line="233" pos:column="20">=<pos:position pos:line="233" pos:column="21"/></operator> <name pos:line="233" pos:column="22">buffer<pos:position pos:line="233" pos:column="28"/></name></expr>;<pos:position pos:line="233" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="234" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="236" pos:column="5">Muttrc<pos:position pos:line="236" pos:column="11"/></name> <operator pos:line="236" pos:column="12">=<pos:position pos:line="236" pos:column="13"/></operator> <call><name pos:line="236" pos:column="14">mutt_find_cfg<pos:position pos:line="236" pos:column="27"/></name> <argument_list pos:line="236" pos:column="28">(<argument><expr><name pos:line="236" pos:column="29">Homedir<pos:position pos:line="236" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="236" pos:column="38">xdg_cfg_home<pos:position pos:line="236" pos:column="50"/></name></expr></argument>)<pos:position pos:line="236" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="52"/></expr_stmt>
  }<pos:position pos:line="237" pos:column="4"/></block></then>
  <else pos:line="238" pos:column="3">else
  <block pos:line="239" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="240" pos:column="5">strfcpy<pos:position pos:line="240" pos:column="12"/></name> <argument_list pos:line="240" pos:column="13">(<argument><expr><name pos:line="240" pos:column="14">buffer<pos:position pos:line="240" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="240" pos:column="22">Muttrc<pos:position pos:line="240" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="240" pos:column="30">sizeof <argument_list pos:line="240" pos:column="37">(<argument><expr><name pos:line="240" pos:column="38">buffer<pos:position pos:line="240" pos:column="44"/></name></expr></argument>)<pos:position pos:line="240" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="240" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="241" pos:column="5">FREE<pos:position pos:line="241" pos:column="9"/></name> <argument_list pos:line="241" pos:column="10">(<argument><expr><operator pos:line="241" pos:column="11">&amp;<pos:position pos:line="241" pos:column="16"/></operator><name pos:line="241" pos:column="12">Muttrc<pos:position pos:line="241" pos:column="18"/></name></expr></argument>)<pos:position pos:line="241" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="241" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="242" pos:column="5">mutt_expand_path<pos:position pos:line="242" pos:column="21"/></name> <argument_list pos:line="242" pos:column="22">(<argument><expr><name pos:line="242" pos:column="23">buffer<pos:position pos:line="242" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="242" pos:column="31">sizeof <argument_list pos:line="242" pos:column="38">(<argument><expr><name pos:line="242" pos:column="39">buffer<pos:position pos:line="242" pos:column="45"/></name></expr></argument>)<pos:position pos:line="242" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="242" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name pos:line="243" pos:column="5">Muttrc<pos:position pos:line="243" pos:column="11"/></name> <operator pos:line="243" pos:column="12">=<pos:position pos:line="243" pos:column="13"/></operator> <call><name pos:line="243" pos:column="14">safe_strdup<pos:position pos:line="243" pos:column="25"/></name> <argument_list pos:line="243" pos:column="26">(<argument><expr><name pos:line="243" pos:column="27">buffer<pos:position pos:line="243" pos:column="33"/></name></expr></argument>)<pos:position pos:line="243" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="243" pos:column="35"/></expr_stmt>
    <if pos:line="244" pos:column="5">if <condition pos:line="244" pos:column="8">(<expr><call><name pos:line="244" pos:column="9">access<pos:position pos:line="244" pos:column="15"/></name> <argument_list pos:line="244" pos:column="16">(<argument><expr><name pos:line="244" pos:column="17">Muttrc<pos:position pos:line="244" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="244" pos:column="25">F_OK<pos:position pos:line="244" pos:column="29"/></name></expr></argument>)<pos:position pos:line="244" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="244" pos:column="31"/></condition><then pos:line="244" pos:column="31">
    <block pos:line="245" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="246" pos:column="7">snprintf<pos:position pos:line="246" pos:column="15"/></name> <argument_list pos:line="246" pos:column="16">(<argument><expr><name pos:line="246" pos:column="17">buffer<pos:position pos:line="246" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="246" pos:column="25">sizeof <argument_list pos:line="246" pos:column="32">(<argument><expr><name pos:line="246" pos:column="33">buffer<pos:position pos:line="246" pos:column="39"/></name></expr></argument>)<pos:position pos:line="246" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="246" pos:column="42">"%s: %s"<pos:position pos:line="246" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="246" pos:column="52">Muttrc<pos:position pos:line="246" pos:column="58"/></name></expr></argument>, <argument><expr><call><name pos:line="246" pos:column="60">strerror<pos:position pos:line="246" pos:column="68"/></name> <argument_list pos:line="246" pos:column="69">(<argument><expr><name pos:line="246" pos:column="70">errno<pos:position pos:line="246" pos:column="75"/></name></expr></argument>)<pos:position pos:line="246" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="246" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="246" pos:column="78"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="247" pos:column="7">mutt_endwin<pos:position pos:line="247" pos:column="18"/></name> <argument_list pos:line="247" pos:column="19">(<argument><expr><name pos:line="247" pos:column="20">buffer<pos:position pos:line="247" pos:column="26"/></name></expr></argument>)<pos:position pos:line="247" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="247" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="248" pos:column="7">exit<pos:position pos:line="248" pos:column="11"/></name> <argument_list pos:line="248" pos:column="12">(<argument><expr><literal type="number" pos:line="248" pos:column="13">1<pos:position pos:line="248" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="248" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="248" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="249" pos:column="6"/></block></then></if>
  }<pos:position pos:line="250" pos:column="4"/></block></else></if>

  <if pos:line="252" pos:column="3">if <condition pos:line="252" pos:column="6">(<expr><name pos:line="252" pos:column="7">Muttrc<pos:position pos:line="252" pos:column="13"/></name></expr>)<pos:position pos:line="252" pos:column="14"/></condition><then pos:line="252" pos:column="14">
  <block pos:line="253" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="254" pos:column="5">FREE<pos:position pos:line="254" pos:column="9"/></name> <argument_list pos:line="254" pos:column="10">(<argument><expr><operator pos:line="254" pos:column="11">&amp;<pos:position pos:line="254" pos:column="16"/></operator><name pos:line="254" pos:column="12">AliasFile<pos:position pos:line="254" pos:column="21"/></name></expr></argument>)<pos:position pos:line="254" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="254" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="255" pos:column="5">AliasFile<pos:position pos:line="255" pos:column="14"/></name> <operator pos:line="255" pos:column="15">=<pos:position pos:line="255" pos:column="16"/></operator> <call><name pos:line="255" pos:column="17">safe_strdup<pos:position pos:line="255" pos:column="28"/></name> <argument_list pos:line="255" pos:column="29">(<argument><expr><name pos:line="255" pos:column="30">Muttrc<pos:position pos:line="255" pos:column="36"/></name></expr></argument>)<pos:position pos:line="255" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="255" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="256" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="258" pos:column="3">/* Process the global rc file if it exists and the user hasn't explicity
     requested not to via "-n".  */</comment>
  <if pos:line="260" pos:column="3">if <condition pos:line="260" pos:column="6">(<expr><operator pos:line="260" pos:column="7">!<pos:position pos:line="260" pos:column="8"/></operator><name pos:line="260" pos:column="8">skip_sys_rc<pos:position pos:line="260" pos:column="19"/></name></expr>)<pos:position pos:line="260" pos:column="20"/></condition><then pos:line="260" pos:column="20">
  <block pos:line="261" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="262" pos:column="5">snprintf<pos:position pos:line="262" pos:column="13"/></name> <argument_list pos:line="262" pos:column="14">(<argument><expr><name pos:line="262" pos:column="15">buffer<pos:position pos:line="262" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="262" pos:column="23">sizeof<argument_list pos:line="262" pos:column="29">(<argument><expr><name pos:line="262" pos:column="30">buffer<pos:position pos:line="262" pos:column="36"/></name></expr></argument>)<pos:position pos:line="262" pos:column="37"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="262" pos:column="39">"%s/Muttrc-%s"<pos:position pos:line="262" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="262" pos:column="55">SYSCONFDIR<pos:position pos:line="262" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="262" pos:column="67">MUTT_VERSION<pos:position pos:line="262" pos:column="79"/></name></expr></argument>)<pos:position pos:line="262" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="262" pos:column="81"/></expr_stmt>
    <if pos:line="263" pos:column="5">if <condition pos:line="263" pos:column="8">(<expr><call><name pos:line="263" pos:column="9">access<pos:position pos:line="263" pos:column="15"/></name> <argument_list pos:line="263" pos:column="16">(<argument><expr><name pos:line="263" pos:column="17">buffer<pos:position pos:line="263" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="263" pos:column="25">F_OK<pos:position pos:line="263" pos:column="29"/></name></expr></argument>)<pos:position pos:line="263" pos:column="30"/></argument_list></call> <operator pos:line="263" pos:column="31">==<pos:position pos:line="263" pos:column="33"/></operator> <operator pos:line="263" pos:column="34">-<pos:position pos:line="263" pos:column="35"/></operator><literal type="number" pos:line="263" pos:column="35">1<pos:position pos:line="263" pos:column="36"/></literal></expr>)<pos:position pos:line="263" pos:column="37"/></condition><then pos:line="263" pos:column="37">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="264" pos:column="7">snprintf<pos:position pos:line="264" pos:column="15"/></name> <argument_list pos:line="264" pos:column="16">(<argument><expr><name pos:line="264" pos:column="17">buffer<pos:position pos:line="264" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="264" pos:column="25">sizeof<argument_list pos:line="264" pos:column="31">(<argument><expr><name pos:line="264" pos:column="32">buffer<pos:position pos:line="264" pos:column="38"/></name></expr></argument>)<pos:position pos:line="264" pos:column="39"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="264" pos:column="41">"%s/Muttrc"<pos:position pos:line="264" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="264" pos:column="54">SYSCONFDIR<pos:position pos:line="264" pos:column="64"/></name></expr></argument>)<pos:position pos:line="264" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="264" pos:column="66"/></expr_stmt></block></then></if>
    <if pos:line="265" pos:column="5">if <condition pos:line="265" pos:column="8">(<expr><call><name pos:line="265" pos:column="9">access<pos:position pos:line="265" pos:column="15"/></name> <argument_list pos:line="265" pos:column="16">(<argument><expr><name pos:line="265" pos:column="17">buffer<pos:position pos:line="265" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="265" pos:column="25">F_OK<pos:position pos:line="265" pos:column="29"/></name></expr></argument>)<pos:position pos:line="265" pos:column="30"/></argument_list></call> <operator pos:line="265" pos:column="31">==<pos:position pos:line="265" pos:column="33"/></operator> <operator pos:line="265" pos:column="34">-<pos:position pos:line="265" pos:column="35"/></operator><literal type="number" pos:line="265" pos:column="35">1<pos:position pos:line="265" pos:column="36"/></literal></expr>)<pos:position pos:line="265" pos:column="37"/></condition><then pos:line="265" pos:column="37">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="266" pos:column="7">snprintf<pos:position pos:line="266" pos:column="15"/></name> <argument_list pos:line="266" pos:column="16">(<argument><expr><name pos:line="266" pos:column="17">buffer<pos:position pos:line="266" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="266" pos:column="25">sizeof <argument_list pos:line="266" pos:column="32">(<argument><expr><name pos:line="266" pos:column="33">buffer<pos:position pos:line="266" pos:column="39"/></name></expr></argument>)<pos:position pos:line="266" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="266" pos:column="42">"%s/Muttrc-%s"<pos:position pos:line="266" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="266" pos:column="58">PKGDATADIR<pos:position pos:line="266" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="266" pos:column="70">MUTT_VERSION<pos:position pos:line="266" pos:column="82"/></name></expr></argument>)<pos:position pos:line="266" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="266" pos:column="84"/></expr_stmt></block></then></if>
    <if pos:line="267" pos:column="5">if <condition pos:line="267" pos:column="8">(<expr><call><name pos:line="267" pos:column="9">access<pos:position pos:line="267" pos:column="15"/></name> <argument_list pos:line="267" pos:column="16">(<argument><expr><name pos:line="267" pos:column="17">buffer<pos:position pos:line="267" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="267" pos:column="25">F_OK<pos:position pos:line="267" pos:column="29"/></name></expr></argument>)<pos:position pos:line="267" pos:column="30"/></argument_list></call> <operator pos:line="267" pos:column="31">==<pos:position pos:line="267" pos:column="33"/></operator> <operator pos:line="267" pos:column="34">-<pos:position pos:line="267" pos:column="35"/></operator><literal type="number" pos:line="267" pos:column="35">1<pos:position pos:line="267" pos:column="36"/></literal></expr>)<pos:position pos:line="267" pos:column="37"/></condition><then pos:line="267" pos:column="37">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="268" pos:column="7">snprintf<pos:position pos:line="268" pos:column="15"/></name> <argument_list pos:line="268" pos:column="16">(<argument><expr><name pos:line="268" pos:column="17">buffer<pos:position pos:line="268" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="268" pos:column="25">sizeof <argument_list pos:line="268" pos:column="32">(<argument><expr><name pos:line="268" pos:column="33">buffer<pos:position pos:line="268" pos:column="39"/></name></expr></argument>)<pos:position pos:line="268" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="268" pos:column="42">"%s/Muttrc"<pos:position pos:line="268" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="268" pos:column="55">PKGDATADIR<pos:position pos:line="268" pos:column="65"/></name></expr></argument>)<pos:position pos:line="268" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="268" pos:column="67"/></expr_stmt></block></then></if>
    <if pos:line="269" pos:column="5">if <condition pos:line="269" pos:column="8">(<expr><call><name pos:line="269" pos:column="9">access<pos:position pos:line="269" pos:column="15"/></name> <argument_list pos:line="269" pos:column="16">(<argument><expr><name pos:line="269" pos:column="17">buffer<pos:position pos:line="269" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="269" pos:column="25">F_OK<pos:position pos:line="269" pos:column="29"/></name></expr></argument>)<pos:position pos:line="269" pos:column="30"/></argument_list></call> <operator pos:line="269" pos:column="31">!=<pos:position pos:line="269" pos:column="33"/></operator> <operator pos:line="269" pos:column="34">-<pos:position pos:line="269" pos:column="35"/></operator><literal type="number" pos:line="269" pos:column="35">1<pos:position pos:line="269" pos:column="36"/></literal></expr>)<pos:position pos:line="269" pos:column="37"/></condition><then pos:line="269" pos:column="37">
    <block pos:line="270" pos:column="5">{
      <if pos:line="271" pos:column="7">if <condition pos:line="271" pos:column="10">(<expr><call><name pos:line="271" pos:column="11">source_rc<pos:position pos:line="271" pos:column="20"/></name> <argument_list pos:line="271" pos:column="21">(<argument><expr><name pos:line="271" pos:column="22">buffer<pos:position pos:line="271" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="271" pos:column="30">&amp;<pos:position pos:line="271" pos:column="35"/></operator><name pos:line="271" pos:column="31">err<pos:position pos:line="271" pos:column="34"/></name></expr></argument>)<pos:position pos:line="271" pos:column="35"/></argument_list></call> <operator pos:line="271" pos:column="36">!=<pos:position pos:line="271" pos:column="38"/></operator> <literal type="number" pos:line="271" pos:column="39">0<pos:position pos:line="271" pos:column="40"/></literal></expr>)<pos:position pos:line="271" pos:column="41"/></condition><then pos:line="271" pos:column="41">
      <block pos:line="272" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="273" pos:column="9">fputs<pos:position pos:line="273" pos:column="14"/></name> <argument_list pos:line="273" pos:column="15">(<argument><expr><name><name pos:line="273" pos:column="16">err<pos:position pos:line="273" pos:column="19"/></name><operator pos:line="273" pos:column="19">.<pos:position pos:line="273" pos:column="20"/></operator><name pos:line="273" pos:column="20">data<pos:position pos:line="273" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="273" pos:column="26">stderr<pos:position pos:line="273" pos:column="32"/></name></expr></argument>)<pos:position pos:line="273" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="273" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="274" pos:column="9">fputc<pos:position pos:line="274" pos:column="14"/></name> <argument_list pos:line="274" pos:column="15">(<argument><expr><literal type="char" pos:line="274" pos:column="16">'\n'<pos:position pos:line="274" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="274" pos:column="22">stderr<pos:position pos:line="274" pos:column="28"/></name></expr></argument>)<pos:position pos:line="274" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="274" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name pos:line="275" pos:column="9">need_pause<pos:position pos:line="275" pos:column="19"/></name> <operator pos:line="275" pos:column="20">=<pos:position pos:line="275" pos:column="21"/></operator> <literal type="number" pos:line="275" pos:column="22">1<pos:position pos:line="275" pos:column="23"/></literal></expr>;<pos:position pos:line="275" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="276" pos:column="8"/></block></then></if>
    }<pos:position pos:line="277" pos:column="6"/></block></then></if>
  }<pos:position pos:line="278" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="280" pos:column="3">/* Read the user's initialization file.  */</comment>
  <if pos:line="281" pos:column="3">if <condition pos:line="281" pos:column="6">(<expr><name pos:line="281" pos:column="7">Muttrc<pos:position pos:line="281" pos:column="13"/></name></expr>)<pos:position pos:line="281" pos:column="14"/></condition><then pos:line="281" pos:column="14">
  <block pos:line="282" pos:column="3">{
    <if pos:line="283" pos:column="5">if <condition pos:line="283" pos:column="8">(<expr><operator pos:line="283" pos:column="9">!<pos:position pos:line="283" pos:column="10"/></operator><call><name pos:line="283" pos:column="10">option<pos:position pos:line="283" pos:column="16"/></name> <argument_list pos:line="283" pos:column="17">(<argument><expr><name pos:line="283" pos:column="18">OPTNOCURSES<pos:position pos:line="283" pos:column="29"/></name></expr></argument>)<pos:position pos:line="283" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="283" pos:column="31"/></condition><then pos:line="283" pos:column="31">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="284" pos:column="7">endwin<pos:position pos:line="284" pos:column="13"/></name> <argument_list pos:line="284" pos:column="14">()<pos:position pos:line="284" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="284" pos:column="17"/></expr_stmt></block></then></if>
    <if pos:line="285" pos:column="5">if <condition pos:line="285" pos:column="8">(<expr><call><name pos:line="285" pos:column="9">source_rc<pos:position pos:line="285" pos:column="18"/></name> <argument_list pos:line="285" pos:column="19">(<argument><expr><name pos:line="285" pos:column="20">Muttrc<pos:position pos:line="285" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="285" pos:column="28">&amp;<pos:position pos:line="285" pos:column="33"/></operator><name pos:line="285" pos:column="29">err<pos:position pos:line="285" pos:column="32"/></name></expr></argument>)<pos:position pos:line="285" pos:column="33"/></argument_list></call> <operator pos:line="285" pos:column="34">!=<pos:position pos:line="285" pos:column="36"/></operator> <literal type="number" pos:line="285" pos:column="37">0<pos:position pos:line="285" pos:column="38"/></literal></expr>)<pos:position pos:line="285" pos:column="39"/></condition><then pos:line="285" pos:column="39">
    <block pos:line="286" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="287" pos:column="7">fputs<pos:position pos:line="287" pos:column="12"/></name> <argument_list pos:line="287" pos:column="13">(<argument><expr><name><name pos:line="287" pos:column="14">err<pos:position pos:line="287" pos:column="17"/></name><operator pos:line="287" pos:column="17">.<pos:position pos:line="287" pos:column="18"/></operator><name pos:line="287" pos:column="18">data<pos:position pos:line="287" pos:column="22"/></name></name></expr></argument>, <argument><expr><name pos:line="287" pos:column="24">stderr<pos:position pos:line="287" pos:column="30"/></name></expr></argument>)<pos:position pos:line="287" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="287" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="288" pos:column="7">fputc<pos:position pos:line="288" pos:column="12"/></name> <argument_list pos:line="288" pos:column="13">(<argument><expr><literal type="char" pos:line="288" pos:column="14">'\n'<pos:position pos:line="288" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="288" pos:column="20">stderr<pos:position pos:line="288" pos:column="26"/></name></expr></argument>)<pos:position pos:line="288" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="288" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name pos:line="289" pos:column="7">need_pause<pos:position pos:line="289" pos:column="17"/></name> <operator pos:line="289" pos:column="18">=<pos:position pos:line="289" pos:column="19"/></operator> <literal type="number" pos:line="289" pos:column="20">1<pos:position pos:line="289" pos:column="21"/></literal></expr>;<pos:position pos:line="289" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="290" pos:column="6"/></block></then></if>
  }<pos:position pos:line="291" pos:column="4"/></block></then></if>

  <if pos:line="293" pos:column="3">if <condition pos:line="293" pos:column="6">(<expr><call><name pos:line="293" pos:column="7">mutt_execute_commands<pos:position pos:line="293" pos:column="28"/></name> <argument_list pos:line="293" pos:column="29">(<argument><expr><name pos:line="293" pos:column="30">commands<pos:position pos:line="293" pos:column="38"/></name></expr></argument>)<pos:position pos:line="293" pos:column="39"/></argument_list></call> <operator pos:line="293" pos:column="40">!=<pos:position pos:line="293" pos:column="42"/></operator> <literal type="number" pos:line="293" pos:column="43">0<pos:position pos:line="293" pos:column="44"/></literal></expr>)<pos:position pos:line="293" pos:column="45"/></condition><then pos:line="293" pos:column="45">
    <block type="pseudo"><expr_stmt><expr><name pos:line="294" pos:column="5">need_pause<pos:position pos:line="294" pos:column="15"/></name> <operator pos:line="294" pos:column="16">=<pos:position pos:line="294" pos:column="17"/></operator> <literal type="number" pos:line="294" pos:column="18">1<pos:position pos:line="294" pos:column="19"/></literal></expr>;<pos:position pos:line="294" pos:column="20"/></expr_stmt></block></then></if>

  <if pos:line="296" pos:column="3">if <condition pos:line="296" pos:column="6">(<expr><name pos:line="296" pos:column="7">need_pause<pos:position pos:line="296" pos:column="17"/></name> <operator pos:line="296" pos:column="18">&amp;&amp;<pos:position pos:line="296" pos:column="28"/></operator> <operator pos:line="296" pos:column="21">!<pos:position pos:line="296" pos:column="22"/></operator><call><name pos:line="296" pos:column="22">option<pos:position pos:line="296" pos:column="28"/></name> <argument_list pos:line="296" pos:column="29">(<argument><expr><name pos:line="296" pos:column="30">OPTNOCURSES<pos:position pos:line="296" pos:column="41"/></name></expr></argument>)<pos:position pos:line="296" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="296" pos:column="43"/></condition><then pos:line="296" pos:column="43">
  <block pos:line="297" pos:column="3">{
    <if pos:line="298" pos:column="5">if <condition pos:line="298" pos:column="8">(<expr><call><name pos:line="298" pos:column="9">mutt_any_key_to_continue<pos:position pos:line="298" pos:column="33"/></name> <argument_list pos:line="298" pos:column="34">(<argument><expr><name pos:line="298" pos:column="35">NULL<pos:position pos:line="298" pos:column="39"/></name></expr></argument>)<pos:position pos:line="298" pos:column="40"/></argument_list></call> <operator pos:line="298" pos:column="41">==<pos:position pos:line="298" pos:column="43"/></operator> <operator pos:line="298" pos:column="44">-<pos:position pos:line="298" pos:column="45"/></operator><literal type="number" pos:line="298" pos:column="45">1<pos:position pos:line="298" pos:column="46"/></literal></expr>)<pos:position pos:line="298" pos:column="47"/></condition><then pos:line="298" pos:column="47">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="299" pos:column="7">mutt_exit<pos:position pos:line="299" pos:column="16"/></name><argument_list pos:line="299" pos:column="16">(<argument><expr><literal type="number" pos:line="299" pos:column="17">1<pos:position pos:line="299" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="299" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="299" pos:column="20"/></expr_stmt></block></then></if>
  }<pos:position pos:line="300" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="302" pos:column="3">mutt_read_histfile<pos:position pos:line="302" pos:column="21"/></name> <argument_list pos:line="302" pos:column="22">()<pos:position pos:line="302" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="302" pos:column="25"/></expr_stmt>

<cpp:if pos:line="304" pos:column="1">#<cpp:directive pos:line="304" pos:column="2">if<pos:position pos:line="304" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="304" pos:column="5">0<pos:position pos:line="304" pos:column="6"/></literal></expr></cpp:if>
  set_option (OPTWEED); <comment type="block" pos:line="305" pos:column="25">/* turn weeding on by default */</comment>
<cpp:endif pos:line="306" pos:column="1">#<cpp:directive pos:line="306" pos:column="2">endif<pos:position pos:line="306" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="308" pos:column="3">FREE<pos:position pos:line="308" pos:column="7"/></name> <argument_list pos:line="308" pos:column="8">(<argument><expr><operator pos:line="308" pos:column="9">&amp;<pos:position pos:line="308" pos:column="14"/></operator><name><name pos:line="308" pos:column="10">err<pos:position pos:line="308" pos:column="13"/></name><operator pos:line="308" pos:column="13">.<pos:position pos:line="308" pos:column="14"/></operator><name pos:line="308" pos:column="14">data<pos:position pos:line="308" pos:column="18"/></name></name></expr></argument>)<pos:position pos:line="308" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="308" pos:column="20"/></expr_stmt>
}<pos:position pos:line="309" pos:column="2"/></block></function></unit>
