<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2078_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">imap_complete<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">char<pos:position pos:line="1" pos:column="23"/></name><modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type> <name pos:line="1" pos:column="25">dest<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="31">size_t<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">dlen<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name><modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type> <name pos:line="1" pos:column="50">path<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list> <block pos:line="1" pos:column="56">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">IMAP_DATA<pos:position pos:line="2" pos:column="12"/></name><modifier pos:line="2" pos:column="12">*<pos:position pos:line="2" pos:column="13"/></modifier></type> <name pos:line="2" pos:column="14">idata<pos:position pos:line="2" pos:column="19"/></name></decl>;<pos:position pos:line="2" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">list<pos:position pos:line="3" pos:column="12"/></name><index pos:line="3" pos:column="12">[<expr><name pos:line="3" pos:column="13">LONG_STRING<pos:position pos:line="3" pos:column="24"/></name></expr>]<pos:position pos:line="3" pos:column="25"/></index></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">buf<pos:position pos:line="4" pos:column="11"/></name><index pos:line="4" pos:column="11">[<expr><name pos:line="4" pos:column="12">LONG_STRING<pos:position pos:line="4" pos:column="23"/></name></expr>]<pos:position pos:line="4" pos:column="24"/></index></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">IMAP_LIST<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">listresp<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">completion<pos:position pos:line="6" pos:column="18"/></name><index pos:line="6" pos:column="18">[<expr><name pos:line="6" pos:column="19">LONG_STRING<pos:position pos:line="6" pos:column="30"/></name></expr>]<pos:position pos:line="6" pos:column="31"/></index></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">clen<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">matchlen<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><literal type="number" pos:line="8" pos:column="21">0<pos:position pos:line="8" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">completions<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><literal type="number" pos:line="9" pos:column="21">0<pos:position pos:line="9" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">IMAP_MBOX<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">mx<pos:position pos:line="10" pos:column="15"/></name></decl>;<pos:position pos:line="10" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">rc<pos:position pos:line="11" pos:column="9"/></name></decl>;<pos:position pos:line="11" pos:column="10"/></decl_stmt>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><call><name pos:line="13" pos:column="7">imap_parse_path<pos:position pos:line="13" pos:column="22"/></name> <argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">path<pos:position pos:line="13" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="30">&amp;<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="31">mx<pos:position pos:line="13" pos:column="33"/></name></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="35"/></condition><then pos:line="13" pos:column="35">
  <block pos:line="14" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">strfcpy<pos:position pos:line="15" pos:column="12"/></name> <argument_list pos:line="15" pos:column="13">(<argument><expr><name pos:line="15" pos:column="14">dest<pos:position pos:line="15" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="20">path<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="26">dlen<pos:position pos:line="15" pos:column="30"/></name></expr></argument>)<pos:position pos:line="15" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="32"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><call><name pos:line="16" pos:column="12">imap_complete_hosts<pos:position pos:line="16" pos:column="31"/></name> <argument_list pos:line="16" pos:column="32">(<argument><expr><name pos:line="16" pos:column="33">dest<pos:position pos:line="16" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="39">dlen<pos:position pos:line="16" pos:column="43"/></name></expr></argument>)<pos:position pos:line="16" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="45"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="19" pos:column="3">/* don't open a new socket just for completion. Instead complete over
   * known mailboxes/hooks/etc */</comment>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><operator pos:line="21" pos:column="7">!<pos:position pos:line="21" pos:column="8"/></operator><operator pos:line="21" pos:column="8">(<pos:position pos:line="21" pos:column="9"/></operator><name pos:line="21" pos:column="9">idata<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <call><name pos:line="21" pos:column="17">imap_conn_find<pos:position pos:line="21" pos:column="31"/></name> <argument_list pos:line="21" pos:column="32">(<argument><expr><operator pos:line="21" pos:column="33">&amp;<pos:position pos:line="21" pos:column="38"/></operator><operator pos:line="21" pos:column="34">(<pos:position pos:line="21" pos:column="35"/></operator><name><name pos:line="21" pos:column="35">mx<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">.<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="38">account<pos:position pos:line="21" pos:column="45"/></name></name><operator pos:line="21" pos:column="45">)<pos:position pos:line="21" pos:column="46"/></operator></expr></argument>, <argument><expr><name pos:line="21" pos:column="48">MUTT_IMAP_CONN_NONEW<pos:position pos:line="21" pos:column="68"/></name></expr></argument>)<pos:position pos:line="21" pos:column="69"/></argument_list></call><operator pos:line="21" pos:column="69">)<pos:position pos:line="21" pos:column="70"/></operator></expr>)<pos:position pos:line="21" pos:column="71"/></condition><then pos:line="21" pos:column="71">
  <block pos:line="22" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">FREE<pos:position pos:line="23" pos:column="9"/></name> <argument_list pos:line="23" pos:column="10">(<argument><expr><operator pos:line="23" pos:column="11">&amp;<pos:position pos:line="23" pos:column="16"/></operator><name><name pos:line="23" pos:column="12">mx<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">.<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">mbox<pos:position pos:line="23" pos:column="19"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">strfcpy<pos:position pos:line="24" pos:column="12"/></name> <argument_list pos:line="24" pos:column="13">(<argument><expr><name pos:line="24" pos:column="14">dest<pos:position pos:line="24" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="20">path<pos:position pos:line="24" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="26">dlen<pos:position pos:line="24" pos:column="30"/></name></expr></argument>)<pos:position pos:line="24" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="32"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><call><name pos:line="25" pos:column="12">imap_complete_hosts<pos:position pos:line="25" pos:column="31"/></name> <argument_list pos:line="25" pos:column="32">(<argument><expr><name pos:line="25" pos:column="33">dest<pos:position pos:line="25" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="39">dlen<pos:position pos:line="25" pos:column="43"/></name></expr></argument>)<pos:position pos:line="25" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="45"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="28" pos:column="3">/* reformat path for IMAP list, and append wildcard */</comment>
  <comment type="block" pos:line="29" pos:column="3">/* don't use INBOX in place of "" */</comment>
  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><name><name pos:line="30" pos:column="7">mx<pos:position pos:line="30" pos:column="9"/></name><operator pos:line="30" pos:column="9">.<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="10">mbox<pos:position pos:line="30" pos:column="14"/></name></name> <operator pos:line="30" pos:column="15">&amp;&amp;<pos:position pos:line="30" pos:column="25"/></operator> <name><name pos:line="30" pos:column="18">mx<pos:position pos:line="30" pos:column="20"/></name><operator pos:line="30" pos:column="20">.<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="21">mbox<pos:position pos:line="30" pos:column="25"/></name><index pos:line="30" pos:column="25">[<expr><literal type="number" pos:line="30" pos:column="26">0<pos:position pos:line="30" pos:column="27"/></literal></expr>]<pos:position pos:line="30" pos:column="28"/></index></name></expr>)<pos:position pos:line="30" pos:column="29"/></condition><then pos:line="30" pos:column="29">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="5">imap_fix_path<pos:position pos:line="31" pos:column="18"/></name> <argument_list pos:line="31" pos:column="19">(<argument><expr><name pos:line="31" pos:column="20">idata<pos:position pos:line="31" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="27">mx<pos:position pos:line="31" pos:column="29"/></name><operator pos:line="31" pos:column="29">.<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="30">mbox<pos:position pos:line="31" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="36">list<pos:position pos:line="31" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="42">sizeof<argument_list pos:line="31" pos:column="48">(<argument><expr><name pos:line="31" pos:column="49">list<pos:position pos:line="31" pos:column="53"/></name></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="56"/></expr_stmt></block></then>
  <else pos:line="32" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="5">list<pos:position pos:line="33" pos:column="9"/></name><index pos:line="33" pos:column="9">[<expr><literal type="number" pos:line="33" pos:column="10">0<pos:position pos:line="33" pos:column="11"/></literal></expr>]<pos:position pos:line="33" pos:column="12"/></index></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <literal type="char" pos:line="33" pos:column="15">'\0'<pos:position pos:line="33" pos:column="19"/></literal></expr>;<pos:position pos:line="33" pos:column="20"/></expr_stmt></block></else></if>

  <comment type="block" pos:line="35" pos:column="3">/* fire off command */</comment>
  <expr_stmt><expr><call><name pos:line="36" pos:column="3">snprintf<pos:position pos:line="36" pos:column="11"/></name> <argument_list pos:line="36" pos:column="12">(<argument><expr><name pos:line="36" pos:column="13">buf<pos:position pos:line="36" pos:column="16"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="18">sizeof<argument_list pos:line="36" pos:column="24">(<argument><expr><name pos:line="36" pos:column="25">buf<pos:position pos:line="36" pos:column="28"/></name></expr></argument>)<pos:position pos:line="36" pos:column="29"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="31">"%s \"\" \"%s%%\""<pos:position pos:line="36" pos:column="49"/></literal></expr></argument>,
    <argument><expr><ternary><condition><expr><call><name pos:line="37" pos:column="5">option<pos:position pos:line="37" pos:column="11"/></name> <argument_list pos:line="37" pos:column="12">(<argument><expr><name pos:line="37" pos:column="13">OPTIMAPLSUB<pos:position pos:line="37" pos:column="24"/></name></expr></argument>)<pos:position pos:line="37" pos:column="25"/></argument_list></call></expr> ?<pos:position pos:line="37" pos:column="27"/></condition><then pos:line="37" pos:column="27"> <expr><literal type="string" pos:line="37" pos:column="28">"LSUB"<pos:position pos:line="37" pos:column="34"/></literal></expr> <pos:position pos:line="37" pos:column="35"/></then><else pos:line="37" pos:column="35">: <expr><literal type="string" pos:line="37" pos:column="37">"LIST"<pos:position pos:line="37" pos:column="43"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="37" pos:column="45">list<pos:position pos:line="37" pos:column="49"/></name></expr></argument>)<pos:position pos:line="37" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="51"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="39" pos:column="3">imap_cmd_start<pos:position pos:line="39" pos:column="17"/></name> <argument_list pos:line="39" pos:column="18">(<argument><expr><name pos:line="39" pos:column="19">idata<pos:position pos:line="39" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="26">buf<pos:position pos:line="39" pos:column="29"/></name></expr></argument>)<pos:position pos:line="39" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="31"/></expr_stmt>

  <comment type="block" pos:line="41" pos:column="3">/* and see what the results are */</comment>
  <expr_stmt><expr><call><name pos:line="42" pos:column="3">strfcpy<pos:position pos:line="42" pos:column="10"/></name> <argument_list pos:line="42" pos:column="11">(<argument><expr><name pos:line="42" pos:column="12">completion<pos:position pos:line="42" pos:column="22"/></name></expr></argument>, <argument><expr><call><name pos:line="42" pos:column="24">NONULL<pos:position pos:line="42" pos:column="30"/></name><argument_list pos:line="42" pos:column="30">(<argument><expr><name><name pos:line="42" pos:column="31">mx<pos:position pos:line="42" pos:column="33"/></name><operator pos:line="42" pos:column="33">.<pos:position pos:line="42" pos:column="34"/></operator><name pos:line="42" pos:column="34">mbox<pos:position pos:line="42" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="41">sizeof<argument_list pos:line="42" pos:column="47">(<argument><expr><name pos:line="42" pos:column="48">completion<pos:position pos:line="42" pos:column="58"/></name></expr></argument>)<pos:position pos:line="42" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="43" pos:column="3">idata<pos:position pos:line="43" pos:column="8"/></name><operator pos:line="43" pos:column="8">-&gt;<pos:position pos:line="43" pos:column="13"/></operator><name pos:line="43" pos:column="10">cmdtype<pos:position pos:line="43" pos:column="17"/></name></name> <operator pos:line="43" pos:column="18">=<pos:position pos:line="43" pos:column="19"/></operator> <name pos:line="43" pos:column="20">IMAP_CT_LIST<pos:position pos:line="43" pos:column="32"/></name></expr>;<pos:position pos:line="43" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="44" pos:column="3">idata<pos:position pos:line="44" pos:column="8"/></name><operator pos:line="44" pos:column="8">-&gt;<pos:position pos:line="44" pos:column="13"/></operator><name pos:line="44" pos:column="10">cmddata<pos:position pos:line="44" pos:column="17"/></name></name> <operator pos:line="44" pos:column="18">=<pos:position pos:line="44" pos:column="19"/></operator> <operator pos:line="44" pos:column="20">&amp;<pos:position pos:line="44" pos:column="25"/></operator><name pos:line="44" pos:column="21">listresp<pos:position pos:line="44" pos:column="29"/></name></expr>;<pos:position pos:line="44" pos:column="30"/></expr_stmt>
  <do pos:line="45" pos:column="3">do
  <block pos:line="46" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="47" pos:column="5">listresp<pos:position pos:line="47" pos:column="13"/></name><operator pos:line="47" pos:column="13">.<pos:position pos:line="47" pos:column="14"/></operator><name pos:line="47" pos:column="14">name<pos:position pos:line="47" pos:column="18"/></name></name> <operator pos:line="47" pos:column="19">=<pos:position pos:line="47" pos:column="20"/></operator> <name pos:line="47" pos:column="21">NULL<pos:position pos:line="47" pos:column="25"/></name></expr>;<pos:position pos:line="47" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="48" pos:column="5">rc<pos:position pos:line="48" pos:column="7"/></name> <operator pos:line="48" pos:column="8">=<pos:position pos:line="48" pos:column="9"/></operator> <call><name pos:line="48" pos:column="10">imap_cmd_step<pos:position pos:line="48" pos:column="23"/></name> <argument_list pos:line="48" pos:column="24">(<argument><expr><name pos:line="48" pos:column="25">idata<pos:position pos:line="48" pos:column="30"/></name></expr></argument>)<pos:position pos:line="48" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="32"/></expr_stmt>

    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name pos:line="50" pos:column="9">rc<pos:position pos:line="50" pos:column="11"/></name> <operator pos:line="50" pos:column="12">==<pos:position pos:line="50" pos:column="14"/></operator> <name pos:line="50" pos:column="15">IMAP_CMD_CONTINUE<pos:position pos:line="50" pos:column="32"/></name> <operator pos:line="50" pos:column="33">&amp;&amp;<pos:position pos:line="50" pos:column="43"/></operator> <name><name pos:line="50" pos:column="36">listresp<pos:position pos:line="50" pos:column="44"/></name><operator pos:line="50" pos:column="44">.<pos:position pos:line="50" pos:column="45"/></operator><name pos:line="50" pos:column="45">name<pos:position pos:line="50" pos:column="49"/></name></name></expr>)<pos:position pos:line="50" pos:column="50"/></condition><then pos:line="50" pos:column="50">
    <block pos:line="51" pos:column="5">{
      <comment type="block" pos:line="52" pos:column="7">/* if the folder isn't selectable, append delimiter to force browse
       * to enter it on second tab. */</comment>
      <if pos:line="54" pos:column="7">if <condition pos:line="54" pos:column="10">(<expr><name><name pos:line="54" pos:column="11">listresp<pos:position pos:line="54" pos:column="19"/></name><operator pos:line="54" pos:column="19">.<pos:position pos:line="54" pos:column="20"/></operator><name pos:line="54" pos:column="20">noselect<pos:position pos:line="54" pos:column="28"/></name></name></expr>)<pos:position pos:line="54" pos:column="29"/></condition><then pos:line="54" pos:column="29">
      <block pos:line="55" pos:column="7">{
        <expr_stmt><expr><name pos:line="56" pos:column="9">clen<pos:position pos:line="56" pos:column="13"/></name> <operator pos:line="56" pos:column="14">=<pos:position pos:line="56" pos:column="15"/></operator> <call><name pos:line="56" pos:column="16">strlen<pos:position pos:line="56" pos:column="22"/></name><argument_list pos:line="56" pos:column="22">(<argument><expr><name><name pos:line="56" pos:column="23">listresp<pos:position pos:line="56" pos:column="31"/></name><operator pos:line="56" pos:column="31">.<pos:position pos:line="56" pos:column="32"/></operator><name pos:line="56" pos:column="32">name<pos:position pos:line="56" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="57" pos:column="9">listresp<pos:position pos:line="57" pos:column="17"/></name><operator pos:line="57" pos:column="17">.<pos:position pos:line="57" pos:column="18"/></operator><name pos:line="57" pos:column="18">name<pos:position pos:line="57" pos:column="22"/></name><index pos:line="57" pos:column="22">[<expr><name pos:line="57" pos:column="23">clen<pos:position pos:line="57" pos:column="27"/></name><operator pos:line="57" pos:column="27">++<pos:position pos:line="57" pos:column="29"/></operator></expr>]<pos:position pos:line="57" pos:column="30"/></index></name> <operator pos:line="57" pos:column="31">=<pos:position pos:line="57" pos:column="32"/></operator> <name><name pos:line="57" pos:column="33">listresp<pos:position pos:line="57" pos:column="41"/></name><operator pos:line="57" pos:column="41">.<pos:position pos:line="57" pos:column="42"/></operator><name pos:line="57" pos:column="42">delim<pos:position pos:line="57" pos:column="47"/></name></name></expr>;<pos:position pos:line="57" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="58" pos:column="9">listresp<pos:position pos:line="58" pos:column="17"/></name><operator pos:line="58" pos:column="17">.<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="18">name<pos:position pos:line="58" pos:column="22"/></name><index pos:line="58" pos:column="22">[<expr><name pos:line="58" pos:column="23">clen<pos:position pos:line="58" pos:column="27"/></name></expr>]<pos:position pos:line="58" pos:column="28"/></index></name> <operator pos:line="58" pos:column="29">=<pos:position pos:line="58" pos:column="30"/></operator> <literal type="char" pos:line="58" pos:column="31">'\0'<pos:position pos:line="58" pos:column="35"/></literal></expr>;<pos:position pos:line="58" pos:column="36"/></expr_stmt>
      }<pos:position pos:line="59" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="60" pos:column="7">/* copy in first word */</comment>
      <if pos:line="61" pos:column="7">if <condition pos:line="61" pos:column="10">(<expr><operator pos:line="61" pos:column="11">!<pos:position pos:line="61" pos:column="12"/></operator><name pos:line="61" pos:column="12">completions<pos:position pos:line="61" pos:column="23"/></name></expr>)<pos:position pos:line="61" pos:column="24"/></condition><then pos:line="61" pos:column="24">
      <block pos:line="62" pos:column="7">{
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">strfcpy<pos:position pos:line="63" pos:column="16"/></name> <argument_list pos:line="63" pos:column="17">(<argument><expr><name pos:line="63" pos:column="18">completion<pos:position pos:line="63" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="30">listresp<pos:position pos:line="63" pos:column="38"/></name><operator pos:line="63" pos:column="38">.<pos:position pos:line="63" pos:column="39"/></operator><name pos:line="63" pos:column="39">name<pos:position pos:line="63" pos:column="43"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="63" pos:column="45">sizeof<argument_list pos:line="63" pos:column="51">(<argument><expr><name pos:line="63" pos:column="52">completion<pos:position pos:line="63" pos:column="62"/></name></expr></argument>)<pos:position pos:line="63" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="63" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><name pos:line="64" pos:column="9">matchlen<pos:position pos:line="64" pos:column="17"/></name> <operator pos:line="64" pos:column="18">=<pos:position pos:line="64" pos:column="19"/></operator> <call><name pos:line="64" pos:column="20">strlen<pos:position pos:line="64" pos:column="26"/></name> <argument_list pos:line="64" pos:column="27">(<argument><expr><name pos:line="64" pos:column="28">completion<pos:position pos:line="64" pos:column="38"/></name></expr></argument>)<pos:position pos:line="64" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="65" pos:column="9">completions<pos:position pos:line="65" pos:column="20"/></name><operator pos:line="65" pos:column="20">++<pos:position pos:line="65" pos:column="22"/></operator></expr>;<pos:position pos:line="65" pos:column="23"/></expr_stmt>
        <continue pos:line="66" pos:column="9">continue;<pos:position pos:line="66" pos:column="18"/></continue>
      }<pos:position pos:line="67" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="69" pos:column="7">matchlen<pos:position pos:line="69" pos:column="15"/></name> <operator pos:line="69" pos:column="16">=<pos:position pos:line="69" pos:column="17"/></operator> <call><name pos:line="69" pos:column="18">longest_common_prefix<pos:position pos:line="69" pos:column="39"/></name> <argument_list pos:line="69" pos:column="40">(<argument><expr><name pos:line="69" pos:column="41">completion<pos:position pos:line="69" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="53">listresp<pos:position pos:line="69" pos:column="61"/></name><operator pos:line="69" pos:column="61">.<pos:position pos:line="69" pos:column="62"/></operator><name pos:line="69" pos:column="62">name<pos:position pos:line="69" pos:column="66"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="68">0<pos:position pos:line="69" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="71">matchlen<pos:position pos:line="69" pos:column="79"/></name></expr></argument>)<pos:position pos:line="69" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="81"/></expr_stmt>
      <expr_stmt><expr><name pos:line="70" pos:column="7">completions<pos:position pos:line="70" pos:column="18"/></name><operator pos:line="70" pos:column="18">++<pos:position pos:line="70" pos:column="20"/></operator></expr>;<pos:position pos:line="70" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="71" pos:column="6"/></block></then></if>
  }<pos:position pos:line="72" pos:column="4"/></block>
  while <condition pos:line="73" pos:column="9">(<expr><name pos:line="73" pos:column="10">rc<pos:position pos:line="73" pos:column="12"/></name> <operator pos:line="73" pos:column="13">==<pos:position pos:line="73" pos:column="15"/></operator> <name pos:line="73" pos:column="16">IMAP_CMD_CONTINUE<pos:position pos:line="73" pos:column="33"/></name></expr>)<pos:position pos:line="73" pos:column="34"/></condition>;<pos:position pos:line="73" pos:column="35"/></do>
  <expr_stmt><expr><name><name pos:line="74" pos:column="3">idata<pos:position pos:line="74" pos:column="8"/></name><operator pos:line="74" pos:column="8">-&gt;<pos:position pos:line="74" pos:column="13"/></operator><name pos:line="74" pos:column="10">cmddata<pos:position pos:line="74" pos:column="17"/></name></name> <operator pos:line="74" pos:column="18">=<pos:position pos:line="74" pos:column="19"/></operator> <name pos:line="74" pos:column="20">NULL<pos:position pos:line="74" pos:column="24"/></name></expr>;<pos:position pos:line="74" pos:column="25"/></expr_stmt>

  <if pos:line="76" pos:column="3">if <condition pos:line="76" pos:column="6">(<expr><name pos:line="76" pos:column="7">completions<pos:position pos:line="76" pos:column="18"/></name></expr>)<pos:position pos:line="76" pos:column="19"/></condition><then pos:line="76" pos:column="19">
  <block pos:line="77" pos:column="3">{
    <comment type="block" pos:line="78" pos:column="5">/* reformat output */</comment>
    <expr_stmt><expr><call><name pos:line="79" pos:column="5">imap_qualify_path<pos:position pos:line="79" pos:column="22"/></name> <argument_list pos:line="79" pos:column="23">(<argument><expr><name pos:line="79" pos:column="24">dest<pos:position pos:line="79" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="30">dlen<pos:position pos:line="79" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="36">&amp;<pos:position pos:line="79" pos:column="41"/></operator><name pos:line="79" pos:column="37">mx<pos:position pos:line="79" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="41">completion<pos:position pos:line="79" pos:column="51"/></name></expr></argument>)<pos:position pos:line="79" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">mutt_pretty_mailbox<pos:position pos:line="80" pos:column="24"/></name> <argument_list pos:line="80" pos:column="25">(<argument><expr><name pos:line="80" pos:column="26">dest<pos:position pos:line="80" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="32">dlen<pos:position pos:line="80" pos:column="36"/></name></expr></argument>)<pos:position pos:line="80" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="38"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="82" pos:column="5">FREE<pos:position pos:line="82" pos:column="9"/></name> <argument_list pos:line="82" pos:column="10">(<argument><expr><operator pos:line="82" pos:column="11">&amp;<pos:position pos:line="82" pos:column="16"/></operator><name><name pos:line="82" pos:column="12">mx<pos:position pos:line="82" pos:column="14"/></name><operator pos:line="82" pos:column="14">.<pos:position pos:line="82" pos:column="15"/></operator><name pos:line="82" pos:column="15">mbox<pos:position pos:line="82" pos:column="19"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="21"/></expr_stmt>
    <return pos:line="83" pos:column="5">return <expr><literal type="number" pos:line="83" pos:column="12">0<pos:position pos:line="83" pos:column="13"/></literal></expr>;<pos:position pos:line="83" pos:column="14"/></return>
  }<pos:position pos:line="84" pos:column="4"/></block></then></if>

  <return pos:line="86" pos:column="3">return <expr><operator pos:line="86" pos:column="10">-<pos:position pos:line="86" pos:column="11"/></operator><literal type="number" pos:line="86" pos:column="11">1<pos:position pos:line="86" pos:column="12"/></literal></expr>;<pos:position pos:line="86" pos:column="13"/></return>
}<pos:position pos:line="87" pos:column="2"/></block></function></unit>
