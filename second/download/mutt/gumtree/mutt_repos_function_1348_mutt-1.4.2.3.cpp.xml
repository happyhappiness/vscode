<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1348_mutt-1.4.2.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">browse_verify_namespace<pos:position pos:line="1" pos:column="35"/></name> <parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">IMAP_DATA<pos:position pos:line="1" pos:column="46"/></name><modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type> <name pos:line="1" pos:column="48">idata<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
  <parameter><decl><type><name pos:line="2" pos:column="3">IMAP_NAMESPACE_INFO<pos:position pos:line="2" pos:column="22"/></name> <modifier pos:line="2" pos:column="23">*<pos:position pos:line="2" pos:column="24"/></modifier></type><name pos:line="2" pos:column="24">nsi<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="29">int<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">nns<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">buf<pos:position pos:line="4" pos:column="11"/></name><index pos:line="4" pos:column="11">[<expr><name pos:line="4" pos:column="12">LONG_STRING<pos:position pos:line="4" pos:column="23"/></name></expr>]<pos:position pos:line="4" pos:column="24"/></index></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">i<pos:position pos:line="5" pos:column="8"/></name> <init pos:line="5" pos:column="9">= <expr><literal type="number" pos:line="5" pos:column="11">0<pos:position pos:line="5" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">name<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">delim<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>

  <for pos:line="9" pos:column="3">for <control pos:line="9" pos:column="7">(<init><expr><name pos:line="9" pos:column="8">i<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <literal type="number" pos:line="9" pos:column="12">0<pos:position pos:line="9" pos:column="13"/></literal></expr>;<pos:position pos:line="9" pos:column="14"/></init> <condition><expr><name pos:line="9" pos:column="15">i<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">&lt;<pos:position pos:line="9" pos:column="21"/></operator> <name pos:line="9" pos:column="19">nns<pos:position pos:line="9" pos:column="22"/></name></expr>;<pos:position pos:line="9" pos:column="23"/></condition> <incr><expr><name pos:line="9" pos:column="24">i<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">++<pos:position pos:line="9" pos:column="27"/></operator></expr><operator pos:line="9" pos:column="27">,<pos:position pos:line="9" pos:column="28"/></operator> <expr><name pos:line="9" pos:column="29">nsi<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">++<pos:position pos:line="9" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="9" pos:column="35"/></control>
  <block pos:line="10" pos:column="3">{
    <comment type="block" pos:line="11" pos:column="5">/* Cyrus gives back nothing if the % isn't added. This may return lots
     * of data in some cases, I guess, but I currently feel that's better
     * than invisible namespaces */</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name><name pos:line="14" pos:column="9">nsi<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">-&gt;<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="14">delim<pos:position pos:line="14" pos:column="19"/></name></name></expr>)<pos:position pos:line="14" pos:column="20"/></condition><then pos:line="14" pos:column="20">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="7">snprintf<pos:position pos:line="15" pos:column="15"/></name> <argument_list pos:line="15" pos:column="16">(<argument><expr><name pos:line="15" pos:column="17">buf<pos:position pos:line="15" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="22">sizeof <argument_list pos:line="15" pos:column="29">(<argument><expr><name pos:line="15" pos:column="30">buf<pos:position pos:line="15" pos:column="33"/></name></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="36">"%s \"\" \"%s%c%%\""<pos:position pos:line="15" pos:column="56"/></literal></expr></argument>,
		<argument><expr><ternary><condition><expr><call><name pos:line="16" pos:column="17">option<pos:position pos:line="16" pos:column="23"/></name> <argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">OPTIMAPLSUB<pos:position pos:line="16" pos:column="36"/></name></expr></argument>)<pos:position pos:line="16" pos:column="37"/></argument_list></call></expr> ?<pos:position pos:line="16" pos:column="39"/></condition><then pos:line="16" pos:column="39"> <expr><literal type="string" pos:line="16" pos:column="40">"LSUB"<pos:position pos:line="16" pos:column="46"/></literal></expr> <pos:position pos:line="16" pos:column="47"/></then><else pos:line="16" pos:column="47">: <expr><literal type="string" pos:line="16" pos:column="49">"LIST"<pos:position pos:line="16" pos:column="55"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="57">nsi<pos:position pos:line="16" pos:column="60"/></name><operator pos:line="16" pos:column="60">-&gt;<pos:position pos:line="16" pos:column="65"/></operator><name pos:line="16" pos:column="62">prefix<pos:position pos:line="16" pos:column="68"/></name></name></expr></argument>,
		<argument><expr><name><name pos:line="17" pos:column="17">nsi<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">-&gt;<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="22">delim<pos:position pos:line="17" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt></block></then>
    <else pos:line="18" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="7">snprintf<pos:position pos:line="19" pos:column="15"/></name> <argument_list pos:line="19" pos:column="16">(<argument><expr><name pos:line="19" pos:column="17">buf<pos:position pos:line="19" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="22">sizeof <argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">buf<pos:position pos:line="19" pos:column="33"/></name></expr></argument>)<pos:position pos:line="19" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="36">"%s \"\" \"%s%%\""<pos:position pos:line="19" pos:column="54"/></literal></expr></argument>,
		<argument><expr><ternary><condition><expr><call><name pos:line="20" pos:column="17">option<pos:position pos:line="20" pos:column="23"/></name> <argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">OPTIMAPLSUB<pos:position pos:line="20" pos:column="36"/></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr> ?<pos:position pos:line="20" pos:column="39"/></condition><then pos:line="20" pos:column="39"> <expr><literal type="string" pos:line="20" pos:column="40">"LSUB"<pos:position pos:line="20" pos:column="46"/></literal></expr> <pos:position pos:line="20" pos:column="47"/></then><else pos:line="20" pos:column="47">: <expr><literal type="string" pos:line="20" pos:column="49">"LIST"<pos:position pos:line="20" pos:column="55"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="57">nsi<pos:position pos:line="20" pos:column="60"/></name><operator pos:line="20" pos:column="60">-&gt;<pos:position pos:line="20" pos:column="65"/></operator><name pos:line="20" pos:column="62">prefix<pos:position pos:line="20" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="70"/></expr_stmt></block></else></if>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">imap_cmd_start<pos:position pos:line="22" pos:column="19"/></name> <argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">idata<pos:position pos:line="22" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="28">buf<pos:position pos:line="22" pos:column="31"/></name></expr></argument>)<pos:position pos:line="22" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="24" pos:column="5">nsi<pos:position pos:line="24" pos:column="8"/></name><operator pos:line="24" pos:column="8">-&gt;<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="10">listable<pos:position pos:line="24" pos:column="18"/></name></name> <operator pos:line="24" pos:column="19">=<pos:position pos:line="24" pos:column="20"/></operator> <literal type="number" pos:line="24" pos:column="21">0<pos:position pos:line="24" pos:column="22"/></literal></expr>;<pos:position pos:line="24" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">nsi<pos:position pos:line="25" pos:column="8"/></name><operator pos:line="25" pos:column="8">-&gt;<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="10">home_namespace<pos:position pos:line="25" pos:column="24"/></name></name> <operator pos:line="25" pos:column="25">=<pos:position pos:line="25" pos:column="26"/></operator> <literal type="number" pos:line="25" pos:column="27">0<pos:position pos:line="25" pos:column="28"/></literal></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt>
    <do pos:line="26" pos:column="5">do 
    <block pos:line="27" pos:column="5">{
      <if pos:line="28" pos:column="7">if <condition pos:line="28" pos:column="10">(<expr><call><name pos:line="28" pos:column="11">imap_parse_list_response<pos:position pos:line="28" pos:column="35"/></name><argument_list pos:line="28" pos:column="35">(<argument><expr><name pos:line="28" pos:column="36">idata<pos:position pos:line="28" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="43">&amp;<pos:position pos:line="28" pos:column="48"/></operator><name pos:line="28" pos:column="44">name<pos:position pos:line="28" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="50">&amp;<pos:position pos:line="28" pos:column="55"/></operator><name><name pos:line="28" pos:column="51">nsi<pos:position pos:line="28" pos:column="54"/></name><operator pos:line="28" pos:column="54">-&gt;<pos:position pos:line="28" pos:column="59"/></operator><name pos:line="28" pos:column="56">noselect<pos:position pos:line="28" pos:column="64"/></name></name></expr></argument>,
          <argument><expr><operator pos:line="29" pos:column="11">&amp;<pos:position pos:line="29" pos:column="16"/></operator><name><name pos:line="29" pos:column="12">nsi<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">noinferiors<pos:position pos:line="29" pos:column="28"/></name></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="30">&amp;<pos:position pos:line="29" pos:column="35"/></operator><name pos:line="29" pos:column="31">delim<pos:position pos:line="29" pos:column="36"/></name></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call> <operator pos:line="29" pos:column="38">!=<pos:position pos:line="29" pos:column="40"/></operator> <literal type="number" pos:line="29" pos:column="41">0<pos:position pos:line="29" pos:column="42"/></literal></expr>)<pos:position pos:line="29" pos:column="43"/></condition><then pos:line="29" pos:column="43">
	<block type="pseudo"><return pos:line="30" pos:column="9">return <expr><operator pos:line="30" pos:column="16">-<pos:position pos:line="30" pos:column="17"/></operator><literal type="number" pos:line="30" pos:column="17">1<pos:position pos:line="30" pos:column="18"/></literal></expr>;<pos:position pos:line="30" pos:column="19"/></return></block></then></if>
      <expr_stmt><expr><name><name pos:line="31" pos:column="7">nsi<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">-&gt;<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="12">listable<pos:position pos:line="31" pos:column="20"/></name></name> <operator pos:line="31" pos:column="21">|=<pos:position pos:line="31" pos:column="23"/></operator> <operator pos:line="31" pos:column="24">(<pos:position pos:line="31" pos:column="25"/></operator><name pos:line="31" pos:column="25">name<pos:position pos:line="31" pos:column="29"/></name> <operator pos:line="31" pos:column="30">!=<pos:position pos:line="31" pos:column="32"/></operator> <name pos:line="31" pos:column="33">NULL<pos:position pos:line="31" pos:column="37"/></name><operator pos:line="31" pos:column="37">)<pos:position pos:line="31" pos:column="38"/></operator></expr>;<pos:position pos:line="31" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block>
    while <condition pos:line="33" pos:column="11">(<expr><operator pos:line="33" pos:column="12">(<pos:position pos:line="33" pos:column="13"/></operator><call><name pos:line="33" pos:column="13">ascii_strncmp<pos:position pos:line="33" pos:column="26"/></name> <argument_list pos:line="33" pos:column="27">(<argument><expr><name><name pos:line="33" pos:column="28">idata<pos:position pos:line="33" pos:column="33"/></name><operator pos:line="33" pos:column="33">-&gt;<pos:position pos:line="33" pos:column="38"/></operator><name pos:line="33" pos:column="35">cmd<pos:position pos:line="33" pos:column="38"/></name><operator pos:line="33" pos:column="38">.<pos:position pos:line="33" pos:column="39"/></operator><name pos:line="33" pos:column="39">buf<pos:position pos:line="33" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="44">idata<pos:position pos:line="33" pos:column="49"/></name><operator pos:line="33" pos:column="49">-&gt;<pos:position pos:line="33" pos:column="54"/></operator><name pos:line="33" pos:column="51">cmd<pos:position pos:line="33" pos:column="54"/></name><operator pos:line="33" pos:column="54">.<pos:position pos:line="33" pos:column="55"/></operator><name pos:line="33" pos:column="55">seq<pos:position pos:line="33" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="60">SEQLEN<pos:position pos:line="33" pos:column="66"/></name></expr></argument>)<pos:position pos:line="33" pos:column="67"/></argument_list></call> <operator pos:line="33" pos:column="68">!=<pos:position pos:line="33" pos:column="70"/></operator> <literal type="number" pos:line="33" pos:column="71">0<pos:position pos:line="33" pos:column="72"/></literal><operator pos:line="33" pos:column="72">)<pos:position pos:line="33" pos:column="73"/></operator></expr>)<pos:position pos:line="33" pos:column="74"/></condition>;<pos:position pos:line="33" pos:column="75"/></do>
  }<pos:position pos:line="34" pos:column="4"/></block></for>

  <return pos:line="36" pos:column="3">return <expr><literal type="number" pos:line="36" pos:column="10">0<pos:position pos:line="36" pos:column="11"/></literal></expr>;<pos:position pos:line="36" pos:column="12"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
