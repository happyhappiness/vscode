<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1143_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name></type>
<name pos:line="2" pos:column="1">regex_compile<pos:position pos:line="2" pos:column="14"/></name> <argument_list pos:line="2" pos:column="15">(<argument><expr><name pos:line="2" pos:column="16">pattern<pos:position pos:line="2" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="25">size<pos:position pos:line="2" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="31">syntax<pos:position pos:line="2" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="39">bufp<pos:position pos:line="2" pos:column="43"/></name></expr></argument>)<pos:position pos:line="2" pos:column="44"/></argument_list>
     const <name pos:line="3" pos:column="12">char<pos:position pos:line="3" pos:column="16"/></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier><name pos:line="3" pos:column="18">pattern<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
     <decl_stmt><decl><type><name pos:line="4" pos:column="6">size_t<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">size<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
     <decl_stmt><decl><type><name pos:line="5" pos:column="6">reg_syntax_t<pos:position pos:line="5" pos:column="18"/></name></type> <name pos:line="5" pos:column="19">syntax<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
     <decl_stmt><decl><type><name><name pos:line="6" pos:column="6">struct<pos:position pos:line="6" pos:column="12"/></name> <name pos:line="6" pos:column="13">re_pattern_buffer<pos:position pos:line="6" pos:column="30"/></name></name> <modifier pos:line="6" pos:column="31">*<pos:position pos:line="6" pos:column="32"/></modifier></type><name pos:line="6" pos:column="32">bufp<pos:position pos:line="6" pos:column="36"/></name></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>
<block pos:line="7" pos:column="1">{
  <comment type="block" pos:line="8" pos:column="3">/* We fetch characters from PATTERN here.  Even though PATTERN is
     `char *' (i.e., signed), we declare these variables as unsigned, so
     they can be reliably used as array indices.  */</comment>
  <decl_stmt><decl><type><specifier pos:line="11" pos:column="3">register<pos:position pos:line="11" pos:column="11"/></specifier> <name pos:line="11" pos:column="12">unsigned<pos:position pos:line="11" pos:column="20"/></name> <name pos:line="11" pos:column="21">char<pos:position pos:line="11" pos:column="25"/></name></type> <name pos:line="11" pos:column="26">c<pos:position pos:line="11" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="29">c1<pos:position pos:line="11" pos:column="31"/></name></decl>;<pos:position pos:line="11" pos:column="32"/></decl_stmt>

  <comment type="block" pos:line="13" pos:column="3">/* A random temporary spot in PATTERN.  */</comment>
  <decl_stmt><decl><type><specifier pos:line="14" pos:column="3">const<pos:position pos:line="14" pos:column="8"/></specifier> <name pos:line="14" pos:column="9">char<pos:position pos:line="14" pos:column="13"/></name> <modifier pos:line="14" pos:column="14">*<pos:position pos:line="14" pos:column="15"/></modifier></type><name pos:line="14" pos:column="15">p1<pos:position pos:line="14" pos:column="17"/></name></decl>;<pos:position pos:line="14" pos:column="18"/></decl_stmt>

  <comment type="block" pos:line="16" pos:column="3">/* Points to the end of the buffer, where we should append.  */</comment>
  <decl_stmt><decl><type><specifier pos:line="17" pos:column="3">register<pos:position pos:line="17" pos:column="11"/></specifier> <name pos:line="17" pos:column="12">unsigned<pos:position pos:line="17" pos:column="20"/></name> <name pos:line="17" pos:column="21">char<pos:position pos:line="17" pos:column="25"/></name> <modifier pos:line="17" pos:column="26">*<pos:position pos:line="17" pos:column="27"/></modifier></type><name pos:line="17" pos:column="27">b<pos:position pos:line="17" pos:column="28"/></name></decl>;<pos:position pos:line="17" pos:column="29"/></decl_stmt>

  <comment type="block" pos:line="19" pos:column="3">/* Keeps track of unclosed groups.  */</comment>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">compile_stack_type<pos:position pos:line="20" pos:column="21"/></name></type> <name pos:line="20" pos:column="22">compile_stack<pos:position pos:line="20" pos:column="35"/></name></decl>;<pos:position pos:line="20" pos:column="36"/></decl_stmt>

  <comment type="block" pos:line="22" pos:column="3">/* Points to the current (ending) position in the pattern.  */</comment>
  <decl_stmt><decl><type><specifier pos:line="23" pos:column="3">const<pos:position pos:line="23" pos:column="8"/></specifier> <name pos:line="23" pos:column="9">char<pos:position pos:line="23" pos:column="13"/></name> <modifier pos:line="23" pos:column="14">*<pos:position pos:line="23" pos:column="15"/></modifier></type><name pos:line="23" pos:column="15">p<pos:position pos:line="23" pos:column="16"/></name> <init pos:line="23" pos:column="17">= <expr><name pos:line="23" pos:column="19">pattern<pos:position pos:line="23" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="24" pos:column="3">const<pos:position pos:line="24" pos:column="8"/></specifier> <name pos:line="24" pos:column="9">char<pos:position pos:line="24" pos:column="13"/></name> <modifier pos:line="24" pos:column="14">*<pos:position pos:line="24" pos:column="15"/></modifier></type><name pos:line="24" pos:column="15">pend<pos:position pos:line="24" pos:column="19"/></name> <init pos:line="24" pos:column="20">= <expr><name pos:line="24" pos:column="22">pattern<pos:position pos:line="24" pos:column="29"/></name> <operator pos:line="24" pos:column="30">+<pos:position pos:line="24" pos:column="31"/></operator> <name pos:line="24" pos:column="32">size<pos:position pos:line="24" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="37"/></decl_stmt>

  <comment type="block" pos:line="26" pos:column="3">/* How to translate the characters in the pattern.  */</comment>
  <decl_stmt><decl><type><name pos:line="27" pos:column="3">RE_TRANSLATE_TYPE<pos:position pos:line="27" pos:column="20"/></name></type> <name pos:line="27" pos:column="21">translate<pos:position pos:line="27" pos:column="30"/></name> <init pos:line="27" pos:column="31">= <expr><name><name pos:line="27" pos:column="33">bufp<pos:position pos:line="27" pos:column="37"/></name><operator pos:line="27" pos:column="37">-&gt;<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="39">translate<pos:position pos:line="27" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="27" pos:column="49"/></decl_stmt>

  <comment type="block" pos:line="29" pos:column="3">/* Address of the count-byte of the most recently inserted `exactn'
     command.  This makes it possible to tell if a new exact-match
     character can be added to that command or if the character requires
     a new `exactn' command.  */</comment>
  <decl_stmt><decl><type><name pos:line="33" pos:column="3">unsigned<pos:position pos:line="33" pos:column="11"/></name> <name pos:line="33" pos:column="12">char<pos:position pos:line="33" pos:column="16"/></name> <modifier pos:line="33" pos:column="17">*<pos:position pos:line="33" pos:column="18"/></modifier></type><name pos:line="33" pos:column="18">pending_exact<pos:position pos:line="33" pos:column="31"/></name> <init pos:line="33" pos:column="32">= <expr><literal type="number" pos:line="33" pos:column="34">0<pos:position pos:line="33" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="33" pos:column="36"/></decl_stmt>

  <comment type="block" pos:line="35" pos:column="3">/* Address of start of the most recently finished expression.
     This tells, e.g., postfix * where to find the start of its
     operand.  Reset at the beginning of groups and alternatives.  */</comment>
  <decl_stmt><decl><type><name pos:line="38" pos:column="3">unsigned<pos:position pos:line="38" pos:column="11"/></name> <name pos:line="38" pos:column="12">char<pos:position pos:line="38" pos:column="16"/></name> <modifier pos:line="38" pos:column="17">*<pos:position pos:line="38" pos:column="18"/></modifier></type><name pos:line="38" pos:column="18">laststart<pos:position pos:line="38" pos:column="27"/></name> <init pos:line="38" pos:column="28">= <expr><literal type="number" pos:line="38" pos:column="30">0<pos:position pos:line="38" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="38" pos:column="32"/></decl_stmt>

  <comment type="block" pos:line="40" pos:column="3">/* Address of beginning of regexp, or inside of last group.  */</comment>
  <decl_stmt><decl><type><name pos:line="41" pos:column="3">unsigned<pos:position pos:line="41" pos:column="11"/></name> <name pos:line="41" pos:column="12">char<pos:position pos:line="41" pos:column="16"/></name> <modifier pos:line="41" pos:column="17">*<pos:position pos:line="41" pos:column="18"/></modifier></type><name pos:line="41" pos:column="18">begalt<pos:position pos:line="41" pos:column="24"/></name></decl>;<pos:position pos:line="41" pos:column="25"/></decl_stmt>

  <comment type="block" pos:line="43" pos:column="3">/* Place in the uncompiled pattern (i.e., the {) to
     which to go back if the interval is invalid.  */</comment>
  <decl_stmt><decl><type><specifier pos:line="45" pos:column="3">const<pos:position pos:line="45" pos:column="8"/></specifier> <name pos:line="45" pos:column="9">char<pos:position pos:line="45" pos:column="13"/></name> <modifier pos:line="45" pos:column="14">*<pos:position pos:line="45" pos:column="15"/></modifier></type><name pos:line="45" pos:column="15">beg_interval<pos:position pos:line="45" pos:column="27"/></name></decl>;<pos:position pos:line="45" pos:column="28"/></decl_stmt>

  <comment type="block" pos:line="47" pos:column="3">/* Address of the place where a forward jump should go to the end of
     the containing expression.  Each alternative of an `or' -- except the
     last -- ends with a forward jump of this sort.  */</comment>
  <decl_stmt><decl><type><name pos:line="50" pos:column="3">unsigned<pos:position pos:line="50" pos:column="11"/></name> <name pos:line="50" pos:column="12">char<pos:position pos:line="50" pos:column="16"/></name> <modifier pos:line="50" pos:column="17">*<pos:position pos:line="50" pos:column="18"/></modifier></type><name pos:line="50" pos:column="18">fixup_alt_jump<pos:position pos:line="50" pos:column="32"/></name> <init pos:line="50" pos:column="33">= <expr><literal type="number" pos:line="50" pos:column="35">0<pos:position pos:line="50" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="50" pos:column="37"/></decl_stmt>

  <comment type="block" pos:line="52" pos:column="3">/* Counts open-groups as they are encountered.  Remembered for the
     matching close-group on the compile stack, so the same register
     number is put in the stop_memory as the start_memory.  */</comment>
  <decl_stmt><decl><type><name pos:line="55" pos:column="3">regnum_t<pos:position pos:line="55" pos:column="11"/></name></type> <name pos:line="55" pos:column="12">regnum<pos:position pos:line="55" pos:column="18"/></name> <init pos:line="55" pos:column="19">= <expr><literal type="number" pos:line="55" pos:column="21">0<pos:position pos:line="55" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="55" pos:column="23"/></decl_stmt>

<cpp:ifdef pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">ifdef<pos:position pos:line="57" pos:column="7"/></cpp:directive> <name pos:line="57" pos:column="8">DEBUG<pos:position pos:line="57" pos:column="13"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="58" pos:column="3">DEBUG_PRINT1<pos:position pos:line="58" pos:column="15"/></name> <argument_list pos:line="58" pos:column="16">(<argument><expr><literal type="string" pos:line="58" pos:column="17">"\nCompiling pattern: "<pos:position pos:line="58" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="42"/></expr_stmt>
  <if pos:line="59" pos:column="3">if <condition pos:line="59" pos:column="6">(<expr><name pos:line="59" pos:column="7">debug<pos:position pos:line="59" pos:column="12"/></name></expr>)<pos:position pos:line="59" pos:column="13"/></condition><then pos:line="59" pos:column="13">
    <block pos:line="60" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="61" pos:column="7">unsigned<pos:position pos:line="61" pos:column="15"/></name></type> <name pos:line="61" pos:column="16">debug_count<pos:position pos:line="61" pos:column="27"/></name></decl>;<pos:position pos:line="61" pos:column="28"/></decl_stmt>

      <for pos:line="63" pos:column="7">for <control pos:line="63" pos:column="11">(<init><expr><name pos:line="63" pos:column="12">debug_count<pos:position pos:line="63" pos:column="23"/></name> <operator pos:line="63" pos:column="24">=<pos:position pos:line="63" pos:column="25"/></operator> <literal type="number" pos:line="63" pos:column="26">0<pos:position pos:line="63" pos:column="27"/></literal></expr>;<pos:position pos:line="63" pos:column="28"/></init> <condition><expr><name pos:line="63" pos:column="29">debug_count<pos:position pos:line="63" pos:column="40"/></name> <operator pos:line="63" pos:column="41">&lt;<pos:position pos:line="63" pos:column="45"/></operator> <name pos:line="63" pos:column="43">size<pos:position pos:line="63" pos:column="47"/></name></expr>;<pos:position pos:line="63" pos:column="48"/></condition> <incr><expr><name pos:line="63" pos:column="49">debug_count<pos:position pos:line="63" pos:column="60"/></name><operator pos:line="63" pos:column="60">++<pos:position pos:line="63" pos:column="62"/></operator></expr></incr>)<pos:position pos:line="63" pos:column="63"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="9">putchar<pos:position pos:line="64" pos:column="16"/></name> <argument_list pos:line="64" pos:column="17">(<argument><expr><name><name pos:line="64" pos:column="18">pattern<pos:position pos:line="64" pos:column="25"/></name><index pos:line="64" pos:column="25">[<expr><name pos:line="64" pos:column="26">debug_count<pos:position pos:line="64" pos:column="37"/></name></expr>]<pos:position pos:line="64" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="64" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="40"/></expr_stmt></block></for>
      <expr_stmt><expr><call><name pos:line="65" pos:column="7">putchar<pos:position pos:line="65" pos:column="14"/></name> <argument_list pos:line="65" pos:column="15">(<argument><expr><literal type="char" pos:line="65" pos:column="16">'\n'<pos:position pos:line="65" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if>
<cpp:endif pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">endif<pos:position pos:line="67" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="67" pos:column="8">/* DEBUG */</comment>

  <comment type="block" pos:line="69" pos:column="3">/* Initialize the compile stack.  */</comment>
  <expr_stmt><expr><name><name pos:line="70" pos:column="3">compile_stack<pos:position pos:line="70" pos:column="16"/></name><operator pos:line="70" pos:column="16">.<pos:position pos:line="70" pos:column="17"/></operator><name pos:line="70" pos:column="17">stack<pos:position pos:line="70" pos:column="22"/></name></name> <operator pos:line="70" pos:column="23">=<pos:position pos:line="70" pos:column="24"/></operator> <call><name pos:line="70" pos:column="25">TALLOC<pos:position pos:line="70" pos:column="31"/></name> <argument_list pos:line="70" pos:column="32">(<argument><expr><name pos:line="70" pos:column="33">INIT_COMPILE_STACK_SIZE<pos:position pos:line="70" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="58">compile_stack_elt_t<pos:position pos:line="70" pos:column="77"/></name></expr></argument>)<pos:position pos:line="70" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="79"/></expr_stmt>
  <if pos:line="71" pos:column="3">if <condition pos:line="71" pos:column="6">(<expr><name><name pos:line="71" pos:column="7">compile_stack<pos:position pos:line="71" pos:column="20"/></name><operator pos:line="71" pos:column="20">.<pos:position pos:line="71" pos:column="21"/></operator><name pos:line="71" pos:column="21">stack<pos:position pos:line="71" pos:column="26"/></name></name> <operator pos:line="71" pos:column="27">==<pos:position pos:line="71" pos:column="29"/></operator> <name pos:line="71" pos:column="30">NULL<pos:position pos:line="71" pos:column="34"/></name></expr>)<pos:position pos:line="71" pos:column="35"/></condition><then pos:line="71" pos:column="35">
    <block type="pseudo"><return pos:line="72" pos:column="5">return <expr><name pos:line="72" pos:column="12">REG_ESPACE<pos:position pos:line="72" pos:column="22"/></name></expr>;<pos:position pos:line="72" pos:column="23"/></return></block></then></if>

  <expr_stmt><expr><name><name pos:line="74" pos:column="3">compile_stack<pos:position pos:line="74" pos:column="16"/></name><operator pos:line="74" pos:column="16">.<pos:position pos:line="74" pos:column="17"/></operator><name pos:line="74" pos:column="17">size<pos:position pos:line="74" pos:column="21"/></name></name> <operator pos:line="74" pos:column="22">=<pos:position pos:line="74" pos:column="23"/></operator> <name pos:line="74" pos:column="24">INIT_COMPILE_STACK_SIZE<pos:position pos:line="74" pos:column="47"/></name></expr>;<pos:position pos:line="74" pos:column="48"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="75" pos:column="3">compile_stack<pos:position pos:line="75" pos:column="16"/></name><operator pos:line="75" pos:column="16">.<pos:position pos:line="75" pos:column="17"/></operator><name pos:line="75" pos:column="17">avail<pos:position pos:line="75" pos:column="22"/></name></name> <operator pos:line="75" pos:column="23">=<pos:position pos:line="75" pos:column="24"/></operator> <literal type="number" pos:line="75" pos:column="25">0<pos:position pos:line="75" pos:column="26"/></literal></expr>;<pos:position pos:line="75" pos:column="27"/></expr_stmt>

  <comment type="block" pos:line="77" pos:column="3">/* Initialize the pattern buffer.  */</comment>
  <expr_stmt><expr><name><name pos:line="78" pos:column="3">bufp<pos:position pos:line="78" pos:column="7"/></name><operator pos:line="78" pos:column="7">-&gt;<pos:position pos:line="78" pos:column="12"/></operator><name pos:line="78" pos:column="9">syntax<pos:position pos:line="78" pos:column="15"/></name></name> <operator pos:line="78" pos:column="16">=<pos:position pos:line="78" pos:column="17"/></operator> <name pos:line="78" pos:column="18">syntax<pos:position pos:line="78" pos:column="24"/></name></expr>;<pos:position pos:line="78" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="79" pos:column="3">bufp<pos:position pos:line="79" pos:column="7"/></name><operator pos:line="79" pos:column="7">-&gt;<pos:position pos:line="79" pos:column="12"/></operator><name pos:line="79" pos:column="9">fastmap_accurate<pos:position pos:line="79" pos:column="25"/></name></name> <operator pos:line="79" pos:column="26">=<pos:position pos:line="79" pos:column="27"/></operator> <literal type="number" pos:line="79" pos:column="28">0<pos:position pos:line="79" pos:column="29"/></literal></expr>;<pos:position pos:line="79" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="80" pos:column="3">bufp<pos:position pos:line="80" pos:column="7"/></name><operator pos:line="80" pos:column="7">-&gt;<pos:position pos:line="80" pos:column="12"/></operator><name pos:line="80" pos:column="9">not_bol<pos:position pos:line="80" pos:column="16"/></name></name> <operator pos:line="80" pos:column="17">=<pos:position pos:line="80" pos:column="18"/></operator> <name><name pos:line="80" pos:column="19">bufp<pos:position pos:line="80" pos:column="23"/></name><operator pos:line="80" pos:column="23">-&gt;<pos:position pos:line="80" pos:column="28"/></operator><name pos:line="80" pos:column="25">not_eol<pos:position pos:line="80" pos:column="32"/></name></name> <operator pos:line="80" pos:column="33">=<pos:position pos:line="80" pos:column="34"/></operator> <literal type="number" pos:line="80" pos:column="35">0<pos:position pos:line="80" pos:column="36"/></literal></expr>;<pos:position pos:line="80" pos:column="37"/></expr_stmt>

  <comment type="block" pos:line="82" pos:column="3">/* Set `used' to zero, so that if we return an error, the pattern
     printer (for debugging) will think there's no pattern.  We reset it
     at the end.  */</comment>
  <expr_stmt><expr><name><name pos:line="85" pos:column="3">bufp<pos:position pos:line="85" pos:column="7"/></name><operator pos:line="85" pos:column="7">-&gt;<pos:position pos:line="85" pos:column="12"/></operator><name pos:line="85" pos:column="9">used<pos:position pos:line="85" pos:column="13"/></name></name> <operator pos:line="85" pos:column="14">=<pos:position pos:line="85" pos:column="15"/></operator> <literal type="number" pos:line="85" pos:column="16">0<pos:position pos:line="85" pos:column="17"/></literal></expr>;<pos:position pos:line="85" pos:column="18"/></expr_stmt>

  <comment type="block" pos:line="87" pos:column="3">/* Always count groups, whether or not bufp-&gt;no_sub is set.  */</comment>
  <expr_stmt><expr><name><name pos:line="88" pos:column="3">bufp<pos:position pos:line="88" pos:column="7"/></name><operator pos:line="88" pos:column="7">-&gt;<pos:position pos:line="88" pos:column="12"/></operator><name pos:line="88" pos:column="9">re_nsub<pos:position pos:line="88" pos:column="16"/></name></name> <operator pos:line="88" pos:column="17">=<pos:position pos:line="88" pos:column="18"/></operator> <literal type="number" pos:line="88" pos:column="19">0<pos:position pos:line="88" pos:column="20"/></literal></expr>;<pos:position pos:line="88" pos:column="21"/></expr_stmt>

<cpp:if pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">if<pos:position pos:line="90" pos:column="4"/></cpp:directive> <expr><operator pos:line="90" pos:column="5">!<pos:position pos:line="90" pos:column="6"/></operator><call><name pos:line="90" pos:column="6">defined<pos:position pos:line="90" pos:column="13"/></name> <argument_list pos:line="90" pos:column="14">(<argument><expr><name pos:line="90" pos:column="15">emacs<pos:position pos:line="90" pos:column="20"/></name></expr></argument>)<pos:position pos:line="90" pos:column="21"/></argument_list></call> <operator pos:line="90" pos:column="22">&amp;&amp;<pos:position pos:line="90" pos:column="32"/></operator> <operator pos:line="90" pos:column="25">!<pos:position pos:line="90" pos:column="26"/></operator><call><name pos:line="90" pos:column="26">defined<pos:position pos:line="90" pos:column="33"/></name> <argument_list pos:line="90" pos:column="34">(<argument><expr><name pos:line="90" pos:column="35">SYNTAX_TABLE<pos:position pos:line="90" pos:column="47"/></name></expr></argument>)<pos:position pos:line="90" pos:column="48"/></argument_list></call></expr></cpp:if>
  <comment type="block" pos:line="91" pos:column="3">/* Initialize the syntax table.  */</comment>
   <expr_stmt><expr><call><name pos:line="92" pos:column="4">init_syntax_once<pos:position pos:line="92" pos:column="20"/></name> <argument_list pos:line="92" pos:column="21">()<pos:position pos:line="92" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="24"/></expr_stmt>
<cpp:endif pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">endif<pos:position pos:line="93" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="95" pos:column="3">if <condition pos:line="95" pos:column="6">(<expr><name><name pos:line="95" pos:column="7">bufp<pos:position pos:line="95" pos:column="11"/></name><operator pos:line="95" pos:column="11">-&gt;<pos:position pos:line="95" pos:column="16"/></operator><name pos:line="95" pos:column="13">allocated<pos:position pos:line="95" pos:column="22"/></name></name> <operator pos:line="95" pos:column="23">==<pos:position pos:line="95" pos:column="25"/></operator> <literal type="number" pos:line="95" pos:column="26">0<pos:position pos:line="95" pos:column="27"/></literal></expr>)<pos:position pos:line="95" pos:column="28"/></condition><then pos:line="95" pos:column="28">
    <block pos:line="96" pos:column="5">{
      <if pos:line="97" pos:column="7">if <condition pos:line="97" pos:column="10">(<expr><name><name pos:line="97" pos:column="11">bufp<pos:position pos:line="97" pos:column="15"/></name><operator pos:line="97" pos:column="15">-&gt;<pos:position pos:line="97" pos:column="20"/></operator><name pos:line="97" pos:column="17">buffer<pos:position pos:line="97" pos:column="23"/></name></name></expr>)<pos:position pos:line="97" pos:column="24"/></condition><then pos:line="97" pos:column="24">
	<block pos:line="98" pos:column="9">{ <comment type="block" pos:line="98" pos:column="11">/* If zero allocated, but buffer is non-null, try to realloc
             enough space.  This loses if buffer's address is bogus, but
             that is the user's responsibility.  */</comment>
          <macro><name pos:line="101" pos:column="11">RETALLOC<pos:position pos:line="101" pos:column="19"/></name> <argument_list pos:line="101" pos:column="20">(<argument pos:line="101" pos:column="21">bufp-&gt;buffer<pos:position pos:line="101" pos:column="33"/></argument>, <argument pos:line="101" pos:column="35">INIT_BUF_SIZE<pos:position pos:line="101" pos:column="48"/></argument>, <argument pos:line="101" pos:column="50">unsigned char<pos:position pos:line="101" pos:column="63"/></argument>)<pos:position pos:line="101" pos:column="64"/></argument_list></macro><empty_stmt pos:line="101" pos:column="64">;<pos:position pos:line="101" pos:column="65"/></empty_stmt>
        }<pos:position pos:line="102" pos:column="10"/></block></then>
      <else pos:line="103" pos:column="7">else
        <block pos:line="104" pos:column="9">{ <comment type="block" pos:line="104" pos:column="11">/* Caller did not allocate a buffer.  Do it for them.  */</comment>
          <expr_stmt><expr><name><name pos:line="105" pos:column="11">bufp<pos:position pos:line="105" pos:column="15"/></name><operator pos:line="105" pos:column="15">-&gt;<pos:position pos:line="105" pos:column="20"/></operator><name pos:line="105" pos:column="17">buffer<pos:position pos:line="105" pos:column="23"/></name></name> <operator pos:line="105" pos:column="24">=<pos:position pos:line="105" pos:column="25"/></operator> <macro><name pos:line="105" pos:column="26">TALLOC<pos:position pos:line="105" pos:column="32"/></name> <argument_list pos:line="105" pos:column="33">(<argument pos:line="105" pos:column="34">INIT_BUF_SIZE<pos:position pos:line="105" pos:column="47"/></argument>, <argument pos:line="105" pos:column="49">unsigned char<pos:position pos:line="105" pos:column="62"/></argument>)<pos:position pos:line="105" pos:column="63"/></argument_list></macro></expr>;<pos:position pos:line="105" pos:column="64"/></expr_stmt>
        }<pos:position pos:line="106" pos:column="10"/></block></else></if>
      <if pos:line="107" pos:column="7">if <condition pos:line="107" pos:column="10">(<expr><operator pos:line="107" pos:column="11">!<pos:position pos:line="107" pos:column="12"/></operator><name><name pos:line="107" pos:column="12">bufp<pos:position pos:line="107" pos:column="16"/></name><operator pos:line="107" pos:column="16">-&gt;<pos:position pos:line="107" pos:column="21"/></operator><name pos:line="107" pos:column="18">buffer<pos:position pos:line="107" pos:column="24"/></name></name></expr>)<pos:position pos:line="107" pos:column="25"/></condition><then pos:line="107" pos:column="25"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="107" pos:column="26">FREE_STACK_RETURN<pos:position pos:line="107" pos:column="43"/></name> <argument_list pos:line="107" pos:column="44">(<argument><expr><name pos:line="107" pos:column="45">REG_ESPACE<pos:position pos:line="107" pos:column="55"/></name></expr></argument>)<pos:position pos:line="107" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="57"/></expr_stmt></block></then></if>

      <expr_stmt><expr><name><name pos:line="109" pos:column="7">bufp<pos:position pos:line="109" pos:column="11"/></name><operator pos:line="109" pos:column="11">-&gt;<pos:position pos:line="109" pos:column="16"/></operator><name pos:line="109" pos:column="13">allocated<pos:position pos:line="109" pos:column="22"/></name></name> <operator pos:line="109" pos:column="23">=<pos:position pos:line="109" pos:column="24"/></operator> <name pos:line="109" pos:column="25">INIT_BUF_SIZE<pos:position pos:line="109" pos:column="38"/></name></expr>;<pos:position pos:line="109" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="110" pos:column="6"/></block></then></if>

  <expr_stmt><expr><name pos:line="112" pos:column="3">begalt<pos:position pos:line="112" pos:column="9"/></name> <operator pos:line="112" pos:column="10">=<pos:position pos:line="112" pos:column="11"/></operator> <name pos:line="112" pos:column="12">b<pos:position pos:line="112" pos:column="13"/></name> <operator pos:line="112" pos:column="14">=<pos:position pos:line="112" pos:column="15"/></operator> <name><name pos:line="112" pos:column="16">bufp<pos:position pos:line="112" pos:column="20"/></name><operator pos:line="112" pos:column="20">-&gt;<pos:position pos:line="112" pos:column="25"/></operator><name pos:line="112" pos:column="22">buffer<pos:position pos:line="112" pos:column="28"/></name></name></expr>;<pos:position pos:line="112" pos:column="29"/></expr_stmt>

  <comment type="block" pos:line="114" pos:column="3">/* Loop through the uncompiled pattern until we're at the end.  */</comment>
  <while pos:line="115" pos:column="3">while <condition pos:line="115" pos:column="9">(<expr><name pos:line="115" pos:column="10">p<pos:position pos:line="115" pos:column="11"/></name> <operator pos:line="115" pos:column="12">!=<pos:position pos:line="115" pos:column="14"/></operator> <name pos:line="115" pos:column="15">pend<pos:position pos:line="115" pos:column="19"/></name></expr>)<pos:position pos:line="115" pos:column="20"/></condition>
    <block pos:line="116" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="117" pos:column="7">PATFETCH<pos:position pos:line="117" pos:column="15"/></name> <argument_list pos:line="117" pos:column="16">(<argument><expr><name pos:line="117" pos:column="17">c<pos:position pos:line="117" pos:column="18"/></name></expr></argument>)<pos:position pos:line="117" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="20"/></expr_stmt>

      <switch pos:line="119" pos:column="7">switch <condition pos:line="119" pos:column="14">(<expr><name pos:line="119" pos:column="15">c<pos:position pos:line="119" pos:column="16"/></name></expr>)<pos:position pos:line="119" pos:column="17"/></condition>
        <block pos:line="120" pos:column="9">{
        <case pos:line="121" pos:column="9">case <expr><literal type="char" pos:line="121" pos:column="14">'^'<pos:position pos:line="121" pos:column="17"/></literal></expr>:<pos:position pos:line="121" pos:column="18"/></case>
          <block pos:line="122" pos:column="11">{
            <if pos:line="123" pos:column="13">if <condition pos:line="123" pos:column="16">(   <comment type="block" pos:line="123" pos:column="20">/* If at start of pattern, it's an operator.  */</comment>
                   <expr><name pos:line="124" pos:column="20">p<pos:position pos:line="124" pos:column="21"/></name> <operator pos:line="124" pos:column="22">==<pos:position pos:line="124" pos:column="24"/></operator> <name pos:line="124" pos:column="25">pattern<pos:position pos:line="124" pos:column="32"/></name> <operator pos:line="124" pos:column="33">+<pos:position pos:line="124" pos:column="34"/></operator> <literal type="number" pos:line="124" pos:column="35">1<pos:position pos:line="124" pos:column="36"/></literal>
                   <comment type="block" pos:line="125" pos:column="20">/* If context independent, it's an operator.  */</comment>
                <operator pos:line="126" pos:column="17">||<pos:position pos:line="126" pos:column="19"/></operator> <name pos:line="126" pos:column="20">syntax<pos:position pos:line="126" pos:column="26"/></name> <operator pos:line="126" pos:column="27">&amp;<pos:position pos:line="126" pos:column="32"/></operator> <name pos:line="126" pos:column="29">RE_CONTEXT_INDEP_ANCHORS<pos:position pos:line="126" pos:column="53"/></name>
                   <comment type="block" pos:line="127" pos:column="20">/* Otherwise, depends on what's come before.  */</comment>
                <operator pos:line="128" pos:column="17">||<pos:position pos:line="128" pos:column="19"/></operator> <call><name pos:line="128" pos:column="20">at_begline_loc_p<pos:position pos:line="128" pos:column="36"/></name> <argument_list pos:line="128" pos:column="37">(<argument><expr><name pos:line="128" pos:column="38">pattern<pos:position pos:line="128" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="47">p<pos:position pos:line="128" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="50">syntax<pos:position pos:line="128" pos:column="56"/></name></expr></argument>)<pos:position pos:line="128" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="128" pos:column="58"/></condition><then pos:line="128" pos:column="58">
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="129" pos:column="15">BUF_PUSH<pos:position pos:line="129" pos:column="23"/></name> <argument_list pos:line="129" pos:column="24">(<argument><expr><name pos:line="129" pos:column="25">begline<pos:position pos:line="129" pos:column="32"/></name></expr></argument>)<pos:position pos:line="129" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="34"/></expr_stmt></block></then>
            <else pos:line="130" pos:column="13">else
              <block type="pseudo"><goto pos:line="131" pos:column="15">goto <name pos:line="131" pos:column="20">normal_char<pos:position pos:line="131" pos:column="31"/></name>;<pos:position pos:line="131" pos:column="32"/></goto></block></else></if>
          }<pos:position pos:line="132" pos:column="12"/></block>
          <break pos:line="133" pos:column="11">break;<pos:position pos:line="133" pos:column="17"/></break>


        <case pos:line="136" pos:column="9">case <expr><literal type="char" pos:line="136" pos:column="14">'$'<pos:position pos:line="136" pos:column="17"/></literal></expr>:<pos:position pos:line="136" pos:column="18"/></case>
          <block pos:line="137" pos:column="11">{
            <if pos:line="138" pos:column="13">if <condition pos:line="138" pos:column="16">(   <comment type="block" pos:line="138" pos:column="20">/* If at end of pattern, it's an operator.  */</comment>
                   <expr><name pos:line="139" pos:column="20">p<pos:position pos:line="139" pos:column="21"/></name> <operator pos:line="139" pos:column="22">==<pos:position pos:line="139" pos:column="24"/></operator> <name pos:line="139" pos:column="25">pend<pos:position pos:line="139" pos:column="29"/></name>
                   <comment type="block" pos:line="140" pos:column="20">/* If context independent, it's an operator.  */</comment>
                <operator pos:line="141" pos:column="17">||<pos:position pos:line="141" pos:column="19"/></operator> <name pos:line="141" pos:column="20">syntax<pos:position pos:line="141" pos:column="26"/></name> <operator pos:line="141" pos:column="27">&amp;<pos:position pos:line="141" pos:column="32"/></operator> <name pos:line="141" pos:column="29">RE_CONTEXT_INDEP_ANCHORS<pos:position pos:line="141" pos:column="53"/></name>
                   <comment type="block" pos:line="142" pos:column="20">/* Otherwise, depends on what's next.  */</comment>
                <operator pos:line="143" pos:column="17">||<pos:position pos:line="143" pos:column="19"/></operator> <call><name pos:line="143" pos:column="20">at_endline_loc_p<pos:position pos:line="143" pos:column="36"/></name> <argument_list pos:line="143" pos:column="37">(<argument><expr><name pos:line="143" pos:column="38">p<pos:position pos:line="143" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="41">pend<pos:position pos:line="143" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="47">syntax<pos:position pos:line="143" pos:column="53"/></name></expr></argument>)<pos:position pos:line="143" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="143" pos:column="55"/></condition><then pos:line="143" pos:column="55">
               <block type="pseudo"><expr_stmt><expr><call><name pos:line="144" pos:column="16">BUF_PUSH<pos:position pos:line="144" pos:column="24"/></name> <argument_list pos:line="144" pos:column="25">(<argument><expr><name pos:line="144" pos:column="26">endline<pos:position pos:line="144" pos:column="33"/></name></expr></argument>)<pos:position pos:line="144" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="35"/></expr_stmt></block></then>
             <else pos:line="145" pos:column="14">else
               <block type="pseudo"><goto pos:line="146" pos:column="16">goto <name pos:line="146" pos:column="21">normal_char<pos:position pos:line="146" pos:column="32"/></name>;<pos:position pos:line="146" pos:column="33"/></goto></block></else></if>
           }<pos:position pos:line="147" pos:column="13"/></block>
           <break pos:line="148" pos:column="12">break;<pos:position pos:line="148" pos:column="18"/></break>


	<case pos:line="151" pos:column="9">case <expr><literal type="char" pos:line="151" pos:column="14">'+'<pos:position pos:line="151" pos:column="17"/></literal></expr>:<pos:position pos:line="151" pos:column="18"/></case>
        <case pos:line="152" pos:column="9">case <expr><literal type="char" pos:line="152" pos:column="14">'?'<pos:position pos:line="152" pos:column="17"/></literal></expr>:<pos:position pos:line="152" pos:column="18"/></case>
          <if pos:line="153" pos:column="11">if <condition pos:line="153" pos:column="14">(<expr><operator pos:line="153" pos:column="15">(<pos:position pos:line="153" pos:column="16"/></operator><name pos:line="153" pos:column="16">syntax<pos:position pos:line="153" pos:column="22"/></name> <operator pos:line="153" pos:column="23">&amp;<pos:position pos:line="153" pos:column="28"/></operator> <name pos:line="153" pos:column="25">RE_BK_PLUS_QM<pos:position pos:line="153" pos:column="38"/></name><operator pos:line="153" pos:column="38">)<pos:position pos:line="153" pos:column="39"/></operator>
              <operator pos:line="154" pos:column="15">||<pos:position pos:line="154" pos:column="17"/></operator> <operator pos:line="154" pos:column="18">(<pos:position pos:line="154" pos:column="19"/></operator><name pos:line="154" pos:column="19">syntax<pos:position pos:line="154" pos:column="25"/></name> <operator pos:line="154" pos:column="26">&amp;<pos:position pos:line="154" pos:column="31"/></operator> <name pos:line="154" pos:column="28">RE_LIMITED_OPS<pos:position pos:line="154" pos:column="42"/></name><operator pos:line="154" pos:column="42">)<pos:position pos:line="154" pos:column="43"/></operator></expr>)<pos:position pos:line="154" pos:column="44"/></condition><then pos:line="154" pos:column="44">
            <block type="pseudo"><goto pos:line="155" pos:column="13">goto <name pos:line="155" pos:column="18">normal_char<pos:position pos:line="155" pos:column="29"/></name>;<pos:position pos:line="155" pos:column="30"/></goto></block></then></if>
        <label><name pos:line="156" pos:column="9">handle_plus<pos:position pos:line="156" pos:column="20"/></name>:<pos:position pos:line="156" pos:column="21"/></label>
        <case pos:line="157" pos:column="9">case <expr><literal type="char" pos:line="157" pos:column="14">'*'<pos:position pos:line="157" pos:column="17"/></literal></expr>:<pos:position pos:line="157" pos:column="18"/></case>
          <comment type="block" pos:line="158" pos:column="11">/* If there is no previous pattern... */</comment>
          <if pos:line="159" pos:column="11">if <condition pos:line="159" pos:column="14">(<expr><operator pos:line="159" pos:column="15">!<pos:position pos:line="159" pos:column="16"/></operator><name pos:line="159" pos:column="16">laststart<pos:position pos:line="159" pos:column="25"/></name></expr>)<pos:position pos:line="159" pos:column="26"/></condition><then pos:line="159" pos:column="26">
            <block pos:line="160" pos:column="13">{
              <if pos:line="161" pos:column="15">if <condition pos:line="161" pos:column="18">(<expr><name pos:line="161" pos:column="19">syntax<pos:position pos:line="161" pos:column="25"/></name> <operator pos:line="161" pos:column="26">&amp;<pos:position pos:line="161" pos:column="31"/></operator> <name pos:line="161" pos:column="28">RE_CONTEXT_INVALID_OPS<pos:position pos:line="161" pos:column="50"/></name></expr>)<pos:position pos:line="161" pos:column="51"/></condition><then pos:line="161" pos:column="51">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="162" pos:column="17">FREE_STACK_RETURN<pos:position pos:line="162" pos:column="34"/></name> <argument_list pos:line="162" pos:column="35">(<argument><expr><name pos:line="162" pos:column="36">REG_BADRPT<pos:position pos:line="162" pos:column="46"/></name></expr></argument>)<pos:position pos:line="162" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="48"/></expr_stmt></block></then>
              <elseif pos:line="163" pos:column="15">else <if pos:line="163" pos:column="20">if <condition pos:line="163" pos:column="23">(<expr><operator pos:line="163" pos:column="24">!<pos:position pos:line="163" pos:column="25"/></operator><operator pos:line="163" pos:column="25">(<pos:position pos:line="163" pos:column="26"/></operator><name pos:line="163" pos:column="26">syntax<pos:position pos:line="163" pos:column="32"/></name> <operator pos:line="163" pos:column="33">&amp;<pos:position pos:line="163" pos:column="38"/></operator> <name pos:line="163" pos:column="35">RE_CONTEXT_INDEP_OPS<pos:position pos:line="163" pos:column="55"/></name><operator pos:line="163" pos:column="55">)<pos:position pos:line="163" pos:column="56"/></operator></expr>)<pos:position pos:line="163" pos:column="57"/></condition><then pos:line="163" pos:column="57">
                <block type="pseudo"><goto pos:line="164" pos:column="17">goto <name pos:line="164" pos:column="22">normal_char<pos:position pos:line="164" pos:column="33"/></name>;<pos:position pos:line="164" pos:column="34"/></goto></block></then></if></elseif></if>
            }<pos:position pos:line="165" pos:column="14"/></block></then></if>

          <block pos:line="167" pos:column="11">{
            <comment type="block" pos:line="168" pos:column="13">/* Are we optimizing this jump?  */</comment>
            <decl_stmt><decl><type><name pos:line="169" pos:column="13">boolean<pos:position pos:line="169" pos:column="20"/></name></type> <name pos:line="169" pos:column="21">keep_string_p<pos:position pos:line="169" pos:column="34"/></name> <init pos:line="169" pos:column="35">= <expr><literal type="boolean" pos:line="169" pos:column="37">false<pos:position pos:line="169" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="169" pos:column="43"/></decl_stmt>

            <comment type="block" pos:line="171" pos:column="13">/* 1 means zero (many) matches is allowed.  */</comment>
            <decl_stmt><decl><type><name pos:line="172" pos:column="13">char<pos:position pos:line="172" pos:column="17"/></name></type> <name pos:line="172" pos:column="18">zero_times_ok<pos:position pos:line="172" pos:column="31"/></name> <init pos:line="172" pos:column="32">= <expr><literal type="number" pos:line="172" pos:column="34">0<pos:position pos:line="172" pos:column="35"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="172" pos:column="37">many_times_ok<pos:position pos:line="172" pos:column="50"/></name> <init pos:line="172" pos:column="51">= <expr><literal type="number" pos:line="172" pos:column="53">0<pos:position pos:line="172" pos:column="54"/></literal></expr></init></decl>;<pos:position pos:line="172" pos:column="55"/></decl_stmt>

            <comment type="block" pos:line="174" pos:column="13">/* If there is a sequence of repetition chars, collapse it
               down to just one (the right one).  We can't combine
               interval operators with these because of, e.g., `a{2}*',
               which should only match an even number of `a's.  */</comment>

            <for pos:line="179" pos:column="13">for <control pos:line="179" pos:column="17">(<init pos:line="179" pos:column="18">;<pos:position pos:line="179" pos:column="19"/></init><condition pos:line="179" pos:column="19">;<pos:position pos:line="179" pos:column="20"/></condition><incr/>)<pos:position pos:line="179" pos:column="21"/></control>
              <block pos:line="180" pos:column="15">{
                <expr_stmt><expr><name pos:line="181" pos:column="17">zero_times_ok<pos:position pos:line="181" pos:column="30"/></name> <operator pos:line="181" pos:column="31">|=<pos:position pos:line="181" pos:column="33"/></operator> <name pos:line="181" pos:column="34">c<pos:position pos:line="181" pos:column="35"/></name> <operator pos:line="181" pos:column="36">!=<pos:position pos:line="181" pos:column="38"/></operator> <literal type="char" pos:line="181" pos:column="39">'+'<pos:position pos:line="181" pos:column="42"/></literal></expr>;<pos:position pos:line="181" pos:column="43"/></expr_stmt>
                <expr_stmt><expr><name pos:line="182" pos:column="17">many_times_ok<pos:position pos:line="182" pos:column="30"/></name> <operator pos:line="182" pos:column="31">|=<pos:position pos:line="182" pos:column="33"/></operator> <name pos:line="182" pos:column="34">c<pos:position pos:line="182" pos:column="35"/></name> <operator pos:line="182" pos:column="36">!=<pos:position pos:line="182" pos:column="38"/></operator> <literal type="char" pos:line="182" pos:column="39">'?'<pos:position pos:line="182" pos:column="42"/></literal></expr>;<pos:position pos:line="182" pos:column="43"/></expr_stmt>

                <if pos:line="184" pos:column="17">if <condition pos:line="184" pos:column="20">(<expr><name pos:line="184" pos:column="21">p<pos:position pos:line="184" pos:column="22"/></name> <operator pos:line="184" pos:column="23">==<pos:position pos:line="184" pos:column="25"/></operator> <name pos:line="184" pos:column="26">pend<pos:position pos:line="184" pos:column="30"/></name></expr>)<pos:position pos:line="184" pos:column="31"/></condition><then pos:line="184" pos:column="31">
                  <block type="pseudo"><break pos:line="185" pos:column="19">break;<pos:position pos:line="185" pos:column="25"/></break></block></then></if>

                <expr_stmt><expr><call><name pos:line="187" pos:column="17">PATFETCH<pos:position pos:line="187" pos:column="25"/></name> <argument_list pos:line="187" pos:column="26">(<argument><expr><name pos:line="187" pos:column="27">c<pos:position pos:line="187" pos:column="28"/></name></expr></argument>)<pos:position pos:line="187" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="30"/></expr_stmt>

                <if pos:line="189" pos:column="17">if <condition pos:line="189" pos:column="20">(<expr><name pos:line="189" pos:column="21">c<pos:position pos:line="189" pos:column="22"/></name> <operator pos:line="189" pos:column="23">==<pos:position pos:line="189" pos:column="25"/></operator> <literal type="char" pos:line="189" pos:column="26">'*'<pos:position pos:line="189" pos:column="29"/></literal>
                    <operator pos:line="190" pos:column="21">||<pos:position pos:line="190" pos:column="23"/></operator> <operator pos:line="190" pos:column="24">(<pos:position pos:line="190" pos:column="25"/></operator><operator pos:line="190" pos:column="25">!<pos:position pos:line="190" pos:column="26"/></operator><operator pos:line="190" pos:column="26">(<pos:position pos:line="190" pos:column="27"/></operator><name pos:line="190" pos:column="27">syntax<pos:position pos:line="190" pos:column="33"/></name> <operator pos:line="190" pos:column="34">&amp;<pos:position pos:line="190" pos:column="39"/></operator> <name pos:line="190" pos:column="36">RE_BK_PLUS_QM<pos:position pos:line="190" pos:column="49"/></name><operator pos:line="190" pos:column="49">)<pos:position pos:line="190" pos:column="50"/></operator> <operator pos:line="190" pos:column="51">&amp;&amp;<pos:position pos:line="190" pos:column="61"/></operator> <operator pos:line="190" pos:column="54">(<pos:position pos:line="190" pos:column="55"/></operator><name pos:line="190" pos:column="55">c<pos:position pos:line="190" pos:column="56"/></name> <operator pos:line="190" pos:column="57">==<pos:position pos:line="190" pos:column="59"/></operator> <literal type="char" pos:line="190" pos:column="60">'+'<pos:position pos:line="190" pos:column="63"/></literal> <operator pos:line="190" pos:column="64">||<pos:position pos:line="190" pos:column="66"/></operator> <name pos:line="190" pos:column="67">c<pos:position pos:line="190" pos:column="68"/></name> <operator pos:line="190" pos:column="69">==<pos:position pos:line="190" pos:column="71"/></operator> <literal type="char" pos:line="190" pos:column="72">'?'<pos:position pos:line="190" pos:column="75"/></literal><operator pos:line="190" pos:column="75">)<pos:position pos:line="190" pos:column="76"/></operator><operator pos:line="190" pos:column="76">)<pos:position pos:line="190" pos:column="77"/></operator></expr>)<pos:position pos:line="190" pos:column="78"/></condition><then pos:line="190" pos:column="78">
                  <block type="pseudo"><empty_stmt pos:line="191" pos:column="19">;<pos:position pos:line="191" pos:column="20"/></empty_stmt></block></then>

                <elseif pos:line="193" pos:column="17">else <if pos:line="193" pos:column="22">if <condition pos:line="193" pos:column="25">(<expr><name pos:line="193" pos:column="26">syntax<pos:position pos:line="193" pos:column="32"/></name> <operator pos:line="193" pos:column="33">&amp;<pos:position pos:line="193" pos:column="38"/></operator> <name pos:line="193" pos:column="35">RE_BK_PLUS_QM<pos:position pos:line="193" pos:column="48"/></name>  <operator pos:line="193" pos:column="50">&amp;&amp;<pos:position pos:line="193" pos:column="60"/></operator>  <name pos:line="193" pos:column="54">c<pos:position pos:line="193" pos:column="55"/></name> <operator pos:line="193" pos:column="56">==<pos:position pos:line="193" pos:column="58"/></operator> <literal type="char" pos:line="193" pos:column="59">'\\'<pos:position pos:line="193" pos:column="63"/></literal></expr>)<pos:position pos:line="193" pos:column="64"/></condition><then pos:line="193" pos:column="64">
                  <block pos:line="194" pos:column="19">{
                    <if pos:line="195" pos:column="21">if <condition pos:line="195" pos:column="24">(<expr><name pos:line="195" pos:column="25">p<pos:position pos:line="195" pos:column="26"/></name> <operator pos:line="195" pos:column="27">==<pos:position pos:line="195" pos:column="29"/></operator> <name pos:line="195" pos:column="30">pend<pos:position pos:line="195" pos:column="34"/></name></expr>)<pos:position pos:line="195" pos:column="35"/></condition><then pos:line="195" pos:column="35"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="195" pos:column="36">FREE_STACK_RETURN<pos:position pos:line="195" pos:column="53"/></name> <argument_list pos:line="195" pos:column="54">(<argument><expr><name pos:line="195" pos:column="55">REG_EESCAPE<pos:position pos:line="195" pos:column="66"/></name></expr></argument>)<pos:position pos:line="195" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="68"/></expr_stmt></block></then></if>

                    <expr_stmt><expr><call><name pos:line="197" pos:column="21">PATFETCH<pos:position pos:line="197" pos:column="29"/></name> <argument_list pos:line="197" pos:column="30">(<argument><expr><name pos:line="197" pos:column="31">c1<pos:position pos:line="197" pos:column="33"/></name></expr></argument>)<pos:position pos:line="197" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="35"/></expr_stmt>
                    <if pos:line="198" pos:column="21">if <condition pos:line="198" pos:column="24">(<expr><operator pos:line="198" pos:column="25">!<pos:position pos:line="198" pos:column="26"/></operator><operator pos:line="198" pos:column="26">(<pos:position pos:line="198" pos:column="27"/></operator><name pos:line="198" pos:column="27">c1<pos:position pos:line="198" pos:column="29"/></name> <operator pos:line="198" pos:column="30">==<pos:position pos:line="198" pos:column="32"/></operator> <literal type="char" pos:line="198" pos:column="33">'+'<pos:position pos:line="198" pos:column="36"/></literal> <operator pos:line="198" pos:column="37">||<pos:position pos:line="198" pos:column="39"/></operator> <name pos:line="198" pos:column="40">c1<pos:position pos:line="198" pos:column="42"/></name> <operator pos:line="198" pos:column="43">==<pos:position pos:line="198" pos:column="45"/></operator> <literal type="char" pos:line="198" pos:column="46">'?'<pos:position pos:line="198" pos:column="49"/></literal><operator pos:line="198" pos:column="49">)<pos:position pos:line="198" pos:column="50"/></operator></expr>)<pos:position pos:line="198" pos:column="51"/></condition><then pos:line="198" pos:column="51">
                      <block pos:line="199" pos:column="23">{
                        <expr_stmt><expr><name pos:line="200" pos:column="25">PATUNFETCH<pos:position pos:line="200" pos:column="35"/></name></expr>;<pos:position pos:line="200" pos:column="36"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="201" pos:column="25">PATUNFETCH<pos:position pos:line="201" pos:column="35"/></name></expr>;<pos:position pos:line="201" pos:column="36"/></expr_stmt>
                        <break pos:line="202" pos:column="25">break;<pos:position pos:line="202" pos:column="31"/></break>
                      }<pos:position pos:line="203" pos:column="24"/></block></then></if>

                    <expr_stmt><expr><name pos:line="205" pos:column="21">c<pos:position pos:line="205" pos:column="22"/></name> <operator pos:line="205" pos:column="23">=<pos:position pos:line="205" pos:column="24"/></operator> <name pos:line="205" pos:column="25">c1<pos:position pos:line="205" pos:column="27"/></name></expr>;<pos:position pos:line="205" pos:column="28"/></expr_stmt>
                  }<pos:position pos:line="206" pos:column="20"/></block></then></if></elseif>
                <else pos:line="207" pos:column="17">else
                  <block pos:line="208" pos:column="19">{
                    <expr_stmt><expr><name pos:line="209" pos:column="21">PATUNFETCH<pos:position pos:line="209" pos:column="31"/></name></expr>;<pos:position pos:line="209" pos:column="32"/></expr_stmt>
                    <break pos:line="210" pos:column="21">break;<pos:position pos:line="210" pos:column="27"/></break>
                  }<pos:position pos:line="211" pos:column="20"/></block></else></if>

                <comment type="block" pos:line="213" pos:column="17">/* If we get here, we found another repeat character.  */</comment>
               }<pos:position pos:line="214" pos:column="17"/></block></for>

            <comment type="block" pos:line="216" pos:column="13">/* Star, etc. applied to an empty pattern is equivalent
               to an empty pattern.  */</comment>
            <if pos:line="218" pos:column="13">if <condition pos:line="218" pos:column="16">(<expr><operator pos:line="218" pos:column="17">!<pos:position pos:line="218" pos:column="18"/></operator><name pos:line="218" pos:column="18">laststart<pos:position pos:line="218" pos:column="27"/></name></expr>)<pos:position pos:line="218" pos:column="28"/></condition><then pos:line="218" pos:column="28">
              <block type="pseudo"><break pos:line="219" pos:column="15">break;<pos:position pos:line="219" pos:column="21"/></break></block></then></if>

            <comment type="block" pos:line="221" pos:column="13">/* Now we know whether or not zero matches is allowed
               and also whether or not two or more matches is allowed.  */</comment>
            <if pos:line="223" pos:column="13">if <condition pos:line="223" pos:column="16">(<expr><name pos:line="223" pos:column="17">many_times_ok<pos:position pos:line="223" pos:column="30"/></name></expr>)<pos:position pos:line="223" pos:column="31"/></condition><then pos:line="223" pos:column="31">
              <block pos:line="224" pos:column="15">{ <comment type="block" pos:line="224" pos:column="17">/* More than one repetition is allowed, so put in at the
                   end a backward relative jump from `b' to before the next
                   jump we're going to put in below (which jumps from
                   laststart to after this jump).

                   But if we are at the `*' in the exact sequence `.*\n',
                   insert an unconditional jump backwards to the .,
                   instead of the beginning of the loop.  This way we only
                   push a failure point once, instead of every time
                   through the loop.  */</comment>
                <expr_stmt><expr><call><name pos:line="234" pos:column="17">assert<pos:position pos:line="234" pos:column="23"/></name> <argument_list pos:line="234" pos:column="24">(<argument><expr><name pos:line="234" pos:column="25">p<pos:position pos:line="234" pos:column="26"/></name> <operator pos:line="234" pos:column="27">-<pos:position pos:line="234" pos:column="28"/></operator> <literal type="number" pos:line="234" pos:column="29">1<pos:position pos:line="234" pos:column="30"/></literal> <operator pos:line="234" pos:column="31">&gt;<pos:position pos:line="234" pos:column="35"/></operator> <name pos:line="234" pos:column="33">pattern<pos:position pos:line="234" pos:column="40"/></name></expr></argument>)<pos:position pos:line="234" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="234" pos:column="42"/></expr_stmt>

                <comment type="block" pos:line="236" pos:column="17">/* Allocate the space for the jump.  */</comment>
                <expr_stmt><expr><call><name pos:line="237" pos:column="17">GET_BUFFER_SPACE<pos:position pos:line="237" pos:column="33"/></name> <argument_list pos:line="237" pos:column="34">(<argument><expr><literal type="number" pos:line="237" pos:column="35">3<pos:position pos:line="237" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="237" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="237" pos:column="38"/></expr_stmt>

                <comment type="block" pos:line="239" pos:column="17">/* We know we are not at the first character of the pattern,
                   because laststart was nonzero.  And we've already
                   incremented `p', by the way, to be the character after
                   the `*'.  Do we have to do something analogous here
                   for null bytes, because of RE_DOT_NOT_NULL?  */</comment>
                <if pos:line="244" pos:column="17">if <condition pos:line="244" pos:column="20">(<expr><call><name pos:line="244" pos:column="21">TRANSLATE<pos:position pos:line="244" pos:column="30"/></name> <argument_list pos:line="244" pos:column="31">(<argument><expr><operator pos:line="244" pos:column="32">*<pos:position pos:line="244" pos:column="33"/></operator><operator pos:line="244" pos:column="33">(<pos:position pos:line="244" pos:column="34"/></operator><name pos:line="244" pos:column="34">p<pos:position pos:line="244" pos:column="35"/></name> <operator pos:line="244" pos:column="36">-<pos:position pos:line="244" pos:column="37"/></operator> <literal type="number" pos:line="244" pos:column="38">2<pos:position pos:line="244" pos:column="39"/></literal><operator pos:line="244" pos:column="39">)<pos:position pos:line="244" pos:column="40"/></operator></expr></argument>)<pos:position pos:line="244" pos:column="41"/></argument_list></call> <operator pos:line="244" pos:column="42">==<pos:position pos:line="244" pos:column="44"/></operator> <call><name pos:line="244" pos:column="45">TRANSLATE<pos:position pos:line="244" pos:column="54"/></name> <argument_list pos:line="244" pos:column="55">(<argument><expr><literal type="char" pos:line="244" pos:column="56">'.'<pos:position pos:line="244" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="244" pos:column="60"/></argument_list></call>
		    <operator pos:line="245" pos:column="21">&amp;&amp;<pos:position pos:line="245" pos:column="31"/></operator> <name pos:line="245" pos:column="24">zero_times_ok<pos:position pos:line="245" pos:column="37"/></name>
                    <operator pos:line="246" pos:column="21">&amp;&amp;<pos:position pos:line="246" pos:column="31"/></operator> <name pos:line="246" pos:column="24">p<pos:position pos:line="246" pos:column="25"/></name> <operator pos:line="246" pos:column="26">&lt;<pos:position pos:line="246" pos:column="30"/></operator> <name pos:line="246" pos:column="28">pend<pos:position pos:line="246" pos:column="32"/></name> <operator pos:line="246" pos:column="33">&amp;&amp;<pos:position pos:line="246" pos:column="43"/></operator> <call><name pos:line="246" pos:column="36">TRANSLATE<pos:position pos:line="246" pos:column="45"/></name> <argument_list pos:line="246" pos:column="46">(<argument><expr><operator pos:line="246" pos:column="47">*<pos:position pos:line="246" pos:column="48"/></operator><name pos:line="246" pos:column="48">p<pos:position pos:line="246" pos:column="49"/></name></expr></argument>)<pos:position pos:line="246" pos:column="50"/></argument_list></call> <operator pos:line="246" pos:column="51">==<pos:position pos:line="246" pos:column="53"/></operator> <call><name pos:line="246" pos:column="54">TRANSLATE<pos:position pos:line="246" pos:column="63"/></name> <argument_list pos:line="246" pos:column="64">(<argument><expr><literal type="char" pos:line="246" pos:column="65">'\n'<pos:position pos:line="246" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="246" pos:column="70"/></argument_list></call>
                    <operator pos:line="247" pos:column="21">&amp;&amp;<pos:position pos:line="247" pos:column="31"/></operator> <operator pos:line="247" pos:column="24">!<pos:position pos:line="247" pos:column="25"/></operator><operator pos:line="247" pos:column="25">(<pos:position pos:line="247" pos:column="26"/></operator><name pos:line="247" pos:column="26">syntax<pos:position pos:line="247" pos:column="32"/></name> <operator pos:line="247" pos:column="33">&amp;<pos:position pos:line="247" pos:column="38"/></operator> <name pos:line="247" pos:column="35">RE_DOT_NEWLINE<pos:position pos:line="247" pos:column="49"/></name><operator pos:line="247" pos:column="49">)<pos:position pos:line="247" pos:column="50"/></operator></expr>)<pos:position pos:line="247" pos:column="51"/></condition><then pos:line="247" pos:column="51">
                  <block pos:line="248" pos:column="19">{ <comment type="block" pos:line="248" pos:column="21">/* We have .*\n.  */</comment>
                    <expr_stmt><expr><call><name pos:line="249" pos:column="21">STORE_JUMP<pos:position pos:line="249" pos:column="31"/></name> <argument_list pos:line="249" pos:column="32">(<argument><expr><name pos:line="249" pos:column="33">jump<pos:position pos:line="249" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="249" pos:column="39">b<pos:position pos:line="249" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="249" pos:column="42">laststart<pos:position pos:line="249" pos:column="51"/></name></expr></argument>)<pos:position pos:line="249" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="53"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="250" pos:column="21">keep_string_p<pos:position pos:line="250" pos:column="34"/></name> <operator pos:line="250" pos:column="35">=<pos:position pos:line="250" pos:column="36"/></operator> <literal type="boolean" pos:line="250" pos:column="37">true<pos:position pos:line="250" pos:column="41"/></literal></expr>;<pos:position pos:line="250" pos:column="42"/></expr_stmt>
                  }<pos:position pos:line="251" pos:column="20"/></block></then>
                <else pos:line="252" pos:column="17">else
                  <comment type="block" pos:line="253" pos:column="19">/* Anything else.  */</comment>
                  <block type="pseudo"><expr_stmt><expr><call><name pos:line="254" pos:column="19">STORE_JUMP<pos:position pos:line="254" pos:column="29"/></name> <argument_list pos:line="254" pos:column="30">(<argument><expr><name pos:line="254" pos:column="31">maybe_pop_jump<pos:position pos:line="254" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="254" pos:column="47">b<pos:position pos:line="254" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="254" pos:column="50">laststart<pos:position pos:line="254" pos:column="59"/></name> <operator pos:line="254" pos:column="60">-<pos:position pos:line="254" pos:column="61"/></operator> <literal type="number" pos:line="254" pos:column="62">3<pos:position pos:line="254" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="254" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="254" pos:column="65"/></expr_stmt></block></else></if>

                <comment type="block" pos:line="256" pos:column="17">/* We've added more stuff to the buffer.  */</comment>
                <expr_stmt><expr><name pos:line="257" pos:column="17">b<pos:position pos:line="257" pos:column="18"/></name> <operator pos:line="257" pos:column="19">+=<pos:position pos:line="257" pos:column="21"/></operator> <literal type="number" pos:line="257" pos:column="22">3<pos:position pos:line="257" pos:column="23"/></literal></expr>;<pos:position pos:line="257" pos:column="24"/></expr_stmt>
              }<pos:position pos:line="258" pos:column="16"/></block></then></if>

            <comment type="block" pos:line="260" pos:column="13">/* On failure, jump from laststart to b + 3, which will be the
               end of the buffer after this jump is inserted.  */</comment>
            <expr_stmt><expr><call><name pos:line="262" pos:column="13">GET_BUFFER_SPACE<pos:position pos:line="262" pos:column="29"/></name> <argument_list pos:line="262" pos:column="30">(<argument><expr><literal type="number" pos:line="262" pos:column="31">3<pos:position pos:line="262" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="262" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="262" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="263" pos:column="13">INSERT_JUMP<pos:position pos:line="263" pos:column="24"/></name> <argument_list pos:line="263" pos:column="25">(<argument><expr><ternary><condition><expr><name pos:line="263" pos:column="26">keep_string_p<pos:position pos:line="263" pos:column="39"/></name></expr> ?<pos:position pos:line="263" pos:column="41"/></condition><then pos:line="263" pos:column="41"> <expr><name pos:line="263" pos:column="42">on_failure_keep_string_jump<pos:position pos:line="263" pos:column="69"/></name></expr>
                                       <pos:position pos:line="264" pos:column="40"/></then><else pos:line="264" pos:column="40">: <expr><name pos:line="264" pos:column="42">on_failure_jump<pos:position pos:line="264" pos:column="57"/></name></expr></else></ternary></expr></argument>,
                         <argument><expr><name pos:line="265" pos:column="26">laststart<pos:position pos:line="265" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="265" pos:column="37">b<pos:position pos:line="265" pos:column="38"/></name> <operator pos:line="265" pos:column="39">+<pos:position pos:line="265" pos:column="40"/></operator> <literal type="number" pos:line="265" pos:column="41">3<pos:position pos:line="265" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="265" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="265" pos:column="44"/></expr_stmt>
            <expr_stmt><expr><name pos:line="266" pos:column="13">pending_exact<pos:position pos:line="266" pos:column="26"/></name> <operator pos:line="266" pos:column="27">=<pos:position pos:line="266" pos:column="28"/></operator> <literal type="number" pos:line="266" pos:column="29">0<pos:position pos:line="266" pos:column="30"/></literal></expr>;<pos:position pos:line="266" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name pos:line="267" pos:column="13">b<pos:position pos:line="267" pos:column="14"/></name> <operator pos:line="267" pos:column="15">+=<pos:position pos:line="267" pos:column="17"/></operator> <literal type="number" pos:line="267" pos:column="18">3<pos:position pos:line="267" pos:column="19"/></literal></expr>;<pos:position pos:line="267" pos:column="20"/></expr_stmt>

            <if pos:line="269" pos:column="13">if <condition pos:line="269" pos:column="16">(<expr><operator pos:line="269" pos:column="17">!<pos:position pos:line="269" pos:column="18"/></operator><name pos:line="269" pos:column="18">zero_times_ok<pos:position pos:line="269" pos:column="31"/></name></expr>)<pos:position pos:line="269" pos:column="32"/></condition><then pos:line="269" pos:column="32">
              <block pos:line="270" pos:column="15">{
                <comment type="block" pos:line="271" pos:column="17">/* At least one repetition is required, so insert a
                   `dummy_failure_jump' before the initial
                   `on_failure_jump' instruction of the loop. This
                   effects a skip over that instruction the first time
                   we hit that loop.  */</comment>
                <expr_stmt><expr><call><name pos:line="276" pos:column="17">GET_BUFFER_SPACE<pos:position pos:line="276" pos:column="33"/></name> <argument_list pos:line="276" pos:column="34">(<argument><expr><literal type="number" pos:line="276" pos:column="35">3<pos:position pos:line="276" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="276" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="276" pos:column="38"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="277" pos:column="17">INSERT_JUMP<pos:position pos:line="277" pos:column="28"/></name> <argument_list pos:line="277" pos:column="29">(<argument><expr><name pos:line="277" pos:column="30">dummy_failure_jump<pos:position pos:line="277" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="277" pos:column="50">laststart<pos:position pos:line="277" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="277" pos:column="61">laststart<pos:position pos:line="277" pos:column="70"/></name> <operator pos:line="277" pos:column="71">+<pos:position pos:line="277" pos:column="72"/></operator> <literal type="number" pos:line="277" pos:column="73">6<pos:position pos:line="277" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="277" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="277" pos:column="76"/></expr_stmt>
                <expr_stmt><expr><name pos:line="278" pos:column="17">b<pos:position pos:line="278" pos:column="18"/></name> <operator pos:line="278" pos:column="19">+=<pos:position pos:line="278" pos:column="21"/></operator> <literal type="number" pos:line="278" pos:column="22">3<pos:position pos:line="278" pos:column="23"/></literal></expr>;<pos:position pos:line="278" pos:column="24"/></expr_stmt>
              }<pos:position pos:line="279" pos:column="16"/></block></then></if>
            }<pos:position pos:line="280" pos:column="14"/></block>
	  <break pos:line="281" pos:column="11">break;<pos:position pos:line="281" pos:column="17"/></break>


	<case pos:line="284" pos:column="9">case <expr><literal type="char" pos:line="284" pos:column="14">'.'<pos:position pos:line="284" pos:column="17"/></literal></expr>:<pos:position pos:line="284" pos:column="18"/></case>
          <expr_stmt><expr><name pos:line="285" pos:column="11">laststart<pos:position pos:line="285" pos:column="20"/></name> <operator pos:line="285" pos:column="21">=<pos:position pos:line="285" pos:column="22"/></operator> <name pos:line="285" pos:column="23">b<pos:position pos:line="285" pos:column="24"/></name></expr>;<pos:position pos:line="285" pos:column="25"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="286" pos:column="11">BUF_PUSH<pos:position pos:line="286" pos:column="19"/></name> <argument_list pos:line="286" pos:column="20">(<argument><expr><name pos:line="286" pos:column="21">anychar<pos:position pos:line="286" pos:column="28"/></name></expr></argument>)<pos:position pos:line="286" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="286" pos:column="30"/></expr_stmt>
          <break pos:line="287" pos:column="11">break;<pos:position pos:line="287" pos:column="17"/></break>


        <case pos:line="290" pos:column="9">case <expr><literal type="char" pos:line="290" pos:column="14">'['<pos:position pos:line="290" pos:column="17"/></literal></expr>:<pos:position pos:line="290" pos:column="18"/></case>
          <block pos:line="291" pos:column="11">{
            <decl_stmt><decl><type><name pos:line="292" pos:column="13">boolean<pos:position pos:line="292" pos:column="20"/></name></type> <name pos:line="292" pos:column="21">had_char_class<pos:position pos:line="292" pos:column="35"/></name> <init pos:line="292" pos:column="36">= <expr><literal type="boolean" pos:line="292" pos:column="38">false<pos:position pos:line="292" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="292" pos:column="44"/></decl_stmt>

            <if pos:line="294" pos:column="13">if <condition pos:line="294" pos:column="16">(<expr><name pos:line="294" pos:column="17">p<pos:position pos:line="294" pos:column="18"/></name> <operator pos:line="294" pos:column="19">==<pos:position pos:line="294" pos:column="21"/></operator> <name pos:line="294" pos:column="22">pend<pos:position pos:line="294" pos:column="26"/></name></expr>)<pos:position pos:line="294" pos:column="27"/></condition><then pos:line="294" pos:column="27"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="294" pos:column="28">FREE_STACK_RETURN<pos:position pos:line="294" pos:column="45"/></name> <argument_list pos:line="294" pos:column="46">(<argument><expr><name pos:line="294" pos:column="47">REG_EBRACK<pos:position pos:line="294" pos:column="57"/></name></expr></argument>)<pos:position pos:line="294" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="294" pos:column="59"/></expr_stmt></block></then></if>

            <comment type="block" pos:line="296" pos:column="13">/* Ensure that we have enough space to push a charset: the
               opcode, the length count, and the bitset; 34 bytes in all.  */</comment>
	    <expr_stmt><expr><call><name pos:line="298" pos:column="13">GET_BUFFER_SPACE<pos:position pos:line="298" pos:column="29"/></name> <argument_list pos:line="298" pos:column="30">(<argument><expr><literal type="number" pos:line="298" pos:column="31">34<pos:position pos:line="298" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="298" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="298" pos:column="35"/></expr_stmt>

            <expr_stmt><expr><name pos:line="300" pos:column="13">laststart<pos:position pos:line="300" pos:column="22"/></name> <operator pos:line="300" pos:column="23">=<pos:position pos:line="300" pos:column="24"/></operator> <name pos:line="300" pos:column="25">b<pos:position pos:line="300" pos:column="26"/></name></expr>;<pos:position pos:line="300" pos:column="27"/></expr_stmt>

            <comment type="block" pos:line="302" pos:column="13">/* We test `*p == '^' twice, instead of using an if
               statement, so we only need one BUF_PUSH.  */</comment>
            <expr_stmt><expr><call><name pos:line="304" pos:column="13">BUF_PUSH<pos:position pos:line="304" pos:column="21"/></name> <argument_list pos:line="304" pos:column="22">(<argument><expr><ternary><condition><expr><operator pos:line="304" pos:column="23">*<pos:position pos:line="304" pos:column="24"/></operator><name pos:line="304" pos:column="24">p<pos:position pos:line="304" pos:column="25"/></name> <operator pos:line="304" pos:column="26">==<pos:position pos:line="304" pos:column="28"/></operator> <literal type="char" pos:line="304" pos:column="29">'^'<pos:position pos:line="304" pos:column="32"/></literal></expr> ?<pos:position pos:line="304" pos:column="34"/></condition><then pos:line="304" pos:column="34"> <expr><name pos:line="304" pos:column="35">charset_not<pos:position pos:line="304" pos:column="46"/></name></expr> <pos:position pos:line="304" pos:column="47"/></then><else pos:line="304" pos:column="47">: <expr><name pos:line="304" pos:column="49">charset<pos:position pos:line="304" pos:column="56"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="304" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="304" pos:column="58"/></expr_stmt>
            <if pos:line="305" pos:column="13">if <condition pos:line="305" pos:column="16">(<expr><operator pos:line="305" pos:column="17">*<pos:position pos:line="305" pos:column="18"/></operator><name pos:line="305" pos:column="18">p<pos:position pos:line="305" pos:column="19"/></name> <operator pos:line="305" pos:column="20">==<pos:position pos:line="305" pos:column="22"/></operator> <literal type="char" pos:line="305" pos:column="23">'^'<pos:position pos:line="305" pos:column="26"/></literal></expr>)<pos:position pos:line="305" pos:column="27"/></condition><then pos:line="305" pos:column="27">
              <block type="pseudo"><expr_stmt><expr><name pos:line="306" pos:column="15">p<pos:position pos:line="306" pos:column="16"/></name><operator pos:line="306" pos:column="16">++<pos:position pos:line="306" pos:column="18"/></operator></expr>;<pos:position pos:line="306" pos:column="19"/></expr_stmt></block></then></if>

            <comment type="block" pos:line="308" pos:column="13">/* Remember the first position in the bracket expression.  */</comment>
            <expr_stmt><expr><name pos:line="309" pos:column="13">p1<pos:position pos:line="309" pos:column="15"/></name> <operator pos:line="309" pos:column="16">=<pos:position pos:line="309" pos:column="17"/></operator> <name pos:line="309" pos:column="18">p<pos:position pos:line="309" pos:column="19"/></name></expr>;<pos:position pos:line="309" pos:column="20"/></expr_stmt>

            <comment type="block" pos:line="311" pos:column="13">/* Push the number of bytes in the bitmap.  */</comment>
            <expr_stmt><expr><call><name pos:line="312" pos:column="13">BUF_PUSH<pos:position pos:line="312" pos:column="21"/></name> <argument_list pos:line="312" pos:column="22">(<argument><expr><operator pos:line="312" pos:column="23">(<pos:position pos:line="312" pos:column="24"/></operator><literal type="number" pos:line="312" pos:column="24">1<pos:position pos:line="312" pos:column="25"/></literal> <operator pos:line="312" pos:column="26">&lt;&lt;<pos:position pos:line="312" pos:column="34"/></operator> <name pos:line="312" pos:column="29">BYTEWIDTH<pos:position pos:line="312" pos:column="38"/></name><operator pos:line="312" pos:column="38">)<pos:position pos:line="312" pos:column="39"/></operator> <operator pos:line="312" pos:column="40">/<pos:position pos:line="312" pos:column="41"/></operator> <name pos:line="312" pos:column="42">BYTEWIDTH<pos:position pos:line="312" pos:column="51"/></name></expr></argument>)<pos:position pos:line="312" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="312" pos:column="53"/></expr_stmt>

            <comment type="block" pos:line="314" pos:column="13">/* Clear the whole map.  */</comment>
            <expr_stmt><expr><call><name pos:line="315" pos:column="13">bzero<pos:position pos:line="315" pos:column="18"/></name> <argument_list pos:line="315" pos:column="19">(<argument><expr><name pos:line="315" pos:column="20">b<pos:position pos:line="315" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="315" pos:column="23">(<pos:position pos:line="315" pos:column="24"/></operator><literal type="number" pos:line="315" pos:column="24">1<pos:position pos:line="315" pos:column="25"/></literal> <operator pos:line="315" pos:column="26">&lt;&lt;<pos:position pos:line="315" pos:column="34"/></operator> <name pos:line="315" pos:column="29">BYTEWIDTH<pos:position pos:line="315" pos:column="38"/></name><operator pos:line="315" pos:column="38">)<pos:position pos:line="315" pos:column="39"/></operator> <operator pos:line="315" pos:column="40">/<pos:position pos:line="315" pos:column="41"/></operator> <name pos:line="315" pos:column="42">BYTEWIDTH<pos:position pos:line="315" pos:column="51"/></name></expr></argument>)<pos:position pos:line="315" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="315" pos:column="53"/></expr_stmt>

            <comment type="block" pos:line="317" pos:column="13">/* charset_not matches newline according to a syntax bit.  */</comment>
            <if pos:line="318" pos:column="13">if <condition pos:line="318" pos:column="16">(<expr><operator pos:line="318" pos:column="17">(<pos:position pos:line="318" pos:column="18"/></operator><name pos:line="318" pos:column="18">re_opcode_t<pos:position pos:line="318" pos:column="29"/></name><operator pos:line="318" pos:column="29">)<pos:position pos:line="318" pos:column="30"/></operator> <name><name pos:line="318" pos:column="31">b<pos:position pos:line="318" pos:column="32"/></name><index pos:line="318" pos:column="32">[<expr><operator pos:line="318" pos:column="33">-<pos:position pos:line="318" pos:column="34"/></operator><literal type="number" pos:line="318" pos:column="34">2<pos:position pos:line="318" pos:column="35"/></literal></expr>]<pos:position pos:line="318" pos:column="36"/></index></name> <operator pos:line="318" pos:column="37">==<pos:position pos:line="318" pos:column="39"/></operator> <name pos:line="318" pos:column="40">charset_not<pos:position pos:line="318" pos:column="51"/></name>
                <operator pos:line="319" pos:column="17">&amp;&amp;<pos:position pos:line="319" pos:column="27"/></operator> <operator pos:line="319" pos:column="20">(<pos:position pos:line="319" pos:column="21"/></operator><name pos:line="319" pos:column="21">syntax<pos:position pos:line="319" pos:column="27"/></name> <operator pos:line="319" pos:column="28">&amp;<pos:position pos:line="319" pos:column="33"/></operator> <name pos:line="319" pos:column="30">RE_HAT_LISTS_NOT_NEWLINE<pos:position pos:line="319" pos:column="54"/></name><operator pos:line="319" pos:column="54">)<pos:position pos:line="319" pos:column="55"/></operator></expr>)<pos:position pos:line="319" pos:column="56"/></condition><then pos:line="319" pos:column="56">
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="320" pos:column="15">SET_LIST_BIT<pos:position pos:line="320" pos:column="27"/></name> <argument_list pos:line="320" pos:column="28">(<argument><expr><literal type="char" pos:line="320" pos:column="29">'\n'<pos:position pos:line="320" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="320" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="320" pos:column="35"/></expr_stmt></block></then></if>

            <comment type="block" pos:line="322" pos:column="13">/* Read in characters and ranges, setting map bits.  */</comment>
            <for pos:line="323" pos:column="13">for <control pos:line="323" pos:column="17">(<init pos:line="323" pos:column="18">;<pos:position pos:line="323" pos:column="19"/></init><condition pos:line="323" pos:column="19">;<pos:position pos:line="323" pos:column="20"/></condition><incr/>)<pos:position pos:line="323" pos:column="21"/></control>
              <block pos:line="324" pos:column="15">{
                <if pos:line="325" pos:column="17">if <condition pos:line="325" pos:column="20">(<expr><name pos:line="325" pos:column="21">p<pos:position pos:line="325" pos:column="22"/></name> <operator pos:line="325" pos:column="23">==<pos:position pos:line="325" pos:column="25"/></operator> <name pos:line="325" pos:column="26">pend<pos:position pos:line="325" pos:column="30"/></name></expr>)<pos:position pos:line="325" pos:column="31"/></condition><then pos:line="325" pos:column="31"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="325" pos:column="32">FREE_STACK_RETURN<pos:position pos:line="325" pos:column="49"/></name> <argument_list pos:line="325" pos:column="50">(<argument><expr><name pos:line="325" pos:column="51">REG_EBRACK<pos:position pos:line="325" pos:column="61"/></name></expr></argument>)<pos:position pos:line="325" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="325" pos:column="63"/></expr_stmt></block></then></if>

                <expr_stmt><expr><call><name pos:line="327" pos:column="17">PATFETCH<pos:position pos:line="327" pos:column="25"/></name> <argument_list pos:line="327" pos:column="26">(<argument><expr><name pos:line="327" pos:column="27">c<pos:position pos:line="327" pos:column="28"/></name></expr></argument>)<pos:position pos:line="327" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="327" pos:column="30"/></expr_stmt>

                <comment type="block" pos:line="329" pos:column="17">/* \ might escape characters inside [...] and [^...].  */</comment>
                <if pos:line="330" pos:column="17">if <condition pos:line="330" pos:column="20">(<expr><operator pos:line="330" pos:column="21">(<pos:position pos:line="330" pos:column="22"/></operator><name pos:line="330" pos:column="22">syntax<pos:position pos:line="330" pos:column="28"/></name> <operator pos:line="330" pos:column="29">&amp;<pos:position pos:line="330" pos:column="34"/></operator> <name pos:line="330" pos:column="31">RE_BACKSLASH_ESCAPE_IN_LISTS<pos:position pos:line="330" pos:column="59"/></name><operator pos:line="330" pos:column="59">)<pos:position pos:line="330" pos:column="60"/></operator> <operator pos:line="330" pos:column="61">&amp;&amp;<pos:position pos:line="330" pos:column="71"/></operator> <name pos:line="330" pos:column="64">c<pos:position pos:line="330" pos:column="65"/></name> <operator pos:line="330" pos:column="66">==<pos:position pos:line="330" pos:column="68"/></operator> <literal type="char" pos:line="330" pos:column="69">'\\'<pos:position pos:line="330" pos:column="73"/></literal></expr>)<pos:position pos:line="330" pos:column="74"/></condition><then pos:line="330" pos:column="74">
                  <block pos:line="331" pos:column="19">{
                    <if pos:line="332" pos:column="21">if <condition pos:line="332" pos:column="24">(<expr><name pos:line="332" pos:column="25">p<pos:position pos:line="332" pos:column="26"/></name> <operator pos:line="332" pos:column="27">==<pos:position pos:line="332" pos:column="29"/></operator> <name pos:line="332" pos:column="30">pend<pos:position pos:line="332" pos:column="34"/></name></expr>)<pos:position pos:line="332" pos:column="35"/></condition><then pos:line="332" pos:column="35"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="332" pos:column="36">FREE_STACK_RETURN<pos:position pos:line="332" pos:column="53"/></name> <argument_list pos:line="332" pos:column="54">(<argument><expr><name pos:line="332" pos:column="55">REG_EESCAPE<pos:position pos:line="332" pos:column="66"/></name></expr></argument>)<pos:position pos:line="332" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="332" pos:column="68"/></expr_stmt></block></then></if>

                    <expr_stmt><expr><call><name pos:line="334" pos:column="21">PATFETCH<pos:position pos:line="334" pos:column="29"/></name> <argument_list pos:line="334" pos:column="30">(<argument><expr><name pos:line="334" pos:column="31">c1<pos:position pos:line="334" pos:column="33"/></name></expr></argument>)<pos:position pos:line="334" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="334" pos:column="35"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="335" pos:column="21">SET_LIST_BIT<pos:position pos:line="335" pos:column="33"/></name> <argument_list pos:line="335" pos:column="34">(<argument><expr><name pos:line="335" pos:column="35">c1<pos:position pos:line="335" pos:column="37"/></name></expr></argument>)<pos:position pos:line="335" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="335" pos:column="39"/></expr_stmt>
                    <continue pos:line="336" pos:column="21">continue;<pos:position pos:line="336" pos:column="30"/></continue>
                  }<pos:position pos:line="337" pos:column="20"/></block></then></if>

                <comment type="block" pos:line="339" pos:column="17">/* Could be the end of the bracket expression.  If it's
                   not (i.e., when the bracket expression is `[]' so
                   far), the ']' character bit gets set way below.  */</comment>
                <if pos:line="342" pos:column="17">if <condition pos:line="342" pos:column="20">(<expr><name pos:line="342" pos:column="21">c<pos:position pos:line="342" pos:column="22"/></name> <operator pos:line="342" pos:column="23">==<pos:position pos:line="342" pos:column="25"/></operator> <literal type="char" pos:line="342" pos:column="26">']'<pos:position pos:line="342" pos:column="29"/></literal> <operator pos:line="342" pos:column="30">&amp;&amp;<pos:position pos:line="342" pos:column="40"/></operator> <name pos:line="342" pos:column="33">p<pos:position pos:line="342" pos:column="34"/></name> <operator pos:line="342" pos:column="35">!=<pos:position pos:line="342" pos:column="37"/></operator> <name pos:line="342" pos:column="38">p1<pos:position pos:line="342" pos:column="40"/></name> <operator pos:line="342" pos:column="41">+<pos:position pos:line="342" pos:column="42"/></operator> <literal type="number" pos:line="342" pos:column="43">1<pos:position pos:line="342" pos:column="44"/></literal></expr>)<pos:position pos:line="342" pos:column="45"/></condition><then pos:line="342" pos:column="45">
                  <block type="pseudo"><break pos:line="343" pos:column="19">break;<pos:position pos:line="343" pos:column="25"/></break></block></then></if>

                <comment type="block" pos:line="345" pos:column="17">/* Look ahead to see if it's a range when the last thing
                   was a character class.  */</comment>
                <if pos:line="347" pos:column="17">if <condition pos:line="347" pos:column="20">(<expr><name pos:line="347" pos:column="21">had_char_class<pos:position pos:line="347" pos:column="35"/></name> <operator pos:line="347" pos:column="36">&amp;&amp;<pos:position pos:line="347" pos:column="46"/></operator> <name pos:line="347" pos:column="39">c<pos:position pos:line="347" pos:column="40"/></name> <operator pos:line="347" pos:column="41">==<pos:position pos:line="347" pos:column="43"/></operator> <literal type="char" pos:line="347" pos:column="44">'-'<pos:position pos:line="347" pos:column="47"/></literal> <operator pos:line="347" pos:column="48">&amp;&amp;<pos:position pos:line="347" pos:column="58"/></operator> <operator pos:line="347" pos:column="51">*<pos:position pos:line="347" pos:column="52"/></operator><name pos:line="347" pos:column="52">p<pos:position pos:line="347" pos:column="53"/></name> <operator pos:line="347" pos:column="54">!=<pos:position pos:line="347" pos:column="56"/></operator> <literal type="char" pos:line="347" pos:column="57">']'<pos:position pos:line="347" pos:column="60"/></literal></expr>)<pos:position pos:line="347" pos:column="61"/></condition><then pos:line="347" pos:column="61">
                  <block type="pseudo"><expr_stmt><expr><call><name pos:line="348" pos:column="19">FREE_STACK_RETURN<pos:position pos:line="348" pos:column="36"/></name> <argument_list pos:line="348" pos:column="37">(<argument><expr><name pos:line="348" pos:column="38">REG_ERANGE<pos:position pos:line="348" pos:column="48"/></name></expr></argument>)<pos:position pos:line="348" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="348" pos:column="50"/></expr_stmt></block></then></if>

                <comment type="block" pos:line="350" pos:column="17">/* Look ahead to see if it's a range when the last thing
                   was a character: if this is a hyphen not at the
                   beginning or the end of a list, then it's the range
                   operator.  */</comment>
                <if pos:line="354" pos:column="17">if <condition pos:line="354" pos:column="20">(<expr><name pos:line="354" pos:column="21">c<pos:position pos:line="354" pos:column="22"/></name> <operator pos:line="354" pos:column="23">==<pos:position pos:line="354" pos:column="25"/></operator> <literal type="char" pos:line="354" pos:column="26">'-'<pos:position pos:line="354" pos:column="29"/></literal>
                    <operator pos:line="355" pos:column="21">&amp;&amp;<pos:position pos:line="355" pos:column="31"/></operator> <operator pos:line="355" pos:column="24">!<pos:position pos:line="355" pos:column="25"/></operator><operator pos:line="355" pos:column="25">(<pos:position pos:line="355" pos:column="26"/></operator><name pos:line="355" pos:column="26">p<pos:position pos:line="355" pos:column="27"/></name> <operator pos:line="355" pos:column="28">-<pos:position pos:line="355" pos:column="29"/></operator> <literal type="number" pos:line="355" pos:column="30">2<pos:position pos:line="355" pos:column="31"/></literal> <operator pos:line="355" pos:column="32">&gt;=<pos:position pos:line="355" pos:column="37"/></operator> <name pos:line="355" pos:column="35">pattern<pos:position pos:line="355" pos:column="42"/></name> <operator pos:line="355" pos:column="43">&amp;&amp;<pos:position pos:line="355" pos:column="53"/></operator> <name><name pos:line="355" pos:column="46">p<pos:position pos:line="355" pos:column="47"/></name><index pos:line="355" pos:column="47">[<expr><operator pos:line="355" pos:column="48">-<pos:position pos:line="355" pos:column="49"/></operator><literal type="number" pos:line="355" pos:column="49">2<pos:position pos:line="355" pos:column="50"/></literal></expr>]<pos:position pos:line="355" pos:column="51"/></index></name> <operator pos:line="355" pos:column="52">==<pos:position pos:line="355" pos:column="54"/></operator> <literal type="char" pos:line="355" pos:column="55">'['<pos:position pos:line="355" pos:column="58"/></literal><operator pos:line="355" pos:column="58">)<pos:position pos:line="355" pos:column="59"/></operator>
                    <operator pos:line="356" pos:column="21">&amp;&amp;<pos:position pos:line="356" pos:column="31"/></operator> <operator pos:line="356" pos:column="24">!<pos:position pos:line="356" pos:column="25"/></operator><operator pos:line="356" pos:column="25">(<pos:position pos:line="356" pos:column="26"/></operator><name pos:line="356" pos:column="26">p<pos:position pos:line="356" pos:column="27"/></name> <operator pos:line="356" pos:column="28">-<pos:position pos:line="356" pos:column="29"/></operator> <literal type="number" pos:line="356" pos:column="30">3<pos:position pos:line="356" pos:column="31"/></literal> <operator pos:line="356" pos:column="32">&gt;=<pos:position pos:line="356" pos:column="37"/></operator> <name pos:line="356" pos:column="35">pattern<pos:position pos:line="356" pos:column="42"/></name> <operator pos:line="356" pos:column="43">&amp;&amp;<pos:position pos:line="356" pos:column="53"/></operator> <name><name pos:line="356" pos:column="46">p<pos:position pos:line="356" pos:column="47"/></name><index pos:line="356" pos:column="47">[<expr><operator pos:line="356" pos:column="48">-<pos:position pos:line="356" pos:column="49"/></operator><literal type="number" pos:line="356" pos:column="49">3<pos:position pos:line="356" pos:column="50"/></literal></expr>]<pos:position pos:line="356" pos:column="51"/></index></name> <operator pos:line="356" pos:column="52">==<pos:position pos:line="356" pos:column="54"/></operator> <literal type="char" pos:line="356" pos:column="55">'['<pos:position pos:line="356" pos:column="58"/></literal> <operator pos:line="356" pos:column="59">&amp;&amp;<pos:position pos:line="356" pos:column="69"/></operator> <name><name pos:line="356" pos:column="62">p<pos:position pos:line="356" pos:column="63"/></name><index pos:line="356" pos:column="63">[<expr><operator pos:line="356" pos:column="64">-<pos:position pos:line="356" pos:column="65"/></operator><literal type="number" pos:line="356" pos:column="65">2<pos:position pos:line="356" pos:column="66"/></literal></expr>]<pos:position pos:line="356" pos:column="67"/></index></name> <operator pos:line="356" pos:column="68">==<pos:position pos:line="356" pos:column="70"/></operator> <literal type="char" pos:line="356" pos:column="71">'^'<pos:position pos:line="356" pos:column="74"/></literal><operator pos:line="356" pos:column="74">)<pos:position pos:line="356" pos:column="75"/></operator>
                    <operator pos:line="357" pos:column="21">&amp;&amp;<pos:position pos:line="357" pos:column="31"/></operator> <operator pos:line="357" pos:column="24">*<pos:position pos:line="357" pos:column="25"/></operator><name pos:line="357" pos:column="25">p<pos:position pos:line="357" pos:column="26"/></name> <operator pos:line="357" pos:column="27">!=<pos:position pos:line="357" pos:column="29"/></operator> <literal type="char" pos:line="357" pos:column="30">']'<pos:position pos:line="357" pos:column="33"/></literal></expr>)<pos:position pos:line="357" pos:column="34"/></condition><then pos:line="357" pos:column="34">
                  <block pos:line="358" pos:column="19">{
                    <decl_stmt><decl><type><name pos:line="359" pos:column="21">reg_errcode_t<pos:position pos:line="359" pos:column="34"/></name></type> <name pos:line="359" pos:column="35">ret<pos:position pos:line="359" pos:column="38"/></name>
                      <init pos:line="360" pos:column="23">= <expr><call><name pos:line="360" pos:column="25">compile_range<pos:position pos:line="360" pos:column="38"/></name> <argument_list pos:line="360" pos:column="39">(<argument><expr><operator pos:line="360" pos:column="40">&amp;<pos:position pos:line="360" pos:column="45"/></operator><name pos:line="360" pos:column="41">p<pos:position pos:line="360" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="360" pos:column="44">pend<pos:position pos:line="360" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="360" pos:column="50">translate<pos:position pos:line="360" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="360" pos:column="61">syntax<pos:position pos:line="360" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="360" pos:column="69">b<pos:position pos:line="360" pos:column="70"/></name></expr></argument>)<pos:position pos:line="360" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="360" pos:column="72"/></decl_stmt>
                    <if pos:line="361" pos:column="21">if <condition pos:line="361" pos:column="24">(<expr><name pos:line="361" pos:column="25">ret<pos:position pos:line="361" pos:column="28"/></name> <operator pos:line="361" pos:column="29">!=<pos:position pos:line="361" pos:column="31"/></operator> <name pos:line="361" pos:column="32">REG_NOERROR<pos:position pos:line="361" pos:column="43"/></name></expr>)<pos:position pos:line="361" pos:column="44"/></condition><then pos:line="361" pos:column="44"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="361" pos:column="45">FREE_STACK_RETURN<pos:position pos:line="361" pos:column="62"/></name> <argument_list pos:line="361" pos:column="63">(<argument><expr><name pos:line="361" pos:column="64">ret<pos:position pos:line="361" pos:column="67"/></name></expr></argument>)<pos:position pos:line="361" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="361" pos:column="69"/></expr_stmt></block></then></if>
                  }<pos:position pos:line="362" pos:column="20"/></block></then>

                <elseif pos:line="364" pos:column="17">else <if pos:line="364" pos:column="22">if <condition pos:line="364" pos:column="25">(<expr><name><name pos:line="364" pos:column="26">p<pos:position pos:line="364" pos:column="27"/></name><index pos:line="364" pos:column="27">[<expr><literal type="number" pos:line="364" pos:column="28">0<pos:position pos:line="364" pos:column="29"/></literal></expr>]<pos:position pos:line="364" pos:column="30"/></index></name> <operator pos:line="364" pos:column="31">==<pos:position pos:line="364" pos:column="33"/></operator> <literal type="char" pos:line="364" pos:column="34">'-'<pos:position pos:line="364" pos:column="37"/></literal> <operator pos:line="364" pos:column="38">&amp;&amp;<pos:position pos:line="364" pos:column="48"/></operator> <name><name pos:line="364" pos:column="41">p<pos:position pos:line="364" pos:column="42"/></name><index pos:line="364" pos:column="42">[<expr><literal type="number" pos:line="364" pos:column="43">1<pos:position pos:line="364" pos:column="44"/></literal></expr>]<pos:position pos:line="364" pos:column="45"/></index></name> <operator pos:line="364" pos:column="46">!=<pos:position pos:line="364" pos:column="48"/></operator> <literal type="char" pos:line="364" pos:column="49">']'<pos:position pos:line="364" pos:column="52"/></literal></expr>)<pos:position pos:line="364" pos:column="53"/></condition><then pos:line="364" pos:column="53">
                  <block pos:line="365" pos:column="19">{ <comment type="block" pos:line="365" pos:column="21">/* This handles ranges made up of characters only.  */</comment>
                    <decl_stmt><decl><type><name pos:line="366" pos:column="21">reg_errcode_t<pos:position pos:line="366" pos:column="34"/></name></type> <name pos:line="366" pos:column="35">ret<pos:position pos:line="366" pos:column="38"/></name></decl>;<pos:position pos:line="366" pos:column="39"/></decl_stmt>

		    <comment type="block" pos:line="368" pos:column="21">/* Move past the `-'.  */</comment>
                    <expr_stmt><expr><call><name pos:line="369" pos:column="21">PATFETCH<pos:position pos:line="369" pos:column="29"/></name> <argument_list pos:line="369" pos:column="30">(<argument><expr><name pos:line="369" pos:column="31">c1<pos:position pos:line="369" pos:column="33"/></name></expr></argument>)<pos:position pos:line="369" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="369" pos:column="35"/></expr_stmt>

                    <expr_stmt><expr><name pos:line="371" pos:column="21">ret<pos:position pos:line="371" pos:column="24"/></name> <operator pos:line="371" pos:column="25">=<pos:position pos:line="371" pos:column="26"/></operator> <call><name pos:line="371" pos:column="27">compile_range<pos:position pos:line="371" pos:column="40"/></name> <argument_list pos:line="371" pos:column="41">(<argument><expr><operator pos:line="371" pos:column="42">&amp;<pos:position pos:line="371" pos:column="47"/></operator><name pos:line="371" pos:column="43">p<pos:position pos:line="371" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="371" pos:column="46">pend<pos:position pos:line="371" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="371" pos:column="52">translate<pos:position pos:line="371" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="371" pos:column="63">syntax<pos:position pos:line="371" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="371" pos:column="71">b<pos:position pos:line="371" pos:column="72"/></name></expr></argument>)<pos:position pos:line="371" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="371" pos:column="74"/></expr_stmt>
                    <if pos:line="372" pos:column="21">if <condition pos:line="372" pos:column="24">(<expr><name pos:line="372" pos:column="25">ret<pos:position pos:line="372" pos:column="28"/></name> <operator pos:line="372" pos:column="29">!=<pos:position pos:line="372" pos:column="31"/></operator> <name pos:line="372" pos:column="32">REG_NOERROR<pos:position pos:line="372" pos:column="43"/></name></expr>)<pos:position pos:line="372" pos:column="44"/></condition><then pos:line="372" pos:column="44"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="372" pos:column="45">FREE_STACK_RETURN<pos:position pos:line="372" pos:column="62"/></name> <argument_list pos:line="372" pos:column="63">(<argument><expr><name pos:line="372" pos:column="64">ret<pos:position pos:line="372" pos:column="67"/></name></expr></argument>)<pos:position pos:line="372" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="372" pos:column="69"/></expr_stmt></block></then></if>
                  }<pos:position pos:line="373" pos:column="20"/></block></then></if></elseif>

                <comment type="block" pos:line="375" pos:column="17">/* See if we're at the beginning of a possible character
                   class.  */</comment>

                <elseif pos:line="378" pos:column="17">else <if pos:line="378" pos:column="22">if <condition pos:line="378" pos:column="25">(<expr><name pos:line="378" pos:column="26">syntax<pos:position pos:line="378" pos:column="32"/></name> <operator pos:line="378" pos:column="33">&amp;<pos:position pos:line="378" pos:column="38"/></operator> <name pos:line="378" pos:column="35">RE_CHAR_CLASSES<pos:position pos:line="378" pos:column="50"/></name> <operator pos:line="378" pos:column="51">&amp;&amp;<pos:position pos:line="378" pos:column="61"/></operator> <name pos:line="378" pos:column="54">c<pos:position pos:line="378" pos:column="55"/></name> <operator pos:line="378" pos:column="56">==<pos:position pos:line="378" pos:column="58"/></operator> <literal type="char" pos:line="378" pos:column="59">'['<pos:position pos:line="378" pos:column="62"/></literal> <operator pos:line="378" pos:column="63">&amp;&amp;<pos:position pos:line="378" pos:column="73"/></operator> <operator pos:line="378" pos:column="66">*<pos:position pos:line="378" pos:column="67"/></operator><name pos:line="378" pos:column="67">p<pos:position pos:line="378" pos:column="68"/></name> <operator pos:line="378" pos:column="69">==<pos:position pos:line="378" pos:column="71"/></operator> <literal type="char" pos:line="378" pos:column="72">':'<pos:position pos:line="378" pos:column="75"/></literal></expr>)<pos:position pos:line="378" pos:column="76"/></condition><then pos:line="378" pos:column="76">
                  <block pos:line="379" pos:column="19">{ <comment type="block" pos:line="379" pos:column="21">/* Leave room for the null.  */</comment>
                    <decl_stmt><decl><type><name pos:line="380" pos:column="21">char<pos:position pos:line="380" pos:column="25"/></name></type> <name><name pos:line="380" pos:column="26">str<pos:position pos:line="380" pos:column="29"/></name><index pos:line="380" pos:column="29">[<expr><name pos:line="380" pos:column="30">CHAR_CLASS_MAX_LENGTH<pos:position pos:line="380" pos:column="51"/></name> <operator pos:line="380" pos:column="52">+<pos:position pos:line="380" pos:column="53"/></operator> <literal type="number" pos:line="380" pos:column="54">1<pos:position pos:line="380" pos:column="55"/></literal></expr>]<pos:position pos:line="380" pos:column="56"/></index></name></decl>;<pos:position pos:line="380" pos:column="57"/></decl_stmt>

                    <expr_stmt><expr><call><name pos:line="382" pos:column="21">PATFETCH<pos:position pos:line="382" pos:column="29"/></name> <argument_list pos:line="382" pos:column="30">(<argument><expr><name pos:line="382" pos:column="31">c<pos:position pos:line="382" pos:column="32"/></name></expr></argument>)<pos:position pos:line="382" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="382" pos:column="34"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="383" pos:column="21">c1<pos:position pos:line="383" pos:column="23"/></name> <operator pos:line="383" pos:column="24">=<pos:position pos:line="383" pos:column="25"/></operator> <literal type="number" pos:line="383" pos:column="26">0<pos:position pos:line="383" pos:column="27"/></literal></expr>;<pos:position pos:line="383" pos:column="28"/></expr_stmt>

                    <comment type="block" pos:line="385" pos:column="21">/* If pattern is `[[:'.  */</comment>
                    <if pos:line="386" pos:column="21">if <condition pos:line="386" pos:column="24">(<expr><name pos:line="386" pos:column="25">p<pos:position pos:line="386" pos:column="26"/></name> <operator pos:line="386" pos:column="27">==<pos:position pos:line="386" pos:column="29"/></operator> <name pos:line="386" pos:column="30">pend<pos:position pos:line="386" pos:column="34"/></name></expr>)<pos:position pos:line="386" pos:column="35"/></condition><then pos:line="386" pos:column="35"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="386" pos:column="36">FREE_STACK_RETURN<pos:position pos:line="386" pos:column="53"/></name> <argument_list pos:line="386" pos:column="54">(<argument><expr><name pos:line="386" pos:column="55">REG_EBRACK<pos:position pos:line="386" pos:column="65"/></name></expr></argument>)<pos:position pos:line="386" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="386" pos:column="67"/></expr_stmt></block></then></if>

                    <for pos:line="388" pos:column="21">for <control pos:line="388" pos:column="25">(<init pos:line="388" pos:column="26">;<pos:position pos:line="388" pos:column="27"/></init><condition pos:line="388" pos:column="27">;<pos:position pos:line="388" pos:column="28"/></condition><incr/>)<pos:position pos:line="388" pos:column="29"/></control>
                      <block pos:line="389" pos:column="23">{
                        <expr_stmt><expr><call><name pos:line="390" pos:column="25">PATFETCH<pos:position pos:line="390" pos:column="33"/></name> <argument_list pos:line="390" pos:column="34">(<argument><expr><name pos:line="390" pos:column="35">c<pos:position pos:line="390" pos:column="36"/></name></expr></argument>)<pos:position pos:line="390" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="390" pos:column="38"/></expr_stmt>
                        <if pos:line="391" pos:column="25">if <condition pos:line="391" pos:column="28">(<expr><name pos:line="391" pos:column="29">c<pos:position pos:line="391" pos:column="30"/></name> <operator pos:line="391" pos:column="31">==<pos:position pos:line="391" pos:column="33"/></operator> <literal type="char" pos:line="391" pos:column="34">':'<pos:position pos:line="391" pos:column="37"/></literal> <operator pos:line="391" pos:column="38">||<pos:position pos:line="391" pos:column="40"/></operator> <name pos:line="391" pos:column="41">c<pos:position pos:line="391" pos:column="42"/></name> <operator pos:line="391" pos:column="43">==<pos:position pos:line="391" pos:column="45"/></operator> <literal type="char" pos:line="391" pos:column="46">']'<pos:position pos:line="391" pos:column="49"/></literal> <operator pos:line="391" pos:column="50">||<pos:position pos:line="391" pos:column="52"/></operator> <name pos:line="391" pos:column="53">p<pos:position pos:line="391" pos:column="54"/></name> <operator pos:line="391" pos:column="55">==<pos:position pos:line="391" pos:column="57"/></operator> <name pos:line="391" pos:column="58">pend<pos:position pos:line="391" pos:column="62"/></name>
                            <operator pos:line="392" pos:column="29">||<pos:position pos:line="392" pos:column="31"/></operator> <operator pos:line="392" pos:column="32">(<pos:position pos:line="392" pos:column="33"/></operator><name pos:line="392" pos:column="33">unsigned<pos:position pos:line="392" pos:column="41"/></name> <name pos:line="392" pos:column="42">int<pos:position pos:line="392" pos:column="45"/></name><operator pos:line="392" pos:column="45">)<pos:position pos:line="392" pos:column="46"/></operator><name pos:line="392" pos:column="46">c1<pos:position pos:line="392" pos:column="48"/></name> <operator pos:line="392" pos:column="49">==<pos:position pos:line="392" pos:column="51"/></operator> <name pos:line="392" pos:column="52">CHAR_CLASS_MAX_LENGTH<pos:position pos:line="392" pos:column="73"/></name></expr>)<pos:position pos:line="392" pos:column="74"/></condition><then pos:line="392" pos:column="74">
                          <block type="pseudo"><break pos:line="393" pos:column="27">break;<pos:position pos:line="393" pos:column="33"/></break></block></then></if>
                        <expr_stmt><expr><name><name pos:line="394" pos:column="25">str<pos:position pos:line="394" pos:column="28"/></name><index pos:line="394" pos:column="28">[<expr><name pos:line="394" pos:column="29">c1<pos:position pos:line="394" pos:column="31"/></name><operator pos:line="394" pos:column="31">++<pos:position pos:line="394" pos:column="33"/></operator></expr>]<pos:position pos:line="394" pos:column="34"/></index></name> <operator pos:line="394" pos:column="35">=<pos:position pos:line="394" pos:column="36"/></operator> <name pos:line="394" pos:column="37">c<pos:position pos:line="394" pos:column="38"/></name></expr>;<pos:position pos:line="394" pos:column="39"/></expr_stmt>
                      }<pos:position pos:line="395" pos:column="24"/></block></for>
                    <expr_stmt><expr><name><name pos:line="396" pos:column="21">str<pos:position pos:line="396" pos:column="24"/></name><index pos:line="396" pos:column="24">[<expr><name pos:line="396" pos:column="25">c1<pos:position pos:line="396" pos:column="27"/></name></expr>]<pos:position pos:line="396" pos:column="28"/></index></name> <operator pos:line="396" pos:column="29">=<pos:position pos:line="396" pos:column="30"/></operator> <literal type="char" pos:line="396" pos:column="31">'\0'<pos:position pos:line="396" pos:column="35"/></literal></expr>;<pos:position pos:line="396" pos:column="36"/></expr_stmt>

                    <comment type="block" pos:line="398" pos:column="21">/* If isn't a word bracketed by `[:' and:`]':
                       undo the ending character, the letters, and leave
                       the leading `:' and `[' (but set bits for them).  */</comment>
                    <if pos:line="401" pos:column="21">if <condition pos:line="401" pos:column="24">(<expr><name pos:line="401" pos:column="25">c<pos:position pos:line="401" pos:column="26"/></name> <operator pos:line="401" pos:column="27">==<pos:position pos:line="401" pos:column="29"/></operator> <literal type="char" pos:line="401" pos:column="30">':'<pos:position pos:line="401" pos:column="33"/></literal> <operator pos:line="401" pos:column="34">&amp;&amp;<pos:position pos:line="401" pos:column="44"/></operator> <operator pos:line="401" pos:column="37">*<pos:position pos:line="401" pos:column="38"/></operator><name pos:line="401" pos:column="38">p<pos:position pos:line="401" pos:column="39"/></name> <operator pos:line="401" pos:column="40">==<pos:position pos:line="401" pos:column="42"/></operator> <literal type="char" pos:line="401" pos:column="43">']'<pos:position pos:line="401" pos:column="46"/></literal></expr>)<pos:position pos:line="401" pos:column="47"/></condition><then pos:line="401" pos:column="47">
                      <block pos:line="402" pos:column="23">{
<cpp:if pos:line="403" pos:column="1">#<cpp:directive pos:line="403" pos:column="2">if<pos:position pos:line="403" pos:column="4"/></cpp:directive> <expr><name pos:line="403" pos:column="5">defined<pos:position pos:line="403" pos:column="12"/></name> <name pos:line="403" pos:column="13">_LIBC<pos:position pos:line="403" pos:column="18"/></name> <operator pos:line="403" pos:column="19">||<pos:position pos:line="403" pos:column="21"/></operator> <operator pos:line="403" pos:column="22">(<pos:position pos:line="403" pos:column="23"/></operator><name pos:line="403" pos:column="23">defined<pos:position pos:line="403" pos:column="30"/></name> <name pos:line="403" pos:column="31">HAVE_WC_FUNCS<pos:position pos:line="403" pos:column="44"/></name> <operator pos:line="403" pos:column="45">&amp;&amp;<pos:position pos:line="403" pos:column="55"/></operator> <name pos:line="403" pos:column="48">defined<pos:position pos:line="403" pos:column="55"/></name> <name pos:line="403" pos:column="56">HAVE_WCTYPE_H<pos:position pos:line="403" pos:column="69"/></name> <operator pos:line="403" pos:column="70">&amp;&amp;<pos:position pos:line="403" pos:column="80"/></operator> <name pos:line="403" pos:column="73">defined<pos:position pos:line="403" pos:column="80"/></name> <name pos:line="403" pos:column="81">HAVE_WCHAR_H<pos:position pos:line="403" pos:column="93"/></name><operator pos:line="403" pos:column="93">)<pos:position pos:line="403" pos:column="94"/></operator></expr></cpp:if>
                        <decl_stmt><decl><type><name pos:line="404" pos:column="25">boolean<pos:position pos:line="404" pos:column="32"/></name></type> <name pos:line="404" pos:column="33">is_lower<pos:position pos:line="404" pos:column="41"/></name> <init pos:line="404" pos:column="42">= <expr><call><name pos:line="404" pos:column="44">STREQ<pos:position pos:line="404" pos:column="49"/></name> <argument_list pos:line="404" pos:column="50">(<argument><expr><name pos:line="404" pos:column="51">str<pos:position pos:line="404" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="404" pos:column="56">"lower"<pos:position pos:line="404" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="404" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="404" pos:column="65"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="405" pos:column="25">boolean<pos:position pos:line="405" pos:column="32"/></name></type> <name pos:line="405" pos:column="33">is_upper<pos:position pos:line="405" pos:column="41"/></name> <init pos:line="405" pos:column="42">= <expr><call><name pos:line="405" pos:column="44">STREQ<pos:position pos:line="405" pos:column="49"/></name> <argument_list pos:line="405" pos:column="50">(<argument><expr><name pos:line="405" pos:column="51">str<pos:position pos:line="405" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="405" pos:column="56">"upper"<pos:position pos:line="405" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="405" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="405" pos:column="65"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="406" pos:column="25">wctype_t<pos:position pos:line="406" pos:column="33"/></name></type> <name pos:line="406" pos:column="34">wt<pos:position pos:line="406" pos:column="36"/></name></decl>;<pos:position pos:line="406" pos:column="37"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="407" pos:column="25">wchar_t<pos:position pos:line="407" pos:column="32"/></name></type> <name pos:line="407" pos:column="33">twt<pos:position pos:line="407" pos:column="36"/></name></decl>;<pos:position pos:line="407" pos:column="37"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="408" pos:column="25">int<pos:position pos:line="408" pos:column="28"/></name></type> <name pos:line="408" pos:column="29">ch<pos:position pos:line="408" pos:column="31"/></name></decl>;<pos:position pos:line="408" pos:column="32"/></decl_stmt>

			<expr_stmt><expr><name pos:line="410" pos:column="25">wt<pos:position pos:line="410" pos:column="27"/></name> <operator pos:line="410" pos:column="28">=<pos:position pos:line="410" pos:column="29"/></operator> <call><name pos:line="410" pos:column="30">wctype<pos:position pos:line="410" pos:column="36"/></name> <argument_list pos:line="410" pos:column="37">(<argument><expr><name pos:line="410" pos:column="38">str<pos:position pos:line="410" pos:column="41"/></name></expr></argument>)<pos:position pos:line="410" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="410" pos:column="43"/></expr_stmt>
			<if pos:line="411" pos:column="25">if <condition pos:line="411" pos:column="28">(<expr><name pos:line="411" pos:column="29">wt<pos:position pos:line="411" pos:column="31"/></name> <operator pos:line="411" pos:column="32">==<pos:position pos:line="411" pos:column="34"/></operator> <literal type="number" pos:line="411" pos:column="35">0<pos:position pos:line="411" pos:column="36"/></literal></expr>)<pos:position pos:line="411" pos:column="37"/></condition><then pos:line="411" pos:column="37">
			  <block type="pseudo"><expr_stmt><expr><call><name pos:line="412" pos:column="27">FREE_STACK_RETURN<pos:position pos:line="412" pos:column="44"/></name> <argument_list pos:line="412" pos:column="45">(<argument><expr><name pos:line="412" pos:column="46">REG_ECTYPE<pos:position pos:line="412" pos:column="56"/></name></expr></argument>)<pos:position pos:line="412" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="412" pos:column="58"/></expr_stmt></block></then></if>

                        <comment type="block" pos:line="414" pos:column="25">/* Throw away the ] at the end of the character
                           class.  */</comment>
                        <expr_stmt><expr><call><name pos:line="416" pos:column="25">PATFETCH<pos:position pos:line="416" pos:column="33"/></name> <argument_list pos:line="416" pos:column="34">(<argument><expr><name pos:line="416" pos:column="35">c<pos:position pos:line="416" pos:column="36"/></name></expr></argument>)<pos:position pos:line="416" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="416" pos:column="38"/></expr_stmt>

                        <if pos:line="418" pos:column="25">if <condition pos:line="418" pos:column="28">(<expr><name pos:line="418" pos:column="29">p<pos:position pos:line="418" pos:column="30"/></name> <operator pos:line="418" pos:column="31">==<pos:position pos:line="418" pos:column="33"/></operator> <name pos:line="418" pos:column="34">pend<pos:position pos:line="418" pos:column="38"/></name></expr>)<pos:position pos:line="418" pos:column="39"/></condition><then pos:line="418" pos:column="39"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="418" pos:column="40">FREE_STACK_RETURN<pos:position pos:line="418" pos:column="57"/></name> <argument_list pos:line="418" pos:column="58">(<argument><expr><name pos:line="418" pos:column="59">REG_EBRACK<pos:position pos:line="418" pos:column="69"/></name></expr></argument>)<pos:position pos:line="418" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="418" pos:column="71"/></expr_stmt></block></then></if>

                        <for pos:line="420" pos:column="25">for <control pos:line="420" pos:column="29">(<init><expr><name pos:line="420" pos:column="30">ch<pos:position pos:line="420" pos:column="32"/></name> <operator pos:line="420" pos:column="33">=<pos:position pos:line="420" pos:column="34"/></operator> <literal type="number" pos:line="420" pos:column="35">0<pos:position pos:line="420" pos:column="36"/></literal></expr>;<pos:position pos:line="420" pos:column="37"/></init> <condition><expr><name pos:line="420" pos:column="38">ch<pos:position pos:line="420" pos:column="40"/></name> <operator pos:line="420" pos:column="41">&lt;<pos:position pos:line="420" pos:column="45"/></operator> <literal type="number" pos:line="420" pos:column="43">1<pos:position pos:line="420" pos:column="44"/></literal> <operator pos:line="420" pos:column="45">&lt;&lt;<pos:position pos:line="420" pos:column="53"/></operator> <name pos:line="420" pos:column="48">BYTEWIDTH<pos:position pos:line="420" pos:column="57"/></name></expr>;<pos:position pos:line="420" pos:column="58"/></condition> <incr><expr><operator pos:line="420" pos:column="59">++<pos:position pos:line="420" pos:column="61"/></operator><name pos:line="420" pos:column="61">ch<pos:position pos:line="420" pos:column="63"/></name></expr></incr>)<pos:position pos:line="420" pos:column="64"/></control>
			  <block pos:line="421" pos:column="27">{
			    <if pos:line="422" pos:column="29">if <condition pos:line="422" pos:column="32">(<expr><call><name pos:line="422" pos:column="33">mbtowc<pos:position pos:line="422" pos:column="39"/></name> <argument_list pos:line="422" pos:column="40">(<argument><expr><operator pos:line="422" pos:column="41">&amp;<pos:position pos:line="422" pos:column="46"/></operator><name pos:line="422" pos:column="42">twt<pos:position pos:line="422" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="422" pos:column="47">(<pos:position pos:line="422" pos:column="48"/></operator><name pos:line="422" pos:column="48">char<pos:position pos:line="422" pos:column="52"/></name> <operator pos:line="422" pos:column="53">*<pos:position pos:line="422" pos:column="54"/></operator><operator pos:line="422" pos:column="54">)<pos:position pos:line="422" pos:column="55"/></operator><operator pos:line="422" pos:column="55">&amp;<pos:position pos:line="422" pos:column="60"/></operator><name pos:line="422" pos:column="56">ch<pos:position pos:line="422" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="422" pos:column="60">1<pos:position pos:line="422" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="422" pos:column="62"/></argument_list></call> <operator pos:line="422" pos:column="63">&gt;=<pos:position pos:line="422" pos:column="68"/></operator> <literal type="number" pos:line="422" pos:column="66">0<pos:position pos:line="422" pos:column="67"/></literal> <operator pos:line="422" pos:column="68">&amp;&amp;<pos:position pos:line="422" pos:column="78"/></operator> <call><name pos:line="422" pos:column="71">iswctype<pos:position pos:line="422" pos:column="79"/></name> <argument_list pos:line="422" pos:column="80">(<argument><expr><name pos:line="422" pos:column="81">twt<pos:position pos:line="422" pos:column="84"/></name></expr></argument>, <argument><expr><name pos:line="422" pos:column="86">wt<pos:position pos:line="422" pos:column="88"/></name></expr></argument>)<pos:position pos:line="422" pos:column="89"/></argument_list></call></expr>)<pos:position pos:line="422" pos:column="90"/></condition><then pos:line="422" pos:column="90">
			      <block type="pseudo"><expr_stmt><expr><call><name pos:line="423" pos:column="31">SET_LIST_BIT<pos:position pos:line="423" pos:column="43"/></name> <argument_list pos:line="423" pos:column="44">(<argument><expr><name pos:line="423" pos:column="45">ch<pos:position pos:line="423" pos:column="47"/></name></expr></argument>)<pos:position pos:line="423" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="423" pos:column="49"/></expr_stmt></block></then></if>

			    <if pos:line="425" pos:column="29">if <condition pos:line="425" pos:column="32">(<expr><name pos:line="425" pos:column="33">translate<pos:position pos:line="425" pos:column="42"/></name> <operator pos:line="425" pos:column="43">&amp;&amp;<pos:position pos:line="425" pos:column="53"/></operator> <operator pos:line="425" pos:column="46">(<pos:position pos:line="425" pos:column="47"/></operator><name pos:line="425" pos:column="47">is_upper<pos:position pos:line="425" pos:column="55"/></name> <operator pos:line="425" pos:column="56">||<pos:position pos:line="425" pos:column="58"/></operator> <name pos:line="425" pos:column="59">is_lower<pos:position pos:line="425" pos:column="67"/></name><operator pos:line="425" pos:column="67">)<pos:position pos:line="425" pos:column="68"/></operator>
				<operator pos:line="426" pos:column="33">&amp;&amp;<pos:position pos:line="426" pos:column="43"/></operator> <operator pos:line="426" pos:column="36">(<pos:position pos:line="426" pos:column="37"/></operator><call><name pos:line="426" pos:column="37">ISUPPER<pos:position pos:line="426" pos:column="44"/></name> <argument_list pos:line="426" pos:column="45">(<argument><expr><name pos:line="426" pos:column="46">ch<pos:position pos:line="426" pos:column="48"/></name></expr></argument>)<pos:position pos:line="426" pos:column="49"/></argument_list></call> <operator pos:line="426" pos:column="50">||<pos:position pos:line="426" pos:column="52"/></operator> <call><name pos:line="426" pos:column="53">ISLOWER<pos:position pos:line="426" pos:column="60"/></name> <argument_list pos:line="426" pos:column="61">(<argument><expr><name pos:line="426" pos:column="62">ch<pos:position pos:line="426" pos:column="64"/></name></expr></argument>)<pos:position pos:line="426" pos:column="65"/></argument_list></call><operator pos:line="426" pos:column="65">)<pos:position pos:line="426" pos:column="66"/></operator></expr>)<pos:position pos:line="426" pos:column="67"/></condition><then pos:line="426" pos:column="67">
			      <block type="pseudo"><expr_stmt><expr><call><name pos:line="427" pos:column="31">SET_LIST_BIT<pos:position pos:line="427" pos:column="43"/></name> <argument_list pos:line="427" pos:column="44">(<argument><expr><name pos:line="427" pos:column="45">ch<pos:position pos:line="427" pos:column="47"/></name></expr></argument>)<pos:position pos:line="427" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="427" pos:column="49"/></expr_stmt></block></then></if>
			  }<pos:position pos:line="428" pos:column="28"/></block></for>

                        <expr_stmt><expr><name pos:line="430" pos:column="25">had_char_class<pos:position pos:line="430" pos:column="39"/></name> <operator pos:line="430" pos:column="40">=<pos:position pos:line="430" pos:column="41"/></operator> <literal type="boolean" pos:line="430" pos:column="42">true<pos:position pos:line="430" pos:column="46"/></literal></expr>;<pos:position pos:line="430" pos:column="47"/></expr_stmt>
<cpp:else pos:line="431" pos:column="1">#<cpp:directive pos:line="431" pos:column="2">else<pos:position pos:line="431" pos:column="6"/></cpp:directive></cpp:else>
                        <decl_stmt><decl><type><name pos:line="432" pos:column="25">int<pos:position pos:line="432" pos:column="28"/></name></type> <name pos:line="432" pos:column="29">ch<pos:position pos:line="432" pos:column="31"/></name></decl>;<pos:position pos:line="432" pos:column="32"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="433" pos:column="25">boolean<pos:position pos:line="433" pos:column="32"/></name></type> <name pos:line="433" pos:column="33">is_alnum<pos:position pos:line="433" pos:column="41"/></name> <init pos:line="433" pos:column="42">= <expr><call><name pos:line="433" pos:column="44">STREQ<pos:position pos:line="433" pos:column="49"/></name> <argument_list pos:line="433" pos:column="50">(<argument><expr><name pos:line="433" pos:column="51">str<pos:position pos:line="433" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="433" pos:column="56">"alnum"<pos:position pos:line="433" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="433" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="433" pos:column="65"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="434" pos:column="25">boolean<pos:position pos:line="434" pos:column="32"/></name></type> <name pos:line="434" pos:column="33">is_alpha<pos:position pos:line="434" pos:column="41"/></name> <init pos:line="434" pos:column="42">= <expr><call><name pos:line="434" pos:column="44">STREQ<pos:position pos:line="434" pos:column="49"/></name> <argument_list pos:line="434" pos:column="50">(<argument><expr><name pos:line="434" pos:column="51">str<pos:position pos:line="434" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="434" pos:column="56">"alpha"<pos:position pos:line="434" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="434" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="434" pos:column="65"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="435" pos:column="25">boolean<pos:position pos:line="435" pos:column="32"/></name></type> <name pos:line="435" pos:column="33">is_blank<pos:position pos:line="435" pos:column="41"/></name> <init pos:line="435" pos:column="42">= <expr><call><name pos:line="435" pos:column="44">STREQ<pos:position pos:line="435" pos:column="49"/></name> <argument_list pos:line="435" pos:column="50">(<argument><expr><name pos:line="435" pos:column="51">str<pos:position pos:line="435" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="435" pos:column="56">"blank"<pos:position pos:line="435" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="435" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="435" pos:column="65"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="436" pos:column="25">boolean<pos:position pos:line="436" pos:column="32"/></name></type> <name pos:line="436" pos:column="33">is_cntrl<pos:position pos:line="436" pos:column="41"/></name> <init pos:line="436" pos:column="42">= <expr><call><name pos:line="436" pos:column="44">STREQ<pos:position pos:line="436" pos:column="49"/></name> <argument_list pos:line="436" pos:column="50">(<argument><expr><name pos:line="436" pos:column="51">str<pos:position pos:line="436" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="436" pos:column="56">"cntrl"<pos:position pos:line="436" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="436" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="436" pos:column="65"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="437" pos:column="25">boolean<pos:position pos:line="437" pos:column="32"/></name></type> <name pos:line="437" pos:column="33">is_digit<pos:position pos:line="437" pos:column="41"/></name> <init pos:line="437" pos:column="42">= <expr><call><name pos:line="437" pos:column="44">STREQ<pos:position pos:line="437" pos:column="49"/></name> <argument_list pos:line="437" pos:column="50">(<argument><expr><name pos:line="437" pos:column="51">str<pos:position pos:line="437" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="437" pos:column="56">"digit"<pos:position pos:line="437" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="437" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="437" pos:column="65"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="438" pos:column="25">boolean<pos:position pos:line="438" pos:column="32"/></name></type> <name pos:line="438" pos:column="33">is_graph<pos:position pos:line="438" pos:column="41"/></name> <init pos:line="438" pos:column="42">= <expr><call><name pos:line="438" pos:column="44">STREQ<pos:position pos:line="438" pos:column="49"/></name> <argument_list pos:line="438" pos:column="50">(<argument><expr><name pos:line="438" pos:column="51">str<pos:position pos:line="438" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="438" pos:column="56">"graph"<pos:position pos:line="438" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="438" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="438" pos:column="65"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="439" pos:column="25">boolean<pos:position pos:line="439" pos:column="32"/></name></type> <name pos:line="439" pos:column="33">is_lower<pos:position pos:line="439" pos:column="41"/></name> <init pos:line="439" pos:column="42">= <expr><call><name pos:line="439" pos:column="44">STREQ<pos:position pos:line="439" pos:column="49"/></name> <argument_list pos:line="439" pos:column="50">(<argument><expr><name pos:line="439" pos:column="51">str<pos:position pos:line="439" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="439" pos:column="56">"lower"<pos:position pos:line="439" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="439" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="439" pos:column="65"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="440" pos:column="25">boolean<pos:position pos:line="440" pos:column="32"/></name></type> <name pos:line="440" pos:column="33">is_print<pos:position pos:line="440" pos:column="41"/></name> <init pos:line="440" pos:column="42">= <expr><call><name pos:line="440" pos:column="44">STREQ<pos:position pos:line="440" pos:column="49"/></name> <argument_list pos:line="440" pos:column="50">(<argument><expr><name pos:line="440" pos:column="51">str<pos:position pos:line="440" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="440" pos:column="56">"print"<pos:position pos:line="440" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="440" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="440" pos:column="65"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="441" pos:column="25">boolean<pos:position pos:line="441" pos:column="32"/></name></type> <name pos:line="441" pos:column="33">is_punct<pos:position pos:line="441" pos:column="41"/></name> <init pos:line="441" pos:column="42">= <expr><call><name pos:line="441" pos:column="44">STREQ<pos:position pos:line="441" pos:column="49"/></name> <argument_list pos:line="441" pos:column="50">(<argument><expr><name pos:line="441" pos:column="51">str<pos:position pos:line="441" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="441" pos:column="56">"punct"<pos:position pos:line="441" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="441" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="441" pos:column="65"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="442" pos:column="25">boolean<pos:position pos:line="442" pos:column="32"/></name></type> <name pos:line="442" pos:column="33">is_space<pos:position pos:line="442" pos:column="41"/></name> <init pos:line="442" pos:column="42">= <expr><call><name pos:line="442" pos:column="44">STREQ<pos:position pos:line="442" pos:column="49"/></name> <argument_list pos:line="442" pos:column="50">(<argument><expr><name pos:line="442" pos:column="51">str<pos:position pos:line="442" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="442" pos:column="56">"space"<pos:position pos:line="442" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="442" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="442" pos:column="65"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="443" pos:column="25">boolean<pos:position pos:line="443" pos:column="32"/></name></type> <name pos:line="443" pos:column="33">is_upper<pos:position pos:line="443" pos:column="41"/></name> <init pos:line="443" pos:column="42">= <expr><call><name pos:line="443" pos:column="44">STREQ<pos:position pos:line="443" pos:column="49"/></name> <argument_list pos:line="443" pos:column="50">(<argument><expr><name pos:line="443" pos:column="51">str<pos:position pos:line="443" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="443" pos:column="56">"upper"<pos:position pos:line="443" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="443" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="443" pos:column="65"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="444" pos:column="25">boolean<pos:position pos:line="444" pos:column="32"/></name></type> <name pos:line="444" pos:column="33">is_xdigit<pos:position pos:line="444" pos:column="42"/></name> <init pos:line="444" pos:column="43">= <expr><call><name pos:line="444" pos:column="45">STREQ<pos:position pos:line="444" pos:column="50"/></name> <argument_list pos:line="444" pos:column="51">(<argument><expr><name pos:line="444" pos:column="52">str<pos:position pos:line="444" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="444" pos:column="57">"xdigit"<pos:position pos:line="444" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="444" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="444" pos:column="67"/></decl_stmt>

                        <if pos:line="446" pos:column="25">if <condition pos:line="446" pos:column="28">(<expr><operator pos:line="446" pos:column="29">!<pos:position pos:line="446" pos:column="30"/></operator><call><name pos:line="446" pos:column="30">IS_CHAR_CLASS<pos:position pos:line="446" pos:column="43"/></name> <argument_list pos:line="446" pos:column="44">(<argument><expr><name pos:line="446" pos:column="45">str<pos:position pos:line="446" pos:column="48"/></name></expr></argument>)<pos:position pos:line="446" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="446" pos:column="50"/></condition><then pos:line="446" pos:column="50">
			  <block type="pseudo"><expr_stmt><expr><call><name pos:line="447" pos:column="27">FREE_STACK_RETURN<pos:position pos:line="447" pos:column="44"/></name> <argument_list pos:line="447" pos:column="45">(<argument><expr><name pos:line="447" pos:column="46">REG_ECTYPE<pos:position pos:line="447" pos:column="56"/></name></expr></argument>)<pos:position pos:line="447" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="447" pos:column="58"/></expr_stmt></block></then></if>

                        <comment type="block" pos:line="449" pos:column="25">/* Throw away the ] at the end of the character
                           class.  */</comment>
                        <expr_stmt><expr><call><name pos:line="451" pos:column="25">PATFETCH<pos:position pos:line="451" pos:column="33"/></name> <argument_list pos:line="451" pos:column="34">(<argument><expr><name pos:line="451" pos:column="35">c<pos:position pos:line="451" pos:column="36"/></name></expr></argument>)<pos:position pos:line="451" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="451" pos:column="38"/></expr_stmt>

                        <if pos:line="453" pos:column="25">if <condition pos:line="453" pos:column="28">(<expr><name pos:line="453" pos:column="29">p<pos:position pos:line="453" pos:column="30"/></name> <operator pos:line="453" pos:column="31">==<pos:position pos:line="453" pos:column="33"/></operator> <name pos:line="453" pos:column="34">pend<pos:position pos:line="453" pos:column="38"/></name></expr>)<pos:position pos:line="453" pos:column="39"/></condition><then pos:line="453" pos:column="39"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="453" pos:column="40">FREE_STACK_RETURN<pos:position pos:line="453" pos:column="57"/></name> <argument_list pos:line="453" pos:column="58">(<argument><expr><name pos:line="453" pos:column="59">REG_EBRACK<pos:position pos:line="453" pos:column="69"/></name></expr></argument>)<pos:position pos:line="453" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="453" pos:column="71"/></expr_stmt></block></then></if>

                        <for pos:line="455" pos:column="25">for <control pos:line="455" pos:column="29">(<init><expr><name pos:line="455" pos:column="30">ch<pos:position pos:line="455" pos:column="32"/></name> <operator pos:line="455" pos:column="33">=<pos:position pos:line="455" pos:column="34"/></operator> <literal type="number" pos:line="455" pos:column="35">0<pos:position pos:line="455" pos:column="36"/></literal></expr>;<pos:position pos:line="455" pos:column="37"/></init> <condition><expr><name pos:line="455" pos:column="38">ch<pos:position pos:line="455" pos:column="40"/></name> <operator pos:line="455" pos:column="41">&lt;<pos:position pos:line="455" pos:column="45"/></operator> <literal type="number" pos:line="455" pos:column="43">1<pos:position pos:line="455" pos:column="44"/></literal> <operator pos:line="455" pos:column="45">&lt;&lt;<pos:position pos:line="455" pos:column="53"/></operator> <name pos:line="455" pos:column="48">BYTEWIDTH<pos:position pos:line="455" pos:column="57"/></name></expr>;<pos:position pos:line="455" pos:column="58"/></condition> <incr><expr><name pos:line="455" pos:column="59">ch<pos:position pos:line="455" pos:column="61"/></name><operator pos:line="455" pos:column="61">++<pos:position pos:line="455" pos:column="63"/></operator></expr></incr>)<pos:position pos:line="455" pos:column="64"/></control>
                          <block pos:line="456" pos:column="27">{
			    <comment type="block" pos:line="457" pos:column="29">/* This was split into 3 if's to
			       avoid an arbitrary limit in some compiler.  */</comment>
                            <if pos:line="459" pos:column="29">if <condition pos:line="459" pos:column="32">(   <expr><operator pos:line="459" pos:column="36">(<pos:position pos:line="459" pos:column="37"/></operator><name pos:line="459" pos:column="37">is_alnum<pos:position pos:line="459" pos:column="45"/></name>  <operator pos:line="459" pos:column="47">&amp;&amp;<pos:position pos:line="459" pos:column="57"/></operator> <call><name pos:line="459" pos:column="50">ISALNUM<pos:position pos:line="459" pos:column="57"/></name> <argument_list pos:line="459" pos:column="58">(<argument><expr><name pos:line="459" pos:column="59">ch<pos:position pos:line="459" pos:column="61"/></name></expr></argument>)<pos:position pos:line="459" pos:column="62"/></argument_list></call><operator pos:line="459" pos:column="62">)<pos:position pos:line="459" pos:column="63"/></operator>
                                <operator pos:line="460" pos:column="33">||<pos:position pos:line="460" pos:column="35"/></operator> <operator pos:line="460" pos:column="36">(<pos:position pos:line="460" pos:column="37"/></operator><name pos:line="460" pos:column="37">is_alpha<pos:position pos:line="460" pos:column="45"/></name>  <operator pos:line="460" pos:column="47">&amp;&amp;<pos:position pos:line="460" pos:column="57"/></operator> <call><name pos:line="460" pos:column="50">ISALPHA<pos:position pos:line="460" pos:column="57"/></name> <argument_list pos:line="460" pos:column="58">(<argument><expr><name pos:line="460" pos:column="59">ch<pos:position pos:line="460" pos:column="61"/></name></expr></argument>)<pos:position pos:line="460" pos:column="62"/></argument_list></call><operator pos:line="460" pos:column="62">)<pos:position pos:line="460" pos:column="63"/></operator>
                                <operator pos:line="461" pos:column="33">||<pos:position pos:line="461" pos:column="35"/></operator> <operator pos:line="461" pos:column="36">(<pos:position pos:line="461" pos:column="37"/></operator><name pos:line="461" pos:column="37">is_blank<pos:position pos:line="461" pos:column="45"/></name>  <operator pos:line="461" pos:column="47">&amp;&amp;<pos:position pos:line="461" pos:column="57"/></operator> <call><name pos:line="461" pos:column="50">ISBLANK<pos:position pos:line="461" pos:column="57"/></name> <argument_list pos:line="461" pos:column="58">(<argument><expr><name pos:line="461" pos:column="59">ch<pos:position pos:line="461" pos:column="61"/></name></expr></argument>)<pos:position pos:line="461" pos:column="62"/></argument_list></call><operator pos:line="461" pos:column="62">)<pos:position pos:line="461" pos:column="63"/></operator>
                                <operator pos:line="462" pos:column="33">||<pos:position pos:line="462" pos:column="35"/></operator> <operator pos:line="462" pos:column="36">(<pos:position pos:line="462" pos:column="37"/></operator><name pos:line="462" pos:column="37">is_cntrl<pos:position pos:line="462" pos:column="45"/></name>  <operator pos:line="462" pos:column="47">&amp;&amp;<pos:position pos:line="462" pos:column="57"/></operator> <call><name pos:line="462" pos:column="50">ISCNTRL<pos:position pos:line="462" pos:column="57"/></name> <argument_list pos:line="462" pos:column="58">(<argument><expr><name pos:line="462" pos:column="59">ch<pos:position pos:line="462" pos:column="61"/></name></expr></argument>)<pos:position pos:line="462" pos:column="62"/></argument_list></call><operator pos:line="462" pos:column="62">)<pos:position pos:line="462" pos:column="63"/></operator></expr>)<pos:position pos:line="462" pos:column="64"/></condition><then pos:line="462" pos:column="64">
			      <block type="pseudo"><expr_stmt><expr><call><name pos:line="463" pos:column="31">SET_LIST_BIT<pos:position pos:line="463" pos:column="43"/></name> <argument_list pos:line="463" pos:column="44">(<argument><expr><name pos:line="463" pos:column="45">ch<pos:position pos:line="463" pos:column="47"/></name></expr></argument>)<pos:position pos:line="463" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="463" pos:column="49"/></expr_stmt></block></then></if>
			    <if pos:line="464" pos:column="29">if <condition pos:line="464" pos:column="32">(   <expr><operator pos:line="464" pos:column="36">(<pos:position pos:line="464" pos:column="37"/></operator><name pos:line="464" pos:column="37">is_digit<pos:position pos:line="464" pos:column="45"/></name>  <operator pos:line="464" pos:column="47">&amp;&amp;<pos:position pos:line="464" pos:column="57"/></operator> <call><name pos:line="464" pos:column="50">ISDIGIT<pos:position pos:line="464" pos:column="57"/></name> <argument_list pos:line="464" pos:column="58">(<argument><expr><name pos:line="464" pos:column="59">ch<pos:position pos:line="464" pos:column="61"/></name></expr></argument>)<pos:position pos:line="464" pos:column="62"/></argument_list></call><operator pos:line="464" pos:column="62">)<pos:position pos:line="464" pos:column="63"/></operator>
                                <operator pos:line="465" pos:column="33">||<pos:position pos:line="465" pos:column="35"/></operator> <operator pos:line="465" pos:column="36">(<pos:position pos:line="465" pos:column="37"/></operator><name pos:line="465" pos:column="37">is_graph<pos:position pos:line="465" pos:column="45"/></name>  <operator pos:line="465" pos:column="47">&amp;&amp;<pos:position pos:line="465" pos:column="57"/></operator> <call><name pos:line="465" pos:column="50">ISGRAPH<pos:position pos:line="465" pos:column="57"/></name> <argument_list pos:line="465" pos:column="58">(<argument><expr><name pos:line="465" pos:column="59">ch<pos:position pos:line="465" pos:column="61"/></name></expr></argument>)<pos:position pos:line="465" pos:column="62"/></argument_list></call><operator pos:line="465" pos:column="62">)<pos:position pos:line="465" pos:column="63"/></operator>
                                <operator pos:line="466" pos:column="33">||<pos:position pos:line="466" pos:column="35"/></operator> <operator pos:line="466" pos:column="36">(<pos:position pos:line="466" pos:column="37"/></operator><name pos:line="466" pos:column="37">is_lower<pos:position pos:line="466" pos:column="45"/></name>  <operator pos:line="466" pos:column="47">&amp;&amp;<pos:position pos:line="466" pos:column="57"/></operator> <call><name pos:line="466" pos:column="50">ISLOWER<pos:position pos:line="466" pos:column="57"/></name> <argument_list pos:line="466" pos:column="58">(<argument><expr><name pos:line="466" pos:column="59">ch<pos:position pos:line="466" pos:column="61"/></name></expr></argument>)<pos:position pos:line="466" pos:column="62"/></argument_list></call><operator pos:line="466" pos:column="62">)<pos:position pos:line="466" pos:column="63"/></operator>
                                <operator pos:line="467" pos:column="33">||<pos:position pos:line="467" pos:column="35"/></operator> <operator pos:line="467" pos:column="36">(<pos:position pos:line="467" pos:column="37"/></operator><name pos:line="467" pos:column="37">is_print<pos:position pos:line="467" pos:column="45"/></name>  <operator pos:line="467" pos:column="47">&amp;&amp;<pos:position pos:line="467" pos:column="57"/></operator> <call><name pos:line="467" pos:column="50">ISPRINT<pos:position pos:line="467" pos:column="57"/></name> <argument_list pos:line="467" pos:column="58">(<argument><expr><name pos:line="467" pos:column="59">ch<pos:position pos:line="467" pos:column="61"/></name></expr></argument>)<pos:position pos:line="467" pos:column="62"/></argument_list></call><operator pos:line="467" pos:column="62">)<pos:position pos:line="467" pos:column="63"/></operator></expr>)<pos:position pos:line="467" pos:column="64"/></condition><then pos:line="467" pos:column="64">
			      <block type="pseudo"><expr_stmt><expr><call><name pos:line="468" pos:column="31">SET_LIST_BIT<pos:position pos:line="468" pos:column="43"/></name> <argument_list pos:line="468" pos:column="44">(<argument><expr><name pos:line="468" pos:column="45">ch<pos:position pos:line="468" pos:column="47"/></name></expr></argument>)<pos:position pos:line="468" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="468" pos:column="49"/></expr_stmt></block></then></if>
			    <if pos:line="469" pos:column="29">if <condition pos:line="469" pos:column="32">(   <expr><operator pos:line="469" pos:column="36">(<pos:position pos:line="469" pos:column="37"/></operator><name pos:line="469" pos:column="37">is_punct<pos:position pos:line="469" pos:column="45"/></name>  <operator pos:line="469" pos:column="47">&amp;&amp;<pos:position pos:line="469" pos:column="57"/></operator> <call><name pos:line="469" pos:column="50">ISPUNCT<pos:position pos:line="469" pos:column="57"/></name> <argument_list pos:line="469" pos:column="58">(<argument><expr><name pos:line="469" pos:column="59">ch<pos:position pos:line="469" pos:column="61"/></name></expr></argument>)<pos:position pos:line="469" pos:column="62"/></argument_list></call><operator pos:line="469" pos:column="62">)<pos:position pos:line="469" pos:column="63"/></operator>
                                <operator pos:line="470" pos:column="33">||<pos:position pos:line="470" pos:column="35"/></operator> <operator pos:line="470" pos:column="36">(<pos:position pos:line="470" pos:column="37"/></operator><name pos:line="470" pos:column="37">is_space<pos:position pos:line="470" pos:column="45"/></name>  <operator pos:line="470" pos:column="47">&amp;&amp;<pos:position pos:line="470" pos:column="57"/></operator> <call><name pos:line="470" pos:column="50">ISSPACE<pos:position pos:line="470" pos:column="57"/></name> <argument_list pos:line="470" pos:column="58">(<argument><expr><name pos:line="470" pos:column="59">ch<pos:position pos:line="470" pos:column="61"/></name></expr></argument>)<pos:position pos:line="470" pos:column="62"/></argument_list></call><operator pos:line="470" pos:column="62">)<pos:position pos:line="470" pos:column="63"/></operator>
                                <operator pos:line="471" pos:column="33">||<pos:position pos:line="471" pos:column="35"/></operator> <operator pos:line="471" pos:column="36">(<pos:position pos:line="471" pos:column="37"/></operator><name pos:line="471" pos:column="37">is_upper<pos:position pos:line="471" pos:column="45"/></name>  <operator pos:line="471" pos:column="47">&amp;&amp;<pos:position pos:line="471" pos:column="57"/></operator> <call><name pos:line="471" pos:column="50">ISUPPER<pos:position pos:line="471" pos:column="57"/></name> <argument_list pos:line="471" pos:column="58">(<argument><expr><name pos:line="471" pos:column="59">ch<pos:position pos:line="471" pos:column="61"/></name></expr></argument>)<pos:position pos:line="471" pos:column="62"/></argument_list></call><operator pos:line="471" pos:column="62">)<pos:position pos:line="471" pos:column="63"/></operator>
                                <operator pos:line="472" pos:column="33">||<pos:position pos:line="472" pos:column="35"/></operator> <operator pos:line="472" pos:column="36">(<pos:position pos:line="472" pos:column="37"/></operator><name pos:line="472" pos:column="37">is_xdigit<pos:position pos:line="472" pos:column="46"/></name> <operator pos:line="472" pos:column="47">&amp;&amp;<pos:position pos:line="472" pos:column="57"/></operator> <call><name pos:line="472" pos:column="50">ISXDIGIT<pos:position pos:line="472" pos:column="58"/></name> <argument_list pos:line="472" pos:column="59">(<argument><expr><name pos:line="472" pos:column="60">ch<pos:position pos:line="472" pos:column="62"/></name></expr></argument>)<pos:position pos:line="472" pos:column="63"/></argument_list></call><operator pos:line="472" pos:column="63">)<pos:position pos:line="472" pos:column="64"/></operator></expr>)<pos:position pos:line="472" pos:column="65"/></condition><then pos:line="472" pos:column="65">
			      <block type="pseudo"><expr_stmt><expr><call><name pos:line="473" pos:column="31">SET_LIST_BIT<pos:position pos:line="473" pos:column="43"/></name> <argument_list pos:line="473" pos:column="44">(<argument><expr><name pos:line="473" pos:column="45">ch<pos:position pos:line="473" pos:column="47"/></name></expr></argument>)<pos:position pos:line="473" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="473" pos:column="49"/></expr_stmt></block></then></if>
			    <if pos:line="474" pos:column="29">if <condition pos:line="474" pos:column="32">(   <expr><name pos:line="474" pos:column="36">translate<pos:position pos:line="474" pos:column="45"/></name> <operator pos:line="474" pos:column="46">&amp;&amp;<pos:position pos:line="474" pos:column="56"/></operator> <operator pos:line="474" pos:column="49">(<pos:position pos:line="474" pos:column="50"/></operator><name pos:line="474" pos:column="50">is_upper<pos:position pos:line="474" pos:column="58"/></name> <operator pos:line="474" pos:column="59">||<pos:position pos:line="474" pos:column="61"/></operator> <name pos:line="474" pos:column="62">is_lower<pos:position pos:line="474" pos:column="70"/></name><operator pos:line="474" pos:column="70">)<pos:position pos:line="474" pos:column="71"/></operator>
				<operator pos:line="475" pos:column="33">&amp;&amp;<pos:position pos:line="475" pos:column="43"/></operator> <operator pos:line="475" pos:column="36">(<pos:position pos:line="475" pos:column="37"/></operator><call><name pos:line="475" pos:column="37">ISUPPER<pos:position pos:line="475" pos:column="44"/></name> <argument_list pos:line="475" pos:column="45">(<argument><expr><name pos:line="475" pos:column="46">ch<pos:position pos:line="475" pos:column="48"/></name></expr></argument>)<pos:position pos:line="475" pos:column="49"/></argument_list></call> <operator pos:line="475" pos:column="50">||<pos:position pos:line="475" pos:column="52"/></operator> <call><name pos:line="475" pos:column="53">ISLOWER<pos:position pos:line="475" pos:column="60"/></name> <argument_list pos:line="475" pos:column="61">(<argument><expr><name pos:line="475" pos:column="62">ch<pos:position pos:line="475" pos:column="64"/></name></expr></argument>)<pos:position pos:line="475" pos:column="65"/></argument_list></call><operator pos:line="475" pos:column="65">)<pos:position pos:line="475" pos:column="66"/></operator></expr>)<pos:position pos:line="475" pos:column="67"/></condition><then pos:line="475" pos:column="67">
			      <block type="pseudo"><expr_stmt><expr><call><name pos:line="476" pos:column="31">SET_LIST_BIT<pos:position pos:line="476" pos:column="43"/></name> <argument_list pos:line="476" pos:column="44">(<argument><expr><name pos:line="476" pos:column="45">ch<pos:position pos:line="476" pos:column="47"/></name></expr></argument>)<pos:position pos:line="476" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="476" pos:column="49"/></expr_stmt></block></then></if>
                          }<pos:position pos:line="477" pos:column="28"/></block></for>
                        <expr_stmt><expr><name pos:line="478" pos:column="25">had_char_class<pos:position pos:line="478" pos:column="39"/></name> <operator pos:line="478" pos:column="40">=<pos:position pos:line="478" pos:column="41"/></operator> <literal type="boolean" pos:line="478" pos:column="42">true<pos:position pos:line="478" pos:column="46"/></literal></expr>;<pos:position pos:line="478" pos:column="47"/></expr_stmt>
<cpp:endif pos:line="479" pos:column="1">#<cpp:directive pos:line="479" pos:column="2">endif<pos:position pos:line="479" pos:column="7"/></cpp:directive></cpp:endif>	<comment type="block" pos:line="479" pos:column="9">/* libc || wctype.h */</comment>
                      }<pos:position pos:line="480" pos:column="24"/></block></then>
                    <else pos:line="481" pos:column="21">else
                      <block pos:line="482" pos:column="23">{
                        <expr_stmt><expr><name pos:line="483" pos:column="25">c1<pos:position pos:line="483" pos:column="27"/></name><operator pos:line="483" pos:column="27">++<pos:position pos:line="483" pos:column="29"/></operator></expr>;<pos:position pos:line="483" pos:column="30"/></expr_stmt>
                        <while pos:line="484" pos:column="25">while <condition pos:line="484" pos:column="31">(<expr><name pos:line="484" pos:column="32">c1<pos:position pos:line="484" pos:column="34"/></name><operator pos:line="484" pos:column="34">--<pos:position pos:line="484" pos:column="36"/></operator></expr>)<pos:position pos:line="484" pos:column="37"/></condition>
                          <block type="pseudo"><expr_stmt><expr><name pos:line="485" pos:column="27">PATUNFETCH<pos:position pos:line="485" pos:column="37"/></name></expr>;<pos:position pos:line="485" pos:column="38"/></expr_stmt></block></while>
                        <expr_stmt><expr><call><name pos:line="486" pos:column="25">SET_LIST_BIT<pos:position pos:line="486" pos:column="37"/></name> <argument_list pos:line="486" pos:column="38">(<argument><expr><literal type="char" pos:line="486" pos:column="39">'['<pos:position pos:line="486" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="486" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="486" pos:column="44"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="487" pos:column="25">SET_LIST_BIT<pos:position pos:line="487" pos:column="37"/></name> <argument_list pos:line="487" pos:column="38">(<argument><expr><literal type="char" pos:line="487" pos:column="39">':'<pos:position pos:line="487" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="487" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="487" pos:column="44"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="488" pos:column="25">had_char_class<pos:position pos:line="488" pos:column="39"/></name> <operator pos:line="488" pos:column="40">=<pos:position pos:line="488" pos:column="41"/></operator> <literal type="boolean" pos:line="488" pos:column="42">false<pos:position pos:line="488" pos:column="47"/></literal></expr>;<pos:position pos:line="488" pos:column="48"/></expr_stmt>
                      }<pos:position pos:line="489" pos:column="24"/></block></else></if>
                  }<pos:position pos:line="490" pos:column="20"/></block></then></if></elseif>
                <else pos:line="491" pos:column="17">else
                  <block pos:line="492" pos:column="19">{
                    <expr_stmt><expr><name pos:line="493" pos:column="21">had_char_class<pos:position pos:line="493" pos:column="35"/></name> <operator pos:line="493" pos:column="36">=<pos:position pos:line="493" pos:column="37"/></operator> <literal type="boolean" pos:line="493" pos:column="38">false<pos:position pos:line="493" pos:column="43"/></literal></expr>;<pos:position pos:line="493" pos:column="44"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="494" pos:column="21">SET_LIST_BIT<pos:position pos:line="494" pos:column="33"/></name> <argument_list pos:line="494" pos:column="34">(<argument><expr><name pos:line="494" pos:column="35">c<pos:position pos:line="494" pos:column="36"/></name></expr></argument>)<pos:position pos:line="494" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="494" pos:column="38"/></expr_stmt>
                  }<pos:position pos:line="495" pos:column="20"/></block></else></if>
              }<pos:position pos:line="496" pos:column="16"/></block></for>

            <comment type="block" pos:line="498" pos:column="13">/* Discard any (non)matching list bytes that are all 0 at the
               end of the map.  Decrease the map-length byte too.  */</comment>
            <while pos:line="500" pos:column="13">while <condition pos:line="500" pos:column="19">(<expr><operator pos:line="500" pos:column="20">(<pos:position pos:line="500" pos:column="21"/></operator><name pos:line="500" pos:column="21">int<pos:position pos:line="500" pos:column="24"/></name><operator pos:line="500" pos:column="24">)<pos:position pos:line="500" pos:column="25"/></operator> <name><name pos:line="500" pos:column="26">b<pos:position pos:line="500" pos:column="27"/></name><index pos:line="500" pos:column="27">[<expr><operator pos:line="500" pos:column="28">-<pos:position pos:line="500" pos:column="29"/></operator><literal type="number" pos:line="500" pos:column="29">1<pos:position pos:line="500" pos:column="30"/></literal></expr>]<pos:position pos:line="500" pos:column="31"/></index></name> <operator pos:line="500" pos:column="32">&gt;<pos:position pos:line="500" pos:column="36"/></operator> <literal type="number" pos:line="500" pos:column="34">0<pos:position pos:line="500" pos:column="35"/></literal> <operator pos:line="500" pos:column="36">&amp;&amp;<pos:position pos:line="500" pos:column="46"/></operator> <name><name pos:line="500" pos:column="39">b<pos:position pos:line="500" pos:column="40"/></name><index pos:line="500" pos:column="40">[<expr><name><name pos:line="500" pos:column="41">b<pos:position pos:line="500" pos:column="42"/></name><index pos:line="500" pos:column="42">[<expr><operator pos:line="500" pos:column="43">-<pos:position pos:line="500" pos:column="44"/></operator><literal type="number" pos:line="500" pos:column="44">1<pos:position pos:line="500" pos:column="45"/></literal></expr>]<pos:position pos:line="500" pos:column="46"/></index></name> <operator pos:line="500" pos:column="47">-<pos:position pos:line="500" pos:column="48"/></operator> <literal type="number" pos:line="500" pos:column="49">1<pos:position pos:line="500" pos:column="50"/></literal></expr>]<pos:position pos:line="500" pos:column="51"/></index></name> <operator pos:line="500" pos:column="52">==<pos:position pos:line="500" pos:column="54"/></operator> <literal type="number" pos:line="500" pos:column="55">0<pos:position pos:line="500" pos:column="56"/></literal></expr>)<pos:position pos:line="500" pos:column="57"/></condition>
              <block type="pseudo"><expr_stmt><expr><name><name pos:line="501" pos:column="15">b<pos:position pos:line="501" pos:column="16"/></name><index pos:line="501" pos:column="16">[<expr><operator pos:line="501" pos:column="17">-<pos:position pos:line="501" pos:column="18"/></operator><literal type="number" pos:line="501" pos:column="18">1<pos:position pos:line="501" pos:column="19"/></literal></expr>]<pos:position pos:line="501" pos:column="20"/></index></name><operator pos:line="501" pos:column="20">--<pos:position pos:line="501" pos:column="22"/></operator></expr>;<pos:position pos:line="501" pos:column="23"/></expr_stmt></block></while>
            <expr_stmt><expr><name pos:line="502" pos:column="13">b<pos:position pos:line="502" pos:column="14"/></name> <operator pos:line="502" pos:column="15">+=<pos:position pos:line="502" pos:column="17"/></operator> <name><name pos:line="502" pos:column="18">b<pos:position pos:line="502" pos:column="19"/></name><index pos:line="502" pos:column="19">[<expr><operator pos:line="502" pos:column="20">-<pos:position pos:line="502" pos:column="21"/></operator><literal type="number" pos:line="502" pos:column="21">1<pos:position pos:line="502" pos:column="22"/></literal></expr>]<pos:position pos:line="502" pos:column="23"/></index></name></expr>;<pos:position pos:line="502" pos:column="24"/></expr_stmt>
          }<pos:position pos:line="503" pos:column="12"/></block>
          <break pos:line="504" pos:column="11">break;<pos:position pos:line="504" pos:column="17"/></break>


	<case pos:line="507" pos:column="9">case <expr><literal type="char" pos:line="507" pos:column="14">'('<pos:position pos:line="507" pos:column="17"/></literal></expr>:<pos:position pos:line="507" pos:column="18"/></case>
          <if pos:line="508" pos:column="11">if <condition pos:line="508" pos:column="14">(<expr><name pos:line="508" pos:column="15">syntax<pos:position pos:line="508" pos:column="21"/></name> <operator pos:line="508" pos:column="22">&amp;<pos:position pos:line="508" pos:column="27"/></operator> <name pos:line="508" pos:column="24">RE_NO_BK_PARENS<pos:position pos:line="508" pos:column="39"/></name></expr>)<pos:position pos:line="508" pos:column="40"/></condition><then pos:line="508" pos:column="40">
            <block type="pseudo"><goto pos:line="509" pos:column="13">goto <name pos:line="509" pos:column="18">handle_open<pos:position pos:line="509" pos:column="29"/></name>;<pos:position pos:line="509" pos:column="30"/></goto></block></then>
          <else pos:line="510" pos:column="11">else
            <block type="pseudo"><goto pos:line="511" pos:column="13">goto <name pos:line="511" pos:column="18">normal_char<pos:position pos:line="511" pos:column="29"/></name>;<pos:position pos:line="511" pos:column="30"/></goto></block></else></if>


        <case pos:line="514" pos:column="9">case <expr><literal type="char" pos:line="514" pos:column="14">')'<pos:position pos:line="514" pos:column="17"/></literal></expr>:<pos:position pos:line="514" pos:column="18"/></case>
          <if pos:line="515" pos:column="11">if <condition pos:line="515" pos:column="14">(<expr><name pos:line="515" pos:column="15">syntax<pos:position pos:line="515" pos:column="21"/></name> <operator pos:line="515" pos:column="22">&amp;<pos:position pos:line="515" pos:column="27"/></operator> <name pos:line="515" pos:column="24">RE_NO_BK_PARENS<pos:position pos:line="515" pos:column="39"/></name></expr>)<pos:position pos:line="515" pos:column="40"/></condition><then pos:line="515" pos:column="40">
            <block type="pseudo"><goto pos:line="516" pos:column="13">goto <name pos:line="516" pos:column="18">handle_close<pos:position pos:line="516" pos:column="30"/></name>;<pos:position pos:line="516" pos:column="31"/></goto></block></then>
          <else pos:line="517" pos:column="11">else
            <block type="pseudo"><goto pos:line="518" pos:column="13">goto <name pos:line="518" pos:column="18">normal_char<pos:position pos:line="518" pos:column="29"/></name>;<pos:position pos:line="518" pos:column="30"/></goto></block></else></if>


        <case pos:line="521" pos:column="9">case <expr><literal type="char" pos:line="521" pos:column="14">'\n'<pos:position pos:line="521" pos:column="18"/></literal></expr>:<pos:position pos:line="521" pos:column="19"/></case>
          <if pos:line="522" pos:column="11">if <condition pos:line="522" pos:column="14">(<expr><name pos:line="522" pos:column="15">syntax<pos:position pos:line="522" pos:column="21"/></name> <operator pos:line="522" pos:column="22">&amp;<pos:position pos:line="522" pos:column="27"/></operator> <name pos:line="522" pos:column="24">RE_NEWLINE_ALT<pos:position pos:line="522" pos:column="38"/></name></expr>)<pos:position pos:line="522" pos:column="39"/></condition><then pos:line="522" pos:column="39">
            <block type="pseudo"><goto pos:line="523" pos:column="13">goto <name pos:line="523" pos:column="18">handle_alt<pos:position pos:line="523" pos:column="28"/></name>;<pos:position pos:line="523" pos:column="29"/></goto></block></then>
          <else pos:line="524" pos:column="11">else
            <block type="pseudo"><goto pos:line="525" pos:column="13">goto <name pos:line="525" pos:column="18">normal_char<pos:position pos:line="525" pos:column="29"/></name>;<pos:position pos:line="525" pos:column="30"/></goto></block></else></if>


	<case pos:line="528" pos:column="9">case <expr><literal type="char" pos:line="528" pos:column="14">'|'<pos:position pos:line="528" pos:column="17"/></literal></expr>:<pos:position pos:line="528" pos:column="18"/></case>
          <if pos:line="529" pos:column="11">if <condition pos:line="529" pos:column="14">(<expr><name pos:line="529" pos:column="15">syntax<pos:position pos:line="529" pos:column="21"/></name> <operator pos:line="529" pos:column="22">&amp;<pos:position pos:line="529" pos:column="27"/></operator> <name pos:line="529" pos:column="24">RE_NO_BK_VBAR<pos:position pos:line="529" pos:column="37"/></name></expr>)<pos:position pos:line="529" pos:column="38"/></condition><then pos:line="529" pos:column="38">
            <block type="pseudo"><goto pos:line="530" pos:column="13">goto <name pos:line="530" pos:column="18">handle_alt<pos:position pos:line="530" pos:column="28"/></name>;<pos:position pos:line="530" pos:column="29"/></goto></block></then>
          <else pos:line="531" pos:column="11">else
            <block type="pseudo"><goto pos:line="532" pos:column="13">goto <name pos:line="532" pos:column="18">normal_char<pos:position pos:line="532" pos:column="29"/></name>;<pos:position pos:line="532" pos:column="30"/></goto></block></else></if>


        <case pos:line="535" pos:column="9">case <expr><literal type="char" pos:line="535" pos:column="14">'{'<pos:position pos:line="535" pos:column="17"/></literal></expr>:<pos:position pos:line="535" pos:column="18"/></case>
           <if pos:line="536" pos:column="12">if <condition pos:line="536" pos:column="15">(<expr><name pos:line="536" pos:column="16">syntax<pos:position pos:line="536" pos:column="22"/></name> <operator pos:line="536" pos:column="23">&amp;<pos:position pos:line="536" pos:column="28"/></operator> <name pos:line="536" pos:column="25">RE_INTERVALS<pos:position pos:line="536" pos:column="37"/></name> <operator pos:line="536" pos:column="38">&amp;&amp;<pos:position pos:line="536" pos:column="48"/></operator> <name pos:line="536" pos:column="41">syntax<pos:position pos:line="536" pos:column="47"/></name> <operator pos:line="536" pos:column="48">&amp;<pos:position pos:line="536" pos:column="53"/></operator> <name pos:line="536" pos:column="50">RE_NO_BK_BRACES<pos:position pos:line="536" pos:column="65"/></name></expr>)<pos:position pos:line="536" pos:column="66"/></condition><then pos:line="536" pos:column="66">
             <block type="pseudo"><goto pos:line="537" pos:column="14">goto <name pos:line="537" pos:column="19">handle_interval<pos:position pos:line="537" pos:column="34"/></name>;<pos:position pos:line="537" pos:column="35"/></goto></block></then>
           <else pos:line="538" pos:column="12">else
             <block type="pseudo"><goto pos:line="539" pos:column="14">goto <name pos:line="539" pos:column="19">normal_char<pos:position pos:line="539" pos:column="30"/></name>;<pos:position pos:line="539" pos:column="31"/></goto></block></else></if>


        <case pos:line="542" pos:column="9">case <expr><literal type="char" pos:line="542" pos:column="14">'\\'<pos:position pos:line="542" pos:column="18"/></literal></expr>:<pos:position pos:line="542" pos:column="19"/></case>
          <if pos:line="543" pos:column="11">if <condition pos:line="543" pos:column="14">(<expr><name pos:line="543" pos:column="15">p<pos:position pos:line="543" pos:column="16"/></name> <operator pos:line="543" pos:column="17">==<pos:position pos:line="543" pos:column="19"/></operator> <name pos:line="543" pos:column="20">pend<pos:position pos:line="543" pos:column="24"/></name></expr>)<pos:position pos:line="543" pos:column="25"/></condition><then pos:line="543" pos:column="25"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="543" pos:column="26">FREE_STACK_RETURN<pos:position pos:line="543" pos:column="43"/></name> <argument_list pos:line="543" pos:column="44">(<argument><expr><name pos:line="543" pos:column="45">REG_EESCAPE<pos:position pos:line="543" pos:column="56"/></name></expr></argument>)<pos:position pos:line="543" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="543" pos:column="58"/></expr_stmt></block></then></if>

          <comment type="block" pos:line="545" pos:column="11">/* Do not translate the character after the \, so that we can
             distinguish, e.g., \B from \b, even if we normally would
             translate, e.g., B to b.  */</comment>
          <expr_stmt><expr><call><name pos:line="548" pos:column="11">PATFETCH_RAW<pos:position pos:line="548" pos:column="23"/></name> <argument_list pos:line="548" pos:column="24">(<argument><expr><name pos:line="548" pos:column="25">c<pos:position pos:line="548" pos:column="26"/></name></expr></argument>)<pos:position pos:line="548" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="548" pos:column="28"/></expr_stmt>

          <switch pos:line="550" pos:column="11">switch <condition pos:line="550" pos:column="18">(<expr><name pos:line="550" pos:column="19">c<pos:position pos:line="550" pos:column="20"/></name></expr>)<pos:position pos:line="550" pos:column="21"/></condition>
            <block pos:line="551" pos:column="13">{
            <case pos:line="552" pos:column="13">case <expr><literal type="char" pos:line="552" pos:column="18">'('<pos:position pos:line="552" pos:column="21"/></literal></expr>:<pos:position pos:line="552" pos:column="22"/></case>
              <if pos:line="553" pos:column="15">if <condition pos:line="553" pos:column="18">(<expr><name pos:line="553" pos:column="19">syntax<pos:position pos:line="553" pos:column="25"/></name> <operator pos:line="553" pos:column="26">&amp;<pos:position pos:line="553" pos:column="31"/></operator> <name pos:line="553" pos:column="28">RE_NO_BK_PARENS<pos:position pos:line="553" pos:column="43"/></name></expr>)<pos:position pos:line="553" pos:column="44"/></condition><then pos:line="553" pos:column="44">
                <block type="pseudo"><goto pos:line="554" pos:column="17">goto <name pos:line="554" pos:column="22">normal_backslash<pos:position pos:line="554" pos:column="38"/></name>;<pos:position pos:line="554" pos:column="39"/></goto></block></then></if>

            <label><name pos:line="556" pos:column="13">handle_open<pos:position pos:line="556" pos:column="24"/></name>:<pos:position pos:line="556" pos:column="25"/></label>
              <expr_stmt><expr><name><name pos:line="557" pos:column="15">bufp<pos:position pos:line="557" pos:column="19"/></name><operator pos:line="557" pos:column="19">-&gt;<pos:position pos:line="557" pos:column="24"/></operator><name pos:line="557" pos:column="21">re_nsub<pos:position pos:line="557" pos:column="28"/></name></name><operator pos:line="557" pos:column="28">++<pos:position pos:line="557" pos:column="30"/></operator></expr>;<pos:position pos:line="557" pos:column="31"/></expr_stmt>
              <expr_stmt><expr><name pos:line="558" pos:column="15">regnum<pos:position pos:line="558" pos:column="21"/></name><operator pos:line="558" pos:column="21">++<pos:position pos:line="558" pos:column="23"/></operator></expr>;<pos:position pos:line="558" pos:column="24"/></expr_stmt>

              <if pos:line="560" pos:column="15">if <condition pos:line="560" pos:column="18">(<expr><name pos:line="560" pos:column="19">COMPILE_STACK_FULL<pos:position pos:line="560" pos:column="37"/></name></expr>)<pos:position pos:line="560" pos:column="38"/></condition><then pos:line="560" pos:column="38">
                <block pos:line="561" pos:column="17">{
                  <expr_stmt><expr><call><name pos:line="562" pos:column="19">RETALLOC<pos:position pos:line="562" pos:column="27"/></name> <argument_list pos:line="562" pos:column="28">(<argument><expr><name><name pos:line="562" pos:column="29">compile_stack<pos:position pos:line="562" pos:column="42"/></name><operator pos:line="562" pos:column="42">.<pos:position pos:line="562" pos:column="43"/></operator><name pos:line="562" pos:column="43">stack<pos:position pos:line="562" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="562" pos:column="50">compile_stack<pos:position pos:line="562" pos:column="63"/></name><operator pos:line="562" pos:column="63">.<pos:position pos:line="562" pos:column="64"/></operator><name pos:line="562" pos:column="64">size<pos:position pos:line="562" pos:column="68"/></name></name> <operator pos:line="562" pos:column="69">&lt;&lt;<pos:position pos:line="562" pos:column="77"/></operator> <literal type="number" pos:line="562" pos:column="72">1<pos:position pos:line="562" pos:column="73"/></literal></expr></argument>,
                            <argument><expr><name pos:line="563" pos:column="29">compile_stack_elt_t<pos:position pos:line="563" pos:column="48"/></name></expr></argument>)<pos:position pos:line="563" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="563" pos:column="50"/></expr_stmt>
                  <if pos:line="564" pos:column="19">if <condition pos:line="564" pos:column="22">(<expr><name><name pos:line="564" pos:column="23">compile_stack<pos:position pos:line="564" pos:column="36"/></name><operator pos:line="564" pos:column="36">.<pos:position pos:line="564" pos:column="37"/></operator><name pos:line="564" pos:column="37">stack<pos:position pos:line="564" pos:column="42"/></name></name> <operator pos:line="564" pos:column="43">==<pos:position pos:line="564" pos:column="45"/></operator> <name pos:line="564" pos:column="46">NULL<pos:position pos:line="564" pos:column="50"/></name></expr>)<pos:position pos:line="564" pos:column="51"/></condition><then pos:line="564" pos:column="51"> <block type="pseudo"><return pos:line="564" pos:column="52">return <expr><name pos:line="564" pos:column="59">REG_ESPACE<pos:position pos:line="564" pos:column="69"/></name></expr>;<pos:position pos:line="564" pos:column="70"/></return></block></then></if>

                  <expr_stmt><expr><name><name pos:line="566" pos:column="19">compile_stack<pos:position pos:line="566" pos:column="32"/></name><operator pos:line="566" pos:column="32">.<pos:position pos:line="566" pos:column="33"/></operator><name pos:line="566" pos:column="33">size<pos:position pos:line="566" pos:column="37"/></name></name> <operator pos:line="566" pos:column="38">&lt;&lt;=<pos:position pos:line="566" pos:column="47"/></operator> <literal type="number" pos:line="566" pos:column="42">1<pos:position pos:line="566" pos:column="43"/></literal></expr>;<pos:position pos:line="566" pos:column="44"/></expr_stmt>
                }<pos:position pos:line="567" pos:column="18"/></block></then></if>

              <comment type="block" pos:line="569" pos:column="15">/* These are the values to restore when we hit end of this
                 group.  They are all relative offsets, so that if the
                 whole pattern moves because of realloc, they will still
                 be valid.  */</comment>
              <expr_stmt><expr><name><name pos:line="573" pos:column="15">COMPILE_STACK_TOP<pos:position pos:line="573" pos:column="32"/></name><operator pos:line="573" pos:column="32">.<pos:position pos:line="573" pos:column="33"/></operator><name pos:line="573" pos:column="33">begalt_offset<pos:position pos:line="573" pos:column="46"/></name></name> <operator pos:line="573" pos:column="47">=<pos:position pos:line="573" pos:column="48"/></operator> <name pos:line="573" pos:column="49">begalt<pos:position pos:line="573" pos:column="55"/></name> <operator pos:line="573" pos:column="56">-<pos:position pos:line="573" pos:column="57"/></operator> <name><name pos:line="573" pos:column="58">bufp<pos:position pos:line="573" pos:column="62"/></name><operator pos:line="573" pos:column="62">-&gt;<pos:position pos:line="573" pos:column="67"/></operator><name pos:line="573" pos:column="64">buffer<pos:position pos:line="573" pos:column="70"/></name></name></expr>;<pos:position pos:line="573" pos:column="71"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="574" pos:column="15">COMPILE_STACK_TOP<pos:position pos:line="574" pos:column="32"/></name><operator pos:line="574" pos:column="32">.<pos:position pos:line="574" pos:column="33"/></operator><name pos:line="574" pos:column="33">fixup_alt_jump<pos:position pos:line="574" pos:column="47"/></name></name>
                <operator pos:line="575" pos:column="17">=<pos:position pos:line="575" pos:column="18"/></operator> <ternary><condition><expr><name pos:line="575" pos:column="19">fixup_alt_jump<pos:position pos:line="575" pos:column="33"/></name></expr> ?<pos:position pos:line="575" pos:column="35"/></condition><then pos:line="575" pos:column="35"> <expr><name pos:line="575" pos:column="36">fixup_alt_jump<pos:position pos:line="575" pos:column="50"/></name> <operator pos:line="575" pos:column="51">-<pos:position pos:line="575" pos:column="52"/></operator> <name><name pos:line="575" pos:column="53">bufp<pos:position pos:line="575" pos:column="57"/></name><operator pos:line="575" pos:column="57">-&gt;<pos:position pos:line="575" pos:column="62"/></operator><name pos:line="575" pos:column="59">buffer<pos:position pos:line="575" pos:column="65"/></name></name> <operator pos:line="575" pos:column="66">+<pos:position pos:line="575" pos:column="67"/></operator> <literal type="number" pos:line="575" pos:column="68">1<pos:position pos:line="575" pos:column="69"/></literal></expr> <pos:position pos:line="575" pos:column="70"/></then><else pos:line="575" pos:column="70">: <expr><literal type="number" pos:line="575" pos:column="72">0<pos:position pos:line="575" pos:column="73"/></literal></expr></else></ternary></expr>;<pos:position pos:line="575" pos:column="74"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="576" pos:column="15">COMPILE_STACK_TOP<pos:position pos:line="576" pos:column="32"/></name><operator pos:line="576" pos:column="32">.<pos:position pos:line="576" pos:column="33"/></operator><name pos:line="576" pos:column="33">laststart_offset<pos:position pos:line="576" pos:column="49"/></name></name> <operator pos:line="576" pos:column="50">=<pos:position pos:line="576" pos:column="51"/></operator> <name pos:line="576" pos:column="52">b<pos:position pos:line="576" pos:column="53"/></name> <operator pos:line="576" pos:column="54">-<pos:position pos:line="576" pos:column="55"/></operator> <name><name pos:line="576" pos:column="56">bufp<pos:position pos:line="576" pos:column="60"/></name><operator pos:line="576" pos:column="60">-&gt;<pos:position pos:line="576" pos:column="65"/></operator><name pos:line="576" pos:column="62">buffer<pos:position pos:line="576" pos:column="68"/></name></name></expr>;<pos:position pos:line="576" pos:column="69"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="577" pos:column="15">COMPILE_STACK_TOP<pos:position pos:line="577" pos:column="32"/></name><operator pos:line="577" pos:column="32">.<pos:position pos:line="577" pos:column="33"/></operator><name pos:line="577" pos:column="33">regnum<pos:position pos:line="577" pos:column="39"/></name></name> <operator pos:line="577" pos:column="40">=<pos:position pos:line="577" pos:column="41"/></operator> <name pos:line="577" pos:column="42">regnum<pos:position pos:line="577" pos:column="48"/></name></expr>;<pos:position pos:line="577" pos:column="49"/></expr_stmt>

              <comment type="block" pos:line="579" pos:column="15">/* We will eventually replace the 0 with the number of
                 groups inner to this one.  But do not push a
                 start_memory for groups beyond the last one we can
                 represent in the compiled pattern.  */</comment>
              <if pos:line="583" pos:column="15">if <condition pos:line="583" pos:column="18">(<expr><name pos:line="583" pos:column="19">regnum<pos:position pos:line="583" pos:column="25"/></name> <operator pos:line="583" pos:column="26">&lt;=<pos:position pos:line="583" pos:column="31"/></operator> <name pos:line="583" pos:column="29">MAX_REGNUM<pos:position pos:line="583" pos:column="39"/></name></expr>)<pos:position pos:line="583" pos:column="40"/></condition><then pos:line="583" pos:column="40">
                <block pos:line="584" pos:column="17">{
                  <expr_stmt><expr><name><name pos:line="585" pos:column="19">COMPILE_STACK_TOP<pos:position pos:line="585" pos:column="36"/></name><operator pos:line="585" pos:column="36">.<pos:position pos:line="585" pos:column="37"/></operator><name pos:line="585" pos:column="37">inner_group_offset<pos:position pos:line="585" pos:column="55"/></name></name> <operator pos:line="585" pos:column="56">=<pos:position pos:line="585" pos:column="57"/></operator> <name pos:line="585" pos:column="58">b<pos:position pos:line="585" pos:column="59"/></name> <operator pos:line="585" pos:column="60">-<pos:position pos:line="585" pos:column="61"/></operator> <name><name pos:line="585" pos:column="62">bufp<pos:position pos:line="585" pos:column="66"/></name><operator pos:line="585" pos:column="66">-&gt;<pos:position pos:line="585" pos:column="71"/></operator><name pos:line="585" pos:column="68">buffer<pos:position pos:line="585" pos:column="74"/></name></name> <operator pos:line="585" pos:column="75">+<pos:position pos:line="585" pos:column="76"/></operator> <literal type="number" pos:line="585" pos:column="77">2<pos:position pos:line="585" pos:column="78"/></literal></expr>;<pos:position pos:line="585" pos:column="79"/></expr_stmt>
                  <expr_stmt><expr><call><name pos:line="586" pos:column="19">BUF_PUSH_3<pos:position pos:line="586" pos:column="29"/></name> <argument_list pos:line="586" pos:column="30">(<argument><expr><name pos:line="586" pos:column="31">start_memory<pos:position pos:line="586" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="586" pos:column="45">regnum<pos:position pos:line="586" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="586" pos:column="53">0<pos:position pos:line="586" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="586" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="586" pos:column="56"/></expr_stmt>
                }<pos:position pos:line="587" pos:column="18"/></block></then></if>

              <expr_stmt><expr><name><name pos:line="589" pos:column="15">compile_stack<pos:position pos:line="589" pos:column="28"/></name><operator pos:line="589" pos:column="28">.<pos:position pos:line="589" pos:column="29"/></operator><name pos:line="589" pos:column="29">avail<pos:position pos:line="589" pos:column="34"/></name></name><operator pos:line="589" pos:column="34">++<pos:position pos:line="589" pos:column="36"/></operator></expr>;<pos:position pos:line="589" pos:column="37"/></expr_stmt>

              <expr_stmt><expr><name pos:line="591" pos:column="15">fixup_alt_jump<pos:position pos:line="591" pos:column="29"/></name> <operator pos:line="591" pos:column="30">=<pos:position pos:line="591" pos:column="31"/></operator> <literal type="number" pos:line="591" pos:column="32">0<pos:position pos:line="591" pos:column="33"/></literal></expr>;<pos:position pos:line="591" pos:column="34"/></expr_stmt>
              <expr_stmt><expr><name pos:line="592" pos:column="15">laststart<pos:position pos:line="592" pos:column="24"/></name> <operator pos:line="592" pos:column="25">=<pos:position pos:line="592" pos:column="26"/></operator> <literal type="number" pos:line="592" pos:column="27">0<pos:position pos:line="592" pos:column="28"/></literal></expr>;<pos:position pos:line="592" pos:column="29"/></expr_stmt>
              <expr_stmt><expr><name pos:line="593" pos:column="15">begalt<pos:position pos:line="593" pos:column="21"/></name> <operator pos:line="593" pos:column="22">=<pos:position pos:line="593" pos:column="23"/></operator> <name pos:line="593" pos:column="24">b<pos:position pos:line="593" pos:column="25"/></name></expr>;<pos:position pos:line="593" pos:column="26"/></expr_stmt>
	      <comment type="block" pos:line="594" pos:column="15">/* If we've reached MAX_REGNUM groups, then this open
		 won't actually generate any code, so we'll have to
		 clear pending_exact explicitly.  */</comment>
	      <expr_stmt><expr><name pos:line="597" pos:column="15">pending_exact<pos:position pos:line="597" pos:column="28"/></name> <operator pos:line="597" pos:column="29">=<pos:position pos:line="597" pos:column="30"/></operator> <literal type="number" pos:line="597" pos:column="31">0<pos:position pos:line="597" pos:column="32"/></literal></expr>;<pos:position pos:line="597" pos:column="33"/></expr_stmt>
              <break pos:line="598" pos:column="15">break;<pos:position pos:line="598" pos:column="21"/></break>


            <case pos:line="601" pos:column="13">case <expr><literal type="char" pos:line="601" pos:column="18">')'<pos:position pos:line="601" pos:column="21"/></literal></expr>:<pos:position pos:line="601" pos:column="22"/></case>
              <if pos:line="602" pos:column="15">if <condition pos:line="602" pos:column="18">(<expr><name pos:line="602" pos:column="19">syntax<pos:position pos:line="602" pos:column="25"/></name> <operator pos:line="602" pos:column="26">&amp;<pos:position pos:line="602" pos:column="31"/></operator> <name pos:line="602" pos:column="28">RE_NO_BK_PARENS<pos:position pos:line="602" pos:column="43"/></name></expr>)<pos:position pos:line="602" pos:column="44"/></condition><then pos:line="602" pos:column="44"> <block type="pseudo"><goto pos:line="602" pos:column="45">goto <name pos:line="602" pos:column="50">normal_backslash<pos:position pos:line="602" pos:column="66"/></name>;<pos:position pos:line="602" pos:column="67"/></goto></block></then></if>

              <if pos:line="604" pos:column="15">if <condition pos:line="604" pos:column="18">(<expr><name pos:line="604" pos:column="19">COMPILE_STACK_EMPTY<pos:position pos:line="604" pos:column="38"/></name></expr>)<pos:position pos:line="604" pos:column="39"/></condition><then pos:line="604" pos:column="39">
	      <block pos:line="605" pos:column="15">{
                <if pos:line="606" pos:column="17">if <condition pos:line="606" pos:column="20">(<expr><name pos:line="606" pos:column="21">syntax<pos:position pos:line="606" pos:column="27"/></name> <operator pos:line="606" pos:column="28">&amp;<pos:position pos:line="606" pos:column="33"/></operator> <name pos:line="606" pos:column="30">RE_UNMATCHED_RIGHT_PAREN_ORD<pos:position pos:line="606" pos:column="58"/></name></expr>)<pos:position pos:line="606" pos:column="59"/></condition><then pos:line="606" pos:column="59">
                  <block type="pseudo"><goto pos:line="607" pos:column="19">goto <name pos:line="607" pos:column="24">normal_backslash<pos:position pos:line="607" pos:column="40"/></name>;<pos:position pos:line="607" pos:column="41"/></goto></block></then>
                <else pos:line="608" pos:column="17">else
                  <block type="pseudo"><expr_stmt><expr><call><name pos:line="609" pos:column="19">FREE_STACK_RETURN<pos:position pos:line="609" pos:column="36"/></name> <argument_list pos:line="609" pos:column="37">(<argument><expr><name pos:line="609" pos:column="38">REG_ERPAREN<pos:position pos:line="609" pos:column="49"/></name></expr></argument>)<pos:position pos:line="609" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="609" pos:column="51"/></expr_stmt></block></else></if>
	      }<pos:position pos:line="610" pos:column="16"/></block></then></if>

            <label><name pos:line="612" pos:column="13">handle_close<pos:position pos:line="612" pos:column="25"/></name>:<pos:position pos:line="612" pos:column="26"/></label>
              <if pos:line="613" pos:column="15">if <condition pos:line="613" pos:column="18">(<expr><name pos:line="613" pos:column="19">fixup_alt_jump<pos:position pos:line="613" pos:column="33"/></name></expr>)<pos:position pos:line="613" pos:column="34"/></condition><then pos:line="613" pos:column="34">
                <block pos:line="614" pos:column="17">{ <comment type="block" pos:line="614" pos:column="19">/* Push a dummy failure point at the end of the
                     alternative for a possible future
                     `pop_failure_jump' to pop.  See comments at
                     `push_dummy_failure' in `re_match_2'.  */</comment>
                  <expr_stmt><expr><call><name pos:line="618" pos:column="19">BUF_PUSH<pos:position pos:line="618" pos:column="27"/></name> <argument_list pos:line="618" pos:column="28">(<argument><expr><name pos:line="618" pos:column="29">push_dummy_failure<pos:position pos:line="618" pos:column="47"/></name></expr></argument>)<pos:position pos:line="618" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="618" pos:column="49"/></expr_stmt>

                  <comment type="block" pos:line="620" pos:column="19">/* We allocated space for this jump when we assigned
                     to `fixup_alt_jump', in the `handle_alt' case below.  */</comment>
                  <expr_stmt><expr><call><name pos:line="622" pos:column="19">STORE_JUMP<pos:position pos:line="622" pos:column="29"/></name> <argument_list pos:line="622" pos:column="30">(<argument><expr><name pos:line="622" pos:column="31">jump_past_alt<pos:position pos:line="622" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="622" pos:column="46">fixup_alt_jump<pos:position pos:line="622" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="622" pos:column="62">b<pos:position pos:line="622" pos:column="63"/></name> <operator pos:line="622" pos:column="64">-<pos:position pos:line="622" pos:column="65"/></operator> <literal type="number" pos:line="622" pos:column="66">1<pos:position pos:line="622" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="622" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="622" pos:column="69"/></expr_stmt>
                }<pos:position pos:line="623" pos:column="18"/></block></then></if>

              <comment type="block" pos:line="625" pos:column="15">/* See similar code for backslashed left paren above.  */</comment>
              <if pos:line="626" pos:column="15">if <condition pos:line="626" pos:column="18">(<expr><name pos:line="626" pos:column="19">COMPILE_STACK_EMPTY<pos:position pos:line="626" pos:column="38"/></name></expr>)<pos:position pos:line="626" pos:column="39"/></condition><then pos:line="626" pos:column="39">
	      <block pos:line="627" pos:column="15">{
                <if pos:line="628" pos:column="17">if <condition pos:line="628" pos:column="20">(<expr><name pos:line="628" pos:column="21">syntax<pos:position pos:line="628" pos:column="27"/></name> <operator pos:line="628" pos:column="28">&amp;<pos:position pos:line="628" pos:column="33"/></operator> <name pos:line="628" pos:column="30">RE_UNMATCHED_RIGHT_PAREN_ORD<pos:position pos:line="628" pos:column="58"/></name></expr>)<pos:position pos:line="628" pos:column="59"/></condition><then pos:line="628" pos:column="59">
                  <block type="pseudo"><goto pos:line="629" pos:column="19">goto <name pos:line="629" pos:column="24">normal_char<pos:position pos:line="629" pos:column="35"/></name>;<pos:position pos:line="629" pos:column="36"/></goto></block></then>
                <else pos:line="630" pos:column="17">else
                  <block type="pseudo"><expr_stmt><expr><call><name pos:line="631" pos:column="19">FREE_STACK_RETURN<pos:position pos:line="631" pos:column="36"/></name> <argument_list pos:line="631" pos:column="37">(<argument><expr><name pos:line="631" pos:column="38">REG_ERPAREN<pos:position pos:line="631" pos:column="49"/></name></expr></argument>)<pos:position pos:line="631" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="631" pos:column="51"/></expr_stmt></block></else></if>
	      }<pos:position pos:line="632" pos:column="16"/></block></then></if>

              <comment type="block" pos:line="634" pos:column="15">/* Since we just checked for an empty stack above, this
                 ``can't happen''.  */</comment>
              <expr_stmt><expr><call><name pos:line="636" pos:column="15">assert<pos:position pos:line="636" pos:column="21"/></name> <argument_list pos:line="636" pos:column="22">(<argument><expr><name><name pos:line="636" pos:column="23">compile_stack<pos:position pos:line="636" pos:column="36"/></name><operator pos:line="636" pos:column="36">.<pos:position pos:line="636" pos:column="37"/></operator><name pos:line="636" pos:column="37">avail<pos:position pos:line="636" pos:column="42"/></name></name> <operator pos:line="636" pos:column="43">!=<pos:position pos:line="636" pos:column="45"/></operator> <literal type="number" pos:line="636" pos:column="46">0<pos:position pos:line="636" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="636" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="636" pos:column="49"/></expr_stmt>
              <block pos:line="637" pos:column="15">{
                <comment type="block" pos:line="638" pos:column="17">/* We don't just want to restore into `regnum', because
                   later groups should continue to be numbered higher,
                   as in `(ab)c(de)' -- the second group is #2.  */</comment>
                <decl_stmt><decl><type><name pos:line="641" pos:column="17">regnum_t<pos:position pos:line="641" pos:column="25"/></name></type> <name pos:line="641" pos:column="26">this_group_regnum<pos:position pos:line="641" pos:column="43"/></name></decl>;<pos:position pos:line="641" pos:column="44"/></decl_stmt>

                <expr_stmt><expr><name><name pos:line="643" pos:column="17">compile_stack<pos:position pos:line="643" pos:column="30"/></name><operator pos:line="643" pos:column="30">.<pos:position pos:line="643" pos:column="31"/></operator><name pos:line="643" pos:column="31">avail<pos:position pos:line="643" pos:column="36"/></name></name><operator pos:line="643" pos:column="36">--<pos:position pos:line="643" pos:column="38"/></operator></expr>;<pos:position pos:line="643" pos:column="39"/></expr_stmt>
                <expr_stmt><expr><name pos:line="644" pos:column="17">begalt<pos:position pos:line="644" pos:column="23"/></name> <operator pos:line="644" pos:column="24">=<pos:position pos:line="644" pos:column="25"/></operator> <name><name pos:line="644" pos:column="26">bufp<pos:position pos:line="644" pos:column="30"/></name><operator pos:line="644" pos:column="30">-&gt;<pos:position pos:line="644" pos:column="35"/></operator><name pos:line="644" pos:column="32">buffer<pos:position pos:line="644" pos:column="38"/></name></name> <operator pos:line="644" pos:column="39">+<pos:position pos:line="644" pos:column="40"/></operator> <name><name pos:line="644" pos:column="41">COMPILE_STACK_TOP<pos:position pos:line="644" pos:column="58"/></name><operator pos:line="644" pos:column="58">.<pos:position pos:line="644" pos:column="59"/></operator><name pos:line="644" pos:column="59">begalt_offset<pos:position pos:line="644" pos:column="72"/></name></name></expr>;<pos:position pos:line="644" pos:column="73"/></expr_stmt>
                <expr_stmt><expr><name pos:line="645" pos:column="17">fixup_alt_jump<pos:position pos:line="645" pos:column="31"/></name>
                  <operator pos:line="646" pos:column="19">=<pos:position pos:line="646" pos:column="20"/></operator> <ternary><condition><expr><name><name pos:line="646" pos:column="21">COMPILE_STACK_TOP<pos:position pos:line="646" pos:column="38"/></name><operator pos:line="646" pos:column="38">.<pos:position pos:line="646" pos:column="39"/></operator><name pos:line="646" pos:column="39">fixup_alt_jump<pos:position pos:line="646" pos:column="53"/></name></name></expr>
                    ?<pos:position pos:line="647" pos:column="22"/></condition><then pos:line="647" pos:column="22"> <expr><name><name pos:line="647" pos:column="23">bufp<pos:position pos:line="647" pos:column="27"/></name><operator pos:line="647" pos:column="27">-&gt;<pos:position pos:line="647" pos:column="32"/></operator><name pos:line="647" pos:column="29">buffer<pos:position pos:line="647" pos:column="35"/></name></name> <operator pos:line="647" pos:column="36">+<pos:position pos:line="647" pos:column="37"/></operator> <name><name pos:line="647" pos:column="38">COMPILE_STACK_TOP<pos:position pos:line="647" pos:column="55"/></name><operator pos:line="647" pos:column="55">.<pos:position pos:line="647" pos:column="56"/></operator><name pos:line="647" pos:column="56">fixup_alt_jump<pos:position pos:line="647" pos:column="70"/></name></name> <operator pos:line="647" pos:column="71">-<pos:position pos:line="647" pos:column="72"/></operator> <literal type="number" pos:line="647" pos:column="73">1<pos:position pos:line="647" pos:column="74"/></literal></expr>
                    <pos:position pos:line="648" pos:column="21"/></then><else pos:line="648" pos:column="21">: <expr><literal type="number" pos:line="648" pos:column="23">0<pos:position pos:line="648" pos:column="24"/></literal></expr></else></ternary></expr>;<pos:position pos:line="648" pos:column="25"/></expr_stmt>
                <expr_stmt><expr><name pos:line="649" pos:column="17">laststart<pos:position pos:line="649" pos:column="26"/></name> <operator pos:line="649" pos:column="27">=<pos:position pos:line="649" pos:column="28"/></operator> <name><name pos:line="649" pos:column="29">bufp<pos:position pos:line="649" pos:column="33"/></name><operator pos:line="649" pos:column="33">-&gt;<pos:position pos:line="649" pos:column="38"/></operator><name pos:line="649" pos:column="35">buffer<pos:position pos:line="649" pos:column="41"/></name></name> <operator pos:line="649" pos:column="42">+<pos:position pos:line="649" pos:column="43"/></operator> <name><name pos:line="649" pos:column="44">COMPILE_STACK_TOP<pos:position pos:line="649" pos:column="61"/></name><operator pos:line="649" pos:column="61">.<pos:position pos:line="649" pos:column="62"/></operator><name pos:line="649" pos:column="62">laststart_offset<pos:position pos:line="649" pos:column="78"/></name></name></expr>;<pos:position pos:line="649" pos:column="79"/></expr_stmt>
                <expr_stmt><expr><name pos:line="650" pos:column="17">this_group_regnum<pos:position pos:line="650" pos:column="34"/></name> <operator pos:line="650" pos:column="35">=<pos:position pos:line="650" pos:column="36"/></operator> <name><name pos:line="650" pos:column="37">COMPILE_STACK_TOP<pos:position pos:line="650" pos:column="54"/></name><operator pos:line="650" pos:column="54">.<pos:position pos:line="650" pos:column="55"/></operator><name pos:line="650" pos:column="55">regnum<pos:position pos:line="650" pos:column="61"/></name></name></expr>;<pos:position pos:line="650" pos:column="62"/></expr_stmt>
		<comment type="block" pos:line="651" pos:column="17">/* If we've reached MAX_REGNUM groups, then this open
		   won't actually generate any code, so we'll have to
		   clear pending_exact explicitly.  */</comment>
		<expr_stmt><expr><name pos:line="654" pos:column="17">pending_exact<pos:position pos:line="654" pos:column="30"/></name> <operator pos:line="654" pos:column="31">=<pos:position pos:line="654" pos:column="32"/></operator> <literal type="number" pos:line="654" pos:column="33">0<pos:position pos:line="654" pos:column="34"/></literal></expr>;<pos:position pos:line="654" pos:column="35"/></expr_stmt>

                <comment type="block" pos:line="656" pos:column="17">/* We're at the end of the group, so now we know how many
                   groups were inside this one.  */</comment>
                <if pos:line="658" pos:column="17">if <condition pos:line="658" pos:column="20">(<expr><name pos:line="658" pos:column="21">this_group_regnum<pos:position pos:line="658" pos:column="38"/></name> <operator pos:line="658" pos:column="39">&lt;=<pos:position pos:line="658" pos:column="44"/></operator> <name pos:line="658" pos:column="42">MAX_REGNUM<pos:position pos:line="658" pos:column="52"/></name></expr>)<pos:position pos:line="658" pos:column="53"/></condition><then pos:line="658" pos:column="53">
                  <block pos:line="659" pos:column="19">{
                    <decl_stmt><decl><type><name pos:line="660" pos:column="21">unsigned<pos:position pos:line="660" pos:column="29"/></name> <name pos:line="660" pos:column="30">char<pos:position pos:line="660" pos:column="34"/></name> <modifier pos:line="660" pos:column="35">*<pos:position pos:line="660" pos:column="36"/></modifier></type><name pos:line="660" pos:column="36">inner_group_loc<pos:position pos:line="660" pos:column="51"/></name>
                      <init pos:line="661" pos:column="23">= <expr><name><name pos:line="661" pos:column="25">bufp<pos:position pos:line="661" pos:column="29"/></name><operator pos:line="661" pos:column="29">-&gt;<pos:position pos:line="661" pos:column="34"/></operator><name pos:line="661" pos:column="31">buffer<pos:position pos:line="661" pos:column="37"/></name></name> <operator pos:line="661" pos:column="38">+<pos:position pos:line="661" pos:column="39"/></operator> <name><name pos:line="661" pos:column="40">COMPILE_STACK_TOP<pos:position pos:line="661" pos:column="57"/></name><operator pos:line="661" pos:column="57">.<pos:position pos:line="661" pos:column="58"/></operator><name pos:line="661" pos:column="58">inner_group_offset<pos:position pos:line="661" pos:column="76"/></name></name></expr></init></decl>;<pos:position pos:line="661" pos:column="77"/></decl_stmt>

                    <expr_stmt><expr><operator pos:line="663" pos:column="21">*<pos:position pos:line="663" pos:column="22"/></operator><name pos:line="663" pos:column="22">inner_group_loc<pos:position pos:line="663" pos:column="37"/></name> <operator pos:line="663" pos:column="38">=<pos:position pos:line="663" pos:column="39"/></operator> <name pos:line="663" pos:column="40">regnum<pos:position pos:line="663" pos:column="46"/></name> <operator pos:line="663" pos:column="47">-<pos:position pos:line="663" pos:column="48"/></operator> <name pos:line="663" pos:column="49">this_group_regnum<pos:position pos:line="663" pos:column="66"/></name></expr>;<pos:position pos:line="663" pos:column="67"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="664" pos:column="21">BUF_PUSH_3<pos:position pos:line="664" pos:column="31"/></name> <argument_list pos:line="664" pos:column="32">(<argument><expr><name pos:line="664" pos:column="33">stop_memory<pos:position pos:line="664" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="664" pos:column="46">this_group_regnum<pos:position pos:line="664" pos:column="63"/></name></expr></argument>,
                                <argument><expr><name pos:line="665" pos:column="33">regnum<pos:position pos:line="665" pos:column="39"/></name> <operator pos:line="665" pos:column="40">-<pos:position pos:line="665" pos:column="41"/></operator> <name pos:line="665" pos:column="42">this_group_regnum<pos:position pos:line="665" pos:column="59"/></name></expr></argument>)<pos:position pos:line="665" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="665" pos:column="61"/></expr_stmt>
                  }<pos:position pos:line="666" pos:column="20"/></block></then></if>
              }<pos:position pos:line="667" pos:column="16"/></block>
              <break pos:line="668" pos:column="15">break;<pos:position pos:line="668" pos:column="21"/></break>


            <case pos:line="671" pos:column="13">case <expr><literal type="char" pos:line="671" pos:column="18">'|'<pos:position pos:line="671" pos:column="21"/></literal></expr>:<pos:position pos:line="671" pos:column="22"/></case>					<comment type="block" pos:line="671" pos:column="57">/* `\|'.  */</comment>
              <if pos:line="672" pos:column="15">if <condition pos:line="672" pos:column="18">(<expr><name pos:line="672" pos:column="19">syntax<pos:position pos:line="672" pos:column="25"/></name> <operator pos:line="672" pos:column="26">&amp;<pos:position pos:line="672" pos:column="31"/></operator> <name pos:line="672" pos:column="28">RE_LIMITED_OPS<pos:position pos:line="672" pos:column="42"/></name> <operator pos:line="672" pos:column="43">||<pos:position pos:line="672" pos:column="45"/></operator> <name pos:line="672" pos:column="46">syntax<pos:position pos:line="672" pos:column="52"/></name> <operator pos:line="672" pos:column="53">&amp;<pos:position pos:line="672" pos:column="58"/></operator> <name pos:line="672" pos:column="55">RE_NO_BK_VBAR<pos:position pos:line="672" pos:column="68"/></name></expr>)<pos:position pos:line="672" pos:column="69"/></condition><then pos:line="672" pos:column="69">
                <block type="pseudo"><goto pos:line="673" pos:column="17">goto <name pos:line="673" pos:column="22">normal_backslash<pos:position pos:line="673" pos:column="38"/></name>;<pos:position pos:line="673" pos:column="39"/></goto></block></then></if>
            <label><name pos:line="674" pos:column="13">handle_alt<pos:position pos:line="674" pos:column="23"/></name>:<pos:position pos:line="674" pos:column="24"/></label>
              <if pos:line="675" pos:column="15">if <condition pos:line="675" pos:column="18">(<expr><name pos:line="675" pos:column="19">syntax<pos:position pos:line="675" pos:column="25"/></name> <operator pos:line="675" pos:column="26">&amp;<pos:position pos:line="675" pos:column="31"/></operator> <name pos:line="675" pos:column="28">RE_LIMITED_OPS<pos:position pos:line="675" pos:column="42"/></name></expr>)<pos:position pos:line="675" pos:column="43"/></condition><then pos:line="675" pos:column="43">
                <block type="pseudo"><goto pos:line="676" pos:column="17">goto <name pos:line="676" pos:column="22">normal_char<pos:position pos:line="676" pos:column="33"/></name>;<pos:position pos:line="676" pos:column="34"/></goto></block></then></if>

              <comment type="block" pos:line="678" pos:column="15">/* Insert before the previous alternative a jump which
                 jumps to this alternative if the former fails.  */</comment>
              <expr_stmt><expr><call><name pos:line="680" pos:column="15">GET_BUFFER_SPACE<pos:position pos:line="680" pos:column="31"/></name> <argument_list pos:line="680" pos:column="32">(<argument><expr><literal type="number" pos:line="680" pos:column="33">3<pos:position pos:line="680" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="680" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="680" pos:column="36"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="681" pos:column="15">INSERT_JUMP<pos:position pos:line="681" pos:column="26"/></name> <argument_list pos:line="681" pos:column="27">(<argument><expr><name pos:line="681" pos:column="28">on_failure_jump<pos:position pos:line="681" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="681" pos:column="45">begalt<pos:position pos:line="681" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="681" pos:column="53">b<pos:position pos:line="681" pos:column="54"/></name> <operator pos:line="681" pos:column="55">+<pos:position pos:line="681" pos:column="56"/></operator> <literal type="number" pos:line="681" pos:column="57">6<pos:position pos:line="681" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="681" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="681" pos:column="60"/></expr_stmt>
              <expr_stmt><expr><name pos:line="682" pos:column="15">pending_exact<pos:position pos:line="682" pos:column="28"/></name> <operator pos:line="682" pos:column="29">=<pos:position pos:line="682" pos:column="30"/></operator> <literal type="number" pos:line="682" pos:column="31">0<pos:position pos:line="682" pos:column="32"/></literal></expr>;<pos:position pos:line="682" pos:column="33"/></expr_stmt>
              <expr_stmt><expr><name pos:line="683" pos:column="15">b<pos:position pos:line="683" pos:column="16"/></name> <operator pos:line="683" pos:column="17">+=<pos:position pos:line="683" pos:column="19"/></operator> <literal type="number" pos:line="683" pos:column="20">3<pos:position pos:line="683" pos:column="21"/></literal></expr>;<pos:position pos:line="683" pos:column="22"/></expr_stmt>

              <comment type="block" pos:line="685" pos:column="15">/* The alternative before this one has a jump after it
                 which gets executed if it gets matched.  Adjust that
                 jump so it will jump to this alternative's analogous
                 jump (put in below, which in turn will jump to the next
                 (if any) alternative's such jump, etc.).  The last such
                 jump jumps to the correct final destination.  A picture:
                          _____ _____
                          |   | |   |
                          |   v |   v
                         a | b   | c

                 If we are at `b', then fixup_alt_jump right now points to a
                 three-byte space after `a'.  We'll put in the jump, set
                 fixup_alt_jump to right after `b', and leave behind three
                 bytes which we'll fill in when we get to after `c'.  */</comment>

              <if pos:line="701" pos:column="15">if <condition pos:line="701" pos:column="18">(<expr><name pos:line="701" pos:column="19">fixup_alt_jump<pos:position pos:line="701" pos:column="33"/></name></expr>)<pos:position pos:line="701" pos:column="34"/></condition><then pos:line="701" pos:column="34">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="702" pos:column="17">STORE_JUMP<pos:position pos:line="702" pos:column="27"/></name> <argument_list pos:line="702" pos:column="28">(<argument><expr><name pos:line="702" pos:column="29">jump_past_alt<pos:position pos:line="702" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="702" pos:column="44">fixup_alt_jump<pos:position pos:line="702" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="702" pos:column="60">b<pos:position pos:line="702" pos:column="61"/></name></expr></argument>)<pos:position pos:line="702" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="702" pos:column="63"/></expr_stmt></block></then></if>

              <comment type="block" pos:line="704" pos:column="15">/* Mark and leave space for a jump after this alternative,
                 to be filled in later either by next alternative or
                 when know we're at the end of a series of alternatives.  */</comment>
              <expr_stmt><expr><name pos:line="707" pos:column="15">fixup_alt_jump<pos:position pos:line="707" pos:column="29"/></name> <operator pos:line="707" pos:column="30">=<pos:position pos:line="707" pos:column="31"/></operator> <name pos:line="707" pos:column="32">b<pos:position pos:line="707" pos:column="33"/></name></expr>;<pos:position pos:line="707" pos:column="34"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="708" pos:column="15">GET_BUFFER_SPACE<pos:position pos:line="708" pos:column="31"/></name> <argument_list pos:line="708" pos:column="32">(<argument><expr><literal type="number" pos:line="708" pos:column="33">3<pos:position pos:line="708" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="708" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="708" pos:column="36"/></expr_stmt>
              <expr_stmt><expr><name pos:line="709" pos:column="15">b<pos:position pos:line="709" pos:column="16"/></name> <operator pos:line="709" pos:column="17">+=<pos:position pos:line="709" pos:column="19"/></operator> <literal type="number" pos:line="709" pos:column="20">3<pos:position pos:line="709" pos:column="21"/></literal></expr>;<pos:position pos:line="709" pos:column="22"/></expr_stmt>

              <expr_stmt><expr><name pos:line="711" pos:column="15">laststart<pos:position pos:line="711" pos:column="24"/></name> <operator pos:line="711" pos:column="25">=<pos:position pos:line="711" pos:column="26"/></operator> <literal type="number" pos:line="711" pos:column="27">0<pos:position pos:line="711" pos:column="28"/></literal></expr>;<pos:position pos:line="711" pos:column="29"/></expr_stmt>
              <expr_stmt><expr><name pos:line="712" pos:column="15">begalt<pos:position pos:line="712" pos:column="21"/></name> <operator pos:line="712" pos:column="22">=<pos:position pos:line="712" pos:column="23"/></operator> <name pos:line="712" pos:column="24">b<pos:position pos:line="712" pos:column="25"/></name></expr>;<pos:position pos:line="712" pos:column="26"/></expr_stmt>
              <break pos:line="713" pos:column="15">break;<pos:position pos:line="713" pos:column="21"/></break>


            <case pos:line="716" pos:column="13">case <expr><literal type="char" pos:line="716" pos:column="18">'{'<pos:position pos:line="716" pos:column="21"/></literal></expr>:<pos:position pos:line="716" pos:column="22"/></case>
              <comment type="block" pos:line="717" pos:column="15">/* If \{ is a literal.  */</comment>
              <if pos:line="718" pos:column="15">if <condition pos:line="718" pos:column="18">(<expr><operator pos:line="718" pos:column="19">!<pos:position pos:line="718" pos:column="20"/></operator><operator pos:line="718" pos:column="20">(<pos:position pos:line="718" pos:column="21"/></operator><name pos:line="718" pos:column="21">syntax<pos:position pos:line="718" pos:column="27"/></name> <operator pos:line="718" pos:column="28">&amp;<pos:position pos:line="718" pos:column="33"/></operator> <name pos:line="718" pos:column="30">RE_INTERVALS<pos:position pos:line="718" pos:column="42"/></name><operator pos:line="718" pos:column="42">)<pos:position pos:line="718" pos:column="43"/></operator>
                     <comment type="block" pos:line="719" pos:column="22">/* If we're at `\{' and it's not the open-interval
                        operator.  */</comment>
                  <operator pos:line="721" pos:column="19">||<pos:position pos:line="721" pos:column="21"/></operator> <operator pos:line="721" pos:column="22">(<pos:position pos:line="721" pos:column="23"/></operator><operator pos:line="721" pos:column="23">(<pos:position pos:line="721" pos:column="24"/></operator><name pos:line="721" pos:column="24">syntax<pos:position pos:line="721" pos:column="30"/></name> <operator pos:line="721" pos:column="31">&amp;<pos:position pos:line="721" pos:column="36"/></operator> <name pos:line="721" pos:column="33">RE_INTERVALS<pos:position pos:line="721" pos:column="45"/></name><operator pos:line="721" pos:column="45">)<pos:position pos:line="721" pos:column="46"/></operator> <operator pos:line="721" pos:column="47">&amp;&amp;<pos:position pos:line="721" pos:column="57"/></operator> <operator pos:line="721" pos:column="50">(<pos:position pos:line="721" pos:column="51"/></operator><name pos:line="721" pos:column="51">syntax<pos:position pos:line="721" pos:column="57"/></name> <operator pos:line="721" pos:column="58">&amp;<pos:position pos:line="721" pos:column="63"/></operator> <name pos:line="721" pos:column="60">RE_NO_BK_BRACES<pos:position pos:line="721" pos:column="75"/></name><operator pos:line="721" pos:column="75">)<pos:position pos:line="721" pos:column="76"/></operator><operator pos:line="721" pos:column="76">)<pos:position pos:line="721" pos:column="77"/></operator>
                  <operator pos:line="722" pos:column="19">||<pos:position pos:line="722" pos:column="21"/></operator> <operator pos:line="722" pos:column="22">(<pos:position pos:line="722" pos:column="23"/></operator><name pos:line="722" pos:column="23">p<pos:position pos:line="722" pos:column="24"/></name> <operator pos:line="722" pos:column="25">-<pos:position pos:line="722" pos:column="26"/></operator> <literal type="number" pos:line="722" pos:column="27">2<pos:position pos:line="722" pos:column="28"/></literal> <operator pos:line="722" pos:column="29">==<pos:position pos:line="722" pos:column="31"/></operator> <name pos:line="722" pos:column="32">pattern<pos:position pos:line="722" pos:column="39"/></name>  <operator pos:line="722" pos:column="41">&amp;&amp;<pos:position pos:line="722" pos:column="51"/></operator>  <name pos:line="722" pos:column="45">p<pos:position pos:line="722" pos:column="46"/></name> <operator pos:line="722" pos:column="47">==<pos:position pos:line="722" pos:column="49"/></operator> <name pos:line="722" pos:column="50">pend<pos:position pos:line="722" pos:column="54"/></name><operator pos:line="722" pos:column="54">)<pos:position pos:line="722" pos:column="55"/></operator></expr>)<pos:position pos:line="722" pos:column="56"/></condition><then pos:line="722" pos:column="56">
                <block type="pseudo"><goto pos:line="723" pos:column="17">goto <name pos:line="723" pos:column="22">normal_backslash<pos:position pos:line="723" pos:column="38"/></name>;<pos:position pos:line="723" pos:column="39"/></goto></block></then></if>

            <label><name pos:line="725" pos:column="13">handle_interval<pos:position pos:line="725" pos:column="28"/></name>:<pos:position pos:line="725" pos:column="29"/></label>
              <block pos:line="726" pos:column="15">{
                <comment type="block" pos:line="727" pos:column="17">/* If got here, then the syntax allows intervals.  */</comment>

                <comment type="block" pos:line="729" pos:column="17">/* At least (most) this many matches must be made.  */</comment>
                <decl_stmt><decl><type><name pos:line="730" pos:column="17">int<pos:position pos:line="730" pos:column="20"/></name></type> <name pos:line="730" pos:column="21">lower_bound<pos:position pos:line="730" pos:column="32"/></name> <init pos:line="730" pos:column="33">= <expr><operator pos:line="730" pos:column="35">-<pos:position pos:line="730" pos:column="36"/></operator><literal type="number" pos:line="730" pos:column="36">1<pos:position pos:line="730" pos:column="37"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="730" pos:column="39">upper_bound<pos:position pos:line="730" pos:column="50"/></name> <init pos:line="730" pos:column="51">= <expr><operator pos:line="730" pos:column="53">-<pos:position pos:line="730" pos:column="54"/></operator><literal type="number" pos:line="730" pos:column="54">1<pos:position pos:line="730" pos:column="55"/></literal></expr></init></decl>;<pos:position pos:line="730" pos:column="56"/></decl_stmt>

                <expr_stmt><expr><name pos:line="732" pos:column="17">beg_interval<pos:position pos:line="732" pos:column="29"/></name> <operator pos:line="732" pos:column="30">=<pos:position pos:line="732" pos:column="31"/></operator> <name pos:line="732" pos:column="32">p<pos:position pos:line="732" pos:column="33"/></name> <operator pos:line="732" pos:column="34">-<pos:position pos:line="732" pos:column="35"/></operator> <literal type="number" pos:line="732" pos:column="36">1<pos:position pos:line="732" pos:column="37"/></literal></expr>;<pos:position pos:line="732" pos:column="38"/></expr_stmt>

                <if pos:line="734" pos:column="17">if <condition pos:line="734" pos:column="20">(<expr><name pos:line="734" pos:column="21">p<pos:position pos:line="734" pos:column="22"/></name> <operator pos:line="734" pos:column="23">==<pos:position pos:line="734" pos:column="25"/></operator> <name pos:line="734" pos:column="26">pend<pos:position pos:line="734" pos:column="30"/></name></expr>)<pos:position pos:line="734" pos:column="31"/></condition><then pos:line="734" pos:column="31">
                  <block pos:line="735" pos:column="19">{
                    <if pos:line="736" pos:column="21">if <condition pos:line="736" pos:column="24">(<expr><name pos:line="736" pos:column="25">syntax<pos:position pos:line="736" pos:column="31"/></name> <operator pos:line="736" pos:column="32">&amp;<pos:position pos:line="736" pos:column="37"/></operator> <name pos:line="736" pos:column="34">RE_NO_BK_BRACES<pos:position pos:line="736" pos:column="49"/></name></expr>)<pos:position pos:line="736" pos:column="50"/></condition><then pos:line="736" pos:column="50">
                      <block type="pseudo"><goto pos:line="737" pos:column="23">goto <name pos:line="737" pos:column="28">unfetch_interval<pos:position pos:line="737" pos:column="44"/></name>;<pos:position pos:line="737" pos:column="45"/></goto></block></then>
                    <else pos:line="738" pos:column="21">else
                      <block type="pseudo"><expr_stmt><expr><call><name pos:line="739" pos:column="23">FREE_STACK_RETURN<pos:position pos:line="739" pos:column="40"/></name> <argument_list pos:line="739" pos:column="41">(<argument><expr><name pos:line="739" pos:column="42">REG_EBRACE<pos:position pos:line="739" pos:column="52"/></name></expr></argument>)<pos:position pos:line="739" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="739" pos:column="54"/></expr_stmt></block></else></if>
                  }<pos:position pos:line="740" pos:column="20"/></block></then></if>

                <expr_stmt><expr><call><name pos:line="742" pos:column="17">GET_UNSIGNED_NUMBER<pos:position pos:line="742" pos:column="36"/></name> <argument_list pos:line="742" pos:column="37">(<argument><expr><name pos:line="742" pos:column="38">lower_bound<pos:position pos:line="742" pos:column="49"/></name></expr></argument>)<pos:position pos:line="742" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="742" pos:column="51"/></expr_stmt>

                <if pos:line="744" pos:column="17">if <condition pos:line="744" pos:column="20">(<expr><name pos:line="744" pos:column="21">c<pos:position pos:line="744" pos:column="22"/></name> <operator pos:line="744" pos:column="23">==<pos:position pos:line="744" pos:column="25"/></operator> <literal type="char" pos:line="744" pos:column="26">','<pos:position pos:line="744" pos:column="29"/></literal></expr>)<pos:position pos:line="744" pos:column="30"/></condition><then pos:line="744" pos:column="30">
                  <block pos:line="745" pos:column="19">{
                    <expr_stmt><expr><call><name pos:line="746" pos:column="21">GET_UNSIGNED_NUMBER<pos:position pos:line="746" pos:column="40"/></name> <argument_list pos:line="746" pos:column="41">(<argument><expr><name pos:line="746" pos:column="42">upper_bound<pos:position pos:line="746" pos:column="53"/></name></expr></argument>)<pos:position pos:line="746" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="746" pos:column="55"/></expr_stmt>
                    <if pos:line="747" pos:column="21">if <condition pos:line="747" pos:column="24">(<expr><name pos:line="747" pos:column="25">upper_bound<pos:position pos:line="747" pos:column="36"/></name> <operator pos:line="747" pos:column="37">&lt;<pos:position pos:line="747" pos:column="41"/></operator> <literal type="number" pos:line="747" pos:column="39">0<pos:position pos:line="747" pos:column="40"/></literal></expr>)<pos:position pos:line="747" pos:column="41"/></condition><then pos:line="747" pos:column="41"> <block type="pseudo"><expr_stmt><expr><name pos:line="747" pos:column="42">upper_bound<pos:position pos:line="747" pos:column="53"/></name> <operator pos:line="747" pos:column="54">=<pos:position pos:line="747" pos:column="55"/></operator> <name pos:line="747" pos:column="56">RE_DUP_MAX<pos:position pos:line="747" pos:column="66"/></name></expr>;<pos:position pos:line="747" pos:column="67"/></expr_stmt></block></then></if>
                  }<pos:position pos:line="748" pos:column="20"/></block></then>
                <else pos:line="749" pos:column="17">else
                  <comment type="block" pos:line="750" pos:column="19">/* Interval such as `{1}' =&gt; match exactly once. */</comment>
                  <block type="pseudo"><expr_stmt><expr><name pos:line="751" pos:column="19">upper_bound<pos:position pos:line="751" pos:column="30"/></name> <operator pos:line="751" pos:column="31">=<pos:position pos:line="751" pos:column="32"/></operator> <name pos:line="751" pos:column="33">lower_bound<pos:position pos:line="751" pos:column="44"/></name></expr>;<pos:position pos:line="751" pos:column="45"/></expr_stmt></block></else></if>

                <if pos:line="753" pos:column="17">if <condition pos:line="753" pos:column="20">(<expr><name><name pos:line="753" pos:column="21">lower_bound<pos:position pos:line="753" pos:column="32"/></name> <argument_list type="generic" pos:line="753" pos:column="33">&lt; <argument><expr><literal type="number" pos:line="753" pos:column="35">0<pos:position pos:line="753" pos:column="36"/></literal> <operator pos:line="753" pos:column="37">||<pos:position pos:line="753" pos:column="39"/></operator> <name pos:line="753" pos:column="40">upper_bound<pos:position pos:line="753" pos:column="51"/></name></expr></argument> &gt;<pos:position pos:line="753" pos:column="56"/></argument_list></name> <name pos:line="753" pos:column="54">RE_DUP_MAX<pos:position pos:line="753" pos:column="64"/></name>
                    <operator pos:line="754" pos:column="21">||<pos:position pos:line="754" pos:column="23"/></operator> <name pos:line="754" pos:column="24">lower_bound<pos:position pos:line="754" pos:column="35"/></name> <operator pos:line="754" pos:column="36">&gt;<pos:position pos:line="754" pos:column="40"/></operator> <name pos:line="754" pos:column="38">upper_bound<pos:position pos:line="754" pos:column="49"/></name></expr>)<pos:position pos:line="754" pos:column="50"/></condition><then pos:line="754" pos:column="50">
                  <block pos:line="755" pos:column="19">{
                    <if pos:line="756" pos:column="21">if <condition pos:line="756" pos:column="24">(<expr><name pos:line="756" pos:column="25">syntax<pos:position pos:line="756" pos:column="31"/></name> <operator pos:line="756" pos:column="32">&amp;<pos:position pos:line="756" pos:column="37"/></operator> <name pos:line="756" pos:column="34">RE_NO_BK_BRACES<pos:position pos:line="756" pos:column="49"/></name></expr>)<pos:position pos:line="756" pos:column="50"/></condition><then pos:line="756" pos:column="50">
                      <block type="pseudo"><goto pos:line="757" pos:column="23">goto <name pos:line="757" pos:column="28">unfetch_interval<pos:position pos:line="757" pos:column="44"/></name>;<pos:position pos:line="757" pos:column="45"/></goto></block></then>
                    <else pos:line="758" pos:column="21">else
                      <block type="pseudo"><expr_stmt><expr><call><name pos:line="759" pos:column="23">FREE_STACK_RETURN<pos:position pos:line="759" pos:column="40"/></name> <argument_list pos:line="759" pos:column="41">(<argument><expr><name pos:line="759" pos:column="42">REG_BADBR<pos:position pos:line="759" pos:column="51"/></name></expr></argument>)<pos:position pos:line="759" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="759" pos:column="53"/></expr_stmt></block></else></if>
                  }<pos:position pos:line="760" pos:column="20"/></block></then></if>

                <if pos:line="762" pos:column="17">if <condition pos:line="762" pos:column="20">(<expr><operator pos:line="762" pos:column="21">!<pos:position pos:line="762" pos:column="22"/></operator><operator pos:line="762" pos:column="22">(<pos:position pos:line="762" pos:column="23"/></operator><name pos:line="762" pos:column="23">syntax<pos:position pos:line="762" pos:column="29"/></name> <operator pos:line="762" pos:column="30">&amp;<pos:position pos:line="762" pos:column="35"/></operator> <name pos:line="762" pos:column="32">RE_NO_BK_BRACES<pos:position pos:line="762" pos:column="47"/></name><operator pos:line="762" pos:column="47">)<pos:position pos:line="762" pos:column="48"/></operator></expr>)<pos:position pos:line="762" pos:column="49"/></condition><then pos:line="762" pos:column="49">
                  <block pos:line="763" pos:column="19">{
                    <if pos:line="764" pos:column="21">if <condition pos:line="764" pos:column="24">(<expr><name pos:line="764" pos:column="25">c<pos:position pos:line="764" pos:column="26"/></name> <operator pos:line="764" pos:column="27">!=<pos:position pos:line="764" pos:column="29"/></operator> <literal type="char" pos:line="764" pos:column="30">'\\'<pos:position pos:line="764" pos:column="34"/></literal></expr>)<pos:position pos:line="764" pos:column="35"/></condition><then pos:line="764" pos:column="35"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="764" pos:column="36">FREE_STACK_RETURN<pos:position pos:line="764" pos:column="53"/></name> <argument_list pos:line="764" pos:column="54">(<argument><expr><name pos:line="764" pos:column="55">REG_EBRACE<pos:position pos:line="764" pos:column="65"/></name></expr></argument>)<pos:position pos:line="764" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="764" pos:column="67"/></expr_stmt></block></then></if>

                    <expr_stmt><expr><call><name pos:line="766" pos:column="21">PATFETCH<pos:position pos:line="766" pos:column="29"/></name> <argument_list pos:line="766" pos:column="30">(<argument><expr><name pos:line="766" pos:column="31">c<pos:position pos:line="766" pos:column="32"/></name></expr></argument>)<pos:position pos:line="766" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="766" pos:column="34"/></expr_stmt>
                  }<pos:position pos:line="767" pos:column="20"/></block></then></if>

                <if pos:line="769" pos:column="17">if <condition pos:line="769" pos:column="20">(<expr><name pos:line="769" pos:column="21">c<pos:position pos:line="769" pos:column="22"/></name> <operator pos:line="769" pos:column="23">!=<pos:position pos:line="769" pos:column="25"/></operator> <literal type="char" pos:line="769" pos:column="26">'}'<pos:position pos:line="769" pos:column="29"/></literal></expr>)<pos:position pos:line="769" pos:column="30"/></condition><then pos:line="769" pos:column="30">
                  <block pos:line="770" pos:column="19">{
                    <if pos:line="771" pos:column="21">if <condition pos:line="771" pos:column="24">(<expr><name pos:line="771" pos:column="25">syntax<pos:position pos:line="771" pos:column="31"/></name> <operator pos:line="771" pos:column="32">&amp;<pos:position pos:line="771" pos:column="37"/></operator> <name pos:line="771" pos:column="34">RE_NO_BK_BRACES<pos:position pos:line="771" pos:column="49"/></name></expr>)<pos:position pos:line="771" pos:column="50"/></condition><then pos:line="771" pos:column="50">
                      <block type="pseudo"><goto pos:line="772" pos:column="23">goto <name pos:line="772" pos:column="28">unfetch_interval<pos:position pos:line="772" pos:column="44"/></name>;<pos:position pos:line="772" pos:column="45"/></goto></block></then>
                    <else pos:line="773" pos:column="21">else
                      <block type="pseudo"><expr_stmt><expr><call><name pos:line="774" pos:column="23">FREE_STACK_RETURN<pos:position pos:line="774" pos:column="40"/></name> <argument_list pos:line="774" pos:column="41">(<argument><expr><name pos:line="774" pos:column="42">REG_BADBR<pos:position pos:line="774" pos:column="51"/></name></expr></argument>)<pos:position pos:line="774" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="774" pos:column="53"/></expr_stmt></block></else></if>
                  }<pos:position pos:line="775" pos:column="20"/></block></then></if>

                <comment type="block" pos:line="777" pos:column="17">/* We just parsed a valid interval.  */</comment>

                <comment type="block" pos:line="779" pos:column="17">/* If it's invalid to have no preceding re.  */</comment>
                <if pos:line="780" pos:column="17">if <condition pos:line="780" pos:column="20">(<expr><operator pos:line="780" pos:column="21">!<pos:position pos:line="780" pos:column="22"/></operator><name pos:line="780" pos:column="22">laststart<pos:position pos:line="780" pos:column="31"/></name></expr>)<pos:position pos:line="780" pos:column="32"/></condition><then pos:line="780" pos:column="32">
                  <block pos:line="781" pos:column="19">{
                    <if pos:line="782" pos:column="21">if <condition pos:line="782" pos:column="24">(<expr><name pos:line="782" pos:column="25">syntax<pos:position pos:line="782" pos:column="31"/></name> <operator pos:line="782" pos:column="32">&amp;<pos:position pos:line="782" pos:column="37"/></operator> <name pos:line="782" pos:column="34">RE_CONTEXT_INVALID_OPS<pos:position pos:line="782" pos:column="56"/></name></expr>)<pos:position pos:line="782" pos:column="57"/></condition><then pos:line="782" pos:column="57">
                      <block type="pseudo"><expr_stmt><expr><call><name pos:line="783" pos:column="23">FREE_STACK_RETURN<pos:position pos:line="783" pos:column="40"/></name> <argument_list pos:line="783" pos:column="41">(<argument><expr><name pos:line="783" pos:column="42">REG_BADRPT<pos:position pos:line="783" pos:column="52"/></name></expr></argument>)<pos:position pos:line="783" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="783" pos:column="54"/></expr_stmt></block></then>
                    <elseif pos:line="784" pos:column="21">else <if pos:line="784" pos:column="26">if <condition pos:line="784" pos:column="29">(<expr><name pos:line="784" pos:column="30">syntax<pos:position pos:line="784" pos:column="36"/></name> <operator pos:line="784" pos:column="37">&amp;<pos:position pos:line="784" pos:column="42"/></operator> <name pos:line="784" pos:column="39">RE_CONTEXT_INDEP_OPS<pos:position pos:line="784" pos:column="59"/></name></expr>)<pos:position pos:line="784" pos:column="60"/></condition><then pos:line="784" pos:column="60">
                      <block type="pseudo"><expr_stmt><expr><name pos:line="785" pos:column="23">laststart<pos:position pos:line="785" pos:column="32"/></name> <operator pos:line="785" pos:column="33">=<pos:position pos:line="785" pos:column="34"/></operator> <name pos:line="785" pos:column="35">b<pos:position pos:line="785" pos:column="36"/></name></expr>;<pos:position pos:line="785" pos:column="37"/></expr_stmt></block></then></if></elseif>
                    <else pos:line="786" pos:column="21">else
                      <block type="pseudo"><goto pos:line="787" pos:column="23">goto <name pos:line="787" pos:column="28">unfetch_interval<pos:position pos:line="787" pos:column="44"/></name>;<pos:position pos:line="787" pos:column="45"/></goto></block></else></if>
                  }<pos:position pos:line="788" pos:column="20"/></block></then></if>

                <comment type="block" pos:line="790" pos:column="17">/* If the upper bound is zero, don't want to succeed at
                   all; jump from `laststart' to `b + 3', which will be
                   the end of the buffer after we insert the jump.  */</comment>
                 <if pos:line="793" pos:column="18">if <condition pos:line="793" pos:column="21">(<expr><name pos:line="793" pos:column="22">upper_bound<pos:position pos:line="793" pos:column="33"/></name> <operator pos:line="793" pos:column="34">==<pos:position pos:line="793" pos:column="36"/></operator> <literal type="number" pos:line="793" pos:column="37">0<pos:position pos:line="793" pos:column="38"/></literal></expr>)<pos:position pos:line="793" pos:column="39"/></condition><then pos:line="793" pos:column="39">
                   <block pos:line="794" pos:column="20">{
                     <expr_stmt><expr><call><name pos:line="795" pos:column="22">GET_BUFFER_SPACE<pos:position pos:line="795" pos:column="38"/></name> <argument_list pos:line="795" pos:column="39">(<argument><expr><literal type="number" pos:line="795" pos:column="40">3<pos:position pos:line="795" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="795" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="795" pos:column="43"/></expr_stmt>
                     <expr_stmt><expr><call><name pos:line="796" pos:column="22">INSERT_JUMP<pos:position pos:line="796" pos:column="33"/></name> <argument_list pos:line="796" pos:column="34">(<argument><expr><name pos:line="796" pos:column="35">jump<pos:position pos:line="796" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="796" pos:column="41">laststart<pos:position pos:line="796" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="796" pos:column="52">b<pos:position pos:line="796" pos:column="53"/></name> <operator pos:line="796" pos:column="54">+<pos:position pos:line="796" pos:column="55"/></operator> <literal type="number" pos:line="796" pos:column="56">3<pos:position pos:line="796" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="796" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="796" pos:column="59"/></expr_stmt>
                     <expr_stmt><expr><name pos:line="797" pos:column="22">b<pos:position pos:line="797" pos:column="23"/></name> <operator pos:line="797" pos:column="24">+=<pos:position pos:line="797" pos:column="26"/></operator> <literal type="number" pos:line="797" pos:column="27">3<pos:position pos:line="797" pos:column="28"/></literal></expr>;<pos:position pos:line="797" pos:column="29"/></expr_stmt>
                   }<pos:position pos:line="798" pos:column="21"/></block></then>

                 <comment type="block" pos:line="800" pos:column="18">/* Otherwise, we have a nontrivial interval.  When
                    we're all done, the pattern will look like:
                      set_number_at &lt;jump count&gt; &lt;upper bound&gt;
                      set_number_at &lt;succeed_n count&gt; &lt;lower bound&gt;
                      succeed_n &lt;after jump addr&gt; &lt;succeed_n count&gt;
                      &lt;body of loop&gt;
                      jump_n &lt;succeed_n addr&gt; &lt;jump count&gt;
                    (The upper bound and `jump_n' are omitted if
                    `upper_bound' is 1, though.)  */</comment>
                 <else pos:line="809" pos:column="18">else
                   <block pos:line="810" pos:column="20">{ <comment type="block" pos:line="810" pos:column="22">/* If the upper bound is &gt; 1, we need to insert
                        more at the end of the loop.  */</comment>
                     <decl_stmt><decl><type><name pos:line="812" pos:column="22">unsigned<pos:position pos:line="812" pos:column="30"/></name></type> <name pos:line="812" pos:column="31">nbytes<pos:position pos:line="812" pos:column="37"/></name> <init pos:line="812" pos:column="38">= <expr><literal type="number" pos:line="812" pos:column="40">10<pos:position pos:line="812" pos:column="42"/></literal> <operator pos:line="812" pos:column="43">+<pos:position pos:line="812" pos:column="44"/></operator> <operator pos:line="812" pos:column="45">(<pos:position pos:line="812" pos:column="46"/></operator><name pos:line="812" pos:column="46">upper_bound<pos:position pos:line="812" pos:column="57"/></name> <operator pos:line="812" pos:column="58">&gt;<pos:position pos:line="812" pos:column="62"/></operator> <literal type="number" pos:line="812" pos:column="60">1<pos:position pos:line="812" pos:column="61"/></literal><operator pos:line="812" pos:column="61">)<pos:position pos:line="812" pos:column="62"/></operator> <operator pos:line="812" pos:column="63">*<pos:position pos:line="812" pos:column="64"/></operator> <literal type="number" pos:line="812" pos:column="65">10<pos:position pos:line="812" pos:column="67"/></literal></expr></init></decl>;<pos:position pos:line="812" pos:column="68"/></decl_stmt>

                     <expr_stmt><expr><call><name pos:line="814" pos:column="22">GET_BUFFER_SPACE<pos:position pos:line="814" pos:column="38"/></name> <argument_list pos:line="814" pos:column="39">(<argument><expr><name pos:line="814" pos:column="40">nbytes<pos:position pos:line="814" pos:column="46"/></name></expr></argument>)<pos:position pos:line="814" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="814" pos:column="48"/></expr_stmt>

                     <comment type="block" pos:line="816" pos:column="22">/* Initialize lower bound of the `succeed_n', even
                        though it will be set during matching by its
                        attendant `set_number_at' (inserted next),
                        because `re_compile_fastmap' needs to know.
                        Jump to the `jump_n' we might insert below.  */</comment>
                     <expr_stmt><expr><call><name pos:line="821" pos:column="22">INSERT_JUMP2<pos:position pos:line="821" pos:column="34"/></name> <argument_list pos:line="821" pos:column="35">(<argument><expr><name pos:line="821" pos:column="36">succeed_n<pos:position pos:line="821" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="821" pos:column="47">laststart<pos:position pos:line="821" pos:column="56"/></name></expr></argument>,
                                   <argument><expr><name pos:line="822" pos:column="36">b<pos:position pos:line="822" pos:column="37"/></name> <operator pos:line="822" pos:column="38">+<pos:position pos:line="822" pos:column="39"/></operator> <literal type="number" pos:line="822" pos:column="40">5<pos:position pos:line="822" pos:column="41"/></literal> <operator pos:line="822" pos:column="42">+<pos:position pos:line="822" pos:column="43"/></operator> <operator pos:line="822" pos:column="44">(<pos:position pos:line="822" pos:column="45"/></operator><name pos:line="822" pos:column="45">upper_bound<pos:position pos:line="822" pos:column="56"/></name> <operator pos:line="822" pos:column="57">&gt;<pos:position pos:line="822" pos:column="61"/></operator> <literal type="number" pos:line="822" pos:column="59">1<pos:position pos:line="822" pos:column="60"/></literal><operator pos:line="822" pos:column="60">)<pos:position pos:line="822" pos:column="61"/></operator> <operator pos:line="822" pos:column="62">*<pos:position pos:line="822" pos:column="63"/></operator> <literal type="number" pos:line="822" pos:column="64">5<pos:position pos:line="822" pos:column="65"/></literal></expr></argument>,
                                   <argument><expr><name pos:line="823" pos:column="36">lower_bound<pos:position pos:line="823" pos:column="47"/></name></expr></argument>)<pos:position pos:line="823" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="823" pos:column="49"/></expr_stmt>
                     <expr_stmt><expr><name pos:line="824" pos:column="22">b<pos:position pos:line="824" pos:column="23"/></name> <operator pos:line="824" pos:column="24">+=<pos:position pos:line="824" pos:column="26"/></operator> <literal type="number" pos:line="824" pos:column="27">5<pos:position pos:line="824" pos:column="28"/></literal></expr>;<pos:position pos:line="824" pos:column="29"/></expr_stmt>

                     <comment type="block" pos:line="826" pos:column="22">/* Code to initialize the lower bound.  Insert
                        before the `succeed_n'.  The `5' is the last two
                        bytes of this `set_number_at', plus 3 bytes of
                        the following `succeed_n'.  */</comment>
                     <expr_stmt><expr><call><name pos:line="830" pos:column="22">insert_op2<pos:position pos:line="830" pos:column="32"/></name> <argument_list pos:line="830" pos:column="33">(<argument><expr><name pos:line="830" pos:column="34">set_number_at<pos:position pos:line="830" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="830" pos:column="49">laststart<pos:position pos:line="830" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="830" pos:column="60">5<pos:position pos:line="830" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="830" pos:column="63">lower_bound<pos:position pos:line="830" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="830" pos:column="76">b<pos:position pos:line="830" pos:column="77"/></name></expr></argument>)<pos:position pos:line="830" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="830" pos:column="79"/></expr_stmt>
                     <expr_stmt><expr><name pos:line="831" pos:column="22">b<pos:position pos:line="831" pos:column="23"/></name> <operator pos:line="831" pos:column="24">+=<pos:position pos:line="831" pos:column="26"/></operator> <literal type="number" pos:line="831" pos:column="27">5<pos:position pos:line="831" pos:column="28"/></literal></expr>;<pos:position pos:line="831" pos:column="29"/></expr_stmt>

                     <if pos:line="833" pos:column="22">if <condition pos:line="833" pos:column="25">(<expr><name pos:line="833" pos:column="26">upper_bound<pos:position pos:line="833" pos:column="37"/></name> <operator pos:line="833" pos:column="38">&gt;<pos:position pos:line="833" pos:column="42"/></operator> <literal type="number" pos:line="833" pos:column="40">1<pos:position pos:line="833" pos:column="41"/></literal></expr>)<pos:position pos:line="833" pos:column="42"/></condition><then pos:line="833" pos:column="42">
                       <block pos:line="834" pos:column="24">{ <comment type="block" pos:line="834" pos:column="26">/* More than one repetition is allowed, so
                            append a backward jump to the `succeed_n'
                            that starts this interval.

                            When we've reached this during matching,
                            we'll have matched the interval once, so
                            jump back only `upper_bound - 1' times.  */</comment>
                         <expr_stmt><expr><call><name pos:line="841" pos:column="26">STORE_JUMP2<pos:position pos:line="841" pos:column="37"/></name> <argument_list pos:line="841" pos:column="38">(<argument><expr><name pos:line="841" pos:column="39">jump_n<pos:position pos:line="841" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="841" pos:column="47">b<pos:position pos:line="841" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="841" pos:column="50">laststart<pos:position pos:line="841" pos:column="59"/></name> <operator pos:line="841" pos:column="60">+<pos:position pos:line="841" pos:column="61"/></operator> <literal type="number" pos:line="841" pos:column="62">5<pos:position pos:line="841" pos:column="63"/></literal></expr></argument>,
                                      <argument><expr><name pos:line="842" pos:column="39">upper_bound<pos:position pos:line="842" pos:column="50"/></name> <operator pos:line="842" pos:column="51">-<pos:position pos:line="842" pos:column="52"/></operator> <literal type="number" pos:line="842" pos:column="53">1<pos:position pos:line="842" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="842" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="842" pos:column="56"/></expr_stmt>
                         <expr_stmt><expr><name pos:line="843" pos:column="26">b<pos:position pos:line="843" pos:column="27"/></name> <operator pos:line="843" pos:column="28">+=<pos:position pos:line="843" pos:column="30"/></operator> <literal type="number" pos:line="843" pos:column="31">5<pos:position pos:line="843" pos:column="32"/></literal></expr>;<pos:position pos:line="843" pos:column="33"/></expr_stmt>

                         <comment type="block" pos:line="845" pos:column="26">/* The location we want to set is the second
                            parameter of the `jump_n'; that is `b-2' as
                            an absolute address.  `laststart' will be
                            the `set_number_at' we're about to insert;
                            `laststart+3' the number to set, the source
                            for the relative address.  But we are
                            inserting into the middle of the pattern --
                            so everything is getting moved up by 5.
                            Conclusion: (b - 2) - (laststart + 3) + 5,
                            i.e., b - laststart.

                            We insert this at the beginning of the loop
                            so that if we fail during matching, we'll
                            reinitialize the bounds.  */</comment>
                         <expr_stmt><expr><call><name pos:line="859" pos:column="26">insert_op2<pos:position pos:line="859" pos:column="36"/></name> <argument_list pos:line="859" pos:column="37">(<argument><expr><name pos:line="859" pos:column="38">set_number_at<pos:position pos:line="859" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="859" pos:column="53">laststart<pos:position pos:line="859" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="859" pos:column="64">b<pos:position pos:line="859" pos:column="65"/></name> <operator pos:line="859" pos:column="66">-<pos:position pos:line="859" pos:column="67"/></operator> <name pos:line="859" pos:column="68">laststart<pos:position pos:line="859" pos:column="77"/></name></expr></argument>,
                                     <argument><expr><name pos:line="860" pos:column="38">upper_bound<pos:position pos:line="860" pos:column="49"/></name> <operator pos:line="860" pos:column="50">-<pos:position pos:line="860" pos:column="51"/></operator> <literal type="number" pos:line="860" pos:column="52">1<pos:position pos:line="860" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="860" pos:column="55">b<pos:position pos:line="860" pos:column="56"/></name></expr></argument>)<pos:position pos:line="860" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="860" pos:column="58"/></expr_stmt>
                         <expr_stmt><expr><name pos:line="861" pos:column="26">b<pos:position pos:line="861" pos:column="27"/></name> <operator pos:line="861" pos:column="28">+=<pos:position pos:line="861" pos:column="30"/></operator> <literal type="number" pos:line="861" pos:column="31">5<pos:position pos:line="861" pos:column="32"/></literal></expr>;<pos:position pos:line="861" pos:column="33"/></expr_stmt>
                       }<pos:position pos:line="862" pos:column="25"/></block></then></if>
                   }<pos:position pos:line="863" pos:column="21"/></block></else></if>
                <expr_stmt><expr><name pos:line="864" pos:column="17">pending_exact<pos:position pos:line="864" pos:column="30"/></name> <operator pos:line="864" pos:column="31">=<pos:position pos:line="864" pos:column="32"/></operator> <literal type="number" pos:line="864" pos:column="33">0<pos:position pos:line="864" pos:column="34"/></literal></expr>;<pos:position pos:line="864" pos:column="35"/></expr_stmt>
                <expr_stmt><expr><name pos:line="865" pos:column="17">beg_interval<pos:position pos:line="865" pos:column="29"/></name> <operator pos:line="865" pos:column="30">=<pos:position pos:line="865" pos:column="31"/></operator> <name pos:line="865" pos:column="32">NULL<pos:position pos:line="865" pos:column="36"/></name></expr>;<pos:position pos:line="865" pos:column="37"/></expr_stmt>
              }<pos:position pos:line="866" pos:column="16"/></block>
              <break pos:line="867" pos:column="15">break;<pos:position pos:line="867" pos:column="21"/></break>

            <label><name pos:line="869" pos:column="13">unfetch_interval<pos:position pos:line="869" pos:column="29"/></name>:<pos:position pos:line="869" pos:column="30"/></label>
              <comment type="block" pos:line="870" pos:column="15">/* If an invalid interval, match the characters as literals.  */</comment>
               <expr_stmt><expr><call><name pos:line="871" pos:column="16">assert<pos:position pos:line="871" pos:column="22"/></name> <argument_list pos:line="871" pos:column="23">(<argument><expr><name pos:line="871" pos:column="24">beg_interval<pos:position pos:line="871" pos:column="36"/></name></expr></argument>)<pos:position pos:line="871" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="871" pos:column="38"/></expr_stmt>
               <expr_stmt><expr><name pos:line="872" pos:column="16">p<pos:position pos:line="872" pos:column="17"/></name> <operator pos:line="872" pos:column="18">=<pos:position pos:line="872" pos:column="19"/></operator> <name pos:line="872" pos:column="20">beg_interval<pos:position pos:line="872" pos:column="32"/></name></expr>;<pos:position pos:line="872" pos:column="33"/></expr_stmt>
               <expr_stmt><expr><name pos:line="873" pos:column="16">beg_interval<pos:position pos:line="873" pos:column="28"/></name> <operator pos:line="873" pos:column="29">=<pos:position pos:line="873" pos:column="30"/></operator> <name pos:line="873" pos:column="31">NULL<pos:position pos:line="873" pos:column="35"/></name></expr>;<pos:position pos:line="873" pos:column="36"/></expr_stmt>

               <comment type="block" pos:line="875" pos:column="16">/* normal_char and normal_backslash need `c'.  */</comment>
               <expr_stmt><expr><call><name pos:line="876" pos:column="16">PATFETCH<pos:position pos:line="876" pos:column="24"/></name> <argument_list pos:line="876" pos:column="25">(<argument><expr><name pos:line="876" pos:column="26">c<pos:position pos:line="876" pos:column="27"/></name></expr></argument>)<pos:position pos:line="876" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="876" pos:column="29"/></expr_stmt>

               <if pos:line="878" pos:column="16">if <condition pos:line="878" pos:column="19">(<expr><operator pos:line="878" pos:column="20">!<pos:position pos:line="878" pos:column="21"/></operator><operator pos:line="878" pos:column="21">(<pos:position pos:line="878" pos:column="22"/></operator><name pos:line="878" pos:column="22">syntax<pos:position pos:line="878" pos:column="28"/></name> <operator pos:line="878" pos:column="29">&amp;<pos:position pos:line="878" pos:column="34"/></operator> <name pos:line="878" pos:column="31">RE_NO_BK_BRACES<pos:position pos:line="878" pos:column="46"/></name><operator pos:line="878" pos:column="46">)<pos:position pos:line="878" pos:column="47"/></operator></expr>)<pos:position pos:line="878" pos:column="48"/></condition><then pos:line="878" pos:column="48">
                 <block pos:line="879" pos:column="18">{
                   <if pos:line="880" pos:column="20">if <condition pos:line="880" pos:column="23">(<expr><name pos:line="880" pos:column="24">p<pos:position pos:line="880" pos:column="25"/></name> <operator pos:line="880" pos:column="26">&gt;<pos:position pos:line="880" pos:column="30"/></operator> <name pos:line="880" pos:column="28">pattern<pos:position pos:line="880" pos:column="35"/></name>  <operator pos:line="880" pos:column="37">&amp;&amp;<pos:position pos:line="880" pos:column="47"/></operator>  <name><name pos:line="880" pos:column="41">p<pos:position pos:line="880" pos:column="42"/></name><index pos:line="880" pos:column="42">[<expr><operator pos:line="880" pos:column="43">-<pos:position pos:line="880" pos:column="44"/></operator><literal type="number" pos:line="880" pos:column="44">1<pos:position pos:line="880" pos:column="45"/></literal></expr>]<pos:position pos:line="880" pos:column="46"/></index></name> <operator pos:line="880" pos:column="47">==<pos:position pos:line="880" pos:column="49"/></operator> <literal type="char" pos:line="880" pos:column="50">'\\'<pos:position pos:line="880" pos:column="54"/></literal></expr>)<pos:position pos:line="880" pos:column="55"/></condition><then pos:line="880" pos:column="55">
                     <block type="pseudo"><goto pos:line="881" pos:column="22">goto <name pos:line="881" pos:column="27">normal_backslash<pos:position pos:line="881" pos:column="43"/></name>;<pos:position pos:line="881" pos:column="44"/></goto></block></then></if>
                 }<pos:position pos:line="882" pos:column="19"/></block></then></if>
               <goto pos:line="883" pos:column="16">goto <name pos:line="883" pos:column="21">normal_char<pos:position pos:line="883" pos:column="32"/></name>;<pos:position pos:line="883" pos:column="33"/></goto>

<cpp:ifdef pos:line="885" pos:column="1">#<cpp:directive pos:line="885" pos:column="2">ifdef<pos:position pos:line="885" pos:column="7"/></cpp:directive> <name pos:line="885" pos:column="8">emacs<pos:position pos:line="885" pos:column="13"/></name></cpp:ifdef>
            <comment type="block" pos:line="886" pos:column="13">/* There is no way to specify the before_dot and after_dot
               operators.  rms says this is ok.  --karl  */</comment>
            <case pos:line="888" pos:column="13">case <expr><literal type="char" pos:line="888" pos:column="18">'='<pos:position pos:line="888" pos:column="21"/></literal></expr>:<pos:position pos:line="888" pos:column="22"/></case>
              <expr_stmt><expr><call><name pos:line="889" pos:column="15">BUF_PUSH<pos:position pos:line="889" pos:column="23"/></name> <argument_list pos:line="889" pos:column="24">(<argument><expr><name pos:line="889" pos:column="25">at_dot<pos:position pos:line="889" pos:column="31"/></name></expr></argument>)<pos:position pos:line="889" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="889" pos:column="33"/></expr_stmt>
              <break pos:line="890" pos:column="15">break;<pos:position pos:line="890" pos:column="21"/></break>

            <case pos:line="892" pos:column="13">case <expr><literal type="char" pos:line="892" pos:column="18">'s'<pos:position pos:line="892" pos:column="21"/></literal></expr>:<pos:position pos:line="892" pos:column="22"/></case>
              <expr_stmt><expr><name pos:line="893" pos:column="15">laststart<pos:position pos:line="893" pos:column="24"/></name> <operator pos:line="893" pos:column="25">=<pos:position pos:line="893" pos:column="26"/></operator> <name pos:line="893" pos:column="27">b<pos:position pos:line="893" pos:column="28"/></name></expr>;<pos:position pos:line="893" pos:column="29"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="894" pos:column="15">PATFETCH<pos:position pos:line="894" pos:column="23"/></name> <argument_list pos:line="894" pos:column="24">(<argument><expr><name pos:line="894" pos:column="25">c<pos:position pos:line="894" pos:column="26"/></name></expr></argument>)<pos:position pos:line="894" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="894" pos:column="28"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="895" pos:column="15">BUF_PUSH_2<pos:position pos:line="895" pos:column="25"/></name> <argument_list pos:line="895" pos:column="26">(<argument><expr><name pos:line="895" pos:column="27">syntaxspec<pos:position pos:line="895" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="895" pos:column="39">syntax_spec_code<pos:position pos:line="895" pos:column="55"/></name><index pos:line="895" pos:column="55">[<expr><name pos:line="895" pos:column="56">c<pos:position pos:line="895" pos:column="57"/></name></expr>]<pos:position pos:line="895" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="895" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="895" pos:column="60"/></expr_stmt>
              <break pos:line="896" pos:column="15">break;<pos:position pos:line="896" pos:column="21"/></break>

            <case pos:line="898" pos:column="13">case <expr><literal type="char" pos:line="898" pos:column="18">'S'<pos:position pos:line="898" pos:column="21"/></literal></expr>:<pos:position pos:line="898" pos:column="22"/></case>
              <expr_stmt><expr><name pos:line="899" pos:column="15">laststart<pos:position pos:line="899" pos:column="24"/></name> <operator pos:line="899" pos:column="25">=<pos:position pos:line="899" pos:column="26"/></operator> <name pos:line="899" pos:column="27">b<pos:position pos:line="899" pos:column="28"/></name></expr>;<pos:position pos:line="899" pos:column="29"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="900" pos:column="15">PATFETCH<pos:position pos:line="900" pos:column="23"/></name> <argument_list pos:line="900" pos:column="24">(<argument><expr><name pos:line="900" pos:column="25">c<pos:position pos:line="900" pos:column="26"/></name></expr></argument>)<pos:position pos:line="900" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="900" pos:column="28"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="901" pos:column="15">BUF_PUSH_2<pos:position pos:line="901" pos:column="25"/></name> <argument_list pos:line="901" pos:column="26">(<argument><expr><name pos:line="901" pos:column="27">notsyntaxspec<pos:position pos:line="901" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="901" pos:column="42">syntax_spec_code<pos:position pos:line="901" pos:column="58"/></name><index pos:line="901" pos:column="58">[<expr><name pos:line="901" pos:column="59">c<pos:position pos:line="901" pos:column="60"/></name></expr>]<pos:position pos:line="901" pos:column="61"/></index></name></expr></argument>)<pos:position pos:line="901" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="901" pos:column="63"/></expr_stmt>
              <break pos:line="902" pos:column="15">break;<pos:position pos:line="902" pos:column="21"/></break>
<cpp:endif pos:line="903" pos:column="1">#<cpp:directive pos:line="903" pos:column="2">endif<pos:position pos:line="903" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="903" pos:column="8">/* emacs */</comment>


            <case pos:line="906" pos:column="13">case <expr><literal type="char" pos:line="906" pos:column="18">'w'<pos:position pos:line="906" pos:column="21"/></literal></expr>:<pos:position pos:line="906" pos:column="22"/></case>
	      <if pos:line="907" pos:column="15">if <condition pos:line="907" pos:column="18">(<expr><name pos:line="907" pos:column="19">re_syntax_options<pos:position pos:line="907" pos:column="36"/></name> <operator pos:line="907" pos:column="37">&amp;<pos:position pos:line="907" pos:column="42"/></operator> <name pos:line="907" pos:column="39">RE_NO_GNU_OPS<pos:position pos:line="907" pos:column="52"/></name></expr>)<pos:position pos:line="907" pos:column="53"/></condition><then pos:line="907" pos:column="53">
		<block type="pseudo"><goto pos:line="908" pos:column="17">goto <name pos:line="908" pos:column="22">normal_char<pos:position pos:line="908" pos:column="33"/></name>;<pos:position pos:line="908" pos:column="34"/></goto></block></then></if>
              <expr_stmt><expr><name pos:line="909" pos:column="15">laststart<pos:position pos:line="909" pos:column="24"/></name> <operator pos:line="909" pos:column="25">=<pos:position pos:line="909" pos:column="26"/></operator> <name pos:line="909" pos:column="27">b<pos:position pos:line="909" pos:column="28"/></name></expr>;<pos:position pos:line="909" pos:column="29"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="910" pos:column="15">BUF_PUSH<pos:position pos:line="910" pos:column="23"/></name> <argument_list pos:line="910" pos:column="24">(<argument><expr><name pos:line="910" pos:column="25">wordchar<pos:position pos:line="910" pos:column="33"/></name></expr></argument>)<pos:position pos:line="910" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="910" pos:column="35"/></expr_stmt>
              <break pos:line="911" pos:column="15">break;<pos:position pos:line="911" pos:column="21"/></break>


            <case pos:line="914" pos:column="13">case <expr><literal type="char" pos:line="914" pos:column="18">'W'<pos:position pos:line="914" pos:column="21"/></literal></expr>:<pos:position pos:line="914" pos:column="22"/></case>
	      <if pos:line="915" pos:column="15">if <condition pos:line="915" pos:column="18">(<expr><name pos:line="915" pos:column="19">re_syntax_options<pos:position pos:line="915" pos:column="36"/></name> <operator pos:line="915" pos:column="37">&amp;<pos:position pos:line="915" pos:column="42"/></operator> <name pos:line="915" pos:column="39">RE_NO_GNU_OPS<pos:position pos:line="915" pos:column="52"/></name></expr>)<pos:position pos:line="915" pos:column="53"/></condition><then pos:line="915" pos:column="53">
		<block type="pseudo"><goto pos:line="916" pos:column="17">goto <name pos:line="916" pos:column="22">normal_char<pos:position pos:line="916" pos:column="33"/></name>;<pos:position pos:line="916" pos:column="34"/></goto></block></then></if>
              <expr_stmt><expr><name pos:line="917" pos:column="15">laststart<pos:position pos:line="917" pos:column="24"/></name> <operator pos:line="917" pos:column="25">=<pos:position pos:line="917" pos:column="26"/></operator> <name pos:line="917" pos:column="27">b<pos:position pos:line="917" pos:column="28"/></name></expr>;<pos:position pos:line="917" pos:column="29"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="918" pos:column="15">BUF_PUSH<pos:position pos:line="918" pos:column="23"/></name> <argument_list pos:line="918" pos:column="24">(<argument><expr><name pos:line="918" pos:column="25">notwordchar<pos:position pos:line="918" pos:column="36"/></name></expr></argument>)<pos:position pos:line="918" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="918" pos:column="38"/></expr_stmt>
              <break pos:line="919" pos:column="15">break;<pos:position pos:line="919" pos:column="21"/></break>


            <case pos:line="922" pos:column="13">case <expr><literal type="char" pos:line="922" pos:column="18">'&lt;'<pos:position pos:line="922" pos:column="24"/></literal></expr>:<pos:position pos:line="922" pos:column="22"/></case>
	      <if pos:line="923" pos:column="15">if <condition pos:line="923" pos:column="18">(<expr><name pos:line="923" pos:column="19">re_syntax_options<pos:position pos:line="923" pos:column="36"/></name> <operator pos:line="923" pos:column="37">&amp;<pos:position pos:line="923" pos:column="42"/></operator> <name pos:line="923" pos:column="39">RE_NO_GNU_OPS<pos:position pos:line="923" pos:column="52"/></name></expr>)<pos:position pos:line="923" pos:column="53"/></condition><then pos:line="923" pos:column="53">
		<block type="pseudo"><goto pos:line="924" pos:column="17">goto <name pos:line="924" pos:column="22">normal_char<pos:position pos:line="924" pos:column="33"/></name>;<pos:position pos:line="924" pos:column="34"/></goto></block></then></if>
              <expr_stmt><expr><call><name pos:line="925" pos:column="15">BUF_PUSH<pos:position pos:line="925" pos:column="23"/></name> <argument_list pos:line="925" pos:column="24">(<argument><expr><name pos:line="925" pos:column="25">wordbeg<pos:position pos:line="925" pos:column="32"/></name></expr></argument>)<pos:position pos:line="925" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="925" pos:column="34"/></expr_stmt>
              <break pos:line="926" pos:column="15">break;<pos:position pos:line="926" pos:column="21"/></break>

            <case pos:line="928" pos:column="13">case <expr><literal type="char" pos:line="928" pos:column="18">'&gt;'<pos:position pos:line="928" pos:column="24"/></literal></expr>:<pos:position pos:line="928" pos:column="22"/></case>
	      <if pos:line="929" pos:column="15">if <condition pos:line="929" pos:column="18">(<expr><name pos:line="929" pos:column="19">re_syntax_options<pos:position pos:line="929" pos:column="36"/></name> <operator pos:line="929" pos:column="37">&amp;<pos:position pos:line="929" pos:column="42"/></operator> <name pos:line="929" pos:column="39">RE_NO_GNU_OPS<pos:position pos:line="929" pos:column="52"/></name></expr>)<pos:position pos:line="929" pos:column="53"/></condition><then pos:line="929" pos:column="53">
		<block type="pseudo"><goto pos:line="930" pos:column="17">goto <name pos:line="930" pos:column="22">normal_char<pos:position pos:line="930" pos:column="33"/></name>;<pos:position pos:line="930" pos:column="34"/></goto></block></then></if>
              <expr_stmt><expr><call><name pos:line="931" pos:column="15">BUF_PUSH<pos:position pos:line="931" pos:column="23"/></name> <argument_list pos:line="931" pos:column="24">(<argument><expr><name pos:line="931" pos:column="25">wordend<pos:position pos:line="931" pos:column="32"/></name></expr></argument>)<pos:position pos:line="931" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="931" pos:column="34"/></expr_stmt>
              <break pos:line="932" pos:column="15">break;<pos:position pos:line="932" pos:column="21"/></break>

            <case pos:line="934" pos:column="13">case <expr><literal type="char" pos:line="934" pos:column="18">'b'<pos:position pos:line="934" pos:column="21"/></literal></expr>:<pos:position pos:line="934" pos:column="22"/></case>
	      <if pos:line="935" pos:column="15">if <condition pos:line="935" pos:column="18">(<expr><name pos:line="935" pos:column="19">re_syntax_options<pos:position pos:line="935" pos:column="36"/></name> <operator pos:line="935" pos:column="37">&amp;<pos:position pos:line="935" pos:column="42"/></operator> <name pos:line="935" pos:column="39">RE_NO_GNU_OPS<pos:position pos:line="935" pos:column="52"/></name></expr>)<pos:position pos:line="935" pos:column="53"/></condition><then pos:line="935" pos:column="53">
		<block type="pseudo"><goto pos:line="936" pos:column="17">goto <name pos:line="936" pos:column="22">normal_char<pos:position pos:line="936" pos:column="33"/></name>;<pos:position pos:line="936" pos:column="34"/></goto></block></then></if>
              <expr_stmt><expr><call><name pos:line="937" pos:column="15">BUF_PUSH<pos:position pos:line="937" pos:column="23"/></name> <argument_list pos:line="937" pos:column="24">(<argument><expr><name pos:line="937" pos:column="25">wordbound<pos:position pos:line="937" pos:column="34"/></name></expr></argument>)<pos:position pos:line="937" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="937" pos:column="36"/></expr_stmt>
              <break pos:line="938" pos:column="15">break;<pos:position pos:line="938" pos:column="21"/></break>

            <case pos:line="940" pos:column="13">case <expr><literal type="char" pos:line="940" pos:column="18">'B'<pos:position pos:line="940" pos:column="21"/></literal></expr>:<pos:position pos:line="940" pos:column="22"/></case>
	      <if pos:line="941" pos:column="15">if <condition pos:line="941" pos:column="18">(<expr><name pos:line="941" pos:column="19">re_syntax_options<pos:position pos:line="941" pos:column="36"/></name> <operator pos:line="941" pos:column="37">&amp;<pos:position pos:line="941" pos:column="42"/></operator> <name pos:line="941" pos:column="39">RE_NO_GNU_OPS<pos:position pos:line="941" pos:column="52"/></name></expr>)<pos:position pos:line="941" pos:column="53"/></condition><then pos:line="941" pos:column="53">
		<block type="pseudo"><goto pos:line="942" pos:column="17">goto <name pos:line="942" pos:column="22">normal_char<pos:position pos:line="942" pos:column="33"/></name>;<pos:position pos:line="942" pos:column="34"/></goto></block></then></if>
              <expr_stmt><expr><call><name pos:line="943" pos:column="15">BUF_PUSH<pos:position pos:line="943" pos:column="23"/></name> <argument_list pos:line="943" pos:column="24">(<argument><expr><name pos:line="943" pos:column="25">notwordbound<pos:position pos:line="943" pos:column="37"/></name></expr></argument>)<pos:position pos:line="943" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="943" pos:column="39"/></expr_stmt>
              <break pos:line="944" pos:column="15">break;<pos:position pos:line="944" pos:column="21"/></break>

            <case pos:line="946" pos:column="13">case <expr><literal type="char" pos:line="946" pos:column="18">'`'<pos:position pos:line="946" pos:column="21"/></literal></expr>:<pos:position pos:line="946" pos:column="22"/></case>
	      <if pos:line="947" pos:column="15">if <condition pos:line="947" pos:column="18">(<expr><name pos:line="947" pos:column="19">re_syntax_options<pos:position pos:line="947" pos:column="36"/></name> <operator pos:line="947" pos:column="37">&amp;<pos:position pos:line="947" pos:column="42"/></operator> <name pos:line="947" pos:column="39">RE_NO_GNU_OPS<pos:position pos:line="947" pos:column="52"/></name></expr>)<pos:position pos:line="947" pos:column="53"/></condition><then pos:line="947" pos:column="53">
		<block type="pseudo"><goto pos:line="948" pos:column="17">goto <name pos:line="948" pos:column="22">normal_char<pos:position pos:line="948" pos:column="33"/></name>;<pos:position pos:line="948" pos:column="34"/></goto></block></then></if>
              <expr_stmt><expr><call><name pos:line="949" pos:column="15">BUF_PUSH<pos:position pos:line="949" pos:column="23"/></name> <argument_list pos:line="949" pos:column="24">(<argument><expr><name pos:line="949" pos:column="25">begbuf<pos:position pos:line="949" pos:column="31"/></name></expr></argument>)<pos:position pos:line="949" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="949" pos:column="33"/></expr_stmt>
              <break pos:line="950" pos:column="15">break;<pos:position pos:line="950" pos:column="21"/></break>

            <case pos:line="952" pos:column="13">case <expr><literal type="char" pos:line="952" pos:column="18">'\''<pos:position pos:line="952" pos:column="22"/></literal></expr>:<pos:position pos:line="952" pos:column="23"/></case>
	      <if pos:line="953" pos:column="15">if <condition pos:line="953" pos:column="18">(<expr><name pos:line="953" pos:column="19">re_syntax_options<pos:position pos:line="953" pos:column="36"/></name> <operator pos:line="953" pos:column="37">&amp;<pos:position pos:line="953" pos:column="42"/></operator> <name pos:line="953" pos:column="39">RE_NO_GNU_OPS<pos:position pos:line="953" pos:column="52"/></name></expr>)<pos:position pos:line="953" pos:column="53"/></condition><then pos:line="953" pos:column="53">
		<block type="pseudo"><goto pos:line="954" pos:column="17">goto <name pos:line="954" pos:column="22">normal_char<pos:position pos:line="954" pos:column="33"/></name>;<pos:position pos:line="954" pos:column="34"/></goto></block></then></if>
              <expr_stmt><expr><call><name pos:line="955" pos:column="15">BUF_PUSH<pos:position pos:line="955" pos:column="23"/></name> <argument_list pos:line="955" pos:column="24">(<argument><expr><name pos:line="955" pos:column="25">endbuf<pos:position pos:line="955" pos:column="31"/></name></expr></argument>)<pos:position pos:line="955" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="955" pos:column="33"/></expr_stmt>
              <break pos:line="956" pos:column="15">break;<pos:position pos:line="956" pos:column="21"/></break>

            <case pos:line="958" pos:column="13">case <expr><literal type="char" pos:line="958" pos:column="18">'1'<pos:position pos:line="958" pos:column="21"/></literal></expr>:<pos:position pos:line="958" pos:column="22"/></case> <case pos:line="958" pos:column="23">case <expr><literal type="char" pos:line="958" pos:column="28">'2'<pos:position pos:line="958" pos:column="31"/></literal></expr>:<pos:position pos:line="958" pos:column="32"/></case> <case pos:line="958" pos:column="33">case <expr><literal type="char" pos:line="958" pos:column="38">'3'<pos:position pos:line="958" pos:column="41"/></literal></expr>:<pos:position pos:line="958" pos:column="42"/></case> <case pos:line="958" pos:column="43">case <expr><literal type="char" pos:line="958" pos:column="48">'4'<pos:position pos:line="958" pos:column="51"/></literal></expr>:<pos:position pos:line="958" pos:column="52"/></case> <case pos:line="958" pos:column="53">case <expr><literal type="char" pos:line="958" pos:column="58">'5'<pos:position pos:line="958" pos:column="61"/></literal></expr>:<pos:position pos:line="958" pos:column="62"/></case>
            <case pos:line="959" pos:column="13">case <expr><literal type="char" pos:line="959" pos:column="18">'6'<pos:position pos:line="959" pos:column="21"/></literal></expr>:<pos:position pos:line="959" pos:column="22"/></case> <case pos:line="959" pos:column="23">case <expr><literal type="char" pos:line="959" pos:column="28">'7'<pos:position pos:line="959" pos:column="31"/></literal></expr>:<pos:position pos:line="959" pos:column="32"/></case> <case pos:line="959" pos:column="33">case <expr><literal type="char" pos:line="959" pos:column="38">'8'<pos:position pos:line="959" pos:column="41"/></literal></expr>:<pos:position pos:line="959" pos:column="42"/></case> <case pos:line="959" pos:column="43">case <expr><literal type="char" pos:line="959" pos:column="48">'9'<pos:position pos:line="959" pos:column="51"/></literal></expr>:<pos:position pos:line="959" pos:column="52"/></case>
              <if pos:line="960" pos:column="15">if <condition pos:line="960" pos:column="18">(<expr><name pos:line="960" pos:column="19">syntax<pos:position pos:line="960" pos:column="25"/></name> <operator pos:line="960" pos:column="26">&amp;<pos:position pos:line="960" pos:column="31"/></operator> <name pos:line="960" pos:column="28">RE_NO_BK_REFS<pos:position pos:line="960" pos:column="41"/></name></expr>)<pos:position pos:line="960" pos:column="42"/></condition><then pos:line="960" pos:column="42">
                <block type="pseudo"><goto pos:line="961" pos:column="17">goto <name pos:line="961" pos:column="22">normal_char<pos:position pos:line="961" pos:column="33"/></name>;<pos:position pos:line="961" pos:column="34"/></goto></block></then></if>

              <expr_stmt><expr><name pos:line="963" pos:column="15">c1<pos:position pos:line="963" pos:column="17"/></name> <operator pos:line="963" pos:column="18">=<pos:position pos:line="963" pos:column="19"/></operator> <name pos:line="963" pos:column="20">c<pos:position pos:line="963" pos:column="21"/></name> <operator pos:line="963" pos:column="22">-<pos:position pos:line="963" pos:column="23"/></operator> <literal type="char" pos:line="963" pos:column="24">'0'<pos:position pos:line="963" pos:column="27"/></literal></expr>;<pos:position pos:line="963" pos:column="28"/></expr_stmt>

              <if pos:line="965" pos:column="15">if <condition pos:line="965" pos:column="18">(<expr><name pos:line="965" pos:column="19">c1<pos:position pos:line="965" pos:column="21"/></name> <operator pos:line="965" pos:column="22">&gt;<pos:position pos:line="965" pos:column="26"/></operator> <name pos:line="965" pos:column="24">regnum<pos:position pos:line="965" pos:column="30"/></name></expr>)<pos:position pos:line="965" pos:column="31"/></condition><then pos:line="965" pos:column="31">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="966" pos:column="17">FREE_STACK_RETURN<pos:position pos:line="966" pos:column="34"/></name> <argument_list pos:line="966" pos:column="35">(<argument><expr><name pos:line="966" pos:column="36">REG_ESUBREG<pos:position pos:line="966" pos:column="47"/></name></expr></argument>)<pos:position pos:line="966" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="966" pos:column="49"/></expr_stmt></block></then></if>

              <comment type="block" pos:line="968" pos:column="15">/* Can't back reference to a subexpression if inside of it.  */</comment>
              <if pos:line="969" pos:column="15">if <condition pos:line="969" pos:column="18">(<expr><call><name pos:line="969" pos:column="19">group_in_compile_stack<pos:position pos:line="969" pos:column="41"/></name> <argument_list pos:line="969" pos:column="42">(<argument><expr><name pos:line="969" pos:column="43">compile_stack<pos:position pos:line="969" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="969" pos:column="58">(<pos:position pos:line="969" pos:column="59"/></operator><name pos:line="969" pos:column="59">regnum_t<pos:position pos:line="969" pos:column="67"/></name><operator pos:line="969" pos:column="67">)<pos:position pos:line="969" pos:column="68"/></operator> <name pos:line="969" pos:column="69">c1<pos:position pos:line="969" pos:column="71"/></name></expr></argument>)<pos:position pos:line="969" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="969" pos:column="73"/></condition><then pos:line="969" pos:column="73">
                <block type="pseudo"><goto pos:line="970" pos:column="17">goto <name pos:line="970" pos:column="22">normal_char<pos:position pos:line="970" pos:column="33"/></name>;<pos:position pos:line="970" pos:column="34"/></goto></block></then></if>

              <expr_stmt><expr><name pos:line="972" pos:column="15">laststart<pos:position pos:line="972" pos:column="24"/></name> <operator pos:line="972" pos:column="25">=<pos:position pos:line="972" pos:column="26"/></operator> <name pos:line="972" pos:column="27">b<pos:position pos:line="972" pos:column="28"/></name></expr>;<pos:position pos:line="972" pos:column="29"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="973" pos:column="15">BUF_PUSH_2<pos:position pos:line="973" pos:column="25"/></name> <argument_list pos:line="973" pos:column="26">(<argument><expr><name pos:line="973" pos:column="27">duplicate<pos:position pos:line="973" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="973" pos:column="38">c1<pos:position pos:line="973" pos:column="40"/></name></expr></argument>)<pos:position pos:line="973" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="973" pos:column="42"/></expr_stmt>
              <break pos:line="974" pos:column="15">break;<pos:position pos:line="974" pos:column="21"/></break>


            <case pos:line="977" pos:column="13">case <expr><literal type="char" pos:line="977" pos:column="18">'+'<pos:position pos:line="977" pos:column="21"/></literal></expr>:<pos:position pos:line="977" pos:column="22"/></case>
            <case pos:line="978" pos:column="13">case <expr><literal type="char" pos:line="978" pos:column="18">'?'<pos:position pos:line="978" pos:column="21"/></literal></expr>:<pos:position pos:line="978" pos:column="22"/></case>
              <if pos:line="979" pos:column="15">if <condition pos:line="979" pos:column="18">(<expr><name pos:line="979" pos:column="19">syntax<pos:position pos:line="979" pos:column="25"/></name> <operator pos:line="979" pos:column="26">&amp;<pos:position pos:line="979" pos:column="31"/></operator> <name pos:line="979" pos:column="28">RE_BK_PLUS_QM<pos:position pos:line="979" pos:column="41"/></name></expr>)<pos:position pos:line="979" pos:column="42"/></condition><then pos:line="979" pos:column="42">
                <block type="pseudo"><goto pos:line="980" pos:column="17">goto <name pos:line="980" pos:column="22">handle_plus<pos:position pos:line="980" pos:column="33"/></name>;<pos:position pos:line="980" pos:column="34"/></goto></block></then>
              <else pos:line="981" pos:column="15">else
                <block type="pseudo"><goto pos:line="982" pos:column="17">goto <name pos:line="982" pos:column="22">normal_backslash<pos:position pos:line="982" pos:column="38"/></name>;<pos:position pos:line="982" pos:column="39"/></goto></block></else></if>

            <default pos:line="984" pos:column="13">default:<pos:position pos:line="984" pos:column="21"/></default>
            <label><name pos:line="985" pos:column="13">normal_backslash<pos:position pos:line="985" pos:column="29"/></name>:<pos:position pos:line="985" pos:column="30"/></label>
              <comment type="block" pos:line="986" pos:column="15">/* You might think it would be useful for \ to mean
                 not to translate; but if we don't translate it
                 it will never match anything.  */</comment>
              <expr_stmt><expr><name pos:line="989" pos:column="15">c<pos:position pos:line="989" pos:column="16"/></name> <operator pos:line="989" pos:column="17">=<pos:position pos:line="989" pos:column="18"/></operator> <call><name pos:line="989" pos:column="19">TRANSLATE<pos:position pos:line="989" pos:column="28"/></name> <argument_list pos:line="989" pos:column="29">(<argument><expr><name pos:line="989" pos:column="30">c<pos:position pos:line="989" pos:column="31"/></name></expr></argument>)<pos:position pos:line="989" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="989" pos:column="33"/></expr_stmt>
              <goto pos:line="990" pos:column="15">goto <name pos:line="990" pos:column="20">normal_char<pos:position pos:line="990" pos:column="31"/></name>;<pos:position pos:line="990" pos:column="32"/></goto>
            }<pos:position pos:line="991" pos:column="14"/></block></switch>
          <break pos:line="992" pos:column="11">break;<pos:position pos:line="992" pos:column="17"/></break>


	<default pos:line="995" pos:column="9">default:<pos:position pos:line="995" pos:column="17"/></default>
        <comment type="block" pos:line="996" pos:column="9">/* Expects the character in `c'.  */</comment>
	<label><name pos:line="997" pos:column="9">normal_char<pos:position pos:line="997" pos:column="20"/></name>:<pos:position pos:line="997" pos:column="21"/></label>
	      <comment type="block" pos:line="998" pos:column="15">/* If no exactn currently being built.  */</comment>
          <if pos:line="999" pos:column="11">if <condition pos:line="999" pos:column="14">(<expr><operator pos:line="999" pos:column="15">!<pos:position pos:line="999" pos:column="16"/></operator><name pos:line="999" pos:column="16">pending_exact<pos:position pos:line="999" pos:column="29"/></name>

              <comment type="block" pos:line="1001" pos:column="15">/* If last exactn not at current position.  */</comment>
              <operator pos:line="1002" pos:column="15">||<pos:position pos:line="1002" pos:column="17"/></operator> <name pos:line="1002" pos:column="18">pending_exact<pos:position pos:line="1002" pos:column="31"/></name> <operator pos:line="1002" pos:column="32">+<pos:position pos:line="1002" pos:column="33"/></operator> <operator pos:line="1002" pos:column="34">*<pos:position pos:line="1002" pos:column="35"/></operator><name pos:line="1002" pos:column="35">pending_exact<pos:position pos:line="1002" pos:column="48"/></name> <operator pos:line="1002" pos:column="49">+<pos:position pos:line="1002" pos:column="50"/></operator> <literal type="number" pos:line="1002" pos:column="51">1<pos:position pos:line="1002" pos:column="52"/></literal> <operator pos:line="1002" pos:column="53">!=<pos:position pos:line="1002" pos:column="55"/></operator> <name pos:line="1002" pos:column="56">b<pos:position pos:line="1002" pos:column="57"/></name>

              <comment type="block" pos:line="1004" pos:column="15">/* We have only one byte following the exactn for the count.  */</comment>
	      <operator pos:line="1005" pos:column="15">||<pos:position pos:line="1005" pos:column="17"/></operator> <operator pos:line="1005" pos:column="18">*<pos:position pos:line="1005" pos:column="19"/></operator><name pos:line="1005" pos:column="19">pending_exact<pos:position pos:line="1005" pos:column="32"/></name> <operator pos:line="1005" pos:column="33">==<pos:position pos:line="1005" pos:column="35"/></operator> <operator pos:line="1005" pos:column="36">(<pos:position pos:line="1005" pos:column="37"/></operator><literal type="number" pos:line="1005" pos:column="37">1<pos:position pos:line="1005" pos:column="38"/></literal> <operator pos:line="1005" pos:column="39">&lt;&lt;<pos:position pos:line="1005" pos:column="47"/></operator> <name pos:line="1005" pos:column="42">BYTEWIDTH<pos:position pos:line="1005" pos:column="51"/></name><operator pos:line="1005" pos:column="51">)<pos:position pos:line="1005" pos:column="52"/></operator> <operator pos:line="1005" pos:column="53">-<pos:position pos:line="1005" pos:column="54"/></operator> <literal type="number" pos:line="1005" pos:column="55">1<pos:position pos:line="1005" pos:column="56"/></literal>

              <comment type="block" pos:line="1007" pos:column="15">/* If followed by a repetition operator.  */</comment>
              <operator pos:line="1008" pos:column="15">||<pos:position pos:line="1008" pos:column="17"/></operator> <operator pos:line="1008" pos:column="18">*<pos:position pos:line="1008" pos:column="19"/></operator><name pos:line="1008" pos:column="19">p<pos:position pos:line="1008" pos:column="20"/></name> <operator pos:line="1008" pos:column="21">==<pos:position pos:line="1008" pos:column="23"/></operator> <literal type="char" pos:line="1008" pos:column="24">'*'<pos:position pos:line="1008" pos:column="27"/></literal> <operator pos:line="1008" pos:column="28">||<pos:position pos:line="1008" pos:column="30"/></operator> <operator pos:line="1008" pos:column="31">*<pos:position pos:line="1008" pos:column="32"/></operator><name pos:line="1008" pos:column="32">p<pos:position pos:line="1008" pos:column="33"/></name> <operator pos:line="1008" pos:column="34">==<pos:position pos:line="1008" pos:column="36"/></operator> <literal type="char" pos:line="1008" pos:column="37">'^'<pos:position pos:line="1008" pos:column="40"/></literal>
	      <operator pos:line="1009" pos:column="15">||<pos:position pos:line="1009" pos:column="17"/></operator> <operator pos:line="1009" pos:column="18">(<pos:position pos:line="1009" pos:column="19"/></operator><ternary><condition><expr><operator pos:line="1009" pos:column="19">(<pos:position pos:line="1009" pos:column="20"/></operator><name pos:line="1009" pos:column="20">syntax<pos:position pos:line="1009" pos:column="26"/></name> <operator pos:line="1009" pos:column="27">&amp;<pos:position pos:line="1009" pos:column="32"/></operator> <name pos:line="1009" pos:column="29">RE_BK_PLUS_QM<pos:position pos:line="1009" pos:column="42"/></name><operator pos:line="1009" pos:column="42">)<pos:position pos:line="1009" pos:column="43"/></operator></expr>
		  ?<pos:position pos:line="1010" pos:column="20"/></condition><then pos:line="1010" pos:column="20"> <expr><operator pos:line="1010" pos:column="21">*<pos:position pos:line="1010" pos:column="22"/></operator><name pos:line="1010" pos:column="22">p<pos:position pos:line="1010" pos:column="23"/></name> <operator pos:line="1010" pos:column="24">==<pos:position pos:line="1010" pos:column="26"/></operator> <literal type="char" pos:line="1010" pos:column="27">'\\'<pos:position pos:line="1010" pos:column="31"/></literal> <operator pos:line="1010" pos:column="32">&amp;&amp;<pos:position pos:line="1010" pos:column="42"/></operator> <operator pos:line="1010" pos:column="35">(<pos:position pos:line="1010" pos:column="36"/></operator><name><name pos:line="1010" pos:column="36">p<pos:position pos:line="1010" pos:column="37"/></name><index pos:line="1010" pos:column="37">[<expr><literal type="number" pos:line="1010" pos:column="38">1<pos:position pos:line="1010" pos:column="39"/></literal></expr>]<pos:position pos:line="1010" pos:column="40"/></index></name> <operator pos:line="1010" pos:column="41">==<pos:position pos:line="1010" pos:column="43"/></operator> <literal type="char" pos:line="1010" pos:column="44">'+'<pos:position pos:line="1010" pos:column="47"/></literal> <operator pos:line="1010" pos:column="48">||<pos:position pos:line="1010" pos:column="50"/></operator> <name><name pos:line="1010" pos:column="51">p<pos:position pos:line="1010" pos:column="52"/></name><index pos:line="1010" pos:column="52">[<expr><literal type="number" pos:line="1010" pos:column="53">1<pos:position pos:line="1010" pos:column="54"/></literal></expr>]<pos:position pos:line="1010" pos:column="55"/></index></name> <operator pos:line="1010" pos:column="56">==<pos:position pos:line="1010" pos:column="58"/></operator> <literal type="char" pos:line="1010" pos:column="59">'?'<pos:position pos:line="1010" pos:column="62"/></literal><operator pos:line="1010" pos:column="62">)<pos:position pos:line="1010" pos:column="63"/></operator></expr>
		  <pos:position pos:line="1011" pos:column="5"/></then><else pos:line="1011" pos:column="19">: <expr><operator pos:line="1011" pos:column="21">(<pos:position pos:line="1011" pos:column="22"/></operator><operator pos:line="1011" pos:column="22">*<pos:position pos:line="1011" pos:column="23"/></operator><name pos:line="1011" pos:column="23">p<pos:position pos:line="1011" pos:column="24"/></name> <operator pos:line="1011" pos:column="25">==<pos:position pos:line="1011" pos:column="27"/></operator> <literal type="char" pos:line="1011" pos:column="28">'+'<pos:position pos:line="1011" pos:column="31"/></literal> <operator pos:line="1011" pos:column="32">||<pos:position pos:line="1011" pos:column="34"/></operator> <operator pos:line="1011" pos:column="35">*<pos:position pos:line="1011" pos:column="36"/></operator><name pos:line="1011" pos:column="36">p<pos:position pos:line="1011" pos:column="37"/></name> <operator pos:line="1011" pos:column="38">==<pos:position pos:line="1011" pos:column="40"/></operator> <literal type="char" pos:line="1011" pos:column="41">'?'<pos:position pos:line="1011" pos:column="44"/></literal><operator pos:line="1011" pos:column="44">)<pos:position pos:line="1011" pos:column="45"/></operator></expr></else></ternary><operator pos:line="1011" pos:column="45">)<pos:position pos:line="1011" pos:column="46"/></operator>
	      <operator pos:line="1012" pos:column="15">||<pos:position pos:line="1012" pos:column="17"/></operator> <operator pos:line="1012" pos:column="18">(<pos:position pos:line="1012" pos:column="19"/></operator><operator pos:line="1012" pos:column="19">(<pos:position pos:line="1012" pos:column="20"/></operator><name pos:line="1012" pos:column="20">syntax<pos:position pos:line="1012" pos:column="26"/></name> <operator pos:line="1012" pos:column="27">&amp;<pos:position pos:line="1012" pos:column="32"/></operator> <name pos:line="1012" pos:column="29">RE_INTERVALS<pos:position pos:line="1012" pos:column="41"/></name><operator pos:line="1012" pos:column="41">)<pos:position pos:line="1012" pos:column="42"/></operator>
                  <operator pos:line="1013" pos:column="19">&amp;&amp;<pos:position pos:line="1013" pos:column="29"/></operator> <operator pos:line="1013" pos:column="22">(<pos:position pos:line="1013" pos:column="23"/></operator><ternary><condition><expr><operator pos:line="1013" pos:column="23">(<pos:position pos:line="1013" pos:column="24"/></operator><name pos:line="1013" pos:column="24">syntax<pos:position pos:line="1013" pos:column="30"/></name> <operator pos:line="1013" pos:column="31">&amp;<pos:position pos:line="1013" pos:column="36"/></operator> <name pos:line="1013" pos:column="33">RE_NO_BK_BRACES<pos:position pos:line="1013" pos:column="48"/></name><operator pos:line="1013" pos:column="48">)<pos:position pos:line="1013" pos:column="49"/></operator></expr>
		      ?<pos:position pos:line="1014" pos:column="24"/></condition><then pos:line="1014" pos:column="24"> <expr><operator pos:line="1014" pos:column="25">*<pos:position pos:line="1014" pos:column="26"/></operator><name pos:line="1014" pos:column="26">p<pos:position pos:line="1014" pos:column="27"/></name> <operator pos:line="1014" pos:column="28">==<pos:position pos:line="1014" pos:column="30"/></operator> <literal type="char" pos:line="1014" pos:column="31">'{'<pos:position pos:line="1014" pos:column="34"/></literal></expr>
                      <pos:position pos:line="1015" pos:column="23"/></then><else pos:line="1015" pos:column="23">: <expr><operator pos:line="1015" pos:column="25">(<pos:position pos:line="1015" pos:column="26"/></operator><name><name pos:line="1015" pos:column="26">p<pos:position pos:line="1015" pos:column="27"/></name><index pos:line="1015" pos:column="27">[<expr><literal type="number" pos:line="1015" pos:column="28">0<pos:position pos:line="1015" pos:column="29"/></literal></expr>]<pos:position pos:line="1015" pos:column="30"/></index></name> <operator pos:line="1015" pos:column="31">==<pos:position pos:line="1015" pos:column="33"/></operator> <literal type="char" pos:line="1015" pos:column="34">'\\'<pos:position pos:line="1015" pos:column="38"/></literal> <operator pos:line="1015" pos:column="39">&amp;&amp;<pos:position pos:line="1015" pos:column="49"/></operator> <name><name pos:line="1015" pos:column="42">p<pos:position pos:line="1015" pos:column="43"/></name><index pos:line="1015" pos:column="43">[<expr><literal type="number" pos:line="1015" pos:column="44">1<pos:position pos:line="1015" pos:column="45"/></literal></expr>]<pos:position pos:line="1015" pos:column="46"/></index></name> <operator pos:line="1015" pos:column="47">==<pos:position pos:line="1015" pos:column="49"/></operator> <literal type="char" pos:line="1015" pos:column="50">'{'<pos:position pos:line="1015" pos:column="53"/></literal><operator pos:line="1015" pos:column="53">)<pos:position pos:line="1015" pos:column="54"/></operator></expr></else></ternary><operator pos:line="1015" pos:column="54">)<pos:position pos:line="1015" pos:column="55"/></operator><operator pos:line="1015" pos:column="55">)<pos:position pos:line="1015" pos:column="56"/></operator></expr>)<pos:position pos:line="1015" pos:column="57"/></condition><then pos:line="1015" pos:column="57">
	    <block pos:line="1016" pos:column="13">{
	      <comment type="block" pos:line="1017" pos:column="15">/* Start building a new exactn.  */</comment>

              <expr_stmt><expr><name pos:line="1019" pos:column="15">laststart<pos:position pos:line="1019" pos:column="24"/></name> <operator pos:line="1019" pos:column="25">=<pos:position pos:line="1019" pos:column="26"/></operator> <name pos:line="1019" pos:column="27">b<pos:position pos:line="1019" pos:column="28"/></name></expr>;<pos:position pos:line="1019" pos:column="29"/></expr_stmt>

	      <expr_stmt><expr><call><name pos:line="1021" pos:column="15">BUF_PUSH_2<pos:position pos:line="1021" pos:column="25"/></name> <argument_list pos:line="1021" pos:column="26">(<argument><expr><name pos:line="1021" pos:column="27">exactn<pos:position pos:line="1021" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1021" pos:column="35">0<pos:position pos:line="1021" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="1021" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1021" pos:column="38"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="1022" pos:column="15">pending_exact<pos:position pos:line="1022" pos:column="28"/></name> <operator pos:line="1022" pos:column="29">=<pos:position pos:line="1022" pos:column="30"/></operator> <name pos:line="1022" pos:column="31">b<pos:position pos:line="1022" pos:column="32"/></name> <operator pos:line="1022" pos:column="33">-<pos:position pos:line="1022" pos:column="34"/></operator> <literal type="number" pos:line="1022" pos:column="35">1<pos:position pos:line="1022" pos:column="36"/></literal></expr>;<pos:position pos:line="1022" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="1023" pos:column="14"/></block></then></if>

	  <expr_stmt><expr><call><name pos:line="1025" pos:column="11">BUF_PUSH<pos:position pos:line="1025" pos:column="19"/></name> <argument_list pos:line="1025" pos:column="20">(<argument><expr><name pos:line="1025" pos:column="21">c<pos:position pos:line="1025" pos:column="22"/></name></expr></argument>)<pos:position pos:line="1025" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="1025" pos:column="24"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="1026" pos:column="11">(<pos:position pos:line="1026" pos:column="12"/></operator><operator pos:line="1026" pos:column="12">*<pos:position pos:line="1026" pos:column="13"/></operator><name pos:line="1026" pos:column="13">pending_exact<pos:position pos:line="1026" pos:column="26"/></name><operator pos:line="1026" pos:column="26">)<pos:position pos:line="1026" pos:column="27"/></operator><operator pos:line="1026" pos:column="27">++<pos:position pos:line="1026" pos:column="29"/></operator></expr>;<pos:position pos:line="1026" pos:column="30"/></expr_stmt>
	  <break pos:line="1027" pos:column="11">break;<pos:position pos:line="1027" pos:column="17"/></break>
        }<pos:position pos:line="1028" pos:column="10"/></block></switch> <comment type="block" pos:line="1028" pos:column="11">/* switch (c) */</comment>
    }<pos:position pos:line="1029" pos:column="6"/></block></while> <comment type="block" pos:line="1029" pos:column="7">/* while p != pend */</comment>


  <comment type="block" pos:line="1032" pos:column="3">/* Through the pattern now.  */</comment>

  <if pos:line="1034" pos:column="3">if <condition pos:line="1034" pos:column="6">(<expr><name pos:line="1034" pos:column="7">fixup_alt_jump<pos:position pos:line="1034" pos:column="21"/></name></expr>)<pos:position pos:line="1034" pos:column="22"/></condition><then pos:line="1034" pos:column="22">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="1035" pos:column="5">STORE_JUMP<pos:position pos:line="1035" pos:column="15"/></name> <argument_list pos:line="1035" pos:column="16">(<argument><expr><name pos:line="1035" pos:column="17">jump_past_alt<pos:position pos:line="1035" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="1035" pos:column="32">fixup_alt_jump<pos:position pos:line="1035" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="1035" pos:column="48">b<pos:position pos:line="1035" pos:column="49"/></name></expr></argument>)<pos:position pos:line="1035" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="1035" pos:column="51"/></expr_stmt></block></then></if>

  <if pos:line="1037" pos:column="3">if <condition pos:line="1037" pos:column="6">(<expr><operator pos:line="1037" pos:column="7">!<pos:position pos:line="1037" pos:column="8"/></operator><name pos:line="1037" pos:column="8">COMPILE_STACK_EMPTY<pos:position pos:line="1037" pos:column="27"/></name></expr>)<pos:position pos:line="1037" pos:column="28"/></condition><then pos:line="1037" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="1038" pos:column="5">FREE_STACK_RETURN<pos:position pos:line="1038" pos:column="22"/></name> <argument_list pos:line="1038" pos:column="23">(<argument><expr><name pos:line="1038" pos:column="24">REG_EPAREN<pos:position pos:line="1038" pos:column="34"/></name></expr></argument>)<pos:position pos:line="1038" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1038" pos:column="36"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="1040" pos:column="3">/* If we don't want backtracking, force success
     the first time we reach the end of the compiled pattern.  */</comment>
  <if pos:line="1042" pos:column="3">if <condition pos:line="1042" pos:column="6">(<expr><name pos:line="1042" pos:column="7">syntax<pos:position pos:line="1042" pos:column="13"/></name> <operator pos:line="1042" pos:column="14">&amp;<pos:position pos:line="1042" pos:column="19"/></operator> <name pos:line="1042" pos:column="16">RE_NO_POSIX_BACKTRACKING<pos:position pos:line="1042" pos:column="40"/></name></expr>)<pos:position pos:line="1042" pos:column="41"/></condition><then pos:line="1042" pos:column="41">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="1043" pos:column="5">BUF_PUSH<pos:position pos:line="1043" pos:column="13"/></name> <argument_list pos:line="1043" pos:column="14">(<argument><expr><name pos:line="1043" pos:column="15">succeed<pos:position pos:line="1043" pos:column="22"/></name></expr></argument>)<pos:position pos:line="1043" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="1043" pos:column="24"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="1045" pos:column="3">free<pos:position pos:line="1045" pos:column="7"/></name> <argument_list pos:line="1045" pos:column="8">(<argument><expr><name><name pos:line="1045" pos:column="9">compile_stack<pos:position pos:line="1045" pos:column="22"/></name><operator pos:line="1045" pos:column="22">.<pos:position pos:line="1045" pos:column="23"/></operator><name pos:line="1045" pos:column="23">stack<pos:position pos:line="1045" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="1045" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="1045" pos:column="30"/></expr_stmt>	<comment type="block" pos:line="1045" pos:column="33">/* __MEM_CHECKED__ */</comment>

  <comment type="block" pos:line="1047" pos:column="3">/* We have succeeded; set the length of the buffer.  */</comment>
  <expr_stmt><expr><name><name pos:line="1048" pos:column="3">bufp<pos:position pos:line="1048" pos:column="7"/></name><operator pos:line="1048" pos:column="7">-&gt;<pos:position pos:line="1048" pos:column="12"/></operator><name pos:line="1048" pos:column="9">used<pos:position pos:line="1048" pos:column="13"/></name></name> <operator pos:line="1048" pos:column="14">=<pos:position pos:line="1048" pos:column="15"/></operator> <name pos:line="1048" pos:column="16">b<pos:position pos:line="1048" pos:column="17"/></name> <operator pos:line="1048" pos:column="18">-<pos:position pos:line="1048" pos:column="19"/></operator> <name><name pos:line="1048" pos:column="20">bufp<pos:position pos:line="1048" pos:column="24"/></name><operator pos:line="1048" pos:column="24">-&gt;<pos:position pos:line="1048" pos:column="29"/></operator><name pos:line="1048" pos:column="26">buffer<pos:position pos:line="1048" pos:column="32"/></name></name></expr>;<pos:position pos:line="1048" pos:column="33"/></expr_stmt>

<cpp:ifdef pos:line="1050" pos:column="1">#<cpp:directive pos:line="1050" pos:column="2">ifdef<pos:position pos:line="1050" pos:column="7"/></cpp:directive> <name pos:line="1050" pos:column="8">DEBUG<pos:position pos:line="1050" pos:column="13"/></name></cpp:ifdef>
  <if pos:line="1051" pos:column="3">if <condition pos:line="1051" pos:column="6">(<expr><name pos:line="1051" pos:column="7">debug<pos:position pos:line="1051" pos:column="12"/></name></expr>)<pos:position pos:line="1051" pos:column="13"/></condition><then pos:line="1051" pos:column="13">
    <block pos:line="1052" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="1053" pos:column="7">DEBUG_PRINT1<pos:position pos:line="1053" pos:column="19"/></name> <argument_list pos:line="1053" pos:column="20">(<argument><expr><literal type="string" pos:line="1053" pos:column="21">"\nCompiled pattern: \n"<pos:position pos:line="1053" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="1053" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="1053" pos:column="47"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1054" pos:column="7">print_compiled_pattern<pos:position pos:line="1054" pos:column="29"/></name> <argument_list pos:line="1054" pos:column="30">(<argument><expr><name pos:line="1054" pos:column="31">bufp<pos:position pos:line="1054" pos:column="35"/></name></expr></argument>)<pos:position pos:line="1054" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1054" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="1055" pos:column="6"/></block></then></if>
<cpp:endif pos:line="1056" pos:column="1">#<cpp:directive pos:line="1056" pos:column="2">endif<pos:position pos:line="1056" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="1056" pos:column="8">/* DEBUG */</comment>

<cpp:ifndef pos:line="1058" pos:column="1">#<cpp:directive pos:line="1058" pos:column="2">ifndef<pos:position pos:line="1058" pos:column="8"/></cpp:directive> <name pos:line="1058" pos:column="9">MATCH_MAY_ALLOCATE<pos:position pos:line="1058" pos:column="27"/></name></cpp:ifndef>
  <comment type="block" pos:line="1059" pos:column="3">/* Initialize the failure stack to the largest possible stack.  This
     isn't necessary unless we're trying to avoid calling alloca in
     the search and match routines.  */</comment>
  <block pos:line="1062" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="1063" pos:column="5">int<pos:position pos:line="1063" pos:column="8"/></name></type> <name pos:line="1063" pos:column="9">num_regs<pos:position pos:line="1063" pos:column="17"/></name> <init pos:line="1063" pos:column="18">= <expr><name><name pos:line="1063" pos:column="20">bufp<pos:position pos:line="1063" pos:column="24"/></name><operator pos:line="1063" pos:column="24">-&gt;<pos:position pos:line="1063" pos:column="29"/></operator><name pos:line="1063" pos:column="26">re_nsub<pos:position pos:line="1063" pos:column="33"/></name></name> <operator pos:line="1063" pos:column="34">+<pos:position pos:line="1063" pos:column="35"/></operator> <literal type="number" pos:line="1063" pos:column="36">1<pos:position pos:line="1063" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="1063" pos:column="38"/></decl_stmt>

    <comment type="block" pos:line="1065" pos:column="5">/* Since DOUBLE_FAIL_STACK refuses to double only if the current size
       is strictly greater than re_max_failures, the largest possible stack
       is 2 * re_max_failures failure points.  */</comment>
    <if pos:line="1068" pos:column="5">if <condition pos:line="1068" pos:column="8">(<expr><name><name pos:line="1068" pos:column="9">fail_stack<pos:position pos:line="1068" pos:column="19"/></name><operator pos:line="1068" pos:column="19">.<pos:position pos:line="1068" pos:column="20"/></operator><name pos:line="1068" pos:column="20">size<pos:position pos:line="1068" pos:column="24"/></name></name> <operator pos:line="1068" pos:column="25">&lt;<pos:position pos:line="1068" pos:column="29"/></operator> <operator pos:line="1068" pos:column="27">(<pos:position pos:line="1068" pos:column="28"/></operator><literal type="number" pos:line="1068" pos:column="28">2<pos:position pos:line="1068" pos:column="29"/></literal> <operator pos:line="1068" pos:column="30">*<pos:position pos:line="1068" pos:column="31"/></operator> <name pos:line="1068" pos:column="32">re_max_failures<pos:position pos:line="1068" pos:column="47"/></name> <operator pos:line="1068" pos:column="48">*<pos:position pos:line="1068" pos:column="49"/></operator> <name pos:line="1068" pos:column="50">MAX_FAILURE_ITEMS<pos:position pos:line="1068" pos:column="67"/></name><operator pos:line="1068" pos:column="67">)<pos:position pos:line="1068" pos:column="68"/></operator></expr>)<pos:position pos:line="1068" pos:column="69"/></condition><then pos:line="1068" pos:column="69">
      <block pos:line="1069" pos:column="7">{
	<expr_stmt><expr><name><name pos:line="1070" pos:column="9">fail_stack<pos:position pos:line="1070" pos:column="19"/></name><operator pos:line="1070" pos:column="19">.<pos:position pos:line="1070" pos:column="20"/></operator><name pos:line="1070" pos:column="20">size<pos:position pos:line="1070" pos:column="24"/></name></name> <operator pos:line="1070" pos:column="25">=<pos:position pos:line="1070" pos:column="26"/></operator> <operator pos:line="1070" pos:column="27">(<pos:position pos:line="1070" pos:column="28"/></operator><literal type="number" pos:line="1070" pos:column="28">2<pos:position pos:line="1070" pos:column="29"/></literal> <operator pos:line="1070" pos:column="30">*<pos:position pos:line="1070" pos:column="31"/></operator> <name pos:line="1070" pos:column="32">re_max_failures<pos:position pos:line="1070" pos:column="47"/></name> <operator pos:line="1070" pos:column="48">*<pos:position pos:line="1070" pos:column="49"/></operator> <name pos:line="1070" pos:column="50">MAX_FAILURE_ITEMS<pos:position pos:line="1070" pos:column="67"/></name><operator pos:line="1070" pos:column="67">)<pos:position pos:line="1070" pos:column="68"/></operator></expr>;<pos:position pos:line="1070" pos:column="69"/></expr_stmt>

<cpp:ifdef pos:line="1072" pos:column="1">#<cpp:directive pos:line="1072" pos:column="2">ifdef<pos:position pos:line="1072" pos:column="7"/></cpp:directive> <name pos:line="1072" pos:column="8">emacs<pos:position pos:line="1072" pos:column="13"/></name></cpp:ifdef>
	<if pos:line="1073" pos:column="9">if <condition pos:line="1073" pos:column="12">(<expr><operator pos:line="1073" pos:column="13">!<pos:position pos:line="1073" pos:column="14"/></operator> <name><name pos:line="1073" pos:column="15">fail_stack<pos:position pos:line="1073" pos:column="25"/></name><operator pos:line="1073" pos:column="25">.<pos:position pos:line="1073" pos:column="26"/></operator><name pos:line="1073" pos:column="26">stack<pos:position pos:line="1073" pos:column="31"/></name></name></expr>)<pos:position pos:line="1073" pos:column="32"/></condition><then pos:line="1073" pos:column="32">
	  <block type="pseudo"><expr_stmt><expr><name><name pos:line="1074" pos:column="11">fail_stack<pos:position pos:line="1074" pos:column="21"/></name><operator pos:line="1074" pos:column="21">.<pos:position pos:line="1074" pos:column="22"/></operator><name pos:line="1074" pos:column="22">stack<pos:position pos:line="1074" pos:column="27"/></name></name>
	    <operator pos:line="1075" pos:column="13">=<pos:position pos:line="1075" pos:column="14"/></operator> <operator pos:line="1075" pos:column="15">(<pos:position pos:line="1075" pos:column="16"/></operator><name pos:line="1075" pos:column="16">fail_stack_elt_t<pos:position pos:line="1075" pos:column="32"/></name> <operator pos:line="1075" pos:column="33">*<pos:position pos:line="1075" pos:column="34"/></operator><operator pos:line="1075" pos:column="34">)<pos:position pos:line="1075" pos:column="35"/></operator> <call><name pos:line="1075" pos:column="36">xmalloc<pos:position pos:line="1075" pos:column="43"/></name> <argument_list pos:line="1075" pos:column="44">(<argument><expr><name><name pos:line="1075" pos:column="45">fail_stack<pos:position pos:line="1075" pos:column="55"/></name><operator pos:line="1075" pos:column="55">.<pos:position pos:line="1075" pos:column="56"/></operator><name pos:line="1075" pos:column="56">size<pos:position pos:line="1075" pos:column="60"/></name></name>
					    <operator pos:line="1076" pos:column="45">*<pos:position pos:line="1076" pos:column="46"/></operator> <sizeof pos:line="1076" pos:column="47">sizeof <argument_list pos:line="1076" pos:column="54">(<argument><expr><name pos:line="1076" pos:column="55">fail_stack_elt_t<pos:position pos:line="1076" pos:column="71"/></name></expr></argument>)<pos:position pos:line="1076" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="1076" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="1076" pos:column="74"/></expr_stmt></block></then>
	<else pos:line="1077" pos:column="9">else
	  <block type="pseudo"><expr_stmt><expr><name><name pos:line="1078" pos:column="11">fail_stack<pos:position pos:line="1078" pos:column="21"/></name><operator pos:line="1078" pos:column="21">.<pos:position pos:line="1078" pos:column="22"/></operator><name pos:line="1078" pos:column="22">stack<pos:position pos:line="1078" pos:column="27"/></name></name>
	    <operator pos:line="1079" pos:column="13">=<pos:position pos:line="1079" pos:column="14"/></operator> <operator pos:line="1079" pos:column="15">(<pos:position pos:line="1079" pos:column="16"/></operator><name pos:line="1079" pos:column="16">fail_stack_elt_t<pos:position pos:line="1079" pos:column="32"/></name> <operator pos:line="1079" pos:column="33">*<pos:position pos:line="1079" pos:column="34"/></operator><operator pos:line="1079" pos:column="34">)<pos:position pos:line="1079" pos:column="35"/></operator> <call><name pos:line="1079" pos:column="36">xrealloc<pos:position pos:line="1079" pos:column="44"/></name> <argument_list pos:line="1079" pos:column="45">(<argument><expr><name><name pos:line="1079" pos:column="46">fail_stack<pos:position pos:line="1079" pos:column="56"/></name><operator pos:line="1079" pos:column="56">.<pos:position pos:line="1079" pos:column="57"/></operator><name pos:line="1079" pos:column="57">stack<pos:position pos:line="1079" pos:column="62"/></name></name></expr></argument>,
					     <argument><expr><operator pos:line="1080" pos:column="46">(<pos:position pos:line="1080" pos:column="47"/></operator><name><name pos:line="1080" pos:column="47">fail_stack<pos:position pos:line="1080" pos:column="57"/></name><operator pos:line="1080" pos:column="57">.<pos:position pos:line="1080" pos:column="58"/></operator><name pos:line="1080" pos:column="58">size<pos:position pos:line="1080" pos:column="62"/></name></name>
					      <operator pos:line="1081" pos:column="47">*<pos:position pos:line="1081" pos:column="48"/></operator> <sizeof pos:line="1081" pos:column="49">sizeof <argument_list pos:line="1081" pos:column="56">(<argument><expr><name pos:line="1081" pos:column="57">fail_stack_elt_t<pos:position pos:line="1081" pos:column="73"/></name></expr></argument>)<pos:position pos:line="1081" pos:column="74"/></argument_list></sizeof><operator pos:line="1081" pos:column="74">)<pos:position pos:line="1081" pos:column="75"/></operator></expr></argument>)<pos:position pos:line="1081" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="1081" pos:column="77"/></expr_stmt></block></else></if>
<cpp:else pos:line="1082" pos:column="1">#<cpp:directive pos:line="1082" pos:column="2">else<pos:position pos:line="1082" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="1082" pos:column="7">/* not emacs */</comment>
	<if pos:line="1083" pos:column="9">if <condition pos:line="1083" pos:column="12">(<expr><operator pos:line="1083" pos:column="13">!<pos:position pos:line="1083" pos:column="14"/></operator> <name><name pos:line="1083" pos:column="15">fail_stack<pos:position pos:line="1083" pos:column="25"/></name><operator pos:line="1083" pos:column="25">.<pos:position pos:line="1083" pos:column="26"/></operator><name pos:line="1083" pos:column="26">stack<pos:position pos:line="1083" pos:column="31"/></name></name></expr>)<pos:position pos:line="1083" pos:column="32"/></condition><then pos:line="1083" pos:column="32">
	  <block type="pseudo"><expr_stmt><expr><name><name pos:line="1084" pos:column="11">fail_stack<pos:position pos:line="1084" pos:column="21"/></name><operator pos:line="1084" pos:column="21">.<pos:position pos:line="1084" pos:column="22"/></operator><name pos:line="1084" pos:column="22">stack<pos:position pos:line="1084" pos:column="27"/></name></name>
	    <operator pos:line="1085" pos:column="13">=<pos:position pos:line="1085" pos:column="14"/></operator> <operator pos:line="1085" pos:column="15">(<pos:position pos:line="1085" pos:column="16"/></operator><name pos:line="1085" pos:column="16">fail_stack_elt_t<pos:position pos:line="1085" pos:column="32"/></name> <operator pos:line="1085" pos:column="33">*<pos:position pos:line="1085" pos:column="34"/></operator><operator pos:line="1085" pos:column="34">)<pos:position pos:line="1085" pos:column="35"/></operator> <call><name pos:line="1085" pos:column="36">malloc<pos:position pos:line="1085" pos:column="42"/></name> <argument_list pos:line="1085" pos:column="43">(<argument><expr><name><name pos:line="1085" pos:column="44">fail_stack<pos:position pos:line="1085" pos:column="54"/></name><operator pos:line="1085" pos:column="54">.<pos:position pos:line="1085" pos:column="55"/></operator><name pos:line="1085" pos:column="55">size<pos:position pos:line="1085" pos:column="59"/></name></name>	<comment type="block" pos:line="1085" pos:column="65">/* __MEM_CHECKED__ */</comment>
					   <operator pos:line="1086" pos:column="44">*<pos:position pos:line="1086" pos:column="45"/></operator> <sizeof pos:line="1086" pos:column="46">sizeof <argument_list pos:line="1086" pos:column="53">(<argument><expr><name pos:line="1086" pos:column="54">fail_stack_elt_t<pos:position pos:line="1086" pos:column="70"/></name></expr></argument>)<pos:position pos:line="1086" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="1086" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="1086" pos:column="73"/></expr_stmt></block></then>
	<else pos:line="1087" pos:column="9">else
	  <block type="pseudo"><expr_stmt><expr><name><name pos:line="1088" pos:column="11">fail_stack<pos:position pos:line="1088" pos:column="21"/></name><operator pos:line="1088" pos:column="21">.<pos:position pos:line="1088" pos:column="22"/></operator><name pos:line="1088" pos:column="22">stack<pos:position pos:line="1088" pos:column="27"/></name></name>
	    <operator pos:line="1089" pos:column="13">=<pos:position pos:line="1089" pos:column="14"/></operator> <operator pos:line="1089" pos:column="15">(<pos:position pos:line="1089" pos:column="16"/></operator><name pos:line="1089" pos:column="16">fail_stack_elt_t<pos:position pos:line="1089" pos:column="32"/></name> <operator pos:line="1089" pos:column="33">*<pos:position pos:line="1089" pos:column="34"/></operator><operator pos:line="1089" pos:column="34">)<pos:position pos:line="1089" pos:column="35"/></operator> <call><name pos:line="1089" pos:column="36">realloc<pos:position pos:line="1089" pos:column="43"/></name> <argument_list pos:line="1089" pos:column="44">(<argument><expr><name><name pos:line="1089" pos:column="45">fail_stack<pos:position pos:line="1089" pos:column="55"/></name><operator pos:line="1089" pos:column="55">.<pos:position pos:line="1089" pos:column="56"/></operator><name pos:line="1089" pos:column="56">stack<pos:position pos:line="1089" pos:column="61"/></name></name></expr></argument>,	<comment type="block" pos:line="1089" pos:column="65">/* __MEM_CHECKED__ */</comment>
					    <argument><expr><operator pos:line="1090" pos:column="45">(<pos:position pos:line="1090" pos:column="46"/></operator><name><name pos:line="1090" pos:column="46">fail_stack<pos:position pos:line="1090" pos:column="56"/></name><operator pos:line="1090" pos:column="56">.<pos:position pos:line="1090" pos:column="57"/></operator><name pos:line="1090" pos:column="57">size<pos:position pos:line="1090" pos:column="61"/></name></name>
					     <operator pos:line="1091" pos:column="46">*<pos:position pos:line="1091" pos:column="47"/></operator> <sizeof pos:line="1091" pos:column="48">sizeof <argument_list pos:line="1091" pos:column="55">(<argument><expr><name pos:line="1091" pos:column="56">fail_stack_elt_t<pos:position pos:line="1091" pos:column="72"/></name></expr></argument>)<pos:position pos:line="1091" pos:column="73"/></argument_list></sizeof><operator pos:line="1091" pos:column="73">)<pos:position pos:line="1091" pos:column="74"/></operator></expr></argument>)<pos:position pos:line="1091" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="1091" pos:column="76"/></expr_stmt></block></else></if>
<cpp:endif pos:line="1092" pos:column="1">#<cpp:directive pos:line="1092" pos:column="2">endif<pos:position pos:line="1092" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="1092" pos:column="8">/* not emacs */</comment>
      }<pos:position pos:line="1093" pos:column="8"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="1095" pos:column="5">regex_grow_registers<pos:position pos:line="1095" pos:column="25"/></name> <argument_list pos:line="1095" pos:column="26">(<argument><expr><name pos:line="1095" pos:column="27">num_regs<pos:position pos:line="1095" pos:column="35"/></name></expr></argument>)<pos:position pos:line="1095" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1095" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="1096" pos:column="4"/></block>
<cpp:endif pos:line="1097" pos:column="1">#<cpp:directive pos:line="1097" pos:column="2">endif<pos:position pos:line="1097" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="1097" pos:column="8">/* not MATCH_MAY_ALLOCATE */</comment>

  <return pos:line="1099" pos:column="3">return <expr><name pos:line="1099" pos:column="10">REG_NOERROR<pos:position pos:line="1099" pos:column="21"/></name></expr>;<pos:position pos:line="1099" pos:column="22"/></return>
}<pos:position pos:line="1100" pos:column="2"/></block></unit>
