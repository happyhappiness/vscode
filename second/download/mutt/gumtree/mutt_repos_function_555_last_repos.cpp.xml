<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_555_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_parse_score<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">BUFFER<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">buf<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">BUFFER<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">s<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">unsigned<pos:position pos:line="1" pos:column="55"/></name> <name pos:line="1" pos:column="56">long<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">data<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">BUFFER<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">err<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">SCORE<pos:position pos:line="3" pos:column="8"/></name> <modifier pos:line="3" pos:column="9">*<pos:position pos:line="3" pos:column="10"/></modifier></type><name pos:line="3" pos:column="10">ptr<pos:position pos:line="3" pos:column="13"/></name></decl>, <modifier pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="16">last<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">pattern<pos:position pos:line="4" pos:column="16"/></name></decl>, <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="19">pc<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">pattern_t<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">pat<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="7" pos:column="3">mutt_extract_token<pos:position pos:line="7" pos:column="21"/></name> <argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">buf<pos:position pos:line="7" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="28">s<pos:position pos:line="7" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="31">0<pos:position pos:line="7" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="34"/></expr_stmt>
  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><operator pos:line="8" pos:column="7">!<pos:position pos:line="8" pos:column="8"/></operator><call><name pos:line="8" pos:column="8">MoreArgs<pos:position pos:line="8" pos:column="16"/></name> <argument_list pos:line="8" pos:column="17">(<argument><expr><name pos:line="8" pos:column="18">s<pos:position pos:line="8" pos:column="19"/></name></expr></argument>)<pos:position pos:line="8" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="21"/></condition><then pos:line="8" pos:column="21">
  <block pos:line="9" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">strfcpy<pos:position pos:line="10" pos:column="12"/></name> <argument_list pos:line="10" pos:column="13">(<argument><expr><name><name pos:line="10" pos:column="14">err<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">-&gt;<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="19">data<pos:position pos:line="10" pos:column="23"/></name></name></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="25">_<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><literal type="string" pos:line="10" pos:column="27">"score: too few arguments"<pos:position pos:line="10" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="56">err<pos:position pos:line="10" pos:column="59"/></name><operator pos:line="10" pos:column="59">-&gt;<pos:position pos:line="10" pos:column="64"/></operator><name pos:line="10" pos:column="61">dsize<pos:position pos:line="10" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="68"/></expr_stmt>
    <return pos:line="11" pos:column="5">return <expr><operator pos:line="11" pos:column="12">(<pos:position pos:line="11" pos:column="13"/></operator><operator pos:line="11" pos:column="13">-<pos:position pos:line="11" pos:column="14"/></operator><literal type="number" pos:line="11" pos:column="14">1<pos:position pos:line="11" pos:column="15"/></literal><operator pos:line="11" pos:column="15">)<pos:position pos:line="11" pos:column="16"/></operator></expr>;<pos:position pos:line="11" pos:column="17"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="13" pos:column="3">pattern<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <name><name pos:line="13" pos:column="13">buf<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">-&gt;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="18">data<pos:position pos:line="13" pos:column="22"/></name></name></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">mutt_buffer_init<pos:position pos:line="14" pos:column="19"/></name> <argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">buf<pos:position pos:line="14" pos:column="24"/></name></expr></argument>)<pos:position pos:line="14" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="15" pos:column="3">mutt_extract_token<pos:position pos:line="15" pos:column="21"/></name> <argument_list pos:line="15" pos:column="22">(<argument><expr><name pos:line="15" pos:column="23">buf<pos:position pos:line="15" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="28">s<pos:position pos:line="15" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="31">0<pos:position pos:line="15" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><call><name pos:line="16" pos:column="7">MoreArgs<pos:position pos:line="16" pos:column="15"/></name> <argument_list pos:line="16" pos:column="16">(<argument><expr><name pos:line="16" pos:column="17">s<pos:position pos:line="16" pos:column="18"/></name></expr></argument>)<pos:position pos:line="16" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="20"/></condition><then pos:line="16" pos:column="20">
  <block pos:line="17" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">FREE<pos:position pos:line="18" pos:column="9"/></name> <argument_list pos:line="18" pos:column="10">(<argument><expr><operator pos:line="18" pos:column="11">&amp;<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="12">pattern<pos:position pos:line="18" pos:column="19"/></name></expr></argument>)<pos:position pos:line="18" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">strfcpy<pos:position pos:line="19" pos:column="12"/></name> <argument_list pos:line="19" pos:column="13">(<argument><expr><name><name pos:line="19" pos:column="14">err<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">-&gt;<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="19">data<pos:position pos:line="19" pos:column="23"/></name></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="25">_<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><literal type="string" pos:line="19" pos:column="27">"score: too many arguments"<pos:position pos:line="19" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="57">err<pos:position pos:line="19" pos:column="60"/></name><operator pos:line="19" pos:column="60">-&gt;<pos:position pos:line="19" pos:column="65"/></operator><name pos:line="19" pos:column="62">dsize<pos:position pos:line="19" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="69"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">(<pos:position pos:line="20" pos:column="13"/></operator><operator pos:line="20" pos:column="13">-<pos:position pos:line="20" pos:column="14"/></operator><literal type="number" pos:line="20" pos:column="14">1<pos:position pos:line="20" pos:column="15"/></literal><operator pos:line="20" pos:column="15">)<pos:position pos:line="20" pos:column="16"/></operator></expr>;<pos:position pos:line="20" pos:column="17"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="23" pos:column="3">/* look for an existing entry and update the value, else add it to the end
     of the list */</comment>
  <for pos:line="25" pos:column="3">for <control pos:line="25" pos:column="7">(<init><expr><name pos:line="25" pos:column="8">ptr<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <name pos:line="25" pos:column="14">Score<pos:position pos:line="25" pos:column="19"/></name></expr><operator pos:line="25" pos:column="19">,<pos:position pos:line="25" pos:column="20"/></operator> <expr><name pos:line="25" pos:column="21">last<pos:position pos:line="25" pos:column="25"/></name> <operator pos:line="25" pos:column="26">=<pos:position pos:line="25" pos:column="27"/></operator> <name pos:line="25" pos:column="28">NULL<pos:position pos:line="25" pos:column="32"/></name></expr>;<pos:position pos:line="25" pos:column="33"/></init> <condition><expr><name pos:line="25" pos:column="34">ptr<pos:position pos:line="25" pos:column="37"/></name></expr>;<pos:position pos:line="25" pos:column="38"/></condition> <incr><expr><name pos:line="25" pos:column="39">last<pos:position pos:line="25" pos:column="43"/></name> <operator pos:line="25" pos:column="44">=<pos:position pos:line="25" pos:column="45"/></operator> <name pos:line="25" pos:column="46">ptr<pos:position pos:line="25" pos:column="49"/></name></expr><operator pos:line="25" pos:column="49">,<pos:position pos:line="25" pos:column="50"/></operator> <expr><name pos:line="25" pos:column="51">ptr<pos:position pos:line="25" pos:column="54"/></name> <operator pos:line="25" pos:column="55">=<pos:position pos:line="25" pos:column="56"/></operator> <name><name pos:line="25" pos:column="57">ptr<pos:position pos:line="25" pos:column="60"/></name><operator pos:line="25" pos:column="60">-&gt;<pos:position pos:line="25" pos:column="65"/></operator><name pos:line="25" pos:column="62">next<pos:position pos:line="25" pos:column="66"/></name></name></expr></incr>)<pos:position pos:line="25" pos:column="67"/></control>
    <block type="pseudo"><if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><call><name pos:line="26" pos:column="9">mutt_strcmp<pos:position pos:line="26" pos:column="20"/></name> <argument_list pos:line="26" pos:column="21">(<argument><expr><name pos:line="26" pos:column="22">pattern<pos:position pos:line="26" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="31">ptr<pos:position pos:line="26" pos:column="34"/></name><operator pos:line="26" pos:column="34">-&gt;<pos:position pos:line="26" pos:column="39"/></operator><name pos:line="26" pos:column="36">str<pos:position pos:line="26" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call> <operator pos:line="26" pos:column="41">==<pos:position pos:line="26" pos:column="43"/></operator> <literal type="number" pos:line="26" pos:column="44">0<pos:position pos:line="26" pos:column="45"/></literal></expr>)<pos:position pos:line="26" pos:column="46"/></condition><then pos:line="26" pos:column="46">
      <block type="pseudo"><break pos:line="27" pos:column="7">break;<pos:position pos:line="27" pos:column="13"/></break></block></then></if></block></for>
  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><operator pos:line="28" pos:column="7">!<pos:position pos:line="28" pos:column="8"/></operator><name pos:line="28" pos:column="8">ptr<pos:position pos:line="28" pos:column="11"/></name></expr>)<pos:position pos:line="28" pos:column="12"/></condition><then pos:line="28" pos:column="12">
  <block pos:line="29" pos:column="3">{
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><operator pos:line="30" pos:column="9">(<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="10">pat<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">=<pos:position pos:line="30" pos:column="15"/></operator> <call><name pos:line="30" pos:column="16">mutt_pattern_comp<pos:position pos:line="30" pos:column="33"/></name> <argument_list pos:line="30" pos:column="34">(<argument><expr><name pos:line="30" pos:column="35">pattern<pos:position pos:line="30" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="44">0<pos:position pos:line="30" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="47">err<pos:position pos:line="30" pos:column="50"/></name></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call><operator pos:line="30" pos:column="51">)<pos:position pos:line="30" pos:column="52"/></operator> <operator pos:line="30" pos:column="53">==<pos:position pos:line="30" pos:column="55"/></operator> <name pos:line="30" pos:column="56">NULL<pos:position pos:line="30" pos:column="60"/></name></expr>)<pos:position pos:line="30" pos:column="61"/></condition><then pos:line="30" pos:column="61">
    <block pos:line="31" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="32" pos:column="7">FREE<pos:position pos:line="32" pos:column="11"/></name> <argument_list pos:line="32" pos:column="12">(<argument><expr><operator pos:line="32" pos:column="13">&amp;<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="14">pattern<pos:position pos:line="32" pos:column="21"/></name></expr></argument>)<pos:position pos:line="32" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="23"/></expr_stmt>
      <return pos:line="33" pos:column="7">return <expr><operator pos:line="33" pos:column="14">(<pos:position pos:line="33" pos:column="15"/></operator><operator pos:line="33" pos:column="15">-<pos:position pos:line="33" pos:column="16"/></operator><literal type="number" pos:line="33" pos:column="16">1<pos:position pos:line="33" pos:column="17"/></literal><operator pos:line="33" pos:column="17">)<pos:position pos:line="33" pos:column="18"/></operator></expr>;<pos:position pos:line="33" pos:column="19"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="35" pos:column="5">ptr<pos:position pos:line="35" pos:column="8"/></name> <operator pos:line="35" pos:column="9">=<pos:position pos:line="35" pos:column="10"/></operator> <call><name pos:line="35" pos:column="11">safe_calloc<pos:position pos:line="35" pos:column="22"/></name> <argument_list pos:line="35" pos:column="23">(<argument><expr><literal type="number" pos:line="35" pos:column="24">1<pos:position pos:line="35" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="27">sizeof <argument_list pos:line="35" pos:column="34">(<argument><expr><name pos:line="35" pos:column="35">SCORE<pos:position pos:line="35" pos:column="40"/></name></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="43"/></expr_stmt>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">last<pos:position pos:line="36" pos:column="13"/></name></expr>)<pos:position pos:line="36" pos:column="14"/></condition><then pos:line="36" pos:column="14">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="37" pos:column="7">last<pos:position pos:line="37" pos:column="11"/></name><operator pos:line="37" pos:column="11">-&gt;<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="13">next<pos:position pos:line="37" pos:column="17"/></name></name> <operator pos:line="37" pos:column="18">=<pos:position pos:line="37" pos:column="19"/></operator> <name pos:line="37" pos:column="20">ptr<pos:position pos:line="37" pos:column="23"/></name></expr>;<pos:position pos:line="37" pos:column="24"/></expr_stmt></block></then>
    <else pos:line="38" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="7">Score<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">=<pos:position pos:line="39" pos:column="14"/></operator> <name pos:line="39" pos:column="15">ptr<pos:position pos:line="39" pos:column="18"/></name></expr>;<pos:position pos:line="39" pos:column="19"/></expr_stmt></block></else></if>
    <expr_stmt><expr><name><name pos:line="40" pos:column="5">ptr<pos:position pos:line="40" pos:column="8"/></name><operator pos:line="40" pos:column="8">-&gt;<pos:position pos:line="40" pos:column="13"/></operator><name pos:line="40" pos:column="10">pat<pos:position pos:line="40" pos:column="13"/></name></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <name pos:line="40" pos:column="16">pat<pos:position pos:line="40" pos:column="19"/></name></expr>;<pos:position pos:line="40" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="41" pos:column="5">ptr<pos:position pos:line="41" pos:column="8"/></name><operator pos:line="41" pos:column="8">-&gt;<pos:position pos:line="41" pos:column="13"/></operator><name pos:line="41" pos:column="10">str<pos:position pos:line="41" pos:column="13"/></name></name> <operator pos:line="41" pos:column="14">=<pos:position pos:line="41" pos:column="15"/></operator> <name pos:line="41" pos:column="16">pattern<pos:position pos:line="41" pos:column="23"/></name></expr>;<pos:position pos:line="41" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="42" pos:column="4"/></block></then> <else pos:line="42" pos:column="5">else
    <comment type="block" pos:line="43" pos:column="5">/* 'buf' arg was cleared and 'pattern' holds the only reference;
     * as here 'ptr' != NULL -&gt; update the value only in which case
     * ptr-&gt;str already has the string, so pattern should be freed.
     */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="5">FREE<pos:position pos:line="47" pos:column="9"/></name> <argument_list pos:line="47" pos:column="10">(<argument><expr><operator pos:line="47" pos:column="11">&amp;<pos:position pos:line="47" pos:column="16"/></operator><name pos:line="47" pos:column="12">pattern<pos:position pos:line="47" pos:column="19"/></name></expr></argument>)<pos:position pos:line="47" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="21"/></expr_stmt></block></else></if>
  <expr_stmt><expr><name pos:line="48" pos:column="3">pc<pos:position pos:line="48" pos:column="5"/></name> <operator pos:line="48" pos:column="6">=<pos:position pos:line="48" pos:column="7"/></operator> <name><name pos:line="48" pos:column="8">buf<pos:position pos:line="48" pos:column="11"/></name><operator pos:line="48" pos:column="11">-&gt;<pos:position pos:line="48" pos:column="16"/></operator><name pos:line="48" pos:column="13">data<pos:position pos:line="48" pos:column="17"/></name></name></expr>;<pos:position pos:line="48" pos:column="18"/></expr_stmt>
  <if pos:line="49" pos:column="3">if <condition pos:line="49" pos:column="6">(<expr><operator pos:line="49" pos:column="7">*<pos:position pos:line="49" pos:column="8"/></operator><name pos:line="49" pos:column="8">pc<pos:position pos:line="49" pos:column="10"/></name> <operator pos:line="49" pos:column="11">==<pos:position pos:line="49" pos:column="13"/></operator> <literal type="char" pos:line="49" pos:column="14">'='<pos:position pos:line="49" pos:column="17"/></literal></expr>)<pos:position pos:line="49" pos:column="18"/></condition><then pos:line="49" pos:column="18">
  <block pos:line="50" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="51" pos:column="5">ptr<pos:position pos:line="51" pos:column="8"/></name><operator pos:line="51" pos:column="8">-&gt;<pos:position pos:line="51" pos:column="13"/></operator><name pos:line="51" pos:column="10">exact<pos:position pos:line="51" pos:column="15"/></name></name> <operator pos:line="51" pos:column="16">=<pos:position pos:line="51" pos:column="17"/></operator> <literal type="number" pos:line="51" pos:column="18">1<pos:position pos:line="51" pos:column="19"/></literal></expr>;<pos:position pos:line="51" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="52" pos:column="5">pc<pos:position pos:line="52" pos:column="7"/></name><operator pos:line="52" pos:column="7">++<pos:position pos:line="52" pos:column="9"/></operator></expr>;<pos:position pos:line="52" pos:column="10"/></expr_stmt>
  }<pos:position pos:line="53" pos:column="4"/></block></then></if>
  <if pos:line="54" pos:column="3">if <condition pos:line="54" pos:column="6">(<expr><call><name pos:line="54" pos:column="7">mutt_atoi<pos:position pos:line="54" pos:column="16"/></name> <argument_list pos:line="54" pos:column="17">(<argument><expr><name pos:line="54" pos:column="18">pc<pos:position pos:line="54" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="22">&amp;<pos:position pos:line="54" pos:column="27"/></operator><name><name pos:line="54" pos:column="23">ptr<pos:position pos:line="54" pos:column="26"/></name><operator pos:line="54" pos:column="26">-&gt;<pos:position pos:line="54" pos:column="31"/></operator><name pos:line="54" pos:column="28">val<pos:position pos:line="54" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="32"/></argument_list></call> <operator pos:line="54" pos:column="33">&lt;<pos:position pos:line="54" pos:column="37"/></operator> <literal type="number" pos:line="54" pos:column="35">0<pos:position pos:line="54" pos:column="36"/></literal></expr>)<pos:position pos:line="54" pos:column="37"/></condition><then pos:line="54" pos:column="37">
  <block pos:line="55" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">FREE<pos:position pos:line="56" pos:column="9"/></name> <argument_list pos:line="56" pos:column="10">(<argument><expr><operator pos:line="56" pos:column="11">&amp;<pos:position pos:line="56" pos:column="16"/></operator><name pos:line="56" pos:column="12">pattern<pos:position pos:line="56" pos:column="19"/></name></expr></argument>)<pos:position pos:line="56" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="57" pos:column="5">strfcpy<pos:position pos:line="57" pos:column="12"/></name> <argument_list pos:line="57" pos:column="13">(<argument><expr><name><name pos:line="57" pos:column="14">err<pos:position pos:line="57" pos:column="17"/></name><operator pos:line="57" pos:column="17">-&gt;<pos:position pos:line="57" pos:column="22"/></operator><name pos:line="57" pos:column="19">data<pos:position pos:line="57" pos:column="23"/></name></name></expr></argument>, <argument><expr><call><name pos:line="57" pos:column="25">_<pos:position pos:line="57" pos:column="26"/></name><argument_list pos:line="57" pos:column="26">(<argument><expr><literal type="string" pos:line="57" pos:column="27">"Error: score: invalid number"<pos:position pos:line="57" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="60">err<pos:position pos:line="57" pos:column="63"/></name><operator pos:line="57" pos:column="63">-&gt;<pos:position pos:line="57" pos:column="68"/></operator><name pos:line="57" pos:column="65">dsize<pos:position pos:line="57" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="72"/></expr_stmt>
    <return pos:line="58" pos:column="5">return <expr><operator pos:line="58" pos:column="12">(<pos:position pos:line="58" pos:column="13"/></operator><operator pos:line="58" pos:column="13">-<pos:position pos:line="58" pos:column="14"/></operator><literal type="number" pos:line="58" pos:column="14">1<pos:position pos:line="58" pos:column="15"/></literal><operator pos:line="58" pos:column="15">)<pos:position pos:line="58" pos:column="16"/></operator></expr>;<pos:position pos:line="58" pos:column="17"/></return>
  }<pos:position pos:line="59" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="60" pos:column="3">set_option<pos:position pos:line="60" pos:column="13"/></name> <argument_list pos:line="60" pos:column="14">(<argument><expr><name pos:line="60" pos:column="15">OPTNEEDRESCORE<pos:position pos:line="60" pos:column="29"/></name></expr></argument>)<pos:position pos:line="60" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="31"/></expr_stmt>
  <return pos:line="61" pos:column="3">return <expr><literal type="number" pos:line="61" pos:column="10">0<pos:position pos:line="61" pos:column="11"/></literal></expr>;<pos:position pos:line="61" pos:column="12"/></return>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
