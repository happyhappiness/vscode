<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_761_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">print_dn_parts<pos:position pos:line="2" pos:column="15"/></name> <parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">FILE<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">fp<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="27">struct<pos:position pos:line="2" pos:column="33"/></name> <name pos:line="2" pos:column="34">dn_array_s<pos:position pos:line="2" pos:column="44"/></name></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">dn<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><specifier pos:line="4" pos:column="3">static<pos:position pos:line="4" pos:column="9"/></specifier> <type><specifier pos:line="4" pos:column="10">const<pos:position pos:line="4" pos:column="15"/></specifier> <name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier> <specifier pos:line="4" pos:column="23">const<pos:position pos:line="4" pos:column="28"/></specifier></type> <name><name pos:line="4" pos:column="29">stdpart<pos:position pos:line="4" pos:column="36"/></name><index pos:line="4" pos:column="36">[]<pos:position pos:line="4" pos:column="38"/></index></name> <init pos:line="4" pos:column="39">= <expr><block pos:line="4" pos:column="41">{
    <expr><literal type="string" pos:line="5" pos:column="5">"CN"<pos:position pos:line="5" pos:column="9"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="11">"OU"<pos:position pos:line="5" pos:column="15"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="17">"O"<pos:position pos:line="5" pos:column="20"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="22">"STREET"<pos:position pos:line="5" pos:column="30"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="32">"L"<pos:position pos:line="5" pos:column="35"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="37">"ST"<pos:position pos:line="5" pos:column="41"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="43">"C"<pos:position pos:line="5" pos:column="46"/></literal></expr>, <expr><name pos:line="5" pos:column="48">NULL<pos:position pos:line="5" pos:column="52"/></name></expr> 
  }<pos:position pos:line="6" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="6" pos:column="5"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">any<pos:position pos:line="7" pos:column="10"/></name><init pos:line="7" pos:column="10">=<expr><literal type="number" pos:line="7" pos:column="11">0<pos:position pos:line="7" pos:column="12"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="14">any2<pos:position pos:line="7" pos:column="18"/></name><init pos:line="7" pos:column="18">=<expr><literal type="number" pos:line="7" pos:column="19">0<pos:position pos:line="7" pos:column="20"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="22">i<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
  
  <for pos:line="9" pos:column="3">for <control pos:line="9" pos:column="7">(<init><expr><name pos:line="9" pos:column="8">i<pos:position pos:line="9" pos:column="9"/></name><operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator><literal type="number" pos:line="9" pos:column="10">0<pos:position pos:line="9" pos:column="11"/></literal></expr>;<pos:position pos:line="9" pos:column="12"/></init> <condition><expr><name><name pos:line="9" pos:column="13">stdpart<pos:position pos:line="9" pos:column="20"/></name><index pos:line="9" pos:column="20">[<expr><name pos:line="9" pos:column="21">i<pos:position pos:line="9" pos:column="22"/></name></expr>]<pos:position pos:line="9" pos:column="23"/></index></name></expr>;<pos:position pos:line="9" pos:column="24"/></condition> <incr><expr><name pos:line="9" pos:column="25">i<pos:position pos:line="9" pos:column="26"/></name><operator pos:line="9" pos:column="26">++<pos:position pos:line="9" pos:column="28"/></operator></expr></incr>)<pos:position pos:line="9" pos:column="29"/></control>
    <block pos:line="10" pos:column="5">{
      <if pos:line="11" pos:column="7">if <condition pos:line="11" pos:column="10">(<expr><name pos:line="11" pos:column="11">any<pos:position pos:line="11" pos:column="14"/></name></expr>)<pos:position pos:line="11" pos:column="15"/></condition><then pos:line="11" pos:column="15">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="9">fputs<pos:position pos:line="12" pos:column="14"/></name> <argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="string" pos:line="12" pos:column="16">", "<pos:position pos:line="12" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="22">fp<pos:position pos:line="12" pos:column="24"/></name></expr></argument>)<pos:position pos:line="12" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name pos:line="13" pos:column="7">any<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <call><name pos:line="13" pos:column="13">print_dn_part<pos:position pos:line="13" pos:column="26"/></name> <argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">fp<pos:position pos:line="13" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="32">dn<pos:position pos:line="13" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="36">stdpart<pos:position pos:line="13" pos:column="43"/></name><index pos:line="13" pos:column="43">[<expr><name pos:line="13" pos:column="44">i<pos:position pos:line="13" pos:column="45"/></name></expr>]<pos:position pos:line="13" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></for>
  <comment type="block" pos:line="15" pos:column="3">/* now print the rest without any specific ordering */</comment>
  <for pos:line="16" pos:column="3">for <control pos:line="16" pos:column="7">(<init pos:line="16" pos:column="8">;<pos:position pos:line="16" pos:column="9"/></init> <condition><expr><name><name pos:line="16" pos:column="10">dn<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">-&gt;<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="14">key<pos:position pos:line="16" pos:column="17"/></name></name></expr>;<pos:position pos:line="16" pos:column="18"/></condition> <incr><expr><name pos:line="16" pos:column="19">dn<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">++<pos:position pos:line="16" pos:column="23"/></operator></expr></incr>)<pos:position pos:line="16" pos:column="24"/></control>
    <block pos:line="17" pos:column="5">{
      <for pos:line="18" pos:column="7">for <control pos:line="18" pos:column="11">(<init><expr><name pos:line="18" pos:column="12">i<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator><literal type="number" pos:line="18" pos:column="14">0<pos:position pos:line="18" pos:column="15"/></literal></expr>;<pos:position pos:line="18" pos:column="16"/></init> <condition><expr><name><name pos:line="18" pos:column="17">stdpart<pos:position pos:line="18" pos:column="24"/></name><index pos:line="18" pos:column="24">[<expr><name pos:line="18" pos:column="25">i<pos:position pos:line="18" pos:column="26"/></name></expr>]<pos:position pos:line="18" pos:column="27"/></index></name></expr>;<pos:position pos:line="18" pos:column="28"/></condition> <incr><expr><name pos:line="18" pos:column="29">i<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">++<pos:position pos:line="18" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="18" pos:column="33"/></control>
        <block pos:line="19" pos:column="9">{
          <if pos:line="20" pos:column="11">if <condition pos:line="20" pos:column="14">(<expr><operator pos:line="20" pos:column="15">!<pos:position pos:line="20" pos:column="16"/></operator><call><name pos:line="20" pos:column="16">strcmp<pos:position pos:line="20" pos:column="22"/></name> <argument_list pos:line="20" pos:column="23">(<argument><expr><name><name pos:line="20" pos:column="24">dn<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">-&gt;<pos:position pos:line="20" pos:column="31"/></operator><name pos:line="20" pos:column="28">key<pos:position pos:line="20" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="33">stdpart<pos:position pos:line="20" pos:column="40"/></name><index pos:line="20" pos:column="40">[<expr><name pos:line="20" pos:column="41">i<pos:position pos:line="20" pos:column="42"/></name></expr>]<pos:position pos:line="20" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="20" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="45"/></condition><then pos:line="20" pos:column="45">
            <block type="pseudo"><break pos:line="21" pos:column="13">break;<pos:position pos:line="21" pos:column="19"/></break></block></then></if>
        }<pos:position pos:line="22" pos:column="10"/></block></for>
      <if pos:line="23" pos:column="7">if <condition pos:line="23" pos:column="10">(<expr><operator pos:line="23" pos:column="11">!<pos:position pos:line="23" pos:column="12"/></operator><name><name pos:line="23" pos:column="12">stdpart<pos:position pos:line="23" pos:column="19"/></name><index pos:line="23" pos:column="19">[<expr><name pos:line="23" pos:column="20">i<pos:position pos:line="23" pos:column="21"/></name></expr>]<pos:position pos:line="23" pos:column="22"/></index></name></expr>)<pos:position pos:line="23" pos:column="23"/></condition><then pos:line="23" pos:column="23">
        <block pos:line="24" pos:column="9">{
          <if pos:line="25" pos:column="11">if <condition pos:line="25" pos:column="14">(<expr><name pos:line="25" pos:column="15">any<pos:position pos:line="25" pos:column="18"/></name></expr>)<pos:position pos:line="25" pos:column="19"/></condition><then pos:line="25" pos:column="19">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="13">fputs<pos:position pos:line="26" pos:column="18"/></name> <argument_list pos:line="26" pos:column="19">(<argument><expr><literal type="string" pos:line="26" pos:column="20">", "<pos:position pos:line="26" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="26">fp<pos:position pos:line="26" pos:column="28"/></name></expr></argument>)<pos:position pos:line="26" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="30"/></expr_stmt></block></then></if>
          <if pos:line="27" pos:column="11">if <condition pos:line="27" pos:column="14">(<expr><operator pos:line="27" pos:column="15">!<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="16">any2<pos:position pos:line="27" pos:column="20"/></name></expr>)<pos:position pos:line="27" pos:column="21"/></condition><then pos:line="27" pos:column="21">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="13">fputs<pos:position pos:line="28" pos:column="18"/></name> <argument_list pos:line="28" pos:column="19">(<argument><expr><literal type="string" pos:line="28" pos:column="20">"("<pos:position pos:line="28" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="25">fp<pos:position pos:line="28" pos:column="27"/></name></expr></argument>)<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt></block></then></if>
          <expr_stmt><expr><name pos:line="29" pos:column="11">any<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">=<pos:position pos:line="29" pos:column="16"/></operator> <call><name pos:line="29" pos:column="17">print_dn_part<pos:position pos:line="29" pos:column="30"/></name> <argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">fp<pos:position pos:line="29" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="36">dn<pos:position pos:line="29" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="40">dn<pos:position pos:line="29" pos:column="42"/></name><operator pos:line="29" pos:column="42">-&gt;<pos:position pos:line="29" pos:column="47"/></operator><name pos:line="29" pos:column="44">key<pos:position pos:line="29" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="49"/></expr_stmt>
          <expr_stmt><expr><name pos:line="30" pos:column="11">any2<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <literal type="number" pos:line="30" pos:column="18">1<pos:position pos:line="30" pos:column="19"/></literal></expr>;<pos:position pos:line="30" pos:column="20"/></expr_stmt>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if>
    }<pos:position pos:line="32" pos:column="6"/></block></for>
  <if pos:line="33" pos:column="3">if <condition pos:line="33" pos:column="6">(<expr><name pos:line="33" pos:column="7">any2<pos:position pos:line="33" pos:column="11"/></name></expr>)<pos:position pos:line="33" pos:column="12"/></condition><then pos:line="33" pos:column="12">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="5">fputs<pos:position pos:line="34" pos:column="10"/></name> <argument_list pos:line="34" pos:column="11">(<argument><expr><literal type="string" pos:line="34" pos:column="12">")"<pos:position pos:line="34" pos:column="15"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="17">fp<pos:position pos:line="34" pos:column="19"/></name></expr></argument>)<pos:position pos:line="34" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="21"/></expr_stmt></block></then></if>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
