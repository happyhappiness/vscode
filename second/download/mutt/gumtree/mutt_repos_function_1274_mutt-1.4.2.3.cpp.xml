<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1274_mutt-1.4.2.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">imap_cmd_start<pos:position pos:line="1" pos:column="19"/></name> <parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">IMAP_DATA<pos:position pos:line="1" pos:column="30"/></name><modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type> <name pos:line="1" pos:column="32">idata<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name><modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type> <name pos:line="1" pos:column="51">cmd<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name><modifier pos:line="3" pos:column="7">*<pos:position pos:line="3" pos:column="8"/></modifier></type> <name pos:line="3" pos:column="9">out<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">outlen<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">rc<pos:position pos:line="5" pos:column="9"/></name></decl>;<pos:position pos:line="5" pos:column="10"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name><name pos:line="7" pos:column="7">idata<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">-&gt;<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="14">status<pos:position pos:line="7" pos:column="20"/></name></name> <operator pos:line="7" pos:column="21">==<pos:position pos:line="7" pos:column="23"/></operator> <name pos:line="7" pos:column="24">IMAP_FATAL<pos:position pos:line="7" pos:column="34"/></name></expr>)<pos:position pos:line="7" pos:column="35"/></condition><then pos:line="7" pos:column="35">
  <block pos:line="8" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">cmd_handle_fatal<pos:position pos:line="9" pos:column="21"/></name> <argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">idata<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>
    <return pos:line="10" pos:column="5">return <expr><name pos:line="10" pos:column="12">IMAP_CMD_BAD<pos:position pos:line="10" pos:column="24"/></name></expr>;<pos:position pos:line="10" pos:column="25"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">cmd_make_sequence<pos:position pos:line="13" pos:column="20"/></name> <argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">idata<pos:position pos:line="13" pos:column="27"/></name></expr></argument>)<pos:position pos:line="13" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>
  <comment type="block" pos:line="14" pos:column="3">/* seq, space, cmd, \r\n\0 */</comment>
  <expr_stmt><expr><name pos:line="15" pos:column="3">outlen<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <call><name pos:line="15" pos:column="12">strlen<pos:position pos:line="15" pos:column="18"/></name> <argument_list pos:line="15" pos:column="19">(<argument><expr><name><name pos:line="15" pos:column="20">idata<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">-&gt;<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="27">cmd<pos:position pos:line="15" pos:column="30"/></name><operator pos:line="15" pos:column="30">.<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="31">seq<pos:position pos:line="15" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call> <operator pos:line="15" pos:column="36">+<pos:position pos:line="15" pos:column="37"/></operator> <call><name pos:line="15" pos:column="38">strlen<pos:position pos:line="15" pos:column="44"/></name> <argument_list pos:line="15" pos:column="45">(<argument><expr><name pos:line="15" pos:column="46">cmd<pos:position pos:line="15" pos:column="49"/></name></expr></argument>)<pos:position pos:line="15" pos:column="50"/></argument_list></call> <operator pos:line="15" pos:column="51">+<pos:position pos:line="15" pos:column="52"/></operator> <literal type="number" pos:line="15" pos:column="53">4<pos:position pos:line="15" pos:column="54"/></literal></expr>;<pos:position pos:line="15" pos:column="55"/></expr_stmt>
  <expr_stmt><expr><name pos:line="16" pos:column="3">out<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <operator pos:line="16" pos:column="9">(<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">char<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></operator><operator pos:line="16" pos:column="15">)<pos:position pos:line="16" pos:column="16"/></operator> <call><name pos:line="16" pos:column="17">safe_malloc<pos:position pos:line="16" pos:column="28"/></name> <argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">outlen<pos:position pos:line="16" pos:column="36"/></name></expr></argument>)<pos:position pos:line="16" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">snprintf<pos:position pos:line="17" pos:column="11"/></name> <argument_list pos:line="17" pos:column="12">(<argument><expr><name pos:line="17" pos:column="13">out<pos:position pos:line="17" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="18">outlen<pos:position pos:line="17" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="26">"%s %s\r\n"<pos:position pos:line="17" pos:column="37"/></literal></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="39">idata<pos:position pos:line="17" pos:column="44"/></name><operator pos:line="17" pos:column="44">-&gt;<pos:position pos:line="17" pos:column="49"/></operator><name pos:line="17" pos:column="46">cmd<pos:position pos:line="17" pos:column="49"/></name><operator pos:line="17" pos:column="49">.<pos:position pos:line="17" pos:column="50"/></operator><name pos:line="17" pos:column="50">seq<pos:position pos:line="17" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="55">cmd<pos:position pos:line="17" pos:column="58"/></name></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="60"/></expr_stmt>

  <expr_stmt><expr><name pos:line="19" pos:column="3">rc<pos:position pos:line="19" pos:column="5"/></name> <operator pos:line="19" pos:column="6">=<pos:position pos:line="19" pos:column="7"/></operator> <call><name pos:line="19" pos:column="8">mutt_socket_write<pos:position pos:line="19" pos:column="25"/></name> <argument_list pos:line="19" pos:column="26">(<argument><expr><name><name pos:line="19" pos:column="27">idata<pos:position pos:line="19" pos:column="32"/></name><operator pos:line="19" pos:column="32">-&gt;<pos:position pos:line="19" pos:column="37"/></operator><name pos:line="19" pos:column="34">conn<pos:position pos:line="19" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="40">out<pos:position pos:line="19" pos:column="43"/></name></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="45"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="21" pos:column="3">FREE<pos:position pos:line="21" pos:column="7"/></name> <argument_list pos:line="21" pos:column="8">(<argument><expr><operator pos:line="21" pos:column="9">&amp;<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="10">out<pos:position pos:line="21" pos:column="13"/></name></expr></argument>)<pos:position pos:line="21" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="15"/></expr_stmt>

  <return pos:line="23" pos:column="3">return <expr><ternary><condition><expr><operator pos:line="23" pos:column="10">(<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">rc<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">&lt;<pos:position pos:line="23" pos:column="18"/></operator> <literal type="number" pos:line="23" pos:column="16">0<pos:position pos:line="23" pos:column="17"/></literal><operator pos:line="23" pos:column="17">)<pos:position pos:line="23" pos:column="18"/></operator></expr> ?<pos:position pos:line="23" pos:column="20"/></condition><then pos:line="23" pos:column="20"> <expr><name pos:line="23" pos:column="21">IMAP_CMD_BAD<pos:position pos:line="23" pos:column="33"/></name></expr> <pos:position pos:line="23" pos:column="34"/></then><else pos:line="23" pos:column="34">: <expr><literal type="number" pos:line="23" pos:column="36">0<pos:position pos:line="23" pos:column="37"/></literal></expr></else></ternary></expr>;<pos:position pos:line="23" pos:column="38"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
