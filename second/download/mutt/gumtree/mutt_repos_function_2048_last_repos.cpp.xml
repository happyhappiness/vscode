<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2048_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">IMAP_DATA<pos:position pos:line="1" pos:column="10"/></name><modifier pos:line="1" pos:column="10">*<pos:position pos:line="1" pos:column="11"/></modifier></type> <name pos:line="1" pos:column="12">imap_conn_find<pos:position pos:line="1" pos:column="26"/></name> <parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">ACCOUNT<pos:position pos:line="1" pos:column="41"/></name><modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type> <name pos:line="1" pos:column="43">account<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">int<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">flags<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CONNECTION<pos:position pos:line="3" pos:column="13"/></name><modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier></type> <name pos:line="3" pos:column="15">conn<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><name pos:line="3" pos:column="22">NULL<pos:position pos:line="3" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">ACCOUNT<pos:position pos:line="4" pos:column="10"/></name><modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type> <name pos:line="4" pos:column="12">creds<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><name pos:line="4" pos:column="20">NULL<pos:position pos:line="4" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">IMAP_DATA<pos:position pos:line="5" pos:column="12"/></name><modifier pos:line="5" pos:column="12">*<pos:position pos:line="5" pos:column="13"/></modifier></type> <name pos:line="5" pos:column="14">idata<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><name pos:line="5" pos:column="22">NULL<pos:position pos:line="5" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
  <expr_stmt><expr><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name> <operator pos:line="6" pos:column="7">new<pos:position pos:line="6" pos:column="10"/></operator> <operator pos:line="6" pos:column="11">=<pos:position pos:line="6" pos:column="12"/></operator> <literal type="number" pos:line="6" pos:column="13">0<pos:position pos:line="6" pos:column="14"/></literal></expr>;<pos:position pos:line="6" pos:column="15"/></expr_stmt>

  <while pos:line="8" pos:column="3">while <condition pos:line="8" pos:column="9">(<expr><operator pos:line="8" pos:column="10">(<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">conn<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">=<pos:position pos:line="8" pos:column="17"/></operator> <call><name pos:line="8" pos:column="18">mutt_conn_find<pos:position pos:line="8" pos:column="32"/></name> <argument_list pos:line="8" pos:column="33">(<argument><expr><name pos:line="8" pos:column="34">conn<pos:position pos:line="8" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="40">account<pos:position pos:line="8" pos:column="47"/></name></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call><operator pos:line="8" pos:column="48">)<pos:position pos:line="8" pos:column="49"/></operator></expr>)<pos:position pos:line="8" pos:column="50"/></condition>
  <block pos:line="9" pos:column="3">{
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">creds<pos:position pos:line="10" pos:column="15"/></name></expr>)<pos:position pos:line="10" pos:column="16"/></condition><then pos:line="10" pos:column="16">
      <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="7">creds<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <operator pos:line="11" pos:column="15">&amp;<pos:position pos:line="11" pos:column="20"/></operator><name><name pos:line="11" pos:column="16">conn<pos:position pos:line="11" pos:column="20"/></name><operator pos:line="11" pos:column="20">-&gt;<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="22">account<pos:position pos:line="11" pos:column="29"/></name></name></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt></block></then>
    <else pos:line="12" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="7">memcpy<pos:position pos:line="13" pos:column="13"/></name> <argument_list pos:line="13" pos:column="14">(<argument><expr><operator pos:line="13" pos:column="15">&amp;<pos:position pos:line="13" pos:column="20"/></operator><name><name pos:line="13" pos:column="16">conn<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">-&gt;<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="22">account<pos:position pos:line="13" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="31">creds<pos:position pos:line="13" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="38">sizeof <argument_list pos:line="13" pos:column="45">(<argument><expr><name pos:line="13" pos:column="46">ACCOUNT<pos:position pos:line="13" pos:column="53"/></name></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="56"/></expr_stmt></block></else></if>

    <expr_stmt><expr><name pos:line="15" pos:column="5">idata<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">=<pos:position pos:line="15" pos:column="12"/></operator> <operator pos:line="15" pos:column="13">(<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">IMAP_DATA<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">*<pos:position pos:line="15" pos:column="24"/></operator><operator pos:line="15" pos:column="24">)<pos:position pos:line="15" pos:column="25"/></operator><name><name pos:line="15" pos:column="25">conn<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">-&gt;<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="31">data<pos:position pos:line="15" pos:column="35"/></name></name></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">flags<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">&amp;<pos:position pos:line="16" pos:column="20"/></operator> <name pos:line="16" pos:column="17">MUTT_IMAP_CONN_NONEW<pos:position pos:line="16" pos:column="37"/></name></expr>)<pos:position pos:line="16" pos:column="38"/></condition><then pos:line="16" pos:column="38">
    <block pos:line="17" pos:column="5">{
      <if pos:line="18" pos:column="7">if <condition pos:line="18" pos:column="10">(<expr><operator pos:line="18" pos:column="11">!<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">idata<pos:position pos:line="18" pos:column="17"/></name></expr>)<pos:position pos:line="18" pos:column="18"/></condition><then pos:line="18" pos:column="18">
      <block pos:line="19" pos:column="7">{
        <comment type="block" pos:line="20" pos:column="9">/* This should only happen if we've come to the end of the list */</comment>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">mutt_socket_free<pos:position pos:line="21" pos:column="25"/></name> <argument_list pos:line="21" pos:column="26">(<argument><expr><name pos:line="21" pos:column="27">conn<pos:position pos:line="21" pos:column="31"/></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
        <return pos:line="22" pos:column="9">return <expr><name pos:line="22" pos:column="16">NULL<pos:position pos:line="22" pos:column="20"/></name></expr>;<pos:position pos:line="22" pos:column="21"/></return>
      }<pos:position pos:line="23" pos:column="8"/></block></then>
      <elseif pos:line="24" pos:column="7">else <if pos:line="24" pos:column="12">if <condition pos:line="24" pos:column="15">(<expr><name><name pos:line="24" pos:column="16">idata<pos:position pos:line="24" pos:column="21"/></name><operator pos:line="24" pos:column="21">-&gt;<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="23">state<pos:position pos:line="24" pos:column="28"/></name></name> <operator pos:line="24" pos:column="29">&lt;<pos:position pos:line="24" pos:column="33"/></operator> <name pos:line="24" pos:column="31">IMAP_AUTHENTICATED<pos:position pos:line="24" pos:column="49"/></name></expr>)<pos:position pos:line="24" pos:column="50"/></condition><then pos:line="24" pos:column="50">
        <block type="pseudo"><continue pos:line="25" pos:column="9">continue;<pos:position pos:line="25" pos:column="18"/></continue></block></then></if></elseif></if>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">flags<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">&amp;<pos:position pos:line="27" pos:column="20"/></operator> <name pos:line="27" pos:column="17">MUTT_IMAP_CONN_NOSELECT<pos:position pos:line="27" pos:column="40"/></name> <operator pos:line="27" pos:column="41">&amp;&amp;<pos:position pos:line="27" pos:column="51"/></operator> <name pos:line="27" pos:column="44">idata<pos:position pos:line="27" pos:column="49"/></name> <operator pos:line="27" pos:column="50">&amp;&amp;<pos:position pos:line="27" pos:column="60"/></operator> <name><name pos:line="27" pos:column="53">idata<pos:position pos:line="27" pos:column="58"/></name><operator pos:line="27" pos:column="58">-&gt;<pos:position pos:line="27" pos:column="63"/></operator><name pos:line="27" pos:column="60">state<pos:position pos:line="27" pos:column="65"/></name></name> <operator pos:line="27" pos:column="66">&gt;=<pos:position pos:line="27" pos:column="71"/></operator> <name pos:line="27" pos:column="69">IMAP_SELECTED<pos:position pos:line="27" pos:column="82"/></name></expr>)<pos:position pos:line="27" pos:column="83"/></condition><then pos:line="27" pos:column="83">
      <block type="pseudo"><continue pos:line="28" pos:column="7">continue;<pos:position pos:line="28" pos:column="16"/></continue></block></then></if>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">idata<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">&amp;&amp;<pos:position pos:line="29" pos:column="25"/></operator> <name><name pos:line="29" pos:column="18">idata<pos:position pos:line="29" pos:column="23"/></name><operator pos:line="29" pos:column="23">-&gt;<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="25">status<pos:position pos:line="29" pos:column="31"/></name></name> <operator pos:line="29" pos:column="32">==<pos:position pos:line="29" pos:column="34"/></operator> <name pos:line="29" pos:column="35">IMAP_FATAL<pos:position pos:line="29" pos:column="45"/></name></expr>)<pos:position pos:line="29" pos:column="46"/></condition><then pos:line="29" pos:column="46">
      <block type="pseudo"><continue pos:line="30" pos:column="7">continue;<pos:position pos:line="30" pos:column="16"/></continue></block></then></if>
    <break pos:line="31" pos:column="5">break;<pos:position pos:line="31" pos:column="11"/></break>
  }<pos:position pos:line="32" pos:column="4"/></block></while>
  <if pos:line="33" pos:column="3">if <condition pos:line="33" pos:column="6">(<expr><operator pos:line="33" pos:column="7">!<pos:position pos:line="33" pos:column="8"/></operator><name pos:line="33" pos:column="8">conn<pos:position pos:line="33" pos:column="12"/></name></expr>)<pos:position pos:line="33" pos:column="13"/></condition><then pos:line="33" pos:column="13">
    <block type="pseudo"><return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">NULL<pos:position pos:line="34" pos:column="16"/></name></expr>;<pos:position pos:line="34" pos:column="17"/></return></block></then></if> <comment type="block" pos:line="34" pos:column="18">/* this happens when the initial connection fails */</comment>

  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><operator pos:line="36" pos:column="7">!<pos:position pos:line="36" pos:column="8"/></operator><name pos:line="36" pos:column="8">idata<pos:position pos:line="36" pos:column="13"/></name></expr>)<pos:position pos:line="36" pos:column="14"/></condition><then pos:line="36" pos:column="14">
  <block pos:line="37" pos:column="3">{
    <comment type="block" pos:line="38" pos:column="5">/* The current connection is a new connection */</comment>
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><operator pos:line="39" pos:column="9">!<pos:position pos:line="39" pos:column="10"/></operator> <operator pos:line="39" pos:column="11">(<pos:position pos:line="39" pos:column="12"/></operator><name pos:line="39" pos:column="12">idata<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">=<pos:position pos:line="39" pos:column="19"/></operator> <call><name pos:line="39" pos:column="20">imap_new_idata<pos:position pos:line="39" pos:column="34"/></name> <argument_list pos:line="39" pos:column="35">()<pos:position pos:line="39" pos:column="37"/></argument_list></call><operator pos:line="39" pos:column="37">)<pos:position pos:line="39" pos:column="38"/></operator></expr>)<pos:position pos:line="39" pos:column="39"/></condition><then pos:line="39" pos:column="39">
    <block pos:line="40" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="41" pos:column="7">mutt_socket_free<pos:position pos:line="41" pos:column="23"/></name> <argument_list pos:line="41" pos:column="24">(<argument><expr><name pos:line="41" pos:column="25">conn<pos:position pos:line="41" pos:column="29"/></name></expr></argument>)<pos:position pos:line="41" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>
      <return pos:line="42" pos:column="7">return <expr><name pos:line="42" pos:column="14">NULL<pos:position pos:line="42" pos:column="18"/></name></expr>;<pos:position pos:line="42" pos:column="19"/></return>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="45" pos:column="5">conn<pos:position pos:line="45" pos:column="9"/></name><operator pos:line="45" pos:column="9">-&gt;<pos:position pos:line="45" pos:column="14"/></operator><name pos:line="45" pos:column="11">data<pos:position pos:line="45" pos:column="15"/></name></name> <operator pos:line="45" pos:column="16">=<pos:position pos:line="45" pos:column="17"/></operator> <name pos:line="45" pos:column="18">idata<pos:position pos:line="45" pos:column="23"/></name></expr>;<pos:position pos:line="45" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="46" pos:column="5">idata<pos:position pos:line="46" pos:column="10"/></name><operator pos:line="46" pos:column="10">-&gt;<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="12">conn<pos:position pos:line="46" pos:column="16"/></name></name> <operator pos:line="46" pos:column="17">=<pos:position pos:line="46" pos:column="18"/></operator> <name pos:line="46" pos:column="19">conn<pos:position pos:line="46" pos:column="23"/></name></expr>;<pos:position pos:line="46" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="47" pos:column="5">new<pos:position pos:line="47" pos:column="8"/></operator> <operator pos:line="47" pos:column="9">=<pos:position pos:line="47" pos:column="10"/></operator> <literal type="number" pos:line="47" pos:column="11">1<pos:position pos:line="47" pos:column="12"/></literal></expr>;<pos:position pos:line="47" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="48" pos:column="4"/></block></then></if>

  <if pos:line="50" pos:column="3">if <condition pos:line="50" pos:column="6">(<expr><name><name pos:line="50" pos:column="7">idata<pos:position pos:line="50" pos:column="12"/></name><operator pos:line="50" pos:column="12">-&gt;<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="14">state<pos:position pos:line="50" pos:column="19"/></name></name> <operator pos:line="50" pos:column="20">==<pos:position pos:line="50" pos:column="22"/></operator> <name pos:line="50" pos:column="23">IMAP_DISCONNECTED<pos:position pos:line="50" pos:column="40"/></name></expr>)<pos:position pos:line="50" pos:column="41"/></condition><then pos:line="50" pos:column="41">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="5">imap_open_connection<pos:position pos:line="51" pos:column="25"/></name> <argument_list pos:line="51" pos:column="26">(<argument><expr><name pos:line="51" pos:column="27">idata<pos:position pos:line="51" pos:column="32"/></name></expr></argument>)<pos:position pos:line="51" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="34"/></expr_stmt></block></then></if>
  <if pos:line="52" pos:column="3">if <condition pos:line="52" pos:column="6">(<expr><name><name pos:line="52" pos:column="7">idata<pos:position pos:line="52" pos:column="12"/></name><operator pos:line="52" pos:column="12">-&gt;<pos:position pos:line="52" pos:column="17"/></operator><name pos:line="52" pos:column="14">state<pos:position pos:line="52" pos:column="19"/></name></name> <operator pos:line="52" pos:column="20">==<pos:position pos:line="52" pos:column="22"/></operator> <name pos:line="52" pos:column="23">IMAP_CONNECTED<pos:position pos:line="52" pos:column="37"/></name></expr>)<pos:position pos:line="52" pos:column="38"/></condition><then pos:line="52" pos:column="38">
  <block pos:line="53" pos:column="3">{
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><operator pos:line="54" pos:column="9">!<pos:position pos:line="54" pos:column="10"/></operator><call><name pos:line="54" pos:column="10">imap_authenticate<pos:position pos:line="54" pos:column="27"/></name> <argument_list pos:line="54" pos:column="28">(<argument><expr><name pos:line="54" pos:column="29">idata<pos:position pos:line="54" pos:column="34"/></name></expr></argument>)<pos:position pos:line="54" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="36"/></condition><then pos:line="54" pos:column="36">
    <block pos:line="55" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="56" pos:column="7">idata<pos:position pos:line="56" pos:column="12"/></name><operator pos:line="56" pos:column="12">-&gt;<pos:position pos:line="56" pos:column="17"/></operator><name pos:line="56" pos:column="14">state<pos:position pos:line="56" pos:column="19"/></name></name> <operator pos:line="56" pos:column="20">=<pos:position pos:line="56" pos:column="21"/></operator> <name pos:line="56" pos:column="22">IMAP_AUTHENTICATED<pos:position pos:line="56" pos:column="40"/></name></expr>;<pos:position pos:line="56" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="57" pos:column="7">FREE<pos:position pos:line="57" pos:column="11"/></name> <argument_list pos:line="57" pos:column="12">(<argument><expr><operator pos:line="57" pos:column="13">&amp;<pos:position pos:line="57" pos:column="18"/></operator><name><name pos:line="57" pos:column="14">idata<pos:position pos:line="57" pos:column="19"/></name><operator pos:line="57" pos:column="19">-&gt;<pos:position pos:line="57" pos:column="24"/></operator><name pos:line="57" pos:column="21">capstr<pos:position pos:line="57" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="58" pos:column="7">new<pos:position pos:line="58" pos:column="10"/></operator> <operator pos:line="58" pos:column="11">=<pos:position pos:line="58" pos:column="12"/></operator> <literal type="number" pos:line="58" pos:column="13">1<pos:position pos:line="58" pos:column="14"/></literal></expr>;<pos:position pos:line="58" pos:column="15"/></expr_stmt>
      <if pos:line="59" pos:column="7">if <condition pos:line="59" pos:column="10">(<expr><name><name pos:line="59" pos:column="11">idata<pos:position pos:line="59" pos:column="16"/></name><operator pos:line="59" pos:column="16">-&gt;<pos:position pos:line="59" pos:column="21"/></operator><name pos:line="59" pos:column="18">conn<pos:position pos:line="59" pos:column="22"/></name><operator pos:line="59" pos:column="22">-&gt;<pos:position pos:line="59" pos:column="27"/></operator><name pos:line="59" pos:column="24">ssf<pos:position pos:line="59" pos:column="27"/></name></name></expr>)<pos:position pos:line="59" pos:column="28"/></condition><then pos:line="59" pos:column="28">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="9">dprint<pos:position pos:line="60" pos:column="15"/></name> <argument_list pos:line="60" pos:column="16">(<argument><expr><literal type="number" pos:line="60" pos:column="17">2<pos:position pos:line="60" pos:column="18"/></literal></expr></argument>, <argument><expr><operator pos:line="60" pos:column="20">(<pos:position pos:line="60" pos:column="21"/></operator><name pos:line="60" pos:column="21">debugfile<pos:position pos:line="60" pos:column="30"/></name><operator pos:line="60" pos:column="30">,<pos:position pos:line="60" pos:column="31"/></operator> <literal type="string" pos:line="60" pos:column="32">"Communication encrypted at %d bits\n"<pos:position pos:line="60" pos:column="70"/></literal><operator pos:line="60" pos:column="70">,<pos:position pos:line="60" pos:column="71"/></operator>
		    <name><name pos:line="61" pos:column="21">idata<pos:position pos:line="61" pos:column="26"/></name><operator pos:line="61" pos:column="26">-&gt;<pos:position pos:line="61" pos:column="31"/></operator><name pos:line="61" pos:column="28">conn<pos:position pos:line="61" pos:column="32"/></name><operator pos:line="61" pos:column="32">-&gt;<pos:position pos:line="61" pos:column="37"/></operator><name pos:line="61" pos:column="34">ssf<pos:position pos:line="61" pos:column="37"/></name></name><operator pos:line="61" pos:column="37">)<pos:position pos:line="61" pos:column="38"/></operator></expr></argument>)<pos:position pos:line="61" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="40"/></expr_stmt></block></then></if>
    }<pos:position pos:line="62" pos:column="6"/></block></then>
    <else pos:line="63" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="7">mutt_account_unsetpass<pos:position pos:line="64" pos:column="29"/></name> <argument_list pos:line="64" pos:column="30">(<argument><expr><operator pos:line="64" pos:column="31">&amp;<pos:position pos:line="64" pos:column="36"/></operator><name><name pos:line="64" pos:column="32">idata<pos:position pos:line="64" pos:column="37"/></name><operator pos:line="64" pos:column="37">-&gt;<pos:position pos:line="64" pos:column="42"/></operator><name pos:line="64" pos:column="39">conn<pos:position pos:line="64" pos:column="43"/></name><operator pos:line="64" pos:column="43">-&gt;<pos:position pos:line="64" pos:column="48"/></operator><name pos:line="64" pos:column="45">account<pos:position pos:line="64" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="54"/></expr_stmt></block></else></if>
  }<pos:position pos:line="65" pos:column="4"/></block></then></if>
  <if pos:line="66" pos:column="3">if <condition pos:line="66" pos:column="6">(<expr><operator pos:line="66" pos:column="7">new<pos:position pos:line="66" pos:column="10"/></operator> <operator pos:line="66" pos:column="11">&amp;&amp;<pos:position pos:line="66" pos:column="21"/></operator> <name><name pos:line="66" pos:column="14">idata<pos:position pos:line="66" pos:column="19"/></name><operator pos:line="66" pos:column="19">-&gt;<pos:position pos:line="66" pos:column="24"/></operator><name pos:line="66" pos:column="21">state<pos:position pos:line="66" pos:column="26"/></name></name> <operator pos:line="66" pos:column="27">==<pos:position pos:line="66" pos:column="29"/></operator> <name pos:line="66" pos:column="30">IMAP_AUTHENTICATED<pos:position pos:line="66" pos:column="48"/></name></expr>)<pos:position pos:line="66" pos:column="49"/></condition><then pos:line="66" pos:column="49">
  <block pos:line="67" pos:column="3">{
    <comment type="block" pos:line="68" pos:column="5">/* capabilities may have changed */</comment>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">imap_exec<pos:position pos:line="69" pos:column="14"/></name> <argument_list pos:line="69" pos:column="15">(<argument><expr><name pos:line="69" pos:column="16">idata<pos:position pos:line="69" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="23">"CAPABILITY"<pos:position pos:line="69" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="37">IMAP_CMD_QUEUE<pos:position pos:line="69" pos:column="51"/></name></expr></argument>)<pos:position pos:line="69" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="53"/></expr_stmt>
    <comment type="block" pos:line="70" pos:column="5">/* enable RFC6855, if the server supports that */</comment>
    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><call><name pos:line="71" pos:column="9">mutt_bit_isset<pos:position pos:line="71" pos:column="23"/></name> <argument_list pos:line="71" pos:column="24">(<argument><expr><name><name pos:line="71" pos:column="25">idata<pos:position pos:line="71" pos:column="30"/></name><operator pos:line="71" pos:column="30">-&gt;<pos:position pos:line="71" pos:column="35"/></operator><name pos:line="71" pos:column="32">capabilities<pos:position pos:line="71" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="46">ENABLE<pos:position pos:line="71" pos:column="52"/></name></expr></argument>)<pos:position pos:line="71" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="54"/></condition><then pos:line="71" pos:column="54">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="7">imap_exec<pos:position pos:line="72" pos:column="16"/></name> <argument_list pos:line="72" pos:column="17">(<argument><expr><name pos:line="72" pos:column="18">idata<pos:position pos:line="72" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="25">"ENABLE UTF8=ACCEPT"<pos:position pos:line="72" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="47">IMAP_CMD_QUEUE<pos:position pos:line="72" pos:column="61"/></name></expr></argument>)<pos:position pos:line="72" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="63"/></expr_stmt></block></then></if>
    <comment type="block" pos:line="73" pos:column="5">/* get root delimiter, '/' as default */</comment>
    <expr_stmt><expr><name><name pos:line="74" pos:column="5">idata<pos:position pos:line="74" pos:column="10"/></name><operator pos:line="74" pos:column="10">-&gt;<pos:position pos:line="74" pos:column="15"/></operator><name pos:line="74" pos:column="12">delim<pos:position pos:line="74" pos:column="17"/></name></name> <operator pos:line="74" pos:column="18">=<pos:position pos:line="74" pos:column="19"/></operator> <literal type="char" pos:line="74" pos:column="20">'/'<pos:position pos:line="74" pos:column="23"/></literal></expr>;<pos:position pos:line="74" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">imap_exec<pos:position pos:line="75" pos:column="14"/></name> <argument_list pos:line="75" pos:column="15">(<argument><expr><name pos:line="75" pos:column="16">idata<pos:position pos:line="75" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="23">"LIST \"\" \"\""<pos:position pos:line="75" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="41">IMAP_CMD_QUEUE<pos:position pos:line="75" pos:column="55"/></name></expr></argument>)<pos:position pos:line="75" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="57"/></expr_stmt>
    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><call><name pos:line="76" pos:column="9">option<pos:position pos:line="76" pos:column="15"/></name> <argument_list pos:line="76" pos:column="16">(<argument><expr><name pos:line="76" pos:column="17">OPTIMAPCHECKSUBSCRIBED<pos:position pos:line="76" pos:column="39"/></name></expr></argument>)<pos:position pos:line="76" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="41"/></condition><then pos:line="76" pos:column="41">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="7">imap_exec<pos:position pos:line="77" pos:column="16"/></name> <argument_list pos:line="77" pos:column="17">(<argument><expr><name pos:line="77" pos:column="18">idata<pos:position pos:line="77" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="25">"LSUB \"\" \"*\""<pos:position pos:line="77" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="44">IMAP_CMD_QUEUE<pos:position pos:line="77" pos:column="58"/></name></expr></argument>)<pos:position pos:line="77" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="60"/></expr_stmt></block></then></if>
    <comment type="block" pos:line="78" pos:column="5">/* we may need the root delimiter before we open a mailbox */</comment>
    <expr_stmt><expr><call><name pos:line="79" pos:column="5">imap_exec<pos:position pos:line="79" pos:column="14"/></name> <argument_list pos:line="79" pos:column="15">(<argument><expr><name pos:line="79" pos:column="16">idata<pos:position pos:line="79" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="23">NULL<pos:position pos:line="79" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="29">IMAP_CMD_FAIL_OK<pos:position pos:line="79" pos:column="45"/></name></expr></argument>)<pos:position pos:line="79" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="47"/></expr_stmt>
  }<pos:position pos:line="80" pos:column="4"/></block></then></if>

  <return pos:line="82" pos:column="3">return <expr><name pos:line="82" pos:column="10">idata<pos:position pos:line="82" pos:column="15"/></name></expr>;<pos:position pos:line="82" pos:column="16"/></return>
}<pos:position pos:line="83" pos:column="2"/></block></function></unit>
