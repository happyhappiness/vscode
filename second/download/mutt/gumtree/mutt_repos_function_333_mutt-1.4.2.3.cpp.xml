<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_333_mutt-1.4.2.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mx_get_magic<pos:position pos:line="1" pos:column="17"/></name> <parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">path<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">stat<pos:position pos:line="3" pos:column="14"/></name></name></type> <name pos:line="3" pos:column="15">st<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">magic<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><literal type="number" pos:line="4" pos:column="15">0<pos:position pos:line="4" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">tmp<pos:position pos:line="5" pos:column="11"/></name><index pos:line="5" pos:column="11">[<expr><name pos:line="5" pos:column="12">_POSIX_PATH_MAX<pos:position pos:line="5" pos:column="27"/></name></expr>]<pos:position pos:line="5" pos:column="28"/></index></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">FILE<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">f<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>

<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">USE_IMAP<pos:position pos:line="8" pos:column="16"/></name></cpp:ifdef>
  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><call><name pos:line="9" pos:column="6">mx_is_imap<pos:position pos:line="9" pos:column="16"/></name><argument_list pos:line="9" pos:column="16">(<argument><expr><name pos:line="9" pos:column="17">path<pos:position pos:line="9" pos:column="21"/></name></expr></argument>)<pos:position pos:line="9" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="23"/></condition><then pos:line="9" pos:column="23">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><name pos:line="10" pos:column="12">M_IMAP<pos:position pos:line="10" pos:column="18"/></name></expr>;<pos:position pos:line="10" pos:column="19"/></return></block></then></if>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="11" pos:column="8">/* USE_IMAP */</comment>

<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">USE_POP<pos:position pos:line="13" pos:column="15"/></name></cpp:ifdef>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><call><name pos:line="14" pos:column="7">mx_is_pop<pos:position pos:line="14" pos:column="16"/></name> <argument_list pos:line="14" pos:column="17">(<argument><expr><name pos:line="14" pos:column="18">path<pos:position pos:line="14" pos:column="22"/></name></expr></argument>)<pos:position pos:line="14" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="24"/></condition><then pos:line="14" pos:column="24">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">M_POP<pos:position pos:line="15" pos:column="17"/></name></expr>;<pos:position pos:line="15" pos:column="18"/></return></block></then></if>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="16" pos:column="8">/* USE_POP */</comment>

  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><call><name pos:line="18" pos:column="7">stat<pos:position pos:line="18" pos:column="11"/></name> <argument_list pos:line="18" pos:column="12">(<argument><expr><name pos:line="18" pos:column="13">path<pos:position pos:line="18" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="19">&amp;<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="20">st<pos:position pos:line="18" pos:column="22"/></name></expr></argument>)<pos:position pos:line="18" pos:column="23"/></argument_list></call> <operator pos:line="18" pos:column="24">==<pos:position pos:line="18" pos:column="26"/></operator> <operator pos:line="18" pos:column="27">-<pos:position pos:line="18" pos:column="28"/></operator><literal type="number" pos:line="18" pos:column="28">1<pos:position pos:line="18" pos:column="29"/></literal></expr>)<pos:position pos:line="18" pos:column="30"/></condition><then pos:line="18" pos:column="30">
  <block pos:line="19" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">dprint<pos:position pos:line="20" pos:column="11"/></name> <argument_list pos:line="20" pos:column="12">(<argument><expr><literal type="number" pos:line="20" pos:column="13">1<pos:position pos:line="20" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="20" pos:column="16">(<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="17">debugfile<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">,<pos:position pos:line="20" pos:column="27"/></operator> <literal type="string" pos:line="20" pos:column="28">"mx_get_magic(): unable to stat %s: %s (errno %d).\n"<pos:position pos:line="20" pos:column="81"/></literal><operator pos:line="20" pos:column="81">,<pos:position pos:line="20" pos:column="82"/></operator>
		<name pos:line="21" pos:column="17">path<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">,<pos:position pos:line="21" pos:column="22"/></operator> <call><name pos:line="21" pos:column="23">strerror<pos:position pos:line="21" pos:column="31"/></name> <argument_list pos:line="21" pos:column="32">(<argument><expr><name pos:line="21" pos:column="33">errno<pos:position pos:line="21" pos:column="38"/></name></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call><operator pos:line="21" pos:column="39">,<pos:position pos:line="21" pos:column="40"/></operator> <name pos:line="21" pos:column="41">errno<pos:position pos:line="21" pos:column="46"/></name><operator pos:line="21" pos:column="46">)<pos:position pos:line="21" pos:column="47"/></operator></expr></argument>)<pos:position pos:line="21" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="49"/></expr_stmt>
    <return pos:line="22" pos:column="5">return <expr><operator pos:line="22" pos:column="12">(<pos:position pos:line="22" pos:column="13"/></operator><operator pos:line="22" pos:column="13">-<pos:position pos:line="22" pos:column="14"/></operator><literal type="number" pos:line="22" pos:column="14">1<pos:position pos:line="22" pos:column="15"/></literal><operator pos:line="22" pos:column="15">)<pos:position pos:line="22" pos:column="16"/></operator></expr>;<pos:position pos:line="22" pos:column="17"/></return>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>

  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><call><name pos:line="25" pos:column="7">S_ISDIR<pos:position pos:line="25" pos:column="14"/></name> <argument_list pos:line="25" pos:column="15">(<argument><expr><name><name pos:line="25" pos:column="16">st<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">.<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="19">st_mode<pos:position pos:line="25" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="28"/></condition><then pos:line="25" pos:column="28">
  <block pos:line="26" pos:column="3">{
    <comment type="block" pos:line="27" pos:column="5">/* check for maildir-style mailbox */</comment>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">snprintf<pos:position pos:line="29" pos:column="13"/></name> <argument_list pos:line="29" pos:column="14">(<argument><expr><name pos:line="29" pos:column="15">tmp<pos:position pos:line="29" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="20">sizeof <argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">tmp<pos:position pos:line="29" pos:column="31"/></name></expr></argument>)<pos:position pos:line="29" pos:column="32"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="34">"%s/cur"<pos:position pos:line="29" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="44">path<pos:position pos:line="29" pos:column="48"/></name></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><call><name pos:line="30" pos:column="9">stat<pos:position pos:line="30" pos:column="13"/></name> <argument_list pos:line="30" pos:column="14">(<argument><expr><name pos:line="30" pos:column="15">tmp<pos:position pos:line="30" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="20">&amp;<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="21">st<pos:position pos:line="30" pos:column="23"/></name></expr></argument>)<pos:position pos:line="30" pos:column="24"/></argument_list></call> <operator pos:line="30" pos:column="25">==<pos:position pos:line="30" pos:column="27"/></operator> <literal type="number" pos:line="30" pos:column="28">0<pos:position pos:line="30" pos:column="29"/></literal> <operator pos:line="30" pos:column="30">&amp;&amp;<pos:position pos:line="30" pos:column="40"/></operator> <call><name pos:line="30" pos:column="33">S_ISDIR<pos:position pos:line="30" pos:column="40"/></name> <argument_list pos:line="30" pos:column="41">(<argument><expr><name><name pos:line="30" pos:column="42">st<pos:position pos:line="30" pos:column="44"/></name><operator pos:line="30" pos:column="44">.<pos:position pos:line="30" pos:column="45"/></operator><name pos:line="30" pos:column="45">st_mode<pos:position pos:line="30" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="54"/></condition><then pos:line="30" pos:column="54">
      <block type="pseudo"><return pos:line="31" pos:column="7">return <expr><operator pos:line="31" pos:column="14">(<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="15">M_MAILDIR<pos:position pos:line="31" pos:column="24"/></name><operator pos:line="31" pos:column="24">)<pos:position pos:line="31" pos:column="25"/></operator></expr>;<pos:position pos:line="31" pos:column="26"/></return></block></then></if>

    <comment type="block" pos:line="33" pos:column="5">/* check for mh-style mailbox */</comment>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">snprintf<pos:position pos:line="35" pos:column="13"/></name> <argument_list pos:line="35" pos:column="14">(<argument><expr><name pos:line="35" pos:column="15">tmp<pos:position pos:line="35" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="20">sizeof <argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">tmp<pos:position pos:line="35" pos:column="31"/></name></expr></argument>)<pos:position pos:line="35" pos:column="32"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="34">"%s/.mh_sequences"<pos:position pos:line="35" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="54">path<pos:position pos:line="35" pos:column="58"/></name></expr></argument>)<pos:position pos:line="35" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="60"/></expr_stmt>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><call><name pos:line="36" pos:column="9">access<pos:position pos:line="36" pos:column="15"/></name> <argument_list pos:line="36" pos:column="16">(<argument><expr><name pos:line="36" pos:column="17">tmp<pos:position pos:line="36" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="22">F_OK<pos:position pos:line="36" pos:column="26"/></name></expr></argument>)<pos:position pos:line="36" pos:column="27"/></argument_list></call> <operator pos:line="36" pos:column="28">==<pos:position pos:line="36" pos:column="30"/></operator> <literal type="number" pos:line="36" pos:column="31">0<pos:position pos:line="36" pos:column="32"/></literal></expr>)<pos:position pos:line="36" pos:column="33"/></condition><then pos:line="36" pos:column="33">
      <block type="pseudo"><return pos:line="37" pos:column="7">return <expr><operator pos:line="37" pos:column="14">(<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="15">M_MH<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">)<pos:position pos:line="37" pos:column="20"/></operator></expr>;<pos:position pos:line="37" pos:column="21"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="39" pos:column="5">snprintf<pos:position pos:line="39" pos:column="13"/></name> <argument_list pos:line="39" pos:column="14">(<argument><expr><name pos:line="39" pos:column="15">tmp<pos:position pos:line="39" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="20">sizeof <argument_list pos:line="39" pos:column="27">(<argument><expr><name pos:line="39" pos:column="28">tmp<pos:position pos:line="39" pos:column="31"/></name></expr></argument>)<pos:position pos:line="39" pos:column="32"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="34">"%s/.xmhcache"<pos:position pos:line="39" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="50">path<pos:position pos:line="39" pos:column="54"/></name></expr></argument>)<pos:position pos:line="39" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="56"/></expr_stmt>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><call><name pos:line="40" pos:column="9">access<pos:position pos:line="40" pos:column="15"/></name> <argument_list pos:line="40" pos:column="16">(<argument><expr><name pos:line="40" pos:column="17">tmp<pos:position pos:line="40" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="22">F_OK<pos:position pos:line="40" pos:column="26"/></name></expr></argument>)<pos:position pos:line="40" pos:column="27"/></argument_list></call> <operator pos:line="40" pos:column="28">==<pos:position pos:line="40" pos:column="30"/></operator> <literal type="number" pos:line="40" pos:column="31">0<pos:position pos:line="40" pos:column="32"/></literal></expr>)<pos:position pos:line="40" pos:column="33"/></condition><then pos:line="40" pos:column="33">
      <block type="pseudo"><return pos:line="41" pos:column="7">return <expr><operator pos:line="41" pos:column="14">(<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="15">M_MH<pos:position pos:line="41" pos:column="19"/></name><operator pos:line="41" pos:column="19">)<pos:position pos:line="41" pos:column="20"/></operator></expr>;<pos:position pos:line="41" pos:column="21"/></return></block></then></if>
    
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">snprintf<pos:position pos:line="43" pos:column="13"/></name> <argument_list pos:line="43" pos:column="14">(<argument><expr><name pos:line="43" pos:column="15">tmp<pos:position pos:line="43" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="20">sizeof <argument_list pos:line="43" pos:column="27">(<argument><expr><name pos:line="43" pos:column="28">tmp<pos:position pos:line="43" pos:column="31"/></name></expr></argument>)<pos:position pos:line="43" pos:column="32"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="34">"%s/.mew_cache"<pos:position pos:line="43" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="51">path<pos:position pos:line="43" pos:column="55"/></name></expr></argument>)<pos:position pos:line="43" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="57"/></expr_stmt>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><call><name pos:line="44" pos:column="9">access<pos:position pos:line="44" pos:column="15"/></name> <argument_list pos:line="44" pos:column="16">(<argument><expr><name pos:line="44" pos:column="17">tmp<pos:position pos:line="44" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="22">F_OK<pos:position pos:line="44" pos:column="26"/></name></expr></argument>)<pos:position pos:line="44" pos:column="27"/></argument_list></call> <operator pos:line="44" pos:column="28">==<pos:position pos:line="44" pos:column="30"/></operator> <literal type="number" pos:line="44" pos:column="31">0<pos:position pos:line="44" pos:column="32"/></literal></expr>)<pos:position pos:line="44" pos:column="33"/></condition><then pos:line="44" pos:column="33">
      <block type="pseudo"><return pos:line="45" pos:column="7">return <expr><operator pos:line="45" pos:column="14">(<pos:position pos:line="45" pos:column="15"/></operator><name pos:line="45" pos:column="15">M_MH<pos:position pos:line="45" pos:column="19"/></name><operator pos:line="45" pos:column="19">)<pos:position pos:line="45" pos:column="20"/></operator></expr>;<pos:position pos:line="45" pos:column="21"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="47" pos:column="5">snprintf<pos:position pos:line="47" pos:column="13"/></name> <argument_list pos:line="47" pos:column="14">(<argument><expr><name pos:line="47" pos:column="15">tmp<pos:position pos:line="47" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="20">sizeof <argument_list pos:line="47" pos:column="27">(<argument><expr><name pos:line="47" pos:column="28">tmp<pos:position pos:line="47" pos:column="31"/></name></expr></argument>)<pos:position pos:line="47" pos:column="32"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="34">"%s/.mew-cache"<pos:position pos:line="47" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="51">path<pos:position pos:line="47" pos:column="55"/></name></expr></argument>)<pos:position pos:line="47" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="57"/></expr_stmt>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><call><name pos:line="48" pos:column="9">access<pos:position pos:line="48" pos:column="15"/></name> <argument_list pos:line="48" pos:column="16">(<argument><expr><name pos:line="48" pos:column="17">tmp<pos:position pos:line="48" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="22">F_OK<pos:position pos:line="48" pos:column="26"/></name></expr></argument>)<pos:position pos:line="48" pos:column="27"/></argument_list></call> <operator pos:line="48" pos:column="28">==<pos:position pos:line="48" pos:column="30"/></operator> <literal type="number" pos:line="48" pos:column="31">0<pos:position pos:line="48" pos:column="32"/></literal></expr>)<pos:position pos:line="48" pos:column="33"/></condition><then pos:line="48" pos:column="33">
      <block type="pseudo"><return pos:line="49" pos:column="7">return <expr><operator pos:line="49" pos:column="14">(<pos:position pos:line="49" pos:column="15"/></operator><name pos:line="49" pos:column="15">M_MH<pos:position pos:line="49" pos:column="19"/></name><operator pos:line="49" pos:column="19">)<pos:position pos:line="49" pos:column="20"/></operator></expr>;<pos:position pos:line="49" pos:column="21"/></return></block></then></if>

    <comment type="block" pos:line="51" pos:column="5">/* 
     * ok, this isn't an mh folder, but mh mode can be used to read
     * Usenet news from the spool. ;-) 
     */</comment>

    <expr_stmt><expr><call><name pos:line="56" pos:column="5">snprintf<pos:position pos:line="56" pos:column="13"/></name> <argument_list pos:line="56" pos:column="14">(<argument><expr><name pos:line="56" pos:column="15">tmp<pos:position pos:line="56" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="20">sizeof <argument_list pos:line="56" pos:column="27">(<argument><expr><name pos:line="56" pos:column="28">tmp<pos:position pos:line="56" pos:column="31"/></name></expr></argument>)<pos:position pos:line="56" pos:column="32"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="34">"%s/.overview"<pos:position pos:line="56" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="50">path<pos:position pos:line="56" pos:column="54"/></name></expr></argument>)<pos:position pos:line="56" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="56"/></expr_stmt>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><call><name pos:line="57" pos:column="9">access<pos:position pos:line="57" pos:column="15"/></name> <argument_list pos:line="57" pos:column="16">(<argument><expr><name pos:line="57" pos:column="17">tmp<pos:position pos:line="57" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="22">F_OK<pos:position pos:line="57" pos:column="26"/></name></expr></argument>)<pos:position pos:line="57" pos:column="27"/></argument_list></call> <operator pos:line="57" pos:column="28">==<pos:position pos:line="57" pos:column="30"/></operator> <literal type="number" pos:line="57" pos:column="31">0<pos:position pos:line="57" pos:column="32"/></literal></expr>)<pos:position pos:line="57" pos:column="33"/></condition><then pos:line="57" pos:column="33">
      <block type="pseudo"><return pos:line="58" pos:column="7">return <expr><operator pos:line="58" pos:column="14">(<pos:position pos:line="58" pos:column="15"/></operator><name pos:line="58" pos:column="15">M_MH<pos:position pos:line="58" pos:column="19"/></name><operator pos:line="58" pos:column="19">)<pos:position pos:line="58" pos:column="20"/></operator></expr>;<pos:position pos:line="58" pos:column="21"/></return></block></then></if>

  }<pos:position pos:line="60" pos:column="4"/></block></then>
  <elseif pos:line="61" pos:column="3">else <if pos:line="61" pos:column="8">if <condition pos:line="61" pos:column="11">(<expr><name><name pos:line="61" pos:column="12">st<pos:position pos:line="61" pos:column="14"/></name><operator pos:line="61" pos:column="14">.<pos:position pos:line="61" pos:column="15"/></operator><name pos:line="61" pos:column="15">st_size<pos:position pos:line="61" pos:column="22"/></name></name> <operator pos:line="61" pos:column="23">==<pos:position pos:line="61" pos:column="25"/></operator> <literal type="number" pos:line="61" pos:column="26">0<pos:position pos:line="61" pos:column="27"/></literal></expr>)<pos:position pos:line="61" pos:column="28"/></condition><then pos:line="61" pos:column="28">
  <block pos:line="62" pos:column="3">{
    <comment type="block" pos:line="63" pos:column="5">/* hard to tell what zero-length files are, so assume the default magic */</comment>
    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><name pos:line="64" pos:column="9">DefaultMagic<pos:position pos:line="64" pos:column="21"/></name> <operator pos:line="64" pos:column="22">==<pos:position pos:line="64" pos:column="24"/></operator> <name pos:line="64" pos:column="25">M_MBOX<pos:position pos:line="64" pos:column="31"/></name> <operator pos:line="64" pos:column="32">||<pos:position pos:line="64" pos:column="34"/></operator> <name pos:line="64" pos:column="35">DefaultMagic<pos:position pos:line="64" pos:column="47"/></name> <operator pos:line="64" pos:column="48">==<pos:position pos:line="64" pos:column="50"/></operator> <name pos:line="64" pos:column="51">M_MMDF<pos:position pos:line="64" pos:column="57"/></name></expr>)<pos:position pos:line="64" pos:column="58"/></condition><then pos:line="64" pos:column="58">
      <block type="pseudo"><return pos:line="65" pos:column="7">return <expr><operator pos:line="65" pos:column="14">(<pos:position pos:line="65" pos:column="15"/></operator><name pos:line="65" pos:column="15">DefaultMagic<pos:position pos:line="65" pos:column="27"/></name><operator pos:line="65" pos:column="27">)<pos:position pos:line="65" pos:column="28"/></operator></expr>;<pos:position pos:line="65" pos:column="29"/></return></block></then>
    <else pos:line="66" pos:column="5">else
      <block type="pseudo"><return pos:line="67" pos:column="7">return <expr><operator pos:line="67" pos:column="14">(<pos:position pos:line="67" pos:column="15"/></operator><name pos:line="67" pos:column="15">M_MBOX<pos:position pos:line="67" pos:column="21"/></name><operator pos:line="67" pos:column="21">)<pos:position pos:line="67" pos:column="22"/></operator></expr>;<pos:position pos:line="67" pos:column="23"/></return></block></else></if>
  }<pos:position pos:line="68" pos:column="4"/></block></then></if></elseif>
  <elseif pos:line="69" pos:column="3">else <if pos:line="69" pos:column="8">if <condition pos:line="69" pos:column="11">(<expr><operator pos:line="69" pos:column="12">(<pos:position pos:line="69" pos:column="13"/></operator><name pos:line="69" pos:column="13">f<pos:position pos:line="69" pos:column="14"/></name> <operator pos:line="69" pos:column="15">=<pos:position pos:line="69" pos:column="16"/></operator> <call><name pos:line="69" pos:column="17">fopen<pos:position pos:line="69" pos:column="22"/></name> <argument_list pos:line="69" pos:column="23">(<argument><expr><name pos:line="69" pos:column="24">path<pos:position pos:line="69" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="30">"r"<pos:position pos:line="69" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="34"/></argument_list></call><operator pos:line="69" pos:column="34">)<pos:position pos:line="69" pos:column="35"/></operator> <operator pos:line="69" pos:column="36">!=<pos:position pos:line="69" pos:column="38"/></operator> <name pos:line="69" pos:column="39">NULL<pos:position pos:line="69" pos:column="43"/></name></expr>)<pos:position pos:line="69" pos:column="44"/></condition><then pos:line="69" pos:column="44">
  <block pos:line="70" pos:column="3">{
<cpp:ifndef pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">ifndef<pos:position pos:line="71" pos:column="8"/></cpp:directive> <name pos:line="71" pos:column="9">BUFFY_SIZE<pos:position pos:line="71" pos:column="19"/></name></cpp:ifndef>
    <decl_stmt><decl><type><name><name pos:line="72" pos:column="5">struct<pos:position pos:line="72" pos:column="11"/></name> <name pos:line="72" pos:column="12">utimbuf<pos:position pos:line="72" pos:column="19"/></name></name></type> <name pos:line="72" pos:column="20">times<pos:position pos:line="72" pos:column="25"/></name></decl>;<pos:position pos:line="72" pos:column="26"/></decl_stmt>
<cpp:endif pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">endif<pos:position pos:line="73" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="75" pos:column="5">fgets<pos:position pos:line="75" pos:column="10"/></name> <argument_list pos:line="75" pos:column="11">(<argument><expr><name pos:line="75" pos:column="12">tmp<pos:position pos:line="75" pos:column="15"/></name></expr></argument>, <argument><expr><sizeof pos:line="75" pos:column="17">sizeof <argument_list pos:line="75" pos:column="24">(<argument><expr><name pos:line="75" pos:column="25">tmp<pos:position pos:line="75" pos:column="28"/></name></expr></argument>)<pos:position pos:line="75" pos:column="29"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="75" pos:column="31">f<pos:position pos:line="75" pos:column="32"/></name></expr></argument>)<pos:position pos:line="75" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="34"/></expr_stmt>
    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><call><name pos:line="76" pos:column="9">mutt_strncmp<pos:position pos:line="76" pos:column="21"/></name> <argument_list pos:line="76" pos:column="22">(<argument><expr><literal type="string" pos:line="76" pos:column="23">"From "<pos:position pos:line="76" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="32">tmp<pos:position pos:line="76" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="37">5<pos:position pos:line="76" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="39"/></argument_list></call> <operator pos:line="76" pos:column="40">==<pos:position pos:line="76" pos:column="42"/></operator> <literal type="number" pos:line="76" pos:column="43">0<pos:position pos:line="76" pos:column="44"/></literal></expr>)<pos:position pos:line="76" pos:column="45"/></condition><then pos:line="76" pos:column="45">
      <block type="pseudo"><expr_stmt><expr><name pos:line="77" pos:column="7">magic<pos:position pos:line="77" pos:column="12"/></name> <operator pos:line="77" pos:column="13">=<pos:position pos:line="77" pos:column="14"/></operator> <name pos:line="77" pos:column="15">M_MBOX<pos:position pos:line="77" pos:column="21"/></name></expr>;<pos:position pos:line="77" pos:column="22"/></expr_stmt></block></then>
    <elseif pos:line="78" pos:column="5">else <if pos:line="78" pos:column="10">if <condition pos:line="78" pos:column="13">(<expr><call><name pos:line="78" pos:column="14">mutt_strcmp<pos:position pos:line="78" pos:column="25"/></name> <argument_list pos:line="78" pos:column="26">(<argument><expr><name pos:line="78" pos:column="27">MMDF_SEP<pos:position pos:line="78" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="37">tmp<pos:position pos:line="78" pos:column="40"/></name></expr></argument>)<pos:position pos:line="78" pos:column="41"/></argument_list></call> <operator pos:line="78" pos:column="42">==<pos:position pos:line="78" pos:column="44"/></operator> <literal type="number" pos:line="78" pos:column="45">0<pos:position pos:line="78" pos:column="46"/></literal></expr>)<pos:position pos:line="78" pos:column="47"/></condition><then pos:line="78" pos:column="47">
      <block type="pseudo"><expr_stmt><expr><name pos:line="79" pos:column="7">magic<pos:position pos:line="79" pos:column="12"/></name> <operator pos:line="79" pos:column="13">=<pos:position pos:line="79" pos:column="14"/></operator> <name pos:line="79" pos:column="15">M_MMDF<pos:position pos:line="79" pos:column="21"/></name></expr>;<pos:position pos:line="79" pos:column="22"/></expr_stmt></block></then></if></elseif></if>
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">safe_fclose<pos:position pos:line="80" pos:column="16"/></name> <argument_list pos:line="80" pos:column="17">(<argument><expr><operator pos:line="80" pos:column="18">&amp;<pos:position pos:line="80" pos:column="23"/></operator><name pos:line="80" pos:column="19">f<pos:position pos:line="80" pos:column="20"/></name></expr></argument>)<pos:position pos:line="80" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="22"/></expr_stmt>
<cpp:ifndef pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">ifndef<pos:position pos:line="81" pos:column="8"/></cpp:directive> <name pos:line="81" pos:column="9">BUFFY_SIZE<pos:position pos:line="81" pos:column="19"/></name></cpp:ifndef>
    <comment type="block" pos:line="82" pos:column="5">/* need to restore the times here, the file was not really accessed,
     * only the type was accessed.  This is important, because detection
     * of "new mail" depends on those times set correctly.
     */</comment>
    <expr_stmt><expr><name><name pos:line="86" pos:column="5">times<pos:position pos:line="86" pos:column="10"/></name><operator pos:line="86" pos:column="10">.<pos:position pos:line="86" pos:column="11"/></operator><name pos:line="86" pos:column="11">actime<pos:position pos:line="86" pos:column="17"/></name></name> <operator pos:line="86" pos:column="18">=<pos:position pos:line="86" pos:column="19"/></operator> <name><name pos:line="86" pos:column="20">st<pos:position pos:line="86" pos:column="22"/></name><operator pos:line="86" pos:column="22">.<pos:position pos:line="86" pos:column="23"/></operator><name pos:line="86" pos:column="23">st_atime<pos:position pos:line="86" pos:column="31"/></name></name></expr>;<pos:position pos:line="86" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="87" pos:column="5">times<pos:position pos:line="87" pos:column="10"/></name><operator pos:line="87" pos:column="10">.<pos:position pos:line="87" pos:column="11"/></operator><name pos:line="87" pos:column="11">modtime<pos:position pos:line="87" pos:column="18"/></name></name> <operator pos:line="87" pos:column="19">=<pos:position pos:line="87" pos:column="20"/></operator> <name><name pos:line="87" pos:column="21">st<pos:position pos:line="87" pos:column="23"/></name><operator pos:line="87" pos:column="23">.<pos:position pos:line="87" pos:column="24"/></operator><name pos:line="87" pos:column="24">st_mtime<pos:position pos:line="87" pos:column="32"/></name></name></expr>;<pos:position pos:line="87" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="88" pos:column="5">utime<pos:position pos:line="88" pos:column="10"/></name> <argument_list pos:line="88" pos:column="11">(<argument><expr><name pos:line="88" pos:column="12">path<pos:position pos:line="88" pos:column="16"/></name></expr></argument>, <argument><expr><operator pos:line="88" pos:column="18">&amp;<pos:position pos:line="88" pos:column="23"/></operator><name pos:line="88" pos:column="19">times<pos:position pos:line="88" pos:column="24"/></name></expr></argument>)<pos:position pos:line="88" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">endif<pos:position pos:line="89" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="90" pos:column="4"/></block></then></if></elseif>
  <else pos:line="91" pos:column="3">else
  <block pos:line="92" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="93" pos:column="5">dprint<pos:position pos:line="93" pos:column="11"/></name> <argument_list pos:line="93" pos:column="12">(<argument><expr><literal type="number" pos:line="93" pos:column="13">1<pos:position pos:line="93" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="93" pos:column="16">(<pos:position pos:line="93" pos:column="17"/></operator><name pos:line="93" pos:column="17">debugfile<pos:position pos:line="93" pos:column="26"/></name><operator pos:line="93" pos:column="26">,<pos:position pos:line="93" pos:column="27"/></operator> <literal type="string" pos:line="93" pos:column="28">"mx_get_magic(): unable to open file %s for reading.\n"<pos:position pos:line="93" pos:column="83"/></literal><operator pos:line="93" pos:column="83">,<pos:position pos:line="93" pos:column="84"/></operator>
		<name pos:line="94" pos:column="17">path<pos:position pos:line="94" pos:column="21"/></name><operator pos:line="94" pos:column="21">)<pos:position pos:line="94" pos:column="22"/></operator></expr></argument>)<pos:position pos:line="94" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="95" pos:column="5">mutt_perror<pos:position pos:line="95" pos:column="16"/></name> <argument_list pos:line="95" pos:column="17">(<argument><expr><name pos:line="95" pos:column="18">path<pos:position pos:line="95" pos:column="22"/></name></expr></argument>)<pos:position pos:line="95" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="24"/></expr_stmt>
    <return pos:line="96" pos:column="5">return <expr><operator pos:line="96" pos:column="12">(<pos:position pos:line="96" pos:column="13"/></operator><operator pos:line="96" pos:column="13">-<pos:position pos:line="96" pos:column="14"/></operator><literal type="number" pos:line="96" pos:column="14">1<pos:position pos:line="96" pos:column="15"/></literal><operator pos:line="96" pos:column="15">)<pos:position pos:line="96" pos:column="16"/></operator></expr>;<pos:position pos:line="96" pos:column="17"/></return>
  }<pos:position pos:line="97" pos:column="4"/></block></else></if>

  <return pos:line="99" pos:column="3">return <expr><operator pos:line="99" pos:column="10">(<pos:position pos:line="99" pos:column="11"/></operator><name pos:line="99" pos:column="11">magic<pos:position pos:line="99" pos:column="16"/></name><operator pos:line="99" pos:column="16">)<pos:position pos:line="99" pos:column="17"/></operator></expr>;<pos:position pos:line="99" pos:column="18"/></return>
}<pos:position pos:line="100" pos:column="2"/></block></function></unit>
