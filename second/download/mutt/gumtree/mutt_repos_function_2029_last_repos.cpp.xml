<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2029_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">cmd_parse_capability<pos:position pos:line="1" pos:column="33"/></name> <parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">IMAP_DATA<pos:position pos:line="1" pos:column="44"/></name><modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type> <name pos:line="1" pos:column="46">idata<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name><modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type> <name pos:line="1" pos:column="59">s<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">x<pos:position pos:line="3" pos:column="8"/></name></decl>;<pos:position pos:line="3" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name><modifier pos:line="4" pos:column="7">*<pos:position pos:line="4" pos:column="8"/></modifier></type> <name pos:line="4" pos:column="9">bracket<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">dprint<pos:position pos:line="6" pos:column="9"/></name> <argument_list pos:line="6" pos:column="10">(<argument><expr><literal type="number" pos:line="6" pos:column="11">3<pos:position pos:line="6" pos:column="12"/></literal></expr></argument>, <argument><expr><operator pos:line="6" pos:column="14">(<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="15">debugfile<pos:position pos:line="6" pos:column="24"/></name><operator pos:line="6" pos:column="24">,<pos:position pos:line="6" pos:column="25"/></operator> <literal type="string" pos:line="6" pos:column="26">"Handling CAPABILITY\n"<pos:position pos:line="6" pos:column="49"/></literal><operator pos:line="6" pos:column="49">)<pos:position pos:line="6" pos:column="50"/></operator></expr></argument>)<pos:position pos:line="6" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="52"/></expr_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">s<pos:position pos:line="8" pos:column="4"/></name> <operator pos:line="8" pos:column="5">=<pos:position pos:line="8" pos:column="6"/></operator> <call><name pos:line="8" pos:column="7">imap_next_word<pos:position pos:line="8" pos:column="21"/></name> <argument_list pos:line="8" pos:column="22">(<argument><expr><name pos:line="8" pos:column="23">s<pos:position pos:line="8" pos:column="24"/></name></expr></argument>)<pos:position pos:line="8" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="26"/></expr_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><operator pos:line="9" pos:column="7">(<pos:position pos:line="9" pos:column="8"/></operator><name pos:line="9" pos:column="8">bracket<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <call><name pos:line="9" pos:column="18">strchr<pos:position pos:line="9" pos:column="24"/></name> <argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">s<pos:position pos:line="9" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="9" pos:column="29">']'<pos:position pos:line="9" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="33"/></argument_list></call><operator pos:line="9" pos:column="33">)<pos:position pos:line="9" pos:column="34"/></operator></expr>)<pos:position pos:line="9" pos:column="35"/></condition><then pos:line="9" pos:column="35">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="10" pos:column="5">*<pos:position pos:line="10" pos:column="6"/></operator><name pos:line="10" pos:column="6">bracket<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">=<pos:position pos:line="10" pos:column="15"/></operator> <literal type="char" pos:line="10" pos:column="16">'\0'<pos:position pos:line="10" pos:column="20"/></literal></expr>;<pos:position pos:line="10" pos:column="21"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">FREE<pos:position pos:line="11" pos:column="7"/></name><argument_list pos:line="11" pos:column="7">(<argument><expr><operator pos:line="11" pos:column="8">&amp;<pos:position pos:line="11" pos:column="13"/></operator><name><name pos:line="11" pos:column="9">idata<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">-&gt;<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="16">capstr<pos:position pos:line="11" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">idata<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">-&gt;<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="10">capstr<pos:position pos:line="12" pos:column="16"/></name></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <call><name pos:line="12" pos:column="19">safe_strdup<pos:position pos:line="12" pos:column="30"/></name> <argument_list pos:line="12" pos:column="31">(<argument><expr><name pos:line="12" pos:column="32">s<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="14" pos:column="3">memset<pos:position pos:line="14" pos:column="9"/></name> <argument_list pos:line="14" pos:column="10">(<argument><expr><name><name pos:line="14" pos:column="11">idata<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">-&gt;<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="18">capabilities<pos:position pos:line="14" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="32">0<pos:position pos:line="14" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="35">sizeof <argument_list pos:line="14" pos:column="42">(<argument><expr><name><name pos:line="14" pos:column="43">idata<pos:position pos:line="14" pos:column="48"/></name><operator pos:line="14" pos:column="48">-&gt;<pos:position pos:line="14" pos:column="53"/></operator><name pos:line="14" pos:column="50">capabilities<pos:position pos:line="14" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="65"/></expr_stmt>

  <while pos:line="16" pos:column="3">while <condition pos:line="16" pos:column="9">(<expr><operator pos:line="16" pos:column="10">*<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">s<pos:position pos:line="16" pos:column="12"/></name></expr>)<pos:position pos:line="16" pos:column="13"/></condition>
  <block pos:line="17" pos:column="3">{
    <for pos:line="18" pos:column="5">for <control pos:line="18" pos:column="9">(<init><expr><name pos:line="18" pos:column="10">x<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <literal type="number" pos:line="18" pos:column="14">0<pos:position pos:line="18" pos:column="15"/></literal></expr>;<pos:position pos:line="18" pos:column="16"/></init> <condition><expr><name pos:line="18" pos:column="17">x<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">&lt;<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="21">CAPMAX<pos:position pos:line="18" pos:column="27"/></name></expr>;<pos:position pos:line="18" pos:column="28"/></condition> <incr><expr><name pos:line="18" pos:column="29">x<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">++<pos:position pos:line="18" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="18" pos:column="33"/></control>
      <block type="pseudo"><if pos:line="19" pos:column="7">if <condition pos:line="19" pos:column="10">(<expr><call><name pos:line="19" pos:column="11">imap_wordcasecmp<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">(<argument><expr><name><name pos:line="19" pos:column="28">Capabilities<pos:position pos:line="19" pos:column="40"/></name><index pos:line="19" pos:column="40">[<expr><name pos:line="19" pos:column="41">x<pos:position pos:line="19" pos:column="42"/></name></expr>]<pos:position pos:line="19" pos:column="43"/></index></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="45">s<pos:position pos:line="19" pos:column="46"/></name></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call> <operator pos:line="19" pos:column="48">==<pos:position pos:line="19" pos:column="50"/></operator> <literal type="number" pos:line="19" pos:column="51">0<pos:position pos:line="19" pos:column="52"/></literal></expr>)<pos:position pos:line="19" pos:column="53"/></condition><then pos:line="19" pos:column="53">
      <block pos:line="20" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">mutt_bit_set<pos:position pos:line="21" pos:column="21"/></name> <argument_list pos:line="21" pos:column="22">(<argument><expr><name><name pos:line="21" pos:column="23">idata<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">-&gt;<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="30">capabilities<pos:position pos:line="21" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="44">x<pos:position pos:line="21" pos:column="45"/></name></expr></argument>)<pos:position pos:line="21" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="47"/></expr_stmt>
	<break pos:line="22" pos:column="9">break;<pos:position pos:line="22" pos:column="15"/></break>
      }<pos:position pos:line="23" pos:column="8"/></block></then></if></block></for>
    <expr_stmt><expr><name pos:line="24" pos:column="5">s<pos:position pos:line="24" pos:column="6"/></name> <operator pos:line="24" pos:column="7">=<pos:position pos:line="24" pos:column="8"/></operator> <call><name pos:line="24" pos:column="9">imap_next_word<pos:position pos:line="24" pos:column="23"/></name> <argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">s<pos:position pos:line="24" pos:column="26"/></name></expr></argument>)<pos:position pos:line="24" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="25" pos:column="4"/></block></while>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
