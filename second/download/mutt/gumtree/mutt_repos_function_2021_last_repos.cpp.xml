<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2021_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">imap_cmd_idle<pos:position pos:line="1" pos:column="18"/></name> <parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">IMAP_DATA<pos:position pos:line="1" pos:column="29"/></name><modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type> <name pos:line="1" pos:column="31">idata<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">rc<pos:position pos:line="3" pos:column="9"/></name></decl>;<pos:position pos:line="3" pos:column="10"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="5" pos:column="3">imap_cmd_start<pos:position pos:line="5" pos:column="17"/></name> <argument_list pos:line="5" pos:column="18">(<argument><expr><name pos:line="5" pos:column="19">idata<pos:position pos:line="5" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="26">"IDLE"<pos:position pos:line="5" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="34"/></expr_stmt>
  <do pos:line="6" pos:column="3">do
    <block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="5">rc<pos:position pos:line="7" pos:column="7"/></name> <operator pos:line="7" pos:column="8">=<pos:position pos:line="7" pos:column="9"/></operator> <call><name pos:line="7" pos:column="10">imap_cmd_step<pos:position pos:line="7" pos:column="23"/></name> <argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">idata<pos:position pos:line="7" pos:column="30"/></name></expr></argument>)<pos:position pos:line="7" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="32"/></expr_stmt></block>
  while <condition pos:line="8" pos:column="9">(<expr><name pos:line="8" pos:column="10">rc<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">==<pos:position pos:line="8" pos:column="15"/></operator> <name pos:line="8" pos:column="16">IMAP_CMD_CONTINUE<pos:position pos:line="8" pos:column="33"/></name></expr>)<pos:position pos:line="8" pos:column="34"/></condition>;<pos:position pos:line="8" pos:column="35"/></do>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">rc<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">==<pos:position pos:line="10" pos:column="12"/></operator> <name pos:line="10" pos:column="13">IMAP_CMD_RESPOND<pos:position pos:line="10" pos:column="29"/></name></expr>)<pos:position pos:line="10" pos:column="30"/></condition><then pos:line="10" pos:column="30">
  <block pos:line="11" pos:column="3">{
    <comment type="block" pos:line="12" pos:column="5">/* successfully entered IDLE state */</comment>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">idata<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">-&gt;<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="12">state<pos:position pos:line="13" pos:column="17"/></name></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <name pos:line="13" pos:column="20">IMAP_IDLE<pos:position pos:line="13" pos:column="29"/></name></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>
    <comment type="block" pos:line="14" pos:column="5">/* queue automatic exit when next command is issued */</comment>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">mutt_buffer_printf<pos:position pos:line="15" pos:column="23"/></name> <argument_list pos:line="15" pos:column="24">(<argument><expr><name><name pos:line="15" pos:column="25">idata<pos:position pos:line="15" pos:column="30"/></name><operator pos:line="15" pos:column="30">-&gt;<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="32">cmdbuf<pos:position pos:line="15" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="40">"DONE\r\n"<pos:position pos:line="15" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">rc<pos:position pos:line="16" pos:column="7"/></name> <operator pos:line="16" pos:column="8">=<pos:position pos:line="16" pos:column="9"/></operator> <name pos:line="16" pos:column="10">IMAP_CMD_OK<pos:position pos:line="16" pos:column="21"/></name></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>
  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><name pos:line="18" pos:column="7">rc<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">!=<pos:position pos:line="18" pos:column="12"/></operator> <name pos:line="18" pos:column="13">IMAP_CMD_OK<pos:position pos:line="18" pos:column="24"/></name></expr>)<pos:position pos:line="18" pos:column="25"/></condition><then pos:line="18" pos:column="25">
  <block pos:line="19" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">dprint<pos:position pos:line="20" pos:column="11"/></name> <argument_list pos:line="20" pos:column="12">(<argument><expr><literal type="number" pos:line="20" pos:column="13">1<pos:position pos:line="20" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="20" pos:column="16">(<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="17">debugfile<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">,<pos:position pos:line="20" pos:column="27"/></operator> <literal type="string" pos:line="20" pos:column="28">"imap_cmd_idle: error starting IDLE\n"<pos:position pos:line="20" pos:column="66"/></literal><operator pos:line="20" pos:column="66">)<pos:position pos:line="20" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="20" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="69"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">-<pos:position pos:line="21" pos:column="13"/></operator><literal type="number" pos:line="21" pos:column="13">1<pos:position pos:line="21" pos:column="14"/></literal></expr>;<pos:position pos:line="21" pos:column="15"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>
  
  <return pos:line="24" pos:column="3">return <expr><literal type="number" pos:line="24" pos:column="10">0<pos:position pos:line="24" pos:column="11"/></literal></expr>;<pos:position pos:line="24" pos:column="12"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
