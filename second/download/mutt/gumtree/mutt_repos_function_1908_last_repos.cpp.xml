<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1908_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type>
<name pos:line="2" pos:column="1">_nl_expand_alias<pos:position pos:line="2" pos:column="17"/></name> <argument_list pos:line="2" pos:column="18">(<argument><expr><name pos:line="2" pos:column="19">name<pos:position pos:line="2" pos:column="23"/></name></expr></argument>)<pos:position pos:line="2" pos:column="24"/></argument_list>
    const <name pos:line="3" pos:column="11">char<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier><name pos:line="3" pos:column="17">name<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><specifier pos:line="5" pos:column="3">static<pos:position pos:line="5" pos:column="9"/></specifier> <type><specifier pos:line="5" pos:column="10">const<pos:position pos:line="5" pos:column="15"/></specifier> <name pos:line="5" pos:column="16">char<pos:position pos:line="5" pos:column="20"/></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">locale_alias_path<pos:position pos:line="5" pos:column="39"/></name> <init pos:line="5" pos:column="40">= <expr><name pos:line="5" pos:column="42">LOCALE_ALIAS_PATH<pos:position pos:line="5" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">alias_map<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">retval<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">result<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><name pos:line="7" pos:column="24">NULL<pos:position pos:line="7" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">added<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>

<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">_LIBC<pos:position pos:line="10" pos:column="13"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">__libc_lock_lock<pos:position pos:line="11" pos:column="19"/></name> <argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">lock<pos:position pos:line="11" pos:column="25"/></name></expr></argument>)<pos:position pos:line="11" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>

  <do pos:line="14" pos:column="3">do
    <block pos:line="15" pos:column="5">{
      <decl_stmt><decl><type><name><name pos:line="16" pos:column="7">struct<pos:position pos:line="16" pos:column="13"/></name> <name pos:line="16" pos:column="14">alias_map<pos:position pos:line="16" pos:column="23"/></name></name></type> <name pos:line="16" pos:column="24">item<pos:position pos:line="16" pos:column="28"/></name></decl>;<pos:position pos:line="16" pos:column="29"/></decl_stmt>

      <expr_stmt><expr><name><name pos:line="18" pos:column="7">item<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">.<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">alias<pos:position pos:line="18" pos:column="17"/></name></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <name pos:line="18" pos:column="20">name<pos:position pos:line="18" pos:column="24"/></name></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt>

      <if pos:line="20" pos:column="7">if <condition pos:line="20" pos:column="10">(<expr><name pos:line="20" pos:column="11">nmap<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">&gt;<pos:position pos:line="20" pos:column="20"/></operator> <literal type="number" pos:line="20" pos:column="18">0<pos:position pos:line="20" pos:column="19"/></literal></expr>)<pos:position pos:line="20" pos:column="20"/></condition><then pos:line="20" pos:column="20">
	<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="9">retval<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <operator pos:line="21" pos:column="18">(<pos:position pos:line="21" pos:column="19"/></operator>struct <name pos:line="21" pos:column="26">alias_map<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">*<pos:position pos:line="21" pos:column="37"/></operator><operator pos:line="21" pos:column="37">)<pos:position pos:line="21" pos:column="38"/></operator> <call><name pos:line="21" pos:column="39">bsearch<pos:position pos:line="21" pos:column="46"/></name> <argument_list pos:line="21" pos:column="47">(<argument><expr><operator pos:line="21" pos:column="48">&amp;<pos:position pos:line="21" pos:column="53"/></operator><name pos:line="21" pos:column="49">item<pos:position pos:line="21" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="55">map<pos:position pos:line="21" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="60">nmap<pos:position pos:line="21" pos:column="64"/></name></expr></argument>,
					       <argument><expr><sizeof pos:line="22" pos:column="48">sizeof <argument_list pos:line="22" pos:column="55">(<argument><expr pos:line="22" pos:column="56">struct <name pos:line="22" pos:column="63">alias_map<pos:position pos:line="22" pos:column="72"/></name></expr></argument>)<pos:position pos:line="22" pos:column="73"/></argument_list></sizeof></expr></argument>,
					       <argument><expr><operator pos:line="23" pos:column="48">(<pos:position pos:line="23" pos:column="49"/></operator><macro><name pos:line="23" pos:column="49">int<pos:position pos:line="23" pos:column="52"/></name> <argument_list pos:line="23" pos:column="53">(<argument pos:line="23" pos:column="54">*<pos:position pos:line="23" pos:column="55"/></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></macro> <call><name pos:line="23" pos:column="57">PARAMS<pos:position pos:line="23" pos:column="63"/></name> <argument_list pos:line="23" pos:column="64">(<argument><expr><operator pos:line="23" pos:column="65">(<pos:position pos:line="23" pos:column="66"/></operator><specifier pos:line="23" pos:column="66">const<pos:position pos:line="23" pos:column="71"/></specifier> <name pos:line="23" pos:column="72">void<pos:position pos:line="23" pos:column="76"/></name> <operator pos:line="23" pos:column="77">*<pos:position pos:line="23" pos:column="78"/></operator><operator pos:line="23" pos:column="78">,<pos:position pos:line="23" pos:column="79"/></operator>
								 <specifier pos:line="24" pos:column="66">const<pos:position pos:line="24" pos:column="71"/></specifier> <name pos:line="24" pos:column="72">void<pos:position pos:line="24" pos:column="76"/></name> <operator pos:line="24" pos:column="77">*<pos:position pos:line="24" pos:column="78"/></operator><operator pos:line="24" pos:column="78">)<pos:position pos:line="24" pos:column="79"/></operator></expr></argument>)<pos:position pos:line="24" pos:column="80"/></argument_list></call>
						<operator pos:line="25" pos:column="49">)<pos:position pos:line="25" pos:column="50"/></operator> <name pos:line="25" pos:column="51">alias_compare<pos:position pos:line="25" pos:column="64"/></name></expr></argument>)<pos:position pos:line="25" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="66"/></expr_stmt></block></then>
      <else pos:line="26" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="9">retval<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <name pos:line="27" pos:column="18">NULL<pos:position pos:line="27" pos:column="22"/></name></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt></block></else></if>

      <comment type="block" pos:line="29" pos:column="7">/* We really found an alias.  Return the value.  */</comment>
      <if pos:line="30" pos:column="7">if <condition pos:line="30" pos:column="10">(<expr><name pos:line="30" pos:column="11">retval<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">!=<pos:position pos:line="30" pos:column="20"/></operator> <name pos:line="30" pos:column="21">NULL<pos:position pos:line="30" pos:column="25"/></name></expr>)<pos:position pos:line="30" pos:column="26"/></condition><then pos:line="30" pos:column="26">
	<block pos:line="31" pos:column="9">{
	  <expr_stmt><expr><name pos:line="32" pos:column="11">result<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">=<pos:position pos:line="32" pos:column="19"/></operator> <name><name pos:line="32" pos:column="20">retval<pos:position pos:line="32" pos:column="26"/></name><operator pos:line="32" pos:column="26">-&gt;<pos:position pos:line="32" pos:column="31"/></operator><name pos:line="32" pos:column="28">value<pos:position pos:line="32" pos:column="33"/></name></name></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>
	  <break pos:line="33" pos:column="11">break;<pos:position pos:line="33" pos:column="17"/></break>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="36" pos:column="7">/* Perhaps we can find another alias file.  */</comment>
      <expr_stmt><expr><name pos:line="37" pos:column="7">added<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <literal type="number" pos:line="37" pos:column="15">0<pos:position pos:line="37" pos:column="16"/></literal></expr>;<pos:position pos:line="37" pos:column="17"/></expr_stmt>
      <while pos:line="38" pos:column="7">while <condition pos:line="38" pos:column="13">(<expr><name pos:line="38" pos:column="14">added<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">==<pos:position pos:line="38" pos:column="22"/></operator> <literal type="number" pos:line="38" pos:column="23">0<pos:position pos:line="38" pos:column="24"/></literal> <operator pos:line="38" pos:column="25">&amp;&amp;<pos:position pos:line="38" pos:column="35"/></operator> <name><name pos:line="38" pos:column="28">locale_alias_path<pos:position pos:line="38" pos:column="45"/></name><index pos:line="38" pos:column="45">[<expr><literal type="number" pos:line="38" pos:column="46">0<pos:position pos:line="38" pos:column="47"/></literal></expr>]<pos:position pos:line="38" pos:column="48"/></index></name> <operator pos:line="38" pos:column="49">!=<pos:position pos:line="38" pos:column="51"/></operator> <literal type="char" pos:line="38" pos:column="52">'\0'<pos:position pos:line="38" pos:column="56"/></literal></expr>)<pos:position pos:line="38" pos:column="57"/></condition>
	<block pos:line="39" pos:column="9">{
	  <decl_stmt><decl><type><specifier pos:line="40" pos:column="11">const<pos:position pos:line="40" pos:column="16"/></specifier> <name pos:line="40" pos:column="17">char<pos:position pos:line="40" pos:column="21"/></name> <modifier pos:line="40" pos:column="22">*<pos:position pos:line="40" pos:column="23"/></modifier></type><name pos:line="40" pos:column="23">start<pos:position pos:line="40" pos:column="28"/></name></decl>;<pos:position pos:line="40" pos:column="29"/></decl_stmt>

	  <while pos:line="42" pos:column="11">while <condition pos:line="42" pos:column="17">(<expr><name><name pos:line="42" pos:column="18">locale_alias_path<pos:position pos:line="42" pos:column="35"/></name><index pos:line="42" pos:column="35">[<expr><literal type="number" pos:line="42" pos:column="36">0<pos:position pos:line="42" pos:column="37"/></literal></expr>]<pos:position pos:line="42" pos:column="38"/></index></name> <operator pos:line="42" pos:column="39">==<pos:position pos:line="42" pos:column="41"/></operator> <name pos:line="42" pos:column="42">PATH_SEPARATOR<pos:position pos:line="42" pos:column="56"/></name></expr>)<pos:position pos:line="42" pos:column="57"/></condition>
	    <block type="pseudo"><expr_stmt><expr><operator pos:line="43" pos:column="13">++<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="15">locale_alias_path<pos:position pos:line="43" pos:column="32"/></name></expr>;<pos:position pos:line="43" pos:column="33"/></expr_stmt></block></while>
	  <expr_stmt><expr><name pos:line="44" pos:column="11">start<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">=<pos:position pos:line="44" pos:column="18"/></operator> <name pos:line="44" pos:column="19">locale_alias_path<pos:position pos:line="44" pos:column="36"/></name></expr>;<pos:position pos:line="44" pos:column="37"/></expr_stmt>

	  <while pos:line="46" pos:column="11">while <condition pos:line="46" pos:column="17">(<expr><name><name pos:line="46" pos:column="18">locale_alias_path<pos:position pos:line="46" pos:column="35"/></name><index pos:line="46" pos:column="35">[<expr><literal type="number" pos:line="46" pos:column="36">0<pos:position pos:line="46" pos:column="37"/></literal></expr>]<pos:position pos:line="46" pos:column="38"/></index></name> <operator pos:line="46" pos:column="39">!=<pos:position pos:line="46" pos:column="41"/></operator> <literal type="char" pos:line="46" pos:column="42">'\0'<pos:position pos:line="46" pos:column="46"/></literal>
		 <operator pos:line="47" pos:column="18">&amp;&amp;<pos:position pos:line="47" pos:column="28"/></operator> <name><name pos:line="47" pos:column="21">locale_alias_path<pos:position pos:line="47" pos:column="38"/></name><index pos:line="47" pos:column="38">[<expr><literal type="number" pos:line="47" pos:column="39">0<pos:position pos:line="47" pos:column="40"/></literal></expr>]<pos:position pos:line="47" pos:column="41"/></index></name> <operator pos:line="47" pos:column="42">!=<pos:position pos:line="47" pos:column="44"/></operator> <name pos:line="47" pos:column="45">PATH_SEPARATOR<pos:position pos:line="47" pos:column="59"/></name></expr>)<pos:position pos:line="47" pos:column="60"/></condition>
	    <block type="pseudo"><expr_stmt><expr><operator pos:line="48" pos:column="13">++<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="15">locale_alias_path<pos:position pos:line="48" pos:column="32"/></name></expr>;<pos:position pos:line="48" pos:column="33"/></expr_stmt></block></while>

	  <if pos:line="50" pos:column="11">if <condition pos:line="50" pos:column="14">(<expr><name pos:line="50" pos:column="15">start<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">&lt;<pos:position pos:line="50" pos:column="25"/></operator> <name pos:line="50" pos:column="23">locale_alias_path<pos:position pos:line="50" pos:column="40"/></name></expr>)<pos:position pos:line="50" pos:column="41"/></condition><then pos:line="50" pos:column="41">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="13">added<pos:position pos:line="51" pos:column="18"/></name> <operator pos:line="51" pos:column="19">=<pos:position pos:line="51" pos:column="20"/></operator> <call><name pos:line="51" pos:column="21">read_alias_file<pos:position pos:line="51" pos:column="36"/></name> <argument_list pos:line="51" pos:column="37">(<argument><expr><name pos:line="51" pos:column="38">start<pos:position pos:line="51" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="45">locale_alias_path<pos:position pos:line="51" pos:column="62"/></name> <operator pos:line="51" pos:column="63">-<pos:position pos:line="51" pos:column="64"/></operator> <name pos:line="51" pos:column="65">start<pos:position pos:line="51" pos:column="70"/></name></expr></argument>)<pos:position pos:line="51" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="72"/></expr_stmt></block></then></if>
	}<pos:position pos:line="52" pos:column="10"/></block></while>
    }<pos:position pos:line="53" pos:column="6"/></block>
  while <condition pos:line="54" pos:column="9">(<expr><name pos:line="54" pos:column="10">added<pos:position pos:line="54" pos:column="15"/></name> <operator pos:line="54" pos:column="16">!=<pos:position pos:line="54" pos:column="18"/></operator> <literal type="number" pos:line="54" pos:column="19">0<pos:position pos:line="54" pos:column="20"/></literal></expr>)<pos:position pos:line="54" pos:column="21"/></condition>;<pos:position pos:line="54" pos:column="22"/></do>

<cpp:ifdef pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">ifdef<pos:position pos:line="56" pos:column="7"/></cpp:directive> <name pos:line="56" pos:column="8">_LIBC<pos:position pos:line="56" pos:column="13"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="57" pos:column="3">__libc_lock_unlock<pos:position pos:line="57" pos:column="21"/></name> <argument_list pos:line="57" pos:column="22">(<argument><expr><name pos:line="57" pos:column="23">lock<pos:position pos:line="57" pos:column="27"/></name></expr></argument>)<pos:position pos:line="57" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif<pos:position pos:line="58" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="60" pos:column="3">return <expr><name pos:line="60" pos:column="10">result<pos:position pos:line="60" pos:column="16"/></name></expr>;<pos:position pos:line="60" pos:column="17"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></unit>
