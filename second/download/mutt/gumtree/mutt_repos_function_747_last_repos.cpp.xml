<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_747_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">pgp_gpgme_application_handler<pos:position pos:line="1" pos:column="34"/></name> <parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">BODY<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">m<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">STATE<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">s<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">needpass<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><operator pos:line="3" pos:column="18">-<pos:position pos:line="3" pos:column="19"/></operator><literal type="number" pos:line="3" pos:column="19">1<pos:position pos:line="3" pos:column="20"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="22">pgp_keyblock<pos:position pos:line="3" pos:column="34"/></name> <init pos:line="3" pos:column="35">= <expr><literal type="number" pos:line="3" pos:column="37">0<pos:position pos:line="3" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">clearsign<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">long<pos:position pos:line="5" pos:column="7"/></name></type> <name pos:line="5" pos:column="8">bytes<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">LOFF_T<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">last_pos<pos:position pos:line="6" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="20">offset<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">buf<pos:position pos:line="7" pos:column="11"/></name><index pos:line="7" pos:column="11">[<expr><name pos:line="7" pos:column="12">HUGE_STRING<pos:position pos:line="7" pos:column="23"/></name></expr>]<pos:position pos:line="7" pos:column="24"/></index></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">FILE<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">pgpout<pos:position pos:line="8" pos:column="15"/></name> <init pos:line="8" pos:column="16">= <expr><name pos:line="8" pos:column="18">NULL<pos:position pos:line="8" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="10" pos:column="3">gpgme_error_t<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">err<pos:position pos:line="10" pos:column="20"/></name> <init pos:line="10" pos:column="21">= <expr><literal type="number" pos:line="10" pos:column="23">0<pos:position pos:line="10" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">gpgme_data_t<pos:position pos:line="11" pos:column="15"/></name></type> <name pos:line="11" pos:column="16">armored_data<pos:position pos:line="11" pos:column="28"/></name> <init pos:line="11" pos:column="29">= <expr><name pos:line="11" pos:column="31">NULL<pos:position pos:line="11" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="36"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="13" pos:column="3">short<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">maybe_goodsig<pos:position pos:line="13" pos:column="22"/></name> <init pos:line="13" pos:column="23">= <expr><literal type="number" pos:line="13" pos:column="25">1<pos:position pos:line="13" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">short<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">have_any_sigs<pos:position pos:line="14" pos:column="22"/></name> <init pos:line="14" pos:column="23">= <expr><literal type="number" pos:line="14" pos:column="25">0<pos:position pos:line="14" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="27"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="16" pos:column="3">char<pos:position pos:line="16" pos:column="7"/></name></type> <name><name pos:line="16" pos:column="8">body_charset<pos:position pos:line="16" pos:column="20"/></name><index pos:line="16" pos:column="20">[<expr><name pos:line="16" pos:column="21">STRING<pos:position pos:line="16" pos:column="27"/></name></expr>]<pos:position pos:line="16" pos:column="28"/></index></name></decl>;<pos:position pos:line="16" pos:column="29"/></decl_stmt>  <comment type="block" pos:line="16" pos:column="31">/* Only used for clearsigned messages. */</comment>

  <expr_stmt><expr><call><name pos:line="18" pos:column="3">dprint<pos:position pos:line="18" pos:column="9"/></name> <argument_list pos:line="18" pos:column="10">(<argument><expr><literal type="number" pos:line="18" pos:column="11">2<pos:position pos:line="18" pos:column="12"/></literal></expr></argument>, <argument><expr><operator pos:line="18" pos:column="14">(<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">debugfile<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">,<pos:position pos:line="18" pos:column="25"/></operator> <literal type="string" pos:line="18" pos:column="26">"Entering pgp_application_pgp handler\n"<pos:position pos:line="18" pos:column="66"/></literal><operator pos:line="18" pos:column="66">)<pos:position pos:line="18" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="18" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="69"/></expr_stmt>

  <comment type="block" pos:line="20" pos:column="3">/* For clearsigned messages we won't be able to get a character set
     but we know that this may only be text thus we assume Latin-1
     here. */</comment>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><operator pos:line="23" pos:column="7">!<pos:position pos:line="23" pos:column="8"/></operator><call><name pos:line="23" pos:column="8">mutt_get_body_charset<pos:position pos:line="23" pos:column="29"/></name> <argument_list pos:line="23" pos:column="30">(<argument><expr><name pos:line="23" pos:column="31">body_charset<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="45">sizeof <argument_list pos:line="23" pos:column="52">(<argument><expr><name pos:line="23" pos:column="53">body_charset<pos:position pos:line="23" pos:column="65"/></name></expr></argument>)<pos:position pos:line="23" pos:column="66"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="23" pos:column="68">m<pos:position pos:line="23" pos:column="69"/></name></expr></argument>)<pos:position pos:line="23" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="71"/></condition><then pos:line="23" pos:column="71">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="5">strfcpy<pos:position pos:line="24" pos:column="12"/></name> <argument_list pos:line="24" pos:column="13">(<argument><expr><name pos:line="24" pos:column="14">body_charset<pos:position pos:line="24" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="28">"iso-8859-1"<pos:position pos:line="24" pos:column="40"/></literal></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="42">sizeof <name pos:line="24" pos:column="49">body_charset<pos:position pos:line="24" pos:column="61"/></name></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="63"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="26" pos:column="3">fseeko<pos:position pos:line="26" pos:column="9"/></name> <argument_list pos:line="26" pos:column="10">(<argument><expr><name><name pos:line="26" pos:column="11">s<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">-&gt;<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="14">fpin<pos:position pos:line="26" pos:column="18"/></name></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="20">m<pos:position pos:line="26" pos:column="21"/></name><operator pos:line="26" pos:column="21">-&gt;<pos:position pos:line="26" pos:column="26"/></operator><name pos:line="26" pos:column="23">offset<pos:position pos:line="26" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="31">0<pos:position pos:line="26" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="27" pos:column="3">last_pos<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">=<pos:position pos:line="27" pos:column="13"/></operator> <name><name pos:line="27" pos:column="14">m<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">-&gt;<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="17">offset<pos:position pos:line="27" pos:column="23"/></name></name></expr>;<pos:position pos:line="27" pos:column="24"/></expr_stmt>
  
  <for pos:line="29" pos:column="3">for <control pos:line="29" pos:column="7">(<init><expr><name pos:line="29" pos:column="8">bytes<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <name><name pos:line="29" pos:column="16">m<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">-&gt;<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="19">length<pos:position pos:line="29" pos:column="25"/></name></name></expr>;<pos:position pos:line="29" pos:column="26"/></init> <condition><expr><name pos:line="29" pos:column="27">bytes<pos:position pos:line="29" pos:column="32"/></name> <operator pos:line="29" pos:column="33">&gt;<pos:position pos:line="29" pos:column="37"/></operator> <literal type="number" pos:line="29" pos:column="35">0<pos:position pos:line="29" pos:column="36"/></literal></expr>;<pos:position pos:line="29" pos:column="37"/></condition><incr/>)<pos:position pos:line="29" pos:column="38"/></control>
    <block pos:line="30" pos:column="5">{
      <if pos:line="31" pos:column="7">if <condition pos:line="31" pos:column="10">(<expr><call><name pos:line="31" pos:column="11">fgets<pos:position pos:line="31" pos:column="16"/></name> <argument_list pos:line="31" pos:column="17">(<argument><expr><name pos:line="31" pos:column="18">buf<pos:position pos:line="31" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="23">sizeof <argument_list pos:line="31" pos:column="30">(<argument><expr><name pos:line="31" pos:column="31">buf<pos:position pos:line="31" pos:column="34"/></name></expr></argument>)<pos:position pos:line="31" pos:column="35"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="37">s<pos:position pos:line="31" pos:column="38"/></name><operator pos:line="31" pos:column="38">-&gt;<pos:position pos:line="31" pos:column="43"/></operator><name pos:line="31" pos:column="40">fpin<pos:position pos:line="31" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="45"/></argument_list></call> <operator pos:line="31" pos:column="46">==<pos:position pos:line="31" pos:column="48"/></operator> <name pos:line="31" pos:column="49">NULL<pos:position pos:line="31" pos:column="53"/></name></expr>)<pos:position pos:line="31" pos:column="54"/></condition><then pos:line="31" pos:column="54">
        <block type="pseudo"><break pos:line="32" pos:column="9">break;<pos:position pos:line="32" pos:column="15"/></break></block></then></if>
      
      <expr_stmt><expr><name pos:line="34" pos:column="7">offset<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">=<pos:position pos:line="34" pos:column="15"/></operator> <call><name pos:line="34" pos:column="16">ftello<pos:position pos:line="34" pos:column="22"/></name> <argument_list pos:line="34" pos:column="23">(<argument><expr><name><name pos:line="34" pos:column="24">s<pos:position pos:line="34" pos:column="25"/></name><operator pos:line="34" pos:column="25">-&gt;<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="27">fpin<pos:position pos:line="34" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name pos:line="35" pos:column="7">bytes<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">-=<pos:position pos:line="35" pos:column="15"/></operator> <operator pos:line="35" pos:column="16">(<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="17">offset<pos:position pos:line="35" pos:column="23"/></name> <operator pos:line="35" pos:column="24">-<pos:position pos:line="35" pos:column="25"/></operator> <name pos:line="35" pos:column="26">last_pos<pos:position pos:line="35" pos:column="34"/></name><operator pos:line="35" pos:column="34">)<pos:position pos:line="35" pos:column="35"/></operator></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt> <comment type="block" pos:line="35" pos:column="37">/* don't rely on mutt_strlen(buf) */</comment>
      <expr_stmt><expr><name pos:line="36" pos:column="7">last_pos<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">=<pos:position pos:line="36" pos:column="17"/></operator> <name pos:line="36" pos:column="18">offset<pos:position pos:line="36" pos:column="24"/></name></expr>;<pos:position pos:line="36" pos:column="25"/></expr_stmt>
      
      <if pos:line="38" pos:column="7">if <condition pos:line="38" pos:column="10">(<expr><operator pos:line="38" pos:column="11">!<pos:position pos:line="38" pos:column="12"/></operator><call><name pos:line="38" pos:column="12">mutt_strncmp<pos:position pos:line="38" pos:column="24"/></name> <argument_list pos:line="38" pos:column="25">(<argument><expr><literal type="string" pos:line="38" pos:column="26">"-----BEGIN PGP "<pos:position pos:line="38" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="45">buf<pos:position pos:line="38" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="50">15<pos:position pos:line="38" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="54"/></condition><then pos:line="38" pos:column="54">
        <block pos:line="39" pos:column="9">{
          <expr_stmt><expr><name pos:line="40" pos:column="11">clearsign<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <literal type="number" pos:line="40" pos:column="23">0<pos:position pos:line="40" pos:column="24"/></literal></expr>;<pos:position pos:line="40" pos:column="25"/></expr_stmt>
          
          <if pos:line="42" pos:column="11">if <condition pos:line="42" pos:column="14">(<expr><call><name pos:line="42" pos:column="15">MESSAGE<pos:position pos:line="42" pos:column="22"/></name><argument_list pos:line="42" pos:column="22">(<argument><expr><name pos:line="42" pos:column="23">buf<pos:position pos:line="42" pos:column="26"/></name> <operator pos:line="42" pos:column="27">+<pos:position pos:line="42" pos:column="28"/></operator> <literal type="number" pos:line="42" pos:column="29">15<pos:position pos:line="42" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="33"/></condition><then pos:line="42" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="13">needpass<pos:position pos:line="43" pos:column="21"/></name> <operator pos:line="43" pos:column="22">=<pos:position pos:line="43" pos:column="23"/></operator> <literal type="number" pos:line="43" pos:column="24">1<pos:position pos:line="43" pos:column="25"/></literal></expr>;<pos:position pos:line="43" pos:column="26"/></expr_stmt></block></then>
          <elseif pos:line="44" pos:column="11">else <if pos:line="44" pos:column="16">if <condition pos:line="44" pos:column="19">(<expr><call><name pos:line="44" pos:column="20">SIGNED_MESSAGE<pos:position pos:line="44" pos:column="34"/></name><argument_list pos:line="44" pos:column="34">(<argument><expr><name pos:line="44" pos:column="35">buf<pos:position pos:line="44" pos:column="38"/></name> <operator pos:line="44" pos:column="39">+<pos:position pos:line="44" pos:column="40"/></operator> <literal type="number" pos:line="44" pos:column="41">15<pos:position pos:line="44" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="45"/></condition><then pos:line="44" pos:column="45">
            <block pos:line="45" pos:column="13">{
              <expr_stmt><expr><name pos:line="46" pos:column="15">clearsign<pos:position pos:line="46" pos:column="24"/></name> <operator pos:line="46" pos:column="25">=<pos:position pos:line="46" pos:column="26"/></operator> <literal type="number" pos:line="46" pos:column="27">1<pos:position pos:line="46" pos:column="28"/></literal></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>
              <expr_stmt><expr><name pos:line="47" pos:column="15">needpass<pos:position pos:line="47" pos:column="23"/></name> <operator pos:line="47" pos:column="24">=<pos:position pos:line="47" pos:column="25"/></operator> <literal type="number" pos:line="47" pos:column="26">0<pos:position pos:line="47" pos:column="27"/></literal></expr>;<pos:position pos:line="47" pos:column="28"/></expr_stmt>
            }<pos:position pos:line="48" pos:column="14"/></block></then></if></elseif>
          <elseif pos:line="49" pos:column="11">else <if pos:line="49" pos:column="16">if <condition pos:line="49" pos:column="19">(<expr><call><name pos:line="49" pos:column="20">PUBLIC_KEY_BLOCK<pos:position pos:line="49" pos:column="36"/></name><argument_list pos:line="49" pos:column="36">(<argument><expr><name pos:line="49" pos:column="37">buf<pos:position pos:line="49" pos:column="40"/></name> <operator pos:line="49" pos:column="41">+<pos:position pos:line="49" pos:column="42"/></operator> <literal type="number" pos:line="49" pos:column="43">15<pos:position pos:line="49" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="47"/></condition><then pos:line="49" pos:column="47">
          <block pos:line="50" pos:column="11">{
            <expr_stmt><expr><name pos:line="51" pos:column="13">needpass<pos:position pos:line="51" pos:column="21"/></name> <operator pos:line="51" pos:column="22">=<pos:position pos:line="51" pos:column="23"/></operator> <literal type="number" pos:line="51" pos:column="24">0<pos:position pos:line="51" pos:column="25"/></literal></expr>;<pos:position pos:line="51" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><name pos:line="52" pos:column="13">pgp_keyblock<pos:position pos:line="52" pos:column="25"/></name> <operator pos:line="52" pos:column="26">=<pos:position pos:line="52" pos:column="27"/></operator> <literal type="number" pos:line="52" pos:column="28">1<pos:position pos:line="52" pos:column="29"/></literal></expr>;<pos:position pos:line="52" pos:column="30"/></expr_stmt>
          }<pos:position pos:line="53" pos:column="12"/></block></then></if></elseif> 
          <else pos:line="54" pos:column="11">else
            <block pos:line="55" pos:column="13">{
              <comment type="block" pos:line="56" pos:column="15">/* XXX - we may wish to recode here */</comment>
              <if pos:line="57" pos:column="15">if <condition pos:line="57" pos:column="18">(<expr><name><name pos:line="57" pos:column="19">s<pos:position pos:line="57" pos:column="20"/></name><operator pos:line="57" pos:column="20">-&gt;<pos:position pos:line="57" pos:column="25"/></operator><name pos:line="57" pos:column="22">prefix<pos:position pos:line="57" pos:column="28"/></name></name></expr>)<pos:position pos:line="57" pos:column="29"/></condition><then pos:line="57" pos:column="29">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="17">state_puts<pos:position pos:line="58" pos:column="27"/></name> <argument_list pos:line="58" pos:column="28">(<argument><expr><name><name pos:line="58" pos:column="29">s<pos:position pos:line="58" pos:column="30"/></name><operator pos:line="58" pos:column="30">-&gt;<pos:position pos:line="58" pos:column="35"/></operator><name pos:line="58" pos:column="32">prefix<pos:position pos:line="58" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="40">s<pos:position pos:line="58" pos:column="41"/></name></expr></argument>)<pos:position pos:line="58" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="43"/></expr_stmt></block></then></if>
              <expr_stmt><expr><call><name pos:line="59" pos:column="15">state_puts<pos:position pos:line="59" pos:column="25"/></name> <argument_list pos:line="59" pos:column="26">(<argument><expr><name pos:line="59" pos:column="27">buf<pos:position pos:line="59" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="32">s<pos:position pos:line="59" pos:column="33"/></name></expr></argument>)<pos:position pos:line="59" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="35"/></expr_stmt>
              <continue pos:line="60" pos:column="15">continue;<pos:position pos:line="60" pos:column="24"/></continue>
            }<pos:position pos:line="61" pos:column="14"/></block></else></if>
          
          <expr_stmt><expr><name pos:line="63" pos:column="11">have_any_sigs<pos:position pos:line="63" pos:column="24"/></name> <operator pos:line="63" pos:column="25">=<pos:position pos:line="63" pos:column="26"/></operator> <operator pos:line="63" pos:column="27">(<pos:position pos:line="63" pos:column="28"/></operator><name pos:line="63" pos:column="28">have_any_sigs<pos:position pos:line="63" pos:column="41"/></name>
                           <operator pos:line="64" pos:column="28">||<pos:position pos:line="64" pos:column="30"/></operator> <operator pos:line="64" pos:column="31">(<pos:position pos:line="64" pos:column="32"/></operator><name pos:line="64" pos:column="32">clearsign<pos:position pos:line="64" pos:column="41"/></name> <operator pos:line="64" pos:column="42">&amp;&amp;<pos:position pos:line="64" pos:column="52"/></operator> <operator pos:line="64" pos:column="45">(<pos:position pos:line="64" pos:column="46"/></operator><name><name pos:line="64" pos:column="46">s<pos:position pos:line="64" pos:column="47"/></name><operator pos:line="64" pos:column="47">-&gt;<pos:position pos:line="64" pos:column="52"/></operator><name pos:line="64" pos:column="49">flags<pos:position pos:line="64" pos:column="54"/></name></name> <operator pos:line="64" pos:column="55">&amp;<pos:position pos:line="64" pos:column="60"/></operator> <name pos:line="64" pos:column="57">MUTT_VERIFY<pos:position pos:line="64" pos:column="68"/></name><operator pos:line="64" pos:column="68">)<pos:position pos:line="64" pos:column="69"/></operator><operator pos:line="64" pos:column="69">)<pos:position pos:line="64" pos:column="70"/></operator><operator pos:line="64" pos:column="70">)<pos:position pos:line="64" pos:column="71"/></operator></expr>;<pos:position pos:line="64" pos:column="72"/></expr_stmt>
          
          <comment type="block" pos:line="66" pos:column="11">/* Copy PGP material to an data container */</comment>
	  <expr_stmt><expr><name pos:line="67" pos:column="11">armored_data<pos:position pos:line="67" pos:column="23"/></name> <operator pos:line="67" pos:column="24">=<pos:position pos:line="67" pos:column="25"/></operator> <call><name pos:line="67" pos:column="26">file_to_data_object<pos:position pos:line="67" pos:column="45"/></name> <argument_list pos:line="67" pos:column="46">(<argument><expr><name><name pos:line="67" pos:column="47">s<pos:position pos:line="67" pos:column="48"/></name><operator pos:line="67" pos:column="48">-&gt;<pos:position pos:line="67" pos:column="53"/></operator><name pos:line="67" pos:column="50">fpin<pos:position pos:line="67" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="56">m<pos:position pos:line="67" pos:column="57"/></name><operator pos:line="67" pos:column="57">-&gt;<pos:position pos:line="67" pos:column="62"/></operator><name pos:line="67" pos:column="59">offset<pos:position pos:line="67" pos:column="65"/></name></name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="67">m<pos:position pos:line="67" pos:column="68"/></name><operator pos:line="67" pos:column="68">-&gt;<pos:position pos:line="67" pos:column="73"/></operator><name pos:line="67" pos:column="70">length<pos:position pos:line="67" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="78"/></expr_stmt>
          <comment type="block" pos:line="68" pos:column="11">/* Invoke PGP if needed */</comment>
          <if pos:line="69" pos:column="11">if <condition pos:line="69" pos:column="14">(<expr><name pos:line="69" pos:column="15">pgp_keyblock<pos:position pos:line="69" pos:column="27"/></name></expr>)<pos:position pos:line="69" pos:column="28"/></condition><then pos:line="69" pos:column="28">
          <block pos:line="70" pos:column="11">{
            <expr_stmt><expr><call><name pos:line="71" pos:column="13">pgp_gpgme_extract_keys<pos:position pos:line="71" pos:column="35"/></name> <argument_list pos:line="71" pos:column="36">(<argument><expr><name pos:line="71" pos:column="37">armored_data<pos:position pos:line="71" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="51">&amp;<pos:position pos:line="71" pos:column="56"/></operator><name pos:line="71" pos:column="52">pgpout<pos:position pos:line="71" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="60">1<pos:position pos:line="71" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="63"/></expr_stmt>
          }<pos:position pos:line="72" pos:column="12"/></block></then>
          <elseif pos:line="73" pos:column="11">else <if pos:line="73" pos:column="16">if <condition pos:line="73" pos:column="19">(<expr><operator pos:line="73" pos:column="20">!<pos:position pos:line="73" pos:column="21"/></operator><name pos:line="73" pos:column="21">clearsign<pos:position pos:line="73" pos:column="30"/></name> <operator pos:line="73" pos:column="31">||<pos:position pos:line="73" pos:column="33"/></operator> <operator pos:line="73" pos:column="34">(<pos:position pos:line="73" pos:column="35"/></operator><name><name pos:line="73" pos:column="35">s<pos:position pos:line="73" pos:column="36"/></name><operator pos:line="73" pos:column="36">-&gt;<pos:position pos:line="73" pos:column="41"/></operator><name pos:line="73" pos:column="38">flags<pos:position pos:line="73" pos:column="43"/></name></name> <operator pos:line="73" pos:column="44">&amp;<pos:position pos:line="73" pos:column="49"/></operator> <name pos:line="73" pos:column="46">MUTT_VERIFY<pos:position pos:line="73" pos:column="57"/></name><operator pos:line="73" pos:column="57">)<pos:position pos:line="73" pos:column="58"/></operator></expr>)<pos:position pos:line="73" pos:column="59"/></condition><then pos:line="73" pos:column="59">
            <block pos:line="74" pos:column="13">{
              <decl_stmt><decl><type><name pos:line="75" pos:column="15">unsigned<pos:position pos:line="75" pos:column="23"/></name> <name pos:line="75" pos:column="24">int<pos:position pos:line="75" pos:column="27"/></name></type> <name pos:line="75" pos:column="28">sig_stat<pos:position pos:line="75" pos:column="36"/></name> <init pos:line="75" pos:column="37">= <expr><literal type="number" pos:line="75" pos:column="39">0<pos:position pos:line="75" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="75" pos:column="41"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="76" pos:column="15">gpgme_data_t<pos:position pos:line="76" pos:column="27"/></name></type> <name pos:line="76" pos:column="28">plaintext<pos:position pos:line="76" pos:column="37"/></name></decl>;<pos:position pos:line="76" pos:column="38"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="77" pos:column="15">gpgme_ctx_t<pos:position pos:line="77" pos:column="26"/></name></type> <name pos:line="77" pos:column="27">ctx<pos:position pos:line="77" pos:column="30"/></name></decl>;<pos:position pos:line="77" pos:column="31"/></decl_stmt>

              <expr_stmt><expr><name pos:line="79" pos:column="15">plaintext<pos:position pos:line="79" pos:column="24"/></name> <operator pos:line="79" pos:column="25">=<pos:position pos:line="79" pos:column="26"/></operator> <call><name pos:line="79" pos:column="27">create_gpgme_data<pos:position pos:line="79" pos:column="44"/></name> <argument_list pos:line="79" pos:column="45">()<pos:position pos:line="79" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="48"/></expr_stmt>
              <expr_stmt><expr><name pos:line="80" pos:column="15">ctx<pos:position pos:line="80" pos:column="18"/></name> <operator pos:line="80" pos:column="19">=<pos:position pos:line="80" pos:column="20"/></operator> <call><name pos:line="80" pos:column="21">create_gpgme_context<pos:position pos:line="80" pos:column="41"/></name> <argument_list pos:line="80" pos:column="42">(<argument><expr><literal type="number" pos:line="80" pos:column="43">0<pos:position pos:line="80" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="46"/></expr_stmt>

              <if pos:line="82" pos:column="15">if <condition pos:line="82" pos:column="18">(<expr><name pos:line="82" pos:column="19">clearsign<pos:position pos:line="82" pos:column="28"/></name></expr>)<pos:position pos:line="82" pos:column="29"/></condition><then pos:line="82" pos:column="29">
                <block type="pseudo"><expr_stmt><expr><name pos:line="83" pos:column="17">err<pos:position pos:line="83" pos:column="20"/></name> <operator pos:line="83" pos:column="21">=<pos:position pos:line="83" pos:column="22"/></operator> <call><name pos:line="83" pos:column="23">gpgme_op_verify<pos:position pos:line="83" pos:column="38"/></name> <argument_list pos:line="83" pos:column="39">(<argument><expr><name pos:line="83" pos:column="40">ctx<pos:position pos:line="83" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="45">armored_data<pos:position pos:line="83" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="59">NULL<pos:position pos:line="83" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="65">plaintext<pos:position pos:line="83" pos:column="74"/></name></expr></argument>)<pos:position pos:line="83" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="76"/></expr_stmt></block></then>
              <else pos:line="84" pos:column="15">else
                <block pos:line="85" pos:column="17">{
                  <expr_stmt><expr><name pos:line="86" pos:column="19">err<pos:position pos:line="86" pos:column="22"/></name> <operator pos:line="86" pos:column="23">=<pos:position pos:line="86" pos:column="24"/></operator> <call><name pos:line="86" pos:column="25">gpgme_op_decrypt_verify<pos:position pos:line="86" pos:column="48"/></name> <argument_list pos:line="86" pos:column="49">(<argument><expr><name pos:line="86" pos:column="50">ctx<pos:position pos:line="86" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="55">armored_data<pos:position pos:line="86" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="69">plaintext<pos:position pos:line="86" pos:column="78"/></name></expr></argument>)<pos:position pos:line="86" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="80"/></expr_stmt>
                  <if pos:line="87" pos:column="19">if <condition pos:line="87" pos:column="22">(<expr><call><name pos:line="87" pos:column="23">gpg_err_code<pos:position pos:line="87" pos:column="35"/></name> <argument_list pos:line="87" pos:column="36">(<argument><expr><name pos:line="87" pos:column="37">err<pos:position pos:line="87" pos:column="40"/></name></expr></argument>)<pos:position pos:line="87" pos:column="41"/></argument_list></call> <operator pos:line="87" pos:column="42">==<pos:position pos:line="87" pos:column="44"/></operator> <name pos:line="87" pos:column="45">GPG_ERR_NO_DATA<pos:position pos:line="87" pos:column="60"/></name></expr>)<pos:position pos:line="87" pos:column="61"/></condition><then pos:line="87" pos:column="61">
                    <block pos:line="88" pos:column="21">{
                      <comment type="block" pos:line="89" pos:column="23">/* Decrypt verify can't handle signed only messages. */</comment>
		      <expr_stmt><expr><name pos:line="90" pos:column="23">err<pos:position pos:line="90" pos:column="26"/></name> <operator pos:line="90" pos:column="27">=<pos:position pos:line="90" pos:column="28"/></operator> <ternary><condition><expr><operator pos:line="90" pos:column="29">(<pos:position pos:line="90" pos:column="30"/></operator><call><name pos:line="90" pos:column="30">gpgme_data_seek<pos:position pos:line="90" pos:column="45"/></name> <argument_list pos:line="90" pos:column="46">(<argument><expr><name pos:line="90" pos:column="47">armored_data<pos:position pos:line="90" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="61">0<pos:position pos:line="90" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="64">SEEK_SET<pos:position pos:line="90" pos:column="72"/></name></expr></argument>)<pos:position pos:line="90" pos:column="73"/></argument_list></call> <operator pos:line="90" pos:column="74">==<pos:position pos:line="90" pos:column="76"/></operator> <operator pos:line="90" pos:column="77">-<pos:position pos:line="90" pos:column="78"/></operator><literal type="number" pos:line="90" pos:column="78">1<pos:position pos:line="90" pos:column="79"/></literal><operator pos:line="90" pos:column="79">)<pos:position pos:line="90" pos:column="80"/></operator></expr>
			?<pos:position pos:line="91" pos:column="26"/></condition><then pos:line="91" pos:column="26"> <expr><call><name pos:line="91" pos:column="27">gpgme_error_from_errno<pos:position pos:line="91" pos:column="49"/></name> <argument_list pos:line="91" pos:column="50">(<argument><expr><name pos:line="91" pos:column="51">errno<pos:position pos:line="91" pos:column="56"/></name></expr></argument>)<pos:position pos:line="91" pos:column="57"/></argument_list></call></expr> <pos:position pos:line="91" pos:column="58"/></then><else pos:line="91" pos:column="58">: <expr><literal type="number" pos:line="91" pos:column="60">0<pos:position pos:line="91" pos:column="61"/></literal></expr></else></ternary></expr>;<pos:position pos:line="91" pos:column="62"/></expr_stmt>
                      <comment type="block" pos:line="92" pos:column="23">/* Must release plaintext so that we supply an
                         uninitialized object. */</comment>
                      <expr_stmt><expr><call><name pos:line="94" pos:column="23">gpgme_data_release<pos:position pos:line="94" pos:column="41"/></name> <argument_list pos:line="94" pos:column="42">(<argument><expr><name pos:line="94" pos:column="43">plaintext<pos:position pos:line="94" pos:column="52"/></name></expr></argument>)<pos:position pos:line="94" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="54"/></expr_stmt>
                      <expr_stmt><expr><name pos:line="95" pos:column="23">plaintext<pos:position pos:line="95" pos:column="32"/></name> <operator pos:line="95" pos:column="33">=<pos:position pos:line="95" pos:column="34"/></operator> <call><name pos:line="95" pos:column="35">create_gpgme_data<pos:position pos:line="95" pos:column="52"/></name> <argument_list pos:line="95" pos:column="53">()<pos:position pos:line="95" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="56"/></expr_stmt>
                      <expr_stmt><expr><name pos:line="96" pos:column="23">err<pos:position pos:line="96" pos:column="26"/></name> <operator pos:line="96" pos:column="27">=<pos:position pos:line="96" pos:column="28"/></operator> <call><name pos:line="96" pos:column="29">gpgme_op_verify<pos:position pos:line="96" pos:column="44"/></name> <argument_list pos:line="96" pos:column="45">(<argument><expr><name pos:line="96" pos:column="46">ctx<pos:position pos:line="96" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="51">armored_data<pos:position pos:line="96" pos:column="63"/></name></expr></argument>,
                                             <argument><expr><name pos:line="97" pos:column="46">NULL<pos:position pos:line="97" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="52">plaintext<pos:position pos:line="97" pos:column="61"/></name></expr></argument>)<pos:position pos:line="97" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="63"/></expr_stmt>
                    }<pos:position pos:line="98" pos:column="22"/></block></then></if>
                }<pos:position pos:line="99" pos:column="18"/></block></else></if>
              <expr_stmt><expr><call><name pos:line="100" pos:column="15">mutt_need_hard_redraw<pos:position pos:line="100" pos:column="36"/></name> <argument_list pos:line="100" pos:column="37">()<pos:position pos:line="100" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="40"/></expr_stmt>

              <if pos:line="102" pos:column="15">if <condition pos:line="102" pos:column="18">(<expr><name pos:line="102" pos:column="19">err<pos:position pos:line="102" pos:column="22"/></name></expr>)<pos:position pos:line="102" pos:column="23"/></condition><then pos:line="102" pos:column="23">
                <block pos:line="103" pos:column="17">{
                  <decl_stmt><decl><type><name pos:line="104" pos:column="19">char<pos:position pos:line="104" pos:column="23"/></name></type> <name><name pos:line="104" pos:column="24">errbuf<pos:position pos:line="104" pos:column="30"/></name><index pos:line="104" pos:column="30">[<expr><literal type="number" pos:line="104" pos:column="31">200<pos:position pos:line="104" pos:column="34"/></literal></expr>]<pos:position pos:line="104" pos:column="35"/></index></name></decl>;<pos:position pos:line="104" pos:column="36"/></decl_stmt>
                  
                  <expr_stmt><expr><call><name pos:line="106" pos:column="19">snprintf<pos:position pos:line="106" pos:column="27"/></name> <argument_list pos:line="106" pos:column="28">(<argument><expr><name pos:line="106" pos:column="29">errbuf<pos:position pos:line="106" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="106" pos:column="37">sizeof<argument_list pos:line="106" pos:column="43">(<argument><expr><name pos:line="106" pos:column="44">errbuf<pos:position pos:line="106" pos:column="50"/></name></expr></argument>)<pos:position pos:line="106" pos:column="51"/></argument_list></sizeof><operator pos:line="106" pos:column="51">-<pos:position pos:line="106" pos:column="52"/></operator><literal type="number" pos:line="106" pos:column="52">1<pos:position pos:line="106" pos:column="53"/></literal></expr></argument>, 
                            <argument><expr><call><name pos:line="107" pos:column="29">_<pos:position pos:line="107" pos:column="30"/></name><argument_list pos:line="107" pos:column="30">(<argument><expr><literal type="string" pos:line="107" pos:column="31">"Error: decryption/verification failed: %s\n"<pos:position pos:line="107" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="77"/></argument_list></call></expr></argument>,
                            <argument><expr><call><name pos:line="108" pos:column="29">gpgme_strerror<pos:position pos:line="108" pos:column="43"/></name> <argument_list pos:line="108" pos:column="44">(<argument><expr><name pos:line="108" pos:column="45">err<pos:position pos:line="108" pos:column="48"/></name></expr></argument>)<pos:position pos:line="108" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="108" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="51"/></expr_stmt>
                  <expr_stmt><expr><call><name pos:line="109" pos:column="19">state_puts<pos:position pos:line="109" pos:column="29"/></name> <argument_list pos:line="109" pos:column="30">(<argument><expr><name pos:line="109" pos:column="31">errbuf<pos:position pos:line="109" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="39">s<pos:position pos:line="109" pos:column="40"/></name></expr></argument>)<pos:position pos:line="109" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="42"/></expr_stmt>
                }<pos:position pos:line="110" pos:column="18"/></block></then>
              <else pos:line="111" pos:column="15">else
                <block pos:line="112" pos:column="17">{ <comment type="block" pos:line="112" pos:column="19">/* Decryption/Verification succeeded */</comment>
                  <decl_stmt><decl><type><name pos:line="113" pos:column="19">char<pos:position pos:line="113" pos:column="23"/></name> <modifier pos:line="113" pos:column="24">*<pos:position pos:line="113" pos:column="25"/></modifier></type><name pos:line="113" pos:column="25">tmpfname<pos:position pos:line="113" pos:column="33"/></name></decl>;<pos:position pos:line="113" pos:column="34"/></decl_stmt>

		  <block pos:line="115" pos:column="19">{
		    <comment type="block" pos:line="116" pos:column="21">/* Check whether signatures have been verified.  */</comment>
		    <decl_stmt><decl><type><name pos:line="117" pos:column="21">gpgme_verify_result_t<pos:position pos:line="117" pos:column="42"/></name></type> <name pos:line="117" pos:column="43">verify_result<pos:position pos:line="117" pos:column="56"/></name></decl>;<pos:position pos:line="117" pos:column="57"/></decl_stmt>

                    <expr_stmt><expr><name pos:line="119" pos:column="21">verify_result<pos:position pos:line="119" pos:column="34"/></name> <operator pos:line="119" pos:column="35">=<pos:position pos:line="119" pos:column="36"/></operator> <call><name pos:line="119" pos:column="37">gpgme_op_verify_result<pos:position pos:line="119" pos:column="59"/></name> <argument_list pos:line="119" pos:column="60">(<argument><expr><name pos:line="119" pos:column="61">ctx<pos:position pos:line="119" pos:column="64"/></name></expr></argument>)<pos:position pos:line="119" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="66"/></expr_stmt>
		    <if pos:line="120" pos:column="21">if <condition pos:line="120" pos:column="24">(<expr><name><name pos:line="120" pos:column="25">verify_result<pos:position pos:line="120" pos:column="38"/></name><operator pos:line="120" pos:column="38">-&gt;<pos:position pos:line="120" pos:column="43"/></operator><name pos:line="120" pos:column="40">signatures<pos:position pos:line="120" pos:column="50"/></name></name></expr>)<pos:position pos:line="120" pos:column="51"/></condition><then pos:line="120" pos:column="51">
		      <block type="pseudo"><expr_stmt><expr><name pos:line="121" pos:column="23">sig_stat<pos:position pos:line="121" pos:column="31"/></name> <operator pos:line="121" pos:column="32">=<pos:position pos:line="121" pos:column="33"/></operator> <literal type="number" pos:line="121" pos:column="34">1<pos:position pos:line="121" pos:column="35"/></literal></expr>;<pos:position pos:line="121" pos:column="36"/></expr_stmt></block></then></if>
		  }<pos:position pos:line="122" pos:column="20"/></block>

                  <expr_stmt><expr><name pos:line="124" pos:column="19">have_any_sigs<pos:position pos:line="124" pos:column="32"/></name> <operator pos:line="124" pos:column="33">=<pos:position pos:line="124" pos:column="34"/></operator> <literal type="number" pos:line="124" pos:column="35">0<pos:position pos:line="124" pos:column="36"/></literal></expr>;<pos:position pos:line="124" pos:column="37"/></expr_stmt>
                  <expr_stmt><expr><name pos:line="125" pos:column="19">maybe_goodsig<pos:position pos:line="125" pos:column="32"/></name> <operator pos:line="125" pos:column="33">=<pos:position pos:line="125" pos:column="34"/></operator> <literal type="number" pos:line="125" pos:column="35">0<pos:position pos:line="125" pos:column="36"/></literal></expr>;<pos:position pos:line="125" pos:column="37"/></expr_stmt>
                  <if pos:line="126" pos:column="19">if <condition pos:line="126" pos:column="22">(<expr><operator pos:line="126" pos:column="23">(<pos:position pos:line="126" pos:column="24"/></operator><name><name pos:line="126" pos:column="24">s<pos:position pos:line="126" pos:column="25"/></name><operator pos:line="126" pos:column="25">-&gt;<pos:position pos:line="126" pos:column="30"/></operator><name pos:line="126" pos:column="27">flags<pos:position pos:line="126" pos:column="32"/></name></name> <operator pos:line="126" pos:column="33">&amp;<pos:position pos:line="126" pos:column="38"/></operator> <name pos:line="126" pos:column="35">MUTT_DISPLAY<pos:position pos:line="126" pos:column="47"/></name><operator pos:line="126" pos:column="47">)<pos:position pos:line="126" pos:column="48"/></operator> <operator pos:line="126" pos:column="49">&amp;&amp;<pos:position pos:line="126" pos:column="59"/></operator> <name pos:line="126" pos:column="52">sig_stat<pos:position pos:line="126" pos:column="60"/></name></expr>)<pos:position pos:line="126" pos:column="61"/></condition><then pos:line="126" pos:column="61">
                    <block pos:line="127" pos:column="21">{
                      <decl_stmt><decl><type><name pos:line="128" pos:column="23">int<pos:position pos:line="128" pos:column="26"/></name></type> <name pos:line="128" pos:column="27">res<pos:position pos:line="128" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="128" pos:column="32">idx<pos:position pos:line="128" pos:column="35"/></name></decl>;<pos:position pos:line="128" pos:column="36"/></decl_stmt>
                      <decl_stmt><decl><type><name pos:line="129" pos:column="23">int<pos:position pos:line="129" pos:column="26"/></name></type> <name pos:line="129" pos:column="27">anybad<pos:position pos:line="129" pos:column="33"/></name> <init pos:line="129" pos:column="34">= <expr><literal type="number" pos:line="129" pos:column="36">0<pos:position pos:line="129" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="129" pos:column="38"/></decl_stmt>

                      <expr_stmt><expr><call><name pos:line="131" pos:column="23">state_attach_puts<pos:position pos:line="131" pos:column="40"/></name> <argument_list pos:line="131" pos:column="41">(<argument><expr><call><name pos:line="131" pos:column="42">_<pos:position pos:line="131" pos:column="43"/></name><argument_list pos:line="131" pos:column="43">(<argument><expr><literal type="string" pos:line="131" pos:column="44">"[-- Begin signature "<pos:position pos:line="131" pos:column="66"/></literal>
                                           <literal type="string" pos:line="132" pos:column="44">"information --]\n"<pos:position pos:line="132" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="132" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="132" pos:column="66">s<pos:position pos:line="132" pos:column="67"/></name></expr></argument>)<pos:position pos:line="132" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="69"/></expr_stmt>
                      <expr_stmt><expr><name pos:line="133" pos:column="23">have_any_sigs<pos:position pos:line="133" pos:column="36"/></name> <operator pos:line="133" pos:column="37">=<pos:position pos:line="133" pos:column="38"/></operator> <literal type="number" pos:line="133" pos:column="39">1<pos:position pos:line="133" pos:column="40"/></literal></expr>;<pos:position pos:line="133" pos:column="41"/></expr_stmt>
                      <for pos:line="134" pos:column="23">for<control pos:line="134" pos:column="26">(<init><expr><name pos:line="134" pos:column="27">idx<pos:position pos:line="134" pos:column="30"/></name><operator pos:line="134" pos:column="30">=<pos:position pos:line="134" pos:column="31"/></operator><literal type="number" pos:line="134" pos:column="31">0<pos:position pos:line="134" pos:column="32"/></literal></expr>;<pos:position pos:line="134" pos:column="33"/></init>
                          <condition><expr><operator pos:line="135" pos:column="27">(<pos:position pos:line="135" pos:column="28"/></operator><name pos:line="135" pos:column="28">res<pos:position pos:line="135" pos:column="31"/></name> <operator pos:line="135" pos:column="32">=<pos:position pos:line="135" pos:column="33"/></operator> <call><name pos:line="135" pos:column="34">show_one_sig_status<pos:position pos:line="135" pos:column="53"/></name> <argument_list pos:line="135" pos:column="54">(<argument><expr><name pos:line="135" pos:column="55">ctx<pos:position pos:line="135" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="60">idx<pos:position pos:line="135" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="65">s<pos:position pos:line="135" pos:column="66"/></name></expr></argument>)<pos:position pos:line="135" pos:column="67"/></argument_list></call><operator pos:line="135" pos:column="67">)<pos:position pos:line="135" pos:column="68"/></operator> <operator pos:line="135" pos:column="69">!=<pos:position pos:line="135" pos:column="71"/></operator> <operator pos:line="135" pos:column="72">-<pos:position pos:line="135" pos:column="73"/></operator><literal type="number" pos:line="135" pos:column="73">1<pos:position pos:line="135" pos:column="74"/></literal></expr>;<pos:position pos:line="135" pos:column="75"/></condition>
                          <incr><expr><name pos:line="136" pos:column="27">idx<pos:position pos:line="136" pos:column="30"/></name><operator pos:line="136" pos:column="30">++<pos:position pos:line="136" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="136" pos:column="33"/></control>
                        <block pos:line="137" pos:column="25">{
                          <if pos:line="138" pos:column="27">if <condition pos:line="138" pos:column="30">(<expr><name pos:line="138" pos:column="31">res<pos:position pos:line="138" pos:column="34"/></name> <operator pos:line="138" pos:column="35">==<pos:position pos:line="138" pos:column="37"/></operator> <literal type="number" pos:line="138" pos:column="38">1<pos:position pos:line="138" pos:column="39"/></literal></expr>)<pos:position pos:line="138" pos:column="40"/></condition><then pos:line="138" pos:column="40">
                            <block type="pseudo"><expr_stmt><expr><name pos:line="139" pos:column="29">anybad<pos:position pos:line="139" pos:column="35"/></name> <operator pos:line="139" pos:column="36">=<pos:position pos:line="139" pos:column="37"/></operator> <literal type="number" pos:line="139" pos:column="38">1<pos:position pos:line="139" pos:column="39"/></literal></expr>;<pos:position pos:line="139" pos:column="40"/></expr_stmt></block></then></if>
                        }<pos:position pos:line="140" pos:column="26"/></block></for>
                      <if pos:line="141" pos:column="23">if <condition pos:line="141" pos:column="26">(<expr><operator pos:line="141" pos:column="27">!<pos:position pos:line="141" pos:column="28"/></operator><name pos:line="141" pos:column="28">anybad<pos:position pos:line="141" pos:column="34"/></name> <operator pos:line="141" pos:column="35">&amp;&amp;<pos:position pos:line="141" pos:column="45"/></operator> <name pos:line="141" pos:column="38">idx<pos:position pos:line="141" pos:column="41"/></name></expr>)<pos:position pos:line="141" pos:column="42"/></condition><then pos:line="141" pos:column="42">
                        <block type="pseudo"><expr_stmt><expr><name pos:line="142" pos:column="25">maybe_goodsig<pos:position pos:line="142" pos:column="38"/></name> <operator pos:line="142" pos:column="39">=<pos:position pos:line="142" pos:column="40"/></operator> <literal type="number" pos:line="142" pos:column="41">1<pos:position pos:line="142" pos:column="42"/></literal></expr>;<pos:position pos:line="142" pos:column="43"/></expr_stmt></block></then></if>
                      
                      <expr_stmt><expr><call><name pos:line="144" pos:column="23">state_attach_puts<pos:position pos:line="144" pos:column="40"/></name> <argument_list pos:line="144" pos:column="41">(<argument><expr><call><name pos:line="144" pos:column="42">_<pos:position pos:line="144" pos:column="43"/></name><argument_list pos:line="144" pos:column="43">(<argument><expr><literal type="string" pos:line="144" pos:column="44">"[-- End signature "<pos:position pos:line="144" pos:column="64"/></literal>
                                           <literal type="string" pos:line="145" pos:column="44">"information --]\n\n"<pos:position pos:line="145" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="145" pos:column="68">s<pos:position pos:line="145" pos:column="69"/></name></expr></argument>)<pos:position pos:line="145" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="71"/></expr_stmt>
                    }<pos:position pos:line="146" pos:column="22"/></block></then></if>

                  <expr_stmt><expr><name pos:line="148" pos:column="19">tmpfname<pos:position pos:line="148" pos:column="27"/></name> <operator pos:line="148" pos:column="28">=<pos:position pos:line="148" pos:column="29"/></operator> <call><name pos:line="148" pos:column="30">data_object_to_tempfile<pos:position pos:line="148" pos:column="53"/></name> <argument_list pos:line="148" pos:column="54">(<argument><expr><name pos:line="148" pos:column="55">plaintext<pos:position pos:line="148" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="66">NULL<pos:position pos:line="148" pos:column="70"/></name></expr></argument>, <argument><expr><operator pos:line="148" pos:column="72">&amp;<pos:position pos:line="148" pos:column="77"/></operator><name pos:line="148" pos:column="73">pgpout<pos:position pos:line="148" pos:column="79"/></name></expr></argument>)<pos:position pos:line="148" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="81"/></expr_stmt>
                  <if pos:line="149" pos:column="19">if <condition pos:line="149" pos:column="22">(<expr><operator pos:line="149" pos:column="23">!<pos:position pos:line="149" pos:column="24"/></operator><name pos:line="149" pos:column="24">tmpfname<pos:position pos:line="149" pos:column="32"/></name></expr>)<pos:position pos:line="149" pos:column="33"/></condition><then pos:line="149" pos:column="33">
                    <block pos:line="150" pos:column="21">{
                      <expr_stmt><expr><name pos:line="151" pos:column="23">pgpout<pos:position pos:line="151" pos:column="29"/></name> <operator pos:line="151" pos:column="30">=<pos:position pos:line="151" pos:column="31"/></operator> <name pos:line="151" pos:column="32">NULL<pos:position pos:line="151" pos:column="36"/></name></expr>;<pos:position pos:line="151" pos:column="37"/></expr_stmt>
                      <expr_stmt><expr><call><name pos:line="152" pos:column="23">state_puts<pos:position pos:line="152" pos:column="33"/></name> <argument_list pos:line="152" pos:column="34">(<argument><expr><call><name pos:line="152" pos:column="35">_<pos:position pos:line="152" pos:column="36"/></name><argument_list pos:line="152" pos:column="36">(<argument><expr><literal type="string" pos:line="152" pos:column="37">"Error: copy data failed\n"<pos:position pos:line="152" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="152" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="152" pos:column="67">s<pos:position pos:line="152" pos:column="68"/></name></expr></argument>)<pos:position pos:line="152" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="70"/></expr_stmt>
                    }<pos:position pos:line="153" pos:column="22"/></block></then>
                  <else pos:line="154" pos:column="19">else
                    <block pos:line="155" pos:column="21">{
                      <expr_stmt><expr><call><name pos:line="156" pos:column="23">unlink<pos:position pos:line="156" pos:column="29"/></name> <argument_list pos:line="156" pos:column="30">(<argument><expr><name pos:line="156" pos:column="31">tmpfname<pos:position pos:line="156" pos:column="39"/></name></expr></argument>)<pos:position pos:line="156" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="41"/></expr_stmt>
                      <expr_stmt><expr><call><name pos:line="157" pos:column="23">FREE<pos:position pos:line="157" pos:column="27"/></name> <argument_list pos:line="157" pos:column="28">(<argument><expr><operator pos:line="157" pos:column="29">&amp;<pos:position pos:line="157" pos:column="34"/></operator><name pos:line="157" pos:column="30">tmpfname<pos:position pos:line="157" pos:column="38"/></name></expr></argument>)<pos:position pos:line="157" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="40"/></expr_stmt>
                    }<pos:position pos:line="158" pos:column="22"/></block></else></if>
                }<pos:position pos:line="159" pos:column="18"/></block></else></if>
              <expr_stmt><expr><call><name pos:line="160" pos:column="15">gpgme_data_release<pos:position pos:line="160" pos:column="33"/></name> <argument_list pos:line="160" pos:column="34">(<argument><expr><name pos:line="160" pos:column="35">plaintext<pos:position pos:line="160" pos:column="44"/></name></expr></argument>)<pos:position pos:line="160" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="46"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="161" pos:column="15">gpgme_release<pos:position pos:line="161" pos:column="28"/></name> <argument_list pos:line="161" pos:column="29">(<argument><expr><name pos:line="161" pos:column="30">ctx<pos:position pos:line="161" pos:column="33"/></name></expr></argument>)<pos:position pos:line="161" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="35"/></expr_stmt>
            }<pos:position pos:line="162" pos:column="14"/></block></then></if></elseif></if>
      
          <comment type="block" pos:line="164" pos:column="11">/*
           * Now, copy cleartext to the screen.  NOTE - we expect that PGP
           * outputs utf-8 cleartext.  This may not always be true, but it 
           * seems to be a reasonable guess.
           */</comment>
          
          <if pos:line="170" pos:column="11">if<condition pos:line="170" pos:column="13">(<expr><name><name pos:line="170" pos:column="14">s<pos:position pos:line="170" pos:column="15"/></name><operator pos:line="170" pos:column="15">-&gt;<pos:position pos:line="170" pos:column="20"/></operator><name pos:line="170" pos:column="17">flags<pos:position pos:line="170" pos:column="22"/></name></name> <operator pos:line="170" pos:column="23">&amp;<pos:position pos:line="170" pos:column="28"/></operator> <name pos:line="170" pos:column="25">MUTT_DISPLAY<pos:position pos:line="170" pos:column="37"/></name></expr>)<pos:position pos:line="170" pos:column="38"/></condition><then pos:line="170" pos:column="38">
            <block pos:line="171" pos:column="13">{
              <if pos:line="172" pos:column="15">if <condition pos:line="172" pos:column="18">(<expr><name pos:line="172" pos:column="19">needpass<pos:position pos:line="172" pos:column="27"/></name></expr>)<pos:position pos:line="172" pos:column="28"/></condition><then pos:line="172" pos:column="28">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="173" pos:column="13">state_attach_puts<pos:position pos:line="173" pos:column="30"/></name> <argument_list pos:line="173" pos:column="31">(<argument><expr><call><name pos:line="173" pos:column="32">_<pos:position pos:line="173" pos:column="33"/></name><argument_list pos:line="173" pos:column="33">(<argument><expr><literal type="string" pos:line="173" pos:column="34">"[-- BEGIN PGP MESSAGE --]\n\n"<pos:position pos:line="173" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="173" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="173" pos:column="68">s<pos:position pos:line="173" pos:column="69"/></name></expr></argument>)<pos:position pos:line="173" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="71"/></expr_stmt></block></then>
              <elseif pos:line="174" pos:column="15">else <if pos:line="174" pos:column="20">if <condition pos:line="174" pos:column="23">(<expr><name pos:line="174" pos:column="24">pgp_keyblock<pos:position pos:line="174" pos:column="36"/></name></expr>)<pos:position pos:line="174" pos:column="37"/></condition><then pos:line="174" pos:column="37">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="175" pos:column="17">state_attach_puts<pos:position pos:line="175" pos:column="34"/></name> <argument_list pos:line="175" pos:column="35">(<argument><expr><call><name pos:line="175" pos:column="36">_<pos:position pos:line="175" pos:column="37"/></name><argument_list pos:line="175" pos:column="37">(<argument><expr><literal type="string" pos:line="175" pos:column="38">"[-- BEGIN PGP PUBLIC KEY BLOCK --]\n"<pos:position pos:line="175" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="175" pos:column="77"/></argument_list></call></expr></argument>,
                                   <argument><expr><name pos:line="176" pos:column="36">s<pos:position pos:line="176" pos:column="37"/></name></expr></argument>)<pos:position pos:line="176" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="39"/></expr_stmt></block></then></if></elseif>
              <else pos:line="177" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="178" pos:column="17">state_attach_puts<pos:position pos:line="178" pos:column="34"/></name> <argument_list pos:line="178" pos:column="35">(<argument><expr><call><name pos:line="178" pos:column="36">_<pos:position pos:line="178" pos:column="37"/></name><argument_list pos:line="178" pos:column="37">(<argument><expr><literal type="string" pos:line="178" pos:column="38">"[-- BEGIN PGP SIGNED MESSAGE --]\n\n"<pos:position pos:line="178" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="178" pos:column="77"/></argument_list></call></expr></argument>,
                                   <argument><expr><name pos:line="179" pos:column="36">s<pos:position pos:line="179" pos:column="37"/></name></expr></argument>)<pos:position pos:line="179" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="39"/></expr_stmt></block></else></if>
            }<pos:position pos:line="180" pos:column="14"/></block></then></if>
          
          <if pos:line="182" pos:column="11">if <condition pos:line="182" pos:column="14">(<expr><name pos:line="182" pos:column="15">clearsign<pos:position pos:line="182" pos:column="24"/></name></expr>)<pos:position pos:line="182" pos:column="25"/></condition><then pos:line="182" pos:column="25">
            <block pos:line="183" pos:column="13">{
              <expr_stmt><expr><call><name pos:line="184" pos:column="15">copy_clearsigned<pos:position pos:line="184" pos:column="31"/></name> <argument_list pos:line="184" pos:column="32">(<argument><expr><name pos:line="184" pos:column="33">armored_data<pos:position pos:line="184" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="184" pos:column="47">s<pos:position pos:line="184" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="184" pos:column="50">body_charset<pos:position pos:line="184" pos:column="62"/></name></expr></argument>)<pos:position pos:line="184" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="64"/></expr_stmt>
            }<pos:position pos:line="185" pos:column="14"/></block></then>
          <elseif pos:line="186" pos:column="11">else <if pos:line="186" pos:column="16">if <condition pos:line="186" pos:column="19">(<expr><name pos:line="186" pos:column="20">pgpout<pos:position pos:line="186" pos:column="26"/></name></expr>)<pos:position pos:line="186" pos:column="27"/></condition><then pos:line="186" pos:column="27">
            <block pos:line="187" pos:column="13">{
              <decl_stmt><decl><type><name pos:line="188" pos:column="15">FGETCONV<pos:position pos:line="188" pos:column="23"/></name> <modifier pos:line="188" pos:column="24">*<pos:position pos:line="188" pos:column="25"/></modifier></type><name pos:line="188" pos:column="25">fc<pos:position pos:line="188" pos:column="27"/></name></decl>;<pos:position pos:line="188" pos:column="28"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="189" pos:column="15">int<pos:position pos:line="189" pos:column="18"/></name></type> <name pos:line="189" pos:column="19">c<pos:position pos:line="189" pos:column="20"/></name></decl>;<pos:position pos:line="189" pos:column="21"/></decl_stmt>
              <expr_stmt><expr><call><name pos:line="190" pos:column="15">rewind<pos:position pos:line="190" pos:column="21"/></name> <argument_list pos:line="190" pos:column="22">(<argument><expr><name pos:line="190" pos:column="23">pgpout<pos:position pos:line="190" pos:column="29"/></name></expr></argument>)<pos:position pos:line="190" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="31"/></expr_stmt>
              <expr_stmt><expr><name pos:line="191" pos:column="15">fc<pos:position pos:line="191" pos:column="17"/></name> <operator pos:line="191" pos:column="18">=<pos:position pos:line="191" pos:column="19"/></operator> <call><name pos:line="191" pos:column="20">fgetconv_open<pos:position pos:line="191" pos:column="33"/></name> <argument_list pos:line="191" pos:column="34">(<argument><expr><name pos:line="191" pos:column="35">pgpout<pos:position pos:line="191" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="191" pos:column="43">"utf-8"<pos:position pos:line="191" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="191" pos:column="52">Charset<pos:position pos:line="191" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="191" pos:column="61">0<pos:position pos:line="191" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="191" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="64"/></expr_stmt>
              <while pos:line="192" pos:column="15">while <condition pos:line="192" pos:column="21">(<expr><operator pos:line="192" pos:column="22">(<pos:position pos:line="192" pos:column="23"/></operator><name pos:line="192" pos:column="23">c<pos:position pos:line="192" pos:column="24"/></name> <operator pos:line="192" pos:column="25">=<pos:position pos:line="192" pos:column="26"/></operator> <call><name pos:line="192" pos:column="27">fgetconv<pos:position pos:line="192" pos:column="35"/></name> <argument_list pos:line="192" pos:column="36">(<argument><expr><name pos:line="192" pos:column="37">fc<pos:position pos:line="192" pos:column="39"/></name></expr></argument>)<pos:position pos:line="192" pos:column="40"/></argument_list></call><operator pos:line="192" pos:column="40">)<pos:position pos:line="192" pos:column="41"/></operator> <operator pos:line="192" pos:column="42">!=<pos:position pos:line="192" pos:column="44"/></operator> <name pos:line="192" pos:column="45">EOF<pos:position pos:line="192" pos:column="48"/></name></expr>)<pos:position pos:line="192" pos:column="49"/></condition>
                <block pos:line="193" pos:column="17">{
                  <expr_stmt><expr><call><name pos:line="194" pos:column="19">state_putc<pos:position pos:line="194" pos:column="29"/></name> <argument_list pos:line="194" pos:column="30">(<argument><expr><name pos:line="194" pos:column="31">c<pos:position pos:line="194" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="34">s<pos:position pos:line="194" pos:column="35"/></name></expr></argument>)<pos:position pos:line="194" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="37"/></expr_stmt>
                  <if pos:line="195" pos:column="19">if <condition pos:line="195" pos:column="22">(<expr><name pos:line="195" pos:column="23">c<pos:position pos:line="195" pos:column="24"/></name> <operator pos:line="195" pos:column="25">==<pos:position pos:line="195" pos:column="27"/></operator> <literal type="char" pos:line="195" pos:column="28">'\n'<pos:position pos:line="195" pos:column="32"/></literal> <operator pos:line="195" pos:column="33">&amp;&amp;<pos:position pos:line="195" pos:column="43"/></operator> <name><name pos:line="195" pos:column="36">s<pos:position pos:line="195" pos:column="37"/></name><operator pos:line="195" pos:column="37">-&gt;<pos:position pos:line="195" pos:column="42"/></operator><name pos:line="195" pos:column="39">prefix<pos:position pos:line="195" pos:column="45"/></name></name></expr>)<pos:position pos:line="195" pos:column="46"/></condition><then pos:line="195" pos:column="46">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="196" pos:column="21">state_puts<pos:position pos:line="196" pos:column="31"/></name> <argument_list pos:line="196" pos:column="32">(<argument><expr><name><name pos:line="196" pos:column="33">s<pos:position pos:line="196" pos:column="34"/></name><operator pos:line="196" pos:column="34">-&gt;<pos:position pos:line="196" pos:column="39"/></operator><name pos:line="196" pos:column="36">prefix<pos:position pos:line="196" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="196" pos:column="44">s<pos:position pos:line="196" pos:column="45"/></name></expr></argument>)<pos:position pos:line="196" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="47"/></expr_stmt></block></then></if>
                }<pos:position pos:line="197" pos:column="18"/></block></while>
              <expr_stmt><expr><call><name pos:line="198" pos:column="15">fgetconv_close<pos:position pos:line="198" pos:column="29"/></name> <argument_list pos:line="198" pos:column="30">(<argument><expr><operator pos:line="198" pos:column="31">&amp;<pos:position pos:line="198" pos:column="36"/></operator><name pos:line="198" pos:column="32">fc<pos:position pos:line="198" pos:column="34"/></name></expr></argument>)<pos:position pos:line="198" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="199" pos:column="14"/></block></then></if></elseif></if>
          
          <if pos:line="201" pos:column="11">if <condition pos:line="201" pos:column="14">(<expr><name><name pos:line="201" pos:column="15">s<pos:position pos:line="201" pos:column="16"/></name><operator pos:line="201" pos:column="16">-&gt;<pos:position pos:line="201" pos:column="21"/></operator><name pos:line="201" pos:column="18">flags<pos:position pos:line="201" pos:column="23"/></name></name> <operator pos:line="201" pos:column="24">&amp;<pos:position pos:line="201" pos:column="29"/></operator> <name pos:line="201" pos:column="26">MUTT_DISPLAY<pos:position pos:line="201" pos:column="38"/></name></expr>)<pos:position pos:line="201" pos:column="39"/></condition><then pos:line="201" pos:column="39">
            <block pos:line="202" pos:column="13">{
              <expr_stmt><expr><call><name pos:line="203" pos:column="15">state_putc<pos:position pos:line="203" pos:column="25"/></name> <argument_list pos:line="203" pos:column="26">(<argument><expr><literal type="char" pos:line="203" pos:column="27">'\n'<pos:position pos:line="203" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="203" pos:column="33">s<pos:position pos:line="203" pos:column="34"/></name></expr></argument>)<pos:position pos:line="203" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="36"/></expr_stmt>
              <if pos:line="204" pos:column="15">if <condition pos:line="204" pos:column="18">(<expr><name pos:line="204" pos:column="19">needpass<pos:position pos:line="204" pos:column="27"/></name></expr>)<pos:position pos:line="204" pos:column="28"/></condition><then pos:line="204" pos:column="28">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="205" pos:column="17">state_attach_puts<pos:position pos:line="205" pos:column="34"/></name> <argument_list pos:line="205" pos:column="35">(<argument><expr><call><name pos:line="205" pos:column="36">_<pos:position pos:line="205" pos:column="37"/></name><argument_list pos:line="205" pos:column="37">(<argument><expr><literal type="string" pos:line="205" pos:column="38">"[-- END PGP MESSAGE --]\n"<pos:position pos:line="205" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="205" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="205" pos:column="68">s<pos:position pos:line="205" pos:column="69"/></name></expr></argument>)<pos:position pos:line="205" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="71"/></expr_stmt></block></then>
              <elseif pos:line="206" pos:column="15">else <if pos:line="206" pos:column="20">if <condition pos:line="206" pos:column="23">(<expr><name pos:line="206" pos:column="24">pgp_keyblock<pos:position pos:line="206" pos:column="36"/></name></expr>)<pos:position pos:line="206" pos:column="37"/></condition><then pos:line="206" pos:column="37">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="207" pos:column="17">state_attach_puts<pos:position pos:line="207" pos:column="34"/></name> <argument_list pos:line="207" pos:column="35">(<argument><expr><call><name pos:line="207" pos:column="36">_<pos:position pos:line="207" pos:column="37"/></name><argument_list pos:line="207" pos:column="37">(<argument><expr><literal type="string" pos:line="207" pos:column="38">"[-- END PGP PUBLIC KEY BLOCK --]\n"<pos:position pos:line="207" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="207" pos:column="75"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="207" pos:column="77">s<pos:position pos:line="207" pos:column="78"/></name></expr></argument>)<pos:position pos:line="207" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="80"/></expr_stmt></block></then></if></elseif>
              <else pos:line="208" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="209" pos:column="17">state_attach_puts<pos:position pos:line="209" pos:column="34"/></name> <argument_list pos:line="209" pos:column="35">(<argument><expr><call><name pos:line="209" pos:column="36">_<pos:position pos:line="209" pos:column="37"/></name><argument_list pos:line="209" pos:column="37">(<argument><expr><literal type="string" pos:line="209" pos:column="38">"[-- END PGP SIGNED MESSAGE --]\n"<pos:position pos:line="209" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="209" pos:column="73"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="209" pos:column="75">s<pos:position pos:line="209" pos:column="76"/></name></expr></argument>)<pos:position pos:line="209" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="78"/></expr_stmt></block></else></if>
            }<pos:position pos:line="210" pos:column="14"/></block></then></if>
          
          <expr_stmt><expr><call><name pos:line="212" pos:column="11">gpgme_data_release<pos:position pos:line="212" pos:column="29"/></name> <argument_list pos:line="212" pos:column="30">(<argument><expr><name pos:line="212" pos:column="31">armored_data<pos:position pos:line="212" pos:column="43"/></name></expr></argument>)<pos:position pos:line="212" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="45"/></expr_stmt>
          <if pos:line="213" pos:column="11">if <condition pos:line="213" pos:column="14">(<expr><name pos:line="213" pos:column="15">pgpout<pos:position pos:line="213" pos:column="21"/></name></expr>)<pos:position pos:line="213" pos:column="22"/></condition><then pos:line="213" pos:column="22">
            <block pos:line="214" pos:column="13">{
              <expr_stmt><expr><call><name pos:line="215" pos:column="15">safe_fclose<pos:position pos:line="215" pos:column="26"/></name> <argument_list pos:line="215" pos:column="27">(<argument><expr><operator pos:line="215" pos:column="28">&amp;<pos:position pos:line="215" pos:column="33"/></operator><name pos:line="215" pos:column="29">pgpout<pos:position pos:line="215" pos:column="35"/></name></expr></argument>)<pos:position pos:line="215" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="216" pos:column="14"/></block></then></if>
        }<pos:position pos:line="217" pos:column="10"/></block></then>
      <else pos:line="218" pos:column="7">else
      <block pos:line="219" pos:column="7">{
	<comment type="block" pos:line="220" pos:column="9">/* A traditional PGP part may mix signed and unsigned content */</comment>
        <comment type="block" pos:line="221" pos:column="9">/* XXX - we may wish to recode here */</comment>
        <if pos:line="222" pos:column="9">if <condition pos:line="222" pos:column="12">(<expr><name><name pos:line="222" pos:column="13">s<pos:position pos:line="222" pos:column="14"/></name><operator pos:line="222" pos:column="14">-&gt;<pos:position pos:line="222" pos:column="19"/></operator><name pos:line="222" pos:column="16">prefix<pos:position pos:line="222" pos:column="22"/></name></name></expr>)<pos:position pos:line="222" pos:column="23"/></condition><then pos:line="222" pos:column="23">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="223" pos:column="11">state_puts<pos:position pos:line="223" pos:column="21"/></name> <argument_list pos:line="223" pos:column="22">(<argument><expr><name><name pos:line="223" pos:column="23">s<pos:position pos:line="223" pos:column="24"/></name><operator pos:line="223" pos:column="24">-&gt;<pos:position pos:line="223" pos:column="29"/></operator><name pos:line="223" pos:column="26">prefix<pos:position pos:line="223" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="223" pos:column="34">s<pos:position pos:line="223" pos:column="35"/></name></expr></argument>)<pos:position pos:line="223" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="37"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="224" pos:column="9">state_puts<pos:position pos:line="224" pos:column="19"/></name> <argument_list pos:line="224" pos:column="20">(<argument><expr><name pos:line="224" pos:column="21">buf<pos:position pos:line="224" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="224" pos:column="26">s<pos:position pos:line="224" pos:column="27"/></name></expr></argument>)<pos:position pos:line="224" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="29"/></expr_stmt>
      }<pos:position pos:line="225" pos:column="8"/></block></else></if>
    }<pos:position pos:line="226" pos:column="6"/></block></for>

  <expr_stmt><expr><name><name pos:line="228" pos:column="3">m<pos:position pos:line="228" pos:column="4"/></name><operator pos:line="228" pos:column="4">-&gt;<pos:position pos:line="228" pos:column="9"/></operator><name pos:line="228" pos:column="6">goodsig<pos:position pos:line="228" pos:column="13"/></name></name> <operator pos:line="228" pos:column="14">=<pos:position pos:line="228" pos:column="15"/></operator> <operator pos:line="228" pos:column="16">(<pos:position pos:line="228" pos:column="17"/></operator><name pos:line="228" pos:column="17">maybe_goodsig<pos:position pos:line="228" pos:column="30"/></name> <operator pos:line="228" pos:column="31">&amp;&amp;<pos:position pos:line="228" pos:column="41"/></operator> <name pos:line="228" pos:column="34">have_any_sigs<pos:position pos:line="228" pos:column="47"/></name><operator pos:line="228" pos:column="47">)<pos:position pos:line="228" pos:column="48"/></operator></expr>;<pos:position pos:line="228" pos:column="49"/></expr_stmt>
  
  <if pos:line="230" pos:column="3">if <condition pos:line="230" pos:column="6">(<expr><name pos:line="230" pos:column="7">needpass<pos:position pos:line="230" pos:column="15"/></name> <operator pos:line="230" pos:column="16">==<pos:position pos:line="230" pos:column="18"/></operator> <operator pos:line="230" pos:column="19">-<pos:position pos:line="230" pos:column="20"/></operator><literal type="number" pos:line="230" pos:column="20">1<pos:position pos:line="230" pos:column="21"/></literal></expr>)<pos:position pos:line="230" pos:column="22"/></condition><then pos:line="230" pos:column="22">
    <block pos:line="231" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="232" pos:column="7">state_attach_puts<pos:position pos:line="232" pos:column="24"/></name> <argument_list pos:line="232" pos:column="25">(<argument><expr><call><name pos:line="232" pos:column="26">_<pos:position pos:line="232" pos:column="27"/></name><argument_list pos:line="232" pos:column="27">(<argument><expr><literal type="string" pos:line="232" pos:column="28">"[-- Error: could not find beginning"<pos:position pos:line="232" pos:column="65"/></literal>
                           <literal type="string" pos:line="233" pos:column="28">" of PGP message! --]\n\n"<pos:position pos:line="233" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="233" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="233" pos:column="57">s<pos:position pos:line="233" pos:column="58"/></name></expr></argument>)<pos:position pos:line="233" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="233" pos:column="60"/></expr_stmt>
      <return pos:line="234" pos:column="7">return <expr><literal type="number" pos:line="234" pos:column="14">1<pos:position pos:line="234" pos:column="15"/></literal></expr>;<pos:position pos:line="234" pos:column="16"/></return>
    }<pos:position pos:line="235" pos:column="6"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="236" pos:column="3">dprint<pos:position pos:line="236" pos:column="9"/></name> <argument_list pos:line="236" pos:column="10">(<argument><expr><literal type="number" pos:line="236" pos:column="11">2<pos:position pos:line="236" pos:column="12"/></literal></expr></argument>, <argument><expr><operator pos:line="236" pos:column="14">(<pos:position pos:line="236" pos:column="15"/></operator><name pos:line="236" pos:column="15">debugfile<pos:position pos:line="236" pos:column="24"/></name><operator pos:line="236" pos:column="24">,<pos:position pos:line="236" pos:column="25"/></operator> <literal type="string" pos:line="236" pos:column="26">"Leaving pgp_application_pgp handler\n"<pos:position pos:line="236" pos:column="65"/></literal><operator pos:line="236" pos:column="65">)<pos:position pos:line="236" pos:column="66"/></operator></expr></argument>)<pos:position pos:line="236" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="68"/></expr_stmt>

  <return pos:line="238" pos:column="3">return <expr><name pos:line="238" pos:column="10">err<pos:position pos:line="238" pos:column="13"/></name></expr>;<pos:position pos:line="238" pos:column="14"/></return>
}<pos:position pos:line="239" pos:column="2"/></block></function></unit>
