<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_128_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">eat_regexp<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">pattern_t<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">pat<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">BUFFER<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">s<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">BUFFER<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">err<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">BUFFER<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">buf<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">errmsg<pos:position pos:line="4" pos:column="14"/></name><index pos:line="4" pos:column="14">[<expr><name pos:line="4" pos:column="15">STRING<pos:position pos:line="4" pos:column="21"/></name></expr>]<pos:position pos:line="4" pos:column="22"/></index></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">r<pos:position pos:line="5" pos:column="8"/></name></decl>;<pos:position pos:line="5" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">pexpr<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">mutt_buffer_init<pos:position pos:line="8" pos:column="19"/></name> <argument_list pos:line="8" pos:column="20">(<argument><expr><operator pos:line="8" pos:column="21">&amp;<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="22">buf<pos:position pos:line="8" pos:column="25"/></name></expr></argument>)<pos:position pos:line="8" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="9" pos:column="3">pexpr<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <name><name pos:line="9" pos:column="11">s<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">-&gt;<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="14">dptr<pos:position pos:line="9" pos:column="18"/></name></name></expr>;<pos:position pos:line="9" pos:column="19"/></expr_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><call><name pos:line="10" pos:column="7">mutt_extract_token<pos:position pos:line="10" pos:column="25"/></name> <argument_list pos:line="10" pos:column="26">(<argument><expr><operator pos:line="10" pos:column="27">&amp;<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="28">buf<pos:position pos:line="10" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="33">s<pos:position pos:line="10" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="36">MUTT_TOKEN_PATTERN<pos:position pos:line="10" pos:column="54"/></name> <operator pos:line="10" pos:column="55">|<pos:position pos:line="10" pos:column="56"/></operator> <name pos:line="10" pos:column="57">MUTT_TOKEN_COMMENT<pos:position pos:line="10" pos:column="75"/></name></expr></argument>)<pos:position pos:line="10" pos:column="76"/></argument_list></call> <operator pos:line="10" pos:column="77">!=<pos:position pos:line="10" pos:column="79"/></operator> <literal type="number" pos:line="10" pos:column="80">0<pos:position pos:line="10" pos:column="81"/></literal> <operator pos:line="10" pos:column="82">||<pos:position pos:line="10" pos:column="84"/></operator>
      <operator pos:line="11" pos:column="7">!<pos:position pos:line="11" pos:column="8"/></operator><name><name pos:line="11" pos:column="8">buf<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">.<pos:position pos:line="11" pos:column="12"/></operator><name pos:line="11" pos:column="12">data<pos:position pos:line="11" pos:column="16"/></name></name></expr>)<pos:position pos:line="11" pos:column="17"/></condition><then pos:line="11" pos:column="17">
  <block pos:line="12" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">snprintf<pos:position pos:line="13" pos:column="13"/></name> <argument_list pos:line="13" pos:column="14">(<argument><expr><name><name pos:line="13" pos:column="15">err<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">-&gt;<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="20">data<pos:position pos:line="13" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="26">err<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">-&gt;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="31">dsize<pos:position pos:line="13" pos:column="36"/></name></name></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="38">_<pos:position pos:line="13" pos:column="39"/></name><argument_list pos:line="13" pos:column="39">(<argument><expr><literal type="string" pos:line="13" pos:column="40">"Error in expression: %s"<pos:position pos:line="13" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="13" pos:column="68">pexpr<pos:position pos:line="13" pos:column="73"/></name></expr></argument>)<pos:position pos:line="13" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="75"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">(<pos:position pos:line="14" pos:column="13"/></operator><operator pos:line="14" pos:column="13">-<pos:position pos:line="14" pos:column="14"/></operator><literal type="number" pos:line="14" pos:column="14">1<pos:position pos:line="14" pos:column="15"/></literal><operator pos:line="14" pos:column="15">)<pos:position pos:line="14" pos:column="16"/></operator></expr>;<pos:position pos:line="14" pos:column="17"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><operator pos:line="16" pos:column="7">!<pos:position pos:line="16" pos:column="8"/></operator><operator pos:line="16" pos:column="8">*<pos:position pos:line="16" pos:column="9"/></operator><name><name pos:line="16" pos:column="9">buf<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">.<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">data<pos:position pos:line="16" pos:column="17"/></name></name></expr>)<pos:position pos:line="16" pos:column="18"/></condition><then pos:line="16" pos:column="18">
  <block pos:line="17" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">snprintf<pos:position pos:line="18" pos:column="13"/></name> <argument_list pos:line="18" pos:column="14">(<argument><expr><name><name pos:line="18" pos:column="15">err<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">-&gt;<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="20">data<pos:position pos:line="18" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="26">err<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">-&gt;<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="31">dsize<pos:position pos:line="18" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="38">"%s"<pos:position pos:line="18" pos:column="42"/></literal></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="44">_<pos:position pos:line="18" pos:column="45"/></name><argument_list pos:line="18" pos:column="45">(<argument><expr><literal type="string" pos:line="18" pos:column="46">"Empty expression"<pos:position pos:line="18" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="67"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><operator pos:line="19" pos:column="12">(<pos:position pos:line="19" pos:column="13"/></operator><operator pos:line="19" pos:column="13">-<pos:position pos:line="19" pos:column="14"/></operator><literal type="number" pos:line="19" pos:column="14">1<pos:position pos:line="19" pos:column="15"/></literal><operator pos:line="19" pos:column="15">)<pos:position pos:line="19" pos:column="16"/></operator></expr>;<pos:position pos:line="19" pos:column="17"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

<cpp:if pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">if<pos:position pos:line="22" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="22" pos:column="5">0<pos:position pos:line="22" pos:column="6"/></literal></expr></cpp:if>
  <comment type="block" pos:line="23" pos:column="3">/* If there are no RE metacharacters, use simple search anyway */</comment>
  if (!pat-&gt;stringmatch &amp;&amp; !strpbrk (buf.data, "|[{.*+?^$"))
    pat-&gt;stringmatch = 1;
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><name><name pos:line="28" pos:column="7">pat<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">-&gt;<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="12">stringmatch<pos:position pos:line="28" pos:column="23"/></name></name></expr>)<pos:position pos:line="28" pos:column="24"/></condition><then pos:line="28" pos:column="24">
  <block pos:line="29" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">pat<pos:position pos:line="30" pos:column="8"/></name><operator pos:line="30" pos:column="8">-&gt;<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="10">p<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">.<pos:position pos:line="30" pos:column="12"/></operator><name pos:line="30" pos:column="12">str<pos:position pos:line="30" pos:column="15"/></name></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <call><name pos:line="30" pos:column="18">safe_strdup<pos:position pos:line="30" pos:column="29"/></name> <argument_list pos:line="30" pos:column="30">(<argument><expr><name><name pos:line="30" pos:column="31">buf<pos:position pos:line="30" pos:column="34"/></name><operator pos:line="30" pos:column="34">.<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="35">data<pos:position pos:line="30" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">pat<pos:position pos:line="31" pos:column="8"/></name><operator pos:line="31" pos:column="8">-&gt;<pos:position pos:line="31" pos:column="13"/></operator><name pos:line="31" pos:column="10">ign_case<pos:position pos:line="31" pos:column="18"/></name></name> <operator pos:line="31" pos:column="19">=<pos:position pos:line="31" pos:column="20"/></operator> <call><name pos:line="31" pos:column="21">mutt_which_case<pos:position pos:line="31" pos:column="36"/></name> <argument_list pos:line="31" pos:column="37">(<argument><expr><name><name pos:line="31" pos:column="38">buf<pos:position pos:line="31" pos:column="41"/></name><operator pos:line="31" pos:column="41">.<pos:position pos:line="31" pos:column="42"/></operator><name pos:line="31" pos:column="42">data<pos:position pos:line="31" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call> <operator pos:line="31" pos:column="48">==<pos:position pos:line="31" pos:column="50"/></operator> <name pos:line="31" pos:column="51">REG_ICASE<pos:position pos:line="31" pos:column="60"/></name></expr>;<pos:position pos:line="31" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">FREE<pos:position pos:line="32" pos:column="9"/></name> <argument_list pos:line="32" pos:column="10">(<argument><expr><operator pos:line="32" pos:column="11">&amp;<pos:position pos:line="32" pos:column="16"/></operator><name><name pos:line="32" pos:column="12">buf<pos:position pos:line="32" pos:column="15"/></name><operator pos:line="32" pos:column="15">.<pos:position pos:line="32" pos:column="16"/></operator><name pos:line="32" pos:column="16">data<pos:position pos:line="32" pos:column="20"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="33" pos:column="4"/></block></then>
  <elseif pos:line="34" pos:column="3">else <if pos:line="34" pos:column="8">if <condition pos:line="34" pos:column="11">(<expr><name><name pos:line="34" pos:column="12">pat<pos:position pos:line="34" pos:column="15"/></name><operator pos:line="34" pos:column="15">-&gt;<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="17">groupmatch<pos:position pos:line="34" pos:column="27"/></name></name></expr>)<pos:position pos:line="34" pos:column="28"/></condition><then pos:line="34" pos:column="28">
  <block pos:line="35" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="36" pos:column="5">pat<pos:position pos:line="36" pos:column="8"/></name><operator pos:line="36" pos:column="8">-&gt;<pos:position pos:line="36" pos:column="13"/></operator><name pos:line="36" pos:column="10">p<pos:position pos:line="36" pos:column="11"/></name><operator pos:line="36" pos:column="11">.<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="12">g<pos:position pos:line="36" pos:column="13"/></name></name> <operator pos:line="36" pos:column="14">=<pos:position pos:line="36" pos:column="15"/></operator> <call><name pos:line="36" pos:column="16">mutt_pattern_group<pos:position pos:line="36" pos:column="34"/></name> <argument_list pos:line="36" pos:column="35">(<argument><expr><name><name pos:line="36" pos:column="36">buf<pos:position pos:line="36" pos:column="39"/></name><operator pos:line="36" pos:column="39">.<pos:position pos:line="36" pos:column="40"/></operator><name pos:line="36" pos:column="40">data<pos:position pos:line="36" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">FREE<pos:position pos:line="37" pos:column="9"/></name> <argument_list pos:line="37" pos:column="10">(<argument><expr><operator pos:line="37" pos:column="11">&amp;<pos:position pos:line="37" pos:column="16"/></operator><name><name pos:line="37" pos:column="12">buf<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">.<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="16">data<pos:position pos:line="37" pos:column="20"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if></elseif>
  <else pos:line="39" pos:column="3">else
  <block pos:line="40" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="41" pos:column="5">pat<pos:position pos:line="41" pos:column="8"/></name><operator pos:line="41" pos:column="8">-&gt;<pos:position pos:line="41" pos:column="13"/></operator><name pos:line="41" pos:column="10">p<pos:position pos:line="41" pos:column="11"/></name><operator pos:line="41" pos:column="11">.<pos:position pos:line="41" pos:column="12"/></operator><name pos:line="41" pos:column="12">rx<pos:position pos:line="41" pos:column="14"/></name></name> <operator pos:line="41" pos:column="15">=<pos:position pos:line="41" pos:column="16"/></operator> <call><name pos:line="41" pos:column="17">safe_malloc<pos:position pos:line="41" pos:column="28"/></name> <argument_list pos:line="41" pos:column="29">(<argument><expr><sizeof pos:line="41" pos:column="30">sizeof <argument_list pos:line="41" pos:column="37">(<argument><expr><name pos:line="41" pos:column="38">regex_t<pos:position pos:line="41" pos:column="45"/></name></expr></argument>)<pos:position pos:line="41" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="41" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name pos:line="42" pos:column="5">r<pos:position pos:line="42" pos:column="6"/></name> <operator pos:line="42" pos:column="7">=<pos:position pos:line="42" pos:column="8"/></operator> <call><name pos:line="42" pos:column="9">REGCOMP<pos:position pos:line="42" pos:column="16"/></name> <argument_list pos:line="42" pos:column="17">(<argument><expr><name><name pos:line="42" pos:column="18">pat<pos:position pos:line="42" pos:column="21"/></name><operator pos:line="42" pos:column="21">-&gt;<pos:position pos:line="42" pos:column="26"/></operator><name pos:line="42" pos:column="23">p<pos:position pos:line="42" pos:column="24"/></name><operator pos:line="42" pos:column="24">.<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="25">rx<pos:position pos:line="42" pos:column="27"/></name></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="29">buf<pos:position pos:line="42" pos:column="32"/></name><operator pos:line="42" pos:column="32">.<pos:position pos:line="42" pos:column="33"/></operator><name pos:line="42" pos:column="33">data<pos:position pos:line="42" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="39">REG_NEWLINE<pos:position pos:line="42" pos:column="50"/></name> <operator pos:line="42" pos:column="51">|<pos:position pos:line="42" pos:column="52"/></operator> <name pos:line="42" pos:column="53">REG_NOSUB<pos:position pos:line="42" pos:column="62"/></name> <operator pos:line="42" pos:column="63">|<pos:position pos:line="42" pos:column="64"/></operator> <call><name pos:line="42" pos:column="65">mutt_which_case<pos:position pos:line="42" pos:column="80"/></name> <argument_list pos:line="42" pos:column="81">(<argument><expr><name><name pos:line="42" pos:column="82">buf<pos:position pos:line="42" pos:column="85"/></name><operator pos:line="42" pos:column="85">.<pos:position pos:line="42" pos:column="86"/></operator><name pos:line="42" pos:column="86">data<pos:position pos:line="42" pos:column="90"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="93"/></expr_stmt>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">r<pos:position pos:line="43" pos:column="10"/></name></expr>)<pos:position pos:line="43" pos:column="11"/></condition><then pos:line="43" pos:column="11">
    <block pos:line="44" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="45" pos:column="7">regerror<pos:position pos:line="45" pos:column="15"/></name> <argument_list pos:line="45" pos:column="16">(<argument><expr><name pos:line="45" pos:column="17">r<pos:position pos:line="45" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="20">pat<pos:position pos:line="45" pos:column="23"/></name><operator pos:line="45" pos:column="23">-&gt;<pos:position pos:line="45" pos:column="28"/></operator><name pos:line="45" pos:column="25">p<pos:position pos:line="45" pos:column="26"/></name><operator pos:line="45" pos:column="26">.<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="27">rx<pos:position pos:line="45" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="31">errmsg<pos:position pos:line="45" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="39">sizeof <argument_list pos:line="45" pos:column="46">(<argument><expr><name pos:line="45" pos:column="47">errmsg<pos:position pos:line="45" pos:column="53"/></name></expr></argument>)<pos:position pos:line="45" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="45" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="56"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">mutt_buffer_printf<pos:position pos:line="46" pos:column="25"/></name> <argument_list pos:line="46" pos:column="26">(<argument><expr><name pos:line="46" pos:column="27">err<pos:position pos:line="46" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="32">"'%s': %s"<pos:position pos:line="46" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="44">buf<pos:position pos:line="46" pos:column="47"/></name><operator pos:line="46" pos:column="47">.<pos:position pos:line="46" pos:column="48"/></operator><name pos:line="46" pos:column="48">data<pos:position pos:line="46" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="54">errmsg<pos:position pos:line="46" pos:column="60"/></name></expr></argument>)<pos:position pos:line="46" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="62"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="47" pos:column="7">FREE<pos:position pos:line="47" pos:column="11"/></name> <argument_list pos:line="47" pos:column="12">(<argument><expr><operator pos:line="47" pos:column="13">&amp;<pos:position pos:line="47" pos:column="18"/></operator><name><name pos:line="47" pos:column="14">buf<pos:position pos:line="47" pos:column="17"/></name><operator pos:line="47" pos:column="17">.<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="18">data<pos:position pos:line="47" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="48" pos:column="7">FREE<pos:position pos:line="48" pos:column="11"/></name> <argument_list pos:line="48" pos:column="12">(<argument><expr><operator pos:line="48" pos:column="13">&amp;<pos:position pos:line="48" pos:column="18"/></operator><name><name pos:line="48" pos:column="14">pat<pos:position pos:line="48" pos:column="17"/></name><operator pos:line="48" pos:column="17">-&gt;<pos:position pos:line="48" pos:column="22"/></operator><name pos:line="48" pos:column="19">p<pos:position pos:line="48" pos:column="20"/></name><operator pos:line="48" pos:column="20">.<pos:position pos:line="48" pos:column="21"/></operator><name pos:line="48" pos:column="21">rx<pos:position pos:line="48" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="25"/></expr_stmt>
      <return pos:line="49" pos:column="7">return <expr><operator pos:line="49" pos:column="14">(<pos:position pos:line="49" pos:column="15"/></operator><operator pos:line="49" pos:column="15">-<pos:position pos:line="49" pos:column="16"/></operator><literal type="number" pos:line="49" pos:column="16">1<pos:position pos:line="49" pos:column="17"/></literal><operator pos:line="49" pos:column="17">)<pos:position pos:line="49" pos:column="18"/></operator></expr>;<pos:position pos:line="49" pos:column="19"/></return>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">FREE<pos:position pos:line="51" pos:column="9"/></name> <argument_list pos:line="51" pos:column="10">(<argument><expr><operator pos:line="51" pos:column="11">&amp;<pos:position pos:line="51" pos:column="16"/></operator><name><name pos:line="51" pos:column="12">buf<pos:position pos:line="51" pos:column="15"/></name><operator pos:line="51" pos:column="15">.<pos:position pos:line="51" pos:column="16"/></operator><name pos:line="51" pos:column="16">data<pos:position pos:line="51" pos:column="20"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="52" pos:column="4"/></block></else></if>

  <return pos:line="54" pos:column="3">return <expr><literal type="number" pos:line="54" pos:column="10">0<pos:position pos:line="54" pos:column="11"/></literal></expr>;<pos:position pos:line="54" pos:column="12"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
