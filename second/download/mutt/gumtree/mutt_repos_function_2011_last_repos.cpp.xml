<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2011_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">msg_fetch_header<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">CONTEXT<pos:position pos:line="1" pos:column="37"/></name><modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type> <name pos:line="1" pos:column="39">ctx<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">IMAP_HEADER<pos:position pos:line="1" pos:column="55"/></name><modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type> <name pos:line="1" pos:column="57">h<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name><modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type> <name pos:line="1" pos:column="66">buf<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="71">FILE<pos:position pos:line="1" pos:column="75"/></name><modifier pos:line="1" pos:column="75">*<pos:position pos:line="1" pos:column="76"/></modifier></type> <name pos:line="1" pos:column="77">fp<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">IMAP_DATA<pos:position pos:line="3" pos:column="12"/></name><modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier></type> <name pos:line="3" pos:column="14">idata<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">long<pos:position pos:line="4" pos:column="7"/></name></type> <name pos:line="4" pos:column="8">bytes<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">rc<pos:position pos:line="5" pos:column="9"/></name> <init pos:line="5" pos:column="10">= <expr><operator pos:line="5" pos:column="12">-<pos:position pos:line="5" pos:column="13"/></operator><literal type="number" pos:line="5" pos:column="13">1<pos:position pos:line="5" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt> <comment type="block" pos:line="5" pos:column="16">/* default now is that string isn't FETCH response*/</comment>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">parse_rc<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">idata<pos:position pos:line="8" pos:column="8"/></name> <operator pos:line="8" pos:column="9">=<pos:position pos:line="8" pos:column="10"/></operator> <operator pos:line="8" pos:column="11">(<pos:position pos:line="8" pos:column="12"/></operator><name pos:line="8" pos:column="12">IMAP_DATA<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">*<pos:position pos:line="8" pos:column="22"/></operator><operator pos:line="8" pos:column="22">)<pos:position pos:line="8" pos:column="23"/></operator> <name><name pos:line="8" pos:column="24">ctx<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">-&gt;<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="29">data<pos:position pos:line="8" pos:column="33"/></name></name></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name><name pos:line="10" pos:column="7">buf<pos:position pos:line="10" pos:column="10"/></name><index pos:line="10" pos:column="10">[<expr><literal type="number" pos:line="10" pos:column="11">0<pos:position pos:line="10" pos:column="12"/></literal></expr>]<pos:position pos:line="10" pos:column="13"/></index></name> <operator pos:line="10" pos:column="14">!=<pos:position pos:line="10" pos:column="16"/></operator> <literal type="char" pos:line="10" pos:column="17">'*'<pos:position pos:line="10" pos:column="20"/></literal></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">rc<pos:position pos:line="11" pos:column="14"/></name></expr>;<pos:position pos:line="11" pos:column="15"/></return></block></then></if>

  <comment type="block" pos:line="13" pos:column="3">/* skip to message number */</comment>
  <expr_stmt><expr><name pos:line="14" pos:column="3">buf<pos:position pos:line="14" pos:column="6"/></name> <operator pos:line="14" pos:column="7">=<pos:position pos:line="14" pos:column="8"/></operator> <call><name pos:line="14" pos:column="9">imap_next_word<pos:position pos:line="14" pos:column="23"/></name> <argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">buf<pos:position pos:line="14" pos:column="28"/></name></expr></argument>)<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="15" pos:column="3">h<pos:position pos:line="15" pos:column="4"/></name><operator pos:line="15" pos:column="4">-&gt;<pos:position pos:line="15" pos:column="9"/></operator><name pos:line="15" pos:column="6">data<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">-&gt;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="12">msn<pos:position pos:line="15" pos:column="15"/></name></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <call><name pos:line="15" pos:column="18">atoi<pos:position pos:line="15" pos:column="22"/></name> <argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">buf<pos:position pos:line="15" pos:column="27"/></name></expr></argument>)<pos:position pos:line="15" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt>

  <comment type="block" pos:line="17" pos:column="3">/* find FETCH tag */</comment>
  <expr_stmt><expr><name pos:line="18" pos:column="3">buf<pos:position pos:line="18" pos:column="6"/></name> <operator pos:line="18" pos:column="7">=<pos:position pos:line="18" pos:column="8"/></operator> <call><name pos:line="18" pos:column="9">imap_next_word<pos:position pos:line="18" pos:column="23"/></name> <argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">buf<pos:position pos:line="18" pos:column="28"/></name></expr></argument>)<pos:position pos:line="18" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="30"/></expr_stmt>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><call><name pos:line="19" pos:column="7">ascii_strncasecmp<pos:position pos:line="19" pos:column="24"/></name> <argument_list pos:line="19" pos:column="25">(<argument><expr><literal type="string" pos:line="19" pos:column="26">"FETCH"<pos:position pos:line="19" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="35">buf<pos:position pos:line="19" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="40">5<pos:position pos:line="19" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="43"/></condition><then pos:line="19" pos:column="43">
    <block type="pseudo"><return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">rc<pos:position pos:line="20" pos:column="14"/></name></expr>;<pos:position pos:line="20" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="22" pos:column="3">rc<pos:position pos:line="22" pos:column="5"/></name> <operator pos:line="22" pos:column="6">=<pos:position pos:line="22" pos:column="7"/></operator> <operator pos:line="22" pos:column="8">-<pos:position pos:line="22" pos:column="9"/></operator><literal type="number" pos:line="22" pos:column="9">2<pos:position pos:line="22" pos:column="10"/></literal></expr>;<pos:position pos:line="22" pos:column="11"/></expr_stmt> <comment type="block" pos:line="22" pos:column="12">/* we've got a FETCH response, for better or worse */</comment>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><operator pos:line="23" pos:column="7">!<pos:position pos:line="23" pos:column="8"/></operator><operator pos:line="23" pos:column="8">(<pos:position pos:line="23" pos:column="9"/></operator><name pos:line="23" pos:column="9">buf<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <call><name pos:line="23" pos:column="15">strchr<pos:position pos:line="23" pos:column="21"/></name> <argument_list pos:line="23" pos:column="22">(<argument><expr><name pos:line="23" pos:column="23">buf<pos:position pos:line="23" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="28">'('<pos:position pos:line="23" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></call><operator pos:line="23" pos:column="32">)<pos:position pos:line="23" pos:column="33"/></operator></expr>)<pos:position pos:line="23" pos:column="34"/></condition><then pos:line="23" pos:column="34">
    <block type="pseudo"><return pos:line="24" pos:column="5">return <expr><name pos:line="24" pos:column="12">rc<pos:position pos:line="24" pos:column="14"/></name></expr>;<pos:position pos:line="24" pos:column="15"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="25" pos:column="3">buf<pos:position pos:line="25" pos:column="6"/></name><operator pos:line="25" pos:column="6">++<pos:position pos:line="25" pos:column="8"/></operator></expr>;<pos:position pos:line="25" pos:column="9"/></expr_stmt>

  <comment type="block" pos:line="27" pos:column="3">/* FIXME: current implementation - call msg_parse_fetch - if it returns -2,
   *   read header lines and call it again. Silly. */</comment>
  <expr_stmt><expr><name pos:line="29" pos:column="3">parse_rc<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <call><name pos:line="29" pos:column="14">msg_parse_fetch<pos:position pos:line="29" pos:column="29"/></name> <argument_list pos:line="29" pos:column="30">(<argument><expr><name pos:line="29" pos:column="31">h<pos:position pos:line="29" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="34">buf<pos:position pos:line="29" pos:column="37"/></name></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt>
  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><operator pos:line="30" pos:column="7">!<pos:position pos:line="30" pos:column="8"/></operator><name pos:line="30" pos:column="8">parse_rc<pos:position pos:line="30" pos:column="16"/></name></expr>)<pos:position pos:line="30" pos:column="17"/></condition><then pos:line="30" pos:column="17">
    <block type="pseudo"><return pos:line="31" pos:column="5">return <expr><literal type="number" pos:line="31" pos:column="12">0<pos:position pos:line="31" pos:column="13"/></literal></expr>;<pos:position pos:line="31" pos:column="14"/></return></block></then></if>
  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><name pos:line="32" pos:column="7">parse_rc<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">!=<pos:position pos:line="32" pos:column="18"/></operator> <operator pos:line="32" pos:column="19">-<pos:position pos:line="32" pos:column="20"/></operator><literal type="number" pos:line="32" pos:column="20">2<pos:position pos:line="32" pos:column="21"/></literal> <operator pos:line="32" pos:column="22">||<pos:position pos:line="32" pos:column="24"/></operator> <operator pos:line="32" pos:column="25">!<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="26">fp<pos:position pos:line="32" pos:column="28"/></name></expr>)<pos:position pos:line="32" pos:column="29"/></condition><then pos:line="32" pos:column="29">
    <block type="pseudo"><return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">rc<pos:position pos:line="33" pos:column="14"/></name></expr>;<pos:position pos:line="33" pos:column="15"/></return></block></then></if>

  <if pos:line="35" pos:column="3">if <condition pos:line="35" pos:column="6">(<expr><call><name pos:line="35" pos:column="7">imap_get_literal_count<pos:position pos:line="35" pos:column="29"/></name> <argument_list pos:line="35" pos:column="30">(<argument><expr><name pos:line="35" pos:column="31">buf<pos:position pos:line="35" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="36">&amp;<pos:position pos:line="35" pos:column="41"/></operator><name pos:line="35" pos:column="37">bytes<pos:position pos:line="35" pos:column="42"/></name></expr></argument>)<pos:position pos:line="35" pos:column="43"/></argument_list></call> <operator pos:line="35" pos:column="44">==<pos:position pos:line="35" pos:column="46"/></operator> <literal type="number" pos:line="35" pos:column="47">0<pos:position pos:line="35" pos:column="48"/></literal></expr>)<pos:position pos:line="35" pos:column="49"/></condition><then pos:line="35" pos:column="49">
  <block pos:line="36" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">imap_read_literal<pos:position pos:line="37" pos:column="22"/></name> <argument_list pos:line="37" pos:column="23">(<argument><expr><name pos:line="37" pos:column="24">fp<pos:position pos:line="37" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="28">idata<pos:position pos:line="37" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="35">bytes<pos:position pos:line="37" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="42">NULL<pos:position pos:line="37" pos:column="46"/></name></expr></argument>)<pos:position pos:line="37" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="48"/></expr_stmt>

    <comment type="block" pos:line="39" pos:column="5">/* we may have other fields of the FETCH _after_ the literal
     * (eg Domino puts FLAGS here). Nothing wrong with that, either.
     * This all has to go - we should accept literals and nonliterals
     * interchangeably at any time. */</comment>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><call><name pos:line="43" pos:column="9">imap_cmd_step<pos:position pos:line="43" pos:column="22"/></name> <argument_list pos:line="43" pos:column="23">(<argument><expr><name pos:line="43" pos:column="24">idata<pos:position pos:line="43" pos:column="29"/></name></expr></argument>)<pos:position pos:line="43" pos:column="30"/></argument_list></call> <operator pos:line="43" pos:column="31">!=<pos:position pos:line="43" pos:column="33"/></operator> <name pos:line="43" pos:column="34">IMAP_CMD_CONTINUE<pos:position pos:line="43" pos:column="51"/></name></expr>)<pos:position pos:line="43" pos:column="52"/></condition><then pos:line="43" pos:column="52">
      <block type="pseudo"><return pos:line="44" pos:column="7">return <expr><name pos:line="44" pos:column="14">rc<pos:position pos:line="44" pos:column="16"/></name></expr>;<pos:position pos:line="44" pos:column="17"/></return></block></then></if>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><call><name pos:line="46" pos:column="9">msg_parse_fetch<pos:position pos:line="46" pos:column="24"/></name> <argument_list pos:line="46" pos:column="25">(<argument><expr><name pos:line="46" pos:column="26">h<pos:position pos:line="46" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="29">idata<pos:position pos:line="46" pos:column="34"/></name><operator pos:line="46" pos:column="34">-&gt;<pos:position pos:line="46" pos:column="39"/></operator><name pos:line="46" pos:column="36">buf<pos:position pos:line="46" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="40"/></argument_list></call> <operator pos:line="46" pos:column="41">==<pos:position pos:line="46" pos:column="43"/></operator> <operator pos:line="46" pos:column="44">-<pos:position pos:line="46" pos:column="45"/></operator><literal type="number" pos:line="46" pos:column="45">1<pos:position pos:line="46" pos:column="46"/></literal></expr>)<pos:position pos:line="46" pos:column="47"/></condition><then pos:line="46" pos:column="47">
      <block type="pseudo"><return pos:line="47" pos:column="7">return <expr><name pos:line="47" pos:column="14">rc<pos:position pos:line="47" pos:column="16"/></name></expr>;<pos:position pos:line="47" pos:column="17"/></return></block></then></if>
  }<pos:position pos:line="48" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="50" pos:column="3">rc<pos:position pos:line="50" pos:column="5"/></name> <operator pos:line="50" pos:column="6">=<pos:position pos:line="50" pos:column="7"/></operator> <literal type="number" pos:line="50" pos:column="8">0<pos:position pos:line="50" pos:column="9"/></literal></expr>;<pos:position pos:line="50" pos:column="10"/></expr_stmt> <comment type="block" pos:line="50" pos:column="11">/* success */</comment>

  <comment type="block" pos:line="52" pos:column="3">/* subtract headers from message size - unfortunately only the subset of
   * headers we've requested. */</comment>
  <expr_stmt><expr><name><name pos:line="54" pos:column="3">h<pos:position pos:line="54" pos:column="4"/></name><operator pos:line="54" pos:column="4">-&gt;<pos:position pos:line="54" pos:column="9"/></operator><name pos:line="54" pos:column="6">content_length<pos:position pos:line="54" pos:column="20"/></name></name> <operator pos:line="54" pos:column="21">-=<pos:position pos:line="54" pos:column="23"/></operator> <name pos:line="54" pos:column="24">bytes<pos:position pos:line="54" pos:column="29"/></name></expr>;<pos:position pos:line="54" pos:column="30"/></expr_stmt>

  <return pos:line="56" pos:column="3">return <expr><name pos:line="56" pos:column="10">rc<pos:position pos:line="56" pos:column="12"/></name></expr>;<pos:position pos:line="56" pos:column="13"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
