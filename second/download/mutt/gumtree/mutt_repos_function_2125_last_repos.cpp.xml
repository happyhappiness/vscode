<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2125_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">imap_auth_res_t<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">imap_auth_cram_md5<pos:position pos:line="1" pos:column="35"/></name> <parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">IMAP_DATA<pos:position pos:line="1" pos:column="46"/></name><modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type> <name pos:line="1" pos:column="48">idata<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name pos:line="1" pos:column="61">char<pos:position pos:line="1" pos:column="65"/></name><modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type> <name pos:line="1" pos:column="67">method<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">ibuf<pos:position pos:line="3" pos:column="12"/></name><index pos:line="3" pos:column="12">[<expr><name pos:line="3" pos:column="13">LONG_STRING<pos:position pos:line="3" pos:column="24"/></name><operator pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></operator><literal type="number" pos:line="3" pos:column="25">2<pos:position pos:line="3" pos:column="26"/></literal></expr>]<pos:position pos:line="3" pos:column="27"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="3" pos:column="29">obuf<pos:position pos:line="3" pos:column="33"/></name><index pos:line="3" pos:column="33">[<expr><name pos:line="3" pos:column="34">LONG_STRING<pos:position pos:line="3" pos:column="45"/></name></expr>]<pos:position pos:line="3" pos:column="46"/></index></name></decl>;<pos:position pos:line="3" pos:column="47"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">char<pos:position pos:line="4" pos:column="16"/></name></type> <name><name pos:line="4" pos:column="17">hmac_response<pos:position pos:line="4" pos:column="30"/></name><index pos:line="4" pos:column="30">[<expr><name pos:line="4" pos:column="31">MD5_DIGEST_LEN<pos:position pos:line="4" pos:column="45"/></name></expr>]<pos:position pos:line="4" pos:column="46"/></index></name></decl>;<pos:position pos:line="4" pos:column="47"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">len<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">rc<pos:position pos:line="6" pos:column="9"/></name></decl>;<pos:position pos:line="6" pos:column="10"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><operator pos:line="8" pos:column="7">!<pos:position pos:line="8" pos:column="8"/></operator><call><name pos:line="8" pos:column="8">mutt_bit_isset<pos:position pos:line="8" pos:column="22"/></name> <argument_list pos:line="8" pos:column="23">(<argument><expr><name><name pos:line="8" pos:column="24">idata<pos:position pos:line="8" pos:column="29"/></name><operator pos:line="8" pos:column="29">-&gt;<pos:position pos:line="8" pos:column="34"/></operator><name pos:line="8" pos:column="31">capabilities<pos:position pos:line="8" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="45">ACRAM_MD5<pos:position pos:line="8" pos:column="54"/></name></expr></argument>)<pos:position pos:line="8" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="56"/></condition><then pos:line="8" pos:column="56">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">IMAP_AUTH_UNAVAIL<pos:position pos:line="9" pos:column="29"/></name></expr>;<pos:position pos:line="9" pos:column="30"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="11" pos:column="3">mutt_message<pos:position pos:line="11" pos:column="15"/></name></type> <name pos:line="11" pos:column="16">_<pos:position pos:line="11" pos:column="17"/></name><argument_list pos:line="11" pos:column="17">(<argument><expr><literal type="string" pos:line="11" pos:column="18">"Authenticating (CRAM-MD5)..."<pos:position pos:line="11" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></decl>;<pos:position pos:line="11" pos:column="50"/></decl_stmt>

  <comment type="block" pos:line="13" pos:column="3">/* get auth info */</comment>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><call><name pos:line="14" pos:column="7">mutt_account_getlogin<pos:position pos:line="14" pos:column="28"/></name> <argument_list pos:line="14" pos:column="29">(<argument><expr><operator pos:line="14" pos:column="30">&amp;<pos:position pos:line="14" pos:column="35"/></operator><name><name pos:line="14" pos:column="31">idata<pos:position pos:line="14" pos:column="36"/></name><operator pos:line="14" pos:column="36">-&gt;<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="38">conn<pos:position pos:line="14" pos:column="42"/></name><operator pos:line="14" pos:column="42">-&gt;<pos:position pos:line="14" pos:column="47"/></operator><name pos:line="14" pos:column="44">account<pos:position pos:line="14" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="53"/></condition><then pos:line="14" pos:column="53">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">IMAP_AUTH_FAILURE<pos:position pos:line="15" pos:column="29"/></name></expr>;<pos:position pos:line="15" pos:column="30"/></return></block></then></if>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><call><name pos:line="16" pos:column="7">mutt_account_getpass<pos:position pos:line="16" pos:column="27"/></name> <argument_list pos:line="16" pos:column="28">(<argument><expr><operator pos:line="16" pos:column="29">&amp;<pos:position pos:line="16" pos:column="34"/></operator><name><name pos:line="16" pos:column="30">idata<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">-&gt;<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="37">conn<pos:position pos:line="16" pos:column="41"/></name><operator pos:line="16" pos:column="41">-&gt;<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="43">account<pos:position pos:line="16" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="52"/></condition><then pos:line="16" pos:column="52">
    <block type="pseudo"><return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">IMAP_AUTH_FAILURE<pos:position pos:line="17" pos:column="29"/></name></expr>;<pos:position pos:line="17" pos:column="30"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">imap_cmd_start<pos:position pos:line="19" pos:column="17"/></name> <argument_list pos:line="19" pos:column="18">(<argument><expr><name pos:line="19" pos:column="19">idata<pos:position pos:line="19" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="26">"AUTHENTICATE CRAM-MD5"<pos:position pos:line="19" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="51"/></expr_stmt>

  <comment type="block" pos:line="21" pos:column="3">/* From RFC 2195:
   * The data encoded in the first ready response contains a presumptively
   * arbitrary string of random digits, a timestamp, and the fully-qualified
   * primary host name of the server. The syntax of the unencoded form must
   * correspond to that of an RFC 822 'msg-id' [RFC822] as described in [POP3].
   */</comment>
  <do pos:line="27" pos:column="3">do
    <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="5">rc<pos:position pos:line="28" pos:column="7"/></name> <operator pos:line="28" pos:column="8">=<pos:position pos:line="28" pos:column="9"/></operator> <call><name pos:line="28" pos:column="10">imap_cmd_step<pos:position pos:line="28" pos:column="23"/></name> <argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">idata<pos:position pos:line="28" pos:column="30"/></name></expr></argument>)<pos:position pos:line="28" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="32"/></expr_stmt></block>
  while <condition pos:line="29" pos:column="9">(<expr><name pos:line="29" pos:column="10">rc<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">==<pos:position pos:line="29" pos:column="15"/></operator> <name pos:line="29" pos:column="16">IMAP_CMD_CONTINUE<pos:position pos:line="29" pos:column="33"/></name></expr>)<pos:position pos:line="29" pos:column="34"/></condition>;<pos:position pos:line="29" pos:column="35"/></do>
  
  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><name pos:line="31" pos:column="7">rc<pos:position pos:line="31" pos:column="9"/></name> <operator pos:line="31" pos:column="10">!=<pos:position pos:line="31" pos:column="12"/></operator> <name pos:line="31" pos:column="13">IMAP_CMD_RESPOND<pos:position pos:line="31" pos:column="29"/></name></expr>)<pos:position pos:line="31" pos:column="30"/></condition><then pos:line="31" pos:column="30">
  <block pos:line="32" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">dprint<pos:position pos:line="33" pos:column="11"/></name> <argument_list pos:line="33" pos:column="12">(<argument><expr><literal type="number" pos:line="33" pos:column="13">1<pos:position pos:line="33" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="33" pos:column="16">(<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="17">debugfile<pos:position pos:line="33" pos:column="26"/></name><operator pos:line="33" pos:column="26">,<pos:position pos:line="33" pos:column="27"/></operator> <literal type="string" pos:line="33" pos:column="28">"Invalid response from server: %s\n"<pos:position pos:line="33" pos:column="64"/></literal><operator pos:line="33" pos:column="64">,<pos:position pos:line="33" pos:column="65"/></operator> <name pos:line="33" pos:column="66">ibuf<pos:position pos:line="33" pos:column="70"/></name><operator pos:line="33" pos:column="70">)<pos:position pos:line="33" pos:column="71"/></operator></expr></argument>)<pos:position pos:line="33" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="73"/></expr_stmt>
    <goto pos:line="34" pos:column="5">goto <name pos:line="34" pos:column="10">bail<pos:position pos:line="34" pos:column="14"/></name>;<pos:position pos:line="34" pos:column="15"/></goto>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><operator pos:line="37" pos:column="7">(<pos:position pos:line="37" pos:column="8"/></operator><name pos:line="37" pos:column="8">len<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator> <call><name pos:line="37" pos:column="14">mutt_from_base64<pos:position pos:line="37" pos:column="30"/></name> <argument_list pos:line="37" pos:column="31">(<argument><expr><name pos:line="37" pos:column="32">obuf<pos:position pos:line="37" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="38">idata<pos:position pos:line="37" pos:column="43"/></name><operator pos:line="37" pos:column="43">-&gt;<pos:position pos:line="37" pos:column="48"/></operator><name pos:line="37" pos:column="45">buf<pos:position pos:line="37" pos:column="48"/></name></name> <operator pos:line="37" pos:column="49">+<pos:position pos:line="37" pos:column="50"/></operator> <literal type="number" pos:line="37" pos:column="51">2<pos:position pos:line="37" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="53"/></argument_list></call><operator pos:line="37" pos:column="53">)<pos:position pos:line="37" pos:column="54"/></operator> <operator pos:line="37" pos:column="55">==<pos:position pos:line="37" pos:column="57"/></operator> <operator pos:line="37" pos:column="58">-<pos:position pos:line="37" pos:column="59"/></operator><literal type="number" pos:line="37" pos:column="59">1<pos:position pos:line="37" pos:column="60"/></literal></expr>)<pos:position pos:line="37" pos:column="61"/></condition><then pos:line="37" pos:column="61">
  <block pos:line="38" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">dprint<pos:position pos:line="39" pos:column="11"/></name> <argument_list pos:line="39" pos:column="12">(<argument><expr><literal type="number" pos:line="39" pos:column="13">1<pos:position pos:line="39" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="39" pos:column="16">(<pos:position pos:line="39" pos:column="17"/></operator><name pos:line="39" pos:column="17">debugfile<pos:position pos:line="39" pos:column="26"/></name><operator pos:line="39" pos:column="26">,<pos:position pos:line="39" pos:column="27"/></operator> <literal type="string" pos:line="39" pos:column="28">"Error decoding base64 response.\n"<pos:position pos:line="39" pos:column="63"/></literal><operator pos:line="39" pos:column="63">)<pos:position pos:line="39" pos:column="64"/></operator></expr></argument>)<pos:position pos:line="39" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="66"/></expr_stmt>
    <goto pos:line="40" pos:column="5">goto <name pos:line="40" pos:column="10">bail<pos:position pos:line="40" pos:column="14"/></name>;<pos:position pos:line="40" pos:column="15"/></goto>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="43" pos:column="3">obuf<pos:position pos:line="43" pos:column="7"/></name><index pos:line="43" pos:column="7">[<expr><name pos:line="43" pos:column="8">len<pos:position pos:line="43" pos:column="11"/></name></expr>]<pos:position pos:line="43" pos:column="12"/></index></name> <operator pos:line="43" pos:column="13">=<pos:position pos:line="43" pos:column="14"/></operator> <literal type="char" pos:line="43" pos:column="15">'\0'<pos:position pos:line="43" pos:column="19"/></literal></expr>;<pos:position pos:line="43" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="44" pos:column="3">dprint<pos:position pos:line="44" pos:column="9"/></name> <argument_list pos:line="44" pos:column="10">(<argument><expr><literal type="number" pos:line="44" pos:column="11">2<pos:position pos:line="44" pos:column="12"/></literal></expr></argument>, <argument><expr><operator pos:line="44" pos:column="14">(<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="15">debugfile<pos:position pos:line="44" pos:column="24"/></name><operator pos:line="44" pos:column="24">,<pos:position pos:line="44" pos:column="25"/></operator> <literal type="string" pos:line="44" pos:column="26">"CRAM challenge: %s\n"<pos:position pos:line="44" pos:column="48"/></literal><operator pos:line="44" pos:column="48">,<pos:position pos:line="44" pos:column="49"/></operator> <name pos:line="44" pos:column="50">obuf<pos:position pos:line="44" pos:column="54"/></name><operator pos:line="44" pos:column="54">)<pos:position pos:line="44" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="44" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="57"/></expr_stmt>

  <comment type="block" pos:line="46" pos:column="3">/* The client makes note of the data and then responds with a string
   * consisting of the user name, a space, and a 'digest'. The latter is
   * computed by applying the keyed MD5 algorithm from [KEYED-MD5] where the
   * key is a shared secret and the digested text is the timestamp (including
   * angle-brackets).
   * 
   * Note: The user name shouldn't be quoted. Since the digest can't contain
   *   spaces, there is no ambiguity. Some servers get this wrong, we'll work
   *   around them when the bug report comes in. Until then, we'll remain
   *   blissfully RFC-compliant.
   */</comment>
  <expr_stmt><expr><call><name pos:line="57" pos:column="3">hmac_md5<pos:position pos:line="57" pos:column="11"/></name> <argument_list pos:line="57" pos:column="12">(<argument><expr><name><name pos:line="57" pos:column="13">idata<pos:position pos:line="57" pos:column="18"/></name><operator pos:line="57" pos:column="18">-&gt;<pos:position pos:line="57" pos:column="23"/></operator><name pos:line="57" pos:column="20">conn<pos:position pos:line="57" pos:column="24"/></name><operator pos:line="57" pos:column="24">-&gt;<pos:position pos:line="57" pos:column="29"/></operator><name pos:line="57" pos:column="26">account<pos:position pos:line="57" pos:column="33"/></name><operator pos:line="57" pos:column="33">.<pos:position pos:line="57" pos:column="34"/></operator><name pos:line="57" pos:column="34">pass<pos:position pos:line="57" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="40">obuf<pos:position pos:line="57" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="46">hmac_response<pos:position pos:line="57" pos:column="59"/></name></expr></argument>)<pos:position pos:line="57" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="61"/></expr_stmt>
  <comment type="block" pos:line="58" pos:column="3">/* dubious optimisation I saw elsewhere: make the whole string in one call */</comment>
  <expr_stmt><expr><call><name pos:line="59" pos:column="3">snprintf<pos:position pos:line="59" pos:column="11"/></name> <argument_list pos:line="59" pos:column="12">(<argument><expr><name pos:line="59" pos:column="13">obuf<pos:position pos:line="59" pos:column="17"/></name></expr></argument>, <argument><expr><sizeof pos:line="59" pos:column="19">sizeof <argument_list pos:line="59" pos:column="26">(<argument><expr><name pos:line="59" pos:column="27">obuf<pos:position pos:line="59" pos:column="31"/></name></expr></argument>)<pos:position pos:line="59" pos:column="32"/></argument_list></sizeof></expr></argument>,
    <argument><expr><literal type="string" pos:line="60" pos:column="5">"%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"<pos:position pos:line="60" pos:column="74"/></literal></expr></argument>,
    <argument><expr><name><name pos:line="61" pos:column="5">idata<pos:position pos:line="61" pos:column="10"/></name><operator pos:line="61" pos:column="10">-&gt;<pos:position pos:line="61" pos:column="15"/></operator><name pos:line="61" pos:column="12">conn<pos:position pos:line="61" pos:column="16"/></name><operator pos:line="61" pos:column="16">-&gt;<pos:position pos:line="61" pos:column="21"/></operator><name pos:line="61" pos:column="18">account<pos:position pos:line="61" pos:column="25"/></name><operator pos:line="61" pos:column="25">.<pos:position pos:line="61" pos:column="26"/></operator><name pos:line="61" pos:column="26">user<pos:position pos:line="61" pos:column="30"/></name></name></expr></argument>,
    <argument><expr><name><name pos:line="62" pos:column="5">hmac_response<pos:position pos:line="62" pos:column="18"/></name><index pos:line="62" pos:column="18">[<expr><literal type="number" pos:line="62" pos:column="19">0<pos:position pos:line="62" pos:column="20"/></literal></expr>]<pos:position pos:line="62" pos:column="21"/></index></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="23">hmac_response<pos:position pos:line="62" pos:column="36"/></name><index pos:line="62" pos:column="36">[<expr><literal type="number" pos:line="62" pos:column="37">1<pos:position pos:line="62" pos:column="38"/></literal></expr>]<pos:position pos:line="62" pos:column="39"/></index></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="41">hmac_response<pos:position pos:line="62" pos:column="54"/></name><index pos:line="62" pos:column="54">[<expr><literal type="number" pos:line="62" pos:column="55">2<pos:position pos:line="62" pos:column="56"/></literal></expr>]<pos:position pos:line="62" pos:column="57"/></index></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="59">hmac_response<pos:position pos:line="62" pos:column="72"/></name><index pos:line="62" pos:column="72">[<expr><literal type="number" pos:line="62" pos:column="73">3<pos:position pos:line="62" pos:column="74"/></literal></expr>]<pos:position pos:line="62" pos:column="75"/></index></name></expr></argument>,
    <argument><expr><name><name pos:line="63" pos:column="5">hmac_response<pos:position pos:line="63" pos:column="18"/></name><index pos:line="63" pos:column="18">[<expr><literal type="number" pos:line="63" pos:column="19">4<pos:position pos:line="63" pos:column="20"/></literal></expr>]<pos:position pos:line="63" pos:column="21"/></index></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="23">hmac_response<pos:position pos:line="63" pos:column="36"/></name><index pos:line="63" pos:column="36">[<expr><literal type="number" pos:line="63" pos:column="37">5<pos:position pos:line="63" pos:column="38"/></literal></expr>]<pos:position pos:line="63" pos:column="39"/></index></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="41">hmac_response<pos:position pos:line="63" pos:column="54"/></name><index pos:line="63" pos:column="54">[<expr><literal type="number" pos:line="63" pos:column="55">6<pos:position pos:line="63" pos:column="56"/></literal></expr>]<pos:position pos:line="63" pos:column="57"/></index></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="59">hmac_response<pos:position pos:line="63" pos:column="72"/></name><index pos:line="63" pos:column="72">[<expr><literal type="number" pos:line="63" pos:column="73">7<pos:position pos:line="63" pos:column="74"/></literal></expr>]<pos:position pos:line="63" pos:column="75"/></index></name></expr></argument>,
    <argument><expr><name><name pos:line="64" pos:column="5">hmac_response<pos:position pos:line="64" pos:column="18"/></name><index pos:line="64" pos:column="18">[<expr><literal type="number" pos:line="64" pos:column="19">8<pos:position pos:line="64" pos:column="20"/></literal></expr>]<pos:position pos:line="64" pos:column="21"/></index></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="23">hmac_response<pos:position pos:line="64" pos:column="36"/></name><index pos:line="64" pos:column="36">[<expr><literal type="number" pos:line="64" pos:column="37">9<pos:position pos:line="64" pos:column="38"/></literal></expr>]<pos:position pos:line="64" pos:column="39"/></index></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="41">hmac_response<pos:position pos:line="64" pos:column="54"/></name><index pos:line="64" pos:column="54">[<expr><literal type="number" pos:line="64" pos:column="55">10<pos:position pos:line="64" pos:column="57"/></literal></expr>]<pos:position pos:line="64" pos:column="58"/></index></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="60">hmac_response<pos:position pos:line="64" pos:column="73"/></name><index pos:line="64" pos:column="73">[<expr><literal type="number" pos:line="64" pos:column="74">11<pos:position pos:line="64" pos:column="76"/></literal></expr>]<pos:position pos:line="64" pos:column="77"/></index></name></expr></argument>,
    <argument><expr><name><name pos:line="65" pos:column="5">hmac_response<pos:position pos:line="65" pos:column="18"/></name><index pos:line="65" pos:column="18">[<expr><literal type="number" pos:line="65" pos:column="19">12<pos:position pos:line="65" pos:column="21"/></literal></expr>]<pos:position pos:line="65" pos:column="22"/></index></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="24">hmac_response<pos:position pos:line="65" pos:column="37"/></name><index pos:line="65" pos:column="37">[<expr><literal type="number" pos:line="65" pos:column="38">13<pos:position pos:line="65" pos:column="40"/></literal></expr>]<pos:position pos:line="65" pos:column="41"/></index></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="43">hmac_response<pos:position pos:line="65" pos:column="56"/></name><index pos:line="65" pos:column="56">[<expr><literal type="number" pos:line="65" pos:column="57">14<pos:position pos:line="65" pos:column="59"/></literal></expr>]<pos:position pos:line="65" pos:column="60"/></index></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="62">hmac_response<pos:position pos:line="65" pos:column="75"/></name><index pos:line="65" pos:column="75">[<expr><literal type="number" pos:line="65" pos:column="76">15<pos:position pos:line="65" pos:column="78"/></literal></expr>]<pos:position pos:line="65" pos:column="79"/></index></name></expr></argument>)<pos:position pos:line="65" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="81"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="66" pos:column="3">dprint<pos:position pos:line="66" pos:column="9"/></name><argument_list pos:line="66" pos:column="9">(<argument><expr><literal type="number" pos:line="66" pos:column="10">2<pos:position pos:line="66" pos:column="11"/></literal></expr></argument>, <argument><expr><operator pos:line="66" pos:column="13">(<pos:position pos:line="66" pos:column="14"/></operator><name pos:line="66" pos:column="14">debugfile<pos:position pos:line="66" pos:column="23"/></name><operator pos:line="66" pos:column="23">,<pos:position pos:line="66" pos:column="24"/></operator> <literal type="string" pos:line="66" pos:column="25">"CRAM response: %s\n"<pos:position pos:line="66" pos:column="46"/></literal><operator pos:line="66" pos:column="46">,<pos:position pos:line="66" pos:column="47"/></operator> <name pos:line="66" pos:column="48">obuf<pos:position pos:line="66" pos:column="52"/></name><operator pos:line="66" pos:column="52">)<pos:position pos:line="66" pos:column="53"/></operator></expr></argument>)<pos:position pos:line="66" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="55"/></expr_stmt>

  <comment type="block" pos:line="68" pos:column="3">/* XXX - ibuf must be long enough to store the base64 encoding of obuf, 
   * plus the additional debris
   */</comment>
  
  <expr_stmt><expr><call><name pos:line="72" pos:column="3">mutt_to_base64<pos:position pos:line="72" pos:column="17"/></name> <argument_list pos:line="72" pos:column="18">(<argument><expr><operator pos:line="72" pos:column="19">(<pos:position pos:line="72" pos:column="20"/></operator><name pos:line="72" pos:column="20">unsigned<pos:position pos:line="72" pos:column="28"/></name> <name pos:line="72" pos:column="29">char<pos:position pos:line="72" pos:column="33"/></name><operator pos:line="72" pos:column="33">*<pos:position pos:line="72" pos:column="34"/></operator><operator pos:line="72" pos:column="34">)<pos:position pos:line="72" pos:column="35"/></operator> <name pos:line="72" pos:column="36">ibuf<pos:position pos:line="72" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="42">(<pos:position pos:line="72" pos:column="43"/></operator><name pos:line="72" pos:column="43">unsigned<pos:position pos:line="72" pos:column="51"/></name> <name pos:line="72" pos:column="52">char<pos:position pos:line="72" pos:column="56"/></name><operator pos:line="72" pos:column="56">*<pos:position pos:line="72" pos:column="57"/></operator><operator pos:line="72" pos:column="57">)<pos:position pos:line="72" pos:column="58"/></operator> <name pos:line="72" pos:column="59">obuf<pos:position pos:line="72" pos:column="63"/></name></expr></argument>, <argument><expr><call><name pos:line="72" pos:column="65">strlen<pos:position pos:line="72" pos:column="71"/></name> <argument_list pos:line="72" pos:column="72">(<argument><expr><name pos:line="72" pos:column="73">obuf<pos:position pos:line="72" pos:column="77"/></name></expr></argument>)<pos:position pos:line="72" pos:column="78"/></argument_list></call></expr></argument>,
		  <argument><expr><sizeof pos:line="73" pos:column="19">sizeof <argument_list pos:line="73" pos:column="26">(<argument><expr><name pos:line="73" pos:column="27">ibuf<pos:position pos:line="73" pos:column="31"/></name></expr></argument>)<pos:position pos:line="73" pos:column="32"/></argument_list></sizeof> <operator pos:line="73" pos:column="33">-<pos:position pos:line="73" pos:column="34"/></operator> <literal type="number" pos:line="73" pos:column="35">2<pos:position pos:line="73" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="74" pos:column="3">safe_strcat<pos:position pos:line="74" pos:column="14"/></name> <argument_list pos:line="74" pos:column="15">(<argument><expr><name pos:line="74" pos:column="16">ibuf<pos:position pos:line="74" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="74" pos:column="22">sizeof <argument_list pos:line="74" pos:column="29">(<argument><expr><name pos:line="74" pos:column="30">ibuf<pos:position pos:line="74" pos:column="34"/></name></expr></argument>)<pos:position pos:line="74" pos:column="35"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="37">"\r\n"<pos:position pos:line="74" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="75" pos:column="3">mutt_socket_write<pos:position pos:line="75" pos:column="20"/></name> <argument_list pos:line="75" pos:column="21">(<argument><expr><name><name pos:line="75" pos:column="22">idata<pos:position pos:line="75" pos:column="27"/></name><operator pos:line="75" pos:column="27">-&gt;<pos:position pos:line="75" pos:column="32"/></operator><name pos:line="75" pos:column="29">conn<pos:position pos:line="75" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="35">ibuf<pos:position pos:line="75" pos:column="39"/></name></expr></argument>)<pos:position pos:line="75" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="41"/></expr_stmt>

  <do pos:line="77" pos:column="3">do
    <block type="pseudo"><expr_stmt><expr><name pos:line="78" pos:column="5">rc<pos:position pos:line="78" pos:column="7"/></name> <operator pos:line="78" pos:column="8">=<pos:position pos:line="78" pos:column="9"/></operator> <call><name pos:line="78" pos:column="10">imap_cmd_step<pos:position pos:line="78" pos:column="23"/></name> <argument_list pos:line="78" pos:column="24">(<argument><expr><name pos:line="78" pos:column="25">idata<pos:position pos:line="78" pos:column="30"/></name></expr></argument>)<pos:position pos:line="78" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="32"/></expr_stmt></block>
  while <condition pos:line="79" pos:column="9">(<expr><name pos:line="79" pos:column="10">rc<pos:position pos:line="79" pos:column="12"/></name> <operator pos:line="79" pos:column="13">==<pos:position pos:line="79" pos:column="15"/></operator> <name pos:line="79" pos:column="16">IMAP_CMD_CONTINUE<pos:position pos:line="79" pos:column="33"/></name></expr>)<pos:position pos:line="79" pos:column="34"/></condition>;<pos:position pos:line="79" pos:column="35"/></do>

  <if pos:line="81" pos:column="3">if <condition pos:line="81" pos:column="6">(<expr><name pos:line="81" pos:column="7">rc<pos:position pos:line="81" pos:column="9"/></name> <operator pos:line="81" pos:column="10">!=<pos:position pos:line="81" pos:column="12"/></operator> <name pos:line="81" pos:column="13">IMAP_CMD_OK<pos:position pos:line="81" pos:column="24"/></name></expr>)<pos:position pos:line="81" pos:column="25"/></condition><then pos:line="81" pos:column="25">
  <block pos:line="82" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">dprint<pos:position pos:line="83" pos:column="11"/></name> <argument_list pos:line="83" pos:column="12">(<argument><expr><literal type="number" pos:line="83" pos:column="13">1<pos:position pos:line="83" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="83" pos:column="16">(<pos:position pos:line="83" pos:column="17"/></operator><name pos:line="83" pos:column="17">debugfile<pos:position pos:line="83" pos:column="26"/></name><operator pos:line="83" pos:column="26">,<pos:position pos:line="83" pos:column="27"/></operator> <literal type="string" pos:line="83" pos:column="28">"Error receiving server response.\n"<pos:position pos:line="83" pos:column="64"/></literal><operator pos:line="83" pos:column="64">)<pos:position pos:line="83" pos:column="65"/></operator></expr></argument>)<pos:position pos:line="83" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="67"/></expr_stmt>
    <goto pos:line="84" pos:column="5">goto <name pos:line="84" pos:column="10">bail<pos:position pos:line="84" pos:column="14"/></name>;<pos:position pos:line="84" pos:column="15"/></goto>
  }<pos:position pos:line="85" pos:column="4"/></block></then></if>

  <if pos:line="87" pos:column="3">if <condition pos:line="87" pos:column="6">(<expr><call><name pos:line="87" pos:column="7">imap_code<pos:position pos:line="87" pos:column="16"/></name> <argument_list pos:line="87" pos:column="17">(<argument><expr><name><name pos:line="87" pos:column="18">idata<pos:position pos:line="87" pos:column="23"/></name><operator pos:line="87" pos:column="23">-&gt;<pos:position pos:line="87" pos:column="28"/></operator><name pos:line="87" pos:column="25">buf<pos:position pos:line="87" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="30"/></condition><then pos:line="87" pos:column="30">
    <block type="pseudo"><return pos:line="88" pos:column="5">return <expr><name pos:line="88" pos:column="12">IMAP_AUTH_SUCCESS<pos:position pos:line="88" pos:column="29"/></name></expr>;<pos:position pos:line="88" pos:column="30"/></return></block></then></if>

 <label><name pos:line="90" pos:column="2">bail<pos:position pos:line="90" pos:column="6"/></name>:<pos:position pos:line="90" pos:column="7"/></label>
  <decl_stmt><decl><type><name pos:line="91" pos:column="3">mutt_error<pos:position pos:line="91" pos:column="13"/></name></type> <name pos:line="91" pos:column="14">_<pos:position pos:line="91" pos:column="15"/></name><argument_list pos:line="91" pos:column="15">(<argument><expr><literal type="string" pos:line="91" pos:column="16">"CRAM-MD5 authentication failed."<pos:position pos:line="91" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="50"/></argument_list></decl>;<pos:position pos:line="91" pos:column="51"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="92" pos:column="3">mutt_sleep<pos:position pos:line="92" pos:column="13"/></name> <argument_list pos:line="92" pos:column="14">(<argument><expr><literal type="number" pos:line="92" pos:column="15">2<pos:position pos:line="92" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="18"/></expr_stmt>
  <return pos:line="93" pos:column="3">return <expr><name pos:line="93" pos:column="10">IMAP_AUTH_FAILURE<pos:position pos:line="93" pos:column="27"/></name></expr>;<pos:position pos:line="93" pos:column="28"/></return>
}<pos:position pos:line="94" pos:column="2"/></block></function></unit>
