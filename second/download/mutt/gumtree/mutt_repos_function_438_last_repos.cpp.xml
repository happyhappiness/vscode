<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_438_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fseek_last_message<pos:position pos:line="1" pos:column="30"/></name> <parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">FILE<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type> <name pos:line="1" pos:column="39">f<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">LOFF_T<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">pos<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">buffer<pos:position pos:line="4" pos:column="14"/></name><index pos:line="4" pos:column="14">[<expr><name pos:line="4" pos:column="15">BUFSIZ<pos:position pos:line="4" pos:column="21"/></name> <operator pos:line="4" pos:column="22">+<pos:position pos:line="4" pos:column="23"/></operator> <literal type="number" pos:line="4" pos:column="24">9<pos:position pos:line="4" pos:column="25"/></literal></expr>]<pos:position pos:line="4" pos:column="26"/></index></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>	<comment type="block" pos:line="4" pos:column="33">/* 7 for "\n\nFrom " */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">bytes_read<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">i<pos:position pos:line="6" pos:column="8"/></name></decl>;<pos:position pos:line="6" pos:column="9"/></decl_stmt>			<comment type="block" pos:line="6" pos:column="33">/* Index into `buffer' for scanning.  */</comment>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">memset<pos:position pos:line="8" pos:column="9"/></name> <argument_list pos:line="8" pos:column="10">(<argument><expr><name pos:line="8" pos:column="11">buffer<pos:position pos:line="8" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="22">sizeof<argument_list pos:line="8" pos:column="28">(<argument><expr><name pos:line="8" pos:column="29">buffer<pos:position pos:line="8" pos:column="35"/></name></expr></argument>)<pos:position pos:line="8" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">fseek<pos:position pos:line="9" pos:column="8"/></name> <argument_list pos:line="9" pos:column="9">(<argument><expr><name pos:line="9" pos:column="10">f<pos:position pos:line="9" pos:column="11"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="13">0<pos:position pos:line="9" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="16">SEEK_END<pos:position pos:line="9" pos:column="24"/></name></expr></argument>)<pos:position pos:line="9" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">pos<pos:position pos:line="10" pos:column="6"/></name> <operator pos:line="10" pos:column="7">=<pos:position pos:line="10" pos:column="8"/></operator> <call><name pos:line="10" pos:column="9">ftello<pos:position pos:line="10" pos:column="15"/></name> <argument_list pos:line="10" pos:column="16">(<argument><expr><name pos:line="10" pos:column="17">f<pos:position pos:line="10" pos:column="18"/></name></expr></argument>)<pos:position pos:line="10" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="20"/></expr_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* Set `bytes_read' to the size of the last, probably partial, buffer; 0 &lt;
   * `bytes_read' &lt;= `BUFSIZ'.  */</comment>
  <expr_stmt><expr><name pos:line="14" pos:column="3">bytes_read<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <name pos:line="14" pos:column="16">pos<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">%<pos:position pos:line="14" pos:column="21"/></operator> <name pos:line="14" pos:column="22">BUFSIZ<pos:position pos:line="14" pos:column="28"/></name></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">bytes_read<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">==<pos:position pos:line="15" pos:column="20"/></operator> <literal type="number" pos:line="15" pos:column="21">0<pos:position pos:line="15" pos:column="22"/></literal></expr>)<pos:position pos:line="15" pos:column="23"/></condition><then pos:line="15" pos:column="23">
    <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="5">bytes_read<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <name pos:line="16" pos:column="18">BUFSIZ<pos:position pos:line="16" pos:column="24"/></name></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt></block></then></if>
  <comment type="block" pos:line="17" pos:column="3">/* Make `pos' a multiple of `BUFSIZ' (0 if the file is short), so that all
   * reads will be on block boundaries, which might increase efficiency.  */</comment>
  <while pos:line="19" pos:column="3">while <condition pos:line="19" pos:column="9">(<expr><operator pos:line="19" pos:column="10">(<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="11">pos<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">-=<pos:position pos:line="19" pos:column="17"/></operator> <name pos:line="19" pos:column="18">bytes_read<pos:position pos:line="19" pos:column="28"/></name><operator pos:line="19" pos:column="28">)<pos:position pos:line="19" pos:column="29"/></operator> <operator pos:line="19" pos:column="30">&gt;=<pos:position pos:line="19" pos:column="35"/></operator> <literal type="number" pos:line="19" pos:column="33">0<pos:position pos:line="19" pos:column="34"/></literal></expr>)<pos:position pos:line="19" pos:column="35"/></condition>
  <block pos:line="20" pos:column="3">{
    <comment type="block" pos:line="21" pos:column="5">/* we save in the buffer at the end the first 7 chars from the last read */</comment>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">strncpy<pos:position pos:line="22" pos:column="12"/></name> <argument_list pos:line="22" pos:column="13">(<argument><expr><name pos:line="22" pos:column="14">buffer<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">+<pos:position pos:line="22" pos:column="22"/></operator> <name pos:line="22" pos:column="23">BUFSIZ<pos:position pos:line="22" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="31">buffer<pos:position pos:line="22" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="39">5<pos:position pos:line="22" pos:column="40"/></literal><operator pos:line="22" pos:column="40">+<pos:position pos:line="22" pos:column="41"/></operator><literal type="number" pos:line="22" pos:column="41">2<pos:position pos:line="22" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="44"/></expr_stmt> <comment type="block" pos:line="22" pos:column="45">/* 2 == 2 * mutt_strlen(CRLF) */</comment>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">fseeko<pos:position pos:line="23" pos:column="11"/></name> <argument_list pos:line="23" pos:column="12">(<argument><expr><name pos:line="23" pos:column="13">f<pos:position pos:line="23" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="16">pos<pos:position pos:line="23" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="21">SEEK_SET<pos:position pos:line="23" pos:column="29"/></name></expr></argument>)<pos:position pos:line="23" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="24" pos:column="5">bytes_read<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <call><name pos:line="24" pos:column="18">fread<pos:position pos:line="24" pos:column="23"/></name> <argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">buffer<pos:position pos:line="24" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="33">sizeof <argument_list pos:line="24" pos:column="40">(<argument><expr><name pos:line="24" pos:column="41">char<pos:position pos:line="24" pos:column="45"/></name></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="24" pos:column="48">bytes_read<pos:position pos:line="24" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="60">f<pos:position pos:line="24" pos:column="61"/></name></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="63"/></expr_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">bytes_read<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">==<pos:position pos:line="25" pos:column="22"/></operator> <operator pos:line="25" pos:column="23">-<pos:position pos:line="25" pos:column="24"/></operator><literal type="number" pos:line="25" pos:column="24">1<pos:position pos:line="25" pos:column="25"/></literal></expr>)<pos:position pos:line="25" pos:column="26"/></condition><then pos:line="25" pos:column="26">
      <block type="pseudo"><return pos:line="26" pos:column="7">return <expr><operator pos:line="26" pos:column="14">-<pos:position pos:line="26" pos:column="15"/></operator><literal type="number" pos:line="26" pos:column="15">1<pos:position pos:line="26" pos:column="16"/></literal></expr>;<pos:position pos:line="26" pos:column="17"/></return></block></then></if>
    <for pos:line="27" pos:column="5">for <control pos:line="27" pos:column="9">(<init><expr><name pos:line="27" pos:column="10">i<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">=<pos:position pos:line="27" pos:column="13"/></operator> <name pos:line="27" pos:column="14">bytes_read<pos:position pos:line="27" pos:column="24"/></name></expr>;<pos:position pos:line="27" pos:column="25"/></init> <condition><expr><operator pos:line="27" pos:column="26">--<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="28">i<pos:position pos:line="27" pos:column="29"/></name> <operator pos:line="27" pos:column="30">&gt;=<pos:position pos:line="27" pos:column="35"/></operator> <literal type="number" pos:line="27" pos:column="33">0<pos:position pos:line="27" pos:column="34"/></literal></expr>;<pos:position pos:line="27" pos:column="35"/></condition><incr/>)<pos:position pos:line="27" pos:column="36"/></control>
      <block type="pseudo"><if pos:line="28" pos:column="7">if <condition pos:line="28" pos:column="10">(<expr><operator pos:line="28" pos:column="11">!<pos:position pos:line="28" pos:column="12"/></operator><call><name pos:line="28" pos:column="12">mutt_strncmp<pos:position pos:line="28" pos:column="24"/></name> <argument_list pos:line="28" pos:column="25">(<argument><expr><name pos:line="28" pos:column="26">buffer<pos:position pos:line="28" pos:column="32"/></name> <operator pos:line="28" pos:column="33">+<pos:position pos:line="28" pos:column="34"/></operator> <name pos:line="28" pos:column="35">i<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="38">"\n\nFrom "<pos:position pos:line="28" pos:column="49"/></literal></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="51">mutt_strlen<pos:position pos:line="28" pos:column="62"/></name> <argument_list pos:line="28" pos:column="63">(<argument><expr><literal type="string" pos:line="28" pos:column="64">"\n\nFrom "<pos:position pos:line="28" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="78"/></condition><then pos:line="28" pos:column="78">
      <block pos:line="29" pos:column="7">{				<comment type="block" pos:line="29" pos:column="33">/* found it - go to the beginning of the From */</comment>
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">fseeko<pos:position pos:line="30" pos:column="15"/></name> <argument_list pos:line="30" pos:column="16">(<argument><expr><name pos:line="30" pos:column="17">f<pos:position pos:line="30" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="20">pos<pos:position pos:line="30" pos:column="23"/></name> <operator pos:line="30" pos:column="24">+<pos:position pos:line="30" pos:column="25"/></operator> <name pos:line="30" pos:column="26">i<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">+<pos:position pos:line="30" pos:column="29"/></operator> <literal type="number" pos:line="30" pos:column="30">2<pos:position pos:line="30" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="33">SEEK_SET<pos:position pos:line="30" pos:column="41"/></name></expr></argument>)<pos:position pos:line="30" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="43"/></expr_stmt>
	<return pos:line="31" pos:column="9">return <expr><literal type="number" pos:line="31" pos:column="16">0<pos:position pos:line="31" pos:column="17"/></literal></expr>;<pos:position pos:line="31" pos:column="18"/></return>
      }<pos:position pos:line="32" pos:column="8"/></block></then></if></block></for>
    <expr_stmt><expr><name pos:line="33" pos:column="5">bytes_read<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <name pos:line="33" pos:column="18">BUFSIZ<pos:position pos:line="33" pos:column="24"/></name></expr>;<pos:position pos:line="33" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block></while>

  <comment type="block" pos:line="36" pos:column="3">/* here we are at the beginning of the file */</comment>
  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><operator pos:line="37" pos:column="7">!<pos:position pos:line="37" pos:column="8"/></operator><call><name pos:line="37" pos:column="8">mutt_strncmp<pos:position pos:line="37" pos:column="20"/></name> <argument_list pos:line="37" pos:column="21">(<argument><expr><literal type="string" pos:line="37" pos:column="22">"From "<pos:position pos:line="37" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="31">buffer<pos:position pos:line="37" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="39">5<pos:position pos:line="37" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="42"/></condition><then pos:line="37" pos:column="42">
  <block pos:line="38" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">fseek<pos:position pos:line="39" pos:column="10"/></name> <argument_list pos:line="39" pos:column="11">(<argument><expr><name pos:line="39" pos:column="12">f<pos:position pos:line="39" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="15">0<pos:position pos:line="39" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="18">0<pos:position pos:line="39" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt>
    <return pos:line="40" pos:column="5">return <expr><operator pos:line="40" pos:column="12">(<pos:position pos:line="40" pos:column="13"/></operator><literal type="number" pos:line="40" pos:column="13">0<pos:position pos:line="40" pos:column="14"/></literal><operator pos:line="40" pos:column="14">)<pos:position pos:line="40" pos:column="15"/></operator></expr>;<pos:position pos:line="40" pos:column="16"/></return>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if>

  <return pos:line="43" pos:column="3">return <expr><operator pos:line="43" pos:column="10">(<pos:position pos:line="43" pos:column="11"/></operator><operator pos:line="43" pos:column="11">-<pos:position pos:line="43" pos:column="12"/></operator><literal type="number" pos:line="43" pos:column="12">1<pos:position pos:line="43" pos:column="13"/></literal><operator pos:line="43" pos:column="13">)<pos:position pos:line="43" pos:column="14"/></operator></expr>;<pos:position pos:line="43" pos:column="15"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
