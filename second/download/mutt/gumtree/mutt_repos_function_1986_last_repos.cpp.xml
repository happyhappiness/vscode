<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1986_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">print_confline<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">varname<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">int<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">type<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="60">const<pos:position pos:line="1" pos:column="65"/></specifier> <name pos:line="1" pos:column="66">char<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">val<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="77">FILE<pos:position pos:line="1" pos:column="81"/></name> <modifier pos:line="1" pos:column="82">*<pos:position pos:line="1" pos:column="83"/></modifier></type><name pos:line="1" pos:column="83">out<pos:position pos:line="1" pos:column="86"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="87"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">type<pos:position pos:line="3" pos:column="11"/></name> <operator pos:line="3" pos:column="12">==<pos:position pos:line="3" pos:column="14"/></operator> <name pos:line="3" pos:column="15">DT_SYN<pos:position pos:line="3" pos:column="21"/></name></expr>)<pos:position pos:line="3" pos:column="22"/></condition><then pos:line="3" pos:column="22"> <block type="pseudo"><return pos:line="3" pos:column="23">return;<pos:position pos:line="3" pos:column="30"/></return></block></then></if>
  
  <switch pos:line="5" pos:column="3">switch <condition pos:line="5" pos:column="10">(<expr><name pos:line="5" pos:column="11">OutputFormat<pos:position pos:line="5" pos:column="23"/></name></expr>)<pos:position pos:line="5" pos:column="24"/></condition>
  <block pos:line="6" pos:column="3">{
    <comment type="block" pos:line="7" pos:column="5">/* configuration file */</comment>
    <case pos:line="8" pos:column="5">case <expr><name pos:line="8" pos:column="10">F_CONF<pos:position pos:line="8" pos:column="16"/></name></expr>:<pos:position pos:line="8" pos:column="17"/></case>
    <block pos:line="9" pos:column="5">{
      <if pos:line="10" pos:column="7">if <condition pos:line="10" pos:column="10">(<expr><name pos:line="10" pos:column="11">type<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">==<pos:position pos:line="10" pos:column="18"/></operator> <name pos:line="10" pos:column="19">DT_STR<pos:position pos:line="10" pos:column="25"/></name> <operator pos:line="10" pos:column="26">||<pos:position pos:line="10" pos:column="28"/></operator> <name pos:line="10" pos:column="29">type<pos:position pos:line="10" pos:column="33"/></name> <operator pos:line="10" pos:column="34">==<pos:position pos:line="10" pos:column="36"/></operator> <name pos:line="10" pos:column="37">DT_RX<pos:position pos:line="10" pos:column="42"/></name> <operator pos:line="10" pos:column="43">||<pos:position pos:line="10" pos:column="45"/></operator> <name pos:line="10" pos:column="46">type<pos:position pos:line="10" pos:column="50"/></name> <operator pos:line="10" pos:column="51">==<pos:position pos:line="10" pos:column="53"/></operator> <name pos:line="10" pos:column="54">DT_ADDR<pos:position pos:line="10" pos:column="61"/></name> <operator pos:line="10" pos:column="62">||<pos:position pos:line="10" pos:column="64"/></operator> <name pos:line="10" pos:column="65">type<pos:position pos:line="10" pos:column="69"/></name> <operator pos:line="10" pos:column="70">==<pos:position pos:line="10" pos:column="72"/></operator> <name pos:line="10" pos:column="73">DT_PATH<pos:position pos:line="10" pos:column="80"/></name> <operator pos:line="10" pos:column="81">||<pos:position pos:line="10" pos:column="83"/></operator>
          <name pos:line="11" pos:column="11">type<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">==<pos:position pos:line="11" pos:column="18"/></operator> <name pos:line="11" pos:column="19">DT_MBCHARTBL<pos:position pos:line="11" pos:column="31"/></name></expr>)<pos:position pos:line="11" pos:column="32"/></condition><then pos:line="11" pos:column="32">
      <block pos:line="12" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">fprintf<pos:position pos:line="13" pos:column="16"/></name> <argument_list pos:line="13" pos:column="17">(<argument><expr><name pos:line="13" pos:column="18">out<pos:position pos:line="13" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="23">"\n# set %s=\""<pos:position pos:line="13" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="40">varname<pos:position pos:line="13" pos:column="47"/></name></expr></argument>)<pos:position pos:line="13" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">conf_print_strval<pos:position pos:line="14" pos:column="26"/></name> <argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">val<pos:position pos:line="14" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="33">out<pos:position pos:line="14" pos:column="36"/></name></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">fputs<pos:position pos:line="15" pos:column="14"/></name> <argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="string" pos:line="15" pos:column="16">"\""<pos:position pos:line="15" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="22">out<pos:position pos:line="15" pos:column="25"/></name></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt>
      }<pos:position pos:line="16" pos:column="8"/></block></then>
      <elseif pos:line="17" pos:column="7">else <if pos:line="17" pos:column="12">if <condition pos:line="17" pos:column="15">(<expr><name pos:line="17" pos:column="16">type<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">!=<pos:position pos:line="17" pos:column="23"/></operator> <name pos:line="17" pos:column="24">DT_SYN<pos:position pos:line="17" pos:column="30"/></name></expr>)<pos:position pos:line="17" pos:column="31"/></condition><then pos:line="17" pos:column="31">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="9">fprintf<pos:position pos:line="18" pos:column="16"/></name> <argument_list pos:line="18" pos:column="17">(<argument><expr><name pos:line="18" pos:column="18">out<pos:position pos:line="18" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="23">"\n# set %s=%s"<pos:position pos:line="18" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="40">varname<pos:position pos:line="18" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="49">val<pos:position pos:line="18" pos:column="52"/></name></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="54"/></expr_stmt></block></then></if></elseif></if>
      
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">fprintf<pos:position pos:line="20" pos:column="14"/></name> <argument_list pos:line="20" pos:column="15">(<argument><expr><name pos:line="20" pos:column="16">out<pos:position pos:line="20" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="21">"\n#\n# Name: %s"<pos:position pos:line="20" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="40">varname<pos:position pos:line="20" pos:column="47"/></name></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">fprintf<pos:position pos:line="21" pos:column="14"/></name> <argument_list pos:line="21" pos:column="15">(<argument><expr><name pos:line="21" pos:column="16">out<pos:position pos:line="21" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="21">"\n# Type: %s"<pos:position pos:line="21" pos:column="35"/></literal></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="37">type2human<pos:position pos:line="21" pos:column="47"/></name> <argument_list pos:line="21" pos:column="48">(<argument><expr><name pos:line="21" pos:column="49">type<pos:position pos:line="21" pos:column="53"/></name></expr></argument>)<pos:position pos:line="21" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="56"/></expr_stmt>
      <if pos:line="22" pos:column="7">if <condition pos:line="22" pos:column="10">(<expr><name pos:line="22" pos:column="11">type<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">==<pos:position pos:line="22" pos:column="18"/></operator> <name pos:line="22" pos:column="19">DT_STR<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">||<pos:position pos:line="22" pos:column="28"/></operator> <name pos:line="22" pos:column="29">type<pos:position pos:line="22" pos:column="33"/></name> <operator pos:line="22" pos:column="34">==<pos:position pos:line="22" pos:column="36"/></operator> <name pos:line="22" pos:column="37">DT_RX<pos:position pos:line="22" pos:column="42"/></name> <operator pos:line="22" pos:column="43">||<pos:position pos:line="22" pos:column="45"/></operator> <name pos:line="22" pos:column="46">type<pos:position pos:line="22" pos:column="50"/></name> <operator pos:line="22" pos:column="51">==<pos:position pos:line="22" pos:column="53"/></operator> <name pos:line="22" pos:column="54">DT_ADDR<pos:position pos:line="22" pos:column="61"/></name> <operator pos:line="22" pos:column="62">||<pos:position pos:line="22" pos:column="64"/></operator> <name pos:line="22" pos:column="65">type<pos:position pos:line="22" pos:column="69"/></name> <operator pos:line="22" pos:column="70">==<pos:position pos:line="22" pos:column="72"/></operator> <name pos:line="22" pos:column="73">DT_PATH<pos:position pos:line="22" pos:column="80"/></name> <operator pos:line="22" pos:column="81">||<pos:position pos:line="22" pos:column="83"/></operator>
          <name pos:line="23" pos:column="11">type<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">==<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">DT_MBCHARTBL<pos:position pos:line="23" pos:column="31"/></name></expr>)<pos:position pos:line="23" pos:column="32"/></condition><then pos:line="23" pos:column="32">
      <block pos:line="24" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">fputs<pos:position pos:line="25" pos:column="14"/></name> <argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="string" pos:line="25" pos:column="16">"\n# Default: \""<pos:position pos:line="25" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="35">out<pos:position pos:line="25" pos:column="38"/></name></expr></argument>)<pos:position pos:line="25" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">conf_print_strval<pos:position pos:line="26" pos:column="26"/></name> <argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">val<pos:position pos:line="26" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="33">out<pos:position pos:line="26" pos:column="36"/></name></expr></argument>)<pos:position pos:line="26" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">fputs<pos:position pos:line="27" pos:column="14"/></name> <argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="string" pos:line="27" pos:column="16">"\""<pos:position pos:line="27" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="22">out<pos:position pos:line="27" pos:column="25"/></name></expr></argument>)<pos:position pos:line="27" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>
      }<pos:position pos:line="28" pos:column="8"/></block></then>
      <else pos:line="29" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="9">fprintf<pos:position pos:line="30" pos:column="16"/></name> <argument_list pos:line="30" pos:column="17">(<argument><expr><name pos:line="30" pos:column="18">out<pos:position pos:line="30" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="23">"\n# Default: %s"<pos:position pos:line="30" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="42">val<pos:position pos:line="30" pos:column="45"/></name></expr></argument>)<pos:position pos:line="30" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="47"/></expr_stmt></block></else></if>

      <expr_stmt><expr><call><name pos:line="32" pos:column="7">fputs<pos:position pos:line="32" pos:column="12"/></name> <argument_list pos:line="32" pos:column="13">(<argument><expr><literal type="string" pos:line="32" pos:column="14">"\n# "<pos:position pos:line="32" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="22">out<pos:position pos:line="32" pos:column="25"/></name></expr></argument>)<pos:position pos:line="32" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="27"/></expr_stmt>
      <break pos:line="33" pos:column="7">break;<pos:position pos:line="33" pos:column="13"/></break>
    }<pos:position pos:line="34" pos:column="6"/></block>

    <comment type="block" pos:line="36" pos:column="5">/* manual page */</comment>
    <case pos:line="37" pos:column="5">case <expr><name pos:line="37" pos:column="10">F_MAN<pos:position pos:line="37" pos:column="15"/></name></expr>:<pos:position pos:line="37" pos:column="16"/></case>
    <block pos:line="38" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">fprintf<pos:position pos:line="39" pos:column="14"/></name> <argument_list pos:line="39" pos:column="15">(<argument><expr><name pos:line="39" pos:column="16">out<pos:position pos:line="39" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="21">"\n.TP\n.B %s\n"<pos:position pos:line="39" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="39">varname<pos:position pos:line="39" pos:column="46"/></name></expr></argument>)<pos:position pos:line="39" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">fputs<pos:position pos:line="40" pos:column="12"/></name> <argument_list pos:line="40" pos:column="13">(<argument><expr><literal type="string" pos:line="40" pos:column="14">".nf\n"<pos:position pos:line="40" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="23">out<pos:position pos:line="40" pos:column="26"/></name></expr></argument>)<pos:position pos:line="40" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="41" pos:column="7">fprintf<pos:position pos:line="41" pos:column="14"/></name> <argument_list pos:line="41" pos:column="15">(<argument><expr><name pos:line="41" pos:column="16">out<pos:position pos:line="41" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="21">"Type: %s\n"<pos:position pos:line="41" pos:column="33"/></literal></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="35">type2human<pos:position pos:line="41" pos:column="45"/></name> <argument_list pos:line="41" pos:column="46">(<argument><expr><name pos:line="41" pos:column="47">type<pos:position pos:line="41" pos:column="51"/></name></expr></argument>)<pos:position pos:line="41" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="54"/></expr_stmt>
      <if pos:line="42" pos:column="7">if <condition pos:line="42" pos:column="10">(<expr><name pos:line="42" pos:column="11">type<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">==<pos:position pos:line="42" pos:column="18"/></operator> <name pos:line="42" pos:column="19">DT_STR<pos:position pos:line="42" pos:column="25"/></name> <operator pos:line="42" pos:column="26">||<pos:position pos:line="42" pos:column="28"/></operator> <name pos:line="42" pos:column="29">type<pos:position pos:line="42" pos:column="33"/></name> <operator pos:line="42" pos:column="34">==<pos:position pos:line="42" pos:column="36"/></operator> <name pos:line="42" pos:column="37">DT_RX<pos:position pos:line="42" pos:column="42"/></name> <operator pos:line="42" pos:column="43">||<pos:position pos:line="42" pos:column="45"/></operator> <name pos:line="42" pos:column="46">type<pos:position pos:line="42" pos:column="50"/></name> <operator pos:line="42" pos:column="51">==<pos:position pos:line="42" pos:column="53"/></operator> <name pos:line="42" pos:column="54">DT_ADDR<pos:position pos:line="42" pos:column="61"/></name> <operator pos:line="42" pos:column="62">||<pos:position pos:line="42" pos:column="64"/></operator> <name pos:line="42" pos:column="65">type<pos:position pos:line="42" pos:column="69"/></name> <operator pos:line="42" pos:column="70">==<pos:position pos:line="42" pos:column="72"/></operator> <name pos:line="42" pos:column="73">DT_PATH<pos:position pos:line="42" pos:column="80"/></name> <operator pos:line="42" pos:column="81">||<pos:position pos:line="42" pos:column="83"/></operator>
          <name pos:line="43" pos:column="11">type<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">==<pos:position pos:line="43" pos:column="18"/></operator> <name pos:line="43" pos:column="19">DT_MBCHARTBL<pos:position pos:line="43" pos:column="31"/></name></expr>)<pos:position pos:line="43" pos:column="32"/></condition><then pos:line="43" pos:column="32">
      <block pos:line="44" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="45" pos:column="9">fputs<pos:position pos:line="45" pos:column="14"/></name> <argument_list pos:line="45" pos:column="15">(<argument><expr><literal type="string" pos:line="45" pos:column="16">"Default: \\(lq"<pos:position pos:line="45" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="34">out<pos:position pos:line="45" pos:column="37"/></name></expr></argument>)<pos:position pos:line="45" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">man_print_strval<pos:position pos:line="46" pos:column="25"/></name> <argument_list pos:line="46" pos:column="26">(<argument><expr><name pos:line="46" pos:column="27">val<pos:position pos:line="46" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="32">out<pos:position pos:line="46" pos:column="35"/></name></expr></argument>)<pos:position pos:line="46" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="47" pos:column="9">fputs<pos:position pos:line="47" pos:column="14"/></name> <argument_list pos:line="47" pos:column="15">(<argument><expr><literal type="string" pos:line="47" pos:column="16">"\\(rq\n"<pos:position pos:line="47" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="27">out<pos:position pos:line="47" pos:column="30"/></name></expr></argument>)<pos:position pos:line="47" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="32"/></expr_stmt>
      }<pos:position pos:line="48" pos:column="8"/></block></then>
      <else pos:line="49" pos:column="7">else <block pos:line="49" pos:column="12">{
	<expr_stmt><expr><call><name pos:line="50" pos:column="9">fputs<pos:position pos:line="50" pos:column="14"/></name> <argument_list pos:line="50" pos:column="15">(<argument><expr><literal type="string" pos:line="50" pos:column="16">"Default: "<pos:position pos:line="50" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="29">out<pos:position pos:line="50" pos:column="32"/></name></expr></argument>)<pos:position pos:line="50" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="51" pos:column="9">man_print_strval<pos:position pos:line="51" pos:column="25"/></name> <argument_list pos:line="51" pos:column="26">(<argument><expr><name pos:line="51" pos:column="27">val<pos:position pos:line="51" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="32">out<pos:position pos:line="51" pos:column="35"/></name></expr></argument>)<pos:position pos:line="51" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="52" pos:column="9">fputs<pos:position pos:line="52" pos:column="14"/></name> <argument_list pos:line="52" pos:column="15">(<argument><expr><literal type="string" pos:line="52" pos:column="16">"\n"<pos:position pos:line="52" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="22">out<pos:position pos:line="52" pos:column="25"/></name></expr></argument>)<pos:position pos:line="52" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="27"/></expr_stmt>
      }<pos:position pos:line="53" pos:column="8"/></block></else></if>

      <expr_stmt><expr><call><name pos:line="55" pos:column="7">fputs<pos:position pos:line="55" pos:column="12"/></name> <argument_list pos:line="55" pos:column="13">(<argument><expr><literal type="string" pos:line="55" pos:column="14">".fi"<pos:position pos:line="55" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="21">out<pos:position pos:line="55" pos:column="24"/></name></expr></argument>)<pos:position pos:line="55" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="26"/></expr_stmt>

      <break pos:line="57" pos:column="7">break;<pos:position pos:line="57" pos:column="13"/></break>
    }<pos:position pos:line="58" pos:column="6"/></block>
    
    <comment type="block" pos:line="60" pos:column="5">/* SGML based manual */</comment>
    <case pos:line="61" pos:column="5">case <expr><name pos:line="61" pos:column="10">F_SGML<pos:position pos:line="61" pos:column="16"/></name></expr>:<pos:position pos:line="61" pos:column="17"/></case>
    <block pos:line="62" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="63" pos:column="7">fputs<pos:position pos:line="63" pos:column="12"/></name> <argument_list pos:line="63" pos:column="13">(<argument><expr><literal type="string" pos:line="63" pos:column="14">"\n&lt;sect2 id=\""<pos:position pos:line="63" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="32">out<pos:position pos:line="63" pos:column="35"/></name></expr></argument>)<pos:position pos:line="63" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="64" pos:column="7">sgml_id_fputs<pos:position pos:line="64" pos:column="20"/></name><argument_list pos:line="64" pos:column="20">(<argument><expr><name pos:line="64" pos:column="21">varname<pos:position pos:line="64" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="30">out<pos:position pos:line="64" pos:column="33"/></name></expr></argument>)<pos:position pos:line="64" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="65" pos:column="7">fputs<pos:position pos:line="65" pos:column="12"/></name> <argument_list pos:line="65" pos:column="13">(<argument><expr><literal type="string" pos:line="65" pos:column="14">"\"&gt;\n&lt;title&gt;"<pos:position pos:line="65" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="30">out<pos:position pos:line="65" pos:column="33"/></name></expr></argument>)<pos:position pos:line="65" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="66" pos:column="7">sgml_fputs<pos:position pos:line="66" pos:column="17"/></name> <argument_list pos:line="66" pos:column="18">(<argument><expr><name pos:line="66" pos:column="19">varname<pos:position pos:line="66" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="28">out<pos:position pos:line="66" pos:column="31"/></name></expr></argument>)<pos:position pos:line="66" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="67" pos:column="7">fprintf<pos:position pos:line="67" pos:column="14"/></name> <argument_list pos:line="67" pos:column="15">(<argument><expr><name pos:line="67" pos:column="16">out<pos:position pos:line="67" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="21">"&lt;/title&gt;\n&lt;literallayout&gt;Type: %s"<pos:position pos:line="67" pos:column="68"/></literal></expr></argument>, <argument><expr><call><name pos:line="67" pos:column="58">type2human<pos:position pos:line="67" pos:column="68"/></name> <argument_list pos:line="67" pos:column="69">(<argument><expr><name pos:line="67" pos:column="70">type<pos:position pos:line="67" pos:column="74"/></name></expr></argument>)<pos:position pos:line="67" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="67" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="77"/></expr_stmt>

      
      <if pos:line="70" pos:column="7">if <condition pos:line="70" pos:column="10">(<expr><name pos:line="70" pos:column="11">type<pos:position pos:line="70" pos:column="15"/></name> <operator pos:line="70" pos:column="16">==<pos:position pos:line="70" pos:column="18"/></operator> <name pos:line="70" pos:column="19">DT_STR<pos:position pos:line="70" pos:column="25"/></name> <operator pos:line="70" pos:column="26">||<pos:position pos:line="70" pos:column="28"/></operator> <name pos:line="70" pos:column="29">type<pos:position pos:line="70" pos:column="33"/></name> <operator pos:line="70" pos:column="34">==<pos:position pos:line="70" pos:column="36"/></operator> <name pos:line="70" pos:column="37">DT_RX<pos:position pos:line="70" pos:column="42"/></name> <operator pos:line="70" pos:column="43">||<pos:position pos:line="70" pos:column="45"/></operator> <name pos:line="70" pos:column="46">type<pos:position pos:line="70" pos:column="50"/></name> <operator pos:line="70" pos:column="51">==<pos:position pos:line="70" pos:column="53"/></operator> <name pos:line="70" pos:column="54">DT_ADDR<pos:position pos:line="70" pos:column="61"/></name> <operator pos:line="70" pos:column="62">||<pos:position pos:line="70" pos:column="64"/></operator> <name pos:line="70" pos:column="65">type<pos:position pos:line="70" pos:column="69"/></name> <operator pos:line="70" pos:column="70">==<pos:position pos:line="70" pos:column="72"/></operator> <name pos:line="70" pos:column="73">DT_PATH<pos:position pos:line="70" pos:column="80"/></name> <operator pos:line="70" pos:column="81">||<pos:position pos:line="70" pos:column="83"/></operator>
          <name pos:line="71" pos:column="11">type<pos:position pos:line="71" pos:column="15"/></name> <operator pos:line="71" pos:column="16">==<pos:position pos:line="71" pos:column="18"/></operator> <name pos:line="71" pos:column="19">DT_MBCHARTBL<pos:position pos:line="71" pos:column="31"/></name></expr>)<pos:position pos:line="71" pos:column="32"/></condition><then pos:line="71" pos:column="32">
      <block pos:line="72" pos:column="7">{
	<if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><name pos:line="73" pos:column="13">val<pos:position pos:line="73" pos:column="16"/></name> <operator pos:line="73" pos:column="17">&amp;&amp;<pos:position pos:line="73" pos:column="27"/></operator> <operator pos:line="73" pos:column="20">*<pos:position pos:line="73" pos:column="21"/></operator><name pos:line="73" pos:column="21">val<pos:position pos:line="73" pos:column="24"/></name></expr>)<pos:position pos:line="73" pos:column="25"/></condition><then pos:line="73" pos:column="25">
	<block pos:line="74" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="75" pos:column="11">fputs<pos:position pos:line="75" pos:column="16"/></name> <argument_list pos:line="75" pos:column="17">(<argument><expr><literal type="string" pos:line="75" pos:column="18">"\nDefault: &lt;quote&gt;&lt;literal&gt;"<pos:position pos:line="75" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="49">out<pos:position pos:line="75" pos:column="52"/></name></expr></argument>)<pos:position pos:line="75" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="54"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="76" pos:column="11">sgml_print_strval<pos:position pos:line="76" pos:column="28"/></name> <argument_list pos:line="76" pos:column="29">(<argument><expr><name pos:line="76" pos:column="30">val<pos:position pos:line="76" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="35">out<pos:position pos:line="76" pos:column="38"/></name></expr></argument>)<pos:position pos:line="76" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="40"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="77" pos:column="11">fputs<pos:position pos:line="77" pos:column="16"/></name> <argument_list pos:line="77" pos:column="17">(<argument><expr><literal type="string" pos:line="77" pos:column="18">"&lt;/literal&gt;&lt;/quote&gt;"<pos:position pos:line="77" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="40">out<pos:position pos:line="77" pos:column="43"/></name></expr></argument>)<pos:position pos:line="77" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="78" pos:column="10"/></block></then>
	<else pos:line="79" pos:column="9">else
	<block pos:line="80" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="81" pos:column="11">fputs<pos:position pos:line="81" pos:column="16"/></name> <argument_list pos:line="81" pos:column="17">(<argument><expr><literal type="string" pos:line="81" pos:column="18">"\nDefault: (empty)"<pos:position pos:line="81" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="40">out<pos:position pos:line="81" pos:column="43"/></name></expr></argument>)<pos:position pos:line="81" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="82" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="83" pos:column="9">fputs<pos:position pos:line="83" pos:column="14"/></name> <argument_list pos:line="83" pos:column="15">(<argument><expr><literal type="string" pos:line="83" pos:column="16">"&lt;/literallayout&gt;\n"<pos:position pos:line="83" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="83" pos:column="38">out<pos:position pos:line="83" pos:column="41"/></name></expr></argument>)<pos:position pos:line="83" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="43"/></expr_stmt>
      }<pos:position pos:line="84" pos:column="8"/></block></then>
      <else pos:line="85" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="86" pos:column="9">fprintf<pos:position pos:line="86" pos:column="16"/></name> <argument_list pos:line="86" pos:column="17">(<argument><expr><name pos:line="86" pos:column="18">out<pos:position pos:line="86" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="23">"\nDefault: %s&lt;/literallayout&gt;\n"<pos:position pos:line="86" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="58">val<pos:position pos:line="86" pos:column="61"/></name></expr></argument>)<pos:position pos:line="86" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="63"/></expr_stmt></block></else></if>
      <break pos:line="87" pos:column="7">break;<pos:position pos:line="87" pos:column="13"/></break>
    }<pos:position pos:line="88" pos:column="6"/></block>
    <comment type="block" pos:line="89" pos:column="5">/* make gcc happy */</comment>
    <default pos:line="90" pos:column="5">default:<pos:position pos:line="90" pos:column="13"/></default>
      <break pos:line="91" pos:column="7">break;<pos:position pos:line="91" pos:column="13"/></break>
  }<pos:position pos:line="92" pos:column="4"/></block></switch>
}<pos:position pos:line="93" pos:column="2"/></block></function></unit>
