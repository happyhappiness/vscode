<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1981_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">man_print_strval<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">v<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">FILE<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">out<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <for pos:line="3" pos:column="3">for <control pos:line="3" pos:column="7">(<init pos:line="3" pos:column="8">;<pos:position pos:line="3" pos:column="9"/></init> <condition><expr><operator pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></operator><name pos:line="3" pos:column="11">v<pos:position pos:line="3" pos:column="12"/></name></expr>;<pos:position pos:line="3" pos:column="13"/></condition> <incr><expr><name pos:line="3" pos:column="14">v<pos:position pos:line="3" pos:column="15"/></name><operator pos:line="3" pos:column="15">++<pos:position pos:line="3" pos:column="17"/></operator></expr></incr>)<pos:position pos:line="3" pos:column="18"/></control>
  <block pos:line="4" pos:column="3">{
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">v<pos:position pos:line="5" pos:column="11"/></name> <operator pos:line="5" pos:column="12">&lt;<pos:position pos:line="5" pos:column="16"/></operator> <literal type="char" pos:line="5" pos:column="14">' '<pos:position pos:line="5" pos:column="17"/></literal> <operator pos:line="5" pos:column="18">||<pos:position pos:line="5" pos:column="20"/></operator> <operator pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></operator><name pos:line="5" pos:column="22">v<pos:position pos:line="5" pos:column="23"/></name> <operator pos:line="5" pos:column="24">&amp;<pos:position pos:line="5" pos:column="29"/></operator> <literal type="number" pos:line="5" pos:column="26">0x80<pos:position pos:line="5" pos:column="30"/></literal></expr>)<pos:position pos:line="5" pos:column="31"/></condition><then pos:line="5" pos:column="31">
    <block pos:line="6" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="7" pos:column="7">fputc<pos:position pos:line="7" pos:column="12"/></name> <argument_list pos:line="7" pos:column="13">(<argument><expr><literal type="char" pos:line="7" pos:column="14">'\\'<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="20">out<pos:position pos:line="7" pos:column="23"/></name></expr></argument>)<pos:position pos:line="7" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="8" pos:column="7">conf_char_to_escape<pos:position pos:line="8" pos:column="26"/></name> <argument_list pos:line="8" pos:column="27">(<argument><expr><operator pos:line="8" pos:column="28">(<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="29">unsigned<pos:position pos:line="8" pos:column="37"/></name> <name pos:line="8" pos:column="38">int<pos:position pos:line="8" pos:column="41"/></name><operator pos:line="8" pos:column="41">)<pos:position pos:line="8" pos:column="42"/></operator> <operator pos:line="8" pos:column="43">*<pos:position pos:line="8" pos:column="44"/></operator><name pos:line="8" pos:column="44">v<pos:position pos:line="8" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="47">out<pos:position pos:line="8" pos:column="50"/></name></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="52"/></expr_stmt>
      <continue pos:line="9" pos:column="7">continue;<pos:position pos:line="9" pos:column="16"/></continue>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>
    
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">v<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">==<pos:position pos:line="12" pos:column="14"/></operator> <literal type="char" pos:line="12" pos:column="15">'"'<pos:position pos:line="12" pos:column="18"/></literal></expr>)<pos:position pos:line="12" pos:column="19"/></condition><then pos:line="12" pos:column="19">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="7">fputs<pos:position pos:line="13" pos:column="12"/></name> <argument_list pos:line="13" pos:column="13">(<argument><expr><literal type="string" pos:line="13" pos:column="14">"\\(rq"<pos:position pos:line="13" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="23">out<pos:position pos:line="13" pos:column="26"/></name></expr></argument>)<pos:position pos:line="13" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="28"/></expr_stmt></block></then>
    <elseif pos:line="14" pos:column="5">else <if pos:line="14" pos:column="10">if <condition pos:line="14" pos:column="13">(<expr><operator pos:line="14" pos:column="14">*<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="15">v<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">==<pos:position pos:line="14" pos:column="19"/></operator> <literal type="char" pos:line="14" pos:column="20">'\\'<pos:position pos:line="14" pos:column="24"/></literal></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="7">fputs<pos:position pos:line="15" pos:column="12"/></name> <argument_list pos:line="15" pos:column="13">(<argument><expr><literal type="string" pos:line="15" pos:column="14">"\\\\"<pos:position pos:line="15" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="22">out<pos:position pos:line="15" pos:column="25"/></name></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="16" pos:column="5">else <if pos:line="16" pos:column="10">if <condition pos:line="16" pos:column="13">(<expr><operator pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">v<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">==<pos:position pos:line="16" pos:column="19"/></operator> <literal type="char" pos:line="16" pos:column="20">'-'<pos:position pos:line="16" pos:column="23"/></literal></expr>)<pos:position pos:line="16" pos:column="24"/></condition><then pos:line="16" pos:column="24">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="7">fputs<pos:position pos:line="17" pos:column="12"/></name> <argument_list pos:line="17" pos:column="13">(<argument><expr><literal type="string" pos:line="17" pos:column="14">"\\-"<pos:position pos:line="17" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="21">out<pos:position pos:line="17" pos:column="24"/></name></expr></argument>)<pos:position pos:line="17" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt></block></then></if></elseif>
    <else pos:line="18" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="7">fputc<pos:position pos:line="19" pos:column="12"/></name> <argument_list pos:line="19" pos:column="13">(<argument><expr><operator pos:line="19" pos:column="14">*<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">v<pos:position pos:line="19" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="18">out<pos:position pos:line="19" pos:column="21"/></name></expr></argument>)<pos:position pos:line="19" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt></block></else></if>
  }<pos:position pos:line="20" pos:column="4"/></block></for>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
