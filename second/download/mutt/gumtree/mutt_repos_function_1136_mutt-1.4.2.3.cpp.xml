<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1136_mutt-1.4.2.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_var_value_complete<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">buffer<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">size_t<pos:position pos:line="1" pos:column="50"/></name></type> <name pos:line="1" pos:column="51">len<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">pos<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">var<pos:position pos:line="3" pos:column="11"/></name><index pos:line="3" pos:column="11">[<expr><name pos:line="3" pos:column="12">STRING<pos:position pos:line="3" pos:column="18"/></name></expr>]<pos:position pos:line="3" pos:column="19"/></index></name></decl>, <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="22">pt<pos:position pos:line="3" pos:column="24"/></name> <init pos:line="3" pos:column="25">= <expr><name pos:line="3" pos:column="27">buffer<pos:position pos:line="3" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">spaces<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name><name pos:line="6" pos:column="7">buffer<pos:position pos:line="6" pos:column="13"/></name><index pos:line="6" pos:column="13">[<expr><literal type="number" pos:line="6" pos:column="14">0<pos:position pos:line="6" pos:column="15"/></literal></expr>]<pos:position pos:line="6" pos:column="16"/></index></name> <operator pos:line="6" pos:column="17">==<pos:position pos:line="6" pos:column="19"/></operator> <literal type="number" pos:line="6" pos:column="20">0<pos:position pos:line="6" pos:column="21"/></literal></expr>)<pos:position pos:line="6" pos:column="22"/></condition><then pos:line="6" pos:column="22">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><literal type="number" pos:line="7" pos:column="12">0<pos:position pos:line="7" pos:column="13"/></literal></expr>;<pos:position pos:line="7" pos:column="14"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">SKIPWS<pos:position pos:line="9" pos:column="9"/></name> <argument_list pos:line="9" pos:column="10">(<argument><expr><name pos:line="9" pos:column="11">buffer<pos:position pos:line="9" pos:column="17"/></name></expr></argument>)<pos:position pos:line="9" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">spaces<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <name pos:line="10" pos:column="12">buffer<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">-<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="21">pt<pos:position pos:line="10" pos:column="23"/></name></expr>;<pos:position pos:line="10" pos:column="24"/></expr_stmt>

  <expr_stmt><expr><name pos:line="12" pos:column="3">pt<pos:position pos:line="12" pos:column="5"/></name> <operator pos:line="12" pos:column="6">=<pos:position pos:line="12" pos:column="7"/></operator> <name pos:line="12" pos:column="8">buffer<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">+<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">pos<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">-<pos:position pos:line="12" pos:column="22"/></operator> <name pos:line="12" pos:column="23">spaces<pos:position pos:line="12" pos:column="29"/></name></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>
  <while pos:line="13" pos:column="3">while <condition pos:line="13" pos:column="9">(<expr><operator pos:line="13" pos:column="10">(<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">pt<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">&gt;<pos:position pos:line="13" pos:column="18"/></operator> <name pos:line="13" pos:column="16">buffer<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">)<pos:position pos:line="13" pos:column="23"/></operator> <operator pos:line="13" pos:column="24">&amp;&amp;<pos:position pos:line="13" pos:column="34"/></operator> <operator pos:line="13" pos:column="27">!<pos:position pos:line="13" pos:column="28"/></operator><call><name pos:line="13" pos:column="28">isspace<pos:position pos:line="13" pos:column="35"/></name> <argument_list pos:line="13" pos:column="36">(<argument><expr><operator pos:line="13" pos:column="37">(<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="38">unsigned<pos:position pos:line="13" pos:column="46"/></name> <name pos:line="13" pos:column="47">char<pos:position pos:line="13" pos:column="51"/></name><operator pos:line="13" pos:column="51">)<pos:position pos:line="13" pos:column="52"/></operator> <operator pos:line="13" pos:column="53">*<pos:position pos:line="13" pos:column="54"/></operator><name pos:line="13" pos:column="54">pt<pos:position pos:line="13" pos:column="56"/></name></expr></argument>)<pos:position pos:line="13" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="58"/></condition>
    <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="5">pt<pos:position pos:line="14" pos:column="7"/></name><operator pos:line="14" pos:column="7">--<pos:position pos:line="14" pos:column="9"/></operator></expr>;<pos:position pos:line="14" pos:column="10"/></expr_stmt></block></while>
  <expr_stmt><expr><name pos:line="15" pos:column="3">pt<pos:position pos:line="15" pos:column="5"/></name><operator pos:line="15" pos:column="5">++<pos:position pos:line="15" pos:column="7"/></operator></expr>;<pos:position pos:line="15" pos:column="8"/></expr_stmt> <comment type="block" pos:line="15" pos:column="9">/* move past the space */</comment>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><operator pos:line="16" pos:column="7">*<pos:position pos:line="16" pos:column="8"/></operator><name pos:line="16" pos:column="8">pt<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">==<pos:position pos:line="16" pos:column="13"/></operator> <literal type="char" pos:line="16" pos:column="14">'='<pos:position pos:line="16" pos:column="17"/></literal></expr>)<pos:position pos:line="16" pos:column="18"/></condition><then pos:line="16" pos:column="18"> <comment type="block" pos:line="16" pos:column="19">/* abort if no var before the '=' */</comment>
    <block type="pseudo"><return pos:line="17" pos:column="5">return <expr><literal type="number" pos:line="17" pos:column="12">0<pos:position pos:line="17" pos:column="13"/></literal></expr>;<pos:position pos:line="17" pos:column="14"/></return></block></then></if>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><call><name pos:line="19" pos:column="7">mutt_strncmp<pos:position pos:line="19" pos:column="19"/></name> <argument_list pos:line="19" pos:column="20">(<argument><expr><name pos:line="19" pos:column="21">buffer<pos:position pos:line="19" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="29">"set"<pos:position pos:line="19" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="36">3<pos:position pos:line="19" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call> <operator pos:line="19" pos:column="39">==<pos:position pos:line="19" pos:column="41"/></operator> <literal type="number" pos:line="19" pos:column="42">0<pos:position pos:line="19" pos:column="43"/></literal></expr>)<pos:position pos:line="19" pos:column="44"/></condition><then pos:line="19" pos:column="44">
  <block pos:line="20" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">int<pos:position pos:line="21" pos:column="8"/></name></type> <name pos:line="21" pos:column="9">idx<pos:position pos:line="21" pos:column="12"/></name></decl>;<pos:position pos:line="21" pos:column="13"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">strfcpy<pos:position pos:line="22" pos:column="12"/></name> <argument_list pos:line="22" pos:column="13">(<argument><expr><name pos:line="22" pos:column="14">var<pos:position pos:line="22" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="19">pt<pos:position pos:line="22" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="23">sizeof <argument_list pos:line="22" pos:column="30">(<argument><expr><name pos:line="22" pos:column="31">var<pos:position pos:line="22" pos:column="34"/></name></expr></argument>)<pos:position pos:line="22" pos:column="35"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>
    <comment type="block" pos:line="23" pos:column="5">/* ignore the trailing '=' when comparing */</comment>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">var<pos:position pos:line="24" pos:column="8"/></name><index pos:line="24" pos:column="8">[<expr><call><name pos:line="24" pos:column="9">mutt_strlen<pos:position pos:line="24" pos:column="20"/></name> <argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">var<pos:position pos:line="24" pos:column="25"/></name></expr></argument>)<pos:position pos:line="24" pos:column="26"/></argument_list></call> <operator pos:line="24" pos:column="27">-<pos:position pos:line="24" pos:column="28"/></operator> <literal type="number" pos:line="24" pos:column="29">1<pos:position pos:line="24" pos:column="30"/></literal></expr>]<pos:position pos:line="24" pos:column="31"/></index></name> <operator pos:line="24" pos:column="32">=<pos:position pos:line="24" pos:column="33"/></operator> <literal type="number" pos:line="24" pos:column="34">0<pos:position pos:line="24" pos:column="35"/></literal></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">(<pos:position pos:line="25" pos:column="10"/></operator><name pos:line="25" pos:column="10">idx<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <call><name pos:line="25" pos:column="16">mutt_option_index<pos:position pos:line="25" pos:column="33"/></name> <argument_list pos:line="25" pos:column="34">(<argument><expr><name pos:line="25" pos:column="35">var<pos:position pos:line="25" pos:column="38"/></name></expr></argument>)<pos:position pos:line="25" pos:column="39"/></argument_list></call><operator pos:line="25" pos:column="39">)<pos:position pos:line="25" pos:column="40"/></operator> <operator pos:line="25" pos:column="41">==<pos:position pos:line="25" pos:column="43"/></operator> <operator pos:line="25" pos:column="44">-<pos:position pos:line="25" pos:column="45"/></operator><literal type="number" pos:line="25" pos:column="45">1<pos:position pos:line="25" pos:column="46"/></literal></expr>)<pos:position pos:line="25" pos:column="47"/></condition><then pos:line="25" pos:column="47"> 
      <block type="pseudo"><return pos:line="26" pos:column="7">return <expr><literal type="number" pos:line="26" pos:column="14">0<pos:position pos:line="26" pos:column="15"/></literal></expr>;<pos:position pos:line="26" pos:column="16"/></return></block></then> <comment type="block" pos:line="26" pos:column="17">/* no such variable. */</comment>
    <else pos:line="27" pos:column="5">else
    <block pos:line="28" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="29" pos:column="7">char<pos:position pos:line="29" pos:column="11"/></name></type> <name><name pos:line="29" pos:column="12">tmp<pos:position pos:line="29" pos:column="15"/></name> <index pos:line="29" pos:column="16">[<expr><name pos:line="29" pos:column="17">LONG_STRING<pos:position pos:line="29" pos:column="28"/></name></expr>]<pos:position pos:line="29" pos:column="29"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="29" pos:column="31">tmp2<pos:position pos:line="29" pos:column="35"/></name><index pos:line="29" pos:column="35">[<expr><name pos:line="29" pos:column="36">LONG_STRING<pos:position pos:line="29" pos:column="47"/></name></expr>]<pos:position pos:line="29" pos:column="48"/></index></name></decl>;<pos:position pos:line="29" pos:column="49"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="30" pos:column="7">char<pos:position pos:line="30" pos:column="11"/></name> <modifier pos:line="30" pos:column="12">*<pos:position pos:line="30" pos:column="13"/></modifier></type><name pos:line="30" pos:column="13">s<pos:position pos:line="30" pos:column="14"/></name></decl>, <modifier pos:line="30" pos:column="16">*<pos:position pos:line="30" pos:column="17"/></modifier><decl><type ref="prev"/><name pos:line="30" pos:column="17">d<pos:position pos:line="30" pos:column="18"/></name></decl>;<pos:position pos:line="30" pos:column="19"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="31" pos:column="7">size_t<pos:position pos:line="31" pos:column="13"/></name></type> <name pos:line="31" pos:column="14">dlen<pos:position pos:line="31" pos:column="18"/></name> <init pos:line="31" pos:column="19">= <expr><name pos:line="31" pos:column="21">buffer<pos:position pos:line="31" pos:column="27"/></name> <operator pos:line="31" pos:column="28">+<pos:position pos:line="31" pos:column="29"/></operator> <name pos:line="31" pos:column="30">len<pos:position pos:line="31" pos:column="33"/></name> <operator pos:line="31" pos:column="34">-<pos:position pos:line="31" pos:column="35"/></operator> <name pos:line="31" pos:column="36">pt<pos:position pos:line="31" pos:column="38"/></name> <operator pos:line="31" pos:column="39">-<pos:position pos:line="31" pos:column="40"/></operator> <name pos:line="31" pos:column="41">spaces<pos:position pos:line="31" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="31" pos:column="48"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="32" pos:column="7">char<pos:position pos:line="32" pos:column="11"/></name> <modifier pos:line="32" pos:column="12">*<pos:position pos:line="32" pos:column="13"/></modifier></type><name><name pos:line="32" pos:column="13">vals<pos:position pos:line="32" pos:column="17"/></name><index pos:line="32" pos:column="17">[]<pos:position pos:line="32" pos:column="19"/></index></name> <init pos:line="32" pos:column="20">= <expr><block pos:line="32" pos:column="22">{ <expr><literal type="string" pos:line="32" pos:column="24">"no"<pos:position pos:line="32" pos:column="28"/></literal></expr>, <expr><literal type="string" pos:line="32" pos:column="30">"yes"<pos:position pos:line="32" pos:column="35"/></literal></expr>, <expr><literal type="string" pos:line="32" pos:column="37">"ask-no"<pos:position pos:line="32" pos:column="45"/></literal></expr>, <expr><literal type="string" pos:line="32" pos:column="47">"ask-yes"<pos:position pos:line="32" pos:column="56"/></literal></expr> }<pos:position pos:line="32" pos:column="58"/></block></expr></init></decl>;<pos:position pos:line="32" pos:column="59"/></decl_stmt>

      <expr_stmt><expr><name><name pos:line="34" pos:column="7">tmp<pos:position pos:line="34" pos:column="10"/></name><index pos:line="34" pos:column="10">[<expr><literal type="number" pos:line="34" pos:column="11">0<pos:position pos:line="34" pos:column="12"/></literal></expr>]<pos:position pos:line="34" pos:column="13"/></index></name> <operator pos:line="34" pos:column="14">=<pos:position pos:line="34" pos:column="15"/></operator> <literal type="char" pos:line="34" pos:column="16">'\0'<pos:position pos:line="34" pos:column="20"/></literal></expr>;<pos:position pos:line="34" pos:column="21"/></expr_stmt>

      <if pos:line="36" pos:column="7">if <condition pos:line="36" pos:column="10">(<expr><operator pos:line="36" pos:column="11">(<pos:position pos:line="36" pos:column="12"/></operator><call><name pos:line="36" pos:column="12">DTYPE<pos:position pos:line="36" pos:column="17"/></name><argument_list pos:line="36" pos:column="17">(<argument><expr><name><name pos:line="36" pos:column="18">MuttVars<pos:position pos:line="36" pos:column="26"/></name><index pos:line="36" pos:column="26">[<expr><name pos:line="36" pos:column="27">idx<pos:position pos:line="36" pos:column="30"/></name></expr>]<pos:position pos:line="36" pos:column="31"/></index></name><operator pos:line="36" pos:column="31">.<pos:position pos:line="36" pos:column="32"/></operator><name pos:line="36" pos:column="32">type<pos:position pos:line="36" pos:column="36"/></name></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call> <operator pos:line="36" pos:column="38">==<pos:position pos:line="36" pos:column="40"/></operator> <name pos:line="36" pos:column="41">DT_STR<pos:position pos:line="36" pos:column="47"/></name><operator pos:line="36" pos:column="47">)<pos:position pos:line="36" pos:column="48"/></operator> <operator pos:line="36" pos:column="49">||<pos:position pos:line="36" pos:column="51"/></operator> 
	  <operator pos:line="37" pos:column="11">(<pos:position pos:line="37" pos:column="12"/></operator><call><name pos:line="37" pos:column="12">DTYPE<pos:position pos:line="37" pos:column="17"/></name><argument_list pos:line="37" pos:column="17">(<argument><expr><name><name pos:line="37" pos:column="18">MuttVars<pos:position pos:line="37" pos:column="26"/></name><index pos:line="37" pos:column="26">[<expr><name pos:line="37" pos:column="27">idx<pos:position pos:line="37" pos:column="30"/></name></expr>]<pos:position pos:line="37" pos:column="31"/></index></name><operator pos:line="37" pos:column="31">.<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="32">type<pos:position pos:line="37" pos:column="36"/></name></expr></argument>)<pos:position pos:line="37" pos:column="37"/></argument_list></call> <operator pos:line="37" pos:column="38">==<pos:position pos:line="37" pos:column="40"/></operator> <name pos:line="37" pos:column="41">DT_PATH<pos:position pos:line="37" pos:column="48"/></name><operator pos:line="37" pos:column="48">)<pos:position pos:line="37" pos:column="49"/></operator> <operator pos:line="37" pos:column="50">||<pos:position pos:line="37" pos:column="52"/></operator>
	  <operator pos:line="38" pos:column="11">(<pos:position pos:line="38" pos:column="12"/></operator><call><name pos:line="38" pos:column="12">DTYPE<pos:position pos:line="38" pos:column="17"/></name><argument_list pos:line="38" pos:column="17">(<argument><expr><name><name pos:line="38" pos:column="18">MuttVars<pos:position pos:line="38" pos:column="26"/></name><index pos:line="38" pos:column="26">[<expr><name pos:line="38" pos:column="27">idx<pos:position pos:line="38" pos:column="30"/></name></expr>]<pos:position pos:line="38" pos:column="31"/></index></name><operator pos:line="38" pos:column="31">.<pos:position pos:line="38" pos:column="32"/></operator><name pos:line="38" pos:column="32">type<pos:position pos:line="38" pos:column="36"/></name></expr></argument>)<pos:position pos:line="38" pos:column="37"/></argument_list></call> <operator pos:line="38" pos:column="38">==<pos:position pos:line="38" pos:column="40"/></operator> <name pos:line="38" pos:column="41">DT_RX<pos:position pos:line="38" pos:column="46"/></name><operator pos:line="38" pos:column="46">)<pos:position pos:line="38" pos:column="47"/></operator></expr>)<pos:position pos:line="38" pos:column="48"/></condition><then pos:line="38" pos:column="48">
      <block pos:line="39" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="40" pos:column="9">strfcpy<pos:position pos:line="40" pos:column="16"/></name> <argument_list pos:line="40" pos:column="17">(<argument><expr><name pos:line="40" pos:column="18">tmp<pos:position pos:line="40" pos:column="21"/></name></expr></argument>, <argument><expr><call><name pos:line="40" pos:column="23">NONULL<pos:position pos:line="40" pos:column="29"/></name> <argument_list pos:line="40" pos:column="30">(<argument><expr><operator pos:line="40" pos:column="31">*<pos:position pos:line="40" pos:column="32"/></operator><operator pos:line="40" pos:column="32">(<pos:position pos:line="40" pos:column="33"/></operator><operator pos:line="40" pos:column="33">(<pos:position pos:line="40" pos:column="34"/></operator><name pos:line="40" pos:column="34">char<pos:position pos:line="40" pos:column="38"/></name> <operator pos:line="40" pos:column="39">*<pos:position pos:line="40" pos:column="40"/></operator><operator pos:line="40" pos:column="40">*<pos:position pos:line="40" pos:column="41"/></operator><operator pos:line="40" pos:column="41">)<pos:position pos:line="40" pos:column="42"/></operator> <name><name pos:line="40" pos:column="43">MuttVars<pos:position pos:line="40" pos:column="51"/></name><index pos:line="40" pos:column="51">[<expr><name pos:line="40" pos:column="52">idx<pos:position pos:line="40" pos:column="55"/></name></expr>]<pos:position pos:line="40" pos:column="56"/></index></name><operator pos:line="40" pos:column="56">.<pos:position pos:line="40" pos:column="57"/></operator><name pos:line="40" pos:column="57">data<pos:position pos:line="40" pos:column="61"/></name><operator pos:line="40" pos:column="61">)<pos:position pos:line="40" pos:column="62"/></operator></expr></argument>)<pos:position pos:line="40" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="65">sizeof <argument_list pos:line="40" pos:column="72">(<argument><expr><name pos:line="40" pos:column="73">tmp<pos:position pos:line="40" pos:column="76"/></name></expr></argument>)<pos:position pos:line="40" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="79"/></expr_stmt>
	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><call><name pos:line="41" pos:column="13">DTYPE<pos:position pos:line="41" pos:column="18"/></name> <argument_list pos:line="41" pos:column="19">(<argument><expr><name><name pos:line="41" pos:column="20">MuttVars<pos:position pos:line="41" pos:column="28"/></name><index pos:line="41" pos:column="28">[<expr><name pos:line="41" pos:column="29">idx<pos:position pos:line="41" pos:column="32"/></name></expr>]<pos:position pos:line="41" pos:column="33"/></index></name><operator pos:line="41" pos:column="33">.<pos:position pos:line="41" pos:column="34"/></operator><name pos:line="41" pos:column="34">type<pos:position pos:line="41" pos:column="38"/></name></expr></argument>)<pos:position pos:line="41" pos:column="39"/></argument_list></call> <operator pos:line="41" pos:column="40">==<pos:position pos:line="41" pos:column="42"/></operator> <name pos:line="41" pos:column="43">DT_PATH<pos:position pos:line="41" pos:column="50"/></name></expr>)<pos:position pos:line="41" pos:column="51"/></condition><then pos:line="41" pos:column="51">
	  <block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="11">mutt_pretty_mailbox<pos:position pos:line="42" pos:column="30"/></name> <argument_list pos:line="42" pos:column="31">(<argument><expr><name pos:line="42" pos:column="32">tmp<pos:position pos:line="42" pos:column="35"/></name></expr></argument>)<pos:position pos:line="42" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="37"/></expr_stmt></block></then></if>
      }<pos:position pos:line="43" pos:column="8"/></block></then>
      <elseif pos:line="44" pos:column="7">else <if pos:line="44" pos:column="12">if <condition pos:line="44" pos:column="15">(<expr><call><name pos:line="44" pos:column="16">DTYPE<pos:position pos:line="44" pos:column="21"/></name> <argument_list pos:line="44" pos:column="22">(<argument><expr><name><name pos:line="44" pos:column="23">MuttVars<pos:position pos:line="44" pos:column="31"/></name><index pos:line="44" pos:column="31">[<expr><name pos:line="44" pos:column="32">idx<pos:position pos:line="44" pos:column="35"/></name></expr>]<pos:position pos:line="44" pos:column="36"/></index></name><operator pos:line="44" pos:column="36">.<pos:position pos:line="44" pos:column="37"/></operator><name pos:line="44" pos:column="37">type<pos:position pos:line="44" pos:column="41"/></name></expr></argument>)<pos:position pos:line="44" pos:column="42"/></argument_list></call> <operator pos:line="44" pos:column="43">==<pos:position pos:line="44" pos:column="45"/></operator> <name pos:line="44" pos:column="46">DT_ADDR<pos:position pos:line="44" pos:column="53"/></name></expr>)<pos:position pos:line="44" pos:column="54"/></condition><then pos:line="44" pos:column="54">
      <block pos:line="45" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">rfc822_write_address<pos:position pos:line="46" pos:column="29"/></name> <argument_list pos:line="46" pos:column="30">(<argument><expr><name pos:line="46" pos:column="31">tmp<pos:position pos:line="46" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="36">sizeof <argument_list pos:line="46" pos:column="43">(<argument><expr><name pos:line="46" pos:column="44">tmp<pos:position pos:line="46" pos:column="47"/></name></expr></argument>)<pos:position pos:line="46" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="46" pos:column="50">*<pos:position pos:line="46" pos:column="51"/></operator><operator pos:line="46" pos:column="51">(<pos:position pos:line="46" pos:column="52"/></operator><operator pos:line="46" pos:column="52">(<pos:position pos:line="46" pos:column="53"/></operator><name pos:line="46" pos:column="53">ADDRESS<pos:position pos:line="46" pos:column="60"/></name> <operator pos:line="46" pos:column="61">*<pos:position pos:line="46" pos:column="62"/></operator><operator pos:line="46" pos:column="62">*<pos:position pos:line="46" pos:column="63"/></operator><operator pos:line="46" pos:column="63">)<pos:position pos:line="46" pos:column="64"/></operator> <name><name pos:line="46" pos:column="65">MuttVars<pos:position pos:line="46" pos:column="73"/></name><index pos:line="46" pos:column="73">[<expr><name pos:line="46" pos:column="74">idx<pos:position pos:line="46" pos:column="77"/></name></expr>]<pos:position pos:line="46" pos:column="78"/></index></name><operator pos:line="46" pos:column="78">.<pos:position pos:line="46" pos:column="79"/></operator><name pos:line="46" pos:column="79">data<pos:position pos:line="46" pos:column="83"/></name><operator pos:line="46" pos:column="83">)<pos:position pos:line="46" pos:column="84"/></operator></expr></argument>)<pos:position pos:line="46" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="86"/></expr_stmt>
      }<pos:position pos:line="47" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="48" pos:column="7">else <if pos:line="48" pos:column="12">if <condition pos:line="48" pos:column="15">(<expr><call><name pos:line="48" pos:column="16">DTYPE<pos:position pos:line="48" pos:column="21"/></name> <argument_list pos:line="48" pos:column="22">(<argument><expr><name><name pos:line="48" pos:column="23">MuttVars<pos:position pos:line="48" pos:column="31"/></name><index pos:line="48" pos:column="31">[<expr><name pos:line="48" pos:column="32">idx<pos:position pos:line="48" pos:column="35"/></name></expr>]<pos:position pos:line="48" pos:column="36"/></index></name><operator pos:line="48" pos:column="36">.<pos:position pos:line="48" pos:column="37"/></operator><name pos:line="48" pos:column="37">type<pos:position pos:line="48" pos:column="41"/></name></expr></argument>)<pos:position pos:line="48" pos:column="42"/></argument_list></call> <operator pos:line="48" pos:column="43">==<pos:position pos:line="48" pos:column="45"/></operator> <name pos:line="48" pos:column="46">DT_QUAD<pos:position pos:line="48" pos:column="53"/></name></expr>)<pos:position pos:line="48" pos:column="54"/></condition><then pos:line="48" pos:column="54">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="9">strfcpy<pos:position pos:line="49" pos:column="16"/></name> <argument_list pos:line="49" pos:column="17">(<argument><expr><name pos:line="49" pos:column="18">tmp<pos:position pos:line="49" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="23">vals<pos:position pos:line="49" pos:column="27"/></name><index pos:line="49" pos:column="27">[<expr><call><name pos:line="49" pos:column="28">quadoption<pos:position pos:line="49" pos:column="38"/></name> <argument_list pos:line="49" pos:column="39">(<argument><expr><name><name pos:line="49" pos:column="40">MuttVars<pos:position pos:line="49" pos:column="48"/></name><index pos:line="49" pos:column="48">[<expr><name pos:line="49" pos:column="49">idx<pos:position pos:line="49" pos:column="52"/></name></expr>]<pos:position pos:line="49" pos:column="53"/></index></name><operator pos:line="49" pos:column="53">.<pos:position pos:line="49" pos:column="54"/></operator><name pos:line="49" pos:column="54">data<pos:position pos:line="49" pos:column="58"/></name></expr></argument>)<pos:position pos:line="49" pos:column="59"/></argument_list></call></expr>]<pos:position pos:line="49" pos:column="60"/></index></name></expr></argument>, <argument><expr><sizeof pos:line="49" pos:column="62">sizeof <argument_list pos:line="49" pos:column="69">(<argument><expr><name pos:line="49" pos:column="70">tmp<pos:position pos:line="49" pos:column="73"/></name></expr></argument>)<pos:position pos:line="49" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="49" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="76"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="50" pos:column="7">else <if pos:line="50" pos:column="12">if <condition pos:line="50" pos:column="15">(<expr><call><name pos:line="50" pos:column="16">DTYPE<pos:position pos:line="50" pos:column="21"/></name> <argument_list pos:line="50" pos:column="22">(<argument><expr><name><name pos:line="50" pos:column="23">MuttVars<pos:position pos:line="50" pos:column="31"/></name><index pos:line="50" pos:column="31">[<expr><name pos:line="50" pos:column="32">idx<pos:position pos:line="50" pos:column="35"/></name></expr>]<pos:position pos:line="50" pos:column="36"/></index></name><operator pos:line="50" pos:column="36">.<pos:position pos:line="50" pos:column="37"/></operator><name pos:line="50" pos:column="37">type<pos:position pos:line="50" pos:column="41"/></name></expr></argument>)<pos:position pos:line="50" pos:column="42"/></argument_list></call> <operator pos:line="50" pos:column="43">==<pos:position pos:line="50" pos:column="45"/></operator> <name pos:line="50" pos:column="46">DT_NUM<pos:position pos:line="50" pos:column="52"/></name></expr>)<pos:position pos:line="50" pos:column="53"/></condition><then pos:line="50" pos:column="53">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="9">snprintf<pos:position pos:line="51" pos:column="17"/></name> <argument_list pos:line="51" pos:column="18">(<argument><expr><name pos:line="51" pos:column="19">tmp<pos:position pos:line="51" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="51" pos:column="24">sizeof <argument_list pos:line="51" pos:column="31">(<argument><expr><name pos:line="51" pos:column="32">tmp<pos:position pos:line="51" pos:column="35"/></name></expr></argument>)<pos:position pos:line="51" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="38">"%d"<pos:position pos:line="51" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="51" pos:column="44">(<pos:position pos:line="51" pos:column="45"/></operator><operator pos:line="51" pos:column="45">*<pos:position pos:line="51" pos:column="46"/></operator><operator pos:line="51" pos:column="46">(<pos:position pos:line="51" pos:column="47"/></operator><operator pos:line="51" pos:column="47">(<pos:position pos:line="51" pos:column="48"/></operator><name pos:line="51" pos:column="48">short<pos:position pos:line="51" pos:column="53"/></name> <operator pos:line="51" pos:column="54">*<pos:position pos:line="51" pos:column="55"/></operator><operator pos:line="51" pos:column="55">)<pos:position pos:line="51" pos:column="56"/></operator> <name><name pos:line="51" pos:column="57">MuttVars<pos:position pos:line="51" pos:column="65"/></name><index pos:line="51" pos:column="65">[<expr><name pos:line="51" pos:column="66">idx<pos:position pos:line="51" pos:column="69"/></name></expr>]<pos:position pos:line="51" pos:column="70"/></index></name><operator pos:line="51" pos:column="70">.<pos:position pos:line="51" pos:column="71"/></operator><name pos:line="51" pos:column="71">data<pos:position pos:line="51" pos:column="75"/></name><operator pos:line="51" pos:column="75">)<pos:position pos:line="51" pos:column="76"/></operator><operator pos:line="51" pos:column="76">)<pos:position pos:line="51" pos:column="77"/></operator></expr></argument>)<pos:position pos:line="51" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="79"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="52" pos:column="7">else <if pos:line="52" pos:column="12">if <condition pos:line="52" pos:column="15">(<expr><call><name pos:line="52" pos:column="16">DTYPE<pos:position pos:line="52" pos:column="21"/></name> <argument_list pos:line="52" pos:column="22">(<argument><expr><name><name pos:line="52" pos:column="23">MuttVars<pos:position pos:line="52" pos:column="31"/></name><index pos:line="52" pos:column="31">[<expr><name pos:line="52" pos:column="32">idx<pos:position pos:line="52" pos:column="35"/></name></expr>]<pos:position pos:line="52" pos:column="36"/></index></name><operator pos:line="52" pos:column="36">.<pos:position pos:line="52" pos:column="37"/></operator><name pos:line="52" pos:column="37">type<pos:position pos:line="52" pos:column="41"/></name></expr></argument>)<pos:position pos:line="52" pos:column="42"/></argument_list></call> <operator pos:line="52" pos:column="43">==<pos:position pos:line="52" pos:column="45"/></operator> <name pos:line="52" pos:column="46">DT_SORT<pos:position pos:line="52" pos:column="53"/></name></expr>)<pos:position pos:line="52" pos:column="54"/></condition><then pos:line="52" pos:column="54">
      <block pos:line="53" pos:column="7">{
	<decl_stmt><decl><type><specifier pos:line="54" pos:column="9">const<pos:position pos:line="54" pos:column="14"/></specifier> <name><name pos:line="54" pos:column="15">struct<pos:position pos:line="54" pos:column="21"/></name> <name pos:line="54" pos:column="22">mapping_t<pos:position pos:line="54" pos:column="31"/></name></name> <modifier pos:line="54" pos:column="32">*<pos:position pos:line="54" pos:column="33"/></modifier></type><name pos:line="54" pos:column="33">map<pos:position pos:line="54" pos:column="36"/></name></decl>;<pos:position pos:line="54" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="55" pos:column="9">char<pos:position pos:line="55" pos:column="13"/></name> <modifier pos:line="55" pos:column="14">*<pos:position pos:line="55" pos:column="15"/></modifier></type><name pos:line="55" pos:column="15">p<pos:position pos:line="55" pos:column="16"/></name></decl>;<pos:position pos:line="55" pos:column="17"/></decl_stmt>

	<switch pos:line="57" pos:column="9">switch <condition pos:line="57" pos:column="16">(<expr><name><name pos:line="57" pos:column="17">MuttVars<pos:position pos:line="57" pos:column="25"/></name><index pos:line="57" pos:column="25">[<expr><name pos:line="57" pos:column="26">idx<pos:position pos:line="57" pos:column="29"/></name></expr>]<pos:position pos:line="57" pos:column="30"/></index></name><operator pos:line="57" pos:column="30">.<pos:position pos:line="57" pos:column="31"/></operator><name pos:line="57" pos:column="31">type<pos:position pos:line="57" pos:column="35"/></name> <operator pos:line="57" pos:column="36">&amp;<pos:position pos:line="57" pos:column="41"/></operator> <name pos:line="57" pos:column="38">DT_SUBTYPE_MASK<pos:position pos:line="57" pos:column="53"/></name></expr>)<pos:position pos:line="57" pos:column="54"/></condition>
	<block pos:line="58" pos:column="9">{
	  <case pos:line="59" pos:column="11">case <expr><name pos:line="59" pos:column="16">DT_SORT_ALIAS<pos:position pos:line="59" pos:column="29"/></name></expr>:<pos:position pos:line="59" pos:column="30"/></case>
	    <expr_stmt><expr><name pos:line="60" pos:column="13">map<pos:position pos:line="60" pos:column="16"/></name> <operator pos:line="60" pos:column="17">=<pos:position pos:line="60" pos:column="18"/></operator> <name pos:line="60" pos:column="19">SortAliasMethods<pos:position pos:line="60" pos:column="35"/></name></expr>;<pos:position pos:line="60" pos:column="36"/></expr_stmt>
	    <break pos:line="61" pos:column="13">break;<pos:position pos:line="61" pos:column="19"/></break>
	  <case pos:line="62" pos:column="11">case <expr><name pos:line="62" pos:column="16">DT_SORT_BROWSER<pos:position pos:line="62" pos:column="31"/></name></expr>:<pos:position pos:line="62" pos:column="32"/></case>
	    <expr_stmt><expr><name pos:line="63" pos:column="13">map<pos:position pos:line="63" pos:column="16"/></name> <operator pos:line="63" pos:column="17">=<pos:position pos:line="63" pos:column="18"/></operator> <name pos:line="63" pos:column="19">SortBrowserMethods<pos:position pos:line="63" pos:column="37"/></name></expr>;<pos:position pos:line="63" pos:column="38"/></expr_stmt>
	    <break pos:line="64" pos:column="13">break;<pos:position pos:line="64" pos:column="19"/></break>
<cpp:ifdef pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">ifdef<pos:position pos:line="65" pos:column="7"/></cpp:directive> <name pos:line="65" pos:column="8">HAVE_PGP<pos:position pos:line="65" pos:column="16"/></name></cpp:ifdef>
	  <case pos:line="66" pos:column="11">case <expr><name pos:line="66" pos:column="16">DT_SORT_KEYS<pos:position pos:line="66" pos:column="28"/></name></expr>:<pos:position pos:line="66" pos:column="29"/></case>
	    <expr_stmt><expr><name pos:line="67" pos:column="13">map<pos:position pos:line="67" pos:column="16"/></name> <operator pos:line="67" pos:column="17">=<pos:position pos:line="67" pos:column="18"/></operator> <name pos:line="67" pos:column="19">SortKeyMethods<pos:position pos:line="67" pos:column="33"/></name></expr>;<pos:position pos:line="67" pos:column="34"/></expr_stmt>
	    <break pos:line="68" pos:column="13">break;<pos:position pos:line="68" pos:column="19"/></break>
<cpp:endif pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">endif<pos:position pos:line="69" pos:column="7"/></cpp:directive></cpp:endif>
	  <default pos:line="70" pos:column="11">default:<pos:position pos:line="70" pos:column="19"/></default>
	    <expr_stmt><expr><name pos:line="71" pos:column="13">map<pos:position pos:line="71" pos:column="16"/></name> <operator pos:line="71" pos:column="17">=<pos:position pos:line="71" pos:column="18"/></operator> <name pos:line="71" pos:column="19">SortMethods<pos:position pos:line="71" pos:column="30"/></name></expr>;<pos:position pos:line="71" pos:column="31"/></expr_stmt>
	    <break pos:line="72" pos:column="13">break;<pos:position pos:line="72" pos:column="19"/></break>
	}<pos:position pos:line="73" pos:column="10"/></block></switch>
	<expr_stmt><expr><name pos:line="74" pos:column="9">p<pos:position pos:line="74" pos:column="10"/></name> <operator pos:line="74" pos:column="11">=<pos:position pos:line="74" pos:column="12"/></operator> <call><name pos:line="74" pos:column="13">mutt_getnamebyvalue<pos:position pos:line="74" pos:column="32"/></name> <argument_list pos:line="74" pos:column="33">(<argument><expr><operator pos:line="74" pos:column="34">*<pos:position pos:line="74" pos:column="35"/></operator><operator pos:line="74" pos:column="35">(<pos:position pos:line="74" pos:column="36"/></operator><operator pos:line="74" pos:column="36">(<pos:position pos:line="74" pos:column="37"/></operator><name pos:line="74" pos:column="37">short<pos:position pos:line="74" pos:column="42"/></name> <operator pos:line="74" pos:column="43">*<pos:position pos:line="74" pos:column="44"/></operator><operator pos:line="74" pos:column="44">)<pos:position pos:line="74" pos:column="45"/></operator> <name><name pos:line="74" pos:column="46">MuttVars<pos:position pos:line="74" pos:column="54"/></name><index pos:line="74" pos:column="54">[<expr><name pos:line="74" pos:column="55">idx<pos:position pos:line="74" pos:column="58"/></name></expr>]<pos:position pos:line="74" pos:column="59"/></index></name><operator pos:line="74" pos:column="59">.<pos:position pos:line="74" pos:column="60"/></operator><name pos:line="74" pos:column="60">data<pos:position pos:line="74" pos:column="64"/></name><operator pos:line="74" pos:column="64">)<pos:position pos:line="74" pos:column="65"/></operator> <operator pos:line="74" pos:column="66">&amp;<pos:position pos:line="74" pos:column="71"/></operator> <name pos:line="74" pos:column="68">SORT_MASK<pos:position pos:line="74" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="79">map<pos:position pos:line="74" pos:column="82"/></name></expr></argument>)<pos:position pos:line="74" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="84"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="75" pos:column="9">snprintf<pos:position pos:line="75" pos:column="17"/></name> <argument_list pos:line="75" pos:column="18">(<argument><expr><name pos:line="75" pos:column="19">tmp<pos:position pos:line="75" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="75" pos:column="24">sizeof <argument_list pos:line="75" pos:column="31">(<argument><expr><name pos:line="75" pos:column="32">tmp<pos:position pos:line="75" pos:column="35"/></name></expr></argument>)<pos:position pos:line="75" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="38">"%s%s%s"<pos:position pos:line="75" pos:column="46"/></literal></expr></argument>,
		  <argument><expr><ternary><condition><expr><operator pos:line="76" pos:column="19">(<pos:position pos:line="76" pos:column="20"/></operator><operator pos:line="76" pos:column="20">*<pos:position pos:line="76" pos:column="21"/></operator><operator pos:line="76" pos:column="21">(<pos:position pos:line="76" pos:column="22"/></operator><operator pos:line="76" pos:column="22">(<pos:position pos:line="76" pos:column="23"/></operator><name pos:line="76" pos:column="23">short<pos:position pos:line="76" pos:column="28"/></name> <operator pos:line="76" pos:column="29">*<pos:position pos:line="76" pos:column="30"/></operator><operator pos:line="76" pos:column="30">)<pos:position pos:line="76" pos:column="31"/></operator> <name><name pos:line="76" pos:column="32">MuttVars<pos:position pos:line="76" pos:column="40"/></name><index pos:line="76" pos:column="40">[<expr><name pos:line="76" pos:column="41">idx<pos:position pos:line="76" pos:column="44"/></name></expr>]<pos:position pos:line="76" pos:column="45"/></index></name><operator pos:line="76" pos:column="45">.<pos:position pos:line="76" pos:column="46"/></operator><name pos:line="76" pos:column="46">data<pos:position pos:line="76" pos:column="50"/></name><operator pos:line="76" pos:column="50">)<pos:position pos:line="76" pos:column="51"/></operator> <operator pos:line="76" pos:column="52">&amp;<pos:position pos:line="76" pos:column="57"/></operator> <name pos:line="76" pos:column="54">SORT_REVERSE<pos:position pos:line="76" pos:column="66"/></name><operator pos:line="76" pos:column="66">)<pos:position pos:line="76" pos:column="67"/></operator></expr> ?<pos:position pos:line="76" pos:column="69"/></condition><then pos:line="76" pos:column="69"> <expr><literal type="string" pos:line="76" pos:column="70">"reverse-"<pos:position pos:line="76" pos:column="80"/></literal></expr> <pos:position pos:line="76" pos:column="81"/></then><else pos:line="76" pos:column="81">: <expr><literal type="string" pos:line="76" pos:column="83">""<pos:position pos:line="76" pos:column="85"/></literal></expr></else></ternary></expr></argument>,
		  <argument><expr><ternary><condition><expr><operator pos:line="77" pos:column="19">(<pos:position pos:line="77" pos:column="20"/></operator><operator pos:line="77" pos:column="20">*<pos:position pos:line="77" pos:column="21"/></operator><operator pos:line="77" pos:column="21">(<pos:position pos:line="77" pos:column="22"/></operator><operator pos:line="77" pos:column="22">(<pos:position pos:line="77" pos:column="23"/></operator><name pos:line="77" pos:column="23">short<pos:position pos:line="77" pos:column="28"/></name> <operator pos:line="77" pos:column="29">*<pos:position pos:line="77" pos:column="30"/></operator><operator pos:line="77" pos:column="30">)<pos:position pos:line="77" pos:column="31"/></operator> <name><name pos:line="77" pos:column="32">MuttVars<pos:position pos:line="77" pos:column="40"/></name><index pos:line="77" pos:column="40">[<expr><name pos:line="77" pos:column="41">idx<pos:position pos:line="77" pos:column="44"/></name></expr>]<pos:position pos:line="77" pos:column="45"/></index></name><operator pos:line="77" pos:column="45">.<pos:position pos:line="77" pos:column="46"/></operator><name pos:line="77" pos:column="46">data<pos:position pos:line="77" pos:column="50"/></name><operator pos:line="77" pos:column="50">)<pos:position pos:line="77" pos:column="51"/></operator> <operator pos:line="77" pos:column="52">&amp;<pos:position pos:line="77" pos:column="57"/></operator> <name pos:line="77" pos:column="54">SORT_LAST<pos:position pos:line="77" pos:column="63"/></name><operator pos:line="77" pos:column="63">)<pos:position pos:line="77" pos:column="64"/></operator></expr> ?<pos:position pos:line="77" pos:column="66"/></condition><then pos:line="77" pos:column="66"> <expr><literal type="string" pos:line="77" pos:column="67">"last-"<pos:position pos:line="77" pos:column="74"/></literal></expr> <pos:position pos:line="77" pos:column="75"/></then><else pos:line="77" pos:column="75">: <expr><literal type="string" pos:line="77" pos:column="77">""<pos:position pos:line="77" pos:column="79"/></literal></expr></else></ternary></expr></argument>,
		  <argument><expr><name pos:line="78" pos:column="19">p<pos:position pos:line="78" pos:column="20"/></name></expr></argument>)<pos:position pos:line="78" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="22"/></expr_stmt>
      }<pos:position pos:line="79" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="80" pos:column="7">else <if pos:line="80" pos:column="12">if <condition pos:line="80" pos:column="15">(<expr><call><name pos:line="80" pos:column="16">DTYPE<pos:position pos:line="80" pos:column="21"/></name> <argument_list pos:line="80" pos:column="22">(<argument><expr><name><name pos:line="80" pos:column="23">MuttVars<pos:position pos:line="80" pos:column="31"/></name><index pos:line="80" pos:column="31">[<expr><name pos:line="80" pos:column="32">idx<pos:position pos:line="80" pos:column="35"/></name></expr>]<pos:position pos:line="80" pos:column="36"/></index></name><operator pos:line="80" pos:column="36">.<pos:position pos:line="80" pos:column="37"/></operator><name pos:line="80" pos:column="37">type<pos:position pos:line="80" pos:column="41"/></name></expr></argument>)<pos:position pos:line="80" pos:column="42"/></argument_list></call> <operator pos:line="80" pos:column="43">==<pos:position pos:line="80" pos:column="45"/></operator> <name pos:line="80" pos:column="46">DT_BOOL<pos:position pos:line="80" pos:column="53"/></name></expr>)<pos:position pos:line="80" pos:column="54"/></condition><then pos:line="80" pos:column="54">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="81" pos:column="9">strfcpy<pos:position pos:line="81" pos:column="16"/></name> <argument_list pos:line="81" pos:column="17">(<argument><expr><name pos:line="81" pos:column="18">tmp<pos:position pos:line="81" pos:column="21"/></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name pos:line="81" pos:column="23">option<pos:position pos:line="81" pos:column="29"/></name> <argument_list pos:line="81" pos:column="30">(<argument><expr><name><name pos:line="81" pos:column="31">MuttVars<pos:position pos:line="81" pos:column="39"/></name><index pos:line="81" pos:column="39">[<expr><name pos:line="81" pos:column="40">idx<pos:position pos:line="81" pos:column="43"/></name></expr>]<pos:position pos:line="81" pos:column="44"/></index></name><operator pos:line="81" pos:column="44">.<pos:position pos:line="81" pos:column="45"/></operator><name pos:line="81" pos:column="45">data<pos:position pos:line="81" pos:column="49"/></name></expr></argument>)<pos:position pos:line="81" pos:column="50"/></argument_list></call></expr> ?<pos:position pos:line="81" pos:column="52"/></condition><then pos:line="81" pos:column="52"> <expr><literal type="string" pos:line="81" pos:column="53">"yes"<pos:position pos:line="81" pos:column="58"/></literal></expr> <pos:position pos:line="81" pos:column="59"/></then><else pos:line="81" pos:column="59">: <expr><literal type="string" pos:line="81" pos:column="61">"no"<pos:position pos:line="81" pos:column="65"/></literal></expr></else></ternary></expr></argument>, <argument><expr><sizeof pos:line="81" pos:column="67">sizeof <argument_list pos:line="81" pos:column="74">(<argument><expr><name pos:line="81" pos:column="75">tmp<pos:position pos:line="81" pos:column="78"/></name></expr></argument>)<pos:position pos:line="81" pos:column="79"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="81" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="81"/></expr_stmt></block></then></if></elseif>
      <else pos:line="82" pos:column="7">else
	<block type="pseudo"><return pos:line="83" pos:column="9">return <expr><literal type="number" pos:line="83" pos:column="16">0<pos:position pos:line="83" pos:column="17"/></literal></expr>;<pos:position pos:line="83" pos:column="18"/></return></block></else></if>
      
      <for pos:line="85" pos:column="7">for <control pos:line="85" pos:column="11">(<init><expr><name pos:line="85" pos:column="12">s<pos:position pos:line="85" pos:column="13"/></name> <operator pos:line="85" pos:column="14">=<pos:position pos:line="85" pos:column="15"/></operator> <name pos:line="85" pos:column="16">tmp<pos:position pos:line="85" pos:column="19"/></name></expr><operator pos:line="85" pos:column="19">,<pos:position pos:line="85" pos:column="20"/></operator> <expr><name pos:line="85" pos:column="21">d<pos:position pos:line="85" pos:column="22"/></name> <operator pos:line="85" pos:column="23">=<pos:position pos:line="85" pos:column="24"/></operator> <name pos:line="85" pos:column="25">tmp2<pos:position pos:line="85" pos:column="29"/></name></expr>;<pos:position pos:line="85" pos:column="30"/></init> <condition><expr><operator pos:line="85" pos:column="31">*<pos:position pos:line="85" pos:column="32"/></operator><name pos:line="85" pos:column="32">s<pos:position pos:line="85" pos:column="33"/></name> <operator pos:line="85" pos:column="34">&amp;&amp;<pos:position pos:line="85" pos:column="44"/></operator> <operator pos:line="85" pos:column="37">(<pos:position pos:line="85" pos:column="38"/></operator><name pos:line="85" pos:column="38">d<pos:position pos:line="85" pos:column="39"/></name> <operator pos:line="85" pos:column="40">-<pos:position pos:line="85" pos:column="41"/></operator> <name pos:line="85" pos:column="42">tmp2<pos:position pos:line="85" pos:column="46"/></name><operator pos:line="85" pos:column="46">)<pos:position pos:line="85" pos:column="47"/></operator> <operator pos:line="85" pos:column="48">&lt;<pos:position pos:line="85" pos:column="52"/></operator> <sizeof pos:line="85" pos:column="50">sizeof <argument_list pos:line="85" pos:column="57">(<argument><expr><name pos:line="85" pos:column="58">tmp2<pos:position pos:line="85" pos:column="62"/></name></expr></argument>)<pos:position pos:line="85" pos:column="63"/></argument_list></sizeof> <operator pos:line="85" pos:column="64">-<pos:position pos:line="85" pos:column="65"/></operator> <literal type="number" pos:line="85" pos:column="66">2<pos:position pos:line="85" pos:column="67"/></literal></expr>;<pos:position pos:line="85" pos:column="68"/></condition><incr/>)<pos:position pos:line="85" pos:column="69"/></control>
      <block pos:line="86" pos:column="7">{
	<if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><operator pos:line="87" pos:column="13">*<pos:position pos:line="87" pos:column="14"/></operator><name pos:line="87" pos:column="14">s<pos:position pos:line="87" pos:column="15"/></name> <operator pos:line="87" pos:column="16">==<pos:position pos:line="87" pos:column="18"/></operator> <literal type="char" pos:line="87" pos:column="19">'\\'<pos:position pos:line="87" pos:column="23"/></literal> <operator pos:line="87" pos:column="24">||<pos:position pos:line="87" pos:column="26"/></operator> <operator pos:line="87" pos:column="27">*<pos:position pos:line="87" pos:column="28"/></operator><name pos:line="87" pos:column="28">s<pos:position pos:line="87" pos:column="29"/></name> <operator pos:line="87" pos:column="30">==<pos:position pos:line="87" pos:column="32"/></operator> <literal type="char" pos:line="87" pos:column="33">'"'<pos:position pos:line="87" pos:column="36"/></literal></expr>)<pos:position pos:line="87" pos:column="37"/></condition><then pos:line="87" pos:column="37">
	  <block type="pseudo"><expr_stmt><expr><operator pos:line="88" pos:column="11">*<pos:position pos:line="88" pos:column="12"/></operator><name pos:line="88" pos:column="12">d<pos:position pos:line="88" pos:column="13"/></name><operator pos:line="88" pos:column="13">++<pos:position pos:line="88" pos:column="15"/></operator> <operator pos:line="88" pos:column="16">=<pos:position pos:line="88" pos:column="17"/></operator> <literal type="char" pos:line="88" pos:column="18">'\\'<pos:position pos:line="88" pos:column="22"/></literal></expr>;<pos:position pos:line="88" pos:column="23"/></expr_stmt></block></then></if>
	<expr_stmt><expr><operator pos:line="89" pos:column="9">*<pos:position pos:line="89" pos:column="10"/></operator><name pos:line="89" pos:column="10">d<pos:position pos:line="89" pos:column="11"/></name><operator pos:line="89" pos:column="11">++<pos:position pos:line="89" pos:column="13"/></operator> <operator pos:line="89" pos:column="14">=<pos:position pos:line="89" pos:column="15"/></operator> <operator pos:line="89" pos:column="16">*<pos:position pos:line="89" pos:column="17"/></operator><name pos:line="89" pos:column="17">s<pos:position pos:line="89" pos:column="18"/></name><operator pos:line="89" pos:column="18">++<pos:position pos:line="89" pos:column="20"/></operator></expr>;<pos:position pos:line="89" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="90" pos:column="8"/></block></for>
      <expr_stmt><expr><operator pos:line="91" pos:column="7">*<pos:position pos:line="91" pos:column="8"/></operator><name pos:line="91" pos:column="8">d<pos:position pos:line="91" pos:column="9"/></name> <operator pos:line="91" pos:column="10">=<pos:position pos:line="91" pos:column="11"/></operator> <literal type="char" pos:line="91" pos:column="12">'\0'<pos:position pos:line="91" pos:column="16"/></literal></expr>;<pos:position pos:line="91" pos:column="17"/></expr_stmt>
      
      <expr_stmt><expr><call><name pos:line="93" pos:column="7">strfcpy<pos:position pos:line="93" pos:column="14"/></name> <argument_list pos:line="93" pos:column="15">(<argument><expr><name pos:line="93" pos:column="16">tmp<pos:position pos:line="93" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="21">pt<pos:position pos:line="93" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="93" pos:column="25">sizeof <argument_list pos:line="93" pos:column="32">(<argument><expr><name pos:line="93" pos:column="33">tmp<pos:position pos:line="93" pos:column="36"/></name></expr></argument>)<pos:position pos:line="93" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="93" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="94" pos:column="7">snprintf<pos:position pos:line="94" pos:column="15"/></name> <argument_list pos:line="94" pos:column="16">(<argument><expr><name pos:line="94" pos:column="17">pt<pos:position pos:line="94" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="21">dlen<pos:position pos:line="94" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="27">"%s\"%s\""<pos:position pos:line="94" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="39">tmp<pos:position pos:line="94" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="44">tmp2<pos:position pos:line="94" pos:column="48"/></name></expr></argument>)<pos:position pos:line="94" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="50"/></expr_stmt>
	  
      <return pos:line="96" pos:column="7">return <expr><literal type="number" pos:line="96" pos:column="14">1<pos:position pos:line="96" pos:column="15"/></literal></expr>;<pos:position pos:line="96" pos:column="16"/></return>
    }<pos:position pos:line="97" pos:column="6"/></block></else></if>
  }<pos:position pos:line="98" pos:column="4"/></block></then></if>
  <return pos:line="99" pos:column="3">return <expr><literal type="number" pos:line="99" pos:column="10">0<pos:position pos:line="99" pos:column="11"/></literal></expr>;<pos:position pos:line="99" pos:column="12"/></return>
}<pos:position pos:line="100" pos:column="2"/></block></function></unit>
