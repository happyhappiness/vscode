<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_364_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_parse_macro<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">BUFFER<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">buf<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">BUFFER<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">s<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">unsigned<pos:position pos:line="1" pos:column="55"/></name> <name pos:line="1" pos:column="56">long<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">data<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">BUFFER<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">err<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name><name pos:line="3" pos:column="7">menu<pos:position pos:line="3" pos:column="11"/></name><index pos:line="3" pos:column="11">[<expr><sizeof pos:line="3" pos:column="12">sizeof<argument_list pos:line="3" pos:column="18">(<argument><expr><name pos:line="3" pos:column="19">Menus<pos:position pos:line="3" pos:column="24"/></name></expr></argument>)<pos:position pos:line="3" pos:column="25"/></argument_list></sizeof><operator pos:line="3" pos:column="25">/<pos:position pos:line="3" pos:column="26"/></operator><sizeof pos:line="3" pos:column="26">sizeof<argument_list pos:line="3" pos:column="32">(<argument><expr pos:line="3" pos:column="33">struct <name pos:line="3" pos:column="40">mapping_t<pos:position pos:line="3" pos:column="49"/></name></expr></argument>)<pos:position pos:line="3" pos:column="50"/></argument_list></sizeof><operator pos:line="3" pos:column="50">-<pos:position pos:line="3" pos:column="51"/></operator><literal type="number" pos:line="3" pos:column="51">1<pos:position pos:line="3" pos:column="52"/></literal></expr>]<pos:position pos:line="3" pos:column="53"/></index></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="55">r<pos:position pos:line="3" pos:column="56"/></name> <init pos:line="3" pos:column="57">= <expr><operator pos:line="3" pos:column="59">-<pos:position pos:line="3" pos:column="60"/></operator><literal type="number" pos:line="3" pos:column="60">1<pos:position pos:line="3" pos:column="61"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="63">nummenus<pos:position pos:line="3" pos:column="71"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="73">i<pos:position pos:line="3" pos:column="74"/></name></decl>;<pos:position pos:line="3" pos:column="75"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">seq<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><name pos:line="4" pos:column="15">NULL<pos:position pos:line="4" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">key<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">(<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">key<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <call><name pos:line="7" pos:column="14">parse_keymap<pos:position pos:line="7" pos:column="26"/></name> <argument_list pos:line="7" pos:column="27">(<argument><expr><name pos:line="7" pos:column="28">menu<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="34">s<pos:position pos:line="7" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="37">sizeof <argument_list pos:line="7" pos:column="44">(<argument><expr><name pos:line="7" pos:column="45">menu<pos:position pos:line="7" pos:column="49"/></name></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></sizeof> <operator pos:line="7" pos:column="51">/<pos:position pos:line="7" pos:column="52"/></operator> <sizeof pos:line="7" pos:column="53">sizeof <argument_list pos:line="7" pos:column="60">(<argument><expr><name><name pos:line="7" pos:column="61">menu<pos:position pos:line="7" pos:column="65"/></name><index pos:line="7" pos:column="65">[<expr><literal type="number" pos:line="7" pos:column="66">0<pos:position pos:line="7" pos:column="67"/></literal></expr>]<pos:position pos:line="7" pos:column="68"/></index></name></expr></argument>)<pos:position pos:line="7" pos:column="69"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="7" pos:column="71">&amp;<pos:position pos:line="7" pos:column="76"/></operator><name pos:line="7" pos:column="72">nummenus<pos:position pos:line="7" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="82">err<pos:position pos:line="7" pos:column="85"/></name></expr></argument>)<pos:position pos:line="7" pos:column="86"/></argument_list></call><operator pos:line="7" pos:column="86">)<pos:position pos:line="7" pos:column="87"/></operator> <operator pos:line="7" pos:column="88">==<pos:position pos:line="7" pos:column="90"/></operator> <name pos:line="7" pos:column="91">NULL<pos:position pos:line="7" pos:column="95"/></name></expr>)<pos:position pos:line="7" pos:column="96"/></condition><then pos:line="7" pos:column="96">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><operator pos:line="8" pos:column="12">(<pos:position pos:line="8" pos:column="13"/></operator><operator pos:line="8" pos:column="13">-<pos:position pos:line="8" pos:column="14"/></operator><literal type="number" pos:line="8" pos:column="14">1<pos:position pos:line="8" pos:column="15"/></literal><operator pos:line="8" pos:column="15">)<pos:position pos:line="8" pos:column="16"/></operator></expr>;<pos:position pos:line="8" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">mutt_extract_token<pos:position pos:line="10" pos:column="21"/></name> <argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">buf<pos:position pos:line="10" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="28">s<pos:position pos:line="10" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="31">MUTT_TOKEN_CONDENSE<pos:position pos:line="10" pos:column="50"/></name></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="52"/></expr_stmt>
  <comment type="block" pos:line="11" pos:column="3">/* make sure the macro sequence is not an empty string */</comment>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><operator pos:line="12" pos:column="7">!<pos:position pos:line="12" pos:column="8"/></operator><operator pos:line="12" pos:column="8">*<pos:position pos:line="12" pos:column="9"/></operator><name><name pos:line="12" pos:column="9">buf<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">-&gt;<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="14">data<pos:position pos:line="12" pos:column="18"/></name></name></expr>)<pos:position pos:line="12" pos:column="19"/></condition><then pos:line="12" pos:column="19">
  <block pos:line="13" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">strfcpy<pos:position pos:line="14" pos:column="12"/></name> <argument_list pos:line="14" pos:column="13">(<argument><expr><name><name pos:line="14" pos:column="14">err<pos:position pos:line="14" pos:column="17"/></name><operator pos:line="14" pos:column="17">-&gt;<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="19">data<pos:position pos:line="14" pos:column="23"/></name></name></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="25">_<pos:position pos:line="14" pos:column="26"/></name><argument_list pos:line="14" pos:column="26">(<argument><expr><literal type="string" pos:line="14" pos:column="27">"macro: empty key sequence"<pos:position pos:line="14" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="57">err<pos:position pos:line="14" pos:column="60"/></name><operator pos:line="14" pos:column="60">-&gt;<pos:position pos:line="14" pos:column="65"/></operator><name pos:line="14" pos:column="62">dsize<pos:position pos:line="14" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="69"/></expr_stmt>
  }<pos:position pos:line="15" pos:column="4"/></block></then>
  <else pos:line="16" pos:column="3">else
  <block pos:line="17" pos:column="3">{
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><call><name pos:line="18" pos:column="9">MoreArgs<pos:position pos:line="18" pos:column="17"/></name> <argument_list pos:line="18" pos:column="18">(<argument><expr><name pos:line="18" pos:column="19">s<pos:position pos:line="18" pos:column="20"/></name></expr></argument>)<pos:position pos:line="18" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="22"/></condition><then pos:line="18" pos:column="22">
    <block pos:line="19" pos:column="5">{
      <expr_stmt><expr><name pos:line="20" pos:column="7">seq<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <call><name pos:line="20" pos:column="13">safe_strdup<pos:position pos:line="20" pos:column="24"/></name> <argument_list pos:line="20" pos:column="25">(<argument><expr><name><name pos:line="20" pos:column="26">buf<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">-&gt;<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="31">data<pos:position pos:line="20" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">mutt_extract_token<pos:position pos:line="21" pos:column="25"/></name> <argument_list pos:line="21" pos:column="26">(<argument><expr><name pos:line="21" pos:column="27">buf<pos:position pos:line="21" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="32">s<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="35">MUTT_TOKEN_CONDENSE<pos:position pos:line="21" pos:column="54"/></name></expr></argument>)<pos:position pos:line="21" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="56"/></expr_stmt>

      <if pos:line="23" pos:column="7">if <condition pos:line="23" pos:column="10">(<expr><call><name pos:line="23" pos:column="11">MoreArgs<pos:position pos:line="23" pos:column="19"/></name> <argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">s<pos:position pos:line="23" pos:column="22"/></name></expr></argument>)<pos:position pos:line="23" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="24"/></condition><then pos:line="23" pos:column="24">
      <block pos:line="24" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">strfcpy<pos:position pos:line="25" pos:column="16"/></name> <argument_list pos:line="25" pos:column="17">(<argument><expr><name><name pos:line="25" pos:column="18">err<pos:position pos:line="25" pos:column="21"/></name><operator pos:line="25" pos:column="21">-&gt;<pos:position pos:line="25" pos:column="26"/></operator><name pos:line="25" pos:column="23">data<pos:position pos:line="25" pos:column="27"/></name></name></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="29">_<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">(<argument><expr><literal type="string" pos:line="25" pos:column="31">"macro: too many arguments"<pos:position pos:line="25" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="61">err<pos:position pos:line="25" pos:column="64"/></name><operator pos:line="25" pos:column="64">-&gt;<pos:position pos:line="25" pos:column="69"/></operator><name pos:line="25" pos:column="66">dsize<pos:position pos:line="25" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="73"/></expr_stmt>
      }<pos:position pos:line="26" pos:column="8"/></block></then>
      <else pos:line="27" pos:column="7">else
      <block pos:line="28" pos:column="7">{
        <for pos:line="29" pos:column="9">for <control pos:line="29" pos:column="13">(<init><expr><name pos:line="29" pos:column="14">i<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <literal type="number" pos:line="29" pos:column="18">0<pos:position pos:line="29" pos:column="19"/></literal></expr>;<pos:position pos:line="29" pos:column="20"/></init> <condition><expr><name pos:line="29" pos:column="21">i<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">&lt;<pos:position pos:line="29" pos:column="27"/></operator> <name pos:line="29" pos:column="25">nummenus<pos:position pos:line="29" pos:column="33"/></name></expr>;<pos:position pos:line="29" pos:column="34"/></condition> <incr><expr><operator pos:line="29" pos:column="35">++<pos:position pos:line="29" pos:column="37"/></operator><name pos:line="29" pos:column="37">i<pos:position pos:line="29" pos:column="38"/></name></expr></incr>)<pos:position pos:line="29" pos:column="39"/></control>
        <block pos:line="30" pos:column="9">{
          <expr_stmt><expr><call><name pos:line="31" pos:column="11">km_bind<pos:position pos:line="31" pos:column="18"/></name> <argument_list pos:line="31" pos:column="19">(<argument><expr><name pos:line="31" pos:column="20">key<pos:position pos:line="31" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="25">menu<pos:position pos:line="31" pos:column="29"/></name><index pos:line="31" pos:column="29">[<expr><name pos:line="31" pos:column="30">i<pos:position pos:line="31" pos:column="31"/></name></expr>]<pos:position pos:line="31" pos:column="32"/></index></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="34">OP_MACRO<pos:position pos:line="31" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="44">seq<pos:position pos:line="31" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="49">buf<pos:position pos:line="31" pos:column="52"/></name><operator pos:line="31" pos:column="52">-&gt;<pos:position pos:line="31" pos:column="57"/></operator><name pos:line="31" pos:column="54">data<pos:position pos:line="31" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="60"/></expr_stmt>
          <expr_stmt><expr><name pos:line="32" pos:column="11">r<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <literal type="number" pos:line="32" pos:column="15">0<pos:position pos:line="32" pos:column="16"/></literal></expr>;<pos:position pos:line="32" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="33" pos:column="10"/></block></for>
      }<pos:position pos:line="34" pos:column="8"/></block></else></if>

      <expr_stmt><expr><call><name pos:line="36" pos:column="7">FREE<pos:position pos:line="36" pos:column="11"/></name> <argument_list pos:line="36" pos:column="12">(<argument><expr><operator pos:line="36" pos:column="13">&amp;<pos:position pos:line="36" pos:column="18"/></operator><name pos:line="36" pos:column="14">seq<pos:position pos:line="36" pos:column="17"/></name></expr></argument>)<pos:position pos:line="36" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then>
    <else pos:line="38" pos:column="5">else
    <block pos:line="39" pos:column="5">{
      <for pos:line="40" pos:column="7">for <control pos:line="40" pos:column="11">(<init><expr><name pos:line="40" pos:column="12">i<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <literal type="number" pos:line="40" pos:column="16">0<pos:position pos:line="40" pos:column="17"/></literal></expr>;<pos:position pos:line="40" pos:column="18"/></init> <condition><expr><name pos:line="40" pos:column="19">i<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">&lt;<pos:position pos:line="40" pos:column="25"/></operator> <name pos:line="40" pos:column="23">nummenus<pos:position pos:line="40" pos:column="31"/></name></expr>;<pos:position pos:line="40" pos:column="32"/></condition> <incr><expr><operator pos:line="40" pos:column="33">++<pos:position pos:line="40" pos:column="35"/></operator><name pos:line="40" pos:column="35">i<pos:position pos:line="40" pos:column="36"/></name></expr></incr>)<pos:position pos:line="40" pos:column="37"/></control>
      <block pos:line="41" pos:column="7">{
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">km_bind<pos:position pos:line="42" pos:column="16"/></name> <argument_list pos:line="42" pos:column="17">(<argument><expr><name pos:line="42" pos:column="18">key<pos:position pos:line="42" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="23">menu<pos:position pos:line="42" pos:column="27"/></name><index pos:line="42" pos:column="27">[<expr><name pos:line="42" pos:column="28">i<pos:position pos:line="42" pos:column="29"/></name></expr>]<pos:position pos:line="42" pos:column="30"/></index></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="32">OP_MACRO<pos:position pos:line="42" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="42">buf<pos:position pos:line="42" pos:column="45"/></name><operator pos:line="42" pos:column="45">-&gt;<pos:position pos:line="42" pos:column="50"/></operator><name pos:line="42" pos:column="47">data<pos:position pos:line="42" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="53">NULL<pos:position pos:line="42" pos:column="57"/></name></expr></argument>)<pos:position pos:line="42" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><name pos:line="43" pos:column="9">r<pos:position pos:line="43" pos:column="10"/></name> <operator pos:line="43" pos:column="11">=<pos:position pos:line="43" pos:column="12"/></operator> <literal type="number" pos:line="43" pos:column="13">0<pos:position pos:line="43" pos:column="14"/></literal></expr>;<pos:position pos:line="43" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="44" pos:column="8"/></block></for>
    }<pos:position pos:line="45" pos:column="6"/></block></else></if>
  }<pos:position pos:line="46" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="47" pos:column="3">FREE<pos:position pos:line="47" pos:column="7"/></name> <argument_list pos:line="47" pos:column="8">(<argument><expr><operator pos:line="47" pos:column="9">&amp;<pos:position pos:line="47" pos:column="14"/></operator><name pos:line="47" pos:column="10">key<pos:position pos:line="47" pos:column="13"/></name></expr></argument>)<pos:position pos:line="47" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="15"/></expr_stmt>
  <return pos:line="48" pos:column="3">return <expr><operator pos:line="48" pos:column="10">(<pos:position pos:line="48" pos:column="11"/></operator><name pos:line="48" pos:column="11">r<pos:position pos:line="48" pos:column="12"/></name><operator pos:line="48" pos:column="12">)<pos:position pos:line="48" pos:column="13"/></operator></expr>;<pos:position pos:line="48" pos:column="14"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
