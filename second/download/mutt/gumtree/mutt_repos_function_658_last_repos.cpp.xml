<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_658_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">md5_stream<pos:position pos:line="2" pos:column="11"/></name> <parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name pos:line="2" pos:column="13">FILE<pos:position pos:line="2" pos:column="17"/></name> <modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type><name pos:line="2" pos:column="19">stream<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="27">void<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">resblock<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">md5_ctx<pos:position pos:line="4" pos:column="17"/></name></name></type> <name pos:line="4" pos:column="18">ctx<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">buffer<pos:position pos:line="5" pos:column="14"/></name><index pos:line="5" pos:column="14">[<expr><name pos:line="5" pos:column="15">BLOCKSIZE<pos:position pos:line="5" pos:column="24"/></name> <operator pos:line="5" pos:column="25">+<pos:position pos:line="5" pos:column="26"/></operator> <literal type="number" pos:line="5" pos:column="27">72<pos:position pos:line="5" pos:column="29"/></literal></expr>]<pos:position pos:line="5" pos:column="30"/></index></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">sum<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* Initialize the computation context.  */</comment>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">md5_init_ctx<pos:position pos:line="9" pos:column="15"/></name> <argument_list pos:line="9" pos:column="16">(<argument><expr><operator pos:line="9" pos:column="17">&amp;<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="18">ctx<pos:position pos:line="9" pos:column="21"/></name></expr></argument>)<pos:position pos:line="9" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="23"/></expr_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* Iterate over full file contents.  */</comment>
  <while pos:line="12" pos:column="3">while <condition pos:line="12" pos:column="9">(<expr><literal type="number" pos:line="12" pos:column="10">1<pos:position pos:line="12" pos:column="11"/></literal></expr>)<pos:position pos:line="12" pos:column="12"/></condition>
    <block pos:line="13" pos:column="5">{
      <comment type="block" pos:line="14" pos:column="7">/* We read the file in blocks of BLOCKSIZE bytes.  One call of the
         computation function processes the whole buffer so that with the
         next round of the loop another block can be read.  */</comment>
      <decl_stmt><decl><type><name pos:line="17" pos:column="7">size_t<pos:position pos:line="17" pos:column="13"/></name></type> <name pos:line="17" pos:column="14">n<pos:position pos:line="17" pos:column="15"/></name></decl>;<pos:position pos:line="17" pos:column="16"/></decl_stmt>
      <expr_stmt><expr><name pos:line="18" pos:column="7">sum<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <literal type="number" pos:line="18" pos:column="13">0<pos:position pos:line="18" pos:column="14"/></literal></expr>;<pos:position pos:line="18" pos:column="15"/></expr_stmt>

      <comment type="block" pos:line="20" pos:column="7">/* Read block.  Take care for partial reads.  */</comment>
      <while pos:line="21" pos:column="7">while <condition pos:line="21" pos:column="13">(<expr><literal type="number" pos:line="21" pos:column="14">1<pos:position pos:line="21" pos:column="15"/></literal></expr>)<pos:position pos:line="21" pos:column="16"/></condition>
	<block pos:line="22" pos:column="9">{
	  <expr_stmt><expr><name pos:line="23" pos:column="11">n<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <call><name pos:line="23" pos:column="15">fread<pos:position pos:line="23" pos:column="20"/></name> <argument_list pos:line="23" pos:column="21">(<argument><expr><name pos:line="23" pos:column="22">buffer<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">+<pos:position pos:line="23" pos:column="30"/></operator> <name pos:line="23" pos:column="31">sum<pos:position pos:line="23" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="36">1<pos:position pos:line="23" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="39">BLOCKSIZE<pos:position pos:line="23" pos:column="48"/></name> <operator pos:line="23" pos:column="49">-<pos:position pos:line="23" pos:column="50"/></operator> <name pos:line="23" pos:column="51">sum<pos:position pos:line="23" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="56">stream<pos:position pos:line="23" pos:column="62"/></name></expr></argument>)<pos:position pos:line="23" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="64"/></expr_stmt>

	  <expr_stmt><expr><name pos:line="25" pos:column="11">sum<pos:position pos:line="25" pos:column="14"/></name> <operator pos:line="25" pos:column="15">+=<pos:position pos:line="25" pos:column="17"/></operator> <name pos:line="25" pos:column="18">n<pos:position pos:line="25" pos:column="19"/></name></expr>;<pos:position pos:line="25" pos:column="20"/></expr_stmt>

	  <if pos:line="27" pos:column="11">if <condition pos:line="27" pos:column="14">(<expr><name pos:line="27" pos:column="15">sum<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">==<pos:position pos:line="27" pos:column="21"/></operator> <name pos:line="27" pos:column="22">BLOCKSIZE<pos:position pos:line="27" pos:column="31"/></name></expr>)<pos:position pos:line="27" pos:column="32"/></condition><then pos:line="27" pos:column="32">
	    <block type="pseudo"><break pos:line="28" pos:column="13">break;<pos:position pos:line="28" pos:column="19"/></break></block></then></if>

	  <if pos:line="30" pos:column="11">if <condition pos:line="30" pos:column="14">(<expr><name pos:line="30" pos:column="15">n<pos:position pos:line="30" pos:column="16"/></name> <operator pos:line="30" pos:column="17">==<pos:position pos:line="30" pos:column="19"/></operator> <literal type="number" pos:line="30" pos:column="20">0<pos:position pos:line="30" pos:column="21"/></literal></expr>)<pos:position pos:line="30" pos:column="22"/></condition><then pos:line="30" pos:column="22">
	    <block pos:line="31" pos:column="13">{
	      <comment type="block" pos:line="32" pos:column="15">/* Check for the error flag IFF N == 0, so that we don't
	         exit the loop after a partial read due to e.g., EAGAIN
	         or EWOULDBLOCK.  */</comment>
	      <if pos:line="35" pos:column="15">if <condition pos:line="35" pos:column="18">(<expr><call><name pos:line="35" pos:column="19">ferror<pos:position pos:line="35" pos:column="25"/></name> <argument_list pos:line="35" pos:column="26">(<argument><expr><name pos:line="35" pos:column="27">stream<pos:position pos:line="35" pos:column="33"/></name></expr></argument>)<pos:position pos:line="35" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="35"/></condition><then pos:line="35" pos:column="35">
		<block type="pseudo"><return pos:line="36" pos:column="17">return <expr><literal type="number" pos:line="36" pos:column="24">1<pos:position pos:line="36" pos:column="25"/></literal></expr>;<pos:position pos:line="36" pos:column="26"/></return></block></then></if>
	      <goto pos:line="37" pos:column="15">goto <name pos:line="37" pos:column="20">process_partial_block<pos:position pos:line="37" pos:column="41"/></name>;<pos:position pos:line="37" pos:column="42"/></goto>
	    }<pos:position pos:line="38" pos:column="14"/></block></then></if>

	  <comment type="block" pos:line="40" pos:column="11">/* We've read at least one byte, so ignore errors.  But always
	     check for EOF, since feof may be true even though N &gt; 0.
	     Otherwise, we could end up calling fread after EOF.  */</comment>
	  <if pos:line="43" pos:column="11">if <condition pos:line="43" pos:column="14">(<expr><call><name pos:line="43" pos:column="15">feof<pos:position pos:line="43" pos:column="19"/></name> <argument_list pos:line="43" pos:column="20">(<argument><expr><name pos:line="43" pos:column="21">stream<pos:position pos:line="43" pos:column="27"/></name></expr></argument>)<pos:position pos:line="43" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="29"/></condition><then pos:line="43" pos:column="29">
	    <block type="pseudo"><goto pos:line="44" pos:column="13">goto <name pos:line="44" pos:column="18">process_partial_block<pos:position pos:line="44" pos:column="39"/></name>;<pos:position pos:line="44" pos:column="40"/></goto></block></then></if>
	}<pos:position pos:line="45" pos:column="10"/></block></while>

      <comment type="block" pos:line="47" pos:column="7">/* Process buffer with BLOCKSIZE bytes.  Note that
         BLOCKSIZE % 64 == 0
       */</comment>
      <expr_stmt><expr><call><name pos:line="50" pos:column="7">md5_process_block<pos:position pos:line="50" pos:column="24"/></name> <argument_list pos:line="50" pos:column="25">(<argument><expr><name pos:line="50" pos:column="26">buffer<pos:position pos:line="50" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="34">BLOCKSIZE<pos:position pos:line="50" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="45">&amp;<pos:position pos:line="50" pos:column="50"/></operator><name pos:line="50" pos:column="46">ctx<pos:position pos:line="50" pos:column="49"/></name></expr></argument>)<pos:position pos:line="50" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="51"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></while>

<label><name pos:line="53" pos:column="1">process_partial_block<pos:position pos:line="53" pos:column="22"/></name>:<pos:position pos:line="53" pos:column="23"/></label>

  <comment type="block" pos:line="55" pos:column="3">/* Process any remaining bytes.  */</comment>
  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><name pos:line="56" pos:column="7">sum<pos:position pos:line="56" pos:column="10"/></name> <operator pos:line="56" pos:column="11">&gt;<pos:position pos:line="56" pos:column="15"/></operator> <literal type="number" pos:line="56" pos:column="13">0<pos:position pos:line="56" pos:column="14"/></literal></expr>)<pos:position pos:line="56" pos:column="15"/></condition><then pos:line="56" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="5">md5_process_bytes<pos:position pos:line="57" pos:column="22"/></name> <argument_list pos:line="57" pos:column="23">(<argument><expr><name pos:line="57" pos:column="24">buffer<pos:position pos:line="57" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="32">sum<pos:position pos:line="57" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="37">&amp;<pos:position pos:line="57" pos:column="42"/></operator><name pos:line="57" pos:column="38">ctx<pos:position pos:line="57" pos:column="41"/></name></expr></argument>)<pos:position pos:line="57" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="43"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="59" pos:column="3">/* Construct result in desired memory.  */</comment>
  <expr_stmt><expr><call><name pos:line="60" pos:column="3">md5_finish_ctx<pos:position pos:line="60" pos:column="17"/></name> <argument_list pos:line="60" pos:column="18">(<argument><expr><operator pos:line="60" pos:column="19">&amp;<pos:position pos:line="60" pos:column="24"/></operator><name pos:line="60" pos:column="20">ctx<pos:position pos:line="60" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="25">resblock<pos:position pos:line="60" pos:column="33"/></name></expr></argument>)<pos:position pos:line="60" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="35"/></expr_stmt>
  <return pos:line="61" pos:column="3">return <expr><literal type="number" pos:line="61" pos:column="10">0<pos:position pos:line="61" pos:column="11"/></literal></expr>;<pos:position pos:line="61" pos:column="12"/></return>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
