<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1225_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">mutt_choose_charset<pos:position pos:line="1" pos:column="26"/></name> <parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">fromcode<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="50">const<pos:position pos:line="1" pos:column="55"/></specifier> <name pos:line="1" pos:column="56">char<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">charsets<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
		      <parameter><decl><type><name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">u<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="32">size_t<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">ulen<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">char<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier><modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">d<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">size_t<pos:position pos:line="2" pos:column="61"/></name> <modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">dlen<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">canonical_buff<pos:position pos:line="4" pos:column="22"/></name><index pos:line="4" pos:column="22">[<expr><name pos:line="4" pos:column="23">LONG_STRING<pos:position pos:line="4" pos:column="34"/></name></expr>]<pos:position pos:line="4" pos:column="35"/></index></name></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">e<pos:position pos:line="5" pos:column="10"/></name> <init pos:line="5" pos:column="11">= <expr><literal type="number" pos:line="5" pos:column="13">0<pos:position pos:line="5" pos:column="14"/></literal></expr></init></decl>, <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="17">tocode<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><literal type="number" pos:line="5" pos:column="26">0<pos:position pos:line="5" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">elen<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><literal type="number" pos:line="6" pos:column="17">0<pos:position pos:line="6" pos:column="18"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="20">bestn<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><literal type="number" pos:line="6" pos:column="28">0<pos:position pos:line="6" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">p<pos:position pos:line="7" pos:column="16"/></name></decl>, <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="19">q<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>

  <for pos:line="9" pos:column="3">for <control pos:line="9" pos:column="7">(<init><expr><name pos:line="9" pos:column="8">p<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <name pos:line="9" pos:column="12">charsets<pos:position pos:line="9" pos:column="20"/></name></expr>;<pos:position pos:line="9" pos:column="21"/></init> <condition><expr><name pos:line="9" pos:column="22">p<pos:position pos:line="9" pos:column="23"/></name></expr>;<pos:position pos:line="9" pos:column="24"/></condition> <incr><expr><name pos:line="9" pos:column="25">p<pos:position pos:line="9" pos:column="26"/></name> <operator pos:line="9" pos:column="27">=<pos:position pos:line="9" pos:column="28"/></operator> <ternary><condition><expr><name pos:line="9" pos:column="29">q<pos:position pos:line="9" pos:column="30"/></name></expr> ?<pos:position pos:line="9" pos:column="32"/></condition><then pos:line="9" pos:column="32"> <expr><name pos:line="9" pos:column="33">q<pos:position pos:line="9" pos:column="34"/></name> <operator pos:line="9" pos:column="35">+<pos:position pos:line="9" pos:column="36"/></operator> <literal type="number" pos:line="9" pos:column="37">1<pos:position pos:line="9" pos:column="38"/></literal></expr> <pos:position pos:line="9" pos:column="39"/></then><else pos:line="9" pos:column="39">: <expr><literal type="number" pos:line="9" pos:column="41">0<pos:position pos:line="9" pos:column="42"/></literal></expr></else></ternary></expr></incr>)<pos:position pos:line="9" pos:column="43"/></control>
  <block pos:line="10" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier></type><name pos:line="11" pos:column="11">s<pos:position pos:line="11" pos:column="12"/></name></decl>, <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier><decl><type ref="prev"/><name pos:line="11" pos:column="15">t<pos:position pos:line="11" pos:column="16"/></name></decl>;<pos:position pos:line="11" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">size_t<pos:position pos:line="12" pos:column="11"/></name></type> <name pos:line="12" pos:column="12">slen<pos:position pos:line="12" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="18">n<pos:position pos:line="12" pos:column="19"/></name></decl>;<pos:position pos:line="12" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><name pos:line="14" pos:column="5">q<pos:position pos:line="14" pos:column="6"/></name> <operator pos:line="14" pos:column="7">=<pos:position pos:line="14" pos:column="8"/></operator> <call><name pos:line="14" pos:column="9">strchr<pos:position pos:line="14" pos:column="15"/></name> <argument_list pos:line="14" pos:column="16">(<argument><expr><name pos:line="14" pos:column="17">p<pos:position pos:line="14" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="14" pos:column="20">':'<pos:position pos:line="14" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><name pos:line="16" pos:column="5">n<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <ternary><condition><expr><name pos:line="16" pos:column="9">q<pos:position pos:line="16" pos:column="10"/></name></expr> ?<pos:position pos:line="16" pos:column="12"/></condition><then pos:line="16" pos:column="12"> <expr><name pos:line="16" pos:column="13">q<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">-<pos:position pos:line="16" pos:column="16"/></operator> <name pos:line="16" pos:column="17">p<pos:position pos:line="16" pos:column="18"/></name></expr> <pos:position pos:line="16" pos:column="19"/></then><else pos:line="16" pos:column="19">: <expr><call><name pos:line="16" pos:column="21">strlen<pos:position pos:line="16" pos:column="27"/></name> <argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">p<pos:position pos:line="16" pos:column="30"/></name></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">!<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">n<pos:position pos:line="17" pos:column="11"/></name></expr>)<pos:position pos:line="17" pos:column="12"/></condition><then pos:line="17" pos:column="12">
      <block type="pseudo"><continue pos:line="18" pos:column="7">continue;<pos:position pos:line="18" pos:column="16"/></continue></block></then></if>

    <expr_stmt><expr><name pos:line="20" pos:column="5">t<pos:position pos:line="20" pos:column="6"/></name> <operator pos:line="20" pos:column="7">=<pos:position pos:line="20" pos:column="8"/></operator> <call><name pos:line="20" pos:column="9">safe_malloc<pos:position pos:line="20" pos:column="20"/></name> <argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">n<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">+<pos:position pos:line="20" pos:column="25"/></operator> <literal type="number" pos:line="20" pos:column="26">1<pos:position pos:line="20" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">memcpy<pos:position pos:line="21" pos:column="11"/></name> <argument_list pos:line="21" pos:column="12">(<argument><expr><name pos:line="21" pos:column="13">t<pos:position pos:line="21" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="16">p<pos:position pos:line="21" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="19">n<pos:position pos:line="21" pos:column="20"/></name></expr></argument>)<pos:position pos:line="21" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">t<pos:position pos:line="22" pos:column="6"/></name><index pos:line="22" pos:column="6">[<expr><name pos:line="22" pos:column="7">n<pos:position pos:line="22" pos:column="8"/></name></expr>]<pos:position pos:line="22" pos:column="9"/></index></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <literal type="char" pos:line="22" pos:column="12">'\0'<pos:position pos:line="22" pos:column="16"/></literal></expr>;<pos:position pos:line="22" pos:column="17"/></expr_stmt>

    <expr_stmt><expr><name pos:line="24" pos:column="5">n<pos:position pos:line="24" pos:column="6"/></name> <operator pos:line="24" pos:column="7">=<pos:position pos:line="24" pos:column="8"/></operator> <call><name pos:line="24" pos:column="9">convert_string<pos:position pos:line="24" pos:column="23"/></name> <argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">u<pos:position pos:line="24" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="28">ulen<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="34">fromcode<pos:position pos:line="24" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="44">t<pos:position pos:line="24" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="47">&amp;<pos:position pos:line="24" pos:column="52"/></operator><name pos:line="24" pos:column="48">s<pos:position pos:line="24" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="51">&amp;<pos:position pos:line="24" pos:column="56"/></operator><name pos:line="24" pos:column="52">slen<pos:position pos:line="24" pos:column="56"/></name></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="58"/></expr_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">n<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">==<pos:position pos:line="25" pos:column="13"/></operator> <call pos:line="25" pos:column="14">(<name pos:line="25" pos:column="15">size_t<pos:position pos:line="25" pos:column="21"/></name>)<argument_list pos:line="25" pos:column="22">(<argument><expr><operator pos:line="25" pos:column="23">-<pos:position pos:line="25" pos:column="24"/></operator><literal type="number" pos:line="25" pos:column="24">1<pos:position pos:line="25" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="27"/></condition><then pos:line="25" pos:column="27">
    <block pos:line="26" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">FREE<pos:position pos:line="27" pos:column="11"/></name> <argument_list pos:line="27" pos:column="12">(<argument><expr><operator pos:line="27" pos:column="13">&amp;<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="14">t<pos:position pos:line="27" pos:column="15"/></name></expr></argument>)<pos:position pos:line="27" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="17"/></expr_stmt>
      <continue pos:line="28" pos:column="7">continue;<pos:position pos:line="28" pos:column="16"/></continue>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><operator pos:line="31" pos:column="9">!<pos:position pos:line="31" pos:column="10"/></operator><name pos:line="31" pos:column="10">tocode<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">||<pos:position pos:line="31" pos:column="19"/></operator> <name pos:line="31" pos:column="20">n<pos:position pos:line="31" pos:column="21"/></name> <operator pos:line="31" pos:column="22">&lt;<pos:position pos:line="31" pos:column="26"/></operator> <name pos:line="31" pos:column="24">bestn<pos:position pos:line="31" pos:column="29"/></name></expr>)<pos:position pos:line="31" pos:column="30"/></condition><then pos:line="31" pos:column="30">
    <block pos:line="32" pos:column="5">{
      <expr_stmt><expr><name pos:line="33" pos:column="7">bestn<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <name pos:line="33" pos:column="15">n<pos:position pos:line="33" pos:column="16"/></name></expr>;<pos:position pos:line="33" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="34" pos:column="7">FREE<pos:position pos:line="34" pos:column="11"/></name> <argument_list pos:line="34" pos:column="12">(<argument><expr><operator pos:line="34" pos:column="13">&amp;<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="14">tocode<pos:position pos:line="34" pos:column="20"/></name></expr></argument>)<pos:position pos:line="34" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="35" pos:column="7">tocode<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">=<pos:position pos:line="35" pos:column="15"/></operator> <name pos:line="35" pos:column="16">t<pos:position pos:line="35" pos:column="17"/></name></expr>;<pos:position pos:line="35" pos:column="18"/></expr_stmt>
      <if pos:line="36" pos:column="7">if <condition pos:line="36" pos:column="10">(<expr><name pos:line="36" pos:column="11">d<pos:position pos:line="36" pos:column="12"/></name></expr>)<pos:position pos:line="36" pos:column="13"/></condition><then pos:line="36" pos:column="13">
      <block pos:line="37" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">FREE<pos:position pos:line="38" pos:column="13"/></name> <argument_list pos:line="38" pos:column="14">(<argument><expr><operator pos:line="38" pos:column="15">&amp;<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="16">e<pos:position pos:line="38" pos:column="17"/></name></expr></argument>)<pos:position pos:line="38" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name pos:line="39" pos:column="9">e<pos:position pos:line="39" pos:column="10"/></name> <operator pos:line="39" pos:column="11">=<pos:position pos:line="39" pos:column="12"/></operator> <name pos:line="39" pos:column="13">s<pos:position pos:line="39" pos:column="14"/></name></expr>;<pos:position pos:line="39" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="40" pos:column="8"/></block></then>
      <else pos:line="41" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="9">FREE<pos:position pos:line="42" pos:column="13"/></name> <argument_list pos:line="42" pos:column="14">(<argument><expr><operator pos:line="42" pos:column="15">&amp;<pos:position pos:line="42" pos:column="20"/></operator><name pos:line="42" pos:column="16">s<pos:position pos:line="42" pos:column="17"/></name></expr></argument>)<pos:position pos:line="42" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="19"/></expr_stmt></block></else></if>
      <expr_stmt><expr><name pos:line="43" pos:column="7">elen<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <name pos:line="43" pos:column="14">slen<pos:position pos:line="43" pos:column="18"/></name></expr>;<pos:position pos:line="43" pos:column="19"/></expr_stmt>
      <if pos:line="44" pos:column="7">if <condition pos:line="44" pos:column="10">(<expr><operator pos:line="44" pos:column="11">!<pos:position pos:line="44" pos:column="12"/></operator><name pos:line="44" pos:column="12">bestn<pos:position pos:line="44" pos:column="17"/></name></expr>)<pos:position pos:line="44" pos:column="18"/></condition><then pos:line="44" pos:column="18">
	<block type="pseudo"><break pos:line="45" pos:column="9">break;<pos:position pos:line="45" pos:column="15"/></break></block></then></if>
    }<pos:position pos:line="46" pos:column="6"/></block></then>
    <else pos:line="47" pos:column="5">else
    <block pos:line="48" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">FREE<pos:position pos:line="49" pos:column="11"/></name> <argument_list pos:line="49" pos:column="12">(<argument><expr><operator pos:line="49" pos:column="13">&amp;<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="14">t<pos:position pos:line="49" pos:column="15"/></name></expr></argument>)<pos:position pos:line="49" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="50" pos:column="7">FREE<pos:position pos:line="50" pos:column="11"/></name> <argument_list pos:line="50" pos:column="12">(<argument><expr><operator pos:line="50" pos:column="13">&amp;<pos:position pos:line="50" pos:column="18"/></operator><name pos:line="50" pos:column="14">s<pos:position pos:line="50" pos:column="15"/></name></expr></argument>)<pos:position pos:line="50" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></else></if>
  }<pos:position pos:line="52" pos:column="4"/></block></for>
  <if pos:line="53" pos:column="3">if <condition pos:line="53" pos:column="6">(<expr><name pos:line="53" pos:column="7">tocode<pos:position pos:line="53" pos:column="13"/></name></expr>)<pos:position pos:line="53" pos:column="14"/></condition><then pos:line="53" pos:column="14">
  <block pos:line="54" pos:column="3">{
    <if pos:line="55" pos:column="5">if <condition pos:line="55" pos:column="8">(<expr><name pos:line="55" pos:column="9">d<pos:position pos:line="55" pos:column="10"/></name></expr>)<pos:position pos:line="55" pos:column="11"/></condition><then pos:line="55" pos:column="11">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="56" pos:column="7">*<pos:position pos:line="56" pos:column="8"/></operator><name pos:line="56" pos:column="8">d<pos:position pos:line="56" pos:column="9"/></name> <operator pos:line="56" pos:column="10">=<pos:position pos:line="56" pos:column="11"/></operator> <name pos:line="56" pos:column="12">e<pos:position pos:line="56" pos:column="13"/></name></expr>;<pos:position pos:line="56" pos:column="14"/></expr_stmt></block></then></if>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">dlen<pos:position pos:line="57" pos:column="13"/></name></expr>)<pos:position pos:line="57" pos:column="14"/></condition><then pos:line="57" pos:column="14">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="58" pos:column="7">*<pos:position pos:line="58" pos:column="8"/></operator><name pos:line="58" pos:column="8">dlen<pos:position pos:line="58" pos:column="12"/></name> <operator pos:line="58" pos:column="13">=<pos:position pos:line="58" pos:column="14"/></operator> <name pos:line="58" pos:column="15">elen<pos:position pos:line="58" pos:column="19"/></name></expr>;<pos:position pos:line="58" pos:column="20"/></expr_stmt></block></then></if>
    
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">mutt_canonical_charset<pos:position pos:line="60" pos:column="27"/></name> <argument_list pos:line="60" pos:column="28">(<argument><expr><name pos:line="60" pos:column="29">canonical_buff<pos:position pos:line="60" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="45">sizeof <argument_list pos:line="60" pos:column="52">(<argument><expr><name pos:line="60" pos:column="53">canonical_buff<pos:position pos:line="60" pos:column="67"/></name></expr></argument>)<pos:position pos:line="60" pos:column="68"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="60" pos:column="70">tocode<pos:position pos:line="60" pos:column="76"/></name></expr></argument>)<pos:position pos:line="60" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">mutt_str_replace<pos:position pos:line="61" pos:column="21"/></name> <argument_list pos:line="61" pos:column="22">(<argument><expr><operator pos:line="61" pos:column="23">&amp;<pos:position pos:line="61" pos:column="28"/></operator><name pos:line="61" pos:column="24">tocode<pos:position pos:line="61" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="32">canonical_buff<pos:position pos:line="61" pos:column="46"/></name></expr></argument>)<pos:position pos:line="61" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="48"/></expr_stmt>
  }<pos:position pos:line="62" pos:column="4"/></block></then></if>
  <return pos:line="63" pos:column="3">return <expr><name pos:line="63" pos:column="10">tocode<pos:position pos:line="63" pos:column="16"/></name></expr>;<pos:position pos:line="63" pos:column="17"/></return>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
