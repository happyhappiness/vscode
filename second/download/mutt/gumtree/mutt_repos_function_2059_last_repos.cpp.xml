<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2059_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">imap_exec_msgset<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">IMAP_DATA<pos:position pos:line="1" pos:column="32"/></name><modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type> <name pos:line="1" pos:column="34">idata<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name><modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type> <name pos:line="1" pos:column="53">pre<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="58">const<pos:position pos:line="1" pos:column="63"/></specifier> <name pos:line="1" pos:column="64">char<pos:position pos:line="1" pos:column="68"/></name><modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type> <name pos:line="1" pos:column="70">post<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>,
                      <parameter><decl><type><name pos:line="2" pos:column="23">int<pos:position pos:line="2" pos:column="26"/></name></type> <name pos:line="2" pos:column="27">flag<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">int<pos:position pos:line="2" pos:column="36"/></name></type> <name pos:line="2" pos:column="37">changed<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">int<pos:position pos:line="2" pos:column="49"/></name></type> <name pos:line="2" pos:column="50">invert<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">HEADER<pos:position pos:line="4" pos:column="9"/></name><modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier><modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type> <name pos:line="4" pos:column="12">hdrs<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><name pos:line="4" pos:column="19">NULL<pos:position pos:line="4" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">short<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">oldsort<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">BUFFER<pos:position pos:line="6" pos:column="9"/></name><modifier pos:line="6" pos:column="9">*<pos:position pos:line="6" pos:column="10"/></modifier></type> <name pos:line="6" pos:column="11">cmd<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">pos<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">rc<pos:position pos:line="8" pos:column="9"/></name></decl>;<pos:position pos:line="8" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">count<pos:position pos:line="9" pos:column="12"/></name> <init pos:line="9" pos:column="13">= <expr><literal type="number" pos:line="9" pos:column="15">0<pos:position pos:line="9" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><operator pos:line="11" pos:column="7">!<pos:position pos:line="11" pos:column="8"/></operator> <operator pos:line="11" pos:column="9">(<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">cmd<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <call><name pos:line="11" pos:column="16">mutt_buffer_new<pos:position pos:line="11" pos:column="31"/></name> <argument_list pos:line="11" pos:column="32">()<pos:position pos:line="11" pos:column="34"/></argument_list></call><operator pos:line="11" pos:column="34">)<pos:position pos:line="11" pos:column="35"/></operator></expr>)<pos:position pos:line="11" pos:column="36"/></condition><then pos:line="11" pos:column="36">
  <block pos:line="12" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">dprint<pos:position pos:line="13" pos:column="11"/></name> <argument_list pos:line="13" pos:column="12">(<argument><expr><literal type="number" pos:line="13" pos:column="13">1<pos:position pos:line="13" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="13" pos:column="16">(<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">debugfile<pos:position pos:line="13" pos:column="26"/></name><operator pos:line="13" pos:column="26">,<pos:position pos:line="13" pos:column="27"/></operator> <literal type="string" pos:line="13" pos:column="28">"imap_exec_msgset: unable to allocate buffer\n"<pos:position pos:line="13" pos:column="75"/></literal><operator pos:line="13" pos:column="75">)<pos:position pos:line="13" pos:column="76"/></operator></expr></argument>)<pos:position pos:line="13" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="78"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="17" pos:column="3">/* We make a copy of the headers just in case resorting doesn't give
   exactly the original order (duplicate messages?), because other parts of
   the ctx are tied to the header order. This may be overkill. */</comment>
  <expr_stmt><expr><name pos:line="20" pos:column="3">oldsort<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <name pos:line="20" pos:column="13">Sort<pos:position pos:line="20" pos:column="17"/></name></expr>;<pos:position pos:line="20" pos:column="18"/></expr_stmt>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name pos:line="21" pos:column="7">Sort<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">!=<pos:position pos:line="21" pos:column="14"/></operator> <name pos:line="21" pos:column="15">SORT_ORDER<pos:position pos:line="21" pos:column="25"/></name></expr>)<pos:position pos:line="21" pos:column="26"/></condition><then pos:line="21" pos:column="26">
  <block pos:line="22" pos:column="3">{
    <expr_stmt><expr><name pos:line="23" pos:column="5">hdrs<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <name><name pos:line="23" pos:column="12">idata<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">-&gt;<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="19">ctx<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">-&gt;<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="24">hdrs<pos:position pos:line="23" pos:column="28"/></name></name></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">idata<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">-&gt;<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="12">ctx<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">-&gt;<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="17">hdrs<pos:position pos:line="24" pos:column="21"/></name></name> <operator pos:line="24" pos:column="22">=<pos:position pos:line="24" pos:column="23"/></operator> <call><name pos:line="24" pos:column="24">safe_malloc<pos:position pos:line="24" pos:column="35"/></name> <argument_list pos:line="24" pos:column="36">(<argument><expr><name><name pos:line="24" pos:column="37">idata<pos:position pos:line="24" pos:column="42"/></name><operator pos:line="24" pos:column="42">-&gt;<pos:position pos:line="24" pos:column="47"/></operator><name pos:line="24" pos:column="44">ctx<pos:position pos:line="24" pos:column="47"/></name><operator pos:line="24" pos:column="47">-&gt;<pos:position pos:line="24" pos:column="52"/></operator><name pos:line="24" pos:column="49">msgcount<pos:position pos:line="24" pos:column="57"/></name></name> <operator pos:line="24" pos:column="58">*<pos:position pos:line="24" pos:column="59"/></operator> <sizeof pos:line="24" pos:column="60">sizeof <argument_list pos:line="24" pos:column="67">(<argument><expr><name pos:line="24" pos:column="68">HEADER<pos:position pos:line="24" pos:column="74"/></name><operator pos:line="24" pos:column="74">*<pos:position pos:line="24" pos:column="75"/></operator></expr></argument>)<pos:position pos:line="24" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">memcpy<pos:position pos:line="25" pos:column="11"/></name> <argument_list pos:line="25" pos:column="12">(<argument><expr><name><name pos:line="25" pos:column="13">idata<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">-&gt;<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="20">ctx<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">-&gt;<pos:position pos:line="25" pos:column="28"/></operator><name pos:line="25" pos:column="25">hdrs<pos:position pos:line="25" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="31">hdrs<pos:position pos:line="25" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="37">idata<pos:position pos:line="25" pos:column="42"/></name><operator pos:line="25" pos:column="42">-&gt;<pos:position pos:line="25" pos:column="47"/></operator><name pos:line="25" pos:column="44">ctx<pos:position pos:line="25" pos:column="47"/></name><operator pos:line="25" pos:column="47">-&gt;<pos:position pos:line="25" pos:column="52"/></operator><name pos:line="25" pos:column="49">msgcount<pos:position pos:line="25" pos:column="57"/></name></name> <operator pos:line="25" pos:column="58">*<pos:position pos:line="25" pos:column="59"/></operator> <sizeof pos:line="25" pos:column="60">sizeof <argument_list pos:line="25" pos:column="67">(<argument><expr><name pos:line="25" pos:column="68">HEADER<pos:position pos:line="25" pos:column="74"/></name><operator pos:line="25" pos:column="74">*<pos:position pos:line="25" pos:column="75"/></operator></expr></argument>)<pos:position pos:line="25" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="78"/></expr_stmt>

    <expr_stmt><expr><name pos:line="27" pos:column="5">Sort<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">=<pos:position pos:line="27" pos:column="11"/></operator> <name pos:line="27" pos:column="12">SORT_ORDER<pos:position pos:line="27" pos:column="22"/></name></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">qsort<pos:position pos:line="28" pos:column="10"/></name> <argument_list pos:line="28" pos:column="11">(<argument><expr><name><name pos:line="28" pos:column="12">idata<pos:position pos:line="28" pos:column="17"/></name><operator pos:line="28" pos:column="17">-&gt;<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="19">ctx<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">-&gt;<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="24">hdrs<pos:position pos:line="28" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="30">idata<pos:position pos:line="28" pos:column="35"/></name><operator pos:line="28" pos:column="35">-&gt;<pos:position pos:line="28" pos:column="40"/></operator><name pos:line="28" pos:column="37">ctx<pos:position pos:line="28" pos:column="40"/></name><operator pos:line="28" pos:column="40">-&gt;<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="42">msgcount<pos:position pos:line="28" pos:column="50"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="52">sizeof <argument_list pos:line="28" pos:column="59">(<argument><expr><name pos:line="28" pos:column="60">HEADER<pos:position pos:line="28" pos:column="66"/></name><operator pos:line="28" pos:column="66">*<pos:position pos:line="28" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="28" pos:column="68"/></argument_list></sizeof></expr></argument>,
           <argument><expr><call><name pos:line="29" pos:column="12">mutt_get_sort_func<pos:position pos:line="29" pos:column="30"/></name> <argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">SORT_ORDER<pos:position pos:line="29" pos:column="42"/></name></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="32" pos:column="3">pos<pos:position pos:line="32" pos:column="6"/></name> <operator pos:line="32" pos:column="7">=<pos:position pos:line="32" pos:column="8"/></operator> <literal type="number" pos:line="32" pos:column="9">0<pos:position pos:line="32" pos:column="10"/></literal></expr>;<pos:position pos:line="32" pos:column="11"/></expr_stmt>

  <do pos:line="34" pos:column="3">do
  <block pos:line="35" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="36" pos:column="5">cmd<pos:position pos:line="36" pos:column="8"/></name><operator pos:line="36" pos:column="8">-&gt;<pos:position pos:line="36" pos:column="13"/></operator><name pos:line="36" pos:column="10">dptr<pos:position pos:line="36" pos:column="14"/></name></name> <operator pos:line="36" pos:column="15">=<pos:position pos:line="36" pos:column="16"/></operator> <name><name pos:line="36" pos:column="17">cmd<pos:position pos:line="36" pos:column="20"/></name><operator pos:line="36" pos:column="20">-&gt;<pos:position pos:line="36" pos:column="25"/></operator><name pos:line="36" pos:column="22">data<pos:position pos:line="36" pos:column="26"/></name></name></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">mutt_buffer_printf<pos:position pos:line="37" pos:column="23"/></name> <argument_list pos:line="37" pos:column="24">(<argument><expr><name pos:line="37" pos:column="25">cmd<pos:position pos:line="37" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="30">"%s "<pos:position pos:line="37" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="37">pre<pos:position pos:line="37" pos:column="40"/></name></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="38" pos:column="5">rc<pos:position pos:line="38" pos:column="7"/></name> <operator pos:line="38" pos:column="8">=<pos:position pos:line="38" pos:column="9"/></operator> <call><name pos:line="38" pos:column="10">imap_make_msg_set<pos:position pos:line="38" pos:column="27"/></name> <argument_list pos:line="38" pos:column="28">(<argument><expr><name pos:line="38" pos:column="29">idata<pos:position pos:line="38" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="36">cmd<pos:position pos:line="38" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="41">flag<pos:position pos:line="38" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="47">changed<pos:position pos:line="38" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="56">invert<pos:position pos:line="38" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="64">&amp;<pos:position pos:line="38" pos:column="69"/></operator><name pos:line="38" pos:column="65">pos<pos:position pos:line="38" pos:column="68"/></name></expr></argument>)<pos:position pos:line="38" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="70"/></expr_stmt>
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">rc<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">&gt;<pos:position pos:line="39" pos:column="16"/></operator> <literal type="number" pos:line="39" pos:column="14">0<pos:position pos:line="39" pos:column="15"/></literal></expr>)<pos:position pos:line="39" pos:column="16"/></condition><then pos:line="39" pos:column="16">
    <block pos:line="40" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="41" pos:column="7">mutt_buffer_printf<pos:position pos:line="41" pos:column="25"/></name> <argument_list pos:line="41" pos:column="26">(<argument><expr><name pos:line="41" pos:column="27">cmd<pos:position pos:line="41" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="32">" %s"<pos:position pos:line="41" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="39">post<pos:position pos:line="41" pos:column="43"/></name></expr></argument>)<pos:position pos:line="41" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="45"/></expr_stmt>
      <if pos:line="42" pos:column="7">if <condition pos:line="42" pos:column="10">(<expr><call><name pos:line="42" pos:column="11">imap_exec<pos:position pos:line="42" pos:column="20"/></name> <argument_list pos:line="42" pos:column="21">(<argument><expr><name pos:line="42" pos:column="22">idata<pos:position pos:line="42" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="29">cmd<pos:position pos:line="42" pos:column="32"/></name><operator pos:line="42" pos:column="32">-&gt;<pos:position pos:line="42" pos:column="37"/></operator><name pos:line="42" pos:column="34">data<pos:position pos:line="42" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="40">IMAP_CMD_QUEUE<pos:position pos:line="42" pos:column="54"/></name></expr></argument>)<pos:position pos:line="42" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="56"/></condition><then pos:line="42" pos:column="56">
      <block pos:line="43" pos:column="7">{
        <expr_stmt><expr><name pos:line="44" pos:column="9">rc<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">=<pos:position pos:line="44" pos:column="13"/></operator> <operator pos:line="44" pos:column="14">-<pos:position pos:line="44" pos:column="15"/></operator><literal type="number" pos:line="44" pos:column="15">1<pos:position pos:line="44" pos:column="16"/></literal></expr>;<pos:position pos:line="44" pos:column="17"/></expr_stmt>
        <goto pos:line="45" pos:column="9">goto <name pos:line="45" pos:column="14">out<pos:position pos:line="45" pos:column="17"/></name>;<pos:position pos:line="45" pos:column="18"/></goto>
      }<pos:position pos:line="46" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="47" pos:column="7">count<pos:position pos:line="47" pos:column="12"/></name> <operator pos:line="47" pos:column="13">+=<pos:position pos:line="47" pos:column="15"/></operator> <name pos:line="47" pos:column="16">rc<pos:position pos:line="47" pos:column="18"/></name></expr>;<pos:position pos:line="47" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>
  }<pos:position pos:line="49" pos:column="4"/></block>
  while <condition pos:line="50" pos:column="9">(<expr><name pos:line="50" pos:column="10">rc<pos:position pos:line="50" pos:column="12"/></name> <operator pos:line="50" pos:column="13">&gt;<pos:position pos:line="50" pos:column="17"/></operator> <literal type="number" pos:line="50" pos:column="15">0<pos:position pos:line="50" pos:column="16"/></literal></expr>)<pos:position pos:line="50" pos:column="17"/></condition>;<pos:position pos:line="50" pos:column="18"/></do>

  <expr_stmt><expr><name pos:line="52" pos:column="3">rc<pos:position pos:line="52" pos:column="5"/></name> <operator pos:line="52" pos:column="6">=<pos:position pos:line="52" pos:column="7"/></operator> <name pos:line="52" pos:column="8">count<pos:position pos:line="52" pos:column="13"/></name></expr>;<pos:position pos:line="52" pos:column="14"/></expr_stmt>

<label><name pos:line="54" pos:column="1">out<pos:position pos:line="54" pos:column="4"/></name>:<pos:position pos:line="54" pos:column="5"/></label>
  <expr_stmt><expr><call><name pos:line="55" pos:column="3">mutt_buffer_free<pos:position pos:line="55" pos:column="19"/></name> <argument_list pos:line="55" pos:column="20">(<argument><expr><operator pos:line="55" pos:column="21">&amp;<pos:position pos:line="55" pos:column="26"/></operator><name pos:line="55" pos:column="22">cmd<pos:position pos:line="55" pos:column="25"/></name></expr></argument>)<pos:position pos:line="55" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="27"/></expr_stmt>
  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><name pos:line="56" pos:column="7">oldsort<pos:position pos:line="56" pos:column="14"/></name> <operator pos:line="56" pos:column="15">!=<pos:position pos:line="56" pos:column="17"/></operator> <name pos:line="56" pos:column="18">Sort<pos:position pos:line="56" pos:column="22"/></name></expr>)<pos:position pos:line="56" pos:column="23"/></condition><then pos:line="56" pos:column="23">
  <block pos:line="57" pos:column="3">{
    <expr_stmt><expr><name pos:line="58" pos:column="5">Sort<pos:position pos:line="58" pos:column="9"/></name> <operator pos:line="58" pos:column="10">=<pos:position pos:line="58" pos:column="11"/></operator> <name pos:line="58" pos:column="12">oldsort<pos:position pos:line="58" pos:column="19"/></name></expr>;<pos:position pos:line="58" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">FREE<pos:position pos:line="59" pos:column="9"/></name> <argument_list pos:line="59" pos:column="10">(<argument><expr><operator pos:line="59" pos:column="11">&amp;<pos:position pos:line="59" pos:column="16"/></operator><name><name pos:line="59" pos:column="12">idata<pos:position pos:line="59" pos:column="17"/></name><operator pos:line="59" pos:column="17">-&gt;<pos:position pos:line="59" pos:column="22"/></operator><name pos:line="59" pos:column="19">ctx<pos:position pos:line="59" pos:column="22"/></name><operator pos:line="59" pos:column="22">-&gt;<pos:position pos:line="59" pos:column="27"/></operator><name pos:line="59" pos:column="24">hdrs<pos:position pos:line="59" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="60" pos:column="5">idata<pos:position pos:line="60" pos:column="10"/></name><operator pos:line="60" pos:column="10">-&gt;<pos:position pos:line="60" pos:column="15"/></operator><name pos:line="60" pos:column="12">ctx<pos:position pos:line="60" pos:column="15"/></name><operator pos:line="60" pos:column="15">-&gt;<pos:position pos:line="60" pos:column="20"/></operator><name pos:line="60" pos:column="17">hdrs<pos:position pos:line="60" pos:column="21"/></name></name> <operator pos:line="60" pos:column="22">=<pos:position pos:line="60" pos:column="23"/></operator> <name pos:line="60" pos:column="24">hdrs<pos:position pos:line="60" pos:column="28"/></name></expr>;<pos:position pos:line="60" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="61" pos:column="4"/></block></then></if>

  <return pos:line="63" pos:column="3">return <expr><name pos:line="63" pos:column="10">rc<pos:position pos:line="63" pos:column="12"/></name></expr>;<pos:position pos:line="63" pos:column="13"/></return>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
