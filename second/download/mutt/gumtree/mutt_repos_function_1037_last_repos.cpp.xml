<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1037_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mutt_is_autoview<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">BODY<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">b<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">type<pos:position pos:line="3" pos:column="12"/></name><index pos:line="3" pos:column="12">[<expr><name pos:line="3" pos:column="13">SHORT_STRING<pos:position pos:line="3" pos:column="25"/></name></expr>]<pos:position pos:line="3" pos:column="26"/></index></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">is_autoview<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><literal type="number" pos:line="4" pos:column="21">0<pos:position pos:line="4" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">snprintf<pos:position pos:line="6" pos:column="11"/></name> <argument_list pos:line="6" pos:column="12">(<argument><expr><name pos:line="6" pos:column="13">type<pos:position pos:line="6" pos:column="17"/></name></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="19">sizeof <argument_list pos:line="6" pos:column="26">(<argument><expr><name pos:line="6" pos:column="27">type<pos:position pos:line="6" pos:column="31"/></name></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="34">"%s/%s"<pos:position pos:line="6" pos:column="41"/></literal></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="43">TYPE<pos:position pos:line="6" pos:column="47"/></name> <argument_list pos:line="6" pos:column="48">(<argument><expr><name pos:line="6" pos:column="49">b<pos:position pos:line="6" pos:column="50"/></name></expr></argument>)<pos:position pos:line="6" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="53">b<pos:position pos:line="6" pos:column="54"/></name><operator pos:line="6" pos:column="54">-&gt;<pos:position pos:line="6" pos:column="59"/></operator><name pos:line="6" pos:column="56">subtype<pos:position pos:line="6" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="65"/></expr_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><call><name pos:line="8" pos:column="7">option<pos:position pos:line="8" pos:column="13"/></name><argument_list pos:line="8" pos:column="13">(<argument><expr><name pos:line="8" pos:column="14">OPTIMPLICITAUTOVIEW<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="35"/></condition><then pos:line="8" pos:column="35">
  <block pos:line="9" pos:column="3">{
    <comment type="block" pos:line="10" pos:column="5">/* $implicit_autoview is essentially the same as "auto_view *" */</comment>
    <expr_stmt><expr><name pos:line="11" pos:column="5">is_autoview<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">=<pos:position pos:line="11" pos:column="18"/></operator> <literal type="number" pos:line="11" pos:column="19">1<pos:position pos:line="11" pos:column="20"/></literal></expr>;<pos:position pos:line="11" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="12" pos:column="4"/></block></then>
  <else pos:line="13" pos:column="3">else
  <block pos:line="14" pos:column="3">{
    <comment type="block" pos:line="15" pos:column="5">/* determine if this type is on the user's auto_view list */</comment>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">LIST<pos:position pos:line="16" pos:column="9"/></name> <modifier pos:line="16" pos:column="10">*<pos:position pos:line="16" pos:column="11"/></modifier></type><name pos:line="16" pos:column="11">t<pos:position pos:line="16" pos:column="12"/></name> <init pos:line="16" pos:column="13">= <expr><name pos:line="16" pos:column="15">AutoViewList<pos:position pos:line="16" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="28"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">mutt_check_lookup_list<pos:position pos:line="18" pos:column="27"/></name> <argument_list pos:line="18" pos:column="28">(<argument><expr><name pos:line="18" pos:column="29">b<pos:position pos:line="18" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="32">type<pos:position pos:line="18" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="38">sizeof <argument_list pos:line="18" pos:column="45">(<argument><expr><name pos:line="18" pos:column="46">type<pos:position pos:line="18" pos:column="50"/></name></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="53"/></expr_stmt>
    <for pos:line="19" pos:column="5">for <control pos:line="19" pos:column="9">(<init pos:line="19" pos:column="10">;<pos:position pos:line="19" pos:column="11"/></init> <condition><expr><name pos:line="19" pos:column="12">t<pos:position pos:line="19" pos:column="13"/></name></expr>;<pos:position pos:line="19" pos:column="14"/></condition> <incr><expr><name pos:line="19" pos:column="15">t<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <name><name pos:line="19" pos:column="19">t<pos:position pos:line="19" pos:column="20"/></name><operator pos:line="19" pos:column="20">-&gt;<pos:position pos:line="19" pos:column="25"/></operator><name pos:line="19" pos:column="22">next<pos:position pos:line="19" pos:column="26"/></name></name></expr></incr>)<pos:position pos:line="19" pos:column="27"/></control> <block pos:line="19" pos:column="28">{
      <decl_stmt><decl><type><name pos:line="20" pos:column="7">int<pos:position pos:line="20" pos:column="10"/></name></type> <name pos:line="20" pos:column="11">i<pos:position pos:line="20" pos:column="12"/></name> <init pos:line="20" pos:column="13">= <expr><call><name pos:line="20" pos:column="15">mutt_strlen<pos:position pos:line="20" pos:column="26"/></name> <argument_list pos:line="20" pos:column="27">(<argument><expr><name><name pos:line="20" pos:column="28">t<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">-&gt;<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="31">data<pos:position pos:line="20" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call> <operator pos:line="20" pos:column="37">-<pos:position pos:line="20" pos:column="38"/></operator> <literal type="number" pos:line="20" pos:column="39">1<pos:position pos:line="20" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="41"/></decl_stmt>
      <if pos:line="21" pos:column="7">if <condition pos:line="21" pos:column="10">(<expr><operator pos:line="21" pos:column="11">(<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="12">i<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">&gt;<pos:position pos:line="21" pos:column="18"/></operator> <literal type="number" pos:line="21" pos:column="16">0<pos:position pos:line="21" pos:column="17"/></literal> <operator pos:line="21" pos:column="18">&amp;&amp;<pos:position pos:line="21" pos:column="28"/></operator> <name><name pos:line="21" pos:column="21">t<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">-&gt;<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="24">data<pos:position pos:line="21" pos:column="28"/></name><index pos:line="21" pos:column="28">[<expr><name pos:line="21" pos:column="29">i<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">-<pos:position pos:line="21" pos:column="31"/></operator><literal type="number" pos:line="21" pos:column="31">1<pos:position pos:line="21" pos:column="32"/></literal></expr>]<pos:position pos:line="21" pos:column="33"/></index></name> <operator pos:line="21" pos:column="34">==<pos:position pos:line="21" pos:column="36"/></operator> <literal type="char" pos:line="21" pos:column="37">'/'<pos:position pos:line="21" pos:column="40"/></literal> <operator pos:line="21" pos:column="41">&amp;&amp;<pos:position pos:line="21" pos:column="51"/></operator> <name><name pos:line="21" pos:column="44">t<pos:position pos:line="21" pos:column="45"/></name><operator pos:line="21" pos:column="45">-&gt;<pos:position pos:line="21" pos:column="50"/></operator><name pos:line="21" pos:column="47">data<pos:position pos:line="21" pos:column="51"/></name><index pos:line="21" pos:column="51">[<expr><name pos:line="21" pos:column="52">i<pos:position pos:line="21" pos:column="53"/></name></expr>]<pos:position pos:line="21" pos:column="54"/></index></name> <operator pos:line="21" pos:column="55">==<pos:position pos:line="21" pos:column="57"/></operator> <literal type="char" pos:line="21" pos:column="58">'*'<pos:position pos:line="21" pos:column="61"/></literal> <operator pos:line="21" pos:column="62">&amp;&amp;<pos:position pos:line="21" pos:column="72"/></operator> 
            <call><name pos:line="22" pos:column="13">ascii_strncasecmp<pos:position pos:line="22" pos:column="30"/></name> <argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">type<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="38">t<pos:position pos:line="22" pos:column="39"/></name><operator pos:line="22" pos:column="39">-&gt;<pos:position pos:line="22" pos:column="44"/></operator><name pos:line="22" pos:column="41">data<pos:position pos:line="22" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="47">i<pos:position pos:line="22" pos:column="48"/></name></expr></argument>)<pos:position pos:line="22" pos:column="49"/></argument_list></call> <operator pos:line="22" pos:column="50">==<pos:position pos:line="22" pos:column="52"/></operator> <literal type="number" pos:line="22" pos:column="53">0<pos:position pos:line="22" pos:column="54"/></literal><operator pos:line="22" pos:column="54">)<pos:position pos:line="22" pos:column="55"/></operator> <operator pos:line="22" pos:column="56">||<pos:position pos:line="22" pos:column="58"/></operator>
          <call><name pos:line="23" pos:column="11">ascii_strcasecmp<pos:position pos:line="23" pos:column="27"/></name> <argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">type<pos:position pos:line="23" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="35">t<pos:position pos:line="23" pos:column="36"/></name><operator pos:line="23" pos:column="36">-&gt;<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="38">data<pos:position pos:line="23" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="43"/></argument_list></call> <operator pos:line="23" pos:column="44">==<pos:position pos:line="23" pos:column="46"/></operator> <literal type="number" pos:line="23" pos:column="47">0<pos:position pos:line="23" pos:column="48"/></literal></expr>)<pos:position pos:line="23" pos:column="49"/></condition><then pos:line="23" pos:column="49">
        <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="9">is_autoview<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <literal type="number" pos:line="24" pos:column="23">1<pos:position pos:line="24" pos:column="24"/></literal></expr>;<pos:position pos:line="24" pos:column="25"/></expr_stmt></block></then></if>
    }<pos:position pos:line="25" pos:column="6"/></block></for>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><call><name pos:line="27" pos:column="9">is_mmnoask<pos:position pos:line="27" pos:column="19"/></name> <argument_list pos:line="27" pos:column="20">(<argument><expr><name pos:line="27" pos:column="21">type<pos:position pos:line="27" pos:column="25"/></name></expr></argument>)<pos:position pos:line="27" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="27"/></condition><then pos:line="27" pos:column="27">
      <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="7">is_autoview<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">=<pos:position pos:line="28" pos:column="20"/></operator> <literal type="number" pos:line="28" pos:column="21">1<pos:position pos:line="28" pos:column="22"/></literal></expr>;<pos:position pos:line="28" pos:column="23"/></expr_stmt></block></then></if>
  }<pos:position pos:line="29" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="31" pos:column="3">/* determine if there is a mailcap entry suitable for auto_view
   *
   * WARNING: type is altered by this call as a result of `mime_lookup' support */</comment>
  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><name pos:line="34" pos:column="7">is_autoview<pos:position pos:line="34" pos:column="18"/></name></expr>)<pos:position pos:line="34" pos:column="19"/></condition><then pos:line="34" pos:column="19">
    <block type="pseudo"><return pos:line="35" pos:column="5">return <expr><call><name pos:line="35" pos:column="12">rfc1524_mailcap_lookup<pos:position pos:line="35" pos:column="34"/></name><argument_list pos:line="35" pos:column="34">(<argument><expr><name pos:line="35" pos:column="35">b<pos:position pos:line="35" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="38">type<pos:position pos:line="35" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="44">NULL<pos:position pos:line="35" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="50">MUTT_AUTOVIEW<pos:position pos:line="35" pos:column="63"/></name></expr></argument>)<pos:position pos:line="35" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="65"/></return></block></then></if>

  <return pos:line="37" pos:column="3">return <expr><literal type="number" pos:line="37" pos:column="10">0<pos:position pos:line="37" pos:column="11"/></literal></expr>;<pos:position pos:line="37" pos:column="12"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
