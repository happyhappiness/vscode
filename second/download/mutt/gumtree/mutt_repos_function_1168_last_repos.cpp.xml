<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1168_last_repos.cpp" pos:tabs="8"><function_decl><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type>
<name pos:line="2" pos:column="1">regerror<pos:position pos:line="2" pos:column="9"/></name> <parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">errcode<pos:position pos:line="2" pos:column="18"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="20">preg<pos:position pos:line="2" pos:column="24"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="26">errbuf<pos:position pos:line="2" pos:column="32"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">errbuf_size<pos:position pos:line="2" pos:column="45"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="46"/></parameter_list>
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">errcode<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">regex_t<pos:position pos:line="4" pos:column="18"/></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">preg<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">errbuf<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">size_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">errbuf_size<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
<block pos:line="7" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">msg<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">msg_size<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">errcode<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">&lt;<pos:position pos:line="11" pos:column="19"/></operator> <literal type="number" pos:line="11" pos:column="17">0<pos:position pos:line="11" pos:column="18"/></literal>
      <operator pos:line="12" pos:column="7">||<pos:position pos:line="12" pos:column="9"/></operator> <name pos:line="12" pos:column="10">errcode<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">&gt;=<pos:position pos:line="12" pos:column="23"/></operator> <call pos:line="12" pos:column="21">(<name pos:line="12" pos:column="22">int<pos:position pos:line="12" pos:column="25"/></name>) <argument_list pos:line="12" pos:column="27">(<argument><expr><sizeof pos:line="12" pos:column="28">sizeof <argument_list pos:line="12" pos:column="35">(<argument><expr><name pos:line="12" pos:column="36">re_error_msgid<pos:position pos:line="12" pos:column="50"/></name></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></sizeof>
			   <operator pos:line="13" pos:column="28">/<pos:position pos:line="13" pos:column="29"/></operator> <sizeof pos:line="13" pos:column="30">sizeof <argument_list pos:line="13" pos:column="37">(<argument><expr><name><name pos:line="13" pos:column="38">re_error_msgid<pos:position pos:line="13" pos:column="52"/></name><index pos:line="13" pos:column="52">[<expr><literal type="number" pos:line="13" pos:column="53">0<pos:position pos:line="13" pos:column="54"/></literal></expr>]<pos:position pos:line="13" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="13" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="58"/></condition><then pos:line="13" pos:column="58">
    <comment type="block" pos:line="14" pos:column="5">/* Only error codes returned by the rest of the code should be passed
       to this routine.  If we are given anything else, or if other regex
       code generates an invalid error code, then the program has a bug.
       Dump core so we can fix it.  */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="5">abort<pos:position pos:line="18" pos:column="10"/></name> <argument_list pos:line="18" pos:column="11">()<pos:position pos:line="18" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="14"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="20" pos:column="3">msg<pos:position pos:line="20" pos:column="6"/></name> <operator pos:line="20" pos:column="7">=<pos:position pos:line="20" pos:column="8"/></operator> <call><name pos:line="20" pos:column="9">gettext<pos:position pos:line="20" pos:column="16"/></name> <argument_list pos:line="20" pos:column="17">(<argument><expr><name><name pos:line="20" pos:column="18">re_error_msgid<pos:position pos:line="20" pos:column="32"/></name><index pos:line="20" pos:column="32">[<expr><name pos:line="20" pos:column="33">errcode<pos:position pos:line="20" pos:column="40"/></name></expr>]<pos:position pos:line="20" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt>

  <expr_stmt><expr><name pos:line="22" pos:column="3">msg_size<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <call><name pos:line="22" pos:column="14">strlen<pos:position pos:line="22" pos:column="20"/></name> <argument_list pos:line="22" pos:column="21">(<argument><expr><name pos:line="22" pos:column="22">msg<pos:position pos:line="22" pos:column="25"/></name></expr></argument>)<pos:position pos:line="22" pos:column="26"/></argument_list></call> <operator pos:line="22" pos:column="27">+<pos:position pos:line="22" pos:column="28"/></operator> <literal type="number" pos:line="22" pos:column="29">1<pos:position pos:line="22" pos:column="30"/></literal></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt> <comment type="block" pos:line="22" pos:column="32">/* Includes the null.  */</comment>

  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><name pos:line="24" pos:column="7">errbuf_size<pos:position pos:line="24" pos:column="18"/></name> <operator pos:line="24" pos:column="19">!=<pos:position pos:line="24" pos:column="21"/></operator> <literal type="number" pos:line="24" pos:column="22">0<pos:position pos:line="24" pos:column="23"/></literal></expr>)<pos:position pos:line="24" pos:column="24"/></condition><then pos:line="24" pos:column="24">
    <block pos:line="25" pos:column="5">{
      <if pos:line="26" pos:column="7">if <condition pos:line="26" pos:column="10">(<expr><name pos:line="26" pos:column="11">msg_size<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">&gt;<pos:position pos:line="26" pos:column="24"/></operator> <name pos:line="26" pos:column="22">errbuf_size<pos:position pos:line="26" pos:column="33"/></name></expr>)<pos:position pos:line="26" pos:column="34"/></condition><then pos:line="26" pos:column="34">
        <block pos:line="27" pos:column="9">{
          <expr_stmt><expr><call><name pos:line="28" pos:column="11">strncpy<pos:position pos:line="28" pos:column="18"/></name> <argument_list pos:line="28" pos:column="19">(<argument><expr><name pos:line="28" pos:column="20">errbuf<pos:position pos:line="28" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="28">msg<pos:position pos:line="28" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="33">errbuf_size<pos:position pos:line="28" pos:column="44"/></name> <operator pos:line="28" pos:column="45">-<pos:position pos:line="28" pos:column="46"/></operator> <literal type="number" pos:line="28" pos:column="47">1<pos:position pos:line="28" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="50"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="29" pos:column="11">errbuf<pos:position pos:line="29" pos:column="17"/></name><index pos:line="29" pos:column="17">[<expr><name pos:line="29" pos:column="18">errbuf_size<pos:position pos:line="29" pos:column="29"/></name> <operator pos:line="29" pos:column="30">-<pos:position pos:line="29" pos:column="31"/></operator> <literal type="number" pos:line="29" pos:column="32">1<pos:position pos:line="29" pos:column="33"/></literal></expr>]<pos:position pos:line="29" pos:column="34"/></index></name> <operator pos:line="29" pos:column="35">=<pos:position pos:line="29" pos:column="36"/></operator> <literal type="number" pos:line="29" pos:column="37">0<pos:position pos:line="29" pos:column="38"/></literal></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="30" pos:column="10"/></block></then>
      <else pos:line="31" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="9">strcpy<pos:position pos:line="32" pos:column="15"/></name> <argument_list pos:line="32" pos:column="16">(<argument><expr><name pos:line="32" pos:column="17">errbuf<pos:position pos:line="32" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="25">msg<pos:position pos:line="32" pos:column="28"/></name></expr></argument>)<pos:position pos:line="32" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt></block></else></if>	<comment type="block" pos:line="32" pos:column="33">/* __STRCPY_CHECKED__ */</comment>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

  <return pos:line="35" pos:column="3">return <expr><name pos:line="35" pos:column="10">msg_size<pos:position pos:line="35" pos:column="18"/></name></expr>;<pos:position pos:line="35" pos:column="19"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function_decl></unit>
