<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_429_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">openssl_md_to_smime_micalg<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">md<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">micalg<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">l<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">!<pos:position pos:line="6" pos:column="8"/></operator><name pos:line="6" pos:column="8">md<pos:position pos:line="6" pos:column="10"/></name></expr>)<pos:position pos:line="6" pos:column="11"/></condition><then pos:line="6" pos:column="11">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><literal type="number" pos:line="7" pos:column="12">0<pos:position pos:line="7" pos:column="13"/></literal></expr>;<pos:position pos:line="7" pos:column="14"/></return></block></then></if>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><call><name pos:line="9" pos:column="7">mutt_strncasecmp<pos:position pos:line="9" pos:column="23"/></name> <argument_list pos:line="9" pos:column="24">(<argument><expr><literal type="string" pos:line="9" pos:column="25">"sha"<pos:position pos:line="9" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="32">md<pos:position pos:line="9" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="36">3<pos:position pos:line="9" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call> <operator pos:line="9" pos:column="39">==<pos:position pos:line="9" pos:column="41"/></operator> <literal type="number" pos:line="9" pos:column="42">0<pos:position pos:line="9" pos:column="43"/></literal></expr>)<pos:position pos:line="9" pos:column="44"/></condition><then pos:line="9" pos:column="44">
  <block pos:line="10" pos:column="3">{
    <expr_stmt><expr><name pos:line="11" pos:column="5">l<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">=<pos:position pos:line="11" pos:column="8"/></operator> <call><name pos:line="11" pos:column="9">strlen<pos:position pos:line="11" pos:column="15"/></name> <argument_list pos:line="11" pos:column="16">(<argument><expr><name pos:line="11" pos:column="17">md<pos:position pos:line="11" pos:column="19"/></name></expr></argument>)<pos:position pos:line="11" pos:column="20"/></argument_list></call> <operator pos:line="11" pos:column="21">+<pos:position pos:line="11" pos:column="22"/></operator> <literal type="number" pos:line="11" pos:column="23">2<pos:position pos:line="11" pos:column="24"/></literal></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">micalg<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <operator pos:line="12" pos:column="14">(<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">char<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">*<pos:position pos:line="12" pos:column="21"/></operator><operator pos:line="12" pos:column="21">)<pos:position pos:line="12" pos:column="22"/></operator><call><name pos:line="12" pos:column="22">safe_malloc<pos:position pos:line="12" pos:column="33"/></name> <argument_list pos:line="12" pos:column="34">(<argument><expr><name pos:line="12" pos:column="35">l<pos:position pos:line="12" pos:column="36"/></name></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">snprintf<pos:position pos:line="13" pos:column="13"/></name> <argument_list pos:line="13" pos:column="14">(<argument><expr><name pos:line="13" pos:column="15">micalg<pos:position pos:line="13" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="23">l<pos:position pos:line="13" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="26">"sha-%s"<pos:position pos:line="13" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="36">md<pos:position pos:line="13" pos:column="38"/></name> <operator pos:line="13" pos:column="39">+<pos:position pos:line="13" pos:column="40"/></operator><literal type="number" pos:line="13" pos:column="40">3<pos:position pos:line="13" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>
  }<pos:position pos:line="14" pos:column="4"/></block></then>
  <else pos:line="15" pos:column="3">else
  <block pos:line="16" pos:column="3">{
    <expr_stmt><expr><name pos:line="17" pos:column="5">micalg<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <call><name pos:line="17" pos:column="14">safe_strdup<pos:position pos:line="17" pos:column="25"/></name> <argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">md<pos:position pos:line="17" pos:column="29"/></name></expr></argument>)<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></else></if>

  <return pos:line="20" pos:column="3">return <expr><name pos:line="20" pos:column="10">micalg<pos:position pos:line="20" pos:column="16"/></name></expr>;<pos:position pos:line="20" pos:column="17"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
