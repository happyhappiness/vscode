<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_510_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">mutt_parse_content_type<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">s<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">BODY<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">ct<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">pc<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">subtype<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">FREE<pos:position pos:line="6" pos:column="7"/></name> <argument_list pos:line="6" pos:column="8">(<argument><expr><operator pos:line="6" pos:column="9">&amp;<pos:position pos:line="6" pos:column="14"/></operator><name><name pos:line="6" pos:column="10">ct<pos:position pos:line="6" pos:column="12"/></name><operator pos:line="6" pos:column="12">-&gt;<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="14">subtype<pos:position pos:line="6" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="7" pos:column="3">mutt_free_parameter<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><operator pos:line="7" pos:column="23">&amp;<pos:position pos:line="7" pos:column="28"/></operator><name><name pos:line="7" pos:column="24">ct<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">-&gt;<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="28">parameter<pos:position pos:line="7" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="39"/></expr_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* First extract any existing parameters */</comment>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><operator pos:line="10" pos:column="7">(<pos:position pos:line="10" pos:column="8"/></operator><name pos:line="10" pos:column="8">pc<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <call><name pos:line="10" pos:column="13">strchr<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">s<pos:position pos:line="10" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="10" pos:column="23">';'<pos:position pos:line="10" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="27"/></argument_list></call><operator pos:line="10" pos:column="27">)<pos:position pos:line="10" pos:column="28"/></operator> <operator pos:line="10" pos:column="29">!=<pos:position pos:line="10" pos:column="31"/></operator> <name pos:line="10" pos:column="32">NULL<pos:position pos:line="10" pos:column="36"/></name></expr>)<pos:position pos:line="10" pos:column="37"/></condition><then pos:line="10" pos:column="37">
  <block pos:line="11" pos:column="3">{
    <expr_stmt><expr><operator pos:line="12" pos:column="5">*<pos:position pos:line="12" pos:column="6"/></operator><name pos:line="12" pos:column="6">pc<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">++<pos:position pos:line="12" pos:column="10"/></operator> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <literal type="number" pos:line="12" pos:column="13">0<pos:position pos:line="12" pos:column="14"/></literal></expr>;<pos:position pos:line="12" pos:column="15"/></expr_stmt>
    <while pos:line="13" pos:column="5">while <condition pos:line="13" pos:column="11">(<expr><operator pos:line="13" pos:column="12">*<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="13">pc<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">&amp;&amp;<pos:position pos:line="13" pos:column="26"/></operator> <call><name pos:line="13" pos:column="19">ISSPACE<pos:position pos:line="13" pos:column="26"/></name> <argument_list pos:line="13" pos:column="27">(<argument><expr><operator pos:line="13" pos:column="28">*<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="29">pc<pos:position pos:line="13" pos:column="31"/></name></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="33"/></condition>
      <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="7">pc<pos:position pos:line="14" pos:column="9"/></name><operator pos:line="14" pos:column="9">++<pos:position pos:line="14" pos:column="11"/></operator></expr>;<pos:position pos:line="14" pos:column="12"/></expr_stmt></block></while>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">ct<pos:position pos:line="15" pos:column="7"/></name><operator pos:line="15" pos:column="7">-&gt;<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="9">parameter<pos:position pos:line="15" pos:column="18"/></name></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <call><name pos:line="15" pos:column="21">parse_parameters<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">pc<pos:position pos:line="15" pos:column="40"/></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="42"/></expr_stmt>

    <comment type="block" pos:line="17" pos:column="5">/* Some pre-RFC1521 gateways still use the "name=filename" convention,
     * but if a filename has already been set in the content-disposition,
     * let that take precedence, and don't set it here */</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">(<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">pc<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <call><name pos:line="20" pos:column="15">mutt_get_parameter<pos:position pos:line="20" pos:column="33"/></name><argument_list pos:line="20" pos:column="33">( <argument><expr><literal type="string" pos:line="20" pos:column="35">"name"<pos:position pos:line="20" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="43">ct<pos:position pos:line="20" pos:column="45"/></name><operator pos:line="20" pos:column="45">-&gt;<pos:position pos:line="20" pos:column="50"/></operator><name pos:line="20" pos:column="47">parameter<pos:position pos:line="20" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="57"/></argument_list></call><operator pos:line="20" pos:column="57">)<pos:position pos:line="20" pos:column="58"/></operator> <operator pos:line="20" pos:column="59">&amp;&amp;<pos:position pos:line="20" pos:column="69"/></operator> <operator pos:line="20" pos:column="62">!<pos:position pos:line="20" pos:column="63"/></operator><name><name pos:line="20" pos:column="63">ct<pos:position pos:line="20" pos:column="65"/></name><operator pos:line="20" pos:column="65">-&gt;<pos:position pos:line="20" pos:column="70"/></operator><name pos:line="20" pos:column="67">filename<pos:position pos:line="20" pos:column="75"/></name></name></expr>)<pos:position pos:line="20" pos:column="76"/></condition><then pos:line="20" pos:column="76">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="21" pos:column="7">ct<pos:position pos:line="21" pos:column="9"/></name><operator pos:line="21" pos:column="9">-&gt;<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="11">filename<pos:position pos:line="21" pos:column="19"/></name></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <call><name pos:line="21" pos:column="22">safe_strdup<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">pc<pos:position pos:line="21" pos:column="36"/></name></expr></argument>)<pos:position pos:line="21" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt></block></then></if>
    
<cpp:ifdef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifdef<pos:position pos:line="23" pos:column="7"/></cpp:directive> <name pos:line="23" pos:column="8">SUN_ATTACHMENT<pos:position pos:line="23" pos:column="22"/></name></cpp:ifdef>
    <comment type="block" pos:line="24" pos:column="5">/* this is deep and utter perversion */</comment>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">(<pos:position pos:line="25" pos:column="10"/></operator><name pos:line="25" pos:column="10">pc<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">=<pos:position pos:line="25" pos:column="14"/></operator> <call><name pos:line="25" pos:column="15">mutt_get_parameter<pos:position pos:line="25" pos:column="33"/></name> <argument_list pos:line="25" pos:column="34">(<argument><expr><literal type="string" pos:line="25" pos:column="35">"conversions"<pos:position pos:line="25" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="50">ct<pos:position pos:line="25" pos:column="52"/></name><operator pos:line="25" pos:column="52">-&gt;<pos:position pos:line="25" pos:column="57"/></operator><name pos:line="25" pos:column="54">parameter<pos:position pos:line="25" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="64"/></argument_list></call><operator pos:line="25" pos:column="64">)<pos:position pos:line="25" pos:column="65"/></operator></expr>)<pos:position pos:line="25" pos:column="66"/></condition><then pos:line="25" pos:column="66">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="26" pos:column="7">ct<pos:position pos:line="26" pos:column="9"/></name><operator pos:line="26" pos:column="9">-&gt;<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="11">encoding<pos:position pos:line="26" pos:column="19"/></name></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <call><name pos:line="26" pos:column="22">mutt_check_encoding<pos:position pos:line="26" pos:column="41"/></name> <argument_list pos:line="26" pos:column="42">(<argument><expr><name pos:line="26" pos:column="43">pc<pos:position pos:line="26" pos:column="45"/></name></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="47"/></expr_stmt></block></then></if>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>
    
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>
  
  <comment type="block" pos:line="31" pos:column="3">/* Now get the subtype */</comment>
  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><operator pos:line="32" pos:column="7">(<pos:position pos:line="32" pos:column="8"/></operator><name pos:line="32" pos:column="8">subtype<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator> <call><name pos:line="32" pos:column="18">strchr<pos:position pos:line="32" pos:column="24"/></name><argument_list pos:line="32" pos:column="24">(<argument><expr><name pos:line="32" pos:column="25">s<pos:position pos:line="32" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="32" pos:column="28">'/'<pos:position pos:line="32" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="32"/></argument_list></call><operator pos:line="32" pos:column="32">)<pos:position pos:line="32" pos:column="33"/></operator></expr>)<pos:position pos:line="32" pos:column="34"/></condition><then pos:line="32" pos:column="34">
  <block pos:line="33" pos:column="3">{
    <expr_stmt><expr><operator pos:line="34" pos:column="5">*<pos:position pos:line="34" pos:column="6"/></operator><name pos:line="34" pos:column="6">subtype<pos:position pos:line="34" pos:column="13"/></name><operator pos:line="34" pos:column="13">++<pos:position pos:line="34" pos:column="15"/></operator> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <literal type="char" pos:line="34" pos:column="18">'\0'<pos:position pos:line="34" pos:column="22"/></literal></expr>;<pos:position pos:line="34" pos:column="23"/></expr_stmt>
    <for pos:line="35" pos:column="5">for<control pos:line="35" pos:column="8">(<init><expr><name pos:line="35" pos:column="9">pc<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <name pos:line="35" pos:column="14">subtype<pos:position pos:line="35" pos:column="21"/></name></expr>;<pos:position pos:line="35" pos:column="22"/></init> <condition><expr><operator pos:line="35" pos:column="23">*<pos:position pos:line="35" pos:column="24"/></operator><name pos:line="35" pos:column="24">pc<pos:position pos:line="35" pos:column="26"/></name> <operator pos:line="35" pos:column="27">&amp;&amp;<pos:position pos:line="35" pos:column="37"/></operator> <operator pos:line="35" pos:column="30">!<pos:position pos:line="35" pos:column="31"/></operator><call><name pos:line="35" pos:column="31">ISSPACE<pos:position pos:line="35" pos:column="38"/></name><argument_list pos:line="35" pos:column="38">(<argument><expr><operator pos:line="35" pos:column="39">*<pos:position pos:line="35" pos:column="40"/></operator><name pos:line="35" pos:column="40">pc<pos:position pos:line="35" pos:column="42"/></name></expr></argument>)<pos:position pos:line="35" pos:column="43"/></argument_list></call> <operator pos:line="35" pos:column="44">&amp;&amp;<pos:position pos:line="35" pos:column="54"/></operator> <operator pos:line="35" pos:column="47">*<pos:position pos:line="35" pos:column="48"/></operator><name pos:line="35" pos:column="48">pc<pos:position pos:line="35" pos:column="50"/></name> <operator pos:line="35" pos:column="51">!=<pos:position pos:line="35" pos:column="53"/></operator> <literal type="char" pos:line="35" pos:column="54">';'<pos:position pos:line="35" pos:column="57"/></literal></expr>;<pos:position pos:line="35" pos:column="58"/></condition> <incr><expr><name pos:line="35" pos:column="59">pc<pos:position pos:line="35" pos:column="61"/></name><operator pos:line="35" pos:column="61">++<pos:position pos:line="35" pos:column="63"/></operator></expr></incr>)<pos:position pos:line="35" pos:column="64"/></control>
      <block type="pseudo"><empty_stmt pos:line="36" pos:column="7">;<pos:position pos:line="36" pos:column="8"/></empty_stmt></block></for>
    <expr_stmt><expr><operator pos:line="37" pos:column="5">*<pos:position pos:line="37" pos:column="6"/></operator><name pos:line="37" pos:column="6">pc<pos:position pos:line="37" pos:column="8"/></name> <operator pos:line="37" pos:column="9">=<pos:position pos:line="37" pos:column="10"/></operator> <literal type="char" pos:line="37" pos:column="11">'\0'<pos:position pos:line="37" pos:column="15"/></literal></expr>;<pos:position pos:line="37" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="38" pos:column="5">ct<pos:position pos:line="38" pos:column="7"/></name><operator pos:line="38" pos:column="7">-&gt;<pos:position pos:line="38" pos:column="12"/></operator><name pos:line="38" pos:column="9">subtype<pos:position pos:line="38" pos:column="16"/></name></name> <operator pos:line="38" pos:column="17">=<pos:position pos:line="38" pos:column="18"/></operator> <call><name pos:line="38" pos:column="19">safe_strdup<pos:position pos:line="38" pos:column="30"/></name> <argument_list pos:line="38" pos:column="31">(<argument><expr><name pos:line="38" pos:column="32">subtype<pos:position pos:line="38" pos:column="39"/></name></expr></argument>)<pos:position pos:line="38" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="39" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="41" pos:column="3">/* Finally, get the major type */</comment>
  <expr_stmt><expr><name><name pos:line="42" pos:column="3">ct<pos:position pos:line="42" pos:column="5"/></name><operator pos:line="42" pos:column="5">-&gt;<pos:position pos:line="42" pos:column="10"/></operator><name pos:line="42" pos:column="7">type<pos:position pos:line="42" pos:column="11"/></name></name> <operator pos:line="42" pos:column="12">=<pos:position pos:line="42" pos:column="13"/></operator> <call><name pos:line="42" pos:column="14">mutt_check_mime_type<pos:position pos:line="42" pos:column="34"/></name> <argument_list pos:line="42" pos:column="35">(<argument><expr><name pos:line="42" pos:column="36">s<pos:position pos:line="42" pos:column="37"/></name></expr></argument>)<pos:position pos:line="42" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="39"/></expr_stmt>

<cpp:ifdef pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">ifdef<pos:position pos:line="44" pos:column="7"/></cpp:directive> <name pos:line="44" pos:column="8">SUN_ATTACHMENT<pos:position pos:line="44" pos:column="22"/></name></cpp:ifdef>
  <if pos:line="45" pos:column="3">if <condition pos:line="45" pos:column="6">(<expr><call><name pos:line="45" pos:column="7">ascii_strcasecmp<pos:position pos:line="45" pos:column="23"/></name> <argument_list pos:line="45" pos:column="24">(<argument><expr><literal type="string" pos:line="45" pos:column="25">"x-sun-attachment"<pos:position pos:line="45" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="45">s<pos:position pos:line="45" pos:column="46"/></name></expr></argument>)<pos:position pos:line="45" pos:column="47"/></argument_list></call> <operator pos:line="45" pos:column="48">==<pos:position pos:line="45" pos:column="50"/></operator> <literal type="number" pos:line="45" pos:column="51">0<pos:position pos:line="45" pos:column="52"/></literal></expr>)<pos:position pos:line="45" pos:column="53"/></condition><then pos:line="45" pos:column="53">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="46" pos:column="7">ct<pos:position pos:line="46" pos:column="9"/></name><operator pos:line="46" pos:column="9">-&gt;<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="11">subtype<pos:position pos:line="46" pos:column="18"/></name></name> <operator pos:line="46" pos:column="19">=<pos:position pos:line="46" pos:column="20"/></operator> <call><name pos:line="46" pos:column="21">safe_strdup<pos:position pos:line="46" pos:column="32"/></name> <argument_list pos:line="46" pos:column="33">(<argument><expr><literal type="string" pos:line="46" pos:column="34">"x-sun-attachment"<pos:position pos:line="46" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="54"/></expr_stmt></block></then></if>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="49" pos:column="3">if <condition pos:line="49" pos:column="6">(<expr><name><name pos:line="49" pos:column="7">ct<pos:position pos:line="49" pos:column="9"/></name><operator pos:line="49" pos:column="9">-&gt;<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="11">type<pos:position pos:line="49" pos:column="15"/></name></name> <operator pos:line="49" pos:column="16">==<pos:position pos:line="49" pos:column="18"/></operator> <name pos:line="49" pos:column="19">TYPEOTHER<pos:position pos:line="49" pos:column="28"/></name></expr>)<pos:position pos:line="49" pos:column="29"/></condition><then pos:line="49" pos:column="29">
  <block pos:line="50" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="51" pos:column="5">ct<pos:position pos:line="51" pos:column="7"/></name><operator pos:line="51" pos:column="7">-&gt;<pos:position pos:line="51" pos:column="12"/></operator><name pos:line="51" pos:column="9">xtype<pos:position pos:line="51" pos:column="14"/></name></name> <operator pos:line="51" pos:column="15">=<pos:position pos:line="51" pos:column="16"/></operator> <call><name pos:line="51" pos:column="17">safe_strdup<pos:position pos:line="51" pos:column="28"/></name> <argument_list pos:line="51" pos:column="29">(<argument><expr><name pos:line="51" pos:column="30">s<pos:position pos:line="51" pos:column="31"/></name></expr></argument>)<pos:position pos:line="51" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="52" pos:column="4"/></block></then></if>

  <if pos:line="54" pos:column="3">if <condition pos:line="54" pos:column="6">(<expr><name><name pos:line="54" pos:column="7">ct<pos:position pos:line="54" pos:column="9"/></name><operator pos:line="54" pos:column="9">-&gt;<pos:position pos:line="54" pos:column="14"/></operator><name pos:line="54" pos:column="11">subtype<pos:position pos:line="54" pos:column="18"/></name></name> <operator pos:line="54" pos:column="19">==<pos:position pos:line="54" pos:column="21"/></operator> <name pos:line="54" pos:column="22">NULL<pos:position pos:line="54" pos:column="26"/></name></expr>)<pos:position pos:line="54" pos:column="27"/></condition><then pos:line="54" pos:column="27">
  <block pos:line="55" pos:column="3">{
    <comment type="block" pos:line="56" pos:column="5">/* Some older non-MIME mailers (i.e., mailtool, elm) have a content-type
     * field, so we can attempt to convert the type to BODY here.
     */</comment>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name><name pos:line="59" pos:column="9">ct<pos:position pos:line="59" pos:column="11"/></name><operator pos:line="59" pos:column="11">-&gt;<pos:position pos:line="59" pos:column="16"/></operator><name pos:line="59" pos:column="13">type<pos:position pos:line="59" pos:column="17"/></name></name> <operator pos:line="59" pos:column="18">==<pos:position pos:line="59" pos:column="20"/></operator> <name pos:line="59" pos:column="21">TYPETEXT<pos:position pos:line="59" pos:column="29"/></name></expr>)<pos:position pos:line="59" pos:column="30"/></condition><then pos:line="59" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="60" pos:column="7">ct<pos:position pos:line="60" pos:column="9"/></name><operator pos:line="60" pos:column="9">-&gt;<pos:position pos:line="60" pos:column="14"/></operator><name pos:line="60" pos:column="11">subtype<pos:position pos:line="60" pos:column="18"/></name></name> <operator pos:line="60" pos:column="19">=<pos:position pos:line="60" pos:column="20"/></operator> <call><name pos:line="60" pos:column="21">safe_strdup<pos:position pos:line="60" pos:column="32"/></name> <argument_list pos:line="60" pos:column="33">(<argument><expr><literal type="string" pos:line="60" pos:column="34">"plain"<pos:position pos:line="60" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="43"/></expr_stmt></block></then>
    <elseif pos:line="61" pos:column="5">else <if pos:line="61" pos:column="10">if <condition pos:line="61" pos:column="13">(<expr><name><name pos:line="61" pos:column="14">ct<pos:position pos:line="61" pos:column="16"/></name><operator pos:line="61" pos:column="16">-&gt;<pos:position pos:line="61" pos:column="21"/></operator><name pos:line="61" pos:column="18">type<pos:position pos:line="61" pos:column="22"/></name></name> <operator pos:line="61" pos:column="23">==<pos:position pos:line="61" pos:column="25"/></operator> <name pos:line="61" pos:column="26">TYPEAUDIO<pos:position pos:line="61" pos:column="35"/></name></expr>)<pos:position pos:line="61" pos:column="36"/></condition><then pos:line="61" pos:column="36">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="62" pos:column="7">ct<pos:position pos:line="62" pos:column="9"/></name><operator pos:line="62" pos:column="9">-&gt;<pos:position pos:line="62" pos:column="14"/></operator><name pos:line="62" pos:column="11">subtype<pos:position pos:line="62" pos:column="18"/></name></name> <operator pos:line="62" pos:column="19">=<pos:position pos:line="62" pos:column="20"/></operator> <call><name pos:line="62" pos:column="21">safe_strdup<pos:position pos:line="62" pos:column="32"/></name> <argument_list pos:line="62" pos:column="33">(<argument><expr><literal type="string" pos:line="62" pos:column="34">"basic"<pos:position pos:line="62" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="43"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="63" pos:column="5">else <if pos:line="63" pos:column="10">if <condition pos:line="63" pos:column="13">(<expr><name><name pos:line="63" pos:column="14">ct<pos:position pos:line="63" pos:column="16"/></name><operator pos:line="63" pos:column="16">-&gt;<pos:position pos:line="63" pos:column="21"/></operator><name pos:line="63" pos:column="18">type<pos:position pos:line="63" pos:column="22"/></name></name> <operator pos:line="63" pos:column="23">==<pos:position pos:line="63" pos:column="25"/></operator> <name pos:line="63" pos:column="26">TYPEMESSAGE<pos:position pos:line="63" pos:column="37"/></name></expr>)<pos:position pos:line="63" pos:column="38"/></condition><then pos:line="63" pos:column="38">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="64" pos:column="7">ct<pos:position pos:line="64" pos:column="9"/></name><operator pos:line="64" pos:column="9">-&gt;<pos:position pos:line="64" pos:column="14"/></operator><name pos:line="64" pos:column="11">subtype<pos:position pos:line="64" pos:column="18"/></name></name> <operator pos:line="64" pos:column="19">=<pos:position pos:line="64" pos:column="20"/></operator> <call><name pos:line="64" pos:column="21">safe_strdup<pos:position pos:line="64" pos:column="32"/></name> <argument_list pos:line="64" pos:column="33">(<argument><expr><literal type="string" pos:line="64" pos:column="34">"rfc822"<pos:position pos:line="64" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="44"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="65" pos:column="5">else <if pos:line="65" pos:column="10">if <condition pos:line="65" pos:column="13">(<expr><name><name pos:line="65" pos:column="14">ct<pos:position pos:line="65" pos:column="16"/></name><operator pos:line="65" pos:column="16">-&gt;<pos:position pos:line="65" pos:column="21"/></operator><name pos:line="65" pos:column="18">type<pos:position pos:line="65" pos:column="22"/></name></name> <operator pos:line="65" pos:column="23">==<pos:position pos:line="65" pos:column="25"/></operator> <name pos:line="65" pos:column="26">TYPEOTHER<pos:position pos:line="65" pos:column="35"/></name></expr>)<pos:position pos:line="65" pos:column="36"/></condition><then pos:line="65" pos:column="36">
    <block pos:line="66" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="67" pos:column="7">char<pos:position pos:line="67" pos:column="11"/></name></type> <name><name pos:line="67" pos:column="12">buffer<pos:position pos:line="67" pos:column="18"/></name><index pos:line="67" pos:column="18">[<expr><name pos:line="67" pos:column="19">SHORT_STRING<pos:position pos:line="67" pos:column="31"/></name></expr>]<pos:position pos:line="67" pos:column="32"/></index></name></decl>;<pos:position pos:line="67" pos:column="33"/></decl_stmt>

      <expr_stmt><expr><name><name pos:line="69" pos:column="7">ct<pos:position pos:line="69" pos:column="9"/></name><operator pos:line="69" pos:column="9">-&gt;<pos:position pos:line="69" pos:column="14"/></operator><name pos:line="69" pos:column="11">type<pos:position pos:line="69" pos:column="15"/></name></name> <operator pos:line="69" pos:column="16">=<pos:position pos:line="69" pos:column="17"/></operator> <name pos:line="69" pos:column="18">TYPEAPPLICATION<pos:position pos:line="69" pos:column="33"/></name></expr>;<pos:position pos:line="69" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="70" pos:column="7">snprintf<pos:position pos:line="70" pos:column="15"/></name> <argument_list pos:line="70" pos:column="16">(<argument><expr><name pos:line="70" pos:column="17">buffer<pos:position pos:line="70" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="70" pos:column="25">sizeof <argument_list pos:line="70" pos:column="32">(<argument><expr><name pos:line="70" pos:column="33">buffer<pos:position pos:line="70" pos:column="39"/></name></expr></argument>)<pos:position pos:line="70" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="42">"x-%s"<pos:position pos:line="70" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="50">s<pos:position pos:line="70" pos:column="51"/></name></expr></argument>)<pos:position pos:line="70" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="53"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="71" pos:column="7">ct<pos:position pos:line="71" pos:column="9"/></name><operator pos:line="71" pos:column="9">-&gt;<pos:position pos:line="71" pos:column="14"/></operator><name pos:line="71" pos:column="11">subtype<pos:position pos:line="71" pos:column="18"/></name></name> <operator pos:line="71" pos:column="19">=<pos:position pos:line="71" pos:column="20"/></operator> <call><name pos:line="71" pos:column="21">safe_strdup<pos:position pos:line="71" pos:column="32"/></name> <argument_list pos:line="71" pos:column="33">(<argument><expr><name pos:line="71" pos:column="34">buffer<pos:position pos:line="71" pos:column="40"/></name></expr></argument>)<pos:position pos:line="71" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="72" pos:column="6"/></block></then></if></elseif>
    <else pos:line="73" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="74" pos:column="7">ct<pos:position pos:line="74" pos:column="9"/></name><operator pos:line="74" pos:column="9">-&gt;<pos:position pos:line="74" pos:column="14"/></operator><name pos:line="74" pos:column="11">subtype<pos:position pos:line="74" pos:column="18"/></name></name> <operator pos:line="74" pos:column="19">=<pos:position pos:line="74" pos:column="20"/></operator> <call><name pos:line="74" pos:column="21">safe_strdup<pos:position pos:line="74" pos:column="32"/></name> <argument_list pos:line="74" pos:column="33">(<argument><expr><literal type="string" pos:line="74" pos:column="34">"x-unknown"<pos:position pos:line="74" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="47"/></expr_stmt></block></else></if>
  }<pos:position pos:line="75" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="77" pos:column="3">/* Default character set for text types. */</comment>
  <if pos:line="78" pos:column="3">if <condition pos:line="78" pos:column="6">(<expr><name><name pos:line="78" pos:column="7">ct<pos:position pos:line="78" pos:column="9"/></name><operator pos:line="78" pos:column="9">-&gt;<pos:position pos:line="78" pos:column="14"/></operator><name pos:line="78" pos:column="11">type<pos:position pos:line="78" pos:column="15"/></name></name> <operator pos:line="78" pos:column="16">==<pos:position pos:line="78" pos:column="18"/></operator> <name pos:line="78" pos:column="19">TYPETEXT<pos:position pos:line="78" pos:column="27"/></name></expr>)<pos:position pos:line="78" pos:column="28"/></condition><then pos:line="78" pos:column="28">
  <block pos:line="79" pos:column="3">{
    <if pos:line="80" pos:column="5">if <condition pos:line="80" pos:column="8">(<expr><operator pos:line="80" pos:column="9">!<pos:position pos:line="80" pos:column="10"/></operator><operator pos:line="80" pos:column="10">(<pos:position pos:line="80" pos:column="11"/></operator><name pos:line="80" pos:column="11">pc<pos:position pos:line="80" pos:column="13"/></name> <operator pos:line="80" pos:column="14">=<pos:position pos:line="80" pos:column="15"/></operator> <call><name pos:line="80" pos:column="16">mutt_get_parameter<pos:position pos:line="80" pos:column="34"/></name> <argument_list pos:line="80" pos:column="35">(<argument><expr><literal type="string" pos:line="80" pos:column="36">"charset"<pos:position pos:line="80" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="47">ct<pos:position pos:line="80" pos:column="49"/></name><operator pos:line="80" pos:column="49">-&gt;<pos:position pos:line="80" pos:column="54"/></operator><name pos:line="80" pos:column="51">parameter<pos:position pos:line="80" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="61"/></argument_list></call><operator pos:line="80" pos:column="61">)<pos:position pos:line="80" pos:column="62"/></operator></expr>)<pos:position pos:line="80" pos:column="63"/></condition><then pos:line="80" pos:column="63">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="81" pos:column="7">mutt_set_parameter<pos:position pos:line="81" pos:column="25"/></name> <argument_list pos:line="81" pos:column="26">(<argument><expr><literal type="string" pos:line="81" pos:column="27">"charset"<pos:position pos:line="81" pos:column="36"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="81" pos:column="38">(<pos:position pos:line="81" pos:column="39"/></operator><name pos:line="81" pos:column="39">AssumedCharset<pos:position pos:line="81" pos:column="53"/></name> <operator pos:line="81" pos:column="54">&amp;&amp;<pos:position pos:line="81" pos:column="64"/></operator> <operator pos:line="81" pos:column="57">*<pos:position pos:line="81" pos:column="58"/></operator><name pos:line="81" pos:column="58">AssumedCharset<pos:position pos:line="81" pos:column="72"/></name><operator pos:line="81" pos:column="72">)<pos:position pos:line="81" pos:column="73"/></operator></expr> ?<pos:position pos:line="81" pos:column="75"/></condition><then pos:line="81" pos:column="75">
                         <expr><operator pos:line="82" pos:column="26">(<pos:position pos:line="82" pos:column="27"/></operator><specifier pos:line="82" pos:column="27">const<pos:position pos:line="82" pos:column="32"/></specifier> <name pos:line="82" pos:column="33">char<pos:position pos:line="82" pos:column="37"/></name> <operator pos:line="82" pos:column="38">*<pos:position pos:line="82" pos:column="39"/></operator><operator pos:line="82" pos:column="39">)<pos:position pos:line="82" pos:column="40"/></operator> <call><name pos:line="82" pos:column="41">mutt_get_default_charset<pos:position pos:line="82" pos:column="65"/></name> <argument_list pos:line="82" pos:column="66">()<pos:position pos:line="82" pos:column="68"/></argument_list></call></expr>
                         <pos:position pos:line="83" pos:column="26"/></then><else pos:line="83" pos:column="26">: <expr><literal type="string" pos:line="83" pos:column="28">"us-ascii"<pos:position pos:line="83" pos:column="38"/></literal></expr></else></ternary></expr></argument>, <argument><expr><operator pos:line="83" pos:column="40">&amp;<pos:position pos:line="83" pos:column="45"/></operator><name><name pos:line="83" pos:column="41">ct<pos:position pos:line="83" pos:column="43"/></name><operator pos:line="83" pos:column="43">-&gt;<pos:position pos:line="83" pos:column="48"/></operator><name pos:line="83" pos:column="45">parameter<pos:position pos:line="83" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="56"/></expr_stmt></block></then></if>
  }<pos:position pos:line="84" pos:column="4"/></block></then></if>

}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
