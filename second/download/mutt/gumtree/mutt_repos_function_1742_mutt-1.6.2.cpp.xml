<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1742_mutt-1.6.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">getdnsdomainname<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">d<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">size_t<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">len<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* A DNS name can actually be only 253 octets, string is 256 */</comment>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">node<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">long<pos:position pos:line="5" pos:column="7"/></name></type> <name pos:line="5" pos:column="8">node_len<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">addrinfo<pos:position pos:line="6" pos:column="18"/></name></name></type> <name pos:line="6" pos:column="19">hints<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">addrinfo<pos:position pos:line="7" pos:column="18"/></name></name> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type><name pos:line="7" pos:column="20">h<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">p<pos:position pos:line="8" pos:column="10"/></name></decl>;<pos:position pos:line="8" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">ret<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="11" pos:column="3">*<pos:position pos:line="11" pos:column="4"/></operator><name pos:line="11" pos:column="4">d<pos:position pos:line="11" pos:column="5"/></name> <operator pos:line="11" pos:column="6">=<pos:position pos:line="11" pos:column="7"/></operator> <literal type="char" pos:line="11" pos:column="8">'\0'<pos:position pos:line="11" pos:column="12"/></literal></expr>;<pos:position pos:line="11" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">memset<pos:position pos:line="12" pos:column="9"/></name><argument_list pos:line="12" pos:column="9">(<argument><expr><operator pos:line="12" pos:column="10">&amp;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="11">hints<pos:position pos:line="12" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="21">sizeof <argument_list pos:line="12" pos:column="28">(<argument><expr pos:line="12" pos:column="29">struct <name pos:line="12" pos:column="36">addrinfo<pos:position pos:line="12" pos:column="44"/></name></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="13" pos:column="3">hints<pos:position pos:line="13" pos:column="8"/></name><operator pos:line="13" pos:column="8">.<pos:position pos:line="13" pos:column="9"/></operator><name pos:line="13" pos:column="9">ai_flags<pos:position pos:line="13" pos:column="17"/></name></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <name pos:line="13" pos:column="20">AI_CANONNAME<pos:position pos:line="13" pos:column="32"/></name></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="14" pos:column="3">hints<pos:position pos:line="14" pos:column="8"/></name><operator pos:line="14" pos:column="8">.<pos:position pos:line="14" pos:column="9"/></operator><name pos:line="14" pos:column="9">ai_family<pos:position pos:line="14" pos:column="18"/></name></name> <operator pos:line="14" pos:column="19">=<pos:position pos:line="14" pos:column="20"/></operator> <name pos:line="14" pos:column="21">AF_UNSPEC<pos:position pos:line="14" pos:column="30"/></name></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt>

  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><operator pos:line="16" pos:column="7">(<pos:position pos:line="16" pos:column="8"/></operator><name pos:line="16" pos:column="8">node_len<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <call><name pos:line="16" pos:column="19">sysconf<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">_SC_HOST_NAME_MAX<pos:position pos:line="16" pos:column="44"/></name></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></call><operator pos:line="16" pos:column="45">)<pos:position pos:line="16" pos:column="46"/></operator> <operator pos:line="16" pos:column="47">==<pos:position pos:line="16" pos:column="49"/></operator> <operator pos:line="16" pos:column="50">-<pos:position pos:line="16" pos:column="51"/></operator><literal type="number" pos:line="16" pos:column="51">1<pos:position pos:line="16" pos:column="52"/></literal></expr>)<pos:position pos:line="16" pos:column="53"/></condition><then pos:line="16" pos:column="53">
    <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="5">node_len<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <name pos:line="17" pos:column="16">STRING<pos:position pos:line="17" pos:column="22"/></name></expr>;<pos:position pos:line="17" pos:column="23"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name pos:line="18" pos:column="3">node<pos:position pos:line="18" pos:column="7"/></name> <operator pos:line="18" pos:column="8">=<pos:position pos:line="18" pos:column="9"/></operator> <call><name pos:line="18" pos:column="10">safe_malloc<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><name pos:line="18" pos:column="22">node_len<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">+<pos:position pos:line="18" pos:column="32"/></operator> <literal type="number" pos:line="18" pos:column="33">1<pos:position pos:line="18" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><call><name pos:line="19" pos:column="7">gethostname<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><name pos:line="19" pos:column="19">node<pos:position pos:line="19" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="25">node_len<pos:position pos:line="19" pos:column="33"/></name></expr></argument>)<pos:position pos:line="19" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="35"/></condition><then pos:line="19" pos:column="35">
    <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="5">ret<pos:position pos:line="20" pos:column="8"/></name> <operator pos:line="20" pos:column="9">=<pos:position pos:line="20" pos:column="10"/></operator> <operator pos:line="20" pos:column="11">-<pos:position pos:line="20" pos:column="12"/></operator><literal type="number" pos:line="20" pos:column="12">1<pos:position pos:line="20" pos:column="13"/></literal></expr>;<pos:position pos:line="20" pos:column="14"/></expr_stmt></block></then>
  <elseif pos:line="21" pos:column="3">else <if pos:line="21" pos:column="8">if <condition pos:line="21" pos:column="11">(<expr><call><name pos:line="21" pos:column="12">getaddrinfo<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">node<pos:position pos:line="21" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="30">NULL<pos:position pos:line="21" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="36">&amp;<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="37">hints<pos:position pos:line="21" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="44">&amp;<pos:position pos:line="21" pos:column="49"/></operator><name pos:line="21" pos:column="45">h<pos:position pos:line="21" pos:column="46"/></name></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="48"/></condition><then pos:line="21" pos:column="48">
    <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="5">ret<pos:position pos:line="22" pos:column="8"/></name> <operator pos:line="22" pos:column="9">=<pos:position pos:line="22" pos:column="10"/></operator> <operator pos:line="22" pos:column="11">-<pos:position pos:line="22" pos:column="12"/></operator><literal type="number" pos:line="22" pos:column="12">1<pos:position pos:line="22" pos:column="13"/></literal></expr>;<pos:position pos:line="22" pos:column="14"/></expr_stmt></block></then></if></elseif>
  <else pos:line="23" pos:column="3">else
  <block pos:line="24" pos:column="3">{
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">!<pos:position pos:line="25" pos:column="10"/></operator><operator pos:line="25" pos:column="10">(<pos:position pos:line="25" pos:column="11"/></operator><name pos:line="25" pos:column="11">p<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">=<pos:position pos:line="25" pos:column="14"/></operator> <call><name pos:line="25" pos:column="15">strchr<pos:position pos:line="25" pos:column="21"/></name><argument_list pos:line="25" pos:column="21">(<argument><expr><name><name pos:line="25" pos:column="22">h<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">-&gt;<pos:position pos:line="25" pos:column="28"/></operator><name pos:line="25" pos:column="25">ai_canonname<pos:position pos:line="25" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="25" pos:column="39">'.'<pos:position pos:line="25" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="43"/></argument_list></call><operator pos:line="25" pos:column="43">)<pos:position pos:line="25" pos:column="44"/></operator></expr>)<pos:position pos:line="25" pos:column="45"/></condition><then pos:line="25" pos:column="45">
      <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="7">ret<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">=<pos:position pos:line="26" pos:column="12"/></operator> <operator pos:line="26" pos:column="13">-<pos:position pos:line="26" pos:column="14"/></operator><literal type="number" pos:line="26" pos:column="14">1<pos:position pos:line="26" pos:column="15"/></literal></expr>;<pos:position pos:line="26" pos:column="16"/></expr_stmt></block></then>
    <else pos:line="27" pos:column="5">else
    <block pos:line="28" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">strfcpy<pos:position pos:line="29" pos:column="14"/></name><argument_list pos:line="29" pos:column="14">(<argument><expr><name pos:line="29" pos:column="15">d<pos:position pos:line="29" pos:column="16"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="18">++<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="20">p<pos:position pos:line="29" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="23">len<pos:position pos:line="29" pos:column="26"/></name></expr></argument>)<pos:position pos:line="29" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name pos:line="30" pos:column="7">ret<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">=<pos:position pos:line="30" pos:column="12"/></operator> <literal type="number" pos:line="30" pos:column="13">0<pos:position pos:line="30" pos:column="14"/></literal></expr>;<pos:position pos:line="30" pos:column="15"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="31" pos:column="7">dprint<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><literal type="number" pos:line="31" pos:column="14">1<pos:position pos:line="31" pos:column="15"/></literal></expr></argument>, <argument><expr><operator pos:line="31" pos:column="17">(<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="18">debugfile<pos:position pos:line="31" pos:column="27"/></name><operator pos:line="31" pos:column="27">,<pos:position pos:line="31" pos:column="28"/></operator> <literal type="string" pos:line="31" pos:column="29">"getdnsdomainname(): %s\n"<pos:position pos:line="31" pos:column="55"/></literal><operator pos:line="31" pos:column="55">,<pos:position pos:line="31" pos:column="56"/></operator> <name pos:line="31" pos:column="57">d<pos:position pos:line="31" pos:column="58"/></name><operator pos:line="31" pos:column="58">)<pos:position pos:line="31" pos:column="59"/></operator></expr></argument>)<pos:position pos:line="31" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">freeaddrinfo<pos:position pos:line="33" pos:column="17"/></name><argument_list pos:line="33" pos:column="17">(<argument><expr><name pos:line="33" pos:column="18">h<pos:position pos:line="33" pos:column="19"/></name></expr></argument>)<pos:position pos:line="33" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="35" pos:column="3">FREE<pos:position pos:line="35" pos:column="7"/></name> <argument_list pos:line="35" pos:column="8">(<argument><expr><operator pos:line="35" pos:column="9">&amp;<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="10">node<pos:position pos:line="35" pos:column="14"/></name></expr></argument>)<pos:position pos:line="35" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="16"/></expr_stmt>
  <return pos:line="36" pos:column="3">return <expr><name pos:line="36" pos:column="10">ret<pos:position pos:line="36" pos:column="13"/></name></expr>;<pos:position pos:line="36" pos:column="14"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
