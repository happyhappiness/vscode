<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1773_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_unattach_list<pos:position pos:line="1" pos:column="31"/></name> <parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">BUFFER<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">buf<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">BUFFER<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">s<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">LIST<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier><modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">ldata<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="71">BUFFER<pos:position pos:line="1" pos:column="77"/></name> <modifier pos:line="1" pos:column="78">*<pos:position pos:line="1" pos:column="79"/></modifier></type><name pos:line="1" pos:column="79">err<pos:position pos:line="1" pos:column="82"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="83"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">ATTACH_MATCH<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">a<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">LIST<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">lp<pos:position pos:line="4" pos:column="11"/></name></decl>, <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="14">lastp<pos:position pos:line="4" pos:column="19"/></name></decl>, <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="22">newlp<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">tmp<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">major<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">minor<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>

  <do pos:line="9" pos:column="3">do
  <block pos:line="10" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">mutt_extract_token<pos:position pos:line="11" pos:column="23"/></name> <argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">buf<pos:position pos:line="11" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="30">s<pos:position pos:line="11" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="33">0<pos:position pos:line="11" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><call><name pos:line="13" pos:column="10">ascii_strcasecmp<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><name><name pos:line="13" pos:column="27">buf<pos:position pos:line="13" pos:column="30"/></name><operator pos:line="13" pos:column="30">-&gt;<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="32">data<pos:position pos:line="13" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="38">"any"<pos:position pos:line="13" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="45"/></condition><then pos:line="13" pos:column="45">
      <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="7">tmp<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <call><name pos:line="14" pos:column="13">safe_strdup<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><literal type="string" pos:line="14" pos:column="25">"*/.*"<pos:position pos:line="14" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt></block></then>
    <elseif pos:line="15" pos:column="5">else <if pos:line="15" pos:column="10">if <condition pos:line="15" pos:column="13">(<expr><operator pos:line="15" pos:column="14">!<pos:position pos:line="15" pos:column="15"/></operator><call><name pos:line="15" pos:column="15">ascii_strcasecmp<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><name><name pos:line="15" pos:column="32">buf<pos:position pos:line="15" pos:column="35"/></name><operator pos:line="15" pos:column="35">-&gt;<pos:position pos:line="15" pos:column="40"/></operator><name pos:line="15" pos:column="37">data<pos:position pos:line="15" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="43">"none"<pos:position pos:line="15" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="51"/></condition><then pos:line="15" pos:column="51">
      <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="7">tmp<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <call><name pos:line="16" pos:column="13">safe_strdup<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><literal type="string" pos:line="16" pos:column="25">"cheap_hack/this_should_never_match"<pos:position pos:line="16" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="63"/></expr_stmt></block></then></if></elseif>
    <else pos:line="17" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="7">tmp<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <call><name pos:line="18" pos:column="13">safe_strdup<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name><name pos:line="18" pos:column="25">buf<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">-&gt;<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="30">data<pos:position pos:line="18" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt></block></else></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">(<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">minor<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <call><name pos:line="20" pos:column="18">strchr<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">tmp<pos:position pos:line="20" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="20" pos:column="30">'/'<pos:position pos:line="20" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="34"/></argument_list></call><operator pos:line="20" pos:column="34">)<pos:position pos:line="20" pos:column="35"/></operator></expr>)<pos:position pos:line="20" pos:column="36"/></condition><then pos:line="20" pos:column="36">
    <block pos:line="21" pos:column="5">{
      <expr_stmt><expr><operator pos:line="22" pos:column="7">*<pos:position pos:line="22" pos:column="8"/></operator><name pos:line="22" pos:column="8">minor<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">=<pos:position pos:line="22" pos:column="15"/></operator> <literal type="char" pos:line="22" pos:column="16">'\0'<pos:position pos:line="22" pos:column="20"/></literal></expr>;<pos:position pos:line="22" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="23" pos:column="7">++<pos:position pos:line="23" pos:column="9"/></operator><name pos:line="23" pos:column="9">minor<pos:position pos:line="23" pos:column="14"/></name></expr>;<pos:position pos:line="23" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then>
    <else pos:line="25" pos:column="5">else
    <block pos:line="26" pos:column="5">{
      <expr_stmt><expr><name pos:line="27" pos:column="7">minor<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <literal type="string" pos:line="27" pos:column="15">"unknown"<pos:position pos:line="27" pos:column="24"/></literal></expr>;<pos:position pos:line="27" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="29" pos:column="5">major<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">=<pos:position pos:line="29" pos:column="12"/></operator> <call><name pos:line="29" pos:column="13">mutt_check_mime_type<pos:position pos:line="29" pos:column="33"/></name><argument_list pos:line="29" pos:column="33">(<argument><expr><name pos:line="29" pos:column="34">tmp<pos:position pos:line="29" pos:column="37"/></name></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt>

    <comment type="block" pos:line="31" pos:column="5">/* We must do our own walk here because remove_from_list() will only
     * remove the LIST-&gt;data, not anything pointed to by the LIST-&gt;data. */</comment>
    <expr_stmt><expr><name pos:line="33" pos:column="5">lastp<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">=<pos:position pos:line="33" pos:column="12"/></operator> <name pos:line="33" pos:column="13">NULL<pos:position pos:line="33" pos:column="17"/></name></expr>;<pos:position pos:line="33" pos:column="18"/></expr_stmt>
    <for pos:line="34" pos:column="5">for<control pos:line="34" pos:column="8">(<init><expr><name pos:line="34" pos:column="9">lp<pos:position pos:line="34" pos:column="11"/></name> <operator pos:line="34" pos:column="12">=<pos:position pos:line="34" pos:column="13"/></operator> <operator pos:line="34" pos:column="14">*<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="15">ldata<pos:position pos:line="34" pos:column="20"/></name></expr>;<pos:position pos:line="34" pos:column="21"/></init> <condition><expr><name pos:line="34" pos:column="22">lp<pos:position pos:line="34" pos:column="24"/></name></expr>;<pos:position pos:line="34" pos:column="25"/></condition> <incr/>)<pos:position pos:line="34" pos:column="27"/></control>
    <block pos:line="35" pos:column="5">{
      <expr_stmt><expr><name pos:line="36" pos:column="7">a<pos:position pos:line="36" pos:column="8"/></name> <operator pos:line="36" pos:column="9">=<pos:position pos:line="36" pos:column="10"/></operator> <operator pos:line="36" pos:column="11">(<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="12">ATTACH_MATCH<pos:position pos:line="36" pos:column="24"/></name> <operator pos:line="36" pos:column="25">*<pos:position pos:line="36" pos:column="26"/></operator><operator pos:line="36" pos:column="26">)<pos:position pos:line="36" pos:column="27"/></operator><name><name pos:line="36" pos:column="27">lp<pos:position pos:line="36" pos:column="29"/></name><operator pos:line="36" pos:column="29">-&gt;<pos:position pos:line="36" pos:column="34"/></operator><name pos:line="36" pos:column="31">data<pos:position pos:line="36" pos:column="35"/></name></name></expr>;<pos:position pos:line="36" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="37" pos:column="7">dprint<pos:position pos:line="37" pos:column="13"/></name><argument_list pos:line="37" pos:column="13">(<argument><expr><literal type="number" pos:line="37" pos:column="14">5<pos:position pos:line="37" pos:column="15"/></literal></expr></argument>, <argument><expr><operator pos:line="37" pos:column="17">(<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="18">debugfile<pos:position pos:line="37" pos:column="27"/></name><operator pos:line="37" pos:column="27">,<pos:position pos:line="37" pos:column="28"/></operator> <literal type="string" pos:line="37" pos:column="29">"parse_unattach_list: check %s/%s [%d] : %s/%s [%d]\n"<pos:position pos:line="37" pos:column="83"/></literal><operator pos:line="37" pos:column="83">,<pos:position pos:line="37" pos:column="84"/></operator>
		  <name><name pos:line="38" pos:column="19">a<pos:position pos:line="38" pos:column="20"/></name><operator pos:line="38" pos:column="20">-&gt;<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="22">major<pos:position pos:line="38" pos:column="27"/></name></name><operator pos:line="38" pos:column="27">,<pos:position pos:line="38" pos:column="28"/></operator> <name><name pos:line="38" pos:column="29">a<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">-&gt;<pos:position pos:line="38" pos:column="35"/></operator><name pos:line="38" pos:column="32">minor<pos:position pos:line="38" pos:column="37"/></name></name><operator pos:line="38" pos:column="37">,<pos:position pos:line="38" pos:column="38"/></operator> <name><name pos:line="38" pos:column="39">a<pos:position pos:line="38" pos:column="40"/></name><operator pos:line="38" pos:column="40">-&gt;<pos:position pos:line="38" pos:column="45"/></operator><name pos:line="38" pos:column="42">major_int<pos:position pos:line="38" pos:column="51"/></name></name><operator pos:line="38" pos:column="51">,<pos:position pos:line="38" pos:column="52"/></operator> <name pos:line="38" pos:column="53">tmp<pos:position pos:line="38" pos:column="56"/></name><operator pos:line="38" pos:column="56">,<pos:position pos:line="38" pos:column="57"/></operator> <name pos:line="38" pos:column="58">minor<pos:position pos:line="38" pos:column="63"/></name><operator pos:line="38" pos:column="63">,<pos:position pos:line="38" pos:column="64"/></operator> <name pos:line="38" pos:column="65">major<pos:position pos:line="38" pos:column="70"/></name><operator pos:line="38" pos:column="70">)<pos:position pos:line="38" pos:column="71"/></operator></expr></argument>)<pos:position pos:line="38" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="73"/></expr_stmt>
      <if pos:line="39" pos:column="7">if <condition pos:line="39" pos:column="10">(<expr><name><name pos:line="39" pos:column="11">a<pos:position pos:line="39" pos:column="12"/></name><operator pos:line="39" pos:column="12">-&gt;<pos:position pos:line="39" pos:column="17"/></operator><name pos:line="39" pos:column="14">major_int<pos:position pos:line="39" pos:column="23"/></name></name> <operator pos:line="39" pos:column="24">==<pos:position pos:line="39" pos:column="26"/></operator> <name pos:line="39" pos:column="27">major<pos:position pos:line="39" pos:column="32"/></name> <operator pos:line="39" pos:column="33">&amp;&amp;<pos:position pos:line="39" pos:column="43"/></operator> <operator pos:line="39" pos:column="36">!<pos:position pos:line="39" pos:column="37"/></operator><call><name pos:line="39" pos:column="37">mutt_strcasecmp<pos:position pos:line="39" pos:column="52"/></name><argument_list pos:line="39" pos:column="52">(<argument><expr><name pos:line="39" pos:column="53">minor<pos:position pos:line="39" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="60">a<pos:position pos:line="39" pos:column="61"/></name><operator pos:line="39" pos:column="61">-&gt;<pos:position pos:line="39" pos:column="66"/></operator><name pos:line="39" pos:column="63">minor<pos:position pos:line="39" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="70"/></condition><then pos:line="39" pos:column="70">
      <block pos:line="40" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">dprint<pos:position pos:line="41" pos:column="15"/></name><argument_list pos:line="41" pos:column="15">(<argument><expr><literal type="number" pos:line="41" pos:column="16">5<pos:position pos:line="41" pos:column="17"/></literal></expr></argument>, <argument><expr><operator pos:line="41" pos:column="19">(<pos:position pos:line="41" pos:column="20"/></operator><name pos:line="41" pos:column="20">debugfile<pos:position pos:line="41" pos:column="29"/></name><operator pos:line="41" pos:column="29">,<pos:position pos:line="41" pos:column="30"/></operator> <literal type="string" pos:line="41" pos:column="31">"parse_unattach_list: removed %s/%s [%d]\n"<pos:position pos:line="41" pos:column="74"/></literal><operator pos:line="41" pos:column="74">,<pos:position pos:line="41" pos:column="75"/></operator>
		    <name><name pos:line="42" pos:column="21">a<pos:position pos:line="42" pos:column="22"/></name><operator pos:line="42" pos:column="22">-&gt;<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="24">major<pos:position pos:line="42" pos:column="29"/></name></name><operator pos:line="42" pos:column="29">,<pos:position pos:line="42" pos:column="30"/></operator> <name><name pos:line="42" pos:column="31">a<pos:position pos:line="42" pos:column="32"/></name><operator pos:line="42" pos:column="32">-&gt;<pos:position pos:line="42" pos:column="37"/></operator><name pos:line="42" pos:column="34">minor<pos:position pos:line="42" pos:column="39"/></name></name><operator pos:line="42" pos:column="39">,<pos:position pos:line="42" pos:column="40"/></operator> <name><name pos:line="42" pos:column="41">a<pos:position pos:line="42" pos:column="42"/></name><operator pos:line="42" pos:column="42">-&gt;<pos:position pos:line="42" pos:column="47"/></operator><name pos:line="42" pos:column="44">major_int<pos:position pos:line="42" pos:column="53"/></name></name><operator pos:line="42" pos:column="53">)<pos:position pos:line="42" pos:column="54"/></operator></expr></argument>)<pos:position pos:line="42" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">regfree<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><operator pos:line="43" pos:column="17">&amp;<pos:position pos:line="43" pos:column="22"/></operator><name><name pos:line="43" pos:column="18">a<pos:position pos:line="43" pos:column="19"/></name><operator pos:line="43" pos:column="19">-&gt;<pos:position pos:line="43" pos:column="24"/></operator><name pos:line="43" pos:column="21">minor_rx<pos:position pos:line="43" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="44" pos:column="9">FREE<pos:position pos:line="44" pos:column="13"/></name><argument_list pos:line="44" pos:column="13">(<argument><expr><operator pos:line="44" pos:column="14">&amp;<pos:position pos:line="44" pos:column="19"/></operator><name><name pos:line="44" pos:column="15">a<pos:position pos:line="44" pos:column="16"/></name><operator pos:line="44" pos:column="16">-&gt;<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="18">major<pos:position pos:line="44" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="25"/></expr_stmt>

	<comment type="block" pos:line="46" pos:column="9">/* Relink backward */</comment>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">lastp<pos:position pos:line="47" pos:column="18"/></name></expr>)<pos:position pos:line="47" pos:column="19"/></condition><then pos:line="47" pos:column="19">
	  <block type="pseudo"><expr_stmt><expr><name><name pos:line="48" pos:column="11">lastp<pos:position pos:line="48" pos:column="16"/></name><operator pos:line="48" pos:column="16">-&gt;<pos:position pos:line="48" pos:column="21"/></operator><name pos:line="48" pos:column="18">next<pos:position pos:line="48" pos:column="22"/></name></name> <operator pos:line="48" pos:column="23">=<pos:position pos:line="48" pos:column="24"/></operator> <name><name pos:line="48" pos:column="25">lp<pos:position pos:line="48" pos:column="27"/></name><operator pos:line="48" pos:column="27">-&gt;<pos:position pos:line="48" pos:column="32"/></operator><name pos:line="48" pos:column="29">next<pos:position pos:line="48" pos:column="33"/></name></name></expr>;<pos:position pos:line="48" pos:column="34"/></expr_stmt></block></then>
	<else pos:line="49" pos:column="9">else
	  <block type="pseudo"><expr_stmt><expr><operator pos:line="50" pos:column="11">*<pos:position pos:line="50" pos:column="12"/></operator><name pos:line="50" pos:column="12">ldata<pos:position pos:line="50" pos:column="17"/></name> <operator pos:line="50" pos:column="18">=<pos:position pos:line="50" pos:column="19"/></operator> <name><name pos:line="50" pos:column="20">lp<pos:position pos:line="50" pos:column="22"/></name><operator pos:line="50" pos:column="22">-&gt;<pos:position pos:line="50" pos:column="27"/></operator><name pos:line="50" pos:column="24">next<pos:position pos:line="50" pos:column="28"/></name></name></expr>;<pos:position pos:line="50" pos:column="29"/></expr_stmt></block></else></if>

        <expr_stmt><expr><name pos:line="52" pos:column="9">newlp<pos:position pos:line="52" pos:column="14"/></name> <operator pos:line="52" pos:column="15">=<pos:position pos:line="52" pos:column="16"/></operator> <name><name pos:line="52" pos:column="17">lp<pos:position pos:line="52" pos:column="19"/></name><operator pos:line="52" pos:column="19">-&gt;<pos:position pos:line="52" pos:column="24"/></operator><name pos:line="52" pos:column="21">next<pos:position pos:line="52" pos:column="25"/></name></name></expr>;<pos:position pos:line="52" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">FREE<pos:position pos:line="53" pos:column="13"/></name><argument_list pos:line="53" pos:column="13">(<argument><expr><operator pos:line="53" pos:column="14">&amp;<pos:position pos:line="53" pos:column="19"/></operator><name><name pos:line="53" pos:column="15">lp<pos:position pos:line="53" pos:column="17"/></name><operator pos:line="53" pos:column="17">-&gt;<pos:position pos:line="53" pos:column="22"/></operator><name pos:line="53" pos:column="19">data<pos:position pos:line="53" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="25"/></expr_stmt>	<comment type="block" pos:line="53" pos:column="33">/* same as a */</comment>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">FREE<pos:position pos:line="54" pos:column="13"/></name><argument_list pos:line="54" pos:column="13">(<argument><expr><operator pos:line="54" pos:column="14">&amp;<pos:position pos:line="54" pos:column="19"/></operator><name pos:line="54" pos:column="15">lp<pos:position pos:line="54" pos:column="17"/></name></expr></argument>)<pos:position pos:line="54" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><name pos:line="55" pos:column="9">lp<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">=<pos:position pos:line="55" pos:column="13"/></operator> <name pos:line="55" pos:column="14">newlp<pos:position pos:line="55" pos:column="19"/></name></expr>;<pos:position pos:line="55" pos:column="20"/></expr_stmt>
        <continue pos:line="56" pos:column="9">continue;<pos:position pos:line="56" pos:column="18"/></continue>
      }<pos:position pos:line="57" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="59" pos:column="7">lastp<pos:position pos:line="59" pos:column="12"/></name> <operator pos:line="59" pos:column="13">=<pos:position pos:line="59" pos:column="14"/></operator> <name pos:line="59" pos:column="15">lp<pos:position pos:line="59" pos:column="17"/></name></expr>;<pos:position pos:line="59" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="60" pos:column="7">lp<pos:position pos:line="60" pos:column="9"/></name> <operator pos:line="60" pos:column="10">=<pos:position pos:line="60" pos:column="11"/></operator> <name><name pos:line="60" pos:column="12">lp<pos:position pos:line="60" pos:column="14"/></name><operator pos:line="60" pos:column="14">-&gt;<pos:position pos:line="60" pos:column="19"/></operator><name pos:line="60" pos:column="16">next<pos:position pos:line="60" pos:column="20"/></name></name></expr>;<pos:position pos:line="60" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></for>

  }<pos:position pos:line="63" pos:column="4"/></block>
  while <condition pos:line="64" pos:column="9">(<expr><call><name pos:line="64" pos:column="10">MoreArgs<pos:position pos:line="64" pos:column="18"/></name> <argument_list pos:line="64" pos:column="19">(<argument><expr><name pos:line="64" pos:column="20">s<pos:position pos:line="64" pos:column="21"/></name></expr></argument>)<pos:position pos:line="64" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="23"/></condition>;<pos:position pos:line="64" pos:column="24"/></do>
   
  <expr_stmt><expr><call><name pos:line="66" pos:column="3">FREE<pos:position pos:line="66" pos:column="7"/></name><argument_list pos:line="66" pos:column="7">(<argument><expr><operator pos:line="66" pos:column="8">&amp;<pos:position pos:line="66" pos:column="13"/></operator><name pos:line="66" pos:column="9">tmp<pos:position pos:line="66" pos:column="12"/></name></expr></argument>)<pos:position pos:line="66" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="67" pos:column="3">_attachments_clean<pos:position pos:line="67" pos:column="21"/></name><argument_list pos:line="67" pos:column="21">()<pos:position pos:line="67" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="24"/></expr_stmt>
  <return pos:line="68" pos:column="3">return <expr><literal type="number" pos:line="68" pos:column="10">0<pos:position pos:line="68" pos:column="11"/></literal></expr>;<pos:position pos:line="68" pos:column="12"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
