<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_450_mutt-1.4.2.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_sasl_client_new<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">CONNECTION<pos:position pos:line="1" pos:column="37"/></name><modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type> <name pos:line="1" pos:column="39">conn<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">sasl_conn_t<pos:position pos:line="1" pos:column="56"/></name><modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier><modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type> <name pos:line="1" pos:column="59">saslconn<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">sasl_security_properties_t<pos:position pos:line="3" pos:column="29"/></name></type> <name pos:line="3" pos:column="30">secprops<pos:position pos:line="3" pos:column="38"/></name></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">sasl_external_properties_t<pos:position pos:line="4" pos:column="29"/></name></type> <name pos:line="4" pos:column="30">extprops<pos:position pos:line="4" pos:column="38"/></name></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name><modifier pos:line="5" pos:column="13">*<pos:position pos:line="5" pos:column="14"/></modifier></type> <name pos:line="5" pos:column="15">service<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">rc<pos:position pos:line="6" pos:column="9"/></name></decl>;<pos:position pos:line="6" pos:column="10"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><call><name pos:line="8" pos:column="7">mutt_sasl_start<pos:position pos:line="8" pos:column="22"/></name> <argument_list pos:line="8" pos:column="23">()<pos:position pos:line="8" pos:column="25"/></argument_list></call> <operator pos:line="8" pos:column="26">!=<pos:position pos:line="8" pos:column="28"/></operator> <name pos:line="8" pos:column="29">SASL_OK<pos:position pos:line="8" pos:column="36"/></name></expr>)<pos:position pos:line="8" pos:column="37"/></condition><then pos:line="8" pos:column="37">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">-<pos:position pos:line="9" pos:column="13"/></operator><literal type="number" pos:line="9" pos:column="13">1<pos:position pos:line="9" pos:column="14"/></literal></expr>;<pos:position pos:line="9" pos:column="15"/></return></block></then></if>

  <switch pos:line="11" pos:column="3">switch <condition pos:line="11" pos:column="10">(<expr><name><name pos:line="11" pos:column="11">conn<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">-&gt;<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="17">account<pos:position pos:line="11" pos:column="24"/></name><operator pos:line="11" pos:column="24">.<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="25">type<pos:position pos:line="11" pos:column="29"/></name></name></expr>)<pos:position pos:line="11" pos:column="30"/></condition>
  <block pos:line="12" pos:column="3">{
    <case pos:line="13" pos:column="5">case <expr><name pos:line="13" pos:column="10">M_ACCT_TYPE_IMAP<pos:position pos:line="13" pos:column="26"/></name></expr>:<pos:position pos:line="13" pos:column="27"/></case>
      <expr_stmt><expr><name pos:line="14" pos:column="7">service<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <literal type="string" pos:line="14" pos:column="17">"imap"<pos:position pos:line="14" pos:column="23"/></literal></expr>;<pos:position pos:line="14" pos:column="24"/></expr_stmt>
      <break pos:line="15" pos:column="7">break;<pos:position pos:line="15" pos:column="13"/></break>
    <case pos:line="16" pos:column="5">case <expr><name pos:line="16" pos:column="10">M_ACCT_TYPE_POP<pos:position pos:line="16" pos:column="25"/></name></expr>:<pos:position pos:line="16" pos:column="26"/></case>
      <expr_stmt><expr><name pos:line="17" pos:column="7">service<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <literal type="string" pos:line="17" pos:column="17">"pop-3"<pos:position pos:line="17" pos:column="24"/></literal></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>
      <break pos:line="18" pos:column="7">break;<pos:position pos:line="18" pos:column="13"/></break>
    <default pos:line="19" pos:column="5">default:<pos:position pos:line="19" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">dprint<pos:position pos:line="20" pos:column="13"/></name> <argument_list pos:line="20" pos:column="14">(<argument><expr><literal type="number" pos:line="20" pos:column="15">1<pos:position pos:line="20" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="20" pos:column="18">(<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">debugfile<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">,<pos:position pos:line="20" pos:column="29"/></operator> <literal type="string" pos:line="20" pos:column="30">"mutt_sasl_client_new: account type unset\n"<pos:position pos:line="20" pos:column="74"/></literal><operator pos:line="20" pos:column="74">)<pos:position pos:line="20" pos:column="75"/></operator></expr></argument>)<pos:position pos:line="20" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="77"/></expr_stmt>
      <return pos:line="21" pos:column="7">return <expr><operator pos:line="21" pos:column="14">-<pos:position pos:line="21" pos:column="15"/></operator><literal type="number" pos:line="21" pos:column="15">1<pos:position pos:line="21" pos:column="16"/></literal></expr>;<pos:position pos:line="21" pos:column="17"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></switch>
  
  <expr_stmt><expr><name pos:line="24" pos:column="3">rc<pos:position pos:line="24" pos:column="5"/></name> <operator pos:line="24" pos:column="6">=<pos:position pos:line="24" pos:column="7"/></operator> <call><name pos:line="24" pos:column="8">sasl_client_new<pos:position pos:line="24" pos:column="23"/></name> <argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">service<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="34">conn<pos:position pos:line="24" pos:column="38"/></name><operator pos:line="24" pos:column="38">-&gt;<pos:position pos:line="24" pos:column="43"/></operator><name pos:line="24" pos:column="40">account<pos:position pos:line="24" pos:column="47"/></name><operator pos:line="24" pos:column="47">.<pos:position pos:line="24" pos:column="48"/></operator><name pos:line="24" pos:column="48">host<pos:position pos:line="24" pos:column="52"/></name></name></expr></argument>,
    <argument><expr><call><name pos:line="25" pos:column="5">mutt_sasl_get_callbacks<pos:position pos:line="25" pos:column="28"/></name> <argument_list pos:line="25" pos:column="29">(<argument><expr><operator pos:line="25" pos:column="30">&amp;<pos:position pos:line="25" pos:column="35"/></operator><name><name pos:line="25" pos:column="31">conn<pos:position pos:line="25" pos:column="35"/></name><operator pos:line="25" pos:column="35">-&gt;<pos:position pos:line="25" pos:column="40"/></operator><name pos:line="25" pos:column="37">account<pos:position pos:line="25" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="25" pos:column="47">SASL_SECURITY_LAYER<pos:position pos:line="25" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="68">saslconn<pos:position pos:line="25" pos:column="76"/></name></expr></argument>)<pos:position pos:line="25" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="78"/></expr_stmt>
  
  <if pos:line="27" pos:column="3">if <condition pos:line="27" pos:column="6">(<expr><name pos:line="27" pos:column="7">rc<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">!=<pos:position pos:line="27" pos:column="12"/></operator> <name pos:line="27" pos:column="13">SASL_OK<pos:position pos:line="27" pos:column="20"/></name></expr>)<pos:position pos:line="27" pos:column="21"/></condition><then pos:line="27" pos:column="21">
  <block pos:line="28" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">dprint<pos:position pos:line="29" pos:column="11"/></name> <argument_list pos:line="29" pos:column="12">(<argument><expr><literal type="number" pos:line="29" pos:column="13">1<pos:position pos:line="29" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="29" pos:column="16">(<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="17">debugfile<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">,<pos:position pos:line="29" pos:column="27"/></operator>
      <literal type="string" pos:line="30" pos:column="7">"mutt_sasl_client_new: Error allocating SASL connection\n"<pos:position pos:line="30" pos:column="65"/></literal><operator pos:line="30" pos:column="65">)<pos:position pos:line="30" pos:column="66"/></operator></expr></argument>)<pos:position pos:line="30" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="68"/></expr_stmt>
    <return pos:line="31" pos:column="5">return <expr><operator pos:line="31" pos:column="12">-<pos:position pos:line="31" pos:column="13"/></operator><literal type="number" pos:line="31" pos:column="13">1<pos:position pos:line="31" pos:column="14"/></literal></expr>;<pos:position pos:line="31" pos:column="15"/></return>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>

  <comment type="block" format="doxygen" pos:line="34" pos:column="3">/*** set sasl IP properties, necessary for use with krb4 ***/</comment>
  <comment type="block" pos:line="35" pos:column="3">/* Do we need to fail if this fails? I would assume having these unset
   * would just disable KRB4. Who wrote this code? I'm not sure how this
   * interacts with the NSS code either, since that mucks with the fd. */</comment>
  <block pos:line="38" pos:column="3">{
    <decl_stmt><decl><type><name><name pos:line="39" pos:column="5">struct<pos:position pos:line="39" pos:column="11"/></name> <name pos:line="39" pos:column="12">sockaddr_in<pos:position pos:line="39" pos:column="23"/></name></name></type> <name pos:line="39" pos:column="24">local<pos:position pos:line="39" pos:column="29"/></name></decl>, <decl><type ref="prev"/><name pos:line="39" pos:column="31">remote<pos:position pos:line="39" pos:column="37"/></name></decl>;<pos:position pos:line="39" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="40" pos:column="5">socklen_t<pos:position pos:line="40" pos:column="14"/></name></type> <name pos:line="40" pos:column="15">size<pos:position pos:line="40" pos:column="19"/></name></decl>;<pos:position pos:line="40" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><name pos:line="42" pos:column="5">size<pos:position pos:line="42" pos:column="9"/></name> <operator pos:line="42" pos:column="10">=<pos:position pos:line="42" pos:column="11"/></operator> <sizeof pos:line="42" pos:column="12">sizeof <argument_list pos:line="42" pos:column="19">(<argument><expr><name pos:line="42" pos:column="20">local<pos:position pos:line="42" pos:column="25"/></name></expr></argument>)<pos:position pos:line="42" pos:column="26"/></argument_list></sizeof></expr>;<pos:position pos:line="42" pos:column="27"/></expr_stmt>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><call><name pos:line="43" pos:column="9">getsockname<pos:position pos:line="43" pos:column="20"/></name> <argument_list pos:line="43" pos:column="21">(<argument><expr><name><name pos:line="43" pos:column="22">conn<pos:position pos:line="43" pos:column="26"/></name><operator pos:line="43" pos:column="26">-&gt;<pos:position pos:line="43" pos:column="31"/></operator><name pos:line="43" pos:column="28">fd<pos:position pos:line="43" pos:column="30"/></name></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="32">(<pos:position pos:line="43" pos:column="33"/></operator>struct <name pos:line="43" pos:column="40">sockaddr<pos:position pos:line="43" pos:column="48"/></name><operator pos:line="43" pos:column="48">*<pos:position pos:line="43" pos:column="49"/></operator><operator pos:line="43" pos:column="49">)<pos:position pos:line="43" pos:column="50"/></operator> <operator pos:line="43" pos:column="51">&amp;<pos:position pos:line="43" pos:column="56"/></operator><name pos:line="43" pos:column="52">local<pos:position pos:line="43" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="59">&amp;<pos:position pos:line="43" pos:column="64"/></operator><name pos:line="43" pos:column="60">size<pos:position pos:line="43" pos:column="64"/></name></expr></argument>)<pos:position pos:line="43" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="66"/></condition><then pos:line="43" pos:column="66">
      <block type="pseudo"><return pos:line="44" pos:column="7">return <expr><operator pos:line="44" pos:column="14">-<pos:position pos:line="44" pos:column="15"/></operator><literal type="number" pos:line="44" pos:column="15">1<pos:position pos:line="44" pos:column="16"/></literal></expr>;<pos:position pos:line="44" pos:column="17"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="46" pos:column="5">size<pos:position pos:line="46" pos:column="9"/></name> <operator pos:line="46" pos:column="10">=<pos:position pos:line="46" pos:column="11"/></operator> <sizeof pos:line="46" pos:column="12">sizeof<argument_list pos:line="46" pos:column="18">(<argument><expr><name pos:line="46" pos:column="19">remote<pos:position pos:line="46" pos:column="25"/></name></expr></argument>)<pos:position pos:line="46" pos:column="26"/></argument_list></sizeof></expr>;<pos:position pos:line="46" pos:column="27"/></expr_stmt>
    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><call><name pos:line="47" pos:column="9">getpeername<pos:position pos:line="47" pos:column="20"/></name><argument_list pos:line="47" pos:column="20">(<argument><expr><name><name pos:line="47" pos:column="21">conn<pos:position pos:line="47" pos:column="25"/></name><operator pos:line="47" pos:column="25">-&gt;<pos:position pos:line="47" pos:column="30"/></operator><name pos:line="47" pos:column="27">fd<pos:position pos:line="47" pos:column="29"/></name></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="31">(<pos:position pos:line="47" pos:column="32"/></operator>struct <name pos:line="47" pos:column="39">sockaddr<pos:position pos:line="47" pos:column="47"/></name><operator pos:line="47" pos:column="47">*<pos:position pos:line="47" pos:column="48"/></operator><operator pos:line="47" pos:column="48">)<pos:position pos:line="47" pos:column="49"/></operator> <operator pos:line="47" pos:column="50">&amp;<pos:position pos:line="47" pos:column="55"/></operator><name pos:line="47" pos:column="51">remote<pos:position pos:line="47" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="59">&amp;<pos:position pos:line="47" pos:column="64"/></operator><name pos:line="47" pos:column="60">size<pos:position pos:line="47" pos:column="64"/></name></expr></argument>)<pos:position pos:line="47" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="66"/></condition><then pos:line="47" pos:column="66">
      <block type="pseudo"><return pos:line="48" pos:column="7">return <expr><operator pos:line="48" pos:column="14">-<pos:position pos:line="48" pos:column="15"/></operator><literal type="number" pos:line="48" pos:column="15">1<pos:position pos:line="48" pos:column="16"/></literal></expr>;<pos:position pos:line="48" pos:column="17"/></return></block></then></if>

<cpp:ifdef pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">ifdef<pos:position pos:line="50" pos:column="7"/></cpp:directive> <name pos:line="50" pos:column="8">SASL_IP_LOCAL<pos:position pos:line="50" pos:column="21"/></name></cpp:ifdef>
    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><call><name pos:line="51" pos:column="9">sasl_setprop<pos:position pos:line="51" pos:column="21"/></name><argument_list pos:line="51" pos:column="21">(<argument><expr><operator pos:line="51" pos:column="22">*<pos:position pos:line="51" pos:column="23"/></operator><name pos:line="51" pos:column="23">saslconn<pos:position pos:line="51" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="33">SASL_IP_LOCAL<pos:position pos:line="51" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="48">&amp;<pos:position pos:line="51" pos:column="53"/></operator><name pos:line="51" pos:column="49">local<pos:position pos:line="51" pos:column="54"/></name></expr></argument>)<pos:position pos:line="51" pos:column="55"/></argument_list></call> <operator pos:line="51" pos:column="56">!=<pos:position pos:line="51" pos:column="58"/></operator> <name pos:line="51" pos:column="59">SASL_OK<pos:position pos:line="51" pos:column="66"/></name></expr>)<pos:position pos:line="51" pos:column="67"/></condition><then pos:line="51" pos:column="67">
    <block pos:line="52" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="53" pos:column="7">dprint<pos:position pos:line="53" pos:column="13"/></name> <argument_list pos:line="53" pos:column="14">(<argument><expr><literal type="number" pos:line="53" pos:column="15">1<pos:position pos:line="53" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="53" pos:column="18">(<pos:position pos:line="53" pos:column="19"/></operator><name pos:line="53" pos:column="19">debugfile<pos:position pos:line="53" pos:column="28"/></name><operator pos:line="53" pos:column="28">,<pos:position pos:line="53" pos:column="29"/></operator>
	<literal type="string" pos:line="54" pos:column="9">"mutt_sasl_client_new: Error setting local IP address\n"<pos:position pos:line="54" pos:column="65"/></literal><operator pos:line="54" pos:column="65">)<pos:position pos:line="54" pos:column="66"/></operator></expr></argument>)<pos:position pos:line="54" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="68"/></expr_stmt>
      <return pos:line="55" pos:column="7">return <expr><operator pos:line="55" pos:column="14">-<pos:position pos:line="55" pos:column="15"/></operator><literal type="number" pos:line="55" pos:column="15">1<pos:position pos:line="55" pos:column="16"/></literal></expr>;<pos:position pos:line="55" pos:column="17"/></return>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>
<cpp:endif pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">endif<pos:position pos:line="57" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">ifdef<pos:position pos:line="59" pos:column="7"/></cpp:directive> <name pos:line="59" pos:column="8">SASL_IP_REMOTE<pos:position pos:line="59" pos:column="22"/></name></cpp:ifdef>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><call><name pos:line="60" pos:column="9">sasl_setprop<pos:position pos:line="60" pos:column="21"/></name><argument_list pos:line="60" pos:column="21">(<argument><expr><operator pos:line="60" pos:column="22">*<pos:position pos:line="60" pos:column="23"/></operator><name pos:line="60" pos:column="23">saslconn<pos:position pos:line="60" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="33">SASL_IP_REMOTE<pos:position pos:line="60" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="49">&amp;<pos:position pos:line="60" pos:column="54"/></operator><name pos:line="60" pos:column="50">remote<pos:position pos:line="60" pos:column="56"/></name></expr></argument>)<pos:position pos:line="60" pos:column="57"/></argument_list></call> <operator pos:line="60" pos:column="58">!=<pos:position pos:line="60" pos:column="60"/></operator> <name pos:line="60" pos:column="61">SASL_OK<pos:position pos:line="60" pos:column="68"/></name></expr>)<pos:position pos:line="60" pos:column="69"/></condition><then pos:line="60" pos:column="69">
    <block pos:line="61" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="62" pos:column="7">dprint<pos:position pos:line="62" pos:column="13"/></name> <argument_list pos:line="62" pos:column="14">(<argument><expr><literal type="number" pos:line="62" pos:column="15">1<pos:position pos:line="62" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="62" pos:column="18">(<pos:position pos:line="62" pos:column="19"/></operator><name pos:line="62" pos:column="19">debugfile<pos:position pos:line="62" pos:column="28"/></name><operator pos:line="62" pos:column="28">,<pos:position pos:line="62" pos:column="29"/></operator>
	<literal type="string" pos:line="63" pos:column="9">"mutt_sasl_client_new: Error setting remote IP address\n"<pos:position pos:line="63" pos:column="66"/></literal><operator pos:line="63" pos:column="66">)<pos:position pos:line="63" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="63" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="69"/></expr_stmt>
      <return pos:line="64" pos:column="7">return <expr><operator pos:line="64" pos:column="14">-<pos:position pos:line="64" pos:column="15"/></operator><literal type="number" pos:line="64" pos:column="15">1<pos:position pos:line="64" pos:column="16"/></literal></expr>;<pos:position pos:line="64" pos:column="17"/></return>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif<pos:position pos:line="66" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="67" pos:column="4"/></block>

  <comment type="block" pos:line="69" pos:column="3">/* set security properties. We use NOPLAINTEXT globally, since we can
   * just fall back to LOGIN in the IMAP case anyway. If that doesn't
   * work for POP, we can make it a flag or move this code into
   * imap/auth_sasl.c */</comment>
  <expr_stmt><expr><call><name pos:line="73" pos:column="3">memset<pos:position pos:line="73" pos:column="9"/></name> <argument_list pos:line="73" pos:column="10">(<argument><expr><operator pos:line="73" pos:column="11">&amp;<pos:position pos:line="73" pos:column="16"/></operator><name pos:line="73" pos:column="12">secprops<pos:position pos:line="73" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="22">0<pos:position pos:line="73" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="73" pos:column="25">sizeof <argument_list pos:line="73" pos:column="32">(<argument><expr><name pos:line="73" pos:column="33">secprops<pos:position pos:line="73" pos:column="41"/></name></expr></argument>)<pos:position pos:line="73" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="73" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="44"/></expr_stmt>
  <comment type="block" pos:line="74" pos:column="3">/* Work around a casting bug in the SASL krb4 module */</comment>
  <expr_stmt><expr><name><name pos:line="75" pos:column="3">secprops<pos:position pos:line="75" pos:column="11"/></name><operator pos:line="75" pos:column="11">.<pos:position pos:line="75" pos:column="12"/></operator><name pos:line="75" pos:column="12">max_ssf<pos:position pos:line="75" pos:column="19"/></name></name> <operator pos:line="75" pos:column="20">=<pos:position pos:line="75" pos:column="21"/></operator> <literal type="number" pos:line="75" pos:column="22">0x7fff<pos:position pos:line="75" pos:column="28"/></literal></expr>;<pos:position pos:line="75" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="76" pos:column="3">secprops<pos:position pos:line="76" pos:column="11"/></name><operator pos:line="76" pos:column="11">.<pos:position pos:line="76" pos:column="12"/></operator><name pos:line="76" pos:column="12">maxbufsize<pos:position pos:line="76" pos:column="22"/></name></name> <operator pos:line="76" pos:column="23">=<pos:position pos:line="76" pos:column="24"/></operator> <name pos:line="76" pos:column="25">M_SASL_MAXBUF<pos:position pos:line="76" pos:column="38"/></name></expr>;<pos:position pos:line="76" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="77" pos:column="3">secprops<pos:position pos:line="77" pos:column="11"/></name><operator pos:line="77" pos:column="11">.<pos:position pos:line="77" pos:column="12"/></operator><name pos:line="77" pos:column="12">security_flags<pos:position pos:line="77" pos:column="26"/></name></name> <operator pos:line="77" pos:column="27">|=<pos:position pos:line="77" pos:column="29"/></operator> <name pos:line="77" pos:column="30">SASL_SEC_NOPLAINTEXT<pos:position pos:line="77" pos:column="50"/></name></expr>;<pos:position pos:line="77" pos:column="51"/></expr_stmt>
  <if pos:line="78" pos:column="3">if <condition pos:line="78" pos:column="6">(<expr><call><name pos:line="78" pos:column="7">sasl_setprop<pos:position pos:line="78" pos:column="19"/></name> <argument_list pos:line="78" pos:column="20">(<argument><expr><operator pos:line="78" pos:column="21">*<pos:position pos:line="78" pos:column="22"/></operator><name pos:line="78" pos:column="22">saslconn<pos:position pos:line="78" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="32">SASL_SEC_PROPS<pos:position pos:line="78" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="48">&amp;<pos:position pos:line="78" pos:column="53"/></operator><name pos:line="78" pos:column="49">secprops<pos:position pos:line="78" pos:column="57"/></name></expr></argument>)<pos:position pos:line="78" pos:column="58"/></argument_list></call> <operator pos:line="78" pos:column="59">!=<pos:position pos:line="78" pos:column="61"/></operator> <name pos:line="78" pos:column="62">SASL_OK<pos:position pos:line="78" pos:column="69"/></name></expr>)<pos:position pos:line="78" pos:column="70"/></condition><then pos:line="78" pos:column="70">
  <block pos:line="79" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">dprint<pos:position pos:line="80" pos:column="11"/></name> <argument_list pos:line="80" pos:column="12">(<argument><expr><literal type="number" pos:line="80" pos:column="13">1<pos:position pos:line="80" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="80" pos:column="16">(<pos:position pos:line="80" pos:column="17"/></operator><name pos:line="80" pos:column="17">debugfile<pos:position pos:line="80" pos:column="26"/></name><operator pos:line="80" pos:column="26">,<pos:position pos:line="80" pos:column="27"/></operator>
      <literal type="string" pos:line="81" pos:column="7">"mutt_sasl_client_new: Error setting security properties\n"<pos:position pos:line="81" pos:column="66"/></literal><operator pos:line="81" pos:column="66">)<pos:position pos:line="81" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="81" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="69"/></expr_stmt>
    <return pos:line="82" pos:column="5">return <expr><operator pos:line="82" pos:column="12">-<pos:position pos:line="82" pos:column="13"/></operator><literal type="number" pos:line="82" pos:column="13">1<pos:position pos:line="82" pos:column="14"/></literal></expr>;<pos:position pos:line="82" pos:column="15"/></return>
  }<pos:position pos:line="83" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="85" pos:column="3">/* we currently don't have an SSF finder for NSS (I don't know the API).
   * If someone does it'd probably be trivial to write mutt_nss_get_ssf().
   * I have a feeling more SSL code could be shared between those two files,
   * but I haven't looked into it yet, since I still don't know the APIs. */</comment>
<cpp:if pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">if<pos:position pos:line="89" pos:column="4"/></cpp:directive> <expr><call><name pos:line="89" pos:column="5">defined<pos:position pos:line="89" pos:column="12"/></name><argument_list pos:line="89" pos:column="12">(<argument><expr><name pos:line="89" pos:column="13">USE_SSL<pos:position pos:line="89" pos:column="20"/></name></expr></argument>)<pos:position pos:line="89" pos:column="21"/></argument_list></call> <operator pos:line="89" pos:column="22">&amp;&amp;<pos:position pos:line="89" pos:column="32"/></operator> <operator pos:line="89" pos:column="25">!<pos:position pos:line="89" pos:column="26"/></operator><call><name pos:line="89" pos:column="26">defined<pos:position pos:line="89" pos:column="33"/></name><argument_list pos:line="89" pos:column="33">(<argument><expr><name pos:line="89" pos:column="34">USE_NSS<pos:position pos:line="89" pos:column="41"/></name></expr></argument>)<pos:position pos:line="89" pos:column="42"/></argument_list></call></expr></cpp:if>
  <if pos:line="90" pos:column="3">if <condition pos:line="90" pos:column="6">(<expr><name><name pos:line="90" pos:column="7">conn<pos:position pos:line="90" pos:column="11"/></name><operator pos:line="90" pos:column="11">-&gt;<pos:position pos:line="90" pos:column="16"/></operator><name pos:line="90" pos:column="13">account<pos:position pos:line="90" pos:column="20"/></name><operator pos:line="90" pos:column="20">.<pos:position pos:line="90" pos:column="21"/></operator><name pos:line="90" pos:column="21">flags<pos:position pos:line="90" pos:column="26"/></name></name> <operator pos:line="90" pos:column="27">&amp;<pos:position pos:line="90" pos:column="32"/></operator> <name pos:line="90" pos:column="29">M_ACCT_SSL<pos:position pos:line="90" pos:column="39"/></name></expr>)<pos:position pos:line="90" pos:column="40"/></condition><then pos:line="90" pos:column="40">
  <block pos:line="91" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="92" pos:column="5">memset<pos:position pos:line="92" pos:column="11"/></name> <argument_list pos:line="92" pos:column="12">(<argument><expr><operator pos:line="92" pos:column="13">&amp;<pos:position pos:line="92" pos:column="18"/></operator><name pos:line="92" pos:column="14">extprops<pos:position pos:line="92" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="92" pos:column="24">0<pos:position pos:line="92" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="92" pos:column="27">sizeof <argument_list pos:line="92" pos:column="34">(<argument><expr><name pos:line="92" pos:column="35">extprops<pos:position pos:line="92" pos:column="43"/></name></expr></argument>)<pos:position pos:line="92" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="92" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="93" pos:column="5">extprops<pos:position pos:line="93" pos:column="13"/></name><operator pos:line="93" pos:column="13">.<pos:position pos:line="93" pos:column="14"/></operator><name pos:line="93" pos:column="14">ssf<pos:position pos:line="93" pos:column="17"/></name></name> <operator pos:line="93" pos:column="18">=<pos:position pos:line="93" pos:column="19"/></operator> <name><name pos:line="93" pos:column="20">conn<pos:position pos:line="93" pos:column="24"/></name><operator pos:line="93" pos:column="24">-&gt;<pos:position pos:line="93" pos:column="29"/></operator><name pos:line="93" pos:column="26">ssf<pos:position pos:line="93" pos:column="29"/></name></name></expr>;<pos:position pos:line="93" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="94" pos:column="5">dprint<pos:position pos:line="94" pos:column="11"/></name> <argument_list pos:line="94" pos:column="12">(<argument><expr><literal type="number" pos:line="94" pos:column="13">2<pos:position pos:line="94" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="94" pos:column="16">(<pos:position pos:line="94" pos:column="17"/></operator><name pos:line="94" pos:column="17">debugfile<pos:position pos:line="94" pos:column="26"/></name><operator pos:line="94" pos:column="26">,<pos:position pos:line="94" pos:column="27"/></operator> <literal type="string" pos:line="94" pos:column="28">"External SSF: %d\n"<pos:position pos:line="94" pos:column="48"/></literal><operator pos:line="94" pos:column="48">,<pos:position pos:line="94" pos:column="49"/></operator> <name><name pos:line="94" pos:column="50">extprops<pos:position pos:line="94" pos:column="58"/></name><operator pos:line="94" pos:column="58">.<pos:position pos:line="94" pos:column="59"/></operator><name pos:line="94" pos:column="59">ssf<pos:position pos:line="94" pos:column="62"/></name></name><operator pos:line="94" pos:column="62">)<pos:position pos:line="94" pos:column="63"/></operator></expr></argument>)<pos:position pos:line="94" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="65"/></expr_stmt>
    <if pos:line="95" pos:column="5">if <condition pos:line="95" pos:column="8">(<expr><call><name pos:line="95" pos:column="9">sasl_setprop<pos:position pos:line="95" pos:column="21"/></name> <argument_list pos:line="95" pos:column="22">(<argument><expr><operator pos:line="95" pos:column="23">*<pos:position pos:line="95" pos:column="24"/></operator><name pos:line="95" pos:column="24">saslconn<pos:position pos:line="95" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="34">SASL_SSF_EXTERNAL<pos:position pos:line="95" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="53">&amp;<pos:position pos:line="95" pos:column="58"/></operator><name pos:line="95" pos:column="54">extprops<pos:position pos:line="95" pos:column="62"/></name></expr></argument>)<pos:position pos:line="95" pos:column="63"/></argument_list></call> <operator pos:line="95" pos:column="64">!=<pos:position pos:line="95" pos:column="66"/></operator> <name pos:line="95" pos:column="67">SASL_OK<pos:position pos:line="95" pos:column="74"/></name></expr>)<pos:position pos:line="95" pos:column="75"/></condition><then pos:line="95" pos:column="75">
    <block pos:line="96" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="97" pos:column="7">dprint<pos:position pos:line="97" pos:column="13"/></name> <argument_list pos:line="97" pos:column="14">(<argument><expr><literal type="number" pos:line="97" pos:column="15">1<pos:position pos:line="97" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="97" pos:column="18">(<pos:position pos:line="97" pos:column="19"/></operator><name pos:line="97" pos:column="19">debugfile<pos:position pos:line="97" pos:column="28"/></name><operator pos:line="97" pos:column="28">,<pos:position pos:line="97" pos:column="29"/></operator> <literal type="string" pos:line="97" pos:column="30">"mutt_sasl_client_new: Error setting external properties\n"<pos:position pos:line="97" pos:column="89"/></literal><operator pos:line="97" pos:column="89">)<pos:position pos:line="97" pos:column="90"/></operator></expr></argument>)<pos:position pos:line="97" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="92"/></expr_stmt>
      <return pos:line="98" pos:column="7">return <expr><operator pos:line="98" pos:column="14">-<pos:position pos:line="98" pos:column="15"/></operator><literal type="number" pos:line="98" pos:column="15">1<pos:position pos:line="98" pos:column="16"/></literal></expr>;<pos:position pos:line="98" pos:column="17"/></return>
    }<pos:position pos:line="99" pos:column="6"/></block></then></if>
  }<pos:position pos:line="100" pos:column="4"/></block></then></if>
<cpp:endif pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">endif<pos:position pos:line="101" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="103" pos:column="3">return <expr><literal type="number" pos:line="103" pos:column="10">0<pos:position pos:line="103" pos:column="11"/></literal></expr>;<pos:position pos:line="103" pos:column="12"/></return>
}<pos:position pos:line="104" pos:column="2"/></block></function></unit>
