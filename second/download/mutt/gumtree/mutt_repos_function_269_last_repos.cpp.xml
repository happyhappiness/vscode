<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_269_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">exit_handler<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">int<pos:position pos:line="1" pos:column="30"/></name></type> <name pos:line="1" pos:column="31">sig<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="35"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <expr_stmt><expr><call><name pos:line="3" pos:column="3">curs_set<pos:position pos:line="3" pos:column="11"/></name> <argument_list pos:line="3" pos:column="12">(<argument><expr><literal type="number" pos:line="3" pos:column="13">1<pos:position pos:line="3" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4" pos:column="3">endwin<pos:position pos:line="4" pos:column="9"/></name> <argument_list pos:line="4" pos:column="10">()<pos:position pos:line="4" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="13"/></expr_stmt> <comment type="block" pos:line="4" pos:column="14">/* just to be safe */</comment>
<cpp:if pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">if<pos:position pos:line="5" pos:column="4"/></cpp:directive> <expr><name pos:line="5" pos:column="5">SYS_SIGLIST_DECLARED<pos:position pos:line="5" pos:column="25"/></name></expr></cpp:if>
  <expr_stmt><expr><call><name pos:line="6" pos:column="3">printf<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><call><name pos:line="6" pos:column="10">_<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="string" pos:line="6" pos:column="12">"%s...  Exiting.\n"<pos:position pos:line="6" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="34">sys_siglist<pos:position pos:line="6" pos:column="45"/></name><index pos:line="6" pos:column="45">[<expr><name pos:line="6" pos:column="46">sig<pos:position pos:line="6" pos:column="49"/></name></expr>]<pos:position pos:line="6" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="6" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="52"/></expr_stmt>
<cpp:else pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">else<pos:position pos:line="7" pos:column="6"/></cpp:directive></cpp:else>
<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><operator pos:line="8" pos:column="5">(<pos:position pos:line="8" pos:column="6"/></operator><name pos:line="8" pos:column="6">__sun__<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">&amp;&amp;<pos:position pos:line="8" pos:column="24"/></operator> <name pos:line="8" pos:column="17">__svr4__<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">)<pos:position pos:line="8" pos:column="26"/></operator></expr></cpp:if>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">printf<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><call><name pos:line="9" pos:column="10">_<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><literal type="string" pos:line="9" pos:column="12">"Caught %s...  Exiting.\n"<pos:position pos:line="9" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="41">_sys_siglist<pos:position pos:line="9" pos:column="53"/></name><index pos:line="9" pos:column="53">[<expr><name pos:line="9" pos:column="54">sig<pos:position pos:line="9" pos:column="57"/></name></expr>]<pos:position pos:line="9" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="60"/></expr_stmt>
<cpp:else pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">else<pos:position pos:line="10" pos:column="6"/></cpp:directive></cpp:else>
<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if<pos:position pos:line="11" pos:column="4"/></cpp:directive> <expr><operator pos:line="11" pos:column="5">(<pos:position pos:line="11" pos:column="6"/></operator><name pos:line="11" pos:column="6">__alpha<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">&amp;&amp;<pos:position pos:line="11" pos:column="24"/></operator> <name pos:line="11" pos:column="17">__osf__<pos:position pos:line="11" pos:column="24"/></name><operator pos:line="11" pos:column="24">)<pos:position pos:line="11" pos:column="25"/></operator></expr></cpp:if>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">printf<pos:position pos:line="12" pos:column="9"/></name><argument_list pos:line="12" pos:column="9">(<argument><expr><call><name pos:line="12" pos:column="10">_<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="string" pos:line="12" pos:column="12">"Caught %s...  Exiting.\n"<pos:position pos:line="12" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="41">__sys_siglist<pos:position pos:line="12" pos:column="54"/></name><index pos:line="12" pos:column="54">[<expr><name pos:line="12" pos:column="55">sig<pos:position pos:line="12" pos:column="58"/></name></expr>]<pos:position pos:line="12" pos:column="59"/></index></name></expr></argument>)<pos:position pos:line="12" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="61"/></expr_stmt>
<cpp:else pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">else<pos:position pos:line="13" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">printf<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><call><name pos:line="14" pos:column="10">_<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><literal type="string" pos:line="14" pos:column="12">"Caught signal %d...  Exiting.\n"<pos:position pos:line="14" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="14" pos:column="48">sig<pos:position pos:line="14" pos:column="51"/></name></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">exit<pos:position pos:line="18" pos:column="7"/></name> <argument_list pos:line="18" pos:column="8">(<argument><expr><literal type="number" pos:line="18" pos:column="9">0<pos:position pos:line="18" pos:column="10"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="12"/></expr_stmt>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
