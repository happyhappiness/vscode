<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1850_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">rfc2231_join_continuations<pos:position pos:line="1" pos:column="39"/></name> <parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name pos:line="1" pos:column="41">PARAMETER<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier><modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">head<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
					<parameter><decl><type><name><name pos:line="2" pos:column="41">struct<pos:position pos:line="2" pos:column="47"/></name> <name pos:line="2" pos:column="48">rfc2231_parameter<pos:position pos:line="2" pos:column="65"/></name></name> <modifier pos:line="2" pos:column="66">*<pos:position pos:line="2" pos:column="67"/></modifier></type><name pos:line="2" pos:column="67">par<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">rfc2231_parameter<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">q<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">attribute<pos:position pos:line="6" pos:column="17"/></name><index pos:line="6" pos:column="17">[<expr><name pos:line="6" pos:column="18">STRING<pos:position pos:line="6" pos:column="24"/></name></expr>]<pos:position pos:line="6" pos:column="25"/></index></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">charset<pos:position pos:line="7" pos:column="15"/></name><index pos:line="7" pos:column="15">[<expr><name pos:line="7" pos:column="16">STRING<pos:position pos:line="7" pos:column="22"/></name></expr>]<pos:position pos:line="7" pos:column="23"/></index></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">value<pos:position pos:line="8" pos:column="14"/></name> <init pos:line="8" pos:column="15">= <expr><name pos:line="8" pos:column="17">NULL<pos:position pos:line="8" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">valp<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">encoded<pos:position pos:line="10" pos:column="14"/></name></decl>;<pos:position pos:line="10" pos:column="15"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="12" pos:column="3">size_t<pos:position pos:line="12" pos:column="9"/></name></type> <name pos:line="12" pos:column="10">l<pos:position pos:line="12" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="13">vl<pos:position pos:line="12" pos:column="15"/></name></decl>;<pos:position pos:line="12" pos:column="16"/></decl_stmt>
  
  <while pos:line="14" pos:column="3">while <condition pos:line="14" pos:column="9">(<expr><name pos:line="14" pos:column="10">par<pos:position pos:line="14" pos:column="13"/></name></expr>)<pos:position pos:line="14" pos:column="14"/></condition>
  <block pos:line="15" pos:column="3">{
    <expr_stmt><expr><name pos:line="16" pos:column="5">value<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <name pos:line="16" pos:column="13">NULL<pos:position pos:line="16" pos:column="17"/></name></expr>;<pos:position pos:line="16" pos:column="18"/></expr_stmt> <expr_stmt><expr><name pos:line="16" pos:column="19">l<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <literal type="number" pos:line="16" pos:column="23">0<pos:position pos:line="16" pos:column="24"/></literal></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt>
    
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">strfcpy<pos:position pos:line="18" pos:column="12"/></name> <argument_list pos:line="18" pos:column="13">(<argument><expr><name pos:line="18" pos:column="14">attribute<pos:position pos:line="18" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="25">par<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">-&gt;<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="30">attribute<pos:position pos:line="18" pos:column="39"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="41">sizeof <argument_list pos:line="18" pos:column="48">(<argument><expr><name pos:line="18" pos:column="49">attribute<pos:position pos:line="18" pos:column="58"/></name></expr></argument>)<pos:position pos:line="18" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="61"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">(<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">encoded<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <name><name pos:line="20" pos:column="20">par<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">-&gt;<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="25">encoded<pos:position pos:line="20" pos:column="32"/></name></name><operator pos:line="20" pos:column="32">)<pos:position pos:line="20" pos:column="33"/></operator></expr>)<pos:position pos:line="20" pos:column="34"/></condition><then pos:line="20" pos:column="34">
      <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="7">valp<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <call><name pos:line="21" pos:column="14">rfc2231_get_charset<pos:position pos:line="21" pos:column="33"/></name> <argument_list pos:line="21" pos:column="34">(<argument><expr><name><name pos:line="21" pos:column="35">par<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">-&gt;<pos:position pos:line="21" pos:column="43"/></operator><name pos:line="21" pos:column="40">value<pos:position pos:line="21" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="47">charset<pos:position pos:line="21" pos:column="54"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="56">sizeof <argument_list pos:line="21" pos:column="63">(<argument><expr><name pos:line="21" pos:column="64">charset<pos:position pos:line="21" pos:column="71"/></name></expr></argument>)<pos:position pos:line="21" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="74"/></expr_stmt></block></then>
    <else pos:line="22" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="7">valp<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <name><name pos:line="23" pos:column="14">par<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">-&gt;<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="19">value<pos:position pos:line="23" pos:column="24"/></name></name></expr>;<pos:position pos:line="23" pos:column="25"/></expr_stmt></block></else></if>

    <do pos:line="25" pos:column="5">do 
    <block pos:line="26" pos:column="5">{
      <if pos:line="27" pos:column="7">if <condition pos:line="27" pos:column="10">(<expr><name pos:line="27" pos:column="11">encoded<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">&amp;&amp;<pos:position pos:line="27" pos:column="29"/></operator> <name><name pos:line="27" pos:column="22">par<pos:position pos:line="27" pos:column="25"/></name><operator pos:line="27" pos:column="25">-&gt;<pos:position pos:line="27" pos:column="30"/></operator><name pos:line="27" pos:column="27">encoded<pos:position pos:line="27" pos:column="34"/></name></name></expr>)<pos:position pos:line="27" pos:column="35"/></condition><then pos:line="27" pos:column="35">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="9">rfc2231_decode_one<pos:position pos:line="28" pos:column="27"/></name> <argument_list pos:line="28" pos:column="28">(<argument><expr><name><name pos:line="28" pos:column="29">par<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">-&gt;<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="34">value<pos:position pos:line="28" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="41">valp<pos:position pos:line="28" pos:column="45"/></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="47"/></expr_stmt></block></then></if>
      
      <expr_stmt><expr><name pos:line="30" pos:column="7">vl<pos:position pos:line="30" pos:column="9"/></name> <operator pos:line="30" pos:column="10">=<pos:position pos:line="30" pos:column="11"/></operator> <call><name pos:line="30" pos:column="12">strlen<pos:position pos:line="30" pos:column="18"/></name> <argument_list pos:line="30" pos:column="19">(<argument><expr><name><name pos:line="30" pos:column="20">par<pos:position pos:line="30" pos:column="23"/></name><operator pos:line="30" pos:column="23">-&gt;<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="25">value<pos:position pos:line="30" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt>
      
      <expr_stmt><expr><call><name pos:line="32" pos:column="7">safe_realloc<pos:position pos:line="32" pos:column="19"/></name> <argument_list pos:line="32" pos:column="20">(<argument><expr><operator pos:line="32" pos:column="21">&amp;<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="22">value<pos:position pos:line="32" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="29">l<pos:position pos:line="32" pos:column="30"/></name> <operator pos:line="32" pos:column="31">+<pos:position pos:line="32" pos:column="32"/></operator> <name pos:line="32" pos:column="33">vl<pos:position pos:line="32" pos:column="35"/></name> <operator pos:line="32" pos:column="36">+<pos:position pos:line="32" pos:column="37"/></operator> <literal type="number" pos:line="32" pos:column="38">1<pos:position pos:line="32" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">strcpy<pos:position pos:line="33" pos:column="13"/></name> <argument_list pos:line="33" pos:column="14">(<argument><expr><name pos:line="33" pos:column="15">value<pos:position pos:line="33" pos:column="20"/></name> <operator pos:line="33" pos:column="21">+<pos:position pos:line="33" pos:column="22"/></operator> <name pos:line="33" pos:column="23">l<pos:position pos:line="33" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="26">par<pos:position pos:line="33" pos:column="29"/></name><operator pos:line="33" pos:column="29">-&gt;<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="31">value<pos:position pos:line="33" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt>	<comment type="block" pos:line="33" pos:column="41">/* __STRCPY_CHECKED__ */</comment>
      <expr_stmt><expr><name pos:line="34" pos:column="7">l<pos:position pos:line="34" pos:column="8"/></name> <operator pos:line="34" pos:column="9">+=<pos:position pos:line="34" pos:column="11"/></operator> <name pos:line="34" pos:column="12">vl<pos:position pos:line="34" pos:column="14"/></name></expr>;<pos:position pos:line="34" pos:column="15"/></expr_stmt>

      <expr_stmt><expr><name pos:line="36" pos:column="7">q<pos:position pos:line="36" pos:column="8"/></name> <operator pos:line="36" pos:column="9">=<pos:position pos:line="36" pos:column="10"/></operator> <name><name pos:line="36" pos:column="11">par<pos:position pos:line="36" pos:column="14"/></name><operator pos:line="36" pos:column="14">-&gt;<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="16">next<pos:position pos:line="36" pos:column="20"/></name></name></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="37" pos:column="7">rfc2231_free_parameter<pos:position pos:line="37" pos:column="29"/></name> <argument_list pos:line="37" pos:column="30">(<argument><expr><operator pos:line="37" pos:column="31">&amp;<pos:position pos:line="37" pos:column="36"/></operator><name pos:line="37" pos:column="32">par<pos:position pos:line="37" pos:column="35"/></name></expr></argument>)<pos:position pos:line="37" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>
      <if pos:line="38" pos:column="7">if <condition pos:line="38" pos:column="10">(<expr><operator pos:line="38" pos:column="11">(<pos:position pos:line="38" pos:column="12"/></operator><name pos:line="38" pos:column="12">par<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">=<pos:position pos:line="38" pos:column="17"/></operator> <name pos:line="38" pos:column="18">q<pos:position pos:line="38" pos:column="19"/></name><operator pos:line="38" pos:column="19">)<pos:position pos:line="38" pos:column="20"/></operator></expr>)<pos:position pos:line="38" pos:column="21"/></condition><then pos:line="38" pos:column="21">
	<block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="9">valp<pos:position pos:line="39" pos:column="13"/></name> <operator pos:line="39" pos:column="14">=<pos:position pos:line="39" pos:column="15"/></operator> <name><name pos:line="39" pos:column="16">par<pos:position pos:line="39" pos:column="19"/></name><operator pos:line="39" pos:column="19">-&gt;<pos:position pos:line="39" pos:column="24"/></operator><name pos:line="39" pos:column="21">value<pos:position pos:line="39" pos:column="26"/></name></name></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt></block></then></if>
    }<pos:position pos:line="40" pos:column="6"/></block> while <condition pos:line="40" pos:column="13">(<expr><name pos:line="40" pos:column="14">par<pos:position pos:line="40" pos:column="17"/></name> <operator pos:line="40" pos:column="18">&amp;&amp;<pos:position pos:line="40" pos:column="28"/></operator> <operator pos:line="40" pos:column="21">!<pos:position pos:line="40" pos:column="22"/></operator><call><name pos:line="40" pos:column="22">strcmp<pos:position pos:line="40" pos:column="28"/></name> <argument_list pos:line="40" pos:column="29">(<argument><expr><name><name pos:line="40" pos:column="30">par<pos:position pos:line="40" pos:column="33"/></name><operator pos:line="40" pos:column="33">-&gt;<pos:position pos:line="40" pos:column="38"/></operator><name pos:line="40" pos:column="35">attribute<pos:position pos:line="40" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="46">attribute<pos:position pos:line="40" pos:column="55"/></name></expr></argument>)<pos:position pos:line="40" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="57"/></condition>;<pos:position pos:line="40" pos:column="58"/></do>
    
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">value<pos:position pos:line="42" pos:column="14"/></name></expr>)<pos:position pos:line="42" pos:column="15"/></condition><then pos:line="42" pos:column="15">
    <block pos:line="43" pos:column="5">{
      <if pos:line="44" pos:column="7">if <condition pos:line="44" pos:column="10">(<expr><name pos:line="44" pos:column="11">encoded<pos:position pos:line="44" pos:column="18"/></name></expr>)<pos:position pos:line="44" pos:column="19"/></condition><then pos:line="44" pos:column="19">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="9">mutt_convert_string<pos:position pos:line="45" pos:column="28"/></name> <argument_list pos:line="45" pos:column="29">(<argument><expr><operator pos:line="45" pos:column="30">&amp;<pos:position pos:line="45" pos:column="35"/></operator><name pos:line="45" pos:column="31">value<pos:position pos:line="45" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="38">charset<pos:position pos:line="45" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="47">Charset<pos:position pos:line="45" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="56">MUTT_ICONV_HOOK_FROM<pos:position pos:line="45" pos:column="76"/></name></expr></argument>)<pos:position pos:line="45" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="78"/></expr_stmt></block></then></if>
      <expr_stmt><expr><operator pos:line="46" pos:column="7">*<pos:position pos:line="46" pos:column="8"/></operator><name pos:line="46" pos:column="8">head<pos:position pos:line="46" pos:column="12"/></name> <operator pos:line="46" pos:column="13">=<pos:position pos:line="46" pos:column="14"/></operator> <call><name pos:line="46" pos:column="15">mutt_new_parameter<pos:position pos:line="46" pos:column="33"/></name> <argument_list pos:line="46" pos:column="34">()<pos:position pos:line="46" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name><operator pos:line="47" pos:column="7">(<pos:position pos:line="47" pos:column="8"/></operator><operator pos:line="47" pos:column="8">*<pos:position pos:line="47" pos:column="9"/></operator><name pos:line="47" pos:column="9">head<pos:position pos:line="47" pos:column="13"/></name><operator pos:line="47" pos:column="13">)<pos:position pos:line="47" pos:column="14"/></operator><operator pos:line="47" pos:column="14">-&gt;<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="16">attribute<pos:position pos:line="47" pos:column="25"/></name></name> <operator pos:line="47" pos:column="26">=<pos:position pos:line="47" pos:column="27"/></operator> <call><name pos:line="47" pos:column="28">safe_strdup<pos:position pos:line="47" pos:column="39"/></name> <argument_list pos:line="47" pos:column="40">(<argument><expr><name pos:line="47" pos:column="41">attribute<pos:position pos:line="47" pos:column="50"/></name></expr></argument>)<pos:position pos:line="47" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><name><operator pos:line="48" pos:column="7">(<pos:position pos:line="48" pos:column="8"/></operator><operator pos:line="48" pos:column="8">*<pos:position pos:line="48" pos:column="9"/></operator><name pos:line="48" pos:column="9">head<pos:position pos:line="48" pos:column="13"/></name><operator pos:line="48" pos:column="13">)<pos:position pos:line="48" pos:column="14"/></operator><operator pos:line="48" pos:column="14">-&gt;<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="16">value<pos:position pos:line="48" pos:column="21"/></name></name> <operator pos:line="48" pos:column="22">=<pos:position pos:line="48" pos:column="23"/></operator> <name pos:line="48" pos:column="24">value<pos:position pos:line="48" pos:column="29"/></name></expr>;<pos:position pos:line="48" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name pos:line="49" pos:column="7">head<pos:position pos:line="49" pos:column="11"/></name> <operator pos:line="49" pos:column="12">=<pos:position pos:line="49" pos:column="13"/></operator> <operator pos:line="49" pos:column="14">&amp;<pos:position pos:line="49" pos:column="19"/></operator><name><operator pos:line="49" pos:column="15">(<pos:position pos:line="49" pos:column="16"/></operator><operator pos:line="49" pos:column="16">*<pos:position pos:line="49" pos:column="17"/></operator><name pos:line="49" pos:column="17">head<pos:position pos:line="49" pos:column="21"/></name><operator pos:line="49" pos:column="21">)<pos:position pos:line="49" pos:column="22"/></operator><operator pos:line="49" pos:column="22">-&gt;<pos:position pos:line="49" pos:column="27"/></operator><name pos:line="49" pos:column="24">next<pos:position pos:line="49" pos:column="28"/></name></name></expr>;<pos:position pos:line="49" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>
  }<pos:position pos:line="51" pos:column="4"/></block></while>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
