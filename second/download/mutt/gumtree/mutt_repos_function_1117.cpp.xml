<function xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position"><type><name pos:line="5464" pos:column="1">char<pos:position pos:line="5464" pos:column="5"/></name> <modifier pos:line="5464" pos:column="6">*<pos:position pos:line="5464" pos:column="7"/></modifier>
<cpp:ifdef pos:line="5465" pos:column="1">#<cpp:directive pos:line="5465" pos:column="2">ifdef<pos:position pos:line="5465" pos:column="7"/></cpp:directive> <name pos:line="5465" pos:column="8">_LIBC<pos:position pos:line="5465" pos:column="13"/></name></cpp:ifdef>
<comment type="block" pos:line="5466" pos:column="1">/* Make these definitions weak in libc, so POSIX programs can redefine
   these names if they don't use our functions, and still use
   regcomp/regexec below without link errors.  */</comment>
<name pos:line="5469" pos:column="1">weak_function<pos:position pos:line="5469" pos:column="14"/></name></type>
<cpp:endif pos:line="5470" pos:column="1">#<cpp:directive pos:line="5470" pos:column="2">endif<pos:position pos:line="5470" pos:column="7"/></cpp:directive></cpp:endif>
<name pos:line="5471" pos:column="1">re_comp<pos:position pos:line="5471" pos:column="8"/></name> <parameter_list pos:line="5471" pos:column="9">(<parameter><decl><type><name pos:line="5471" pos:column="10">s<pos:position pos:line="5471" pos:column="11"/></name></type></decl></parameter>)<pos:position pos:line="5471" pos:column="12"/></parameter_list>
    <decl_stmt><decl><type><specifier pos:line="5472" pos:column="5">const<pos:position pos:line="5472" pos:column="10"/></specifier> <name pos:line="5472" pos:column="11">char<pos:position pos:line="5472" pos:column="15"/></name> <modifier pos:line="5472" pos:column="16">*<pos:position pos:line="5472" pos:column="17"/></modifier></type><name pos:line="5472" pos:column="17">s<pos:position pos:line="5472" pos:column="18"/></name></decl>;<pos:position pos:line="5472" pos:column="19"/></decl_stmt>
<block pos:line="5473" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5474" pos:column="3">reg_errcode_t<pos:position pos:line="5474" pos:column="16"/></name></type> <name pos:line="5474" pos:column="17">ret<pos:position pos:line="5474" pos:column="20"/></name></decl>;<pos:position pos:line="5474" pos:column="21"/></decl_stmt>

  <if pos:line="5476" pos:column="3">if <condition pos:line="5476" pos:column="6">(<expr><operator pos:line="5476" pos:column="7">!<pos:position pos:line="5476" pos:column="8"/></operator><name pos:line="5476" pos:column="8">s<pos:position pos:line="5476" pos:column="9"/></name></expr>)<pos:position pos:line="5476" pos:column="10"/></condition><then pos:line="5476" pos:column="10">
    <block pos:line="5477" pos:column="5">{
      <if pos:line="5478" pos:column="7">if <condition pos:line="5478" pos:column="10">(<expr><operator pos:line="5478" pos:column="11">!<pos:position pos:line="5478" pos:column="12"/></operator><name><name pos:line="5478" pos:column="12">re_comp_buf<pos:position pos:line="5478" pos:column="23"/></name><operator pos:line="5478" pos:column="23">.<pos:position pos:line="5478" pos:column="24"/></operator><name pos:line="5478" pos:column="24">buffer<pos:position pos:line="5478" pos:column="30"/></name></name></expr>)<pos:position pos:line="5478" pos:column="31"/></condition><then pos:line="5478" pos:column="31">
	<block type="pseudo"><return pos:line="5479" pos:column="9">return <expr><call><name pos:line="5479" pos:column="16">gettext<pos:position pos:line="5479" pos:column="23"/></name> <argument_list pos:line="5479" pos:column="24">(<argument><expr><literal type="string" pos:line="5479" pos:column="25">"No previous regular expression"<pos:position pos:line="5479" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="5479" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="5479" pos:column="59"/></return></block></then></if>
      <return pos:line="5480" pos:column="7">return <expr><literal type="number" pos:line="5480" pos:column="14">0<pos:position pos:line="5480" pos:column="15"/></literal></expr>;<pos:position pos:line="5480" pos:column="16"/></return>
    }<pos:position pos:line="5481" pos:column="6"/></block></then></if>

  <if pos:line="5483" pos:column="3">if <condition pos:line="5483" pos:column="6">(<expr><operator pos:line="5483" pos:column="7">!<pos:position pos:line="5483" pos:column="8"/></operator><name><name pos:line="5483" pos:column="8">re_comp_buf<pos:position pos:line="5483" pos:column="19"/></name><operator pos:line="5483" pos:column="19">.<pos:position pos:line="5483" pos:column="20"/></operator><name pos:line="5483" pos:column="20">buffer<pos:position pos:line="5483" pos:column="26"/></name></name></expr>)<pos:position pos:line="5483" pos:column="27"/></condition><then pos:line="5483" pos:column="27">
    <block pos:line="5484" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="5485" pos:column="7">re_comp_buf<pos:position pos:line="5485" pos:column="18"/></name><operator pos:line="5485" pos:column="18">.<pos:position pos:line="5485" pos:column="19"/></operator><name pos:line="5485" pos:column="19">buffer<pos:position pos:line="5485" pos:column="25"/></name></name> <operator pos:line="5485" pos:column="26">=<pos:position pos:line="5485" pos:column="27"/></operator> <operator pos:line="5485" pos:column="28">(<pos:position pos:line="5485" pos:column="29"/></operator><name pos:line="5485" pos:column="29">unsigned<pos:position pos:line="5485" pos:column="37"/></name> <name pos:line="5485" pos:column="38">char<pos:position pos:line="5485" pos:column="42"/></name> <operator pos:line="5485" pos:column="43">*<pos:position pos:line="5485" pos:column="44"/></operator><operator pos:line="5485" pos:column="44">)<pos:position pos:line="5485" pos:column="45"/></operator> <call><name pos:line="5485" pos:column="46">malloc<pos:position pos:line="5485" pos:column="52"/></name> <argument_list pos:line="5485" pos:column="53">(<argument><expr><literal type="number" pos:line="5485" pos:column="54">200<pos:position pos:line="5485" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="5485" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="5485" pos:column="59"/></expr_stmt>	<comment type="block" pos:line="5485" pos:column="65">/* __MEM_CHECKED__ */</comment>
      <if pos:line="5486" pos:column="7">if <condition pos:line="5486" pos:column="10">(<expr><name><name pos:line="5486" pos:column="11">re_comp_buf<pos:position pos:line="5486" pos:column="22"/></name><operator pos:line="5486" pos:column="22">.<pos:position pos:line="5486" pos:column="23"/></operator><name pos:line="5486" pos:column="23">buffer<pos:position pos:line="5486" pos:column="29"/></name></name> <operator pos:line="5486" pos:column="30">==<pos:position pos:line="5486" pos:column="32"/></operator> <name pos:line="5486" pos:column="33">NULL<pos:position pos:line="5486" pos:column="37"/></name></expr>)<pos:position pos:line="5486" pos:column="38"/></condition><then pos:line="5486" pos:column="38">
        <block type="pseudo"><return pos:line="5487" pos:column="9">return <expr><call><name pos:line="5487" pos:column="16">gettext<pos:position pos:line="5487" pos:column="23"/></name> <argument_list pos:line="5487" pos:column="24">(<argument><expr><name><name pos:line="5487" pos:column="25">re_error_msgid<pos:position pos:line="5487" pos:column="39"/></name><index pos:line="5487" pos:column="39">[<expr><operator pos:line="5487" pos:column="40">(<pos:position pos:line="5487" pos:column="41"/></operator><name pos:line="5487" pos:column="41">int<pos:position pos:line="5487" pos:column="44"/></name><operator pos:line="5487" pos:column="44">)<pos:position pos:line="5487" pos:column="45"/></operator> <name pos:line="5487" pos:column="46">REG_ESPACE<pos:position pos:line="5487" pos:column="56"/></name></expr>]<pos:position pos:line="5487" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="5487" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="5487" pos:column="59"/></return></block></then></if>
      <expr_stmt><expr><name><name pos:line="5488" pos:column="7">re_comp_buf<pos:position pos:line="5488" pos:column="18"/></name><operator pos:line="5488" pos:column="18">.<pos:position pos:line="5488" pos:column="19"/></operator><name pos:line="5488" pos:column="19">allocated<pos:position pos:line="5488" pos:column="28"/></name></name> <operator pos:line="5488" pos:column="29">=<pos:position pos:line="5488" pos:column="30"/></operator> <literal type="number" pos:line="5488" pos:column="31">200<pos:position pos:line="5488" pos:column="34"/></literal></expr>;<pos:position pos:line="5488" pos:column="35"/></expr_stmt>

      <expr_stmt><expr><name><name pos:line="5490" pos:column="7">re_comp_buf<pos:position pos:line="5490" pos:column="18"/></name><operator pos:line="5490" pos:column="18">.<pos:position pos:line="5490" pos:column="19"/></operator><name pos:line="5490" pos:column="19">fastmap<pos:position pos:line="5490" pos:column="26"/></name></name> <operator pos:line="5490" pos:column="27">=<pos:position pos:line="5490" pos:column="28"/></operator> <operator pos:line="5490" pos:column="29">(<pos:position pos:line="5490" pos:column="30"/></operator><name pos:line="5490" pos:column="30">char<pos:position pos:line="5490" pos:column="34"/></name> <operator pos:line="5490" pos:column="35">*<pos:position pos:line="5490" pos:column="36"/></operator><operator pos:line="5490" pos:column="36">)<pos:position pos:line="5490" pos:column="37"/></operator> <call><name pos:line="5490" pos:column="38">malloc<pos:position pos:line="5490" pos:column="44"/></name> <argument_list pos:line="5490" pos:column="45">(<argument><expr><literal type="number" pos:line="5490" pos:column="46">1<pos:position pos:line="5490" pos:column="47"/></literal> <operator pos:line="5490" pos:column="48">&lt;&lt;<pos:position pos:line="5490" pos:column="56"/></operator> <name pos:line="5490" pos:column="51">BYTEWIDTH<pos:position pos:line="5490" pos:column="60"/></name></expr></argument>)<pos:position pos:line="5490" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="5490" pos:column="62"/></expr_stmt>	<comment type="block" pos:line="5490" pos:column="65">/* __MEM_CHECKED__ */</comment>
      <if pos:line="5491" pos:column="7">if <condition pos:line="5491" pos:column="10">(<expr><name><name pos:line="5491" pos:column="11">re_comp_buf<pos:position pos:line="5491" pos:column="22"/></name><operator pos:line="5491" pos:column="22">.<pos:position pos:line="5491" pos:column="23"/></operator><name pos:line="5491" pos:column="23">fastmap<pos:position pos:line="5491" pos:column="30"/></name></name> <operator pos:line="5491" pos:column="31">==<pos:position pos:line="5491" pos:column="33"/></operator> <name pos:line="5491" pos:column="34">NULL<pos:position pos:line="5491" pos:column="38"/></name></expr>)<pos:position pos:line="5491" pos:column="39"/></condition><then pos:line="5491" pos:column="39">
	<block type="pseudo"><return pos:line="5492" pos:column="9">return <expr><call><name pos:line="5492" pos:column="16">gettext<pos:position pos:line="5492" pos:column="23"/></name> <argument_list pos:line="5492" pos:column="24">(<argument><expr><name><name pos:line="5492" pos:column="25">re_error_msgid<pos:position pos:line="5492" pos:column="39"/></name><index pos:line="5492" pos:column="39">[<expr><operator pos:line="5492" pos:column="40">(<pos:position pos:line="5492" pos:column="41"/></operator><name pos:line="5492" pos:column="41">int<pos:position pos:line="5492" pos:column="44"/></name><operator pos:line="5492" pos:column="44">)<pos:position pos:line="5492" pos:column="45"/></operator> <name pos:line="5492" pos:column="46">REG_ESPACE<pos:position pos:line="5492" pos:column="56"/></name></expr>]<pos:position pos:line="5492" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="5492" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="5492" pos:column="59"/></return></block></then></if>
    }<pos:position pos:line="5493" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="5495" pos:column="3">/* Since `re_exec' always passes NULL for the `regs' argument, we
     don't need to initialize the pattern buffer fields which affect it.  */</comment>

  <comment type="block" pos:line="5498" pos:column="3">/* Match anchors at newlines.  */</comment>
  <expr_stmt><expr><name><name pos:line="5499" pos:column="3">re_comp_buf<pos:position pos:line="5499" pos:column="14"/></name><operator pos:line="5499" pos:column="14">.<pos:position pos:line="5499" pos:column="15"/></operator><name pos:line="5499" pos:column="15">newline_anchor<pos:position pos:line="5499" pos:column="29"/></name></name> <operator pos:line="5499" pos:column="30">=<pos:position pos:line="5499" pos:column="31"/></operator> <literal type="number" pos:line="5499" pos:column="32">1<pos:position pos:line="5499" pos:column="33"/></literal></expr>;<pos:position pos:line="5499" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><name pos:line="5501" pos:column="3">ret<pos:position pos:line="5501" pos:column="6"/></name> <operator pos:line="5501" pos:column="7">=<pos:position pos:line="5501" pos:column="8"/></operator> <call><name pos:line="5501" pos:column="9">regex_compile<pos:position pos:line="5501" pos:column="22"/></name> <argument_list pos:line="5501" pos:column="23">(<argument><expr><name pos:line="5501" pos:column="24">s<pos:position pos:line="5501" pos:column="25"/></name></expr></argument>, <argument><expr><call><name pos:line="5501" pos:column="27">strlen<pos:position pos:line="5501" pos:column="33"/></name> <argument_list pos:line="5501" pos:column="34">(<argument><expr><name pos:line="5501" pos:column="35">s<pos:position pos:line="5501" pos:column="36"/></name></expr></argument>)<pos:position pos:line="5501" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="5501" pos:column="39">re_syntax_options<pos:position pos:line="5501" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="5501" pos:column="58">&amp;<pos:position pos:line="5501" pos:column="63"/></operator><name pos:line="5501" pos:column="59">re_comp_buf<pos:position pos:line="5501" pos:column="70"/></name></expr></argument>)<pos:position pos:line="5501" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="5501" pos:column="72"/></expr_stmt>

  <if pos:line="5503" pos:column="3">if <condition pos:line="5503" pos:column="6">(<expr><operator pos:line="5503" pos:column="7">!<pos:position pos:line="5503" pos:column="8"/></operator><name pos:line="5503" pos:column="8">ret<pos:position pos:line="5503" pos:column="11"/></name></expr>)<pos:position pos:line="5503" pos:column="12"/></condition><then pos:line="5503" pos:column="12">
    <block type="pseudo"><return pos:line="5504" pos:column="5">return <expr><name pos:line="5504" pos:column="12">NULL<pos:position pos:line="5504" pos:column="16"/></name></expr>;<pos:position pos:line="5504" pos:column="17"/></return></block></then></if>

  <comment type="block" pos:line="5506" pos:column="3">/* Yes, we're discarding `const' here if !HAVE_LIBINTL.  */</comment>
  <return pos:line="5507" pos:column="3">return <expr><operator pos:line="5507" pos:column="10">(<pos:position pos:line="5507" pos:column="11"/></operator><name pos:line="5507" pos:column="11">char<pos:position pos:line="5507" pos:column="15"/></name> <operator pos:line="5507" pos:column="16">*<pos:position pos:line="5507" pos:column="17"/></operator><operator pos:line="5507" pos:column="17">)<pos:position pos:line="5507" pos:column="18"/></operator> <call><name pos:line="5507" pos:column="19">gettext<pos:position pos:line="5507" pos:column="26"/></name> <argument_list pos:line="5507" pos:column="27">(<argument><expr><name><name pos:line="5507" pos:column="28">re_error_msgid<pos:position pos:line="5507" pos:column="42"/></name><index pos:line="5507" pos:column="42">[<expr><operator pos:line="5507" pos:column="43">(<pos:position pos:line="5507" pos:column="44"/></operator><name pos:line="5507" pos:column="44">int<pos:position pos:line="5507" pos:column="47"/></name><operator pos:line="5507" pos:column="47">)<pos:position pos:line="5507" pos:column="48"/></operator> <name pos:line="5507" pos:column="49">ret<pos:position pos:line="5507" pos:column="52"/></name></expr>]<pos:position pos:line="5507" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="5507" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="5507" pos:column="55"/></return>
}<pos:position pos:line="5508" pos:column="2"/></block></function>


