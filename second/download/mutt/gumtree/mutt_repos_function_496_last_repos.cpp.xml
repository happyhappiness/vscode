<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_496_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_addwch<pos:position pos:line="1" pos:column="16"/></name> <parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">wchar_t<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">wc<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">buf<pos:position pos:line="3" pos:column="11"/></name><index pos:line="3" pos:column="11">[<expr><name pos:line="3" pos:column="12">MB_LEN_MAX<pos:position pos:line="3" pos:column="22"/></name><operator pos:line="3" pos:column="22">*<pos:position pos:line="3" pos:column="23"/></operator><literal type="number" pos:line="3" pos:column="23">2<pos:position pos:line="3" pos:column="24"/></literal></expr>]<pos:position pos:line="3" pos:column="25"/></index></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">mbstate_t<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">mbstate<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">n1<pos:position pos:line="5" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="14">n2<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="7" pos:column="3">memset<pos:position pos:line="7" pos:column="9"/></name> <argument_list pos:line="7" pos:column="10">(<argument><expr><operator pos:line="7" pos:column="11">&amp;<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="12">mbstate<pos:position pos:line="7" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="21">0<pos:position pos:line="7" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="24">sizeof <argument_list pos:line="7" pos:column="31">(<argument><expr><name pos:line="7" pos:column="32">mbstate<pos:position pos:line="7" pos:column="39"/></name></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="42"/></expr_stmt>
  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><operator pos:line="8" pos:column="7">(<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">n1<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">=<pos:position pos:line="8" pos:column="12"/></operator> <call><name pos:line="8" pos:column="13">wcrtomb<pos:position pos:line="8" pos:column="20"/></name> <argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">buf<pos:position pos:line="8" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="27">wc<pos:position pos:line="8" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="31">&amp;<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="32">mbstate<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call><operator pos:line="8" pos:column="40">)<pos:position pos:line="8" pos:column="41"/></operator> <operator pos:line="8" pos:column="42">==<pos:position pos:line="8" pos:column="44"/></operator> <call pos:line="8" pos:column="45">(<name pos:line="8" pos:column="46">size_t<pos:position pos:line="8" pos:column="52"/></name>)<argument_list pos:line="8" pos:column="53">(<argument><expr><operator pos:line="8" pos:column="54">-<pos:position pos:line="8" pos:column="55"/></operator><literal type="number" pos:line="8" pos:column="55">1<pos:position pos:line="8" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="57"/></argument_list></call> <operator pos:line="8" pos:column="58">||<pos:position pos:line="8" pos:column="60"/></operator>
      <operator pos:line="9" pos:column="7">(<pos:position pos:line="9" pos:column="8"/></operator><name pos:line="9" pos:column="8">n2<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">=<pos:position pos:line="9" pos:column="12"/></operator> <call><name pos:line="9" pos:column="13">wcrtomb<pos:position pos:line="9" pos:column="20"/></name> <argument_list pos:line="9" pos:column="21">(<argument><expr><name pos:line="9" pos:column="22">buf<pos:position pos:line="9" pos:column="25"/></name> <operator pos:line="9" pos:column="26">+<pos:position pos:line="9" pos:column="27"/></operator> <name pos:line="9" pos:column="28">n1<pos:position pos:line="9" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="32">0<pos:position pos:line="9" pos:column="33"/></literal></expr></argument>, <argument><expr><operator pos:line="9" pos:column="35">&amp;<pos:position pos:line="9" pos:column="40"/></operator><name pos:line="9" pos:column="36">mbstate<pos:position pos:line="9" pos:column="43"/></name></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call><operator pos:line="9" pos:column="44">)<pos:position pos:line="9" pos:column="45"/></operator> <operator pos:line="9" pos:column="46">==<pos:position pos:line="9" pos:column="48"/></operator> <call pos:line="9" pos:column="49">(<name pos:line="9" pos:column="50">size_t<pos:position pos:line="9" pos:column="56"/></name>)<argument_list pos:line="9" pos:column="57">(<argument><expr><operator pos:line="9" pos:column="58">-<pos:position pos:line="9" pos:column="59"/></operator><literal type="number" pos:line="9" pos:column="59">1<pos:position pos:line="9" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="62"/></condition><then pos:line="9" pos:column="62">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">-<pos:position pos:line="10" pos:column="13"/></operator><literal type="number" pos:line="10" pos:column="13">1<pos:position pos:line="10" pos:column="14"/></literal></expr>;<pos:position pos:line="10" pos:column="15"/></return></block></then> <comment type="block" pos:line="10" pos:column="16">/* ERR */</comment>
  <else pos:line="11" pos:column="3">else
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><call><name pos:line="12" pos:column="12">addstr<pos:position pos:line="12" pos:column="18"/></name> <argument_list pos:line="12" pos:column="19">(<argument><expr><name pos:line="12" pos:column="20">buf<pos:position pos:line="12" pos:column="23"/></name></expr></argument>)<pos:position pos:line="12" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="25"/></return></block></else></if>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
