<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1627_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">COMPRESS_INFO<pos:position pos:line="1" pos:column="21"/></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type>
<name pos:line="2" pos:column="1">set_compress_info<pos:position pos:line="2" pos:column="18"/></name> <parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">CONTEXT<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">ctx<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="33"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><operator pos:line="4" pos:column="7">!<pos:position pos:line="4" pos:column="8"/></operator><name pos:line="4" pos:column="8">ctx<pos:position pos:line="4" pos:column="11"/></name> <operator pos:line="4" pos:column="12">||<pos:position pos:line="4" pos:column="14"/></operator> <operator pos:line="4" pos:column="15">!<pos:position pos:line="4" pos:column="16"/></operator><name><name pos:line="4" pos:column="16">ctx<pos:position pos:line="4" pos:column="19"/></name><operator pos:line="4" pos:column="19">-&gt;<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="21">path<pos:position pos:line="4" pos:column="25"/></name></name></expr>)<pos:position pos:line="4" pos:column="26"/></condition><then pos:line="4" pos:column="26">
    <block type="pseudo"><return pos:line="5" pos:column="5">return <expr><name pos:line="5" pos:column="12">NULL<pos:position pos:line="5" pos:column="16"/></name></expr>;<pos:position pos:line="5" pos:column="17"/></return></block></then></if>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name><name pos:line="7" pos:column="7">ctx<pos:position pos:line="7" pos:column="10"/></name><operator pos:line="7" pos:column="10">-&gt;<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="12">compress_info<pos:position pos:line="7" pos:column="25"/></name></name></expr>)<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><name><name pos:line="8" pos:column="12">ctx<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">-&gt;<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="17">compress_info<pos:position pos:line="8" pos:column="30"/></name></name></expr>;<pos:position pos:line="8" pos:column="31"/></return></block></then></if>

  <comment type="block" pos:line="10" pos:column="3">/* Open is compulsory */</comment>
  <decl_stmt><decl><type><specifier pos:line="11" pos:column="3">const<pos:position pos:line="11" pos:column="8"/></specifier> <name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">o<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><call><name pos:line="11" pos:column="19">find_hook<pos:position pos:line="11" pos:column="28"/></name> <argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">MUTT_OPENHOOK<pos:position pos:line="11" pos:column="43"/></name></expr></argument>,   <argument><expr><name><name pos:line="11" pos:column="47">ctx<pos:position pos:line="11" pos:column="50"/></name><operator pos:line="11" pos:column="50">-&gt;<pos:position pos:line="11" pos:column="55"/></operator><name pos:line="11" pos:column="52">path<pos:position pos:line="11" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="58"/></decl_stmt>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><operator pos:line="12" pos:column="7">!<pos:position pos:line="12" pos:column="8"/></operator><name pos:line="12" pos:column="8">o<pos:position pos:line="12" pos:column="9"/></name></expr>)<pos:position pos:line="12" pos:column="10"/></condition><then pos:line="12" pos:column="10">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><name pos:line="13" pos:column="12">NULL<pos:position pos:line="13" pos:column="16"/></name></expr>;<pos:position pos:line="13" pos:column="17"/></return></block></then></if>

  <decl_stmt><decl><type><specifier pos:line="15" pos:column="3">const<pos:position pos:line="15" pos:column="8"/></specifier> <name pos:line="15" pos:column="9">char<pos:position pos:line="15" pos:column="13"/></name> <modifier pos:line="15" pos:column="14">*<pos:position pos:line="15" pos:column="15"/></modifier></type><name pos:line="15" pos:column="15">c<pos:position pos:line="15" pos:column="16"/></name> <init pos:line="15" pos:column="17">= <expr><call><name pos:line="15" pos:column="19">find_hook<pos:position pos:line="15" pos:column="28"/></name> <argument_list pos:line="15" pos:column="29">(<argument><expr><name pos:line="15" pos:column="30">MUTT_CLOSEHOOK<pos:position pos:line="15" pos:column="44"/></name></expr></argument>,  <argument><expr><name><name pos:line="15" pos:column="47">ctx<pos:position pos:line="15" pos:column="50"/></name><operator pos:line="15" pos:column="50">-&gt;<pos:position pos:line="15" pos:column="55"/></operator><name pos:line="15" pos:column="52">path<pos:position pos:line="15" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="58"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="16" pos:column="3">const<pos:position pos:line="16" pos:column="8"/></specifier> <name pos:line="16" pos:column="9">char<pos:position pos:line="16" pos:column="13"/></name> <modifier pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></modifier></type><name pos:line="16" pos:column="15">a<pos:position pos:line="16" pos:column="16"/></name> <init pos:line="16" pos:column="17">= <expr><call><name pos:line="16" pos:column="19">find_hook<pos:position pos:line="16" pos:column="28"/></name> <argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">MUTT_APPENDHOOK<pos:position pos:line="16" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="47">ctx<pos:position pos:line="16" pos:column="50"/></name><operator pos:line="16" pos:column="50">-&gt;<pos:position pos:line="16" pos:column="55"/></operator><name pos:line="16" pos:column="52">path<pos:position pos:line="16" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="58"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="18" pos:column="3">COMPRESS_INFO<pos:position pos:line="18" pos:column="16"/></name> <modifier pos:line="18" pos:column="17">*<pos:position pos:line="18" pos:column="18"/></modifier></type><name pos:line="18" pos:column="18">ci<pos:position pos:line="18" pos:column="20"/></name> <init pos:line="18" pos:column="21">= <expr><call><name pos:line="18" pos:column="23">safe_calloc<pos:position pos:line="18" pos:column="34"/></name> <argument_list pos:line="18" pos:column="35">(<argument><expr><literal type="number" pos:line="18" pos:column="36">1<pos:position pos:line="18" pos:column="37"/></literal></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="39">sizeof <argument_list pos:line="18" pos:column="46">(<argument><expr><name pos:line="18" pos:column="47">COMPRESS_INFO<pos:position pos:line="18" pos:column="60"/></name></expr></argument>)<pos:position pos:line="18" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="63"/></decl_stmt>
  <expr_stmt><expr><name><name pos:line="19" pos:column="3">ctx<pos:position pos:line="19" pos:column="6"/></name><operator pos:line="19" pos:column="6">-&gt;<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="8">compress_info<pos:position pos:line="19" pos:column="21"/></name></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">ci<pos:position pos:line="19" pos:column="26"/></name></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="21" pos:column="3">ci<pos:position pos:line="21" pos:column="5"/></name><operator pos:line="21" pos:column="5">-&gt;<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="7">open<pos:position pos:line="21" pos:column="11"/></name></name>   <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <call><name pos:line="21" pos:column="16">safe_strdup<pos:position pos:line="21" pos:column="27"/></name> <argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">o<pos:position pos:line="21" pos:column="30"/></name></expr></argument>)<pos:position pos:line="21" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="22" pos:column="3">ci<pos:position pos:line="22" pos:column="5"/></name><operator pos:line="22" pos:column="5">-&gt;<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="7">close<pos:position pos:line="22" pos:column="12"/></name></name>  <operator pos:line="22" pos:column="14">=<pos:position pos:line="22" pos:column="15"/></operator> <call><name pos:line="22" pos:column="16">safe_strdup<pos:position pos:line="22" pos:column="27"/></name> <argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">c<pos:position pos:line="22" pos:column="30"/></name></expr></argument>)<pos:position pos:line="22" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="23" pos:column="3">ci<pos:position pos:line="23" pos:column="5"/></name><operator pos:line="23" pos:column="5">-&gt;<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="7">append<pos:position pos:line="23" pos:column="13"/></name></name> <operator pos:line="23" pos:column="14">=<pos:position pos:line="23" pos:column="15"/></operator> <call><name pos:line="23" pos:column="16">safe_strdup<pos:position pos:line="23" pos:column="27"/></name> <argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">a<pos:position pos:line="23" pos:column="30"/></name></expr></argument>)<pos:position pos:line="23" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt>

  <return pos:line="25" pos:column="3">return <expr><name pos:line="25" pos:column="10">ci<pos:position pos:line="25" pos:column="12"/></name></expr>;<pos:position pos:line="25" pos:column="13"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
