<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1068_mutt-1.4.2.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">pop_fetch_data<pos:position pos:line="1" pos:column="19"/></name> <parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">POP_DATA<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">pop_data<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">query<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">msg<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>,
		    <parameter><function_decl><type><name pos:line="2" pos:column="21">int<pos:position pos:line="2" pos:column="24"/></name></type> (<modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier><name pos:line="2" pos:column="27">funct<pos:position pos:line="2" pos:column="32"/></name>) <parameter_list pos:line="2" pos:column="34">(<parameter><decl><type><name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">void<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list></function_decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">void<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">data<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">buf<pos:position pos:line="4" pos:column="11"/></name><index pos:line="4" pos:column="11">[<expr><name pos:line="4" pos:column="12">LONG_STRING<pos:position pos:line="4" pos:column="23"/></name></expr>]<pos:position pos:line="4" pos:column="24"/></index></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">inbuf<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">p<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">ret<pos:position pos:line="7" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="12">chunk<pos:position pos:line="7" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="19">line<pos:position pos:line="7" pos:column="23"/></name> <init pos:line="7" pos:column="24">= <expr><literal type="number" pos:line="7" pos:column="26">0<pos:position pos:line="7" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">lenbuf<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">strfcpy<pos:position pos:line="10" pos:column="10"/></name> <argument_list pos:line="10" pos:column="11">(<argument><expr><name pos:line="10" pos:column="12">buf<pos:position pos:line="10" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="17">query<pos:position pos:line="10" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="24">sizeof <argument_list pos:line="10" pos:column="31">(<argument><expr><name pos:line="10" pos:column="32">buf<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><name pos:line="11" pos:column="3">ret<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">=<pos:position pos:line="11" pos:column="8"/></operator> <call><name pos:line="11" pos:column="9">pop_query<pos:position pos:line="11" pos:column="18"/></name> <argument_list pos:line="11" pos:column="19">(<argument><expr><name pos:line="11" pos:column="20">pop_data<pos:position pos:line="11" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="30">buf<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="35">sizeof <argument_list pos:line="11" pos:column="42">(<argument><expr><name pos:line="11" pos:column="43">buf<pos:position pos:line="11" pos:column="46"/></name></expr></argument>)<pos:position pos:line="11" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="49"/></expr_stmt>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">ret<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">&lt;<pos:position pos:line="12" pos:column="15"/></operator> <literal type="number" pos:line="12" pos:column="13">0<pos:position pos:line="12" pos:column="14"/></literal></expr>)<pos:position pos:line="12" pos:column="15"/></condition><then pos:line="12" pos:column="15">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><name pos:line="13" pos:column="12">ret<pos:position pos:line="13" pos:column="15"/></name></expr>;<pos:position pos:line="13" pos:column="16"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="15" pos:column="3">inbuf<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <call><name pos:line="15" pos:column="11">safe_malloc<pos:position pos:line="15" pos:column="22"/></name> <argument_list pos:line="15" pos:column="23">(<argument><expr><sizeof pos:line="15" pos:column="24">sizeof <argument_list pos:line="15" pos:column="31">(<argument><expr><name pos:line="15" pos:column="32">buf<pos:position pos:line="15" pos:column="35"/></name></expr></argument>)<pos:position pos:line="15" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>

  <macro><name pos:line="17" pos:column="3">FOREVER<pos:position pos:line="17" pos:column="10"/></name></macro>
  <block pos:line="18" pos:column="3">{
    <expr_stmt><expr><name pos:line="19" pos:column="5">chunk<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <call><name pos:line="19" pos:column="13">mutt_socket_readln_d<pos:position pos:line="19" pos:column="33"/></name> <argument_list pos:line="19" pos:column="34">(<argument><expr><name pos:line="19" pos:column="35">buf<pos:position pos:line="19" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="40">sizeof <argument_list pos:line="19" pos:column="47">(<argument><expr><name pos:line="19" pos:column="48">buf<pos:position pos:line="19" pos:column="51"/></name></expr></argument>)<pos:position pos:line="19" pos:column="52"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="54">pop_data<pos:position pos:line="19" pos:column="62"/></name><operator pos:line="19" pos:column="62">-&gt;<pos:position pos:line="19" pos:column="67"/></operator><name pos:line="19" pos:column="64">conn<pos:position pos:line="19" pos:column="68"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="70">M_SOCK_LOG_HDR<pos:position pos:line="19" pos:column="84"/></name></expr></argument>)<pos:position pos:line="19" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="86"/></expr_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">chunk<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">&lt;<pos:position pos:line="20" pos:column="19"/></operator> <literal type="number" pos:line="20" pos:column="17">0<pos:position pos:line="20" pos:column="18"/></literal></expr>)<pos:position pos:line="20" pos:column="19"/></condition><then pos:line="20" pos:column="19">
    <block pos:line="21" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="22" pos:column="7">pop_data<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">-&gt;<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="17">status<pos:position pos:line="22" pos:column="23"/></name></name> <operator pos:line="22" pos:column="24">=<pos:position pos:line="22" pos:column="25"/></operator> <name pos:line="22" pos:column="26">POP_DISCONNECTED<pos:position pos:line="22" pos:column="42"/></name></expr>;<pos:position pos:line="22" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><name pos:line="23" pos:column="7">ret<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <operator pos:line="23" pos:column="13">-<pos:position pos:line="23" pos:column="14"/></operator><literal type="number" pos:line="23" pos:column="14">1<pos:position pos:line="23" pos:column="15"/></literal></expr>;<pos:position pos:line="23" pos:column="16"/></expr_stmt>
      <break pos:line="24" pos:column="7">break;<pos:position pos:line="24" pos:column="13"/></break>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="27" pos:column="5">p<pos:position pos:line="27" pos:column="6"/></name> <operator pos:line="27" pos:column="7">=<pos:position pos:line="27" pos:column="8"/></operator> <name pos:line="27" pos:column="9">buf<pos:position pos:line="27" pos:column="12"/></name></expr>;<pos:position pos:line="27" pos:column="13"/></expr_stmt>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><operator pos:line="28" pos:column="9">!<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">lenbuf<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">&amp;&amp;<pos:position pos:line="28" pos:column="27"/></operator> <name><name pos:line="28" pos:column="20">buf<pos:position pos:line="28" pos:column="23"/></name><index pos:line="28" pos:column="23">[<expr><literal type="number" pos:line="28" pos:column="24">0<pos:position pos:line="28" pos:column="25"/></literal></expr>]<pos:position pos:line="28" pos:column="26"/></index></name> <operator pos:line="28" pos:column="27">==<pos:position pos:line="28" pos:column="29"/></operator> <literal type="char" pos:line="28" pos:column="30">'.'<pos:position pos:line="28" pos:column="33"/></literal></expr>)<pos:position pos:line="28" pos:column="34"/></condition><then pos:line="28" pos:column="34">
    <block pos:line="29" pos:column="5">{
      <if pos:line="30" pos:column="7">if <condition pos:line="30" pos:column="10">(<expr><name><name pos:line="30" pos:column="11">buf<pos:position pos:line="30" pos:column="14"/></name><index pos:line="30" pos:column="14">[<expr><literal type="number" pos:line="30" pos:column="15">1<pos:position pos:line="30" pos:column="16"/></literal></expr>]<pos:position pos:line="30" pos:column="17"/></index></name> <operator pos:line="30" pos:column="18">!=<pos:position pos:line="30" pos:column="20"/></operator> <literal type="char" pos:line="30" pos:column="21">'.'<pos:position pos:line="30" pos:column="24"/></literal></expr>)<pos:position pos:line="30" pos:column="25"/></condition><then pos:line="30" pos:column="25">
	<block type="pseudo"><break pos:line="31" pos:column="9">break;<pos:position pos:line="31" pos:column="15"/></break></block></then></if>
      <expr_stmt><expr><name pos:line="32" pos:column="7">p<pos:position pos:line="32" pos:column="8"/></name><operator pos:line="32" pos:column="8">++<pos:position pos:line="32" pos:column="10"/></operator></expr>;<pos:position pos:line="32" pos:column="11"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">strfcpy<pos:position pos:line="35" pos:column="12"/></name> <argument_list pos:line="35" pos:column="13">(<argument><expr><name pos:line="35" pos:column="14">inbuf<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">+<pos:position pos:line="35" pos:column="21"/></operator> <name pos:line="35" pos:column="22">lenbuf<pos:position pos:line="35" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="30">p<pos:position pos:line="35" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="33">sizeof <argument_list pos:line="35" pos:column="40">(<argument><expr><name pos:line="35" pos:column="41">buf<pos:position pos:line="35" pos:column="44"/></name></expr></argument>)<pos:position pos:line="35" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="47"/></expr_stmt>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">chunk<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">&gt;=<pos:position pos:line="37" pos:column="20"/></operator> <sizeof pos:line="37" pos:column="18">sizeof <argument_list pos:line="37" pos:column="25">(<argument><expr><name pos:line="37" pos:column="26">buf<pos:position pos:line="37" pos:column="29"/></name></expr></argument>)<pos:position pos:line="37" pos:column="30"/></argument_list></sizeof></expr>)<pos:position pos:line="37" pos:column="31"/></condition><then pos:line="37" pos:column="31">
    <block pos:line="38" pos:column="5">{
      <expr_stmt><expr><name pos:line="39" pos:column="7">lenbuf<pos:position pos:line="39" pos:column="13"/></name> <operator pos:line="39" pos:column="14">+=<pos:position pos:line="39" pos:column="16"/></operator> <call><name pos:line="39" pos:column="17">strlen<pos:position pos:line="39" pos:column="23"/></name> <argument_list pos:line="39" pos:column="24">(<argument><expr><name pos:line="39" pos:column="25">p<pos:position pos:line="39" pos:column="26"/></name></expr></argument>)<pos:position pos:line="39" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then>
    <else pos:line="41" pos:column="5">else
    <block pos:line="42" pos:column="5">{
      <expr_stmt><expr><name pos:line="43" pos:column="7">line<pos:position pos:line="43" pos:column="11"/></name><operator pos:line="43" pos:column="11">++<pos:position pos:line="43" pos:column="13"/></operator></expr>;<pos:position pos:line="43" pos:column="14"/></expr_stmt>
      <if pos:line="44" pos:column="7">if <condition pos:line="44" pos:column="10">(<expr><name pos:line="44" pos:column="11">msg<pos:position pos:line="44" pos:column="14"/></name> <operator pos:line="44" pos:column="15">&amp;&amp;<pos:position pos:line="44" pos:column="25"/></operator> <name pos:line="44" pos:column="18">ReadInc<pos:position pos:line="44" pos:column="25"/></name> <operator pos:line="44" pos:column="26">&amp;&amp;<pos:position pos:line="44" pos:column="36"/></operator> <operator pos:line="44" pos:column="29">(<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="30">line<pos:position pos:line="44" pos:column="34"/></name> <operator pos:line="44" pos:column="35">%<pos:position pos:line="44" pos:column="36"/></operator> <name pos:line="44" pos:column="37">ReadInc<pos:position pos:line="44" pos:column="44"/></name> <operator pos:line="44" pos:column="45">==<pos:position pos:line="44" pos:column="47"/></operator> <literal type="number" pos:line="44" pos:column="48">0<pos:position pos:line="44" pos:column="49"/></literal><operator pos:line="44" pos:column="49">)<pos:position pos:line="44" pos:column="50"/></operator></expr>)<pos:position pos:line="44" pos:column="51"/></condition><then pos:line="44" pos:column="51">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="9">mutt_message<pos:position pos:line="45" pos:column="21"/></name> <argument_list pos:line="45" pos:column="22">(<argument><expr><literal type="string" pos:line="45" pos:column="23">"%s %d"<pos:position pos:line="45" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="32">msg<pos:position pos:line="45" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="37">line<pos:position pos:line="45" pos:column="41"/></name></expr></argument>)<pos:position pos:line="45" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="43"/></expr_stmt></block></then></if>
      <if pos:line="46" pos:column="7">if <condition pos:line="46" pos:column="10">(<expr><name pos:line="46" pos:column="11">ret<pos:position pos:line="46" pos:column="14"/></name> <operator pos:line="46" pos:column="15">==<pos:position pos:line="46" pos:column="17"/></operator> <literal type="number" pos:line="46" pos:column="18">0<pos:position pos:line="46" pos:column="19"/></literal> <operator pos:line="46" pos:column="20">&amp;&amp;<pos:position pos:line="46" pos:column="30"/></operator> <call><name pos:line="46" pos:column="23">funct<pos:position pos:line="46" pos:column="28"/></name> <argument_list pos:line="46" pos:column="29">(<argument><expr><name pos:line="46" pos:column="30">inbuf<pos:position pos:line="46" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="37">data<pos:position pos:line="46" pos:column="41"/></name></expr></argument>)<pos:position pos:line="46" pos:column="42"/></argument_list></call> <operator pos:line="46" pos:column="43">&lt;<pos:position pos:line="46" pos:column="47"/></operator> <literal type="number" pos:line="46" pos:column="45">0<pos:position pos:line="46" pos:column="46"/></literal></expr>)<pos:position pos:line="46" pos:column="47"/></condition><then pos:line="46" pos:column="47">
	<block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="9">ret<pos:position pos:line="47" pos:column="12"/></name> <operator pos:line="47" pos:column="13">=<pos:position pos:line="47" pos:column="14"/></operator> <operator pos:line="47" pos:column="15">-<pos:position pos:line="47" pos:column="16"/></operator><literal type="number" pos:line="47" pos:column="16">3<pos:position pos:line="47" pos:column="17"/></literal></expr>;<pos:position pos:line="47" pos:column="18"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name pos:line="48" pos:column="7">lenbuf<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">=<pos:position pos:line="48" pos:column="15"/></operator> <literal type="number" pos:line="48" pos:column="16">0<pos:position pos:line="48" pos:column="17"/></literal></expr>;<pos:position pos:line="48" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="51" pos:column="5">safe_realloc<pos:position pos:line="51" pos:column="17"/></name> <argument_list pos:line="51" pos:column="18">(<argument><expr><operator pos:line="51" pos:column="19">(<pos:position pos:line="51" pos:column="20"/></operator><name pos:line="51" pos:column="20">void<pos:position pos:line="51" pos:column="24"/></name> <operator pos:line="51" pos:column="25">*<pos:position pos:line="51" pos:column="26"/></operator><operator pos:line="51" pos:column="26">*<pos:position pos:line="51" pos:column="27"/></operator><operator pos:line="51" pos:column="27">)<pos:position pos:line="51" pos:column="28"/></operator> <operator pos:line="51" pos:column="29">&amp;<pos:position pos:line="51" pos:column="34"/></operator><name pos:line="51" pos:column="30">inbuf<pos:position pos:line="51" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="37">lenbuf<pos:position pos:line="51" pos:column="43"/></name> <operator pos:line="51" pos:column="44">+<pos:position pos:line="51" pos:column="45"/></operator> <sizeof pos:line="51" pos:column="46">sizeof <argument_list pos:line="51" pos:column="53">(<argument><expr><name pos:line="51" pos:column="54">buf<pos:position pos:line="51" pos:column="57"/></name></expr></argument>)<pos:position pos:line="51" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="51" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="60"/></expr_stmt>
  }<pos:position pos:line="52" pos:column="4"/></block>

  <expr_stmt><expr><call><name pos:line="54" pos:column="3">FREE<pos:position pos:line="54" pos:column="7"/></name> <argument_list pos:line="54" pos:column="8">(<argument><expr><operator pos:line="54" pos:column="9">&amp;<pos:position pos:line="54" pos:column="14"/></operator><name pos:line="54" pos:column="10">inbuf<pos:position pos:line="54" pos:column="15"/></name></expr></argument>)<pos:position pos:line="54" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="17"/></expr_stmt>
  <return pos:line="55" pos:column="3">return <expr><name pos:line="55" pos:column="10">ret<pos:position pos:line="55" pos:column="13"/></name></expr>;<pos:position pos:line="55" pos:column="14"/></return>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
