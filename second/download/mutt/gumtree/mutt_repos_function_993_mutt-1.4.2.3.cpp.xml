<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_993_mutt-1.4.2.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">mutt_nss_socket_open<pos:position pos:line="2" pos:column="21"/></name> <parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">CONNECTION<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type> <name pos:line="2" pos:column="36">con<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">mutt_nss_t<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">sockdata<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">PRNetAddr<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">addr<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">hostent<pos:position pos:line="6" pos:column="17"/></name></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier></type><name pos:line="6" pos:column="19">he<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">memset<pos:position pos:line="8" pos:column="9"/></name> <argument_list pos:line="8" pos:column="10">(<argument><expr><operator pos:line="8" pos:column="11">&amp;<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="12">addr<pos:position pos:line="8" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="21">sizeof <argument_list pos:line="8" pos:column="28">(<argument><expr><name pos:line="8" pos:column="29">addr<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="9" pos:column="3">addr<pos:position pos:line="9" pos:column="7"/></name><operator pos:line="9" pos:column="7">.<pos:position pos:line="9" pos:column="8"/></operator><name pos:line="9" pos:column="8">inet<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">.<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">family<pos:position pos:line="9" pos:column="19"/></name></name> <operator pos:line="9" pos:column="20">=<pos:position pos:line="9" pos:column="21"/></operator> <name pos:line="9" pos:column="22">AF_INET<pos:position pos:line="9" pos:column="29"/></name></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="10" pos:column="3">addr<pos:position pos:line="10" pos:column="7"/></name><operator pos:line="10" pos:column="7">.<pos:position pos:line="10" pos:column="8"/></operator><name pos:line="10" pos:column="8">inet<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">.<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">port<pos:position pos:line="10" pos:column="17"/></name></name> <operator pos:line="10" pos:column="18">=<pos:position pos:line="10" pos:column="19"/></operator> <call><name pos:line="10" pos:column="20">PR_htons<pos:position pos:line="10" pos:column="28"/></name> <argument_list pos:line="10" pos:column="29">(<argument><expr><name><name pos:line="10" pos:column="30">con<pos:position pos:line="10" pos:column="33"/></name><operator pos:line="10" pos:column="33">-&gt;<pos:position pos:line="10" pos:column="38"/></operator><name pos:line="10" pos:column="35">account<pos:position pos:line="10" pos:column="42"/></name><operator pos:line="10" pos:column="42">.<pos:position pos:line="10" pos:column="43"/></operator><name pos:line="10" pos:column="43">port<pos:position pos:line="10" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><name pos:line="11" pos:column="3">he<pos:position pos:line="11" pos:column="5"/></name> <operator pos:line="11" pos:column="6">=<pos:position pos:line="11" pos:column="7"/></operator> <call><name pos:line="11" pos:column="8">gethostbyname<pos:position pos:line="11" pos:column="21"/></name> <argument_list pos:line="11" pos:column="22">(<argument><expr><name><name pos:line="11" pos:column="23">con<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">-&gt;<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="28">account<pos:position pos:line="11" pos:column="35"/></name><operator pos:line="11" pos:column="35">.<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="36">host<pos:position pos:line="11" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><operator pos:line="12" pos:column="7">!<pos:position pos:line="12" pos:column="8"/></operator><name pos:line="12" pos:column="8">he<pos:position pos:line="12" pos:column="10"/></name></expr>)<pos:position pos:line="12" pos:column="11"/></condition><then pos:line="12" pos:column="11">
  <block pos:line="13" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">mutt_error<pos:position pos:line="14" pos:column="15"/></name> <argument_list pos:line="14" pos:column="16">(<argument><expr><call><name pos:line="14" pos:column="17">_<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><literal type="string" pos:line="14" pos:column="19">"Unable to find ip for host %s"<pos:position pos:line="14" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="53">con<pos:position pos:line="14" pos:column="56"/></name><operator pos:line="14" pos:column="56">-&gt;<pos:position pos:line="14" pos:column="61"/></operator><name pos:line="14" pos:column="58">account<pos:position pos:line="14" pos:column="65"/></name><operator pos:line="14" pos:column="65">.<pos:position pos:line="14" pos:column="66"/></operator><name pos:line="14" pos:column="66">host<pos:position pos:line="14" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="72"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><operator pos:line="15" pos:column="12">-<pos:position pos:line="15" pos:column="13"/></operator><literal type="number" pos:line="15" pos:column="13">1<pos:position pos:line="15" pos:column="14"/></literal></expr>;<pos:position pos:line="15" pos:column="15"/></return>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="17" pos:column="3">addr<pos:position pos:line="17" pos:column="7"/></name><operator pos:line="17" pos:column="7">.<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">inet<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">.<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">ip<pos:position pos:line="17" pos:column="15"/></name></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <operator pos:line="17" pos:column="18">*<pos:position pos:line="17" pos:column="19"/></operator><operator pos:line="17" pos:column="19">(<pos:position pos:line="17" pos:column="20"/></operator><operator pos:line="17" pos:column="20">(<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="21">int<pos:position pos:line="17" pos:column="24"/></name> <operator pos:line="17" pos:column="25">*<pos:position pos:line="17" pos:column="26"/></operator><operator pos:line="17" pos:column="26">)<pos:position pos:line="17" pos:column="27"/></operator> <name><name pos:line="17" pos:column="28">he<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">-&gt;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="32">h_addr_list<pos:position pos:line="17" pos:column="43"/></name><index pos:line="17" pos:column="43">[<expr><literal type="number" pos:line="17" pos:column="44">0<pos:position pos:line="17" pos:column="45"/></literal></expr>]<pos:position pos:line="17" pos:column="46"/></index></name><operator pos:line="17" pos:column="46">)<pos:position pos:line="17" pos:column="47"/></operator></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>

  <expr_stmt><expr><name pos:line="19" pos:column="3">sockdata<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <call><name pos:line="19" pos:column="14">safe_calloc<pos:position pos:line="19" pos:column="25"/></name> <argument_list pos:line="19" pos:column="26">(<argument><expr><literal type="number" pos:line="19" pos:column="27">1<pos:position pos:line="19" pos:column="28"/></literal></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="30">sizeof <argument_list pos:line="19" pos:column="37">(<argument><expr><name pos:line="19" pos:column="38">mutt_nss_t<pos:position pos:line="19" pos:column="48"/></name></expr></argument>)<pos:position pos:line="19" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="51"/></expr_stmt>

  <do pos:line="21" pos:column="3">do
  <block pos:line="22" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">sockdata<pos:position pos:line="23" pos:column="13"/></name><operator pos:line="23" pos:column="13">-&gt;<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="15">fd<pos:position pos:line="23" pos:column="17"/></name></name> <operator pos:line="23" pos:column="18">=<pos:position pos:line="23" pos:column="19"/></operator> <call><name pos:line="23" pos:column="20">PR_NewTCPSocket<pos:position pos:line="23" pos:column="35"/></name> <argument_list pos:line="23" pos:column="36">()<pos:position pos:line="23" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="39"/></expr_stmt>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name><name pos:line="24" pos:column="9">sockdata<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">-&gt;<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="19">fd<pos:position pos:line="24" pos:column="21"/></name></name> <operator pos:line="24" pos:column="22">==<pos:position pos:line="24" pos:column="24"/></operator> <name pos:line="24" pos:column="25">NULL<pos:position pos:line="24" pos:column="29"/></name></expr>)<pos:position pos:line="24" pos:column="30"/></condition><then pos:line="24" pos:column="30">
    <block pos:line="25" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">mutt_error<pos:position pos:line="26" pos:column="17"/></name> <argument_list pos:line="26" pos:column="18">(<argument><expr><call><name pos:line="26" pos:column="19">_<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><literal type="string" pos:line="26" pos:column="21">"PR_NewTCPSocket failed."<pos:position pos:line="26" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="49"/></expr_stmt>
      <break pos:line="27" pos:column="7">break;<pos:position pos:line="27" pos:column="13"/></break>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="29" pos:column="5">/* make this a SSL socket */</comment>
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">sockdata<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">-&gt;<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="15">fd<pos:position pos:line="30" pos:column="17"/></name></name> <operator pos:line="30" pos:column="18">=<pos:position pos:line="30" pos:column="19"/></operator> <call><name pos:line="30" pos:column="20">SSL_ImportFD<pos:position pos:line="30" pos:column="32"/></name> <argument_list pos:line="30" pos:column="33">(<argument><expr><name pos:line="30" pos:column="34">NULL<pos:position pos:line="30" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="40">sockdata<pos:position pos:line="30" pos:column="48"/></name><operator pos:line="30" pos:column="48">-&gt;<pos:position pos:line="30" pos:column="53"/></operator><name pos:line="30" pos:column="50">fd<pos:position pos:line="30" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="54"/></expr_stmt>
    
    <comment type="block" pos:line="32" pos:column="5">/* set SSL version options based upon user's preferences */</comment>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><operator pos:line="33" pos:column="9">!<pos:position pos:line="33" pos:column="10"/></operator><call><name pos:line="33" pos:column="10">option<pos:position pos:line="33" pos:column="16"/></name> <argument_list pos:line="33" pos:column="17">(<argument><expr><name pos:line="33" pos:column="18">OPTTLSV1<pos:position pos:line="33" pos:column="26"/></name></expr></argument>)<pos:position pos:line="33" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="28"/></condition><then pos:line="33" pos:column="28">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="7">SSL_OptionSet<pos:position pos:line="34" pos:column="20"/></name> <argument_list pos:line="34" pos:column="21">(<argument><expr><name><name pos:line="34" pos:column="22">sockdata<pos:position pos:line="34" pos:column="30"/></name><operator pos:line="34" pos:column="30">-&gt;<pos:position pos:line="34" pos:column="35"/></operator><name pos:line="34" pos:column="32">fd<pos:position pos:line="34" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="36">SSL_ENABLE_TLS<pos:position pos:line="34" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="52">PR_FALSE<pos:position pos:line="34" pos:column="60"/></name></expr></argument>)<pos:position pos:line="34" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="62"/></expr_stmt></block></then></if>
    
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><operator pos:line="36" pos:column="9">!<pos:position pos:line="36" pos:column="10"/></operator><call><name pos:line="36" pos:column="10">option<pos:position pos:line="36" pos:column="16"/></name> <argument_list pos:line="36" pos:column="17">(<argument><expr><name pos:line="36" pos:column="18">OPTSSLV2<pos:position pos:line="36" pos:column="26"/></name></expr></argument>)<pos:position pos:line="36" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="28"/></condition><then pos:line="36" pos:column="28">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="7">SSL_OptionSet<pos:position pos:line="37" pos:column="20"/></name> <argument_list pos:line="37" pos:column="21">(<argument><expr><name><name pos:line="37" pos:column="22">sockdata<pos:position pos:line="37" pos:column="30"/></name><operator pos:line="37" pos:column="30">-&gt;<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="32">fd<pos:position pos:line="37" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="36">SSL_ENABLE_SSL2<pos:position pos:line="37" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="53">PR_FALSE<pos:position pos:line="37" pos:column="61"/></name></expr></argument>)<pos:position pos:line="37" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="63"/></expr_stmt></block></then></if>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><operator pos:line="39" pos:column="9">!<pos:position pos:line="39" pos:column="10"/></operator><call><name pos:line="39" pos:column="10">option<pos:position pos:line="39" pos:column="16"/></name> <argument_list pos:line="39" pos:column="17">(<argument><expr><name pos:line="39" pos:column="18">OPTSSLV3<pos:position pos:line="39" pos:column="26"/></name></expr></argument>)<pos:position pos:line="39" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="28"/></condition><then pos:line="39" pos:column="28">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="7">SSL_OptionSet<pos:position pos:line="40" pos:column="20"/></name> <argument_list pos:line="40" pos:column="21">(<argument><expr><name><name pos:line="40" pos:column="22">sockdata<pos:position pos:line="40" pos:column="30"/></name><operator pos:line="40" pos:column="30">-&gt;<pos:position pos:line="40" pos:column="35"/></operator><name pos:line="40" pos:column="32">fd<pos:position pos:line="40" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="36">SSL_ENABLE_SSL3<pos:position pos:line="40" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="53">PR_FALSE<pos:position pos:line="40" pos:column="61"/></name></expr></argument>)<pos:position pos:line="40" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="63"/></expr_stmt></block></then></if>
    
    <comment type="block" pos:line="42" pos:column="5">/* set the host we were attempting to connect to in order to verify
     * the name in the certificate we get back.
     */</comment>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><call><name pos:line="45" pos:column="9">SSL_SetURL<pos:position pos:line="45" pos:column="19"/></name> <argument_list pos:line="45" pos:column="20">(<argument><expr><name><name pos:line="45" pos:column="21">sockdata<pos:position pos:line="45" pos:column="29"/></name><operator pos:line="45" pos:column="29">-&gt;<pos:position pos:line="45" pos:column="34"/></operator><name pos:line="45" pos:column="31">fd<pos:position pos:line="45" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="35">con<pos:position pos:line="45" pos:column="38"/></name><operator pos:line="45" pos:column="38">-&gt;<pos:position pos:line="45" pos:column="43"/></operator><name pos:line="45" pos:column="40">account<pos:position pos:line="45" pos:column="47"/></name><operator pos:line="45" pos:column="47">.<pos:position pos:line="45" pos:column="48"/></operator><name pos:line="45" pos:column="48">host<pos:position pos:line="45" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="54"/></condition><then pos:line="45" pos:column="54">
    <block pos:line="46" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="47" pos:column="7">mutt_nss_error<pos:position pos:line="47" pos:column="21"/></name> <argument_list pos:line="47" pos:column="22">(<argument><expr><literal type="string" pos:line="47" pos:column="23">"SSL_SetURL"<pos:position pos:line="47" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="37"/></expr_stmt>
      <break pos:line="48" pos:column="7">break;<pos:position pos:line="48" pos:column="13"/></break>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="51" pos:column="5">/* we don't need no stinking pin.  we don't authenticate ourself
     * via SSL.
     */</comment>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">SSL_SetPKCS11PinArg<pos:position pos:line="54" pos:column="24"/></name> <argument_list pos:line="54" pos:column="25">(<argument><expr><name><name pos:line="54" pos:column="26">sockdata<pos:position pos:line="54" pos:column="34"/></name><operator pos:line="54" pos:column="34">-&gt;<pos:position pos:line="54" pos:column="39"/></operator><name pos:line="54" pos:column="36">fd<pos:position pos:line="54" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="40">0<pos:position pos:line="54" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="43"/></expr_stmt>
    
    <expr_stmt><expr><name><name pos:line="56" pos:column="5">sockdata<pos:position pos:line="56" pos:column="13"/></name><operator pos:line="56" pos:column="13">-&gt;<pos:position pos:line="56" pos:column="18"/></operator><name pos:line="56" pos:column="15">db<pos:position pos:line="56" pos:column="17"/></name></name> <operator pos:line="56" pos:column="18">=<pos:position pos:line="56" pos:column="19"/></operator> <call><name pos:line="56" pos:column="20">CERT_GetDefaultCertDB<pos:position pos:line="56" pos:column="41"/></name> <argument_list pos:line="56" pos:column="42">()<pos:position pos:line="56" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="45"/></expr_stmt>
    
    <comment type="block" pos:line="58" pos:column="5">/* use the default supplied hook.  it takes an argument to our
     * certificate database.  the manual lies, you can't really specify
     * NULL for the callback to get the default!
     */</comment>
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">SSL_AuthCertificateHook<pos:position pos:line="62" pos:column="28"/></name> <argument_list pos:line="62" pos:column="29">(<argument><expr><name><name pos:line="62" pos:column="30">sockdata<pos:position pos:line="62" pos:column="38"/></name><operator pos:line="62" pos:column="38">-&gt;<pos:position pos:line="62" pos:column="43"/></operator><name pos:line="62" pos:column="40">fd<pos:position pos:line="62" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="44">SSL_AuthCertificate<pos:position pos:line="62" pos:column="63"/></name></expr></argument>,
			     <argument><expr><name><name pos:line="63" pos:column="30">sockdata<pos:position pos:line="63" pos:column="38"/></name><operator pos:line="63" pos:column="38">-&gt;<pos:position pos:line="63" pos:column="43"/></operator><name pos:line="63" pos:column="40">db<pos:position pos:line="63" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="44"/></expr_stmt>
    <comment type="block" pos:line="64" pos:column="5">/* set the callback to be used when SSL_AuthCertificate() fails.  this
     * allows us to override and insert the cert back into the db
     */</comment>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">SSL_BadCertHook<pos:position pos:line="67" pos:column="20"/></name> <argument_list pos:line="67" pos:column="21">(<argument><expr><name><name pos:line="67" pos:column="22">sockdata<pos:position pos:line="67" pos:column="30"/></name><operator pos:line="67" pos:column="30">-&gt;<pos:position pos:line="67" pos:column="35"/></operator><name pos:line="67" pos:column="32">fd<pos:position pos:line="67" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="36">mutt_nss_bad_cert<pos:position pos:line="67" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="55">sockdata<pos:position pos:line="67" pos:column="63"/></name><operator pos:line="67" pos:column="63">-&gt;<pos:position pos:line="67" pos:column="68"/></operator><name pos:line="67" pos:column="65">db<pos:position pos:line="67" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="69"/></expr_stmt>
    
    <if pos:line="69" pos:column="5">if <condition pos:line="69" pos:column="8">(<expr><call><name pos:line="69" pos:column="9">PR_Connect<pos:position pos:line="69" pos:column="19"/></name> <argument_list pos:line="69" pos:column="20">(<argument><expr><name><name pos:line="69" pos:column="21">sockdata<pos:position pos:line="69" pos:column="29"/></name><operator pos:line="69" pos:column="29">-&gt;<pos:position pos:line="69" pos:column="34"/></operator><name pos:line="69" pos:column="31">fd<pos:position pos:line="69" pos:column="33"/></name></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="35">&amp;<pos:position pos:line="69" pos:column="40"/></operator><name pos:line="69" pos:column="36">addr<pos:position pos:line="69" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="42">PR_INTERVAL_NO_TIMEOUT<pos:position pos:line="69" pos:column="64"/></name></expr></argument>)<pos:position pos:line="69" pos:column="65"/></argument_list></call> <operator pos:line="69" pos:column="66">==<pos:position pos:line="69" pos:column="68"/></operator>
	<name pos:line="70" pos:column="9">PR_FAILURE<pos:position pos:line="70" pos:column="19"/></name></expr>)<pos:position pos:line="70" pos:column="20"/></condition><then pos:line="70" pos:column="20">
    <block pos:line="71" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="72" pos:column="7">mutt_error<pos:position pos:line="72" pos:column="17"/></name> <argument_list pos:line="72" pos:column="18">(<argument><expr><call><name pos:line="72" pos:column="19">_<pos:position pos:line="72" pos:column="20"/></name><argument_list pos:line="72" pos:column="20">(<argument><expr><literal type="string" pos:line="72" pos:column="21">"Unable to connect to host %s"<pos:position pos:line="72" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="54">con<pos:position pos:line="72" pos:column="57"/></name><operator pos:line="72" pos:column="57">-&gt;<pos:position pos:line="72" pos:column="62"/></operator><name pos:line="72" pos:column="59">account<pos:position pos:line="72" pos:column="66"/></name><operator pos:line="72" pos:column="66">.<pos:position pos:line="72" pos:column="67"/></operator><name pos:line="72" pos:column="67">host<pos:position pos:line="72" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="73"/></expr_stmt>
      <break pos:line="73" pos:column="7">break;<pos:position pos:line="73" pos:column="13"/></break>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>
    
    <comment type="block" pos:line="76" pos:column="5">/* store the extra info in the CONNECTION struct for later use. */</comment>
    <expr_stmt><expr><name><name pos:line="77" pos:column="5">con<pos:position pos:line="77" pos:column="8"/></name><operator pos:line="77" pos:column="8">-&gt;<pos:position pos:line="77" pos:column="13"/></operator><name pos:line="77" pos:column="10">sockdata<pos:position pos:line="77" pos:column="18"/></name></name> <operator pos:line="77" pos:column="19">=<pos:position pos:line="77" pos:column="20"/></operator> <name pos:line="77" pos:column="21">sockdata<pos:position pos:line="77" pos:column="29"/></name></expr>;<pos:position pos:line="77" pos:column="30"/></expr_stmt>
    
    <comment type="block" pos:line="79" pos:column="5">/* HACK.  some of the higher level calls in mutt_socket.c depend on this
     * being &gt;0 when we are in the connected state.  we just set this to
     * an arbitrary value to avoid hitting that bug, since we neve have the
     * real fd.
     */</comment>
    <expr_stmt><expr><name><name pos:line="84" pos:column="5">con<pos:position pos:line="84" pos:column="8"/></name><operator pos:line="84" pos:column="8">-&gt;<pos:position pos:line="84" pos:column="13"/></operator><name pos:line="84" pos:column="10">fd<pos:position pos:line="84" pos:column="12"/></name></name> <operator pos:line="84" pos:column="13">=<pos:position pos:line="84" pos:column="14"/></operator> <literal type="number" pos:line="84" pos:column="15">42<pos:position pos:line="84" pos:column="17"/></literal></expr>;<pos:position pos:line="84" pos:column="18"/></expr_stmt>
    
    <comment type="block" pos:line="86" pos:column="5">/* success */</comment>
    <return pos:line="87" pos:column="5">return <expr><literal type="number" pos:line="87" pos:column="12">0<pos:position pos:line="87" pos:column="13"/></literal></expr>;<pos:position pos:line="87" pos:column="14"/></return>
  }<pos:position pos:line="88" pos:column="4"/></block>
  while <condition pos:line="89" pos:column="9">(<expr><literal type="number" pos:line="89" pos:column="10">0<pos:position pos:line="89" pos:column="11"/></literal></expr>)<pos:position pos:line="89" pos:column="12"/></condition>;<pos:position pos:line="89" pos:column="13"/></do>
  
  <comment type="block" pos:line="91" pos:column="3">/* we get here when we had an oops.  clean up the mess. */</comment>

  <if pos:line="93" pos:column="3">if <condition pos:line="93" pos:column="6">(<expr><name pos:line="93" pos:column="7">sockdata<pos:position pos:line="93" pos:column="15"/></name></expr>)<pos:position pos:line="93" pos:column="16"/></condition><then pos:line="93" pos:column="16">
  <block pos:line="94" pos:column="3">{
    <if pos:line="95" pos:column="5">if <condition pos:line="95" pos:column="8">(<expr><name><name pos:line="95" pos:column="9">sockdata<pos:position pos:line="95" pos:column="17"/></name><operator pos:line="95" pos:column="17">-&gt;<pos:position pos:line="95" pos:column="22"/></operator><name pos:line="95" pos:column="19">fd<pos:position pos:line="95" pos:column="21"/></name></name></expr>)<pos:position pos:line="95" pos:column="22"/></condition><then pos:line="95" pos:column="22">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="96" pos:column="7">PR_Close<pos:position pos:line="96" pos:column="15"/></name> <argument_list pos:line="96" pos:column="16">(<argument><expr><name><name pos:line="96" pos:column="17">sockdata<pos:position pos:line="96" pos:column="25"/></name><operator pos:line="96" pos:column="25">-&gt;<pos:position pos:line="96" pos:column="30"/></operator><name pos:line="96" pos:column="27">fd<pos:position pos:line="96" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="96" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="31"/></expr_stmt></block></then></if>
    <if pos:line="97" pos:column="5">if <condition pos:line="97" pos:column="8">(<expr><name><name pos:line="97" pos:column="9">sockdata<pos:position pos:line="97" pos:column="17"/></name><operator pos:line="97" pos:column="17">-&gt;<pos:position pos:line="97" pos:column="22"/></operator><name pos:line="97" pos:column="19">db<pos:position pos:line="97" pos:column="21"/></name></name></expr>)<pos:position pos:line="97" pos:column="22"/></condition><then pos:line="97" pos:column="22">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="98" pos:column="7">CERT_ClosePermCertDB<pos:position pos:line="98" pos:column="27"/></name> <argument_list pos:line="98" pos:column="28">(<argument><expr><name><name pos:line="98" pos:column="29">sockdata<pos:position pos:line="98" pos:column="37"/></name><operator pos:line="98" pos:column="37">-&gt;<pos:position pos:line="98" pos:column="42"/></operator><name pos:line="98" pos:column="39">db<pos:position pos:line="98" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="98" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="43"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="99" pos:column="5">safe_free<pos:position pos:line="99" pos:column="14"/></name> <argument_list pos:line="99" pos:column="15">(<argument><expr><operator pos:line="99" pos:column="16">(<pos:position pos:line="99" pos:column="17"/></operator><name pos:line="99" pos:column="17">void<pos:position pos:line="99" pos:column="21"/></name> <operator pos:line="99" pos:column="22">*<pos:position pos:line="99" pos:column="23"/></operator><operator pos:line="99" pos:column="23">*<pos:position pos:line="99" pos:column="24"/></operator><operator pos:line="99" pos:column="24">)<pos:position pos:line="99" pos:column="25"/></operator> <operator pos:line="99" pos:column="26">&amp;<pos:position pos:line="99" pos:column="31"/></operator><name pos:line="99" pos:column="27">sockdata<pos:position pos:line="99" pos:column="35"/></name></expr></argument>)<pos:position pos:line="99" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="100" pos:column="4"/></block></then></if>
  <return pos:line="101" pos:column="3">return <expr><operator pos:line="101" pos:column="10">-<pos:position pos:line="101" pos:column="11"/></operator><literal type="number" pos:line="101" pos:column="11">1<pos:position pos:line="101" pos:column="12"/></literal></expr>;<pos:position pos:line="101" pos:column="13"/></return>
}<pos:position pos:line="102" pos:column="2"/></block></function></unit>
