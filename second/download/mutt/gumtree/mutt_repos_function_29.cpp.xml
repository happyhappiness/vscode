<function xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position"><type><specifier pos:line="5429" pos:column="1">const<pos:position pos:line="5429" pos:column="6"/></specifier> <name pos:line="5429" pos:column="7">char<pos:position pos:line="5429" pos:column="11"/></name> <modifier pos:line="5429" pos:column="12">*<pos:position pos:line="5429" pos:column="13"/></modifier></type>
<name pos:line="5430" pos:column="1">re_compile_pattern<pos:position pos:line="5430" pos:column="19"/></name> <parameter_list pos:line="5430" pos:column="20">(<parameter><decl><type><name pos:line="5430" pos:column="21">pattern<pos:position pos:line="5430" pos:column="28"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="5430" pos:column="30">length<pos:position pos:line="5430" pos:column="36"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="5430" pos:column="38">bufp<pos:position pos:line="5430" pos:column="42"/></name></type></decl></parameter>)<pos:position pos:line="5430" pos:column="43"/></parameter_list>
     <decl_stmt><decl><type><specifier pos:line="5431" pos:column="6">const<pos:position pos:line="5431" pos:column="11"/></specifier> <name pos:line="5431" pos:column="12">char<pos:position pos:line="5431" pos:column="16"/></name> <modifier pos:line="5431" pos:column="17">*<pos:position pos:line="5431" pos:column="18"/></modifier></type><name pos:line="5431" pos:column="18">pattern<pos:position pos:line="5431" pos:column="25"/></name></decl>;<pos:position pos:line="5431" pos:column="26"/></decl_stmt>
     <decl_stmt><decl><type><name pos:line="5432" pos:column="6">size_t<pos:position pos:line="5432" pos:column="12"/></name></type> <name pos:line="5432" pos:column="13">length<pos:position pos:line="5432" pos:column="19"/></name></decl>;<pos:position pos:line="5432" pos:column="20"/></decl_stmt>
     <decl_stmt><decl><type><name><name pos:line="5433" pos:column="6">struct<pos:position pos:line="5433" pos:column="12"/></name> <name pos:line="5433" pos:column="13">re_pattern_buffer<pos:position pos:line="5433" pos:column="30"/></name></name> <modifier pos:line="5433" pos:column="31">*<pos:position pos:line="5433" pos:column="32"/></modifier></type><name pos:line="5433" pos:column="32">bufp<pos:position pos:line="5433" pos:column="36"/></name></decl>;<pos:position pos:line="5433" pos:column="37"/></decl_stmt>
<block pos:line="5434" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5435" pos:column="3">reg_errcode_t<pos:position pos:line="5435" pos:column="16"/></name></type> <name pos:line="5435" pos:column="17">ret<pos:position pos:line="5435" pos:column="20"/></name></decl>;<pos:position pos:line="5435" pos:column="21"/></decl_stmt>

  <comment type="block" pos:line="5437" pos:column="3">/* GNU code is written to assume at least RE_NREGS registers will be set
     (and at least one extra will be -1).  */</comment>
  <expr_stmt><expr><name><name pos:line="5439" pos:column="3">bufp<pos:position pos:line="5439" pos:column="7"/></name><operator pos:line="5439" pos:column="7">-&gt;<pos:position pos:line="5439" pos:column="12"/></operator><name pos:line="5439" pos:column="9">regs_allocated<pos:position pos:line="5439" pos:column="23"/></name></name> <operator pos:line="5439" pos:column="24">=<pos:position pos:line="5439" pos:column="25"/></operator> <name pos:line="5439" pos:column="26">REGS_UNALLOCATED<pos:position pos:line="5439" pos:column="42"/></name></expr>;<pos:position pos:line="5439" pos:column="43"/></expr_stmt>

  <comment type="block" pos:line="5441" pos:column="3">/* And GNU code determines whether or not to get register information
     by passing null for the REGS argument to re_match, etc., not by
     setting no_sub.  */</comment>
  <expr_stmt><expr><name><name pos:line="5444" pos:column="3">bufp<pos:position pos:line="5444" pos:column="7"/></name><operator pos:line="5444" pos:column="7">-&gt;<pos:position pos:line="5444" pos:column="12"/></operator><name pos:line="5444" pos:column="9">no_sub<pos:position pos:line="5444" pos:column="15"/></name></name> <operator pos:line="5444" pos:column="16">=<pos:position pos:line="5444" pos:column="17"/></operator> <literal type="number" pos:line="5444" pos:column="18">0<pos:position pos:line="5444" pos:column="19"/></literal></expr>;<pos:position pos:line="5444" pos:column="20"/></expr_stmt>

  <comment type="block" pos:line="5446" pos:column="3">/* Match anchors at newline.  */</comment>
  <expr_stmt><expr><name><name pos:line="5447" pos:column="3">bufp<pos:position pos:line="5447" pos:column="7"/></name><operator pos:line="5447" pos:column="7">-&gt;<pos:position pos:line="5447" pos:column="12"/></operator><name pos:line="5447" pos:column="9">newline_anchor<pos:position pos:line="5447" pos:column="23"/></name></name> <operator pos:line="5447" pos:column="24">=<pos:position pos:line="5447" pos:column="25"/></operator> <literal type="number" pos:line="5447" pos:column="26">1<pos:position pos:line="5447" pos:column="27"/></literal></expr>;<pos:position pos:line="5447" pos:column="28"/></expr_stmt>

  <expr_stmt><expr><name pos:line="5449" pos:column="3">ret<pos:position pos:line="5449" pos:column="6"/></name> <operator pos:line="5449" pos:column="7">=<pos:position pos:line="5449" pos:column="8"/></operator> <call><name pos:line="5449" pos:column="9">regex_compile<pos:position pos:line="5449" pos:column="22"/></name> <argument_list pos:line="5449" pos:column="23">(<argument><expr><name pos:line="5449" pos:column="24">pattern<pos:position pos:line="5449" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="5449" pos:column="33">length<pos:position pos:line="5449" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="5449" pos:column="41">re_syntax_options<pos:position pos:line="5449" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="5449" pos:column="60">bufp<pos:position pos:line="5449" pos:column="64"/></name></expr></argument>)<pos:position pos:line="5449" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="5449" pos:column="66"/></expr_stmt>

  <if pos:line="5451" pos:column="3">if <condition pos:line="5451" pos:column="6">(<expr><operator pos:line="5451" pos:column="7">!<pos:position pos:line="5451" pos:column="8"/></operator><name pos:line="5451" pos:column="8">ret<pos:position pos:line="5451" pos:column="11"/></name></expr>)<pos:position pos:line="5451" pos:column="12"/></condition><then pos:line="5451" pos:column="12">
    <block type="pseudo"><return pos:line="5452" pos:column="5">return <expr><name pos:line="5452" pos:column="12">NULL<pos:position pos:line="5452" pos:column="16"/></name></expr>;<pos:position pos:line="5452" pos:column="17"/></return></block></then></if>
  <return pos:line="5453" pos:column="3">return <expr><call><name pos:line="5453" pos:column="10">gettext<pos:position pos:line="5453" pos:column="17"/></name> <argument_list pos:line="5453" pos:column="18">(<argument><expr><name><name pos:line="5453" pos:column="19">re_error_msgid<pos:position pos:line="5453" pos:column="33"/></name><index pos:line="5453" pos:column="33">[<expr><operator pos:line="5453" pos:column="34">(<pos:position pos:line="5453" pos:column="35"/></operator><name pos:line="5453" pos:column="35">int<pos:position pos:line="5453" pos:column="38"/></name><operator pos:line="5453" pos:column="38">)<pos:position pos:line="5453" pos:column="39"/></operator> <name pos:line="5453" pos:column="40">ret<pos:position pos:line="5453" pos:column="43"/></name></expr>]<pos:position pos:line="5453" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="5453" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="5453" pos:column="46"/></return>
}<pos:position pos:line="5454" pos:column="2"/></block></function>
