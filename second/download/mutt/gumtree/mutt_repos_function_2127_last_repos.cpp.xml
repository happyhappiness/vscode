<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2127_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">imap_auth_res_t<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">imap_auth_anon<pos:position pos:line="1" pos:column="31"/></name> <parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">IMAP_DATA<pos:position pos:line="1" pos:column="42"/></name><modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type> <name pos:line="1" pos:column="44">idata<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="51">const<pos:position pos:line="1" pos:column="56"/></specifier> <name pos:line="1" pos:column="57">char<pos:position pos:line="1" pos:column="61"/></name><modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type> <name pos:line="1" pos:column="63">method<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">rc<pos:position pos:line="3" pos:column="9"/></name></decl>;<pos:position pos:line="3" pos:column="10"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><operator pos:line="5" pos:column="7">!<pos:position pos:line="5" pos:column="8"/></operator><call><name pos:line="5" pos:column="8">mutt_bit_isset<pos:position pos:line="5" pos:column="22"/></name> <argument_list pos:line="5" pos:column="23">(<argument><expr><name><name pos:line="5" pos:column="24">idata<pos:position pos:line="5" pos:column="29"/></name><operator pos:line="5" pos:column="29">-&gt;<pos:position pos:line="5" pos:column="34"/></operator><name pos:line="5" pos:column="31">capabilities<pos:position pos:line="5" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="45">AUTH_ANON<pos:position pos:line="5" pos:column="54"/></name></expr></argument>)<pos:position pos:line="5" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="56"/></condition><then pos:line="5" pos:column="56">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><name pos:line="6" pos:column="12">IMAP_AUTH_UNAVAIL<pos:position pos:line="6" pos:column="29"/></name></expr>;<pos:position pos:line="6" pos:column="30"/></return></block></then></if>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><call><name pos:line="8" pos:column="7">mutt_account_getuser<pos:position pos:line="8" pos:column="27"/></name> <argument_list pos:line="8" pos:column="28">(<argument><expr><operator pos:line="8" pos:column="29">&amp;<pos:position pos:line="8" pos:column="34"/></operator><name><name pos:line="8" pos:column="30">idata<pos:position pos:line="8" pos:column="35"/></name><operator pos:line="8" pos:column="35">-&gt;<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="37">conn<pos:position pos:line="8" pos:column="41"/></name><operator pos:line="8" pos:column="41">-&gt;<pos:position pos:line="8" pos:column="46"/></operator><name pos:line="8" pos:column="43">account<pos:position pos:line="8" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="52"/></condition><then pos:line="8" pos:column="52">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">IMAP_AUTH_FAILURE<pos:position pos:line="9" pos:column="29"/></name></expr>;<pos:position pos:line="9" pos:column="30"/></return></block></then></if>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name><name pos:line="11" pos:column="7">idata<pos:position pos:line="11" pos:column="12"/></name><operator pos:line="11" pos:column="12">-&gt;<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="14">conn<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">-&gt;<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="20">account<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">.<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="28">user<pos:position pos:line="11" pos:column="32"/></name><index pos:line="11" pos:column="32">[<expr><literal type="number" pos:line="11" pos:column="33">0<pos:position pos:line="11" pos:column="34"/></literal></expr>]<pos:position pos:line="11" pos:column="35"/></index></name> <operator pos:line="11" pos:column="36">!=<pos:position pos:line="11" pos:column="38"/></operator> <literal type="char" pos:line="11" pos:column="39">'\0'<pos:position pos:line="11" pos:column="43"/></literal></expr>)<pos:position pos:line="11" pos:column="44"/></condition><then pos:line="11" pos:column="44">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">IMAP_AUTH_UNAVAIL<pos:position pos:line="12" pos:column="29"/></name></expr>;<pos:position pos:line="12" pos:column="30"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="14" pos:column="3">mutt_message<pos:position pos:line="14" pos:column="15"/></name></type> <name pos:line="14" pos:column="16">_<pos:position pos:line="14" pos:column="17"/></name><argument_list pos:line="14" pos:column="17">(<argument><expr><literal type="string" pos:line="14" pos:column="18">"Authenticating (anonymous)..."<pos:position pos:line="14" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></decl>;<pos:position pos:line="14" pos:column="51"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="16" pos:column="3">imap_cmd_start<pos:position pos:line="16" pos:column="17"/></name> <argument_list pos:line="16" pos:column="18">(<argument><expr><name pos:line="16" pos:column="19">idata<pos:position pos:line="16" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="26">"AUTHENTICATE ANONYMOUS"<pos:position pos:line="16" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="52"/></expr_stmt>

  <do pos:line="18" pos:column="3">do
    <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="5">rc<pos:position pos:line="19" pos:column="7"/></name> <operator pos:line="19" pos:column="8">=<pos:position pos:line="19" pos:column="9"/></operator> <call><name pos:line="19" pos:column="10">imap_cmd_step<pos:position pos:line="19" pos:column="23"/></name> <argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">idata<pos:position pos:line="19" pos:column="30"/></name></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt></block>
  while <condition pos:line="20" pos:column="9">(<expr><name pos:line="20" pos:column="10">rc<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">==<pos:position pos:line="20" pos:column="15"/></operator> <name pos:line="20" pos:column="16">IMAP_CMD_CONTINUE<pos:position pos:line="20" pos:column="33"/></name></expr>)<pos:position pos:line="20" pos:column="34"/></condition>;<pos:position pos:line="20" pos:column="35"/></do>

  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><name pos:line="22" pos:column="7">rc<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">!=<pos:position pos:line="22" pos:column="12"/></operator> <name pos:line="22" pos:column="13">IMAP_CMD_RESPOND<pos:position pos:line="22" pos:column="29"/></name></expr>)<pos:position pos:line="22" pos:column="30"/></condition><then pos:line="22" pos:column="30">
  <block pos:line="23" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">dprint<pos:position pos:line="24" pos:column="11"/></name> <argument_list pos:line="24" pos:column="12">(<argument><expr><literal type="number" pos:line="24" pos:column="13">1<pos:position pos:line="24" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="24" pos:column="16">(<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="17">debugfile<pos:position pos:line="24" pos:column="26"/></name><operator pos:line="24" pos:column="26">,<pos:position pos:line="24" pos:column="27"/></operator> <literal type="string" pos:line="24" pos:column="28">"Invalid response from server.\n"<pos:position pos:line="24" pos:column="61"/></literal><operator pos:line="24" pos:column="61">)<pos:position pos:line="24" pos:column="62"/></operator></expr></argument>)<pos:position pos:line="24" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="64"/></expr_stmt>
    <goto pos:line="25" pos:column="5">goto <name pos:line="25" pos:column="10">bail<pos:position pos:line="25" pos:column="14"/></name>;<pos:position pos:line="25" pos:column="15"/></goto>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="28" pos:column="3">mutt_socket_write<pos:position pos:line="28" pos:column="20"/></name> <argument_list pos:line="28" pos:column="21">(<argument><expr><name><name pos:line="28" pos:column="22">idata<pos:position pos:line="28" pos:column="27"/></name><operator pos:line="28" pos:column="27">-&gt;<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="29">conn<pos:position pos:line="28" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="35">"ZHVtbXkK\r\n"<pos:position pos:line="28" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt> <comment type="block" pos:line="28" pos:column="52">/* base64 ("dummy") */</comment>

  <do pos:line="30" pos:column="3">do
    <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="5">rc<pos:position pos:line="31" pos:column="7"/></name> <operator pos:line="31" pos:column="8">=<pos:position pos:line="31" pos:column="9"/></operator> <call><name pos:line="31" pos:column="10">imap_cmd_step<pos:position pos:line="31" pos:column="23"/></name> <argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">idata<pos:position pos:line="31" pos:column="30"/></name></expr></argument>)<pos:position pos:line="31" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt></block>
  while <condition pos:line="32" pos:column="9">(<expr><name pos:line="32" pos:column="10">rc<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">==<pos:position pos:line="32" pos:column="15"/></operator> <name pos:line="32" pos:column="16">IMAP_CMD_CONTINUE<pos:position pos:line="32" pos:column="33"/></name></expr>)<pos:position pos:line="32" pos:column="34"/></condition>;<pos:position pos:line="32" pos:column="35"/></do>
  
  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><name pos:line="34" pos:column="7">rc<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">!=<pos:position pos:line="34" pos:column="12"/></operator> <name pos:line="34" pos:column="13">IMAP_CMD_OK<pos:position pos:line="34" pos:column="24"/></name></expr>)<pos:position pos:line="34" pos:column="25"/></condition><then pos:line="34" pos:column="25">
  <block pos:line="35" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">dprint<pos:position pos:line="36" pos:column="11"/></name> <argument_list pos:line="36" pos:column="12">(<argument><expr><literal type="number" pos:line="36" pos:column="13">1<pos:position pos:line="36" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="36" pos:column="16">(<pos:position pos:line="36" pos:column="17"/></operator><name pos:line="36" pos:column="17">debugfile<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">,<pos:position pos:line="36" pos:column="27"/></operator> <literal type="string" pos:line="36" pos:column="28">"Error receiving server response.\n"<pos:position pos:line="36" pos:column="64"/></literal><operator pos:line="36" pos:column="64">)<pos:position pos:line="36" pos:column="65"/></operator></expr></argument>)<pos:position pos:line="36" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="67"/></expr_stmt>
    <goto pos:line="37" pos:column="5">goto <name pos:line="37" pos:column="10">bail<pos:position pos:line="37" pos:column="14"/></name>;<pos:position pos:line="37" pos:column="15"/></goto>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>

  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><call><name pos:line="40" pos:column="7">imap_code<pos:position pos:line="40" pos:column="16"/></name> <argument_list pos:line="40" pos:column="17">(<argument><expr><name><name pos:line="40" pos:column="18">idata<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">-&gt;<pos:position pos:line="40" pos:column="28"/></operator><name pos:line="40" pos:column="25">buf<pos:position pos:line="40" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="30"/></condition><then pos:line="40" pos:column="30">
    <block type="pseudo"><return pos:line="41" pos:column="5">return <expr><name pos:line="41" pos:column="12">IMAP_AUTH_SUCCESS<pos:position pos:line="41" pos:column="29"/></name></expr>;<pos:position pos:line="41" pos:column="30"/></return></block></then></if>

 <label><name pos:line="43" pos:column="2">bail<pos:position pos:line="43" pos:column="6"/></name>:<pos:position pos:line="43" pos:column="7"/></label>
  <decl_stmt><decl><type><name pos:line="44" pos:column="3">mutt_error<pos:position pos:line="44" pos:column="13"/></name></type> <name pos:line="44" pos:column="14">_<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><literal type="string" pos:line="44" pos:column="16">"Anonymous authentication failed."<pos:position pos:line="44" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="51"/></argument_list></decl>;<pos:position pos:line="44" pos:column="52"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="45" pos:column="3">mutt_sleep<pos:position pos:line="45" pos:column="13"/></name> <argument_list pos:line="45" pos:column="14">(<argument><expr><literal type="number" pos:line="45" pos:column="15">2<pos:position pos:line="45" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="18"/></expr_stmt>
  <return pos:line="46" pos:column="3">return <expr><name pos:line="46" pos:column="10">IMAP_AUTH_FAILURE<pos:position pos:line="46" pos:column="27"/></name></expr>;<pos:position pos:line="46" pos:column="28"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
