<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_function_72.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">pgp_signed_handler<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">BODY<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">a<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">STATE<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">s<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">tempfile<pos:position pos:line="3" pos:column="16"/></name><index pos:line="3" pos:column="16">[<expr><name pos:line="3" pos:column="17">_POSIX_PATH_MAX<pos:position pos:line="3" pos:column="32"/></name></expr>]<pos:position pos:line="3" pos:column="33"/></index></name></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">protocol<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">protocol_major<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><name pos:line="5" pos:column="24">TYPEOTHER<pos:position pos:line="5" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">protocol_minor<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><name pos:line="6" pos:column="26">NULL<pos:position pos:line="6" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
  
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">BODY<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">b<pos:position pos:line="8" pos:column="10"/></name> <init pos:line="8" pos:column="11">= <expr><name pos:line="8" pos:column="13">a<pos:position pos:line="8" pos:column="14"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">BODY<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier><modifier pos:line="9" pos:column="9">*<pos:position pos:line="9" pos:column="10"/></modifier></type><name pos:line="9" pos:column="10">signatures<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><name pos:line="9" pos:column="23">NULL<pos:position pos:line="9" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">sigcnt<pos:position pos:line="10" pos:column="13"/></name> <init pos:line="10" pos:column="14">= <expr><literal type="number" pos:line="10" pos:column="16">0<pos:position pos:line="10" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">i<pos:position pos:line="11" pos:column="8"/></name></decl>;<pos:position pos:line="11" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">short<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">goodsig<pos:position pos:line="12" pos:column="16"/></name> <init pos:line="12" pos:column="17">= <expr><literal type="number" pos:line="12" pos:column="19">1<pos:position pos:line="12" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><name pos:line="14" pos:column="3">protocol<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <call><name pos:line="14" pos:column="14">mutt_get_parameter<pos:position pos:line="14" pos:column="32"/></name> <argument_list pos:line="14" pos:column="33">(<argument><expr><literal type="string" pos:line="14" pos:column="34">"protocol"<pos:position pos:line="14" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="46">a<pos:position pos:line="14" pos:column="47"/></name><operator pos:line="14" pos:column="47">-&gt;<pos:position pos:line="14" pos:column="52"/></operator><name pos:line="14" pos:column="49">parameter<pos:position pos:line="14" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><name pos:line="15" pos:column="3">a<pos:position pos:line="15" pos:column="4"/></name> <operator pos:line="15" pos:column="5">=<pos:position pos:line="15" pos:column="6"/></operator> <name><name pos:line="15" pos:column="7">a<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">-&gt;<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="10">parts<pos:position pos:line="15" pos:column="15"/></name></name></expr>;<pos:position pos:line="15" pos:column="16"/></expr_stmt>

  <comment type="block" pos:line="17" pos:column="3">/* extract the protocol information */</comment>
  
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">protocol<pos:position pos:line="19" pos:column="15"/></name></expr>)<pos:position pos:line="19" pos:column="16"/></condition><then pos:line="19" pos:column="16">
  <block pos:line="20" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">char<pos:position pos:line="21" pos:column="9"/></name></type> <name><name pos:line="21" pos:column="10">major<pos:position pos:line="21" pos:column="15"/></name><index pos:line="21" pos:column="15">[<expr><name pos:line="21" pos:column="16">STRING<pos:position pos:line="21" pos:column="22"/></name></expr>]<pos:position pos:line="21" pos:column="23"/></index></name></decl>;<pos:position pos:line="21" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">char<pos:position pos:line="22" pos:column="9"/></name> <modifier pos:line="22" pos:column="10">*<pos:position pos:line="22" pos:column="11"/></modifier></type><name pos:line="22" pos:column="11">t<pos:position pos:line="22" pos:column="12"/></name></decl>;<pos:position pos:line="22" pos:column="13"/></decl_stmt>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><operator pos:line="24" pos:column="9">(<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">protocol_minor<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">=<pos:position pos:line="24" pos:column="26"/></operator> <call><name pos:line="24" pos:column="27">strchr<pos:position pos:line="24" pos:column="33"/></name><argument_list pos:line="24" pos:column="33">(<argument><expr><name pos:line="24" pos:column="34">protocol<pos:position pos:line="24" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="24" pos:column="44">'/'<pos:position pos:line="24" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="48"/></argument_list></call><operator pos:line="24" pos:column="48">)<pos:position pos:line="24" pos:column="49"/></operator></expr>)<pos:position pos:line="24" pos:column="50"/></condition><then pos:line="24" pos:column="50"> <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="51">protocol_minor<pos:position pos:line="24" pos:column="65"/></name><operator pos:line="24" pos:column="65">++<pos:position pos:line="24" pos:column="67"/></operator></expr>;<pos:position pos:line="24" pos:column="68"/></expr_stmt></block></then></if>
    
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">strfcpy<pos:position pos:line="26" pos:column="12"/></name><argument_list pos:line="26" pos:column="12">(<argument><expr><name pos:line="26" pos:column="13">major<pos:position pos:line="26" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="20">protocol<pos:position pos:line="26" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="30">sizeof<argument_list pos:line="26" pos:column="36">(<argument><expr><name pos:line="26" pos:column="37">major<pos:position pos:line="26" pos:column="42"/></name></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="45"/></expr_stmt>
    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(<expr><operator pos:line="27" pos:column="8">(<pos:position pos:line="27" pos:column="9"/></operator><name pos:line="27" pos:column="9">t<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">=<pos:position pos:line="27" pos:column="12"/></operator> <call><name pos:line="27" pos:column="13">strchr<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">(<argument><expr><name pos:line="27" pos:column="20">major<pos:position pos:line="27" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="27" pos:column="27">'/'<pos:position pos:line="27" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="31"/></argument_list></call><operator pos:line="27" pos:column="31">)<pos:position pos:line="27" pos:column="32"/></operator></expr>)<pos:position pos:line="27" pos:column="33"/></condition><then pos:line="27" pos:column="33">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="28" pos:column="7">*<pos:position pos:line="28" pos:column="8"/></operator><name pos:line="28" pos:column="8">t<pos:position pos:line="28" pos:column="9"/></name> <operator pos:line="28" pos:column="10">=<pos:position pos:line="28" pos:column="11"/></operator> <literal type="char" pos:line="28" pos:column="12">'\0'<pos:position pos:line="28" pos:column="16"/></literal></expr>;<pos:position pos:line="28" pos:column="17"/></expr_stmt></block></then></if>
    
    <expr_stmt><expr><name pos:line="30" pos:column="5">protocol_major<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <call><name pos:line="30" pos:column="22">mutt_check_mime_type<pos:position pos:line="30" pos:column="42"/></name> <argument_list pos:line="30" pos:column="43">(<argument><expr><name pos:line="30" pos:column="44">major<pos:position pos:line="30" pos:column="49"/></name></expr></argument>)<pos:position pos:line="30" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="51"/></expr_stmt>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="33" pos:column="3">/* consistency check */</comment>

  <if pos:line="35" pos:column="3">if <condition pos:line="35" pos:column="6">(<expr><operator pos:line="35" pos:column="7">!<pos:position pos:line="35" pos:column="8"/></operator><operator pos:line="35" pos:column="8">(<pos:position pos:line="35" pos:column="9"/></operator><name pos:line="35" pos:column="9">a<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">&amp;&amp;<pos:position pos:line="35" pos:column="21"/></operator> <name><name pos:line="35" pos:column="14">a<pos:position pos:line="35" pos:column="15"/></name><operator pos:line="35" pos:column="15">-&gt;<pos:position pos:line="35" pos:column="20"/></operator><name pos:line="35" pos:column="17">next<pos:position pos:line="35" pos:column="21"/></name></name> <operator pos:line="35" pos:column="22">&amp;&amp;<pos:position pos:line="35" pos:column="32"/></operator> <name><name pos:line="35" pos:column="25">a<pos:position pos:line="35" pos:column="26"/></name><operator pos:line="35" pos:column="26">-&gt;<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="28">next<pos:position pos:line="35" pos:column="32"/></name><operator pos:line="35" pos:column="32">-&gt;<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="34">type<pos:position pos:line="35" pos:column="38"/></name></name> <operator pos:line="35" pos:column="39">==<pos:position pos:line="35" pos:column="41"/></operator> <name pos:line="35" pos:column="42">protocol_major<pos:position pos:line="35" pos:column="56"/></name> <operator pos:line="35" pos:column="57">&amp;&amp;<pos:position pos:line="35" pos:column="67"/></operator> 
      <operator pos:line="36" pos:column="7">!<pos:position pos:line="36" pos:column="8"/></operator><call><name pos:line="36" pos:column="8">ascii_strcasecmp<pos:position pos:line="36" pos:column="24"/></name><argument_list pos:line="36" pos:column="24">(<argument><expr><name><name pos:line="36" pos:column="25">a<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">-&gt;<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="28">next<pos:position pos:line="36" pos:column="32"/></name><operator pos:line="36" pos:column="32">-&gt;<pos:position pos:line="36" pos:column="37"/></operator><name pos:line="36" pos:column="34">subtype<pos:position pos:line="36" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="43">protocol_minor<pos:position pos:line="36" pos:column="57"/></name></expr></argument>)<pos:position pos:line="36" pos:column="58"/></argument_list></call><operator pos:line="36" pos:column="58">)<pos:position pos:line="36" pos:column="59"/></operator></expr>)<pos:position pos:line="36" pos:column="60"/></condition><then pos:line="36" pos:column="60">
  <block pos:line="37" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">state_attach_puts<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><call><name pos:line="38" pos:column="23">_<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><literal type="string" pos:line="38" pos:column="25">"[-- Error: Inconsistent multipart/signed structure! --]\n\n"<pos:position pos:line="38" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="87"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="38" pos:column="89">s<pos:position pos:line="38" pos:column="90"/></name></expr></argument>)<pos:position pos:line="38" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="92"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">mutt_body_handler<pos:position pos:line="39" pos:column="22"/></name> <argument_list pos:line="39" pos:column="23">(<argument><expr><name pos:line="39" pos:column="24">a<pos:position pos:line="39" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="27">s<pos:position pos:line="39" pos:column="28"/></name></expr></argument>)<pos:position pos:line="39" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="30"/></expr_stmt>
    <return pos:line="40" pos:column="5">return;<pos:position pos:line="40" pos:column="12"/></return>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if>

  <if pos:line="43" pos:column="3">if<condition pos:line="43" pos:column="5">(<expr><operator pos:line="43" pos:column="6">!<pos:position pos:line="43" pos:column="7"/></operator><operator pos:line="43" pos:column="7">(<pos:position pos:line="43" pos:column="8"/></operator><name pos:line="43" pos:column="8">protocol_major<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">==<pos:position pos:line="43" pos:column="25"/></operator> <name pos:line="43" pos:column="26">TYPEAPPLICATION<pos:position pos:line="43" pos:column="41"/></name> <operator pos:line="43" pos:column="42">&amp;&amp;<pos:position pos:line="43" pos:column="52"/></operator> <operator pos:line="43" pos:column="45">!<pos:position pos:line="43" pos:column="46"/></operator><call><name pos:line="43" pos:column="46">ascii_strcasecmp<pos:position pos:line="43" pos:column="62"/></name><argument_list pos:line="43" pos:column="62">(<argument><expr><name pos:line="43" pos:column="63">protocol_minor<pos:position pos:line="43" pos:column="77"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="79">"pgp-signature"<pos:position pos:line="43" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="95"/></argument_list></call><operator pos:line="43" pos:column="95">)<pos:position pos:line="43" pos:column="96"/></operator>
     <operator pos:line="44" pos:column="6">&amp;&amp;<pos:position pos:line="44" pos:column="16"/></operator> <operator pos:line="44" pos:column="9">!<pos:position pos:line="44" pos:column="10"/></operator><operator pos:line="44" pos:column="10">(<pos:position pos:line="44" pos:column="11"/></operator><name pos:line="44" pos:column="11">protocol_major<pos:position pos:line="44" pos:column="25"/></name> <operator pos:line="44" pos:column="26">==<pos:position pos:line="44" pos:column="28"/></operator> <name pos:line="44" pos:column="29">TYPEMULTIPART<pos:position pos:line="44" pos:column="42"/></name> <operator pos:line="44" pos:column="43">&amp;&amp;<pos:position pos:line="44" pos:column="53"/></operator> <operator pos:line="44" pos:column="46">!<pos:position pos:line="44" pos:column="47"/></operator><call><name pos:line="44" pos:column="47">ascii_strcasecmp<pos:position pos:line="44" pos:column="63"/></name><argument_list pos:line="44" pos:column="63">(<argument><expr><name pos:line="44" pos:column="64">protocol_minor<pos:position pos:line="44" pos:column="78"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="80">"mixed"<pos:position pos:line="44" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="88"/></argument_list></call><operator pos:line="44" pos:column="88">)<pos:position pos:line="44" pos:column="89"/></operator></expr>)<pos:position pos:line="44" pos:column="90"/></condition><then pos:line="44" pos:column="90">
  <block pos:line="45" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">state_mark_attach<pos:position pos:line="46" pos:column="22"/></name> <argument_list pos:line="46" pos:column="23">(<argument><expr><name pos:line="46" pos:column="24">s<pos:position pos:line="46" pos:column="25"/></name></expr></argument>)<pos:position pos:line="46" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">state_printf<pos:position pos:line="47" pos:column="17"/></name><argument_list pos:line="47" pos:column="17">(<argument><expr><name pos:line="47" pos:column="18">s<pos:position pos:line="47" pos:column="19"/></name></expr></argument>, <argument><expr><call><name pos:line="47" pos:column="21">_<pos:position pos:line="47" pos:column="22"/></name><argument_list pos:line="47" pos:column="22">(<argument><expr><literal type="string" pos:line="47" pos:column="23">"[-- Error: Unknown multipart/signed protocol %s! --]\n\n"<pos:position pos:line="47" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="82"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="47" pos:column="84">protocol<pos:position pos:line="47" pos:column="92"/></name></expr></argument>)<pos:position pos:line="47" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="94"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">mutt_body_handler<pos:position pos:line="48" pos:column="22"/></name> <argument_list pos:line="48" pos:column="23">(<argument><expr><name pos:line="48" pos:column="24">a<pos:position pos:line="48" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="27">s<pos:position pos:line="48" pos:column="28"/></name></expr></argument>)<pos:position pos:line="48" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="30"/></expr_stmt>
    <return pos:line="49" pos:column="5">return;<pos:position pos:line="49" pos:column="12"/></return>
  }<pos:position pos:line="50" pos:column="4"/></block></then></if>
  
  <if pos:line="52" pos:column="3">if <condition pos:line="52" pos:column="6">(<expr><name><name pos:line="52" pos:column="7">s<pos:position pos:line="52" pos:column="8"/></name><operator pos:line="52" pos:column="8">-&gt;<pos:position pos:line="52" pos:column="13"/></operator><name pos:line="52" pos:column="10">flags<pos:position pos:line="52" pos:column="15"/></name></name> <operator pos:line="52" pos:column="16">&amp;<pos:position pos:line="52" pos:column="21"/></operator> <name pos:line="52" pos:column="18">M_DISPLAY<pos:position pos:line="52" pos:column="27"/></name></expr>)<pos:position pos:line="52" pos:column="28"/></condition><then pos:line="52" pos:column="28">
  <block pos:line="53" pos:column="3">{
    
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">pgp_fetch_signatures<pos:position pos:line="55" pos:column="25"/></name><argument_list pos:line="55" pos:column="25">(<argument><expr><operator pos:line="55" pos:column="26">&amp;<pos:position pos:line="55" pos:column="31"/></operator><name pos:line="55" pos:column="27">signatures<pos:position pos:line="55" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="39">a<pos:position pos:line="55" pos:column="40"/></name><operator pos:line="55" pos:column="40">-&gt;<pos:position pos:line="55" pos:column="45"/></operator><name pos:line="55" pos:column="42">next<pos:position pos:line="55" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="48">&amp;<pos:position pos:line="55" pos:column="53"/></operator><name pos:line="55" pos:column="49">sigcnt<pos:position pos:line="55" pos:column="55"/></name></expr></argument>)<pos:position pos:line="55" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="57"/></expr_stmt>
    
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">sigcnt<pos:position pos:line="57" pos:column="15"/></name></expr>)<pos:position pos:line="57" pos:column="16"/></condition><then pos:line="57" pos:column="16">
    <block pos:line="58" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="59" pos:column="7">mutt_mktemp<pos:position pos:line="59" pos:column="18"/></name> <argument_list pos:line="59" pos:column="19">(<argument><expr><name pos:line="59" pos:column="20">tempfile<pos:position pos:line="59" pos:column="28"/></name></expr></argument>)<pos:position pos:line="59" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="30"/></expr_stmt>
      <if pos:line="60" pos:column="7">if <condition pos:line="60" pos:column="10">(<expr><call><name pos:line="60" pos:column="11">pgp_write_signed<pos:position pos:line="60" pos:column="27"/></name> <argument_list pos:line="60" pos:column="28">(<argument><expr><name pos:line="60" pos:column="29">a<pos:position pos:line="60" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="32">s<pos:position pos:line="60" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="35">tempfile<pos:position pos:line="60" pos:column="43"/></name></expr></argument>)<pos:position pos:line="60" pos:column="44"/></argument_list></call> <operator pos:line="60" pos:column="45">==<pos:position pos:line="60" pos:column="47"/></operator> <literal type="number" pos:line="60" pos:column="48">0<pos:position pos:line="60" pos:column="49"/></literal></expr>)<pos:position pos:line="60" pos:column="50"/></condition><then pos:line="60" pos:column="50">
      <block pos:line="61" pos:column="7">{
	<for pos:line="62" pos:column="9">for <control pos:line="62" pos:column="13">(<init><expr><name pos:line="62" pos:column="14">i<pos:position pos:line="62" pos:column="15"/></name> <operator pos:line="62" pos:column="16">=<pos:position pos:line="62" pos:column="17"/></operator> <literal type="number" pos:line="62" pos:column="18">0<pos:position pos:line="62" pos:column="19"/></literal></expr>;<pos:position pos:line="62" pos:column="20"/></init> <condition><expr><name pos:line="62" pos:column="21">i<pos:position pos:line="62" pos:column="22"/></name> <operator pos:line="62" pos:column="23">&lt;<pos:position pos:line="62" pos:column="27"/></operator> <name pos:line="62" pos:column="25">sigcnt<pos:position pos:line="62" pos:column="31"/></name></expr>;<pos:position pos:line="62" pos:column="32"/></condition> <incr><expr><name pos:line="62" pos:column="33">i<pos:position pos:line="62" pos:column="34"/></name><operator pos:line="62" pos:column="34">++<pos:position pos:line="62" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="62" pos:column="37"/></control>
	<block pos:line="63" pos:column="9">{
	  <if pos:line="64" pos:column="11">if <condition pos:line="64" pos:column="14">(<expr><name><name pos:line="64" pos:column="15">signatures<pos:position pos:line="64" pos:column="25"/></name><index pos:line="64" pos:column="25">[<expr><name pos:line="64" pos:column="26">i<pos:position pos:line="64" pos:column="27"/></name></expr>]<pos:position pos:line="64" pos:column="28"/></index></name><operator pos:line="64" pos:column="28">-&gt;<pos:position pos:line="64" pos:column="33"/></operator><name pos:line="64" pos:column="30">type<pos:position pos:line="64" pos:column="34"/></name> <operator pos:line="64" pos:column="35">==<pos:position pos:line="64" pos:column="37"/></operator> <name pos:line="64" pos:column="38">TYPEAPPLICATION<pos:position pos:line="64" pos:column="53"/></name> 
	      <operator pos:line="65" pos:column="15">&amp;&amp;<pos:position pos:line="65" pos:column="25"/></operator> <operator pos:line="65" pos:column="18">!<pos:position pos:line="65" pos:column="19"/></operator><call><name pos:line="65" pos:column="19">ascii_strcasecmp<pos:position pos:line="65" pos:column="35"/></name><argument_list pos:line="65" pos:column="35">(<argument><expr><name><name pos:line="65" pos:column="36">signatures<pos:position pos:line="65" pos:column="46"/></name><index pos:line="65" pos:column="46">[<expr><name pos:line="65" pos:column="47">i<pos:position pos:line="65" pos:column="48"/></name></expr>]<pos:position pos:line="65" pos:column="49"/></index></name><operator pos:line="65" pos:column="49">-&gt;<pos:position pos:line="65" pos:column="54"/></operator><name pos:line="65" pos:column="51">subtype<pos:position pos:line="65" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="60">"pgp-signature"<pos:position pos:line="65" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="77"/></condition><then pos:line="65" pos:column="77">
	  <block pos:line="66" pos:column="11">{
	    <if pos:line="67" pos:column="13">if <condition pos:line="67" pos:column="16">(<expr><call><name pos:line="67" pos:column="17">pgp_verify_one<pos:position pos:line="67" pos:column="31"/></name> <argument_list pos:line="67" pos:column="32">(<argument><expr><name><name pos:line="67" pos:column="33">signatures<pos:position pos:line="67" pos:column="43"/></name><index pos:line="67" pos:column="43">[<expr><name pos:line="67" pos:column="44">i<pos:position pos:line="67" pos:column="45"/></name></expr>]<pos:position pos:line="67" pos:column="46"/></index></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="48">s<pos:position pos:line="67" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="51">tempfile<pos:position pos:line="67" pos:column="59"/></name></expr></argument>)<pos:position pos:line="67" pos:column="60"/></argument_list></call> <operator pos:line="67" pos:column="61">!=<pos:position pos:line="67" pos:column="63"/></operator> <literal type="number" pos:line="67" pos:column="64">0<pos:position pos:line="67" pos:column="65"/></literal></expr>)<pos:position pos:line="67" pos:column="66"/></condition><then pos:line="67" pos:column="66">
	      <block type="pseudo"><expr_stmt><expr><name pos:line="68" pos:column="15">goodsig<pos:position pos:line="68" pos:column="22"/></name> <operator pos:line="68" pos:column="23">=<pos:position pos:line="68" pos:column="24"/></operator> <literal type="number" pos:line="68" pos:column="25">0<pos:position pos:line="68" pos:column="26"/></literal></expr>;<pos:position pos:line="68" pos:column="27"/></expr_stmt></block></then></if>
	  }<pos:position pos:line="69" pos:column="12"/></block></then>
	  <else pos:line="70" pos:column="11">else
	  <block pos:line="71" pos:column="11">{
	    <expr_stmt><expr><call><name pos:line="72" pos:column="13">state_mark_attach<pos:position pos:line="72" pos:column="30"/></name> <argument_list pos:line="72" pos:column="31">(<argument><expr><name pos:line="72" pos:column="32">s<pos:position pos:line="72" pos:column="33"/></name></expr></argument>)<pos:position pos:line="72" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="35"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="73" pos:column="13">state_printf<pos:position pos:line="73" pos:column="25"/></name> <argument_list pos:line="73" pos:column="26">(<argument><expr><name pos:line="73" pos:column="27">s<pos:position pos:line="73" pos:column="28"/></name></expr></argument>, <argument><expr><call><name pos:line="73" pos:column="30">_<pos:position pos:line="73" pos:column="31"/></name><argument_list pos:line="73" pos:column="31">(<argument><expr><literal type="string" pos:line="73" pos:column="32">"[-- Warning: We can't verify %s/%s signatures. --]\n\n"<pos:position pos:line="73" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="89"/></argument_list></call></expr></argument>,
			  <argument><expr><call><name pos:line="74" pos:column="27">TYPE<pos:position pos:line="74" pos:column="31"/></name><argument_list pos:line="74" pos:column="31">(<argument><expr><name><name pos:line="74" pos:column="32">signatures<pos:position pos:line="74" pos:column="42"/></name><index pos:line="74" pos:column="42">[<expr><name pos:line="74" pos:column="43">i<pos:position pos:line="74" pos:column="44"/></name></expr>]<pos:position pos:line="74" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="74" pos:column="46"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="48">signatures<pos:position pos:line="74" pos:column="58"/></name><index pos:line="74" pos:column="58">[<expr><name pos:line="74" pos:column="59">i<pos:position pos:line="74" pos:column="60"/></name></expr>]<pos:position pos:line="74" pos:column="61"/></index></name><operator pos:line="74" pos:column="61">-&gt;<pos:position pos:line="74" pos:column="66"/></operator><name pos:line="74" pos:column="63">subtype<pos:position pos:line="74" pos:column="70"/></name></expr></argument>)<pos:position pos:line="74" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="72"/></expr_stmt>
	  }<pos:position pos:line="75" pos:column="12"/></block></else></if>
	}<pos:position pos:line="76" pos:column="10"/></block></for>
      }<pos:position pos:line="77" pos:column="8"/></block></then></if>
      
      <expr_stmt><expr><call><name pos:line="79" pos:column="7">mutt_unlink<pos:position pos:line="79" pos:column="18"/></name> <argument_list pos:line="79" pos:column="19">(<argument><expr><name pos:line="79" pos:column="20">tempfile<pos:position pos:line="79" pos:column="28"/></name></expr></argument>)<pos:position pos:line="79" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="30"/></expr_stmt>

      <expr_stmt><expr><name><name pos:line="81" pos:column="7">b<pos:position pos:line="81" pos:column="8"/></name><operator pos:line="81" pos:column="8">-&gt;<pos:position pos:line="81" pos:column="13"/></operator><name pos:line="81" pos:column="10">goodsig<pos:position pos:line="81" pos:column="17"/></name></name> <operator pos:line="81" pos:column="18">=<pos:position pos:line="81" pos:column="19"/></operator> <name pos:line="81" pos:column="20">goodsig<pos:position pos:line="81" pos:column="27"/></name></expr>;<pos:position pos:line="81" pos:column="28"/></expr_stmt>
      
      <expr_stmt><expr><call><name pos:line="83" pos:column="7">dprint<pos:position pos:line="83" pos:column="13"/></name> <argument_list pos:line="83" pos:column="14">(<argument><expr><literal type="number" pos:line="83" pos:column="15">2<pos:position pos:line="83" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="83" pos:column="18">(<pos:position pos:line="83" pos:column="19"/></operator><name pos:line="83" pos:column="19">debugfile<pos:position pos:line="83" pos:column="28"/></name><operator pos:line="83" pos:column="28">,<pos:position pos:line="83" pos:column="29"/></operator> <literal type="string" pos:line="83" pos:column="30">"pgp_signed_handler: goodsig = %d\n"<pos:position pos:line="83" pos:column="66"/></literal><operator pos:line="83" pos:column="66">,<pos:position pos:line="83" pos:column="67"/></operator> <name pos:line="83" pos:column="68">goodsig<pos:position pos:line="83" pos:column="75"/></name><operator pos:line="83" pos:column="75">)<pos:position pos:line="83" pos:column="76"/></operator></expr></argument>)<pos:position pos:line="83" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="78"/></expr_stmt>
      
      <comment type="block" pos:line="85" pos:column="7">/* Now display the signed body */</comment>
      <expr_stmt><expr><call><name pos:line="86" pos:column="7">state_attach_puts<pos:position pos:line="86" pos:column="24"/></name> <argument_list pos:line="86" pos:column="25">(<argument><expr><call><name pos:line="86" pos:column="26">_<pos:position pos:line="86" pos:column="27"/></name><argument_list pos:line="86" pos:column="27">(<argument><expr><literal type="string" pos:line="86" pos:column="28">"[-- The following data is signed --]\n\n"<pos:position pos:line="86" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="86" pos:column="73">s<pos:position pos:line="86" pos:column="74"/></name></expr></argument>)<pos:position pos:line="86" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="76"/></expr_stmt>


      <expr_stmt><expr><call><name pos:line="89" pos:column="7">safe_free<pos:position pos:line="89" pos:column="16"/></name><argument_list pos:line="89" pos:column="16">(<argument><expr><operator pos:line="89" pos:column="17">(<pos:position pos:line="89" pos:column="18"/></operator><name pos:line="89" pos:column="18">void<pos:position pos:line="89" pos:column="22"/></name> <operator pos:line="89" pos:column="23">*<pos:position pos:line="89" pos:column="24"/></operator><operator pos:line="89" pos:column="24">*<pos:position pos:line="89" pos:column="25"/></operator><operator pos:line="89" pos:column="25">)<pos:position pos:line="89" pos:column="26"/></operator> <operator pos:line="89" pos:column="27">&amp;<pos:position pos:line="89" pos:column="32"/></operator><name pos:line="89" pos:column="28">signatures<pos:position pos:line="89" pos:column="38"/></name></expr></argument>)<pos:position pos:line="89" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="90" pos:column="6"/></block></then>
    <else pos:line="91" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="92" pos:column="7">state_attach_puts<pos:position pos:line="92" pos:column="24"/></name> <argument_list pos:line="92" pos:column="25">(<argument><expr><call><name pos:line="92" pos:column="26">_<pos:position pos:line="92" pos:column="27"/></name><argument_list pos:line="92" pos:column="27">(<argument><expr><literal type="string" pos:line="92" pos:column="28">"[-- Warning: Can't find any signatures. --]\n\n"<pos:position pos:line="92" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="92" pos:column="80">s<pos:position pos:line="92" pos:column="81"/></name></expr></argument>)<pos:position pos:line="92" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="83"/></expr_stmt></block></else></if>
  }<pos:position pos:line="93" pos:column="4"/></block></then></if>
  
  <expr_stmt><expr><call><name pos:line="95" pos:column="3">mutt_body_handler<pos:position pos:line="95" pos:column="20"/></name> <argument_list pos:line="95" pos:column="21">(<argument><expr><name pos:line="95" pos:column="22">a<pos:position pos:line="95" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="25">s<pos:position pos:line="95" pos:column="26"/></name></expr></argument>)<pos:position pos:line="95" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="28"/></expr_stmt>
  
  <if pos:line="97" pos:column="3">if <condition pos:line="97" pos:column="6">(<expr><name><name pos:line="97" pos:column="7">s<pos:position pos:line="97" pos:column="8"/></name><operator pos:line="97" pos:column="8">-&gt;<pos:position pos:line="97" pos:column="13"/></operator><name pos:line="97" pos:column="10">flags<pos:position pos:line="97" pos:column="15"/></name></name> <operator pos:line="97" pos:column="16">&amp;<pos:position pos:line="97" pos:column="21"/></operator> <name pos:line="97" pos:column="18">M_DISPLAY<pos:position pos:line="97" pos:column="27"/></name> <operator pos:line="97" pos:column="28">&amp;&amp;<pos:position pos:line="97" pos:column="38"/></operator> <name pos:line="97" pos:column="31">sigcnt<pos:position pos:line="97" pos:column="37"/></name></expr>)<pos:position pos:line="97" pos:column="38"/></condition><then pos:line="97" pos:column="38">
  <block pos:line="98" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="99" pos:column="5">state_putc<pos:position pos:line="99" pos:column="15"/></name> <argument_list pos:line="99" pos:column="16">(<argument><expr><literal type="char" pos:line="99" pos:column="17">'\n'<pos:position pos:line="99" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="99" pos:column="23">s<pos:position pos:line="99" pos:column="24"/></name></expr></argument>)<pos:position pos:line="99" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="100" pos:column="5">state_attach_puts<pos:position pos:line="100" pos:column="22"/></name> <argument_list pos:line="100" pos:column="23">(<argument><expr><call><name pos:line="100" pos:column="24">_<pos:position pos:line="100" pos:column="25"/></name><argument_list pos:line="100" pos:column="25">(<argument><expr><literal type="string" pos:line="100" pos:column="26">"[-- End of signed data --]\n"<pos:position pos:line="100" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="100" pos:column="59">s<pos:position pos:line="100" pos:column="60"/></name></expr></argument>)<pos:position pos:line="100" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="62"/></expr_stmt>
  }<pos:position pos:line="101" pos:column="4"/></block></then></if>
}<pos:position pos:line="102" pos:column="2"/></block></function></unit>
