<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1022_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">mutt_convert_to_state<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">iconv_t<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">cd<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">bufi<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">size_t<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">l<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="70">STATE<pos:position pos:line="1" pos:column="75"/></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type><name pos:line="1" pos:column="77">s<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">bufo<pos:position pos:line="3" pos:column="12"/></name><index pos:line="3" pos:column="12">[<expr><name pos:line="3" pos:column="13">BUFO_SIZE<pos:position pos:line="3" pos:column="22"/></name></expr>]<pos:position pos:line="3" pos:column="23"/></index></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">ICONV_CONST<pos:position pos:line="4" pos:column="14"/></name> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">ib<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">ob<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">ibl<pos:position pos:line="6" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="15">obl<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><operator pos:line="8" pos:column="7">!<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">bufi<pos:position pos:line="8" pos:column="12"/></name></expr>)<pos:position pos:line="8" pos:column="13"/></condition><then pos:line="8" pos:column="13">
  <block pos:line="9" pos:column="3">{
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">cd<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">!=<pos:position pos:line="10" pos:column="14"/></operator> <call pos:line="10" pos:column="15">(<name pos:line="10" pos:column="16">iconv_t<pos:position pos:line="10" pos:column="23"/></name>)<argument_list pos:line="10" pos:column="24">(<argument><expr><operator pos:line="10" pos:column="25">-<pos:position pos:line="10" pos:column="26"/></operator><literal type="number" pos:line="10" pos:column="26">1<pos:position pos:line="10" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="29"/></condition><then pos:line="10" pos:column="29">
    <block pos:line="11" pos:column="5">{
      <expr_stmt><expr><name pos:line="12" pos:column="7">ob<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">=<pos:position pos:line="12" pos:column="11"/></operator> <name pos:line="12" pos:column="12">bufo<pos:position pos:line="12" pos:column="16"/></name></expr><operator pos:line="12" pos:column="16">,<pos:position pos:line="12" pos:column="17"/></operator> <expr><name pos:line="12" pos:column="18">obl<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <sizeof pos:line="12" pos:column="24">sizeof <argument_list pos:line="12" pos:column="31">(<argument><expr><name pos:line="12" pos:column="32">bufo<pos:position pos:line="12" pos:column="36"/></name></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></sizeof></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="13" pos:column="7">iconv<pos:position pos:line="13" pos:column="12"/></name> <argument_list pos:line="13" pos:column="13">(<argument><expr><name pos:line="13" pos:column="14">cd<pos:position pos:line="13" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="18">0<pos:position pos:line="13" pos:column="19"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="21">0<pos:position pos:line="13" pos:column="22"/></literal></expr></argument>, <argument><expr><operator pos:line="13" pos:column="24">&amp;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="25">ob<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="29">&amp;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="30">obl<pos:position pos:line="13" pos:column="33"/></name></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>
      <if pos:line="14" pos:column="7">if <condition pos:line="14" pos:column="10">(<expr><name pos:line="14" pos:column="11">ob<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">!=<pos:position pos:line="14" pos:column="16"/></operator> <name pos:line="14" pos:column="17">bufo<pos:position pos:line="14" pos:column="21"/></name></expr>)<pos:position pos:line="14" pos:column="22"/></condition><then pos:line="14" pos:column="22">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="9">state_prefix_put<pos:position pos:line="15" pos:column="25"/></name> <argument_list pos:line="15" pos:column="26">(<argument><expr><name pos:line="15" pos:column="27">bufo<pos:position pos:line="15" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="33">ob<pos:position pos:line="15" pos:column="35"/></name> <operator pos:line="15" pos:column="36">-<pos:position pos:line="15" pos:column="37"/></operator> <name pos:line="15" pos:column="38">bufo<pos:position pos:line="15" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="44">s<pos:position pos:line="15" pos:column="45"/></name></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt></block></then></if>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
    <return pos:line="17" pos:column="5">return;<pos:position pos:line="17" pos:column="12"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name pos:line="20" pos:column="7">cd<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">==<pos:position pos:line="20" pos:column="12"/></operator> <call pos:line="20" pos:column="13">(<name pos:line="20" pos:column="14">iconv_t<pos:position pos:line="20" pos:column="21"/></name>)<argument_list pos:line="20" pos:column="22">(<argument><expr><operator pos:line="20" pos:column="23">-<pos:position pos:line="20" pos:column="24"/></operator><literal type="number" pos:line="20" pos:column="24">1<pos:position pos:line="20" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27">
  <block pos:line="21" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">state_prefix_put<pos:position pos:line="22" pos:column="21"/></name> <argument_list pos:line="22" pos:column="22">(<argument><expr><name pos:line="22" pos:column="23">bufi<pos:position pos:line="22" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="29">*<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="30">l<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="33">s<pos:position pos:line="22" pos:column="34"/></name></expr></argument>)<pos:position pos:line="22" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="23" pos:column="5">*<pos:position pos:line="23" pos:column="6"/></operator><name pos:line="23" pos:column="6">l<pos:position pos:line="23" pos:column="7"/></name> <operator pos:line="23" pos:column="8">=<pos:position pos:line="23" pos:column="9"/></operator> <literal type="number" pos:line="23" pos:column="10">0<pos:position pos:line="23" pos:column="11"/></literal></expr>;<pos:position pos:line="23" pos:column="12"/></expr_stmt>
    <return pos:line="24" pos:column="5">return;<pos:position pos:line="24" pos:column="12"/></return>
  }<pos:position pos:line="25" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="27" pos:column="3">ib<pos:position pos:line="27" pos:column="5"/></name> <operator pos:line="27" pos:column="6">=<pos:position pos:line="27" pos:column="7"/></operator> <name pos:line="27" pos:column="8">bufi<pos:position pos:line="27" pos:column="12"/></name></expr><operator pos:line="27" pos:column="12">,<pos:position pos:line="27" pos:column="13"/></operator> <expr><name pos:line="27" pos:column="14">ibl<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">=<pos:position pos:line="27" pos:column="19"/></operator> <operator pos:line="27" pos:column="20">*<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="21">l<pos:position pos:line="27" pos:column="22"/></name></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt>
  <for pos:line="28" pos:column="3">for <control pos:line="28" pos:column="7">(<init pos:line="28" pos:column="8">;<pos:position pos:line="28" pos:column="9"/></init><condition pos:line="28" pos:column="9">;<pos:position pos:line="28" pos:column="10"/></condition><incr/>)<pos:position pos:line="28" pos:column="11"/></control>
  <block pos:line="29" pos:column="3">{
    <expr_stmt><expr><name pos:line="30" pos:column="5">ob<pos:position pos:line="30" pos:column="7"/></name> <operator pos:line="30" pos:column="8">=<pos:position pos:line="30" pos:column="9"/></operator> <name pos:line="30" pos:column="10">bufo<pos:position pos:line="30" pos:column="14"/></name></expr><operator pos:line="30" pos:column="14">,<pos:position pos:line="30" pos:column="15"/></operator> <expr><name pos:line="30" pos:column="16">obl<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <sizeof pos:line="30" pos:column="22">sizeof <argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">bufo<pos:position pos:line="30" pos:column="34"/></name></expr></argument>)<pos:position pos:line="30" pos:column="35"/></argument_list></sizeof></expr>;<pos:position pos:line="30" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">mutt_iconv<pos:position pos:line="31" pos:column="15"/></name> <argument_list pos:line="31" pos:column="16">(<argument><expr><name pos:line="31" pos:column="17">cd<pos:position pos:line="31" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="21">&amp;<pos:position pos:line="31" pos:column="26"/></operator><name pos:line="31" pos:column="22">ib<pos:position pos:line="31" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="26">&amp;<pos:position pos:line="31" pos:column="31"/></operator><name pos:line="31" pos:column="27">ibl<pos:position pos:line="31" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="32">&amp;<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="33">ob<pos:position pos:line="31" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="37">&amp;<pos:position pos:line="31" pos:column="42"/></operator><name pos:line="31" pos:column="38">obl<pos:position pos:line="31" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="43">0<pos:position pos:line="31" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="46">"?"<pos:position pos:line="31" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="51"/></expr_stmt>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">ob<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">==<pos:position pos:line="32" pos:column="14"/></operator> <name pos:line="32" pos:column="15">bufo<pos:position pos:line="32" pos:column="19"/></name></expr>)<pos:position pos:line="32" pos:column="20"/></condition><then pos:line="32" pos:column="20">
      <block type="pseudo"><break pos:line="33" pos:column="7">break;<pos:position pos:line="33" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">state_prefix_put<pos:position pos:line="34" pos:column="21"/></name> <argument_list pos:line="34" pos:column="22">(<argument><expr><name pos:line="34" pos:column="23">bufo<pos:position pos:line="34" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="29">ob<pos:position pos:line="34" pos:column="31"/></name> <operator pos:line="34" pos:column="32">-<pos:position pos:line="34" pos:column="33"/></operator> <name pos:line="34" pos:column="34">bufo<pos:position pos:line="34" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="40">s<pos:position pos:line="34" pos:column="41"/></name></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt>
  }<pos:position pos:line="35" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="36" pos:column="3">memmove<pos:position pos:line="36" pos:column="10"/></name> <argument_list pos:line="36" pos:column="11">(<argument><expr><name pos:line="36" pos:column="12">bufi<pos:position pos:line="36" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="18">ib<pos:position pos:line="36" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="22">ibl<pos:position pos:line="36" pos:column="25"/></name></expr></argument>)<pos:position pos:line="36" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="37" pos:column="3">*<pos:position pos:line="37" pos:column="4"/></operator><name pos:line="37" pos:column="4">l<pos:position pos:line="37" pos:column="5"/></name> <operator pos:line="37" pos:column="6">=<pos:position pos:line="37" pos:column="7"/></operator> <name pos:line="37" pos:column="8">ibl<pos:position pos:line="37" pos:column="11"/></name></expr>;<pos:position pos:line="37" pos:column="12"/></expr_stmt>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
