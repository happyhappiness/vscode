<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_function_195.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">print_smime_keyinfo<pos:position pos:line="1" pos:column="32"/></name> <parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name><modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type> <name pos:line="1" pos:column="46">msg<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">gpgme_signature_t<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">sig<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="2" pos:column="34">gpgme_key_t<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">key<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="51">STATE<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">s<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">msglen<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">gpgme_user_id_t<pos:position pos:line="5" pos:column="18"/></name></type> <name pos:line="5" pos:column="19">uids<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><name pos:line="5" pos:column="26">NULL<pos:position pos:line="5" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">i<pos:position pos:line="6" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="10">aka<pos:position pos:line="6" pos:column="13"/></name> <init pos:line="6" pos:column="14">= <expr><literal type="number" pos:line="6" pos:column="16">0<pos:position pos:line="6" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">state_attach_puts<pos:position pos:line="8" pos:column="20"/></name> <argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">msg<pos:position pos:line="8" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="27">s<pos:position pos:line="8" pos:column="28"/></name></expr></argument>)<pos:position pos:line="8" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">state_attach_puts<pos:position pos:line="9" pos:column="20"/></name> <argument_list pos:line="9" pos:column="21">(<argument><expr><literal type="string" pos:line="9" pos:column="22">" "<pos:position pos:line="9" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="27">s<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>
  <comment type="block" pos:line="10" pos:column="3">/* key is NULL when not present in the user's keyring */</comment>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">key<pos:position pos:line="11" pos:column="10"/></name></expr>)<pos:position pos:line="11" pos:column="11"/></condition><then pos:line="11" pos:column="11">
  <block pos:line="12" pos:column="3">{
    <for pos:line="13" pos:column="5">for <control pos:line="13" pos:column="9">(<init><expr><name pos:line="13" pos:column="10">uids<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <name><name pos:line="13" pos:column="17">key<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">-&gt;<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="22">uids<pos:position pos:line="13" pos:column="26"/></name></name></expr>;<pos:position pos:line="13" pos:column="27"/></init> <condition><expr><name pos:line="13" pos:column="28">uids<pos:position pos:line="13" pos:column="32"/></name></expr>;<pos:position pos:line="13" pos:column="33"/></condition> <incr><expr><name pos:line="13" pos:column="34">uids<pos:position pos:line="13" pos:column="38"/></name> <operator pos:line="13" pos:column="39">=<pos:position pos:line="13" pos:column="40"/></operator> <name><name pos:line="13" pos:column="41">uids<pos:position pos:line="13" pos:column="45"/></name><operator pos:line="13" pos:column="45">-&gt;<pos:position pos:line="13" pos:column="50"/></operator><name pos:line="13" pos:column="47">next<pos:position pos:line="13" pos:column="51"/></name></name></expr></incr>)<pos:position pos:line="13" pos:column="52"/></control>
    <block pos:line="14" pos:column="5">{
      <if pos:line="15" pos:column="7">if <condition pos:line="15" pos:column="10">(<expr><name><name pos:line="15" pos:column="11">uids<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">-&gt;<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="17">revoked<pos:position pos:line="15" pos:column="24"/></name></name></expr>)<pos:position pos:line="15" pos:column="25"/></condition><then pos:line="15" pos:column="25">
	<block type="pseudo"><continue pos:line="16" pos:column="9">continue;<pos:position pos:line="16" pos:column="18"/></continue></block></then></if>
      <if pos:line="17" pos:column="7">if <condition pos:line="17" pos:column="10">(<expr><name pos:line="17" pos:column="11">aka<pos:position pos:line="17" pos:column="14"/></name></expr>)<pos:position pos:line="17" pos:column="15"/></condition><then pos:line="17" pos:column="15">
      <block pos:line="18" pos:column="7">{
        <comment type="block" pos:line="19" pos:column="9">/* TODO: need to account for msg wide characters
         * and "aka" translation length */</comment>
	<expr_stmt><expr><name pos:line="21" pos:column="9">msglen<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <call><name pos:line="21" pos:column="18">mutt_strlen<pos:position pos:line="21" pos:column="29"/></name> <argument_list pos:line="21" pos:column="30">(<argument><expr><name pos:line="21" pos:column="31">msg<pos:position pos:line="21" pos:column="34"/></name></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call> <operator pos:line="21" pos:column="36">-<pos:position pos:line="21" pos:column="37"/></operator> <literal type="number" pos:line="21" pos:column="38">4<pos:position pos:line="21" pos:column="39"/></literal></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>
	<for pos:line="22" pos:column="9">for <control pos:line="22" pos:column="13">(<init><expr><name pos:line="22" pos:column="14">i<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <literal type="number" pos:line="22" pos:column="18">0<pos:position pos:line="22" pos:column="19"/></literal></expr>;<pos:position pos:line="22" pos:column="20"/></init> <condition><expr><name pos:line="22" pos:column="21">i<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">&lt;<pos:position pos:line="22" pos:column="27"/></operator> <name pos:line="22" pos:column="25">msglen<pos:position pos:line="22" pos:column="31"/></name></expr>;<pos:position pos:line="22" pos:column="32"/></condition> <incr><expr><name pos:line="22" pos:column="33">i<pos:position pos:line="22" pos:column="34"/></name><operator pos:line="22" pos:column="34">++<pos:position pos:line="22" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="22" pos:column="37"/></control>
	  <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="11">state_attach_puts<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><literal type="string" pos:line="23" pos:column="29">" "<pos:position pos:line="23" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="34">s<pos:position pos:line="23" pos:column="35"/></name></expr></argument>)<pos:position pos:line="23" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">state_attach_puts<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">(<argument><expr><call><name pos:line="24" pos:column="27">_<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><literal type="string" pos:line="24" pos:column="29">"aka: "<pos:position pos:line="24" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="24" pos:column="39">s<pos:position pos:line="24" pos:column="40"/></name></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>
      }<pos:position pos:line="25" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">state_attach_puts<pos:position pos:line="26" pos:column="24"/></name> <argument_list pos:line="26" pos:column="25">(<argument><expr><name><name pos:line="26" pos:column="26">uids<pos:position pos:line="26" pos:column="30"/></name><operator pos:line="26" pos:column="30">-&gt;<pos:position pos:line="26" pos:column="35"/></operator><name pos:line="26" pos:column="32">uid<pos:position pos:line="26" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="37">s<pos:position pos:line="26" pos:column="38"/></name></expr></argument>)<pos:position pos:line="26" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">state_attach_puts<pos:position pos:line="27" pos:column="24"/></name> <argument_list pos:line="27" pos:column="25">(<argument><expr><literal type="string" pos:line="27" pos:column="26">"\n"<pos:position pos:line="27" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="32">s<pos:position pos:line="27" pos:column="33"/></name></expr></argument>)<pos:position pos:line="27" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>

      <expr_stmt><expr><name pos:line="29" pos:column="7">aka<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">=<pos:position pos:line="29" pos:column="12"/></operator> <literal type="number" pos:line="29" pos:column="13">1<pos:position pos:line="29" pos:column="14"/></literal></expr>;<pos:position pos:line="29" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></for>
  }<pos:position pos:line="31" pos:column="4"/></block></then>
  <else pos:line="32" pos:column="3">else
  <block pos:line="33" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">state_attach_puts<pos:position pos:line="34" pos:column="22"/></name> <argument_list pos:line="34" pos:column="23">(<argument><expr><call><name pos:line="34" pos:column="24">_<pos:position pos:line="34" pos:column="25"/></name><argument_list pos:line="34" pos:column="25">(<argument><expr><literal type="string" pos:line="34" pos:column="26">"KeyID "<pos:position pos:line="34" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="34" pos:column="37">s<pos:position pos:line="34" pos:column="38"/></name></expr></argument>)<pos:position pos:line="34" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">state_attach_puts<pos:position pos:line="35" pos:column="22"/></name> <argument_list pos:line="35" pos:column="23">(<argument><expr><name><name pos:line="35" pos:column="24">sig<pos:position pos:line="35" pos:column="27"/></name><operator pos:line="35" pos:column="27">-&gt;<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="29">fpr<pos:position pos:line="35" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="34">s<pos:position pos:line="35" pos:column="35"/></name></expr></argument>)<pos:position pos:line="35" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">state_attach_puts<pos:position pos:line="36" pos:column="22"/></name> <argument_list pos:line="36" pos:column="23">(<argument><expr><literal type="string" pos:line="36" pos:column="24">"\n"<pos:position pos:line="36" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="30">s<pos:position pos:line="36" pos:column="31"/></name></expr></argument>)<pos:position pos:line="36" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="37" pos:column="4"/></block></else></if>

  <expr_stmt><expr><name pos:line="39" pos:column="3">msglen<pos:position pos:line="39" pos:column="9"/></name> <operator pos:line="39" pos:column="10">=<pos:position pos:line="39" pos:column="11"/></operator> <call><name pos:line="39" pos:column="12">mutt_strlen<pos:position pos:line="39" pos:column="23"/></name> <argument_list pos:line="39" pos:column="24">(<argument><expr><name pos:line="39" pos:column="25">msg<pos:position pos:line="39" pos:column="28"/></name></expr></argument>)<pos:position pos:line="39" pos:column="29"/></argument_list></call> <operator pos:line="39" pos:column="30">-<pos:position pos:line="39" pos:column="31"/></operator> <literal type="number" pos:line="39" pos:column="32">8<pos:position pos:line="39" pos:column="33"/></literal></expr>;<pos:position pos:line="39" pos:column="34"/></expr_stmt>
  <comment type="block" pos:line="40" pos:column="3">/* TODO: need to account for msg wide characters
   * and "created" translation length */</comment>
  <for pos:line="42" pos:column="3">for <control pos:line="42" pos:column="7">(<init><expr><name pos:line="42" pos:column="8">i<pos:position pos:line="42" pos:column="9"/></name> <operator pos:line="42" pos:column="10">=<pos:position pos:line="42" pos:column="11"/></operator> <literal type="number" pos:line="42" pos:column="12">0<pos:position pos:line="42" pos:column="13"/></literal></expr>;<pos:position pos:line="42" pos:column="14"/></init> <condition><expr><name pos:line="42" pos:column="15">i<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">&lt;<pos:position pos:line="42" pos:column="21"/></operator> <name pos:line="42" pos:column="19">msglen<pos:position pos:line="42" pos:column="25"/></name></expr>;<pos:position pos:line="42" pos:column="26"/></condition> <incr><expr><name pos:line="42" pos:column="27">i<pos:position pos:line="42" pos:column="28"/></name><operator pos:line="42" pos:column="28">++<pos:position pos:line="42" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="42" pos:column="31"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="5">state_attach_puts<pos:position pos:line="43" pos:column="22"/></name><argument_list pos:line="43" pos:column="22">(<argument><expr><literal type="string" pos:line="43" pos:column="23">" "<pos:position pos:line="43" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="28">s<pos:position pos:line="43" pos:column="29"/></name></expr></argument>)<pos:position pos:line="43" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="31"/></expr_stmt></block></for>
  <expr_stmt><expr><call><name pos:line="44" pos:column="3">state_attach_puts<pos:position pos:line="44" pos:column="20"/></name> <argument_list pos:line="44" pos:column="21">(<argument><expr><call><name pos:line="44" pos:column="22">_<pos:position pos:line="44" pos:column="23"/></name><argument_list pos:line="44" pos:column="23">(<argument><expr><literal type="string" pos:line="44" pos:column="24">"created: "<pos:position pos:line="44" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="44" pos:column="38">s<pos:position pos:line="44" pos:column="39"/></name></expr></argument>)<pos:position pos:line="44" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="45" pos:column="3">print_time<pos:position pos:line="45" pos:column="13"/></name> <argument_list pos:line="45" pos:column="14">(<argument><expr><name><name pos:line="45" pos:column="15">sig<pos:position pos:line="45" pos:column="18"/></name><operator pos:line="45" pos:column="18">-&gt;<pos:position pos:line="45" pos:column="23"/></operator><name pos:line="45" pos:column="20">timestamp<pos:position pos:line="45" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="31">s<pos:position pos:line="45" pos:column="32"/></name></expr></argument>)<pos:position pos:line="45" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="46" pos:column="3">state_attach_puts<pos:position pos:line="46" pos:column="20"/></name> <argument_list pos:line="46" pos:column="21">(<argument><expr><literal type="string" pos:line="46" pos:column="22">"\n"<pos:position pos:line="46" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="28">s<pos:position pos:line="46" pos:column="29"/></name></expr></argument>)<pos:position pos:line="46" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="31"/></expr_stmt>  
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
