<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1587_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">_mh_commit_message<pos:position pos:line="1" pos:column="30"/></name> <parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">CONTEXT<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type> <name pos:line="1" pos:column="42">ctx<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">MESSAGE<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type> <name pos:line="1" pos:column="57">msg<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">HEADER<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type> <name pos:line="1" pos:column="71">hdr<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>,
			       <parameter><decl><type><name pos:line="2" pos:column="32">short<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">updseq<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">DIR<pos:position pos:line="4" pos:column="6"/></name> <modifier pos:line="4" pos:column="7">*<pos:position pos:line="4" pos:column="8"/></modifier></type><name pos:line="4" pos:column="8">dirp<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">dirent<pos:position pos:line="5" pos:column="16"/></name></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">de<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">cp<pos:position pos:line="6" pos:column="11"/></name></decl>, <modifier pos:line="6" pos:column="13">*<pos:position pos:line="6" pos:column="14"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="14">dep<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">unsigned<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">int<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">n<pos:position pos:line="7" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="19">hi<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">path<pos:position pos:line="8" pos:column="12"/></name><index pos:line="8" pos:column="12">[<expr><name pos:line="8" pos:column="13">_POSIX_PATH_MAX<pos:position pos:line="8" pos:column="28"/></name></expr>]<pos:position pos:line="8" pos:column="29"/></index></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name></type> <name><name pos:line="9" pos:column="8">tmp<pos:position pos:line="9" pos:column="11"/></name><index pos:line="9" pos:column="11">[<expr><literal type="number" pos:line="9" pos:column="12">16<pos:position pos:line="9" pos:column="14"/></literal></expr>]<pos:position pos:line="9" pos:column="15"/></index></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><call><name pos:line="11" pos:column="7">safe_fsync_close<pos:position pos:line="11" pos:column="23"/></name> <argument_list pos:line="11" pos:column="24">(<argument><expr><operator pos:line="11" pos:column="25">&amp;<pos:position pos:line="11" pos:column="30"/></operator><name><name pos:line="11" pos:column="26">msg<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">-&gt;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="31">fp<pos:position pos:line="11" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="35"/></condition><then pos:line="11" pos:column="35">
  <block pos:line="12" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">mutt_perror<pos:position pos:line="13" pos:column="16"/></name> <argument_list pos:line="13" pos:column="17">(<argument><expr><call><name pos:line="13" pos:column="18">_<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><literal type="string" pos:line="13" pos:column="20">"Could not flush message to disk"<pos:position pos:line="13" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="56"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><operator pos:line="17" pos:column="7">(<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">dirp<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <call><name pos:line="17" pos:column="15">opendir<pos:position pos:line="17" pos:column="22"/></name> <argument_list pos:line="17" pos:column="23">(<argument><expr><name><name pos:line="17" pos:column="24">ctx<pos:position pos:line="17" pos:column="27"/></name><operator pos:line="17" pos:column="27">-&gt;<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="29">path<pos:position pos:line="17" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="34"/></argument_list></call><operator pos:line="17" pos:column="34">)<pos:position pos:line="17" pos:column="35"/></operator> <operator pos:line="17" pos:column="36">==<pos:position pos:line="17" pos:column="38"/></operator> <name pos:line="17" pos:column="39">NULL<pos:position pos:line="17" pos:column="43"/></name></expr>)<pos:position pos:line="17" pos:column="44"/></condition><then pos:line="17" pos:column="44">
  <block pos:line="18" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">mutt_perror<pos:position pos:line="19" pos:column="16"/></name> <argument_list pos:line="19" pos:column="17">(<argument><expr><name><name pos:line="19" pos:column="18">ctx<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">-&gt;<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="23">path<pos:position pos:line="19" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">(<pos:position pos:line="20" pos:column="13"/></operator><operator pos:line="20" pos:column="13">-<pos:position pos:line="20" pos:column="14"/></operator><literal type="number" pos:line="20" pos:column="14">1<pos:position pos:line="20" pos:column="15"/></literal><operator pos:line="20" pos:column="15">)<pos:position pos:line="20" pos:column="16"/></operator></expr>;<pos:position pos:line="20" pos:column="17"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="23" pos:column="3">/* figure out what the next message number is */</comment>
  <while pos:line="24" pos:column="3">while <condition pos:line="24" pos:column="9">(<expr><operator pos:line="24" pos:column="10">(<pos:position pos:line="24" pos:column="11"/></operator><name pos:line="24" pos:column="11">de<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">=<pos:position pos:line="24" pos:column="15"/></operator> <call><name pos:line="24" pos:column="16">readdir<pos:position pos:line="24" pos:column="23"/></name> <argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">dirp<pos:position pos:line="24" pos:column="29"/></name></expr></argument>)<pos:position pos:line="24" pos:column="30"/></argument_list></call><operator pos:line="24" pos:column="30">)<pos:position pos:line="24" pos:column="31"/></operator> <operator pos:line="24" pos:column="32">!=<pos:position pos:line="24" pos:column="34"/></operator> <name pos:line="24" pos:column="35">NULL<pos:position pos:line="24" pos:column="39"/></name></expr>)<pos:position pos:line="24" pos:column="40"/></condition>
  <block pos:line="25" pos:column="3">{
    <expr_stmt><expr><name pos:line="26" pos:column="5">dep<pos:position pos:line="26" pos:column="8"/></name> <operator pos:line="26" pos:column="9">=<pos:position pos:line="26" pos:column="10"/></operator> <name><name pos:line="26" pos:column="11">de<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">-&gt;<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="15">d_name<pos:position pos:line="26" pos:column="21"/></name></name></expr>;<pos:position pos:line="26" pos:column="22"/></expr_stmt>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><operator pos:line="27" pos:column="9">*<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">dep<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">==<pos:position pos:line="27" pos:column="16"/></operator> <literal type="char" pos:line="27" pos:column="17">','<pos:position pos:line="27" pos:column="20"/></literal></expr>)<pos:position pos:line="27" pos:column="21"/></condition><then pos:line="27" pos:column="21">
      <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="7">dep<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">++<pos:position pos:line="28" pos:column="12"/></operator></expr>;<pos:position pos:line="28" pos:column="13"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="29" pos:column="5">cp<pos:position pos:line="29" pos:column="7"/></name> <operator pos:line="29" pos:column="8">=<pos:position pos:line="29" pos:column="9"/></operator> <name pos:line="29" pos:column="10">dep<pos:position pos:line="29" pos:column="13"/></name></expr>;<pos:position pos:line="29" pos:column="14"/></expr_stmt>
    <while pos:line="30" pos:column="5">while <condition pos:line="30" pos:column="11">(<expr><operator pos:line="30" pos:column="12">*<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="13">cp<pos:position pos:line="30" pos:column="15"/></name></expr>)<pos:position pos:line="30" pos:column="16"/></condition>
    <block pos:line="31" pos:column="5">{
      <if pos:line="32" pos:column="7">if <condition pos:line="32" pos:column="10">(<expr><operator pos:line="32" pos:column="11">!<pos:position pos:line="32" pos:column="12"/></operator><call><name pos:line="32" pos:column="12">isdigit<pos:position pos:line="32" pos:column="19"/></name> <argument_list pos:line="32" pos:column="20">(<argument><expr><operator pos:line="32" pos:column="21">(<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">unsigned<pos:position pos:line="32" pos:column="30"/></name> <name pos:line="32" pos:column="31">char<pos:position pos:line="32" pos:column="35"/></name><operator pos:line="32" pos:column="35">)<pos:position pos:line="32" pos:column="36"/></operator> <operator pos:line="32" pos:column="37">*<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="38">cp<pos:position pos:line="32" pos:column="40"/></name></expr></argument>)<pos:position pos:line="32" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="42"/></condition><then pos:line="32" pos:column="42">
	<block type="pseudo"><break pos:line="33" pos:column="9">break;<pos:position pos:line="33" pos:column="15"/></break></block></then></if>
      <expr_stmt><expr><name pos:line="34" pos:column="7">cp<pos:position pos:line="34" pos:column="9"/></name><operator pos:line="34" pos:column="9">++<pos:position pos:line="34" pos:column="11"/></operator></expr>;<pos:position pos:line="34" pos:column="12"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></while>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><operator pos:line="36" pos:column="9">!<pos:position pos:line="36" pos:column="10"/></operator><operator pos:line="36" pos:column="10">*<pos:position pos:line="36" pos:column="11"/></operator><name pos:line="36" pos:column="11">cp<pos:position pos:line="36" pos:column="13"/></name></expr>)<pos:position pos:line="36" pos:column="14"/></condition><then pos:line="36" pos:column="14">
    <block pos:line="37" pos:column="5">{
      <expr_stmt><expr><name pos:line="38" pos:column="7">n<pos:position pos:line="38" pos:column="8"/></name> <operator pos:line="38" pos:column="9">=<pos:position pos:line="38" pos:column="10"/></operator> <call><name pos:line="38" pos:column="11">atoi<pos:position pos:line="38" pos:column="15"/></name> <argument_list pos:line="38" pos:column="16">(<argument><expr><name pos:line="38" pos:column="17">dep<pos:position pos:line="38" pos:column="20"/></name></expr></argument>)<pos:position pos:line="38" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="22"/></expr_stmt>
      <if pos:line="39" pos:column="7">if <condition pos:line="39" pos:column="10">(<expr><name pos:line="39" pos:column="11">n<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">&gt;<pos:position pos:line="39" pos:column="17"/></operator> <name pos:line="39" pos:column="15">hi<pos:position pos:line="39" pos:column="17"/></name></expr>)<pos:position pos:line="39" pos:column="18"/></condition><then pos:line="39" pos:column="18">
	<block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="9">hi<pos:position pos:line="40" pos:column="11"/></name> <operator pos:line="40" pos:column="12">=<pos:position pos:line="40" pos:column="13"/></operator> <name pos:line="40" pos:column="14">n<pos:position pos:line="40" pos:column="15"/></name></expr>;<pos:position pos:line="40" pos:column="16"/></expr_stmt></block></then></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>
  }<pos:position pos:line="42" pos:column="4"/></block></while>
  <expr_stmt><expr><call><name pos:line="43" pos:column="3">closedir<pos:position pos:line="43" pos:column="11"/></name> <argument_list pos:line="43" pos:column="12">(<argument><expr><name pos:line="43" pos:column="13">dirp<pos:position pos:line="43" pos:column="17"/></name></expr></argument>)<pos:position pos:line="43" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="19"/></expr_stmt>

  <comment type="block" pos:line="45" pos:column="3">/* 
   * Now try to rename the file to the proper name.
   * 
   * Note: We may have to try multiple times, until we find a free
   * slot.
   */</comment>

  <macro><name pos:line="52" pos:column="3">FOREVER<pos:position pos:line="52" pos:column="10"/></name></macro>
  <block pos:line="53" pos:column="3">{
    <expr_stmt><expr><name pos:line="54" pos:column="5">hi<pos:position pos:line="54" pos:column="7"/></name><operator pos:line="54" pos:column="7">++<pos:position pos:line="54" pos:column="9"/></operator></expr>;<pos:position pos:line="54" pos:column="10"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">snprintf<pos:position pos:line="55" pos:column="13"/></name> <argument_list pos:line="55" pos:column="14">(<argument><expr><name pos:line="55" pos:column="15">tmp<pos:position pos:line="55" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="20">sizeof <argument_list pos:line="55" pos:column="27">(<argument><expr><name pos:line="55" pos:column="28">tmp<pos:position pos:line="55" pos:column="31"/></name></expr></argument>)<pos:position pos:line="55" pos:column="32"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="34">"%d"<pos:position pos:line="55" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="40">hi<pos:position pos:line="55" pos:column="42"/></name></expr></argument>)<pos:position pos:line="55" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">snprintf<pos:position pos:line="56" pos:column="13"/></name> <argument_list pos:line="56" pos:column="14">(<argument><expr><name pos:line="56" pos:column="15">path<pos:position pos:line="56" pos:column="19"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="21">sizeof <argument_list pos:line="56" pos:column="28">(<argument><expr><name pos:line="56" pos:column="29">path<pos:position pos:line="56" pos:column="33"/></name></expr></argument>)<pos:position pos:line="56" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="36">"%s/%s"<pos:position pos:line="56" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="45">ctx<pos:position pos:line="56" pos:column="48"/></name><operator pos:line="56" pos:column="48">-&gt;<pos:position pos:line="56" pos:column="53"/></operator><name pos:line="56" pos:column="50">path<pos:position pos:line="56" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="56">tmp<pos:position pos:line="56" pos:column="59"/></name></expr></argument>)<pos:position pos:line="56" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="61"/></expr_stmt>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><call><name pos:line="57" pos:column="9">safe_rename<pos:position pos:line="57" pos:column="20"/></name> <argument_list pos:line="57" pos:column="21">(<argument><expr><name><name pos:line="57" pos:column="22">msg<pos:position pos:line="57" pos:column="25"/></name><operator pos:line="57" pos:column="25">-&gt;<pos:position pos:line="57" pos:column="30"/></operator><name pos:line="57" pos:column="27">path<pos:position pos:line="57" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="33">path<pos:position pos:line="57" pos:column="37"/></name></expr></argument>)<pos:position pos:line="57" pos:column="38"/></argument_list></call> <operator pos:line="57" pos:column="39">==<pos:position pos:line="57" pos:column="41"/></operator> <literal type="number" pos:line="57" pos:column="42">0<pos:position pos:line="57" pos:column="43"/></literal></expr>)<pos:position pos:line="57" pos:column="44"/></condition><then pos:line="57" pos:column="44">
    <block pos:line="58" pos:column="5">{
      <if pos:line="59" pos:column="7">if <condition pos:line="59" pos:column="10">(<expr><name pos:line="59" pos:column="11">hdr<pos:position pos:line="59" pos:column="14"/></name></expr>)<pos:position pos:line="59" pos:column="15"/></condition><then pos:line="59" pos:column="15">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="9">mutt_str_replace<pos:position pos:line="60" pos:column="25"/></name> <argument_list pos:line="60" pos:column="26">(<argument><expr><operator pos:line="60" pos:column="27">&amp;<pos:position pos:line="60" pos:column="32"/></operator><name><name pos:line="60" pos:column="28">hdr<pos:position pos:line="60" pos:column="31"/></name><operator pos:line="60" pos:column="31">-&gt;<pos:position pos:line="60" pos:column="36"/></operator><name pos:line="60" pos:column="33">path<pos:position pos:line="60" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="39">tmp<pos:position pos:line="60" pos:column="42"/></name></expr></argument>)<pos:position pos:line="60" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="44"/></expr_stmt></block></then></if>
      <expr_stmt><expr><call><name pos:line="61" pos:column="7">FREE<pos:position pos:line="61" pos:column="11"/></name> <argument_list pos:line="61" pos:column="12">(<argument><expr><operator pos:line="61" pos:column="13">&amp;<pos:position pos:line="61" pos:column="18"/></operator><name><name pos:line="61" pos:column="14">msg<pos:position pos:line="61" pos:column="17"/></name><operator pos:line="61" pos:column="17">-&gt;<pos:position pos:line="61" pos:column="22"/></operator><name pos:line="61" pos:column="19">path<pos:position pos:line="61" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="25"/></expr_stmt>
      <break pos:line="62" pos:column="7">break;<pos:position pos:line="62" pos:column="13"/></break>
    }<pos:position pos:line="63" pos:column="6"/></block></then>
    <elseif pos:line="64" pos:column="5">else <if pos:line="64" pos:column="10">if <condition pos:line="64" pos:column="13">(<expr><name pos:line="64" pos:column="14">errno<pos:position pos:line="64" pos:column="19"/></name> <operator pos:line="64" pos:column="20">!=<pos:position pos:line="64" pos:column="22"/></operator> <name pos:line="64" pos:column="23">EEXIST<pos:position pos:line="64" pos:column="29"/></name></expr>)<pos:position pos:line="64" pos:column="30"/></condition><then pos:line="64" pos:column="30">
    <block pos:line="65" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="66" pos:column="7">mutt_perror<pos:position pos:line="66" pos:column="18"/></name> <argument_list pos:line="66" pos:column="19">(<argument><expr><name><name pos:line="66" pos:column="20">ctx<pos:position pos:line="66" pos:column="23"/></name><operator pos:line="66" pos:column="23">-&gt;<pos:position pos:line="66" pos:column="28"/></operator><name pos:line="66" pos:column="25">path<pos:position pos:line="66" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="31"/></expr_stmt>
      <return pos:line="67" pos:column="7">return <expr><operator pos:line="67" pos:column="14">-<pos:position pos:line="67" pos:column="15"/></operator><literal type="number" pos:line="67" pos:column="15">1<pos:position pos:line="67" pos:column="16"/></literal></expr>;<pos:position pos:line="67" pos:column="17"/></return>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="69" pos:column="4"/></block>
  <if pos:line="70" pos:column="3">if <condition pos:line="70" pos:column="6">(<expr><name pos:line="70" pos:column="7">updseq<pos:position pos:line="70" pos:column="13"/></name></expr>)<pos:position pos:line="70" pos:column="14"/></condition><then pos:line="70" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="5">mh_sequences_add_one<pos:position pos:line="71" pos:column="25"/></name> <argument_list pos:line="71" pos:column="26">(<argument><expr><name pos:line="71" pos:column="27">ctx<pos:position pos:line="71" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="32">hi<pos:position pos:line="71" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="36">!<pos:position pos:line="71" pos:column="37"/></operator><name><name pos:line="71" pos:column="37">msg<pos:position pos:line="71" pos:column="40"/></name><operator pos:line="71" pos:column="40">-&gt;<pos:position pos:line="71" pos:column="45"/></operator><name pos:line="71" pos:column="42">flags<pos:position pos:line="71" pos:column="47"/></name><operator pos:line="71" pos:column="47">.<pos:position pos:line="71" pos:column="48"/></operator><name pos:line="71" pos:column="48">read<pos:position pos:line="71" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="54">msg<pos:position pos:line="71" pos:column="57"/></name><operator pos:line="71" pos:column="57">-&gt;<pos:position pos:line="71" pos:column="62"/></operator><name pos:line="71" pos:column="59">flags<pos:position pos:line="71" pos:column="64"/></name><operator pos:line="71" pos:column="64">.<pos:position pos:line="71" pos:column="65"/></operator><name pos:line="71" pos:column="65">flagged<pos:position pos:line="71" pos:column="72"/></name></name></expr></argument>,
			  <argument><expr><name><name pos:line="72" pos:column="27">msg<pos:position pos:line="72" pos:column="30"/></name><operator pos:line="72" pos:column="30">-&gt;<pos:position pos:line="72" pos:column="35"/></operator><name pos:line="72" pos:column="32">flags<pos:position pos:line="72" pos:column="37"/></name><operator pos:line="72" pos:column="37">.<pos:position pos:line="72" pos:column="38"/></operator><name pos:line="72" pos:column="38">replied<pos:position pos:line="72" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="47"/></expr_stmt></block></then></if>
  <return pos:line="73" pos:column="3">return <expr><literal type="number" pos:line="73" pos:column="10">0<pos:position pos:line="73" pos:column="11"/></literal></expr>;<pos:position pos:line="73" pos:column="12"/></return>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
