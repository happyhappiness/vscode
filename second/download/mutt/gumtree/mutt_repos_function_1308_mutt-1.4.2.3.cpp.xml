<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1308_mutt-1.4.2.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">imap_check_mailbox<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">CONTEXT<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">ctx<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">int<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">index_hint<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* overload keyboard timeout to avoid many mailbox checks in a row.
   * Most users don't like having to wait exactly when they press a key. */</comment>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">IMAP_DATA<pos:position pos:line="6" pos:column="12"/></name><modifier pos:line="6" pos:column="12">*<pos:position pos:line="6" pos:column="13"/></modifier></type> <name pos:line="6" pos:column="14">idata<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">time_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">now<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">result<pos:position pos:line="8" pos:column="13"/></name> <init pos:line="8" pos:column="14">= <expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">idata<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">=<pos:position pos:line="10" pos:column="10"/></operator> <operator pos:line="10" pos:column="11">(<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="12">IMAP_DATA<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">*<pos:position pos:line="10" pos:column="22"/></operator><operator pos:line="10" pos:column="22">)<pos:position pos:line="10" pos:column="23"/></operator> <name><name pos:line="10" pos:column="24">ctx<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">-&gt;<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="29">data<pos:position pos:line="10" pos:column="33"/></name></name></expr>;<pos:position pos:line="10" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><name pos:line="12" pos:column="3">now<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">=<pos:position pos:line="12" pos:column="8"/></operator> <call><name pos:line="12" pos:column="9">time<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><name pos:line="12" pos:column="14">NULL<pos:position pos:line="12" pos:column="18"/></name></expr></argument>)<pos:position pos:line="12" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="20"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">now<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">&gt;<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="13">ImapLastCheck<pos:position pos:line="13" pos:column="26"/></name> <operator pos:line="13" pos:column="27">+<pos:position pos:line="13" pos:column="28"/></operator> <name pos:line="13" pos:column="29">Timeout<pos:position pos:line="13" pos:column="36"/></name></expr>)<pos:position pos:line="13" pos:column="37"/></condition><then pos:line="13" pos:column="37">
  <block pos:line="14" pos:column="3">{
    <expr_stmt><expr><name pos:line="15" pos:column="5">ImapLastCheck<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="21">now<pos:position pos:line="15" pos:column="24"/></name></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name pos:line="17" pos:column="9">imap_exec<pos:position pos:line="17" pos:column="18"/></name> <argument_list pos:line="17" pos:column="19">(<argument><expr><name pos:line="17" pos:column="20">idata<pos:position pos:line="17" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="27">"NOOP"<pos:position pos:line="17" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="35">0<pos:position pos:line="17" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="37"/></argument_list></call> <operator pos:line="17" pos:column="38">!=<pos:position pos:line="17" pos:column="40"/></operator> <literal type="number" pos:line="17" pos:column="41">0<pos:position pos:line="17" pos:column="42"/></literal></expr>)<pos:position pos:line="17" pos:column="43"/></condition><then pos:line="17" pos:column="43">
      <block type="pseudo"><return pos:line="18" pos:column="7">return <expr><operator pos:line="18" pos:column="14">-<pos:position pos:line="18" pos:column="15"/></operator><literal type="number" pos:line="18" pos:column="15">1<pos:position pos:line="18" pos:column="16"/></literal></expr>;<pos:position pos:line="18" pos:column="17"/></return></block></then></if>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="21" pos:column="3">/* We call this even when we haven't run NOOP in case we have pending
   * changes to process, since we can reopen here. */</comment>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">imap_cmd_finish<pos:position pos:line="23" pos:column="18"/></name> <argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">idata<pos:position pos:line="23" pos:column="25"/></name></expr></argument>)<pos:position pos:line="23" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt>

  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><name><name pos:line="25" pos:column="7">idata<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">-&gt;<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="14">check_status<pos:position pos:line="25" pos:column="26"/></name></name> <operator pos:line="25" pos:column="27">&amp;<pos:position pos:line="25" pos:column="32"/></operator> <name pos:line="25" pos:column="29">IMAP_EXPUNGE_PENDING<pos:position pos:line="25" pos:column="49"/></name></expr>)<pos:position pos:line="25" pos:column="50"/></condition><then pos:line="25" pos:column="50">
    <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="5">result<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">=<pos:position pos:line="26" pos:column="13"/></operator> <name pos:line="26" pos:column="14">M_REOPENED<pos:position pos:line="26" pos:column="24"/></name></expr>;<pos:position pos:line="26" pos:column="25"/></expr_stmt></block></then>
  <elseif pos:line="27" pos:column="3">else <if pos:line="27" pos:column="8">if <condition pos:line="27" pos:column="11">(<expr><name><name pos:line="27" pos:column="12">idata<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">-&gt;<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="19">check_status<pos:position pos:line="27" pos:column="31"/></name></name> <operator pos:line="27" pos:column="32">&amp;<pos:position pos:line="27" pos:column="37"/></operator> <name pos:line="27" pos:column="34">IMAP_NEWMAIL_PENDING<pos:position pos:line="27" pos:column="54"/></name></expr>)<pos:position pos:line="27" pos:column="55"/></condition><then pos:line="27" pos:column="55">
    <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="5">result<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <name pos:line="28" pos:column="14">M_NEW_MAIL<pos:position pos:line="28" pos:column="24"/></name></expr>;<pos:position pos:line="28" pos:column="25"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="29" pos:column="3">else <if pos:line="29" pos:column="8">if <condition pos:line="29" pos:column="11">(<expr><name><name pos:line="29" pos:column="12">idata<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">-&gt;<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="19">check_status<pos:position pos:line="29" pos:column="31"/></name></name> <operator pos:line="29" pos:column="32">&amp;<pos:position pos:line="29" pos:column="37"/></operator> <name pos:line="29" pos:column="34">IMAP_FLAGS_PENDING<pos:position pos:line="29" pos:column="52"/></name></expr>)<pos:position pos:line="29" pos:column="53"/></condition><then pos:line="29" pos:column="53">
    <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="5">result<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <name pos:line="30" pos:column="14">M_FLAGS<pos:position pos:line="30" pos:column="21"/></name></expr>;<pos:position pos:line="30" pos:column="22"/></expr_stmt></block></then></if></elseif></if>

  <expr_stmt><expr><name><name pos:line="32" pos:column="3">idata<pos:position pos:line="32" pos:column="8"/></name><operator pos:line="32" pos:column="8">-&gt;<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="10">check_status<pos:position pos:line="32" pos:column="22"/></name></name> <operator pos:line="32" pos:column="23">=<pos:position pos:line="32" pos:column="24"/></operator> <literal type="number" pos:line="32" pos:column="25">0<pos:position pos:line="32" pos:column="26"/></literal></expr>;<pos:position pos:line="32" pos:column="27"/></expr_stmt>

  <return pos:line="34" pos:column="3">return <expr><name pos:line="34" pos:column="10">result<pos:position pos:line="34" pos:column="16"/></name></expr>;<pos:position pos:line="34" pos:column="17"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
