<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2054_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">imap_logout<pos:position pos:line="1" pos:column="17"/></name> <parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">IMAP_DATA<pos:position pos:line="1" pos:column="28"/></name><modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier><modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type> <name pos:line="1" pos:column="31">idata<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* we set status here to let imap_handle_untagged know we _expect_ to
   * receive a bye response (so it doesn't freak out and close the conn) */</comment>
  <expr_stmt><expr><name><operator pos:line="5" pos:column="3">(<pos:position pos:line="5" pos:column="4"/></operator><operator pos:line="5" pos:column="4">*<pos:position pos:line="5" pos:column="5"/></operator><name pos:line="5" pos:column="5">idata<pos:position pos:line="5" pos:column="10"/></name><operator pos:line="5" pos:column="10">)<pos:position pos:line="5" pos:column="11"/></operator><operator pos:line="5" pos:column="11">-&gt;<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name></name> <operator pos:line="5" pos:column="20">=<pos:position pos:line="5" pos:column="21"/></operator> <name pos:line="5" pos:column="22">IMAP_BYE<pos:position pos:line="5" pos:column="30"/></name></expr>;<pos:position pos:line="5" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6" pos:column="3">imap_cmd_start<pos:position pos:line="6" pos:column="17"/></name> <argument_list pos:line="6" pos:column="18">(<argument><expr><operator pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></operator><name pos:line="6" pos:column="20">idata<pos:position pos:line="6" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="27">"LOGOUT"<pos:position pos:line="6" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="37"/></expr_stmt>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">ImapPollTimeout<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">&lt;=<pos:position pos:line="7" pos:column="28"/></operator> <literal type="number" pos:line="7" pos:column="26">0<pos:position pos:line="7" pos:column="27"/></literal> <operator pos:line="7" pos:column="28">||<pos:position pos:line="7" pos:column="30"/></operator>
      <call><name pos:line="8" pos:column="7">mutt_socket_poll<pos:position pos:line="8" pos:column="23"/></name> <argument_list pos:line="8" pos:column="24">(<argument><expr><name><operator pos:line="8" pos:column="25">(<pos:position pos:line="8" pos:column="26"/></operator><operator pos:line="8" pos:column="26">*<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="27">idata<pos:position pos:line="8" pos:column="32"/></name><operator pos:line="8" pos:column="32">)<pos:position pos:line="8" pos:column="33"/></operator><operator pos:line="8" pos:column="33">-&gt;<pos:position pos:line="8" pos:column="38"/></operator><name pos:line="8" pos:column="35">conn<pos:position pos:line="8" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="41">ImapPollTimeout<pos:position pos:line="8" pos:column="56"/></name></expr></argument>)<pos:position pos:line="8" pos:column="57"/></argument_list></call> <operator pos:line="8" pos:column="58">!=<pos:position pos:line="8" pos:column="60"/></operator> <literal type="number" pos:line="8" pos:column="61">0<pos:position pos:line="8" pos:column="62"/></literal></expr>)<pos:position pos:line="8" pos:column="63"/></condition><then pos:line="8" pos:column="63">
  <block pos:line="9" pos:column="3">{
    <while pos:line="10" pos:column="5">while <condition pos:line="10" pos:column="11">(<expr><call><name pos:line="10" pos:column="12">imap_cmd_step<pos:position pos:line="10" pos:column="25"/></name> <argument_list pos:line="10" pos:column="26">(<argument><expr><operator pos:line="10" pos:column="27">*<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="28">idata<pos:position pos:line="10" pos:column="33"/></name></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call> <operator pos:line="10" pos:column="35">==<pos:position pos:line="10" pos:column="37"/></operator> <name pos:line="10" pos:column="38">IMAP_CMD_CONTINUE<pos:position pos:line="10" pos:column="55"/></name></expr>)<pos:position pos:line="10" pos:column="56"/></condition>
      <block type="pseudo"><empty_stmt pos:line="11" pos:column="7">;<pos:position pos:line="11" pos:column="8"/></empty_stmt></block></while>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="14" pos:column="3">mutt_socket_close<pos:position pos:line="14" pos:column="20"/></name> <argument_list pos:line="14" pos:column="21">(<argument><expr><name><operator pos:line="14" pos:column="22">(<pos:position pos:line="14" pos:column="23"/></operator><operator pos:line="14" pos:column="23">*<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="24">idata<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">)<pos:position pos:line="14" pos:column="30"/></operator><operator pos:line="14" pos:column="30">-&gt;<pos:position pos:line="14" pos:column="35"/></operator><name pos:line="14" pos:column="32">conn<pos:position pos:line="14" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="15" pos:column="3">imap_free_idata<pos:position pos:line="15" pos:column="18"/></name> <argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">idata<pos:position pos:line="15" pos:column="25"/></name></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
