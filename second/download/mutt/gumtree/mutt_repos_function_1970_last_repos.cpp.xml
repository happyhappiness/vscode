<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1970_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name> <parameter_list pos:line="1" pos:column="10">(<parameter><decl><type><name pos:line="1" pos:column="11">int<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">argc<pos:position pos:line="1" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name><index pos:line="1" pos:column="31">[]<pos:position pos:line="1" pos:column="33"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">c<pos:position pos:line="3" pos:column="8"/></name></decl>;<pos:position pos:line="3" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">FILE<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">f<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">(<pos:position pos:line="6" pos:column="8"/></operator><name pos:line="6" pos:column="8">Progname<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">=<pos:position pos:line="6" pos:column="18"/></operator> <call><name pos:line="6" pos:column="19">strrchr<pos:position pos:line="6" pos:column="26"/></name> <argument_list pos:line="6" pos:column="27">(<argument><expr><name><name pos:line="6" pos:column="28">argv<pos:position pos:line="6" pos:column="32"/></name><index pos:line="6" pos:column="32">[<expr><literal type="number" pos:line="6" pos:column="33">0<pos:position pos:line="6" pos:column="34"/></literal></expr>]<pos:position pos:line="6" pos:column="35"/></index></name></expr></argument>, <argument><expr><literal type="char" pos:line="6" pos:column="37">'/'<pos:position pos:line="6" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></call><operator pos:line="6" pos:column="41">)<pos:position pos:line="6" pos:column="42"/></operator></expr>)<pos:position pos:line="6" pos:column="43"/></condition><then pos:line="6" pos:column="43">
    <block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="5">Progname<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">++<pos:position pos:line="7" pos:column="15"/></operator></expr>;<pos:position pos:line="7" pos:column="16"/></expr_stmt></block></then>
  <else pos:line="8" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="5">Progname<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <name><name pos:line="9" pos:column="16">argv<pos:position pos:line="9" pos:column="20"/></name><index pos:line="9" pos:column="20">[<expr><literal type="number" pos:line="9" pos:column="21">0<pos:position pos:line="9" pos:column="22"/></literal></expr>]<pos:position pos:line="9" pos:column="23"/></index></name></expr>;<pos:position pos:line="9" pos:column="24"/></expr_stmt></block></else></if>
  
  <while pos:line="11" pos:column="3">while <condition pos:line="11" pos:column="9">(<expr><operator pos:line="11" pos:column="10">(<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">c<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <call><name pos:line="11" pos:column="15">getopt<pos:position pos:line="11" pos:column="21"/></name> <argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">argc<pos:position pos:line="11" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="29">argv<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="35">"cmsd"<pos:position pos:line="11" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="42"/></argument_list></call><operator pos:line="11" pos:column="42">)<pos:position pos:line="11" pos:column="43"/></operator> <operator pos:line="11" pos:column="44">!=<pos:position pos:line="11" pos:column="46"/></operator> <name pos:line="11" pos:column="47">EOF<pos:position pos:line="11" pos:column="50"/></name></expr>)<pos:position pos:line="11" pos:column="51"/></condition>
  <block pos:line="12" pos:column="3">{
    <switch pos:line="13" pos:column="5">switch <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">c<pos:position pos:line="13" pos:column="14"/></name></expr>)<pos:position pos:line="13" pos:column="15"/></condition>
    <block pos:line="14" pos:column="5">{
      <case pos:line="15" pos:column="7">case <expr><literal type="char" pos:line="15" pos:column="12">'c'<pos:position pos:line="15" pos:column="15"/></literal></expr>:<pos:position pos:line="15" pos:column="16"/></case> <expr_stmt><expr><name pos:line="15" pos:column="17">OutputFormat<pos:position pos:line="15" pos:column="29"/></name> <operator pos:line="15" pos:column="30">=<pos:position pos:line="15" pos:column="31"/></operator> <name pos:line="15" pos:column="32">F_CONF<pos:position pos:line="15" pos:column="38"/></name></expr>;<pos:position pos:line="15" pos:column="39"/></expr_stmt> <break pos:line="15" pos:column="40">break;<pos:position pos:line="15" pos:column="46"/></break>
      <case pos:line="16" pos:column="7">case <expr><literal type="char" pos:line="16" pos:column="12">'m'<pos:position pos:line="16" pos:column="15"/></literal></expr>:<pos:position pos:line="16" pos:column="16"/></case> <expr_stmt><expr><name pos:line="16" pos:column="17">OutputFormat<pos:position pos:line="16" pos:column="29"/></name> <operator pos:line="16" pos:column="30">=<pos:position pos:line="16" pos:column="31"/></operator> <name pos:line="16" pos:column="32">F_MAN<pos:position pos:line="16" pos:column="37"/></name></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt> <break pos:line="16" pos:column="39">break;<pos:position pos:line="16" pos:column="45"/></break>
      <case pos:line="17" pos:column="7">case <expr><literal type="char" pos:line="17" pos:column="12">'s'<pos:position pos:line="17" pos:column="15"/></literal></expr>:<pos:position pos:line="17" pos:column="16"/></case> <expr_stmt><expr><name pos:line="17" pos:column="17">OutputFormat<pos:position pos:line="17" pos:column="29"/></name> <operator pos:line="17" pos:column="30">=<pos:position pos:line="17" pos:column="31"/></operator> <name pos:line="17" pos:column="32">F_SGML<pos:position pos:line="17" pos:column="38"/></name></expr>;<pos:position pos:line="17" pos:column="39"/></expr_stmt> <break pos:line="17" pos:column="40">break;<pos:position pos:line="17" pos:column="46"/></break>
      <case pos:line="18" pos:column="7">case <expr><literal type="char" pos:line="18" pos:column="12">'d'<pos:position pos:line="18" pos:column="15"/></literal></expr>:<pos:position pos:line="18" pos:column="16"/></case> <expr_stmt><expr><name pos:line="18" pos:column="17">Debug<pos:position pos:line="18" pos:column="22"/></name><operator pos:line="18" pos:column="22">++<pos:position pos:line="18" pos:column="24"/></operator></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt> <break pos:line="18" pos:column="26">break;<pos:position pos:line="18" pos:column="32"/></break>
      <default pos:line="19" pos:column="7">default:<pos:position pos:line="19" pos:column="15"/></default> 
      <block pos:line="20" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">fprintf<pos:position pos:line="21" pos:column="16"/></name> <argument_list pos:line="21" pos:column="17">(<argument><expr><name pos:line="21" pos:column="18">stderr<pos:position pos:line="21" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="26">"%s: bad command line parameter.\n"<pos:position pos:line="21" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="63">Progname<pos:position pos:line="21" pos:column="71"/></name></expr></argument>)<pos:position pos:line="21" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="73"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">exit<pos:position pos:line="22" pos:column="13"/></name> <argument_list pos:line="22" pos:column="14">(<argument><expr><literal type="number" pos:line="22" pos:column="15">1<pos:position pos:line="22" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="18"/></expr_stmt>
      }<pos:position pos:line="23" pos:column="8"/></block>
    }<pos:position pos:line="24" pos:column="6"/></block></switch>
  }<pos:position pos:line="25" pos:column="4"/></block></while>

  <if pos:line="27" pos:column="3">if <condition pos:line="27" pos:column="6">(<expr><name pos:line="27" pos:column="7">optind<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">!=<pos:position pos:line="27" pos:column="16"/></operator> <name pos:line="27" pos:column="17">argc<pos:position pos:line="27" pos:column="21"/></name></expr>)<pos:position pos:line="27" pos:column="22"/></condition><then pos:line="27" pos:column="22">
  <block pos:line="28" pos:column="3">{
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">f<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <call><name pos:line="29" pos:column="14">fopen<pos:position pos:line="29" pos:column="19"/></name> <argument_list pos:line="29" pos:column="20">(<argument><expr><name><name pos:line="29" pos:column="21">argv<pos:position pos:line="29" pos:column="25"/></name><index pos:line="29" pos:column="25">[<expr><name pos:line="29" pos:column="26">optind<pos:position pos:line="29" pos:column="32"/></name></expr>]<pos:position pos:line="29" pos:column="33"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="35">"r"<pos:position pos:line="29" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="39"/></argument_list></call><operator pos:line="29" pos:column="39">)<pos:position pos:line="29" pos:column="40"/></operator> <operator pos:line="29" pos:column="41">==<pos:position pos:line="29" pos:column="43"/></operator> <name pos:line="29" pos:column="44">NULL<pos:position pos:line="29" pos:column="48"/></name></expr>)<pos:position pos:line="29" pos:column="49"/></condition><then pos:line="29" pos:column="49">
    <block pos:line="30" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="31" pos:column="7">fprintf<pos:position pos:line="31" pos:column="14"/></name> <argument_list pos:line="31" pos:column="15">(<argument><expr><name pos:line="31" pos:column="16">stderr<pos:position pos:line="31" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="24">"%s: Can't open %s (%s).\n"<pos:position pos:line="31" pos:column="51"/></literal></expr></argument>,
	       <argument><expr><name pos:line="32" pos:column="16">Progname<pos:position pos:line="32" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="26">argv<pos:position pos:line="32" pos:column="30"/></name><index pos:line="32" pos:column="30">[<expr><name pos:line="32" pos:column="31">optind<pos:position pos:line="32" pos:column="37"/></name></expr>]<pos:position pos:line="32" pos:column="38"/></index></name></expr></argument>, <argument><expr><call><name pos:line="32" pos:column="40">strerror<pos:position pos:line="32" pos:column="48"/></name> <argument_list pos:line="32" pos:column="49">(<argument><expr><name pos:line="32" pos:column="50">errno<pos:position pos:line="32" pos:column="55"/></name></expr></argument>)<pos:position pos:line="32" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="58"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">exit<pos:position pos:line="33" pos:column="11"/></name> <argument_list pos:line="33" pos:column="12">(<argument><expr><literal type="number" pos:line="33" pos:column="13">1<pos:position pos:line="33" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>
  }<pos:position pos:line="35" pos:column="4"/></block></then>
  <else pos:line="36" pos:column="3">else 
    <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="5">f<pos:position pos:line="37" pos:column="6"/></name> <operator pos:line="37" pos:column="7">=<pos:position pos:line="37" pos:column="8"/></operator> <name pos:line="37" pos:column="9">stdin<pos:position pos:line="37" pos:column="14"/></name></expr>;<pos:position pos:line="37" pos:column="15"/></expr_stmt></block></else></if>

  <switch pos:line="39" pos:column="3">switch <condition pos:line="39" pos:column="10">(<expr><name pos:line="39" pos:column="11">OutputFormat<pos:position pos:line="39" pos:column="23"/></name></expr>)<pos:position pos:line="39" pos:column="24"/></condition>
  <block pos:line="40" pos:column="3">{
    <case pos:line="41" pos:column="5">case <expr><name pos:line="41" pos:column="10">F_CONF<pos:position pos:line="41" pos:column="16"/></name></expr>:<pos:position pos:line="41" pos:column="17"/></case> 
    <case pos:line="42" pos:column="5">case <expr><name pos:line="42" pos:column="10">F_MAN<pos:position pos:line="42" pos:column="15"/></name></expr>:<pos:position pos:line="42" pos:column="16"/></case>  
    <case pos:line="43" pos:column="5">case <expr><name pos:line="43" pos:column="10">F_SGML<pos:position pos:line="43" pos:column="16"/></name></expr>:<pos:position pos:line="43" pos:column="17"/></case> <expr_stmt><expr><call><name pos:line="43" pos:column="18">makedoc<pos:position pos:line="43" pos:column="25"/></name> <argument_list pos:line="43" pos:column="26">(<argument><expr><name pos:line="43" pos:column="27">f<pos:position pos:line="43" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="30">stdout<pos:position pos:line="43" pos:column="36"/></name></expr></argument>)<pos:position pos:line="43" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="38"/></expr_stmt> <break pos:line="43" pos:column="39">break;<pos:position pos:line="43" pos:column="45"/></break>
    <default pos:line="44" pos:column="5">default:<pos:position pos:line="44" pos:column="13"/></default>
    <block pos:line="45" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">fprintf<pos:position pos:line="46" pos:column="14"/></name> <argument_list pos:line="46" pos:column="15">(<argument><expr><name pos:line="46" pos:column="16">stderr<pos:position pos:line="46" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="24">"%s: No output format specified.\n"<pos:position pos:line="46" pos:column="59"/></literal></expr></argument>,
	       <argument><expr><name pos:line="47" pos:column="16">Progname<pos:position pos:line="47" pos:column="24"/></name></expr></argument>)<pos:position pos:line="47" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="48" pos:column="7">exit<pos:position pos:line="48" pos:column="11"/></name> <argument_list pos:line="48" pos:column="12">(<argument><expr><literal type="number" pos:line="48" pos:column="13">1<pos:position pos:line="48" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block>
  }<pos:position pos:line="50" pos:column="4"/></block></switch>
  
  <if pos:line="52" pos:column="3">if <condition pos:line="52" pos:column="6">(<expr><name pos:line="52" pos:column="7">f<pos:position pos:line="52" pos:column="8"/></name> <operator pos:line="52" pos:column="9">!=<pos:position pos:line="52" pos:column="11"/></operator> <name pos:line="52" pos:column="12">stdin<pos:position pos:line="52" pos:column="17"/></name></expr>)<pos:position pos:line="52" pos:column="18"/></condition><then pos:line="52" pos:column="18">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="5">fclose<pos:position pos:line="53" pos:column="11"/></name> <argument_list pos:line="53" pos:column="12">(<argument><expr><name pos:line="53" pos:column="13">f<pos:position pos:line="53" pos:column="14"/></name></expr></argument>)<pos:position pos:line="53" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="16"/></expr_stmt></block></then></if>

  <return pos:line="55" pos:column="3">return <expr><literal type="number" pos:line="55" pos:column="10">0<pos:position pos:line="55" pos:column="11"/></literal></expr>;<pos:position pos:line="55" pos:column="12"/></return>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
