<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_80_mutt-1.4.2.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">eat_regexp<pos:position pos:line="1" pos:column="15"/></name> <parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name pos:line="1" pos:column="17">pattern_t<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">pat<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">BUFFER<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">s<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">BUFFER<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">err<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">BUFFER<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">buf<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">r<pos:position pos:line="4" pos:column="8"/></name></decl>;<pos:position pos:line="4" pos:column="9"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">memset<pos:position pos:line="6" pos:column="9"/></name> <argument_list pos:line="6" pos:column="10">(<argument><expr><operator pos:line="6" pos:column="11">&amp;<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="12">buf<pos:position pos:line="6" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="17">0<pos:position pos:line="6" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="20">sizeof <argument_list pos:line="6" pos:column="27">(<argument><expr><name pos:line="6" pos:column="28">buf<pos:position pos:line="6" pos:column="31"/></name></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="34"/></expr_stmt>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><call><name pos:line="7" pos:column="7">mutt_extract_token<pos:position pos:line="7" pos:column="25"/></name> <argument_list pos:line="7" pos:column="26">(<argument><expr><operator pos:line="7" pos:column="27">&amp;<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="28">buf<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="33">s<pos:position pos:line="7" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="36">M_TOKEN_PATTERN<pos:position pos:line="7" pos:column="51"/></name> <operator pos:line="7" pos:column="52">|<pos:position pos:line="7" pos:column="53"/></operator> <name pos:line="7" pos:column="54">M_TOKEN_COMMENT<pos:position pos:line="7" pos:column="69"/></name></expr></argument>)<pos:position pos:line="7" pos:column="70"/></argument_list></call> <operator pos:line="7" pos:column="71">!=<pos:position pos:line="7" pos:column="73"/></operator> <literal type="number" pos:line="7" pos:column="74">0<pos:position pos:line="7" pos:column="75"/></literal> <operator pos:line="7" pos:column="76">||<pos:position pos:line="7" pos:column="78"/></operator>
      <operator pos:line="8" pos:column="7">!<pos:position pos:line="8" pos:column="8"/></operator><name><name pos:line="8" pos:column="8">buf<pos:position pos:line="8" pos:column="11"/></name><operator pos:line="8" pos:column="11">.<pos:position pos:line="8" pos:column="12"/></operator><name pos:line="8" pos:column="12">data<pos:position pos:line="8" pos:column="16"/></name></name></expr>)<pos:position pos:line="8" pos:column="17"/></condition><then pos:line="8" pos:column="17">
  <block pos:line="9" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">snprintf<pos:position pos:line="10" pos:column="13"/></name> <argument_list pos:line="10" pos:column="14">(<argument><expr><name><name pos:line="10" pos:column="15">err<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">-&gt;<pos:position pos:line="10" pos:column="23"/></operator><name pos:line="10" pos:column="20">data<pos:position pos:line="10" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="26">err<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">-&gt;<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="31">dsize<pos:position pos:line="10" pos:column="36"/></name></name></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="38">_<pos:position pos:line="10" pos:column="39"/></name><argument_list pos:line="10" pos:column="39">(<argument><expr><literal type="string" pos:line="10" pos:column="40">"Error in expression: %s"<pos:position pos:line="10" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="68">s<pos:position pos:line="10" pos:column="69"/></name><operator pos:line="10" pos:column="69">-&gt;<pos:position pos:line="10" pos:column="74"/></operator><name pos:line="10" pos:column="71">dptr<pos:position pos:line="10" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="77"/></expr_stmt>
    <return pos:line="11" pos:column="5">return <expr><operator pos:line="11" pos:column="12">(<pos:position pos:line="11" pos:column="13"/></operator><operator pos:line="11" pos:column="13">-<pos:position pos:line="11" pos:column="14"/></operator><literal type="number" pos:line="11" pos:column="14">1<pos:position pos:line="11" pos:column="15"/></literal><operator pos:line="11" pos:column="15">)<pos:position pos:line="11" pos:column="16"/></operator></expr>;<pos:position pos:line="11" pos:column="17"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="13" pos:column="3">pat<pos:position pos:line="13" pos:column="6"/></name><operator pos:line="13" pos:column="6">-&gt;<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="8">rx<pos:position pos:line="13" pos:column="10"/></name></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <call><name pos:line="13" pos:column="13">safe_malloc<pos:position pos:line="13" pos:column="24"/></name> <argument_list pos:line="13" pos:column="25">(<argument><expr><sizeof pos:line="13" pos:column="26">sizeof <argument_list pos:line="13" pos:column="33">(<argument><expr><name pos:line="13" pos:column="34">regex_t<pos:position pos:line="13" pos:column="41"/></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">r<pos:position pos:line="14" pos:column="4"/></name> <operator pos:line="14" pos:column="5">=<pos:position pos:line="14" pos:column="6"/></operator> <call><name pos:line="14" pos:column="7">REGCOMP<pos:position pos:line="14" pos:column="14"/></name> <argument_list pos:line="14" pos:column="15">(<argument><expr><name><name pos:line="14" pos:column="16">pat<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">-&gt;<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="21">rx<pos:position pos:line="14" pos:column="23"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="25">buf<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">.<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="29">data<pos:position pos:line="14" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="35">REG_NEWLINE<pos:position pos:line="14" pos:column="46"/></name> <operator pos:line="14" pos:column="47">|<pos:position pos:line="14" pos:column="48"/></operator> <name pos:line="14" pos:column="49">REG_NOSUB<pos:position pos:line="14" pos:column="58"/></name> <operator pos:line="14" pos:column="59">|<pos:position pos:line="14" pos:column="60"/></operator> <call><name pos:line="14" pos:column="61">mutt_which_case<pos:position pos:line="14" pos:column="76"/></name> <argument_list pos:line="14" pos:column="77">(<argument><expr><name><name pos:line="14" pos:column="78">buf<pos:position pos:line="14" pos:column="81"/></name><operator pos:line="14" pos:column="81">.<pos:position pos:line="14" pos:column="82"/></operator><name pos:line="14" pos:column="82">data<pos:position pos:line="14" pos:column="86"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="87"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="89"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="15" pos:column="3">FREE<pos:position pos:line="15" pos:column="7"/></name> <argument_list pos:line="15" pos:column="8">(<argument><expr><operator pos:line="15" pos:column="9">&amp;<pos:position pos:line="15" pos:column="14"/></operator><name><name pos:line="15" pos:column="10">buf<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">.<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">data<pos:position pos:line="15" pos:column="18"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="20"/></expr_stmt>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">r<pos:position pos:line="16" pos:column="8"/></name></expr>)<pos:position pos:line="16" pos:column="9"/></condition><then pos:line="16" pos:column="9">
  <block pos:line="17" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">regerror<pos:position pos:line="18" pos:column="13"/></name> <argument_list pos:line="18" pos:column="14">(<argument><expr><name pos:line="18" pos:column="15">r<pos:position pos:line="18" pos:column="16"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="18">pat<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">-&gt;<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="23">rx<pos:position pos:line="18" pos:column="25"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="27">err<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">-&gt;<pos:position pos:line="18" pos:column="35"/></operator><name pos:line="18" pos:column="32">data<pos:position pos:line="18" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="38">err<pos:position pos:line="18" pos:column="41"/></name><operator pos:line="18" pos:column="41">-&gt;<pos:position pos:line="18" pos:column="46"/></operator><name pos:line="18" pos:column="43">dsize<pos:position pos:line="18" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">regfree<pos:position pos:line="19" pos:column="12"/></name> <argument_list pos:line="19" pos:column="13">(<argument><expr><name><name pos:line="19" pos:column="14">pat<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">-&gt;<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="19">rx<pos:position pos:line="19" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">safe_free<pos:position pos:line="20" pos:column="14"/></name> <argument_list pos:line="20" pos:column="15">(<argument><expr><operator pos:line="20" pos:column="16">(<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="17">void<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">*<pos:position pos:line="20" pos:column="23"/></operator><operator pos:line="20" pos:column="23">*<pos:position pos:line="20" pos:column="24"/></operator><operator pos:line="20" pos:column="24">)<pos:position pos:line="20" pos:column="25"/></operator> <operator pos:line="20" pos:column="26">&amp;<pos:position pos:line="20" pos:column="31"/></operator><name><name pos:line="20" pos:column="27">pat<pos:position pos:line="20" pos:column="30"/></name><operator pos:line="20" pos:column="30">-&gt;<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="32">rx<pos:position pos:line="20" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="36"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">(<pos:position pos:line="21" pos:column="13"/></operator><operator pos:line="21" pos:column="13">-<pos:position pos:line="21" pos:column="14"/></operator><literal type="number" pos:line="21" pos:column="14">1<pos:position pos:line="21" pos:column="15"/></literal><operator pos:line="21" pos:column="15">)<pos:position pos:line="21" pos:column="16"/></operator></expr>;<pos:position pos:line="21" pos:column="17"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>
  <return pos:line="23" pos:column="3">return <expr><literal type="number" pos:line="23" pos:column="10">0<pos:position pos:line="23" pos:column="11"/></literal></expr>;<pos:position pos:line="23" pos:column="12"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
