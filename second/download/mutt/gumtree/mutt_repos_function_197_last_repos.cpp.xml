<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_197_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">mutt_concatn_path<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">dst<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">size_t<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">dstlen<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
    <parameter><decl><type><specifier pos:line="2" pos:column="5">const<pos:position pos:line="2" pos:column="10"/></specifier> <name pos:line="2" pos:column="11">char<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type><name pos:line="2" pos:column="17">dir<pos:position pos:line="2" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="22">size_t<pos:position pos:line="2" pos:column="28"/></name></type> <name pos:line="2" pos:column="29">dirlen<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="37">const<pos:position pos:line="2" pos:column="42"/></specifier> <name pos:line="2" pos:column="43">char<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">fname<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">size_t<pos:position pos:line="2" pos:column="62"/></name></type> <name pos:line="2" pos:column="63">fnamelen<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="72"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">req<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">offset<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">dstlen<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">==<pos:position pos:line="7" pos:column="16"/></operator> <literal type="number" pos:line="7" pos:column="17">0<pos:position pos:line="7" pos:column="18"/></literal></expr>)<pos:position pos:line="7" pos:column="19"/></condition><then pos:line="7" pos:column="19">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><name pos:line="8" pos:column="12">NULL<pos:position pos:line="8" pos:column="16"/></name></expr>;<pos:position pos:line="8" pos:column="17"/></return></block></then></if> <comment type="block" pos:line="8" pos:column="18">/* probably should not mask errors like this */</comment>

  <comment type="block" pos:line="10" pos:column="3">/* size check */</comment>
  <expr_stmt><expr><name pos:line="11" pos:column="3">req<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">=<pos:position pos:line="11" pos:column="8"/></operator> <name pos:line="11" pos:column="9">dirlen<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">+<pos:position pos:line="11" pos:column="17"/></operator> <name pos:line="11" pos:column="18">fnamelen<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">+<pos:position pos:line="11" pos:column="28"/></operator> <literal type="number" pos:line="11" pos:column="29">1<pos:position pos:line="11" pos:column="30"/></literal></expr>;<pos:position pos:line="11" pos:column="31"/></expr_stmt> <comment type="block" pos:line="11" pos:column="32">/* +1 for the trailing nul */</comment>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">dirlen<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">&amp;&amp;<pos:position pos:line="12" pos:column="24"/></operator> <name pos:line="12" pos:column="17">fnamelen<pos:position pos:line="12" pos:column="25"/></name></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="5">req<pos:position pos:line="13" pos:column="8"/></name><operator pos:line="13" pos:column="8">++<pos:position pos:line="13" pos:column="10"/></operator></expr>;<pos:position pos:line="13" pos:column="11"/></expr_stmt></block></then></if> <comment type="block" pos:line="13" pos:column="12">/* when both components are non-nul, we add a "/" in between */</comment>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">req<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">&gt;<pos:position pos:line="14" pos:column="15"/></operator> <name pos:line="14" pos:column="13">dstlen<pos:position pos:line="14" pos:column="19"/></name></expr>)<pos:position pos:line="14" pos:column="20"/></condition><then pos:line="14" pos:column="20"> <block pos:line="14" pos:column="21">{ <comment type="block" pos:line="14" pos:column="23">/* check for condition where the dst length is too short */</comment>
    <comment type="block" pos:line="15" pos:column="5">/* Two options here:
     * 1) assert(0) or return NULL to signal error
     * 2) copy as much of the path as will fit
     * It doesn't appear that the return value is actually checked anywhere mutt_concat_path()
     * is called, so we should just copy set dst to nul and let the calling function fail later.
     */</comment>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">dst<pos:position pos:line="21" pos:column="8"/></name><index pos:line="21" pos:column="8">[<expr><literal type="number" pos:line="21" pos:column="9">0<pos:position pos:line="21" pos:column="10"/></literal></expr>]<pos:position pos:line="21" pos:column="11"/></index></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <literal type="number" pos:line="21" pos:column="14">0<pos:position pos:line="21" pos:column="15"/></literal></expr>;<pos:position pos:line="21" pos:column="16"/></expr_stmt> <comment type="block" pos:line="21" pos:column="17">/* safe since we bail out early if dstlen == 0 */</comment>
    <return pos:line="22" pos:column="5">return <expr><name pos:line="22" pos:column="12">NULL<pos:position pos:line="22" pos:column="16"/></name></expr>;<pos:position pos:line="22" pos:column="17"/></return>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>

  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><name pos:line="25" pos:column="7">dirlen<pos:position pos:line="25" pos:column="13"/></name></expr>)<pos:position pos:line="25" pos:column="14"/></condition><then pos:line="25" pos:column="14"> <block pos:line="25" pos:column="15">{ <comment type="block" pos:line="25" pos:column="17">/* when dir is not empty */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">memcpy<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><name pos:line="26" pos:column="12">dst<pos:position pos:line="26" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="17">dir<pos:position pos:line="26" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="22">dirlen<pos:position pos:line="26" pos:column="28"/></name></expr></argument>)<pos:position pos:line="26" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name pos:line="27" pos:column="5">offset<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">=<pos:position pos:line="27" pos:column="13"/></operator> <name pos:line="27" pos:column="14">dirlen<pos:position pos:line="27" pos:column="20"/></name></expr>;<pos:position pos:line="27" pos:column="21"/></expr_stmt>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">fnamelen<pos:position pos:line="28" pos:column="17"/></name></expr>)<pos:position pos:line="28" pos:column="18"/></condition><then pos:line="28" pos:column="18">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="29" pos:column="7">dst<pos:position pos:line="29" pos:column="10"/></name><index pos:line="29" pos:column="10">[<expr><name pos:line="29" pos:column="11">offset<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">++<pos:position pos:line="29" pos:column="19"/></operator></expr>]<pos:position pos:line="29" pos:column="20"/></index></name> <operator pos:line="29" pos:column="21">=<pos:position pos:line="29" pos:column="22"/></operator> <literal type="char" pos:line="29" pos:column="23">'/'<pos:position pos:line="29" pos:column="26"/></literal></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt></block></then></if>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>
  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><name pos:line="31" pos:column="7">fnamelen<pos:position pos:line="31" pos:column="15"/></name></expr>)<pos:position pos:line="31" pos:column="16"/></condition><then pos:line="31" pos:column="16"> <block pos:line="31" pos:column="17">{ <comment type="block" pos:line="31" pos:column="19">/* when fname is not empty */</comment>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">memcpy<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><name pos:line="32" pos:column="12">dst<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">+<pos:position pos:line="32" pos:column="17"/></operator> <name pos:line="32" pos:column="18">offset<pos:position pos:line="32" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="26">fname<pos:position pos:line="32" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="33">fnamelen<pos:position pos:line="32" pos:column="41"/></name></expr></argument>)<pos:position pos:line="32" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="33" pos:column="5">offset<pos:position pos:line="33" pos:column="11"/></name> <operator pos:line="33" pos:column="12">+=<pos:position pos:line="33" pos:column="14"/></operator> <name pos:line="33" pos:column="15">fnamelen<pos:position pos:line="33" pos:column="23"/></name></expr>;<pos:position pos:line="33" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="35" pos:column="3">dst<pos:position pos:line="35" pos:column="6"/></name><index pos:line="35" pos:column="6">[<expr><name pos:line="35" pos:column="7">offset<pos:position pos:line="35" pos:column="13"/></name></expr>]<pos:position pos:line="35" pos:column="14"/></index></name> <operator pos:line="35" pos:column="15">=<pos:position pos:line="35" pos:column="16"/></operator> <literal type="number" pos:line="35" pos:column="17">0<pos:position pos:line="35" pos:column="18"/></literal></expr>;<pos:position pos:line="35" pos:column="19"/></expr_stmt>
  <return pos:line="36" pos:column="3">return <expr><name pos:line="36" pos:column="10">dst<pos:position pos:line="36" pos:column="13"/></name></expr>;<pos:position pos:line="36" pos:column="14"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
