<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_651_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">be_print_header<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">ENVELOPE<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">env<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">tmp<pos:position pos:line="3" pos:column="11"/></name><index pos:line="3" pos:column="11">[<expr><name pos:line="3" pos:column="12">HUGE_STRING<pos:position pos:line="3" pos:column="23"/></name></expr>]<pos:position pos:line="3" pos:column="24"/></index></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name><name pos:line="5" pos:column="7">env<pos:position pos:line="5" pos:column="10"/></name><operator pos:line="5" pos:column="10">-&gt;<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="12">to<pos:position pos:line="5" pos:column="14"/></name></name></expr>)<pos:position pos:line="5" pos:column="15"/></condition><then pos:line="5" pos:column="15">
  <block pos:line="6" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">addstr<pos:position pos:line="7" pos:column="11"/></name> <argument_list pos:line="7" pos:column="12">(<argument><expr><literal type="string" pos:line="7" pos:column="13">"To: "<pos:position pos:line="7" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="8" pos:column="5">tmp<pos:position pos:line="8" pos:column="8"/></name><index pos:line="8" pos:column="8">[<expr><literal type="number" pos:line="8" pos:column="9">0<pos:position pos:line="8" pos:column="10"/></literal></expr>]<pos:position pos:line="8" pos:column="11"/></index></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <literal type="number" pos:line="8" pos:column="14">0<pos:position pos:line="8" pos:column="15"/></literal></expr>;<pos:position pos:line="8" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">rfc822_write_address<pos:position pos:line="9" pos:column="25"/></name> <argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">tmp<pos:position pos:line="9" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="32">sizeof <argument_list pos:line="9" pos:column="39">(<argument><expr><name pos:line="9" pos:column="40">tmp<pos:position pos:line="9" pos:column="43"/></name></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="46">env<pos:position pos:line="9" pos:column="49"/></name><operator pos:line="9" pos:column="49">-&gt;<pos:position pos:line="9" pos:column="54"/></operator><name pos:line="9" pos:column="51">to<pos:position pos:line="9" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="55">1<pos:position pos:line="9" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">addstr<pos:position pos:line="10" pos:column="11"/></name> <argument_list pos:line="10" pos:column="12">(<argument><expr><name pos:line="10" pos:column="13">tmp<pos:position pos:line="10" pos:column="16"/></name></expr></argument>)<pos:position pos:line="10" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">addch<pos:position pos:line="11" pos:column="10"/></name> <argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="char" pos:line="11" pos:column="12">'\n'<pos:position pos:line="11" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name><name pos:line="13" pos:column="7">env<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">-&gt;<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="12">cc<pos:position pos:line="13" pos:column="14"/></name></name></expr>)<pos:position pos:line="13" pos:column="15"/></condition><then pos:line="13" pos:column="15">
  <block pos:line="14" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">addstr<pos:position pos:line="15" pos:column="11"/></name> <argument_list pos:line="15" pos:column="12">(<argument><expr><literal type="string" pos:line="15" pos:column="13">"Cc: "<pos:position pos:line="15" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">tmp<pos:position pos:line="16" pos:column="8"/></name><index pos:line="16" pos:column="8">[<expr><literal type="number" pos:line="16" pos:column="9">0<pos:position pos:line="16" pos:column="10"/></literal></expr>]<pos:position pos:line="16" pos:column="11"/></index></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <literal type="number" pos:line="16" pos:column="14">0<pos:position pos:line="16" pos:column="15"/></literal></expr>;<pos:position pos:line="16" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">rfc822_write_address<pos:position pos:line="17" pos:column="25"/></name> <argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">tmp<pos:position pos:line="17" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="32">sizeof <argument_list pos:line="17" pos:column="39">(<argument><expr><name pos:line="17" pos:column="40">tmp<pos:position pos:line="17" pos:column="43"/></name></expr></argument>)<pos:position pos:line="17" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="46">env<pos:position pos:line="17" pos:column="49"/></name><operator pos:line="17" pos:column="49">-&gt;<pos:position pos:line="17" pos:column="54"/></operator><name pos:line="17" pos:column="51">cc<pos:position pos:line="17" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="55">1<pos:position pos:line="17" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">addstr<pos:position pos:line="18" pos:column="11"/></name> <argument_list pos:line="18" pos:column="12">(<argument><expr><name pos:line="18" pos:column="13">tmp<pos:position pos:line="18" pos:column="16"/></name></expr></argument>)<pos:position pos:line="18" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">addch<pos:position pos:line="19" pos:column="10"/></name> <argument_list pos:line="19" pos:column="11">(<argument><expr><literal type="char" pos:line="19" pos:column="12">'\n'<pos:position pos:line="19" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name><name pos:line="21" pos:column="7">env<pos:position pos:line="21" pos:column="10"/></name><operator pos:line="21" pos:column="10">-&gt;<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="12">bcc<pos:position pos:line="21" pos:column="15"/></name></name></expr>)<pos:position pos:line="21" pos:column="16"/></condition><then pos:line="21" pos:column="16">
  <block pos:line="22" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">addstr<pos:position pos:line="23" pos:column="11"/></name> <argument_list pos:line="23" pos:column="12">(<argument><expr><literal type="string" pos:line="23" pos:column="13">"Bcc: "<pos:position pos:line="23" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">tmp<pos:position pos:line="24" pos:column="8"/></name><index pos:line="24" pos:column="8">[<expr><literal type="number" pos:line="24" pos:column="9">0<pos:position pos:line="24" pos:column="10"/></literal></expr>]<pos:position pos:line="24" pos:column="11"/></index></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <literal type="number" pos:line="24" pos:column="14">0<pos:position pos:line="24" pos:column="15"/></literal></expr>;<pos:position pos:line="24" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">rfc822_write_address<pos:position pos:line="25" pos:column="25"/></name> <argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">tmp<pos:position pos:line="25" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="32">sizeof <argument_list pos:line="25" pos:column="39">(<argument><expr><name pos:line="25" pos:column="40">tmp<pos:position pos:line="25" pos:column="43"/></name></expr></argument>)<pos:position pos:line="25" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="46">env<pos:position pos:line="25" pos:column="49"/></name><operator pos:line="25" pos:column="49">-&gt;<pos:position pos:line="25" pos:column="54"/></operator><name pos:line="25" pos:column="51">bcc<pos:position pos:line="25" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="56">1<pos:position pos:line="25" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">addstr<pos:position pos:line="26" pos:column="11"/></name> <argument_list pos:line="26" pos:column="12">(<argument><expr><name pos:line="26" pos:column="13">tmp<pos:position pos:line="26" pos:column="16"/></name></expr></argument>)<pos:position pos:line="26" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">addch<pos:position pos:line="27" pos:column="10"/></name> <argument_list pos:line="27" pos:column="11">(<argument><expr><literal type="char" pos:line="27" pos:column="12">'\n'<pos:position pos:line="27" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>
  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name><name pos:line="29" pos:column="7">env<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">-&gt;<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="12">subject<pos:position pos:line="29" pos:column="19"/></name></name></expr>)<pos:position pos:line="29" pos:column="20"/></condition><then pos:line="29" pos:column="20">
  <block pos:line="30" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">addstr<pos:position pos:line="31" pos:column="11"/></name> <argument_list pos:line="31" pos:column="12">(<argument><expr><literal type="string" pos:line="31" pos:column="13">"Subject: "<pos:position pos:line="31" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">addstr<pos:position pos:line="32" pos:column="11"/></name> <argument_list pos:line="32" pos:column="12">(<argument><expr><name><name pos:line="32" pos:column="13">env<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">-&gt;<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="18">subject<pos:position pos:line="32" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">addch<pos:position pos:line="33" pos:column="10"/></name> <argument_list pos:line="33" pos:column="11">(<argument><expr><literal type="char" pos:line="33" pos:column="12">'\n'<pos:position pos:line="33" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="35" pos:column="3">addch<pos:position pos:line="35" pos:column="8"/></name> <argument_list pos:line="35" pos:column="9">(<argument><expr><literal type="char" pos:line="35" pos:column="10">'\n'<pos:position pos:line="35" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="16"/></expr_stmt>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
