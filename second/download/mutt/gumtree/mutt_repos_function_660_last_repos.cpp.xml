<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_660_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">md5_process_bytes<pos:position pos:line="2" pos:column="18"/></name> <parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name pos:line="2" pos:column="26">void<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">buffer<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">size_t<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">len<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="52">struct<pos:position pos:line="2" pos:column="58"/></name> <name pos:line="2" pos:column="59">md5_ctx<pos:position pos:line="2" pos:column="66"/></name></name> <modifier pos:line="2" pos:column="67">*<pos:position pos:line="2" pos:column="68"/></modifier></type><name pos:line="2" pos:column="68">ctx<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="72"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <comment type="block" pos:line="4" pos:column="3">/* When we already have some bits in our internal buffer concatenate
     both inputs first.  */</comment>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name><name pos:line="6" pos:column="7">ctx<pos:position pos:line="6" pos:column="10"/></name><operator pos:line="6" pos:column="10">-&gt;<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="12">buflen<pos:position pos:line="6" pos:column="18"/></name></name> <operator pos:line="6" pos:column="19">!=<pos:position pos:line="6" pos:column="21"/></operator> <literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr>)<pos:position pos:line="6" pos:column="24"/></condition><then pos:line="6" pos:column="24">
    <block pos:line="7" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="8" pos:column="7">size_t<pos:position pos:line="8" pos:column="13"/></name></type> <name pos:line="8" pos:column="14">left_over<pos:position pos:line="8" pos:column="23"/></name> <init pos:line="8" pos:column="24">= <expr><name><name pos:line="8" pos:column="26">ctx<pos:position pos:line="8" pos:column="29"/></name><operator pos:line="8" pos:column="29">-&gt;<pos:position pos:line="8" pos:column="34"/></operator><name pos:line="8" pos:column="31">buflen<pos:position pos:line="8" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="9" pos:column="7">size_t<pos:position pos:line="9" pos:column="13"/></name></type> <name pos:line="9" pos:column="14">add<pos:position pos:line="9" pos:column="17"/></name> <init pos:line="9" pos:column="18">= <expr><ternary><condition><expr><literal type="number" pos:line="9" pos:column="20">128<pos:position pos:line="9" pos:column="23"/></literal> <operator pos:line="9" pos:column="24">-<pos:position pos:line="9" pos:column="25"/></operator> <name pos:line="9" pos:column="26">left_over<pos:position pos:line="9" pos:column="35"/></name> <operator pos:line="9" pos:column="36">&gt;<pos:position pos:line="9" pos:column="40"/></operator> <name pos:line="9" pos:column="38">len<pos:position pos:line="9" pos:column="41"/></name></expr> ?<pos:position pos:line="9" pos:column="43"/></condition><then pos:line="9" pos:column="43"> <expr><name pos:line="9" pos:column="44">len<pos:position pos:line="9" pos:column="47"/></name></expr> <pos:position pos:line="9" pos:column="48"/></then><else pos:line="9" pos:column="48">: <expr><literal type="number" pos:line="9" pos:column="50">128<pos:position pos:line="9" pos:column="53"/></literal> <operator pos:line="9" pos:column="54">-<pos:position pos:line="9" pos:column="55"/></operator> <name pos:line="9" pos:column="56">left_over<pos:position pos:line="9" pos:column="65"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="9" pos:column="66"/></decl_stmt>

      <expr_stmt><expr><call><name pos:line="11" pos:column="7">memcpy<pos:position pos:line="11" pos:column="13"/></name> <argument_list pos:line="11" pos:column="14">(<argument><expr><operator pos:line="11" pos:column="15">&amp;<pos:position pos:line="11" pos:column="20"/></operator><operator pos:line="11" pos:column="16">(<pos:position pos:line="11" pos:column="17"/></operator><operator pos:line="11" pos:column="17">(<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">char<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">*<pos:position pos:line="11" pos:column="24"/></operator><operator pos:line="11" pos:column="24">)<pos:position pos:line="11" pos:column="25"/></operator> <name><name pos:line="11" pos:column="26">ctx<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">-&gt;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="31">buffer<pos:position pos:line="11" pos:column="37"/></name></name><operator pos:line="11" pos:column="37">)<pos:position pos:line="11" pos:column="38"/></operator><index pos:line="11" pos:column="38">[<expr><name pos:line="11" pos:column="39">left_over<pos:position pos:line="11" pos:column="48"/></name></expr>]<pos:position pos:line="11" pos:column="49"/></index></expr></argument>, <argument><expr><name pos:line="11" pos:column="51">buffer<pos:position pos:line="11" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="59">add<pos:position pos:line="11" pos:column="62"/></name></expr></argument>)<pos:position pos:line="11" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="12" pos:column="7">ctx<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">buflen<pos:position pos:line="12" pos:column="18"/></name></name> <operator pos:line="12" pos:column="19">+=<pos:position pos:line="12" pos:column="21"/></operator> <name pos:line="12" pos:column="22">add<pos:position pos:line="12" pos:column="25"/></name></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>

      <if pos:line="14" pos:column="7">if <condition pos:line="14" pos:column="10">(<expr><name><name pos:line="14" pos:column="11">ctx<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">-&gt;<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="16">buflen<pos:position pos:line="14" pos:column="22"/></name></name> <operator pos:line="14" pos:column="23">&gt;<pos:position pos:line="14" pos:column="27"/></operator> <literal type="number" pos:line="14" pos:column="25">64<pos:position pos:line="14" pos:column="27"/></literal></expr>)<pos:position pos:line="14" pos:column="28"/></condition><then pos:line="14" pos:column="28">
	<block pos:line="15" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="16" pos:column="11">md5_process_block<pos:position pos:line="16" pos:column="28"/></name> <argument_list pos:line="16" pos:column="29">(<argument><expr><name><name pos:line="16" pos:column="30">ctx<pos:position pos:line="16" pos:column="33"/></name><operator pos:line="16" pos:column="33">-&gt;<pos:position pos:line="16" pos:column="38"/></operator><name pos:line="16" pos:column="35">buffer<pos:position pos:line="16" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="43">ctx<pos:position pos:line="16" pos:column="46"/></name><operator pos:line="16" pos:column="46">-&gt;<pos:position pos:line="16" pos:column="51"/></operator><name pos:line="16" pos:column="48">buflen<pos:position pos:line="16" pos:column="54"/></name></name> <operator pos:line="16" pos:column="55">&amp;<pos:position pos:line="16" pos:column="60"/></operator> <operator pos:line="16" pos:column="57">~<pos:position pos:line="16" pos:column="58"/></operator><literal type="number" pos:line="16" pos:column="58">63<pos:position pos:line="16" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="62">ctx<pos:position pos:line="16" pos:column="65"/></name></expr></argument>)<pos:position pos:line="16" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="67"/></expr_stmt>

	  <expr_stmt><expr><name><name pos:line="18" pos:column="11">ctx<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">-&gt;<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="16">buflen<pos:position pos:line="18" pos:column="22"/></name></name> <operator pos:line="18" pos:column="23">&amp;=<pos:position pos:line="18" pos:column="29"/></operator> <literal type="number" pos:line="18" pos:column="26">63<pos:position pos:line="18" pos:column="28"/></literal></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
	  <comment type="block" pos:line="19" pos:column="11">/* The regions in the following copy operation cannot overlap.  */</comment>
	  <expr_stmt><expr><call><name pos:line="20" pos:column="11">memcpy<pos:position pos:line="20" pos:column="17"/></name> <argument_list pos:line="20" pos:column="18">(<argument><expr><name><name pos:line="20" pos:column="19">ctx<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">-&gt;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="24">buffer<pos:position pos:line="20" pos:column="30"/></name></name></expr></argument>,
		  <argument><expr><operator pos:line="21" pos:column="19">&amp;<pos:position pos:line="21" pos:column="24"/></operator><operator pos:line="21" pos:column="20">(<pos:position pos:line="21" pos:column="21"/></operator><operator pos:line="21" pos:column="21">(<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">char<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">*<pos:position pos:line="21" pos:column="28"/></operator><operator pos:line="21" pos:column="28">)<pos:position pos:line="21" pos:column="29"/></operator> <name><name pos:line="21" pos:column="30">ctx<pos:position pos:line="21" pos:column="33"/></name><operator pos:line="21" pos:column="33">-&gt;<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="35">buffer<pos:position pos:line="21" pos:column="41"/></name></name><operator pos:line="21" pos:column="41">)<pos:position pos:line="21" pos:column="42"/></operator><index pos:line="21" pos:column="42">[<expr><operator pos:line="21" pos:column="43">(<pos:position pos:line="21" pos:column="44"/></operator><name pos:line="21" pos:column="44">left_over<pos:position pos:line="21" pos:column="53"/></name> <operator pos:line="21" pos:column="54">+<pos:position pos:line="21" pos:column="55"/></operator> <name pos:line="21" pos:column="56">add<pos:position pos:line="21" pos:column="59"/></name><operator pos:line="21" pos:column="59">)<pos:position pos:line="21" pos:column="60"/></operator> <operator pos:line="21" pos:column="61">&amp;<pos:position pos:line="21" pos:column="66"/></operator> <operator pos:line="21" pos:column="63">~<pos:position pos:line="21" pos:column="64"/></operator><literal type="number" pos:line="21" pos:column="64">63<pos:position pos:line="21" pos:column="66"/></literal></expr>]<pos:position pos:line="21" pos:column="67"/></index></expr></argument>,
		  <argument><expr><name><name pos:line="22" pos:column="19">ctx<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">-&gt;<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="24">buflen<pos:position pos:line="22" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

      <expr_stmt><expr><name pos:line="25" pos:column="7">buffer<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <operator pos:line="25" pos:column="16">(<pos:position pos:line="25" pos:column="17"/></operator><specifier pos:line="25" pos:column="17">const<pos:position pos:line="25" pos:column="22"/></specifier> <name pos:line="25" pos:column="23">char<pos:position pos:line="25" pos:column="27"/></name> <operator pos:line="25" pos:column="28">*<pos:position pos:line="25" pos:column="29"/></operator><operator pos:line="25" pos:column="29">)<pos:position pos:line="25" pos:column="30"/></operator> <name pos:line="25" pos:column="31">buffer<pos:position pos:line="25" pos:column="37"/></name> <operator pos:line="25" pos:column="38">+<pos:position pos:line="25" pos:column="39"/></operator> <name pos:line="25" pos:column="40">add<pos:position pos:line="25" pos:column="43"/></name></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><name pos:line="26" pos:column="7">len<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">-=<pos:position pos:line="26" pos:column="13"/></operator> <name pos:line="26" pos:column="14">add<pos:position pos:line="26" pos:column="17"/></name></expr>;<pos:position pos:line="26" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="29" pos:column="3">/* Process available complete blocks.  */</comment>
  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><name pos:line="30" pos:column="7">len<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">&gt;=<pos:position pos:line="30" pos:column="16"/></operator> <literal type="number" pos:line="30" pos:column="14">64<pos:position pos:line="30" pos:column="16"/></literal></expr>)<pos:position pos:line="30" pos:column="17"/></condition><then pos:line="30" pos:column="17">
    <block pos:line="31" pos:column="5">{
<cpp:if pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">if<pos:position pos:line="32" pos:column="4"/></cpp:directive> <expr><operator pos:line="32" pos:column="5">!<pos:position pos:line="32" pos:column="6"/></operator><name pos:line="32" pos:column="6">_STRING_ARCH_unaligned<pos:position pos:line="32" pos:column="28"/></name></expr></cpp:if>
<cpp:define pos:line="33" pos:column="1"># <cpp:directive pos:line="33" pos:column="3">define<pos:position pos:line="33" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="33" pos:column="10">alignof<pos:position pos:line="33" pos:column="17"/></name><parameter_list pos:line="33" pos:column="17">(<parameter><type><name pos:line="33" pos:column="18">type<pos:position pos:line="33" pos:column="22"/></name></type></parameter>)<pos:position pos:line="33" pos:column="23"/></parameter_list></cpp:macro> <cpp:value pos:line="33" pos:column="24">offsetof (struct { char c; type x; }, x)<pos:position pos:line="33" pos:column="64"/></cpp:value></cpp:define>
<cpp:define pos:line="34" pos:column="1"># <cpp:directive pos:line="34" pos:column="3">define<pos:position pos:line="34" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="34" pos:column="10">UNALIGNED_P<pos:position pos:line="34" pos:column="21"/></name><parameter_list pos:line="34" pos:column="21">(<parameter><type><name pos:line="34" pos:column="22">p<pos:position pos:line="34" pos:column="23"/></name></type></parameter>)<pos:position pos:line="34" pos:column="24"/></parameter_list></cpp:macro> <cpp:value pos:line="34" pos:column="25">(((size_t) p) % alignof (md5_uint32) != 0)<pos:position pos:line="34" pos:column="67"/></cpp:value></cpp:define>
      <if pos:line="35" pos:column="7">if <condition pos:line="35" pos:column="10">(<expr><call><name pos:line="35" pos:column="11">UNALIGNED_P<pos:position pos:line="35" pos:column="22"/></name> <argument_list pos:line="35" pos:column="23">(<argument><expr><name pos:line="35" pos:column="24">buffer<pos:position pos:line="35" pos:column="30"/></name></expr></argument>)<pos:position pos:line="35" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="32"/></condition><then pos:line="35" pos:column="32">
	<block type="pseudo"><while pos:line="36" pos:column="9">while <condition pos:line="36" pos:column="15">(<expr><name pos:line="36" pos:column="16">len<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">&gt;<pos:position pos:line="36" pos:column="24"/></operator> <literal type="number" pos:line="36" pos:column="22">64<pos:position pos:line="36" pos:column="24"/></literal></expr>)<pos:position pos:line="36" pos:column="25"/></condition>
	  <block pos:line="37" pos:column="11">{
	    <expr_stmt><expr><call><name pos:line="38" pos:column="13">md5_process_block<pos:position pos:line="38" pos:column="30"/></name> <argument_list pos:line="38" pos:column="31">(<argument><expr><call><name pos:line="38" pos:column="32">memcpy<pos:position pos:line="38" pos:column="38"/></name> <argument_list pos:line="38" pos:column="39">(<argument><expr><name><name pos:line="38" pos:column="40">ctx<pos:position pos:line="38" pos:column="43"/></name><operator pos:line="38" pos:column="43">-&gt;<pos:position pos:line="38" pos:column="48"/></operator><name pos:line="38" pos:column="45">buffer<pos:position pos:line="38" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="53">buffer<pos:position pos:line="38" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="61">64<pos:position pos:line="38" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="66">64<pos:position pos:line="38" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="70">ctx<pos:position pos:line="38" pos:column="73"/></name></expr></argument>)<pos:position pos:line="38" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="75"/></expr_stmt>
	    <expr_stmt><expr><name pos:line="39" pos:column="13">buffer<pos:position pos:line="39" pos:column="19"/></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <operator pos:line="39" pos:column="22">(<pos:position pos:line="39" pos:column="23"/></operator><specifier pos:line="39" pos:column="23">const<pos:position pos:line="39" pos:column="28"/></specifier> <name pos:line="39" pos:column="29">char<pos:position pos:line="39" pos:column="33"/></name> <operator pos:line="39" pos:column="34">*<pos:position pos:line="39" pos:column="35"/></operator><operator pos:line="39" pos:column="35">)<pos:position pos:line="39" pos:column="36"/></operator> <name pos:line="39" pos:column="37">buffer<pos:position pos:line="39" pos:column="43"/></name> <operator pos:line="39" pos:column="44">+<pos:position pos:line="39" pos:column="45"/></operator> <literal type="number" pos:line="39" pos:column="46">64<pos:position pos:line="39" pos:column="48"/></literal></expr>;<pos:position pos:line="39" pos:column="49"/></expr_stmt>
	    <expr_stmt><expr><name pos:line="40" pos:column="13">len<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">-=<pos:position pos:line="40" pos:column="19"/></operator> <literal type="number" pos:line="40" pos:column="20">64<pos:position pos:line="40" pos:column="22"/></literal></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>
	  }<pos:position pos:line="41" pos:column="12"/></block></while></block></then>
      <else pos:line="42" pos:column="7">else
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
	<block pos:line="44" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="45" pos:column="11">md5_process_block<pos:position pos:line="45" pos:column="28"/></name> <argument_list pos:line="45" pos:column="29">(<argument><expr><name pos:line="45" pos:column="30">buffer<pos:position pos:line="45" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="38">len<pos:position pos:line="45" pos:column="41"/></name> <operator pos:line="45" pos:column="42">&amp;<pos:position pos:line="45" pos:column="47"/></operator> <operator pos:line="45" pos:column="44">~<pos:position pos:line="45" pos:column="45"/></operator><literal type="number" pos:line="45" pos:column="45">63<pos:position pos:line="45" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="49">ctx<pos:position pos:line="45" pos:column="52"/></name></expr></argument>)<pos:position pos:line="45" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="54"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="46" pos:column="11">buffer<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">=<pos:position pos:line="46" pos:column="19"/></operator> <operator pos:line="46" pos:column="20">(<pos:position pos:line="46" pos:column="21"/></operator><specifier pos:line="46" pos:column="21">const<pos:position pos:line="46" pos:column="26"/></specifier> <name pos:line="46" pos:column="27">char<pos:position pos:line="46" pos:column="31"/></name> <operator pos:line="46" pos:column="32">*<pos:position pos:line="46" pos:column="33"/></operator><operator pos:line="46" pos:column="33">)<pos:position pos:line="46" pos:column="34"/></operator> <name pos:line="46" pos:column="35">buffer<pos:position pos:line="46" pos:column="41"/></name> <operator pos:line="46" pos:column="42">+<pos:position pos:line="46" pos:column="43"/></operator> <operator pos:line="46" pos:column="44">(<pos:position pos:line="46" pos:column="45"/></operator><name pos:line="46" pos:column="45">len<pos:position pos:line="46" pos:column="48"/></name> <operator pos:line="46" pos:column="49">&amp;<pos:position pos:line="46" pos:column="54"/></operator> <operator pos:line="46" pos:column="51">~<pos:position pos:line="46" pos:column="52"/></operator><literal type="number" pos:line="46" pos:column="52">63<pos:position pos:line="46" pos:column="54"/></literal><operator pos:line="46" pos:column="54">)<pos:position pos:line="46" pos:column="55"/></operator></expr>;<pos:position pos:line="46" pos:column="56"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="47" pos:column="11">len<pos:position pos:line="47" pos:column="14"/></name> <operator pos:line="47" pos:column="15">&amp;=<pos:position pos:line="47" pos:column="21"/></operator> <literal type="number" pos:line="47" pos:column="18">63<pos:position pos:line="47" pos:column="20"/></literal></expr>;<pos:position pos:line="47" pos:column="21"/></expr_stmt>
	}<pos:position pos:line="48" pos:column="10"/></block></else></if>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="51" pos:column="3">/* Move remaining bytes in internal buffer.  */</comment>
  <if pos:line="52" pos:column="3">if <condition pos:line="52" pos:column="6">(<expr><name pos:line="52" pos:column="7">len<pos:position pos:line="52" pos:column="10"/></name> <operator pos:line="52" pos:column="11">&gt;<pos:position pos:line="52" pos:column="15"/></operator> <literal type="number" pos:line="52" pos:column="13">0<pos:position pos:line="52" pos:column="14"/></literal></expr>)<pos:position pos:line="52" pos:column="15"/></condition><then pos:line="52" pos:column="15">
    <block pos:line="53" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="54" pos:column="7">size_t<pos:position pos:line="54" pos:column="13"/></name></type> <name pos:line="54" pos:column="14">left_over<pos:position pos:line="54" pos:column="23"/></name> <init pos:line="54" pos:column="24">= <expr><name><name pos:line="54" pos:column="26">ctx<pos:position pos:line="54" pos:column="29"/></name><operator pos:line="54" pos:column="29">-&gt;<pos:position pos:line="54" pos:column="34"/></operator><name pos:line="54" pos:column="31">buflen<pos:position pos:line="54" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="54" pos:column="38"/></decl_stmt>

      <expr_stmt><expr><call><name pos:line="56" pos:column="7">memcpy<pos:position pos:line="56" pos:column="13"/></name> <argument_list pos:line="56" pos:column="14">(<argument><expr><operator pos:line="56" pos:column="15">&amp;<pos:position pos:line="56" pos:column="20"/></operator><operator pos:line="56" pos:column="16">(<pos:position pos:line="56" pos:column="17"/></operator><operator pos:line="56" pos:column="17">(<pos:position pos:line="56" pos:column="18"/></operator><name pos:line="56" pos:column="18">char<pos:position pos:line="56" pos:column="22"/></name> <operator pos:line="56" pos:column="23">*<pos:position pos:line="56" pos:column="24"/></operator><operator pos:line="56" pos:column="24">)<pos:position pos:line="56" pos:column="25"/></operator> <name><name pos:line="56" pos:column="26">ctx<pos:position pos:line="56" pos:column="29"/></name><operator pos:line="56" pos:column="29">-&gt;<pos:position pos:line="56" pos:column="34"/></operator><name pos:line="56" pos:column="31">buffer<pos:position pos:line="56" pos:column="37"/></name></name><operator pos:line="56" pos:column="37">)<pos:position pos:line="56" pos:column="38"/></operator><index pos:line="56" pos:column="38">[<expr><name pos:line="56" pos:column="39">left_over<pos:position pos:line="56" pos:column="48"/></name></expr>]<pos:position pos:line="56" pos:column="49"/></index></expr></argument>, <argument><expr><name pos:line="56" pos:column="51">buffer<pos:position pos:line="56" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="59">len<pos:position pos:line="56" pos:column="62"/></name></expr></argument>)<pos:position pos:line="56" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><name pos:line="57" pos:column="7">left_over<pos:position pos:line="57" pos:column="16"/></name> <operator pos:line="57" pos:column="17">+=<pos:position pos:line="57" pos:column="19"/></operator> <name pos:line="57" pos:column="20">len<pos:position pos:line="57" pos:column="23"/></name></expr>;<pos:position pos:line="57" pos:column="24"/></expr_stmt>
      <if pos:line="58" pos:column="7">if <condition pos:line="58" pos:column="10">(<expr><name pos:line="58" pos:column="11">left_over<pos:position pos:line="58" pos:column="20"/></name> <operator pos:line="58" pos:column="21">&gt;=<pos:position pos:line="58" pos:column="26"/></operator> <literal type="number" pos:line="58" pos:column="24">64<pos:position pos:line="58" pos:column="26"/></literal></expr>)<pos:position pos:line="58" pos:column="27"/></condition><then pos:line="58" pos:column="27">
	<block pos:line="59" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="60" pos:column="11">md5_process_block<pos:position pos:line="60" pos:column="28"/></name> <argument_list pos:line="60" pos:column="29">(<argument><expr><name><name pos:line="60" pos:column="30">ctx<pos:position pos:line="60" pos:column="33"/></name><operator pos:line="60" pos:column="33">-&gt;<pos:position pos:line="60" pos:column="38"/></operator><name pos:line="60" pos:column="35">buffer<pos:position pos:line="60" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="43">64<pos:position pos:line="60" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="47">ctx<pos:position pos:line="60" pos:column="50"/></name></expr></argument>)<pos:position pos:line="60" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="52"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="61" pos:column="11">left_over<pos:position pos:line="61" pos:column="20"/></name> <operator pos:line="61" pos:column="21">-=<pos:position pos:line="61" pos:column="23"/></operator> <literal type="number" pos:line="61" pos:column="24">64<pos:position pos:line="61" pos:column="26"/></literal></expr>;<pos:position pos:line="61" pos:column="27"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="62" pos:column="11">memcpy<pos:position pos:line="62" pos:column="17"/></name> <argument_list pos:line="62" pos:column="18">(<argument><expr><name><name pos:line="62" pos:column="19">ctx<pos:position pos:line="62" pos:column="22"/></name><operator pos:line="62" pos:column="22">-&gt;<pos:position pos:line="62" pos:column="27"/></operator><name pos:line="62" pos:column="24">buffer<pos:position pos:line="62" pos:column="30"/></name></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="32">&amp;<pos:position pos:line="62" pos:column="37"/></operator><name><name pos:line="62" pos:column="33">ctx<pos:position pos:line="62" pos:column="36"/></name><operator pos:line="62" pos:column="36">-&gt;<pos:position pos:line="62" pos:column="41"/></operator><name pos:line="62" pos:column="38">buffer<pos:position pos:line="62" pos:column="44"/></name><index pos:line="62" pos:column="44">[<expr><literal type="number" pos:line="62" pos:column="45">16<pos:position pos:line="62" pos:column="47"/></literal></expr>]<pos:position pos:line="62" pos:column="48"/></index></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="50">left_over<pos:position pos:line="62" pos:column="59"/></name></expr></argument>)<pos:position pos:line="62" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="63" pos:column="10"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="64" pos:column="7">ctx<pos:position pos:line="64" pos:column="10"/></name><operator pos:line="64" pos:column="10">-&gt;<pos:position pos:line="64" pos:column="15"/></operator><name pos:line="64" pos:column="12">buflen<pos:position pos:line="64" pos:column="18"/></name></name> <operator pos:line="64" pos:column="19">=<pos:position pos:line="64" pos:column="20"/></operator> <name pos:line="64" pos:column="21">left_over<pos:position pos:line="64" pos:column="30"/></name></expr>;<pos:position pos:line="64" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
