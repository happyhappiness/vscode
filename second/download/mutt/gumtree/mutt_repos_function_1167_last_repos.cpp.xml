<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1167_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">regexec<pos:position pos:line="2" pos:column="8"/></name> <argument_list pos:line="2" pos:column="9">(<argument><expr><name pos:line="2" pos:column="10">preg<pos:position pos:line="2" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="16">string<pos:position pos:line="2" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="24">nmatch<pos:position pos:line="2" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="32">pmatch<pos:position pos:line="2" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="40">eflags<pos:position pos:line="2" pos:column="46"/></name></expr></argument>)<pos:position pos:line="2" pos:column="47"/></argument_list>
    const <name pos:line="3" pos:column="11">regex_t<pos:position pos:line="3" pos:column="18"/></name> <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier><name pos:line="3" pos:column="20">preg<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">string<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">size_t<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">nmatch<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">regmatch_t<pos:position pos:line="6" pos:column="15"/></name></type> <name><name pos:line="6" pos:column="16">pmatch<pos:position pos:line="6" pos:column="22"/></name><index pos:line="6" pos:column="22">[]<pos:position pos:line="6" pos:column="24"/></index></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">eflags<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
<block pos:line="8" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">ret<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">re_registers<pos:position pos:line="10" pos:column="22"/></name></name></type> <name pos:line="10" pos:column="23">regs<pos:position pos:line="10" pos:column="27"/></name></decl>;<pos:position pos:line="10" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">regex_t<pos:position pos:line="11" pos:column="10"/></name></type> <name pos:line="11" pos:column="11">private_preg<pos:position pos:line="11" pos:column="23"/></name></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">len<pos:position pos:line="12" pos:column="10"/></name> <init pos:line="12" pos:column="11">= <expr><call><name pos:line="12" pos:column="13">strlen<pos:position pos:line="12" pos:column="19"/></name> <argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">string<pos:position pos:line="12" pos:column="27"/></name></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">boolean<pos:position pos:line="13" pos:column="10"/></name></type> <name pos:line="13" pos:column="11">want_reg_info<pos:position pos:line="13" pos:column="24"/></name> <init pos:line="13" pos:column="25">= <expr><operator pos:line="13" pos:column="27">!<pos:position pos:line="13" pos:column="28"/></operator><name><name pos:line="13" pos:column="28">preg<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">-&gt;<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="34">no_sub<pos:position pos:line="13" pos:column="40"/></name></name> <operator pos:line="13" pos:column="41">&amp;&amp;<pos:position pos:line="13" pos:column="51"/></operator> <name pos:line="13" pos:column="44">nmatch<pos:position pos:line="13" pos:column="50"/></name> <operator pos:line="13" pos:column="51">&gt;<pos:position pos:line="13" pos:column="55"/></operator> <literal type="number" pos:line="13" pos:column="53">0<pos:position pos:line="13" pos:column="54"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="55"/></decl_stmt>

  <expr_stmt><expr><name pos:line="15" pos:column="3">private_preg<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <operator pos:line="15" pos:column="18">*<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="19">preg<pos:position pos:line="15" pos:column="23"/></name></expr>;<pos:position pos:line="15" pos:column="24"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="17" pos:column="3">private_preg<pos:position pos:line="17" pos:column="15"/></name><operator pos:line="17" pos:column="15">.<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="16">not_bol<pos:position pos:line="17" pos:column="23"/></name></name> <operator pos:line="17" pos:column="24">=<pos:position pos:line="17" pos:column="25"/></operator> <operator pos:line="17" pos:column="26">!<pos:position pos:line="17" pos:column="27"/></operator><operator pos:line="17" pos:column="27">!<pos:position pos:line="17" pos:column="28"/></operator><operator pos:line="17" pos:column="28">(<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="29">eflags<pos:position pos:line="17" pos:column="35"/></name> <operator pos:line="17" pos:column="36">&amp;<pos:position pos:line="17" pos:column="41"/></operator> <name pos:line="17" pos:column="38">REG_NOTBOL<pos:position pos:line="17" pos:column="48"/></name><operator pos:line="17" pos:column="48">)<pos:position pos:line="17" pos:column="49"/></operator></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">private_preg<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">.<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">not_eol<pos:position pos:line="18" pos:column="23"/></name></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <operator pos:line="18" pos:column="26">!<pos:position pos:line="18" pos:column="27"/></operator><operator pos:line="18" pos:column="27">!<pos:position pos:line="18" pos:column="28"/></operator><operator pos:line="18" pos:column="28">(<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="29">eflags<pos:position pos:line="18" pos:column="35"/></name> <operator pos:line="18" pos:column="36">&amp;<pos:position pos:line="18" pos:column="41"/></operator> <name pos:line="18" pos:column="38">REG_NOTEOL<pos:position pos:line="18" pos:column="48"/></name><operator pos:line="18" pos:column="48">)<pos:position pos:line="18" pos:column="49"/></operator></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt>

  <comment type="block" pos:line="20" pos:column="3">/* The user has told us exactly how many registers to return
     information about, via `nmatch'.  We have to pass that on to the
     matching routines.  */</comment>
  <expr_stmt><expr><name><name pos:line="23" pos:column="3">private_preg<pos:position pos:line="23" pos:column="15"/></name><operator pos:line="23" pos:column="15">.<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="16">regs_allocated<pos:position pos:line="23" pos:column="30"/></name></name> <operator pos:line="23" pos:column="31">=<pos:position pos:line="23" pos:column="32"/></operator> <name pos:line="23" pos:column="33">REGS_FIXED<pos:position pos:line="23" pos:column="43"/></name></expr>;<pos:position pos:line="23" pos:column="44"/></expr_stmt>

  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><name pos:line="25" pos:column="7">want_reg_info<pos:position pos:line="25" pos:column="20"/></name></expr>)<pos:position pos:line="25" pos:column="21"/></condition><then pos:line="25" pos:column="21">
    <block pos:line="26" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="27" pos:column="7">regs<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">.<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="12">num_regs<pos:position pos:line="27" pos:column="20"/></name></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <name pos:line="27" pos:column="23">nmatch<pos:position pos:line="27" pos:column="29"/></name></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="28" pos:column="7">regs<pos:position pos:line="28" pos:column="11"/></name><operator pos:line="28" pos:column="11">.<pos:position pos:line="28" pos:column="12"/></operator><name pos:line="28" pos:column="12">start<pos:position pos:line="28" pos:column="17"/></name></name> <operator pos:line="28" pos:column="18">=<pos:position pos:line="28" pos:column="19"/></operator> <call><name pos:line="28" pos:column="20">TALLOC<pos:position pos:line="28" pos:column="26"/></name> <argument_list pos:line="28" pos:column="27">(<argument><expr><name pos:line="28" pos:column="28">nmatch<pos:position pos:line="28" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="36">regoff_t<pos:position pos:line="28" pos:column="44"/></name></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="29" pos:column="7">regs<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">.<pos:position pos:line="29" pos:column="12"/></operator><name pos:line="29" pos:column="12">end<pos:position pos:line="29" pos:column="15"/></name></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <call><name pos:line="29" pos:column="18">TALLOC<pos:position pos:line="29" pos:column="24"/></name> <argument_list pos:line="29" pos:column="25">(<argument><expr><name pos:line="29" pos:column="26">nmatch<pos:position pos:line="29" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="34">regoff_t<pos:position pos:line="29" pos:column="42"/></name></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt>
      <if pos:line="30" pos:column="7">if <condition pos:line="30" pos:column="10">(<expr><name><name pos:line="30" pos:column="11">regs<pos:position pos:line="30" pos:column="15"/></name><operator pos:line="30" pos:column="15">.<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="16">start<pos:position pos:line="30" pos:column="21"/></name></name> <operator pos:line="30" pos:column="22">==<pos:position pos:line="30" pos:column="24"/></operator> <name pos:line="30" pos:column="25">NULL<pos:position pos:line="30" pos:column="29"/></name> <operator pos:line="30" pos:column="30">||<pos:position pos:line="30" pos:column="32"/></operator> <name><name pos:line="30" pos:column="33">regs<pos:position pos:line="30" pos:column="37"/></name><operator pos:line="30" pos:column="37">.<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="38">end<pos:position pos:line="30" pos:column="41"/></name></name> <operator pos:line="30" pos:column="42">==<pos:position pos:line="30" pos:column="44"/></operator> <name pos:line="30" pos:column="45">NULL<pos:position pos:line="30" pos:column="49"/></name></expr>)<pos:position pos:line="30" pos:column="50"/></condition><then pos:line="30" pos:column="50">
        <block type="pseudo"><return pos:line="31" pos:column="9">return <expr><operator pos:line="31" pos:column="16">(<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="17">int<pos:position pos:line="31" pos:column="20"/></name><operator pos:line="31" pos:column="20">)<pos:position pos:line="31" pos:column="21"/></operator> <name pos:line="31" pos:column="22">REG_NOMATCH<pos:position pos:line="31" pos:column="33"/></name></expr>;<pos:position pos:line="31" pos:column="34"/></return></block></then></if>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="34" pos:column="3">/* Perform the searching operation.  */</comment>
  <expr_stmt><expr><name pos:line="35" pos:column="3">ret<pos:position pos:line="35" pos:column="6"/></name> <operator pos:line="35" pos:column="7">=<pos:position pos:line="35" pos:column="8"/></operator> <call><name pos:line="35" pos:column="9">re_search<pos:position pos:line="35" pos:column="18"/></name> <argument_list pos:line="35" pos:column="19">(<argument><expr><operator pos:line="35" pos:column="20">&amp;<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="21">private_preg<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="35">string<pos:position pos:line="35" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="43">len<pos:position pos:line="35" pos:column="46"/></name></expr></argument>,
                   <comment type="block" pos:line="36" pos:column="20">/* start: */</comment> <argument><expr><literal type="number" pos:line="36" pos:column="33">0<pos:position pos:line="36" pos:column="34"/></literal></expr></argument>, <comment type="block" pos:line="36" pos:column="36">/* range: */</comment> <argument><expr><name pos:line="36" pos:column="49">len<pos:position pos:line="36" pos:column="52"/></name></expr></argument>,
                   <argument><expr><ternary><condition><expr><name pos:line="37" pos:column="20">want_reg_info<pos:position pos:line="37" pos:column="33"/></name></expr> ?<pos:position pos:line="37" pos:column="35"/></condition><then pos:line="37" pos:column="35"> <expr><operator pos:line="37" pos:column="36">&amp;<pos:position pos:line="37" pos:column="41"/></operator><name pos:line="37" pos:column="37">regs<pos:position pos:line="37" pos:column="41"/></name></expr> <pos:position pos:line="37" pos:column="42"/></then><else pos:line="37" pos:column="42">: <expr><operator pos:line="37" pos:column="44">(<pos:position pos:line="37" pos:column="45"/></operator>struct <name pos:line="37" pos:column="52">re_registers<pos:position pos:line="37" pos:column="64"/></name> <operator pos:line="37" pos:column="65">*<pos:position pos:line="37" pos:column="66"/></operator><operator pos:line="37" pos:column="66">)<pos:position pos:line="37" pos:column="67"/></operator> <literal type="number" pos:line="37" pos:column="68">0<pos:position pos:line="37" pos:column="69"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="37" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="71"/></expr_stmt>

  <comment type="block" pos:line="39" pos:column="3">/* Copy the register information to the POSIX structure.  */</comment>
  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><name pos:line="40" pos:column="7">want_reg_info<pos:position pos:line="40" pos:column="20"/></name></expr>)<pos:position pos:line="40" pos:column="21"/></condition><then pos:line="40" pos:column="21">
    <block pos:line="41" pos:column="5">{
      <if pos:line="42" pos:column="7">if <condition pos:line="42" pos:column="10">(<expr><name pos:line="42" pos:column="11">ret<pos:position pos:line="42" pos:column="14"/></name> <operator pos:line="42" pos:column="15">&gt;=<pos:position pos:line="42" pos:column="20"/></operator> <literal type="number" pos:line="42" pos:column="18">0<pos:position pos:line="42" pos:column="19"/></literal></expr>)<pos:position pos:line="42" pos:column="20"/></condition><then pos:line="42" pos:column="20">
        <block pos:line="43" pos:column="9">{
          <decl_stmt><decl><type><name pos:line="44" pos:column="11">unsigned<pos:position pos:line="44" pos:column="19"/></name></type> <name pos:line="44" pos:column="20">r<pos:position pos:line="44" pos:column="21"/></name></decl>;<pos:position pos:line="44" pos:column="22"/></decl_stmt>

          <for pos:line="46" pos:column="11">for <control pos:line="46" pos:column="15">(<init><expr><name pos:line="46" pos:column="16">r<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">=<pos:position pos:line="46" pos:column="19"/></operator> <literal type="number" pos:line="46" pos:column="20">0<pos:position pos:line="46" pos:column="21"/></literal></expr>;<pos:position pos:line="46" pos:column="22"/></init> <condition><expr><name pos:line="46" pos:column="23">r<pos:position pos:line="46" pos:column="24"/></name> <operator pos:line="46" pos:column="25">&lt;<pos:position pos:line="46" pos:column="29"/></operator> <name pos:line="46" pos:column="27">nmatch<pos:position pos:line="46" pos:column="33"/></name></expr>;<pos:position pos:line="46" pos:column="34"/></condition> <incr><expr><name pos:line="46" pos:column="35">r<pos:position pos:line="46" pos:column="36"/></name><operator pos:line="46" pos:column="36">++<pos:position pos:line="46" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="46" pos:column="39"/></control>
            <block pos:line="47" pos:column="13">{
              <expr_stmt><expr><name><name pos:line="48" pos:column="15">pmatch<pos:position pos:line="48" pos:column="21"/></name><index pos:line="48" pos:column="21">[<expr><name pos:line="48" pos:column="22">r<pos:position pos:line="48" pos:column="23"/></name></expr>]<pos:position pos:line="48" pos:column="24"/></index></name><operator pos:line="48" pos:column="24">.<pos:position pos:line="48" pos:column="25"/></operator><name pos:line="48" pos:column="25">rm_so<pos:position pos:line="48" pos:column="30"/></name> <operator pos:line="48" pos:column="31">=<pos:position pos:line="48" pos:column="32"/></operator> <name><name pos:line="48" pos:column="33">regs<pos:position pos:line="48" pos:column="37"/></name><operator pos:line="48" pos:column="37">.<pos:position pos:line="48" pos:column="38"/></operator><name pos:line="48" pos:column="38">start<pos:position pos:line="48" pos:column="43"/></name><index pos:line="48" pos:column="43">[<expr><name pos:line="48" pos:column="44">r<pos:position pos:line="48" pos:column="45"/></name></expr>]<pos:position pos:line="48" pos:column="46"/></index></name></expr>;<pos:position pos:line="48" pos:column="47"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="49" pos:column="15">pmatch<pos:position pos:line="49" pos:column="21"/></name><index pos:line="49" pos:column="21">[<expr><name pos:line="49" pos:column="22">r<pos:position pos:line="49" pos:column="23"/></name></expr>]<pos:position pos:line="49" pos:column="24"/></index></name><operator pos:line="49" pos:column="24">.<pos:position pos:line="49" pos:column="25"/></operator><name pos:line="49" pos:column="25">rm_eo<pos:position pos:line="49" pos:column="30"/></name> <operator pos:line="49" pos:column="31">=<pos:position pos:line="49" pos:column="32"/></operator> <name><name pos:line="49" pos:column="33">regs<pos:position pos:line="49" pos:column="37"/></name><operator pos:line="49" pos:column="37">.<pos:position pos:line="49" pos:column="38"/></operator><name pos:line="49" pos:column="38">end<pos:position pos:line="49" pos:column="41"/></name><index pos:line="49" pos:column="41">[<expr><name pos:line="49" pos:column="42">r<pos:position pos:line="49" pos:column="43"/></name></expr>]<pos:position pos:line="49" pos:column="44"/></index></name></expr>;<pos:position pos:line="49" pos:column="45"/></expr_stmt>
            }<pos:position pos:line="50" pos:column="14"/></block></for>
        }<pos:position pos:line="51" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="53" pos:column="7">/* If we needed the temporary register info, free the space now.  */</comment>
      <expr_stmt><expr><call><name pos:line="54" pos:column="7">free<pos:position pos:line="54" pos:column="11"/></name> <argument_list pos:line="54" pos:column="12">(<argument><expr><name><name pos:line="54" pos:column="13">regs<pos:position pos:line="54" pos:column="17"/></name><operator pos:line="54" pos:column="17">.<pos:position pos:line="54" pos:column="18"/></operator><name pos:line="54" pos:column="18">start<pos:position pos:line="54" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="25"/></expr_stmt>	<comment type="block" pos:line="54" pos:column="33">/* __MEM_CHECKED__ */</comment>
      <expr_stmt><expr><call><name pos:line="55" pos:column="7">free<pos:position pos:line="55" pos:column="11"/></name> <argument_list pos:line="55" pos:column="12">(<argument><expr><name><name pos:line="55" pos:column="13">regs<pos:position pos:line="55" pos:column="17"/></name><operator pos:line="55" pos:column="17">.<pos:position pos:line="55" pos:column="18"/></operator><name pos:line="55" pos:column="18">end<pos:position pos:line="55" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="23"/></expr_stmt>		<comment type="block" pos:line="55" pos:column="33">/* __MEM_CHECKED__ */</comment>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="58" pos:column="3">/* We want zero return to mean success, unlike `re_search'.  */</comment>
  <return pos:line="59" pos:column="3">return <expr><ternary><condition><expr><name pos:line="59" pos:column="10">ret<pos:position pos:line="59" pos:column="13"/></name> <operator pos:line="59" pos:column="14">&gt;=<pos:position pos:line="59" pos:column="19"/></operator> <literal type="number" pos:line="59" pos:column="17">0<pos:position pos:line="59" pos:column="18"/></literal></expr> ?<pos:position pos:line="59" pos:column="20"/></condition><then pos:line="59" pos:column="20"> <expr><operator pos:line="59" pos:column="21">(<pos:position pos:line="59" pos:column="22"/></operator><name pos:line="59" pos:column="22">int<pos:position pos:line="59" pos:column="25"/></name><operator pos:line="59" pos:column="25">)<pos:position pos:line="59" pos:column="26"/></operator> <name pos:line="59" pos:column="27">REG_NOERROR<pos:position pos:line="59" pos:column="38"/></name></expr> <pos:position pos:line="59" pos:column="39"/></then><else pos:line="59" pos:column="39">: <expr><operator pos:line="59" pos:column="41">(<pos:position pos:line="59" pos:column="42"/></operator><name pos:line="59" pos:column="42">int<pos:position pos:line="59" pos:column="45"/></name><operator pos:line="59" pos:column="45">)<pos:position pos:line="59" pos:column="46"/></operator> <name pos:line="59" pos:column="47">REG_NOMATCH<pos:position pos:line="59" pos:column="58"/></name></expr></else></ternary></expr>;<pos:position pos:line="59" pos:column="59"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></unit>
