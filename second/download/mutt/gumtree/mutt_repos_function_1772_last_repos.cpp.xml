<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1772_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_attach_list<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">BUFFER<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">buf<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">BUFFER<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">s<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">LIST<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier><modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">ldata<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="69">BUFFER<pos:position pos:line="1" pos:column="75"/></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type><name pos:line="1" pos:column="77">err<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="81"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">ATTACH_MATCH<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">a<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">LIST<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">listp<pos:position pos:line="4" pos:column="14"/></name></decl>, <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="17">lastp<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">p<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">tmpminor<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">len<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">ret<pos:position pos:line="8" pos:column="10"/></name></decl>;<pos:position pos:line="8" pos:column="11"/></decl_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* Find the last item in the list that data points to. */</comment>
  <expr_stmt><expr><name pos:line="11" pos:column="3">lastp<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">=<pos:position pos:line="11" pos:column="10"/></operator> <name pos:line="11" pos:column="11">NULL<pos:position pos:line="11" pos:column="15"/></name></expr>;<pos:position pos:line="11" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">dprint<pos:position pos:line="12" pos:column="9"/></name><argument_list pos:line="12" pos:column="9">(<argument><expr><literal type="number" pos:line="12" pos:column="10">5<pos:position pos:line="12" pos:column="11"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="13">(<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">debugfile<pos:position pos:line="12" pos:column="23"/></name><operator pos:line="12" pos:column="23">,<pos:position pos:line="12" pos:column="24"/></operator> <literal type="string" pos:line="12" pos:column="25">"parse_attach_list: ldata = %p, *ldata = %p\n"<pos:position pos:line="12" pos:column="71"/></literal><operator pos:line="12" pos:column="71">,<pos:position pos:line="12" pos:column="72"/></operator>
	      <operator pos:line="13" pos:column="15">(<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">void<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">*<pos:position pos:line="13" pos:column="22"/></operator><operator pos:line="13" pos:column="22">)<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="23">ldata<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">,<pos:position pos:line="13" pos:column="29"/></operator> <operator pos:line="13" pos:column="30">(<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="31">void<pos:position pos:line="13" pos:column="35"/></name> <operator pos:line="13" pos:column="36">*<pos:position pos:line="13" pos:column="37"/></operator><operator pos:line="13" pos:column="37">)<pos:position pos:line="13" pos:column="38"/></operator><operator pos:line="13" pos:column="38">*<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="39">ldata<pos:position pos:line="13" pos:column="44"/></name><operator pos:line="13" pos:column="44">)<pos:position pos:line="13" pos:column="45"/></operator></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="47"/></expr_stmt>
  <for pos:line="14" pos:column="3">for <control pos:line="14" pos:column="7">(<init><expr><name pos:line="14" pos:column="8">listp<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <operator pos:line="14" pos:column="16">*<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="17">ldata<pos:position pos:line="14" pos:column="22"/></name></expr>;<pos:position pos:line="14" pos:column="23"/></init> <condition><expr><name pos:line="14" pos:column="24">listp<pos:position pos:line="14" pos:column="29"/></name></expr>;<pos:position pos:line="14" pos:column="30"/></condition> <incr><expr><name pos:line="14" pos:column="31">listp<pos:position pos:line="14" pos:column="36"/></name> <operator pos:line="14" pos:column="37">=<pos:position pos:line="14" pos:column="38"/></operator> <name><name pos:line="14" pos:column="39">listp<pos:position pos:line="14" pos:column="44"/></name><operator pos:line="14" pos:column="44">-&gt;<pos:position pos:line="14" pos:column="49"/></operator><name pos:line="14" pos:column="46">next<pos:position pos:line="14" pos:column="50"/></name></name></expr></incr>)<pos:position pos:line="14" pos:column="51"/></control>
  <block pos:line="15" pos:column="3">{
    <expr_stmt><expr><name pos:line="16" pos:column="5">a<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <operator pos:line="16" pos:column="9">(<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">ATTACH_MATCH<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">*<pos:position pos:line="16" pos:column="24"/></operator><operator pos:line="16" pos:column="24">)<pos:position pos:line="16" pos:column="25"/></operator><name><name pos:line="16" pos:column="25">listp<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">-&gt;<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="32">data<pos:position pos:line="16" pos:column="36"/></name></name></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">dprint<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><literal type="number" pos:line="17" pos:column="12">5<pos:position pos:line="17" pos:column="13"/></literal></expr></argument>, <argument><expr><operator pos:line="17" pos:column="15">(<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="16">debugfile<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">,<pos:position pos:line="17" pos:column="26"/></operator> <literal type="string" pos:line="17" pos:column="27">"parse_attach_list: skipping %s/%s\n"<pos:position pos:line="17" pos:column="64"/></literal><operator pos:line="17" pos:column="64">,<pos:position pos:line="17" pos:column="65"/></operator>
		<name><name pos:line="18" pos:column="17">a<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">-&gt;<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="20">major<pos:position pos:line="18" pos:column="25"/></name></name><operator pos:line="18" pos:column="25">,<pos:position pos:line="18" pos:column="26"/></operator> <name><name pos:line="18" pos:column="27">a<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">-&gt;<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="30">minor<pos:position pos:line="18" pos:column="35"/></name></name><operator pos:line="18" pos:column="35">)<pos:position pos:line="18" pos:column="36"/></operator></expr></argument>)<pos:position pos:line="18" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">lastp<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <name pos:line="19" pos:column="13">listp<pos:position pos:line="19" pos:column="18"/></name></expr>;<pos:position pos:line="19" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="20" pos:column="4"/></block></for>

  <do pos:line="22" pos:column="3">do
  <block pos:line="23" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">mutt_extract_token<pos:position pos:line="24" pos:column="23"/></name> <argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">buf<pos:position pos:line="24" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="30">s<pos:position pos:line="24" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="33">0<pos:position pos:line="24" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">!<pos:position pos:line="26" pos:column="10"/></operator><name><name pos:line="26" pos:column="10">buf<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">-&gt;<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="15">data<pos:position pos:line="26" pos:column="19"/></name></name> <operator pos:line="26" pos:column="20">||<pos:position pos:line="26" pos:column="22"/></operator> <operator pos:line="26" pos:column="23">*<pos:position pos:line="26" pos:column="24"/></operator><name><name pos:line="26" pos:column="24">buf<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">-&gt;<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="29">data<pos:position pos:line="26" pos:column="33"/></name></name> <operator pos:line="26" pos:column="34">==<pos:position pos:line="26" pos:column="36"/></operator> <literal type="char" pos:line="26" pos:column="37">'\0'<pos:position pos:line="26" pos:column="41"/></literal></expr>)<pos:position pos:line="26" pos:column="42"/></condition><then pos:line="26" pos:column="42">
      <block type="pseudo"><continue pos:line="27" pos:column="7">continue;<pos:position pos:line="27" pos:column="16"/></continue></block></then></if>
   
    <expr_stmt><expr><name pos:line="29" pos:column="5">a<pos:position pos:line="29" pos:column="6"/></name> <operator pos:line="29" pos:column="7">=<pos:position pos:line="29" pos:column="8"/></operator> <call><name pos:line="29" pos:column="9">safe_malloc<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><sizeof pos:line="29" pos:column="21">sizeof<argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">ATTACH_MATCH<pos:position pos:line="29" pos:column="40"/></name></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>

    <comment type="block" pos:line="31" pos:column="5">/* some cheap hacks that I expect to remove */</comment>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><operator pos:line="32" pos:column="9">!<pos:position pos:line="32" pos:column="10"/></operator><call><name pos:line="32" pos:column="10">ascii_strcasecmp<pos:position pos:line="32" pos:column="26"/></name><argument_list pos:line="32" pos:column="26">(<argument><expr><name><name pos:line="32" pos:column="27">buf<pos:position pos:line="32" pos:column="30"/></name><operator pos:line="32" pos:column="30">-&gt;<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="32">data<pos:position pos:line="32" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="38">"any"<pos:position pos:line="32" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="45"/></condition><then pos:line="32" pos:column="45">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="7">a<pos:position pos:line="33" pos:column="8"/></name><operator pos:line="33" pos:column="8">-&gt;<pos:position pos:line="33" pos:column="13"/></operator><name pos:line="33" pos:column="10">major<pos:position pos:line="33" pos:column="15"/></name></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <call><name pos:line="33" pos:column="18">safe_strdup<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><literal type="string" pos:line="33" pos:column="30">"*/.*"<pos:position pos:line="33" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt></block></then>
    <elseif pos:line="34" pos:column="5">else <if pos:line="34" pos:column="10">if <condition pos:line="34" pos:column="13">(<expr><operator pos:line="34" pos:column="14">!<pos:position pos:line="34" pos:column="15"/></operator><call><name pos:line="34" pos:column="15">ascii_strcasecmp<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><name><name pos:line="34" pos:column="32">buf<pos:position pos:line="34" pos:column="35"/></name><operator pos:line="34" pos:column="35">-&gt;<pos:position pos:line="34" pos:column="40"/></operator><name pos:line="34" pos:column="37">data<pos:position pos:line="34" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="43">"none"<pos:position pos:line="34" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="51"/></condition><then pos:line="34" pos:column="51">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="7">a<pos:position pos:line="35" pos:column="8"/></name><operator pos:line="35" pos:column="8">-&gt;<pos:position pos:line="35" pos:column="13"/></operator><name pos:line="35" pos:column="10">major<pos:position pos:line="35" pos:column="15"/></name></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <call><name pos:line="35" pos:column="18">safe_strdup<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><literal type="string" pos:line="35" pos:column="30">"cheap_hack/this_should_never_match"<pos:position pos:line="35" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="68"/></expr_stmt></block></then></if></elseif>
    <else pos:line="36" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="37" pos:column="7">a<pos:position pos:line="37" pos:column="8"/></name><operator pos:line="37" pos:column="8">-&gt;<pos:position pos:line="37" pos:column="13"/></operator><name pos:line="37" pos:column="10">major<pos:position pos:line="37" pos:column="15"/></name></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <call><name pos:line="37" pos:column="18">safe_strdup<pos:position pos:line="37" pos:column="29"/></name><argument_list pos:line="37" pos:column="29">(<argument><expr><name><name pos:line="37" pos:column="30">buf<pos:position pos:line="37" pos:column="33"/></name><operator pos:line="37" pos:column="33">-&gt;<pos:position pos:line="37" pos:column="38"/></operator><name pos:line="37" pos:column="35">data<pos:position pos:line="37" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="41"/></expr_stmt></block></else></if>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><operator pos:line="39" pos:column="9">(<pos:position pos:line="39" pos:column="10"/></operator><name pos:line="39" pos:column="10">p<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <call><name pos:line="39" pos:column="14">strchr<pos:position pos:line="39" pos:column="20"/></name><argument_list pos:line="39" pos:column="20">(<argument><expr><name><name pos:line="39" pos:column="21">a<pos:position pos:line="39" pos:column="22"/></name><operator pos:line="39" pos:column="22">-&gt;<pos:position pos:line="39" pos:column="27"/></operator><name pos:line="39" pos:column="24">major<pos:position pos:line="39" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="39" pos:column="31">'/'<pos:position pos:line="39" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="35"/></argument_list></call><operator pos:line="39" pos:column="35">)<pos:position pos:line="39" pos:column="36"/></operator></expr>)<pos:position pos:line="39" pos:column="37"/></condition><then pos:line="39" pos:column="37">
    <block pos:line="40" pos:column="5">{
      <expr_stmt><expr><operator pos:line="41" pos:column="7">*<pos:position pos:line="41" pos:column="8"/></operator><name pos:line="41" pos:column="8">p<pos:position pos:line="41" pos:column="9"/></name> <operator pos:line="41" pos:column="10">=<pos:position pos:line="41" pos:column="11"/></operator> <literal type="char" pos:line="41" pos:column="12">'\0'<pos:position pos:line="41" pos:column="16"/></literal></expr>;<pos:position pos:line="41" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="42" pos:column="7">++<pos:position pos:line="42" pos:column="9"/></operator><name pos:line="42" pos:column="9">p<pos:position pos:line="42" pos:column="10"/></name></expr>;<pos:position pos:line="42" pos:column="11"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="43" pos:column="7">a<pos:position pos:line="43" pos:column="8"/></name><operator pos:line="43" pos:column="8">-&gt;<pos:position pos:line="43" pos:column="13"/></operator><name pos:line="43" pos:column="10">minor<pos:position pos:line="43" pos:column="15"/></name></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <name pos:line="43" pos:column="18">p<pos:position pos:line="43" pos:column="19"/></name></expr>;<pos:position pos:line="43" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></then>
    <else pos:line="45" pos:column="5">else
    <block pos:line="46" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="47" pos:column="7">a<pos:position pos:line="47" pos:column="8"/></name><operator pos:line="47" pos:column="8">-&gt;<pos:position pos:line="47" pos:column="13"/></operator><name pos:line="47" pos:column="10">minor<pos:position pos:line="47" pos:column="15"/></name></name> <operator pos:line="47" pos:column="16">=<pos:position pos:line="47" pos:column="17"/></operator> <literal type="string" pos:line="47" pos:column="18">"unknown"<pos:position pos:line="47" pos:column="27"/></literal></expr>;<pos:position pos:line="47" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="50" pos:column="5">len<pos:position pos:line="50" pos:column="8"/></name> <operator pos:line="50" pos:column="9">=<pos:position pos:line="50" pos:column="10"/></operator> <call><name pos:line="50" pos:column="11">strlen<pos:position pos:line="50" pos:column="17"/></name><argument_list pos:line="50" pos:column="17">(<argument><expr><name><name pos:line="50" pos:column="18">a<pos:position pos:line="50" pos:column="19"/></name><operator pos:line="50" pos:column="19">-&gt;<pos:position pos:line="50" pos:column="24"/></operator><name pos:line="50" pos:column="21">minor<pos:position pos:line="50" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="51" pos:column="5">tmpminor<pos:position pos:line="51" pos:column="13"/></name> <operator pos:line="51" pos:column="14">=<pos:position pos:line="51" pos:column="15"/></operator> <call><name pos:line="51" pos:column="16">safe_malloc<pos:position pos:line="51" pos:column="27"/></name><argument_list pos:line="51" pos:column="27">(<argument><expr><name pos:line="51" pos:column="28">len<pos:position pos:line="51" pos:column="31"/></name><operator pos:line="51" pos:column="31">+<pos:position pos:line="51" pos:column="32"/></operator><literal type="number" pos:line="51" pos:column="32">3<pos:position pos:line="51" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">strcpy<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><operator pos:line="52" pos:column="12">&amp;<pos:position pos:line="52" pos:column="17"/></operator><name><name pos:line="52" pos:column="13">tmpminor<pos:position pos:line="52" pos:column="21"/></name><index pos:line="52" pos:column="21">[<expr><literal type="number" pos:line="52" pos:column="22">1<pos:position pos:line="52" pos:column="23"/></literal></expr>]<pos:position pos:line="52" pos:column="24"/></index></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="26">a<pos:position pos:line="52" pos:column="27"/></name><operator pos:line="52" pos:column="27">-&gt;<pos:position pos:line="52" pos:column="32"/></operator><name pos:line="52" pos:column="29">minor<pos:position pos:line="52" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="36"/></expr_stmt> <comment type="block" pos:line="52" pos:column="37">/* __STRCPY_CHECKED__ */</comment>
    <expr_stmt><expr><name><name pos:line="53" pos:column="5">tmpminor<pos:position pos:line="53" pos:column="13"/></name><index pos:line="53" pos:column="13">[<expr><literal type="number" pos:line="53" pos:column="14">0<pos:position pos:line="53" pos:column="15"/></literal></expr>]<pos:position pos:line="53" pos:column="16"/></index></name> <operator pos:line="53" pos:column="17">=<pos:position pos:line="53" pos:column="18"/></operator> <literal type="char" pos:line="53" pos:column="19">'^'<pos:position pos:line="53" pos:column="22"/></literal></expr>;<pos:position pos:line="53" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="54" pos:column="5">tmpminor<pos:position pos:line="54" pos:column="13"/></name><index pos:line="54" pos:column="13">[<expr><name pos:line="54" pos:column="14">len<pos:position pos:line="54" pos:column="17"/></name><operator pos:line="54" pos:column="17">+<pos:position pos:line="54" pos:column="18"/></operator><literal type="number" pos:line="54" pos:column="18">1<pos:position pos:line="54" pos:column="19"/></literal></expr>]<pos:position pos:line="54" pos:column="20"/></index></name> <operator pos:line="54" pos:column="21">=<pos:position pos:line="54" pos:column="22"/></operator> <literal type="char" pos:line="54" pos:column="23">'$'<pos:position pos:line="54" pos:column="26"/></literal></expr>;<pos:position pos:line="54" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="55" pos:column="5">tmpminor<pos:position pos:line="55" pos:column="13"/></name><index pos:line="55" pos:column="13">[<expr><name pos:line="55" pos:column="14">len<pos:position pos:line="55" pos:column="17"/></name><operator pos:line="55" pos:column="17">+<pos:position pos:line="55" pos:column="18"/></operator><literal type="number" pos:line="55" pos:column="18">2<pos:position pos:line="55" pos:column="19"/></literal></expr>]<pos:position pos:line="55" pos:column="20"/></index></name> <operator pos:line="55" pos:column="21">=<pos:position pos:line="55" pos:column="22"/></operator> <literal type="char" pos:line="55" pos:column="23">'\0'<pos:position pos:line="55" pos:column="27"/></literal></expr>;<pos:position pos:line="55" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="57" pos:column="5">a<pos:position pos:line="57" pos:column="6"/></name><operator pos:line="57" pos:column="6">-&gt;<pos:position pos:line="57" pos:column="11"/></operator><name pos:line="57" pos:column="8">major_int<pos:position pos:line="57" pos:column="17"/></name></name> <operator pos:line="57" pos:column="18">=<pos:position pos:line="57" pos:column="19"/></operator> <call><name pos:line="57" pos:column="20">mutt_check_mime_type<pos:position pos:line="57" pos:column="40"/></name><argument_list pos:line="57" pos:column="40">(<argument><expr><name><name pos:line="57" pos:column="41">a<pos:position pos:line="57" pos:column="42"/></name><operator pos:line="57" pos:column="42">-&gt;<pos:position pos:line="57" pos:column="47"/></operator><name pos:line="57" pos:column="44">major<pos:position pos:line="57" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name pos:line="58" pos:column="5">ret<pos:position pos:line="58" pos:column="8"/></name> <operator pos:line="58" pos:column="9">=<pos:position pos:line="58" pos:column="10"/></operator> <call><name pos:line="58" pos:column="11">REGCOMP<pos:position pos:line="58" pos:column="18"/></name><argument_list pos:line="58" pos:column="18">(<argument><expr><operator pos:line="58" pos:column="19">&amp;<pos:position pos:line="58" pos:column="24"/></operator><name><name pos:line="58" pos:column="20">a<pos:position pos:line="58" pos:column="21"/></name><operator pos:line="58" pos:column="21">-&gt;<pos:position pos:line="58" pos:column="26"/></operator><name pos:line="58" pos:column="23">minor_rx<pos:position pos:line="58" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="33">tmpminor<pos:position pos:line="58" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="43">REG_ICASE<pos:position pos:line="58" pos:column="52"/></name></expr></argument>)<pos:position pos:line="58" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="54"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="60" pos:column="5">FREE<pos:position pos:line="60" pos:column="9"/></name><argument_list pos:line="60" pos:column="9">(<argument><expr><operator pos:line="60" pos:column="10">&amp;<pos:position pos:line="60" pos:column="15"/></operator><name pos:line="60" pos:column="11">tmpminor<pos:position pos:line="60" pos:column="19"/></name></expr></argument>)<pos:position pos:line="60" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="21"/></expr_stmt>

    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><name pos:line="62" pos:column="9">ret<pos:position pos:line="62" pos:column="12"/></name></expr>)<pos:position pos:line="62" pos:column="13"/></condition><then pos:line="62" pos:column="13">
    <block pos:line="63" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="64" pos:column="7">regerror<pos:position pos:line="64" pos:column="15"/></name><argument_list pos:line="64" pos:column="15">(<argument><expr><name pos:line="64" pos:column="16">ret<pos:position pos:line="64" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="21">&amp;<pos:position pos:line="64" pos:column="26"/></operator><name><name pos:line="64" pos:column="22">a<pos:position pos:line="64" pos:column="23"/></name><operator pos:line="64" pos:column="23">-&gt;<pos:position pos:line="64" pos:column="28"/></operator><name pos:line="64" pos:column="25">minor_rx<pos:position pos:line="64" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="35">err<pos:position pos:line="64" pos:column="38"/></name><operator pos:line="64" pos:column="38">-&gt;<pos:position pos:line="64" pos:column="43"/></operator><name pos:line="64" pos:column="40">data<pos:position pos:line="64" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="46">err<pos:position pos:line="64" pos:column="49"/></name><operator pos:line="64" pos:column="49">-&gt;<pos:position pos:line="64" pos:column="54"/></operator><name pos:line="64" pos:column="51">dsize<pos:position pos:line="64" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="58"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="65" pos:column="7">FREE<pos:position pos:line="65" pos:column="11"/></name><argument_list pos:line="65" pos:column="11">(<argument><expr><operator pos:line="65" pos:column="12">&amp;<pos:position pos:line="65" pos:column="17"/></operator><name><name pos:line="65" pos:column="13">a<pos:position pos:line="65" pos:column="14"/></name><operator pos:line="65" pos:column="14">-&gt;<pos:position pos:line="65" pos:column="19"/></operator><name pos:line="65" pos:column="16">major<pos:position pos:line="65" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="66" pos:column="7">FREE<pos:position pos:line="66" pos:column="11"/></name><argument_list pos:line="66" pos:column="11">(<argument><expr><operator pos:line="66" pos:column="12">&amp;<pos:position pos:line="66" pos:column="17"/></operator><name pos:line="66" pos:column="13">a<pos:position pos:line="66" pos:column="14"/></name></expr></argument>)<pos:position pos:line="66" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="16"/></expr_stmt>
      <return pos:line="67" pos:column="7">return <expr><operator pos:line="67" pos:column="14">-<pos:position pos:line="67" pos:column="15"/></operator><literal type="number" pos:line="67" pos:column="15">1<pos:position pos:line="67" pos:column="16"/></literal></expr>;<pos:position pos:line="67" pos:column="17"/></return>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="70" pos:column="5">dprint<pos:position pos:line="70" pos:column="11"/></name><argument_list pos:line="70" pos:column="11">(<argument><expr><literal type="number" pos:line="70" pos:column="12">5<pos:position pos:line="70" pos:column="13"/></literal></expr></argument>, <argument><expr><operator pos:line="70" pos:column="15">(<pos:position pos:line="70" pos:column="16"/></operator><name pos:line="70" pos:column="16">debugfile<pos:position pos:line="70" pos:column="25"/></name><operator pos:line="70" pos:column="25">,<pos:position pos:line="70" pos:column="26"/></operator> <literal type="string" pos:line="70" pos:column="27">"parse_attach_list: added %s/%s [%d]\n"<pos:position pos:line="70" pos:column="66"/></literal><operator pos:line="70" pos:column="66">,<pos:position pos:line="70" pos:column="67"/></operator>
		<name><name pos:line="71" pos:column="17">a<pos:position pos:line="71" pos:column="18"/></name><operator pos:line="71" pos:column="18">-&gt;<pos:position pos:line="71" pos:column="23"/></operator><name pos:line="71" pos:column="20">major<pos:position pos:line="71" pos:column="25"/></name></name><operator pos:line="71" pos:column="25">,<pos:position pos:line="71" pos:column="26"/></operator> <name><name pos:line="71" pos:column="27">a<pos:position pos:line="71" pos:column="28"/></name><operator pos:line="71" pos:column="28">-&gt;<pos:position pos:line="71" pos:column="33"/></operator><name pos:line="71" pos:column="30">minor<pos:position pos:line="71" pos:column="35"/></name></name><operator pos:line="71" pos:column="35">,<pos:position pos:line="71" pos:column="36"/></operator> <name><name pos:line="71" pos:column="37">a<pos:position pos:line="71" pos:column="38"/></name><operator pos:line="71" pos:column="38">-&gt;<pos:position pos:line="71" pos:column="43"/></operator><name pos:line="71" pos:column="40">major_int<pos:position pos:line="71" pos:column="49"/></name></name><operator pos:line="71" pos:column="49">)<pos:position pos:line="71" pos:column="50"/></operator></expr></argument>)<pos:position pos:line="71" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="52"/></expr_stmt>

    <expr_stmt><expr><name pos:line="73" pos:column="5">listp<pos:position pos:line="73" pos:column="10"/></name> <operator pos:line="73" pos:column="11">=<pos:position pos:line="73" pos:column="12"/></operator> <call><name pos:line="73" pos:column="13">safe_malloc<pos:position pos:line="73" pos:column="24"/></name><argument_list pos:line="73" pos:column="24">(<argument><expr><sizeof pos:line="73" pos:column="25">sizeof<argument_list pos:line="73" pos:column="31">(<argument><expr><name pos:line="73" pos:column="32">LIST<pos:position pos:line="73" pos:column="36"/></name></expr></argument>)<pos:position pos:line="73" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="73" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="74" pos:column="5">listp<pos:position pos:line="74" pos:column="10"/></name><operator pos:line="74" pos:column="10">-&gt;<pos:position pos:line="74" pos:column="15"/></operator><name pos:line="74" pos:column="12">data<pos:position pos:line="74" pos:column="16"/></name></name> <operator pos:line="74" pos:column="17">=<pos:position pos:line="74" pos:column="18"/></operator> <operator pos:line="74" pos:column="19">(<pos:position pos:line="74" pos:column="20"/></operator><name pos:line="74" pos:column="20">char<pos:position pos:line="74" pos:column="24"/></name> <operator pos:line="74" pos:column="25">*<pos:position pos:line="74" pos:column="26"/></operator><operator pos:line="74" pos:column="26">)<pos:position pos:line="74" pos:column="27"/></operator><name pos:line="74" pos:column="27">a<pos:position pos:line="74" pos:column="28"/></name></expr>;<pos:position pos:line="74" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="75" pos:column="5">listp<pos:position pos:line="75" pos:column="10"/></name><operator pos:line="75" pos:column="10">-&gt;<pos:position pos:line="75" pos:column="15"/></operator><name pos:line="75" pos:column="12">next<pos:position pos:line="75" pos:column="16"/></name></name> <operator pos:line="75" pos:column="17">=<pos:position pos:line="75" pos:column="18"/></operator> <name pos:line="75" pos:column="19">NULL<pos:position pos:line="75" pos:column="23"/></name></expr>;<pos:position pos:line="75" pos:column="24"/></expr_stmt>
    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><name pos:line="76" pos:column="9">lastp<pos:position pos:line="76" pos:column="14"/></name></expr>)<pos:position pos:line="76" pos:column="15"/></condition><then pos:line="76" pos:column="15">
    <block pos:line="77" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="78" pos:column="7">lastp<pos:position pos:line="78" pos:column="12"/></name><operator pos:line="78" pos:column="12">-&gt;<pos:position pos:line="78" pos:column="17"/></operator><name pos:line="78" pos:column="14">next<pos:position pos:line="78" pos:column="18"/></name></name> <operator pos:line="78" pos:column="19">=<pos:position pos:line="78" pos:column="20"/></operator> <name pos:line="78" pos:column="21">listp<pos:position pos:line="78" pos:column="26"/></name></expr>;<pos:position pos:line="78" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="79" pos:column="6"/></block></then>
    <else pos:line="80" pos:column="5">else
    <block pos:line="81" pos:column="5">{
      <expr_stmt><expr><operator pos:line="82" pos:column="7">*<pos:position pos:line="82" pos:column="8"/></operator><name pos:line="82" pos:column="8">ldata<pos:position pos:line="82" pos:column="13"/></name> <operator pos:line="82" pos:column="14">=<pos:position pos:line="82" pos:column="15"/></operator> <name pos:line="82" pos:column="16">listp<pos:position pos:line="82" pos:column="21"/></name></expr>;<pos:position pos:line="82" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="83" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="84" pos:column="5">lastp<pos:position pos:line="84" pos:column="10"/></name> <operator pos:line="84" pos:column="11">=<pos:position pos:line="84" pos:column="12"/></operator> <name pos:line="84" pos:column="13">listp<pos:position pos:line="84" pos:column="18"/></name></expr>;<pos:position pos:line="84" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="85" pos:column="4"/></block>
  while <condition pos:line="86" pos:column="9">(<expr><call><name pos:line="86" pos:column="10">MoreArgs<pos:position pos:line="86" pos:column="18"/></name> <argument_list pos:line="86" pos:column="19">(<argument><expr><name pos:line="86" pos:column="20">s<pos:position pos:line="86" pos:column="21"/></name></expr></argument>)<pos:position pos:line="86" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="23"/></condition>;<pos:position pos:line="86" pos:column="24"/></do>
   
  <expr_stmt><expr><call><name pos:line="88" pos:column="3">_attachments_clean<pos:position pos:line="88" pos:column="21"/></name><argument_list pos:line="88" pos:column="21">()<pos:position pos:line="88" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="24"/></expr_stmt>
  <return pos:line="89" pos:column="3">return <expr><literal type="number" pos:line="89" pos:column="10">0<pos:position pos:line="89" pos:column="11"/></literal></expr>;<pos:position pos:line="89" pos:column="12"/></return>
}<pos:position pos:line="90" pos:column="2"/></block></function></unit>
