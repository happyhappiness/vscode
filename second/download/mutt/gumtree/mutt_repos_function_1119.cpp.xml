<function xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position"><type><name pos:line="5563" pos:column="1">int<pos:position pos:line="5563" pos:column="4"/></name></type>
<name pos:line="5564" pos:column="1">regcomp<pos:position pos:line="5564" pos:column="8"/></name> <parameter_list pos:line="5564" pos:column="9">(<parameter><decl><type><name pos:line="5564" pos:column="10">preg<pos:position pos:line="5564" pos:column="14"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="5564" pos:column="16">pattern<pos:position pos:line="5564" pos:column="23"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="5564" pos:column="25">cflags<pos:position pos:line="5564" pos:column="31"/></name></type></decl></parameter>)<pos:position pos:line="5564" pos:column="32"/></parameter_list>
    <decl_stmt><decl><type><name pos:line="5565" pos:column="5">regex_t<pos:position pos:line="5565" pos:column="12"/></name> <modifier pos:line="5565" pos:column="13">*<pos:position pos:line="5565" pos:column="14"/></modifier></type><name pos:line="5565" pos:column="14">preg<pos:position pos:line="5565" pos:column="18"/></name></decl>;<pos:position pos:line="5565" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5566" pos:column="5">const<pos:position pos:line="5566" pos:column="10"/></specifier> <name pos:line="5566" pos:column="11">char<pos:position pos:line="5566" pos:column="15"/></name> <modifier pos:line="5566" pos:column="16">*<pos:position pos:line="5566" pos:column="17"/></modifier></type><name pos:line="5566" pos:column="17">pattern<pos:position pos:line="5566" pos:column="24"/></name></decl>;<pos:position pos:line="5566" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5567" pos:column="5">int<pos:position pos:line="5567" pos:column="8"/></name></type> <name pos:line="5567" pos:column="9">cflags<pos:position pos:line="5567" pos:column="15"/></name></decl>;<pos:position pos:line="5567" pos:column="16"/></decl_stmt>
<block pos:line="5568" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5569" pos:column="3">reg_errcode_t<pos:position pos:line="5569" pos:column="16"/></name></type> <name pos:line="5569" pos:column="17">ret<pos:position pos:line="5569" pos:column="20"/></name></decl>;<pos:position pos:line="5569" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5570" pos:column="3">reg_syntax_t<pos:position pos:line="5570" pos:column="15"/></name></type> <name pos:line="5570" pos:column="16">syntax<pos:position pos:line="5570" pos:column="22"/></name>
    <init pos:line="5571" pos:column="5">= <expr><ternary><condition><expr><operator pos:line="5571" pos:column="7">(<pos:position pos:line="5571" pos:column="8"/></operator><name pos:line="5571" pos:column="8">cflags<pos:position pos:line="5571" pos:column="14"/></name> <operator pos:line="5571" pos:column="15">&amp;<pos:position pos:line="5571" pos:column="20"/></operator> <name pos:line="5571" pos:column="17">REG_EXTENDED<pos:position pos:line="5571" pos:column="29"/></name><operator pos:line="5571" pos:column="29">)<pos:position pos:line="5571" pos:column="30"/></operator></expr> ?<pos:position pos:line="5571" pos:column="32"/></condition><then pos:line="5571" pos:column="32">
      <expr><name pos:line="5572" pos:column="7">RE_SYNTAX_POSIX_EXTENDED<pos:position pos:line="5572" pos:column="31"/></name></expr> <pos:position pos:line="5572" pos:column="32"/></then><else pos:line="5572" pos:column="32">: <expr><name pos:line="5572" pos:column="34">RE_SYNTAX_POSIX_BASIC<pos:position pos:line="5572" pos:column="55"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="5572" pos:column="56"/></decl_stmt>

  <comment type="block" pos:line="5574" pos:column="3">/* regex_compile will allocate the space for the compiled pattern.  */</comment>
  <expr_stmt><expr><name><name pos:line="5575" pos:column="3">preg<pos:position pos:line="5575" pos:column="7"/></name><operator pos:line="5575" pos:column="7">-&gt;<pos:position pos:line="5575" pos:column="12"/></operator><name pos:line="5575" pos:column="9">buffer<pos:position pos:line="5575" pos:column="15"/></name></name> <operator pos:line="5575" pos:column="16">=<pos:position pos:line="5575" pos:column="17"/></operator> <literal type="number" pos:line="5575" pos:column="18">0<pos:position pos:line="5575" pos:column="19"/></literal></expr>;<pos:position pos:line="5575" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5576" pos:column="3">preg<pos:position pos:line="5576" pos:column="7"/></name><operator pos:line="5576" pos:column="7">-&gt;<pos:position pos:line="5576" pos:column="12"/></operator><name pos:line="5576" pos:column="9">allocated<pos:position pos:line="5576" pos:column="18"/></name></name> <operator pos:line="5576" pos:column="19">=<pos:position pos:line="5576" pos:column="20"/></operator> <literal type="number" pos:line="5576" pos:column="21">0<pos:position pos:line="5576" pos:column="22"/></literal></expr>;<pos:position pos:line="5576" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5577" pos:column="3">preg<pos:position pos:line="5577" pos:column="7"/></name><operator pos:line="5577" pos:column="7">-&gt;<pos:position pos:line="5577" pos:column="12"/></operator><name pos:line="5577" pos:column="9">used<pos:position pos:line="5577" pos:column="13"/></name></name> <operator pos:line="5577" pos:column="14">=<pos:position pos:line="5577" pos:column="15"/></operator> <literal type="number" pos:line="5577" pos:column="16">0<pos:position pos:line="5577" pos:column="17"/></literal></expr>;<pos:position pos:line="5577" pos:column="18"/></expr_stmt>

  <comment type="block" pos:line="5579" pos:column="3">/* Don't bother to use a fastmap when searching.  This simplifies the
     REG_NEWLINE case: if we used a fastmap, we'd have to put all the
     characters after newlines into the fastmap.  This way, we just try
     every character.  */</comment>
  <expr_stmt><expr><name><name pos:line="5583" pos:column="3">preg<pos:position pos:line="5583" pos:column="7"/></name><operator pos:line="5583" pos:column="7">-&gt;<pos:position pos:line="5583" pos:column="12"/></operator><name pos:line="5583" pos:column="9">fastmap<pos:position pos:line="5583" pos:column="16"/></name></name> <operator pos:line="5583" pos:column="17">=<pos:position pos:line="5583" pos:column="18"/></operator> <literal type="number" pos:line="5583" pos:column="19">0<pos:position pos:line="5583" pos:column="20"/></literal></expr>;<pos:position pos:line="5583" pos:column="21"/></expr_stmt>

  <if pos:line="5585" pos:column="3">if <condition pos:line="5585" pos:column="6">(<expr><name pos:line="5585" pos:column="7">cflags<pos:position pos:line="5585" pos:column="13"/></name> <operator pos:line="5585" pos:column="14">&amp;<pos:position pos:line="5585" pos:column="19"/></operator> <name pos:line="5585" pos:column="16">REG_ICASE<pos:position pos:line="5585" pos:column="25"/></name></expr>)<pos:position pos:line="5585" pos:column="26"/></condition><then pos:line="5585" pos:column="26">
    <block pos:line="5586" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="5587" pos:column="7">unsigned<pos:position pos:line="5587" pos:column="15"/></name></type> <name pos:line="5587" pos:column="16">i<pos:position pos:line="5587" pos:column="17"/></name></decl>;<pos:position pos:line="5587" pos:column="18"/></decl_stmt>

      <expr_stmt><expr><name><name pos:line="5589" pos:column="7">preg<pos:position pos:line="5589" pos:column="11"/></name><operator pos:line="5589" pos:column="11">-&gt;<pos:position pos:line="5589" pos:column="16"/></operator><name pos:line="5589" pos:column="13">translate<pos:position pos:line="5589" pos:column="22"/></name></name>
	<operator pos:line="5590" pos:column="9">=<pos:position pos:line="5590" pos:column="10"/></operator> <operator pos:line="5590" pos:column="11">(<pos:position pos:line="5590" pos:column="12"/></operator><name pos:line="5590" pos:column="12">RE_TRANSLATE_TYPE<pos:position pos:line="5590" pos:column="29"/></name><operator pos:line="5590" pos:column="29">)<pos:position pos:line="5590" pos:column="30"/></operator> <call><name pos:line="5590" pos:column="31">malloc<pos:position pos:line="5590" pos:column="37"/></name> <argument_list pos:line="5590" pos:column="38">(<argument><expr><name pos:line="5590" pos:column="39">CHAR_SET_SIZE<pos:position pos:line="5590" pos:column="52"/></name>	<comment type="block" pos:line="5590" pos:column="57">/* __MEM_CHECKED__ */</comment>
				      <operator pos:line="5591" pos:column="39">*<pos:position pos:line="5591" pos:column="40"/></operator> <sizeof pos:line="5591" pos:column="41">sizeof <argument_list pos:line="5591" pos:column="48">(<argument><expr><operator pos:line="5591" pos:column="49">*<pos:position pos:line="5591" pos:column="50"/></operator><operator pos:line="5591" pos:column="50">(<pos:position pos:line="5591" pos:column="51"/></operator><name pos:line="5591" pos:column="51">RE_TRANSLATE_TYPE<pos:position pos:line="5591" pos:column="68"/></name><operator pos:line="5591" pos:column="68">)<pos:position pos:line="5591" pos:column="69"/></operator><literal type="number" pos:line="5591" pos:column="69">0<pos:position pos:line="5591" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="5591" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5591" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="5591" pos:column="73"/></expr_stmt>
      <if pos:line="5592" pos:column="7">if <condition pos:line="5592" pos:column="10">(<expr><name><name pos:line="5592" pos:column="11">preg<pos:position pos:line="5592" pos:column="15"/></name><operator pos:line="5592" pos:column="15">-&gt;<pos:position pos:line="5592" pos:column="20"/></operator><name pos:line="5592" pos:column="17">translate<pos:position pos:line="5592" pos:column="26"/></name></name> <operator pos:line="5592" pos:column="27">==<pos:position pos:line="5592" pos:column="29"/></operator> <name pos:line="5592" pos:column="30">NULL<pos:position pos:line="5592" pos:column="34"/></name></expr>)<pos:position pos:line="5592" pos:column="35"/></condition><then pos:line="5592" pos:column="35">
        <block type="pseudo"><return pos:line="5593" pos:column="9">return <expr><operator pos:line="5593" pos:column="16">(<pos:position pos:line="5593" pos:column="17"/></operator><name pos:line="5593" pos:column="17">int<pos:position pos:line="5593" pos:column="20"/></name><operator pos:line="5593" pos:column="20">)<pos:position pos:line="5593" pos:column="21"/></operator> <name pos:line="5593" pos:column="22">REG_ESPACE<pos:position pos:line="5593" pos:column="32"/></name></expr>;<pos:position pos:line="5593" pos:column="33"/></return></block></then></if>

      <comment type="block" pos:line="5595" pos:column="7">/* Map uppercase characters to corresponding lowercase ones.  */</comment>
      <for pos:line="5596" pos:column="7">for <control pos:line="5596" pos:column="11">(<init><expr><name pos:line="5596" pos:column="12">i<pos:position pos:line="5596" pos:column="13"/></name> <operator pos:line="5596" pos:column="14">=<pos:position pos:line="5596" pos:column="15"/></operator> <literal type="number" pos:line="5596" pos:column="16">0<pos:position pos:line="5596" pos:column="17"/></literal></expr>;<pos:position pos:line="5596" pos:column="18"/></init> <condition><expr><name pos:line="5596" pos:column="19">i<pos:position pos:line="5596" pos:column="20"/></name> <operator pos:line="5596" pos:column="21">&lt;<pos:position pos:line="5596" pos:column="25"/></operator> <name pos:line="5596" pos:column="23">CHAR_SET_SIZE<pos:position pos:line="5596" pos:column="36"/></name></expr>;<pos:position pos:line="5596" pos:column="37"/></condition> <incr><expr><name pos:line="5596" pos:column="38">i<pos:position pos:line="5596" pos:column="39"/></name><operator pos:line="5596" pos:column="39">++<pos:position pos:line="5596" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="5596" pos:column="42"/></control>
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="5597" pos:column="9">preg<pos:position pos:line="5597" pos:column="13"/></name><operator pos:line="5597" pos:column="13">-&gt;<pos:position pos:line="5597" pos:column="18"/></operator><name pos:line="5597" pos:column="15">translate<pos:position pos:line="5597" pos:column="24"/></name><index pos:line="5597" pos:column="24">[<expr><name pos:line="5597" pos:column="25">i<pos:position pos:line="5597" pos:column="26"/></name></expr>]<pos:position pos:line="5597" pos:column="27"/></index></name> <operator pos:line="5597" pos:column="28">=<pos:position pos:line="5597" pos:column="29"/></operator> <ternary><condition><expr><call><name pos:line="5597" pos:column="30">ISUPPER<pos:position pos:line="5597" pos:column="37"/></name> <argument_list pos:line="5597" pos:column="38">(<argument><expr><name pos:line="5597" pos:column="39">i<pos:position pos:line="5597" pos:column="40"/></name></expr></argument>)<pos:position pos:line="5597" pos:column="41"/></argument_list></call></expr> ?<pos:position pos:line="5597" pos:column="43"/></condition><then pos:line="5597" pos:column="43"> <expr><call><name pos:line="5597" pos:column="44">tolower<pos:position pos:line="5597" pos:column="51"/></name> <argument_list pos:line="5597" pos:column="52">(<argument><expr><name pos:line="5597" pos:column="53">i<pos:position pos:line="5597" pos:column="54"/></name></expr></argument>)<pos:position pos:line="5597" pos:column="55"/></argument_list></call></expr> <pos:position pos:line="5597" pos:column="56"/></then><else pos:line="5597" pos:column="56">: <expr><name pos:line="5597" pos:column="58">i<pos:position pos:line="5597" pos:column="59"/></name></expr></else></ternary></expr>;<pos:position pos:line="5597" pos:column="60"/></expr_stmt></block></for>
    }<pos:position pos:line="5598" pos:column="6"/></block></then>
  <else pos:line="5599" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="5600" pos:column="5">preg<pos:position pos:line="5600" pos:column="9"/></name><operator pos:line="5600" pos:column="9">-&gt;<pos:position pos:line="5600" pos:column="14"/></operator><name pos:line="5600" pos:column="11">translate<pos:position pos:line="5600" pos:column="20"/></name></name> <operator pos:line="5600" pos:column="21">=<pos:position pos:line="5600" pos:column="22"/></operator> <name pos:line="5600" pos:column="23">NULL<pos:position pos:line="5600" pos:column="27"/></name></expr>;<pos:position pos:line="5600" pos:column="28"/></expr_stmt></block></else></if>

  <comment type="block" pos:line="5602" pos:column="3">/* If REG_NEWLINE is set, newlines are treated differently.  */</comment>
  <if pos:line="5603" pos:column="3">if <condition pos:line="5603" pos:column="6">(<expr><name pos:line="5603" pos:column="7">cflags<pos:position pos:line="5603" pos:column="13"/></name> <operator pos:line="5603" pos:column="14">&amp;<pos:position pos:line="5603" pos:column="19"/></operator> <name pos:line="5603" pos:column="16">REG_NEWLINE<pos:position pos:line="5603" pos:column="27"/></name></expr>)<pos:position pos:line="5603" pos:column="28"/></condition><then pos:line="5603" pos:column="28">
    <block pos:line="5604" pos:column="5">{ <comment type="block" pos:line="5604" pos:column="7">/* REG_NEWLINE implies neither . nor [^...] match newline.  */</comment>
      <expr_stmt><expr><name pos:line="5605" pos:column="7">syntax<pos:position pos:line="5605" pos:column="13"/></name> <operator pos:line="5605" pos:column="14">&amp;=<pos:position pos:line="5605" pos:column="20"/></operator> <operator pos:line="5605" pos:column="17">~<pos:position pos:line="5605" pos:column="18"/></operator><name pos:line="5605" pos:column="18">RE_DOT_NEWLINE<pos:position pos:line="5605" pos:column="32"/></name></expr>;<pos:position pos:line="5605" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name pos:line="5606" pos:column="7">syntax<pos:position pos:line="5606" pos:column="13"/></name> <operator pos:line="5606" pos:column="14">|=<pos:position pos:line="5606" pos:column="16"/></operator> <name pos:line="5606" pos:column="17">RE_HAT_LISTS_NOT_NEWLINE<pos:position pos:line="5606" pos:column="41"/></name></expr>;<pos:position pos:line="5606" pos:column="42"/></expr_stmt>
      <comment type="block" pos:line="5607" pos:column="7">/* It also changes the matching behavior.  */</comment>
      <expr_stmt><expr><name><name pos:line="5608" pos:column="7">preg<pos:position pos:line="5608" pos:column="11"/></name><operator pos:line="5608" pos:column="11">-&gt;<pos:position pos:line="5608" pos:column="16"/></operator><name pos:line="5608" pos:column="13">newline_anchor<pos:position pos:line="5608" pos:column="27"/></name></name> <operator pos:line="5608" pos:column="28">=<pos:position pos:line="5608" pos:column="29"/></operator> <literal type="number" pos:line="5608" pos:column="30">1<pos:position pos:line="5608" pos:column="31"/></literal></expr>;<pos:position pos:line="5608" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="5609" pos:column="6"/></block></then>
  <else pos:line="5610" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="5611" pos:column="5">preg<pos:position pos:line="5611" pos:column="9"/></name><operator pos:line="5611" pos:column="9">-&gt;<pos:position pos:line="5611" pos:column="14"/></operator><name pos:line="5611" pos:column="11">newline_anchor<pos:position pos:line="5611" pos:column="25"/></name></name> <operator pos:line="5611" pos:column="26">=<pos:position pos:line="5611" pos:column="27"/></operator> <literal type="number" pos:line="5611" pos:column="28">0<pos:position pos:line="5611" pos:column="29"/></literal></expr>;<pos:position pos:line="5611" pos:column="30"/></expr_stmt></block></else></if>

  <expr_stmt><expr><name><name pos:line="5613" pos:column="3">preg<pos:position pos:line="5613" pos:column="7"/></name><operator pos:line="5613" pos:column="7">-&gt;<pos:position pos:line="5613" pos:column="12"/></operator><name pos:line="5613" pos:column="9">no_sub<pos:position pos:line="5613" pos:column="15"/></name></name> <operator pos:line="5613" pos:column="16">=<pos:position pos:line="5613" pos:column="17"/></operator> <operator pos:line="5613" pos:column="18">!<pos:position pos:line="5613" pos:column="19"/></operator><operator pos:line="5613" pos:column="19">!<pos:position pos:line="5613" pos:column="20"/></operator><operator pos:line="5613" pos:column="20">(<pos:position pos:line="5613" pos:column="21"/></operator><name pos:line="5613" pos:column="21">cflags<pos:position pos:line="5613" pos:column="27"/></name> <operator pos:line="5613" pos:column="28">&amp;<pos:position pos:line="5613" pos:column="33"/></operator> <name pos:line="5613" pos:column="30">REG_NOSUB<pos:position pos:line="5613" pos:column="39"/></name><operator pos:line="5613" pos:column="39">)<pos:position pos:line="5613" pos:column="40"/></operator></expr>;<pos:position pos:line="5613" pos:column="41"/></expr_stmt>

  <comment type="block" pos:line="5615" pos:column="3">/* POSIX says a null character in the pattern terminates it, so we
     can use strlen here in compiling the pattern.  */</comment>
  <expr_stmt><expr><name pos:line="5617" pos:column="3">ret<pos:position pos:line="5617" pos:column="6"/></name> <operator pos:line="5617" pos:column="7">=<pos:position pos:line="5617" pos:column="8"/></operator> <call><name pos:line="5617" pos:column="9">regex_compile<pos:position pos:line="5617" pos:column="22"/></name> <argument_list pos:line="5617" pos:column="23">(<argument><expr><name pos:line="5617" pos:column="24">pattern<pos:position pos:line="5617" pos:column="31"/></name></expr></argument>, <argument><expr><call><name pos:line="5617" pos:column="33">strlen<pos:position pos:line="5617" pos:column="39"/></name> <argument_list pos:line="5617" pos:column="40">(<argument><expr><name pos:line="5617" pos:column="41">pattern<pos:position pos:line="5617" pos:column="48"/></name></expr></argument>)<pos:position pos:line="5617" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="5617" pos:column="51">syntax<pos:position pos:line="5617" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="5617" pos:column="59">preg<pos:position pos:line="5617" pos:column="63"/></name></expr></argument>)<pos:position pos:line="5617" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="5617" pos:column="65"/></expr_stmt>

  <comment type="block" pos:line="5619" pos:column="3">/* POSIX doesn't distinguish between an unmatched open-group and an
     unmatched close-group: both are REG_EPAREN.  */</comment>
  <if pos:line="5621" pos:column="3">if <condition pos:line="5621" pos:column="6">(<expr><name pos:line="5621" pos:column="7">ret<pos:position pos:line="5621" pos:column="10"/></name> <operator pos:line="5621" pos:column="11">==<pos:position pos:line="5621" pos:column="13"/></operator> <name pos:line="5621" pos:column="14">REG_ERPAREN<pos:position pos:line="5621" pos:column="25"/></name></expr>)<pos:position pos:line="5621" pos:column="26"/></condition><then pos:line="5621" pos:column="26"> <block type="pseudo"><expr_stmt><expr><name pos:line="5621" pos:column="27">ret<pos:position pos:line="5621" pos:column="30"/></name> <operator pos:line="5621" pos:column="31">=<pos:position pos:line="5621" pos:column="32"/></operator> <name pos:line="5621" pos:column="33">REG_EPAREN<pos:position pos:line="5621" pos:column="43"/></name></expr>;<pos:position pos:line="5621" pos:column="44"/></expr_stmt></block></then></if>

  <return pos:line="5623" pos:column="3">return <expr><operator pos:line="5623" pos:column="10">(<pos:position pos:line="5623" pos:column="11"/></operator><name pos:line="5623" pos:column="11">int<pos:position pos:line="5623" pos:column="14"/></name><operator pos:line="5623" pos:column="14">)<pos:position pos:line="5623" pos:column="15"/></operator> <name pos:line="5623" pos:column="16">ret<pos:position pos:line="5623" pos:column="19"/></name></expr>;<pos:position pos:line="5623" pos:column="20"/></return>
}<pos:position pos:line="5624" pos:column="2"/></block></function>


