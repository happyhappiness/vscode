<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1263_mutt-1.4.2.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">imap_fetch_message<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">MESSAGE<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">msg<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">CONTEXT<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">ctx<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">msgno<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">IMAP_DATA<pos:position pos:line="3" pos:column="12"/></name><modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier></type> <name pos:line="3" pos:column="14">idata<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">HEADER<pos:position pos:line="4" pos:column="9"/></name><modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type> <name pos:line="4" pos:column="11">h<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">buf<pos:position pos:line="5" pos:column="11"/></name><index pos:line="5" pos:column="11">[<expr><name pos:line="5" pos:column="12">LONG_STRING<pos:position pos:line="5" pos:column="23"/></name></expr>]<pos:position pos:line="5" pos:column="24"/></index></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">path<pos:position pos:line="6" pos:column="12"/></name><index pos:line="6" pos:column="12">[<expr><name pos:line="6" pos:column="13">_POSIX_PATH_MAX<pos:position pos:line="6" pos:column="28"/></name></expr>]<pos:position pos:line="6" pos:column="29"/></index></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">pc<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">long<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">bytes<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">uid<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">cacheno<pos:position pos:line="10" pos:column="14"/></name></decl>;<pos:position pos:line="10" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">IMAP_CACHE<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">cache<pos:position pos:line="11" pos:column="20"/></name></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">read<pos:position pos:line="12" pos:column="11"/></name></decl>;<pos:position pos:line="12" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">rc<pos:position pos:line="13" pos:column="9"/></name></decl>;<pos:position pos:line="13" pos:column="10"/></decl_stmt>
  <comment type="block" pos:line="14" pos:column="3">/* Sam's weird courier server returns an OK response even when FETCH
   * fails. Thanks Sam. */</comment>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">short<pos:position pos:line="16" pos:column="8"/></name></type> <name pos:line="16" pos:column="9">fetched<pos:position pos:line="16" pos:column="16"/></name> <init pos:line="16" pos:column="17">= <expr><literal type="number" pos:line="16" pos:column="19">0<pos:position pos:line="16" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><name pos:line="18" pos:column="3">idata<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <operator pos:line="18" pos:column="11">(<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">IMAP_DATA<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">*<pos:position pos:line="18" pos:column="22"/></operator><operator pos:line="18" pos:column="22">)<pos:position pos:line="18" pos:column="23"/></operator> <name><name pos:line="18" pos:column="24">ctx<pos:position pos:line="18" pos:column="27"/></name><operator pos:line="18" pos:column="27">-&gt;<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="29">data<pos:position pos:line="18" pos:column="33"/></name></name></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="19" pos:column="3">h<pos:position pos:line="19" pos:column="4"/></name> <operator pos:line="19" pos:column="5">=<pos:position pos:line="19" pos:column="6"/></operator> <name><name pos:line="19" pos:column="7">ctx<pos:position pos:line="19" pos:column="10"/></name><operator pos:line="19" pos:column="10">-&gt;<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="12">hdrs<pos:position pos:line="19" pos:column="16"/></name><index pos:line="19" pos:column="16">[<expr><name pos:line="19" pos:column="17">msgno<pos:position pos:line="19" pos:column="22"/></name></expr>]<pos:position pos:line="19" pos:column="23"/></index></name></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="21" pos:column="3">/* see if we already have the message in our cache */</comment>
  <expr_stmt><expr><name pos:line="22" pos:column="3">cacheno<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">=<pos:position pos:line="22" pos:column="12"/></operator> <call><name pos:line="22" pos:column="13">HEADER_DATA<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><name pos:line="22" pos:column="25">h<pos:position pos:line="22" pos:column="26"/></name></expr></argument>)<pos:position pos:line="22" pos:column="27"/></argument_list></call><operator pos:line="22" pos:column="27">-&gt;<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="29">uid<pos:position pos:line="22" pos:column="32"/></name> <operator pos:line="22" pos:column="33">%<pos:position pos:line="22" pos:column="34"/></operator> <name pos:line="22" pos:column="35">IMAP_CACHE_LEN<pos:position pos:line="22" pos:column="49"/></name></expr>;<pos:position pos:line="22" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><name pos:line="23" pos:column="3">cache<pos:position pos:line="23" pos:column="8"/></name> <operator pos:line="23" pos:column="9">=<pos:position pos:line="23" pos:column="10"/></operator> <operator pos:line="23" pos:column="11">&amp;<pos:position pos:line="23" pos:column="16"/></operator><name><name pos:line="23" pos:column="12">idata<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">-&gt;<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="19">cache<pos:position pos:line="23" pos:column="24"/></name><index pos:line="23" pos:column="24">[<expr><name pos:line="23" pos:column="25">cacheno<pos:position pos:line="23" pos:column="32"/></name></expr>]<pos:position pos:line="23" pos:column="33"/></index></name></expr>;<pos:position pos:line="23" pos:column="34"/></expr_stmt>

  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><name><name pos:line="25" pos:column="7">cache<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">-&gt;<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="14">path<pos:position pos:line="25" pos:column="18"/></name></name></expr>)<pos:position pos:line="25" pos:column="19"/></condition><then pos:line="25" pos:column="19">
  <block pos:line="26" pos:column="3">{
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name><name pos:line="27" pos:column="9">cache<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">-&gt;<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="16">uid<pos:position pos:line="27" pos:column="19"/></name></name> <operator pos:line="27" pos:column="20">==<pos:position pos:line="27" pos:column="22"/></operator> <call><name pos:line="27" pos:column="23">HEADER_DATA<pos:position pos:line="27" pos:column="34"/></name><argument_list pos:line="27" pos:column="34">(<argument><expr><name pos:line="27" pos:column="35">h<pos:position pos:line="27" pos:column="36"/></name></expr></argument>)<pos:position pos:line="27" pos:column="37"/></argument_list></call><operator pos:line="27" pos:column="37">-&gt;<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="39">uid<pos:position pos:line="27" pos:column="42"/></name></expr>)<pos:position pos:line="27" pos:column="43"/></condition><then pos:line="27" pos:column="43">
    <block pos:line="28" pos:column="5">{
      <comment type="block" pos:line="29" pos:column="7">/* yes, so just return a pointer to the message */</comment>
      <if pos:line="30" pos:column="7">if <condition pos:line="30" pos:column="10">(<expr><operator pos:line="30" pos:column="11">!<pos:position pos:line="30" pos:column="12"/></operator><operator pos:line="30" pos:column="12">(<pos:position pos:line="30" pos:column="13"/></operator><name><name pos:line="30" pos:column="13">msg<pos:position pos:line="30" pos:column="16"/></name><operator pos:line="30" pos:column="16">-&gt;<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="18">fp<pos:position pos:line="30" pos:column="20"/></name></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <call><name pos:line="30" pos:column="23">fopen<pos:position pos:line="30" pos:column="28"/></name> <argument_list pos:line="30" pos:column="29">(<argument><expr><name><name pos:line="30" pos:column="30">cache<pos:position pos:line="30" pos:column="35"/></name><operator pos:line="30" pos:column="35">-&gt;<pos:position pos:line="30" pos:column="40"/></operator><name pos:line="30" pos:column="37">path<pos:position pos:line="30" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="43">"r"<pos:position pos:line="30" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="47"/></argument_list></call><operator pos:line="30" pos:column="47">)<pos:position pos:line="30" pos:column="48"/></operator></expr>)<pos:position pos:line="30" pos:column="49"/></condition><then pos:line="30" pos:column="49">
      <block pos:line="31" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">mutt_perror<pos:position pos:line="32" pos:column="20"/></name> <argument_list pos:line="32" pos:column="21">(<argument><expr><name><name pos:line="32" pos:column="22">cache<pos:position pos:line="32" pos:column="27"/></name><operator pos:line="32" pos:column="27">-&gt;<pos:position pos:line="32" pos:column="32"/></operator><name pos:line="32" pos:column="29">path<pos:position pos:line="32" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="35"/></expr_stmt>
	<return pos:line="33" pos:column="9">return <expr><operator pos:line="33" pos:column="16">(<pos:position pos:line="33" pos:column="17"/></operator><operator pos:line="33" pos:column="17">-<pos:position pos:line="33" pos:column="18"/></operator><literal type="number" pos:line="33" pos:column="18">1<pos:position pos:line="33" pos:column="19"/></literal><operator pos:line="33" pos:column="19">)<pos:position pos:line="33" pos:column="20"/></operator></expr>;<pos:position pos:line="33" pos:column="21"/></return>
      }<pos:position pos:line="34" pos:column="8"/></block></then></if>
      <return pos:line="35" pos:column="7">return <expr><literal type="number" pos:line="35" pos:column="14">0<pos:position pos:line="35" pos:column="15"/></literal></expr>;<pos:position pos:line="35" pos:column="16"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></then>
    <else pos:line="37" pos:column="5">else
    <block pos:line="38" pos:column="5">{
      <comment type="block" pos:line="39" pos:column="7">/* clear the previous entry */</comment>
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">unlink<pos:position pos:line="40" pos:column="13"/></name> <argument_list pos:line="40" pos:column="14">(<argument><expr><name><name pos:line="40" pos:column="15">cache<pos:position pos:line="40" pos:column="20"/></name><operator pos:line="40" pos:column="20">-&gt;<pos:position pos:line="40" pos:column="25"/></operator><name pos:line="40" pos:column="22">path<pos:position pos:line="40" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="41" pos:column="7">FREE<pos:position pos:line="41" pos:column="11"/></name> <argument_list pos:line="41" pos:column="12">(<argument><expr><operator pos:line="41" pos:column="13">&amp;<pos:position pos:line="41" pos:column="18"/></operator><name><name pos:line="41" pos:column="14">cache<pos:position pos:line="41" pos:column="19"/></name><operator pos:line="41" pos:column="19">-&gt;<pos:position pos:line="41" pos:column="24"/></operator><name pos:line="41" pos:column="21">path<pos:position pos:line="41" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></else></if>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if>

  <if pos:line="45" pos:column="3">if <condition pos:line="45" pos:column="6">(<expr><operator pos:line="45" pos:column="7">!<pos:position pos:line="45" pos:column="8"/></operator><call><name pos:line="45" pos:column="8">isendwin<pos:position pos:line="45" pos:column="16"/></name><argument_list pos:line="45" pos:column="16">()<pos:position pos:line="45" pos:column="18"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="19"/></condition><then pos:line="45" pos:column="19">
    <block type="pseudo"><decl_stmt><decl><type><name pos:line="46" pos:column="5">mutt_message<pos:position pos:line="46" pos:column="17"/></name></type> <name pos:line="46" pos:column="18">_<pos:position pos:line="46" pos:column="19"/></name><argument_list pos:line="46" pos:column="19">(<argument><expr><literal type="string" pos:line="46" pos:column="20">"Fetching message..."<pos:position pos:line="46" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="42"/></argument_list></decl>;<pos:position pos:line="46" pos:column="43"/></decl_stmt></block></then></if>

  <expr_stmt><expr><name><name pos:line="48" pos:column="3">cache<pos:position pos:line="48" pos:column="8"/></name><operator pos:line="48" pos:column="8">-&gt;<pos:position pos:line="48" pos:column="13"/></operator><name pos:line="48" pos:column="10">uid<pos:position pos:line="48" pos:column="13"/></name></name> <operator pos:line="48" pos:column="14">=<pos:position pos:line="48" pos:column="15"/></operator> <call><name pos:line="48" pos:column="16">HEADER_DATA<pos:position pos:line="48" pos:column="27"/></name><argument_list pos:line="48" pos:column="27">(<argument><expr><name pos:line="48" pos:column="28">h<pos:position pos:line="48" pos:column="29"/></name></expr></argument>)<pos:position pos:line="48" pos:column="30"/></argument_list></call><operator pos:line="48" pos:column="30">-&gt;<pos:position pos:line="48" pos:column="35"/></operator><name pos:line="48" pos:column="32">uid<pos:position pos:line="48" pos:column="35"/></name></expr>;<pos:position pos:line="48" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="49" pos:column="3">mutt_mktemp<pos:position pos:line="49" pos:column="14"/></name> <argument_list pos:line="49" pos:column="15">(<argument><expr><name pos:line="49" pos:column="16">path<pos:position pos:line="49" pos:column="20"/></name></expr></argument>)<pos:position pos:line="49" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="50" pos:column="3">cache<pos:position pos:line="50" pos:column="8"/></name><operator pos:line="50" pos:column="8">-&gt;<pos:position pos:line="50" pos:column="13"/></operator><name pos:line="50" pos:column="10">path<pos:position pos:line="50" pos:column="14"/></name></name> <operator pos:line="50" pos:column="15">=<pos:position pos:line="50" pos:column="16"/></operator> <call><name pos:line="50" pos:column="17">safe_strdup<pos:position pos:line="50" pos:column="28"/></name> <argument_list pos:line="50" pos:column="29">(<argument><expr><name pos:line="50" pos:column="30">path<pos:position pos:line="50" pos:column="34"/></name></expr></argument>)<pos:position pos:line="50" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="36"/></expr_stmt>
  <if pos:line="51" pos:column="3">if <condition pos:line="51" pos:column="6">(<expr><operator pos:line="51" pos:column="7">!<pos:position pos:line="51" pos:column="8"/></operator><operator pos:line="51" pos:column="8">(<pos:position pos:line="51" pos:column="9"/></operator><name><name pos:line="51" pos:column="9">msg<pos:position pos:line="51" pos:column="12"/></name><operator pos:line="51" pos:column="12">-&gt;<pos:position pos:line="51" pos:column="17"/></operator><name pos:line="51" pos:column="14">fp<pos:position pos:line="51" pos:column="16"/></name></name> <operator pos:line="51" pos:column="17">=<pos:position pos:line="51" pos:column="18"/></operator> <call><name pos:line="51" pos:column="19">safe_fopen<pos:position pos:line="51" pos:column="29"/></name> <argument_list pos:line="51" pos:column="30">(<argument><expr><name pos:line="51" pos:column="31">path<pos:position pos:line="51" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="37">"w+"<pos:position pos:line="51" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="42"/></argument_list></call><operator pos:line="51" pos:column="42">)<pos:position pos:line="51" pos:column="43"/></operator></expr>)<pos:position pos:line="51" pos:column="44"/></condition><then pos:line="51" pos:column="44">
  <block pos:line="52" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">safe_free<pos:position pos:line="53" pos:column="14"/></name> <argument_list pos:line="53" pos:column="15">(<argument><expr><operator pos:line="53" pos:column="16">(<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="17">void<pos:position pos:line="53" pos:column="21"/></name><operator pos:line="53" pos:column="21">*<pos:position pos:line="53" pos:column="22"/></operator><operator pos:line="53" pos:column="22">*<pos:position pos:line="53" pos:column="23"/></operator><operator pos:line="53" pos:column="23">)<pos:position pos:line="53" pos:column="24"/></operator> <operator pos:line="53" pos:column="25">&amp;<pos:position pos:line="53" pos:column="30"/></operator><name><name pos:line="53" pos:column="26">cache<pos:position pos:line="53" pos:column="31"/></name><operator pos:line="53" pos:column="31">-&gt;<pos:position pos:line="53" pos:column="36"/></operator><name pos:line="53" pos:column="33">path<pos:position pos:line="53" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="39"/></expr_stmt>
    <return pos:line="54" pos:column="5">return <expr><operator pos:line="54" pos:column="12">-<pos:position pos:line="54" pos:column="13"/></operator><literal type="number" pos:line="54" pos:column="13">1<pos:position pos:line="54" pos:column="14"/></literal></expr>;<pos:position pos:line="54" pos:column="15"/></return>
  }<pos:position pos:line="55" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="57" pos:column="3">/* mark this header as currently inactive so the command handler won't
   * also try to update it. HACK until all this code can be moved into the
   * command handler */</comment>
  <expr_stmt><expr><name><name pos:line="60" pos:column="3">h<pos:position pos:line="60" pos:column="4"/></name><operator pos:line="60" pos:column="4">-&gt;<pos:position pos:line="60" pos:column="9"/></operator><name pos:line="60" pos:column="6">active<pos:position pos:line="60" pos:column="12"/></name></name> <operator pos:line="60" pos:column="13">=<pos:position pos:line="60" pos:column="14"/></operator> <literal type="number" pos:line="60" pos:column="15">0<pos:position pos:line="60" pos:column="16"/></literal></expr>;<pos:position pos:line="60" pos:column="17"/></expr_stmt>
  
  <expr_stmt><expr><call><name pos:line="62" pos:column="3">snprintf<pos:position pos:line="62" pos:column="11"/></name> <argument_list pos:line="62" pos:column="12">(<argument><expr><name pos:line="62" pos:column="13">buf<pos:position pos:line="62" pos:column="16"/></name></expr></argument>, <argument><expr><sizeof pos:line="62" pos:column="18">sizeof <argument_list pos:line="62" pos:column="25">(<argument><expr><name pos:line="62" pos:column="26">buf<pos:position pos:line="62" pos:column="29"/></name></expr></argument>)<pos:position pos:line="62" pos:column="30"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="32">"UID FETCH %d %s"<pos:position pos:line="62" pos:column="49"/></literal></expr></argument>, <argument><expr><call><name pos:line="62" pos:column="51">HEADER_DATA<pos:position pos:line="62" pos:column="62"/></name><argument_list pos:line="62" pos:column="62">(<argument><expr><name pos:line="62" pos:column="63">h<pos:position pos:line="62" pos:column="64"/></name></expr></argument>)<pos:position pos:line="62" pos:column="65"/></argument_list></call><operator pos:line="62" pos:column="65">-&gt;<pos:position pos:line="62" pos:column="70"/></operator><name pos:line="62" pos:column="67">uid<pos:position pos:line="62" pos:column="70"/></name></expr></argument>,
	    <argument><expr><operator pos:line="63" pos:column="13">(<pos:position pos:line="63" pos:column="14"/></operator><ternary><condition><expr><call><name pos:line="63" pos:column="14">mutt_bit_isset<pos:position pos:line="63" pos:column="28"/></name> <argument_list pos:line="63" pos:column="29">(<argument><expr><name><name pos:line="63" pos:column="30">idata<pos:position pos:line="63" pos:column="35"/></name><operator pos:line="63" pos:column="35">-&gt;<pos:position pos:line="63" pos:column="40"/></operator><name pos:line="63" pos:column="37">capabilities<pos:position pos:line="63" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="51">IMAP4REV1<pos:position pos:line="63" pos:column="60"/></name></expr></argument>)<pos:position pos:line="63" pos:column="61"/></argument_list></call></expr> ?<pos:position pos:line="63" pos:column="63"/></condition><then pos:line="63" pos:column="63">
	     <expr><operator pos:line="64" pos:column="14">(<pos:position pos:line="64" pos:column="15"/></operator><ternary><condition><expr><call><name pos:line="64" pos:column="15">option<pos:position pos:line="64" pos:column="21"/></name> <argument_list pos:line="64" pos:column="22">(<argument><expr><name pos:line="64" pos:column="23">OPTIMAPPEEK<pos:position pos:line="64" pos:column="34"/></name></expr></argument>)<pos:position pos:line="64" pos:column="35"/></argument_list></call></expr> ?<pos:position pos:line="64" pos:column="37"/></condition><then pos:line="64" pos:column="37"> <expr><literal type="string" pos:line="64" pos:column="38">"BODY.PEEK[]"<pos:position pos:line="64" pos:column="51"/></literal></expr> <pos:position pos:line="64" pos:column="52"/></then><else pos:line="64" pos:column="52">: <expr><literal type="string" pos:line="64" pos:column="54">"BODY[]"<pos:position pos:line="64" pos:column="62"/></literal></expr></else></ternary><operator pos:line="64" pos:column="62">)<pos:position pos:line="64" pos:column="63"/></operator></expr> <pos:position pos:line="64" pos:column="64"/></then><else pos:line="64" pos:column="64">:
	     <expr><literal type="string" pos:line="65" pos:column="14">"RFC822"<pos:position pos:line="65" pos:column="22"/></literal></expr></else></ternary><operator pos:line="65" pos:column="22">)<pos:position pos:line="65" pos:column="23"/></operator></expr></argument>)<pos:position pos:line="65" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="25"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="67" pos:column="3">imap_cmd_start<pos:position pos:line="67" pos:column="17"/></name> <argument_list pos:line="67" pos:column="18">(<argument><expr><name pos:line="67" pos:column="19">idata<pos:position pos:line="67" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="26">buf<pos:position pos:line="67" pos:column="29"/></name></expr></argument>)<pos:position pos:line="67" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="31"/></expr_stmt>
  <do pos:line="68" pos:column="3">do
  <block pos:line="69" pos:column="3">{
    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><operator pos:line="70" pos:column="9">(<pos:position pos:line="70" pos:column="10"/></operator><name pos:line="70" pos:column="10">rc<pos:position pos:line="70" pos:column="12"/></name> <operator pos:line="70" pos:column="13">=<pos:position pos:line="70" pos:column="14"/></operator> <call><name pos:line="70" pos:column="15">imap_cmd_step<pos:position pos:line="70" pos:column="28"/></name> <argument_list pos:line="70" pos:column="29">(<argument><expr><name pos:line="70" pos:column="30">idata<pos:position pos:line="70" pos:column="35"/></name></expr></argument>)<pos:position pos:line="70" pos:column="36"/></argument_list></call><operator pos:line="70" pos:column="36">)<pos:position pos:line="70" pos:column="37"/></operator> <operator pos:line="70" pos:column="38">!=<pos:position pos:line="70" pos:column="40"/></operator> <name pos:line="70" pos:column="41">IMAP_CMD_CONTINUE<pos:position pos:line="70" pos:column="58"/></name></expr>)<pos:position pos:line="70" pos:column="59"/></condition><then pos:line="70" pos:column="59">
      <block type="pseudo"><break pos:line="71" pos:column="7">break;<pos:position pos:line="71" pos:column="13"/></break></block></then></if>

    <expr_stmt><expr><name pos:line="73" pos:column="5">pc<pos:position pos:line="73" pos:column="7"/></name> <operator pos:line="73" pos:column="8">=<pos:position pos:line="73" pos:column="9"/></operator> <name><name pos:line="73" pos:column="10">idata<pos:position pos:line="73" pos:column="15"/></name><operator pos:line="73" pos:column="15">-&gt;<pos:position pos:line="73" pos:column="20"/></operator><name pos:line="73" pos:column="17">cmd<pos:position pos:line="73" pos:column="20"/></name><operator pos:line="73" pos:column="20">.<pos:position pos:line="73" pos:column="21"/></operator><name pos:line="73" pos:column="21">buf<pos:position pos:line="73" pos:column="24"/></name></name></expr>;<pos:position pos:line="73" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="74" pos:column="5">pc<pos:position pos:line="74" pos:column="7"/></name> <operator pos:line="74" pos:column="8">=<pos:position pos:line="74" pos:column="9"/></operator> <call><name pos:line="74" pos:column="10">imap_next_word<pos:position pos:line="74" pos:column="24"/></name> <argument_list pos:line="74" pos:column="25">(<argument><expr><name pos:line="74" pos:column="26">pc<pos:position pos:line="74" pos:column="28"/></name></expr></argument>)<pos:position pos:line="74" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name pos:line="75" pos:column="5">pc<pos:position pos:line="75" pos:column="7"/></name> <operator pos:line="75" pos:column="8">=<pos:position pos:line="75" pos:column="9"/></operator> <call><name pos:line="75" pos:column="10">imap_next_word<pos:position pos:line="75" pos:column="24"/></name> <argument_list pos:line="75" pos:column="25">(<argument><expr><name pos:line="75" pos:column="26">pc<pos:position pos:line="75" pos:column="28"/></name></expr></argument>)<pos:position pos:line="75" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="30"/></expr_stmt>

    <if pos:line="77" pos:column="5">if <condition pos:line="77" pos:column="8">(<expr><operator pos:line="77" pos:column="9">!<pos:position pos:line="77" pos:column="10"/></operator><call><name pos:line="77" pos:column="10">ascii_strncasecmp<pos:position pos:line="77" pos:column="27"/></name> <argument_list pos:line="77" pos:column="28">(<argument><expr><literal type="string" pos:line="77" pos:column="29">"FETCH"<pos:position pos:line="77" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="38">pc<pos:position pos:line="77" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="77" pos:column="42">5<pos:position pos:line="77" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="45"/></condition><then pos:line="77" pos:column="45">
    <block pos:line="78" pos:column="5">{
      <while pos:line="79" pos:column="7">while <condition pos:line="79" pos:column="13">(<expr><operator pos:line="79" pos:column="14">*<pos:position pos:line="79" pos:column="15"/></operator><name pos:line="79" pos:column="15">pc<pos:position pos:line="79" pos:column="17"/></name></expr>)<pos:position pos:line="79" pos:column="18"/></condition>
      <block pos:line="80" pos:column="7">{
	<expr_stmt><expr><name pos:line="81" pos:column="9">pc<pos:position pos:line="81" pos:column="11"/></name> <operator pos:line="81" pos:column="12">=<pos:position pos:line="81" pos:column="13"/></operator> <call><name pos:line="81" pos:column="14">imap_next_word<pos:position pos:line="81" pos:column="28"/></name> <argument_list pos:line="81" pos:column="29">(<argument><expr><name pos:line="81" pos:column="30">pc<pos:position pos:line="81" pos:column="32"/></name></expr></argument>)<pos:position pos:line="81" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="34"/></expr_stmt>
	<if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><name><name pos:line="82" pos:column="13">pc<pos:position pos:line="82" pos:column="15"/></name><index pos:line="82" pos:column="15">[<expr><literal type="number" pos:line="82" pos:column="16">0<pos:position pos:line="82" pos:column="17"/></literal></expr>]<pos:position pos:line="82" pos:column="18"/></index></name> <operator pos:line="82" pos:column="19">==<pos:position pos:line="82" pos:column="21"/></operator> <literal type="char" pos:line="82" pos:column="22">'('<pos:position pos:line="82" pos:column="25"/></literal></expr>)<pos:position pos:line="82" pos:column="26"/></condition><then pos:line="82" pos:column="26">
	  <block type="pseudo"><expr_stmt><expr><name pos:line="83" pos:column="11">pc<pos:position pos:line="83" pos:column="13"/></name><operator pos:line="83" pos:column="13">++<pos:position pos:line="83" pos:column="15"/></operator></expr>;<pos:position pos:line="83" pos:column="16"/></expr_stmt></block></then></if>
	<if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><call><name pos:line="84" pos:column="13">ascii_strncasecmp<pos:position pos:line="84" pos:column="30"/></name> <argument_list pos:line="84" pos:column="31">(<argument><expr><literal type="string" pos:line="84" pos:column="32">"UID"<pos:position pos:line="84" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="84" pos:column="39">pc<pos:position pos:line="84" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="84" pos:column="43">3<pos:position pos:line="84" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="45"/></argument_list></call> <operator pos:line="84" pos:column="46">==<pos:position pos:line="84" pos:column="48"/></operator> <literal type="number" pos:line="84" pos:column="49">0<pos:position pos:line="84" pos:column="50"/></literal></expr>)<pos:position pos:line="84" pos:column="51"/></condition><then pos:line="84" pos:column="51">
	<block pos:line="85" pos:column="9">{
	  <expr_stmt><expr><name pos:line="86" pos:column="11">pc<pos:position pos:line="86" pos:column="13"/></name> <operator pos:line="86" pos:column="14">=<pos:position pos:line="86" pos:column="15"/></operator> <call><name pos:line="86" pos:column="16">imap_next_word<pos:position pos:line="86" pos:column="30"/></name> <argument_list pos:line="86" pos:column="31">(<argument><expr><name pos:line="86" pos:column="32">pc<pos:position pos:line="86" pos:column="34"/></name></expr></argument>)<pos:position pos:line="86" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="36"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="87" pos:column="11">uid<pos:position pos:line="87" pos:column="14"/></name> <operator pos:line="87" pos:column="15">=<pos:position pos:line="87" pos:column="16"/></operator> <call><name pos:line="87" pos:column="17">atoi<pos:position pos:line="87" pos:column="21"/></name> <argument_list pos:line="87" pos:column="22">(<argument><expr><name pos:line="87" pos:column="23">pc<pos:position pos:line="87" pos:column="25"/></name></expr></argument>)<pos:position pos:line="87" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="27"/></expr_stmt>
	  <if pos:line="88" pos:column="11">if <condition pos:line="88" pos:column="14">(<expr><name pos:line="88" pos:column="15">uid<pos:position pos:line="88" pos:column="18"/></name> <operator pos:line="88" pos:column="19">!=<pos:position pos:line="88" pos:column="21"/></operator> <call><name pos:line="88" pos:column="22">HEADER_DATA<pos:position pos:line="88" pos:column="33"/></name><argument_list pos:line="88" pos:column="33">(<argument><expr><name pos:line="88" pos:column="34">h<pos:position pos:line="88" pos:column="35"/></name></expr></argument>)<pos:position pos:line="88" pos:column="36"/></argument_list></call><operator pos:line="88" pos:column="36">-&gt;<pos:position pos:line="88" pos:column="41"/></operator><name pos:line="88" pos:column="38">uid<pos:position pos:line="88" pos:column="41"/></name></expr>)<pos:position pos:line="88" pos:column="42"/></condition><then pos:line="88" pos:column="42">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="89" pos:column="13">mutt_error<pos:position pos:line="89" pos:column="23"/></name> <argument_list pos:line="89" pos:column="24">(<argument><expr><call><name pos:line="89" pos:column="25">_<pos:position pos:line="89" pos:column="26"/></name><argument_list pos:line="89" pos:column="26">(<argument><expr><literal type="string" pos:line="89" pos:column="27">"The message index is incorrect. Try reopening the mailbox."<pos:position pos:line="89" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="89" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="90"/></expr_stmt></block></then></if>
	}<pos:position pos:line="90" pos:column="10"/></block></then>
	<elseif pos:line="91" pos:column="9">else <if pos:line="91" pos:column="14">if <condition pos:line="91" pos:column="17">(<expr><operator pos:line="91" pos:column="18">(<pos:position pos:line="91" pos:column="19"/></operator><call><name pos:line="91" pos:column="19">ascii_strncasecmp<pos:position pos:line="91" pos:column="36"/></name> <argument_list pos:line="91" pos:column="37">(<argument><expr><literal type="string" pos:line="91" pos:column="38">"RFC822"<pos:position pos:line="91" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="91" pos:column="48">pc<pos:position pos:line="91" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="91" pos:column="52">6<pos:position pos:line="91" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="54"/></argument_list></call> <operator pos:line="91" pos:column="55">==<pos:position pos:line="91" pos:column="57"/></operator> <literal type="number" pos:line="91" pos:column="58">0<pos:position pos:line="91" pos:column="59"/></literal><operator pos:line="91" pos:column="59">)<pos:position pos:line="91" pos:column="60"/></operator> <operator pos:line="91" pos:column="61">||<pos:position pos:line="91" pos:column="63"/></operator>
		 <operator pos:line="92" pos:column="18">(<pos:position pos:line="92" pos:column="19"/></operator><call><name pos:line="92" pos:column="19">ascii_strncasecmp<pos:position pos:line="92" pos:column="36"/></name> <argument_list pos:line="92" pos:column="37">(<argument><expr><literal type="string" pos:line="92" pos:column="38">"BODY[]"<pos:position pos:line="92" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="48">pc<pos:position pos:line="92" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="92" pos:column="52">6<pos:position pos:line="92" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="54"/></argument_list></call> <operator pos:line="92" pos:column="55">==<pos:position pos:line="92" pos:column="57"/></operator> <literal type="number" pos:line="92" pos:column="58">0<pos:position pos:line="92" pos:column="59"/></literal><operator pos:line="92" pos:column="59">)<pos:position pos:line="92" pos:column="60"/></operator></expr>)<pos:position pos:line="92" pos:column="61"/></condition><then pos:line="92" pos:column="61">
	<block pos:line="93" pos:column="9">{
	  <expr_stmt><expr><name pos:line="94" pos:column="11">pc<pos:position pos:line="94" pos:column="13"/></name> <operator pos:line="94" pos:column="14">=<pos:position pos:line="94" pos:column="15"/></operator> <call><name pos:line="94" pos:column="16">imap_next_word<pos:position pos:line="94" pos:column="30"/></name> <argument_list pos:line="94" pos:column="31">(<argument><expr><name pos:line="94" pos:column="32">pc<pos:position pos:line="94" pos:column="34"/></name></expr></argument>)<pos:position pos:line="94" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="36"/></expr_stmt>
	  <if pos:line="95" pos:column="11">if <condition pos:line="95" pos:column="14">(<expr><call><name pos:line="95" pos:column="15">imap_get_literal_count<pos:position pos:line="95" pos:column="37"/></name><argument_list pos:line="95" pos:column="37">(<argument><expr><name pos:line="95" pos:column="38">pc<pos:position pos:line="95" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="42">&amp;<pos:position pos:line="95" pos:column="47"/></operator><name pos:line="95" pos:column="43">bytes<pos:position pos:line="95" pos:column="48"/></name></expr></argument>)<pos:position pos:line="95" pos:column="49"/></argument_list></call> <operator pos:line="95" pos:column="50">&lt;<pos:position pos:line="95" pos:column="54"/></operator> <literal type="number" pos:line="95" pos:column="52">0<pos:position pos:line="95" pos:column="53"/></literal></expr>)<pos:position pos:line="95" pos:column="54"/></condition><then pos:line="95" pos:column="54">
	  <block pos:line="96" pos:column="11">{
	    <expr_stmt><expr><call><name pos:line="97" pos:column="13">imap_error<pos:position pos:line="97" pos:column="23"/></name> <argument_list pos:line="97" pos:column="24">(<argument><expr><literal type="string" pos:line="97" pos:column="25">"imap_fetch_message()"<pos:position pos:line="97" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="97" pos:column="49">buf<pos:position pos:line="97" pos:column="52"/></name></expr></argument>)<pos:position pos:line="97" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="54"/></expr_stmt>
	    <goto pos:line="98" pos:column="13">goto <name pos:line="98" pos:column="18">bail<pos:position pos:line="98" pos:column="22"/></name>;<pos:position pos:line="98" pos:column="23"/></goto>
	  }<pos:position pos:line="99" pos:column="12"/></block></then></if>
	  <if pos:line="100" pos:column="11">if <condition pos:line="100" pos:column="14">(<expr><call><name pos:line="100" pos:column="15">imap_read_literal<pos:position pos:line="100" pos:column="32"/></name> <argument_list pos:line="100" pos:column="33">(<argument><expr><name><name pos:line="100" pos:column="34">msg<pos:position pos:line="100" pos:column="37"/></name><operator pos:line="100" pos:column="37">-&gt;<pos:position pos:line="100" pos:column="42"/></operator><name pos:line="100" pos:column="39">fp<pos:position pos:line="100" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="43">idata<pos:position pos:line="100" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="50">bytes<pos:position pos:line="100" pos:column="55"/></name></expr></argument>)<pos:position pos:line="100" pos:column="56"/></argument_list></call> <operator pos:line="100" pos:column="57">&lt;<pos:position pos:line="100" pos:column="61"/></operator> <literal type="number" pos:line="100" pos:column="59">0<pos:position pos:line="100" pos:column="60"/></literal></expr>)<pos:position pos:line="100" pos:column="61"/></condition><then pos:line="100" pos:column="61">
	    <block type="pseudo"><goto pos:line="101" pos:column="13">goto <name pos:line="101" pos:column="18">bail<pos:position pos:line="101" pos:column="22"/></name>;<pos:position pos:line="101" pos:column="23"/></goto></block></then></if>
	  <comment type="block" pos:line="102" pos:column="11">/* pick up trailing line */</comment>
	  <if pos:line="103" pos:column="11">if <condition pos:line="103" pos:column="14">(<expr><operator pos:line="103" pos:column="15">(<pos:position pos:line="103" pos:column="16"/></operator><name pos:line="103" pos:column="16">rc<pos:position pos:line="103" pos:column="18"/></name> <operator pos:line="103" pos:column="19">=<pos:position pos:line="103" pos:column="20"/></operator> <call><name pos:line="103" pos:column="21">imap_cmd_step<pos:position pos:line="103" pos:column="34"/></name> <argument_list pos:line="103" pos:column="35">(<argument><expr><name pos:line="103" pos:column="36">idata<pos:position pos:line="103" pos:column="41"/></name></expr></argument>)<pos:position pos:line="103" pos:column="42"/></argument_list></call><operator pos:line="103" pos:column="42">)<pos:position pos:line="103" pos:column="43"/></operator> <operator pos:line="103" pos:column="44">!=<pos:position pos:line="103" pos:column="46"/></operator> <name pos:line="103" pos:column="47">IMAP_CMD_CONTINUE<pos:position pos:line="103" pos:column="64"/></name></expr>)<pos:position pos:line="103" pos:column="65"/></condition><then pos:line="103" pos:column="65">
	    <block type="pseudo"><goto pos:line="104" pos:column="13">goto <name pos:line="104" pos:column="18">bail<pos:position pos:line="104" pos:column="22"/></name>;<pos:position pos:line="104" pos:column="23"/></goto></block></then></if>
	  <expr_stmt><expr><name pos:line="105" pos:column="11">pc<pos:position pos:line="105" pos:column="13"/></name> <operator pos:line="105" pos:column="14">=<pos:position pos:line="105" pos:column="15"/></operator> <name><name pos:line="105" pos:column="16">idata<pos:position pos:line="105" pos:column="21"/></name><operator pos:line="105" pos:column="21">-&gt;<pos:position pos:line="105" pos:column="26"/></operator><name pos:line="105" pos:column="23">cmd<pos:position pos:line="105" pos:column="26"/></name><operator pos:line="105" pos:column="26">.<pos:position pos:line="105" pos:column="27"/></operator><name pos:line="105" pos:column="27">buf<pos:position pos:line="105" pos:column="30"/></name></name></expr>;<pos:position pos:line="105" pos:column="31"/></expr_stmt>

	  <expr_stmt><expr><name pos:line="107" pos:column="11">fetched<pos:position pos:line="107" pos:column="18"/></name> <operator pos:line="107" pos:column="19">=<pos:position pos:line="107" pos:column="20"/></operator> <literal type="number" pos:line="107" pos:column="21">1<pos:position pos:line="107" pos:column="22"/></literal></expr>;<pos:position pos:line="107" pos:column="23"/></expr_stmt>
	}<pos:position pos:line="108" pos:column="10"/></block></then></if></elseif>
	<comment type="block" pos:line="109" pos:column="9">/* UW-IMAP will provide a FLAGS update here if the FETCH causes a
	 * change (eg from \Unseen to \Seen).
	 * Uncommitted changes in mutt take precedence. If we decide to
	 * incrementally update flags later, this won't stop us syncing */</comment>
	<elseif pos:line="113" pos:column="9">else <if pos:line="113" pos:column="14">if <condition pos:line="113" pos:column="17">(<expr><operator pos:line="113" pos:column="18">(<pos:position pos:line="113" pos:column="19"/></operator><call><name pos:line="113" pos:column="19">ascii_strncasecmp<pos:position pos:line="113" pos:column="36"/></name> <argument_list pos:line="113" pos:column="37">(<argument><expr><literal type="string" pos:line="113" pos:column="38">"FLAGS"<pos:position pos:line="113" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="47">pc<pos:position pos:line="113" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="113" pos:column="51">5<pos:position pos:line="113" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="53"/></argument_list></call> <operator pos:line="113" pos:column="54">==<pos:position pos:line="113" pos:column="56"/></operator> <literal type="number" pos:line="113" pos:column="57">0<pos:position pos:line="113" pos:column="58"/></literal><operator pos:line="113" pos:column="58">)<pos:position pos:line="113" pos:column="59"/></operator> <operator pos:line="113" pos:column="60">&amp;&amp;<pos:position pos:line="113" pos:column="70"/></operator> <operator pos:line="113" pos:column="63">!<pos:position pos:line="113" pos:column="64"/></operator><name><name pos:line="113" pos:column="64">h<pos:position pos:line="113" pos:column="65"/></name><operator pos:line="113" pos:column="65">-&gt;<pos:position pos:line="113" pos:column="70"/></operator><name pos:line="113" pos:column="67">changed<pos:position pos:line="113" pos:column="74"/></name></name></expr>)<pos:position pos:line="113" pos:column="75"/></condition><then pos:line="113" pos:column="75">
	<block pos:line="114" pos:column="9">{
	  <if pos:line="115" pos:column="11">if <condition pos:line="115" pos:column="14">(<expr><operator pos:line="115" pos:column="15">(<pos:position pos:line="115" pos:column="16"/></operator><name pos:line="115" pos:column="16">pc<pos:position pos:line="115" pos:column="18"/></name> <operator pos:line="115" pos:column="19">=<pos:position pos:line="115" pos:column="20"/></operator> <call><name pos:line="115" pos:column="21">imap_set_flags<pos:position pos:line="115" pos:column="35"/></name> <argument_list pos:line="115" pos:column="36">(<argument><expr><name pos:line="115" pos:column="37">idata<pos:position pos:line="115" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="44">h<pos:position pos:line="115" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="47">pc<pos:position pos:line="115" pos:column="49"/></name></expr></argument>)<pos:position pos:line="115" pos:column="50"/></argument_list></call><operator pos:line="115" pos:column="50">)<pos:position pos:line="115" pos:column="51"/></operator> <operator pos:line="115" pos:column="52">==<pos:position pos:line="115" pos:column="54"/></operator> <name pos:line="115" pos:column="55">NULL<pos:position pos:line="115" pos:column="59"/></name></expr>)<pos:position pos:line="115" pos:column="60"/></condition><then pos:line="115" pos:column="60">
	    <block type="pseudo"><goto pos:line="116" pos:column="13">goto <name pos:line="116" pos:column="18">bail<pos:position pos:line="116" pos:column="22"/></name>;<pos:position pos:line="116" pos:column="23"/></goto></block></then></if>
	}<pos:position pos:line="117" pos:column="10"/></block></then></if></elseif></if>
      }<pos:position pos:line="118" pos:column="8"/></block></while>
    }<pos:position pos:line="119" pos:column="6"/></block></then></if>
  }<pos:position pos:line="120" pos:column="4"/></block>
  while <condition pos:line="121" pos:column="9">(<expr><name pos:line="121" pos:column="10">rc<pos:position pos:line="121" pos:column="12"/></name> <operator pos:line="121" pos:column="13">==<pos:position pos:line="121" pos:column="15"/></operator> <name pos:line="121" pos:column="16">IMAP_CMD_CONTINUE<pos:position pos:line="121" pos:column="33"/></name></expr>)<pos:position pos:line="121" pos:column="34"/></condition>;<pos:position pos:line="121" pos:column="35"/></do>

  <comment type="block" pos:line="123" pos:column="3">/* see comment before command start. */</comment>
  <expr_stmt><expr><name><name pos:line="124" pos:column="3">h<pos:position pos:line="124" pos:column="4"/></name><operator pos:line="124" pos:column="4">-&gt;<pos:position pos:line="124" pos:column="9"/></operator><name pos:line="124" pos:column="6">active<pos:position pos:line="124" pos:column="12"/></name></name> <operator pos:line="124" pos:column="13">=<pos:position pos:line="124" pos:column="14"/></operator> <literal type="number" pos:line="124" pos:column="15">1<pos:position pos:line="124" pos:column="16"/></literal></expr>;<pos:position pos:line="124" pos:column="17"/></expr_stmt>

  <if pos:line="126" pos:column="3">if <condition pos:line="126" pos:column="6">(<expr><name pos:line="126" pos:column="7">rc<pos:position pos:line="126" pos:column="9"/></name> <operator pos:line="126" pos:column="10">!=<pos:position pos:line="126" pos:column="12"/></operator> <name pos:line="126" pos:column="13">IMAP_CMD_OK<pos:position pos:line="126" pos:column="24"/></name></expr>)<pos:position pos:line="126" pos:column="25"/></condition><then pos:line="126" pos:column="25">
    <block type="pseudo"><goto pos:line="127" pos:column="5">goto <name pos:line="127" pos:column="10">bail<pos:position pos:line="127" pos:column="14"/></name>;<pos:position pos:line="127" pos:column="15"/></goto></block></then></if>

  <if pos:line="129" pos:column="3">if <condition pos:line="129" pos:column="6">(<expr><operator pos:line="129" pos:column="7">!<pos:position pos:line="129" pos:column="8"/></operator><name pos:line="129" pos:column="8">fetched<pos:position pos:line="129" pos:column="15"/></name> <operator pos:line="129" pos:column="16">||<pos:position pos:line="129" pos:column="18"/></operator> <operator pos:line="129" pos:column="19">!<pos:position pos:line="129" pos:column="20"/></operator><call><name pos:line="129" pos:column="20">imap_code<pos:position pos:line="129" pos:column="29"/></name> <argument_list pos:line="129" pos:column="30">(<argument><expr><name><name pos:line="129" pos:column="31">idata<pos:position pos:line="129" pos:column="36"/></name><operator pos:line="129" pos:column="36">-&gt;<pos:position pos:line="129" pos:column="41"/></operator><name pos:line="129" pos:column="38">cmd<pos:position pos:line="129" pos:column="41"/></name><operator pos:line="129" pos:column="41">.<pos:position pos:line="129" pos:column="42"/></operator><name pos:line="129" pos:column="42">buf<pos:position pos:line="129" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="129" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="129" pos:column="47"/></condition><then pos:line="129" pos:column="47">
    <block type="pseudo"><goto pos:line="130" pos:column="5">goto <name pos:line="130" pos:column="10">bail<pos:position pos:line="130" pos:column="14"/></name>;<pos:position pos:line="130" pos:column="15"/></goto></block></then></if>
    
  <comment type="block" pos:line="132" pos:column="3">/* Update the header information.  Previously, we only downloaded a
   * portion of the headers, those required for the main display.
   */</comment>
  <expr_stmt><expr><call><name pos:line="135" pos:column="3">rewind<pos:position pos:line="135" pos:column="9"/></name> <argument_list pos:line="135" pos:column="10">(<argument><expr><name><name pos:line="135" pos:column="11">msg<pos:position pos:line="135" pos:column="14"/></name><operator pos:line="135" pos:column="14">-&gt;<pos:position pos:line="135" pos:column="19"/></operator><name pos:line="135" pos:column="16">fp<pos:position pos:line="135" pos:column="18"/></name></name></expr></argument>)<pos:position pos:line="135" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="20"/></expr_stmt>
  <comment type="block" pos:line="136" pos:column="3">/* It may be that the Status header indicates a message is read, but the
   * IMAP server doesn't know the message has been \Seen. So we capture
   * the server's notion of 'read' and if it differs from the message info
   * picked up in mutt_read_rfc822_header, we mark the message (and context
   * changed). Another possiblity: ignore Status on IMAP?*/</comment>
  <expr_stmt><expr><name pos:line="141" pos:column="3">read<pos:position pos:line="141" pos:column="7"/></name> <operator pos:line="141" pos:column="8">=<pos:position pos:line="141" pos:column="9"/></operator> <name><name pos:line="141" pos:column="10">h<pos:position pos:line="141" pos:column="11"/></name><operator pos:line="141" pos:column="11">-&gt;<pos:position pos:line="141" pos:column="16"/></operator><name pos:line="141" pos:column="13">read<pos:position pos:line="141" pos:column="17"/></name></name></expr>;<pos:position pos:line="141" pos:column="18"/></expr_stmt>
  <comment type="block" pos:line="142" pos:column="3">/* I hate do this here, since it's so low-level, but I'm not sure where
   * I can abstract it. Problem: the id and subj hashes lose their keys when
   * mutt_free_envelope gets called, but keep their spots in the hash. This
   * confuses threading. Alternatively we could try to merge the new
   * envelope into the old one. Also messy and lowlevel. */</comment>
  <if pos:line="147" pos:column="3">if <condition pos:line="147" pos:column="6">(<expr><name><name pos:line="147" pos:column="7">ctx<pos:position pos:line="147" pos:column="10"/></name><operator pos:line="147" pos:column="10">-&gt;<pos:position pos:line="147" pos:column="15"/></operator><name pos:line="147" pos:column="12">id_hash<pos:position pos:line="147" pos:column="19"/></name></name> <operator pos:line="147" pos:column="20">&amp;&amp;<pos:position pos:line="147" pos:column="30"/></operator> <name><name pos:line="147" pos:column="23">h<pos:position pos:line="147" pos:column="24"/></name><operator pos:line="147" pos:column="24">-&gt;<pos:position pos:line="147" pos:column="29"/></operator><name pos:line="147" pos:column="26">env<pos:position pos:line="147" pos:column="29"/></name><operator pos:line="147" pos:column="29">-&gt;<pos:position pos:line="147" pos:column="34"/></operator><name pos:line="147" pos:column="31">message_id<pos:position pos:line="147" pos:column="41"/></name></name></expr>)<pos:position pos:line="147" pos:column="42"/></condition><then pos:line="147" pos:column="42">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="148" pos:column="5">hash_delete<pos:position pos:line="148" pos:column="16"/></name> <argument_list pos:line="148" pos:column="17">(<argument><expr><name><name pos:line="148" pos:column="18">ctx<pos:position pos:line="148" pos:column="21"/></name><operator pos:line="148" pos:column="21">-&gt;<pos:position pos:line="148" pos:column="26"/></operator><name pos:line="148" pos:column="23">id_hash<pos:position pos:line="148" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="32">h<pos:position pos:line="148" pos:column="33"/></name><operator pos:line="148" pos:column="33">-&gt;<pos:position pos:line="148" pos:column="38"/></operator><name pos:line="148" pos:column="35">env<pos:position pos:line="148" pos:column="38"/></name><operator pos:line="148" pos:column="38">-&gt;<pos:position pos:line="148" pos:column="43"/></operator><name pos:line="148" pos:column="40">message_id<pos:position pos:line="148" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="52">h<pos:position pos:line="148" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="55">NULL<pos:position pos:line="148" pos:column="59"/></name></expr></argument>)<pos:position pos:line="148" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="61"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="149" pos:column="3">mutt_free_envelope<pos:position pos:line="149" pos:column="21"/></name> <argument_list pos:line="149" pos:column="22">(<argument><expr><operator pos:line="149" pos:column="23">&amp;<pos:position pos:line="149" pos:column="28"/></operator><name><name pos:line="149" pos:column="24">h<pos:position pos:line="149" pos:column="25"/></name><operator pos:line="149" pos:column="25">-&gt;<pos:position pos:line="149" pos:column="30"/></operator><name pos:line="149" pos:column="27">env<pos:position pos:line="149" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="149" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="150" pos:column="3">h<pos:position pos:line="150" pos:column="4"/></name><operator pos:line="150" pos:column="4">-&gt;<pos:position pos:line="150" pos:column="9"/></operator><name pos:line="150" pos:column="6">env<pos:position pos:line="150" pos:column="9"/></name></name> <operator pos:line="150" pos:column="10">=<pos:position pos:line="150" pos:column="11"/></operator> <call><name pos:line="150" pos:column="12">mutt_read_rfc822_header<pos:position pos:line="150" pos:column="35"/></name> <argument_list pos:line="150" pos:column="36">(<argument><expr><name><name pos:line="150" pos:column="37">msg<pos:position pos:line="150" pos:column="40"/></name><operator pos:line="150" pos:column="40">-&gt;<pos:position pos:line="150" pos:column="45"/></operator><name pos:line="150" pos:column="42">fp<pos:position pos:line="150" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="46">h<pos:position pos:line="150" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="150" pos:column="49">0<pos:position pos:line="150" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="150" pos:column="52">0<pos:position pos:line="150" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="150" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="55"/></expr_stmt>
  <if pos:line="151" pos:column="3">if <condition pos:line="151" pos:column="6">(<expr><name><name pos:line="151" pos:column="7">ctx<pos:position pos:line="151" pos:column="10"/></name><operator pos:line="151" pos:column="10">-&gt;<pos:position pos:line="151" pos:column="15"/></operator><name pos:line="151" pos:column="12">id_hash<pos:position pos:line="151" pos:column="19"/></name></name> <operator pos:line="151" pos:column="20">&amp;&amp;<pos:position pos:line="151" pos:column="30"/></operator> <name><name pos:line="151" pos:column="23">h<pos:position pos:line="151" pos:column="24"/></name><operator pos:line="151" pos:column="24">-&gt;<pos:position pos:line="151" pos:column="29"/></operator><name pos:line="151" pos:column="26">env<pos:position pos:line="151" pos:column="29"/></name><operator pos:line="151" pos:column="29">-&gt;<pos:position pos:line="151" pos:column="34"/></operator><name pos:line="151" pos:column="31">message_id<pos:position pos:line="151" pos:column="41"/></name></name></expr>)<pos:position pos:line="151" pos:column="42"/></condition><then pos:line="151" pos:column="42">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="152" pos:column="5">hash_insert<pos:position pos:line="152" pos:column="16"/></name> <argument_list pos:line="152" pos:column="17">(<argument><expr><name><name pos:line="152" pos:column="18">ctx<pos:position pos:line="152" pos:column="21"/></name><operator pos:line="152" pos:column="21">-&gt;<pos:position pos:line="152" pos:column="26"/></operator><name pos:line="152" pos:column="23">id_hash<pos:position pos:line="152" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="152" pos:column="32">h<pos:position pos:line="152" pos:column="33"/></name><operator pos:line="152" pos:column="33">-&gt;<pos:position pos:line="152" pos:column="38"/></operator><name pos:line="152" pos:column="35">env<pos:position pos:line="152" pos:column="38"/></name><operator pos:line="152" pos:column="38">-&gt;<pos:position pos:line="152" pos:column="43"/></operator><name pos:line="152" pos:column="40">message_id<pos:position pos:line="152" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="152" pos:column="52">h<pos:position pos:line="152" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="152" pos:column="55">0<pos:position pos:line="152" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="152" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="58"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="154" pos:column="3">/* see above. We want the new status in h-&gt;read, so we unset it manually
   * and let mutt_set_flag set it correctly, updating context. */</comment>
  <if pos:line="156" pos:column="3">if <condition pos:line="156" pos:column="6">(<expr><name pos:line="156" pos:column="7">read<pos:position pos:line="156" pos:column="11"/></name> <operator pos:line="156" pos:column="12">!=<pos:position pos:line="156" pos:column="14"/></operator> <name><name pos:line="156" pos:column="15">h<pos:position pos:line="156" pos:column="16"/></name><operator pos:line="156" pos:column="16">-&gt;<pos:position pos:line="156" pos:column="21"/></operator><name pos:line="156" pos:column="18">read<pos:position pos:line="156" pos:column="22"/></name></name></expr>)<pos:position pos:line="156" pos:column="23"/></condition><then pos:line="156" pos:column="23">
  <block pos:line="157" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="158" pos:column="5">h<pos:position pos:line="158" pos:column="6"/></name><operator pos:line="158" pos:column="6">-&gt;<pos:position pos:line="158" pos:column="11"/></operator><name pos:line="158" pos:column="8">read<pos:position pos:line="158" pos:column="12"/></name></name> <operator pos:line="158" pos:column="13">=<pos:position pos:line="158" pos:column="14"/></operator> <name pos:line="158" pos:column="15">read<pos:position pos:line="158" pos:column="19"/></name></expr>;<pos:position pos:line="158" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="159" pos:column="5">mutt_set_flag<pos:position pos:line="159" pos:column="18"/></name> <argument_list pos:line="159" pos:column="19">(<argument><expr><name pos:line="159" pos:column="20">ctx<pos:position pos:line="159" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="25">h<pos:position pos:line="159" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="28">M_NEW<pos:position pos:line="159" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="35">read<pos:position pos:line="159" pos:column="39"/></name></expr></argument>)<pos:position pos:line="159" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="160" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="162" pos:column="3">h<pos:position pos:line="162" pos:column="4"/></name><operator pos:line="162" pos:column="4">-&gt;<pos:position pos:line="162" pos:column="9"/></operator><name pos:line="162" pos:column="6">lines<pos:position pos:line="162" pos:column="11"/></name></name> <operator pos:line="162" pos:column="12">=<pos:position pos:line="162" pos:column="13"/></operator> <literal type="number" pos:line="162" pos:column="14">0<pos:position pos:line="162" pos:column="15"/></literal></expr>;<pos:position pos:line="162" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="163" pos:column="3">fgets<pos:position pos:line="163" pos:column="8"/></name> <argument_list pos:line="163" pos:column="9">(<argument><expr><name pos:line="163" pos:column="10">buf<pos:position pos:line="163" pos:column="13"/></name></expr></argument>, <argument><expr><sizeof pos:line="163" pos:column="15">sizeof <argument_list pos:line="163" pos:column="22">(<argument><expr><name pos:line="163" pos:column="23">buf<pos:position pos:line="163" pos:column="26"/></name></expr></argument>)<pos:position pos:line="163" pos:column="27"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="163" pos:column="29">msg<pos:position pos:line="163" pos:column="32"/></name><operator pos:line="163" pos:column="32">-&gt;<pos:position pos:line="163" pos:column="37"/></operator><name pos:line="163" pos:column="34">fp<pos:position pos:line="163" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="163" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="38"/></expr_stmt>
  <while pos:line="164" pos:column="3">while <condition pos:line="164" pos:column="9">(<expr><operator pos:line="164" pos:column="10">!<pos:position pos:line="164" pos:column="11"/></operator><call><name pos:line="164" pos:column="11">feof<pos:position pos:line="164" pos:column="15"/></name> <argument_list pos:line="164" pos:column="16">(<argument><expr><name><name pos:line="164" pos:column="17">msg<pos:position pos:line="164" pos:column="20"/></name><operator pos:line="164" pos:column="20">-&gt;<pos:position pos:line="164" pos:column="25"/></operator><name pos:line="164" pos:column="22">fp<pos:position pos:line="164" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="164" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="164" pos:column="26"/></condition>
  <block pos:line="165" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="166" pos:column="5">h<pos:position pos:line="166" pos:column="6"/></name><operator pos:line="166" pos:column="6">-&gt;<pos:position pos:line="166" pos:column="11"/></operator><name pos:line="166" pos:column="8">lines<pos:position pos:line="166" pos:column="13"/></name></name><operator pos:line="166" pos:column="13">++<pos:position pos:line="166" pos:column="15"/></operator></expr>;<pos:position pos:line="166" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="167" pos:column="5">fgets<pos:position pos:line="167" pos:column="10"/></name> <argument_list pos:line="167" pos:column="11">(<argument><expr><name pos:line="167" pos:column="12">buf<pos:position pos:line="167" pos:column="15"/></name></expr></argument>, <argument><expr><sizeof pos:line="167" pos:column="17">sizeof <argument_list pos:line="167" pos:column="24">(<argument><expr><name pos:line="167" pos:column="25">buf<pos:position pos:line="167" pos:column="28"/></name></expr></argument>)<pos:position pos:line="167" pos:column="29"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="167" pos:column="31">msg<pos:position pos:line="167" pos:column="34"/></name><operator pos:line="167" pos:column="34">-&gt;<pos:position pos:line="167" pos:column="39"/></operator><name pos:line="167" pos:column="36">fp<pos:position pos:line="167" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="167" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="168" pos:column="4"/></block></while>

  <expr_stmt><expr><name><name pos:line="170" pos:column="3">h<pos:position pos:line="170" pos:column="4"/></name><operator pos:line="170" pos:column="4">-&gt;<pos:position pos:line="170" pos:column="9"/></operator><name pos:line="170" pos:column="6">content<pos:position pos:line="170" pos:column="13"/></name><operator pos:line="170" pos:column="13">-&gt;<pos:position pos:line="170" pos:column="18"/></operator><name pos:line="170" pos:column="15">length<pos:position pos:line="170" pos:column="21"/></name></name> <operator pos:line="170" pos:column="22">=<pos:position pos:line="170" pos:column="23"/></operator> <call><name pos:line="170" pos:column="24">ftell<pos:position pos:line="170" pos:column="29"/></name> <argument_list pos:line="170" pos:column="30">(<argument><expr><name><name pos:line="170" pos:column="31">msg<pos:position pos:line="170" pos:column="34"/></name><operator pos:line="170" pos:column="34">-&gt;<pos:position pos:line="170" pos:column="39"/></operator><name pos:line="170" pos:column="36">fp<pos:position pos:line="170" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="170" pos:column="39"/></argument_list></call> <operator pos:line="170" pos:column="40">-<pos:position pos:line="170" pos:column="41"/></operator> <name><name pos:line="170" pos:column="42">h<pos:position pos:line="170" pos:column="43"/></name><operator pos:line="170" pos:column="43">-&gt;<pos:position pos:line="170" pos:column="48"/></operator><name pos:line="170" pos:column="45">content<pos:position pos:line="170" pos:column="52"/></name><operator pos:line="170" pos:column="52">-&gt;<pos:position pos:line="170" pos:column="57"/></operator><name pos:line="170" pos:column="54">offset<pos:position pos:line="170" pos:column="60"/></name></name></expr>;<pos:position pos:line="170" pos:column="61"/></expr_stmt>

  <comment type="block" pos:line="172" pos:column="3">/* This needs to be done in case this is a multipart message */</comment>
<cpp:ifdef pos:line="173" pos:column="1">#<cpp:directive pos:line="173" pos:column="2">ifdef<pos:position pos:line="173" pos:column="7"/></cpp:directive> <name pos:line="173" pos:column="8">HAVE_PGP<pos:position pos:line="173" pos:column="16"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="174" pos:column="3">h<pos:position pos:line="174" pos:column="4"/></name><operator pos:line="174" pos:column="4">-&gt;<pos:position pos:line="174" pos:column="9"/></operator><name pos:line="174" pos:column="6">pgp<pos:position pos:line="174" pos:column="9"/></name></name> <operator pos:line="174" pos:column="10">=<pos:position pos:line="174" pos:column="11"/></operator> <call><name pos:line="174" pos:column="12">pgp_query<pos:position pos:line="174" pos:column="21"/></name> <argument_list pos:line="174" pos:column="22">(<argument><expr><name><name pos:line="174" pos:column="23">h<pos:position pos:line="174" pos:column="24"/></name><operator pos:line="174" pos:column="24">-&gt;<pos:position pos:line="174" pos:column="29"/></operator><name pos:line="174" pos:column="26">content<pos:position pos:line="174" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="174" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="35"/></expr_stmt>
<cpp:endif pos:line="175" pos:column="1">#<cpp:directive pos:line="175" pos:column="2">endif<pos:position pos:line="175" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="175" pos:column="8">/* HAVE_PGP */</comment>

  <expr_stmt><expr><call><name pos:line="177" pos:column="3">mutt_clear_error<pos:position pos:line="177" pos:column="19"/></name><argument_list pos:line="177" pos:column="19">()<pos:position pos:line="177" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="178" pos:column="3">rewind<pos:position pos:line="178" pos:column="9"/></name> <argument_list pos:line="178" pos:column="10">(<argument><expr><name><name pos:line="178" pos:column="11">msg<pos:position pos:line="178" pos:column="14"/></name><operator pos:line="178" pos:column="14">-&gt;<pos:position pos:line="178" pos:column="19"/></operator><name pos:line="178" pos:column="16">fp<pos:position pos:line="178" pos:column="18"/></name></name></expr></argument>)<pos:position pos:line="178" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="20"/></expr_stmt>

  <return pos:line="180" pos:column="3">return <expr><literal type="number" pos:line="180" pos:column="10">0<pos:position pos:line="180" pos:column="11"/></literal></expr>;<pos:position pos:line="180" pos:column="12"/></return>

<label><name pos:line="182" pos:column="1">bail<pos:position pos:line="182" pos:column="5"/></name>:<pos:position pos:line="182" pos:column="6"/></label>
  <expr_stmt><expr><call><name pos:line="183" pos:column="3">safe_fclose<pos:position pos:line="183" pos:column="14"/></name> <argument_list pos:line="183" pos:column="15">(<argument><expr><operator pos:line="183" pos:column="16">&amp;<pos:position pos:line="183" pos:column="21"/></operator><name><name pos:line="183" pos:column="17">msg<pos:position pos:line="183" pos:column="20"/></name><operator pos:line="183" pos:column="20">-&gt;<pos:position pos:line="183" pos:column="25"/></operator><name pos:line="183" pos:column="22">fp<pos:position pos:line="183" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="183" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="26"/></expr_stmt>
  <if pos:line="184" pos:column="3">if <condition pos:line="184" pos:column="6">(<expr><name><name pos:line="184" pos:column="7">cache<pos:position pos:line="184" pos:column="12"/></name><operator pos:line="184" pos:column="12">-&gt;<pos:position pos:line="184" pos:column="17"/></operator><name pos:line="184" pos:column="14">path<pos:position pos:line="184" pos:column="18"/></name></name></expr>)<pos:position pos:line="184" pos:column="19"/></condition><then pos:line="184" pos:column="19">
  <block pos:line="185" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="186" pos:column="5">unlink<pos:position pos:line="186" pos:column="11"/></name> <argument_list pos:line="186" pos:column="12">(<argument><expr><name><name pos:line="186" pos:column="13">cache<pos:position pos:line="186" pos:column="18"/></name><operator pos:line="186" pos:column="18">-&gt;<pos:position pos:line="186" pos:column="23"/></operator><name pos:line="186" pos:column="20">path<pos:position pos:line="186" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="186" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="187" pos:column="5">FREE<pos:position pos:line="187" pos:column="9"/></name> <argument_list pos:line="187" pos:column="10">(<argument><expr><operator pos:line="187" pos:column="11">&amp;<pos:position pos:line="187" pos:column="16"/></operator><name><name pos:line="187" pos:column="12">cache<pos:position pos:line="187" pos:column="17"/></name><operator pos:line="187" pos:column="17">-&gt;<pos:position pos:line="187" pos:column="22"/></operator><name pos:line="187" pos:column="19">path<pos:position pos:line="187" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="187" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="188" pos:column="4"/></block></then></if>

  <return pos:line="190" pos:column="3">return <expr><operator pos:line="190" pos:column="10">-<pos:position pos:line="190" pos:column="11"/></operator><literal type="number" pos:line="190" pos:column="11">1<pos:position pos:line="190" pos:column="12"/></literal></expr>;<pos:position pos:line="190" pos:column="13"/></return>
}<pos:position pos:line="191" pos:column="2"/></block></function></unit>
