<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1075_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">HEADER<pos:position pos:line="1" pos:column="7"/></name> <modifier pos:line="1" pos:column="8">*<pos:position pos:line="1" pos:column="9"/></modifier></type>
<name pos:line="2" pos:column="1">mutt_hcache_restore<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><specifier pos:line="2" pos:column="21">const<pos:position pos:line="2" pos:column="26"/></specifier> <name pos:line="2" pos:column="27">unsigned<pos:position pos:line="2" pos:column="35"/></name> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">d<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">HEADER<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier><modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type> <name pos:line="2" pos:column="55">oh<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="58"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">off<pos:position pos:line="4" pos:column="10"/></name> <init pos:line="4" pos:column="11">= <expr><literal type="number" pos:line="4" pos:column="13">0<pos:position pos:line="4" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">HEADER<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">h<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><call><name pos:line="5" pos:column="15">mutt_new_header<pos:position pos:line="5" pos:column="30"/></name><argument_list pos:line="5" pos:column="30">()<pos:position pos:line="5" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">convert<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><operator pos:line="6" pos:column="17">!<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="18">Charset_is_utf8<pos:position pos:line="6" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* skip validate */</comment>
  <expr_stmt><expr><name pos:line="9" pos:column="3">off<pos:position pos:line="9" pos:column="6"/></name> <operator pos:line="9" pos:column="7">+=<pos:position pos:line="9" pos:column="9"/></operator> <sizeof pos:line="9" pos:column="10">sizeof <argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">validate<pos:position pos:line="9" pos:column="26"/></name></expr></argument>)<pos:position pos:line="9" pos:column="27"/></argument_list></sizeof></expr>;<pos:position pos:line="9" pos:column="28"/></expr_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* skip crc */</comment>
  <expr_stmt><expr><name pos:line="12" pos:column="3">off<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">+=<pos:position pos:line="12" pos:column="9"/></operator> sizeof <operator pos:line="12" pos:column="17">(<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="18">unsigned<pos:position pos:line="12" pos:column="26"/></name> <name pos:line="12" pos:column="27">int<pos:position pos:line="12" pos:column="30"/></name><operator pos:line="12" pos:column="30">)<pos:position pos:line="12" pos:column="31"/></operator></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="14" pos:column="3">memcpy<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><name pos:line="14" pos:column="10">h<pos:position pos:line="14" pos:column="11"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="13">d<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">+<pos:position pos:line="14" pos:column="16"/></operator> <name pos:line="14" pos:column="17">off<pos:position pos:line="14" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="22">sizeof <argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">HEADER<pos:position pos:line="14" pos:column="36"/></name></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name pos:line="15" pos:column="3">off<pos:position pos:line="15" pos:column="6"/></name> <operator pos:line="15" pos:column="7">+=<pos:position pos:line="15" pos:column="9"/></operator> <sizeof pos:line="15" pos:column="10">sizeof <argument_list pos:line="15" pos:column="17">(<argument><expr><name pos:line="15" pos:column="18">HEADER<pos:position pos:line="15" pos:column="24"/></name></expr></argument>)<pos:position pos:line="15" pos:column="25"/></argument_list></sizeof></expr>;<pos:position pos:line="15" pos:column="26"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="17" pos:column="3">h<pos:position pos:line="17" pos:column="4"/></name><operator pos:line="17" pos:column="4">-&gt;<pos:position pos:line="17" pos:column="9"/></operator><name pos:line="17" pos:column="6">env<pos:position pos:line="17" pos:column="9"/></name></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <call><name pos:line="17" pos:column="12">mutt_new_envelope<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">()<pos:position pos:line="17" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">restore_envelope<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><name><name pos:line="18" pos:column="20">h<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">-&gt;<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="23">env<pos:position pos:line="18" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="28">d<pos:position pos:line="18" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="31">&amp;<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="32">off<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="37">convert<pos:position pos:line="18" pos:column="44"/></name></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="46"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="20" pos:column="3">h<pos:position pos:line="20" pos:column="4"/></name><operator pos:line="20" pos:column="4">-&gt;<pos:position pos:line="20" pos:column="9"/></operator><name pos:line="20" pos:column="6">content<pos:position pos:line="20" pos:column="13"/></name></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <call><name pos:line="20" pos:column="16">mutt_new_body<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">()<pos:position pos:line="20" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">restore_body<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><name><name pos:line="21" pos:column="16">h<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">-&gt;<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="19">content<pos:position pos:line="21" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="28">d<pos:position pos:line="21" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="31">&amp;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="32">off<pos:position pos:line="21" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="37">convert<pos:position pos:line="21" pos:column="44"/></name></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="23" pos:column="3">restore_char<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><operator pos:line="23" pos:column="16">&amp;<pos:position pos:line="23" pos:column="21"/></operator><name><name pos:line="23" pos:column="17">h<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">-&gt;<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="20">maildir_flags<pos:position pos:line="23" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="35">d<pos:position pos:line="23" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="38">&amp;<pos:position pos:line="23" pos:column="43"/></operator><name pos:line="23" pos:column="39">off<pos:position pos:line="23" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="44">convert<pos:position pos:line="23" pos:column="51"/></name></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="53"/></expr_stmt>

  <comment type="block" pos:line="25" pos:column="3">/* this is needed for maildir style mailboxes */</comment>
  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name pos:line="26" pos:column="7">oh<pos:position pos:line="26" pos:column="9"/></name></expr>)<pos:position pos:line="26" pos:column="10"/></condition><then pos:line="26" pos:column="10">
  <block pos:line="27" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="28" pos:column="5">h<pos:position pos:line="28" pos:column="6"/></name><operator pos:line="28" pos:column="6">-&gt;<pos:position pos:line="28" pos:column="11"/></operator><name pos:line="28" pos:column="8">old<pos:position pos:line="28" pos:column="11"/></name></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <name><operator pos:line="28" pos:column="14">(<pos:position pos:line="28" pos:column="15"/></operator><operator pos:line="28" pos:column="15">*<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="16">oh<pos:position pos:line="28" pos:column="18"/></name><operator pos:line="28" pos:column="18">)<pos:position pos:line="28" pos:column="19"/></operator><operator pos:line="28" pos:column="19">-&gt;<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="21">old<pos:position pos:line="28" pos:column="24"/></name></name></expr>;<pos:position pos:line="28" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">h<pos:position pos:line="29" pos:column="6"/></name><operator pos:line="29" pos:column="6">-&gt;<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="8">path<pos:position pos:line="29" pos:column="12"/></name></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <call><name pos:line="29" pos:column="15">safe_strdup<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name><operator pos:line="29" pos:column="27">(<pos:position pos:line="29" pos:column="28"/></operator><operator pos:line="29" pos:column="28">*<pos:position pos:line="29" pos:column="29"/></operator><name pos:line="29" pos:column="29">oh<pos:position pos:line="29" pos:column="31"/></name><operator pos:line="29" pos:column="31">)<pos:position pos:line="29" pos:column="32"/></operator><operator pos:line="29" pos:column="32">-&gt;<pos:position pos:line="29" pos:column="37"/></operator><name pos:line="29" pos:column="34">path<pos:position pos:line="29" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">mutt_free_header<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><name pos:line="30" pos:column="22">oh<pos:position pos:line="30" pos:column="24"/></name></expr></argument>)<pos:position pos:line="30" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="26"/></expr_stmt>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if>

  <return pos:line="33" pos:column="3">return <expr><name pos:line="33" pos:column="10">h<pos:position pos:line="33" pos:column="11"/></name></expr>;<pos:position pos:line="33" pos:column="12"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
