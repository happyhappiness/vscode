<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2065_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">imap_check_mailbox<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">CONTEXT<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">ctx<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">int<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">index_hint<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">force<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* overload keyboard timeout to avoid many mailbox checks in a row.
   * Most users don't like having to wait exactly when they press a key. */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">IMAP_DATA<pos:position pos:line="5" pos:column="12"/></name><modifier pos:line="5" pos:column="12">*<pos:position pos:line="5" pos:column="13"/></modifier></type> <name pos:line="5" pos:column="14">idata<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">result<pos:position pos:line="6" pos:column="13"/></name> <init pos:line="6" pos:column="14">= <expr><literal type="number" pos:line="6" pos:column="16">0<pos:position pos:line="6" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">idata<pos:position pos:line="8" pos:column="8"/></name> <operator pos:line="8" pos:column="9">=<pos:position pos:line="8" pos:column="10"/></operator> <operator pos:line="8" pos:column="11">(<pos:position pos:line="8" pos:column="12"/></operator><name pos:line="8" pos:column="12">IMAP_DATA<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">*<pos:position pos:line="8" pos:column="22"/></operator><operator pos:line="8" pos:column="22">)<pos:position pos:line="8" pos:column="23"/></operator> <name><name pos:line="8" pos:column="24">ctx<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">-&gt;<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="29">data<pos:position pos:line="8" pos:column="33"/></name></name></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* try IDLE first, unless force is set */</comment>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><operator pos:line="11" pos:column="7">!<pos:position pos:line="11" pos:column="8"/></operator><name pos:line="11" pos:column="8">force<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">&amp;&amp;<pos:position pos:line="11" pos:column="24"/></operator> <call><name pos:line="11" pos:column="17">option<pos:position pos:line="11" pos:column="23"/></name> <argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">OPTIMAPIDLE<pos:position pos:line="11" pos:column="36"/></name></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call> <operator pos:line="11" pos:column="38">&amp;&amp;<pos:position pos:line="11" pos:column="48"/></operator> <call><name pos:line="11" pos:column="41">mutt_bit_isset<pos:position pos:line="11" pos:column="55"/></name> <argument_list pos:line="11" pos:column="56">(<argument><expr><name><name pos:line="11" pos:column="57">idata<pos:position pos:line="11" pos:column="62"/></name><operator pos:line="11" pos:column="62">-&gt;<pos:position pos:line="11" pos:column="67"/></operator><name pos:line="11" pos:column="64">capabilities<pos:position pos:line="11" pos:column="76"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="78">IDLE<pos:position pos:line="11" pos:column="82"/></name></expr></argument>)<pos:position pos:line="11" pos:column="83"/></argument_list></call>
      <operator pos:line="12" pos:column="7">&amp;&amp;<pos:position pos:line="12" pos:column="17"/></operator> <operator pos:line="12" pos:column="10">(<pos:position pos:line="12" pos:column="11"/></operator><name><name pos:line="12" pos:column="11">idata<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">-&gt;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="18">state<pos:position pos:line="12" pos:column="23"/></name></name> <operator pos:line="12" pos:column="24">!=<pos:position pos:line="12" pos:column="26"/></operator> <name pos:line="12" pos:column="27">IMAP_IDLE<pos:position pos:line="12" pos:column="36"/></name> <operator pos:line="12" pos:column="37">||<pos:position pos:line="12" pos:column="39"/></operator> <call><name pos:line="12" pos:column="40">time<pos:position pos:line="12" pos:column="44"/></name><argument_list pos:line="12" pos:column="44">(<argument><expr><name pos:line="12" pos:column="45">NULL<pos:position pos:line="12" pos:column="49"/></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call> <operator pos:line="12" pos:column="51">&gt;=<pos:position pos:line="12" pos:column="56"/></operator> <name><name pos:line="12" pos:column="54">idata<pos:position pos:line="12" pos:column="59"/></name><operator pos:line="12" pos:column="59">-&gt;<pos:position pos:line="12" pos:column="64"/></operator><name pos:line="12" pos:column="61">lastread<pos:position pos:line="12" pos:column="69"/></name></name> <operator pos:line="12" pos:column="70">+<pos:position pos:line="12" pos:column="71"/></operator> <name pos:line="12" pos:column="72">ImapKeepalive<pos:position pos:line="12" pos:column="85"/></name><operator pos:line="12" pos:column="85">)<pos:position pos:line="12" pos:column="86"/></operator></expr>)<pos:position pos:line="12" pos:column="87"/></condition><then pos:line="12" pos:column="87">
  <block pos:line="13" pos:column="3">{
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name pos:line="14" pos:column="9">imap_cmd_idle<pos:position pos:line="14" pos:column="22"/></name> <argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">idata<pos:position pos:line="14" pos:column="29"/></name></expr></argument>)<pos:position pos:line="14" pos:column="30"/></argument_list></call> <operator pos:line="14" pos:column="31">&lt;<pos:position pos:line="14" pos:column="35"/></operator> <literal type="number" pos:line="14" pos:column="33">0<pos:position pos:line="14" pos:column="34"/></literal></expr>)<pos:position pos:line="14" pos:column="35"/></condition><then pos:line="14" pos:column="35">
      <block type="pseudo"><return pos:line="15" pos:column="7">return <expr><operator pos:line="15" pos:column="14">-<pos:position pos:line="15" pos:column="15"/></operator><literal type="number" pos:line="15" pos:column="15">1<pos:position pos:line="15" pos:column="16"/></literal></expr>;<pos:position pos:line="15" pos:column="17"/></return></block></then></if>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name><name pos:line="17" pos:column="7">idata<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">state<pos:position pos:line="17" pos:column="19"/></name></name> <operator pos:line="17" pos:column="20">==<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">IMAP_IDLE<pos:position pos:line="17" pos:column="32"/></name></expr>)<pos:position pos:line="17" pos:column="33"/></condition><then pos:line="17" pos:column="33">
  <block pos:line="18" pos:column="3">{
    <while pos:line="19" pos:column="5">while <condition pos:line="19" pos:column="11">(<expr><operator pos:line="19" pos:column="12">(<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="13">result<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <call><name pos:line="19" pos:column="22">mutt_socket_poll<pos:position pos:line="19" pos:column="38"/></name> <argument_list pos:line="19" pos:column="39">(<argument><expr><name><name pos:line="19" pos:column="40">idata<pos:position pos:line="19" pos:column="45"/></name><operator pos:line="19" pos:column="45">-&gt;<pos:position pos:line="19" pos:column="50"/></operator><name pos:line="19" pos:column="47">conn<pos:position pos:line="19" pos:column="51"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="53">0<pos:position pos:line="19" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></call><operator pos:line="19" pos:column="55">)<pos:position pos:line="19" pos:column="56"/></operator> <operator pos:line="19" pos:column="57">&gt;<pos:position pos:line="19" pos:column="61"/></operator> <literal type="number" pos:line="19" pos:column="59">0<pos:position pos:line="19" pos:column="60"/></literal></expr>)<pos:position pos:line="19" pos:column="61"/></condition>
    <block pos:line="20" pos:column="5">{
      <if pos:line="21" pos:column="7">if <condition pos:line="21" pos:column="10">(<expr><call><name pos:line="21" pos:column="11">imap_cmd_step<pos:position pos:line="21" pos:column="24"/></name> <argument_list pos:line="21" pos:column="25">(<argument><expr><name pos:line="21" pos:column="26">idata<pos:position pos:line="21" pos:column="31"/></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call> <operator pos:line="21" pos:column="33">!=<pos:position pos:line="21" pos:column="35"/></operator> <name pos:line="21" pos:column="36">IMAP_CMD_CONTINUE<pos:position pos:line="21" pos:column="53"/></name></expr>)<pos:position pos:line="21" pos:column="54"/></condition><then pos:line="21" pos:column="54">
      <block pos:line="22" pos:column="7">{
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">dprint<pos:position pos:line="23" pos:column="15"/></name> <argument_list pos:line="23" pos:column="16">(<argument><expr><literal type="number" pos:line="23" pos:column="17">1<pos:position pos:line="23" pos:column="18"/></literal></expr></argument>, <argument><expr><operator pos:line="23" pos:column="20">(<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="21">debugfile<pos:position pos:line="23" pos:column="30"/></name><operator pos:line="23" pos:column="30">,<pos:position pos:line="23" pos:column="31"/></operator> <literal type="string" pos:line="23" pos:column="32">"Error reading IDLE response\n"<pos:position pos:line="23" pos:column="63"/></literal><operator pos:line="23" pos:column="63">)<pos:position pos:line="23" pos:column="64"/></operator></expr></argument>)<pos:position pos:line="23" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="66"/></expr_stmt>
        <return pos:line="24" pos:column="9">return <expr><operator pos:line="24" pos:column="16">-<pos:position pos:line="24" pos:column="17"/></operator><literal type="number" pos:line="24" pos:column="17">1<pos:position pos:line="24" pos:column="18"/></literal></expr>;<pos:position pos:line="24" pos:column="19"/></return>
      }<pos:position pos:line="25" pos:column="8"/></block></then></if>
    }<pos:position pos:line="26" pos:column="6"/></block></while>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">result<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">&lt;<pos:position pos:line="27" pos:column="20"/></operator> <literal type="number" pos:line="27" pos:column="18">0<pos:position pos:line="27" pos:column="19"/></literal></expr>)<pos:position pos:line="27" pos:column="20"/></condition><then pos:line="27" pos:column="20">
    <block pos:line="28" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">dprint<pos:position pos:line="29" pos:column="13"/></name> <argument_list pos:line="29" pos:column="14">(<argument><expr><literal type="number" pos:line="29" pos:column="15">1<pos:position pos:line="29" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="29" pos:column="18">(<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="19">debugfile<pos:position pos:line="29" pos:column="28"/></name><operator pos:line="29" pos:column="28">,<pos:position pos:line="29" pos:column="29"/></operator> <literal type="string" pos:line="29" pos:column="30">"Poll failed, disabling IDLE\n"<pos:position pos:line="29" pos:column="61"/></literal><operator pos:line="29" pos:column="61">)<pos:position pos:line="29" pos:column="62"/></operator></expr></argument>)<pos:position pos:line="29" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">mutt_bit_unset<pos:position pos:line="30" pos:column="21"/></name> <argument_list pos:line="30" pos:column="22">(<argument><expr><name><name pos:line="30" pos:column="23">idata<pos:position pos:line="30" pos:column="28"/></name><operator pos:line="30" pos:column="28">-&gt;<pos:position pos:line="30" pos:column="33"/></operator><name pos:line="30" pos:column="30">capabilities<pos:position pos:line="30" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="44">IDLE<pos:position pos:line="30" pos:column="48"/></name></expr></argument>)<pos:position pos:line="30" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>

  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><operator pos:line="34" pos:column="7">(<pos:position pos:line="34" pos:column="8"/></operator><name pos:line="34" pos:column="8">force<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">||<pos:position pos:line="34" pos:column="16"/></operator>
       <operator pos:line="35" pos:column="8">(<pos:position pos:line="35" pos:column="9"/></operator><name><name pos:line="35" pos:column="9">idata<pos:position pos:line="35" pos:column="14"/></name><operator pos:line="35" pos:column="14">-&gt;<pos:position pos:line="35" pos:column="19"/></operator><name pos:line="35" pos:column="16">state<pos:position pos:line="35" pos:column="21"/></name></name> <operator pos:line="35" pos:column="22">!=<pos:position pos:line="35" pos:column="24"/></operator> <name pos:line="35" pos:column="25">IMAP_IDLE<pos:position pos:line="35" pos:column="34"/></name> <operator pos:line="35" pos:column="35">&amp;&amp;<pos:position pos:line="35" pos:column="45"/></operator> <call><name pos:line="35" pos:column="38">time<pos:position pos:line="35" pos:column="42"/></name><argument_list pos:line="35" pos:column="42">(<argument><expr><name pos:line="35" pos:column="43">NULL<pos:position pos:line="35" pos:column="47"/></name></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></call> <operator pos:line="35" pos:column="49">&gt;=<pos:position pos:line="35" pos:column="54"/></operator> <name><name pos:line="35" pos:column="52">idata<pos:position pos:line="35" pos:column="57"/></name><operator pos:line="35" pos:column="57">-&gt;<pos:position pos:line="35" pos:column="62"/></operator><name pos:line="35" pos:column="59">lastread<pos:position pos:line="35" pos:column="67"/></name></name> <operator pos:line="35" pos:column="68">+<pos:position pos:line="35" pos:column="69"/></operator> <name pos:line="35" pos:column="70">Timeout<pos:position pos:line="35" pos:column="77"/></name><operator pos:line="35" pos:column="77">)<pos:position pos:line="35" pos:column="78"/></operator><operator pos:line="35" pos:column="78">)<pos:position pos:line="35" pos:column="79"/></operator>
      <operator pos:line="36" pos:column="7">&amp;&amp;<pos:position pos:line="36" pos:column="17"/></operator> <call><name pos:line="36" pos:column="10">imap_exec<pos:position pos:line="36" pos:column="19"/></name> <argument_list pos:line="36" pos:column="20">(<argument><expr><name pos:line="36" pos:column="21">idata<pos:position pos:line="36" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="28">"NOOP"<pos:position pos:line="36" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="36">IMAP_CMD_POLL<pos:position pos:line="36" pos:column="49"/></name></expr></argument>)<pos:position pos:line="36" pos:column="50"/></argument_list></call> <operator pos:line="36" pos:column="51">!=<pos:position pos:line="36" pos:column="53"/></operator> <literal type="number" pos:line="36" pos:column="54">0<pos:position pos:line="36" pos:column="55"/></literal></expr>)<pos:position pos:line="36" pos:column="56"/></condition><then pos:line="36" pos:column="56">
    <block type="pseudo"><return pos:line="37" pos:column="5">return <expr><operator pos:line="37" pos:column="12">-<pos:position pos:line="37" pos:column="13"/></operator><literal type="number" pos:line="37" pos:column="13">1<pos:position pos:line="37" pos:column="14"/></literal></expr>;<pos:position pos:line="37" pos:column="15"/></return></block></then></if>

  <comment type="block" pos:line="39" pos:column="3">/* We call this even when we haven't run NOOP in case we have pending
   * changes to process, since we can reopen here. */</comment>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">imap_cmd_finish<pos:position pos:line="41" pos:column="18"/></name> <argument_list pos:line="41" pos:column="19">(<argument><expr><name pos:line="41" pos:column="20">idata<pos:position pos:line="41" pos:column="25"/></name></expr></argument>)<pos:position pos:line="41" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>

  <if pos:line="43" pos:column="3">if <condition pos:line="43" pos:column="6">(<expr><name><name pos:line="43" pos:column="7">idata<pos:position pos:line="43" pos:column="12"/></name><operator pos:line="43" pos:column="12">-&gt;<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="14">check_status<pos:position pos:line="43" pos:column="26"/></name></name> <operator pos:line="43" pos:column="27">&amp;<pos:position pos:line="43" pos:column="32"/></operator> <name pos:line="43" pos:column="29">IMAP_EXPUNGE_PENDING<pos:position pos:line="43" pos:column="49"/></name></expr>)<pos:position pos:line="43" pos:column="50"/></condition><then pos:line="43" pos:column="50">
    <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="5">result<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">=<pos:position pos:line="44" pos:column="13"/></operator> <name pos:line="44" pos:column="14">MUTT_REOPENED<pos:position pos:line="44" pos:column="27"/></name></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt></block></then>
  <elseif pos:line="45" pos:column="3">else <if pos:line="45" pos:column="8">if <condition pos:line="45" pos:column="11">(<expr><name><name pos:line="45" pos:column="12">idata<pos:position pos:line="45" pos:column="17"/></name><operator pos:line="45" pos:column="17">-&gt;<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="19">check_status<pos:position pos:line="45" pos:column="31"/></name></name> <operator pos:line="45" pos:column="32">&amp;<pos:position pos:line="45" pos:column="37"/></operator> <name pos:line="45" pos:column="34">IMAP_NEWMAIL_PENDING<pos:position pos:line="45" pos:column="54"/></name></expr>)<pos:position pos:line="45" pos:column="55"/></condition><then pos:line="45" pos:column="55">
    <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="5">result<pos:position pos:line="46" pos:column="11"/></name> <operator pos:line="46" pos:column="12">=<pos:position pos:line="46" pos:column="13"/></operator> <name pos:line="46" pos:column="14">MUTT_NEW_MAIL<pos:position pos:line="46" pos:column="27"/></name></expr>;<pos:position pos:line="46" pos:column="28"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="47" pos:column="3">else <if pos:line="47" pos:column="8">if <condition pos:line="47" pos:column="11">(<expr><name><name pos:line="47" pos:column="12">idata<pos:position pos:line="47" pos:column="17"/></name><operator pos:line="47" pos:column="17">-&gt;<pos:position pos:line="47" pos:column="22"/></operator><name pos:line="47" pos:column="19">check_status<pos:position pos:line="47" pos:column="31"/></name></name> <operator pos:line="47" pos:column="32">&amp;<pos:position pos:line="47" pos:column="37"/></operator> <name pos:line="47" pos:column="34">IMAP_FLAGS_PENDING<pos:position pos:line="47" pos:column="52"/></name></expr>)<pos:position pos:line="47" pos:column="53"/></condition><then pos:line="47" pos:column="53">
    <block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="5">result<pos:position pos:line="48" pos:column="11"/></name> <operator pos:line="48" pos:column="12">=<pos:position pos:line="48" pos:column="13"/></operator> <name pos:line="48" pos:column="14">MUTT_FLAGS<pos:position pos:line="48" pos:column="24"/></name></expr>;<pos:position pos:line="48" pos:column="25"/></expr_stmt></block></then></if></elseif></if>

  <expr_stmt><expr><name><name pos:line="50" pos:column="3">idata<pos:position pos:line="50" pos:column="8"/></name><operator pos:line="50" pos:column="8">-&gt;<pos:position pos:line="50" pos:column="13"/></operator><name pos:line="50" pos:column="10">check_status<pos:position pos:line="50" pos:column="22"/></name></name> <operator pos:line="50" pos:column="23">=<pos:position pos:line="50" pos:column="24"/></operator> <literal type="number" pos:line="50" pos:column="25">0<pos:position pos:line="50" pos:column="26"/></literal></expr>;<pos:position pos:line="50" pos:column="27"/></expr_stmt>

  <return pos:line="52" pos:column="3">return <expr><name pos:line="52" pos:column="10">result<pos:position pos:line="52" pos:column="16"/></name></expr>;<pos:position pos:line="52" pos:column="17"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
