<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1277_mutt-1.4.2.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">imap_exec<pos:position pos:line="1" pos:column="14"/></name> <parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">IMAP_DATA<pos:position pos:line="1" pos:column="25"/></name><modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type> <name pos:line="1" pos:column="27">idata<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name><modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type> <name pos:line="1" pos:column="46">cmd<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">int<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">flags<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name><modifier pos:line="3" pos:column="7">*<pos:position pos:line="3" pos:column="8"/></modifier></type> <name pos:line="3" pos:column="9">out<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">outlen<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">rc<pos:position pos:line="5" pos:column="9"/></name></decl>;<pos:position pos:line="5" pos:column="10"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name><name pos:line="7" pos:column="7">idata<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">-&gt;<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="14">status<pos:position pos:line="7" pos:column="20"/></name></name> <operator pos:line="7" pos:column="21">==<pos:position pos:line="7" pos:column="23"/></operator> <name pos:line="7" pos:column="24">IMAP_FATAL<pos:position pos:line="7" pos:column="34"/></name></expr>)<pos:position pos:line="7" pos:column="35"/></condition><then pos:line="7" pos:column="35">
  <block pos:line="8" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">cmd_handle_fatal<pos:position pos:line="9" pos:column="21"/></name> <argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">idata<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>
    <return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">-<pos:position pos:line="10" pos:column="13"/></operator><literal type="number" pos:line="10" pos:column="13">1<pos:position pos:line="10" pos:column="14"/></literal></expr>;<pos:position pos:line="10" pos:column="15"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="13" pos:column="3">/* create sequence for command */</comment>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">cmd_make_sequence<pos:position pos:line="14" pos:column="20"/></name> <argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">idata<pos:position pos:line="14" pos:column="27"/></name></expr></argument>)<pos:position pos:line="14" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
  <comment type="block" pos:line="15" pos:column="3">/* seq, space, cmd, \r\n\0 */</comment>
  <expr_stmt><expr><name pos:line="16" pos:column="3">outlen<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">strlen<pos:position pos:line="16" pos:column="18"/></name> <argument_list pos:line="16" pos:column="19">(<argument><expr><name><name pos:line="16" pos:column="20">idata<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">-&gt;<pos:position pos:line="16" pos:column="30"/></operator><name pos:line="16" pos:column="27">cmd<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">.<pos:position pos:line="16" pos:column="31"/></operator><name pos:line="16" pos:column="31">seq<pos:position pos:line="16" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call> <operator pos:line="16" pos:column="36">+<pos:position pos:line="16" pos:column="37"/></operator> <call><name pos:line="16" pos:column="38">strlen<pos:position pos:line="16" pos:column="44"/></name> <argument_list pos:line="16" pos:column="45">(<argument><expr><name pos:line="16" pos:column="46">cmd<pos:position pos:line="16" pos:column="49"/></name></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></call> <operator pos:line="16" pos:column="51">+<pos:position pos:line="16" pos:column="52"/></operator> <literal type="number" pos:line="16" pos:column="53">4<pos:position pos:line="16" pos:column="54"/></literal></expr>;<pos:position pos:line="16" pos:column="55"/></expr_stmt>
  <expr_stmt><expr><name pos:line="17" pos:column="3">out<pos:position pos:line="17" pos:column="6"/></name> <operator pos:line="17" pos:column="7">=<pos:position pos:line="17" pos:column="8"/></operator> <operator pos:line="17" pos:column="9">(<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">char<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">*<pos:position pos:line="17" pos:column="15"/></operator><operator pos:line="17" pos:column="15">)<pos:position pos:line="17" pos:column="16"/></operator> <call><name pos:line="17" pos:column="17">safe_malloc<pos:position pos:line="17" pos:column="28"/></name> <argument_list pos:line="17" pos:column="29">(<argument><expr><name pos:line="17" pos:column="30">outlen<pos:position pos:line="17" pos:column="36"/></name></expr></argument>)<pos:position pos:line="17" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">snprintf<pos:position pos:line="18" pos:column="11"/></name> <argument_list pos:line="18" pos:column="12">(<argument><expr><name pos:line="18" pos:column="13">out<pos:position pos:line="18" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="18">outlen<pos:position pos:line="18" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="26">"%s %s\r\n"<pos:position pos:line="18" pos:column="37"/></literal></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="39">idata<pos:position pos:line="18" pos:column="44"/></name><operator pos:line="18" pos:column="44">-&gt;<pos:position pos:line="18" pos:column="49"/></operator><name pos:line="18" pos:column="46">cmd<pos:position pos:line="18" pos:column="49"/></name><operator pos:line="18" pos:column="49">.<pos:position pos:line="18" pos:column="50"/></operator><name pos:line="18" pos:column="50">seq<pos:position pos:line="18" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="55">cmd<pos:position pos:line="18" pos:column="58"/></name></expr></argument>)<pos:position pos:line="18" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="60"/></expr_stmt>

  <expr_stmt><expr><name pos:line="20" pos:column="3">rc<pos:position pos:line="20" pos:column="5"/></name> <operator pos:line="20" pos:column="6">=<pos:position pos:line="20" pos:column="7"/></operator> <call><name pos:line="20" pos:column="8">mutt_socket_write_d<pos:position pos:line="20" pos:column="27"/></name> <argument_list pos:line="20" pos:column="28">(<argument><expr><name><name pos:line="20" pos:column="29">idata<pos:position pos:line="20" pos:column="34"/></name><operator pos:line="20" pos:column="34">-&gt;<pos:position pos:line="20" pos:column="39"/></operator><name pos:line="20" pos:column="36">conn<pos:position pos:line="20" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="42">out<pos:position pos:line="20" pos:column="45"/></name></expr></argument>,
    <argument><expr><ternary><condition><expr><name pos:line="21" pos:column="5">flags<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">&amp;<pos:position pos:line="21" pos:column="16"/></operator> <name pos:line="21" pos:column="13">IMAP_CMD_PASS<pos:position pos:line="21" pos:column="26"/></name></expr> ?<pos:position pos:line="21" pos:column="28"/></condition><then pos:line="21" pos:column="28"> <expr><name pos:line="21" pos:column="29">IMAP_LOG_PASS<pos:position pos:line="21" pos:column="42"/></name></expr> <pos:position pos:line="21" pos:column="43"/></then><else pos:line="21" pos:column="43">: <expr><name pos:line="21" pos:column="45">IMAP_LOG_CMD<pos:position pos:line="21" pos:column="57"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="21" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="22" pos:column="3">safe_free<pos:position pos:line="22" pos:column="12"/></name> <argument_list pos:line="22" pos:column="13">(<argument><expr><operator pos:line="22" pos:column="14">(<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">void<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">*<pos:position pos:line="22" pos:column="20"/></operator><operator pos:line="22" pos:column="20">*<pos:position pos:line="22" pos:column="21"/></operator><operator pos:line="22" pos:column="21">)<pos:position pos:line="22" pos:column="22"/></operator> <operator pos:line="22" pos:column="23">&amp;<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="24">out<pos:position pos:line="22" pos:column="27"/></name></expr></argument>)<pos:position pos:line="22" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>

  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><name pos:line="24" pos:column="7">rc<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">&lt;<pos:position pos:line="24" pos:column="14"/></operator> <literal type="number" pos:line="24" pos:column="12">0<pos:position pos:line="24" pos:column="13"/></literal></expr>)<pos:position pos:line="24" pos:column="14"/></condition><then pos:line="24" pos:column="14">
  <block pos:line="25" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">cmd_handle_fatal<pos:position pos:line="26" pos:column="21"/></name> <argument_list pos:line="26" pos:column="22">(<argument><expr><name pos:line="26" pos:column="23">idata<pos:position pos:line="26" pos:column="28"/></name></expr></argument>)<pos:position pos:line="26" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="30"/></expr_stmt>
    <return pos:line="27" pos:column="5">return <expr><operator pos:line="27" pos:column="12">-<pos:position pos:line="27" pos:column="13"/></operator><literal type="number" pos:line="27" pos:column="13">1<pos:position pos:line="27" pos:column="14"/></literal></expr>;<pos:position pos:line="27" pos:column="15"/></return>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>

  <do pos:line="30" pos:column="3">do
    <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="5">rc<pos:position pos:line="31" pos:column="7"/></name> <operator pos:line="31" pos:column="8">=<pos:position pos:line="31" pos:column="9"/></operator> <call><name pos:line="31" pos:column="10">imap_cmd_step<pos:position pos:line="31" pos:column="23"/></name> <argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">idata<pos:position pos:line="31" pos:column="30"/></name></expr></argument>)<pos:position pos:line="31" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt></block>
  while <condition pos:line="32" pos:column="9">(<expr><name pos:line="32" pos:column="10">rc<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">==<pos:position pos:line="32" pos:column="15"/></operator> <name pos:line="32" pos:column="16">IMAP_CMD_CONTINUE<pos:position pos:line="32" pos:column="33"/></name></expr>)<pos:position pos:line="32" pos:column="34"/></condition>;<pos:position pos:line="32" pos:column="35"/></do>

  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><name pos:line="34" pos:column="7">rc<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">==<pos:position pos:line="34" pos:column="12"/></operator> <name pos:line="34" pos:column="13">IMAP_CMD_NO<pos:position pos:line="34" pos:column="24"/></name> <operator pos:line="34" pos:column="25">&amp;&amp;<pos:position pos:line="34" pos:column="35"/></operator> <operator pos:line="34" pos:column="28">(<pos:position pos:line="34" pos:column="29"/></operator><name pos:line="34" pos:column="29">flags<pos:position pos:line="34" pos:column="34"/></name> <operator pos:line="34" pos:column="35">&amp;<pos:position pos:line="34" pos:column="40"/></operator> <name pos:line="34" pos:column="37">IMAP_CMD_FAIL_OK<pos:position pos:line="34" pos:column="53"/></name><operator pos:line="34" pos:column="53">)<pos:position pos:line="34" pos:column="54"/></operator></expr>)<pos:position pos:line="34" pos:column="55"/></condition><then pos:line="34" pos:column="55">
    <block type="pseudo"><return pos:line="35" pos:column="5">return <expr><operator pos:line="35" pos:column="12">-<pos:position pos:line="35" pos:column="13"/></operator><literal type="number" pos:line="35" pos:column="13">2<pos:position pos:line="35" pos:column="14"/></literal></expr>;<pos:position pos:line="35" pos:column="15"/></return></block></then></if>

  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><name pos:line="37" pos:column="7">rc<pos:position pos:line="37" pos:column="9"/></name> <operator pos:line="37" pos:column="10">!=<pos:position pos:line="37" pos:column="12"/></operator> <name pos:line="37" pos:column="13">IMAP_CMD_OK<pos:position pos:line="37" pos:column="24"/></name></expr>)<pos:position pos:line="37" pos:column="25"/></condition><then pos:line="37" pos:column="25">
  <block pos:line="38" pos:column="3">{
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">flags<pos:position pos:line="39" pos:column="14"/></name> <operator pos:line="39" pos:column="15">&amp;<pos:position pos:line="39" pos:column="20"/></operator> <name pos:line="39" pos:column="17">IMAP_CMD_FAIL_OK<pos:position pos:line="39" pos:column="33"/></name></expr>)<pos:position pos:line="39" pos:column="34"/></condition><then pos:line="39" pos:column="34">
      <block type="pseudo"><return pos:line="40" pos:column="7">return <expr><operator pos:line="40" pos:column="14">-<pos:position pos:line="40" pos:column="15"/></operator><literal type="number" pos:line="40" pos:column="15">2<pos:position pos:line="40" pos:column="16"/></literal></expr>;<pos:position pos:line="40" pos:column="17"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="42" pos:column="5">dprint<pos:position pos:line="42" pos:column="11"/></name> <argument_list pos:line="42" pos:column="12">(<argument><expr><literal type="number" pos:line="42" pos:column="13">1<pos:position pos:line="42" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="42" pos:column="16">(<pos:position pos:line="42" pos:column="17"/></operator><name pos:line="42" pos:column="17">debugfile<pos:position pos:line="42" pos:column="26"/></name><operator pos:line="42" pos:column="26">,<pos:position pos:line="42" pos:column="27"/></operator> <literal type="string" pos:line="42" pos:column="28">"imap_exec: command failed: %s\n"<pos:position pos:line="42" pos:column="61"/></literal><operator pos:line="42" pos:column="61">,<pos:position pos:line="42" pos:column="62"/></operator> <name><name pos:line="42" pos:column="63">idata<pos:position pos:line="42" pos:column="68"/></name><operator pos:line="42" pos:column="68">-&gt;<pos:position pos:line="42" pos:column="73"/></operator><name pos:line="42" pos:column="70">cmd<pos:position pos:line="42" pos:column="73"/></name><operator pos:line="42" pos:column="73">.<pos:position pos:line="42" pos:column="74"/></operator><name pos:line="42" pos:column="74">buf<pos:position pos:line="42" pos:column="77"/></name></name><operator pos:line="42" pos:column="77">)<pos:position pos:line="42" pos:column="78"/></operator></expr></argument>)<pos:position pos:line="42" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="80"/></expr_stmt>
    <return pos:line="43" pos:column="5">return <expr><operator pos:line="43" pos:column="12">-<pos:position pos:line="43" pos:column="13"/></operator><literal type="number" pos:line="43" pos:column="13">1<pos:position pos:line="43" pos:column="14"/></literal></expr>;<pos:position pos:line="43" pos:column="15"/></return>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if>

  <return pos:line="46" pos:column="3">return <expr><literal type="number" pos:line="46" pos:column="10">0<pos:position pos:line="46" pos:column="11"/></literal></expr>;<pos:position pos:line="46" pos:column="12"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
