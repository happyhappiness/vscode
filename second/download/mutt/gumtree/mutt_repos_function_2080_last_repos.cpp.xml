<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2080_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">imap_auth_res_t<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">imap_auth_sasl<pos:position pos:line="1" pos:column="31"/></name> <parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">IMAP_DATA<pos:position pos:line="1" pos:column="42"/></name><modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type> <name pos:line="1" pos:column="44">idata<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="51">const<pos:position pos:line="1" pos:column="56"/></specifier> <name pos:line="1" pos:column="57">char<pos:position pos:line="1" pos:column="61"/></name><modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type> <name pos:line="1" pos:column="63">method<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">sasl_conn_t<pos:position pos:line="3" pos:column="14"/></name><modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type> <name pos:line="3" pos:column="16">saslconn<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">sasl_interact_t<pos:position pos:line="4" pos:column="18"/></name><modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type> <name pos:line="4" pos:column="20">interaction<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><name pos:line="4" pos:column="34">NULL<pos:position pos:line="4" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">rc<pos:position pos:line="5" pos:column="9"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="11">irc<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">buf<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><name pos:line="6" pos:column="15">NULL<pos:position pos:line="6" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">bufsize<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><literal type="number" pos:line="7" pos:column="20">0<pos:position pos:line="7" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name><modifier pos:line="8" pos:column="13">*<pos:position pos:line="8" pos:column="14"/></modifier></type> <name pos:line="8" pos:column="15">mech<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">pc<pos:position pos:line="9" pos:column="17"/></name> <init pos:line="9" pos:column="18">= <expr><name pos:line="9" pos:column="20">NULL<pos:position pos:line="9" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">unsigned<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">int<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">len<pos:position pos:line="10" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="21">olen<pos:position pos:line="10" pos:column="25"/></name></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">unsigned<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">char<pos:position pos:line="11" pos:column="16"/></name></type> <name pos:line="11" pos:column="17">client_start<pos:position pos:line="11" pos:column="29"/></name></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><call><name pos:line="13" pos:column="7">mutt_sasl_client_new<pos:position pos:line="13" pos:column="27"/></name> <argument_list pos:line="13" pos:column="28">(<argument><expr><name><name pos:line="13" pos:column="29">idata<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">-&gt;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="36">conn<pos:position pos:line="13" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="42">&amp;<pos:position pos:line="13" pos:column="47"/></operator><name pos:line="13" pos:column="43">saslconn<pos:position pos:line="13" pos:column="51"/></name></expr></argument>)<pos:position pos:line="13" pos:column="52"/></argument_list></call> <operator pos:line="13" pos:column="53">&lt;<pos:position pos:line="13" pos:column="57"/></operator> <literal type="number" pos:line="13" pos:column="55">0<pos:position pos:line="13" pos:column="56"/></literal></expr>)<pos:position pos:line="13" pos:column="57"/></condition><then pos:line="13" pos:column="57">
  <block pos:line="14" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">dprint<pos:position pos:line="15" pos:column="11"/></name> <argument_list pos:line="15" pos:column="12">(<argument><expr><literal type="number" pos:line="15" pos:column="13">1<pos:position pos:line="15" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="15" pos:column="16">(<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">debugfile<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">,<pos:position pos:line="15" pos:column="27"/></operator>
      <literal type="string" pos:line="16" pos:column="7">"imap_auth_sasl: Error allocating SASL connection.\n"<pos:position pos:line="16" pos:column="60"/></literal><operator pos:line="16" pos:column="60">)<pos:position pos:line="16" pos:column="61"/></operator></expr></argument>)<pos:position pos:line="16" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="63"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">IMAP_AUTH_FAILURE<pos:position pos:line="17" pos:column="29"/></name></expr>;<pos:position pos:line="17" pos:column="30"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="20" pos:column="3">rc<pos:position pos:line="20" pos:column="5"/></name> <operator pos:line="20" pos:column="6">=<pos:position pos:line="20" pos:column="7"/></operator> <name pos:line="20" pos:column="8">SASL_FAIL<pos:position pos:line="20" pos:column="17"/></name></expr>;<pos:position pos:line="20" pos:column="18"/></expr_stmt>

  <comment type="block" pos:line="22" pos:column="3">/* If the user hasn't specified a method, use any available */</comment>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><operator pos:line="23" pos:column="7">!<pos:position pos:line="23" pos:column="8"/></operator><name pos:line="23" pos:column="8">method<pos:position pos:line="23" pos:column="14"/></name></expr>)<pos:position pos:line="23" pos:column="15"/></condition><then pos:line="23" pos:column="15">
  <block pos:line="24" pos:column="3">{
    <expr_stmt><expr><name pos:line="25" pos:column="5">method<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <name><name pos:line="25" pos:column="14">idata<pos:position pos:line="25" pos:column="19"/></name><operator pos:line="25" pos:column="19">-&gt;<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="21">capstr<pos:position pos:line="25" pos:column="27"/></name></name></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>

    <comment type="block" pos:line="27" pos:column="5">/* hack for SASL ANONYMOUS support:
     * 1. Fetch username. If it's "" or "anonymous" then
     * 2. attempt sasl_client_start with only "AUTH=ANONYMOUS" capability
     * 3. if sasl_client_start fails, fall through... */</comment>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><call><name pos:line="32" pos:column="9">mutt_account_getuser<pos:position pos:line="32" pos:column="29"/></name> <argument_list pos:line="32" pos:column="30">(<argument><expr><operator pos:line="32" pos:column="31">&amp;<pos:position pos:line="32" pos:column="36"/></operator><name><name pos:line="32" pos:column="32">idata<pos:position pos:line="32" pos:column="37"/></name><operator pos:line="32" pos:column="37">-&gt;<pos:position pos:line="32" pos:column="42"/></operator><name pos:line="32" pos:column="39">conn<pos:position pos:line="32" pos:column="43"/></name><operator pos:line="32" pos:column="43">-&gt;<pos:position pos:line="32" pos:column="48"/></operator><name pos:line="32" pos:column="45">account<pos:position pos:line="32" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="54"/></condition><then pos:line="32" pos:column="54">
      <block type="pseudo"><return pos:line="33" pos:column="7">return <expr><name pos:line="33" pos:column="14">IMAP_AUTH_FAILURE<pos:position pos:line="33" pos:column="31"/></name></expr>;<pos:position pos:line="33" pos:column="32"/></return></block></then></if>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><call><name pos:line="35" pos:column="9">mutt_bit_isset<pos:position pos:line="35" pos:column="23"/></name> <argument_list pos:line="35" pos:column="24">(<argument><expr><name><name pos:line="35" pos:column="25">idata<pos:position pos:line="35" pos:column="30"/></name><operator pos:line="35" pos:column="30">-&gt;<pos:position pos:line="35" pos:column="35"/></operator><name pos:line="35" pos:column="32">capabilities<pos:position pos:line="35" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="46">AUTH_ANON<pos:position pos:line="35" pos:column="55"/></name></expr></argument>)<pos:position pos:line="35" pos:column="56"/></argument_list></call> <operator pos:line="35" pos:column="57">&amp;&amp;<pos:position pos:line="35" pos:column="67"/></operator>
	<operator pos:line="36" pos:column="9">(<pos:position pos:line="36" pos:column="10"/></operator><operator pos:line="36" pos:column="10">!<pos:position pos:line="36" pos:column="11"/></operator><name><name pos:line="36" pos:column="11">idata<pos:position pos:line="36" pos:column="16"/></name><operator pos:line="36" pos:column="16">-&gt;<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="18">conn<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">-&gt;<pos:position pos:line="36" pos:column="27"/></operator><name pos:line="36" pos:column="24">account<pos:position pos:line="36" pos:column="31"/></name><operator pos:line="36" pos:column="31">.<pos:position pos:line="36" pos:column="32"/></operator><name pos:line="36" pos:column="32">user<pos:position pos:line="36" pos:column="36"/></name><index pos:line="36" pos:column="36">[<expr><literal type="number" pos:line="36" pos:column="37">0<pos:position pos:line="36" pos:column="38"/></literal></expr>]<pos:position pos:line="36" pos:column="39"/></index></name> <operator pos:line="36" pos:column="40">||<pos:position pos:line="36" pos:column="42"/></operator>
	 <operator pos:line="37" pos:column="10">!<pos:position pos:line="37" pos:column="11"/></operator><call><name pos:line="37" pos:column="11">ascii_strncmp<pos:position pos:line="37" pos:column="24"/></name> <argument_list pos:line="37" pos:column="25">(<argument><expr><name><name pos:line="37" pos:column="26">idata<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">-&gt;<pos:position pos:line="37" pos:column="36"/></operator><name pos:line="37" pos:column="33">conn<pos:position pos:line="37" pos:column="37"/></name><operator pos:line="37" pos:column="37">-&gt;<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="39">account<pos:position pos:line="37" pos:column="46"/></name><operator pos:line="37" pos:column="46">.<pos:position pos:line="37" pos:column="47"/></operator><name pos:line="37" pos:column="47">user<pos:position pos:line="37" pos:column="51"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="53">"anonymous"<pos:position pos:line="37" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="66">9<pos:position pos:line="37" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="68"/></argument_list></call><operator pos:line="37" pos:column="68">)<pos:position pos:line="37" pos:column="69"/></operator></expr>)<pos:position pos:line="37" pos:column="70"/></condition><then pos:line="37" pos:column="70">
      <block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="7">rc<pos:position pos:line="38" pos:column="9"/></name> <operator pos:line="38" pos:column="10">=<pos:position pos:line="38" pos:column="11"/></operator> <call><name pos:line="38" pos:column="12">sasl_client_start<pos:position pos:line="38" pos:column="29"/></name> <argument_list pos:line="38" pos:column="30">(<argument><expr><name pos:line="38" pos:column="31">saslconn<pos:position pos:line="38" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="41">"AUTH=ANONYMOUS"<pos:position pos:line="38" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="59">NULL<pos:position pos:line="38" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="65">&amp;<pos:position pos:line="38" pos:column="70"/></operator><name pos:line="38" pos:column="66">pc<pos:position pos:line="38" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="70">&amp;<pos:position pos:line="38" pos:column="75"/></operator><name pos:line="38" pos:column="71">olen<pos:position pos:line="38" pos:column="75"/></name></expr></argument>, 
                              <argument><expr><operator pos:line="39" pos:column="31">&amp;<pos:position pos:line="39" pos:column="36"/></operator><name pos:line="39" pos:column="32">mech<pos:position pos:line="39" pos:column="36"/></name></expr></argument>)<pos:position pos:line="39" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="38"/></expr_stmt></block></then></if>
  }<pos:position pos:line="40" pos:column="4"/></block></then> <elseif pos:line="40" pos:column="5">else <if pos:line="40" pos:column="10">if <condition pos:line="40" pos:column="13">(<expr><operator pos:line="40" pos:column="14">!<pos:position pos:line="40" pos:column="15"/></operator><call><name pos:line="40" pos:column="15">ascii_strcasecmp<pos:position pos:line="40" pos:column="31"/></name> <argument_list pos:line="40" pos:column="32">(<argument><expr><literal type="string" pos:line="40" pos:column="33">"login"<pos:position pos:line="40" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="42">method<pos:position pos:line="40" pos:column="48"/></name></expr></argument>)<pos:position pos:line="40" pos:column="49"/></argument_list></call> <operator pos:line="40" pos:column="50">&amp;&amp;<pos:position pos:line="40" pos:column="60"/></operator>
	<operator pos:line="41" pos:column="9">!<pos:position pos:line="41" pos:column="10"/></operator><call><name pos:line="41" pos:column="10">strstr<pos:position pos:line="41" pos:column="16"/></name> <argument_list pos:line="41" pos:column="17">(<argument><expr><call><name pos:line="41" pos:column="18">NONULL<pos:position pos:line="41" pos:column="24"/></name> <argument_list pos:line="41" pos:column="25">(<argument><expr><name><name pos:line="41" pos:column="26">idata<pos:position pos:line="41" pos:column="31"/></name><operator pos:line="41" pos:column="31">-&gt;<pos:position pos:line="41" pos:column="36"/></operator><name pos:line="41" pos:column="33">capstr<pos:position pos:line="41" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="42">"AUTH=LOGIN"<pos:position pos:line="41" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="56"/></condition><then pos:line="41" pos:column="56">
    <comment type="block" pos:line="42" pos:column="5">/* do not use SASL login for regular IMAP login (#3556) */</comment>
    <block type="pseudo"><return pos:line="43" pos:column="5">return <expr><name pos:line="43" pos:column="12">IMAP_AUTH_UNAVAIL<pos:position pos:line="43" pos:column="29"/></name></expr>;<pos:position pos:line="43" pos:column="30"/></return></block></then></if></elseif></if>
  
  <if pos:line="45" pos:column="3">if <condition pos:line="45" pos:column="6">(<expr><name pos:line="45" pos:column="7">rc<pos:position pos:line="45" pos:column="9"/></name> <operator pos:line="45" pos:column="10">!=<pos:position pos:line="45" pos:column="12"/></operator> <name pos:line="45" pos:column="13">SASL_OK<pos:position pos:line="45" pos:column="20"/></name> <operator pos:line="45" pos:column="21">&amp;&amp;<pos:position pos:line="45" pos:column="31"/></operator> <name pos:line="45" pos:column="24">rc<pos:position pos:line="45" pos:column="26"/></name> <operator pos:line="45" pos:column="27">!=<pos:position pos:line="45" pos:column="29"/></operator> <name pos:line="45" pos:column="30">SASL_CONTINUE<pos:position pos:line="45" pos:column="43"/></name></expr>)<pos:position pos:line="45" pos:column="44"/></condition><then pos:line="45" pos:column="44">
    <block type="pseudo"><do pos:line="46" pos:column="5">do
    <block pos:line="47" pos:column="5">{
      <expr_stmt><expr><name pos:line="48" pos:column="7">rc<pos:position pos:line="48" pos:column="9"/></name> <operator pos:line="48" pos:column="10">=<pos:position pos:line="48" pos:column="11"/></operator> <call><name pos:line="48" pos:column="12">sasl_client_start<pos:position pos:line="48" pos:column="29"/></name> <argument_list pos:line="48" pos:column="30">(<argument><expr><name pos:line="48" pos:column="31">saslconn<pos:position pos:line="48" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="41">method<pos:position pos:line="48" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="49">&amp;<pos:position pos:line="48" pos:column="54"/></operator><name pos:line="48" pos:column="50">interaction<pos:position pos:line="48" pos:column="61"/></name></expr></argument>,
        <argument><expr><operator pos:line="49" pos:column="9">&amp;<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="10">pc<pos:position pos:line="49" pos:column="12"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="14">&amp;<pos:position pos:line="49" pos:column="19"/></operator><name pos:line="49" pos:column="15">olen<pos:position pos:line="49" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="21">&amp;<pos:position pos:line="49" pos:column="26"/></operator><name pos:line="49" pos:column="22">mech<pos:position pos:line="49" pos:column="26"/></name></expr></argument>)<pos:position pos:line="49" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="28"/></expr_stmt>
      <if pos:line="50" pos:column="7">if <condition pos:line="50" pos:column="10">(<expr><name pos:line="50" pos:column="11">rc<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">==<pos:position pos:line="50" pos:column="16"/></operator> <name pos:line="50" pos:column="17">SASL_INTERACT<pos:position pos:line="50" pos:column="30"/></name></expr>)<pos:position pos:line="50" pos:column="31"/></condition><then pos:line="50" pos:column="31">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="9">mutt_sasl_interact<pos:position pos:line="51" pos:column="27"/></name> <argument_list pos:line="51" pos:column="28">(<argument><expr><name pos:line="51" pos:column="29">interaction<pos:position pos:line="51" pos:column="40"/></name></expr></argument>)<pos:position pos:line="51" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="42"/></expr_stmt></block></then></if>
    }<pos:position pos:line="52" pos:column="6"/></block>
    while <condition pos:line="53" pos:column="11">(<expr><name pos:line="53" pos:column="12">rc<pos:position pos:line="53" pos:column="14"/></name> <operator pos:line="53" pos:column="15">==<pos:position pos:line="53" pos:column="17"/></operator> <name pos:line="53" pos:column="18">SASL_INTERACT<pos:position pos:line="53" pos:column="31"/></name></expr>)<pos:position pos:line="53" pos:column="32"/></condition>;<pos:position pos:line="53" pos:column="33"/></do></block></then></if>

  <expr_stmt><expr><name pos:line="55" pos:column="3">client_start<pos:position pos:line="55" pos:column="15"/></name> <operator pos:line="55" pos:column="16">=<pos:position pos:line="55" pos:column="17"/></operator> <operator pos:line="55" pos:column="18">(<pos:position pos:line="55" pos:column="19"/></operator><name pos:line="55" pos:column="19">olen<pos:position pos:line="55" pos:column="23"/></name> <operator pos:line="55" pos:column="24">&gt;<pos:position pos:line="55" pos:column="28"/></operator> <literal type="number" pos:line="55" pos:column="26">0<pos:position pos:line="55" pos:column="27"/></literal><operator pos:line="55" pos:column="27">)<pos:position pos:line="55" pos:column="28"/></operator></expr>;<pos:position pos:line="55" pos:column="29"/></expr_stmt>

  <if pos:line="57" pos:column="3">if <condition pos:line="57" pos:column="6">(<expr><name pos:line="57" pos:column="7">rc<pos:position pos:line="57" pos:column="9"/></name> <operator pos:line="57" pos:column="10">!=<pos:position pos:line="57" pos:column="12"/></operator> <name pos:line="57" pos:column="13">SASL_OK<pos:position pos:line="57" pos:column="20"/></name> <operator pos:line="57" pos:column="21">&amp;&amp;<pos:position pos:line="57" pos:column="31"/></operator> <name pos:line="57" pos:column="24">rc<pos:position pos:line="57" pos:column="26"/></name> <operator pos:line="57" pos:column="27">!=<pos:position pos:line="57" pos:column="29"/></operator> <name pos:line="57" pos:column="30">SASL_CONTINUE<pos:position pos:line="57" pos:column="43"/></name></expr>)<pos:position pos:line="57" pos:column="44"/></condition><then pos:line="57" pos:column="44">
  <block pos:line="58" pos:column="3">{
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name pos:line="59" pos:column="9">method<pos:position pos:line="59" pos:column="15"/></name></expr>)<pos:position pos:line="59" pos:column="16"/></condition><then pos:line="59" pos:column="16">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="7">dprint<pos:position pos:line="60" pos:column="13"/></name> <argument_list pos:line="60" pos:column="14">(<argument><expr><literal type="number" pos:line="60" pos:column="15">2<pos:position pos:line="60" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="60" pos:column="18">(<pos:position pos:line="60" pos:column="19"/></operator><name pos:line="60" pos:column="19">debugfile<pos:position pos:line="60" pos:column="28"/></name><operator pos:line="60" pos:column="28">,<pos:position pos:line="60" pos:column="29"/></operator> <literal type="string" pos:line="60" pos:column="30">"imap_auth_sasl: %s unavailable\n"<pos:position pos:line="60" pos:column="64"/></literal><operator pos:line="60" pos:column="64">,<pos:position pos:line="60" pos:column="65"/></operator> <name pos:line="60" pos:column="66">method<pos:position pos:line="60" pos:column="72"/></name><operator pos:line="60" pos:column="72">)<pos:position pos:line="60" pos:column="73"/></operator></expr></argument>)<pos:position pos:line="60" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="75"/></expr_stmt></block></then>
    <else pos:line="61" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="7">dprint<pos:position pos:line="62" pos:column="13"/></name> <argument_list pos:line="62" pos:column="14">(<argument><expr><literal type="number" pos:line="62" pos:column="15">1<pos:position pos:line="62" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="62" pos:column="18">(<pos:position pos:line="62" pos:column="19"/></operator><name pos:line="62" pos:column="19">debugfile<pos:position pos:line="62" pos:column="28"/></name><operator pos:line="62" pos:column="28">,<pos:position pos:line="62" pos:column="29"/></operator> <literal type="string" pos:line="62" pos:column="30">"imap_auth_sasl: Failure starting authentication exchange. No shared mechanisms?\n"<pos:position pos:line="62" pos:column="113"/></literal><operator pos:line="62" pos:column="113">)<pos:position pos:line="62" pos:column="114"/></operator></expr></argument>)<pos:position pos:line="62" pos:column="115"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="116"/></expr_stmt></block></else></if>
    <comment type="block" pos:line="63" pos:column="5">/* SASL doesn't support LOGIN, so fall back */</comment>

    <return pos:line="65" pos:column="5">return <expr><name pos:line="65" pos:column="12">IMAP_AUTH_UNAVAIL<pos:position pos:line="65" pos:column="29"/></name></expr>;<pos:position pos:line="65" pos:column="30"/></return>
  }<pos:position pos:line="66" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="68" pos:column="3">mutt_message<pos:position pos:line="68" pos:column="15"/></name> <argument_list pos:line="68" pos:column="16">(<argument><expr><call><name pos:line="68" pos:column="17">_<pos:position pos:line="68" pos:column="18"/></name><argument_list pos:line="68" pos:column="18">(<argument><expr><literal type="string" pos:line="68" pos:column="19">"Authenticating (%s)..."<pos:position pos:line="68" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="68" pos:column="46">mech<pos:position pos:line="68" pos:column="50"/></name></expr></argument>)<pos:position pos:line="68" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="52"/></expr_stmt>

  <expr_stmt><expr><name pos:line="70" pos:column="3">bufsize<pos:position pos:line="70" pos:column="10"/></name> <operator pos:line="70" pos:column="11">=<pos:position pos:line="70" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="70" pos:column="13">(<pos:position pos:line="70" pos:column="14"/></operator><operator pos:line="70" pos:column="14">(<pos:position pos:line="70" pos:column="15"/></operator><name pos:line="70" pos:column="15">olen<pos:position pos:line="70" pos:column="19"/></name> <operator pos:line="70" pos:column="20">*<pos:position pos:line="70" pos:column="21"/></operator> <literal type="number" pos:line="70" pos:column="22">2<pos:position pos:line="70" pos:column="23"/></literal><operator pos:line="70" pos:column="23">)<pos:position pos:line="70" pos:column="24"/></operator> <operator pos:line="70" pos:column="25">&gt;<pos:position pos:line="70" pos:column="29"/></operator> <name pos:line="70" pos:column="27">LONG_STRING<pos:position pos:line="70" pos:column="38"/></name><operator pos:line="70" pos:column="38">)<pos:position pos:line="70" pos:column="39"/></operator></expr> ?<pos:position pos:line="70" pos:column="41"/></condition><then pos:line="70" pos:column="41"> <expr><operator pos:line="70" pos:column="42">(<pos:position pos:line="70" pos:column="43"/></operator><name pos:line="70" pos:column="43">olen<pos:position pos:line="70" pos:column="47"/></name> <operator pos:line="70" pos:column="48">*<pos:position pos:line="70" pos:column="49"/></operator> <literal type="number" pos:line="70" pos:column="50">2<pos:position pos:line="70" pos:column="51"/></literal><operator pos:line="70" pos:column="51">)<pos:position pos:line="70" pos:column="52"/></operator></expr> <pos:position pos:line="70" pos:column="53"/></then><else pos:line="70" pos:column="53">: <expr><name pos:line="70" pos:column="55">LONG_STRING<pos:position pos:line="70" pos:column="66"/></name></expr></else></ternary></expr>;<pos:position pos:line="70" pos:column="67"/></expr_stmt>
  <expr_stmt><expr><name pos:line="71" pos:column="3">buf<pos:position pos:line="71" pos:column="6"/></name> <operator pos:line="71" pos:column="7">=<pos:position pos:line="71" pos:column="8"/></operator> <call><name pos:line="71" pos:column="9">safe_malloc<pos:position pos:line="71" pos:column="20"/></name> <argument_list pos:line="71" pos:column="21">(<argument><expr><name pos:line="71" pos:column="22">bufsize<pos:position pos:line="71" pos:column="29"/></name></expr></argument>)<pos:position pos:line="71" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="31"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="73" pos:column="3">snprintf<pos:position pos:line="73" pos:column="11"/></name> <argument_list pos:line="73" pos:column="12">(<argument><expr><name pos:line="73" pos:column="13">buf<pos:position pos:line="73" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="18">bufsize<pos:position pos:line="73" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="27">"AUTHENTICATE %s"<pos:position pos:line="73" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="46">mech<pos:position pos:line="73" pos:column="50"/></name></expr></argument>)<pos:position pos:line="73" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="52"/></expr_stmt>
  <if pos:line="74" pos:column="3">if <condition pos:line="74" pos:column="6">(<expr><call><name pos:line="74" pos:column="7">mutt_bit_isset<pos:position pos:line="74" pos:column="21"/></name> <argument_list pos:line="74" pos:column="22">(<argument><expr><name><name pos:line="74" pos:column="23">idata<pos:position pos:line="74" pos:column="28"/></name><operator pos:line="74" pos:column="28">-&gt;<pos:position pos:line="74" pos:column="33"/></operator><name pos:line="74" pos:column="30">capabilities<pos:position pos:line="74" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="44">SASL_IR<pos:position pos:line="74" pos:column="51"/></name></expr></argument>)<pos:position pos:line="74" pos:column="52"/></argument_list></call> <operator pos:line="74" pos:column="53">&amp;&amp;<pos:position pos:line="74" pos:column="63"/></operator> <name pos:line="74" pos:column="56">client_start<pos:position pos:line="74" pos:column="68"/></name></expr>)<pos:position pos:line="74" pos:column="69"/></condition><then pos:line="74" pos:column="69">
  <block pos:line="75" pos:column="3">{
    <expr_stmt><expr><name pos:line="76" pos:column="5">len<pos:position pos:line="76" pos:column="8"/></name> <operator pos:line="76" pos:column="9">=<pos:position pos:line="76" pos:column="10"/></operator> <call><name pos:line="76" pos:column="11">mutt_strlen<pos:position pos:line="76" pos:column="22"/></name> <argument_list pos:line="76" pos:column="23">(<argument><expr><name pos:line="76" pos:column="24">buf<pos:position pos:line="76" pos:column="27"/></name></expr></argument>)<pos:position pos:line="76" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="77" pos:column="5">buf<pos:position pos:line="77" pos:column="8"/></name><index pos:line="77" pos:column="8">[<expr><name pos:line="77" pos:column="9">len<pos:position pos:line="77" pos:column="12"/></name><operator pos:line="77" pos:column="12">++<pos:position pos:line="77" pos:column="14"/></operator></expr>]<pos:position pos:line="77" pos:column="15"/></index></name> <operator pos:line="77" pos:column="16">=<pos:position pos:line="77" pos:column="17"/></operator> <literal type="char" pos:line="77" pos:column="18">' '<pos:position pos:line="77" pos:column="21"/></literal></expr>;<pos:position pos:line="77" pos:column="22"/></expr_stmt>
    <if pos:line="78" pos:column="5">if <condition pos:line="78" pos:column="8">(<expr><call><name pos:line="78" pos:column="9">sasl_encode64<pos:position pos:line="78" pos:column="22"/></name> <argument_list pos:line="78" pos:column="23">(<argument><expr><name pos:line="78" pos:column="24">pc<pos:position pos:line="78" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="28">olen<pos:position pos:line="78" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="34">buf<pos:position pos:line="78" pos:column="37"/></name> <operator pos:line="78" pos:column="38">+<pos:position pos:line="78" pos:column="39"/></operator> <name pos:line="78" pos:column="40">len<pos:position pos:line="78" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="45">bufsize<pos:position pos:line="78" pos:column="52"/></name> <operator pos:line="78" pos:column="53">-<pos:position pos:line="78" pos:column="54"/></operator> <name pos:line="78" pos:column="55">len<pos:position pos:line="78" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="60">&amp;<pos:position pos:line="78" pos:column="65"/></operator><name pos:line="78" pos:column="61">olen<pos:position pos:line="78" pos:column="65"/></name></expr></argument>)<pos:position pos:line="78" pos:column="66"/></argument_list></call> <operator pos:line="78" pos:column="67">!=<pos:position pos:line="78" pos:column="69"/></operator> <name pos:line="78" pos:column="70">SASL_OK<pos:position pos:line="78" pos:column="77"/></name></expr>)<pos:position pos:line="78" pos:column="78"/></condition><then pos:line="78" pos:column="78">
    <block pos:line="79" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="80" pos:column="7">dprint<pos:position pos:line="80" pos:column="13"/></name> <argument_list pos:line="80" pos:column="14">(<argument><expr><literal type="number" pos:line="80" pos:column="15">1<pos:position pos:line="80" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="80" pos:column="18">(<pos:position pos:line="80" pos:column="19"/></operator><name pos:line="80" pos:column="19">debugfile<pos:position pos:line="80" pos:column="28"/></name><operator pos:line="80" pos:column="28">,<pos:position pos:line="80" pos:column="29"/></operator> <literal type="string" pos:line="80" pos:column="30">"imap_auth_sasl: error base64-encoding client response.\n"<pos:position pos:line="80" pos:column="88"/></literal><operator pos:line="80" pos:column="88">)<pos:position pos:line="80" pos:column="89"/></operator></expr></argument>)<pos:position pos:line="80" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="91"/></expr_stmt>
      <goto pos:line="81" pos:column="7">goto <name pos:line="81" pos:column="12">bail<pos:position pos:line="81" pos:column="16"/></name>;<pos:position pos:line="81" pos:column="17"/></goto>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="83" pos:column="5">client_start<pos:position pos:line="83" pos:column="17"/></name> <operator pos:line="83" pos:column="18">=<pos:position pos:line="83" pos:column="19"/></operator> <name pos:line="83" pos:column="20">olen<pos:position pos:line="83" pos:column="24"/></name> <operator pos:line="83" pos:column="25">=<pos:position pos:line="83" pos:column="26"/></operator> <literal type="number" pos:line="83" pos:column="27">0<pos:position pos:line="83" pos:column="28"/></literal></expr>;<pos:position pos:line="83" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="84" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="85" pos:column="3">imap_cmd_start<pos:position pos:line="85" pos:column="17"/></name> <argument_list pos:line="85" pos:column="18">(<argument><expr><name pos:line="85" pos:column="19">idata<pos:position pos:line="85" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="26">buf<pos:position pos:line="85" pos:column="29"/></name></expr></argument>)<pos:position pos:line="85" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="86" pos:column="3">irc<pos:position pos:line="86" pos:column="6"/></name> <operator pos:line="86" pos:column="7">=<pos:position pos:line="86" pos:column="8"/></operator> <name pos:line="86" pos:column="9">IMAP_CMD_CONTINUE<pos:position pos:line="86" pos:column="26"/></name></expr>;<pos:position pos:line="86" pos:column="27"/></expr_stmt>

  <comment type="block" pos:line="88" pos:column="3">/* looping protocol */</comment>
  <while pos:line="89" pos:column="3">while <condition pos:line="89" pos:column="9">(<expr><name pos:line="89" pos:column="10">rc<pos:position pos:line="89" pos:column="12"/></name> <operator pos:line="89" pos:column="13">==<pos:position pos:line="89" pos:column="15"/></operator> <name pos:line="89" pos:column="16">SASL_CONTINUE<pos:position pos:line="89" pos:column="29"/></name> <operator pos:line="89" pos:column="30">||<pos:position pos:line="89" pos:column="32"/></operator> <name pos:line="89" pos:column="33">olen<pos:position pos:line="89" pos:column="37"/></name> <operator pos:line="89" pos:column="38">&gt;<pos:position pos:line="89" pos:column="42"/></operator> <literal type="number" pos:line="89" pos:column="40">0<pos:position pos:line="89" pos:column="41"/></literal></expr>)<pos:position pos:line="89" pos:column="42"/></condition>
  <block pos:line="90" pos:column="3">{
    <do pos:line="91" pos:column="5">do
      <block type="pseudo"><expr_stmt><expr><name pos:line="92" pos:column="7">irc<pos:position pos:line="92" pos:column="10"/></name> <operator pos:line="92" pos:column="11">=<pos:position pos:line="92" pos:column="12"/></operator> <call><name pos:line="92" pos:column="13">imap_cmd_step<pos:position pos:line="92" pos:column="26"/></name> <argument_list pos:line="92" pos:column="27">(<argument><expr><name pos:line="92" pos:column="28">idata<pos:position pos:line="92" pos:column="33"/></name></expr></argument>)<pos:position pos:line="92" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="35"/></expr_stmt></block>
    while <condition pos:line="93" pos:column="11">(<expr><name pos:line="93" pos:column="12">irc<pos:position pos:line="93" pos:column="15"/></name> <operator pos:line="93" pos:column="16">==<pos:position pos:line="93" pos:column="18"/></operator> <name pos:line="93" pos:column="19">IMAP_CMD_CONTINUE<pos:position pos:line="93" pos:column="36"/></name></expr>)<pos:position pos:line="93" pos:column="37"/></condition>;<pos:position pos:line="93" pos:column="38"/></do>

    <if pos:line="95" pos:column="5">if <condition pos:line="95" pos:column="8">(<expr><name pos:line="95" pos:column="9">irc<pos:position pos:line="95" pos:column="12"/></name> <operator pos:line="95" pos:column="13">==<pos:position pos:line="95" pos:column="15"/></operator> <name pos:line="95" pos:column="16">IMAP_CMD_BAD<pos:position pos:line="95" pos:column="28"/></name> <operator pos:line="95" pos:column="29">||<pos:position pos:line="95" pos:column="31"/></operator> <name pos:line="95" pos:column="32">irc<pos:position pos:line="95" pos:column="35"/></name> <operator pos:line="95" pos:column="36">==<pos:position pos:line="95" pos:column="38"/></operator> <name pos:line="95" pos:column="39">IMAP_CMD_NO<pos:position pos:line="95" pos:column="50"/></name></expr>)<pos:position pos:line="95" pos:column="51"/></condition><then pos:line="95" pos:column="51">
      <block type="pseudo"><goto pos:line="96" pos:column="7">goto <name pos:line="96" pos:column="12">bail<pos:position pos:line="96" pos:column="16"/></name>;<pos:position pos:line="96" pos:column="17"/></goto></block></then></if>

    <if pos:line="98" pos:column="5">if <condition pos:line="98" pos:column="8">(<expr><name pos:line="98" pos:column="9">irc<pos:position pos:line="98" pos:column="12"/></name> <operator pos:line="98" pos:column="13">==<pos:position pos:line="98" pos:column="15"/></operator> <name pos:line="98" pos:column="16">IMAP_CMD_RESPOND<pos:position pos:line="98" pos:column="32"/></name></expr>)<pos:position pos:line="98" pos:column="33"/></condition><then pos:line="98" pos:column="33">
    <block pos:line="99" pos:column="5">{
      <comment type="block" pos:line="100" pos:column="7">/* Exchange incorrectly returns +\r\n instead of + \r\n */</comment>
      <if pos:line="101" pos:column="7">if <condition pos:line="101" pos:column="10">(<expr><name><name pos:line="101" pos:column="11">idata<pos:position pos:line="101" pos:column="16"/></name><operator pos:line="101" pos:column="16">-&gt;<pos:position pos:line="101" pos:column="21"/></operator><name pos:line="101" pos:column="18">buf<pos:position pos:line="101" pos:column="21"/></name><index pos:line="101" pos:column="21">[<expr><literal type="number" pos:line="101" pos:column="22">1<pos:position pos:line="101" pos:column="23"/></literal></expr>]<pos:position pos:line="101" pos:column="24"/></index></name> <operator pos:line="101" pos:column="25">==<pos:position pos:line="101" pos:column="27"/></operator> <literal type="char" pos:line="101" pos:column="28">'\0'<pos:position pos:line="101" pos:column="32"/></literal></expr>)<pos:position pos:line="101" pos:column="33"/></condition><then pos:line="101" pos:column="33">
      <block pos:line="102" pos:column="7">{
	<expr_stmt><expr><name><name pos:line="103" pos:column="9">buf<pos:position pos:line="103" pos:column="12"/></name><index pos:line="103" pos:column="12">[<expr><literal type="number" pos:line="103" pos:column="13">0<pos:position pos:line="103" pos:column="14"/></literal></expr>]<pos:position pos:line="103" pos:column="15"/></index></name> <operator pos:line="103" pos:column="16">=<pos:position pos:line="103" pos:column="17"/></operator> <literal type="char" pos:line="103" pos:column="18">'\0'<pos:position pos:line="103" pos:column="22"/></literal></expr>;<pos:position pos:line="103" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><name pos:line="104" pos:column="9">len<pos:position pos:line="104" pos:column="12"/></name> <operator pos:line="104" pos:column="13">=<pos:position pos:line="104" pos:column="14"/></operator> <literal type="number" pos:line="104" pos:column="15">0<pos:position pos:line="104" pos:column="16"/></literal></expr>;<pos:position pos:line="104" pos:column="17"/></expr_stmt>
      }<pos:position pos:line="105" pos:column="8"/></block></then>
      <else pos:line="106" pos:column="7">else
      <block pos:line="107" pos:column="7">{
        <expr_stmt><expr><name pos:line="108" pos:column="9">len<pos:position pos:line="108" pos:column="12"/></name> <operator pos:line="108" pos:column="13">=<pos:position pos:line="108" pos:column="14"/></operator> <call><name pos:line="108" pos:column="15">strlen<pos:position pos:line="108" pos:column="21"/></name> <argument_list pos:line="108" pos:column="22">(<argument><expr><name><name pos:line="108" pos:column="23">idata<pos:position pos:line="108" pos:column="28"/></name><operator pos:line="108" pos:column="28">-&gt;<pos:position pos:line="108" pos:column="33"/></operator><name pos:line="108" pos:column="30">buf<pos:position pos:line="108" pos:column="33"/></name></name> <operator pos:line="108" pos:column="34">+<pos:position pos:line="108" pos:column="35"/></operator> <literal type="number" pos:line="108" pos:column="36">2<pos:position pos:line="108" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="39"/></expr_stmt>
        <if pos:line="109" pos:column="9">if <condition pos:line="109" pos:column="12">(<expr><name pos:line="109" pos:column="13">len<pos:position pos:line="109" pos:column="16"/></name> <operator pos:line="109" pos:column="17">&gt;<pos:position pos:line="109" pos:column="21"/></operator> <name pos:line="109" pos:column="19">bufsize<pos:position pos:line="109" pos:column="26"/></name></expr>)<pos:position pos:line="109" pos:column="27"/></condition><then pos:line="109" pos:column="27">
        <block pos:line="110" pos:column="9">{
          <expr_stmt><expr><name pos:line="111" pos:column="11">bufsize<pos:position pos:line="111" pos:column="18"/></name> <operator pos:line="111" pos:column="19">=<pos:position pos:line="111" pos:column="20"/></operator> <name pos:line="111" pos:column="21">len<pos:position pos:line="111" pos:column="24"/></name></expr>;<pos:position pos:line="111" pos:column="25"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="112" pos:column="11">safe_realloc<pos:position pos:line="112" pos:column="23"/></name> <argument_list pos:line="112" pos:column="24">(<argument><expr><operator pos:line="112" pos:column="25">&amp;<pos:position pos:line="112" pos:column="30"/></operator><name pos:line="112" pos:column="26">buf<pos:position pos:line="112" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="31">bufsize<pos:position pos:line="112" pos:column="38"/></name></expr></argument>)<pos:position pos:line="112" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="113" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="114" pos:column="9">/* For sasl_decode64, the fourth parameter, outmax, doesn't
         * include space for the trailing null */</comment>
        <if pos:line="116" pos:column="9">if <condition pos:line="116" pos:column="12">(<expr><call><name pos:line="116" pos:column="13">sasl_decode64<pos:position pos:line="116" pos:column="26"/></name> <argument_list pos:line="116" pos:column="27">(<argument><expr><name><name pos:line="116" pos:column="28">idata<pos:position pos:line="116" pos:column="33"/></name><operator pos:line="116" pos:column="33">-&gt;<pos:position pos:line="116" pos:column="38"/></operator><name pos:line="116" pos:column="35">buf<pos:position pos:line="116" pos:column="38"/></name></name><operator pos:line="116" pos:column="38">+<pos:position pos:line="116" pos:column="39"/></operator><literal type="number" pos:line="116" pos:column="39">2<pos:position pos:line="116" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="116" pos:column="42">len<pos:position pos:line="116" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="47">buf<pos:position pos:line="116" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="52">bufsize<pos:position pos:line="116" pos:column="59"/></name> <operator pos:line="116" pos:column="60">-<pos:position pos:line="116" pos:column="61"/></operator> <literal type="number" pos:line="116" pos:column="62">1<pos:position pos:line="116" pos:column="63"/></literal></expr></argument>, <argument><expr><operator pos:line="116" pos:column="65">&amp;<pos:position pos:line="116" pos:column="70"/></operator><name pos:line="116" pos:column="66">len<pos:position pos:line="116" pos:column="69"/></name></expr></argument>)<pos:position pos:line="116" pos:column="70"/></argument_list></call> <operator pos:line="116" pos:column="71">!=<pos:position pos:line="116" pos:column="73"/></operator> <name pos:line="116" pos:column="74">SASL_OK<pos:position pos:line="116" pos:column="81"/></name></expr>)<pos:position pos:line="116" pos:column="82"/></condition><then pos:line="116" pos:column="82">
        <block pos:line="117" pos:column="9">{
          <expr_stmt><expr><call><name pos:line="118" pos:column="11">dprint<pos:position pos:line="118" pos:column="17"/></name> <argument_list pos:line="118" pos:column="18">(<argument><expr><literal type="number" pos:line="118" pos:column="19">1<pos:position pos:line="118" pos:column="20"/></literal></expr></argument>, <argument><expr><operator pos:line="118" pos:column="22">(<pos:position pos:line="118" pos:column="23"/></operator><name pos:line="118" pos:column="23">debugfile<pos:position pos:line="118" pos:column="32"/></name><operator pos:line="118" pos:column="32">,<pos:position pos:line="118" pos:column="33"/></operator> <literal type="string" pos:line="118" pos:column="34">"imap_auth_sasl: error base64-decoding server response.\n"<pos:position pos:line="118" pos:column="92"/></literal><operator pos:line="118" pos:column="92">)<pos:position pos:line="118" pos:column="93"/></operator></expr></argument>)<pos:position pos:line="118" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="95"/></expr_stmt>
          <goto pos:line="119" pos:column="11">goto <name pos:line="119" pos:column="16">bail<pos:position pos:line="119" pos:column="20"/></name>;<pos:position pos:line="119" pos:column="21"/></goto>
        }<pos:position pos:line="120" pos:column="10"/></block></then></if>
      }<pos:position pos:line="121" pos:column="8"/></block></else></if>
    }<pos:position pos:line="122" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="124" pos:column="5">/* client-start is only available with the SASL-IR extension, but
     * SASL 2.1 seems to want to use it regardless, at least for DIGEST
     * fast reauth. Override if the server sent an initial continuation */</comment>
    <if pos:line="127" pos:column="5">if <condition pos:line="127" pos:column="8">(<expr><operator pos:line="127" pos:column="9">!<pos:position pos:line="127" pos:column="10"/></operator><name pos:line="127" pos:column="10">client_start<pos:position pos:line="127" pos:column="22"/></name> <operator pos:line="127" pos:column="23">||<pos:position pos:line="127" pos:column="25"/></operator> <name><name pos:line="127" pos:column="26">buf<pos:position pos:line="127" pos:column="29"/></name><index pos:line="127" pos:column="29">[<expr><literal type="number" pos:line="127" pos:column="30">0<pos:position pos:line="127" pos:column="31"/></literal></expr>]<pos:position pos:line="127" pos:column="32"/></index></name></expr>)<pos:position pos:line="127" pos:column="33"/></condition><then pos:line="127" pos:column="33">
    <block pos:line="128" pos:column="5">{
      <do pos:line="129" pos:column="7">do
      <block pos:line="130" pos:column="7">{
	<expr_stmt><expr><name pos:line="131" pos:column="9">rc<pos:position pos:line="131" pos:column="11"/></name> <operator pos:line="131" pos:column="12">=<pos:position pos:line="131" pos:column="13"/></operator> <call><name pos:line="131" pos:column="14">sasl_client_step<pos:position pos:line="131" pos:column="30"/></name> <argument_list pos:line="131" pos:column="31">(<argument><expr><name pos:line="131" pos:column="32">saslconn<pos:position pos:line="131" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="42">buf<pos:position pos:line="131" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="47">len<pos:position pos:line="131" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="131" pos:column="52">&amp;<pos:position pos:line="131" pos:column="57"/></operator><name pos:line="131" pos:column="53">interaction<pos:position pos:line="131" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="131" pos:column="66">&amp;<pos:position pos:line="131" pos:column="71"/></operator><name pos:line="131" pos:column="67">pc<pos:position pos:line="131" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="131" pos:column="71">&amp;<pos:position pos:line="131" pos:column="76"/></operator><name pos:line="131" pos:column="72">olen<pos:position pos:line="131" pos:column="76"/></name></expr></argument>)<pos:position pos:line="131" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="78"/></expr_stmt>
	<if pos:line="132" pos:column="9">if <condition pos:line="132" pos:column="12">(<expr><name pos:line="132" pos:column="13">rc<pos:position pos:line="132" pos:column="15"/></name> <operator pos:line="132" pos:column="16">==<pos:position pos:line="132" pos:column="18"/></operator> <name pos:line="132" pos:column="19">SASL_INTERACT<pos:position pos:line="132" pos:column="32"/></name></expr>)<pos:position pos:line="132" pos:column="33"/></condition><then pos:line="132" pos:column="33">
	  <block type="pseudo"><expr_stmt><expr><call><name pos:line="133" pos:column="11">mutt_sasl_interact<pos:position pos:line="133" pos:column="29"/></name> <argument_list pos:line="133" pos:column="30">(<argument><expr><name pos:line="133" pos:column="31">interaction<pos:position pos:line="133" pos:column="42"/></name></expr></argument>)<pos:position pos:line="133" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="44"/></expr_stmt></block></then></if>
      }<pos:position pos:line="134" pos:column="8"/></block>
      while <condition pos:line="135" pos:column="13">(<expr><name pos:line="135" pos:column="14">rc<pos:position pos:line="135" pos:column="16"/></name> <operator pos:line="135" pos:column="17">==<pos:position pos:line="135" pos:column="19"/></operator> <name pos:line="135" pos:column="20">SASL_INTERACT<pos:position pos:line="135" pos:column="33"/></name></expr>)<pos:position pos:line="135" pos:column="34"/></condition>;<pos:position pos:line="135" pos:column="35"/></do>
    }<pos:position pos:line="136" pos:column="6"/></block></then>
    <else pos:line="137" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="138" pos:column="7">client_start<pos:position pos:line="138" pos:column="19"/></name> <operator pos:line="138" pos:column="20">=<pos:position pos:line="138" pos:column="21"/></operator> <literal type="number" pos:line="138" pos:column="22">0<pos:position pos:line="138" pos:column="23"/></literal></expr>;<pos:position pos:line="138" pos:column="24"/></expr_stmt></block></else></if>

    <comment type="block" pos:line="140" pos:column="5">/* send out response, or line break if none needed */</comment>
    <if pos:line="141" pos:column="5">if <condition pos:line="141" pos:column="8">(<expr><name pos:line="141" pos:column="9">olen<pos:position pos:line="141" pos:column="13"/></name></expr>)<pos:position pos:line="141" pos:column="14"/></condition><then pos:line="141" pos:column="14">
    <block pos:line="142" pos:column="5">{
      <if pos:line="143" pos:column="7">if <condition pos:line="143" pos:column="10">(<expr><operator pos:line="143" pos:column="11">(<pos:position pos:line="143" pos:column="12"/></operator><name pos:line="143" pos:column="12">olen<pos:position pos:line="143" pos:column="16"/></name> <operator pos:line="143" pos:column="17">*<pos:position pos:line="143" pos:column="18"/></operator> <literal type="number" pos:line="143" pos:column="19">2<pos:position pos:line="143" pos:column="20"/></literal><operator pos:line="143" pos:column="20">)<pos:position pos:line="143" pos:column="21"/></operator> <operator pos:line="143" pos:column="22">&gt;<pos:position pos:line="143" pos:column="26"/></operator> <name pos:line="143" pos:column="24">bufsize<pos:position pos:line="143" pos:column="31"/></name></expr>)<pos:position pos:line="143" pos:column="32"/></condition><then pos:line="143" pos:column="32">
      <block pos:line="144" pos:column="7">{
        <expr_stmt><expr><name pos:line="145" pos:column="9">bufsize<pos:position pos:line="145" pos:column="16"/></name> <operator pos:line="145" pos:column="17">=<pos:position pos:line="145" pos:column="18"/></operator> <name pos:line="145" pos:column="19">olen<pos:position pos:line="145" pos:column="23"/></name> <operator pos:line="145" pos:column="24">*<pos:position pos:line="145" pos:column="25"/></operator> <literal type="number" pos:line="145" pos:column="26">2<pos:position pos:line="145" pos:column="27"/></literal></expr>;<pos:position pos:line="145" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="146" pos:column="9">safe_realloc<pos:position pos:line="146" pos:column="21"/></name> <argument_list pos:line="146" pos:column="22">(<argument><expr><operator pos:line="146" pos:column="23">&amp;<pos:position pos:line="146" pos:column="28"/></operator><name pos:line="146" pos:column="24">buf<pos:position pos:line="146" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="29">bufsize<pos:position pos:line="146" pos:column="36"/></name></expr></argument>)<pos:position pos:line="146" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="38"/></expr_stmt>
      }<pos:position pos:line="147" pos:column="8"/></block></then></if>
      <if pos:line="148" pos:column="7">if <condition pos:line="148" pos:column="10">(<expr><call><name pos:line="148" pos:column="11">sasl_encode64<pos:position pos:line="148" pos:column="24"/></name> <argument_list pos:line="148" pos:column="25">(<argument><expr><name pos:line="148" pos:column="26">pc<pos:position pos:line="148" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="30">olen<pos:position pos:line="148" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="36">buf<pos:position pos:line="148" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="41">bufsize<pos:position pos:line="148" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="148" pos:column="50">&amp;<pos:position pos:line="148" pos:column="55"/></operator><name pos:line="148" pos:column="51">olen<pos:position pos:line="148" pos:column="55"/></name></expr></argument>)<pos:position pos:line="148" pos:column="56"/></argument_list></call> <operator pos:line="148" pos:column="57">!=<pos:position pos:line="148" pos:column="59"/></operator> <name pos:line="148" pos:column="60">SASL_OK<pos:position pos:line="148" pos:column="67"/></name></expr>)<pos:position pos:line="148" pos:column="68"/></condition><then pos:line="148" pos:column="68">
      <block pos:line="149" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="150" pos:column="9">dprint<pos:position pos:line="150" pos:column="15"/></name> <argument_list pos:line="150" pos:column="16">(<argument><expr><literal type="number" pos:line="150" pos:column="17">1<pos:position pos:line="150" pos:column="18"/></literal></expr></argument>, <argument><expr><operator pos:line="150" pos:column="20">(<pos:position pos:line="150" pos:column="21"/></operator><name pos:line="150" pos:column="21">debugfile<pos:position pos:line="150" pos:column="30"/></name><operator pos:line="150" pos:column="30">,<pos:position pos:line="150" pos:column="31"/></operator> <literal type="string" pos:line="150" pos:column="32">"imap_auth_sasl: error base64-encoding client response.\n"<pos:position pos:line="150" pos:column="90"/></literal><operator pos:line="150" pos:column="90">)<pos:position pos:line="150" pos:column="91"/></operator></expr></argument>)<pos:position pos:line="150" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="93"/></expr_stmt>
	<goto pos:line="151" pos:column="9">goto <name pos:line="151" pos:column="14">bail<pos:position pos:line="151" pos:column="18"/></name>;<pos:position pos:line="151" pos:column="19"/></goto>
      }<pos:position pos:line="152" pos:column="8"/></block></then></if>
    }<pos:position pos:line="153" pos:column="6"/></block></then></if>
    
    <if pos:line="155" pos:column="5">if <condition pos:line="155" pos:column="8">(<expr><name pos:line="155" pos:column="9">irc<pos:position pos:line="155" pos:column="12"/></name> <operator pos:line="155" pos:column="13">==<pos:position pos:line="155" pos:column="15"/></operator> <name pos:line="155" pos:column="16">IMAP_CMD_RESPOND<pos:position pos:line="155" pos:column="32"/></name></expr>)<pos:position pos:line="155" pos:column="33"/></condition><then pos:line="155" pos:column="33">
    <block pos:line="156" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="157" pos:column="7">strfcpy<pos:position pos:line="157" pos:column="14"/></name> <argument_list pos:line="157" pos:column="15">(<argument><expr><name pos:line="157" pos:column="16">buf<pos:position pos:line="157" pos:column="19"/></name> <operator pos:line="157" pos:column="20">+<pos:position pos:line="157" pos:column="21"/></operator> <name pos:line="157" pos:column="22">olen<pos:position pos:line="157" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="157" pos:column="28">"\r\n"<pos:position pos:line="157" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="157" pos:column="36">bufsize<pos:position pos:line="157" pos:column="43"/></name> <operator pos:line="157" pos:column="44">-<pos:position pos:line="157" pos:column="45"/></operator> <name pos:line="157" pos:column="46">olen<pos:position pos:line="157" pos:column="50"/></name></expr></argument>)<pos:position pos:line="157" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="158" pos:column="7">mutt_socket_write<pos:position pos:line="158" pos:column="24"/></name> <argument_list pos:line="158" pos:column="25">(<argument><expr><name><name pos:line="158" pos:column="26">idata<pos:position pos:line="158" pos:column="31"/></name><operator pos:line="158" pos:column="31">-&gt;<pos:position pos:line="158" pos:column="36"/></operator><name pos:line="158" pos:column="33">conn<pos:position pos:line="158" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="158" pos:column="39">buf<pos:position pos:line="158" pos:column="42"/></name></expr></argument>)<pos:position pos:line="158" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="159" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="161" pos:column="5">/* If SASL has errored out, send an abort string to the server */</comment>
    <if pos:line="162" pos:column="5">if <condition pos:line="162" pos:column="8">(<expr><name pos:line="162" pos:column="9">rc<pos:position pos:line="162" pos:column="11"/></name> <operator pos:line="162" pos:column="12">&lt;<pos:position pos:line="162" pos:column="16"/></operator> <literal type="number" pos:line="162" pos:column="14">0<pos:position pos:line="162" pos:column="15"/></literal></expr>)<pos:position pos:line="162" pos:column="16"/></condition><then pos:line="162" pos:column="16">
    <block pos:line="163" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="164" pos:column="7">mutt_socket_write<pos:position pos:line="164" pos:column="24"/></name> <argument_list pos:line="164" pos:column="25">(<argument><expr><name><name pos:line="164" pos:column="26">idata<pos:position pos:line="164" pos:column="31"/></name><operator pos:line="164" pos:column="31">-&gt;<pos:position pos:line="164" pos:column="36"/></operator><name pos:line="164" pos:column="33">conn<pos:position pos:line="164" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="164" pos:column="39">"*\r\n"<pos:position pos:line="164" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="164" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="165" pos:column="7">dprint<pos:position pos:line="165" pos:column="13"/></name> <argument_list pos:line="165" pos:column="14">(<argument><expr><literal type="number" pos:line="165" pos:column="15">1<pos:position pos:line="165" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="165" pos:column="18">(<pos:position pos:line="165" pos:column="19"/></operator><name pos:line="165" pos:column="19">debugfile<pos:position pos:line="165" pos:column="28"/></name><operator pos:line="165" pos:column="28">,<pos:position pos:line="165" pos:column="29"/></operator> <literal type="string" pos:line="165" pos:column="30">"imap_auth_sasl: sasl_client_step error %d\n"<pos:position pos:line="165" pos:column="75"/></literal><operator pos:line="165" pos:column="75">,<pos:position pos:line="165" pos:column="76"/></operator><name pos:line="165" pos:column="76">rc<pos:position pos:line="165" pos:column="78"/></name><operator pos:line="165" pos:column="78">)<pos:position pos:line="165" pos:column="79"/></operator></expr></argument>)<pos:position pos:line="165" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="81"/></expr_stmt>
    }<pos:position pos:line="166" pos:column="6"/></block></then></if>
	  
    <expr_stmt><expr><name pos:line="168" pos:column="5">olen<pos:position pos:line="168" pos:column="9"/></name> <operator pos:line="168" pos:column="10">=<pos:position pos:line="168" pos:column="11"/></operator> <literal type="number" pos:line="168" pos:column="12">0<pos:position pos:line="168" pos:column="13"/></literal></expr>;<pos:position pos:line="168" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="169" pos:column="4"/></block></while>

  <while pos:line="171" pos:column="3">while <condition pos:line="171" pos:column="9">(<expr><name pos:line="171" pos:column="10">irc<pos:position pos:line="171" pos:column="13"/></name> <operator pos:line="171" pos:column="14">!=<pos:position pos:line="171" pos:column="16"/></operator> <name pos:line="171" pos:column="17">IMAP_CMD_OK<pos:position pos:line="171" pos:column="28"/></name></expr>)<pos:position pos:line="171" pos:column="29"/></condition>
    <block type="pseudo"><if pos:line="172" pos:column="5">if <condition pos:line="172" pos:column="8">(<expr><operator pos:line="172" pos:column="9">(<pos:position pos:line="172" pos:column="10"/></operator><name pos:line="172" pos:column="10">irc<pos:position pos:line="172" pos:column="13"/></name> <operator pos:line="172" pos:column="14">=<pos:position pos:line="172" pos:column="15"/></operator> <call><name pos:line="172" pos:column="16">imap_cmd_step<pos:position pos:line="172" pos:column="29"/></name> <argument_list pos:line="172" pos:column="30">(<argument><expr><name pos:line="172" pos:column="31">idata<pos:position pos:line="172" pos:column="36"/></name></expr></argument>)<pos:position pos:line="172" pos:column="37"/></argument_list></call><operator pos:line="172" pos:column="37">)<pos:position pos:line="172" pos:column="38"/></operator> <operator pos:line="172" pos:column="39">!=<pos:position pos:line="172" pos:column="41"/></operator> <name pos:line="172" pos:column="42">IMAP_CMD_CONTINUE<pos:position pos:line="172" pos:column="59"/></name></expr>)<pos:position pos:line="172" pos:column="60"/></condition><then pos:line="172" pos:column="60">
      <block type="pseudo"><break pos:line="173" pos:column="7">break;<pos:position pos:line="173" pos:column="13"/></break></block></then></if></block></while>

  <if pos:line="175" pos:column="3">if <condition pos:line="175" pos:column="6">(<expr><name pos:line="175" pos:column="7">rc<pos:position pos:line="175" pos:column="9"/></name> <operator pos:line="175" pos:column="10">!=<pos:position pos:line="175" pos:column="12"/></operator> <name pos:line="175" pos:column="13">SASL_OK<pos:position pos:line="175" pos:column="20"/></name></expr>)<pos:position pos:line="175" pos:column="21"/></condition><then pos:line="175" pos:column="21">
    <block type="pseudo"><goto pos:line="176" pos:column="5">goto <name pos:line="176" pos:column="10">bail<pos:position pos:line="176" pos:column="14"/></name>;<pos:position pos:line="176" pos:column="15"/></goto></block></then></if>

  <if pos:line="178" pos:column="3">if <condition pos:line="178" pos:column="6">(<expr><call><name pos:line="178" pos:column="7">imap_code<pos:position pos:line="178" pos:column="16"/></name> <argument_list pos:line="178" pos:column="17">(<argument><expr><name><name pos:line="178" pos:column="18">idata<pos:position pos:line="178" pos:column="23"/></name><operator pos:line="178" pos:column="23">-&gt;<pos:position pos:line="178" pos:column="28"/></operator><name pos:line="178" pos:column="25">buf<pos:position pos:line="178" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="178" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="178" pos:column="30"/></condition><then pos:line="178" pos:column="30">
  <block pos:line="179" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="180" pos:column="5">mutt_sasl_setup_conn<pos:position pos:line="180" pos:column="25"/></name> <argument_list pos:line="180" pos:column="26">(<argument><expr><name><name pos:line="180" pos:column="27">idata<pos:position pos:line="180" pos:column="32"/></name><operator pos:line="180" pos:column="32">-&gt;<pos:position pos:line="180" pos:column="37"/></operator><name pos:line="180" pos:column="34">conn<pos:position pos:line="180" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="40">saslconn<pos:position pos:line="180" pos:column="48"/></name></expr></argument>)<pos:position pos:line="180" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="181" pos:column="5">FREE<pos:position pos:line="181" pos:column="9"/></name> <argument_list pos:line="181" pos:column="10">(<argument><expr><operator pos:line="181" pos:column="11">&amp;<pos:position pos:line="181" pos:column="16"/></operator><name pos:line="181" pos:column="12">buf<pos:position pos:line="181" pos:column="15"/></name></expr></argument>)<pos:position pos:line="181" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="17"/></expr_stmt>
    <return pos:line="182" pos:column="5">return <expr><name pos:line="182" pos:column="12">IMAP_AUTH_SUCCESS<pos:position pos:line="182" pos:column="29"/></name></expr>;<pos:position pos:line="182" pos:column="30"/></return>
  }<pos:position pos:line="183" pos:column="4"/></block></then></if>

 <label><name pos:line="185" pos:column="2">bail<pos:position pos:line="185" pos:column="6"/></name>:<pos:position pos:line="185" pos:column="7"/></label>
  <expr_stmt><expr><call><name pos:line="186" pos:column="3">sasl_dispose<pos:position pos:line="186" pos:column="15"/></name> <argument_list pos:line="186" pos:column="16">(<argument><expr><operator pos:line="186" pos:column="17">&amp;<pos:position pos:line="186" pos:column="22"/></operator><name pos:line="186" pos:column="18">saslconn<pos:position pos:line="186" pos:column="26"/></name></expr></argument>)<pos:position pos:line="186" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="187" pos:column="3">FREE<pos:position pos:line="187" pos:column="7"/></name> <argument_list pos:line="187" pos:column="8">(<argument><expr><operator pos:line="187" pos:column="9">&amp;<pos:position pos:line="187" pos:column="14"/></operator><name pos:line="187" pos:column="10">buf<pos:position pos:line="187" pos:column="13"/></name></expr></argument>)<pos:position pos:line="187" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="15"/></expr_stmt>

  <if pos:line="189" pos:column="3">if <condition pos:line="189" pos:column="6">(<expr><name pos:line="189" pos:column="7">method<pos:position pos:line="189" pos:column="13"/></name></expr>)<pos:position pos:line="189" pos:column="14"/></condition><then pos:line="189" pos:column="14">
  <block pos:line="190" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="191" pos:column="5">dprint<pos:position pos:line="191" pos:column="11"/></name> <argument_list pos:line="191" pos:column="12">(<argument><expr><literal type="number" pos:line="191" pos:column="13">2<pos:position pos:line="191" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="191" pos:column="16">(<pos:position pos:line="191" pos:column="17"/></operator><name pos:line="191" pos:column="17">debugfile<pos:position pos:line="191" pos:column="26"/></name><operator pos:line="191" pos:column="26">,<pos:position pos:line="191" pos:column="27"/></operator> <literal type="string" pos:line="191" pos:column="28">"imap_auth_sasl: %s failed\n"<pos:position pos:line="191" pos:column="57"/></literal><operator pos:line="191" pos:column="57">,<pos:position pos:line="191" pos:column="58"/></operator> <name pos:line="191" pos:column="59">method<pos:position pos:line="191" pos:column="65"/></name><operator pos:line="191" pos:column="65">)<pos:position pos:line="191" pos:column="66"/></operator></expr></argument>)<pos:position pos:line="191" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="68"/></expr_stmt>
    <return pos:line="192" pos:column="5">return <expr><name pos:line="192" pos:column="12">IMAP_AUTH_UNAVAIL<pos:position pos:line="192" pos:column="29"/></name></expr>;<pos:position pos:line="192" pos:column="30"/></return>
  }<pos:position pos:line="193" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="195" pos:column="3">mutt_error<pos:position pos:line="195" pos:column="13"/></name></type> <name pos:line="195" pos:column="14">_<pos:position pos:line="195" pos:column="15"/></name><argument_list pos:line="195" pos:column="15">(<argument><expr><literal type="string" pos:line="195" pos:column="16">"SASL authentication failed."<pos:position pos:line="195" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="195" pos:column="46"/></argument_list></decl>;<pos:position pos:line="195" pos:column="47"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="196" pos:column="3">mutt_sleep<pos:position pos:line="196" pos:column="13"/></name><argument_list pos:line="196" pos:column="13">(<argument><expr><literal type="number" pos:line="196" pos:column="14">2<pos:position pos:line="196" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="196" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="17"/></expr_stmt>

  <return pos:line="198" pos:column="3">return <expr><name pos:line="198" pos:column="10">IMAP_AUTH_FAILURE<pos:position pos:line="198" pos:column="27"/></name></expr>;<pos:position pos:line="198" pos:column="28"/></return>
}<pos:position pos:line="199" pos:column="2"/></block></function></unit>
