<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_194_last_repos.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">mutt_stristr<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">haystack<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">needle<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">p<pos:position pos:line="3" pos:column="16"/></name></decl>, <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="19">q<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><operator pos:line="5" pos:column="7">!<pos:position pos:line="5" pos:column="8"/></operator><name pos:line="5" pos:column="8">haystack<pos:position pos:line="5" pos:column="16"/></name></expr>)<pos:position pos:line="5" pos:column="17"/></condition><then pos:line="5" pos:column="17">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><name pos:line="6" pos:column="12">NULL<pos:position pos:line="6" pos:column="16"/></name></expr>;<pos:position pos:line="6" pos:column="17"/></return></block></then></if>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">!<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">needle<pos:position pos:line="7" pos:column="14"/></name></expr>)<pos:position pos:line="7" pos:column="15"/></condition><then pos:line="7" pos:column="15">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><operator pos:line="8" pos:column="12">(<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">haystack<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">)<pos:position pos:line="8" pos:column="22"/></operator></expr>;<pos:position pos:line="8" pos:column="23"/></return></block></then></if>

  <while pos:line="10" pos:column="3">while <condition pos:line="10" pos:column="9">(<expr><operator pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></operator><operator pos:line="10" pos:column="11">(<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="12">p<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">=<pos:position pos:line="10" pos:column="15"/></operator> <name pos:line="10" pos:column="16">haystack<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">)<pos:position pos:line="10" pos:column="25"/></operator></expr>)<pos:position pos:line="10" pos:column="26"/></condition>
  <block pos:line="11" pos:column="3">{
    <for pos:line="12" pos:column="5">for <control pos:line="12" pos:column="9">(<init><expr><name pos:line="12" pos:column="10">q<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <name pos:line="12" pos:column="14">needle<pos:position pos:line="12" pos:column="20"/></name></expr>;<pos:position pos:line="12" pos:column="21"/></init>
         <condition><expr><operator pos:line="13" pos:column="10">*<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">p<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">&amp;&amp;<pos:position pos:line="13" pos:column="23"/></operator> <operator pos:line="13" pos:column="16">*<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">q<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">&amp;&amp;<pos:position pos:line="13" pos:column="29"/></operator>
           <call><name pos:line="14" pos:column="12">tolower<pos:position pos:line="14" pos:column="19"/></name> <argument_list pos:line="14" pos:column="20">(<argument><expr><operator pos:line="14" pos:column="21">(<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">unsigned<pos:position pos:line="14" pos:column="30"/></name> <name pos:line="14" pos:column="31">char<pos:position pos:line="14" pos:column="35"/></name><operator pos:line="14" pos:column="35">)<pos:position pos:line="14" pos:column="36"/></operator> <operator pos:line="14" pos:column="37">*<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="38">p<pos:position pos:line="14" pos:column="39"/></name></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></call> <operator pos:line="14" pos:column="41">==<pos:position pos:line="14" pos:column="43"/></operator> <call><name pos:line="14" pos:column="44">tolower<pos:position pos:line="14" pos:column="51"/></name> <argument_list pos:line="14" pos:column="52">(<argument><expr><operator pos:line="14" pos:column="53">(<pos:position pos:line="14" pos:column="54"/></operator><name pos:line="14" pos:column="54">unsigned<pos:position pos:line="14" pos:column="62"/></name> <name pos:line="14" pos:column="63">char<pos:position pos:line="14" pos:column="67"/></name><operator pos:line="14" pos:column="67">)<pos:position pos:line="14" pos:column="68"/></operator> <operator pos:line="14" pos:column="69">*<pos:position pos:line="14" pos:column="70"/></operator><name pos:line="14" pos:column="70">q<pos:position pos:line="14" pos:column="71"/></name></expr></argument>)<pos:position pos:line="14" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="73"/></condition>
         <incr><expr><name pos:line="15" pos:column="10">p<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">++<pos:position pos:line="15" pos:column="13"/></operator></expr><operator pos:line="15" pos:column="13">,<pos:position pos:line="15" pos:column="14"/></operator> <expr><name pos:line="15" pos:column="15">q<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">++<pos:position pos:line="15" pos:column="18"/></operator></expr></incr>)<pos:position pos:line="15" pos:column="19"/></control>
      <block type="pseudo"><empty_stmt pos:line="16" pos:column="7">;<pos:position pos:line="16" pos:column="8"/></empty_stmt></block></for>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">!<pos:position pos:line="17" pos:column="10"/></operator><operator pos:line="17" pos:column="10">*<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">q<pos:position pos:line="17" pos:column="12"/></name></expr>)<pos:position pos:line="17" pos:column="13"/></condition><then pos:line="17" pos:column="13">
      <block type="pseudo"><return pos:line="18" pos:column="7">return <expr><operator pos:line="18" pos:column="14">(<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">haystack<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">)<pos:position pos:line="18" pos:column="24"/></operator></expr>;<pos:position pos:line="18" pos:column="25"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="19" pos:column="5">haystack<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">++<pos:position pos:line="19" pos:column="15"/></operator></expr>;<pos:position pos:line="19" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="20" pos:column="4"/></block></while>
  <return pos:line="21" pos:column="3">return <expr><name pos:line="21" pos:column="10">NULL<pos:position pos:line="21" pos:column="14"/></name></expr>;<pos:position pos:line="21" pos:column="15"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
