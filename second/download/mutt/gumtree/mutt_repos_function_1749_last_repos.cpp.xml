<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1749_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">add_to_replace_list<pos:position pos:line="1" pos:column="31"/></name> <parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">REPLACE_LIST<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier><modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">list<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">pat<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="71">const<pos:position pos:line="1" pos:column="76"/></specifier> <name pos:line="1" pos:column="77">char<pos:position pos:line="1" pos:column="81"/></name> <modifier pos:line="1" pos:column="82">*<pos:position pos:line="1" pos:column="83"/></modifier></type><name pos:line="1" pos:column="83">templ<pos:position pos:line="1" pos:column="88"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="90">BUFFER<pos:position pos:line="1" pos:column="96"/></name> <modifier pos:line="1" pos:column="97">*<pos:position pos:line="1" pos:column="98"/></modifier></type><name pos:line="1" pos:column="98">err<pos:position pos:line="1" pos:column="101"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="102"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">REPLACE_LIST<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">t<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name pos:line="3" pos:column="21">NULL<pos:position pos:line="3" pos:column="25"/></name></expr></init></decl>, <modifier pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="28">last<pos:position pos:line="3" pos:column="32"/></name> <init pos:line="3" pos:column="33">= <expr><name pos:line="3" pos:column="35">NULL<pos:position pos:line="3" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">REGEXP<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">rx<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">n<pos:position pos:line="5" pos:column="8"/></name></decl>;<pos:position pos:line="5" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">p<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><operator pos:line="8" pos:column="7">!<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">pat<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">||<pos:position pos:line="8" pos:column="14"/></operator> <operator pos:line="8" pos:column="15">!<pos:position pos:line="8" pos:column="16"/></operator><operator pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">pat<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">||<pos:position pos:line="8" pos:column="23"/></operator> <operator pos:line="8" pos:column="24">!<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">templ<pos:position pos:line="8" pos:column="30"/></name></expr>)<pos:position pos:line="8" pos:column="31"/></condition><then pos:line="8" pos:column="31">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><literal type="number" pos:line="9" pos:column="12">0<pos:position pos:line="9" pos:column="13"/></literal></expr>;<pos:position pos:line="9" pos:column="14"/></return></block></then></if>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><operator pos:line="11" pos:column="7">!<pos:position pos:line="11" pos:column="8"/></operator><operator pos:line="11" pos:column="8">(<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="9">rx<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">mutt_compile_regexp<pos:position pos:line="11" pos:column="33"/></name> <argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">pat<pos:position pos:line="11" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="40">REG_ICASE<pos:position pos:line="11" pos:column="49"/></name></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call><operator pos:line="11" pos:column="50">)<pos:position pos:line="11" pos:column="51"/></operator></expr>)<pos:position pos:line="11" pos:column="52"/></condition><then pos:line="11" pos:column="52">
  <block pos:line="12" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">snprintf<pos:position pos:line="13" pos:column="13"/></name> <argument_list pos:line="13" pos:column="14">(<argument><expr><name><name pos:line="13" pos:column="15">err<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">-&gt;<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="20">data<pos:position pos:line="13" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="26">err<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">-&gt;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="31">dsize<pos:position pos:line="13" pos:column="36"/></name></name></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="38">_<pos:position pos:line="13" pos:column="39"/></name><argument_list pos:line="13" pos:column="39">(<argument><expr><literal type="string" pos:line="13" pos:column="40">"Bad regexp: %s"<pos:position pos:line="13" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="13" pos:column="59">pat<pos:position pos:line="13" pos:column="62"/></name></expr></argument>)<pos:position pos:line="13" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="64"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="17" pos:column="3">/* check to make sure the item is not already on this list */</comment>
  <for pos:line="18" pos:column="3">for <control pos:line="18" pos:column="7">(<init><expr><name pos:line="18" pos:column="8">last<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <operator pos:line="18" pos:column="15">*<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">list<pos:position pos:line="18" pos:column="20"/></name></expr>;<pos:position pos:line="18" pos:column="21"/></init> <condition><expr><name pos:line="18" pos:column="22">last<pos:position pos:line="18" pos:column="26"/></name></expr>;<pos:position pos:line="18" pos:column="27"/></condition> <incr><expr><name pos:line="18" pos:column="28">last<pos:position pos:line="18" pos:column="32"/></name> <operator pos:line="18" pos:column="33">=<pos:position pos:line="18" pos:column="34"/></operator> <name><name pos:line="18" pos:column="35">last<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">-&gt;<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="41">next<pos:position pos:line="18" pos:column="45"/></name></name></expr></incr>)<pos:position pos:line="18" pos:column="46"/></control>
  <block pos:line="19" pos:column="3">{
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><call><name pos:line="20" pos:column="9">ascii_strcasecmp<pos:position pos:line="20" pos:column="25"/></name> <argument_list pos:line="20" pos:column="26">(<argument><expr><name><name pos:line="20" pos:column="27">rx<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">-&gt;<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="31">pattern<pos:position pos:line="20" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="40">last<pos:position pos:line="20" pos:column="44"/></name><operator pos:line="20" pos:column="44">-&gt;<pos:position pos:line="20" pos:column="49"/></operator><name pos:line="20" pos:column="46">rx<pos:position pos:line="20" pos:column="48"/></name><operator pos:line="20" pos:column="48">-&gt;<pos:position pos:line="20" pos:column="53"/></operator><name pos:line="20" pos:column="50">pattern<pos:position pos:line="20" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="58"/></argument_list></call> <operator pos:line="20" pos:column="59">==<pos:position pos:line="20" pos:column="61"/></operator> <literal type="number" pos:line="20" pos:column="62">0<pos:position pos:line="20" pos:column="63"/></literal></expr>)<pos:position pos:line="20" pos:column="64"/></condition><then pos:line="20" pos:column="64">
    <block pos:line="21" pos:column="5">{
      <comment type="block" pos:line="22" pos:column="7">/* Already on the list. Formerly we just skipped this case, but
       * now we're supporting removals, which means we're supporting
       * re-adds conceptually. So we probably want this to imply a
       * removal, then do an add. We can achieve the removal by freeing
       * the template, and leaving t pointed at the current item.
       */</comment>
      <expr_stmt><expr><name pos:line="28" pos:column="7">t<pos:position pos:line="28" pos:column="8"/></name> <operator pos:line="28" pos:column="9">=<pos:position pos:line="28" pos:column="10"/></operator> <name pos:line="28" pos:column="11">last<pos:position pos:line="28" pos:column="15"/></name></expr>;<pos:position pos:line="28" pos:column="16"/></expr_stmt>
      <macro><name pos:line="29" pos:column="7">FREE<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument pos:line="29" pos:column="12">&amp;t-&gt;template<pos:position pos:line="29" pos:column="24"/></argument>)<pos:position pos:line="29" pos:column="25"/></argument_list></macro><empty_stmt pos:line="29" pos:column="25">;<pos:position pos:line="29" pos:column="26"/></empty_stmt>
      <break pos:line="30" pos:column="7">break;<pos:position pos:line="30" pos:column="13"/></break>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><operator pos:line="32" pos:column="9">!<pos:position pos:line="32" pos:column="10"/></operator><name><name pos:line="32" pos:column="10">last<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">-&gt;<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="16">next<pos:position pos:line="32" pos:column="20"/></name></name></expr>)<pos:position pos:line="32" pos:column="21"/></condition><then pos:line="32" pos:column="21">
      <block type="pseudo"><break pos:line="33" pos:column="7">break;<pos:position pos:line="33" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="34" pos:column="4"/></block></for>

  <comment type="block" pos:line="36" pos:column="3">/* If t is set, it's pointing into an extant REPLACE_LIST* that we want to
   * update. Otherwise we want to make a new one to link at the list's end.
   */</comment>
  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><operator pos:line="39" pos:column="7">!<pos:position pos:line="39" pos:column="8"/></operator><name pos:line="39" pos:column="8">t<pos:position pos:line="39" pos:column="9"/></name></expr>)<pos:position pos:line="39" pos:column="10"/></condition><then pos:line="39" pos:column="10">
  <block pos:line="40" pos:column="3">{
    <expr_stmt><expr><name pos:line="41" pos:column="5">t<pos:position pos:line="41" pos:column="6"/></name> <operator pos:line="41" pos:column="7">=<pos:position pos:line="41" pos:column="8"/></operator> <call><name pos:line="41" pos:column="9">mutt_new_replace_list<pos:position pos:line="41" pos:column="30"/></name><argument_list pos:line="41" pos:column="30">()<pos:position pos:line="41" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="42" pos:column="5">t<pos:position pos:line="42" pos:column="6"/></name><operator pos:line="42" pos:column="6">-&gt;<pos:position pos:line="42" pos:column="11"/></operator><name pos:line="42" pos:column="8">rx<pos:position pos:line="42" pos:column="10"/></name></name> <operator pos:line="42" pos:column="11">=<pos:position pos:line="42" pos:column="12"/></operator> <name pos:line="42" pos:column="13">rx<pos:position pos:line="42" pos:column="15"/></name></expr>;<pos:position pos:line="42" pos:column="16"/></expr_stmt>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">last<pos:position pos:line="43" pos:column="13"/></name></expr>)<pos:position pos:line="43" pos:column="14"/></condition><then pos:line="43" pos:column="14">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="44" pos:column="7">last<pos:position pos:line="44" pos:column="11"/></name><operator pos:line="44" pos:column="11">-&gt;<pos:position pos:line="44" pos:column="16"/></operator><name pos:line="44" pos:column="13">next<pos:position pos:line="44" pos:column="17"/></name></name> <operator pos:line="44" pos:column="18">=<pos:position pos:line="44" pos:column="19"/></operator> <name pos:line="44" pos:column="20">t<pos:position pos:line="44" pos:column="21"/></name></expr>;<pos:position pos:line="44" pos:column="22"/></expr_stmt></block></then>
    <else pos:line="45" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><operator pos:line="46" pos:column="7">*<pos:position pos:line="46" pos:column="8"/></operator><name pos:line="46" pos:column="8">list<pos:position pos:line="46" pos:column="12"/></name> <operator pos:line="46" pos:column="13">=<pos:position pos:line="46" pos:column="14"/></operator> <name pos:line="46" pos:column="15">t<pos:position pos:line="46" pos:column="16"/></name></expr>;<pos:position pos:line="46" pos:column="17"/></expr_stmt></block></else></if>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="49" pos:column="3">/* Now t is the REPLACE_LIST* that we want to modify. It is prepared. */</comment>
  <expr_stmt><expr><name><name pos:line="50" pos:column="3">t<pos:position pos:line="50" pos:column="4"/></name><operator pos:line="50" pos:column="4">-&gt;<pos:position pos:line="50" pos:column="9"/></operator><name><specifier pos:line="50" pos:column="6">template<pos:position pos:line="50" pos:column="14"/></specifier> <name><pos:position pos:line="50" pos:column="15"/></name></name></name><operator pos:line="50" pos:column="15">=<pos:position pos:line="50" pos:column="16"/></operator> <call><name pos:line="50" pos:column="17">safe_strdup<pos:position pos:line="50" pos:column="28"/></name><argument_list pos:line="50" pos:column="28">(<argument><expr><name pos:line="50" pos:column="29">templ<pos:position pos:line="50" pos:column="34"/></name></expr></argument>)<pos:position pos:line="50" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="36"/></expr_stmt>

  <comment type="block" pos:line="52" pos:column="3">/* Find highest match number in template string */</comment>
  <expr_stmt><expr><name><name pos:line="53" pos:column="3">t<pos:position pos:line="53" pos:column="4"/></name><operator pos:line="53" pos:column="4">-&gt;<pos:position pos:line="53" pos:column="9"/></operator><name pos:line="53" pos:column="6">nmatch<pos:position pos:line="53" pos:column="12"/></name></name> <operator pos:line="53" pos:column="13">=<pos:position pos:line="53" pos:column="14"/></operator> <literal type="number" pos:line="53" pos:column="15">0<pos:position pos:line="53" pos:column="16"/></literal></expr>;<pos:position pos:line="53" pos:column="17"/></expr_stmt>
  <for pos:line="54" pos:column="3">for <control pos:line="54" pos:column="7">(<init><expr><name pos:line="54" pos:column="8">p<pos:position pos:line="54" pos:column="9"/></name> <operator pos:line="54" pos:column="10">=<pos:position pos:line="54" pos:column="11"/></operator> <name pos:line="54" pos:column="12">templ<pos:position pos:line="54" pos:column="17"/></name></expr>;<pos:position pos:line="54" pos:column="18"/></init> <condition><expr><operator pos:line="54" pos:column="19">*<pos:position pos:line="54" pos:column="20"/></operator><name pos:line="54" pos:column="20">p<pos:position pos:line="54" pos:column="21"/></name></expr>;<pos:position pos:line="54" pos:column="22"/></condition><incr/>)<pos:position pos:line="54" pos:column="23"/></control>
  <block pos:line="55" pos:column="3">{
    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><operator pos:line="56" pos:column="9">*<pos:position pos:line="56" pos:column="10"/></operator><name pos:line="56" pos:column="10">p<pos:position pos:line="56" pos:column="11"/></name> <operator pos:line="56" pos:column="12">==<pos:position pos:line="56" pos:column="14"/></operator> <literal type="char" pos:line="56" pos:column="15">'%'<pos:position pos:line="56" pos:column="18"/></literal></expr>)<pos:position pos:line="56" pos:column="19"/></condition><then pos:line="56" pos:column="19">
    <block pos:line="57" pos:column="5">{
        <expr_stmt><expr><name pos:line="58" pos:column="9">n<pos:position pos:line="58" pos:column="10"/></name> <operator pos:line="58" pos:column="11">=<pos:position pos:line="58" pos:column="12"/></operator> <call><name pos:line="58" pos:column="13">atoi<pos:position pos:line="58" pos:column="17"/></name><argument_list pos:line="58" pos:column="17">(<argument><expr><operator pos:line="58" pos:column="18">++<pos:position pos:line="58" pos:column="20"/></operator><name pos:line="58" pos:column="20">p<pos:position pos:line="58" pos:column="21"/></name></expr></argument>)<pos:position pos:line="58" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="23"/></expr_stmt>
        <if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name pos:line="59" pos:column="13">n<pos:position pos:line="59" pos:column="14"/></name> <operator pos:line="59" pos:column="15">&gt;<pos:position pos:line="59" pos:column="19"/></operator> <name><name pos:line="59" pos:column="17">t<pos:position pos:line="59" pos:column="18"/></name><operator pos:line="59" pos:column="18">-&gt;<pos:position pos:line="59" pos:column="23"/></operator><name pos:line="59" pos:column="20">nmatch<pos:position pos:line="59" pos:column="26"/></name></name></expr>)<pos:position pos:line="59" pos:column="27"/></condition><then pos:line="59" pos:column="27">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="60" pos:column="11">t<pos:position pos:line="60" pos:column="12"/></name><operator pos:line="60" pos:column="12">-&gt;<pos:position pos:line="60" pos:column="17"/></operator><name pos:line="60" pos:column="14">nmatch<pos:position pos:line="60" pos:column="20"/></name></name> <operator pos:line="60" pos:column="21">=<pos:position pos:line="60" pos:column="22"/></operator> <name pos:line="60" pos:column="23">n<pos:position pos:line="60" pos:column="24"/></name></expr>;<pos:position pos:line="60" pos:column="25"/></expr_stmt></block></then></if>
        <while pos:line="61" pos:column="9">while <condition pos:line="61" pos:column="15">(<expr><operator pos:line="61" pos:column="16">*<pos:position pos:line="61" pos:column="17"/></operator><name pos:line="61" pos:column="17">p<pos:position pos:line="61" pos:column="18"/></name> <operator pos:line="61" pos:column="19">&amp;&amp;<pos:position pos:line="61" pos:column="29"/></operator> <call><name pos:line="61" pos:column="22">isdigit<pos:position pos:line="61" pos:column="29"/></name><argument_list pos:line="61" pos:column="29">(<argument><expr><operator pos:line="61" pos:column="30">(<pos:position pos:line="61" pos:column="31"/></operator><name pos:line="61" pos:column="31">int<pos:position pos:line="61" pos:column="34"/></name><operator pos:line="61" pos:column="34">)<pos:position pos:line="61" pos:column="35"/></operator><operator pos:line="61" pos:column="35">*<pos:position pos:line="61" pos:column="36"/></operator><name pos:line="61" pos:column="36">p<pos:position pos:line="61" pos:column="37"/></name></expr></argument>)<pos:position pos:line="61" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="39"/></condition>
          <block type="pseudo"><expr_stmt><expr><operator pos:line="62" pos:column="11">++<pos:position pos:line="62" pos:column="13"/></operator><name pos:line="62" pos:column="13">p<pos:position pos:line="62" pos:column="14"/></name></expr>;<pos:position pos:line="62" pos:column="15"/></expr_stmt></block></while>
    }<pos:position pos:line="63" pos:column="6"/></block></then>
    <else pos:line="64" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><operator pos:line="65" pos:column="9">++<pos:position pos:line="65" pos:column="11"/></operator><name pos:line="65" pos:column="11">p<pos:position pos:line="65" pos:column="12"/></name></expr>;<pos:position pos:line="65" pos:column="13"/></expr_stmt></block></else></if>
  }<pos:position pos:line="66" pos:column="4"/></block></for>

  <if pos:line="68" pos:column="3">if <condition pos:line="68" pos:column="6">(<expr><name><name pos:line="68" pos:column="7">t<pos:position pos:line="68" pos:column="8"/></name><operator pos:line="68" pos:column="8">-&gt;<pos:position pos:line="68" pos:column="13"/></operator><name pos:line="68" pos:column="10">nmatch<pos:position pos:line="68" pos:column="16"/></name></name> <operator pos:line="68" pos:column="17">&gt;<pos:position pos:line="68" pos:column="21"/></operator> <name><name pos:line="68" pos:column="19">t<pos:position pos:line="68" pos:column="20"/></name><operator pos:line="68" pos:column="20">-&gt;<pos:position pos:line="68" pos:column="25"/></operator><name pos:line="68" pos:column="22">rx<pos:position pos:line="68" pos:column="24"/></name><operator pos:line="68" pos:column="24">-&gt;<pos:position pos:line="68" pos:column="29"/></operator><name pos:line="68" pos:column="26">rx<pos:position pos:line="68" pos:column="28"/></name><operator pos:line="68" pos:column="28">-&gt;<pos:position pos:line="68" pos:column="33"/></operator><name pos:line="68" pos:column="30">re_nsub<pos:position pos:line="68" pos:column="37"/></name></name></expr>)<pos:position pos:line="68" pos:column="38"/></condition><then pos:line="68" pos:column="38">
  <block pos:line="69" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="70" pos:column="5">snprintf<pos:position pos:line="70" pos:column="13"/></name> <argument_list pos:line="70" pos:column="14">(<argument><expr><name><name pos:line="70" pos:column="15">err<pos:position pos:line="70" pos:column="18"/></name><operator pos:line="70" pos:column="18">-&gt;<pos:position pos:line="70" pos:column="23"/></operator><name pos:line="70" pos:column="20">data<pos:position pos:line="70" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="26">err<pos:position pos:line="70" pos:column="29"/></name><operator pos:line="70" pos:column="29">-&gt;<pos:position pos:line="70" pos:column="34"/></operator><name pos:line="70" pos:column="31">dsize<pos:position pos:line="70" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="38">"%s"<pos:position pos:line="70" pos:column="42"/></literal></expr></argument>, <argument><expr><call><name pos:line="70" pos:column="44">_<pos:position pos:line="70" pos:column="45"/></name><argument_list pos:line="70" pos:column="45">(<argument><expr><literal type="string" pos:line="70" pos:column="46">"Not enough subexpressions for "<pos:position pos:line="70" pos:column="78"/></literal>
                                       <literal type="string" pos:line="71" pos:column="40">"template"<pos:position pos:line="71" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="71" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="72" pos:column="5">remove_from_replace_list<pos:position pos:line="72" pos:column="29"/></name><argument_list pos:line="72" pos:column="29">(<argument><expr><name pos:line="72" pos:column="30">list<pos:position pos:line="72" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="36">pat<pos:position pos:line="72" pos:column="39"/></name></expr></argument>)<pos:position pos:line="72" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="41"/></expr_stmt>
    <return pos:line="73" pos:column="5">return <expr><operator pos:line="73" pos:column="12">-<pos:position pos:line="73" pos:column="13"/></operator><literal type="number" pos:line="73" pos:column="13">1<pos:position pos:line="73" pos:column="14"/></literal></expr>;<pos:position pos:line="73" pos:column="15"/></return>
  }<pos:position pos:line="74" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="76" pos:column="3">t<pos:position pos:line="76" pos:column="4"/></name><operator pos:line="76" pos:column="4">-&gt;<pos:position pos:line="76" pos:column="9"/></operator><name pos:line="76" pos:column="6">nmatch<pos:position pos:line="76" pos:column="12"/></name></name><operator pos:line="76" pos:column="12">++<pos:position pos:line="76" pos:column="14"/></operator></expr>;<pos:position pos:line="76" pos:column="15"/></expr_stmt>         <comment type="block" pos:line="76" pos:column="24">/* match 0 is always the whole expr */</comment>

  <return pos:line="78" pos:column="3">return <expr><literal type="number" pos:line="78" pos:column="10">0<pos:position pos:line="78" pos:column="11"/></literal></expr>;<pos:position pos:line="78" pos:column="12"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
