<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1913_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">_nl_init_domain_conv<pos:position pos:line="3" pos:column="21"/></name> <argument_list pos:line="3" pos:column="22">(<argument><expr><name pos:line="3" pos:column="23">domain_file<pos:position pos:line="3" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="36">domain<pos:position pos:line="3" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="44">domainbinding<pos:position pos:line="3" pos:column="57"/></name></expr></argument>)<pos:position pos:line="3" pos:column="58"/></argument_list>
     struct <name pos:line="4" pos:column="13">loaded_l10nfile<pos:position pos:line="4" pos:column="28"/></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier><name pos:line="4" pos:column="30">domain_file<pos:position pos:line="4" pos:column="41"/></name></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
     <decl_stmt><decl><type><name><name pos:line="5" pos:column="6">struct<pos:position pos:line="5" pos:column="12"/></name> <name pos:line="5" pos:column="13">loaded_domain<pos:position pos:line="5" pos:column="26"/></name></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">domain<pos:position pos:line="5" pos:column="34"/></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
     <decl_stmt><decl><type><name><name pos:line="6" pos:column="6">struct<pos:position pos:line="6" pos:column="12"/></name> <name pos:line="6" pos:column="13">binding<pos:position pos:line="6" pos:column="20"/></name></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">domainbinding<pos:position pos:line="6" pos:column="35"/></name></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>
<block pos:line="7" pos:column="1">{
  <comment type="block" pos:line="8" pos:column="3">/* Find out about the character set the file is encoded with.
     This can be found (in textual form) in the entry "".  If this
     entry does not exist or if this does not contain the `charset='
     information, we will assume the charset matches the one the
     current locale and we don't have to perform any conversion.  */</comment>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">char<pos:position pos:line="13" pos:column="7"/></name> <modifier pos:line="13" pos:column="8">*<pos:position pos:line="13" pos:column="9"/></modifier></type><name pos:line="13" pos:column="9">nullentry<pos:position pos:line="13" pos:column="18"/></name></decl>;<pos:position pos:line="13" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">size_t<pos:position pos:line="14" pos:column="9"/></name></type> <name pos:line="14" pos:column="10">nullentrylen<pos:position pos:line="14" pos:column="22"/></name></decl>;<pos:position pos:line="14" pos:column="23"/></decl_stmt>

  <comment type="block" pos:line="16" pos:column="3">/* Preinitialize fields, to avoid recursion during _nl_find_msg.  */</comment>
  <expr_stmt><expr><name><name pos:line="17" pos:column="3">domain<pos:position pos:line="17" pos:column="9"/></name><operator pos:line="17" pos:column="9">-&gt;<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="11">codeset_cntr<pos:position pos:line="17" pos:column="23"/></name></name> <operator pos:line="17" pos:column="24">=<pos:position pos:line="17" pos:column="25"/></operator>
    <operator pos:line="18" pos:column="5">(<pos:position pos:line="18" pos:column="6"/></operator><ternary><condition><expr><name pos:line="18" pos:column="6">domainbinding<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">!=<pos:position pos:line="18" pos:column="22"/></operator> <name pos:line="18" pos:column="23">NULL<pos:position pos:line="18" pos:column="27"/></name></expr> ?<pos:position pos:line="18" pos:column="29"/></condition><then pos:line="18" pos:column="29"> <expr><name><name pos:line="18" pos:column="30">domainbinding<pos:position pos:line="18" pos:column="43"/></name><operator pos:line="18" pos:column="43">-&gt;<pos:position pos:line="18" pos:column="48"/></operator><name pos:line="18" pos:column="45">codeset_cntr<pos:position pos:line="18" pos:column="57"/></name></name></expr> <pos:position pos:line="18" pos:column="58"/></then><else pos:line="18" pos:column="58">: <expr><literal type="number" pos:line="18" pos:column="60">0<pos:position pos:line="18" pos:column="61"/></literal></expr></else></ternary><operator pos:line="18" pos:column="61">)<pos:position pos:line="18" pos:column="62"/></operator></expr>;<pos:position pos:line="18" pos:column="63"/></expr_stmt>
<cpp:ifdef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifdef<pos:position pos:line="19" pos:column="7"/></cpp:directive> <name pos:line="19" pos:column="8">_LIBC<pos:position pos:line="19" pos:column="13"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="20" pos:column="3">domain<pos:position pos:line="20" pos:column="9"/></name><operator pos:line="20" pos:column="9">-&gt;<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="11">conv<pos:position pos:line="20" pos:column="15"/></name></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <operator pos:line="20" pos:column="18">(<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">__gconv_t<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">)<pos:position pos:line="20" pos:column="29"/></operator> <operator pos:line="20" pos:column="30">-<pos:position pos:line="20" pos:column="31"/></operator><literal type="number" pos:line="20" pos:column="31">1<pos:position pos:line="20" pos:column="32"/></literal></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt>
<cpp:else pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">else<pos:position pos:line="21" pos:column="6"/></cpp:directive></cpp:else>
<cpp:if pos:line="22" pos:column="1"># <cpp:directive pos:line="22" pos:column="3">if<pos:position pos:line="22" pos:column="5"/></cpp:directive> <expr><name pos:line="22" pos:column="6">HAVE_ICONV<pos:position pos:line="22" pos:column="16"/></name></expr></cpp:if>
  <expr_stmt><expr><name><name pos:line="23" pos:column="3">domain<pos:position pos:line="23" pos:column="9"/></name><operator pos:line="23" pos:column="9">-&gt;<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="11">conv<pos:position pos:line="23" pos:column="15"/></name></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <operator pos:line="23" pos:column="18">(<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="19">iconv_t<pos:position pos:line="23" pos:column="26"/></name><operator pos:line="23" pos:column="26">)<pos:position pos:line="23" pos:column="27"/></operator> <operator pos:line="23" pos:column="28">-<pos:position pos:line="23" pos:column="29"/></operator><literal type="number" pos:line="23" pos:column="29">1<pos:position pos:line="23" pos:column="30"/></literal></expr>;<pos:position pos:line="23" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="24" pos:column="1"># <cpp:directive pos:line="24" pos:column="3">endif<pos:position pos:line="24" pos:column="8"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name pos:line="26" pos:column="3">domain<pos:position pos:line="26" pos:column="9"/></name><operator pos:line="26" pos:column="9">-&gt;<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="11">conv_tab<pos:position pos:line="26" pos:column="19"/></name></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <name pos:line="26" pos:column="22">NULL<pos:position pos:line="26" pos:column="26"/></name></expr>;<pos:position pos:line="26" pos:column="27"/></expr_stmt>

  <comment type="block" pos:line="28" pos:column="3">/* Get the header entry.  */</comment>
  <expr_stmt><expr><name pos:line="29" pos:column="3">nullentry<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <call><name pos:line="29" pos:column="15">_nl_find_msg<pos:position pos:line="29" pos:column="27"/></name> <argument_list pos:line="29" pos:column="28">(<argument><expr><name pos:line="29" pos:column="29">domain_file<pos:position pos:line="29" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="42">domainbinding<pos:position pos:line="29" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="57">""<pos:position pos:line="29" pos:column="59"/></literal></expr></argument>, <argument><expr><operator pos:line="29" pos:column="61">&amp;<pos:position pos:line="29" pos:column="66"/></operator><name pos:line="29" pos:column="62">nullentrylen<pos:position pos:line="29" pos:column="74"/></name></expr></argument>)<pos:position pos:line="29" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="76"/></expr_stmt>

  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><name pos:line="31" pos:column="7">nullentry<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">!=<pos:position pos:line="31" pos:column="19"/></operator> <name pos:line="31" pos:column="20">NULL<pos:position pos:line="31" pos:column="24"/></name></expr>)<pos:position pos:line="31" pos:column="25"/></condition><then pos:line="31" pos:column="25">
    <block pos:line="32" pos:column="5">{
<cpp:if pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">if<pos:position pos:line="33" pos:column="4"/></cpp:directive> <expr><name pos:line="33" pos:column="5">defined<pos:position pos:line="33" pos:column="12"/></name> <name pos:line="33" pos:column="13">_LIBC<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">||<pos:position pos:line="33" pos:column="21"/></operator> <name pos:line="33" pos:column="22">HAVE_ICONV<pos:position pos:line="33" pos:column="32"/></name></expr></cpp:if>
      <decl_stmt><decl><type><specifier pos:line="34" pos:column="7">const<pos:position pos:line="34" pos:column="12"/></specifier> <name pos:line="34" pos:column="13">char<pos:position pos:line="34" pos:column="17"/></name> <modifier pos:line="34" pos:column="18">*<pos:position pos:line="34" pos:column="19"/></modifier></type><name pos:line="34" pos:column="19">charsetstr<pos:position pos:line="34" pos:column="29"/></name></decl>;<pos:position pos:line="34" pos:column="30"/></decl_stmt>

      <expr_stmt><expr><name pos:line="36" pos:column="7">charsetstr<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">=<pos:position pos:line="36" pos:column="19"/></operator> <call><name pos:line="36" pos:column="20">strstr<pos:position pos:line="36" pos:column="26"/></name> <argument_list pos:line="36" pos:column="27">(<argument><expr><name pos:line="36" pos:column="28">nullentry<pos:position pos:line="36" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="39">"charset="<pos:position pos:line="36" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="51"/></expr_stmt>
      <if pos:line="37" pos:column="7">if <condition pos:line="37" pos:column="10">(<expr><name pos:line="37" pos:column="11">charsetstr<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">!=<pos:position pos:line="37" pos:column="24"/></operator> <name pos:line="37" pos:column="25">NULL<pos:position pos:line="37" pos:column="29"/></name></expr>)<pos:position pos:line="37" pos:column="30"/></condition><then pos:line="37" pos:column="30">
	<block pos:line="38" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="39" pos:column="11">size_t<pos:position pos:line="39" pos:column="17"/></name></type> <name pos:line="39" pos:column="18">len<pos:position pos:line="39" pos:column="21"/></name></decl>;<pos:position pos:line="39" pos:column="22"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="40" pos:column="11">char<pos:position pos:line="40" pos:column="15"/></name> <modifier pos:line="40" pos:column="16">*<pos:position pos:line="40" pos:column="17"/></modifier></type><name pos:line="40" pos:column="17">charset<pos:position pos:line="40" pos:column="24"/></name></decl>;<pos:position pos:line="40" pos:column="25"/></decl_stmt>
	  <decl_stmt><decl><type><specifier pos:line="41" pos:column="11">const<pos:position pos:line="41" pos:column="16"/></specifier> <name pos:line="41" pos:column="17">char<pos:position pos:line="41" pos:column="21"/></name> <modifier pos:line="41" pos:column="22">*<pos:position pos:line="41" pos:column="23"/></modifier></type><name pos:line="41" pos:column="23">outcharset<pos:position pos:line="41" pos:column="33"/></name></decl>;<pos:position pos:line="41" pos:column="34"/></decl_stmt>

	  <expr_stmt><expr><name pos:line="43" pos:column="11">charsetstr<pos:position pos:line="43" pos:column="21"/></name> <operator pos:line="43" pos:column="22">+=<pos:position pos:line="43" pos:column="24"/></operator> <call><name pos:line="43" pos:column="25">strlen<pos:position pos:line="43" pos:column="31"/></name> <argument_list pos:line="43" pos:column="32">(<argument><expr><literal type="string" pos:line="43" pos:column="33">"charset="<pos:position pos:line="43" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="45"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="44" pos:column="11">len<pos:position pos:line="44" pos:column="14"/></name> <operator pos:line="44" pos:column="15">=<pos:position pos:line="44" pos:column="16"/></operator> <call><name pos:line="44" pos:column="17">strcspn<pos:position pos:line="44" pos:column="24"/></name> <argument_list pos:line="44" pos:column="25">(<argument><expr><name pos:line="44" pos:column="26">charsetstr<pos:position pos:line="44" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="38">" \t\n"<pos:position pos:line="44" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="47"/></expr_stmt>

	  <expr_stmt><expr><name pos:line="46" pos:column="11">charset<pos:position pos:line="46" pos:column="18"/></name> <operator pos:line="46" pos:column="19">=<pos:position pos:line="46" pos:column="20"/></operator> <operator pos:line="46" pos:column="21">(<pos:position pos:line="46" pos:column="22"/></operator><name pos:line="46" pos:column="22">char<pos:position pos:line="46" pos:column="26"/></name> <operator pos:line="46" pos:column="27">*<pos:position pos:line="46" pos:column="28"/></operator><operator pos:line="46" pos:column="28">)<pos:position pos:line="46" pos:column="29"/></operator> <call><name pos:line="46" pos:column="30">alloca<pos:position pos:line="46" pos:column="36"/></name> <argument_list pos:line="46" pos:column="37">(<argument><expr><name pos:line="46" pos:column="38">len<pos:position pos:line="46" pos:column="41"/></name> <operator pos:line="46" pos:column="42">+<pos:position pos:line="46" pos:column="43"/></operator> <literal type="number" pos:line="46" pos:column="44">1<pos:position pos:line="46" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="47"/></expr_stmt>
<cpp:if pos:line="47" pos:column="1"># <cpp:directive pos:line="47" pos:column="3">if<pos:position pos:line="47" pos:column="5"/></cpp:directive> <expr><name pos:line="47" pos:column="6">defined<pos:position pos:line="47" pos:column="13"/></name> <name pos:line="47" pos:column="14">_LIBC<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">||<pos:position pos:line="47" pos:column="22"/></operator> <name pos:line="47" pos:column="23">HAVE_MEMPCPY<pos:position pos:line="47" pos:column="35"/></name></expr></cpp:if>
	  <expr_stmt><expr><operator pos:line="48" pos:column="11">*<pos:position pos:line="48" pos:column="12"/></operator><operator pos:line="48" pos:column="12">(<pos:position pos:line="48" pos:column="13"/></operator><operator pos:line="48" pos:column="13">(<pos:position pos:line="48" pos:column="14"/></operator><name pos:line="48" pos:column="14">char<pos:position pos:line="48" pos:column="18"/></name> <operator pos:line="48" pos:column="19">*<pos:position pos:line="48" pos:column="20"/></operator><operator pos:line="48" pos:column="20">)<pos:position pos:line="48" pos:column="21"/></operator> <call><name pos:line="48" pos:column="22">mempcpy<pos:position pos:line="48" pos:column="29"/></name> <argument_list pos:line="48" pos:column="30">(<argument><expr><name pos:line="48" pos:column="31">charset<pos:position pos:line="48" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="40">charsetstr<pos:position pos:line="48" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="52">len<pos:position pos:line="48" pos:column="55"/></name></expr></argument>)<pos:position pos:line="48" pos:column="56"/></argument_list></call><operator pos:line="48" pos:column="56">)<pos:position pos:line="48" pos:column="57"/></operator> <operator pos:line="48" pos:column="58">=<pos:position pos:line="48" pos:column="59"/></operator> <literal type="char" pos:line="48" pos:column="60">'\0'<pos:position pos:line="48" pos:column="64"/></literal></expr>;<pos:position pos:line="48" pos:column="65"/></expr_stmt>
<cpp:else pos:line="49" pos:column="1"># <cpp:directive pos:line="49" pos:column="3">else<pos:position pos:line="49" pos:column="7"/></cpp:directive></cpp:else>
	  <expr_stmt><expr><call><name pos:line="50" pos:column="11">memcpy<pos:position pos:line="50" pos:column="17"/></name> <argument_list pos:line="50" pos:column="18">(<argument><expr><name pos:line="50" pos:column="19">charset<pos:position pos:line="50" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="28">charsetstr<pos:position pos:line="50" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="40">len<pos:position pos:line="50" pos:column="43"/></name></expr></argument>)<pos:position pos:line="50" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="45"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="51" pos:column="11">charset<pos:position pos:line="51" pos:column="18"/></name><index pos:line="51" pos:column="18">[<expr><name pos:line="51" pos:column="19">len<pos:position pos:line="51" pos:column="22"/></name></expr>]<pos:position pos:line="51" pos:column="23"/></index></name> <operator pos:line="51" pos:column="24">=<pos:position pos:line="51" pos:column="25"/></operator> <literal type="char" pos:line="51" pos:column="26">'\0'<pos:position pos:line="51" pos:column="30"/></literal></expr>;<pos:position pos:line="51" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="52" pos:column="1"># <cpp:directive pos:line="52" pos:column="3">endif<pos:position pos:line="52" pos:column="8"/></cpp:directive></cpp:endif>

	  <comment type="block" pos:line="54" pos:column="11">/* The output charset should normally be determined by the
	     locale.  But sometimes the locale is not used or not correctly
	     set up, so we provide a possibility for the user to override
	     this.  Moreover, the value specified through
	     bind_textdomain_codeset overrides both.  */</comment>
	  <if pos:line="59" pos:column="11">if <condition pos:line="59" pos:column="14">(<expr><name pos:line="59" pos:column="15">domainbinding<pos:position pos:line="59" pos:column="28"/></name> <operator pos:line="59" pos:column="29">!=<pos:position pos:line="59" pos:column="31"/></operator> <name pos:line="59" pos:column="32">NULL<pos:position pos:line="59" pos:column="36"/></name> <operator pos:line="59" pos:column="37">&amp;&amp;<pos:position pos:line="59" pos:column="47"/></operator> <name><name pos:line="59" pos:column="40">domainbinding<pos:position pos:line="59" pos:column="53"/></name><operator pos:line="59" pos:column="53">-&gt;<pos:position pos:line="59" pos:column="58"/></operator><name pos:line="59" pos:column="55">codeset<pos:position pos:line="59" pos:column="62"/></name></name> <operator pos:line="59" pos:column="63">!=<pos:position pos:line="59" pos:column="65"/></operator> <name pos:line="59" pos:column="66">NULL<pos:position pos:line="59" pos:column="70"/></name></expr>)<pos:position pos:line="59" pos:column="71"/></condition><then pos:line="59" pos:column="71">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="60" pos:column="13">outcharset<pos:position pos:line="60" pos:column="23"/></name> <operator pos:line="60" pos:column="24">=<pos:position pos:line="60" pos:column="25"/></operator> <name><name pos:line="60" pos:column="26">domainbinding<pos:position pos:line="60" pos:column="39"/></name><operator pos:line="60" pos:column="39">-&gt;<pos:position pos:line="60" pos:column="44"/></operator><name pos:line="60" pos:column="41">codeset<pos:position pos:line="60" pos:column="48"/></name></name></expr>;<pos:position pos:line="60" pos:column="49"/></expr_stmt></block></then>
	  <else pos:line="61" pos:column="11">else
	    <block pos:line="62" pos:column="13">{
	      <expr_stmt><expr><name pos:line="63" pos:column="15">outcharset<pos:position pos:line="63" pos:column="25"/></name> <operator pos:line="63" pos:column="26">=<pos:position pos:line="63" pos:column="27"/></operator> <call><name pos:line="63" pos:column="28">getenv<pos:position pos:line="63" pos:column="34"/></name> <argument_list pos:line="63" pos:column="35">(<argument><expr><literal type="string" pos:line="63" pos:column="36">"OUTPUT_CHARSET"<pos:position pos:line="63" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="54"/></expr_stmt>
	      <if pos:line="64" pos:column="15">if <condition pos:line="64" pos:column="18">(<expr><name pos:line="64" pos:column="19">outcharset<pos:position pos:line="64" pos:column="29"/></name> <operator pos:line="64" pos:column="30">==<pos:position pos:line="64" pos:column="32"/></operator> <name pos:line="64" pos:column="33">NULL<pos:position pos:line="64" pos:column="37"/></name> <operator pos:line="64" pos:column="38">||<pos:position pos:line="64" pos:column="40"/></operator> <name><name pos:line="64" pos:column="41">outcharset<pos:position pos:line="64" pos:column="51"/></name><index pos:line="64" pos:column="51">[<expr><literal type="number" pos:line="64" pos:column="52">0<pos:position pos:line="64" pos:column="53"/></literal></expr>]<pos:position pos:line="64" pos:column="54"/></index></name> <operator pos:line="64" pos:column="55">==<pos:position pos:line="64" pos:column="57"/></operator> <literal type="char" pos:line="64" pos:column="58">'\0'<pos:position pos:line="64" pos:column="62"/></literal></expr>)<pos:position pos:line="64" pos:column="63"/></condition><then pos:line="64" pos:column="63">
		<block pos:line="65" pos:column="17">{
<cpp:ifdef pos:line="66" pos:column="1"># <cpp:directive pos:line="66" pos:column="3">ifdef<pos:position pos:line="66" pos:column="8"/></cpp:directive> <name pos:line="66" pos:column="9">_LIBC<pos:position pos:line="66" pos:column="14"/></name></cpp:ifdef>
		  <expr_stmt><expr><name pos:line="67" pos:column="19">outcharset<pos:position pos:line="67" pos:column="29"/></name> <operator pos:line="67" pos:column="30">=<pos:position pos:line="67" pos:column="31"/></operator> <name><operator pos:line="67" pos:column="32">(<pos:position pos:line="67" pos:column="33"/></operator><operator pos:line="67" pos:column="33">*<pos:position pos:line="67" pos:column="34"/></operator><name pos:line="67" pos:column="34">_nl_current<pos:position pos:line="67" pos:column="45"/></name><index pos:line="67" pos:column="45">[<expr><name pos:line="67" pos:column="46">LC_CTYPE<pos:position pos:line="67" pos:column="54"/></name></expr>]<pos:position pos:line="67" pos:column="55"/></index><operator pos:line="67" pos:column="55">)<pos:position pos:line="67" pos:column="56"/></operator><operator pos:line="67" pos:column="56">-&gt;<pos:position pos:line="67" pos:column="61"/></operator><name pos:line="67" pos:column="58">values<pos:position pos:line="67" pos:column="64"/></name></name><index pos:line="67" pos:column="64">[<expr><call><name pos:line="67" pos:column="65">_NL_ITEM_INDEX<pos:position pos:line="67" pos:column="79"/></name> <argument_list pos:line="67" pos:column="80">(<argument><expr><name pos:line="67" pos:column="81">CODESET<pos:position pos:line="67" pos:column="88"/></name></expr></argument>)<pos:position pos:line="67" pos:column="89"/></argument_list></call></expr>]<pos:position pos:line="67" pos:column="90"/></index><operator pos:line="67" pos:column="90">.<pos:position pos:line="67" pos:column="91"/></operator><name pos:line="67" pos:column="91">string<pos:position pos:line="67" pos:column="97"/></name></expr>;<pos:position pos:line="67" pos:column="98"/></expr_stmt>
<cpp:else pos:line="68" pos:column="1"># <cpp:directive pos:line="68" pos:column="3">else<pos:position pos:line="68" pos:column="7"/></cpp:directive></cpp:else>
<cpp:if pos:line="69" pos:column="1">#  <cpp:directive pos:line="69" pos:column="4">if<pos:position pos:line="69" pos:column="6"/></cpp:directive> <expr><name pos:line="69" pos:column="7">HAVE_ICONV<pos:position pos:line="69" pos:column="17"/></name></expr></cpp:if>
		  <function_decl><specifier pos:line="70" pos:column="19">extern<pos:position pos:line="70" pos:column="25"/></specifier> <type><specifier pos:line="70" pos:column="26">const<pos:position pos:line="70" pos:column="31"/></specifier> <name pos:line="70" pos:column="32">char<pos:position pos:line="70" pos:column="36"/></name> <modifier pos:line="70" pos:column="37">*<pos:position pos:line="70" pos:column="38"/></modifier></type><name pos:line="70" pos:column="38">locale_charset<pos:position pos:line="70" pos:column="52"/></name> <parameter_list pos:line="70" pos:column="53">(<parameter><decl><type><name pos:line="70" pos:column="54">void<pos:position pos:line="70" pos:column="58"/></name></type></decl></parameter>)<pos:position pos:line="70" pos:column="59"/></parameter_list>;<pos:position pos:line="70" pos:column="60"/></function_decl>
		  <expr_stmt><expr><name pos:line="71" pos:column="19">outcharset<pos:position pos:line="71" pos:column="29"/></name> <operator pos:line="71" pos:column="30">=<pos:position pos:line="71" pos:column="31"/></operator> <call><name pos:line="71" pos:column="32">locale_charset<pos:position pos:line="71" pos:column="46"/></name> <argument_list pos:line="71" pos:column="47">()<pos:position pos:line="71" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="50"/></expr_stmt>
<cpp:endif pos:line="72" pos:column="1">#  <cpp:directive pos:line="72" pos:column="4">endif<pos:position pos:line="72" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="73" pos:column="1"># <cpp:directive pos:line="73" pos:column="3">endif<pos:position pos:line="73" pos:column="8"/></cpp:directive></cpp:endif>
		}<pos:position pos:line="74" pos:column="18"/></block></then></if>
	    }<pos:position pos:line="75" pos:column="14"/></block></else></if>

<cpp:ifdef pos:line="77" pos:column="1"># <cpp:directive pos:line="77" pos:column="3">ifdef<pos:position pos:line="77" pos:column="8"/></cpp:directive> <name pos:line="77" pos:column="9">_LIBC<pos:position pos:line="77" pos:column="14"/></name></cpp:ifdef>
	  <comment type="block" pos:line="78" pos:column="11">/* We always want to use transliteration.  */</comment>
	  <expr_stmt><expr><name pos:line="79" pos:column="11">outcharset<pos:position pos:line="79" pos:column="21"/></name> <operator pos:line="79" pos:column="22">=<pos:position pos:line="79" pos:column="23"/></operator> <call><name pos:line="79" pos:column="24">norm_add_slashes<pos:position pos:line="79" pos:column="40"/></name> <argument_list pos:line="79" pos:column="41">(<argument><expr><name pos:line="79" pos:column="42">outcharset<pos:position pos:line="79" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="54">"TRANSLIT"<pos:position pos:line="79" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="66"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="80" pos:column="11">charset<pos:position pos:line="80" pos:column="18"/></name> <operator pos:line="80" pos:column="19">=<pos:position pos:line="80" pos:column="20"/></operator> <call><name pos:line="80" pos:column="21">norm_add_slashes<pos:position pos:line="80" pos:column="37"/></name> <argument_list pos:line="80" pos:column="38">(<argument><expr><name pos:line="80" pos:column="39">charset<pos:position pos:line="80" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="48">NULL<pos:position pos:line="80" pos:column="52"/></name></expr></argument>)<pos:position pos:line="80" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="54"/></expr_stmt>
	  <if pos:line="81" pos:column="11">if <condition pos:line="81" pos:column="14">(<expr><call><name pos:line="81" pos:column="15">__gconv_open<pos:position pos:line="81" pos:column="27"/></name> <argument_list pos:line="81" pos:column="28">(<argument><expr><name pos:line="81" pos:column="29">outcharset<pos:position pos:line="81" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="41">charset<pos:position pos:line="81" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="50">&amp;<pos:position pos:line="81" pos:column="55"/></operator><name><name pos:line="81" pos:column="51">domain<pos:position pos:line="81" pos:column="57"/></name><operator pos:line="81" pos:column="57">-&gt;<pos:position pos:line="81" pos:column="62"/></operator><name pos:line="81" pos:column="59">conv<pos:position pos:line="81" pos:column="63"/></name></name></expr></argument>,
			    <argument><expr><name pos:line="82" pos:column="29">GCONV_AVOID_NOCONV<pos:position pos:line="82" pos:column="47"/></name></expr></argument>)<pos:position pos:line="82" pos:column="48"/></argument_list></call>
	      <operator pos:line="83" pos:column="15">!=<pos:position pos:line="83" pos:column="17"/></operator> <name pos:line="83" pos:column="18">__GCONV_OK<pos:position pos:line="83" pos:column="28"/></name></expr>)<pos:position pos:line="83" pos:column="29"/></condition><then pos:line="83" pos:column="29">
	    <block type="pseudo"><expr_stmt><expr><name><name pos:line="84" pos:column="13">domain<pos:position pos:line="84" pos:column="19"/></name><operator pos:line="84" pos:column="19">-&gt;<pos:position pos:line="84" pos:column="24"/></operator><name pos:line="84" pos:column="21">conv<pos:position pos:line="84" pos:column="25"/></name></name> <operator pos:line="84" pos:column="26">=<pos:position pos:line="84" pos:column="27"/></operator> <operator pos:line="84" pos:column="28">(<pos:position pos:line="84" pos:column="29"/></operator><name pos:line="84" pos:column="29">__gconv_t<pos:position pos:line="84" pos:column="38"/></name><operator pos:line="84" pos:column="38">)<pos:position pos:line="84" pos:column="39"/></operator> <operator pos:line="84" pos:column="40">-<pos:position pos:line="84" pos:column="41"/></operator><literal type="number" pos:line="84" pos:column="41">1<pos:position pos:line="84" pos:column="42"/></literal></expr>;<pos:position pos:line="84" pos:column="43"/></expr_stmt></block></then></if>
<cpp:else pos:line="85" pos:column="1"># <cpp:directive pos:line="85" pos:column="3">else<pos:position pos:line="85" pos:column="7"/></cpp:directive></cpp:else>
<cpp:if pos:line="86" pos:column="1">#  <cpp:directive pos:line="86" pos:column="4">if<pos:position pos:line="86" pos:column="6"/></cpp:directive> <expr><name pos:line="86" pos:column="7">HAVE_ICONV<pos:position pos:line="86" pos:column="17"/></name></expr></cpp:if>
	  <comment type="block" pos:line="87" pos:column="11">/* When using GNU libiconv, we want to use transliteration.  */</comment>
<cpp:if pos:line="88" pos:column="1">#   <cpp:directive pos:line="88" pos:column="5">if<pos:position pos:line="88" pos:column="7"/></cpp:directive> <expr><name pos:line="88" pos:column="8">_LIBICONV_VERSION<pos:position pos:line="88" pos:column="25"/></name> <operator pos:line="88" pos:column="26">&gt;=<pos:position pos:line="88" pos:column="31"/></operator> <literal type="number" pos:line="88" pos:column="29">0x0105<pos:position pos:line="88" pos:column="35"/></literal></expr></cpp:if>
	  <expr_stmt><expr><name pos:line="89" pos:column="11">len<pos:position pos:line="89" pos:column="14"/></name> <operator pos:line="89" pos:column="15">=<pos:position pos:line="89" pos:column="16"/></operator> <call><name pos:line="89" pos:column="17">strlen<pos:position pos:line="89" pos:column="23"/></name> <argument_list pos:line="89" pos:column="24">(<argument><expr><name pos:line="89" pos:column="25">outcharset<pos:position pos:line="89" pos:column="35"/></name></expr></argument>)<pos:position pos:line="89" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="37"/></expr_stmt>
	  <block pos:line="90" pos:column="11">{
	    <decl_stmt><decl><type><name pos:line="91" pos:column="13">char<pos:position pos:line="91" pos:column="17"/></name> <modifier pos:line="91" pos:column="18">*<pos:position pos:line="91" pos:column="19"/></modifier></type><name pos:line="91" pos:column="19">tmp<pos:position pos:line="91" pos:column="22"/></name> <init pos:line="91" pos:column="23">= <expr><operator pos:line="91" pos:column="25">(<pos:position pos:line="91" pos:column="26"/></operator><name pos:line="91" pos:column="26">char<pos:position pos:line="91" pos:column="30"/></name> <operator pos:line="91" pos:column="31">*<pos:position pos:line="91" pos:column="32"/></operator><operator pos:line="91" pos:column="32">)<pos:position pos:line="91" pos:column="33"/></operator> <call><name pos:line="91" pos:column="34">alloca<pos:position pos:line="91" pos:column="40"/></name> <argument_list pos:line="91" pos:column="41">(<argument><expr><name pos:line="91" pos:column="42">len<pos:position pos:line="91" pos:column="45"/></name> <operator pos:line="91" pos:column="46">+<pos:position pos:line="91" pos:column="47"/></operator> <literal type="number" pos:line="91" pos:column="48">10<pos:position pos:line="91" pos:column="50"/></literal> <operator pos:line="91" pos:column="51">+<pos:position pos:line="91" pos:column="52"/></operator> <literal type="number" pos:line="91" pos:column="53">1<pos:position pos:line="91" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="91" pos:column="56"/></decl_stmt>
	    <expr_stmt><expr><call><name pos:line="92" pos:column="13">memcpy<pos:position pos:line="92" pos:column="19"/></name> <argument_list pos:line="92" pos:column="20">(<argument><expr><name pos:line="92" pos:column="21">tmp<pos:position pos:line="92" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="26">outcharset<pos:position pos:line="92" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="38">len<pos:position pos:line="92" pos:column="41"/></name></expr></argument>)<pos:position pos:line="92" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="43"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="93" pos:column="13">memcpy<pos:position pos:line="93" pos:column="19"/></name> <argument_list pos:line="93" pos:column="20">(<argument><expr><name pos:line="93" pos:column="21">tmp<pos:position pos:line="93" pos:column="24"/></name> <operator pos:line="93" pos:column="25">+<pos:position pos:line="93" pos:column="26"/></operator> <name pos:line="93" pos:column="27">len<pos:position pos:line="93" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="32">"//TRANSLIT"<pos:position pos:line="93" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="46">10<pos:position pos:line="93" pos:column="48"/></literal> <operator pos:line="93" pos:column="49">+<pos:position pos:line="93" pos:column="50"/></operator> <literal type="number" pos:line="93" pos:column="51">1<pos:position pos:line="93" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="54"/></expr_stmt>
	    <expr_stmt><expr><name pos:line="94" pos:column="13">outcharset<pos:position pos:line="94" pos:column="23"/></name> <operator pos:line="94" pos:column="24">=<pos:position pos:line="94" pos:column="25"/></operator> <name pos:line="94" pos:column="26">tmp<pos:position pos:line="94" pos:column="29"/></name></expr>;<pos:position pos:line="94" pos:column="30"/></expr_stmt>
	  }<pos:position pos:line="95" pos:column="12"/></block>
<cpp:endif pos:line="96" pos:column="1">#   <cpp:directive pos:line="96" pos:column="5">endif<pos:position pos:line="96" pos:column="10"/></cpp:directive></cpp:endif>
	  <expr_stmt><expr><name><name pos:line="97" pos:column="11">domain<pos:position pos:line="97" pos:column="17"/></name><operator pos:line="97" pos:column="17">-&gt;<pos:position pos:line="97" pos:column="22"/></operator><name pos:line="97" pos:column="19">conv<pos:position pos:line="97" pos:column="23"/></name></name> <operator pos:line="97" pos:column="24">=<pos:position pos:line="97" pos:column="25"/></operator> <call><name pos:line="97" pos:column="26">iconv_open<pos:position pos:line="97" pos:column="36"/></name> <argument_list pos:line="97" pos:column="37">(<argument><expr><name pos:line="97" pos:column="38">outcharset<pos:position pos:line="97" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="50">charset<pos:position pos:line="97" pos:column="57"/></name></expr></argument>)<pos:position pos:line="97" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="59"/></expr_stmt>
<cpp:if pos:line="98" pos:column="1">#   <cpp:directive pos:line="98" pos:column="5">if<pos:position pos:line="98" pos:column="7"/></cpp:directive> <expr><name pos:line="98" pos:column="8">_LIBICONV_VERSION<pos:position pos:line="98" pos:column="25"/></name> <operator pos:line="98" pos:column="26">&gt;=<pos:position pos:line="98" pos:column="31"/></operator> <literal type="number" pos:line="98" pos:column="29">0x0105<pos:position pos:line="98" pos:column="35"/></literal></expr></cpp:if>
	  <expr_stmt><expr><call><name pos:line="99" pos:column="11">freea<pos:position pos:line="99" pos:column="16"/></name> <argument_list pos:line="99" pos:column="17">(<argument><expr><name pos:line="99" pos:column="18">outcharset<pos:position pos:line="99" pos:column="28"/></name></expr></argument>)<pos:position pos:line="99" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="100" pos:column="1">#   <cpp:directive pos:line="100" pos:column="5">endif<pos:position pos:line="100" pos:column="10"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="101" pos:column="1">#  <cpp:directive pos:line="101" pos:column="4">endif<pos:position pos:line="101" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="102" pos:column="1"># <cpp:directive pos:line="102" pos:column="3">endif<pos:position pos:line="102" pos:column="8"/></cpp:directive></cpp:endif>

	  <expr_stmt><expr><call><name pos:line="104" pos:column="11">freea<pos:position pos:line="104" pos:column="16"/></name> <argument_list pos:line="104" pos:column="17">(<argument><expr><name pos:line="104" pos:column="18">charset<pos:position pos:line="104" pos:column="25"/></name></expr></argument>)<pos:position pos:line="104" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="105" pos:column="10"/></block></then></if>
<cpp:endif pos:line="106" pos:column="1">#<cpp:directive pos:line="106" pos:column="2">endif<pos:position pos:line="106" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="106" pos:column="8">/* _LIBC || HAVE_ICONV */</comment>
    }<pos:position pos:line="107" pos:column="6"/></block></then></if>

  <return pos:line="109" pos:column="3">return <expr><name pos:line="109" pos:column="10">nullentry<pos:position pos:line="109" pos:column="19"/></name></expr>;<pos:position pos:line="109" pos:column="20"/></return>
}<pos:position pos:line="110" pos:column="2"/></block></unit>
