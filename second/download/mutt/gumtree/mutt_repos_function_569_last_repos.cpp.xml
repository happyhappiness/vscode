<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_569_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">socket_connect<pos:position pos:line="1" pos:column="26"/></name> <parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">int<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">fd<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">sockaddr<pos:position pos:line="1" pos:column="51"/></name></name><modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type> <name pos:line="1" pos:column="53">sa<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">sa_size<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">save_errno<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">sigset_t<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">set<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name><name pos:line="7" pos:column="7">sa<pos:position pos:line="7" pos:column="9"/></name><operator pos:line="7" pos:column="9">-&gt;<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="11">sa_family<pos:position pos:line="7" pos:column="20"/></name></name> <operator pos:line="7" pos:column="21">==<pos:position pos:line="7" pos:column="23"/></operator> <name pos:line="7" pos:column="24">AF_INET<pos:position pos:line="7" pos:column="31"/></name></expr>)<pos:position pos:line="7" pos:column="32"/></condition><then pos:line="7" pos:column="32">
    <block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="5">sa_size<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">=<pos:position pos:line="8" pos:column="14"/></operator> <sizeof pos:line="8" pos:column="15">sizeof <argument_list pos:line="8" pos:column="22">(<argument><expr pos:line="8" pos:column="23">struct <name pos:line="8" pos:column="30">sockaddr_in<pos:position pos:line="8" pos:column="41"/></name></expr></argument>)<pos:position pos:line="8" pos:column="42"/></argument_list></sizeof></expr>;<pos:position pos:line="8" pos:column="43"/></expr_stmt></block></then>
<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef<pos:position pos:line="9" pos:column="7"/></cpp:directive> <name pos:line="9" pos:column="8">HAVE_GETADDRINFO<pos:position pos:line="9" pos:column="24"/></name></cpp:ifdef>
  <elseif pos:line="10" pos:column="3">else <if pos:line="10" pos:column="8">if <condition pos:line="10" pos:column="11">(<expr><name><name pos:line="10" pos:column="12">sa<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">-&gt;<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="16">sa_family<pos:position pos:line="10" pos:column="25"/></name></name> <operator pos:line="10" pos:column="26">==<pos:position pos:line="10" pos:column="28"/></operator> <name pos:line="10" pos:column="29">AF_INET6<pos:position pos:line="10" pos:column="37"/></name></expr>)<pos:position pos:line="10" pos:column="38"/></condition><then pos:line="10" pos:column="38">
    <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="5">sa_size<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <sizeof pos:line="11" pos:column="15">sizeof <argument_list pos:line="11" pos:column="22">(<argument><expr pos:line="11" pos:column="23">struct <name pos:line="11" pos:column="30">sockaddr_in6<pos:position pos:line="11" pos:column="42"/></name></expr></argument>)<pos:position pos:line="11" pos:column="43"/></argument_list></sizeof></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt></block></then></if></elseif>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>
  <else pos:line="13" pos:column="3">else
  <block pos:line="14" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">dprint<pos:position pos:line="15" pos:column="11"/></name> <argument_list pos:line="15" pos:column="12">(<argument><expr><literal type="number" pos:line="15" pos:column="13">1<pos:position pos:line="15" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="15" pos:column="16">(<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">debugfile<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">,<pos:position pos:line="15" pos:column="27"/></operator> <literal type="string" pos:line="15" pos:column="28">"Unknown address family!\n"<pos:position pos:line="15" pos:column="55"/></literal><operator pos:line="15" pos:column="55">)<pos:position pos:line="15" pos:column="56"/></operator></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="58"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">-<pos:position pos:line="16" pos:column="13"/></operator><literal type="number" pos:line="16" pos:column="13">1<pos:position pos:line="16" pos:column="14"/></literal></expr>;<pos:position pos:line="16" pos:column="15"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></else></if>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">ConnectTimeout<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">&gt;<pos:position pos:line="19" pos:column="26"/></operator> <literal type="number" pos:line="19" pos:column="24">0<pos:position pos:line="19" pos:column="25"/></literal></expr>)<pos:position pos:line="19" pos:column="26"/></condition><then pos:line="19" pos:column="26">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="7">alarm<pos:position pos:line="20" pos:column="12"/></name> <argument_list pos:line="20" pos:column="13">(<argument><expr><name pos:line="20" pos:column="14">ConnectTimeout<pos:position pos:line="20" pos:column="28"/></name></expr></argument>)<pos:position pos:line="20" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="30"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="22" pos:column="3">mutt_allow_interrupt<pos:position pos:line="22" pos:column="23"/></name> <argument_list pos:line="22" pos:column="24">(<argument><expr><literal type="number" pos:line="22" pos:column="25">1<pos:position pos:line="22" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="28"/></expr_stmt>

  <comment type="block" pos:line="24" pos:column="3">/* FreeBSD's connect() does not respect SA_RESTART, meaning
   * a SIGWINCH will cause the connect to fail. */</comment>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">sigemptyset<pos:position pos:line="26" pos:column="14"/></name> <argument_list pos:line="26" pos:column="15">(<argument><expr><operator pos:line="26" pos:column="16">&amp;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="17">set<pos:position pos:line="26" pos:column="20"/></name></expr></argument>)<pos:position pos:line="26" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">sigaddset<pos:position pos:line="27" pos:column="12"/></name> <argument_list pos:line="27" pos:column="13">(<argument><expr><operator pos:line="27" pos:column="14">&amp;<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="15">set<pos:position pos:line="27" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="20">SIGWINCH<pos:position pos:line="27" pos:column="28"/></name></expr></argument>)<pos:position pos:line="27" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">sigprocmask<pos:position pos:line="28" pos:column="14"/></name> <argument_list pos:line="28" pos:column="15">(<argument><expr><name pos:line="28" pos:column="16">SIG_BLOCK<pos:position pos:line="28" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="27">&amp;<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="28">set<pos:position pos:line="28" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="33">NULL<pos:position pos:line="28" pos:column="37"/></name></expr></argument>)<pos:position pos:line="28" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>

  <expr_stmt><expr><name pos:line="30" pos:column="3">save_errno<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">=<pos:position pos:line="30" pos:column="15"/></operator> <literal type="number" pos:line="30" pos:column="16">0<pos:position pos:line="30" pos:column="17"/></literal></expr>;<pos:position pos:line="30" pos:column="18"/></expr_stmt>

  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><call><name pos:line="32" pos:column="7">connect<pos:position pos:line="32" pos:column="14"/></name> <argument_list pos:line="32" pos:column="15">(<argument><expr><name pos:line="32" pos:column="16">fd<pos:position pos:line="32" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="20">sa<pos:position pos:line="32" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="24">sa_size<pos:position pos:line="32" pos:column="31"/></name></expr></argument>)<pos:position pos:line="32" pos:column="32"/></argument_list></call> <operator pos:line="32" pos:column="33">&lt;<pos:position pos:line="32" pos:column="37"/></operator> <literal type="number" pos:line="32" pos:column="35">0<pos:position pos:line="32" pos:column="36"/></literal></expr>)<pos:position pos:line="32" pos:column="37"/></condition><then pos:line="32" pos:column="37">
  <block pos:line="33" pos:column="3">{
      <expr_stmt><expr><name pos:line="34" pos:column="7">save_errno<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">=<pos:position pos:line="34" pos:column="19"/></operator> <name pos:line="34" pos:column="20">errno<pos:position pos:line="34" pos:column="25"/></name></expr>;<pos:position pos:line="34" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="35" pos:column="7">dprint<pos:position pos:line="35" pos:column="13"/></name> <argument_list pos:line="35" pos:column="14">(<argument><expr><literal type="number" pos:line="35" pos:column="15">2<pos:position pos:line="35" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="35" pos:column="18">(<pos:position pos:line="35" pos:column="19"/></operator><name pos:line="35" pos:column="19">debugfile<pos:position pos:line="35" pos:column="28"/></name><operator pos:line="35" pos:column="28">,<pos:position pos:line="35" pos:column="29"/></operator> <literal type="string" pos:line="35" pos:column="30">"Connection failed. errno: %d...\n"<pos:position pos:line="35" pos:column="65"/></literal><operator pos:line="35" pos:column="65">,<pos:position pos:line="35" pos:column="66"/></operator> <name pos:line="35" pos:column="67">errno<pos:position pos:line="35" pos:column="72"/></name><operator pos:line="35" pos:column="72">)<pos:position pos:line="35" pos:column="73"/></operator></expr></argument>)<pos:position pos:line="35" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="75"/></expr_stmt>
      <expr_stmt><expr><name pos:line="36" pos:column="7">SigInt<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">=<pos:position pos:line="36" pos:column="15"/></operator> <literal type="number" pos:line="36" pos:column="16">0<pos:position pos:line="36" pos:column="17"/></literal></expr>;<pos:position pos:line="36" pos:column="18"/></expr_stmt>	<comment type="block" pos:line="36" pos:column="25">/* reset in case we caught SIGINTR while in connect() */</comment>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>

  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><name pos:line="39" pos:column="7">ConnectTimeout<pos:position pos:line="39" pos:column="21"/></name> <operator pos:line="39" pos:column="22">&gt;<pos:position pos:line="39" pos:column="26"/></operator> <literal type="number" pos:line="39" pos:column="24">0<pos:position pos:line="39" pos:column="25"/></literal></expr>)<pos:position pos:line="39" pos:column="26"/></condition><then pos:line="39" pos:column="26">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="7">alarm<pos:position pos:line="40" pos:column="12"/></name> <argument_list pos:line="40" pos:column="13">(<argument><expr><literal type="number" pos:line="40" pos:column="14">0<pos:position pos:line="40" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="17"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">mutt_allow_interrupt<pos:position pos:line="41" pos:column="23"/></name> <argument_list pos:line="41" pos:column="24">(<argument><expr><literal type="number" pos:line="41" pos:column="25">0<pos:position pos:line="41" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="42" pos:column="3">sigprocmask<pos:position pos:line="42" pos:column="14"/></name> <argument_list pos:line="42" pos:column="15">(<argument><expr><name pos:line="42" pos:column="16">SIG_UNBLOCK<pos:position pos:line="42" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="29">&amp;<pos:position pos:line="42" pos:column="34"/></operator><name pos:line="42" pos:column="30">set<pos:position pos:line="42" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="35">NULL<pos:position pos:line="42" pos:column="39"/></name></expr></argument>)<pos:position pos:line="42" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="41"/></expr_stmt>

  <return pos:line="44" pos:column="3">return <expr><name pos:line="44" pos:column="10">save_errno<pos:position pos:line="44" pos:column="20"/></name></expr>;<pos:position pos:line="44" pos:column="21"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
