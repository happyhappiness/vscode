<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_530_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mx_lock_file<pos:position pos:line="1" pos:column="17"/></name> <parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">path<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">int<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">fd<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">int<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">excl<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">int<pos:position pos:line="1" pos:column="58"/></name></type> <name pos:line="1" pos:column="59">dot<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="64">int<pos:position pos:line="1" pos:column="67"/></name></type> <name pos:line="1" pos:column="68">timeout<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><call><name pos:line="3" pos:column="5">defined<pos:position pos:line="3" pos:column="12"/></name> <argument_list pos:line="3" pos:column="13">(<argument><expr><name pos:line="3" pos:column="14">USE_FCNTL<pos:position pos:line="3" pos:column="23"/></name></expr></argument>)<pos:position pos:line="3" pos:column="24"/></argument_list></call> <operator pos:line="3" pos:column="25">||<pos:position pos:line="3" pos:column="27"/></operator> <call><name pos:line="3" pos:column="28">defined<pos:position pos:line="3" pos:column="35"/></name> <argument_list pos:line="3" pos:column="36">(<argument><expr><name pos:line="3" pos:column="37">USE_FLOCK<pos:position pos:line="3" pos:column="46"/></name></expr></argument>)<pos:position pos:line="3" pos:column="47"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">count<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">attempt<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">stat<pos:position pos:line="6" pos:column="14"/></name></name></type> <name pos:line="6" pos:column="15">sb<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><block pos:line="6" pos:column="20">{ <expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr> }<pos:position pos:line="6" pos:column="25"/></block></expr></init></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="27">prev_sb<pos:position pos:line="6" pos:column="34"/></name> <init pos:line="6" pos:column="35">= <expr><block pos:line="6" pos:column="37">{ <expr><literal type="number" pos:line="6" pos:column="39">0<pos:position pos:line="6" pos:column="40"/></literal></expr> }<pos:position pos:line="6" pos:column="42"/></block></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt> <comment type="block" pos:line="6" pos:column="44">/* silence gcc warnings */</comment>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">r<pos:position pos:line="8" pos:column="8"/></name> <init pos:line="8" pos:column="9">= <expr><literal type="number" pos:line="8" pos:column="11">0<pos:position pos:line="8" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>

<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">USE_FCNTL<pos:position pos:line="10" pos:column="17"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">flock<pos:position pos:line="11" pos:column="15"/></name></name></type> <name pos:line="11" pos:column="16">lck<pos:position pos:line="11" pos:column="19"/></name></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>
  
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">memset<pos:position pos:line="13" pos:column="9"/></name> <argument_list pos:line="13" pos:column="10">(<argument><expr><operator pos:line="13" pos:column="11">&amp;<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="12">lck<pos:position pos:line="13" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="20">sizeof <argument_list pos:line="13" pos:column="27">(<argument><expr pos:line="13" pos:column="28">struct <name pos:line="13" pos:column="35">flock<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="14" pos:column="3">lck<pos:position pos:line="14" pos:column="6"/></name><operator pos:line="14" pos:column="6">.<pos:position pos:line="14" pos:column="7"/></operator><name pos:line="14" pos:column="7">l_type<pos:position pos:line="14" pos:column="13"/></name></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <ternary><condition><expr><name pos:line="14" pos:column="16">excl<pos:position pos:line="14" pos:column="20"/></name></expr> ?<pos:position pos:line="14" pos:column="22"/></condition><then pos:line="14" pos:column="22"> <expr><name pos:line="14" pos:column="23">F_WRLCK<pos:position pos:line="14" pos:column="30"/></name></expr> <pos:position pos:line="14" pos:column="31"/></then><else pos:line="14" pos:column="31">: <expr><name pos:line="14" pos:column="33">F_RDLCK<pos:position pos:line="14" pos:column="40"/></name></expr></else></ternary></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="15" pos:column="3">lck<pos:position pos:line="15" pos:column="6"/></name><operator pos:line="15" pos:column="6">.<pos:position pos:line="15" pos:column="7"/></operator><name pos:line="15" pos:column="7">l_whence<pos:position pos:line="15" pos:column="15"/></name></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <name pos:line="15" pos:column="18">SEEK_SET<pos:position pos:line="15" pos:column="26"/></name></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt>

  <expr_stmt><expr><name pos:line="17" pos:column="3">count<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">=<pos:position pos:line="17" pos:column="10"/></operator> <literal type="number" pos:line="17" pos:column="11">0<pos:position pos:line="17" pos:column="12"/></literal></expr>;<pos:position pos:line="17" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name pos:line="18" pos:column="3">attempt<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <literal type="number" pos:line="18" pos:column="13">0<pos:position pos:line="18" pos:column="14"/></literal></expr>;<pos:position pos:line="18" pos:column="15"/></expr_stmt>
  <while pos:line="19" pos:column="3">while <condition pos:line="19" pos:column="9">(<expr><call><name pos:line="19" pos:column="10">fcntl<pos:position pos:line="19" pos:column="15"/></name> <argument_list pos:line="19" pos:column="16">(<argument><expr><name pos:line="19" pos:column="17">fd<pos:position pos:line="19" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="21">F_SETLK<pos:position pos:line="19" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="30">&amp;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="31">lck<pos:position pos:line="19" pos:column="34"/></name></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></call> <operator pos:line="19" pos:column="36">==<pos:position pos:line="19" pos:column="38"/></operator> <operator pos:line="19" pos:column="39">-<pos:position pos:line="19" pos:column="40"/></operator><literal type="number" pos:line="19" pos:column="40">1<pos:position pos:line="19" pos:column="41"/></literal></expr>)<pos:position pos:line="19" pos:column="42"/></condition>
  <block pos:line="20" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">dprint<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><literal type="number" pos:line="21" pos:column="12">1<pos:position pos:line="21" pos:column="13"/></literal></expr></argument>,<argument><expr><operator pos:line="21" pos:column="14">(<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="15">debugfile<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">,<pos:position pos:line="21" pos:column="25"/></operator> <literal type="string" pos:line="21" pos:column="26">"mx_lock_file(): fcntl errno %d.\n"<pos:position pos:line="21" pos:column="61"/></literal><operator pos:line="21" pos:column="61">,<pos:position pos:line="21" pos:column="62"/></operator> <name pos:line="21" pos:column="63">errno<pos:position pos:line="21" pos:column="68"/></name><operator pos:line="21" pos:column="68">)<pos:position pos:line="21" pos:column="69"/></operator></expr></argument>)<pos:position pos:line="21" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="71"/></expr_stmt>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">errno<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">!=<pos:position pos:line="22" pos:column="17"/></operator> <name pos:line="22" pos:column="18">EAGAIN<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">&amp;&amp;<pos:position pos:line="22" pos:column="35"/></operator> <name pos:line="22" pos:column="28">errno<pos:position pos:line="22" pos:column="33"/></name> <operator pos:line="22" pos:column="34">!=<pos:position pos:line="22" pos:column="36"/></operator> <name pos:line="22" pos:column="37">EACCES<pos:position pos:line="22" pos:column="43"/></name></expr>)<pos:position pos:line="22" pos:column="44"/></condition><then pos:line="22" pos:column="44">
    <block pos:line="23" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="24" pos:column="7">mutt_perror<pos:position pos:line="24" pos:column="18"/></name> <argument_list pos:line="24" pos:column="19">(<argument><expr><literal type="string" pos:line="24" pos:column="20">"fcntl"<pos:position pos:line="24" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
      <return pos:line="25" pos:column="7">return <expr><operator pos:line="25" pos:column="14">-<pos:position pos:line="25" pos:column="15"/></operator><literal type="number" pos:line="25" pos:column="15">1<pos:position pos:line="25" pos:column="16"/></literal></expr>;<pos:position pos:line="25" pos:column="17"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><call><name pos:line="28" pos:column="9">fstat<pos:position pos:line="28" pos:column="14"/></name> <argument_list pos:line="28" pos:column="15">(<argument><expr><name pos:line="28" pos:column="16">fd<pos:position pos:line="28" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="20">&amp;<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="21">sb<pos:position pos:line="28" pos:column="23"/></name></expr></argument>)<pos:position pos:line="28" pos:column="24"/></argument_list></call> <operator pos:line="28" pos:column="25">!=<pos:position pos:line="28" pos:column="27"/></operator> <literal type="number" pos:line="28" pos:column="28">0<pos:position pos:line="28" pos:column="29"/></literal></expr>)<pos:position pos:line="28" pos:column="30"/></condition><then pos:line="28" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="29" pos:column="7">sb<pos:position pos:line="29" pos:column="9"/></name><operator pos:line="29" pos:column="9">.<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">st_size<pos:position pos:line="29" pos:column="17"/></name></name> <operator pos:line="29" pos:column="18">=<pos:position pos:line="29" pos:column="19"/></operator> <literal type="number" pos:line="29" pos:column="20">0<pos:position pos:line="29" pos:column="21"/></literal></expr>;<pos:position pos:line="29" pos:column="22"/></expr_stmt></block></then></if>
    
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">count<pos:position pos:line="31" pos:column="14"/></name> <operator pos:line="31" pos:column="15">==<pos:position pos:line="31" pos:column="17"/></operator> <literal type="number" pos:line="31" pos:column="18">0<pos:position pos:line="31" pos:column="19"/></literal></expr>)<pos:position pos:line="31" pos:column="20"/></condition><then pos:line="31" pos:column="20">
      <block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="7">prev_sb<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">=<pos:position pos:line="32" pos:column="16"/></operator> <name pos:line="32" pos:column="17">sb<pos:position pos:line="32" pos:column="19"/></name></expr>;<pos:position pos:line="32" pos:column="20"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="34" pos:column="5">/* only unlock file if it is unchanged */</comment>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name><name pos:line="35" pos:column="9">prev_sb<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">.<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="17">st_size<pos:position pos:line="35" pos:column="24"/></name></name> <operator pos:line="35" pos:column="25">==<pos:position pos:line="35" pos:column="27"/></operator> <name><name pos:line="35" pos:column="28">sb<pos:position pos:line="35" pos:column="30"/></name><operator pos:line="35" pos:column="30">.<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="31">st_size<pos:position pos:line="35" pos:column="38"/></name></name> <operator pos:line="35" pos:column="39">&amp;&amp;<pos:position pos:line="35" pos:column="49"/></operator> <operator pos:line="35" pos:column="42">++<pos:position pos:line="35" pos:column="44"/></operator><name pos:line="35" pos:column="44">count<pos:position pos:line="35" pos:column="49"/></name> <operator pos:line="35" pos:column="50">&gt;=<pos:position pos:line="35" pos:column="55"/></operator> <operator pos:line="35" pos:column="53">(<pos:position pos:line="35" pos:column="54"/></operator><ternary><condition><expr><name pos:line="35" pos:column="54">timeout<pos:position pos:line="35" pos:column="61"/></name></expr>?<pos:position pos:line="35" pos:column="62"/></condition><then><expr><name pos:line="35" pos:column="62">MAXLOCKATTEMPT<pos:position pos:line="35" pos:column="76"/></name></expr></then><else pos:line="35" pos:column="76">:<expr><literal type="number" pos:line="35" pos:column="77">0<pos:position pos:line="35" pos:column="78"/></literal></expr></else></ternary><operator pos:line="35" pos:column="78">)<pos:position pos:line="35" pos:column="79"/></operator></expr>)<pos:position pos:line="35" pos:column="80"/></condition><then pos:line="35" pos:column="80">
    <block pos:line="36" pos:column="5">{
      <if pos:line="37" pos:column="7">if <condition pos:line="37" pos:column="10">(<expr><name pos:line="37" pos:column="11">timeout<pos:position pos:line="37" pos:column="18"/></name></expr>)<pos:position pos:line="37" pos:column="19"/></condition><then pos:line="37" pos:column="19">
	<block type="pseudo"><decl_stmt><decl><type><name pos:line="38" pos:column="9">mutt_error<pos:position pos:line="38" pos:column="19"/></name></type> <name pos:line="38" pos:column="20">_<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><literal type="string" pos:line="38" pos:column="22">"Timeout exceeded while attempting fcntl lock!"<pos:position pos:line="38" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="70"/></argument_list></decl>;<pos:position pos:line="38" pos:column="71"/></decl_stmt></block></then></if>
      <return pos:line="39" pos:column="7">return <expr><operator pos:line="39" pos:column="14">-<pos:position pos:line="39" pos:column="15"/></operator><literal type="number" pos:line="39" pos:column="15">1<pos:position pos:line="39" pos:column="16"/></literal></expr>;<pos:position pos:line="39" pos:column="17"/></return>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="42" pos:column="5">prev_sb<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">=<pos:position pos:line="42" pos:column="14"/></operator> <name pos:line="42" pos:column="15">sb<pos:position pos:line="42" pos:column="17"/></name></expr>;<pos:position pos:line="42" pos:column="18"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="44" pos:column="5">mutt_message<pos:position pos:line="44" pos:column="17"/></name> <argument_list pos:line="44" pos:column="18">(<argument><expr><call><name pos:line="44" pos:column="19">_<pos:position pos:line="44" pos:column="20"/></name><argument_list pos:line="44" pos:column="20">(<argument><expr><literal type="string" pos:line="44" pos:column="21">"Waiting for fcntl lock... %d"<pos:position pos:line="44" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="44" pos:column="54">++<pos:position pos:line="44" pos:column="56"/></operator><name pos:line="44" pos:column="56">attempt<pos:position pos:line="44" pos:column="63"/></name></expr></argument>)<pos:position pos:line="44" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">sleep<pos:position pos:line="45" pos:column="10"/></name> <argument_list pos:line="45" pos:column="11">(<argument><expr><literal type="number" pos:line="45" pos:column="12">1<pos:position pos:line="45" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="15"/></expr_stmt>
  }<pos:position pos:line="46" pos:column="4"/></block></while>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="47" pos:column="8">/* USE_FCNTL */</comment>

<cpp:ifdef pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">ifdef<pos:position pos:line="49" pos:column="7"/></cpp:directive> <name pos:line="49" pos:column="8">USE_FLOCK<pos:position pos:line="49" pos:column="17"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="50" pos:column="3">count<pos:position pos:line="50" pos:column="8"/></name> <operator pos:line="50" pos:column="9">=<pos:position pos:line="50" pos:column="10"/></operator> <literal type="number" pos:line="50" pos:column="11">0<pos:position pos:line="50" pos:column="12"/></literal></expr>;<pos:position pos:line="50" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name pos:line="51" pos:column="3">attempt<pos:position pos:line="51" pos:column="10"/></name> <operator pos:line="51" pos:column="11">=<pos:position pos:line="51" pos:column="12"/></operator> <literal type="number" pos:line="51" pos:column="13">0<pos:position pos:line="51" pos:column="14"/></literal></expr>;<pos:position pos:line="51" pos:column="15"/></expr_stmt>
  <while pos:line="52" pos:column="3">while <condition pos:line="52" pos:column="9">(<expr><call><name pos:line="52" pos:column="10">flock<pos:position pos:line="52" pos:column="15"/></name> <argument_list pos:line="52" pos:column="16">(<argument><expr><name pos:line="52" pos:column="17">fd<pos:position pos:line="52" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="21">(<pos:position pos:line="52" pos:column="22"/></operator><ternary><condition><expr><name pos:line="52" pos:column="22">excl<pos:position pos:line="52" pos:column="26"/></name></expr> ?<pos:position pos:line="52" pos:column="28"/></condition><then pos:line="52" pos:column="28"> <expr><name pos:line="52" pos:column="29">LOCK_EX<pos:position pos:line="52" pos:column="36"/></name></expr> <pos:position pos:line="52" pos:column="37"/></then><else pos:line="52" pos:column="37">: <expr><name pos:line="52" pos:column="39">LOCK_SH<pos:position pos:line="52" pos:column="46"/></name></expr></else></ternary><operator pos:line="52" pos:column="46">)<pos:position pos:line="52" pos:column="47"/></operator> <operator pos:line="52" pos:column="48">|<pos:position pos:line="52" pos:column="49"/></operator> <name pos:line="52" pos:column="50">LOCK_NB<pos:position pos:line="52" pos:column="57"/></name></expr></argument>)<pos:position pos:line="52" pos:column="58"/></argument_list></call> <operator pos:line="52" pos:column="59">==<pos:position pos:line="52" pos:column="61"/></operator> <operator pos:line="52" pos:column="62">-<pos:position pos:line="52" pos:column="63"/></operator><literal type="number" pos:line="52" pos:column="63">1<pos:position pos:line="52" pos:column="64"/></literal></expr>)<pos:position pos:line="52" pos:column="65"/></condition>
  <block pos:line="53" pos:column="3">{
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name pos:line="54" pos:column="9">errno<pos:position pos:line="54" pos:column="14"/></name> <operator pos:line="54" pos:column="15">!=<pos:position pos:line="54" pos:column="17"/></operator> <name pos:line="54" pos:column="18">EWOULDBLOCK<pos:position pos:line="54" pos:column="29"/></name></expr>)<pos:position pos:line="54" pos:column="30"/></condition><then pos:line="54" pos:column="30">
    <block pos:line="55" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">mutt_perror<pos:position pos:line="56" pos:column="18"/></name> <argument_list pos:line="56" pos:column="19">(<argument><expr><literal type="string" pos:line="56" pos:column="20">"flock"<pos:position pos:line="56" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name pos:line="57" pos:column="7">r<pos:position pos:line="57" pos:column="8"/></name> <operator pos:line="57" pos:column="9">=<pos:position pos:line="57" pos:column="10"/></operator> <operator pos:line="57" pos:column="11">-<pos:position pos:line="57" pos:column="12"/></operator><literal type="number" pos:line="57" pos:column="12">1<pos:position pos:line="57" pos:column="13"/></literal></expr>;<pos:position pos:line="57" pos:column="14"/></expr_stmt>
      <break pos:line="58" pos:column="7">break;<pos:position pos:line="58" pos:column="13"/></break>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>

    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><call><name pos:line="61" pos:column="9">fstat<pos:position pos:line="61" pos:column="14"/></name><argument_list pos:line="61" pos:column="14">(<argument><expr><name pos:line="61" pos:column="15">fd<pos:position pos:line="61" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="19">&amp;<pos:position pos:line="61" pos:column="24"/></operator><name pos:line="61" pos:column="20">sb<pos:position pos:line="61" pos:column="22"/></name></expr></argument>)<pos:position pos:line="61" pos:column="23"/></argument_list></call> <operator pos:line="61" pos:column="24">!=<pos:position pos:line="61" pos:column="26"/></operator> <literal type="number" pos:line="61" pos:column="27">0<pos:position pos:line="61" pos:column="28"/></literal></expr>)<pos:position pos:line="61" pos:column="29"/></condition><then pos:line="61" pos:column="29">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="62" pos:column="7">sb<pos:position pos:line="62" pos:column="9"/></name><operator pos:line="62" pos:column="9">.<pos:position pos:line="62" pos:column="10"/></operator><name pos:line="62" pos:column="10">st_size<pos:position pos:line="62" pos:column="17"/></name></name> <operator pos:line="62" pos:column="18">=<pos:position pos:line="62" pos:column="19"/></operator> <literal type="number" pos:line="62" pos:column="20">0<pos:position pos:line="62" pos:column="21"/></literal></expr>;<pos:position pos:line="62" pos:column="22"/></expr_stmt></block></then></if>
    
    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><name pos:line="64" pos:column="9">count<pos:position pos:line="64" pos:column="14"/></name> <operator pos:line="64" pos:column="15">==<pos:position pos:line="64" pos:column="17"/></operator> <literal type="number" pos:line="64" pos:column="18">0<pos:position pos:line="64" pos:column="19"/></literal></expr>)<pos:position pos:line="64" pos:column="20"/></condition><then pos:line="64" pos:column="20">
      <block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="7">prev_sb<pos:position pos:line="65" pos:column="14"/></name> <operator pos:line="65" pos:column="15">=<pos:position pos:line="65" pos:column="16"/></operator> <name pos:line="65" pos:column="17">sb<pos:position pos:line="65" pos:column="19"/></name></expr>;<pos:position pos:line="65" pos:column="20"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="67" pos:column="5">/* only unlock file if it is unchanged */</comment>
    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><name><name pos:line="68" pos:column="9">prev_sb<pos:position pos:line="68" pos:column="16"/></name><operator pos:line="68" pos:column="16">.<pos:position pos:line="68" pos:column="17"/></operator><name pos:line="68" pos:column="17">st_size<pos:position pos:line="68" pos:column="24"/></name></name> <operator pos:line="68" pos:column="25">==<pos:position pos:line="68" pos:column="27"/></operator> <name><name pos:line="68" pos:column="28">sb<pos:position pos:line="68" pos:column="30"/></name><operator pos:line="68" pos:column="30">.<pos:position pos:line="68" pos:column="31"/></operator><name pos:line="68" pos:column="31">st_size<pos:position pos:line="68" pos:column="38"/></name></name> <operator pos:line="68" pos:column="39">&amp;&amp;<pos:position pos:line="68" pos:column="49"/></operator> <operator pos:line="68" pos:column="42">++<pos:position pos:line="68" pos:column="44"/></operator><name pos:line="68" pos:column="44">count<pos:position pos:line="68" pos:column="49"/></name> <operator pos:line="68" pos:column="50">&gt;=<pos:position pos:line="68" pos:column="55"/></operator> <operator pos:line="68" pos:column="53">(<pos:position pos:line="68" pos:column="54"/></operator><ternary><condition><expr><name pos:line="68" pos:column="54">timeout<pos:position pos:line="68" pos:column="61"/></name></expr>?<pos:position pos:line="68" pos:column="62"/></condition><then><expr><name pos:line="68" pos:column="62">MAXLOCKATTEMPT<pos:position pos:line="68" pos:column="76"/></name></expr></then><else pos:line="68" pos:column="76">:<expr><literal type="number" pos:line="68" pos:column="77">0<pos:position pos:line="68" pos:column="78"/></literal></expr></else></ternary><operator pos:line="68" pos:column="78">)<pos:position pos:line="68" pos:column="79"/></operator></expr>)<pos:position pos:line="68" pos:column="80"/></condition><then pos:line="68" pos:column="80">
    <block pos:line="69" pos:column="5">{
      <if pos:line="70" pos:column="7">if <condition pos:line="70" pos:column="10">(<expr><name pos:line="70" pos:column="11">timeout<pos:position pos:line="70" pos:column="18"/></name></expr>)<pos:position pos:line="70" pos:column="19"/></condition><then pos:line="70" pos:column="19">
	<block type="pseudo"><decl_stmt><decl><type><name pos:line="71" pos:column="9">mutt_error<pos:position pos:line="71" pos:column="19"/></name></type> <name pos:line="71" pos:column="20">_<pos:position pos:line="71" pos:column="21"/></name><argument_list pos:line="71" pos:column="21">(<argument><expr><literal type="string" pos:line="71" pos:column="22">"Timeout exceeded while attempting flock lock!"<pos:position pos:line="71" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="70"/></argument_list></decl>;<pos:position pos:line="71" pos:column="71"/></decl_stmt></block></then></if>
      <expr_stmt><expr><name pos:line="72" pos:column="7">r<pos:position pos:line="72" pos:column="8"/></name> <operator pos:line="72" pos:column="9">=<pos:position pos:line="72" pos:column="10"/></operator> <operator pos:line="72" pos:column="11">-<pos:position pos:line="72" pos:column="12"/></operator><literal type="number" pos:line="72" pos:column="12">1<pos:position pos:line="72" pos:column="13"/></literal></expr>;<pos:position pos:line="72" pos:column="14"/></expr_stmt>
      <break pos:line="73" pos:column="7">break;<pos:position pos:line="73" pos:column="13"/></break>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="76" pos:column="5">prev_sb<pos:position pos:line="76" pos:column="12"/></name> <operator pos:line="76" pos:column="13">=<pos:position pos:line="76" pos:column="14"/></operator> <name pos:line="76" pos:column="15">sb<pos:position pos:line="76" pos:column="17"/></name></expr>;<pos:position pos:line="76" pos:column="18"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="78" pos:column="5">mutt_message<pos:position pos:line="78" pos:column="17"/></name> <argument_list pos:line="78" pos:column="18">(<argument><expr><call><name pos:line="78" pos:column="19">_<pos:position pos:line="78" pos:column="20"/></name><argument_list pos:line="78" pos:column="20">(<argument><expr><literal type="string" pos:line="78" pos:column="21">"Waiting for flock attempt... %d"<pos:position pos:line="78" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="78" pos:column="57">++<pos:position pos:line="78" pos:column="59"/></operator><name pos:line="78" pos:column="59">attempt<pos:position pos:line="78" pos:column="66"/></name></expr></argument>)<pos:position pos:line="78" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="79" pos:column="5">sleep<pos:position pos:line="79" pos:column="10"/></name> <argument_list pos:line="79" pos:column="11">(<argument><expr><literal type="number" pos:line="79" pos:column="12">1<pos:position pos:line="79" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="15"/></expr_stmt>
  }<pos:position pos:line="80" pos:column="4"/></block></while>
<cpp:endif pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">endif<pos:position pos:line="81" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="81" pos:column="8">/* USE_FLOCK */</comment>

<cpp:ifdef pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">ifdef<pos:position pos:line="83" pos:column="7"/></cpp:directive> <name pos:line="83" pos:column="8">USE_DOTLOCK<pos:position pos:line="83" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="84" pos:column="3">if <condition pos:line="84" pos:column="6">(<expr><name pos:line="84" pos:column="7">r<pos:position pos:line="84" pos:column="8"/></name> <operator pos:line="84" pos:column="9">==<pos:position pos:line="84" pos:column="11"/></operator> <literal type="number" pos:line="84" pos:column="12">0<pos:position pos:line="84" pos:column="13"/></literal> <operator pos:line="84" pos:column="14">&amp;&amp;<pos:position pos:line="84" pos:column="24"/></operator> <name pos:line="84" pos:column="17">dot<pos:position pos:line="84" pos:column="20"/></name></expr>)<pos:position pos:line="84" pos:column="21"/></condition><then pos:line="84" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><name pos:line="85" pos:column="5">r<pos:position pos:line="85" pos:column="6"/></name> <operator pos:line="85" pos:column="7">=<pos:position pos:line="85" pos:column="8"/></operator> <call><name pos:line="85" pos:column="9">dotlock_file<pos:position pos:line="85" pos:column="21"/></name> <argument_list pos:line="85" pos:column="22">(<argument><expr><name pos:line="85" pos:column="23">path<pos:position pos:line="85" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="29">fd<pos:position pos:line="85" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="33">timeout<pos:position pos:line="85" pos:column="40"/></name></expr></argument>)<pos:position pos:line="85" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="42"/></expr_stmt></block></then></if>
<cpp:endif pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">endif<pos:position pos:line="86" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="86" pos:column="8">/* USE_DOTLOCK */</comment>

  <if pos:line="88" pos:column="3">if <condition pos:line="88" pos:column="6">(<expr><name pos:line="88" pos:column="7">r<pos:position pos:line="88" pos:column="8"/></name> <operator pos:line="88" pos:column="9">!=<pos:position pos:line="88" pos:column="11"/></operator> <literal type="number" pos:line="88" pos:column="12">0<pos:position pos:line="88" pos:column="13"/></literal></expr>)<pos:position pos:line="88" pos:column="14"/></condition><then pos:line="88" pos:column="14">
  <block pos:line="89" pos:column="3">{
    <comment type="block" pos:line="90" pos:column="5">/* release any other locks obtained in this routine */</comment>

<cpp:ifdef pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">ifdef<pos:position pos:line="92" pos:column="7"/></cpp:directive> <name pos:line="92" pos:column="8">USE_FCNTL<pos:position pos:line="92" pos:column="17"/></name></cpp:ifdef>
    <expr_stmt><expr><name><name pos:line="93" pos:column="5">lck<pos:position pos:line="93" pos:column="8"/></name><operator pos:line="93" pos:column="8">.<pos:position pos:line="93" pos:column="9"/></operator><name pos:line="93" pos:column="9">l_type<pos:position pos:line="93" pos:column="15"/></name></name> <operator pos:line="93" pos:column="16">=<pos:position pos:line="93" pos:column="17"/></operator> <name pos:line="93" pos:column="18">F_UNLCK<pos:position pos:line="93" pos:column="25"/></name></expr>;<pos:position pos:line="93" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="94" pos:column="5">fcntl<pos:position pos:line="94" pos:column="10"/></name> <argument_list pos:line="94" pos:column="11">(<argument><expr><name pos:line="94" pos:column="12">fd<pos:position pos:line="94" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="16">F_SETLK<pos:position pos:line="94" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="94" pos:column="25">&amp;<pos:position pos:line="94" pos:column="30"/></operator><name pos:line="94" pos:column="26">lck<pos:position pos:line="94" pos:column="29"/></name></expr></argument>)<pos:position pos:line="94" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">endif<pos:position pos:line="95" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="95" pos:column="8">/* USE_FCNTL */</comment>

<cpp:ifdef pos:line="97" pos:column="1">#<cpp:directive pos:line="97" pos:column="2">ifdef<pos:position pos:line="97" pos:column="7"/></cpp:directive> <name pos:line="97" pos:column="8">USE_FLOCK<pos:position pos:line="97" pos:column="17"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="98" pos:column="5">flock<pos:position pos:line="98" pos:column="10"/></name> <argument_list pos:line="98" pos:column="11">(<argument><expr><name pos:line="98" pos:column="12">fd<pos:position pos:line="98" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="16">LOCK_UN<pos:position pos:line="98" pos:column="23"/></name></expr></argument>)<pos:position pos:line="98" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">endif<pos:position pos:line="99" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="99" pos:column="8">/* USE_FLOCK */</comment>
  }<pos:position pos:line="100" pos:column="4"/></block></then></if>

  <return pos:line="102" pos:column="3">return <expr><name pos:line="102" pos:column="10">r<pos:position pos:line="102" pos:column="11"/></name></expr>;<pos:position pos:line="102" pos:column="12"/></return>
}<pos:position pos:line="103" pos:column="2"/></block></function></unit>
