<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1035_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">text_enriched_handler<pos:position pos:line="1" pos:column="33"/></name> <parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">BODY<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">a<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">STATE<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">s<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <enum pos:line="3" pos:column="3">enum <block pos:line="3" pos:column="8">{
    <decl><name pos:line="4" pos:column="5">TEXT<pos:position pos:line="4" pos:column="9"/></name></decl>, <decl><name pos:line="4" pos:column="11">LANGLE<pos:position pos:line="4" pos:column="17"/></name></decl>, <decl><name pos:line="4" pos:column="19">TAG<pos:position pos:line="4" pos:column="22"/></name></decl>, <decl><name pos:line="4" pos:column="24">BOGUS_TAG<pos:position pos:line="4" pos:column="33"/></name></decl>, <decl><name pos:line="4" pos:column="35">NEWLINE<pos:position pos:line="4" pos:column="42"/></name></decl>, <decl><name pos:line="4" pos:column="44">ST_EOF<pos:position pos:line="4" pos:column="50"/></name></decl>, <decl><name pos:line="4" pos:column="52">DONE<pos:position pos:line="4" pos:column="56"/></name></decl>
  }<pos:position pos:line="5" pos:column="4"/></block> <decl><name pos:line="5" pos:column="5">state<pos:position pos:line="5" pos:column="10"/></name> <init pos:line="5" pos:column="11">= <expr><name pos:line="5" pos:column="13">TEXT<pos:position pos:line="5" pos:column="17"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="18"/></enum>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">long<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">bytes<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><name><name pos:line="7" pos:column="16">a<pos:position pos:line="7" pos:column="17"/></name><operator pos:line="7" pos:column="17">-&gt;<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="19">length<pos:position pos:line="7" pos:column="25"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">enriched_state<pos:position pos:line="8" pos:column="24"/></name></name></type> <name pos:line="8" pos:column="25">stte<pos:position pos:line="8" pos:column="29"/></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">wchar_t<pos:position pos:line="9" pos:column="10"/></name></type> <name pos:line="9" pos:column="11">wc<pos:position pos:line="9" pos:column="13"/></name> <init pos:line="9" pos:column="14">= <expr><literal type="number" pos:line="9" pos:column="16">0<pos:position pos:line="9" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">tag_len<pos:position pos:line="10" pos:column="14"/></name> <init pos:line="10" pos:column="15">= <expr><literal type="number" pos:line="10" pos:column="17">0<pos:position pos:line="10" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">wchar_t<pos:position pos:line="11" pos:column="10"/></name></type> <name><name pos:line="11" pos:column="11">tag<pos:position pos:line="11" pos:column="14"/></name><index pos:line="11" pos:column="14">[<expr><name pos:line="11" pos:column="15">LONG_STRING<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">+<pos:position pos:line="11" pos:column="28"/></operator> <literal type="number" pos:line="11" pos:column="29">1<pos:position pos:line="11" pos:column="30"/></literal></expr>]<pos:position pos:line="11" pos:column="31"/></index></name></decl>;<pos:position pos:line="11" pos:column="32"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">memset<pos:position pos:line="13" pos:column="9"/></name> <argument_list pos:line="13" pos:column="10">(<argument><expr><operator pos:line="13" pos:column="11">&amp;<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="12">stte<pos:position pos:line="13" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="18">0<pos:position pos:line="13" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="21">sizeof <argument_list pos:line="13" pos:column="28">(<argument><expr><name pos:line="13" pos:column="29">stte<pos:position pos:line="13" pos:column="33"/></name></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="14" pos:column="3">stte<pos:position pos:line="14" pos:column="7"/></name><operator pos:line="14" pos:column="7">.<pos:position pos:line="14" pos:column="8"/></operator><name pos:line="14" pos:column="8">s<pos:position pos:line="14" pos:column="9"/></name></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <name pos:line="14" pos:column="12">s<pos:position pos:line="14" pos:column="13"/></name></expr>;<pos:position pos:line="14" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="15" pos:column="3">stte<pos:position pos:line="15" pos:column="7"/></name><operator pos:line="15" pos:column="7">.<pos:position pos:line="15" pos:column="8"/></operator><name pos:line="15" pos:column="8">WrapMargin<pos:position pos:line="15" pos:column="18"/></name></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <operator pos:line="15" pos:column="21">(<pos:position pos:line="15" pos:column="22"/></operator><ternary><condition><expr><operator pos:line="15" pos:column="22">(<pos:position pos:line="15" pos:column="23"/></operator><name><name pos:line="15" pos:column="23">s<pos:position pos:line="15" pos:column="24"/></name><operator pos:line="15" pos:column="24">-&gt;<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="26">flags<pos:position pos:line="15" pos:column="31"/></name></name> <operator pos:line="15" pos:column="32">&amp;<pos:position pos:line="15" pos:column="37"/></operator> <name pos:line="15" pos:column="34">MUTT_DISPLAY<pos:position pos:line="15" pos:column="46"/></name><operator pos:line="15" pos:column="46">)<pos:position pos:line="15" pos:column="47"/></operator></expr> ?<pos:position pos:line="15" pos:column="49"/></condition><then pos:line="15" pos:column="49"> <expr><operator pos:line="15" pos:column="50">(<pos:position pos:line="15" pos:column="51"/></operator><name><name pos:line="15" pos:column="51">MuttIndexWindow<pos:position pos:line="15" pos:column="66"/></name><operator pos:line="15" pos:column="66">-&gt;<pos:position pos:line="15" pos:column="71"/></operator><name pos:line="15" pos:column="68">cols<pos:position pos:line="15" pos:column="72"/></name></name><operator pos:line="15" pos:column="72">-<pos:position pos:line="15" pos:column="73"/></operator><literal type="number" pos:line="15" pos:column="73">4<pos:position pos:line="15" pos:column="74"/></literal><operator pos:line="15" pos:column="74">)<pos:position pos:line="15" pos:column="75"/></operator></expr> <pos:position pos:line="15" pos:column="76"/></then><else pos:line="15" pos:column="76">:
                     <expr><ternary><condition><expr><operator pos:line="16" pos:column="22">(<pos:position pos:line="16" pos:column="23"/></operator><operator pos:line="16" pos:column="23">(<pos:position pos:line="16" pos:column="24"/></operator><name><name pos:line="16" pos:column="24">MuttIndexWindow<pos:position pos:line="16" pos:column="39"/></name><operator pos:line="16" pos:column="39">-&gt;<pos:position pos:line="16" pos:column="44"/></operator><name pos:line="16" pos:column="41">cols<pos:position pos:line="16" pos:column="45"/></name></name><operator pos:line="16" pos:column="45">-<pos:position pos:line="16" pos:column="46"/></operator><literal type="number" pos:line="16" pos:column="46">4<pos:position pos:line="16" pos:column="47"/></literal><operator pos:line="16" pos:column="47">)<pos:position pos:line="16" pos:column="48"/></operator><operator pos:line="16" pos:column="48">&lt;<pos:position pos:line="16" pos:column="52"/></operator><literal type="number" pos:line="16" pos:column="49">72<pos:position pos:line="16" pos:column="51"/></literal><operator pos:line="16" pos:column="51">)<pos:position pos:line="16" pos:column="52"/></operator></expr>?<pos:position pos:line="16" pos:column="53"/></condition><then><expr><operator pos:line="16" pos:column="53">(<pos:position pos:line="16" pos:column="54"/></operator><name><name pos:line="16" pos:column="54">MuttIndexWindow<pos:position pos:line="16" pos:column="69"/></name><operator pos:line="16" pos:column="69">-&gt;<pos:position pos:line="16" pos:column="74"/></operator><name pos:line="16" pos:column="71">cols<pos:position pos:line="16" pos:column="75"/></name></name><operator pos:line="16" pos:column="75">-<pos:position pos:line="16" pos:column="76"/></operator><literal type="number" pos:line="16" pos:column="76">4<pos:position pos:line="16" pos:column="77"/></literal><operator pos:line="16" pos:column="77">)<pos:position pos:line="16" pos:column="78"/></operator></expr></then><else pos:line="16" pos:column="78">:<expr><literal type="number" pos:line="16" pos:column="79">72<pos:position pos:line="16" pos:column="81"/></literal></expr></else></ternary></expr></else></ternary><operator pos:line="16" pos:column="81">)<pos:position pos:line="16" pos:column="82"/></operator></expr>;<pos:position pos:line="16" pos:column="83"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="17" pos:column="3">stte<pos:position pos:line="17" pos:column="7"/></name><operator pos:line="17" pos:column="7">.<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">line_max<pos:position pos:line="17" pos:column="16"/></name></name> <operator pos:line="17" pos:column="17">=<pos:position pos:line="17" pos:column="18"/></operator> <name><name pos:line="17" pos:column="19">stte<pos:position pos:line="17" pos:column="23"/></name><operator pos:line="17" pos:column="23">.<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="24">WrapMargin<pos:position pos:line="17" pos:column="34"/></name></name> <operator pos:line="17" pos:column="35">*<pos:position pos:line="17" pos:column="36"/></operator> <literal type="number" pos:line="17" pos:column="37">4<pos:position pos:line="17" pos:column="38"/></literal></expr>;<pos:position pos:line="17" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">stte<pos:position pos:line="18" pos:column="7"/></name><operator pos:line="18" pos:column="7">.<pos:position pos:line="18" pos:column="8"/></operator><name pos:line="18" pos:column="8">line<pos:position pos:line="18" pos:column="12"/></name></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <operator pos:line="18" pos:column="15">(<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">wchar_t<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">*<pos:position pos:line="18" pos:column="25"/></operator><operator pos:line="18" pos:column="25">)<pos:position pos:line="18" pos:column="26"/></operator> <call><name pos:line="18" pos:column="27">safe_calloc<pos:position pos:line="18" pos:column="38"/></name> <argument_list pos:line="18" pos:column="39">(<argument><expr><literal type="number" pos:line="18" pos:column="40">1<pos:position pos:line="18" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="18" pos:column="43">(<pos:position pos:line="18" pos:column="44"/></operator><name><name pos:line="18" pos:column="44">stte<pos:position pos:line="18" pos:column="48"/></name><operator pos:line="18" pos:column="48">.<pos:position pos:line="18" pos:column="49"/></operator><name pos:line="18" pos:column="49">line_max<pos:position pos:line="18" pos:column="57"/></name></name> <operator pos:line="18" pos:column="58">+<pos:position pos:line="18" pos:column="59"/></operator> <literal type="number" pos:line="18" pos:column="60">1<pos:position pos:line="18" pos:column="61"/></literal><operator pos:line="18" pos:column="61">)<pos:position pos:line="18" pos:column="62"/></operator> <operator pos:line="18" pos:column="63">*<pos:position pos:line="18" pos:column="64"/></operator> <sizeof pos:line="18" pos:column="65">sizeof <argument_list pos:line="18" pos:column="72">(<argument><expr><name pos:line="18" pos:column="73">wchar_t<pos:position pos:line="18" pos:column="80"/></name></expr></argument>)<pos:position pos:line="18" pos:column="81"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="83"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="19" pos:column="3">stte<pos:position pos:line="19" pos:column="7"/></name><operator pos:line="19" pos:column="7">.<pos:position pos:line="19" pos:column="8"/></operator><name pos:line="19" pos:column="8">param<pos:position pos:line="19" pos:column="13"/></name></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <operator pos:line="19" pos:column="16">(<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">wchar_t<pos:position pos:line="19" pos:column="24"/></name> <operator pos:line="19" pos:column="25">*<pos:position pos:line="19" pos:column="26"/></operator><operator pos:line="19" pos:column="26">)<pos:position pos:line="19" pos:column="27"/></operator> <call><name pos:line="19" pos:column="28">safe_calloc<pos:position pos:line="19" pos:column="39"/></name> <argument_list pos:line="19" pos:column="40">(<argument><expr><literal type="number" pos:line="19" pos:column="41">1<pos:position pos:line="19" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="44">(<pos:position pos:line="19" pos:column="45"/></operator><name pos:line="19" pos:column="45">STRING<pos:position pos:line="19" pos:column="51"/></name><operator pos:line="19" pos:column="51">)<pos:position pos:line="19" pos:column="52"/></operator> <operator pos:line="19" pos:column="53">*<pos:position pos:line="19" pos:column="54"/></operator> <sizeof pos:line="19" pos:column="55">sizeof <argument_list pos:line="19" pos:column="62">(<argument><expr><name pos:line="19" pos:column="63">wchar_t<pos:position pos:line="19" pos:column="70"/></name></expr></argument>)<pos:position pos:line="19" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="73"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="21" pos:column="3">stte<pos:position pos:line="21" pos:column="7"/></name><operator pos:line="21" pos:column="7">.<pos:position pos:line="21" pos:column="8"/></operator><name pos:line="21" pos:column="8">param_len<pos:position pos:line="21" pos:column="17"/></name></name> <operator pos:line="21" pos:column="18">=<pos:position pos:line="21" pos:column="19"/></operator> <name pos:line="21" pos:column="20">STRING<pos:position pos:line="21" pos:column="26"/></name></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="22" pos:column="3">stte<pos:position pos:line="22" pos:column="7"/></name><operator pos:line="22" pos:column="7">.<pos:position pos:line="22" pos:column="8"/></operator><name pos:line="22" pos:column="8">param_used<pos:position pos:line="22" pos:column="18"/></name></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <literal type="number" pos:line="22" pos:column="21">0<pos:position pos:line="22" pos:column="22"/></literal></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt>

  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><name><name pos:line="24" pos:column="7">s<pos:position pos:line="24" pos:column="8"/></name><operator pos:line="24" pos:column="8">-&gt;<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="10">prefix<pos:position pos:line="24" pos:column="16"/></name></name></expr>)<pos:position pos:line="24" pos:column="17"/></condition><then pos:line="24" pos:column="17">
  <block pos:line="25" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">state_puts<pos:position pos:line="26" pos:column="15"/></name> <argument_list pos:line="26" pos:column="16">(<argument><expr><name><name pos:line="26" pos:column="17">s<pos:position pos:line="26" pos:column="18"/></name><operator pos:line="26" pos:column="18">-&gt;<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="20">prefix<pos:position pos:line="26" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="28">s<pos:position pos:line="26" pos:column="29"/></name></expr></argument>)<pos:position pos:line="26" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">stte<pos:position pos:line="27" pos:column="9"/></name><operator pos:line="27" pos:column="9">.<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">indent_len<pos:position pos:line="27" pos:column="20"/></name></name> <operator pos:line="27" pos:column="21">+=<pos:position pos:line="27" pos:column="23"/></operator> <call><name pos:line="27" pos:column="24">mutt_strlen<pos:position pos:line="27" pos:column="35"/></name> <argument_list pos:line="27" pos:column="36">(<argument><expr><name><name pos:line="27" pos:column="37">s<pos:position pos:line="27" pos:column="38"/></name><operator pos:line="27" pos:column="38">-&gt;<pos:position pos:line="27" pos:column="43"/></operator><name pos:line="27" pos:column="40">prefix<pos:position pos:line="27" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="48"/></expr_stmt>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>

  <while pos:line="30" pos:column="3">while <condition pos:line="30" pos:column="9">(<expr><name pos:line="30" pos:column="10">state<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">!=<pos:position pos:line="30" pos:column="18"/></operator> <name pos:line="30" pos:column="19">DONE<pos:position pos:line="30" pos:column="23"/></name></expr>)<pos:position pos:line="30" pos:column="24"/></condition>
  <block pos:line="31" pos:column="3">{
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">state<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">!=<pos:position pos:line="32" pos:column="17"/></operator> <name pos:line="32" pos:column="18">ST_EOF<pos:position pos:line="32" pos:column="24"/></name></expr>)<pos:position pos:line="32" pos:column="25"/></condition><then pos:line="32" pos:column="25">
    <block pos:line="33" pos:column="5">{
      <if pos:line="34" pos:column="7">if <condition pos:line="34" pos:column="10">(<expr><operator pos:line="34" pos:column="11">!<pos:position pos:line="34" pos:column="12"/></operator><name pos:line="34" pos:column="12">bytes<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">||<pos:position pos:line="34" pos:column="20"/></operator> <operator pos:line="34" pos:column="21">(<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="22">wc<pos:position pos:line="34" pos:column="24"/></name> <operator pos:line="34" pos:column="25">=<pos:position pos:line="34" pos:column="26"/></operator> <call><name pos:line="34" pos:column="27">fgetwc<pos:position pos:line="34" pos:column="33"/></name> <argument_list pos:line="34" pos:column="34">(<argument><expr><name><name pos:line="34" pos:column="35">s<pos:position pos:line="34" pos:column="36"/></name><operator pos:line="34" pos:column="36">-&gt;<pos:position pos:line="34" pos:column="41"/></operator><name pos:line="34" pos:column="38">fpin<pos:position pos:line="34" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call><operator pos:line="34" pos:column="43">)<pos:position pos:line="34" pos:column="44"/></operator> <operator pos:line="34" pos:column="45">==<pos:position pos:line="34" pos:column="47"/></operator> <name pos:line="34" pos:column="48">WEOF<pos:position pos:line="34" pos:column="52"/></name></expr>)<pos:position pos:line="34" pos:column="53"/></condition><then pos:line="34" pos:column="53">
	<block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="9">state<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">=<pos:position pos:line="35" pos:column="16"/></operator> <name pos:line="35" pos:column="17">ST_EOF<pos:position pos:line="35" pos:column="23"/></name></expr>;<pos:position pos:line="35" pos:column="24"/></expr_stmt></block></then>
      <else pos:line="36" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="9">bytes<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">--<pos:position pos:line="37" pos:column="16"/></operator></expr>;<pos:position pos:line="37" pos:column="17"/></expr_stmt></block></else></if>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <switch pos:line="40" pos:column="5">switch <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">state<pos:position pos:line="40" pos:column="18"/></name></expr>)<pos:position pos:line="40" pos:column="19"/></condition>
    <block pos:line="41" pos:column="5">{
      <case pos:line="42" pos:column="7">case <expr><name pos:line="42" pos:column="12">TEXT<pos:position pos:line="42" pos:column="16"/></name></expr> :<pos:position pos:line="42" pos:column="18"/></case>
	<switch pos:line="43" pos:column="9">switch <condition pos:line="43" pos:column="16">(<expr><name pos:line="43" pos:column="17">wc<pos:position pos:line="43" pos:column="19"/></name></expr>)<pos:position pos:line="43" pos:column="20"/></condition>
	<block pos:line="44" pos:column="9">{
	  <case pos:line="45" pos:column="11">case <expr><literal type="char" pos:line="45" pos:column="16">'&lt;'<pos:position pos:line="45" pos:column="22"/></literal></expr> :<pos:position pos:line="45" pos:column="21"/></case>
	    <expr_stmt><expr><name pos:line="46" pos:column="13">state<pos:position pos:line="46" pos:column="18"/></name> <operator pos:line="46" pos:column="19">=<pos:position pos:line="46" pos:column="20"/></operator> <name pos:line="46" pos:column="21">LANGLE<pos:position pos:line="46" pos:column="27"/></name></expr>;<pos:position pos:line="46" pos:column="28"/></expr_stmt>
	    <break pos:line="47" pos:column="13">break;<pos:position pos:line="47" pos:column="19"/></break>

	  <case pos:line="49" pos:column="11">case <expr><literal type="char" pos:line="49" pos:column="16">'\n'<pos:position pos:line="49" pos:column="20"/></literal></expr> :<pos:position pos:line="49" pos:column="22"/></case>
	    <if pos:line="50" pos:column="13">if <condition pos:line="50" pos:column="16">(<expr><name><name pos:line="50" pos:column="17">stte<pos:position pos:line="50" pos:column="21"/></name><operator pos:line="50" pos:column="21">.<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="22">tag_level<pos:position pos:line="50" pos:column="31"/></name><index pos:line="50" pos:column="31">[<expr><name pos:line="50" pos:column="32">RICH_NOFILL<pos:position pos:line="50" pos:column="43"/></name></expr>]<pos:position pos:line="50" pos:column="44"/></index></name></expr>)<pos:position pos:line="50" pos:column="45"/></condition><then pos:line="50" pos:column="45">
	    <block pos:line="51" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="52" pos:column="15">enriched_flush<pos:position pos:line="52" pos:column="29"/></name> <argument_list pos:line="52" pos:column="30">(<argument><expr><operator pos:line="52" pos:column="31">&amp;<pos:position pos:line="52" pos:column="36"/></operator><name pos:line="52" pos:column="32">stte<pos:position pos:line="52" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="38">1<pos:position pos:line="52" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="41"/></expr_stmt>
	    }<pos:position pos:line="53" pos:column="14"/></block></then>
	    <else pos:line="54" pos:column="13">else 
	    <block pos:line="55" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="56" pos:column="15">enriched_putwc<pos:position pos:line="56" pos:column="29"/></name> <argument_list pos:line="56" pos:column="30">(<argument><expr><operator pos:line="56" pos:column="31">(<pos:position pos:line="56" pos:column="32"/></operator><name pos:line="56" pos:column="32">wchar_t<pos:position pos:line="56" pos:column="39"/></name><operator pos:line="56" pos:column="39">)<pos:position pos:line="56" pos:column="40"/></operator> <literal type="char" pos:line="56" pos:column="41">' '<pos:position pos:line="56" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="56" pos:column="46">&amp;<pos:position pos:line="56" pos:column="51"/></operator><name pos:line="56" pos:column="47">stte<pos:position pos:line="56" pos:column="51"/></name></expr></argument>)<pos:position pos:line="56" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="53"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="57" pos:column="15">state<pos:position pos:line="57" pos:column="20"/></name> <operator pos:line="57" pos:column="21">=<pos:position pos:line="57" pos:column="22"/></operator> <name pos:line="57" pos:column="23">NEWLINE<pos:position pos:line="57" pos:column="30"/></name></expr>;<pos:position pos:line="57" pos:column="31"/></expr_stmt>
	    }<pos:position pos:line="58" pos:column="14"/></block></else></if>
	    <break pos:line="59" pos:column="13">break;<pos:position pos:line="59" pos:column="19"/></break>

	  <default pos:line="61" pos:column="11">default:<pos:position pos:line="61" pos:column="19"/></default>
	    <expr_stmt><expr><call><name pos:line="62" pos:column="13">enriched_putwc<pos:position pos:line="62" pos:column="27"/></name> <argument_list pos:line="62" pos:column="28">(<argument><expr><name pos:line="62" pos:column="29">wc<pos:position pos:line="62" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="33">&amp;<pos:position pos:line="62" pos:column="38"/></operator><name pos:line="62" pos:column="34">stte<pos:position pos:line="62" pos:column="38"/></name></expr></argument>)<pos:position pos:line="62" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="63" pos:column="10"/></block></switch>
	<break pos:line="64" pos:column="9">break;<pos:position pos:line="64" pos:column="15"/></break>

      <case pos:line="66" pos:column="7">case <expr><name pos:line="66" pos:column="12">LANGLE<pos:position pos:line="66" pos:column="18"/></name></expr> :<pos:position pos:line="66" pos:column="20"/></case>
	<if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name pos:line="67" pos:column="13">wc<pos:position pos:line="67" pos:column="15"/></name> <operator pos:line="67" pos:column="16">==<pos:position pos:line="67" pos:column="18"/></operator> <operator pos:line="67" pos:column="19">(<pos:position pos:line="67" pos:column="20"/></operator><name pos:line="67" pos:column="20">wchar_t<pos:position pos:line="67" pos:column="27"/></name><operator pos:line="67" pos:column="27">)<pos:position pos:line="67" pos:column="28"/></operator> <literal type="char" pos:line="67" pos:column="29">'&lt;'<pos:position pos:line="67" pos:column="35"/></literal></expr>)<pos:position pos:line="67" pos:column="33"/></condition><then pos:line="67" pos:column="33">
	<block pos:line="68" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="69" pos:column="11">enriched_putwc<pos:position pos:line="69" pos:column="25"/></name> <argument_list pos:line="69" pos:column="26">(<argument><expr><name pos:line="69" pos:column="27">wc<pos:position pos:line="69" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="31">&amp;<pos:position pos:line="69" pos:column="36"/></operator><name pos:line="69" pos:column="32">stte<pos:position pos:line="69" pos:column="36"/></name></expr></argument>)<pos:position pos:line="69" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="38"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="70" pos:column="11">state<pos:position pos:line="70" pos:column="16"/></name> <operator pos:line="70" pos:column="17">=<pos:position pos:line="70" pos:column="18"/></operator> <name pos:line="70" pos:column="19">TEXT<pos:position pos:line="70" pos:column="23"/></name></expr>;<pos:position pos:line="70" pos:column="24"/></expr_stmt>
	  <break pos:line="71" pos:column="11">break;<pos:position pos:line="71" pos:column="17"/></break>
	}<pos:position pos:line="72" pos:column="10"/></block></then>
	<else pos:line="73" pos:column="9">else
	<block pos:line="74" pos:column="9">{
	  <expr_stmt><expr><name pos:line="75" pos:column="11">tag_len<pos:position pos:line="75" pos:column="18"/></name> <operator pos:line="75" pos:column="19">=<pos:position pos:line="75" pos:column="20"/></operator> <literal type="number" pos:line="75" pos:column="21">0<pos:position pos:line="75" pos:column="22"/></literal></expr>;<pos:position pos:line="75" pos:column="23"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="76" pos:column="11">state<pos:position pos:line="76" pos:column="16"/></name> <operator pos:line="76" pos:column="17">=<pos:position pos:line="76" pos:column="18"/></operator> <name pos:line="76" pos:column="19">TAG<pos:position pos:line="76" pos:column="22"/></name></expr>;<pos:position pos:line="76" pos:column="23"/></expr_stmt>
	}<pos:position pos:line="77" pos:column="10"/></block></else></if>
	<comment type="block" pos:line="78" pos:column="9">/* Yes, fall through (it wasn't a &lt;&lt;, so this char is first in TAG) */</comment>
      <case pos:line="79" pos:column="7">case <expr><name pos:line="79" pos:column="12">TAG<pos:position pos:line="79" pos:column="15"/></name></expr> :<pos:position pos:line="79" pos:column="17"/></case>
	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name pos:line="80" pos:column="13">wc<pos:position pos:line="80" pos:column="15"/></name> <operator pos:line="80" pos:column="16">==<pos:position pos:line="80" pos:column="18"/></operator> <operator pos:line="80" pos:column="19">(<pos:position pos:line="80" pos:column="20"/></operator><name pos:line="80" pos:column="20">wchar_t<pos:position pos:line="80" pos:column="27"/></name><operator pos:line="80" pos:column="27">)<pos:position pos:line="80" pos:column="28"/></operator> <literal type="char" pos:line="80" pos:column="29">'&gt;'<pos:position pos:line="80" pos:column="35"/></literal></expr>)<pos:position pos:line="80" pos:column="33"/></condition><then pos:line="80" pos:column="33">
	<block pos:line="81" pos:column="9">{
	  <expr_stmt><expr><name><name pos:line="82" pos:column="11">tag<pos:position pos:line="82" pos:column="14"/></name><index pos:line="82" pos:column="14">[<expr><name pos:line="82" pos:column="15">tag_len<pos:position pos:line="82" pos:column="22"/></name></expr>]<pos:position pos:line="82" pos:column="23"/></index></name> <operator pos:line="82" pos:column="24">=<pos:position pos:line="82" pos:column="25"/></operator> <operator pos:line="82" pos:column="26">(<pos:position pos:line="82" pos:column="27"/></operator><name pos:line="82" pos:column="27">wchar_t<pos:position pos:line="82" pos:column="34"/></name><operator pos:line="82" pos:column="34">)<pos:position pos:line="82" pos:column="35"/></operator> <literal type="char" pos:line="82" pos:column="36">'\0'<pos:position pos:line="82" pos:column="40"/></literal></expr>;<pos:position pos:line="82" pos:column="41"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="83" pos:column="11">enriched_set_flags<pos:position pos:line="83" pos:column="29"/></name> <argument_list pos:line="83" pos:column="30">(<argument><expr><name pos:line="83" pos:column="31">tag<pos:position pos:line="83" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="36">&amp;<pos:position pos:line="83" pos:column="41"/></operator><name pos:line="83" pos:column="37">stte<pos:position pos:line="83" pos:column="41"/></name></expr></argument>)<pos:position pos:line="83" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="43"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="84" pos:column="11">state<pos:position pos:line="84" pos:column="16"/></name> <operator pos:line="84" pos:column="17">=<pos:position pos:line="84" pos:column="18"/></operator> <name pos:line="84" pos:column="19">TEXT<pos:position pos:line="84" pos:column="23"/></name></expr>;<pos:position pos:line="84" pos:column="24"/></expr_stmt>
	}<pos:position pos:line="85" pos:column="10"/></block></then>
	<elseif pos:line="86" pos:column="9">else <if pos:line="86" pos:column="14">if <condition pos:line="86" pos:column="17">(<expr><name pos:line="86" pos:column="18">tag_len<pos:position pos:line="86" pos:column="25"/></name> <operator pos:line="86" pos:column="26">&lt;<pos:position pos:line="86" pos:column="30"/></operator> <name pos:line="86" pos:column="28">LONG_STRING<pos:position pos:line="86" pos:column="39"/></name></expr>)<pos:position pos:line="86" pos:column="40"/></condition><then pos:line="86" pos:column="40">  <comment type="block" pos:line="86" pos:column="42">/* ignore overly long tags */</comment>
	  <block type="pseudo"><expr_stmt><expr><name><name pos:line="87" pos:column="11">tag<pos:position pos:line="87" pos:column="14"/></name><index pos:line="87" pos:column="14">[<expr><name pos:line="87" pos:column="15">tag_len<pos:position pos:line="87" pos:column="22"/></name><operator pos:line="87" pos:column="22">++<pos:position pos:line="87" pos:column="24"/></operator></expr>]<pos:position pos:line="87" pos:column="25"/></index></name> <operator pos:line="87" pos:column="26">=<pos:position pos:line="87" pos:column="27"/></operator> <name pos:line="87" pos:column="28">wc<pos:position pos:line="87" pos:column="30"/></name></expr>;<pos:position pos:line="87" pos:column="31"/></expr_stmt></block></then></if></elseif>
	<else pos:line="88" pos:column="9">else
	  <block type="pseudo"><expr_stmt><expr><name pos:line="89" pos:column="11">state<pos:position pos:line="89" pos:column="16"/></name> <operator pos:line="89" pos:column="17">=<pos:position pos:line="89" pos:column="18"/></operator> <name pos:line="89" pos:column="19">BOGUS_TAG<pos:position pos:line="89" pos:column="28"/></name></expr>;<pos:position pos:line="89" pos:column="29"/></expr_stmt></block></else></if>
	<break pos:line="90" pos:column="9">break;<pos:position pos:line="90" pos:column="15"/></break>

      <case pos:line="92" pos:column="7">case <expr><name pos:line="92" pos:column="12">BOGUS_TAG<pos:position pos:line="92" pos:column="21"/></name></expr> :<pos:position pos:line="92" pos:column="23"/></case>
	<if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><name pos:line="93" pos:column="13">wc<pos:position pos:line="93" pos:column="15"/></name> <operator pos:line="93" pos:column="16">==<pos:position pos:line="93" pos:column="18"/></operator> <operator pos:line="93" pos:column="19">(<pos:position pos:line="93" pos:column="20"/></operator><name pos:line="93" pos:column="20">wchar_t<pos:position pos:line="93" pos:column="27"/></name><operator pos:line="93" pos:column="27">)<pos:position pos:line="93" pos:column="28"/></operator> <literal type="char" pos:line="93" pos:column="29">'&gt;'<pos:position pos:line="93" pos:column="35"/></literal></expr>)<pos:position pos:line="93" pos:column="33"/></condition><then pos:line="93" pos:column="33">
	  <block type="pseudo"><expr_stmt><expr><name pos:line="94" pos:column="11">state<pos:position pos:line="94" pos:column="16"/></name> <operator pos:line="94" pos:column="17">=<pos:position pos:line="94" pos:column="18"/></operator> <name pos:line="94" pos:column="19">TEXT<pos:position pos:line="94" pos:column="23"/></name></expr>;<pos:position pos:line="94" pos:column="24"/></expr_stmt></block></then></if>
	<break pos:line="95" pos:column="9">break;<pos:position pos:line="95" pos:column="15"/></break>

      <case pos:line="97" pos:column="7">case <expr><name pos:line="97" pos:column="12">NEWLINE<pos:position pos:line="97" pos:column="19"/></name></expr> :<pos:position pos:line="97" pos:column="21"/></case>
	<if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><name pos:line="98" pos:column="13">wc<pos:position pos:line="98" pos:column="15"/></name> <operator pos:line="98" pos:column="16">==<pos:position pos:line="98" pos:column="18"/></operator> <operator pos:line="98" pos:column="19">(<pos:position pos:line="98" pos:column="20"/></operator><name pos:line="98" pos:column="20">wchar_t<pos:position pos:line="98" pos:column="27"/></name><operator pos:line="98" pos:column="27">)<pos:position pos:line="98" pos:column="28"/></operator> <literal type="char" pos:line="98" pos:column="29">'\n'<pos:position pos:line="98" pos:column="33"/></literal></expr>)<pos:position pos:line="98" pos:column="34"/></condition><then pos:line="98" pos:column="34">
	  <block type="pseudo"><expr_stmt><expr><call><name pos:line="99" pos:column="11">enriched_flush<pos:position pos:line="99" pos:column="25"/></name> <argument_list pos:line="99" pos:column="26">(<argument><expr><operator pos:line="99" pos:column="27">&amp;<pos:position pos:line="99" pos:column="32"/></operator><name pos:line="99" pos:column="28">stte<pos:position pos:line="99" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="99" pos:column="34">1<pos:position pos:line="99" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="37"/></expr_stmt></block></then>
	<else pos:line="100" pos:column="9">else
	<block pos:line="101" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="102" pos:column="11">ungetwc<pos:position pos:line="102" pos:column="18"/></name> <argument_list pos:line="102" pos:column="19">(<argument><expr><name pos:line="102" pos:column="20">wc<pos:position pos:line="102" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="102" pos:column="24">s<pos:position pos:line="102" pos:column="25"/></name><operator pos:line="102" pos:column="25">-&gt;<pos:position pos:line="102" pos:column="30"/></operator><name pos:line="102" pos:column="27">fpin<pos:position pos:line="102" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="102" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="33"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="103" pos:column="11">bytes<pos:position pos:line="103" pos:column="16"/></name><operator pos:line="103" pos:column="16">++<pos:position pos:line="103" pos:column="18"/></operator></expr>;<pos:position pos:line="103" pos:column="19"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="104" pos:column="11">state<pos:position pos:line="104" pos:column="16"/></name> <operator pos:line="104" pos:column="17">=<pos:position pos:line="104" pos:column="18"/></operator> <name pos:line="104" pos:column="19">TEXT<pos:position pos:line="104" pos:column="23"/></name></expr>;<pos:position pos:line="104" pos:column="24"/></expr_stmt>
	}<pos:position pos:line="105" pos:column="10"/></block></else></if>
	<break pos:line="106" pos:column="9">break;<pos:position pos:line="106" pos:column="15"/></break>

      <case pos:line="108" pos:column="7">case <expr><name pos:line="108" pos:column="12">ST_EOF<pos:position pos:line="108" pos:column="18"/></name></expr> :<pos:position pos:line="108" pos:column="20"/></case>
	<expr_stmt><expr><call><name pos:line="109" pos:column="9">enriched_putwc<pos:position pos:line="109" pos:column="23"/></name> <argument_list pos:line="109" pos:column="24">(<argument><expr><operator pos:line="109" pos:column="25">(<pos:position pos:line="109" pos:column="26"/></operator><name pos:line="109" pos:column="26">wchar_t<pos:position pos:line="109" pos:column="33"/></name><operator pos:line="109" pos:column="33">)<pos:position pos:line="109" pos:column="34"/></operator> <literal type="char" pos:line="109" pos:column="35">'\0'<pos:position pos:line="109" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="109" pos:column="41">&amp;<pos:position pos:line="109" pos:column="46"/></operator><name pos:line="109" pos:column="42">stte<pos:position pos:line="109" pos:column="46"/></name></expr></argument>)<pos:position pos:line="109" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="110" pos:column="9">enriched_flush<pos:position pos:line="110" pos:column="23"/></name> <argument_list pos:line="110" pos:column="24">(<argument><expr><operator pos:line="110" pos:column="25">&amp;<pos:position pos:line="110" pos:column="30"/></operator><name pos:line="110" pos:column="26">stte<pos:position pos:line="110" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="110" pos:column="32">1<pos:position pos:line="110" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name pos:line="111" pos:column="9">state<pos:position pos:line="111" pos:column="14"/></name> <operator pos:line="111" pos:column="15">=<pos:position pos:line="111" pos:column="16"/></operator> <name pos:line="111" pos:column="17">DONE<pos:position pos:line="111" pos:column="21"/></name></expr>;<pos:position pos:line="111" pos:column="22"/></expr_stmt>
	<break pos:line="112" pos:column="9">break;<pos:position pos:line="112" pos:column="15"/></break>

      <case pos:line="114" pos:column="7">case <expr><name pos:line="114" pos:column="12">DONE<pos:position pos:line="114" pos:column="16"/></name></expr>:<pos:position pos:line="114" pos:column="17"/></case> <comment type="block" pos:line="114" pos:column="18">/* not reached, but gcc complains if this is absent */</comment>
	<break pos:line="115" pos:column="9">break;<pos:position pos:line="115" pos:column="15"/></break>
    }<pos:position pos:line="116" pos:column="6"/></block></switch>
  }<pos:position pos:line="117" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="119" pos:column="3">state_putc<pos:position pos:line="119" pos:column="13"/></name> <argument_list pos:line="119" pos:column="14">(<argument><expr><literal type="char" pos:line="119" pos:column="15">'\n'<pos:position pos:line="119" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="119" pos:column="21">s<pos:position pos:line="119" pos:column="22"/></name></expr></argument>)<pos:position pos:line="119" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="24"/></expr_stmt> <comment type="block" pos:line="119" pos:column="25">/* add a final newline */</comment>

  <expr_stmt><expr><call><name pos:line="121" pos:column="3">FREE<pos:position pos:line="121" pos:column="7"/></name> <argument_list pos:line="121" pos:column="8">(<argument><expr><operator pos:line="121" pos:column="9">&amp;<pos:position pos:line="121" pos:column="14"/></operator><operator pos:line="121" pos:column="10">(<pos:position pos:line="121" pos:column="11"/></operator><name><name pos:line="121" pos:column="11">stte<pos:position pos:line="121" pos:column="15"/></name><operator pos:line="121" pos:column="15">.<pos:position pos:line="121" pos:column="16"/></operator><name pos:line="121" pos:column="16">buffer<pos:position pos:line="121" pos:column="22"/></name></name><operator pos:line="121" pos:column="22">)<pos:position pos:line="121" pos:column="23"/></operator></expr></argument>)<pos:position pos:line="121" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="122" pos:column="3">FREE<pos:position pos:line="122" pos:column="7"/></name> <argument_list pos:line="122" pos:column="8">(<argument><expr><operator pos:line="122" pos:column="9">&amp;<pos:position pos:line="122" pos:column="14"/></operator><operator pos:line="122" pos:column="10">(<pos:position pos:line="122" pos:column="11"/></operator><name><name pos:line="122" pos:column="11">stte<pos:position pos:line="122" pos:column="15"/></name><operator pos:line="122" pos:column="15">.<pos:position pos:line="122" pos:column="16"/></operator><name pos:line="122" pos:column="16">line<pos:position pos:line="122" pos:column="20"/></name></name><operator pos:line="122" pos:column="20">)<pos:position pos:line="122" pos:column="21"/></operator></expr></argument>)<pos:position pos:line="122" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="123" pos:column="3">FREE<pos:position pos:line="123" pos:column="7"/></name> <argument_list pos:line="123" pos:column="8">(<argument><expr><operator pos:line="123" pos:column="9">&amp;<pos:position pos:line="123" pos:column="14"/></operator><operator pos:line="123" pos:column="10">(<pos:position pos:line="123" pos:column="11"/></operator><name><name pos:line="123" pos:column="11">stte<pos:position pos:line="123" pos:column="15"/></name><operator pos:line="123" pos:column="15">.<pos:position pos:line="123" pos:column="16"/></operator><name pos:line="123" pos:column="16">param<pos:position pos:line="123" pos:column="21"/></name></name><operator pos:line="123" pos:column="21">)<pos:position pos:line="123" pos:column="22"/></operator></expr></argument>)<pos:position pos:line="123" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="24"/></expr_stmt>

  <return pos:line="125" pos:column="3">return <expr><literal type="number" pos:line="125" pos:column="10">0<pos:position pos:line="125" pos:column="11"/></literal></expr>;<pos:position pos:line="125" pos:column="12"/></return>
}<pos:position pos:line="126" pos:column="2"/></block></function></unit>
