<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1224_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">convert_nonmime_string<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier><modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">ps<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">c<pos:position pos:line="3" pos:column="16"/></name></decl>, <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="19">c1<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>

  <for pos:line="5" pos:column="3">for <control pos:line="5" pos:column="7">(<init><expr><name pos:line="5" pos:column="8">c<pos:position pos:line="5" pos:column="9"/></name> <operator pos:line="5" pos:column="10">=<pos:position pos:line="5" pos:column="11"/></operator> <name pos:line="5" pos:column="12">AssumedCharset<pos:position pos:line="5" pos:column="26"/></name></expr>;<pos:position pos:line="5" pos:column="27"/></init> <condition><expr><name pos:line="5" pos:column="28">c<pos:position pos:line="5" pos:column="29"/></name></expr>;<pos:position pos:line="5" pos:column="30"/></condition> <incr><expr><name pos:line="5" pos:column="31">c<pos:position pos:line="5" pos:column="32"/></name> <operator pos:line="5" pos:column="33">=<pos:position pos:line="5" pos:column="34"/></operator> <ternary><condition><expr><name pos:line="5" pos:column="35">c1<pos:position pos:line="5" pos:column="37"/></name></expr> ?<pos:position pos:line="5" pos:column="39"/></condition><then pos:line="5" pos:column="39"> <expr><name pos:line="5" pos:column="40">c1<pos:position pos:line="5" pos:column="42"/></name> <operator pos:line="5" pos:column="43">+<pos:position pos:line="5" pos:column="44"/></operator> <literal type="number" pos:line="5" pos:column="45">1<pos:position pos:line="5" pos:column="46"/></literal></expr> <pos:position pos:line="5" pos:column="47"/></then><else pos:line="5" pos:column="47">: <expr><literal type="number" pos:line="5" pos:column="49">0<pos:position pos:line="5" pos:column="50"/></literal></expr></else></ternary></expr></incr>)<pos:position pos:line="5" pos:column="51"/></control>
  <block pos:line="6" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">u<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><operator pos:line="7" pos:column="15">*<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">ps<pos:position pos:line="7" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">s<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">fromcode<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">size_t<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">m<pos:position pos:line="10" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="15">n<pos:position pos:line="10" pos:column="16"/></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">size_t<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">ulen<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><call><name pos:line="11" pos:column="19">mutt_strlen<pos:position pos:line="11" pos:column="30"/></name> <argument_list pos:line="11" pos:column="31">(<argument><expr><operator pos:line="11" pos:column="32">*<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">ps<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">size_t<pos:position pos:line="12" pos:column="11"/></name></type> <name pos:line="12" pos:column="12">slen<pos:position pos:line="12" pos:column="16"/></name></decl>;<pos:position pos:line="12" pos:column="17"/></decl_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">u<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">||<pos:position pos:line="14" pos:column="14"/></operator> <operator pos:line="14" pos:column="15">!<pos:position pos:line="14" pos:column="16"/></operator><operator pos:line="14" pos:column="16">*<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="17">u<pos:position pos:line="14" pos:column="18"/></name></expr>)<pos:position pos:line="14" pos:column="19"/></condition><then pos:line="14" pos:column="19">
      <block type="pseudo"><return pos:line="15" pos:column="7">return <expr><literal type="number" pos:line="15" pos:column="14">0<pos:position pos:line="15" pos:column="15"/></literal></expr>;<pos:position pos:line="15" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="17" pos:column="5">c1<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">=<pos:position pos:line="17" pos:column="9"/></operator> <call><name pos:line="17" pos:column="10">strchr<pos:position pos:line="17" pos:column="16"/></name> <argument_list pos:line="17" pos:column="17">(<argument><expr><name pos:line="17" pos:column="18">c<pos:position pos:line="17" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="17" pos:column="21">':'<pos:position pos:line="17" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">n<pos:position pos:line="18" pos:column="6"/></name> <operator pos:line="18" pos:column="7">=<pos:position pos:line="18" pos:column="8"/></operator> <ternary><condition><expr><name pos:line="18" pos:column="9">c1<pos:position pos:line="18" pos:column="11"/></name></expr> ?<pos:position pos:line="18" pos:column="13"/></condition><then pos:line="18" pos:column="13"> <expr><name pos:line="18" pos:column="14">c1<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">-<pos:position pos:line="18" pos:column="18"/></operator> <name pos:line="18" pos:column="19">c<pos:position pos:line="18" pos:column="20"/></name></expr> <pos:position pos:line="18" pos:column="21"/></then><else pos:line="18" pos:column="21">: <expr><call><name pos:line="18" pos:column="23">mutt_strlen<pos:position pos:line="18" pos:column="34"/></name> <argument_list pos:line="18" pos:column="35">(<argument><expr><name pos:line="18" pos:column="36">c<pos:position pos:line="18" pos:column="37"/></name></expr></argument>)<pos:position pos:line="18" pos:column="38"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">!<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">n<pos:position pos:line="19" pos:column="11"/></name></expr>)<pos:position pos:line="19" pos:column="12"/></condition><then pos:line="19" pos:column="12">
      <block type="pseudo"><return pos:line="20" pos:column="7">return <expr><literal type="number" pos:line="20" pos:column="14">0<pos:position pos:line="20" pos:column="15"/></literal></expr>;<pos:position pos:line="20" pos:column="16"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="21" pos:column="5">fromcode<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <call><name pos:line="21" pos:column="16">safe_malloc<pos:position pos:line="21" pos:column="27"/></name> <argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">n<pos:position pos:line="21" pos:column="30"/></name> <operator pos:line="21" pos:column="31">+<pos:position pos:line="21" pos:column="32"/></operator> <literal type="number" pos:line="21" pos:column="33">1<pos:position pos:line="21" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">strfcpy<pos:position pos:line="22" pos:column="12"/></name> <argument_list pos:line="22" pos:column="13">(<argument><expr><name pos:line="22" pos:column="14">fromcode<pos:position pos:line="22" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="24">c<pos:position pos:line="22" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="27">n<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">+<pos:position pos:line="22" pos:column="30"/></operator> <literal type="number" pos:line="22" pos:column="31">1<pos:position pos:line="22" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="23" pos:column="5">m<pos:position pos:line="23" pos:column="6"/></name> <operator pos:line="23" pos:column="7">=<pos:position pos:line="23" pos:column="8"/></operator> <call><name pos:line="23" pos:column="9">convert_string<pos:position pos:line="23" pos:column="23"/></name> <argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">u<pos:position pos:line="23" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="28">ulen<pos:position pos:line="23" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="34">fromcode<pos:position pos:line="23" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="44">Charset<pos:position pos:line="23" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="53">&amp;<pos:position pos:line="23" pos:column="58"/></operator><name pos:line="23" pos:column="54">s<pos:position pos:line="23" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="57">&amp;<pos:position pos:line="23" pos:column="62"/></operator><name pos:line="23" pos:column="58">slen<pos:position pos:line="23" pos:column="62"/></name></expr></argument>)<pos:position pos:line="23" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="64"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">FREE<pos:position pos:line="24" pos:column="9"/></name> <argument_list pos:line="24" pos:column="10">(<argument><expr><operator pos:line="24" pos:column="11">&amp;<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="12">fromcode<pos:position pos:line="24" pos:column="20"/></name></expr></argument>)<pos:position pos:line="24" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="22"/></expr_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">m<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">!=<pos:position pos:line="25" pos:column="13"/></operator> <call pos:line="25" pos:column="14">(<name pos:line="25" pos:column="15">size_t<pos:position pos:line="25" pos:column="21"/></name>)<argument_list pos:line="25" pos:column="22">(<argument><expr><operator pos:line="25" pos:column="23">-<pos:position pos:line="25" pos:column="24"/></operator><literal type="number" pos:line="25" pos:column="24">1<pos:position pos:line="25" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="27"/></condition><then pos:line="25" pos:column="27">
    <block pos:line="26" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">FREE<pos:position pos:line="27" pos:column="11"/></name> <argument_list pos:line="27" pos:column="12">(<argument><expr><name pos:line="27" pos:column="13">ps<pos:position pos:line="27" pos:column="15"/></name></expr></argument>)<pos:position pos:line="27" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="17"/></expr_stmt> <comment type="block" pos:line="27" pos:column="18">/* __FREE_CHECKED__ */</comment>
      <expr_stmt><expr><operator pos:line="28" pos:column="7">*<pos:position pos:line="28" pos:column="8"/></operator><name pos:line="28" pos:column="8">ps<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">=<pos:position pos:line="28" pos:column="12"/></operator> <name pos:line="28" pos:column="13">s<pos:position pos:line="28" pos:column="14"/></name></expr>;<pos:position pos:line="28" pos:column="15"/></expr_stmt>
      <return pos:line="29" pos:column="7">return <expr><literal type="number" pos:line="29" pos:column="14">0<pos:position pos:line="29" pos:column="15"/></literal></expr>;<pos:position pos:line="29" pos:column="16"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
  }<pos:position pos:line="31" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="32" pos:column="3">mutt_convert_string<pos:position pos:line="32" pos:column="22"/></name> <argument_list pos:line="32" pos:column="23">(<argument><expr><name pos:line="32" pos:column="24">ps<pos:position pos:line="32" pos:column="26"/></name></expr></argument>,
      <argument><expr><operator pos:line="33" pos:column="7">(<pos:position pos:line="33" pos:column="8"/></operator><specifier pos:line="33" pos:column="8">const<pos:position pos:line="33" pos:column="13"/></specifier> <name pos:line="33" pos:column="14">char<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">*<pos:position pos:line="33" pos:column="20"/></operator><operator pos:line="33" pos:column="20">)<pos:position pos:line="33" pos:column="21"/></operator><call><name pos:line="33" pos:column="21">mutt_get_default_charset<pos:position pos:line="33" pos:column="45"/></name> <argument_list pos:line="33" pos:column="46">()<pos:position pos:line="33" pos:column="48"/></argument_list></call></expr></argument>,
      <argument><expr><name pos:line="34" pos:column="7">Charset<pos:position pos:line="34" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="16">MUTT_ICONV_HOOK_FROM<pos:position pos:line="34" pos:column="36"/></name></expr></argument>)<pos:position pos:line="34" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="38"/></expr_stmt>
  <return pos:line="35" pos:column="3">return <expr><operator pos:line="35" pos:column="10">-<pos:position pos:line="35" pos:column="11"/></operator><literal type="number" pos:line="35" pos:column="11">1<pos:position pos:line="35" pos:column="12"/></literal></expr>;<pos:position pos:line="35" pos:column="13"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
