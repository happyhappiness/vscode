<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1753_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">mbchar_table<pos:position pos:line="1" pos:column="20"/></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier></type><name pos:line="1" pos:column="22">parse_mbchar_table<pos:position pos:line="1" pos:column="40"/></name> <parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">s<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">mbchar_table<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">t<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">slen<pos:position pos:line="4" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="16">k<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">mbstate_t<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">mbstate<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">d<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">t<pos:position pos:line="8" pos:column="4"/></name> <operator pos:line="8" pos:column="5">=<pos:position pos:line="8" pos:column="6"/></operator> <call><name pos:line="8" pos:column="7">safe_calloc<pos:position pos:line="8" pos:column="18"/></name> <argument_list pos:line="8" pos:column="19">(<argument><expr><literal type="number" pos:line="8" pos:column="20">1<pos:position pos:line="8" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="23">sizeof <argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">mbchar_table<pos:position pos:line="8" pos:column="43"/></name></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="9" pos:column="3">slen<pos:position pos:line="9" pos:column="7"/></name> <operator pos:line="9" pos:column="8">=<pos:position pos:line="9" pos:column="9"/></operator> <call><name pos:line="9" pos:column="10">mutt_strlen<pos:position pos:line="9" pos:column="21"/></name> <argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">s<pos:position pos:line="9" pos:column="24"/></name></expr></argument>)<pos:position pos:line="9" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="26"/></expr_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><operator pos:line="10" pos:column="7">!<pos:position pos:line="10" pos:column="8"/></operator><name pos:line="10" pos:column="8">slen<pos:position pos:line="10" pos:column="12"/></name></expr>)<pos:position pos:line="10" pos:column="13"/></condition><then pos:line="10" pos:column="13">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">t<pos:position pos:line="11" pos:column="13"/></name></expr>;<pos:position pos:line="11" pos:column="14"/></return></block></then></if>

  <expr_stmt><expr><name><name pos:line="13" pos:column="3">t<pos:position pos:line="13" pos:column="4"/></name><operator pos:line="13" pos:column="4">-&gt;<pos:position pos:line="13" pos:column="9"/></operator><name pos:line="13" pos:column="6">orig_str<pos:position pos:line="13" pos:column="14"/></name></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <call><name pos:line="13" pos:column="17">safe_strdup<pos:position pos:line="13" pos:column="28"/></name> <argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">s<pos:position pos:line="13" pos:column="31"/></name></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
  <comment type="block" pos:line="14" pos:column="3">/* This could be more space efficient.  However, being used on tiny
   * strings (Tochars and StChars), the overhead is not great. */</comment>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">t<pos:position pos:line="16" pos:column="4"/></name><operator pos:line="16" pos:column="4">-&gt;<pos:position pos:line="16" pos:column="9"/></operator><name pos:line="16" pos:column="6">chars<pos:position pos:line="16" pos:column="11"/></name></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <call><name pos:line="16" pos:column="14">safe_calloc<pos:position pos:line="16" pos:column="25"/></name> <argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">slen<pos:position pos:line="16" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="33">sizeof <argument_list pos:line="16" pos:column="40">(<argument><expr><name pos:line="16" pos:column="41">char<pos:position pos:line="16" pos:column="45"/></name> <operator pos:line="16" pos:column="46">*<pos:position pos:line="16" pos:column="47"/></operator></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><name pos:line="17" pos:column="3">d<pos:position pos:line="17" pos:column="4"/></name> <operator pos:line="17" pos:column="5">=<pos:position pos:line="17" pos:column="6"/></operator> <name><name pos:line="17" pos:column="7">t<pos:position pos:line="17" pos:column="8"/></name><operator pos:line="17" pos:column="8">-&gt;<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="10">segmented_str<pos:position pos:line="17" pos:column="23"/></name></name> <operator pos:line="17" pos:column="24">=<pos:position pos:line="17" pos:column="25"/></operator> <call><name pos:line="17" pos:column="26">safe_calloc<pos:position pos:line="17" pos:column="37"/></name> <argument_list pos:line="17" pos:column="38">(<argument><expr><name pos:line="17" pos:column="39">slen<pos:position pos:line="17" pos:column="43"/></name> <operator pos:line="17" pos:column="44">*<pos:position pos:line="17" pos:column="45"/></operator> <literal type="number" pos:line="17" pos:column="46">2<pos:position pos:line="17" pos:column="47"/></literal></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="49">sizeof <argument_list pos:line="17" pos:column="56">(<argument><expr><name pos:line="17" pos:column="57">char<pos:position pos:line="17" pos:column="61"/></name></expr></argument>)<pos:position pos:line="17" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="64"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">memset<pos:position pos:line="19" pos:column="9"/></name> <argument_list pos:line="19" pos:column="10">(<argument><expr><operator pos:line="19" pos:column="11">&amp;<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="12">mbstate<pos:position pos:line="19" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="21">0<pos:position pos:line="19" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="24">sizeof <argument_list pos:line="19" pos:column="31">(<argument><expr><name pos:line="19" pos:column="32">mbstate<pos:position pos:line="19" pos:column="39"/></name></expr></argument>)<pos:position pos:line="19" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>
  <while pos:line="20" pos:column="3">while <condition pos:line="20" pos:column="9">(<expr><name pos:line="20" pos:column="10">slen<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">&amp;&amp;<pos:position pos:line="20" pos:column="25"/></operator> <operator pos:line="20" pos:column="18">(<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">k<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">=<pos:position pos:line="20" pos:column="22"/></operator> <call><name pos:line="20" pos:column="23">mbrtowc<pos:position pos:line="20" pos:column="30"/></name> <argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">NULL<pos:position pos:line="20" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="38">s<pos:position pos:line="20" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="41">slen<pos:position pos:line="20" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="47">&amp;<pos:position pos:line="20" pos:column="52"/></operator><name pos:line="20" pos:column="48">mbstate<pos:position pos:line="20" pos:column="55"/></name></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call><operator pos:line="20" pos:column="56">)<pos:position pos:line="20" pos:column="57"/></operator></expr>)<pos:position pos:line="20" pos:column="58"/></condition>
  <block pos:line="21" pos:column="3">{
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">k<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">==<pos:position pos:line="22" pos:column="13"/></operator> <call pos:line="22" pos:column="14">(<name pos:line="22" pos:column="15">size_t<pos:position pos:line="22" pos:column="21"/></name>)<argument_list pos:line="22" pos:column="22">(<argument><expr><operator pos:line="22" pos:column="23">-<pos:position pos:line="22" pos:column="24"/></operator><literal type="number" pos:line="22" pos:column="24">1<pos:position pos:line="22" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="26"/></argument_list></call> <operator pos:line="22" pos:column="27">||<pos:position pos:line="22" pos:column="29"/></operator> <name pos:line="22" pos:column="30">k<pos:position pos:line="22" pos:column="31"/></name> <operator pos:line="22" pos:column="32">==<pos:position pos:line="22" pos:column="34"/></operator> <call pos:line="22" pos:column="35">(<name pos:line="22" pos:column="36">size_t<pos:position pos:line="22" pos:column="42"/></name>)<argument_list pos:line="22" pos:column="43">(<argument><expr><operator pos:line="22" pos:column="44">-<pos:position pos:line="22" pos:column="45"/></operator><literal type="number" pos:line="22" pos:column="45">2<pos:position pos:line="22" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="48"/></condition><then pos:line="22" pos:column="48">
    <block pos:line="23" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="24" pos:column="7">dprint<pos:position pos:line="24" pos:column="13"/></name> <argument_list pos:line="24" pos:column="14">(<argument><expr><literal type="number" pos:line="24" pos:column="15">1<pos:position pos:line="24" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="24" pos:column="18">(<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="19">debugfile<pos:position pos:line="24" pos:column="28"/></name><operator pos:line="24" pos:column="28">,<pos:position pos:line="24" pos:column="29"/></operator>
                  <literal type="string" pos:line="25" pos:column="19">"parse_mbchar_table: mbrtowc returned %d converting %s in %s\n"<pos:position pos:line="25" pos:column="82"/></literal><operator pos:line="25" pos:column="82">,<pos:position pos:line="25" pos:column="83"/></operator>
                  <ternary><condition><expr><operator pos:line="26" pos:column="19">(<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="20">k<pos:position pos:line="26" pos:column="21"/></name> <operator pos:line="26" pos:column="22">==<pos:position pos:line="26" pos:column="24"/></operator> <call pos:line="26" pos:column="25">(<name pos:line="26" pos:column="26">size_t<pos:position pos:line="26" pos:column="32"/></name>)<argument_list pos:line="26" pos:column="33">(<argument><expr><operator pos:line="26" pos:column="34">-<pos:position pos:line="26" pos:column="35"/></operator><literal type="number" pos:line="26" pos:column="35">1<pos:position pos:line="26" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="37"/></argument_list></call><operator pos:line="26" pos:column="37">)<pos:position pos:line="26" pos:column="38"/></operator></expr> ?<pos:position pos:line="26" pos:column="40"/></condition><then pos:line="26" pos:column="40"> <expr><operator pos:line="26" pos:column="41">-<pos:position pos:line="26" pos:column="42"/></operator><literal type="number" pos:line="26" pos:column="42">1<pos:position pos:line="26" pos:column="43"/></literal></expr> <pos:position pos:line="26" pos:column="44"/></then><else pos:line="26" pos:column="44">: <expr><operator pos:line="26" pos:column="46">-<pos:position pos:line="26" pos:column="47"/></operator><literal type="number" pos:line="26" pos:column="47">2<pos:position pos:line="26" pos:column="48"/></literal></expr></else></ternary><operator pos:line="26" pos:column="48">,<pos:position pos:line="26" pos:column="49"/></operator>
                  <name pos:line="27" pos:column="19">s<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">,<pos:position pos:line="27" pos:column="21"/></operator> <name><name pos:line="27" pos:column="22">t<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">-&gt;<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="25">orig_str<pos:position pos:line="27" pos:column="33"/></name></name><operator pos:line="27" pos:column="33">)<pos:position pos:line="27" pos:column="34"/></operator></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>
      <if pos:line="28" pos:column="7">if <condition pos:line="28" pos:column="10">(<expr><name pos:line="28" pos:column="11">k<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">==<pos:position pos:line="28" pos:column="15"/></operator> <call pos:line="28" pos:column="16">(<name pos:line="28" pos:column="17">size_t<pos:position pos:line="28" pos:column="23"/></name>)<argument_list pos:line="28" pos:column="24">(<argument><expr><operator pos:line="28" pos:column="25">-<pos:position pos:line="28" pos:column="26"/></operator><literal type="number" pos:line="28" pos:column="26">1<pos:position pos:line="28" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="29"/></condition><then pos:line="28" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="9">memset<pos:position pos:line="29" pos:column="15"/></name> <argument_list pos:line="29" pos:column="16">(<argument><expr><operator pos:line="29" pos:column="17">&amp;<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="18">mbstate<pos:position pos:line="29" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="27">0<pos:position pos:line="29" pos:column="28"/></literal></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="30">sizeof <argument_list pos:line="29" pos:column="37">(<argument><expr><name pos:line="29" pos:column="38">mbstate<pos:position pos:line="29" pos:column="45"/></name></expr></argument>)<pos:position pos:line="29" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name pos:line="30" pos:column="7">k<pos:position pos:line="30" pos:column="8"/></name> <operator pos:line="30" pos:column="9">=<pos:position pos:line="30" pos:column="10"/></operator> <ternary><condition><expr><operator pos:line="30" pos:column="11">(<pos:position pos:line="30" pos:column="12"/></operator><name pos:line="30" pos:column="12">k<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">==<pos:position pos:line="30" pos:column="16"/></operator> <call pos:line="30" pos:column="17">(<name pos:line="30" pos:column="18">size_t<pos:position pos:line="30" pos:column="24"/></name>)<argument_list pos:line="30" pos:column="25">(<argument><expr><operator pos:line="30" pos:column="26">-<pos:position pos:line="30" pos:column="27"/></operator><literal type="number" pos:line="30" pos:column="27">1<pos:position pos:line="30" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="29"/></argument_list></call><operator pos:line="30" pos:column="29">)<pos:position pos:line="30" pos:column="30"/></operator></expr> ?<pos:position pos:line="30" pos:column="32"/></condition><then pos:line="30" pos:column="32"> <expr><literal type="number" pos:line="30" pos:column="33">1<pos:position pos:line="30" pos:column="34"/></literal></expr> <pos:position pos:line="30" pos:column="35"/></then><else pos:line="30" pos:column="35">: <expr><name pos:line="30" pos:column="37">slen<pos:position pos:line="30" pos:column="41"/></name></expr></else></ternary></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="33" pos:column="5">slen<pos:position pos:line="33" pos:column="9"/></name> <operator pos:line="33" pos:column="10">-=<pos:position pos:line="33" pos:column="12"/></operator> <name pos:line="33" pos:column="13">k<pos:position pos:line="33" pos:column="14"/></name></expr>;<pos:position pos:line="33" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">t<pos:position pos:line="34" pos:column="6"/></name><operator pos:line="34" pos:column="6">-&gt;<pos:position pos:line="34" pos:column="11"/></operator><name pos:line="34" pos:column="8">chars<pos:position pos:line="34" pos:column="13"/></name><index pos:line="34" pos:column="13">[<expr><name><name pos:line="34" pos:column="14">t<pos:position pos:line="34" pos:column="15"/></name><operator pos:line="34" pos:column="15">-&gt;<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="17">len<pos:position pos:line="34" pos:column="20"/></name></name><operator pos:line="34" pos:column="20">++<pos:position pos:line="34" pos:column="22"/></operator></expr>]<pos:position pos:line="34" pos:column="23"/></index></name> <operator pos:line="34" pos:column="24">=<pos:position pos:line="34" pos:column="25"/></operator> <name pos:line="34" pos:column="26">d<pos:position pos:line="34" pos:column="27"/></name></expr>;<pos:position pos:line="34" pos:column="28"/></expr_stmt>
    <while pos:line="35" pos:column="5">while <condition pos:line="35" pos:column="11">(<expr><name pos:line="35" pos:column="12">k<pos:position pos:line="35" pos:column="13"/></name><operator pos:line="35" pos:column="13">--<pos:position pos:line="35" pos:column="15"/></operator></expr>)<pos:position pos:line="35" pos:column="16"/></condition>
      <block type="pseudo"><expr_stmt><expr><operator pos:line="36" pos:column="7">*<pos:position pos:line="36" pos:column="8"/></operator><name pos:line="36" pos:column="8">d<pos:position pos:line="36" pos:column="9"/></name><operator pos:line="36" pos:column="9">++<pos:position pos:line="36" pos:column="11"/></operator> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <operator pos:line="36" pos:column="14">*<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="15">s<pos:position pos:line="36" pos:column="16"/></name><operator pos:line="36" pos:column="16">++<pos:position pos:line="36" pos:column="18"/></operator></expr>;<pos:position pos:line="36" pos:column="19"/></expr_stmt></block></while>
    <expr_stmt><expr><operator pos:line="37" pos:column="5">*<pos:position pos:line="37" pos:column="6"/></operator><name pos:line="37" pos:column="6">d<pos:position pos:line="37" pos:column="7"/></name><operator pos:line="37" pos:column="7">++<pos:position pos:line="37" pos:column="9"/></operator> <operator pos:line="37" pos:column="10">=<pos:position pos:line="37" pos:column="11"/></operator> <literal type="char" pos:line="37" pos:column="12">'\0'<pos:position pos:line="37" pos:column="16"/></literal></expr>;<pos:position pos:line="37" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="38" pos:column="4"/></block></while>

  <return pos:line="40" pos:column="3">return <expr><name pos:line="40" pos:column="10">t<pos:position pos:line="40" pos:column="11"/></name></expr>;<pos:position pos:line="40" pos:column="12"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
