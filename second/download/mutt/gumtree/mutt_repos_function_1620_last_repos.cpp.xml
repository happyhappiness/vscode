<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1620_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">strsep<pos:position pos:line="1" pos:column="13"/></name> <parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">char<pos:position pos:line="1" pos:column="19"/></name> <modifier pos:line="1" pos:column="20">*<pos:position pos:line="1" pos:column="21"/></modifier><modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier></type><name pos:line="1" pos:column="22">stringp<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">delim<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">begin<pos:position pos:line="3" pos:column="14"/></name></decl>, <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="17">end<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><name pos:line="5" pos:column="3">begin<pos:position pos:line="5" pos:column="8"/></name> <operator pos:line="5" pos:column="9">=<pos:position pos:line="5" pos:column="10"/></operator> <operator pos:line="5" pos:column="11">*<pos:position pos:line="5" pos:column="12"/></operator><name pos:line="5" pos:column="12">stringp<pos:position pos:line="5" pos:column="19"/></name></expr>;<pos:position pos:line="5" pos:column="20"/></expr_stmt>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">begin<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">==<pos:position pos:line="6" pos:column="15"/></operator> <name pos:line="6" pos:column="16">NULL<pos:position pos:line="6" pos:column="20"/></name></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><name pos:line="7" pos:column="12">NULL<pos:position pos:line="7" pos:column="16"/></name></expr>;<pos:position pos:line="7" pos:column="17"/></return></block></then></if>

  <comment type="block" pos:line="9" pos:column="3">/* A frequent case is when the delimiter string contains only one
     character.  Here we don't need to call the expensive `strpbrk'
     function and instead work using `strchr'.  */</comment>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name><name pos:line="12" pos:column="7">delim<pos:position pos:line="12" pos:column="12"/></name><index pos:line="12" pos:column="12">[<expr><literal type="number" pos:line="12" pos:column="13">0<pos:position pos:line="12" pos:column="14"/></literal></expr>]<pos:position pos:line="12" pos:column="15"/></index></name> <operator pos:line="12" pos:column="16">==<pos:position pos:line="12" pos:column="18"/></operator> <literal type="char" pos:line="12" pos:column="19">'\0'<pos:position pos:line="12" pos:column="23"/></literal> <operator pos:line="12" pos:column="24">||<pos:position pos:line="12" pos:column="26"/></operator> <name><name pos:line="12" pos:column="27">delim<pos:position pos:line="12" pos:column="32"/></name><index pos:line="12" pos:column="32">[<expr><literal type="number" pos:line="12" pos:column="33">1<pos:position pos:line="12" pos:column="34"/></literal></expr>]<pos:position pos:line="12" pos:column="35"/></index></name> <operator pos:line="12" pos:column="36">==<pos:position pos:line="12" pos:column="38"/></operator> <literal type="char" pos:line="12" pos:column="39">'\0'<pos:position pos:line="12" pos:column="43"/></literal></expr>)<pos:position pos:line="12" pos:column="44"/></condition><then pos:line="12" pos:column="44">
    <block pos:line="13" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="14" pos:column="7">char<pos:position pos:line="14" pos:column="11"/></name></type> <name pos:line="14" pos:column="12">ch<pos:position pos:line="14" pos:column="14"/></name> <init pos:line="14" pos:column="15">= <expr><name><name pos:line="14" pos:column="17">delim<pos:position pos:line="14" pos:column="22"/></name><index pos:line="14" pos:column="22">[<expr><literal type="number" pos:line="14" pos:column="23">0<pos:position pos:line="14" pos:column="24"/></literal></expr>]<pos:position pos:line="14" pos:column="25"/></index></name></expr></init></decl>;<pos:position pos:line="14" pos:column="26"/></decl_stmt>

      <if pos:line="16" pos:column="7">if <condition pos:line="16" pos:column="10">(<expr><name pos:line="16" pos:column="11">ch<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">==<pos:position pos:line="16" pos:column="16"/></operator> <literal type="char" pos:line="16" pos:column="17">'\0'<pos:position pos:line="16" pos:column="21"/></literal></expr>)<pos:position pos:line="16" pos:column="22"/></condition><then pos:line="16" pos:column="22">
	<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="9">end<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <name pos:line="17" pos:column="15">NULL<pos:position pos:line="17" pos:column="19"/></name></expr>;<pos:position pos:line="17" pos:column="20"/></expr_stmt></block></then>
      <else pos:line="18" pos:column="7">else
	<block pos:line="19" pos:column="9">{
	  <if pos:line="20" pos:column="11">if <condition pos:line="20" pos:column="14">(<expr><operator pos:line="20" pos:column="15">*<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">begin<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">==<pos:position pos:line="20" pos:column="24"/></operator> <name pos:line="20" pos:column="25">ch<pos:position pos:line="20" pos:column="27"/></name></expr>)<pos:position pos:line="20" pos:column="28"/></condition><then pos:line="20" pos:column="28">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="13">end<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <name pos:line="21" pos:column="19">begin<pos:position pos:line="21" pos:column="24"/></name></expr>;<pos:position pos:line="21" pos:column="25"/></expr_stmt></block></then>
	  <elseif pos:line="22" pos:column="11">else <if pos:line="22" pos:column="16">if <condition pos:line="22" pos:column="19">(<expr><operator pos:line="22" pos:column="20">*<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">begin<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">==<pos:position pos:line="22" pos:column="29"/></operator> <literal type="char" pos:line="22" pos:column="30">'\0'<pos:position pos:line="22" pos:column="34"/></literal></expr>)<pos:position pos:line="22" pos:column="35"/></condition><then pos:line="22" pos:column="35">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="13">end<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">NULL<pos:position pos:line="23" pos:column="23"/></name></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt></block></then></if></elseif>
	  <else pos:line="24" pos:column="11">else
	    <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="13">end<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <call><name pos:line="25" pos:column="19">strchr<pos:position pos:line="25" pos:column="25"/></name> <argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">begin<pos:position pos:line="25" pos:column="32"/></name> <operator pos:line="25" pos:column="33">+<pos:position pos:line="25" pos:column="34"/></operator> <literal type="number" pos:line="25" pos:column="35">1<pos:position pos:line="25" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="38">ch<pos:position pos:line="25" pos:column="40"/></name></expr></argument>)<pos:position pos:line="25" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="42"/></expr_stmt></block></else></if>
	}<pos:position pos:line="26" pos:column="10"/></block></else></if>
    }<pos:position pos:line="27" pos:column="6"/></block></then>
  <else pos:line="28" pos:column="3">else
    <comment type="block" pos:line="29" pos:column="5">/* Find the end of the token.  */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="5">end<pos:position pos:line="30" pos:column="8"/></name> <operator pos:line="30" pos:column="9">=<pos:position pos:line="30" pos:column="10"/></operator> <call><name pos:line="30" pos:column="11">strpbrk<pos:position pos:line="30" pos:column="18"/></name> <argument_list pos:line="30" pos:column="19">(<argument><expr><name pos:line="30" pos:column="20">begin<pos:position pos:line="30" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="27">delim<pos:position pos:line="30" pos:column="32"/></name></expr></argument>)<pos:position pos:line="30" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="34"/></expr_stmt></block></else></if>

  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><name pos:line="32" pos:column="7">end<pos:position pos:line="32" pos:column="10"/></name></expr>)<pos:position pos:line="32" pos:column="11"/></condition><then pos:line="32" pos:column="11">
    <block pos:line="33" pos:column="5">{
      <comment type="block" pos:line="34" pos:column="7">/* Terminate the token and set *STRINGP past NUL character.  */</comment>
      <expr_stmt><expr><operator pos:line="35" pos:column="7">*<pos:position pos:line="35" pos:column="8"/></operator><name pos:line="35" pos:column="8">end<pos:position pos:line="35" pos:column="11"/></name><operator pos:line="35" pos:column="11">++<pos:position pos:line="35" pos:column="13"/></operator> <operator pos:line="35" pos:column="14">=<pos:position pos:line="35" pos:column="15"/></operator> <literal type="char" pos:line="35" pos:column="16">'\0'<pos:position pos:line="35" pos:column="20"/></literal></expr>;<pos:position pos:line="35" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="36" pos:column="7">*<pos:position pos:line="36" pos:column="8"/></operator><name pos:line="36" pos:column="8">stringp<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">=<pos:position pos:line="36" pos:column="17"/></operator> <name pos:line="36" pos:column="18">end<pos:position pos:line="36" pos:column="21"/></name></expr>;<pos:position pos:line="36" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then>
  <else pos:line="38" pos:column="3">else
    <comment type="block" pos:line="39" pos:column="5">/* No more delimiters; this is the last token.  */</comment>
    <block type="pseudo"><expr_stmt><expr><operator pos:line="40" pos:column="5">*<pos:position pos:line="40" pos:column="6"/></operator><name pos:line="40" pos:column="6">stringp<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <name pos:line="40" pos:column="16">NULL<pos:position pos:line="40" pos:column="20"/></name></expr>;<pos:position pos:line="40" pos:column="21"/></expr_stmt></block></else></if>

  <return pos:line="42" pos:column="3">return <expr><name pos:line="42" pos:column="10">begin<pos:position pos:line="42" pos:column="15"/></name></expr>;<pos:position pos:line="42" pos:column="16"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
