<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2024_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cmd_queue<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">IMAP_DATA<pos:position pos:line="1" pos:column="32"/></name><modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type> <name pos:line="1" pos:column="34">idata<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name><modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type> <name pos:line="1" pos:column="53">cmdstr<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">int<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">flags<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">IMAP_COMMAND<pos:position pos:line="3" pos:column="15"/></name><modifier pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></modifier></type> <name pos:line="3" pos:column="17">cmd<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">rc<pos:position pos:line="4" pos:column="9"/></name></decl>;<pos:position pos:line="4" pos:column="10"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><call><name pos:line="6" pos:column="7">cmd_queue_full<pos:position pos:line="6" pos:column="21"/></name> <argument_list pos:line="6" pos:column="22">(<argument><expr><name pos:line="6" pos:column="23">idata<pos:position pos:line="6" pos:column="28"/></name></expr></argument>)<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="30"/></condition><then pos:line="6" pos:column="30">
  <block pos:line="7" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">dprint<pos:position pos:line="8" pos:column="11"/></name> <argument_list pos:line="8" pos:column="12">(<argument><expr><literal type="number" pos:line="8" pos:column="13">3<pos:position pos:line="8" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="8" pos:column="16">(<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">debugfile<pos:position pos:line="8" pos:column="26"/></name><operator pos:line="8" pos:column="26">,<pos:position pos:line="8" pos:column="27"/></operator> <literal type="string" pos:line="8" pos:column="28">"Draining IMAP command pipeline\n"<pos:position pos:line="8" pos:column="62"/></literal><operator pos:line="8" pos:column="62">)<pos:position pos:line="8" pos:column="63"/></operator></expr></argument>)<pos:position pos:line="8" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="65"/></expr_stmt>

    <expr_stmt><expr><name pos:line="10" pos:column="5">rc<pos:position pos:line="10" pos:column="7"/></name> <operator pos:line="10" pos:column="8">=<pos:position pos:line="10" pos:column="9"/></operator> <call><name pos:line="10" pos:column="10">imap_exec<pos:position pos:line="10" pos:column="19"/></name> <argument_list pos:line="10" pos:column="20">(<argument><expr><name pos:line="10" pos:column="21">idata<pos:position pos:line="10" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="28">NULL<pos:position pos:line="10" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="34">IMAP_CMD_FAIL_OK<pos:position pos:line="10" pos:column="50"/></name> <operator pos:line="10" pos:column="51">|<pos:position pos:line="10" pos:column="52"/></operator> <operator pos:line="10" pos:column="53">(<pos:position pos:line="10" pos:column="54"/></operator><name pos:line="10" pos:column="54">flags<pos:position pos:line="10" pos:column="59"/></name> <operator pos:line="10" pos:column="60">&amp;<pos:position pos:line="10" pos:column="65"/></operator> <name pos:line="10" pos:column="62">IMAP_CMD_POLL<pos:position pos:line="10" pos:column="75"/></name><operator pos:line="10" pos:column="75">)<pos:position pos:line="10" pos:column="76"/></operator></expr></argument>)<pos:position pos:line="10" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="78"/></expr_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">rc<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">&lt;<pos:position pos:line="12" pos:column="16"/></operator> <literal type="number" pos:line="12" pos:column="14">0<pos:position pos:line="12" pos:column="15"/></literal> <operator pos:line="12" pos:column="16">&amp;&amp;<pos:position pos:line="12" pos:column="26"/></operator> <name pos:line="12" pos:column="19">rc<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">!=<pos:position pos:line="12" pos:column="24"/></operator> <operator pos:line="12" pos:column="25">-<pos:position pos:line="12" pos:column="26"/></operator><literal type="number" pos:line="12" pos:column="26">2<pos:position pos:line="12" pos:column="27"/></literal></expr>)<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28">
      <block type="pseudo"><return pos:line="13" pos:column="7">return <expr><name pos:line="13" pos:column="14">rc<pos:position pos:line="13" pos:column="16"/></name></expr>;<pos:position pos:line="13" pos:column="17"/></return></block></then></if>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><operator pos:line="16" pos:column="7">!<pos:position pos:line="16" pos:column="8"/></operator><operator pos:line="16" pos:column="8">(<pos:position pos:line="16" pos:column="9"/></operator><name pos:line="16" pos:column="9">cmd<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">cmd_new<pos:position pos:line="16" pos:column="22"/></name> <argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">idata<pos:position pos:line="16" pos:column="29"/></name></expr></argument>)<pos:position pos:line="16" pos:column="30"/></argument_list></call><operator pos:line="16" pos:column="30">)<pos:position pos:line="16" pos:column="31"/></operator></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32">
    <block type="pseudo"><return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">IMAP_CMD_BAD<pos:position pos:line="17" pos:column="24"/></name></expr>;<pos:position pos:line="17" pos:column="25"/></return></block></then></if>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><call><name pos:line="19" pos:column="7">mutt_buffer_printf<pos:position pos:line="19" pos:column="25"/></name> <argument_list pos:line="19" pos:column="26">(<argument><expr><name><name pos:line="19" pos:column="27">idata<pos:position pos:line="19" pos:column="32"/></name><operator pos:line="19" pos:column="32">-&gt;<pos:position pos:line="19" pos:column="37"/></operator><name pos:line="19" pos:column="34">cmdbuf<pos:position pos:line="19" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="42">"%s %s\r\n"<pos:position pos:line="19" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="55">cmd<pos:position pos:line="19" pos:column="58"/></name><operator pos:line="19" pos:column="58">-&gt;<pos:position pos:line="19" pos:column="63"/></operator><name pos:line="19" pos:column="60">seq<pos:position pos:line="19" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="65">cmdstr<pos:position pos:line="19" pos:column="71"/></name></expr></argument>)<pos:position pos:line="19" pos:column="72"/></argument_list></call> <operator pos:line="19" pos:column="73">&lt;<pos:position pos:line="19" pos:column="77"/></operator> <literal type="number" pos:line="19" pos:column="75">0<pos:position pos:line="19" pos:column="76"/></literal></expr>)<pos:position pos:line="19" pos:column="77"/></condition><then pos:line="19" pos:column="77">
    <block type="pseudo"><return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">IMAP_CMD_BAD<pos:position pos:line="20" pos:column="24"/></name></expr>;<pos:position pos:line="20" pos:column="25"/></return></block></then></if>

  <return pos:line="22" pos:column="3">return <expr><literal type="number" pos:line="22" pos:column="10">0<pos:position pos:line="22" pos:column="11"/></literal></expr>;<pos:position pos:line="22" pos:column="12"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
