<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_229_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">mutt_enter_command<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">BUFFER<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">err<pos:position pos:line="3" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="15">token<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">buffer<pos:position pos:line="4" pos:column="14"/></name><index pos:line="4" pos:column="14">[<expr><name pos:line="4" pos:column="15">LONG_STRING<pos:position pos:line="4" pos:column="26"/></name></expr>]<pos:position pos:line="4" pos:column="27"/></index></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">r<pos:position pos:line="5" pos:column="8"/></name></decl>;<pos:position pos:line="5" pos:column="9"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="7" pos:column="3">buffer<pos:position pos:line="7" pos:column="9"/></name><index pos:line="7" pos:column="9">[<expr><literal type="number" pos:line="7" pos:column="10">0<pos:position pos:line="7" pos:column="11"/></literal></expr>]<pos:position pos:line="7" pos:column="12"/></index></name> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <literal type="number" pos:line="7" pos:column="15">0<pos:position pos:line="7" pos:column="16"/></literal></expr>;<pos:position pos:line="7" pos:column="17"/></expr_stmt>
  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><call><name pos:line="8" pos:column="7">mutt_get_field<pos:position pos:line="8" pos:column="21"/></name> <argument_list pos:line="8" pos:column="22">(<argument><expr><literal type="string" pos:line="8" pos:column="23">":"<pos:position pos:line="8" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="28">buffer<pos:position pos:line="8" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="36">sizeof <argument_list pos:line="8" pos:column="43">(<argument><expr><name pos:line="8" pos:column="44">buffer<pos:position pos:line="8" pos:column="50"/></name></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="8" pos:column="53">MUTT_COMMAND<pos:position pos:line="8" pos:column="65"/></name></expr></argument>)<pos:position pos:line="8" pos:column="66"/></argument_list></call> <operator pos:line="8" pos:column="67">!=<pos:position pos:line="8" pos:column="69"/></operator> <literal type="number" pos:line="8" pos:column="70">0<pos:position pos:line="8" pos:column="71"/></literal> <operator pos:line="8" pos:column="72">||<pos:position pos:line="8" pos:column="74"/></operator> <operator pos:line="8" pos:column="75">!<pos:position pos:line="8" pos:column="76"/></operator><name><name pos:line="8" pos:column="76">buffer<pos:position pos:line="8" pos:column="82"/></name><index pos:line="8" pos:column="82">[<expr><literal type="number" pos:line="8" pos:column="83">0<pos:position pos:line="8" pos:column="84"/></literal></expr>]<pos:position pos:line="8" pos:column="85"/></index></name></expr>)<pos:position pos:line="8" pos:column="86"/></condition><then pos:line="8" pos:column="86">
    <block type="pseudo"><return pos:line="9" pos:column="5">return;<pos:position pos:line="9" pos:column="12"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">mutt_buffer_init<pos:position pos:line="10" pos:column="19"/></name> <argument_list pos:line="10" pos:column="20">(<argument><expr><operator pos:line="10" pos:column="21">&amp;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="22">err<pos:position pos:line="10" pos:column="25"/></name></expr></argument>)<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="11" pos:column="3">err<pos:position pos:line="11" pos:column="6"/></name><operator pos:line="11" pos:column="6">.<pos:position pos:line="11" pos:column="7"/></operator><name pos:line="11" pos:column="7">dsize<pos:position pos:line="11" pos:column="12"/></name></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <name pos:line="11" pos:column="15">STRING<pos:position pos:line="11" pos:column="21"/></name></expr>;<pos:position pos:line="11" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">err<pos:position pos:line="12" pos:column="6"/></name><operator pos:line="12" pos:column="6">.<pos:position pos:line="12" pos:column="7"/></operator><name pos:line="12" pos:column="7">data<pos:position pos:line="12" pos:column="11"/></name></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">safe_malloc<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><name><name pos:line="12" pos:column="26">err<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">.<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">dsize<pos:position pos:line="12" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">mutt_buffer_init<pos:position pos:line="13" pos:column="19"/></name> <argument_list pos:line="13" pos:column="20">(<argument><expr><operator pos:line="13" pos:column="21">&amp;<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="22">token<pos:position pos:line="13" pos:column="27"/></name></expr></argument>)<pos:position pos:line="13" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">r<pos:position pos:line="14" pos:column="4"/></name> <operator pos:line="14" pos:column="5">=<pos:position pos:line="14" pos:column="6"/></operator> <call><name pos:line="14" pos:column="7">mutt_parse_rc_line<pos:position pos:line="14" pos:column="25"/></name> <argument_list pos:line="14" pos:column="26">(<argument><expr><name pos:line="14" pos:column="27">buffer<pos:position pos:line="14" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="35">&amp;<pos:position pos:line="14" pos:column="40"/></operator><name pos:line="14" pos:column="36">token<pos:position pos:line="14" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="43">&amp;<pos:position pos:line="14" pos:column="48"/></operator><name pos:line="14" pos:column="44">err<pos:position pos:line="14" pos:column="47"/></name></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="15" pos:column="3">FREE<pos:position pos:line="15" pos:column="7"/></name> <argument_list pos:line="15" pos:column="8">(<argument><expr><operator pos:line="15" pos:column="9">&amp;<pos:position pos:line="15" pos:column="14"/></operator><name><name pos:line="15" pos:column="10">token<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">.<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">data<pos:position pos:line="15" pos:column="20"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="22"/></expr_stmt>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name><name pos:line="16" pos:column="7">err<pos:position pos:line="16" pos:column="10"/></name><operator pos:line="16" pos:column="10">.<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">data<pos:position pos:line="16" pos:column="15"/></name><index pos:line="16" pos:column="15">[<expr><literal type="number" pos:line="16" pos:column="16">0<pos:position pos:line="16" pos:column="17"/></literal></expr>]<pos:position pos:line="16" pos:column="18"/></index></name></expr>)<pos:position pos:line="16" pos:column="19"/></condition><then pos:line="16" pos:column="19">
  <block pos:line="17" pos:column="3">{
    <comment type="block" pos:line="18" pos:column="5">/* since errbuf could potentially contain printf() sequences in it,
       we must call mutt_error() in this fashion so that vsprintf()
       doesn't expect more arguments that we passed */</comment>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">r<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">==<pos:position pos:line="21" pos:column="13"/></operator> <literal type="number" pos:line="21" pos:column="14">0<pos:position pos:line="21" pos:column="15"/></literal></expr>)<pos:position pos:line="21" pos:column="16"/></condition><then pos:line="21" pos:column="16">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="7">mutt_message<pos:position pos:line="22" pos:column="19"/></name> <argument_list pos:line="22" pos:column="20">(<argument><expr><literal type="string" pos:line="22" pos:column="21">"%s"<pos:position pos:line="22" pos:column="25"/></literal></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="27">err<pos:position pos:line="22" pos:column="30"/></name><operator pos:line="22" pos:column="30">.<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="31">data<pos:position pos:line="22" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt></block></then>
    <else pos:line="23" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="7">mutt_error<pos:position pos:line="24" pos:column="17"/></name> <argument_list pos:line="24" pos:column="18">(<argument><expr><literal type="string" pos:line="24" pos:column="19">"%s"<pos:position pos:line="24" pos:column="23"/></literal></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="25">err<pos:position pos:line="24" pos:column="28"/></name><operator pos:line="24" pos:column="28">.<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="29">data<pos:position pos:line="24" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt></block></else></if>
  }<pos:position pos:line="25" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="27" pos:column="3">FREE<pos:position pos:line="27" pos:column="7"/></name> <argument_list pos:line="27" pos:column="8">(<argument><expr><operator pos:line="27" pos:column="9">&amp;<pos:position pos:line="27" pos:column="14"/></operator><name><name pos:line="27" pos:column="10">err<pos:position pos:line="27" pos:column="13"/></name><operator pos:line="27" pos:column="13">.<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">data<pos:position pos:line="27" pos:column="18"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="20"/></expr_stmt>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
