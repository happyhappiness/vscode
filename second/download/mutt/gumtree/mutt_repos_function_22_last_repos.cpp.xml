<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_22_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">crypt_init<pos:position pos:line="1" pos:column="16"/></name> <parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">void<pos:position pos:line="1" pos:column="22"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="23"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">CRYPT_BACKEND_CLASSIC_PGP<pos:position pos:line="3" pos:column="33"/></name></cpp:ifdef>
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(
<cpp:ifdef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifdef<pos:position pos:line="5" pos:column="7"/></cpp:directive> <name pos:line="5" pos:column="8">CRYPT_BACKEND_GPGME<pos:position pos:line="5" pos:column="27"/></name></cpp:ifdef>
      <expr><operator pos:line="6" pos:column="7">(<pos:position pos:line="6" pos:column="8"/></operator><operator pos:line="6" pos:column="8">!<pos:position pos:line="6" pos:column="9"/></operator> <call><name pos:line="6" pos:column="10">option<pos:position pos:line="6" pos:column="16"/></name> <argument_list pos:line="6" pos:column="17">(<argument><expr><name pos:line="6" pos:column="18">OPTCRYPTUSEGPGME<pos:position pos:line="6" pos:column="34"/></name></expr></argument>)<pos:position pos:line="6" pos:column="35"/></argument_list></call><operator pos:line="6" pos:column="35">)<pos:position pos:line="6" pos:column="36"/></operator>
<cpp:else pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">else<pos:position pos:line="7" pos:column="6"/></cpp:directive></cpp:else>
       <literal type="number" pos:line="8" pos:column="8">1<pos:position pos:line="8" pos:column="9"/></literal></expr>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>
      )<pos:position pos:line="10" pos:column="8"/></condition><then pos:line="10" pos:column="8">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="5">crypto_module_register<pos:position pos:line="11" pos:column="27"/></name> <argument_list pos:line="11" pos:column="28">(<argument><expr><operator pos:line="11" pos:column="29">&amp;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="30">crypt_mod_pgp_classic<pos:position pos:line="11" pos:column="51"/></name></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="53"/></expr_stmt></block></then></if>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">CRYPT_BACKEND_CLASSIC_SMIME<pos:position pos:line="14" pos:column="35"/></name></cpp:ifdef>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">CRYPT_BACKEND_GPGME<pos:position pos:line="16" pos:column="27"/></name></cpp:ifdef>
      <expr><operator pos:line="17" pos:column="7">(<pos:position pos:line="17" pos:column="8"/></operator><operator pos:line="17" pos:column="8">!<pos:position pos:line="17" pos:column="9"/></operator> <call><name pos:line="17" pos:column="10">option<pos:position pos:line="17" pos:column="16"/></name> <argument_list pos:line="17" pos:column="17">(<argument><expr><name pos:line="17" pos:column="18">OPTCRYPTUSEGPGME<pos:position pos:line="17" pos:column="34"/></name></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></call><operator pos:line="17" pos:column="35">)<pos:position pos:line="17" pos:column="36"/></operator>
<cpp:else pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">else<pos:position pos:line="18" pos:column="6"/></cpp:directive></cpp:else>
       <literal type="number" pos:line="19" pos:column="8">1<pos:position pos:line="19" pos:column="9"/></literal></expr>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>
      )<pos:position pos:line="21" pos:column="8"/></condition><then pos:line="21" pos:column="8">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="5">crypto_module_register<pos:position pos:line="22" pos:column="27"/></name> <argument_list pos:line="22" pos:column="28">(<argument><expr><operator pos:line="22" pos:column="29">&amp;<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="30">crypt_mod_smime_classic<pos:position pos:line="22" pos:column="53"/></name></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="55"/></expr_stmt></block></then></if>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><call><name pos:line="25" pos:column="7">option<pos:position pos:line="25" pos:column="13"/></name> <argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">OPTCRYPTUSEGPGME<pos:position pos:line="25" pos:column="31"/></name></expr></argument>)<pos:position pos:line="25" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="33"/></condition><then pos:line="25" pos:column="33">
    <block pos:line="26" pos:column="5">{
<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">CRYPT_BACKEND_GPGME<pos:position pos:line="27" pos:column="27"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">crypto_module_register<pos:position pos:line="28" pos:column="29"/></name> <argument_list pos:line="28" pos:column="30">(<argument><expr><operator pos:line="28" pos:column="31">&amp;<pos:position pos:line="28" pos:column="36"/></operator><name pos:line="28" pos:column="32">crypt_mod_pgp_gpgme<pos:position pos:line="28" pos:column="51"/></name></expr></argument>)<pos:position pos:line="28" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="53"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">crypto_module_register<pos:position pos:line="29" pos:column="29"/></name> <argument_list pos:line="29" pos:column="30">(<argument><expr><operator pos:line="29" pos:column="31">&amp;<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="32">crypt_mod_smime_gpgme<pos:position pos:line="29" pos:column="53"/></name></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="55"/></expr_stmt>
<cpp:else pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">else<pos:position pos:line="30" pos:column="6"/></cpp:directive></cpp:else>
      <expr_stmt><expr><call><name pos:line="31" pos:column="7">mutt_message<pos:position pos:line="31" pos:column="19"/></name> <argument_list pos:line="31" pos:column="20">(<argument><expr><call><name pos:line="31" pos:column="21">_<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><literal type="string" pos:line="31" pos:column="23">"\"crypt_use_gpgme\" set"<pos:position pos:line="31" pos:column="48"/></literal>
                      <literal type="string" pos:line="32" pos:column="23">" but not built with GPGME support."<pos:position pos:line="32" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="62"/></expr_stmt>
      <if pos:line="33" pos:column="7">if <condition pos:line="33" pos:column="10">(<expr><call><name pos:line="33" pos:column="11">mutt_any_key_to_continue<pos:position pos:line="33" pos:column="35"/></name> <argument_list pos:line="33" pos:column="36">(<argument><expr><name pos:line="33" pos:column="37">NULL<pos:position pos:line="33" pos:column="41"/></name></expr></argument>)<pos:position pos:line="33" pos:column="42"/></argument_list></call> <operator pos:line="33" pos:column="43">==<pos:position pos:line="33" pos:column="45"/></operator> <operator pos:line="33" pos:column="46">-<pos:position pos:line="33" pos:column="47"/></operator><literal type="number" pos:line="33" pos:column="47">1<pos:position pos:line="33" pos:column="48"/></literal></expr>)<pos:position pos:line="33" pos:column="49"/></condition><then pos:line="33" pos:column="49">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="9">mutt_exit<pos:position pos:line="34" pos:column="18"/></name><argument_list pos:line="34" pos:column="18">(<argument><expr><literal type="number" pos:line="34" pos:column="19">1<pos:position pos:line="34" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="22"/></expr_stmt></block></then></if>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

<cpp:if pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">if<pos:position pos:line="38" pos:column="4"/></cpp:directive> <expr><name pos:line="38" pos:column="5">defined<pos:position pos:line="38" pos:column="12"/></name> <name pos:line="38" pos:column="13">CRYPT_BACKEND_CLASSIC_PGP<pos:position pos:line="38" pos:column="38"/></name> <operator pos:line="38" pos:column="39">||<pos:position pos:line="38" pos:column="41"/></operator> <name pos:line="38" pos:column="42">defined<pos:position pos:line="38" pos:column="49"/></name> <name pos:line="38" pos:column="50">CRYPT_BACKEND_CLASSIC_SMIME<pos:position pos:line="38" pos:column="77"/></name> <operator pos:line="38" pos:column="78">||<pos:position pos:line="38" pos:column="80"/></operator> <name pos:line="38" pos:column="81">defined<pos:position pos:line="38" pos:column="88"/></name> <name pos:line="38" pos:column="89">CRYPT_BACKEND_GPGME<pos:position pos:line="38" pos:column="108"/></name></expr></cpp:if>
  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><call><name pos:line="39" pos:column="7">CRYPT_MOD_CALL_CHECK<pos:position pos:line="39" pos:column="27"/></name> <argument_list pos:line="39" pos:column="28">(<argument><expr><name pos:line="39" pos:column="29">PGP<pos:position pos:line="39" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="34">init<pos:position pos:line="39" pos:column="38"/></name></expr></argument>)<pos:position pos:line="39" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="40"/></condition><then pos:line="39" pos:column="40">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="40" pos:column="5">(<pos:position pos:line="40" pos:column="6"/></operator><call><name pos:line="40" pos:column="6">CRYPT_MOD_CALL<pos:position pos:line="40" pos:column="20"/></name> <argument_list pos:line="40" pos:column="21">(<argument><expr><name pos:line="40" pos:column="22">PGP<pos:position pos:line="40" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="27">init<pos:position pos:line="40" pos:column="31"/></name></expr></argument>)<pos:position pos:line="40" pos:column="32"/></argument_list></call><operator pos:line="40" pos:column="32">)<pos:position pos:line="40" pos:column="33"/></operator> <operator pos:line="40" pos:column="34">(<pos:position pos:line="40" pos:column="35"/></operator><operator pos:line="40" pos:column="35">)<pos:position pos:line="40" pos:column="36"/></operator></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt></block></then></if>

  <if pos:line="42" pos:column="3">if <condition pos:line="42" pos:column="6">(<expr><call><name pos:line="42" pos:column="7">CRYPT_MOD_CALL_CHECK<pos:position pos:line="42" pos:column="27"/></name> <argument_list pos:line="42" pos:column="28">(<argument><expr><name pos:line="42" pos:column="29">SMIME<pos:position pos:line="42" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="36">init<pos:position pos:line="42" pos:column="40"/></name></expr></argument>)<pos:position pos:line="42" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="42"/></condition><then pos:line="42" pos:column="42">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="43" pos:column="5">(<pos:position pos:line="43" pos:column="6"/></operator><call><name pos:line="43" pos:column="6">CRYPT_MOD_CALL<pos:position pos:line="43" pos:column="20"/></name> <argument_list pos:line="43" pos:column="21">(<argument><expr><name pos:line="43" pos:column="22">SMIME<pos:position pos:line="43" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="29">init<pos:position pos:line="43" pos:column="33"/></name></expr></argument>)<pos:position pos:line="43" pos:column="34"/></argument_list></call><operator pos:line="43" pos:column="34">)<pos:position pos:line="43" pos:column="35"/></operator> <operator pos:line="43" pos:column="36">(<pos:position pos:line="43" pos:column="37"/></operator><operator pos:line="43" pos:column="37">)<pos:position pos:line="43" pos:column="38"/></operator></expr>;<pos:position pos:line="43" pos:column="39"/></expr_stmt></block></then></if>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
