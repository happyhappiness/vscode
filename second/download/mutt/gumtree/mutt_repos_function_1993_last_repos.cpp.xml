<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1993_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">imap_alloc_msn_index<pos:position pos:line="1" pos:column="33"/></name> <parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">IMAP_DATA<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">idata<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">unsigned<pos:position pos:line="1" pos:column="61"/></name> <name pos:line="1" pos:column="62">int<pos:position pos:line="1" pos:column="65"/></name></type> <name pos:line="1" pos:column="66">msn_count<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">unsigned<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">int<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">new_size<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">msn_count<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">&lt;=<pos:position pos:line="5" pos:column="22"/></operator> <name><name pos:line="5" pos:column="20">idata<pos:position pos:line="5" pos:column="25"/></name><operator pos:line="5" pos:column="25">-&gt;<pos:position pos:line="5" pos:column="30"/></operator><name pos:line="5" pos:column="27">msn_index_size<pos:position pos:line="5" pos:column="41"/></name></name></expr>)<pos:position pos:line="5" pos:column="42"/></condition><then pos:line="5" pos:column="42">
    <block type="pseudo"><return pos:line="6" pos:column="5">return;<pos:position pos:line="6" pos:column="12"/></return></block></then></if>

  <comment type="block" pos:line="8" pos:column="3">/* This is a conservative check to protect against a malicious imap
   * server.  Most likely size_t is bigger than an unsigned int, but
   * if msn_count is this big, we have a serious problem. */</comment>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">msn_count<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">&gt;=<pos:position pos:line="11" pos:column="22"/></operator> <operator pos:line="11" pos:column="20">(<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="21">UINT_MAX<pos:position pos:line="11" pos:column="29"/></name> <operator pos:line="11" pos:column="30">/<pos:position pos:line="11" pos:column="31"/></operator> <sizeof pos:line="11" pos:column="32">sizeof <argument_list pos:line="11" pos:column="39">(<argument><expr><name pos:line="11" pos:column="40">HEADER<pos:position pos:line="11" pos:column="46"/></name> <operator pos:line="11" pos:column="47">*<pos:position pos:line="11" pos:column="48"/></operator></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></sizeof><operator pos:line="11" pos:column="49">)<pos:position pos:line="11" pos:column="50"/></operator></expr>)<pos:position pos:line="11" pos:column="51"/></condition><then pos:line="11" pos:column="51">
  <block pos:line="12" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">mutt_error<pos:position pos:line="13" pos:column="15"/></name></type> <name pos:line="13" pos:column="16">_<pos:position pos:line="13" pos:column="17"/></name><argument_list pos:line="13" pos:column="17">(<argument><expr><literal type="string" pos:line="13" pos:column="18">"Integer overflow -- can't allocate memory."<pos:position pos:line="13" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="63"/></argument_list></decl>;<pos:position pos:line="13" pos:column="64"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">sleep<pos:position pos:line="14" pos:column="10"/></name> <argument_list pos:line="14" pos:column="11">(<argument><expr><literal type="number" pos:line="14" pos:column="12">1<pos:position pos:line="14" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">mutt_exit<pos:position pos:line="15" pos:column="14"/></name> <argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="number" pos:line="15" pos:column="16">1<pos:position pos:line="15" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="18" pos:column="3">/* Add a little padding, like mx_allloc_memory() */</comment>
  <expr_stmt><expr><name pos:line="19" pos:column="3">new_size<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <name pos:line="19" pos:column="14">msn_count<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">+<pos:position pos:line="19" pos:column="25"/></operator> <literal type="number" pos:line="19" pos:column="26">25<pos:position pos:line="19" pos:column="28"/></literal></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt>

  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><operator pos:line="21" pos:column="7">!<pos:position pos:line="21" pos:column="8"/></operator><name><name pos:line="21" pos:column="8">idata<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">-&gt;<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="15">msn_index<pos:position pos:line="21" pos:column="24"/></name></name></expr>)<pos:position pos:line="21" pos:column="25"/></condition><then pos:line="21" pos:column="25">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="22" pos:column="5">idata<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">-&gt;<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="12">msn_index<pos:position pos:line="22" pos:column="21"/></name></name> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <call><name pos:line="22" pos:column="24">safe_calloc<pos:position pos:line="22" pos:column="35"/></name> <argument_list pos:line="22" pos:column="36">(<argument><expr><name pos:line="22" pos:column="37">new_size<pos:position pos:line="22" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="47">sizeof <argument_list pos:line="22" pos:column="54">(<argument><expr><name pos:line="22" pos:column="55">HEADER<pos:position pos:line="22" pos:column="61"/></name> <operator pos:line="22" pos:column="62">*<pos:position pos:line="22" pos:column="63"/></operator></expr></argument>)<pos:position pos:line="22" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="66"/></expr_stmt></block></then>
  <else pos:line="23" pos:column="3">else
  <block pos:line="24" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">safe_realloc<pos:position pos:line="25" pos:column="17"/></name> <argument_list pos:line="25" pos:column="18">(<argument><expr><operator pos:line="25" pos:column="19">&amp;<pos:position pos:line="25" pos:column="24"/></operator><name><name pos:line="25" pos:column="20">idata<pos:position pos:line="25" pos:column="25"/></name><operator pos:line="25" pos:column="25">-&gt;<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="27">msn_index<pos:position pos:line="25" pos:column="36"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="38">sizeof <argument_list pos:line="25" pos:column="45">(<argument><expr><name pos:line="25" pos:column="46">HEADER<pos:position pos:line="25" pos:column="52"/></name> <operator pos:line="25" pos:column="53">*<pos:position pos:line="25" pos:column="54"/></operator></expr></argument>)<pos:position pos:line="25" pos:column="55"/></argument_list></sizeof> <operator pos:line="25" pos:column="56">*<pos:position pos:line="25" pos:column="57"/></operator> <name pos:line="25" pos:column="58">new_size<pos:position pos:line="25" pos:column="66"/></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">memset<pos:position pos:line="26" pos:column="11"/></name> <argument_list pos:line="26" pos:column="12">(<argument><expr><name><name pos:line="26" pos:column="13">idata<pos:position pos:line="26" pos:column="18"/></name><operator pos:line="26" pos:column="18">-&gt;<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="20">msn_index<pos:position pos:line="26" pos:column="29"/></name></name> <operator pos:line="26" pos:column="30">+<pos:position pos:line="26" pos:column="31"/></operator> <name><name pos:line="26" pos:column="32">idata<pos:position pos:line="26" pos:column="37"/></name><operator pos:line="26" pos:column="37">-&gt;<pos:position pos:line="26" pos:column="42"/></operator><name pos:line="26" pos:column="39">msn_index_size<pos:position pos:line="26" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="55">0<pos:position pos:line="26" pos:column="56"/></literal></expr></argument>,
            <argument><expr><sizeof pos:line="27" pos:column="13">sizeof <argument_list pos:line="27" pos:column="20">(<argument><expr><name pos:line="27" pos:column="21">HEADER<pos:position pos:line="27" pos:column="27"/></name> <operator pos:line="27" pos:column="28">*<pos:position pos:line="27" pos:column="29"/></operator></expr></argument>)<pos:position pos:line="27" pos:column="30"/></argument_list></sizeof> <operator pos:line="27" pos:column="31">*<pos:position pos:line="27" pos:column="32"/></operator> <operator pos:line="27" pos:column="33">(<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="34">new_size<pos:position pos:line="27" pos:column="42"/></name> <operator pos:line="27" pos:column="43">-<pos:position pos:line="27" pos:column="44"/></operator> <name><name pos:line="27" pos:column="45">idata<pos:position pos:line="27" pos:column="50"/></name><operator pos:line="27" pos:column="50">-&gt;<pos:position pos:line="27" pos:column="55"/></operator><name pos:line="27" pos:column="52">msn_index_size<pos:position pos:line="27" pos:column="66"/></name></name><operator pos:line="27" pos:column="66">)<pos:position pos:line="27" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="27" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="69"/></expr_stmt>
  }<pos:position pos:line="28" pos:column="4"/></block></else></if>

  <expr_stmt><expr><name><name pos:line="30" pos:column="3">idata<pos:position pos:line="30" pos:column="8"/></name><operator pos:line="30" pos:column="8">-&gt;<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="10">msn_index_size<pos:position pos:line="30" pos:column="24"/></name></name> <operator pos:line="30" pos:column="25">=<pos:position pos:line="30" pos:column="26"/></operator> <name pos:line="30" pos:column="27">new_size<pos:position pos:line="30" pos:column="35"/></name></expr>;<pos:position pos:line="30" pos:column="36"/></expr_stmt>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
