<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2102_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">imap_get_literal_count<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">buf<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">long<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">bytes<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">pc<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">pn<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">!<pos:position pos:line="6" pos:column="8"/></operator><name pos:line="6" pos:column="8">buf<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">||<pos:position pos:line="6" pos:column="14"/></operator> <operator pos:line="6" pos:column="15">!<pos:position pos:line="6" pos:column="16"/></operator><operator pos:line="6" pos:column="16">(<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">pc<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">=<pos:position pos:line="6" pos:column="21"/></operator> <call><name pos:line="6" pos:column="22">strchr<pos:position pos:line="6" pos:column="28"/></name> <argument_list pos:line="6" pos:column="29">(<argument><expr><name pos:line="6" pos:column="30">buf<pos:position pos:line="6" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="6" pos:column="35">'{'<pos:position pos:line="6" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="39"/></argument_list></call><operator pos:line="6" pos:column="39">)<pos:position pos:line="6" pos:column="40"/></operator></expr>)<pos:position pos:line="6" pos:column="41"/></condition><then pos:line="6" pos:column="41">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">-<pos:position pos:line="7" pos:column="13"/></operator><literal type="number" pos:line="7" pos:column="13">1<pos:position pos:line="7" pos:column="14"/></literal></expr>;<pos:position pos:line="7" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="9" pos:column="3">pc<pos:position pos:line="9" pos:column="5"/></name><operator pos:line="9" pos:column="5">++<pos:position pos:line="9" pos:column="7"/></operator></expr>;<pos:position pos:line="9" pos:column="8"/></expr_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">pn<pos:position pos:line="10" pos:column="5"/></name> <operator pos:line="10" pos:column="6">=<pos:position pos:line="10" pos:column="7"/></operator> <name pos:line="10" pos:column="8">pc<pos:position pos:line="10" pos:column="10"/></name></expr>;<pos:position pos:line="10" pos:column="11"/></expr_stmt>
  <while pos:line="11" pos:column="3">while <condition pos:line="11" pos:column="9">(<expr><call><name pos:line="11" pos:column="10">isdigit<pos:position pos:line="11" pos:column="17"/></name> <argument_list pos:line="11" pos:column="18">(<argument><expr><operator pos:line="11" pos:column="19">(<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">unsigned<pos:position pos:line="11" pos:column="28"/></name> <name pos:line="11" pos:column="29">char<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">)<pos:position pos:line="11" pos:column="34"/></operator> <operator pos:line="11" pos:column="35">*<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="36">pc<pos:position pos:line="11" pos:column="38"/></name></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="40"/></condition>
    <block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="5">pc<pos:position pos:line="12" pos:column="7"/></name><operator pos:line="12" pos:column="7">++<pos:position pos:line="12" pos:column="9"/></operator></expr>;<pos:position pos:line="12" pos:column="10"/></expr_stmt></block></while>
  <expr_stmt><expr><operator pos:line="13" pos:column="3">*<pos:position pos:line="13" pos:column="4"/></operator><name pos:line="13" pos:column="4">pc<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">=<pos:position pos:line="13" pos:column="8"/></operator> <literal type="number" pos:line="13" pos:column="9">0<pos:position pos:line="13" pos:column="10"/></literal></expr>;<pos:position pos:line="13" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="14" pos:column="3">*<pos:position pos:line="14" pos:column="4"/></operator><name pos:line="14" pos:column="4">bytes<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <call><name pos:line="14" pos:column="12">atoi<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">(<argument><expr><name pos:line="14" pos:column="17">pn<pos:position pos:line="14" pos:column="19"/></name></expr></argument>)<pos:position pos:line="14" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="21"/></expr_stmt>

  <return pos:line="16" pos:column="3">return <expr><literal type="number" pos:line="16" pos:column="10">0<pos:position pos:line="16" pos:column="11"/></literal></expr>;<pos:position pos:line="16" pos:column="12"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
