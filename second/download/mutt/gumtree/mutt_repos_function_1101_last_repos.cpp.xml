<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1101_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">header_cache_t<pos:position pos:line="1" pos:column="15"/></name> <modifier pos:line="1" pos:column="16">*<pos:position pos:line="1" pos:column="17"/></modifier></type>
<name pos:line="2" pos:column="1">mutt_hcache_open<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name pos:line="2" pos:column="24">char<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">path<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <name pos:line="2" pos:column="42">char<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">folder<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">hcache_namer_t<pos:position pos:line="2" pos:column="70"/></name></type> <name pos:line="2" pos:column="71">namer<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="77"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">header_cache<pos:position pos:line="4" pos:column="22"/></name></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">h<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><call><name pos:line="4" pos:column="28">safe_calloc<pos:position pos:line="4" pos:column="39"/></name><argument_list pos:line="4" pos:column="39">(<argument><expr><literal type="number" pos:line="4" pos:column="40">1<pos:position pos:line="4" pos:column="41"/></literal></expr></argument>, <argument><expr><sizeof pos:line="4" pos:column="43">sizeof <argument_list pos:line="4" pos:column="50">(<argument><expr pos:line="4" pos:column="51">struct <name pos:line="4" pos:column="58">header_cache<pos:position pos:line="4" pos:column="70"/></name></expr></argument>)<pos:position pos:line="4" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="4" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="73"/></decl_stmt>
  <function_decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> (<modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier><name pos:line="5" pos:column="9">hcache_open<pos:position pos:line="5" pos:column="20"/></name>) <parameter_list pos:line="5" pos:column="22">(<parameter><decl><type><name><name pos:line="5" pos:column="23">struct<pos:position pos:line="5" pos:column="29"/></name> <name pos:line="5" pos:column="30">header_cache<pos:position pos:line="5" pos:column="42"/></name></name><modifier pos:line="5" pos:column="42">*<pos:position pos:line="5" pos:column="43"/></modifier></type> <name pos:line="5" pos:column="44">h<pos:position pos:line="5" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="5" pos:column="47">const<pos:position pos:line="5" pos:column="52"/></specifier> <name pos:line="5" pos:column="53">char<pos:position pos:line="5" pos:column="57"/></name><modifier pos:line="5" pos:column="57">*<pos:position pos:line="5" pos:column="58"/></modifier></type> <name pos:line="5" pos:column="59">path<pos:position pos:line="5" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="64"/></parameter_list>;<pos:position pos:line="5" pos:column="65"/></function_decl>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">stat<pos:position pos:line="6" pos:column="14"/></name></name></type> <name pos:line="6" pos:column="15">sb<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>

<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">HAVE_QDBM<pos:position pos:line="8" pos:column="14"/></name></expr></cpp:if>
  <expr_stmt><expr><name pos:line="9" pos:column="3">hcache_open<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">hcache_open_qdbm<pos:position pos:line="9" pos:column="33"/></name></expr>;<pos:position pos:line="9" pos:column="34"/></expr_stmt>
<cpp:elif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">elif<pos:position pos:line="10" pos:column="6"/></cpp:directive> <expr><name pos:line="10" pos:column="7">HAVE_TC<pos:position pos:line="10" pos:column="14"/></name></expr></cpp:elif>
  <expr_stmt><expr><name pos:line="11" pos:column="3">hcache_open<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <name pos:line="11" pos:column="16">hcache_open_tc<pos:position pos:line="11" pos:column="30"/></name></expr>;<pos:position pos:line="11" pos:column="31"/></expr_stmt>
<cpp:elif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">elif<pos:position pos:line="12" pos:column="6"/></cpp:directive> <expr><name pos:line="12" pos:column="7">HAVE_KC<pos:position pos:line="12" pos:column="14"/></name></expr></cpp:elif>
  <expr_stmt><expr><name pos:line="13" pos:column="3">hcache_open<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">hcache_open_kc<pos:position pos:line="13" pos:column="30"/></name></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt>
<cpp:elif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">elif<pos:position pos:line="14" pos:column="6"/></cpp:directive> <expr><name pos:line="14" pos:column="7">HAVE_GDBM<pos:position pos:line="14" pos:column="16"/></name></expr></cpp:elif>
  <expr_stmt><expr><name pos:line="15" pos:column="3">hcache_open<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <name pos:line="15" pos:column="17">hcache_open_gdbm<pos:position pos:line="15" pos:column="33"/></name></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
<cpp:elif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">elif<pos:position pos:line="16" pos:column="6"/></cpp:directive> <expr><name pos:line="16" pos:column="7">HAVE_DB4<pos:position pos:line="16" pos:column="15"/></name></expr></cpp:elif>
  <expr_stmt><expr><name pos:line="17" pos:column="3">hcache_open<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <name pos:line="17" pos:column="17">hcache_open_db4<pos:position pos:line="17" pos:column="32"/></name></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>
<cpp:elif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">elif<pos:position pos:line="18" pos:column="6"/></cpp:directive> <expr><name pos:line="18" pos:column="7">HAVE_LMDB<pos:position pos:line="18" pos:column="16"/></name></expr></cpp:elif>
  <expr_stmt><expr><name pos:line="19" pos:column="3">hcache_open<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <name pos:line="19" pos:column="17">hcache_open_lmdb<pos:position pos:line="19" pos:column="33"/></name></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="22" pos:column="3">/* Calculate the current hcache version from dynamic configuration */</comment>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name pos:line="23" pos:column="7">hcachever<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">==<pos:position pos:line="23" pos:column="19"/></operator> <literal type="number" pos:line="23" pos:column="20">0x0<pos:position pos:line="23" pos:column="23"/></literal></expr>)<pos:position pos:line="23" pos:column="24"/></condition><then pos:line="23" pos:column="24"> <block pos:line="23" pos:column="25">{
    <union pos:line="24" pos:column="5">union <block pos:line="24" pos:column="11">{<public type="default" pos:line="24" pos:column="12">
      <decl_stmt><decl><type><name pos:line="25" pos:column="7">unsigned<pos:position pos:line="25" pos:column="15"/></name> <name pos:line="25" pos:column="16">char<pos:position pos:line="25" pos:column="20"/></name></type> <name><name pos:line="25" pos:column="21">charval<pos:position pos:line="25" pos:column="28"/></name><index pos:line="25" pos:column="28">[<expr><literal type="number" pos:line="25" pos:column="29">16<pos:position pos:line="25" pos:column="31"/></literal></expr>]<pos:position pos:line="25" pos:column="32"/></index></name></decl>;<pos:position pos:line="25" pos:column="33"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="26" pos:column="7">unsigned<pos:position pos:line="26" pos:column="15"/></name> <name pos:line="26" pos:column="16">int<pos:position pos:line="26" pos:column="19"/></name></type> <name pos:line="26" pos:column="20">intval<pos:position pos:line="26" pos:column="26"/></name></decl>;<pos:position pos:line="26" pos:column="27"/></decl_stmt>
    <pos:position pos:line="27" pos:column="5"/></public>}<pos:position pos:line="27" pos:column="6"/></block> <decl><name pos:line="27" pos:column="7">digest<pos:position pos:line="27" pos:column="13"/></name></decl>;<pos:position pos:line="27" pos:column="14"/></union>
    <decl_stmt><decl><type><name><name pos:line="28" pos:column="5">struct<pos:position pos:line="28" pos:column="11"/></name> <name pos:line="28" pos:column="12">md5_ctx<pos:position pos:line="28" pos:column="19"/></name></name></type> <name pos:line="28" pos:column="20">ctx<pos:position pos:line="28" pos:column="23"/></name></decl>;<pos:position pos:line="28" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="29" pos:column="5">REPLACE_LIST<pos:position pos:line="29" pos:column="17"/></name> <modifier pos:line="29" pos:column="18">*<pos:position pos:line="29" pos:column="19"/></modifier></type><name pos:line="29" pos:column="19">spam<pos:position pos:line="29" pos:column="23"/></name></decl>;<pos:position pos:line="29" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="30" pos:column="5">RX_LIST<pos:position pos:line="30" pos:column="12"/></name> <modifier pos:line="30" pos:column="13">*<pos:position pos:line="30" pos:column="14"/></modifier></type><name pos:line="30" pos:column="14">nospam<pos:position pos:line="30" pos:column="20"/></name></decl>;<pos:position pos:line="30" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name pos:line="32" pos:column="5">hcachever<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">=<pos:position pos:line="32" pos:column="16"/></operator> <name pos:line="32" pos:column="17">HCACHEVER<pos:position pos:line="32" pos:column="26"/></name></expr>;<pos:position pos:line="32" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">md5_init_ctx<pos:position pos:line="34" pos:column="17"/></name><argument_list pos:line="34" pos:column="17">(<argument><expr><operator pos:line="34" pos:column="18">&amp;<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="19">ctx<pos:position pos:line="34" pos:column="22"/></name></expr></argument>)<pos:position pos:line="34" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="24"/></expr_stmt>

    <comment type="block" pos:line="36" pos:column="5">/* Seed with the compiled-in header structure hash */</comment>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">md5_process_bytes<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><operator pos:line="37" pos:column="23">&amp;<pos:position pos:line="37" pos:column="28"/></operator><name pos:line="37" pos:column="24">hcachever<pos:position pos:line="37" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="35">sizeof<argument_list pos:line="37" pos:column="41">(<argument><expr><name pos:line="37" pos:column="42">hcachever<pos:position pos:line="37" pos:column="51"/></name></expr></argument>)<pos:position pos:line="37" pos:column="52"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="37" pos:column="54">&amp;<pos:position pos:line="37" pos:column="59"/></operator><name pos:line="37" pos:column="55">ctx<pos:position pos:line="37" pos:column="58"/></name></expr></argument>)<pos:position pos:line="37" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="60"/></expr_stmt>

    <comment type="block" pos:line="39" pos:column="5">/* Mix in user's spam list */</comment>
    <for pos:line="40" pos:column="5">for <control pos:line="40" pos:column="9">(<init><expr><name pos:line="40" pos:column="10">spam<pos:position pos:line="40" pos:column="14"/></name> <operator pos:line="40" pos:column="15">=<pos:position pos:line="40" pos:column="16"/></operator> <name pos:line="40" pos:column="17">SpamList<pos:position pos:line="40" pos:column="25"/></name></expr>;<pos:position pos:line="40" pos:column="26"/></init> <condition><expr><name pos:line="40" pos:column="27">spam<pos:position pos:line="40" pos:column="31"/></name></expr>;<pos:position pos:line="40" pos:column="32"/></condition> <incr><expr><name pos:line="40" pos:column="33">spam<pos:position pos:line="40" pos:column="37"/></name> <operator pos:line="40" pos:column="38">=<pos:position pos:line="40" pos:column="39"/></operator> <name><name pos:line="40" pos:column="40">spam<pos:position pos:line="40" pos:column="44"/></name><operator pos:line="40" pos:column="44">-&gt;<pos:position pos:line="40" pos:column="49"/></operator><name pos:line="40" pos:column="46">next<pos:position pos:line="40" pos:column="50"/></name></name></expr></incr>)<pos:position pos:line="40" pos:column="51"/></control>
    <block pos:line="41" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">md5_process_bytes<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><name><name pos:line="42" pos:column="25">spam<pos:position pos:line="42" pos:column="29"/></name><operator pos:line="42" pos:column="29">-&gt;<pos:position pos:line="42" pos:column="34"/></operator><name pos:line="42" pos:column="31">rx<pos:position pos:line="42" pos:column="33"/></name><operator pos:line="42" pos:column="33">-&gt;<pos:position pos:line="42" pos:column="38"/></operator><name pos:line="42" pos:column="35">pattern<pos:position pos:line="42" pos:column="42"/></name></name></expr></argument>, <argument><expr><call><name pos:line="42" pos:column="44">strlen<pos:position pos:line="42" pos:column="50"/></name><argument_list pos:line="42" pos:column="50">(<argument><expr><name><name pos:line="42" pos:column="51">spam<pos:position pos:line="42" pos:column="55"/></name><operator pos:line="42" pos:column="55">-&gt;<pos:position pos:line="42" pos:column="60"/></operator><name pos:line="42" pos:column="57">rx<pos:position pos:line="42" pos:column="59"/></name><operator pos:line="42" pos:column="59">-&gt;<pos:position pos:line="42" pos:column="64"/></operator><name pos:line="42" pos:column="61">pattern<pos:position pos:line="42" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="69"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="42" pos:column="71">&amp;<pos:position pos:line="42" pos:column="76"/></operator><name pos:line="42" pos:column="72">ctx<pos:position pos:line="42" pos:column="75"/></name></expr></argument>)<pos:position pos:line="42" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="77"/></expr_stmt>
      <macro><name pos:line="43" pos:column="7">md5_process_bytes<pos:position pos:line="43" pos:column="24"/></name><argument_list pos:line="43" pos:column="24">(<argument pos:line="43" pos:column="25">spam-&gt;template<pos:position pos:line="43" pos:column="39"/></argument>, <argument pos:line="43" pos:column="41">strlen(spam-&gt;template)<pos:position pos:line="43" pos:column="63"/></argument>, <argument pos:line="43" pos:column="65">&amp;ctx<pos:position pos:line="43" pos:column="69"/></argument>)<pos:position pos:line="43" pos:column="70"/></argument_list></macro><empty_stmt pos:line="43" pos:column="70">;<pos:position pos:line="43" pos:column="71"/></empty_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></for>

    <comment type="block" pos:line="46" pos:column="5">/* Mix in user's nospam list */</comment>
    <for pos:line="47" pos:column="5">for <control pos:line="47" pos:column="9">(<init><expr><name pos:line="47" pos:column="10">nospam<pos:position pos:line="47" pos:column="16"/></name> <operator pos:line="47" pos:column="17">=<pos:position pos:line="47" pos:column="18"/></operator> <name pos:line="47" pos:column="19">NoSpamList<pos:position pos:line="47" pos:column="29"/></name></expr>;<pos:position pos:line="47" pos:column="30"/></init> <condition><expr><name pos:line="47" pos:column="31">nospam<pos:position pos:line="47" pos:column="37"/></name></expr>;<pos:position pos:line="47" pos:column="38"/></condition> <incr><expr><name pos:line="47" pos:column="39">nospam<pos:position pos:line="47" pos:column="45"/></name> <operator pos:line="47" pos:column="46">=<pos:position pos:line="47" pos:column="47"/></operator> <name><name pos:line="47" pos:column="48">nospam<pos:position pos:line="47" pos:column="54"/></name><operator pos:line="47" pos:column="54">-&gt;<pos:position pos:line="47" pos:column="59"/></operator><name pos:line="47" pos:column="56">next<pos:position pos:line="47" pos:column="60"/></name></name></expr></incr>)<pos:position pos:line="47" pos:column="61"/></control>
    <block pos:line="48" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">md5_process_bytes<pos:position pos:line="49" pos:column="24"/></name><argument_list pos:line="49" pos:column="24">(<argument><expr><name><name pos:line="49" pos:column="25">nospam<pos:position pos:line="49" pos:column="31"/></name><operator pos:line="49" pos:column="31">-&gt;<pos:position pos:line="49" pos:column="36"/></operator><name pos:line="49" pos:column="33">rx<pos:position pos:line="49" pos:column="35"/></name><operator pos:line="49" pos:column="35">-&gt;<pos:position pos:line="49" pos:column="40"/></operator><name pos:line="49" pos:column="37">pattern<pos:position pos:line="49" pos:column="44"/></name></name></expr></argument>, <argument><expr><call><name pos:line="49" pos:column="46">strlen<pos:position pos:line="49" pos:column="52"/></name><argument_list pos:line="49" pos:column="52">(<argument><expr><name><name pos:line="49" pos:column="53">nospam<pos:position pos:line="49" pos:column="59"/></name><operator pos:line="49" pos:column="59">-&gt;<pos:position pos:line="49" pos:column="64"/></operator><name pos:line="49" pos:column="61">rx<pos:position pos:line="49" pos:column="63"/></name><operator pos:line="49" pos:column="63">-&gt;<pos:position pos:line="49" pos:column="68"/></operator><name pos:line="49" pos:column="65">pattern<pos:position pos:line="49" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="73"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="49" pos:column="75">&amp;<pos:position pos:line="49" pos:column="80"/></operator><name pos:line="49" pos:column="76">ctx<pos:position pos:line="49" pos:column="79"/></name></expr></argument>)<pos:position pos:line="49" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="81"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></for>

    <comment type="block" pos:line="52" pos:column="5">/* Get a hash and take its bytes as an (unsigned int) hash version */</comment>
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">md5_finish_ctx<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><operator pos:line="53" pos:column="20">&amp;<pos:position pos:line="53" pos:column="25"/></operator><name pos:line="53" pos:column="21">ctx<pos:position pos:line="53" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="26">digest<pos:position pos:line="53" pos:column="32"/></name><operator pos:line="53" pos:column="32">.<pos:position pos:line="53" pos:column="33"/></operator><name pos:line="53" pos:column="33">charval<pos:position pos:line="53" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="54" pos:column="5">hcachever<pos:position pos:line="54" pos:column="14"/></name> <operator pos:line="54" pos:column="15">=<pos:position pos:line="54" pos:column="16"/></operator> <name><name pos:line="54" pos:column="17">digest<pos:position pos:line="54" pos:column="23"/></name><operator pos:line="54" pos:column="23">.<pos:position pos:line="54" pos:column="24"/></operator><name pos:line="54" pos:column="24">intval<pos:position pos:line="54" pos:column="30"/></name></name></expr>;<pos:position pos:line="54" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="55" pos:column="4"/></block></then></if>

<cpp:if pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">if<pos:position pos:line="57" pos:column="4"/></cpp:directive> <expr><name pos:line="57" pos:column="5">HAVE_LMDB<pos:position pos:line="57" pos:column="14"/></name></expr></cpp:if>
  <expr_stmt><expr><name><name pos:line="58" pos:column="3">h<pos:position pos:line="58" pos:column="4"/></name><operator pos:line="58" pos:column="4">-&gt;<pos:position pos:line="58" pos:column="9"/></operator><name pos:line="58" pos:column="6">db<pos:position pos:line="58" pos:column="8"/></name></name> <operator pos:line="58" pos:column="9">=<pos:position pos:line="58" pos:column="10"/></operator> <literal type="number" pos:line="58" pos:column="11">0<pos:position pos:line="58" pos:column="12"/></literal></expr>;<pos:position pos:line="58" pos:column="13"/></expr_stmt>
<cpp:else pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">else<pos:position pos:line="59" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name><name pos:line="60" pos:column="3">h<pos:position pos:line="60" pos:column="4"/></name><operator pos:line="60" pos:column="4">-&gt;<pos:position pos:line="60" pos:column="9"/></operator><name pos:line="60" pos:column="6">db<pos:position pos:line="60" pos:column="8"/></name></name> <operator pos:line="60" pos:column="9">=<pos:position pos:line="60" pos:column="10"/></operator> <name pos:line="60" pos:column="11">NULL<pos:position pos:line="60" pos:column="15"/></name></expr>;<pos:position pos:line="60" pos:column="16"/></expr_stmt>
<cpp:endif pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">endif<pos:position pos:line="61" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name pos:line="62" pos:column="3">h<pos:position pos:line="62" pos:column="4"/></name><operator pos:line="62" pos:column="4">-&gt;<pos:position pos:line="62" pos:column="9"/></operator><name pos:line="62" pos:column="6">folder<pos:position pos:line="62" pos:column="12"/></name></name> <operator pos:line="62" pos:column="13">=<pos:position pos:line="62" pos:column="14"/></operator> <call><name pos:line="62" pos:column="15">get_foldername<pos:position pos:line="62" pos:column="29"/></name><argument_list pos:line="62" pos:column="29">(<argument><expr><name pos:line="62" pos:column="30">folder<pos:position pos:line="62" pos:column="36"/></name></expr></argument>)<pos:position pos:line="62" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="63" pos:column="3">h<pos:position pos:line="63" pos:column="4"/></name><operator pos:line="63" pos:column="4">-&gt;<pos:position pos:line="63" pos:column="9"/></operator><name pos:line="63" pos:column="6">crc<pos:position pos:line="63" pos:column="9"/></name></name> <operator pos:line="63" pos:column="10">=<pos:position pos:line="63" pos:column="11"/></operator> <name pos:line="63" pos:column="12">hcachever<pos:position pos:line="63" pos:column="21"/></name></expr>;<pos:position pos:line="63" pos:column="22"/></expr_stmt>

  <if pos:line="65" pos:column="3">if <condition pos:line="65" pos:column="6">(<expr><operator pos:line="65" pos:column="7">!<pos:position pos:line="65" pos:column="8"/></operator><name pos:line="65" pos:column="8">path<pos:position pos:line="65" pos:column="12"/></name> <operator pos:line="65" pos:column="13">||<pos:position pos:line="65" pos:column="15"/></operator> <name><name pos:line="65" pos:column="16">path<pos:position pos:line="65" pos:column="20"/></name><index pos:line="65" pos:column="20">[<expr><literal type="number" pos:line="65" pos:column="21">0<pos:position pos:line="65" pos:column="22"/></literal></expr>]<pos:position pos:line="65" pos:column="23"/></index></name> <operator pos:line="65" pos:column="24">==<pos:position pos:line="65" pos:column="26"/></operator> <literal type="char" pos:line="65" pos:column="27">'\0'<pos:position pos:line="65" pos:column="31"/></literal></expr>)<pos:position pos:line="65" pos:column="32"/></condition><then pos:line="65" pos:column="32">
  <block pos:line="66" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">FREE<pos:position pos:line="67" pos:column="9"/></name><argument_list pos:line="67" pos:column="9">(<argument><expr><operator pos:line="67" pos:column="10">&amp;<pos:position pos:line="67" pos:column="15"/></operator><name><name pos:line="67" pos:column="11">h<pos:position pos:line="67" pos:column="12"/></name><operator pos:line="67" pos:column="12">-&gt;<pos:position pos:line="67" pos:column="17"/></operator><name pos:line="67" pos:column="14">folder<pos:position pos:line="67" pos:column="20"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">FREE<pos:position pos:line="68" pos:column="9"/></name><argument_list pos:line="68" pos:column="9">(<argument><expr><operator pos:line="68" pos:column="10">&amp;<pos:position pos:line="68" pos:column="15"/></operator><name pos:line="68" pos:column="11">h<pos:position pos:line="68" pos:column="12"/></name></expr></argument>)<pos:position pos:line="68" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="14"/></expr_stmt>
    <return pos:line="69" pos:column="5">return <expr><name pos:line="69" pos:column="12">NULL<pos:position pos:line="69" pos:column="16"/></name></expr>;<pos:position pos:line="69" pos:column="17"/></return>
  }<pos:position pos:line="70" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="72" pos:column="3">path<pos:position pos:line="72" pos:column="7"/></name> <operator pos:line="72" pos:column="8">=<pos:position pos:line="72" pos:column="9"/></operator> <call><name pos:line="72" pos:column="10">mutt_hcache_per_folder<pos:position pos:line="72" pos:column="32"/></name><argument_list pos:line="72" pos:column="32">(<argument><expr><name pos:line="72" pos:column="33">path<pos:position pos:line="72" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="39">h<pos:position pos:line="72" pos:column="40"/></name><operator pos:line="72" pos:column="40">-&gt;<pos:position pos:line="72" pos:column="45"/></operator><name pos:line="72" pos:column="42">folder<pos:position pos:line="72" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="50">namer<pos:position pos:line="72" pos:column="55"/></name></expr></argument>)<pos:position pos:line="72" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="57"/></expr_stmt>

  <if pos:line="74" pos:column="3">if <condition pos:line="74" pos:column="6">(<expr><operator pos:line="74" pos:column="7">!<pos:position pos:line="74" pos:column="8"/></operator><call><name pos:line="74" pos:column="8">hcache_open<pos:position pos:line="74" pos:column="19"/></name> <argument_list pos:line="74" pos:column="20">(<argument><expr><name pos:line="74" pos:column="21">h<pos:position pos:line="74" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="24">path<pos:position pos:line="74" pos:column="28"/></name></expr></argument>)<pos:position pos:line="74" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="30"/></condition><then pos:line="74" pos:column="30">
    <block type="pseudo"><return pos:line="75" pos:column="5">return <expr><name pos:line="75" pos:column="12">h<pos:position pos:line="75" pos:column="13"/></name></expr>;<pos:position pos:line="75" pos:column="14"/></return></block></then>
  <else pos:line="76" pos:column="3">else
  <block pos:line="77" pos:column="3">{
    <comment type="block" pos:line="78" pos:column="5">/* remove a possibly incompatible version */</comment>
    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><operator pos:line="79" pos:column="9">!<pos:position pos:line="79" pos:column="10"/></operator><call><name pos:line="79" pos:column="10">stat<pos:position pos:line="79" pos:column="14"/></name> <argument_list pos:line="79" pos:column="15">(<argument><expr><name pos:line="79" pos:column="16">path<pos:position pos:line="79" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="22">&amp;<pos:position pos:line="79" pos:column="27"/></operator><name pos:line="79" pos:column="23">sb<pos:position pos:line="79" pos:column="25"/></name></expr></argument>)<pos:position pos:line="79" pos:column="26"/></argument_list></call> <operator pos:line="79" pos:column="27">&amp;&amp;<pos:position pos:line="79" pos:column="37"/></operator> <operator pos:line="79" pos:column="30">!<pos:position pos:line="79" pos:column="31"/></operator><call><name pos:line="79" pos:column="31">unlink<pos:position pos:line="79" pos:column="37"/></name> <argument_list pos:line="79" pos:column="38">(<argument><expr><name pos:line="79" pos:column="39">path<pos:position pos:line="79" pos:column="43"/></name></expr></argument>)<pos:position pos:line="79" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="45"/></condition><then pos:line="79" pos:column="45">
    <block pos:line="80" pos:column="5">{
      <if pos:line="81" pos:column="7">if <condition pos:line="81" pos:column="10">(<expr><operator pos:line="81" pos:column="11">!<pos:position pos:line="81" pos:column="12"/></operator><call><name pos:line="81" pos:column="12">hcache_open<pos:position pos:line="81" pos:column="23"/></name> <argument_list pos:line="81" pos:column="24">(<argument><expr><name pos:line="81" pos:column="25">h<pos:position pos:line="81" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="28">path<pos:position pos:line="81" pos:column="32"/></name></expr></argument>)<pos:position pos:line="81" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="34"/></condition><then pos:line="81" pos:column="34">
        <block type="pseudo"><return pos:line="82" pos:column="9">return <expr><name pos:line="82" pos:column="16">h<pos:position pos:line="82" pos:column="17"/></name></expr>;<pos:position pos:line="82" pos:column="18"/></return></block></then></if>
    }<pos:position pos:line="83" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="84" pos:column="5">FREE<pos:position pos:line="84" pos:column="9"/></name><argument_list pos:line="84" pos:column="9">(<argument><expr><operator pos:line="84" pos:column="10">&amp;<pos:position pos:line="84" pos:column="15"/></operator><name><name pos:line="84" pos:column="11">h<pos:position pos:line="84" pos:column="12"/></name><operator pos:line="84" pos:column="12">-&gt;<pos:position pos:line="84" pos:column="17"/></operator><name pos:line="84" pos:column="14">folder<pos:position pos:line="84" pos:column="20"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">FREE<pos:position pos:line="85" pos:column="9"/></name><argument_list pos:line="85" pos:column="9">(<argument><expr><operator pos:line="85" pos:column="10">&amp;<pos:position pos:line="85" pos:column="15"/></operator><name pos:line="85" pos:column="11">h<pos:position pos:line="85" pos:column="12"/></name></expr></argument>)<pos:position pos:line="85" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="14"/></expr_stmt>

    <return pos:line="87" pos:column="5">return <expr><name pos:line="87" pos:column="12">NULL<pos:position pos:line="87" pos:column="16"/></name></expr>;<pos:position pos:line="87" pos:column="17"/></return>
  }<pos:position pos:line="88" pos:column="4"/></block></else></if>
}<pos:position pos:line="89" pos:column="2"/></block></function></unit>
