<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1238_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">rfc2047_decode<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">char<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier><modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">pd<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">p<pos:position pos:line="3" pos:column="16"/></name></decl>, <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="19">q<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">m<pos:position pos:line="4" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="13">n<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">found_encoded<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><literal type="number" pos:line="5" pos:column="23">0<pos:position pos:line="5" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">d0<pos:position pos:line="6" pos:column="11"/></name></decl>, <modifier pos:line="6" pos:column="13">*<pos:position pos:line="6" pos:column="14"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="14">d<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">s<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><operator pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></operator><name pos:line="7" pos:column="20">pd<pos:position pos:line="7" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">dlen<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><operator pos:line="10" pos:column="7">!<pos:position pos:line="10" pos:column="8"/></operator><name pos:line="10" pos:column="8">s<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">||<pos:position pos:line="10" pos:column="12"/></operator> <operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><operator pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">s<pos:position pos:line="10" pos:column="16"/></name></expr>)<pos:position pos:line="10" pos:column="17"/></condition><then pos:line="10" pos:column="17">
    <block type="pseudo"><return pos:line="11" pos:column="5">return;<pos:position pos:line="11" pos:column="12"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="13" pos:column="3">dlen<pos:position pos:line="13" pos:column="7"/></name> <operator pos:line="13" pos:column="8">=<pos:position pos:line="13" pos:column="9"/></operator> <literal type="number" pos:line="13" pos:column="10">4<pos:position pos:line="13" pos:column="11"/></literal> <operator pos:line="13" pos:column="12">*<pos:position pos:line="13" pos:column="13"/></operator> <call><name pos:line="13" pos:column="14">strlen<pos:position pos:line="13" pos:column="20"/></name> <argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">s<pos:position pos:line="13" pos:column="23"/></name></expr></argument>)<pos:position pos:line="13" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt> <comment type="block" pos:line="13" pos:column="26">/* should be enough */</comment>
  <expr_stmt><expr><name pos:line="14" pos:column="3">d<pos:position pos:line="14" pos:column="4"/></name> <operator pos:line="14" pos:column="5">=<pos:position pos:line="14" pos:column="6"/></operator> <name pos:line="14" pos:column="7">d0<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <call><name pos:line="14" pos:column="12">safe_malloc<pos:position pos:line="14" pos:column="23"/></name> <argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">dlen<pos:position pos:line="14" pos:column="29"/></name> <operator pos:line="14" pos:column="30">+<pos:position pos:line="14" pos:column="31"/></operator> <literal type="number" pos:line="14" pos:column="32">1<pos:position pos:line="14" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>

  <while pos:line="16" pos:column="3">while <condition pos:line="16" pos:column="9">(<expr><operator pos:line="16" pos:column="10">*<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">s<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">&amp;&amp;<pos:position pos:line="16" pos:column="23"/></operator> <name pos:line="16" pos:column="16">dlen<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">&gt;<pos:position pos:line="16" pos:column="25"/></operator> <literal type="number" pos:line="16" pos:column="23">0<pos:position pos:line="16" pos:column="24"/></literal></expr>)<pos:position pos:line="16" pos:column="25"/></condition>
  <block pos:line="17" pos:column="3">{
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">!<pos:position pos:line="18" pos:column="10"/></operator><operator pos:line="18" pos:column="10">(<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">p<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <call><name pos:line="18" pos:column="15">find_encoded_word<pos:position pos:line="18" pos:column="32"/></name> <argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">s<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="37">&amp;<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="38">q<pos:position pos:line="18" pos:column="39"/></name></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call><operator pos:line="18" pos:column="40">)<pos:position pos:line="18" pos:column="41"/></operator></expr>)<pos:position pos:line="18" pos:column="42"/></condition><then pos:line="18" pos:column="42">
    <block pos:line="19" pos:column="5">{
      <comment type="block" pos:line="20" pos:column="7">/* no encoded words */</comment>
      <if pos:line="21" pos:column="7">if <condition pos:line="21" pos:column="10">(<expr><call><name pos:line="21" pos:column="11">option<pos:position pos:line="21" pos:column="17"/></name> <argument_list pos:line="21" pos:column="18">(<argument><expr><name pos:line="21" pos:column="19">OPTIGNORELWS<pos:position pos:line="21" pos:column="31"/></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="33"/></condition><then pos:line="21" pos:column="33">
      <block pos:line="22" pos:column="7">{
        <expr_stmt><expr><name pos:line="23" pos:column="9">n<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <call><name pos:line="23" pos:column="13">mutt_strlen<pos:position pos:line="23" pos:column="24"/></name> <argument_list pos:line="23" pos:column="25">(<argument><expr><name pos:line="23" pos:column="26">s<pos:position pos:line="23" pos:column="27"/></name></expr></argument>)<pos:position pos:line="23" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">found_encoded<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">&amp;&amp;<pos:position pos:line="24" pos:column="37"/></operator> <operator pos:line="24" pos:column="30">(<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="31">m<pos:position pos:line="24" pos:column="32"/></name> <operator pos:line="24" pos:column="33">=<pos:position pos:line="24" pos:column="34"/></operator> <call><name pos:line="24" pos:column="35">lwslen<pos:position pos:line="24" pos:column="41"/></name> <argument_list pos:line="24" pos:column="42">(<argument><expr><name pos:line="24" pos:column="43">s<pos:position pos:line="24" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="46">n<pos:position pos:line="24" pos:column="47"/></name></expr></argument>)<pos:position pos:line="24" pos:column="48"/></argument_list></call><operator pos:line="24" pos:column="48">)<pos:position pos:line="24" pos:column="49"/></operator> <operator pos:line="24" pos:column="50">!=<pos:position pos:line="24" pos:column="52"/></operator> <literal type="number" pos:line="24" pos:column="53">0<pos:position pos:line="24" pos:column="54"/></literal></expr>)<pos:position pos:line="24" pos:column="55"/></condition><then pos:line="24" pos:column="55">
        <block pos:line="25" pos:column="9">{
          <if pos:line="26" pos:column="11">if <condition pos:line="26" pos:column="14">(<expr><name pos:line="26" pos:column="15">m<pos:position pos:line="26" pos:column="16"/></name> <operator pos:line="26" pos:column="17">!=<pos:position pos:line="26" pos:column="19"/></operator> <name pos:line="26" pos:column="20">n<pos:position pos:line="26" pos:column="21"/></name></expr>)<pos:position pos:line="26" pos:column="22"/></condition><then pos:line="26" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="27" pos:column="13">*<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">d<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <literal type="char" pos:line="27" pos:column="18">' '<pos:position pos:line="27" pos:column="21"/></literal></expr><operator pos:line="27" pos:column="21">,<pos:position pos:line="27" pos:column="22"/></operator> <expr><name pos:line="27" pos:column="23">d<pos:position pos:line="27" pos:column="24"/></name><operator pos:line="27" pos:column="24">++<pos:position pos:line="27" pos:column="26"/></operator></expr><operator pos:line="27" pos:column="26">,<pos:position pos:line="27" pos:column="27"/></operator> <expr><name pos:line="27" pos:column="28">dlen<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">--<pos:position pos:line="27" pos:column="34"/></operator></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt></block></then></if>
          <expr_stmt><expr><name pos:line="28" pos:column="11">s<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">+=<pos:position pos:line="28" pos:column="15"/></operator> <name pos:line="28" pos:column="16">m<pos:position pos:line="28" pos:column="17"/></name></expr>;<pos:position pos:line="28" pos:column="18"/></expr_stmt>
        }<pos:position pos:line="29" pos:column="10"/></block></then></if>
      }<pos:position pos:line="30" pos:column="8"/></block></then></if>
      <if pos:line="31" pos:column="7">if <condition pos:line="31" pos:column="10">(<expr><name pos:line="31" pos:column="11">AssumedCharset<pos:position pos:line="31" pos:column="25"/></name> <operator pos:line="31" pos:column="26">&amp;&amp;<pos:position pos:line="31" pos:column="36"/></operator> <operator pos:line="31" pos:column="29">*<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="30">AssumedCharset<pos:position pos:line="31" pos:column="44"/></name></expr>)<pos:position pos:line="31" pos:column="45"/></condition><then pos:line="31" pos:column="45">
      <block pos:line="32" pos:column="7">{
	<decl_stmt><decl><type><name pos:line="33" pos:column="9">char<pos:position pos:line="33" pos:column="13"/></name> <modifier pos:line="33" pos:column="14">*<pos:position pos:line="33" pos:column="15"/></modifier></type><name pos:line="33" pos:column="15">t<pos:position pos:line="33" pos:column="16"/></name></decl>;<pos:position pos:line="33" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="34" pos:column="9">size_t<pos:position pos:line="34" pos:column="15"/></name></type> <name pos:line="34" pos:column="16">tlen<pos:position pos:line="34" pos:column="20"/></name></decl>;<pos:position pos:line="34" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><name pos:line="36" pos:column="9">n<pos:position pos:line="36" pos:column="10"/></name> <operator pos:line="36" pos:column="11">=<pos:position pos:line="36" pos:column="12"/></operator> <call><name pos:line="36" pos:column="13">mutt_strlen<pos:position pos:line="36" pos:column="24"/></name> <argument_list pos:line="36" pos:column="25">(<argument><expr><name pos:line="36" pos:column="26">s<pos:position pos:line="36" pos:column="27"/></name></expr></argument>)<pos:position pos:line="36" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name pos:line="37" pos:column="9">t<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">=<pos:position pos:line="37" pos:column="12"/></operator> <call><name pos:line="37" pos:column="13">safe_malloc<pos:position pos:line="37" pos:column="24"/></name> <argument_list pos:line="37" pos:column="25">(<argument><expr><name pos:line="37" pos:column="26">n<pos:position pos:line="37" pos:column="27"/></name> <operator pos:line="37" pos:column="28">+<pos:position pos:line="37" pos:column="29"/></operator> <literal type="number" pos:line="37" pos:column="30">1<pos:position pos:line="37" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">strfcpy<pos:position pos:line="38" pos:column="16"/></name> <argument_list pos:line="38" pos:column="17">(<argument><expr><name pos:line="38" pos:column="18">t<pos:position pos:line="38" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="21">s<pos:position pos:line="38" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="24">n<pos:position pos:line="38" pos:column="25"/></name> <operator pos:line="38" pos:column="26">+<pos:position pos:line="38" pos:column="27"/></operator> <literal type="number" pos:line="38" pos:column="28">1<pos:position pos:line="38" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">convert_nonmime_string<pos:position pos:line="39" pos:column="31"/></name> <argument_list pos:line="39" pos:column="32">(<argument><expr><operator pos:line="39" pos:column="33">&amp;<pos:position pos:line="39" pos:column="38"/></operator><name pos:line="39" pos:column="34">t<pos:position pos:line="39" pos:column="35"/></name></expr></argument>)<pos:position pos:line="39" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name pos:line="40" pos:column="9">tlen<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <call><name pos:line="40" pos:column="16">mutt_strlen<pos:position pos:line="40" pos:column="27"/></name> <argument_list pos:line="40" pos:column="28">(<argument><expr><name pos:line="40" pos:column="29">t<pos:position pos:line="40" pos:column="30"/></name></expr></argument>)<pos:position pos:line="40" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">strncpy<pos:position pos:line="41" pos:column="16"/></name> <argument_list pos:line="41" pos:column="17">(<argument><expr><name pos:line="41" pos:column="18">d<pos:position pos:line="41" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="21">t<pos:position pos:line="41" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="24">tlen<pos:position pos:line="41" pos:column="28"/></name></expr></argument>)<pos:position pos:line="41" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name pos:line="42" pos:column="9">d<pos:position pos:line="42" pos:column="10"/></name> <operator pos:line="42" pos:column="11">+=<pos:position pos:line="42" pos:column="13"/></operator> <name pos:line="42" pos:column="14">tlen<pos:position pos:line="42" pos:column="18"/></name></expr>;<pos:position pos:line="42" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">FREE<pos:position pos:line="43" pos:column="13"/></name> <argument_list pos:line="43" pos:column="14">(<argument><expr><operator pos:line="43" pos:column="15">&amp;<pos:position pos:line="43" pos:column="20"/></operator><name pos:line="43" pos:column="16">t<pos:position pos:line="43" pos:column="17"/></name></expr></argument>)<pos:position pos:line="43" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="19"/></expr_stmt>
	<break pos:line="44" pos:column="9">break;<pos:position pos:line="44" pos:column="15"/></break>
      }<pos:position pos:line="45" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">strncpy<pos:position pos:line="46" pos:column="14"/></name> <argument_list pos:line="46" pos:column="15">(<argument><expr><name pos:line="46" pos:column="16">d<pos:position pos:line="46" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="19">s<pos:position pos:line="46" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="22">dlen<pos:position pos:line="46" pos:column="26"/></name></expr></argument>)<pos:position pos:line="46" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name pos:line="47" pos:column="7">d<pos:position pos:line="47" pos:column="8"/></name> <operator pos:line="47" pos:column="9">+=<pos:position pos:line="47" pos:column="11"/></operator> <name pos:line="47" pos:column="12">dlen<pos:position pos:line="47" pos:column="16"/></name></expr>;<pos:position pos:line="47" pos:column="17"/></expr_stmt>
      <break pos:line="48" pos:column="7">break;<pos:position pos:line="48" pos:column="13"/></break>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><name pos:line="51" pos:column="9">p<pos:position pos:line="51" pos:column="10"/></name> <operator pos:line="51" pos:column="11">!=<pos:position pos:line="51" pos:column="13"/></operator> <name pos:line="51" pos:column="14">s<pos:position pos:line="51" pos:column="15"/></name></expr>)<pos:position pos:line="51" pos:column="16"/></condition><then pos:line="51" pos:column="16">
    <block pos:line="52" pos:column="5">{
      <expr_stmt><expr><name pos:line="53" pos:column="7">n<pos:position pos:line="53" pos:column="8"/></name> <operator pos:line="53" pos:column="9">=<pos:position pos:line="53" pos:column="10"/></operator> <call pos:line="53" pos:column="11">(<name pos:line="53" pos:column="12">size_t<pos:position pos:line="53" pos:column="18"/></name>) <argument_list pos:line="53" pos:column="20">(<argument><expr><name pos:line="53" pos:column="21">p<pos:position pos:line="53" pos:column="22"/></name> <operator pos:line="53" pos:column="23">-<pos:position pos:line="53" pos:column="24"/></operator> <name pos:line="53" pos:column="25">s<pos:position pos:line="53" pos:column="26"/></name></expr></argument>)<pos:position pos:line="53" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="28"/></expr_stmt>
      <comment type="block" pos:line="54" pos:column="7">/* ignore spaces between encoded word
       * and linear-white-space between encoded word and *text */</comment>
      <if pos:line="56" pos:column="7">if <condition pos:line="56" pos:column="10">(<expr><call><name pos:line="56" pos:column="11">option<pos:position pos:line="56" pos:column="17"/></name> <argument_list pos:line="56" pos:column="18">(<argument><expr><name pos:line="56" pos:column="19">OPTIGNORELWS<pos:position pos:line="56" pos:column="31"/></name></expr></argument>)<pos:position pos:line="56" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="33"/></condition><then pos:line="56" pos:column="33">
      <block pos:line="57" pos:column="7">{
        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">found_encoded<pos:position pos:line="58" pos:column="26"/></name> <operator pos:line="58" pos:column="27">&amp;&amp;<pos:position pos:line="58" pos:column="37"/></operator> <operator pos:line="58" pos:column="30">(<pos:position pos:line="58" pos:column="31"/></operator><name pos:line="58" pos:column="31">m<pos:position pos:line="58" pos:column="32"/></name> <operator pos:line="58" pos:column="33">=<pos:position pos:line="58" pos:column="34"/></operator> <call><name pos:line="58" pos:column="35">lwslen<pos:position pos:line="58" pos:column="41"/></name> <argument_list pos:line="58" pos:column="42">(<argument><expr><name pos:line="58" pos:column="43">s<pos:position pos:line="58" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="46">n<pos:position pos:line="58" pos:column="47"/></name></expr></argument>)<pos:position pos:line="58" pos:column="48"/></argument_list></call><operator pos:line="58" pos:column="48">)<pos:position pos:line="58" pos:column="49"/></operator> <operator pos:line="58" pos:column="50">!=<pos:position pos:line="58" pos:column="52"/></operator> <literal type="number" pos:line="58" pos:column="53">0<pos:position pos:line="58" pos:column="54"/></literal></expr>)<pos:position pos:line="58" pos:column="55"/></condition><then pos:line="58" pos:column="55">
        <block pos:line="59" pos:column="9">{
          <if pos:line="60" pos:column="11">if <condition pos:line="60" pos:column="14">(<expr><name pos:line="60" pos:column="15">m<pos:position pos:line="60" pos:column="16"/></name> <operator pos:line="60" pos:column="17">!=<pos:position pos:line="60" pos:column="19"/></operator> <name pos:line="60" pos:column="20">n<pos:position pos:line="60" pos:column="21"/></name></expr>)<pos:position pos:line="60" pos:column="22"/></condition><then pos:line="60" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="61" pos:column="13">*<pos:position pos:line="61" pos:column="14"/></operator><name pos:line="61" pos:column="14">d<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">=<pos:position pos:line="61" pos:column="17"/></operator> <literal type="char" pos:line="61" pos:column="18">' '<pos:position pos:line="61" pos:column="21"/></literal></expr><operator pos:line="61" pos:column="21">,<pos:position pos:line="61" pos:column="22"/></operator> <expr><name pos:line="61" pos:column="23">d<pos:position pos:line="61" pos:column="24"/></name><operator pos:line="61" pos:column="24">++<pos:position pos:line="61" pos:column="26"/></operator></expr><operator pos:line="61" pos:column="26">,<pos:position pos:line="61" pos:column="27"/></operator> <expr><name pos:line="61" pos:column="28">dlen<pos:position pos:line="61" pos:column="32"/></name><operator pos:line="61" pos:column="32">--<pos:position pos:line="61" pos:column="34"/></operator></expr>;<pos:position pos:line="61" pos:column="35"/></expr_stmt></block></then></if>
          <expr_stmt><expr><name pos:line="62" pos:column="11">n<pos:position pos:line="62" pos:column="12"/></name> <operator pos:line="62" pos:column="13">-=<pos:position pos:line="62" pos:column="15"/></operator> <name pos:line="62" pos:column="16">m<pos:position pos:line="62" pos:column="17"/></name></expr><operator pos:line="62" pos:column="17">,<pos:position pos:line="62" pos:column="18"/></operator> <expr><name pos:line="62" pos:column="19">s<pos:position pos:line="62" pos:column="20"/></name> <operator pos:line="62" pos:column="21">+=<pos:position pos:line="62" pos:column="23"/></operator> <name pos:line="62" pos:column="24">m<pos:position pos:line="62" pos:column="25"/></name></expr>;<pos:position pos:line="62" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="63" pos:column="10"/></block></then></if>

        <if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><operator pos:line="65" pos:column="13">(<pos:position pos:line="65" pos:column="14"/></operator><name pos:line="65" pos:column="14">m<pos:position pos:line="65" pos:column="15"/></name> <operator pos:line="65" pos:column="16">=<pos:position pos:line="65" pos:column="17"/></operator> <name pos:line="65" pos:column="18">n<pos:position pos:line="65" pos:column="19"/></name> <operator pos:line="65" pos:column="20">-<pos:position pos:line="65" pos:column="21"/></operator> <call><name pos:line="65" pos:column="22">lwsrlen<pos:position pos:line="65" pos:column="29"/></name> <argument_list pos:line="65" pos:column="30">(<argument><expr><name pos:line="65" pos:column="31">s<pos:position pos:line="65" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="34">n<pos:position pos:line="65" pos:column="35"/></name></expr></argument>)<pos:position pos:line="65" pos:column="36"/></argument_list></call><operator pos:line="65" pos:column="36">)<pos:position pos:line="65" pos:column="37"/></operator> <operator pos:line="65" pos:column="38">!=<pos:position pos:line="65" pos:column="40"/></operator> <literal type="number" pos:line="65" pos:column="41">0<pos:position pos:line="65" pos:column="42"/></literal></expr>)<pos:position pos:line="65" pos:column="43"/></condition><then pos:line="65" pos:column="43">
        <block pos:line="66" pos:column="9">{
          <if pos:line="67" pos:column="11">if <condition pos:line="67" pos:column="14">(<expr><name pos:line="67" pos:column="15">m<pos:position pos:line="67" pos:column="16"/></name> <operator pos:line="67" pos:column="17">&gt;<pos:position pos:line="67" pos:column="21"/></operator> <name pos:line="67" pos:column="19">dlen<pos:position pos:line="67" pos:column="23"/></name></expr>)<pos:position pos:line="67" pos:column="24"/></condition><then pos:line="67" pos:column="24">
            <block type="pseudo"><expr_stmt><expr><name pos:line="68" pos:column="13">m<pos:position pos:line="68" pos:column="14"/></name> <operator pos:line="68" pos:column="15">=<pos:position pos:line="68" pos:column="16"/></operator> <name pos:line="68" pos:column="17">dlen<pos:position pos:line="68" pos:column="21"/></name></expr>;<pos:position pos:line="68" pos:column="22"/></expr_stmt></block></then></if>
          <expr_stmt><expr><call><name pos:line="69" pos:column="11">memcpy<pos:position pos:line="69" pos:column="17"/></name> <argument_list pos:line="69" pos:column="18">(<argument><expr><name pos:line="69" pos:column="19">d<pos:position pos:line="69" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="22">s<pos:position pos:line="69" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="25">m<pos:position pos:line="69" pos:column="26"/></name></expr></argument>)<pos:position pos:line="69" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="28"/></expr_stmt>
          <expr_stmt><expr><name pos:line="70" pos:column="11">d<pos:position pos:line="70" pos:column="12"/></name> <operator pos:line="70" pos:column="13">+=<pos:position pos:line="70" pos:column="15"/></operator> <name pos:line="70" pos:column="16">m<pos:position pos:line="70" pos:column="17"/></name></expr>;<pos:position pos:line="70" pos:column="18"/></expr_stmt>
          <expr_stmt><expr><name pos:line="71" pos:column="11">dlen<pos:position pos:line="71" pos:column="15"/></name> <operator pos:line="71" pos:column="16">-=<pos:position pos:line="71" pos:column="18"/></operator> <name pos:line="71" pos:column="19">m<pos:position pos:line="71" pos:column="20"/></name></expr>;<pos:position pos:line="71" pos:column="21"/></expr_stmt>
          <if pos:line="72" pos:column="11">if <condition pos:line="72" pos:column="14">(<expr><name pos:line="72" pos:column="15">m<pos:position pos:line="72" pos:column="16"/></name> <operator pos:line="72" pos:column="17">!=<pos:position pos:line="72" pos:column="19"/></operator> <name pos:line="72" pos:column="20">n<pos:position pos:line="72" pos:column="21"/></name></expr>)<pos:position pos:line="72" pos:column="22"/></condition><then pos:line="72" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="73" pos:column="13">*<pos:position pos:line="73" pos:column="14"/></operator><name pos:line="73" pos:column="14">d<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">=<pos:position pos:line="73" pos:column="17"/></operator> <literal type="char" pos:line="73" pos:column="18">' '<pos:position pos:line="73" pos:column="21"/></literal></expr><operator pos:line="73" pos:column="21">,<pos:position pos:line="73" pos:column="22"/></operator> <expr><name pos:line="73" pos:column="23">d<pos:position pos:line="73" pos:column="24"/></name><operator pos:line="73" pos:column="24">++<pos:position pos:line="73" pos:column="26"/></operator></expr><operator pos:line="73" pos:column="26">,<pos:position pos:line="73" pos:column="27"/></operator> <expr><name pos:line="73" pos:column="28">dlen<pos:position pos:line="73" pos:column="32"/></name><operator pos:line="73" pos:column="32">--<pos:position pos:line="73" pos:column="34"/></operator></expr>;<pos:position pos:line="73" pos:column="35"/></expr_stmt></block></then></if>
        }<pos:position pos:line="74" pos:column="10"/></block></then></if>
      }<pos:position pos:line="75" pos:column="8"/></block></then>
      <elseif pos:line="76" pos:column="7">else <if pos:line="76" pos:column="12">if <condition pos:line="76" pos:column="15">(<expr><operator pos:line="76" pos:column="16">!<pos:position pos:line="76" pos:column="17"/></operator><name pos:line="76" pos:column="17">found_encoded<pos:position pos:line="76" pos:column="30"/></name> <operator pos:line="76" pos:column="31">||<pos:position pos:line="76" pos:column="33"/></operator> <call><name pos:line="76" pos:column="34">strspn<pos:position pos:line="76" pos:column="40"/></name> <argument_list pos:line="76" pos:column="41">(<argument><expr><name pos:line="76" pos:column="42">s<pos:position pos:line="76" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="45">" \t\r\n"<pos:position pos:line="76" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="55"/></argument_list></call> <operator pos:line="76" pos:column="56">!=<pos:position pos:line="76" pos:column="58"/></operator> <name pos:line="76" pos:column="59">n<pos:position pos:line="76" pos:column="60"/></name></expr>)<pos:position pos:line="76" pos:column="61"/></condition><then pos:line="76" pos:column="61">
      <block pos:line="77" pos:column="7">{
	<if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><name pos:line="78" pos:column="13">n<pos:position pos:line="78" pos:column="14"/></name> <operator pos:line="78" pos:column="15">&gt;<pos:position pos:line="78" pos:column="19"/></operator> <name pos:line="78" pos:column="17">dlen<pos:position pos:line="78" pos:column="21"/></name></expr>)<pos:position pos:line="78" pos:column="22"/></condition><then pos:line="78" pos:column="22">
	  <block type="pseudo"><expr_stmt><expr><name pos:line="79" pos:column="11">n<pos:position pos:line="79" pos:column="12"/></name> <operator pos:line="79" pos:column="13">=<pos:position pos:line="79" pos:column="14"/></operator> <name pos:line="79" pos:column="15">dlen<pos:position pos:line="79" pos:column="19"/></name></expr>;<pos:position pos:line="79" pos:column="20"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="80" pos:column="9">memcpy<pos:position pos:line="80" pos:column="15"/></name> <argument_list pos:line="80" pos:column="16">(<argument><expr><name pos:line="80" pos:column="17">d<pos:position pos:line="80" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="20">s<pos:position pos:line="80" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="23">n<pos:position pos:line="80" pos:column="24"/></name></expr></argument>)<pos:position pos:line="80" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name pos:line="81" pos:column="9">d<pos:position pos:line="81" pos:column="10"/></name> <operator pos:line="81" pos:column="11">+=<pos:position pos:line="81" pos:column="13"/></operator> <name pos:line="81" pos:column="14">n<pos:position pos:line="81" pos:column="15"/></name></expr>;<pos:position pos:line="81" pos:column="16"/></expr_stmt>
	<expr_stmt><expr><name pos:line="82" pos:column="9">dlen<pos:position pos:line="82" pos:column="13"/></name> <operator pos:line="82" pos:column="14">-=<pos:position pos:line="82" pos:column="16"/></operator> <name pos:line="82" pos:column="17">n<pos:position pos:line="82" pos:column="18"/></name></expr>;<pos:position pos:line="82" pos:column="19"/></expr_stmt>
      }<pos:position pos:line="83" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="84" pos:column="6"/></block></then></if>

    <if pos:line="86" pos:column="5">if <condition pos:line="86" pos:column="8">(<expr><call><name pos:line="86" pos:column="9">rfc2047_decode_word<pos:position pos:line="86" pos:column="28"/></name> <argument_list pos:line="86" pos:column="29">(<argument><expr><name pos:line="86" pos:column="30">d<pos:position pos:line="86" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="33">p<pos:position pos:line="86" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="36">dlen<pos:position pos:line="86" pos:column="40"/></name></expr></argument>)<pos:position pos:line="86" pos:column="41"/></argument_list></call> <operator pos:line="86" pos:column="42">==<pos:position pos:line="86" pos:column="44"/></operator> <operator pos:line="86" pos:column="45">-<pos:position pos:line="86" pos:column="46"/></operator><literal type="number" pos:line="86" pos:column="46">1<pos:position pos:line="86" pos:column="47"/></literal></expr>)<pos:position pos:line="86" pos:column="48"/></condition><then pos:line="86" pos:column="48">
    <block pos:line="87" pos:column="5">{
      <comment type="block" pos:line="88" pos:column="7">/* could not decode word, fall back to displaying the raw string */</comment>
      <expr_stmt><expr><call><name pos:line="89" pos:column="7">strfcpy<pos:position pos:line="89" pos:column="14"/></name><argument_list pos:line="89" pos:column="14">(<argument><expr><name pos:line="89" pos:column="15">d<pos:position pos:line="89" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="18">p<pos:position pos:line="89" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="21">dlen<pos:position pos:line="89" pos:column="25"/></name></expr></argument>)<pos:position pos:line="89" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="90" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="91" pos:column="5">found_encoded<pos:position pos:line="91" pos:column="18"/></name> <operator pos:line="91" pos:column="19">=<pos:position pos:line="91" pos:column="20"/></operator> <literal type="number" pos:line="91" pos:column="21">1<pos:position pos:line="91" pos:column="22"/></literal></expr>;<pos:position pos:line="91" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="92" pos:column="5">s<pos:position pos:line="92" pos:column="6"/></name> <operator pos:line="92" pos:column="7">=<pos:position pos:line="92" pos:column="8"/></operator> <name pos:line="92" pos:column="9">q<pos:position pos:line="92" pos:column="10"/></name></expr>;<pos:position pos:line="92" pos:column="11"/></expr_stmt>
    <expr_stmt><expr><name pos:line="93" pos:column="5">n<pos:position pos:line="93" pos:column="6"/></name> <operator pos:line="93" pos:column="7">=<pos:position pos:line="93" pos:column="8"/></operator> <call><name pos:line="93" pos:column="9">mutt_strlen<pos:position pos:line="93" pos:column="20"/></name> <argument_list pos:line="93" pos:column="21">(<argument><expr><name pos:line="93" pos:column="22">d<pos:position pos:line="93" pos:column="23"/></name></expr></argument>)<pos:position pos:line="93" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="94" pos:column="5">dlen<pos:position pos:line="94" pos:column="9"/></name> <operator pos:line="94" pos:column="10">-=<pos:position pos:line="94" pos:column="12"/></operator> <name pos:line="94" pos:column="13">n<pos:position pos:line="94" pos:column="14"/></name></expr>;<pos:position pos:line="94" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="95" pos:column="5">d<pos:position pos:line="95" pos:column="6"/></name> <operator pos:line="95" pos:column="7">+=<pos:position pos:line="95" pos:column="9"/></operator> <name pos:line="95" pos:column="10">n<pos:position pos:line="95" pos:column="11"/></name></expr>;<pos:position pos:line="95" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="96" pos:column="4"/></block></while>
  <expr_stmt><expr><operator pos:line="97" pos:column="3">*<pos:position pos:line="97" pos:column="4"/></operator><name pos:line="97" pos:column="4">d<pos:position pos:line="97" pos:column="5"/></name> <operator pos:line="97" pos:column="6">=<pos:position pos:line="97" pos:column="7"/></operator> <literal type="number" pos:line="97" pos:column="8">0<pos:position pos:line="97" pos:column="9"/></literal></expr>;<pos:position pos:line="97" pos:column="10"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="99" pos:column="3">FREE<pos:position pos:line="99" pos:column="7"/></name> <argument_list pos:line="99" pos:column="8">(<argument><expr><name pos:line="99" pos:column="9">pd<pos:position pos:line="99" pos:column="11"/></name></expr></argument>)<pos:position pos:line="99" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="13"/></expr_stmt>		<comment type="block" pos:line="99" pos:column="25">/* __FREE_CHECKED__ */</comment>
  <expr_stmt><expr><operator pos:line="100" pos:column="3">*<pos:position pos:line="100" pos:column="4"/></operator><name pos:line="100" pos:column="4">pd<pos:position pos:line="100" pos:column="6"/></name> <operator pos:line="100" pos:column="7">=<pos:position pos:line="100" pos:column="8"/></operator> <name pos:line="100" pos:column="9">d0<pos:position pos:line="100" pos:column="11"/></name></expr>;<pos:position pos:line="100" pos:column="12"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="101" pos:column="3">mutt_str_adjust<pos:position pos:line="101" pos:column="18"/></name> <argument_list pos:line="101" pos:column="19">(<argument><expr><name pos:line="101" pos:column="20">pd<pos:position pos:line="101" pos:column="22"/></name></expr></argument>)<pos:position pos:line="101" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="24"/></expr_stmt>
}<pos:position pos:line="102" pos:column="2"/></block></function></unit>
