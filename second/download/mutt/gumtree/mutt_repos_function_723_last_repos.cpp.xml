<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_723_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_micalg<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">gpgme_ctx_t<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">ctx<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">int<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">use_smime<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">char<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">buf<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">size_t<pos:position pos:line="1" pos:column="73"/></name></type> <name pos:line="1" pos:column="74">buflen<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="81"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">gpgme_sign_result_t<pos:position pos:line="3" pos:column="22"/></name></type> <name pos:line="3" pos:column="23">result<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><name pos:line="3" pos:column="32">NULL<pos:position pos:line="3" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">algorithm_name<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><name pos:line="4" pos:column="32">NULL<pos:position pos:line="4" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">buflen<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">&lt;<pos:position pos:line="6" pos:column="18"/></operator> <literal type="number" pos:line="6" pos:column="16">5<pos:position pos:line="6" pos:column="17"/></literal></expr>)<pos:position pos:line="6" pos:column="18"/></condition><then pos:line="6" pos:column="18">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">-<pos:position pos:line="7" pos:column="13"/></operator><literal type="number" pos:line="7" pos:column="13">1<pos:position pos:line="7" pos:column="14"/></literal></expr>;<pos:position pos:line="7" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><operator pos:line="9" pos:column="3">*<pos:position pos:line="9" pos:column="4"/></operator><name pos:line="9" pos:column="4">buf<pos:position pos:line="9" pos:column="7"/></name> <operator pos:line="9" pos:column="8">=<pos:position pos:line="9" pos:column="9"/></operator> <literal type="number" pos:line="9" pos:column="10">0<pos:position pos:line="9" pos:column="11"/></literal></expr>;<pos:position pos:line="9" pos:column="12"/></expr_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">result<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <call><name pos:line="10" pos:column="12">gpgme_op_sign_result<pos:position pos:line="10" pos:column="32"/></name> <argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">ctx<pos:position pos:line="10" pos:column="37"/></name></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="39"/></expr_stmt>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">result<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">&amp;&amp;<pos:position pos:line="11" pos:column="24"/></operator> <name><name pos:line="11" pos:column="17">result<pos:position pos:line="11" pos:column="23"/></name><operator pos:line="11" pos:column="23">-&gt;<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="25">signatures<pos:position pos:line="11" pos:column="35"/></name></name></expr>)<pos:position pos:line="11" pos:column="36"/></condition><then pos:line="11" pos:column="36">
  <block pos:line="12" pos:column="3">{
    <expr_stmt><expr><name pos:line="13" pos:column="5">algorithm_name<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">=<pos:position pos:line="13" pos:column="21"/></operator> <call><name pos:line="13" pos:column="22">gpgme_hash_algo_name<pos:position pos:line="13" pos:column="42"/></name> <argument_list pos:line="13" pos:column="43">(<argument><expr><name><name pos:line="13" pos:column="44">result<pos:position pos:line="13" pos:column="50"/></name><operator pos:line="13" pos:column="50">-&gt;<pos:position pos:line="13" pos:column="55"/></operator><name pos:line="13" pos:column="52">signatures<pos:position pos:line="13" pos:column="62"/></name><operator pos:line="13" pos:column="62">-&gt;<pos:position pos:line="13" pos:column="67"/></operator><name pos:line="13" pos:column="64">hash_algo<pos:position pos:line="13" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="75"/></expr_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">algorithm_name<pos:position pos:line="14" pos:column="23"/></name></expr>)<pos:position pos:line="14" pos:column="24"/></condition><then pos:line="14" pos:column="24">
    <block pos:line="15" pos:column="5">{
      <if pos:line="16" pos:column="7">if <condition pos:line="16" pos:column="10">(<expr><name pos:line="16" pos:column="11">use_smime<pos:position pos:line="16" pos:column="20"/></name></expr>)<pos:position pos:line="16" pos:column="21"/></condition><then pos:line="16" pos:column="21">
      <block pos:line="17" pos:column="7">{
        <comment type="block" pos:line="18" pos:column="9">/* convert GPGME raw hash name to RFC 2633 format */</comment>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">snprintf<pos:position pos:line="19" pos:column="17"/></name> <argument_list pos:line="19" pos:column="18">(<argument><expr><name pos:line="19" pos:column="19">buf<pos:position pos:line="19" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="24">buflen<pos:position pos:line="19" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="32">"%s"<pos:position pos:line="19" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="38">algorithm_name<pos:position pos:line="19" pos:column="52"/></name></expr></argument>)<pos:position pos:line="19" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">ascii_strlower<pos:position pos:line="20" pos:column="23"/></name> <argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">buf<pos:position pos:line="20" pos:column="28"/></name></expr></argument>)<pos:position pos:line="20" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="21" pos:column="8"/></block></then> <else pos:line="21" pos:column="9">else <block pos:line="21" pos:column="14">{
        <comment type="block" pos:line="22" pos:column="9">/* convert GPGME raw hash name to RFC 3156 format */</comment>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">snprintf<pos:position pos:line="23" pos:column="17"/></name> <argument_list pos:line="23" pos:column="18">(<argument><expr><name pos:line="23" pos:column="19">buf<pos:position pos:line="23" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="24">buflen<pos:position pos:line="23" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="32">"pgp-%s"<pos:position pos:line="23" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="42">algorithm_name<pos:position pos:line="23" pos:column="56"/></name></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">ascii_strlower<pos:position pos:line="24" pos:column="23"/></name> <argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">buf<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">+<pos:position pos:line="24" pos:column="30"/></operator> <literal type="number" pos:line="24" pos:column="31">4<pos:position pos:line="24" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
      }<pos:position pos:line="25" pos:column="8"/></block></else></if>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>

  <return pos:line="29" pos:column="3">return <expr><ternary><condition><expr><operator pos:line="29" pos:column="10">*<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="11">buf<pos:position pos:line="29" pos:column="14"/></name></expr>?<pos:position pos:line="29" pos:column="15"/></condition><then pos:line="29" pos:column="15"> <expr><literal type="number" pos:line="29" pos:column="16">0<pos:position pos:line="29" pos:column="17"/></literal></expr></then><else pos:line="29" pos:column="17">:<expr><operator pos:line="29" pos:column="18">-<pos:position pos:line="29" pos:column="19"/></operator><literal type="number" pos:line="29" pos:column="19">1<pos:position pos:line="29" pos:column="20"/></literal></expr></else></ternary></expr>;<pos:position pos:line="29" pos:column="21"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
