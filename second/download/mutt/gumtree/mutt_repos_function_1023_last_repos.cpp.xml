<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1023_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">mutt_decode_xbit<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">STATE<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">s<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">long<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">len<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">int<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">istext<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="63">iconv_t<pos:position pos:line="1" pos:column="70"/></name></type> <name pos:line="1" pos:column="71">cd<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">c<pos:position pos:line="3" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="10">ch<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">bufi<pos:position pos:line="4" pos:column="12"/></name><index pos:line="4" pos:column="12">[<expr><name pos:line="4" pos:column="13">BUFI_SIZE<pos:position pos:line="4" pos:column="22"/></name></expr>]<pos:position pos:line="4" pos:column="23"/></index></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">l<pos:position pos:line="5" pos:column="11"/></name> <init pos:line="5" pos:column="12">= <expr><literal type="number" pos:line="5" pos:column="14">0<pos:position pos:line="5" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">istext<pos:position pos:line="7" pos:column="13"/></name></expr>)<pos:position pos:line="7" pos:column="14"/></condition><then pos:line="7" pos:column="14">
  <block pos:line="8" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">state_set_prefix<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><name pos:line="9" pos:column="22">s<pos:position pos:line="9" pos:column="23"/></name></expr></argument>)<pos:position pos:line="9" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt>

    <while pos:line="11" pos:column="5">while <condition pos:line="11" pos:column="11">(<expr><operator pos:line="11" pos:column="12">(<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="13">c<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <call><name pos:line="11" pos:column="17">fgetc<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name><name pos:line="11" pos:column="23">s<pos:position pos:line="11" pos:column="24"/></name><operator pos:line="11" pos:column="24">-&gt;<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="26">fpin<pos:position pos:line="11" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call><operator pos:line="11" pos:column="31">)<pos:position pos:line="11" pos:column="32"/></operator> <operator pos:line="11" pos:column="33">!=<pos:position pos:line="11" pos:column="35"/></operator> <name pos:line="11" pos:column="36">EOF<pos:position pos:line="11" pos:column="39"/></name> <operator pos:line="11" pos:column="40">&amp;&amp;<pos:position pos:line="11" pos:column="50"/></operator> <name pos:line="11" pos:column="43">len<pos:position pos:line="11" pos:column="46"/></name><operator pos:line="11" pos:column="46">--<pos:position pos:line="11" pos:column="48"/></operator></expr>)<pos:position pos:line="11" pos:column="49"/></condition>
    <block pos:line="12" pos:column="5">{
      <if pos:line="13" pos:column="7">if<condition pos:line="13" pos:column="9">(<expr><name pos:line="13" pos:column="10">c<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">==<pos:position pos:line="13" pos:column="14"/></operator> <literal type="char" pos:line="13" pos:column="15">'\r'<pos:position pos:line="13" pos:column="19"/></literal> <operator pos:line="13" pos:column="20">&amp;&amp;<pos:position pos:line="13" pos:column="30"/></operator> <name pos:line="13" pos:column="23">len<pos:position pos:line="13" pos:column="26"/></name></expr>)<pos:position pos:line="13" pos:column="27"/></condition><then pos:line="13" pos:column="27">
      <block pos:line="14" pos:column="7">{
	<if pos:line="15" pos:column="9">if<condition pos:line="15" pos:column="11">(<expr><operator pos:line="15" pos:column="12">(<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">ch<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <call><name pos:line="15" pos:column="18">fgetc<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name><name pos:line="15" pos:column="24">s<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">-&gt;<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="27">fpin<pos:position pos:line="15" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call><operator pos:line="15" pos:column="32">)<pos:position pos:line="15" pos:column="33"/></operator> <operator pos:line="15" pos:column="34">==<pos:position pos:line="15" pos:column="36"/></operator> <literal type="char" pos:line="15" pos:column="37">'\n'<pos:position pos:line="15" pos:column="41"/></literal></expr>)<pos:position pos:line="15" pos:column="42"/></condition><then pos:line="15" pos:column="42">
	<block pos:line="16" pos:column="9">{
	  <expr_stmt><expr><name pos:line="17" pos:column="11">c<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <name pos:line="17" pos:column="15">ch<pos:position pos:line="17" pos:column="17"/></name></expr>;<pos:position pos:line="17" pos:column="18"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="18" pos:column="11">len<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">--<pos:position pos:line="18" pos:column="16"/></operator></expr>;<pos:position pos:line="18" pos:column="17"/></expr_stmt>
	}<pos:position pos:line="19" pos:column="10"/></block></then>
	<else pos:line="20" pos:column="9">else 
	  <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="11">ungetc<pos:position pos:line="21" pos:column="17"/></name><argument_list pos:line="21" pos:column="17">(<argument><expr><name pos:line="21" pos:column="18">ch<pos:position pos:line="21" pos:column="20"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="22">s<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">-&gt;<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="25">fpin<pos:position pos:line="21" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt></block></else></if>
      }<pos:position pos:line="22" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name><name pos:line="24" pos:column="7">bufi<pos:position pos:line="24" pos:column="11"/></name><index pos:line="24" pos:column="11">[<expr><name pos:line="24" pos:column="12">l<pos:position pos:line="24" pos:column="13"/></name><operator pos:line="24" pos:column="13">++<pos:position pos:line="24" pos:column="15"/></operator></expr>]<pos:position pos:line="24" pos:column="16"/></index></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <name pos:line="24" pos:column="19">c<pos:position pos:line="24" pos:column="20"/></name></expr>;<pos:position pos:line="24" pos:column="21"/></expr_stmt>
      <if pos:line="25" pos:column="7">if <condition pos:line="25" pos:column="10">(<expr><name pos:line="25" pos:column="11">l<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">==<pos:position pos:line="25" pos:column="15"/></operator> <sizeof pos:line="25" pos:column="16">sizeof <argument_list pos:line="25" pos:column="23">(<argument><expr><name pos:line="25" pos:column="24">bufi<pos:position pos:line="25" pos:column="28"/></name></expr></argument>)<pos:position pos:line="25" pos:column="29"/></argument_list></sizeof></expr>)<pos:position pos:line="25" pos:column="30"/></condition><then pos:line="25" pos:column="30">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="9">mutt_convert_to_state<pos:position pos:line="26" pos:column="30"/></name> <argument_list pos:line="26" pos:column="31">(<argument><expr><name pos:line="26" pos:column="32">cd<pos:position pos:line="26" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="36">bufi<pos:position pos:line="26" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="42">&amp;<pos:position pos:line="26" pos:column="47"/></operator><name pos:line="26" pos:column="43">l<pos:position pos:line="26" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="46">s<pos:position pos:line="26" pos:column="47"/></name></expr></argument>)<pos:position pos:line="26" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="49"/></expr_stmt></block></then></if>
    }<pos:position pos:line="27" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">mutt_convert_to_state<pos:position pos:line="29" pos:column="26"/></name> <argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">cd<pos:position pos:line="29" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="32">bufi<pos:position pos:line="29" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="38">&amp;<pos:position pos:line="29" pos:column="43"/></operator><name pos:line="29" pos:column="39">l<pos:position pos:line="29" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="42">s<pos:position pos:line="29" pos:column="43"/></name></expr></argument>)<pos:position pos:line="29" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">mutt_convert_to_state<pos:position pos:line="30" pos:column="26"/></name> <argument_list pos:line="30" pos:column="27">(<argument><expr><name pos:line="30" pos:column="28">cd<pos:position pos:line="30" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="32">0<pos:position pos:line="30" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="35">0<pos:position pos:line="30" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="38">s<pos:position pos:line="30" pos:column="39"/></name></expr></argument>)<pos:position pos:line="30" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="32" pos:column="5">state_reset_prefix<pos:position pos:line="32" pos:column="23"/></name> <argument_list pos:line="32" pos:column="24">(<argument><expr><name pos:line="32" pos:column="25">s<pos:position pos:line="32" pos:column="26"/></name></expr></argument>)<pos:position pos:line="32" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="33" pos:column="4"/></block></then>
  <else pos:line="34" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="5">mutt_copy_bytes<pos:position pos:line="35" pos:column="20"/></name> <argument_list pos:line="35" pos:column="21">(<argument><expr><name><name pos:line="35" pos:column="22">s<pos:position pos:line="35" pos:column="23"/></name><operator pos:line="35" pos:column="23">-&gt;<pos:position pos:line="35" pos:column="28"/></operator><name pos:line="35" pos:column="25">fpin<pos:position pos:line="35" pos:column="29"/></name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="31">s<pos:position pos:line="35" pos:column="32"/></name><operator pos:line="35" pos:column="32">-&gt;<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="34">fpout<pos:position pos:line="35" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="41">len<pos:position pos:line="35" pos:column="44"/></name></expr></argument>)<pos:position pos:line="35" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="46"/></expr_stmt></block></else></if>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
