<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2018_last_repos.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name><modifier pos:line="1" pos:column="11">*<pos:position pos:line="1" pos:column="12"/></modifier></type> <name pos:line="1" pos:column="13">imap_cmd_trailer<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">IMAP_DATA<pos:position pos:line="1" pos:column="40"/></name><modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type> <name pos:line="1" pos:column="42">idata<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><specifier pos:line="3" pos:column="3">static<pos:position pos:line="3" pos:column="9"/></specifier> <type><specifier pos:line="3" pos:column="10">const<pos:position pos:line="3" pos:column="15"/></specifier> <name pos:line="3" pos:column="16">char<pos:position pos:line="3" pos:column="20"/></name><modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type> <name pos:line="3" pos:column="22">notrailer<pos:position pos:line="3" pos:column="31"/></name> <init pos:line="3" pos:column="32">= <expr><literal type="string" pos:line="3" pos:column="34">""<pos:position pos:line="3" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name><modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type> <name pos:line="4" pos:column="15">s<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><name><name pos:line="4" pos:column="19">idata<pos:position pos:line="4" pos:column="24"/></name><operator pos:line="4" pos:column="24">-&gt;<pos:position pos:line="4" pos:column="29"/></operator><name pos:line="4" pos:column="26">buf<pos:position pos:line="4" pos:column="29"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">!<pos:position pos:line="6" pos:column="8"/></operator><name pos:line="6" pos:column="8">s<pos:position pos:line="6" pos:column="9"/></name></expr>)<pos:position pos:line="6" pos:column="10"/></condition><then pos:line="6" pos:column="10">
  <block pos:line="7" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">dprint<pos:position pos:line="8" pos:column="11"/></name> <argument_list pos:line="8" pos:column="12">(<argument><expr><literal type="number" pos:line="8" pos:column="13">2<pos:position pos:line="8" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="8" pos:column="16">(<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">debugfile<pos:position pos:line="8" pos:column="26"/></name><operator pos:line="8" pos:column="26">,<pos:position pos:line="8" pos:column="27"/></operator> <literal type="string" pos:line="8" pos:column="28">"imap_cmd_trailer: not a tagged response"<pos:position pos:line="8" pos:column="69"/></literal><operator pos:line="8" pos:column="69">)<pos:position pos:line="8" pos:column="70"/></operator></expr></argument>)<pos:position pos:line="8" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="72"/></expr_stmt>
    <return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">notrailer<pos:position pos:line="9" pos:column="21"/></name></expr>;<pos:position pos:line="9" pos:column="22"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="12" pos:column="3">s<pos:position pos:line="12" pos:column="4"/></name> <operator pos:line="12" pos:column="5">=<pos:position pos:line="12" pos:column="6"/></operator> <call><name pos:line="12" pos:column="7">imap_next_word<pos:position pos:line="12" pos:column="21"/></name> <argument_list pos:line="12" pos:column="22">(<argument><expr><operator pos:line="12" pos:column="23">(<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="24">char<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">*<pos:position pos:line="12" pos:column="30"/></operator><operator pos:line="12" pos:column="30">)<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="31">s<pos:position pos:line="12" pos:column="32"/></name></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><operator pos:line="13" pos:column="7">!<pos:position pos:line="13" pos:column="8"/></operator><name pos:line="13" pos:column="8">s<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">||<pos:position pos:line="13" pos:column="12"/></operator> <operator pos:line="13" pos:column="13">(<pos:position pos:line="13" pos:column="14"/></operator><call><name pos:line="13" pos:column="14">ascii_strncasecmp<pos:position pos:line="13" pos:column="31"/></name> <argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">s<pos:position pos:line="13" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="36">"OK"<pos:position pos:line="13" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="42">2<pos:position pos:line="13" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call> <operator pos:line="13" pos:column="45">&amp;&amp;<pos:position pos:line="13" pos:column="55"/></operator>
	     <call><name pos:line="14" pos:column="14">ascii_strncasecmp<pos:position pos:line="14" pos:column="31"/></name> <argument_list pos:line="14" pos:column="32">(<argument><expr><name pos:line="14" pos:column="33">s<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="36">"NO"<pos:position pos:line="14" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="42">2<pos:position pos:line="14" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call> <operator pos:line="14" pos:column="45">&amp;&amp;<pos:position pos:line="14" pos:column="55"/></operator>
	     <call><name pos:line="15" pos:column="14">ascii_strncasecmp<pos:position pos:line="15" pos:column="31"/></name> <argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">s<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="36">"BAD"<pos:position pos:line="15" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="43">3<pos:position pos:line="15" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="45"/></argument_list></call><operator pos:line="15" pos:column="45">)<pos:position pos:line="15" pos:column="46"/></operator></expr>)<pos:position pos:line="15" pos:column="47"/></condition><then pos:line="15" pos:column="47">
  <block pos:line="16" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">dprint<pos:position pos:line="17" pos:column="11"/></name> <argument_list pos:line="17" pos:column="12">(<argument><expr><literal type="number" pos:line="17" pos:column="13">2<pos:position pos:line="17" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="17" pos:column="16">(<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">debugfile<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">,<pos:position pos:line="17" pos:column="27"/></operator> <literal type="string" pos:line="17" pos:column="28">"imap_cmd_trailer: not a command completion: %s"<pos:position pos:line="17" pos:column="76"/></literal><operator pos:line="17" pos:column="76">,<pos:position pos:line="17" pos:column="77"/></operator>
		<name><name pos:line="18" pos:column="17">idata<pos:position pos:line="18" pos:column="22"/></name><operator pos:line="18" pos:column="22">-&gt;<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="24">buf<pos:position pos:line="18" pos:column="27"/></name></name><operator pos:line="18" pos:column="27">)<pos:position pos:line="18" pos:column="28"/></operator></expr></argument>)<pos:position pos:line="18" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="30"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">notrailer<pos:position pos:line="19" pos:column="21"/></name></expr>;<pos:position pos:line="19" pos:column="22"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="22" pos:column="3">s<pos:position pos:line="22" pos:column="4"/></name> <operator pos:line="22" pos:column="5">=<pos:position pos:line="22" pos:column="6"/></operator> <call><name pos:line="22" pos:column="7">imap_next_word<pos:position pos:line="22" pos:column="21"/></name> <argument_list pos:line="22" pos:column="22">(<argument><expr><operator pos:line="22" pos:column="23">(<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="24">char<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">*<pos:position pos:line="22" pos:column="30"/></operator><operator pos:line="22" pos:column="30">)<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="31">s<pos:position pos:line="22" pos:column="32"/></name></expr></argument>)<pos:position pos:line="22" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><operator pos:line="23" pos:column="7">!<pos:position pos:line="23" pos:column="8"/></operator><name pos:line="23" pos:column="8">s<pos:position pos:line="23" pos:column="9"/></name></expr>)<pos:position pos:line="23" pos:column="10"/></condition><then pos:line="23" pos:column="10">
    <block type="pseudo"><return pos:line="24" pos:column="5">return <expr><name pos:line="24" pos:column="12">notrailer<pos:position pos:line="24" pos:column="21"/></name></expr>;<pos:position pos:line="24" pos:column="22"/></return></block></then></if>

  <return pos:line="26" pos:column="3">return <expr><name pos:line="26" pos:column="10">s<pos:position pos:line="26" pos:column="11"/></name></expr>;<pos:position pos:line="26" pos:column="12"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
