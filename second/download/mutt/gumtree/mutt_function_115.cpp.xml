<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_function_115.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">print_fingerprint<pos:position pos:line="1" pos:column="30"/></name> <parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">pgp_key_t<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">p<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list> 
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">i<pos:position pos:line="3" pos:column="8"/></name> <init pos:line="3" pos:column="9">= <expr><literal type="number" pos:line="3" pos:column="11">0<pos:position pos:line="3" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="5" pos:column="3">printf<pos:position pos:line="5" pos:column="9"/></name> <argument_list pos:line="5" pos:column="10">(<argument><expr><literal type="string" pos:line="5" pos:column="11">"fpr:::::::::"<pos:position pos:line="5" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="27"/></expr_stmt>
  <for pos:line="6" pos:column="3">for <control pos:line="6" pos:column="7">(<init><expr><name pos:line="6" pos:column="8">i<pos:position pos:line="6" pos:column="9"/></name> <operator pos:line="6" pos:column="10">=<pos:position pos:line="6" pos:column="11"/></operator> <literal type="number" pos:line="6" pos:column="12">0<pos:position pos:line="6" pos:column="13"/></literal></expr>;<pos:position pos:line="6" pos:column="14"/></init> <condition><expr><name pos:line="6" pos:column="15">i<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">&lt;<pos:position pos:line="6" pos:column="21"/></operator> <name><name pos:line="6" pos:column="19">p<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">-&gt;<pos:position pos:line="6" pos:column="25"/></operator><name pos:line="6" pos:column="22">fp_len<pos:position pos:line="6" pos:column="28"/></name></name></expr>;<pos:position pos:line="6" pos:column="29"/></condition> <incr><expr><name pos:line="6" pos:column="30">i<pos:position pos:line="6" pos:column="31"/></name><operator pos:line="6" pos:column="31">++<pos:position pos:line="6" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="6" pos:column="34"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="5">printf<pos:position pos:line="7" pos:column="11"/></name> <argument_list pos:line="7" pos:column="12">(<argument><expr><literal type="string" pos:line="7" pos:column="13">"%02X"<pos:position pos:line="7" pos:column="19"/></literal></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="21">p<pos:position pos:line="7" pos:column="22"/></name><operator pos:line="7" pos:column="22">-&gt;<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="24">fingerprint<pos:position pos:line="7" pos:column="35"/></name><index pos:line="7" pos:column="35">[<expr><name pos:line="7" pos:column="36">i<pos:position pos:line="7" pos:column="37"/></name></expr>]<pos:position pos:line="7" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="40"/></expr_stmt></block></for>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">printf<pos:position pos:line="8" pos:column="9"/></name> <argument_list pos:line="8" pos:column="10">(<argument><expr><literal type="string" pos:line="8" pos:column="11">":\n"<pos:position pos:line="8" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="18"/></expr_stmt>

}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
