<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2052_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">imap_open_mailbox<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">CONTEXT<pos:position pos:line="1" pos:column="38"/></name><modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type> <name pos:line="1" pos:column="40">ctx<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">IMAP_DATA<pos:position pos:line="3" pos:column="12"/></name> <modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier></type><name pos:line="3" pos:column="14">idata<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">IMAP_STATUS<pos:position pos:line="4" pos:column="14"/></name><modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type> <name pos:line="4" pos:column="16">status<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">buf<pos:position pos:line="5" pos:column="11"/></name><index pos:line="5" pos:column="11">[<expr><name pos:line="5" pos:column="12">LONG_STRING<pos:position pos:line="5" pos:column="23"/></name></expr>]<pos:position pos:line="5" pos:column="24"/></index></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">bufout<pos:position pos:line="6" pos:column="14"/></name><index pos:line="6" pos:column="14">[<expr><name pos:line="6" pos:column="15">LONG_STRING<pos:position pos:line="6" pos:column="26"/></name></expr>]<pos:position pos:line="6" pos:column="27"/></index></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">count<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><literal type="number" pos:line="7" pos:column="15">0<pos:position pos:line="7" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">IMAP_MBOX<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">mx<pos:position pos:line="8" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="17">pmx<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">rc<pos:position pos:line="9" pos:column="9"/></name></decl>;<pos:position pos:line="9" pos:column="10"/></decl_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><call><name pos:line="11" pos:column="7">imap_parse_path<pos:position pos:line="11" pos:column="22"/></name> <argument_list pos:line="11" pos:column="23">(<argument><expr><name><name pos:line="11" pos:column="24">ctx<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">-&gt;<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="29">path<pos:position pos:line="11" pos:column="33"/></name></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="35">&amp;<pos:position pos:line="11" pos:column="40"/></operator><name pos:line="11" pos:column="36">mx<pos:position pos:line="11" pos:column="38"/></name></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="40"/></condition><then pos:line="11" pos:column="40">
  <block pos:line="12" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">mutt_error<pos:position pos:line="13" pos:column="15"/></name> <argument_list pos:line="13" pos:column="16">(<argument><expr><call><name pos:line="13" pos:column="17">_<pos:position pos:line="13" pos:column="18"/></name><argument_list pos:line="13" pos:column="18">(<argument><expr><literal type="string" pos:line="13" pos:column="19">"%s is an invalid IMAP path"<pos:position pos:line="13" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="50">ctx<pos:position pos:line="13" pos:column="53"/></name><operator pos:line="13" pos:column="53">-&gt;<pos:position pos:line="13" pos:column="58"/></operator><name pos:line="13" pos:column="55">path<pos:position pos:line="13" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="61"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="17" pos:column="3">/* we require a connection which isn't currently in IMAP_SELECTED state */</comment>
  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><operator pos:line="18" pos:column="7">!<pos:position pos:line="18" pos:column="8"/></operator><operator pos:line="18" pos:column="8">(<pos:position pos:line="18" pos:column="9"/></operator><name pos:line="18" pos:column="9">idata<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <call><name pos:line="18" pos:column="17">imap_conn_find<pos:position pos:line="18" pos:column="31"/></name> <argument_list pos:line="18" pos:column="32">(<argument><expr><operator pos:line="18" pos:column="33">&amp;<pos:position pos:line="18" pos:column="38"/></operator><operator pos:line="18" pos:column="34">(<pos:position pos:line="18" pos:column="35"/></operator><name><name pos:line="18" pos:column="35">mx<pos:position pos:line="18" pos:column="37"/></name><operator pos:line="18" pos:column="37">.<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="38">account<pos:position pos:line="18" pos:column="45"/></name></name><operator pos:line="18" pos:column="45">)<pos:position pos:line="18" pos:column="46"/></operator></expr></argument>, <argument><expr><name pos:line="18" pos:column="48">MUTT_IMAP_CONN_NOSELECT<pos:position pos:line="18" pos:column="71"/></name></expr></argument>)<pos:position pos:line="18" pos:column="72"/></argument_list></call><operator pos:line="18" pos:column="72">)<pos:position pos:line="18" pos:column="73"/></operator></expr>)<pos:position pos:line="18" pos:column="74"/></condition><then pos:line="18" pos:column="74">
    <block type="pseudo"><goto pos:line="19" pos:column="5">goto <name pos:line="19" pos:column="10">fail_noidata<pos:position pos:line="19" pos:column="22"/></name>;<pos:position pos:line="19" pos:column="23"/></goto></block></then></if>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name><name pos:line="20" pos:column="7">idata<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">-&gt;<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="14">state<pos:position pos:line="20" pos:column="19"/></name></name> <operator pos:line="20" pos:column="20">&lt;<pos:position pos:line="20" pos:column="24"/></operator> <name pos:line="20" pos:column="22">IMAP_AUTHENTICATED<pos:position pos:line="20" pos:column="40"/></name></expr>)<pos:position pos:line="20" pos:column="41"/></condition><then pos:line="20" pos:column="41">
    <block type="pseudo"><goto pos:line="21" pos:column="5">goto <name pos:line="21" pos:column="10">fail<pos:position pos:line="21" pos:column="14"/></name>;<pos:position pos:line="21" pos:column="15"/></goto></block></then></if>

  <comment type="block" pos:line="23" pos:column="3">/* once again the context is new */</comment>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">ctx<pos:position pos:line="24" pos:column="6"/></name><operator pos:line="24" pos:column="6">-&gt;<pos:position pos:line="24" pos:column="11"/></operator><name pos:line="24" pos:column="8">data<pos:position pos:line="24" pos:column="12"/></name></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <name pos:line="24" pos:column="15">idata<pos:position pos:line="24" pos:column="20"/></name></expr>;<pos:position pos:line="24" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="26" pos:column="3">/* Clean up path and replace the one in the ctx */</comment>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">imap_fix_path<pos:position pos:line="27" pos:column="16"/></name> <argument_list pos:line="27" pos:column="17">(<argument><expr><name pos:line="27" pos:column="18">idata<pos:position pos:line="27" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="25">mx<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">.<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="28">mbox<pos:position pos:line="27" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="34">buf<pos:position pos:line="27" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="39">sizeof <argument_list pos:line="27" pos:column="46">(<argument><expr><name pos:line="27" pos:column="47">buf<pos:position pos:line="27" pos:column="50"/></name></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="53"/></expr_stmt>
  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><operator pos:line="28" pos:column="7">!<pos:position pos:line="28" pos:column="8"/></operator><operator pos:line="28" pos:column="8">*<pos:position pos:line="28" pos:column="9"/></operator><name pos:line="28" pos:column="9">buf<pos:position pos:line="28" pos:column="12"/></name></expr>)<pos:position pos:line="28" pos:column="13"/></condition><then pos:line="28" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="5">strfcpy<pos:position pos:line="29" pos:column="12"/></name> <argument_list pos:line="29" pos:column="13">(<argument><expr><name pos:line="29" pos:column="14">buf<pos:position pos:line="29" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="19">"INBOX"<pos:position pos:line="29" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="28">sizeof <argument_list pos:line="29" pos:column="35">(<argument><expr><name pos:line="29" pos:column="36">buf<pos:position pos:line="29" pos:column="39"/></name></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="42"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="30" pos:column="3">FREE<pos:position pos:line="30" pos:column="7"/></name><argument_list pos:line="30" pos:column="7">(<argument><expr><operator pos:line="30" pos:column="8">&amp;<pos:position pos:line="30" pos:column="13"/></operator><operator pos:line="30" pos:column="9">(<pos:position pos:line="30" pos:column="10"/></operator><name><name pos:line="30" pos:column="10">idata<pos:position pos:line="30" pos:column="15"/></name><operator pos:line="30" pos:column="15">-&gt;<pos:position pos:line="30" pos:column="20"/></operator><name pos:line="30" pos:column="17">mailbox<pos:position pos:line="30" pos:column="24"/></name></name><operator pos:line="30" pos:column="24">)<pos:position pos:line="30" pos:column="25"/></operator></expr></argument>)<pos:position pos:line="30" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="31" pos:column="3">idata<pos:position pos:line="31" pos:column="8"/></name><operator pos:line="31" pos:column="8">-&gt;<pos:position pos:line="31" pos:column="13"/></operator><name pos:line="31" pos:column="10">mailbox<pos:position pos:line="31" pos:column="17"/></name></name> <operator pos:line="31" pos:column="18">=<pos:position pos:line="31" pos:column="19"/></operator> <call><name pos:line="31" pos:column="20">safe_strdup<pos:position pos:line="31" pos:column="31"/></name> <argument_list pos:line="31" pos:column="32">(<argument><expr><name pos:line="31" pos:column="33">buf<pos:position pos:line="31" pos:column="36"/></name></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="32" pos:column="3">imap_qualify_path<pos:position pos:line="32" pos:column="20"/></name> <argument_list pos:line="32" pos:column="21">(<argument><expr><name pos:line="32" pos:column="22">buf<pos:position pos:line="32" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="27">sizeof <argument_list pos:line="32" pos:column="34">(<argument><expr><name pos:line="32" pos:column="35">buf<pos:position pos:line="32" pos:column="38"/></name></expr></argument>)<pos:position pos:line="32" pos:column="39"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="32" pos:column="41">&amp;<pos:position pos:line="32" pos:column="46"/></operator><name pos:line="32" pos:column="42">mx<pos:position pos:line="32" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="46">idata<pos:position pos:line="32" pos:column="51"/></name><operator pos:line="32" pos:column="51">-&gt;<pos:position pos:line="32" pos:column="56"/></operator><name pos:line="32" pos:column="53">mailbox<pos:position pos:line="32" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="62"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="34" pos:column="3">FREE<pos:position pos:line="34" pos:column="7"/></name> <argument_list pos:line="34" pos:column="8">(<argument><expr><operator pos:line="34" pos:column="9">&amp;<pos:position pos:line="34" pos:column="14"/></operator><operator pos:line="34" pos:column="10">(<pos:position pos:line="34" pos:column="11"/></operator><name><name pos:line="34" pos:column="11">ctx<pos:position pos:line="34" pos:column="14"/></name><operator pos:line="34" pos:column="14">-&gt;<pos:position pos:line="34" pos:column="19"/></operator><name pos:line="34" pos:column="16">path<pos:position pos:line="34" pos:column="20"/></name></name><operator pos:line="34" pos:column="20">)<pos:position pos:line="34" pos:column="21"/></operator></expr></argument>)<pos:position pos:line="34" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="35" pos:column="3">FREE<pos:position pos:line="35" pos:column="7"/></name> <argument_list pos:line="35" pos:column="8">(<argument><expr><operator pos:line="35" pos:column="9">&amp;<pos:position pos:line="35" pos:column="14"/></operator><operator pos:line="35" pos:column="10">(<pos:position pos:line="35" pos:column="11"/></operator><name><name pos:line="35" pos:column="11">ctx<pos:position pos:line="35" pos:column="14"/></name><operator pos:line="35" pos:column="14">-&gt;<pos:position pos:line="35" pos:column="19"/></operator><name pos:line="35" pos:column="16">realpath<pos:position pos:line="35" pos:column="24"/></name></name><operator pos:line="35" pos:column="24">)<pos:position pos:line="35" pos:column="25"/></operator></expr></argument>)<pos:position pos:line="35" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="36" pos:column="3">ctx<pos:position pos:line="36" pos:column="6"/></name><operator pos:line="36" pos:column="6">-&gt;<pos:position pos:line="36" pos:column="11"/></operator><name pos:line="36" pos:column="8">path<pos:position pos:line="36" pos:column="12"/></name></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <call><name pos:line="36" pos:column="15">safe_strdup<pos:position pos:line="36" pos:column="26"/></name> <argument_list pos:line="36" pos:column="27">(<argument><expr><name pos:line="36" pos:column="28">buf<pos:position pos:line="36" pos:column="31"/></name></expr></argument>)<pos:position pos:line="36" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="37" pos:column="3">ctx<pos:position pos:line="37" pos:column="6"/></name><operator pos:line="37" pos:column="6">-&gt;<pos:position pos:line="37" pos:column="11"/></operator><name pos:line="37" pos:column="8">realpath<pos:position pos:line="37" pos:column="16"/></name></name> <operator pos:line="37" pos:column="17">=<pos:position pos:line="37" pos:column="18"/></operator> <call><name pos:line="37" pos:column="19">safe_strdup<pos:position pos:line="37" pos:column="30"/></name> <argument_list pos:line="37" pos:column="31">(<argument><expr><name><name pos:line="37" pos:column="32">ctx<pos:position pos:line="37" pos:column="35"/></name><operator pos:line="37" pos:column="35">-&gt;<pos:position pos:line="37" pos:column="40"/></operator><name pos:line="37" pos:column="37">path<pos:position pos:line="37" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="39" pos:column="3">idata<pos:position pos:line="39" pos:column="8"/></name><operator pos:line="39" pos:column="8">-&gt;<pos:position pos:line="39" pos:column="13"/></operator><name pos:line="39" pos:column="10">ctx<pos:position pos:line="39" pos:column="13"/></name></name> <operator pos:line="39" pos:column="14">=<pos:position pos:line="39" pos:column="15"/></operator> <name pos:line="39" pos:column="16">ctx<pos:position pos:line="39" pos:column="19"/></name></expr>;<pos:position pos:line="39" pos:column="20"/></expr_stmt>

  <comment type="block" pos:line="41" pos:column="3">/* clear mailbox status */</comment>
  <expr_stmt><expr><name><name pos:line="42" pos:column="3">idata<pos:position pos:line="42" pos:column="8"/></name><operator pos:line="42" pos:column="8">-&gt;<pos:position pos:line="42" pos:column="13"/></operator><name pos:line="42" pos:column="10">status<pos:position pos:line="42" pos:column="16"/></name></name> <operator pos:line="42" pos:column="17">=<pos:position pos:line="42" pos:column="18"/></operator> <literal type="number" pos:line="42" pos:column="19">0<pos:position pos:line="42" pos:column="20"/></literal></expr>;<pos:position pos:line="42" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="43" pos:column="3">memset<pos:position pos:line="43" pos:column="9"/></name> <argument_list pos:line="43" pos:column="10">(<argument><expr><name><name pos:line="43" pos:column="11">idata<pos:position pos:line="43" pos:column="16"/></name><operator pos:line="43" pos:column="16">-&gt;<pos:position pos:line="43" pos:column="21"/></operator><name pos:line="43" pos:column="18">ctx<pos:position pos:line="43" pos:column="21"/></name><operator pos:line="43" pos:column="21">-&gt;<pos:position pos:line="43" pos:column="26"/></operator><name pos:line="43" pos:column="23">rights<pos:position pos:line="43" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="31">0<pos:position pos:line="43" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="34">sizeof <argument_list pos:line="43" pos:column="41">(<argument><expr><name><name pos:line="43" pos:column="42">idata<pos:position pos:line="43" pos:column="47"/></name><operator pos:line="43" pos:column="47">-&gt;<pos:position pos:line="43" pos:column="52"/></operator><name pos:line="43" pos:column="49">ctx<pos:position pos:line="43" pos:column="52"/></name><operator pos:line="43" pos:column="52">-&gt;<pos:position pos:line="43" pos:column="57"/></operator><name pos:line="43" pos:column="54">rights<pos:position pos:line="43" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="63"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="44" pos:column="3">idata<pos:position pos:line="44" pos:column="8"/></name><operator pos:line="44" pos:column="8">-&gt;<pos:position pos:line="44" pos:column="13"/></operator><name pos:line="44" pos:column="10">newMailCount<pos:position pos:line="44" pos:column="22"/></name></name> <operator pos:line="44" pos:column="23">=<pos:position pos:line="44" pos:column="24"/></operator> <literal type="number" pos:line="44" pos:column="25">0<pos:position pos:line="44" pos:column="26"/></literal></expr>;<pos:position pos:line="44" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="45" pos:column="3">idata<pos:position pos:line="45" pos:column="8"/></name><operator pos:line="45" pos:column="8">-&gt;<pos:position pos:line="45" pos:column="13"/></operator><name pos:line="45" pos:column="10">max_msn<pos:position pos:line="45" pos:column="17"/></name></name> <operator pos:line="45" pos:column="18">=<pos:position pos:line="45" pos:column="19"/></operator> <literal type="number" pos:line="45" pos:column="20">0<pos:position pos:line="45" pos:column="21"/></literal></expr>;<pos:position pos:line="45" pos:column="22"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="47" pos:column="3">mutt_message<pos:position pos:line="47" pos:column="15"/></name> <argument_list pos:line="47" pos:column="16">(<argument><expr><call><name pos:line="47" pos:column="17">_<pos:position pos:line="47" pos:column="18"/></name><argument_list pos:line="47" pos:column="18">(<argument><expr><literal type="string" pos:line="47" pos:column="19">"Selecting %s..."<pos:position pos:line="47" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="39">idata<pos:position pos:line="47" pos:column="44"/></name><operator pos:line="47" pos:column="44">-&gt;<pos:position pos:line="47" pos:column="49"/></operator><name pos:line="47" pos:column="46">mailbox<pos:position pos:line="47" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="55"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="48" pos:column="3">imap_munge_mbox_name<pos:position pos:line="48" pos:column="23"/></name> <argument_list pos:line="48" pos:column="24">(<argument><expr><name pos:line="48" pos:column="25">idata<pos:position pos:line="48" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="32">buf<pos:position pos:line="48" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="48" pos:column="37">sizeof<argument_list pos:line="48" pos:column="43">(<argument><expr><name pos:line="48" pos:column="44">buf<pos:position pos:line="48" pos:column="47"/></name></expr></argument>)<pos:position pos:line="48" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="50">idata<pos:position pos:line="48" pos:column="55"/></name><operator pos:line="48" pos:column="55">-&gt;<pos:position pos:line="48" pos:column="60"/></operator><name pos:line="48" pos:column="57">mailbox<pos:position pos:line="48" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="66"/></expr_stmt>

  <comment type="block" pos:line="50" pos:column="3">/* pipeline ACL test */</comment>
  <if pos:line="51" pos:column="3">if <condition pos:line="51" pos:column="6">(<expr><call><name pos:line="51" pos:column="7">mutt_bit_isset<pos:position pos:line="51" pos:column="21"/></name> <argument_list pos:line="51" pos:column="22">(<argument><expr><name><name pos:line="51" pos:column="23">idata<pos:position pos:line="51" pos:column="28"/></name><operator pos:line="51" pos:column="28">-&gt;<pos:position pos:line="51" pos:column="33"/></operator><name pos:line="51" pos:column="30">capabilities<pos:position pos:line="51" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="44">ACL<pos:position pos:line="51" pos:column="47"/></name></expr></argument>)<pos:position pos:line="51" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="49"/></condition><then pos:line="51" pos:column="49">
  <block pos:line="52" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">snprintf<pos:position pos:line="53" pos:column="13"/></name> <argument_list pos:line="53" pos:column="14">(<argument><expr><name pos:line="53" pos:column="15">bufout<pos:position pos:line="53" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="23">sizeof <argument_list pos:line="53" pos:column="30">(<argument><expr><name pos:line="53" pos:column="31">bufout<pos:position pos:line="53" pos:column="37"/></name></expr></argument>)<pos:position pos:line="53" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="40">"MYRIGHTS %s"<pos:position pos:line="53" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="55">buf<pos:position pos:line="53" pos:column="58"/></name></expr></argument>)<pos:position pos:line="53" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">imap_exec<pos:position pos:line="54" pos:column="14"/></name> <argument_list pos:line="54" pos:column="15">(<argument><expr><name pos:line="54" pos:column="16">idata<pos:position pos:line="54" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="23">bufout<pos:position pos:line="54" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="31">IMAP_CMD_QUEUE<pos:position pos:line="54" pos:column="45"/></name></expr></argument>)<pos:position pos:line="54" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="47"/></expr_stmt>
  }<pos:position pos:line="55" pos:column="4"/></block></then>
  <comment type="block" pos:line="56" pos:column="3">/* assume we have all rights if ACL is unavailable */</comment>
  <else pos:line="57" pos:column="3">else
  <block pos:line="58" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">mutt_bit_set<pos:position pos:line="59" pos:column="17"/></name> <argument_list pos:line="59" pos:column="18">(<argument><expr><name><name pos:line="59" pos:column="19">idata<pos:position pos:line="59" pos:column="24"/></name><operator pos:line="59" pos:column="24">-&gt;<pos:position pos:line="59" pos:column="29"/></operator><name pos:line="59" pos:column="26">ctx<pos:position pos:line="59" pos:column="29"/></name><operator pos:line="59" pos:column="29">-&gt;<pos:position pos:line="59" pos:column="34"/></operator><name pos:line="59" pos:column="31">rights<pos:position pos:line="59" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="39">MUTT_ACL_LOOKUP<pos:position pos:line="59" pos:column="54"/></name></expr></argument>)<pos:position pos:line="59" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">mutt_bit_set<pos:position pos:line="60" pos:column="17"/></name> <argument_list pos:line="60" pos:column="18">(<argument><expr><name><name pos:line="60" pos:column="19">idata<pos:position pos:line="60" pos:column="24"/></name><operator pos:line="60" pos:column="24">-&gt;<pos:position pos:line="60" pos:column="29"/></operator><name pos:line="60" pos:column="26">ctx<pos:position pos:line="60" pos:column="29"/></name><operator pos:line="60" pos:column="29">-&gt;<pos:position pos:line="60" pos:column="34"/></operator><name pos:line="60" pos:column="31">rights<pos:position pos:line="60" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="39">MUTT_ACL_READ<pos:position pos:line="60" pos:column="52"/></name></expr></argument>)<pos:position pos:line="60" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">mutt_bit_set<pos:position pos:line="61" pos:column="17"/></name> <argument_list pos:line="61" pos:column="18">(<argument><expr><name><name pos:line="61" pos:column="19">idata<pos:position pos:line="61" pos:column="24"/></name><operator pos:line="61" pos:column="24">-&gt;<pos:position pos:line="61" pos:column="29"/></operator><name pos:line="61" pos:column="26">ctx<pos:position pos:line="61" pos:column="29"/></name><operator pos:line="61" pos:column="29">-&gt;<pos:position pos:line="61" pos:column="34"/></operator><name pos:line="61" pos:column="31">rights<pos:position pos:line="61" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="39">MUTT_ACL_SEEN<pos:position pos:line="61" pos:column="52"/></name></expr></argument>)<pos:position pos:line="61" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">mutt_bit_set<pos:position pos:line="62" pos:column="17"/></name> <argument_list pos:line="62" pos:column="18">(<argument><expr><name><name pos:line="62" pos:column="19">idata<pos:position pos:line="62" pos:column="24"/></name><operator pos:line="62" pos:column="24">-&gt;<pos:position pos:line="62" pos:column="29"/></operator><name pos:line="62" pos:column="26">ctx<pos:position pos:line="62" pos:column="29"/></name><operator pos:line="62" pos:column="29">-&gt;<pos:position pos:line="62" pos:column="34"/></operator><name pos:line="62" pos:column="31">rights<pos:position pos:line="62" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="39">MUTT_ACL_WRITE<pos:position pos:line="62" pos:column="53"/></name></expr></argument>)<pos:position pos:line="62" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">mutt_bit_set<pos:position pos:line="63" pos:column="17"/></name> <argument_list pos:line="63" pos:column="18">(<argument><expr><name><name pos:line="63" pos:column="19">idata<pos:position pos:line="63" pos:column="24"/></name><operator pos:line="63" pos:column="24">-&gt;<pos:position pos:line="63" pos:column="29"/></operator><name pos:line="63" pos:column="26">ctx<pos:position pos:line="63" pos:column="29"/></name><operator pos:line="63" pos:column="29">-&gt;<pos:position pos:line="63" pos:column="34"/></operator><name pos:line="63" pos:column="31">rights<pos:position pos:line="63" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="39">MUTT_ACL_INSERT<pos:position pos:line="63" pos:column="54"/></name></expr></argument>)<pos:position pos:line="63" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">mutt_bit_set<pos:position pos:line="64" pos:column="17"/></name> <argument_list pos:line="64" pos:column="18">(<argument><expr><name><name pos:line="64" pos:column="19">idata<pos:position pos:line="64" pos:column="24"/></name><operator pos:line="64" pos:column="24">-&gt;<pos:position pos:line="64" pos:column="29"/></operator><name pos:line="64" pos:column="26">ctx<pos:position pos:line="64" pos:column="29"/></name><operator pos:line="64" pos:column="29">-&gt;<pos:position pos:line="64" pos:column="34"/></operator><name pos:line="64" pos:column="31">rights<pos:position pos:line="64" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="39">MUTT_ACL_POST<pos:position pos:line="64" pos:column="52"/></name></expr></argument>)<pos:position pos:line="64" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">mutt_bit_set<pos:position pos:line="65" pos:column="17"/></name> <argument_list pos:line="65" pos:column="18">(<argument><expr><name><name pos:line="65" pos:column="19">idata<pos:position pos:line="65" pos:column="24"/></name><operator pos:line="65" pos:column="24">-&gt;<pos:position pos:line="65" pos:column="29"/></operator><name pos:line="65" pos:column="26">ctx<pos:position pos:line="65" pos:column="29"/></name><operator pos:line="65" pos:column="29">-&gt;<pos:position pos:line="65" pos:column="34"/></operator><name pos:line="65" pos:column="31">rights<pos:position pos:line="65" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="39">MUTT_ACL_CREATE<pos:position pos:line="65" pos:column="54"/></name></expr></argument>)<pos:position pos:line="65" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">mutt_bit_set<pos:position pos:line="66" pos:column="17"/></name> <argument_list pos:line="66" pos:column="18">(<argument><expr><name><name pos:line="66" pos:column="19">idata<pos:position pos:line="66" pos:column="24"/></name><operator pos:line="66" pos:column="24">-&gt;<pos:position pos:line="66" pos:column="29"/></operator><name pos:line="66" pos:column="26">ctx<pos:position pos:line="66" pos:column="29"/></name><operator pos:line="66" pos:column="29">-&gt;<pos:position pos:line="66" pos:column="34"/></operator><name pos:line="66" pos:column="31">rights<pos:position pos:line="66" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="39">MUTT_ACL_DELETE<pos:position pos:line="66" pos:column="54"/></name></expr></argument>)<pos:position pos:line="66" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="67" pos:column="4"/></block></else></if>
  <comment type="block" pos:line="68" pos:column="3">/* pipeline the postponed count if possible */</comment>
  <expr_stmt><expr><name><name pos:line="69" pos:column="3">pmx<pos:position pos:line="69" pos:column="6"/></name><operator pos:line="69" pos:column="6">.<pos:position pos:line="69" pos:column="7"/></operator><name pos:line="69" pos:column="7">mbox<pos:position pos:line="69" pos:column="11"/></name></name> <operator pos:line="69" pos:column="12">=<pos:position pos:line="69" pos:column="13"/></operator> <name pos:line="69" pos:column="14">NULL<pos:position pos:line="69" pos:column="18"/></name></expr>;<pos:position pos:line="69" pos:column="19"/></expr_stmt>
  <if pos:line="70" pos:column="3">if <condition pos:line="70" pos:column="6">(<expr><call><name pos:line="70" pos:column="7">mx_is_imap<pos:position pos:line="70" pos:column="17"/></name> <argument_list pos:line="70" pos:column="18">(<argument><expr><name pos:line="70" pos:column="19">Postponed<pos:position pos:line="70" pos:column="28"/></name></expr></argument>)<pos:position pos:line="70" pos:column="29"/></argument_list></call> <operator pos:line="70" pos:column="30">&amp;&amp;<pos:position pos:line="70" pos:column="40"/></operator> <operator pos:line="70" pos:column="33">!<pos:position pos:line="70" pos:column="34"/></operator><call><name pos:line="70" pos:column="34">imap_parse_path<pos:position pos:line="70" pos:column="49"/></name> <argument_list pos:line="70" pos:column="50">(<argument><expr><name pos:line="70" pos:column="51">Postponed<pos:position pos:line="70" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="70" pos:column="62">&amp;<pos:position pos:line="70" pos:column="67"/></operator><name pos:line="70" pos:column="63">pmx<pos:position pos:line="70" pos:column="66"/></name></expr></argument>)<pos:position pos:line="70" pos:column="67"/></argument_list></call>
      <operator pos:line="71" pos:column="7">&amp;&amp;<pos:position pos:line="71" pos:column="17"/></operator> <call><name pos:line="71" pos:column="10">mutt_account_match<pos:position pos:line="71" pos:column="28"/></name> <argument_list pos:line="71" pos:column="29">(<argument><expr><operator pos:line="71" pos:column="30">&amp;<pos:position pos:line="71" pos:column="35"/></operator><name><name pos:line="71" pos:column="31">pmx<pos:position pos:line="71" pos:column="34"/></name><operator pos:line="71" pos:column="34">.<pos:position pos:line="71" pos:column="35"/></operator><name pos:line="71" pos:column="35">account<pos:position pos:line="71" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="44">&amp;<pos:position pos:line="71" pos:column="49"/></operator><name><name pos:line="71" pos:column="45">mx<pos:position pos:line="71" pos:column="47"/></name><operator pos:line="71" pos:column="47">.<pos:position pos:line="71" pos:column="48"/></operator><name pos:line="71" pos:column="48">account<pos:position pos:line="71" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="57"/></condition><then pos:line="71" pos:column="57">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="5">imap_status<pos:position pos:line="72" pos:column="16"/></name> <argument_list pos:line="72" pos:column="17">(<argument><expr><name pos:line="72" pos:column="18">Postponed<pos:position pos:line="72" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="29">1<pos:position pos:line="72" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="32"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="73" pos:column="3">FREE<pos:position pos:line="73" pos:column="7"/></name> <argument_list pos:line="73" pos:column="8">(<argument><expr><operator pos:line="73" pos:column="9">&amp;<pos:position pos:line="73" pos:column="14"/></operator><name><name pos:line="73" pos:column="10">pmx<pos:position pos:line="73" pos:column="13"/></name><operator pos:line="73" pos:column="13">.<pos:position pos:line="73" pos:column="14"/></operator><name pos:line="73" pos:column="14">mbox<pos:position pos:line="73" pos:column="18"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="75" pos:column="3">snprintf<pos:position pos:line="75" pos:column="11"/></name> <argument_list pos:line="75" pos:column="12">(<argument><expr><name pos:line="75" pos:column="13">bufout<pos:position pos:line="75" pos:column="19"/></name></expr></argument>, <argument><expr><sizeof pos:line="75" pos:column="21">sizeof <argument_list pos:line="75" pos:column="28">(<argument><expr><name pos:line="75" pos:column="29">bufout<pos:position pos:line="75" pos:column="35"/></name></expr></argument>)<pos:position pos:line="75" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="38">"%s %s"<pos:position pos:line="75" pos:column="45"/></literal></expr></argument>,
    <argument><expr><ternary><condition><expr><name><name pos:line="76" pos:column="5">ctx<pos:position pos:line="76" pos:column="8"/></name><operator pos:line="76" pos:column="8">-&gt;<pos:position pos:line="76" pos:column="13"/></operator><name pos:line="76" pos:column="10">readonly<pos:position pos:line="76" pos:column="18"/></name></name></expr> ?<pos:position pos:line="76" pos:column="20"/></condition><then pos:line="76" pos:column="20"> <expr><literal type="string" pos:line="76" pos:column="21">"EXAMINE"<pos:position pos:line="76" pos:column="30"/></literal></expr> <pos:position pos:line="76" pos:column="31"/></then><else pos:line="76" pos:column="31">: <expr><literal type="string" pos:line="76" pos:column="33">"SELECT"<pos:position pos:line="76" pos:column="41"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="76" pos:column="43">buf<pos:position pos:line="76" pos:column="46"/></name></expr></argument>)<pos:position pos:line="76" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="48"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="78" pos:column="3">idata<pos:position pos:line="78" pos:column="8"/></name><operator pos:line="78" pos:column="8">-&gt;<pos:position pos:line="78" pos:column="13"/></operator><name pos:line="78" pos:column="10">state<pos:position pos:line="78" pos:column="15"/></name></name> <operator pos:line="78" pos:column="16">=<pos:position pos:line="78" pos:column="17"/></operator> <name pos:line="78" pos:column="18">IMAP_SELECTED<pos:position pos:line="78" pos:column="31"/></name></expr>;<pos:position pos:line="78" pos:column="32"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="80" pos:column="3">imap_cmd_start<pos:position pos:line="80" pos:column="17"/></name> <argument_list pos:line="80" pos:column="18">(<argument><expr><name pos:line="80" pos:column="19">idata<pos:position pos:line="80" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="26">bufout<pos:position pos:line="80" pos:column="32"/></name></expr></argument>)<pos:position pos:line="80" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><name pos:line="82" pos:column="3">status<pos:position pos:line="82" pos:column="9"/></name> <operator pos:line="82" pos:column="10">=<pos:position pos:line="82" pos:column="11"/></operator> <call><name pos:line="82" pos:column="12">imap_mboxcache_get<pos:position pos:line="82" pos:column="30"/></name> <argument_list pos:line="82" pos:column="31">(<argument><expr><name pos:line="82" pos:column="32">idata<pos:position pos:line="82" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="39">idata<pos:position pos:line="82" pos:column="44"/></name><operator pos:line="82" pos:column="44">-&gt;<pos:position pos:line="82" pos:column="49"/></operator><name pos:line="82" pos:column="46">mailbox<pos:position pos:line="82" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="82" pos:column="55">1<pos:position pos:line="82" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="58"/></expr_stmt>

  <do pos:line="84" pos:column="3">do
  <block pos:line="85" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="86" pos:column="5">char<pos:position pos:line="86" pos:column="9"/></name> <modifier pos:line="86" pos:column="10">*<pos:position pos:line="86" pos:column="11"/></modifier></type><name pos:line="86" pos:column="11">pc<pos:position pos:line="86" pos:column="13"/></name></decl>;<pos:position pos:line="86" pos:column="14"/></decl_stmt>

    <if pos:line="88" pos:column="5">if <condition pos:line="88" pos:column="8">(<expr><operator pos:line="88" pos:column="9">(<pos:position pos:line="88" pos:column="10"/></operator><name pos:line="88" pos:column="10">rc<pos:position pos:line="88" pos:column="12"/></name> <operator pos:line="88" pos:column="13">=<pos:position pos:line="88" pos:column="14"/></operator> <call><name pos:line="88" pos:column="15">imap_cmd_step<pos:position pos:line="88" pos:column="28"/></name> <argument_list pos:line="88" pos:column="29">(<argument><expr><name pos:line="88" pos:column="30">idata<pos:position pos:line="88" pos:column="35"/></name></expr></argument>)<pos:position pos:line="88" pos:column="36"/></argument_list></call><operator pos:line="88" pos:column="36">)<pos:position pos:line="88" pos:column="37"/></operator> <operator pos:line="88" pos:column="38">!=<pos:position pos:line="88" pos:column="40"/></operator> <name pos:line="88" pos:column="41">IMAP_CMD_CONTINUE<pos:position pos:line="88" pos:column="58"/></name></expr>)<pos:position pos:line="88" pos:column="59"/></condition><then pos:line="88" pos:column="59">
      <block type="pseudo"><break pos:line="89" pos:column="7">break;<pos:position pos:line="89" pos:column="13"/></break></block></then></if>

    <expr_stmt><expr><name pos:line="91" pos:column="5">pc<pos:position pos:line="91" pos:column="7"/></name> <operator pos:line="91" pos:column="8">=<pos:position pos:line="91" pos:column="9"/></operator> <name><name pos:line="91" pos:column="10">idata<pos:position pos:line="91" pos:column="15"/></name><operator pos:line="91" pos:column="15">-&gt;<pos:position pos:line="91" pos:column="20"/></operator><name pos:line="91" pos:column="17">buf<pos:position pos:line="91" pos:column="20"/></name></name> <operator pos:line="91" pos:column="21">+<pos:position pos:line="91" pos:column="22"/></operator> <literal type="number" pos:line="91" pos:column="23">2<pos:position pos:line="91" pos:column="24"/></literal></expr>;<pos:position pos:line="91" pos:column="25"/></expr_stmt>

    <comment type="block" pos:line="93" pos:column="5">/* Obtain list of available flags here, may be overridden by a
     * PERMANENTFLAGS tag in the OK response */</comment>
    <if pos:line="95" pos:column="5">if <condition pos:line="95" pos:column="8">(<expr><call><name pos:line="95" pos:column="9">ascii_strncasecmp<pos:position pos:line="95" pos:column="26"/></name> <argument_list pos:line="95" pos:column="27">(<argument><expr><literal type="string" pos:line="95" pos:column="28">"FLAGS"<pos:position pos:line="95" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="95" pos:column="37">pc<pos:position pos:line="95" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="95" pos:column="41">5<pos:position pos:line="95" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="43"/></argument_list></call> <operator pos:line="95" pos:column="44">==<pos:position pos:line="95" pos:column="46"/></operator> <literal type="number" pos:line="95" pos:column="47">0<pos:position pos:line="95" pos:column="48"/></literal></expr>)<pos:position pos:line="95" pos:column="49"/></condition><then pos:line="95" pos:column="49">
    <block pos:line="96" pos:column="5">{
      <comment type="block" pos:line="97" pos:column="7">/* don't override PERMANENTFLAGS */</comment>
      <if pos:line="98" pos:column="7">if <condition pos:line="98" pos:column="10">(<expr><operator pos:line="98" pos:column="11">!<pos:position pos:line="98" pos:column="12"/></operator><name><name pos:line="98" pos:column="12">idata<pos:position pos:line="98" pos:column="17"/></name><operator pos:line="98" pos:column="17">-&gt;<pos:position pos:line="98" pos:column="22"/></operator><name pos:line="98" pos:column="19">flags<pos:position pos:line="98" pos:column="24"/></name></name></expr>)<pos:position pos:line="98" pos:column="25"/></condition><then pos:line="98" pos:column="25">
      <block pos:line="99" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="100" pos:column="9">dprint<pos:position pos:line="100" pos:column="15"/></name> <argument_list pos:line="100" pos:column="16">(<argument><expr><literal type="number" pos:line="100" pos:column="17">3<pos:position pos:line="100" pos:column="18"/></literal></expr></argument>, <argument><expr><operator pos:line="100" pos:column="20">(<pos:position pos:line="100" pos:column="21"/></operator><name pos:line="100" pos:column="21">debugfile<pos:position pos:line="100" pos:column="30"/></name><operator pos:line="100" pos:column="30">,<pos:position pos:line="100" pos:column="31"/></operator> <literal type="string" pos:line="100" pos:column="32">"Getting mailbox FLAGS\n"<pos:position pos:line="100" pos:column="57"/></literal><operator pos:line="100" pos:column="57">)<pos:position pos:line="100" pos:column="58"/></operator></expr></argument>)<pos:position pos:line="100" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="60"/></expr_stmt>
	<if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><operator pos:line="101" pos:column="13">(<pos:position pos:line="101" pos:column="14"/></operator><name pos:line="101" pos:column="14">pc<pos:position pos:line="101" pos:column="16"/></name> <operator pos:line="101" pos:column="17">=<pos:position pos:line="101" pos:column="18"/></operator> <call><name pos:line="101" pos:column="19">imap_get_flags<pos:position pos:line="101" pos:column="33"/></name> <argument_list pos:line="101" pos:column="34">(<argument><expr><operator pos:line="101" pos:column="35">&amp;<pos:position pos:line="101" pos:column="40"/></operator><operator pos:line="101" pos:column="36">(<pos:position pos:line="101" pos:column="37"/></operator><name><name pos:line="101" pos:column="37">idata<pos:position pos:line="101" pos:column="42"/></name><operator pos:line="101" pos:column="42">-&gt;<pos:position pos:line="101" pos:column="47"/></operator><name pos:line="101" pos:column="44">flags<pos:position pos:line="101" pos:column="49"/></name></name><operator pos:line="101" pos:column="49">)<pos:position pos:line="101" pos:column="50"/></operator></expr></argument>, <argument><expr><name pos:line="101" pos:column="52">pc<pos:position pos:line="101" pos:column="54"/></name></expr></argument>)<pos:position pos:line="101" pos:column="55"/></argument_list></call><operator pos:line="101" pos:column="55">)<pos:position pos:line="101" pos:column="56"/></operator> <operator pos:line="101" pos:column="57">==<pos:position pos:line="101" pos:column="59"/></operator> <name pos:line="101" pos:column="60">NULL<pos:position pos:line="101" pos:column="64"/></name></expr>)<pos:position pos:line="101" pos:column="65"/></condition><then pos:line="101" pos:column="65">
	  <block type="pseudo"><goto pos:line="102" pos:column="11">goto <name pos:line="102" pos:column="16">fail<pos:position pos:line="102" pos:column="20"/></name>;<pos:position pos:line="102" pos:column="21"/></goto></block></then></if>
      }<pos:position pos:line="103" pos:column="8"/></block></then></if>
    }<pos:position pos:line="104" pos:column="6"/></block></then>
    <comment type="block" pos:line="105" pos:column="5">/* PERMANENTFLAGS are massaged to look like FLAGS, then override FLAGS */</comment>
    <elseif pos:line="106" pos:column="5">else <if pos:line="106" pos:column="10">if <condition pos:line="106" pos:column="13">(<expr><call><name pos:line="106" pos:column="14">ascii_strncasecmp<pos:position pos:line="106" pos:column="31"/></name> <argument_list pos:line="106" pos:column="32">(<argument><expr><literal type="string" pos:line="106" pos:column="33">"OK [PERMANENTFLAGS"<pos:position pos:line="106" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="55">pc<pos:position pos:line="106" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="106" pos:column="59">18<pos:position pos:line="106" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="62"/></argument_list></call> <operator pos:line="106" pos:column="63">==<pos:position pos:line="106" pos:column="65"/></operator> <literal type="number" pos:line="106" pos:column="66">0<pos:position pos:line="106" pos:column="67"/></literal></expr>)<pos:position pos:line="106" pos:column="68"/></condition><then pos:line="106" pos:column="68">
    <block pos:line="107" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="108" pos:column="7">dprint<pos:position pos:line="108" pos:column="13"/></name> <argument_list pos:line="108" pos:column="14">(<argument><expr><literal type="number" pos:line="108" pos:column="15">3<pos:position pos:line="108" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="108" pos:column="18">(<pos:position pos:line="108" pos:column="19"/></operator><name pos:line="108" pos:column="19">debugfile<pos:position pos:line="108" pos:column="28"/></name><operator pos:line="108" pos:column="28">,<pos:position pos:line="108" pos:column="29"/></operator> <literal type="string" pos:line="108" pos:column="30">"Getting mailbox PERMANENTFLAGS\n"<pos:position pos:line="108" pos:column="64"/></literal><operator pos:line="108" pos:column="64">)<pos:position pos:line="108" pos:column="65"/></operator></expr></argument>)<pos:position pos:line="108" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="67"/></expr_stmt>
      <comment type="block" pos:line="109" pos:column="7">/* safe to call on NULL */</comment>
      <expr_stmt><expr><call><name pos:line="110" pos:column="7">mutt_free_list<pos:position pos:line="110" pos:column="21"/></name> <argument_list pos:line="110" pos:column="22">(<argument><expr><operator pos:line="110" pos:column="23">&amp;<pos:position pos:line="110" pos:column="28"/></operator><operator pos:line="110" pos:column="24">(<pos:position pos:line="110" pos:column="25"/></operator><name><name pos:line="110" pos:column="25">idata<pos:position pos:line="110" pos:column="30"/></name><operator pos:line="110" pos:column="30">-&gt;<pos:position pos:line="110" pos:column="35"/></operator><name pos:line="110" pos:column="32">flags<pos:position pos:line="110" pos:column="37"/></name></name><operator pos:line="110" pos:column="37">)<pos:position pos:line="110" pos:column="38"/></operator></expr></argument>)<pos:position pos:line="110" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="40"/></expr_stmt>
      <comment type="block" pos:line="111" pos:column="7">/* skip "OK [PERMANENT" so syntax is the same as FLAGS */</comment>
      <expr_stmt><expr><name pos:line="112" pos:column="7">pc<pos:position pos:line="112" pos:column="9"/></name> <operator pos:line="112" pos:column="10">+=<pos:position pos:line="112" pos:column="12"/></operator> <literal type="number" pos:line="112" pos:column="13">13<pos:position pos:line="112" pos:column="15"/></literal></expr>;<pos:position pos:line="112" pos:column="16"/></expr_stmt>
      <if pos:line="113" pos:column="7">if <condition pos:line="113" pos:column="10">(<expr><operator pos:line="113" pos:column="11">(<pos:position pos:line="113" pos:column="12"/></operator><name pos:line="113" pos:column="12">pc<pos:position pos:line="113" pos:column="14"/></name> <operator pos:line="113" pos:column="15">=<pos:position pos:line="113" pos:column="16"/></operator> <call><name pos:line="113" pos:column="17">imap_get_flags<pos:position pos:line="113" pos:column="31"/></name> <argument_list pos:line="113" pos:column="32">(<argument><expr><operator pos:line="113" pos:column="33">&amp;<pos:position pos:line="113" pos:column="38"/></operator><operator pos:line="113" pos:column="34">(<pos:position pos:line="113" pos:column="35"/></operator><name><name pos:line="113" pos:column="35">idata<pos:position pos:line="113" pos:column="40"/></name><operator pos:line="113" pos:column="40">-&gt;<pos:position pos:line="113" pos:column="45"/></operator><name pos:line="113" pos:column="42">flags<pos:position pos:line="113" pos:column="47"/></name></name><operator pos:line="113" pos:column="47">)<pos:position pos:line="113" pos:column="48"/></operator></expr></argument>, <argument><expr><name pos:line="113" pos:column="50">pc<pos:position pos:line="113" pos:column="52"/></name></expr></argument>)<pos:position pos:line="113" pos:column="53"/></argument_list></call><operator pos:line="113" pos:column="53">)<pos:position pos:line="113" pos:column="54"/></operator> <operator pos:line="113" pos:column="55">==<pos:position pos:line="113" pos:column="57"/></operator> <name pos:line="113" pos:column="58">NULL<pos:position pos:line="113" pos:column="62"/></name></expr>)<pos:position pos:line="113" pos:column="63"/></condition><then pos:line="113" pos:column="63">
	<block type="pseudo"><goto pos:line="114" pos:column="9">goto <name pos:line="114" pos:column="14">fail<pos:position pos:line="114" pos:column="18"/></name>;<pos:position pos:line="114" pos:column="19"/></goto></block></then></if>
    }<pos:position pos:line="115" pos:column="6"/></block></then></if></elseif>
    <comment type="block" pos:line="116" pos:column="5">/* save UIDVALIDITY for the header cache */</comment>
    <elseif pos:line="117" pos:column="5">else <if pos:line="117" pos:column="10">if <condition pos:line="117" pos:column="13">(<expr><call><name pos:line="117" pos:column="14">ascii_strncasecmp<pos:position pos:line="117" pos:column="31"/></name> <argument_list pos:line="117" pos:column="32">(<argument><expr><literal type="string" pos:line="117" pos:column="33">"OK [UIDVALIDITY"<pos:position pos:line="117" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="117" pos:column="52">pc<pos:position pos:line="117" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="117" pos:column="56">14<pos:position pos:line="117" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="59"/></argument_list></call> <operator pos:line="117" pos:column="60">==<pos:position pos:line="117" pos:column="62"/></operator> <literal type="number" pos:line="117" pos:column="63">0<pos:position pos:line="117" pos:column="64"/></literal></expr>)<pos:position pos:line="117" pos:column="65"/></condition><then pos:line="117" pos:column="65">
    <block pos:line="118" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="119" pos:column="7">dprint<pos:position pos:line="119" pos:column="13"/></name> <argument_list pos:line="119" pos:column="14">(<argument><expr><literal type="number" pos:line="119" pos:column="15">3<pos:position pos:line="119" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="119" pos:column="18">(<pos:position pos:line="119" pos:column="19"/></operator><name pos:line="119" pos:column="19">debugfile<pos:position pos:line="119" pos:column="28"/></name><operator pos:line="119" pos:column="28">,<pos:position pos:line="119" pos:column="29"/></operator> <literal type="string" pos:line="119" pos:column="30">"Getting mailbox UIDVALIDITY\n"<pos:position pos:line="119" pos:column="61"/></literal><operator pos:line="119" pos:column="61">)<pos:position pos:line="119" pos:column="62"/></operator></expr></argument>)<pos:position pos:line="119" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><name pos:line="120" pos:column="7">pc<pos:position pos:line="120" pos:column="9"/></name> <operator pos:line="120" pos:column="10">+=<pos:position pos:line="120" pos:column="12"/></operator> <literal type="number" pos:line="120" pos:column="13">3<pos:position pos:line="120" pos:column="14"/></literal></expr>;<pos:position pos:line="120" pos:column="15"/></expr_stmt>
      <expr_stmt><expr><name pos:line="121" pos:column="7">pc<pos:position pos:line="121" pos:column="9"/></name> <operator pos:line="121" pos:column="10">=<pos:position pos:line="121" pos:column="11"/></operator> <call><name pos:line="121" pos:column="12">imap_next_word<pos:position pos:line="121" pos:column="26"/></name> <argument_list pos:line="121" pos:column="27">(<argument><expr><name pos:line="121" pos:column="28">pc<pos:position pos:line="121" pos:column="30"/></name></expr></argument>)<pos:position pos:line="121" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="122" pos:column="7">idata<pos:position pos:line="122" pos:column="12"/></name><operator pos:line="122" pos:column="12">-&gt;<pos:position pos:line="122" pos:column="17"/></operator><name pos:line="122" pos:column="14">uid_validity<pos:position pos:line="122" pos:column="26"/></name></name> <operator pos:line="122" pos:column="27">=<pos:position pos:line="122" pos:column="28"/></operator> <call><name pos:line="122" pos:column="29">strtol<pos:position pos:line="122" pos:column="35"/></name> <argument_list pos:line="122" pos:column="36">(<argument><expr><name pos:line="122" pos:column="37">pc<pos:position pos:line="122" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="41">NULL<pos:position pos:line="122" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="122" pos:column="47">10<pos:position pos:line="122" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="123" pos:column="7">status<pos:position pos:line="123" pos:column="13"/></name><operator pos:line="123" pos:column="13">-&gt;<pos:position pos:line="123" pos:column="18"/></operator><name pos:line="123" pos:column="15">uidvalidity<pos:position pos:line="123" pos:column="26"/></name></name> <operator pos:line="123" pos:column="27">=<pos:position pos:line="123" pos:column="28"/></operator> <name><name pos:line="123" pos:column="29">idata<pos:position pos:line="123" pos:column="34"/></name><operator pos:line="123" pos:column="34">-&gt;<pos:position pos:line="123" pos:column="39"/></operator><name pos:line="123" pos:column="36">uid_validity<pos:position pos:line="123" pos:column="48"/></name></name></expr>;<pos:position pos:line="123" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="124" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="125" pos:column="5">else <if pos:line="125" pos:column="10">if <condition pos:line="125" pos:column="13">(<expr><call><name pos:line="125" pos:column="14">ascii_strncasecmp<pos:position pos:line="125" pos:column="31"/></name> <argument_list pos:line="125" pos:column="32">(<argument><expr><literal type="string" pos:line="125" pos:column="33">"OK [UIDNEXT"<pos:position pos:line="125" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="48">pc<pos:position pos:line="125" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="125" pos:column="52">11<pos:position pos:line="125" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="55"/></argument_list></call> <operator pos:line="125" pos:column="56">==<pos:position pos:line="125" pos:column="58"/></operator> <literal type="number" pos:line="125" pos:column="59">0<pos:position pos:line="125" pos:column="60"/></literal></expr>)<pos:position pos:line="125" pos:column="61"/></condition><then pos:line="125" pos:column="61">
    <block pos:line="126" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="127" pos:column="7">dprint<pos:position pos:line="127" pos:column="13"/></name> <argument_list pos:line="127" pos:column="14">(<argument><expr><literal type="number" pos:line="127" pos:column="15">3<pos:position pos:line="127" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="127" pos:column="18">(<pos:position pos:line="127" pos:column="19"/></operator><name pos:line="127" pos:column="19">debugfile<pos:position pos:line="127" pos:column="28"/></name><operator pos:line="127" pos:column="28">,<pos:position pos:line="127" pos:column="29"/></operator> <literal type="string" pos:line="127" pos:column="30">"Getting mailbox UIDNEXT\n"<pos:position pos:line="127" pos:column="57"/></literal><operator pos:line="127" pos:column="57">)<pos:position pos:line="127" pos:column="58"/></operator></expr></argument>)<pos:position pos:line="127" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="60"/></expr_stmt>
      <expr_stmt><expr><name pos:line="128" pos:column="7">pc<pos:position pos:line="128" pos:column="9"/></name> <operator pos:line="128" pos:column="10">+=<pos:position pos:line="128" pos:column="12"/></operator> <literal type="number" pos:line="128" pos:column="13">3<pos:position pos:line="128" pos:column="14"/></literal></expr>;<pos:position pos:line="128" pos:column="15"/></expr_stmt>
      <expr_stmt><expr><name pos:line="129" pos:column="7">pc<pos:position pos:line="129" pos:column="9"/></name> <operator pos:line="129" pos:column="10">=<pos:position pos:line="129" pos:column="11"/></operator> <call><name pos:line="129" pos:column="12">imap_next_word<pos:position pos:line="129" pos:column="26"/></name> <argument_list pos:line="129" pos:column="27">(<argument><expr><name pos:line="129" pos:column="28">pc<pos:position pos:line="129" pos:column="30"/></name></expr></argument>)<pos:position pos:line="129" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="130" pos:column="7">idata<pos:position pos:line="130" pos:column="12"/></name><operator pos:line="130" pos:column="12">-&gt;<pos:position pos:line="130" pos:column="17"/></operator><name pos:line="130" pos:column="14">uidnext<pos:position pos:line="130" pos:column="21"/></name></name> <operator pos:line="130" pos:column="22">=<pos:position pos:line="130" pos:column="23"/></operator> <call><name pos:line="130" pos:column="24">strtol<pos:position pos:line="130" pos:column="30"/></name> <argument_list pos:line="130" pos:column="31">(<argument><expr><name pos:line="130" pos:column="32">pc<pos:position pos:line="130" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="36">NULL<pos:position pos:line="130" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="130" pos:column="42">10<pos:position pos:line="130" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="131" pos:column="7">status<pos:position pos:line="131" pos:column="13"/></name><operator pos:line="131" pos:column="13">-&gt;<pos:position pos:line="131" pos:column="18"/></operator><name pos:line="131" pos:column="15">uidnext<pos:position pos:line="131" pos:column="22"/></name></name> <operator pos:line="131" pos:column="23">=<pos:position pos:line="131" pos:column="24"/></operator> <name><name pos:line="131" pos:column="25">idata<pos:position pos:line="131" pos:column="30"/></name><operator pos:line="131" pos:column="30">-&gt;<pos:position pos:line="131" pos:column="35"/></operator><name pos:line="131" pos:column="32">uidnext<pos:position pos:line="131" pos:column="39"/></name></name></expr>;<pos:position pos:line="131" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="132" pos:column="6"/></block></then></if></elseif>
    <else pos:line="133" pos:column="5">else
    <block pos:line="134" pos:column="5">{
      <expr_stmt><expr><name pos:line="135" pos:column="7">pc<pos:position pos:line="135" pos:column="9"/></name> <operator pos:line="135" pos:column="10">=<pos:position pos:line="135" pos:column="11"/></operator> <call><name pos:line="135" pos:column="12">imap_next_word<pos:position pos:line="135" pos:column="26"/></name> <argument_list pos:line="135" pos:column="27">(<argument><expr><name pos:line="135" pos:column="28">pc<pos:position pos:line="135" pos:column="30"/></name></expr></argument>)<pos:position pos:line="135" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="32"/></expr_stmt>
      <if pos:line="136" pos:column="7">if <condition pos:line="136" pos:column="10">(<expr><operator pos:line="136" pos:column="11">!<pos:position pos:line="136" pos:column="12"/></operator><call><name pos:line="136" pos:column="12">ascii_strncasecmp<pos:position pos:line="136" pos:column="29"/></name> <argument_list pos:line="136" pos:column="30">(<argument><expr><literal type="string" pos:line="136" pos:column="31">"EXISTS"<pos:position pos:line="136" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="136" pos:column="41">pc<pos:position pos:line="136" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="136" pos:column="45">6<pos:position pos:line="136" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="136" pos:column="48"/></condition><then pos:line="136" pos:column="48">
      <block pos:line="137" pos:column="7">{
	<expr_stmt><expr><name pos:line="138" pos:column="9">count<pos:position pos:line="138" pos:column="14"/></name> <operator pos:line="138" pos:column="15">=<pos:position pos:line="138" pos:column="16"/></operator> <name><name pos:line="138" pos:column="17">idata<pos:position pos:line="138" pos:column="22"/></name><operator pos:line="138" pos:column="22">-&gt;<pos:position pos:line="138" pos:column="27"/></operator><name pos:line="138" pos:column="24">newMailCount<pos:position pos:line="138" pos:column="36"/></name></name></expr>;<pos:position pos:line="138" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="139" pos:column="9">idata<pos:position pos:line="139" pos:column="14"/></name><operator pos:line="139" pos:column="14">-&gt;<pos:position pos:line="139" pos:column="19"/></operator><name pos:line="139" pos:column="16">newMailCount<pos:position pos:line="139" pos:column="28"/></name></name> <operator pos:line="139" pos:column="29">=<pos:position pos:line="139" pos:column="30"/></operator> <literal type="number" pos:line="139" pos:column="31">0<pos:position pos:line="139" pos:column="32"/></literal></expr>;<pos:position pos:line="139" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="140" pos:column="8"/></block></then></if>
    }<pos:position pos:line="141" pos:column="6"/></block></else></if>
  }<pos:position pos:line="142" pos:column="4"/></block>
  while <condition pos:line="143" pos:column="9">(<expr><name pos:line="143" pos:column="10">rc<pos:position pos:line="143" pos:column="12"/></name> <operator pos:line="143" pos:column="13">==<pos:position pos:line="143" pos:column="15"/></operator> <name pos:line="143" pos:column="16">IMAP_CMD_CONTINUE<pos:position pos:line="143" pos:column="33"/></name></expr>)<pos:position pos:line="143" pos:column="34"/></condition>;<pos:position pos:line="143" pos:column="35"/></do>

  <if pos:line="145" pos:column="3">if <condition pos:line="145" pos:column="6">(<expr><name pos:line="145" pos:column="7">rc<pos:position pos:line="145" pos:column="9"/></name> <operator pos:line="145" pos:column="10">==<pos:position pos:line="145" pos:column="12"/></operator> <name pos:line="145" pos:column="13">IMAP_CMD_NO<pos:position pos:line="145" pos:column="24"/></name></expr>)<pos:position pos:line="145" pos:column="25"/></condition><then pos:line="145" pos:column="25">
  <block pos:line="146" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="147" pos:column="5">char<pos:position pos:line="147" pos:column="9"/></name> <modifier pos:line="147" pos:column="10">*<pos:position pos:line="147" pos:column="11"/></modifier></type><name pos:line="147" pos:column="11">s<pos:position pos:line="147" pos:column="12"/></name></decl>;<pos:position pos:line="147" pos:column="13"/></decl_stmt>
    <expr_stmt><expr><name pos:line="148" pos:column="5">s<pos:position pos:line="148" pos:column="6"/></name> <operator pos:line="148" pos:column="7">=<pos:position pos:line="148" pos:column="8"/></operator> <call><name pos:line="148" pos:column="9">imap_next_word<pos:position pos:line="148" pos:column="23"/></name> <argument_list pos:line="148" pos:column="24">(<argument><expr><name><name pos:line="148" pos:column="25">idata<pos:position pos:line="148" pos:column="30"/></name><operator pos:line="148" pos:column="30">-&gt;<pos:position pos:line="148" pos:column="35"/></operator><name pos:line="148" pos:column="32">buf<pos:position pos:line="148" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="148" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="37"/></expr_stmt> <comment type="block" pos:line="148" pos:column="38">/* skip seq */</comment>
    <expr_stmt><expr><name pos:line="149" pos:column="5">s<pos:position pos:line="149" pos:column="6"/></name> <operator pos:line="149" pos:column="7">=<pos:position pos:line="149" pos:column="8"/></operator> <call><name pos:line="149" pos:column="9">imap_next_word<pos:position pos:line="149" pos:column="23"/></name> <argument_list pos:line="149" pos:column="24">(<argument><expr><name pos:line="149" pos:column="25">s<pos:position pos:line="149" pos:column="26"/></name></expr></argument>)<pos:position pos:line="149" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="28"/></expr_stmt> <comment type="block" pos:line="149" pos:column="29">/* Skip response */</comment>
    <expr_stmt><expr><call><name pos:line="150" pos:column="5">mutt_error<pos:position pos:line="150" pos:column="15"/></name> <argument_list pos:line="150" pos:column="16">(<argument><expr><literal type="string" pos:line="150" pos:column="17">"%s"<pos:position pos:line="150" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="150" pos:column="23">s<pos:position pos:line="150" pos:column="24"/></name></expr></argument>)<pos:position pos:line="150" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="151" pos:column="5">mutt_sleep<pos:position pos:line="151" pos:column="15"/></name> <argument_list pos:line="151" pos:column="16">(<argument><expr><literal type="number" pos:line="151" pos:column="17">2<pos:position pos:line="151" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="151" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="20"/></expr_stmt>
    <goto pos:line="152" pos:column="5">goto <name pos:line="152" pos:column="10">fail<pos:position pos:line="152" pos:column="14"/></name>;<pos:position pos:line="152" pos:column="15"/></goto>
  }<pos:position pos:line="153" pos:column="4"/></block></then></if>

  <if pos:line="155" pos:column="3">if <condition pos:line="155" pos:column="6">(<expr><name pos:line="155" pos:column="7">rc<pos:position pos:line="155" pos:column="9"/></name> <operator pos:line="155" pos:column="10">!=<pos:position pos:line="155" pos:column="12"/></operator> <name pos:line="155" pos:column="13">IMAP_CMD_OK<pos:position pos:line="155" pos:column="24"/></name></expr>)<pos:position pos:line="155" pos:column="25"/></condition><then pos:line="155" pos:column="25">
    <block type="pseudo"><goto pos:line="156" pos:column="5">goto <name pos:line="156" pos:column="10">fail<pos:position pos:line="156" pos:column="14"/></name>;<pos:position pos:line="156" pos:column="15"/></goto></block></then></if>

  <comment type="block" pos:line="158" pos:column="3">/* check for READ-ONLY notification */</comment>
  <if pos:line="159" pos:column="3">if <condition pos:line="159" pos:column="6">(<expr><operator pos:line="159" pos:column="7">!<pos:position pos:line="159" pos:column="8"/></operator><call><name pos:line="159" pos:column="8">ascii_strncasecmp<pos:position pos:line="159" pos:column="25"/></name> <argument_list pos:line="159" pos:column="26">(<argument><expr><call><name pos:line="159" pos:column="27">imap_get_qualifier<pos:position pos:line="159" pos:column="45"/></name> <argument_list pos:line="159" pos:column="46">(<argument><expr><name><name pos:line="159" pos:column="47">idata<pos:position pos:line="159" pos:column="52"/></name><operator pos:line="159" pos:column="52">-&gt;<pos:position pos:line="159" pos:column="57"/></operator><name pos:line="159" pos:column="54">buf<pos:position pos:line="159" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="159" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="159" pos:column="60">"[READ-ONLY]"<pos:position pos:line="159" pos:column="73"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="159" pos:column="75">11<pos:position pos:line="159" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="159" pos:column="78"/></argument_list></call>  \
  <operator pos:line="160" pos:column="3">&amp;&amp;<pos:position pos:line="160" pos:column="13"/></operator> <operator pos:line="160" pos:column="6">!<pos:position pos:line="160" pos:column="7"/></operator><call><name pos:line="160" pos:column="7">mutt_bit_isset<pos:position pos:line="160" pos:column="21"/></name> <argument_list pos:line="160" pos:column="22">(<argument><expr><name><name pos:line="160" pos:column="23">idata<pos:position pos:line="160" pos:column="28"/></name><operator pos:line="160" pos:column="28">-&gt;<pos:position pos:line="160" pos:column="33"/></operator><name pos:line="160" pos:column="30">capabilities<pos:position pos:line="160" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="160" pos:column="44">ACL<pos:position pos:line="160" pos:column="47"/></name></expr></argument>)<pos:position pos:line="160" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="160" pos:column="49"/></condition><then pos:line="160" pos:column="49">
  <block pos:line="161" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="162" pos:column="5">dprint<pos:position pos:line="162" pos:column="11"/></name> <argument_list pos:line="162" pos:column="12">(<argument><expr><literal type="number" pos:line="162" pos:column="13">2<pos:position pos:line="162" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="162" pos:column="16">(<pos:position pos:line="162" pos:column="17"/></operator><name pos:line="162" pos:column="17">debugfile<pos:position pos:line="162" pos:column="26"/></name><operator pos:line="162" pos:column="26">,<pos:position pos:line="162" pos:column="27"/></operator> <literal type="string" pos:line="162" pos:column="28">"Mailbox is read-only.\n"<pos:position pos:line="162" pos:column="53"/></literal><operator pos:line="162" pos:column="53">)<pos:position pos:line="162" pos:column="54"/></operator></expr></argument>)<pos:position pos:line="162" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="163" pos:column="5">ctx<pos:position pos:line="163" pos:column="8"/></name><operator pos:line="163" pos:column="8">-&gt;<pos:position pos:line="163" pos:column="13"/></operator><name pos:line="163" pos:column="10">readonly<pos:position pos:line="163" pos:column="18"/></name></name> <operator pos:line="163" pos:column="19">=<pos:position pos:line="163" pos:column="20"/></operator> <literal type="number" pos:line="163" pos:column="21">1<pos:position pos:line="163" pos:column="22"/></literal></expr>;<pos:position pos:line="163" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="164" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="166" pos:column="1">#<cpp:directive pos:line="166" pos:column="2">ifdef<pos:position pos:line="166" pos:column="7"/></cpp:directive> <name pos:line="166" pos:column="8">DEBUG<pos:position pos:line="166" pos:column="13"/></name></cpp:ifdef>
  <comment type="block" pos:line="167" pos:column="3">/* dump the mailbox flags we've found */</comment>
  <if pos:line="168" pos:column="3">if <condition pos:line="168" pos:column="6">(<expr><name pos:line="168" pos:column="7">debuglevel<pos:position pos:line="168" pos:column="17"/></name> <operator pos:line="168" pos:column="18">&gt;<pos:position pos:line="168" pos:column="22"/></operator> <literal type="number" pos:line="168" pos:column="20">2<pos:position pos:line="168" pos:column="21"/></literal></expr>)<pos:position pos:line="168" pos:column="22"/></condition><then pos:line="168" pos:column="22">
  <block pos:line="169" pos:column="3">{
    <if pos:line="170" pos:column="5">if <condition pos:line="170" pos:column="8">(<expr><operator pos:line="170" pos:column="9">!<pos:position pos:line="170" pos:column="10"/></operator><name><name pos:line="170" pos:column="10">idata<pos:position pos:line="170" pos:column="15"/></name><operator pos:line="170" pos:column="15">-&gt;<pos:position pos:line="170" pos:column="20"/></operator><name pos:line="170" pos:column="17">flags<pos:position pos:line="170" pos:column="22"/></name></name></expr>)<pos:position pos:line="170" pos:column="23"/></condition><then pos:line="170" pos:column="23">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="171" pos:column="7">dprint<pos:position pos:line="171" pos:column="13"/></name> <argument_list pos:line="171" pos:column="14">(<argument><expr><literal type="number" pos:line="171" pos:column="15">3<pos:position pos:line="171" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="171" pos:column="18">(<pos:position pos:line="171" pos:column="19"/></operator><name pos:line="171" pos:column="19">debugfile<pos:position pos:line="171" pos:column="28"/></name><operator pos:line="171" pos:column="28">,<pos:position pos:line="171" pos:column="29"/></operator> <literal type="string" pos:line="171" pos:column="30">"No folder flags found\n"<pos:position pos:line="171" pos:column="55"/></literal><operator pos:line="171" pos:column="55">)<pos:position pos:line="171" pos:column="56"/></operator></expr></argument>)<pos:position pos:line="171" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="58"/></expr_stmt></block></then>
    <else pos:line="172" pos:column="5">else
    <block pos:line="173" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="174" pos:column="7">LIST<pos:position pos:line="174" pos:column="11"/></name><modifier pos:line="174" pos:column="11">*<pos:position pos:line="174" pos:column="12"/></modifier></type> <name pos:line="174" pos:column="13">t<pos:position pos:line="174" pos:column="14"/></name> <init pos:line="174" pos:column="15">= <expr><name><name pos:line="174" pos:column="17">idata<pos:position pos:line="174" pos:column="22"/></name><operator pos:line="174" pos:column="22">-&gt;<pos:position pos:line="174" pos:column="27"/></operator><name pos:line="174" pos:column="24">flags<pos:position pos:line="174" pos:column="29"/></name></name></expr></init></decl>;<pos:position pos:line="174" pos:column="30"/></decl_stmt>

      <expr_stmt><expr><call><name pos:line="176" pos:column="7">dprint<pos:position pos:line="176" pos:column="13"/></name> <argument_list pos:line="176" pos:column="14">(<argument><expr><literal type="number" pos:line="176" pos:column="15">3<pos:position pos:line="176" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="176" pos:column="18">(<pos:position pos:line="176" pos:column="19"/></operator><name pos:line="176" pos:column="19">debugfile<pos:position pos:line="176" pos:column="28"/></name><operator pos:line="176" pos:column="28">,<pos:position pos:line="176" pos:column="29"/></operator> <literal type="string" pos:line="176" pos:column="30">"Mailbox flags: "<pos:position pos:line="176" pos:column="47"/></literal><operator pos:line="176" pos:column="47">)<pos:position pos:line="176" pos:column="48"/></operator></expr></argument>)<pos:position pos:line="176" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="50"/></expr_stmt>

      <expr_stmt><expr><name pos:line="178" pos:column="7">t<pos:position pos:line="178" pos:column="8"/></name> <operator pos:line="178" pos:column="9">=<pos:position pos:line="178" pos:column="10"/></operator> <name><name pos:line="178" pos:column="11">t<pos:position pos:line="178" pos:column="12"/></name><operator pos:line="178" pos:column="12">-&gt;<pos:position pos:line="178" pos:column="17"/></operator><name pos:line="178" pos:column="14">next<pos:position pos:line="178" pos:column="18"/></name></name></expr>;<pos:position pos:line="178" pos:column="19"/></expr_stmt>
      <while pos:line="179" pos:column="7">while <condition pos:line="179" pos:column="13">(<expr><name pos:line="179" pos:column="14">t<pos:position pos:line="179" pos:column="15"/></name></expr>)<pos:position pos:line="179" pos:column="16"/></condition>
      <block pos:line="180" pos:column="7">{
        <expr_stmt><expr><call><name pos:line="181" pos:column="9">dprint<pos:position pos:line="181" pos:column="15"/></name> <argument_list pos:line="181" pos:column="16">(<argument><expr><literal type="number" pos:line="181" pos:column="17">3<pos:position pos:line="181" pos:column="18"/></literal></expr></argument>, <argument><expr><operator pos:line="181" pos:column="20">(<pos:position pos:line="181" pos:column="21"/></operator><name pos:line="181" pos:column="21">debugfile<pos:position pos:line="181" pos:column="30"/></name><operator pos:line="181" pos:column="30">,<pos:position pos:line="181" pos:column="31"/></operator> <literal type="string" pos:line="181" pos:column="32">"[%s] "<pos:position pos:line="181" pos:column="39"/></literal><operator pos:line="181" pos:column="39">,<pos:position pos:line="181" pos:column="40"/></operator> <name><name pos:line="181" pos:column="41">t<pos:position pos:line="181" pos:column="42"/></name><operator pos:line="181" pos:column="42">-&gt;<pos:position pos:line="181" pos:column="47"/></operator><name pos:line="181" pos:column="44">data<pos:position pos:line="181" pos:column="48"/></name></name><operator pos:line="181" pos:column="48">)<pos:position pos:line="181" pos:column="49"/></operator></expr></argument>)<pos:position pos:line="181" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><name pos:line="182" pos:column="9">t<pos:position pos:line="182" pos:column="10"/></name> <operator pos:line="182" pos:column="11">=<pos:position pos:line="182" pos:column="12"/></operator> <name><name pos:line="182" pos:column="13">t<pos:position pos:line="182" pos:column="14"/></name><operator pos:line="182" pos:column="14">-&gt;<pos:position pos:line="182" pos:column="19"/></operator><name pos:line="182" pos:column="16">next<pos:position pos:line="182" pos:column="20"/></name></name></expr>;<pos:position pos:line="182" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="183" pos:column="8"/></block></while>
      <expr_stmt><expr><call><name pos:line="184" pos:column="7">dprint<pos:position pos:line="184" pos:column="13"/></name> <argument_list pos:line="184" pos:column="14">(<argument><expr><literal type="number" pos:line="184" pos:column="15">3<pos:position pos:line="184" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="184" pos:column="18">(<pos:position pos:line="184" pos:column="19"/></operator><name pos:line="184" pos:column="19">debugfile<pos:position pos:line="184" pos:column="28"/></name><operator pos:line="184" pos:column="28">,<pos:position pos:line="184" pos:column="29"/></operator> <literal type="string" pos:line="184" pos:column="30">"\n"<pos:position pos:line="184" pos:column="34"/></literal><operator pos:line="184" pos:column="34">)<pos:position pos:line="184" pos:column="35"/></operator></expr></argument>)<pos:position pos:line="184" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="185" pos:column="6"/></block></else></if>
  }<pos:position pos:line="186" pos:column="4"/></block></then></if>
<cpp:endif pos:line="187" pos:column="1">#<cpp:directive pos:line="187" pos:column="2">endif<pos:position pos:line="187" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="189" pos:column="3">if <condition pos:line="189" pos:column="6">(<expr><operator pos:line="189" pos:column="7">!<pos:position pos:line="189" pos:column="8"/></operator><operator pos:line="189" pos:column="8">(<pos:position pos:line="189" pos:column="9"/></operator><call><name pos:line="189" pos:column="9">mutt_bit_isset<pos:position pos:line="189" pos:column="23"/></name><argument_list pos:line="189" pos:column="23">(<argument><expr><name><name pos:line="189" pos:column="24">idata<pos:position pos:line="189" pos:column="29"/></name><operator pos:line="189" pos:column="29">-&gt;<pos:position pos:line="189" pos:column="34"/></operator><name pos:line="189" pos:column="31">ctx<pos:position pos:line="189" pos:column="34"/></name><operator pos:line="189" pos:column="34">-&gt;<pos:position pos:line="189" pos:column="39"/></operator><name pos:line="189" pos:column="36">rights<pos:position pos:line="189" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="189" pos:column="44">MUTT_ACL_DELETE<pos:position pos:line="189" pos:column="59"/></name></expr></argument>)<pos:position pos:line="189" pos:column="60"/></argument_list></call> <operator pos:line="189" pos:column="61">||<pos:position pos:line="189" pos:column="63"/></operator>
        <call><name pos:line="190" pos:column="9">mutt_bit_isset<pos:position pos:line="190" pos:column="23"/></name><argument_list pos:line="190" pos:column="23">(<argument><expr><name><name pos:line="190" pos:column="24">idata<pos:position pos:line="190" pos:column="29"/></name><operator pos:line="190" pos:column="29">-&gt;<pos:position pos:line="190" pos:column="34"/></operator><name pos:line="190" pos:column="31">ctx<pos:position pos:line="190" pos:column="34"/></name><operator pos:line="190" pos:column="34">-&gt;<pos:position pos:line="190" pos:column="39"/></operator><name pos:line="190" pos:column="36">rights<pos:position pos:line="190" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="190" pos:column="44">MUTT_ACL_SEEN<pos:position pos:line="190" pos:column="57"/></name></expr></argument>)<pos:position pos:line="190" pos:column="58"/></argument_list></call> <operator pos:line="190" pos:column="59">||<pos:position pos:line="190" pos:column="61"/></operator>
        <call><name pos:line="191" pos:column="9">mutt_bit_isset<pos:position pos:line="191" pos:column="23"/></name><argument_list pos:line="191" pos:column="23">(<argument><expr><name><name pos:line="191" pos:column="24">idata<pos:position pos:line="191" pos:column="29"/></name><operator pos:line="191" pos:column="29">-&gt;<pos:position pos:line="191" pos:column="34"/></operator><name pos:line="191" pos:column="31">ctx<pos:position pos:line="191" pos:column="34"/></name><operator pos:line="191" pos:column="34">-&gt;<pos:position pos:line="191" pos:column="39"/></operator><name pos:line="191" pos:column="36">rights<pos:position pos:line="191" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="191" pos:column="44">MUTT_ACL_WRITE<pos:position pos:line="191" pos:column="58"/></name></expr></argument>)<pos:position pos:line="191" pos:column="59"/></argument_list></call> <operator pos:line="191" pos:column="60">||<pos:position pos:line="191" pos:column="62"/></operator>
        <call><name pos:line="192" pos:column="9">mutt_bit_isset<pos:position pos:line="192" pos:column="23"/></name><argument_list pos:line="192" pos:column="23">(<argument><expr><name><name pos:line="192" pos:column="24">idata<pos:position pos:line="192" pos:column="29"/></name><operator pos:line="192" pos:column="29">-&gt;<pos:position pos:line="192" pos:column="34"/></operator><name pos:line="192" pos:column="31">ctx<pos:position pos:line="192" pos:column="34"/></name><operator pos:line="192" pos:column="34">-&gt;<pos:position pos:line="192" pos:column="39"/></operator><name pos:line="192" pos:column="36">rights<pos:position pos:line="192" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="192" pos:column="44">MUTT_ACL_INSERT<pos:position pos:line="192" pos:column="59"/></name></expr></argument>)<pos:position pos:line="192" pos:column="60"/></argument_list></call><operator pos:line="192" pos:column="60">)<pos:position pos:line="192" pos:column="61"/></operator></expr>)<pos:position pos:line="192" pos:column="62"/></condition><then pos:line="192" pos:column="62">
     <block type="pseudo"><expr_stmt><expr><name><name pos:line="193" pos:column="6">ctx<pos:position pos:line="193" pos:column="9"/></name><operator pos:line="193" pos:column="9">-&gt;<pos:position pos:line="193" pos:column="14"/></operator><name pos:line="193" pos:column="11">readonly<pos:position pos:line="193" pos:column="19"/></name></name> <operator pos:line="193" pos:column="20">=<pos:position pos:line="193" pos:column="21"/></operator> <literal type="number" pos:line="193" pos:column="22">1<pos:position pos:line="193" pos:column="23"/></literal></expr>;<pos:position pos:line="193" pos:column="24"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name><name pos:line="195" pos:column="3">ctx<pos:position pos:line="195" pos:column="6"/></name><operator pos:line="195" pos:column="6">-&gt;<pos:position pos:line="195" pos:column="11"/></operator><name pos:line="195" pos:column="8">hdrmax<pos:position pos:line="195" pos:column="14"/></name></name> <operator pos:line="195" pos:column="15">=<pos:position pos:line="195" pos:column="16"/></operator> <name pos:line="195" pos:column="17">count<pos:position pos:line="195" pos:column="22"/></name></expr>;<pos:position pos:line="195" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="196" pos:column="3">ctx<pos:position pos:line="196" pos:column="6"/></name><operator pos:line="196" pos:column="6">-&gt;<pos:position pos:line="196" pos:column="11"/></operator><name pos:line="196" pos:column="8">hdrs<pos:position pos:line="196" pos:column="12"/></name></name> <operator pos:line="196" pos:column="13">=<pos:position pos:line="196" pos:column="14"/></operator> <call><name pos:line="196" pos:column="15">safe_calloc<pos:position pos:line="196" pos:column="26"/></name> <argument_list pos:line="196" pos:column="27">(<argument><expr><name pos:line="196" pos:column="28">count<pos:position pos:line="196" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="196" pos:column="35">sizeof <argument_list pos:line="196" pos:column="42">(<argument><expr><name pos:line="196" pos:column="43">HEADER<pos:position pos:line="196" pos:column="49"/></name> <operator pos:line="196" pos:column="50">*<pos:position pos:line="196" pos:column="51"/></operator></expr></argument>)<pos:position pos:line="196" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="196" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="54"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="197" pos:column="3">ctx<pos:position pos:line="197" pos:column="6"/></name><operator pos:line="197" pos:column="6">-&gt;<pos:position pos:line="197" pos:column="11"/></operator><name pos:line="197" pos:column="8">v2r<pos:position pos:line="197" pos:column="11"/></name></name> <operator pos:line="197" pos:column="12">=<pos:position pos:line="197" pos:column="13"/></operator> <call><name pos:line="197" pos:column="14">safe_calloc<pos:position pos:line="197" pos:column="25"/></name> <argument_list pos:line="197" pos:column="26">(<argument><expr><name pos:line="197" pos:column="27">count<pos:position pos:line="197" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="197" pos:column="34">sizeof <argument_list pos:line="197" pos:column="41">(<argument><expr><name pos:line="197" pos:column="42">int<pos:position pos:line="197" pos:column="45"/></name></expr></argument>)<pos:position pos:line="197" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="197" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="48"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="198" pos:column="3">ctx<pos:position pos:line="198" pos:column="6"/></name><operator pos:line="198" pos:column="6">-&gt;<pos:position pos:line="198" pos:column="11"/></operator><name pos:line="198" pos:column="8">msgcount<pos:position pos:line="198" pos:column="16"/></name></name> <operator pos:line="198" pos:column="17">=<pos:position pos:line="198" pos:column="18"/></operator> <literal type="number" pos:line="198" pos:column="19">0<pos:position pos:line="198" pos:column="20"/></literal></expr>;<pos:position pos:line="198" pos:column="21"/></expr_stmt>

  <if pos:line="200" pos:column="3">if <condition pos:line="200" pos:column="6">(<expr><name pos:line="200" pos:column="7">count<pos:position pos:line="200" pos:column="12"/></name> <operator pos:line="200" pos:column="13">&amp;&amp;<pos:position pos:line="200" pos:column="23"/></operator> <operator pos:line="200" pos:column="16">(<pos:position pos:line="200" pos:column="17"/></operator><call><name pos:line="200" pos:column="17">imap_read_headers<pos:position pos:line="200" pos:column="34"/></name> <argument_list pos:line="200" pos:column="35">(<argument><expr><name pos:line="200" pos:column="36">idata<pos:position pos:line="200" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="200" pos:column="43">1<pos:position pos:line="200" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="200" pos:column="46">count<pos:position pos:line="200" pos:column="51"/></name></expr></argument>)<pos:position pos:line="200" pos:column="52"/></argument_list></call> <operator pos:line="200" pos:column="53">&lt;<pos:position pos:line="200" pos:column="57"/></operator> <literal type="number" pos:line="200" pos:column="55">0<pos:position pos:line="200" pos:column="56"/></literal><operator pos:line="200" pos:column="56">)<pos:position pos:line="200" pos:column="57"/></operator></expr>)<pos:position pos:line="200" pos:column="58"/></condition><then pos:line="200" pos:column="58">
  <block pos:line="201" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="202" pos:column="5">mutt_error<pos:position pos:line="202" pos:column="15"/></name></type> <name pos:line="202" pos:column="16">_<pos:position pos:line="202" pos:column="17"/></name><argument_list pos:line="202" pos:column="17">(<argument><expr><literal type="string" pos:line="202" pos:column="18">"Error opening mailbox"<pos:position pos:line="202" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="202" pos:column="42"/></argument_list></decl>;<pos:position pos:line="202" pos:column="43"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="203" pos:column="5">mutt_sleep<pos:position pos:line="203" pos:column="15"/></name> <argument_list pos:line="203" pos:column="16">(<argument><expr><literal type="number" pos:line="203" pos:column="17">1<pos:position pos:line="203" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="203" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="20"/></expr_stmt>
    <goto pos:line="204" pos:column="5">goto <name pos:line="204" pos:column="10">fail<pos:position pos:line="204" pos:column="14"/></name>;<pos:position pos:line="204" pos:column="15"/></goto>
  }<pos:position pos:line="205" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="207" pos:column="3">dprint<pos:position pos:line="207" pos:column="9"/></name> <argument_list pos:line="207" pos:column="10">(<argument><expr><literal type="number" pos:line="207" pos:column="11">2<pos:position pos:line="207" pos:column="12"/></literal></expr></argument>, <argument><expr><operator pos:line="207" pos:column="14">(<pos:position pos:line="207" pos:column="15"/></operator><name pos:line="207" pos:column="15">debugfile<pos:position pos:line="207" pos:column="24"/></name><operator pos:line="207" pos:column="24">,<pos:position pos:line="207" pos:column="25"/></operator> <literal type="string" pos:line="207" pos:column="26">"imap_open_mailbox: msgcount is %d\n"<pos:position pos:line="207" pos:column="63"/></literal><operator pos:line="207" pos:column="63">,<pos:position pos:line="207" pos:column="64"/></operator> <name><name pos:line="207" pos:column="65">ctx<pos:position pos:line="207" pos:column="68"/></name><operator pos:line="207" pos:column="68">-&gt;<pos:position pos:line="207" pos:column="73"/></operator><name pos:line="207" pos:column="70">msgcount<pos:position pos:line="207" pos:column="78"/></name></name><operator pos:line="207" pos:column="78">)<pos:position pos:line="207" pos:column="79"/></operator></expr></argument>)<pos:position pos:line="207" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="81"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="208" pos:column="3">FREE<pos:position pos:line="208" pos:column="7"/></name> <argument_list pos:line="208" pos:column="8">(<argument><expr><operator pos:line="208" pos:column="9">&amp;<pos:position pos:line="208" pos:column="14"/></operator><name><name pos:line="208" pos:column="10">mx<pos:position pos:line="208" pos:column="12"/></name><operator pos:line="208" pos:column="12">.<pos:position pos:line="208" pos:column="13"/></operator><name pos:line="208" pos:column="13">mbox<pos:position pos:line="208" pos:column="17"/></name></name></expr></argument>)<pos:position pos:line="208" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="19"/></expr_stmt>
  <return pos:line="209" pos:column="3">return <expr><literal type="number" pos:line="209" pos:column="10">0<pos:position pos:line="209" pos:column="11"/></literal></expr>;<pos:position pos:line="209" pos:column="12"/></return>

 <label><name pos:line="211" pos:column="2">fail<pos:position pos:line="211" pos:column="6"/></name>:<pos:position pos:line="211" pos:column="7"/></label>
  <if pos:line="212" pos:column="3">if <condition pos:line="212" pos:column="6">(<expr><name><name pos:line="212" pos:column="7">idata<pos:position pos:line="212" pos:column="12"/></name><operator pos:line="212" pos:column="12">-&gt;<pos:position pos:line="212" pos:column="17"/></operator><name pos:line="212" pos:column="14">state<pos:position pos:line="212" pos:column="19"/></name></name> <operator pos:line="212" pos:column="20">==<pos:position pos:line="212" pos:column="22"/></operator> <name pos:line="212" pos:column="23">IMAP_SELECTED<pos:position pos:line="212" pos:column="36"/></name></expr>)<pos:position pos:line="212" pos:column="37"/></condition><then pos:line="212" pos:column="37">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="213" pos:column="5">idata<pos:position pos:line="213" pos:column="10"/></name><operator pos:line="213" pos:column="10">-&gt;<pos:position pos:line="213" pos:column="15"/></operator><name pos:line="213" pos:column="12">state<pos:position pos:line="213" pos:column="17"/></name></name> <operator pos:line="213" pos:column="18">=<pos:position pos:line="213" pos:column="19"/></operator> <name pos:line="213" pos:column="20">IMAP_AUTHENTICATED<pos:position pos:line="213" pos:column="38"/></name></expr>;<pos:position pos:line="213" pos:column="39"/></expr_stmt></block></then></if>
 <label><name pos:line="214" pos:column="2">fail_noidata<pos:position pos:line="214" pos:column="14"/></name>:<pos:position pos:line="214" pos:column="15"/></label>
  <expr_stmt><expr><call><name pos:line="215" pos:column="3">FREE<pos:position pos:line="215" pos:column="7"/></name> <argument_list pos:line="215" pos:column="8">(<argument><expr><operator pos:line="215" pos:column="9">&amp;<pos:position pos:line="215" pos:column="14"/></operator><name><name pos:line="215" pos:column="10">mx<pos:position pos:line="215" pos:column="12"/></name><operator pos:line="215" pos:column="12">.<pos:position pos:line="215" pos:column="13"/></operator><name pos:line="215" pos:column="13">mbox<pos:position pos:line="215" pos:column="17"/></name></name></expr></argument>)<pos:position pos:line="215" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="19"/></expr_stmt>
  <return pos:line="216" pos:column="3">return <expr><operator pos:line="216" pos:column="10">-<pos:position pos:line="216" pos:column="11"/></operator><literal type="number" pos:line="216" pos:column="11">1<pos:position pos:line="216" pos:column="12"/></literal></expr>;<pos:position pos:line="216" pos:column="13"/></return>
}<pos:position pos:line="217" pos:column="2"/></block></function></unit>
