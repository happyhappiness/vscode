<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2073_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">imap_compile_search<pos:position pos:line="1" pos:column="31"/></name> <parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">pattern_t<pos:position pos:line="1" pos:column="48"/></name><modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type> <name pos:line="1" pos:column="50">pat<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">BUFFER<pos:position pos:line="1" pos:column="61"/></name><modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type> <name pos:line="1" pos:column="63">buf<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><operator pos:line="3" pos:column="7">!<pos:position pos:line="3" pos:column="8"/></operator> <call><name pos:line="3" pos:column="9">do_search<pos:position pos:line="3" pos:column="18"/></name> <argument_list pos:line="3" pos:column="19">(<argument><expr><name pos:line="3" pos:column="20">pat<pos:position pos:line="3" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="25">0<pos:position pos:line="3" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="28"/></condition><then pos:line="3" pos:column="28">
    <block type="pseudo"><return pos:line="4" pos:column="5">return <expr><literal type="number" pos:line="4" pos:column="12">0<pos:position pos:line="4" pos:column="13"/></literal></expr>;<pos:position pos:line="4" pos:column="14"/></return></block></then></if>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name><name pos:line="6" pos:column="7">pat<pos:position pos:line="6" pos:column="10"/></name><operator pos:line="6" pos:column="10">-&gt;<pos:position pos:line="6" pos:column="15"/></operator></name><operator pos:line="6" pos:column="12">not<pos:position pos:line="6" pos:column="15"/></operator></expr>)<pos:position pos:line="6" pos:column="16"/></condition><then pos:line="6" pos:column="16">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="5">mutt_buffer_addstr<pos:position pos:line="7" pos:column="23"/></name> <argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">buf<pos:position pos:line="7" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="30">"NOT "<pos:position pos:line="7" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="38"/></expr_stmt></block></then></if>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name><name pos:line="9" pos:column="7">pat<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">-&gt;<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="12">child<pos:position pos:line="9" pos:column="17"/></name></name></expr>)<pos:position pos:line="9" pos:column="18"/></condition><then pos:line="9" pos:column="18">
  <block pos:line="10" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">clauses<pos:position pos:line="11" pos:column="16"/></name></decl>;<pos:position pos:line="11" pos:column="17"/></decl_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">(<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">clauses<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <call><name pos:line="13" pos:column="20">do_search<pos:position pos:line="13" pos:column="29"/></name> <argument_list pos:line="13" pos:column="30">(<argument><expr><name><name pos:line="13" pos:column="31">pat<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">-&gt;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="36">child<pos:position pos:line="13" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="43">1<pos:position pos:line="13" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="45"/></argument_list></call><operator pos:line="13" pos:column="45">)<pos:position pos:line="13" pos:column="46"/></operator> <operator pos:line="13" pos:column="47">&gt;<pos:position pos:line="13" pos:column="51"/></operator> <literal type="number" pos:line="13" pos:column="49">0<pos:position pos:line="13" pos:column="50"/></literal></expr>)<pos:position pos:line="13" pos:column="51"/></condition><then pos:line="13" pos:column="51">
    <block pos:line="14" pos:column="5">{
      <decl_stmt><decl><type><specifier pos:line="15" pos:column="7">const<pos:position pos:line="15" pos:column="12"/></specifier> <name pos:line="15" pos:column="13">pattern_t<pos:position pos:line="15" pos:column="22"/></name><modifier pos:line="15" pos:column="22">*<pos:position pos:line="15" pos:column="23"/></modifier></type> <name pos:line="15" pos:column="24">clause<pos:position pos:line="15" pos:column="30"/></name> <init pos:line="15" pos:column="31">= <expr><name><name pos:line="15" pos:column="33">pat<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">-&gt;<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="38">child<pos:position pos:line="15" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="15" pos:column="44"/></decl_stmt>

      <expr_stmt><expr><call><name pos:line="17" pos:column="7">mutt_buffer_addch<pos:position pos:line="17" pos:column="24"/></name> <argument_list pos:line="17" pos:column="25">(<argument><expr><name pos:line="17" pos:column="26">buf<pos:position pos:line="17" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="17" pos:column="31">'('<pos:position pos:line="17" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="36"/></expr_stmt>

      <while pos:line="19" pos:column="7">while <condition pos:line="19" pos:column="13">(<expr><name pos:line="19" pos:column="14">clauses<pos:position pos:line="19" pos:column="21"/></name></expr>)<pos:position pos:line="19" pos:column="22"/></condition>
      <block pos:line="20" pos:column="7">{
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">do_search<pos:position pos:line="21" pos:column="22"/></name> <argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">clause<pos:position pos:line="21" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="32">0<pos:position pos:line="21" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="35"/></condition><then pos:line="21" pos:column="35">
        <block pos:line="22" pos:column="9">{
          <if pos:line="23" pos:column="11">if <condition pos:line="23" pos:column="14">(<expr><name><name pos:line="23" pos:column="15">pat<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">-&gt;<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="20">op<pos:position pos:line="23" pos:column="22"/></name></name> <operator pos:line="23" pos:column="23">==<pos:position pos:line="23" pos:column="25"/></operator> <name pos:line="23" pos:column="26">MUTT_OR<pos:position pos:line="23" pos:column="33"/></name> <operator pos:line="23" pos:column="34">&amp;&amp;<pos:position pos:line="23" pos:column="44"/></operator> <name pos:line="23" pos:column="37">clauses<pos:position pos:line="23" pos:column="44"/></name> <operator pos:line="23" pos:column="45">&gt;<pos:position pos:line="23" pos:column="49"/></operator> <literal type="number" pos:line="23" pos:column="47">1<pos:position pos:line="23" pos:column="48"/></literal></expr>)<pos:position pos:line="23" pos:column="49"/></condition><then pos:line="23" pos:column="49">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="13">mutt_buffer_addstr<pos:position pos:line="24" pos:column="31"/></name> <argument_list pos:line="24" pos:column="32">(<argument><expr><name pos:line="24" pos:column="33">buf<pos:position pos:line="24" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="38">"OR "<pos:position pos:line="24" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt></block></then></if>
          <expr_stmt><expr><name pos:line="25" pos:column="11">clauses<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">--<pos:position pos:line="25" pos:column="20"/></operator></expr>;<pos:position pos:line="25" pos:column="21"/></expr_stmt>

          <if pos:line="27" pos:column="11">if <condition pos:line="27" pos:column="14">(<expr><call><name pos:line="27" pos:column="15">imap_compile_search<pos:position pos:line="27" pos:column="34"/></name> <argument_list pos:line="27" pos:column="35">(<argument><expr><name pos:line="27" pos:column="36">clause<pos:position pos:line="27" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="44">buf<pos:position pos:line="27" pos:column="47"/></name></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call> <operator pos:line="27" pos:column="49">&lt;<pos:position pos:line="27" pos:column="53"/></operator> <literal type="number" pos:line="27" pos:column="51">0<pos:position pos:line="27" pos:column="52"/></literal></expr>)<pos:position pos:line="27" pos:column="53"/></condition><then pos:line="27" pos:column="53">
            <block type="pseudo"><return pos:line="28" pos:column="13">return <expr><operator pos:line="28" pos:column="20">-<pos:position pos:line="28" pos:column="21"/></operator><literal type="number" pos:line="28" pos:column="21">1<pos:position pos:line="28" pos:column="22"/></literal></expr>;<pos:position pos:line="28" pos:column="23"/></return></block></then></if>

          <if pos:line="30" pos:column="11">if <condition pos:line="30" pos:column="14">(<expr><name pos:line="30" pos:column="15">clauses<pos:position pos:line="30" pos:column="22"/></name></expr>)<pos:position pos:line="30" pos:column="23"/></condition><then pos:line="30" pos:column="23">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="13">mutt_buffer_addch<pos:position pos:line="31" pos:column="30"/></name> <argument_list pos:line="31" pos:column="31">(<argument><expr><name pos:line="31" pos:column="32">buf<pos:position pos:line="31" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="31" pos:column="37">' '<pos:position pos:line="31" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt></block></then></if>

        }<pos:position pos:line="33" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="34" pos:column="9">clause<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <name><name pos:line="34" pos:column="18">clause<pos:position pos:line="34" pos:column="24"/></name><operator pos:line="34" pos:column="24">-&gt;<pos:position pos:line="34" pos:column="29"/></operator><name pos:line="34" pos:column="26">next<pos:position pos:line="34" pos:column="30"/></name></name></expr>;<pos:position pos:line="34" pos:column="31"/></expr_stmt>
      }<pos:position pos:line="35" pos:column="8"/></block></while>

      <expr_stmt><expr><call><name pos:line="37" pos:column="7">mutt_buffer_addch<pos:position pos:line="37" pos:column="24"/></name> <argument_list pos:line="37" pos:column="25">(<argument><expr><name pos:line="37" pos:column="26">buf<pos:position pos:line="37" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="37" pos:column="31">')'<pos:position pos:line="37" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>
  }<pos:position pos:line="39" pos:column="4"/></block></then>
  <else pos:line="40" pos:column="3">else
  <block pos:line="41" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="42" pos:column="5">char<pos:position pos:line="42" pos:column="9"/></name></type> <name><name pos:line="42" pos:column="10">term<pos:position pos:line="42" pos:column="14"/></name><index pos:line="42" pos:column="14">[<expr><name pos:line="42" pos:column="15">STRING<pos:position pos:line="42" pos:column="21"/></name></expr>]<pos:position pos:line="42" pos:column="22"/></index></name></decl>;<pos:position pos:line="42" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="43" pos:column="5">char<pos:position pos:line="43" pos:column="9"/></name> <modifier pos:line="43" pos:column="10">*<pos:position pos:line="43" pos:column="11"/></modifier></type><name pos:line="43" pos:column="11">delim<pos:position pos:line="43" pos:column="16"/></name></decl>;<pos:position pos:line="43" pos:column="17"/></decl_stmt>

    <switch pos:line="45" pos:column="5">switch <condition pos:line="45" pos:column="12">(<expr><name><name pos:line="45" pos:column="13">pat<pos:position pos:line="45" pos:column="16"/></name><operator pos:line="45" pos:column="16">-&gt;<pos:position pos:line="45" pos:column="21"/></operator><name pos:line="45" pos:column="18">op<pos:position pos:line="45" pos:column="20"/></name></name></expr>)<pos:position pos:line="45" pos:column="21"/></condition>
    <block pos:line="46" pos:column="5">{
      <case pos:line="47" pos:column="7">case <expr><name pos:line="47" pos:column="12">MUTT_HEADER<pos:position pos:line="47" pos:column="23"/></name></expr>:<pos:position pos:line="47" pos:column="24"/></case>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">mutt_buffer_addstr<pos:position pos:line="48" pos:column="27"/></name> <argument_list pos:line="48" pos:column="28">(<argument><expr><name pos:line="48" pos:column="29">buf<pos:position pos:line="48" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="34">"HEADER "<pos:position pos:line="48" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="45"/></expr_stmt>

        <comment type="block" pos:line="50" pos:column="9">/* extract header name */</comment>
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><operator pos:line="51" pos:column="13">!<pos:position pos:line="51" pos:column="14"/></operator> <operator pos:line="51" pos:column="15">(<pos:position pos:line="51" pos:column="16"/></operator><name pos:line="51" pos:column="16">delim<pos:position pos:line="51" pos:column="21"/></name> <operator pos:line="51" pos:column="22">=<pos:position pos:line="51" pos:column="23"/></operator> <call><name pos:line="51" pos:column="24">strchr<pos:position pos:line="51" pos:column="30"/></name> <argument_list pos:line="51" pos:column="31">(<argument><expr><name><name pos:line="51" pos:column="32">pat<pos:position pos:line="51" pos:column="35"/></name><operator pos:line="51" pos:column="35">-&gt;<pos:position pos:line="51" pos:column="40"/></operator><name pos:line="51" pos:column="37">p<pos:position pos:line="51" pos:column="38"/></name><operator pos:line="51" pos:column="38">.<pos:position pos:line="51" pos:column="39"/></operator><name pos:line="51" pos:column="39">str<pos:position pos:line="51" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="51" pos:column="44">':'<pos:position pos:line="51" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="48"/></argument_list></call><operator pos:line="51" pos:column="48">)<pos:position pos:line="51" pos:column="49"/></operator></expr>)<pos:position pos:line="51" pos:column="50"/></condition><then pos:line="51" pos:column="50">
        <block pos:line="52" pos:column="9">{
          <expr_stmt><expr><call><name pos:line="53" pos:column="11">mutt_error<pos:position pos:line="53" pos:column="21"/></name> <argument_list pos:line="53" pos:column="22">(<argument><expr><call><name pos:line="53" pos:column="23">_<pos:position pos:line="53" pos:column="24"/></name><argument_list pos:line="53" pos:column="24">(<argument><expr><literal type="string" pos:line="53" pos:column="25">"Header search without header name: %s"<pos:position pos:line="53" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="67">pat<pos:position pos:line="53" pos:column="70"/></name><operator pos:line="53" pos:column="70">-&gt;<pos:position pos:line="53" pos:column="75"/></operator><name pos:line="53" pos:column="72">p<pos:position pos:line="53" pos:column="73"/></name><operator pos:line="53" pos:column="73">.<pos:position pos:line="53" pos:column="74"/></operator><name pos:line="53" pos:column="74">str<pos:position pos:line="53" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="79"/></expr_stmt>
          <return pos:line="54" pos:column="11">return <expr><operator pos:line="54" pos:column="18">-<pos:position pos:line="54" pos:column="19"/></operator><literal type="number" pos:line="54" pos:column="19">1<pos:position pos:line="54" pos:column="20"/></literal></expr>;<pos:position pos:line="54" pos:column="21"/></return>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="56" pos:column="9">*<pos:position pos:line="56" pos:column="10"/></operator><name pos:line="56" pos:column="10">delim<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">=<pos:position pos:line="56" pos:column="17"/></operator> <literal type="char" pos:line="56" pos:column="18">'\0'<pos:position pos:line="56" pos:column="22"/></literal></expr>;<pos:position pos:line="56" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">imap_quote_string<pos:position pos:line="57" pos:column="26"/></name> <argument_list pos:line="57" pos:column="27">(<argument><expr><name pos:line="57" pos:column="28">term<pos:position pos:line="57" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="34">sizeof <argument_list pos:line="57" pos:column="41">(<argument><expr><name pos:line="57" pos:column="42">term<pos:position pos:line="57" pos:column="46"/></name></expr></argument>)<pos:position pos:line="57" pos:column="47"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="49">pat<pos:position pos:line="57" pos:column="52"/></name><operator pos:line="57" pos:column="52">-&gt;<pos:position pos:line="57" pos:column="57"/></operator><name pos:line="57" pos:column="54">p<pos:position pos:line="57" pos:column="55"/></name><operator pos:line="57" pos:column="55">.<pos:position pos:line="57" pos:column="56"/></operator><name pos:line="57" pos:column="56">str<pos:position pos:line="57" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">mutt_buffer_addstr<pos:position pos:line="58" pos:column="27"/></name> <argument_list pos:line="58" pos:column="28">(<argument><expr><name pos:line="58" pos:column="29">buf<pos:position pos:line="58" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="34">term<pos:position pos:line="58" pos:column="38"/></name></expr></argument>)<pos:position pos:line="58" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">mutt_buffer_addch<pos:position pos:line="59" pos:column="26"/></name> <argument_list pos:line="59" pos:column="27">(<argument><expr><name pos:line="59" pos:column="28">buf<pos:position pos:line="59" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="59" pos:column="33">' '<pos:position pos:line="59" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="38"/></expr_stmt>

        <comment type="block" pos:line="61" pos:column="9">/* and field */</comment>
        <expr_stmt><expr><operator pos:line="62" pos:column="9">*<pos:position pos:line="62" pos:column="10"/></operator><name pos:line="62" pos:column="10">delim<pos:position pos:line="62" pos:column="15"/></name> <operator pos:line="62" pos:column="16">=<pos:position pos:line="62" pos:column="17"/></operator> <literal type="char" pos:line="62" pos:column="18">':'<pos:position pos:line="62" pos:column="21"/></literal></expr>;<pos:position pos:line="62" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><name pos:line="63" pos:column="9">delim<pos:position pos:line="63" pos:column="14"/></name><operator pos:line="63" pos:column="14">++<pos:position pos:line="63" pos:column="16"/></operator></expr>;<pos:position pos:line="63" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">SKIPWS<pos:position pos:line="64" pos:column="15"/></name><argument_list pos:line="64" pos:column="15">(<argument><expr><name pos:line="64" pos:column="16">delim<pos:position pos:line="64" pos:column="21"/></name></expr></argument>)<pos:position pos:line="64" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">imap_quote_string<pos:position pos:line="65" pos:column="26"/></name> <argument_list pos:line="65" pos:column="27">(<argument><expr><name pos:line="65" pos:column="28">term<pos:position pos:line="65" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="65" pos:column="34">sizeof <argument_list pos:line="65" pos:column="41">(<argument><expr><name pos:line="65" pos:column="42">term<pos:position pos:line="65" pos:column="46"/></name></expr></argument>)<pos:position pos:line="65" pos:column="47"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="65" pos:column="49">delim<pos:position pos:line="65" pos:column="54"/></name></expr></argument>)<pos:position pos:line="65" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">mutt_buffer_addstr<pos:position pos:line="66" pos:column="27"/></name> <argument_list pos:line="66" pos:column="28">(<argument><expr><name pos:line="66" pos:column="29">buf<pos:position pos:line="66" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="34">term<pos:position pos:line="66" pos:column="38"/></name></expr></argument>)<pos:position pos:line="66" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="40"/></expr_stmt>
        <break pos:line="67" pos:column="9">break;<pos:position pos:line="67" pos:column="15"/></break>
      <case pos:line="68" pos:column="7">case <expr><name pos:line="68" pos:column="12">MUTT_BODY<pos:position pos:line="68" pos:column="21"/></name></expr>:<pos:position pos:line="68" pos:column="22"/></case>
        <expr_stmt><expr><call><name pos:line="69" pos:column="9">mutt_buffer_addstr<pos:position pos:line="69" pos:column="27"/></name> <argument_list pos:line="69" pos:column="28">(<argument><expr><name pos:line="69" pos:column="29">buf<pos:position pos:line="69" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="34">"BODY "<pos:position pos:line="69" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">imap_quote_string<pos:position pos:line="70" pos:column="26"/></name> <argument_list pos:line="70" pos:column="27">(<argument><expr><name pos:line="70" pos:column="28">term<pos:position pos:line="70" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="70" pos:column="34">sizeof <argument_list pos:line="70" pos:column="41">(<argument><expr><name pos:line="70" pos:column="42">term<pos:position pos:line="70" pos:column="46"/></name></expr></argument>)<pos:position pos:line="70" pos:column="47"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="49">pat<pos:position pos:line="70" pos:column="52"/></name><operator pos:line="70" pos:column="52">-&gt;<pos:position pos:line="70" pos:column="57"/></operator><name pos:line="70" pos:column="54">p<pos:position pos:line="70" pos:column="55"/></name><operator pos:line="70" pos:column="55">.<pos:position pos:line="70" pos:column="56"/></operator><name pos:line="70" pos:column="56">str<pos:position pos:line="70" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">mutt_buffer_addstr<pos:position pos:line="71" pos:column="27"/></name> <argument_list pos:line="71" pos:column="28">(<argument><expr><name pos:line="71" pos:column="29">buf<pos:position pos:line="71" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="34">term<pos:position pos:line="71" pos:column="38"/></name></expr></argument>)<pos:position pos:line="71" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="40"/></expr_stmt>
        <break pos:line="72" pos:column="9">break;<pos:position pos:line="72" pos:column="15"/></break>
      <case pos:line="73" pos:column="7">case <expr><name pos:line="73" pos:column="12">MUTT_WHOLE_MSG<pos:position pos:line="73" pos:column="26"/></name></expr>:<pos:position pos:line="73" pos:column="27"/></case>
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">mutt_buffer_addstr<pos:position pos:line="74" pos:column="27"/></name> <argument_list pos:line="74" pos:column="28">(<argument><expr><name pos:line="74" pos:column="29">buf<pos:position pos:line="74" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="34">"TEXT "<pos:position pos:line="74" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">imap_quote_string<pos:position pos:line="75" pos:column="26"/></name> <argument_list pos:line="75" pos:column="27">(<argument><expr><name pos:line="75" pos:column="28">term<pos:position pos:line="75" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="75" pos:column="34">sizeof <argument_list pos:line="75" pos:column="41">(<argument><expr><name pos:line="75" pos:column="42">term<pos:position pos:line="75" pos:column="46"/></name></expr></argument>)<pos:position pos:line="75" pos:column="47"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="49">pat<pos:position pos:line="75" pos:column="52"/></name><operator pos:line="75" pos:column="52">-&gt;<pos:position pos:line="75" pos:column="57"/></operator><name pos:line="75" pos:column="54">p<pos:position pos:line="75" pos:column="55"/></name><operator pos:line="75" pos:column="55">.<pos:position pos:line="75" pos:column="56"/></operator><name pos:line="75" pos:column="56">str<pos:position pos:line="75" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="76" pos:column="9">mutt_buffer_addstr<pos:position pos:line="76" pos:column="27"/></name> <argument_list pos:line="76" pos:column="28">(<argument><expr><name pos:line="76" pos:column="29">buf<pos:position pos:line="76" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="34">term<pos:position pos:line="76" pos:column="38"/></name></expr></argument>)<pos:position pos:line="76" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="40"/></expr_stmt>
        <break pos:line="77" pos:column="9">break;<pos:position pos:line="77" pos:column="15"/></break>
    }<pos:position pos:line="78" pos:column="6"/></block></switch>
  }<pos:position pos:line="79" pos:column="4"/></block></else></if>

  <return pos:line="81" pos:column="3">return <expr><literal type="number" pos:line="81" pos:column="10">0<pos:position pos:line="81" pos:column="11"/></literal></expr>;<pos:position pos:line="81" pos:column="12"/></return>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
