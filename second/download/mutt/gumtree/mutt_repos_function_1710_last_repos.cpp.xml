<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1710_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">short<pos:position pos:line="1" pos:column="6"/></name></type> <name pos:line="1" pos:column="7">mutt_ts_capability<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">term<pos:position pos:line="3" pos:column="13"/></name> <init pos:line="3" pos:column="14">= <expr><call><name pos:line="3" pos:column="16">getenv<pos:position pos:line="3" pos:column="22"/></name><argument_list pos:line="3" pos:column="22">(<argument><expr><literal type="string" pos:line="3" pos:column="23">"TERM"<pos:position pos:line="3" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="30"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">tcaps<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">tcapi<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier><modifier pos:line="6" pos:column="9">*<pos:position pos:line="6" pos:column="10"/></modifier></type><name pos:line="6" pos:column="10">termp<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name><name pos:line="7" pos:column="9">known<pos:position pos:line="7" pos:column="14"/></name><index pos:line="7" pos:column="14">[]<pos:position pos:line="7" pos:column="16"/></index></name> <init pos:line="7" pos:column="17">= <expr><block pos:line="7" pos:column="19">{
    <expr><literal type="string" pos:line="8" pos:column="5">"color-xterm"<pos:position pos:line="8" pos:column="18"/></literal></expr>,
    <expr><literal type="string" pos:line="9" pos:column="5">"cygwin"<pos:position pos:line="9" pos:column="13"/></literal></expr>,
    <expr><literal type="string" pos:line="10" pos:column="5">"eterm"<pos:position pos:line="10" pos:column="12"/></literal></expr>,
    <expr><literal type="string" pos:line="11" pos:column="5">"kterm"<pos:position pos:line="11" pos:column="12"/></literal></expr>,
    <expr><literal type="string" pos:line="12" pos:column="5">"nxterm"<pos:position pos:line="12" pos:column="13"/></literal></expr>,
    <expr><literal type="string" pos:line="13" pos:column="5">"putty"<pos:position pos:line="13" pos:column="12"/></literal></expr>,
    <expr><literal type="string" pos:line="14" pos:column="5">"rxvt"<pos:position pos:line="14" pos:column="11"/></literal></expr>,
    <expr><literal type="string" pos:line="15" pos:column="5">"screen"<pos:position pos:line="15" pos:column="13"/></literal></expr>,
    <expr><literal type="string" pos:line="16" pos:column="5">"xterm"<pos:position pos:line="16" pos:column="12"/></literal></expr>,
    <expr><name pos:line="17" pos:column="5">NULL<pos:position pos:line="17" pos:column="9"/></name></expr>
  }<pos:position pos:line="18" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="18" pos:column="5"/></decl_stmt>

  <comment type="block" pos:line="20" pos:column="3">/* If tsl is set, then terminfo says that status lines work. */</comment>
  <expr_stmt><expr><name pos:line="21" pos:column="3">tcaps<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">=<pos:position pos:line="21" pos:column="10"/></operator> <call><name pos:line="21" pos:column="11">tigetstr<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><literal type="string" pos:line="21" pos:column="20">"tsl"<pos:position pos:line="21" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><name pos:line="22" pos:column="7">tcaps<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">&amp;&amp;<pos:position pos:line="22" pos:column="23"/></operator> <name pos:line="22" pos:column="16">tcaps<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">!=<pos:position pos:line="22" pos:column="24"/></operator> <operator pos:line="22" pos:column="25">(<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="26">char<pos:position pos:line="22" pos:column="30"/></name> <operator pos:line="22" pos:column="31">*<pos:position pos:line="22" pos:column="32"/></operator><operator pos:line="22" pos:column="32">)<pos:position pos:line="22" pos:column="33"/></operator><operator pos:line="22" pos:column="33">-<pos:position pos:line="22" pos:column="34"/></operator><literal type="number" pos:line="22" pos:column="34">1<pos:position pos:line="22" pos:column="35"/></literal> <operator pos:line="22" pos:column="36">&amp;&amp;<pos:position pos:line="22" pos:column="46"/></operator> <operator pos:line="22" pos:column="39">*<pos:position pos:line="22" pos:column="40"/></operator><name pos:line="22" pos:column="40">tcaps<pos:position pos:line="22" pos:column="45"/></name></expr>)<pos:position pos:line="22" pos:column="46"/></condition><then pos:line="22" pos:column="46">
  <block pos:line="23" pos:column="3">{
    <comment type="block" pos:line="24" pos:column="5">/* update the static defns of tsl/fsl from terminfo */</comment>
    <expr_stmt><expr><name pos:line="25" pos:column="5">tsl<pos:position pos:line="25" pos:column="8"/></name> <operator pos:line="25" pos:column="9">=<pos:position pos:line="25" pos:column="10"/></operator> <call><name pos:line="25" pos:column="11">safe_strdup<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">tcaps<pos:position pos:line="25" pos:column="28"/></name></expr></argument>)<pos:position pos:line="25" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><name pos:line="27" pos:column="5">tcaps<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">=<pos:position pos:line="27" pos:column="12"/></operator> <call><name pos:line="27" pos:column="13">tigetstr<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><literal type="string" pos:line="27" pos:column="22">"fsl"<pos:position pos:line="27" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">tcaps<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">&amp;&amp;<pos:position pos:line="28" pos:column="25"/></operator> <name pos:line="28" pos:column="18">tcaps<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">!=<pos:position pos:line="28" pos:column="26"/></operator> <operator pos:line="28" pos:column="27">(<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="28">char<pos:position pos:line="28" pos:column="32"/></name> <operator pos:line="28" pos:column="33">*<pos:position pos:line="28" pos:column="34"/></operator><operator pos:line="28" pos:column="34">)<pos:position pos:line="28" pos:column="35"/></operator><operator pos:line="28" pos:column="35">-<pos:position pos:line="28" pos:column="36"/></operator><literal type="number" pos:line="28" pos:column="36">1<pos:position pos:line="28" pos:column="37"/></literal> <operator pos:line="28" pos:column="38">&amp;&amp;<pos:position pos:line="28" pos:column="48"/></operator> <operator pos:line="28" pos:column="41">*<pos:position pos:line="28" pos:column="42"/></operator><name pos:line="28" pos:column="42">tcaps<pos:position pos:line="28" pos:column="47"/></name></expr>)<pos:position pos:line="28" pos:column="48"/></condition><then pos:line="28" pos:column="48">
      <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="7">fsl<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">=<pos:position pos:line="29" pos:column="12"/></operator> <call><name pos:line="29" pos:column="13">safe_strdup<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">tcaps<pos:position pos:line="29" pos:column="30"/></name></expr></argument>)<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt></block></then></if>

    <return pos:line="31" pos:column="5">return <expr><literal type="number" pos:line="31" pos:column="12">1<pos:position pos:line="31" pos:column="13"/></literal></expr>;<pos:position pos:line="31" pos:column="14"/></return>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="34" pos:column="3">/* If XT (boolean) is set, then this terminal supports the standard escape. */</comment>
  <comment type="block" pos:line="35" pos:column="3">/* Beware: tigetflag returns -1 if XT is invalid or not a boolean. */</comment>
<cpp:ifdef pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">ifdef<pos:position pos:line="36" pos:column="7"/></cpp:directive> <name pos:line="36" pos:column="8">HAVE_USE_EXTENDED_NAMES<pos:position pos:line="36" pos:column="31"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">use_extended_names<pos:position pos:line="37" pos:column="21"/></name> <argument_list pos:line="37" pos:column="22">(<argument><expr><name pos:line="37" pos:column="23">TRUE<pos:position pos:line="37" pos:column="27"/></name></expr></argument>)<pos:position pos:line="37" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="38" pos:column="3">tcapi<pos:position pos:line="38" pos:column="8"/></name> <operator pos:line="38" pos:column="9">=<pos:position pos:line="38" pos:column="10"/></operator> <call><name pos:line="38" pos:column="11">tigetflag<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><literal type="string" pos:line="38" pos:column="21">"XT"<pos:position pos:line="38" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="27"/></expr_stmt>
  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><name pos:line="39" pos:column="7">tcapi<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">==<pos:position pos:line="39" pos:column="15"/></operator> <literal type="number" pos:line="39" pos:column="16">1<pos:position pos:line="39" pos:column="17"/></literal></expr>)<pos:position pos:line="39" pos:column="18"/></condition><then pos:line="39" pos:column="18">
    <block type="pseudo"><return pos:line="40" pos:column="5">return <expr><literal type="number" pos:line="40" pos:column="12">1<pos:position pos:line="40" pos:column="13"/></literal></expr>;<pos:position pos:line="40" pos:column="14"/></return></block></then></if>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="41" pos:column="8">/* HAVE_USE_EXTENDED_NAMES */</comment>

  <comment type="block" pos:line="43" pos:column="3">/* Check term types that are known to support the standard escape without
   * necessarily asserting it in terminfo. */</comment>
  <for pos:line="45" pos:column="3">for <control pos:line="45" pos:column="7">(<init><expr><name pos:line="45" pos:column="8">termp<pos:position pos:line="45" pos:column="13"/></name> <operator pos:line="45" pos:column="14">=<pos:position pos:line="45" pos:column="15"/></operator> <name pos:line="45" pos:column="16">known<pos:position pos:line="45" pos:column="21"/></name></expr>;<pos:position pos:line="45" pos:column="22"/></init> <condition><expr><name pos:line="45" pos:column="23">termp<pos:position pos:line="45" pos:column="28"/></name></expr>;<pos:position pos:line="45" pos:column="29"/></condition> <incr><expr><name pos:line="45" pos:column="30">termp<pos:position pos:line="45" pos:column="35"/></name><operator pos:line="45" pos:column="35">++<pos:position pos:line="45" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="45" pos:column="38"/></control>
  <block pos:line="46" pos:column="3">{
    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><name pos:line="47" pos:column="9">term<pos:position pos:line="47" pos:column="13"/></name> <operator pos:line="47" pos:column="14">&amp;&amp;<pos:position pos:line="47" pos:column="24"/></operator> <operator pos:line="47" pos:column="17">*<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="18">termp<pos:position pos:line="47" pos:column="23"/></name> <operator pos:line="47" pos:column="24">&amp;&amp;<pos:position pos:line="47" pos:column="34"/></operator> <call><name pos:line="47" pos:column="27">mutt_strncasecmp<pos:position pos:line="47" pos:column="43"/></name> <argument_list pos:line="47" pos:column="44">(<argument><expr><name pos:line="47" pos:column="45">term<pos:position pos:line="47" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="51">*<pos:position pos:line="47" pos:column="52"/></operator><name pos:line="47" pos:column="52">termp<pos:position pos:line="47" pos:column="57"/></name></expr></argument>, <argument><expr><call><name pos:line="47" pos:column="59">strlen<pos:position pos:line="47" pos:column="65"/></name><argument_list pos:line="47" pos:column="65">(<argument><expr><operator pos:line="47" pos:column="66">*<pos:position pos:line="47" pos:column="67"/></operator><name pos:line="47" pos:column="67">termp<pos:position pos:line="47" pos:column="72"/></name></expr></argument>)<pos:position pos:line="47" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="75"/></condition><then pos:line="47" pos:column="75">
      <block type="pseudo"><return pos:line="48" pos:column="7">return <expr><literal type="number" pos:line="48" pos:column="14">1<pos:position pos:line="48" pos:column="15"/></literal></expr>;<pos:position pos:line="48" pos:column="16"/></return></block></then></if>
  }<pos:position pos:line="49" pos:column="4"/></block></for>

  <comment type="block" pos:line="51" pos:column="3">/* not supported */</comment>
  <return pos:line="52" pos:column="3">return <expr><literal type="number" pos:line="52" pos:column="10">0<pos:position pos:line="52" pos:column="11"/></literal></expr>;<pos:position pos:line="52" pos:column="12"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
