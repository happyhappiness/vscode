<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_887_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ssl_init<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">void<pos:position pos:line="1" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="27"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">path<pos:position pos:line="3" pos:column="12"/></name><index pos:line="3" pos:column="12">[<expr><name pos:line="3" pos:column="13">_POSIX_PATH_MAX<pos:position pos:line="3" pos:column="28"/></name></expr>]<pos:position pos:line="3" pos:column="29"/></index></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="4" pos:column="3">static<pos:position pos:line="4" pos:column="9"/></specifier> <type><name pos:line="4" pos:column="10">unsigned<pos:position pos:line="4" pos:column="18"/></name> <name pos:line="4" pos:column="19">char<pos:position pos:line="4" pos:column="23"/></name></type> <name pos:line="4" pos:column="24">init_complete<pos:position pos:line="4" pos:column="37"/></name> <init pos:line="4" pos:column="38">= <expr><literal type="number" pos:line="4" pos:column="40">0<pos:position pos:line="4" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">init_complete<pos:position pos:line="6" pos:column="20"/></name></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><literal type="number" pos:line="7" pos:column="12">0<pos:position pos:line="7" pos:column="13"/></literal></expr>;<pos:position pos:line="7" pos:column="14"/></return></block></then></if>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><operator pos:line="9" pos:column="7">!<pos:position pos:line="9" pos:column="8"/></operator> <call><name pos:line="9" pos:column="9">HAVE_ENTROPY<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">()<pos:position pos:line="9" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="24"/></condition><then pos:line="9" pos:column="24">
  <block pos:line="10" pos:column="3">{
    <comment type="block" pos:line="11" pos:column="5">/* load entropy from files */</comment>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">add_entropy<pos:position pos:line="12" pos:column="16"/></name> <argument_list pos:line="12" pos:column="17">(<argument><expr><name pos:line="12" pos:column="18">SslEntropyFile<pos:position pos:line="12" pos:column="32"/></name></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">add_entropy<pos:position pos:line="13" pos:column="16"/></name> <argument_list pos:line="13" pos:column="17">(<argument><expr><call><name pos:line="13" pos:column="18">RAND_file_name<pos:position pos:line="13" pos:column="32"/></name> <argument_list pos:line="13" pos:column="33">(<argument><expr><name pos:line="13" pos:column="34">path<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="40">sizeof <argument_list pos:line="13" pos:column="47">(<argument><expr><name pos:line="13" pos:column="48">path<pos:position pos:line="13" pos:column="52"/></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="56"/></expr_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* load entropy from egd sockets */</comment>
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">HAVE_RAND_EGD<pos:position pos:line="16" pos:column="21"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">add_entropy<pos:position pos:line="17" pos:column="16"/></name> <argument_list pos:line="17" pos:column="17">(<argument><expr><call><name pos:line="17" pos:column="18">getenv<pos:position pos:line="17" pos:column="24"/></name> <argument_list pos:line="17" pos:column="25">(<argument><expr><literal type="string" pos:line="17" pos:column="26">"EGDSOCKET"<pos:position pos:line="17" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">snprintf<pos:position pos:line="18" pos:column="13"/></name> <argument_list pos:line="18" pos:column="14">(<argument><expr><name pos:line="18" pos:column="15">path<pos:position pos:line="18" pos:column="19"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="21">sizeof<argument_list pos:line="18" pos:column="27">(<argument><expr><name pos:line="18" pos:column="28">path<pos:position pos:line="18" pos:column="32"/></name></expr></argument>)<pos:position pos:line="18" pos:column="33"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="35">"%s/.entropy"<pos:position pos:line="18" pos:column="48"/></literal></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="50">NONULL<pos:position pos:line="18" pos:column="56"/></name><argument_list pos:line="18" pos:column="56">(<argument><expr><name pos:line="18" pos:column="57">Homedir<pos:position pos:line="18" pos:column="64"/></name></expr></argument>)<pos:position pos:line="18" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="67"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">add_entropy<pos:position pos:line="19" pos:column="16"/></name> <argument_list pos:line="19" pos:column="17">(<argument><expr><name pos:line="19" pos:column="18">path<pos:position pos:line="19" pos:column="22"/></name></expr></argument>)<pos:position pos:line="19" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">add_entropy<pos:position pos:line="20" pos:column="16"/></name> <argument_list pos:line="20" pos:column="17">(<argument><expr><literal type="string" pos:line="20" pos:column="18">"/tmp/entropy"<pos:position pos:line="20" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="23" pos:column="5">/* shuffle $RANDFILE (or ~/.rnd if unset) */</comment>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">RAND_write_file<pos:position pos:line="24" pos:column="20"/></name> <argument_list pos:line="24" pos:column="21">(<argument><expr><call><name pos:line="24" pos:column="22">RAND_file_name<pos:position pos:line="24" pos:column="36"/></name> <argument_list pos:line="24" pos:column="37">(<argument><expr><name pos:line="24" pos:column="38">path<pos:position pos:line="24" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="44">sizeof <argument_list pos:line="24" pos:column="51">(<argument><expr><name pos:line="24" pos:column="52">path<pos:position pos:line="24" pos:column="56"/></name></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">mutt_clear_error<pos:position pos:line="25" pos:column="21"/></name> <argument_list pos:line="25" pos:column="22">()<pos:position pos:line="25" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">!<pos:position pos:line="26" pos:column="10"/></operator> <call><name pos:line="26" pos:column="11">HAVE_ENTROPY<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">()<pos:position pos:line="26" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="26"/></condition><then pos:line="26" pos:column="26">
    <block pos:line="27" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">mutt_error<pos:position pos:line="28" pos:column="17"/></name> <argument_list pos:line="28" pos:column="18">(<argument><expr><call><name pos:line="28" pos:column="19">_<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><literal type="string" pos:line="28" pos:column="21">"Failed to find enough entropy on your system"<pos:position pos:line="28" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">mutt_sleep<pos:position pos:line="29" pos:column="17"/></name> <argument_list pos:line="29" pos:column="18">(<argument><expr><literal type="number" pos:line="29" pos:column="19">2<pos:position pos:line="29" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="22"/></expr_stmt>
      <return pos:line="30" pos:column="7">return <expr><operator pos:line="30" pos:column="14">-<pos:position pos:line="30" pos:column="15"/></operator><literal type="number" pos:line="30" pos:column="15">1<pos:position pos:line="30" pos:column="16"/></literal></expr>;<pos:position pos:line="30" pos:column="17"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="34" pos:column="3">/* I don't think you can do this just before reading the error. The call
   * itself might clobber the last SSL error. */</comment>
  <expr_stmt><expr><call><name pos:line="36" pos:column="3">SSL_load_error_strings<pos:position pos:line="36" pos:column="25"/></name><argument_list pos:line="36" pos:column="25">()<pos:position pos:line="36" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">SSL_library_init<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">()<pos:position pos:line="37" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="38" pos:column="3">init_complete<pos:position pos:line="38" pos:column="16"/></name> <operator pos:line="38" pos:column="17">=<pos:position pos:line="38" pos:column="18"/></operator> <literal type="number" pos:line="38" pos:column="19">1<pos:position pos:line="38" pos:column="20"/></literal></expr>;<pos:position pos:line="38" pos:column="21"/></expr_stmt>
  <return pos:line="39" pos:column="3">return <expr><literal type="number" pos:line="39" pos:column="10">0<pos:position pos:line="39" pos:column="11"/></literal></expr>;<pos:position pos:line="39" pos:column="12"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
