<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_126_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_which_case<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">s<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">wchar_t<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">w<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">mbstate_t<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">mb<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">l<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
  
  <expr_stmt><expr><call><name pos:line="7" pos:column="3">memset<pos:position pos:line="7" pos:column="9"/></name> <argument_list pos:line="7" pos:column="10">(<argument><expr><operator pos:line="7" pos:column="11">&amp;<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="12">mb<pos:position pos:line="7" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="19">sizeof <argument_list pos:line="7" pos:column="26">(<argument><expr><name pos:line="7" pos:column="27">mb<pos:position pos:line="7" pos:column="29"/></name></expr></argument>)<pos:position pos:line="7" pos:column="30"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="32"/></expr_stmt>
  
  <for pos:line="9" pos:column="3">for <control pos:line="9" pos:column="7">(<init pos:line="9" pos:column="8">;<pos:position pos:line="9" pos:column="9"/></init> <condition><expr><operator pos:line="9" pos:column="10">(<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">l<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <call><name pos:line="9" pos:column="15">mbrtowc<pos:position pos:line="9" pos:column="22"/></name> <argument_list pos:line="9" pos:column="23">(<argument><expr><operator pos:line="9" pos:column="24">&amp;<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="25">w<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="28">s<pos:position pos:line="9" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="31">MB_CUR_MAX<pos:position pos:line="9" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="43">&amp;<pos:position pos:line="9" pos:column="48"/></operator><name pos:line="9" pos:column="44">mb<pos:position pos:line="9" pos:column="46"/></name></expr></argument>)<pos:position pos:line="9" pos:column="47"/></argument_list></call><operator pos:line="9" pos:column="47">)<pos:position pos:line="9" pos:column="48"/></operator> <operator pos:line="9" pos:column="49">!=<pos:position pos:line="9" pos:column="51"/></operator> <literal type="number" pos:line="9" pos:column="52">0<pos:position pos:line="9" pos:column="53"/></literal></expr>;<pos:position pos:line="9" pos:column="54"/></condition> <incr><expr><name pos:line="9" pos:column="55">s<pos:position pos:line="9" pos:column="56"/></name> <operator pos:line="9" pos:column="57">+=<pos:position pos:line="9" pos:column="59"/></operator> <name pos:line="9" pos:column="60">l<pos:position pos:line="9" pos:column="61"/></name></expr></incr>)<pos:position pos:line="9" pos:column="62"/></control>
  <block pos:line="10" pos:column="3">{
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">l<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">==<pos:position pos:line="11" pos:column="13"/></operator> <operator pos:line="11" pos:column="14">(<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">size_t<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">)<pos:position pos:line="11" pos:column="22"/></operator> <operator pos:line="11" pos:column="23">-<pos:position pos:line="11" pos:column="24"/></operator><literal type="number" pos:line="11" pos:column="24">2<pos:position pos:line="11" pos:column="25"/></literal></expr>)<pos:position pos:line="11" pos:column="26"/></condition><then pos:line="11" pos:column="26">
      <block type="pseudo"><continue pos:line="12" pos:column="7">continue;<pos:position pos:line="12" pos:column="16"/></continue></block></then></if> <comment type="block" pos:line="12" pos:column="17">/* shift sequences */</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">l<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">==<pos:position pos:line="13" pos:column="13"/></operator> <operator pos:line="13" pos:column="14">(<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">size_t<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">)<pos:position pos:line="13" pos:column="22"/></operator> <operator pos:line="13" pos:column="23">-<pos:position pos:line="13" pos:column="24"/></operator><literal type="number" pos:line="13" pos:column="24">1<pos:position pos:line="13" pos:column="25"/></literal></expr>)<pos:position pos:line="13" pos:column="26"/></condition><then pos:line="13" pos:column="26">
      <block type="pseudo"><return pos:line="14" pos:column="7">return <expr><literal type="number" pos:line="14" pos:column="14">0<pos:position pos:line="14" pos:column="15"/></literal></expr>;<pos:position pos:line="14" pos:column="16"/></return></block></then></if> <comment type="block" pos:line="14" pos:column="17">/* error; assume case-sensitive */</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">iswalpha<pos:position pos:line="15" pos:column="17"/></name> <argument_list pos:line="15" pos:column="18">(<argument><expr><operator pos:line="15" pos:column="19">(<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="20">wint_t<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">)<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="28">w<pos:position pos:line="15" pos:column="29"/></name></expr></argument>)<pos:position pos:line="15" pos:column="30"/></argument_list></call> <operator pos:line="15" pos:column="31">&amp;&amp;<pos:position pos:line="15" pos:column="41"/></operator> <call><name pos:line="15" pos:column="34">iswupper<pos:position pos:line="15" pos:column="42"/></name> <argument_list pos:line="15" pos:column="43">(<argument><expr><operator pos:line="15" pos:column="44">(<pos:position pos:line="15" pos:column="45"/></operator><name pos:line="15" pos:column="45">wint_t<pos:position pos:line="15" pos:column="51"/></name><operator pos:line="15" pos:column="51">)<pos:position pos:line="15" pos:column="52"/></operator> <name pos:line="15" pos:column="53">w<pos:position pos:line="15" pos:column="54"/></name></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="56"/></condition><then pos:line="15" pos:column="56">
      <block type="pseudo"><return pos:line="16" pos:column="7">return <expr><literal type="number" pos:line="16" pos:column="14">0<pos:position pos:line="16" pos:column="15"/></literal></expr>;<pos:position pos:line="16" pos:column="16"/></return></block></then></if> <comment type="block" pos:line="16" pos:column="17">/* case-sensitive */</comment>
  }<pos:position pos:line="17" pos:column="4"/></block></for>

  <return pos:line="19" pos:column="3">return <expr><name pos:line="19" pos:column="10">REG_ICASE<pos:position pos:line="19" pos:column="19"/></name></expr>;<pos:position pos:line="19" pos:column="20"/></return> <comment type="block" pos:line="19" pos:column="21">/* case-insensitive */</comment>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
