<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1881_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">pgp_key_t<pos:position pos:line="1" pos:column="10"/></name></type> <name pos:line="1" pos:column="11">pgp_ask_for_key<pos:position pos:line="1" pos:column="26"/></name> <parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">tag<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">whatfor<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">short<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">abilities<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">pgp_ring_t<pos:position pos:line="2" pos:column="55"/></name></type> <name pos:line="2" pos:column="56">keyring<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">pgp_key_t<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">key<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">resp<pos:position pos:line="5" pos:column="12"/></name><index pos:line="5" pos:column="12">[<expr><name pos:line="5" pos:column="13">SHORT_STRING<pos:position pos:line="5" pos:column="25"/></name></expr>]<pos:position pos:line="5" pos:column="26"/></index></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">pgp_cache<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">l<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><name pos:line="6" pos:column="25">NULL<pos:position pos:line="6" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">mutt_clear_error<pos:position pos:line="8" pos:column="19"/></name> <argument_list pos:line="8" pos:column="20">()<pos:position pos:line="8" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="10" pos:column="3">resp<pos:position pos:line="10" pos:column="7"/></name><index pos:line="10" pos:column="7">[<expr><literal type="number" pos:line="10" pos:column="8">0<pos:position pos:line="10" pos:column="9"/></literal></expr>]<pos:position pos:line="10" pos:column="10"/></index></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <literal type="number" pos:line="10" pos:column="13">0<pos:position pos:line="10" pos:column="14"/></literal></expr>;<pos:position pos:line="10" pos:column="15"/></expr_stmt>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">whatfor<pos:position pos:line="11" pos:column="14"/></name></expr>)<pos:position pos:line="11" pos:column="15"/></condition><then pos:line="11" pos:column="15">
  <block pos:line="12" pos:column="3">{

    <for pos:line="14" pos:column="5">for <control pos:line="14" pos:column="9">(<init><expr><name pos:line="14" pos:column="10">l<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <name pos:line="14" pos:column="14">id_defaults<pos:position pos:line="14" pos:column="25"/></name></expr>;<pos:position pos:line="14" pos:column="26"/></init> <condition><expr><name pos:line="14" pos:column="27">l<pos:position pos:line="14" pos:column="28"/></name></expr>;<pos:position pos:line="14" pos:column="29"/></condition> <incr><expr><name pos:line="14" pos:column="30">l<pos:position pos:line="14" pos:column="31"/></name> <operator pos:line="14" pos:column="32">=<pos:position pos:line="14" pos:column="33"/></operator> <name><name pos:line="14" pos:column="34">l<pos:position pos:line="14" pos:column="35"/></name><operator pos:line="14" pos:column="35">-&gt;<pos:position pos:line="14" pos:column="40"/></operator><name pos:line="14" pos:column="37">next<pos:position pos:line="14" pos:column="41"/></name></name></expr></incr>)<pos:position pos:line="14" pos:column="42"/></control>
      <block type="pseudo"><if pos:line="15" pos:column="7">if <condition pos:line="15" pos:column="10">(<expr><operator pos:line="15" pos:column="11">!<pos:position pos:line="15" pos:column="12"/></operator><call><name pos:line="15" pos:column="12">mutt_strcasecmp<pos:position pos:line="15" pos:column="27"/></name> <argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">whatfor<pos:position pos:line="15" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="38">l<pos:position pos:line="15" pos:column="39"/></name><operator pos:line="15" pos:column="39">-&gt;<pos:position pos:line="15" pos:column="44"/></operator><name pos:line="15" pos:column="41">what<pos:position pos:line="15" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="47"/></condition><then pos:line="15" pos:column="47">
      <block pos:line="16" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">strfcpy<pos:position pos:line="17" pos:column="16"/></name> <argument_list pos:line="17" pos:column="17">(<argument><expr><name pos:line="17" pos:column="18">resp<pos:position pos:line="17" pos:column="22"/></name></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="24">NONULL<pos:position pos:line="17" pos:column="30"/></name> <argument_list pos:line="17" pos:column="31">(<argument><expr><name><name pos:line="17" pos:column="32">l<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">-&gt;<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="35">dflt<pos:position pos:line="17" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="42">sizeof <argument_list pos:line="17" pos:column="49">(<argument><expr><name pos:line="17" pos:column="50">resp<pos:position pos:line="17" pos:column="54"/></name></expr></argument>)<pos:position pos:line="17" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt>
	<break pos:line="18" pos:column="9">break;<pos:position pos:line="18" pos:column="15"/></break>
      }<pos:position pos:line="19" pos:column="8"/></block></then></if></block></for>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>


  <macro><name pos:line="23" pos:column="3">FOREVER<pos:position pos:line="23" pos:column="10"/></name></macro>
  <block pos:line="24" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">resp<pos:position pos:line="25" pos:column="9"/></name><index pos:line="25" pos:column="9">[<expr><literal type="number" pos:line="25" pos:column="10">0<pos:position pos:line="25" pos:column="11"/></literal></expr>]<pos:position pos:line="25" pos:column="12"/></index></name> <operator pos:line="25" pos:column="13">=<pos:position pos:line="25" pos:column="14"/></operator> <literal type="number" pos:line="25" pos:column="15">0<pos:position pos:line="25" pos:column="16"/></literal></expr>;<pos:position pos:line="25" pos:column="17"/></expr_stmt>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><call><name pos:line="26" pos:column="9">mutt_get_field<pos:position pos:line="26" pos:column="23"/></name> <argument_list pos:line="26" pos:column="24">(<argument><expr><name pos:line="26" pos:column="25">tag<pos:position pos:line="26" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="30">resp<pos:position pos:line="26" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="36">sizeof <argument_list pos:line="26" pos:column="43">(<argument><expr><name pos:line="26" pos:column="44">resp<pos:position pos:line="26" pos:column="48"/></name></expr></argument>)<pos:position pos:line="26" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="26" pos:column="51">MUTT_CLEAR<pos:position pos:line="26" pos:column="61"/></name></expr></argument>)<pos:position pos:line="26" pos:column="62"/></argument_list></call> <operator pos:line="26" pos:column="63">!=<pos:position pos:line="26" pos:column="65"/></operator> <literal type="number" pos:line="26" pos:column="66">0<pos:position pos:line="26" pos:column="67"/></literal></expr>)<pos:position pos:line="26" pos:column="68"/></condition><then pos:line="26" pos:column="68">
      <block type="pseudo"><return pos:line="27" pos:column="7">return <expr><name pos:line="27" pos:column="14">NULL<pos:position pos:line="27" pos:column="18"/></name></expr>;<pos:position pos:line="27" pos:column="19"/></return></block></then></if>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">whatfor<pos:position pos:line="29" pos:column="16"/></name></expr>)<pos:position pos:line="29" pos:column="17"/></condition><then pos:line="29" pos:column="17">
    <block pos:line="30" pos:column="5">{
      <if pos:line="31" pos:column="7">if <condition pos:line="31" pos:column="10">(<expr><name pos:line="31" pos:column="11">l<pos:position pos:line="31" pos:column="12"/></name></expr>)<pos:position pos:line="31" pos:column="13"/></condition><then pos:line="31" pos:column="13">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="9">mutt_str_replace<pos:position pos:line="32" pos:column="25"/></name> <argument_list pos:line="32" pos:column="26">(<argument><expr><operator pos:line="32" pos:column="27">&amp;<pos:position pos:line="32" pos:column="32"/></operator><name><name pos:line="32" pos:column="28">l<pos:position pos:line="32" pos:column="29"/></name><operator pos:line="32" pos:column="29">-&gt;<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="31">dflt<pos:position pos:line="32" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="37">resp<pos:position pos:line="32" pos:column="41"/></name></expr></argument>)<pos:position pos:line="32" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="43"/></expr_stmt></block></then>
      <else pos:line="33" pos:column="7">else
      <block pos:line="34" pos:column="7">{
	<expr_stmt><expr><name pos:line="35" pos:column="9">l<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">=<pos:position pos:line="35" pos:column="12"/></operator> <call><name pos:line="35" pos:column="13">safe_malloc<pos:position pos:line="35" pos:column="24"/></name> <argument_list pos:line="35" pos:column="25">(<argument><expr><sizeof pos:line="35" pos:column="26">sizeof <argument_list pos:line="35" pos:column="33">(<argument><expr pos:line="35" pos:column="34">struct <name pos:line="35" pos:column="41">pgp_cache<pos:position pos:line="35" pos:column="50"/></name></expr></argument>)<pos:position pos:line="35" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="36" pos:column="9">l<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">-&gt;<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="12">next<pos:position pos:line="36" pos:column="16"/></name></name> <operator pos:line="36" pos:column="17">=<pos:position pos:line="36" pos:column="18"/></operator> <name pos:line="36" pos:column="19">id_defaults<pos:position pos:line="36" pos:column="30"/></name></expr>;<pos:position pos:line="36" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name pos:line="37" pos:column="9">id_defaults<pos:position pos:line="37" pos:column="20"/></name> <operator pos:line="37" pos:column="21">=<pos:position pos:line="37" pos:column="22"/></operator> <name pos:line="37" pos:column="23">l<pos:position pos:line="37" pos:column="24"/></name></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="38" pos:column="9">l<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">-&gt;<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="12">what<pos:position pos:line="38" pos:column="16"/></name></name> <operator pos:line="38" pos:column="17">=<pos:position pos:line="38" pos:column="18"/></operator> <call><name pos:line="38" pos:column="19">safe_strdup<pos:position pos:line="38" pos:column="30"/></name> <argument_list pos:line="38" pos:column="31">(<argument><expr><name pos:line="38" pos:column="32">whatfor<pos:position pos:line="38" pos:column="39"/></name></expr></argument>)<pos:position pos:line="38" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="39" pos:column="9">l<pos:position pos:line="39" pos:column="10"/></name><operator pos:line="39" pos:column="10">-&gt;<pos:position pos:line="39" pos:column="15"/></operator><name pos:line="39" pos:column="12">dflt<pos:position pos:line="39" pos:column="16"/></name></name> <operator pos:line="39" pos:column="17">=<pos:position pos:line="39" pos:column="18"/></operator> <call><name pos:line="39" pos:column="19">safe_strdup<pos:position pos:line="39" pos:column="30"/></name> <argument_list pos:line="39" pos:column="31">(<argument><expr><name pos:line="39" pos:column="32">resp<pos:position pos:line="39" pos:column="36"/></name></expr></argument>)<pos:position pos:line="39" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="38"/></expr_stmt>
      }<pos:position pos:line="40" pos:column="8"/></block></else></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><operator pos:line="43" pos:column="9">(<pos:position pos:line="43" pos:column="10"/></operator><name pos:line="43" pos:column="10">key<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">=<pos:position pos:line="43" pos:column="15"/></operator> <call><name pos:line="43" pos:column="16">pgp_getkeybystr<pos:position pos:line="43" pos:column="31"/></name> <argument_list pos:line="43" pos:column="32">(<argument><expr><name pos:line="43" pos:column="33">resp<pos:position pos:line="43" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="39">abilities<pos:position pos:line="43" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="50">keyring<pos:position pos:line="43" pos:column="57"/></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call><operator pos:line="43" pos:column="58">)<pos:position pos:line="43" pos:column="59"/></operator></expr>)<pos:position pos:line="43" pos:column="60"/></condition><then pos:line="43" pos:column="60">
      <block type="pseudo"><return pos:line="44" pos:column="7">return <expr><name pos:line="44" pos:column="14">key<pos:position pos:line="44" pos:column="17"/></name></expr>;<pos:position pos:line="44" pos:column="18"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="46" pos:column="5">BEEP<pos:position pos:line="46" pos:column="9"/></name> <argument_list pos:line="46" pos:column="10">()<pos:position pos:line="46" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="47" pos:column="4"/></block>
  <comment type="block" pos:line="48" pos:column="3">/* not reached */</comment>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
