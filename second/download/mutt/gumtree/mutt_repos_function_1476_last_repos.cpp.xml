<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1476_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_match_spam_list<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">s<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">REPLACE_LIST<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">l<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">text<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="71">int<pos:position pos:line="1" pos:column="74"/></name></type> <name pos:line="1" pos:column="75">textsize<pos:position pos:line="1" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="84"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><specifier pos:line="3" pos:column="3">static<pos:position pos:line="3" pos:column="9"/></specifier> <type><name pos:line="3" pos:column="10">regmatch_t<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">pmatch<pos:position pos:line="3" pos:column="28"/></name> <init pos:line="3" pos:column="29">= <expr><name pos:line="3" pos:column="31">NULL<pos:position pos:line="3" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="4" pos:column="3">static<pos:position pos:line="4" pos:column="9"/></specifier> <type><name pos:line="4" pos:column="10">int<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">nmatch<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><literal type="number" pos:line="4" pos:column="23">0<pos:position pos:line="4" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">tlen<pos:position pos:line="5" pos:column="11"/></name> <init pos:line="5" pos:column="12">= <expr><literal type="number" pos:line="5" pos:column="14">0<pos:position pos:line="5" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">p<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><operator pos:line="8" pos:column="7">!<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">s<pos:position pos:line="8" pos:column="9"/></name></expr>)<pos:position pos:line="8" pos:column="10"/></condition><then pos:line="8" pos:column="10"> <block type="pseudo"><return pos:line="8" pos:column="11">return <expr><literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr>;<pos:position pos:line="8" pos:column="20"/></return></block></then></if>

  <for pos:line="10" pos:column="3">for <control pos:line="10" pos:column="7">(<init pos:line="10" pos:column="8">;<pos:position pos:line="10" pos:column="9"/></init> <condition><expr><name pos:line="10" pos:column="10">l<pos:position pos:line="10" pos:column="11"/></name></expr>;<pos:position pos:line="10" pos:column="12"/></condition> <incr><expr><name pos:line="10" pos:column="13">l<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <name><name pos:line="10" pos:column="17">l<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">-&gt;<pos:position pos:line="10" pos:column="23"/></operator><name pos:line="10" pos:column="20">next<pos:position pos:line="10" pos:column="24"/></name></name></expr></incr>)<pos:position pos:line="10" pos:column="25"/></control>
  <block pos:line="11" pos:column="3">{
    <comment type="block" pos:line="12" pos:column="5">/* If this pattern needs more matches, expand pmatch. */</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">l<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">-&gt;<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="12">nmatch<pos:position pos:line="13" pos:column="18"/></name></name> <operator pos:line="13" pos:column="19">&gt;<pos:position pos:line="13" pos:column="23"/></operator> <name pos:line="13" pos:column="21">nmatch<pos:position pos:line="13" pos:column="27"/></name></expr>)<pos:position pos:line="13" pos:column="28"/></condition><then pos:line="13" pos:column="28">
    <block pos:line="14" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="15" pos:column="7">safe_realloc<pos:position pos:line="15" pos:column="19"/></name> <argument_list pos:line="15" pos:column="20">(<argument><expr><operator pos:line="15" pos:column="21">&amp;<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="22">pmatch<pos:position pos:line="15" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="30">l<pos:position pos:line="15" pos:column="31"/></name><operator pos:line="15" pos:column="31">-&gt;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="33">nmatch<pos:position pos:line="15" pos:column="39"/></name></name> <operator pos:line="15" pos:column="40">*<pos:position pos:line="15" pos:column="41"/></operator> <sizeof pos:line="15" pos:column="42">sizeof<argument_list pos:line="15" pos:column="48">(<argument><expr><name pos:line="15" pos:column="49">regmatch_t<pos:position pos:line="15" pos:column="59"/></name></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="62"/></expr_stmt>
      <expr_stmt><expr><name pos:line="16" pos:column="7">nmatch<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <name><name pos:line="16" pos:column="16">l<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">-&gt;<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="19">nmatch<pos:position pos:line="16" pos:column="25"/></name></name></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="19" pos:column="5">/* Does this pattern match? */</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><call><name pos:line="20" pos:column="9">regexec<pos:position pos:line="20" pos:column="16"/></name> <argument_list pos:line="20" pos:column="17">(<argument><expr><name><name pos:line="20" pos:column="18">l<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">-&gt;<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="21">rx<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">-&gt;<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="25">rx<pos:position pos:line="20" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="29">s<pos:position pos:line="20" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="32">(<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="33">size_t<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">)<pos:position pos:line="20" pos:column="40"/></operator> <name><name pos:line="20" pos:column="41">l<pos:position pos:line="20" pos:column="42"/></name><operator pos:line="20" pos:column="42">-&gt;<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="44">nmatch<pos:position pos:line="20" pos:column="50"/></name></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="52">(<pos:position pos:line="20" pos:column="53"/></operator><name pos:line="20" pos:column="53">regmatch_t<pos:position pos:line="20" pos:column="63"/></name> <operator pos:line="20" pos:column="64">*<pos:position pos:line="20" pos:column="65"/></operator><operator pos:line="20" pos:column="65">)<pos:position pos:line="20" pos:column="66"/></operator> <name pos:line="20" pos:column="67">pmatch<pos:position pos:line="20" pos:column="73"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="75">(<pos:position pos:line="20" pos:column="76"/></operator><name pos:line="20" pos:column="76">int<pos:position pos:line="20" pos:column="79"/></name><operator pos:line="20" pos:column="79">)<pos:position pos:line="20" pos:column="80"/></operator> <literal type="number" pos:line="20" pos:column="81">0<pos:position pos:line="20" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="83"/></argument_list></call> <operator pos:line="20" pos:column="84">==<pos:position pos:line="20" pos:column="86"/></operator> <literal type="number" pos:line="20" pos:column="87">0<pos:position pos:line="20" pos:column="88"/></literal></expr>)<pos:position pos:line="20" pos:column="89"/></condition><then pos:line="20" pos:column="89">
    <block pos:line="21" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="22" pos:column="7">dprint<pos:position pos:line="22" pos:column="13"/></name> <argument_list pos:line="22" pos:column="14">(<argument><expr><literal type="number" pos:line="22" pos:column="15">5<pos:position pos:line="22" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="22" pos:column="18">(<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="19">debugfile<pos:position pos:line="22" pos:column="28"/></name><operator pos:line="22" pos:column="28">,<pos:position pos:line="22" pos:column="29"/></operator> <literal type="string" pos:line="22" pos:column="30">"mutt_match_spam_list: %s matches %s\n"<pos:position pos:line="22" pos:column="69"/></literal><operator pos:line="22" pos:column="69">,<pos:position pos:line="22" pos:column="70"/></operator> <name pos:line="22" pos:column="71">s<pos:position pos:line="22" pos:column="72"/></name><operator pos:line="22" pos:column="72">,<pos:position pos:line="22" pos:column="73"/></operator> <name><name pos:line="22" pos:column="74">l<pos:position pos:line="22" pos:column="75"/></name><operator pos:line="22" pos:column="75">-&gt;<pos:position pos:line="22" pos:column="80"/></operator><name pos:line="22" pos:column="77">rx<pos:position pos:line="22" pos:column="79"/></name><operator pos:line="22" pos:column="79">-&gt;<pos:position pos:line="22" pos:column="84"/></operator><name pos:line="22" pos:column="81">pattern<pos:position pos:line="22" pos:column="88"/></name></name><operator pos:line="22" pos:column="88">)<pos:position pos:line="22" pos:column="89"/></operator></expr></argument>)<pos:position pos:line="22" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="91"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="23" pos:column="7">dprint<pos:position pos:line="23" pos:column="13"/></name> <argument_list pos:line="23" pos:column="14">(<argument><expr><literal type="number" pos:line="23" pos:column="15">5<pos:position pos:line="23" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="23" pos:column="18">(<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="19">debugfile<pos:position pos:line="23" pos:column="28"/></name><operator pos:line="23" pos:column="28">,<pos:position pos:line="23" pos:column="29"/></operator> <literal type="string" pos:line="23" pos:column="30">"mutt_match_spam_list: %d subs\n"<pos:position pos:line="23" pos:column="63"/></literal><operator pos:line="23" pos:column="63">,<pos:position pos:line="23" pos:column="64"/></operator> <operator pos:line="23" pos:column="65">(<pos:position pos:line="23" pos:column="66"/></operator><name pos:line="23" pos:column="66">int<pos:position pos:line="23" pos:column="69"/></name><operator pos:line="23" pos:column="69">)<pos:position pos:line="23" pos:column="70"/></operator><name><name pos:line="23" pos:column="70">l<pos:position pos:line="23" pos:column="71"/></name><operator pos:line="23" pos:column="71">-&gt;<pos:position pos:line="23" pos:column="76"/></operator><name pos:line="23" pos:column="73">rx<pos:position pos:line="23" pos:column="75"/></name><operator pos:line="23" pos:column="75">-&gt;<pos:position pos:line="23" pos:column="80"/></operator><name pos:line="23" pos:column="77">rx<pos:position pos:line="23" pos:column="79"/></name><operator pos:line="23" pos:column="79">-&gt;<pos:position pos:line="23" pos:column="84"/></operator><name pos:line="23" pos:column="81">re_nsub<pos:position pos:line="23" pos:column="88"/></name></name><operator pos:line="23" pos:column="88">)<pos:position pos:line="23" pos:column="89"/></operator></expr></argument>)<pos:position pos:line="23" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="91"/></expr_stmt>

      <comment type="block" pos:line="25" pos:column="7">/* Copy template into text, with substitutions. */</comment>
      <for pos:line="26" pos:column="7">for <control pos:line="26" pos:column="11">(<init><expr><name pos:line="26" pos:column="12">p<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">=<pos:position pos:line="26" pos:column="15"/></operator> <name><name pos:line="26" pos:column="16">l<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">-&gt;<pos:position pos:line="26" pos:column="22"/></operator><name><specifier pos:line="26" pos:column="19">template<pos:position pos:line="26" pos:column="27"/></specifier><name/></name></name></expr>;<pos:position pos:line="26" pos:column="28"/></init> <condition><expr><operator pos:line="26" pos:column="29">*<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="30">p<pos:position pos:line="26" pos:column="31"/></name> <operator pos:line="26" pos:column="32">&amp;&amp;<pos:position pos:line="26" pos:column="42"/></operator> <name pos:line="26" pos:column="35">tlen<pos:position pos:line="26" pos:column="39"/></name> <operator pos:line="26" pos:column="40">&lt;<pos:position pos:line="26" pos:column="44"/></operator> <name pos:line="26" pos:column="42">textsize<pos:position pos:line="26" pos:column="50"/></name> <operator pos:line="26" pos:column="51">-<pos:position pos:line="26" pos:column="52"/></operator> <literal type="number" pos:line="26" pos:column="53">1<pos:position pos:line="26" pos:column="54"/></literal></expr>;<pos:position pos:line="26" pos:column="55"/></condition><incr/>)<pos:position pos:line="26" pos:column="56"/></control>
      <block pos:line="27" pos:column="7">{
	<comment type="block" pos:line="28" pos:column="9">/* backreference to pattern match substring, eg. %1, %2, etc) */</comment>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">*<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">p<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">==<pos:position pos:line="29" pos:column="18"/></operator> <literal type="char" pos:line="29" pos:column="19">'%'<pos:position pos:line="29" pos:column="22"/></literal></expr>)<pos:position pos:line="29" pos:column="23"/></condition><then pos:line="29" pos:column="23">
	<block pos:line="30" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="31" pos:column="11">char<pos:position pos:line="31" pos:column="15"/></name> <modifier pos:line="31" pos:column="16">*<pos:position pos:line="31" pos:column="17"/></modifier></type><name pos:line="31" pos:column="17">e<pos:position pos:line="31" pos:column="18"/></name></decl>;<pos:position pos:line="31" pos:column="19"/></decl_stmt> <comment type="block" pos:line="31" pos:column="20">/* used as pointer to end of integer backreference in strtol() call */</comment>
	  <decl_stmt><decl><type><name pos:line="32" pos:column="11">int<pos:position pos:line="32" pos:column="14"/></name></type> <name pos:line="32" pos:column="15">n<pos:position pos:line="32" pos:column="16"/></name></decl>;<pos:position pos:line="32" pos:column="17"/></decl_stmt>

	  <expr_stmt><expr><operator pos:line="34" pos:column="11">++<pos:position pos:line="34" pos:column="13"/></operator><name pos:line="34" pos:column="13">p<pos:position pos:line="34" pos:column="14"/></name></expr>;<pos:position pos:line="34" pos:column="15"/></expr_stmt> <comment type="block" pos:line="34" pos:column="16">/* skip over % char */</comment>
	  <expr_stmt><expr><name pos:line="35" pos:column="11">n<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <call><name pos:line="35" pos:column="15">strtol<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">p<pos:position pos:line="35" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="25">&amp;<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="26">e<pos:position pos:line="35" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="29">10<pos:position pos:line="35" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="33"/></expr_stmt>
	  <comment type="block" pos:line="36" pos:column="11">/* Ensure that the integer conversion succeeded (e!=p) and bounds check.  The upper bound check
	   * should not strictly be necessary since add_to_spam_list() finds the largest value, and
	   * the static array above is always large enough based on that value. */</comment>
	  <if pos:line="39" pos:column="11">if <condition pos:line="39" pos:column="14">(<expr><name pos:line="39" pos:column="15">e<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">!=<pos:position pos:line="39" pos:column="19"/></operator> <name pos:line="39" pos:column="20">p<pos:position pos:line="39" pos:column="21"/></name> <operator pos:line="39" pos:column="22">&amp;&amp;<pos:position pos:line="39" pos:column="32"/></operator> <name pos:line="39" pos:column="25">n<pos:position pos:line="39" pos:column="26"/></name> <operator pos:line="39" pos:column="27">&gt;=<pos:position pos:line="39" pos:column="32"/></operator> <literal type="number" pos:line="39" pos:column="30">0<pos:position pos:line="39" pos:column="31"/></literal> <operator pos:line="39" pos:column="32">&amp;&amp;<pos:position pos:line="39" pos:column="42"/></operator> <name pos:line="39" pos:column="35">n<pos:position pos:line="39" pos:column="36"/></name> <operator pos:line="39" pos:column="37">&lt;=<pos:position pos:line="39" pos:column="42"/></operator> <name><name pos:line="39" pos:column="40">l<pos:position pos:line="39" pos:column="41"/></name><operator pos:line="39" pos:column="41">-&gt;<pos:position pos:line="39" pos:column="46"/></operator><name pos:line="39" pos:column="43">nmatch<pos:position pos:line="39" pos:column="49"/></name></name> <operator pos:line="39" pos:column="50">&amp;&amp;<pos:position pos:line="39" pos:column="60"/></operator> <name><name pos:line="39" pos:column="53">pmatch<pos:position pos:line="39" pos:column="59"/></name><index pos:line="39" pos:column="59">[<expr><name pos:line="39" pos:column="60">n<pos:position pos:line="39" pos:column="61"/></name></expr>]<pos:position pos:line="39" pos:column="62"/></index></name><operator pos:line="39" pos:column="62">.<pos:position pos:line="39" pos:column="63"/></operator><name pos:line="39" pos:column="63">rm_so<pos:position pos:line="39" pos:column="68"/></name> <operator pos:line="39" pos:column="69">!=<pos:position pos:line="39" pos:column="71"/></operator> <operator pos:line="39" pos:column="72">-<pos:position pos:line="39" pos:column="73"/></operator><literal type="number" pos:line="39" pos:column="73">1<pos:position pos:line="39" pos:column="74"/></literal></expr>)<pos:position pos:line="39" pos:column="75"/></condition><then pos:line="39" pos:column="75"> <block pos:line="39" pos:column="76">{
	    <comment type="block" pos:line="40" pos:column="13">/* copy as much of the substring match as will fit in the output buffer, saving space for
	     * the terminating nul char */</comment>
	    <decl_stmt><decl><type><name pos:line="42" pos:column="13">int<pos:position pos:line="42" pos:column="16"/></name></type> <name pos:line="42" pos:column="17">idx<pos:position pos:line="42" pos:column="20"/></name></decl>;<pos:position pos:line="42" pos:column="21"/></decl_stmt>
	    <for pos:line="43" pos:column="13">for <control pos:line="43" pos:column="17">(<init><expr><name pos:line="43" pos:column="18">idx<pos:position pos:line="43" pos:column="21"/></name> <operator pos:line="43" pos:column="22">=<pos:position pos:line="43" pos:column="23"/></operator> <name><name pos:line="43" pos:column="24">pmatch<pos:position pos:line="43" pos:column="30"/></name><index pos:line="43" pos:column="30">[<expr><name pos:line="43" pos:column="31">n<pos:position pos:line="43" pos:column="32"/></name></expr>]<pos:position pos:line="43" pos:column="33"/></index></name><operator pos:line="43" pos:column="33">.<pos:position pos:line="43" pos:column="34"/></operator><name pos:line="43" pos:column="34">rm_so<pos:position pos:line="43" pos:column="39"/></name></expr>;<pos:position pos:line="43" pos:column="40"/></init> <condition><expr><operator pos:line="43" pos:column="41">(<pos:position pos:line="43" pos:column="42"/></operator><name pos:line="43" pos:column="42">idx<pos:position pos:line="43" pos:column="45"/></name> <operator pos:line="43" pos:column="46">&lt;<pos:position pos:line="43" pos:column="50"/></operator> <name><name pos:line="43" pos:column="48">pmatch<pos:position pos:line="43" pos:column="54"/></name><index pos:line="43" pos:column="54">[<expr><name pos:line="43" pos:column="55">n<pos:position pos:line="43" pos:column="56"/></name></expr>]<pos:position pos:line="43" pos:column="57"/></index></name><operator pos:line="43" pos:column="57">.<pos:position pos:line="43" pos:column="58"/></operator><name pos:line="43" pos:column="58">rm_eo<pos:position pos:line="43" pos:column="63"/></name><operator pos:line="43" pos:column="63">)<pos:position pos:line="43" pos:column="64"/></operator> <operator pos:line="43" pos:column="65">&amp;&amp;<pos:position pos:line="43" pos:column="75"/></operator> <operator pos:line="43" pos:column="68">(<pos:position pos:line="43" pos:column="69"/></operator><name pos:line="43" pos:column="69">tlen<pos:position pos:line="43" pos:column="73"/></name> <operator pos:line="43" pos:column="74">&lt;<pos:position pos:line="43" pos:column="78"/></operator> <name pos:line="43" pos:column="76">textsize<pos:position pos:line="43" pos:column="84"/></name> <operator pos:line="43" pos:column="85">-<pos:position pos:line="43" pos:column="86"/></operator> <literal type="number" pos:line="43" pos:column="87">1<pos:position pos:line="43" pos:column="88"/></literal><operator pos:line="43" pos:column="88">)<pos:position pos:line="43" pos:column="89"/></operator></expr>;<pos:position pos:line="43" pos:column="90"/></condition> <incr><expr><operator pos:line="43" pos:column="91">++<pos:position pos:line="43" pos:column="93"/></operator><name pos:line="43" pos:column="93">idx<pos:position pos:line="43" pos:column="96"/></name></expr></incr>)<pos:position pos:line="43" pos:column="97"/></control>
	      <block type="pseudo"><expr_stmt><expr><name><name pos:line="44" pos:column="15">text<pos:position pos:line="44" pos:column="19"/></name><index pos:line="44" pos:column="19">[<expr><name pos:line="44" pos:column="20">tlen<pos:position pos:line="44" pos:column="24"/></name><operator pos:line="44" pos:column="24">++<pos:position pos:line="44" pos:column="26"/></operator></expr>]<pos:position pos:line="44" pos:column="27"/></index></name> <operator pos:line="44" pos:column="28">=<pos:position pos:line="44" pos:column="29"/></operator> <name><name pos:line="44" pos:column="30">s<pos:position pos:line="44" pos:column="31"/></name><index pos:line="44" pos:column="31">[<expr><name pos:line="44" pos:column="32">idx<pos:position pos:line="44" pos:column="35"/></name></expr>]<pos:position pos:line="44" pos:column="36"/></index></name></expr>;<pos:position pos:line="44" pos:column="37"/></expr_stmt></block></for>
	  }<pos:position pos:line="45" pos:column="12"/></block></then></if>
	  <expr_stmt><expr><name pos:line="46" pos:column="11">p<pos:position pos:line="46" pos:column="12"/></name> <operator pos:line="46" pos:column="13">=<pos:position pos:line="46" pos:column="14"/></operator> <name pos:line="46" pos:column="15">e<pos:position pos:line="46" pos:column="16"/></name></expr>;<pos:position pos:line="46" pos:column="17"/></expr_stmt> <comment type="block" pos:line="46" pos:column="18">/* skip over the parsed integer */</comment>
	}<pos:position pos:line="47" pos:column="10"/></block></then>
	<else pos:line="48" pos:column="9">else
	<block pos:line="49" pos:column="9">{
	  <expr_stmt><expr><name><name pos:line="50" pos:column="11">text<pos:position pos:line="50" pos:column="15"/></name><index pos:line="50" pos:column="15">[<expr><name pos:line="50" pos:column="16">tlen<pos:position pos:line="50" pos:column="20"/></name><operator pos:line="50" pos:column="20">++<pos:position pos:line="50" pos:column="22"/></operator></expr>]<pos:position pos:line="50" pos:column="23"/></index></name> <operator pos:line="50" pos:column="24">=<pos:position pos:line="50" pos:column="25"/></operator> <operator pos:line="50" pos:column="26">*<pos:position pos:line="50" pos:column="27"/></operator><name pos:line="50" pos:column="27">p<pos:position pos:line="50" pos:column="28"/></name><operator pos:line="50" pos:column="28">++<pos:position pos:line="50" pos:column="30"/></operator></expr>;<pos:position pos:line="50" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="51" pos:column="10"/></block></else></if>
      }<pos:position pos:line="52" pos:column="8"/></block></for>
      <comment type="block" pos:line="53" pos:column="7">/* tlen should always be less than textsize except when textsize&lt;=0
       * because the bounds checks in the above code leave room for the
       * terminal nul char.   This should avoid returning an unterminated
       * string to the caller.  When textsize&lt;=0 we make no assumption about
       * the validity of the text pointer. */</comment>
      <if pos:line="58" pos:column="7">if <condition pos:line="58" pos:column="10">(<expr><name pos:line="58" pos:column="11">tlen<pos:position pos:line="58" pos:column="15"/></name> <operator pos:line="58" pos:column="16">&lt;<pos:position pos:line="58" pos:column="20"/></operator> <name pos:line="58" pos:column="18">textsize<pos:position pos:line="58" pos:column="26"/></name></expr>)<pos:position pos:line="58" pos:column="27"/></condition><then pos:line="58" pos:column="27"> <block pos:line="58" pos:column="28">{
	<expr_stmt><expr><name><name pos:line="59" pos:column="9">text<pos:position pos:line="59" pos:column="13"/></name><index pos:line="59" pos:column="13">[<expr><name pos:line="59" pos:column="14">tlen<pos:position pos:line="59" pos:column="18"/></name></expr>]<pos:position pos:line="59" pos:column="19"/></index></name> <operator pos:line="59" pos:column="20">=<pos:position pos:line="59" pos:column="21"/></operator> <literal type="char" pos:line="59" pos:column="22">'\0'<pos:position pos:line="59" pos:column="26"/></literal></expr>;<pos:position pos:line="59" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="60" pos:column="9">dprint<pos:position pos:line="60" pos:column="15"/></name> <argument_list pos:line="60" pos:column="16">(<argument><expr><literal type="number" pos:line="60" pos:column="17">5<pos:position pos:line="60" pos:column="18"/></literal></expr></argument>, <argument><expr><operator pos:line="60" pos:column="20">(<pos:position pos:line="60" pos:column="21"/></operator><name pos:line="60" pos:column="21">debugfile<pos:position pos:line="60" pos:column="30"/></name><operator pos:line="60" pos:column="30">,<pos:position pos:line="60" pos:column="31"/></operator> <literal type="string" pos:line="60" pos:column="32">"mutt_match_spam_list: \"%s\"\n"<pos:position pos:line="60" pos:column="64"/></literal><operator pos:line="60" pos:column="64">,<pos:position pos:line="60" pos:column="65"/></operator> <name pos:line="60" pos:column="66">text<pos:position pos:line="60" pos:column="70"/></name><operator pos:line="60" pos:column="70">)<pos:position pos:line="60" pos:column="71"/></operator></expr></argument>)<pos:position pos:line="60" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="73"/></expr_stmt>
      }<pos:position pos:line="61" pos:column="8"/></block></then></if>
      <return pos:line="62" pos:column="7">return <expr><literal type="number" pos:line="62" pos:column="14">1<pos:position pos:line="62" pos:column="15"/></literal></expr>;<pos:position pos:line="62" pos:column="16"/></return>
    }<pos:position pos:line="63" pos:column="6"/></block></then></if>
  }<pos:position pos:line="64" pos:column="4"/></block></for>

  <return pos:line="66" pos:column="3">return <expr><literal type="number" pos:line="66" pos:column="10">0<pos:position pos:line="66" pos:column="11"/></literal></expr>;<pos:position pos:line="66" pos:column="12"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
