<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_641_mutt-1.4.2.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_can_decode<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">BODY<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">a<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">type<pos:position pos:line="3" pos:column="12"/></name><index pos:line="3" pos:column="12">[<expr><name pos:line="3" pos:column="13">STRING<pos:position pos:line="3" pos:column="19"/></name></expr>]<pos:position pos:line="3" pos:column="20"/></index></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="5" pos:column="3">snprintf<pos:position pos:line="5" pos:column="11"/></name> <argument_list pos:line="5" pos:column="12">(<argument><expr><name pos:line="5" pos:column="13">type<pos:position pos:line="5" pos:column="17"/></name></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="19">sizeof <argument_list pos:line="5" pos:column="26">(<argument><expr><name pos:line="5" pos:column="27">type<pos:position pos:line="5" pos:column="31"/></name></expr></argument>)<pos:position pos:line="5" pos:column="32"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="34">"%s/%s"<pos:position pos:line="5" pos:column="41"/></literal></expr></argument>, <argument><expr><call><name pos:line="5" pos:column="43">TYPE<pos:position pos:line="5" pos:column="47"/></name> <argument_list pos:line="5" pos:column="48">(<argument><expr><name pos:line="5" pos:column="49">a<pos:position pos:line="5" pos:column="50"/></name></expr></argument>)<pos:position pos:line="5" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="5" pos:column="53">a<pos:position pos:line="5" pos:column="54"/></name><operator pos:line="5" pos:column="54">-&gt;<pos:position pos:line="5" pos:column="59"/></operator><name pos:line="5" pos:column="56">subtype<pos:position pos:line="5" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="65"/></expr_stmt>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><call><name pos:line="6" pos:column="7">mutt_is_autoview<pos:position pos:line="6" pos:column="23"/></name> <argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">a<pos:position pos:line="6" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="28">type<pos:position pos:line="6" pos:column="32"/></name></expr></argument>)<pos:position pos:line="6" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="34"/></condition><then pos:line="6" pos:column="34">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><call><name pos:line="7" pos:column="13">rfc1524_mailcap_lookup<pos:position pos:line="7" pos:column="35"/></name> <argument_list pos:line="7" pos:column="36">(<argument><expr><name pos:line="7" pos:column="37">a<pos:position pos:line="7" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="40">type<pos:position pos:line="7" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="46">NULL<pos:position pos:line="7" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="52">M_AUTOVIEW<pos:position pos:line="7" pos:column="62"/></name></expr></argument>)<pos:position pos:line="7" pos:column="63"/></argument_list></call><operator pos:line="7" pos:column="63">)<pos:position pos:line="7" pos:column="64"/></operator></expr>;<pos:position pos:line="7" pos:column="65"/></return></block></then>
  <elseif pos:line="8" pos:column="3">else <if pos:line="8" pos:column="8">if <condition pos:line="8" pos:column="11">(<expr><name><name pos:line="8" pos:column="12">a<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">-&gt;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="15">type<pos:position pos:line="8" pos:column="19"/></name></name> <operator pos:line="8" pos:column="20">==<pos:position pos:line="8" pos:column="22"/></operator> <name pos:line="8" pos:column="23">TYPETEXT<pos:position pos:line="8" pos:column="31"/></name></expr>)<pos:position pos:line="8" pos:column="32"/></condition><then pos:line="8" pos:column="32">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><literal type="number" pos:line="9" pos:column="13">1<pos:position pos:line="9" pos:column="14"/></literal><operator pos:line="9" pos:column="14">)<pos:position pos:line="9" pos:column="15"/></operator></expr>;<pos:position pos:line="9" pos:column="16"/></return></block></then></if></elseif>
  <elseif pos:line="10" pos:column="3">else <if pos:line="10" pos:column="8">if <condition pos:line="10" pos:column="11">(<expr><name><name pos:line="10" pos:column="12">a<pos:position pos:line="10" pos:column="13"/></name><operator pos:line="10" pos:column="13">-&gt;<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="15">type<pos:position pos:line="10" pos:column="19"/></name></name> <operator pos:line="10" pos:column="20">==<pos:position pos:line="10" pos:column="22"/></operator> <name pos:line="10" pos:column="23">TYPEMESSAGE<pos:position pos:line="10" pos:column="34"/></name></expr>)<pos:position pos:line="10" pos:column="35"/></condition><then pos:line="10" pos:column="35">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><operator pos:line="11" pos:column="12">(<pos:position pos:line="11" pos:column="13"/></operator><literal type="number" pos:line="11" pos:column="13">1<pos:position pos:line="11" pos:column="14"/></literal><operator pos:line="11" pos:column="14">)<pos:position pos:line="11" pos:column="15"/></operator></expr>;<pos:position pos:line="11" pos:column="16"/></return></block></then></if></elseif>
  <elseif pos:line="12" pos:column="3">else <if pos:line="12" pos:column="8">if <condition pos:line="12" pos:column="11">(<expr><name><name pos:line="12" pos:column="12">a<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">-&gt;<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="15">type<pos:position pos:line="12" pos:column="19"/></name></name> <operator pos:line="12" pos:column="20">==<pos:position pos:line="12" pos:column="22"/></operator> <name pos:line="12" pos:column="23">TYPEMULTIPART<pos:position pos:line="12" pos:column="36"/></name></expr>)<pos:position pos:line="12" pos:column="37"/></condition><then pos:line="12" pos:column="37">
  <block pos:line="13" pos:column="3">{



<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef<pos:position pos:line="17" pos:column="7"/></cpp:directive> <name pos:line="17" pos:column="8">HAVE_PGP<pos:position pos:line="17" pos:column="16"/></name></cpp:ifdef>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><call><name pos:line="18" pos:column="9">ascii_strcasecmp<pos:position pos:line="18" pos:column="25"/></name> <argument_list pos:line="18" pos:column="26">(<argument><expr><name><name pos:line="18" pos:column="27">a<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">-&gt;<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="30">subtype<pos:position pos:line="18" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="39">"signed"<pos:position pos:line="18" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="48"/></argument_list></call> <operator pos:line="18" pos:column="49">==<pos:position pos:line="18" pos:column="51"/></operator> <literal type="number" pos:line="18" pos:column="52">0<pos:position pos:line="18" pos:column="53"/></literal> <operator pos:line="18" pos:column="54">||<pos:position pos:line="18" pos:column="56"/></operator>
	<call><name pos:line="19" pos:column="9">ascii_strcasecmp<pos:position pos:line="19" pos:column="25"/></name> <argument_list pos:line="19" pos:column="26">(<argument><expr><name><name pos:line="19" pos:column="27">a<pos:position pos:line="19" pos:column="28"/></name><operator pos:line="19" pos:column="28">-&gt;<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="30">subtype<pos:position pos:line="19" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="39">"encrypted"<pos:position pos:line="19" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call> <operator pos:line="19" pos:column="52">==<pos:position pos:line="19" pos:column="54"/></operator> <literal type="number" pos:line="19" pos:column="55">0<pos:position pos:line="19" pos:column="56"/></literal></expr>)<pos:position pos:line="19" pos:column="57"/></condition><then pos:line="19" pos:column="57">
      <block type="pseudo"><return pos:line="20" pos:column="7">return <expr><operator pos:line="20" pos:column="14">(<pos:position pos:line="20" pos:column="15"/></operator><literal type="number" pos:line="20" pos:column="15">1<pos:position pos:line="20" pos:column="16"/></literal><operator pos:line="20" pos:column="16">)<pos:position pos:line="20" pos:column="17"/></operator></expr>;<pos:position pos:line="20" pos:column="18"/></return></block></then>
    <else pos:line="21" pos:column="5">else
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>



    <block pos:line="26" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="27" pos:column="7">BODY<pos:position pos:line="27" pos:column="11"/></name> <modifier pos:line="27" pos:column="12">*<pos:position pos:line="27" pos:column="13"/></modifier></type><name pos:line="27" pos:column="13">p<pos:position pos:line="27" pos:column="14"/></name></decl>;<pos:position pos:line="27" pos:column="15"/></decl_stmt>

      <for pos:line="29" pos:column="7">for <control pos:line="29" pos:column="11">(<init><expr><name pos:line="29" pos:column="12">p<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <name><name pos:line="29" pos:column="16">a<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">-&gt;<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="19">parts<pos:position pos:line="29" pos:column="24"/></name></name></expr>;<pos:position pos:line="29" pos:column="25"/></init> <condition><expr><name pos:line="29" pos:column="26">p<pos:position pos:line="29" pos:column="27"/></name></expr>;<pos:position pos:line="29" pos:column="28"/></condition> <incr><expr><name pos:line="29" pos:column="29">p<pos:position pos:line="29" pos:column="30"/></name> <operator pos:line="29" pos:column="31">=<pos:position pos:line="29" pos:column="32"/></operator> <name><name pos:line="29" pos:column="33">p<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">-&gt;<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="36">next<pos:position pos:line="29" pos:column="40"/></name></name></expr></incr>)<pos:position pos:line="29" pos:column="41"/></control>
      <block pos:line="30" pos:column="7">{
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><call><name pos:line="31" pos:column="13">mutt_can_decode<pos:position pos:line="31" pos:column="28"/></name> <argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">p<pos:position pos:line="31" pos:column="31"/></name></expr></argument>)<pos:position pos:line="31" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="33"/></condition><then pos:line="31" pos:column="33">
	  <block type="pseudo"><return pos:line="32" pos:column="11">return <expr><operator pos:line="32" pos:column="18">(<pos:position pos:line="32" pos:column="19"/></operator><literal type="number" pos:line="32" pos:column="19">1<pos:position pos:line="32" pos:column="20"/></literal><operator pos:line="32" pos:column="20">)<pos:position pos:line="32" pos:column="21"/></operator></expr>;<pos:position pos:line="32" pos:column="22"/></return></block></then></if>
      }<pos:position pos:line="33" pos:column="8"/></block></for>
    }<pos:position pos:line="34" pos:column="6"/></block></else></if>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if></elseif>



<cpp:ifdef pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">ifdef<pos:position pos:line="39" pos:column="7"/></cpp:directive> <name pos:line="39" pos:column="8">HAVE_PGP<pos:position pos:line="39" pos:column="16"/></name></cpp:ifdef>
  <elseif pos:line="40" pos:column="3">else <if pos:line="40" pos:column="8">if <condition pos:line="40" pos:column="11">(<expr><name><name pos:line="40" pos:column="12">a<pos:position pos:line="40" pos:column="13"/></name><operator pos:line="40" pos:column="13">-&gt;<pos:position pos:line="40" pos:column="18"/></operator><name pos:line="40" pos:column="15">type<pos:position pos:line="40" pos:column="19"/></name></name> <operator pos:line="40" pos:column="20">==<pos:position pos:line="40" pos:column="22"/></operator> <name pos:line="40" pos:column="23">TYPEAPPLICATION<pos:position pos:line="40" pos:column="38"/></name></expr>)<pos:position pos:line="40" pos:column="39"/></condition><then pos:line="40" pos:column="39">
  <block pos:line="41" pos:column="3">{
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><call><name pos:line="42" pos:column="9">mutt_is_application_pgp<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><name pos:line="42" pos:column="33">a<pos:position pos:line="42" pos:column="34"/></name></expr></argument>)<pos:position pos:line="42" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="36"/></condition><then pos:line="42" pos:column="36">
      <block type="pseudo"><return pos:line="43" pos:column="7">return <expr><operator pos:line="43" pos:column="14">(<pos:position pos:line="43" pos:column="15"/></operator><literal type="number" pos:line="43" pos:column="15">1<pos:position pos:line="43" pos:column="16"/></literal><operator pos:line="43" pos:column="16">)<pos:position pos:line="43" pos:column="17"/></operator></expr>;<pos:position pos:line="43" pos:column="18"/></return></block></then></if>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if></elseif></if>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif>



  <return pos:line="49" pos:column="3">return <expr><operator pos:line="49" pos:column="10">(<pos:position pos:line="49" pos:column="11"/></operator><literal type="number" pos:line="49" pos:column="11">0<pos:position pos:line="49" pos:column="12"/></literal><operator pos:line="49" pos:column="12">)<pos:position pos:line="49" pos:column="13"/></operator></expr>;<pos:position pos:line="49" pos:column="14"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
