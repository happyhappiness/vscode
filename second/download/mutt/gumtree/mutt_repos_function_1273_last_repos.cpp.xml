<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1273_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_write_mime_body<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">BODY<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">a<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">FILE<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">f<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">p<pos:position pos:line="3" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name><name pos:line="3" pos:column="12">boundary<pos:position pos:line="3" pos:column="20"/></name><index pos:line="3" pos:column="20">[<expr><name pos:line="3" pos:column="21">SHORT_STRING<pos:position pos:line="3" pos:column="33"/></name></expr>]<pos:position pos:line="3" pos:column="34"/></index></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">send_charset<pos:position pos:line="4" pos:column="20"/></name><index pos:line="4" pos:column="20">[<expr><name pos:line="4" pos:column="21">SHORT_STRING<pos:position pos:line="4" pos:column="33"/></name></expr>]<pos:position pos:line="4" pos:column="34"/></index></name></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">FILE<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">fpin<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">BODY<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">t<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">FGETCONV<pos:position pos:line="7" pos:column="11"/></name> <modifier pos:line="7" pos:column="12">*<pos:position pos:line="7" pos:column="13"/></modifier></type><name pos:line="7" pos:column="13">fc<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name><name pos:line="9" pos:column="7">a<pos:position pos:line="9" pos:column="8"/></name><operator pos:line="9" pos:column="8">-&gt;<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="10">type<pos:position pos:line="9" pos:column="14"/></name></name> <operator pos:line="9" pos:column="15">==<pos:position pos:line="9" pos:column="17"/></operator> <name pos:line="9" pos:column="18">TYPEMULTIPART<pos:position pos:line="9" pos:column="31"/></name></expr>)<pos:position pos:line="9" pos:column="32"/></condition><then pos:line="9" pos:column="32">
  <block pos:line="10" pos:column="3">{
    <comment type="block" pos:line="11" pos:column="5">/* First, find the boundary to use */</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><operator pos:line="12" pos:column="10">(<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">p<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <call><name pos:line="12" pos:column="15">mutt_get_parameter<pos:position pos:line="12" pos:column="33"/></name> <argument_list pos:line="12" pos:column="34">(<argument><expr><literal type="string" pos:line="12" pos:column="35">"boundary"<pos:position pos:line="12" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="47">a<pos:position pos:line="12" pos:column="48"/></name><operator pos:line="12" pos:column="48">-&gt;<pos:position pos:line="12" pos:column="53"/></operator><name pos:line="12" pos:column="50">parameter<pos:position pos:line="12" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="60"/></argument_list></call><operator pos:line="12" pos:column="60">)<pos:position pos:line="12" pos:column="61"/></operator></expr>)<pos:position pos:line="12" pos:column="62"/></condition><then pos:line="12" pos:column="62">
    <block pos:line="13" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="14" pos:column="7">dprint<pos:position pos:line="14" pos:column="13"/></name> <argument_list pos:line="14" pos:column="14">(<argument><expr><literal type="number" pos:line="14" pos:column="15">1<pos:position pos:line="14" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="14" pos:column="18">(<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="19">debugfile<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">,<pos:position pos:line="14" pos:column="29"/></operator> <literal type="string" pos:line="14" pos:column="30">"mutt_write_mime_body(): no boundary parameter found!\n"<pos:position pos:line="14" pos:column="86"/></literal><operator pos:line="14" pos:column="86">)<pos:position pos:line="14" pos:column="87"/></operator></expr></argument>)<pos:position pos:line="14" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="89"/></expr_stmt>
      <decl_stmt><decl><type><name pos:line="15" pos:column="7">mutt_error<pos:position pos:line="15" pos:column="17"/></name></type> <name pos:line="15" pos:column="18">_<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><literal type="string" pos:line="15" pos:column="20">"No boundary parameter found! [report this error]"<pos:position pos:line="15" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="71"/></argument_list></decl>;<pos:position pos:line="15" pos:column="72"/></decl_stmt>
      <return pos:line="16" pos:column="7">return <expr><operator pos:line="16" pos:column="14">(<pos:position pos:line="16" pos:column="15"/></operator><operator pos:line="16" pos:column="15">-<pos:position pos:line="16" pos:column="16"/></operator><literal type="number" pos:line="16" pos:column="16">1<pos:position pos:line="16" pos:column="17"/></literal><operator pos:line="16" pos:column="17">)<pos:position pos:line="16" pos:column="18"/></operator></expr>;<pos:position pos:line="16" pos:column="19"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">strfcpy<pos:position pos:line="18" pos:column="12"/></name> <argument_list pos:line="18" pos:column="13">(<argument><expr><name pos:line="18" pos:column="14">boundary<pos:position pos:line="18" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="24">p<pos:position pos:line="18" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="27">sizeof <argument_list pos:line="18" pos:column="34">(<argument><expr><name pos:line="18" pos:column="35">boundary<pos:position pos:line="18" pos:column="43"/></name></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="46"/></expr_stmt>

    <for pos:line="20" pos:column="5">for <control pos:line="20" pos:column="9">(<init><expr><name pos:line="20" pos:column="10">t<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <name><name pos:line="20" pos:column="14">a<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">-&gt;<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="17">parts<pos:position pos:line="20" pos:column="22"/></name></name></expr>;<pos:position pos:line="20" pos:column="23"/></init> <condition><expr><name pos:line="20" pos:column="24">t<pos:position pos:line="20" pos:column="25"/></name></expr> ;<pos:position pos:line="20" pos:column="27"/></condition> <incr><expr><name pos:line="20" pos:column="28">t<pos:position pos:line="20" pos:column="29"/></name> <operator pos:line="20" pos:column="30">=<pos:position pos:line="20" pos:column="31"/></operator> <name><name pos:line="20" pos:column="32">t<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">-&gt;<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="35">next<pos:position pos:line="20" pos:column="39"/></name></name></expr></incr>)<pos:position pos:line="20" pos:column="40"/></control>
    <block pos:line="21" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="22" pos:column="7">fprintf<pos:position pos:line="22" pos:column="14"/></name> <argument_list pos:line="22" pos:column="15">(<argument><expr><name pos:line="22" pos:column="16">f<pos:position pos:line="22" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="19">"\n--%s\n"<pos:position pos:line="22" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="31">boundary<pos:position pos:line="22" pos:column="39"/></name></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="41"/></expr_stmt>
      <if pos:line="23" pos:column="7">if <condition pos:line="23" pos:column="10">(<expr><call><name pos:line="23" pos:column="11">mutt_write_mime_header<pos:position pos:line="23" pos:column="33"/></name> <argument_list pos:line="23" pos:column="34">(<argument><expr><name pos:line="23" pos:column="35">t<pos:position pos:line="23" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="38">f<pos:position pos:line="23" pos:column="39"/></name></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></call> <operator pos:line="23" pos:column="41">==<pos:position pos:line="23" pos:column="43"/></operator> <operator pos:line="23" pos:column="44">-<pos:position pos:line="23" pos:column="45"/></operator><literal type="number" pos:line="23" pos:column="45">1<pos:position pos:line="23" pos:column="46"/></literal></expr>)<pos:position pos:line="23" pos:column="47"/></condition><then pos:line="23" pos:column="47">
	<block type="pseudo"><return pos:line="24" pos:column="9">return <expr><operator pos:line="24" pos:column="16">-<pos:position pos:line="24" pos:column="17"/></operator><literal type="number" pos:line="24" pos:column="17">1<pos:position pos:line="24" pos:column="18"/></literal></expr>;<pos:position pos:line="24" pos:column="19"/></return></block></then></if>
      <expr_stmt><expr><call><name pos:line="25" pos:column="7">fputc<pos:position pos:line="25" pos:column="12"/></name> <argument_list pos:line="25" pos:column="13">(<argument><expr><literal type="char" pos:line="25" pos:column="14">'\n'<pos:position pos:line="25" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="20">f<pos:position pos:line="25" pos:column="21"/></name></expr></argument>)<pos:position pos:line="25" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="23"/></expr_stmt>
      <if pos:line="26" pos:column="7">if <condition pos:line="26" pos:column="10">(<expr><call><name pos:line="26" pos:column="11">mutt_write_mime_body<pos:position pos:line="26" pos:column="31"/></name> <argument_list pos:line="26" pos:column="32">(<argument><expr><name pos:line="26" pos:column="33">t<pos:position pos:line="26" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="36">f<pos:position pos:line="26" pos:column="37"/></name></expr></argument>)<pos:position pos:line="26" pos:column="38"/></argument_list></call> <operator pos:line="26" pos:column="39">==<pos:position pos:line="26" pos:column="41"/></operator> <operator pos:line="26" pos:column="42">-<pos:position pos:line="26" pos:column="43"/></operator><literal type="number" pos:line="26" pos:column="43">1<pos:position pos:line="26" pos:column="44"/></literal></expr>)<pos:position pos:line="26" pos:column="45"/></condition><then pos:line="26" pos:column="45">
	<block type="pseudo"><return pos:line="27" pos:column="9">return <expr><operator pos:line="27" pos:column="16">-<pos:position pos:line="27" pos:column="17"/></operator><literal type="number" pos:line="27" pos:column="17">1<pos:position pos:line="27" pos:column="18"/></literal></expr>;<pos:position pos:line="27" pos:column="19"/></return></block></then></if>
    }<pos:position pos:line="28" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">fprintf<pos:position pos:line="29" pos:column="12"/></name> <argument_list pos:line="29" pos:column="13">(<argument><expr><name pos:line="29" pos:column="14">f<pos:position pos:line="29" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="17">"\n--%s--\n"<pos:position pos:line="29" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="31">boundary<pos:position pos:line="29" pos:column="39"/></name></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>
    <return pos:line="30" pos:column="5">return <expr><operator pos:line="30" pos:column="12">(<pos:position pos:line="30" pos:column="13"/></operator><ternary><condition><expr><call><name pos:line="30" pos:column="13">ferror<pos:position pos:line="30" pos:column="19"/></name> <argument_list pos:line="30" pos:column="20">(<argument><expr><name pos:line="30" pos:column="21">f<pos:position pos:line="30" pos:column="22"/></name></expr></argument>)<pos:position pos:line="30" pos:column="23"/></argument_list></call></expr> ?<pos:position pos:line="30" pos:column="25"/></condition><then pos:line="30" pos:column="25"> <expr><operator pos:line="30" pos:column="26">-<pos:position pos:line="30" pos:column="27"/></operator><literal type="number" pos:line="30" pos:column="27">1<pos:position pos:line="30" pos:column="28"/></literal></expr> <pos:position pos:line="30" pos:column="29"/></then><else pos:line="30" pos:column="29">: <expr><literal type="number" pos:line="30" pos:column="31">0<pos:position pos:line="30" pos:column="32"/></literal></expr></else></ternary><operator pos:line="30" pos:column="32">)<pos:position pos:line="30" pos:column="33"/></operator></expr>;<pos:position pos:line="30" pos:column="34"/></return>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="33" pos:column="3">/* This is pretty gross, but it's the best solution for now... */</comment>
  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><operator pos:line="34" pos:column="7">(<pos:position pos:line="34" pos:column="8"/></operator><name pos:line="34" pos:column="8">WithCrypto<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">&amp;<pos:position pos:line="34" pos:column="24"/></operator> <name pos:line="34" pos:column="21">APPLICATION_PGP<pos:position pos:line="34" pos:column="36"/></name><operator pos:line="34" pos:column="36">)<pos:position pos:line="34" pos:column="37"/></operator>
      <operator pos:line="35" pos:column="7">&amp;&amp;<pos:position pos:line="35" pos:column="17"/></operator> <name><name pos:line="35" pos:column="10">a<pos:position pos:line="35" pos:column="11"/></name><operator pos:line="35" pos:column="11">-&gt;<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="13">type<pos:position pos:line="35" pos:column="17"/></name></name> <operator pos:line="35" pos:column="18">==<pos:position pos:line="35" pos:column="20"/></operator> <name pos:line="35" pos:column="21">TYPEAPPLICATION<pos:position pos:line="35" pos:column="36"/></name>
      <operator pos:line="36" pos:column="7">&amp;&amp;<pos:position pos:line="36" pos:column="17"/></operator> <call><name pos:line="36" pos:column="10">mutt_strcmp<pos:position pos:line="36" pos:column="21"/></name> <argument_list pos:line="36" pos:column="22">(<argument><expr><name><name pos:line="36" pos:column="23">a<pos:position pos:line="36" pos:column="24"/></name><operator pos:line="36" pos:column="24">-&gt;<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="26">subtype<pos:position pos:line="36" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="35">"pgp-encrypted"<pos:position pos:line="36" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="51"/></argument_list></call> <operator pos:line="36" pos:column="52">==<pos:position pos:line="36" pos:column="54"/></operator> <literal type="number" pos:line="36" pos:column="55">0<pos:position pos:line="36" pos:column="56"/></literal></expr>)<pos:position pos:line="36" pos:column="57"/></condition><then pos:line="36" pos:column="57">
  <block pos:line="37" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">fputs<pos:position pos:line="38" pos:column="10"/></name> <argument_list pos:line="38" pos:column="11">(<argument><expr><literal type="string" pos:line="38" pos:column="12">"Version: 1\n"<pos:position pos:line="38" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="28">f<pos:position pos:line="38" pos:column="29"/></name></expr></argument>)<pos:position pos:line="38" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="31"/></expr_stmt>
    <return pos:line="39" pos:column="5">return <expr><literal type="number" pos:line="39" pos:column="12">0<pos:position pos:line="39" pos:column="13"/></literal></expr>;<pos:position pos:line="39" pos:column="14"/></return>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if>

  <if pos:line="42" pos:column="3">if <condition pos:line="42" pos:column="6">(<expr><operator pos:line="42" pos:column="7">(<pos:position pos:line="42" pos:column="8"/></operator><name pos:line="42" pos:column="8">fpin<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">=<pos:position pos:line="42" pos:column="14"/></operator> <call><name pos:line="42" pos:column="15">fopen<pos:position pos:line="42" pos:column="20"/></name> <argument_list pos:line="42" pos:column="21">(<argument><expr><name><name pos:line="42" pos:column="22">a<pos:position pos:line="42" pos:column="23"/></name><operator pos:line="42" pos:column="23">-&gt;<pos:position pos:line="42" pos:column="28"/></operator><name pos:line="42" pos:column="25">filename<pos:position pos:line="42" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="35">"r"<pos:position pos:line="42" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="39"/></argument_list></call><operator pos:line="42" pos:column="39">)<pos:position pos:line="42" pos:column="40"/></operator> <operator pos:line="42" pos:column="41">==<pos:position pos:line="42" pos:column="43"/></operator> <name pos:line="42" pos:column="44">NULL<pos:position pos:line="42" pos:column="48"/></name></expr>)<pos:position pos:line="42" pos:column="49"/></condition><then pos:line="42" pos:column="49">
  <block pos:line="43" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">dprint<pos:position pos:line="44" pos:column="11"/></name><argument_list pos:line="44" pos:column="11">(<argument><expr><literal type="number" pos:line="44" pos:column="12">1<pos:position pos:line="44" pos:column="13"/></literal></expr></argument>,<argument><expr><operator pos:line="44" pos:column="14">(<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="15">debugfile<pos:position pos:line="44" pos:column="24"/></name><operator pos:line="44" pos:column="24">,<pos:position pos:line="44" pos:column="25"/></operator> <literal type="string" pos:line="44" pos:column="26">"write_mime_body: %s no longer exists!\n"<pos:position pos:line="44" pos:column="67"/></literal><operator pos:line="44" pos:column="67">,<pos:position pos:line="44" pos:column="68"/></operator><name><name pos:line="44" pos:column="68">a<pos:position pos:line="44" pos:column="69"/></name><operator pos:line="44" pos:column="69">-&gt;<pos:position pos:line="44" pos:column="74"/></operator><name pos:line="44" pos:column="71">filename<pos:position pos:line="44" pos:column="79"/></name></name><operator pos:line="44" pos:column="79">)<pos:position pos:line="44" pos:column="80"/></operator></expr></argument>)<pos:position pos:line="44" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="82"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">mutt_error<pos:position pos:line="45" pos:column="15"/></name> <argument_list pos:line="45" pos:column="16">(<argument><expr><call><name pos:line="45" pos:column="17">_<pos:position pos:line="45" pos:column="18"/></name><argument_list pos:line="45" pos:column="18">(<argument><expr><literal type="string" pos:line="45" pos:column="19">"%s no longer exists!"<pos:position pos:line="45" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="44">a<pos:position pos:line="45" pos:column="45"/></name><operator pos:line="45" pos:column="45">-&gt;<pos:position pos:line="45" pos:column="50"/></operator><name pos:line="45" pos:column="47">filename<pos:position pos:line="45" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="57"/></expr_stmt>
    <return pos:line="46" pos:column="5">return <expr><operator pos:line="46" pos:column="12">-<pos:position pos:line="46" pos:column="13"/></operator><literal type="number" pos:line="46" pos:column="13">1<pos:position pos:line="46" pos:column="14"/></literal></expr>;<pos:position pos:line="46" pos:column="15"/></return>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>

  <if pos:line="49" pos:column="3">if <condition pos:line="49" pos:column="6">(<expr><name><name pos:line="49" pos:column="7">a<pos:position pos:line="49" pos:column="8"/></name><operator pos:line="49" pos:column="8">-&gt;<pos:position pos:line="49" pos:column="13"/></operator><name pos:line="49" pos:column="10">type<pos:position pos:line="49" pos:column="14"/></name></name> <operator pos:line="49" pos:column="15">==<pos:position pos:line="49" pos:column="17"/></operator> <name pos:line="49" pos:column="18">TYPETEXT<pos:position pos:line="49" pos:column="26"/></name> <operator pos:line="49" pos:column="27">&amp;&amp;<pos:position pos:line="49" pos:column="37"/></operator> <operator pos:line="49" pos:column="30">(<pos:position pos:line="49" pos:column="31"/></operator><operator pos:line="49" pos:column="31">!<pos:position pos:line="49" pos:column="32"/></operator><name><name pos:line="49" pos:column="32">a<pos:position pos:line="49" pos:column="33"/></name><operator pos:line="49" pos:column="33">-&gt;<pos:position pos:line="49" pos:column="38"/></operator><name pos:line="49" pos:column="35">noconv<pos:position pos:line="49" pos:column="41"/></name></name><operator pos:line="49" pos:column="41">)<pos:position pos:line="49" pos:column="42"/></operator></expr>)<pos:position pos:line="49" pos:column="43"/></condition><then pos:line="49" pos:column="43">
    <block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="5">fc<pos:position pos:line="50" pos:column="7"/></name> <operator pos:line="50" pos:column="8">=<pos:position pos:line="50" pos:column="9"/></operator> <call><name pos:line="50" pos:column="10">fgetconv_open<pos:position pos:line="50" pos:column="23"/></name> <argument_list pos:line="50" pos:column="24">(<argument><expr><name pos:line="50" pos:column="25">fpin<pos:position pos:line="50" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="31">a<pos:position pos:line="50" pos:column="32"/></name><operator pos:line="50" pos:column="32">-&gt;<pos:position pos:line="50" pos:column="37"/></operator><name pos:line="50" pos:column="34">charset<pos:position pos:line="50" pos:column="41"/></name></name></expr></argument>,
			<argument><expr><call><name pos:line="51" pos:column="25">mutt_get_body_charset<pos:position pos:line="51" pos:column="46"/></name> <argument_list pos:line="51" pos:column="47">(<argument><expr><name pos:line="51" pos:column="48">send_charset<pos:position pos:line="51" pos:column="60"/></name></expr></argument>, <argument><expr><sizeof pos:line="51" pos:column="62">sizeof <argument_list pos:line="51" pos:column="69">(<argument><expr><name pos:line="51" pos:column="70">send_charset<pos:position pos:line="51" pos:column="82"/></name></expr></argument>)<pos:position pos:line="51" pos:column="83"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="51" pos:column="85">a<pos:position pos:line="51" pos:column="86"/></name></expr></argument>)<pos:position pos:line="51" pos:column="87"/></argument_list></call></expr></argument>,
			<argument><expr><literal type="number" pos:line="52" pos:column="25">0<pos:position pos:line="52" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="28"/></expr_stmt></block></then>
  <else pos:line="53" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="5">fc<pos:position pos:line="54" pos:column="7"/></name> <operator pos:line="54" pos:column="8">=<pos:position pos:line="54" pos:column="9"/></operator> <call><name pos:line="54" pos:column="10">fgetconv_open<pos:position pos:line="54" pos:column="23"/></name> <argument_list pos:line="54" pos:column="24">(<argument><expr><name pos:line="54" pos:column="25">fpin<pos:position pos:line="54" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="31">0<pos:position pos:line="54" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="34">0<pos:position pos:line="54" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="37">0<pos:position pos:line="54" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="40"/></expr_stmt></block></else></if>

  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><name><name pos:line="56" pos:column="7">a<pos:position pos:line="56" pos:column="8"/></name><operator pos:line="56" pos:column="8">-&gt;<pos:position pos:line="56" pos:column="13"/></operator><name pos:line="56" pos:column="10">encoding<pos:position pos:line="56" pos:column="18"/></name></name> <operator pos:line="56" pos:column="19">==<pos:position pos:line="56" pos:column="21"/></operator> <name pos:line="56" pos:column="22">ENCQUOTEDPRINTABLE<pos:position pos:line="56" pos:column="40"/></name></expr>)<pos:position pos:line="56" pos:column="41"/></condition><then pos:line="56" pos:column="41">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="5">encode_quoted<pos:position pos:line="57" pos:column="18"/></name> <argument_list pos:line="57" pos:column="19">(<argument><expr><name pos:line="57" pos:column="20">fc<pos:position pos:line="57" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="24">f<pos:position pos:line="57" pos:column="25"/></name></expr></argument>, <argument><expr><call><name pos:line="57" pos:column="27">write_as_text_part<pos:position pos:line="57" pos:column="45"/></name> <argument_list pos:line="57" pos:column="46">(<argument><expr><name pos:line="57" pos:column="47">a<pos:position pos:line="57" pos:column="48"/></name></expr></argument>)<pos:position pos:line="57" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="51"/></expr_stmt></block></then>
  <elseif pos:line="58" pos:column="3">else <if pos:line="58" pos:column="8">if <condition pos:line="58" pos:column="11">(<expr><name><name pos:line="58" pos:column="12">a<pos:position pos:line="58" pos:column="13"/></name><operator pos:line="58" pos:column="13">-&gt;<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="15">encoding<pos:position pos:line="58" pos:column="23"/></name></name> <operator pos:line="58" pos:column="24">==<pos:position pos:line="58" pos:column="26"/></operator> <name pos:line="58" pos:column="27">ENCBASE64<pos:position pos:line="58" pos:column="36"/></name></expr>)<pos:position pos:line="58" pos:column="37"/></condition><then pos:line="58" pos:column="37">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="5">encode_base64<pos:position pos:line="59" pos:column="18"/></name> <argument_list pos:line="59" pos:column="19">(<argument><expr><name pos:line="59" pos:column="20">fc<pos:position pos:line="59" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="24">f<pos:position pos:line="59" pos:column="25"/></name></expr></argument>, <argument><expr><call><name pos:line="59" pos:column="27">write_as_text_part<pos:position pos:line="59" pos:column="45"/></name> <argument_list pos:line="59" pos:column="46">(<argument><expr><name pos:line="59" pos:column="47">a<pos:position pos:line="59" pos:column="48"/></name></expr></argument>)<pos:position pos:line="59" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="51"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="60" pos:column="3">else <if pos:line="60" pos:column="8">if <condition pos:line="60" pos:column="11">(<expr><name><name pos:line="60" pos:column="12">a<pos:position pos:line="60" pos:column="13"/></name><operator pos:line="60" pos:column="13">-&gt;<pos:position pos:line="60" pos:column="18"/></operator><name pos:line="60" pos:column="15">type<pos:position pos:line="60" pos:column="19"/></name></name> <operator pos:line="60" pos:column="20">==<pos:position pos:line="60" pos:column="22"/></operator> <name pos:line="60" pos:column="23">TYPETEXT<pos:position pos:line="60" pos:column="31"/></name> <operator pos:line="60" pos:column="32">&amp;&amp;<pos:position pos:line="60" pos:column="42"/></operator> <operator pos:line="60" pos:column="35">(<pos:position pos:line="60" pos:column="36"/></operator><operator pos:line="60" pos:column="36">!<pos:position pos:line="60" pos:column="37"/></operator><name><name pos:line="60" pos:column="37">a<pos:position pos:line="60" pos:column="38"/></name><operator pos:line="60" pos:column="38">-&gt;<pos:position pos:line="60" pos:column="43"/></operator><name pos:line="60" pos:column="40">noconv<pos:position pos:line="60" pos:column="46"/></name></name><operator pos:line="60" pos:column="46">)<pos:position pos:line="60" pos:column="47"/></operator></expr>)<pos:position pos:line="60" pos:column="48"/></condition><then pos:line="60" pos:column="48">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="5">encode_8bit<pos:position pos:line="61" pos:column="16"/></name> <argument_list pos:line="61" pos:column="17">(<argument><expr><name pos:line="61" pos:column="18">fc<pos:position pos:line="61" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="22">f<pos:position pos:line="61" pos:column="23"/></name></expr></argument>, <argument><expr><call><name pos:line="61" pos:column="25">write_as_text_part<pos:position pos:line="61" pos:column="43"/></name> <argument_list pos:line="61" pos:column="44">(<argument><expr><name pos:line="61" pos:column="45">a<pos:position pos:line="61" pos:column="46"/></name></expr></argument>)<pos:position pos:line="61" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="61" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="49"/></expr_stmt></block></then></if></elseif>
  <else pos:line="62" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="5">mutt_copy_stream<pos:position pos:line="63" pos:column="21"/></name> <argument_list pos:line="63" pos:column="22">(<argument><expr><name pos:line="63" pos:column="23">fpin<pos:position pos:line="63" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="29">f<pos:position pos:line="63" pos:column="30"/></name></expr></argument>)<pos:position pos:line="63" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="32"/></expr_stmt></block></else></if>

  <expr_stmt><expr><call><name pos:line="65" pos:column="3">fgetconv_close<pos:position pos:line="65" pos:column="17"/></name> <argument_list pos:line="65" pos:column="18">(<argument><expr><operator pos:line="65" pos:column="19">&amp;<pos:position pos:line="65" pos:column="24"/></operator><name pos:line="65" pos:column="20">fc<pos:position pos:line="65" pos:column="22"/></name></expr></argument>)<pos:position pos:line="65" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="66" pos:column="3">safe_fclose<pos:position pos:line="66" pos:column="14"/></name> <argument_list pos:line="66" pos:column="15">(<argument><expr><operator pos:line="66" pos:column="16">&amp;<pos:position pos:line="66" pos:column="21"/></operator><name pos:line="66" pos:column="17">fpin<pos:position pos:line="66" pos:column="21"/></name></expr></argument>)<pos:position pos:line="66" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="23"/></expr_stmt>

  <return pos:line="68" pos:column="3">return <expr><operator pos:line="68" pos:column="10">(<pos:position pos:line="68" pos:column="11"/></operator><ternary><condition><expr><call><name pos:line="68" pos:column="11">ferror<pos:position pos:line="68" pos:column="17"/></name> <argument_list pos:line="68" pos:column="18">(<argument><expr><name pos:line="68" pos:column="19">f<pos:position pos:line="68" pos:column="20"/></name></expr></argument>)<pos:position pos:line="68" pos:column="21"/></argument_list></call></expr> ?<pos:position pos:line="68" pos:column="23"/></condition><then pos:line="68" pos:column="23"> <expr><operator pos:line="68" pos:column="24">-<pos:position pos:line="68" pos:column="25"/></operator><literal type="number" pos:line="68" pos:column="25">1<pos:position pos:line="68" pos:column="26"/></literal></expr> <pos:position pos:line="68" pos:column="27"/></then><else pos:line="68" pos:column="27">: <expr><literal type="number" pos:line="68" pos:column="29">0<pos:position pos:line="68" pos:column="30"/></literal></expr></else></ternary><operator pos:line="68" pos:column="30">)<pos:position pos:line="68" pos:column="31"/></operator></expr>;<pos:position pos:line="68" pos:column="32"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
