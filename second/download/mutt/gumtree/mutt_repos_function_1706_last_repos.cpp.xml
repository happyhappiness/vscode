<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1706_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">smtp_helo<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">CONNECTION<pos:position pos:line="1" pos:column="33"/></name><modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type> <name pos:line="1" pos:column="35">conn<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">buf<pos:position pos:line="3" pos:column="11"/></name><index pos:line="3" pos:column="11">[<expr><name pos:line="3" pos:column="12">LONG_STRING<pos:position pos:line="3" pos:column="23"/></name></expr>]<pos:position pos:line="3" pos:column="24"/></index></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name><modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type> <name pos:line="4" pos:column="15">fqdn<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">memset<pos:position pos:line="6" pos:column="9"/></name> <argument_list pos:line="6" pos:column="10">(<argument><expr><name pos:line="6" pos:column="11">Capabilities<pos:position pos:line="6" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="25">0<pos:position pos:line="6" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="28">sizeof <argument_list pos:line="6" pos:column="35">(<argument><expr><name pos:line="6" pos:column="36">Capabilities<pos:position pos:line="6" pos:column="48"/></name></expr></argument>)<pos:position pos:line="6" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="51"/></expr_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><operator pos:line="8" pos:column="7">!<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">Esmtp<pos:position pos:line="8" pos:column="13"/></name></expr>)<pos:position pos:line="8" pos:column="14"/></condition><then pos:line="8" pos:column="14">
  <block pos:line="9" pos:column="3">{
    <comment type="block" pos:line="10" pos:column="5">/* if TLS or AUTH are requested, use EHLO */</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name><name pos:line="11" pos:column="9">conn<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">-&gt;<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="15">account<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">.<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="23">flags<pos:position pos:line="11" pos:column="28"/></name></name> <operator pos:line="11" pos:column="29">&amp;<pos:position pos:line="11" pos:column="34"/></operator> <name pos:line="11" pos:column="31">MUTT_ACCT_USER<pos:position pos:line="11" pos:column="45"/></name></expr>)<pos:position pos:line="11" pos:column="46"/></condition><then pos:line="11" pos:column="46">
      <block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="7">Esmtp<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <literal type="number" pos:line="12" pos:column="15">1<pos:position pos:line="12" pos:column="16"/></literal></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt></block></then></if>
<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">USE_SSL<pos:position pos:line="13" pos:column="15"/></name></cpp:ifdef>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name pos:line="14" pos:column="9">option<pos:position pos:line="14" pos:column="15"/></name> <argument_list pos:line="14" pos:column="16">(<argument><expr><name pos:line="14" pos:column="17">OPTSSLFORCETLS<pos:position pos:line="14" pos:column="31"/></name></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call> <operator pos:line="14" pos:column="33">||<pos:position pos:line="14" pos:column="35"/></operator> <call><name pos:line="14" pos:column="36">quadoption<pos:position pos:line="14" pos:column="46"/></name> <argument_list pos:line="14" pos:column="47">(<argument><expr><name pos:line="14" pos:column="48">OPT_SSLSTARTTLS<pos:position pos:line="14" pos:column="63"/></name></expr></argument>)<pos:position pos:line="14" pos:column="64"/></argument_list></call> <operator pos:line="14" pos:column="65">!=<pos:position pos:line="14" pos:column="67"/></operator> <name pos:line="14" pos:column="68">MUTT_NO<pos:position pos:line="14" pos:column="75"/></name></expr>)<pos:position pos:line="14" pos:column="76"/></condition><then pos:line="14" pos:column="76">
      <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="7">Esmtp<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <literal type="number" pos:line="15" pos:column="15">1<pos:position pos:line="15" pos:column="16"/></literal></expr>;<pos:position pos:line="15" pos:column="17"/></expr_stmt></block></then></if>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><operator pos:line="19" pos:column="6">!<pos:position pos:line="19" pos:column="7"/></operator><operator pos:line="19" pos:column="7">(<pos:position pos:line="19" pos:column="8"/></operator><name pos:line="19" pos:column="8">fqdn<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <call><name pos:line="19" pos:column="15">mutt_fqdn<pos:position pos:line="19" pos:column="24"/></name> <argument_list pos:line="19" pos:column="25">(<argument><expr><literal type="number" pos:line="19" pos:column="26">0<pos:position pos:line="19" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="28"/></argument_list></call><operator pos:line="19" pos:column="28">)<pos:position pos:line="19" pos:column="29"/></operator></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30">
    <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="5">fqdn<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <call><name pos:line="20" pos:column="12">NONULL<pos:position pos:line="20" pos:column="18"/></name> <argument_list pos:line="20" pos:column="19">(<argument><expr><name pos:line="20" pos:column="20">Hostname<pos:position pos:line="20" pos:column="28"/></name></expr></argument>)<pos:position pos:line="20" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="30"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="22" pos:column="3">snprintf<pos:position pos:line="22" pos:column="11"/></name> <argument_list pos:line="22" pos:column="12">(<argument><expr><name pos:line="22" pos:column="13">buf<pos:position pos:line="22" pos:column="16"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="18">sizeof <argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">buf<pos:position pos:line="22" pos:column="29"/></name></expr></argument>)<pos:position pos:line="22" pos:column="30"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="32">"%s %s\r\n"<pos:position pos:line="22" pos:column="43"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="22" pos:column="45">Esmtp<pos:position pos:line="22" pos:column="50"/></name></expr> ?<pos:position pos:line="22" pos:column="52"/></condition><then pos:line="22" pos:column="52"> <expr><literal type="string" pos:line="22" pos:column="53">"EHLO"<pos:position pos:line="22" pos:column="59"/></literal></expr> <pos:position pos:line="22" pos:column="60"/></then><else pos:line="22" pos:column="60">: <expr><literal type="string" pos:line="22" pos:column="62">"HELO"<pos:position pos:line="22" pos:column="68"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="22" pos:column="70">fqdn<pos:position pos:line="22" pos:column="74"/></name></expr></argument>)<pos:position pos:line="22" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="76"/></expr_stmt>
  <comment type="block" pos:line="23" pos:column="3">/* XXX there should probably be a wrapper in mutt_socket.c that
    * repeatedly calls conn-&gt;write until all data is sent.  This
    * currently doesn't check for a short write.
    */</comment>
  <if pos:line="27" pos:column="3">if <condition pos:line="27" pos:column="6">(<expr><call><name pos:line="27" pos:column="7">mutt_socket_write<pos:position pos:line="27" pos:column="24"/></name> <argument_list pos:line="27" pos:column="25">(<argument><expr><name pos:line="27" pos:column="26">conn<pos:position pos:line="27" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="32">buf<pos:position pos:line="27" pos:column="35"/></name></expr></argument>)<pos:position pos:line="27" pos:column="36"/></argument_list></call> <operator pos:line="27" pos:column="37">==<pos:position pos:line="27" pos:column="39"/></operator> <operator pos:line="27" pos:column="40">-<pos:position pos:line="27" pos:column="41"/></operator><literal type="number" pos:line="27" pos:column="41">1<pos:position pos:line="27" pos:column="42"/></literal></expr>)<pos:position pos:line="27" pos:column="43"/></condition><then pos:line="27" pos:column="43">
    <block type="pseudo"><return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">smtp_err_write<pos:position pos:line="28" pos:column="26"/></name></expr>;<pos:position pos:line="28" pos:column="27"/></return></block></then></if>
  <return pos:line="29" pos:column="3">return <expr><call><name pos:line="29" pos:column="10">smtp_get_resp<pos:position pos:line="29" pos:column="23"/></name> <argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">conn<pos:position pos:line="29" pos:column="29"/></name></expr></argument>)<pos:position pos:line="29" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="31"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
