<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1694_mutt-1.7.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_var_value_complete<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">buffer<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">size_t<pos:position pos:line="1" pos:column="50"/></name></type> <name pos:line="1" pos:column="51">len<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">pos<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">var<pos:position pos:line="3" pos:column="11"/></name><index pos:line="3" pos:column="11">[<expr><name pos:line="3" pos:column="12">STRING<pos:position pos:line="3" pos:column="18"/></name></expr>]<pos:position pos:line="3" pos:column="19"/></index></name></decl>, <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="22">pt<pos:position pos:line="3" pos:column="24"/></name> <init pos:line="3" pos:column="25">= <expr><name pos:line="3" pos:column="27">buffer<pos:position pos:line="3" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">spaces<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name><name pos:line="6" pos:column="7">buffer<pos:position pos:line="6" pos:column="13"/></name><index pos:line="6" pos:column="13">[<expr><literal type="number" pos:line="6" pos:column="14">0<pos:position pos:line="6" pos:column="15"/></literal></expr>]<pos:position pos:line="6" pos:column="16"/></index></name> <operator pos:line="6" pos:column="17">==<pos:position pos:line="6" pos:column="19"/></operator> <literal type="number" pos:line="6" pos:column="20">0<pos:position pos:line="6" pos:column="21"/></literal></expr>)<pos:position pos:line="6" pos:column="22"/></condition><then pos:line="6" pos:column="22">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><literal type="number" pos:line="7" pos:column="12">0<pos:position pos:line="7" pos:column="13"/></literal></expr>;<pos:position pos:line="7" pos:column="14"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">SKIPWS<pos:position pos:line="9" pos:column="9"/></name> <argument_list pos:line="9" pos:column="10">(<argument><expr><name pos:line="9" pos:column="11">buffer<pos:position pos:line="9" pos:column="17"/></name></expr></argument>)<pos:position pos:line="9" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">spaces<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <name pos:line="10" pos:column="12">buffer<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">-<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="21">pt<pos:position pos:line="10" pos:column="23"/></name></expr>;<pos:position pos:line="10" pos:column="24"/></expr_stmt>

  <expr_stmt><expr><name pos:line="12" pos:column="3">pt<pos:position pos:line="12" pos:column="5"/></name> <operator pos:line="12" pos:column="6">=<pos:position pos:line="12" pos:column="7"/></operator> <name pos:line="12" pos:column="8">buffer<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">+<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">pos<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">-<pos:position pos:line="12" pos:column="22"/></operator> <name pos:line="12" pos:column="23">spaces<pos:position pos:line="12" pos:column="29"/></name></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>
  <while pos:line="13" pos:column="3">while <condition pos:line="13" pos:column="9">(<expr><operator pos:line="13" pos:column="10">(<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">pt<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">&gt;<pos:position pos:line="13" pos:column="18"/></operator> <name pos:line="13" pos:column="16">buffer<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">)<pos:position pos:line="13" pos:column="23"/></operator> <operator pos:line="13" pos:column="24">&amp;&amp;<pos:position pos:line="13" pos:column="34"/></operator> <operator pos:line="13" pos:column="27">!<pos:position pos:line="13" pos:column="28"/></operator><call><name pos:line="13" pos:column="28">isspace<pos:position pos:line="13" pos:column="35"/></name> <argument_list pos:line="13" pos:column="36">(<argument><expr><operator pos:line="13" pos:column="37">(<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="38">unsigned<pos:position pos:line="13" pos:column="46"/></name> <name pos:line="13" pos:column="47">char<pos:position pos:line="13" pos:column="51"/></name><operator pos:line="13" pos:column="51">)<pos:position pos:line="13" pos:column="52"/></operator> <operator pos:line="13" pos:column="53">*<pos:position pos:line="13" pos:column="54"/></operator><name pos:line="13" pos:column="54">pt<pos:position pos:line="13" pos:column="56"/></name></expr></argument>)<pos:position pos:line="13" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="58"/></condition>
    <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="5">pt<pos:position pos:line="14" pos:column="7"/></name><operator pos:line="14" pos:column="7">--<pos:position pos:line="14" pos:column="9"/></operator></expr>;<pos:position pos:line="14" pos:column="10"/></expr_stmt></block></while>
  <expr_stmt><expr><name pos:line="15" pos:column="3">pt<pos:position pos:line="15" pos:column="5"/></name><operator pos:line="15" pos:column="5">++<pos:position pos:line="15" pos:column="7"/></operator></expr>;<pos:position pos:line="15" pos:column="8"/></expr_stmt> <comment type="block" pos:line="15" pos:column="9">/* move past the space */</comment>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><operator pos:line="16" pos:column="7">*<pos:position pos:line="16" pos:column="8"/></operator><name pos:line="16" pos:column="8">pt<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">==<pos:position pos:line="16" pos:column="13"/></operator> <literal type="char" pos:line="16" pos:column="14">'='<pos:position pos:line="16" pos:column="17"/></literal></expr>)<pos:position pos:line="16" pos:column="18"/></condition><then pos:line="16" pos:column="18"> <comment type="block" pos:line="16" pos:column="19">/* abort if no var before the '=' */</comment>
    <block type="pseudo"><return pos:line="17" pos:column="5">return <expr><literal type="number" pos:line="17" pos:column="12">0<pos:position pos:line="17" pos:column="13"/></literal></expr>;<pos:position pos:line="17" pos:column="14"/></return></block></then></if>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><call><name pos:line="19" pos:column="7">mutt_strncmp<pos:position pos:line="19" pos:column="19"/></name> <argument_list pos:line="19" pos:column="20">(<argument><expr><name pos:line="19" pos:column="21">buffer<pos:position pos:line="19" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="29">"set"<pos:position pos:line="19" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="36">3<pos:position pos:line="19" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call> <operator pos:line="19" pos:column="39">==<pos:position pos:line="19" pos:column="41"/></operator> <literal type="number" pos:line="19" pos:column="42">0<pos:position pos:line="19" pos:column="43"/></literal></expr>)<pos:position pos:line="19" pos:column="44"/></condition><then pos:line="19" pos:column="44">
  <block pos:line="20" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">int<pos:position pos:line="21" pos:column="8"/></name></type> <name pos:line="21" pos:column="9">idx<pos:position pos:line="21" pos:column="12"/></name></decl>;<pos:position pos:line="21" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">char<pos:position pos:line="22" pos:column="9"/></name></type> <name><name pos:line="22" pos:column="10">val<pos:position pos:line="22" pos:column="13"/></name><index pos:line="22" pos:column="13">[<expr><name pos:line="22" pos:column="14">LONG_STRING<pos:position pos:line="22" pos:column="25"/></name></expr>]<pos:position pos:line="22" pos:column="26"/></index></name></decl>;<pos:position pos:line="22" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="23" pos:column="5">const<pos:position pos:line="23" pos:column="10"/></specifier> <name pos:line="23" pos:column="11">char<pos:position pos:line="23" pos:column="15"/></name> <modifier pos:line="23" pos:column="16">*<pos:position pos:line="23" pos:column="17"/></modifier></type><name pos:line="23" pos:column="17">myvarval<pos:position pos:line="23" pos:column="25"/></name></decl>;<pos:position pos:line="23" pos:column="26"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="25" pos:column="5">strfcpy<pos:position pos:line="25" pos:column="12"/></name> <argument_list pos:line="25" pos:column="13">(<argument><expr><name pos:line="25" pos:column="14">var<pos:position pos:line="25" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="19">pt<pos:position pos:line="25" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="23">sizeof <argument_list pos:line="25" pos:column="30">(<argument><expr><name pos:line="25" pos:column="31">var<pos:position pos:line="25" pos:column="34"/></name></expr></argument>)<pos:position pos:line="25" pos:column="35"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="37"/></expr_stmt>
    <comment type="block" pos:line="26" pos:column="5">/* ignore the trailing '=' when comparing */</comment>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">var<pos:position pos:line="27" pos:column="8"/></name><index pos:line="27" pos:column="8">[<expr><call><name pos:line="27" pos:column="9">mutt_strlen<pos:position pos:line="27" pos:column="20"/></name> <argument_list pos:line="27" pos:column="21">(<argument><expr><name pos:line="27" pos:column="22">var<pos:position pos:line="27" pos:column="25"/></name></expr></argument>)<pos:position pos:line="27" pos:column="26"/></argument_list></call> <operator pos:line="27" pos:column="27">-<pos:position pos:line="27" pos:column="28"/></operator> <literal type="number" pos:line="27" pos:column="29">1<pos:position pos:line="27" pos:column="30"/></literal></expr>]<pos:position pos:line="27" pos:column="31"/></index></name> <operator pos:line="27" pos:column="32">=<pos:position pos:line="27" pos:column="33"/></operator> <literal type="number" pos:line="27" pos:column="34">0<pos:position pos:line="27" pos:column="35"/></literal></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><operator pos:line="28" pos:column="9">(<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">idx<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <call><name pos:line="28" pos:column="16">mutt_option_index<pos:position pos:line="28" pos:column="33"/></name> <argument_list pos:line="28" pos:column="34">(<argument><expr><name pos:line="28" pos:column="35">var<pos:position pos:line="28" pos:column="38"/></name></expr></argument>)<pos:position pos:line="28" pos:column="39"/></argument_list></call><operator pos:line="28" pos:column="39">)<pos:position pos:line="28" pos:column="40"/></operator> <operator pos:line="28" pos:column="41">==<pos:position pos:line="28" pos:column="43"/></operator> <operator pos:line="28" pos:column="44">-<pos:position pos:line="28" pos:column="45"/></operator><literal type="number" pos:line="28" pos:column="45">1<pos:position pos:line="28" pos:column="46"/></literal></expr>)<pos:position pos:line="28" pos:column="47"/></condition><then pos:line="28" pos:column="47">
    <block pos:line="29" pos:column="5">{
      <if pos:line="30" pos:column="7">if <condition pos:line="30" pos:column="10">(<expr><operator pos:line="30" pos:column="11">(<pos:position pos:line="30" pos:column="12"/></operator><name pos:line="30" pos:column="12">myvarval<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <call><name pos:line="30" pos:column="23">myvar_get<pos:position pos:line="30" pos:column="32"/></name><argument_list pos:line="30" pos:column="32">(<argument><expr><name pos:line="30" pos:column="33">var<pos:position pos:line="30" pos:column="36"/></name></expr></argument>)<pos:position pos:line="30" pos:column="37"/></argument_list></call><operator pos:line="30" pos:column="37">)<pos:position pos:line="30" pos:column="38"/></operator> <operator pos:line="30" pos:column="39">!=<pos:position pos:line="30" pos:column="41"/></operator> <name pos:line="30" pos:column="42">NULL<pos:position pos:line="30" pos:column="46"/></name></expr>)<pos:position pos:line="30" pos:column="47"/></condition><then pos:line="30" pos:column="47">
      <block pos:line="31" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">pretty_var<pos:position pos:line="32" pos:column="19"/></name> <argument_list pos:line="32" pos:column="20">(<argument><expr><name pos:line="32" pos:column="21">pt<pos:position pos:line="32" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="25">len<pos:position pos:line="32" pos:column="28"/></name> <operator pos:line="32" pos:column="29">-<pos:position pos:line="32" pos:column="30"/></operator> <operator pos:line="32" pos:column="31">(<pos:position pos:line="32" pos:column="32"/></operator><name pos:line="32" pos:column="32">pt<pos:position pos:line="32" pos:column="34"/></name> <operator pos:line="32" pos:column="35">-<pos:position pos:line="32" pos:column="36"/></operator> <name pos:line="32" pos:column="37">buffer<pos:position pos:line="32" pos:column="43"/></name><operator pos:line="32" pos:column="43">)<pos:position pos:line="32" pos:column="44"/></operator></expr></argument>, <argument><expr><name pos:line="32" pos:column="46">var<pos:position pos:line="32" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="51">myvarval<pos:position pos:line="32" pos:column="59"/></name></expr></argument>)<pos:position pos:line="32" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="61"/></expr_stmt>
	<return pos:line="33" pos:column="9">return <expr><literal type="number" pos:line="33" pos:column="16">1<pos:position pos:line="33" pos:column="17"/></literal></expr>;<pos:position pos:line="33" pos:column="18"/></return>
      }<pos:position pos:line="34" pos:column="8"/></block></then></if>
      <return pos:line="35" pos:column="7">return <expr><literal type="number" pos:line="35" pos:column="14">0<pos:position pos:line="35" pos:column="15"/></literal></expr>;<pos:position pos:line="35" pos:column="16"/></return> <comment type="block" pos:line="35" pos:column="17">/* no such variable. */</comment>
    }<pos:position pos:line="36" pos:column="6"/></block></then>
    <elseif pos:line="37" pos:column="5">else <if pos:line="37" pos:column="10">if <condition pos:line="37" pos:column="13">(<expr><call><name pos:line="37" pos:column="14">var_to_string<pos:position pos:line="37" pos:column="27"/></name> <argument_list pos:line="37" pos:column="28">(<argument><expr><name pos:line="37" pos:column="29">idx<pos:position pos:line="37" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="34">val<pos:position pos:line="37" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="39">sizeof <argument_list pos:line="37" pos:column="46">(<argument><expr><name pos:line="37" pos:column="47">val<pos:position pos:line="37" pos:column="50"/></name></expr></argument>)<pos:position pos:line="37" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="53"/></condition><then pos:line="37" pos:column="53">
    <block pos:line="38" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">snprintf<pos:position pos:line="39" pos:column="15"/></name> <argument_list pos:line="39" pos:column="16">(<argument><expr><name pos:line="39" pos:column="17">pt<pos:position pos:line="39" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="21">len<pos:position pos:line="39" pos:column="24"/></name> <operator pos:line="39" pos:column="25">-<pos:position pos:line="39" pos:column="26"/></operator> <operator pos:line="39" pos:column="27">(<pos:position pos:line="39" pos:column="28"/></operator><name pos:line="39" pos:column="28">pt<pos:position pos:line="39" pos:column="30"/></name> <operator pos:line="39" pos:column="31">-<pos:position pos:line="39" pos:column="32"/></operator> <name pos:line="39" pos:column="33">buffer<pos:position pos:line="39" pos:column="39"/></name><operator pos:line="39" pos:column="39">)<pos:position pos:line="39" pos:column="40"/></operator></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="42">"%s=\"%s\""<pos:position pos:line="39" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="55">var<pos:position pos:line="39" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="60">val<pos:position pos:line="39" pos:column="63"/></name></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="65"/></expr_stmt>
      <return pos:line="40" pos:column="7">return <expr><literal type="number" pos:line="40" pos:column="14">1<pos:position pos:line="40" pos:column="15"/></literal></expr>;<pos:position pos:line="40" pos:column="16"/></return>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="42" pos:column="4"/></block></then></if>
  <return pos:line="43" pos:column="3">return <expr><literal type="number" pos:line="43" pos:column="10">0<pos:position pos:line="43" pos:column="11"/></literal></expr>;<pos:position pos:line="43" pos:column="12"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
