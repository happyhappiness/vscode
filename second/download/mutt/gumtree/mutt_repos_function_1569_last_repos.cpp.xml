<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1569_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">maildir_delayed_parsing<pos:position pos:line="1" pos:column="36"/></name> <parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">CONTEXT<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type> <name pos:line="1" pos:column="48">ctx<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="53">struct<pos:position pos:line="1" pos:column="59"/></name> <name pos:line="1" pos:column="60">maildir<pos:position pos:line="1" pos:column="67"/></name></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier><modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">md<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="2" pos:column="31">progress_t<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">progress<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{ 
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">maildir<pos:position pos:line="4" pos:column="17"/></name></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">p<pos:position pos:line="4" pos:column="20"/></name></decl>, <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="23">last<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><name pos:line="4" pos:column="30">NULL<pos:position pos:line="4" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">fn<pos:position pos:line="5" pos:column="10"/></name><index pos:line="5" pos:column="10">[<expr><name pos:line="5" pos:column="11">_POSIX_PATH_MAX<pos:position pos:line="5" pos:column="26"/></name></expr>]<pos:position pos:line="5" pos:column="27"/></index></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">count<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><name pos:line="7" pos:column="5">HAVE_DIRENT_D_INO<pos:position pos:line="7" pos:column="22"/></name></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">sort<pos:position pos:line="8" pos:column="11"/></name> <init pos:line="8" pos:column="12">= <expr><literal type="number" pos:line="8" pos:column="14">0<pos:position pos:line="8" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">if<pos:position pos:line="10" pos:column="4"/></cpp:directive> <expr><name pos:line="10" pos:column="5">USE_HCACHE<pos:position pos:line="10" pos:column="15"/></name></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">header_cache_t<pos:position pos:line="11" pos:column="17"/></name> <modifier pos:line="11" pos:column="18">*<pos:position pos:line="11" pos:column="19"/></modifier></type><name pos:line="11" pos:column="19">hc<pos:position pos:line="11" pos:column="21"/></name> <init pos:line="11" pos:column="22">= <expr><name pos:line="11" pos:column="24">NULL<pos:position pos:line="11" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">void<pos:position pos:line="12" pos:column="7"/></name> <modifier pos:line="12" pos:column="8">*<pos:position pos:line="12" pos:column="9"/></modifier></type><name pos:line="12" pos:column="9">data<pos:position pos:line="12" pos:column="13"/></name></decl>;<pos:position pos:line="12" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="13" pos:column="3">struct<pos:position pos:line="13" pos:column="9"/></name> <name pos:line="13" pos:column="10">timeval<pos:position pos:line="13" pos:column="17"/></name></name> <modifier pos:line="13" pos:column="18">*<pos:position pos:line="13" pos:column="19"/></modifier></type><name pos:line="13" pos:column="19">when<pos:position pos:line="13" pos:column="23"/></name> <init pos:line="13" pos:column="24">= <expr><name pos:line="13" pos:column="26">NULL<pos:position pos:line="13" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="14" pos:column="3">struct<pos:position pos:line="14" pos:column="9"/></name> <name pos:line="14" pos:column="10">stat<pos:position pos:line="14" pos:column="14"/></name></name></type> <name pos:line="14" pos:column="15">lastchanged<pos:position pos:line="14" pos:column="26"/></name></decl>;<pos:position pos:line="14" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">int<pos:position pos:line="15" pos:column="6"/></name></type> <name pos:line="15" pos:column="7">ret<pos:position pos:line="15" pos:column="10"/></name></decl>;<pos:position pos:line="15" pos:column="11"/></decl_stmt>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">if<pos:position pos:line="18" pos:column="4"/></cpp:directive> <expr><name pos:line="18" pos:column="5">HAVE_DIRENT_D_INO<pos:position pos:line="18" pos:column="22"/></name></expr></cpp:if>
<cpp:define pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">define<pos:position pos:line="19" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="19" pos:column="9">DO_SORT<pos:position pos:line="19" pos:column="16"/></name><parameter_list pos:line="19" pos:column="16">()<pos:position pos:line="19" pos:column="18"/></parameter_list></cpp:macro>	<cpp:value pos:line="19" pos:column="25">do { \
  if (!sort) \
  { \
    dprint (4, (debugfile, "maildir: need to sort %s by inode\n", ctx-&gt;path)); \
    p = maildir_sort (p, (size_t) -1, md_cmp_inode); \
    if (!last) \
      *md = p; \
    else \
      last-&gt;next = p; \
    sort = 1; \
    p = skip_duplicates (p, &amp;last); \
    snprintf (fn, sizeof (fn), "%s/%s", ctx-&gt;path, p-&gt;h-&gt;path); \
  } \
} while(0)<pos:position pos:line="32" pos:column="11"/></cpp:value></cpp:define>
<cpp:else pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">else<pos:position pos:line="33" pos:column="6"/></cpp:directive></cpp:else>
<cpp:define pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">define<pos:position pos:line="34" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="34" pos:column="9">DO_SORT<pos:position pos:line="34" pos:column="16"/></name><parameter_list pos:line="34" pos:column="16">()<pos:position pos:line="34" pos:column="18"/></parameter_list></cpp:macro></cpp:define>	<comment type="block" pos:line="34" pos:column="25">/* nothing */</comment>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">if<pos:position pos:line="37" pos:column="4"/></cpp:directive> <expr><name pos:line="37" pos:column="5">USE_HCACHE<pos:position pos:line="37" pos:column="15"/></name></expr></cpp:if>
  <expr_stmt><expr><name pos:line="38" pos:column="3">hc<pos:position pos:line="38" pos:column="5"/></name> <operator pos:line="38" pos:column="6">=<pos:position pos:line="38" pos:column="7"/></operator> <call><name pos:line="38" pos:column="8">mutt_hcache_open<pos:position pos:line="38" pos:column="24"/></name> <argument_list pos:line="38" pos:column="25">(<argument><expr><name pos:line="38" pos:column="26">HeaderCache<pos:position pos:line="38" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="39">ctx<pos:position pos:line="38" pos:column="42"/></name><operator pos:line="38" pos:column="42">-&gt;<pos:position pos:line="38" pos:column="47"/></operator><name pos:line="38" pos:column="44">path<pos:position pos:line="38" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="50">NULL<pos:position pos:line="38" pos:column="54"/></name></expr></argument>)<pos:position pos:line="38" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="56"/></expr_stmt>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif>

  <for pos:line="41" pos:column="3">for <control pos:line="41" pos:column="7">(<init><expr><name pos:line="41" pos:column="8">p<pos:position pos:line="41" pos:column="9"/></name> <operator pos:line="41" pos:column="10">=<pos:position pos:line="41" pos:column="11"/></operator> <operator pos:line="41" pos:column="12">*<pos:position pos:line="41" pos:column="13"/></operator><name pos:line="41" pos:column="13">md<pos:position pos:line="41" pos:column="15"/></name></expr><operator pos:line="41" pos:column="15">,<pos:position pos:line="41" pos:column="16"/></operator> <expr><name pos:line="41" pos:column="17">count<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">=<pos:position pos:line="41" pos:column="24"/></operator> <literal type="number" pos:line="41" pos:column="25">0<pos:position pos:line="41" pos:column="26"/></literal></expr>;<pos:position pos:line="41" pos:column="27"/></init> <condition><expr><name pos:line="41" pos:column="28">p<pos:position pos:line="41" pos:column="29"/></name></expr>;<pos:position pos:line="41" pos:column="30"/></condition> <incr><expr><name pos:line="41" pos:column="31">p<pos:position pos:line="41" pos:column="32"/></name> <operator pos:line="41" pos:column="33">=<pos:position pos:line="41" pos:column="34"/></operator> <name><name pos:line="41" pos:column="35">p<pos:position pos:line="41" pos:column="36"/></name><operator pos:line="41" pos:column="36">-&gt;<pos:position pos:line="41" pos:column="41"/></operator><name pos:line="41" pos:column="38">next<pos:position pos:line="41" pos:column="42"/></name></name></expr><operator pos:line="41" pos:column="42">,<pos:position pos:line="41" pos:column="43"/></operator> <expr><name pos:line="41" pos:column="44">count<pos:position pos:line="41" pos:column="49"/></name><operator pos:line="41" pos:column="49">++<pos:position pos:line="41" pos:column="51"/></operator></expr></incr>)<pos:position pos:line="41" pos:column="52"/></control>
   <block pos:line="42" pos:column="4">{
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><operator pos:line="43" pos:column="9">!<pos:position pos:line="43" pos:column="10"/></operator> <operator pos:line="43" pos:column="11">(<pos:position pos:line="43" pos:column="12"/></operator><name pos:line="43" pos:column="12">p<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">&amp;&amp;<pos:position pos:line="43" pos:column="24"/></operator> <name><name pos:line="43" pos:column="17">p<pos:position pos:line="43" pos:column="18"/></name><operator pos:line="43" pos:column="18">-&gt;<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="20">h<pos:position pos:line="43" pos:column="21"/></name></name> <operator pos:line="43" pos:column="22">&amp;&amp;<pos:position pos:line="43" pos:column="32"/></operator> <operator pos:line="43" pos:column="25">!<pos:position pos:line="43" pos:column="26"/></operator><name><name pos:line="43" pos:column="26">p<pos:position pos:line="43" pos:column="27"/></name><operator pos:line="43" pos:column="27">-&gt;<pos:position pos:line="43" pos:column="32"/></operator><name pos:line="43" pos:column="29">header_parsed<pos:position pos:line="43" pos:column="42"/></name></name><operator pos:line="43" pos:column="42">)<pos:position pos:line="43" pos:column="43"/></operator></expr>)<pos:position pos:line="43" pos:column="44"/></condition><then pos:line="43" pos:column="44">
     <block pos:line="44" pos:column="6">{
      <expr_stmt><expr><name pos:line="45" pos:column="7">last<pos:position pos:line="45" pos:column="11"/></name> <operator pos:line="45" pos:column="12">=<pos:position pos:line="45" pos:column="13"/></operator> <name pos:line="45" pos:column="14">p<pos:position pos:line="45" pos:column="15"/></name></expr>;<pos:position pos:line="45" pos:column="16"/></expr_stmt>
      <continue pos:line="46" pos:column="7">continue;<pos:position pos:line="46" pos:column="16"/></continue>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>

    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><operator pos:line="49" pos:column="9">!<pos:position pos:line="49" pos:column="10"/></operator><name><name pos:line="49" pos:column="10">ctx<pos:position pos:line="49" pos:column="13"/></name><operator pos:line="49" pos:column="13">-&gt;<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="15">quiet<pos:position pos:line="49" pos:column="20"/></name></name> <operator pos:line="49" pos:column="21">&amp;&amp;<pos:position pos:line="49" pos:column="31"/></operator> <name pos:line="49" pos:column="24">progress<pos:position pos:line="49" pos:column="32"/></name></expr>)<pos:position pos:line="49" pos:column="33"/></condition><then pos:line="49" pos:column="33">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="7">mutt_progress_update<pos:position pos:line="50" pos:column="27"/></name> <argument_list pos:line="50" pos:column="28">(<argument><expr><name pos:line="50" pos:column="29">progress<pos:position pos:line="50" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="39">count<pos:position pos:line="50" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="46">-<pos:position pos:line="50" pos:column="47"/></operator><literal type="number" pos:line="50" pos:column="47">1<pos:position pos:line="50" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="50"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="52" pos:column="5">DO_SORT<pos:position pos:line="52" pos:column="12"/></name><argument_list pos:line="52" pos:column="12">()<pos:position pos:line="52" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="15"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="54" pos:column="5">snprintf<pos:position pos:line="54" pos:column="13"/></name> <argument_list pos:line="54" pos:column="14">(<argument><expr><name pos:line="54" pos:column="15">fn<pos:position pos:line="54" pos:column="17"/></name></expr></argument>, <argument><expr><sizeof pos:line="54" pos:column="19">sizeof <argument_list pos:line="54" pos:column="26">(<argument><expr><name pos:line="54" pos:column="27">fn<pos:position pos:line="54" pos:column="29"/></name></expr></argument>)<pos:position pos:line="54" pos:column="30"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="32">"%s/%s"<pos:position pos:line="54" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="41">ctx<pos:position pos:line="54" pos:column="44"/></name><operator pos:line="54" pos:column="44">-&gt;<pos:position pos:line="54" pos:column="49"/></operator><name pos:line="54" pos:column="46">path<pos:position pos:line="54" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="52">p<pos:position pos:line="54" pos:column="53"/></name><operator pos:line="54" pos:column="53">-&gt;<pos:position pos:line="54" pos:column="58"/></operator><name pos:line="54" pos:column="55">h<pos:position pos:line="54" pos:column="56"/></name><operator pos:line="54" pos:column="56">-&gt;<pos:position pos:line="54" pos:column="61"/></operator><name pos:line="54" pos:column="58">path<pos:position pos:line="54" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="64"/></expr_stmt>

<cpp:if pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">if<pos:position pos:line="56" pos:column="4"/></cpp:directive> <expr><name pos:line="56" pos:column="5">USE_HCACHE<pos:position pos:line="56" pos:column="15"/></name></expr></cpp:if>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><call><name pos:line="57" pos:column="9">option<pos:position pos:line="57" pos:column="15"/></name><argument_list pos:line="57" pos:column="15">(<argument><expr><name pos:line="57" pos:column="16">OPTHCACHEVERIFY<pos:position pos:line="57" pos:column="31"/></name></expr></argument>)<pos:position pos:line="57" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="33"/></condition><then pos:line="57" pos:column="33">
    <block pos:line="58" pos:column="5">{
       <expr_stmt><expr><name pos:line="59" pos:column="8">ret<pos:position pos:line="59" pos:column="11"/></name> <operator pos:line="59" pos:column="12">=<pos:position pos:line="59" pos:column="13"/></operator> <call><name pos:line="59" pos:column="14">stat<pos:position pos:line="59" pos:column="18"/></name><argument_list pos:line="59" pos:column="18">(<argument><expr><name pos:line="59" pos:column="19">fn<pos:position pos:line="59" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="23">&amp;<pos:position pos:line="59" pos:column="28"/></operator><name pos:line="59" pos:column="24">lastchanged<pos:position pos:line="59" pos:column="35"/></name></expr></argument>)<pos:position pos:line="59" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="60" pos:column="6"/></block></then>
    <else pos:line="61" pos:column="5">else
    <block pos:line="62" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="63" pos:column="7">lastchanged<pos:position pos:line="63" pos:column="18"/></name><operator pos:line="63" pos:column="18">.<pos:position pos:line="63" pos:column="19"/></operator><name pos:line="63" pos:column="19">st_mtime<pos:position pos:line="63" pos:column="27"/></name></name> <operator pos:line="63" pos:column="28">=<pos:position pos:line="63" pos:column="29"/></operator> <literal type="number" pos:line="63" pos:column="30">0<pos:position pos:line="63" pos:column="31"/></literal></expr>;<pos:position pos:line="63" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name pos:line="64" pos:column="7">ret<pos:position pos:line="64" pos:column="10"/></name> <operator pos:line="64" pos:column="11">=<pos:position pos:line="64" pos:column="12"/></operator> <literal type="number" pos:line="64" pos:column="13">0<pos:position pos:line="64" pos:column="14"/></literal></expr>;<pos:position pos:line="64" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="65" pos:column="6"/></block></else></if>

    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><name><name pos:line="67" pos:column="9">ctx<pos:position pos:line="67" pos:column="12"/></name><operator pos:line="67" pos:column="12">-&gt;<pos:position pos:line="67" pos:column="17"/></operator><name pos:line="67" pos:column="14">magic<pos:position pos:line="67" pos:column="19"/></name></name> <operator pos:line="67" pos:column="20">==<pos:position pos:line="67" pos:column="22"/></operator> <name pos:line="67" pos:column="23">MUTT_MH<pos:position pos:line="67" pos:column="30"/></name></expr>)<pos:position pos:line="67" pos:column="31"/></condition><then pos:line="67" pos:column="31">
      <block type="pseudo"><expr_stmt><expr><name pos:line="68" pos:column="7">data<pos:position pos:line="68" pos:column="11"/></name> <operator pos:line="68" pos:column="12">=<pos:position pos:line="68" pos:column="13"/></operator> <call><name pos:line="68" pos:column="14">mutt_hcache_fetch<pos:position pos:line="68" pos:column="31"/></name> <argument_list pos:line="68" pos:column="32">(<argument><expr><name pos:line="68" pos:column="33">hc<pos:position pos:line="68" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="37">p<pos:position pos:line="68" pos:column="38"/></name><operator pos:line="68" pos:column="38">-&gt;<pos:position pos:line="68" pos:column="43"/></operator><name pos:line="68" pos:column="40">h<pos:position pos:line="68" pos:column="41"/></name><operator pos:line="68" pos:column="41">-&gt;<pos:position pos:line="68" pos:column="46"/></operator><name pos:line="68" pos:column="43">path<pos:position pos:line="68" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="49">strlen<pos:position pos:line="68" pos:column="55"/></name></expr></argument>)<pos:position pos:line="68" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="57"/></expr_stmt></block></then>
    <else pos:line="69" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="70" pos:column="7">data<pos:position pos:line="70" pos:column="11"/></name> <operator pos:line="70" pos:column="12">=<pos:position pos:line="70" pos:column="13"/></operator> <call><name pos:line="70" pos:column="14">mutt_hcache_fetch<pos:position pos:line="70" pos:column="31"/></name> <argument_list pos:line="70" pos:column="32">(<argument><expr><name pos:line="70" pos:column="33">hc<pos:position pos:line="70" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="37">p<pos:position pos:line="70" pos:column="38"/></name><operator pos:line="70" pos:column="38">-&gt;<pos:position pos:line="70" pos:column="43"/></operator><name pos:line="70" pos:column="40">h<pos:position pos:line="70" pos:column="41"/></name><operator pos:line="70" pos:column="41">-&gt;<pos:position pos:line="70" pos:column="46"/></operator><name pos:line="70" pos:column="43">path<pos:position pos:line="70" pos:column="47"/></name></name> <operator pos:line="70" pos:column="48">+<pos:position pos:line="70" pos:column="49"/></operator> <literal type="number" pos:line="70" pos:column="50">3<pos:position pos:line="70" pos:column="51"/></literal></expr></argument>, <argument><expr><operator pos:line="70" pos:column="53">&amp;<pos:position pos:line="70" pos:column="58"/></operator><name pos:line="70" pos:column="54">maildir_hcache_keylen<pos:position pos:line="70" pos:column="75"/></name></expr></argument>)<pos:position pos:line="70" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="77"/></expr_stmt></block></else></if>
    <expr_stmt><expr><name pos:line="71" pos:column="5">when<pos:position pos:line="71" pos:column="9"/></name> <operator pos:line="71" pos:column="10">=<pos:position pos:line="71" pos:column="11"/></operator> <operator pos:line="71" pos:column="12">(<pos:position pos:line="71" pos:column="13"/></operator>struct <name pos:line="71" pos:column="20">timeval<pos:position pos:line="71" pos:column="27"/></name> <operator pos:line="71" pos:column="28">*<pos:position pos:line="71" pos:column="29"/></operator><operator pos:line="71" pos:column="29">)<pos:position pos:line="71" pos:column="30"/></operator> <name pos:line="71" pos:column="31">data<pos:position pos:line="71" pos:column="35"/></name></expr>;<pos:position pos:line="71" pos:column="36"/></expr_stmt>

    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><name pos:line="73" pos:column="9">data<pos:position pos:line="73" pos:column="13"/></name> <operator pos:line="73" pos:column="14">!=<pos:position pos:line="73" pos:column="16"/></operator> <name pos:line="73" pos:column="17">NULL<pos:position pos:line="73" pos:column="21"/></name> <operator pos:line="73" pos:column="22">&amp;&amp;<pos:position pos:line="73" pos:column="32"/></operator> <operator pos:line="73" pos:column="25">!<pos:position pos:line="73" pos:column="26"/></operator><name pos:line="73" pos:column="26">ret<pos:position pos:line="73" pos:column="29"/></name> <operator pos:line="73" pos:column="30">&amp;&amp;<pos:position pos:line="73" pos:column="40"/></operator> <name><name pos:line="73" pos:column="33">lastchanged<pos:position pos:line="73" pos:column="44"/></name><operator pos:line="73" pos:column="44">.<pos:position pos:line="73" pos:column="45"/></operator><name pos:line="73" pos:column="45">st_mtime<pos:position pos:line="73" pos:column="53"/></name></name> <operator pos:line="73" pos:column="54">&lt;=<pos:position pos:line="73" pos:column="59"/></operator> <name><name pos:line="73" pos:column="57">when<pos:position pos:line="73" pos:column="61"/></name><operator pos:line="73" pos:column="61">-&gt;<pos:position pos:line="73" pos:column="66"/></operator><name pos:line="73" pos:column="63">tv_sec<pos:position pos:line="73" pos:column="69"/></name></name></expr>)<pos:position pos:line="73" pos:column="70"/></condition><then pos:line="73" pos:column="70">
    <block pos:line="74" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="75" pos:column="7">p<pos:position pos:line="75" pos:column="8"/></name><operator pos:line="75" pos:column="8">-&gt;<pos:position pos:line="75" pos:column="13"/></operator><name pos:line="75" pos:column="10">h<pos:position pos:line="75" pos:column="11"/></name></name> <operator pos:line="75" pos:column="12">=<pos:position pos:line="75" pos:column="13"/></operator> <call><name pos:line="75" pos:column="14">mutt_hcache_restore<pos:position pos:line="75" pos:column="33"/></name> <argument_list pos:line="75" pos:column="34">(<argument><expr><operator pos:line="75" pos:column="35">(<pos:position pos:line="75" pos:column="36"/></operator><name pos:line="75" pos:column="36">unsigned<pos:position pos:line="75" pos:column="44"/></name> <name pos:line="75" pos:column="45">char<pos:position pos:line="75" pos:column="49"/></name> <operator pos:line="75" pos:column="50">*<pos:position pos:line="75" pos:column="51"/></operator><operator pos:line="75" pos:column="51">)<pos:position pos:line="75" pos:column="52"/></operator><name pos:line="75" pos:column="52">data<pos:position pos:line="75" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="58">&amp;<pos:position pos:line="75" pos:column="63"/></operator><name><name pos:line="75" pos:column="59">p<pos:position pos:line="75" pos:column="60"/></name><operator pos:line="75" pos:column="60">-&gt;<pos:position pos:line="75" pos:column="65"/></operator><name pos:line="75" pos:column="62">h<pos:position pos:line="75" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="65"/></expr_stmt>
      <if pos:line="76" pos:column="7">if <condition pos:line="76" pos:column="10">(<expr><name><name pos:line="76" pos:column="11">ctx<pos:position pos:line="76" pos:column="14"/></name><operator pos:line="76" pos:column="14">-&gt;<pos:position pos:line="76" pos:column="19"/></operator><name pos:line="76" pos:column="16">magic<pos:position pos:line="76" pos:column="21"/></name></name> <operator pos:line="76" pos:column="22">==<pos:position pos:line="76" pos:column="24"/></operator> <name pos:line="76" pos:column="25">MUTT_MAILDIR<pos:position pos:line="76" pos:column="37"/></name></expr>)<pos:position pos:line="76" pos:column="38"/></condition><then pos:line="76" pos:column="38">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="9">maildir_parse_flags<pos:position pos:line="77" pos:column="28"/></name> <argument_list pos:line="77" pos:column="29">(<argument><expr><name><name pos:line="77" pos:column="30">p<pos:position pos:line="77" pos:column="31"/></name><operator pos:line="77" pos:column="31">-&gt;<pos:position pos:line="77" pos:column="36"/></operator><name pos:line="77" pos:column="33">h<pos:position pos:line="77" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="36">fn<pos:position pos:line="77" pos:column="38"/></name></expr></argument>)<pos:position pos:line="77" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="40"/></expr_stmt></block></then></if>
    }<pos:position pos:line="78" pos:column="6"/></block></then>
    <else pos:line="79" pos:column="5">else
    <block pos:line="80" pos:column="5">{
<cpp:endif pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">endif<pos:position pos:line="81" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="81" pos:column="8">/* USE_HCACHE */</comment>

    <if pos:line="83" pos:column="5">if <condition pos:line="83" pos:column="8">(<expr><call><name pos:line="83" pos:column="9">maildir_parse_message<pos:position pos:line="83" pos:column="30"/></name> <argument_list pos:line="83" pos:column="31">(<argument><expr><name><name pos:line="83" pos:column="32">ctx<pos:position pos:line="83" pos:column="35"/></name><operator pos:line="83" pos:column="35">-&gt;<pos:position pos:line="83" pos:column="40"/></operator><name pos:line="83" pos:column="37">magic<pos:position pos:line="83" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="44">fn<pos:position pos:line="83" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="48">p<pos:position pos:line="83" pos:column="49"/></name><operator pos:line="83" pos:column="49">-&gt;<pos:position pos:line="83" pos:column="54"/></operator><name pos:line="83" pos:column="51">h<pos:position pos:line="83" pos:column="52"/></name><operator pos:line="83" pos:column="52">-&gt;<pos:position pos:line="83" pos:column="57"/></operator><name pos:line="83" pos:column="54">old<pos:position pos:line="83" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="59">p<pos:position pos:line="83" pos:column="60"/></name><operator pos:line="83" pos:column="60">-&gt;<pos:position pos:line="83" pos:column="65"/></operator><name pos:line="83" pos:column="62">h<pos:position pos:line="83" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="65"/></condition><then pos:line="83" pos:column="65">
    <block pos:line="84" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="85" pos:column="7">p<pos:position pos:line="85" pos:column="8"/></name><operator pos:line="85" pos:column="8">-&gt;<pos:position pos:line="85" pos:column="13"/></operator><name pos:line="85" pos:column="10">header_parsed<pos:position pos:line="85" pos:column="23"/></name></name> <operator pos:line="85" pos:column="24">=<pos:position pos:line="85" pos:column="25"/></operator> <literal type="number" pos:line="85" pos:column="26">1<pos:position pos:line="85" pos:column="27"/></literal></expr>;<pos:position pos:line="85" pos:column="28"/></expr_stmt>
<cpp:if pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">if<pos:position pos:line="86" pos:column="4"/></cpp:directive> <expr><name pos:line="86" pos:column="5">USE_HCACHE<pos:position pos:line="86" pos:column="15"/></name></expr></cpp:if>
      <if pos:line="87" pos:column="7">if <condition pos:line="87" pos:column="10">(<expr><name><name pos:line="87" pos:column="11">ctx<pos:position pos:line="87" pos:column="14"/></name><operator pos:line="87" pos:column="14">-&gt;<pos:position pos:line="87" pos:column="19"/></operator><name pos:line="87" pos:column="16">magic<pos:position pos:line="87" pos:column="21"/></name></name> <operator pos:line="87" pos:column="22">==<pos:position pos:line="87" pos:column="24"/></operator> <name pos:line="87" pos:column="25">MUTT_MH<pos:position pos:line="87" pos:column="32"/></name></expr>)<pos:position pos:line="87" pos:column="33"/></condition><then pos:line="87" pos:column="33">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="9">mutt_hcache_store<pos:position pos:line="88" pos:column="26"/></name> <argument_list pos:line="88" pos:column="27">(<argument><expr><name pos:line="88" pos:column="28">hc<pos:position pos:line="88" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="32">p<pos:position pos:line="88" pos:column="33"/></name><operator pos:line="88" pos:column="33">-&gt;<pos:position pos:line="88" pos:column="38"/></operator><name pos:line="88" pos:column="35">h<pos:position pos:line="88" pos:column="36"/></name><operator pos:line="88" pos:column="36">-&gt;<pos:position pos:line="88" pos:column="41"/></operator><name pos:line="88" pos:column="38">path<pos:position pos:line="88" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="44">p<pos:position pos:line="88" pos:column="45"/></name><operator pos:line="88" pos:column="45">-&gt;<pos:position pos:line="88" pos:column="50"/></operator><name pos:line="88" pos:column="47">h<pos:position pos:line="88" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="50">0<pos:position pos:line="88" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="88" pos:column="53">strlen<pos:position pos:line="88" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="61">MUTT_GENERATE_UIDVALIDITY<pos:position pos:line="88" pos:column="86"/></name></expr></argument>)<pos:position pos:line="88" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="88"/></expr_stmt></block></then>
      <else pos:line="89" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="90" pos:column="9">mutt_hcache_store<pos:position pos:line="90" pos:column="26"/></name> <argument_list pos:line="90" pos:column="27">(<argument><expr><name pos:line="90" pos:column="28">hc<pos:position pos:line="90" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="32">p<pos:position pos:line="90" pos:column="33"/></name><operator pos:line="90" pos:column="33">-&gt;<pos:position pos:line="90" pos:column="38"/></operator><name pos:line="90" pos:column="35">h<pos:position pos:line="90" pos:column="36"/></name><operator pos:line="90" pos:column="36">-&gt;<pos:position pos:line="90" pos:column="41"/></operator><name pos:line="90" pos:column="38">path<pos:position pos:line="90" pos:column="42"/></name></name> <operator pos:line="90" pos:column="43">+<pos:position pos:line="90" pos:column="44"/></operator> <literal type="number" pos:line="90" pos:column="45">3<pos:position pos:line="90" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="48">p<pos:position pos:line="90" pos:column="49"/></name><operator pos:line="90" pos:column="49">-&gt;<pos:position pos:line="90" pos:column="54"/></operator><name pos:line="90" pos:column="51">h<pos:position pos:line="90" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="54">0<pos:position pos:line="90" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="90" pos:column="57">&amp;<pos:position pos:line="90" pos:column="62"/></operator><name pos:line="90" pos:column="58">maildir_hcache_keylen<pos:position pos:line="90" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="81">MUTT_GENERATE_UIDVALIDITY<pos:position pos:line="90" pos:column="106"/></name></expr></argument>)<pos:position pos:line="90" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="108"/></expr_stmt></block></else></if>
<cpp:endif pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">endif<pos:position pos:line="91" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="92" pos:column="6"/></block></then> <else pos:line="92" pos:column="7">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="93" pos:column="7">mutt_free_header<pos:position pos:line="93" pos:column="23"/></name> <argument_list pos:line="93" pos:column="24">(<argument><expr><operator pos:line="93" pos:column="25">&amp;<pos:position pos:line="93" pos:column="30"/></operator><name><name pos:line="93" pos:column="26">p<pos:position pos:line="93" pos:column="27"/></name><operator pos:line="93" pos:column="27">-&gt;<pos:position pos:line="93" pos:column="32"/></operator><name pos:line="93" pos:column="29">h<pos:position pos:line="93" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="32"/></expr_stmt></block></else></if>
<cpp:if pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">if<pos:position pos:line="94" pos:column="4"/></cpp:directive> <expr><name pos:line="94" pos:column="5">USE_HCACHE<pos:position pos:line="94" pos:column="15"/></name></expr></cpp:if>
    }<pos:position pos:line="95" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="96" pos:column="5">mutt_hcache_free<pos:position pos:line="96" pos:column="21"/></name> <argument_list pos:line="96" pos:column="22">(<argument><expr><operator pos:line="96" pos:column="23">&amp;<pos:position pos:line="96" pos:column="28"/></operator><name pos:line="96" pos:column="24">data<pos:position pos:line="96" pos:column="28"/></name></expr></argument>)<pos:position pos:line="96" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="97" pos:column="1">#<cpp:directive pos:line="97" pos:column="2">endif<pos:position pos:line="97" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="98" pos:column="5">last<pos:position pos:line="98" pos:column="9"/></name> <operator pos:line="98" pos:column="10">=<pos:position pos:line="98" pos:column="11"/></operator> <name pos:line="98" pos:column="12">p<pos:position pos:line="98" pos:column="13"/></name></expr>;<pos:position pos:line="98" pos:column="14"/></expr_stmt>
   }<pos:position pos:line="99" pos:column="5"/></block></for>
<cpp:if pos:line="100" pos:column="1">#<cpp:directive pos:line="100" pos:column="2">if<pos:position pos:line="100" pos:column="4"/></cpp:directive> <expr><name pos:line="100" pos:column="5">USE_HCACHE<pos:position pos:line="100" pos:column="15"/></name></expr></cpp:if>
  <expr_stmt><expr><call><name pos:line="101" pos:column="3">mutt_hcache_close<pos:position pos:line="101" pos:column="20"/></name> <argument_list pos:line="101" pos:column="21">(<argument><expr><name pos:line="101" pos:column="22">hc<pos:position pos:line="101" pos:column="24"/></name></expr></argument>)<pos:position pos:line="101" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">endif<pos:position pos:line="102" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:undef pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">undef<pos:position pos:line="104" pos:column="7"/></cpp:directive> <name pos:line="104" pos:column="8">DO_SORT<pos:position pos:line="104" pos:column="15"/></name></cpp:undef>

  <expr_stmt><expr><call><name pos:line="106" pos:column="3">mh_sort_natural<pos:position pos:line="106" pos:column="18"/></name> <argument_list pos:line="106" pos:column="19">(<argument><expr><name pos:line="106" pos:column="20">ctx<pos:position pos:line="106" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="25">md<pos:position pos:line="106" pos:column="27"/></name></expr></argument>)<pos:position pos:line="106" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="29"/></expr_stmt>
}<pos:position pos:line="107" pos:column="2"/></block></function></unit>
