<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_58_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">print_macro<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">FILE<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">f<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">int<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">maxwidth<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier><modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">macro<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">n<pos:position pos:line="3" pos:column="8"/></name> <init pos:line="3" pos:column="9">= <expr><name pos:line="3" pos:column="11">maxwidth<pos:position pos:line="3" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">wchar_t<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">wc<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">w<pos:position pos:line="5" pos:column="8"/></name></decl>;<pos:position pos:line="5" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">k<pos:position pos:line="6" pos:column="11"/></name></decl>;<pos:position pos:line="6" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">len<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><call><name pos:line="7" pos:column="16">mutt_strlen<pos:position pos:line="7" pos:column="27"/></name> <argument_list pos:line="7" pos:column="28">(<argument><expr><operator pos:line="7" pos:column="29">*<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="30">macro<pos:position pos:line="7" pos:column="35"/></name></expr></argument>)<pos:position pos:line="7" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">mbstate_t<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">mbstate1<pos:position pos:line="8" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="23">mbstate2<pos:position pos:line="8" pos:column="31"/></name></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">memset<pos:position pos:line="10" pos:column="9"/></name> <argument_list pos:line="10" pos:column="10">(<argument><expr><operator pos:line="10" pos:column="11">&amp;<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="12">mbstate1<pos:position pos:line="10" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="22">0<pos:position pos:line="10" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="25">sizeof <argument_list pos:line="10" pos:column="32">(<argument><expr><name pos:line="10" pos:column="33">mbstate1<pos:position pos:line="10" pos:column="41"/></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">memset<pos:position pos:line="11" pos:column="9"/></name> <argument_list pos:line="11" pos:column="10">(<argument><expr><operator pos:line="11" pos:column="11">&amp;<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="12">mbstate2<pos:position pos:line="11" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="22">0<pos:position pos:line="11" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="25">sizeof <argument_list pos:line="11" pos:column="32">(<argument><expr><name pos:line="11" pos:column="33">mbstate2<pos:position pos:line="11" pos:column="41"/></name></expr></argument>)<pos:position pos:line="11" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt>
  <for pos:line="12" pos:column="3">for <control pos:line="12" pos:column="7">(<init pos:line="12" pos:column="8">;<pos:position pos:line="12" pos:column="9"/></init> <condition><expr><name pos:line="12" pos:column="10">len<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">&amp;&amp;<pos:position pos:line="12" pos:column="24"/></operator> <operator pos:line="12" pos:column="17">(<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="18">k<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <call><name pos:line="12" pos:column="22">mbrtowc<pos:position pos:line="12" pos:column="29"/></name> <argument_list pos:line="12" pos:column="30">(<argument><expr><operator pos:line="12" pos:column="31">&amp;<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="32">wc<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="36">*<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="37">macro<pos:position pos:line="12" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="44">len<pos:position pos:line="12" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="49">&amp;<pos:position pos:line="12" pos:column="54"/></operator><name pos:line="12" pos:column="50">mbstate1<pos:position pos:line="12" pos:column="58"/></name></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></call><operator pos:line="12" pos:column="59">)<pos:position pos:line="12" pos:column="60"/></operator></expr>;<pos:position pos:line="12" pos:column="61"/></condition> <incr><expr><operator pos:line="12" pos:column="62">*<pos:position pos:line="12" pos:column="63"/></operator><name pos:line="12" pos:column="63">macro<pos:position pos:line="12" pos:column="68"/></name> <operator pos:line="12" pos:column="69">+=<pos:position pos:line="12" pos:column="71"/></operator> <name pos:line="12" pos:column="72">k<pos:position pos:line="12" pos:column="73"/></name></expr><operator pos:line="12" pos:column="73">,<pos:position pos:line="12" pos:column="74"/></operator> <expr><name pos:line="12" pos:column="75">len<pos:position pos:line="12" pos:column="78"/></name> <operator pos:line="12" pos:column="79">-=<pos:position pos:line="12" pos:column="81"/></operator> <name pos:line="12" pos:column="82">k<pos:position pos:line="12" pos:column="83"/></name></expr></incr>)<pos:position pos:line="12" pos:column="84"/></control>
  <block pos:line="13" pos:column="3">{
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">k<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">==<pos:position pos:line="14" pos:column="13"/></operator> <call pos:line="14" pos:column="14">(<name pos:line="14" pos:column="15">size_t<pos:position pos:line="14" pos:column="21"/></name>)<argument_list pos:line="14" pos:column="22">(<argument><expr><operator pos:line="14" pos:column="23">-<pos:position pos:line="14" pos:column="24"/></operator><literal type="number" pos:line="14" pos:column="24">1<pos:position pos:line="14" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="26"/></argument_list></call> <operator pos:line="14" pos:column="27">||<pos:position pos:line="14" pos:column="29"/></operator> <name pos:line="14" pos:column="30">k<pos:position pos:line="14" pos:column="31"/></name> <operator pos:line="14" pos:column="32">==<pos:position pos:line="14" pos:column="34"/></operator> <call pos:line="14" pos:column="35">(<name pos:line="14" pos:column="36">size_t<pos:position pos:line="14" pos:column="42"/></name>)<argument_list pos:line="14" pos:column="43">(<argument><expr><operator pos:line="14" pos:column="44">-<pos:position pos:line="14" pos:column="45"/></operator><literal type="number" pos:line="14" pos:column="45">2<pos:position pos:line="14" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="48"/></condition><then pos:line="14" pos:column="48">
    <block pos:line="15" pos:column="5">{
      <if pos:line="16" pos:column="7">if <condition pos:line="16" pos:column="10">(<expr><name pos:line="16" pos:column="11">k<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">==<pos:position pos:line="16" pos:column="15"/></operator> <call pos:line="16" pos:column="16">(<name pos:line="16" pos:column="17">size_t<pos:position pos:line="16" pos:column="23"/></name>)<argument_list pos:line="16" pos:column="24">(<argument><expr><operator pos:line="16" pos:column="25">-<pos:position pos:line="16" pos:column="26"/></operator><literal type="number" pos:line="16" pos:column="26">1<pos:position pos:line="16" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="29"/></condition><then pos:line="16" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="9">memset<pos:position pos:line="17" pos:column="15"/></name> <argument_list pos:line="17" pos:column="16">(<argument><expr><operator pos:line="17" pos:column="17">&amp;<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="18">mbstate1<pos:position pos:line="17" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="28">0<pos:position pos:line="17" pos:column="29"/></literal></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="31">sizeof <argument_list pos:line="17" pos:column="38">(<argument><expr><name pos:line="17" pos:column="39">mbstate1<pos:position pos:line="17" pos:column="47"/></name></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name pos:line="18" pos:column="7">k<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <ternary><condition><expr><operator pos:line="18" pos:column="11">(<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">k<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">==<pos:position pos:line="18" pos:column="16"/></operator> <call pos:line="18" pos:column="17">(<name pos:line="18" pos:column="18">size_t<pos:position pos:line="18" pos:column="24"/></name>)<argument_list pos:line="18" pos:column="25">(<argument><expr><operator pos:line="18" pos:column="26">-<pos:position pos:line="18" pos:column="27"/></operator><literal type="number" pos:line="18" pos:column="27">1<pos:position pos:line="18" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="29"/></argument_list></call><operator pos:line="18" pos:column="29">)<pos:position pos:line="18" pos:column="30"/></operator></expr> ?<pos:position pos:line="18" pos:column="32"/></condition><then pos:line="18" pos:column="32"> <expr><literal type="number" pos:line="18" pos:column="33">1<pos:position pos:line="18" pos:column="34"/></literal></expr> <pos:position pos:line="18" pos:column="35"/></then><else pos:line="18" pos:column="35">: <expr><name pos:line="18" pos:column="37">len<pos:position pos:line="18" pos:column="40"/></name></expr></else></ternary></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><name pos:line="19" pos:column="7">wc<pos:position pos:line="19" pos:column="9"/></name> <operator pos:line="19" pos:column="10">=<pos:position pos:line="19" pos:column="11"/></operator> <call><name pos:line="19" pos:column="12">replacement_char<pos:position pos:line="19" pos:column="28"/></name> <argument_list pos:line="19" pos:column="29">()<pos:position pos:line="19" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="21" pos:column="5">/* glibc-2.1.3's wcwidth() returns 1 for unprintable chars! */</comment>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><call><name pos:line="22" pos:column="9">IsWPrint<pos:position pos:line="22" pos:column="17"/></name> <argument_list pos:line="22" pos:column="18">(<argument><expr><name pos:line="22" pos:column="19">wc<pos:position pos:line="22" pos:column="21"/></name></expr></argument>)<pos:position pos:line="22" pos:column="22"/></argument_list></call> <operator pos:line="22" pos:column="23">&amp;&amp;<pos:position pos:line="22" pos:column="33"/></operator> <operator pos:line="22" pos:column="26">(<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="27">w<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">=<pos:position pos:line="22" pos:column="30"/></operator> <call><name pos:line="22" pos:column="31">wcwidth<pos:position pos:line="22" pos:column="38"/></name> <argument_list pos:line="22" pos:column="39">(<argument><expr><name pos:line="22" pos:column="40">wc<pos:position pos:line="22" pos:column="42"/></name></expr></argument>)<pos:position pos:line="22" pos:column="43"/></argument_list></call><operator pos:line="22" pos:column="43">)<pos:position pos:line="22" pos:column="44"/></operator> <operator pos:line="22" pos:column="45">&gt;=<pos:position pos:line="22" pos:column="50"/></operator> <literal type="number" pos:line="22" pos:column="48">0<pos:position pos:line="22" pos:column="49"/></literal></expr>)<pos:position pos:line="22" pos:column="50"/></condition><then pos:line="22" pos:column="50">
    <block pos:line="23" pos:column="5">{
      <if pos:line="24" pos:column="7">if <condition pos:line="24" pos:column="10">(<expr><name pos:line="24" pos:column="11">w<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">&gt;<pos:position pos:line="24" pos:column="17"/></operator> <name pos:line="24" pos:column="15">n<pos:position pos:line="24" pos:column="16"/></name></expr>)<pos:position pos:line="24" pos:column="17"/></condition><then pos:line="24" pos:column="17">
	<block type="pseudo"><break pos:line="25" pos:column="9">break;<pos:position pos:line="25" pos:column="15"/></break></block></then></if>
      <expr_stmt><expr><name pos:line="26" pos:column="7">n<pos:position pos:line="26" pos:column="8"/></name> <operator pos:line="26" pos:column="9">-=<pos:position pos:line="26" pos:column="11"/></operator> <name pos:line="26" pos:column="12">w<pos:position pos:line="26" pos:column="13"/></name></expr>;<pos:position pos:line="26" pos:column="14"/></expr_stmt>
      <block pos:line="27" pos:column="7">{
	<decl_stmt><decl><type><name pos:line="28" pos:column="9">char<pos:position pos:line="28" pos:column="13"/></name></type> <name><name pos:line="28" pos:column="14">buf<pos:position pos:line="28" pos:column="17"/></name><index pos:line="28" pos:column="17">[<expr><name pos:line="28" pos:column="18">MB_LEN_MAX<pos:position pos:line="28" pos:column="28"/></name><operator pos:line="28" pos:column="28">*<pos:position pos:line="28" pos:column="29"/></operator><literal type="number" pos:line="28" pos:column="29">2<pos:position pos:line="28" pos:column="30"/></literal></expr>]<pos:position pos:line="28" pos:column="31"/></index></name></decl>;<pos:position pos:line="28" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="29" pos:column="9">size_t<pos:position pos:line="29" pos:column="15"/></name></type> <name pos:line="29" pos:column="16">n1<pos:position pos:line="29" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="29" pos:column="20">n2<pos:position pos:line="29" pos:column="22"/></name></decl>;<pos:position pos:line="29" pos:column="23"/></decl_stmt>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><operator pos:line="30" pos:column="13">(<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">n1<pos:position pos:line="30" pos:column="16"/></name> <operator pos:line="30" pos:column="17">=<pos:position pos:line="30" pos:column="18"/></operator> <call><name pos:line="30" pos:column="19">wcrtomb<pos:position pos:line="30" pos:column="26"/></name> <argument_list pos:line="30" pos:column="27">(<argument><expr><name pos:line="30" pos:column="28">buf<pos:position pos:line="30" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="33">wc<pos:position pos:line="30" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="37">&amp;<pos:position pos:line="30" pos:column="42"/></operator><name pos:line="30" pos:column="38">mbstate2<pos:position pos:line="30" pos:column="46"/></name></expr></argument>)<pos:position pos:line="30" pos:column="47"/></argument_list></call><operator pos:line="30" pos:column="47">)<pos:position pos:line="30" pos:column="48"/></operator> <operator pos:line="30" pos:column="49">!=<pos:position pos:line="30" pos:column="51"/></operator> <call pos:line="30" pos:column="52">(<name pos:line="30" pos:column="53">size_t<pos:position pos:line="30" pos:column="59"/></name>)<argument_list pos:line="30" pos:column="60">(<argument><expr><operator pos:line="30" pos:column="61">-<pos:position pos:line="30" pos:column="62"/></operator><literal type="number" pos:line="30" pos:column="62">1<pos:position pos:line="30" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="64"/></argument_list></call> <operator pos:line="30" pos:column="65">&amp;&amp;<pos:position pos:line="30" pos:column="75"/></operator>
	    <operator pos:line="31" pos:column="13">(<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">n2<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <call><name pos:line="31" pos:column="19">wcrtomb<pos:position pos:line="31" pos:column="26"/></name> <argument_list pos:line="31" pos:column="27">(<argument><expr><name pos:line="31" pos:column="28">buf<pos:position pos:line="31" pos:column="31"/></name> <operator pos:line="31" pos:column="32">+<pos:position pos:line="31" pos:column="33"/></operator> <name pos:line="31" pos:column="34">n1<pos:position pos:line="31" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="38">0<pos:position pos:line="31" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="31" pos:column="41">&amp;<pos:position pos:line="31" pos:column="46"/></operator><name pos:line="31" pos:column="42">mbstate2<pos:position pos:line="31" pos:column="50"/></name></expr></argument>)<pos:position pos:line="31" pos:column="51"/></argument_list></call><operator pos:line="31" pos:column="51">)<pos:position pos:line="31" pos:column="52"/></operator> <operator pos:line="31" pos:column="53">!=<pos:position pos:line="31" pos:column="55"/></operator> <call pos:line="31" pos:column="56">(<name pos:line="31" pos:column="57">size_t<pos:position pos:line="31" pos:column="63"/></name>)<argument_list pos:line="31" pos:column="64">(<argument><expr><operator pos:line="31" pos:column="65">-<pos:position pos:line="31" pos:column="66"/></operator><literal type="number" pos:line="31" pos:column="66">1<pos:position pos:line="31" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="69"/></condition><then pos:line="31" pos:column="69">
	  <block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="11">fputs<pos:position pos:line="32" pos:column="16"/></name> <argument_list pos:line="32" pos:column="17">(<argument><expr><name pos:line="32" pos:column="18">buf<pos:position pos:line="32" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="23">f<pos:position pos:line="32" pos:column="24"/></name></expr></argument>)<pos:position pos:line="32" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="26"/></expr_stmt></block></then></if>
      }<pos:position pos:line="33" pos:column="8"/></block>
    }<pos:position pos:line="34" pos:column="6"/></block></then>
    <elseif pos:line="35" pos:column="5">else <if pos:line="35" pos:column="10">if <condition pos:line="35" pos:column="13">(<expr><name pos:line="35" pos:column="14">wc<pos:position pos:line="35" pos:column="16"/></name> <operator pos:line="35" pos:column="17">&lt;<pos:position pos:line="35" pos:column="21"/></operator> <literal type="number" pos:line="35" pos:column="19">0x20<pos:position pos:line="35" pos:column="23"/></literal> <operator pos:line="35" pos:column="24">||<pos:position pos:line="35" pos:column="26"/></operator> <name pos:line="35" pos:column="27">wc<pos:position pos:line="35" pos:column="29"/></name> <operator pos:line="35" pos:column="30">==<pos:position pos:line="35" pos:column="32"/></operator> <literal type="number" pos:line="35" pos:column="33">0x7f<pos:position pos:line="35" pos:column="37"/></literal></expr>)<pos:position pos:line="35" pos:column="38"/></condition><then pos:line="35" pos:column="38">
    <block pos:line="36" pos:column="5">{
      <if pos:line="37" pos:column="7">if <condition pos:line="37" pos:column="10">(<expr><literal type="number" pos:line="37" pos:column="11">2<pos:position pos:line="37" pos:column="12"/></literal> <operator pos:line="37" pos:column="13">&gt;<pos:position pos:line="37" pos:column="17"/></operator> <name pos:line="37" pos:column="15">n<pos:position pos:line="37" pos:column="16"/></name></expr>)<pos:position pos:line="37" pos:column="17"/></condition><then pos:line="37" pos:column="17">
	<block type="pseudo"><break pos:line="38" pos:column="9">break;<pos:position pos:line="38" pos:column="15"/></break></block></then></if>
      <expr_stmt><expr><name pos:line="39" pos:column="7">n<pos:position pos:line="39" pos:column="8"/></name> <operator pos:line="39" pos:column="9">-=<pos:position pos:line="39" pos:column="11"/></operator> <literal type="number" pos:line="39" pos:column="12">2<pos:position pos:line="39" pos:column="13"/></literal></expr>;<pos:position pos:line="39" pos:column="14"/></expr_stmt>
      <if pos:line="40" pos:column="7">if <condition pos:line="40" pos:column="10">(<expr><name pos:line="40" pos:column="11">wc<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">==<pos:position pos:line="40" pos:column="16"/></operator> <literal type="char" pos:line="40" pos:column="17">'\033'<pos:position pos:line="40" pos:column="23"/></literal></expr>)<pos:position pos:line="40" pos:column="24"/></condition><then pos:line="40" pos:column="24">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="9">fprintf<pos:position pos:line="41" pos:column="16"/></name> <argument_list pos:line="41" pos:column="17">(<argument><expr><name pos:line="41" pos:column="18">f<pos:position pos:line="41" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="21">"\\e"<pos:position pos:line="41" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt></block></then>
      <elseif pos:line="42" pos:column="7">else <if pos:line="42" pos:column="12">if <condition pos:line="42" pos:column="15">(<expr><name pos:line="42" pos:column="16">wc<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">==<pos:position pos:line="42" pos:column="21"/></operator> <literal type="char" pos:line="42" pos:column="22">'\n'<pos:position pos:line="42" pos:column="26"/></literal></expr>)<pos:position pos:line="42" pos:column="27"/></condition><then pos:line="42" pos:column="27">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="9">fprintf<pos:position pos:line="43" pos:column="16"/></name> <argument_list pos:line="43" pos:column="17">(<argument><expr><name pos:line="43" pos:column="18">f<pos:position pos:line="43" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="21">"\\n"<pos:position pos:line="43" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="28"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="44" pos:column="7">else <if pos:line="44" pos:column="12">if <condition pos:line="44" pos:column="15">(<expr><name pos:line="44" pos:column="16">wc<pos:position pos:line="44" pos:column="18"/></name> <operator pos:line="44" pos:column="19">==<pos:position pos:line="44" pos:column="21"/></operator> <literal type="char" pos:line="44" pos:column="22">'\r'<pos:position pos:line="44" pos:column="26"/></literal></expr>)<pos:position pos:line="44" pos:column="27"/></condition><then pos:line="44" pos:column="27">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="9">fprintf<pos:position pos:line="45" pos:column="16"/></name> <argument_list pos:line="45" pos:column="17">(<argument><expr><name pos:line="45" pos:column="18">f<pos:position pos:line="45" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="21">"\\r"<pos:position pos:line="45" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="28"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="46" pos:column="7">else <if pos:line="46" pos:column="12">if <condition pos:line="46" pos:column="15">(<expr><name pos:line="46" pos:column="16">wc<pos:position pos:line="46" pos:column="18"/></name> <operator pos:line="46" pos:column="19">==<pos:position pos:line="46" pos:column="21"/></operator> <literal type="char" pos:line="46" pos:column="22">'\t'<pos:position pos:line="46" pos:column="26"/></literal></expr>)<pos:position pos:line="46" pos:column="27"/></condition><then pos:line="46" pos:column="27">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="9">fprintf<pos:position pos:line="47" pos:column="16"/></name> <argument_list pos:line="47" pos:column="17">(<argument><expr><name pos:line="47" pos:column="18">f<pos:position pos:line="47" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="21">"\\t"<pos:position pos:line="47" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="28"/></expr_stmt></block></then></if></elseif>
      <else pos:line="48" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="9">fprintf<pos:position pos:line="49" pos:column="16"/></name> <argument_list pos:line="49" pos:column="17">(<argument><expr><name pos:line="49" pos:column="18">f<pos:position pos:line="49" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="21">"^%c"<pos:position pos:line="49" pos:column="26"/></literal></expr></argument>, <argument><expr><call pos:line="49" pos:column="28">(<name pos:line="49" pos:column="29">char<pos:position pos:line="49" pos:column="33"/></name>)<argument_list pos:line="49" pos:column="34">(<argument><expr><operator pos:line="49" pos:column="35">(<pos:position pos:line="49" pos:column="36"/></operator><name pos:line="49" pos:column="36">wc<pos:position pos:line="49" pos:column="38"/></name> <operator pos:line="49" pos:column="39">+<pos:position pos:line="49" pos:column="40"/></operator> <literal type="char" pos:line="49" pos:column="41">'@'<pos:position pos:line="49" pos:column="44"/></literal><operator pos:line="49" pos:column="44">)<pos:position pos:line="49" pos:column="45"/></operator> <operator pos:line="49" pos:column="46">&amp;<pos:position pos:line="49" pos:column="51"/></operator> <literal type="number" pos:line="49" pos:column="48">0x7f<pos:position pos:line="49" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="55"/></expr_stmt></block></else></if>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if></elseif>
    <else pos:line="51" pos:column="5">else
    <block pos:line="52" pos:column="5">{
      <if pos:line="53" pos:column="7">if <condition pos:line="53" pos:column="10">(<expr><literal type="number" pos:line="53" pos:column="11">1<pos:position pos:line="53" pos:column="12"/></literal> <operator pos:line="53" pos:column="13">&gt;<pos:position pos:line="53" pos:column="17"/></operator> <name pos:line="53" pos:column="15">n<pos:position pos:line="53" pos:column="16"/></name></expr>)<pos:position pos:line="53" pos:column="17"/></condition><then pos:line="53" pos:column="17">
	<block type="pseudo"><break pos:line="54" pos:column="9">break;<pos:position pos:line="54" pos:column="15"/></break></block></then></if>
      <expr_stmt><expr><name pos:line="55" pos:column="7">n<pos:position pos:line="55" pos:column="8"/></name> <operator pos:line="55" pos:column="9">-=<pos:position pos:line="55" pos:column="11"/></operator> <literal type="number" pos:line="55" pos:column="12">1<pos:position pos:line="55" pos:column="13"/></literal></expr>;<pos:position pos:line="55" pos:column="14"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">fprintf<pos:position pos:line="56" pos:column="14"/></name> <argument_list pos:line="56" pos:column="15">(<argument><expr><name pos:line="56" pos:column="16">f<pos:position pos:line="56" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="19">"?"<pos:position pos:line="56" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block></else></if>
  }<pos:position pos:line="58" pos:column="4"/></block></for>
  <return pos:line="59" pos:column="3">return <expr><operator pos:line="59" pos:column="10">(<pos:position pos:line="59" pos:column="11"/></operator><name pos:line="59" pos:column="11">maxwidth<pos:position pos:line="59" pos:column="19"/></name> <operator pos:line="59" pos:column="20">-<pos:position pos:line="59" pos:column="21"/></operator> <name pos:line="59" pos:column="22">n<pos:position pos:line="59" pos:column="23"/></name><operator pos:line="59" pos:column="23">)<pos:position pos:line="59" pos:column="24"/></operator></expr>;<pos:position pos:line="59" pos:column="25"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
