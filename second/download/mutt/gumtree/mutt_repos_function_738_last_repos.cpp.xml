<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_738_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">BODY<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">decrypt_part<pos:position pos:line="1" pos:column="26"/></name> <parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">BODY<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">a<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">STATE<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">s<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">FILE<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">fpout<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">int<pos:position pos:line="1" pos:column="63"/></name></type> <name pos:line="1" pos:column="64">is_smime<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">r_is_signed<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">stat<pos:position pos:line="4" pos:column="14"/></name></name></type> <name pos:line="4" pos:column="15">info<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">BODY<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">tattach<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">err<pos:position pos:line="6" pos:column="10"/></name> <init pos:line="6" pos:column="11">= <expr><literal type="number" pos:line="6" pos:column="13">0<pos:position pos:line="6" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">gpgme_ctx_t<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">ctx<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">gpgme_data_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">ciphertext<pos:position pos:line="8" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="28">plaintext<pos:position pos:line="8" pos:column="37"/></name></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">maybe_signed<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><literal type="number" pos:line="9" pos:column="22">0<pos:position pos:line="9" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">anywarn<pos:position pos:line="10" pos:column="14"/></name> <init pos:line="10" pos:column="15">= <expr><literal type="number" pos:line="10" pos:column="17">0<pos:position pos:line="10" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">sig_stat<pos:position pos:line="11" pos:column="15"/></name> <init pos:line="11" pos:column="16">= <expr><literal type="number" pos:line="11" pos:column="18">0<pos:position pos:line="11" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">r_is_signed<pos:position pos:line="13" pos:column="18"/></name></expr>)<pos:position pos:line="13" pos:column="19"/></condition><then pos:line="13" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="14" pos:column="5">*<pos:position pos:line="14" pos:column="6"/></operator><name pos:line="14" pos:column="6">r_is_signed<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <literal type="number" pos:line="14" pos:column="20">0<pos:position pos:line="14" pos:column="21"/></literal></expr>;<pos:position pos:line="14" pos:column="22"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="16" pos:column="3">ctx<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <call><name pos:line="16" pos:column="9">create_gpgme_context<pos:position pos:line="16" pos:column="29"/></name> <argument_list pos:line="16" pos:column="30">(<argument><expr><name pos:line="16" pos:column="31">is_smime<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt>

 <label><name pos:line="18" pos:column="2">restart<pos:position pos:line="18" pos:column="9"/></name>:<pos:position pos:line="18" pos:column="10"/></label>
  <comment type="block" pos:line="19" pos:column="3">/* Make a data object from the body, create context etc. */</comment>
  <expr_stmt><expr><name pos:line="20" pos:column="3">ciphertext<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <call><name pos:line="20" pos:column="16">file_to_data_object<pos:position pos:line="20" pos:column="35"/></name> <argument_list pos:line="20" pos:column="36">(<argument><expr><name><name pos:line="20" pos:column="37">s<pos:position pos:line="20" pos:column="38"/></name><operator pos:line="20" pos:column="38">-&gt;<pos:position pos:line="20" pos:column="43"/></operator><name pos:line="20" pos:column="40">fpin<pos:position pos:line="20" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="46">a<pos:position pos:line="20" pos:column="47"/></name><operator pos:line="20" pos:column="47">-&gt;<pos:position pos:line="20" pos:column="52"/></operator><name pos:line="20" pos:column="49">offset<pos:position pos:line="20" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="57">a<pos:position pos:line="20" pos:column="58"/></name><operator pos:line="20" pos:column="58">-&gt;<pos:position pos:line="20" pos:column="63"/></operator><name pos:line="20" pos:column="60">length<pos:position pos:line="20" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="68"/></expr_stmt>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><operator pos:line="21" pos:column="7">!<pos:position pos:line="21" pos:column="8"/></operator><name pos:line="21" pos:column="8">ciphertext<pos:position pos:line="21" pos:column="18"/></name></expr>)<pos:position pos:line="21" pos:column="19"/></condition><then pos:line="21" pos:column="19">
    <block type="pseudo"><return pos:line="22" pos:column="5">return <expr><name pos:line="22" pos:column="12">NULL<pos:position pos:line="22" pos:column="16"/></name></expr>;<pos:position pos:line="22" pos:column="17"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="23" pos:column="3">plaintext<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <call><name pos:line="23" pos:column="15">create_gpgme_data<pos:position pos:line="23" pos:column="32"/></name> <argument_list pos:line="23" pos:column="33">()<pos:position pos:line="23" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="36"/></expr_stmt>

  <comment type="block" pos:line="25" pos:column="3">/* Do the decryption or the verification in case of the S/MIME hack. */</comment>
  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><operator pos:line="26" pos:column="7">(<pos:position pos:line="26" pos:column="8"/></operator><operator pos:line="26" pos:column="8">!<pos:position pos:line="26" pos:column="9"/></operator> <name pos:line="26" pos:column="10">is_smime<pos:position pos:line="26" pos:column="18"/></name><operator pos:line="26" pos:column="18">)<pos:position pos:line="26" pos:column="19"/></operator> <operator pos:line="26" pos:column="20">||<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">maybe_signed<pos:position pos:line="26" pos:column="35"/></name></expr>)<pos:position pos:line="26" pos:column="36"/></condition><then pos:line="26" pos:column="36">
    <block pos:line="27" pos:column="5">{
      <if pos:line="28" pos:column="7">if <condition pos:line="28" pos:column="10">(<expr><operator pos:line="28" pos:column="11">!<pos:position pos:line="28" pos:column="12"/></operator> <name pos:line="28" pos:column="13">is_smime<pos:position pos:line="28" pos:column="21"/></name></expr>)<pos:position pos:line="28" pos:column="22"/></condition><then pos:line="28" pos:column="22">
	<block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="9">err<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <call><name pos:line="29" pos:column="15">gpgme_op_decrypt_verify<pos:position pos:line="29" pos:column="38"/></name> <argument_list pos:line="29" pos:column="39">(<argument><expr><name pos:line="29" pos:column="40">ctx<pos:position pos:line="29" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="45">ciphertext<pos:position pos:line="29" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="57">plaintext<pos:position pos:line="29" pos:column="66"/></name></expr></argument>)<pos:position pos:line="29" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="68"/></expr_stmt></block></then>
      <elseif pos:line="30" pos:column="7">else <if pos:line="30" pos:column="12">if <condition pos:line="30" pos:column="15">(<expr><name pos:line="30" pos:column="16">maybe_signed<pos:position pos:line="30" pos:column="28"/></name></expr>)<pos:position pos:line="30" pos:column="29"/></condition><then pos:line="30" pos:column="29">
	<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="9">err<pos:position pos:line="31" pos:column="12"/></name> <operator pos:line="31" pos:column="13">=<pos:position pos:line="31" pos:column="14"/></operator> <call><name pos:line="31" pos:column="15">gpgme_op_verify<pos:position pos:line="31" pos:column="30"/></name> <argument_list pos:line="31" pos:column="31">(<argument><expr><name pos:line="31" pos:column="32">ctx<pos:position pos:line="31" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="37">ciphertext<pos:position pos:line="31" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="49">NULL<pos:position pos:line="31" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="55">plaintext<pos:position pos:line="31" pos:column="64"/></name></expr></argument>)<pos:position pos:line="31" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="66"/></expr_stmt></block></then></if></elseif></if>

      <if pos:line="33" pos:column="7">if <condition pos:line="33" pos:column="10">(<expr><name pos:line="33" pos:column="11">err<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">==<pos:position pos:line="33" pos:column="17"/></operator> <name pos:line="33" pos:column="18">GPG_ERR_NO_ERROR<pos:position pos:line="33" pos:column="34"/></name></expr>)<pos:position pos:line="33" pos:column="35"/></condition><then pos:line="33" pos:column="35">
      <block pos:line="34" pos:column="7">{
	<comment type="block" pos:line="35" pos:column="9">/* Check whether signatures have been verified.  */</comment>
	<decl_stmt><decl><type><name pos:line="36" pos:column="9">gpgme_verify_result_t<pos:position pos:line="36" pos:column="30"/></name></type> <name pos:line="36" pos:column="31">verify_result<pos:position pos:line="36" pos:column="44"/></name> <init pos:line="36" pos:column="45">= <expr><call><name pos:line="36" pos:column="47">gpgme_op_verify_result<pos:position pos:line="36" pos:column="69"/></name> <argument_list pos:line="36" pos:column="70">(<argument><expr><name pos:line="36" pos:column="71">ctx<pos:position pos:line="36" pos:column="74"/></name></expr></argument>)<pos:position pos:line="36" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="76"/></decl_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name><name pos:line="37" pos:column="13">verify_result<pos:position pos:line="37" pos:column="26"/></name><operator pos:line="37" pos:column="26">-&gt;<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="28">signatures<pos:position pos:line="37" pos:column="38"/></name></name></expr>)<pos:position pos:line="37" pos:column="39"/></condition><then pos:line="37" pos:column="39">
	  <block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="11">sig_stat<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">=<pos:position pos:line="38" pos:column="21"/></operator> <literal type="number" pos:line="38" pos:column="22">1<pos:position pos:line="38" pos:column="23"/></literal></expr>;<pos:position pos:line="38" pos:column="24"/></expr_stmt></block></then></if>
      }<pos:position pos:line="39" pos:column="8"/></block></then></if>
    }<pos:position pos:line="40" pos:column="6"/></block></then>
  <else pos:line="41" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="5">err<pos:position pos:line="42" pos:column="8"/></name> <operator pos:line="42" pos:column="9">=<pos:position pos:line="42" pos:column="10"/></operator> <call><name pos:line="42" pos:column="11">gpgme_op_decrypt<pos:position pos:line="42" pos:column="27"/></name> <argument_list pos:line="42" pos:column="28">(<argument><expr><name pos:line="42" pos:column="29">ctx<pos:position pos:line="42" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="34">ciphertext<pos:position pos:line="42" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="46">plaintext<pos:position pos:line="42" pos:column="55"/></name></expr></argument>)<pos:position pos:line="42" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="57"/></expr_stmt></block></else></if>
  <expr_stmt><expr><call><name pos:line="43" pos:column="3">gpgme_data_release<pos:position pos:line="43" pos:column="21"/></name> <argument_list pos:line="43" pos:column="22">(<argument><expr><name pos:line="43" pos:column="23">ciphertext<pos:position pos:line="43" pos:column="33"/></name></expr></argument>)<pos:position pos:line="43" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="35"/></expr_stmt>
  <if pos:line="44" pos:column="3">if <condition pos:line="44" pos:column="6">(<expr><name pos:line="44" pos:column="7">err<pos:position pos:line="44" pos:column="10"/></name></expr>)<pos:position pos:line="44" pos:column="11"/></condition><then pos:line="44" pos:column="11">
    <block pos:line="45" pos:column="5">{
      <if pos:line="46" pos:column="7">if <condition pos:line="46" pos:column="10">(<expr><name pos:line="46" pos:column="11">is_smime<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">&amp;&amp;<pos:position pos:line="46" pos:column="30"/></operator> <operator pos:line="46" pos:column="23">!<pos:position pos:line="46" pos:column="24"/></operator><name pos:line="46" pos:column="24">maybe_signed<pos:position pos:line="46" pos:column="36"/></name>
          <operator pos:line="47" pos:column="11">&amp;&amp;<pos:position pos:line="47" pos:column="21"/></operator> <call><name pos:line="47" pos:column="14">gpg_err_code<pos:position pos:line="47" pos:column="26"/></name> <argument_list pos:line="47" pos:column="27">(<argument><expr><name pos:line="47" pos:column="28">err<pos:position pos:line="47" pos:column="31"/></name></expr></argument>)<pos:position pos:line="47" pos:column="32"/></argument_list></call> <operator pos:line="47" pos:column="33">==<pos:position pos:line="47" pos:column="35"/></operator> <name pos:line="47" pos:column="36">GPG_ERR_NO_DATA<pos:position pos:line="47" pos:column="51"/></name></expr>)<pos:position pos:line="47" pos:column="52"/></condition><then pos:line="47" pos:column="52">
        <block pos:line="48" pos:column="9">{
	  <comment type="block" pos:line="49" pos:column="11">/* Check whether this might be a signed message despite what
             the mime header told us.  Retry then.  gpgsm returns the
             error information "unsupported Algorithm '?'" but gpgme
             will not store this unknown algorithm, thus we test that
             it has not been set. */</comment>
	  <decl_stmt><decl><type><name pos:line="54" pos:column="11">gpgme_decrypt_result_t<pos:position pos:line="54" pos:column="33"/></name></type> <name pos:line="54" pos:column="34">result<pos:position pos:line="54" pos:column="40"/></name></decl>;<pos:position pos:line="54" pos:column="41"/></decl_stmt>

	  <expr_stmt><expr><name pos:line="56" pos:column="11">result<pos:position pos:line="56" pos:column="17"/></name> <operator pos:line="56" pos:column="18">=<pos:position pos:line="56" pos:column="19"/></operator> <call><name pos:line="56" pos:column="20">gpgme_op_decrypt_result<pos:position pos:line="56" pos:column="43"/></name> <argument_list pos:line="56" pos:column="44">(<argument><expr><name pos:line="56" pos:column="45">ctx<pos:position pos:line="56" pos:column="48"/></name></expr></argument>)<pos:position pos:line="56" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="50"/></expr_stmt>
	  <if pos:line="57" pos:column="11">if <condition pos:line="57" pos:column="14">(<expr><operator pos:line="57" pos:column="15">!<pos:position pos:line="57" pos:column="16"/></operator><name><name pos:line="57" pos:column="16">result<pos:position pos:line="57" pos:column="22"/></name><operator pos:line="57" pos:column="22">-&gt;<pos:position pos:line="57" pos:column="27"/></operator><name pos:line="57" pos:column="24">unsupported_algorithm<pos:position pos:line="57" pos:column="45"/></name></name></expr>)<pos:position pos:line="57" pos:column="46"/></condition><then pos:line="57" pos:column="46">
            <block pos:line="58" pos:column="13">{
              <expr_stmt><expr><name pos:line="59" pos:column="15">maybe_signed<pos:position pos:line="59" pos:column="27"/></name> <operator pos:line="59" pos:column="28">=<pos:position pos:line="59" pos:column="29"/></operator> <literal type="number" pos:line="59" pos:column="30">1<pos:position pos:line="59" pos:column="31"/></literal></expr>;<pos:position pos:line="59" pos:column="32"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="60" pos:column="15">gpgme_data_release<pos:position pos:line="60" pos:column="33"/></name> <argument_list pos:line="60" pos:column="34">(<argument><expr><name pos:line="60" pos:column="35">plaintext<pos:position pos:line="60" pos:column="44"/></name></expr></argument>)<pos:position pos:line="60" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="46"/></expr_stmt>
              <goto pos:line="61" pos:column="15">goto <name pos:line="61" pos:column="20">restart<pos:position pos:line="61" pos:column="27"/></name>;<pos:position pos:line="61" pos:column="28"/></goto>
            }<pos:position pos:line="62" pos:column="14"/></block></then></if>
        }<pos:position pos:line="63" pos:column="10"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="64" pos:column="7">mutt_need_hard_redraw<pos:position pos:line="64" pos:column="28"/></name> <argument_list pos:line="64" pos:column="29">()<pos:position pos:line="64" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="32"/></expr_stmt>
      <if pos:line="65" pos:column="7">if <condition pos:line="65" pos:column="10">(<expr><operator pos:line="65" pos:column="11">(<pos:position pos:line="65" pos:column="12"/></operator><name><name pos:line="65" pos:column="12">s<pos:position pos:line="65" pos:column="13"/></name><operator pos:line="65" pos:column="13">-&gt;<pos:position pos:line="65" pos:column="18"/></operator><name pos:line="65" pos:column="15">flags<pos:position pos:line="65" pos:column="20"/></name></name> <operator pos:line="65" pos:column="21">&amp;<pos:position pos:line="65" pos:column="26"/></operator> <name pos:line="65" pos:column="23">MUTT_DISPLAY<pos:position pos:line="65" pos:column="35"/></name><operator pos:line="65" pos:column="35">)<pos:position pos:line="65" pos:column="36"/></operator></expr>)<pos:position pos:line="65" pos:column="37"/></condition><then pos:line="65" pos:column="37">
        <block pos:line="66" pos:column="9">{
          <decl_stmt><decl><type><name pos:line="67" pos:column="11">char<pos:position pos:line="67" pos:column="15"/></name></type> <name><name pos:line="67" pos:column="16">buf<pos:position pos:line="67" pos:column="19"/></name><index pos:line="67" pos:column="19">[<expr><literal type="number" pos:line="67" pos:column="20">200<pos:position pos:line="67" pos:column="23"/></literal></expr>]<pos:position pos:line="67" pos:column="24"/></index></name></decl>;<pos:position pos:line="67" pos:column="25"/></decl_stmt>
          
          <expr_stmt><expr><call><name pos:line="69" pos:column="11">snprintf<pos:position pos:line="69" pos:column="19"/></name> <argument_list pos:line="69" pos:column="20">(<argument><expr><name pos:line="69" pos:column="21">buf<pos:position pos:line="69" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="69" pos:column="26">sizeof<argument_list pos:line="69" pos:column="32">(<argument><expr><name pos:line="69" pos:column="33">buf<pos:position pos:line="69" pos:column="36"/></name></expr></argument>)<pos:position pos:line="69" pos:column="37"/></argument_list></sizeof><operator pos:line="69" pos:column="37">-<pos:position pos:line="69" pos:column="38"/></operator><literal type="number" pos:line="69" pos:column="38">1<pos:position pos:line="69" pos:column="39"/></literal></expr></argument>, 
                    <argument><expr><call><name pos:line="70" pos:column="21">_<pos:position pos:line="70" pos:column="22"/></name><argument_list pos:line="70" pos:column="22">(<argument><expr><literal type="string" pos:line="70" pos:column="23">"[-- Error: decryption failed: %s --]\n\n"<pos:position pos:line="70" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="66"/></argument_list></call></expr></argument>,
                    <argument><expr><call><name pos:line="71" pos:column="21">gpgme_strerror<pos:position pos:line="71" pos:column="35"/></name> <argument_list pos:line="71" pos:column="36">(<argument><expr><name pos:line="71" pos:column="37">err<pos:position pos:line="71" pos:column="40"/></name></expr></argument>)<pos:position pos:line="71" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="71" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="43"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="72" pos:column="11">state_attach_puts<pos:position pos:line="72" pos:column="28"/></name> <argument_list pos:line="72" pos:column="29">(<argument><expr><name pos:line="72" pos:column="30">buf<pos:position pos:line="72" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="35">s<pos:position pos:line="72" pos:column="36"/></name></expr></argument>)<pos:position pos:line="72" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="73" pos:column="10"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="74" pos:column="7">gpgme_data_release<pos:position pos:line="74" pos:column="25"/></name> <argument_list pos:line="74" pos:column="26">(<argument><expr><name pos:line="74" pos:column="27">plaintext<pos:position pos:line="74" pos:column="36"/></name></expr></argument>)<pos:position pos:line="74" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="75" pos:column="7">gpgme_release<pos:position pos:line="75" pos:column="20"/></name> <argument_list pos:line="75" pos:column="21">(<argument><expr><name pos:line="75" pos:column="22">ctx<pos:position pos:line="75" pos:column="25"/></name></expr></argument>)<pos:position pos:line="75" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="27"/></expr_stmt>
      <return pos:line="76" pos:column="7">return <expr><name pos:line="76" pos:column="14">NULL<pos:position pos:line="76" pos:column="18"/></name></expr>;<pos:position pos:line="76" pos:column="19"/></return>
  }<pos:position pos:line="77" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="78" pos:column="3">mutt_need_hard_redraw<pos:position pos:line="78" pos:column="24"/></name> <argument_list pos:line="78" pos:column="25">()<pos:position pos:line="78" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="28"/></expr_stmt>

  <comment type="block" pos:line="80" pos:column="3">/* Read the output from GPGME, and make sure to change CRLF to LF,
     otherwise read_mime_header has a hard time parsing the message.  */</comment>
  <if pos:line="82" pos:column="3">if <condition pos:line="82" pos:column="6">(<expr><call><name pos:line="82" pos:column="7">data_object_to_stream<pos:position pos:line="82" pos:column="28"/></name> <argument_list pos:line="82" pos:column="29">(<argument><expr><name pos:line="82" pos:column="30">plaintext<pos:position pos:line="82" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="41">fpout<pos:position pos:line="82" pos:column="46"/></name></expr></argument>)<pos:position pos:line="82" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="82" pos:column="48"/></condition><then pos:line="82" pos:column="48">
    <block pos:line="83" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="84" pos:column="7">gpgme_data_release<pos:position pos:line="84" pos:column="25"/></name> <argument_list pos:line="84" pos:column="26">(<argument><expr><name pos:line="84" pos:column="27">plaintext<pos:position pos:line="84" pos:column="36"/></name></expr></argument>)<pos:position pos:line="84" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="85" pos:column="7">gpgme_release<pos:position pos:line="85" pos:column="20"/></name> <argument_list pos:line="85" pos:column="21">(<argument><expr><name pos:line="85" pos:column="22">ctx<pos:position pos:line="85" pos:column="25"/></name></expr></argument>)<pos:position pos:line="85" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="27"/></expr_stmt>
      <return pos:line="86" pos:column="7">return <expr><name pos:line="86" pos:column="14">NULL<pos:position pos:line="86" pos:column="18"/></name></expr>;<pos:position pos:line="86" pos:column="19"/></return>
    }<pos:position pos:line="87" pos:column="6"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="88" pos:column="3">gpgme_data_release<pos:position pos:line="88" pos:column="21"/></name> <argument_list pos:line="88" pos:column="22">(<argument><expr><name pos:line="88" pos:column="23">plaintext<pos:position pos:line="88" pos:column="32"/></name></expr></argument>)<pos:position pos:line="88" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="90" pos:column="3">a<pos:position pos:line="90" pos:column="4"/></name><operator pos:line="90" pos:column="4">-&gt;<pos:position pos:line="90" pos:column="9"/></operator><name pos:line="90" pos:column="6">is_signed_data<pos:position pos:line="90" pos:column="20"/></name></name> <operator pos:line="90" pos:column="21">=<pos:position pos:line="90" pos:column="22"/></operator> <literal type="number" pos:line="90" pos:column="23">0<pos:position pos:line="90" pos:column="24"/></literal></expr>;<pos:position pos:line="90" pos:column="25"/></expr_stmt>
  <if pos:line="91" pos:column="3">if <condition pos:line="91" pos:column="6">(<expr><name pos:line="91" pos:column="7">sig_stat<pos:position pos:line="91" pos:column="15"/></name></expr>)<pos:position pos:line="91" pos:column="16"/></condition><then pos:line="91" pos:column="16">
    <block pos:line="92" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="93" pos:column="7">int<pos:position pos:line="93" pos:column="10"/></name></type> <name pos:line="93" pos:column="11">res<pos:position pos:line="93" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="93" pos:column="16">idx<pos:position pos:line="93" pos:column="19"/></name></decl>;<pos:position pos:line="93" pos:column="20"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="94" pos:column="7">int<pos:position pos:line="94" pos:column="10"/></name></type> <name pos:line="94" pos:column="11">anybad<pos:position pos:line="94" pos:column="17"/></name> <init pos:line="94" pos:column="18">= <expr><literal type="number" pos:line="94" pos:column="20">0<pos:position pos:line="94" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="94" pos:column="22"/></decl_stmt>
      
      <if pos:line="96" pos:column="7">if <condition pos:line="96" pos:column="10">(<expr><name pos:line="96" pos:column="11">maybe_signed<pos:position pos:line="96" pos:column="23"/></name></expr>)<pos:position pos:line="96" pos:column="24"/></condition><then pos:line="96" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="97" pos:column="9">a<pos:position pos:line="97" pos:column="10"/></name><operator pos:line="97" pos:column="10">-&gt;<pos:position pos:line="97" pos:column="15"/></operator><name pos:line="97" pos:column="12">is_signed_data<pos:position pos:line="97" pos:column="26"/></name></name> <operator pos:line="97" pos:column="27">=<pos:position pos:line="97" pos:column="28"/></operator> <literal type="number" pos:line="97" pos:column="29">1<pos:position pos:line="97" pos:column="30"/></literal></expr>;<pos:position pos:line="97" pos:column="31"/></expr_stmt></block></then></if>
      <if pos:line="98" pos:column="7">if<condition pos:line="98" pos:column="9">(<expr><name pos:line="98" pos:column="10">r_is_signed<pos:position pos:line="98" pos:column="21"/></name></expr>)<pos:position pos:line="98" pos:column="22"/></condition><then pos:line="98" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="99" pos:column="9">*<pos:position pos:line="99" pos:column="10"/></operator><name pos:line="99" pos:column="10">r_is_signed<pos:position pos:line="99" pos:column="21"/></name> <operator pos:line="99" pos:column="22">=<pos:position pos:line="99" pos:column="23"/></operator> <operator pos:line="99" pos:column="24">-<pos:position pos:line="99" pos:column="25"/></operator><literal type="number" pos:line="99" pos:column="25">1<pos:position pos:line="99" pos:column="26"/></literal></expr>;<pos:position pos:line="99" pos:column="27"/></expr_stmt></block></then></if> <comment type="block" pos:line="99" pos:column="28">/* A signature exists. */</comment>

      <if pos:line="101" pos:column="7">if <condition pos:line="101" pos:column="10">(<expr><operator pos:line="101" pos:column="11">(<pos:position pos:line="101" pos:column="12"/></operator><name><name pos:line="101" pos:column="12">s<pos:position pos:line="101" pos:column="13"/></name><operator pos:line="101" pos:column="13">-&gt;<pos:position pos:line="101" pos:column="18"/></operator><name pos:line="101" pos:column="15">flags<pos:position pos:line="101" pos:column="20"/></name></name> <operator pos:line="101" pos:column="21">&amp;<pos:position pos:line="101" pos:column="26"/></operator> <name pos:line="101" pos:column="23">MUTT_DISPLAY<pos:position pos:line="101" pos:column="35"/></name><operator pos:line="101" pos:column="35">)<pos:position pos:line="101" pos:column="36"/></operator></expr>)<pos:position pos:line="101" pos:column="37"/></condition><then pos:line="101" pos:column="37">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="102" pos:column="9">state_attach_puts<pos:position pos:line="102" pos:column="26"/></name> <argument_list pos:line="102" pos:column="27">(<argument><expr><call><name pos:line="102" pos:column="28">_<pos:position pos:line="102" pos:column="29"/></name><argument_list pos:line="102" pos:column="29">(<argument><expr><literal type="string" pos:line="102" pos:column="30">"[-- Begin signature "<pos:position pos:line="102" pos:column="52"/></literal>
                             <literal type="string" pos:line="103" pos:column="30">"information --]\n"<pos:position pos:line="103" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="103" pos:column="52">s<pos:position pos:line="103" pos:column="53"/></name></expr></argument>)<pos:position pos:line="103" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="55"/></expr_stmt></block></then></if>
      <for pos:line="104" pos:column="7">for<control pos:line="104" pos:column="10">(<init><expr><name pos:line="104" pos:column="11">idx<pos:position pos:line="104" pos:column="14"/></name> <operator pos:line="104" pos:column="15">=<pos:position pos:line="104" pos:column="16"/></operator> <literal type="number" pos:line="104" pos:column="17">0<pos:position pos:line="104" pos:column="18"/></literal></expr>;<pos:position pos:line="104" pos:column="19"/></init> <condition><expr><operator pos:line="104" pos:column="20">(<pos:position pos:line="104" pos:column="21"/></operator><name pos:line="104" pos:column="21">res<pos:position pos:line="104" pos:column="24"/></name> <operator pos:line="104" pos:column="25">=<pos:position pos:line="104" pos:column="26"/></operator> <call><name pos:line="104" pos:column="27">show_one_sig_status<pos:position pos:line="104" pos:column="46"/></name> <argument_list pos:line="104" pos:column="47">(<argument><expr><name pos:line="104" pos:column="48">ctx<pos:position pos:line="104" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="53">idx<pos:position pos:line="104" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="58">s<pos:position pos:line="104" pos:column="59"/></name></expr></argument>)<pos:position pos:line="104" pos:column="60"/></argument_list></call><operator pos:line="104" pos:column="60">)<pos:position pos:line="104" pos:column="61"/></operator> <operator pos:line="104" pos:column="62">!=<pos:position pos:line="104" pos:column="64"/></operator> <operator pos:line="104" pos:column="65">-<pos:position pos:line="104" pos:column="66"/></operator><literal type="number" pos:line="104" pos:column="66">1<pos:position pos:line="104" pos:column="67"/></literal></expr>;<pos:position pos:line="104" pos:column="68"/></condition> <incr><expr><name pos:line="104" pos:column="69">idx<pos:position pos:line="104" pos:column="72"/></name><operator pos:line="104" pos:column="72">++<pos:position pos:line="104" pos:column="74"/></operator></expr></incr>)<pos:position pos:line="104" pos:column="75"/></control>
        <block pos:line="105" pos:column="9">{
          <if pos:line="106" pos:column="11">if <condition pos:line="106" pos:column="14">(<expr><name pos:line="106" pos:column="15">res<pos:position pos:line="106" pos:column="18"/></name> <operator pos:line="106" pos:column="19">==<pos:position pos:line="106" pos:column="21"/></operator> <literal type="number" pos:line="106" pos:column="22">1<pos:position pos:line="106" pos:column="23"/></literal></expr>)<pos:position pos:line="106" pos:column="24"/></condition><then pos:line="106" pos:column="24">
            <block type="pseudo"><expr_stmt><expr><name pos:line="107" pos:column="13">anybad<pos:position pos:line="107" pos:column="19"/></name> <operator pos:line="107" pos:column="20">=<pos:position pos:line="107" pos:column="21"/></operator> <literal type="number" pos:line="107" pos:column="22">1<pos:position pos:line="107" pos:column="23"/></literal></expr>;<pos:position pos:line="107" pos:column="24"/></expr_stmt></block></then>
          <elseif pos:line="108" pos:column="11">else <if pos:line="108" pos:column="16">if <condition pos:line="108" pos:column="19">(<expr><name pos:line="108" pos:column="20">res<pos:position pos:line="108" pos:column="23"/></name> <operator pos:line="108" pos:column="24">==<pos:position pos:line="108" pos:column="26"/></operator> <literal type="number" pos:line="108" pos:column="27">2<pos:position pos:line="108" pos:column="28"/></literal></expr>)<pos:position pos:line="108" pos:column="29"/></condition><then pos:line="108" pos:column="29">
            <block type="pseudo"><expr_stmt><expr><name pos:line="109" pos:column="13">anywarn<pos:position pos:line="109" pos:column="20"/></name> <operator pos:line="109" pos:column="21">=<pos:position pos:line="109" pos:column="22"/></operator> <literal type="number" pos:line="109" pos:column="23">1<pos:position pos:line="109" pos:column="24"/></literal></expr>;<pos:position pos:line="109" pos:column="25"/></expr_stmt></block></then></if></elseif></if>
        }<pos:position pos:line="110" pos:column="10"/></block></for>
      <if pos:line="111" pos:column="7">if <condition pos:line="111" pos:column="10">(<expr><operator pos:line="111" pos:column="11">!<pos:position pos:line="111" pos:column="12"/></operator><name pos:line="111" pos:column="12">anybad<pos:position pos:line="111" pos:column="18"/></name> <operator pos:line="111" pos:column="19">&amp;&amp;<pos:position pos:line="111" pos:column="29"/></operator> <name pos:line="111" pos:column="22">idx<pos:position pos:line="111" pos:column="25"/></name> <operator pos:line="111" pos:column="26">&amp;&amp;<pos:position pos:line="111" pos:column="36"/></operator> <name pos:line="111" pos:column="29">r_is_signed<pos:position pos:line="111" pos:column="40"/></name> <operator pos:line="111" pos:column="41">&amp;&amp;<pos:position pos:line="111" pos:column="51"/></operator> <operator pos:line="111" pos:column="44">*<pos:position pos:line="111" pos:column="45"/></operator><name pos:line="111" pos:column="45">r_is_signed<pos:position pos:line="111" pos:column="56"/></name></expr>)<pos:position pos:line="111" pos:column="57"/></condition><then pos:line="111" pos:column="57">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="112" pos:column="9">*<pos:position pos:line="112" pos:column="10"/></operator><name pos:line="112" pos:column="10">r_is_signed<pos:position pos:line="112" pos:column="21"/></name> <operator pos:line="112" pos:column="22">=<pos:position pos:line="112" pos:column="23"/></operator> <ternary><condition><expr><name pos:line="112" pos:column="24">anywarn<pos:position pos:line="112" pos:column="31"/></name></expr>?<pos:position pos:line="112" pos:column="32"/></condition><then pos:line="112" pos:column="32"> <expr><literal type="number" pos:line="112" pos:column="33">2<pos:position pos:line="112" pos:column="34"/></literal></expr></then><else pos:line="112" pos:column="34">:<expr><literal type="number" pos:line="112" pos:column="35">1<pos:position pos:line="112" pos:column="36"/></literal></expr></else></ternary></expr>;<pos:position pos:line="112" pos:column="37"/></expr_stmt></block></then></if> <comment type="block" pos:line="112" pos:column="38">/* Good signature. */</comment>
      
      <if pos:line="114" pos:column="7">if <condition pos:line="114" pos:column="10">(<expr><operator pos:line="114" pos:column="11">(<pos:position pos:line="114" pos:column="12"/></operator><name><name pos:line="114" pos:column="12">s<pos:position pos:line="114" pos:column="13"/></name><operator pos:line="114" pos:column="13">-&gt;<pos:position pos:line="114" pos:column="18"/></operator><name pos:line="114" pos:column="15">flags<pos:position pos:line="114" pos:column="20"/></name></name> <operator pos:line="114" pos:column="21">&amp;<pos:position pos:line="114" pos:column="26"/></operator> <name pos:line="114" pos:column="23">MUTT_DISPLAY<pos:position pos:line="114" pos:column="35"/></name><operator pos:line="114" pos:column="35">)<pos:position pos:line="114" pos:column="36"/></operator></expr>)<pos:position pos:line="114" pos:column="37"/></condition><then pos:line="114" pos:column="37">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="115" pos:column="9">state_attach_puts<pos:position pos:line="115" pos:column="26"/></name> <argument_list pos:line="115" pos:column="27">(<argument><expr><call><name pos:line="115" pos:column="28">_<pos:position pos:line="115" pos:column="29"/></name><argument_list pos:line="115" pos:column="29">(<argument><expr><literal type="string" pos:line="115" pos:column="30">"[-- End signature "<pos:position pos:line="115" pos:column="50"/></literal>
                             <literal type="string" pos:line="116" pos:column="30">"information --]\n\n"<pos:position pos:line="116" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="116" pos:column="54">s<pos:position pos:line="116" pos:column="55"/></name></expr></argument>)<pos:position pos:line="116" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="57"/></expr_stmt></block></then></if>
    }<pos:position pos:line="117" pos:column="6"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="118" pos:column="3">gpgme_release<pos:position pos:line="118" pos:column="16"/></name> <argument_list pos:line="118" pos:column="17">(<argument><expr><name pos:line="118" pos:column="18">ctx<pos:position pos:line="118" pos:column="21"/></name></expr></argument>)<pos:position pos:line="118" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="23"/></expr_stmt> <expr_stmt><expr><name pos:line="118" pos:column="24">ctx<pos:position pos:line="118" pos:column="27"/></name> <operator pos:line="118" pos:column="28">=<pos:position pos:line="118" pos:column="29"/></operator> <name pos:line="118" pos:column="30">NULL<pos:position pos:line="118" pos:column="34"/></name></expr>;<pos:position pos:line="118" pos:column="35"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="120" pos:column="3">fflush<pos:position pos:line="120" pos:column="9"/></name> <argument_list pos:line="120" pos:column="10">(<argument><expr><name pos:line="120" pos:column="11">fpout<pos:position pos:line="120" pos:column="16"/></name></expr></argument>)<pos:position pos:line="120" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="121" pos:column="3">rewind<pos:position pos:line="121" pos:column="9"/></name> <argument_list pos:line="121" pos:column="10">(<argument><expr><name pos:line="121" pos:column="11">fpout<pos:position pos:line="121" pos:column="16"/></name></expr></argument>)<pos:position pos:line="121" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="122" pos:column="3">tattach<pos:position pos:line="122" pos:column="10"/></name> <operator pos:line="122" pos:column="11">=<pos:position pos:line="122" pos:column="12"/></operator> <call><name pos:line="122" pos:column="13">mutt_read_mime_header<pos:position pos:line="122" pos:column="34"/></name> <argument_list pos:line="122" pos:column="35">(<argument><expr><name pos:line="122" pos:column="36">fpout<pos:position pos:line="122" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="122" pos:column="43">0<pos:position pos:line="122" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="46"/></expr_stmt>
  <if pos:line="123" pos:column="3">if <condition pos:line="123" pos:column="6">(<expr><name pos:line="123" pos:column="7">tattach<pos:position pos:line="123" pos:column="14"/></name></expr>)<pos:position pos:line="123" pos:column="15"/></condition><then pos:line="123" pos:column="15">
    <block pos:line="124" pos:column="5">{
      <comment type="block" pos:line="125" pos:column="7">/*
       * Need to set the length of this body part.
       */</comment>
      <expr_stmt><expr><call><name pos:line="128" pos:column="7">fstat<pos:position pos:line="128" pos:column="12"/></name> <argument_list pos:line="128" pos:column="13">(<argument><expr><call><name pos:line="128" pos:column="14">fileno<pos:position pos:line="128" pos:column="20"/></name> <argument_list pos:line="128" pos:column="21">(<argument><expr><name pos:line="128" pos:column="22">fpout<pos:position pos:line="128" pos:column="27"/></name></expr></argument>)<pos:position pos:line="128" pos:column="28"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="128" pos:column="30">&amp;<pos:position pos:line="128" pos:column="35"/></operator><name pos:line="128" pos:column="31">info<pos:position pos:line="128" pos:column="35"/></name></expr></argument>)<pos:position pos:line="128" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="129" pos:column="7">tattach<pos:position pos:line="129" pos:column="14"/></name><operator pos:line="129" pos:column="14">-&gt;<pos:position pos:line="129" pos:column="19"/></operator><name pos:line="129" pos:column="16">length<pos:position pos:line="129" pos:column="22"/></name></name> <operator pos:line="129" pos:column="23">=<pos:position pos:line="129" pos:column="24"/></operator> <name><name pos:line="129" pos:column="25">info<pos:position pos:line="129" pos:column="29"/></name><operator pos:line="129" pos:column="29">.<pos:position pos:line="129" pos:column="30"/></operator><name pos:line="129" pos:column="30">st_size<pos:position pos:line="129" pos:column="37"/></name></name> <operator pos:line="129" pos:column="38">-<pos:position pos:line="129" pos:column="39"/></operator> <name><name pos:line="129" pos:column="40">tattach<pos:position pos:line="129" pos:column="47"/></name><operator pos:line="129" pos:column="47">-&gt;<pos:position pos:line="129" pos:column="52"/></operator><name pos:line="129" pos:column="49">offset<pos:position pos:line="129" pos:column="55"/></name></name></expr>;<pos:position pos:line="129" pos:column="56"/></expr_stmt>
      
      <expr_stmt><expr><name><name pos:line="131" pos:column="7">tattach<pos:position pos:line="131" pos:column="14"/></name><operator pos:line="131" pos:column="14">-&gt;<pos:position pos:line="131" pos:column="19"/></operator><name pos:line="131" pos:column="16">warnsig<pos:position pos:line="131" pos:column="23"/></name></name> <operator pos:line="131" pos:column="24">=<pos:position pos:line="131" pos:column="25"/></operator> <name pos:line="131" pos:column="26">anywarn<pos:position pos:line="131" pos:column="33"/></name></expr>;<pos:position pos:line="131" pos:column="34"/></expr_stmt>

      <comment type="block" pos:line="133" pos:column="7">/* See if we need to recurse on this MIME part.  */</comment>
      <expr_stmt><expr><call><name pos:line="134" pos:column="7">mutt_parse_part<pos:position pos:line="134" pos:column="22"/></name> <argument_list pos:line="134" pos:column="23">(<argument><expr><name pos:line="134" pos:column="24">fpout<pos:position pos:line="134" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="31">tattach<pos:position pos:line="134" pos:column="38"/></name></expr></argument>)<pos:position pos:line="134" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="135" pos:column="6"/></block></then></if>

  <return pos:line="137" pos:column="3">return <expr><name pos:line="137" pos:column="10">tattach<pos:position pos:line="137" pos:column="17"/></name></expr>;<pos:position pos:line="137" pos:column="18"/></return>
}<pos:position pos:line="138" pos:column="2"/></block></function></unit>
