<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_561_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_socket_write_d<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">CONNECTION<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">conn<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">buf<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">int<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">len<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="70">int<pos:position pos:line="1" pos:column="73"/></name></type> <name pos:line="1" pos:column="74">dbg<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">rc<pos:position pos:line="3" pos:column="9"/></name></decl>;<pos:position pos:line="3" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">sent<pos:position pos:line="4" pos:column="11"/></name> <init pos:line="4" pos:column="12">= <expr><literal type="number" pos:line="4" pos:column="14">0<pos:position pos:line="4" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">dprint<pos:position pos:line="6" pos:column="9"/></name> <argument_list pos:line="6" pos:column="10">(<argument><expr><name pos:line="6" pos:column="11">dbg<pos:position pos:line="6" pos:column="14"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="16">(<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">debugfile<pos:position pos:line="6" pos:column="26"/></name><operator pos:line="6" pos:column="26">,<pos:position pos:line="6" pos:column="27"/></operator><literal type="string" pos:line="6" pos:column="27">"%d&gt; %s"<pos:position pos:line="6" pos:column="38"/></literal><operator pos:line="6" pos:column="35">,<pos:position pos:line="6" pos:column="36"/></operator> <name><name pos:line="6" pos:column="37">conn<pos:position pos:line="6" pos:column="41"/></name><operator pos:line="6" pos:column="41">-&gt;<pos:position pos:line="6" pos:column="46"/></operator><name pos:line="6" pos:column="43">fd<pos:position pos:line="6" pos:column="45"/></name></name><operator pos:line="6" pos:column="45">,<pos:position pos:line="6" pos:column="46"/></operator> <name pos:line="6" pos:column="47">buf<pos:position pos:line="6" pos:column="50"/></name><operator pos:line="6" pos:column="50">)<pos:position pos:line="6" pos:column="51"/></operator></expr></argument>)<pos:position pos:line="6" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="53"/></expr_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name><name pos:line="8" pos:column="7">conn<pos:position pos:line="8" pos:column="11"/></name><operator pos:line="8" pos:column="11">-&gt;<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="13">fd<pos:position pos:line="8" pos:column="15"/></name></name> <operator pos:line="8" pos:column="16">&lt;<pos:position pos:line="8" pos:column="20"/></operator> <literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr>)<pos:position pos:line="8" pos:column="20"/></condition><then pos:line="8" pos:column="20">
  <block pos:line="9" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">dprint<pos:position pos:line="10" pos:column="11"/></name> <argument_list pos:line="10" pos:column="12">(<argument><expr><literal type="number" pos:line="10" pos:column="13">1<pos:position pos:line="10" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="10" pos:column="16">(<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">debugfile<pos:position pos:line="10" pos:column="26"/></name><operator pos:line="10" pos:column="26">,<pos:position pos:line="10" pos:column="27"/></operator> <literal type="string" pos:line="10" pos:column="28">"mutt_socket_write: attempt to write to closed connection\n"<pos:position pos:line="10" pos:column="88"/></literal><operator pos:line="10" pos:column="88">)<pos:position pos:line="10" pos:column="89"/></operator></expr></argument>)<pos:position pos:line="10" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="91"/></expr_stmt>
    <return pos:line="11" pos:column="5">return <expr><operator pos:line="11" pos:column="12">-<pos:position pos:line="11" pos:column="13"/></operator><literal type="number" pos:line="11" pos:column="13">1<pos:position pos:line="11" pos:column="14"/></literal></expr>;<pos:position pos:line="11" pos:column="15"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>

  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">len<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">&lt;<pos:position pos:line="14" pos:column="15"/></operator> <literal type="number" pos:line="14" pos:column="13">0<pos:position pos:line="14" pos:column="14"/></literal></expr>)<pos:position pos:line="14" pos:column="15"/></condition><then pos:line="14" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="5">len<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <call><name pos:line="15" pos:column="11">mutt_strlen<pos:position pos:line="15" pos:column="22"/></name> <argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">buf<pos:position pos:line="15" pos:column="27"/></name></expr></argument>)<pos:position pos:line="15" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt></block></then></if>
  
  <while pos:line="17" pos:column="3">while <condition pos:line="17" pos:column="9">(<expr><name pos:line="17" pos:column="10">sent<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">&lt;<pos:position pos:line="17" pos:column="19"/></operator> <name pos:line="17" pos:column="17">len<pos:position pos:line="17" pos:column="20"/></name></expr>)<pos:position pos:line="17" pos:column="21"/></condition>
  <block pos:line="18" pos:column="3">{
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">(<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">rc<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <call><name><name pos:line="19" pos:column="15">conn<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">-&gt;<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="21">conn_write<pos:position pos:line="19" pos:column="31"/></name></name> <argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">conn<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="39">buf<pos:position pos:line="19" pos:column="42"/></name> <operator pos:line="19" pos:column="43">+<pos:position pos:line="19" pos:column="44"/></operator> <name pos:line="19" pos:column="45">sent<pos:position pos:line="19" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="51">len<pos:position pos:line="19" pos:column="54"/></name> <operator pos:line="19" pos:column="55">-<pos:position pos:line="19" pos:column="56"/></operator> <name pos:line="19" pos:column="57">sent<pos:position pos:line="19" pos:column="61"/></name></expr></argument>)<pos:position pos:line="19" pos:column="62"/></argument_list></call><operator pos:line="19" pos:column="62">)<pos:position pos:line="19" pos:column="63"/></operator> <operator pos:line="19" pos:column="64">&lt;<pos:position pos:line="19" pos:column="68"/></operator> <literal type="number" pos:line="19" pos:column="66">0<pos:position pos:line="19" pos:column="67"/></literal></expr>)<pos:position pos:line="19" pos:column="68"/></condition><then pos:line="19" pos:column="68">
    <block pos:line="20" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">dprint<pos:position pos:line="21" pos:column="13"/></name> <argument_list pos:line="21" pos:column="14">(<argument><expr><literal type="number" pos:line="21" pos:column="15">1<pos:position pos:line="21" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="21" pos:column="18">(<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="19">debugfile<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">,<pos:position pos:line="21" pos:column="29"/></operator>
                  <literal type="string" pos:line="22" pos:column="19">"mutt_socket_write: error writing (%s), closing socket\n"<pos:position pos:line="22" pos:column="76"/></literal><operator pos:line="22" pos:column="76">,<pos:position pos:line="22" pos:column="77"/></operator>
                  <call><name pos:line="23" pos:column="19">strerror<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">(<argument><expr><name pos:line="23" pos:column="28">errno<pos:position pos:line="23" pos:column="33"/></name></expr></argument>)<pos:position pos:line="23" pos:column="34"/></argument_list></call><operator pos:line="23" pos:column="34">)<pos:position pos:line="23" pos:column="35"/></operator></expr></argument>)<pos:position pos:line="23" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="24" pos:column="7">mutt_socket_close<pos:position pos:line="24" pos:column="24"/></name> <argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">conn<pos:position pos:line="24" pos:column="30"/></name></expr></argument>)<pos:position pos:line="24" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="32"/></expr_stmt>

      <return pos:line="26" pos:column="7">return <expr><operator pos:line="26" pos:column="14">-<pos:position pos:line="26" pos:column="15"/></operator><literal type="number" pos:line="26" pos:column="15">1<pos:position pos:line="26" pos:column="16"/></literal></expr>;<pos:position pos:line="26" pos:column="17"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">rc<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">&lt;<pos:position pos:line="29" pos:column="16"/></operator> <name pos:line="29" pos:column="14">len<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">-<pos:position pos:line="29" pos:column="19"/></operator> <name pos:line="29" pos:column="20">sent<pos:position pos:line="29" pos:column="24"/></name></expr>)<pos:position pos:line="29" pos:column="25"/></condition><then pos:line="29" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="7">dprint<pos:position pos:line="30" pos:column="13"/></name> <argument_list pos:line="30" pos:column="14">(<argument><expr><literal type="number" pos:line="30" pos:column="15">3<pos:position pos:line="30" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="30" pos:column="18">(<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="19">debugfile<pos:position pos:line="30" pos:column="28"/></name><operator pos:line="30" pos:column="28">,<pos:position pos:line="30" pos:column="29"/></operator>
                  <literal type="string" pos:line="31" pos:column="19">"mutt_socket_write: short write (%d of %d bytes)\n"<pos:position pos:line="31" pos:column="70"/></literal><operator pos:line="31" pos:column="70">,<pos:position pos:line="31" pos:column="71"/></operator> <name pos:line="31" pos:column="72">rc<pos:position pos:line="31" pos:column="74"/></name><operator pos:line="31" pos:column="74">,<pos:position pos:line="31" pos:column="75"/></operator>
                  <name pos:line="32" pos:column="19">len<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">-<pos:position pos:line="32" pos:column="24"/></operator> <name pos:line="32" pos:column="25">sent<pos:position pos:line="32" pos:column="29"/></name><operator pos:line="32" pos:column="29">)<pos:position pos:line="32" pos:column="30"/></operator></expr></argument>)<pos:position pos:line="32" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="32"/></expr_stmt></block></then></if>
    
    <expr_stmt><expr><name pos:line="34" pos:column="5">sent<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">+=<pos:position pos:line="34" pos:column="12"/></operator> <name pos:line="34" pos:column="13">rc<pos:position pos:line="34" pos:column="15"/></name></expr>;<pos:position pos:line="34" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="35" pos:column="4"/></block></while>

  <return pos:line="37" pos:column="3">return <expr><name pos:line="37" pos:column="10">sent<pos:position pos:line="37" pos:column="14"/></name></expr>;<pos:position pos:line="37" pos:column="15"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
