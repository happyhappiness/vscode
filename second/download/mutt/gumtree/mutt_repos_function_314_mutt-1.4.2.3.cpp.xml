<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_314_mutt-1.4.2.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">BODY<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">mutt_read_mime_header<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">FILE<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">fp<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">int<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">digest<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">BODY<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">p<pos:position pos:line="3" pos:column="10"/></name> <init pos:line="3" pos:column="11">= <expr><call><name pos:line="3" pos:column="13">mutt_new_body<pos:position pos:line="3" pos:column="26"/></name><argument_list pos:line="3" pos:column="26">()<pos:position pos:line="3" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">c<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">line<pos:position pos:line="5" pos:column="13"/></name> <init pos:line="5" pos:column="14">= <expr><call><name pos:line="5" pos:column="16">safe_malloc<pos:position pos:line="5" pos:column="27"/></name> <argument_list pos:line="5" pos:column="28">(<argument><expr><name pos:line="5" pos:column="29">LONG_STRING<pos:position pos:line="5" pos:column="40"/></name></expr></argument>)<pos:position pos:line="5" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">linelen<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><name pos:line="6" pos:column="20">LONG_STRING<pos:position pos:line="6" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
  
  <expr_stmt><expr><name><name pos:line="8" pos:column="3">p<pos:position pos:line="8" pos:column="4"/></name><operator pos:line="8" pos:column="4">-&gt;<pos:position pos:line="8" pos:column="9"/></operator><name pos:line="8" pos:column="6">hdr_offset<pos:position pos:line="8" pos:column="16"/></name></name>  <operator pos:line="8" pos:column="18">=<pos:position pos:line="8" pos:column="19"/></operator> <call><name pos:line="8" pos:column="20">ftell<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">(<argument><expr><name pos:line="8" pos:column="26">fp<pos:position pos:line="8" pos:column="28"/></name></expr></argument>)<pos:position pos:line="8" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="10" pos:column="3">p<pos:position pos:line="10" pos:column="4"/></name><operator pos:line="10" pos:column="4">-&gt;<pos:position pos:line="10" pos:column="9"/></operator><name pos:line="10" pos:column="6">encoding<pos:position pos:line="10" pos:column="14"/></name></name>    <operator pos:line="10" pos:column="18">=<pos:position pos:line="10" pos:column="19"/></operator> <name pos:line="10" pos:column="20">ENC7BIT<pos:position pos:line="10" pos:column="27"/></name></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt> <comment type="block" pos:line="10" pos:column="29">/* default from RFC1521 */</comment>
  <expr_stmt><expr><name><name pos:line="11" pos:column="3">p<pos:position pos:line="11" pos:column="4"/></name><operator pos:line="11" pos:column="4">-&gt;<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="6">type<pos:position pos:line="11" pos:column="10"/></name></name>        <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <ternary><condition><expr><name pos:line="11" pos:column="20">digest<pos:position pos:line="11" pos:column="26"/></name></expr> ?<pos:position pos:line="11" pos:column="28"/></condition><then pos:line="11" pos:column="28"> <expr><name pos:line="11" pos:column="29">TYPEMESSAGE<pos:position pos:line="11" pos:column="40"/></name></expr> <pos:position pos:line="11" pos:column="41"/></then><else pos:line="11" pos:column="41">: <expr><name pos:line="11" pos:column="43">TYPETEXT<pos:position pos:line="11" pos:column="51"/></name></expr></else></ternary></expr>;<pos:position pos:line="11" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">p<pos:position pos:line="12" pos:column="4"/></name><operator pos:line="12" pos:column="4">-&gt;<pos:position pos:line="12" pos:column="9"/></operator><name pos:line="12" pos:column="6">disposition<pos:position pos:line="12" pos:column="17"/></name></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <name pos:line="12" pos:column="20">DISPINLINE<pos:position pos:line="12" pos:column="30"/></name></expr>;<pos:position pos:line="12" pos:column="31"/></expr_stmt>
  
  <while pos:line="14" pos:column="3">while <condition pos:line="14" pos:column="9">(<expr><operator pos:line="14" pos:column="10">*<pos:position pos:line="14" pos:column="11"/></operator><operator pos:line="14" pos:column="11">(<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="12">line<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <call><name pos:line="14" pos:column="19">read_rfc822_line<pos:position pos:line="14" pos:column="35"/></name> <argument_list pos:line="14" pos:column="36">(<argument><expr><name pos:line="14" pos:column="37">fp<pos:position pos:line="14" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="41">line<pos:position pos:line="14" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="47">&amp;<pos:position pos:line="14" pos:column="52"/></operator><name pos:line="14" pos:column="48">linelen<pos:position pos:line="14" pos:column="55"/></name></expr></argument>)<pos:position pos:line="14" pos:column="56"/></argument_list></call><operator pos:line="14" pos:column="56">)<pos:position pos:line="14" pos:column="57"/></operator> <operator pos:line="14" pos:column="58">!=<pos:position pos:line="14" pos:column="60"/></operator> <literal type="number" pos:line="14" pos:column="61">0<pos:position pos:line="14" pos:column="62"/></literal></expr>)<pos:position pos:line="14" pos:column="63"/></condition>
  <block pos:line="15" pos:column="3">{
    <comment type="block" pos:line="16" pos:column="5">/* Find the value of the current header */</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">(<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">c<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <call><name pos:line="17" pos:column="14">strchr<pos:position pos:line="17" pos:column="20"/></name> <argument_list pos:line="17" pos:column="21">(<argument><expr><name pos:line="17" pos:column="22">line<pos:position pos:line="17" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="17" pos:column="28">':'<pos:position pos:line="17" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></call><operator pos:line="17" pos:column="32">)<pos:position pos:line="17" pos:column="33"/></operator></expr>)<pos:position pos:line="17" pos:column="34"/></condition><then pos:line="17" pos:column="34">
    <block pos:line="18" pos:column="5">{
      <expr_stmt><expr><operator pos:line="19" pos:column="7">*<pos:position pos:line="19" pos:column="8"/></operator><name pos:line="19" pos:column="8">c<pos:position pos:line="19" pos:column="9"/></name> <operator pos:line="19" pos:column="10">=<pos:position pos:line="19" pos:column="11"/></operator> <literal type="number" pos:line="19" pos:column="12">0<pos:position pos:line="19" pos:column="13"/></literal></expr>;<pos:position pos:line="19" pos:column="14"/></expr_stmt>
      <expr_stmt><expr><name pos:line="20" pos:column="7">c<pos:position pos:line="20" pos:column="8"/></name><operator pos:line="20" pos:column="8">++<pos:position pos:line="20" pos:column="10"/></operator></expr>;<pos:position pos:line="20" pos:column="11"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">SKIPWS<pos:position pos:line="21" pos:column="13"/></name> <argument_list pos:line="21" pos:column="14">(<argument><expr><name pos:line="21" pos:column="15">c<pos:position pos:line="21" pos:column="16"/></name></expr></argument>)<pos:position pos:line="21" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="18"/></expr_stmt>
      <if pos:line="22" pos:column="7">if <condition pos:line="22" pos:column="10">(<expr><operator pos:line="22" pos:column="11">!<pos:position pos:line="22" pos:column="12"/></operator><operator pos:line="22" pos:column="12">*<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="13">c<pos:position pos:line="22" pos:column="14"/></name></expr>)<pos:position pos:line="22" pos:column="15"/></condition><then pos:line="22" pos:column="15">
      <block pos:line="23" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">dprint<pos:position pos:line="24" pos:column="15"/></name> <argument_list pos:line="24" pos:column="16">(<argument><expr><literal type="number" pos:line="24" pos:column="17">1<pos:position pos:line="24" pos:column="18"/></literal></expr></argument>, <argument><expr><operator pos:line="24" pos:column="20">(<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="21">debugfile<pos:position pos:line="24" pos:column="30"/></name><operator pos:line="24" pos:column="30">,<pos:position pos:line="24" pos:column="31"/></operator> <literal type="string" pos:line="24" pos:column="32">"mutt_read_mime_header(): skipping empty header field: %s\n"<pos:position pos:line="24" pos:column="92"/></literal><operator pos:line="24" pos:column="92">,<pos:position pos:line="24" pos:column="93"/></operator> <name pos:line="24" pos:column="94">line<pos:position pos:line="24" pos:column="98"/></name><operator pos:line="24" pos:column="98">)<pos:position pos:line="24" pos:column="99"/></operator></expr></argument>)<pos:position pos:line="24" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="101"/></expr_stmt>
	<continue pos:line="25" pos:column="9">continue;<pos:position pos:line="25" pos:column="18"/></continue>
      }<pos:position pos:line="26" pos:column="8"/></block></then></if>
    }<pos:position pos:line="27" pos:column="6"/></block></then>
    <else pos:line="28" pos:column="5">else
    <block pos:line="29" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">dprint<pos:position pos:line="30" pos:column="13"/></name> <argument_list pos:line="30" pos:column="14">(<argument><expr><literal type="number" pos:line="30" pos:column="15">1<pos:position pos:line="30" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="30" pos:column="18">(<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="19">debugfile<pos:position pos:line="30" pos:column="28"/></name><operator pos:line="30" pos:column="28">,<pos:position pos:line="30" pos:column="29"/></operator> <literal type="string" pos:line="30" pos:column="30">"read_mime_header: bogus MIME header: %s\n"<pos:position pos:line="30" pos:column="73"/></literal><operator pos:line="30" pos:column="73">,<pos:position pos:line="30" pos:column="74"/></operator> <name pos:line="30" pos:column="75">line<pos:position pos:line="30" pos:column="79"/></name><operator pos:line="30" pos:column="79">)<pos:position pos:line="30" pos:column="80"/></operator></expr></argument>)<pos:position pos:line="30" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="82"/></expr_stmt>
      <break pos:line="31" pos:column="7">break;<pos:position pos:line="31" pos:column="13"/></break>
    }<pos:position pos:line="32" pos:column="6"/></block></else></if>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><operator pos:line="34" pos:column="9">!<pos:position pos:line="34" pos:column="10"/></operator><call><name pos:line="34" pos:column="10">ascii_strncasecmp<pos:position pos:line="34" pos:column="27"/></name> <argument_list pos:line="34" pos:column="28">(<argument><expr><literal type="string" pos:line="34" pos:column="29">"content-"<pos:position pos:line="34" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="41">line<pos:position pos:line="34" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="47">8<pos:position pos:line="34" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="50"/></condition><then pos:line="34" pos:column="50">
    <block pos:line="35" pos:column="5">{
      <if pos:line="36" pos:column="7">if <condition pos:line="36" pos:column="10">(<expr><operator pos:line="36" pos:column="11">!<pos:position pos:line="36" pos:column="12"/></operator><call><name pos:line="36" pos:column="12">ascii_strcasecmp<pos:position pos:line="36" pos:column="28"/></name> <argument_list pos:line="36" pos:column="29">(<argument><expr><literal type="string" pos:line="36" pos:column="30">"type"<pos:position pos:line="36" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="38">line<pos:position pos:line="36" pos:column="42"/></name> <operator pos:line="36" pos:column="43">+<pos:position pos:line="36" pos:column="44"/></operator> <literal type="number" pos:line="36" pos:column="45">8<pos:position pos:line="36" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="48"/></condition><then pos:line="36" pos:column="48">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="9">mutt_parse_content_type<pos:position pos:line="37" pos:column="32"/></name> <argument_list pos:line="37" pos:column="33">(<argument><expr><name pos:line="37" pos:column="34">c<pos:position pos:line="37" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="37">p<pos:position pos:line="37" pos:column="38"/></name></expr></argument>)<pos:position pos:line="37" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="40"/></expr_stmt></block></then>
      <elseif pos:line="38" pos:column="7">else <if pos:line="38" pos:column="12">if <condition pos:line="38" pos:column="15">(<expr><operator pos:line="38" pos:column="16">!<pos:position pos:line="38" pos:column="17"/></operator><call><name pos:line="38" pos:column="17">ascii_strcasecmp<pos:position pos:line="38" pos:column="33"/></name> <argument_list pos:line="38" pos:column="34">(<argument><expr><literal type="string" pos:line="38" pos:column="35">"transfer-encoding"<pos:position pos:line="38" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="56">line<pos:position pos:line="38" pos:column="60"/></name> <operator pos:line="38" pos:column="61">+<pos:position pos:line="38" pos:column="62"/></operator> <literal type="number" pos:line="38" pos:column="63">8<pos:position pos:line="38" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="66"/></condition><then pos:line="38" pos:column="66">
	<block type="pseudo"><expr_stmt><expr><name><name pos:line="39" pos:column="9">p<pos:position pos:line="39" pos:column="10"/></name><operator pos:line="39" pos:column="10">-&gt;<pos:position pos:line="39" pos:column="15"/></operator><name pos:line="39" pos:column="12">encoding<pos:position pos:line="39" pos:column="20"/></name></name> <operator pos:line="39" pos:column="21">=<pos:position pos:line="39" pos:column="22"/></operator> <call><name pos:line="39" pos:column="23">mutt_check_encoding<pos:position pos:line="39" pos:column="42"/></name> <argument_list pos:line="39" pos:column="43">(<argument><expr><name pos:line="39" pos:column="44">c<pos:position pos:line="39" pos:column="45"/></name></expr></argument>)<pos:position pos:line="39" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="47"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="40" pos:column="7">else <if pos:line="40" pos:column="12">if <condition pos:line="40" pos:column="15">(<expr><operator pos:line="40" pos:column="16">!<pos:position pos:line="40" pos:column="17"/></operator><call><name pos:line="40" pos:column="17">ascii_strcasecmp<pos:position pos:line="40" pos:column="33"/></name> <argument_list pos:line="40" pos:column="34">(<argument><expr><literal type="string" pos:line="40" pos:column="35">"disposition"<pos:position pos:line="40" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="50">line<pos:position pos:line="40" pos:column="54"/></name> <operator pos:line="40" pos:column="55">+<pos:position pos:line="40" pos:column="56"/></operator> <literal type="number" pos:line="40" pos:column="57">8<pos:position pos:line="40" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="60"/></condition><then pos:line="40" pos:column="60">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="9">parse_content_disposition<pos:position pos:line="41" pos:column="34"/></name> <argument_list pos:line="41" pos:column="35">(<argument><expr><name pos:line="41" pos:column="36">c<pos:position pos:line="41" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="39">p<pos:position pos:line="41" pos:column="40"/></name></expr></argument>)<pos:position pos:line="41" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="42"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="42" pos:column="7">else <if pos:line="42" pos:column="12">if <condition pos:line="42" pos:column="15">(<expr><operator pos:line="42" pos:column="16">!<pos:position pos:line="42" pos:column="17"/></operator><call><name pos:line="42" pos:column="17">ascii_strcasecmp<pos:position pos:line="42" pos:column="33"/></name> <argument_list pos:line="42" pos:column="34">(<argument><expr><literal type="string" pos:line="42" pos:column="35">"description"<pos:position pos:line="42" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="50">line<pos:position pos:line="42" pos:column="54"/></name> <operator pos:line="42" pos:column="55">+<pos:position pos:line="42" pos:column="56"/></operator> <literal type="number" pos:line="42" pos:column="57">8<pos:position pos:line="42" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="60"/></condition><then pos:line="42" pos:column="60">
      <block pos:line="43" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="44" pos:column="9">mutt_str_replace<pos:position pos:line="44" pos:column="25"/></name> <argument_list pos:line="44" pos:column="26">(<argument><expr><operator pos:line="44" pos:column="27">&amp;<pos:position pos:line="44" pos:column="32"/></operator><name><name pos:line="44" pos:column="28">p<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">-&gt;<pos:position pos:line="44" pos:column="34"/></operator><name pos:line="44" pos:column="31">description<pos:position pos:line="44" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="44">c<pos:position pos:line="44" pos:column="45"/></name></expr></argument>)<pos:position pos:line="44" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="45" pos:column="9">rfc2047_decode<pos:position pos:line="45" pos:column="23"/></name> <argument_list pos:line="45" pos:column="24">(<argument><expr><operator pos:line="45" pos:column="25">&amp;<pos:position pos:line="45" pos:column="30"/></operator><name><name pos:line="45" pos:column="26">p<pos:position pos:line="45" pos:column="27"/></name><operator pos:line="45" pos:column="27">-&gt;<pos:position pos:line="45" pos:column="32"/></operator><name pos:line="45" pos:column="29">description<pos:position pos:line="45" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="42"/></expr_stmt>
      }<pos:position pos:line="46" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="47" pos:column="6"/></block></then> 
<cpp:ifdef pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">ifdef<pos:position pos:line="48" pos:column="7"/></cpp:directive> <name pos:line="48" pos:column="8">SUN_ATTACHMENT<pos:position pos:line="48" pos:column="22"/></name></cpp:ifdef>
    <elseif pos:line="49" pos:column="5">else <if pos:line="49" pos:column="10">if <condition pos:line="49" pos:column="13">(<expr><operator pos:line="49" pos:column="14">!<pos:position pos:line="49" pos:column="15"/></operator><call><name pos:line="49" pos:column="15">ascii_strncasecmp<pos:position pos:line="49" pos:column="32"/></name> <argument_list pos:line="49" pos:column="33">(<argument><expr><literal type="string" pos:line="49" pos:column="34">"x-sun-"<pos:position pos:line="49" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="44">line<pos:position pos:line="49" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="50">6<pos:position pos:line="49" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="53"/></condition><then pos:line="49" pos:column="53">
    <block pos:line="50" pos:column="5">{
      <if pos:line="51" pos:column="7">if <condition pos:line="51" pos:column="10">(<expr><operator pos:line="51" pos:column="11">!<pos:position pos:line="51" pos:column="12"/></operator><call><name pos:line="51" pos:column="12">ascii_strcasecmp<pos:position pos:line="51" pos:column="28"/></name> <argument_list pos:line="51" pos:column="29">(<argument><expr><literal type="string" pos:line="51" pos:column="30">"data-type"<pos:position pos:line="51" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="43">line<pos:position pos:line="51" pos:column="47"/></name> <operator pos:line="51" pos:column="48">+<pos:position pos:line="51" pos:column="49"/></operator> <literal type="number" pos:line="51" pos:column="50">6<pos:position pos:line="51" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="53"/></condition><then pos:line="51" pos:column="53">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="9">mutt_parse_content_type<pos:position pos:line="52" pos:column="32"/></name> <argument_list pos:line="52" pos:column="33">(<argument><expr><name pos:line="52" pos:column="34">c<pos:position pos:line="52" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="37">p<pos:position pos:line="52" pos:column="38"/></name></expr></argument>)<pos:position pos:line="52" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="40"/></expr_stmt></block></then>
      <elseif pos:line="53" pos:column="7">else <if pos:line="53" pos:column="12">if <condition pos:line="53" pos:column="15">(<expr><operator pos:line="53" pos:column="16">!<pos:position pos:line="53" pos:column="17"/></operator><call><name pos:line="53" pos:column="17">ascii_strcasecmp<pos:position pos:line="53" pos:column="33"/></name> <argument_list pos:line="53" pos:column="34">(<argument><expr><literal type="string" pos:line="53" pos:column="35">"encoding-info"<pos:position pos:line="53" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="52">line<pos:position pos:line="53" pos:column="56"/></name> <operator pos:line="53" pos:column="57">+<pos:position pos:line="53" pos:column="58"/></operator> <literal type="number" pos:line="53" pos:column="59">6<pos:position pos:line="53" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="62"/></condition><then pos:line="53" pos:column="62">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="54" pos:column="9">p<pos:position pos:line="54" pos:column="10"/></name><operator pos:line="54" pos:column="10">-&gt;<pos:position pos:line="54" pos:column="15"/></operator><name pos:line="54" pos:column="12">encoding<pos:position pos:line="54" pos:column="20"/></name></name> <operator pos:line="54" pos:column="21">=<pos:position pos:line="54" pos:column="22"/></operator> <call><name pos:line="54" pos:column="23">mutt_check_encoding<pos:position pos:line="54" pos:column="42"/></name> <argument_list pos:line="54" pos:column="43">(<argument><expr><name pos:line="54" pos:column="44">c<pos:position pos:line="54" pos:column="45"/></name></expr></argument>)<pos:position pos:line="54" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="47"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="55" pos:column="7">else <if pos:line="55" pos:column="12">if <condition pos:line="55" pos:column="15">(<expr><operator pos:line="55" pos:column="16">!<pos:position pos:line="55" pos:column="17"/></operator><call><name pos:line="55" pos:column="17">ascii_strcasecmp<pos:position pos:line="55" pos:column="33"/></name> <argument_list pos:line="55" pos:column="34">(<argument><expr><literal type="string" pos:line="55" pos:column="35">"content-lines"<pos:position pos:line="55" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="52">line<pos:position pos:line="55" pos:column="56"/></name> <operator pos:line="55" pos:column="57">+<pos:position pos:line="55" pos:column="58"/></operator> <literal type="number" pos:line="55" pos:column="59">6<pos:position pos:line="55" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="62"/></condition><then pos:line="55" pos:column="62">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="9">mutt_set_parameter<pos:position pos:line="56" pos:column="27"/></name> <argument_list pos:line="56" pos:column="28">(<argument><expr><literal type="string" pos:line="56" pos:column="29">"content-lines"<pos:position pos:line="56" pos:column="44"/></literal></expr></argument>, <argument><expr><call><name pos:line="56" pos:column="46">safe_strdup<pos:position pos:line="56" pos:column="57"/></name> <argument_list pos:line="56" pos:column="58">(<argument><expr><name pos:line="56" pos:column="59">c<pos:position pos:line="56" pos:column="60"/></name></expr></argument>)<pos:position pos:line="56" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="56" pos:column="63">&amp;<pos:position pos:line="56" pos:column="68"/></operator><operator pos:line="56" pos:column="64">(<pos:position pos:line="56" pos:column="65"/></operator><name><name pos:line="56" pos:column="65">p<pos:position pos:line="56" pos:column="66"/></name><operator pos:line="56" pos:column="66">-&gt;<pos:position pos:line="56" pos:column="71"/></operator><name pos:line="56" pos:column="68">parameter<pos:position pos:line="56" pos:column="77"/></name></name><operator pos:line="56" pos:column="77">)<pos:position pos:line="56" pos:column="78"/></operator></expr></argument>)<pos:position pos:line="56" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="80"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="57" pos:column="7">else <if pos:line="57" pos:column="12">if <condition pos:line="57" pos:column="15">(<expr><operator pos:line="57" pos:column="16">!<pos:position pos:line="57" pos:column="17"/></operator><call><name pos:line="57" pos:column="17">ascii_strcasecmp<pos:position pos:line="57" pos:column="33"/></name> <argument_list pos:line="57" pos:column="34">(<argument><expr><literal type="string" pos:line="57" pos:column="35">"data-description"<pos:position pos:line="57" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="55">line<pos:position pos:line="57" pos:column="59"/></name> <operator pos:line="57" pos:column="60">+<pos:position pos:line="57" pos:column="61"/></operator> <literal type="number" pos:line="57" pos:column="62">6<pos:position pos:line="57" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="65"/></condition><then pos:line="57" pos:column="65">
      <block pos:line="58" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="59" pos:column="9">mutt_str_replace<pos:position pos:line="59" pos:column="25"/></name> <argument_list pos:line="59" pos:column="26">(<argument><expr><operator pos:line="59" pos:column="27">&amp;<pos:position pos:line="59" pos:column="32"/></operator><name><name pos:line="59" pos:column="28">p<pos:position pos:line="59" pos:column="29"/></name><operator pos:line="59" pos:column="29">-&gt;<pos:position pos:line="59" pos:column="34"/></operator><name pos:line="59" pos:column="31">description<pos:position pos:line="59" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="44">c<pos:position pos:line="59" pos:column="45"/></name></expr></argument>)<pos:position pos:line="59" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">rfc2047_decode<pos:position pos:line="60" pos:column="23"/></name> <argument_list pos:line="60" pos:column="24">(<argument><expr><operator pos:line="60" pos:column="25">&amp;<pos:position pos:line="60" pos:column="30"/></operator><name><name pos:line="60" pos:column="26">p<pos:position pos:line="60" pos:column="27"/></name><operator pos:line="60" pos:column="27">-&gt;<pos:position pos:line="60" pos:column="32"/></operator><name pos:line="60" pos:column="29">description<pos:position pos:line="60" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="42"/></expr_stmt>
      }<pos:position pos:line="61" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if></elseif></if>
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="64" pos:column="4"/></block></while>
  <expr_stmt><expr><name><name pos:line="65" pos:column="3">p<pos:position pos:line="65" pos:column="4"/></name><operator pos:line="65" pos:column="4">-&gt;<pos:position pos:line="65" pos:column="9"/></operator><name pos:line="65" pos:column="6">offset<pos:position pos:line="65" pos:column="12"/></name></name> <operator pos:line="65" pos:column="13">=<pos:position pos:line="65" pos:column="14"/></operator> <call><name pos:line="65" pos:column="15">ftell<pos:position pos:line="65" pos:column="20"/></name> <argument_list pos:line="65" pos:column="21">(<argument><expr><name pos:line="65" pos:column="22">fp<pos:position pos:line="65" pos:column="24"/></name></expr></argument>)<pos:position pos:line="65" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="26"/></expr_stmt> <comment type="block" pos:line="65" pos:column="27">/* Mark the start of the real data */</comment>
  <if pos:line="66" pos:column="3">if <condition pos:line="66" pos:column="6">(<expr><name><name pos:line="66" pos:column="7">p<pos:position pos:line="66" pos:column="8"/></name><operator pos:line="66" pos:column="8">-&gt;<pos:position pos:line="66" pos:column="13"/></operator><name pos:line="66" pos:column="10">type<pos:position pos:line="66" pos:column="14"/></name></name> <operator pos:line="66" pos:column="15">==<pos:position pos:line="66" pos:column="17"/></operator> <name pos:line="66" pos:column="18">TYPETEXT<pos:position pos:line="66" pos:column="26"/></name> <operator pos:line="66" pos:column="27">&amp;&amp;<pos:position pos:line="66" pos:column="37"/></operator> <operator pos:line="66" pos:column="30">!<pos:position pos:line="66" pos:column="31"/></operator><name><name pos:line="66" pos:column="31">p<pos:position pos:line="66" pos:column="32"/></name><operator pos:line="66" pos:column="32">-&gt;<pos:position pos:line="66" pos:column="37"/></operator><name pos:line="66" pos:column="34">subtype<pos:position pos:line="66" pos:column="41"/></name></name></expr>)<pos:position pos:line="66" pos:column="42"/></condition><then pos:line="66" pos:column="42">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="67" pos:column="5">p<pos:position pos:line="67" pos:column="6"/></name><operator pos:line="67" pos:column="6">-&gt;<pos:position pos:line="67" pos:column="11"/></operator><name pos:line="67" pos:column="8">subtype<pos:position pos:line="67" pos:column="15"/></name></name> <operator pos:line="67" pos:column="16">=<pos:position pos:line="67" pos:column="17"/></operator> <call><name pos:line="67" pos:column="18">safe_strdup<pos:position pos:line="67" pos:column="29"/></name> <argument_list pos:line="67" pos:column="30">(<argument><expr><literal type="string" pos:line="67" pos:column="31">"plain"<pos:position pos:line="67" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="40"/></expr_stmt></block></then>
  <elseif pos:line="68" pos:column="3">else <if pos:line="68" pos:column="8">if <condition pos:line="68" pos:column="11">(<expr><name><name pos:line="68" pos:column="12">p<pos:position pos:line="68" pos:column="13"/></name><operator pos:line="68" pos:column="13">-&gt;<pos:position pos:line="68" pos:column="18"/></operator><name pos:line="68" pos:column="15">type<pos:position pos:line="68" pos:column="19"/></name></name> <operator pos:line="68" pos:column="20">==<pos:position pos:line="68" pos:column="22"/></operator> <name pos:line="68" pos:column="23">TYPEMESSAGE<pos:position pos:line="68" pos:column="34"/></name> <operator pos:line="68" pos:column="35">&amp;&amp;<pos:position pos:line="68" pos:column="45"/></operator> <operator pos:line="68" pos:column="38">!<pos:position pos:line="68" pos:column="39"/></operator><name><name pos:line="68" pos:column="39">p<pos:position pos:line="68" pos:column="40"/></name><operator pos:line="68" pos:column="40">-&gt;<pos:position pos:line="68" pos:column="45"/></operator><name pos:line="68" pos:column="42">subtype<pos:position pos:line="68" pos:column="49"/></name></name></expr>)<pos:position pos:line="68" pos:column="50"/></condition><then pos:line="68" pos:column="50">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="69" pos:column="5">p<pos:position pos:line="69" pos:column="6"/></name><operator pos:line="69" pos:column="6">-&gt;<pos:position pos:line="69" pos:column="11"/></operator><name pos:line="69" pos:column="8">subtype<pos:position pos:line="69" pos:column="15"/></name></name> <operator pos:line="69" pos:column="16">=<pos:position pos:line="69" pos:column="17"/></operator> <call><name pos:line="69" pos:column="18">safe_strdup<pos:position pos:line="69" pos:column="29"/></name> <argument_list pos:line="69" pos:column="30">(<argument><expr><literal type="string" pos:line="69" pos:column="31">"rfc822"<pos:position pos:line="69" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="41"/></expr_stmt></block></then></if></elseif></if>

  <expr_stmt><expr><call><name pos:line="71" pos:column="3">FREE<pos:position pos:line="71" pos:column="7"/></name> <argument_list pos:line="71" pos:column="8">(<argument><expr><operator pos:line="71" pos:column="9">&amp;<pos:position pos:line="71" pos:column="14"/></operator><name pos:line="71" pos:column="10">line<pos:position pos:line="71" pos:column="14"/></name></expr></argument>)<pos:position pos:line="71" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="16"/></expr_stmt>

  <return pos:line="73" pos:column="3">return <expr><operator pos:line="73" pos:column="10">(<pos:position pos:line="73" pos:column="11"/></operator><name pos:line="73" pos:column="11">p<pos:position pos:line="73" pos:column="12"/></name><operator pos:line="73" pos:column="12">)<pos:position pos:line="73" pos:column="13"/></operator></expr>;<pos:position pos:line="73" pos:column="14"/></return>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
