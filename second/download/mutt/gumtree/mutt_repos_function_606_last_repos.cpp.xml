<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_606_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type> <name pos:line="1" pos:column="8">wcrtomb<pos:position pos:line="1" pos:column="15"/></name> <parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name pos:line="1" pos:column="17">char<pos:position pos:line="1" pos:column="21"/></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">s<pos:position pos:line="1" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="26">wchar_t<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">wc<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">mbstate_t<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">ps<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* We only handle stateless encodings, so we can ignore ps. */</comment>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">Charset_is_utf8<pos:position pos:line="5" pos:column="22"/></name></expr>)<pos:position pos:line="5" pos:column="23"/></condition><then pos:line="5" pos:column="23">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><call><name pos:line="6" pos:column="12">mutt_wctoutf8<pos:position pos:line="6" pos:column="25"/></name> <argument_list pos:line="6" pos:column="26">(<argument><expr><name pos:line="6" pos:column="27">s<pos:position pos:line="6" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="30">wc<pos:position pos:line="6" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="34">MB_LEN_MAX<pos:position pos:line="6" pos:column="44"/></name></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="46"/></return></block></then>
  <elseif pos:line="7" pos:column="3">else <if pos:line="7" pos:column="8">if <condition pos:line="7" pos:column="11">(<expr><name pos:line="7" pos:column="12">charset_from_utf8<pos:position pos:line="7" pos:column="29"/></name> <operator pos:line="7" pos:column="30">!=<pos:position pos:line="7" pos:column="32"/></operator> <call pos:line="7" pos:column="33">(<name pos:line="7" pos:column="34">iconv_t<pos:position pos:line="7" pos:column="41"/></name>)<argument_list pos:line="7" pos:column="42">(<argument><expr><operator pos:line="7" pos:column="43">-<pos:position pos:line="7" pos:column="44"/></operator><literal type="number" pos:line="7" pos:column="44">1<pos:position pos:line="7" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="47"/></condition><then pos:line="7" pos:column="47">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><call><name pos:line="8" pos:column="12">wcrtomb_iconv<pos:position pos:line="8" pos:column="25"/></name> <argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">s<pos:position pos:line="8" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="30">wc<pos:position pos:line="8" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="34">charset_from_utf8<pos:position pos:line="8" pos:column="51"/></name></expr></argument>)<pos:position pos:line="8" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="53"/></return></block></then></if></elseif>
  <else pos:line="9" pos:column="3">else
  <block pos:line="10" pos:column="3">{
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">s<pos:position pos:line="11" pos:column="11"/></name></expr>)<pos:position pos:line="11" pos:column="12"/></condition><then pos:line="11" pos:column="12">
      <block type="pseudo"><return pos:line="12" pos:column="7">return <expr><literal type="number" pos:line="12" pos:column="14">1<pos:position pos:line="12" pos:column="15"/></literal></expr>;<pos:position pos:line="12" pos:column="16"/></return></block></then></if>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">wc<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">&lt;<pos:position pos:line="13" pos:column="16"/></operator> <literal type="number" pos:line="13" pos:column="14">0x100<pos:position pos:line="13" pos:column="19"/></literal></expr>)<pos:position pos:line="13" pos:column="20"/></condition><then pos:line="13" pos:column="20">
    <block pos:line="14" pos:column="5">{
      <expr_stmt><expr><operator pos:line="15" pos:column="7">*<pos:position pos:line="15" pos:column="8"/></operator><name pos:line="15" pos:column="8">s<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <name pos:line="15" pos:column="12">wc<pos:position pos:line="15" pos:column="14"/></name></expr>;<pos:position pos:line="15" pos:column="15"/></expr_stmt>
      <return pos:line="16" pos:column="7">return <expr><literal type="number" pos:line="16" pos:column="14">1<pos:position pos:line="16" pos:column="15"/></literal></expr>;<pos:position pos:line="16" pos:column="16"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="18" pos:column="5">errno<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <name pos:line="18" pos:column="13">EILSEQ<pos:position pos:line="18" pos:column="19"/></name></expr>;<pos:position pos:line="18" pos:column="20"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><call pos:line="19" pos:column="12">(<name pos:line="19" pos:column="13">size_t<pos:position pos:line="19" pos:column="19"/></name>)<argument_list pos:line="19" pos:column="20">(<argument><expr><operator pos:line="19" pos:column="21">-<pos:position pos:line="19" pos:column="22"/></operator><literal type="number" pos:line="19" pos:column="22">1<pos:position pos:line="19" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="25"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></else></if>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
