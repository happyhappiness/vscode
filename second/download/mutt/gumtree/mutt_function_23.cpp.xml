<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_function_23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">mutt_body_handler<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">BODY<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">b<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">STATE<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">s<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">decode<pos:position pos:line="3" pos:column="13"/></name> <init pos:line="3" pos:column="14">= <expr><literal type="number" pos:line="3" pos:column="16">0<pos:position pos:line="3" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">plaintext<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">FILE<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">fp<pos:position pos:line="5" pos:column="11"/></name> <init pos:line="5" pos:column="12">= <expr><name pos:line="5" pos:column="14">NULL<pos:position pos:line="5" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">tempfile<pos:position pos:line="6" pos:column="16"/></name><index pos:line="6" pos:column="16">[<expr><name pos:line="6" pos:column="17">_POSIX_PATH_MAX<pos:position pos:line="6" pos:column="32"/></name></expr>]<pos:position pos:line="6" pos:column="33"/></index></name></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">handler_t<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">handler<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><name pos:line="7" pos:column="23">NULL<pos:position pos:line="7" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">long<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">tmpoffset<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><literal type="number" pos:line="8" pos:column="20">0<pos:position pos:line="8" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">tmplength<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><literal type="number" pos:line="9" pos:column="22">0<pos:position pos:line="9" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name></type> <name><name pos:line="10" pos:column="8">type<pos:position pos:line="10" pos:column="12"/></name><index pos:line="10" pos:column="12">[<expr><name pos:line="10" pos:column="13">STRING<pos:position pos:line="10" pos:column="19"/></name></expr>]<pos:position pos:line="10" pos:column="20"/></index></name></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">oflags<pos:position pos:line="12" pos:column="13"/></name> <init pos:line="12" pos:column="14">= <expr><name><name pos:line="12" pos:column="16">s<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">-&gt;<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="19">flags<pos:position pos:line="12" pos:column="24"/></name></name></expr></init></decl>;<pos:position pos:line="12" pos:column="25"/></decl_stmt>
  
  <comment type="block" pos:line="14" pos:column="3">/* first determine which handler to use to process this part */</comment>

  <expr_stmt><expr><call><name pos:line="16" pos:column="3">snprintf<pos:position pos:line="16" pos:column="11"/></name> <argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">type<pos:position pos:line="16" pos:column="17"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="19">sizeof <argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">type<pos:position pos:line="16" pos:column="31"/></name></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="34">"%s/%s"<pos:position pos:line="16" pos:column="41"/></literal></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="43">TYPE<pos:position pos:line="16" pos:column="47"/></name> <argument_list pos:line="16" pos:column="48">(<argument><expr><name pos:line="16" pos:column="49">b<pos:position pos:line="16" pos:column="50"/></name></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="53">b<pos:position pos:line="16" pos:column="54"/></name><operator pos:line="16" pos:column="54">-&gt;<pos:position pos:line="16" pos:column="59"/></operator><name pos:line="16" pos:column="56">subtype<pos:position pos:line="16" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="65"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><call><name pos:line="17" pos:column="7">mutt_is_autoview<pos:position pos:line="17" pos:column="23"/></name> <argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">b<pos:position pos:line="17" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="28">type<pos:position pos:line="17" pos:column="32"/></name></expr></argument>)<pos:position pos:line="17" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="34"/></condition><then pos:line="17" pos:column="34">
  <block pos:line="18" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">rfc1524_entry<pos:position pos:line="19" pos:column="18"/></name> <modifier pos:line="19" pos:column="19">*<pos:position pos:line="19" pos:column="20"/></modifier></type><name pos:line="19" pos:column="20">entry<pos:position pos:line="19" pos:column="25"/></name> <init pos:line="19" pos:column="26">= <expr><call><name pos:line="19" pos:column="28">rfc1524_new_entry<pos:position pos:line="19" pos:column="45"/></name> <argument_list pos:line="19" pos:column="46">()<pos:position pos:line="19" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="49"/></decl_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name pos:line="21" pos:column="9">rfc1524_mailcap_lookup<pos:position pos:line="21" pos:column="31"/></name> <argument_list pos:line="21" pos:column="32">(<argument><expr><name pos:line="21" pos:column="33">b<pos:position pos:line="21" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="36">type<pos:position pos:line="21" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="42">entry<pos:position pos:line="21" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="49">M_AUTOVIEW<pos:position pos:line="21" pos:column="59"/></name></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="61"/></condition><then pos:line="21" pos:column="61">
    <block pos:line="22" pos:column="5">{
      <expr_stmt><expr><name pos:line="23" pos:column="7">handler<pos:position pos:line="23" pos:column="14"/></name>   <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">autoview_handler<pos:position pos:line="23" pos:column="35"/></name></expr>;<pos:position pos:line="23" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="24" pos:column="7">s<pos:position pos:line="24" pos:column="8"/></name><operator pos:line="24" pos:column="8">-&gt;<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="10">flags<pos:position pos:line="24" pos:column="15"/></name></name> <operator pos:line="24" pos:column="16">&amp;=<pos:position pos:line="24" pos:column="22"/></operator> <operator pos:line="24" pos:column="19">~<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="20">M_CHARCONV<pos:position pos:line="24" pos:column="30"/></name></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">rfc1524_free_entry<pos:position pos:line="26" pos:column="23"/></name> <argument_list pos:line="26" pos:column="24">(<argument><expr><operator pos:line="26" pos:column="25">&amp;<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="26">entry<pos:position pos:line="26" pos:column="31"/></name></expr></argument>)<pos:position pos:line="26" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="27" pos:column="4"/></block></then>
  <elseif pos:line="28" pos:column="3">else <if pos:line="28" pos:column="8">if <condition pos:line="28" pos:column="11">(<expr><name><name pos:line="28" pos:column="12">b<pos:position pos:line="28" pos:column="13"/></name><operator pos:line="28" pos:column="13">-&gt;<pos:position pos:line="28" pos:column="18"/></operator><name pos:line="28" pos:column="15">type<pos:position pos:line="28" pos:column="19"/></name></name> <operator pos:line="28" pos:column="20">==<pos:position pos:line="28" pos:column="22"/></operator> <name pos:line="28" pos:column="23">TYPETEXT<pos:position pos:line="28" pos:column="31"/></name></expr>)<pos:position pos:line="28" pos:column="32"/></condition><then pos:line="28" pos:column="32">
  <block pos:line="29" pos:column="3">{
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><call><name pos:line="30" pos:column="9">ascii_strcasecmp<pos:position pos:line="30" pos:column="25"/></name> <argument_list pos:line="30" pos:column="26">(<argument><expr><literal type="string" pos:line="30" pos:column="27">"plain"<pos:position pos:line="30" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="36">b<pos:position pos:line="30" pos:column="37"/></name><operator pos:line="30" pos:column="37">-&gt;<pos:position pos:line="30" pos:column="42"/></operator><name pos:line="30" pos:column="39">subtype<pos:position pos:line="30" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="47"/></argument_list></call> <operator pos:line="30" pos:column="48">==<pos:position pos:line="30" pos:column="50"/></operator> <literal type="number" pos:line="30" pos:column="51">0<pos:position pos:line="30" pos:column="52"/></literal></expr>)<pos:position pos:line="30" pos:column="53"/></condition><then pos:line="30" pos:column="53">
    <block pos:line="31" pos:column="5">{
      <comment type="block" pos:line="32" pos:column="7">/* avoid copying this part twice since removing the transfer-encoding is
       * the only operation needed.
       */</comment>
      <if pos:line="35" pos:column="7">if <condition pos:line="35" pos:column="10">(<expr><call><name pos:line="35" pos:column="11">ascii_strcasecmp<pos:position pos:line="35" pos:column="27"/></name> <argument_list pos:line="35" pos:column="28">(<argument><expr><literal type="string" pos:line="35" pos:column="29">"flowed"<pos:position pos:line="35" pos:column="37"/></literal></expr></argument>, <argument><expr><call><name pos:line="35" pos:column="39">mutt_get_parameter<pos:position pos:line="35" pos:column="57"/></name> <argument_list pos:line="35" pos:column="58">(<argument><expr><literal type="string" pos:line="35" pos:column="59">"format"<pos:position pos:line="35" pos:column="67"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="69">b<pos:position pos:line="35" pos:column="70"/></name><operator pos:line="35" pos:column="70">-&gt;<pos:position pos:line="35" pos:column="75"/></operator><name pos:line="35" pos:column="72">parameter<pos:position pos:line="35" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="83"/></argument_list></call> <operator pos:line="35" pos:column="84">==<pos:position pos:line="35" pos:column="86"/></operator> <literal type="number" pos:line="35" pos:column="87">0<pos:position pos:line="35" pos:column="88"/></literal></expr>)<pos:position pos:line="35" pos:column="89"/></condition><then pos:line="35" pos:column="89">
	<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="9">handler<pos:position pos:line="36" pos:column="16"/></name> <operator pos:line="36" pos:column="17">=<pos:position pos:line="36" pos:column="18"/></operator> <name pos:line="36" pos:column="19">text_plain_flowed_handler<pos:position pos:line="36" pos:column="44"/></name></expr>;<pos:position pos:line="36" pos:column="45"/></expr_stmt></block></then>
      <else pos:line="37" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="9">plaintext<pos:position pos:line="38" pos:column="18"/></name> <operator pos:line="38" pos:column="19">=<pos:position pos:line="38" pos:column="20"/></operator> <literal type="number" pos:line="38" pos:column="21">1<pos:position pos:line="38" pos:column="22"/></literal></expr>;<pos:position pos:line="38" pos:column="23"/></expr_stmt></block></else></if>
    }<pos:position pos:line="39" pos:column="6"/></block></then>
    <elseif pos:line="40" pos:column="5">else <if pos:line="40" pos:column="10">if <condition pos:line="40" pos:column="13">(<expr><call><name pos:line="40" pos:column="14">ascii_strcasecmp<pos:position pos:line="40" pos:column="30"/></name> <argument_list pos:line="40" pos:column="31">(<argument><expr><literal type="string" pos:line="40" pos:column="32">"enriched"<pos:position pos:line="40" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="44">b<pos:position pos:line="40" pos:column="45"/></name><operator pos:line="40" pos:column="45">-&gt;<pos:position pos:line="40" pos:column="50"/></operator><name pos:line="40" pos:column="47">subtype<pos:position pos:line="40" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="55"/></argument_list></call> <operator pos:line="40" pos:column="56">==<pos:position pos:line="40" pos:column="58"/></operator> <literal type="number" pos:line="40" pos:column="59">0<pos:position pos:line="40" pos:column="60"/></literal></expr>)<pos:position pos:line="40" pos:column="61"/></condition><then pos:line="40" pos:column="61">
      <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="7">handler<pos:position pos:line="41" pos:column="14"/></name> <operator pos:line="41" pos:column="15">=<pos:position pos:line="41" pos:column="16"/></operator> <name pos:line="41" pos:column="17">text_enriched_handler<pos:position pos:line="41" pos:column="38"/></name></expr>;<pos:position pos:line="41" pos:column="39"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="42" pos:column="5">else <if pos:line="42" pos:column="10">if <condition pos:line="42" pos:column="13">(<expr><call><name pos:line="42" pos:column="14">ascii_strcasecmp<pos:position pos:line="42" pos:column="30"/></name> <argument_list pos:line="42" pos:column="31">(<argument><expr><literal type="string" pos:line="42" pos:column="32">"rfc822-headers"<pos:position pos:line="42" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="50">b<pos:position pos:line="42" pos:column="51"/></name><operator pos:line="42" pos:column="51">-&gt;<pos:position pos:line="42" pos:column="56"/></operator><name pos:line="42" pos:column="53">subtype<pos:position pos:line="42" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="61"/></argument_list></call> <operator pos:line="42" pos:column="62">==<pos:position pos:line="42" pos:column="64"/></operator> <literal type="number" pos:line="42" pos:column="65">0<pos:position pos:line="42" pos:column="66"/></literal></expr>)<pos:position pos:line="42" pos:column="67"/></condition><then pos:line="42" pos:column="67">
      <block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="7">plaintext<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">=<pos:position pos:line="43" pos:column="18"/></operator> <literal type="number" pos:line="43" pos:column="19">1<pos:position pos:line="43" pos:column="20"/></literal></expr>;<pos:position pos:line="43" pos:column="21"/></expr_stmt></block></then></if></elseif></if>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if></elseif>
  <elseif pos:line="45" pos:column="3">else <if pos:line="45" pos:column="8">if <condition pos:line="45" pos:column="11">(<expr><name><name pos:line="45" pos:column="12">b<pos:position pos:line="45" pos:column="13"/></name><operator pos:line="45" pos:column="13">-&gt;<pos:position pos:line="45" pos:column="18"/></operator><name pos:line="45" pos:column="15">type<pos:position pos:line="45" pos:column="19"/></name></name> <operator pos:line="45" pos:column="20">==<pos:position pos:line="45" pos:column="22"/></operator> <name pos:line="45" pos:column="23">TYPEMESSAGE<pos:position pos:line="45" pos:column="34"/></name></expr>)<pos:position pos:line="45" pos:column="35"/></condition><then pos:line="45" pos:column="35">
  <block pos:line="46" pos:column="3">{
    <if pos:line="47" pos:column="5">if<condition pos:line="47" pos:column="7">(<expr><call><name pos:line="47" pos:column="8">mutt_is_message_type<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">(<argument><expr><name><name pos:line="47" pos:column="29">b<pos:position pos:line="47" pos:column="30"/></name><operator pos:line="47" pos:column="30">-&gt;<pos:position pos:line="47" pos:column="35"/></operator><name pos:line="47" pos:column="32">type<pos:position pos:line="47" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="38">b<pos:position pos:line="47" pos:column="39"/></name><operator pos:line="47" pos:column="39">-&gt;<pos:position pos:line="47" pos:column="44"/></operator><name pos:line="47" pos:column="41">subtype<pos:position pos:line="47" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="50"/></condition><then pos:line="47" pos:column="50">
      <block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="7">handler<pos:position pos:line="48" pos:column="14"/></name> <operator pos:line="48" pos:column="15">=<pos:position pos:line="48" pos:column="16"/></operator> <name pos:line="48" pos:column="17">message_handler<pos:position pos:line="48" pos:column="32"/></name></expr>;<pos:position pos:line="48" pos:column="33"/></expr_stmt></block></then>
    <elseif pos:line="49" pos:column="5">else <if pos:line="49" pos:column="10">if <condition pos:line="49" pos:column="13">(<expr><operator pos:line="49" pos:column="14">!<pos:position pos:line="49" pos:column="15"/></operator><call><name pos:line="49" pos:column="15">ascii_strcasecmp<pos:position pos:line="49" pos:column="31"/></name> <argument_list pos:line="49" pos:column="32">(<argument><expr><literal type="string" pos:line="49" pos:column="33">"delivery-status"<pos:position pos:line="49" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="52">b<pos:position pos:line="49" pos:column="53"/></name><operator pos:line="49" pos:column="53">-&gt;<pos:position pos:line="49" pos:column="58"/></operator><name pos:line="49" pos:column="55">subtype<pos:position pos:line="49" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="64"/></condition><then pos:line="49" pos:column="64">
      <block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="7">plaintext<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">=<pos:position pos:line="50" pos:column="18"/></operator> <literal type="number" pos:line="50" pos:column="19">1<pos:position pos:line="50" pos:column="20"/></literal></expr>;<pos:position pos:line="50" pos:column="21"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="51" pos:column="5">else <if pos:line="51" pos:column="10">if <condition pos:line="51" pos:column="13">(<expr><operator pos:line="51" pos:column="14">!<pos:position pos:line="51" pos:column="15"/></operator><call><name pos:line="51" pos:column="15">ascii_strcasecmp<pos:position pos:line="51" pos:column="31"/></name> <argument_list pos:line="51" pos:column="32">(<argument><expr><literal type="string" pos:line="51" pos:column="33">"external-body"<pos:position pos:line="51" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="50">b<pos:position pos:line="51" pos:column="51"/></name><operator pos:line="51" pos:column="51">-&gt;<pos:position pos:line="51" pos:column="56"/></operator><name pos:line="51" pos:column="53">subtype<pos:position pos:line="51" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="62"/></condition><then pos:line="51" pos:column="62">
      <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="7">handler<pos:position pos:line="52" pos:column="14"/></name> <operator pos:line="52" pos:column="15">=<pos:position pos:line="52" pos:column="16"/></operator> <name pos:line="52" pos:column="17">external_body_handler<pos:position pos:line="52" pos:column="38"/></name></expr>;<pos:position pos:line="52" pos:column="39"/></expr_stmt></block></then></if></elseif></if>
  }<pos:position pos:line="53" pos:column="4"/></block></then></if></elseif>
  <elseif pos:line="54" pos:column="3">else <if pos:line="54" pos:column="8">if <condition pos:line="54" pos:column="11">(<expr><name><name pos:line="54" pos:column="12">b<pos:position pos:line="54" pos:column="13"/></name><operator pos:line="54" pos:column="13">-&gt;<pos:position pos:line="54" pos:column="18"/></operator><name pos:line="54" pos:column="15">type<pos:position pos:line="54" pos:column="19"/></name></name> <operator pos:line="54" pos:column="20">==<pos:position pos:line="54" pos:column="22"/></operator> <name pos:line="54" pos:column="23">TYPEMULTIPART<pos:position pos:line="54" pos:column="36"/></name></expr>)<pos:position pos:line="54" pos:column="37"/></condition><then pos:line="54" pos:column="37">
  <block pos:line="55" pos:column="3">{



<cpp:ifdef pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">ifdef<pos:position pos:line="59" pos:column="7"/></cpp:directive> <name pos:line="59" pos:column="8">HAVE_PGP<pos:position pos:line="59" pos:column="16"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="60" pos:column="5">char<pos:position pos:line="60" pos:column="9"/></name> <modifier pos:line="60" pos:column="10">*<pos:position pos:line="60" pos:column="11"/></modifier></type><name pos:line="60" pos:column="11">p<pos:position pos:line="60" pos:column="12"/></name></decl>;<pos:position pos:line="60" pos:column="13"/></decl_stmt>
<cpp:endif pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">endif<pos:position pos:line="61" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="61" pos:column="8">/* HAVE_PGP */</comment>



    <if pos:line="65" pos:column="5">if <condition pos:line="65" pos:column="8">(<expr><call><name pos:line="65" pos:column="9">ascii_strcasecmp<pos:position pos:line="65" pos:column="25"/></name> <argument_list pos:line="65" pos:column="26">(<argument><expr><literal type="string" pos:line="65" pos:column="27">"alternative"<pos:position pos:line="65" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="42">b<pos:position pos:line="65" pos:column="43"/></name><operator pos:line="65" pos:column="43">-&gt;<pos:position pos:line="65" pos:column="48"/></operator><name pos:line="65" pos:column="45">subtype<pos:position pos:line="65" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="53"/></argument_list></call> <operator pos:line="65" pos:column="54">==<pos:position pos:line="65" pos:column="56"/></operator> <literal type="number" pos:line="65" pos:column="57">0<pos:position pos:line="65" pos:column="58"/></literal></expr>)<pos:position pos:line="65" pos:column="59"/></condition><then pos:line="65" pos:column="59">
      <block type="pseudo"><expr_stmt><expr><name pos:line="66" pos:column="7">handler<pos:position pos:line="66" pos:column="14"/></name> <operator pos:line="66" pos:column="15">=<pos:position pos:line="66" pos:column="16"/></operator> <name pos:line="66" pos:column="17">alternative_handler<pos:position pos:line="66" pos:column="36"/></name></expr>;<pos:position pos:line="66" pos:column="37"/></expr_stmt></block></then>



<cpp:ifdef pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">ifdef<pos:position pos:line="70" pos:column="7"/></cpp:directive> <name pos:line="70" pos:column="8">HAVE_PGP<pos:position pos:line="70" pos:column="16"/></name></cpp:ifdef>
    <elseif pos:line="71" pos:column="5">else <if pos:line="71" pos:column="10">if <condition pos:line="71" pos:column="13">(<expr><call><name pos:line="71" pos:column="14">ascii_strcasecmp<pos:position pos:line="71" pos:column="30"/></name> <argument_list pos:line="71" pos:column="31">(<argument><expr><literal type="string" pos:line="71" pos:column="32">"signed"<pos:position pos:line="71" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="42">b<pos:position pos:line="71" pos:column="43"/></name><operator pos:line="71" pos:column="43">-&gt;<pos:position pos:line="71" pos:column="48"/></operator><name pos:line="71" pos:column="45">subtype<pos:position pos:line="71" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="53"/></argument_list></call> <operator pos:line="71" pos:column="54">==<pos:position pos:line="71" pos:column="56"/></operator> <literal type="number" pos:line="71" pos:column="57">0<pos:position pos:line="71" pos:column="58"/></literal></expr>)<pos:position pos:line="71" pos:column="59"/></condition><then pos:line="71" pos:column="59">
    <block pos:line="72" pos:column="5">{
      <expr_stmt><expr><name pos:line="73" pos:column="7">p<pos:position pos:line="73" pos:column="8"/></name> <operator pos:line="73" pos:column="9">=<pos:position pos:line="73" pos:column="10"/></operator> <call><name pos:line="73" pos:column="11">mutt_get_parameter<pos:position pos:line="73" pos:column="29"/></name> <argument_list pos:line="73" pos:column="30">(<argument><expr><literal type="string" pos:line="73" pos:column="31">"protocol"<pos:position pos:line="73" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="43">b<pos:position pos:line="73" pos:column="44"/></name><operator pos:line="73" pos:column="44">-&gt;<pos:position pos:line="73" pos:column="49"/></operator><name pos:line="73" pos:column="46">parameter<pos:position pos:line="73" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="57"/></expr_stmt>

      <if pos:line="75" pos:column="7">if <condition pos:line="75" pos:column="10">(<expr><operator pos:line="75" pos:column="11">!<pos:position pos:line="75" pos:column="12"/></operator><name pos:line="75" pos:column="12">p<pos:position pos:line="75" pos:column="13"/></name></expr>)<pos:position pos:line="75" pos:column="14"/></condition><then pos:line="75" pos:column="14">
        <block type="pseudo"><decl_stmt><decl><type><name pos:line="76" pos:column="9">mutt_error<pos:position pos:line="76" pos:column="19"/></name></type> <name pos:line="76" pos:column="20">_<pos:position pos:line="76" pos:column="21"/></name><argument_list pos:line="76" pos:column="21">(<argument><expr><literal type="string" pos:line="76" pos:column="22">"Error: multipart/signed has no protocol."<pos:position pos:line="76" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="65"/></argument_list></decl>;<pos:position pos:line="76" pos:column="66"/></decl_stmt></block></then>
      <elseif pos:line="77" pos:column="7">else <if pos:line="77" pos:column="12">if <condition pos:line="77" pos:column="15">(<expr><call><name pos:line="77" pos:column="16">ascii_strcasecmp<pos:position pos:line="77" pos:column="32"/></name> <argument_list pos:line="77" pos:column="33">(<argument><expr><literal type="string" pos:line="77" pos:column="34">"application/pgp-signature"<pos:position pos:line="77" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="63">p<pos:position pos:line="77" pos:column="64"/></name></expr></argument>)<pos:position pos:line="77" pos:column="65"/></argument_list></call> <operator pos:line="77" pos:column="66">==<pos:position pos:line="77" pos:column="68"/></operator> <literal type="number" pos:line="77" pos:column="69">0<pos:position pos:line="77" pos:column="70"/></literal> <operator pos:line="77" pos:column="71">||<pos:position pos:line="77" pos:column="73"/></operator>
	       <call><name pos:line="78" pos:column="16">ascii_strcasecmp<pos:position pos:line="78" pos:column="32"/></name> <argument_list pos:line="78" pos:column="33">(<argument><expr><literal type="string" pos:line="78" pos:column="34">"multipart/mixed"<pos:position pos:line="78" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="53">p<pos:position pos:line="78" pos:column="54"/></name></expr></argument>)<pos:position pos:line="78" pos:column="55"/></argument_list></call> <operator pos:line="78" pos:column="56">==<pos:position pos:line="78" pos:column="58"/></operator> <literal type="number" pos:line="78" pos:column="59">0<pos:position pos:line="78" pos:column="60"/></literal></expr>)<pos:position pos:line="78" pos:column="61"/></condition><then pos:line="78" pos:column="61">
      <block pos:line="79" pos:column="7">{
	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name><name pos:line="80" pos:column="13">s<pos:position pos:line="80" pos:column="14"/></name><operator pos:line="80" pos:column="14">-&gt;<pos:position pos:line="80" pos:column="19"/></operator><name pos:line="80" pos:column="16">flags<pos:position pos:line="80" pos:column="21"/></name></name> <operator pos:line="80" pos:column="22">&amp;<pos:position pos:line="80" pos:column="27"/></operator> <name pos:line="80" pos:column="24">M_VERIFY<pos:position pos:line="80" pos:column="32"/></name></expr>)<pos:position pos:line="80" pos:column="33"/></condition><then pos:line="80" pos:column="33">
	  <block type="pseudo"><expr_stmt><expr><name pos:line="81" pos:column="11">handler<pos:position pos:line="81" pos:column="18"/></name> <operator pos:line="81" pos:column="19">=<pos:position pos:line="81" pos:column="20"/></operator> <name pos:line="81" pos:column="21">pgp_signed_handler<pos:position pos:line="81" pos:column="39"/></name></expr>;<pos:position pos:line="81" pos:column="40"/></expr_stmt></block></then></if>
      }<pos:position pos:line="82" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="83" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="84" pos:column="5">else <if pos:line="84" pos:column="10">if <condition pos:line="84" pos:column="13">(<expr><call><name pos:line="84" pos:column="14">ascii_strcasecmp<pos:position pos:line="84" pos:column="30"/></name> <argument_list pos:line="84" pos:column="31">(<argument><expr><literal type="string" pos:line="84" pos:column="32">"encrypted"<pos:position pos:line="84" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="45">b<pos:position pos:line="84" pos:column="46"/></name><operator pos:line="84" pos:column="46">-&gt;<pos:position pos:line="84" pos:column="51"/></operator><name pos:line="84" pos:column="48">subtype<pos:position pos:line="84" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="56"/></argument_list></call> <operator pos:line="84" pos:column="57">==<pos:position pos:line="84" pos:column="59"/></operator> <literal type="number" pos:line="84" pos:column="60">0<pos:position pos:line="84" pos:column="61"/></literal></expr>)<pos:position pos:line="84" pos:column="62"/></condition><then pos:line="84" pos:column="62">
    <block pos:line="85" pos:column="5">{
      <expr_stmt><expr><name pos:line="86" pos:column="7">p<pos:position pos:line="86" pos:column="8"/></name> <operator pos:line="86" pos:column="9">=<pos:position pos:line="86" pos:column="10"/></operator> <call><name pos:line="86" pos:column="11">mutt_get_parameter<pos:position pos:line="86" pos:column="29"/></name> <argument_list pos:line="86" pos:column="30">(<argument><expr><literal type="string" pos:line="86" pos:column="31">"protocol"<pos:position pos:line="86" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="43">b<pos:position pos:line="86" pos:column="44"/></name><operator pos:line="86" pos:column="44">-&gt;<pos:position pos:line="86" pos:column="49"/></operator><name pos:line="86" pos:column="46">parameter<pos:position pos:line="86" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="86" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="57"/></expr_stmt>

      <if pos:line="88" pos:column="7">if <condition pos:line="88" pos:column="10">(<expr><operator pos:line="88" pos:column="11">!<pos:position pos:line="88" pos:column="12"/></operator><name pos:line="88" pos:column="12">p<pos:position pos:line="88" pos:column="13"/></name></expr>)<pos:position pos:line="88" pos:column="14"/></condition><then pos:line="88" pos:column="14">
        <block type="pseudo"><decl_stmt><decl><type><name pos:line="89" pos:column="9">mutt_error<pos:position pos:line="89" pos:column="19"/></name></type> <name pos:line="89" pos:column="20">_<pos:position pos:line="89" pos:column="21"/></name><argument_list pos:line="89" pos:column="21">(<argument><expr><literal type="string" pos:line="89" pos:column="22">"Error: multipart/encrypted has no protocol parameter!"<pos:position pos:line="89" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="78"/></argument_list></decl>;<pos:position pos:line="89" pos:column="79"/></decl_stmt></block></then>
      <elseif pos:line="90" pos:column="7">else <if pos:line="90" pos:column="12">if <condition pos:line="90" pos:column="15">(<expr><call><name pos:line="90" pos:column="16">ascii_strcasecmp<pos:position pos:line="90" pos:column="32"/></name> <argument_list pos:line="90" pos:column="33">(<argument><expr><literal type="string" pos:line="90" pos:column="34">"application/pgp-encrypted"<pos:position pos:line="90" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="63">p<pos:position pos:line="90" pos:column="64"/></name></expr></argument>)<pos:position pos:line="90" pos:column="65"/></argument_list></call> <operator pos:line="90" pos:column="66">==<pos:position pos:line="90" pos:column="68"/></operator> <literal type="number" pos:line="90" pos:column="69">0<pos:position pos:line="90" pos:column="70"/></literal></expr>)<pos:position pos:line="90" pos:column="71"/></condition><then pos:line="90" pos:column="71">
        <block type="pseudo"><expr_stmt><expr><name pos:line="91" pos:column="9">handler<pos:position pos:line="91" pos:column="16"/></name> <operator pos:line="91" pos:column="17">=<pos:position pos:line="91" pos:column="18"/></operator> <name pos:line="91" pos:column="19">pgp_encrypted_handler<pos:position pos:line="91" pos:column="40"/></name></expr>;<pos:position pos:line="91" pos:column="41"/></expr_stmt></block></then></if></elseif></if>
    }<pos:position pos:line="92" pos:column="6"/></block></then></if></elseif></if>
<cpp:endif pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">endif<pos:position pos:line="93" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="93" pos:column="8">/* HAVE_PGP */</comment>



    <if pos:line="97" pos:column="5">if <condition pos:line="97" pos:column="8">(<expr><operator pos:line="97" pos:column="9">!<pos:position pos:line="97" pos:column="10"/></operator><name pos:line="97" pos:column="10">handler<pos:position pos:line="97" pos:column="17"/></name></expr>)<pos:position pos:line="97" pos:column="18"/></condition><then pos:line="97" pos:column="18">
      <block type="pseudo"><expr_stmt><expr><name pos:line="98" pos:column="7">handler<pos:position pos:line="98" pos:column="14"/></name> <operator pos:line="98" pos:column="15">=<pos:position pos:line="98" pos:column="16"/></operator> <name pos:line="98" pos:column="17">multipart_handler<pos:position pos:line="98" pos:column="34"/></name></expr>;<pos:position pos:line="98" pos:column="35"/></expr_stmt></block></then></if>
  }<pos:position pos:line="99" pos:column="4"/></block></then></if></elseif>



<cpp:ifdef pos:line="103" pos:column="1">#<cpp:directive pos:line="103" pos:column="2">ifdef<pos:position pos:line="103" pos:column="7"/></cpp:directive> <name pos:line="103" pos:column="8">HAVE_PGP<pos:position pos:line="103" pos:column="16"/></name></cpp:ifdef>
  <elseif pos:line="104" pos:column="3">else <if pos:line="104" pos:column="8">if <condition pos:line="104" pos:column="11">(<expr><name><name pos:line="104" pos:column="12">b<pos:position pos:line="104" pos:column="13"/></name><operator pos:line="104" pos:column="13">-&gt;<pos:position pos:line="104" pos:column="18"/></operator><name pos:line="104" pos:column="15">type<pos:position pos:line="104" pos:column="19"/></name></name> <operator pos:line="104" pos:column="20">==<pos:position pos:line="104" pos:column="22"/></operator> <name pos:line="104" pos:column="23">TYPEAPPLICATION<pos:position pos:line="104" pos:column="38"/></name></expr>)<pos:position pos:line="104" pos:column="39"/></condition><then pos:line="104" pos:column="39">
  <block pos:line="105" pos:column="3">{
    <if pos:line="106" pos:column="5">if <condition pos:line="106" pos:column="8">(<expr><call><name pos:line="106" pos:column="9">mutt_is_application_pgp<pos:position pos:line="106" pos:column="32"/></name><argument_list pos:line="106" pos:column="32">(<argument><expr><name pos:line="106" pos:column="33">b<pos:position pos:line="106" pos:column="34"/></name></expr></argument>)<pos:position pos:line="106" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="106" pos:column="36"/></condition><then pos:line="106" pos:column="36">
      <block type="pseudo"><expr_stmt><expr><name pos:line="107" pos:column="7">handler<pos:position pos:line="107" pos:column="14"/></name> <operator pos:line="107" pos:column="15">=<pos:position pos:line="107" pos:column="16"/></operator> <name pos:line="107" pos:column="17">pgp_application_pgp_handler<pos:position pos:line="107" pos:column="44"/></name></expr>;<pos:position pos:line="107" pos:column="45"/></expr_stmt></block></then></if>
  }<pos:position pos:line="108" pos:column="4"/></block></then></if></elseif></if>
<cpp:endif pos:line="109" pos:column="1">#<cpp:directive pos:line="109" pos:column="2">endif<pos:position pos:line="109" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="109" pos:column="8">/* HAVE_PGP */</comment>



  <if pos:line="113" pos:column="3">if <condition pos:line="113" pos:column="6">(<expr><name pos:line="113" pos:column="7">plaintext<pos:position pos:line="113" pos:column="16"/></name> <operator pos:line="113" pos:column="17">||<pos:position pos:line="113" pos:column="19"/></operator> <name pos:line="113" pos:column="20">handler<pos:position pos:line="113" pos:column="27"/></name></expr>)<pos:position pos:line="113" pos:column="28"/></condition><then pos:line="113" pos:column="28">
  <block pos:line="114" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="115" pos:column="5">fseek<pos:position pos:line="115" pos:column="10"/></name> <argument_list pos:line="115" pos:column="11">(<argument><expr><name><name pos:line="115" pos:column="12">s<pos:position pos:line="115" pos:column="13"/></name><operator pos:line="115" pos:column="13">-&gt;<pos:position pos:line="115" pos:column="18"/></operator><name pos:line="115" pos:column="15">fpin<pos:position pos:line="115" pos:column="19"/></name></name></expr></argument>, <argument><expr><name><name pos:line="115" pos:column="21">b<pos:position pos:line="115" pos:column="22"/></name><operator pos:line="115" pos:column="22">-&gt;<pos:position pos:line="115" pos:column="27"/></operator><name pos:line="115" pos:column="24">offset<pos:position pos:line="115" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="115" pos:column="32">0<pos:position pos:line="115" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="35"/></expr_stmt>

    <comment type="block" pos:line="117" pos:column="5">/* see if we need to decode this part before processing it */</comment>
    <if pos:line="118" pos:column="5">if <condition pos:line="118" pos:column="8">(<expr><name><name pos:line="118" pos:column="9">b<pos:position pos:line="118" pos:column="10"/></name><operator pos:line="118" pos:column="10">-&gt;<pos:position pos:line="118" pos:column="15"/></operator><name pos:line="118" pos:column="12">encoding<pos:position pos:line="118" pos:column="20"/></name></name> <operator pos:line="118" pos:column="21">==<pos:position pos:line="118" pos:column="23"/></operator> <name pos:line="118" pos:column="24">ENCBASE64<pos:position pos:line="118" pos:column="33"/></name> <operator pos:line="118" pos:column="34">||<pos:position pos:line="118" pos:column="36"/></operator> <name><name pos:line="118" pos:column="37">b<pos:position pos:line="118" pos:column="38"/></name><operator pos:line="118" pos:column="38">-&gt;<pos:position pos:line="118" pos:column="43"/></operator><name pos:line="118" pos:column="40">encoding<pos:position pos:line="118" pos:column="48"/></name></name> <operator pos:line="118" pos:column="49">==<pos:position pos:line="118" pos:column="51"/></operator> <name pos:line="118" pos:column="52">ENCQUOTEDPRINTABLE<pos:position pos:line="118" pos:column="70"/></name> <operator pos:line="118" pos:column="71">||<pos:position pos:line="118" pos:column="73"/></operator>
	<name><name pos:line="119" pos:column="9">b<pos:position pos:line="119" pos:column="10"/></name><operator pos:line="119" pos:column="10">-&gt;<pos:position pos:line="119" pos:column="15"/></operator><name pos:line="119" pos:column="12">encoding<pos:position pos:line="119" pos:column="20"/></name></name> <operator pos:line="119" pos:column="21">==<pos:position pos:line="119" pos:column="23"/></operator> <name pos:line="119" pos:column="24">ENCUUENCODED<pos:position pos:line="119" pos:column="36"/></name> <operator pos:line="119" pos:column="37">||<pos:position pos:line="119" pos:column="39"/></operator> <name pos:line="119" pos:column="40">plaintext<pos:position pos:line="119" pos:column="49"/></name> <operator pos:line="119" pos:column="50">||<pos:position pos:line="119" pos:column="52"/></operator> 
	<call><name pos:line="120" pos:column="9">mutt_is_text_type<pos:position pos:line="120" pos:column="26"/></name> <argument_list pos:line="120" pos:column="27">(<argument><expr><name><name pos:line="120" pos:column="28">b<pos:position pos:line="120" pos:column="29"/></name><operator pos:line="120" pos:column="29">-&gt;<pos:position pos:line="120" pos:column="34"/></operator><name pos:line="120" pos:column="31">type<pos:position pos:line="120" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="37">b<pos:position pos:line="120" pos:column="38"/></name><operator pos:line="120" pos:column="38">-&gt;<pos:position pos:line="120" pos:column="43"/></operator><name pos:line="120" pos:column="40">subtype<pos:position pos:line="120" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="120" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="120" pos:column="49"/></condition><then pos:line="120" pos:column="49">	<comment type="block" pos:line="120" pos:column="57">/* text subtypes may
							 * require character
							 * set conversion even
							 * with 8bit encoding.
							 */</comment>
    <block pos:line="125" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="126" pos:column="7">int<pos:position pos:line="126" pos:column="10"/></name></type> <name pos:line="126" pos:column="11">origType<pos:position pos:line="126" pos:column="19"/></name> <init pos:line="126" pos:column="20">= <expr><name><name pos:line="126" pos:column="22">b<pos:position pos:line="126" pos:column="23"/></name><operator pos:line="126" pos:column="23">-&gt;<pos:position pos:line="126" pos:column="28"/></operator><name pos:line="126" pos:column="25">type<pos:position pos:line="126" pos:column="29"/></name></name></expr></init></decl>;<pos:position pos:line="126" pos:column="30"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="127" pos:column="7">char<pos:position pos:line="127" pos:column="11"/></name> <modifier pos:line="127" pos:column="12">*<pos:position pos:line="127" pos:column="13"/></modifier></type><name pos:line="127" pos:column="13">savePrefix<pos:position pos:line="127" pos:column="23"/></name> <init pos:line="127" pos:column="24">= <expr><name pos:line="127" pos:column="26">NULL<pos:position pos:line="127" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="127" pos:column="31"/></decl_stmt>

      <if pos:line="129" pos:column="7">if <condition pos:line="129" pos:column="10">(<expr><operator pos:line="129" pos:column="11">!<pos:position pos:line="129" pos:column="12"/></operator><name pos:line="129" pos:column="12">plaintext<pos:position pos:line="129" pos:column="21"/></name></expr>)<pos:position pos:line="129" pos:column="22"/></condition><then pos:line="129" pos:column="22">
      <block pos:line="130" pos:column="7">{
	<comment type="block" pos:line="131" pos:column="9">/* decode to a tempfile, saving the original destination */</comment>
	<expr_stmt><expr><name pos:line="132" pos:column="9">fp<pos:position pos:line="132" pos:column="11"/></name> <operator pos:line="132" pos:column="12">=<pos:position pos:line="132" pos:column="13"/></operator> <name><name pos:line="132" pos:column="14">s<pos:position pos:line="132" pos:column="15"/></name><operator pos:line="132" pos:column="15">-&gt;<pos:position pos:line="132" pos:column="20"/></operator><name pos:line="132" pos:column="17">fpout<pos:position pos:line="132" pos:column="22"/></name></name></expr>;<pos:position pos:line="132" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="133" pos:column="9">mutt_mktemp<pos:position pos:line="133" pos:column="20"/></name> <argument_list pos:line="133" pos:column="21">(<argument><expr><name pos:line="133" pos:column="22">tempfile<pos:position pos:line="133" pos:column="30"/></name></expr></argument>)<pos:position pos:line="133" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="32"/></expr_stmt>
	<if pos:line="134" pos:column="9">if <condition pos:line="134" pos:column="12">(<expr><operator pos:line="134" pos:column="13">(<pos:position pos:line="134" pos:column="14"/></operator><name><name pos:line="134" pos:column="14">s<pos:position pos:line="134" pos:column="15"/></name><operator pos:line="134" pos:column="15">-&gt;<pos:position pos:line="134" pos:column="20"/></operator><name pos:line="134" pos:column="17">fpout<pos:position pos:line="134" pos:column="22"/></name></name> <operator pos:line="134" pos:column="23">=<pos:position pos:line="134" pos:column="24"/></operator> <call><name pos:line="134" pos:column="25">safe_fopen<pos:position pos:line="134" pos:column="35"/></name> <argument_list pos:line="134" pos:column="36">(<argument><expr><name pos:line="134" pos:column="37">tempfile<pos:position pos:line="134" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="134" pos:column="47">"w"<pos:position pos:line="134" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="134" pos:column="51"/></argument_list></call><operator pos:line="134" pos:column="51">)<pos:position pos:line="134" pos:column="52"/></operator> <operator pos:line="134" pos:column="53">==<pos:position pos:line="134" pos:column="55"/></operator> <name pos:line="134" pos:column="56">NULL<pos:position pos:line="134" pos:column="60"/></name></expr>)<pos:position pos:line="134" pos:column="61"/></condition><then pos:line="134" pos:column="61">
	<block pos:line="135" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="136" pos:column="11">mutt_error<pos:position pos:line="136" pos:column="21"/></name></type> <name pos:line="136" pos:column="22">_<pos:position pos:line="136" pos:column="23"/></name><argument_list pos:line="136" pos:column="23">(<argument><expr><literal type="string" pos:line="136" pos:column="24">"Unable to open temporary file!"<pos:position pos:line="136" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="57"/></argument_list></decl>;<pos:position pos:line="136" pos:column="58"/></decl_stmt>
	  <goto pos:line="137" pos:column="11">goto <name pos:line="137" pos:column="16">bail<pos:position pos:line="137" pos:column="20"/></name>;<pos:position pos:line="137" pos:column="21"/></goto>
	}<pos:position pos:line="138" pos:column="10"/></block></then></if>
	<comment type="block" pos:line="139" pos:column="9">/* decoding the attachment changes the size and offset, so save a copy
	 * of the "real" values now, and restore them after processing
	 */</comment>
	<expr_stmt><expr><name pos:line="142" pos:column="9">tmplength<pos:position pos:line="142" pos:column="18"/></name> <operator pos:line="142" pos:column="19">=<pos:position pos:line="142" pos:column="20"/></operator> <name><name pos:line="142" pos:column="21">b<pos:position pos:line="142" pos:column="22"/></name><operator pos:line="142" pos:column="22">-&gt;<pos:position pos:line="142" pos:column="27"/></operator><name pos:line="142" pos:column="24">length<pos:position pos:line="142" pos:column="30"/></name></name></expr>;<pos:position pos:line="142" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name pos:line="143" pos:column="9">tmpoffset<pos:position pos:line="143" pos:column="18"/></name> <operator pos:line="143" pos:column="19">=<pos:position pos:line="143" pos:column="20"/></operator> <name><name pos:line="143" pos:column="21">b<pos:position pos:line="143" pos:column="22"/></name><operator pos:line="143" pos:column="22">-&gt;<pos:position pos:line="143" pos:column="27"/></operator><name pos:line="143" pos:column="24">offset<pos:position pos:line="143" pos:column="30"/></name></name></expr>;<pos:position pos:line="143" pos:column="31"/></expr_stmt>

	<comment type="block" pos:line="145" pos:column="9">/* if we are decoding binary bodies, we don't want to prefix each
	 * line with the prefix or else the data will get corrupted.
	 */</comment>
	<expr_stmt><expr><name pos:line="148" pos:column="9">savePrefix<pos:position pos:line="148" pos:column="19"/></name> <operator pos:line="148" pos:column="20">=<pos:position pos:line="148" pos:column="21"/></operator> <name><name pos:line="148" pos:column="22">s<pos:position pos:line="148" pos:column="23"/></name><operator pos:line="148" pos:column="23">-&gt;<pos:position pos:line="148" pos:column="28"/></operator><name pos:line="148" pos:column="25">prefix<pos:position pos:line="148" pos:column="31"/></name></name></expr>;<pos:position pos:line="148" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="149" pos:column="9">s<pos:position pos:line="149" pos:column="10"/></name><operator pos:line="149" pos:column="10">-&gt;<pos:position pos:line="149" pos:column="15"/></operator><name pos:line="149" pos:column="12">prefix<pos:position pos:line="149" pos:column="18"/></name></name> <operator pos:line="149" pos:column="19">=<pos:position pos:line="149" pos:column="20"/></operator> <name pos:line="149" pos:column="21">NULL<pos:position pos:line="149" pos:column="25"/></name></expr>;<pos:position pos:line="149" pos:column="26"/></expr_stmt>

	<expr_stmt><expr><name pos:line="151" pos:column="9">decode<pos:position pos:line="151" pos:column="15"/></name> <operator pos:line="151" pos:column="16">=<pos:position pos:line="151" pos:column="17"/></operator> <literal type="number" pos:line="151" pos:column="18">1<pos:position pos:line="151" pos:column="19"/></literal></expr>;<pos:position pos:line="151" pos:column="20"/></expr_stmt>
      }<pos:position pos:line="152" pos:column="8"/></block></then>
      <else pos:line="153" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><name><name pos:line="154" pos:column="9">b<pos:position pos:line="154" pos:column="10"/></name><operator pos:line="154" pos:column="10">-&gt;<pos:position pos:line="154" pos:column="15"/></operator><name pos:line="154" pos:column="12">type<pos:position pos:line="154" pos:column="16"/></name></name> <operator pos:line="154" pos:column="17">=<pos:position pos:line="154" pos:column="18"/></operator> <name pos:line="154" pos:column="19">TYPETEXT<pos:position pos:line="154" pos:column="27"/></name></expr>;<pos:position pos:line="154" pos:column="28"/></expr_stmt></block></else></if>

      <expr_stmt><expr><call><name pos:line="156" pos:column="7">mutt_decode_attachment<pos:position pos:line="156" pos:column="29"/></name> <argument_list pos:line="156" pos:column="30">(<argument><expr><name pos:line="156" pos:column="31">b<pos:position pos:line="156" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="156" pos:column="34">s<pos:position pos:line="156" pos:column="35"/></name></expr></argument>)<pos:position pos:line="156" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="37"/></expr_stmt>

      <if pos:line="158" pos:column="7">if <condition pos:line="158" pos:column="10">(<expr><name pos:line="158" pos:column="11">decode<pos:position pos:line="158" pos:column="17"/></name></expr>)<pos:position pos:line="158" pos:column="18"/></condition><then pos:line="158" pos:column="18">
      <block pos:line="159" pos:column="7">{
	<expr_stmt><expr><name><name pos:line="160" pos:column="9">b<pos:position pos:line="160" pos:column="10"/></name><operator pos:line="160" pos:column="10">-&gt;<pos:position pos:line="160" pos:column="15"/></operator><name pos:line="160" pos:column="12">length<pos:position pos:line="160" pos:column="18"/></name></name> <operator pos:line="160" pos:column="19">=<pos:position pos:line="160" pos:column="20"/></operator> <call><name pos:line="160" pos:column="21">ftell<pos:position pos:line="160" pos:column="26"/></name> <argument_list pos:line="160" pos:column="27">(<argument><expr><name><name pos:line="160" pos:column="28">s<pos:position pos:line="160" pos:column="29"/></name><operator pos:line="160" pos:column="29">-&gt;<pos:position pos:line="160" pos:column="34"/></operator><name pos:line="160" pos:column="31">fpout<pos:position pos:line="160" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="160" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="161" pos:column="9">b<pos:position pos:line="161" pos:column="10"/></name><operator pos:line="161" pos:column="10">-&gt;<pos:position pos:line="161" pos:column="15"/></operator><name pos:line="161" pos:column="12">offset<pos:position pos:line="161" pos:column="18"/></name></name> <operator pos:line="161" pos:column="19">=<pos:position pos:line="161" pos:column="20"/></operator> <literal type="number" pos:line="161" pos:column="21">0<pos:position pos:line="161" pos:column="22"/></literal></expr>;<pos:position pos:line="161" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="162" pos:column="9">fclose<pos:position pos:line="162" pos:column="15"/></name> <argument_list pos:line="162" pos:column="16">(<argument><expr><name><name pos:line="162" pos:column="17">s<pos:position pos:line="162" pos:column="18"/></name><operator pos:line="162" pos:column="18">-&gt;<pos:position pos:line="162" pos:column="23"/></operator><name pos:line="162" pos:column="20">fpout<pos:position pos:line="162" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="162" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="27"/></expr_stmt>

	<comment type="block" pos:line="164" pos:column="9">/* restore final destination and substitute the tempfile for input */</comment>
	<expr_stmt><expr><name><name pos:line="165" pos:column="9">s<pos:position pos:line="165" pos:column="10"/></name><operator pos:line="165" pos:column="10">-&gt;<pos:position pos:line="165" pos:column="15"/></operator><name pos:line="165" pos:column="12">fpout<pos:position pos:line="165" pos:column="17"/></name></name> <operator pos:line="165" pos:column="18">=<pos:position pos:line="165" pos:column="19"/></operator> <name pos:line="165" pos:column="20">fp<pos:position pos:line="165" pos:column="22"/></name></expr>;<pos:position pos:line="165" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><name pos:line="166" pos:column="9">fp<pos:position pos:line="166" pos:column="11"/></name> <operator pos:line="166" pos:column="12">=<pos:position pos:line="166" pos:column="13"/></operator> <name><name pos:line="166" pos:column="14">s<pos:position pos:line="166" pos:column="15"/></name><operator pos:line="166" pos:column="15">-&gt;<pos:position pos:line="166" pos:column="20"/></operator><name pos:line="166" pos:column="17">fpin<pos:position pos:line="166" pos:column="21"/></name></name></expr>;<pos:position pos:line="166" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="167" pos:column="9">s<pos:position pos:line="167" pos:column="10"/></name><operator pos:line="167" pos:column="10">-&gt;<pos:position pos:line="167" pos:column="15"/></operator><name pos:line="167" pos:column="12">fpin<pos:position pos:line="167" pos:column="16"/></name></name> <operator pos:line="167" pos:column="17">=<pos:position pos:line="167" pos:column="18"/></operator> <call><name pos:line="167" pos:column="19">fopen<pos:position pos:line="167" pos:column="24"/></name> <argument_list pos:line="167" pos:column="25">(<argument><expr><name pos:line="167" pos:column="26">tempfile<pos:position pos:line="167" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="167" pos:column="36">"r"<pos:position pos:line="167" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="167" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="168" pos:column="9">unlink<pos:position pos:line="168" pos:column="15"/></name> <argument_list pos:line="168" pos:column="16">(<argument><expr><name pos:line="168" pos:column="17">tempfile<pos:position pos:line="168" pos:column="25"/></name></expr></argument>)<pos:position pos:line="168" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="27"/></expr_stmt>

	<comment type="block" pos:line="170" pos:column="9">/* restore the prefix */</comment>
	<expr_stmt><expr><name><name pos:line="171" pos:column="9">s<pos:position pos:line="171" pos:column="10"/></name><operator pos:line="171" pos:column="10">-&gt;<pos:position pos:line="171" pos:column="15"/></operator><name pos:line="171" pos:column="12">prefix<pos:position pos:line="171" pos:column="18"/></name></name> <operator pos:line="171" pos:column="19">=<pos:position pos:line="171" pos:column="20"/></operator> <name pos:line="171" pos:column="21">savePrefix<pos:position pos:line="171" pos:column="31"/></name></expr>;<pos:position pos:line="171" pos:column="32"/></expr_stmt>
      }<pos:position pos:line="172" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name><name pos:line="174" pos:column="7">b<pos:position pos:line="174" pos:column="8"/></name><operator pos:line="174" pos:column="8">-&gt;<pos:position pos:line="174" pos:column="13"/></operator><name pos:line="174" pos:column="10">type<pos:position pos:line="174" pos:column="14"/></name></name> <operator pos:line="174" pos:column="15">=<pos:position pos:line="174" pos:column="16"/></operator> <name pos:line="174" pos:column="17">origType<pos:position pos:line="174" pos:column="25"/></name></expr>;<pos:position pos:line="174" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="175" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="177" pos:column="5">/* process the (decoded) body part */</comment>
    <if pos:line="178" pos:column="5">if <condition pos:line="178" pos:column="8">(<expr><name pos:line="178" pos:column="9">handler<pos:position pos:line="178" pos:column="16"/></name></expr>)<pos:position pos:line="178" pos:column="17"/></condition><then pos:line="178" pos:column="17">
    <block pos:line="179" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="180" pos:column="7">handler<pos:position pos:line="180" pos:column="14"/></name> <argument_list pos:line="180" pos:column="15">(<argument><expr><name pos:line="180" pos:column="16">b<pos:position pos:line="180" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="19">s<pos:position pos:line="180" pos:column="20"/></name></expr></argument>)<pos:position pos:line="180" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="22"/></expr_stmt>

      <if pos:line="182" pos:column="7">if <condition pos:line="182" pos:column="10">(<expr><name pos:line="182" pos:column="11">decode<pos:position pos:line="182" pos:column="17"/></name></expr>)<pos:position pos:line="182" pos:column="18"/></condition><then pos:line="182" pos:column="18">
      <block pos:line="183" pos:column="7">{
	<expr_stmt><expr><name><name pos:line="184" pos:column="9">b<pos:position pos:line="184" pos:column="10"/></name><operator pos:line="184" pos:column="10">-&gt;<pos:position pos:line="184" pos:column="15"/></operator><name pos:line="184" pos:column="12">length<pos:position pos:line="184" pos:column="18"/></name></name> <operator pos:line="184" pos:column="19">=<pos:position pos:line="184" pos:column="20"/></operator> <name pos:line="184" pos:column="21">tmplength<pos:position pos:line="184" pos:column="30"/></name></expr>;<pos:position pos:line="184" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="185" pos:column="9">b<pos:position pos:line="185" pos:column="10"/></name><operator pos:line="185" pos:column="10">-&gt;<pos:position pos:line="185" pos:column="15"/></operator><name pos:line="185" pos:column="12">offset<pos:position pos:line="185" pos:column="18"/></name></name> <operator pos:line="185" pos:column="19">=<pos:position pos:line="185" pos:column="20"/></operator> <name pos:line="185" pos:column="21">tmpoffset<pos:position pos:line="185" pos:column="30"/></name></expr>;<pos:position pos:line="185" pos:column="31"/></expr_stmt>

	<comment type="block" pos:line="187" pos:column="9">/* restore the original source stream */</comment>
	<expr_stmt><expr><call><name pos:line="188" pos:column="9">fclose<pos:position pos:line="188" pos:column="15"/></name> <argument_list pos:line="188" pos:column="16">(<argument><expr><name><name pos:line="188" pos:column="17">s<pos:position pos:line="188" pos:column="18"/></name><operator pos:line="188" pos:column="18">-&gt;<pos:position pos:line="188" pos:column="23"/></operator><name pos:line="188" pos:column="20">fpin<pos:position pos:line="188" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="188" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="189" pos:column="9">s<pos:position pos:line="189" pos:column="10"/></name><operator pos:line="189" pos:column="10">-&gt;<pos:position pos:line="189" pos:column="15"/></operator><name pos:line="189" pos:column="12">fpin<pos:position pos:line="189" pos:column="16"/></name></name> <operator pos:line="189" pos:column="17">=<pos:position pos:line="189" pos:column="18"/></operator> <name pos:line="189" pos:column="19">fp<pos:position pos:line="189" pos:column="21"/></name></expr>;<pos:position pos:line="189" pos:column="22"/></expr_stmt>
      }<pos:position pos:line="190" pos:column="8"/></block></then></if>
    }<pos:position pos:line="191" pos:column="6"/></block></then></if>
  }<pos:position pos:line="192" pos:column="4"/></block></then>
  <elseif pos:line="193" pos:column="3">else <if pos:line="193" pos:column="8">if <condition pos:line="193" pos:column="11">(<expr><name><name pos:line="193" pos:column="12">s<pos:position pos:line="193" pos:column="13"/></name><operator pos:line="193" pos:column="13">-&gt;<pos:position pos:line="193" pos:column="18"/></operator><name pos:line="193" pos:column="15">flags<pos:position pos:line="193" pos:column="20"/></name></name> <operator pos:line="193" pos:column="21">&amp;<pos:position pos:line="193" pos:column="26"/></operator> <name pos:line="193" pos:column="23">M_DISPLAY<pos:position pos:line="193" pos:column="32"/></name></expr>)<pos:position pos:line="193" pos:column="33"/></condition><then pos:line="193" pos:column="33">
  <block pos:line="194" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="195" pos:column="5">state_mark_attach<pos:position pos:line="195" pos:column="22"/></name> <argument_list pos:line="195" pos:column="23">(<argument><expr><name pos:line="195" pos:column="24">s<pos:position pos:line="195" pos:column="25"/></name></expr></argument>)<pos:position pos:line="195" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="196" pos:column="5">state_printf<pos:position pos:line="196" pos:column="17"/></name> <argument_list pos:line="196" pos:column="18">(<argument><expr><name pos:line="196" pos:column="19">s<pos:position pos:line="196" pos:column="20"/></name></expr></argument>, <argument><expr><call><name pos:line="196" pos:column="22">_<pos:position pos:line="196" pos:column="23"/></name><argument_list pos:line="196" pos:column="23">(<argument><expr><literal type="string" pos:line="196" pos:column="24">"[-- %s/%s is unsupported "<pos:position pos:line="196" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="196" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="196" pos:column="54">TYPE<pos:position pos:line="196" pos:column="58"/></name> <argument_list pos:line="196" pos:column="59">(<argument><expr><name pos:line="196" pos:column="60">b<pos:position pos:line="196" pos:column="61"/></name></expr></argument>)<pos:position pos:line="196" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="196" pos:column="64">b<pos:position pos:line="196" pos:column="65"/></name><operator pos:line="196" pos:column="65">-&gt;<pos:position pos:line="196" pos:column="70"/></operator><name pos:line="196" pos:column="67">subtype<pos:position pos:line="196" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="196" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="76"/></expr_stmt>
    <if pos:line="197" pos:column="5">if <condition pos:line="197" pos:column="8">(<expr><operator pos:line="197" pos:column="9">!<pos:position pos:line="197" pos:column="10"/></operator><call><name pos:line="197" pos:column="10">option<pos:position pos:line="197" pos:column="16"/></name> <argument_list pos:line="197" pos:column="17">(<argument><expr><name pos:line="197" pos:column="18">OPTVIEWATTACH<pos:position pos:line="197" pos:column="31"/></name></expr></argument>)<pos:position pos:line="197" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="197" pos:column="33"/></condition><then pos:line="197" pos:column="33">
    <block pos:line="198" pos:column="5">{
      <if pos:line="199" pos:column="7">if <condition pos:line="199" pos:column="10">(<expr><call><name pos:line="199" pos:column="11">km_expand_key<pos:position pos:line="199" pos:column="24"/></name> <argument_list pos:line="199" pos:column="25">(<argument><expr><name pos:line="199" pos:column="26">type<pos:position pos:line="199" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="199" pos:column="32">sizeof<argument_list pos:line="199" pos:column="38">(<argument><expr><name pos:line="199" pos:column="39">type<pos:position pos:line="199" pos:column="43"/></name></expr></argument>)<pos:position pos:line="199" pos:column="44"/></argument_list></sizeof></expr></argument>,
			<argument><expr><call><name pos:line="200" pos:column="25">km_find_func<pos:position pos:line="200" pos:column="37"/></name> <argument_list pos:line="200" pos:column="38">(<argument><expr><name pos:line="200" pos:column="39">MENU_PAGER<pos:position pos:line="200" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="200" pos:column="51">OP_VIEW_ATTACHMENTS<pos:position pos:line="200" pos:column="70"/></name></expr></argument>)<pos:position pos:line="200" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="200" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="200" pos:column="73"/></condition><then pos:line="200" pos:column="73">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="201" pos:column="9">fprintf<pos:position pos:line="201" pos:column="16"/></name> <argument_list pos:line="201" pos:column="17">(<argument><expr><name><name pos:line="201" pos:column="18">s<pos:position pos:line="201" pos:column="19"/></name><operator pos:line="201" pos:column="19">-&gt;<pos:position pos:line="201" pos:column="24"/></operator><name pos:line="201" pos:column="21">fpout<pos:position pos:line="201" pos:column="26"/></name></name></expr></argument>, <argument><expr><call><name pos:line="201" pos:column="28">_<pos:position pos:line="201" pos:column="29"/></name><argument_list pos:line="201" pos:column="29">(<argument><expr><literal type="string" pos:line="201" pos:column="30">"(use '%s' to view this part)"<pos:position pos:line="201" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="201" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="201" pos:column="63">type<pos:position pos:line="201" pos:column="67"/></name></expr></argument>)<pos:position pos:line="201" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="69"/></expr_stmt></block></then>
      <else pos:line="202" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="203" pos:column="9">fputs<pos:position pos:line="203" pos:column="14"/></name> <argument_list pos:line="203" pos:column="15">(<argument><expr><call><name pos:line="203" pos:column="16">_<pos:position pos:line="203" pos:column="17"/></name><argument_list pos:line="203" pos:column="17">(<argument><expr><literal type="string" pos:line="203" pos:column="18">"(need 'view-attachments' bound to key!)"<pos:position pos:line="203" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="203" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="203" pos:column="62">s<pos:position pos:line="203" pos:column="63"/></name><operator pos:line="203" pos:column="63">-&gt;<pos:position pos:line="203" pos:column="68"/></operator><name pos:line="203" pos:column="65">fpout<pos:position pos:line="203" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="203" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="72"/></expr_stmt></block></else></if>
    }<pos:position pos:line="204" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="205" pos:column="5">fputs<pos:position pos:line="205" pos:column="10"/></name> <argument_list pos:line="205" pos:column="11">(<argument><expr><literal type="string" pos:line="205" pos:column="12">" --]\n"<pos:position pos:line="205" pos:column="20"/></literal></expr></argument>, <argument><expr><name><name pos:line="205" pos:column="22">s<pos:position pos:line="205" pos:column="23"/></name><operator pos:line="205" pos:column="23">-&gt;<pos:position pos:line="205" pos:column="28"/></operator><name pos:line="205" pos:column="25">fpout<pos:position pos:line="205" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="205" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="206" pos:column="4"/></block></then></if></elseif></if>
  
  <label><name pos:line="208" pos:column="3">bail<pos:position pos:line="208" pos:column="7"/></name>:<pos:position pos:line="208" pos:column="8"/></label>
  <expr_stmt><expr><name><name pos:line="209" pos:column="3">s<pos:position pos:line="209" pos:column="4"/></name><operator pos:line="209" pos:column="4">-&gt;<pos:position pos:line="209" pos:column="9"/></operator><name pos:line="209" pos:column="6">flags<pos:position pos:line="209" pos:column="11"/></name></name> <operator pos:line="209" pos:column="12">=<pos:position pos:line="209" pos:column="13"/></operator> <name pos:line="209" pos:column="14">oflags<pos:position pos:line="209" pos:column="20"/></name></expr>;<pos:position pos:line="209" pos:column="21"/></expr_stmt>
}<pos:position pos:line="210" pos:column="2"/></block></function></unit>
