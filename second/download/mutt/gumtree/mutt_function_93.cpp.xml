<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_function_93.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">write_one_header<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">FILE<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">fp<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">int<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">pfxw<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">int<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">max<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">int<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">wraplen<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">pfx<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="47">const<pos:position pos:line="2" pos:column="52"/></specifier> <name pos:line="2" pos:column="53">char<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">start<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="66">const<pos:position pos:line="2" pos:column="71"/></specifier> <name pos:line="2" pos:column="72">char<pos:position pos:line="2" pos:column="76"/></name> <modifier pos:line="2" pos:column="77">*<pos:position pos:line="2" pos:column="78"/></modifier></type><name pos:line="2" pos:column="78">end<pos:position pos:line="2" pos:column="81"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="3" pos:column="30">int<pos:position pos:line="3" pos:column="33"/></name></type> <name pos:line="3" pos:column="34">flags<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="40"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">tagbuf<pos:position pos:line="5" pos:column="15"/></name></decl>, <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="18">valbuf<pos:position pos:line="5" pos:column="24"/></name></decl>, <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="27">t<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">is_from<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><operator pos:line="6" pos:column="17">(<pos:position pos:line="6" pos:column="18"/></operator><operator pos:line="6" pos:column="18">(<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="19">end<pos:position pos:line="6" pos:column="22"/></name> <operator pos:line="6" pos:column="23">-<pos:position pos:line="6" pos:column="24"/></operator> <name pos:line="6" pos:column="25">start<pos:position pos:line="6" pos:column="30"/></name><operator pos:line="6" pos:column="30">)<pos:position pos:line="6" pos:column="31"/></operator> <operator pos:line="6" pos:column="32">&gt;<pos:position pos:line="6" pos:column="36"/></operator> <literal type="number" pos:line="6" pos:column="34">5<pos:position pos:line="6" pos:column="35"/></literal> <operator pos:line="6" pos:column="36">&amp;&amp;<pos:position pos:line="6" pos:column="46"/></operator>
		 <call><name pos:line="7" pos:column="18">ascii_strncasecmp<pos:position pos:line="7" pos:column="35"/></name> <argument_list pos:line="7" pos:column="36">(<argument><expr><name pos:line="7" pos:column="37">start<pos:position pos:line="7" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="44">"from "<pos:position pos:line="7" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="53">5<pos:position pos:line="7" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call> <operator pos:line="7" pos:column="56">==<pos:position pos:line="7" pos:column="58"/></operator> <literal type="number" pos:line="7" pos:column="59">0<pos:position pos:line="7" pos:column="60"/></literal><operator pos:line="7" pos:column="60">)<pos:position pos:line="7" pos:column="61"/></operator></expr></init></decl>;<pos:position pos:line="7" pos:column="62"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* only pass through folding machinery if necessary for sending,
     never wrap From_ headers on sending */</comment>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><operator pos:line="11" pos:column="7">!<pos:position pos:line="11" pos:column="8"/></operator><operator pos:line="11" pos:column="8">(<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="9">flags<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">&amp;<pos:position pos:line="11" pos:column="20"/></operator> <name pos:line="11" pos:column="17">CH_DISPLAY<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">)<pos:position pos:line="11" pos:column="28"/></operator> <operator pos:line="11" pos:column="29">&amp;&amp;<pos:position pos:line="11" pos:column="39"/></operator> <operator pos:line="11" pos:column="32">(<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">pfxw<pos:position pos:line="11" pos:column="37"/></name> <operator pos:line="11" pos:column="38">+<pos:position pos:line="11" pos:column="39"/></operator> <name pos:line="11" pos:column="40">max<pos:position pos:line="11" pos:column="43"/></name> <operator pos:line="11" pos:column="44">&lt;=<pos:position pos:line="11" pos:column="49"/></operator> <name pos:line="11" pos:column="47">wraplen<pos:position pos:line="11" pos:column="54"/></name> <operator pos:line="11" pos:column="55">||<pos:position pos:line="11" pos:column="57"/></operator> <name pos:line="11" pos:column="58">is_from<pos:position pos:line="11" pos:column="65"/></name><operator pos:line="11" pos:column="65">)<pos:position pos:line="11" pos:column="66"/></operator></expr>)<pos:position pos:line="11" pos:column="67"/></condition><then pos:line="11" pos:column="67">
  <block pos:line="12" pos:column="3">{
    <expr_stmt><expr><name pos:line="13" pos:column="5">valbuf<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <call><name pos:line="13" pos:column="14">mutt_substrdup<pos:position pos:line="13" pos:column="28"/></name> <argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">start<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="37">end<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">dprint<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><literal type="number" pos:line="14" pos:column="12">4<pos:position pos:line="14" pos:column="13"/></literal></expr></argument>,<argument><expr><operator pos:line="14" pos:column="14">(<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="15">debugfile<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">,<pos:position pos:line="14" pos:column="25"/></operator><literal type="string" pos:line="14" pos:column="25">"mwoh: buf[%s%s] short enough, "<pos:position pos:line="14" pos:column="57"/></literal>
	      <literal type="string" pos:line="15" pos:column="15">"max width = %d &lt;= %d\n"<pos:position pos:line="15" pos:column="42"/></literal><operator pos:line="15" pos:column="39">,<pos:position pos:line="15" pos:column="40"/></operator>
	      <call><name pos:line="16" pos:column="15">NONULL<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><name pos:line="16" pos:column="22">pfx<pos:position pos:line="16" pos:column="25"/></name></expr></argument>)<pos:position pos:line="16" pos:column="26"/></argument_list></call><operator pos:line="16" pos:column="26">,<pos:position pos:line="16" pos:column="27"/></operator> <name pos:line="16" pos:column="28">valbuf<pos:position pos:line="16" pos:column="34"/></name><operator pos:line="16" pos:column="34">,<pos:position pos:line="16" pos:column="35"/></operator> <name pos:line="16" pos:column="36">max<pos:position pos:line="16" pos:column="39"/></name><operator pos:line="16" pos:column="39">,<pos:position pos:line="16" pos:column="40"/></operator> <name pos:line="16" pos:column="41">wraplen<pos:position pos:line="16" pos:column="48"/></name><operator pos:line="16" pos:column="48">)<pos:position pos:line="16" pos:column="49"/></operator></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="51"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">pfx<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">&amp;&amp;<pos:position pos:line="17" pos:column="23"/></operator> <operator pos:line="17" pos:column="16">*<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">pfx<pos:position pos:line="17" pos:column="20"/></name></expr>)<pos:position pos:line="17" pos:column="21"/></condition><then pos:line="17" pos:column="21">
      <block type="pseudo"><if pos:line="18" pos:column="7">if <condition pos:line="18" pos:column="10">(<expr><call><name pos:line="18" pos:column="11">fputs<pos:position pos:line="18" pos:column="16"/></name> <argument_list pos:line="18" pos:column="17">(<argument><expr><name pos:line="18" pos:column="18">pfx<pos:position pos:line="18" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="23">fp<pos:position pos:line="18" pos:column="25"/></name></expr></argument>)<pos:position pos:line="18" pos:column="26"/></argument_list></call> <operator pos:line="18" pos:column="27">==<pos:position pos:line="18" pos:column="29"/></operator> <name pos:line="18" pos:column="30">EOF<pos:position pos:line="18" pos:column="33"/></name></expr>)<pos:position pos:line="18" pos:column="34"/></condition><then pos:line="18" pos:column="34">
	<block type="pseudo"><return pos:line="19" pos:column="9">return <expr><operator pos:line="19" pos:column="16">-<pos:position pos:line="19" pos:column="17"/></operator><literal type="number" pos:line="19" pos:column="17">1<pos:position pos:line="19" pos:column="18"/></literal></expr>;<pos:position pos:line="19" pos:column="19"/></return></block></then></if></block></then></if>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">!<pos:position pos:line="20" pos:column="10"/></operator><operator pos:line="20" pos:column="10">(<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="11">t<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <call><name pos:line="20" pos:column="15">strchr<pos:position pos:line="20" pos:column="21"/></name> <argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">valbuf<pos:position pos:line="20" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="20" pos:column="31">':'<pos:position pos:line="20" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="35"/></argument_list></call><operator pos:line="20" pos:column="35">)<pos:position pos:line="20" pos:column="36"/></operator></expr>)<pos:position pos:line="20" pos:column="37"/></condition><then pos:line="20" pos:column="37">
    <block pos:line="21" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="22" pos:column="7">dprint<pos:position pos:line="22" pos:column="13"/></name> <argument_list pos:line="22" pos:column="14">(<argument><expr><literal type="number" pos:line="22" pos:column="15">1<pos:position pos:line="22" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="22" pos:column="18">(<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="19">debugfile<pos:position pos:line="22" pos:column="28"/></name><operator pos:line="22" pos:column="28">,<pos:position pos:line="22" pos:column="29"/></operator> <literal type="string" pos:line="22" pos:column="30">"mwoh: warning: header not in "<pos:position pos:line="22" pos:column="61"/></literal>
		  <literal type="string" pos:line="23" pos:column="19">"'key: value' format!\n"<pos:position pos:line="23" pos:column="43"/></literal><operator pos:line="23" pos:column="43">)<pos:position pos:line="23" pos:column="44"/></operator></expr></argument>)<pos:position pos:line="23" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="46"/></expr_stmt>
      <return pos:line="24" pos:column="7">return <expr><literal type="number" pos:line="24" pos:column="14">0<pos:position pos:line="24" pos:column="15"/></literal></expr>;<pos:position pos:line="24" pos:column="16"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><call><name pos:line="26" pos:column="9">print_val<pos:position pos:line="26" pos:column="18"/></name> <argument_list pos:line="26" pos:column="19">(<argument><expr><name pos:line="26" pos:column="20">fp<pos:position pos:line="26" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="24">pfx<pos:position pos:line="26" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="29">valbuf<pos:position pos:line="26" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="37">flags<pos:position pos:line="26" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="44">mutt_strlen<pos:position pos:line="26" pos:column="55"/></name> <argument_list pos:line="26" pos:column="56">(<argument><expr><name pos:line="26" pos:column="57">pfx<pos:position pos:line="26" pos:column="60"/></name></expr></argument>)<pos:position pos:line="26" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="62"/></argument_list></call> <operator pos:line="26" pos:column="63">&lt;<pos:position pos:line="26" pos:column="67"/></operator> <literal type="number" pos:line="26" pos:column="65">0<pos:position pos:line="26" pos:column="66"/></literal></expr>)<pos:position pos:line="26" pos:column="67"/></condition><then pos:line="26" pos:column="67">
    <block pos:line="27" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">FREE<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><operator pos:line="28" pos:column="12">&amp;<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="13">valbuf<pos:position pos:line="28" pos:column="19"/></name></expr></argument>)<pos:position pos:line="28" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="21"/></expr_stmt>
      <return pos:line="29" pos:column="7">return <expr><operator pos:line="29" pos:column="14">-<pos:position pos:line="29" pos:column="15"/></operator><literal type="number" pos:line="29" pos:column="15">1<pos:position pos:line="29" pos:column="16"/></literal></expr>;<pos:position pos:line="29" pos:column="17"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">FREE<pos:position pos:line="31" pos:column="9"/></name><argument_list pos:line="31" pos:column="9">(<argument><expr><operator pos:line="31" pos:column="10">&amp;<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="11">valbuf<pos:position pos:line="31" pos:column="17"/></name></expr></argument>)<pos:position pos:line="31" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="32" pos:column="4"/></block></then>
  <else pos:line="33" pos:column="3">else
  <block pos:line="34" pos:column="3">{
    <expr_stmt><expr><name pos:line="35" pos:column="5">t<pos:position pos:line="35" pos:column="6"/></name> <operator pos:line="35" pos:column="7">=<pos:position pos:line="35" pos:column="8"/></operator> <call><name pos:line="35" pos:column="9">strchr<pos:position pos:line="35" pos:column="15"/></name> <argument_list pos:line="35" pos:column="16">(<argument><expr><name pos:line="35" pos:column="17">start<pos:position pos:line="35" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="35" pos:column="24">':'<pos:position pos:line="35" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><operator pos:line="36" pos:column="9">!<pos:position pos:line="36" pos:column="10"/></operator><name pos:line="36" pos:column="10">t<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">||<pos:position pos:line="36" pos:column="14"/></operator> <name pos:line="36" pos:column="15">t<pos:position pos:line="36" pos:column="16"/></name> <operator pos:line="36" pos:column="17">&gt;<pos:position pos:line="36" pos:column="21"/></operator> <name pos:line="36" pos:column="19">end<pos:position pos:line="36" pos:column="22"/></name></expr>)<pos:position pos:line="36" pos:column="23"/></condition><then pos:line="36" pos:column="23">
    <block pos:line="37" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="38" pos:column="7">dprint<pos:position pos:line="38" pos:column="13"/></name> <argument_list pos:line="38" pos:column="14">(<argument><expr><literal type="number" pos:line="38" pos:column="15">1<pos:position pos:line="38" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="38" pos:column="18">(<pos:position pos:line="38" pos:column="19"/></operator><name pos:line="38" pos:column="19">debugfile<pos:position pos:line="38" pos:column="28"/></name><operator pos:line="38" pos:column="28">,<pos:position pos:line="38" pos:column="29"/></operator> <literal type="string" pos:line="38" pos:column="30">"mwoh: warning: header not in "<pos:position pos:line="38" pos:column="61"/></literal>
		  <literal type="string" pos:line="39" pos:column="19">"'key: value' format!\n"<pos:position pos:line="39" pos:column="43"/></literal><operator pos:line="39" pos:column="43">)<pos:position pos:line="39" pos:column="44"/></operator></expr></argument>)<pos:position pos:line="39" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="46"/></expr_stmt>
      <return pos:line="40" pos:column="7">return <expr><literal type="number" pos:line="40" pos:column="14">0<pos:position pos:line="40" pos:column="15"/></literal></expr>;<pos:position pos:line="40" pos:column="16"/></return>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">is_from<pos:position pos:line="42" pos:column="16"/></name></expr>)<pos:position pos:line="42" pos:column="17"/></condition><then pos:line="42" pos:column="17">
    <block pos:line="43" pos:column="5">{
      <expr_stmt><expr><name pos:line="44" pos:column="7">tagbuf<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">=<pos:position pos:line="44" pos:column="15"/></operator> <name pos:line="44" pos:column="16">NULL<pos:position pos:line="44" pos:column="20"/></name></expr>;<pos:position pos:line="44" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><name pos:line="45" pos:column="7">valbuf<pos:position pos:line="45" pos:column="13"/></name> <operator pos:line="45" pos:column="14">=<pos:position pos:line="45" pos:column="15"/></operator> <call><name pos:line="45" pos:column="16">mutt_substrdup<pos:position pos:line="45" pos:column="30"/></name> <argument_list pos:line="45" pos:column="31">(<argument><expr><name pos:line="45" pos:column="32">start<pos:position pos:line="45" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="39">end<pos:position pos:line="45" pos:column="42"/></name></expr></argument>)<pos:position pos:line="45" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then>
    <else pos:line="47" pos:column="5">else
    <block pos:line="48" pos:column="5">{
      <expr_stmt><expr><name pos:line="49" pos:column="7">tagbuf<pos:position pos:line="49" pos:column="13"/></name> <operator pos:line="49" pos:column="14">=<pos:position pos:line="49" pos:column="15"/></operator> <call><name pos:line="49" pos:column="16">mutt_substrdup<pos:position pos:line="49" pos:column="30"/></name> <argument_list pos:line="49" pos:column="31">(<argument><expr><name pos:line="49" pos:column="32">start<pos:position pos:line="49" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="39">t<pos:position pos:line="49" pos:column="40"/></name></expr></argument>)<pos:position pos:line="49" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="42"/></expr_stmt>
      <comment type="block" pos:line="50" pos:column="7">/* skip over the colon separating the header field name and value */</comment>
      <expr_stmt><expr><name pos:line="51" pos:column="7">t<pos:position pos:line="51" pos:column="8"/></name> <operator pos:line="51" pos:column="9">=<pos:position pos:line="51" pos:column="10"/></operator> <call><name pos:line="51" pos:column="11">skip_email_wsp<pos:position pos:line="51" pos:column="25"/></name><argument_list pos:line="51" pos:column="25">(<argument><expr><name pos:line="51" pos:column="26">t<pos:position pos:line="51" pos:column="27"/></name> <operator pos:line="51" pos:column="28">+<pos:position pos:line="51" pos:column="29"/></operator> <literal type="number" pos:line="51" pos:column="30">1<pos:position pos:line="51" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name pos:line="52" pos:column="7">valbuf<pos:position pos:line="52" pos:column="13"/></name> <operator pos:line="52" pos:column="14">=<pos:position pos:line="52" pos:column="15"/></operator> <call><name pos:line="52" pos:column="16">mutt_substrdup<pos:position pos:line="52" pos:column="30"/></name> <argument_list pos:line="52" pos:column="31">(<argument><expr><name pos:line="52" pos:column="32">t<pos:position pos:line="52" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="35">end<pos:position pos:line="52" pos:column="38"/></name></expr></argument>)<pos:position pos:line="52" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">dprint<pos:position pos:line="54" pos:column="11"/></name><argument_list pos:line="54" pos:column="11">(<argument><expr><literal type="number" pos:line="54" pos:column="12">4<pos:position pos:line="54" pos:column="13"/></literal></expr></argument>,<argument><expr><operator pos:line="54" pos:column="14">(<pos:position pos:line="54" pos:column="15"/></operator><name pos:line="54" pos:column="15">debugfile<pos:position pos:line="54" pos:column="24"/></name><operator pos:line="54" pos:column="24">,<pos:position pos:line="54" pos:column="25"/></operator><literal type="string" pos:line="54" pos:column="25">"mwoh: buf[%s%s] too long, "<pos:position pos:line="54" pos:column="53"/></literal>
	      <literal type="string" pos:line="55" pos:column="15">"max width = %d &gt; %d\n"<pos:position pos:line="55" pos:column="41"/></literal><operator pos:line="55" pos:column="38">,<pos:position pos:line="55" pos:column="39"/></operator>
	      <call><name pos:line="56" pos:column="15">NONULL<pos:position pos:line="56" pos:column="21"/></name><argument_list pos:line="56" pos:column="21">(<argument><expr><name pos:line="56" pos:column="22">pfx<pos:position pos:line="56" pos:column="25"/></name></expr></argument>)<pos:position pos:line="56" pos:column="26"/></argument_list></call><operator pos:line="56" pos:column="26">,<pos:position pos:line="56" pos:column="27"/></operator> <name pos:line="56" pos:column="28">valbuf<pos:position pos:line="56" pos:column="34"/></name><operator pos:line="56" pos:column="34">,<pos:position pos:line="56" pos:column="35"/></operator> <name pos:line="56" pos:column="36">max<pos:position pos:line="56" pos:column="39"/></name><operator pos:line="56" pos:column="39">,<pos:position pos:line="56" pos:column="40"/></operator> <name pos:line="56" pos:column="41">wraplen<pos:position pos:line="56" pos:column="48"/></name><operator pos:line="56" pos:column="48">)<pos:position pos:line="56" pos:column="49"/></operator></expr></argument>)<pos:position pos:line="56" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="51"/></expr_stmt>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><call><name pos:line="57" pos:column="9">fold_one_header<pos:position pos:line="57" pos:column="24"/></name> <argument_list pos:line="57" pos:column="25">(<argument><expr><name pos:line="57" pos:column="26">fp<pos:position pos:line="57" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="30">tagbuf<pos:position pos:line="57" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="38">valbuf<pos:position pos:line="57" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="46">pfx<pos:position pos:line="57" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="51">wraplen<pos:position pos:line="57" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="60">flags<pos:position pos:line="57" pos:column="65"/></name></expr></argument>)<pos:position pos:line="57" pos:column="66"/></argument_list></call> <operator pos:line="57" pos:column="67">&lt;<pos:position pos:line="57" pos:column="71"/></operator> <literal type="number" pos:line="57" pos:column="69">0<pos:position pos:line="57" pos:column="70"/></literal></expr>)<pos:position pos:line="57" pos:column="71"/></condition><then pos:line="57" pos:column="71">
      <block type="pseudo"><return pos:line="58" pos:column="7">return <expr><operator pos:line="58" pos:column="14">-<pos:position pos:line="58" pos:column="15"/></operator><literal type="number" pos:line="58" pos:column="15">1<pos:position pos:line="58" pos:column="16"/></literal></expr>;<pos:position pos:line="58" pos:column="17"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">FREE<pos:position pos:line="59" pos:column="9"/></name> <argument_list pos:line="59" pos:column="10">(<argument><expr><operator pos:line="59" pos:column="11">&amp;<pos:position pos:line="59" pos:column="16"/></operator><name pos:line="59" pos:column="12">tagbuf<pos:position pos:line="59" pos:column="18"/></name></expr></argument>)<pos:position pos:line="59" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">FREE<pos:position pos:line="60" pos:column="9"/></name> <argument_list pos:line="60" pos:column="10">(<argument><expr><operator pos:line="60" pos:column="11">&amp;<pos:position pos:line="60" pos:column="16"/></operator><name pos:line="60" pos:column="12">valbuf<pos:position pos:line="60" pos:column="18"/></name></expr></argument>)<pos:position pos:line="60" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="61" pos:column="4"/></block></else></if>
  <return pos:line="62" pos:column="3">return <expr><literal type="number" pos:line="62" pos:column="10">0<pos:position pos:line="62" pos:column="11"/></literal></expr>;<pos:position pos:line="62" pos:column="12"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
