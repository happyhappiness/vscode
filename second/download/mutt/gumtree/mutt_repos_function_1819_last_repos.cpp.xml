<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1819_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">make_sidebar_entry<pos:position pos:line="1" pos:column="31"/></name> <parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">buf<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">unsigned<pos:position pos:line="1" pos:column="52"/></name> <name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">buflen<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">int<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">width<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="76">char<pos:position pos:line="1" pos:column="80"/></name> <modifier pos:line="1" pos:column="81">*<pos:position pos:line="1" pos:column="82"/></modifier></type><name pos:line="1" pos:column="82">box<pos:position pos:line="1" pos:column="85"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="2" pos:column="33">SBENTRY<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">sbe<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="46"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><operator pos:line="4" pos:column="7">!<pos:position pos:line="4" pos:column="8"/></operator><name pos:line="4" pos:column="8">buf<pos:position pos:line="4" pos:column="11"/></name> <operator pos:line="4" pos:column="12">||<pos:position pos:line="4" pos:column="14"/></operator> <operator pos:line="4" pos:column="15">!<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">box<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">||<pos:position pos:line="4" pos:column="22"/></operator> <operator pos:line="4" pos:column="23">!<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="24">sbe<pos:position pos:line="4" pos:column="27"/></name></expr>)<pos:position pos:line="4" pos:column="28"/></condition><then pos:line="4" pos:column="28">
    <block type="pseudo"><return pos:line="5" pos:column="5">return;<pos:position pos:line="5" pos:column="12"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="7" pos:column="3">strfcpy<pos:position pos:line="7" pos:column="10"/></name> <argument_list pos:line="7" pos:column="11">(<argument><expr><name><name pos:line="7" pos:column="12">sbe<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">-&gt;<pos:position pos:line="7" pos:column="20"/></operator><name pos:line="7" pos:column="17">box<pos:position pos:line="7" pos:column="20"/></name></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="22">box<pos:position pos:line="7" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="27">sizeof <argument_list pos:line="7" pos:column="34">(<argument><expr><name><name pos:line="7" pos:column="35">sbe<pos:position pos:line="7" pos:column="38"/></name><operator pos:line="7" pos:column="38">-&gt;<pos:position pos:line="7" pos:column="43"/></operator><name pos:line="7" pos:column="40">box<pos:position pos:line="7" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="46"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">mutt_FormatString<pos:position pos:line="9" pos:column="20"/></name> <argument_list pos:line="9" pos:column="21">(<argument><expr><name pos:line="9" pos:column="22">buf<pos:position pos:line="9" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="27">buflen<pos:position pos:line="9" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="35">0<pos:position pos:line="9" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="38">width<pos:position pos:line="9" pos:column="43"/></name></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="45">NONULL<pos:position pos:line="9" pos:column="51"/></name><argument_list pos:line="9" pos:column="51">(<argument><expr><name pos:line="9" pos:column="52">SidebarFormat<pos:position pos:line="9" pos:column="65"/></name></expr></argument>)<pos:position pos:line="9" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="9" pos:column="68">cb_format_str<pos:position pos:line="9" pos:column="81"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="83">(<pos:position pos:line="9" pos:column="84"/></operator><name pos:line="9" pos:column="84">unsigned<pos:position pos:line="9" pos:column="92"/></name> <name pos:line="9" pos:column="93">long<pos:position pos:line="9" pos:column="97"/></name><operator pos:line="9" pos:column="97">)<pos:position pos:line="9" pos:column="98"/></operator> <name pos:line="9" pos:column="99">sbe<pos:position pos:line="9" pos:column="102"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="104">0<pos:position pos:line="9" pos:column="105"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="107"/></expr_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* Force string to be exactly the right width */</comment>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">w<pos:position pos:line="12" pos:column="8"/></name> <init pos:line="12" pos:column="9">= <expr><call><name pos:line="12" pos:column="11">mutt_strwidth<pos:position pos:line="12" pos:column="24"/></name> <argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">buf<pos:position pos:line="12" pos:column="29"/></name></expr></argument>)<pos:position pos:line="12" pos:column="30"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">s<pos:position pos:line="13" pos:column="8"/></name> <init pos:line="13" pos:column="9">= <expr><call><name pos:line="13" pos:column="11">mutt_strlen<pos:position pos:line="13" pos:column="22"/></name> <argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">buf<pos:position pos:line="13" pos:column="27"/></name></expr></argument>)<pos:position pos:line="13" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="29"/></decl_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">width<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <call><name pos:line="14" pos:column="11">MIN<pos:position pos:line="14" pos:column="14"/></name><argument_list pos:line="14" pos:column="14">(<argument><expr><name pos:line="14" pos:column="15">buflen<pos:position pos:line="14" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="23">width<pos:position pos:line="14" pos:column="28"/></name></expr></argument>)<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">w<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">&lt;<pos:position pos:line="15" pos:column="13"/></operator> <name pos:line="15" pos:column="11">width<pos:position pos:line="15" pos:column="16"/></name></expr>)<pos:position pos:line="15" pos:column="17"/></condition><then pos:line="15" pos:column="17">
  <block pos:line="16" pos:column="3">{
    <comment type="block" pos:line="17" pos:column="5">/* Pad with spaces */</comment>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">memset<pos:position pos:line="18" pos:column="11"/></name> <argument_list pos:line="18" pos:column="12">(<argument><expr><name pos:line="18" pos:column="13">buf<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">+<pos:position pos:line="18" pos:column="18"/></operator> <name pos:line="18" pos:column="19">s<pos:position pos:line="18" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="18" pos:column="22">' '<pos:position pos:line="18" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="27">width<pos:position pos:line="18" pos:column="32"/></name> <operator pos:line="18" pos:column="33">-<pos:position pos:line="18" pos:column="34"/></operator> <name pos:line="18" pos:column="35">w<pos:position pos:line="18" pos:column="36"/></name></expr></argument>)<pos:position pos:line="18" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">buf<pos:position pos:line="19" pos:column="8"/></name><index pos:line="19" pos:column="8">[<expr><name pos:line="19" pos:column="9">s<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">+<pos:position pos:line="19" pos:column="12"/></operator> <name pos:line="19" pos:column="13">width<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">-<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="21">w<pos:position pos:line="19" pos:column="22"/></name></expr>]<pos:position pos:line="19" pos:column="23"/></index></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <literal type="number" pos:line="19" pos:column="26">0<pos:position pos:line="19" pos:column="27"/></literal></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="20" pos:column="4"/></block></then>
  <elseif pos:line="21" pos:column="3">else <if pos:line="21" pos:column="8">if <condition pos:line="21" pos:column="11">(<expr><name pos:line="21" pos:column="12">w<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">&gt;<pos:position pos:line="21" pos:column="18"/></operator> <name pos:line="21" pos:column="16">width<pos:position pos:line="21" pos:column="21"/></name></expr>)<pos:position pos:line="21" pos:column="22"/></condition><then pos:line="21" pos:column="22">
  <block pos:line="22" pos:column="3">{
    <comment type="block" pos:line="23" pos:column="5">/* Truncate to fit */</comment>
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">int<pos:position pos:line="24" pos:column="8"/></name></type> <name pos:line="24" pos:column="9">len<pos:position pos:line="24" pos:column="12"/></name> <init pos:line="24" pos:column="13">= <expr><call><name pos:line="24" pos:column="15">mutt_wstr_trunc<pos:position pos:line="24" pos:column="30"/></name> <argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">buf<pos:position pos:line="24" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="37">buflen<pos:position pos:line="24" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="45">width<pos:position pos:line="24" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="52">NULL<pos:position pos:line="24" pos:column="56"/></name></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="58"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">buf<pos:position pos:line="25" pos:column="8"/></name><index pos:line="25" pos:column="8">[<expr><name pos:line="25" pos:column="9">len<pos:position pos:line="25" pos:column="12"/></name></expr>]<pos:position pos:line="25" pos:column="13"/></index></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <literal type="number" pos:line="25" pos:column="16">0<pos:position pos:line="25" pos:column="17"/></literal></expr>;<pos:position pos:line="25" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if></elseif></if>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
