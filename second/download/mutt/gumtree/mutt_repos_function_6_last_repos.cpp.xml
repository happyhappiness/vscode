<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_6_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">fmtfp<pos:position pos:line="1" pos:column="18"/></name> <parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">buffer<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">size_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">currlen<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">size_t<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">maxlen<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
		   <parameter><decl><type><name pos:line="2" pos:column="20">long<pos:position pos:line="2" pos:column="24"/></name> <name pos:line="2" pos:column="25">double<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">fvalue<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">int<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">min<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">int<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">max<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="58">int<pos:position pos:line="2" pos:column="61"/></name></type> <name pos:line="2" pos:column="62">flags<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">signvalue<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">long<pos:position pos:line="5" pos:column="7"/></name> <name pos:line="5" pos:column="8">double<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">ufvalue<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">iconvert<pos:position pos:line="6" pos:column="16"/></name><index pos:line="6" pos:column="16">[<expr><literal type="number" pos:line="6" pos:column="17">20<pos:position pos:line="6" pos:column="19"/></literal></expr>]<pos:position pos:line="6" pos:column="20"/></index></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">fconvert<pos:position pos:line="7" pos:column="16"/></name><index pos:line="7" pos:column="16">[<expr><literal type="number" pos:line="7" pos:column="17">20<pos:position pos:line="7" pos:column="19"/></literal></expr>]<pos:position pos:line="7" pos:column="20"/></index></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">iplace<pos:position pos:line="8" pos:column="13"/></name> <init pos:line="8" pos:column="14">= <expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">fplace<pos:position pos:line="9" pos:column="13"/></name> <init pos:line="9" pos:column="14">= <expr><literal type="number" pos:line="9" pos:column="16">0<pos:position pos:line="9" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">padlen<pos:position pos:line="10" pos:column="13"/></name> <init pos:line="10" pos:column="14">= <expr><literal type="number" pos:line="10" pos:column="16">0<pos:position pos:line="10" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="18"/></decl_stmt> <comment type="block" pos:line="10" pos:column="19">/* amount to pad */</comment>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">zpadlen<pos:position pos:line="11" pos:column="14"/></name> <init pos:line="11" pos:column="15">= <expr><literal type="number" pos:line="11" pos:column="17">0<pos:position pos:line="11" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt> 
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">caps<pos:position pos:line="12" pos:column="11"/></name> <init pos:line="12" pos:column="12">= <expr><literal type="number" pos:line="12" pos:column="14">0<pos:position pos:line="12" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">long<pos:position pos:line="13" pos:column="7"/></name></type> <name pos:line="13" pos:column="8">intpart<pos:position pos:line="13" pos:column="15"/></name></decl>;<pos:position pos:line="13" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">long<pos:position pos:line="14" pos:column="7"/></name></type> <name pos:line="14" pos:column="8">fracpart<pos:position pos:line="14" pos:column="16"/></name></decl>;<pos:position pos:line="14" pos:column="17"/></decl_stmt>
  
  <comment type="block" pos:line="16" pos:column="3">/* 
   * AIX manpage says the default is 0, but Solaris says the default
   * is 6, and sprintf on AIX defaults to 6
   */</comment>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name pos:line="20" pos:column="7">max<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">&lt;<pos:position pos:line="20" pos:column="15"/></operator> <literal type="number" pos:line="20" pos:column="13">0<pos:position pos:line="20" pos:column="14"/></literal></expr>)<pos:position pos:line="20" pos:column="15"/></condition><then pos:line="20" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="5">max<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">=<pos:position pos:line="21" pos:column="10"/></operator> <literal type="number" pos:line="21" pos:column="11">6<pos:position pos:line="21" pos:column="12"/></literal></expr>;<pos:position pos:line="21" pos:column="13"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="23" pos:column="3">ufvalue<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <call><name pos:line="23" pos:column="13">abs_val<pos:position pos:line="23" pos:column="20"/></name> <argument_list pos:line="23" pos:column="21">(<argument><expr><name pos:line="23" pos:column="22">fvalue<pos:position pos:line="23" pos:column="28"/></name></expr></argument>)<pos:position pos:line="23" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt>

  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><name pos:line="25" pos:column="7">fvalue<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">&lt;<pos:position pos:line="25" pos:column="18"/></operator> <literal type="number" pos:line="25" pos:column="16">0<pos:position pos:line="25" pos:column="17"/></literal></expr>)<pos:position pos:line="25" pos:column="18"/></condition><then pos:line="25" pos:column="18">
    <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="5">signvalue<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <literal type="char" pos:line="26" pos:column="17">'-'<pos:position pos:line="26" pos:column="20"/></literal></expr>;<pos:position pos:line="26" pos:column="21"/></expr_stmt></block></then>
  <elseif pos:line="27" pos:column="3">else
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">flags<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">&amp;<pos:position pos:line="28" pos:column="20"/></operator> <name pos:line="28" pos:column="17">DP_F_PLUS<pos:position pos:line="28" pos:column="26"/></name></expr>)<pos:position pos:line="28" pos:column="27"/></condition><then pos:line="28" pos:column="27">  <comment type="block" pos:line="28" pos:column="29">/* Do a sign (+/i) */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="7">signvalue<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">=<pos:position pos:line="29" pos:column="18"/></operator> <literal type="char" pos:line="29" pos:column="19">'+'<pos:position pos:line="29" pos:column="22"/></literal></expr>;<pos:position pos:line="29" pos:column="23"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="30" pos:column="5">else
      <if pos:line="31" pos:column="7">if <condition pos:line="31" pos:column="10">(<expr><name pos:line="31" pos:column="11">flags<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">&amp;<pos:position pos:line="31" pos:column="22"/></operator> <name pos:line="31" pos:column="19">DP_F_SPACE<pos:position pos:line="31" pos:column="29"/></name></expr>)<pos:position pos:line="31" pos:column="30"/></condition><then pos:line="31" pos:column="30">
	<block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="9">signvalue<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <literal type="char" pos:line="32" pos:column="21">' '<pos:position pos:line="32" pos:column="24"/></literal></expr>;<pos:position pos:line="32" pos:column="25"/></expr_stmt></block></then></if></elseif></if>

<cpp:if pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">if<pos:position pos:line="34" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="34" pos:column="5">0<pos:position pos:line="34" pos:column="6"/></literal></expr></cpp:if>
  if (flags &amp; DP_F_UP) caps = 1; <comment type="block" pos:line="35" pos:column="34">/* Should characters be upper case? */</comment>
<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="38" pos:column="3">intpart<pos:position pos:line="38" pos:column="10"/></name> <operator pos:line="38" pos:column="11">=<pos:position pos:line="38" pos:column="12"/></operator> <name pos:line="38" pos:column="13">ufvalue<pos:position pos:line="38" pos:column="20"/></name></expr>;<pos:position pos:line="38" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="40" pos:column="3">/* 
   * Sorry, we only support 9 digits past the decimal because of our 
   * conversion method
   */</comment>
  <if pos:line="44" pos:column="3">if <condition pos:line="44" pos:column="6">(<expr><name pos:line="44" pos:column="7">max<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">&gt;<pos:position pos:line="44" pos:column="15"/></operator> <literal type="number" pos:line="44" pos:column="13">9<pos:position pos:line="44" pos:column="14"/></literal></expr>)<pos:position pos:line="44" pos:column="15"/></condition><then pos:line="44" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="5">max<pos:position pos:line="45" pos:column="8"/></name> <operator pos:line="45" pos:column="9">=<pos:position pos:line="45" pos:column="10"/></operator> <literal type="number" pos:line="45" pos:column="11">9<pos:position pos:line="45" pos:column="12"/></literal></expr>;<pos:position pos:line="45" pos:column="13"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="47" pos:column="3">/* We "cheat" by converting the fractional part to integer by
   * multiplying by a factor of 10
   */</comment>
  <expr_stmt><expr><name pos:line="50" pos:column="3">fracpart<pos:position pos:line="50" pos:column="11"/></name> <operator pos:line="50" pos:column="12">=<pos:position pos:line="50" pos:column="13"/></operator> <call><name pos:line="50" pos:column="14">round<pos:position pos:line="50" pos:column="19"/></name> <argument_list pos:line="50" pos:column="20">(<argument><expr><operator pos:line="50" pos:column="21">(<pos:position pos:line="50" pos:column="22"/></operator><call><name pos:line="50" pos:column="22">pow10<pos:position pos:line="50" pos:column="27"/></name> <argument_list pos:line="50" pos:column="28">(<argument><expr><name pos:line="50" pos:column="29">max<pos:position pos:line="50" pos:column="32"/></name></expr></argument>)<pos:position pos:line="50" pos:column="33"/></argument_list></call><operator pos:line="50" pos:column="33">)<pos:position pos:line="50" pos:column="34"/></operator> <operator pos:line="50" pos:column="35">*<pos:position pos:line="50" pos:column="36"/></operator> <operator pos:line="50" pos:column="37">(<pos:position pos:line="50" pos:column="38"/></operator><name pos:line="50" pos:column="38">ufvalue<pos:position pos:line="50" pos:column="45"/></name> <operator pos:line="50" pos:column="46">-<pos:position pos:line="50" pos:column="47"/></operator> <name pos:line="50" pos:column="48">intpart<pos:position pos:line="50" pos:column="55"/></name><operator pos:line="50" pos:column="55">)<pos:position pos:line="50" pos:column="56"/></operator></expr></argument>)<pos:position pos:line="50" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="58"/></expr_stmt>

  <if pos:line="52" pos:column="3">if <condition pos:line="52" pos:column="6">(<expr><name pos:line="52" pos:column="7">fracpart<pos:position pos:line="52" pos:column="15"/></name> <operator pos:line="52" pos:column="16">&gt;=<pos:position pos:line="52" pos:column="21"/></operator> <call><name pos:line="52" pos:column="19">pow10<pos:position pos:line="52" pos:column="24"/></name> <argument_list pos:line="52" pos:column="25">(<argument><expr><name pos:line="52" pos:column="26">max<pos:position pos:line="52" pos:column="29"/></name></expr></argument>)<pos:position pos:line="52" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="31"/></condition><then pos:line="52" pos:column="31">
  <block pos:line="53" pos:column="3">{
    <expr_stmt><expr><name pos:line="54" pos:column="5">intpart<pos:position pos:line="54" pos:column="12"/></name><operator pos:line="54" pos:column="12">++<pos:position pos:line="54" pos:column="14"/></operator></expr>;<pos:position pos:line="54" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="55" pos:column="5">fracpart<pos:position pos:line="55" pos:column="13"/></name> <operator pos:line="55" pos:column="14">-=<pos:position pos:line="55" pos:column="16"/></operator> <call><name pos:line="55" pos:column="17">pow10<pos:position pos:line="55" pos:column="22"/></name> <argument_list pos:line="55" pos:column="23">(<argument><expr><name pos:line="55" pos:column="24">max<pos:position pos:line="55" pos:column="27"/></name></expr></argument>)<pos:position pos:line="55" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="56" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">ifdef<pos:position pos:line="58" pos:column="7"/></cpp:directive> <name pos:line="58" pos:column="8">DEBUG_SNPRINTF<pos:position pos:line="58" pos:column="22"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="59" pos:column="3">dprint<pos:position pos:line="59" pos:column="9"/></name> <argument_list pos:line="59" pos:column="10">(<argument><expr><literal type="number" pos:line="59" pos:column="11">1<pos:position pos:line="59" pos:column="12"/></literal></expr></argument>, <argument><expr><operator pos:line="59" pos:column="14">(<pos:position pos:line="59" pos:column="15"/></operator><name pos:line="59" pos:column="15">debugfile<pos:position pos:line="59" pos:column="24"/></name><operator pos:line="59" pos:column="24">,<pos:position pos:line="59" pos:column="25"/></operator> <literal type="string" pos:line="59" pos:column="26">"fmtfp: %f =? %d.%d\n"<pos:position pos:line="59" pos:column="48"/></literal><operator pos:line="59" pos:column="48">,<pos:position pos:line="59" pos:column="49"/></operator> <name pos:line="59" pos:column="50">fvalue<pos:position pos:line="59" pos:column="56"/></name><operator pos:line="59" pos:column="56">,<pos:position pos:line="59" pos:column="57"/></operator> <name pos:line="59" pos:column="58">intpart<pos:position pos:line="59" pos:column="65"/></name><operator pos:line="59" pos:column="65">,<pos:position pos:line="59" pos:column="66"/></operator> <name pos:line="59" pos:column="67">fracpart<pos:position pos:line="59" pos:column="75"/></name><operator pos:line="59" pos:column="75">)<pos:position pos:line="59" pos:column="76"/></operator></expr></argument>)<pos:position pos:line="59" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="78"/></expr_stmt>
<cpp:endif pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">endif<pos:position pos:line="60" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="62" pos:column="3">/* Convert integer part */</comment>
  <do pos:line="63" pos:column="3">do <block pos:line="63" pos:column="6">{
    <expr_stmt><expr><name><name pos:line="64" pos:column="5">iconvert<pos:position pos:line="64" pos:column="13"/></name><index pos:line="64" pos:column="13">[<expr><name pos:line="64" pos:column="14">iplace<pos:position pos:line="64" pos:column="20"/></name><operator pos:line="64" pos:column="20">++<pos:position pos:line="64" pos:column="22"/></operator></expr>]<pos:position pos:line="64" pos:column="23"/></index></name> <operator pos:line="64" pos:column="24">=<pos:position pos:line="64" pos:column="25"/></operator>
      <operator pos:line="65" pos:column="7">(<pos:position pos:line="65" pos:column="8"/></operator><ternary><condition><expr><name pos:line="65" pos:column="8">caps<pos:position pos:line="65" pos:column="12"/></name></expr>?<pos:position pos:line="65" pos:column="13"/></condition><then pos:line="65" pos:column="13"> <expr><literal type="string" pos:line="65" pos:column="14">"0123456789ABCDEF"<pos:position pos:line="65" pos:column="32"/></literal></expr></then><else pos:line="65" pos:column="32">:<expr><literal type="string" pos:line="65" pos:column="33">"0123456789abcdef"<pos:position pos:line="65" pos:column="51"/></literal></expr></else></ternary><operator pos:line="65" pos:column="51">)<pos:position pos:line="65" pos:column="52"/></operator><index pos:line="65" pos:column="52">[<expr><name pos:line="65" pos:column="53">intpart<pos:position pos:line="65" pos:column="60"/></name> <operator pos:line="65" pos:column="61">%<pos:position pos:line="65" pos:column="62"/></operator> <literal type="number" pos:line="65" pos:column="63">10<pos:position pos:line="65" pos:column="65"/></literal></expr>]<pos:position pos:line="65" pos:column="66"/></index></expr>;<pos:position pos:line="65" pos:column="67"/></expr_stmt>
    <expr_stmt><expr><name pos:line="66" pos:column="5">intpart<pos:position pos:line="66" pos:column="12"/></name> <operator pos:line="66" pos:column="13">=<pos:position pos:line="66" pos:column="14"/></operator> <operator pos:line="66" pos:column="15">(<pos:position pos:line="66" pos:column="16"/></operator><name pos:line="66" pos:column="16">intpart<pos:position pos:line="66" pos:column="23"/></name> <operator pos:line="66" pos:column="24">/<pos:position pos:line="66" pos:column="25"/></operator> <literal type="number" pos:line="66" pos:column="26">10<pos:position pos:line="66" pos:column="28"/></literal><operator pos:line="66" pos:column="28">)<pos:position pos:line="66" pos:column="29"/></operator></expr>;<pos:position pos:line="66" pos:column="30"/></expr_stmt>
  }<pos:position pos:line="67" pos:column="4"/></block> while<condition pos:line="67" pos:column="10">(<expr><name pos:line="67" pos:column="11">intpart<pos:position pos:line="67" pos:column="18"/></name> <operator pos:line="67" pos:column="19">&amp;&amp;<pos:position pos:line="67" pos:column="29"/></operator> <operator pos:line="67" pos:column="22">(<pos:position pos:line="67" pos:column="23"/></operator><name pos:line="67" pos:column="23">iplace<pos:position pos:line="67" pos:column="29"/></name> <operator pos:line="67" pos:column="30">&lt;<pos:position pos:line="67" pos:column="34"/></operator> <literal type="number" pos:line="67" pos:column="32">20<pos:position pos:line="67" pos:column="34"/></literal><operator pos:line="67" pos:column="34">)<pos:position pos:line="67" pos:column="35"/></operator></expr>)<pos:position pos:line="67" pos:column="36"/></condition>;<pos:position pos:line="67" pos:column="37"/></do>
  <if pos:line="68" pos:column="3">if <condition pos:line="68" pos:column="6">(<expr><name pos:line="68" pos:column="7">iplace<pos:position pos:line="68" pos:column="13"/></name> <operator pos:line="68" pos:column="14">==<pos:position pos:line="68" pos:column="16"/></operator> <literal type="number" pos:line="68" pos:column="17">20<pos:position pos:line="68" pos:column="19"/></literal></expr>)<pos:position pos:line="68" pos:column="20"/></condition><then pos:line="68" pos:column="20"> <block type="pseudo"><expr_stmt><expr><name pos:line="68" pos:column="21">iplace<pos:position pos:line="68" pos:column="27"/></name><operator pos:line="68" pos:column="27">--<pos:position pos:line="68" pos:column="29"/></operator></expr>;<pos:position pos:line="68" pos:column="30"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name><name pos:line="69" pos:column="3">iconvert<pos:position pos:line="69" pos:column="11"/></name><index pos:line="69" pos:column="11">[<expr><name pos:line="69" pos:column="12">iplace<pos:position pos:line="69" pos:column="18"/></name></expr>]<pos:position pos:line="69" pos:column="19"/></index></name> <operator pos:line="69" pos:column="20">=<pos:position pos:line="69" pos:column="21"/></operator> <literal type="number" pos:line="69" pos:column="22">0<pos:position pos:line="69" pos:column="23"/></literal></expr>;<pos:position pos:line="69" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="71" pos:column="3">/* Convert fractional part */</comment>
  <do pos:line="72" pos:column="3">do <block pos:line="72" pos:column="6">{
    <expr_stmt><expr><name><name pos:line="73" pos:column="5">fconvert<pos:position pos:line="73" pos:column="13"/></name><index pos:line="73" pos:column="13">[<expr><name pos:line="73" pos:column="14">fplace<pos:position pos:line="73" pos:column="20"/></name><operator pos:line="73" pos:column="20">++<pos:position pos:line="73" pos:column="22"/></operator></expr>]<pos:position pos:line="73" pos:column="23"/></index></name> <operator pos:line="73" pos:column="24">=<pos:position pos:line="73" pos:column="25"/></operator>
      <operator pos:line="74" pos:column="7">(<pos:position pos:line="74" pos:column="8"/></operator><ternary><condition><expr><name pos:line="74" pos:column="8">caps<pos:position pos:line="74" pos:column="12"/></name></expr>?<pos:position pos:line="74" pos:column="13"/></condition><then pos:line="74" pos:column="13"> <expr><literal type="string" pos:line="74" pos:column="14">"0123456789ABCDEF"<pos:position pos:line="74" pos:column="32"/></literal></expr></then><else pos:line="74" pos:column="32">:<expr><literal type="string" pos:line="74" pos:column="33">"0123456789abcdef"<pos:position pos:line="74" pos:column="51"/></literal></expr></else></ternary><operator pos:line="74" pos:column="51">)<pos:position pos:line="74" pos:column="52"/></operator><index pos:line="74" pos:column="52">[<expr><name pos:line="74" pos:column="53">fracpart<pos:position pos:line="74" pos:column="61"/></name> <operator pos:line="74" pos:column="62">%<pos:position pos:line="74" pos:column="63"/></operator> <literal type="number" pos:line="74" pos:column="64">10<pos:position pos:line="74" pos:column="66"/></literal></expr>]<pos:position pos:line="74" pos:column="67"/></index></expr>;<pos:position pos:line="74" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><name pos:line="75" pos:column="5">fracpart<pos:position pos:line="75" pos:column="13"/></name> <operator pos:line="75" pos:column="14">=<pos:position pos:line="75" pos:column="15"/></operator> <operator pos:line="75" pos:column="16">(<pos:position pos:line="75" pos:column="17"/></operator><name pos:line="75" pos:column="17">fracpart<pos:position pos:line="75" pos:column="25"/></name> <operator pos:line="75" pos:column="26">/<pos:position pos:line="75" pos:column="27"/></operator> <literal type="number" pos:line="75" pos:column="28">10<pos:position pos:line="75" pos:column="30"/></literal><operator pos:line="75" pos:column="30">)<pos:position pos:line="75" pos:column="31"/></operator></expr>;<pos:position pos:line="75" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="76" pos:column="4"/></block> while<condition pos:line="76" pos:column="10">(<expr><name pos:line="76" pos:column="11">fracpart<pos:position pos:line="76" pos:column="19"/></name> <operator pos:line="76" pos:column="20">&amp;&amp;<pos:position pos:line="76" pos:column="30"/></operator> <operator pos:line="76" pos:column="23">(<pos:position pos:line="76" pos:column="24"/></operator><name pos:line="76" pos:column="24">fplace<pos:position pos:line="76" pos:column="30"/></name> <operator pos:line="76" pos:column="31">&lt;<pos:position pos:line="76" pos:column="35"/></operator> <literal type="number" pos:line="76" pos:column="33">20<pos:position pos:line="76" pos:column="35"/></literal><operator pos:line="76" pos:column="35">)<pos:position pos:line="76" pos:column="36"/></operator></expr>)<pos:position pos:line="76" pos:column="37"/></condition>;<pos:position pos:line="76" pos:column="38"/></do>
  <if pos:line="77" pos:column="3">if <condition pos:line="77" pos:column="6">(<expr><name pos:line="77" pos:column="7">fplace<pos:position pos:line="77" pos:column="13"/></name> <operator pos:line="77" pos:column="14">==<pos:position pos:line="77" pos:column="16"/></operator> <literal type="number" pos:line="77" pos:column="17">20<pos:position pos:line="77" pos:column="19"/></literal></expr>)<pos:position pos:line="77" pos:column="20"/></condition><then pos:line="77" pos:column="20"> <block type="pseudo"><expr_stmt><expr><name pos:line="77" pos:column="21">fplace<pos:position pos:line="77" pos:column="27"/></name><operator pos:line="77" pos:column="27">--<pos:position pos:line="77" pos:column="29"/></operator></expr>;<pos:position pos:line="77" pos:column="30"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name><name pos:line="78" pos:column="3">fconvert<pos:position pos:line="78" pos:column="11"/></name><index pos:line="78" pos:column="11">[<expr><name pos:line="78" pos:column="12">fplace<pos:position pos:line="78" pos:column="18"/></name></expr>]<pos:position pos:line="78" pos:column="19"/></index></name> <operator pos:line="78" pos:column="20">=<pos:position pos:line="78" pos:column="21"/></operator> <literal type="number" pos:line="78" pos:column="22">0<pos:position pos:line="78" pos:column="23"/></literal></expr>;<pos:position pos:line="78" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="80" pos:column="3">/* -1 for decimal point, another -1 if we are printing a sign */</comment>
  <expr_stmt><expr><name pos:line="81" pos:column="3">padlen<pos:position pos:line="81" pos:column="9"/></name> <operator pos:line="81" pos:column="10">=<pos:position pos:line="81" pos:column="11"/></operator> <name pos:line="81" pos:column="12">min<pos:position pos:line="81" pos:column="15"/></name> <operator pos:line="81" pos:column="16">-<pos:position pos:line="81" pos:column="17"/></operator> <name pos:line="81" pos:column="18">iplace<pos:position pos:line="81" pos:column="24"/></name> <operator pos:line="81" pos:column="25">-<pos:position pos:line="81" pos:column="26"/></operator> <name pos:line="81" pos:column="27">max<pos:position pos:line="81" pos:column="30"/></name> <operator pos:line="81" pos:column="31">-<pos:position pos:line="81" pos:column="32"/></operator> <literal type="number" pos:line="81" pos:column="33">1<pos:position pos:line="81" pos:column="34"/></literal> <operator pos:line="81" pos:column="35">-<pos:position pos:line="81" pos:column="36"/></operator> <operator pos:line="81" pos:column="37">(<pos:position pos:line="81" pos:column="38"/></operator><ternary><condition><expr><operator pos:line="81" pos:column="38">(<pos:position pos:line="81" pos:column="39"/></operator><name pos:line="81" pos:column="39">signvalue<pos:position pos:line="81" pos:column="48"/></name><operator pos:line="81" pos:column="48">)<pos:position pos:line="81" pos:column="49"/></operator></expr> ?<pos:position pos:line="81" pos:column="51"/></condition><then pos:line="81" pos:column="51"> <expr><literal type="number" pos:line="81" pos:column="52">1<pos:position pos:line="81" pos:column="53"/></literal></expr> <pos:position pos:line="81" pos:column="54"/></then><else pos:line="81" pos:column="54">: <expr><literal type="number" pos:line="81" pos:column="56">0<pos:position pos:line="81" pos:column="57"/></literal></expr></else></ternary><operator pos:line="81" pos:column="57">)<pos:position pos:line="81" pos:column="58"/></operator></expr>;<pos:position pos:line="81" pos:column="59"/></expr_stmt> 
  <expr_stmt><expr><name pos:line="82" pos:column="3">zpadlen<pos:position pos:line="82" pos:column="10"/></name> <operator pos:line="82" pos:column="11">=<pos:position pos:line="82" pos:column="12"/></operator> <name pos:line="82" pos:column="13">max<pos:position pos:line="82" pos:column="16"/></name> <operator pos:line="82" pos:column="17">-<pos:position pos:line="82" pos:column="18"/></operator> <name pos:line="82" pos:column="19">fplace<pos:position pos:line="82" pos:column="25"/></name></expr>;<pos:position pos:line="82" pos:column="26"/></expr_stmt>
  <if pos:line="83" pos:column="3">if <condition pos:line="83" pos:column="6">(<expr><name pos:line="83" pos:column="7">zpadlen<pos:position pos:line="83" pos:column="14"/></name> <operator pos:line="83" pos:column="15">&lt;<pos:position pos:line="83" pos:column="19"/></operator> <literal type="number" pos:line="83" pos:column="17">0<pos:position pos:line="83" pos:column="18"/></literal></expr>)<pos:position pos:line="83" pos:column="19"/></condition><then pos:line="83" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><name pos:line="84" pos:column="5">zpadlen<pos:position pos:line="84" pos:column="12"/></name> <operator pos:line="84" pos:column="13">=<pos:position pos:line="84" pos:column="14"/></operator> <literal type="number" pos:line="84" pos:column="15">0<pos:position pos:line="84" pos:column="16"/></literal></expr>;<pos:position pos:line="84" pos:column="17"/></expr_stmt></block></then></if>
  <if pos:line="85" pos:column="3">if <condition pos:line="85" pos:column="6">(<expr><name pos:line="85" pos:column="7">padlen<pos:position pos:line="85" pos:column="13"/></name> <operator pos:line="85" pos:column="14">&lt;<pos:position pos:line="85" pos:column="18"/></operator> <literal type="number" pos:line="85" pos:column="16">0<pos:position pos:line="85" pos:column="17"/></literal></expr>)<pos:position pos:line="85" pos:column="18"/></condition><then pos:line="85" pos:column="18"> 
    <block type="pseudo"><expr_stmt><expr><name pos:line="86" pos:column="5">padlen<pos:position pos:line="86" pos:column="11"/></name> <operator pos:line="86" pos:column="12">=<pos:position pos:line="86" pos:column="13"/></operator> <literal type="number" pos:line="86" pos:column="14">0<pos:position pos:line="86" pos:column="15"/></literal></expr>;<pos:position pos:line="86" pos:column="16"/></expr_stmt></block></then></if>
  <if pos:line="87" pos:column="3">if <condition pos:line="87" pos:column="6">(<expr><name pos:line="87" pos:column="7">flags<pos:position pos:line="87" pos:column="12"/></name> <operator pos:line="87" pos:column="13">&amp;<pos:position pos:line="87" pos:column="18"/></operator> <name pos:line="87" pos:column="15">DP_F_MINUS<pos:position pos:line="87" pos:column="25"/></name></expr>)<pos:position pos:line="87" pos:column="26"/></condition><then pos:line="87" pos:column="26"> 
    <block type="pseudo"><expr_stmt><expr><name pos:line="88" pos:column="5">padlen<pos:position pos:line="88" pos:column="11"/></name> <operator pos:line="88" pos:column="12">=<pos:position pos:line="88" pos:column="13"/></operator> <operator pos:line="88" pos:column="14">-<pos:position pos:line="88" pos:column="15"/></operator><name pos:line="88" pos:column="15">padlen<pos:position pos:line="88" pos:column="21"/></name></expr>;<pos:position pos:line="88" pos:column="22"/></expr_stmt></block></then></if> <comment type="block" pos:line="88" pos:column="23">/* Left Justifty */</comment>

  <if pos:line="90" pos:column="3">if <condition pos:line="90" pos:column="6">(<expr><operator pos:line="90" pos:column="7">(<pos:position pos:line="90" pos:column="8"/></operator><name pos:line="90" pos:column="8">flags<pos:position pos:line="90" pos:column="13"/></name> <operator pos:line="90" pos:column="14">&amp;<pos:position pos:line="90" pos:column="19"/></operator> <name pos:line="90" pos:column="16">DP_F_ZERO<pos:position pos:line="90" pos:column="25"/></name><operator pos:line="90" pos:column="25">)<pos:position pos:line="90" pos:column="26"/></operator> <operator pos:line="90" pos:column="27">&amp;&amp;<pos:position pos:line="90" pos:column="37"/></operator> <operator pos:line="90" pos:column="30">(<pos:position pos:line="90" pos:column="31"/></operator><name pos:line="90" pos:column="31">padlen<pos:position pos:line="90" pos:column="37"/></name> <operator pos:line="90" pos:column="38">&gt;<pos:position pos:line="90" pos:column="42"/></operator> <literal type="number" pos:line="90" pos:column="40">0<pos:position pos:line="90" pos:column="41"/></literal><operator pos:line="90" pos:column="41">)<pos:position pos:line="90" pos:column="42"/></operator></expr>)<pos:position pos:line="90" pos:column="43"/></condition><then pos:line="90" pos:column="43"> 
  <block pos:line="91" pos:column="3">{
    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><name pos:line="92" pos:column="9">signvalue<pos:position pos:line="92" pos:column="18"/></name></expr>)<pos:position pos:line="92" pos:column="19"/></condition><then pos:line="92" pos:column="19"> 
    <block pos:line="93" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="94" pos:column="7">dopr_outch<pos:position pos:line="94" pos:column="17"/></name> <argument_list pos:line="94" pos:column="18">(<argument><expr><name pos:line="94" pos:column="19">buffer<pos:position pos:line="94" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="27">currlen<pos:position pos:line="94" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="36">maxlen<pos:position pos:line="94" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="44">signvalue<pos:position pos:line="94" pos:column="53"/></name></expr></argument>)<pos:position pos:line="94" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="95" pos:column="7">--<pos:position pos:line="95" pos:column="9"/></operator><name pos:line="95" pos:column="9">padlen<pos:position pos:line="95" pos:column="15"/></name></expr>;<pos:position pos:line="95" pos:column="16"/></expr_stmt>
      <expr_stmt><expr><name pos:line="96" pos:column="7">signvalue<pos:position pos:line="96" pos:column="16"/></name> <operator pos:line="96" pos:column="17">=<pos:position pos:line="96" pos:column="18"/></operator> <literal type="number" pos:line="96" pos:column="19">0<pos:position pos:line="96" pos:column="20"/></literal></expr>;<pos:position pos:line="96" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="97" pos:column="6"/></block></then></if>
    <while pos:line="98" pos:column="5">while <condition pos:line="98" pos:column="11">(<expr><name pos:line="98" pos:column="12">padlen<pos:position pos:line="98" pos:column="18"/></name> <operator pos:line="98" pos:column="19">&gt;<pos:position pos:line="98" pos:column="23"/></operator> <literal type="number" pos:line="98" pos:column="21">0<pos:position pos:line="98" pos:column="22"/></literal></expr>)<pos:position pos:line="98" pos:column="23"/></condition>
    <block pos:line="99" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="100" pos:column="7">dopr_outch<pos:position pos:line="100" pos:column="17"/></name> <argument_list pos:line="100" pos:column="18">(<argument><expr><name pos:line="100" pos:column="19">buffer<pos:position pos:line="100" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="27">currlen<pos:position pos:line="100" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="36">maxlen<pos:position pos:line="100" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="100" pos:column="44">'0'<pos:position pos:line="100" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="101" pos:column="7">--<pos:position pos:line="101" pos:column="9"/></operator><name pos:line="101" pos:column="9">padlen<pos:position pos:line="101" pos:column="15"/></name></expr>;<pos:position pos:line="101" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="102" pos:column="6"/></block></while>
  }<pos:position pos:line="103" pos:column="4"/></block></then></if>
  <while pos:line="104" pos:column="3">while <condition pos:line="104" pos:column="9">(<expr><name pos:line="104" pos:column="10">padlen<pos:position pos:line="104" pos:column="16"/></name> <operator pos:line="104" pos:column="17">&gt;<pos:position pos:line="104" pos:column="21"/></operator> <literal type="number" pos:line="104" pos:column="19">0<pos:position pos:line="104" pos:column="20"/></literal></expr>)<pos:position pos:line="104" pos:column="21"/></condition>
  <block pos:line="105" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="106" pos:column="5">dopr_outch<pos:position pos:line="106" pos:column="15"/></name> <argument_list pos:line="106" pos:column="16">(<argument><expr><name pos:line="106" pos:column="17">buffer<pos:position pos:line="106" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="25">currlen<pos:position pos:line="106" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="34">maxlen<pos:position pos:line="106" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="106" pos:column="42">' '<pos:position pos:line="106" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="107" pos:column="5">--<pos:position pos:line="107" pos:column="7"/></operator><name pos:line="107" pos:column="7">padlen<pos:position pos:line="107" pos:column="13"/></name></expr>;<pos:position pos:line="107" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="108" pos:column="4"/></block></while>
  <if pos:line="109" pos:column="3">if <condition pos:line="109" pos:column="6">(<expr><name pos:line="109" pos:column="7">signvalue<pos:position pos:line="109" pos:column="16"/></name></expr>)<pos:position pos:line="109" pos:column="17"/></condition><then pos:line="109" pos:column="17"> 
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="110" pos:column="5">dopr_outch<pos:position pos:line="110" pos:column="15"/></name> <argument_list pos:line="110" pos:column="16">(<argument><expr><name pos:line="110" pos:column="17">buffer<pos:position pos:line="110" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="25">currlen<pos:position pos:line="110" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="34">maxlen<pos:position pos:line="110" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="42">signvalue<pos:position pos:line="110" pos:column="51"/></name></expr></argument>)<pos:position pos:line="110" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="53"/></expr_stmt></block></then></if>

  <while pos:line="112" pos:column="3">while <condition pos:line="112" pos:column="9">(<expr><name pos:line="112" pos:column="10">iplace<pos:position pos:line="112" pos:column="16"/></name> <operator pos:line="112" pos:column="17">&gt;<pos:position pos:line="112" pos:column="21"/></operator> <literal type="number" pos:line="112" pos:column="19">0<pos:position pos:line="112" pos:column="20"/></literal></expr>)<pos:position pos:line="112" pos:column="21"/></condition> 
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="113" pos:column="5">dopr_outch<pos:position pos:line="113" pos:column="15"/></name> <argument_list pos:line="113" pos:column="16">(<argument><expr><name pos:line="113" pos:column="17">buffer<pos:position pos:line="113" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="25">currlen<pos:position pos:line="113" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="34">maxlen<pos:position pos:line="113" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="113" pos:column="42">iconvert<pos:position pos:line="113" pos:column="50"/></name><index pos:line="113" pos:column="50">[<expr><operator pos:line="113" pos:column="51">--<pos:position pos:line="113" pos:column="53"/></operator><name pos:line="113" pos:column="53">iplace<pos:position pos:line="113" pos:column="59"/></name></expr>]<pos:position pos:line="113" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="113" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="62"/></expr_stmt></block></while>

  <comment type="block" pos:line="115" pos:column="3">/*
   * Decimal point.  This should probably use locale to find the correct
   * char to print out.
   */</comment>
  <expr_stmt><expr><call><name pos:line="119" pos:column="3">dopr_outch<pos:position pos:line="119" pos:column="13"/></name> <argument_list pos:line="119" pos:column="14">(<argument><expr><name pos:line="119" pos:column="15">buffer<pos:position pos:line="119" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="23">currlen<pos:position pos:line="119" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="32">maxlen<pos:position pos:line="119" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="119" pos:column="40">'.'<pos:position pos:line="119" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="45"/></expr_stmt>

  <while pos:line="121" pos:column="3">while <condition pos:line="121" pos:column="9">(<expr><name pos:line="121" pos:column="10">fplace<pos:position pos:line="121" pos:column="16"/></name> <operator pos:line="121" pos:column="17">&gt;<pos:position pos:line="121" pos:column="21"/></operator> <literal type="number" pos:line="121" pos:column="19">0<pos:position pos:line="121" pos:column="20"/></literal></expr>)<pos:position pos:line="121" pos:column="21"/></condition> 
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="122" pos:column="5">dopr_outch<pos:position pos:line="122" pos:column="15"/></name> <argument_list pos:line="122" pos:column="16">(<argument><expr><name pos:line="122" pos:column="17">buffer<pos:position pos:line="122" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="25">currlen<pos:position pos:line="122" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="34">maxlen<pos:position pos:line="122" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="122" pos:column="42">fconvert<pos:position pos:line="122" pos:column="50"/></name><index pos:line="122" pos:column="50">[<expr><operator pos:line="122" pos:column="51">--<pos:position pos:line="122" pos:column="53"/></operator><name pos:line="122" pos:column="53">fplace<pos:position pos:line="122" pos:column="59"/></name></expr>]<pos:position pos:line="122" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="122" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="62"/></expr_stmt></block></while>

  <while pos:line="124" pos:column="3">while <condition pos:line="124" pos:column="9">(<expr><name pos:line="124" pos:column="10">zpadlen<pos:position pos:line="124" pos:column="17"/></name> <operator pos:line="124" pos:column="18">&gt;<pos:position pos:line="124" pos:column="22"/></operator> <literal type="number" pos:line="124" pos:column="20">0<pos:position pos:line="124" pos:column="21"/></literal></expr>)<pos:position pos:line="124" pos:column="22"/></condition>
  <block pos:line="125" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="126" pos:column="5">dopr_outch<pos:position pos:line="126" pos:column="15"/></name> <argument_list pos:line="126" pos:column="16">(<argument><expr><name pos:line="126" pos:column="17">buffer<pos:position pos:line="126" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="25">currlen<pos:position pos:line="126" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="34">maxlen<pos:position pos:line="126" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="126" pos:column="42">'0'<pos:position pos:line="126" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="127" pos:column="5">--<pos:position pos:line="127" pos:column="7"/></operator><name pos:line="127" pos:column="7">zpadlen<pos:position pos:line="127" pos:column="14"/></name></expr>;<pos:position pos:line="127" pos:column="15"/></expr_stmt>
  }<pos:position pos:line="128" pos:column="4"/></block></while>

  <while pos:line="130" pos:column="3">while <condition pos:line="130" pos:column="9">(<expr><name pos:line="130" pos:column="10">padlen<pos:position pos:line="130" pos:column="16"/></name> <operator pos:line="130" pos:column="17">&lt;<pos:position pos:line="130" pos:column="21"/></operator> <literal type="number" pos:line="130" pos:column="19">0<pos:position pos:line="130" pos:column="20"/></literal></expr>)<pos:position pos:line="130" pos:column="21"/></condition> 
  <block pos:line="131" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="132" pos:column="5">dopr_outch<pos:position pos:line="132" pos:column="15"/></name> <argument_list pos:line="132" pos:column="16">(<argument><expr><name pos:line="132" pos:column="17">buffer<pos:position pos:line="132" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="25">currlen<pos:position pos:line="132" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="34">maxlen<pos:position pos:line="132" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="132" pos:column="42">' '<pos:position pos:line="132" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="132" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="133" pos:column="5">++<pos:position pos:line="133" pos:column="7"/></operator><name pos:line="133" pos:column="7">padlen<pos:position pos:line="133" pos:column="13"/></name></expr>;<pos:position pos:line="133" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="134" pos:column="4"/></block></while>
}<pos:position pos:line="135" pos:column="2"/></block></function></unit>
