<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_524_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">count_body_parts<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">BODY<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">body<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">flags<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">count<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><literal type="number" pos:line="3" pos:column="15">0<pos:position pos:line="3" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">shallcount<pos:position pos:line="4" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="19">shallrecurse<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">BODY<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">bp<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">body<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">==<pos:position pos:line="7" pos:column="14"/></operator> <name pos:line="7" pos:column="15">NULL<pos:position pos:line="7" pos:column="19"/></name></expr>)<pos:position pos:line="7" pos:column="20"/></condition><then pos:line="7" pos:column="20">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><literal type="number" pos:line="8" pos:column="12">0<pos:position pos:line="8" pos:column="13"/></literal></expr>;<pos:position pos:line="8" pos:column="14"/></return></block></then></if>

  <for pos:line="10" pos:column="3">for <control pos:line="10" pos:column="7">(<init><expr><name pos:line="10" pos:column="8">bp<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <name pos:line="10" pos:column="13">body<pos:position pos:line="10" pos:column="17"/></name></expr>;<pos:position pos:line="10" pos:column="18"/></init> <condition><expr><name pos:line="10" pos:column="19">bp<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">!=<pos:position pos:line="10" pos:column="24"/></operator> <name pos:line="10" pos:column="25">NULL<pos:position pos:line="10" pos:column="29"/></name></expr>;<pos:position pos:line="10" pos:column="30"/></condition> <incr><expr><name pos:line="10" pos:column="31">bp<pos:position pos:line="10" pos:column="33"/></name> <operator pos:line="10" pos:column="34">=<pos:position pos:line="10" pos:column="35"/></operator> <name><name pos:line="10" pos:column="36">bp<pos:position pos:line="10" pos:column="38"/></name><operator pos:line="10" pos:column="38">-&gt;<pos:position pos:line="10" pos:column="43"/></operator><name pos:line="10" pos:column="40">next<pos:position pos:line="10" pos:column="44"/></name></name></expr></incr>)<pos:position pos:line="10" pos:column="45"/></control>
  <block pos:line="11" pos:column="3">{
    <comment type="block" pos:line="12" pos:column="5">/* Initial disposition is to count and not to recurse this part. */</comment>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">AT_COUNT<pos:position pos:line="13" pos:column="13"/></name><argument_list pos:line="13" pos:column="13">(<argument><expr><literal type="string" pos:line="13" pos:column="14">"default"<pos:position pos:line="13" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">shallrecurse<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <literal type="number" pos:line="14" pos:column="20">0<pos:position pos:line="14" pos:column="21"/></literal></expr>;<pos:position pos:line="14" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">dprint<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><literal type="number" pos:line="16" pos:column="12">5<pos:position pos:line="16" pos:column="13"/></literal></expr></argument>, <argument><expr><operator pos:line="16" pos:column="15">(<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="16">debugfile<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">,<pos:position pos:line="16" pos:column="26"/></operator> <literal type="string" pos:line="16" pos:column="27">"bp: desc=\"%s\"; fn=\"%s\", type=\"%d/%s\"\n"<pos:position pos:line="16" pos:column="73"/></literal><operator pos:line="16" pos:column="73">,<pos:position pos:line="16" pos:column="74"/></operator>
	   <ternary><condition><expr><name><name pos:line="17" pos:column="12">bp<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">-&gt;<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="16">description<pos:position pos:line="17" pos:column="27"/></name></name></expr> ?<pos:position pos:line="17" pos:column="29"/></condition><then pos:line="17" pos:column="29"> <expr><name><name pos:line="17" pos:column="30">bp<pos:position pos:line="17" pos:column="32"/></name><operator pos:line="17" pos:column="32">-&gt;<pos:position pos:line="17" pos:column="37"/></operator><name pos:line="17" pos:column="34">description<pos:position pos:line="17" pos:column="45"/></name></name></expr> <pos:position pos:line="17" pos:column="46"/></then><else pos:line="17" pos:column="46">: <expr><operator pos:line="17" pos:column="48">(<pos:position pos:line="17" pos:column="49"/></operator><literal type="string" pos:line="17" pos:column="49">"none"<pos:position pos:line="17" pos:column="55"/></literal><operator pos:line="17" pos:column="55">)<pos:position pos:line="17" pos:column="56"/></operator></expr></else></ternary><operator pos:line="17" pos:column="56">,<pos:position pos:line="17" pos:column="57"/></operator>
	   <ternary><condition><expr><name><name pos:line="18" pos:column="12">bp<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">-&gt;<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="16">filename<pos:position pos:line="18" pos:column="24"/></name></name></expr> ?<pos:position pos:line="18" pos:column="26"/></condition><then pos:line="18" pos:column="26"> <expr><name><name pos:line="18" pos:column="27">bp<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">-&gt;<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="31">filename<pos:position pos:line="18" pos:column="39"/></name></name></expr> <pos:position pos:line="18" pos:column="40"/></then><else pos:line="18" pos:column="40">:
			<expr><ternary><condition><expr><name><name pos:line="19" pos:column="25">bp<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">-&gt;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="29">d_filename<pos:position pos:line="19" pos:column="39"/></name></name></expr> ?<pos:position pos:line="19" pos:column="41"/></condition><then pos:line="19" pos:column="41"> <expr><name><name pos:line="19" pos:column="42">bp<pos:position pos:line="19" pos:column="44"/></name><operator pos:line="19" pos:column="44">-&gt;<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="46">d_filename<pos:position pos:line="19" pos:column="56"/></name></name></expr> <pos:position pos:line="19" pos:column="57"/></then><else pos:line="19" pos:column="57">: <expr><literal type="string" pos:line="19" pos:column="59">"(none)"<pos:position pos:line="19" pos:column="67"/></literal></expr></else></ternary></expr></else></ternary><operator pos:line="19" pos:column="67">,<pos:position pos:line="19" pos:column="68"/></operator>
	   <name><name pos:line="20" pos:column="12">bp<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">-&gt;<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="16">type<pos:position pos:line="20" pos:column="20"/></name></name><operator pos:line="20" pos:column="20">,<pos:position pos:line="20" pos:column="21"/></operator> <ternary><condition><expr><name><name pos:line="20" pos:column="22">bp<pos:position pos:line="20" pos:column="24"/></name><operator pos:line="20" pos:column="24">-&gt;<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="26">subtype<pos:position pos:line="20" pos:column="33"/></name></name></expr> ?<pos:position pos:line="20" pos:column="35"/></condition><then pos:line="20" pos:column="35"> <expr><name><name pos:line="20" pos:column="36">bp<pos:position pos:line="20" pos:column="38"/></name><operator pos:line="20" pos:column="38">-&gt;<pos:position pos:line="20" pos:column="43"/></operator><name pos:line="20" pos:column="40">subtype<pos:position pos:line="20" pos:column="47"/></name></name></expr> <pos:position pos:line="20" pos:column="48"/></then><else pos:line="20" pos:column="48">: <expr><literal type="string" pos:line="20" pos:column="50">"*"<pos:position pos:line="20" pos:column="53"/></literal></expr></else></ternary><operator pos:line="20" pos:column="53">)<pos:position pos:line="20" pos:column="54"/></operator></expr></argument>)<pos:position pos:line="20" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="56"/></expr_stmt>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name><name pos:line="22" pos:column="9">bp<pos:position pos:line="22" pos:column="11"/></name><operator pos:line="22" pos:column="11">-&gt;<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="13">type<pos:position pos:line="22" pos:column="17"/></name></name> <operator pos:line="22" pos:column="18">==<pos:position pos:line="22" pos:column="20"/></operator> <name pos:line="22" pos:column="21">TYPEMESSAGE<pos:position pos:line="22" pos:column="32"/></name></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33">
    <block pos:line="23" pos:column="5">{
      <expr_stmt><expr><name pos:line="24" pos:column="7">shallrecurse<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">=<pos:position pos:line="24" pos:column="21"/></operator> <literal type="number" pos:line="24" pos:column="22">1<pos:position pos:line="24" pos:column="23"/></literal></expr>;<pos:position pos:line="24" pos:column="24"/></expr_stmt>

      <comment type="block" pos:line="26" pos:column="7">/* If it's an external body pointer, don't recurse it. */</comment>
      <if pos:line="27" pos:column="7">if <condition pos:line="27" pos:column="10">(<expr><operator pos:line="27" pos:column="11">!<pos:position pos:line="27" pos:column="12"/></operator><call><name pos:line="27" pos:column="12">ascii_strcasecmp<pos:position pos:line="27" pos:column="28"/></name> <argument_list pos:line="27" pos:column="29">(<argument><expr><name><name pos:line="27" pos:column="30">bp<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">-&gt;<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="34">subtype<pos:position pos:line="27" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="43">"external-body"<pos:position pos:line="27" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="60"/></condition><then pos:line="27" pos:column="60">
	<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="9">shallrecurse<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">=<pos:position pos:line="28" pos:column="23"/></operator> <literal type="number" pos:line="28" pos:column="24">0<pos:position pos:line="28" pos:column="25"/></literal></expr>;<pos:position pos:line="28" pos:column="26"/></expr_stmt></block></then></if>

      <comment type="block" pos:line="30" pos:column="7">/* Don't count containers if they're top-level. */</comment>
      <if pos:line="31" pos:column="7">if <condition pos:line="31" pos:column="10">(<expr><name pos:line="31" pos:column="11">flags<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">&amp;<pos:position pos:line="31" pos:column="22"/></operator> <name pos:line="31" pos:column="19">MUTT_PARTS_TOPLEVEL<pos:position pos:line="31" pos:column="38"/></name></expr>)<pos:position pos:line="31" pos:column="39"/></condition><then pos:line="31" pos:column="39">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="9">AT_NOCOUNT<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><literal type="string" pos:line="32" pos:column="20">"top-level message/*"<pos:position pos:line="32" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="43"/></expr_stmt></block></then></if>
    }<pos:position pos:line="33" pos:column="6"/></block></then>
    <elseif pos:line="34" pos:column="5">else <if pos:line="34" pos:column="10">if <condition pos:line="34" pos:column="13">(<expr><name><name pos:line="34" pos:column="14">bp<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">-&gt;<pos:position pos:line="34" pos:column="21"/></operator><name pos:line="34" pos:column="18">type<pos:position pos:line="34" pos:column="22"/></name></name> <operator pos:line="34" pos:column="23">==<pos:position pos:line="34" pos:column="25"/></operator> <name pos:line="34" pos:column="26">TYPEMULTIPART<pos:position pos:line="34" pos:column="39"/></name></expr>)<pos:position pos:line="34" pos:column="40"/></condition><then pos:line="34" pos:column="40">
    <block pos:line="35" pos:column="5">{
      <comment type="block" pos:line="36" pos:column="7">/* Always recurse multiparts, except multipart/alternative. */</comment>
      <expr_stmt><expr><name pos:line="37" pos:column="7">shallrecurse<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">=<pos:position pos:line="37" pos:column="21"/></operator> <literal type="number" pos:line="37" pos:column="22">1<pos:position pos:line="37" pos:column="23"/></literal></expr>;<pos:position pos:line="37" pos:column="24"/></expr_stmt>
      <if pos:line="38" pos:column="7">if <condition pos:line="38" pos:column="10">(<expr><operator pos:line="38" pos:column="11">!<pos:position pos:line="38" pos:column="12"/></operator><call><name pos:line="38" pos:column="12">ascii_strcasecmp<pos:position pos:line="38" pos:column="28"/></name><argument_list pos:line="38" pos:column="28">(<argument><expr><name><name pos:line="38" pos:column="29">bp<pos:position pos:line="38" pos:column="31"/></name><operator pos:line="38" pos:column="31">-&gt;<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="33">subtype<pos:position pos:line="38" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="42">"alternative"<pos:position pos:line="38" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="57"/></condition><then pos:line="38" pos:column="57">
        <block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="9">shallrecurse<pos:position pos:line="39" pos:column="21"/></name> <operator pos:line="39" pos:column="22">=<pos:position pos:line="39" pos:column="23"/></operator> <literal type="number" pos:line="39" pos:column="24">0<pos:position pos:line="39" pos:column="25"/></literal></expr>;<pos:position pos:line="39" pos:column="26"/></expr_stmt></block></then></if>

      <comment type="block" pos:line="41" pos:column="7">/* Don't count containers if they're top-level. */</comment>
      <if pos:line="42" pos:column="7">if <condition pos:line="42" pos:column="10">(<expr><name pos:line="42" pos:column="11">flags<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">&amp;<pos:position pos:line="42" pos:column="22"/></operator> <name pos:line="42" pos:column="19">MUTT_PARTS_TOPLEVEL<pos:position pos:line="42" pos:column="38"/></name></expr>)<pos:position pos:line="42" pos:column="39"/></condition><then pos:line="42" pos:column="39">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="9">AT_NOCOUNT<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">(<argument><expr><literal type="string" pos:line="43" pos:column="20">"top-level multipart"<pos:position pos:line="43" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="43"/></expr_stmt></block></then></if>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name><name pos:line="46" pos:column="9">bp<pos:position pos:line="46" pos:column="11"/></name><operator pos:line="46" pos:column="11">-&gt;<pos:position pos:line="46" pos:column="16"/></operator><name pos:line="46" pos:column="13">disposition<pos:position pos:line="46" pos:column="24"/></name></name> <operator pos:line="46" pos:column="25">==<pos:position pos:line="46" pos:column="27"/></operator> <name pos:line="46" pos:column="28">DISPINLINE<pos:position pos:line="46" pos:column="38"/></name> <operator pos:line="46" pos:column="39">&amp;&amp;<pos:position pos:line="46" pos:column="49"/></operator>
        <name><name pos:line="47" pos:column="9">bp<pos:position pos:line="47" pos:column="11"/></name><operator pos:line="47" pos:column="11">-&gt;<pos:position pos:line="47" pos:column="16"/></operator><name pos:line="47" pos:column="13">type<pos:position pos:line="47" pos:column="17"/></name></name> <operator pos:line="47" pos:column="18">!=<pos:position pos:line="47" pos:column="20"/></operator> <name pos:line="47" pos:column="21">TYPEMULTIPART<pos:position pos:line="47" pos:column="34"/></name> <operator pos:line="47" pos:column="35">&amp;&amp;<pos:position pos:line="47" pos:column="45"/></operator> <name><name pos:line="47" pos:column="38">bp<pos:position pos:line="47" pos:column="40"/></name><operator pos:line="47" pos:column="40">-&gt;<pos:position pos:line="47" pos:column="45"/></operator><name pos:line="47" pos:column="42">type<pos:position pos:line="47" pos:column="46"/></name></name> <operator pos:line="47" pos:column="47">!=<pos:position pos:line="47" pos:column="49"/></operator> <name pos:line="47" pos:column="50">TYPEMESSAGE<pos:position pos:line="47" pos:column="61"/></name> <operator pos:line="47" pos:column="62">&amp;&amp;<pos:position pos:line="47" pos:column="72"/></operator> <name pos:line="47" pos:column="65">bp<pos:position pos:line="47" pos:column="67"/></name> <operator pos:line="47" pos:column="68">==<pos:position pos:line="47" pos:column="70"/></operator> <name pos:line="47" pos:column="71">body<pos:position pos:line="47" pos:column="75"/></name></expr>)<pos:position pos:line="47" pos:column="76"/></condition><then pos:line="47" pos:column="76">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="7">AT_NOCOUNT<pos:position pos:line="48" pos:column="17"/></name><argument_list pos:line="48" pos:column="17">(<argument><expr><literal type="string" pos:line="48" pos:column="18">"ignore fundamental inlines"<pos:position pos:line="48" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="48"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="50" pos:column="5">/* If this body isn't scheduled for enumeration already, don't bother
     * profiling it further.
     */</comment>
    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><name pos:line="53" pos:column="9">shallcount<pos:position pos:line="53" pos:column="19"/></name></expr>)<pos:position pos:line="53" pos:column="20"/></condition><then pos:line="53" pos:column="20">
    <block pos:line="54" pos:column="5">{
      <comment type="block" pos:line="55" pos:column="7">/* Turn off shallcount if message type is not in ok list,
       * or if it is in except list. Check is done separately for
       * inlines vs. attachments.
       */</comment>

      <if pos:line="60" pos:column="7">if <condition pos:line="60" pos:column="10">(<expr><name><name pos:line="60" pos:column="11">bp<pos:position pos:line="60" pos:column="13"/></name><operator pos:line="60" pos:column="13">-&gt;<pos:position pos:line="60" pos:column="18"/></operator><name pos:line="60" pos:column="15">disposition<pos:position pos:line="60" pos:column="26"/></name></name> <operator pos:line="60" pos:column="27">==<pos:position pos:line="60" pos:column="29"/></operator> <name pos:line="60" pos:column="30">DISPATTACH<pos:position pos:line="60" pos:column="40"/></name></expr>)<pos:position pos:line="60" pos:column="41"/></condition><then pos:line="60" pos:column="41">
      <block pos:line="61" pos:column="7">{
        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><operator pos:line="62" pos:column="13">!<pos:position pos:line="62" pos:column="14"/></operator><call><name pos:line="62" pos:column="14">count_body_parts_check<pos:position pos:line="62" pos:column="36"/></name><argument_list pos:line="62" pos:column="36">(<argument><expr><operator pos:line="62" pos:column="37">&amp;<pos:position pos:line="62" pos:column="42"/></operator><name pos:line="62" pos:column="38">AttachAllow<pos:position pos:line="62" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="51">bp<pos:position pos:line="62" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="55">1<pos:position pos:line="62" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="58"/></condition><then pos:line="62" pos:column="58">
	  <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="11">AT_NOCOUNT<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">(<argument><expr><literal type="string" pos:line="63" pos:column="22">"attach not allowed"<pos:position pos:line="63" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="44"/></expr_stmt></block></then></if>
        <if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><call><name pos:line="64" pos:column="13">count_body_parts_check<pos:position pos:line="64" pos:column="35"/></name><argument_list pos:line="64" pos:column="35">(<argument><expr><operator pos:line="64" pos:column="36">&amp;<pos:position pos:line="64" pos:column="41"/></operator><name pos:line="64" pos:column="37">AttachExclude<pos:position pos:line="64" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="52">bp<pos:position pos:line="64" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="64" pos:column="56">0<pos:position pos:line="64" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="59"/></condition><then pos:line="64" pos:column="59">
	  <block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="11">AT_NOCOUNT<pos:position pos:line="65" pos:column="21"/></name><argument_list pos:line="65" pos:column="21">(<argument><expr><literal type="string" pos:line="65" pos:column="22">"attach excluded"<pos:position pos:line="65" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="41"/></expr_stmt></block></then></if>
      }<pos:position pos:line="66" pos:column="8"/></block></then>
      <else pos:line="67" pos:column="7">else
      <block pos:line="68" pos:column="7">{
        <if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><operator pos:line="69" pos:column="13">!<pos:position pos:line="69" pos:column="14"/></operator><call><name pos:line="69" pos:column="14">count_body_parts_check<pos:position pos:line="69" pos:column="36"/></name><argument_list pos:line="69" pos:column="36">(<argument><expr><operator pos:line="69" pos:column="37">&amp;<pos:position pos:line="69" pos:column="42"/></operator><name pos:line="69" pos:column="38">InlineAllow<pos:position pos:line="69" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="51">bp<pos:position pos:line="69" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="55">1<pos:position pos:line="69" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="58"/></condition><then pos:line="69" pos:column="58">
	  <block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="11">AT_NOCOUNT<pos:position pos:line="70" pos:column="21"/></name><argument_list pos:line="70" pos:column="21">(<argument><expr><literal type="string" pos:line="70" pos:column="22">"inline not allowed"<pos:position pos:line="70" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="44"/></expr_stmt></block></then></if>
        <if pos:line="71" pos:column="9">if <condition pos:line="71" pos:column="12">(<expr><call><name pos:line="71" pos:column="13">count_body_parts_check<pos:position pos:line="71" pos:column="35"/></name><argument_list pos:line="71" pos:column="35">(<argument><expr><operator pos:line="71" pos:column="36">&amp;<pos:position pos:line="71" pos:column="41"/></operator><name pos:line="71" pos:column="37">InlineExclude<pos:position pos:line="71" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="52">bp<pos:position pos:line="71" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="56">0<pos:position pos:line="71" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="59"/></condition><then pos:line="71" pos:column="59">
	  <block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="11">AT_NOCOUNT<pos:position pos:line="72" pos:column="21"/></name><argument_list pos:line="72" pos:column="21">(<argument><expr><literal type="string" pos:line="72" pos:column="22">"excluded"<pos:position pos:line="72" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="34"/></expr_stmt></block></then></if>
      }<pos:position pos:line="73" pos:column="8"/></block></else></if>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>

    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><name pos:line="76" pos:column="9">shallcount<pos:position pos:line="76" pos:column="19"/></name></expr>)<pos:position pos:line="76" pos:column="20"/></condition><then pos:line="76" pos:column="20">
      <block type="pseudo"><expr_stmt><expr><name pos:line="77" pos:column="7">count<pos:position pos:line="77" pos:column="12"/></name><operator pos:line="77" pos:column="12">++<pos:position pos:line="77" pos:column="14"/></operator></expr>;<pos:position pos:line="77" pos:column="15"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name><name pos:line="78" pos:column="5">bp<pos:position pos:line="78" pos:column="7"/></name><operator pos:line="78" pos:column="7">-&gt;<pos:position pos:line="78" pos:column="12"/></operator><name pos:line="78" pos:column="9">attach_qualifies<pos:position pos:line="78" pos:column="25"/></name></name> <operator pos:line="78" pos:column="26">=<pos:position pos:line="78" pos:column="27"/></operator> <ternary><condition><expr><name pos:line="78" pos:column="28">shallcount<pos:position pos:line="78" pos:column="38"/></name></expr> ?<pos:position pos:line="78" pos:column="40"/></condition><then pos:line="78" pos:column="40"> <expr><literal type="number" pos:line="78" pos:column="41">1<pos:position pos:line="78" pos:column="42"/></literal></expr> <pos:position pos:line="78" pos:column="43"/></then><else pos:line="78" pos:column="43">: <expr><literal type="number" pos:line="78" pos:column="45">0<pos:position pos:line="78" pos:column="46"/></literal></expr></else></ternary></expr>;<pos:position pos:line="78" pos:column="47"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="80" pos:column="5">dprint<pos:position pos:line="80" pos:column="11"/></name><argument_list pos:line="80" pos:column="11">(<argument><expr><literal type="number" pos:line="80" pos:column="12">5<pos:position pos:line="80" pos:column="13"/></literal></expr></argument>, <argument><expr><operator pos:line="80" pos:column="15">(<pos:position pos:line="80" pos:column="16"/></operator><name pos:line="80" pos:column="16">debugfile<pos:position pos:line="80" pos:column="25"/></name><operator pos:line="80" pos:column="25">,<pos:position pos:line="80" pos:column="26"/></operator> <literal type="string" pos:line="80" pos:column="27">"cbp: %p shallcount = %d\n"<pos:position pos:line="80" pos:column="54"/></literal><operator pos:line="80" pos:column="54">,<pos:position pos:line="80" pos:column="55"/></operator> <operator pos:line="80" pos:column="56">(<pos:position pos:line="80" pos:column="57"/></operator><name pos:line="80" pos:column="57">void<pos:position pos:line="80" pos:column="61"/></name> <operator pos:line="80" pos:column="62">*<pos:position pos:line="80" pos:column="63"/></operator><operator pos:line="80" pos:column="63">)<pos:position pos:line="80" pos:column="64"/></operator><name pos:line="80" pos:column="64">bp<pos:position pos:line="80" pos:column="66"/></name><operator pos:line="80" pos:column="66">,<pos:position pos:line="80" pos:column="67"/></operator> <name pos:line="80" pos:column="68">shallcount<pos:position pos:line="80" pos:column="78"/></name><operator pos:line="80" pos:column="78">)<pos:position pos:line="80" pos:column="79"/></operator></expr></argument>)<pos:position pos:line="80" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="81"/></expr_stmt>

    <if pos:line="82" pos:column="5">if <condition pos:line="82" pos:column="8">(<expr><name pos:line="82" pos:column="9">shallrecurse<pos:position pos:line="82" pos:column="21"/></name></expr>)<pos:position pos:line="82" pos:column="22"/></condition><then pos:line="82" pos:column="22">
    <block pos:line="83" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="84" pos:column="7">dprint<pos:position pos:line="84" pos:column="13"/></name><argument_list pos:line="84" pos:column="13">(<argument><expr><literal type="number" pos:line="84" pos:column="14">5<pos:position pos:line="84" pos:column="15"/></literal></expr></argument>, <argument><expr><operator pos:line="84" pos:column="17">(<pos:position pos:line="84" pos:column="18"/></operator><name pos:line="84" pos:column="18">debugfile<pos:position pos:line="84" pos:column="27"/></name><operator pos:line="84" pos:column="27">,<pos:position pos:line="84" pos:column="28"/></operator> <literal type="string" pos:line="84" pos:column="29">"cbp: %p pre count = %d\n"<pos:position pos:line="84" pos:column="55"/></literal><operator pos:line="84" pos:column="55">,<pos:position pos:line="84" pos:column="56"/></operator> <operator pos:line="84" pos:column="57">(<pos:position pos:line="84" pos:column="58"/></operator><name pos:line="84" pos:column="58">void<pos:position pos:line="84" pos:column="62"/></name> <operator pos:line="84" pos:column="63">*<pos:position pos:line="84" pos:column="64"/></operator><operator pos:line="84" pos:column="64">)<pos:position pos:line="84" pos:column="65"/></operator><name pos:line="84" pos:column="65">bp<pos:position pos:line="84" pos:column="67"/></name><operator pos:line="84" pos:column="67">,<pos:position pos:line="84" pos:column="68"/></operator> <name pos:line="84" pos:column="69">count<pos:position pos:line="84" pos:column="74"/></name><operator pos:line="84" pos:column="74">)<pos:position pos:line="84" pos:column="75"/></operator></expr></argument>)<pos:position pos:line="84" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="77"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="85" pos:column="7">bp<pos:position pos:line="85" pos:column="9"/></name><operator pos:line="85" pos:column="9">-&gt;<pos:position pos:line="85" pos:column="14"/></operator><name pos:line="85" pos:column="11">attach_count<pos:position pos:line="85" pos:column="23"/></name></name> <operator pos:line="85" pos:column="24">=<pos:position pos:line="85" pos:column="25"/></operator> <call><name pos:line="85" pos:column="26">count_body_parts<pos:position pos:line="85" pos:column="42"/></name><argument_list pos:line="85" pos:column="42">(<argument><expr><name><name pos:line="85" pos:column="43">bp<pos:position pos:line="85" pos:column="45"/></name><operator pos:line="85" pos:column="45">-&gt;<pos:position pos:line="85" pos:column="50"/></operator><name pos:line="85" pos:column="47">parts<pos:position pos:line="85" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="54">flags<pos:position pos:line="85" pos:column="59"/></name> <operator pos:line="85" pos:column="60">&amp;<pos:position pos:line="85" pos:column="65"/></operator> <operator pos:line="85" pos:column="62">~<pos:position pos:line="85" pos:column="63"/></operator><name pos:line="85" pos:column="63">MUTT_PARTS_TOPLEVEL<pos:position pos:line="85" pos:column="82"/></name></expr></argument>)<pos:position pos:line="85" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="84"/></expr_stmt>
      <expr_stmt><expr><name pos:line="86" pos:column="7">count<pos:position pos:line="86" pos:column="12"/></name> <operator pos:line="86" pos:column="13">+=<pos:position pos:line="86" pos:column="15"/></operator> <name><name pos:line="86" pos:column="16">bp<pos:position pos:line="86" pos:column="18"/></name><operator pos:line="86" pos:column="18">-&gt;<pos:position pos:line="86" pos:column="23"/></operator><name pos:line="86" pos:column="20">attach_count<pos:position pos:line="86" pos:column="32"/></name></name></expr>;<pos:position pos:line="86" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="87" pos:column="7">dprint<pos:position pos:line="87" pos:column="13"/></name><argument_list pos:line="87" pos:column="13">(<argument><expr><literal type="number" pos:line="87" pos:column="14">5<pos:position pos:line="87" pos:column="15"/></literal></expr></argument>, <argument><expr><operator pos:line="87" pos:column="17">(<pos:position pos:line="87" pos:column="18"/></operator><name pos:line="87" pos:column="18">debugfile<pos:position pos:line="87" pos:column="27"/></name><operator pos:line="87" pos:column="27">,<pos:position pos:line="87" pos:column="28"/></operator> <literal type="string" pos:line="87" pos:column="29">"cbp: %p post count = %d\n"<pos:position pos:line="87" pos:column="56"/></literal><operator pos:line="87" pos:column="56">,<pos:position pos:line="87" pos:column="57"/></operator> <operator pos:line="87" pos:column="58">(<pos:position pos:line="87" pos:column="59"/></operator><name pos:line="87" pos:column="59">void<pos:position pos:line="87" pos:column="63"/></name> <operator pos:line="87" pos:column="64">*<pos:position pos:line="87" pos:column="65"/></operator><operator pos:line="87" pos:column="65">)<pos:position pos:line="87" pos:column="66"/></operator><name pos:line="87" pos:column="66">bp<pos:position pos:line="87" pos:column="68"/></name><operator pos:line="87" pos:column="68">,<pos:position pos:line="87" pos:column="69"/></operator> <name pos:line="87" pos:column="70">count<pos:position pos:line="87" pos:column="75"/></name><operator pos:line="87" pos:column="75">)<pos:position pos:line="87" pos:column="76"/></operator></expr></argument>)<pos:position pos:line="87" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="78"/></expr_stmt>
    }<pos:position pos:line="88" pos:column="6"/></block></then></if>
  }<pos:position pos:line="89" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="91" pos:column="3">dprint<pos:position pos:line="91" pos:column="9"/></name><argument_list pos:line="91" pos:column="9">(<argument><expr><literal type="number" pos:line="91" pos:column="10">5<pos:position pos:line="91" pos:column="11"/></literal></expr></argument>, <argument><expr><operator pos:line="91" pos:column="13">(<pos:position pos:line="91" pos:column="14"/></operator><name pos:line="91" pos:column="14">debugfile<pos:position pos:line="91" pos:column="23"/></name><operator pos:line="91" pos:column="23">,<pos:position pos:line="91" pos:column="24"/></operator> <literal type="string" pos:line="91" pos:column="25">"bp: return %d\n"<pos:position pos:line="91" pos:column="42"/></literal><operator pos:line="91" pos:column="42">,<pos:position pos:line="91" pos:column="43"/></operator> <ternary><condition><expr><name pos:line="91" pos:column="44">count<pos:position pos:line="91" pos:column="49"/></name> <operator pos:line="91" pos:column="50">&lt;<pos:position pos:line="91" pos:column="54"/></operator> <literal type="number" pos:line="91" pos:column="52">0<pos:position pos:line="91" pos:column="53"/></literal></expr> ?<pos:position pos:line="91" pos:column="55"/></condition><then pos:line="91" pos:column="55"> <expr><literal type="number" pos:line="91" pos:column="56">0<pos:position pos:line="91" pos:column="57"/></literal></expr> <pos:position pos:line="91" pos:column="58"/></then><else pos:line="91" pos:column="58">: <expr><name pos:line="91" pos:column="60">count<pos:position pos:line="91" pos:column="65"/></name></expr></else></ternary><operator pos:line="91" pos:column="65">)<pos:position pos:line="91" pos:column="66"/></operator></expr></argument>)<pos:position pos:line="91" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="68"/></expr_stmt>
  <return pos:line="92" pos:column="3">return <expr><ternary><condition><expr><name pos:line="92" pos:column="10">count<pos:position pos:line="92" pos:column="15"/></name> <operator pos:line="92" pos:column="16">&lt;<pos:position pos:line="92" pos:column="20"/></operator> <literal type="number" pos:line="92" pos:column="18">0<pos:position pos:line="92" pos:column="19"/></literal></expr> ?<pos:position pos:line="92" pos:column="21"/></condition><then pos:line="92" pos:column="21"> <expr><literal type="number" pos:line="92" pos:column="22">0<pos:position pos:line="92" pos:column="23"/></literal></expr> <pos:position pos:line="92" pos:column="24"/></then><else pos:line="92" pos:column="24">: <expr><name pos:line="92" pos:column="26">count<pos:position pos:line="92" pos:column="31"/></name></expr></else></ternary></expr>;<pos:position pos:line="92" pos:column="32"/></return>
}<pos:position pos:line="93" pos:column="2"/></block></function></unit>
