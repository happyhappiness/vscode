<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1931_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">plural_lookup<pos:position pos:line="3" pos:column="14"/></name> <argument_list pos:line="3" pos:column="15">(<argument><expr><name pos:line="3" pos:column="16">domain<pos:position pos:line="3" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="24">n<pos:position pos:line="3" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="27">translation<pos:position pos:line="3" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="40">translation_len<pos:position pos:line="3" pos:column="55"/></name></expr></argument>)<pos:position pos:line="3" pos:column="56"/></argument_list>
     struct <name pos:line="4" pos:column="13">loaded_l10nfile<pos:position pos:line="4" pos:column="28"/></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier><name pos:line="4" pos:column="30">domain<pos:position pos:line="4" pos:column="36"/></name></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
     <decl_stmt><decl><type><name pos:line="5" pos:column="6">unsigned<pos:position pos:line="5" pos:column="14"/></name> <name pos:line="5" pos:column="15">long<pos:position pos:line="5" pos:column="19"/></name> <name pos:line="5" pos:column="20">int<pos:position pos:line="5" pos:column="23"/></name></type> <name pos:line="5" pos:column="24">n<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
     <decl_stmt><decl><type><specifier pos:line="6" pos:column="6">const<pos:position pos:line="6" pos:column="11"/></specifier> <name pos:line="6" pos:column="12">char<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">translation<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
     <decl_stmt><decl><type><name pos:line="7" pos:column="6">size_t<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">translation_len<pos:position pos:line="7" pos:column="28"/></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
<block pos:line="8" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">loaded_domain<pos:position pos:line="9" pos:column="23"/></name></name> <modifier pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></modifier></type><name pos:line="9" pos:column="25">domaindata<pos:position pos:line="9" pos:column="35"/></name> <init pos:line="9" pos:column="36">= <expr><operator pos:line="9" pos:column="38">(<pos:position pos:line="9" pos:column="39"/></operator>struct <name pos:line="9" pos:column="46">loaded_domain<pos:position pos:line="9" pos:column="59"/></name> <operator pos:line="9" pos:column="60">*<pos:position pos:line="9" pos:column="61"/></operator><operator pos:line="9" pos:column="61">)<pos:position pos:line="9" pos:column="62"/></operator> <name><name pos:line="9" pos:column="63">domain<pos:position pos:line="9" pos:column="69"/></name><operator pos:line="9" pos:column="69">-&gt;<pos:position pos:line="9" pos:column="74"/></operator><name pos:line="9" pos:column="71">data<pos:position pos:line="9" pos:column="75"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="76"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">unsigned<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">long<pos:position pos:line="10" pos:column="16"/></name> <name pos:line="10" pos:column="17">int<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">index<pos:position pos:line="10" pos:column="26"/></name></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="11" pos:column="3">const<pos:position pos:line="11" pos:column="8"/></specifier> <name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">p<pos:position pos:line="11" pos:column="16"/></name></decl>;<pos:position pos:line="11" pos:column="17"/></decl_stmt>

  <expr_stmt><expr><name pos:line="13" pos:column="3">index<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">=<pos:position pos:line="13" pos:column="10"/></operator> <call><name pos:line="13" pos:column="11">plural_eval<pos:position pos:line="13" pos:column="22"/></name> <argument_list pos:line="13" pos:column="23">(<argument><expr><name><name pos:line="13" pos:column="24">domaindata<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">-&gt;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="36">plural<pos:position pos:line="13" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="44">n<pos:position pos:line="13" pos:column="45"/></name></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="47"/></expr_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">index<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">&gt;=<pos:position pos:line="14" pos:column="18"/></operator> <name><name pos:line="14" pos:column="16">domaindata<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">-&gt;<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="28">nplurals<pos:position pos:line="14" pos:column="36"/></name></name></expr>)<pos:position pos:line="14" pos:column="37"/></condition><then pos:line="14" pos:column="37">
    <comment type="block" pos:line="15" pos:column="5">/* This should never happen.  It means the plural expression and the
       given maximum value do not match.  */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="5">index<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">=<pos:position pos:line="17" pos:column="12"/></operator> <literal type="number" pos:line="17" pos:column="13">0<pos:position pos:line="17" pos:column="14"/></literal></expr>;<pos:position pos:line="17" pos:column="15"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="19" pos:column="3">/* Skip INDEX strings at TRANSLATION.  */</comment>
  <expr_stmt><expr><name pos:line="20" pos:column="3">p<pos:position pos:line="20" pos:column="4"/></name> <operator pos:line="20" pos:column="5">=<pos:position pos:line="20" pos:column="6"/></operator> <name pos:line="20" pos:column="7">translation<pos:position pos:line="20" pos:column="18"/></name></expr>;<pos:position pos:line="20" pos:column="19"/></expr_stmt>
  <while pos:line="21" pos:column="3">while <condition pos:line="21" pos:column="9">(<expr><name pos:line="21" pos:column="10">index<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">--<pos:position pos:line="21" pos:column="17"/></operator> <operator pos:line="21" pos:column="18">&gt;<pos:position pos:line="21" pos:column="22"/></operator> <literal type="number" pos:line="21" pos:column="20">0<pos:position pos:line="21" pos:column="21"/></literal></expr>)<pos:position pos:line="21" pos:column="22"/></condition>
    <block pos:line="22" pos:column="5">{
<cpp:ifdef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifdef<pos:position pos:line="23" pos:column="7"/></cpp:directive> <name pos:line="23" pos:column="8">_LIBC<pos:position pos:line="23" pos:column="13"/></name></cpp:ifdef>
      <expr_stmt><expr><name pos:line="24" pos:column="7">p<pos:position pos:line="24" pos:column="8"/></name> <operator pos:line="24" pos:column="9">=<pos:position pos:line="24" pos:column="10"/></operator> <call><name pos:line="24" pos:column="11">__rawmemchr<pos:position pos:line="24" pos:column="22"/></name> <argument_list pos:line="24" pos:column="23">(<argument><expr><name pos:line="24" pos:column="24">p<pos:position pos:line="24" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="24" pos:column="27">'\0'<pos:position pos:line="24" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
<cpp:else pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">else<pos:position pos:line="25" pos:column="6"/></cpp:directive></cpp:else>
      <expr_stmt><expr><name pos:line="26" pos:column="7">p<pos:position pos:line="26" pos:column="8"/></name> <operator pos:line="26" pos:column="9">=<pos:position pos:line="26" pos:column="10"/></operator> <call><name pos:line="26" pos:column="11">strchr<pos:position pos:line="26" pos:column="17"/></name> <argument_list pos:line="26" pos:column="18">(<argument><expr><name pos:line="26" pos:column="19">p<pos:position pos:line="26" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="26" pos:column="22">'\0'<pos:position pos:line="26" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>
      <comment type="block" pos:line="28" pos:column="7">/* And skip over the NUL byte.  */</comment>
      <expr_stmt><expr><name pos:line="29" pos:column="7">p<pos:position pos:line="29" pos:column="8"/></name><operator pos:line="29" pos:column="8">++<pos:position pos:line="29" pos:column="10"/></operator></expr>;<pos:position pos:line="29" pos:column="11"/></expr_stmt>

      <if pos:line="31" pos:column="7">if <condition pos:line="31" pos:column="10">(<expr><name pos:line="31" pos:column="11">p<pos:position pos:line="31" pos:column="12"/></name> <operator pos:line="31" pos:column="13">&gt;=<pos:position pos:line="31" pos:column="18"/></operator> <name pos:line="31" pos:column="16">translation<pos:position pos:line="31" pos:column="27"/></name> <operator pos:line="31" pos:column="28">+<pos:position pos:line="31" pos:column="29"/></operator> <name pos:line="31" pos:column="30">translation_len<pos:position pos:line="31" pos:column="45"/></name></expr>)<pos:position pos:line="31" pos:column="46"/></condition><then pos:line="31" pos:column="46">
	<comment type="block" pos:line="32" pos:column="9">/* This should never happen.  It means the plural expression
	   evaluated to a value larger than the number of variants
	   available for MSGID1.  */</comment>
	<block type="pseudo"><return pos:line="35" pos:column="9">return <expr><operator pos:line="35" pos:column="16">(<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="17">char<pos:position pos:line="35" pos:column="21"/></name> <operator pos:line="35" pos:column="22">*<pos:position pos:line="35" pos:column="23"/></operator><operator pos:line="35" pos:column="23">)<pos:position pos:line="35" pos:column="24"/></operator> <name pos:line="35" pos:column="25">translation<pos:position pos:line="35" pos:column="36"/></name></expr>;<pos:position pos:line="35" pos:column="37"/></return></block></then></if>
    }<pos:position pos:line="36" pos:column="6"/></block></while>
  <return pos:line="37" pos:column="3">return <expr><operator pos:line="37" pos:column="10">(<pos:position pos:line="37" pos:column="11"/></operator><name pos:line="37" pos:column="11">char<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">*<pos:position pos:line="37" pos:column="17"/></operator><operator pos:line="37" pos:column="17">)<pos:position pos:line="37" pos:column="18"/></operator> <name pos:line="37" pos:column="19">p<pos:position pos:line="37" pos:column="20"/></name></expr>;<pos:position pos:line="37" pos:column="21"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></unit>
