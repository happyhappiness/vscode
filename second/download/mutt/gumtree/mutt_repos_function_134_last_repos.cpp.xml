<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_134_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">eat_date<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">pattern_t<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">pat<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">BUFFER<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">s<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">BUFFER<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">err<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">BUFFER<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">buffer<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">tm<pos:position pos:line="4" pos:column="12"/></name></name></type> <name pos:line="4" pos:column="13">min<pos:position pos:line="4" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="18">max<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">pexpr<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="7" pos:column="3">mutt_buffer_init<pos:position pos:line="7" pos:column="19"/></name> <argument_list pos:line="7" pos:column="20">(<argument><expr><operator pos:line="7" pos:column="21">&amp;<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="22">buffer<pos:position pos:line="7" pos:column="28"/></name></expr></argument>)<pos:position pos:line="7" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="8" pos:column="3">pexpr<pos:position pos:line="8" pos:column="8"/></name> <operator pos:line="8" pos:column="9">=<pos:position pos:line="8" pos:column="10"/></operator> <name><name pos:line="8" pos:column="11">s<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">-&gt;<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="14">dptr<pos:position pos:line="8" pos:column="18"/></name></name></expr>;<pos:position pos:line="8" pos:column="19"/></expr_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><call><name pos:line="9" pos:column="7">mutt_extract_token<pos:position pos:line="9" pos:column="25"/></name> <argument_list pos:line="9" pos:column="26">(<argument><expr><operator pos:line="9" pos:column="27">&amp;<pos:position pos:line="9" pos:column="32"/></operator><name pos:line="9" pos:column="28">buffer<pos:position pos:line="9" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="36">s<pos:position pos:line="9" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="39">MUTT_TOKEN_COMMENT<pos:position pos:line="9" pos:column="57"/></name> <operator pos:line="9" pos:column="58">|<pos:position pos:line="9" pos:column="59"/></operator> <name pos:line="9" pos:column="60">MUTT_TOKEN_PATTERN<pos:position pos:line="9" pos:column="78"/></name></expr></argument>)<pos:position pos:line="9" pos:column="79"/></argument_list></call> <operator pos:line="9" pos:column="80">!=<pos:position pos:line="9" pos:column="82"/></operator> <literal type="number" pos:line="9" pos:column="83">0<pos:position pos:line="9" pos:column="84"/></literal>
      <operator pos:line="10" pos:column="7">||<pos:position pos:line="10" pos:column="9"/></operator> <operator pos:line="10" pos:column="10">!<pos:position pos:line="10" pos:column="11"/></operator><name><name pos:line="10" pos:column="11">buffer<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">.<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="18">data<pos:position pos:line="10" pos:column="22"/></name></name></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23">
  <block pos:line="11" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">snprintf<pos:position pos:line="12" pos:column="13"/></name> <argument_list pos:line="12" pos:column="14">(<argument><expr><name><name pos:line="12" pos:column="15">err<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">-&gt;<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="20">data<pos:position pos:line="12" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="26">err<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">-&gt;<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="31">dsize<pos:position pos:line="12" pos:column="36"/></name></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="38">_<pos:position pos:line="12" pos:column="39"/></name><argument_list pos:line="12" pos:column="39">(<argument><expr><literal type="string" pos:line="12" pos:column="40">"Error in expression: %s"<pos:position pos:line="12" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="12" pos:column="68">pexpr<pos:position pos:line="12" pos:column="73"/></name></expr></argument>)<pos:position pos:line="12" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="75"/></expr_stmt>
    <return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><operator pos:line="13" pos:column="13">-<pos:position pos:line="13" pos:column="14"/></operator><literal type="number" pos:line="13" pos:column="14">1<pos:position pos:line="13" pos:column="15"/></literal><operator pos:line="13" pos:column="15">)<pos:position pos:line="13" pos:column="16"/></operator></expr>;<pos:position pos:line="13" pos:column="17"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><operator pos:line="15" pos:column="7">!<pos:position pos:line="15" pos:column="8"/></operator><operator pos:line="15" pos:column="8">*<pos:position pos:line="15" pos:column="9"/></operator><name><name pos:line="15" pos:column="9">buffer<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">.<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">data<pos:position pos:line="15" pos:column="20"/></name></name></expr>)<pos:position pos:line="15" pos:column="21"/></condition><then pos:line="15" pos:column="21">
  <block pos:line="16" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">snprintf<pos:position pos:line="17" pos:column="13"/></name> <argument_list pos:line="17" pos:column="14">(<argument><expr><name><name pos:line="17" pos:column="15">err<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">-&gt;<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="20">data<pos:position pos:line="17" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="26">err<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">-&gt;<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="31">dsize<pos:position pos:line="17" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="38">"%s"<pos:position pos:line="17" pos:column="42"/></literal></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="44">_<pos:position pos:line="17" pos:column="45"/></name><argument_list pos:line="17" pos:column="45">(<argument><expr><literal type="string" pos:line="17" pos:column="46">"Empty expression"<pos:position pos:line="17" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="67"/></expr_stmt>
    <return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><operator pos:line="18" pos:column="13">-<pos:position pos:line="18" pos:column="14"/></operator><literal type="number" pos:line="18" pos:column="14">1<pos:position pos:line="18" pos:column="15"/></literal><operator pos:line="18" pos:column="15">)<pos:position pos:line="18" pos:column="16"/></operator></expr>;<pos:position pos:line="18" pos:column="17"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="21" pos:column="3">memset<pos:position pos:line="21" pos:column="9"/></name> <argument_list pos:line="21" pos:column="10">(<argument><expr><operator pos:line="21" pos:column="11">&amp;<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="12">min<pos:position pos:line="21" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="17">0<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="20">sizeof <argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">min<pos:position pos:line="21" pos:column="31"/></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt>
  <comment type="block" pos:line="22" pos:column="3">/* the `0' time is Jan 1, 1970 UTC, so in order to prevent a negative time
     when doing timezone conversion, we use Jan 2, 1970 UTC as the base
     here */</comment>
  <expr_stmt><expr><name><name pos:line="25" pos:column="3">min<pos:position pos:line="25" pos:column="6"/></name><operator pos:line="25" pos:column="6">.<pos:position pos:line="25" pos:column="7"/></operator><name pos:line="25" pos:column="7">tm_mday<pos:position pos:line="25" pos:column="14"/></name></name> <operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator> <literal type="number" pos:line="25" pos:column="17">2<pos:position pos:line="25" pos:column="18"/></literal></expr>;<pos:position pos:line="25" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="26" pos:column="3">min<pos:position pos:line="26" pos:column="6"/></name><operator pos:line="26" pos:column="6">.<pos:position pos:line="26" pos:column="7"/></operator><name pos:line="26" pos:column="7">tm_year<pos:position pos:line="26" pos:column="14"/></name></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <literal type="number" pos:line="26" pos:column="17">70<pos:position pos:line="26" pos:column="19"/></literal></expr>;<pos:position pos:line="26" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="28" pos:column="3">memset<pos:position pos:line="28" pos:column="9"/></name> <argument_list pos:line="28" pos:column="10">(<argument><expr><operator pos:line="28" pos:column="11">&amp;<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="12">max<pos:position pos:line="28" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="17">0<pos:position pos:line="28" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="20">sizeof <argument_list pos:line="28" pos:column="27">(<argument><expr><name pos:line="28" pos:column="28">max<pos:position pos:line="28" pos:column="31"/></name></expr></argument>)<pos:position pos:line="28" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>

  <comment type="block" pos:line="30" pos:column="3">/* Arbitrary year in the future.  Don't set this too high
     or mutt_mktime() returns something larger than will
     fit in a time_t on some systems */</comment>
  <expr_stmt><expr><name><name pos:line="33" pos:column="3">max<pos:position pos:line="33" pos:column="6"/></name><operator pos:line="33" pos:column="6">.<pos:position pos:line="33" pos:column="7"/></operator><name pos:line="33" pos:column="7">tm_year<pos:position pos:line="33" pos:column="14"/></name></name> <operator pos:line="33" pos:column="15">=<pos:position pos:line="33" pos:column="16"/></operator> <literal type="number" pos:line="33" pos:column="17">130<pos:position pos:line="33" pos:column="20"/></literal></expr>;<pos:position pos:line="33" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="34" pos:column="3">max<pos:position pos:line="34" pos:column="6"/></name><operator pos:line="34" pos:column="6">.<pos:position pos:line="34" pos:column="7"/></operator><name pos:line="34" pos:column="7">tm_mon<pos:position pos:line="34" pos:column="13"/></name></name> <operator pos:line="34" pos:column="14">=<pos:position pos:line="34" pos:column="15"/></operator> <literal type="number" pos:line="34" pos:column="16">11<pos:position pos:line="34" pos:column="18"/></literal></expr>;<pos:position pos:line="34" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="35" pos:column="3">max<pos:position pos:line="35" pos:column="6"/></name><operator pos:line="35" pos:column="6">.<pos:position pos:line="35" pos:column="7"/></operator><name pos:line="35" pos:column="7">tm_mday<pos:position pos:line="35" pos:column="14"/></name></name> <operator pos:line="35" pos:column="15">=<pos:position pos:line="35" pos:column="16"/></operator> <literal type="number" pos:line="35" pos:column="17">31<pos:position pos:line="35" pos:column="19"/></literal></expr>;<pos:position pos:line="35" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="36" pos:column="3">max<pos:position pos:line="36" pos:column="6"/></name><operator pos:line="36" pos:column="6">.<pos:position pos:line="36" pos:column="7"/></operator><name pos:line="36" pos:column="7">tm_hour<pos:position pos:line="36" pos:column="14"/></name></name> <operator pos:line="36" pos:column="15">=<pos:position pos:line="36" pos:column="16"/></operator> <literal type="number" pos:line="36" pos:column="17">23<pos:position pos:line="36" pos:column="19"/></literal></expr>;<pos:position pos:line="36" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="37" pos:column="3">max<pos:position pos:line="37" pos:column="6"/></name><operator pos:line="37" pos:column="6">.<pos:position pos:line="37" pos:column="7"/></operator><name pos:line="37" pos:column="7">tm_min<pos:position pos:line="37" pos:column="13"/></name></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <literal type="number" pos:line="37" pos:column="16">59<pos:position pos:line="37" pos:column="18"/></literal></expr>;<pos:position pos:line="37" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="38" pos:column="3">max<pos:position pos:line="38" pos:column="6"/></name><operator pos:line="38" pos:column="6">.<pos:position pos:line="38" pos:column="7"/></operator><name pos:line="38" pos:column="7">tm_sec<pos:position pos:line="38" pos:column="13"/></name></name> <operator pos:line="38" pos:column="14">=<pos:position pos:line="38" pos:column="15"/></operator> <literal type="number" pos:line="38" pos:column="16">59<pos:position pos:line="38" pos:column="18"/></literal></expr>;<pos:position pos:line="38" pos:column="19"/></expr_stmt>

  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><call><name pos:line="40" pos:column="7">strchr<pos:position pos:line="40" pos:column="13"/></name> <argument_list pos:line="40" pos:column="14">(<argument><expr><literal type="string" pos:line="40" pos:column="15">"&lt;&gt;="<pos:position pos:line="40" pos:column="26"/></literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="22">buffer<pos:position pos:line="40" pos:column="28"/></name><operator pos:line="40" pos:column="28">.<pos:position pos:line="40" pos:column="29"/></operator><name pos:line="40" pos:column="29">data<pos:position pos:line="40" pos:column="33"/></name><index pos:line="40" pos:column="33">[<expr><literal type="number" pos:line="40" pos:column="34">0<pos:position pos:line="40" pos:column="35"/></literal></expr>]<pos:position pos:line="40" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="40" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="38"/></condition><then pos:line="40" pos:column="38">
  <block pos:line="41" pos:column="3">{
    <comment type="block" pos:line="42" pos:column="5">/* offset from current time
       &lt;3d	less than three days ago
       &gt;3d	more than three days ago
       =3d	exactly three days ago */</comment>
    <decl_stmt><decl><type><name pos:line="46" pos:column="5">time_t<pos:position pos:line="46" pos:column="11"/></name></type> <name pos:line="46" pos:column="12">now<pos:position pos:line="46" pos:column="15"/></name> <init pos:line="46" pos:column="16">= <expr><call><name pos:line="46" pos:column="18">time<pos:position pos:line="46" pos:column="22"/></name> <argument_list pos:line="46" pos:column="23">(<argument><expr><name pos:line="46" pos:column="24">NULL<pos:position pos:line="46" pos:column="28"/></name></expr></argument>)<pos:position pos:line="46" pos:column="29"/></argument_list></call></expr></init></decl>;<pos:position pos:line="46" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="47" pos:column="5">struct<pos:position pos:line="47" pos:column="11"/></name> <name pos:line="47" pos:column="12">tm<pos:position pos:line="47" pos:column="14"/></name></name> <modifier pos:line="47" pos:column="15">*<pos:position pos:line="47" pos:column="16"/></modifier></type><name pos:line="47" pos:column="16">tm<pos:position pos:line="47" pos:column="18"/></name> <init pos:line="47" pos:column="19">= <expr><call><name pos:line="47" pos:column="21">localtime<pos:position pos:line="47" pos:column="30"/></name> <argument_list pos:line="47" pos:column="31">(<argument><expr><operator pos:line="47" pos:column="32">&amp;<pos:position pos:line="47" pos:column="37"/></operator><name pos:line="47" pos:column="33">now<pos:position pos:line="47" pos:column="36"/></name></expr></argument>)<pos:position pos:line="47" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="47" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="48" pos:column="5">int<pos:position pos:line="48" pos:column="8"/></name></type> <name pos:line="48" pos:column="9">exact<pos:position pos:line="48" pos:column="14"/></name> <init pos:line="48" pos:column="15">= <expr><literal type="number" pos:line="48" pos:column="17">0<pos:position pos:line="48" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="48" pos:column="19"/></decl_stmt>

    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name><name pos:line="50" pos:column="9">buffer<pos:position pos:line="50" pos:column="15"/></name><operator pos:line="50" pos:column="15">.<pos:position pos:line="50" pos:column="16"/></operator><name pos:line="50" pos:column="16">data<pos:position pos:line="50" pos:column="20"/></name><index pos:line="50" pos:column="20">[<expr><literal type="number" pos:line="50" pos:column="21">0<pos:position pos:line="50" pos:column="22"/></literal></expr>]<pos:position pos:line="50" pos:column="23"/></index></name> <operator pos:line="50" pos:column="24">==<pos:position pos:line="50" pos:column="26"/></operator> <literal type="char" pos:line="50" pos:column="27">'&lt;'<pos:position pos:line="50" pos:column="33"/></literal></expr>)<pos:position pos:line="50" pos:column="31"/></condition><then pos:line="50" pos:column="31">
    <block pos:line="51" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">memcpy<pos:position pos:line="52" pos:column="13"/></name> <argument_list pos:line="52" pos:column="14">(<argument><expr><operator pos:line="52" pos:column="15">&amp;<pos:position pos:line="52" pos:column="20"/></operator><name pos:line="52" pos:column="16">min<pos:position pos:line="52" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="21">tm<pos:position pos:line="52" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="52" pos:column="25">sizeof <argument_list pos:line="52" pos:column="32">(<argument><expr><name pos:line="52" pos:column="33">min<pos:position pos:line="52" pos:column="36"/></name></expr></argument>)<pos:position pos:line="52" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name pos:line="53" pos:column="7">tm<pos:position pos:line="53" pos:column="9"/></name> <operator pos:line="53" pos:column="10">=<pos:position pos:line="53" pos:column="11"/></operator> <operator pos:line="53" pos:column="12">&amp;<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="13">min<pos:position pos:line="53" pos:column="16"/></name></expr>;<pos:position pos:line="53" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="54" pos:column="6"/></block></then>
    <else pos:line="55" pos:column="5">else
    <block pos:line="56" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="57" pos:column="7">memcpy<pos:position pos:line="57" pos:column="13"/></name> <argument_list pos:line="57" pos:column="14">(<argument><expr><operator pos:line="57" pos:column="15">&amp;<pos:position pos:line="57" pos:column="20"/></operator><name pos:line="57" pos:column="16">max<pos:position pos:line="57" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="21">tm<pos:position pos:line="57" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="25">sizeof <argument_list pos:line="57" pos:column="32">(<argument><expr><name pos:line="57" pos:column="33">max<pos:position pos:line="57" pos:column="36"/></name></expr></argument>)<pos:position pos:line="57" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="57" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name pos:line="58" pos:column="7">tm<pos:position pos:line="58" pos:column="9"/></name> <operator pos:line="58" pos:column="10">=<pos:position pos:line="58" pos:column="11"/></operator> <operator pos:line="58" pos:column="12">&amp;<pos:position pos:line="58" pos:column="17"/></operator><name pos:line="58" pos:column="13">max<pos:position pos:line="58" pos:column="16"/></name></expr>;<pos:position pos:line="58" pos:column="17"/></expr_stmt>

      <if pos:line="60" pos:column="7">if <condition pos:line="60" pos:column="10">(<expr><name><name pos:line="60" pos:column="11">buffer<pos:position pos:line="60" pos:column="17"/></name><operator pos:line="60" pos:column="17">.<pos:position pos:line="60" pos:column="18"/></operator><name pos:line="60" pos:column="18">data<pos:position pos:line="60" pos:column="22"/></name><index pos:line="60" pos:column="22">[<expr><literal type="number" pos:line="60" pos:column="23">0<pos:position pos:line="60" pos:column="24"/></literal></expr>]<pos:position pos:line="60" pos:column="25"/></index></name> <operator pos:line="60" pos:column="26">==<pos:position pos:line="60" pos:column="28"/></operator> <literal type="char" pos:line="60" pos:column="29">'='<pos:position pos:line="60" pos:column="32"/></literal></expr>)<pos:position pos:line="60" pos:column="33"/></condition><then pos:line="60" pos:column="33">
	<block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="9">exact<pos:position pos:line="61" pos:column="14"/></name><operator pos:line="61" pos:column="14">++<pos:position pos:line="61" pos:column="16"/></operator></expr>;<pos:position pos:line="61" pos:column="17"/></expr_stmt></block></then></if>
    }<pos:position pos:line="62" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name><name pos:line="63" pos:column="5">tm<pos:position pos:line="63" pos:column="7"/></name><operator pos:line="63" pos:column="7">-&gt;<pos:position pos:line="63" pos:column="12"/></operator><name pos:line="63" pos:column="9">tm_hour<pos:position pos:line="63" pos:column="16"/></name></name> <operator pos:line="63" pos:column="17">=<pos:position pos:line="63" pos:column="18"/></operator> <literal type="number" pos:line="63" pos:column="19">23<pos:position pos:line="63" pos:column="21"/></literal></expr>;<pos:position pos:line="63" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="64" pos:column="5">tm<pos:position pos:line="64" pos:column="7"/></name><operator pos:line="64" pos:column="7">-&gt;<pos:position pos:line="64" pos:column="12"/></operator><name pos:line="64" pos:column="9">tm_min<pos:position pos:line="64" pos:column="15"/></name></name> <operator pos:line="64" pos:column="16">=<pos:position pos:line="64" pos:column="17"/></operator> <name><name pos:line="64" pos:column="18">tm<pos:position pos:line="64" pos:column="20"/></name><operator pos:line="64" pos:column="20">-&gt;<pos:position pos:line="64" pos:column="25"/></operator><name pos:line="64" pos:column="22">tm_sec<pos:position pos:line="64" pos:column="28"/></name></name> <operator pos:line="64" pos:column="29">=<pos:position pos:line="64" pos:column="30"/></operator> <literal type="number" pos:line="64" pos:column="31">59<pos:position pos:line="64" pos:column="33"/></literal></expr>;<pos:position pos:line="64" pos:column="34"/></expr_stmt>

    <comment type="block" pos:line="66" pos:column="5">/* force negative offset */</comment>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">get_offset<pos:position pos:line="67" pos:column="15"/></name> <argument_list pos:line="67" pos:column="16">(<argument><expr><name pos:line="67" pos:column="17">tm<pos:position pos:line="67" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="21">buffer<pos:position pos:line="67" pos:column="27"/></name><operator pos:line="67" pos:column="27">.<pos:position pos:line="67" pos:column="28"/></operator><name pos:line="67" pos:column="28">data<pos:position pos:line="67" pos:column="32"/></name></name> <operator pos:line="67" pos:column="33">+<pos:position pos:line="67" pos:column="34"/></operator> <literal type="number" pos:line="67" pos:column="35">1<pos:position pos:line="67" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="67" pos:column="38">-<pos:position pos:line="67" pos:column="39"/></operator><literal type="number" pos:line="67" pos:column="39">1<pos:position pos:line="67" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="42"/></expr_stmt>

    <if pos:line="69" pos:column="5">if <condition pos:line="69" pos:column="8">(<expr><name pos:line="69" pos:column="9">exact<pos:position pos:line="69" pos:column="14"/></name></expr>)<pos:position pos:line="69" pos:column="15"/></condition><then pos:line="69" pos:column="15">
    <block pos:line="70" pos:column="5">{
      <comment type="block" pos:line="71" pos:column="7">/* start at the beginning of the day in question */</comment>
      <expr_stmt><expr><call><name pos:line="72" pos:column="7">memcpy<pos:position pos:line="72" pos:column="13"/></name> <argument_list pos:line="72" pos:column="14">(<argument><expr><operator pos:line="72" pos:column="15">&amp;<pos:position pos:line="72" pos:column="20"/></operator><name pos:line="72" pos:column="16">min<pos:position pos:line="72" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="21">&amp;<pos:position pos:line="72" pos:column="26"/></operator><name pos:line="72" pos:column="22">max<pos:position pos:line="72" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="72" pos:column="27">sizeof <argument_list pos:line="72" pos:column="34">(<argument><expr><name pos:line="72" pos:column="35">max<pos:position pos:line="72" pos:column="38"/></name></expr></argument>)<pos:position pos:line="72" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="72" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="73" pos:column="7">min<pos:position pos:line="73" pos:column="10"/></name><operator pos:line="73" pos:column="10">.<pos:position pos:line="73" pos:column="11"/></operator><name pos:line="73" pos:column="11">tm_hour<pos:position pos:line="73" pos:column="18"/></name></name> <operator pos:line="73" pos:column="19">=<pos:position pos:line="73" pos:column="20"/></operator> <name><name pos:line="73" pos:column="21">min<pos:position pos:line="73" pos:column="24"/></name><operator pos:line="73" pos:column="24">.<pos:position pos:line="73" pos:column="25"/></operator><name pos:line="73" pos:column="25">tm_sec<pos:position pos:line="73" pos:column="31"/></name></name> <operator pos:line="73" pos:column="32">=<pos:position pos:line="73" pos:column="33"/></operator> <name><name pos:line="73" pos:column="34">min<pos:position pos:line="73" pos:column="37"/></name><operator pos:line="73" pos:column="37">.<pos:position pos:line="73" pos:column="38"/></operator><name pos:line="73" pos:column="38">tm_min<pos:position pos:line="73" pos:column="44"/></name></name> <operator pos:line="73" pos:column="45">=<pos:position pos:line="73" pos:column="46"/></operator> <literal type="number" pos:line="73" pos:column="47">0<pos:position pos:line="73" pos:column="48"/></literal></expr>;<pos:position pos:line="73" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>
  }<pos:position pos:line="75" pos:column="4"/></block></then>
  <else pos:line="76" pos:column="3">else
  <block pos:line="77" pos:column="3">{
    <decl_stmt><decl><type><specifier pos:line="78" pos:column="5">const<pos:position pos:line="78" pos:column="10"/></specifier> <name pos:line="78" pos:column="11">char<pos:position pos:line="78" pos:column="15"/></name> <modifier pos:line="78" pos:column="16">*<pos:position pos:line="78" pos:column="17"/></modifier></type><name pos:line="78" pos:column="17">pc<pos:position pos:line="78" pos:column="19"/></name> <init pos:line="78" pos:column="20">= <expr><name><name pos:line="78" pos:column="22">buffer<pos:position pos:line="78" pos:column="28"/></name><operator pos:line="78" pos:column="28">.<pos:position pos:line="78" pos:column="29"/></operator><name pos:line="78" pos:column="29">data<pos:position pos:line="78" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="78" pos:column="34"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="80" pos:column="5">int<pos:position pos:line="80" pos:column="8"/></name></type> <name pos:line="80" pos:column="9">haveMin<pos:position pos:line="80" pos:column="16"/></name> <init pos:line="80" pos:column="17">= <expr><name pos:line="80" pos:column="19">FALSE<pos:position pos:line="80" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="80" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="81" pos:column="5">int<pos:position pos:line="81" pos:column="8"/></name></type> <name pos:line="81" pos:column="9">untilNow<pos:position pos:line="81" pos:column="17"/></name> <init pos:line="81" pos:column="18">= <expr><name pos:line="81" pos:column="20">FALSE<pos:position pos:line="81" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="81" pos:column="26"/></decl_stmt>
    <if pos:line="82" pos:column="5">if <condition pos:line="82" pos:column="8">(<expr><call><name pos:line="82" pos:column="9">isdigit<pos:position pos:line="82" pos:column="16"/></name> <argument_list pos:line="82" pos:column="17">(<argument><expr><operator pos:line="82" pos:column="18">(<pos:position pos:line="82" pos:column="19"/></operator><name pos:line="82" pos:column="19">unsigned<pos:position pos:line="82" pos:column="27"/></name> <name pos:line="82" pos:column="28">char<pos:position pos:line="82" pos:column="32"/></name><operator pos:line="82" pos:column="32">)<pos:position pos:line="82" pos:column="33"/></operator><operator pos:line="82" pos:column="33">*<pos:position pos:line="82" pos:column="34"/></operator><name pos:line="82" pos:column="34">pc<pos:position pos:line="82" pos:column="36"/></name></expr></argument>)<pos:position pos:line="82" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="82" pos:column="38"/></condition><then pos:line="82" pos:column="38">
    <block pos:line="83" pos:column="5">{
      <comment type="block" pos:line="84" pos:column="7">/* minimum date specified */</comment>
      <if pos:line="85" pos:column="7">if <condition pos:line="85" pos:column="10">(<expr><operator pos:line="85" pos:column="11">(<pos:position pos:line="85" pos:column="12"/></operator><name pos:line="85" pos:column="12">pc<pos:position pos:line="85" pos:column="14"/></name> <operator pos:line="85" pos:column="15">=<pos:position pos:line="85" pos:column="16"/></operator> <call><name pos:line="85" pos:column="17">getDate<pos:position pos:line="85" pos:column="24"/></name> <argument_list pos:line="85" pos:column="25">(<argument><expr><name pos:line="85" pos:column="26">pc<pos:position pos:line="85" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="30">&amp;<pos:position pos:line="85" pos:column="35"/></operator><name pos:line="85" pos:column="31">min<pos:position pos:line="85" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="36">err<pos:position pos:line="85" pos:column="39"/></name></expr></argument>)<pos:position pos:line="85" pos:column="40"/></argument_list></call><operator pos:line="85" pos:column="40">)<pos:position pos:line="85" pos:column="41"/></operator> <operator pos:line="85" pos:column="42">==<pos:position pos:line="85" pos:column="44"/></operator> <name pos:line="85" pos:column="45">NULL<pos:position pos:line="85" pos:column="49"/></name></expr>)<pos:position pos:line="85" pos:column="50"/></condition><then pos:line="85" pos:column="50">
      <block pos:line="86" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="87" pos:column="9">FREE<pos:position pos:line="87" pos:column="13"/></name> <argument_list pos:line="87" pos:column="14">(<argument><expr><operator pos:line="87" pos:column="15">&amp;<pos:position pos:line="87" pos:column="20"/></operator><name><name pos:line="87" pos:column="16">buffer<pos:position pos:line="87" pos:column="22"/></name><operator pos:line="87" pos:column="22">.<pos:position pos:line="87" pos:column="23"/></operator><name pos:line="87" pos:column="23">data<pos:position pos:line="87" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="29"/></expr_stmt>
	<return pos:line="88" pos:column="9">return <expr><operator pos:line="88" pos:column="16">(<pos:position pos:line="88" pos:column="17"/></operator><operator pos:line="88" pos:column="17">-<pos:position pos:line="88" pos:column="18"/></operator><literal type="number" pos:line="88" pos:column="18">1<pos:position pos:line="88" pos:column="19"/></literal><operator pos:line="88" pos:column="19">)<pos:position pos:line="88" pos:column="20"/></operator></expr>;<pos:position pos:line="88" pos:column="21"/></return>
      }<pos:position pos:line="89" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="90" pos:column="7">haveMin<pos:position pos:line="90" pos:column="14"/></name> <operator pos:line="90" pos:column="15">=<pos:position pos:line="90" pos:column="16"/></operator> <name pos:line="90" pos:column="17">TRUE<pos:position pos:line="90" pos:column="21"/></name></expr>;<pos:position pos:line="90" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="91" pos:column="7">SKIPWS<pos:position pos:line="91" pos:column="13"/></name> <argument_list pos:line="91" pos:column="14">(<argument><expr><name pos:line="91" pos:column="15">pc<pos:position pos:line="91" pos:column="17"/></name></expr></argument>)<pos:position pos:line="91" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="19"/></expr_stmt>
      <if pos:line="92" pos:column="7">if <condition pos:line="92" pos:column="10">(<expr><operator pos:line="92" pos:column="11">*<pos:position pos:line="92" pos:column="12"/></operator><name pos:line="92" pos:column="12">pc<pos:position pos:line="92" pos:column="14"/></name> <operator pos:line="92" pos:column="15">==<pos:position pos:line="92" pos:column="17"/></operator> <literal type="char" pos:line="92" pos:column="18">'-'<pos:position pos:line="92" pos:column="21"/></literal></expr>)<pos:position pos:line="92" pos:column="22"/></condition><then pos:line="92" pos:column="22">
      <block pos:line="93" pos:column="7">{
        <decl_stmt><decl><type><specifier pos:line="94" pos:column="9">const<pos:position pos:line="94" pos:column="14"/></specifier> <name pos:line="94" pos:column="15">char<pos:position pos:line="94" pos:column="19"/></name> <modifier pos:line="94" pos:column="20">*<pos:position pos:line="94" pos:column="21"/></modifier></type><name pos:line="94" pos:column="21">pt<pos:position pos:line="94" pos:column="23"/></name> <init pos:line="94" pos:column="24">= <expr><name pos:line="94" pos:column="26">pc<pos:position pos:line="94" pos:column="28"/></name> <operator pos:line="94" pos:column="29">+<pos:position pos:line="94" pos:column="30"/></operator> <literal type="number" pos:line="94" pos:column="31">1<pos:position pos:line="94" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="94" pos:column="33"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="95" pos:column="9">SKIPWS<pos:position pos:line="95" pos:column="15"/></name> <argument_list pos:line="95" pos:column="16">(<argument><expr><name pos:line="95" pos:column="17">pt<pos:position pos:line="95" pos:column="19"/></name></expr></argument>)<pos:position pos:line="95" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><name pos:line="96" pos:column="9">untilNow<pos:position pos:line="96" pos:column="17"/></name> <operator pos:line="96" pos:column="18">=<pos:position pos:line="96" pos:column="19"/></operator> <operator pos:line="96" pos:column="20">(<pos:position pos:line="96" pos:column="21"/></operator><operator pos:line="96" pos:column="21">*<pos:position pos:line="96" pos:column="22"/></operator><name pos:line="96" pos:column="22">pt<pos:position pos:line="96" pos:column="24"/></name> <operator pos:line="96" pos:column="25">==<pos:position pos:line="96" pos:column="27"/></operator> <literal type="char" pos:line="96" pos:column="28">'\0'<pos:position pos:line="96" pos:column="32"/></literal><operator pos:line="96" pos:column="32">)<pos:position pos:line="96" pos:column="33"/></operator></expr>;<pos:position pos:line="96" pos:column="34"/></expr_stmt>
      }<pos:position pos:line="97" pos:column="8"/></block></then></if>
    }<pos:position pos:line="98" pos:column="6"/></block></then></if>

    <if pos:line="100" pos:column="5">if <condition pos:line="100" pos:column="8">(<expr><operator pos:line="100" pos:column="9">!<pos:position pos:line="100" pos:column="10"/></operator><name pos:line="100" pos:column="10">untilNow<pos:position pos:line="100" pos:column="18"/></name></expr>)<pos:position pos:line="100" pos:column="19"/></condition><then pos:line="100" pos:column="19">
    <block pos:line="101" pos:column="5">{ <comment type="block" pos:line="101" pos:column="7">/* max date or relative range/window */</comment>

      <decl_stmt><decl><type><name><name pos:line="103" pos:column="7">struct<pos:position pos:line="103" pos:column="13"/></name> <name pos:line="103" pos:column="14">tm<pos:position pos:line="103" pos:column="16"/></name></name></type> <name pos:line="103" pos:column="17">baseMin<pos:position pos:line="103" pos:column="24"/></name></decl>;<pos:position pos:line="103" pos:column="25"/></decl_stmt>

      <if pos:line="105" pos:column="7">if <condition pos:line="105" pos:column="10">(<expr><operator pos:line="105" pos:column="11">!<pos:position pos:line="105" pos:column="12"/></operator><name pos:line="105" pos:column="12">haveMin<pos:position pos:line="105" pos:column="19"/></name></expr>)<pos:position pos:line="105" pos:column="20"/></condition><then pos:line="105" pos:column="20">
      <block pos:line="106" pos:column="7">{ <comment type="block" pos:line="106" pos:column="9">/* save base minimum and set current date, e.g. for "-3d+1d" */</comment>
	<decl_stmt><decl><type><name pos:line="107" pos:column="9">time_t<pos:position pos:line="107" pos:column="15"/></name></type> <name pos:line="107" pos:column="16">now<pos:position pos:line="107" pos:column="19"/></name> <init pos:line="107" pos:column="20">= <expr><call><name pos:line="107" pos:column="22">time<pos:position pos:line="107" pos:column="26"/></name> <argument_list pos:line="107" pos:column="27">(<argument><expr><name pos:line="107" pos:column="28">NULL<pos:position pos:line="107" pos:column="32"/></name></expr></argument>)<pos:position pos:line="107" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="107" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="108" pos:column="9">struct<pos:position pos:line="108" pos:column="15"/></name> <name pos:line="108" pos:column="16">tm<pos:position pos:line="108" pos:column="18"/></name></name> <modifier pos:line="108" pos:column="19">*<pos:position pos:line="108" pos:column="20"/></modifier></type><name pos:line="108" pos:column="20">tm<pos:position pos:line="108" pos:column="22"/></name> <init pos:line="108" pos:column="23">= <expr><call><name pos:line="108" pos:column="25">localtime<pos:position pos:line="108" pos:column="34"/></name> <argument_list pos:line="108" pos:column="35">(<argument><expr><operator pos:line="108" pos:column="36">&amp;<pos:position pos:line="108" pos:column="41"/></operator><name pos:line="108" pos:column="37">now<pos:position pos:line="108" pos:column="40"/></name></expr></argument>)<pos:position pos:line="108" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="108" pos:column="42"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="109" pos:column="9">memcpy<pos:position pos:line="109" pos:column="15"/></name> <argument_list pos:line="109" pos:column="16">(<argument><expr><operator pos:line="109" pos:column="17">&amp;<pos:position pos:line="109" pos:column="22"/></operator><name pos:line="109" pos:column="18">baseMin<pos:position pos:line="109" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="109" pos:column="27">&amp;<pos:position pos:line="109" pos:column="32"/></operator><name pos:line="109" pos:column="28">min<pos:position pos:line="109" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="109" pos:column="33">sizeof<argument_list pos:line="109" pos:column="39">(<argument><expr><name pos:line="109" pos:column="40">baseMin<pos:position pos:line="109" pos:column="47"/></name></expr></argument>)<pos:position pos:line="109" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="109" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="110" pos:column="9">memcpy<pos:position pos:line="110" pos:column="15"/></name> <argument_list pos:line="110" pos:column="16">(<argument><expr><operator pos:line="110" pos:column="17">&amp;<pos:position pos:line="110" pos:column="22"/></operator><name pos:line="110" pos:column="18">min<pos:position pos:line="110" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="23">tm<pos:position pos:line="110" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="110" pos:column="27">sizeof <argument_list pos:line="110" pos:column="34">(<argument><expr><name pos:line="110" pos:column="35">min<pos:position pos:line="110" pos:column="38"/></name></expr></argument>)<pos:position pos:line="110" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="110" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="111" pos:column="9">min<pos:position pos:line="111" pos:column="12"/></name><operator pos:line="111" pos:column="12">.<pos:position pos:line="111" pos:column="13"/></operator><name pos:line="111" pos:column="13">tm_hour<pos:position pos:line="111" pos:column="20"/></name></name> <operator pos:line="111" pos:column="21">=<pos:position pos:line="111" pos:column="22"/></operator> <name><name pos:line="111" pos:column="23">min<pos:position pos:line="111" pos:column="26"/></name><operator pos:line="111" pos:column="26">.<pos:position pos:line="111" pos:column="27"/></operator><name pos:line="111" pos:column="27">tm_sec<pos:position pos:line="111" pos:column="33"/></name></name> <operator pos:line="111" pos:column="34">=<pos:position pos:line="111" pos:column="35"/></operator> <name><name pos:line="111" pos:column="36">min<pos:position pos:line="111" pos:column="39"/></name><operator pos:line="111" pos:column="39">.<pos:position pos:line="111" pos:column="40"/></operator><name pos:line="111" pos:column="40">tm_min<pos:position pos:line="111" pos:column="46"/></name></name> <operator pos:line="111" pos:column="47">=<pos:position pos:line="111" pos:column="48"/></operator> <literal type="number" pos:line="111" pos:column="49">0<pos:position pos:line="111" pos:column="50"/></literal></expr>;<pos:position pos:line="111" pos:column="51"/></expr_stmt>
      }<pos:position pos:line="112" pos:column="8"/></block></then></if>
      
      <comment type="block" pos:line="114" pos:column="7">/* preset max date for relative offsets,
	 if nothing follows we search for messages on a specific day */</comment>
      <expr_stmt><expr><name><name pos:line="116" pos:column="7">max<pos:position pos:line="116" pos:column="10"/></name><operator pos:line="116" pos:column="10">.<pos:position pos:line="116" pos:column="11"/></operator><name pos:line="116" pos:column="11">tm_year<pos:position pos:line="116" pos:column="18"/></name></name> <operator pos:line="116" pos:column="19">=<pos:position pos:line="116" pos:column="20"/></operator> <name><name pos:line="116" pos:column="21">min<pos:position pos:line="116" pos:column="24"/></name><operator pos:line="116" pos:column="24">.<pos:position pos:line="116" pos:column="25"/></operator><name pos:line="116" pos:column="25">tm_year<pos:position pos:line="116" pos:column="32"/></name></name></expr>;<pos:position pos:line="116" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="117" pos:column="7">max<pos:position pos:line="117" pos:column="10"/></name><operator pos:line="117" pos:column="10">.<pos:position pos:line="117" pos:column="11"/></operator><name pos:line="117" pos:column="11">tm_mon<pos:position pos:line="117" pos:column="17"/></name></name> <operator pos:line="117" pos:column="18">=<pos:position pos:line="117" pos:column="19"/></operator> <name><name pos:line="117" pos:column="20">min<pos:position pos:line="117" pos:column="23"/></name><operator pos:line="117" pos:column="23">.<pos:position pos:line="117" pos:column="24"/></operator><name pos:line="117" pos:column="24">tm_mon<pos:position pos:line="117" pos:column="30"/></name></name></expr>;<pos:position pos:line="117" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="118" pos:column="7">max<pos:position pos:line="118" pos:column="10"/></name><operator pos:line="118" pos:column="10">.<pos:position pos:line="118" pos:column="11"/></operator><name pos:line="118" pos:column="11">tm_mday<pos:position pos:line="118" pos:column="18"/></name></name> <operator pos:line="118" pos:column="19">=<pos:position pos:line="118" pos:column="20"/></operator> <name><name pos:line="118" pos:column="21">min<pos:position pos:line="118" pos:column="24"/></name><operator pos:line="118" pos:column="24">.<pos:position pos:line="118" pos:column="25"/></operator><name pos:line="118" pos:column="25">tm_mday<pos:position pos:line="118" pos:column="32"/></name></name></expr>;<pos:position pos:line="118" pos:column="33"/></expr_stmt>

      <if pos:line="120" pos:column="7">if <condition pos:line="120" pos:column="10">(<expr><operator pos:line="120" pos:column="11">!<pos:position pos:line="120" pos:column="12"/></operator><call><name pos:line="120" pos:column="12">parse_date_range<pos:position pos:line="120" pos:column="28"/></name> <argument_list pos:line="120" pos:column="29">(<argument><expr><name pos:line="120" pos:column="30">pc<pos:position pos:line="120" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="120" pos:column="34">&amp;<pos:position pos:line="120" pos:column="39"/></operator><name pos:line="120" pos:column="35">min<pos:position pos:line="120" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="120" pos:column="40">&amp;<pos:position pos:line="120" pos:column="45"/></operator><name pos:line="120" pos:column="41">max<pos:position pos:line="120" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="46">haveMin<pos:position pos:line="120" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="120" pos:column="55">&amp;<pos:position pos:line="120" pos:column="60"/></operator><name pos:line="120" pos:column="56">baseMin<pos:position pos:line="120" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="65">err<pos:position pos:line="120" pos:column="68"/></name></expr></argument>)<pos:position pos:line="120" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="120" pos:column="70"/></condition><then pos:line="120" pos:column="70">
      <block pos:line="121" pos:column="7">{ <comment type="block" pos:line="121" pos:column="9">/* bail out on any parsing error */</comment>
	<expr_stmt><expr><call><name pos:line="122" pos:column="9">FREE<pos:position pos:line="122" pos:column="13"/></name> <argument_list pos:line="122" pos:column="14">(<argument><expr><operator pos:line="122" pos:column="15">&amp;<pos:position pos:line="122" pos:column="20"/></operator><name><name pos:line="122" pos:column="16">buffer<pos:position pos:line="122" pos:column="22"/></name><operator pos:line="122" pos:column="22">.<pos:position pos:line="122" pos:column="23"/></operator><name pos:line="122" pos:column="23">data<pos:position pos:line="122" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="122" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="29"/></expr_stmt>
	<return pos:line="123" pos:column="9">return <expr><operator pos:line="123" pos:column="16">(<pos:position pos:line="123" pos:column="17"/></operator><operator pos:line="123" pos:column="17">-<pos:position pos:line="123" pos:column="18"/></operator><literal type="number" pos:line="123" pos:column="18">1<pos:position pos:line="123" pos:column="19"/></literal><operator pos:line="123" pos:column="19">)<pos:position pos:line="123" pos:column="20"/></operator></expr>;<pos:position pos:line="123" pos:column="21"/></return>
      }<pos:position pos:line="124" pos:column="8"/></block></then></if>
    }<pos:position pos:line="125" pos:column="6"/></block></then></if>
  }<pos:position pos:line="126" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="128" pos:column="3">/* Since we allow two dates to be specified we'll have to adjust that. */</comment>
  <expr_stmt><expr><call><name pos:line="129" pos:column="3">adjust_date_range<pos:position pos:line="129" pos:column="20"/></name> <argument_list pos:line="129" pos:column="21">(<argument><expr><operator pos:line="129" pos:column="22">&amp;<pos:position pos:line="129" pos:column="27"/></operator><name pos:line="129" pos:column="23">min<pos:position pos:line="129" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="129" pos:column="28">&amp;<pos:position pos:line="129" pos:column="33"/></operator><name pos:line="129" pos:column="29">max<pos:position pos:line="129" pos:column="32"/></name></expr></argument>)<pos:position pos:line="129" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="131" pos:column="3">pat<pos:position pos:line="131" pos:column="6"/></name><operator pos:line="131" pos:column="6">-&gt;<pos:position pos:line="131" pos:column="11"/></operator><name pos:line="131" pos:column="8">min<pos:position pos:line="131" pos:column="11"/></name></name> <operator pos:line="131" pos:column="12">=<pos:position pos:line="131" pos:column="13"/></operator> <call><name pos:line="131" pos:column="14">mutt_mktime<pos:position pos:line="131" pos:column="25"/></name> <argument_list pos:line="131" pos:column="26">(<argument><expr><operator pos:line="131" pos:column="27">&amp;<pos:position pos:line="131" pos:column="32"/></operator><name pos:line="131" pos:column="28">min<pos:position pos:line="131" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="131" pos:column="33">1<pos:position pos:line="131" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="132" pos:column="3">pat<pos:position pos:line="132" pos:column="6"/></name><operator pos:line="132" pos:column="6">-&gt;<pos:position pos:line="132" pos:column="11"/></operator><name pos:line="132" pos:column="8">max<pos:position pos:line="132" pos:column="11"/></name></name> <operator pos:line="132" pos:column="12">=<pos:position pos:line="132" pos:column="13"/></operator> <call><name pos:line="132" pos:column="14">mutt_mktime<pos:position pos:line="132" pos:column="25"/></name> <argument_list pos:line="132" pos:column="26">(<argument><expr><operator pos:line="132" pos:column="27">&amp;<pos:position pos:line="132" pos:column="32"/></operator><name pos:line="132" pos:column="28">max<pos:position pos:line="132" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="132" pos:column="33">1<pos:position pos:line="132" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="132" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="36"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="134" pos:column="3">FREE<pos:position pos:line="134" pos:column="7"/></name> <argument_list pos:line="134" pos:column="8">(<argument><expr><operator pos:line="134" pos:column="9">&amp;<pos:position pos:line="134" pos:column="14"/></operator><name><name pos:line="134" pos:column="10">buffer<pos:position pos:line="134" pos:column="16"/></name><operator pos:line="134" pos:column="16">.<pos:position pos:line="134" pos:column="17"/></operator><name pos:line="134" pos:column="17">data<pos:position pos:line="134" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="134" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="23"/></expr_stmt>

  <return pos:line="136" pos:column="3">return <expr><literal type="number" pos:line="136" pos:column="10">0<pos:position pos:line="136" pos:column="11"/></literal></expr>;<pos:position pos:line="136" pos:column="12"/></return>
}<pos:position pos:line="137" pos:column="2"/></block></function></unit>
