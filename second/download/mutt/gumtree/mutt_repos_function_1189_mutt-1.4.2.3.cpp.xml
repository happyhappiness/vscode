<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1189_mutt-1.4.2.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">mutt_usage<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">void<pos:position pos:line="1" pos:column="29"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <expr_stmt><expr><call><name pos:line="3" pos:column="3">puts<pos:position pos:line="3" pos:column="7"/></name> <argument_list pos:line="3" pos:column="8">(<argument><expr><call><name pos:line="3" pos:column="9">mutt_make_version<pos:position pos:line="3" pos:column="26"/></name> <argument_list pos:line="3" pos:column="27">()<pos:position pos:line="3" pos:column="29"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="31"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">puts<pos:position pos:line="5" pos:column="7"/></name></type> <name pos:line="5" pos:column="8">_<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(
<argument><expr><literal type="string" pos:line="6" pos:column="1">"usage: mutt [ -nRyzZ ] [ -e &lt;cmd&gt; ] [ -F &lt;file&gt; ] [ -m &lt;type&gt; ] [ -f &lt;file&gt; ]\n\
       mutt [ -nx ] [ -e &lt;cmd&gt; ] [ -a &lt;file&gt; ] [ -F &lt;file&gt; ] [ -H &lt;file&gt; ] [ -i &lt;file&gt; ] [ -s &lt;subj&gt; ] [ -b &lt;addr&gt; ] [ -c &lt;addr&gt; ] &lt;addr&gt; [ ... ]\n\
       mutt [ -n ] [ -e &lt;cmd&gt; ] [ -F &lt;file&gt; ] -p\n\
       mutt -v[v]\n\
\n\
options:\n\
  -a &lt;file&gt;\tattach a file to the message\n\
  -b &lt;address&gt;\tspecify a blind carbon-copy (BCC) address\n\
  -c &lt;address&gt;\tspecify a carbon-copy (CC) address\n\
  -e &lt;command&gt;\tspecify a command to be executed after initialization\n\
  -f &lt;file&gt;\tspecify which mailbox to read\n\
  -F &lt;file&gt;\tspecify an alternate muttrc file\n\
  -H &lt;file&gt;\tspecify a draft file to read header from\n\
  -i &lt;file&gt;\tspecify a file which Mutt should include in the reply\n\
  -m &lt;type&gt;\tspecify a default mailbox type\n\
  -n\t\tcauses Mutt not to read the system Muttrc\n\
  -p\t\trecall a postponed message\n\
  -R\t\topen mailbox in read-only mode\n\
  -s &lt;subj&gt;\tspecify a subject (must be in quotes if it has spaces)\n\
  -v\t\tshow version and compile-time definitions\n\
  -x\t\tsimulate the mailx send mode\n\
  -y\t\tselect a mailbox specified in your `mailboxes' list\n\
  -z\t\texit immediately if there are no messages in the mailbox\n\
  -Z\t\topen the first folder with new message, exit immediately if none\n\
  -h\t\tthis help message"<pos:position pos:line="6" pos:column="1503"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="28"/></argument_list></decl>;<pos:position pos:line="30" pos:column="29"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="32" pos:column="3">exit<pos:position pos:line="32" pos:column="7"/></name> <argument_list pos:line="32" pos:column="8">(<argument><expr><literal type="number" pos:line="32" pos:column="9">0<pos:position pos:line="32" pos:column="10"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="12"/></expr_stmt>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
