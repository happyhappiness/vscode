<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_155_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">mutt_check_simple<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">s<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">size_t<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">len<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">simple<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">tmp<pos:position pos:line="3" pos:column="11"/></name><index pos:line="3" pos:column="11">[<expr><name pos:line="3" pos:column="12">LONG_STRING<pos:position pos:line="3" pos:column="23"/></name></expr>]<pos:position pos:line="3" pos:column="24"/></index></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">do_simple<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">1<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">p<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>

  <for pos:line="7" pos:column="3">for <control pos:line="7" pos:column="7">(<init><expr><name pos:line="7" pos:column="8">p<pos:position pos:line="7" pos:column="9"/></name> <operator pos:line="7" pos:column="10">=<pos:position pos:line="7" pos:column="11"/></operator> <name pos:line="7" pos:column="12">s<pos:position pos:line="7" pos:column="13"/></name></expr>;<pos:position pos:line="7" pos:column="14"/></init> <condition><expr><name pos:line="7" pos:column="15">p<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">&amp;&amp;<pos:position pos:line="7" pos:column="27"/></operator> <operator pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="21">p<pos:position pos:line="7" pos:column="22"/></name></expr>;<pos:position pos:line="7" pos:column="23"/></condition> <incr><expr><name pos:line="7" pos:column="24">p<pos:position pos:line="7" pos:column="25"/></name><operator pos:line="7" pos:column="25">++<pos:position pos:line="7" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="7" pos:column="28"/></control>
  <block pos:line="8" pos:column="3">{
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">*<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">p<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">==<pos:position pos:line="9" pos:column="14"/></operator> <literal type="char" pos:line="9" pos:column="15">'\\'<pos:position pos:line="9" pos:column="19"/></literal> <operator pos:line="9" pos:column="20">&amp;&amp;<pos:position pos:line="9" pos:column="30"/></operator> <operator pos:line="9" pos:column="23">*<pos:position pos:line="9" pos:column="24"/></operator><operator pos:line="9" pos:column="24">(<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="25">p<pos:position pos:line="9" pos:column="26"/></name> <operator pos:line="9" pos:column="27">+<pos:position pos:line="9" pos:column="28"/></operator> <literal type="number" pos:line="9" pos:column="29">1<pos:position pos:line="9" pos:column="30"/></literal><operator pos:line="9" pos:column="30">)<pos:position pos:line="9" pos:column="31"/></operator></expr>)<pos:position pos:line="9" pos:column="32"/></condition><then pos:line="9" pos:column="32">
      <block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="7">p<pos:position pos:line="10" pos:column="8"/></name><operator pos:line="10" pos:column="8">++<pos:position pos:line="10" pos:column="10"/></operator></expr>;<pos:position pos:line="10" pos:column="11"/></expr_stmt></block></then>
    <elseif pos:line="11" pos:column="5">else <if pos:line="11" pos:column="10">if <condition pos:line="11" pos:column="13">(<expr><operator pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">p<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">==<pos:position pos:line="11" pos:column="19"/></operator> <literal type="char" pos:line="11" pos:column="20">'~'<pos:position pos:line="11" pos:column="23"/></literal> <operator pos:line="11" pos:column="24">||<pos:position pos:line="11" pos:column="26"/></operator> <operator pos:line="11" pos:column="27">*<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="28">p<pos:position pos:line="11" pos:column="29"/></name> <operator pos:line="11" pos:column="30">==<pos:position pos:line="11" pos:column="32"/></operator> <literal type="char" pos:line="11" pos:column="33">'='<pos:position pos:line="11" pos:column="36"/></literal> <operator pos:line="11" pos:column="37">||<pos:position pos:line="11" pos:column="39"/></operator> <operator pos:line="11" pos:column="40">*<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="41">p<pos:position pos:line="11" pos:column="42"/></name> <operator pos:line="11" pos:column="43">==<pos:position pos:line="11" pos:column="45"/></operator> <literal type="char" pos:line="11" pos:column="46">'%'<pos:position pos:line="11" pos:column="49"/></literal></expr>)<pos:position pos:line="11" pos:column="50"/></condition><then pos:line="11" pos:column="50">
    <block pos:line="12" pos:column="5">{
      <expr_stmt><expr><name pos:line="13" pos:column="7">do_simple<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">=<pos:position pos:line="13" pos:column="18"/></operator> <literal type="number" pos:line="13" pos:column="19">0<pos:position pos:line="13" pos:column="20"/></literal></expr>;<pos:position pos:line="13" pos:column="21"/></expr_stmt>
      <break pos:line="14" pos:column="7">break;<pos:position pos:line="14" pos:column="13"/></break>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="16" pos:column="4"/></block></for>

  <comment type="block" pos:line="18" pos:column="3">/* XXX - is ascii_strcasecmp() right here, or should we use locale's
   * equivalences?
   */</comment>

  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><name pos:line="22" pos:column="7">do_simple<pos:position pos:line="22" pos:column="16"/></name></expr>)<pos:position pos:line="22" pos:column="17"/></condition><then pos:line="22" pos:column="17"> <comment type="block" pos:line="22" pos:column="18">/* yup, so spoof a real request */</comment>
  <block pos:line="23" pos:column="3">{
    <comment type="block" pos:line="24" pos:column="5">/* convert old tokens into the new format */</comment>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><call><name pos:line="25" pos:column="9">ascii_strcasecmp<pos:position pos:line="25" pos:column="25"/></name> <argument_list pos:line="25" pos:column="26">(<argument><expr><literal type="string" pos:line="25" pos:column="27">"all"<pos:position pos:line="25" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">s<pos:position pos:line="25" pos:column="35"/></name></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call> <operator pos:line="25" pos:column="37">==<pos:position pos:line="25" pos:column="39"/></operator> <literal type="number" pos:line="25" pos:column="40">0<pos:position pos:line="25" pos:column="41"/></literal> <operator pos:line="25" pos:column="42">||<pos:position pos:line="25" pos:column="44"/></operator>
	<operator pos:line="26" pos:column="9">!<pos:position pos:line="26" pos:column="10"/></operator><call><name pos:line="26" pos:column="10">mutt_strcmp<pos:position pos:line="26" pos:column="21"/></name> <argument_list pos:line="26" pos:column="22">(<argument><expr><literal type="string" pos:line="26" pos:column="23">"^"<pos:position pos:line="26" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="28">s<pos:position pos:line="26" pos:column="29"/></name></expr></argument>)<pos:position pos:line="26" pos:column="30"/></argument_list></call> <operator pos:line="26" pos:column="31">||<pos:position pos:line="26" pos:column="33"/></operator> <operator pos:line="26" pos:column="34">!<pos:position pos:line="26" pos:column="35"/></operator><call><name pos:line="26" pos:column="35">mutt_strcmp<pos:position pos:line="26" pos:column="46"/></name> <argument_list pos:line="26" pos:column="47">(<argument><expr><literal type="string" pos:line="26" pos:column="48">"."<pos:position pos:line="26" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="53">s<pos:position pos:line="26" pos:column="54"/></name></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="56"/></condition><then pos:line="26" pos:column="56"> <comment type="block" pos:line="26" pos:column="57">/* ~A is more efficient */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="7">strfcpy<pos:position pos:line="27" pos:column="14"/></name> <argument_list pos:line="27" pos:column="15">(<argument><expr><name pos:line="27" pos:column="16">s<pos:position pos:line="27" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="19">"~A"<pos:position pos:line="27" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="25">len<pos:position pos:line="27" pos:column="28"/></name></expr></argument>)<pos:position pos:line="27" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt></block></then>
    <elseif pos:line="28" pos:column="5">else <if pos:line="28" pos:column="10">if <condition pos:line="28" pos:column="13">(<expr><call><name pos:line="28" pos:column="14">ascii_strcasecmp<pos:position pos:line="28" pos:column="30"/></name> <argument_list pos:line="28" pos:column="31">(<argument><expr><literal type="string" pos:line="28" pos:column="32">"del"<pos:position pos:line="28" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="39">s<pos:position pos:line="28" pos:column="40"/></name></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call> <operator pos:line="28" pos:column="42">==<pos:position pos:line="28" pos:column="44"/></operator> <literal type="number" pos:line="28" pos:column="45">0<pos:position pos:line="28" pos:column="46"/></literal></expr>)<pos:position pos:line="28" pos:column="47"/></condition><then pos:line="28" pos:column="47">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="7">strfcpy<pos:position pos:line="29" pos:column="14"/></name> <argument_list pos:line="29" pos:column="15">(<argument><expr><name pos:line="29" pos:column="16">s<pos:position pos:line="29" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="19">"~D"<pos:position pos:line="29" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="25">len<pos:position pos:line="29" pos:column="28"/></name></expr></argument>)<pos:position pos:line="29" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="30"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="30" pos:column="5">else <if pos:line="30" pos:column="10">if <condition pos:line="30" pos:column="13">(<expr><call><name pos:line="30" pos:column="14">ascii_strcasecmp<pos:position pos:line="30" pos:column="30"/></name> <argument_list pos:line="30" pos:column="31">(<argument><expr><literal type="string" pos:line="30" pos:column="32">"flag"<pos:position pos:line="30" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="40">s<pos:position pos:line="30" pos:column="41"/></name></expr></argument>)<pos:position pos:line="30" pos:column="42"/></argument_list></call> <operator pos:line="30" pos:column="43">==<pos:position pos:line="30" pos:column="45"/></operator> <literal type="number" pos:line="30" pos:column="46">0<pos:position pos:line="30" pos:column="47"/></literal></expr>)<pos:position pos:line="30" pos:column="48"/></condition><then pos:line="30" pos:column="48">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="7">strfcpy<pos:position pos:line="31" pos:column="14"/></name> <argument_list pos:line="31" pos:column="15">(<argument><expr><name pos:line="31" pos:column="16">s<pos:position pos:line="31" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="19">"~F"<pos:position pos:line="31" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="25">len<pos:position pos:line="31" pos:column="28"/></name></expr></argument>)<pos:position pos:line="31" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="30"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="32" pos:column="5">else <if pos:line="32" pos:column="10">if <condition pos:line="32" pos:column="13">(<expr><call><name pos:line="32" pos:column="14">ascii_strcasecmp<pos:position pos:line="32" pos:column="30"/></name> <argument_list pos:line="32" pos:column="31">(<argument><expr><literal type="string" pos:line="32" pos:column="32">"new"<pos:position pos:line="32" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="39">s<pos:position pos:line="32" pos:column="40"/></name></expr></argument>)<pos:position pos:line="32" pos:column="41"/></argument_list></call> <operator pos:line="32" pos:column="42">==<pos:position pos:line="32" pos:column="44"/></operator> <literal type="number" pos:line="32" pos:column="45">0<pos:position pos:line="32" pos:column="46"/></literal></expr>)<pos:position pos:line="32" pos:column="47"/></condition><then pos:line="32" pos:column="47">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="7">strfcpy<pos:position pos:line="33" pos:column="14"/></name> <argument_list pos:line="33" pos:column="15">(<argument><expr><name pos:line="33" pos:column="16">s<pos:position pos:line="33" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="19">"~N"<pos:position pos:line="33" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="25">len<pos:position pos:line="33" pos:column="28"/></name></expr></argument>)<pos:position pos:line="33" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="30"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="34" pos:column="5">else <if pos:line="34" pos:column="10">if <condition pos:line="34" pos:column="13">(<expr><call><name pos:line="34" pos:column="14">ascii_strcasecmp<pos:position pos:line="34" pos:column="30"/></name> <argument_list pos:line="34" pos:column="31">(<argument><expr><literal type="string" pos:line="34" pos:column="32">"old"<pos:position pos:line="34" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="39">s<pos:position pos:line="34" pos:column="40"/></name></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call> <operator pos:line="34" pos:column="42">==<pos:position pos:line="34" pos:column="44"/></operator> <literal type="number" pos:line="34" pos:column="45">0<pos:position pos:line="34" pos:column="46"/></literal></expr>)<pos:position pos:line="34" pos:column="47"/></condition><then pos:line="34" pos:column="47">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="7">strfcpy<pos:position pos:line="35" pos:column="14"/></name> <argument_list pos:line="35" pos:column="15">(<argument><expr><name pos:line="35" pos:column="16">s<pos:position pos:line="35" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="19">"~O"<pos:position pos:line="35" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="25">len<pos:position pos:line="35" pos:column="28"/></name></expr></argument>)<pos:position pos:line="35" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="36" pos:column="5">else <if pos:line="36" pos:column="10">if <condition pos:line="36" pos:column="13">(<expr><call><name pos:line="36" pos:column="14">ascii_strcasecmp<pos:position pos:line="36" pos:column="30"/></name> <argument_list pos:line="36" pos:column="31">(<argument><expr><literal type="string" pos:line="36" pos:column="32">"repl"<pos:position pos:line="36" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="40">s<pos:position pos:line="36" pos:column="41"/></name></expr></argument>)<pos:position pos:line="36" pos:column="42"/></argument_list></call> <operator pos:line="36" pos:column="43">==<pos:position pos:line="36" pos:column="45"/></operator> <literal type="number" pos:line="36" pos:column="46">0<pos:position pos:line="36" pos:column="47"/></literal></expr>)<pos:position pos:line="36" pos:column="48"/></condition><then pos:line="36" pos:column="48">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="7">strfcpy<pos:position pos:line="37" pos:column="14"/></name> <argument_list pos:line="37" pos:column="15">(<argument><expr><name pos:line="37" pos:column="16">s<pos:position pos:line="37" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="19">"~Q"<pos:position pos:line="37" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="25">len<pos:position pos:line="37" pos:column="28"/></name></expr></argument>)<pos:position pos:line="37" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="30"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="38" pos:column="5">else <if pos:line="38" pos:column="10">if <condition pos:line="38" pos:column="13">(<expr><call><name pos:line="38" pos:column="14">ascii_strcasecmp<pos:position pos:line="38" pos:column="30"/></name> <argument_list pos:line="38" pos:column="31">(<argument><expr><literal type="string" pos:line="38" pos:column="32">"read"<pos:position pos:line="38" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="40">s<pos:position pos:line="38" pos:column="41"/></name></expr></argument>)<pos:position pos:line="38" pos:column="42"/></argument_list></call> <operator pos:line="38" pos:column="43">==<pos:position pos:line="38" pos:column="45"/></operator> <literal type="number" pos:line="38" pos:column="46">0<pos:position pos:line="38" pos:column="47"/></literal></expr>)<pos:position pos:line="38" pos:column="48"/></condition><then pos:line="38" pos:column="48">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="7">strfcpy<pos:position pos:line="39" pos:column="14"/></name> <argument_list pos:line="39" pos:column="15">(<argument><expr><name pos:line="39" pos:column="16">s<pos:position pos:line="39" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="19">"~R"<pos:position pos:line="39" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="25">len<pos:position pos:line="39" pos:column="28"/></name></expr></argument>)<pos:position pos:line="39" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="30"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="40" pos:column="5">else <if pos:line="40" pos:column="10">if <condition pos:line="40" pos:column="13">(<expr><call><name pos:line="40" pos:column="14">ascii_strcasecmp<pos:position pos:line="40" pos:column="30"/></name> <argument_list pos:line="40" pos:column="31">(<argument><expr><literal type="string" pos:line="40" pos:column="32">"tag"<pos:position pos:line="40" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="39">s<pos:position pos:line="40" pos:column="40"/></name></expr></argument>)<pos:position pos:line="40" pos:column="41"/></argument_list></call> <operator pos:line="40" pos:column="42">==<pos:position pos:line="40" pos:column="44"/></operator> <literal type="number" pos:line="40" pos:column="45">0<pos:position pos:line="40" pos:column="46"/></literal></expr>)<pos:position pos:line="40" pos:column="47"/></condition><then pos:line="40" pos:column="47">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="7">strfcpy<pos:position pos:line="41" pos:column="14"/></name> <argument_list pos:line="41" pos:column="15">(<argument><expr><name pos:line="41" pos:column="16">s<pos:position pos:line="41" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="19">"~T"<pos:position pos:line="41" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="25">len<pos:position pos:line="41" pos:column="28"/></name></expr></argument>)<pos:position pos:line="41" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="30"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="42" pos:column="5">else <if pos:line="42" pos:column="10">if <condition pos:line="42" pos:column="13">(<expr><call><name pos:line="42" pos:column="14">ascii_strcasecmp<pos:position pos:line="42" pos:column="30"/></name> <argument_list pos:line="42" pos:column="31">(<argument><expr><literal type="string" pos:line="42" pos:column="32">"unread"<pos:position pos:line="42" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="42">s<pos:position pos:line="42" pos:column="43"/></name></expr></argument>)<pos:position pos:line="42" pos:column="44"/></argument_list></call> <operator pos:line="42" pos:column="45">==<pos:position pos:line="42" pos:column="47"/></operator> <literal type="number" pos:line="42" pos:column="48">0<pos:position pos:line="42" pos:column="49"/></literal></expr>)<pos:position pos:line="42" pos:column="50"/></condition><then pos:line="42" pos:column="50">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="7">strfcpy<pos:position pos:line="43" pos:column="14"/></name> <argument_list pos:line="43" pos:column="15">(<argument><expr><name pos:line="43" pos:column="16">s<pos:position pos:line="43" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="19">"~U"<pos:position pos:line="43" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="25">len<pos:position pos:line="43" pos:column="28"/></name></expr></argument>)<pos:position pos:line="43" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt></block></then></if></elseif>
    <else pos:line="44" pos:column="5">else
    <block pos:line="45" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">quote_simple<pos:position pos:line="46" pos:column="19"/></name> <argument_list pos:line="46" pos:column="20">(<argument><expr><name pos:line="46" pos:column="21">tmp<pos:position pos:line="46" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="26">sizeof<argument_list pos:line="46" pos:column="32">(<argument><expr><name pos:line="46" pos:column="33">tmp<pos:position pos:line="46" pos:column="36"/></name></expr></argument>)<pos:position pos:line="46" pos:column="37"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="46" pos:column="39">s<pos:position pos:line="46" pos:column="40"/></name></expr></argument>)<pos:position pos:line="46" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="47" pos:column="7">mutt_expand_fmt<pos:position pos:line="47" pos:column="22"/></name> <argument_list pos:line="47" pos:column="23">(<argument><expr><name pos:line="47" pos:column="24">s<pos:position pos:line="47" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="27">len<pos:position pos:line="47" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="32">simple<pos:position pos:line="47" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="40">tmp<pos:position pos:line="47" pos:column="43"/></name></expr></argument>)<pos:position pos:line="47" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></else></if>
  }<pos:position pos:line="49" pos:column="4"/></block></then></if>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
