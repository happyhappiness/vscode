<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1138_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">print_partial_compiled_pattern<pos:position pos:line="2" pos:column="31"/></name> <argument_list pos:line="2" pos:column="32">(<argument><expr><name pos:line="2" pos:column="33">start<pos:position pos:line="2" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="40">end<pos:position pos:line="2" pos:column="43"/></name></expr></argument>)<pos:position pos:line="2" pos:column="44"/></argument_list>
    <name pos:line="3" pos:column="5">unsigned<pos:position pos:line="3" pos:column="13"/></name> <name pos:line="3" pos:column="14">char<pos:position pos:line="3" pos:column="18"/></name> <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier><name pos:line="3" pos:column="20">start<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">unsigned<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">char<pos:position pos:line="4" pos:column="18"/></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">end<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">mcnt<pos:position pos:line="6" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="13">mcnt2<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">unsigned<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">char<pos:position pos:line="7" pos:column="16"/></name> <modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="18">p1<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">unsigned<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">char<pos:position pos:line="8" pos:column="16"/></name> <modifier pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></modifier></type><name pos:line="8" pos:column="18">p<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><name pos:line="8" pos:column="22">start<pos:position pos:line="8" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">unsigned<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">char<pos:position pos:line="9" pos:column="16"/></name> <modifier pos:line="9" pos:column="17">*<pos:position pos:line="9" pos:column="18"/></modifier></type><name pos:line="9" pos:column="18">pend<pos:position pos:line="9" pos:column="22"/></name> <init pos:line="9" pos:column="23">= <expr><name pos:line="9" pos:column="25">end<pos:position pos:line="9" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">start<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">==<pos:position pos:line="11" pos:column="15"/></operator> <name pos:line="11" pos:column="16">NULL<pos:position pos:line="11" pos:column="20"/></name></expr>)<pos:position pos:line="11" pos:column="21"/></condition><then pos:line="11" pos:column="21">
    <block pos:line="12" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="13" pos:column="7">printf<pos:position pos:line="13" pos:column="13"/></name> <argument_list pos:line="13" pos:column="14">(<argument><expr><literal type="string" pos:line="13" pos:column="15">"(null)\n"<pos:position pos:line="13" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>
      <return pos:line="14" pos:column="7">return;<pos:position pos:line="14" pos:column="14"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="17" pos:column="3">/* Loop over pattern commands.  */</comment>
  <while pos:line="18" pos:column="3">while <condition pos:line="18" pos:column="9">(<expr><name pos:line="18" pos:column="10">p<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">&lt;<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="14">pend<pos:position pos:line="18" pos:column="18"/></name></expr>)<pos:position pos:line="18" pos:column="19"/></condition>
    <block pos:line="19" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">printf<pos:position pos:line="20" pos:column="13"/></name> <argument_list pos:line="20" pos:column="14">(<argument><expr><literal type="string" pos:line="20" pos:column="15">"%d:\t"<pos:position pos:line="20" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="24">p<pos:position pos:line="20" pos:column="25"/></name> <operator pos:line="20" pos:column="26">-<pos:position pos:line="20" pos:column="27"/></operator> <name pos:line="20" pos:column="28">start<pos:position pos:line="20" pos:column="33"/></name></expr></argument>)<pos:position pos:line="20" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt>

      <switch pos:line="22" pos:column="7">switch <condition pos:line="22" pos:column="14">(<expr><operator pos:line="22" pos:column="15">(<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="16">re_opcode_t<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">)<pos:position pos:line="22" pos:column="28"/></operator> <operator pos:line="22" pos:column="29">*<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="30">p<pos:position pos:line="22" pos:column="31"/></name><operator pos:line="22" pos:column="31">++<pos:position pos:line="22" pos:column="33"/></operator></expr>)<pos:position pos:line="22" pos:column="34"/></condition>
	<block pos:line="23" pos:column="9">{
        <case pos:line="24" pos:column="9">case <expr><name pos:line="24" pos:column="14">no_op<pos:position pos:line="24" pos:column="19"/></name></expr>:<pos:position pos:line="24" pos:column="20"/></case>
          <expr_stmt><expr><call><name pos:line="25" pos:column="11">printf<pos:position pos:line="25" pos:column="17"/></name> <argument_list pos:line="25" pos:column="18">(<argument><expr><literal type="string" pos:line="25" pos:column="19">"/no_op"<pos:position pos:line="25" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt>
          <break pos:line="26" pos:column="11">break;<pos:position pos:line="26" pos:column="17"/></break>

	<case pos:line="28" pos:column="9">case <expr><name pos:line="28" pos:column="14">exactn<pos:position pos:line="28" pos:column="20"/></name></expr>:<pos:position pos:line="28" pos:column="21"/></case>
	  <expr_stmt><expr><name pos:line="29" pos:column="11">mcnt<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <operator pos:line="29" pos:column="18">*<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="19">p<pos:position pos:line="29" pos:column="20"/></name><operator pos:line="29" pos:column="20">++<pos:position pos:line="29" pos:column="22"/></operator></expr>;<pos:position pos:line="29" pos:column="23"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="30" pos:column="11">printf<pos:position pos:line="30" pos:column="17"/></name> <argument_list pos:line="30" pos:column="18">(<argument><expr><literal type="string" pos:line="30" pos:column="19">"/exactn/%d"<pos:position pos:line="30" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="33">mcnt<pos:position pos:line="30" pos:column="37"/></name></expr></argument>)<pos:position pos:line="30" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt>
          <do pos:line="31" pos:column="11">do
	    <block pos:line="32" pos:column="13">{
              <expr_stmt><expr><call><name pos:line="33" pos:column="15">putchar<pos:position pos:line="33" pos:column="22"/></name> <argument_list pos:line="33" pos:column="23">(<argument><expr><literal type="char" pos:line="33" pos:column="24">'/'<pos:position pos:line="33" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>
	      <expr_stmt><expr><call><name pos:line="34" pos:column="15">putchar<pos:position pos:line="34" pos:column="22"/></name> <argument_list pos:line="34" pos:column="23">(<argument><expr><operator pos:line="34" pos:column="24">*<pos:position pos:line="34" pos:column="25"/></operator><name pos:line="34" pos:column="25">p<pos:position pos:line="34" pos:column="26"/></name><operator pos:line="34" pos:column="26">++<pos:position pos:line="34" pos:column="28"/></operator></expr></argument>)<pos:position pos:line="34" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="35" pos:column="14"/></block>
          while <condition pos:line="36" pos:column="17">(<expr><operator pos:line="36" pos:column="18">--<pos:position pos:line="36" pos:column="20"/></operator><name pos:line="36" pos:column="20">mcnt<pos:position pos:line="36" pos:column="24"/></name></expr>)<pos:position pos:line="36" pos:column="25"/></condition>;<pos:position pos:line="36" pos:column="26"/></do>
          <break pos:line="37" pos:column="11">break;<pos:position pos:line="37" pos:column="17"/></break>

	<case pos:line="39" pos:column="9">case <expr><name pos:line="39" pos:column="14">start_memory<pos:position pos:line="39" pos:column="26"/></name></expr>:<pos:position pos:line="39" pos:column="27"/></case>
          <expr_stmt><expr><name pos:line="40" pos:column="11">mcnt<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <operator pos:line="40" pos:column="18">*<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="19">p<pos:position pos:line="40" pos:column="20"/></name><operator pos:line="40" pos:column="20">++<pos:position pos:line="40" pos:column="22"/></operator></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="41" pos:column="11">printf<pos:position pos:line="41" pos:column="17"/></name> <argument_list pos:line="41" pos:column="18">(<argument><expr><literal type="string" pos:line="41" pos:column="19">"/start_memory/%d/%d"<pos:position pos:line="41" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="42">mcnt<pos:position pos:line="41" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="48">*<pos:position pos:line="41" pos:column="49"/></operator><name pos:line="41" pos:column="49">p<pos:position pos:line="41" pos:column="50"/></name><operator pos:line="41" pos:column="50">++<pos:position pos:line="41" pos:column="52"/></operator></expr></argument>)<pos:position pos:line="41" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="54"/></expr_stmt>
          <break pos:line="42" pos:column="11">break;<pos:position pos:line="42" pos:column="17"/></break>

	<case pos:line="44" pos:column="9">case <expr><name pos:line="44" pos:column="14">stop_memory<pos:position pos:line="44" pos:column="25"/></name></expr>:<pos:position pos:line="44" pos:column="26"/></case>
          <expr_stmt><expr><name pos:line="45" pos:column="11">mcnt<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">=<pos:position pos:line="45" pos:column="17"/></operator> <operator pos:line="45" pos:column="18">*<pos:position pos:line="45" pos:column="19"/></operator><name pos:line="45" pos:column="19">p<pos:position pos:line="45" pos:column="20"/></name><operator pos:line="45" pos:column="20">++<pos:position pos:line="45" pos:column="22"/></operator></expr>;<pos:position pos:line="45" pos:column="23"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="46" pos:column="11">printf<pos:position pos:line="46" pos:column="17"/></name> <argument_list pos:line="46" pos:column="18">(<argument><expr><literal type="string" pos:line="46" pos:column="19">"/stop_memory/%d/%d"<pos:position pos:line="46" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="41">mcnt<pos:position pos:line="46" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="47">*<pos:position pos:line="46" pos:column="48"/></operator><name pos:line="46" pos:column="48">p<pos:position pos:line="46" pos:column="49"/></name><operator pos:line="46" pos:column="49">++<pos:position pos:line="46" pos:column="51"/></operator></expr></argument>)<pos:position pos:line="46" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="53"/></expr_stmt>
          <break pos:line="47" pos:column="11">break;<pos:position pos:line="47" pos:column="17"/></break>

	<case pos:line="49" pos:column="9">case <expr><name pos:line="49" pos:column="14">duplicate<pos:position pos:line="49" pos:column="23"/></name></expr>:<pos:position pos:line="49" pos:column="24"/></case>
	  <expr_stmt><expr><call><name pos:line="50" pos:column="11">printf<pos:position pos:line="50" pos:column="17"/></name> <argument_list pos:line="50" pos:column="18">(<argument><expr><literal type="string" pos:line="50" pos:column="19">"/duplicate/%d"<pos:position pos:line="50" pos:column="34"/></literal></expr></argument>, <argument><expr><operator pos:line="50" pos:column="36">*<pos:position pos:line="50" pos:column="37"/></operator><name pos:line="50" pos:column="37">p<pos:position pos:line="50" pos:column="38"/></name><operator pos:line="50" pos:column="38">++<pos:position pos:line="50" pos:column="40"/></operator></expr></argument>)<pos:position pos:line="50" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="42"/></expr_stmt>
	  <break pos:line="51" pos:column="11">break;<pos:position pos:line="51" pos:column="17"/></break>

	<case pos:line="53" pos:column="9">case <expr><name pos:line="53" pos:column="14">anychar<pos:position pos:line="53" pos:column="21"/></name></expr>:<pos:position pos:line="53" pos:column="22"/></case>
	  <expr_stmt><expr><call><name pos:line="54" pos:column="11">printf<pos:position pos:line="54" pos:column="17"/></name> <argument_list pos:line="54" pos:column="18">(<argument><expr><literal type="string" pos:line="54" pos:column="19">"/anychar"<pos:position pos:line="54" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="31"/></expr_stmt>
	  <break pos:line="55" pos:column="11">break;<pos:position pos:line="55" pos:column="17"/></break>

	<case pos:line="57" pos:column="9">case <expr><name pos:line="57" pos:column="14">charset<pos:position pos:line="57" pos:column="21"/></name></expr>:<pos:position pos:line="57" pos:column="22"/></case>
        <case pos:line="58" pos:column="9">case <expr><name pos:line="58" pos:column="14">charset_not<pos:position pos:line="58" pos:column="25"/></name></expr>:<pos:position pos:line="58" pos:column="26"/></case>
          <block pos:line="59" pos:column="11">{
            <decl_stmt><decl><type><specifier pos:line="60" pos:column="13">register<pos:position pos:line="60" pos:column="21"/></specifier> <name pos:line="60" pos:column="22">int<pos:position pos:line="60" pos:column="25"/></name></type> <name pos:line="60" pos:column="26">c<pos:position pos:line="60" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="60" pos:column="29">last<pos:position pos:line="60" pos:column="33"/></name> <init pos:line="60" pos:column="34">= <expr><operator pos:line="60" pos:column="36">-<pos:position pos:line="60" pos:column="37"/></operator><literal type="number" pos:line="60" pos:column="37">100<pos:position pos:line="60" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="60" pos:column="41"/></decl_stmt>
	    <decl_stmt><decl><type><specifier pos:line="61" pos:column="13">register<pos:position pos:line="61" pos:column="21"/></specifier> <name pos:line="61" pos:column="22">int<pos:position pos:line="61" pos:column="25"/></name></type> <name pos:line="61" pos:column="26">in_range<pos:position pos:line="61" pos:column="34"/></name> <init pos:line="61" pos:column="35">= <expr><literal type="number" pos:line="61" pos:column="37">0<pos:position pos:line="61" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="61" pos:column="39"/></decl_stmt>

	    <expr_stmt><expr><call><name pos:line="63" pos:column="13">printf<pos:position pos:line="63" pos:column="19"/></name> <argument_list pos:line="63" pos:column="20">(<argument><expr><literal type="string" pos:line="63" pos:column="21">"/charset [%s"<pos:position pos:line="63" pos:column="35"/></literal></expr></argument>,
	            <argument><expr><ternary><condition><expr><operator pos:line="64" pos:column="21">(<pos:position pos:line="64" pos:column="22"/></operator><name pos:line="64" pos:column="22">re_opcode_t<pos:position pos:line="64" pos:column="33"/></name><operator pos:line="64" pos:column="33">)<pos:position pos:line="64" pos:column="34"/></operator> <operator pos:line="64" pos:column="35">*<pos:position pos:line="64" pos:column="36"/></operator><operator pos:line="64" pos:column="36">(<pos:position pos:line="64" pos:column="37"/></operator><name pos:line="64" pos:column="37">p<pos:position pos:line="64" pos:column="38"/></name> <operator pos:line="64" pos:column="39">-<pos:position pos:line="64" pos:column="40"/></operator> <literal type="number" pos:line="64" pos:column="41">1<pos:position pos:line="64" pos:column="42"/></literal><operator pos:line="64" pos:column="42">)<pos:position pos:line="64" pos:column="43"/></operator> <operator pos:line="64" pos:column="44">==<pos:position pos:line="64" pos:column="46"/></operator> <name pos:line="64" pos:column="47">charset_not<pos:position pos:line="64" pos:column="58"/></name></expr> ?<pos:position pos:line="64" pos:column="60"/></condition><then pos:line="64" pos:column="60"> <expr><literal type="string" pos:line="64" pos:column="61">"^"<pos:position pos:line="64" pos:column="64"/></literal></expr> <pos:position pos:line="64" pos:column="65"/></then><else pos:line="64" pos:column="65">: <expr><literal type="string" pos:line="64" pos:column="67">""<pos:position pos:line="64" pos:column="69"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="64" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="71"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="66" pos:column="13">assert<pos:position pos:line="66" pos:column="19"/></name> <argument_list pos:line="66" pos:column="20">(<argument><expr><name pos:line="66" pos:column="21">p<pos:position pos:line="66" pos:column="22"/></name> <operator pos:line="66" pos:column="23">+<pos:position pos:line="66" pos:column="24"/></operator> <operator pos:line="66" pos:column="25">*<pos:position pos:line="66" pos:column="26"/></operator><name pos:line="66" pos:column="26">p<pos:position pos:line="66" pos:column="27"/></name> <operator pos:line="66" pos:column="28">&lt;<pos:position pos:line="66" pos:column="32"/></operator> <name pos:line="66" pos:column="30">pend<pos:position pos:line="66" pos:column="34"/></name></expr></argument>)<pos:position pos:line="66" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="36"/></expr_stmt>

            <for pos:line="68" pos:column="13">for <control pos:line="68" pos:column="17">(<init><expr><name pos:line="68" pos:column="18">c<pos:position pos:line="68" pos:column="19"/></name> <operator pos:line="68" pos:column="20">=<pos:position pos:line="68" pos:column="21"/></operator> <literal type="number" pos:line="68" pos:column="22">0<pos:position pos:line="68" pos:column="23"/></literal></expr>;<pos:position pos:line="68" pos:column="24"/></init> <condition><expr><name pos:line="68" pos:column="25">c<pos:position pos:line="68" pos:column="26"/></name> <operator pos:line="68" pos:column="27">&lt;<pos:position pos:line="68" pos:column="31"/></operator> <literal type="number" pos:line="68" pos:column="29">256<pos:position pos:line="68" pos:column="32"/></literal></expr>;<pos:position pos:line="68" pos:column="33"/></condition> <incr><expr><name pos:line="68" pos:column="34">c<pos:position pos:line="68" pos:column="35"/></name><operator pos:line="68" pos:column="35">++<pos:position pos:line="68" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="68" pos:column="38"/></control>
	      <block type="pseudo"><if pos:line="69" pos:column="15">if <condition pos:line="69" pos:column="18">(<expr><name pos:line="69" pos:column="19">c<pos:position pos:line="69" pos:column="20"/></name> <operator pos:line="69" pos:column="21">/<pos:position pos:line="69" pos:column="22"/></operator> <literal type="number" pos:line="69" pos:column="23">8<pos:position pos:line="69" pos:column="24"/></literal> <operator pos:line="69" pos:column="25">&lt;<pos:position pos:line="69" pos:column="29"/></operator> <operator pos:line="69" pos:column="27">*<pos:position pos:line="69" pos:column="28"/></operator><name pos:line="69" pos:column="28">p<pos:position pos:line="69" pos:column="29"/></name>
		  <operator pos:line="70" pos:column="19">&amp;&amp;<pos:position pos:line="70" pos:column="29"/></operator> <operator pos:line="70" pos:column="22">(<pos:position pos:line="70" pos:column="23"/></operator><name><name pos:line="70" pos:column="23">p<pos:position pos:line="70" pos:column="24"/></name><index pos:line="70" pos:column="24">[<expr><literal type="number" pos:line="70" pos:column="25">1<pos:position pos:line="70" pos:column="26"/></literal> <operator pos:line="70" pos:column="27">+<pos:position pos:line="70" pos:column="28"/></operator> <operator pos:line="70" pos:column="29">(<pos:position pos:line="70" pos:column="30"/></operator><name pos:line="70" pos:column="30">c<pos:position pos:line="70" pos:column="31"/></name><operator pos:line="70" pos:column="31">/<pos:position pos:line="70" pos:column="32"/></operator><literal type="number" pos:line="70" pos:column="32">8<pos:position pos:line="70" pos:column="33"/></literal><operator pos:line="70" pos:column="33">)<pos:position pos:line="70" pos:column="34"/></operator></expr>]<pos:position pos:line="70" pos:column="35"/></index></name> <operator pos:line="70" pos:column="36">&amp;<pos:position pos:line="70" pos:column="41"/></operator> <operator pos:line="70" pos:column="38">(<pos:position pos:line="70" pos:column="39"/></operator><literal type="number" pos:line="70" pos:column="39">1<pos:position pos:line="70" pos:column="40"/></literal> <operator pos:line="70" pos:column="41">&lt;&lt;<pos:position pos:line="70" pos:column="49"/></operator> <operator pos:line="70" pos:column="44">(<pos:position pos:line="70" pos:column="45"/></operator><name pos:line="70" pos:column="45">c<pos:position pos:line="70" pos:column="46"/></name> <operator pos:line="70" pos:column="47">%<pos:position pos:line="70" pos:column="48"/></operator> <literal type="number" pos:line="70" pos:column="49">8<pos:position pos:line="70" pos:column="50"/></literal><operator pos:line="70" pos:column="50">)<pos:position pos:line="70" pos:column="51"/></operator><operator pos:line="70" pos:column="51">)<pos:position pos:line="70" pos:column="52"/></operator><operator pos:line="70" pos:column="52">)<pos:position pos:line="70" pos:column="53"/></operator></expr>)<pos:position pos:line="70" pos:column="54"/></condition><then pos:line="70" pos:column="54">
		<block pos:line="71" pos:column="17">{
		  <comment type="block" pos:line="72" pos:column="19">/* Are we starting a range?  */</comment>
		  <if pos:line="73" pos:column="19">if <condition pos:line="73" pos:column="22">(<expr><name pos:line="73" pos:column="23">last<pos:position pos:line="73" pos:column="27"/></name> <operator pos:line="73" pos:column="28">+<pos:position pos:line="73" pos:column="29"/></operator> <literal type="number" pos:line="73" pos:column="30">1<pos:position pos:line="73" pos:column="31"/></literal> <operator pos:line="73" pos:column="32">==<pos:position pos:line="73" pos:column="34"/></operator> <name pos:line="73" pos:column="35">c<pos:position pos:line="73" pos:column="36"/></name> <operator pos:line="73" pos:column="37">&amp;&amp;<pos:position pos:line="73" pos:column="47"/></operator> <operator pos:line="73" pos:column="40">!<pos:position pos:line="73" pos:column="41"/></operator> <name pos:line="73" pos:column="42">in_range<pos:position pos:line="73" pos:column="50"/></name></expr>)<pos:position pos:line="73" pos:column="51"/></condition><then pos:line="73" pos:column="51">
		    <block pos:line="74" pos:column="21">{
		      <expr_stmt><expr><call><name pos:line="75" pos:column="23">putchar<pos:position pos:line="75" pos:column="30"/></name> <argument_list pos:line="75" pos:column="31">(<argument><expr><literal type="char" pos:line="75" pos:column="32">'-'<pos:position pos:line="75" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="37"/></expr_stmt>
		      <expr_stmt><expr><name pos:line="76" pos:column="23">in_range<pos:position pos:line="76" pos:column="31"/></name> <operator pos:line="76" pos:column="32">=<pos:position pos:line="76" pos:column="33"/></operator> <literal type="number" pos:line="76" pos:column="34">1<pos:position pos:line="76" pos:column="35"/></literal></expr>;<pos:position pos:line="76" pos:column="36"/></expr_stmt>
		    }<pos:position pos:line="77" pos:column="22"/></block></then>
		  <comment type="block" pos:line="78" pos:column="19">/* Have we broken a range?  */</comment>
		  <elseif pos:line="79" pos:column="19">else <if pos:line="79" pos:column="24">if <condition pos:line="79" pos:column="27">(<expr><name pos:line="79" pos:column="28">last<pos:position pos:line="79" pos:column="32"/></name> <operator pos:line="79" pos:column="33">+<pos:position pos:line="79" pos:column="34"/></operator> <literal type="number" pos:line="79" pos:column="35">1<pos:position pos:line="79" pos:column="36"/></literal> <operator pos:line="79" pos:column="37">!=<pos:position pos:line="79" pos:column="39"/></operator> <name pos:line="79" pos:column="40">c<pos:position pos:line="79" pos:column="41"/></name> <operator pos:line="79" pos:column="42">&amp;&amp;<pos:position pos:line="79" pos:column="52"/></operator> <name pos:line="79" pos:column="45">in_range<pos:position pos:line="79" pos:column="53"/></name></expr>)<pos:position pos:line="79" pos:column="54"/></condition><then pos:line="79" pos:column="54">
              <block pos:line="80" pos:column="15">{
		      <expr_stmt><expr><call><name pos:line="81" pos:column="23">putchar<pos:position pos:line="81" pos:column="30"/></name> <argument_list pos:line="81" pos:column="31">(<argument><expr><name pos:line="81" pos:column="32">last<pos:position pos:line="81" pos:column="36"/></name></expr></argument>)<pos:position pos:line="81" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="38"/></expr_stmt>
		      <expr_stmt><expr><name pos:line="82" pos:column="23">in_range<pos:position pos:line="82" pos:column="31"/></name> <operator pos:line="82" pos:column="32">=<pos:position pos:line="82" pos:column="33"/></operator> <literal type="number" pos:line="82" pos:column="34">0<pos:position pos:line="82" pos:column="35"/></literal></expr>;<pos:position pos:line="82" pos:column="36"/></expr_stmt>
		    }<pos:position pos:line="83" pos:column="22"/></block></then></if></elseif></if>

		  <if pos:line="85" pos:column="19">if <condition pos:line="85" pos:column="22">(<expr><operator pos:line="85" pos:column="23">!<pos:position pos:line="85" pos:column="24"/></operator> <name pos:line="85" pos:column="25">in_range<pos:position pos:line="85" pos:column="33"/></name></expr>)<pos:position pos:line="85" pos:column="34"/></condition><then pos:line="85" pos:column="34">
		    <block type="pseudo"><expr_stmt><expr><call><name pos:line="86" pos:column="21">putchar<pos:position pos:line="86" pos:column="28"/></name> <argument_list pos:line="86" pos:column="29">(<argument><expr><name pos:line="86" pos:column="30">c<pos:position pos:line="86" pos:column="31"/></name></expr></argument>)<pos:position pos:line="86" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="33"/></expr_stmt></block></then></if>

		  <expr_stmt><expr><name pos:line="88" pos:column="19">last<pos:position pos:line="88" pos:column="23"/></name> <operator pos:line="88" pos:column="24">=<pos:position pos:line="88" pos:column="25"/></operator> <name pos:line="88" pos:column="26">c<pos:position pos:line="88" pos:column="27"/></name></expr>;<pos:position pos:line="88" pos:column="28"/></expr_stmt>
              }<pos:position pos:line="89" pos:column="16"/></block></then></if></block></for>

	    <if pos:line="91" pos:column="13">if <condition pos:line="91" pos:column="16">(<expr><name pos:line="91" pos:column="17">in_range<pos:position pos:line="91" pos:column="25"/></name></expr>)<pos:position pos:line="91" pos:column="26"/></condition><then pos:line="91" pos:column="26">
	      <block type="pseudo"><expr_stmt><expr><call><name pos:line="92" pos:column="15">putchar<pos:position pos:line="92" pos:column="22"/></name> <argument_list pos:line="92" pos:column="23">(<argument><expr><name pos:line="92" pos:column="24">last<pos:position pos:line="92" pos:column="28"/></name></expr></argument>)<pos:position pos:line="92" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="30"/></expr_stmt></block></then></if>

	    <expr_stmt><expr><call><name pos:line="94" pos:column="13">putchar<pos:position pos:line="94" pos:column="20"/></name> <argument_list pos:line="94" pos:column="21">(<argument><expr><literal type="char" pos:line="94" pos:column="22">']'<pos:position pos:line="94" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="27"/></expr_stmt>

	    <expr_stmt><expr><name pos:line="96" pos:column="13">p<pos:position pos:line="96" pos:column="14"/></name> <operator pos:line="96" pos:column="15">+=<pos:position pos:line="96" pos:column="17"/></operator> <literal type="number" pos:line="96" pos:column="18">1<pos:position pos:line="96" pos:column="19"/></literal> <operator pos:line="96" pos:column="20">+<pos:position pos:line="96" pos:column="21"/></operator> <operator pos:line="96" pos:column="22">*<pos:position pos:line="96" pos:column="23"/></operator><name pos:line="96" pos:column="23">p<pos:position pos:line="96" pos:column="24"/></name></expr>;<pos:position pos:line="96" pos:column="25"/></expr_stmt>
	  }<pos:position pos:line="97" pos:column="12"/></block>
	  <break pos:line="98" pos:column="11">break;<pos:position pos:line="98" pos:column="17"/></break>

	<case pos:line="100" pos:column="9">case <expr><name pos:line="100" pos:column="14">begline<pos:position pos:line="100" pos:column="21"/></name></expr>:<pos:position pos:line="100" pos:column="22"/></case>
	  <expr_stmt><expr><call><name pos:line="101" pos:column="11">printf<pos:position pos:line="101" pos:column="17"/></name> <argument_list pos:line="101" pos:column="18">(<argument><expr><literal type="string" pos:line="101" pos:column="19">"/begline"<pos:position pos:line="101" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="31"/></expr_stmt>
          <break pos:line="102" pos:column="11">break;<pos:position pos:line="102" pos:column="17"/></break>

	<case pos:line="104" pos:column="9">case <expr><name pos:line="104" pos:column="14">endline<pos:position pos:line="104" pos:column="21"/></name></expr>:<pos:position pos:line="104" pos:column="22"/></case>
          <expr_stmt><expr><call><name pos:line="105" pos:column="11">printf<pos:position pos:line="105" pos:column="17"/></name> <argument_list pos:line="105" pos:column="18">(<argument><expr><literal type="string" pos:line="105" pos:column="19">"/endline"<pos:position pos:line="105" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="31"/></expr_stmt>
          <break pos:line="106" pos:column="11">break;<pos:position pos:line="106" pos:column="17"/></break>

	<case pos:line="108" pos:column="9">case <expr><name pos:line="108" pos:column="14">on_failure_jump<pos:position pos:line="108" pos:column="29"/></name></expr>:<pos:position pos:line="108" pos:column="30"/></case>
          <expr_stmt><expr><call><name pos:line="109" pos:column="11">extract_number_and_incr<pos:position pos:line="109" pos:column="34"/></name> <argument_list pos:line="109" pos:column="35">(<argument><expr><operator pos:line="109" pos:column="36">&amp;<pos:position pos:line="109" pos:column="41"/></operator><name pos:line="109" pos:column="37">mcnt<pos:position pos:line="109" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="109" pos:column="43">&amp;<pos:position pos:line="109" pos:column="48"/></operator><name pos:line="109" pos:column="44">p<pos:position pos:line="109" pos:column="45"/></name></expr></argument>)<pos:position pos:line="109" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="47"/></expr_stmt>
  	  <expr_stmt><expr><call><name pos:line="110" pos:column="11">printf<pos:position pos:line="110" pos:column="17"/></name> <argument_list pos:line="110" pos:column="18">(<argument><expr><literal type="string" pos:line="110" pos:column="19">"/on_failure_jump to %d"<pos:position pos:line="110" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="45">p<pos:position pos:line="110" pos:column="46"/></name> <operator pos:line="110" pos:column="47">+<pos:position pos:line="110" pos:column="48"/></operator> <name pos:line="110" pos:column="49">mcnt<pos:position pos:line="110" pos:column="53"/></name> <operator pos:line="110" pos:column="54">-<pos:position pos:line="110" pos:column="55"/></operator> <name pos:line="110" pos:column="56">start<pos:position pos:line="110" pos:column="61"/></name></expr></argument>)<pos:position pos:line="110" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="63"/></expr_stmt>
          <break pos:line="111" pos:column="11">break;<pos:position pos:line="111" pos:column="17"/></break>

	<case pos:line="113" pos:column="9">case <expr><name pos:line="113" pos:column="14">on_failure_keep_string_jump<pos:position pos:line="113" pos:column="41"/></name></expr>:<pos:position pos:line="113" pos:column="42"/></case>
          <expr_stmt><expr><call><name pos:line="114" pos:column="11">extract_number_and_incr<pos:position pos:line="114" pos:column="34"/></name> <argument_list pos:line="114" pos:column="35">(<argument><expr><operator pos:line="114" pos:column="36">&amp;<pos:position pos:line="114" pos:column="41"/></operator><name pos:line="114" pos:column="37">mcnt<pos:position pos:line="114" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="114" pos:column="43">&amp;<pos:position pos:line="114" pos:column="48"/></operator><name pos:line="114" pos:column="44">p<pos:position pos:line="114" pos:column="45"/></name></expr></argument>)<pos:position pos:line="114" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="47"/></expr_stmt>
  	  <expr_stmt><expr><call><name pos:line="115" pos:column="11">printf<pos:position pos:line="115" pos:column="17"/></name> <argument_list pos:line="115" pos:column="18">(<argument><expr><literal type="string" pos:line="115" pos:column="19">"/on_failure_keep_string_jump to %d"<pos:position pos:line="115" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="115" pos:column="57">p<pos:position pos:line="115" pos:column="58"/></name> <operator pos:line="115" pos:column="59">+<pos:position pos:line="115" pos:column="60"/></operator> <name pos:line="115" pos:column="61">mcnt<pos:position pos:line="115" pos:column="65"/></name> <operator pos:line="115" pos:column="66">-<pos:position pos:line="115" pos:column="67"/></operator> <name pos:line="115" pos:column="68">start<pos:position pos:line="115" pos:column="73"/></name></expr></argument>)<pos:position pos:line="115" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="75"/></expr_stmt>
          <break pos:line="116" pos:column="11">break;<pos:position pos:line="116" pos:column="17"/></break>

	<case pos:line="118" pos:column="9">case <expr><name pos:line="118" pos:column="14">dummy_failure_jump<pos:position pos:line="118" pos:column="32"/></name></expr>:<pos:position pos:line="118" pos:column="33"/></case>
          <expr_stmt><expr><call><name pos:line="119" pos:column="11">extract_number_and_incr<pos:position pos:line="119" pos:column="34"/></name> <argument_list pos:line="119" pos:column="35">(<argument><expr><operator pos:line="119" pos:column="36">&amp;<pos:position pos:line="119" pos:column="41"/></operator><name pos:line="119" pos:column="37">mcnt<pos:position pos:line="119" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="119" pos:column="43">&amp;<pos:position pos:line="119" pos:column="48"/></operator><name pos:line="119" pos:column="44">p<pos:position pos:line="119" pos:column="45"/></name></expr></argument>)<pos:position pos:line="119" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="47"/></expr_stmt>
  	  <expr_stmt><expr><call><name pos:line="120" pos:column="11">printf<pos:position pos:line="120" pos:column="17"/></name> <argument_list pos:line="120" pos:column="18">(<argument><expr><literal type="string" pos:line="120" pos:column="19">"/dummy_failure_jump to %d"<pos:position pos:line="120" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="120" pos:column="48">p<pos:position pos:line="120" pos:column="49"/></name> <operator pos:line="120" pos:column="50">+<pos:position pos:line="120" pos:column="51"/></operator> <name pos:line="120" pos:column="52">mcnt<pos:position pos:line="120" pos:column="56"/></name> <operator pos:line="120" pos:column="57">-<pos:position pos:line="120" pos:column="58"/></operator> <name pos:line="120" pos:column="59">start<pos:position pos:line="120" pos:column="64"/></name></expr></argument>)<pos:position pos:line="120" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="66"/></expr_stmt>
          <break pos:line="121" pos:column="11">break;<pos:position pos:line="121" pos:column="17"/></break>

	<case pos:line="123" pos:column="9">case <expr><name pos:line="123" pos:column="14">push_dummy_failure<pos:position pos:line="123" pos:column="32"/></name></expr>:<pos:position pos:line="123" pos:column="33"/></case>
          <expr_stmt><expr><call><name pos:line="124" pos:column="11">printf<pos:position pos:line="124" pos:column="17"/></name> <argument_list pos:line="124" pos:column="18">(<argument><expr><literal type="string" pos:line="124" pos:column="19">"/push_dummy_failure"<pos:position pos:line="124" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="42"/></expr_stmt>
          <break pos:line="125" pos:column="11">break;<pos:position pos:line="125" pos:column="17"/></break>

        <case pos:line="127" pos:column="9">case <expr><name pos:line="127" pos:column="14">maybe_pop_jump<pos:position pos:line="127" pos:column="28"/></name></expr>:<pos:position pos:line="127" pos:column="29"/></case>
          <expr_stmt><expr><call><name pos:line="128" pos:column="11">extract_number_and_incr<pos:position pos:line="128" pos:column="34"/></name> <argument_list pos:line="128" pos:column="35">(<argument><expr><operator pos:line="128" pos:column="36">&amp;<pos:position pos:line="128" pos:column="41"/></operator><name pos:line="128" pos:column="37">mcnt<pos:position pos:line="128" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="128" pos:column="43">&amp;<pos:position pos:line="128" pos:column="48"/></operator><name pos:line="128" pos:column="44">p<pos:position pos:line="128" pos:column="45"/></name></expr></argument>)<pos:position pos:line="128" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="47"/></expr_stmt>
  	  <expr_stmt><expr><call><name pos:line="129" pos:column="11">printf<pos:position pos:line="129" pos:column="17"/></name> <argument_list pos:line="129" pos:column="18">(<argument><expr><literal type="string" pos:line="129" pos:column="19">"/maybe_pop_jump to %d"<pos:position pos:line="129" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="129" pos:column="44">p<pos:position pos:line="129" pos:column="45"/></name> <operator pos:line="129" pos:column="46">+<pos:position pos:line="129" pos:column="47"/></operator> <name pos:line="129" pos:column="48">mcnt<pos:position pos:line="129" pos:column="52"/></name> <operator pos:line="129" pos:column="53">-<pos:position pos:line="129" pos:column="54"/></operator> <name pos:line="129" pos:column="55">start<pos:position pos:line="129" pos:column="60"/></name></expr></argument>)<pos:position pos:line="129" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="62"/></expr_stmt>
	  <break pos:line="130" pos:column="11">break;<pos:position pos:line="130" pos:column="17"/></break>

        <case pos:line="132" pos:column="9">case <expr><name pos:line="132" pos:column="14">pop_failure_jump<pos:position pos:line="132" pos:column="30"/></name></expr>:<pos:position pos:line="132" pos:column="31"/></case>
	  <expr_stmt><expr><call><name pos:line="133" pos:column="11">extract_number_and_incr<pos:position pos:line="133" pos:column="34"/></name> <argument_list pos:line="133" pos:column="35">(<argument><expr><operator pos:line="133" pos:column="36">&amp;<pos:position pos:line="133" pos:column="41"/></operator><name pos:line="133" pos:column="37">mcnt<pos:position pos:line="133" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="133" pos:column="43">&amp;<pos:position pos:line="133" pos:column="48"/></operator><name pos:line="133" pos:column="44">p<pos:position pos:line="133" pos:column="45"/></name></expr></argument>)<pos:position pos:line="133" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="47"/></expr_stmt>
  	  <expr_stmt><expr><call><name pos:line="134" pos:column="11">printf<pos:position pos:line="134" pos:column="17"/></name> <argument_list pos:line="134" pos:column="18">(<argument><expr><literal type="string" pos:line="134" pos:column="19">"/pop_failure_jump to %d"<pos:position pos:line="134" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="134" pos:column="46">p<pos:position pos:line="134" pos:column="47"/></name> <operator pos:line="134" pos:column="48">+<pos:position pos:line="134" pos:column="49"/></operator> <name pos:line="134" pos:column="50">mcnt<pos:position pos:line="134" pos:column="54"/></name> <operator pos:line="134" pos:column="55">-<pos:position pos:line="134" pos:column="56"/></operator> <name pos:line="134" pos:column="57">start<pos:position pos:line="134" pos:column="62"/></name></expr></argument>)<pos:position pos:line="134" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="64"/></expr_stmt>
	  <break pos:line="135" pos:column="11">break;<pos:position pos:line="135" pos:column="17"/></break>

        <case pos:line="137" pos:column="9">case <expr><name pos:line="137" pos:column="14">jump_past_alt<pos:position pos:line="137" pos:column="27"/></name></expr>:<pos:position pos:line="137" pos:column="28"/></case>
	  <expr_stmt><expr><call><name pos:line="138" pos:column="11">extract_number_and_incr<pos:position pos:line="138" pos:column="34"/></name> <argument_list pos:line="138" pos:column="35">(<argument><expr><operator pos:line="138" pos:column="36">&amp;<pos:position pos:line="138" pos:column="41"/></operator><name pos:line="138" pos:column="37">mcnt<pos:position pos:line="138" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="138" pos:column="43">&amp;<pos:position pos:line="138" pos:column="48"/></operator><name pos:line="138" pos:column="44">p<pos:position pos:line="138" pos:column="45"/></name></expr></argument>)<pos:position pos:line="138" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="47"/></expr_stmt>
  	  <expr_stmt><expr><call><name pos:line="139" pos:column="11">printf<pos:position pos:line="139" pos:column="17"/></name> <argument_list pos:line="139" pos:column="18">(<argument><expr><literal type="string" pos:line="139" pos:column="19">"/jump_past_alt to %d"<pos:position pos:line="139" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="139" pos:column="43">p<pos:position pos:line="139" pos:column="44"/></name> <operator pos:line="139" pos:column="45">+<pos:position pos:line="139" pos:column="46"/></operator> <name pos:line="139" pos:column="47">mcnt<pos:position pos:line="139" pos:column="51"/></name> <operator pos:line="139" pos:column="52">-<pos:position pos:line="139" pos:column="53"/></operator> <name pos:line="139" pos:column="54">start<pos:position pos:line="139" pos:column="59"/></name></expr></argument>)<pos:position pos:line="139" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="61"/></expr_stmt>
	  <break pos:line="140" pos:column="11">break;<pos:position pos:line="140" pos:column="17"/></break>

        <case pos:line="142" pos:column="9">case <expr><name pos:line="142" pos:column="14">jump<pos:position pos:line="142" pos:column="18"/></name></expr>:<pos:position pos:line="142" pos:column="19"/></case>
	  <expr_stmt><expr><call><name pos:line="143" pos:column="11">extract_number_and_incr<pos:position pos:line="143" pos:column="34"/></name> <argument_list pos:line="143" pos:column="35">(<argument><expr><operator pos:line="143" pos:column="36">&amp;<pos:position pos:line="143" pos:column="41"/></operator><name pos:line="143" pos:column="37">mcnt<pos:position pos:line="143" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="143" pos:column="43">&amp;<pos:position pos:line="143" pos:column="48"/></operator><name pos:line="143" pos:column="44">p<pos:position pos:line="143" pos:column="45"/></name></expr></argument>)<pos:position pos:line="143" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="47"/></expr_stmt>
  	  <expr_stmt><expr><call><name pos:line="144" pos:column="11">printf<pos:position pos:line="144" pos:column="17"/></name> <argument_list pos:line="144" pos:column="18">(<argument><expr><literal type="string" pos:line="144" pos:column="19">"/jump to %d"<pos:position pos:line="144" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="144" pos:column="34">p<pos:position pos:line="144" pos:column="35"/></name> <operator pos:line="144" pos:column="36">+<pos:position pos:line="144" pos:column="37"/></operator> <name pos:line="144" pos:column="38">mcnt<pos:position pos:line="144" pos:column="42"/></name> <operator pos:line="144" pos:column="43">-<pos:position pos:line="144" pos:column="44"/></operator> <name pos:line="144" pos:column="45">start<pos:position pos:line="144" pos:column="50"/></name></expr></argument>)<pos:position pos:line="144" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="52"/></expr_stmt>
	  <break pos:line="145" pos:column="11">break;<pos:position pos:line="145" pos:column="17"/></break>

        <case pos:line="147" pos:column="9">case <expr><name pos:line="147" pos:column="14">succeed_n<pos:position pos:line="147" pos:column="23"/></name></expr>:<pos:position pos:line="147" pos:column="24"/></case>
          <expr_stmt><expr><call><name pos:line="148" pos:column="11">extract_number_and_incr<pos:position pos:line="148" pos:column="34"/></name> <argument_list pos:line="148" pos:column="35">(<argument><expr><operator pos:line="148" pos:column="36">&amp;<pos:position pos:line="148" pos:column="41"/></operator><name pos:line="148" pos:column="37">mcnt<pos:position pos:line="148" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="148" pos:column="43">&amp;<pos:position pos:line="148" pos:column="48"/></operator><name pos:line="148" pos:column="44">p<pos:position pos:line="148" pos:column="45"/></name></expr></argument>)<pos:position pos:line="148" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="47"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="149" pos:column="11">p1<pos:position pos:line="149" pos:column="13"/></name> <operator pos:line="149" pos:column="14">=<pos:position pos:line="149" pos:column="15"/></operator> <name pos:line="149" pos:column="16">p<pos:position pos:line="149" pos:column="17"/></name> <operator pos:line="149" pos:column="18">+<pos:position pos:line="149" pos:column="19"/></operator> <name pos:line="149" pos:column="20">mcnt<pos:position pos:line="149" pos:column="24"/></name></expr>;<pos:position pos:line="149" pos:column="25"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="150" pos:column="11">extract_number_and_incr<pos:position pos:line="150" pos:column="34"/></name> <argument_list pos:line="150" pos:column="35">(<argument><expr><operator pos:line="150" pos:column="36">&amp;<pos:position pos:line="150" pos:column="41"/></operator><name pos:line="150" pos:column="37">mcnt2<pos:position pos:line="150" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="150" pos:column="44">&amp;<pos:position pos:line="150" pos:column="49"/></operator><name pos:line="150" pos:column="45">p<pos:position pos:line="150" pos:column="46"/></name></expr></argument>)<pos:position pos:line="150" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="48"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="151" pos:column="11">printf<pos:position pos:line="151" pos:column="17"/></name> <argument_list pos:line="151" pos:column="18">(<argument><expr><literal type="string" pos:line="151" pos:column="19">"/succeed_n to %d, %d times"<pos:position pos:line="151" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="151" pos:column="49">p1<pos:position pos:line="151" pos:column="51"/></name> <operator pos:line="151" pos:column="52">-<pos:position pos:line="151" pos:column="53"/></operator> <name pos:line="151" pos:column="54">start<pos:position pos:line="151" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="151" pos:column="61">mcnt2<pos:position pos:line="151" pos:column="66"/></name></expr></argument>)<pos:position pos:line="151" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="68"/></expr_stmt>
          <break pos:line="152" pos:column="11">break;<pos:position pos:line="152" pos:column="17"/></break>

        <case pos:line="154" pos:column="9">case <expr><name pos:line="154" pos:column="14">jump_n<pos:position pos:line="154" pos:column="20"/></name></expr>:<pos:position pos:line="154" pos:column="21"/></case>
          <expr_stmt><expr><call><name pos:line="155" pos:column="11">extract_number_and_incr<pos:position pos:line="155" pos:column="34"/></name> <argument_list pos:line="155" pos:column="35">(<argument><expr><operator pos:line="155" pos:column="36">&amp;<pos:position pos:line="155" pos:column="41"/></operator><name pos:line="155" pos:column="37">mcnt<pos:position pos:line="155" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="155" pos:column="43">&amp;<pos:position pos:line="155" pos:column="48"/></operator><name pos:line="155" pos:column="44">p<pos:position pos:line="155" pos:column="45"/></name></expr></argument>)<pos:position pos:line="155" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="47"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="156" pos:column="11">p1<pos:position pos:line="156" pos:column="13"/></name> <operator pos:line="156" pos:column="14">=<pos:position pos:line="156" pos:column="15"/></operator> <name pos:line="156" pos:column="16">p<pos:position pos:line="156" pos:column="17"/></name> <operator pos:line="156" pos:column="18">+<pos:position pos:line="156" pos:column="19"/></operator> <name pos:line="156" pos:column="20">mcnt<pos:position pos:line="156" pos:column="24"/></name></expr>;<pos:position pos:line="156" pos:column="25"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="157" pos:column="11">extract_number_and_incr<pos:position pos:line="157" pos:column="34"/></name> <argument_list pos:line="157" pos:column="35">(<argument><expr><operator pos:line="157" pos:column="36">&amp;<pos:position pos:line="157" pos:column="41"/></operator><name pos:line="157" pos:column="37">mcnt2<pos:position pos:line="157" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="157" pos:column="44">&amp;<pos:position pos:line="157" pos:column="49"/></operator><name pos:line="157" pos:column="45">p<pos:position pos:line="157" pos:column="46"/></name></expr></argument>)<pos:position pos:line="157" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="48"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="158" pos:column="11">printf<pos:position pos:line="158" pos:column="17"/></name> <argument_list pos:line="158" pos:column="18">(<argument><expr><literal type="string" pos:line="158" pos:column="19">"/jump_n to %d, %d times"<pos:position pos:line="158" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="158" pos:column="46">p1<pos:position pos:line="158" pos:column="48"/></name> <operator pos:line="158" pos:column="49">-<pos:position pos:line="158" pos:column="50"/></operator> <name pos:line="158" pos:column="51">start<pos:position pos:line="158" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="158" pos:column="58">mcnt2<pos:position pos:line="158" pos:column="63"/></name></expr></argument>)<pos:position pos:line="158" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="65"/></expr_stmt>
          <break pos:line="159" pos:column="11">break;<pos:position pos:line="159" pos:column="17"/></break>

        <case pos:line="161" pos:column="9">case <expr><name pos:line="161" pos:column="14">set_number_at<pos:position pos:line="161" pos:column="27"/></name></expr>:<pos:position pos:line="161" pos:column="28"/></case>
          <expr_stmt><expr><call><name pos:line="162" pos:column="11">extract_number_and_incr<pos:position pos:line="162" pos:column="34"/></name> <argument_list pos:line="162" pos:column="35">(<argument><expr><operator pos:line="162" pos:column="36">&amp;<pos:position pos:line="162" pos:column="41"/></operator><name pos:line="162" pos:column="37">mcnt<pos:position pos:line="162" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="162" pos:column="43">&amp;<pos:position pos:line="162" pos:column="48"/></operator><name pos:line="162" pos:column="44">p<pos:position pos:line="162" pos:column="45"/></name></expr></argument>)<pos:position pos:line="162" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="47"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="163" pos:column="11">p1<pos:position pos:line="163" pos:column="13"/></name> <operator pos:line="163" pos:column="14">=<pos:position pos:line="163" pos:column="15"/></operator> <name pos:line="163" pos:column="16">p<pos:position pos:line="163" pos:column="17"/></name> <operator pos:line="163" pos:column="18">+<pos:position pos:line="163" pos:column="19"/></operator> <name pos:line="163" pos:column="20">mcnt<pos:position pos:line="163" pos:column="24"/></name></expr>;<pos:position pos:line="163" pos:column="25"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="164" pos:column="11">extract_number_and_incr<pos:position pos:line="164" pos:column="34"/></name> <argument_list pos:line="164" pos:column="35">(<argument><expr><operator pos:line="164" pos:column="36">&amp;<pos:position pos:line="164" pos:column="41"/></operator><name pos:line="164" pos:column="37">mcnt2<pos:position pos:line="164" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="164" pos:column="44">&amp;<pos:position pos:line="164" pos:column="49"/></operator><name pos:line="164" pos:column="45">p<pos:position pos:line="164" pos:column="46"/></name></expr></argument>)<pos:position pos:line="164" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="48"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="165" pos:column="11">printf<pos:position pos:line="165" pos:column="17"/></name> <argument_list pos:line="165" pos:column="18">(<argument><expr><literal type="string" pos:line="165" pos:column="19">"/set_number_at location %d to %d"<pos:position pos:line="165" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="165" pos:column="55">p1<pos:position pos:line="165" pos:column="57"/></name> <operator pos:line="165" pos:column="58">-<pos:position pos:line="165" pos:column="59"/></operator> <name pos:line="165" pos:column="60">start<pos:position pos:line="165" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="165" pos:column="67">mcnt2<pos:position pos:line="165" pos:column="72"/></name></expr></argument>)<pos:position pos:line="165" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="74"/></expr_stmt>
          <break pos:line="166" pos:column="11">break;<pos:position pos:line="166" pos:column="17"/></break>

        <case pos:line="168" pos:column="9">case <expr><name pos:line="168" pos:column="14">wordbound<pos:position pos:line="168" pos:column="23"/></name></expr>:<pos:position pos:line="168" pos:column="24"/></case>
	  <expr_stmt><expr><call><name pos:line="169" pos:column="11">printf<pos:position pos:line="169" pos:column="17"/></name> <argument_list pos:line="169" pos:column="18">(<argument><expr><literal type="string" pos:line="169" pos:column="19">"/wordbound"<pos:position pos:line="169" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="169" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="33"/></expr_stmt>
	  <break pos:line="170" pos:column="11">break;<pos:position pos:line="170" pos:column="17"/></break>

	<case pos:line="172" pos:column="9">case <expr><name pos:line="172" pos:column="14">notwordbound<pos:position pos:line="172" pos:column="26"/></name></expr>:<pos:position pos:line="172" pos:column="27"/></case>
	  <expr_stmt><expr><call><name pos:line="173" pos:column="11">printf<pos:position pos:line="173" pos:column="17"/></name> <argument_list pos:line="173" pos:column="18">(<argument><expr><literal type="string" pos:line="173" pos:column="19">"/notwordbound"<pos:position pos:line="173" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="173" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="36"/></expr_stmt>
          <break pos:line="174" pos:column="11">break;<pos:position pos:line="174" pos:column="17"/></break>

	<case pos:line="176" pos:column="9">case <expr><name pos:line="176" pos:column="14">wordbeg<pos:position pos:line="176" pos:column="21"/></name></expr>:<pos:position pos:line="176" pos:column="22"/></case>
	  <expr_stmt><expr><call><name pos:line="177" pos:column="11">printf<pos:position pos:line="177" pos:column="17"/></name> <argument_list pos:line="177" pos:column="18">(<argument><expr><literal type="string" pos:line="177" pos:column="19">"/wordbeg"<pos:position pos:line="177" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="177" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="31"/></expr_stmt>
	  <break pos:line="178" pos:column="11">break;<pos:position pos:line="178" pos:column="17"/></break>

	<case pos:line="180" pos:column="9">case <expr><name pos:line="180" pos:column="14">wordend<pos:position pos:line="180" pos:column="21"/></name></expr>:<pos:position pos:line="180" pos:column="22"/></case>
	  <expr_stmt><expr><call><name pos:line="181" pos:column="11">printf<pos:position pos:line="181" pos:column="17"/></name> <argument_list pos:line="181" pos:column="18">(<argument><expr><literal type="string" pos:line="181" pos:column="19">"/wordend"<pos:position pos:line="181" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="181" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="31"/></expr_stmt>

<cpp:ifdef pos:line="183" pos:column="1">#<cpp:directive pos:line="183" pos:column="2">ifdef<pos:position pos:line="183" pos:column="7"/></cpp:directive> <name pos:line="183" pos:column="8">emacs<pos:position pos:line="183" pos:column="13"/></name></cpp:ifdef>
	<case pos:line="184" pos:column="9">case <expr><name pos:line="184" pos:column="14">before_dot<pos:position pos:line="184" pos:column="24"/></name></expr>:<pos:position pos:line="184" pos:column="25"/></case>
	  <expr_stmt><expr><call><name pos:line="185" pos:column="11">printf<pos:position pos:line="185" pos:column="17"/></name> <argument_list pos:line="185" pos:column="18">(<argument><expr><literal type="string" pos:line="185" pos:column="19">"/before_dot"<pos:position pos:line="185" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="185" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="34"/></expr_stmt>
          <break pos:line="186" pos:column="11">break;<pos:position pos:line="186" pos:column="17"/></break>

	<case pos:line="188" pos:column="9">case <expr><name pos:line="188" pos:column="14">at_dot<pos:position pos:line="188" pos:column="20"/></name></expr>:<pos:position pos:line="188" pos:column="21"/></case>
	  <expr_stmt><expr><call><name pos:line="189" pos:column="11">printf<pos:position pos:line="189" pos:column="17"/></name> <argument_list pos:line="189" pos:column="18">(<argument><expr><literal type="string" pos:line="189" pos:column="19">"/at_dot"<pos:position pos:line="189" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="189" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="30"/></expr_stmt>
          <break pos:line="190" pos:column="11">break;<pos:position pos:line="190" pos:column="17"/></break>

	<case pos:line="192" pos:column="9">case <expr><name pos:line="192" pos:column="14">after_dot<pos:position pos:line="192" pos:column="23"/></name></expr>:<pos:position pos:line="192" pos:column="24"/></case>
	  <expr_stmt><expr><call><name pos:line="193" pos:column="11">printf<pos:position pos:line="193" pos:column="17"/></name> <argument_list pos:line="193" pos:column="18">(<argument><expr><literal type="string" pos:line="193" pos:column="19">"/after_dot"<pos:position pos:line="193" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="193" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="33"/></expr_stmt>
          <break pos:line="194" pos:column="11">break;<pos:position pos:line="194" pos:column="17"/></break>

	<case pos:line="196" pos:column="9">case <expr><name pos:line="196" pos:column="14">syntaxspec<pos:position pos:line="196" pos:column="24"/></name></expr>:<pos:position pos:line="196" pos:column="25"/></case>
          <expr_stmt><expr><call><name pos:line="197" pos:column="11">printf<pos:position pos:line="197" pos:column="17"/></name> <argument_list pos:line="197" pos:column="18">(<argument><expr><literal type="string" pos:line="197" pos:column="19">"/syntaxspec"<pos:position pos:line="197" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="197" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="34"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="198" pos:column="11">mcnt<pos:position pos:line="198" pos:column="15"/></name> <operator pos:line="198" pos:column="16">=<pos:position pos:line="198" pos:column="17"/></operator> <operator pos:line="198" pos:column="18">*<pos:position pos:line="198" pos:column="19"/></operator><name pos:line="198" pos:column="19">p<pos:position pos:line="198" pos:column="20"/></name><operator pos:line="198" pos:column="20">++<pos:position pos:line="198" pos:column="22"/></operator></expr>;<pos:position pos:line="198" pos:column="23"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="199" pos:column="11">printf<pos:position pos:line="199" pos:column="17"/></name> <argument_list pos:line="199" pos:column="18">(<argument><expr><literal type="string" pos:line="199" pos:column="19">"/%d"<pos:position pos:line="199" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="199" pos:column="26">mcnt<pos:position pos:line="199" pos:column="30"/></name></expr></argument>)<pos:position pos:line="199" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="32"/></expr_stmt>
          <break pos:line="200" pos:column="11">break;<pos:position pos:line="200" pos:column="17"/></break>

	<case pos:line="202" pos:column="9">case <expr><name pos:line="202" pos:column="14">notsyntaxspec<pos:position pos:line="202" pos:column="27"/></name></expr>:<pos:position pos:line="202" pos:column="28"/></case>
          <expr_stmt><expr><call><name pos:line="203" pos:column="11">printf<pos:position pos:line="203" pos:column="17"/></name> <argument_list pos:line="203" pos:column="18">(<argument><expr><literal type="string" pos:line="203" pos:column="19">"/notsyntaxspec"<pos:position pos:line="203" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="203" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="37"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="204" pos:column="11">mcnt<pos:position pos:line="204" pos:column="15"/></name> <operator pos:line="204" pos:column="16">=<pos:position pos:line="204" pos:column="17"/></operator> <operator pos:line="204" pos:column="18">*<pos:position pos:line="204" pos:column="19"/></operator><name pos:line="204" pos:column="19">p<pos:position pos:line="204" pos:column="20"/></name><operator pos:line="204" pos:column="20">++<pos:position pos:line="204" pos:column="22"/></operator></expr>;<pos:position pos:line="204" pos:column="23"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="205" pos:column="11">printf<pos:position pos:line="205" pos:column="17"/></name> <argument_list pos:line="205" pos:column="18">(<argument><expr><literal type="string" pos:line="205" pos:column="19">"/%d"<pos:position pos:line="205" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="205" pos:column="26">mcnt<pos:position pos:line="205" pos:column="30"/></name></expr></argument>)<pos:position pos:line="205" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="32"/></expr_stmt>
	  <break pos:line="206" pos:column="11">break;<pos:position pos:line="206" pos:column="17"/></break>
<cpp:endif pos:line="207" pos:column="1">#<cpp:directive pos:line="207" pos:column="2">endif<pos:position pos:line="207" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="207" pos:column="8">/* emacs */</comment>

	<case pos:line="209" pos:column="9">case <expr><name pos:line="209" pos:column="14">wordchar<pos:position pos:line="209" pos:column="22"/></name></expr>:<pos:position pos:line="209" pos:column="23"/></case>
	  <expr_stmt><expr><call><name pos:line="210" pos:column="11">printf<pos:position pos:line="210" pos:column="17"/></name> <argument_list pos:line="210" pos:column="18">(<argument><expr><literal type="string" pos:line="210" pos:column="19">"/wordchar"<pos:position pos:line="210" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="210" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="32"/></expr_stmt>
          <break pos:line="211" pos:column="11">break;<pos:position pos:line="211" pos:column="17"/></break>

	<case pos:line="213" pos:column="9">case <expr><name pos:line="213" pos:column="14">notwordchar<pos:position pos:line="213" pos:column="25"/></name></expr>:<pos:position pos:line="213" pos:column="26"/></case>
	  <expr_stmt><expr><call><name pos:line="214" pos:column="11">printf<pos:position pos:line="214" pos:column="17"/></name> <argument_list pos:line="214" pos:column="18">(<argument><expr><literal type="string" pos:line="214" pos:column="19">"/notwordchar"<pos:position pos:line="214" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="214" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="35"/></expr_stmt>
          <break pos:line="215" pos:column="11">break;<pos:position pos:line="215" pos:column="17"/></break>

	<case pos:line="217" pos:column="9">case <expr><name pos:line="217" pos:column="14">begbuf<pos:position pos:line="217" pos:column="20"/></name></expr>:<pos:position pos:line="217" pos:column="21"/></case>
	  <expr_stmt><expr><call><name pos:line="218" pos:column="11">printf<pos:position pos:line="218" pos:column="17"/></name> <argument_list pos:line="218" pos:column="18">(<argument><expr><literal type="string" pos:line="218" pos:column="19">"/begbuf"<pos:position pos:line="218" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="218" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="30"/></expr_stmt>
          <break pos:line="219" pos:column="11">break;<pos:position pos:line="219" pos:column="17"/></break>

	<case pos:line="221" pos:column="9">case <expr><name pos:line="221" pos:column="14">endbuf<pos:position pos:line="221" pos:column="20"/></name></expr>:<pos:position pos:line="221" pos:column="21"/></case>
	  <expr_stmt><expr><call><name pos:line="222" pos:column="11">printf<pos:position pos:line="222" pos:column="17"/></name> <argument_list pos:line="222" pos:column="18">(<argument><expr><literal type="string" pos:line="222" pos:column="19">"/endbuf"<pos:position pos:line="222" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="222" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="30"/></expr_stmt>
          <break pos:line="223" pos:column="11">break;<pos:position pos:line="223" pos:column="17"/></break>

        <default pos:line="225" pos:column="9">default:<pos:position pos:line="225" pos:column="17"/></default>
          <expr_stmt><expr><call><name pos:line="226" pos:column="11">printf<pos:position pos:line="226" pos:column="17"/></name> <argument_list pos:line="226" pos:column="18">(<argument><expr><literal type="string" pos:line="226" pos:column="19">"?%d"<pos:position pos:line="226" pos:column="24"/></literal></expr></argument>, <argument><expr><operator pos:line="226" pos:column="26">*<pos:position pos:line="226" pos:column="27"/></operator><operator pos:line="226" pos:column="27">(<pos:position pos:line="226" pos:column="28"/></operator><name pos:line="226" pos:column="28">p<pos:position pos:line="226" pos:column="29"/></name><operator pos:line="226" pos:column="29">-<pos:position pos:line="226" pos:column="30"/></operator><literal type="number" pos:line="226" pos:column="30">1<pos:position pos:line="226" pos:column="31"/></literal><operator pos:line="226" pos:column="31">)<pos:position pos:line="226" pos:column="32"/></operator></expr></argument>)<pos:position pos:line="226" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="227" pos:column="10"/></block></switch>

      <expr_stmt><expr><call><name pos:line="229" pos:column="7">putchar<pos:position pos:line="229" pos:column="14"/></name> <argument_list pos:line="229" pos:column="15">(<argument><expr><literal type="char" pos:line="229" pos:column="16">'\n'<pos:position pos:line="229" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="229" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="229" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="230" pos:column="6"/></block></while>

  <expr_stmt><expr><call><name pos:line="232" pos:column="3">printf<pos:position pos:line="232" pos:column="9"/></name> <argument_list pos:line="232" pos:column="10">(<argument><expr><literal type="string" pos:line="232" pos:column="11">"%d:\tend of pattern.\n"<pos:position pos:line="232" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="232" pos:column="37">p<pos:position pos:line="232" pos:column="38"/></name> <operator pos:line="232" pos:column="39">-<pos:position pos:line="232" pos:column="40"/></operator> <name pos:line="232" pos:column="41">start<pos:position pos:line="232" pos:column="46"/></name></expr></argument>)<pos:position pos:line="232" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="48"/></expr_stmt>
}<pos:position pos:line="233" pos:column="2"/></block></unit>
