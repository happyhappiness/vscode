<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1026_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">mutt_decode_quoted<pos:position pos:line="1" pos:column="31"/></name> <parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">STATE<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">s<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">long<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">len<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">istext<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">iconv_t<pos:position pos:line="1" pos:column="72"/></name></type> <name pos:line="1" pos:column="73">cd<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">line<pos:position pos:line="3" pos:column="12"/></name><index pos:line="3" pos:column="12">[<expr><name pos:line="3" pos:column="13">STRING<pos:position pos:line="3" pos:column="19"/></name></expr>]<pos:position pos:line="3" pos:column="20"/></index></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">decline<pos:position pos:line="4" pos:column="15"/></name><index pos:line="4" pos:column="15">[<expr><literal type="number" pos:line="4" pos:column="16">2<pos:position pos:line="4" pos:column="17"/></literal><operator pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></operator><name pos:line="4" pos:column="18">STRING<pos:position pos:line="4" pos:column="24"/></name></expr>]<pos:position pos:line="4" pos:column="25"/></index></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">l<pos:position pos:line="5" pos:column="11"/></name> <init pos:line="5" pos:column="12">= <expr><literal type="number" pos:line="5" pos:column="14">0<pos:position pos:line="5" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">linelen<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>      <comment type="block" pos:line="6" pos:column="24">/* number of input bytes in `line' */</comment>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">l3<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
  
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">last<pos:position pos:line="9" pos:column="11"/></name></decl>;<pos:position pos:line="9" pos:column="12"/></decl_stmt>    <comment type="block" pos:line="9" pos:column="16">/* store the last character in the input line */</comment>
  
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">istext<pos:position pos:line="11" pos:column="13"/></name></expr>)<pos:position pos:line="11" pos:column="14"/></condition><then pos:line="11" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="5">state_set_prefix<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">s<pos:position pos:line="12" pos:column="23"/></name></expr></argument>)<pos:position pos:line="12" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt></block></then></if>

  <while pos:line="14" pos:column="3">while <condition pos:line="14" pos:column="9">(<expr><name pos:line="14" pos:column="10">len<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">&gt;<pos:position pos:line="14" pos:column="18"/></operator> <literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr>)<pos:position pos:line="14" pos:column="18"/></condition>
  <block pos:line="15" pos:column="3">{
    <expr_stmt><expr><name pos:line="16" pos:column="5">last<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <literal type="number" pos:line="16" pos:column="12">0<pos:position pos:line="16" pos:column="13"/></literal></expr>;<pos:position pos:line="16" pos:column="14"/></expr_stmt>
    
    <comment type="block" pos:line="18" pos:column="5">/*
     * It's ok to use a fixed size buffer for input, even if the line turns
     * out to be longer than this.  Just process the line in chunks.  This
     * really shouldn't happen according the MIME spec, since Q-P encoded
     * lines are at most 76 characters, but we should be liberal about what
     * we accept.
     */</comment>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><call><name pos:line="25" pos:column="9">fgets<pos:position pos:line="25" pos:column="14"/></name> <argument_list pos:line="25" pos:column="15">(<argument><expr><name pos:line="25" pos:column="16">line<pos:position pos:line="25" pos:column="20"/></name></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="22">MIN<pos:position pos:line="25" pos:column="25"/></name> <argument_list pos:line="25" pos:column="26">(<argument><expr><operator pos:line="25" pos:column="27">(<pos:position pos:line="25" pos:column="28"/></operator><name pos:line="25" pos:column="28">ssize_t<pos:position pos:line="25" pos:column="35"/></name><operator pos:line="25" pos:column="35">)<pos:position pos:line="25" pos:column="36"/></operator><sizeof pos:line="25" pos:column="36">sizeof <argument_list pos:line="25" pos:column="43">(<argument><expr><name pos:line="25" pos:column="44">line<pos:position pos:line="25" pos:column="48"/></name></expr></argument>)<pos:position pos:line="25" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="25" pos:column="51">len<pos:position pos:line="25" pos:column="54"/></name> <operator pos:line="25" pos:column="55">+<pos:position pos:line="25" pos:column="56"/></operator> <literal type="number" pos:line="25" pos:column="57">1<pos:position pos:line="25" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="61">s<pos:position pos:line="25" pos:column="62"/></name><operator pos:line="25" pos:column="62">-&gt;<pos:position pos:line="25" pos:column="67"/></operator><name pos:line="25" pos:column="64">fpin<pos:position pos:line="25" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="69"/></argument_list></call> <operator pos:line="25" pos:column="70">==<pos:position pos:line="25" pos:column="72"/></operator> <name pos:line="25" pos:column="73">NULL<pos:position pos:line="25" pos:column="77"/></name></expr>)<pos:position pos:line="25" pos:column="78"/></condition><then pos:line="25" pos:column="78">
      <block type="pseudo"><break pos:line="26" pos:column="7">break;<pos:position pos:line="26" pos:column="13"/></break></block></then></if>

    <expr_stmt><expr><name pos:line="28" pos:column="5">linelen<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">=<pos:position pos:line="28" pos:column="14"/></operator> <call><name pos:line="28" pos:column="15">strlen<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><name pos:line="28" pos:column="22">line<pos:position pos:line="28" pos:column="26"/></name></expr></argument>)<pos:position pos:line="28" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">len<pos:position pos:line="29" pos:column="8"/></name> <operator pos:line="29" pos:column="9">-=<pos:position pos:line="29" pos:column="11"/></operator> <name pos:line="29" pos:column="12">linelen<pos:position pos:line="29" pos:column="19"/></name></expr>;<pos:position pos:line="29" pos:column="20"/></expr_stmt>

    <comment type="block" pos:line="31" pos:column="5">/*
     * inspect the last character we read so we can tell if we got the
     * entire line.
     */</comment>
    <expr_stmt><expr><name pos:line="35" pos:column="5">last<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <ternary><condition><expr><name pos:line="35" pos:column="12">linelen<pos:position pos:line="35" pos:column="19"/></name></expr> ?<pos:position pos:line="35" pos:column="21"/></condition><then pos:line="35" pos:column="21"> <expr><name><name pos:line="35" pos:column="22">line<pos:position pos:line="35" pos:column="26"/></name><index pos:line="35" pos:column="26">[<expr><name pos:line="35" pos:column="27">linelen<pos:position pos:line="35" pos:column="34"/></name> <operator pos:line="35" pos:column="35">-<pos:position pos:line="35" pos:column="36"/></operator> <literal type="number" pos:line="35" pos:column="37">1<pos:position pos:line="35" pos:column="38"/></literal></expr>]<pos:position pos:line="35" pos:column="39"/></index></name></expr> <pos:position pos:line="35" pos:column="40"/></then><else pos:line="35" pos:column="40">: <expr><literal type="number" pos:line="35" pos:column="42">0<pos:position pos:line="35" pos:column="43"/></literal></expr></else></ternary></expr>;<pos:position pos:line="35" pos:column="44"/></expr_stmt>

    <comment type="block" pos:line="37" pos:column="5">/* chop trailing whitespace if we got the full line */</comment>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">last<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">==<pos:position pos:line="38" pos:column="16"/></operator> <literal type="char" pos:line="38" pos:column="17">'\n'<pos:position pos:line="38" pos:column="21"/></literal></expr>)<pos:position pos:line="38" pos:column="22"/></condition><then pos:line="38" pos:column="22">
    <block pos:line="39" pos:column="5">{
      <while pos:line="40" pos:column="7">while <condition pos:line="40" pos:column="13">(<expr><name pos:line="40" pos:column="14">linelen<pos:position pos:line="40" pos:column="21"/></name> <operator pos:line="40" pos:column="22">&gt;<pos:position pos:line="40" pos:column="26"/></operator> <literal type="number" pos:line="40" pos:column="24">0<pos:position pos:line="40" pos:column="25"/></literal> <operator pos:line="40" pos:column="26">&amp;&amp;<pos:position pos:line="40" pos:column="36"/></operator> <call><name pos:line="40" pos:column="29">ISSPACE<pos:position pos:line="40" pos:column="36"/></name> <argument_list pos:line="40" pos:column="37">(<argument><expr><name><name pos:line="40" pos:column="38">line<pos:position pos:line="40" pos:column="42"/></name><index pos:line="40" pos:column="42">[<expr><name pos:line="40" pos:column="43">linelen<pos:position pos:line="40" pos:column="50"/></name><operator pos:line="40" pos:column="50">-<pos:position pos:line="40" pos:column="51"/></operator><literal type="number" pos:line="40" pos:column="51">1<pos:position pos:line="40" pos:column="52"/></literal></expr>]<pos:position pos:line="40" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="40" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="55"/></condition>
       <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="8">linelen<pos:position pos:line="41" pos:column="15"/></name><operator pos:line="41" pos:column="15">--<pos:position pos:line="41" pos:column="17"/></operator></expr>;<pos:position pos:line="41" pos:column="18"/></expr_stmt></block></while>
      <expr_stmt><expr><name><name pos:line="42" pos:column="7">line<pos:position pos:line="42" pos:column="11"/></name><index pos:line="42" pos:column="11">[<expr><name pos:line="42" pos:column="12">linelen<pos:position pos:line="42" pos:column="19"/></name></expr>]<pos:position pos:line="42" pos:column="20"/></index></name><operator pos:line="42" pos:column="20">=<pos:position pos:line="42" pos:column="21"/></operator><literal type="number" pos:line="42" pos:column="21">0<pos:position pos:line="42" pos:column="22"/></literal></expr>;<pos:position pos:line="42" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="45" pos:column="5">/* decode and do character set conversion */</comment>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">qp_decode_line<pos:position pos:line="46" pos:column="19"/></name> <argument_list pos:line="46" pos:column="20">(<argument><expr><name pos:line="46" pos:column="21">decline<pos:position pos:line="46" pos:column="28"/></name> <operator pos:line="46" pos:column="29">+<pos:position pos:line="46" pos:column="30"/></operator> <name pos:line="46" pos:column="31">l<pos:position pos:line="46" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="34">line<pos:position pos:line="46" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="40">&amp;<pos:position pos:line="46" pos:column="45"/></operator><name pos:line="46" pos:column="41">l3<pos:position pos:line="46" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="45">last<pos:position pos:line="46" pos:column="49"/></name></expr></argument>)<pos:position pos:line="46" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name pos:line="47" pos:column="5">l<pos:position pos:line="47" pos:column="6"/></name> <operator pos:line="47" pos:column="7">+=<pos:position pos:line="47" pos:column="9"/></operator> <name pos:line="47" pos:column="10">l3<pos:position pos:line="47" pos:column="12"/></name></expr>;<pos:position pos:line="47" pos:column="13"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">mutt_convert_to_state<pos:position pos:line="48" pos:column="26"/></name> <argument_list pos:line="48" pos:column="27">(<argument><expr><name pos:line="48" pos:column="28">cd<pos:position pos:line="48" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="32">decline<pos:position pos:line="48" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="41">&amp;<pos:position pos:line="48" pos:column="46"/></operator><name pos:line="48" pos:column="42">l<pos:position pos:line="48" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="45">s<pos:position pos:line="48" pos:column="46"/></name></expr></argument>)<pos:position pos:line="48" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="48"/></expr_stmt>
  }<pos:position pos:line="49" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="51" pos:column="3">mutt_convert_to_state<pos:position pos:line="51" pos:column="24"/></name> <argument_list pos:line="51" pos:column="25">(<argument><expr><name pos:line="51" pos:column="26">cd<pos:position pos:line="51" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="30">0<pos:position pos:line="51" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="33">0<pos:position pos:line="51" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="36">s<pos:position pos:line="51" pos:column="37"/></name></expr></argument>)<pos:position pos:line="51" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="52" pos:column="3">state_reset_prefix<pos:position pos:line="52" pos:column="21"/></name><argument_list pos:line="52" pos:column="21">(<argument><expr><name pos:line="52" pos:column="22">s<pos:position pos:line="52" pos:column="23"/></name></expr></argument>)<pos:position pos:line="52" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="25"/></expr_stmt>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
