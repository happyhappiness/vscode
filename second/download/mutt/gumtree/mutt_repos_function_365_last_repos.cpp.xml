<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_365_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_parse_exec<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">BUFFER<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">buf<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">BUFFER<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">s<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">unsigned<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">long<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">data<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">BUFFER<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">err<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name><name pos:line="3" pos:column="7">ops<pos:position pos:line="3" pos:column="10"/></name><index pos:line="3" pos:column="10">[<expr><literal type="number" pos:line="3" pos:column="11">128<pos:position pos:line="3" pos:column="14"/></literal></expr>]<pos:position pos:line="3" pos:column="15"/></index></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt> 
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">nops<pos:position pos:line="4" pos:column="11"/></name> <init pos:line="4" pos:column="12">= <expr><literal type="number" pos:line="4" pos:column="14">0<pos:position pos:line="4" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">binding_t<pos:position pos:line="5" pos:column="25"/></name></name> <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier></type><name pos:line="5" pos:column="27">bindings<pos:position pos:line="5" pos:column="35"/></name> <init pos:line="5" pos:column="36">= <expr><name pos:line="5" pos:column="38">NULL<pos:position pos:line="5" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">function<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><operator pos:line="8" pos:column="7">!<pos:position pos:line="8" pos:column="8"/></operator><call><name pos:line="8" pos:column="8">MoreArgs<pos:position pos:line="8" pos:column="16"/></name> <argument_list pos:line="8" pos:column="17">(<argument><expr><name pos:line="8" pos:column="18">s<pos:position pos:line="8" pos:column="19"/></name></expr></argument>)<pos:position pos:line="8" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="21"/></condition><then pos:line="8" pos:column="21">
  <block pos:line="9" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">strfcpy<pos:position pos:line="10" pos:column="12"/></name> <argument_list pos:line="10" pos:column="13">(<argument><expr><name><name pos:line="10" pos:column="14">err<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">-&gt;<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="19">data<pos:position pos:line="10" pos:column="23"/></name></name></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="25">_<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><literal type="string" pos:line="10" pos:column="27">"exec: no arguments"<pos:position pos:line="10" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="50">err<pos:position pos:line="10" pos:column="53"/></name><operator pos:line="10" pos:column="53">-&gt;<pos:position pos:line="10" pos:column="58"/></operator><name pos:line="10" pos:column="55">dsize<pos:position pos:line="10" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="62"/></expr_stmt>
    <return pos:line="11" pos:column="5">return <expr><operator pos:line="11" pos:column="12">(<pos:position pos:line="11" pos:column="13"/></operator><operator pos:line="11" pos:column="13">-<pos:position pos:line="11" pos:column="14"/></operator><literal type="number" pos:line="11" pos:column="14">1<pos:position pos:line="11" pos:column="15"/></literal><operator pos:line="11" pos:column="15">)<pos:position pos:line="11" pos:column="16"/></operator></expr>;<pos:position pos:line="11" pos:column="17"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>

  <do pos:line="14" pos:column="3">do
  <block pos:line="15" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">mutt_extract_token<pos:position pos:line="16" pos:column="23"/></name> <argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">buf<pos:position pos:line="16" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="30">s<pos:position pos:line="16" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="33">0<pos:position pos:line="16" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">function<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <name><name pos:line="17" pos:column="16">buf<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">-&gt;<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="21">data<pos:position pos:line="17" pos:column="25"/></name></name></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">(<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">bindings<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <call><name pos:line="19" pos:column="21">km_get_table<pos:position pos:line="19" pos:column="33"/></name> <argument_list pos:line="19" pos:column="34">(<argument><expr><name pos:line="19" pos:column="35">CurrentMenu<pos:position pos:line="19" pos:column="46"/></name></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call><operator pos:line="19" pos:column="47">)<pos:position pos:line="19" pos:column="48"/></operator> <operator pos:line="19" pos:column="49">==<pos:position pos:line="19" pos:column="51"/></operator> <name pos:line="19" pos:column="52">NULL<pos:position pos:line="19" pos:column="56"/></name> 
	<operator pos:line="20" pos:column="9">&amp;&amp;<pos:position pos:line="20" pos:column="19"/></operator> <name pos:line="20" pos:column="12">CurrentMenu<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">!=<pos:position pos:line="20" pos:column="26"/></operator> <name pos:line="20" pos:column="27">MENU_PAGER<pos:position pos:line="20" pos:column="37"/></name></expr>)<pos:position pos:line="20" pos:column="38"/></condition><then pos:line="20" pos:column="38">
      <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="7">bindings<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <name pos:line="21" pos:column="18">OpGeneric<pos:position pos:line="21" pos:column="27"/></name></expr>;<pos:position pos:line="21" pos:column="28"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="23" pos:column="5">ops<pos:position pos:line="23" pos:column="8"/></name><index pos:line="23" pos:column="8">[<expr><name pos:line="23" pos:column="9">nops<pos:position pos:line="23" pos:column="13"/></name></expr>]<pos:position pos:line="23" pos:column="14"/></index></name> <operator pos:line="23" pos:column="15">=<pos:position pos:line="23" pos:column="16"/></operator> <call><name pos:line="23" pos:column="17">get_op<pos:position pos:line="23" pos:column="23"/></name> <argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">bindings<pos:position pos:line="23" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="35">function<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="45">mutt_strlen<pos:position pos:line="23" pos:column="56"/></name><argument_list pos:line="23" pos:column="56">(<argument><expr><name pos:line="23" pos:column="57">function<pos:position pos:line="23" pos:column="65"/></name></expr></argument>)<pos:position pos:line="23" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="68"/></expr_stmt>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name><name pos:line="24" pos:column="9">ops<pos:position pos:line="24" pos:column="12"/></name><index pos:line="24" pos:column="12">[<expr><name pos:line="24" pos:column="13">nops<pos:position pos:line="24" pos:column="17"/></name></expr>]<pos:position pos:line="24" pos:column="18"/></index></name> <operator pos:line="24" pos:column="19">==<pos:position pos:line="24" pos:column="21"/></operator> <name pos:line="24" pos:column="22">OP_NULL<pos:position pos:line="24" pos:column="29"/></name> <operator pos:line="24" pos:column="30">&amp;&amp;<pos:position pos:line="24" pos:column="40"/></operator> <name pos:line="24" pos:column="33">CurrentMenu<pos:position pos:line="24" pos:column="44"/></name> <operator pos:line="24" pos:column="45">!=<pos:position pos:line="24" pos:column="47"/></operator> <name pos:line="24" pos:column="48">MENU_PAGER<pos:position pos:line="24" pos:column="58"/></name></expr>)<pos:position pos:line="24" pos:column="59"/></condition><then pos:line="24" pos:column="59">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="25" pos:column="7">ops<pos:position pos:line="25" pos:column="10"/></name><index pos:line="25" pos:column="10">[<expr><name pos:line="25" pos:column="11">nops<pos:position pos:line="25" pos:column="15"/></name></expr>]<pos:position pos:line="25" pos:column="16"/></index></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <call><name pos:line="25" pos:column="19">get_op<pos:position pos:line="25" pos:column="25"/></name> <argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">OpGeneric<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="38">function<pos:position pos:line="25" pos:column="46"/></name></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="48">mutt_strlen<pos:position pos:line="25" pos:column="59"/></name><argument_list pos:line="25" pos:column="59">(<argument><expr><name pos:line="25" pos:column="60">function<pos:position pos:line="25" pos:column="68"/></name></expr></argument>)<pos:position pos:line="25" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="71"/></expr_stmt></block></then></if>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name><name pos:line="27" pos:column="9">ops<pos:position pos:line="27" pos:column="12"/></name><index pos:line="27" pos:column="12">[<expr><name pos:line="27" pos:column="13">nops<pos:position pos:line="27" pos:column="17"/></name></expr>]<pos:position pos:line="27" pos:column="18"/></index></name> <operator pos:line="27" pos:column="19">==<pos:position pos:line="27" pos:column="21"/></operator> <name pos:line="27" pos:column="22">OP_NULL<pos:position pos:line="27" pos:column="29"/></name></expr>)<pos:position pos:line="27" pos:column="30"/></condition><then pos:line="27" pos:column="30">
    <block pos:line="28" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">mutt_flushinp<pos:position pos:line="29" pos:column="20"/></name> <argument_list pos:line="29" pos:column="21">()<pos:position pos:line="29" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">mutt_error<pos:position pos:line="30" pos:column="17"/></name> <argument_list pos:line="30" pos:column="18">(<argument><expr><call><name pos:line="30" pos:column="19">_<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><literal type="string" pos:line="30" pos:column="21">"%s: no such function"<pos:position pos:line="30" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="30" pos:column="46">function<pos:position pos:line="30" pos:column="54"/></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="56"/></expr_stmt>
      <return pos:line="31" pos:column="7">return <expr><operator pos:line="31" pos:column="14">(<pos:position pos:line="31" pos:column="15"/></operator><operator pos:line="31" pos:column="15">-<pos:position pos:line="31" pos:column="16"/></operator><literal type="number" pos:line="31" pos:column="16">1<pos:position pos:line="31" pos:column="17"/></literal><operator pos:line="31" pos:column="17">)<pos:position pos:line="31" pos:column="18"/></operator></expr>;<pos:position pos:line="31" pos:column="19"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="33" pos:column="5">nops<pos:position pos:line="33" pos:column="9"/></name><operator pos:line="33" pos:column="9">++<pos:position pos:line="33" pos:column="11"/></operator></expr>;<pos:position pos:line="33" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block>
  while<condition pos:line="35" pos:column="8">(<expr><call><name pos:line="35" pos:column="9">MoreArgs<pos:position pos:line="35" pos:column="17"/></name><argument_list pos:line="35" pos:column="17">(<argument><expr><name pos:line="35" pos:column="18">s<pos:position pos:line="35" pos:column="19"/></name></expr></argument>)<pos:position pos:line="35" pos:column="20"/></argument_list></call> <operator pos:line="35" pos:column="21">&amp;&amp;<pos:position pos:line="35" pos:column="31"/></operator> <name pos:line="35" pos:column="24">nops<pos:position pos:line="35" pos:column="28"/></name> <operator pos:line="35" pos:column="29">&lt;<pos:position pos:line="35" pos:column="33"/></operator> <sizeof pos:line="35" pos:column="31">sizeof<argument_list pos:line="35" pos:column="37">(<argument><expr><name pos:line="35" pos:column="38">ops<pos:position pos:line="35" pos:column="41"/></name></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></sizeof><operator pos:line="35" pos:column="42">/<pos:position pos:line="35" pos:column="43"/></operator><sizeof pos:line="35" pos:column="43">sizeof<argument_list pos:line="35" pos:column="49">(<argument><expr><name><name pos:line="35" pos:column="50">ops<pos:position pos:line="35" pos:column="53"/></name><index pos:line="35" pos:column="53">[<expr><literal type="number" pos:line="35" pos:column="54">0<pos:position pos:line="35" pos:column="55"/></literal></expr>]<pos:position pos:line="35" pos:column="56"/></index></name></expr></argument>)<pos:position pos:line="35" pos:column="57"/></argument_list></sizeof></expr>)<pos:position pos:line="35" pos:column="58"/></condition>;<pos:position pos:line="35" pos:column="59"/></do>

  <while pos:line="37" pos:column="3">while<condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">nops<pos:position pos:line="37" pos:column="13"/></name></expr>)<pos:position pos:line="37" pos:column="14"/></condition>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="5">mutt_push_macro_event<pos:position pos:line="38" pos:column="26"/></name> <argument_list pos:line="38" pos:column="27">(<argument><expr><literal type="number" pos:line="38" pos:column="28">0<pos:position pos:line="38" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="31">ops<pos:position pos:line="38" pos:column="34"/></name><index pos:line="38" pos:column="34">[<expr><operator pos:line="38" pos:column="35">--<pos:position pos:line="38" pos:column="37"/></operator><name pos:line="38" pos:column="37">nops<pos:position pos:line="38" pos:column="41"/></name></expr>]<pos:position pos:line="38" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="38" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="44"/></expr_stmt></block></while>

  <return pos:line="40" pos:column="3">return <expr><literal type="number" pos:line="40" pos:column="10">0<pos:position pos:line="40" pos:column="11"/></literal></expr>;<pos:position pos:line="40" pos:column="12"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
