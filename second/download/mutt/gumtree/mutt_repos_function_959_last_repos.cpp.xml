<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_959_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">rfc1524_mailcap_lookup<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">BODY<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">a<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">type<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">rfc1524_entry<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">entry<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="72">int<pos:position pos:line="1" pos:column="75"/></name></type> <name pos:line="1" pos:column="76">opt<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">path<pos:position pos:line="3" pos:column="12"/></name><index pos:line="3" pos:column="12">[<expr><name pos:line="3" pos:column="13">_POSIX_PATH_MAX<pos:position pos:line="3" pos:column="28"/></name></expr>]<pos:position pos:line="3" pos:column="29"/></index></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">x<pos:position pos:line="4" pos:column="8"/></name></decl>;<pos:position pos:line="4" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">found<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><name pos:line="5" pos:column="15">FALSE<pos:position pos:line="5" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">curr<pos:position pos:line="6" pos:column="13"/></name> <init pos:line="6" pos:column="14">= <expr><name pos:line="6" pos:column="16">MailcapPath<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* rfc1524 specifies that a path of mailcap files should be searched.
   * joy.  They say 
   * $HOME/.mailcap:/etc/mailcap:/usr/etc/mailcap:/usr/local/etc/mailcap, etc
   * and overridden by the MAILCAPS environment variable, and, just to be nice,
   * we'll make it specifiable in .muttrc
   */</comment>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><operator pos:line="14" pos:column="7">!<pos:position pos:line="14" pos:column="8"/></operator><name pos:line="14" pos:column="8">curr<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">||<pos:position pos:line="14" pos:column="15"/></operator> <operator pos:line="14" pos:column="16">!<pos:position pos:line="14" pos:column="17"/></operator><operator pos:line="14" pos:column="17">*<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">curr<pos:position pos:line="14" pos:column="22"/></name></expr>)<pos:position pos:line="14" pos:column="23"/></condition><then pos:line="14" pos:column="23">
  <block pos:line="15" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">mutt_error<pos:position pos:line="16" pos:column="15"/></name></type> <name pos:line="16" pos:column="16">_<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">(<argument><expr><literal type="string" pos:line="16" pos:column="18">"No mailcap path specified"<pos:position pos:line="16" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></decl>;<pos:position pos:line="16" pos:column="47"/></decl_stmt>
    <return pos:line="17" pos:column="5">return <expr><literal type="number" pos:line="17" pos:column="12">0<pos:position pos:line="17" pos:column="13"/></literal></expr>;<pos:position pos:line="17" pos:column="14"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="20" pos:column="3">mutt_check_lookup_list<pos:position pos:line="20" pos:column="25"/></name> <argument_list pos:line="20" pos:column="26">(<argument><expr><name pos:line="20" pos:column="27">a<pos:position pos:line="20" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="30">type<pos:position pos:line="20" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="36">SHORT_STRING<pos:position pos:line="20" pos:column="48"/></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt>

  <while pos:line="22" pos:column="3">while <condition pos:line="22" pos:column="9">(<expr><operator pos:line="22" pos:column="10">!<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="11">found<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">&amp;&amp;<pos:position pos:line="22" pos:column="27"/></operator> <operator pos:line="22" pos:column="20">*<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">curr<pos:position pos:line="22" pos:column="25"/></name></expr>)<pos:position pos:line="22" pos:column="26"/></condition>
  <block pos:line="23" pos:column="3">{
    <expr_stmt><expr><name pos:line="24" pos:column="5">x<pos:position pos:line="24" pos:column="6"/></name> <operator pos:line="24" pos:column="7">=<pos:position pos:line="24" pos:column="8"/></operator> <literal type="number" pos:line="24" pos:column="9">0<pos:position pos:line="24" pos:column="10"/></literal></expr>;<pos:position pos:line="24" pos:column="11"/></expr_stmt>
    <while pos:line="25" pos:column="5">while <condition pos:line="25" pos:column="11">(<expr><operator pos:line="25" pos:column="12">*<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="13">curr<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">&amp;&amp;<pos:position pos:line="25" pos:column="28"/></operator> <operator pos:line="25" pos:column="21">*<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">curr<pos:position pos:line="25" pos:column="26"/></name> <operator pos:line="25" pos:column="27">!=<pos:position pos:line="25" pos:column="29"/></operator> <literal type="char" pos:line="25" pos:column="30">':'<pos:position pos:line="25" pos:column="33"/></literal> <operator pos:line="25" pos:column="34">&amp;&amp;<pos:position pos:line="25" pos:column="44"/></operator> <name pos:line="25" pos:column="37">x<pos:position pos:line="25" pos:column="38"/></name> <operator pos:line="25" pos:column="39">&lt;<pos:position pos:line="25" pos:column="43"/></operator> <sizeof pos:line="25" pos:column="41">sizeof <argument_list pos:line="25" pos:column="48">(<argument><expr><name pos:line="25" pos:column="49">path<pos:position pos:line="25" pos:column="53"/></name></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></sizeof> <operator pos:line="25" pos:column="55">-<pos:position pos:line="25" pos:column="56"/></operator> <literal type="number" pos:line="25" pos:column="57">1<pos:position pos:line="25" pos:column="58"/></literal></expr>)<pos:position pos:line="25" pos:column="59"/></condition>
    <block pos:line="26" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="27" pos:column="7">path<pos:position pos:line="27" pos:column="11"/></name><index pos:line="27" pos:column="11">[<expr><name pos:line="27" pos:column="12">x<pos:position pos:line="27" pos:column="13"/></name><operator pos:line="27" pos:column="13">++<pos:position pos:line="27" pos:column="15"/></operator></expr>]<pos:position pos:line="27" pos:column="16"/></index></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <operator pos:line="27" pos:column="19">*<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="20">curr<pos:position pos:line="27" pos:column="24"/></name></expr>;<pos:position pos:line="27" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><name pos:line="28" pos:column="7">curr<pos:position pos:line="28" pos:column="11"/></name><operator pos:line="28" pos:column="11">++<pos:position pos:line="28" pos:column="13"/></operator></expr>;<pos:position pos:line="28" pos:column="14"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></while>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><operator pos:line="30" pos:column="9">*<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="10">curr<pos:position pos:line="30" pos:column="14"/></name></expr>)<pos:position pos:line="30" pos:column="15"/></condition><then pos:line="30" pos:column="15">
      <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="7">curr<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">++<pos:position pos:line="31" pos:column="13"/></operator></expr>;<pos:position pos:line="31" pos:column="14"/></expr_stmt></block></then></if>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><operator pos:line="33" pos:column="9">!<pos:position pos:line="33" pos:column="10"/></operator><name pos:line="33" pos:column="10">x<pos:position pos:line="33" pos:column="11"/></name></expr>)<pos:position pos:line="33" pos:column="12"/></condition><then pos:line="33" pos:column="12">
      <block type="pseudo"><continue pos:line="34" pos:column="7">continue;<pos:position pos:line="34" pos:column="16"/></continue></block></then></if>
    
    <expr_stmt><expr><name><name pos:line="36" pos:column="5">path<pos:position pos:line="36" pos:column="9"/></name><index pos:line="36" pos:column="9">[<expr><name pos:line="36" pos:column="10">x<pos:position pos:line="36" pos:column="11"/></name></expr>]<pos:position pos:line="36" pos:column="12"/></index></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <literal type="char" pos:line="36" pos:column="15">'\0'<pos:position pos:line="36" pos:column="19"/></literal></expr>;<pos:position pos:line="36" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">mutt_expand_path<pos:position pos:line="37" pos:column="21"/></name> <argument_list pos:line="37" pos:column="22">(<argument><expr><name pos:line="37" pos:column="23">path<pos:position pos:line="37" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="29">sizeof <argument_list pos:line="37" pos:column="36">(<argument><expr><name pos:line="37" pos:column="37">path<pos:position pos:line="37" pos:column="41"/></name></expr></argument>)<pos:position pos:line="37" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="39" pos:column="5">dprint<pos:position pos:line="39" pos:column="11"/></name><argument_list pos:line="39" pos:column="11">(<argument><expr><literal type="number" pos:line="39" pos:column="12">2<pos:position pos:line="39" pos:column="13"/></literal></expr></argument>,<argument><expr><operator pos:line="39" pos:column="14">(<pos:position pos:line="39" pos:column="15"/></operator><name pos:line="39" pos:column="15">debugfile<pos:position pos:line="39" pos:column="24"/></name><operator pos:line="39" pos:column="24">,<pos:position pos:line="39" pos:column="25"/></operator><literal type="string" pos:line="39" pos:column="25">"Checking mailcap file: %s\n"<pos:position pos:line="39" pos:column="54"/></literal><operator pos:line="39" pos:column="54">,<pos:position pos:line="39" pos:column="55"/></operator><name pos:line="39" pos:column="55">path<pos:position pos:line="39" pos:column="59"/></name><operator pos:line="39" pos:column="59">)<pos:position pos:line="39" pos:column="60"/></operator></expr></argument>)<pos:position pos:line="39" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name pos:line="40" pos:column="5">found<pos:position pos:line="40" pos:column="10"/></name> <operator pos:line="40" pos:column="11">=<pos:position pos:line="40" pos:column="12"/></operator> <call><name pos:line="40" pos:column="13">rfc1524_mailcap_parse<pos:position pos:line="40" pos:column="34"/></name> <argument_list pos:line="40" pos:column="35">(<argument><expr><name pos:line="40" pos:column="36">a<pos:position pos:line="40" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="39">path<pos:position pos:line="40" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="45">type<pos:position pos:line="40" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="51">entry<pos:position pos:line="40" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="58">opt<pos:position pos:line="40" pos:column="61"/></name></expr></argument>)<pos:position pos:line="40" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="63"/></expr_stmt>
  }<pos:position pos:line="41" pos:column="4"/></block></while>

  <if pos:line="43" pos:column="3">if <condition pos:line="43" pos:column="6">(<expr><name pos:line="43" pos:column="7">entry<pos:position pos:line="43" pos:column="12"/></name> <operator pos:line="43" pos:column="13">&amp;&amp;<pos:position pos:line="43" pos:column="23"/></operator> <operator pos:line="43" pos:column="16">!<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="17">found<pos:position pos:line="43" pos:column="22"/></name></expr>)<pos:position pos:line="43" pos:column="23"/></condition><then pos:line="43" pos:column="23">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="5">mutt_error<pos:position pos:line="44" pos:column="15"/></name> <argument_list pos:line="44" pos:column="16">(<argument><expr><call><name pos:line="44" pos:column="17">_<pos:position pos:line="44" pos:column="18"/></name><argument_list pos:line="44" pos:column="18">(<argument><expr><literal type="string" pos:line="44" pos:column="19">"mailcap entry for type %s not found"<pos:position pos:line="44" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="44" pos:column="59">type<pos:position pos:line="44" pos:column="63"/></name></expr></argument>)<pos:position pos:line="44" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="65"/></expr_stmt></block></then></if>

  <return pos:line="46" pos:column="3">return <expr><name pos:line="46" pos:column="10">found<pos:position pos:line="46" pos:column="15"/></name></expr>;<pos:position pos:line="46" pos:column="16"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
