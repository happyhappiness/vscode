<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1994_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">imap_generate_seqset<pos:position pos:line="1" pos:column="33"/></name> <parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">BUFFER<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">b<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">IMAP_DATA<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">idata<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="64">unsigned<pos:position pos:line="1" pos:column="72"/></name> <name pos:line="1" pos:column="73">int<pos:position pos:line="1" pos:column="76"/></name></type> <name pos:line="1" pos:column="77">msn_begin<pos:position pos:line="1" pos:column="86"/></name></decl></parameter>,
                                  <parameter><decl><type><name pos:line="2" pos:column="35">unsigned<pos:position pos:line="2" pos:column="43"/></name> <name pos:line="2" pos:column="44">int<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">msn_end<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">chunks<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><literal type="number" pos:line="4" pos:column="16">0<pos:position pos:line="4" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">state<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><literal type="number" pos:line="5" pos:column="15">0<pos:position pos:line="5" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>  <comment type="block" pos:line="5" pos:column="19">/* 1: single msn, 2: range of msn */</comment>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">unsigned<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">int<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">msn<pos:position pos:line="6" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="21">range_begin<pos:position pos:line="6" pos:column="32"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="34">range_end<pos:position pos:line="6" pos:column="43"/></name></decl>;<pos:position pos:line="6" pos:column="44"/></decl_stmt>

  <for pos:line="8" pos:column="3">for <control pos:line="8" pos:column="7">(<init><expr><name pos:line="8" pos:column="8">msn<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <name pos:line="8" pos:column="14">msn_begin<pos:position pos:line="8" pos:column="23"/></name></expr>;<pos:position pos:line="8" pos:column="24"/></init> <condition><expr><name pos:line="8" pos:column="25">msn<pos:position pos:line="8" pos:column="28"/></name> <operator pos:line="8" pos:column="29">&lt;=<pos:position pos:line="8" pos:column="34"/></operator> <name pos:line="8" pos:column="32">msn_end<pos:position pos:line="8" pos:column="39"/></name> <operator pos:line="8" pos:column="40">+<pos:position pos:line="8" pos:column="41"/></operator> <literal type="number" pos:line="8" pos:column="42">1<pos:position pos:line="8" pos:column="43"/></literal></expr>;<pos:position pos:line="8" pos:column="44"/></condition> <incr><expr><name pos:line="8" pos:column="45">msn<pos:position pos:line="8" pos:column="48"/></name><operator pos:line="8" pos:column="48">++<pos:position pos:line="8" pos:column="50"/></operator></expr></incr>)<pos:position pos:line="8" pos:column="51"/></control>
  <block pos:line="9" pos:column="3">{
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">msn<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">&lt;=<pos:position pos:line="10" pos:column="18"/></operator> <name pos:line="10" pos:column="16">msn_end<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">&amp;&amp;<pos:position pos:line="10" pos:column="34"/></operator> <operator pos:line="10" pos:column="27">!<pos:position pos:line="10" pos:column="28"/></operator><name><name pos:line="10" pos:column="28">idata<pos:position pos:line="10" pos:column="33"/></name><operator pos:line="10" pos:column="33">-&gt;<pos:position pos:line="10" pos:column="38"/></operator><name pos:line="10" pos:column="35">msn_index<pos:position pos:line="10" pos:column="44"/></name><index pos:line="10" pos:column="44">[<expr><name pos:line="10" pos:column="45">msn<pos:position pos:line="10" pos:column="48"/></name><operator pos:line="10" pos:column="48">-<pos:position pos:line="10" pos:column="49"/></operator><literal type="number" pos:line="10" pos:column="49">1<pos:position pos:line="10" pos:column="50"/></literal></expr>]<pos:position pos:line="10" pos:column="51"/></index></name></expr>)<pos:position pos:line="10" pos:column="52"/></condition><then pos:line="10" pos:column="52">
    <block pos:line="11" pos:column="5">{
      <switch pos:line="12" pos:column="7">switch <condition pos:line="12" pos:column="14">(<expr><name pos:line="12" pos:column="15">state<pos:position pos:line="12" pos:column="20"/></name></expr>)<pos:position pos:line="12" pos:column="21"/></condition>
      <block pos:line="13" pos:column="7">{
        <case pos:line="14" pos:column="9">case <expr><literal type="number" pos:line="14" pos:column="14">1<pos:position pos:line="14" pos:column="15"/></literal></expr>:<pos:position pos:line="14" pos:column="16"/></case>            <comment type="block" pos:line="14" pos:column="28">/* single: convert to a range */</comment>
          <expr_stmt><expr><name pos:line="15" pos:column="11">state<pos:position pos:line="15" pos:column="16"/></name> <operator pos:line="15" pos:column="17">=<pos:position pos:line="15" pos:column="18"/></operator> <literal type="number" pos:line="15" pos:column="19">2<pos:position pos:line="15" pos:column="20"/></literal></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>
          <comment type="block" pos:line="16" pos:column="11">/* fall through */</comment>
        <case pos:line="17" pos:column="9">case <expr><literal type="number" pos:line="17" pos:column="14">2<pos:position pos:line="17" pos:column="15"/></literal></expr>:<pos:position pos:line="17" pos:column="16"/></case>            <comment type="block" pos:line="17" pos:column="28">/* extend range ending */</comment>
          <expr_stmt><expr><name pos:line="18" pos:column="11">range_end<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <name pos:line="18" pos:column="23">msn<pos:position pos:line="18" pos:column="26"/></name></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt>
          <break pos:line="19" pos:column="11">break;<pos:position pos:line="19" pos:column="17"/></break>
        <default pos:line="20" pos:column="9">default:<pos:position pos:line="20" pos:column="17"/></default>
          <expr_stmt><expr><name pos:line="21" pos:column="11">state<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <literal type="number" pos:line="21" pos:column="19">1<pos:position pos:line="21" pos:column="20"/></literal></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt>
          <expr_stmt><expr><name pos:line="22" pos:column="11">range_begin<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="25">msn<pos:position pos:line="22" pos:column="28"/></name></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
          <break pos:line="23" pos:column="11">break;<pos:position pos:line="23" pos:column="17"/></break>
      }<pos:position pos:line="24" pos:column="8"/></block></switch>
    }<pos:position pos:line="25" pos:column="6"/></block></then>
    <elseif pos:line="26" pos:column="5">else <if pos:line="26" pos:column="10">if <condition pos:line="26" pos:column="13">(<expr><name pos:line="26" pos:column="14">state<pos:position pos:line="26" pos:column="19"/></name></expr>)<pos:position pos:line="26" pos:column="20"/></condition><then pos:line="26" pos:column="20">
    <block pos:line="27" pos:column="5">{
      <if pos:line="28" pos:column="7">if <condition pos:line="28" pos:column="10">(<expr><name pos:line="28" pos:column="11">chunks<pos:position pos:line="28" pos:column="17"/></name><operator pos:line="28" pos:column="17">++<pos:position pos:line="28" pos:column="19"/></operator></expr>)<pos:position pos:line="28" pos:column="20"/></condition><then pos:line="28" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="9">mutt_buffer_addch<pos:position pos:line="29" pos:column="26"/></name> <argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">b<pos:position pos:line="29" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="29" pos:column="31">','<pos:position pos:line="29" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="36"/></expr_stmt></block></then></if>
      <if pos:line="30" pos:column="7">if <condition pos:line="30" pos:column="10">(<expr><name pos:line="30" pos:column="11">chunks<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">==<pos:position pos:line="30" pos:column="20"/></operator> <literal type="number" pos:line="30" pos:column="21">150<pos:position pos:line="30" pos:column="24"/></literal></expr>)<pos:position pos:line="30" pos:column="25"/></condition><then pos:line="30" pos:column="25">
        <block type="pseudo"><break pos:line="31" pos:column="9">break;<pos:position pos:line="31" pos:column="15"/></break></block></then></if>

      <if pos:line="33" pos:column="7">if <condition pos:line="33" pos:column="10">(<expr><name pos:line="33" pos:column="11">state<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">==<pos:position pos:line="33" pos:column="19"/></operator> <literal type="number" pos:line="33" pos:column="20">1<pos:position pos:line="33" pos:column="21"/></literal></expr>)<pos:position pos:line="33" pos:column="22"/></condition><then pos:line="33" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="9">mutt_buffer_printf<pos:position pos:line="34" pos:column="27"/></name> <argument_list pos:line="34" pos:column="28">(<argument><expr><name pos:line="34" pos:column="29">b<pos:position pos:line="34" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="32">"%u"<pos:position pos:line="34" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="38">range_begin<pos:position pos:line="34" pos:column="49"/></name></expr></argument>)<pos:position pos:line="34" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="51"/></expr_stmt></block></then>
      <elseif pos:line="35" pos:column="7">else <if pos:line="35" pos:column="12">if <condition pos:line="35" pos:column="15">(<expr><name pos:line="35" pos:column="16">state<pos:position pos:line="35" pos:column="21"/></name> <operator pos:line="35" pos:column="22">==<pos:position pos:line="35" pos:column="24"/></operator> <literal type="number" pos:line="35" pos:column="25">2<pos:position pos:line="35" pos:column="26"/></literal></expr>)<pos:position pos:line="35" pos:column="27"/></condition><then pos:line="35" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="9">mutt_buffer_printf<pos:position pos:line="36" pos:column="27"/></name> <argument_list pos:line="36" pos:column="28">(<argument><expr><name pos:line="36" pos:column="29">b<pos:position pos:line="36" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="32">"%u:%u"<pos:position pos:line="36" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="41">range_begin<pos:position pos:line="36" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="54">range_end<pos:position pos:line="36" pos:column="63"/></name></expr></argument>)<pos:position pos:line="36" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="65"/></expr_stmt></block></then></if></elseif></if>
      <expr_stmt><expr><name pos:line="37" pos:column="7">state<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <literal type="number" pos:line="37" pos:column="15">0<pos:position pos:line="37" pos:column="16"/></literal></expr>;<pos:position pos:line="37" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="39" pos:column="4"/></block></for>

  <comment type="block" pos:line="41" pos:column="3">/* Too big.  Just query the whole range then. */</comment>
  <if pos:line="42" pos:column="3">if <condition pos:line="42" pos:column="6">(<expr><name pos:line="42" pos:column="7">chunks<pos:position pos:line="42" pos:column="13"/></name> <operator pos:line="42" pos:column="14">==<pos:position pos:line="42" pos:column="16"/></operator> <literal type="number" pos:line="42" pos:column="17">150<pos:position pos:line="42" pos:column="20"/></literal> <operator pos:line="42" pos:column="21">||<pos:position pos:line="42" pos:column="23"/></operator> <call><name pos:line="42" pos:column="24">mutt_strlen<pos:position pos:line="42" pos:column="35"/></name> <argument_list pos:line="42" pos:column="36">(<argument><expr><name><name pos:line="42" pos:column="37">b<pos:position pos:line="42" pos:column="38"/></name><operator pos:line="42" pos:column="38">-&gt;<pos:position pos:line="42" pos:column="43"/></operator><name pos:line="42" pos:column="40">data<pos:position pos:line="42" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="45"/></argument_list></call> <operator pos:line="42" pos:column="46">&gt;<pos:position pos:line="42" pos:column="50"/></operator> <literal type="number" pos:line="42" pos:column="48">500<pos:position pos:line="42" pos:column="51"/></literal></expr>)<pos:position pos:line="42" pos:column="52"/></condition><then pos:line="42" pos:column="52">
  <block pos:line="43" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="44" pos:column="5">b<pos:position pos:line="44" pos:column="6"/></name><operator pos:line="44" pos:column="6">-&gt;<pos:position pos:line="44" pos:column="11"/></operator><name pos:line="44" pos:column="8">dptr<pos:position pos:line="44" pos:column="12"/></name></name> <operator pos:line="44" pos:column="13">=<pos:position pos:line="44" pos:column="14"/></operator> <name><name pos:line="44" pos:column="15">b<pos:position pos:line="44" pos:column="16"/></name><operator pos:line="44" pos:column="16">-&gt;<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="18">data<pos:position pos:line="44" pos:column="22"/></name></name></expr>;<pos:position pos:line="44" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">mutt_buffer_printf<pos:position pos:line="45" pos:column="23"/></name> <argument_list pos:line="45" pos:column="24">(<argument><expr><name pos:line="45" pos:column="25">b<pos:position pos:line="45" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="28">"%u:%u"<pos:position pos:line="45" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="37">msn_begin<pos:position pos:line="45" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="48">msn_end<pos:position pos:line="45" pos:column="55"/></name></expr></argument>)<pos:position pos:line="45" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="57"/></expr_stmt>
  }<pos:position pos:line="46" pos:column="4"/></block></then></if>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
