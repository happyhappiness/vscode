<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_842_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">mutt_free_color_line<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">COLOR_LINE<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier><modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">l<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, 
				 <parameter><decl><type><name pos:line="2" pos:column="34">int<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">free_colors<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">COLOR_LINE<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">tmp<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
 
  <if pos:line="6" pos:column="3">if<condition pos:line="6" pos:column="5">(<expr><operator pos:line="6" pos:column="6">!<pos:position pos:line="6" pos:column="7"/></operator><name pos:line="6" pos:column="7">l<pos:position pos:line="6" pos:column="8"/></name> <operator pos:line="6" pos:column="9">||<pos:position pos:line="6" pos:column="11"/></operator> <operator pos:line="6" pos:column="12">!<pos:position pos:line="6" pos:column="13"/></operator><operator pos:line="6" pos:column="13">*<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">l<pos:position pos:line="6" pos:column="15"/></name></expr>)<pos:position pos:line="6" pos:column="16"/></condition><then pos:line="6" pos:column="16">
    <block type="pseudo"><return pos:line="7" pos:column="5">return;<pos:position pos:line="7" pos:column="12"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="9" pos:column="3">tmp<pos:position pos:line="9" pos:column="6"/></name> <operator pos:line="9" pos:column="7">=<pos:position pos:line="9" pos:column="8"/></operator> <operator pos:line="9" pos:column="9">*<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">l<pos:position pos:line="9" pos:column="11"/></name></expr>;<pos:position pos:line="9" pos:column="12"/></expr_stmt>

<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef<pos:position pos:line="11" pos:column="7"/></cpp:directive> <name pos:line="11" pos:column="8">HAVE_COLOR<pos:position pos:line="11" pos:column="18"/></name></cpp:ifdef>
  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><name pos:line="12" pos:column="6">free_colors<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">&amp;&amp;<pos:position pos:line="12" pos:column="28"/></operator> <name><name pos:line="12" pos:column="21">tmp<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">-&gt;<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="26">fg<pos:position pos:line="12" pos:column="28"/></name></name> <operator pos:line="12" pos:column="29">!=<pos:position pos:line="12" pos:column="31"/></operator> <operator pos:line="12" pos:column="32">-<pos:position pos:line="12" pos:column="33"/></operator><literal type="number" pos:line="12" pos:column="33">1<pos:position pos:line="12" pos:column="34"/></literal> <operator pos:line="12" pos:column="35">&amp;&amp;<pos:position pos:line="12" pos:column="45"/></operator> <name><name pos:line="12" pos:column="38">tmp<pos:position pos:line="12" pos:column="41"/></name><operator pos:line="12" pos:column="41">-&gt;<pos:position pos:line="12" pos:column="46"/></operator><name pos:line="12" pos:column="43">bg<pos:position pos:line="12" pos:column="45"/></name></name> <operator pos:line="12" pos:column="46">!=<pos:position pos:line="12" pos:column="48"/></operator> <operator pos:line="12" pos:column="49">-<pos:position pos:line="12" pos:column="50"/></operator><literal type="number" pos:line="12" pos:column="50">1<pos:position pos:line="12" pos:column="51"/></literal></expr>)<pos:position pos:line="12" pos:column="52"/></condition><then pos:line="12" pos:column="52">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="5">mutt_free_color<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name><name pos:line="13" pos:column="21">tmp<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">-&gt;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="26">fg<pos:position pos:line="13" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="30">tmp<pos:position pos:line="13" pos:column="33"/></name><operator pos:line="13" pos:column="33">-&gt;<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="35">bg<pos:position pos:line="13" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="39"/></expr_stmt></block></then></if>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="16" pos:column="3">/* we should really introduce a container
   * type for regular expressions.
   */</comment>
  
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">regfree<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><expr><operator pos:line="20" pos:column="11">&amp;<pos:position pos:line="20" pos:column="16"/></operator><name><name pos:line="20" pos:column="12">tmp<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">-&gt;<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="17">rx<pos:position pos:line="20" pos:column="19"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">mutt_pattern_free<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">(<argument><expr><operator pos:line="21" pos:column="21">&amp;<pos:position pos:line="21" pos:column="26"/></operator><name><name pos:line="21" pos:column="22">tmp<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">-&gt;<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="27">color_pattern<pos:position pos:line="21" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="22" pos:column="3">FREE<pos:position pos:line="22" pos:column="7"/></name> <argument_list pos:line="22" pos:column="8">(<argument><expr><operator pos:line="22" pos:column="9">&amp;<pos:position pos:line="22" pos:column="14"/></operator><name><name pos:line="22" pos:column="10">tmp<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">-&gt;<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="15">pattern<pos:position pos:line="22" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">FREE<pos:position pos:line="23" pos:column="7"/></name> <argument_list pos:line="23" pos:column="8">(<argument><expr><name pos:line="23" pos:column="9">l<pos:position pos:line="23" pos:column="10"/></name></expr></argument>)<pos:position pos:line="23" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="12"/></expr_stmt>		<comment type="block" pos:line="23" pos:column="25">/* __FREE_CHECKED__ */</comment>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
