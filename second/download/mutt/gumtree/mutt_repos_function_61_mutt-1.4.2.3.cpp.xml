<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_61_mutt-1.4.2.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">pop_auth_res_t<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">pop_auth_sasl<pos:position pos:line="1" pos:column="36"/></name> <parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">POP_DATA<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">pop_data<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="58">const<pos:position pos:line="1" pos:column="63"/></specifier> <name pos:line="1" pos:column="64">char<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">method<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">sasl_conn_t<pos:position pos:line="3" pos:column="14"/></name> <modifier pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></modifier></type><name pos:line="3" pos:column="16">saslconn<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">sasl_interact_t<pos:position pos:line="4" pos:column="18"/></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">interaction<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><name pos:line="4" pos:column="34">NULL<pos:position pos:line="4" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">rc<pos:position pos:line="5" pos:column="9"/></name></decl>;<pos:position pos:line="5" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">buf<pos:position pos:line="6" pos:column="11"/></name><index pos:line="6" pos:column="11">[<expr><name pos:line="6" pos:column="12">LONG_STRING<pos:position pos:line="6" pos:column="23"/></name></expr>]<pos:position pos:line="6" pos:column="24"/></index></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">inbuf<pos:position pos:line="7" pos:column="13"/></name><index pos:line="7" pos:column="13">[<expr><name pos:line="7" pos:column="14">LONG_STRING<pos:position pos:line="7" pos:column="25"/></name></expr>]<pos:position pos:line="7" pos:column="26"/></index></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name><modifier pos:line="8" pos:column="13">*<pos:position pos:line="8" pos:column="14"/></modifier></type> <name pos:line="8" pos:column="15">mech<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name><modifier pos:line="9" pos:column="7">*<pos:position pos:line="9" pos:column="8"/></modifier></type> <name pos:line="9" pos:column="9">pc<pos:position pos:line="9" pos:column="11"/></name> <init pos:line="9" pos:column="12">= <expr><name pos:line="9" pos:column="14">NULL<pos:position pos:line="9" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">unsigned<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">int<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">len<pos:position pos:line="10" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="21">olen<pos:position pos:line="10" pos:column="25"/></name></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">unsigned<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">char<pos:position pos:line="11" pos:column="16"/></name></type> <name pos:line="11" pos:column="17">client_start<pos:position pos:line="11" pos:column="29"/></name></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><call><name pos:line="13" pos:column="7">mutt_sasl_client_new<pos:position pos:line="13" pos:column="27"/></name> <argument_list pos:line="13" pos:column="28">(<argument><expr><name><name pos:line="13" pos:column="29">pop_data<pos:position pos:line="13" pos:column="37"/></name><operator pos:line="13" pos:column="37">-&gt;<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="39">conn<pos:position pos:line="13" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="45">&amp;<pos:position pos:line="13" pos:column="50"/></operator><name pos:line="13" pos:column="46">saslconn<pos:position pos:line="13" pos:column="54"/></name></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call> <operator pos:line="13" pos:column="56">&lt;<pos:position pos:line="13" pos:column="60"/></operator> <literal type="number" pos:line="13" pos:column="58">0<pos:position pos:line="13" pos:column="59"/></literal></expr>)<pos:position pos:line="13" pos:column="60"/></condition><then pos:line="13" pos:column="60">
  <block pos:line="14" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">dprint<pos:position pos:line="15" pos:column="11"/></name> <argument_list pos:line="15" pos:column="12">(<argument><expr><literal type="number" pos:line="15" pos:column="13">1<pos:position pos:line="15" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="15" pos:column="16">(<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">debugfile<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">,<pos:position pos:line="15" pos:column="27"/></operator> <literal type="string" pos:line="15" pos:column="28">"pop_auth_sasl: Error allocating SASL connection.\n"<pos:position pos:line="15" pos:column="80"/></literal><operator pos:line="15" pos:column="80">)<pos:position pos:line="15" pos:column="81"/></operator></expr></argument>)<pos:position pos:line="15" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="83"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">POP_A_FAILURE<pos:position pos:line="16" pos:column="25"/></name></expr>;<pos:position pos:line="16" pos:column="26"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><operator pos:line="19" pos:column="7">!<pos:position pos:line="19" pos:column="8"/></operator><name pos:line="19" pos:column="8">method<pos:position pos:line="19" pos:column="14"/></name></expr>)<pos:position pos:line="19" pos:column="15"/></condition><then pos:line="19" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="5">method<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <name><name pos:line="20" pos:column="14">pop_data<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">-&gt;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="24">auth_list<pos:position pos:line="20" pos:column="33"/></name></name></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt></block></then></if>

  <macro><name pos:line="22" pos:column="3">FOREVER<pos:position pos:line="22" pos:column="10"/></name></macro>
  <block pos:line="23" pos:column="3">{
    <expr_stmt><expr><name pos:line="24" pos:column="5">rc<pos:position pos:line="24" pos:column="7"/></name> <operator pos:line="24" pos:column="8">=<pos:position pos:line="24" pos:column="9"/></operator> <call><name pos:line="24" pos:column="10">sasl_client_start<pos:position pos:line="24" pos:column="27"/></name> <argument_list pos:line="24" pos:column="28">(<argument><expr><name pos:line="24" pos:column="29">saslconn<pos:position pos:line="24" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="39">method<pos:position pos:line="24" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="47">NULL<pos:position pos:line="24" pos:column="51"/></name></expr></argument>,
			    <argument><expr><operator pos:line="25" pos:column="29">&amp;<pos:position pos:line="25" pos:column="34"/></operator><name pos:line="25" pos:column="30">interaction<pos:position pos:line="25" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="43">&amp;<pos:position pos:line="25" pos:column="48"/></operator><name pos:line="25" pos:column="44">pc<pos:position pos:line="25" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="48">&amp;<pos:position pos:line="25" pos:column="53"/></operator><name pos:line="25" pos:column="49">olen<pos:position pos:line="25" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="55">&amp;<pos:position pos:line="25" pos:column="60"/></operator><name pos:line="25" pos:column="56">mech<pos:position pos:line="25" pos:column="60"/></name></expr></argument>)<pos:position pos:line="25" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="62"/></expr_stmt>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">rc<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">!=<pos:position pos:line="26" pos:column="14"/></operator> <name pos:line="26" pos:column="15">SASL_INTERACT<pos:position pos:line="26" pos:column="28"/></name></expr>)<pos:position pos:line="26" pos:column="29"/></condition><then pos:line="26" pos:column="29">
      <block type="pseudo"><break pos:line="27" pos:column="7">break;<pos:position pos:line="27" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">mutt_sasl_interact<pos:position pos:line="28" pos:column="23"/></name> <argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">interaction<pos:position pos:line="28" pos:column="36"/></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="29" pos:column="4"/></block>

  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><name pos:line="31" pos:column="7">rc<pos:position pos:line="31" pos:column="9"/></name> <operator pos:line="31" pos:column="10">!=<pos:position pos:line="31" pos:column="12"/></operator> <name pos:line="31" pos:column="13">SASL_OK<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">&amp;&amp;<pos:position pos:line="31" pos:column="31"/></operator> <name pos:line="31" pos:column="24">rc<pos:position pos:line="31" pos:column="26"/></name> <operator pos:line="31" pos:column="27">!=<pos:position pos:line="31" pos:column="29"/></operator> <name pos:line="31" pos:column="30">SASL_CONTINUE<pos:position pos:line="31" pos:column="43"/></name></expr>)<pos:position pos:line="31" pos:column="44"/></condition><then pos:line="31" pos:column="44">
  <block pos:line="32" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">dprint<pos:position pos:line="33" pos:column="11"/></name> <argument_list pos:line="33" pos:column="12">(<argument><expr><literal type="number" pos:line="33" pos:column="13">1<pos:position pos:line="33" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="33" pos:column="16">(<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="17">debugfile<pos:position pos:line="33" pos:column="26"/></name><operator pos:line="33" pos:column="26">,<pos:position pos:line="33" pos:column="27"/></operator> <literal type="string" pos:line="33" pos:column="28">"pop_auth_sasl: Failure starting authentication exchange. No shared mechanisms?\n"<pos:position pos:line="33" pos:column="110"/></literal><operator pos:line="33" pos:column="110">)<pos:position pos:line="33" pos:column="111"/></operator></expr></argument>)<pos:position pos:line="33" pos:column="112"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="113"/></expr_stmt>

    <comment type="block" pos:line="35" pos:column="5">/* SASL doesn't support suggested mechanisms, so fall back */</comment>
    <return pos:line="36" pos:column="5">return <expr><name pos:line="36" pos:column="12">POP_A_UNAVAIL<pos:position pos:line="36" pos:column="25"/></name></expr>;<pos:position pos:line="36" pos:column="26"/></return>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="39" pos:column="3">client_start<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <operator pos:line="39" pos:column="18">(<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="19">olen<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">&gt;<pos:position pos:line="39" pos:column="28"/></operator> <literal type="number" pos:line="39" pos:column="26">0<pos:position pos:line="39" pos:column="27"/></literal><operator pos:line="39" pos:column="27">)<pos:position pos:line="39" pos:column="28"/></operator></expr>;<pos:position pos:line="39" pos:column="29"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="41" pos:column="3">mutt_message<pos:position pos:line="41" pos:column="15"/></name></type> <name pos:line="41" pos:column="16">_<pos:position pos:line="41" pos:column="17"/></name><argument_list pos:line="41" pos:column="17">(<argument><expr><literal type="string" pos:line="41" pos:column="18">"Authenticating (SASL)..."<pos:position pos:line="41" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="45"/></argument_list></decl>;<pos:position pos:line="41" pos:column="46"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="43" pos:column="3">snprintf<pos:position pos:line="43" pos:column="11"/></name> <argument_list pos:line="43" pos:column="12">(<argument><expr><name pos:line="43" pos:column="13">buf<pos:position pos:line="43" pos:column="16"/></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="18">sizeof <argument_list pos:line="43" pos:column="25">(<argument><expr><name pos:line="43" pos:column="26">buf<pos:position pos:line="43" pos:column="29"/></name></expr></argument>)<pos:position pos:line="43" pos:column="30"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="32">"AUTH %s"<pos:position pos:line="43" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="43">mech<pos:position pos:line="43" pos:column="47"/></name></expr></argument>)<pos:position pos:line="43" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><name pos:line="44" pos:column="3">olen<pos:position pos:line="44" pos:column="7"/></name> <operator pos:line="44" pos:column="8">=<pos:position pos:line="44" pos:column="9"/></operator> <call><name pos:line="44" pos:column="10">strlen<pos:position pos:line="44" pos:column="16"/></name> <argument_list pos:line="44" pos:column="17">(<argument><expr><name pos:line="44" pos:column="18">buf<pos:position pos:line="44" pos:column="21"/></name></expr></argument>)<pos:position pos:line="44" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="23"/></expr_stmt>

  <comment type="block" pos:line="46" pos:column="3">/* looping protocol */</comment>
  <macro><name pos:line="47" pos:column="3">FOREVER<pos:position pos:line="47" pos:column="10"/></name></macro>
  <block pos:line="48" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">strfcpy<pos:position pos:line="49" pos:column="12"/></name> <argument_list pos:line="49" pos:column="13">(<argument><expr><name pos:line="49" pos:column="14">buf<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">+<pos:position pos:line="49" pos:column="19"/></operator> <name pos:line="49" pos:column="20">olen<pos:position pos:line="49" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="26">"\r\n"<pos:position pos:line="49" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="49" pos:column="34">sizeof <argument_list pos:line="49" pos:column="41">(<argument><expr><name pos:line="49" pos:column="42">buf<pos:position pos:line="49" pos:column="45"/></name></expr></argument>)<pos:position pos:line="49" pos:column="46"/></argument_list></sizeof> <operator pos:line="49" pos:column="47">-<pos:position pos:line="49" pos:column="48"/></operator> <name pos:line="49" pos:column="49">olen<pos:position pos:line="49" pos:column="53"/></name></expr></argument>)<pos:position pos:line="49" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">mutt_socket_write<pos:position pos:line="50" pos:column="22"/></name> <argument_list pos:line="50" pos:column="23">(<argument><expr><name><name pos:line="50" pos:column="24">pop_data<pos:position pos:line="50" pos:column="32"/></name><operator pos:line="50" pos:column="32">-&gt;<pos:position pos:line="50" pos:column="37"/></operator><name pos:line="50" pos:column="34">conn<pos:position pos:line="50" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="40">buf<pos:position pos:line="50" pos:column="43"/></name></expr></argument>)<pos:position pos:line="50" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="45"/></expr_stmt>
    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><call><name pos:line="51" pos:column="9">mutt_socket_readln<pos:position pos:line="51" pos:column="27"/></name> <argument_list pos:line="51" pos:column="28">(<argument><expr><name pos:line="51" pos:column="29">inbuf<pos:position pos:line="51" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="51" pos:column="36">sizeof <argument_list pos:line="51" pos:column="43">(<argument><expr><name pos:line="51" pos:column="44">inbuf<pos:position pos:line="51" pos:column="49"/></name></expr></argument>)<pos:position pos:line="51" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="52">pop_data<pos:position pos:line="51" pos:column="60"/></name><operator pos:line="51" pos:column="60">-&gt;<pos:position pos:line="51" pos:column="65"/></operator><name pos:line="51" pos:column="62">conn<pos:position pos:line="51" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="67"/></argument_list></call> <operator pos:line="51" pos:column="68">&lt;<pos:position pos:line="51" pos:column="72"/></operator> <literal type="number" pos:line="51" pos:column="70">0<pos:position pos:line="51" pos:column="71"/></literal></expr>)<pos:position pos:line="51" pos:column="72"/></condition><then pos:line="51" pos:column="72">
    <block pos:line="52" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="53" pos:column="7">sasl_dispose<pos:position pos:line="53" pos:column="19"/></name> <argument_list pos:line="53" pos:column="20">(<argument><expr><operator pos:line="53" pos:column="21">&amp;<pos:position pos:line="53" pos:column="26"/></operator><name pos:line="53" pos:column="22">saslconn<pos:position pos:line="53" pos:column="30"/></name></expr></argument>)<pos:position pos:line="53" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="54" pos:column="7">pop_data<pos:position pos:line="54" pos:column="15"/></name><operator pos:line="54" pos:column="15">-&gt;<pos:position pos:line="54" pos:column="20"/></operator><name pos:line="54" pos:column="17">status<pos:position pos:line="54" pos:column="23"/></name></name> <operator pos:line="54" pos:column="24">=<pos:position pos:line="54" pos:column="25"/></operator> <name pos:line="54" pos:column="26">POP_DISCONNECTED<pos:position pos:line="54" pos:column="42"/></name></expr>;<pos:position pos:line="54" pos:column="43"/></expr_stmt>
      <return pos:line="55" pos:column="7">return <expr><name pos:line="55" pos:column="14">POP_A_SOCKET<pos:position pos:line="55" pos:column="26"/></name></expr>;<pos:position pos:line="55" pos:column="27"/></return>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>

    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><name pos:line="58" pos:column="9">rc<pos:position pos:line="58" pos:column="11"/></name> <operator pos:line="58" pos:column="12">!=<pos:position pos:line="58" pos:column="14"/></operator> <name pos:line="58" pos:column="15">SASL_CONTINUE<pos:position pos:line="58" pos:column="28"/></name></expr>)<pos:position pos:line="58" pos:column="29"/></condition><then pos:line="58" pos:column="29">
      <block type="pseudo"><break pos:line="59" pos:column="7">break;<pos:position pos:line="59" pos:column="13"/></break></block></then></if>

    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><call><name pos:line="61" pos:column="9">mutt_strncmp<pos:position pos:line="61" pos:column="21"/></name> <argument_list pos:line="61" pos:column="22">(<argument><expr><name pos:line="61" pos:column="23">inbuf<pos:position pos:line="61" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="30">"+ "<pos:position pos:line="61" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="36">2<pos:position pos:line="61" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="39"/></condition><then pos:line="61" pos:column="39">
      <block type="pseudo"><goto pos:line="62" pos:column="7">goto <name pos:line="62" pos:column="12">bail<pos:position pos:line="62" pos:column="16"/></name>;<pos:position pos:line="62" pos:column="17"/></goto></block></then></if>

    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><call><name pos:line="64" pos:column="9">sasl_decode64<pos:position pos:line="64" pos:column="22"/></name> <argument_list pos:line="64" pos:column="23">(<argument><expr><name pos:line="64" pos:column="24">inbuf<pos:position pos:line="64" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="64" pos:column="31">strlen<pos:position pos:line="64" pos:column="37"/></name> <argument_list pos:line="64" pos:column="38">(<argument><expr><name pos:line="64" pos:column="39">inbuf<pos:position pos:line="64" pos:column="44"/></name></expr></argument>)<pos:position pos:line="64" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="64" pos:column="47">buf<pos:position pos:line="64" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="52">&amp;<pos:position pos:line="64" pos:column="57"/></operator><name pos:line="64" pos:column="53">len<pos:position pos:line="64" pos:column="56"/></name></expr></argument>)<pos:position pos:line="64" pos:column="57"/></argument_list></call> <operator pos:line="64" pos:column="58">!=<pos:position pos:line="64" pos:column="60"/></operator> <name pos:line="64" pos:column="61">SASL_OK<pos:position pos:line="64" pos:column="68"/></name></expr>)<pos:position pos:line="64" pos:column="69"/></condition><then pos:line="64" pos:column="69">
    <block pos:line="65" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="66" pos:column="7">dprint<pos:position pos:line="66" pos:column="13"/></name> <argument_list pos:line="66" pos:column="14">(<argument><expr><literal type="number" pos:line="66" pos:column="15">1<pos:position pos:line="66" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="66" pos:column="18">(<pos:position pos:line="66" pos:column="19"/></operator><name pos:line="66" pos:column="19">debugfile<pos:position pos:line="66" pos:column="28"/></name><operator pos:line="66" pos:column="28">,<pos:position pos:line="66" pos:column="29"/></operator> <literal type="string" pos:line="66" pos:column="30">"pop_auth_sasl: error base64-decoding server response.\n"<pos:position pos:line="66" pos:column="87"/></literal><operator pos:line="66" pos:column="87">)<pos:position pos:line="66" pos:column="88"/></operator></expr></argument>)<pos:position pos:line="66" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="90"/></expr_stmt>
      <goto pos:line="67" pos:column="7">goto <name pos:line="67" pos:column="12">bail<pos:position pos:line="67" pos:column="16"/></name>;<pos:position pos:line="67" pos:column="17"/></goto>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if>

    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><operator pos:line="70" pos:column="9">!<pos:position pos:line="70" pos:column="10"/></operator><name pos:line="70" pos:column="10">client_start<pos:position pos:line="70" pos:column="22"/></name></expr>)<pos:position pos:line="70" pos:column="23"/></condition><then pos:line="70" pos:column="23">
      <block type="pseudo"><macro><name pos:line="71" pos:column="7">FOREVER<pos:position pos:line="71" pos:column="14"/></name></macro>
      <block pos:line="72" pos:column="7">{
	<expr_stmt><expr><name pos:line="73" pos:column="9">rc<pos:position pos:line="73" pos:column="11"/></name> <operator pos:line="73" pos:column="12">=<pos:position pos:line="73" pos:column="13"/></operator> <call><name pos:line="73" pos:column="14">sasl_client_step<pos:position pos:line="73" pos:column="30"/></name> <argument_list pos:line="73" pos:column="31">(<argument><expr><name pos:line="73" pos:column="32">saslconn<pos:position pos:line="73" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="42">buf<pos:position pos:line="73" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="47">len<pos:position pos:line="73" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="52">&amp;<pos:position pos:line="73" pos:column="57"/></operator><name pos:line="73" pos:column="53">interaction<pos:position pos:line="73" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="66">&amp;<pos:position pos:line="73" pos:column="71"/></operator><name pos:line="73" pos:column="67">pc<pos:position pos:line="73" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="71">&amp;<pos:position pos:line="73" pos:column="76"/></operator><name pos:line="73" pos:column="72">olen<pos:position pos:line="73" pos:column="76"/></name></expr></argument>)<pos:position pos:line="73" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="78"/></expr_stmt>
	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">rc<pos:position pos:line="74" pos:column="15"/></name> <operator pos:line="74" pos:column="16">!=<pos:position pos:line="74" pos:column="18"/></operator> <name pos:line="74" pos:column="19">SASL_INTERACT<pos:position pos:line="74" pos:column="32"/></name></expr>)<pos:position pos:line="74" pos:column="33"/></condition><then pos:line="74" pos:column="33">
	  <block type="pseudo"><break pos:line="75" pos:column="11">break;<pos:position pos:line="75" pos:column="17"/></break></block></then></if>
	<expr_stmt><expr><call><name pos:line="76" pos:column="9">mutt_sasl_interact<pos:position pos:line="76" pos:column="27"/></name> <argument_list pos:line="76" pos:column="28">(<argument><expr><name pos:line="76" pos:column="29">interaction<pos:position pos:line="76" pos:column="40"/></name></expr></argument>)<pos:position pos:line="76" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="42"/></expr_stmt>
      }<pos:position pos:line="77" pos:column="8"/></block></block></then>
    <else pos:line="78" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="79" pos:column="7">client_start<pos:position pos:line="79" pos:column="19"/></name> <operator pos:line="79" pos:column="20">=<pos:position pos:line="79" pos:column="21"/></operator> <literal type="number" pos:line="79" pos:column="22">0<pos:position pos:line="79" pos:column="23"/></literal></expr>;<pos:position pos:line="79" pos:column="24"/></expr_stmt></block></else></if>

    <if pos:line="81" pos:column="5">if <condition pos:line="81" pos:column="8">(<expr><name pos:line="81" pos:column="9">rc<pos:position pos:line="81" pos:column="11"/></name> <operator pos:line="81" pos:column="12">!=<pos:position pos:line="81" pos:column="14"/></operator> <name pos:line="81" pos:column="15">SASL_CONTINUE<pos:position pos:line="81" pos:column="28"/></name> <operator pos:line="81" pos:column="29">&amp;&amp;<pos:position pos:line="81" pos:column="39"/></operator> <operator pos:line="81" pos:column="32">(<pos:position pos:line="81" pos:column="33"/></operator><name pos:line="81" pos:column="33">olen<pos:position pos:line="81" pos:column="37"/></name> <operator pos:line="81" pos:column="38">==<pos:position pos:line="81" pos:column="40"/></operator> <literal type="number" pos:line="81" pos:column="41">0<pos:position pos:line="81" pos:column="42"/></literal> <operator pos:line="81" pos:column="43">||<pos:position pos:line="81" pos:column="45"/></operator> <name pos:line="81" pos:column="46">rc<pos:position pos:line="81" pos:column="48"/></name> <operator pos:line="81" pos:column="49">!=<pos:position pos:line="81" pos:column="51"/></operator> <name pos:line="81" pos:column="52">SASL_OK<pos:position pos:line="81" pos:column="59"/></name><operator pos:line="81" pos:column="59">)<pos:position pos:line="81" pos:column="60"/></operator></expr>)<pos:position pos:line="81" pos:column="61"/></condition><then pos:line="81" pos:column="61">
      <block type="pseudo"><break pos:line="82" pos:column="7">break;<pos:position pos:line="82" pos:column="13"/></break></block></then></if>

    <comment type="block" pos:line="84" pos:column="5">/* send out response, or line break if none needed */</comment>
    <if pos:line="85" pos:column="5">if <condition pos:line="85" pos:column="8">(<expr><name pos:line="85" pos:column="9">pc<pos:position pos:line="85" pos:column="11"/></name></expr>)<pos:position pos:line="85" pos:column="12"/></condition><then pos:line="85" pos:column="12">
    <block pos:line="86" pos:column="5">{
      <if pos:line="87" pos:column="7">if <condition pos:line="87" pos:column="10">(<expr><call><name pos:line="87" pos:column="11">sasl_encode64<pos:position pos:line="87" pos:column="24"/></name> <argument_list pos:line="87" pos:column="25">(<argument><expr><name pos:line="87" pos:column="26">pc<pos:position pos:line="87" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="30">olen<pos:position pos:line="87" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="36">buf<pos:position pos:line="87" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="87" pos:column="41">sizeof <argument_list pos:line="87" pos:column="48">(<argument><expr><name pos:line="87" pos:column="49">buf<pos:position pos:line="87" pos:column="52"/></name></expr></argument>)<pos:position pos:line="87" pos:column="53"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="87" pos:column="55">&amp;<pos:position pos:line="87" pos:column="60"/></operator><name pos:line="87" pos:column="56">olen<pos:position pos:line="87" pos:column="60"/></name></expr></argument>)<pos:position pos:line="87" pos:column="61"/></argument_list></call> <operator pos:line="87" pos:column="62">!=<pos:position pos:line="87" pos:column="64"/></operator> <name pos:line="87" pos:column="65">SASL_OK<pos:position pos:line="87" pos:column="72"/></name></expr>)<pos:position pos:line="87" pos:column="73"/></condition><then pos:line="87" pos:column="73">
      <block pos:line="88" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="89" pos:column="9">dprint<pos:position pos:line="89" pos:column="15"/></name> <argument_list pos:line="89" pos:column="16">(<argument><expr><literal type="number" pos:line="89" pos:column="17">1<pos:position pos:line="89" pos:column="18"/></literal></expr></argument>, <argument><expr><operator pos:line="89" pos:column="20">(<pos:position pos:line="89" pos:column="21"/></operator><name pos:line="89" pos:column="21">debugfile<pos:position pos:line="89" pos:column="30"/></name><operator pos:line="89" pos:column="30">,<pos:position pos:line="89" pos:column="31"/></operator> <literal type="string" pos:line="89" pos:column="32">"pop_auth_sasl: error base64-encoding client response.\n"<pos:position pos:line="89" pos:column="89"/></literal><operator pos:line="89" pos:column="89">)<pos:position pos:line="89" pos:column="90"/></operator></expr></argument>)<pos:position pos:line="89" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="92"/></expr_stmt>
	<goto pos:line="90" pos:column="9">goto <name pos:line="90" pos:column="14">bail<pos:position pos:line="90" pos:column="18"/></name>;<pos:position pos:line="90" pos:column="19"/></goto>
      }<pos:position pos:line="91" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="93" pos:column="7">/* sasl_client_st(art|ep) allocate pc with malloc, expect me to 
       * free it */</comment>
      <expr_stmt><expr><call><name pos:line="95" pos:column="7">safe_free<pos:position pos:line="95" pos:column="16"/></name> <argument_list pos:line="95" pos:column="17">(<argument><expr><operator pos:line="95" pos:column="18">(<pos:position pos:line="95" pos:column="19"/></operator><name pos:line="95" pos:column="19">void<pos:position pos:line="95" pos:column="23"/></name> <operator pos:line="95" pos:column="24">*<pos:position pos:line="95" pos:column="25"/></operator><operator pos:line="95" pos:column="25">)<pos:position pos:line="95" pos:column="26"/></operator> <operator pos:line="95" pos:column="27">&amp;<pos:position pos:line="95" pos:column="32"/></operator><name pos:line="95" pos:column="28">pc<pos:position pos:line="95" pos:column="30"/></name></expr></argument>)<pos:position pos:line="95" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="96" pos:column="6"/></block></then></if>
  }<pos:position pos:line="97" pos:column="4"/></block>

  <if pos:line="99" pos:column="3">if <condition pos:line="99" pos:column="6">(<expr><name pos:line="99" pos:column="7">rc<pos:position pos:line="99" pos:column="9"/></name> <operator pos:line="99" pos:column="10">!=<pos:position pos:line="99" pos:column="12"/></operator> <name pos:line="99" pos:column="13">SASL_OK<pos:position pos:line="99" pos:column="20"/></name></expr>)<pos:position pos:line="99" pos:column="21"/></condition><then pos:line="99" pos:column="21">
    <block type="pseudo"><goto pos:line="100" pos:column="5">goto <name pos:line="100" pos:column="10">bail<pos:position pos:line="100" pos:column="14"/></name>;<pos:position pos:line="100" pos:column="15"/></goto></block></then></if>

  <if pos:line="102" pos:column="3">if <condition pos:line="102" pos:column="6">(<expr><operator pos:line="102" pos:column="7">!<pos:position pos:line="102" pos:column="8"/></operator><call><name pos:line="102" pos:column="8">mutt_strncmp<pos:position pos:line="102" pos:column="20"/></name> <argument_list pos:line="102" pos:column="21">(<argument><expr><name pos:line="102" pos:column="22">inbuf<pos:position pos:line="102" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="29">"+OK"<pos:position pos:line="102" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="102" pos:column="36">3<pos:position pos:line="102" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="102" pos:column="39"/></condition><then pos:line="102" pos:column="39">
  <block pos:line="103" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="104" pos:column="5">mutt_sasl_setup_conn<pos:position pos:line="104" pos:column="25"/></name> <argument_list pos:line="104" pos:column="26">(<argument><expr><name><name pos:line="104" pos:column="27">pop_data<pos:position pos:line="104" pos:column="35"/></name><operator pos:line="104" pos:column="35">-&gt;<pos:position pos:line="104" pos:column="40"/></operator><name pos:line="104" pos:column="37">conn<pos:position pos:line="104" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="43">saslconn<pos:position pos:line="104" pos:column="51"/></name></expr></argument>)<pos:position pos:line="104" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="53"/></expr_stmt>
    <return pos:line="105" pos:column="5">return <expr><name pos:line="105" pos:column="12">POP_A_SUCCESS<pos:position pos:line="105" pos:column="25"/></name></expr>;<pos:position pos:line="105" pos:column="26"/></return>
  }<pos:position pos:line="106" pos:column="4"/></block></then></if>

<label><name pos:line="108" pos:column="1">bail<pos:position pos:line="108" pos:column="5"/></name>:<pos:position pos:line="108" pos:column="6"/></label>
  <expr_stmt><expr><call><name pos:line="109" pos:column="3">sasl_dispose<pos:position pos:line="109" pos:column="15"/></name> <argument_list pos:line="109" pos:column="16">(<argument><expr><operator pos:line="109" pos:column="17">&amp;<pos:position pos:line="109" pos:column="22"/></operator><name pos:line="109" pos:column="18">saslconn<pos:position pos:line="109" pos:column="26"/></name></expr></argument>)<pos:position pos:line="109" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="28"/></expr_stmt>

  <comment type="block" pos:line="111" pos:column="3">/* terminate SASL sessoin if the last responce is not +OK nor -ERR */</comment>
  <if pos:line="112" pos:column="3">if <condition pos:line="112" pos:column="6">(<expr><operator pos:line="112" pos:column="7">!<pos:position pos:line="112" pos:column="8"/></operator><call><name pos:line="112" pos:column="8">mutt_strncmp<pos:position pos:line="112" pos:column="20"/></name> <argument_list pos:line="112" pos:column="21">(<argument><expr><name pos:line="112" pos:column="22">inbuf<pos:position pos:line="112" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="112" pos:column="29">"+ "<pos:position pos:line="112" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="112" pos:column="35">2<pos:position pos:line="112" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="112" pos:column="38"/></condition><then pos:line="112" pos:column="38">
  <block pos:line="113" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="114" pos:column="5">snprintf<pos:position pos:line="114" pos:column="13"/></name> <argument_list pos:line="114" pos:column="14">(<argument><expr><name pos:line="114" pos:column="15">buf<pos:position pos:line="114" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="114" pos:column="20">sizeof <argument_list pos:line="114" pos:column="27">(<argument><expr><name pos:line="114" pos:column="28">buf<pos:position pos:line="114" pos:column="31"/></name></expr></argument>)<pos:position pos:line="114" pos:column="32"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="34">"*\r\n"<pos:position pos:line="114" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="43"/></expr_stmt>
    <if pos:line="115" pos:column="5">if <condition pos:line="115" pos:column="8">(<expr><call><name pos:line="115" pos:column="9">pop_query<pos:position pos:line="115" pos:column="18"/></name> <argument_list pos:line="115" pos:column="19">(<argument><expr><name pos:line="115" pos:column="20">pop_data<pos:position pos:line="115" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="30">buf<pos:position pos:line="115" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="115" pos:column="35">sizeof <argument_list pos:line="115" pos:column="42">(<argument><expr><name pos:line="115" pos:column="43">buf<pos:position pos:line="115" pos:column="46"/></name></expr></argument>)<pos:position pos:line="115" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="115" pos:column="48"/></argument_list></call> <operator pos:line="115" pos:column="49">==<pos:position pos:line="115" pos:column="51"/></operator> <operator pos:line="115" pos:column="52">-<pos:position pos:line="115" pos:column="53"/></operator><literal type="number" pos:line="115" pos:column="53">1<pos:position pos:line="115" pos:column="54"/></literal></expr>)<pos:position pos:line="115" pos:column="55"/></condition><then pos:line="115" pos:column="55">
      <block type="pseudo"><return pos:line="116" pos:column="7">return <expr><name pos:line="116" pos:column="14">POP_A_SOCKET<pos:position pos:line="116" pos:column="26"/></name></expr>;<pos:position pos:line="116" pos:column="27"/></return></block></then></if>
  }<pos:position pos:line="117" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="119" pos:column="3">mutt_error<pos:position pos:line="119" pos:column="13"/></name></type> <name pos:line="119" pos:column="14">_<pos:position pos:line="119" pos:column="15"/></name><argument_list pos:line="119" pos:column="15">(<argument><expr><literal type="string" pos:line="119" pos:column="16">"SASL authentication failed."<pos:position pos:line="119" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="46"/></argument_list></decl>;<pos:position pos:line="119" pos:column="47"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="120" pos:column="3">mutt_sleep<pos:position pos:line="120" pos:column="13"/></name> <argument_list pos:line="120" pos:column="14">(<argument><expr><literal type="number" pos:line="120" pos:column="15">2<pos:position pos:line="120" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="18"/></expr_stmt>

  <return pos:line="122" pos:column="3">return <expr><name pos:line="122" pos:column="10">POP_A_FAILURE<pos:position pos:line="122" pos:column="23"/></name></expr>;<pos:position pos:line="122" pos:column="24"/></return>
}<pos:position pos:line="123" pos:column="2"/></block></function></unit>
