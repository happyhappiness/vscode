<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_384_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">safe_asprintf<pos:position pos:line="1" pos:column="18"/></name> <parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">strp<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">fmt<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="1" pos:column="50">...<pos:position pos:line="1" pos:column="53"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">rlen<pos:position pos:line="3" pos:column="11"/></name> <init pos:line="3" pos:column="12">= <expr><name pos:line="3" pos:column="14">STRING<pos:position pos:line="3" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">n<pos:position pos:line="4" pos:column="8"/></name></decl>;<pos:position pos:line="4" pos:column="9"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="6" pos:column="3">*<pos:position pos:line="6" pos:column="4"/></operator><name pos:line="6" pos:column="4">strp<pos:position pos:line="6" pos:column="8"/></name> <operator pos:line="6" pos:column="9">=<pos:position pos:line="6" pos:column="10"/></operator> <call><name pos:line="6" pos:column="11">safe_malloc<pos:position pos:line="6" pos:column="22"/></name> <argument_list pos:line="6" pos:column="23">(<argument><expr><name pos:line="6" pos:column="24">rlen<pos:position pos:line="6" pos:column="28"/></name></expr></argument>)<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="30"/></expr_stmt>
  <for pos:line="7" pos:column="3">for <control pos:line="7" pos:column="7">(<init pos:line="7" pos:column="8">;<pos:position pos:line="7" pos:column="9"/></init><condition pos:line="7" pos:column="9">;<pos:position pos:line="7" pos:column="10"/></condition><incr/>)<pos:position pos:line="7" pos:column="11"/></control>
  <block pos:line="8" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">va_list<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">ap<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">va_start<pos:position pos:line="10" pos:column="13"/></name> <argument_list pos:line="10" pos:column="14">(<argument><expr><name pos:line="10" pos:column="15">ap<pos:position pos:line="10" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="19">fmt<pos:position pos:line="10" pos:column="22"/></name></expr></argument>)<pos:position pos:line="10" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">n<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">=<pos:position pos:line="11" pos:column="8"/></operator> <call><name pos:line="11" pos:column="9">vsnprintf<pos:position pos:line="11" pos:column="18"/></name> <argument_list pos:line="11" pos:column="19">(<argument><expr><operator pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="21">strp<pos:position pos:line="11" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="27">rlen<pos:position pos:line="11" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="33">fmt<pos:position pos:line="11" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="38">ap<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">va_end<pos:position pos:line="12" pos:column="11"/></name> <argument_list pos:line="12" pos:column="12">(<argument><expr><name pos:line="12" pos:column="13">ap<pos:position pos:line="12" pos:column="15"/></name></expr></argument>)<pos:position pos:line="12" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">n<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">&lt;<pos:position pos:line="13" pos:column="15"/></operator> <literal type="number" pos:line="13" pos:column="13">0<pos:position pos:line="13" pos:column="14"/></literal></expr>)<pos:position pos:line="13" pos:column="15"/></condition><then pos:line="13" pos:column="15">
    <block pos:line="14" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="15" pos:column="7">FREE<pos:position pos:line="15" pos:column="11"/></name> <argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">strp<pos:position pos:line="15" pos:column="17"/></name></expr></argument>)<pos:position pos:line="15" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt> <comment type="block" pos:line="15" pos:column="20">/* __FREE_CHECKED__ */</comment>
      <return pos:line="16" pos:column="7">return <expr><name pos:line="16" pos:column="14">n<pos:position pos:line="16" pos:column="15"/></name></expr>;<pos:position pos:line="16" pos:column="16"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">n<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">&lt;<pos:position pos:line="19" pos:column="15"/></operator> <name pos:line="19" pos:column="13">rlen<pos:position pos:line="19" pos:column="17"/></name></expr>)<pos:position pos:line="19" pos:column="18"/></condition><then pos:line="19" pos:column="18">
    <block pos:line="20" pos:column="5">{
      <comment type="block" pos:line="21" pos:column="7">/* reduce space to just that which was used.  note that 'n' does not
       * include the terminal nul char.
       */</comment>
      <if pos:line="24" pos:column="7">if <condition pos:line="24" pos:column="10">(<expr><name pos:line="24" pos:column="11">n<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">==<pos:position pos:line="24" pos:column="15"/></operator> <literal type="number" pos:line="24" pos:column="16">0<pos:position pos:line="24" pos:column="17"/></literal></expr>)<pos:position pos:line="24" pos:column="18"/></condition><then pos:line="24" pos:column="18"> <comment type="block" pos:line="24" pos:column="19">/* convention is to use NULL for zero-length strings. */</comment>
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="9">FREE<pos:position pos:line="25" pos:column="13"/></name> <argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">strp<pos:position pos:line="25" pos:column="19"/></name></expr></argument>)<pos:position pos:line="25" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="21"/></expr_stmt></block></then> <comment type="block" pos:line="25" pos:column="22">/* __FREE_CHECKED__ */</comment>
      <elseif pos:line="26" pos:column="7">else <if pos:line="26" pos:column="12">if <condition pos:line="26" pos:column="15">(<expr><name pos:line="26" pos:column="16">n<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">!=<pos:position pos:line="26" pos:column="20"/></operator> <name pos:line="26" pos:column="21">rlen<pos:position pos:line="26" pos:column="25"/></name> <operator pos:line="26" pos:column="26">-<pos:position pos:line="26" pos:column="27"/></operator> <literal type="number" pos:line="26" pos:column="28">1<pos:position pos:line="26" pos:column="29"/></literal></expr>)<pos:position pos:line="26" pos:column="30"/></condition><then pos:line="26" pos:column="30">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="9">safe_realloc<pos:position pos:line="27" pos:column="21"/></name> <argument_list pos:line="27" pos:column="22">(<argument><expr><name pos:line="27" pos:column="23">strp<pos:position pos:line="27" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="29">n<pos:position pos:line="27" pos:column="30"/></name> <operator pos:line="27" pos:column="31">+<pos:position pos:line="27" pos:column="32"/></operator> <literal type="number" pos:line="27" pos:column="33">1<pos:position pos:line="27" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt></block></then></if></elseif></if>
      <return pos:line="28" pos:column="7">return <expr><name pos:line="28" pos:column="14">n<pos:position pos:line="28" pos:column="15"/></name></expr>;<pos:position pos:line="28" pos:column="16"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="30" pos:column="5">/* increase size and try again */</comment>
    <expr_stmt><expr><name pos:line="31" pos:column="5">rlen<pos:position pos:line="31" pos:column="9"/></name> <operator pos:line="31" pos:column="10">=<pos:position pos:line="31" pos:column="11"/></operator> <name pos:line="31" pos:column="12">n<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">+<pos:position pos:line="31" pos:column="15"/></operator> <literal type="number" pos:line="31" pos:column="16">1<pos:position pos:line="31" pos:column="17"/></literal></expr>;<pos:position pos:line="31" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">safe_realloc<pos:position pos:line="32" pos:column="17"/></name> <argument_list pos:line="32" pos:column="18">(<argument><expr><name pos:line="32" pos:column="19">strp<pos:position pos:line="32" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="25">rlen<pos:position pos:line="32" pos:column="29"/></name></expr></argument>)<pos:position pos:line="32" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="33" pos:column="4"/></block></for>
  <comment type="block" pos:line="34" pos:column="3">/* not reached */</comment>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
