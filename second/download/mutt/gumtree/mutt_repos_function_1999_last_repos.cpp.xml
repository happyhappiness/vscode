<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1999_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">imap_append_message<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">CONTEXT<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">ctx<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">MESSAGE<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">msg<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">IMAP_DATA<pos:position pos:line="3" pos:column="12"/></name><modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier></type> <name pos:line="3" pos:column="14">idata<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">FILE<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">fp<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">buf<pos:position pos:line="5" pos:column="11"/></name><index pos:line="5" pos:column="11">[<expr><name pos:line="5" pos:column="12">LONG_STRING<pos:position pos:line="5" pos:column="23"/></name></expr>]<pos:position pos:line="5" pos:column="24"/></index></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">mbox<pos:position pos:line="6" pos:column="12"/></name><index pos:line="6" pos:column="12">[<expr><name pos:line="6" pos:column="13">LONG_STRING<pos:position pos:line="6" pos:column="24"/></name></expr>]<pos:position pos:line="6" pos:column="25"/></index></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">mailbox<pos:position pos:line="7" pos:column="15"/></name><index pos:line="7" pos:column="15">[<expr><name pos:line="7" pos:column="16">LONG_STRING<pos:position pos:line="7" pos:column="27"/></name></expr>]<pos:position pos:line="7" pos:column="28"/></index></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">internaldate<pos:position pos:line="8" pos:column="20"/></name><index pos:line="8" pos:column="20">[<expr><name pos:line="8" pos:column="21">IMAP_DATELEN<pos:position pos:line="8" pos:column="33"/></name></expr>]<pos:position pos:line="8" pos:column="34"/></index></name></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name></type> <name><name pos:line="9" pos:column="8">imap_flags<pos:position pos:line="9" pos:column="18"/></name><index pos:line="9" pos:column="18">[<expr><name pos:line="9" pos:column="19">SHORT_STRING<pos:position pos:line="9" pos:column="31"/></name></expr>]<pos:position pos:line="9" pos:column="32"/></index></name></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">len<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">progress_t<pos:position pos:line="11" pos:column="13"/></name></type> <name pos:line="11" pos:column="14">progressbar<pos:position pos:line="11" pos:column="25"/></name></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">size_t<pos:position pos:line="12" pos:column="9"/></name></type> <name pos:line="12" pos:column="10">sent<pos:position pos:line="12" pos:column="14"/></name></decl>;<pos:position pos:line="12" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">c<pos:position pos:line="13" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="10">last<pos:position pos:line="13" pos:column="14"/></name></decl>;<pos:position pos:line="13" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">IMAP_MBOX<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">mx<pos:position pos:line="14" pos:column="15"/></name></decl>;<pos:position pos:line="14" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">int<pos:position pos:line="15" pos:column="6"/></name></type> <name pos:line="15" pos:column="7">rc<pos:position pos:line="15" pos:column="9"/></name></decl>;<pos:position pos:line="15" pos:column="10"/></decl_stmt>

  <expr_stmt><expr><name pos:line="17" pos:column="3">idata<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">=<pos:position pos:line="17" pos:column="10"/></operator> <operator pos:line="17" pos:column="11">(<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="12">IMAP_DATA<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">*<pos:position pos:line="17" pos:column="22"/></operator><operator pos:line="17" pos:column="22">)<pos:position pos:line="17" pos:column="23"/></operator> <name><name pos:line="17" pos:column="24">ctx<pos:position pos:line="17" pos:column="27"/></name><operator pos:line="17" pos:column="27">-&gt;<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="29">data<pos:position pos:line="17" pos:column="33"/></name></name></expr>;<pos:position pos:line="17" pos:column="34"/></expr_stmt>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><call><name pos:line="19" pos:column="7">imap_parse_path<pos:position pos:line="19" pos:column="22"/></name> <argument_list pos:line="19" pos:column="23">(<argument><expr><name><name pos:line="19" pos:column="24">ctx<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">-&gt;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="29">path<pos:position pos:line="19" pos:column="33"/></name></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="35">&amp;<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="36">mx<pos:position pos:line="19" pos:column="38"/></name></expr></argument>)<pos:position pos:line="19" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="40"/></condition><then pos:line="19" pos:column="40">
    <block type="pseudo"><return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">-<pos:position pos:line="20" pos:column="13"/></operator><literal type="number" pos:line="20" pos:column="13">1<pos:position pos:line="20" pos:column="14"/></literal></expr>;<pos:position pos:line="20" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="22" pos:column="3">imap_fix_path<pos:position pos:line="22" pos:column="16"/></name> <argument_list pos:line="22" pos:column="17">(<argument><expr><name pos:line="22" pos:column="18">idata<pos:position pos:line="22" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="25">mx<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">.<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="28">mbox<pos:position pos:line="22" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="34">mailbox<pos:position pos:line="22" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="43">sizeof <argument_list pos:line="22" pos:column="50">(<argument><expr><name pos:line="22" pos:column="51">mailbox<pos:position pos:line="22" pos:column="58"/></name></expr></argument>)<pos:position pos:line="22" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="61"/></expr_stmt>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><operator pos:line="23" pos:column="7">!<pos:position pos:line="23" pos:column="8"/></operator><operator pos:line="23" pos:column="8">*<pos:position pos:line="23" pos:column="9"/></operator><name pos:line="23" pos:column="9">mailbox<pos:position pos:line="23" pos:column="16"/></name></expr>)<pos:position pos:line="23" pos:column="17"/></condition><then pos:line="23" pos:column="17">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="5">strfcpy<pos:position pos:line="24" pos:column="12"/></name> <argument_list pos:line="24" pos:column="13">(<argument><expr><name pos:line="24" pos:column="14">mailbox<pos:position pos:line="24" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="23">"INBOX"<pos:position pos:line="24" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="32">sizeof <argument_list pos:line="24" pos:column="39">(<argument><expr><name pos:line="24" pos:column="40">mailbox<pos:position pos:line="24" pos:column="47"/></name></expr></argument>)<pos:position pos:line="24" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="50"/></expr_stmt></block></then></if>

  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><operator pos:line="26" pos:column="7">(<pos:position pos:line="26" pos:column="8"/></operator><name pos:line="26" pos:column="8">fp<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">=<pos:position pos:line="26" pos:column="12"/></operator> <call><name pos:line="26" pos:column="13">fopen<pos:position pos:line="26" pos:column="18"/></name> <argument_list pos:line="26" pos:column="19">(<argument><expr><name><name pos:line="26" pos:column="20">msg<pos:position pos:line="26" pos:column="23"/></name><operator pos:line="26" pos:column="23">-&gt;<pos:position pos:line="26" pos:column="28"/></operator><name pos:line="26" pos:column="25">path<pos:position pos:line="26" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="31">"r"<pos:position pos:line="26" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call><operator pos:line="26" pos:column="35">)<pos:position pos:line="26" pos:column="36"/></operator> <operator pos:line="26" pos:column="37">==<pos:position pos:line="26" pos:column="39"/></operator> <name pos:line="26" pos:column="40">NULL<pos:position pos:line="26" pos:column="44"/></name></expr>)<pos:position pos:line="26" pos:column="45"/></condition><then pos:line="26" pos:column="45">
  <block pos:line="27" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">mutt_perror<pos:position pos:line="28" pos:column="16"/></name> <argument_list pos:line="28" pos:column="17">(<argument><expr><name><name pos:line="28" pos:column="18">msg<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">-&gt;<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="23">path<pos:position pos:line="28" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
    <goto pos:line="29" pos:column="5">goto <name pos:line="29" pos:column="10">fail<pos:position pos:line="29" pos:column="14"/></name>;<pos:position pos:line="29" pos:column="15"/></goto>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="32" pos:column="3">/* currently we set the \Seen flag on all messages, but probably we
   * should scan the message Status header for flag info. Since we're
   * already rereading the whole file for length it isn't any more
   * expensive (it'd be nice if we had the file size passed in already
   * by the code that writes the file, but that's a lot of changes.
   * Ideally we'd have a HEADER structure with flag info here... */</comment>
  <for pos:line="38" pos:column="3">for <control pos:line="38" pos:column="7">(<init><expr><name pos:line="38" pos:column="8">last<pos:position pos:line="38" pos:column="12"/></name> <operator pos:line="38" pos:column="13">=<pos:position pos:line="38" pos:column="14"/></operator> <name pos:line="38" pos:column="15">EOF<pos:position pos:line="38" pos:column="18"/></name></expr><operator pos:line="38" pos:column="18">,<pos:position pos:line="38" pos:column="19"/></operator> <expr><name pos:line="38" pos:column="20">len<pos:position pos:line="38" pos:column="23"/></name> <operator pos:line="38" pos:column="24">=<pos:position pos:line="38" pos:column="25"/></operator> <literal type="number" pos:line="38" pos:column="26">0<pos:position pos:line="38" pos:column="27"/></literal></expr>;<pos:position pos:line="38" pos:column="28"/></init> <condition><expr><operator pos:line="38" pos:column="29">(<pos:position pos:line="38" pos:column="30"/></operator><name pos:line="38" pos:column="30">c<pos:position pos:line="38" pos:column="31"/></name> <operator pos:line="38" pos:column="32">=<pos:position pos:line="38" pos:column="33"/></operator> <call><name pos:line="38" pos:column="34">fgetc<pos:position pos:line="38" pos:column="39"/></name><argument_list pos:line="38" pos:column="39">(<argument><expr><name pos:line="38" pos:column="40">fp<pos:position pos:line="38" pos:column="42"/></name></expr></argument>)<pos:position pos:line="38" pos:column="43"/></argument_list></call><operator pos:line="38" pos:column="43">)<pos:position pos:line="38" pos:column="44"/></operator> <operator pos:line="38" pos:column="45">!=<pos:position pos:line="38" pos:column="47"/></operator> <name pos:line="38" pos:column="48">EOF<pos:position pos:line="38" pos:column="51"/></name></expr>;<pos:position pos:line="38" pos:column="52"/></condition> <incr><expr><name pos:line="38" pos:column="53">last<pos:position pos:line="38" pos:column="57"/></name> <operator pos:line="38" pos:column="58">=<pos:position pos:line="38" pos:column="59"/></operator> <name pos:line="38" pos:column="60">c<pos:position pos:line="38" pos:column="61"/></name></expr></incr>)<pos:position pos:line="38" pos:column="62"/></control>
  <block pos:line="39" pos:column="3">{
    <if pos:line="40" pos:column="5">if<condition pos:line="40" pos:column="7">(<expr><name pos:line="40" pos:column="8">c<pos:position pos:line="40" pos:column="9"/></name> <operator pos:line="40" pos:column="10">==<pos:position pos:line="40" pos:column="12"/></operator> <literal type="char" pos:line="40" pos:column="13">'\n'<pos:position pos:line="40" pos:column="17"/></literal> <operator pos:line="40" pos:column="18">&amp;&amp;<pos:position pos:line="40" pos:column="28"/></operator> <name pos:line="40" pos:column="21">last<pos:position pos:line="40" pos:column="25"/></name> <operator pos:line="40" pos:column="26">!=<pos:position pos:line="40" pos:column="28"/></operator> <literal type="char" pos:line="40" pos:column="29">'\r'<pos:position pos:line="40" pos:column="33"/></literal></expr>)<pos:position pos:line="40" pos:column="34"/></condition><then pos:line="40" pos:column="34">
      <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="7">len<pos:position pos:line="41" pos:column="10"/></name><operator pos:line="41" pos:column="10">++<pos:position pos:line="41" pos:column="12"/></operator></expr>;<pos:position pos:line="41" pos:column="13"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="43" pos:column="5">len<pos:position pos:line="43" pos:column="8"/></name><operator pos:line="43" pos:column="8">++<pos:position pos:line="43" pos:column="10"/></operator></expr>;<pos:position pos:line="43" pos:column="11"/></expr_stmt>
  }<pos:position pos:line="44" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="45" pos:column="3">rewind<pos:position pos:line="45" pos:column="9"/></name> <argument_list pos:line="45" pos:column="10">(<argument><expr><name pos:line="45" pos:column="11">fp<pos:position pos:line="45" pos:column="13"/></name></expr></argument>)<pos:position pos:line="45" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="15"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="47" pos:column="3">mutt_progress_init<pos:position pos:line="47" pos:column="21"/></name> <argument_list pos:line="47" pos:column="22">(<argument><expr><operator pos:line="47" pos:column="23">&amp;<pos:position pos:line="47" pos:column="28"/></operator><name pos:line="47" pos:column="24">progressbar<pos:position pos:line="47" pos:column="35"/></name></expr></argument>, <argument><expr><call><name pos:line="47" pos:column="37">_<pos:position pos:line="47" pos:column="38"/></name><argument_list pos:line="47" pos:column="38">(<argument><expr><literal type="string" pos:line="47" pos:column="39">"Uploading message..."<pos:position pos:line="47" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="62"/></argument_list></call></expr></argument>,
		      <argument><expr><name pos:line="48" pos:column="23">MUTT_PROGRESS_SIZE<pos:position pos:line="48" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="43">NetInc<pos:position pos:line="48" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="51">len<pos:position pos:line="48" pos:column="54"/></name></expr></argument>)<pos:position pos:line="48" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="56"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="50" pos:column="3">imap_munge_mbox_name<pos:position pos:line="50" pos:column="23"/></name> <argument_list pos:line="50" pos:column="24">(<argument><expr><name pos:line="50" pos:column="25">idata<pos:position pos:line="50" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="32">mbox<pos:position pos:line="50" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="50" pos:column="38">sizeof <argument_list pos:line="50" pos:column="45">(<argument><expr><name pos:line="50" pos:column="46">mbox<pos:position pos:line="50" pos:column="50"/></name></expr></argument>)<pos:position pos:line="50" pos:column="51"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="50" pos:column="53">mailbox<pos:position pos:line="50" pos:column="60"/></name></expr></argument>)<pos:position pos:line="50" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="62"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="51" pos:column="3">imap_make_date<pos:position pos:line="51" pos:column="17"/></name> <argument_list pos:line="51" pos:column="18">(<argument><expr><name pos:line="51" pos:column="19">internaldate<pos:position pos:line="51" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="33">msg<pos:position pos:line="51" pos:column="36"/></name><operator pos:line="51" pos:column="36">-&gt;<pos:position pos:line="51" pos:column="41"/></operator><name pos:line="51" pos:column="38">received<pos:position pos:line="51" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="48"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="53" pos:column="3">imap_flags<pos:position pos:line="53" pos:column="13"/></name><index pos:line="53" pos:column="13">[<expr><literal type="number" pos:line="53" pos:column="14">0<pos:position pos:line="53" pos:column="15"/></literal></expr>]<pos:position pos:line="53" pos:column="16"/></index></name> <operator pos:line="53" pos:column="17">=<pos:position pos:line="53" pos:column="18"/></operator> <name><name pos:line="53" pos:column="19">imap_flags<pos:position pos:line="53" pos:column="29"/></name><index pos:line="53" pos:column="29">[<expr><literal type="number" pos:line="53" pos:column="30">1<pos:position pos:line="53" pos:column="31"/></literal></expr>]<pos:position pos:line="53" pos:column="32"/></index></name> <operator pos:line="53" pos:column="33">=<pos:position pos:line="53" pos:column="34"/></operator> <literal type="number" pos:line="53" pos:column="35">0<pos:position pos:line="53" pos:column="36"/></literal></expr>;<pos:position pos:line="53" pos:column="37"/></expr_stmt>
  <if pos:line="54" pos:column="3">if <condition pos:line="54" pos:column="6">(<expr><name><name pos:line="54" pos:column="7">msg<pos:position pos:line="54" pos:column="10"/></name><operator pos:line="54" pos:column="10">-&gt;<pos:position pos:line="54" pos:column="15"/></operator><name pos:line="54" pos:column="12">flags<pos:position pos:line="54" pos:column="17"/></name><operator pos:line="54" pos:column="17">.<pos:position pos:line="54" pos:column="18"/></operator><name pos:line="54" pos:column="18">read<pos:position pos:line="54" pos:column="22"/></name></name></expr>)<pos:position pos:line="54" pos:column="23"/></condition><then pos:line="54" pos:column="23">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="5">safe_strcat<pos:position pos:line="55" pos:column="16"/></name> <argument_list pos:line="55" pos:column="17">(<argument><expr><name pos:line="55" pos:column="18">imap_flags<pos:position pos:line="55" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="30">sizeof <argument_list pos:line="55" pos:column="37">(<argument><expr><name pos:line="55" pos:column="38">imap_flags<pos:position pos:line="55" pos:column="48"/></name></expr></argument>)<pos:position pos:line="55" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="51">" \\Seen"<pos:position pos:line="55" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="62"/></expr_stmt></block></then></if>
  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><name><name pos:line="56" pos:column="7">msg<pos:position pos:line="56" pos:column="10"/></name><operator pos:line="56" pos:column="10">-&gt;<pos:position pos:line="56" pos:column="15"/></operator><name pos:line="56" pos:column="12">flags<pos:position pos:line="56" pos:column="17"/></name><operator pos:line="56" pos:column="17">.<pos:position pos:line="56" pos:column="18"/></operator><name pos:line="56" pos:column="18">replied<pos:position pos:line="56" pos:column="25"/></name></name></expr>)<pos:position pos:line="56" pos:column="26"/></condition><then pos:line="56" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="5">safe_strcat<pos:position pos:line="57" pos:column="16"/></name> <argument_list pos:line="57" pos:column="17">(<argument><expr><name pos:line="57" pos:column="18">imap_flags<pos:position pos:line="57" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="30">sizeof <argument_list pos:line="57" pos:column="37">(<argument><expr><name pos:line="57" pos:column="38">imap_flags<pos:position pos:line="57" pos:column="48"/></name></expr></argument>)<pos:position pos:line="57" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="51">" \\Answered"<pos:position pos:line="57" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="66"/></expr_stmt></block></then></if>
  <if pos:line="58" pos:column="3">if <condition pos:line="58" pos:column="6">(<expr><name><name pos:line="58" pos:column="7">msg<pos:position pos:line="58" pos:column="10"/></name><operator pos:line="58" pos:column="10">-&gt;<pos:position pos:line="58" pos:column="15"/></operator><name pos:line="58" pos:column="12">flags<pos:position pos:line="58" pos:column="17"/></name><operator pos:line="58" pos:column="17">.<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="18">flagged<pos:position pos:line="58" pos:column="25"/></name></name></expr>)<pos:position pos:line="58" pos:column="26"/></condition><then pos:line="58" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="5">safe_strcat<pos:position pos:line="59" pos:column="16"/></name> <argument_list pos:line="59" pos:column="17">(<argument><expr><name pos:line="59" pos:column="18">imap_flags<pos:position pos:line="59" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="59" pos:column="30">sizeof <argument_list pos:line="59" pos:column="37">(<argument><expr><name pos:line="59" pos:column="38">imap_flags<pos:position pos:line="59" pos:column="48"/></name></expr></argument>)<pos:position pos:line="59" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="51">" \\Flagged"<pos:position pos:line="59" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="65"/></expr_stmt></block></then></if>
  <if pos:line="60" pos:column="3">if <condition pos:line="60" pos:column="6">(<expr><name><name pos:line="60" pos:column="7">msg<pos:position pos:line="60" pos:column="10"/></name><operator pos:line="60" pos:column="10">-&gt;<pos:position pos:line="60" pos:column="15"/></operator><name pos:line="60" pos:column="12">flags<pos:position pos:line="60" pos:column="17"/></name><operator pos:line="60" pos:column="17">.<pos:position pos:line="60" pos:column="18"/></operator><name pos:line="60" pos:column="18">draft<pos:position pos:line="60" pos:column="23"/></name></name></expr>)<pos:position pos:line="60" pos:column="24"/></condition><then pos:line="60" pos:column="24">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="5">safe_strcat<pos:position pos:line="61" pos:column="16"/></name> <argument_list pos:line="61" pos:column="17">(<argument><expr><name pos:line="61" pos:column="18">imap_flags<pos:position pos:line="61" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="61" pos:column="30">sizeof <argument_list pos:line="61" pos:column="37">(<argument><expr><name pos:line="61" pos:column="38">imap_flags<pos:position pos:line="61" pos:column="48"/></name></expr></argument>)<pos:position pos:line="61" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="51">" \\Draft"<pos:position pos:line="61" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="63"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="63" pos:column="3">snprintf<pos:position pos:line="63" pos:column="11"/></name> <argument_list pos:line="63" pos:column="12">(<argument><expr><name pos:line="63" pos:column="13">buf<pos:position pos:line="63" pos:column="16"/></name></expr></argument>, <argument><expr><sizeof pos:line="63" pos:column="18">sizeof <argument_list pos:line="63" pos:column="25">(<argument><expr><name pos:line="63" pos:column="26">buf<pos:position pos:line="63" pos:column="29"/></name></expr></argument>)<pos:position pos:line="63" pos:column="30"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="32">"APPEND %s (%s) \"%s\" {%lu}"<pos:position pos:line="63" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="63">mbox<pos:position pos:line="63" pos:column="67"/></name></expr></argument>,
            <argument><expr><name pos:line="64" pos:column="13">imap_flags<pos:position pos:line="64" pos:column="23"/></name> <operator pos:line="64" pos:column="24">+<pos:position pos:line="64" pos:column="25"/></operator> <literal type="number" pos:line="64" pos:column="26">1<pos:position pos:line="64" pos:column="27"/></literal></expr></argument>,
	    <argument><expr><name pos:line="65" pos:column="13">internaldate<pos:position pos:line="65" pos:column="25"/></name></expr></argument>,
	    <argument><expr><operator pos:line="66" pos:column="13">(<pos:position pos:line="66" pos:column="14"/></operator><name pos:line="66" pos:column="14">unsigned<pos:position pos:line="66" pos:column="22"/></name> <name pos:line="66" pos:column="23">long<pos:position pos:line="66" pos:column="27"/></name><operator pos:line="66" pos:column="27">)<pos:position pos:line="66" pos:column="28"/></operator> <name pos:line="66" pos:column="29">len<pos:position pos:line="66" pos:column="32"/></name></expr></argument>)<pos:position pos:line="66" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="68" pos:column="3">imap_cmd_start<pos:position pos:line="68" pos:column="17"/></name> <argument_list pos:line="68" pos:column="18">(<argument><expr><name pos:line="68" pos:column="19">idata<pos:position pos:line="68" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="26">buf<pos:position pos:line="68" pos:column="29"/></name></expr></argument>)<pos:position pos:line="68" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="31"/></expr_stmt>

  <do pos:line="70" pos:column="3">do
    <block type="pseudo"><expr_stmt><expr><name pos:line="71" pos:column="5">rc<pos:position pos:line="71" pos:column="7"/></name> <operator pos:line="71" pos:column="8">=<pos:position pos:line="71" pos:column="9"/></operator> <call><name pos:line="71" pos:column="10">imap_cmd_step<pos:position pos:line="71" pos:column="23"/></name> <argument_list pos:line="71" pos:column="24">(<argument><expr><name pos:line="71" pos:column="25">idata<pos:position pos:line="71" pos:column="30"/></name></expr></argument>)<pos:position pos:line="71" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="32"/></expr_stmt></block>
  while <condition pos:line="72" pos:column="9">(<expr><name pos:line="72" pos:column="10">rc<pos:position pos:line="72" pos:column="12"/></name> <operator pos:line="72" pos:column="13">==<pos:position pos:line="72" pos:column="15"/></operator> <name pos:line="72" pos:column="16">IMAP_CMD_CONTINUE<pos:position pos:line="72" pos:column="33"/></name></expr>)<pos:position pos:line="72" pos:column="34"/></condition>;<pos:position pos:line="72" pos:column="35"/></do>

  <if pos:line="74" pos:column="3">if <condition pos:line="74" pos:column="6">(<expr><name pos:line="74" pos:column="7">rc<pos:position pos:line="74" pos:column="9"/></name> <operator pos:line="74" pos:column="10">!=<pos:position pos:line="74" pos:column="12"/></operator> <name pos:line="74" pos:column="13">IMAP_CMD_RESPOND<pos:position pos:line="74" pos:column="29"/></name></expr>)<pos:position pos:line="74" pos:column="30"/></condition><then pos:line="74" pos:column="30">
  <block pos:line="75" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="76" pos:column="5">char<pos:position pos:line="76" pos:column="9"/></name> <modifier pos:line="76" pos:column="10">*<pos:position pos:line="76" pos:column="11"/></modifier></type><name pos:line="76" pos:column="11">pc<pos:position pos:line="76" pos:column="13"/></name></decl>;<pos:position pos:line="76" pos:column="14"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="78" pos:column="5">dprint<pos:position pos:line="78" pos:column="11"/></name> <argument_list pos:line="78" pos:column="12">(<argument><expr><literal type="number" pos:line="78" pos:column="13">1<pos:position pos:line="78" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="78" pos:column="16">(<pos:position pos:line="78" pos:column="17"/></operator><name pos:line="78" pos:column="17">debugfile<pos:position pos:line="78" pos:column="26"/></name><operator pos:line="78" pos:column="26">,<pos:position pos:line="78" pos:column="27"/></operator> <literal type="string" pos:line="78" pos:column="28">"imap_append_message(): command failed: %s\n"<pos:position pos:line="78" pos:column="73"/></literal><operator pos:line="78" pos:column="73">,<pos:position pos:line="78" pos:column="74"/></operator>
		<name><name pos:line="79" pos:column="17">idata<pos:position pos:line="79" pos:column="22"/></name><operator pos:line="79" pos:column="22">-&gt;<pos:position pos:line="79" pos:column="27"/></operator><name pos:line="79" pos:column="24">buf<pos:position pos:line="79" pos:column="27"/></name></name><operator pos:line="79" pos:column="27">)<pos:position pos:line="79" pos:column="28"/></operator></expr></argument>)<pos:position pos:line="79" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><name pos:line="81" pos:column="5">pc<pos:position pos:line="81" pos:column="7"/></name> <operator pos:line="81" pos:column="8">=<pos:position pos:line="81" pos:column="9"/></operator> <name><name pos:line="81" pos:column="10">idata<pos:position pos:line="81" pos:column="15"/></name><operator pos:line="81" pos:column="15">-&gt;<pos:position pos:line="81" pos:column="20"/></operator><name pos:line="81" pos:column="17">buf<pos:position pos:line="81" pos:column="20"/></name></name> <operator pos:line="81" pos:column="21">+<pos:position pos:line="81" pos:column="22"/></operator> <name pos:line="81" pos:column="23">SEQLEN<pos:position pos:line="81" pos:column="29"/></name></expr>;<pos:position pos:line="81" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="82" pos:column="5">SKIPWS<pos:position pos:line="82" pos:column="11"/></name> <argument_list pos:line="82" pos:column="12">(<argument><expr><name pos:line="82" pos:column="13">pc<pos:position pos:line="82" pos:column="15"/></name></expr></argument>)<pos:position pos:line="82" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="83" pos:column="5">pc<pos:position pos:line="83" pos:column="7"/></name> <operator pos:line="83" pos:column="8">=<pos:position pos:line="83" pos:column="9"/></operator> <call><name pos:line="83" pos:column="10">imap_next_word<pos:position pos:line="83" pos:column="24"/></name> <argument_list pos:line="83" pos:column="25">(<argument><expr><name pos:line="83" pos:column="26">pc<pos:position pos:line="83" pos:column="28"/></name></expr></argument>)<pos:position pos:line="83" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="84" pos:column="5">mutt_error<pos:position pos:line="84" pos:column="15"/></name> <argument_list pos:line="84" pos:column="16">(<argument><expr><literal type="string" pos:line="84" pos:column="17">"%s"<pos:position pos:line="84" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="84" pos:column="23">pc<pos:position pos:line="84" pos:column="25"/></name></expr></argument>)<pos:position pos:line="84" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">mutt_sleep<pos:position pos:line="85" pos:column="15"/></name> <argument_list pos:line="85" pos:column="16">(<argument><expr><literal type="number" pos:line="85" pos:column="17">1<pos:position pos:line="85" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="86" pos:column="5">safe_fclose<pos:position pos:line="86" pos:column="16"/></name> <argument_list pos:line="86" pos:column="17">(<argument><expr><operator pos:line="86" pos:column="18">&amp;<pos:position pos:line="86" pos:column="23"/></operator><name pos:line="86" pos:column="19">fp<pos:position pos:line="86" pos:column="21"/></name></expr></argument>)<pos:position pos:line="86" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="23"/></expr_stmt>
    <goto pos:line="87" pos:column="5">goto <name pos:line="87" pos:column="10">fail<pos:position pos:line="87" pos:column="14"/></name>;<pos:position pos:line="87" pos:column="15"/></goto>
  }<pos:position pos:line="88" pos:column="4"/></block></then></if>

  <for pos:line="90" pos:column="3">for <control pos:line="90" pos:column="7">(<init><expr><name pos:line="90" pos:column="8">last<pos:position pos:line="90" pos:column="12"/></name> <operator pos:line="90" pos:column="13">=<pos:position pos:line="90" pos:column="14"/></operator> <name pos:line="90" pos:column="15">EOF<pos:position pos:line="90" pos:column="18"/></name></expr><operator pos:line="90" pos:column="18">,<pos:position pos:line="90" pos:column="19"/></operator> <expr><name pos:line="90" pos:column="20">sent<pos:position pos:line="90" pos:column="24"/></name> <operator pos:line="90" pos:column="25">=<pos:position pos:line="90" pos:column="26"/></operator> <name pos:line="90" pos:column="27">len<pos:position pos:line="90" pos:column="30"/></name> <operator pos:line="90" pos:column="31">=<pos:position pos:line="90" pos:column="32"/></operator> <literal type="number" pos:line="90" pos:column="33">0<pos:position pos:line="90" pos:column="34"/></literal></expr>;<pos:position pos:line="90" pos:column="35"/></init> <condition><expr><operator pos:line="90" pos:column="36">(<pos:position pos:line="90" pos:column="37"/></operator><name pos:line="90" pos:column="37">c<pos:position pos:line="90" pos:column="38"/></name> <operator pos:line="90" pos:column="39">=<pos:position pos:line="90" pos:column="40"/></operator> <call><name pos:line="90" pos:column="41">fgetc<pos:position pos:line="90" pos:column="46"/></name><argument_list pos:line="90" pos:column="46">(<argument><expr><name pos:line="90" pos:column="47">fp<pos:position pos:line="90" pos:column="49"/></name></expr></argument>)<pos:position pos:line="90" pos:column="50"/></argument_list></call><operator pos:line="90" pos:column="50">)<pos:position pos:line="90" pos:column="51"/></operator> <operator pos:line="90" pos:column="52">!=<pos:position pos:line="90" pos:column="54"/></operator> <name pos:line="90" pos:column="55">EOF<pos:position pos:line="90" pos:column="58"/></name></expr>;<pos:position pos:line="90" pos:column="59"/></condition> <incr><expr><name pos:line="90" pos:column="60">last<pos:position pos:line="90" pos:column="64"/></name> <operator pos:line="90" pos:column="65">=<pos:position pos:line="90" pos:column="66"/></operator> <name pos:line="90" pos:column="67">c<pos:position pos:line="90" pos:column="68"/></name></expr></incr>)<pos:position pos:line="90" pos:column="69"/></control>
  <block pos:line="91" pos:column="3">{
    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><name pos:line="92" pos:column="9">c<pos:position pos:line="92" pos:column="10"/></name> <operator pos:line="92" pos:column="11">==<pos:position pos:line="92" pos:column="13"/></operator> <literal type="char" pos:line="92" pos:column="14">'\n'<pos:position pos:line="92" pos:column="18"/></literal> <operator pos:line="92" pos:column="19">&amp;&amp;<pos:position pos:line="92" pos:column="29"/></operator> <name pos:line="92" pos:column="22">last<pos:position pos:line="92" pos:column="26"/></name> <operator pos:line="92" pos:column="27">!=<pos:position pos:line="92" pos:column="29"/></operator> <literal type="char" pos:line="92" pos:column="30">'\r'<pos:position pos:line="92" pos:column="34"/></literal></expr>)<pos:position pos:line="92" pos:column="35"/></condition><then pos:line="92" pos:column="35">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="93" pos:column="7">buf<pos:position pos:line="93" pos:column="10"/></name><index pos:line="93" pos:column="10">[<expr><name pos:line="93" pos:column="11">len<pos:position pos:line="93" pos:column="14"/></name><operator pos:line="93" pos:column="14">++<pos:position pos:line="93" pos:column="16"/></operator></expr>]<pos:position pos:line="93" pos:column="17"/></index></name> <operator pos:line="93" pos:column="18">=<pos:position pos:line="93" pos:column="19"/></operator> <literal type="char" pos:line="93" pos:column="20">'\r'<pos:position pos:line="93" pos:column="24"/></literal></expr>;<pos:position pos:line="93" pos:column="25"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="95" pos:column="5">buf<pos:position pos:line="95" pos:column="8"/></name><index pos:line="95" pos:column="8">[<expr><name pos:line="95" pos:column="9">len<pos:position pos:line="95" pos:column="12"/></name><operator pos:line="95" pos:column="12">++<pos:position pos:line="95" pos:column="14"/></operator></expr>]<pos:position pos:line="95" pos:column="15"/></index></name> <operator pos:line="95" pos:column="16">=<pos:position pos:line="95" pos:column="17"/></operator> <name pos:line="95" pos:column="18">c<pos:position pos:line="95" pos:column="19"/></name></expr>;<pos:position pos:line="95" pos:column="20"/></expr_stmt>

    <if pos:line="97" pos:column="5">if <condition pos:line="97" pos:column="8">(<expr><name pos:line="97" pos:column="9">len<pos:position pos:line="97" pos:column="12"/></name> <operator pos:line="97" pos:column="13">&gt;<pos:position pos:line="97" pos:column="17"/></operator> <sizeof pos:line="97" pos:column="15">sizeof<argument_list pos:line="97" pos:column="21">(<argument><expr><name pos:line="97" pos:column="22">buf<pos:position pos:line="97" pos:column="25"/></name></expr></argument>)<pos:position pos:line="97" pos:column="26"/></argument_list></sizeof> <operator pos:line="97" pos:column="27">-<pos:position pos:line="97" pos:column="28"/></operator> <literal type="number" pos:line="97" pos:column="29">3<pos:position pos:line="97" pos:column="30"/></literal></expr>)<pos:position pos:line="97" pos:column="31"/></condition><then pos:line="97" pos:column="31">
    <block pos:line="98" pos:column="5">{
      <expr_stmt><expr><name pos:line="99" pos:column="7">sent<pos:position pos:line="99" pos:column="11"/></name> <operator pos:line="99" pos:column="12">+=<pos:position pos:line="99" pos:column="14"/></operator> <name pos:line="99" pos:column="15">len<pos:position pos:line="99" pos:column="18"/></name></expr>;<pos:position pos:line="99" pos:column="19"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="100" pos:column="7">flush_buffer<pos:position pos:line="100" pos:column="19"/></name><argument_list pos:line="100" pos:column="19">(<argument><expr><name pos:line="100" pos:column="20">buf<pos:position pos:line="100" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="100" pos:column="25">&amp;<pos:position pos:line="100" pos:column="30"/></operator><name pos:line="100" pos:column="26">len<pos:position pos:line="100" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="31">idata<pos:position pos:line="100" pos:column="36"/></name><operator pos:line="100" pos:column="36">-&gt;<pos:position pos:line="100" pos:column="41"/></operator><name pos:line="100" pos:column="38">conn<pos:position pos:line="100" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="101" pos:column="7">mutt_progress_update<pos:position pos:line="101" pos:column="27"/></name> <argument_list pos:line="101" pos:column="28">(<argument><expr><operator pos:line="101" pos:column="29">&amp;<pos:position pos:line="101" pos:column="34"/></operator><name pos:line="101" pos:column="30">progressbar<pos:position pos:line="101" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="43">sent<pos:position pos:line="101" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="101" pos:column="49">-<pos:position pos:line="101" pos:column="50"/></operator><literal type="number" pos:line="101" pos:column="50">1<pos:position pos:line="101" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="102" pos:column="6"/></block></then></if>
  }<pos:position pos:line="103" pos:column="4"/></block></for>

  <if pos:line="105" pos:column="3">if <condition pos:line="105" pos:column="6">(<expr><name pos:line="105" pos:column="7">len<pos:position pos:line="105" pos:column="10"/></name></expr>)<pos:position pos:line="105" pos:column="11"/></condition><then pos:line="105" pos:column="11">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="106" pos:column="5">flush_buffer<pos:position pos:line="106" pos:column="17"/></name><argument_list pos:line="106" pos:column="17">(<argument><expr><name pos:line="106" pos:column="18">buf<pos:position pos:line="106" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="23">&amp;<pos:position pos:line="106" pos:column="28"/></operator><name pos:line="106" pos:column="24">len<pos:position pos:line="106" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="29">idata<pos:position pos:line="106" pos:column="34"/></name><operator pos:line="106" pos:column="34">-&gt;<pos:position pos:line="106" pos:column="39"/></operator><name pos:line="106" pos:column="36">conn<pos:position pos:line="106" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="106" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="42"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="108" pos:column="3">mutt_socket_write<pos:position pos:line="108" pos:column="20"/></name> <argument_list pos:line="108" pos:column="21">(<argument><expr><name><name pos:line="108" pos:column="22">idata<pos:position pos:line="108" pos:column="27"/></name><operator pos:line="108" pos:column="27">-&gt;<pos:position pos:line="108" pos:column="32"/></operator><name pos:line="108" pos:column="29">conn<pos:position pos:line="108" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="35">"\r\n"<pos:position pos:line="108" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="109" pos:column="3">safe_fclose<pos:position pos:line="109" pos:column="14"/></name> <argument_list pos:line="109" pos:column="15">(<argument><expr><operator pos:line="109" pos:column="16">&amp;<pos:position pos:line="109" pos:column="21"/></operator><name pos:line="109" pos:column="17">fp<pos:position pos:line="109" pos:column="19"/></name></expr></argument>)<pos:position pos:line="109" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="21"/></expr_stmt>

  <do pos:line="111" pos:column="3">do
    <block type="pseudo"><expr_stmt><expr><name pos:line="112" pos:column="5">rc<pos:position pos:line="112" pos:column="7"/></name> <operator pos:line="112" pos:column="8">=<pos:position pos:line="112" pos:column="9"/></operator> <call><name pos:line="112" pos:column="10">imap_cmd_step<pos:position pos:line="112" pos:column="23"/></name> <argument_list pos:line="112" pos:column="24">(<argument><expr><name pos:line="112" pos:column="25">idata<pos:position pos:line="112" pos:column="30"/></name></expr></argument>)<pos:position pos:line="112" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="32"/></expr_stmt></block>
  while <condition pos:line="113" pos:column="9">(<expr><name pos:line="113" pos:column="10">rc<pos:position pos:line="113" pos:column="12"/></name> <operator pos:line="113" pos:column="13">==<pos:position pos:line="113" pos:column="15"/></operator> <name pos:line="113" pos:column="16">IMAP_CMD_CONTINUE<pos:position pos:line="113" pos:column="33"/></name></expr>)<pos:position pos:line="113" pos:column="34"/></condition>;<pos:position pos:line="113" pos:column="35"/></do>

  <if pos:line="115" pos:column="3">if <condition pos:line="115" pos:column="6">(<expr><operator pos:line="115" pos:column="7">!<pos:position pos:line="115" pos:column="8"/></operator><call><name pos:line="115" pos:column="8">imap_code<pos:position pos:line="115" pos:column="17"/></name> <argument_list pos:line="115" pos:column="18">(<argument><expr><name><name pos:line="115" pos:column="19">idata<pos:position pos:line="115" pos:column="24"/></name><operator pos:line="115" pos:column="24">-&gt;<pos:position pos:line="115" pos:column="29"/></operator><name pos:line="115" pos:column="26">buf<pos:position pos:line="115" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="115" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="115" pos:column="31"/></condition><then pos:line="115" pos:column="31">
  <block pos:line="116" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="117" pos:column="5">char<pos:position pos:line="117" pos:column="9"/></name> <modifier pos:line="117" pos:column="10">*<pos:position pos:line="117" pos:column="11"/></modifier></type><name pos:line="117" pos:column="11">pc<pos:position pos:line="117" pos:column="13"/></name></decl>;<pos:position pos:line="117" pos:column="14"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="119" pos:column="5">dprint<pos:position pos:line="119" pos:column="11"/></name> <argument_list pos:line="119" pos:column="12">(<argument><expr><literal type="number" pos:line="119" pos:column="13">1<pos:position pos:line="119" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="119" pos:column="16">(<pos:position pos:line="119" pos:column="17"/></operator><name pos:line="119" pos:column="17">debugfile<pos:position pos:line="119" pos:column="26"/></name><operator pos:line="119" pos:column="26">,<pos:position pos:line="119" pos:column="27"/></operator> <literal type="string" pos:line="119" pos:column="28">"imap_append_message(): command failed: %s\n"<pos:position pos:line="119" pos:column="73"/></literal><operator pos:line="119" pos:column="73">,<pos:position pos:line="119" pos:column="74"/></operator>
		<name><name pos:line="120" pos:column="17">idata<pos:position pos:line="120" pos:column="22"/></name><operator pos:line="120" pos:column="22">-&gt;<pos:position pos:line="120" pos:column="27"/></operator><name pos:line="120" pos:column="24">buf<pos:position pos:line="120" pos:column="27"/></name></name><operator pos:line="120" pos:column="27">)<pos:position pos:line="120" pos:column="28"/></operator></expr></argument>)<pos:position pos:line="120" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name pos:line="121" pos:column="5">pc<pos:position pos:line="121" pos:column="7"/></name> <operator pos:line="121" pos:column="8">=<pos:position pos:line="121" pos:column="9"/></operator> <name><name pos:line="121" pos:column="10">idata<pos:position pos:line="121" pos:column="15"/></name><operator pos:line="121" pos:column="15">-&gt;<pos:position pos:line="121" pos:column="20"/></operator><name pos:line="121" pos:column="17">buf<pos:position pos:line="121" pos:column="20"/></name></name> <operator pos:line="121" pos:column="21">+<pos:position pos:line="121" pos:column="22"/></operator> <name pos:line="121" pos:column="23">SEQLEN<pos:position pos:line="121" pos:column="29"/></name></expr>;<pos:position pos:line="121" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="122" pos:column="5">SKIPWS<pos:position pos:line="122" pos:column="11"/></name> <argument_list pos:line="122" pos:column="12">(<argument><expr><name pos:line="122" pos:column="13">pc<pos:position pos:line="122" pos:column="15"/></name></expr></argument>)<pos:position pos:line="122" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="123" pos:column="5">pc<pos:position pos:line="123" pos:column="7"/></name> <operator pos:line="123" pos:column="8">=<pos:position pos:line="123" pos:column="9"/></operator> <call><name pos:line="123" pos:column="10">imap_next_word<pos:position pos:line="123" pos:column="24"/></name> <argument_list pos:line="123" pos:column="25">(<argument><expr><name pos:line="123" pos:column="26">pc<pos:position pos:line="123" pos:column="28"/></name></expr></argument>)<pos:position pos:line="123" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="124" pos:column="5">mutt_error<pos:position pos:line="124" pos:column="15"/></name> <argument_list pos:line="124" pos:column="16">(<argument><expr><literal type="string" pos:line="124" pos:column="17">"%s"<pos:position pos:line="124" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="124" pos:column="23">pc<pos:position pos:line="124" pos:column="25"/></name></expr></argument>)<pos:position pos:line="124" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="125" pos:column="5">mutt_sleep<pos:position pos:line="125" pos:column="15"/></name> <argument_list pos:line="125" pos:column="16">(<argument><expr><literal type="number" pos:line="125" pos:column="17">1<pos:position pos:line="125" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="20"/></expr_stmt>
    <goto pos:line="126" pos:column="5">goto <name pos:line="126" pos:column="10">fail<pos:position pos:line="126" pos:column="14"/></name>;<pos:position pos:line="126" pos:column="15"/></goto>
  }<pos:position pos:line="127" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="129" pos:column="3">FREE<pos:position pos:line="129" pos:column="7"/></name> <argument_list pos:line="129" pos:column="8">(<argument><expr><operator pos:line="129" pos:column="9">&amp;<pos:position pos:line="129" pos:column="14"/></operator><name><name pos:line="129" pos:column="10">mx<pos:position pos:line="129" pos:column="12"/></name><operator pos:line="129" pos:column="12">.<pos:position pos:line="129" pos:column="13"/></operator><name pos:line="129" pos:column="13">mbox<pos:position pos:line="129" pos:column="17"/></name></name></expr></argument>)<pos:position pos:line="129" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="19"/></expr_stmt>
  <return pos:line="130" pos:column="3">return <expr><literal type="number" pos:line="130" pos:column="10">0<pos:position pos:line="130" pos:column="11"/></literal></expr>;<pos:position pos:line="130" pos:column="12"/></return>

 <label><name pos:line="132" pos:column="2">fail<pos:position pos:line="132" pos:column="6"/></name>:<pos:position pos:line="132" pos:column="7"/></label>
  <expr_stmt><expr><call><name pos:line="133" pos:column="3">FREE<pos:position pos:line="133" pos:column="7"/></name> <argument_list pos:line="133" pos:column="8">(<argument><expr><operator pos:line="133" pos:column="9">&amp;<pos:position pos:line="133" pos:column="14"/></operator><name><name pos:line="133" pos:column="10">mx<pos:position pos:line="133" pos:column="12"/></name><operator pos:line="133" pos:column="12">.<pos:position pos:line="133" pos:column="13"/></operator><name pos:line="133" pos:column="13">mbox<pos:position pos:line="133" pos:column="17"/></name></name></expr></argument>)<pos:position pos:line="133" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="19"/></expr_stmt>
  <return pos:line="134" pos:column="3">return <expr><operator pos:line="134" pos:column="10">-<pos:position pos:line="134" pos:column="11"/></operator><literal type="number" pos:line="134" pos:column="11">1<pos:position pos:line="134" pos:column="12"/></literal></expr>;<pos:position pos:line="134" pos:column="13"/></return>
}<pos:position pos:line="135" pos:column="2"/></block></function></unit>
