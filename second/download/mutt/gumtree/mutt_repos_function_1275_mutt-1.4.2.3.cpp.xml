<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1275_mutt-1.4.2.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">imap_cmd_step<pos:position pos:line="1" pos:column="18"/></name> <parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">IMAP_DATA<pos:position pos:line="1" pos:column="29"/></name><modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type> <name pos:line="1" pos:column="31">idata<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">IMAP_COMMAND<pos:position pos:line="3" pos:column="15"/></name><modifier pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></modifier></type> <name pos:line="3" pos:column="17">cmd<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><operator pos:line="3" pos:column="23">&amp;<pos:position pos:line="3" pos:column="28"/></operator><name><name pos:line="3" pos:column="24">idata<pos:position pos:line="3" pos:column="29"/></name><operator pos:line="3" pos:column="29">-&gt;<pos:position pos:line="3" pos:column="34"/></operator><name pos:line="3" pos:column="31">cmd<pos:position pos:line="3" pos:column="34"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">int<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">len<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><literal type="number" pos:line="4" pos:column="22">0<pos:position pos:line="4" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">c<pos:position pos:line="5" pos:column="8"/></name></decl>;<pos:position pos:line="5" pos:column="9"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name><name pos:line="7" pos:column="7">idata<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">-&gt;<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="14">status<pos:position pos:line="7" pos:column="20"/></name></name> <operator pos:line="7" pos:column="21">==<pos:position pos:line="7" pos:column="23"/></operator> <name pos:line="7" pos:column="24">IMAP_FATAL<pos:position pos:line="7" pos:column="34"/></name></expr>)<pos:position pos:line="7" pos:column="35"/></condition><then pos:line="7" pos:column="35">
  <block pos:line="8" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">cmd_handle_fatal<pos:position pos:line="9" pos:column="21"/></name> <argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">idata<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>
    <return pos:line="10" pos:column="5">return <expr><name pos:line="10" pos:column="12">IMAP_CMD_BAD<pos:position pos:line="10" pos:column="24"/></name></expr>;<pos:position pos:line="10" pos:column="25"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="13" pos:column="3">/* read into buffer, expanding buffer as necessary until we have a full
   * line */</comment>
  <do pos:line="15" pos:column="3">do
  <block pos:line="16" pos:column="3">{
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">len<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">==<pos:position pos:line="17" pos:column="15"/></operator> <name><name pos:line="17" pos:column="16">cmd<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">-&gt;<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="21">blen<pos:position pos:line="17" pos:column="25"/></name></name></expr>)<pos:position pos:line="17" pos:column="26"/></condition><then pos:line="17" pos:column="26">
    <block pos:line="18" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="19" pos:column="7">safe_realloc<pos:position pos:line="19" pos:column="19"/></name> <argument_list pos:line="19" pos:column="20">(<argument><expr><operator pos:line="19" pos:column="21">(<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">void<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">*<pos:position pos:line="19" pos:column="27"/></operator><operator pos:line="19" pos:column="27">*<pos:position pos:line="19" pos:column="28"/></operator><operator pos:line="19" pos:column="28">)<pos:position pos:line="19" pos:column="29"/></operator> <operator pos:line="19" pos:column="30">&amp;<pos:position pos:line="19" pos:column="35"/></operator><name><name pos:line="19" pos:column="31">cmd<pos:position pos:line="19" pos:column="34"/></name><operator pos:line="19" pos:column="34">-&gt;<pos:position pos:line="19" pos:column="39"/></operator><name pos:line="19" pos:column="36">buf<pos:position pos:line="19" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="41">cmd<pos:position pos:line="19" pos:column="44"/></name><operator pos:line="19" pos:column="44">-&gt;<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="46">blen<pos:position pos:line="19" pos:column="50"/></name></name> <operator pos:line="19" pos:column="51">+<pos:position pos:line="19" pos:column="52"/></operator> <name pos:line="19" pos:column="53">IMAP_CMD_BUFSIZE<pos:position pos:line="19" pos:column="69"/></name></expr></argument>)<pos:position pos:line="19" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="71"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="20" pos:column="7">cmd<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">-&gt;<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="12">blen<pos:position pos:line="20" pos:column="16"/></name></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <name><name pos:line="20" pos:column="19">cmd<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">-&gt;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="24">blen<pos:position pos:line="20" pos:column="28"/></name></name> <operator pos:line="20" pos:column="29">+<pos:position pos:line="20" pos:column="30"/></operator> <name pos:line="20" pos:column="31">IMAP_CMD_BUFSIZE<pos:position pos:line="20" pos:column="47"/></name></expr>;<pos:position pos:line="20" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">dprint<pos:position pos:line="21" pos:column="13"/></name> <argument_list pos:line="21" pos:column="14">(<argument><expr><literal type="number" pos:line="21" pos:column="15">3<pos:position pos:line="21" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="21" pos:column="18">(<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="19">debugfile<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">,<pos:position pos:line="21" pos:column="29"/></operator> <literal type="string" pos:line="21" pos:column="30">"imap_cmd_step: grew buffer to %u bytes\n"<pos:position pos:line="21" pos:column="72"/></literal><operator pos:line="21" pos:column="72">,<pos:position pos:line="21" pos:column="73"/></operator>
		  <name><name pos:line="22" pos:column="19">cmd<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">-&gt;<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="24">blen<pos:position pos:line="22" pos:column="28"/></name></name><operator pos:line="22" pos:column="28">)<pos:position pos:line="22" pos:column="29"/></operator></expr></argument>)<pos:position pos:line="22" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="25" pos:column="5">c<pos:position pos:line="25" pos:column="6"/></name> <operator pos:line="25" pos:column="7">=<pos:position pos:line="25" pos:column="8"/></operator> <call><name pos:line="25" pos:column="9">mutt_socket_readln<pos:position pos:line="25" pos:column="27"/></name> <argument_list pos:line="25" pos:column="28">(<argument><expr><name><name pos:line="25" pos:column="29">cmd<pos:position pos:line="25" pos:column="32"/></name><operator pos:line="25" pos:column="32">-&gt;<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="34">buf<pos:position pos:line="25" pos:column="37"/></name></name> <operator pos:line="25" pos:column="38">+<pos:position pos:line="25" pos:column="39"/></operator> <name pos:line="25" pos:column="40">len<pos:position pos:line="25" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="45">cmd<pos:position pos:line="25" pos:column="48"/></name><operator pos:line="25" pos:column="48">-&gt;<pos:position pos:line="25" pos:column="53"/></operator><name pos:line="25" pos:column="50">blen<pos:position pos:line="25" pos:column="54"/></name></name> <operator pos:line="25" pos:column="55">-<pos:position pos:line="25" pos:column="56"/></operator> <name pos:line="25" pos:column="57">len<pos:position pos:line="25" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="62">idata<pos:position pos:line="25" pos:column="67"/></name><operator pos:line="25" pos:column="67">-&gt;<pos:position pos:line="25" pos:column="72"/></operator><name pos:line="25" pos:column="69">conn<pos:position pos:line="25" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="75"/></expr_stmt>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">c<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">&lt;=<pos:position pos:line="26" pos:column="16"/></operator> <literal type="number" pos:line="26" pos:column="14">0<pos:position pos:line="26" pos:column="15"/></literal></expr>)<pos:position pos:line="26" pos:column="16"/></condition><then pos:line="26" pos:column="16">
    <block pos:line="27" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">dprint<pos:position pos:line="28" pos:column="13"/></name> <argument_list pos:line="28" pos:column="14">(<argument><expr><literal type="number" pos:line="28" pos:column="15">1<pos:position pos:line="28" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="28" pos:column="18">(<pos:position pos:line="28" pos:column="19"/></operator><name pos:line="28" pos:column="19">debugfile<pos:position pos:line="28" pos:column="28"/></name><operator pos:line="28" pos:column="28">,<pos:position pos:line="28" pos:column="29"/></operator> <literal type="string" pos:line="28" pos:column="30">"imap_cmd_step: Error reading server response.\n"<pos:position pos:line="28" pos:column="79"/></literal><operator pos:line="28" pos:column="79">)<pos:position pos:line="28" pos:column="80"/></operator></expr></argument>)<pos:position pos:line="28" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="82"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">cmd_handle_fatal<pos:position pos:line="29" pos:column="23"/></name> <argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">idata<pos:position pos:line="29" pos:column="30"/></name></expr></argument>)<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>
      <return pos:line="30" pos:column="7">return <expr><name pos:line="30" pos:column="14">IMAP_CMD_BAD<pos:position pos:line="30" pos:column="26"/></name></expr>;<pos:position pos:line="30" pos:column="27"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="33" pos:column="5">len<pos:position pos:line="33" pos:column="8"/></name> <operator pos:line="33" pos:column="9">+=<pos:position pos:line="33" pos:column="11"/></operator> <name pos:line="33" pos:column="12">c<pos:position pos:line="33" pos:column="13"/></name></expr>;<pos:position pos:line="33" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block>
  <comment type="block" pos:line="35" pos:column="3">/* if we've read all the way to the end of the buffer, we haven't read a
   * full line (mutt_socket_readln strips the \r, so we always have at least
   * one character free when we've read a full line) */</comment>
  while <condition pos:line="38" pos:column="9">(<expr><name pos:line="38" pos:column="10">len<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">==<pos:position pos:line="38" pos:column="16"/></operator> <name><name pos:line="38" pos:column="17">cmd<pos:position pos:line="38" pos:column="20"/></name><operator pos:line="38" pos:column="20">-&gt;<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="22">blen<pos:position pos:line="38" pos:column="26"/></name></name></expr>)<pos:position pos:line="38" pos:column="27"/></condition>;<pos:position pos:line="38" pos:column="28"/></do>

  <comment type="block" pos:line="40" pos:column="3">/* don't let one large string make cmd-&gt;buf hog memory forever */</comment>
  <if pos:line="41" pos:column="3">if <condition pos:line="41" pos:column="6">(<expr><operator pos:line="41" pos:column="7">(<pos:position pos:line="41" pos:column="8"/></operator><name><name pos:line="41" pos:column="8">cmd<pos:position pos:line="41" pos:column="11"/></name><operator pos:line="41" pos:column="11">-&gt;<pos:position pos:line="41" pos:column="16"/></operator><name pos:line="41" pos:column="13">blen<pos:position pos:line="41" pos:column="17"/></name></name> <operator pos:line="41" pos:column="18">&gt;<pos:position pos:line="41" pos:column="22"/></operator> <name pos:line="41" pos:column="20">IMAP_CMD_BUFSIZE<pos:position pos:line="41" pos:column="36"/></name><operator pos:line="41" pos:column="36">)<pos:position pos:line="41" pos:column="37"/></operator> <operator pos:line="41" pos:column="38">&amp;&amp;<pos:position pos:line="41" pos:column="48"/></operator> <operator pos:line="41" pos:column="41">(<pos:position pos:line="41" pos:column="42"/></operator><name pos:line="41" pos:column="42">len<pos:position pos:line="41" pos:column="45"/></name> <operator pos:line="41" pos:column="46">&lt;=<pos:position pos:line="41" pos:column="51"/></operator> <name pos:line="41" pos:column="49">IMAP_CMD_BUFSIZE<pos:position pos:line="41" pos:column="65"/></name><operator pos:line="41" pos:column="65">)<pos:position pos:line="41" pos:column="66"/></operator></expr>)<pos:position pos:line="41" pos:column="67"/></condition><then pos:line="41" pos:column="67">
  <block pos:line="42" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">safe_realloc<pos:position pos:line="43" pos:column="17"/></name> <argument_list pos:line="43" pos:column="18">(<argument><expr><operator pos:line="43" pos:column="19">(<pos:position pos:line="43" pos:column="20"/></operator><name pos:line="43" pos:column="20">void<pos:position pos:line="43" pos:column="24"/></name><operator pos:line="43" pos:column="24">*<pos:position pos:line="43" pos:column="25"/></operator><operator pos:line="43" pos:column="25">*<pos:position pos:line="43" pos:column="26"/></operator><operator pos:line="43" pos:column="26">)<pos:position pos:line="43" pos:column="27"/></operator> <operator pos:line="43" pos:column="28">&amp;<pos:position pos:line="43" pos:column="33"/></operator><name><name pos:line="43" pos:column="29">cmd<pos:position pos:line="43" pos:column="32"/></name><operator pos:line="43" pos:column="32">-&gt;<pos:position pos:line="43" pos:column="37"/></operator><name pos:line="43" pos:column="34">buf<pos:position pos:line="43" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="39">IMAP_CMD_BUFSIZE<pos:position pos:line="43" pos:column="55"/></name></expr></argument>)<pos:position pos:line="43" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="44" pos:column="5">cmd<pos:position pos:line="44" pos:column="8"/></name><operator pos:line="44" pos:column="8">-&gt;<pos:position pos:line="44" pos:column="13"/></operator><name pos:line="44" pos:column="10">blen<pos:position pos:line="44" pos:column="14"/></name></name> <operator pos:line="44" pos:column="15">=<pos:position pos:line="44" pos:column="16"/></operator> <name pos:line="44" pos:column="17">IMAP_CMD_BUFSIZE<pos:position pos:line="44" pos:column="33"/></name></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">dprint<pos:position pos:line="45" pos:column="11"/></name> <argument_list pos:line="45" pos:column="12">(<argument><expr><literal type="number" pos:line="45" pos:column="13">3<pos:position pos:line="45" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="45" pos:column="16">(<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="17">debugfile<pos:position pos:line="45" pos:column="26"/></name><operator pos:line="45" pos:column="26">,<pos:position pos:line="45" pos:column="27"/></operator> <literal type="string" pos:line="45" pos:column="28">"imap_cmd_step: shrank buffer to %u bytes\n"<pos:position pos:line="45" pos:column="72"/></literal><operator pos:line="45" pos:column="72">,<pos:position pos:line="45" pos:column="73"/></operator> <name><name pos:line="45" pos:column="74">cmd<pos:position pos:line="45" pos:column="77"/></name><operator pos:line="45" pos:column="77">-&gt;<pos:position pos:line="45" pos:column="82"/></operator><name pos:line="45" pos:column="79">blen<pos:position pos:line="45" pos:column="83"/></name></name><operator pos:line="45" pos:column="83">)<pos:position pos:line="45" pos:column="84"/></operator></expr></argument>)<pos:position pos:line="45" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="86"/></expr_stmt>
  }<pos:position pos:line="46" pos:column="4"/></block></then></if>
  
  <comment type="block" pos:line="48" pos:column="3">/* handle untagged messages. The caller still gets its shot afterwards. */</comment>
  <if pos:line="49" pos:column="3">if <condition pos:line="49" pos:column="6">(<expr><operator pos:line="49" pos:column="7">!<pos:position pos:line="49" pos:column="8"/></operator><call><name pos:line="49" pos:column="8">ascii_strncmp<pos:position pos:line="49" pos:column="21"/></name> <argument_list pos:line="49" pos:column="22">(<argument><expr><name><name pos:line="49" pos:column="23">cmd<pos:position pos:line="49" pos:column="26"/></name><operator pos:line="49" pos:column="26">-&gt;<pos:position pos:line="49" pos:column="31"/></operator><name pos:line="49" pos:column="28">buf<pos:position pos:line="49" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="33">"* "<pos:position pos:line="49" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="39">2<pos:position pos:line="49" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="41"/></argument_list></call> <operator pos:line="49" pos:column="42">&amp;&amp;<pos:position pos:line="49" pos:column="52"/></operator>
      <call><name pos:line="50" pos:column="7">cmd_handle_untagged<pos:position pos:line="50" pos:column="26"/></name> <argument_list pos:line="50" pos:column="27">(<argument><expr><name pos:line="50" pos:column="28">idata<pos:position pos:line="50" pos:column="33"/></name></expr></argument>)<pos:position pos:line="50" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="35"/></condition><then pos:line="50" pos:column="35">
    <block type="pseudo"><return pos:line="51" pos:column="5">return <expr><name pos:line="51" pos:column="12">IMAP_CMD_BAD<pos:position pos:line="51" pos:column="24"/></name></expr>;<pos:position pos:line="51" pos:column="25"/></return></block></then></if>

  <comment type="block" pos:line="53" pos:column="3">/* server demands a continuation response from us */</comment>
  <if pos:line="54" pos:column="3">if <condition pos:line="54" pos:column="6">(<expr><operator pos:line="54" pos:column="7">!<pos:position pos:line="54" pos:column="8"/></operator><call><name pos:line="54" pos:column="8">ascii_strncmp<pos:position pos:line="54" pos:column="21"/></name> <argument_list pos:line="54" pos:column="22">(<argument><expr><name><name pos:line="54" pos:column="23">cmd<pos:position pos:line="54" pos:column="26"/></name><operator pos:line="54" pos:column="26">-&gt;<pos:position pos:line="54" pos:column="31"/></operator><name pos:line="54" pos:column="28">buf<pos:position pos:line="54" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="33">"+ "<pos:position pos:line="54" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="39">2<pos:position pos:line="54" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="42"/></condition><then pos:line="54" pos:column="42">
  <block pos:line="55" pos:column="3">{
    <return pos:line="56" pos:column="5">return <expr><name pos:line="56" pos:column="12">IMAP_CMD_RESPOND<pos:position pos:line="56" pos:column="28"/></name></expr>;<pos:position pos:line="56" pos:column="29"/></return>
  }<pos:position pos:line="57" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="59" pos:column="3">/* tagged completion code */</comment>
  <if pos:line="60" pos:column="3">if <condition pos:line="60" pos:column="6">(<expr><operator pos:line="60" pos:column="7">!<pos:position pos:line="60" pos:column="8"/></operator><call><name pos:line="60" pos:column="8">ascii_strncmp<pos:position pos:line="60" pos:column="21"/></name> <argument_list pos:line="60" pos:column="22">(<argument><expr><name><name pos:line="60" pos:column="23">cmd<pos:position pos:line="60" pos:column="26"/></name><operator pos:line="60" pos:column="26">-&gt;<pos:position pos:line="60" pos:column="31"/></operator><name pos:line="60" pos:column="28">buf<pos:position pos:line="60" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="33">cmd<pos:position pos:line="60" pos:column="36"/></name><operator pos:line="60" pos:column="36">-&gt;<pos:position pos:line="60" pos:column="41"/></operator><name pos:line="60" pos:column="38">seq<pos:position pos:line="60" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="43">SEQLEN<pos:position pos:line="60" pos:column="49"/></name></expr></argument>)<pos:position pos:line="60" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="51"/></condition><then pos:line="60" pos:column="51">
  <block pos:line="61" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">imap_cmd_finish<pos:position pos:line="62" pos:column="20"/></name> <argument_list pos:line="62" pos:column="21">(<argument><expr><name pos:line="62" pos:column="22">idata<pos:position pos:line="62" pos:column="27"/></name></expr></argument>)<pos:position pos:line="62" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="29"/></expr_stmt>
    <return pos:line="63" pos:column="5">return <expr><ternary><condition><expr><call><name pos:line="63" pos:column="12">imap_code<pos:position pos:line="63" pos:column="21"/></name> <argument_list pos:line="63" pos:column="22">(<argument><expr><name><name pos:line="63" pos:column="23">cmd<pos:position pos:line="63" pos:column="26"/></name><operator pos:line="63" pos:column="26">-&gt;<pos:position pos:line="63" pos:column="31"/></operator><name pos:line="63" pos:column="28">buf<pos:position pos:line="63" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="32"/></argument_list></call></expr> ?<pos:position pos:line="63" pos:column="34"/></condition><then pos:line="63" pos:column="34"> <expr><name pos:line="63" pos:column="35">IMAP_CMD_OK<pos:position pos:line="63" pos:column="46"/></name></expr> <pos:position pos:line="63" pos:column="47"/></then><else pos:line="63" pos:column="47">: <expr><name pos:line="63" pos:column="49">IMAP_CMD_NO<pos:position pos:line="63" pos:column="60"/></name></expr></else></ternary></expr>;<pos:position pos:line="63" pos:column="61"/></return>
  }<pos:position pos:line="64" pos:column="4"/></block></then></if>

  <return pos:line="66" pos:column="3">return <expr><name pos:line="66" pos:column="10">IMAP_CMD_CONTINUE<pos:position pos:line="66" pos:column="27"/></name></expr>;<pos:position pos:line="66" pos:column="28"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
