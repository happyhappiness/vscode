<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2062_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">sync_helper<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">IMAP_DATA<pos:position pos:line="1" pos:column="34"/></name><modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type> <name pos:line="1" pos:column="36">idata<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">int<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">right<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">int<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">flag<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="64">const<pos:position pos:line="1" pos:column="69"/></specifier> <name pos:line="1" pos:column="70">char<pos:position pos:line="1" pos:column="74"/></name><modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type> <name pos:line="1" pos:column="76">name<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="81"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">count<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><literal type="number" pos:line="3" pos:column="15">0<pos:position pos:line="3" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">rc<pos:position pos:line="4" pos:column="9"/></name></decl>;<pos:position pos:line="4" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">buf<pos:position pos:line="5" pos:column="11"/></name><index pos:line="5" pos:column="11">[<expr><name pos:line="5" pos:column="12">LONG_STRING<pos:position pos:line="5" pos:column="23"/></name></expr>]<pos:position pos:line="5" pos:column="24"/></index></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">!<pos:position pos:line="7" pos:column="8"/></operator><name><name pos:line="7" pos:column="8">idata<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">-&gt;<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="15">ctx<pos:position pos:line="7" pos:column="18"/></name></name></expr>)<pos:position pos:line="7" pos:column="19"/></condition><then pos:line="7" pos:column="19">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><operator pos:line="8" pos:column="12">-<pos:position pos:line="8" pos:column="13"/></operator><literal type="number" pos:line="8" pos:column="13">1<pos:position pos:line="8" pos:column="14"/></literal></expr>;<pos:position pos:line="8" pos:column="15"/></return></block></then></if>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><operator pos:line="10" pos:column="7">!<pos:position pos:line="10" pos:column="8"/></operator><call><name pos:line="10" pos:column="8">mutt_bit_isset<pos:position pos:line="10" pos:column="22"/></name> <argument_list pos:line="10" pos:column="23">(<argument><expr><name><name pos:line="10" pos:column="24">idata<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">-&gt;<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="31">ctx<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">-&gt;<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="36">rights<pos:position pos:line="10" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="44">right<pos:position pos:line="10" pos:column="49"/></name></expr></argument>)<pos:position pos:line="10" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="51"/></condition><then pos:line="10" pos:column="51">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><literal type="number" pos:line="11" pos:column="12">0<pos:position pos:line="11" pos:column="13"/></literal></expr>;<pos:position pos:line="11" pos:column="14"/></return></block></then></if>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">right<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">==<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">MUTT_ACL_WRITE<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">&amp;&amp;<pos:position pos:line="13" pos:column="41"/></operator> <operator pos:line="13" pos:column="34">!<pos:position pos:line="13" pos:column="35"/></operator><call><name pos:line="13" pos:column="35">imap_has_flag<pos:position pos:line="13" pos:column="48"/></name> <argument_list pos:line="13" pos:column="49">(<argument><expr><name><name pos:line="13" pos:column="50">idata<pos:position pos:line="13" pos:column="55"/></name><operator pos:line="13" pos:column="55">-&gt;<pos:position pos:line="13" pos:column="60"/></operator><name pos:line="13" pos:column="57">flags<pos:position pos:line="13" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="64">name<pos:position pos:line="13" pos:column="68"/></name></expr></argument>)<pos:position pos:line="13" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="70"/></condition><then pos:line="13" pos:column="70">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><literal type="number" pos:line="14" pos:column="12">0<pos:position pos:line="14" pos:column="13"/></literal></expr>;<pos:position pos:line="14" pos:column="14"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="16" pos:column="3">snprintf<pos:position pos:line="16" pos:column="11"/></name> <argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">buf<pos:position pos:line="16" pos:column="16"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="18">sizeof<argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">buf<pos:position pos:line="16" pos:column="28"/></name></expr></argument>)<pos:position pos:line="16" pos:column="29"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="31">"+FLAGS.SILENT (%s)"<pos:position pos:line="16" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="53">name<pos:position pos:line="16" pos:column="57"/></name></expr></argument>)<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="59"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><operator pos:line="17" pos:column="7">(<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">rc<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">=<pos:position pos:line="17" pos:column="12"/></operator> <call><name pos:line="17" pos:column="13">imap_exec_msgset<pos:position pos:line="17" pos:column="29"/></name> <argument_list pos:line="17" pos:column="30">(<argument><expr><name pos:line="17" pos:column="31">idata<pos:position pos:line="17" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="38">"UID STORE"<pos:position pos:line="17" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="51">buf<pos:position pos:line="17" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="56">flag<pos:position pos:line="17" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="62">1<pos:position pos:line="17" pos:column="63"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="65">0<pos:position pos:line="17" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="67"/></argument_list></call><operator pos:line="17" pos:column="67">)<pos:position pos:line="17" pos:column="68"/></operator> <operator pos:line="17" pos:column="69">&lt;<pos:position pos:line="17" pos:column="73"/></operator> <literal type="number" pos:line="17" pos:column="71">0<pos:position pos:line="17" pos:column="72"/></literal></expr>)<pos:position pos:line="17" pos:column="73"/></condition><then pos:line="17" pos:column="73">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">rc<pos:position pos:line="18" pos:column="14"/></name></expr>;<pos:position pos:line="18" pos:column="15"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="19" pos:column="3">count<pos:position pos:line="19" pos:column="8"/></name> <operator pos:line="19" pos:column="9">+=<pos:position pos:line="19" pos:column="11"/></operator> <name pos:line="19" pos:column="12">rc<pos:position pos:line="19" pos:column="14"/></name></expr>;<pos:position pos:line="19" pos:column="15"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="21" pos:column="3">buf<pos:position pos:line="21" pos:column="6"/></name><index pos:line="21" pos:column="6">[<expr><literal type="number" pos:line="21" pos:column="7">0<pos:position pos:line="21" pos:column="8"/></literal></expr>]<pos:position pos:line="21" pos:column="9"/></index></name> <operator pos:line="21" pos:column="10">=<pos:position pos:line="21" pos:column="11"/></operator> <literal type="char" pos:line="21" pos:column="12">'-'<pos:position pos:line="21" pos:column="15"/></literal></expr>;<pos:position pos:line="21" pos:column="16"/></expr_stmt>
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><operator pos:line="22" pos:column="7">(<pos:position pos:line="22" pos:column="8"/></operator><name pos:line="22" pos:column="8">rc<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">=<pos:position pos:line="22" pos:column="12"/></operator> <call><name pos:line="22" pos:column="13">imap_exec_msgset<pos:position pos:line="22" pos:column="29"/></name> <argument_list pos:line="22" pos:column="30">(<argument><expr><name pos:line="22" pos:column="31">idata<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="38">"UID STORE"<pos:position pos:line="22" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="51">buf<pos:position pos:line="22" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="56">flag<pos:position pos:line="22" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="62">1<pos:position pos:line="22" pos:column="63"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="65">1<pos:position pos:line="22" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="67"/></argument_list></call><operator pos:line="22" pos:column="67">)<pos:position pos:line="22" pos:column="68"/></operator> <operator pos:line="22" pos:column="69">&lt;<pos:position pos:line="22" pos:column="73"/></operator> <literal type="number" pos:line="22" pos:column="71">0<pos:position pos:line="22" pos:column="72"/></literal></expr>)<pos:position pos:line="22" pos:column="73"/></condition><then pos:line="22" pos:column="73">
    <block type="pseudo"><return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">rc<pos:position pos:line="23" pos:column="14"/></name></expr>;<pos:position pos:line="23" pos:column="15"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="24" pos:column="3">count<pos:position pos:line="24" pos:column="8"/></name> <operator pos:line="24" pos:column="9">+=<pos:position pos:line="24" pos:column="11"/></operator> <name pos:line="24" pos:column="12">rc<pos:position pos:line="24" pos:column="14"/></name></expr>;<pos:position pos:line="24" pos:column="15"/></expr_stmt>

  <return pos:line="26" pos:column="3">return <expr><name pos:line="26" pos:column="10">count<pos:position pos:line="26" pos:column="15"/></name></expr>;<pos:position pos:line="26" pos:column="16"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
