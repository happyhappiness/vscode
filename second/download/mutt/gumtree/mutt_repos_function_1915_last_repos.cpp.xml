<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1915_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">_nl_load_domain<pos:position pos:line="3" pos:column="16"/></name> <argument_list pos:line="3" pos:column="17">(<argument><expr><name pos:line="3" pos:column="18">domain_file<pos:position pos:line="3" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="31">domainbinding<pos:position pos:line="3" pos:column="44"/></name></expr></argument>)<pos:position pos:line="3" pos:column="45"/></argument_list>
     struct <name pos:line="4" pos:column="13">loaded_l10nfile<pos:position pos:line="4" pos:column="28"/></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier><name pos:line="4" pos:column="30">domain_file<pos:position pos:line="4" pos:column="41"/></name></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
     <decl_stmt><decl><type><name><name pos:line="5" pos:column="6">struct<pos:position pos:line="5" pos:column="12"/></name> <name pos:line="5" pos:column="13">binding<pos:position pos:line="5" pos:column="20"/></name></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">domainbinding<pos:position pos:line="5" pos:column="35"/></name></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">fd<pos:position pos:line="7" pos:column="9"/></name></decl>;<pos:position pos:line="7" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">size<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>
<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef<pos:position pos:line="9" pos:column="7"/></cpp:directive> <name pos:line="9" pos:column="8">_LIBC<pos:position pos:line="9" pos:column="13"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">stat64<pos:position pos:line="10" pos:column="16"/></name></name></type> <name pos:line="10" pos:column="17">st<pos:position pos:line="10" pos:column="19"/></name></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>
<cpp:else pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">else<pos:position pos:line="11" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name pos:line="12" pos:column="3">struct<pos:position pos:line="12" pos:column="9"/></name> <name pos:line="12" pos:column="10">stat<pos:position pos:line="12" pos:column="14"/></name></name></type> <name pos:line="12" pos:column="15">st<pos:position pos:line="12" pos:column="17"/></name></decl>;<pos:position pos:line="12" pos:column="18"/></decl_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name><name pos:line="14" pos:column="3">struct<pos:position pos:line="14" pos:column="9"/></name> <name pos:line="14" pos:column="10">mo_file_header<pos:position pos:line="14" pos:column="24"/></name></name> <modifier pos:line="14" pos:column="25">*<pos:position pos:line="14" pos:column="26"/></modifier></type><name pos:line="14" pos:column="26">data<pos:position pos:line="14" pos:column="30"/></name> <init pos:line="14" pos:column="31">= <expr><operator pos:line="14" pos:column="33">(<pos:position pos:line="14" pos:column="34"/></operator>struct <name pos:line="14" pos:column="41">mo_file_header<pos:position pos:line="14" pos:column="55"/></name> <operator pos:line="14" pos:column="56">*<pos:position pos:line="14" pos:column="57"/></operator><operator pos:line="14" pos:column="57">)<pos:position pos:line="14" pos:column="58"/></operator> <operator pos:line="14" pos:column="59">-<pos:position pos:line="14" pos:column="60"/></operator><literal type="number" pos:line="14" pos:column="60">1<pos:position pos:line="14" pos:column="61"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="62"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">int<pos:position pos:line="15" pos:column="6"/></name></type> <name pos:line="15" pos:column="7">use_mmap<pos:position pos:line="15" pos:column="15"/></name> <init pos:line="15" pos:column="16">= <expr><literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="16" pos:column="3">struct<pos:position pos:line="16" pos:column="9"/></name> <name pos:line="16" pos:column="10">loaded_domain<pos:position pos:line="16" pos:column="23"/></name></name> <modifier pos:line="16" pos:column="24">*<pos:position pos:line="16" pos:column="25"/></modifier></type><name pos:line="16" pos:column="25">domain<pos:position pos:line="16" pos:column="31"/></name></decl>;<pos:position pos:line="16" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="17" pos:column="3">const<pos:position pos:line="17" pos:column="8"/></specifier> <name pos:line="17" pos:column="9">char<pos:position pos:line="17" pos:column="13"/></name> <modifier pos:line="17" pos:column="14">*<pos:position pos:line="17" pos:column="15"/></modifier></type><name pos:line="17" pos:column="15">nullentry<pos:position pos:line="17" pos:column="24"/></name></decl>;<pos:position pos:line="17" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="19" pos:column="3">domain_file<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">-&gt;<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="16">decided<pos:position pos:line="19" pos:column="23"/></name></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <literal type="number" pos:line="19" pos:column="26">1<pos:position pos:line="19" pos:column="27"/></literal></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="20" pos:column="3">domain_file<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">-&gt;<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="16">data<pos:position pos:line="20" pos:column="20"/></name></name> <operator pos:line="20" pos:column="21">=<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="23">NULL<pos:position pos:line="20" pos:column="27"/></name></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>

  <comment type="block" pos:line="22" pos:column="3">/* Note that it would be useless to store domainbinding in domain_file
     because domainbinding might be == NULL now but != NULL later (after
     a call to bind_textdomain_codeset).  */</comment>

  <comment type="block" pos:line="26" pos:column="3">/* If the record does not represent a valid locale the FILENAME
     might be NULL.  This can happen when according to the given
     specification the locale file name is different for XPG and CEN
     syntax.  */</comment>
  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><name><name pos:line="30" pos:column="7">domain_file<pos:position pos:line="30" pos:column="18"/></name><operator pos:line="30" pos:column="18">-&gt;<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="20">filename<pos:position pos:line="30" pos:column="28"/></name></name> <operator pos:line="30" pos:column="29">==<pos:position pos:line="30" pos:column="31"/></operator> <name pos:line="30" pos:column="32">NULL<pos:position pos:line="30" pos:column="36"/></name></expr>)<pos:position pos:line="30" pos:column="37"/></condition><then pos:line="30" pos:column="37">
    <block type="pseudo"><return pos:line="31" pos:column="5">return;<pos:position pos:line="31" pos:column="12"/></return></block></then></if>

  <comment type="block" pos:line="33" pos:column="3">/* Try to open the addressed file.  */</comment>
  <expr_stmt><expr><name pos:line="34" pos:column="3">fd<pos:position pos:line="34" pos:column="5"/></name> <operator pos:line="34" pos:column="6">=<pos:position pos:line="34" pos:column="7"/></operator> <call><name pos:line="34" pos:column="8">open<pos:position pos:line="34" pos:column="12"/></name> <argument_list pos:line="34" pos:column="13">(<argument><expr><name><name pos:line="34" pos:column="14">domain_file<pos:position pos:line="34" pos:column="25"/></name><operator pos:line="34" pos:column="25">-&gt;<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="27">filename<pos:position pos:line="34" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="37">O_RDONLY<pos:position pos:line="34" pos:column="45"/></name> <operator pos:line="34" pos:column="46">|<pos:position pos:line="34" pos:column="47"/></operator> <name pos:line="34" pos:column="48">O_BINARY<pos:position pos:line="34" pos:column="56"/></name></expr></argument>)<pos:position pos:line="34" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="58"/></expr_stmt>
  <if pos:line="35" pos:column="3">if <condition pos:line="35" pos:column="6">(<expr><name pos:line="35" pos:column="7">fd<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">==<pos:position pos:line="35" pos:column="12"/></operator> <operator pos:line="35" pos:column="13">-<pos:position pos:line="35" pos:column="14"/></operator><literal type="number" pos:line="35" pos:column="14">1<pos:position pos:line="35" pos:column="15"/></literal></expr>)<pos:position pos:line="35" pos:column="16"/></condition><then pos:line="35" pos:column="16">
    <block type="pseudo"><return pos:line="36" pos:column="5">return;<pos:position pos:line="36" pos:column="12"/></return></block></then></if>

  <comment type="block" pos:line="38" pos:column="3">/* We must know about the size of the file.  */</comment>
  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(
<cpp:ifdef pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">ifdef<pos:position pos:line="40" pos:column="7"/></cpp:directive> <name pos:line="40" pos:column="8">_LIBC<pos:position pos:line="40" pos:column="13"/></name></cpp:ifdef>
      <macro><name pos:line="41" pos:column="7">__builtin_expect<pos:position pos:line="41" pos:column="23"/></name> <argument_list pos:line="41" pos:column="24">(<argument pos:line="41" pos:column="25">fstat64 (fd, &amp;st) != <literal type="number" pos:line="41" pos:column="46">0<pos:position pos:line="41" pos:column="47"/></literal></argument>, <argument><literal type="number" pos:line="41" pos:column="49">0<pos:position pos:line="41" pos:column="50"/></literal></argument>)<pos:position pos:line="41" pos:column="51"/></argument_list></macro>
<cpp:else pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">else<pos:position pos:line="42" pos:column="6"/></cpp:directive></cpp:else>
      <expr><call><name pos:line="43" pos:column="7">__builtin_expect<pos:position pos:line="43" pos:column="23"/></name> <argument_list pos:line="43" pos:column="24">(<argument><expr><call><name pos:line="43" pos:column="25">fstat<pos:position pos:line="43" pos:column="30"/></name> <argument_list pos:line="43" pos:column="31">(<argument><expr><name pos:line="43" pos:column="32">fd<pos:position pos:line="43" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="36">&amp;<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="37">st<pos:position pos:line="43" pos:column="39"/></name></expr></argument>)<pos:position pos:line="43" pos:column="40"/></argument_list></call> <operator pos:line="43" pos:column="41">!=<pos:position pos:line="43" pos:column="43"/></operator> <literal type="number" pos:line="43" pos:column="44">0<pos:position pos:line="43" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="47">0<pos:position pos:line="43" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="49"/></argument_list></call>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>
      <operator pos:line="45" pos:column="7">||<pos:position pos:line="45" pos:column="9"/></operator> <call><name pos:line="45" pos:column="10">__builtin_expect<pos:position pos:line="45" pos:column="26"/></name> <argument_list pos:line="45" pos:column="27">(<argument><expr><operator pos:line="45" pos:column="28">(<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="29">size<pos:position pos:line="45" pos:column="33"/></name> <operator pos:line="45" pos:column="34">=<pos:position pos:line="45" pos:column="35"/></operator> <operator pos:line="45" pos:column="36">(<pos:position pos:line="45" pos:column="37"/></operator><name pos:line="45" pos:column="37">size_t<pos:position pos:line="45" pos:column="43"/></name><operator pos:line="45" pos:column="43">)<pos:position pos:line="45" pos:column="44"/></operator> <name><name pos:line="45" pos:column="45">st<pos:position pos:line="45" pos:column="47"/></name><operator pos:line="45" pos:column="47">.<pos:position pos:line="45" pos:column="48"/></operator><name pos:line="45" pos:column="48">st_size<pos:position pos:line="45" pos:column="55"/></name></name><operator pos:line="45" pos:column="55">)<pos:position pos:line="45" pos:column="56"/></operator> <operator pos:line="45" pos:column="57">!=<pos:position pos:line="45" pos:column="59"/></operator> <name><name pos:line="45" pos:column="60">st<pos:position pos:line="45" pos:column="62"/></name><operator pos:line="45" pos:column="62">.<pos:position pos:line="45" pos:column="63"/></operator><name pos:line="45" pos:column="63">st_size<pos:position pos:line="45" pos:column="70"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="72">0<pos:position pos:line="45" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="74"/></argument_list></call>
      <operator pos:line="46" pos:column="7">||<pos:position pos:line="46" pos:column="9"/></operator> <call><name pos:line="46" pos:column="10">__builtin_expect<pos:position pos:line="46" pos:column="26"/></name> <argument_list pos:line="46" pos:column="27">(<argument><expr><name pos:line="46" pos:column="28">size<pos:position pos:line="46" pos:column="32"/></name> <operator pos:line="46" pos:column="33">&lt;<pos:position pos:line="46" pos:column="37"/></operator> <sizeof pos:line="46" pos:column="35">sizeof <argument_list pos:line="46" pos:column="42">(<argument><expr pos:line="46" pos:column="43">struct <name pos:line="46" pos:column="50">mo_file_header<pos:position pos:line="46" pos:column="64"/></name></expr></argument>)<pos:position pos:line="46" pos:column="65"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="67">0<pos:position pos:line="46" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="70"/></condition><then pos:line="46" pos:column="70">
    <block pos:line="47" pos:column="5">{
      <comment type="block" pos:line="48" pos:column="7">/* Something went wrong.  */</comment>
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">close<pos:position pos:line="49" pos:column="12"/></name> <argument_list pos:line="49" pos:column="13">(<argument><expr><name pos:line="49" pos:column="14">fd<pos:position pos:line="49" pos:column="16"/></name></expr></argument>)<pos:position pos:line="49" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="18"/></expr_stmt>
      <return pos:line="50" pos:column="7">return;<pos:position pos:line="50" pos:column="14"/></return>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">ifdef<pos:position pos:line="53" pos:column="7"/></cpp:directive> <name pos:line="53" pos:column="8">HAVE_MMAP<pos:position pos:line="53" pos:column="17"/></name></cpp:ifdef>
  <comment type="block" pos:line="54" pos:column="3">/* Now we are ready to load the file.  If mmap() is available we try
     this first.  If not available or it failed we try to load it.  */</comment>
  <expr_stmt><expr><name pos:line="56" pos:column="3">data<pos:position pos:line="56" pos:column="7"/></name> <operator pos:line="56" pos:column="8">=<pos:position pos:line="56" pos:column="9"/></operator> <operator pos:line="56" pos:column="10">(<pos:position pos:line="56" pos:column="11"/></operator>struct <name pos:line="56" pos:column="18">mo_file_header<pos:position pos:line="56" pos:column="32"/></name> <operator pos:line="56" pos:column="33">*<pos:position pos:line="56" pos:column="34"/></operator><operator pos:line="56" pos:column="34">)<pos:position pos:line="56" pos:column="35"/></operator> <call><name pos:line="56" pos:column="36">mmap<pos:position pos:line="56" pos:column="40"/></name> <argument_list pos:line="56" pos:column="41">(<argument><expr><name pos:line="56" pos:column="42">NULL<pos:position pos:line="56" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="48">size<pos:position pos:line="56" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="54">PROT_READ<pos:position pos:line="56" pos:column="63"/></name></expr></argument>,
					 <argument><expr><name pos:line="57" pos:column="42">MAP_PRIVATE<pos:position pos:line="57" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="55">fd<pos:position pos:line="57" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="59">0<pos:position pos:line="57" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="62"/></expr_stmt>

  <if pos:line="59" pos:column="3">if <condition pos:line="59" pos:column="6">(<expr><call><name pos:line="59" pos:column="7">__builtin_expect<pos:position pos:line="59" pos:column="23"/></name> <argument_list pos:line="59" pos:column="24">(<argument><expr><name pos:line="59" pos:column="25">data<pos:position pos:line="59" pos:column="29"/></name> <operator pos:line="59" pos:column="30">!=<pos:position pos:line="59" pos:column="32"/></operator> <operator pos:line="59" pos:column="33">(<pos:position pos:line="59" pos:column="34"/></operator>struct <name pos:line="59" pos:column="41">mo_file_header<pos:position pos:line="59" pos:column="55"/></name> <operator pos:line="59" pos:column="56">*<pos:position pos:line="59" pos:column="57"/></operator><operator pos:line="59" pos:column="57">)<pos:position pos:line="59" pos:column="58"/></operator> <operator pos:line="59" pos:column="59">-<pos:position pos:line="59" pos:column="60"/></operator><literal type="number" pos:line="59" pos:column="60">1<pos:position pos:line="59" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="63">1<pos:position pos:line="59" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="66"/></condition><then pos:line="59" pos:column="66">
    <block pos:line="60" pos:column="5">{
      <comment type="block" pos:line="61" pos:column="7">/* mmap() call was successful.  */</comment>
      <expr_stmt><expr><call><name pos:line="62" pos:column="7">close<pos:position pos:line="62" pos:column="12"/></name> <argument_list pos:line="62" pos:column="13">(<argument><expr><name pos:line="62" pos:column="14">fd<pos:position pos:line="62" pos:column="16"/></name></expr></argument>)<pos:position pos:line="62" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="63" pos:column="7">use_mmap<pos:position pos:line="63" pos:column="15"/></name> <operator pos:line="63" pos:column="16">=<pos:position pos:line="63" pos:column="17"/></operator> <literal type="number" pos:line="63" pos:column="18">1<pos:position pos:line="63" pos:column="19"/></literal></expr>;<pos:position pos:line="63" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if>
<cpp:endif pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">endif<pos:position pos:line="65" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="67" pos:column="3">/* If the data is not yet available (i.e. mmap'ed) we try to load
     it manually.  */</comment>
  <if pos:line="69" pos:column="3">if <condition pos:line="69" pos:column="6">(<expr><name pos:line="69" pos:column="7">data<pos:position pos:line="69" pos:column="11"/></name> <operator pos:line="69" pos:column="12">==<pos:position pos:line="69" pos:column="14"/></operator> <operator pos:line="69" pos:column="15">(<pos:position pos:line="69" pos:column="16"/></operator>struct <name pos:line="69" pos:column="23">mo_file_header<pos:position pos:line="69" pos:column="37"/></name> <operator pos:line="69" pos:column="38">*<pos:position pos:line="69" pos:column="39"/></operator><operator pos:line="69" pos:column="39">)<pos:position pos:line="69" pos:column="40"/></operator> <operator pos:line="69" pos:column="41">-<pos:position pos:line="69" pos:column="42"/></operator><literal type="number" pos:line="69" pos:column="42">1<pos:position pos:line="69" pos:column="43"/></literal></expr>)<pos:position pos:line="69" pos:column="44"/></condition><then pos:line="69" pos:column="44">
    <block pos:line="70" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="71" pos:column="7">size_t<pos:position pos:line="71" pos:column="13"/></name></type> <name pos:line="71" pos:column="14">to_read<pos:position pos:line="71" pos:column="21"/></name></decl>;<pos:position pos:line="71" pos:column="22"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="72" pos:column="7">char<pos:position pos:line="72" pos:column="11"/></name> <modifier pos:line="72" pos:column="12">*<pos:position pos:line="72" pos:column="13"/></modifier></type><name pos:line="72" pos:column="13">read_ptr<pos:position pos:line="72" pos:column="21"/></name></decl>;<pos:position pos:line="72" pos:column="22"/></decl_stmt>

      <expr_stmt><expr><name pos:line="74" pos:column="7">data<pos:position pos:line="74" pos:column="11"/></name> <operator pos:line="74" pos:column="12">=<pos:position pos:line="74" pos:column="13"/></operator> <operator pos:line="74" pos:column="14">(<pos:position pos:line="74" pos:column="15"/></operator>struct <name pos:line="74" pos:column="22">mo_file_header<pos:position pos:line="74" pos:column="36"/></name> <operator pos:line="74" pos:column="37">*<pos:position pos:line="74" pos:column="38"/></operator><operator pos:line="74" pos:column="38">)<pos:position pos:line="74" pos:column="39"/></operator> <call><name pos:line="74" pos:column="40">malloc<pos:position pos:line="74" pos:column="46"/></name> <argument_list pos:line="74" pos:column="47">(<argument><expr><name pos:line="74" pos:column="48">size<pos:position pos:line="74" pos:column="52"/></name></expr></argument>)<pos:position pos:line="74" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="54"/></expr_stmt>
      <if pos:line="75" pos:column="7">if <condition pos:line="75" pos:column="10">(<expr><name pos:line="75" pos:column="11">data<pos:position pos:line="75" pos:column="15"/></name> <operator pos:line="75" pos:column="16">==<pos:position pos:line="75" pos:column="18"/></operator> <name pos:line="75" pos:column="19">NULL<pos:position pos:line="75" pos:column="23"/></name></expr>)<pos:position pos:line="75" pos:column="24"/></condition><then pos:line="75" pos:column="24">
	<block type="pseudo"><return pos:line="76" pos:column="9">return;<pos:position pos:line="76" pos:column="16"/></return></block></then></if>

      <expr_stmt><expr><name pos:line="78" pos:column="7">to_read<pos:position pos:line="78" pos:column="14"/></name> <operator pos:line="78" pos:column="15">=<pos:position pos:line="78" pos:column="16"/></operator> <name pos:line="78" pos:column="17">size<pos:position pos:line="78" pos:column="21"/></name></expr>;<pos:position pos:line="78" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="79" pos:column="7">read_ptr<pos:position pos:line="79" pos:column="15"/></name> <operator pos:line="79" pos:column="16">=<pos:position pos:line="79" pos:column="17"/></operator> <operator pos:line="79" pos:column="18">(<pos:position pos:line="79" pos:column="19"/></operator><name pos:line="79" pos:column="19">char<pos:position pos:line="79" pos:column="23"/></name> <operator pos:line="79" pos:column="24">*<pos:position pos:line="79" pos:column="25"/></operator><operator pos:line="79" pos:column="25">)<pos:position pos:line="79" pos:column="26"/></operator> <name pos:line="79" pos:column="27">data<pos:position pos:line="79" pos:column="31"/></name></expr>;<pos:position pos:line="79" pos:column="32"/></expr_stmt>
      <do pos:line="80" pos:column="7">do
	<block pos:line="81" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="82" pos:column="11">long<pos:position pos:line="82" pos:column="15"/></name> <name pos:line="82" pos:column="16">int<pos:position pos:line="82" pos:column="19"/></name></type> <name pos:line="82" pos:column="20">nb<pos:position pos:line="82" pos:column="22"/></name> <init pos:line="82" pos:column="23">= <expr><operator pos:line="82" pos:column="25">(<pos:position pos:line="82" pos:column="26"/></operator><name pos:line="82" pos:column="26">long<pos:position pos:line="82" pos:column="30"/></name> <name pos:line="82" pos:column="31">int<pos:position pos:line="82" pos:column="34"/></name><operator pos:line="82" pos:column="34">)<pos:position pos:line="82" pos:column="35"/></operator> <call><name pos:line="82" pos:column="36">read<pos:position pos:line="82" pos:column="40"/></name> <argument_list pos:line="82" pos:column="41">(<argument><expr><name pos:line="82" pos:column="42">fd<pos:position pos:line="82" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="46">read_ptr<pos:position pos:line="82" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="56">to_read<pos:position pos:line="82" pos:column="63"/></name></expr></argument>)<pos:position pos:line="82" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="82" pos:column="65"/></decl_stmt>
	  <if pos:line="83" pos:column="11">if <condition pos:line="83" pos:column="14">(<expr><name pos:line="83" pos:column="15">nb<pos:position pos:line="83" pos:column="17"/></name> <operator pos:line="83" pos:column="18">&lt;=<pos:position pos:line="83" pos:column="23"/></operator> <literal type="number" pos:line="83" pos:column="21">0<pos:position pos:line="83" pos:column="22"/></literal></expr>)<pos:position pos:line="83" pos:column="23"/></condition><then pos:line="83" pos:column="23">
	    <block pos:line="84" pos:column="13">{
<cpp:ifdef pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">ifdef<pos:position pos:line="85" pos:column="7"/></cpp:directive> <name pos:line="85" pos:column="8">EINTR<pos:position pos:line="85" pos:column="13"/></name></cpp:ifdef>
	      <if pos:line="86" pos:column="15">if <condition pos:line="86" pos:column="18">(<expr><name pos:line="86" pos:column="19">nb<pos:position pos:line="86" pos:column="21"/></name> <operator pos:line="86" pos:column="22">==<pos:position pos:line="86" pos:column="24"/></operator> <operator pos:line="86" pos:column="25">-<pos:position pos:line="86" pos:column="26"/></operator><literal type="number" pos:line="86" pos:column="26">1<pos:position pos:line="86" pos:column="27"/></literal> <operator pos:line="86" pos:column="28">&amp;&amp;<pos:position pos:line="86" pos:column="38"/></operator> <name pos:line="86" pos:column="31">errno<pos:position pos:line="86" pos:column="36"/></name> <operator pos:line="86" pos:column="37">==<pos:position pos:line="86" pos:column="39"/></operator> <name pos:line="86" pos:column="40">EINTR<pos:position pos:line="86" pos:column="45"/></name></expr>)<pos:position pos:line="86" pos:column="46"/></condition><then pos:line="86" pos:column="46">
		<block type="pseudo"><continue pos:line="87" pos:column="17">continue;<pos:position pos:line="87" pos:column="26"/></continue></block></then></if>
<cpp:endif pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">endif<pos:position pos:line="88" pos:column="7"/></cpp:directive></cpp:endif>
	      <expr_stmt><expr><call><name pos:line="89" pos:column="15">close<pos:position pos:line="89" pos:column="20"/></name> <argument_list pos:line="89" pos:column="21">(<argument><expr><name pos:line="89" pos:column="22">fd<pos:position pos:line="89" pos:column="24"/></name></expr></argument>)<pos:position pos:line="89" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="26"/></expr_stmt>
	      <return pos:line="90" pos:column="15">return;<pos:position pos:line="90" pos:column="22"/></return>
	    }<pos:position pos:line="91" pos:column="14"/></block></then></if>
	  <expr_stmt><expr><name pos:line="92" pos:column="11">read_ptr<pos:position pos:line="92" pos:column="19"/></name> <operator pos:line="92" pos:column="20">+=<pos:position pos:line="92" pos:column="22"/></operator> <name pos:line="92" pos:column="23">nb<pos:position pos:line="92" pos:column="25"/></name></expr>;<pos:position pos:line="92" pos:column="26"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="93" pos:column="11">to_read<pos:position pos:line="93" pos:column="18"/></name> <operator pos:line="93" pos:column="19">-=<pos:position pos:line="93" pos:column="21"/></operator> <name pos:line="93" pos:column="22">nb<pos:position pos:line="93" pos:column="24"/></name></expr>;<pos:position pos:line="93" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="94" pos:column="10"/></block>
      while <condition pos:line="95" pos:column="13">(<expr><name pos:line="95" pos:column="14">to_read<pos:position pos:line="95" pos:column="21"/></name> <operator pos:line="95" pos:column="22">&gt;<pos:position pos:line="95" pos:column="26"/></operator> <literal type="number" pos:line="95" pos:column="24">0<pos:position pos:line="95" pos:column="25"/></literal></expr>)<pos:position pos:line="95" pos:column="26"/></condition>;<pos:position pos:line="95" pos:column="27"/></do>

      <expr_stmt><expr><call><name pos:line="97" pos:column="7">close<pos:position pos:line="97" pos:column="12"/></name> <argument_list pos:line="97" pos:column="13">(<argument><expr><name pos:line="97" pos:column="14">fd<pos:position pos:line="97" pos:column="16"/></name></expr></argument>)<pos:position pos:line="97" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="98" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="100" pos:column="3">/* Using the magic number we can test whether it really is a message
     catalog file.  */</comment>
  <if pos:line="102" pos:column="3">if <condition pos:line="102" pos:column="6">(<expr><call><name pos:line="102" pos:column="7">__builtin_expect<pos:position pos:line="102" pos:column="23"/></name> <argument_list pos:line="102" pos:column="24">(<argument><expr><name><name pos:line="102" pos:column="25">data<pos:position pos:line="102" pos:column="29"/></name><operator pos:line="102" pos:column="29">-&gt;<pos:position pos:line="102" pos:column="34"/></operator><name pos:line="102" pos:column="31">magic<pos:position pos:line="102" pos:column="36"/></name></name> <operator pos:line="102" pos:column="37">!=<pos:position pos:line="102" pos:column="39"/></operator> <name pos:line="102" pos:column="40">_MAGIC<pos:position pos:line="102" pos:column="46"/></name> <operator pos:line="102" pos:column="47">&amp;&amp;<pos:position pos:line="102" pos:column="57"/></operator> <name><name pos:line="102" pos:column="50">data<pos:position pos:line="102" pos:column="54"/></name><operator pos:line="102" pos:column="54">-&gt;<pos:position pos:line="102" pos:column="59"/></operator><name pos:line="102" pos:column="56">magic<pos:position pos:line="102" pos:column="61"/></name></name> <operator pos:line="102" pos:column="62">!=<pos:position pos:line="102" pos:column="64"/></operator> <name pos:line="102" pos:column="65">_MAGIC_SWAPPED<pos:position pos:line="102" pos:column="79"/></name></expr></argument>,
			<argument><expr><literal type="number" pos:line="103" pos:column="25">0<pos:position pos:line="103" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="103" pos:column="28"/></condition><then pos:line="103" pos:column="28">
    <block pos:line="104" pos:column="5">{
      <comment type="block" pos:line="105" pos:column="7">/* The magic number is wrong: not a message catalog file.  */</comment>
<cpp:ifdef pos:line="106" pos:column="1">#<cpp:directive pos:line="106" pos:column="2">ifdef<pos:position pos:line="106" pos:column="7"/></cpp:directive> <name pos:line="106" pos:column="8">HAVE_MMAP<pos:position pos:line="106" pos:column="17"/></name></cpp:ifdef>
      <if pos:line="107" pos:column="7">if <condition pos:line="107" pos:column="10">(<expr><name pos:line="107" pos:column="11">use_mmap<pos:position pos:line="107" pos:column="19"/></name></expr>)<pos:position pos:line="107" pos:column="20"/></condition><then pos:line="107" pos:column="20">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="108" pos:column="9">munmap<pos:position pos:line="108" pos:column="15"/></name> <argument_list pos:line="108" pos:column="16">(<argument><expr><operator pos:line="108" pos:column="17">(<pos:position pos:line="108" pos:column="18"/></operator><name pos:line="108" pos:column="18">caddr_t<pos:position pos:line="108" pos:column="25"/></name><operator pos:line="108" pos:column="25">)<pos:position pos:line="108" pos:column="26"/></operator> <name pos:line="108" pos:column="27">data<pos:position pos:line="108" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="33">size<pos:position pos:line="108" pos:column="37"/></name></expr></argument>)<pos:position pos:line="108" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="39"/></expr_stmt></block></then>
      <else pos:line="109" pos:column="7">else
<cpp:endif pos:line="110" pos:column="1">#<cpp:directive pos:line="110" pos:column="2">endif<pos:position pos:line="110" pos:column="7"/></cpp:directive></cpp:endif>
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="111" pos:column="9">free<pos:position pos:line="111" pos:column="13"/></name> <argument_list pos:line="111" pos:column="14">(<argument><expr><name pos:line="111" pos:column="15">data<pos:position pos:line="111" pos:column="19"/></name></expr></argument>)<pos:position pos:line="111" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="21"/></expr_stmt></block></else></if>
      <return pos:line="112" pos:column="7">return;<pos:position pos:line="112" pos:column="14"/></return>
    }<pos:position pos:line="113" pos:column="6"/></block></then></if>

  <expr_stmt><expr><name pos:line="115" pos:column="3">domain<pos:position pos:line="115" pos:column="9"/></name> <operator pos:line="115" pos:column="10">=<pos:position pos:line="115" pos:column="11"/></operator> <operator pos:line="115" pos:column="12">(<pos:position pos:line="115" pos:column="13"/></operator>struct <name pos:line="115" pos:column="20">loaded_domain<pos:position pos:line="115" pos:column="33"/></name> <operator pos:line="115" pos:column="34">*<pos:position pos:line="115" pos:column="35"/></operator><operator pos:line="115" pos:column="35">)<pos:position pos:line="115" pos:column="36"/></operator> <call><name pos:line="115" pos:column="37">malloc<pos:position pos:line="115" pos:column="43"/></name> <argument_list pos:line="115" pos:column="44">(<argument><expr><sizeof pos:line="115" pos:column="45">sizeof <argument_list pos:line="115" pos:column="52">(<argument><expr pos:line="115" pos:column="53">struct <name pos:line="115" pos:column="60">loaded_domain<pos:position pos:line="115" pos:column="73"/></name></expr></argument>)<pos:position pos:line="115" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="115" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="76"/></expr_stmt>
  <if pos:line="116" pos:column="3">if <condition pos:line="116" pos:column="6">(<expr><name pos:line="116" pos:column="7">domain<pos:position pos:line="116" pos:column="13"/></name> <operator pos:line="116" pos:column="14">==<pos:position pos:line="116" pos:column="16"/></operator> <name pos:line="116" pos:column="17">NULL<pos:position pos:line="116" pos:column="21"/></name></expr>)<pos:position pos:line="116" pos:column="22"/></condition><then pos:line="116" pos:column="22">
    <block type="pseudo"><return pos:line="117" pos:column="5">return;<pos:position pos:line="117" pos:column="12"/></return></block></then></if>
  <expr_stmt><expr><name><name pos:line="118" pos:column="3">domain_file<pos:position pos:line="118" pos:column="14"/></name><operator pos:line="118" pos:column="14">-&gt;<pos:position pos:line="118" pos:column="19"/></operator><name pos:line="118" pos:column="16">data<pos:position pos:line="118" pos:column="20"/></name></name> <operator pos:line="118" pos:column="21">=<pos:position pos:line="118" pos:column="22"/></operator> <name pos:line="118" pos:column="23">domain<pos:position pos:line="118" pos:column="29"/></name></expr>;<pos:position pos:line="118" pos:column="30"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="120" pos:column="3">domain<pos:position pos:line="120" pos:column="9"/></name><operator pos:line="120" pos:column="9">-&gt;<pos:position pos:line="120" pos:column="14"/></operator><name pos:line="120" pos:column="11">data<pos:position pos:line="120" pos:column="15"/></name></name> <operator pos:line="120" pos:column="16">=<pos:position pos:line="120" pos:column="17"/></operator> <operator pos:line="120" pos:column="18">(<pos:position pos:line="120" pos:column="19"/></operator><name pos:line="120" pos:column="19">char<pos:position pos:line="120" pos:column="23"/></name> <operator pos:line="120" pos:column="24">*<pos:position pos:line="120" pos:column="25"/></operator><operator pos:line="120" pos:column="25">)<pos:position pos:line="120" pos:column="26"/></operator> <name pos:line="120" pos:column="27">data<pos:position pos:line="120" pos:column="31"/></name></expr>;<pos:position pos:line="120" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="121" pos:column="3">domain<pos:position pos:line="121" pos:column="9"/></name><operator pos:line="121" pos:column="9">-&gt;<pos:position pos:line="121" pos:column="14"/></operator><name pos:line="121" pos:column="11">use_mmap<pos:position pos:line="121" pos:column="19"/></name></name> <operator pos:line="121" pos:column="20">=<pos:position pos:line="121" pos:column="21"/></operator> <name pos:line="121" pos:column="22">use_mmap<pos:position pos:line="121" pos:column="30"/></name></expr>;<pos:position pos:line="121" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="122" pos:column="3">domain<pos:position pos:line="122" pos:column="9"/></name><operator pos:line="122" pos:column="9">-&gt;<pos:position pos:line="122" pos:column="14"/></operator><name pos:line="122" pos:column="11">mmap_size<pos:position pos:line="122" pos:column="20"/></name></name> <operator pos:line="122" pos:column="21">=<pos:position pos:line="122" pos:column="22"/></operator> <name pos:line="122" pos:column="23">size<pos:position pos:line="122" pos:column="27"/></name></expr>;<pos:position pos:line="122" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="123" pos:column="3">domain<pos:position pos:line="123" pos:column="9"/></name><operator pos:line="123" pos:column="9">-&gt;<pos:position pos:line="123" pos:column="14"/></operator><name pos:line="123" pos:column="11">must_swap<pos:position pos:line="123" pos:column="20"/></name></name> <operator pos:line="123" pos:column="21">=<pos:position pos:line="123" pos:column="22"/></operator> <name><name pos:line="123" pos:column="23">data<pos:position pos:line="123" pos:column="27"/></name><operator pos:line="123" pos:column="27">-&gt;<pos:position pos:line="123" pos:column="32"/></operator><name pos:line="123" pos:column="29">magic<pos:position pos:line="123" pos:column="34"/></name></name> <operator pos:line="123" pos:column="35">!=<pos:position pos:line="123" pos:column="37"/></operator> <name pos:line="123" pos:column="38">_MAGIC<pos:position pos:line="123" pos:column="44"/></name></expr>;<pos:position pos:line="123" pos:column="45"/></expr_stmt>

  <comment type="block" pos:line="125" pos:column="3">/* Fill in the information about the available tables.  */</comment>
  <switch pos:line="126" pos:column="3">switch <condition pos:line="126" pos:column="10">(<expr><call><name pos:line="126" pos:column="11">W<pos:position pos:line="126" pos:column="12"/></name> <argument_list pos:line="126" pos:column="13">(<argument><expr><name><name pos:line="126" pos:column="14">domain<pos:position pos:line="126" pos:column="20"/></name><operator pos:line="126" pos:column="20">-&gt;<pos:position pos:line="126" pos:column="25"/></operator><name pos:line="126" pos:column="22">must_swap<pos:position pos:line="126" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="126" pos:column="33">data<pos:position pos:line="126" pos:column="37"/></name><operator pos:line="126" pos:column="37">-&gt;<pos:position pos:line="126" pos:column="42"/></operator><name pos:line="126" pos:column="39">revision<pos:position pos:line="126" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="126" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="126" pos:column="49"/></condition>
    <block pos:line="127" pos:column="5">{
    <case pos:line="128" pos:column="5">case <expr><literal type="number" pos:line="128" pos:column="10">0<pos:position pos:line="128" pos:column="11"/></literal></expr>:<pos:position pos:line="128" pos:column="12"/></case>
      <expr_stmt><expr><name><name pos:line="129" pos:column="7">domain<pos:position pos:line="129" pos:column="13"/></name><operator pos:line="129" pos:column="13">-&gt;<pos:position pos:line="129" pos:column="18"/></operator><name pos:line="129" pos:column="15">nstrings<pos:position pos:line="129" pos:column="23"/></name></name> <operator pos:line="129" pos:column="24">=<pos:position pos:line="129" pos:column="25"/></operator> <call><name pos:line="129" pos:column="26">W<pos:position pos:line="129" pos:column="27"/></name> <argument_list pos:line="129" pos:column="28">(<argument><expr><name><name pos:line="129" pos:column="29">domain<pos:position pos:line="129" pos:column="35"/></name><operator pos:line="129" pos:column="35">-&gt;<pos:position pos:line="129" pos:column="40"/></operator><name pos:line="129" pos:column="37">must_swap<pos:position pos:line="129" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="48">data<pos:position pos:line="129" pos:column="52"/></name><operator pos:line="129" pos:column="52">-&gt;<pos:position pos:line="129" pos:column="57"/></operator><name pos:line="129" pos:column="54">nstrings<pos:position pos:line="129" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="129" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="130" pos:column="7">domain<pos:position pos:line="130" pos:column="13"/></name><operator pos:line="130" pos:column="13">-&gt;<pos:position pos:line="130" pos:column="18"/></operator><name pos:line="130" pos:column="15">orig_tab<pos:position pos:line="130" pos:column="23"/></name></name> <operator pos:line="130" pos:column="24">=<pos:position pos:line="130" pos:column="25"/></operator> <operator pos:line="130" pos:column="26">(<pos:position pos:line="130" pos:column="27"/></operator>struct <name pos:line="130" pos:column="34">string_desc<pos:position pos:line="130" pos:column="45"/></name> <operator pos:line="130" pos:column="46">*<pos:position pos:line="130" pos:column="47"/></operator><operator pos:line="130" pos:column="47">)<pos:position pos:line="130" pos:column="48"/></operator>
	<operator pos:line="131" pos:column="9">(<pos:position pos:line="131" pos:column="10"/></operator><operator pos:line="131" pos:column="10">(<pos:position pos:line="131" pos:column="11"/></operator><name pos:line="131" pos:column="11">char<pos:position pos:line="131" pos:column="15"/></name> <operator pos:line="131" pos:column="16">*<pos:position pos:line="131" pos:column="17"/></operator><operator pos:line="131" pos:column="17">)<pos:position pos:line="131" pos:column="18"/></operator> <name pos:line="131" pos:column="19">data<pos:position pos:line="131" pos:column="23"/></name> <operator pos:line="131" pos:column="24">+<pos:position pos:line="131" pos:column="25"/></operator> <call><name pos:line="131" pos:column="26">W<pos:position pos:line="131" pos:column="27"/></name> <argument_list pos:line="131" pos:column="28">(<argument><expr><name><name pos:line="131" pos:column="29">domain<pos:position pos:line="131" pos:column="35"/></name><operator pos:line="131" pos:column="35">-&gt;<pos:position pos:line="131" pos:column="40"/></operator><name pos:line="131" pos:column="37">must_swap<pos:position pos:line="131" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="131" pos:column="48">data<pos:position pos:line="131" pos:column="52"/></name><operator pos:line="131" pos:column="52">-&gt;<pos:position pos:line="131" pos:column="57"/></operator><name pos:line="131" pos:column="54">orig_tab_offset<pos:position pos:line="131" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="131" pos:column="70"/></argument_list></call><operator pos:line="131" pos:column="70">)<pos:position pos:line="131" pos:column="71"/></operator></expr>;<pos:position pos:line="131" pos:column="72"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="132" pos:column="7">domain<pos:position pos:line="132" pos:column="13"/></name><operator pos:line="132" pos:column="13">-&gt;<pos:position pos:line="132" pos:column="18"/></operator><name pos:line="132" pos:column="15">trans_tab<pos:position pos:line="132" pos:column="24"/></name></name> <operator pos:line="132" pos:column="25">=<pos:position pos:line="132" pos:column="26"/></operator> <operator pos:line="132" pos:column="27">(<pos:position pos:line="132" pos:column="28"/></operator>struct <name pos:line="132" pos:column="35">string_desc<pos:position pos:line="132" pos:column="46"/></name> <operator pos:line="132" pos:column="47">*<pos:position pos:line="132" pos:column="48"/></operator><operator pos:line="132" pos:column="48">)<pos:position pos:line="132" pos:column="49"/></operator>
	<operator pos:line="133" pos:column="9">(<pos:position pos:line="133" pos:column="10"/></operator><operator pos:line="133" pos:column="10">(<pos:position pos:line="133" pos:column="11"/></operator><name pos:line="133" pos:column="11">char<pos:position pos:line="133" pos:column="15"/></name> <operator pos:line="133" pos:column="16">*<pos:position pos:line="133" pos:column="17"/></operator><operator pos:line="133" pos:column="17">)<pos:position pos:line="133" pos:column="18"/></operator> <name pos:line="133" pos:column="19">data<pos:position pos:line="133" pos:column="23"/></name> <operator pos:line="133" pos:column="24">+<pos:position pos:line="133" pos:column="25"/></operator> <call><name pos:line="133" pos:column="26">W<pos:position pos:line="133" pos:column="27"/></name> <argument_list pos:line="133" pos:column="28">(<argument><expr><name><name pos:line="133" pos:column="29">domain<pos:position pos:line="133" pos:column="35"/></name><operator pos:line="133" pos:column="35">-&gt;<pos:position pos:line="133" pos:column="40"/></operator><name pos:line="133" pos:column="37">must_swap<pos:position pos:line="133" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="133" pos:column="48">data<pos:position pos:line="133" pos:column="52"/></name><operator pos:line="133" pos:column="52">-&gt;<pos:position pos:line="133" pos:column="57"/></operator><name pos:line="133" pos:column="54">trans_tab_offset<pos:position pos:line="133" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="133" pos:column="71"/></argument_list></call><operator pos:line="133" pos:column="71">)<pos:position pos:line="133" pos:column="72"/></operator></expr>;<pos:position pos:line="133" pos:column="73"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="134" pos:column="7">domain<pos:position pos:line="134" pos:column="13"/></name><operator pos:line="134" pos:column="13">-&gt;<pos:position pos:line="134" pos:column="18"/></operator><name pos:line="134" pos:column="15">hash_size<pos:position pos:line="134" pos:column="24"/></name></name> <operator pos:line="134" pos:column="25">=<pos:position pos:line="134" pos:column="26"/></operator> <call><name pos:line="134" pos:column="27">W<pos:position pos:line="134" pos:column="28"/></name> <argument_list pos:line="134" pos:column="29">(<argument><expr><name><name pos:line="134" pos:column="30">domain<pos:position pos:line="134" pos:column="36"/></name><operator pos:line="134" pos:column="36">-&gt;<pos:position pos:line="134" pos:column="41"/></operator><name pos:line="134" pos:column="38">must_swap<pos:position pos:line="134" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="134" pos:column="49">data<pos:position pos:line="134" pos:column="53"/></name><operator pos:line="134" pos:column="53">-&gt;<pos:position pos:line="134" pos:column="58"/></operator><name pos:line="134" pos:column="55">hash_tab_size<pos:position pos:line="134" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="134" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="135" pos:column="7">domain<pos:position pos:line="135" pos:column="13"/></name><operator pos:line="135" pos:column="13">-&gt;<pos:position pos:line="135" pos:column="18"/></operator><name pos:line="135" pos:column="15">hash_tab<pos:position pos:line="135" pos:column="23"/></name></name> <operator pos:line="135" pos:column="24">=<pos:position pos:line="135" pos:column="25"/></operator> <operator pos:line="135" pos:column="26">(<pos:position pos:line="135" pos:column="27"/></operator><name pos:line="135" pos:column="27">nls_uint32<pos:position pos:line="135" pos:column="37"/></name> <operator pos:line="135" pos:column="38">*<pos:position pos:line="135" pos:column="39"/></operator><operator pos:line="135" pos:column="39">)<pos:position pos:line="135" pos:column="40"/></operator>
	<operator pos:line="136" pos:column="9">(<pos:position pos:line="136" pos:column="10"/></operator><operator pos:line="136" pos:column="10">(<pos:position pos:line="136" pos:column="11"/></operator><name pos:line="136" pos:column="11">char<pos:position pos:line="136" pos:column="15"/></name> <operator pos:line="136" pos:column="16">*<pos:position pos:line="136" pos:column="17"/></operator><operator pos:line="136" pos:column="17">)<pos:position pos:line="136" pos:column="18"/></operator> <name pos:line="136" pos:column="19">data<pos:position pos:line="136" pos:column="23"/></name> <operator pos:line="136" pos:column="24">+<pos:position pos:line="136" pos:column="25"/></operator> <call><name pos:line="136" pos:column="26">W<pos:position pos:line="136" pos:column="27"/></name> <argument_list pos:line="136" pos:column="28">(<argument><expr><name><name pos:line="136" pos:column="29">domain<pos:position pos:line="136" pos:column="35"/></name><operator pos:line="136" pos:column="35">-&gt;<pos:position pos:line="136" pos:column="40"/></operator><name pos:line="136" pos:column="37">must_swap<pos:position pos:line="136" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="136" pos:column="48">data<pos:position pos:line="136" pos:column="52"/></name><operator pos:line="136" pos:column="52">-&gt;<pos:position pos:line="136" pos:column="57"/></operator><name pos:line="136" pos:column="54">hash_tab_offset<pos:position pos:line="136" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="136" pos:column="70"/></argument_list></call><operator pos:line="136" pos:column="70">)<pos:position pos:line="136" pos:column="71"/></operator></expr>;<pos:position pos:line="136" pos:column="72"/></expr_stmt>
      <break pos:line="137" pos:column="7">break;<pos:position pos:line="137" pos:column="13"/></break>
    <default pos:line="138" pos:column="5">default:<pos:position pos:line="138" pos:column="13"/></default>
      <comment type="block" pos:line="139" pos:column="7">/* This is an invalid revision.  */</comment>
<cpp:ifdef pos:line="140" pos:column="1">#<cpp:directive pos:line="140" pos:column="2">ifdef<pos:position pos:line="140" pos:column="7"/></cpp:directive> <name pos:line="140" pos:column="8">HAVE_MMAP<pos:position pos:line="140" pos:column="17"/></name></cpp:ifdef>
      <if pos:line="141" pos:column="7">if <condition pos:line="141" pos:column="10">(<expr><name pos:line="141" pos:column="11">use_mmap<pos:position pos:line="141" pos:column="19"/></name></expr>)<pos:position pos:line="141" pos:column="20"/></condition><then pos:line="141" pos:column="20">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="142" pos:column="9">munmap<pos:position pos:line="142" pos:column="15"/></name> <argument_list pos:line="142" pos:column="16">(<argument><expr><operator pos:line="142" pos:column="17">(<pos:position pos:line="142" pos:column="18"/></operator><name pos:line="142" pos:column="18">caddr_t<pos:position pos:line="142" pos:column="25"/></name><operator pos:line="142" pos:column="25">)<pos:position pos:line="142" pos:column="26"/></operator> <name pos:line="142" pos:column="27">data<pos:position pos:line="142" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="33">size<pos:position pos:line="142" pos:column="37"/></name></expr></argument>)<pos:position pos:line="142" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="39"/></expr_stmt></block></then>
      <else pos:line="143" pos:column="7">else
<cpp:endif pos:line="144" pos:column="1">#<cpp:directive pos:line="144" pos:column="2">endif<pos:position pos:line="144" pos:column="7"/></cpp:directive></cpp:endif>
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="145" pos:column="9">free<pos:position pos:line="145" pos:column="13"/></name> <argument_list pos:line="145" pos:column="14">(<argument><expr><name pos:line="145" pos:column="15">data<pos:position pos:line="145" pos:column="19"/></name></expr></argument>)<pos:position pos:line="145" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="21"/></expr_stmt></block></else></if>
      <expr_stmt><expr><call><name pos:line="146" pos:column="7">free<pos:position pos:line="146" pos:column="11"/></name> <argument_list pos:line="146" pos:column="12">(<argument><expr><name pos:line="146" pos:column="13">domain<pos:position pos:line="146" pos:column="19"/></name></expr></argument>)<pos:position pos:line="146" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="147" pos:column="7">domain_file<pos:position pos:line="147" pos:column="18"/></name><operator pos:line="147" pos:column="18">-&gt;<pos:position pos:line="147" pos:column="23"/></operator><name pos:line="147" pos:column="20">data<pos:position pos:line="147" pos:column="24"/></name></name> <operator pos:line="147" pos:column="25">=<pos:position pos:line="147" pos:column="26"/></operator> <name pos:line="147" pos:column="27">NULL<pos:position pos:line="147" pos:column="31"/></name></expr>;<pos:position pos:line="147" pos:column="32"/></expr_stmt>
      <return pos:line="148" pos:column="7">return;<pos:position pos:line="148" pos:column="14"/></return>
    }<pos:position pos:line="149" pos:column="6"/></block></switch>

  <comment type="block" pos:line="151" pos:column="3">/* Now initialize the character set converter from the character set
     the file is encoded with (found in the header entry) to the domain's
     specified character set or the locale's character set.  */</comment>
  <expr_stmt><expr><name pos:line="154" pos:column="3">nullentry<pos:position pos:line="154" pos:column="12"/></name> <operator pos:line="154" pos:column="13">=<pos:position pos:line="154" pos:column="14"/></operator> <call><name pos:line="154" pos:column="15">_nl_init_domain_conv<pos:position pos:line="154" pos:column="35"/></name> <argument_list pos:line="154" pos:column="36">(<argument><expr><name pos:line="154" pos:column="37">domain_file<pos:position pos:line="154" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="50">domain<pos:position pos:line="154" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="58">domainbinding<pos:position pos:line="154" pos:column="71"/></name></expr></argument>)<pos:position pos:line="154" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="73"/></expr_stmt>

  <comment type="block" pos:line="156" pos:column="3">/* Also look for a plural specification.  */</comment>
  <if pos:line="157" pos:column="3">if <condition pos:line="157" pos:column="6">(<expr><name pos:line="157" pos:column="7">nullentry<pos:position pos:line="157" pos:column="16"/></name> <operator pos:line="157" pos:column="17">!=<pos:position pos:line="157" pos:column="19"/></operator> <name pos:line="157" pos:column="20">NULL<pos:position pos:line="157" pos:column="24"/></name></expr>)<pos:position pos:line="157" pos:column="25"/></condition><then pos:line="157" pos:column="25">
    <block pos:line="158" pos:column="5">{
      <decl_stmt><decl><type><specifier pos:line="159" pos:column="7">const<pos:position pos:line="159" pos:column="12"/></specifier> <name pos:line="159" pos:column="13">char<pos:position pos:line="159" pos:column="17"/></name> <modifier pos:line="159" pos:column="18">*<pos:position pos:line="159" pos:column="19"/></modifier></type><name pos:line="159" pos:column="19">plural<pos:position pos:line="159" pos:column="25"/></name></decl>;<pos:position pos:line="159" pos:column="26"/></decl_stmt>
      <decl_stmt><decl><type><specifier pos:line="160" pos:column="7">const<pos:position pos:line="160" pos:column="12"/></specifier> <name pos:line="160" pos:column="13">char<pos:position pos:line="160" pos:column="17"/></name> <modifier pos:line="160" pos:column="18">*<pos:position pos:line="160" pos:column="19"/></modifier></type><name pos:line="160" pos:column="19">nplurals<pos:position pos:line="160" pos:column="27"/></name></decl>;<pos:position pos:line="160" pos:column="28"/></decl_stmt>

      <expr_stmt><expr><name pos:line="162" pos:column="7">plural<pos:position pos:line="162" pos:column="13"/></name> <operator pos:line="162" pos:column="14">=<pos:position pos:line="162" pos:column="15"/></operator> <call><name pos:line="162" pos:column="16">strstr<pos:position pos:line="162" pos:column="22"/></name> <argument_list pos:line="162" pos:column="23">(<argument><expr><name pos:line="162" pos:column="24">nullentry<pos:position pos:line="162" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="162" pos:column="35">"plural="<pos:position pos:line="162" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="162" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><name pos:line="163" pos:column="7">nplurals<pos:position pos:line="163" pos:column="15"/></name> <operator pos:line="163" pos:column="16">=<pos:position pos:line="163" pos:column="17"/></operator> <call><name pos:line="163" pos:column="18">strstr<pos:position pos:line="163" pos:column="24"/></name> <argument_list pos:line="163" pos:column="25">(<argument><expr><name pos:line="163" pos:column="26">nullentry<pos:position pos:line="163" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="163" pos:column="37">"nplurals="<pos:position pos:line="163" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="163" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="50"/></expr_stmt>
      <if pos:line="164" pos:column="7">if <condition pos:line="164" pos:column="10">(<expr><name pos:line="164" pos:column="11">plural<pos:position pos:line="164" pos:column="17"/></name> <operator pos:line="164" pos:column="18">==<pos:position pos:line="164" pos:column="20"/></operator> <name pos:line="164" pos:column="21">NULL<pos:position pos:line="164" pos:column="25"/></name> <operator pos:line="164" pos:column="26">||<pos:position pos:line="164" pos:column="28"/></operator> <name pos:line="164" pos:column="29">nplurals<pos:position pos:line="164" pos:column="37"/></name> <operator pos:line="164" pos:column="38">==<pos:position pos:line="164" pos:column="40"/></operator> <name pos:line="164" pos:column="41">NULL<pos:position pos:line="164" pos:column="45"/></name></expr>)<pos:position pos:line="164" pos:column="46"/></condition><then pos:line="164" pos:column="46">
	<block type="pseudo"><goto pos:line="165" pos:column="9">goto <name pos:line="165" pos:column="14">no_plural<pos:position pos:line="165" pos:column="23"/></name>;<pos:position pos:line="165" pos:column="24"/></goto></block></then>
      <else pos:line="166" pos:column="7">else
	<block pos:line="167" pos:column="9">{
	  <comment type="block" pos:line="168" pos:column="11">/* First get the number.  */</comment>
	  <decl_stmt><decl><type><name pos:line="169" pos:column="11">char<pos:position pos:line="169" pos:column="15"/></name> <modifier pos:line="169" pos:column="16">*<pos:position pos:line="169" pos:column="17"/></modifier></type><name pos:line="169" pos:column="17">endp<pos:position pos:line="169" pos:column="21"/></name></decl>;<pos:position pos:line="169" pos:column="22"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="170" pos:column="11">unsigned<pos:position pos:line="170" pos:column="19"/></name> <name pos:line="170" pos:column="20">long<pos:position pos:line="170" pos:column="24"/></name> <name pos:line="170" pos:column="25">int<pos:position pos:line="170" pos:column="28"/></name></type> <name pos:line="170" pos:column="29">n<pos:position pos:line="170" pos:column="30"/></name></decl>;<pos:position pos:line="170" pos:column="31"/></decl_stmt>
	  <decl_stmt><decl><type><name><name pos:line="171" pos:column="11">struct<pos:position pos:line="171" pos:column="17"/></name> <name pos:line="171" pos:column="18">parse_args<pos:position pos:line="171" pos:column="28"/></name></name></type> <name pos:line="171" pos:column="29">args<pos:position pos:line="171" pos:column="33"/></name></decl>;<pos:position pos:line="171" pos:column="34"/></decl_stmt>

	  <expr_stmt><expr><name pos:line="173" pos:column="11">nplurals<pos:position pos:line="173" pos:column="19"/></name> <operator pos:line="173" pos:column="20">+=<pos:position pos:line="173" pos:column="22"/></operator> <literal type="number" pos:line="173" pos:column="23">9<pos:position pos:line="173" pos:column="24"/></literal></expr>;<pos:position pos:line="173" pos:column="25"/></expr_stmt>
	  <while pos:line="174" pos:column="11">while <condition pos:line="174" pos:column="17">(<expr><operator pos:line="174" pos:column="18">*<pos:position pos:line="174" pos:column="19"/></operator><name pos:line="174" pos:column="19">nplurals<pos:position pos:line="174" pos:column="27"/></name> <operator pos:line="174" pos:column="28">!=<pos:position pos:line="174" pos:column="30"/></operator> <literal type="char" pos:line="174" pos:column="31">'\0'<pos:position pos:line="174" pos:column="35"/></literal> <operator pos:line="174" pos:column="36">&amp;&amp;<pos:position pos:line="174" pos:column="46"/></operator> <call><name pos:line="174" pos:column="39">isspace<pos:position pos:line="174" pos:column="46"/></name> <argument_list pos:line="174" pos:column="47">(<argument><expr><operator pos:line="174" pos:column="48">(<pos:position pos:line="174" pos:column="49"/></operator><name pos:line="174" pos:column="49">unsigned<pos:position pos:line="174" pos:column="57"/></name> <name pos:line="174" pos:column="58">char<pos:position pos:line="174" pos:column="62"/></name><operator pos:line="174" pos:column="62">)<pos:position pos:line="174" pos:column="63"/></operator> <operator pos:line="174" pos:column="64">*<pos:position pos:line="174" pos:column="65"/></operator><name pos:line="174" pos:column="65">nplurals<pos:position pos:line="174" pos:column="73"/></name></expr></argument>)<pos:position pos:line="174" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="174" pos:column="75"/></condition>
	    <block type="pseudo"><expr_stmt><expr><operator pos:line="175" pos:column="13">++<pos:position pos:line="175" pos:column="15"/></operator><name pos:line="175" pos:column="15">nplurals<pos:position pos:line="175" pos:column="23"/></name></expr>;<pos:position pos:line="175" pos:column="24"/></expr_stmt></block></while>
<cpp:if pos:line="176" pos:column="1">#<cpp:directive pos:line="176" pos:column="2">if<pos:position pos:line="176" pos:column="4"/></cpp:directive> <expr><name pos:line="176" pos:column="5">defined<pos:position pos:line="176" pos:column="12"/></name> <name pos:line="176" pos:column="13">HAVE_STRTOUL<pos:position pos:line="176" pos:column="25"/></name> <operator pos:line="176" pos:column="26">||<pos:position pos:line="176" pos:column="28"/></operator> <name pos:line="176" pos:column="29">defined<pos:position pos:line="176" pos:column="36"/></name> <name pos:line="176" pos:column="37">_LIBC<pos:position pos:line="176" pos:column="42"/></name></expr></cpp:if>
	  <expr_stmt><expr><name pos:line="177" pos:column="11">n<pos:position pos:line="177" pos:column="12"/></name> <operator pos:line="177" pos:column="13">=<pos:position pos:line="177" pos:column="14"/></operator> <call><name pos:line="177" pos:column="15">strtoul<pos:position pos:line="177" pos:column="22"/></name> <argument_list pos:line="177" pos:column="23">(<argument><expr><name pos:line="177" pos:column="24">nplurals<pos:position pos:line="177" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="177" pos:column="34">&amp;<pos:position pos:line="177" pos:column="39"/></operator><name pos:line="177" pos:column="35">endp<pos:position pos:line="177" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="177" pos:column="41">10<pos:position pos:line="177" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="177" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="45"/></expr_stmt>
<cpp:else pos:line="178" pos:column="1">#<cpp:directive pos:line="178" pos:column="2">else<pos:position pos:line="178" pos:column="6"/></cpp:directive></cpp:else>
	  <for pos:line="179" pos:column="11">for <control pos:line="179" pos:column="15">(<init><expr><name pos:line="179" pos:column="16">endp<pos:position pos:line="179" pos:column="20"/></name> <operator pos:line="179" pos:column="21">=<pos:position pos:line="179" pos:column="22"/></operator> <name pos:line="179" pos:column="23">nplurals<pos:position pos:line="179" pos:column="31"/></name></expr><operator pos:line="179" pos:column="31">,<pos:position pos:line="179" pos:column="32"/></operator> <expr><name pos:line="179" pos:column="33">n<pos:position pos:line="179" pos:column="34"/></name> <operator pos:line="179" pos:column="35">=<pos:position pos:line="179" pos:column="36"/></operator> <literal type="number" pos:line="179" pos:column="37">0<pos:position pos:line="179" pos:column="38"/></literal></expr>;<pos:position pos:line="179" pos:column="39"/></init> <condition><expr><operator pos:line="179" pos:column="40">*<pos:position pos:line="179" pos:column="41"/></operator><name pos:line="179" pos:column="41">endp<pos:position pos:line="179" pos:column="45"/></name> <operator pos:line="179" pos:column="46">&gt;=<pos:position pos:line="179" pos:column="51"/></operator> <literal type="char" pos:line="179" pos:column="49">'0'<pos:position pos:line="179" pos:column="52"/></literal> <operator pos:line="179" pos:column="53">&amp;&amp;<pos:position pos:line="179" pos:column="63"/></operator> <operator pos:line="179" pos:column="56">*<pos:position pos:line="179" pos:column="57"/></operator><name pos:line="179" pos:column="57">endp<pos:position pos:line="179" pos:column="61"/></name> <operator pos:line="179" pos:column="62">&lt;=<pos:position pos:line="179" pos:column="67"/></operator> <literal type="char" pos:line="179" pos:column="65">'9'<pos:position pos:line="179" pos:column="68"/></literal></expr>;<pos:position pos:line="179" pos:column="69"/></condition> <incr><expr><name pos:line="179" pos:column="70">endp<pos:position pos:line="179" pos:column="74"/></name><operator pos:line="179" pos:column="74">++<pos:position pos:line="179" pos:column="76"/></operator></expr></incr>)<pos:position pos:line="179" pos:column="77"/></control>
	    <block type="pseudo"><expr_stmt><expr><name pos:line="180" pos:column="13">n<pos:position pos:line="180" pos:column="14"/></name> <operator pos:line="180" pos:column="15">=<pos:position pos:line="180" pos:column="16"/></operator> <name pos:line="180" pos:column="17">n<pos:position pos:line="180" pos:column="18"/></name> <operator pos:line="180" pos:column="19">*<pos:position pos:line="180" pos:column="20"/></operator> <literal type="number" pos:line="180" pos:column="21">10<pos:position pos:line="180" pos:column="23"/></literal> <operator pos:line="180" pos:column="24">+<pos:position pos:line="180" pos:column="25"/></operator> <operator pos:line="180" pos:column="26">(<pos:position pos:line="180" pos:column="27"/></operator><operator pos:line="180" pos:column="27">*<pos:position pos:line="180" pos:column="28"/></operator><name pos:line="180" pos:column="28">endp<pos:position pos:line="180" pos:column="32"/></name> <operator pos:line="180" pos:column="33">-<pos:position pos:line="180" pos:column="34"/></operator> <literal type="char" pos:line="180" pos:column="35">'0'<pos:position pos:line="180" pos:column="38"/></literal><operator pos:line="180" pos:column="38">)<pos:position pos:line="180" pos:column="39"/></operator></expr>;<pos:position pos:line="180" pos:column="40"/></expr_stmt></block></for>
<cpp:endif pos:line="181" pos:column="1">#<cpp:directive pos:line="181" pos:column="2">endif<pos:position pos:line="181" pos:column="7"/></cpp:directive></cpp:endif>
	  <expr_stmt><expr><name><name pos:line="182" pos:column="11">domain<pos:position pos:line="182" pos:column="17"/></name><operator pos:line="182" pos:column="17">-&gt;<pos:position pos:line="182" pos:column="22"/></operator><name pos:line="182" pos:column="19">nplurals<pos:position pos:line="182" pos:column="27"/></name></name> <operator pos:line="182" pos:column="28">=<pos:position pos:line="182" pos:column="29"/></operator> <name pos:line="182" pos:column="30">n<pos:position pos:line="182" pos:column="31"/></name></expr>;<pos:position pos:line="182" pos:column="32"/></expr_stmt>
	  <if pos:line="183" pos:column="11">if <condition pos:line="183" pos:column="14">(<expr><name pos:line="183" pos:column="15">nplurals<pos:position pos:line="183" pos:column="23"/></name> <operator pos:line="183" pos:column="24">==<pos:position pos:line="183" pos:column="26"/></operator> <name pos:line="183" pos:column="27">endp<pos:position pos:line="183" pos:column="31"/></name></expr>)<pos:position pos:line="183" pos:column="32"/></condition><then pos:line="183" pos:column="32">
	    <block type="pseudo"><goto pos:line="184" pos:column="13">goto <name pos:line="184" pos:column="18">no_plural<pos:position pos:line="184" pos:column="27"/></name>;<pos:position pos:line="184" pos:column="28"/></goto></block></then></if>

	  <comment type="block" pos:line="186" pos:column="11">/* Due to the restrictions bison imposes onto the interface of the
	     scanner function we have to put the input string and the result
	     passed up from the parser into the same structure which address
	     is passed down to the parser.  */</comment>
	  <expr_stmt><expr><name pos:line="190" pos:column="11">plural<pos:position pos:line="190" pos:column="17"/></name> <operator pos:line="190" pos:column="18">+=<pos:position pos:line="190" pos:column="20"/></operator> <literal type="number" pos:line="190" pos:column="21">7<pos:position pos:line="190" pos:column="22"/></literal></expr>;<pos:position pos:line="190" pos:column="23"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="191" pos:column="11">args<pos:position pos:line="191" pos:column="15"/></name><operator pos:line="191" pos:column="15">.<pos:position pos:line="191" pos:column="16"/></operator><name pos:line="191" pos:column="16">cp<pos:position pos:line="191" pos:column="18"/></name></name> <operator pos:line="191" pos:column="19">=<pos:position pos:line="191" pos:column="20"/></operator> <name pos:line="191" pos:column="21">plural<pos:position pos:line="191" pos:column="27"/></name></expr>;<pos:position pos:line="191" pos:column="28"/></expr_stmt>
	  <if pos:line="192" pos:column="11">if <condition pos:line="192" pos:column="14">(<expr><call><name pos:line="192" pos:column="15">PLURAL_PARSE<pos:position pos:line="192" pos:column="27"/></name> <argument_list pos:line="192" pos:column="28">(<argument><expr><operator pos:line="192" pos:column="29">&amp;<pos:position pos:line="192" pos:column="34"/></operator><name pos:line="192" pos:column="30">args<pos:position pos:line="192" pos:column="34"/></name></expr></argument>)<pos:position pos:line="192" pos:column="35"/></argument_list></call> <operator pos:line="192" pos:column="36">!=<pos:position pos:line="192" pos:column="38"/></operator> <literal type="number" pos:line="192" pos:column="39">0<pos:position pos:line="192" pos:column="40"/></literal></expr>)<pos:position pos:line="192" pos:column="41"/></condition><then pos:line="192" pos:column="41">
	    <block type="pseudo"><goto pos:line="193" pos:column="13">goto <name pos:line="193" pos:column="18">no_plural<pos:position pos:line="193" pos:column="27"/></name>;<pos:position pos:line="193" pos:column="28"/></goto></block></then></if>
	  <expr_stmt><expr><name><name pos:line="194" pos:column="11">domain<pos:position pos:line="194" pos:column="17"/></name><operator pos:line="194" pos:column="17">-&gt;<pos:position pos:line="194" pos:column="22"/></operator><name pos:line="194" pos:column="19">plural<pos:position pos:line="194" pos:column="25"/></name></name> <operator pos:line="194" pos:column="26">=<pos:position pos:line="194" pos:column="27"/></operator> <name><name pos:line="194" pos:column="28">args<pos:position pos:line="194" pos:column="32"/></name><operator pos:line="194" pos:column="32">.<pos:position pos:line="194" pos:column="33"/></operator><name pos:line="194" pos:column="33">res<pos:position pos:line="194" pos:column="36"/></name></name></expr>;<pos:position pos:line="194" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="195" pos:column="10"/></block></else></if>
    }<pos:position pos:line="196" pos:column="6"/></block></then>
  <else pos:line="197" pos:column="3">else
    <block pos:line="198" pos:column="5">{
      <comment type="block" pos:line="199" pos:column="7">/* By default we are using the Germanic form: singular form only
         for `one', the plural form otherwise.  Yes, this is also what
         English is using since English is a Germanic language.  */</comment>
    <label><name pos:line="202" pos:column="5">no_plural<pos:position pos:line="202" pos:column="14"/></name>:<pos:position pos:line="202" pos:column="15"/></label>
      <expr_stmt><expr><call><name pos:line="203" pos:column="7">INIT_GERMANIC_PLURAL<pos:position pos:line="203" pos:column="27"/></name> <argument_list pos:line="203" pos:column="28">()<pos:position pos:line="203" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="204" pos:column="7">domain<pos:position pos:line="204" pos:column="13"/></name><operator pos:line="204" pos:column="13">-&gt;<pos:position pos:line="204" pos:column="18"/></operator><name pos:line="204" pos:column="15">plural<pos:position pos:line="204" pos:column="21"/></name></name> <operator pos:line="204" pos:column="22">=<pos:position pos:line="204" pos:column="23"/></operator> <operator pos:line="204" pos:column="24">&amp;<pos:position pos:line="204" pos:column="29"/></operator><name pos:line="204" pos:column="25">germanic_plural<pos:position pos:line="204" pos:column="40"/></name></expr>;<pos:position pos:line="204" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="205" pos:column="7">domain<pos:position pos:line="205" pos:column="13"/></name><operator pos:line="205" pos:column="13">-&gt;<pos:position pos:line="205" pos:column="18"/></operator><name pos:line="205" pos:column="15">nplurals<pos:position pos:line="205" pos:column="23"/></name></name> <operator pos:line="205" pos:column="24">=<pos:position pos:line="205" pos:column="25"/></operator> <literal type="number" pos:line="205" pos:column="26">2<pos:position pos:line="205" pos:column="27"/></literal></expr>;<pos:position pos:line="205" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="206" pos:column="6"/></block></else></if>
}<pos:position pos:line="207" pos:column="2"/></block></unit>
