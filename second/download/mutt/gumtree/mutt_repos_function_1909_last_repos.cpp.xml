<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1909_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">read_alias_file<pos:position pos:line="3" pos:column="16"/></name> <argument_list pos:line="3" pos:column="17">(<argument><expr><name pos:line="3" pos:column="18">fname<pos:position pos:line="3" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="25">fname_len<pos:position pos:line="3" pos:column="34"/></name></expr></argument>)<pos:position pos:line="3" pos:column="35"/></argument_list>
     const <name pos:line="4" pos:column="12">char<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier><name pos:line="4" pos:column="18">fname<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
     <decl_stmt><decl><type><name pos:line="5" pos:column="6">int<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">fname_len<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">FILE<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">fp<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">full_fname<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">added<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="10" pos:column="3">static<pos:position pos:line="10" pos:column="9"/></specifier> <type><specifier pos:line="10" pos:column="10">const<pos:position pos:line="10" pos:column="15"/></specifier> <name pos:line="10" pos:column="16">char<pos:position pos:line="10" pos:column="20"/></name></type> <name><name pos:line="10" pos:column="21">aliasfile<pos:position pos:line="10" pos:column="30"/></name><index pos:line="10" pos:column="30">[]<pos:position pos:line="10" pos:column="32"/></index></name> <init pos:line="10" pos:column="33">= <expr><literal type="string" pos:line="10" pos:column="35">"/locale.alias"<pos:position pos:line="10" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="51"/></decl_stmt>

  <expr_stmt><expr><name pos:line="12" pos:column="3">full_fname<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <operator pos:line="12" pos:column="16">(<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">char<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">*<pos:position pos:line="12" pos:column="23"/></operator><operator pos:line="12" pos:column="23">)<pos:position pos:line="12" pos:column="24"/></operator> <call><name pos:line="12" pos:column="25">alloca<pos:position pos:line="12" pos:column="31"/></name> <argument_list pos:line="12" pos:column="32">(<argument><expr><name pos:line="12" pos:column="33">fname_len<pos:position pos:line="12" pos:column="42"/></name> <operator pos:line="12" pos:column="43">+<pos:position pos:line="12" pos:column="44"/></operator> <sizeof pos:line="12" pos:column="45">sizeof <name pos:line="12" pos:column="52">aliasfile<pos:position pos:line="12" pos:column="61"/></name></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="63"/></expr_stmt>
<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">HAVE_MEMPCPY<pos:position pos:line="13" pos:column="20"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">mempcpy<pos:position pos:line="14" pos:column="10"/></name> <argument_list pos:line="14" pos:column="11">(<argument><expr><call><name pos:line="14" pos:column="12">mempcpy<pos:position pos:line="14" pos:column="19"/></name> <argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">full_fname<pos:position pos:line="14" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="33">fname<pos:position pos:line="14" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="40">fname_len<pos:position pos:line="14" pos:column="49"/></name></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr></argument>,
	   <argument><expr><name pos:line="15" pos:column="12">aliasfile<pos:position pos:line="15" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="23">sizeof <name pos:line="15" pos:column="30">aliasfile<pos:position pos:line="15" pos:column="39"/></name></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
<cpp:else pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">else<pos:position pos:line="16" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">memcpy<pos:position pos:line="17" pos:column="9"/></name> <argument_list pos:line="17" pos:column="10">(<argument><expr><name pos:line="17" pos:column="11">full_fname<pos:position pos:line="17" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="23">fname<pos:position pos:line="17" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="30">fname_len<pos:position pos:line="17" pos:column="39"/></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">memcpy<pos:position pos:line="18" pos:column="9"/></name> <argument_list pos:line="18" pos:column="10">(<argument><expr><operator pos:line="18" pos:column="11">&amp;<pos:position pos:line="18" pos:column="16"/></operator><name><name pos:line="18" pos:column="12">full_fname<pos:position pos:line="18" pos:column="22"/></name><index pos:line="18" pos:column="22">[<expr><name pos:line="18" pos:column="23">fname_len<pos:position pos:line="18" pos:column="32"/></name></expr>]<pos:position pos:line="18" pos:column="33"/></index></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="35">aliasfile<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="46">sizeof <name pos:line="18" pos:column="53">aliasfile<pos:position pos:line="18" pos:column="62"/></name></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="64"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="21" pos:column="3">fp<pos:position pos:line="21" pos:column="5"/></name> <operator pos:line="21" pos:column="6">=<pos:position pos:line="21" pos:column="7"/></operator> <call><name pos:line="21" pos:column="8">fopen<pos:position pos:line="21" pos:column="13"/></name> <argument_list pos:line="21" pos:column="14">(<argument><expr><name pos:line="21" pos:column="15">full_fname<pos:position pos:line="21" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="27">"r"<pos:position pos:line="21" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="22" pos:column="3">freea<pos:position pos:line="22" pos:column="8"/></name> <argument_list pos:line="22" pos:column="9">(<argument><expr><name pos:line="22" pos:column="10">full_fname<pos:position pos:line="22" pos:column="20"/></name></expr></argument>)<pos:position pos:line="22" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name pos:line="23" pos:column="7">fp<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">==<pos:position pos:line="23" pos:column="12"/></operator> <name pos:line="23" pos:column="13">NULL<pos:position pos:line="23" pos:column="17"/></name></expr>)<pos:position pos:line="23" pos:column="18"/></condition><then pos:line="23" pos:column="18">
    <block type="pseudo"><return pos:line="24" pos:column="5">return <expr><literal type="number" pos:line="24" pos:column="12">0<pos:position pos:line="24" pos:column="13"/></literal></expr>;<pos:position pos:line="24" pos:column="14"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="26" pos:column="3">added<pos:position pos:line="26" pos:column="8"/></name> <operator pos:line="26" pos:column="9">=<pos:position pos:line="26" pos:column="10"/></operator> <literal type="number" pos:line="26" pos:column="11">0<pos:position pos:line="26" pos:column="12"/></literal></expr>;<pos:position pos:line="26" pos:column="13"/></expr_stmt>
  <while pos:line="27" pos:column="3">while <condition pos:line="27" pos:column="9">(<expr><operator pos:line="27" pos:column="10">!<pos:position pos:line="27" pos:column="11"/></operator><call><name pos:line="27" pos:column="11">feof<pos:position pos:line="27" pos:column="15"/></name> <argument_list pos:line="27" pos:column="16">(<argument><expr><name pos:line="27" pos:column="17">fp<pos:position pos:line="27" pos:column="19"/></name></expr></argument>)<pos:position pos:line="27" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="21"/></condition>
    <block pos:line="28" pos:column="5">{
      <comment type="block" pos:line="29" pos:column="7">/* It is a reasonable approach to use a fix buffer here because
	 a) we are only interested in the first two fields
	 b) these fields must be usable as file names and so must not
	    be that long
       */</comment>
      <decl_stmt><decl><type><name pos:line="34" pos:column="7">char<pos:position pos:line="34" pos:column="11"/></name></type> <name><name pos:line="34" pos:column="12">buf<pos:position pos:line="34" pos:column="15"/></name><index pos:line="34" pos:column="15">[<expr><name pos:line="34" pos:column="16">BUFSIZ<pos:position pos:line="34" pos:column="22"/></name></expr>]<pos:position pos:line="34" pos:column="23"/></index></name></decl>;<pos:position pos:line="34" pos:column="24"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="35" pos:column="7">char<pos:position pos:line="35" pos:column="11"/></name> <modifier pos:line="35" pos:column="12">*<pos:position pos:line="35" pos:column="13"/></modifier></type><name pos:line="35" pos:column="13">alias<pos:position pos:line="35" pos:column="18"/></name></decl>;<pos:position pos:line="35" pos:column="19"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="36" pos:column="7">char<pos:position pos:line="36" pos:column="11"/></name> <modifier pos:line="36" pos:column="12">*<pos:position pos:line="36" pos:column="13"/></modifier></type><name pos:line="36" pos:column="13">value<pos:position pos:line="36" pos:column="18"/></name></decl>;<pos:position pos:line="36" pos:column="19"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="37" pos:column="7">char<pos:position pos:line="37" pos:column="11"/></name> <modifier pos:line="37" pos:column="12">*<pos:position pos:line="37" pos:column="13"/></modifier></type><name pos:line="37" pos:column="13">cp<pos:position pos:line="37" pos:column="15"/></name></decl>;<pos:position pos:line="37" pos:column="16"/></decl_stmt>

      <if pos:line="39" pos:column="7">if <condition pos:line="39" pos:column="10">(<expr><call><name pos:line="39" pos:column="11">fgets<pos:position pos:line="39" pos:column="16"/></name> <argument_list pos:line="39" pos:column="17">(<argument><expr><name pos:line="39" pos:column="18">buf<pos:position pos:line="39" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="23">sizeof <name pos:line="39" pos:column="30">buf<pos:position pos:line="39" pos:column="33"/></name></sizeof></expr></argument>, <argument><expr><name pos:line="39" pos:column="35">fp<pos:position pos:line="39" pos:column="37"/></name></expr></argument>)<pos:position pos:line="39" pos:column="38"/></argument_list></call> <operator pos:line="39" pos:column="39">==<pos:position pos:line="39" pos:column="41"/></operator> <name pos:line="39" pos:column="42">NULL<pos:position pos:line="39" pos:column="46"/></name></expr>)<pos:position pos:line="39" pos:column="47"/></condition><then pos:line="39" pos:column="47">
	<comment type="block" pos:line="40" pos:column="9">/* EOF reached.  */</comment>
	<block type="pseudo"><break pos:line="41" pos:column="9">break;<pos:position pos:line="41" pos:column="15"/></break></block></then></if>

      <comment type="block" pos:line="43" pos:column="7">/* Possibly not the whole line fits into the buffer.  Ignore
	 the rest of the line.  */</comment>
      <if pos:line="45" pos:column="7">if <condition pos:line="45" pos:column="10">(<expr><call><name pos:line="45" pos:column="11">strchr<pos:position pos:line="45" pos:column="17"/></name> <argument_list pos:line="45" pos:column="18">(<argument><expr><name pos:line="45" pos:column="19">buf<pos:position pos:line="45" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="45" pos:column="24">'\n'<pos:position pos:line="45" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="29"/></argument_list></call> <operator pos:line="45" pos:column="30">==<pos:position pos:line="45" pos:column="32"/></operator> <name pos:line="45" pos:column="33">NULL<pos:position pos:line="45" pos:column="37"/></name></expr>)<pos:position pos:line="45" pos:column="38"/></condition><then pos:line="45" pos:column="38">
	<block pos:line="46" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="47" pos:column="11">char<pos:position pos:line="47" pos:column="15"/></name></type> <name><name pos:line="47" pos:column="16">altbuf<pos:position pos:line="47" pos:column="22"/></name><index pos:line="47" pos:column="22">[<expr><name pos:line="47" pos:column="23">BUFSIZ<pos:position pos:line="47" pos:column="29"/></name></expr>]<pos:position pos:line="47" pos:column="30"/></index></name></decl>;<pos:position pos:line="47" pos:column="31"/></decl_stmt>
	  <do pos:line="48" pos:column="11">do
	    <block type="pseudo"><if pos:line="49" pos:column="13">if <condition pos:line="49" pos:column="16">(<expr><call><name pos:line="49" pos:column="17">fgets<pos:position pos:line="49" pos:column="22"/></name> <argument_list pos:line="49" pos:column="23">(<argument><expr><name pos:line="49" pos:column="24">altbuf<pos:position pos:line="49" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="49" pos:column="32">sizeof <name pos:line="49" pos:column="39">altbuf<pos:position pos:line="49" pos:column="45"/></name></sizeof></expr></argument>, <argument><expr><name pos:line="49" pos:column="47">fp<pos:position pos:line="49" pos:column="49"/></name></expr></argument>)<pos:position pos:line="49" pos:column="50"/></argument_list></call> <operator pos:line="49" pos:column="51">==<pos:position pos:line="49" pos:column="53"/></operator> <name pos:line="49" pos:column="54">NULL<pos:position pos:line="49" pos:column="58"/></name></expr>)<pos:position pos:line="49" pos:column="59"/></condition><then pos:line="49" pos:column="59">
	      <comment type="block" pos:line="50" pos:column="15">/* Make sure the inner loop will be left.  The outer loop
		 will exit at the `feof' test.  */</comment>
	      <block type="pseudo"><break pos:line="52" pos:column="15">break;<pos:position pos:line="52" pos:column="21"/></break></block></then></if></block>
	  while <condition pos:line="53" pos:column="17">(<expr><call><name pos:line="53" pos:column="18">strchr<pos:position pos:line="53" pos:column="24"/></name> <argument_list pos:line="53" pos:column="25">(<argument><expr><name pos:line="53" pos:column="26">altbuf<pos:position pos:line="53" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="53" pos:column="34">'\n'<pos:position pos:line="53" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="39"/></argument_list></call> <operator pos:line="53" pos:column="40">==<pos:position pos:line="53" pos:column="42"/></operator> <name pos:line="53" pos:column="43">NULL<pos:position pos:line="53" pos:column="47"/></name></expr>)<pos:position pos:line="53" pos:column="48"/></condition>;<pos:position pos:line="53" pos:column="49"/></do>
	}<pos:position pos:line="54" pos:column="10"/></block></then></if>

      <expr_stmt><expr><name pos:line="56" pos:column="7">cp<pos:position pos:line="56" pos:column="9"/></name> <operator pos:line="56" pos:column="10">=<pos:position pos:line="56" pos:column="11"/></operator> <name pos:line="56" pos:column="12">buf<pos:position pos:line="56" pos:column="15"/></name></expr>;<pos:position pos:line="56" pos:column="16"/></expr_stmt>
      <comment type="block" pos:line="57" pos:column="7">/* Ignore leading white space.  */</comment>
      <while pos:line="58" pos:column="7">while <condition pos:line="58" pos:column="13">(<expr><call><name pos:line="58" pos:column="14">isspace<pos:position pos:line="58" pos:column="21"/></name> <argument_list pos:line="58" pos:column="22">(<argument><expr><operator pos:line="58" pos:column="23">(<pos:position pos:line="58" pos:column="24"/></operator><name pos:line="58" pos:column="24">unsigned<pos:position pos:line="58" pos:column="32"/></name> <name pos:line="58" pos:column="33">char<pos:position pos:line="58" pos:column="37"/></name><operator pos:line="58" pos:column="37">)<pos:position pos:line="58" pos:column="38"/></operator> <name><name pos:line="58" pos:column="39">cp<pos:position pos:line="58" pos:column="41"/></name><index pos:line="58" pos:column="41">[<expr><literal type="number" pos:line="58" pos:column="42">0<pos:position pos:line="58" pos:column="43"/></literal></expr>]<pos:position pos:line="58" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="58" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="46"/></condition>
	<block type="pseudo"><expr_stmt><expr><operator pos:line="59" pos:column="9">++<pos:position pos:line="59" pos:column="11"/></operator><name pos:line="59" pos:column="11">cp<pos:position pos:line="59" pos:column="13"/></name></expr>;<pos:position pos:line="59" pos:column="14"/></expr_stmt></block></while>

      <comment type="block" pos:line="61" pos:column="7">/* A leading '#' signals a comment line.  */</comment>
      <if pos:line="62" pos:column="7">if <condition pos:line="62" pos:column="10">(<expr><name><name pos:line="62" pos:column="11">cp<pos:position pos:line="62" pos:column="13"/></name><index pos:line="62" pos:column="13">[<expr><literal type="number" pos:line="62" pos:column="14">0<pos:position pos:line="62" pos:column="15"/></literal></expr>]<pos:position pos:line="62" pos:column="16"/></index></name> <operator pos:line="62" pos:column="17">!=<pos:position pos:line="62" pos:column="19"/></operator> <literal type="char" pos:line="62" pos:column="20">'\0'<pos:position pos:line="62" pos:column="24"/></literal> <operator pos:line="62" pos:column="25">&amp;&amp;<pos:position pos:line="62" pos:column="35"/></operator> <name><name pos:line="62" pos:column="28">cp<pos:position pos:line="62" pos:column="30"/></name><index pos:line="62" pos:column="30">[<expr><literal type="number" pos:line="62" pos:column="31">0<pos:position pos:line="62" pos:column="32"/></literal></expr>]<pos:position pos:line="62" pos:column="33"/></index></name> <operator pos:line="62" pos:column="34">!=<pos:position pos:line="62" pos:column="36"/></operator> <literal type="char" pos:line="62" pos:column="37">'#'<pos:position pos:line="62" pos:column="40"/></literal></expr>)<pos:position pos:line="62" pos:column="41"/></condition><then pos:line="62" pos:column="41">
	<block pos:line="63" pos:column="9">{
	  <expr_stmt><expr><name pos:line="64" pos:column="11">alias<pos:position pos:line="64" pos:column="16"/></name> <operator pos:line="64" pos:column="17">=<pos:position pos:line="64" pos:column="18"/></operator> <name pos:line="64" pos:column="19">cp<pos:position pos:line="64" pos:column="21"/></name><operator pos:line="64" pos:column="21">++<pos:position pos:line="64" pos:column="23"/></operator></expr>;<pos:position pos:line="64" pos:column="24"/></expr_stmt>
	  <while pos:line="65" pos:column="11">while <condition pos:line="65" pos:column="17">(<expr><name><name pos:line="65" pos:column="18">cp<pos:position pos:line="65" pos:column="20"/></name><index pos:line="65" pos:column="20">[<expr><literal type="number" pos:line="65" pos:column="21">0<pos:position pos:line="65" pos:column="22"/></literal></expr>]<pos:position pos:line="65" pos:column="23"/></index></name> <operator pos:line="65" pos:column="24">!=<pos:position pos:line="65" pos:column="26"/></operator> <literal type="char" pos:line="65" pos:column="27">'\0'<pos:position pos:line="65" pos:column="31"/></literal> <operator pos:line="65" pos:column="32">&amp;&amp;<pos:position pos:line="65" pos:column="42"/></operator> <operator pos:line="65" pos:column="35">!<pos:position pos:line="65" pos:column="36"/></operator><call><name pos:line="65" pos:column="36">isspace<pos:position pos:line="65" pos:column="43"/></name> <argument_list pos:line="65" pos:column="44">(<argument><expr><operator pos:line="65" pos:column="45">(<pos:position pos:line="65" pos:column="46"/></operator><name pos:line="65" pos:column="46">unsigned<pos:position pos:line="65" pos:column="54"/></name> <name pos:line="65" pos:column="55">char<pos:position pos:line="65" pos:column="59"/></name><operator pos:line="65" pos:column="59">)<pos:position pos:line="65" pos:column="60"/></operator> <name><name pos:line="65" pos:column="61">cp<pos:position pos:line="65" pos:column="63"/></name><index pos:line="65" pos:column="63">[<expr><literal type="number" pos:line="65" pos:column="64">0<pos:position pos:line="65" pos:column="65"/></literal></expr>]<pos:position pos:line="65" pos:column="66"/></index></name></expr></argument>)<pos:position pos:line="65" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="68"/></condition>
	    <block type="pseudo"><expr_stmt><expr><operator pos:line="66" pos:column="13">++<pos:position pos:line="66" pos:column="15"/></operator><name pos:line="66" pos:column="15">cp<pos:position pos:line="66" pos:column="17"/></name></expr>;<pos:position pos:line="66" pos:column="18"/></expr_stmt></block></while>
	  <comment type="block" pos:line="67" pos:column="11">/* Terminate alias name.  */</comment>
	  <if pos:line="68" pos:column="11">if <condition pos:line="68" pos:column="14">(<expr><name><name pos:line="68" pos:column="15">cp<pos:position pos:line="68" pos:column="17"/></name><index pos:line="68" pos:column="17">[<expr><literal type="number" pos:line="68" pos:column="18">0<pos:position pos:line="68" pos:column="19"/></literal></expr>]<pos:position pos:line="68" pos:column="20"/></index></name> <operator pos:line="68" pos:column="21">!=<pos:position pos:line="68" pos:column="23"/></operator> <literal type="char" pos:line="68" pos:column="24">'\0'<pos:position pos:line="68" pos:column="28"/></literal></expr>)<pos:position pos:line="68" pos:column="29"/></condition><then pos:line="68" pos:column="29">
	    <block type="pseudo"><expr_stmt><expr><operator pos:line="69" pos:column="13">*<pos:position pos:line="69" pos:column="14"/></operator><name pos:line="69" pos:column="14">cp<pos:position pos:line="69" pos:column="16"/></name><operator pos:line="69" pos:column="16">++<pos:position pos:line="69" pos:column="18"/></operator> <operator pos:line="69" pos:column="19">=<pos:position pos:line="69" pos:column="20"/></operator> <literal type="char" pos:line="69" pos:column="21">'\0'<pos:position pos:line="69" pos:column="25"/></literal></expr>;<pos:position pos:line="69" pos:column="26"/></expr_stmt></block></then></if>

	  <comment type="block" pos:line="71" pos:column="11">/* Now look for the beginning of the value.  */</comment>
	  <while pos:line="72" pos:column="11">while <condition pos:line="72" pos:column="17">(<expr><call><name pos:line="72" pos:column="18">isspace<pos:position pos:line="72" pos:column="25"/></name> <argument_list pos:line="72" pos:column="26">(<argument><expr><operator pos:line="72" pos:column="27">(<pos:position pos:line="72" pos:column="28"/></operator><name pos:line="72" pos:column="28">unsigned<pos:position pos:line="72" pos:column="36"/></name> <name pos:line="72" pos:column="37">char<pos:position pos:line="72" pos:column="41"/></name><operator pos:line="72" pos:column="41">)<pos:position pos:line="72" pos:column="42"/></operator> <name><name pos:line="72" pos:column="43">cp<pos:position pos:line="72" pos:column="45"/></name><index pos:line="72" pos:column="45">[<expr><literal type="number" pos:line="72" pos:column="46">0<pos:position pos:line="72" pos:column="47"/></literal></expr>]<pos:position pos:line="72" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="72" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="50"/></condition>
	    <block type="pseudo"><expr_stmt><expr><operator pos:line="73" pos:column="13">++<pos:position pos:line="73" pos:column="15"/></operator><name pos:line="73" pos:column="15">cp<pos:position pos:line="73" pos:column="17"/></name></expr>;<pos:position pos:line="73" pos:column="18"/></expr_stmt></block></while>

	  <if pos:line="75" pos:column="11">if <condition pos:line="75" pos:column="14">(<expr><name><name pos:line="75" pos:column="15">cp<pos:position pos:line="75" pos:column="17"/></name><index pos:line="75" pos:column="17">[<expr><literal type="number" pos:line="75" pos:column="18">0<pos:position pos:line="75" pos:column="19"/></literal></expr>]<pos:position pos:line="75" pos:column="20"/></index></name> <operator pos:line="75" pos:column="21">!=<pos:position pos:line="75" pos:column="23"/></operator> <literal type="char" pos:line="75" pos:column="24">'\0'<pos:position pos:line="75" pos:column="28"/></literal></expr>)<pos:position pos:line="75" pos:column="29"/></condition><then pos:line="75" pos:column="29">
	    <block pos:line="76" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="77" pos:column="15">size_t<pos:position pos:line="77" pos:column="21"/></name></type> <name pos:line="77" pos:column="22">alias_len<pos:position pos:line="77" pos:column="31"/></name></decl>;<pos:position pos:line="77" pos:column="32"/></decl_stmt>
	      <decl_stmt><decl><type><name pos:line="78" pos:column="15">size_t<pos:position pos:line="78" pos:column="21"/></name></type> <name pos:line="78" pos:column="22">value_len<pos:position pos:line="78" pos:column="31"/></name></decl>;<pos:position pos:line="78" pos:column="32"/></decl_stmt>

	      <expr_stmt><expr><name pos:line="80" pos:column="15">value<pos:position pos:line="80" pos:column="20"/></name> <operator pos:line="80" pos:column="21">=<pos:position pos:line="80" pos:column="22"/></operator> <name pos:line="80" pos:column="23">cp<pos:position pos:line="80" pos:column="25"/></name><operator pos:line="80" pos:column="25">++<pos:position pos:line="80" pos:column="27"/></operator></expr>;<pos:position pos:line="80" pos:column="28"/></expr_stmt>
	      <while pos:line="81" pos:column="15">while <condition pos:line="81" pos:column="21">(<expr><name><name pos:line="81" pos:column="22">cp<pos:position pos:line="81" pos:column="24"/></name><index pos:line="81" pos:column="24">[<expr><literal type="number" pos:line="81" pos:column="25">0<pos:position pos:line="81" pos:column="26"/></literal></expr>]<pos:position pos:line="81" pos:column="27"/></index></name> <operator pos:line="81" pos:column="28">!=<pos:position pos:line="81" pos:column="30"/></operator> <literal type="char" pos:line="81" pos:column="31">'\0'<pos:position pos:line="81" pos:column="35"/></literal> <operator pos:line="81" pos:column="36">&amp;&amp;<pos:position pos:line="81" pos:column="46"/></operator> <operator pos:line="81" pos:column="39">!<pos:position pos:line="81" pos:column="40"/></operator><call><name pos:line="81" pos:column="40">isspace<pos:position pos:line="81" pos:column="47"/></name> <argument_list pos:line="81" pos:column="48">(<argument><expr><operator pos:line="81" pos:column="49">(<pos:position pos:line="81" pos:column="50"/></operator><name pos:line="81" pos:column="50">unsigned<pos:position pos:line="81" pos:column="58"/></name> <name pos:line="81" pos:column="59">char<pos:position pos:line="81" pos:column="63"/></name><operator pos:line="81" pos:column="63">)<pos:position pos:line="81" pos:column="64"/></operator> <name><name pos:line="81" pos:column="65">cp<pos:position pos:line="81" pos:column="67"/></name><index pos:line="81" pos:column="67">[<expr><literal type="number" pos:line="81" pos:column="68">0<pos:position pos:line="81" pos:column="69"/></literal></expr>]<pos:position pos:line="81" pos:column="70"/></index></name></expr></argument>)<pos:position pos:line="81" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="72"/></condition>
		<block type="pseudo"><expr_stmt><expr><operator pos:line="82" pos:column="17">++<pos:position pos:line="82" pos:column="19"/></operator><name pos:line="82" pos:column="19">cp<pos:position pos:line="82" pos:column="21"/></name></expr>;<pos:position pos:line="82" pos:column="22"/></expr_stmt></block></while>
	      <comment type="block" pos:line="83" pos:column="15">/* Terminate value.  */</comment>
	      <if pos:line="84" pos:column="15">if <condition pos:line="84" pos:column="18">(<expr><name><name pos:line="84" pos:column="19">cp<pos:position pos:line="84" pos:column="21"/></name><index pos:line="84" pos:column="21">[<expr><literal type="number" pos:line="84" pos:column="22">0<pos:position pos:line="84" pos:column="23"/></literal></expr>]<pos:position pos:line="84" pos:column="24"/></index></name> <operator pos:line="84" pos:column="25">==<pos:position pos:line="84" pos:column="27"/></operator> <literal type="char" pos:line="84" pos:column="28">'\n'<pos:position pos:line="84" pos:column="32"/></literal></expr>)<pos:position pos:line="84" pos:column="33"/></condition><then pos:line="84" pos:column="33">
		<block pos:line="85" pos:column="17">{
		  <comment type="block" pos:line="86" pos:column="19">/* This has to be done to make the following test
		     for the end of line possible.  We are looking for
		     the terminating '\n' which do not overwrite here.  */</comment>
		  <expr_stmt><expr><operator pos:line="89" pos:column="19">*<pos:position pos:line="89" pos:column="20"/></operator><name pos:line="89" pos:column="20">cp<pos:position pos:line="89" pos:column="22"/></name><operator pos:line="89" pos:column="22">++<pos:position pos:line="89" pos:column="24"/></operator> <operator pos:line="89" pos:column="25">=<pos:position pos:line="89" pos:column="26"/></operator> <literal type="char" pos:line="89" pos:column="27">'\0'<pos:position pos:line="89" pos:column="31"/></literal></expr>;<pos:position pos:line="89" pos:column="32"/></expr_stmt>
		  <expr_stmt><expr><operator pos:line="90" pos:column="19">*<pos:position pos:line="90" pos:column="20"/></operator><name pos:line="90" pos:column="20">cp<pos:position pos:line="90" pos:column="22"/></name> <operator pos:line="90" pos:column="23">=<pos:position pos:line="90" pos:column="24"/></operator> <literal type="char" pos:line="90" pos:column="25">'\n'<pos:position pos:line="90" pos:column="29"/></literal></expr>;<pos:position pos:line="90" pos:column="30"/></expr_stmt>
		}<pos:position pos:line="91" pos:column="18"/></block></then>
	      <elseif pos:line="92" pos:column="15">else <if pos:line="92" pos:column="20">if <condition pos:line="92" pos:column="23">(<expr><name><name pos:line="92" pos:column="24">cp<pos:position pos:line="92" pos:column="26"/></name><index pos:line="92" pos:column="26">[<expr><literal type="number" pos:line="92" pos:column="27">0<pos:position pos:line="92" pos:column="28"/></literal></expr>]<pos:position pos:line="92" pos:column="29"/></index></name> <operator pos:line="92" pos:column="30">!=<pos:position pos:line="92" pos:column="32"/></operator> <literal type="char" pos:line="92" pos:column="33">'\0'<pos:position pos:line="92" pos:column="37"/></literal></expr>)<pos:position pos:line="92" pos:column="38"/></condition><then pos:line="92" pos:column="38">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="93" pos:column="17">*<pos:position pos:line="93" pos:column="18"/></operator><name pos:line="93" pos:column="18">cp<pos:position pos:line="93" pos:column="20"/></name><operator pos:line="93" pos:column="20">++<pos:position pos:line="93" pos:column="22"/></operator> <operator pos:line="93" pos:column="23">=<pos:position pos:line="93" pos:column="24"/></operator> <literal type="char" pos:line="93" pos:column="25">'\0'<pos:position pos:line="93" pos:column="29"/></literal></expr>;<pos:position pos:line="93" pos:column="30"/></expr_stmt></block></then></if></elseif></if>

	      <if pos:line="95" pos:column="15">if <condition pos:line="95" pos:column="18">(<expr><name pos:line="95" pos:column="19">nmap<pos:position pos:line="95" pos:column="23"/></name> <operator pos:line="95" pos:column="24">&gt;=<pos:position pos:line="95" pos:column="29"/></operator> <name pos:line="95" pos:column="27">maxmap<pos:position pos:line="95" pos:column="33"/></name></expr>)<pos:position pos:line="95" pos:column="34"/></condition><then pos:line="95" pos:column="34">
		<block type="pseudo"><if pos:line="96" pos:column="17">if <condition pos:line="96" pos:column="20">(<expr><call><name pos:line="96" pos:column="21">__builtin_expect<pos:position pos:line="96" pos:column="37"/></name> <argument_list pos:line="96" pos:column="38">(<argument><expr><call><name pos:line="96" pos:column="39">extend_alias_table<pos:position pos:line="96" pos:column="57"/></name> <argument_list pos:line="96" pos:column="58">()<pos:position pos:line="96" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="96" pos:column="62">0<pos:position pos:line="96" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="65"/></condition><then pos:line="96" pos:column="65">
		  <block type="pseudo"><return pos:line="97" pos:column="19">return <expr><name pos:line="97" pos:column="26">added<pos:position pos:line="97" pos:column="31"/></name></expr>;<pos:position pos:line="97" pos:column="32"/></return></block></then></if></block></then></if>

	      <expr_stmt><expr><name pos:line="99" pos:column="15">alias_len<pos:position pos:line="99" pos:column="24"/></name> <operator pos:line="99" pos:column="25">=<pos:position pos:line="99" pos:column="26"/></operator> <call><name pos:line="99" pos:column="27">strlen<pos:position pos:line="99" pos:column="33"/></name> <argument_list pos:line="99" pos:column="34">(<argument><expr><name pos:line="99" pos:column="35">alias<pos:position pos:line="99" pos:column="40"/></name></expr></argument>)<pos:position pos:line="99" pos:column="41"/></argument_list></call> <operator pos:line="99" pos:column="42">+<pos:position pos:line="99" pos:column="43"/></operator> <literal type="number" pos:line="99" pos:column="44">1<pos:position pos:line="99" pos:column="45"/></literal></expr>;<pos:position pos:line="99" pos:column="46"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="100" pos:column="15">value_len<pos:position pos:line="100" pos:column="24"/></name> <operator pos:line="100" pos:column="25">=<pos:position pos:line="100" pos:column="26"/></operator> <call><name pos:line="100" pos:column="27">strlen<pos:position pos:line="100" pos:column="33"/></name> <argument_list pos:line="100" pos:column="34">(<argument><expr><name pos:line="100" pos:column="35">value<pos:position pos:line="100" pos:column="40"/></name></expr></argument>)<pos:position pos:line="100" pos:column="41"/></argument_list></call> <operator pos:line="100" pos:column="42">+<pos:position pos:line="100" pos:column="43"/></operator> <literal type="number" pos:line="100" pos:column="44">1<pos:position pos:line="100" pos:column="45"/></literal></expr>;<pos:position pos:line="100" pos:column="46"/></expr_stmt>

	      <if pos:line="102" pos:column="15">if <condition pos:line="102" pos:column="18">(<expr><name pos:line="102" pos:column="19">string_space_act<pos:position pos:line="102" pos:column="35"/></name> <operator pos:line="102" pos:column="36">+<pos:position pos:line="102" pos:column="37"/></operator> <name pos:line="102" pos:column="38">alias_len<pos:position pos:line="102" pos:column="47"/></name> <operator pos:line="102" pos:column="48">+<pos:position pos:line="102" pos:column="49"/></operator> <name pos:line="102" pos:column="50">value_len<pos:position pos:line="102" pos:column="59"/></name> <operator pos:line="102" pos:column="60">&gt;<pos:position pos:line="102" pos:column="64"/></operator> <name pos:line="102" pos:column="62">string_space_max<pos:position pos:line="102" pos:column="78"/></name></expr>)<pos:position pos:line="102" pos:column="79"/></condition><then pos:line="102" pos:column="79">
		<block pos:line="103" pos:column="17">{
		  <comment type="block" pos:line="104" pos:column="19">/* Increase size of memory pool.  */</comment>
		  <decl_stmt><decl><type><name pos:line="105" pos:column="19">size_t<pos:position pos:line="105" pos:column="25"/></name></type> <name pos:line="105" pos:column="26">new_size<pos:position pos:line="105" pos:column="34"/></name> <init pos:line="105" pos:column="35">= <expr><operator pos:line="105" pos:column="37">(<pos:position pos:line="105" pos:column="38"/></operator><name pos:line="105" pos:column="38">string_space_max<pos:position pos:line="105" pos:column="54"/></name>
				     <operator pos:line="106" pos:column="38">+<pos:position pos:line="106" pos:column="39"/></operator> <operator pos:line="106" pos:column="40">(<pos:position pos:line="106" pos:column="41"/></operator><ternary><condition><expr><name pos:line="106" pos:column="41">alias_len<pos:position pos:line="106" pos:column="50"/></name> <operator pos:line="106" pos:column="51">+<pos:position pos:line="106" pos:column="52"/></operator> <name pos:line="106" pos:column="53">value_len<pos:position pos:line="106" pos:column="62"/></name> <operator pos:line="106" pos:column="63">&gt;<pos:position pos:line="106" pos:column="67"/></operator> <literal type="number" pos:line="106" pos:column="65">1024<pos:position pos:line="106" pos:column="69"/></literal></expr>
					?<pos:position pos:line="107" pos:column="42"/></condition><then pos:line="107" pos:column="42"> <expr><name pos:line="107" pos:column="43">alias_len<pos:position pos:line="107" pos:column="52"/></name> <operator pos:line="107" pos:column="53">+<pos:position pos:line="107" pos:column="54"/></operator> <name pos:line="107" pos:column="55">value_len<pos:position pos:line="107" pos:column="64"/></name></expr> <pos:position pos:line="107" pos:column="65"/></then><else pos:line="107" pos:column="65">: <expr><literal type="number" pos:line="107" pos:column="67">1024<pos:position pos:line="107" pos:column="71"/></literal></expr></else></ternary><operator pos:line="107" pos:column="71">)<pos:position pos:line="107" pos:column="72"/></operator><operator pos:line="107" pos:column="72">)<pos:position pos:line="107" pos:column="73"/></operator></expr></init></decl>;<pos:position pos:line="107" pos:column="74"/></decl_stmt>
		  <decl_stmt><decl><type><name pos:line="108" pos:column="19">char<pos:position pos:line="108" pos:column="23"/></name> <modifier pos:line="108" pos:column="24">*<pos:position pos:line="108" pos:column="25"/></modifier></type><name pos:line="108" pos:column="25">new_pool<pos:position pos:line="108" pos:column="33"/></name> <init pos:line="108" pos:column="34">= <expr><operator pos:line="108" pos:column="36">(<pos:position pos:line="108" pos:column="37"/></operator><name pos:line="108" pos:column="37">char<pos:position pos:line="108" pos:column="41"/></name> <operator pos:line="108" pos:column="42">*<pos:position pos:line="108" pos:column="43"/></operator><operator pos:line="108" pos:column="43">)<pos:position pos:line="108" pos:column="44"/></operator> <call><name pos:line="108" pos:column="45">realloc<pos:position pos:line="108" pos:column="52"/></name> <argument_list pos:line="108" pos:column="53">(<argument><expr><name pos:line="108" pos:column="54">string_space<pos:position pos:line="108" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="68">new_size<pos:position pos:line="108" pos:column="76"/></name></expr></argument>)<pos:position pos:line="108" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="108" pos:column="78"/></decl_stmt>
		  <if pos:line="109" pos:column="19">if <condition pos:line="109" pos:column="22">(<expr><name pos:line="109" pos:column="23">new_pool<pos:position pos:line="109" pos:column="31"/></name> <operator pos:line="109" pos:column="32">==<pos:position pos:line="109" pos:column="34"/></operator> <name pos:line="109" pos:column="35">NULL<pos:position pos:line="109" pos:column="39"/></name></expr>)<pos:position pos:line="109" pos:column="40"/></condition><then pos:line="109" pos:column="40">
		    <block type="pseudo"><return pos:line="110" pos:column="21">return <expr><name pos:line="110" pos:column="28">added<pos:position pos:line="110" pos:column="33"/></name></expr>;<pos:position pos:line="110" pos:column="34"/></return></block></then></if>

		  <if pos:line="112" pos:column="19">if <condition pos:line="112" pos:column="22">(<expr><call><name pos:line="112" pos:column="23">__builtin_expect<pos:position pos:line="112" pos:column="39"/></name> <argument_list pos:line="112" pos:column="40">(<argument><expr><name pos:line="112" pos:column="41">string_space<pos:position pos:line="112" pos:column="53"/></name> <operator pos:line="112" pos:column="54">!=<pos:position pos:line="112" pos:column="56"/></operator> <name pos:line="112" pos:column="57">new_pool<pos:position pos:line="112" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="112" pos:column="67">0<pos:position pos:line="112" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="112" pos:column="70"/></condition><then pos:line="112" pos:column="70">
		    <block pos:line="113" pos:column="21">{
		      <decl_stmt><decl><type><name pos:line="114" pos:column="23">size_t<pos:position pos:line="114" pos:column="29"/></name></type> <name pos:line="114" pos:column="30">i<pos:position pos:line="114" pos:column="31"/></name></decl>;<pos:position pos:line="114" pos:column="32"/></decl_stmt>

		      <for pos:line="116" pos:column="23">for <control pos:line="116" pos:column="27">(<init><expr><name pos:line="116" pos:column="28">i<pos:position pos:line="116" pos:column="29"/></name> <operator pos:line="116" pos:column="30">=<pos:position pos:line="116" pos:column="31"/></operator> <literal type="number" pos:line="116" pos:column="32">0<pos:position pos:line="116" pos:column="33"/></literal></expr>;<pos:position pos:line="116" pos:column="34"/></init> <condition><expr><name pos:line="116" pos:column="35">i<pos:position pos:line="116" pos:column="36"/></name> <operator pos:line="116" pos:column="37">&lt;<pos:position pos:line="116" pos:column="41"/></operator> <name pos:line="116" pos:column="39">nmap<pos:position pos:line="116" pos:column="43"/></name></expr>;<pos:position pos:line="116" pos:column="44"/></condition> <incr><expr><name pos:line="116" pos:column="45">i<pos:position pos:line="116" pos:column="46"/></name><operator pos:line="116" pos:column="46">++<pos:position pos:line="116" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="116" pos:column="49"/></control>
			<block pos:line="117" pos:column="25">{
			  <expr_stmt><expr><name><name pos:line="118" pos:column="27">map<pos:position pos:line="118" pos:column="30"/></name><index pos:line="118" pos:column="30">[<expr><name pos:line="118" pos:column="31">i<pos:position pos:line="118" pos:column="32"/></name></expr>]<pos:position pos:line="118" pos:column="33"/></index></name><operator pos:line="118" pos:column="33">.<pos:position pos:line="118" pos:column="34"/></operator><name pos:line="118" pos:column="34">alias<pos:position pos:line="118" pos:column="39"/></name> <operator pos:line="118" pos:column="40">+=<pos:position pos:line="118" pos:column="42"/></operator> <name pos:line="118" pos:column="43">new_pool<pos:position pos:line="118" pos:column="51"/></name> <operator pos:line="118" pos:column="52">-<pos:position pos:line="118" pos:column="53"/></operator> <name pos:line="118" pos:column="54">string_space<pos:position pos:line="118" pos:column="66"/></name></expr>;<pos:position pos:line="118" pos:column="67"/></expr_stmt>
			  <expr_stmt><expr><name><name pos:line="119" pos:column="27">map<pos:position pos:line="119" pos:column="30"/></name><index pos:line="119" pos:column="30">[<expr><name pos:line="119" pos:column="31">i<pos:position pos:line="119" pos:column="32"/></name></expr>]<pos:position pos:line="119" pos:column="33"/></index></name><operator pos:line="119" pos:column="33">.<pos:position pos:line="119" pos:column="34"/></operator><name pos:line="119" pos:column="34">value<pos:position pos:line="119" pos:column="39"/></name> <operator pos:line="119" pos:column="40">+=<pos:position pos:line="119" pos:column="42"/></operator> <name pos:line="119" pos:column="43">new_pool<pos:position pos:line="119" pos:column="51"/></name> <operator pos:line="119" pos:column="52">-<pos:position pos:line="119" pos:column="53"/></operator> <name pos:line="119" pos:column="54">string_space<pos:position pos:line="119" pos:column="66"/></name></expr>;<pos:position pos:line="119" pos:column="67"/></expr_stmt>
			}<pos:position pos:line="120" pos:column="26"/></block></for>
		    }<pos:position pos:line="121" pos:column="22"/></block></then></if>

		  <expr_stmt><expr><name pos:line="123" pos:column="19">string_space<pos:position pos:line="123" pos:column="31"/></name> <operator pos:line="123" pos:column="32">=<pos:position pos:line="123" pos:column="33"/></operator> <name pos:line="123" pos:column="34">new_pool<pos:position pos:line="123" pos:column="42"/></name></expr>;<pos:position pos:line="123" pos:column="43"/></expr_stmt>
		  <expr_stmt><expr><name pos:line="124" pos:column="19">string_space_max<pos:position pos:line="124" pos:column="35"/></name> <operator pos:line="124" pos:column="36">=<pos:position pos:line="124" pos:column="37"/></operator> <name pos:line="124" pos:column="38">new_size<pos:position pos:line="124" pos:column="46"/></name></expr>;<pos:position pos:line="124" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="125" pos:column="18"/></block></then></if>

	      <expr_stmt><expr><name><name pos:line="127" pos:column="15">map<pos:position pos:line="127" pos:column="18"/></name><index pos:line="127" pos:column="18">[<expr><name pos:line="127" pos:column="19">nmap<pos:position pos:line="127" pos:column="23"/></name></expr>]<pos:position pos:line="127" pos:column="24"/></index></name><operator pos:line="127" pos:column="24">.<pos:position pos:line="127" pos:column="25"/></operator><name pos:line="127" pos:column="25">alias<pos:position pos:line="127" pos:column="30"/></name> <operator pos:line="127" pos:column="31">=<pos:position pos:line="127" pos:column="32"/></operator> <call><name pos:line="127" pos:column="33">memcpy<pos:position pos:line="127" pos:column="39"/></name> <argument_list pos:line="127" pos:column="40">(<argument><expr><operator pos:line="127" pos:column="41">&amp;<pos:position pos:line="127" pos:column="46"/></operator><name><name pos:line="127" pos:column="42">string_space<pos:position pos:line="127" pos:column="54"/></name><index pos:line="127" pos:column="54">[<expr><name pos:line="127" pos:column="55">string_space_act<pos:position pos:line="127" pos:column="71"/></name></expr>]<pos:position pos:line="127" pos:column="72"/></index></name></expr></argument>,
					<argument><expr><name pos:line="128" pos:column="41">alias<pos:position pos:line="128" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="48">alias_len<pos:position pos:line="128" pos:column="57"/></name></expr></argument>)<pos:position pos:line="128" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="59"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="129" pos:column="15">string_space_act<pos:position pos:line="129" pos:column="31"/></name> <operator pos:line="129" pos:column="32">+=<pos:position pos:line="129" pos:column="34"/></operator> <name pos:line="129" pos:column="35">alias_len<pos:position pos:line="129" pos:column="44"/></name></expr>;<pos:position pos:line="129" pos:column="45"/></expr_stmt>

	      <expr_stmt><expr><name><name pos:line="131" pos:column="15">map<pos:position pos:line="131" pos:column="18"/></name><index pos:line="131" pos:column="18">[<expr><name pos:line="131" pos:column="19">nmap<pos:position pos:line="131" pos:column="23"/></name></expr>]<pos:position pos:line="131" pos:column="24"/></index></name><operator pos:line="131" pos:column="24">.<pos:position pos:line="131" pos:column="25"/></operator><name pos:line="131" pos:column="25">value<pos:position pos:line="131" pos:column="30"/></name> <operator pos:line="131" pos:column="31">=<pos:position pos:line="131" pos:column="32"/></operator> <call><name pos:line="131" pos:column="33">memcpy<pos:position pos:line="131" pos:column="39"/></name> <argument_list pos:line="131" pos:column="40">(<argument><expr><operator pos:line="131" pos:column="41">&amp;<pos:position pos:line="131" pos:column="46"/></operator><name><name pos:line="131" pos:column="42">string_space<pos:position pos:line="131" pos:column="54"/></name><index pos:line="131" pos:column="54">[<expr><name pos:line="131" pos:column="55">string_space_act<pos:position pos:line="131" pos:column="71"/></name></expr>]<pos:position pos:line="131" pos:column="72"/></index></name></expr></argument>,
					<argument><expr><name pos:line="132" pos:column="41">value<pos:position pos:line="132" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="48">value_len<pos:position pos:line="132" pos:column="57"/></name></expr></argument>)<pos:position pos:line="132" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="59"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="133" pos:column="15">string_space_act<pos:position pos:line="133" pos:column="31"/></name> <operator pos:line="133" pos:column="32">+=<pos:position pos:line="133" pos:column="34"/></operator> <name pos:line="133" pos:column="35">value_len<pos:position pos:line="133" pos:column="44"/></name></expr>;<pos:position pos:line="133" pos:column="45"/></expr_stmt>

	      <expr_stmt><expr><operator pos:line="135" pos:column="15">++<pos:position pos:line="135" pos:column="17"/></operator><name pos:line="135" pos:column="17">nmap<pos:position pos:line="135" pos:column="21"/></name></expr>;<pos:position pos:line="135" pos:column="22"/></expr_stmt>
	      <expr_stmt><expr><operator pos:line="136" pos:column="15">++<pos:position pos:line="136" pos:column="17"/></operator><name pos:line="136" pos:column="17">added<pos:position pos:line="136" pos:column="22"/></name></expr>;<pos:position pos:line="136" pos:column="23"/></expr_stmt>
	    }<pos:position pos:line="137" pos:column="14"/></block></then></if>
	}<pos:position pos:line="138" pos:column="10"/></block></then></if>
    }<pos:position pos:line="139" pos:column="6"/></block></while>

  <comment type="block" pos:line="141" pos:column="3">/* Should we test for ferror()?  I think we have to silently ignore
     errors.  --drepper  */</comment>
  <expr_stmt><expr><call><name pos:line="143" pos:column="3">fclose<pos:position pos:line="143" pos:column="9"/></name> <argument_list pos:line="143" pos:column="10">(<argument><expr><name pos:line="143" pos:column="11">fp<pos:position pos:line="143" pos:column="13"/></name></expr></argument>)<pos:position pos:line="143" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="15"/></expr_stmt>

  <if pos:line="145" pos:column="3">if <condition pos:line="145" pos:column="6">(<expr><name pos:line="145" pos:column="7">added<pos:position pos:line="145" pos:column="12"/></name> <operator pos:line="145" pos:column="13">&gt;<pos:position pos:line="145" pos:column="17"/></operator> <literal type="number" pos:line="145" pos:column="15">0<pos:position pos:line="145" pos:column="16"/></literal></expr>)<pos:position pos:line="145" pos:column="17"/></condition><then pos:line="145" pos:column="17">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="146" pos:column="5">qsort<pos:position pos:line="146" pos:column="10"/></name> <argument_list pos:line="146" pos:column="11">(<argument><expr><name pos:line="146" pos:column="12">map<pos:position pos:line="146" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="17">nmap<pos:position pos:line="146" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="146" pos:column="23">sizeof <argument_list pos:line="146" pos:column="30">(<argument><expr pos:line="146" pos:column="31">struct <name pos:line="146" pos:column="38">alias_map<pos:position pos:line="146" pos:column="47"/></name></expr></argument>)<pos:position pos:line="146" pos:column="48"/></argument_list></sizeof></expr></argument>,
	   <argument><expr><operator pos:line="147" pos:column="12">(<pos:position pos:line="147" pos:column="13"/></operator><macro><name pos:line="147" pos:column="13">int<pos:position pos:line="147" pos:column="16"/></name> <argument_list pos:line="147" pos:column="17">(<argument pos:line="147" pos:column="18">*<pos:position pos:line="147" pos:column="19"/></argument>)<pos:position pos:line="147" pos:column="20"/></argument_list></macro> <call><name pos:line="147" pos:column="21">PARAMS<pos:position pos:line="147" pos:column="27"/></name> <argument_list pos:line="147" pos:column="28">(<argument><expr><operator pos:line="147" pos:column="29">(<pos:position pos:line="147" pos:column="30"/></operator><specifier pos:line="147" pos:column="30">const<pos:position pos:line="147" pos:column="35"/></specifier> <name pos:line="147" pos:column="36">void<pos:position pos:line="147" pos:column="40"/></name> <operator pos:line="147" pos:column="41">*<pos:position pos:line="147" pos:column="42"/></operator><operator pos:line="147" pos:column="42">,<pos:position pos:line="147" pos:column="43"/></operator> <specifier pos:line="147" pos:column="44">const<pos:position pos:line="147" pos:column="49"/></specifier> <name pos:line="147" pos:column="50">void<pos:position pos:line="147" pos:column="54"/></name> <operator pos:line="147" pos:column="55">*<pos:position pos:line="147" pos:column="56"/></operator><operator pos:line="147" pos:column="56">)<pos:position pos:line="147" pos:column="57"/></operator></expr></argument>)<pos:position pos:line="147" pos:column="58"/></argument_list></call><operator pos:line="147" pos:column="58">)<pos:position pos:line="147" pos:column="59"/></operator> <name pos:line="147" pos:column="60">alias_compare<pos:position pos:line="147" pos:column="73"/></name></expr></argument>)<pos:position pos:line="147" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="75"/></expr_stmt></block></then></if>

  <return pos:line="149" pos:column="3">return <expr><name pos:line="149" pos:column="10">added<pos:position pos:line="149" pos:column="15"/></name></expr>;<pos:position pos:line="149" pos:column="16"/></return>
}<pos:position pos:line="150" pos:column="2"/></block></unit>
