<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1029_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">mutt_decode_uuencoded<pos:position pos:line="1" pos:column="34"/></name> <parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">STATE<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">s<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">long<pos:position pos:line="1" pos:column="50"/></name></type> <name pos:line="1" pos:column="51">len<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">istext<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="68">iconv_t<pos:position pos:line="1" pos:column="75"/></name></type> <name pos:line="1" pos:column="76">cd<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">tmps<pos:position pos:line="3" pos:column="12"/></name><index pos:line="3" pos:column="12">[<expr><name pos:line="3" pos:column="13">SHORT_STRING<pos:position pos:line="3" pos:column="25"/></name></expr>]<pos:position pos:line="3" pos:column="26"/></index></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name pos:line="4" pos:column="8">linelen<pos:position pos:line="4" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="17">c<pos:position pos:line="4" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="20">l<pos:position pos:line="4" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="23">out<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">pt<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">bufi<pos:position pos:line="6" pos:column="12"/></name><index pos:line="6" pos:column="12">[<expr><name pos:line="6" pos:column="13">BUFI_SIZE<pos:position pos:line="6" pos:column="22"/></name></expr>]<pos:position pos:line="6" pos:column="23"/></index></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">k<pos:position pos:line="7" pos:column="11"/></name> <init pos:line="7" pos:column="12">= <expr><literal type="number" pos:line="7" pos:column="14">0<pos:position pos:line="7" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>

  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><name pos:line="9" pos:column="6">istext<pos:position pos:line="9" pos:column="12"/></name></expr>)<pos:position pos:line="9" pos:column="13"/></condition><then pos:line="9" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="5">state_set_prefix<pos:position pos:line="10" pos:column="21"/></name><argument_list pos:line="10" pos:column="21">(<argument><expr><name pos:line="10" pos:column="22">s<pos:position pos:line="10" pos:column="23"/></name></expr></argument>)<pos:position pos:line="10" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="25"/></expr_stmt></block></then></if>
  
  <while pos:line="12" pos:column="3">while<condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">len<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">&gt;<pos:position pos:line="12" pos:column="17"/></operator> <literal type="number" pos:line="12" pos:column="15">0<pos:position pos:line="12" pos:column="16"/></literal></expr>)<pos:position pos:line="12" pos:column="17"/></condition>
  <block pos:line="13" pos:column="3">{
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">(<pos:position pos:line="14" pos:column="10"/></operator><call><name pos:line="14" pos:column="10">fgets<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">tmps<pos:position pos:line="14" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="22">sizeof<argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">tmps<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="36">s<pos:position pos:line="14" pos:column="37"/></name><operator pos:line="14" pos:column="37">-&gt;<pos:position pos:line="14" pos:column="42"/></operator><name pos:line="14" pos:column="39">fpin<pos:position pos:line="14" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call><operator pos:line="14" pos:column="44">)<pos:position pos:line="14" pos:column="45"/></operator> <operator pos:line="14" pos:column="46">==<pos:position pos:line="14" pos:column="48"/></operator> <name pos:line="14" pos:column="49">NULL<pos:position pos:line="14" pos:column="53"/></name></expr>)<pos:position pos:line="14" pos:column="54"/></condition><then pos:line="14" pos:column="54">
      <block type="pseudo"><return pos:line="15" pos:column="7">return;<pos:position pos:line="15" pos:column="14"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="16" pos:column="5">len<pos:position pos:line="16" pos:column="8"/></name> <operator pos:line="16" pos:column="9">-=<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">mutt_strlen<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">tmps<pos:position pos:line="16" pos:column="28"/></name></expr></argument>)<pos:position pos:line="16" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">(<pos:position pos:line="17" pos:column="10"/></operator><operator pos:line="17" pos:column="10">!<pos:position pos:line="17" pos:column="11"/></operator><call><name pos:line="17" pos:column="11">mutt_strncmp<pos:position pos:line="17" pos:column="23"/></name> <argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">tmps<pos:position pos:line="17" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="31">"begin"<pos:position pos:line="17" pos:column="38"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="40">5<pos:position pos:line="17" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="42"/></argument_list></call><operator pos:line="17" pos:column="42">)<pos:position pos:line="17" pos:column="43"/></operator> <operator pos:line="17" pos:column="44">&amp;&amp;<pos:position pos:line="17" pos:column="54"/></operator> <call><name pos:line="17" pos:column="47">ISSPACE<pos:position pos:line="17" pos:column="54"/></name> <argument_list pos:line="17" pos:column="55">(<argument><expr><name><name pos:line="17" pos:column="56">tmps<pos:position pos:line="17" pos:column="60"/></name><index pos:line="17" pos:column="60">[<expr><literal type="number" pos:line="17" pos:column="61">5<pos:position pos:line="17" pos:column="62"/></literal></expr>]<pos:position pos:line="17" pos:column="63"/></index></name></expr></argument>)<pos:position pos:line="17" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="65"/></condition><then pos:line="17" pos:column="65">
      <block type="pseudo"><break pos:line="18" pos:column="7">break;<pos:position pos:line="18" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="19" pos:column="4"/></block></while>
  <while pos:line="20" pos:column="3">while<condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">len<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">&gt;<pos:position pos:line="20" pos:column="17"/></operator> <literal type="number" pos:line="20" pos:column="15">0<pos:position pos:line="20" pos:column="16"/></literal></expr>)<pos:position pos:line="20" pos:column="17"/></condition>
  <block pos:line="21" pos:column="3">{
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">(<pos:position pos:line="22" pos:column="10"/></operator><call><name pos:line="22" pos:column="10">fgets<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name pos:line="22" pos:column="16">tmps<pos:position pos:line="22" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="22">sizeof<argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">tmps<pos:position pos:line="22" pos:column="33"/></name></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="36">s<pos:position pos:line="22" pos:column="37"/></name><operator pos:line="22" pos:column="37">-&gt;<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="39">fpin<pos:position pos:line="22" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="44"/></argument_list></call><operator pos:line="22" pos:column="44">)<pos:position pos:line="22" pos:column="45"/></operator> <operator pos:line="22" pos:column="46">==<pos:position pos:line="22" pos:column="48"/></operator> <name pos:line="22" pos:column="49">NULL<pos:position pos:line="22" pos:column="53"/></name></expr>)<pos:position pos:line="22" pos:column="54"/></condition><then pos:line="22" pos:column="54">
      <block type="pseudo"><return pos:line="23" pos:column="7">return;<pos:position pos:line="23" pos:column="14"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="24" pos:column="5">len<pos:position pos:line="24" pos:column="8"/></name> <operator pos:line="24" pos:column="9">-=<pos:position pos:line="24" pos:column="11"/></operator> <call><name pos:line="24" pos:column="12">mutt_strlen<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><name pos:line="24" pos:column="24">tmps<pos:position pos:line="24" pos:column="28"/></name></expr></argument>)<pos:position pos:line="24" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">!<pos:position pos:line="25" pos:column="10"/></operator><call><name pos:line="25" pos:column="10">mutt_strncmp<pos:position pos:line="25" pos:column="22"/></name> <argument_list pos:line="25" pos:column="23">(<argument><expr><name pos:line="25" pos:column="24">tmps<pos:position pos:line="25" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="30">"end"<pos:position pos:line="25" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="37">3<pos:position pos:line="25" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="40"/></condition><then pos:line="25" pos:column="40">
      <block type="pseudo"><break pos:line="26" pos:column="7">break;<pos:position pos:line="26" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><name pos:line="27" pos:column="5">pt<pos:position pos:line="27" pos:column="7"/></name> <operator pos:line="27" pos:column="8">=<pos:position pos:line="27" pos:column="9"/></operator> <name pos:line="27" pos:column="10">tmps<pos:position pos:line="27" pos:column="14"/></name></expr>;<pos:position pos:line="27" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="28" pos:column="5">linelen<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">=<pos:position pos:line="28" pos:column="14"/></operator> <call><name pos:line="28" pos:column="15">decode_byte<pos:position pos:line="28" pos:column="26"/></name> <argument_list pos:line="28" pos:column="27">(<argument><expr><operator pos:line="28" pos:column="28">*<pos:position pos:line="28" pos:column="29"/></operator><name pos:line="28" pos:column="29">pt<pos:position pos:line="28" pos:column="31"/></name></expr></argument>)<pos:position pos:line="28" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">pt<pos:position pos:line="29" pos:column="7"/></name><operator pos:line="29" pos:column="7">++<pos:position pos:line="29" pos:column="9"/></operator></expr>;<pos:position pos:line="29" pos:column="10"/></expr_stmt>
    <for pos:line="30" pos:column="5">for <control pos:line="30" pos:column="9">(<init><expr><name pos:line="30" pos:column="10">c<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <literal type="number" pos:line="30" pos:column="14">0<pos:position pos:line="30" pos:column="15"/></literal></expr>;<pos:position pos:line="30" pos:column="16"/></init> <condition><expr><name pos:line="30" pos:column="17">c<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">&lt;<pos:position pos:line="30" pos:column="23"/></operator> <name pos:line="30" pos:column="21">linelen<pos:position pos:line="30" pos:column="28"/></name></expr>;<pos:position pos:line="30" pos:column="29"/></condition><incr/>)<pos:position pos:line="30" pos:column="30"/></control>
    <block pos:line="31" pos:column="5">{
      <for pos:line="32" pos:column="7">for <control pos:line="32" pos:column="11">(<init><expr><name pos:line="32" pos:column="12">l<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">=<pos:position pos:line="32" pos:column="15"/></operator> <literal type="number" pos:line="32" pos:column="16">2<pos:position pos:line="32" pos:column="17"/></literal></expr>;<pos:position pos:line="32" pos:column="18"/></init> <condition><expr><name pos:line="32" pos:column="19">l<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">&lt;=<pos:position pos:line="32" pos:column="26"/></operator> <literal type="number" pos:line="32" pos:column="24">6<pos:position pos:line="32" pos:column="25"/></literal></expr>;<pos:position pos:line="32" pos:column="26"/></condition> <incr><expr><name pos:line="32" pos:column="27">l<pos:position pos:line="32" pos:column="28"/></name> <operator pos:line="32" pos:column="29">+=<pos:position pos:line="32" pos:column="31"/></operator> <literal type="number" pos:line="32" pos:column="32">2<pos:position pos:line="32" pos:column="33"/></literal></expr></incr>)<pos:position pos:line="32" pos:column="34"/></control>
      <block pos:line="33" pos:column="7">{
	<expr_stmt><expr><name pos:line="34" pos:column="9">out<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <call><name pos:line="34" pos:column="15">decode_byte<pos:position pos:line="34" pos:column="26"/></name> <argument_list pos:line="34" pos:column="27">(<argument><expr><operator pos:line="34" pos:column="28">*<pos:position pos:line="34" pos:column="29"/></operator><name pos:line="34" pos:column="29">pt<pos:position pos:line="34" pos:column="31"/></name></expr></argument>)<pos:position pos:line="34" pos:column="32"/></argument_list></call> <operator pos:line="34" pos:column="33">&lt;&lt;<pos:position pos:line="34" pos:column="41"/></operator> <name pos:line="34" pos:column="36">l<pos:position pos:line="34" pos:column="37"/></name></expr>;<pos:position pos:line="34" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name pos:line="35" pos:column="9">pt<pos:position pos:line="35" pos:column="11"/></name><operator pos:line="35" pos:column="11">++<pos:position pos:line="35" pos:column="13"/></operator></expr>;<pos:position pos:line="35" pos:column="14"/></expr_stmt>
	<expr_stmt><expr><name pos:line="36" pos:column="9">out<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">|=<pos:position pos:line="36" pos:column="15"/></operator> <operator pos:line="36" pos:column="16">(<pos:position pos:line="36" pos:column="17"/></operator><call><name pos:line="36" pos:column="17">decode_byte<pos:position pos:line="36" pos:column="28"/></name> <argument_list pos:line="36" pos:column="29">(<argument><expr><operator pos:line="36" pos:column="30">*<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="31">pt<pos:position pos:line="36" pos:column="33"/></name></expr></argument>)<pos:position pos:line="36" pos:column="34"/></argument_list></call> <operator pos:line="36" pos:column="35">&gt;&gt;<pos:position pos:line="36" pos:column="40"/></operator> <operator pos:line="36" pos:column="38">(<pos:position pos:line="36" pos:column="39"/></operator><literal type="number" pos:line="36" pos:column="39">6<pos:position pos:line="36" pos:column="40"/></literal> <operator pos:line="36" pos:column="41">-<pos:position pos:line="36" pos:column="42"/></operator> <name pos:line="36" pos:column="43">l<pos:position pos:line="36" pos:column="44"/></name><operator pos:line="36" pos:column="44">)<pos:position pos:line="36" pos:column="45"/></operator><operator pos:line="36" pos:column="45">)<pos:position pos:line="36" pos:column="46"/></operator></expr>;<pos:position pos:line="36" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="37" pos:column="9">bufi<pos:position pos:line="37" pos:column="13"/></name><index pos:line="37" pos:column="13">[<expr><name pos:line="37" pos:column="14">k<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">++<pos:position pos:line="37" pos:column="17"/></operator></expr>]<pos:position pos:line="37" pos:column="18"/></index></name> <operator pos:line="37" pos:column="19">=<pos:position pos:line="37" pos:column="20"/></operator> <name pos:line="37" pos:column="21">out<pos:position pos:line="37" pos:column="24"/></name></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name pos:line="38" pos:column="9">c<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">++<pos:position pos:line="38" pos:column="12"/></operator></expr>;<pos:position pos:line="38" pos:column="13"/></expr_stmt>
	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">c<pos:position pos:line="39" pos:column="14"/></name> <operator pos:line="39" pos:column="15">==<pos:position pos:line="39" pos:column="17"/></operator> <name pos:line="39" pos:column="18">linelen<pos:position pos:line="39" pos:column="25"/></name></expr>)<pos:position pos:line="39" pos:column="26"/></condition><then pos:line="39" pos:column="26">
	  <block type="pseudo"><break pos:line="40" pos:column="11">break;<pos:position pos:line="40" pos:column="17"/></break></block></then></if>
      }<pos:position pos:line="41" pos:column="8"/></block></for>
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">mutt_convert_to_state<pos:position pos:line="42" pos:column="28"/></name> <argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">cd<pos:position pos:line="42" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="34">bufi<pos:position pos:line="42" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="40">&amp;<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="41">k<pos:position pos:line="42" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="44">s<pos:position pos:line="42" pos:column="45"/></name></expr></argument>)<pos:position pos:line="42" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="47"/></expr_stmt>
      <expr_stmt><expr><name pos:line="43" pos:column="7">pt<pos:position pos:line="43" pos:column="9"/></name><operator pos:line="43" pos:column="9">++<pos:position pos:line="43" pos:column="11"/></operator></expr>;<pos:position pos:line="43" pos:column="12"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></for>
  }<pos:position pos:line="45" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="47" pos:column="3">mutt_convert_to_state<pos:position pos:line="47" pos:column="24"/></name> <argument_list pos:line="47" pos:column="25">(<argument><expr><name pos:line="47" pos:column="26">cd<pos:position pos:line="47" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="30">bufi<pos:position pos:line="47" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="36">&amp;<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="37">k<pos:position pos:line="47" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="40">s<pos:position pos:line="47" pos:column="41"/></name></expr></argument>)<pos:position pos:line="47" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="48" pos:column="3">mutt_convert_to_state<pos:position pos:line="48" pos:column="24"/></name> <argument_list pos:line="48" pos:column="25">(<argument><expr><name pos:line="48" pos:column="26">cd<pos:position pos:line="48" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="30">0<pos:position pos:line="48" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="33">0<pos:position pos:line="48" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="36">s<pos:position pos:line="48" pos:column="37"/></name></expr></argument>)<pos:position pos:line="48" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="39"/></expr_stmt>
  
  <expr_stmt><expr><call><name pos:line="50" pos:column="3">state_reset_prefix<pos:position pos:line="50" pos:column="21"/></name><argument_list pos:line="50" pos:column="21">(<argument><expr><name pos:line="50" pos:column="22">s<pos:position pos:line="50" pos:column="23"/></name></expr></argument>)<pos:position pos:line="50" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="25"/></expr_stmt>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
