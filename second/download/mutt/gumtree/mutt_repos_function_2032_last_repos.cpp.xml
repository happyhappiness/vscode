<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2032_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">cmd_parse_list<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">IMAP_DATA<pos:position pos:line="1" pos:column="38"/></name><modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type> <name pos:line="1" pos:column="40">idata<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name><modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type> <name pos:line="1" pos:column="53">s<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">IMAP_LIST<pos:position pos:line="3" pos:column="12"/></name><modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier></type> <name pos:line="3" pos:column="14">list<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">IMAP_LIST<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">lb<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">delimbuf<pos:position pos:line="5" pos:column="16"/></name><index pos:line="5" pos:column="16">[<expr><literal type="number" pos:line="5" pos:column="17">5<pos:position pos:line="5" pos:column="18"/></literal></expr>]<pos:position pos:line="5" pos:column="19"/></index></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt> <comment type="block" pos:line="5" pos:column="21">/* worst case: "\\"\0 */</comment>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">long<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">litlen<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name><name pos:line="8" pos:column="7">idata<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">-&gt;<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="14">cmddata<pos:position pos:line="8" pos:column="21"/></name></name> <operator pos:line="8" pos:column="22">&amp;&amp;<pos:position pos:line="8" pos:column="32"/></operator> <name><name pos:line="8" pos:column="25">idata<pos:position pos:line="8" pos:column="30"/></name><operator pos:line="8" pos:column="30">-&gt;<pos:position pos:line="8" pos:column="35"/></operator><name pos:line="8" pos:column="32">cmdtype<pos:position pos:line="8" pos:column="39"/></name></name> <operator pos:line="8" pos:column="40">==<pos:position pos:line="8" pos:column="42"/></operator> <name pos:line="8" pos:column="43">IMAP_CT_LIST<pos:position pos:line="8" pos:column="55"/></name></expr>)<pos:position pos:line="8" pos:column="56"/></condition><then pos:line="8" pos:column="56">
    <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="5">list<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">IMAP_LIST<pos:position pos:line="9" pos:column="22"/></name><operator pos:line="9" pos:column="22">*<pos:position pos:line="9" pos:column="23"/></operator><operator pos:line="9" pos:column="23">)<pos:position pos:line="9" pos:column="24"/></operator><name><name pos:line="9" pos:column="24">idata<pos:position pos:line="9" pos:column="29"/></name><operator pos:line="9" pos:column="29">-&gt;<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="31">cmddata<pos:position pos:line="9" pos:column="38"/></name></name></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt></block></then>
  <else pos:line="10" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="5">list<pos:position pos:line="11" pos:column="9"/></name> <operator pos:line="11" pos:column="10">=<pos:position pos:line="11" pos:column="11"/></operator> <operator pos:line="11" pos:column="12">&amp;<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="13">lb<pos:position pos:line="11" pos:column="15"/></name></expr>;<pos:position pos:line="11" pos:column="16"/></expr_stmt></block></else></if>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">memset<pos:position pos:line="13" pos:column="9"/></name> <argument_list pos:line="13" pos:column="10">(<argument><expr><name pos:line="13" pos:column="11">list<pos:position pos:line="13" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="20">sizeof <argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">IMAP_LIST<pos:position pos:line="13" pos:column="37"/></name></expr></argument>)<pos:position pos:line="13" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="40"/></expr_stmt>

  <comment type="block" pos:line="15" pos:column="3">/* flags */</comment>
  <expr_stmt><expr><name pos:line="16" pos:column="3">s<pos:position pos:line="16" pos:column="4"/></name> <operator pos:line="16" pos:column="5">=<pos:position pos:line="16" pos:column="6"/></operator> <call><name pos:line="16" pos:column="7">imap_next_word<pos:position pos:line="16" pos:column="21"/></name> <argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">s<pos:position pos:line="16" pos:column="24"/></name></expr></argument>)<pos:position pos:line="16" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><operator pos:line="17" pos:column="7">*<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">s<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">!=<pos:position pos:line="17" pos:column="12"/></operator> <literal type="char" pos:line="17" pos:column="13">'('<pos:position pos:line="17" pos:column="16"/></literal></expr>)<pos:position pos:line="17" pos:column="17"/></condition><then pos:line="17" pos:column="17">
  <block pos:line="18" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">dprint<pos:position pos:line="19" pos:column="11"/></name> <argument_list pos:line="19" pos:column="12">(<argument><expr><literal type="number" pos:line="19" pos:column="13">1<pos:position pos:line="19" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="16">(<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">debugfile<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">,<pos:position pos:line="19" pos:column="27"/></operator> <literal type="string" pos:line="19" pos:column="28">"Bad LIST response\n"<pos:position pos:line="19" pos:column="49"/></literal><operator pos:line="19" pos:column="49">)<pos:position pos:line="19" pos:column="50"/></operator></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="52"/></expr_stmt>
    <return pos:line="20" pos:column="5">return;<pos:position pos:line="20" pos:column="12"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="22" pos:column="3">s<pos:position pos:line="22" pos:column="4"/></name><operator pos:line="22" pos:column="4">++<pos:position pos:line="22" pos:column="6"/></operator></expr>;<pos:position pos:line="22" pos:column="7"/></expr_stmt>
  <while pos:line="23" pos:column="3">while <condition pos:line="23" pos:column="9">(<expr><operator pos:line="23" pos:column="10">*<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">s<pos:position pos:line="23" pos:column="12"/></name></expr>)<pos:position pos:line="23" pos:column="13"/></condition>
  <block pos:line="24" pos:column="3">{
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">!<pos:position pos:line="25" pos:column="10"/></operator><call><name pos:line="25" pos:column="10">ascii_strncasecmp<pos:position pos:line="25" pos:column="27"/></name> <argument_list pos:line="25" pos:column="28">(<argument><expr><name pos:line="25" pos:column="29">s<pos:position pos:line="25" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="32">"\\NoSelect"<pos:position pos:line="25" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="46">9<pos:position pos:line="25" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="49"/></condition><then pos:line="25" pos:column="49">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="26" pos:column="7">list<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">-&gt;<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="13">noselect<pos:position pos:line="26" pos:column="21"/></name></name> <operator pos:line="26" pos:column="22">=<pos:position pos:line="26" pos:column="23"/></operator> <literal type="number" pos:line="26" pos:column="24">1<pos:position pos:line="26" pos:column="25"/></literal></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt></block></then>
    <elseif pos:line="27" pos:column="5">else <if pos:line="27" pos:column="10">if <condition pos:line="27" pos:column="13">(<expr><operator pos:line="27" pos:column="14">!<pos:position pos:line="27" pos:column="15"/></operator><call><name pos:line="27" pos:column="15">ascii_strncasecmp<pos:position pos:line="27" pos:column="32"/></name> <argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">s<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="37">"\\NoInferiors"<pos:position pos:line="27" pos:column="52"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="54">12<pos:position pos:line="27" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="58"/></condition><then pos:line="27" pos:column="58">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="28" pos:column="7">list<pos:position pos:line="28" pos:column="11"/></name><operator pos:line="28" pos:column="11">-&gt;<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="13">noinferiors<pos:position pos:line="28" pos:column="24"/></name></name> <operator pos:line="28" pos:column="25">=<pos:position pos:line="28" pos:column="26"/></operator> <literal type="number" pos:line="28" pos:column="27">1<pos:position pos:line="28" pos:column="28"/></literal></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt></block></then></if></elseif>
    <comment type="block" pos:line="29" pos:column="5">/* See draft-gahrns-imap-child-mailbox-?? */</comment>
    <elseif pos:line="30" pos:column="5">else <if pos:line="30" pos:column="10">if <condition pos:line="30" pos:column="13">(<expr><operator pos:line="30" pos:column="14">!<pos:position pos:line="30" pos:column="15"/></operator><call><name pos:line="30" pos:column="15">ascii_strncasecmp<pos:position pos:line="30" pos:column="32"/></name> <argument_list pos:line="30" pos:column="33">(<argument><expr><name pos:line="30" pos:column="34">s<pos:position pos:line="30" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="37">"\\HasNoChildren"<pos:position pos:line="30" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="56">14<pos:position pos:line="30" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="60"/></condition><then pos:line="30" pos:column="60">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="7">list<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">-&gt;<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="13">noinferiors<pos:position pos:line="31" pos:column="24"/></name></name> <operator pos:line="31" pos:column="25">=<pos:position pos:line="31" pos:column="26"/></operator> <literal type="number" pos:line="31" pos:column="27">1<pos:position pos:line="31" pos:column="28"/></literal></expr>;<pos:position pos:line="31" pos:column="29"/></expr_stmt></block></then></if></elseif></if>
    
    <expr_stmt><expr><name pos:line="33" pos:column="5">s<pos:position pos:line="33" pos:column="6"/></name> <operator pos:line="33" pos:column="7">=<pos:position pos:line="33" pos:column="8"/></operator> <call><name pos:line="33" pos:column="9">imap_next_word<pos:position pos:line="33" pos:column="23"/></name> <argument_list pos:line="33" pos:column="24">(<argument><expr><name pos:line="33" pos:column="25">s<pos:position pos:line="33" pos:column="26"/></name></expr></argument>)<pos:position pos:line="33" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><operator pos:line="34" pos:column="9">*<pos:position pos:line="34" pos:column="10"/></operator><operator pos:line="34" pos:column="10">(<pos:position pos:line="34" pos:column="11"/></operator><name pos:line="34" pos:column="11">s<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">-<pos:position pos:line="34" pos:column="14"/></operator> <literal type="number" pos:line="34" pos:column="15">2<pos:position pos:line="34" pos:column="16"/></literal><operator pos:line="34" pos:column="16">)<pos:position pos:line="34" pos:column="17"/></operator> <operator pos:line="34" pos:column="18">==<pos:position pos:line="34" pos:column="20"/></operator> <literal type="char" pos:line="34" pos:column="21">')'<pos:position pos:line="34" pos:column="24"/></literal></expr>)<pos:position pos:line="34" pos:column="25"/></condition><then pos:line="34" pos:column="25">
      <block type="pseudo"><break pos:line="35" pos:column="7">break;<pos:position pos:line="35" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="36" pos:column="4"/></block></while>

  <comment type="block" pos:line="38" pos:column="3">/* Delimiter */</comment>
  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><call><name pos:line="39" pos:column="7">ascii_strncasecmp<pos:position pos:line="39" pos:column="24"/></name> <argument_list pos:line="39" pos:column="25">(<argument><expr><name pos:line="39" pos:column="26">s<pos:position pos:line="39" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="29">"NIL"<pos:position pos:line="39" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="36">3<pos:position pos:line="39" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="39"/></condition><then pos:line="39" pos:column="39">
  <block pos:line="40" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="41" pos:column="5">delimbuf<pos:position pos:line="41" pos:column="13"/></name><index pos:line="41" pos:column="13">[<expr><literal type="number" pos:line="41" pos:column="14">0<pos:position pos:line="41" pos:column="15"/></literal></expr>]<pos:position pos:line="41" pos:column="16"/></index></name> <operator pos:line="41" pos:column="17">=<pos:position pos:line="41" pos:column="18"/></operator> <literal type="char" pos:line="41" pos:column="19">'\0'<pos:position pos:line="41" pos:column="23"/></literal></expr>;<pos:position pos:line="41" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">safe_strcat<pos:position pos:line="42" pos:column="16"/></name> <argument_list pos:line="42" pos:column="17">(<argument><expr><name pos:line="42" pos:column="18">delimbuf<pos:position pos:line="42" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="28">5<pos:position pos:line="42" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="31">s<pos:position pos:line="42" pos:column="32"/></name></expr></argument>)<pos:position pos:line="42" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="34"/></expr_stmt> 
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">imap_unquote_string<pos:position pos:line="43" pos:column="24"/></name> <argument_list pos:line="43" pos:column="25">(<argument><expr><name pos:line="43" pos:column="26">delimbuf<pos:position pos:line="43" pos:column="34"/></name></expr></argument>)<pos:position pos:line="43" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="44" pos:column="5">list<pos:position pos:line="44" pos:column="9"/></name><operator pos:line="44" pos:column="9">-&gt;<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="11">delim<pos:position pos:line="44" pos:column="16"/></name></name> <operator pos:line="44" pos:column="17">=<pos:position pos:line="44" pos:column="18"/></operator> <name><name pos:line="44" pos:column="19">delimbuf<pos:position pos:line="44" pos:column="27"/></name><index pos:line="44" pos:column="27">[<expr><literal type="number" pos:line="44" pos:column="28">0<pos:position pos:line="44" pos:column="29"/></literal></expr>]<pos:position pos:line="44" pos:column="30"/></index></name></expr>;<pos:position pos:line="44" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="45" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="47" pos:column="3">/* Name */</comment>
  <expr_stmt><expr><name pos:line="48" pos:column="3">s<pos:position pos:line="48" pos:column="4"/></name> <operator pos:line="48" pos:column="5">=<pos:position pos:line="48" pos:column="6"/></operator> <call><name pos:line="48" pos:column="7">imap_next_word<pos:position pos:line="48" pos:column="21"/></name> <argument_list pos:line="48" pos:column="22">(<argument><expr><name pos:line="48" pos:column="23">s<pos:position pos:line="48" pos:column="24"/></name></expr></argument>)<pos:position pos:line="48" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="26"/></expr_stmt>
  <comment type="block" pos:line="49" pos:column="3">/* Notes often responds with literals here. We need a real tokenizer. */</comment>
  <if pos:line="50" pos:column="3">if <condition pos:line="50" pos:column="6">(<expr><operator pos:line="50" pos:column="7">!<pos:position pos:line="50" pos:column="8"/></operator><call><name pos:line="50" pos:column="8">imap_get_literal_count<pos:position pos:line="50" pos:column="30"/></name> <argument_list pos:line="50" pos:column="31">(<argument><expr><name pos:line="50" pos:column="32">s<pos:position pos:line="50" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="35">&amp;<pos:position pos:line="50" pos:column="40"/></operator><name pos:line="50" pos:column="36">litlen<pos:position pos:line="50" pos:column="42"/></name></expr></argument>)<pos:position pos:line="50" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="44"/></condition><then pos:line="50" pos:column="44">
  <block pos:line="51" pos:column="3">{
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><call><name pos:line="52" pos:column="9">imap_cmd_step<pos:position pos:line="52" pos:column="22"/></name> <argument_list pos:line="52" pos:column="23">(<argument><expr><name pos:line="52" pos:column="24">idata<pos:position pos:line="52" pos:column="29"/></name></expr></argument>)<pos:position pos:line="52" pos:column="30"/></argument_list></call> <operator pos:line="52" pos:column="31">!=<pos:position pos:line="52" pos:column="33"/></operator> <name pos:line="52" pos:column="34">IMAP_CMD_CONTINUE<pos:position pos:line="52" pos:column="51"/></name></expr>)<pos:position pos:line="52" pos:column="52"/></condition><then pos:line="52" pos:column="52">
    <block pos:line="53" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="54" pos:column="7">idata<pos:position pos:line="54" pos:column="12"/></name><operator pos:line="54" pos:column="12">-&gt;<pos:position pos:line="54" pos:column="17"/></operator><name pos:line="54" pos:column="14">status<pos:position pos:line="54" pos:column="20"/></name></name> <operator pos:line="54" pos:column="21">=<pos:position pos:line="54" pos:column="22"/></operator> <name pos:line="54" pos:column="23">IMAP_FATAL<pos:position pos:line="54" pos:column="33"/></name></expr>;<pos:position pos:line="54" pos:column="34"/></expr_stmt>
      <return pos:line="55" pos:column="7">return;<pos:position pos:line="55" pos:column="14"/></return>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="57" pos:column="5">list<pos:position pos:line="57" pos:column="9"/></name><operator pos:line="57" pos:column="9">-&gt;<pos:position pos:line="57" pos:column="14"/></operator><name pos:line="57" pos:column="11">name<pos:position pos:line="57" pos:column="15"/></name></name> <operator pos:line="57" pos:column="16">=<pos:position pos:line="57" pos:column="17"/></operator> <name><name pos:line="57" pos:column="18">idata<pos:position pos:line="57" pos:column="23"/></name><operator pos:line="57" pos:column="23">-&gt;<pos:position pos:line="57" pos:column="28"/></operator><name pos:line="57" pos:column="25">buf<pos:position pos:line="57" pos:column="28"/></name></name></expr>;<pos:position pos:line="57" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="58" pos:column="4"/></block></then>
  <else pos:line="59" pos:column="3">else
  <block pos:line="60" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">imap_unmunge_mbox_name<pos:position pos:line="61" pos:column="27"/></name> <argument_list pos:line="61" pos:column="28">(<argument><expr><name pos:line="61" pos:column="29">idata<pos:position pos:line="61" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="36">s<pos:position pos:line="61" pos:column="37"/></name></expr></argument>)<pos:position pos:line="61" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="62" pos:column="5">list<pos:position pos:line="62" pos:column="9"/></name><operator pos:line="62" pos:column="9">-&gt;<pos:position pos:line="62" pos:column="14"/></operator><name pos:line="62" pos:column="11">name<pos:position pos:line="62" pos:column="15"/></name></name> <operator pos:line="62" pos:column="16">=<pos:position pos:line="62" pos:column="17"/></operator> <name pos:line="62" pos:column="18">s<pos:position pos:line="62" pos:column="19"/></name></expr>;<pos:position pos:line="62" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="63" pos:column="4"/></block></else></if>

  <if pos:line="65" pos:column="3">if <condition pos:line="65" pos:column="6">(<expr><name><name pos:line="65" pos:column="7">list<pos:position pos:line="65" pos:column="11"/></name><operator pos:line="65" pos:column="11">-&gt;<pos:position pos:line="65" pos:column="16"/></operator><name pos:line="65" pos:column="13">name<pos:position pos:line="65" pos:column="17"/></name><index pos:line="65" pos:column="17">[<expr><literal type="number" pos:line="65" pos:column="18">0<pos:position pos:line="65" pos:column="19"/></literal></expr>]<pos:position pos:line="65" pos:column="20"/></index></name> <operator pos:line="65" pos:column="21">==<pos:position pos:line="65" pos:column="23"/></operator> <literal type="char" pos:line="65" pos:column="24">'\0'<pos:position pos:line="65" pos:column="28"/></literal></expr>)<pos:position pos:line="65" pos:column="29"/></condition><then pos:line="65" pos:column="29">
  <block pos:line="66" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="67" pos:column="5">idata<pos:position pos:line="67" pos:column="10"/></name><operator pos:line="67" pos:column="10">-&gt;<pos:position pos:line="67" pos:column="15"/></operator><name pos:line="67" pos:column="12">delim<pos:position pos:line="67" pos:column="17"/></name></name> <operator pos:line="67" pos:column="18">=<pos:position pos:line="67" pos:column="19"/></operator> <name><name pos:line="67" pos:column="20">list<pos:position pos:line="67" pos:column="24"/></name><operator pos:line="67" pos:column="24">-&gt;<pos:position pos:line="67" pos:column="29"/></operator><name pos:line="67" pos:column="26">delim<pos:position pos:line="67" pos:column="31"/></name></name></expr>;<pos:position pos:line="67" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">dprint<pos:position pos:line="68" pos:column="11"/></name> <argument_list pos:line="68" pos:column="12">(<argument><expr><literal type="number" pos:line="68" pos:column="13">3<pos:position pos:line="68" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="68" pos:column="16">(<pos:position pos:line="68" pos:column="17"/></operator><name pos:line="68" pos:column="17">debugfile<pos:position pos:line="68" pos:column="26"/></name><operator pos:line="68" pos:column="26">,<pos:position pos:line="68" pos:column="27"/></operator> <literal type="string" pos:line="68" pos:column="28">"Root delimiter: %c\n"<pos:position pos:line="68" pos:column="50"/></literal><operator pos:line="68" pos:column="50">,<pos:position pos:line="68" pos:column="51"/></operator> <name><name pos:line="68" pos:column="52">idata<pos:position pos:line="68" pos:column="57"/></name><operator pos:line="68" pos:column="57">-&gt;<pos:position pos:line="68" pos:column="62"/></operator><name pos:line="68" pos:column="59">delim<pos:position pos:line="68" pos:column="64"/></name></name><operator pos:line="68" pos:column="64">)<pos:position pos:line="68" pos:column="65"/></operator></expr></argument>)<pos:position pos:line="68" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="67"/></expr_stmt>
  }<pos:position pos:line="69" pos:column="4"/></block></then></if>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
