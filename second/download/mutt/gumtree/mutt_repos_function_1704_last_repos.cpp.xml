<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1704_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">mutt_smtp_send<pos:position pos:line="2" pos:column="15"/></name> <parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">ADDRESS<pos:position pos:line="2" pos:column="30"/></name><modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type> <name pos:line="2" pos:column="32">from<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name pos:line="2" pos:column="44">ADDRESS<pos:position pos:line="2" pos:column="51"/></name><modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type> <name pos:line="2" pos:column="53">to<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="57">const<pos:position pos:line="2" pos:column="62"/></specifier> <name pos:line="2" pos:column="63">ADDRESS<pos:position pos:line="2" pos:column="70"/></name><modifier pos:line="2" pos:column="70">*<pos:position pos:line="2" pos:column="71"/></modifier></type> <name pos:line="2" pos:column="72">cc<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>,
                <parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name pos:line="3" pos:column="23">ADDRESS<pos:position pos:line="3" pos:column="30"/></name><modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier></type> <name pos:line="3" pos:column="32">bcc<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="37">const<pos:position pos:line="3" pos:column="42"/></specifier> <name pos:line="3" pos:column="43">char<pos:position pos:line="3" pos:column="47"/></name> <modifier pos:line="3" pos:column="48">*<pos:position pos:line="3" pos:column="49"/></modifier></type><name pos:line="3" pos:column="49">msgfile<pos:position pos:line="3" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="58">int<pos:position pos:line="3" pos:column="61"/></name></type> <name pos:line="3" pos:column="62">eightbit<pos:position pos:line="3" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="71"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CONNECTION<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">conn<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">ACCOUNT<pos:position pos:line="6" pos:column="10"/></name></type> <name pos:line="6" pos:column="11">account<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name><modifier pos:line="7" pos:column="13">*<pos:position pos:line="7" pos:column="14"/></modifier></type> <name pos:line="7" pos:column="15">envfrom<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">buf<pos:position pos:line="8" pos:column="11"/></name><index pos:line="8" pos:column="11">[<expr><literal type="number" pos:line="8" pos:column="12">1024<pos:position pos:line="8" pos:column="16"/></literal></expr>]<pos:position pos:line="8" pos:column="17"/></index></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">ret<pos:position pos:line="9" pos:column="10"/></name> <init pos:line="9" pos:column="11">= <expr><operator pos:line="9" pos:column="13">-<pos:position pos:line="9" pos:column="14"/></operator><literal type="number" pos:line="9" pos:column="14">1<pos:position pos:line="9" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* it might be better to synthesize an envelope from from user and host
   * but this condition is most likely arrived at accidentally */</comment>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">EnvFrom<pos:position pos:line="13" pos:column="14"/></name></expr>)<pos:position pos:line="13" pos:column="15"/></condition><then pos:line="13" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="5">envfrom<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">=<pos:position pos:line="14" pos:column="14"/></operator> <name><name pos:line="14" pos:column="15">EnvFrom<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">-&gt;<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="24">mailbox<pos:position pos:line="14" pos:column="31"/></name></name></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt></block></then>
  <elseif pos:line="15" pos:column="3">else <if pos:line="15" pos:column="8">if <condition pos:line="15" pos:column="11">(<expr><name pos:line="15" pos:column="12">from<pos:position pos:line="15" pos:column="16"/></name></expr>)<pos:position pos:line="15" pos:column="17"/></condition><then pos:line="15" pos:column="17">
    <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="5">envfrom<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <name><name pos:line="16" pos:column="15">from<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">-&gt;<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="21">mailbox<pos:position pos:line="16" pos:column="28"/></name></name></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt></block></then></if></elseif>
  <else pos:line="17" pos:column="3">else
  <block pos:line="18" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">mutt_error<pos:position pos:line="19" pos:column="15"/></name> <argument_list pos:line="19" pos:column="16">(<argument><expr><call><name pos:line="19" pos:column="17">_<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><literal type="string" pos:line="19" pos:column="19">"No from address given"<pos:position pos:line="19" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="45"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">-<pos:position pos:line="20" pos:column="13"/></operator><literal type="number" pos:line="20" pos:column="13">1<pos:position pos:line="20" pos:column="14"/></literal></expr>;<pos:position pos:line="20" pos:column="15"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></else></if>

  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><call><name pos:line="23" pos:column="7">smtp_fill_account<pos:position pos:line="23" pos:column="24"/></name> <argument_list pos:line="23" pos:column="25">(<argument><expr><operator pos:line="23" pos:column="26">&amp;<pos:position pos:line="23" pos:column="31"/></operator><name pos:line="23" pos:column="27">account<pos:position pos:line="23" pos:column="34"/></name></expr></argument>)<pos:position pos:line="23" pos:column="35"/></argument_list></call> <operator pos:line="23" pos:column="36">&lt;<pos:position pos:line="23" pos:column="40"/></operator> <literal type="number" pos:line="23" pos:column="38">0<pos:position pos:line="23" pos:column="39"/></literal></expr>)<pos:position pos:line="23" pos:column="40"/></condition><then pos:line="23" pos:column="40">
    <block type="pseudo"><return pos:line="24" pos:column="5">return <expr><name pos:line="24" pos:column="12">ret<pos:position pos:line="24" pos:column="15"/></name></expr>;<pos:position pos:line="24" pos:column="16"/></return></block></then></if>

  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><operator pos:line="26" pos:column="7">!<pos:position pos:line="26" pos:column="8"/></operator><operator pos:line="26" pos:column="8">(<pos:position pos:line="26" pos:column="9"/></operator><name pos:line="26" pos:column="9">conn<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">=<pos:position pos:line="26" pos:column="15"/></operator> <call><name pos:line="26" pos:column="16">mutt_conn_find<pos:position pos:line="26" pos:column="30"/></name> <argument_list pos:line="26" pos:column="31">(<argument><expr><name pos:line="26" pos:column="32">NULL<pos:position pos:line="26" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="38">&amp;<pos:position pos:line="26" pos:column="43"/></operator><name pos:line="26" pos:column="39">account<pos:position pos:line="26" pos:column="46"/></name></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call><operator pos:line="26" pos:column="47">)<pos:position pos:line="26" pos:column="48"/></operator></expr>)<pos:position pos:line="26" pos:column="49"/></condition><then pos:line="26" pos:column="49">
    <block type="pseudo"><return pos:line="27" pos:column="5">return <expr><operator pos:line="27" pos:column="12">-<pos:position pos:line="27" pos:column="13"/></operator><literal type="number" pos:line="27" pos:column="13">1<pos:position pos:line="27" pos:column="14"/></literal></expr>;<pos:position pos:line="27" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="29" pos:column="3">Esmtp<pos:position pos:line="29" pos:column="8"/></name> <operator pos:line="29" pos:column="9">=<pos:position pos:line="29" pos:column="10"/></operator> <name pos:line="29" pos:column="11">eightbit<pos:position pos:line="29" pos:column="19"/></name></expr>;<pos:position pos:line="29" pos:column="20"/></expr_stmt>

  <do pos:line="31" pos:column="3">do
  <block pos:line="32" pos:column="3">{
    <comment type="block" pos:line="33" pos:column="5">/* send our greeting */</comment>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><operator pos:line="34" pos:column="9">(<pos:position pos:line="34" pos:column="10"/></operator> <name pos:line="34" pos:column="11">ret<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">=<pos:position pos:line="34" pos:column="16"/></operator> <call><name pos:line="34" pos:column="17">smtp_open<pos:position pos:line="34" pos:column="26"/></name> <argument_list pos:line="34" pos:column="27">(<argument><expr><name pos:line="34" pos:column="28">conn<pos:position pos:line="34" pos:column="32"/></name></expr></argument>)<pos:position pos:line="34" pos:column="33"/></argument_list></call><operator pos:line="34" pos:column="33">)<pos:position pos:line="34" pos:column="34"/></operator></expr>)<pos:position pos:line="34" pos:column="35"/></condition><then pos:line="34" pos:column="35">
      <block type="pseudo"><break pos:line="35" pos:column="7">break;<pos:position pos:line="35" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">FREE<pos:position pos:line="36" pos:column="9"/></name> <argument_list pos:line="36" pos:column="10">(<argument><expr><operator pos:line="36" pos:column="11">&amp;<pos:position pos:line="36" pos:column="16"/></operator><name pos:line="36" pos:column="12">AuthMechs<pos:position pos:line="36" pos:column="21"/></name></expr></argument>)<pos:position pos:line="36" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="23"/></expr_stmt>

    <comment type="block" pos:line="38" pos:column="5">/* send the sender's address */</comment>
    <expr_stmt><expr><name pos:line="39" pos:column="5">ret<pos:position pos:line="39" pos:column="8"/></name> <operator pos:line="39" pos:column="9">=<pos:position pos:line="39" pos:column="10"/></operator> <call><name pos:line="39" pos:column="11">snprintf<pos:position pos:line="39" pos:column="19"/></name> <argument_list pos:line="39" pos:column="20">(<argument><expr><name pos:line="39" pos:column="21">buf<pos:position pos:line="39" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="26">sizeof <argument_list pos:line="39" pos:column="33">(<argument><expr><name pos:line="39" pos:column="34">buf<pos:position pos:line="39" pos:column="37"/></name></expr></argument>)<pos:position pos:line="39" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="40">"MAIL FROM:&lt;%s&gt;"<pos:position pos:line="39" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="58">envfrom<pos:position pos:line="39" pos:column="65"/></name></expr></argument>)<pos:position pos:line="39" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="67"/></expr_stmt>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">eightbit<pos:position pos:line="40" pos:column="17"/></name> <operator pos:line="40" pos:column="18">&amp;&amp;<pos:position pos:line="40" pos:column="28"/></operator> <call><name pos:line="40" pos:column="21">mutt_bit_isset<pos:position pos:line="40" pos:column="35"/></name> <argument_list pos:line="40" pos:column="36">(<argument><expr><name pos:line="40" pos:column="37">Capabilities<pos:position pos:line="40" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="51">EIGHTBITMIME<pos:position pos:line="40" pos:column="63"/></name></expr></argument>)<pos:position pos:line="40" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="65"/></condition><then pos:line="40" pos:column="65">
    <block pos:line="41" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">safe_strncat<pos:position pos:line="42" pos:column="19"/></name> <argument_list pos:line="42" pos:column="20">(<argument><expr><name pos:line="42" pos:column="21">buf<pos:position pos:line="42" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="26">sizeof <argument_list pos:line="42" pos:column="33">(<argument><expr><name pos:line="42" pos:column="34">buf<pos:position pos:line="42" pos:column="37"/></name></expr></argument>)<pos:position pos:line="42" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="40">" BODY=8BITMIME"<pos:position pos:line="42" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="58">15<pos:position pos:line="42" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="62"/></expr_stmt>
      <expr_stmt><expr><name pos:line="43" pos:column="7">ret<pos:position pos:line="43" pos:column="10"/></name> <operator pos:line="43" pos:column="11">+=<pos:position pos:line="43" pos:column="13"/></operator> <literal type="number" pos:line="43" pos:column="14">14<pos:position pos:line="43" pos:column="16"/></literal></expr>;<pos:position pos:line="43" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">DsnReturn<pos:position pos:line="45" pos:column="18"/></name> <operator pos:line="45" pos:column="19">&amp;&amp;<pos:position pos:line="45" pos:column="29"/></operator> <call><name pos:line="45" pos:column="22">mutt_bit_isset<pos:position pos:line="45" pos:column="36"/></name> <argument_list pos:line="45" pos:column="37">(<argument><expr><name pos:line="45" pos:column="38">Capabilities<pos:position pos:line="45" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="52">DSN<pos:position pos:line="45" pos:column="55"/></name></expr></argument>)<pos:position pos:line="45" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="57"/></condition><then pos:line="45" pos:column="57">
      <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="7">ret<pos:position pos:line="46" pos:column="10"/></name> <operator pos:line="46" pos:column="11">+=<pos:position pos:line="46" pos:column="13"/></operator> <call><name pos:line="46" pos:column="14">snprintf<pos:position pos:line="46" pos:column="22"/></name> <argument_list pos:line="46" pos:column="23">(<argument><expr><name pos:line="46" pos:column="24">buf<pos:position pos:line="46" pos:column="27"/></name> <operator pos:line="46" pos:column="28">+<pos:position pos:line="46" pos:column="29"/></operator> <name pos:line="46" pos:column="30">ret<pos:position pos:line="46" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="35">sizeof <argument_list pos:line="46" pos:column="42">(<argument><expr><name pos:line="46" pos:column="43">buf<pos:position pos:line="46" pos:column="46"/></name></expr></argument>)<pos:position pos:line="46" pos:column="47"/></argument_list></sizeof> <operator pos:line="46" pos:column="48">-<pos:position pos:line="46" pos:column="49"/></operator> <name pos:line="46" pos:column="50">ret<pos:position pos:line="46" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="55">" RET=%s"<pos:position pos:line="46" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="66">DsnReturn<pos:position pos:line="46" pos:column="75"/></name></expr></argument>)<pos:position pos:line="46" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="77"/></expr_stmt></block></then></if>
    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><call><name pos:line="47" pos:column="9">mutt_bit_isset<pos:position pos:line="47" pos:column="23"/></name> <argument_list pos:line="47" pos:column="24">(<argument><expr><name pos:line="47" pos:column="25">Capabilities<pos:position pos:line="47" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="39">SMTPUTF8<pos:position pos:line="47" pos:column="47"/></name></expr></argument>)<pos:position pos:line="47" pos:column="48"/></argument_list></call> <operator pos:line="47" pos:column="49">&amp;&amp;<pos:position pos:line="47" pos:column="59"/></operator>
	<operator pos:line="48" pos:column="9">(<pos:position pos:line="48" pos:column="10"/></operator><call><name pos:line="48" pos:column="10">address_uses_unicode<pos:position pos:line="48" pos:column="30"/></name><argument_list pos:line="48" pos:column="30">(<argument><expr><name pos:line="48" pos:column="31">envfrom<pos:position pos:line="48" pos:column="38"/></name></expr></argument>)<pos:position pos:line="48" pos:column="39"/></argument_list></call> <operator pos:line="48" pos:column="40">||<pos:position pos:line="48" pos:column="42"/></operator>
	 <call><name pos:line="49" pos:column="10">addresses_use_unicode<pos:position pos:line="49" pos:column="31"/></name><argument_list pos:line="49" pos:column="31">(<argument><expr><name pos:line="49" pos:column="32">to<pos:position pos:line="49" pos:column="34"/></name></expr></argument>)<pos:position pos:line="49" pos:column="35"/></argument_list></call> <operator pos:line="49" pos:column="36">||<pos:position pos:line="49" pos:column="38"/></operator>
	 <call><name pos:line="50" pos:column="10">addresses_use_unicode<pos:position pos:line="50" pos:column="31"/></name><argument_list pos:line="50" pos:column="31">(<argument><expr><name pos:line="50" pos:column="32">cc<pos:position pos:line="50" pos:column="34"/></name></expr></argument>)<pos:position pos:line="50" pos:column="35"/></argument_list></call> <operator pos:line="50" pos:column="36">||<pos:position pos:line="50" pos:column="38"/></operator>
	 <call><name pos:line="51" pos:column="10">addresses_use_unicode<pos:position pos:line="51" pos:column="31"/></name><argument_list pos:line="51" pos:column="31">(<argument><expr><name pos:line="51" pos:column="32">bcc<pos:position pos:line="51" pos:column="35"/></name></expr></argument>)<pos:position pos:line="51" pos:column="36"/></argument_list></call><operator pos:line="51" pos:column="36">)<pos:position pos:line="51" pos:column="37"/></operator></expr>)<pos:position pos:line="51" pos:column="38"/></condition><then pos:line="51" pos:column="38">
      <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="7">ret<pos:position pos:line="52" pos:column="10"/></name> <operator pos:line="52" pos:column="11">+=<pos:position pos:line="52" pos:column="13"/></operator> <call><name pos:line="52" pos:column="14">snprintf<pos:position pos:line="52" pos:column="22"/></name> <argument_list pos:line="52" pos:column="23">(<argument><expr><name pos:line="52" pos:column="24">buf<pos:position pos:line="52" pos:column="27"/></name> <operator pos:line="52" pos:column="28">+<pos:position pos:line="52" pos:column="29"/></operator> <name pos:line="52" pos:column="30">ret<pos:position pos:line="52" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="52" pos:column="35">sizeof <argument_list pos:line="52" pos:column="42">(<argument><expr><name pos:line="52" pos:column="43">buf<pos:position pos:line="52" pos:column="46"/></name></expr></argument>)<pos:position pos:line="52" pos:column="47"/></argument_list></sizeof> <operator pos:line="52" pos:column="48">-<pos:position pos:line="52" pos:column="49"/></operator> <name pos:line="52" pos:column="50">ret<pos:position pos:line="52" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="55">" SMTPUTF8"<pos:position pos:line="52" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="68"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">safe_strncat<pos:position pos:line="53" pos:column="17"/></name> <argument_list pos:line="53" pos:column="18">(<argument><expr><name pos:line="53" pos:column="19">buf<pos:position pos:line="53" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="24">sizeof <argument_list pos:line="53" pos:column="31">(<argument><expr><name pos:line="53" pos:column="32">buf<pos:position pos:line="53" pos:column="35"/></name></expr></argument>)<pos:position pos:line="53" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="38">"\r\n"<pos:position pos:line="53" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="46">3<pos:position pos:line="53" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="49"/></expr_stmt>
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><call><name pos:line="54" pos:column="9">mutt_socket_write<pos:position pos:line="54" pos:column="26"/></name> <argument_list pos:line="54" pos:column="27">(<argument><expr><name pos:line="54" pos:column="28">conn<pos:position pos:line="54" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="34">buf<pos:position pos:line="54" pos:column="37"/></name></expr></argument>)<pos:position pos:line="54" pos:column="38"/></argument_list></call> <operator pos:line="54" pos:column="39">==<pos:position pos:line="54" pos:column="41"/></operator> <operator pos:line="54" pos:column="42">-<pos:position pos:line="54" pos:column="43"/></operator><literal type="number" pos:line="54" pos:column="43">1<pos:position pos:line="54" pos:column="44"/></literal></expr>)<pos:position pos:line="54" pos:column="45"/></condition><then pos:line="54" pos:column="45">
    <block pos:line="55" pos:column="5">{
      <expr_stmt><expr><name pos:line="56" pos:column="7">ret<pos:position pos:line="56" pos:column="10"/></name> <operator pos:line="56" pos:column="11">=<pos:position pos:line="56" pos:column="12"/></operator> <name pos:line="56" pos:column="13">smtp_err_write<pos:position pos:line="56" pos:column="27"/></name></expr>;<pos:position pos:line="56" pos:column="28"/></expr_stmt>
      <break pos:line="57" pos:column="7">break;<pos:position pos:line="57" pos:column="13"/></break>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><operator pos:line="59" pos:column="9">(<pos:position pos:line="59" pos:column="10"/></operator><name pos:line="59" pos:column="10">ret<pos:position pos:line="59" pos:column="13"/></name> <operator pos:line="59" pos:column="14">=<pos:position pos:line="59" pos:column="15"/></operator> <call><name pos:line="59" pos:column="16">smtp_get_resp<pos:position pos:line="59" pos:column="29"/></name> <argument_list pos:line="59" pos:column="30">(<argument><expr><name pos:line="59" pos:column="31">conn<pos:position pos:line="59" pos:column="35"/></name></expr></argument>)<pos:position pos:line="59" pos:column="36"/></argument_list></call><operator pos:line="59" pos:column="36">)<pos:position pos:line="59" pos:column="37"/></operator></expr>)<pos:position pos:line="59" pos:column="38"/></condition><then pos:line="59" pos:column="38">
      <block type="pseudo"><break pos:line="60" pos:column="7">break;<pos:position pos:line="60" pos:column="13"/></break></block></then></if>

    <comment type="block" pos:line="62" pos:column="5">/* send the recipient list */</comment>
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><operator pos:line="63" pos:column="9">(<pos:position pos:line="63" pos:column="10"/></operator><name pos:line="63" pos:column="10">ret<pos:position pos:line="63" pos:column="13"/></name> <operator pos:line="63" pos:column="14">=<pos:position pos:line="63" pos:column="15"/></operator> <call><name pos:line="63" pos:column="16">smtp_rcpt_to<pos:position pos:line="63" pos:column="28"/></name> <argument_list pos:line="63" pos:column="29">(<argument><expr><name pos:line="63" pos:column="30">conn<pos:position pos:line="63" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="36">to<pos:position pos:line="63" pos:column="38"/></name></expr></argument>)<pos:position pos:line="63" pos:column="39"/></argument_list></call><operator pos:line="63" pos:column="39">)<pos:position pos:line="63" pos:column="40"/></operator> <operator pos:line="63" pos:column="41">||<pos:position pos:line="63" pos:column="43"/></operator> <operator pos:line="63" pos:column="44">(<pos:position pos:line="63" pos:column="45"/></operator><name pos:line="63" pos:column="45">ret<pos:position pos:line="63" pos:column="48"/></name> <operator pos:line="63" pos:column="49">=<pos:position pos:line="63" pos:column="50"/></operator> <call><name pos:line="63" pos:column="51">smtp_rcpt_to<pos:position pos:line="63" pos:column="63"/></name> <argument_list pos:line="63" pos:column="64">(<argument><expr><name pos:line="63" pos:column="65">conn<pos:position pos:line="63" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="71">cc<pos:position pos:line="63" pos:column="73"/></name></expr></argument>)<pos:position pos:line="63" pos:column="74"/></argument_list></call><operator pos:line="63" pos:column="74">)<pos:position pos:line="63" pos:column="75"/></operator>
        <operator pos:line="64" pos:column="9">||<pos:position pos:line="64" pos:column="11"/></operator> <operator pos:line="64" pos:column="12">(<pos:position pos:line="64" pos:column="13"/></operator><name pos:line="64" pos:column="13">ret<pos:position pos:line="64" pos:column="16"/></name> <operator pos:line="64" pos:column="17">=<pos:position pos:line="64" pos:column="18"/></operator> <call><name pos:line="64" pos:column="19">smtp_rcpt_to<pos:position pos:line="64" pos:column="31"/></name> <argument_list pos:line="64" pos:column="32">(<argument><expr><name pos:line="64" pos:column="33">conn<pos:position pos:line="64" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="39">bcc<pos:position pos:line="64" pos:column="42"/></name></expr></argument>)<pos:position pos:line="64" pos:column="43"/></argument_list></call><operator pos:line="64" pos:column="43">)<pos:position pos:line="64" pos:column="44"/></operator></expr>)<pos:position pos:line="64" pos:column="45"/></condition><then pos:line="64" pos:column="45">
      <block type="pseudo"><break pos:line="65" pos:column="7">break;<pos:position pos:line="65" pos:column="13"/></break></block></then></if>

    <comment type="block" pos:line="67" pos:column="5">/* send the message data */</comment>
    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><operator pos:line="68" pos:column="9">(<pos:position pos:line="68" pos:column="10"/></operator><name pos:line="68" pos:column="10">ret<pos:position pos:line="68" pos:column="13"/></name> <operator pos:line="68" pos:column="14">=<pos:position pos:line="68" pos:column="15"/></operator> <call><name pos:line="68" pos:column="16">smtp_data<pos:position pos:line="68" pos:column="25"/></name> <argument_list pos:line="68" pos:column="26">(<argument><expr><name pos:line="68" pos:column="27">conn<pos:position pos:line="68" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="33">msgfile<pos:position pos:line="68" pos:column="40"/></name></expr></argument>)<pos:position pos:line="68" pos:column="41"/></argument_list></call><operator pos:line="68" pos:column="41">)<pos:position pos:line="68" pos:column="42"/></operator></expr>)<pos:position pos:line="68" pos:column="43"/></condition><then pos:line="68" pos:column="43">
      <block type="pseudo"><break pos:line="69" pos:column="7">break;<pos:position pos:line="69" pos:column="13"/></break></block></then></if>

    <expr_stmt><expr><call><name pos:line="71" pos:column="5">mutt_socket_write<pos:position pos:line="71" pos:column="22"/></name> <argument_list pos:line="71" pos:column="23">(<argument><expr><name pos:line="71" pos:column="24">conn<pos:position pos:line="71" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="30">"QUIT\r\n"<pos:position pos:line="71" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><name pos:line="73" pos:column="5">ret<pos:position pos:line="73" pos:column="8"/></name> <operator pos:line="73" pos:column="9">=<pos:position pos:line="73" pos:column="10"/></operator> <literal type="number" pos:line="73" pos:column="11">0<pos:position pos:line="73" pos:column="12"/></literal></expr>;<pos:position pos:line="73" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="74" pos:column="4"/></block>
  while <condition pos:line="75" pos:column="9">(<expr><literal type="number" pos:line="75" pos:column="10">0<pos:position pos:line="75" pos:column="11"/></literal></expr>)<pos:position pos:line="75" pos:column="12"/></condition>;<pos:position pos:line="75" pos:column="13"/></do>

  <if pos:line="77" pos:column="3">if <condition pos:line="77" pos:column="6">(<expr><name pos:line="77" pos:column="7">conn<pos:position pos:line="77" pos:column="11"/></name></expr>)<pos:position pos:line="77" pos:column="12"/></condition><then pos:line="77" pos:column="12">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="78" pos:column="5">mutt_socket_close<pos:position pos:line="78" pos:column="22"/></name> <argument_list pos:line="78" pos:column="23">(<argument><expr><name pos:line="78" pos:column="24">conn<pos:position pos:line="78" pos:column="28"/></name></expr></argument>)<pos:position pos:line="78" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="30"/></expr_stmt></block></then></if>

  <if pos:line="80" pos:column="3">if <condition pos:line="80" pos:column="6">(<expr><name pos:line="80" pos:column="7">ret<pos:position pos:line="80" pos:column="10"/></name> <operator pos:line="80" pos:column="11">==<pos:position pos:line="80" pos:column="13"/></operator> <name pos:line="80" pos:column="14">smtp_err_read<pos:position pos:line="80" pos:column="27"/></name></expr>)<pos:position pos:line="80" pos:column="28"/></condition><then pos:line="80" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="81" pos:column="5">mutt_error<pos:position pos:line="81" pos:column="15"/></name> <argument_list pos:line="81" pos:column="16">(<argument><expr><call><name pos:line="81" pos:column="17">_<pos:position pos:line="81" pos:column="18"/></name><argument_list pos:line="81" pos:column="18">(<argument><expr><literal type="string" pos:line="81" pos:column="19">"SMTP session failed: read error"<pos:position pos:line="81" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="81" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="55"/></expr_stmt></block></then>
  <elseif pos:line="82" pos:column="3">else <if pos:line="82" pos:column="8">if <condition pos:line="82" pos:column="11">(<expr><name pos:line="82" pos:column="12">ret<pos:position pos:line="82" pos:column="15"/></name> <operator pos:line="82" pos:column="16">==<pos:position pos:line="82" pos:column="18"/></operator> <name pos:line="82" pos:column="19">smtp_err_write<pos:position pos:line="82" pos:column="33"/></name></expr>)<pos:position pos:line="82" pos:column="34"/></condition><then pos:line="82" pos:column="34">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="5">mutt_error<pos:position pos:line="83" pos:column="15"/></name> <argument_list pos:line="83" pos:column="16">(<argument><expr><call><name pos:line="83" pos:column="17">_<pos:position pos:line="83" pos:column="18"/></name><argument_list pos:line="83" pos:column="18">(<argument><expr><literal type="string" pos:line="83" pos:column="19">"SMTP session failed: write error"<pos:position pos:line="83" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="83" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="56"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="84" pos:column="3">else <if pos:line="84" pos:column="8">if <condition pos:line="84" pos:column="11">(<expr><name pos:line="84" pos:column="12">ret<pos:position pos:line="84" pos:column="15"/></name> <operator pos:line="84" pos:column="16">==<pos:position pos:line="84" pos:column="18"/></operator> <name pos:line="84" pos:column="19">smtp_err_code<pos:position pos:line="84" pos:column="32"/></name></expr>)<pos:position pos:line="84" pos:column="33"/></condition><then pos:line="84" pos:column="33">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="85" pos:column="5">mutt_error<pos:position pos:line="85" pos:column="15"/></name> <argument_list pos:line="85" pos:column="16">(<argument><expr><call><name pos:line="85" pos:column="17">_<pos:position pos:line="85" pos:column="18"/></name><argument_list pos:line="85" pos:column="18">(<argument><expr><literal type="string" pos:line="85" pos:column="19">"Invalid server response"<pos:position pos:line="85" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="85" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="47"/></expr_stmt></block></then></if></elseif></if>

  <return pos:line="87" pos:column="3">return <expr><name pos:line="87" pos:column="10">ret<pos:position pos:line="87" pos:column="13"/></name></expr>;<pos:position pos:line="87" pos:column="14"/></return>
}<pos:position pos:line="88" pos:column="2"/></block></function></unit>
