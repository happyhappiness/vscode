<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_287_mutt-1.4.2.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_yesorno<pos:position pos:line="1" pos:column="17"/></name> <parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">msg<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">int<pos:position pos:line="1" pos:column="39"/></name></type> <name pos:line="1" pos:column="40">def<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">event_t<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">ch<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">yes<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><call><name pos:line="4" pos:column="15">_<pos:position pos:line="4" pos:column="16"/></name><argument_list pos:line="4" pos:column="16">(<argument><expr><literal type="string" pos:line="4" pos:column="17">"yes"<pos:position pos:line="4" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="23"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">no<pos:position pos:line="5" pos:column="11"/></name> <init pos:line="5" pos:column="12">= <expr><call><name pos:line="5" pos:column="14">_<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="string" pos:line="5" pos:column="16">"no"<pos:position pos:line="5" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="21"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>

<cpp:ifdef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifdef<pos:position pos:line="7" pos:column="7"/></cpp:directive> <name pos:line="7" pos:column="8">HAVE_LANGINFO_YESEXPR<pos:position pos:line="7" pos:column="29"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">expr<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">regex_t<pos:position pos:line="9" pos:column="10"/></name></type> <name pos:line="9" pos:column="11">reyes<pos:position pos:line="9" pos:column="16"/></name></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">regex_t<pos:position pos:line="10" pos:column="10"/></name></type> <name pos:line="10" pos:column="11">reno<pos:position pos:line="10" pos:column="15"/></name></decl>;<pos:position pos:line="10" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">reyes_ok<pos:position pos:line="11" pos:column="15"/></name></decl>;<pos:position pos:line="11" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">reno_ok<pos:position pos:line="12" pos:column="14"/></name></decl>;<pos:position pos:line="12" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">char<pos:position pos:line="13" pos:column="7"/></name></type> <name><name pos:line="13" pos:column="8">answer<pos:position pos:line="13" pos:column="14"/></name><index pos:line="13" pos:column="14">[<expr><literal type="number" pos:line="13" pos:column="15">2<pos:position pos:line="13" pos:column="16"/></literal></expr>]<pos:position pos:line="13" pos:column="17"/></index></name></decl>;<pos:position pos:line="13" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="15" pos:column="3">answer<pos:position pos:line="15" pos:column="9"/></name><index pos:line="15" pos:column="9">[<expr><literal type="number" pos:line="15" pos:column="10">1<pos:position pos:line="15" pos:column="11"/></literal></expr>]<pos:position pos:line="15" pos:column="12"/></index></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <literal type="number" pos:line="15" pos:column="15">0<pos:position pos:line="15" pos:column="16"/></literal></expr>;<pos:position pos:line="15" pos:column="17"/></expr_stmt>
  
  <expr_stmt><expr><name pos:line="17" pos:column="3">reyes_ok<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <operator pos:line="17" pos:column="14">(<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="15">expr<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">=<pos:position pos:line="17" pos:column="21"/></operator> <call><name pos:line="17" pos:column="22">nl_langinfo<pos:position pos:line="17" pos:column="33"/></name> <argument_list pos:line="17" pos:column="34">(<argument><expr><name pos:line="17" pos:column="35">YESEXPR<pos:position pos:line="17" pos:column="42"/></name></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call><operator pos:line="17" pos:column="43">)<pos:position pos:line="17" pos:column="44"/></operator> <operator pos:line="17" pos:column="45">&amp;&amp;<pos:position pos:line="17" pos:column="55"/></operator> <name><name pos:line="17" pos:column="48">expr<pos:position pos:line="17" pos:column="52"/></name><index pos:line="17" pos:column="52">[<expr><literal type="number" pos:line="17" pos:column="53">0<pos:position pos:line="17" pos:column="54"/></literal></expr>]<pos:position pos:line="17" pos:column="55"/></index></name> <operator pos:line="17" pos:column="56">==<pos:position pos:line="17" pos:column="58"/></operator> <literal type="char" pos:line="17" pos:column="59">'^'<pos:position pos:line="17" pos:column="62"/></literal> <operator pos:line="17" pos:column="63">&amp;&amp;<pos:position pos:line="17" pos:column="73"/></operator>
	     <operator pos:line="18" pos:column="14">!<pos:position pos:line="18" pos:column="15"/></operator><call><name pos:line="18" pos:column="15">regcomp<pos:position pos:line="18" pos:column="22"/></name> <argument_list pos:line="18" pos:column="23">(<argument><expr><operator pos:line="18" pos:column="24">&amp;<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="25">reyes<pos:position pos:line="18" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="32">expr<pos:position pos:line="18" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="38">REG_NOSUB<pos:position pos:line="18" pos:column="47"/></name><operator pos:line="18" pos:column="47">|<pos:position pos:line="18" pos:column="48"/></operator><name pos:line="18" pos:column="48">REG_EXTENDED<pos:position pos:line="18" pos:column="60"/></name></expr></argument>)<pos:position pos:line="18" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="62"/></expr_stmt>
  <expr_stmt><expr><name pos:line="19" pos:column="3">reno_ok<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <operator pos:line="19" pos:column="13">(<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">expr<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <call><name pos:line="19" pos:column="21">nl_langinfo<pos:position pos:line="19" pos:column="32"/></name> <argument_list pos:line="19" pos:column="33">(<argument><expr><name pos:line="19" pos:column="34">NOEXPR<pos:position pos:line="19" pos:column="40"/></name></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call><operator pos:line="19" pos:column="41">)<pos:position pos:line="19" pos:column="42"/></operator> <operator pos:line="19" pos:column="43">&amp;&amp;<pos:position pos:line="19" pos:column="53"/></operator> <name><name pos:line="19" pos:column="46">expr<pos:position pos:line="19" pos:column="50"/></name><index pos:line="19" pos:column="50">[<expr><literal type="number" pos:line="19" pos:column="51">0<pos:position pos:line="19" pos:column="52"/></literal></expr>]<pos:position pos:line="19" pos:column="53"/></index></name> <operator pos:line="19" pos:column="54">==<pos:position pos:line="19" pos:column="56"/></operator> <literal type="char" pos:line="19" pos:column="57">'^'<pos:position pos:line="19" pos:column="60"/></literal> <operator pos:line="19" pos:column="61">&amp;&amp;<pos:position pos:line="19" pos:column="71"/></operator>
            <operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><call><name pos:line="20" pos:column="14">regcomp<pos:position pos:line="20" pos:column="21"/></name> <argument_list pos:line="20" pos:column="22">(<argument><expr><operator pos:line="20" pos:column="23">&amp;<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="24">reno<pos:position pos:line="20" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="30">expr<pos:position pos:line="20" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="36">REG_NOSUB<pos:position pos:line="20" pos:column="45"/></name><operator pos:line="20" pos:column="45">|<pos:position pos:line="20" pos:column="46"/></operator><name pos:line="20" pos:column="46">REG_EXTENDED<pos:position pos:line="20" pos:column="58"/></name></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="60"/></expr_stmt>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="23" pos:column="3">CLEARLINE<pos:position pos:line="23" pos:column="12"/></name><argument_list pos:line="23" pos:column="12">(<argument><expr><name pos:line="23" pos:column="13">LINES<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">-<pos:position pos:line="23" pos:column="19"/></operator><literal type="number" pos:line="23" pos:column="19">1<pos:position pos:line="23" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="24" pos:column="3">printw<pos:position pos:line="24" pos:column="9"/></name> <argument_list pos:line="24" pos:column="10">(<argument><expr><literal type="string" pos:line="24" pos:column="11">"%s ([%s]/%s): "<pos:position pos:line="24" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="29">msg<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="24" pos:column="34">def<pos:position pos:line="24" pos:column="37"/></name></expr> ?<pos:position pos:line="24" pos:column="39"/></condition><then pos:line="24" pos:column="39"> <expr><name pos:line="24" pos:column="40">yes<pos:position pos:line="24" pos:column="43"/></name></expr> <pos:position pos:line="24" pos:column="44"/></then><else pos:line="24" pos:column="44">: <expr><name pos:line="24" pos:column="46">no<pos:position pos:line="24" pos:column="48"/></name></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="24" pos:column="50">def<pos:position pos:line="24" pos:column="53"/></name></expr> ?<pos:position pos:line="24" pos:column="55"/></condition><then pos:line="24" pos:column="55"> <expr><name pos:line="24" pos:column="56">no<pos:position pos:line="24" pos:column="58"/></name></expr> <pos:position pos:line="24" pos:column="59"/></then><else pos:line="24" pos:column="59">: <expr><name pos:line="24" pos:column="61">yes<pos:position pos:line="24" pos:column="64"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="24" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="66"/></expr_stmt>
  <macro><name pos:line="25" pos:column="3">FOREVER<pos:position pos:line="25" pos:column="10"/></name></macro>
  <block pos:line="26" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">mutt_refresh<pos:position pos:line="27" pos:column="17"/></name> <argument_list pos:line="27" pos:column="18">()<pos:position pos:line="27" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="28" pos:column="5">ch<pos:position pos:line="28" pos:column="7"/></name> <operator pos:line="28" pos:column="8">=<pos:position pos:line="28" pos:column="9"/></operator> <call><name pos:line="28" pos:column="10">mutt_getch<pos:position pos:line="28" pos:column="20"/></name> <argument_list pos:line="28" pos:column="21">()<pos:position pos:line="28" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><call><name pos:line="29" pos:column="9">CI_is_return<pos:position pos:line="29" pos:column="21"/></name> <argument_list pos:line="29" pos:column="22">(<argument><expr><name><name pos:line="29" pos:column="23">ch<pos:position pos:line="29" pos:column="25"/></name><operator pos:line="29" pos:column="25">.<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="26">ch<pos:position pos:line="29" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="30"/></condition><then pos:line="29" pos:column="30">
      <block type="pseudo"><break pos:line="30" pos:column="7">break;<pos:position pos:line="30" pos:column="13"/></break></block></then></if>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">ch<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">.<pos:position pos:line="31" pos:column="12"/></operator><name pos:line="31" pos:column="12">ch<pos:position pos:line="31" pos:column="14"/></name></name> <operator pos:line="31" pos:column="15">==<pos:position pos:line="31" pos:column="17"/></operator> <operator pos:line="31" pos:column="18">-<pos:position pos:line="31" pos:column="19"/></operator><literal type="number" pos:line="31" pos:column="19">1<pos:position pos:line="31" pos:column="20"/></literal></expr>)<pos:position pos:line="31" pos:column="21"/></condition><then pos:line="31" pos:column="21">
    <block pos:line="32" pos:column="5">{
      <expr_stmt><expr><name pos:line="33" pos:column="7">def<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">=<pos:position pos:line="33" pos:column="12"/></operator> <operator pos:line="33" pos:column="13">-<pos:position pos:line="33" pos:column="14"/></operator><literal type="number" pos:line="33" pos:column="14">1<pos:position pos:line="33" pos:column="15"/></literal></expr>;<pos:position pos:line="33" pos:column="16"/></expr_stmt>
      <break pos:line="34" pos:column="7">break;<pos:position pos:line="34" pos:column="13"/></break>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifdef<pos:position pos:line="37" pos:column="7"/></cpp:directive> <name pos:line="37" pos:column="8">HAVE_LANGINFO_YESEXPR<pos:position pos:line="37" pos:column="29"/></name></cpp:ifdef>
    <expr_stmt><expr><name><name pos:line="38" pos:column="5">answer<pos:position pos:line="38" pos:column="11"/></name><index pos:line="38" pos:column="11">[<expr><literal type="number" pos:line="38" pos:column="12">0<pos:position pos:line="38" pos:column="13"/></literal></expr>]<pos:position pos:line="38" pos:column="14"/></index></name> <operator pos:line="38" pos:column="15">=<pos:position pos:line="38" pos:column="16"/></operator> <name><name pos:line="38" pos:column="17">ch<pos:position pos:line="38" pos:column="19"/></name><operator pos:line="38" pos:column="19">.<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="20">ch<pos:position pos:line="38" pos:column="22"/></name></name></expr>;<pos:position pos:line="38" pos:column="23"/></expr_stmt>
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><ternary><condition><expr><name pos:line="39" pos:column="9">reyes_ok<pos:position pos:line="39" pos:column="17"/></name></expr> ?<pos:position pos:line="39" pos:column="19"/></condition><then pos:line="39" pos:column="19"> 
	<expr><operator pos:line="40" pos:column="9">(<pos:position pos:line="40" pos:column="10"/></operator><call><name pos:line="40" pos:column="10">regexec<pos:position pos:line="40" pos:column="17"/></name> <argument_list pos:line="40" pos:column="18">(<argument><expr><operator pos:line="40" pos:column="19">&amp;<pos:position pos:line="40" pos:column="24"/></operator> <name pos:line="40" pos:column="21">reyes<pos:position pos:line="40" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="28">answer<pos:position pos:line="40" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="36">0<pos:position pos:line="40" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="39">0<pos:position pos:line="40" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="42">0<pos:position pos:line="40" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="44"/></argument_list></call> <operator pos:line="40" pos:column="45">==<pos:position pos:line="40" pos:column="47"/></operator> <literal type="number" pos:line="40" pos:column="48">0<pos:position pos:line="40" pos:column="49"/></literal><operator pos:line="40" pos:column="49">)<pos:position pos:line="40" pos:column="50"/></operator></expr> <pos:position pos:line="40" pos:column="51"/></then><else pos:line="40" pos:column="51">:<pos:position pos:line="40" pos:column="52"/></else></ternary></expr></condition></if>
<cpp:else pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">else<pos:position pos:line="41" pos:column="6"/></cpp:directive></cpp:else>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
	<expr><operator pos:line="44" pos:column="9">(<pos:position pos:line="44" pos:column="10"/></operator><call><name pos:line="44" pos:column="10">tolower<pos:position pos:line="44" pos:column="17"/></name> <argument_list pos:line="44" pos:column="18">(<argument><expr><name><name pos:line="44" pos:column="19">ch<pos:position pos:line="44" pos:column="21"/></name><operator pos:line="44" pos:column="21">.<pos:position pos:line="44" pos:column="22"/></operator><name pos:line="44" pos:column="22">ch<pos:position pos:line="44" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="25"/></argument_list></call> <operator pos:line="44" pos:column="26">==<pos:position pos:line="44" pos:column="28"/></operator> <literal type="char" pos:line="44" pos:column="29">'y'<pos:position pos:line="44" pos:column="32"/></literal><operator pos:line="44" pos:column="32">)<pos:position pos:line="44" pos:column="33"/></operator></expr>)<pos:position pos:line="44" pos:column="34"/></condition><then pos:line="44" pos:column="34">
    <block pos:line="45" pos:column="5">{
      <expr_stmt><expr><name pos:line="46" pos:column="7">def<pos:position pos:line="46" pos:column="10"/></name> <operator pos:line="46" pos:column="11">=<pos:position pos:line="46" pos:column="12"/></operator> <literal type="number" pos:line="46" pos:column="13">1<pos:position pos:line="46" pos:column="14"/></literal></expr>;<pos:position pos:line="46" pos:column="15"/></expr_stmt>
      <break pos:line="47" pos:column="7">break;<pos:position pos:line="47" pos:column="13"/></break>
    }<pos:position pos:line="48" pos:column="6"/></block></then>
    <elseif pos:line="49" pos:column="5">else <if pos:line="49" pos:column="10">if <condition pos:line="49" pos:column="13">(
<cpp:ifdef pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">ifdef<pos:position pos:line="50" pos:column="7"/></cpp:directive> <name pos:line="50" pos:column="8">HAVE_LANGINFO_YESEXPR<pos:position pos:line="50" pos:column="29"/></name></cpp:ifdef>
	     <expr><ternary><condition><expr><name pos:line="51" pos:column="14">reno_ok<pos:position pos:line="51" pos:column="21"/></name></expr> ?<pos:position pos:line="51" pos:column="23"/></condition><then pos:line="51" pos:column="23">
	     <expr><operator pos:line="52" pos:column="14">(<pos:position pos:line="52" pos:column="15"/></operator><call><name pos:line="52" pos:column="15">regexec<pos:position pos:line="52" pos:column="22"/></name> <argument_list pos:line="52" pos:column="23">(<argument><expr><operator pos:line="52" pos:column="24">&amp;<pos:position pos:line="52" pos:column="29"/></operator> <name pos:line="52" pos:column="26">reno<pos:position pos:line="52" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="32">answer<pos:position pos:line="52" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="40">0<pos:position pos:line="52" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="43">0<pos:position pos:line="52" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="46">0<pos:position pos:line="52" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="48"/></argument_list></call> <operator pos:line="52" pos:column="49">==<pos:position pos:line="52" pos:column="51"/></operator> <literal type="number" pos:line="52" pos:column="52">0<pos:position pos:line="52" pos:column="53"/></literal><operator pos:line="52" pos:column="53">)<pos:position pos:line="52" pos:column="54"/></operator></expr> <pos:position pos:line="52" pos:column="55"/></then><else pos:line="52" pos:column="55">:
<cpp:endif pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">endif<pos:position pos:line="53" pos:column="7"/></cpp:directive></cpp:endif>
	     <expr><operator pos:line="54" pos:column="14">(<pos:position pos:line="54" pos:column="15"/></operator><call><name pos:line="54" pos:column="15">tolower<pos:position pos:line="54" pos:column="22"/></name> <argument_list pos:line="54" pos:column="23">(<argument><expr><name><name pos:line="54" pos:column="24">ch<pos:position pos:line="54" pos:column="26"/></name><operator pos:line="54" pos:column="26">.<pos:position pos:line="54" pos:column="27"/></operator><name pos:line="54" pos:column="27">ch<pos:position pos:line="54" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="30"/></argument_list></call> <operator pos:line="54" pos:column="31">==<pos:position pos:line="54" pos:column="33"/></operator> <literal type="char" pos:line="54" pos:column="34">'n'<pos:position pos:line="54" pos:column="37"/></literal><operator pos:line="54" pos:column="37">)<pos:position pos:line="54" pos:column="38"/></operator></expr></else></ternary></expr>)<pos:position pos:line="54" pos:column="39"/></condition><then pos:line="54" pos:column="39">
    <block pos:line="55" pos:column="5">{
      <expr_stmt><expr><name pos:line="56" pos:column="7">def<pos:position pos:line="56" pos:column="10"/></name> <operator pos:line="56" pos:column="11">=<pos:position pos:line="56" pos:column="12"/></operator> <literal type="number" pos:line="56" pos:column="13">0<pos:position pos:line="56" pos:column="14"/></literal></expr>;<pos:position pos:line="56" pos:column="15"/></expr_stmt>
      <break pos:line="57" pos:column="7">break;<pos:position pos:line="57" pos:column="13"/></break>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if></elseif>
    <else pos:line="59" pos:column="5">else
    <block pos:line="60" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="61" pos:column="7">BEEP<pos:position pos:line="61" pos:column="11"/></name><argument_list pos:line="61" pos:column="11">()<pos:position pos:line="61" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="14"/></expr_stmt>
    }<pos:position pos:line="62" pos:column="6"/></block></else></if>
  }<pos:position pos:line="63" pos:column="4"/></block>

<cpp:ifdef pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">ifdef<pos:position pos:line="65" pos:column="7"/></cpp:directive> <name pos:line="65" pos:column="8">HAVE_LANGINFO_YESEXPR<pos:position pos:line="65" pos:column="29"/></name></cpp:ifdef>    
  <if pos:line="66" pos:column="3">if <condition pos:line="66" pos:column="6">(<expr><name pos:line="66" pos:column="7">reyes_ok<pos:position pos:line="66" pos:column="15"/></name></expr>)<pos:position pos:line="66" pos:column="16"/></condition><then pos:line="66" pos:column="16">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="5">regfree<pos:position pos:line="67" pos:column="12"/></name> <argument_list pos:line="67" pos:column="13">(<argument><expr><operator pos:line="67" pos:column="14">&amp;<pos:position pos:line="67" pos:column="19"/></operator> <name pos:line="67" pos:column="16">reyes<pos:position pos:line="67" pos:column="21"/></name></expr></argument>)<pos:position pos:line="67" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="23"/></expr_stmt></block></then></if>
  <if pos:line="68" pos:column="3">if <condition pos:line="68" pos:column="6">(<expr><name pos:line="68" pos:column="7">reno_ok<pos:position pos:line="68" pos:column="14"/></name></expr>)<pos:position pos:line="68" pos:column="15"/></condition><then pos:line="68" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="5">regfree<pos:position pos:line="69" pos:column="12"/></name> <argument_list pos:line="69" pos:column="13">(<argument><expr><operator pos:line="69" pos:column="14">&amp;<pos:position pos:line="69" pos:column="19"/></operator> <name pos:line="69" pos:column="16">reno<pos:position pos:line="69" pos:column="20"/></name></expr></argument>)<pos:position pos:line="69" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="22"/></expr_stmt></block></then></if>
<cpp:endif pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">endif<pos:position pos:line="70" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="72" pos:column="3">if <condition pos:line="72" pos:column="6">(<expr><name pos:line="72" pos:column="7">def<pos:position pos:line="72" pos:column="10"/></name> <operator pos:line="72" pos:column="11">&gt;=<pos:position pos:line="72" pos:column="16"/></operator> <literal type="number" pos:line="72" pos:column="14">0<pos:position pos:line="72" pos:column="15"/></literal></expr>)<pos:position pos:line="72" pos:column="16"/></condition><then pos:line="72" pos:column="16">
  <block pos:line="73" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="74" pos:column="5">addstr<pos:position pos:line="74" pos:column="11"/></name> <argument_list pos:line="74" pos:column="12">(<argument><expr><operator pos:line="74" pos:column="13">(<pos:position pos:line="74" pos:column="14"/></operator><name pos:line="74" pos:column="14">char<pos:position pos:line="74" pos:column="18"/></name> <operator pos:line="74" pos:column="19">*<pos:position pos:line="74" pos:column="20"/></operator><operator pos:line="74" pos:column="20">)<pos:position pos:line="74" pos:column="21"/></operator> <operator pos:line="74" pos:column="22">(<pos:position pos:line="74" pos:column="23"/></operator><ternary><condition><expr><name pos:line="74" pos:column="23">def<pos:position pos:line="74" pos:column="26"/></name></expr> ?<pos:position pos:line="74" pos:column="28"/></condition><then pos:line="74" pos:column="28"> <expr><name pos:line="74" pos:column="29">yes<pos:position pos:line="74" pos:column="32"/></name></expr> <pos:position pos:line="74" pos:column="33"/></then><else pos:line="74" pos:column="33">: <expr><name pos:line="74" pos:column="35">no<pos:position pos:line="74" pos:column="37"/></name></expr></else></ternary><operator pos:line="74" pos:column="37">)<pos:position pos:line="74" pos:column="38"/></operator></expr></argument>)<pos:position pos:line="74" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">mutt_refresh<pos:position pos:line="75" pos:column="17"/></name> <argument_list pos:line="75" pos:column="18">()<pos:position pos:line="75" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="76" pos:column="4"/></block></then></if>
  <return pos:line="77" pos:column="3">return <expr><operator pos:line="77" pos:column="10">(<pos:position pos:line="77" pos:column="11"/></operator><name pos:line="77" pos:column="11">def<pos:position pos:line="77" pos:column="14"/></name><operator pos:line="77" pos:column="14">)<pos:position pos:line="77" pos:column="15"/></operator></expr>;<pos:position pos:line="77" pos:column="16"/></return>
}<pos:position pos:line="78" pos:column="2"/></block></function></unit>
