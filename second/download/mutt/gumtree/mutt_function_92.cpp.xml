<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_function_92.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fold_one_header<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">FILE<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">fp<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">tag<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="56">const<pos:position pos:line="1" pos:column="61"/></specifier> <name pos:line="1" pos:column="62">char<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">value<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
			      <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">pfx<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">int<pos:position pos:line="2" pos:column="51"/></name></type> <name pos:line="2" pos:column="52">wraplen<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="61">int<pos:position pos:line="2" pos:column="64"/></name></type> <name pos:line="2" pos:column="65">flags<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">p<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><name pos:line="4" pos:column="19">value<pos:position pos:line="4" pos:column="24"/></name></expr></init></decl>, <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="27">next<pos:position pos:line="4" pos:column="31"/></name></decl>, <modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="34">sp<pos:position pos:line="4" pos:column="36"/></name></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">buf<pos:position pos:line="5" pos:column="11"/></name><index pos:line="5" pos:column="11">[<expr><name pos:line="5" pos:column="12">HUGE_STRING<pos:position pos:line="5" pos:column="23"/></name></expr>]<pos:position pos:line="5" pos:column="24"/></index></name> <init pos:line="5" pos:column="25">= <expr><literal type="string" pos:line="5" pos:column="27">""<pos:position pos:line="5" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">first<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><literal type="number" pos:line="6" pos:column="15">1<pos:position pos:line="6" pos:column="16"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="18">enc<pos:position pos:line="6" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="23">col<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><literal type="number" pos:line="6" pos:column="29">0<pos:position pos:line="6" pos:column="30"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="32">w<pos:position pos:line="6" pos:column="33"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="35">l<pos:position pos:line="6" pos:column="36"/></name> <init pos:line="6" pos:column="37">= <expr><literal type="number" pos:line="6" pos:column="39">0<pos:position pos:line="6" pos:column="40"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="42">fold<pos:position pos:line="6" pos:column="46"/></name></decl>;<pos:position pos:line="6" pos:column="47"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">dprint<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">(<argument><expr><literal type="number" pos:line="8" pos:column="10">4<pos:position pos:line="8" pos:column="11"/></literal></expr></argument>,<argument><expr><operator pos:line="8" pos:column="12">(<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">debugfile<pos:position pos:line="8" pos:column="22"/></name><operator pos:line="8" pos:column="22">,<pos:position pos:line="8" pos:column="23"/></operator><literal type="string" pos:line="8" pos:column="23">"mwoh: pfx=[%s], tag=[%s], flags=%d value=[%s]\n"<pos:position pos:line="8" pos:column="72"/></literal><operator pos:line="8" pos:column="72">,<pos:position pos:line="8" pos:column="73"/></operator>
	    <name pos:line="9" pos:column="13">pfx<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">,<pos:position pos:line="9" pos:column="17"/></operator> <name pos:line="9" pos:column="18">tag<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">,<pos:position pos:line="9" pos:column="22"/></operator> <name pos:line="9" pos:column="23">flags<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">,<pos:position pos:line="9" pos:column="29"/></operator> <name pos:line="9" pos:column="30">value<pos:position pos:line="9" pos:column="35"/></name><operator pos:line="9" pos:column="35">)<pos:position pos:line="9" pos:column="36"/></operator></expr></argument>)<pos:position pos:line="9" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="38"/></expr_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">tag<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">&amp;&amp;<pos:position pos:line="11" pos:column="21"/></operator> <operator pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">tag<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">&amp;&amp;<pos:position pos:line="11" pos:column="29"/></operator> <call><name pos:line="11" pos:column="22">fprintf<pos:position pos:line="11" pos:column="29"/></name> <argument_list pos:line="11" pos:column="30">(<argument><expr><name pos:line="11" pos:column="31">fp<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="35">"%s%s: "<pos:position pos:line="11" pos:column="43"/></literal></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="45">NONULL<pos:position pos:line="11" pos:column="51"/></name> <argument_list pos:line="11" pos:column="52">(<argument><expr><name pos:line="11" pos:column="53">pfx<pos:position pos:line="11" pos:column="56"/></name></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="11" pos:column="59">tag<pos:position pos:line="11" pos:column="62"/></name></expr></argument>)<pos:position pos:line="11" pos:column="63"/></argument_list></call> <operator pos:line="11" pos:column="64">&lt;<pos:position pos:line="11" pos:column="68"/></operator> <literal type="number" pos:line="11" pos:column="66">0<pos:position pos:line="11" pos:column="67"/></literal></expr>)<pos:position pos:line="11" pos:column="68"/></condition><then pos:line="11" pos:column="68">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">-<pos:position pos:line="12" pos:column="13"/></operator><literal type="number" pos:line="12" pos:column="13">1<pos:position pos:line="12" pos:column="14"/></literal></expr>;<pos:position pos:line="12" pos:column="15"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="13" pos:column="3">col<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">=<pos:position pos:line="13" pos:column="8"/></operator> <call><name pos:line="13" pos:column="9">mutt_strlen<pos:position pos:line="13" pos:column="20"/></name> <argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">tag<pos:position pos:line="13" pos:column="25"/></name></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call> <operator pos:line="13" pos:column="27">+<pos:position pos:line="13" pos:column="28"/></operator> <operator pos:line="13" pos:column="29">(<pos:position pos:line="13" pos:column="30"/></operator><ternary><condition><expr><name pos:line="13" pos:column="30">tag<pos:position pos:line="13" pos:column="33"/></name> <operator pos:line="13" pos:column="34">&amp;&amp;<pos:position pos:line="13" pos:column="44"/></operator> <operator pos:line="13" pos:column="37">*<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="38">tag<pos:position pos:line="13" pos:column="41"/></name></expr> ?<pos:position pos:line="13" pos:column="43"/></condition><then pos:line="13" pos:column="43"> <expr><literal type="number" pos:line="13" pos:column="44">2<pos:position pos:line="13" pos:column="45"/></literal></expr> <pos:position pos:line="13" pos:column="46"/></then><else pos:line="13" pos:column="46">: <expr><literal type="number" pos:line="13" pos:column="48">0<pos:position pos:line="13" pos:column="49"/></literal></expr></else></ternary><operator pos:line="13" pos:column="49">)<pos:position pos:line="13" pos:column="50"/></operator> <operator pos:line="13" pos:column="51">+<pos:position pos:line="13" pos:column="52"/></operator> <call><name pos:line="13" pos:column="53">mutt_strlen<pos:position pos:line="13" pos:column="64"/></name> <argument_list pos:line="13" pos:column="65">(<argument><expr><name pos:line="13" pos:column="66">pfx<pos:position pos:line="13" pos:column="69"/></name></expr></argument>)<pos:position pos:line="13" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="71"/></expr_stmt>

  <while pos:line="15" pos:column="3">while <condition pos:line="15" pos:column="9">(<expr><name pos:line="15" pos:column="10">p<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">&amp;&amp;<pos:position pos:line="15" pos:column="22"/></operator> <operator pos:line="15" pos:column="15">*<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">p<pos:position pos:line="15" pos:column="17"/></name></expr>)<pos:position pos:line="15" pos:column="18"/></condition>
  <block pos:line="16" pos:column="3">{
    <expr_stmt><expr><name pos:line="17" pos:column="5">fold<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <literal type="number" pos:line="17" pos:column="12">0<pos:position pos:line="17" pos:column="13"/></literal></expr>;<pos:position pos:line="17" pos:column="14"/></expr_stmt>

    <comment type="block" pos:line="19" pos:column="5">/* find the next word and place it in `buf'. it may start with
     * whitespace we can fold before */</comment>
    <expr_stmt><expr><name pos:line="21" pos:column="5">next<pos:position pos:line="21" pos:column="9"/></name> <operator pos:line="21" pos:column="10">=<pos:position pos:line="21" pos:column="11"/></operator> <call><name pos:line="21" pos:column="12">find_word<pos:position pos:line="21" pos:column="21"/></name> <argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">p<pos:position pos:line="21" pos:column="24"/></name></expr></argument>)<pos:position pos:line="21" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">l<pos:position pos:line="22" pos:column="6"/></name> <operator pos:line="22" pos:column="7">=<pos:position pos:line="22" pos:column="8"/></operator> <call><name pos:line="22" pos:column="9">MIN<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><sizeof pos:line="22" pos:column="13">sizeof <argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">buf<pos:position pos:line="22" pos:column="24"/></name></expr></argument>)<pos:position pos:line="22" pos:column="25"/></argument_list></sizeof> <operator pos:line="22" pos:column="26">-<pos:position pos:line="22" pos:column="27"/></operator> <literal type="number" pos:line="22" pos:column="28">1<pos:position pos:line="22" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="31">next<pos:position pos:line="22" pos:column="35"/></name> <operator pos:line="22" pos:column="36">-<pos:position pos:line="22" pos:column="37"/></operator> <name pos:line="22" pos:column="38">p<pos:position pos:line="22" pos:column="39"/></name></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">memcpy<pos:position pos:line="23" pos:column="11"/></name> <argument_list pos:line="23" pos:column="12">(<argument><expr><name pos:line="23" pos:column="13">buf<pos:position pos:line="23" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="18">p<pos:position pos:line="23" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="21">l<pos:position pos:line="23" pos:column="22"/></name></expr></argument>)<pos:position pos:line="23" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">buf<pos:position pos:line="24" pos:column="8"/></name><index pos:line="24" pos:column="8">[<expr><name pos:line="24" pos:column="9">l<pos:position pos:line="24" pos:column="10"/></name></expr>]<pos:position pos:line="24" pos:column="11"/></index></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <literal type="number" pos:line="24" pos:column="14">0<pos:position pos:line="24" pos:column="15"/></literal></expr>;<pos:position pos:line="24" pos:column="16"/></expr_stmt>

    <comment type="block" pos:line="26" pos:column="5">/* determine width: character cells for display, bytes for sending
     * (we get pure ascii only) */</comment>
    <expr_stmt><expr><name pos:line="28" pos:column="5">w<pos:position pos:line="28" pos:column="6"/></name> <operator pos:line="28" pos:column="7">=<pos:position pos:line="28" pos:column="8"/></operator> <call><name pos:line="28" pos:column="9">my_width<pos:position pos:line="28" pos:column="17"/></name> <argument_list pos:line="28" pos:column="18">(<argument><expr><name pos:line="28" pos:column="19">buf<pos:position pos:line="28" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="24">col<pos:position pos:line="28" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="29">flags<pos:position pos:line="28" pos:column="34"/></name></expr></argument>)<pos:position pos:line="28" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">enc<pos:position pos:line="29" pos:column="8"/></name> <operator pos:line="29" pos:column="9">=<pos:position pos:line="29" pos:column="10"/></operator> <call><name pos:line="29" pos:column="11">mutt_strncmp<pos:position pos:line="29" pos:column="23"/></name> <argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">buf<pos:position pos:line="29" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="30">"=?"<pos:position pos:line="29" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="36">2<pos:position pos:line="29" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call> <operator pos:line="29" pos:column="39">==<pos:position pos:line="29" pos:column="41"/></operator> <literal type="number" pos:line="29" pos:column="42">0<pos:position pos:line="29" pos:column="43"/></literal></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="31" pos:column="5">dprint<pos:position pos:line="31" pos:column="11"/></name><argument_list pos:line="31" pos:column="11">(<argument><expr><literal type="number" pos:line="31" pos:column="12">5<pos:position pos:line="31" pos:column="13"/></literal></expr></argument>,<argument><expr><operator pos:line="31" pos:column="14">(<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="15">debugfile<pos:position pos:line="31" pos:column="24"/></name><operator pos:line="31" pos:column="24">,<pos:position pos:line="31" pos:column="25"/></operator><literal type="string" pos:line="31" pos:column="25">"mwoh: word=[%s], col=%d, w=%d, next=[0x0%x]\n"<pos:position pos:line="31" pos:column="72"/></literal><operator pos:line="31" pos:column="72">,<pos:position pos:line="31" pos:column="73"/></operator>
	      <name pos:line="32" pos:column="15">buf<pos:position pos:line="32" pos:column="18"/></name><operator pos:line="32" pos:column="18">,<pos:position pos:line="32" pos:column="19"/></operator> <name pos:line="32" pos:column="20">col<pos:position pos:line="32" pos:column="23"/></name><operator pos:line="32" pos:column="23">,<pos:position pos:line="32" pos:column="24"/></operator> <name pos:line="32" pos:column="25">w<pos:position pos:line="32" pos:column="26"/></name><operator pos:line="32" pos:column="26">,<pos:position pos:line="32" pos:column="27"/></operator> <operator pos:line="32" pos:column="28">*<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="29">next<pos:position pos:line="32" pos:column="33"/></name><operator pos:line="32" pos:column="33">)<pos:position pos:line="32" pos:column="34"/></operator></expr></argument>)<pos:position pos:line="32" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt>

    <comment type="block" pos:line="34" pos:column="5">/* insert a folding \n before the current word's lwsp except for
     * header name, first word on a line (word longer than wrap width)
     * and encoded words */</comment>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><operator pos:line="37" pos:column="9">!<pos:position pos:line="37" pos:column="10"/></operator><name pos:line="37" pos:column="10">first<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">&amp;&amp;<pos:position pos:line="37" pos:column="26"/></operator> <operator pos:line="37" pos:column="19">!<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="20">enc<pos:position pos:line="37" pos:column="23"/></name> <operator pos:line="37" pos:column="24">&amp;&amp;<pos:position pos:line="37" pos:column="34"/></operator> <name pos:line="37" pos:column="27">col<pos:position pos:line="37" pos:column="30"/></name> <operator pos:line="37" pos:column="31">&amp;&amp;<pos:position pos:line="37" pos:column="41"/></operator> <name pos:line="37" pos:column="34">col<pos:position pos:line="37" pos:column="37"/></name> <operator pos:line="37" pos:column="38">+<pos:position pos:line="37" pos:column="39"/></operator> <name pos:line="37" pos:column="40">w<pos:position pos:line="37" pos:column="41"/></name> <operator pos:line="37" pos:column="42">&gt;=<pos:position pos:line="37" pos:column="47"/></operator> <name pos:line="37" pos:column="45">wraplen<pos:position pos:line="37" pos:column="52"/></name></expr>)<pos:position pos:line="37" pos:column="53"/></condition><then pos:line="37" pos:column="53">
    <block pos:line="38" pos:column="5">{
      <expr_stmt><expr><name pos:line="39" pos:column="7">col<pos:position pos:line="39" pos:column="10"/></name> <operator pos:line="39" pos:column="11">=<pos:position pos:line="39" pos:column="12"/></operator> <call><name pos:line="39" pos:column="13">mutt_strlen<pos:position pos:line="39" pos:column="24"/></name> <argument_list pos:line="39" pos:column="25">(<argument><expr><name pos:line="39" pos:column="26">pfx<pos:position pos:line="39" pos:column="29"/></name></expr></argument>)<pos:position pos:line="39" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name pos:line="40" pos:column="7">fold<pos:position pos:line="40" pos:column="11"/></name> <operator pos:line="40" pos:column="12">=<pos:position pos:line="40" pos:column="13"/></operator> <literal type="number" pos:line="40" pos:column="14">1<pos:position pos:line="40" pos:column="15"/></literal></expr>;<pos:position pos:line="40" pos:column="16"/></expr_stmt>
      <if pos:line="41" pos:column="7">if <condition pos:line="41" pos:column="10">(<expr><call><name pos:line="41" pos:column="11">fprintf<pos:position pos:line="41" pos:column="18"/></name> <argument_list pos:line="41" pos:column="19">(<argument><expr><name pos:line="41" pos:column="20">fp<pos:position pos:line="41" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="24">"\n%s"<pos:position pos:line="41" pos:column="30"/></literal></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="32">NONULL<pos:position pos:line="41" pos:column="38"/></name><argument_list pos:line="41" pos:column="38">(<argument><expr><name pos:line="41" pos:column="39">pfx<pos:position pos:line="41" pos:column="42"/></name></expr></argument>)<pos:position pos:line="41" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="44"/></argument_list></call> <operator pos:line="41" pos:column="45">&lt;=<pos:position pos:line="41" pos:column="50"/></operator> <literal type="number" pos:line="41" pos:column="48">0<pos:position pos:line="41" pos:column="49"/></literal></expr>)<pos:position pos:line="41" pos:column="50"/></condition><then pos:line="41" pos:column="50">
	<block type="pseudo"><return pos:line="42" pos:column="9">return <expr><operator pos:line="42" pos:column="16">-<pos:position pos:line="42" pos:column="17"/></operator><literal type="number" pos:line="42" pos:column="17">1<pos:position pos:line="42" pos:column="18"/></literal></expr>;<pos:position pos:line="42" pos:column="19"/></return></block></then></if>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="45" pos:column="5">/* print the actual word; for display, ignore leading ws for word
     * and fold with tab for readability */</comment>
    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><operator pos:line="47" pos:column="9">(<pos:position pos:line="47" pos:column="10"/></operator><name pos:line="47" pos:column="10">flags<pos:position pos:line="47" pos:column="15"/></name> <operator pos:line="47" pos:column="16">&amp;<pos:position pos:line="47" pos:column="21"/></operator> <name pos:line="47" pos:column="18">CH_DISPLAY<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">)<pos:position pos:line="47" pos:column="29"/></operator> <operator pos:line="47" pos:column="30">&amp;&amp;<pos:position pos:line="47" pos:column="40"/></operator> <name pos:line="47" pos:column="33">fold<pos:position pos:line="47" pos:column="37"/></name></expr>)<pos:position pos:line="47" pos:column="38"/></condition><then pos:line="47" pos:column="38">
    <block pos:line="48" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="49" pos:column="7">char<pos:position pos:line="49" pos:column="11"/></name> <modifier pos:line="49" pos:column="12">*<pos:position pos:line="49" pos:column="13"/></modifier></type><name pos:line="49" pos:column="13">p<pos:position pos:line="49" pos:column="14"/></name> <init pos:line="49" pos:column="15">= <expr><name pos:line="49" pos:column="17">buf<pos:position pos:line="49" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="49" pos:column="21"/></decl_stmt>
      <while pos:line="50" pos:column="7">while <condition pos:line="50" pos:column="13">(<expr><operator pos:line="50" pos:column="14">*<pos:position pos:line="50" pos:column="15"/></operator><name pos:line="50" pos:column="15">p<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">&amp;&amp;<pos:position pos:line="50" pos:column="27"/></operator> <operator pos:line="50" pos:column="20">(<pos:position pos:line="50" pos:column="21"/></operator><operator pos:line="50" pos:column="21">*<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="22">p<pos:position pos:line="50" pos:column="23"/></name> <operator pos:line="50" pos:column="24">==<pos:position pos:line="50" pos:column="26"/></operator> <literal type="char" pos:line="50" pos:column="27">' '<pos:position pos:line="50" pos:column="30"/></literal> <operator pos:line="50" pos:column="31">||<pos:position pos:line="50" pos:column="33"/></operator> <operator pos:line="50" pos:column="34">*<pos:position pos:line="50" pos:column="35"/></operator><name pos:line="50" pos:column="35">p<pos:position pos:line="50" pos:column="36"/></name> <operator pos:line="50" pos:column="37">==<pos:position pos:line="50" pos:column="39"/></operator> <literal type="char" pos:line="50" pos:column="40">'\t'<pos:position pos:line="50" pos:column="44"/></literal><operator pos:line="50" pos:column="44">)<pos:position pos:line="50" pos:column="45"/></operator></expr>)<pos:position pos:line="50" pos:column="46"/></condition>
      <block pos:line="51" pos:column="7">{
	<expr_stmt><expr><name pos:line="52" pos:column="9">p<pos:position pos:line="52" pos:column="10"/></name><operator pos:line="52" pos:column="10">++<pos:position pos:line="52" pos:column="12"/></operator></expr>;<pos:position pos:line="52" pos:column="13"/></expr_stmt>
	<expr_stmt><expr><name pos:line="53" pos:column="9">col<pos:position pos:line="53" pos:column="12"/></name><operator pos:line="53" pos:column="12">--<pos:position pos:line="53" pos:column="14"/></operator></expr>;<pos:position pos:line="53" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="54" pos:column="8"/></block></while>
      <if pos:line="55" pos:column="7">if <condition pos:line="55" pos:column="10">(<expr><call><name pos:line="55" pos:column="11">fputc<pos:position pos:line="55" pos:column="16"/></name> <argument_list pos:line="55" pos:column="17">(<argument><expr><literal type="char" pos:line="55" pos:column="18">'\t'<pos:position pos:line="55" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="24">fp<pos:position pos:line="55" pos:column="26"/></name></expr></argument>)<pos:position pos:line="55" pos:column="27"/></argument_list></call> <operator pos:line="55" pos:column="28">==<pos:position pos:line="55" pos:column="30"/></operator> <name pos:line="55" pos:column="31">EOF<pos:position pos:line="55" pos:column="34"/></name></expr>)<pos:position pos:line="55" pos:column="35"/></condition><then pos:line="55" pos:column="35">
	<block type="pseudo"><return pos:line="56" pos:column="9">return <expr><operator pos:line="56" pos:column="16">-<pos:position pos:line="56" pos:column="17"/></operator><literal type="number" pos:line="56" pos:column="17">1<pos:position pos:line="56" pos:column="18"/></literal></expr>;<pos:position pos:line="56" pos:column="19"/></return></block></then></if>
      <if pos:line="57" pos:column="7">if <condition pos:line="57" pos:column="10">(<expr><call><name pos:line="57" pos:column="11">print_val<pos:position pos:line="57" pos:column="20"/></name> <argument_list pos:line="57" pos:column="21">(<argument><expr><name pos:line="57" pos:column="22">fp<pos:position pos:line="57" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="26">pfx<pos:position pos:line="57" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="31">p<pos:position pos:line="57" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="34">flags<pos:position pos:line="57" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="41">col<pos:position pos:line="57" pos:column="44"/></name></expr></argument>)<pos:position pos:line="57" pos:column="45"/></argument_list></call> <operator pos:line="57" pos:column="46">&lt;<pos:position pos:line="57" pos:column="50"/></operator> <literal type="number" pos:line="57" pos:column="48">0<pos:position pos:line="57" pos:column="49"/></literal></expr>)<pos:position pos:line="57" pos:column="50"/></condition><then pos:line="57" pos:column="50">
	<block type="pseudo"><return pos:line="58" pos:column="9">return <expr><operator pos:line="58" pos:column="16">-<pos:position pos:line="58" pos:column="17"/></operator><literal type="number" pos:line="58" pos:column="17">1<pos:position pos:line="58" pos:column="18"/></literal></expr>;<pos:position pos:line="58" pos:column="19"/></return></block></then></if>
      <expr_stmt><expr><name pos:line="59" pos:column="7">col<pos:position pos:line="59" pos:column="10"/></name> <operator pos:line="59" pos:column="11">+=<pos:position pos:line="59" pos:column="13"/></operator> <literal type="number" pos:line="59" pos:column="14">8<pos:position pos:line="59" pos:column="15"/></literal></expr>;<pos:position pos:line="59" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="60" pos:column="6"/></block></then>
    <elseif pos:line="61" pos:column="5">else <if pos:line="61" pos:column="10">if <condition pos:line="61" pos:column="13">(<expr><call><name pos:line="61" pos:column="14">print_val<pos:position pos:line="61" pos:column="23"/></name> <argument_list pos:line="61" pos:column="24">(<argument><expr><name pos:line="61" pos:column="25">fp<pos:position pos:line="61" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="29">pfx<pos:position pos:line="61" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="34">buf<pos:position pos:line="61" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="39">flags<pos:position pos:line="61" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="46">col<pos:position pos:line="61" pos:column="49"/></name></expr></argument>)<pos:position pos:line="61" pos:column="50"/></argument_list></call> <operator pos:line="61" pos:column="51">&lt;<pos:position pos:line="61" pos:column="55"/></operator> <literal type="number" pos:line="61" pos:column="53">0<pos:position pos:line="61" pos:column="54"/></literal></expr>)<pos:position pos:line="61" pos:column="55"/></condition><then pos:line="61" pos:column="55">
      <block type="pseudo"><return pos:line="62" pos:column="7">return <expr><operator pos:line="62" pos:column="14">-<pos:position pos:line="62" pos:column="15"/></operator><literal type="number" pos:line="62" pos:column="15">1<pos:position pos:line="62" pos:column="16"/></literal></expr>;<pos:position pos:line="62" pos:column="17"/></return></block></then></if></elseif></if>
    <expr_stmt><expr><name pos:line="63" pos:column="5">col<pos:position pos:line="63" pos:column="8"/></name> <operator pos:line="63" pos:column="9">+=<pos:position pos:line="63" pos:column="11"/></operator> <name pos:line="63" pos:column="12">w<pos:position pos:line="63" pos:column="13"/></name></expr>;<pos:position pos:line="63" pos:column="14"/></expr_stmt>

    <comment type="block" pos:line="65" pos:column="5">/* if the current word ends in \n, ignore all its trailing spaces
     * and reset column; this prevents us from putting only spaces (or
     * even none) on a line if the trailing spaces are located at our
     * current line width
     * XXX this covers ASCII space only, for display we probably
     * XXX want something like iswspace() here */</comment>
    <expr_stmt><expr><name pos:line="71" pos:column="5">sp<pos:position pos:line="71" pos:column="7"/></name> <operator pos:line="71" pos:column="8">=<pos:position pos:line="71" pos:column="9"/></operator> <name pos:line="71" pos:column="10">next<pos:position pos:line="71" pos:column="14"/></name></expr>;<pos:position pos:line="71" pos:column="15"/></expr_stmt>
    <while pos:line="72" pos:column="5">while <condition pos:line="72" pos:column="11">(<expr><operator pos:line="72" pos:column="12">*<pos:position pos:line="72" pos:column="13"/></operator><name pos:line="72" pos:column="13">sp<pos:position pos:line="72" pos:column="15"/></name> <operator pos:line="72" pos:column="16">&amp;&amp;<pos:position pos:line="72" pos:column="26"/></operator> <operator pos:line="72" pos:column="19">(<pos:position pos:line="72" pos:column="20"/></operator><operator pos:line="72" pos:column="20">*<pos:position pos:line="72" pos:column="21"/></operator><name pos:line="72" pos:column="21">sp<pos:position pos:line="72" pos:column="23"/></name> <operator pos:line="72" pos:column="24">==<pos:position pos:line="72" pos:column="26"/></operator> <literal type="char" pos:line="72" pos:column="27">' '<pos:position pos:line="72" pos:column="30"/></literal> <operator pos:line="72" pos:column="31">||<pos:position pos:line="72" pos:column="33"/></operator> <operator pos:line="72" pos:column="34">*<pos:position pos:line="72" pos:column="35"/></operator><name pos:line="72" pos:column="35">sp<pos:position pos:line="72" pos:column="37"/></name> <operator pos:line="72" pos:column="38">==<pos:position pos:line="72" pos:column="40"/></operator> <literal type="char" pos:line="72" pos:column="41">'\t'<pos:position pos:line="72" pos:column="45"/></literal><operator pos:line="72" pos:column="45">)<pos:position pos:line="72" pos:column="46"/></operator></expr>)<pos:position pos:line="72" pos:column="47"/></condition>
      <block type="pseudo"><expr_stmt><expr><name pos:line="73" pos:column="7">sp<pos:position pos:line="73" pos:column="9"/></name><operator pos:line="73" pos:column="9">++<pos:position pos:line="73" pos:column="11"/></operator></expr>;<pos:position pos:line="73" pos:column="12"/></expr_stmt></block></while>
    <if pos:line="74" pos:column="5">if <condition pos:line="74" pos:column="8">(<expr><operator pos:line="74" pos:column="9">*<pos:position pos:line="74" pos:column="10"/></operator><name pos:line="74" pos:column="10">sp<pos:position pos:line="74" pos:column="12"/></name> <operator pos:line="74" pos:column="13">==<pos:position pos:line="74" pos:column="15"/></operator> <literal type="char" pos:line="74" pos:column="16">'\n'<pos:position pos:line="74" pos:column="20"/></literal></expr>)<pos:position pos:line="74" pos:column="21"/></condition><then pos:line="74" pos:column="21">
    <block pos:line="75" pos:column="5">{
      <expr_stmt><expr><name pos:line="76" pos:column="7">next<pos:position pos:line="76" pos:column="11"/></name> <operator pos:line="76" pos:column="12">=<pos:position pos:line="76" pos:column="13"/></operator> <name pos:line="76" pos:column="14">sp<pos:position pos:line="76" pos:column="16"/></name></expr>;<pos:position pos:line="76" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name pos:line="77" pos:column="7">col<pos:position pos:line="77" pos:column="10"/></name> <operator pos:line="77" pos:column="11">=<pos:position pos:line="77" pos:column="12"/></operator> <literal type="number" pos:line="77" pos:column="13">0<pos:position pos:line="77" pos:column="14"/></literal></expr>;<pos:position pos:line="77" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="78" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="80" pos:column="5">p<pos:position pos:line="80" pos:column="6"/></name> <operator pos:line="80" pos:column="7">=<pos:position pos:line="80" pos:column="8"/></operator> <name pos:line="80" pos:column="9">next<pos:position pos:line="80" pos:column="13"/></name></expr>;<pos:position pos:line="80" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><name pos:line="81" pos:column="5">first<pos:position pos:line="81" pos:column="10"/></name> <operator pos:line="81" pos:column="11">=<pos:position pos:line="81" pos:column="12"/></operator> <literal type="number" pos:line="81" pos:column="13">0<pos:position pos:line="81" pos:column="14"/></literal></expr>;<pos:position pos:line="81" pos:column="15"/></expr_stmt>
  }<pos:position pos:line="82" pos:column="4"/></block></while>

  <comment type="block" pos:line="84" pos:column="3">/* if we have printed something but didn't \n-terminate it, do it
   * except the last word we printed ended in \n already */</comment>
  <if pos:line="86" pos:column="3">if <condition pos:line="86" pos:column="6">(<expr><name pos:line="86" pos:column="7">col<pos:position pos:line="86" pos:column="10"/></name> <operator pos:line="86" pos:column="11">&amp;&amp;<pos:position pos:line="86" pos:column="21"/></operator> <name><name pos:line="86" pos:column="14">buf<pos:position pos:line="86" pos:column="17"/></name><index pos:line="86" pos:column="17">[<expr><name pos:line="86" pos:column="18">l<pos:position pos:line="86" pos:column="19"/></name> <operator pos:line="86" pos:column="20">-<pos:position pos:line="86" pos:column="21"/></operator> <literal type="number" pos:line="86" pos:column="22">1<pos:position pos:line="86" pos:column="23"/></literal></expr>]<pos:position pos:line="86" pos:column="24"/></index></name> <operator pos:line="86" pos:column="25">!=<pos:position pos:line="86" pos:column="27"/></operator> <literal type="char" pos:line="86" pos:column="28">'\n'<pos:position pos:line="86" pos:column="32"/></literal></expr>)<pos:position pos:line="86" pos:column="33"/></condition><then pos:line="86" pos:column="33">
    <block type="pseudo"><if pos:line="87" pos:column="5">if <condition pos:line="87" pos:column="8">(<expr><call><name pos:line="87" pos:column="9">putc<pos:position pos:line="87" pos:column="13"/></name> <argument_list pos:line="87" pos:column="14">(<argument><expr><literal type="char" pos:line="87" pos:column="15">'\n'<pos:position pos:line="87" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="21">fp<pos:position pos:line="87" pos:column="23"/></name></expr></argument>)<pos:position pos:line="87" pos:column="24"/></argument_list></call> <operator pos:line="87" pos:column="25">==<pos:position pos:line="87" pos:column="27"/></operator> <name pos:line="87" pos:column="28">EOF<pos:position pos:line="87" pos:column="31"/></name></expr>)<pos:position pos:line="87" pos:column="32"/></condition><then pos:line="87" pos:column="32">
      <block type="pseudo"><return pos:line="88" pos:column="7">return <expr><operator pos:line="88" pos:column="14">-<pos:position pos:line="88" pos:column="15"/></operator><literal type="number" pos:line="88" pos:column="15">1<pos:position pos:line="88" pos:column="16"/></literal></expr>;<pos:position pos:line="88" pos:column="17"/></return></block></then></if></block></then></if>

  <return pos:line="90" pos:column="3">return <expr><literal type="number" pos:line="90" pos:column="10">0<pos:position pos:line="90" pos:column="11"/></literal></expr>;<pos:position pos:line="90" pos:column="12"/></return>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
