<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1471_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">REGEXP<pos:position pos:line="1" pos:column="7"/></name> <modifier pos:line="1" pos:column="8">*<pos:position pos:line="1" pos:column="9"/></modifier></type><name pos:line="1" pos:column="9">mutt_compile_regexp<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">s<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">int<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">flags<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">REGEXP<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">pp<pos:position pos:line="3" pos:column="13"/></name> <init pos:line="3" pos:column="14">= <expr><call><name pos:line="3" pos:column="16">safe_calloc<pos:position pos:line="3" pos:column="27"/></name> <argument_list pos:line="3" pos:column="28">(<argument><expr><sizeof pos:line="3" pos:column="29">sizeof <argument_list pos:line="3" pos:column="36">(<argument><expr><name pos:line="3" pos:column="37">REGEXP<pos:position pos:line="3" pos:column="43"/></name></expr></argument>)<pos:position pos:line="3" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="46">1<pos:position pos:line="3" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="49"/></decl_stmt>
  <expr_stmt><expr><name><name pos:line="4" pos:column="3">pp<pos:position pos:line="4" pos:column="5"/></name><operator pos:line="4" pos:column="5">-&gt;<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="7">pattern<pos:position pos:line="4" pos:column="14"/></name></name> <operator pos:line="4" pos:column="15">=<pos:position pos:line="4" pos:column="16"/></operator> <call><name pos:line="4" pos:column="17">safe_strdup<pos:position pos:line="4" pos:column="28"/></name> <argument_list pos:line="4" pos:column="29">(<argument><expr><name pos:line="4" pos:column="30">s<pos:position pos:line="4" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5" pos:column="3">pp<pos:position pos:line="5" pos:column="5"/></name><operator pos:line="5" pos:column="5">-&gt;<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="7">rx<pos:position pos:line="5" pos:column="9"/></name></name> <operator pos:line="5" pos:column="10">=<pos:position pos:line="5" pos:column="11"/></operator> <call><name pos:line="5" pos:column="12">safe_calloc<pos:position pos:line="5" pos:column="23"/></name> <argument_list pos:line="5" pos:column="24">(<argument><expr><sizeof pos:line="5" pos:column="25">sizeof <argument_list pos:line="5" pos:column="32">(<argument><expr><name pos:line="5" pos:column="33">regex_t<pos:position pos:line="5" pos:column="40"/></name></expr></argument>)<pos:position pos:line="5" pos:column="41"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="43">1<pos:position pos:line="5" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="46"/></expr_stmt>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><call><name pos:line="6" pos:column="7">REGCOMP<pos:position pos:line="6" pos:column="14"/></name> <argument_list pos:line="6" pos:column="15">(<argument><expr><name><name pos:line="6" pos:column="16">pp<pos:position pos:line="6" pos:column="18"/></name><operator pos:line="6" pos:column="18">-&gt;<pos:position pos:line="6" pos:column="23"/></operator><name pos:line="6" pos:column="20">rx<pos:position pos:line="6" pos:column="22"/></name></name></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="24">NONULL<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">s<pos:position pos:line="6" pos:column="32"/></name></expr></argument>)<pos:position pos:line="6" pos:column="33"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="6" pos:column="35">flags<pos:position pos:line="6" pos:column="40"/></name></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></call> <operator pos:line="6" pos:column="42">!=<pos:position pos:line="6" pos:column="44"/></operator> <literal type="number" pos:line="6" pos:column="45">0<pos:position pos:line="6" pos:column="46"/></literal></expr>)<pos:position pos:line="6" pos:column="47"/></condition><then pos:line="6" pos:column="47">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="5">mutt_free_regexp<pos:position pos:line="7" pos:column="21"/></name> <argument_list pos:line="7" pos:column="22">(<argument><expr><operator pos:line="7" pos:column="23">&amp;<pos:position pos:line="7" pos:column="28"/></operator><name pos:line="7" pos:column="24">pp<pos:position pos:line="7" pos:column="26"/></name></expr></argument>)<pos:position pos:line="7" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="28"/></expr_stmt></block></then></if>

  <return pos:line="9" pos:column="3">return <expr><name pos:line="9" pos:column="10">pp<pos:position pos:line="9" pos:column="12"/></name></expr>;<pos:position pos:line="9" pos:column="13"/></return>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
