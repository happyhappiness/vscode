<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1930_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">_nl_find_msg<pos:position pos:line="3" pos:column="13"/></name> <argument_list pos:line="3" pos:column="14">(<argument><expr><name pos:line="3" pos:column="15">domain_file<pos:position pos:line="3" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="28">domainbinding<pos:position pos:line="3" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="43">msgid<pos:position pos:line="3" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="50">lengthp<pos:position pos:line="3" pos:column="57"/></name></expr></argument>)<pos:position pos:line="3" pos:column="58"/></argument_list>
     struct <name pos:line="4" pos:column="13">loaded_l10nfile<pos:position pos:line="4" pos:column="28"/></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier><name pos:line="4" pos:column="30">domain_file<pos:position pos:line="4" pos:column="41"/></name></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
     <decl_stmt><decl><type><name><name pos:line="5" pos:column="6">struct<pos:position pos:line="5" pos:column="12"/></name> <name pos:line="5" pos:column="13">binding<pos:position pos:line="5" pos:column="20"/></name></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">domainbinding<pos:position pos:line="5" pos:column="35"/></name></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt>
     <decl_stmt><decl><type><specifier pos:line="6" pos:column="6">const<pos:position pos:line="6" pos:column="11"/></specifier> <name pos:line="6" pos:column="12">char<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">msgid<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
     <decl_stmt><decl><type><name pos:line="7" pos:column="6">size_t<pos:position pos:line="7" pos:column="12"/></name> <modifier pos:line="7" pos:column="13">*<pos:position pos:line="7" pos:column="14"/></modifier></type><name pos:line="7" pos:column="14">lengthp<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
<block pos:line="8" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">loaded_domain<pos:position pos:line="9" pos:column="23"/></name></name> <modifier pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></modifier></type><name pos:line="9" pos:column="25">domain<pos:position pos:line="9" pos:column="31"/></name></decl>;<pos:position pos:line="9" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">act<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name> <modifier pos:line="11" pos:column="8">*<pos:position pos:line="11" pos:column="9"/></modifier></type><name pos:line="11" pos:column="9">result<pos:position pos:line="11" pos:column="15"/></name></decl>;<pos:position pos:line="11" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">size_t<pos:position pos:line="12" pos:column="9"/></name></type> <name pos:line="12" pos:column="10">resultlen<pos:position pos:line="12" pos:column="19"/></name></decl>;<pos:position pos:line="12" pos:column="20"/></decl_stmt>

  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name><name pos:line="14" pos:column="7">domain_file<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">-&gt;<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="20">decided<pos:position pos:line="14" pos:column="27"/></name></name> <operator pos:line="14" pos:column="28">==<pos:position pos:line="14" pos:column="30"/></operator> <literal type="number" pos:line="14" pos:column="31">0<pos:position pos:line="14" pos:column="32"/></literal></expr>)<pos:position pos:line="14" pos:column="33"/></condition><then pos:line="14" pos:column="33">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="5">_nl_load_domain<pos:position pos:line="15" pos:column="20"/></name> <argument_list pos:line="15" pos:column="21">(<argument><expr><name pos:line="15" pos:column="22">domain_file<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="35">domainbinding<pos:position pos:line="15" pos:column="48"/></name></expr></argument>)<pos:position pos:line="15" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="50"/></expr_stmt></block></then></if>

  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name><name pos:line="17" pos:column="7">domain_file<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">-&gt;<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="20">data<pos:position pos:line="17" pos:column="24"/></name></name> <operator pos:line="17" pos:column="25">==<pos:position pos:line="17" pos:column="27"/></operator> <name pos:line="17" pos:column="28">NULL<pos:position pos:line="17" pos:column="32"/></name></expr>)<pos:position pos:line="17" pos:column="33"/></condition><then pos:line="17" pos:column="33">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">NULL<pos:position pos:line="18" pos:column="16"/></name></expr>;<pos:position pos:line="18" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="20" pos:column="3">domain<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <operator pos:line="20" pos:column="12">(<pos:position pos:line="20" pos:column="13"/></operator>struct <name pos:line="20" pos:column="20">loaded_domain<pos:position pos:line="20" pos:column="33"/></name> <operator pos:line="20" pos:column="34">*<pos:position pos:line="20" pos:column="35"/></operator><operator pos:line="20" pos:column="35">)<pos:position pos:line="20" pos:column="36"/></operator> <name><name pos:line="20" pos:column="37">domain_file<pos:position pos:line="20" pos:column="48"/></name><operator pos:line="20" pos:column="48">-&gt;<pos:position pos:line="20" pos:column="53"/></operator><name pos:line="20" pos:column="50">data<pos:position pos:line="20" pos:column="54"/></name></name></expr>;<pos:position pos:line="20" pos:column="55"/></expr_stmt>

  <comment type="block" pos:line="22" pos:column="3">/* Locate the MSGID and its translation.  */</comment>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name><name pos:line="23" pos:column="7">domain<pos:position pos:line="23" pos:column="13"/></name><operator pos:line="23" pos:column="13">-&gt;<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="15">hash_size<pos:position pos:line="23" pos:column="24"/></name></name> <operator pos:line="23" pos:column="25">&gt;<pos:position pos:line="23" pos:column="29"/></operator> <literal type="number" pos:line="23" pos:column="27">2<pos:position pos:line="23" pos:column="28"/></literal> <operator pos:line="23" pos:column="29">&amp;&amp;<pos:position pos:line="23" pos:column="39"/></operator> <name><name pos:line="23" pos:column="32">domain<pos:position pos:line="23" pos:column="38"/></name><operator pos:line="23" pos:column="38">-&gt;<pos:position pos:line="23" pos:column="43"/></operator><name pos:line="23" pos:column="40">hash_tab<pos:position pos:line="23" pos:column="48"/></name></name> <operator pos:line="23" pos:column="49">!=<pos:position pos:line="23" pos:column="51"/></operator> <name pos:line="23" pos:column="52">NULL<pos:position pos:line="23" pos:column="56"/></name></expr>)<pos:position pos:line="23" pos:column="57"/></condition><then pos:line="23" pos:column="57">
    <block pos:line="24" pos:column="5">{
      <comment type="block" pos:line="25" pos:column="7">/* Use the hashing table.  */</comment>
      <decl_stmt><decl><type><name pos:line="26" pos:column="7">nls_uint32<pos:position pos:line="26" pos:column="17"/></name></type> <name pos:line="26" pos:column="18">len<pos:position pos:line="26" pos:column="21"/></name> <init pos:line="26" pos:column="22">= <expr><call><name pos:line="26" pos:column="24">strlen<pos:position pos:line="26" pos:column="30"/></name> <argument_list pos:line="26" pos:column="31">(<argument><expr><name pos:line="26" pos:column="32">msgid<pos:position pos:line="26" pos:column="37"/></name></expr></argument>)<pos:position pos:line="26" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="39"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="27" pos:column="7">nls_uint32<pos:position pos:line="27" pos:column="17"/></name></type> <name pos:line="27" pos:column="18">hash_val<pos:position pos:line="27" pos:column="26"/></name> <init pos:line="27" pos:column="27">= <expr><call><name pos:line="27" pos:column="29">hash_string<pos:position pos:line="27" pos:column="40"/></name> <argument_list pos:line="27" pos:column="41">(<argument><expr><name pos:line="27" pos:column="42">msgid<pos:position pos:line="27" pos:column="47"/></name></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="49"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="28" pos:column="7">nls_uint32<pos:position pos:line="28" pos:column="17"/></name></type> <name pos:line="28" pos:column="18">idx<pos:position pos:line="28" pos:column="21"/></name> <init pos:line="28" pos:column="22">= <expr><name pos:line="28" pos:column="24">hash_val<pos:position pos:line="28" pos:column="32"/></name> <operator pos:line="28" pos:column="33">%<pos:position pos:line="28" pos:column="34"/></operator> <name><name pos:line="28" pos:column="35">domain<pos:position pos:line="28" pos:column="41"/></name><operator pos:line="28" pos:column="41">-&gt;<pos:position pos:line="28" pos:column="46"/></operator><name pos:line="28" pos:column="43">hash_size<pos:position pos:line="28" pos:column="52"/></name></name></expr></init></decl>;<pos:position pos:line="28" pos:column="53"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="29" pos:column="7">nls_uint32<pos:position pos:line="29" pos:column="17"/></name></type> <name pos:line="29" pos:column="18">incr<pos:position pos:line="29" pos:column="22"/></name> <init pos:line="29" pos:column="23">= <expr><literal type="number" pos:line="29" pos:column="25">1<pos:position pos:line="29" pos:column="26"/></literal> <operator pos:line="29" pos:column="27">+<pos:position pos:line="29" pos:column="28"/></operator> <operator pos:line="29" pos:column="29">(<pos:position pos:line="29" pos:column="30"/></operator><name pos:line="29" pos:column="30">hash_val<pos:position pos:line="29" pos:column="38"/></name> <operator pos:line="29" pos:column="39">%<pos:position pos:line="29" pos:column="40"/></operator> <operator pos:line="29" pos:column="41">(<pos:position pos:line="29" pos:column="42"/></operator><name><name pos:line="29" pos:column="42">domain<pos:position pos:line="29" pos:column="48"/></name><operator pos:line="29" pos:column="48">-&gt;<pos:position pos:line="29" pos:column="53"/></operator><name pos:line="29" pos:column="50">hash_size<pos:position pos:line="29" pos:column="59"/></name></name> <operator pos:line="29" pos:column="60">-<pos:position pos:line="29" pos:column="61"/></operator> <literal type="number" pos:line="29" pos:column="62">2<pos:position pos:line="29" pos:column="63"/></literal><operator pos:line="29" pos:column="63">)<pos:position pos:line="29" pos:column="64"/></operator><operator pos:line="29" pos:column="64">)<pos:position pos:line="29" pos:column="65"/></operator></expr></init></decl>;<pos:position pos:line="29" pos:column="66"/></decl_stmt>

      <while pos:line="31" pos:column="7">while <condition pos:line="31" pos:column="13">(<expr><literal type="number" pos:line="31" pos:column="14">1<pos:position pos:line="31" pos:column="15"/></literal></expr>)<pos:position pos:line="31" pos:column="16"/></condition>
	<block pos:line="32" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="33" pos:column="11">nls_uint32<pos:position pos:line="33" pos:column="21"/></name></type> <name pos:line="33" pos:column="22">nstr<pos:position pos:line="33" pos:column="26"/></name> <init pos:line="33" pos:column="27">= <expr><call><name pos:line="33" pos:column="29">W<pos:position pos:line="33" pos:column="30"/></name> <argument_list pos:line="33" pos:column="31">(<argument><expr><name><name pos:line="33" pos:column="32">domain<pos:position pos:line="33" pos:column="38"/></name><operator pos:line="33" pos:column="38">-&gt;<pos:position pos:line="33" pos:column="43"/></operator><name pos:line="33" pos:column="40">must_swap<pos:position pos:line="33" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="51">domain<pos:position pos:line="33" pos:column="57"/></name><operator pos:line="33" pos:column="57">-&gt;<pos:position pos:line="33" pos:column="62"/></operator><name pos:line="33" pos:column="59">hash_tab<pos:position pos:line="33" pos:column="67"/></name><index pos:line="33" pos:column="67">[<expr><name pos:line="33" pos:column="68">idx<pos:position pos:line="33" pos:column="71"/></name></expr>]<pos:position pos:line="33" pos:column="72"/></index></name></expr></argument>)<pos:position pos:line="33" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="74"/></decl_stmt>

	  <if pos:line="35" pos:column="11">if <condition pos:line="35" pos:column="14">(<expr><name pos:line="35" pos:column="15">nstr<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">==<pos:position pos:line="35" pos:column="22"/></operator> <literal type="number" pos:line="35" pos:column="23">0<pos:position pos:line="35" pos:column="24"/></literal></expr>)<pos:position pos:line="35" pos:column="25"/></condition><then pos:line="35" pos:column="25">
	    <comment type="block" pos:line="36" pos:column="13">/* Hash table entry is empty.  */</comment>
	    <block type="pseudo"><return pos:line="37" pos:column="13">return <expr><name pos:line="37" pos:column="20">NULL<pos:position pos:line="37" pos:column="24"/></name></expr>;<pos:position pos:line="37" pos:column="25"/></return></block></then></if>

	  <comment type="block" pos:line="39" pos:column="11">/* Compare msgid with the original string at index nstr-1.
	     We compare the lengths with &gt;=, not ==, because plural entries
	     are represented by strings with an embedded NUL.  */</comment>
	  <if pos:line="42" pos:column="11">if <condition pos:line="42" pos:column="14">(<expr><call><name pos:line="42" pos:column="15">W<pos:position pos:line="42" pos:column="16"/></name> <argument_list pos:line="42" pos:column="17">(<argument><expr><name><name pos:line="42" pos:column="18">domain<pos:position pos:line="42" pos:column="24"/></name><operator pos:line="42" pos:column="24">-&gt;<pos:position pos:line="42" pos:column="29"/></operator><name pos:line="42" pos:column="26">must_swap<pos:position pos:line="42" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="37">domain<pos:position pos:line="42" pos:column="43"/></name><operator pos:line="42" pos:column="43">-&gt;<pos:position pos:line="42" pos:column="48"/></operator><name pos:line="42" pos:column="45">orig_tab<pos:position pos:line="42" pos:column="53"/></name><index pos:line="42" pos:column="53">[<expr><name pos:line="42" pos:column="54">nstr<pos:position pos:line="42" pos:column="58"/></name> <operator pos:line="42" pos:column="59">-<pos:position pos:line="42" pos:column="60"/></operator> <literal type="number" pos:line="42" pos:column="61">1<pos:position pos:line="42" pos:column="62"/></literal></expr>]<pos:position pos:line="42" pos:column="63"/></index></name><operator pos:line="42" pos:column="63">.<pos:position pos:line="42" pos:column="64"/></operator><name pos:line="42" pos:column="64">length<pos:position pos:line="42" pos:column="70"/></name></expr></argument>)<pos:position pos:line="42" pos:column="71"/></argument_list></call> <operator pos:line="42" pos:column="72">&gt;=<pos:position pos:line="42" pos:column="77"/></operator> <name pos:line="42" pos:column="75">len<pos:position pos:line="42" pos:column="78"/></name>
	      <operator pos:line="43" pos:column="15">&amp;&amp;<pos:position pos:line="43" pos:column="25"/></operator> <operator pos:line="43" pos:column="18">(<pos:position pos:line="43" pos:column="19"/></operator><call><name pos:line="43" pos:column="19">strcmp<pos:position pos:line="43" pos:column="25"/></name> <argument_list pos:line="43" pos:column="26">(<argument><expr><name pos:line="43" pos:column="27">msgid<pos:position pos:line="43" pos:column="32"/></name></expr></argument>,
			  <argument><expr><name><name pos:line="44" pos:column="27">domain<pos:position pos:line="44" pos:column="33"/></name><operator pos:line="44" pos:column="33">-&gt;<pos:position pos:line="44" pos:column="38"/></operator><name pos:line="44" pos:column="35">data<pos:position pos:line="44" pos:column="39"/></name></name> <operator pos:line="44" pos:column="40">+<pos:position pos:line="44" pos:column="41"/></operator> <call><name pos:line="44" pos:column="42">W<pos:position pos:line="44" pos:column="43"/></name> <argument_list pos:line="44" pos:column="44">(<argument><expr><name><name pos:line="44" pos:column="45">domain<pos:position pos:line="44" pos:column="51"/></name><operator pos:line="44" pos:column="51">-&gt;<pos:position pos:line="44" pos:column="56"/></operator><name pos:line="44" pos:column="53">must_swap<pos:position pos:line="44" pos:column="62"/></name></name></expr></argument>,
					    <argument><expr><name><name pos:line="45" pos:column="45">domain<pos:position pos:line="45" pos:column="51"/></name><operator pos:line="45" pos:column="51">-&gt;<pos:position pos:line="45" pos:column="56"/></operator><name pos:line="45" pos:column="53">orig_tab<pos:position pos:line="45" pos:column="61"/></name><index pos:line="45" pos:column="61">[<expr><name pos:line="45" pos:column="62">nstr<pos:position pos:line="45" pos:column="66"/></name> <operator pos:line="45" pos:column="67">-<pos:position pos:line="45" pos:column="68"/></operator> <literal type="number" pos:line="45" pos:column="69">1<pos:position pos:line="45" pos:column="70"/></literal></expr>]<pos:position pos:line="45" pos:column="71"/></index></name><operator pos:line="45" pos:column="71">.<pos:position pos:line="45" pos:column="72"/></operator><name pos:line="45" pos:column="72">offset<pos:position pos:line="45" pos:column="78"/></name></expr></argument>)<pos:position pos:line="45" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="80"/></argument_list></call>
		  <operator pos:line="46" pos:column="19">==<pos:position pos:line="46" pos:column="21"/></operator> <literal type="number" pos:line="46" pos:column="22">0<pos:position pos:line="46" pos:column="23"/></literal><operator pos:line="46" pos:column="23">)<pos:position pos:line="46" pos:column="24"/></operator></expr>)<pos:position pos:line="46" pos:column="25"/></condition><then pos:line="46" pos:column="25">
	    <block pos:line="47" pos:column="13">{
	      <expr_stmt><expr><name pos:line="48" pos:column="15">act<pos:position pos:line="48" pos:column="18"/></name> <operator pos:line="48" pos:column="19">=<pos:position pos:line="48" pos:column="20"/></operator> <name pos:line="48" pos:column="21">nstr<pos:position pos:line="48" pos:column="25"/></name> <operator pos:line="48" pos:column="26">-<pos:position pos:line="48" pos:column="27"/></operator> <literal type="number" pos:line="48" pos:column="28">1<pos:position pos:line="48" pos:column="29"/></literal></expr>;<pos:position pos:line="48" pos:column="30"/></expr_stmt>
	      <goto pos:line="49" pos:column="15">goto <name pos:line="49" pos:column="20">found<pos:position pos:line="49" pos:column="25"/></name>;<pos:position pos:line="49" pos:column="26"/></goto>
	    }<pos:position pos:line="50" pos:column="14"/></block></then></if>

	  <if pos:line="52" pos:column="11">if <condition pos:line="52" pos:column="14">(<expr><name pos:line="52" pos:column="15">idx<pos:position pos:line="52" pos:column="18"/></name> <operator pos:line="52" pos:column="19">&gt;=<pos:position pos:line="52" pos:column="24"/></operator> <name><name pos:line="52" pos:column="22">domain<pos:position pos:line="52" pos:column="28"/></name><operator pos:line="52" pos:column="28">-&gt;<pos:position pos:line="52" pos:column="33"/></operator><name pos:line="52" pos:column="30">hash_size<pos:position pos:line="52" pos:column="39"/></name></name> <operator pos:line="52" pos:column="40">-<pos:position pos:line="52" pos:column="41"/></operator> <name pos:line="52" pos:column="42">incr<pos:position pos:line="52" pos:column="46"/></name></expr>)<pos:position pos:line="52" pos:column="47"/></condition><then pos:line="52" pos:column="47">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="13">idx<pos:position pos:line="53" pos:column="16"/></name> <operator pos:line="53" pos:column="17">-=<pos:position pos:line="53" pos:column="19"/></operator> <name><name pos:line="53" pos:column="20">domain<pos:position pos:line="53" pos:column="26"/></name><operator pos:line="53" pos:column="26">-&gt;<pos:position pos:line="53" pos:column="31"/></operator><name pos:line="53" pos:column="28">hash_size<pos:position pos:line="53" pos:column="37"/></name></name> <operator pos:line="53" pos:column="38">-<pos:position pos:line="53" pos:column="39"/></operator> <name pos:line="53" pos:column="40">incr<pos:position pos:line="53" pos:column="44"/></name></expr>;<pos:position pos:line="53" pos:column="45"/></expr_stmt></block></then>
	  <else pos:line="54" pos:column="11">else
	    <block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="13">idx<pos:position pos:line="55" pos:column="16"/></name> <operator pos:line="55" pos:column="17">+=<pos:position pos:line="55" pos:column="19"/></operator> <name pos:line="55" pos:column="20">incr<pos:position pos:line="55" pos:column="24"/></name></expr>;<pos:position pos:line="55" pos:column="25"/></expr_stmt></block></else></if>
	}<pos:position pos:line="56" pos:column="10"/></block></while>
      <comment type="block" pos:line="57" pos:column="7">/* NOTREACHED */</comment>
    }<pos:position pos:line="58" pos:column="6"/></block></then>
  <else pos:line="59" pos:column="3">else
    <block pos:line="60" pos:column="5">{
      <comment type="block" pos:line="61" pos:column="7">/* Try the default method:  binary search in the sorted array of
	 messages.  */</comment>
      <decl_stmt><decl><type><name pos:line="63" pos:column="7">size_t<pos:position pos:line="63" pos:column="13"/></name></type> <name pos:line="63" pos:column="14">top<pos:position pos:line="63" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="63" pos:column="19">bottom<pos:position pos:line="63" pos:column="25"/></name></decl>;<pos:position pos:line="63" pos:column="26"/></decl_stmt>

      <expr_stmt><expr><name pos:line="65" pos:column="7">bottom<pos:position pos:line="65" pos:column="13"/></name> <operator pos:line="65" pos:column="14">=<pos:position pos:line="65" pos:column="15"/></operator> <literal type="number" pos:line="65" pos:column="16">0<pos:position pos:line="65" pos:column="17"/></literal></expr>;<pos:position pos:line="65" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="66" pos:column="7">top<pos:position pos:line="66" pos:column="10"/></name> <operator pos:line="66" pos:column="11">=<pos:position pos:line="66" pos:column="12"/></operator> <name><name pos:line="66" pos:column="13">domain<pos:position pos:line="66" pos:column="19"/></name><operator pos:line="66" pos:column="19">-&gt;<pos:position pos:line="66" pos:column="24"/></operator><name pos:line="66" pos:column="21">nstrings<pos:position pos:line="66" pos:column="29"/></name></name></expr>;<pos:position pos:line="66" pos:column="30"/></expr_stmt>
      <while pos:line="67" pos:column="7">while <condition pos:line="67" pos:column="13">(<expr><name pos:line="67" pos:column="14">bottom<pos:position pos:line="67" pos:column="20"/></name> <operator pos:line="67" pos:column="21">&lt;<pos:position pos:line="67" pos:column="25"/></operator> <name pos:line="67" pos:column="23">top<pos:position pos:line="67" pos:column="26"/></name></expr>)<pos:position pos:line="67" pos:column="27"/></condition>
	<block pos:line="68" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="69" pos:column="11">int<pos:position pos:line="69" pos:column="14"/></name></type> <name pos:line="69" pos:column="15">cmp_val<pos:position pos:line="69" pos:column="22"/></name></decl>;<pos:position pos:line="69" pos:column="23"/></decl_stmt>

	  <expr_stmt><expr><name pos:line="71" pos:column="11">act<pos:position pos:line="71" pos:column="14"/></name> <operator pos:line="71" pos:column="15">=<pos:position pos:line="71" pos:column="16"/></operator> <operator pos:line="71" pos:column="17">(<pos:position pos:line="71" pos:column="18"/></operator><name pos:line="71" pos:column="18">bottom<pos:position pos:line="71" pos:column="24"/></name> <operator pos:line="71" pos:column="25">+<pos:position pos:line="71" pos:column="26"/></operator> <name pos:line="71" pos:column="27">top<pos:position pos:line="71" pos:column="30"/></name><operator pos:line="71" pos:column="30">)<pos:position pos:line="71" pos:column="31"/></operator> <operator pos:line="71" pos:column="32">/<pos:position pos:line="71" pos:column="33"/></operator> <literal type="number" pos:line="71" pos:column="34">2<pos:position pos:line="71" pos:column="35"/></literal></expr>;<pos:position pos:line="71" pos:column="36"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="72" pos:column="11">cmp_val<pos:position pos:line="72" pos:column="18"/></name> <operator pos:line="72" pos:column="19">=<pos:position pos:line="72" pos:column="20"/></operator> <call><name pos:line="72" pos:column="21">strcmp<pos:position pos:line="72" pos:column="27"/></name> <argument_list pos:line="72" pos:column="28">(<argument><expr><name pos:line="72" pos:column="29">msgid<pos:position pos:line="72" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="36">(<pos:position pos:line="72" pos:column="37"/></operator><name><name pos:line="72" pos:column="37">domain<pos:position pos:line="72" pos:column="43"/></name><operator pos:line="72" pos:column="43">-&gt;<pos:position pos:line="72" pos:column="48"/></operator><name pos:line="72" pos:column="45">data<pos:position pos:line="72" pos:column="49"/></name></name>
				    <operator pos:line="73" pos:column="37">+<pos:position pos:line="73" pos:column="38"/></operator> <call><name pos:line="73" pos:column="39">W<pos:position pos:line="73" pos:column="40"/></name> <argument_list pos:line="73" pos:column="41">(<argument><expr><name><name pos:line="73" pos:column="42">domain<pos:position pos:line="73" pos:column="48"/></name><operator pos:line="73" pos:column="48">-&gt;<pos:position pos:line="73" pos:column="53"/></operator><name pos:line="73" pos:column="50">must_swap<pos:position pos:line="73" pos:column="59"/></name></name></expr></argument>,
					 <argument><expr><name><name pos:line="74" pos:column="42">domain<pos:position pos:line="74" pos:column="48"/></name><operator pos:line="74" pos:column="48">-&gt;<pos:position pos:line="74" pos:column="53"/></operator><name pos:line="74" pos:column="50">orig_tab<pos:position pos:line="74" pos:column="58"/></name><index pos:line="74" pos:column="58">[<expr><name pos:line="74" pos:column="59">act<pos:position pos:line="74" pos:column="62"/></name></expr>]<pos:position pos:line="74" pos:column="63"/></index></name><operator pos:line="74" pos:column="63">.<pos:position pos:line="74" pos:column="64"/></operator><name pos:line="74" pos:column="64">offset<pos:position pos:line="74" pos:column="70"/></name></expr></argument>)<pos:position pos:line="74" pos:column="71"/></argument_list></call><operator pos:line="74" pos:column="71">)<pos:position pos:line="74" pos:column="72"/></operator></expr></argument>)<pos:position pos:line="74" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="74"/></expr_stmt>
	  <if pos:line="75" pos:column="11">if <condition pos:line="75" pos:column="14">(<expr><name pos:line="75" pos:column="15">cmp_val<pos:position pos:line="75" pos:column="22"/></name> <operator pos:line="75" pos:column="23">&lt;<pos:position pos:line="75" pos:column="27"/></operator> <literal type="number" pos:line="75" pos:column="25">0<pos:position pos:line="75" pos:column="26"/></literal></expr>)<pos:position pos:line="75" pos:column="27"/></condition><then pos:line="75" pos:column="27">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="76" pos:column="13">top<pos:position pos:line="76" pos:column="16"/></name> <operator pos:line="76" pos:column="17">=<pos:position pos:line="76" pos:column="18"/></operator> <name pos:line="76" pos:column="19">act<pos:position pos:line="76" pos:column="22"/></name></expr>;<pos:position pos:line="76" pos:column="23"/></expr_stmt></block></then>
	  <elseif pos:line="77" pos:column="11">else <if pos:line="77" pos:column="16">if <condition pos:line="77" pos:column="19">(<expr><name pos:line="77" pos:column="20">cmp_val<pos:position pos:line="77" pos:column="27"/></name> <operator pos:line="77" pos:column="28">&gt;<pos:position pos:line="77" pos:column="32"/></operator> <literal type="number" pos:line="77" pos:column="30">0<pos:position pos:line="77" pos:column="31"/></literal></expr>)<pos:position pos:line="77" pos:column="32"/></condition><then pos:line="77" pos:column="32">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="78" pos:column="13">bottom<pos:position pos:line="78" pos:column="19"/></name> <operator pos:line="78" pos:column="20">=<pos:position pos:line="78" pos:column="21"/></operator> <name pos:line="78" pos:column="22">act<pos:position pos:line="78" pos:column="25"/></name> <operator pos:line="78" pos:column="26">+<pos:position pos:line="78" pos:column="27"/></operator> <literal type="number" pos:line="78" pos:column="28">1<pos:position pos:line="78" pos:column="29"/></literal></expr>;<pos:position pos:line="78" pos:column="30"/></expr_stmt></block></then></if></elseif>
	  <else pos:line="79" pos:column="11">else
	    <block type="pseudo"><goto pos:line="80" pos:column="13">goto <name pos:line="80" pos:column="18">found<pos:position pos:line="80" pos:column="23"/></name>;<pos:position pos:line="80" pos:column="24"/></goto></block></else></if>
	}<pos:position pos:line="81" pos:column="10"/></block></while>
      <comment type="block" pos:line="82" pos:column="7">/* No translation was found.  */</comment>
      <return pos:line="83" pos:column="7">return <expr><name pos:line="83" pos:column="14">NULL<pos:position pos:line="83" pos:column="18"/></name></expr>;<pos:position pos:line="83" pos:column="19"/></return>
    }<pos:position pos:line="84" pos:column="6"/></block></else></if>

 <label><name pos:line="86" pos:column="2">found<pos:position pos:line="86" pos:column="7"/></name>:<pos:position pos:line="86" pos:column="8"/></label>
  <comment type="block" pos:line="87" pos:column="3">/* The translation was found at index ACT.  If we have to convert the
     string to use a different character set, this is the time.  */</comment>
  <expr_stmt><expr><name pos:line="89" pos:column="3">result<pos:position pos:line="89" pos:column="9"/></name> <operator pos:line="89" pos:column="10">=<pos:position pos:line="89" pos:column="11"/></operator> <operator pos:line="89" pos:column="12">(<pos:position pos:line="89" pos:column="13"/></operator><operator pos:line="89" pos:column="13">(<pos:position pos:line="89" pos:column="14"/></operator><name pos:line="89" pos:column="14">char<pos:position pos:line="89" pos:column="18"/></name> <operator pos:line="89" pos:column="19">*<pos:position pos:line="89" pos:column="20"/></operator><operator pos:line="89" pos:column="20">)<pos:position pos:line="89" pos:column="21"/></operator> <name><name pos:line="89" pos:column="22">domain<pos:position pos:line="89" pos:column="28"/></name><operator pos:line="89" pos:column="28">-&gt;<pos:position pos:line="89" pos:column="33"/></operator><name pos:line="89" pos:column="30">data<pos:position pos:line="89" pos:column="34"/></name></name>
	    <operator pos:line="90" pos:column="13">+<pos:position pos:line="90" pos:column="14"/></operator> <call><name pos:line="90" pos:column="15">W<pos:position pos:line="90" pos:column="16"/></name> <argument_list pos:line="90" pos:column="17">(<argument><expr><name><name pos:line="90" pos:column="18">domain<pos:position pos:line="90" pos:column="24"/></name><operator pos:line="90" pos:column="24">-&gt;<pos:position pos:line="90" pos:column="29"/></operator><name pos:line="90" pos:column="26">must_swap<pos:position pos:line="90" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="37">domain<pos:position pos:line="90" pos:column="43"/></name><operator pos:line="90" pos:column="43">-&gt;<pos:position pos:line="90" pos:column="48"/></operator><name pos:line="90" pos:column="45">trans_tab<pos:position pos:line="90" pos:column="54"/></name><index pos:line="90" pos:column="54">[<expr><name pos:line="90" pos:column="55">act<pos:position pos:line="90" pos:column="58"/></name></expr>]<pos:position pos:line="90" pos:column="59"/></index></name><operator pos:line="90" pos:column="59">.<pos:position pos:line="90" pos:column="60"/></operator><name pos:line="90" pos:column="60">offset<pos:position pos:line="90" pos:column="66"/></name></expr></argument>)<pos:position pos:line="90" pos:column="67"/></argument_list></call><operator pos:line="90" pos:column="67">)<pos:position pos:line="90" pos:column="68"/></operator></expr>;<pos:position pos:line="90" pos:column="69"/></expr_stmt>
  <expr_stmt><expr><name pos:line="91" pos:column="3">resultlen<pos:position pos:line="91" pos:column="12"/></name> <operator pos:line="91" pos:column="13">=<pos:position pos:line="91" pos:column="14"/></operator> <call><name pos:line="91" pos:column="15">W<pos:position pos:line="91" pos:column="16"/></name> <argument_list pos:line="91" pos:column="17">(<argument><expr><name><name pos:line="91" pos:column="18">domain<pos:position pos:line="91" pos:column="24"/></name><operator pos:line="91" pos:column="24">-&gt;<pos:position pos:line="91" pos:column="29"/></operator><name pos:line="91" pos:column="26">must_swap<pos:position pos:line="91" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="91" pos:column="37">domain<pos:position pos:line="91" pos:column="43"/></name><operator pos:line="91" pos:column="43">-&gt;<pos:position pos:line="91" pos:column="48"/></operator><name pos:line="91" pos:column="45">trans_tab<pos:position pos:line="91" pos:column="54"/></name><index pos:line="91" pos:column="54">[<expr><name pos:line="91" pos:column="55">act<pos:position pos:line="91" pos:column="58"/></name></expr>]<pos:position pos:line="91" pos:column="59"/></index></name><operator pos:line="91" pos:column="59">.<pos:position pos:line="91" pos:column="60"/></operator><name pos:line="91" pos:column="60">length<pos:position pos:line="91" pos:column="66"/></name></expr></argument>)<pos:position pos:line="91" pos:column="67"/></argument_list></call> <operator pos:line="91" pos:column="68">+<pos:position pos:line="91" pos:column="69"/></operator> <literal type="number" pos:line="91" pos:column="70">1<pos:position pos:line="91" pos:column="71"/></literal></expr>;<pos:position pos:line="91" pos:column="72"/></expr_stmt>

<cpp:if pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">if<pos:position pos:line="93" pos:column="4"/></cpp:directive> <expr><name pos:line="93" pos:column="5">defined<pos:position pos:line="93" pos:column="12"/></name> <name pos:line="93" pos:column="13">_LIBC<pos:position pos:line="93" pos:column="18"/></name> <operator pos:line="93" pos:column="19">||<pos:position pos:line="93" pos:column="21"/></operator> <name pos:line="93" pos:column="22">HAVE_ICONV<pos:position pos:line="93" pos:column="32"/></name></expr></cpp:if>
  <if pos:line="94" pos:column="3">if <condition pos:line="94" pos:column="6">(<expr><name><name pos:line="94" pos:column="7">domain<pos:position pos:line="94" pos:column="13"/></name><operator pos:line="94" pos:column="13">-&gt;<pos:position pos:line="94" pos:column="18"/></operator><name pos:line="94" pos:column="15">codeset_cntr<pos:position pos:line="94" pos:column="27"/></name></name>
      <operator pos:line="95" pos:column="7">!=<pos:position pos:line="95" pos:column="9"/></operator> <operator pos:line="95" pos:column="10">(<pos:position pos:line="95" pos:column="11"/></operator><ternary><condition><expr><name pos:line="95" pos:column="11">domainbinding<pos:position pos:line="95" pos:column="24"/></name> <operator pos:line="95" pos:column="25">!=<pos:position pos:line="95" pos:column="27"/></operator> <name pos:line="95" pos:column="28">NULL<pos:position pos:line="95" pos:column="32"/></name></expr> ?<pos:position pos:line="95" pos:column="34"/></condition><then pos:line="95" pos:column="34"> <expr><name><name pos:line="95" pos:column="35">domainbinding<pos:position pos:line="95" pos:column="48"/></name><operator pos:line="95" pos:column="48">-&gt;<pos:position pos:line="95" pos:column="53"/></operator><name pos:line="95" pos:column="50">codeset_cntr<pos:position pos:line="95" pos:column="62"/></name></name></expr> <pos:position pos:line="95" pos:column="63"/></then><else pos:line="95" pos:column="63">: <expr><literal type="number" pos:line="95" pos:column="65">0<pos:position pos:line="95" pos:column="66"/></literal></expr></else></ternary><operator pos:line="95" pos:column="66">)<pos:position pos:line="95" pos:column="67"/></operator></expr>)<pos:position pos:line="95" pos:column="68"/></condition><then pos:line="95" pos:column="68">
    <block pos:line="96" pos:column="5">{
      <comment type="block" pos:line="97" pos:column="7">/* The domain's codeset has changed through bind_textdomain_codeset()
	 since the message catalog was initialized or last accessed.  We
	 have to reinitialize the converter.  */</comment>
      <expr_stmt><expr><call><name pos:line="100" pos:column="7">_nl_free_domain_conv<pos:position pos:line="100" pos:column="27"/></name> <argument_list pos:line="100" pos:column="28">(<argument><expr><name pos:line="100" pos:column="29">domain<pos:position pos:line="100" pos:column="35"/></name></expr></argument>)<pos:position pos:line="100" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="101" pos:column="7">_nl_init_domain_conv<pos:position pos:line="101" pos:column="27"/></name> <argument_list pos:line="101" pos:column="28">(<argument><expr><name pos:line="101" pos:column="29">domain_file<pos:position pos:line="101" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="42">domain<pos:position pos:line="101" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="50">domainbinding<pos:position pos:line="101" pos:column="63"/></name></expr></argument>)<pos:position pos:line="101" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="102" pos:column="6"/></block></then></if>

  <if pos:line="104" pos:column="3">if <condition pos:line="104" pos:column="6">(
<cpp:ifdef pos:line="105" pos:column="1"># <cpp:directive pos:line="105" pos:column="3">ifdef<pos:position pos:line="105" pos:column="8"/></cpp:directive> <name pos:line="105" pos:column="9">_LIBC<pos:position pos:line="105" pos:column="14"/></name></cpp:ifdef>
      <expr><name><name pos:line="106" pos:column="7">domain<pos:position pos:line="106" pos:column="13"/></name><operator pos:line="106" pos:column="13">-&gt;<pos:position pos:line="106" pos:column="18"/></operator><name pos:line="106" pos:column="15">conv<pos:position pos:line="106" pos:column="19"/></name></name> <operator pos:line="106" pos:column="20">!=<pos:position pos:line="106" pos:column="22"/></operator> <operator pos:line="106" pos:column="23">(<pos:position pos:line="106" pos:column="24"/></operator><name pos:line="106" pos:column="24">__gconv_t<pos:position pos:line="106" pos:column="33"/></name><operator pos:line="106" pos:column="33">)<pos:position pos:line="106" pos:column="34"/></operator> <operator pos:line="106" pos:column="35">-<pos:position pos:line="106" pos:column="36"/></operator><literal type="number" pos:line="106" pos:column="36">1<pos:position pos:line="106" pos:column="37"/></literal>
<cpp:else pos:line="107" pos:column="1"># <cpp:directive pos:line="107" pos:column="3">else<pos:position pos:line="107" pos:column="7"/></cpp:directive></cpp:else>
<cpp:if pos:line="108" pos:column="1">#  <cpp:directive pos:line="108" pos:column="4">if<pos:position pos:line="108" pos:column="6"/></cpp:directive> <expr><name pos:line="108" pos:column="7">HAVE_ICONV<pos:position pos:line="108" pos:column="17"/></name></expr></cpp:if>
      <name><name pos:line="109" pos:column="7">domain<pos:position pos:line="109" pos:column="13"/></name><operator pos:line="109" pos:column="13">-&gt;<pos:position pos:line="109" pos:column="18"/></operator><name pos:line="109" pos:column="15">conv<pos:position pos:line="109" pos:column="19"/></name></name> <operator pos:line="109" pos:column="20">!=<pos:position pos:line="109" pos:column="22"/></operator> <operator pos:line="109" pos:column="23">(<pos:position pos:line="109" pos:column="24"/></operator><name pos:line="109" pos:column="24">iconv_t<pos:position pos:line="109" pos:column="31"/></name><operator pos:line="109" pos:column="31">)<pos:position pos:line="109" pos:column="32"/></operator> <operator pos:line="109" pos:column="33">-<pos:position pos:line="109" pos:column="34"/></operator><literal type="number" pos:line="109" pos:column="34">1<pos:position pos:line="109" pos:column="35"/></literal></expr>
<cpp:endif pos:line="110" pos:column="1">#  <cpp:directive pos:line="110" pos:column="4">endif<pos:position pos:line="110" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="111" pos:column="1"># <cpp:directive pos:line="111" pos:column="3">endif<pos:position pos:line="111" pos:column="8"/></cpp:directive></cpp:endif>
      )<pos:position pos:line="112" pos:column="8"/></condition><then pos:line="112" pos:column="8">
    <block pos:line="113" pos:column="5">{
      <comment type="block" pos:line="114" pos:column="7">/* We are supposed to do a conversion.  First allocate an
	 appropriate table with the same structure as the table
	 of translations in the file, where we can put the pointers
	 to the converted strings in.
	 There is a slight complication with plural entries.  They
	 are represented by consecutive NUL terminated strings.  We
	 handle this case by converting RESULTLEN bytes, including
	 NULs.  */</comment>

      <if pos:line="123" pos:column="7">if <condition pos:line="123" pos:column="10">(<expr><name><name pos:line="123" pos:column="11">domain<pos:position pos:line="123" pos:column="17"/></name><operator pos:line="123" pos:column="17">-&gt;<pos:position pos:line="123" pos:column="22"/></operator><name pos:line="123" pos:column="19">conv_tab<pos:position pos:line="123" pos:column="27"/></name></name> <operator pos:line="123" pos:column="28">==<pos:position pos:line="123" pos:column="30"/></operator> <name pos:line="123" pos:column="31">NULL<pos:position pos:line="123" pos:column="35"/></name>
	  <operator pos:line="124" pos:column="11">&amp;&amp;<pos:position pos:line="124" pos:column="21"/></operator> <operator pos:line="124" pos:column="14">(<pos:position pos:line="124" pos:column="15"/></operator><operator pos:line="124" pos:column="15">(<pos:position pos:line="124" pos:column="16"/></operator><name><name pos:line="124" pos:column="16">domain<pos:position pos:line="124" pos:column="22"/></name><operator pos:line="124" pos:column="22">-&gt;<pos:position pos:line="124" pos:column="27"/></operator><name pos:line="124" pos:column="24">conv_tab<pos:position pos:line="124" pos:column="32"/></name></name> <operator pos:line="124" pos:column="33">=<pos:position pos:line="124" pos:column="34"/></operator> <operator pos:line="124" pos:column="35">(<pos:position pos:line="124" pos:column="36"/></operator><name pos:line="124" pos:column="36">char<pos:position pos:line="124" pos:column="40"/></name> <operator pos:line="124" pos:column="41">*<pos:position pos:line="124" pos:column="42"/></operator><operator pos:line="124" pos:column="42">*<pos:position pos:line="124" pos:column="43"/></operator><operator pos:line="124" pos:column="43">)<pos:position pos:line="124" pos:column="44"/></operator> <call><name pos:line="124" pos:column="45">calloc<pos:position pos:line="124" pos:column="51"/></name> <argument_list pos:line="124" pos:column="52">(<argument><expr><name><name pos:line="124" pos:column="53">domain<pos:position pos:line="124" pos:column="59"/></name><operator pos:line="124" pos:column="59">-&gt;<pos:position pos:line="124" pos:column="64"/></operator><name pos:line="124" pos:column="61">nstrings<pos:position pos:line="124" pos:column="69"/></name></name></expr></argument>,
						    <argument><expr><sizeof pos:line="125" pos:column="53">sizeof <argument_list pos:line="125" pos:column="60">(<argument><expr><name pos:line="125" pos:column="61">char<pos:position pos:line="125" pos:column="65"/></name> <operator pos:line="125" pos:column="66">*<pos:position pos:line="125" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="125" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="125" pos:column="69"/></argument_list></call><operator pos:line="125" pos:column="69">)<pos:position pos:line="125" pos:column="70"/></operator>
	      <operator pos:line="126" pos:column="15">==<pos:position pos:line="126" pos:column="17"/></operator> <name pos:line="126" pos:column="18">NULL<pos:position pos:line="126" pos:column="22"/></name><operator pos:line="126" pos:column="22">)<pos:position pos:line="126" pos:column="23"/></operator></expr>)<pos:position pos:line="126" pos:column="24"/></condition><then pos:line="126" pos:column="24">
	<comment type="block" pos:line="127" pos:column="9">/* Mark that we didn't succeed allocating a table.  */</comment>
	<block type="pseudo"><expr_stmt><expr><name><name pos:line="128" pos:column="9">domain<pos:position pos:line="128" pos:column="15"/></name><operator pos:line="128" pos:column="15">-&gt;<pos:position pos:line="128" pos:column="20"/></operator><name pos:line="128" pos:column="17">conv_tab<pos:position pos:line="128" pos:column="25"/></name></name> <operator pos:line="128" pos:column="26">=<pos:position pos:line="128" pos:column="27"/></operator> <operator pos:line="128" pos:column="28">(<pos:position pos:line="128" pos:column="29"/></operator><name pos:line="128" pos:column="29">char<pos:position pos:line="128" pos:column="33"/></name> <operator pos:line="128" pos:column="34">*<pos:position pos:line="128" pos:column="35"/></operator><operator pos:line="128" pos:column="35">*<pos:position pos:line="128" pos:column="36"/></operator><operator pos:line="128" pos:column="36">)<pos:position pos:line="128" pos:column="37"/></operator> <operator pos:line="128" pos:column="38">-<pos:position pos:line="128" pos:column="39"/></operator><literal type="number" pos:line="128" pos:column="39">1<pos:position pos:line="128" pos:column="40"/></literal></expr>;<pos:position pos:line="128" pos:column="41"/></expr_stmt></block></then></if>

      <if pos:line="130" pos:column="7">if <condition pos:line="130" pos:column="10">(<expr><call><name pos:line="130" pos:column="11">__builtin_expect<pos:position pos:line="130" pos:column="27"/></name> <argument_list pos:line="130" pos:column="28">(<argument><expr><name><name pos:line="130" pos:column="29">domain<pos:position pos:line="130" pos:column="35"/></name><operator pos:line="130" pos:column="35">-&gt;<pos:position pos:line="130" pos:column="40"/></operator><name pos:line="130" pos:column="37">conv_tab<pos:position pos:line="130" pos:column="45"/></name></name> <operator pos:line="130" pos:column="46">==<pos:position pos:line="130" pos:column="48"/></operator> <operator pos:line="130" pos:column="49">(<pos:position pos:line="130" pos:column="50"/></operator><name pos:line="130" pos:column="50">char<pos:position pos:line="130" pos:column="54"/></name> <operator pos:line="130" pos:column="55">*<pos:position pos:line="130" pos:column="56"/></operator><operator pos:line="130" pos:column="56">*<pos:position pos:line="130" pos:column="57"/></operator><operator pos:line="130" pos:column="57">)<pos:position pos:line="130" pos:column="58"/></operator> <operator pos:line="130" pos:column="59">-<pos:position pos:line="130" pos:column="60"/></operator><literal type="number" pos:line="130" pos:column="60">1<pos:position pos:line="130" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="130" pos:column="63">0<pos:position pos:line="130" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="130" pos:column="66"/></condition><then pos:line="130" pos:column="66">
	<comment type="block" pos:line="131" pos:column="9">/* Nothing we can do, no more memory.  */</comment>
	<block type="pseudo"><goto pos:line="132" pos:column="9">goto <name pos:line="132" pos:column="14">converted<pos:position pos:line="132" pos:column="23"/></name>;<pos:position pos:line="132" pos:column="24"/></goto></block></then></if>

      <if pos:line="134" pos:column="7">if <condition pos:line="134" pos:column="10">(<expr><name><name pos:line="134" pos:column="11">domain<pos:position pos:line="134" pos:column="17"/></name><operator pos:line="134" pos:column="17">-&gt;<pos:position pos:line="134" pos:column="22"/></operator><name pos:line="134" pos:column="19">conv_tab<pos:position pos:line="134" pos:column="27"/></name><index pos:line="134" pos:column="27">[<expr><name pos:line="134" pos:column="28">act<pos:position pos:line="134" pos:column="31"/></name></expr>]<pos:position pos:line="134" pos:column="32"/></index></name> <operator pos:line="134" pos:column="33">==<pos:position pos:line="134" pos:column="35"/></operator> <name pos:line="134" pos:column="36">NULL<pos:position pos:line="134" pos:column="40"/></name></expr>)<pos:position pos:line="134" pos:column="41"/></condition><then pos:line="134" pos:column="41">
	<block pos:line="135" pos:column="9">{
	  <comment type="block" pos:line="136" pos:column="11">/* We haven't used this string so far, so it is not
	     translated yet.  Do this now.  */</comment>
	  <comment type="block" pos:line="138" pos:column="11">/* We use a bit more efficient memory handling.
	     We allocate always larger blocks which get used over
	     time.  This is faster than many small allocations.   */</comment>
	  <macro><name pos:line="141" pos:column="11">__libc_lock_define_initialized<pos:position pos:line="141" pos:column="41"/></name> <argument_list pos:line="141" pos:column="42">(<argument pos:line="141" pos:column="43">static<pos:position pos:line="141" pos:column="49"/></argument>, <argument pos:line="141" pos:column="51">lock<pos:position pos:line="141" pos:column="55"/></argument>)<pos:position pos:line="141" pos:column="56"/></argument_list></macro>
<cpp:define pos:line="142" pos:column="1"># <cpp:directive pos:line="142" pos:column="3">define<pos:position pos:line="142" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="142" pos:column="10">INITIAL_BLOCK_SIZE<pos:position pos:line="142" pos:column="28"/></name></cpp:macro>	<cpp:value pos:line="142" pos:column="33">4080<pos:position pos:line="142" pos:column="37"/></cpp:value></cpp:define>
	  <decl_stmt><decl><specifier pos:line="143" pos:column="11">static<pos:position pos:line="143" pos:column="17"/></specifier> <type><name pos:line="143" pos:column="18">unsigned<pos:position pos:line="143" pos:column="26"/></name> <name pos:line="143" pos:column="27">char<pos:position pos:line="143" pos:column="31"/></name> <modifier pos:line="143" pos:column="32">*<pos:position pos:line="143" pos:column="33"/></modifier></type><name pos:line="143" pos:column="33">freemem<pos:position pos:line="143" pos:column="40"/></name></decl>;<pos:position pos:line="143" pos:column="41"/></decl_stmt>
	  <decl_stmt><decl><specifier pos:line="144" pos:column="11">static<pos:position pos:line="144" pos:column="17"/></specifier> <type><name pos:line="144" pos:column="18">size_t<pos:position pos:line="144" pos:column="24"/></name></type> <name pos:line="144" pos:column="25">freemem_size<pos:position pos:line="144" pos:column="37"/></name></decl>;<pos:position pos:line="144" pos:column="38"/></decl_stmt>

	  <decl_stmt><decl><type><specifier pos:line="146" pos:column="11">const<pos:position pos:line="146" pos:column="16"/></specifier> <name pos:line="146" pos:column="17">unsigned<pos:position pos:line="146" pos:column="25"/></name> <name pos:line="146" pos:column="26">char<pos:position pos:line="146" pos:column="30"/></name> <modifier pos:line="146" pos:column="31">*<pos:position pos:line="146" pos:column="32"/></modifier></type><name pos:line="146" pos:column="32">inbuf<pos:position pos:line="146" pos:column="37"/></name></decl>;<pos:position pos:line="146" pos:column="38"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="147" pos:column="11">unsigned<pos:position pos:line="147" pos:column="19"/></name> <name pos:line="147" pos:column="20">char<pos:position pos:line="147" pos:column="24"/></name> <modifier pos:line="147" pos:column="25">*<pos:position pos:line="147" pos:column="26"/></modifier></type><name pos:line="147" pos:column="26">outbuf<pos:position pos:line="147" pos:column="32"/></name></decl>;<pos:position pos:line="147" pos:column="33"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="148" pos:column="11">int<pos:position pos:line="148" pos:column="14"/></name></type> <name pos:line="148" pos:column="15">malloc_count<pos:position pos:line="148" pos:column="27"/></name></decl>;<pos:position pos:line="148" pos:column="28"/></decl_stmt>
<cpp:ifndef pos:line="149" pos:column="1"># <cpp:directive pos:line="149" pos:column="3">ifndef<pos:position pos:line="149" pos:column="9"/></cpp:directive> <name pos:line="149" pos:column="10">_LIBC<pos:position pos:line="149" pos:column="15"/></name></cpp:ifndef>
	  <decl_stmt><decl><type><name pos:line="150" pos:column="11">transmem_block_t<pos:position pos:line="150" pos:column="27"/></name> <modifier pos:line="150" pos:column="28">*<pos:position pos:line="150" pos:column="29"/></modifier></type><name pos:line="150" pos:column="29">transmem_list<pos:position pos:line="150" pos:column="42"/></name> <init pos:line="150" pos:column="43">= <expr><name pos:line="150" pos:column="45">NULL<pos:position pos:line="150" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="150" pos:column="50"/></decl_stmt>
<cpp:endif pos:line="151" pos:column="1"># <cpp:directive pos:line="151" pos:column="3">endif<pos:position pos:line="151" pos:column="8"/></cpp:directive></cpp:endif>

	  <expr_stmt><expr><call><name pos:line="153" pos:column="11">__libc_lock_lock<pos:position pos:line="153" pos:column="27"/></name> <argument_list pos:line="153" pos:column="28">(<argument><expr><name pos:line="153" pos:column="29">lock<pos:position pos:line="153" pos:column="33"/></name></expr></argument>)<pos:position pos:line="153" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="35"/></expr_stmt>

	  <expr_stmt><expr><name pos:line="155" pos:column="11">inbuf<pos:position pos:line="155" pos:column="16"/></name> <operator pos:line="155" pos:column="17">=<pos:position pos:line="155" pos:column="18"/></operator> <operator pos:line="155" pos:column="19">(<pos:position pos:line="155" pos:column="20"/></operator><specifier pos:line="155" pos:column="20">const<pos:position pos:line="155" pos:column="25"/></specifier> <name pos:line="155" pos:column="26">unsigned<pos:position pos:line="155" pos:column="34"/></name> <name pos:line="155" pos:column="35">char<pos:position pos:line="155" pos:column="39"/></name> <operator pos:line="155" pos:column="40">*<pos:position pos:line="155" pos:column="41"/></operator><operator pos:line="155" pos:column="41">)<pos:position pos:line="155" pos:column="42"/></operator> <name pos:line="155" pos:column="43">result<pos:position pos:line="155" pos:column="49"/></name></expr>;<pos:position pos:line="155" pos:column="50"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="156" pos:column="11">outbuf<pos:position pos:line="156" pos:column="17"/></name> <operator pos:line="156" pos:column="18">=<pos:position pos:line="156" pos:column="19"/></operator> <name pos:line="156" pos:column="20">freemem<pos:position pos:line="156" pos:column="27"/></name> <operator pos:line="156" pos:column="28">+<pos:position pos:line="156" pos:column="29"/></operator> <sizeof pos:line="156" pos:column="30">sizeof <argument_list pos:line="156" pos:column="37">(<argument><expr><name pos:line="156" pos:column="38">size_t<pos:position pos:line="156" pos:column="44"/></name></expr></argument>)<pos:position pos:line="156" pos:column="45"/></argument_list></sizeof></expr>;<pos:position pos:line="156" pos:column="46"/></expr_stmt>

	  <expr_stmt><expr><name pos:line="158" pos:column="11">malloc_count<pos:position pos:line="158" pos:column="23"/></name> <operator pos:line="158" pos:column="24">=<pos:position pos:line="158" pos:column="25"/></operator> <literal type="number" pos:line="158" pos:column="26">0<pos:position pos:line="158" pos:column="27"/></literal></expr>;<pos:position pos:line="158" pos:column="28"/></expr_stmt>
	  <while pos:line="159" pos:column="11">while <condition pos:line="159" pos:column="17">(<expr><literal type="number" pos:line="159" pos:column="18">1<pos:position pos:line="159" pos:column="19"/></literal></expr>)<pos:position pos:line="159" pos:column="20"/></condition>
	    <block pos:line="160" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="161" pos:column="15">transmem_block_t<pos:position pos:line="161" pos:column="31"/></name> <modifier pos:line="161" pos:column="32">*<pos:position pos:line="161" pos:column="33"/></modifier></type><name pos:line="161" pos:column="33">newmem<pos:position pos:line="161" pos:column="39"/></name></decl>;<pos:position pos:line="161" pos:column="40"/></decl_stmt>
<cpp:ifdef pos:line="162" pos:column="1"># <cpp:directive pos:line="162" pos:column="3">ifdef<pos:position pos:line="162" pos:column="8"/></cpp:directive> <name pos:line="162" pos:column="9">_LIBC<pos:position pos:line="162" pos:column="14"/></name></cpp:ifdef>
	      <decl_stmt><decl><type><name pos:line="163" pos:column="15">size_t<pos:position pos:line="163" pos:column="21"/></name></type> <name pos:line="163" pos:column="22">non_reversible<pos:position pos:line="163" pos:column="36"/></name></decl>;<pos:position pos:line="163" pos:column="37"/></decl_stmt>
	      <decl_stmt><decl><type><name pos:line="164" pos:column="15">int<pos:position pos:line="164" pos:column="18"/></name></type> <name pos:line="164" pos:column="19">res<pos:position pos:line="164" pos:column="22"/></name></decl>;<pos:position pos:line="164" pos:column="23"/></decl_stmt>

	      <if pos:line="166" pos:column="15">if <condition pos:line="166" pos:column="18">(<expr><name pos:line="166" pos:column="19">freemem_size<pos:position pos:line="166" pos:column="31"/></name> <operator pos:line="166" pos:column="32">&lt;<pos:position pos:line="166" pos:column="36"/></operator> <sizeof pos:line="166" pos:column="34">sizeof <argument_list pos:line="166" pos:column="41">(<argument><expr><name pos:line="166" pos:column="42">size_t<pos:position pos:line="166" pos:column="48"/></name></expr></argument>)<pos:position pos:line="166" pos:column="49"/></argument_list></sizeof></expr>)<pos:position pos:line="166" pos:column="50"/></condition><then pos:line="166" pos:column="50">
		<block type="pseudo"><goto pos:line="167" pos:column="17">goto <name pos:line="167" pos:column="22">resize_freemem<pos:position pos:line="167" pos:column="36"/></name>;<pos:position pos:line="167" pos:column="37"/></goto></block></then></if>

	      <expr_stmt><expr><name pos:line="169" pos:column="15">res<pos:position pos:line="169" pos:column="18"/></name> <operator pos:line="169" pos:column="19">=<pos:position pos:line="169" pos:column="20"/></operator> <call><name pos:line="169" pos:column="21">__gconv<pos:position pos:line="169" pos:column="28"/></name> <argument_list pos:line="169" pos:column="29">(<argument><expr><name><name pos:line="169" pos:column="30">domain<pos:position pos:line="169" pos:column="36"/></name><operator pos:line="169" pos:column="36">-&gt;<pos:position pos:line="169" pos:column="41"/></operator><name pos:line="169" pos:column="38">conv<pos:position pos:line="169" pos:column="42"/></name></name></expr></argument>,
			     <argument><expr><operator pos:line="170" pos:column="30">&amp;<pos:position pos:line="170" pos:column="35"/></operator><name pos:line="170" pos:column="31">inbuf<pos:position pos:line="170" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="170" pos:column="38">inbuf<pos:position pos:line="170" pos:column="43"/></name> <operator pos:line="170" pos:column="44">+<pos:position pos:line="170" pos:column="45"/></operator> <name pos:line="170" pos:column="46">resultlen<pos:position pos:line="170" pos:column="55"/></name></expr></argument>,
			     <argument><expr><operator pos:line="171" pos:column="30">&amp;<pos:position pos:line="171" pos:column="35"/></operator><name pos:line="171" pos:column="31">outbuf<pos:position pos:line="171" pos:column="37"/></name></expr></argument>,
			     <argument><expr><name pos:line="172" pos:column="30">outbuf<pos:position pos:line="172" pos:column="36"/></name> <operator pos:line="172" pos:column="37">+<pos:position pos:line="172" pos:column="38"/></operator> <name pos:line="172" pos:column="39">freemem_size<pos:position pos:line="172" pos:column="51"/></name> <operator pos:line="172" pos:column="52">-<pos:position pos:line="172" pos:column="53"/></operator> <sizeof pos:line="172" pos:column="54">sizeof <argument_list pos:line="172" pos:column="61">(<argument><expr><name pos:line="172" pos:column="62">size_t<pos:position pos:line="172" pos:column="68"/></name></expr></argument>)<pos:position pos:line="172" pos:column="69"/></argument_list></sizeof></expr></argument>,
			     <argument><expr><operator pos:line="173" pos:column="30">&amp;<pos:position pos:line="173" pos:column="35"/></operator><name pos:line="173" pos:column="31">non_reversible<pos:position pos:line="173" pos:column="45"/></name></expr></argument>)<pos:position pos:line="173" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="47"/></expr_stmt>

	      <if pos:line="175" pos:column="15">if <condition pos:line="175" pos:column="18">(<expr><name pos:line="175" pos:column="19">res<pos:position pos:line="175" pos:column="22"/></name> <operator pos:line="175" pos:column="23">==<pos:position pos:line="175" pos:column="25"/></operator> <name pos:line="175" pos:column="26">__GCONV_OK<pos:position pos:line="175" pos:column="36"/></name> <operator pos:line="175" pos:column="37">||<pos:position pos:line="175" pos:column="39"/></operator> <name pos:line="175" pos:column="40">res<pos:position pos:line="175" pos:column="43"/></name> <operator pos:line="175" pos:column="44">==<pos:position pos:line="175" pos:column="46"/></operator> <name pos:line="175" pos:column="47">__GCONV_EMPTY_INPUT<pos:position pos:line="175" pos:column="66"/></name></expr>)<pos:position pos:line="175" pos:column="67"/></condition><then pos:line="175" pos:column="67">
		<block type="pseudo"><break pos:line="176" pos:column="17">break;<pos:position pos:line="176" pos:column="23"/></break></block></then></if>

	      <if pos:line="178" pos:column="15">if <condition pos:line="178" pos:column="18">(<expr><name pos:line="178" pos:column="19">res<pos:position pos:line="178" pos:column="22"/></name> <operator pos:line="178" pos:column="23">!=<pos:position pos:line="178" pos:column="25"/></operator> <name pos:line="178" pos:column="26">__GCONV_FULL_OUTPUT<pos:position pos:line="178" pos:column="45"/></name></expr>)<pos:position pos:line="178" pos:column="46"/></condition><then pos:line="178" pos:column="46">
		<block pos:line="179" pos:column="17">{
		  <expr_stmt><expr><call><name pos:line="180" pos:column="19">__libc_lock_unlock<pos:position pos:line="180" pos:column="37"/></name> <argument_list pos:line="180" pos:column="38">(<argument><expr><name pos:line="180" pos:column="39">lock<pos:position pos:line="180" pos:column="43"/></name></expr></argument>)<pos:position pos:line="180" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="45"/></expr_stmt>
		  <goto pos:line="181" pos:column="19">goto <name pos:line="181" pos:column="24">converted<pos:position pos:line="181" pos:column="33"/></name>;<pos:position pos:line="181" pos:column="34"/></goto>
		}<pos:position pos:line="182" pos:column="18"/></block></then></if>

	      <expr_stmt><expr><name pos:line="184" pos:column="15">inbuf<pos:position pos:line="184" pos:column="20"/></name> <operator pos:line="184" pos:column="21">=<pos:position pos:line="184" pos:column="22"/></operator> <name pos:line="184" pos:column="23">result<pos:position pos:line="184" pos:column="29"/></name></expr>;<pos:position pos:line="184" pos:column="30"/></expr_stmt>
<cpp:else pos:line="185" pos:column="1"># <cpp:directive pos:line="185" pos:column="3">else<pos:position pos:line="185" pos:column="7"/></cpp:directive></cpp:else>
<cpp:if pos:line="186" pos:column="1">#  <cpp:directive pos:line="186" pos:column="4">if<pos:position pos:line="186" pos:column="6"/></cpp:directive> <expr><name pos:line="186" pos:column="7">HAVE_ICONV<pos:position pos:line="186" pos:column="17"/></name></expr></cpp:if>
	      <decl_stmt><decl><type><specifier pos:line="187" pos:column="15">const<pos:position pos:line="187" pos:column="20"/></specifier> <name pos:line="187" pos:column="21">char<pos:position pos:line="187" pos:column="25"/></name> <modifier pos:line="187" pos:column="26">*<pos:position pos:line="187" pos:column="27"/></modifier></type><name pos:line="187" pos:column="27">inptr<pos:position pos:line="187" pos:column="32"/></name> <init pos:line="187" pos:column="33">= <expr><operator pos:line="187" pos:column="35">(<pos:position pos:line="187" pos:column="36"/></operator><specifier pos:line="187" pos:column="36">const<pos:position pos:line="187" pos:column="41"/></specifier> <name pos:line="187" pos:column="42">char<pos:position pos:line="187" pos:column="46"/></name> <operator pos:line="187" pos:column="47">*<pos:position pos:line="187" pos:column="48"/></operator><operator pos:line="187" pos:column="48">)<pos:position pos:line="187" pos:column="49"/></operator> <name pos:line="187" pos:column="50">inbuf<pos:position pos:line="187" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="187" pos:column="56"/></decl_stmt>
	      <decl_stmt><decl><type><name pos:line="188" pos:column="15">size_t<pos:position pos:line="188" pos:column="21"/></name></type> <name pos:line="188" pos:column="22">inleft<pos:position pos:line="188" pos:column="28"/></name> <init pos:line="188" pos:column="29">= <expr><name pos:line="188" pos:column="31">resultlen<pos:position pos:line="188" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="188" pos:column="41"/></decl_stmt>
	      <decl_stmt><decl><type><name pos:line="189" pos:column="15">char<pos:position pos:line="189" pos:column="19"/></name> <modifier pos:line="189" pos:column="20">*<pos:position pos:line="189" pos:column="21"/></modifier></type><name pos:line="189" pos:column="21">outptr<pos:position pos:line="189" pos:column="27"/></name> <init pos:line="189" pos:column="28">= <expr><operator pos:line="189" pos:column="30">(<pos:position pos:line="189" pos:column="31"/></operator><name pos:line="189" pos:column="31">char<pos:position pos:line="189" pos:column="35"/></name> <operator pos:line="189" pos:column="36">*<pos:position pos:line="189" pos:column="37"/></operator><operator pos:line="189" pos:column="37">)<pos:position pos:line="189" pos:column="38"/></operator> <name pos:line="189" pos:column="39">outbuf<pos:position pos:line="189" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="189" pos:column="46"/></decl_stmt>
	      <decl_stmt><decl><type><name pos:line="190" pos:column="15">size_t<pos:position pos:line="190" pos:column="21"/></name></type> <name pos:line="190" pos:column="22">outleft<pos:position pos:line="190" pos:column="29"/></name></decl>;<pos:position pos:line="190" pos:column="30"/></decl_stmt>

	      <if pos:line="192" pos:column="15">if <condition pos:line="192" pos:column="18">(<expr><name pos:line="192" pos:column="19">freemem_size<pos:position pos:line="192" pos:column="31"/></name> <operator pos:line="192" pos:column="32">&lt;<pos:position pos:line="192" pos:column="36"/></operator> <sizeof pos:line="192" pos:column="34">sizeof <argument_list pos:line="192" pos:column="41">(<argument><expr><name pos:line="192" pos:column="42">size_t<pos:position pos:line="192" pos:column="48"/></name></expr></argument>)<pos:position pos:line="192" pos:column="49"/></argument_list></sizeof></expr>)<pos:position pos:line="192" pos:column="50"/></condition><then pos:line="192" pos:column="50">
		<block type="pseudo"><goto pos:line="193" pos:column="17">goto <name pos:line="193" pos:column="22">resize_freemem<pos:position pos:line="193" pos:column="36"/></name>;<pos:position pos:line="193" pos:column="37"/></goto></block></then></if>

	      <expr_stmt><expr><name pos:line="195" pos:column="15">outleft<pos:position pos:line="195" pos:column="22"/></name> <operator pos:line="195" pos:column="23">=<pos:position pos:line="195" pos:column="24"/></operator> <name pos:line="195" pos:column="25">freemem_size<pos:position pos:line="195" pos:column="37"/></name> <operator pos:line="195" pos:column="38">-<pos:position pos:line="195" pos:column="39"/></operator> <sizeof pos:line="195" pos:column="40">sizeof <argument_list pos:line="195" pos:column="47">(<argument><expr><name pos:line="195" pos:column="48">size_t<pos:position pos:line="195" pos:column="54"/></name></expr></argument>)<pos:position pos:line="195" pos:column="55"/></argument_list></sizeof></expr>;<pos:position pos:line="195" pos:column="56"/></expr_stmt>
	      <if pos:line="196" pos:column="15">if <condition pos:line="196" pos:column="18">(<expr><call><name pos:line="196" pos:column="19">iconv<pos:position pos:line="196" pos:column="24"/></name> <argument_list pos:line="196" pos:column="25">(<argument><expr><name><name pos:line="196" pos:column="26">domain<pos:position pos:line="196" pos:column="32"/></name><operator pos:line="196" pos:column="32">-&gt;<pos:position pos:line="196" pos:column="37"/></operator><name pos:line="196" pos:column="34">conv<pos:position pos:line="196" pos:column="38"/></name></name></expr></argument>,
			 <argument><expr><operator pos:line="197" pos:column="26">(<pos:position pos:line="197" pos:column="27"/></operator><name pos:line="197" pos:column="27">ICONV_CONST<pos:position pos:line="197" pos:column="38"/></name> <name pos:line="197" pos:column="39">char<pos:position pos:line="197" pos:column="43"/></name> <operator pos:line="197" pos:column="44">*<pos:position pos:line="197" pos:column="45"/></operator><operator pos:line="197" pos:column="45">*<pos:position pos:line="197" pos:column="46"/></operator><operator pos:line="197" pos:column="46">)<pos:position pos:line="197" pos:column="47"/></operator> <operator pos:line="197" pos:column="48">&amp;<pos:position pos:line="197" pos:column="53"/></operator><name pos:line="197" pos:column="49">inptr<pos:position pos:line="197" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="197" pos:column="56">&amp;<pos:position pos:line="197" pos:column="61"/></operator><name pos:line="197" pos:column="57">inleft<pos:position pos:line="197" pos:column="63"/></name></expr></argument>,
			 <argument><expr><operator pos:line="198" pos:column="26">&amp;<pos:position pos:line="198" pos:column="31"/></operator><name pos:line="198" pos:column="27">outptr<pos:position pos:line="198" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="198" pos:column="35">&amp;<pos:position pos:line="198" pos:column="40"/></operator><name pos:line="198" pos:column="36">outleft<pos:position pos:line="198" pos:column="43"/></name></expr></argument>)<pos:position pos:line="198" pos:column="44"/></argument_list></call>
		  <operator pos:line="199" pos:column="19">!=<pos:position pos:line="199" pos:column="21"/></operator> <call pos:line="199" pos:column="22">(<name pos:line="199" pos:column="23">size_t<pos:position pos:line="199" pos:column="29"/></name>) <argument_list pos:line="199" pos:column="31">(<argument><expr><operator pos:line="199" pos:column="32">-<pos:position pos:line="199" pos:column="33"/></operator><literal type="number" pos:line="199" pos:column="33">1<pos:position pos:line="199" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="199" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="199" pos:column="36"/></condition><then pos:line="199" pos:column="36">
		<block pos:line="200" pos:column="17">{
		  <expr_stmt><expr><name pos:line="201" pos:column="19">outbuf<pos:position pos:line="201" pos:column="25"/></name> <operator pos:line="201" pos:column="26">=<pos:position pos:line="201" pos:column="27"/></operator> <operator pos:line="201" pos:column="28">(<pos:position pos:line="201" pos:column="29"/></operator><name pos:line="201" pos:column="29">unsigned<pos:position pos:line="201" pos:column="37"/></name> <name pos:line="201" pos:column="38">char<pos:position pos:line="201" pos:column="42"/></name> <operator pos:line="201" pos:column="43">*<pos:position pos:line="201" pos:column="44"/></operator><operator pos:line="201" pos:column="44">)<pos:position pos:line="201" pos:column="45"/></operator> <name pos:line="201" pos:column="46">outptr<pos:position pos:line="201" pos:column="52"/></name></expr>;<pos:position pos:line="201" pos:column="53"/></expr_stmt>
		  <break pos:line="202" pos:column="19">break;<pos:position pos:line="202" pos:column="25"/></break>
		}<pos:position pos:line="203" pos:column="18"/></block></then></if>
	      <if pos:line="204" pos:column="15">if <condition pos:line="204" pos:column="18">(<expr><name pos:line="204" pos:column="19">errno<pos:position pos:line="204" pos:column="24"/></name> <operator pos:line="204" pos:column="25">!=<pos:position pos:line="204" pos:column="27"/></operator> <name pos:line="204" pos:column="28">E2BIG<pos:position pos:line="204" pos:column="33"/></name></expr>)<pos:position pos:line="204" pos:column="34"/></condition><then pos:line="204" pos:column="34">
		<block pos:line="205" pos:column="17">{
		  <expr_stmt><expr><call><name pos:line="206" pos:column="19">__libc_lock_unlock<pos:position pos:line="206" pos:column="37"/></name> <argument_list pos:line="206" pos:column="38">(<argument><expr><name pos:line="206" pos:column="39">lock<pos:position pos:line="206" pos:column="43"/></name></expr></argument>)<pos:position pos:line="206" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="206" pos:column="45"/></expr_stmt>
		  <goto pos:line="207" pos:column="19">goto <name pos:line="207" pos:column="24">converted<pos:position pos:line="207" pos:column="33"/></name>;<pos:position pos:line="207" pos:column="34"/></goto>
		}<pos:position pos:line="208" pos:column="18"/></block></then></if>
<cpp:endif pos:line="209" pos:column="1">#  <cpp:directive pos:line="209" pos:column="4">endif<pos:position pos:line="209" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="210" pos:column="1"># <cpp:directive pos:line="210" pos:column="3">endif<pos:position pos:line="210" pos:column="8"/></cpp:directive></cpp:endif>

	    <label><name pos:line="212" pos:column="13">resize_freemem<pos:position pos:line="212" pos:column="27"/></name>:<pos:position pos:line="212" pos:column="28"/></label>
	      <comment type="block" pos:line="213" pos:column="15">/* We must allocate a new buffer or resize the old one.  */</comment>
	      <if pos:line="214" pos:column="15">if <condition pos:line="214" pos:column="18">(<expr><name pos:line="214" pos:column="19">malloc_count<pos:position pos:line="214" pos:column="31"/></name> <operator pos:line="214" pos:column="32">&gt;<pos:position pos:line="214" pos:column="36"/></operator> <literal type="number" pos:line="214" pos:column="34">0<pos:position pos:line="214" pos:column="35"/></literal></expr>)<pos:position pos:line="214" pos:column="36"/></condition><then pos:line="214" pos:column="36">
		<block pos:line="215" pos:column="17">{
		  <expr_stmt><expr><operator pos:line="216" pos:column="19">++<pos:position pos:line="216" pos:column="21"/></operator><name pos:line="216" pos:column="21">malloc_count<pos:position pos:line="216" pos:column="33"/></name></expr>;<pos:position pos:line="216" pos:column="34"/></expr_stmt>
		  <expr_stmt><expr><name pos:line="217" pos:column="19">freemem_size<pos:position pos:line="217" pos:column="31"/></name> <operator pos:line="217" pos:column="32">=<pos:position pos:line="217" pos:column="33"/></operator> <name pos:line="217" pos:column="34">malloc_count<pos:position pos:line="217" pos:column="46"/></name> <operator pos:line="217" pos:column="47">*<pos:position pos:line="217" pos:column="48"/></operator> <name pos:line="217" pos:column="49">INITIAL_BLOCK_SIZE<pos:position pos:line="217" pos:column="67"/></name></expr>;<pos:position pos:line="217" pos:column="68"/></expr_stmt>
		  <expr_stmt><expr><name pos:line="218" pos:column="19">newmem<pos:position pos:line="218" pos:column="25"/></name> <operator pos:line="218" pos:column="26">=<pos:position pos:line="218" pos:column="27"/></operator> <operator pos:line="218" pos:column="28">(<pos:position pos:line="218" pos:column="29"/></operator><name pos:line="218" pos:column="29">transmem_block_t<pos:position pos:line="218" pos:column="45"/></name> <operator pos:line="218" pos:column="46">*<pos:position pos:line="218" pos:column="47"/></operator><operator pos:line="218" pos:column="47">)<pos:position pos:line="218" pos:column="48"/></operator> <call><name pos:line="218" pos:column="49">realloc<pos:position pos:line="218" pos:column="56"/></name> <argument_list pos:line="218" pos:column="57">(<argument><expr><name pos:line="218" pos:column="58">transmem_list<pos:position pos:line="218" pos:column="71"/></name></expr></argument>,
							 <argument><expr><name pos:line="219" pos:column="58">freemem_size<pos:position pos:line="219" pos:column="70"/></name></expr></argument>)<pos:position pos:line="219" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="72"/></expr_stmt>
<cpp:ifdef pos:line="220" pos:column="1"># <cpp:directive pos:line="220" pos:column="3">ifdef<pos:position pos:line="220" pos:column="8"/></cpp:directive> <name pos:line="220" pos:column="9">_LIBC<pos:position pos:line="220" pos:column="14"/></name></cpp:ifdef>
		  <if pos:line="221" pos:column="19">if <condition pos:line="221" pos:column="22">(<expr><name pos:line="221" pos:column="23">newmem<pos:position pos:line="221" pos:column="29"/></name> <operator pos:line="221" pos:column="30">!=<pos:position pos:line="221" pos:column="32"/></operator> <name pos:line="221" pos:column="33">NULL<pos:position pos:line="221" pos:column="37"/></name></expr>)<pos:position pos:line="221" pos:column="38"/></condition><then pos:line="221" pos:column="38">
		    <block type="pseudo"><expr_stmt><expr><name pos:line="222" pos:column="21">transmem_list<pos:position pos:line="222" pos:column="34"/></name> <operator pos:line="222" pos:column="35">=<pos:position pos:line="222" pos:column="36"/></operator> <name><name pos:line="222" pos:column="37">transmem_list<pos:position pos:line="222" pos:column="50"/></name><operator pos:line="222" pos:column="50">-&gt;<pos:position pos:line="222" pos:column="55"/></operator><name pos:line="222" pos:column="52">next<pos:position pos:line="222" pos:column="56"/></name></name></expr>;<pos:position pos:line="222" pos:column="57"/></expr_stmt></block></then>
		  <else pos:line="223" pos:column="19">else
		    <block pos:line="224" pos:column="21">{
		      <decl_stmt><decl><type><name><name pos:line="225" pos:column="23">struct<pos:position pos:line="225" pos:column="29"/></name> <name pos:line="225" pos:column="30">transmem_list<pos:position pos:line="225" pos:column="43"/></name></name> <modifier pos:line="225" pos:column="44">*<pos:position pos:line="225" pos:column="45"/></modifier></type><name pos:line="225" pos:column="45">old<pos:position pos:line="225" pos:column="48"/></name> <init pos:line="225" pos:column="49">= <expr><name pos:line="225" pos:column="51">transmem_list<pos:position pos:line="225" pos:column="64"/></name></expr></init></decl>;<pos:position pos:line="225" pos:column="65"/></decl_stmt>

		      <expr_stmt><expr><name pos:line="227" pos:column="23">transmem_list<pos:position pos:line="227" pos:column="36"/></name> <operator pos:line="227" pos:column="37">=<pos:position pos:line="227" pos:column="38"/></operator> <name><name pos:line="227" pos:column="39">transmem_list<pos:position pos:line="227" pos:column="52"/></name><operator pos:line="227" pos:column="52">-&gt;<pos:position pos:line="227" pos:column="57"/></operator><name pos:line="227" pos:column="54">next<pos:position pos:line="227" pos:column="58"/></name></name></expr>;<pos:position pos:line="227" pos:column="59"/></expr_stmt>
		      <expr_stmt><expr><call><name pos:line="228" pos:column="23">free<pos:position pos:line="228" pos:column="27"/></name> <argument_list pos:line="228" pos:column="28">(<argument><expr><name pos:line="228" pos:column="29">old<pos:position pos:line="228" pos:column="32"/></name></expr></argument>)<pos:position pos:line="228" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="228" pos:column="34"/></expr_stmt>
		    }<pos:position pos:line="229" pos:column="22"/></block></else></if>
<cpp:endif pos:line="230" pos:column="1"># <cpp:directive pos:line="230" pos:column="3">endif<pos:position pos:line="230" pos:column="8"/></cpp:directive></cpp:endif>
		}<pos:position pos:line="231" pos:column="18"/></block></then>
	      <else pos:line="232" pos:column="15">else
		<block pos:line="233" pos:column="17">{
		  <expr_stmt><expr><name pos:line="234" pos:column="19">malloc_count<pos:position pos:line="234" pos:column="31"/></name> <operator pos:line="234" pos:column="32">=<pos:position pos:line="234" pos:column="33"/></operator> <literal type="number" pos:line="234" pos:column="34">1<pos:position pos:line="234" pos:column="35"/></literal></expr>;<pos:position pos:line="234" pos:column="36"/></expr_stmt>
		  <expr_stmt><expr><name pos:line="235" pos:column="19">freemem_size<pos:position pos:line="235" pos:column="31"/></name> <operator pos:line="235" pos:column="32">=<pos:position pos:line="235" pos:column="33"/></operator> <name pos:line="235" pos:column="34">INITIAL_BLOCK_SIZE<pos:position pos:line="235" pos:column="52"/></name></expr>;<pos:position pos:line="235" pos:column="53"/></expr_stmt>
		  <expr_stmt><expr><name pos:line="236" pos:column="19">newmem<pos:position pos:line="236" pos:column="25"/></name> <operator pos:line="236" pos:column="26">=<pos:position pos:line="236" pos:column="27"/></operator> <operator pos:line="236" pos:column="28">(<pos:position pos:line="236" pos:column="29"/></operator><name pos:line="236" pos:column="29">transmem_block_t<pos:position pos:line="236" pos:column="45"/></name> <operator pos:line="236" pos:column="46">*<pos:position pos:line="236" pos:column="47"/></operator><operator pos:line="236" pos:column="47">)<pos:position pos:line="236" pos:column="48"/></operator> <call><name pos:line="236" pos:column="49">malloc<pos:position pos:line="236" pos:column="55"/></name> <argument_list pos:line="236" pos:column="56">(<argument><expr><name pos:line="236" pos:column="57">freemem_size<pos:position pos:line="236" pos:column="69"/></name></expr></argument>)<pos:position pos:line="236" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="71"/></expr_stmt>
		}<pos:position pos:line="237" pos:column="18"/></block></else></if>
	      <if pos:line="238" pos:column="15">if <condition pos:line="238" pos:column="18">(<expr><call><name pos:line="238" pos:column="19">__builtin_expect<pos:position pos:line="238" pos:column="35"/></name> <argument_list pos:line="238" pos:column="36">(<argument><expr><name pos:line="238" pos:column="37">newmem<pos:position pos:line="238" pos:column="43"/></name> <operator pos:line="238" pos:column="44">==<pos:position pos:line="238" pos:column="46"/></operator> <name pos:line="238" pos:column="47">NULL<pos:position pos:line="238" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="238" pos:column="53">0<pos:position pos:line="238" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="238" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="238" pos:column="56"/></condition><then pos:line="238" pos:column="56">
		<block pos:line="239" pos:column="17">{
		  <expr_stmt><expr><name pos:line="240" pos:column="19">freemem<pos:position pos:line="240" pos:column="26"/></name> <operator pos:line="240" pos:column="27">=<pos:position pos:line="240" pos:column="28"/></operator> <name pos:line="240" pos:column="29">NULL<pos:position pos:line="240" pos:column="33"/></name></expr>;<pos:position pos:line="240" pos:column="34"/></expr_stmt>
		  <expr_stmt><expr><name pos:line="241" pos:column="19">freemem_size<pos:position pos:line="241" pos:column="31"/></name> <operator pos:line="241" pos:column="32">=<pos:position pos:line="241" pos:column="33"/></operator> <literal type="number" pos:line="241" pos:column="34">0<pos:position pos:line="241" pos:column="35"/></literal></expr>;<pos:position pos:line="241" pos:column="36"/></expr_stmt>
		  <expr_stmt><expr><call><name pos:line="242" pos:column="19">__libc_lock_unlock<pos:position pos:line="242" pos:column="37"/></name> <argument_list pos:line="242" pos:column="38">(<argument><expr><name pos:line="242" pos:column="39">lock<pos:position pos:line="242" pos:column="43"/></name></expr></argument>)<pos:position pos:line="242" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="45"/></expr_stmt>
		  <goto pos:line="243" pos:column="19">goto <name pos:line="243" pos:column="24">converted<pos:position pos:line="243" pos:column="33"/></name>;<pos:position pos:line="243" pos:column="34"/></goto>
		}<pos:position pos:line="244" pos:column="18"/></block></then></if>

<cpp:ifdef pos:line="246" pos:column="1"># <cpp:directive pos:line="246" pos:column="3">ifdef<pos:position pos:line="246" pos:column="8"/></cpp:directive> <name pos:line="246" pos:column="9">_LIBC<pos:position pos:line="246" pos:column="14"/></name></cpp:ifdef>
	      <comment type="block" pos:line="247" pos:column="15">/* Add the block to the list of blocks we have to free
                 at some point.  */</comment>
	      <expr_stmt><expr><name><name pos:line="249" pos:column="15">newmem<pos:position pos:line="249" pos:column="21"/></name><operator pos:line="249" pos:column="21">-&gt;<pos:position pos:line="249" pos:column="26"/></operator><name pos:line="249" pos:column="23">next<pos:position pos:line="249" pos:column="27"/></name></name> <operator pos:line="249" pos:column="28">=<pos:position pos:line="249" pos:column="29"/></operator> <name pos:line="249" pos:column="30">transmem_list<pos:position pos:line="249" pos:column="43"/></name></expr>;<pos:position pos:line="249" pos:column="44"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="250" pos:column="15">transmem_list<pos:position pos:line="250" pos:column="28"/></name> <operator pos:line="250" pos:column="29">=<pos:position pos:line="250" pos:column="30"/></operator> <name pos:line="250" pos:column="31">newmem<pos:position pos:line="250" pos:column="37"/></name></expr>;<pos:position pos:line="250" pos:column="38"/></expr_stmt>

	      <expr_stmt><expr><name pos:line="252" pos:column="15">freemem<pos:position pos:line="252" pos:column="22"/></name> <operator pos:line="252" pos:column="23">=<pos:position pos:line="252" pos:column="24"/></operator> <name><name pos:line="252" pos:column="25">newmem<pos:position pos:line="252" pos:column="31"/></name><operator pos:line="252" pos:column="31">-&gt;<pos:position pos:line="252" pos:column="36"/></operator><name pos:line="252" pos:column="33">data<pos:position pos:line="252" pos:column="37"/></name></name></expr>;<pos:position pos:line="252" pos:column="38"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="253" pos:column="15">freemem_size<pos:position pos:line="253" pos:column="27"/></name> <operator pos:line="253" pos:column="28">-=<pos:position pos:line="253" pos:column="30"/></operator> <call><name pos:line="253" pos:column="31">offsetof<pos:position pos:line="253" pos:column="39"/></name> <argument_list pos:line="253" pos:column="40">(<argument><expr pos:line="253" pos:column="41">struct <name pos:line="253" pos:column="48">transmem_list<pos:position pos:line="253" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="253" pos:column="63">data<pos:position pos:line="253" pos:column="67"/></name></expr></argument>)<pos:position pos:line="253" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="253" pos:column="69"/></expr_stmt>
<cpp:else pos:line="254" pos:column="1"># <cpp:directive pos:line="254" pos:column="3">else<pos:position pos:line="254" pos:column="7"/></cpp:directive></cpp:else>
	      <expr_stmt><expr><name pos:line="255" pos:column="15">transmem_list<pos:position pos:line="255" pos:column="28"/></name> <operator pos:line="255" pos:column="29">=<pos:position pos:line="255" pos:column="30"/></operator> <name pos:line="255" pos:column="31">newmem<pos:position pos:line="255" pos:column="37"/></name></expr>;<pos:position pos:line="255" pos:column="38"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="256" pos:column="15">freemem<pos:position pos:line="256" pos:column="22"/></name> <operator pos:line="256" pos:column="23">=<pos:position pos:line="256" pos:column="24"/></operator> <name pos:line="256" pos:column="25">newmem<pos:position pos:line="256" pos:column="31"/></name></expr>;<pos:position pos:line="256" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="257" pos:column="1"># <cpp:directive pos:line="257" pos:column="3">endif<pos:position pos:line="257" pos:column="8"/></cpp:directive></cpp:endif>

	      <expr_stmt><expr><name pos:line="259" pos:column="15">outbuf<pos:position pos:line="259" pos:column="21"/></name> <operator pos:line="259" pos:column="22">=<pos:position pos:line="259" pos:column="23"/></operator> <name pos:line="259" pos:column="24">freemem<pos:position pos:line="259" pos:column="31"/></name> <operator pos:line="259" pos:column="32">+<pos:position pos:line="259" pos:column="33"/></operator> <sizeof pos:line="259" pos:column="34">sizeof <argument_list pos:line="259" pos:column="41">(<argument><expr><name pos:line="259" pos:column="42">size_t<pos:position pos:line="259" pos:column="48"/></name></expr></argument>)<pos:position pos:line="259" pos:column="49"/></argument_list></sizeof></expr>;<pos:position pos:line="259" pos:column="50"/></expr_stmt>
	    }<pos:position pos:line="260" pos:column="14"/></block></while>

	  <comment type="block" pos:line="262" pos:column="11">/* We have now in our buffer a converted string.  Put this
	     into the table of conversions.  */</comment>
	  <expr_stmt><expr><operator pos:line="264" pos:column="11">*<pos:position pos:line="264" pos:column="12"/></operator><operator pos:line="264" pos:column="12">(<pos:position pos:line="264" pos:column="13"/></operator><name pos:line="264" pos:column="13">size_t<pos:position pos:line="264" pos:column="19"/></name> <operator pos:line="264" pos:column="20">*<pos:position pos:line="264" pos:column="21"/></operator><operator pos:line="264" pos:column="21">)<pos:position pos:line="264" pos:column="22"/></operator> <name pos:line="264" pos:column="23">freemem<pos:position pos:line="264" pos:column="30"/></name> <operator pos:line="264" pos:column="31">=<pos:position pos:line="264" pos:column="32"/></operator> <name pos:line="264" pos:column="33">outbuf<pos:position pos:line="264" pos:column="39"/></name> <operator pos:line="264" pos:column="40">-<pos:position pos:line="264" pos:column="41"/></operator> <name pos:line="264" pos:column="42">freemem<pos:position pos:line="264" pos:column="49"/></name> <operator pos:line="264" pos:column="50">-<pos:position pos:line="264" pos:column="51"/></operator> <sizeof pos:line="264" pos:column="52">sizeof <argument_list pos:line="264" pos:column="59">(<argument><expr><name pos:line="264" pos:column="60">size_t<pos:position pos:line="264" pos:column="66"/></name></expr></argument>)<pos:position pos:line="264" pos:column="67"/></argument_list></sizeof></expr>;<pos:position pos:line="264" pos:column="68"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="265" pos:column="11">domain<pos:position pos:line="265" pos:column="17"/></name><operator pos:line="265" pos:column="17">-&gt;<pos:position pos:line="265" pos:column="22"/></operator><name pos:line="265" pos:column="19">conv_tab<pos:position pos:line="265" pos:column="27"/></name><index pos:line="265" pos:column="27">[<expr><name pos:line="265" pos:column="28">act<pos:position pos:line="265" pos:column="31"/></name></expr>]<pos:position pos:line="265" pos:column="32"/></index></name> <operator pos:line="265" pos:column="33">=<pos:position pos:line="265" pos:column="34"/></operator> <operator pos:line="265" pos:column="35">(<pos:position pos:line="265" pos:column="36"/></operator><name pos:line="265" pos:column="36">char<pos:position pos:line="265" pos:column="40"/></name> <operator pos:line="265" pos:column="41">*<pos:position pos:line="265" pos:column="42"/></operator><operator pos:line="265" pos:column="42">)<pos:position pos:line="265" pos:column="43"/></operator> <name pos:line="265" pos:column="44">freemem<pos:position pos:line="265" pos:column="51"/></name></expr>;<pos:position pos:line="265" pos:column="52"/></expr_stmt>
	  <comment type="block" pos:line="266" pos:column="11">/* Shrink freemem, but keep it aligned.  */</comment>
	  <expr_stmt><expr><name pos:line="267" pos:column="11">freemem_size<pos:position pos:line="267" pos:column="23"/></name> <operator pos:line="267" pos:column="24">-=<pos:position pos:line="267" pos:column="26"/></operator> <name pos:line="267" pos:column="27">outbuf<pos:position pos:line="267" pos:column="33"/></name> <operator pos:line="267" pos:column="34">-<pos:position pos:line="267" pos:column="35"/></operator> <name pos:line="267" pos:column="36">freemem<pos:position pos:line="267" pos:column="43"/></name></expr>;<pos:position pos:line="267" pos:column="44"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="268" pos:column="11">freemem<pos:position pos:line="268" pos:column="18"/></name> <operator pos:line="268" pos:column="19">=<pos:position pos:line="268" pos:column="20"/></operator> <name pos:line="268" pos:column="21">outbuf<pos:position pos:line="268" pos:column="27"/></name></expr>;<pos:position pos:line="268" pos:column="28"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="269" pos:column="11">freemem<pos:position pos:line="269" pos:column="18"/></name> <operator pos:line="269" pos:column="19">+=<pos:position pos:line="269" pos:column="21"/></operator> <name pos:line="269" pos:column="22">freemem_size<pos:position pos:line="269" pos:column="34"/></name> <operator pos:line="269" pos:column="35">&amp;<pos:position pos:line="269" pos:column="40"/></operator> <operator pos:line="269" pos:column="37">(<pos:position pos:line="269" pos:column="38"/></operator><alignof pos:line="269" pos:column="38">alignof <argument_list pos:line="269" pos:column="46">(<argument><expr><name pos:line="269" pos:column="47">size_t<pos:position pos:line="269" pos:column="53"/></name></expr></argument>)<pos:position pos:line="269" pos:column="54"/></argument_list></alignof> <operator pos:line="269" pos:column="55">-<pos:position pos:line="269" pos:column="56"/></operator> <literal type="number" pos:line="269" pos:column="57">1<pos:position pos:line="269" pos:column="58"/></literal><operator pos:line="269" pos:column="58">)<pos:position pos:line="269" pos:column="59"/></operator></expr>;<pos:position pos:line="269" pos:column="60"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="270" pos:column="11">freemem_size<pos:position pos:line="270" pos:column="23"/></name> <operator pos:line="270" pos:column="24">=<pos:position pos:line="270" pos:column="25"/></operator> <name pos:line="270" pos:column="26">freemem_size<pos:position pos:line="270" pos:column="38"/></name> <operator pos:line="270" pos:column="39">&amp;<pos:position pos:line="270" pos:column="44"/></operator> <operator pos:line="270" pos:column="41">~<pos:position pos:line="270" pos:column="42"/></operator> <operator pos:line="270" pos:column="43">(<pos:position pos:line="270" pos:column="44"/></operator><alignof pos:line="270" pos:column="44">alignof <argument_list pos:line="270" pos:column="52">(<argument><expr><name pos:line="270" pos:column="53">size_t<pos:position pos:line="270" pos:column="59"/></name></expr></argument>)<pos:position pos:line="270" pos:column="60"/></argument_list></alignof> <operator pos:line="270" pos:column="61">-<pos:position pos:line="270" pos:column="62"/></operator> <literal type="number" pos:line="270" pos:column="63">1<pos:position pos:line="270" pos:column="64"/></literal><operator pos:line="270" pos:column="64">)<pos:position pos:line="270" pos:column="65"/></operator></expr>;<pos:position pos:line="270" pos:column="66"/></expr_stmt>

	  <expr_stmt><expr><call><name pos:line="272" pos:column="11">__libc_lock_unlock<pos:position pos:line="272" pos:column="29"/></name> <argument_list pos:line="272" pos:column="30">(<argument><expr><name pos:line="272" pos:column="31">lock<pos:position pos:line="272" pos:column="35"/></name></expr></argument>)<pos:position pos:line="272" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="272" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="273" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="275" pos:column="7">/* Now domain-&gt;conv_tab[act] contains the translation of all
	 the plural variants.  */</comment>
      <expr_stmt><expr><name pos:line="277" pos:column="7">result<pos:position pos:line="277" pos:column="13"/></name> <operator pos:line="277" pos:column="14">=<pos:position pos:line="277" pos:column="15"/></operator> <name><name pos:line="277" pos:column="16">domain<pos:position pos:line="277" pos:column="22"/></name><operator pos:line="277" pos:column="22">-&gt;<pos:position pos:line="277" pos:column="27"/></operator><name pos:line="277" pos:column="24">conv_tab<pos:position pos:line="277" pos:column="32"/></name><index pos:line="277" pos:column="32">[<expr><name pos:line="277" pos:column="33">act<pos:position pos:line="277" pos:column="36"/></name></expr>]<pos:position pos:line="277" pos:column="37"/></index></name> <operator pos:line="277" pos:column="38">+<pos:position pos:line="277" pos:column="39"/></operator> <sizeof pos:line="277" pos:column="40">sizeof <argument_list pos:line="277" pos:column="47">(<argument><expr><name pos:line="277" pos:column="48">size_t<pos:position pos:line="277" pos:column="54"/></name></expr></argument>)<pos:position pos:line="277" pos:column="55"/></argument_list></sizeof></expr>;<pos:position pos:line="277" pos:column="56"/></expr_stmt>
      <expr_stmt><expr><name pos:line="278" pos:column="7">resultlen<pos:position pos:line="278" pos:column="16"/></name> <operator pos:line="278" pos:column="17">=<pos:position pos:line="278" pos:column="18"/></operator> <operator pos:line="278" pos:column="19">*<pos:position pos:line="278" pos:column="20"/></operator><operator pos:line="278" pos:column="20">(<pos:position pos:line="278" pos:column="21"/></operator><name pos:line="278" pos:column="21">size_t<pos:position pos:line="278" pos:column="27"/></name> <operator pos:line="278" pos:column="28">*<pos:position pos:line="278" pos:column="29"/></operator><operator pos:line="278" pos:column="29">)<pos:position pos:line="278" pos:column="30"/></operator> <name><name pos:line="278" pos:column="31">domain<pos:position pos:line="278" pos:column="37"/></name><operator pos:line="278" pos:column="37">-&gt;<pos:position pos:line="278" pos:column="42"/></operator><name pos:line="278" pos:column="39">conv_tab<pos:position pos:line="278" pos:column="47"/></name><index pos:line="278" pos:column="47">[<expr><name pos:line="278" pos:column="48">act<pos:position pos:line="278" pos:column="51"/></name></expr>]<pos:position pos:line="278" pos:column="52"/></index></name></expr>;<pos:position pos:line="278" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="279" pos:column="6"/></block></then></if>

 <label><name pos:line="281" pos:column="2">converted<pos:position pos:line="281" pos:column="11"/></name>:<pos:position pos:line="281" pos:column="12"/></label>
  <comment type="block" pos:line="282" pos:column="3">/* The result string is converted.  */</comment>

<cpp:endif pos:line="284" pos:column="1">#<cpp:directive pos:line="284" pos:column="2">endif<pos:position pos:line="284" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="284" pos:column="8">/* _LIBC || HAVE_ICONV */</comment>

  <expr_stmt><expr><operator pos:line="286" pos:column="3">*<pos:position pos:line="286" pos:column="4"/></operator><name pos:line="286" pos:column="4">lengthp<pos:position pos:line="286" pos:column="11"/></name> <operator pos:line="286" pos:column="12">=<pos:position pos:line="286" pos:column="13"/></operator> <name pos:line="286" pos:column="14">resultlen<pos:position pos:line="286" pos:column="23"/></name></expr>;<pos:position pos:line="286" pos:column="24"/></expr_stmt>
  <return pos:line="287" pos:column="3">return <expr><name pos:line="287" pos:column="10">result<pos:position pos:line="287" pos:column="16"/></name></expr>;<pos:position pos:line="287" pos:column="17"/></return>
}<pos:position pos:line="288" pos:column="2"/></block></unit>
