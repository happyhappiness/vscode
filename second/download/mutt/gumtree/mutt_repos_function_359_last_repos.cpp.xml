<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_359_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_parse_push<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">BUFFER<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">buf<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">BUFFER<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">s<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">unsigned<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">long<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">data<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">BUFFER<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">err<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">r<pos:position pos:line="3" pos:column="8"/></name> <init pos:line="3" pos:column="9">= <expr><literal type="number" pos:line="3" pos:column="11">0<pos:position pos:line="3" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="5" pos:column="3">mutt_extract_token<pos:position pos:line="5" pos:column="21"/></name> <argument_list pos:line="5" pos:column="22">(<argument><expr><name pos:line="5" pos:column="23">buf<pos:position pos:line="5" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="28">s<pos:position pos:line="5" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="31">MUTT_TOKEN_CONDENSE<pos:position pos:line="5" pos:column="50"/></name></expr></argument>)<pos:position pos:line="5" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="52"/></expr_stmt>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><call><name pos:line="6" pos:column="7">MoreArgs<pos:position pos:line="6" pos:column="15"/></name> <argument_list pos:line="6" pos:column="16">(<argument><expr><name pos:line="6" pos:column="17">s<pos:position pos:line="6" pos:column="18"/></name></expr></argument>)<pos:position pos:line="6" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="20"/></condition><then pos:line="6" pos:column="20">
  <block pos:line="7" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">strfcpy<pos:position pos:line="8" pos:column="12"/></name> <argument_list pos:line="8" pos:column="13">(<argument><expr><name><name pos:line="8" pos:column="14">err<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">-&gt;<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="19">data<pos:position pos:line="8" pos:column="23"/></name></name></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="25">_<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><literal type="string" pos:line="8" pos:column="27">"push: too many arguments"<pos:position pos:line="8" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="56">err<pos:position pos:line="8" pos:column="59"/></name><operator pos:line="8" pos:column="59">-&gt;<pos:position pos:line="8" pos:column="64"/></operator><name pos:line="8" pos:column="61">dsize<pos:position pos:line="8" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><name pos:line="9" pos:column="5">r<pos:position pos:line="9" pos:column="6"/></name> <operator pos:line="9" pos:column="7">=<pos:position pos:line="9" pos:column="8"/></operator> <operator pos:line="9" pos:column="9">-<pos:position pos:line="9" pos:column="10"/></operator><literal type="number" pos:line="9" pos:column="10">1<pos:position pos:line="9" pos:column="11"/></literal></expr>;<pos:position pos:line="9" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="10" pos:column="4"/></block></then>
  <else pos:line="11" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="5">tokenize_push_macro_string<pos:position pos:line="12" pos:column="31"/></name> <argument_list pos:line="12" pos:column="32">(<argument><expr><name><name pos:line="12" pos:column="33">buf<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">-&gt;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="38">data<pos:position pos:line="12" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt></block></else></if>
  <return pos:line="13" pos:column="3">return <expr><operator pos:line="13" pos:column="10">(<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">r<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">)<pos:position pos:line="13" pos:column="13"/></operator></expr>;<pos:position pos:line="13" pos:column="14"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
