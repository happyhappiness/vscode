<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_593_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">pgp_dearmor<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">FILE<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">in<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">FILE<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">out<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">line<pos:position pos:line="3" pos:column="12"/></name><index pos:line="3" pos:column="12">[<expr><name pos:line="3" pos:column="13">HUGE_STRING<pos:position pos:line="3" pos:column="24"/></name></expr>]<pos:position pos:line="3" pos:column="25"/></index></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">LOFF_T<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">start<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">LOFF_T<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">end<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">r<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">STATE<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">state<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>
  
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">memset<pos:position pos:line="10" pos:column="9"/></name> <argument_list pos:line="10" pos:column="10">(<argument><expr><operator pos:line="10" pos:column="11">&amp;<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="12">state<pos:position pos:line="10" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="22">sizeof <argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">STATE<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="11" pos:column="3">state<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">.<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="9">fpin<pos:position pos:line="11" pos:column="13"/></name></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <name pos:line="11" pos:column="16">in<pos:position pos:line="11" pos:column="18"/></name></expr>;<pos:position pos:line="11" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">state<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">.<pos:position pos:line="12" pos:column="9"/></operator><name pos:line="12" pos:column="9">fpout<pos:position pos:line="12" pos:column="14"/></name></name> <operator pos:line="12" pos:column="15">=<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">out<pos:position pos:line="12" pos:column="20"/></name></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>
  
  <comment type="block" pos:line="14" pos:column="3">/* find the beginning of ASCII armor */</comment>
  
  <while pos:line="16" pos:column="3">while <condition pos:line="16" pos:column="9">(<expr><operator pos:line="16" pos:column="10">(<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">r<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">fgets<pos:position pos:line="16" pos:column="20"/></name> <argument_list pos:line="16" pos:column="21">(<argument><expr><name pos:line="16" pos:column="22">line<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="28">sizeof <argument_list pos:line="16" pos:column="35">(<argument><expr><name pos:line="16" pos:column="36">line<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="16" pos:column="43">in<pos:position pos:line="16" pos:column="45"/></name></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></call><operator pos:line="16" pos:column="46">)<pos:position pos:line="16" pos:column="47"/></operator> <operator pos:line="16" pos:column="48">!=<pos:position pos:line="16" pos:column="50"/></operator> <name pos:line="16" pos:column="51">NULL<pos:position pos:line="16" pos:column="55"/></name></expr>)<pos:position pos:line="16" pos:column="56"/></condition>
  <block pos:line="17" pos:column="3">{
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">!<pos:position pos:line="18" pos:column="10"/></operator><call><name pos:line="18" pos:column="10">strncmp<pos:position pos:line="18" pos:column="17"/></name> <argument_list pos:line="18" pos:column="18">(<argument><expr><name pos:line="18" pos:column="19">line<pos:position pos:line="18" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="25">"-----BEGIN"<pos:position pos:line="18" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="39">10<pos:position pos:line="18" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="43"/></condition><then pos:line="18" pos:column="43">
      <block type="pseudo"><break pos:line="19" pos:column="7">break;<pos:position pos:line="19" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="20" pos:column="4"/></block></while>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name pos:line="21" pos:column="7">r<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">==<pos:position pos:line="21" pos:column="11"/></operator> <name pos:line="21" pos:column="12">NULL<pos:position pos:line="21" pos:column="16"/></name></expr>)<pos:position pos:line="21" pos:column="17"/></condition><then pos:line="21" pos:column="17">
  <block pos:line="22" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">dprint<pos:position pos:line="23" pos:column="11"/></name> <argument_list pos:line="23" pos:column="12">(<argument><expr><literal type="number" pos:line="23" pos:column="13">1<pos:position pos:line="23" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="23" pos:column="16">(<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="17">debugfile<pos:position pos:line="23" pos:column="26"/></name><operator pos:line="23" pos:column="26">,<pos:position pos:line="23" pos:column="27"/></operator> <literal type="string" pos:line="23" pos:column="28">"pgp_dearmor: Can't find begin of ASCII armor.\n"<pos:position pos:line="23" pos:column="77"/></literal><operator pos:line="23" pos:column="77">)<pos:position pos:line="23" pos:column="78"/></operator></expr></argument>)<pos:position pos:line="23" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="80"/></expr_stmt>
    <return pos:line="24" pos:column="5">return;<pos:position pos:line="24" pos:column="12"/></return>
  }<pos:position pos:line="25" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="27" pos:column="3">/* skip the armor header */</comment>
  
  <while pos:line="29" pos:column="3">while <condition pos:line="29" pos:column="9">(<expr><operator pos:line="29" pos:column="10">(<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="11">r<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <call><name pos:line="29" pos:column="15">fgets<pos:position pos:line="29" pos:column="20"/></name> <argument_list pos:line="29" pos:column="21">(<argument><expr><name pos:line="29" pos:column="22">line<pos:position pos:line="29" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="28">sizeof <argument_list pos:line="29" pos:column="35">(<argument><expr><name pos:line="29" pos:column="36">line<pos:position pos:line="29" pos:column="40"/></name></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="29" pos:column="43">in<pos:position pos:line="29" pos:column="45"/></name></expr></argument>)<pos:position pos:line="29" pos:column="46"/></argument_list></call><operator pos:line="29" pos:column="46">)<pos:position pos:line="29" pos:column="47"/></operator> <operator pos:line="29" pos:column="48">!=<pos:position pos:line="29" pos:column="50"/></operator> <name pos:line="29" pos:column="51">NULL<pos:position pos:line="29" pos:column="55"/></name></expr>)<pos:position pos:line="29" pos:column="56"/></condition>
  <block pos:line="30" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">SKIPWS<pos:position pos:line="31" pos:column="11"/></name> <argument_list pos:line="31" pos:column="12">(<argument><expr><name pos:line="31" pos:column="13">r<pos:position pos:line="31" pos:column="14"/></name></expr></argument>)<pos:position pos:line="31" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="16"/></expr_stmt>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><operator pos:line="32" pos:column="9">!<pos:position pos:line="32" pos:column="10"/></operator><operator pos:line="32" pos:column="10">*<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="11">r<pos:position pos:line="32" pos:column="12"/></name></expr>)<pos:position pos:line="32" pos:column="13"/></condition><then pos:line="32" pos:column="13"> <block type="pseudo"><break pos:line="32" pos:column="14">break;<pos:position pos:line="32" pos:column="20"/></break></block></then></if>
  }<pos:position pos:line="33" pos:column="4"/></block></while>
  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><name pos:line="34" pos:column="7">r<pos:position pos:line="34" pos:column="8"/></name> <operator pos:line="34" pos:column="9">==<pos:position pos:line="34" pos:column="11"/></operator> <name pos:line="34" pos:column="12">NULL<pos:position pos:line="34" pos:column="16"/></name></expr>)<pos:position pos:line="34" pos:column="17"/></condition><then pos:line="34" pos:column="17">
  <block pos:line="35" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">dprint<pos:position pos:line="36" pos:column="11"/></name> <argument_list pos:line="36" pos:column="12">(<argument><expr><literal type="number" pos:line="36" pos:column="13">1<pos:position pos:line="36" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="36" pos:column="16">(<pos:position pos:line="36" pos:column="17"/></operator><name pos:line="36" pos:column="17">debugfile<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">,<pos:position pos:line="36" pos:column="27"/></operator> <literal type="string" pos:line="36" pos:column="28">"pgp_dearmor: Armor header doesn't end.\n"<pos:position pos:line="36" pos:column="70"/></literal><operator pos:line="36" pos:column="70">)<pos:position pos:line="36" pos:column="71"/></operator></expr></argument>)<pos:position pos:line="36" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="73"/></expr_stmt>
    <return pos:line="37" pos:column="5">return;<pos:position pos:line="37" pos:column="12"/></return>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>
  
  <comment type="block" pos:line="40" pos:column="3">/* actual data starts here */</comment>
  <expr_stmt><expr><name pos:line="41" pos:column="3">start<pos:position pos:line="41" pos:column="8"/></name> <operator pos:line="41" pos:column="9">=<pos:position pos:line="41" pos:column="10"/></operator> <call><name pos:line="41" pos:column="11">ftello<pos:position pos:line="41" pos:column="17"/></name> <argument_list pos:line="41" pos:column="18">(<argument><expr><name pos:line="41" pos:column="19">in<pos:position pos:line="41" pos:column="21"/></name></expr></argument>)<pos:position pos:line="41" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="23"/></expr_stmt>
  
  <comment type="block" pos:line="43" pos:column="3">/* find the checksum */</comment>
  
  <while pos:line="45" pos:column="3">while <condition pos:line="45" pos:column="9">(<expr><operator pos:line="45" pos:column="10">(<pos:position pos:line="45" pos:column="11"/></operator><name pos:line="45" pos:column="11">r<pos:position pos:line="45" pos:column="12"/></name> <operator pos:line="45" pos:column="13">=<pos:position pos:line="45" pos:column="14"/></operator> <call><name pos:line="45" pos:column="15">fgets<pos:position pos:line="45" pos:column="20"/></name> <argument_list pos:line="45" pos:column="21">(<argument><expr><name pos:line="45" pos:column="22">line<pos:position pos:line="45" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="28">sizeof <argument_list pos:line="45" pos:column="35">(<argument><expr><name pos:line="45" pos:column="36">line<pos:position pos:line="45" pos:column="40"/></name></expr></argument>)<pos:position pos:line="45" pos:column="41"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="45" pos:column="43">in<pos:position pos:line="45" pos:column="45"/></name></expr></argument>)<pos:position pos:line="45" pos:column="46"/></argument_list></call><operator pos:line="45" pos:column="46">)<pos:position pos:line="45" pos:column="47"/></operator> <operator pos:line="45" pos:column="48">!=<pos:position pos:line="45" pos:column="50"/></operator> <name pos:line="45" pos:column="51">NULL<pos:position pos:line="45" pos:column="55"/></name></expr>)<pos:position pos:line="45" pos:column="56"/></condition>
  <block pos:line="46" pos:column="3">{
    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><operator pos:line="47" pos:column="9">*<pos:position pos:line="47" pos:column="10"/></operator><name pos:line="47" pos:column="10">line<pos:position pos:line="47" pos:column="14"/></name> <operator pos:line="47" pos:column="15">==<pos:position pos:line="47" pos:column="17"/></operator> <literal type="char" pos:line="47" pos:column="18">'='<pos:position pos:line="47" pos:column="21"/></literal> <operator pos:line="47" pos:column="22">||<pos:position pos:line="47" pos:column="24"/></operator> <operator pos:line="47" pos:column="25">!<pos:position pos:line="47" pos:column="26"/></operator><call><name pos:line="47" pos:column="26">strncmp<pos:position pos:line="47" pos:column="33"/></name> <argument_list pos:line="47" pos:column="34">(<argument><expr><name pos:line="47" pos:column="35">line<pos:position pos:line="47" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="41">"-----END"<pos:position pos:line="47" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="53">8<pos:position pos:line="47" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="56"/></condition><then pos:line="47" pos:column="56">
      <block type="pseudo"><break pos:line="48" pos:column="7">break;<pos:position pos:line="48" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="49" pos:column="4"/></block></while>
  <if pos:line="50" pos:column="3">if <condition pos:line="50" pos:column="6">(<expr><name pos:line="50" pos:column="7">r<pos:position pos:line="50" pos:column="8"/></name> <operator pos:line="50" pos:column="9">==<pos:position pos:line="50" pos:column="11"/></operator> <name pos:line="50" pos:column="12">NULL<pos:position pos:line="50" pos:column="16"/></name></expr>)<pos:position pos:line="50" pos:column="17"/></condition><then pos:line="50" pos:column="17">
  <block pos:line="51" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">dprint<pos:position pos:line="52" pos:column="11"/></name> <argument_list pos:line="52" pos:column="12">(<argument><expr><literal type="number" pos:line="52" pos:column="13">1<pos:position pos:line="52" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="52" pos:column="16">(<pos:position pos:line="52" pos:column="17"/></operator><name pos:line="52" pos:column="17">debugfile<pos:position pos:line="52" pos:column="26"/></name><operator pos:line="52" pos:column="26">,<pos:position pos:line="52" pos:column="27"/></operator> <literal type="string" pos:line="52" pos:column="28">"pgp_dearmor: Can't find end of ASCII armor.\n"<pos:position pos:line="52" pos:column="75"/></literal><operator pos:line="52" pos:column="75">)<pos:position pos:line="52" pos:column="76"/></operator></expr></argument>)<pos:position pos:line="52" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="78"/></expr_stmt>
    <return pos:line="53" pos:column="5">return;<pos:position pos:line="53" pos:column="12"/></return>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>
  
  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><operator pos:line="56" pos:column="7">(<pos:position pos:line="56" pos:column="8"/></operator><name pos:line="56" pos:column="8">end<pos:position pos:line="56" pos:column="11"/></name> <operator pos:line="56" pos:column="12">=<pos:position pos:line="56" pos:column="13"/></operator> <call><name pos:line="56" pos:column="14">ftello<pos:position pos:line="56" pos:column="20"/></name> <argument_list pos:line="56" pos:column="21">(<argument><expr><name pos:line="56" pos:column="22">in<pos:position pos:line="56" pos:column="24"/></name></expr></argument>)<pos:position pos:line="56" pos:column="25"/></argument_list></call> <operator pos:line="56" pos:column="26">-<pos:position pos:line="56" pos:column="27"/></operator> <call><name pos:line="56" pos:column="28">strlen<pos:position pos:line="56" pos:column="34"/></name> <argument_list pos:line="56" pos:column="35">(<argument><expr><name pos:line="56" pos:column="36">line<pos:position pos:line="56" pos:column="40"/></name></expr></argument>)<pos:position pos:line="56" pos:column="41"/></argument_list></call><operator pos:line="56" pos:column="41">)<pos:position pos:line="56" pos:column="42"/></operator> <operator pos:line="56" pos:column="43">&lt;<pos:position pos:line="56" pos:column="47"/></operator> <name pos:line="56" pos:column="45">start<pos:position pos:line="56" pos:column="50"/></name></expr>)<pos:position pos:line="56" pos:column="51"/></condition><then pos:line="56" pos:column="51">
  <block pos:line="57" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="58" pos:column="5">dprint<pos:position pos:line="58" pos:column="11"/></name> <argument_list pos:line="58" pos:column="12">(<argument><expr><literal type="number" pos:line="58" pos:column="13">1<pos:position pos:line="58" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="58" pos:column="16">(<pos:position pos:line="58" pos:column="17"/></operator><name pos:line="58" pos:column="17">debugfile<pos:position pos:line="58" pos:column="26"/></name><operator pos:line="58" pos:column="26">,<pos:position pos:line="58" pos:column="27"/></operator> <literal type="string" pos:line="58" pos:column="28">"pgp_dearmor: end &lt; start???\n"<pos:position pos:line="58" pos:column="62"/></literal><operator pos:line="58" pos:column="59">)<pos:position pos:line="58" pos:column="60"/></operator></expr></argument>)<pos:position pos:line="58" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="62"/></expr_stmt>
    <return pos:line="59" pos:column="5">return;<pos:position pos:line="59" pos:column="12"/></return>
  }<pos:position pos:line="60" pos:column="4"/></block></then></if>
  
  <if pos:line="62" pos:column="3">if <condition pos:line="62" pos:column="6">(<expr><call><name pos:line="62" pos:column="7">fseeko<pos:position pos:line="62" pos:column="13"/></name> <argument_list pos:line="62" pos:column="14">(<argument><expr><name pos:line="62" pos:column="15">in<pos:position pos:line="62" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="19">start<pos:position pos:line="62" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="26">SEEK_SET<pos:position pos:line="62" pos:column="34"/></name></expr></argument>)<pos:position pos:line="62" pos:column="35"/></argument_list></call> <operator pos:line="62" pos:column="36">==<pos:position pos:line="62" pos:column="38"/></operator> <operator pos:line="62" pos:column="39">-<pos:position pos:line="62" pos:column="40"/></operator><literal type="number" pos:line="62" pos:column="40">1<pos:position pos:line="62" pos:column="41"/></literal></expr>)<pos:position pos:line="62" pos:column="42"/></condition><then pos:line="62" pos:column="42">
  <block pos:line="63" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">dprint<pos:position pos:line="64" pos:column="11"/></name> <argument_list pos:line="64" pos:column="12">(<argument><expr><literal type="number" pos:line="64" pos:column="13">1<pos:position pos:line="64" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="64" pos:column="16">(<pos:position pos:line="64" pos:column="17"/></operator><name pos:line="64" pos:column="17">debugfile<pos:position pos:line="64" pos:column="26"/></name><operator pos:line="64" pos:column="26">,<pos:position pos:line="64" pos:column="27"/></operator> <literal type="string" pos:line="64" pos:column="28">"pgp_dearmor: Can't seekto start.\n"<pos:position pos:line="64" pos:column="64"/></literal><operator pos:line="64" pos:column="64">)<pos:position pos:line="64" pos:column="65"/></operator></expr></argument>)<pos:position pos:line="64" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="67"/></expr_stmt>
    <return pos:line="65" pos:column="5">return;<pos:position pos:line="65" pos:column="12"/></return>
  }<pos:position pos:line="66" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="68" pos:column="3">mutt_decode_base64<pos:position pos:line="68" pos:column="21"/></name> <argument_list pos:line="68" pos:column="22">(<argument><expr><operator pos:line="68" pos:column="23">&amp;<pos:position pos:line="68" pos:column="28"/></operator><name pos:line="68" pos:column="24">state<pos:position pos:line="68" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="31">end<pos:position pos:line="68" pos:column="34"/></name> <operator pos:line="68" pos:column="35">-<pos:position pos:line="68" pos:column="36"/></operator> <name pos:line="68" pos:column="37">start<pos:position pos:line="68" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="44">0<pos:position pos:line="68" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="68" pos:column="47">(<pos:position pos:line="68" pos:column="48"/></operator><name pos:line="68" pos:column="48">iconv_t<pos:position pos:line="68" pos:column="55"/></name><operator pos:line="68" pos:column="55">)<pos:position pos:line="68" pos:column="56"/></operator> <operator pos:line="68" pos:column="57">-<pos:position pos:line="68" pos:column="58"/></operator><literal type="number" pos:line="68" pos:column="58">1<pos:position pos:line="68" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="61"/></expr_stmt>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
