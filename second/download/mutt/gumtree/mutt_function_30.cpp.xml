<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_function_30.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_attachments<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">BUFFER<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">buf<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">BUFFER<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">s<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">unsigned<pos:position pos:line="1" pos:column="63"/></name> <name pos:line="1" pos:column="64">long<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">data<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="75">BUFFER<pos:position pos:line="1" pos:column="81"/></name> <modifier pos:line="1" pos:column="82">*<pos:position pos:line="1" pos:column="83"/></modifier></type><name pos:line="1" pos:column="83">err<pos:position pos:line="1" pos:column="86"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="87"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name pos:line="3" pos:column="8">op<pos:position pos:line="3" pos:column="10"/></name></decl>, <modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="13">category<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">LIST<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier><modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type><name pos:line="4" pos:column="10">listp<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">mutt_extract_token<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><name pos:line="6" pos:column="22">buf<pos:position pos:line="6" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="27">s<pos:position pos:line="6" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="30">0<pos:position pos:line="6" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="33"/></expr_stmt>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">!<pos:position pos:line="7" pos:column="8"/></operator><name><name pos:line="7" pos:column="8">buf<pos:position pos:line="7" pos:column="11"/></name><operator pos:line="7" pos:column="11">-&gt;<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="13">data<pos:position pos:line="7" pos:column="17"/></name></name> <operator pos:line="7" pos:column="18">||<pos:position pos:line="7" pos:column="20"/></operator> <operator pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></operator><name><name pos:line="7" pos:column="22">buf<pos:position pos:line="7" pos:column="25"/></name><operator pos:line="7" pos:column="25">-&gt;<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="27">data<pos:position pos:line="7" pos:column="31"/></name></name> <operator pos:line="7" pos:column="32">==<pos:position pos:line="7" pos:column="34"/></operator> <literal type="char" pos:line="7" pos:column="35">'\0'<pos:position pos:line="7" pos:column="39"/></literal></expr>)<pos:position pos:line="7" pos:column="40"/></condition><then pos:line="7" pos:column="40"> <block pos:line="7" pos:column="41">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">strfcpy<pos:position pos:line="8" pos:column="12"/></name><argument_list pos:line="8" pos:column="12">(<argument><expr><name><name pos:line="8" pos:column="13">err<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">-&gt;<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="18">data<pos:position pos:line="8" pos:column="22"/></name></name></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="24">_<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">(<argument><expr><literal type="string" pos:line="8" pos:column="26">"attachments: no disposition"<pos:position pos:line="8" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="58">err<pos:position pos:line="8" pos:column="61"/></name><operator pos:line="8" pos:column="61">-&gt;<pos:position pos:line="8" pos:column="66"/></operator><name pos:line="8" pos:column="63">dsize<pos:position pos:line="8" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="70"/></expr_stmt>
    <return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">-<pos:position pos:line="9" pos:column="13"/></operator><literal type="number" pos:line="9" pos:column="13">1<pos:position pos:line="9" pos:column="14"/></literal></expr>;<pos:position pos:line="9" pos:column="15"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="12" pos:column="3">category<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <name><name pos:line="12" pos:column="14">buf<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">-&gt;<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="19">data<pos:position pos:line="12" pos:column="23"/></name></name></expr>;<pos:position pos:line="12" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="13" pos:column="3">op<pos:position pos:line="13" pos:column="5"/></name> <operator pos:line="13" pos:column="6">=<pos:position pos:line="13" pos:column="7"/></operator> <operator pos:line="13" pos:column="8">*<pos:position pos:line="13" pos:column="9"/></operator><name pos:line="13" pos:column="9">category<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">++<pos:position pos:line="13" pos:column="19"/></operator></expr>;<pos:position pos:line="13" pos:column="20"/></expr_stmt>

  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">op<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">==<pos:position pos:line="15" pos:column="12"/></operator> <literal type="char" pos:line="15" pos:column="13">'?'<pos:position pos:line="15" pos:column="16"/></literal></expr>)<pos:position pos:line="15" pos:column="17"/></condition><then pos:line="15" pos:column="17"> <block pos:line="15" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">mutt_endwin<pos:position pos:line="16" pos:column="16"/></name> <argument_list pos:line="16" pos:column="17">(<argument><expr><name pos:line="16" pos:column="18">NULL<pos:position pos:line="16" pos:column="22"/></name></expr></argument>)<pos:position pos:line="16" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">fflush<pos:position pos:line="17" pos:column="11"/></name> <argument_list pos:line="17" pos:column="12">(<argument><expr><name pos:line="17" pos:column="13">stdout<pos:position pos:line="17" pos:column="19"/></name></expr></argument>)<pos:position pos:line="17" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">printf<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><literal type="string" pos:line="18" pos:column="12">"\nCurrent attachments settings:\n\n"<pos:position pos:line="18" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">print_attach_list<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><name pos:line="19" pos:column="23">AttachAllow<pos:position pos:line="19" pos:column="34"/></name></expr></argument>,   <argument><expr><literal type="char" pos:line="19" pos:column="38">'+'<pos:position pos:line="19" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="43">"A"<pos:position pos:line="19" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">print_attach_list<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">AttachExclude<pos:position pos:line="20" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="20" pos:column="38">'-'<pos:position pos:line="20" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="43">"A"<pos:position pos:line="20" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">print_attach_list<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">InlineAllow<pos:position pos:line="21" pos:column="34"/></name></expr></argument>,   <argument><expr><literal type="char" pos:line="21" pos:column="38">'+'<pos:position pos:line="21" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="43">"I"<pos:position pos:line="21" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">print_attach_list<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">(<argument><expr><name pos:line="22" pos:column="23">InlineExclude<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="22" pos:column="38">'-'<pos:position pos:line="22" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="43">"I"<pos:position pos:line="22" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">set_option<pos:position pos:line="23" pos:column="15"/></name> <argument_list pos:line="23" pos:column="16">(<argument><expr><name pos:line="23" pos:column="17">OPTFORCEREDRAWINDEX<pos:position pos:line="23" pos:column="36"/></name></expr></argument>)<pos:position pos:line="23" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">set_option<pos:position pos:line="24" pos:column="15"/></name> <argument_list pos:line="24" pos:column="16">(<argument><expr><name pos:line="24" pos:column="17">OPTFORCEREDRAWPAGER<pos:position pos:line="24" pos:column="36"/></name></expr></argument>)<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">mutt_any_key_to_continue<pos:position pos:line="25" pos:column="29"/></name> <argument_list pos:line="25" pos:column="30">(<argument><expr><name pos:line="25" pos:column="31">NULL<pos:position pos:line="25" pos:column="35"/></name></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="37"/></expr_stmt>
    <return pos:line="26" pos:column="5">return <expr><literal type="number" pos:line="26" pos:column="12">0<pos:position pos:line="26" pos:column="13"/></literal></expr>;<pos:position pos:line="26" pos:column="14"/></return>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>

  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name pos:line="29" pos:column="7">op<pos:position pos:line="29" pos:column="9"/></name> <operator pos:line="29" pos:column="10">!=<pos:position pos:line="29" pos:column="12"/></operator> <literal type="char" pos:line="29" pos:column="13">'+'<pos:position pos:line="29" pos:column="16"/></literal> <operator pos:line="29" pos:column="17">&amp;&amp;<pos:position pos:line="29" pos:column="27"/></operator> <name pos:line="29" pos:column="20">op<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">!=<pos:position pos:line="29" pos:column="25"/></operator> <literal type="char" pos:line="29" pos:column="26">'-'<pos:position pos:line="29" pos:column="29"/></literal></expr>)<pos:position pos:line="29" pos:column="30"/></condition><then pos:line="29" pos:column="30"> <block pos:line="29" pos:column="31">{
    <expr_stmt><expr><name pos:line="30" pos:column="5">op<pos:position pos:line="30" pos:column="7"/></name> <operator pos:line="30" pos:column="8">=<pos:position pos:line="30" pos:column="9"/></operator> <literal type="char" pos:line="30" pos:column="10">'+'<pos:position pos:line="30" pos:column="13"/></literal></expr>;<pos:position pos:line="30" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><name pos:line="31" pos:column="5">category<pos:position pos:line="31" pos:column="13"/></name><operator pos:line="31" pos:column="13">--<pos:position pos:line="31" pos:column="15"/></operator></expr>;<pos:position pos:line="31" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>
  <if pos:line="33" pos:column="3">if <condition pos:line="33" pos:column="6">(<expr><operator pos:line="33" pos:column="7">!<pos:position pos:line="33" pos:column="8"/></operator><call><name pos:line="33" pos:column="8">ascii_strncasecmp<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">(<argument><expr><name pos:line="33" pos:column="26">category<pos:position pos:line="33" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="36">"attachment"<pos:position pos:line="33" pos:column="48"/></literal></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="50">strlen<pos:position pos:line="33" pos:column="56"/></name><argument_list pos:line="33" pos:column="56">(<argument><expr><name pos:line="33" pos:column="57">category<pos:position pos:line="33" pos:column="65"/></name></expr></argument>)<pos:position pos:line="33" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="68"/></condition><then pos:line="33" pos:column="68"> <block pos:line="33" pos:column="69">{
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">op<pos:position pos:line="34" pos:column="11"/></name> <operator pos:line="34" pos:column="12">==<pos:position pos:line="34" pos:column="14"/></operator> <literal type="char" pos:line="34" pos:column="15">'+'<pos:position pos:line="34" pos:column="18"/></literal></expr>)<pos:position pos:line="34" pos:column="19"/></condition><then pos:line="34" pos:column="19">
      <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="7">listp<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <operator pos:line="35" pos:column="15">&amp;<pos:position pos:line="35" pos:column="20"/></operator><name pos:line="35" pos:column="16">AttachAllow<pos:position pos:line="35" pos:column="27"/></name></expr>;<pos:position pos:line="35" pos:column="28"/></expr_stmt></block></then>
    <else pos:line="36" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="7">listp<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <operator pos:line="37" pos:column="15">&amp;<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="16">AttachExclude<pos:position pos:line="37" pos:column="29"/></name></expr>;<pos:position pos:line="37" pos:column="30"/></expr_stmt></block></else></if>
  }<pos:position pos:line="38" pos:column="4"/></block></then>
  <elseif pos:line="39" pos:column="3">else <if pos:line="39" pos:column="8">if <condition pos:line="39" pos:column="11">(<expr><operator pos:line="39" pos:column="12">!<pos:position pos:line="39" pos:column="13"/></operator><call><name pos:line="39" pos:column="13">ascii_strncasecmp<pos:position pos:line="39" pos:column="30"/></name><argument_list pos:line="39" pos:column="30">(<argument><expr><name pos:line="39" pos:column="31">category<pos:position pos:line="39" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="41">"inline"<pos:position pos:line="39" pos:column="49"/></literal></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="51">strlen<pos:position pos:line="39" pos:column="57"/></name><argument_list pos:line="39" pos:column="57">(<argument><expr><name pos:line="39" pos:column="58">category<pos:position pos:line="39" pos:column="66"/></name></expr></argument>)<pos:position pos:line="39" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="69"/></condition><then pos:line="39" pos:column="69"> <block pos:line="39" pos:column="70">{
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">op<pos:position pos:line="40" pos:column="11"/></name> <operator pos:line="40" pos:column="12">==<pos:position pos:line="40" pos:column="14"/></operator> <literal type="char" pos:line="40" pos:column="15">'+'<pos:position pos:line="40" pos:column="18"/></literal></expr>)<pos:position pos:line="40" pos:column="19"/></condition><then pos:line="40" pos:column="19">
      <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="7">listp<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">=<pos:position pos:line="41" pos:column="14"/></operator> <operator pos:line="41" pos:column="15">&amp;<pos:position pos:line="41" pos:column="20"/></operator><name pos:line="41" pos:column="16">InlineAllow<pos:position pos:line="41" pos:column="27"/></name></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt></block></then>
    <else pos:line="42" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="7">listp<pos:position pos:line="43" pos:column="12"/></name> <operator pos:line="43" pos:column="13">=<pos:position pos:line="43" pos:column="14"/></operator> <operator pos:line="43" pos:column="15">&amp;<pos:position pos:line="43" pos:column="20"/></operator><name pos:line="43" pos:column="16">InlineExclude<pos:position pos:line="43" pos:column="29"/></name></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt></block></else></if>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if></elseif>
  <else pos:line="45" pos:column="3">else <block pos:line="45" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">strfcpy<pos:position pos:line="46" pos:column="12"/></name><argument_list pos:line="46" pos:column="12">(<argument><expr><name><name pos:line="46" pos:column="13">err<pos:position pos:line="46" pos:column="16"/></name><operator pos:line="46" pos:column="16">-&gt;<pos:position pos:line="46" pos:column="21"/></operator><name pos:line="46" pos:column="18">data<pos:position pos:line="46" pos:column="22"/></name></name></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="24">_<pos:position pos:line="46" pos:column="25"/></name><argument_list pos:line="46" pos:column="25">(<argument><expr><literal type="string" pos:line="46" pos:column="26">"attachments: invalid disposition"<pos:position pos:line="46" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="63">err<pos:position pos:line="46" pos:column="66"/></name><operator pos:line="46" pos:column="66">-&gt;<pos:position pos:line="46" pos:column="71"/></operator><name pos:line="46" pos:column="68">dsize<pos:position pos:line="46" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="75"/></expr_stmt>
    <return pos:line="47" pos:column="5">return <expr><operator pos:line="47" pos:column="12">-<pos:position pos:line="47" pos:column="13"/></operator><literal type="number" pos:line="47" pos:column="13">1<pos:position pos:line="47" pos:column="14"/></literal></expr>;<pos:position pos:line="47" pos:column="15"/></return>
  }<pos:position pos:line="48" pos:column="4"/></block></else></if>

  <return pos:line="50" pos:column="3">return <expr><call><name pos:line="50" pos:column="10">parse_attach_list<pos:position pos:line="50" pos:column="27"/></name><argument_list pos:line="50" pos:column="27">(<argument><expr><name pos:line="50" pos:column="28">buf<pos:position pos:line="50" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="33">s<pos:position pos:line="50" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="36">listp<pos:position pos:line="50" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="43">err<pos:position pos:line="50" pos:column="46"/></name></expr></argument>)<pos:position pos:line="50" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="48"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
