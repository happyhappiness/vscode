<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_316_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">pgp_copy_clearsigned<pos:position pos:line="1" pos:column="33"/></name> <parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">FILE<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">fpin<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">STATE<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">s<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">char<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">charset<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">buf<pos:position pos:line="3" pos:column="11"/></name><index pos:line="3" pos:column="11">[<expr><name pos:line="3" pos:column="12">HUGE_STRING<pos:position pos:line="3" pos:column="23"/></name></expr>]<pos:position pos:line="3" pos:column="24"/></index></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">short<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">complete<pos:position pos:line="4" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="19">armor_header<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
  
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">FGETCONV<pos:position pos:line="6" pos:column="11"/></name> <modifier pos:line="6" pos:column="12">*<pos:position pos:line="6" pos:column="13"/></modifier></type><name pos:line="6" pos:column="13">fc<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
  
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">rewind<pos:position pos:line="8" pos:column="9"/></name> <argument_list pos:line="8" pos:column="10">(<argument><expr><name pos:line="8" pos:column="11">fpin<pos:position pos:line="8" pos:column="15"/></name></expr></argument>)<pos:position pos:line="8" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="17"/></expr_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* fromcode comes from the MIME Content-Type charset label. It might
   * be a wrong label, so we want the ability to do corrections via
   * charset-hooks. Therefore we set flags to MUTT_ICONV_HOOK_FROM.
   */</comment>
  <expr_stmt><expr><name pos:line="14" pos:column="3">fc<pos:position pos:line="14" pos:column="5"/></name> <operator pos:line="14" pos:column="6">=<pos:position pos:line="14" pos:column="7"/></operator> <call><name pos:line="14" pos:column="8">fgetconv_open<pos:position pos:line="14" pos:column="21"/></name> <argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">fpin<pos:position pos:line="14" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="29">charset<pos:position pos:line="14" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="38">Charset<pos:position pos:line="14" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="47">MUTT_ICONV_HOOK_FROM<pos:position pos:line="14" pos:column="67"/></name></expr></argument>)<pos:position pos:line="14" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="69"/></expr_stmt>
  
  <for pos:line="16" pos:column="3">for <control pos:line="16" pos:column="7">(<init><expr><name pos:line="16" pos:column="8">complete<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <literal type="number" pos:line="16" pos:column="19">1<pos:position pos:line="16" pos:column="20"/></literal></expr><operator pos:line="16" pos:column="20">,<pos:position pos:line="16" pos:column="21"/></operator> <expr><name pos:line="16" pos:column="22">armor_header<pos:position pos:line="16" pos:column="34"/></name> <operator pos:line="16" pos:column="35">=<pos:position pos:line="16" pos:column="36"/></operator> <literal type="number" pos:line="16" pos:column="37">1<pos:position pos:line="16" pos:column="38"/></literal></expr>;<pos:position pos:line="16" pos:column="39"/></init>
       <condition><expr><call><name pos:line="17" pos:column="8">fgetconvs<pos:position pos:line="17" pos:column="17"/></name> <argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">buf<pos:position pos:line="17" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="24">sizeof <argument_list pos:line="17" pos:column="31">(<argument><expr><name pos:line="17" pos:column="32">buf<pos:position pos:line="17" pos:column="35"/></name></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="17" pos:column="38">fc<pos:position pos:line="17" pos:column="40"/></name></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call> <operator pos:line="17" pos:column="42">!=<pos:position pos:line="17" pos:column="44"/></operator> <name pos:line="17" pos:column="45">NULL<pos:position pos:line="17" pos:column="49"/></name></expr>;<pos:position pos:line="17" pos:column="50"/></condition>
       <incr><expr><name pos:line="18" pos:column="8">complete<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <call><name pos:line="18" pos:column="19">strchr<pos:position pos:line="18" pos:column="25"/></name> <argument_list pos:line="18" pos:column="26">(<argument><expr><name pos:line="18" pos:column="27">buf<pos:position pos:line="18" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="18" pos:column="32">'\n'<pos:position pos:line="18" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="37"/></argument_list></call> <operator pos:line="18" pos:column="38">!=<pos:position pos:line="18" pos:column="40"/></operator> <name pos:line="18" pos:column="41">NULL<pos:position pos:line="18" pos:column="45"/></name></expr></incr>)<pos:position pos:line="18" pos:column="46"/></control>
  <block pos:line="19" pos:column="3">{
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">!<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">complete<pos:position pos:line="20" pos:column="18"/></name></expr>)<pos:position pos:line="20" pos:column="19"/></condition><then pos:line="20" pos:column="19">
    <block pos:line="21" pos:column="5">{
      <if pos:line="22" pos:column="7">if <condition pos:line="22" pos:column="10">(<expr><operator pos:line="22" pos:column="11">!<pos:position pos:line="22" pos:column="12"/></operator><name pos:line="22" pos:column="12">armor_header<pos:position pos:line="22" pos:column="24"/></name></expr>)<pos:position pos:line="22" pos:column="25"/></condition><then pos:line="22" pos:column="25">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="9">state_puts<pos:position pos:line="23" pos:column="19"/></name> <argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">buf<pos:position pos:line="23" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="26">s<pos:position pos:line="23" pos:column="27"/></name></expr></argument>)<pos:position pos:line="23" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt></block></then></if>
      <continue pos:line="24" pos:column="7">continue;<pos:position pos:line="24" pos:column="16"/></continue>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><call><name pos:line="27" pos:column="9">mutt_strcmp<pos:position pos:line="27" pos:column="20"/></name> <argument_list pos:line="27" pos:column="21">(<argument><expr><name pos:line="27" pos:column="22">buf<pos:position pos:line="27" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="27">"-----BEGIN PGP SIGNATURE-----\n"<pos:position pos:line="27" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="61"/></argument_list></call> <operator pos:line="27" pos:column="62">==<pos:position pos:line="27" pos:column="64"/></operator> <literal type="number" pos:line="27" pos:column="65">0<pos:position pos:line="27" pos:column="66"/></literal></expr>)<pos:position pos:line="27" pos:column="67"/></condition><then pos:line="27" pos:column="67">
      <block type="pseudo"><break pos:line="28" pos:column="7">break;<pos:position pos:line="28" pos:column="13"/></break></block></then></if>
    
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">armor_header<pos:position pos:line="30" pos:column="21"/></name></expr>)<pos:position pos:line="30" pos:column="22"/></condition><then pos:line="30" pos:column="22">
    <block pos:line="31" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="32" pos:column="7">char<pos:position pos:line="32" pos:column="11"/></name> <modifier pos:line="32" pos:column="12">*<pos:position pos:line="32" pos:column="13"/></modifier></type><name pos:line="32" pos:column="13">p<pos:position pos:line="32" pos:column="14"/></name> <init pos:line="32" pos:column="15">= <expr><call><name pos:line="32" pos:column="17">mutt_skip_whitespace<pos:position pos:line="32" pos:column="37"/></name> <argument_list pos:line="32" pos:column="38">(<argument><expr><name pos:line="32" pos:column="39">buf<pos:position pos:line="32" pos:column="42"/></name></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="44"/></decl_stmt>
      <if pos:line="33" pos:column="7">if <condition pos:line="33" pos:column="10">(<expr><operator pos:line="33" pos:column="11">*<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="12">p<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">==<pos:position pos:line="33" pos:column="16"/></operator> <literal type="char" pos:line="33" pos:column="17">'\0'<pos:position pos:line="33" pos:column="21"/></literal></expr>)<pos:position pos:line="33" pos:column="22"/></condition><then pos:line="33" pos:column="22"> 
	<block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="9">armor_header<pos:position pos:line="34" pos:column="21"/></name> <operator pos:line="34" pos:column="22">=<pos:position pos:line="34" pos:column="23"/></operator> <literal type="number" pos:line="34" pos:column="24">0<pos:position pos:line="34" pos:column="25"/></literal></expr>;<pos:position pos:line="34" pos:column="26"/></expr_stmt></block></then></if>
      <continue pos:line="35" pos:column="7">continue;<pos:position pos:line="35" pos:column="16"/></continue>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>
    
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name><name pos:line="38" pos:column="9">s<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">-&gt;<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="12">prefix<pos:position pos:line="38" pos:column="18"/></name></name></expr>)<pos:position pos:line="38" pos:column="19"/></condition><then pos:line="38" pos:column="19"> 
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="7">state_puts<pos:position pos:line="39" pos:column="17"/></name> <argument_list pos:line="39" pos:column="18">(<argument><expr><name><name pos:line="39" pos:column="19">s<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">-&gt;<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="22">prefix<pos:position pos:line="39" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="30">s<pos:position pos:line="39" pos:column="31"/></name></expr></argument>)<pos:position pos:line="39" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="33"/></expr_stmt></block></then></if>
    
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name><name pos:line="41" pos:column="9">buf<pos:position pos:line="41" pos:column="12"/></name><index pos:line="41" pos:column="12">[<expr><literal type="number" pos:line="41" pos:column="13">0<pos:position pos:line="41" pos:column="14"/></literal></expr>]<pos:position pos:line="41" pos:column="15"/></index></name> <operator pos:line="41" pos:column="16">==<pos:position pos:line="41" pos:column="18"/></operator> <literal type="char" pos:line="41" pos:column="19">'-'<pos:position pos:line="41" pos:column="22"/></literal> <operator pos:line="41" pos:column="23">&amp;&amp;<pos:position pos:line="41" pos:column="33"/></operator> <name><name pos:line="41" pos:column="26">buf<pos:position pos:line="41" pos:column="29"/></name><index pos:line="41" pos:column="29">[<expr><literal type="number" pos:line="41" pos:column="30">1<pos:position pos:line="41" pos:column="31"/></literal></expr>]<pos:position pos:line="41" pos:column="32"/></index></name> <operator pos:line="41" pos:column="33">==<pos:position pos:line="41" pos:column="35"/></operator> <literal type="char" pos:line="41" pos:column="36">' '<pos:position pos:line="41" pos:column="39"/></literal></expr>)<pos:position pos:line="41" pos:column="40"/></condition><then pos:line="41" pos:column="40">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="7">state_puts<pos:position pos:line="42" pos:column="17"/></name> <argument_list pos:line="42" pos:column="18">(<argument><expr><name pos:line="42" pos:column="19">buf<pos:position pos:line="42" pos:column="22"/></name> <operator pos:line="42" pos:column="23">+<pos:position pos:line="42" pos:column="24"/></operator> <literal type="number" pos:line="42" pos:column="25">2<pos:position pos:line="42" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="28">s<pos:position pos:line="42" pos:column="29"/></name></expr></argument>)<pos:position pos:line="42" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="31"/></expr_stmt></block></then>
    <else pos:line="43" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="7">state_puts<pos:position pos:line="44" pos:column="17"/></name> <argument_list pos:line="44" pos:column="18">(<argument><expr><name pos:line="44" pos:column="19">buf<pos:position pos:line="44" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="24">s<pos:position pos:line="44" pos:column="25"/></name></expr></argument>)<pos:position pos:line="44" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="27"/></expr_stmt></block></else></if>
  }<pos:position pos:line="45" pos:column="4"/></block></for>
  
  <expr_stmt><expr><call><name pos:line="47" pos:column="3">fgetconv_close<pos:position pos:line="47" pos:column="17"/></name> <argument_list pos:line="47" pos:column="18">(<argument><expr><operator pos:line="47" pos:column="19">&amp;<pos:position pos:line="47" pos:column="24"/></operator><name pos:line="47" pos:column="20">fc<pos:position pos:line="47" pos:column="22"/></name></expr></argument>)<pos:position pos:line="47" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="24"/></expr_stmt>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
