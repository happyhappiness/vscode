<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1968_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type>
<name pos:line="2" pos:column="1">get_charset_aliases<pos:position pos:line="2" pos:column="20"/></name> <parameter_list pos:line="2" pos:column="21">()<pos:position pos:line="2" pos:column="23"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">cp<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><name pos:line="6" pos:column="3">cp<pos:position pos:line="6" pos:column="5"/></name> <operator pos:line="6" pos:column="6">=<pos:position pos:line="6" pos:column="7"/></operator> <name pos:line="6" pos:column="8">charset_aliases<pos:position pos:line="6" pos:column="23"/></name></expr>;<pos:position pos:line="6" pos:column="24"/></expr_stmt>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">cp<pos:position pos:line="7" pos:column="9"/></name> <operator pos:line="7" pos:column="10">==<pos:position pos:line="7" pos:column="12"/></operator> <name pos:line="7" pos:column="13">NULL<pos:position pos:line="7" pos:column="17"/></name></expr>)<pos:position pos:line="7" pos:column="18"/></condition><then pos:line="7" pos:column="18">
    <block pos:line="8" pos:column="5">{
<cpp:ifndef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifndef<pos:position pos:line="9" pos:column="8"/></cpp:directive> <name pos:line="9" pos:column="9">WIN32<pos:position pos:line="9" pos:column="14"/></name></cpp:ifndef>
      <decl_stmt><decl><type><name pos:line="10" pos:column="7">FILE<pos:position pos:line="10" pos:column="11"/></name> <modifier pos:line="10" pos:column="12">*<pos:position pos:line="10" pos:column="13"/></modifier></type><name pos:line="10" pos:column="13">fp<pos:position pos:line="10" pos:column="15"/></name></decl>;<pos:position pos:line="10" pos:column="16"/></decl_stmt>
      <decl_stmt><decl><type><specifier pos:line="11" pos:column="7">const<pos:position pos:line="11" pos:column="12"/></specifier> <name pos:line="11" pos:column="13">char<pos:position pos:line="11" pos:column="17"/></name> <modifier pos:line="11" pos:column="18">*<pos:position pos:line="11" pos:column="19"/></modifier></type><name pos:line="11" pos:column="19">dir<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><name pos:line="11" pos:column="25">LIBDIR<pos:position pos:line="11" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="32"/></decl_stmt>
      <decl_stmt><decl><type><specifier pos:line="12" pos:column="7">const<pos:position pos:line="12" pos:column="12"/></specifier> <name pos:line="12" pos:column="13">char<pos:position pos:line="12" pos:column="17"/></name> <modifier pos:line="12" pos:column="18">*<pos:position pos:line="12" pos:column="19"/></modifier></type><name pos:line="12" pos:column="19">base<pos:position pos:line="12" pos:column="23"/></name> <init pos:line="12" pos:column="24">= <expr><literal type="string" pos:line="12" pos:column="26">"charset.alias"<pos:position pos:line="12" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="42"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="13" pos:column="7">char<pos:position pos:line="13" pos:column="11"/></name> <modifier pos:line="13" pos:column="12">*<pos:position pos:line="13" pos:column="13"/></modifier></type><name pos:line="13" pos:column="13">file_name<pos:position pos:line="13" pos:column="22"/></name></decl>;<pos:position pos:line="13" pos:column="23"/></decl_stmt>

      <comment type="block" pos:line="15" pos:column="7">/* Concatenate dir and base into freshly allocated file_name.  */</comment>
      <block pos:line="16" pos:column="7">{
	<decl_stmt><decl><type><name pos:line="17" pos:column="9">size_t<pos:position pos:line="17" pos:column="15"/></name></type> <name pos:line="17" pos:column="16">dir_len<pos:position pos:line="17" pos:column="23"/></name> <init pos:line="17" pos:column="24">= <expr><call><name pos:line="17" pos:column="26">strlen<pos:position pos:line="17" pos:column="32"/></name> <argument_list pos:line="17" pos:column="33">(<argument><expr><name pos:line="17" pos:column="34">dir<pos:position pos:line="17" pos:column="37"/></name></expr></argument>)<pos:position pos:line="17" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="18" pos:column="9">size_t<pos:position pos:line="18" pos:column="15"/></name></type> <name pos:line="18" pos:column="16">base_len<pos:position pos:line="18" pos:column="24"/></name> <init pos:line="18" pos:column="25">= <expr><call><name pos:line="18" pos:column="27">strlen<pos:position pos:line="18" pos:column="33"/></name> <argument_list pos:line="18" pos:column="34">(<argument><expr><name pos:line="18" pos:column="35">base<pos:position pos:line="18" pos:column="39"/></name></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="19" pos:column="9">int<pos:position pos:line="19" pos:column="12"/></name></type> <name pos:line="19" pos:column="13">add_slash<pos:position pos:line="19" pos:column="22"/></name> <init pos:line="19" pos:column="23">= <expr><operator pos:line="19" pos:column="25">(<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="26">dir_len<pos:position pos:line="19" pos:column="33"/></name> <operator pos:line="19" pos:column="34">&gt;<pos:position pos:line="19" pos:column="38"/></operator> <literal type="number" pos:line="19" pos:column="36">0<pos:position pos:line="19" pos:column="37"/></literal> <operator pos:line="19" pos:column="38">&amp;&amp;<pos:position pos:line="19" pos:column="48"/></operator> <operator pos:line="19" pos:column="41">!<pos:position pos:line="19" pos:column="42"/></operator><call><name pos:line="19" pos:column="42">ISSLASH<pos:position pos:line="19" pos:column="49"/></name> <argument_list pos:line="19" pos:column="50">(<argument><expr><name><name pos:line="19" pos:column="51">dir<pos:position pos:line="19" pos:column="54"/></name><index pos:line="19" pos:column="54">[<expr><name pos:line="19" pos:column="55">dir_len<pos:position pos:line="19" pos:column="62"/></name> <operator pos:line="19" pos:column="63">-<pos:position pos:line="19" pos:column="64"/></operator> <literal type="number" pos:line="19" pos:column="65">1<pos:position pos:line="19" pos:column="66"/></literal></expr>]<pos:position pos:line="19" pos:column="67"/></index></name></expr></argument>)<pos:position pos:line="19" pos:column="68"/></argument_list></call><operator pos:line="19" pos:column="68">)<pos:position pos:line="19" pos:column="69"/></operator></expr></init></decl>;<pos:position pos:line="19" pos:column="70"/></decl_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">file_name<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <operator pos:line="20" pos:column="21">(<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">char<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">*<pos:position pos:line="20" pos:column="28"/></operator><operator pos:line="20" pos:column="28">)<pos:position pos:line="20" pos:column="29"/></operator> <call><name pos:line="20" pos:column="30">malloc<pos:position pos:line="20" pos:column="36"/></name> <argument_list pos:line="20" pos:column="37">(<argument><expr><name pos:line="20" pos:column="38">dir_len<pos:position pos:line="20" pos:column="45"/></name> <operator pos:line="20" pos:column="46">+<pos:position pos:line="20" pos:column="47"/></operator> <name pos:line="20" pos:column="48">add_slash<pos:position pos:line="20" pos:column="57"/></name> <operator pos:line="20" pos:column="58">+<pos:position pos:line="20" pos:column="59"/></operator> <name pos:line="20" pos:column="60">base_len<pos:position pos:line="20" pos:column="68"/></name> <operator pos:line="20" pos:column="69">+<pos:position pos:line="20" pos:column="70"/></operator> <literal type="number" pos:line="20" pos:column="71">1<pos:position pos:line="20" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="74"/></expr_stmt>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">file_name<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">!=<pos:position pos:line="21" pos:column="25"/></operator> <name pos:line="21" pos:column="26">NULL<pos:position pos:line="21" pos:column="30"/></name></expr>)<pos:position pos:line="21" pos:column="31"/></condition><then pos:line="21" pos:column="31">
	  <block pos:line="22" pos:column="11">{
	    <expr_stmt><expr><call><name pos:line="23" pos:column="13">memcpy<pos:position pos:line="23" pos:column="19"/></name> <argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">file_name<pos:position pos:line="23" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="32">dir<pos:position pos:line="23" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="37">dir_len<pos:position pos:line="23" pos:column="44"/></name></expr></argument>)<pos:position pos:line="23" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="46"/></expr_stmt>
	    <if pos:line="24" pos:column="13">if <condition pos:line="24" pos:column="16">(<expr><name pos:line="24" pos:column="17">add_slash<pos:position pos:line="24" pos:column="26"/></name></expr>)<pos:position pos:line="24" pos:column="27"/></condition><then pos:line="24" pos:column="27">
	      <block type="pseudo"><expr_stmt><expr><name><name pos:line="25" pos:column="15">file_name<pos:position pos:line="25" pos:column="24"/></name><index pos:line="25" pos:column="24">[<expr><name pos:line="25" pos:column="25">dir_len<pos:position pos:line="25" pos:column="32"/></name></expr>]<pos:position pos:line="25" pos:column="33"/></index></name> <operator pos:line="25" pos:column="34">=<pos:position pos:line="25" pos:column="35"/></operator> <name pos:line="25" pos:column="36">DIRECTORY_SEPARATOR<pos:position pos:line="25" pos:column="55"/></name></expr>;<pos:position pos:line="25" pos:column="56"/></expr_stmt></block></then></if>
	    <expr_stmt><expr><call><name pos:line="26" pos:column="13">memcpy<pos:position pos:line="26" pos:column="19"/></name> <argument_list pos:line="26" pos:column="20">(<argument><expr><name pos:line="26" pos:column="21">file_name<pos:position pos:line="26" pos:column="30"/></name> <operator pos:line="26" pos:column="31">+<pos:position pos:line="26" pos:column="32"/></operator> <name pos:line="26" pos:column="33">dir_len<pos:position pos:line="26" pos:column="40"/></name> <operator pos:line="26" pos:column="41">+<pos:position pos:line="26" pos:column="42"/></operator> <name pos:line="26" pos:column="43">add_slash<pos:position pos:line="26" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="54">base<pos:position pos:line="26" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="60">base_len<pos:position pos:line="26" pos:column="68"/></name> <operator pos:line="26" pos:column="69">+<pos:position pos:line="26" pos:column="70"/></operator> <literal type="number" pos:line="26" pos:column="71">1<pos:position pos:line="26" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="74"/></expr_stmt>
	  }<pos:position pos:line="27" pos:column="12"/></block></then></if>
      }<pos:position pos:line="28" pos:column="8"/></block>

      <if pos:line="30" pos:column="7">if <condition pos:line="30" pos:column="10">(<expr><name pos:line="30" pos:column="11">file_name<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">==<pos:position pos:line="30" pos:column="23"/></operator> <name pos:line="30" pos:column="24">NULL<pos:position pos:line="30" pos:column="28"/></name> <operator pos:line="30" pos:column="29">||<pos:position pos:line="30" pos:column="31"/></operator> <operator pos:line="30" pos:column="32">(<pos:position pos:line="30" pos:column="33"/></operator><name pos:line="30" pos:column="33">fp<pos:position pos:line="30" pos:column="35"/></name> <operator pos:line="30" pos:column="36">=<pos:position pos:line="30" pos:column="37"/></operator> <call><name pos:line="30" pos:column="38">fopen<pos:position pos:line="30" pos:column="43"/></name> <argument_list pos:line="30" pos:column="44">(<argument><expr><name pos:line="30" pos:column="45">file_name<pos:position pos:line="30" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="56">"r"<pos:position pos:line="30" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="60"/></argument_list></call><operator pos:line="30" pos:column="60">)<pos:position pos:line="30" pos:column="61"/></operator> <operator pos:line="30" pos:column="62">==<pos:position pos:line="30" pos:column="64"/></operator> <name pos:line="30" pos:column="65">NULL<pos:position pos:line="30" pos:column="69"/></name></expr>)<pos:position pos:line="30" pos:column="70"/></condition><then pos:line="30" pos:column="70">
	<comment type="block" pos:line="31" pos:column="9">/* Out of memory or file not found, treat it as empty.  */</comment>
	<block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="9">cp<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <literal type="string" pos:line="32" pos:column="14">""<pos:position pos:line="32" pos:column="16"/></literal></expr>;<pos:position pos:line="32" pos:column="17"/></expr_stmt></block></then>
      <else pos:line="33" pos:column="7">else
	<block pos:line="34" pos:column="9">{
	  <comment type="block" pos:line="35" pos:column="11">/* Parse the file's contents.  */</comment>
	  <decl_stmt><decl><type><name pos:line="36" pos:column="11">int<pos:position pos:line="36" pos:column="14"/></name></type> <name pos:line="36" pos:column="15">c<pos:position pos:line="36" pos:column="16"/></name></decl>;<pos:position pos:line="36" pos:column="17"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="37" pos:column="11">char<pos:position pos:line="37" pos:column="15"/></name></type> <name><name pos:line="37" pos:column="16">buf1<pos:position pos:line="37" pos:column="20"/></name><index pos:line="37" pos:column="20">[<expr><literal type="number" pos:line="37" pos:column="21">50<pos:position pos:line="37" pos:column="23"/></literal><operator pos:line="37" pos:column="23">+<pos:position pos:line="37" pos:column="24"/></operator><literal type="number" pos:line="37" pos:column="24">1<pos:position pos:line="37" pos:column="25"/></literal></expr>]<pos:position pos:line="37" pos:column="26"/></index></name></decl>;<pos:position pos:line="37" pos:column="27"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="38" pos:column="11">char<pos:position pos:line="38" pos:column="15"/></name></type> <name><name pos:line="38" pos:column="16">buf2<pos:position pos:line="38" pos:column="20"/></name><index pos:line="38" pos:column="20">[<expr><literal type="number" pos:line="38" pos:column="21">50<pos:position pos:line="38" pos:column="23"/></literal><operator pos:line="38" pos:column="23">+<pos:position pos:line="38" pos:column="24"/></operator><literal type="number" pos:line="38" pos:column="24">1<pos:position pos:line="38" pos:column="25"/></literal></expr>]<pos:position pos:line="38" pos:column="26"/></index></name></decl>;<pos:position pos:line="38" pos:column="27"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="39" pos:column="11">char<pos:position pos:line="39" pos:column="15"/></name> <modifier pos:line="39" pos:column="16">*<pos:position pos:line="39" pos:column="17"/></modifier></type><name pos:line="39" pos:column="17">res_ptr<pos:position pos:line="39" pos:column="24"/></name> <init pos:line="39" pos:column="25">= <expr><name pos:line="39" pos:column="27">NULL<pos:position pos:line="39" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="39" pos:column="32"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="40" pos:column="11">size_t<pos:position pos:line="40" pos:column="17"/></name></type> <name pos:line="40" pos:column="18">res_size<pos:position pos:line="40" pos:column="26"/></name> <init pos:line="40" pos:column="27">= <expr><literal type="number" pos:line="40" pos:column="29">0<pos:position pos:line="40" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="40" pos:column="31"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="41" pos:column="11">size_t<pos:position pos:line="41" pos:column="17"/></name></type> <name pos:line="41" pos:column="18">l1<pos:position pos:line="41" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="41" pos:column="22">l2<pos:position pos:line="41" pos:column="24"/></name></decl>;<pos:position pos:line="41" pos:column="25"/></decl_stmt>

	  <for pos:line="43" pos:column="11">for <control pos:line="43" pos:column="15">(<init pos:line="43" pos:column="16">;<pos:position pos:line="43" pos:column="17"/></init><condition pos:line="43" pos:column="17">;<pos:position pos:line="43" pos:column="18"/></condition><incr/>)<pos:position pos:line="43" pos:column="19"/></control>
	    <block pos:line="44" pos:column="13">{
	      <expr_stmt><expr><name pos:line="45" pos:column="15">c<pos:position pos:line="45" pos:column="16"/></name> <operator pos:line="45" pos:column="17">=<pos:position pos:line="45" pos:column="18"/></operator> <call><name pos:line="45" pos:column="19">getc<pos:position pos:line="45" pos:column="23"/></name> <argument_list pos:line="45" pos:column="24">(<argument><expr><name pos:line="45" pos:column="25">fp<pos:position pos:line="45" pos:column="27"/></name></expr></argument>)<pos:position pos:line="45" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="29"/></expr_stmt>
	      <if pos:line="46" pos:column="15">if <condition pos:line="46" pos:column="18">(<expr><name pos:line="46" pos:column="19">c<pos:position pos:line="46" pos:column="20"/></name> <operator pos:line="46" pos:column="21">==<pos:position pos:line="46" pos:column="23"/></operator> <name pos:line="46" pos:column="24">EOF<pos:position pos:line="46" pos:column="27"/></name></expr>)<pos:position pos:line="46" pos:column="28"/></condition><then pos:line="46" pos:column="28">
		<block type="pseudo"><break pos:line="47" pos:column="17">break;<pos:position pos:line="47" pos:column="23"/></break></block></then></if>
	      <if pos:line="48" pos:column="15">if <condition pos:line="48" pos:column="18">(<expr><name pos:line="48" pos:column="19">c<pos:position pos:line="48" pos:column="20"/></name> <operator pos:line="48" pos:column="21">==<pos:position pos:line="48" pos:column="23"/></operator> <literal type="char" pos:line="48" pos:column="24">'\n'<pos:position pos:line="48" pos:column="28"/></literal> <operator pos:line="48" pos:column="29">||<pos:position pos:line="48" pos:column="31"/></operator> <name pos:line="48" pos:column="32">c<pos:position pos:line="48" pos:column="33"/></name> <operator pos:line="48" pos:column="34">==<pos:position pos:line="48" pos:column="36"/></operator> <literal type="char" pos:line="48" pos:column="37">' '<pos:position pos:line="48" pos:column="40"/></literal> <operator pos:line="48" pos:column="41">||<pos:position pos:line="48" pos:column="43"/></operator> <name pos:line="48" pos:column="44">c<pos:position pos:line="48" pos:column="45"/></name> <operator pos:line="48" pos:column="46">==<pos:position pos:line="48" pos:column="48"/></operator> <literal type="char" pos:line="48" pos:column="49">'\t'<pos:position pos:line="48" pos:column="53"/></literal></expr>)<pos:position pos:line="48" pos:column="54"/></condition><then pos:line="48" pos:column="54">
		<block type="pseudo"><continue pos:line="49" pos:column="17">continue;<pos:position pos:line="49" pos:column="26"/></continue></block></then></if>
	      <if pos:line="50" pos:column="15">if <condition pos:line="50" pos:column="18">(<expr><name pos:line="50" pos:column="19">c<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">==<pos:position pos:line="50" pos:column="23"/></operator> <literal type="char" pos:line="50" pos:column="24">'#'<pos:position pos:line="50" pos:column="27"/></literal></expr>)<pos:position pos:line="50" pos:column="28"/></condition><then pos:line="50" pos:column="28">
		<block pos:line="51" pos:column="17">{
		  <comment type="block" pos:line="52" pos:column="19">/* Skip comment, to end of line.  */</comment>
		  <do pos:line="53" pos:column="19">do
		    <block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="21">c<pos:position pos:line="54" pos:column="22"/></name> <operator pos:line="54" pos:column="23">=<pos:position pos:line="54" pos:column="24"/></operator> <call><name pos:line="54" pos:column="25">getc<pos:position pos:line="54" pos:column="29"/></name> <argument_list pos:line="54" pos:column="30">(<argument><expr><name pos:line="54" pos:column="31">fp<pos:position pos:line="54" pos:column="33"/></name></expr></argument>)<pos:position pos:line="54" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="35"/></expr_stmt></block>
		  while <condition pos:line="55" pos:column="25">(<expr><operator pos:line="55" pos:column="26">!<pos:position pos:line="55" pos:column="27"/></operator><operator pos:line="55" pos:column="27">(<pos:position pos:line="55" pos:column="28"/></operator><name pos:line="55" pos:column="28">c<pos:position pos:line="55" pos:column="29"/></name> <operator pos:line="55" pos:column="30">==<pos:position pos:line="55" pos:column="32"/></operator> <name pos:line="55" pos:column="33">EOF<pos:position pos:line="55" pos:column="36"/></name> <operator pos:line="55" pos:column="37">||<pos:position pos:line="55" pos:column="39"/></operator> <name pos:line="55" pos:column="40">c<pos:position pos:line="55" pos:column="41"/></name> <operator pos:line="55" pos:column="42">==<pos:position pos:line="55" pos:column="44"/></operator> <literal type="char" pos:line="55" pos:column="45">'\n'<pos:position pos:line="55" pos:column="49"/></literal><operator pos:line="55" pos:column="49">)<pos:position pos:line="55" pos:column="50"/></operator></expr>)<pos:position pos:line="55" pos:column="51"/></condition>;<pos:position pos:line="55" pos:column="52"/></do>
		  <if pos:line="56" pos:column="19">if <condition pos:line="56" pos:column="22">(<expr><name pos:line="56" pos:column="23">c<pos:position pos:line="56" pos:column="24"/></name> <operator pos:line="56" pos:column="25">==<pos:position pos:line="56" pos:column="27"/></operator> <name pos:line="56" pos:column="28">EOF<pos:position pos:line="56" pos:column="31"/></name></expr>)<pos:position pos:line="56" pos:column="32"/></condition><then pos:line="56" pos:column="32">
		    <block type="pseudo"><break pos:line="57" pos:column="21">break;<pos:position pos:line="57" pos:column="27"/></break></block></then></if>
		  <continue pos:line="58" pos:column="19">continue;<pos:position pos:line="58" pos:column="28"/></continue>
		}<pos:position pos:line="59" pos:column="18"/></block></then></if>
	      <expr_stmt><expr><call><name pos:line="60" pos:column="15">ungetc<pos:position pos:line="60" pos:column="21"/></name> <argument_list pos:line="60" pos:column="22">(<argument><expr><name pos:line="60" pos:column="23">c<pos:position pos:line="60" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="26">fp<pos:position pos:line="60" pos:column="28"/></name></expr></argument>)<pos:position pos:line="60" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="30"/></expr_stmt>
	      <if pos:line="61" pos:column="15">if <condition pos:line="61" pos:column="18">(<expr><call><name pos:line="61" pos:column="19">fscanf<pos:position pos:line="61" pos:column="25"/></name><argument_list pos:line="61" pos:column="25">(<argument><expr><name pos:line="61" pos:column="26">fp<pos:position pos:line="61" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="30">"%50s %50s"<pos:position pos:line="61" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="43">buf1<pos:position pos:line="61" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="49">buf2<pos:position pos:line="61" pos:column="53"/></name></expr></argument>)<pos:position pos:line="61" pos:column="54"/></argument_list></call> <operator pos:line="61" pos:column="55">&lt;<pos:position pos:line="61" pos:column="59"/></operator> <literal type="number" pos:line="61" pos:column="57">2<pos:position pos:line="61" pos:column="58"/></literal></expr>)<pos:position pos:line="61" pos:column="59"/></condition><then pos:line="61" pos:column="59">
		<block type="pseudo"><break pos:line="62" pos:column="17">break;<pos:position pos:line="62" pos:column="23"/></break></block></then></if>
	      <expr_stmt><expr><name pos:line="63" pos:column="15">l1<pos:position pos:line="63" pos:column="17"/></name> <operator pos:line="63" pos:column="18">=<pos:position pos:line="63" pos:column="19"/></operator> <call><name pos:line="63" pos:column="20">strlen<pos:position pos:line="63" pos:column="26"/></name> <argument_list pos:line="63" pos:column="27">(<argument><expr><name pos:line="63" pos:column="28">buf1<pos:position pos:line="63" pos:column="32"/></name></expr></argument>)<pos:position pos:line="63" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="34"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="64" pos:column="15">l2<pos:position pos:line="64" pos:column="17"/></name> <operator pos:line="64" pos:column="18">=<pos:position pos:line="64" pos:column="19"/></operator> <call><name pos:line="64" pos:column="20">strlen<pos:position pos:line="64" pos:column="26"/></name> <argument_list pos:line="64" pos:column="27">(<argument><expr><name pos:line="64" pos:column="28">buf2<pos:position pos:line="64" pos:column="32"/></name></expr></argument>)<pos:position pos:line="64" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="34"/></expr_stmt>
	      <if pos:line="65" pos:column="15">if <condition pos:line="65" pos:column="18">(<expr><name pos:line="65" pos:column="19">res_size<pos:position pos:line="65" pos:column="27"/></name> <operator pos:line="65" pos:column="28">==<pos:position pos:line="65" pos:column="30"/></operator> <literal type="number" pos:line="65" pos:column="31">0<pos:position pos:line="65" pos:column="32"/></literal></expr>)<pos:position pos:line="65" pos:column="33"/></condition><then pos:line="65" pos:column="33">
		<block pos:line="66" pos:column="17">{
		  <expr_stmt><expr><name pos:line="67" pos:column="19">res_size<pos:position pos:line="67" pos:column="27"/></name> <operator pos:line="67" pos:column="28">=<pos:position pos:line="67" pos:column="29"/></operator> <name pos:line="67" pos:column="30">l1<pos:position pos:line="67" pos:column="32"/></name> <operator pos:line="67" pos:column="33">+<pos:position pos:line="67" pos:column="34"/></operator> <literal type="number" pos:line="67" pos:column="35">1<pos:position pos:line="67" pos:column="36"/></literal> <operator pos:line="67" pos:column="37">+<pos:position pos:line="67" pos:column="38"/></operator> <name pos:line="67" pos:column="39">l2<pos:position pos:line="67" pos:column="41"/></name> <operator pos:line="67" pos:column="42">+<pos:position pos:line="67" pos:column="43"/></operator> <literal type="number" pos:line="67" pos:column="44">1<pos:position pos:line="67" pos:column="45"/></literal></expr>;<pos:position pos:line="67" pos:column="46"/></expr_stmt>
		  <expr_stmt><expr><name pos:line="68" pos:column="19">res_ptr<pos:position pos:line="68" pos:column="26"/></name> <operator pos:line="68" pos:column="27">=<pos:position pos:line="68" pos:column="28"/></operator> <call><name pos:line="68" pos:column="29">malloc<pos:position pos:line="68" pos:column="35"/></name> <argument_list pos:line="68" pos:column="36">(<argument><expr><name pos:line="68" pos:column="37">res_size<pos:position pos:line="68" pos:column="45"/></name> <operator pos:line="68" pos:column="46">+<pos:position pos:line="68" pos:column="47"/></operator> <literal type="number" pos:line="68" pos:column="48">1<pos:position pos:line="68" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="69" pos:column="18"/></block></then>
	      <else pos:line="70" pos:column="15">else
		<block pos:line="71" pos:column="17">{
		  <expr_stmt><expr><name pos:line="72" pos:column="19">res_size<pos:position pos:line="72" pos:column="27"/></name> <operator pos:line="72" pos:column="28">+=<pos:position pos:line="72" pos:column="30"/></operator> <name pos:line="72" pos:column="31">l1<pos:position pos:line="72" pos:column="33"/></name> <operator pos:line="72" pos:column="34">+<pos:position pos:line="72" pos:column="35"/></operator> <literal type="number" pos:line="72" pos:column="36">1<pos:position pos:line="72" pos:column="37"/></literal> <operator pos:line="72" pos:column="38">+<pos:position pos:line="72" pos:column="39"/></operator> <name pos:line="72" pos:column="40">l2<pos:position pos:line="72" pos:column="42"/></name> <operator pos:line="72" pos:column="43">+<pos:position pos:line="72" pos:column="44"/></operator> <literal type="number" pos:line="72" pos:column="45">1<pos:position pos:line="72" pos:column="46"/></literal></expr>;<pos:position pos:line="72" pos:column="47"/></expr_stmt>
		  <expr_stmt><expr><name pos:line="73" pos:column="19">res_ptr<pos:position pos:line="73" pos:column="26"/></name> <operator pos:line="73" pos:column="27">=<pos:position pos:line="73" pos:column="28"/></operator> <call><name pos:line="73" pos:column="29">realloc<pos:position pos:line="73" pos:column="36"/></name> <argument_list pos:line="73" pos:column="37">(<argument><expr><name pos:line="73" pos:column="38">res_ptr<pos:position pos:line="73" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="47">res_size<pos:position pos:line="73" pos:column="55"/></name> <operator pos:line="73" pos:column="56">+<pos:position pos:line="73" pos:column="57"/></operator> <literal type="number" pos:line="73" pos:column="58">1<pos:position pos:line="73" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="61"/></expr_stmt>
		}<pos:position pos:line="74" pos:column="18"/></block></else></if>
	      <if pos:line="75" pos:column="15">if <condition pos:line="75" pos:column="18">(<expr><name pos:line="75" pos:column="19">res_ptr<pos:position pos:line="75" pos:column="26"/></name> <operator pos:line="75" pos:column="27">==<pos:position pos:line="75" pos:column="29"/></operator> <name pos:line="75" pos:column="30">NULL<pos:position pos:line="75" pos:column="34"/></name></expr>)<pos:position pos:line="75" pos:column="35"/></condition><then pos:line="75" pos:column="35">
		<block pos:line="76" pos:column="17">{
		  <comment type="block" pos:line="77" pos:column="19">/* Out of memory. */</comment>
		  <expr_stmt><expr><name pos:line="78" pos:column="19">res_size<pos:position pos:line="78" pos:column="27"/></name> <operator pos:line="78" pos:column="28">=<pos:position pos:line="78" pos:column="29"/></operator> <literal type="number" pos:line="78" pos:column="30">0<pos:position pos:line="78" pos:column="31"/></literal></expr>;<pos:position pos:line="78" pos:column="32"/></expr_stmt>
		  <break pos:line="79" pos:column="19">break;<pos:position pos:line="79" pos:column="25"/></break>
		}<pos:position pos:line="80" pos:column="18"/></block></then></if>
	      <expr_stmt><expr><call><name pos:line="81" pos:column="15">strcpy<pos:position pos:line="81" pos:column="21"/></name> <argument_list pos:line="81" pos:column="22">(<argument><expr><name pos:line="81" pos:column="23">res_ptr<pos:position pos:line="81" pos:column="30"/></name> <operator pos:line="81" pos:column="31">+<pos:position pos:line="81" pos:column="32"/></operator> <name pos:line="81" pos:column="33">res_size<pos:position pos:line="81" pos:column="41"/></name> <operator pos:line="81" pos:column="42">-<pos:position pos:line="81" pos:column="43"/></operator> <operator pos:line="81" pos:column="44">(<pos:position pos:line="81" pos:column="45"/></operator><name pos:line="81" pos:column="45">l2<pos:position pos:line="81" pos:column="47"/></name> <operator pos:line="81" pos:column="48">+<pos:position pos:line="81" pos:column="49"/></operator> <literal type="number" pos:line="81" pos:column="50">1<pos:position pos:line="81" pos:column="51"/></literal><operator pos:line="81" pos:column="51">)<pos:position pos:line="81" pos:column="52"/></operator> <operator pos:line="81" pos:column="53">-<pos:position pos:line="81" pos:column="54"/></operator> <operator pos:line="81" pos:column="55">(<pos:position pos:line="81" pos:column="56"/></operator><name pos:line="81" pos:column="56">l1<pos:position pos:line="81" pos:column="58"/></name> <operator pos:line="81" pos:column="59">+<pos:position pos:line="81" pos:column="60"/></operator> <literal type="number" pos:line="81" pos:column="61">1<pos:position pos:line="81" pos:column="62"/></literal><operator pos:line="81" pos:column="62">)<pos:position pos:line="81" pos:column="63"/></operator></expr></argument>, <argument><expr><name pos:line="81" pos:column="65">buf1<pos:position pos:line="81" pos:column="69"/></name></expr></argument>)<pos:position pos:line="81" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="71"/></expr_stmt>
	      <expr_stmt><expr><call><name pos:line="82" pos:column="15">strcpy<pos:position pos:line="82" pos:column="21"/></name> <argument_list pos:line="82" pos:column="22">(<argument><expr><name pos:line="82" pos:column="23">res_ptr<pos:position pos:line="82" pos:column="30"/></name> <operator pos:line="82" pos:column="31">+<pos:position pos:line="82" pos:column="32"/></operator> <name pos:line="82" pos:column="33">res_size<pos:position pos:line="82" pos:column="41"/></name> <operator pos:line="82" pos:column="42">-<pos:position pos:line="82" pos:column="43"/></operator> <operator pos:line="82" pos:column="44">(<pos:position pos:line="82" pos:column="45"/></operator><name pos:line="82" pos:column="45">l2<pos:position pos:line="82" pos:column="47"/></name> <operator pos:line="82" pos:column="48">+<pos:position pos:line="82" pos:column="49"/></operator> <literal type="number" pos:line="82" pos:column="50">1<pos:position pos:line="82" pos:column="51"/></literal><operator pos:line="82" pos:column="51">)<pos:position pos:line="82" pos:column="52"/></operator></expr></argument>, <argument><expr><name pos:line="82" pos:column="54">buf2<pos:position pos:line="82" pos:column="58"/></name></expr></argument>)<pos:position pos:line="82" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="60"/></expr_stmt>
	    }<pos:position pos:line="83" pos:column="14"/></block></for>
	  <expr_stmt><expr><call><name pos:line="84" pos:column="11">fclose<pos:position pos:line="84" pos:column="17"/></name> <argument_list pos:line="84" pos:column="18">(<argument><expr><name pos:line="84" pos:column="19">fp<pos:position pos:line="84" pos:column="21"/></name></expr></argument>)<pos:position pos:line="84" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="23"/></expr_stmt>
	  <if pos:line="85" pos:column="11">if <condition pos:line="85" pos:column="14">(<expr><name pos:line="85" pos:column="15">res_size<pos:position pos:line="85" pos:column="23"/></name> <operator pos:line="85" pos:column="24">==<pos:position pos:line="85" pos:column="26"/></operator> <literal type="number" pos:line="85" pos:column="27">0<pos:position pos:line="85" pos:column="28"/></literal></expr>)<pos:position pos:line="85" pos:column="29"/></condition><then pos:line="85" pos:column="29">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="86" pos:column="13">cp<pos:position pos:line="86" pos:column="15"/></name> <operator pos:line="86" pos:column="16">=<pos:position pos:line="86" pos:column="17"/></operator> <literal type="string" pos:line="86" pos:column="18">""<pos:position pos:line="86" pos:column="20"/></literal></expr>;<pos:position pos:line="86" pos:column="21"/></expr_stmt></block></then>
	  <else pos:line="87" pos:column="11">else
	    <block pos:line="88" pos:column="13">{
	      <expr_stmt><expr><operator pos:line="89" pos:column="15">*<pos:position pos:line="89" pos:column="16"/></operator><operator pos:line="89" pos:column="16">(<pos:position pos:line="89" pos:column="17"/></operator><name pos:line="89" pos:column="17">res_ptr<pos:position pos:line="89" pos:column="24"/></name> <operator pos:line="89" pos:column="25">+<pos:position pos:line="89" pos:column="26"/></operator> <name pos:line="89" pos:column="27">res_size<pos:position pos:line="89" pos:column="35"/></name><operator pos:line="89" pos:column="35">)<pos:position pos:line="89" pos:column="36"/></operator> <operator pos:line="89" pos:column="37">=<pos:position pos:line="89" pos:column="38"/></operator> <literal type="char" pos:line="89" pos:column="39">'\0'<pos:position pos:line="89" pos:column="43"/></literal></expr>;<pos:position pos:line="89" pos:column="44"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="90" pos:column="15">cp<pos:position pos:line="90" pos:column="17"/></name> <operator pos:line="90" pos:column="18">=<pos:position pos:line="90" pos:column="19"/></operator> <name pos:line="90" pos:column="20">res_ptr<pos:position pos:line="90" pos:column="27"/></name></expr>;<pos:position pos:line="90" pos:column="28"/></expr_stmt>
	    }<pos:position pos:line="91" pos:column="14"/></block></else></if>
	}<pos:position pos:line="92" pos:column="10"/></block></else></if>

      <if pos:line="94" pos:column="7">if <condition pos:line="94" pos:column="10">(<expr><name pos:line="94" pos:column="11">file_name<pos:position pos:line="94" pos:column="20"/></name> <operator pos:line="94" pos:column="21">!=<pos:position pos:line="94" pos:column="23"/></operator> <name pos:line="94" pos:column="24">NULL<pos:position pos:line="94" pos:column="28"/></name></expr>)<pos:position pos:line="94" pos:column="29"/></condition><then pos:line="94" pos:column="29">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="95" pos:column="9">free<pos:position pos:line="95" pos:column="13"/></name> <argument_list pos:line="95" pos:column="14">(<argument><expr><name pos:line="95" pos:column="15">file_name<pos:position pos:line="95" pos:column="24"/></name></expr></argument>)<pos:position pos:line="95" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="26"/></expr_stmt></block></then></if>

<cpp:else pos:line="97" pos:column="1">#<cpp:directive pos:line="97" pos:column="2">else<pos:position pos:line="97" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="97" pos:column="7">/* WIN32 */</comment>

      <comment type="block" pos:line="99" pos:column="7">/* To avoid the troubles of installing a separate file in the same
	 directory as the DLL and of retrieving the DLL's directory at
	 runtime, simply inline the aliases here.  */</comment>

      <expr_stmt><expr><name pos:line="103" pos:column="7">cp<pos:position pos:line="103" pos:column="9"/></name> <operator pos:line="103" pos:column="10">=<pos:position pos:line="103" pos:column="11"/></operator> <literal type="string" pos:line="103" pos:column="12">"CP936"<pos:position pos:line="103" pos:column="19"/></literal> <literal type="string" pos:line="103" pos:column="20">"\0"<pos:position pos:line="103" pos:column="24"/></literal> <literal type="string" pos:line="103" pos:column="25">"GBK"<pos:position pos:line="103" pos:column="30"/></literal> <literal type="string" pos:line="103" pos:column="31">"\0"<pos:position pos:line="103" pos:column="35"/></literal>
	   <literal type="string" pos:line="104" pos:column="12">"CP1361"<pos:position pos:line="104" pos:column="20"/></literal> <literal type="string" pos:line="104" pos:column="21">"\0"<pos:position pos:line="104" pos:column="25"/></literal> <literal type="string" pos:line="104" pos:column="26">"JOHAB"<pos:position pos:line="104" pos:column="33"/></literal> <literal type="string" pos:line="104" pos:column="34">"\0"<pos:position pos:line="104" pos:column="38"/></literal></expr>;<pos:position pos:line="104" pos:column="39"/></expr_stmt>
<cpp:endif pos:line="105" pos:column="1">#<cpp:directive pos:line="105" pos:column="2">endif<pos:position pos:line="105" pos:column="7"/></cpp:directive></cpp:endif>

      <expr_stmt><expr><name pos:line="107" pos:column="7">charset_aliases<pos:position pos:line="107" pos:column="22"/></name> <operator pos:line="107" pos:column="23">=<pos:position pos:line="107" pos:column="24"/></operator> <name pos:line="107" pos:column="25">cp<pos:position pos:line="107" pos:column="27"/></name></expr>;<pos:position pos:line="107" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="108" pos:column="6"/></block></then></if>

  <return pos:line="110" pos:column="3">return <expr><name pos:line="110" pos:column="10">cp<pos:position pos:line="110" pos:column="12"/></name></expr>;<pos:position pos:line="110" pos:column="13"/></return>
}<pos:position pos:line="111" pos:column="2"/></block></function></unit>
