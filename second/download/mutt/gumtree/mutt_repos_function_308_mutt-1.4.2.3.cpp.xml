<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_308_mutt-1.4.2.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">LIST<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">mutt_parse_references<pos:position pos:line="1" pos:column="35"/></name> <parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">s<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">int<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">in_reply_to<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">LIST<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">t<pos:position pos:line="3" pos:column="10"/></name></decl>, <modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="13">lst<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><name pos:line="3" pos:column="19">NULL<pos:position pos:line="3" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">m<pos:position pos:line="4" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="10">n<pos:position pos:line="4" pos:column="11"/></name> <init pos:line="4" pos:column="12">= <expr><literal type="number" pos:line="4" pos:column="14">0<pos:position pos:line="4" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">o<pos:position pos:line="5" pos:column="10"/></name> <init pos:line="5" pos:column="11">= <expr><name pos:line="5" pos:column="13">NULL<pos:position pos:line="5" pos:column="17"/></name></expr></init></decl>, <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier>new, <modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="26">at<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>

  <while pos:line="7" pos:column="3">while <condition pos:line="7" pos:column="9">(<expr><operator pos:line="7" pos:column="10">(<pos:position pos:line="7" pos:column="11"/></operator><name pos:line="7" pos:column="11">s<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <call><name pos:line="7" pos:column="15">strtok<pos:position pos:line="7" pos:column="21"/></name> <argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">s<pos:position pos:line="7" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="26">" \t;"<pos:position pos:line="7" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call><operator pos:line="7" pos:column="33">)<pos:position pos:line="7" pos:column="34"/></operator> <operator pos:line="7" pos:column="35">!=<pos:position pos:line="7" pos:column="37"/></operator> <name pos:line="7" pos:column="38">NULL<pos:position pos:line="7" pos:column="42"/></name></expr>)<pos:position pos:line="7" pos:column="43"/></condition>
  <block pos:line="8" pos:column="3">{
    <comment type="block" pos:line="9" pos:column="5">/*
     * some mail clients add other garbage besides message-ids, so do a quick
     * check to make sure this looks like a valid message-id
     * some idiotic clients also break their message-ids between lines, deal
     * with that too (give up if it's more than two lines, though)
     */</comment>
    <expr_stmt><expr><name pos:line="15" pos:column="5">t<pos:position pos:line="15" pos:column="6"/></name> <operator pos:line="15" pos:column="7">=<pos:position pos:line="15" pos:column="8"/></operator> <name pos:line="15" pos:column="9">NULL<pos:position pos:line="15" pos:column="13"/></name></expr>;<pos:position pos:line="15" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="16" pos:column="5">new<pos:position pos:line="16" pos:column="8"/></operator> <operator pos:line="16" pos:column="9">=<pos:position pos:line="16" pos:column="10"/></operator> <name pos:line="16" pos:column="11">NULL<pos:position pos:line="16" pos:column="15"/></name></expr>;<pos:position pos:line="16" pos:column="16"/></expr_stmt>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">*<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">s<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">==<pos:position pos:line="18" pos:column="14"/></operator> <literal type="char" pos:line="18" pos:column="15">'&lt;'<pos:position pos:line="18" pos:column="21"/></literal></expr>)<pos:position pos:line="18" pos:column="19"/></condition><then pos:line="18" pos:column="19">
    <block pos:line="19" pos:column="5">{
      <expr_stmt><expr><name pos:line="20" pos:column="7">n<pos:position pos:line="20" pos:column="8"/></name> <operator pos:line="20" pos:column="9">=<pos:position pos:line="20" pos:column="10"/></operator> <call><name pos:line="20" pos:column="11">strlen<pos:position pos:line="20" pos:column="17"/></name> <argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">s<pos:position pos:line="20" pos:column="20"/></name></expr></argument>)<pos:position pos:line="20" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="22"/></expr_stmt>
      <if pos:line="21" pos:column="7">if <condition pos:line="21" pos:column="10">(<expr><name><name pos:line="21" pos:column="11">s<pos:position pos:line="21" pos:column="12"/></name><index pos:line="21" pos:column="12">[<expr><name pos:line="21" pos:column="13">n<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-<pos:position pos:line="21" pos:column="15"/></operator><literal type="number" pos:line="21" pos:column="15">1<pos:position pos:line="21" pos:column="16"/></literal></expr>]<pos:position pos:line="21" pos:column="17"/></index></name> <operator pos:line="21" pos:column="18">!=<pos:position pos:line="21" pos:column="20"/></operator> <literal type="char" pos:line="21" pos:column="21">'&gt;'<pos:position pos:line="21" pos:column="27"/></literal></expr>)<pos:position pos:line="21" pos:column="25"/></condition><then pos:line="21" pos:column="25">
      <block pos:line="22" pos:column="7">{
	<expr_stmt><expr><name pos:line="23" pos:column="9">o<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <name pos:line="23" pos:column="13">s<pos:position pos:line="23" pos:column="14"/></name></expr>;<pos:position pos:line="23" pos:column="15"/></expr_stmt>
	<expr_stmt><expr><name pos:line="24" pos:column="9">s<pos:position pos:line="24" pos:column="10"/></name> <operator pos:line="24" pos:column="11">=<pos:position pos:line="24" pos:column="12"/></operator> <name pos:line="24" pos:column="13">NULL<pos:position pos:line="24" pos:column="17"/></name></expr>;<pos:position pos:line="24" pos:column="18"/></expr_stmt>
	<continue pos:line="25" pos:column="9">continue;<pos:position pos:line="25" pos:column="18"/></continue>
      }<pos:position pos:line="26" pos:column="8"/></block></then></if>

      <expr_stmt><expr><operator pos:line="28" pos:column="7">new<pos:position pos:line="28" pos:column="10"/></operator> <operator pos:line="28" pos:column="11">=<pos:position pos:line="28" pos:column="12"/></operator> <call><name pos:line="28" pos:column="13">safe_strdup<pos:position pos:line="28" pos:column="24"/></name> <argument_list pos:line="28" pos:column="25">(<argument><expr><name pos:line="28" pos:column="26">s<pos:position pos:line="28" pos:column="27"/></name></expr></argument>)<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then>
    <elseif pos:line="30" pos:column="5">else <if pos:line="30" pos:column="10">if <condition pos:line="30" pos:column="13">(<expr><name pos:line="30" pos:column="14">o<pos:position pos:line="30" pos:column="15"/></name></expr>)<pos:position pos:line="30" pos:column="16"/></condition><then pos:line="30" pos:column="16">
    <block pos:line="31" pos:column="5">{
      <expr_stmt><expr><name pos:line="32" pos:column="7">m<pos:position pos:line="32" pos:column="8"/></name> <operator pos:line="32" pos:column="9">=<pos:position pos:line="32" pos:column="10"/></operator> <call><name pos:line="32" pos:column="11">strlen<pos:position pos:line="32" pos:column="17"/></name> <argument_list pos:line="32" pos:column="18">(<argument><expr><name pos:line="32" pos:column="19">s<pos:position pos:line="32" pos:column="20"/></name></expr></argument>)<pos:position pos:line="32" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="22"/></expr_stmt>
      <if pos:line="33" pos:column="7">if <condition pos:line="33" pos:column="10">(<expr><name><name pos:line="33" pos:column="11">s<pos:position pos:line="33" pos:column="12"/></name><index pos:line="33" pos:column="12">[<expr><name pos:line="33" pos:column="13">m<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">-<pos:position pos:line="33" pos:column="16"/></operator> <literal type="number" pos:line="33" pos:column="17">1<pos:position pos:line="33" pos:column="18"/></literal></expr>]<pos:position pos:line="33" pos:column="19"/></index></name> <operator pos:line="33" pos:column="20">==<pos:position pos:line="33" pos:column="22"/></operator> <literal type="char" pos:line="33" pos:column="23">'&gt;'<pos:position pos:line="33" pos:column="29"/></literal></expr>)<pos:position pos:line="33" pos:column="27"/></condition><then pos:line="33" pos:column="27">
      <block pos:line="34" pos:column="7">{
	<expr_stmt><expr><operator pos:line="35" pos:column="9">new<pos:position pos:line="35" pos:column="12"/></operator> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <call><name pos:line="35" pos:column="15">safe_malloc<pos:position pos:line="35" pos:column="26"/></name> <argument_list pos:line="35" pos:column="27">(<argument><expr><sizeof pos:line="35" pos:column="28">sizeof <argument_list pos:line="35" pos:column="35">(<argument><expr><name pos:line="35" pos:column="36">char<pos:position pos:line="35" pos:column="40"/></name></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></sizeof> <operator pos:line="35" pos:column="42">*<pos:position pos:line="35" pos:column="43"/></operator> <operator pos:line="35" pos:column="44">(<pos:position pos:line="35" pos:column="45"/></operator><name pos:line="35" pos:column="45">n<pos:position pos:line="35" pos:column="46"/></name> <operator pos:line="35" pos:column="47">+<pos:position pos:line="35" pos:column="48"/></operator> <name pos:line="35" pos:column="49">m<pos:position pos:line="35" pos:column="50"/></name> <operator pos:line="35" pos:column="51">+<pos:position pos:line="35" pos:column="52"/></operator> <literal type="number" pos:line="35" pos:column="53">1<pos:position pos:line="35" pos:column="54"/></literal><operator pos:line="35" pos:column="54">)<pos:position pos:line="35" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="35" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="57"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">strcpy<pos:position pos:line="36" pos:column="15"/></name> <argument_list pos:line="36" pos:column="16">(<argument><expr><operator pos:line="36" pos:column="17">new<pos:position pos:line="36" pos:column="20"/></operator></expr></argument>, <argument><expr><name pos:line="36" pos:column="22">o<pos:position pos:line="36" pos:column="23"/></name></expr></argument>)<pos:position pos:line="36" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="25"/></expr_stmt>	<comment type="block" pos:line="36" pos:column="33">/* __STRCPY_CHECKED__ */</comment>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">strcpy<pos:position pos:line="37" pos:column="15"/></name> <argument_list pos:line="37" pos:column="16">(<argument><expr><operator pos:line="37" pos:column="17">new<pos:position pos:line="37" pos:column="20"/></operator> <operator pos:line="37" pos:column="21">+<pos:position pos:line="37" pos:column="22"/></operator> <name pos:line="37" pos:column="23">n<pos:position pos:line="37" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="26">s<pos:position pos:line="37" pos:column="27"/></name></expr></argument>)<pos:position pos:line="37" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="29"/></expr_stmt>	<comment type="block" pos:line="37" pos:column="33">/* __STRCPY_CHECKED__ */</comment>
      }<pos:position pos:line="38" pos:column="8"/></block></then></if>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if></elseif></if>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><operator pos:line="40" pos:column="9">new<pos:position pos:line="40" pos:column="12"/></operator></expr>)<pos:position pos:line="40" pos:column="13"/></condition><then pos:line="40" pos:column="13">
    <block pos:line="41" pos:column="5">{
      <comment type="block" pos:line="42" pos:column="7">/* make sure that this really does look like a message-id.
       * it should have exactly one @, and if we're looking at
       * an in-reply-to header, make sure that the part before
       * the @ has more than eight characters or it's probably
       * an email address
       */</comment>
      <if pos:line="48" pos:column="7">if <condition pos:line="48" pos:column="10">(<expr><operator pos:line="48" pos:column="11">!<pos:position pos:line="48" pos:column="12"/></operator><operator pos:line="48" pos:column="12">(<pos:position pos:line="48" pos:column="13"/></operator><name pos:line="48" pos:column="13">at<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">=<pos:position pos:line="48" pos:column="17"/></operator> <call><name pos:line="48" pos:column="18">strchr<pos:position pos:line="48" pos:column="24"/></name> <argument_list pos:line="48" pos:column="25">(<argument><expr><operator pos:line="48" pos:column="26">new<pos:position pos:line="48" pos:column="29"/></operator></expr></argument>, <argument><expr><literal type="char" pos:line="48" pos:column="31">'@'<pos:position pos:line="48" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="35"/></argument_list></call><operator pos:line="48" pos:column="35">)<pos:position pos:line="48" pos:column="36"/></operator> <operator pos:line="48" pos:column="37">||<pos:position pos:line="48" pos:column="39"/></operator> <call><name pos:line="48" pos:column="40">strchr<pos:position pos:line="48" pos:column="46"/></name> <argument_list pos:line="48" pos:column="47">(<argument><expr><name pos:line="48" pos:column="48">at<pos:position pos:line="48" pos:column="50"/></name> <operator pos:line="48" pos:column="51">+<pos:position pos:line="48" pos:column="52"/></operator> <literal type="number" pos:line="48" pos:column="53">1<pos:position pos:line="48" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="48" pos:column="56">'@'<pos:position pos:line="48" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="60"/></argument_list></call>
	  <operator pos:line="49" pos:column="11">||<pos:position pos:line="49" pos:column="13"/></operator> <operator pos:line="49" pos:column="14">(<pos:position pos:line="49" pos:column="15"/></operator><name pos:line="49" pos:column="15">in_reply_to<pos:position pos:line="49" pos:column="26"/></name> <operator pos:line="49" pos:column="27">&amp;&amp;<pos:position pos:line="49" pos:column="37"/></operator> <name pos:line="49" pos:column="30">at<pos:position pos:line="49" pos:column="32"/></name> <operator pos:line="49" pos:column="33">-<pos:position pos:line="49" pos:column="34"/></operator> <operator pos:line="49" pos:column="35">new<pos:position pos:line="49" pos:column="38"/></operator> <operator pos:line="49" pos:column="39">&lt;=<pos:position pos:line="49" pos:column="44"/></operator> <literal type="number" pos:line="49" pos:column="42">8<pos:position pos:line="49" pos:column="43"/></literal><operator pos:line="49" pos:column="43">)<pos:position pos:line="49" pos:column="44"/></operator></expr>)<pos:position pos:line="49" pos:column="45"/></condition><then pos:line="49" pos:column="45">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="9">safe_free<pos:position pos:line="50" pos:column="18"/></name> <argument_list pos:line="50" pos:column="19">(<argument><expr><operator pos:line="50" pos:column="20">(<pos:position pos:line="50" pos:column="21"/></operator><name pos:line="50" pos:column="21">void<pos:position pos:line="50" pos:column="25"/></name> <operator pos:line="50" pos:column="26">*<pos:position pos:line="50" pos:column="27"/></operator><operator pos:line="50" pos:column="27">*<pos:position pos:line="50" pos:column="28"/></operator><operator pos:line="50" pos:column="28">)<pos:position pos:line="50" pos:column="29"/></operator> <operator pos:line="50" pos:column="30">&amp;<pos:position pos:line="50" pos:column="35"/></operator><operator pos:line="50" pos:column="31">new<pos:position pos:line="50" pos:column="34"/></operator></expr></argument>)<pos:position pos:line="50" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="36"/></expr_stmt></block></then>
      <else pos:line="51" pos:column="7">else
      <block pos:line="52" pos:column="7">{
	<expr_stmt><expr><name pos:line="53" pos:column="9">t<pos:position pos:line="53" pos:column="10"/></name> <operator pos:line="53" pos:column="11">=<pos:position pos:line="53" pos:column="12"/></operator> <operator pos:line="53" pos:column="13">(<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="14">LIST<pos:position pos:line="53" pos:column="18"/></name> <operator pos:line="53" pos:column="19">*<pos:position pos:line="53" pos:column="20"/></operator><operator pos:line="53" pos:column="20">)<pos:position pos:line="53" pos:column="21"/></operator> <call><name pos:line="53" pos:column="22">safe_malloc<pos:position pos:line="53" pos:column="33"/></name> <argument_list pos:line="53" pos:column="34">(<argument><expr><sizeof pos:line="53" pos:column="35">sizeof <argument_list pos:line="53" pos:column="42">(<argument><expr><name pos:line="53" pos:column="43">LIST<pos:position pos:line="53" pos:column="47"/></name></expr></argument>)<pos:position pos:line="53" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="54" pos:column="9">t<pos:position pos:line="54" pos:column="10"/></name><operator pos:line="54" pos:column="10">-&gt;<pos:position pos:line="54" pos:column="15"/></operator><name pos:line="54" pos:column="12">data<pos:position pos:line="54" pos:column="16"/></name></name> <operator pos:line="54" pos:column="17">=<pos:position pos:line="54" pos:column="18"/></operator> <operator pos:line="54" pos:column="19">new<pos:position pos:line="54" pos:column="22"/></operator></expr>;<pos:position pos:line="54" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="55" pos:column="9">t<pos:position pos:line="55" pos:column="10"/></name><operator pos:line="55" pos:column="10">-&gt;<pos:position pos:line="55" pos:column="15"/></operator><name pos:line="55" pos:column="12">next<pos:position pos:line="55" pos:column="16"/></name></name> <operator pos:line="55" pos:column="17">=<pos:position pos:line="55" pos:column="18"/></operator> <name pos:line="55" pos:column="19">lst<pos:position pos:line="55" pos:column="22"/></name></expr>;<pos:position pos:line="55" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><name pos:line="56" pos:column="9">lst<pos:position pos:line="56" pos:column="12"/></name> <operator pos:line="56" pos:column="13">=<pos:position pos:line="56" pos:column="14"/></operator> <name pos:line="56" pos:column="15">t<pos:position pos:line="56" pos:column="16"/></name></expr>;<pos:position pos:line="56" pos:column="17"/></expr_stmt>
      }<pos:position pos:line="57" pos:column="8"/></block></else></if>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="59" pos:column="5">o<pos:position pos:line="59" pos:column="6"/></name> <operator pos:line="59" pos:column="7">=<pos:position pos:line="59" pos:column="8"/></operator> <name pos:line="59" pos:column="9">NULL<pos:position pos:line="59" pos:column="13"/></name></expr>;<pos:position pos:line="59" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><name pos:line="60" pos:column="5">s<pos:position pos:line="60" pos:column="6"/></name> <operator pos:line="60" pos:column="7">=<pos:position pos:line="60" pos:column="8"/></operator> <name pos:line="60" pos:column="9">NULL<pos:position pos:line="60" pos:column="13"/></name></expr>;<pos:position pos:line="60" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="61" pos:column="4"/></block></while>

  <return pos:line="63" pos:column="3">return <expr><operator pos:line="63" pos:column="10">(<pos:position pos:line="63" pos:column="11"/></operator><name pos:line="63" pos:column="11">lst<pos:position pos:line="63" pos:column="14"/></name><operator pos:line="63" pos:column="14">)<pos:position pos:line="63" pos:column="15"/></operator></expr>;<pos:position pos:line="63" pos:column="16"/></return>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
