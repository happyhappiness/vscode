<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1179_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">rfc3676_handler<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">BODY<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type> <name pos:line="1" pos:column="29">a<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">STATE<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type> <name pos:line="1" pos:column="40">s<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">buf<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><name pos:line="3" pos:column="15">NULL<pos:position pos:line="3" pos:column="19"/></name></expr></init></decl>, <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="22">t<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><name pos:line="3" pos:column="26">NULL<pos:position pos:line="3" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">int<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">quotelevel<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><literal type="number" pos:line="4" pos:column="29">0<pos:position pos:line="4" pos:column="30"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="32">newql<pos:position pos:line="4" pos:column="37"/></name> <init pos:line="4" pos:column="38">= <expr><literal type="number" pos:line="4" pos:column="40">0<pos:position pos:line="4" pos:column="41"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="43">sigsep<pos:position pos:line="4" pos:column="49"/></name> <init pos:line="4" pos:column="50">= <expr><literal type="number" pos:line="4" pos:column="52">0<pos:position pos:line="4" pos:column="53"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="54"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">buf_off<pos:position pos:line="5" pos:column="14"/></name> <init pos:line="5" pos:column="15">= <expr><literal type="number" pos:line="5" pos:column="17">0<pos:position pos:line="5" pos:column="18"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="20">delsp<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><literal type="number" pos:line="5" pos:column="28">0<pos:position pos:line="5" pos:column="29"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="31">fixed<pos:position pos:line="5" pos:column="36"/></name> <init pos:line="5" pos:column="37">= <expr><literal type="number" pos:line="5" pos:column="39">0<pos:position pos:line="5" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">buf_len<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><literal type="number" pos:line="6" pos:column="20">0<pos:position pos:line="6" pos:column="21"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="23">sz<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><literal type="number" pos:line="6" pos:column="28">0<pos:position pos:line="6" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">flowed_state_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">fst<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">memset<pos:position pos:line="9" pos:column="9"/></name> <argument_list pos:line="9" pos:column="10">(<argument><expr><operator pos:line="9" pos:column="11">&amp;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="12">fst<pos:position pos:line="9" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="17">0<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="20">sizeof <argument_list pos:line="9" pos:column="27">(<argument><expr><name pos:line="9" pos:column="28">fst<pos:position pos:line="9" pos:column="31"/></name></expr></argument>)<pos:position pos:line="9" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="34"/></expr_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* respect DelSp of RfC3676 only with f=f parts */</comment>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><operator pos:line="12" pos:column="7">(<pos:position pos:line="12" pos:column="8"/></operator><name pos:line="12" pos:column="8">t<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">=<pos:position pos:line="12" pos:column="11"/></operator> <operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="13">char<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">*<pos:position pos:line="12" pos:column="19"/></operator><operator pos:line="12" pos:column="19">)<pos:position pos:line="12" pos:column="20"/></operator> <call><name pos:line="12" pos:column="21">mutt_get_parameter<pos:position pos:line="12" pos:column="39"/></name> <argument_list pos:line="12" pos:column="40">(<argument><expr><literal type="string" pos:line="12" pos:column="41">"delsp"<pos:position pos:line="12" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="50">a<pos:position pos:line="12" pos:column="51"/></name><operator pos:line="12" pos:column="51">-&gt;<pos:position pos:line="12" pos:column="56"/></operator><name pos:line="12" pos:column="53">parameter<pos:position pos:line="12" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></call><operator pos:line="12" pos:column="63">)<pos:position pos:line="12" pos:column="64"/></operator></expr>)<pos:position pos:line="12" pos:column="65"/></condition><then pos:line="12" pos:column="65">
  <block pos:line="13" pos:column="3">{
    <expr_stmt><expr><name pos:line="14" pos:column="5">delsp<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <call><name pos:line="14" pos:column="13">mutt_strlen<pos:position pos:line="14" pos:column="24"/></name> <argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">t<pos:position pos:line="14" pos:column="27"/></name></expr></argument>)<pos:position pos:line="14" pos:column="28"/></argument_list></call> <operator pos:line="14" pos:column="29">==<pos:position pos:line="14" pos:column="31"/></operator> <literal type="number" pos:line="14" pos:column="32">3<pos:position pos:line="14" pos:column="33"/></literal> <operator pos:line="14" pos:column="34">&amp;&amp;<pos:position pos:line="14" pos:column="44"/></operator> <call><name pos:line="14" pos:column="37">ascii_strncasecmp<pos:position pos:line="14" pos:column="54"/></name> <argument_list pos:line="14" pos:column="55">(<argument><expr><name pos:line="14" pos:column="56">t<pos:position pos:line="14" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="59">"yes"<pos:position pos:line="14" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="66">3<pos:position pos:line="14" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="68"/></argument_list></call> <operator pos:line="14" pos:column="69">==<pos:position pos:line="14" pos:column="71"/></operator> <literal type="number" pos:line="14" pos:column="72">0<pos:position pos:line="14" pos:column="73"/></literal></expr>;<pos:position pos:line="14" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">t<pos:position pos:line="15" pos:column="6"/></name> <operator pos:line="15" pos:column="7">=<pos:position pos:line="15" pos:column="8"/></operator> <name pos:line="15" pos:column="9">NULL<pos:position pos:line="15" pos:column="13"/></name></expr>;<pos:position pos:line="15" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">fst<pos:position pos:line="16" pos:column="8"/></name><operator pos:line="16" pos:column="8">.<pos:position pos:line="16" pos:column="9"/></operator><name pos:line="16" pos:column="9">delsp<pos:position pos:line="16" pos:column="14"/></name></name> <operator pos:line="16" pos:column="15">=<pos:position pos:line="16" pos:column="16"/></operator> <literal type="number" pos:line="16" pos:column="17">1<pos:position pos:line="16" pos:column="18"/></literal></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">dprint<pos:position pos:line="19" pos:column="9"/></name> <argument_list pos:line="19" pos:column="10">(<argument><expr><literal type="number" pos:line="19" pos:column="11">4<pos:position pos:line="19" pos:column="12"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="14">(<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">debugfile<pos:position pos:line="19" pos:column="24"/></name><operator pos:line="19" pos:column="24">,<pos:position pos:line="19" pos:column="25"/></operator> <literal type="string" pos:line="19" pos:column="26">"f=f: DelSp: %s\n"<pos:position pos:line="19" pos:column="44"/></literal><operator pos:line="19" pos:column="44">,<pos:position pos:line="19" pos:column="45"/></operator> <ternary><condition><expr><name pos:line="19" pos:column="46">delsp<pos:position pos:line="19" pos:column="51"/></name></expr> ?<pos:position pos:line="19" pos:column="53"/></condition><then pos:line="19" pos:column="53"> <expr><literal type="string" pos:line="19" pos:column="54">"yes"<pos:position pos:line="19" pos:column="59"/></literal></expr> <pos:position pos:line="19" pos:column="60"/></then><else pos:line="19" pos:column="60">: <expr><literal type="string" pos:line="19" pos:column="62">"no"<pos:position pos:line="19" pos:column="66"/></literal></expr></else></ternary><operator pos:line="19" pos:column="66">)<pos:position pos:line="19" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="19" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="69"/></expr_stmt>

  <while pos:line="21" pos:column="3">while <condition pos:line="21" pos:column="9">(<expr><operator pos:line="21" pos:column="10">(<pos:position pos:line="21" pos:column="11"/></operator><name pos:line="21" pos:column="11">buf<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <call><name pos:line="21" pos:column="17">mutt_read_line<pos:position pos:line="21" pos:column="31"/></name> <argument_list pos:line="21" pos:column="32">(<argument><expr><name pos:line="21" pos:column="33">buf<pos:position pos:line="21" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="38">&amp;<pos:position pos:line="21" pos:column="43"/></operator><name pos:line="21" pos:column="39">sz<pos:position pos:line="21" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="43">s<pos:position pos:line="21" pos:column="44"/></name><operator pos:line="21" pos:column="44">-&gt;<pos:position pos:line="21" pos:column="49"/></operator><name pos:line="21" pos:column="46">fpin<pos:position pos:line="21" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="52">NULL<pos:position pos:line="21" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="58">0<pos:position pos:line="21" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></call><operator pos:line="21" pos:column="60">)<pos:position pos:line="21" pos:column="61"/></operator></expr>)<pos:position pos:line="21" pos:column="62"/></condition>
  <block pos:line="22" pos:column="3">{
    <expr_stmt><expr><name pos:line="23" pos:column="5">buf_len<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <call><name pos:line="23" pos:column="15">mutt_strlen<pos:position pos:line="23" pos:column="26"/></name> <argument_list pos:line="23" pos:column="27">(<argument><expr><name pos:line="23" pos:column="28">buf<pos:position pos:line="23" pos:column="31"/></name></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="24" pos:column="5">newql<pos:position pos:line="24" pos:column="10"/></name> <operator pos:line="24" pos:column="11">=<pos:position pos:line="24" pos:column="12"/></operator> <call><name pos:line="24" pos:column="13">get_quote_level<pos:position pos:line="24" pos:column="28"/></name> <argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">buf<pos:position pos:line="24" pos:column="33"/></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt>

    <comment type="block" pos:line="26" pos:column="5">/* end flowed paragraph (if we're within one) if quoting level
     * changes (should not but can happen, see RFC 3676, sec. 4.5.)
     */</comment>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">newql<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">!=<pos:position pos:line="29" pos:column="17"/></operator> <name pos:line="29" pos:column="18">quotelevel<pos:position pos:line="29" pos:column="28"/></name></expr>)<pos:position pos:line="29" pos:column="29"/></condition><then pos:line="29" pos:column="29">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="7">flush_par<pos:position pos:line="30" pos:column="16"/></name> <argument_list pos:line="30" pos:column="17">(<argument><expr><name pos:line="30" pos:column="18">s<pos:position pos:line="30" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="21">&amp;<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="22">fst<pos:position pos:line="30" pos:column="25"/></name></expr></argument>)<pos:position pos:line="30" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="27"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="32" pos:column="5">quotelevel<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator> <name pos:line="32" pos:column="18">newql<pos:position pos:line="32" pos:column="23"/></name></expr>;<pos:position pos:line="32" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="33" pos:column="5">buf_off<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <name pos:line="33" pos:column="15">newql<pos:position pos:line="33" pos:column="20"/></name></expr>;<pos:position pos:line="33" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="35" pos:column="5">/* respect sender's space-stuffing by removing one leading space */</comment>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name><name pos:line="36" pos:column="9">buf<pos:position pos:line="36" pos:column="12"/></name><index pos:line="36" pos:column="12">[<expr><name pos:line="36" pos:column="13">buf_off<pos:position pos:line="36" pos:column="20"/></name></expr>]<pos:position pos:line="36" pos:column="21"/></index></name> <operator pos:line="36" pos:column="22">==<pos:position pos:line="36" pos:column="24"/></operator> <literal type="char" pos:line="36" pos:column="25">' '<pos:position pos:line="36" pos:column="28"/></literal></expr>)<pos:position pos:line="36" pos:column="29"/></condition><then pos:line="36" pos:column="29">
      <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="7">buf_off<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">++<pos:position pos:line="37" pos:column="16"/></operator></expr>;<pos:position pos:line="37" pos:column="17"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="39" pos:column="5">/* test for signature separator */</comment>
    <expr_stmt><expr><name pos:line="40" pos:column="5">sigsep<pos:position pos:line="40" pos:column="11"/></name> <operator pos:line="40" pos:column="12">=<pos:position pos:line="40" pos:column="13"/></operator> <call><name pos:line="40" pos:column="14">ascii_strcmp<pos:position pos:line="40" pos:column="26"/></name> <argument_list pos:line="40" pos:column="27">(<argument><expr><name pos:line="40" pos:column="28">buf<pos:position pos:line="40" pos:column="31"/></name> <operator pos:line="40" pos:column="32">+<pos:position pos:line="40" pos:column="33"/></operator> <name pos:line="40" pos:column="34">buf_off<pos:position pos:line="40" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="43">"-- "<pos:position pos:line="40" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="49"/></argument_list></call> <operator pos:line="40" pos:column="50">==<pos:position pos:line="40" pos:column="52"/></operator> <literal type="number" pos:line="40" pos:column="53">0<pos:position pos:line="40" pos:column="54"/></literal></expr>;<pos:position pos:line="40" pos:column="55"/></expr_stmt>

    <comment type="block" pos:line="42" pos:column="5">/* a fixed line either has no trailing space or is the
     * signature separator */</comment>
    <expr_stmt><expr><name pos:line="44" pos:column="5">fixed<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">=<pos:position pos:line="44" pos:column="12"/></operator> <name pos:line="44" pos:column="13">buf_len<pos:position pos:line="44" pos:column="20"/></name> <operator pos:line="44" pos:column="21">==<pos:position pos:line="44" pos:column="23"/></operator> <name pos:line="44" pos:column="24">buf_off<pos:position pos:line="44" pos:column="31"/></name> <operator pos:line="44" pos:column="32">||<pos:position pos:line="44" pos:column="34"/></operator> <name><name pos:line="44" pos:column="35">buf<pos:position pos:line="44" pos:column="38"/></name><index pos:line="44" pos:column="38">[<expr><name pos:line="44" pos:column="39">buf_len<pos:position pos:line="44" pos:column="46"/></name> <operator pos:line="44" pos:column="47">-<pos:position pos:line="44" pos:column="48"/></operator> <literal type="number" pos:line="44" pos:column="49">1<pos:position pos:line="44" pos:column="50"/></literal></expr>]<pos:position pos:line="44" pos:column="51"/></index></name> <operator pos:line="44" pos:column="52">!=<pos:position pos:line="44" pos:column="54"/></operator> <literal type="char" pos:line="44" pos:column="55">' '<pos:position pos:line="44" pos:column="58"/></literal> <operator pos:line="44" pos:column="59">||<pos:position pos:line="44" pos:column="61"/></operator> <name pos:line="44" pos:column="62">sigsep<pos:position pos:line="44" pos:column="68"/></name></expr>;<pos:position pos:line="44" pos:column="69"/></expr_stmt>

    <comment type="block" pos:line="46" pos:column="5">/* print fixed-and-standalone, fixed-and-empty and sigsep lines as
     * fixed lines */</comment>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><operator pos:line="48" pos:column="9">(<pos:position pos:line="48" pos:column="10"/></operator><name pos:line="48" pos:column="10">fixed<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">&amp;&amp;<pos:position pos:line="48" pos:column="26"/></operator> <operator pos:line="48" pos:column="19">(<pos:position pos:line="48" pos:column="20"/></operator><operator pos:line="48" pos:column="20">!<pos:position pos:line="48" pos:column="21"/></operator><name><name pos:line="48" pos:column="21">fst<pos:position pos:line="48" pos:column="24"/></name><operator pos:line="48" pos:column="24">.<pos:position pos:line="48" pos:column="25"/></operator><name pos:line="48" pos:column="25">width<pos:position pos:line="48" pos:column="30"/></name></name> <operator pos:line="48" pos:column="31">||<pos:position pos:line="48" pos:column="33"/></operator> <operator pos:line="48" pos:column="34">!<pos:position pos:line="48" pos:column="35"/></operator><name pos:line="48" pos:column="35">buf_len<pos:position pos:line="48" pos:column="42"/></name><operator pos:line="48" pos:column="42">)<pos:position pos:line="48" pos:column="43"/></operator><operator pos:line="48" pos:column="43">)<pos:position pos:line="48" pos:column="44"/></operator> <operator pos:line="48" pos:column="45">||<pos:position pos:line="48" pos:column="47"/></operator> <name pos:line="48" pos:column="48">sigsep<pos:position pos:line="48" pos:column="54"/></name></expr>)<pos:position pos:line="48" pos:column="55"/></condition><then pos:line="48" pos:column="55">
    <block pos:line="49" pos:column="5">{
      <comment type="block" pos:line="50" pos:column="7">/* if we're within a flowed paragraph, terminate it */</comment>
      <expr_stmt><expr><call><name pos:line="51" pos:column="7">flush_par<pos:position pos:line="51" pos:column="16"/></name> <argument_list pos:line="51" pos:column="17">(<argument><expr><name pos:line="51" pos:column="18">s<pos:position pos:line="51" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="21">&amp;<pos:position pos:line="51" pos:column="26"/></operator><name pos:line="51" pos:column="22">fst<pos:position pos:line="51" pos:column="25"/></name></expr></argument>)<pos:position pos:line="51" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">print_fixed_line<pos:position pos:line="52" pos:column="23"/></name> <argument_list pos:line="52" pos:column="24">(<argument><expr><name pos:line="52" pos:column="25">buf<pos:position pos:line="52" pos:column="28"/></name> <operator pos:line="52" pos:column="29">+<pos:position pos:line="52" pos:column="30"/></operator> <name pos:line="52" pos:column="31">buf_off<pos:position pos:line="52" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="40">s<pos:position pos:line="52" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="43">quotelevel<pos:position pos:line="52" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="55">&amp;<pos:position pos:line="52" pos:column="60"/></operator><name pos:line="52" pos:column="56">fst<pos:position pos:line="52" pos:column="59"/></name></expr></argument>)<pos:position pos:line="52" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="61"/></expr_stmt>
      <continue pos:line="53" pos:column="7">continue;<pos:position pos:line="53" pos:column="16"/></continue>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="56" pos:column="5">/* for DelSp=yes, we need to strip one SP prior to CRLF on flowed lines */</comment>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">delsp<pos:position pos:line="57" pos:column="14"/></name> <operator pos:line="57" pos:column="15">&amp;&amp;<pos:position pos:line="57" pos:column="25"/></operator> <operator pos:line="57" pos:column="18">!<pos:position pos:line="57" pos:column="19"/></operator><name pos:line="57" pos:column="19">fixed<pos:position pos:line="57" pos:column="24"/></name></expr>)<pos:position pos:line="57" pos:column="25"/></condition><then pos:line="57" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="58" pos:column="7">buf<pos:position pos:line="58" pos:column="10"/></name><index pos:line="58" pos:column="10">[<expr><operator pos:line="58" pos:column="11">--<pos:position pos:line="58" pos:column="13"/></operator><name pos:line="58" pos:column="13">buf_len<pos:position pos:line="58" pos:column="20"/></name></expr>]<pos:position pos:line="58" pos:column="21"/></index></name> <operator pos:line="58" pos:column="22">=<pos:position pos:line="58" pos:column="23"/></operator> <literal type="char" pos:line="58" pos:column="24">'\0'<pos:position pos:line="58" pos:column="28"/></literal></expr>;<pos:position pos:line="58" pos:column="29"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="60" pos:column="5">print_flowed_line<pos:position pos:line="60" pos:column="22"/></name> <argument_list pos:line="60" pos:column="23">(<argument><expr><name pos:line="60" pos:column="24">buf<pos:position pos:line="60" pos:column="27"/></name> <operator pos:line="60" pos:column="28">+<pos:position pos:line="60" pos:column="29"/></operator> <name pos:line="60" pos:column="30">buf_off<pos:position pos:line="60" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="39">s<pos:position pos:line="60" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="42">quotelevel<pos:position pos:line="60" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="54">&amp;<pos:position pos:line="60" pos:column="59"/></operator><name pos:line="60" pos:column="55">fst<pos:position pos:line="60" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="60">fixed<pos:position pos:line="60" pos:column="65"/></name></expr></argument>)<pos:position pos:line="60" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="67"/></expr_stmt>
  }<pos:position pos:line="61" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="63" pos:column="3">flush_par<pos:position pos:line="63" pos:column="12"/></name> <argument_list pos:line="63" pos:column="13">(<argument><expr><name pos:line="63" pos:column="14">s<pos:position pos:line="63" pos:column="15"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="17">&amp;<pos:position pos:line="63" pos:column="22"/></operator><name pos:line="63" pos:column="18">fst<pos:position pos:line="63" pos:column="21"/></name></expr></argument>)<pos:position pos:line="63" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="65" pos:column="3">FREE<pos:position pos:line="65" pos:column="7"/></name> <argument_list pos:line="65" pos:column="8">(<argument><expr><operator pos:line="65" pos:column="9">&amp;<pos:position pos:line="65" pos:column="14"/></operator><name pos:line="65" pos:column="10">buf<pos:position pos:line="65" pos:column="13"/></name></expr></argument>)<pos:position pos:line="65" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="15"/></expr_stmt>
  <return pos:line="66" pos:column="3">return <expr><operator pos:line="66" pos:column="10">(<pos:position pos:line="66" pos:column="11"/></operator><literal type="number" pos:line="66" pos:column="11">0<pos:position pos:line="66" pos:column="12"/></literal><operator pos:line="66" pos:column="12">)<pos:position pos:line="66" pos:column="13"/></operator></expr>;<pos:position pos:line="66" pos:column="14"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
