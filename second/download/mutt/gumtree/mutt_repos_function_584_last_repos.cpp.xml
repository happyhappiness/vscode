<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_584_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">QUERY<pos:position pos:line="1" pos:column="13"/></name> <modifier pos:line="1" pos:column="14">*<pos:position pos:line="1" pos:column="15"/></modifier></type><name pos:line="1" pos:column="15">run_query<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">s<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">int<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">quiet<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">FILE<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">fp<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">QUERY<pos:position pos:line="4" pos:column="8"/></name> <modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type><name pos:line="4" pos:column="10">first<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><name pos:line="4" pos:column="18">NULL<pos:position pos:line="4" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">QUERY<pos:position pos:line="5" pos:column="8"/></name> <modifier pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></modifier></type><name pos:line="5" pos:column="10">cur<pos:position pos:line="5" pos:column="13"/></name> <init pos:line="5" pos:column="14">= <expr><name pos:line="5" pos:column="16">NULL<pos:position pos:line="5" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">cmd<pos:position pos:line="6" pos:column="11"/></name><index pos:line="6" pos:column="11">[<expr><name pos:line="6" pos:column="12">_POSIX_PATH_MAX<pos:position pos:line="6" pos:column="27"/></name></expr>]<pos:position pos:line="6" pos:column="28"/></index></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">buf<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><name pos:line="7" pos:column="15">NULL<pos:position pos:line="7" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">buflen<pos:position pos:line="8" pos:column="16"/></name></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">dummy<pos:position pos:line="9" pos:column="12"/></name> <init pos:line="9" pos:column="13">= <expr><literal type="number" pos:line="9" pos:column="15">0<pos:position pos:line="9" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name></type> <name><name pos:line="10" pos:column="8">msg<pos:position pos:line="10" pos:column="11"/></name><index pos:line="10" pos:column="11">[<expr><name pos:line="10" pos:column="12">STRING<pos:position pos:line="10" pos:column="18"/></name></expr>]<pos:position pos:line="10" pos:column="19"/></index></name></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name> <modifier pos:line="11" pos:column="8">*<pos:position pos:line="11" pos:column="9"/></modifier></type><name pos:line="11" pos:column="9">p<pos:position pos:line="11" pos:column="10"/></name></decl>;<pos:position pos:line="11" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">pid_t<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">thepid<pos:position pos:line="12" pos:column="15"/></name></decl>;<pos:position pos:line="12" pos:column="16"/></decl_stmt>


  <expr_stmt><expr><call><name pos:line="15" pos:column="3">mutt_expand_file_fmt<pos:position pos:line="15" pos:column="23"/></name> <argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">cmd<pos:position pos:line="15" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="30">sizeof<argument_list pos:line="15" pos:column="36">(<argument><expr><name pos:line="15" pos:column="37">cmd<pos:position pos:line="15" pos:column="40"/></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="15" pos:column="43">QueryCmd<pos:position pos:line="15" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="53">s<pos:position pos:line="15" pos:column="54"/></name></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="56"/></expr_stmt>

  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><operator pos:line="17" pos:column="7">(<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">thepid<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <call><name pos:line="17" pos:column="17">mutt_create_filter<pos:position pos:line="17" pos:column="35"/></name> <argument_list pos:line="17" pos:column="36">(<argument><expr><name pos:line="17" pos:column="37">cmd<pos:position pos:line="17" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="42">NULL<pos:position pos:line="17" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="48">&amp;<pos:position pos:line="17" pos:column="53"/></operator><name pos:line="17" pos:column="49">fp<pos:position pos:line="17" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="53">NULL<pos:position pos:line="17" pos:column="57"/></name></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call><operator pos:line="17" pos:column="58">)<pos:position pos:line="17" pos:column="59"/></operator> <operator pos:line="17" pos:column="60">&lt;<pos:position pos:line="17" pos:column="64"/></operator> <literal type="number" pos:line="17" pos:column="62">0<pos:position pos:line="17" pos:column="63"/></literal></expr>)<pos:position pos:line="17" pos:column="64"/></condition><then pos:line="17" pos:column="64">
  <block pos:line="18" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">dprint<pos:position pos:line="19" pos:column="11"/></name> <argument_list pos:line="19" pos:column="12">(<argument><expr><literal type="number" pos:line="19" pos:column="13">1<pos:position pos:line="19" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="16">(<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">debugfile<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">,<pos:position pos:line="19" pos:column="27"/></operator> <literal type="string" pos:line="19" pos:column="28">"unable to fork command: %s"<pos:position pos:line="19" pos:column="56"/></literal><operator pos:line="19" pos:column="56">,<pos:position pos:line="19" pos:column="57"/></operator> <name pos:line="19" pos:column="58">cmd<pos:position pos:line="19" pos:column="61"/></name><operator pos:line="19" pos:column="61">)<pos:position pos:line="19" pos:column="62"/></operator></expr></argument>)<pos:position pos:line="19" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="64"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><literal type="number" pos:line="20" pos:column="12">0<pos:position pos:line="20" pos:column="13"/></literal></expr>;<pos:position pos:line="20" pos:column="14"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><operator pos:line="22" pos:column="7">!<pos:position pos:line="22" pos:column="8"/></operator><name pos:line="22" pos:column="8">quiet<pos:position pos:line="22" pos:column="13"/></name></expr>)<pos:position pos:line="22" pos:column="14"/></condition><then pos:line="22" pos:column="14">
    <block type="pseudo"><decl_stmt><decl><type><name pos:line="23" pos:column="5">mutt_message<pos:position pos:line="23" pos:column="17"/></name></type> <name pos:line="23" pos:column="18">_<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><literal type="string" pos:line="23" pos:column="20">"Waiting for response..."<pos:position pos:line="23" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></decl>;<pos:position pos:line="23" pos:column="47"/></decl_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="24" pos:column="3">fgets<pos:position pos:line="24" pos:column="8"/></name> <argument_list pos:line="24" pos:column="9">(<argument><expr><name pos:line="24" pos:column="10">msg<pos:position pos:line="24" pos:column="13"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="15">sizeof <argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">msg<pos:position pos:line="24" pos:column="26"/></name></expr></argument>)<pos:position pos:line="24" pos:column="27"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="24" pos:column="29">fp<pos:position pos:line="24" pos:column="31"/></name></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><operator pos:line="25" pos:column="7">(<pos:position pos:line="25" pos:column="8"/></operator><name pos:line="25" pos:column="8">p<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">=<pos:position pos:line="25" pos:column="11"/></operator> <call><name pos:line="25" pos:column="12">strrchr<pos:position pos:line="25" pos:column="19"/></name> <argument_list pos:line="25" pos:column="20">(<argument><expr><name pos:line="25" pos:column="21">msg<pos:position pos:line="25" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="25" pos:column="26">'\n'<pos:position pos:line="25" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="31"/></argument_list></call><operator pos:line="25" pos:column="31">)<pos:position pos:line="25" pos:column="32"/></operator></expr>)<pos:position pos:line="25" pos:column="33"/></condition><then pos:line="25" pos:column="33">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="26" pos:column="5">*<pos:position pos:line="26" pos:column="6"/></operator><name pos:line="26" pos:column="6">p<pos:position pos:line="26" pos:column="7"/></name> <operator pos:line="26" pos:column="8">=<pos:position pos:line="26" pos:column="9"/></operator> <literal type="char" pos:line="26" pos:column="10">'\0'<pos:position pos:line="26" pos:column="14"/></literal></expr>;<pos:position pos:line="26" pos:column="15"/></expr_stmt></block></then></if>
  <while pos:line="27" pos:column="3">while <condition pos:line="27" pos:column="9">(<expr><operator pos:line="27" pos:column="10">(<pos:position pos:line="27" pos:column="11"/></operator><name pos:line="27" pos:column="11">buf<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <call><name pos:line="27" pos:column="17">mutt_read_line<pos:position pos:line="27" pos:column="31"/></name> <argument_list pos:line="27" pos:column="32">(<argument><expr><name pos:line="27" pos:column="33">buf<pos:position pos:line="27" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="38">&amp;<pos:position pos:line="27" pos:column="43"/></operator><name pos:line="27" pos:column="39">buflen<pos:position pos:line="27" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="47">fp<pos:position pos:line="27" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="51">&amp;<pos:position pos:line="27" pos:column="56"/></operator><name pos:line="27" pos:column="52">dummy<pos:position pos:line="27" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="59">0<pos:position pos:line="27" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="61"/></argument_list></call><operator pos:line="27" pos:column="61">)<pos:position pos:line="27" pos:column="62"/></operator> <operator pos:line="27" pos:column="63">!=<pos:position pos:line="27" pos:column="65"/></operator> <name pos:line="27" pos:column="66">NULL<pos:position pos:line="27" pos:column="70"/></name></expr>)<pos:position pos:line="27" pos:column="71"/></condition>
  <block pos:line="28" pos:column="3">{
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">p<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <call><name pos:line="29" pos:column="14">strtok<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><name pos:line="29" pos:column="21">buf<pos:position pos:line="29" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="26">"\t\n"<pos:position pos:line="29" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="33"/></argument_list></call><operator pos:line="29" pos:column="33">)<pos:position pos:line="29" pos:column="34"/></operator></expr>)<pos:position pos:line="29" pos:column="35"/></condition><then pos:line="29" pos:column="35">
    <block pos:line="30" pos:column="5">{
      <if pos:line="31" pos:column="7">if <condition pos:line="31" pos:column="10">(<expr><name pos:line="31" pos:column="11">first<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">==<pos:position pos:line="31" pos:column="19"/></operator> <name pos:line="31" pos:column="20">NULL<pos:position pos:line="31" pos:column="24"/></name></expr>)<pos:position pos:line="31" pos:column="25"/></condition><then pos:line="31" pos:column="25">
      <block pos:line="32" pos:column="7">{
	<expr_stmt><expr><name pos:line="33" pos:column="9">first<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">=<pos:position pos:line="33" pos:column="16"/></operator> <operator pos:line="33" pos:column="17">(<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="18">QUERY<pos:position pos:line="33" pos:column="23"/></name> <operator pos:line="33" pos:column="24">*<pos:position pos:line="33" pos:column="25"/></operator><operator pos:line="33" pos:column="25">)<pos:position pos:line="33" pos:column="26"/></operator> <call><name pos:line="33" pos:column="27">safe_calloc<pos:position pos:line="33" pos:column="38"/></name> <argument_list pos:line="33" pos:column="39">(<argument><expr><literal type="number" pos:line="33" pos:column="40">1<pos:position pos:line="33" pos:column="41"/></literal></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="43">sizeof <argument_list pos:line="33" pos:column="50">(<argument><expr><name pos:line="33" pos:column="51">QUERY<pos:position pos:line="33" pos:column="56"/></name></expr></argument>)<pos:position pos:line="33" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="33" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><name pos:line="34" pos:column="9">cur<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <name pos:line="34" pos:column="15">first<pos:position pos:line="34" pos:column="20"/></name></expr>;<pos:position pos:line="34" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="35" pos:column="8"/></block></then>
      <else pos:line="36" pos:column="7">else
      <block pos:line="37" pos:column="7">{
	<expr_stmt><expr><name><name pos:line="38" pos:column="9">cur<pos:position pos:line="38" pos:column="12"/></name><operator pos:line="38" pos:column="12">-&gt;<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="14">next<pos:position pos:line="38" pos:column="18"/></name></name> <operator pos:line="38" pos:column="19">=<pos:position pos:line="38" pos:column="20"/></operator> <operator pos:line="38" pos:column="21">(<pos:position pos:line="38" pos:column="22"/></operator><name pos:line="38" pos:column="22">QUERY<pos:position pos:line="38" pos:column="27"/></name> <operator pos:line="38" pos:column="28">*<pos:position pos:line="38" pos:column="29"/></operator><operator pos:line="38" pos:column="29">)<pos:position pos:line="38" pos:column="30"/></operator> <call><name pos:line="38" pos:column="31">safe_calloc<pos:position pos:line="38" pos:column="42"/></name> <argument_list pos:line="38" pos:column="43">(<argument><expr><literal type="number" pos:line="38" pos:column="44">1<pos:position pos:line="38" pos:column="45"/></literal></expr></argument>, <argument><expr><sizeof pos:line="38" pos:column="47">sizeof <argument_list pos:line="38" pos:column="54">(<argument><expr><name pos:line="38" pos:column="55">QUERY<pos:position pos:line="38" pos:column="60"/></name></expr></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="38" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="63"/></expr_stmt>
	<expr_stmt><expr><name pos:line="39" pos:column="9">cur<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">=<pos:position pos:line="39" pos:column="14"/></operator> <name><name pos:line="39" pos:column="15">cur<pos:position pos:line="39" pos:column="18"/></name><operator pos:line="39" pos:column="18">-&gt;<pos:position pos:line="39" pos:column="23"/></operator><name pos:line="39" pos:column="20">next<pos:position pos:line="39" pos:column="24"/></name></name></expr>;<pos:position pos:line="39" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="40" pos:column="8"/></block></else></if>

      <expr_stmt><expr><name><name pos:line="42" pos:column="7">cur<pos:position pos:line="42" pos:column="10"/></name><operator pos:line="42" pos:column="10">-&gt;<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="12">addr<pos:position pos:line="42" pos:column="16"/></name></name> <operator pos:line="42" pos:column="17">=<pos:position pos:line="42" pos:column="18"/></operator> <call><name pos:line="42" pos:column="19">rfc822_parse_adrlist<pos:position pos:line="42" pos:column="39"/></name> <argument_list pos:line="42" pos:column="40">(<argument><expr><name><name pos:line="42" pos:column="41">cur<pos:position pos:line="42" pos:column="44"/></name><operator pos:line="42" pos:column="44">-&gt;<pos:position pos:line="42" pos:column="49"/></operator><name pos:line="42" pos:column="46">addr<pos:position pos:line="42" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="52">p<pos:position pos:line="42" pos:column="53"/></name></expr></argument>)<pos:position pos:line="42" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><name pos:line="43" pos:column="7">p<pos:position pos:line="43" pos:column="8"/></name> <operator pos:line="43" pos:column="9">=<pos:position pos:line="43" pos:column="10"/></operator> <call><name pos:line="43" pos:column="11">strtok<pos:position pos:line="43" pos:column="17"/></name><argument_list pos:line="43" pos:column="17">(<argument><expr><name pos:line="43" pos:column="18">NULL<pos:position pos:line="43" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="24">"\t\n"<pos:position pos:line="43" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="32"/></expr_stmt>
      <if pos:line="44" pos:column="7">if <condition pos:line="44" pos:column="10">(<expr><name pos:line="44" pos:column="11">p<pos:position pos:line="44" pos:column="12"/></name></expr>)<pos:position pos:line="44" pos:column="13"/></condition><then pos:line="44" pos:column="13">
      <block pos:line="45" pos:column="7">{
	<expr_stmt><expr><name><name pos:line="46" pos:column="9">cur<pos:position pos:line="46" pos:column="12"/></name><operator pos:line="46" pos:column="12">-&gt;<pos:position pos:line="46" pos:column="17"/></operator><name pos:line="46" pos:column="14">name<pos:position pos:line="46" pos:column="18"/></name></name> <operator pos:line="46" pos:column="19">=<pos:position pos:line="46" pos:column="20"/></operator> <call><name pos:line="46" pos:column="21">safe_strdup<pos:position pos:line="46" pos:column="32"/></name> <argument_list pos:line="46" pos:column="33">(<argument><expr><name pos:line="46" pos:column="34">p<pos:position pos:line="46" pos:column="35"/></name></expr></argument>)<pos:position pos:line="46" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name pos:line="47" pos:column="9">p<pos:position pos:line="47" pos:column="10"/></name> <operator pos:line="47" pos:column="11">=<pos:position pos:line="47" pos:column="12"/></operator> <call><name pos:line="47" pos:column="13">strtok<pos:position pos:line="47" pos:column="19"/></name><argument_list pos:line="47" pos:column="19">(<argument><expr><name pos:line="47" pos:column="20">NULL<pos:position pos:line="47" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="26">"\t\n"<pos:position pos:line="47" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="34"/></expr_stmt>
	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">p<pos:position pos:line="48" pos:column="14"/></name></expr>)<pos:position pos:line="48" pos:column="15"/></condition><then pos:line="48" pos:column="15">
	  <block type="pseudo"><expr_stmt><expr><name><name pos:line="49" pos:column="11">cur<pos:position pos:line="49" pos:column="14"/></name><operator pos:line="49" pos:column="14">-&gt;<pos:position pos:line="49" pos:column="19"/></operator><name pos:line="49" pos:column="16">other<pos:position pos:line="49" pos:column="21"/></name></name> <operator pos:line="49" pos:column="22">=<pos:position pos:line="49" pos:column="23"/></operator> <call><name pos:line="49" pos:column="24">safe_strdup<pos:position pos:line="49" pos:column="35"/></name> <argument_list pos:line="49" pos:column="36">(<argument><expr><name pos:line="49" pos:column="37">p<pos:position pos:line="49" pos:column="38"/></name></expr></argument>)<pos:position pos:line="49" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="40"/></expr_stmt></block></then></if>
      }<pos:position pos:line="50" pos:column="8"/></block></then></if>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>
  }<pos:position pos:line="52" pos:column="4"/></block></while>
  <expr_stmt><expr><call><name pos:line="53" pos:column="3">FREE<pos:position pos:line="53" pos:column="7"/></name> <argument_list pos:line="53" pos:column="8">(<argument><expr><operator pos:line="53" pos:column="9">&amp;<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="10">buf<pos:position pos:line="53" pos:column="13"/></name></expr></argument>)<pos:position pos:line="53" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="54" pos:column="3">safe_fclose<pos:position pos:line="54" pos:column="14"/></name> <argument_list pos:line="54" pos:column="15">(<argument><expr><operator pos:line="54" pos:column="16">&amp;<pos:position pos:line="54" pos:column="21"/></operator><name pos:line="54" pos:column="17">fp<pos:position pos:line="54" pos:column="19"/></name></expr></argument>)<pos:position pos:line="54" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="21"/></expr_stmt>
  <if pos:line="55" pos:column="3">if <condition pos:line="55" pos:column="6">(<expr><call><name pos:line="55" pos:column="7">mutt_wait_filter<pos:position pos:line="55" pos:column="23"/></name> <argument_list pos:line="55" pos:column="24">(<argument><expr><name pos:line="55" pos:column="25">thepid<pos:position pos:line="55" pos:column="31"/></name></expr></argument>)<pos:position pos:line="55" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="33"/></condition><then pos:line="55" pos:column="33">
  <block pos:line="56" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="57" pos:column="5">dprint<pos:position pos:line="57" pos:column="11"/></name> <argument_list pos:line="57" pos:column="12">(<argument><expr><literal type="number" pos:line="57" pos:column="13">1<pos:position pos:line="57" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="57" pos:column="16">(<pos:position pos:line="57" pos:column="17"/></operator><name pos:line="57" pos:column="17">debugfile<pos:position pos:line="57" pos:column="26"/></name><operator pos:line="57" pos:column="26">,<pos:position pos:line="57" pos:column="27"/></operator> <literal type="string" pos:line="57" pos:column="28">"Error: %s\n"<pos:position pos:line="57" pos:column="41"/></literal><operator pos:line="57" pos:column="41">,<pos:position pos:line="57" pos:column="42"/></operator> <name pos:line="57" pos:column="43">msg<pos:position pos:line="57" pos:column="46"/></name><operator pos:line="57" pos:column="46">)<pos:position pos:line="57" pos:column="47"/></operator></expr></argument>)<pos:position pos:line="57" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="49"/></expr_stmt>
    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><operator pos:line="58" pos:column="9">!<pos:position pos:line="58" pos:column="10"/></operator><name pos:line="58" pos:column="10">quiet<pos:position pos:line="58" pos:column="15"/></name></expr>)<pos:position pos:line="58" pos:column="16"/></condition><then pos:line="58" pos:column="16">  <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="18">mutt_error<pos:position pos:line="58" pos:column="28"/></name> <argument_list pos:line="58" pos:column="29">(<argument><expr><literal type="string" pos:line="58" pos:column="30">"%s"<pos:position pos:line="58" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="36">msg<pos:position pos:line="58" pos:column="39"/></name></expr></argument>)<pos:position pos:line="58" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="41"/></expr_stmt></block></then></if>
  }<pos:position pos:line="59" pos:column="4"/></block></then>
  <else pos:line="60" pos:column="3">else
  <block pos:line="61" pos:column="3">{
    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><operator pos:line="62" pos:column="9">!<pos:position pos:line="62" pos:column="10"/></operator><name pos:line="62" pos:column="10">quiet<pos:position pos:line="62" pos:column="15"/></name></expr>)<pos:position pos:line="62" pos:column="16"/></condition><then pos:line="62" pos:column="16">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="7">mutt_message<pos:position pos:line="63" pos:column="19"/></name> <argument_list pos:line="63" pos:column="20">(<argument><expr><literal type="string" pos:line="63" pos:column="21">"%s"<pos:position pos:line="63" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="27">msg<pos:position pos:line="63" pos:column="30"/></name></expr></argument>)<pos:position pos:line="63" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="32"/></expr_stmt></block></then></if>
  }<pos:position pos:line="64" pos:column="4"/></block></else></if>
  
  <return pos:line="66" pos:column="3">return <expr><name pos:line="66" pos:column="10">first<pos:position pos:line="66" pos:column="15"/></name></expr>;<pos:position pos:line="66" pos:column="16"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
