<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1230_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">choose_block<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">d<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">size_t<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">dlen<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">int<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">col<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
			    <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">fromcode<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="51">const<pos:position pos:line="2" pos:column="56"/></specifier> <name pos:line="2" pos:column="57">char<pos:position pos:line="2" pos:column="61"/></name> <modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">tocode<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>,
			    <parameter><decl><type><name pos:line="3" pos:column="29">encoder_t<pos:position pos:line="3" pos:column="38"/></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="40">encoder<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="49">size_t<pos:position pos:line="3" pos:column="55"/></name> <modifier pos:line="3" pos:column="56">*<pos:position pos:line="3" pos:column="57"/></modifier></type><name pos:line="3" pos:column="57">wlen<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="62"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">n<pos:position pos:line="5" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="13">nn<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">utf8<pos:position pos:line="6" pos:column="11"/></name> <init pos:line="6" pos:column="12">= <expr><name pos:line="6" pos:column="14">fromcode<pos:position pos:line="6" pos:column="22"/></name> <operator pos:line="6" pos:column="23">&amp;&amp;<pos:position pos:line="6" pos:column="33"/></operator> <operator pos:line="6" pos:column="26">!<pos:position pos:line="6" pos:column="27"/></operator><call><name pos:line="6" pos:column="27">ascii_strcasecmp<pos:position pos:line="6" pos:column="43"/></name> <argument_list pos:line="6" pos:column="44">(<argument><expr><name pos:line="6" pos:column="45">fromcode<pos:position pos:line="6" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="55">"utf-8"<pos:position pos:line="6" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="64"/></decl_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">n<pos:position pos:line="8" pos:column="4"/></name> <operator pos:line="8" pos:column="5">=<pos:position pos:line="8" pos:column="6"/></operator> <name pos:line="8" pos:column="7">dlen<pos:position pos:line="8" pos:column="11"/></name></expr>;<pos:position pos:line="8" pos:column="12"/></expr_stmt>
  <for pos:line="9" pos:column="3">for <control pos:line="9" pos:column="7">(<init pos:line="9" pos:column="8">;<pos:position pos:line="9" pos:column="9"/></init><condition pos:line="9" pos:column="9">;<pos:position pos:line="9" pos:column="10"/></condition><incr/>)<pos:position pos:line="9" pos:column="11"/></control>
  <block pos:line="10" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name> <argument_list pos:line="11" pos:column="12">(<argument><expr><name pos:line="11" pos:column="13">d<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">+<pos:position pos:line="11" pos:column="16"/></operator> <name pos:line="11" pos:column="17">n<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">&gt;<pos:position pos:line="11" pos:column="23"/></operator> <name pos:line="11" pos:column="21">d<pos:position pos:line="11" pos:column="22"/></name></expr></argument>)<pos:position pos:line="11" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">nn<pos:position pos:line="12" pos:column="7"/></name> <operator pos:line="12" pos:column="8">=<pos:position pos:line="12" pos:column="9"/></operator> <call><name pos:line="12" pos:column="10">try_block<pos:position pos:line="12" pos:column="19"/></name> <argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">d<pos:position pos:line="12" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="24">n<pos:position pos:line="12" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="27">fromcode<pos:position pos:line="12" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="37">tocode<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="45">encoder<pos:position pos:line="12" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="54">wlen<pos:position pos:line="12" pos:column="58"/></name></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="60"/></expr_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">nn<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">&amp;&amp;<pos:position pos:line="13" pos:column="23"/></operator> <operator pos:line="13" pos:column="16">(<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">col<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">+<pos:position pos:line="13" pos:column="22"/></operator> <operator pos:line="13" pos:column="23">*<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="24">wlen<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">&lt;=<pos:position pos:line="13" pos:column="34"/></operator> <name pos:line="13" pos:column="32">ENCWORD_LEN_MAX<pos:position pos:line="13" pos:column="47"/></name> <operator pos:line="13" pos:column="48">+<pos:position pos:line="13" pos:column="49"/></operator> <literal type="number" pos:line="13" pos:column="50">1<pos:position pos:line="13" pos:column="51"/></literal> <operator pos:line="13" pos:column="52">||<pos:position pos:line="13" pos:column="54"/></operator> <name pos:line="13" pos:column="55">n<pos:position pos:line="13" pos:column="56"/></name> <operator pos:line="13" pos:column="57">&lt;=<pos:position pos:line="13" pos:column="62"/></operator> <literal type="number" pos:line="13" pos:column="60">1<pos:position pos:line="13" pos:column="61"/></literal><operator pos:line="13" pos:column="61">)<pos:position pos:line="13" pos:column="62"/></operator></expr>)<pos:position pos:line="13" pos:column="63"/></condition><then pos:line="13" pos:column="63">
      <block type="pseudo"><break pos:line="14" pos:column="7">break;<pos:position pos:line="14" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><name pos:line="15" pos:column="5">n<pos:position pos:line="15" pos:column="6"/></name> <operator pos:line="15" pos:column="7">=<pos:position pos:line="15" pos:column="8"/></operator> <operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><ternary><condition><expr><name pos:line="15" pos:column="10">nn<pos:position pos:line="15" pos:column="12"/></name></expr> ?<pos:position pos:line="15" pos:column="14"/></condition><then pos:line="15" pos:column="14"> <expr><name pos:line="15" pos:column="15">nn<pos:position pos:line="15" pos:column="17"/></name></expr> <pos:position pos:line="15" pos:column="18"/></then><else pos:line="15" pos:column="18">: <expr><name pos:line="15" pos:column="20">n<pos:position pos:line="15" pos:column="21"/></name></expr></else></ternary><operator pos:line="15" pos:column="21">)<pos:position pos:line="15" pos:column="22"/></operator> <operator pos:line="15" pos:column="23">-<pos:position pos:line="15" pos:column="24"/></operator> <literal type="number" pos:line="15" pos:column="25">1<pos:position pos:line="15" pos:column="26"/></literal></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">assert<pos:position pos:line="16" pos:column="11"/></name> <argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">n<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">&gt;<pos:position pos:line="16" pos:column="19"/></operator> <literal type="number" pos:line="16" pos:column="17">0<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="20"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">utf8<pos:position pos:line="17" pos:column="13"/></name></expr>)<pos:position pos:line="17" pos:column="14"/></condition><then pos:line="17" pos:column="14">
      <block type="pseudo"><while pos:line="18" pos:column="7">while <condition pos:line="18" pos:column="13">(<expr><name pos:line="18" pos:column="14">n<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">&gt;<pos:position pos:line="18" pos:column="20"/></operator> <literal type="number" pos:line="18" pos:column="18">1<pos:position pos:line="18" pos:column="19"/></literal> <operator pos:line="18" pos:column="20">&amp;&amp;<pos:position pos:line="18" pos:column="30"/></operator> <call><name pos:line="18" pos:column="23">CONTINUATION_BYTE<pos:position pos:line="18" pos:column="40"/></name><argument_list pos:line="18" pos:column="40">(<argument><expr><name><name pos:line="18" pos:column="41">d<pos:position pos:line="18" pos:column="42"/></name><index pos:line="18" pos:column="42">[<expr><name pos:line="18" pos:column="43">n<pos:position pos:line="18" pos:column="44"/></name></expr>]<pos:position pos:line="18" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="47"/></condition>
	<block type="pseudo"><expr_stmt><expr><operator pos:line="19" pos:column="9">--<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="11">n<pos:position pos:line="19" pos:column="12"/></name></expr>;<pos:position pos:line="19" pos:column="13"/></expr_stmt></block></while></block></then></if>
  }<pos:position pos:line="20" pos:column="4"/></block></for>
  <return pos:line="21" pos:column="3">return <expr><name pos:line="21" pos:column="10">n<pos:position pos:line="21" pos:column="11"/></name></expr>;<pos:position pos:line="21" pos:column="12"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
