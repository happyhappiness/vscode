<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_273_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">mutt_signal_init<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">void<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">sigaction<pos:position pos:line="3" pos:column="19"/></name></name></type> <name pos:line="3" pos:column="20">act<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="5" pos:column="3">sigemptyset<pos:position pos:line="5" pos:column="14"/></name> <argument_list pos:line="5" pos:column="15">(<argument><expr><operator pos:line="5" pos:column="16">&amp;<pos:position pos:line="5" pos:column="21"/></operator><name><name pos:line="5" pos:column="17">act<pos:position pos:line="5" pos:column="20"/></name><operator pos:line="5" pos:column="20">.<pos:position pos:line="5" pos:column="21"/></operator><name pos:line="5" pos:column="21">sa_mask<pos:position pos:line="5" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6" pos:column="3">act<pos:position pos:line="6" pos:column="6"/></name><operator pos:line="6" pos:column="6">.<pos:position pos:line="6" pos:column="7"/></operator><name pos:line="6" pos:column="7">sa_flags<pos:position pos:line="6" pos:column="15"/></name></name> <operator pos:line="6" pos:column="16">=<pos:position pos:line="6" pos:column="17"/></operator> <literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr>;<pos:position pos:line="6" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="7" pos:column="3">act<pos:position pos:line="7" pos:column="6"/></name><operator pos:line="7" pos:column="6">.<pos:position pos:line="7" pos:column="7"/></operator><name pos:line="7" pos:column="7">sa_handler<pos:position pos:line="7" pos:column="17"/></name></name> <operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator> <name pos:line="7" pos:column="20">SIG_IGN<pos:position pos:line="7" pos:column="27"/></name></expr>;<pos:position pos:line="7" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">sigaction<pos:position pos:line="8" pos:column="12"/></name> <argument_list pos:line="8" pos:column="13">(<argument><expr><name pos:line="8" pos:column="14">SIGPIPE<pos:position pos:line="8" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="23">&amp;<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="24">act<pos:position pos:line="8" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="29">NULL<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="10" pos:column="3">act<pos:position pos:line="10" pos:column="6"/></name><operator pos:line="10" pos:column="6">.<pos:position pos:line="10" pos:column="7"/></operator><name pos:line="10" pos:column="7">sa_handler<pos:position pos:line="10" pos:column="17"/></name></name> <operator pos:line="10" pos:column="18">=<pos:position pos:line="10" pos:column="19"/></operator> <name pos:line="10" pos:column="20">exit_handler<pos:position pos:line="10" pos:column="32"/></name></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">sigaction<pos:position pos:line="11" pos:column="12"/></name> <argument_list pos:line="11" pos:column="13">(<argument><expr><name pos:line="11" pos:column="14">SIGTERM<pos:position pos:line="11" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="23">&amp;<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="24">act<pos:position pos:line="11" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="29">NULL<pos:position pos:line="11" pos:column="33"/></name></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">sigaction<pos:position pos:line="12" pos:column="12"/></name> <argument_list pos:line="12" pos:column="13">(<argument><expr><name pos:line="12" pos:column="14">SIGHUP<pos:position pos:line="12" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="22">&amp;<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="23">act<pos:position pos:line="12" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="28">NULL<pos:position pos:line="12" pos:column="32"/></name></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">sigaction<pos:position pos:line="13" pos:column="12"/></name> <argument_list pos:line="13" pos:column="13">(<argument><expr><name pos:line="13" pos:column="14">SIGQUIT<pos:position pos:line="13" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="23">&amp;<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="24">act<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="29">NULL<pos:position pos:line="13" pos:column="33"/></name></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>

  <comment type="block" pos:line="15" pos:column="3">/* we want to avoid race conditions */</comment>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">sigaddset<pos:position pos:line="16" pos:column="12"/></name> <argument_list pos:line="16" pos:column="13">(<argument><expr><operator pos:line="16" pos:column="14">&amp;<pos:position pos:line="16" pos:column="19"/></operator><name><name pos:line="16" pos:column="15">act<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">.<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="19">sa_mask<pos:position pos:line="16" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="28">SIGTSTP<pos:position pos:line="16" pos:column="35"/></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="18" pos:column="3">act<pos:position pos:line="18" pos:column="6"/></name><operator pos:line="18" pos:column="6">.<pos:position pos:line="18" pos:column="7"/></operator><name pos:line="18" pos:column="7">sa_handler<pos:position pos:line="18" pos:column="17"/></name></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <name pos:line="18" pos:column="20">sighandler<pos:position pos:line="18" pos:column="30"/></name></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>

  <comment type="block" pos:line="20" pos:column="3">/* we want SIGALRM to abort the current syscall, so we do this before
   * setting the SA_RESTART flag below.  currently this is only used to
   * timeout on a connect() call in a reasonable amount of time.
   */</comment>
  <expr_stmt><expr><call><name pos:line="24" pos:column="3">sigaction<pos:position pos:line="24" pos:column="12"/></name> <argument_list pos:line="24" pos:column="13">(<argument><expr><name pos:line="24" pos:column="14">SIGALRM<pos:position pos:line="24" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="23">&amp;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="24">act<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="29">NULL<pos:position pos:line="24" pos:column="33"/></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt>

  <comment type="block" pos:line="26" pos:column="3">/* we also don't want to mess with interrupted system calls */</comment>
<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">SA_RESTART<pos:position pos:line="27" pos:column="18"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="28" pos:column="3">act<pos:position pos:line="28" pos:column="6"/></name><operator pos:line="28" pos:column="6">.<pos:position pos:line="28" pos:column="7"/></operator><name pos:line="28" pos:column="7">sa_flags<pos:position pos:line="28" pos:column="15"/></name></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <name pos:line="28" pos:column="18">SA_RESTART<pos:position pos:line="28" pos:column="28"/></name></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="31" pos:column="3">sigaction<pos:position pos:line="31" pos:column="12"/></name> <argument_list pos:line="31" pos:column="13">(<argument><expr><name pos:line="31" pos:column="14">SIGCONT<pos:position pos:line="31" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="23">&amp;<pos:position pos:line="31" pos:column="28"/></operator><name pos:line="31" pos:column="24">act<pos:position pos:line="31" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="29">NULL<pos:position pos:line="31" pos:column="33"/></name></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="32" pos:column="3">sigaction<pos:position pos:line="32" pos:column="12"/></name> <argument_list pos:line="32" pos:column="13">(<argument><expr><name pos:line="32" pos:column="14">SIGTSTP<pos:position pos:line="32" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="23">&amp;<pos:position pos:line="32" pos:column="28"/></operator><name pos:line="32" pos:column="24">act<pos:position pos:line="32" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="29">NULL<pos:position pos:line="32" pos:column="33"/></name></expr></argument>)<pos:position pos:line="32" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="33" pos:column="3">sigaction<pos:position pos:line="33" pos:column="12"/></name> <argument_list pos:line="33" pos:column="13">(<argument><expr><name pos:line="33" pos:column="14">SIGINT<pos:position pos:line="33" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="22">&amp;<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="23">act<pos:position pos:line="33" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="28">NULL<pos:position pos:line="33" pos:column="32"/></name></expr></argument>)<pos:position pos:line="33" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="34"/></expr_stmt>
<cpp:if pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">if<pos:position pos:line="34" pos:column="4"/></cpp:directive> <expr><call><name pos:line="34" pos:column="5">defined<pos:position pos:line="34" pos:column="12"/></name> <argument_list pos:line="34" pos:column="13">(<argument><expr><name pos:line="34" pos:column="14">USE_SLANG_CURSES<pos:position pos:line="34" pos:column="30"/></name></expr></argument>)<pos:position pos:line="34" pos:column="31"/></argument_list></call> <operator pos:line="34" pos:column="32">||<pos:position pos:line="34" pos:column="34"/></operator> <call><name pos:line="34" pos:column="35">defined<pos:position pos:line="34" pos:column="42"/></name> <argument_list pos:line="34" pos:column="43">(<argument><expr><name pos:line="34" pos:column="44">HAVE_RESIZETERM<pos:position pos:line="34" pos:column="59"/></name></expr></argument>)<pos:position pos:line="34" pos:column="60"/></argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name pos:line="35" pos:column="3">sigaction<pos:position pos:line="35" pos:column="12"/></name> <argument_list pos:line="35" pos:column="13">(<argument><expr><name pos:line="35" pos:column="14">SIGWINCH<pos:position pos:line="35" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="24">&amp;<pos:position pos:line="35" pos:column="29"/></operator><name pos:line="35" pos:column="25">act<pos:position pos:line="35" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="30">NULL<pos:position pos:line="35" pos:column="34"/></name></expr></argument>)<pos:position pos:line="35" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="38" pos:column="3">/* POSIX doesn't allow us to ignore SIGCHLD,
   * so we just install a dummy handler for it
   */</comment>
  <expr_stmt><expr><name><name pos:line="41" pos:column="3">act<pos:position pos:line="41" pos:column="6"/></name><operator pos:line="41" pos:column="6">.<pos:position pos:line="41" pos:column="7"/></operator><name pos:line="41" pos:column="7">sa_handler<pos:position pos:line="41" pos:column="17"/></name></name> <operator pos:line="41" pos:column="18">=<pos:position pos:line="41" pos:column="19"/></operator> <name pos:line="41" pos:column="20">chld_handler<pos:position pos:line="41" pos:column="32"/></name></expr>;<pos:position pos:line="41" pos:column="33"/></expr_stmt>
  <comment type="block" pos:line="42" pos:column="3">/* don't need to block any other signals here */</comment>
  <expr_stmt><expr><call><name pos:line="43" pos:column="3">sigemptyset<pos:position pos:line="43" pos:column="14"/></name> <argument_list pos:line="43" pos:column="15">(<argument><expr><operator pos:line="43" pos:column="16">&amp;<pos:position pos:line="43" pos:column="21"/></operator><name><name pos:line="43" pos:column="17">act<pos:position pos:line="43" pos:column="20"/></name><operator pos:line="43" pos:column="20">.<pos:position pos:line="43" pos:column="21"/></operator><name pos:line="43" pos:column="21">sa_mask<pos:position pos:line="43" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt>
  <comment type="block" pos:line="44" pos:column="3">/* we don't want to mess with stopped children */</comment>
  <expr_stmt><expr><name><name pos:line="45" pos:column="3">act<pos:position pos:line="45" pos:column="6"/></name><operator pos:line="45" pos:column="6">.<pos:position pos:line="45" pos:column="7"/></operator><name pos:line="45" pos:column="7">sa_flags<pos:position pos:line="45" pos:column="15"/></name></name> <operator pos:line="45" pos:column="16">|=<pos:position pos:line="45" pos:column="18"/></operator> <name pos:line="45" pos:column="19">SA_NOCLDSTOP<pos:position pos:line="45" pos:column="31"/></name></expr>;<pos:position pos:line="45" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="46" pos:column="3">sigaction<pos:position pos:line="46" pos:column="12"/></name> <argument_list pos:line="46" pos:column="13">(<argument><expr><name pos:line="46" pos:column="14">SIGCHLD<pos:position pos:line="46" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="23">&amp;<pos:position pos:line="46" pos:column="28"/></operator><name pos:line="46" pos:column="24">act<pos:position pos:line="46" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="29">NULL<pos:position pos:line="46" pos:column="33"/></name></expr></argument>)<pos:position pos:line="46" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="35"/></expr_stmt>

<cpp:ifdef pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">ifdef<pos:position pos:line="48" pos:column="7"/></cpp:directive> <name pos:line="48" pos:column="8">USE_SLANG_CURSES<pos:position pos:line="48" pos:column="24"/></name></cpp:ifdef>
  <comment type="block" pos:line="49" pos:column="3">/* This bit of code is required because of the implementation of
   * SLcurses_wgetch().  If a signal is received (like SIGWINCH) when we
   * are in blocking mode, SLsys_getkey() will not return an error unless
   * a handler function is defined and it returns -1.  This is needed so
   * that if the user resizes the screen while at a prompt, it will just
   * abort and go back to the main-menu.
   */</comment>
  <expr_stmt><expr><name pos:line="56" pos:column="3">SLang_getkey_intr_hook<pos:position pos:line="56" pos:column="25"/></name> <operator pos:line="56" pos:column="26">=<pos:position pos:line="56" pos:column="27"/></operator> <name pos:line="56" pos:column="28">mutt_intr_hook<pos:position pos:line="56" pos:column="42"/></name></expr>;<pos:position pos:line="56" pos:column="43"/></expr_stmt>
<cpp:endif pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">endif<pos:position pos:line="57" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
