<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1503_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">trim_incomplete_mbyte<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">unsigned<pos:position pos:line="2" pos:column="31"/></name> <name pos:line="2" pos:column="32">char<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">buf<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">size_t<pos:position pos:line="2" pos:column="49"/></name></type> <name pos:line="2" pos:column="50">len<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">mbstate_t<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">mbstate<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">k<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="7" pos:column="3">memset<pos:position pos:line="7" pos:column="9"/></name> <argument_list pos:line="7" pos:column="10">(<argument><expr><operator pos:line="7" pos:column="11">&amp;<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="12">mbstate<pos:position pos:line="7" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="21">0<pos:position pos:line="7" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="24">sizeof <argument_list pos:line="7" pos:column="31">(<argument><expr><name pos:line="7" pos:column="32">mbstate<pos:position pos:line="7" pos:column="39"/></name></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="42"/></expr_stmt>
  <for pos:line="8" pos:column="3">for <control pos:line="8" pos:column="7">(<init pos:line="8" pos:column="8">;<pos:position pos:line="8" pos:column="9"/></init> <condition><expr><name pos:line="8" pos:column="10">len<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">&gt;<pos:position pos:line="8" pos:column="18"/></operator> <literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr>;<pos:position pos:line="8" pos:column="18"/></condition> <incr><expr><name pos:line="8" pos:column="19">buf<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">+=<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="26">k<pos:position pos:line="8" pos:column="27"/></name></expr><operator pos:line="8" pos:column="27">,<pos:position pos:line="8" pos:column="28"/></operator> <expr><name pos:line="8" pos:column="29">len<pos:position pos:line="8" pos:column="32"/></name> <operator pos:line="8" pos:column="33">-=<pos:position pos:line="8" pos:column="35"/></operator> <name pos:line="8" pos:column="36">k<pos:position pos:line="8" pos:column="37"/></name></expr></incr>)<pos:position pos:line="8" pos:column="38"/></control>
  <block pos:line="9" pos:column="3">{
    <expr_stmt><expr><name pos:line="10" pos:column="5">k<pos:position pos:line="10" pos:column="6"/></name> <operator pos:line="10" pos:column="7">=<pos:position pos:line="10" pos:column="8"/></operator> <call><name pos:line="10" pos:column="9">mbrtowc<pos:position pos:line="10" pos:column="16"/></name> <argument_list pos:line="10" pos:column="17">(<argument><expr><name pos:line="10" pos:column="18">NULL<pos:position pos:line="10" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="24">(<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="25">char<pos:position pos:line="10" pos:column="29"/></name> <operator pos:line="10" pos:column="30">*<pos:position pos:line="10" pos:column="31"/></operator><operator pos:line="10" pos:column="31">)<pos:position pos:line="10" pos:column="32"/></operator> <name pos:line="10" pos:column="33">buf<pos:position pos:line="10" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="38">len<pos:position pos:line="10" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="43">&amp;<pos:position pos:line="10" pos:column="48"/></operator><name pos:line="10" pos:column="44">mbstate<pos:position pos:line="10" pos:column="51"/></name></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="53"/></expr_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">k<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">==<pos:position pos:line="11" pos:column="13"/></operator> <call pos:line="11" pos:column="14">(<name pos:line="11" pos:column="15">size_t<pos:position pos:line="11" pos:column="21"/></name>)<argument_list pos:line="11" pos:column="22">(<argument><expr><operator pos:line="11" pos:column="23">-<pos:position pos:line="11" pos:column="24"/></operator><literal type="number" pos:line="11" pos:column="24">2<pos:position pos:line="11" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27"> 
      <block type="pseudo"><break pos:line="12" pos:column="7">break;<pos:position pos:line="12" pos:column="13"/></break></block></then> 
    <elseif pos:line="13" pos:column="5">else <if pos:line="13" pos:column="10">if <condition pos:line="13" pos:column="13">(<expr><name pos:line="13" pos:column="14">k<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">==<pos:position pos:line="13" pos:column="18"/></operator> <call pos:line="13" pos:column="19">(<name pos:line="13" pos:column="20">size_t<pos:position pos:line="13" pos:column="26"/></name>)<argument_list pos:line="13" pos:column="27">(<argument><expr><operator pos:line="13" pos:column="28">-<pos:position pos:line="13" pos:column="29"/></operator><literal type="number" pos:line="13" pos:column="29">1<pos:position pos:line="13" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></call> <operator pos:line="13" pos:column="32">||<pos:position pos:line="13" pos:column="34"/></operator> <name pos:line="13" pos:column="35">k<pos:position pos:line="13" pos:column="36"/></name> <operator pos:line="13" pos:column="37">==<pos:position pos:line="13" pos:column="39"/></operator> <literal type="number" pos:line="13" pos:column="40">0<pos:position pos:line="13" pos:column="41"/></literal></expr>)<pos:position pos:line="13" pos:column="42"/></condition><then pos:line="13" pos:column="42">
    <block pos:line="14" pos:column="5">{
      <if pos:line="15" pos:column="7">if <condition pos:line="15" pos:column="10">(<expr><name pos:line="15" pos:column="11">k<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">==<pos:position pos:line="15" pos:column="15"/></operator> <call pos:line="15" pos:column="16">(<name pos:line="15" pos:column="17">size_t<pos:position pos:line="15" pos:column="23"/></name>)<argument_list pos:line="15" pos:column="24">(<argument><expr><operator pos:line="15" pos:column="25">-<pos:position pos:line="15" pos:column="26"/></operator><literal type="number" pos:line="15" pos:column="26">1<pos:position pos:line="15" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="29"/></condition><then pos:line="15" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="9">memset<pos:position pos:line="16" pos:column="15"/></name> <argument_list pos:line="16" pos:column="16">(<argument><expr><operator pos:line="16" pos:column="17">&amp;<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="18">mbstate<pos:position pos:line="16" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="27">0<pos:position pos:line="16" pos:column="28"/></literal></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="30">sizeof <argument_list pos:line="16" pos:column="37">(<argument><expr><name pos:line="16" pos:column="38">mbstate<pos:position pos:line="16" pos:column="45"/></name></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="48"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name pos:line="17" pos:column="7">k<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">=<pos:position pos:line="17" pos:column="10"/></operator> <literal type="number" pos:line="17" pos:column="11">1<pos:position pos:line="17" pos:column="12"/></literal></expr>;<pos:position pos:line="17" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="19" pos:column="4"/></block></for>
  <expr_stmt><expr><operator pos:line="20" pos:column="3">*<pos:position pos:line="20" pos:column="4"/></operator><name pos:line="20" pos:column="4">buf<pos:position pos:line="20" pos:column="7"/></name> <operator pos:line="20" pos:column="8">=<pos:position pos:line="20" pos:column="9"/></operator> <literal type="char" pos:line="20" pos:column="10">'\0'<pos:position pos:line="20" pos:column="14"/></literal></expr>;<pos:position pos:line="20" pos:column="15"/></expr_stmt>

  <return pos:line="22" pos:column="3">return <expr><name pos:line="22" pos:column="10">len<pos:position pos:line="22" pos:column="13"/></name></expr>;<pos:position pos:line="22" pos:column="14"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
