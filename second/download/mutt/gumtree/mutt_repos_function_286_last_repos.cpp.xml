<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_286_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">mutt_message_hook<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">CONTEXT<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">ctx<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">HEADER<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">hdr<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">int<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">type<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">BUFFER<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">err<pos:position pos:line="3" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="15">token<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">HOOK<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">hook<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">pattern_cache_t<pos:position pos:line="5" pos:column="18"/></name></type> <name pos:line="5" pos:column="19">cache<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><name pos:line="7" pos:column="3">current_hook_type<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">=<pos:position pos:line="7" pos:column="22"/></operator> <name pos:line="7" pos:column="23">type<pos:position pos:line="7" pos:column="27"/></name></expr>;<pos:position pos:line="7" pos:column="28"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">mutt_buffer_init<pos:position pos:line="9" pos:column="19"/></name> <argument_list pos:line="9" pos:column="20">(<argument><expr><operator pos:line="9" pos:column="21">&amp;<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="22">err<pos:position pos:line="9" pos:column="25"/></name></expr></argument>)<pos:position pos:line="9" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="10" pos:column="3">err<pos:position pos:line="10" pos:column="6"/></name><operator pos:line="10" pos:column="6">.<pos:position pos:line="10" pos:column="7"/></operator><name pos:line="10" pos:column="7">dsize<pos:position pos:line="10" pos:column="12"/></name></name> <operator pos:line="10" pos:column="13">=<pos:position pos:line="10" pos:column="14"/></operator> <name pos:line="10" pos:column="15">STRING<pos:position pos:line="10" pos:column="21"/></name></expr>;<pos:position pos:line="10" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="11" pos:column="3">err<pos:position pos:line="11" pos:column="6"/></name><operator pos:line="11" pos:column="6">.<pos:position pos:line="11" pos:column="7"/></operator><name pos:line="11" pos:column="7">data<pos:position pos:line="11" pos:column="11"/></name></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">safe_malloc<pos:position pos:line="11" pos:column="25"/></name> <argument_list pos:line="11" pos:column="26">(<argument><expr><name><name pos:line="11" pos:column="27">err<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">.<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="31">dsize<pos:position pos:line="11" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">mutt_buffer_init<pos:position pos:line="12" pos:column="19"/></name> <argument_list pos:line="12" pos:column="20">(<argument><expr><operator pos:line="12" pos:column="21">&amp;<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="22">token<pos:position pos:line="12" pos:column="27"/></name></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">memset<pos:position pos:line="13" pos:column="9"/></name> <argument_list pos:line="13" pos:column="10">(<argument><expr><operator pos:line="13" pos:column="11">&amp;<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="12">cache<pos:position pos:line="13" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="19">0<pos:position pos:line="13" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="22">sizeof <argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">cache<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
  <for pos:line="14" pos:column="3">for <control pos:line="14" pos:column="7">(<init><expr><name pos:line="14" pos:column="8">hook<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">=<pos:position pos:line="14" pos:column="14"/></operator> <name pos:line="14" pos:column="15">Hooks<pos:position pos:line="14" pos:column="20"/></name></expr>;<pos:position pos:line="14" pos:column="21"/></init> <condition><expr><name pos:line="14" pos:column="22">hook<pos:position pos:line="14" pos:column="26"/></name></expr>;<pos:position pos:line="14" pos:column="27"/></condition> <incr><expr><name pos:line="14" pos:column="28">hook<pos:position pos:line="14" pos:column="32"/></name> <operator pos:line="14" pos:column="33">=<pos:position pos:line="14" pos:column="34"/></operator> <name><name pos:line="14" pos:column="35">hook<pos:position pos:line="14" pos:column="39"/></name><operator pos:line="14" pos:column="39">-&gt;<pos:position pos:line="14" pos:column="44"/></operator><name pos:line="14" pos:column="41">next<pos:position pos:line="14" pos:column="45"/></name></name></expr></incr>)<pos:position pos:line="14" pos:column="46"/></control>
  <block pos:line="15" pos:column="3">{
    <if pos:line="16" pos:column="5">if<condition pos:line="16" pos:column="7">(<expr><operator pos:line="16" pos:column="8">!<pos:position pos:line="16" pos:column="9"/></operator><name><name pos:line="16" pos:column="9">hook<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">-&gt;<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="15">command<pos:position pos:line="16" pos:column="22"/></name></name></expr>)<pos:position pos:line="16" pos:column="23"/></condition><then pos:line="16" pos:column="23">
      <block type="pseudo"><continue pos:line="17" pos:column="7">continue;<pos:position pos:line="17" pos:column="16"/></continue></block></then></if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">hook<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">-&gt;<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="15">type<pos:position pos:line="19" pos:column="19"/></name></name> <operator pos:line="19" pos:column="20">&amp;<pos:position pos:line="19" pos:column="25"/></operator> <name pos:line="19" pos:column="22">type<pos:position pos:line="19" pos:column="26"/></name></expr>)<pos:position pos:line="19" pos:column="27"/></condition><then pos:line="19" pos:column="27">
      <block type="pseudo"><if pos:line="20" pos:column="7">if <condition pos:line="20" pos:column="10">(<expr><operator pos:line="20" pos:column="11">(<pos:position pos:line="20" pos:column="12"/></operator><call><name pos:line="20" pos:column="12">mutt_pattern_exec<pos:position pos:line="20" pos:column="29"/></name> <argument_list pos:line="20" pos:column="30">(<argument><expr><name><name pos:line="20" pos:column="31">hook<pos:position pos:line="20" pos:column="35"/></name><operator pos:line="20" pos:column="35">-&gt;<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="37">pattern<pos:position pos:line="20" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="46">0<pos:position pos:line="20" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="49">ctx<pos:position pos:line="20" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="54">hdr<pos:position pos:line="20" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="59">&amp;<pos:position pos:line="20" pos:column="64"/></operator><name pos:line="20" pos:column="60">cache<pos:position pos:line="20" pos:column="65"/></name></expr></argument>)<pos:position pos:line="20" pos:column="66"/></argument_list></call> <operator pos:line="20" pos:column="67">&gt;<pos:position pos:line="20" pos:column="71"/></operator> <literal type="number" pos:line="20" pos:column="69">0<pos:position pos:line="20" pos:column="70"/></literal><operator pos:line="20" pos:column="70">)<pos:position pos:line="20" pos:column="71"/></operator> <operator pos:line="20" pos:column="72">^<pos:position pos:line="20" pos:column="73"/></operator> <name><name pos:line="20" pos:column="74">hook<pos:position pos:line="20" pos:column="78"/></name><operator pos:line="20" pos:column="78">-&gt;<pos:position pos:line="20" pos:column="83"/></operator><name pos:line="20" pos:column="80">rx<pos:position pos:line="20" pos:column="82"/></name><operator pos:line="20" pos:column="82">.<pos:position pos:line="20" pos:column="83"/></operator></name><operator pos:line="20" pos:column="83">not<pos:position pos:line="20" pos:column="86"/></operator></expr>)<pos:position pos:line="20" pos:column="87"/></condition><then pos:line="20" pos:column="87">
      <block pos:line="21" pos:column="7">{
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><call><name pos:line="22" pos:column="13">mutt_parse_rc_line<pos:position pos:line="22" pos:column="31"/></name> <argument_list pos:line="22" pos:column="32">(<argument><expr><name><name pos:line="22" pos:column="33">hook<pos:position pos:line="22" pos:column="37"/></name><operator pos:line="22" pos:column="37">-&gt;<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="39">command<pos:position pos:line="22" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="48">&amp;<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="49">token<pos:position pos:line="22" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="56">&amp;<pos:position pos:line="22" pos:column="61"/></operator><name pos:line="22" pos:column="57">err<pos:position pos:line="22" pos:column="60"/></name></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call> <operator pos:line="22" pos:column="62">!=<pos:position pos:line="22" pos:column="64"/></operator> <literal type="number" pos:line="22" pos:column="65">0<pos:position pos:line="22" pos:column="66"/></literal></expr>)<pos:position pos:line="22" pos:column="67"/></condition><then pos:line="22" pos:column="67">
	<block pos:line="23" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="24" pos:column="11">FREE<pos:position pos:line="24" pos:column="15"/></name> <argument_list pos:line="24" pos:column="16">(<argument><expr><operator pos:line="24" pos:column="17">&amp;<pos:position pos:line="24" pos:column="22"/></operator><name><name pos:line="24" pos:column="18">token<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">.<pos:position pos:line="24" pos:column="24"/></operator><name pos:line="24" pos:column="24">data<pos:position pos:line="24" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="25" pos:column="11">mutt_error<pos:position pos:line="25" pos:column="21"/></name> <argument_list pos:line="25" pos:column="22">(<argument><expr><literal type="string" pos:line="25" pos:column="23">"%s"<pos:position pos:line="25" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="29">err<pos:position pos:line="25" pos:column="32"/></name><operator pos:line="25" pos:column="32">.<pos:position pos:line="25" pos:column="33"/></operator><name pos:line="25" pos:column="33">data<pos:position pos:line="25" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="26" pos:column="11">mutt_sleep<pos:position pos:line="26" pos:column="21"/></name> <argument_list pos:line="26" pos:column="22">(<argument><expr><literal type="number" pos:line="26" pos:column="23">1<pos:position pos:line="26" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="27" pos:column="11">current_hook_type<pos:position pos:line="27" pos:column="28"/></name> <operator pos:line="27" pos:column="29">=<pos:position pos:line="27" pos:column="30"/></operator> <literal type="number" pos:line="27" pos:column="31">0<pos:position pos:line="27" pos:column="32"/></literal></expr>;<pos:position pos:line="27" pos:column="33"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="28" pos:column="11">FREE<pos:position pos:line="28" pos:column="15"/></name> <argument_list pos:line="28" pos:column="16">(<argument><expr><operator pos:line="28" pos:column="17">&amp;<pos:position pos:line="28" pos:column="22"/></operator><name><name pos:line="28" pos:column="18">err<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">.<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="22">data<pos:position pos:line="28" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt>

	  <return pos:line="30" pos:column="11">return;<pos:position pos:line="30" pos:column="18"/></return>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="32" pos:column="9">/* Executing arbitrary commands could affect the pattern results,
         * so the cache has to be wiped */</comment>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">memset<pos:position pos:line="34" pos:column="15"/></name> <argument_list pos:line="34" pos:column="16">(<argument><expr><operator pos:line="34" pos:column="17">&amp;<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="18">cache<pos:position pos:line="34" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="25">0<pos:position pos:line="34" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="28">sizeof <argument_list pos:line="34" pos:column="35">(<argument><expr><name pos:line="34" pos:column="36">cache<pos:position pos:line="34" pos:column="41"/></name></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="44"/></expr_stmt>
      }<pos:position pos:line="35" pos:column="8"/></block></then></if></block></then></if>
  }<pos:position pos:line="36" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">FREE<pos:position pos:line="37" pos:column="7"/></name> <argument_list pos:line="37" pos:column="8">(<argument><expr><operator pos:line="37" pos:column="9">&amp;<pos:position pos:line="37" pos:column="14"/></operator><name><name pos:line="37" pos:column="10">token<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">.<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="16">data<pos:position pos:line="37" pos:column="20"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="38" pos:column="3">FREE<pos:position pos:line="38" pos:column="7"/></name> <argument_list pos:line="38" pos:column="8">(<argument><expr><operator pos:line="38" pos:column="9">&amp;<pos:position pos:line="38" pos:column="14"/></operator><name><name pos:line="38" pos:column="10">err<pos:position pos:line="38" pos:column="13"/></name><operator pos:line="38" pos:column="13">.<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">data<pos:position pos:line="38" pos:column="18"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><name pos:line="40" pos:column="3">current_hook_type<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <literal type="number" pos:line="40" pos:column="23">0<pos:position pos:line="40" pos:column="24"/></literal></expr>;<pos:position pos:line="40" pos:column="25"/></expr_stmt>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
