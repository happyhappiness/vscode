<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_2016_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">imap_cmd_step<pos:position pos:line="1" pos:column="18"/></name> <parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">IMAP_DATA<pos:position pos:line="1" pos:column="29"/></name><modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type> <name pos:line="1" pos:column="31">idata<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">len<pos:position pos:line="3" pos:column="13"/></name> <init pos:line="3" pos:column="14">= <expr><literal type="number" pos:line="3" pos:column="16">0<pos:position pos:line="3" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">c<pos:position pos:line="4" pos:column="8"/></name></decl>;<pos:position pos:line="4" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">rc<pos:position pos:line="5" pos:column="9"/></name></decl>;<pos:position pos:line="5" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">stillrunning<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">IMAP_COMMAND<pos:position pos:line="7" pos:column="15"/></name><modifier pos:line="7" pos:column="15">*<pos:position pos:line="7" pos:column="16"/></modifier></type> <name pos:line="7" pos:column="17">cmd<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name><name pos:line="9" pos:column="7">idata<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">-&gt;<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="14">status<pos:position pos:line="9" pos:column="20"/></name></name> <operator pos:line="9" pos:column="21">==<pos:position pos:line="9" pos:column="23"/></operator> <name pos:line="9" pos:column="24">IMAP_FATAL<pos:position pos:line="9" pos:column="34"/></name></expr>)<pos:position pos:line="9" pos:column="35"/></condition><then pos:line="9" pos:column="35">
  <block pos:line="10" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">cmd_handle_fatal<pos:position pos:line="11" pos:column="21"/></name> <argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">idata<pos:position pos:line="11" pos:column="28"/></name></expr></argument>)<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">IMAP_CMD_BAD<pos:position pos:line="12" pos:column="24"/></name></expr>;<pos:position pos:line="12" pos:column="25"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="15" pos:column="3">/* read into buffer, expanding buffer as necessary until we have a full
   * line */</comment>
  <do pos:line="17" pos:column="3">do
  <block pos:line="18" pos:column="3">{
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">len<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">==<pos:position pos:line="19" pos:column="15"/></operator> <name><name pos:line="19" pos:column="16">idata<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">-&gt;<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="23">blen<pos:position pos:line="19" pos:column="27"/></name></name></expr>)<pos:position pos:line="19" pos:column="28"/></condition><then pos:line="19" pos:column="28">
    <block pos:line="20" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">safe_realloc<pos:position pos:line="21" pos:column="19"/></name> <argument_list pos:line="21" pos:column="20">(<argument><expr><operator pos:line="21" pos:column="21">&amp;<pos:position pos:line="21" pos:column="26"/></operator><name><name pos:line="21" pos:column="22">idata<pos:position pos:line="21" pos:column="27"/></name><operator pos:line="21" pos:column="27">-&gt;<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="29">buf<pos:position pos:line="21" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="34">idata<pos:position pos:line="21" pos:column="39"/></name><operator pos:line="21" pos:column="39">-&gt;<pos:position pos:line="21" pos:column="44"/></operator><name pos:line="21" pos:column="41">blen<pos:position pos:line="21" pos:column="45"/></name></name> <operator pos:line="21" pos:column="46">+<pos:position pos:line="21" pos:column="47"/></operator> <name pos:line="21" pos:column="48">IMAP_CMD_BUFSIZE<pos:position pos:line="21" pos:column="64"/></name></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="22" pos:column="7">idata<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">blen<pos:position pos:line="22" pos:column="18"/></name></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <name><name pos:line="22" pos:column="21">idata<pos:position pos:line="22" pos:column="26"/></name><operator pos:line="22" pos:column="26">-&gt;<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="28">blen<pos:position pos:line="22" pos:column="32"/></name></name> <operator pos:line="22" pos:column="33">+<pos:position pos:line="22" pos:column="34"/></operator> <name pos:line="22" pos:column="35">IMAP_CMD_BUFSIZE<pos:position pos:line="22" pos:column="51"/></name></expr>;<pos:position pos:line="22" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="23" pos:column="7">dprint<pos:position pos:line="23" pos:column="13"/></name> <argument_list pos:line="23" pos:column="14">(<argument><expr><literal type="number" pos:line="23" pos:column="15">3<pos:position pos:line="23" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="23" pos:column="18">(<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="19">debugfile<pos:position pos:line="23" pos:column="28"/></name><operator pos:line="23" pos:column="28">,<pos:position pos:line="23" pos:column="29"/></operator> <literal type="string" pos:line="23" pos:column="30">"imap_cmd_step: grew buffer to %u bytes\n"<pos:position pos:line="23" pos:column="72"/></literal><operator pos:line="23" pos:column="72">,<pos:position pos:line="23" pos:column="73"/></operator>
		  <name><name pos:line="24" pos:column="19">idata<pos:position pos:line="24" pos:column="24"/></name><operator pos:line="24" pos:column="24">-&gt;<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="26">blen<pos:position pos:line="24" pos:column="30"/></name></name><operator pos:line="24" pos:column="30">)<pos:position pos:line="24" pos:column="31"/></operator></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="27" pos:column="5">/* back up over '\0' */</comment>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">len<pos:position pos:line="28" pos:column="12"/></name></expr>)<pos:position pos:line="28" pos:column="13"/></condition><then pos:line="28" pos:column="13">
      <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="7">len<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">--<pos:position pos:line="29" pos:column="12"/></operator></expr>;<pos:position pos:line="29" pos:column="13"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="30" pos:column="5">c<pos:position pos:line="30" pos:column="6"/></name> <operator pos:line="30" pos:column="7">=<pos:position pos:line="30" pos:column="8"/></operator> <call><name pos:line="30" pos:column="9">mutt_socket_readln<pos:position pos:line="30" pos:column="27"/></name> <argument_list pos:line="30" pos:column="28">(<argument><expr><name><name pos:line="30" pos:column="29">idata<pos:position pos:line="30" pos:column="34"/></name><operator pos:line="30" pos:column="34">-&gt;<pos:position pos:line="30" pos:column="39"/></operator><name pos:line="30" pos:column="36">buf<pos:position pos:line="30" pos:column="39"/></name></name> <operator pos:line="30" pos:column="40">+<pos:position pos:line="30" pos:column="41"/></operator> <name pos:line="30" pos:column="42">len<pos:position pos:line="30" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="47">idata<pos:position pos:line="30" pos:column="52"/></name><operator pos:line="30" pos:column="52">-&gt;<pos:position pos:line="30" pos:column="57"/></operator><name pos:line="30" pos:column="54">blen<pos:position pos:line="30" pos:column="58"/></name></name> <operator pos:line="30" pos:column="59">-<pos:position pos:line="30" pos:column="60"/></operator> <name pos:line="30" pos:column="61">len<pos:position pos:line="30" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="66">idata<pos:position pos:line="30" pos:column="71"/></name><operator pos:line="30" pos:column="71">-&gt;<pos:position pos:line="30" pos:column="76"/></operator><name pos:line="30" pos:column="73">conn<pos:position pos:line="30" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="79"/></expr_stmt>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">c<pos:position pos:line="31" pos:column="10"/></name> <operator pos:line="31" pos:column="11">&lt;=<pos:position pos:line="31" pos:column="16"/></operator> <literal type="number" pos:line="31" pos:column="14">0<pos:position pos:line="31" pos:column="15"/></literal></expr>)<pos:position pos:line="31" pos:column="16"/></condition><then pos:line="31" pos:column="16">
    <block pos:line="32" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">dprint<pos:position pos:line="33" pos:column="13"/></name> <argument_list pos:line="33" pos:column="14">(<argument><expr><literal type="number" pos:line="33" pos:column="15">1<pos:position pos:line="33" pos:column="16"/></literal></expr></argument>, <argument><expr><operator pos:line="33" pos:column="18">(<pos:position pos:line="33" pos:column="19"/></operator><name pos:line="33" pos:column="19">debugfile<pos:position pos:line="33" pos:column="28"/></name><operator pos:line="33" pos:column="28">,<pos:position pos:line="33" pos:column="29"/></operator> <literal type="string" pos:line="33" pos:column="30">"imap_cmd_step: Error reading server response.\n"<pos:position pos:line="33" pos:column="79"/></literal><operator pos:line="33" pos:column="79">)<pos:position pos:line="33" pos:column="80"/></operator></expr></argument>)<pos:position pos:line="33" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="82"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="34" pos:column="7">cmd_handle_fatal<pos:position pos:line="34" pos:column="23"/></name> <argument_list pos:line="34" pos:column="24">(<argument><expr><name pos:line="34" pos:column="25">idata<pos:position pos:line="34" pos:column="30"/></name></expr></argument>)<pos:position pos:line="34" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>
      <return pos:line="35" pos:column="7">return <expr><name pos:line="35" pos:column="14">IMAP_CMD_BAD<pos:position pos:line="35" pos:column="26"/></name></expr>;<pos:position pos:line="35" pos:column="27"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="38" pos:column="5">len<pos:position pos:line="38" pos:column="8"/></name> <operator pos:line="38" pos:column="9">+=<pos:position pos:line="38" pos:column="11"/></operator> <name pos:line="38" pos:column="12">c<pos:position pos:line="38" pos:column="13"/></name></expr>;<pos:position pos:line="38" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="39" pos:column="4"/></block>
  <comment type="block" pos:line="40" pos:column="3">/* if we've read all the way to the end of the buffer, we haven't read a
   * full line (mutt_socket_readln strips the \r, so we always have at least
   * one character free when we've read a full line) */</comment>
  while <condition pos:line="43" pos:column="9">(<expr><name pos:line="43" pos:column="10">len<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">==<pos:position pos:line="43" pos:column="16"/></operator> <name><name pos:line="43" pos:column="17">idata<pos:position pos:line="43" pos:column="22"/></name><operator pos:line="43" pos:column="22">-&gt;<pos:position pos:line="43" pos:column="27"/></operator><name pos:line="43" pos:column="24">blen<pos:position pos:line="43" pos:column="28"/></name></name></expr>)<pos:position pos:line="43" pos:column="29"/></condition>;<pos:position pos:line="43" pos:column="30"/></do>

  <comment type="block" pos:line="45" pos:column="3">/* don't let one large string make cmd-&gt;buf hog memory forever */</comment>
  <if pos:line="46" pos:column="3">if <condition pos:line="46" pos:column="6">(<expr><operator pos:line="46" pos:column="7">(<pos:position pos:line="46" pos:column="8"/></operator><name><name pos:line="46" pos:column="8">idata<pos:position pos:line="46" pos:column="13"/></name><operator pos:line="46" pos:column="13">-&gt;<pos:position pos:line="46" pos:column="18"/></operator><name pos:line="46" pos:column="15">blen<pos:position pos:line="46" pos:column="19"/></name></name> <operator pos:line="46" pos:column="20">&gt;<pos:position pos:line="46" pos:column="24"/></operator> <name pos:line="46" pos:column="22">IMAP_CMD_BUFSIZE<pos:position pos:line="46" pos:column="38"/></name><operator pos:line="46" pos:column="38">)<pos:position pos:line="46" pos:column="39"/></operator> <operator pos:line="46" pos:column="40">&amp;&amp;<pos:position pos:line="46" pos:column="50"/></operator> <operator pos:line="46" pos:column="43">(<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="44">len<pos:position pos:line="46" pos:column="47"/></name> <operator pos:line="46" pos:column="48">&lt;=<pos:position pos:line="46" pos:column="53"/></operator> <name pos:line="46" pos:column="51">IMAP_CMD_BUFSIZE<pos:position pos:line="46" pos:column="67"/></name><operator pos:line="46" pos:column="67">)<pos:position pos:line="46" pos:column="68"/></operator></expr>)<pos:position pos:line="46" pos:column="69"/></condition><then pos:line="46" pos:column="69">
  <block pos:line="47" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">safe_realloc<pos:position pos:line="48" pos:column="17"/></name> <argument_list pos:line="48" pos:column="18">(<argument><expr><operator pos:line="48" pos:column="19">&amp;<pos:position pos:line="48" pos:column="24"/></operator><name><name pos:line="48" pos:column="20">idata<pos:position pos:line="48" pos:column="25"/></name><operator pos:line="48" pos:column="25">-&gt;<pos:position pos:line="48" pos:column="30"/></operator><name pos:line="48" pos:column="27">buf<pos:position pos:line="48" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="32">IMAP_CMD_BUFSIZE<pos:position pos:line="48" pos:column="48"/></name></expr></argument>)<pos:position pos:line="48" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="49" pos:column="5">idata<pos:position pos:line="49" pos:column="10"/></name><operator pos:line="49" pos:column="10">-&gt;<pos:position pos:line="49" pos:column="15"/></operator><name pos:line="49" pos:column="12">blen<pos:position pos:line="49" pos:column="16"/></name></name> <operator pos:line="49" pos:column="17">=<pos:position pos:line="49" pos:column="18"/></operator> <name pos:line="49" pos:column="19">IMAP_CMD_BUFSIZE<pos:position pos:line="49" pos:column="35"/></name></expr>;<pos:position pos:line="49" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">dprint<pos:position pos:line="50" pos:column="11"/></name> <argument_list pos:line="50" pos:column="12">(<argument><expr><literal type="number" pos:line="50" pos:column="13">3<pos:position pos:line="50" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="50" pos:column="16">(<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="17">debugfile<pos:position pos:line="50" pos:column="26"/></name><operator pos:line="50" pos:column="26">,<pos:position pos:line="50" pos:column="27"/></operator> <literal type="string" pos:line="50" pos:column="28">"imap_cmd_step: shrank buffer to %u bytes\n"<pos:position pos:line="50" pos:column="72"/></literal><operator pos:line="50" pos:column="72">,<pos:position pos:line="50" pos:column="73"/></operator> <name><name pos:line="50" pos:column="74">idata<pos:position pos:line="50" pos:column="79"/></name><operator pos:line="50" pos:column="79">-&gt;<pos:position pos:line="50" pos:column="84"/></operator><name pos:line="50" pos:column="81">blen<pos:position pos:line="50" pos:column="85"/></name></name><operator pos:line="50" pos:column="85">)<pos:position pos:line="50" pos:column="86"/></operator></expr></argument>)<pos:position pos:line="50" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="88"/></expr_stmt>
  }<pos:position pos:line="51" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="53" pos:column="3">idata<pos:position pos:line="53" pos:column="8"/></name><operator pos:line="53" pos:column="8">-&gt;<pos:position pos:line="53" pos:column="13"/></operator><name pos:line="53" pos:column="10">lastread<pos:position pos:line="53" pos:column="18"/></name></name> <operator pos:line="53" pos:column="19">=<pos:position pos:line="53" pos:column="20"/></operator> <call><name pos:line="53" pos:column="21">time<pos:position pos:line="53" pos:column="25"/></name> <argument_list pos:line="53" pos:column="26">(<argument><expr><name pos:line="53" pos:column="27">NULL<pos:position pos:line="53" pos:column="31"/></name></expr></argument>)<pos:position pos:line="53" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="33"/></expr_stmt>

  <comment type="block" pos:line="55" pos:column="3">/* handle untagged messages. The caller still gets its shot afterwards. */</comment>
  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><operator pos:line="56" pos:column="7">(<pos:position pos:line="56" pos:column="8"/></operator><operator pos:line="56" pos:column="8">!<pos:position pos:line="56" pos:column="9"/></operator><call><name pos:line="56" pos:column="9">ascii_strncmp<pos:position pos:line="56" pos:column="22"/></name> <argument_list pos:line="56" pos:column="23">(<argument><expr><name><name pos:line="56" pos:column="24">idata<pos:position pos:line="56" pos:column="29"/></name><operator pos:line="56" pos:column="29">-&gt;<pos:position pos:line="56" pos:column="34"/></operator><name pos:line="56" pos:column="31">buf<pos:position pos:line="56" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="36">"* "<pos:position pos:line="56" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="42">2<pos:position pos:line="56" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="44"/></argument_list></call>
       <operator pos:line="57" pos:column="8">||<pos:position pos:line="57" pos:column="10"/></operator> <operator pos:line="57" pos:column="11">!<pos:position pos:line="57" pos:column="12"/></operator><call><name pos:line="57" pos:column="12">ascii_strncmp<pos:position pos:line="57" pos:column="25"/></name> <argument_list pos:line="57" pos:column="26">(<argument><expr><call><name pos:line="57" pos:column="27">imap_next_word<pos:position pos:line="57" pos:column="41"/></name> <argument_list pos:line="57" pos:column="42">(<argument><expr><name><name pos:line="57" pos:column="43">idata<pos:position pos:line="57" pos:column="48"/></name><operator pos:line="57" pos:column="48">-&gt;<pos:position pos:line="57" pos:column="53"/></operator><name pos:line="57" pos:column="50">buf<pos:position pos:line="57" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="56">"OK ["<pos:position pos:line="57" pos:column="62"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="64">4<pos:position pos:line="57" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="66"/></argument_list></call><operator pos:line="57" pos:column="66">)<pos:position pos:line="57" pos:column="67"/></operator>
      <operator pos:line="58" pos:column="7">&amp;&amp;<pos:position pos:line="58" pos:column="17"/></operator> <call><name pos:line="58" pos:column="10">cmd_handle_untagged<pos:position pos:line="58" pos:column="29"/></name> <argument_list pos:line="58" pos:column="30">(<argument><expr><name pos:line="58" pos:column="31">idata<pos:position pos:line="58" pos:column="36"/></name></expr></argument>)<pos:position pos:line="58" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="38"/></condition><then pos:line="58" pos:column="38">
    <block type="pseudo"><return pos:line="59" pos:column="5">return <expr><name pos:line="59" pos:column="12">IMAP_CMD_BAD<pos:position pos:line="59" pos:column="24"/></name></expr>;<pos:position pos:line="59" pos:column="25"/></return></block></then></if>

  <comment type="block" pos:line="61" pos:column="3">/* server demands a continuation response from us */</comment>
  <if pos:line="62" pos:column="3">if <condition pos:line="62" pos:column="6">(<expr><name><name pos:line="62" pos:column="7">idata<pos:position pos:line="62" pos:column="12"/></name><operator pos:line="62" pos:column="12">-&gt;<pos:position pos:line="62" pos:column="17"/></operator><name pos:line="62" pos:column="14">buf<pos:position pos:line="62" pos:column="17"/></name><index pos:line="62" pos:column="17">[<expr><literal type="number" pos:line="62" pos:column="18">0<pos:position pos:line="62" pos:column="19"/></literal></expr>]<pos:position pos:line="62" pos:column="20"/></index></name> <operator pos:line="62" pos:column="21">==<pos:position pos:line="62" pos:column="23"/></operator> <literal type="char" pos:line="62" pos:column="24">'+'<pos:position pos:line="62" pos:column="27"/></literal></expr>)<pos:position pos:line="62" pos:column="28"/></condition><then pos:line="62" pos:column="28">
    <block type="pseudo"><return pos:line="63" pos:column="5">return <expr><name pos:line="63" pos:column="12">IMAP_CMD_RESPOND<pos:position pos:line="63" pos:column="28"/></name></expr>;<pos:position pos:line="63" pos:column="29"/></return></block></then></if>

  <comment type="block" pos:line="65" pos:column="3">/* Look for tagged command completions.
   *
   * Some response handlers can end up recursively calling
   * imap_cmd_step() and end up handling all tagged command
   * completions.
   * (e.g. FETCH-&gt;set_flag-&gt;set_header_color-&gt;~h pattern match.)
   *
   * Other callers don't even create an idata-&gt;cmds entry.
   *
   * For both these cases, we default to returning OK */</comment>
  <expr_stmt><expr><name pos:line="75" pos:column="3">rc<pos:position pos:line="75" pos:column="5"/></name> <operator pos:line="75" pos:column="6">=<pos:position pos:line="75" pos:column="7"/></operator> <name pos:line="75" pos:column="8">IMAP_CMD_OK<pos:position pos:line="75" pos:column="19"/></name></expr>;<pos:position pos:line="75" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="76" pos:column="3">c<pos:position pos:line="76" pos:column="4"/></name> <operator pos:line="76" pos:column="5">=<pos:position pos:line="76" pos:column="6"/></operator> <name><name pos:line="76" pos:column="7">idata<pos:position pos:line="76" pos:column="12"/></name><operator pos:line="76" pos:column="12">-&gt;<pos:position pos:line="76" pos:column="17"/></operator><name pos:line="76" pos:column="14">lastcmd<pos:position pos:line="76" pos:column="21"/></name></name></expr>;<pos:position pos:line="76" pos:column="22"/></expr_stmt>
  <do pos:line="77" pos:column="3">do
  <block pos:line="78" pos:column="3">{
    <expr_stmt><expr><name pos:line="79" pos:column="5">cmd<pos:position pos:line="79" pos:column="8"/></name> <operator pos:line="79" pos:column="9">=<pos:position pos:line="79" pos:column="10"/></operator> <operator pos:line="79" pos:column="11">&amp;<pos:position pos:line="79" pos:column="16"/></operator><name><name pos:line="79" pos:column="12">idata<pos:position pos:line="79" pos:column="17"/></name><operator pos:line="79" pos:column="17">-&gt;<pos:position pos:line="79" pos:column="22"/></operator><name pos:line="79" pos:column="19">cmds<pos:position pos:line="79" pos:column="23"/></name><index pos:line="79" pos:column="23">[<expr><name pos:line="79" pos:column="24">c<pos:position pos:line="79" pos:column="25"/></name></expr>]<pos:position pos:line="79" pos:column="26"/></index></name></expr>;<pos:position pos:line="79" pos:column="27"/></expr_stmt>
    <if pos:line="80" pos:column="5">if <condition pos:line="80" pos:column="8">(<expr><name><name pos:line="80" pos:column="9">cmd<pos:position pos:line="80" pos:column="12"/></name><operator pos:line="80" pos:column="12">-&gt;<pos:position pos:line="80" pos:column="17"/></operator><name pos:line="80" pos:column="14">state<pos:position pos:line="80" pos:column="19"/></name></name> <operator pos:line="80" pos:column="20">==<pos:position pos:line="80" pos:column="22"/></operator> <name pos:line="80" pos:column="23">IMAP_CMD_NEW<pos:position pos:line="80" pos:column="35"/></name></expr>)<pos:position pos:line="80" pos:column="36"/></condition><then pos:line="80" pos:column="36">
    <block pos:line="81" pos:column="5">{
      <if pos:line="82" pos:column="7">if <condition pos:line="82" pos:column="10">(<expr><operator pos:line="82" pos:column="11">!<pos:position pos:line="82" pos:column="12"/></operator><call><name pos:line="82" pos:column="12">ascii_strncmp<pos:position pos:line="82" pos:column="25"/></name> <argument_list pos:line="82" pos:column="26">(<argument><expr><name><name pos:line="82" pos:column="27">idata<pos:position pos:line="82" pos:column="32"/></name><operator pos:line="82" pos:column="32">-&gt;<pos:position pos:line="82" pos:column="37"/></operator><name pos:line="82" pos:column="34">buf<pos:position pos:line="82" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="39">cmd<pos:position pos:line="82" pos:column="42"/></name><operator pos:line="82" pos:column="42">-&gt;<pos:position pos:line="82" pos:column="47"/></operator><name pos:line="82" pos:column="44">seq<pos:position pos:line="82" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="49">SEQLEN<pos:position pos:line="82" pos:column="55"/></name></expr></argument>)<pos:position pos:line="82" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="82" pos:column="57"/></condition><then pos:line="82" pos:column="57"> <block pos:line="82" pos:column="58">{
	<if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><operator pos:line="83" pos:column="13">!<pos:position pos:line="83" pos:column="14"/></operator><name pos:line="83" pos:column="14">stillrunning<pos:position pos:line="83" pos:column="26"/></name></expr>)<pos:position pos:line="83" pos:column="27"/></condition><then pos:line="83" pos:column="27">
	<block pos:line="84" pos:column="9">{
	  <comment type="block" pos:line="85" pos:column="11">/* first command in queue has finished - move queue pointer up */</comment>
	  <expr_stmt><expr><name><name pos:line="86" pos:column="11">idata<pos:position pos:line="86" pos:column="16"/></name><operator pos:line="86" pos:column="16">-&gt;<pos:position pos:line="86" pos:column="21"/></operator><name pos:line="86" pos:column="18">lastcmd<pos:position pos:line="86" pos:column="25"/></name></name> <operator pos:line="86" pos:column="26">=<pos:position pos:line="86" pos:column="27"/></operator> <operator pos:line="86" pos:column="28">(<pos:position pos:line="86" pos:column="29"/></operator><name><name pos:line="86" pos:column="29">idata<pos:position pos:line="86" pos:column="34"/></name><operator pos:line="86" pos:column="34">-&gt;<pos:position pos:line="86" pos:column="39"/></operator><name pos:line="86" pos:column="36">lastcmd<pos:position pos:line="86" pos:column="43"/></name></name> <operator pos:line="86" pos:column="44">+<pos:position pos:line="86" pos:column="45"/></operator> <literal type="number" pos:line="86" pos:column="46">1<pos:position pos:line="86" pos:column="47"/></literal><operator pos:line="86" pos:column="47">)<pos:position pos:line="86" pos:column="48"/></operator> <operator pos:line="86" pos:column="49">%<pos:position pos:line="86" pos:column="50"/></operator> <name><name pos:line="86" pos:column="51">idata<pos:position pos:line="86" pos:column="56"/></name><operator pos:line="86" pos:column="56">-&gt;<pos:position pos:line="86" pos:column="61"/></operator><name pos:line="86" pos:column="58">cmdslots<pos:position pos:line="86" pos:column="66"/></name></name></expr>;<pos:position pos:line="86" pos:column="67"/></expr_stmt>
	}<pos:position pos:line="87" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="88" pos:column="9">cmd<pos:position pos:line="88" pos:column="12"/></name><operator pos:line="88" pos:column="12">-&gt;<pos:position pos:line="88" pos:column="17"/></operator><name pos:line="88" pos:column="14">state<pos:position pos:line="88" pos:column="19"/></name></name> <operator pos:line="88" pos:column="20">=<pos:position pos:line="88" pos:column="21"/></operator> <call><name pos:line="88" pos:column="22">cmd_status<pos:position pos:line="88" pos:column="32"/></name> <argument_list pos:line="88" pos:column="33">(<argument><expr><name><name pos:line="88" pos:column="34">idata<pos:position pos:line="88" pos:column="39"/></name><operator pos:line="88" pos:column="39">-&gt;<pos:position pos:line="88" pos:column="44"/></operator><name pos:line="88" pos:column="41">buf<pos:position pos:line="88" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="46"/></expr_stmt>
	<comment type="block" pos:line="89" pos:column="9">/* bogus - we don't know which command result to return here. Caller
	 * should provide a tag. */</comment>
	<expr_stmt><expr><name pos:line="91" pos:column="9">rc<pos:position pos:line="91" pos:column="11"/></name> <operator pos:line="91" pos:column="12">=<pos:position pos:line="91" pos:column="13"/></operator> <name><name pos:line="91" pos:column="14">cmd<pos:position pos:line="91" pos:column="17"/></name><operator pos:line="91" pos:column="17">-&gt;<pos:position pos:line="91" pos:column="22"/></operator><name pos:line="91" pos:column="19">state<pos:position pos:line="91" pos:column="24"/></name></name></expr>;<pos:position pos:line="91" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="92" pos:column="8"/></block></then>
      <else pos:line="93" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><name pos:line="94" pos:column="9">stillrunning<pos:position pos:line="94" pos:column="21"/></name><operator pos:line="94" pos:column="21">++<pos:position pos:line="94" pos:column="23"/></operator></expr>;<pos:position pos:line="94" pos:column="24"/></expr_stmt></block></else></if>
    }<pos:position pos:line="95" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="97" pos:column="5">c<pos:position pos:line="97" pos:column="6"/></name> <operator pos:line="97" pos:column="7">=<pos:position pos:line="97" pos:column="8"/></operator> <operator pos:line="97" pos:column="9">(<pos:position pos:line="97" pos:column="10"/></operator><name pos:line="97" pos:column="10">c<pos:position pos:line="97" pos:column="11"/></name> <operator pos:line="97" pos:column="12">+<pos:position pos:line="97" pos:column="13"/></operator> <literal type="number" pos:line="97" pos:column="14">1<pos:position pos:line="97" pos:column="15"/></literal><operator pos:line="97" pos:column="15">)<pos:position pos:line="97" pos:column="16"/></operator> <operator pos:line="97" pos:column="17">%<pos:position pos:line="97" pos:column="18"/></operator> <name><name pos:line="97" pos:column="19">idata<pos:position pos:line="97" pos:column="24"/></name><operator pos:line="97" pos:column="24">-&gt;<pos:position pos:line="97" pos:column="29"/></operator><name pos:line="97" pos:column="26">cmdslots<pos:position pos:line="97" pos:column="34"/></name></name></expr>;<pos:position pos:line="97" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="98" pos:column="4"/></block>
  while <condition pos:line="99" pos:column="9">(<expr><name pos:line="99" pos:column="10">c<pos:position pos:line="99" pos:column="11"/></name> <operator pos:line="99" pos:column="12">!=<pos:position pos:line="99" pos:column="14"/></operator> <name><name pos:line="99" pos:column="15">idata<pos:position pos:line="99" pos:column="20"/></name><operator pos:line="99" pos:column="20">-&gt;<pos:position pos:line="99" pos:column="25"/></operator><name pos:line="99" pos:column="22">nextcmd<pos:position pos:line="99" pos:column="29"/></name></name></expr>)<pos:position pos:line="99" pos:column="30"/></condition>;<pos:position pos:line="99" pos:column="31"/></do>

  <if pos:line="101" pos:column="3">if <condition pos:line="101" pos:column="6">(<expr><name pos:line="101" pos:column="7">stillrunning<pos:position pos:line="101" pos:column="19"/></name></expr>)<pos:position pos:line="101" pos:column="20"/></condition><then pos:line="101" pos:column="20">
    <block type="pseudo"><expr_stmt><expr><name pos:line="102" pos:column="5">rc<pos:position pos:line="102" pos:column="7"/></name> <operator pos:line="102" pos:column="8">=<pos:position pos:line="102" pos:column="9"/></operator> <name pos:line="102" pos:column="10">IMAP_CMD_CONTINUE<pos:position pos:line="102" pos:column="27"/></name></expr>;<pos:position pos:line="102" pos:column="28"/></expr_stmt></block></then>
  <else pos:line="103" pos:column="3">else
  <block pos:line="104" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="105" pos:column="5">dprint<pos:position pos:line="105" pos:column="11"/></name> <argument_list pos:line="105" pos:column="12">(<argument><expr><literal type="number" pos:line="105" pos:column="13">3<pos:position pos:line="105" pos:column="14"/></literal></expr></argument>, <argument><expr><operator pos:line="105" pos:column="16">(<pos:position pos:line="105" pos:column="17"/></operator><name pos:line="105" pos:column="17">debugfile<pos:position pos:line="105" pos:column="26"/></name><operator pos:line="105" pos:column="26">,<pos:position pos:line="105" pos:column="27"/></operator> <literal type="string" pos:line="105" pos:column="28">"IMAP queue drained\n"<pos:position pos:line="105" pos:column="50"/></literal><operator pos:line="105" pos:column="50">)<pos:position pos:line="105" pos:column="51"/></operator></expr></argument>)<pos:position pos:line="105" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="106" pos:column="5">imap_cmd_finish<pos:position pos:line="106" pos:column="20"/></name> <argument_list pos:line="106" pos:column="21">(<argument><expr><name pos:line="106" pos:column="22">idata<pos:position pos:line="106" pos:column="27"/></name></expr></argument>)<pos:position pos:line="106" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="107" pos:column="4"/></block></else></if>
  

  <return pos:line="110" pos:column="3">return <expr><name pos:line="110" pos:column="10">rc<pos:position pos:line="110" pos:column="12"/></name></expr>;<pos:position pos:line="110" pos:column="13"/></return>
}<pos:position pos:line="111" pos:column="2"/></block></function></unit>
