<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1059_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">restore_char<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">char<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier><modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">c<pos:position pos:line="2" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="24">const<pos:position pos:line="2" pos:column="29"/></specifier> <name pos:line="2" pos:column="30">unsigned<pos:position pos:line="2" pos:column="38"/></name> <name pos:line="2" pos:column="39">char<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">d<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">int<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="53">off<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="58">int<pos:position pos:line="2" pos:column="61"/></name></type> <name pos:line="2" pos:column="62">convert<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">int<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">size<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="5" pos:column="3">restore_int<pos:position pos:line="5" pos:column="14"/></name><argument_list pos:line="5" pos:column="14">(<argument><expr><operator pos:line="5" pos:column="15">&amp;<pos:position pos:line="5" pos:column="20"/></operator><name pos:line="5" pos:column="16">size<pos:position pos:line="5" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="22">d<pos:position pos:line="5" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="25">off<pos:position pos:line="5" pos:column="28"/></name></expr></argument>)<pos:position pos:line="5" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="30"/></expr_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">size<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">==<pos:position pos:line="7" pos:column="14"/></operator> <literal type="number" pos:line="7" pos:column="15">0<pos:position pos:line="7" pos:column="16"/></literal></expr>)<pos:position pos:line="7" pos:column="17"/></condition><then pos:line="7" pos:column="17">
  <block pos:line="8" pos:column="3">{
    <expr_stmt><expr><operator pos:line="9" pos:column="5">*<pos:position pos:line="9" pos:column="6"/></operator><name pos:line="9" pos:column="6">c<pos:position pos:line="9" pos:column="7"/></name> <operator pos:line="9" pos:column="8">=<pos:position pos:line="9" pos:column="9"/></operator> <name pos:line="9" pos:column="10">NULL<pos:position pos:line="9" pos:column="14"/></name></expr>;<pos:position pos:line="9" pos:column="15"/></expr_stmt>
    <return pos:line="10" pos:column="5">return;<pos:position pos:line="10" pos:column="12"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <expr_stmt><expr><operator pos:line="13" pos:column="3">*<pos:position pos:line="13" pos:column="4"/></operator><name pos:line="13" pos:column="4">c<pos:position pos:line="13" pos:column="5"/></name> <operator pos:line="13" pos:column="6">=<pos:position pos:line="13" pos:column="7"/></operator> <call><name pos:line="13" pos:column="8">safe_malloc<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name pos:line="13" pos:column="20">size<pos:position pos:line="13" pos:column="24"/></name></expr></argument>)<pos:position pos:line="13" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">memcpy<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><operator pos:line="14" pos:column="10">*<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">c<pos:position pos:line="14" pos:column="12"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="14">d<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">+<pos:position pos:line="14" pos:column="17"/></operator> <operator pos:line="14" pos:column="18">*<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="19">off<pos:position pos:line="14" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="24">size<pos:position pos:line="14" pos:column="28"/></name></expr></argument>)<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">convert<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">&amp;&amp;<pos:position pos:line="15" pos:column="25"/></operator> <operator pos:line="15" pos:column="18">!<pos:position pos:line="15" pos:column="19"/></operator><call><name pos:line="15" pos:column="19">is_ascii<pos:position pos:line="15" pos:column="27"/></name> <argument_list pos:line="15" pos:column="28">(<argument><expr><operator pos:line="15" pos:column="29">*<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="30">c<pos:position pos:line="15" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="33">size<pos:position pos:line="15" pos:column="37"/></name></expr></argument>)<pos:position pos:line="15" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="39"/></condition><then pos:line="15" pos:column="39"> <block pos:line="15" pos:column="40">{
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">char<pos:position pos:line="16" pos:column="9"/></name> <modifier pos:line="16" pos:column="10">*<pos:position pos:line="16" pos:column="11"/></modifier></type><name pos:line="16" pos:column="11">tmp<pos:position pos:line="16" pos:column="14"/></name> <init pos:line="16" pos:column="15">= <expr><call><name pos:line="16" pos:column="17">safe_strdup<pos:position pos:line="16" pos:column="28"/></name> <argument_list pos:line="16" pos:column="29">(<argument><expr><operator pos:line="16" pos:column="30">*<pos:position pos:line="16" pos:column="31"/></operator><name pos:line="16" pos:column="31">c<pos:position pos:line="16" pos:column="32"/></name></expr></argument>)<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="34"/></decl_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name pos:line="17" pos:column="9">mutt_convert_string<pos:position pos:line="17" pos:column="28"/></name> <argument_list pos:line="17" pos:column="29">(<argument><expr><operator pos:line="17" pos:column="30">&amp;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="31">tmp<pos:position pos:line="17" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="36">"utf-8"<pos:position pos:line="17" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="45">Charset<pos:position pos:line="17" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="54">0<pos:position pos:line="17" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call> <operator pos:line="17" pos:column="57">==<pos:position pos:line="17" pos:column="59"/></operator> <literal type="number" pos:line="17" pos:column="60">0<pos:position pos:line="17" pos:column="61"/></literal></expr>)<pos:position pos:line="17" pos:column="62"/></condition><then pos:line="17" pos:column="62"> <block pos:line="17" pos:column="63">{
      <expr_stmt><expr><call><name pos:line="18" pos:column="7">mutt_str_replace<pos:position pos:line="18" pos:column="23"/></name> <argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">c<pos:position pos:line="18" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="28">tmp<pos:position pos:line="18" pos:column="31"/></name></expr></argument>)<pos:position pos:line="18" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then> <else pos:line="19" pos:column="7">else <block pos:line="19" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">FREE<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><operator pos:line="20" pos:column="12">&amp;<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="13">tmp<pos:position pos:line="20" pos:column="16"/></name></expr></argument>)<pos:position pos:line="20" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></else></if>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>
  <expr_stmt><expr><operator pos:line="23" pos:column="3">*<pos:position pos:line="23" pos:column="4"/></operator><name pos:line="23" pos:column="4">off<pos:position pos:line="23" pos:column="7"/></name> <operator pos:line="23" pos:column="8">+=<pos:position pos:line="23" pos:column="10"/></operator> <name pos:line="23" pos:column="11">size<pos:position pos:line="23" pos:column="15"/></name></expr>;<pos:position pos:line="23" pos:column="16"/></expr_stmt>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
