<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_function_95.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mutt_write_rfc822_header<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">FILE<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">fp<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">ENVELOPE<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">env<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">BODY<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">attach<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="2" pos:column="31">int<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">mode<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">int<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">privacy<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">buffer<pos:position pos:line="4" pos:column="14"/></name><index pos:line="4" pos:column="14">[<expr><name pos:line="4" pos:column="15">LONG_STRING<pos:position pos:line="4" pos:column="26"/></name></expr>]<pos:position pos:line="4" pos:column="27"/></index></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">p<pos:position pos:line="5" pos:column="10"/></name></decl>, <modifier pos:line="5" pos:column="12">*<pos:position pos:line="5" pos:column="13"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="13">q<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">LIST<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">tmp<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><name><name pos:line="6" pos:column="15">env<pos:position pos:line="6" pos:column="18"/></name><operator pos:line="6" pos:column="18">-&gt;<pos:position pos:line="6" pos:column="23"/></operator><name pos:line="6" pos:column="20">userhdrs<pos:position pos:line="6" pos:column="28"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">has_agent<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><literal type="number" pos:line="7" pos:column="19">0<pos:position pos:line="7" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt> <comment type="block" pos:line="7" pos:column="22">/* user defined user-agent header field exists */</comment>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">mode<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">==<pos:position pos:line="9" pos:column="14"/></operator> <literal type="number" pos:line="9" pos:column="15">0<pos:position pos:line="9" pos:column="16"/></literal> <operator pos:line="9" pos:column="17">&amp;&amp;<pos:position pos:line="9" pos:column="27"/></operator> <operator pos:line="9" pos:column="20">!<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="21">privacy<pos:position pos:line="9" pos:column="28"/></name></expr>)<pos:position pos:line="9" pos:column="29"/></condition><then pos:line="9" pos:column="29">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="5">fputs<pos:position pos:line="10" pos:column="10"/></name> <argument_list pos:line="10" pos:column="11">(<argument><expr><call><name pos:line="10" pos:column="12">mutt_make_date<pos:position pos:line="10" pos:column="26"/></name> <argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">buffer<pos:position pos:line="10" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="36">sizeof<argument_list pos:line="10" pos:column="42">(<argument><expr><name pos:line="10" pos:column="43">buffer<pos:position pos:line="10" pos:column="49"/></name></expr></argument>)<pos:position pos:line="10" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="10" pos:column="53">fp<pos:position pos:line="10" pos:column="55"/></name></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="57"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="12" pos:column="3">/* OPTUSEFROM is not consulted here so that we can still write a From:
   * field if the user sets it with the `my_hdr' command
   */</comment>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name><name pos:line="15" pos:column="7">env<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">-&gt;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="12">from<pos:position pos:line="15" pos:column="16"/></name></name> <operator pos:line="15" pos:column="17">&amp;&amp;<pos:position pos:line="15" pos:column="27"/></operator> <operator pos:line="15" pos:column="20">!<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="21">privacy<pos:position pos:line="15" pos:column="28"/></name></expr>)<pos:position pos:line="15" pos:column="29"/></condition><then pos:line="15" pos:column="29">
  <block pos:line="16" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">buffer<pos:position pos:line="17" pos:column="11"/></name><index pos:line="17" pos:column="11">[<expr><literal type="number" pos:line="17" pos:column="12">0<pos:position pos:line="17" pos:column="13"/></literal></expr>]<pos:position pos:line="17" pos:column="14"/></index></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <literal type="number" pos:line="17" pos:column="17">0<pos:position pos:line="17" pos:column="18"/></literal></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">rfc822_write_address<pos:position pos:line="18" pos:column="25"/></name> <argument_list pos:line="18" pos:column="26">(<argument><expr><name pos:line="18" pos:column="27">buffer<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="35">sizeof <argument_list pos:line="18" pos:column="42">(<argument><expr><name pos:line="18" pos:column="43">buffer<pos:position pos:line="18" pos:column="49"/></name></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="52">env<pos:position pos:line="18" pos:column="55"/></name><operator pos:line="18" pos:column="55">-&gt;<pos:position pos:line="18" pos:column="60"/></operator><name pos:line="18" pos:column="57">from<pos:position pos:line="18" pos:column="61"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="63">0<pos:position pos:line="18" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">fprintf<pos:position pos:line="19" pos:column="12"/></name> <argument_list pos:line="19" pos:column="13">(<argument><expr><name pos:line="19" pos:column="14">fp<pos:position pos:line="19" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="18">"From: %s\n"<pos:position pos:line="19" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="32">buffer<pos:position pos:line="19" pos:column="38"/></name></expr></argument>)<pos:position pos:line="19" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><name><name pos:line="22" pos:column="7">env<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">-&gt;<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="12">sender<pos:position pos:line="22" pos:column="18"/></name></name> <operator pos:line="22" pos:column="19">&amp;&amp;<pos:position pos:line="22" pos:column="29"/></operator> <operator pos:line="22" pos:column="22">!<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">privacy<pos:position pos:line="22" pos:column="30"/></name></expr>)<pos:position pos:line="22" pos:column="31"/></condition><then pos:line="22" pos:column="31">
  <block pos:line="23" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">buffer<pos:position pos:line="24" pos:column="11"/></name><index pos:line="24" pos:column="11">[<expr><literal type="number" pos:line="24" pos:column="12">0<pos:position pos:line="24" pos:column="13"/></literal></expr>]<pos:position pos:line="24" pos:column="14"/></index></name> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <literal type="number" pos:line="24" pos:column="17">0<pos:position pos:line="24" pos:column="18"/></literal></expr>;<pos:position pos:line="24" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">rfc822_write_address<pos:position pos:line="25" pos:column="25"/></name> <argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">buffer<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="35">sizeof <argument_list pos:line="25" pos:column="42">(<argument><expr><name pos:line="25" pos:column="43">buffer<pos:position pos:line="25" pos:column="49"/></name></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="52">env<pos:position pos:line="25" pos:column="55"/></name><operator pos:line="25" pos:column="55">-&gt;<pos:position pos:line="25" pos:column="60"/></operator><name pos:line="25" pos:column="57">sender<pos:position pos:line="25" pos:column="63"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="65">0<pos:position pos:line="25" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">fprintf<pos:position pos:line="26" pos:column="12"/></name> <argument_list pos:line="26" pos:column="13">(<argument><expr><name pos:line="26" pos:column="14">fp<pos:position pos:line="26" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="18">"Sender: %s\n"<pos:position pos:line="26" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="34">buffer<pos:position pos:line="26" pos:column="40"/></name></expr></argument>)<pos:position pos:line="26" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="42"/></expr_stmt>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>

  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name><name pos:line="29" pos:column="7">env<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">-&gt;<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="12">to<pos:position pos:line="29" pos:column="14"/></name></name></expr>)<pos:position pos:line="29" pos:column="15"/></condition><then pos:line="29" pos:column="15">
  <block pos:line="30" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">fputs<pos:position pos:line="31" pos:column="10"/></name> <argument_list pos:line="31" pos:column="11">(<argument><expr><literal type="string" pos:line="31" pos:column="12">"To: "<pos:position pos:line="31" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="20">fp<pos:position pos:line="31" pos:column="22"/></name></expr></argument>)<pos:position pos:line="31" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">mutt_write_address_list<pos:position pos:line="32" pos:column="28"/></name> <argument_list pos:line="32" pos:column="29">(<argument><expr><name><name pos:line="32" pos:column="30">env<pos:position pos:line="32" pos:column="33"/></name><operator pos:line="32" pos:column="33">-&gt;<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="35">to<pos:position pos:line="32" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="39">fp<pos:position pos:line="32" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="43">4<pos:position pos:line="32" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="46">0<pos:position pos:line="32" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="49"/></expr_stmt>
  }<pos:position pos:line="33" pos:column="4"/></block></then>
  <elseif pos:line="34" pos:column="3">else <if pos:line="34" pos:column="8">if <condition pos:line="34" pos:column="11">(<expr><name pos:line="34" pos:column="12">mode<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">&gt;<pos:position pos:line="34" pos:column="21"/></operator> <literal type="number" pos:line="34" pos:column="19">0<pos:position pos:line="34" pos:column="20"/></literal></expr>)<pos:position pos:line="34" pos:column="21"/></condition><then pos:line="34" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="5">fputs<pos:position pos:line="35" pos:column="10"/></name> <argument_list pos:line="35" pos:column="11">(<argument><expr><literal type="string" pos:line="35" pos:column="12">"To: \n"<pos:position pos:line="35" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="22">fp<pos:position pos:line="35" pos:column="24"/></name></expr></argument>)<pos:position pos:line="35" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="26"/></expr_stmt></block></then></if></elseif></if>

  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><name><name pos:line="37" pos:column="7">env<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">-&gt;<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="12">cc<pos:position pos:line="37" pos:column="14"/></name></name></expr>)<pos:position pos:line="37" pos:column="15"/></condition><then pos:line="37" pos:column="15">
  <block pos:line="38" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">fputs<pos:position pos:line="39" pos:column="10"/></name> <argument_list pos:line="39" pos:column="11">(<argument><expr><literal type="string" pos:line="39" pos:column="12">"Cc: "<pos:position pos:line="39" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="20">fp<pos:position pos:line="39" pos:column="22"/></name></expr></argument>)<pos:position pos:line="39" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">mutt_write_address_list<pos:position pos:line="40" pos:column="28"/></name> <argument_list pos:line="40" pos:column="29">(<argument><expr><name><name pos:line="40" pos:column="30">env<pos:position pos:line="40" pos:column="33"/></name><operator pos:line="40" pos:column="33">-&gt;<pos:position pos:line="40" pos:column="38"/></operator><name pos:line="40" pos:column="35">cc<pos:position pos:line="40" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="39">fp<pos:position pos:line="40" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="43">4<pos:position pos:line="40" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="46">0<pos:position pos:line="40" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="49"/></expr_stmt>
  }<pos:position pos:line="41" pos:column="4"/></block></then>
  <elseif pos:line="42" pos:column="3">else <if pos:line="42" pos:column="8">if <condition pos:line="42" pos:column="11">(<expr><name pos:line="42" pos:column="12">mode<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">&gt;<pos:position pos:line="42" pos:column="21"/></operator> <literal type="number" pos:line="42" pos:column="19">0<pos:position pos:line="42" pos:column="20"/></literal></expr>)<pos:position pos:line="42" pos:column="21"/></condition><then pos:line="42" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="5">fputs<pos:position pos:line="43" pos:column="10"/></name> <argument_list pos:line="43" pos:column="11">(<argument><expr><literal type="string" pos:line="43" pos:column="12">"Cc: \n"<pos:position pos:line="43" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="22">fp<pos:position pos:line="43" pos:column="24"/></name></expr></argument>)<pos:position pos:line="43" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="26"/></expr_stmt></block></then></if></elseif></if>

  <if pos:line="45" pos:column="3">if <condition pos:line="45" pos:column="6">(<expr><name><name pos:line="45" pos:column="7">env<pos:position pos:line="45" pos:column="10"/></name><operator pos:line="45" pos:column="10">-&gt;<pos:position pos:line="45" pos:column="15"/></operator><name pos:line="45" pos:column="12">bcc<pos:position pos:line="45" pos:column="15"/></name></name></expr>)<pos:position pos:line="45" pos:column="16"/></condition><then pos:line="45" pos:column="16">
  <block pos:line="46" pos:column="3">{
    <if pos:line="47" pos:column="5">if<condition pos:line="47" pos:column="7">(<expr><name pos:line="47" pos:column="8">mode<pos:position pos:line="47" pos:column="12"/></name> <operator pos:line="47" pos:column="13">!=<pos:position pos:line="47" pos:column="15"/></operator> <literal type="number" pos:line="47" pos:column="16">0<pos:position pos:line="47" pos:column="17"/></literal> <operator pos:line="47" pos:column="18">||<pos:position pos:line="47" pos:column="20"/></operator> <call><name pos:line="47" pos:column="21">option<pos:position pos:line="47" pos:column="27"/></name><argument_list pos:line="47" pos:column="27">(<argument><expr><name pos:line="47" pos:column="28">OPTWRITEBCC<pos:position pos:line="47" pos:column="39"/></name></expr></argument>)<pos:position pos:line="47" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="41"/></condition><then pos:line="47" pos:column="41">
    <block pos:line="48" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">fputs<pos:position pos:line="49" pos:column="12"/></name> <argument_list pos:line="49" pos:column="13">(<argument><expr><literal type="string" pos:line="49" pos:column="14">"Bcc: "<pos:position pos:line="49" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="23">fp<pos:position pos:line="49" pos:column="25"/></name></expr></argument>)<pos:position pos:line="49" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="50" pos:column="7">mutt_write_address_list<pos:position pos:line="50" pos:column="30"/></name> <argument_list pos:line="50" pos:column="31">(<argument><expr><name><name pos:line="50" pos:column="32">env<pos:position pos:line="50" pos:column="35"/></name><operator pos:line="50" pos:column="35">-&gt;<pos:position pos:line="50" pos:column="40"/></operator><name pos:line="50" pos:column="37">bcc<pos:position pos:line="50" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="42">fp<pos:position pos:line="50" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="46">5<pos:position pos:line="50" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="49">0<pos:position pos:line="50" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>
  }<pos:position pos:line="52" pos:column="4"/></block></then>
  <elseif pos:line="53" pos:column="3">else <if pos:line="53" pos:column="8">if <condition pos:line="53" pos:column="11">(<expr><name pos:line="53" pos:column="12">mode<pos:position pos:line="53" pos:column="16"/></name> <operator pos:line="53" pos:column="17">&gt;<pos:position pos:line="53" pos:column="21"/></operator> <literal type="number" pos:line="53" pos:column="19">0<pos:position pos:line="53" pos:column="20"/></literal></expr>)<pos:position pos:line="53" pos:column="21"/></condition><then pos:line="53" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="5">fputs<pos:position pos:line="54" pos:column="10"/></name> <argument_list pos:line="54" pos:column="11">(<argument><expr><literal type="string" pos:line="54" pos:column="12">"Bcc: \n"<pos:position pos:line="54" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="23">fp<pos:position pos:line="54" pos:column="25"/></name></expr></argument>)<pos:position pos:line="54" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="27"/></expr_stmt></block></then></if></elseif></if>

  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><name><name pos:line="56" pos:column="7">env<pos:position pos:line="56" pos:column="10"/></name><operator pos:line="56" pos:column="10">-&gt;<pos:position pos:line="56" pos:column="15"/></operator><name pos:line="56" pos:column="12">subject<pos:position pos:line="56" pos:column="19"/></name></name></expr>)<pos:position pos:line="56" pos:column="20"/></condition><then pos:line="56" pos:column="20">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="5">mutt_write_one_header<pos:position pos:line="57" pos:column="26"/></name> <argument_list pos:line="57" pos:column="27">(<argument><expr><name pos:line="57" pos:column="28">fp<pos:position pos:line="57" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="32">"Subject"<pos:position pos:line="57" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="43">env<pos:position pos:line="57" pos:column="46"/></name><operator pos:line="57" pos:column="46">-&gt;<pos:position pos:line="57" pos:column="51"/></operator><name pos:line="57" pos:column="48">subject<pos:position pos:line="57" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="57">NULL<pos:position pos:line="57" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="63">0<pos:position pos:line="57" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="66">0<pos:position pos:line="57" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="69"/></expr_stmt></block></then>
  <elseif pos:line="58" pos:column="3">else <if pos:line="58" pos:column="8">if <condition pos:line="58" pos:column="11">(<expr><name pos:line="58" pos:column="12">mode<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">==<pos:position pos:line="58" pos:column="19"/></operator> <literal type="number" pos:line="58" pos:column="20">1<pos:position pos:line="58" pos:column="21"/></literal></expr>)<pos:position pos:line="58" pos:column="22"/></condition><then pos:line="58" pos:column="22">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="5">fputs<pos:position pos:line="59" pos:column="10"/></name> <argument_list pos:line="59" pos:column="11">(<argument><expr><literal type="string" pos:line="59" pos:column="12">"Subject: \n"<pos:position pos:line="59" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="27">fp<pos:position pos:line="59" pos:column="29"/></name></expr></argument>)<pos:position pos:line="59" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="31"/></expr_stmt></block></then></if></elseif></if>

  <comment type="block" pos:line="61" pos:column="3">/* save message id if the user has set it */</comment>
  <if pos:line="62" pos:column="3">if <condition pos:line="62" pos:column="6">(<expr><name><name pos:line="62" pos:column="7">env<pos:position pos:line="62" pos:column="10"/></name><operator pos:line="62" pos:column="10">-&gt;<pos:position pos:line="62" pos:column="15"/></operator><name pos:line="62" pos:column="12">message_id<pos:position pos:line="62" pos:column="22"/></name></name> <operator pos:line="62" pos:column="23">&amp;&amp;<pos:position pos:line="62" pos:column="33"/></operator> <operator pos:line="62" pos:column="26">!<pos:position pos:line="62" pos:column="27"/></operator><name pos:line="62" pos:column="27">privacy<pos:position pos:line="62" pos:column="34"/></name></expr>)<pos:position pos:line="62" pos:column="35"/></condition><then pos:line="62" pos:column="35">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="5">fprintf<pos:position pos:line="63" pos:column="12"/></name> <argument_list pos:line="63" pos:column="13">(<argument><expr><name pos:line="63" pos:column="14">fp<pos:position pos:line="63" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="18">"Message-ID: %s\n"<pos:position pos:line="63" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="38">env<pos:position pos:line="63" pos:column="41"/></name><operator pos:line="63" pos:column="41">-&gt;<pos:position pos:line="63" pos:column="46"/></operator><name pos:line="63" pos:column="43">message_id<pos:position pos:line="63" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="55"/></expr_stmt></block></then></if>

  <if pos:line="65" pos:column="3">if <condition pos:line="65" pos:column="6">(<expr><name><name pos:line="65" pos:column="7">env<pos:position pos:line="65" pos:column="10"/></name><operator pos:line="65" pos:column="10">-&gt;<pos:position pos:line="65" pos:column="15"/></operator><name pos:line="65" pos:column="12">reply_to<pos:position pos:line="65" pos:column="20"/></name></name></expr>)<pos:position pos:line="65" pos:column="21"/></condition><then pos:line="65" pos:column="21">
  <block pos:line="66" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">fputs<pos:position pos:line="67" pos:column="10"/></name> <argument_list pos:line="67" pos:column="11">(<argument><expr><literal type="string" pos:line="67" pos:column="12">"Reply-To: "<pos:position pos:line="67" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="26">fp<pos:position pos:line="67" pos:column="28"/></name></expr></argument>)<pos:position pos:line="67" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">mutt_write_address_list<pos:position pos:line="68" pos:column="28"/></name> <argument_list pos:line="68" pos:column="29">(<argument><expr><name><name pos:line="68" pos:column="30">env<pos:position pos:line="68" pos:column="33"/></name><operator pos:line="68" pos:column="33">-&gt;<pos:position pos:line="68" pos:column="38"/></operator><name pos:line="68" pos:column="35">reply_to<pos:position pos:line="68" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="45">fp<pos:position pos:line="68" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="49">10<pos:position pos:line="68" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="53">0<pos:position pos:line="68" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="69" pos:column="4"/></block></then>
  <elseif pos:line="70" pos:column="3">else <if pos:line="70" pos:column="8">if <condition pos:line="70" pos:column="11">(<expr><name pos:line="70" pos:column="12">mode<pos:position pos:line="70" pos:column="16"/></name> <operator pos:line="70" pos:column="17">&gt;<pos:position pos:line="70" pos:column="21"/></operator> <literal type="number" pos:line="70" pos:column="19">0<pos:position pos:line="70" pos:column="20"/></literal></expr>)<pos:position pos:line="70" pos:column="21"/></condition><then pos:line="70" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="5">fputs<pos:position pos:line="71" pos:column="10"/></name> <argument_list pos:line="71" pos:column="11">(<argument><expr><literal type="string" pos:line="71" pos:column="12">"Reply-To: \n"<pos:position pos:line="71" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="28">fp<pos:position pos:line="71" pos:column="30"/></name></expr></argument>)<pos:position pos:line="71" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="32"/></expr_stmt></block></then></if></elseif></if>

  <if pos:line="73" pos:column="3">if <condition pos:line="73" pos:column="6">(<expr><name><name pos:line="73" pos:column="7">env<pos:position pos:line="73" pos:column="10"/></name><operator pos:line="73" pos:column="10">-&gt;<pos:position pos:line="73" pos:column="15"/></operator><name pos:line="73" pos:column="12">mail_followup_to<pos:position pos:line="73" pos:column="28"/></name></name></expr>)<pos:position pos:line="73" pos:column="29"/></condition><then pos:line="73" pos:column="29">
  <block pos:line="74" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">fputs<pos:position pos:line="75" pos:column="10"/></name> <argument_list pos:line="75" pos:column="11">(<argument><expr><literal type="string" pos:line="75" pos:column="12">"Mail-Followup-To: "<pos:position pos:line="75" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="34">fp<pos:position pos:line="75" pos:column="36"/></name></expr></argument>)<pos:position pos:line="75" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="76" pos:column="5">mutt_write_address_list<pos:position pos:line="76" pos:column="28"/></name> <argument_list pos:line="76" pos:column="29">(<argument><expr><name><name pos:line="76" pos:column="30">env<pos:position pos:line="76" pos:column="33"/></name><operator pos:line="76" pos:column="33">-&gt;<pos:position pos:line="76" pos:column="38"/></operator><name pos:line="76" pos:column="35">mail_followup_to<pos:position pos:line="76" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="53">fp<pos:position pos:line="76" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="57">18<pos:position pos:line="76" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="61">0<pos:position pos:line="76" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="64"/></expr_stmt>
  }<pos:position pos:line="77" pos:column="4"/></block></then></if>

  <if pos:line="79" pos:column="3">if <condition pos:line="79" pos:column="6">(<expr><name pos:line="79" pos:column="7">mode<pos:position pos:line="79" pos:column="11"/></name> <operator pos:line="79" pos:column="12">&lt;=<pos:position pos:line="79" pos:column="17"/></operator> <literal type="number" pos:line="79" pos:column="15">0<pos:position pos:line="79" pos:column="16"/></literal></expr>)<pos:position pos:line="79" pos:column="17"/></condition><then pos:line="79" pos:column="17">
  <block pos:line="80" pos:column="3">{
    <if pos:line="81" pos:column="5">if <condition pos:line="81" pos:column="8">(<expr><name><name pos:line="81" pos:column="9">env<pos:position pos:line="81" pos:column="12"/></name><operator pos:line="81" pos:column="12">-&gt;<pos:position pos:line="81" pos:column="17"/></operator><name pos:line="81" pos:column="14">references<pos:position pos:line="81" pos:column="24"/></name></name></expr>)<pos:position pos:line="81" pos:column="25"/></condition><then pos:line="81" pos:column="25">
    <block pos:line="82" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="83" pos:column="7">fputs<pos:position pos:line="83" pos:column="12"/></name> <argument_list pos:line="83" pos:column="13">(<argument><expr><literal type="string" pos:line="83" pos:column="14">"References:"<pos:position pos:line="83" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="83" pos:column="29">fp<pos:position pos:line="83" pos:column="31"/></name></expr></argument>)<pos:position pos:line="83" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="84" pos:column="7">mutt_write_references<pos:position pos:line="84" pos:column="28"/></name> <argument_list pos:line="84" pos:column="29">(<argument><expr><name><name pos:line="84" pos:column="30">env<pos:position pos:line="84" pos:column="33"/></name><operator pos:line="84" pos:column="33">-&gt;<pos:position pos:line="84" pos:column="38"/></operator><name pos:line="84" pos:column="35">references<pos:position pos:line="84" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="47">fp<pos:position pos:line="84" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="84" pos:column="51">10<pos:position pos:line="84" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="85" pos:column="7">fputc<pos:position pos:line="85" pos:column="12"/></name><argument_list pos:line="85" pos:column="12">(<argument><expr><literal type="char" pos:line="85" pos:column="13">'\n'<pos:position pos:line="85" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="19">fp<pos:position pos:line="85" pos:column="21"/></name></expr></argument>)<pos:position pos:line="85" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="86" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="88" pos:column="5">/* Add the MIME headers */</comment>
    <expr_stmt><expr><call><name pos:line="89" pos:column="5">fputs<pos:position pos:line="89" pos:column="10"/></name> <argument_list pos:line="89" pos:column="11">(<argument><expr><literal type="string" pos:line="89" pos:column="12">"MIME-Version: 1.0\n"<pos:position pos:line="89" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="35">fp<pos:position pos:line="89" pos:column="37"/></name></expr></argument>)<pos:position pos:line="89" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="90" pos:column="5">mutt_write_mime_header<pos:position pos:line="90" pos:column="27"/></name> <argument_list pos:line="90" pos:column="28">(<argument><expr><name pos:line="90" pos:column="29">attach<pos:position pos:line="90" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="37">fp<pos:position pos:line="90" pos:column="39"/></name></expr></argument>)<pos:position pos:line="90" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="91" pos:column="4"/></block></then></if>

  <if pos:line="93" pos:column="3">if <condition pos:line="93" pos:column="6">(<expr><name><name pos:line="93" pos:column="7">env<pos:position pos:line="93" pos:column="10"/></name><operator pos:line="93" pos:column="10">-&gt;<pos:position pos:line="93" pos:column="15"/></operator><name pos:line="93" pos:column="12">in_reply_to<pos:position pos:line="93" pos:column="23"/></name></name></expr>)<pos:position pos:line="93" pos:column="24"/></condition><then pos:line="93" pos:column="24">
  <block pos:line="94" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="95" pos:column="5">fputs<pos:position pos:line="95" pos:column="10"/></name> <argument_list pos:line="95" pos:column="11">(<argument><expr><literal type="string" pos:line="95" pos:column="12">"In-Reply-To:"<pos:position pos:line="95" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="95" pos:column="28">fp<pos:position pos:line="95" pos:column="30"/></name></expr></argument>)<pos:position pos:line="95" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="96" pos:column="5">mutt_write_references<pos:position pos:line="96" pos:column="26"/></name> <argument_list pos:line="96" pos:column="27">(<argument><expr><name><name pos:line="96" pos:column="28">env<pos:position pos:line="96" pos:column="31"/></name><operator pos:line="96" pos:column="31">-&gt;<pos:position pos:line="96" pos:column="36"/></operator><name pos:line="96" pos:column="33">in_reply_to<pos:position pos:line="96" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="46">fp<pos:position pos:line="96" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="96" pos:column="50">0<pos:position pos:line="96" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="97" pos:column="5">fputc<pos:position pos:line="97" pos:column="10"/></name> <argument_list pos:line="97" pos:column="11">(<argument><expr><literal type="char" pos:line="97" pos:column="12">'\n'<pos:position pos:line="97" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="97" pos:column="18">fp<pos:position pos:line="97" pos:column="20"/></name></expr></argument>)<pos:position pos:line="97" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="98" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="100" pos:column="3">/* Add any user defined headers */</comment>
  <for pos:line="101" pos:column="3">for <control pos:line="101" pos:column="7">(<init pos:line="101" pos:column="8">;<pos:position pos:line="101" pos:column="9"/></init> <condition><expr><name pos:line="101" pos:column="10">tmp<pos:position pos:line="101" pos:column="13"/></name></expr>;<pos:position pos:line="101" pos:column="14"/></condition> <incr><expr><name pos:line="101" pos:column="15">tmp<pos:position pos:line="101" pos:column="18"/></name> <operator pos:line="101" pos:column="19">=<pos:position pos:line="101" pos:column="20"/></operator> <name><name pos:line="101" pos:column="21">tmp<pos:position pos:line="101" pos:column="24"/></name><operator pos:line="101" pos:column="24">-&gt;<pos:position pos:line="101" pos:column="29"/></operator><name pos:line="101" pos:column="26">next<pos:position pos:line="101" pos:column="30"/></name></name></expr></incr>)<pos:position pos:line="101" pos:column="31"/></control>
  <block pos:line="102" pos:column="3">{
    <if pos:line="103" pos:column="5">if <condition pos:line="103" pos:column="8">(<expr><operator pos:line="103" pos:column="9">(<pos:position pos:line="103" pos:column="10"/></operator><name pos:line="103" pos:column="10">p<pos:position pos:line="103" pos:column="11"/></name> <operator pos:line="103" pos:column="12">=<pos:position pos:line="103" pos:column="13"/></operator> <call><name pos:line="103" pos:column="14">strchr<pos:position pos:line="103" pos:column="20"/></name> <argument_list pos:line="103" pos:column="21">(<argument><expr><name><name pos:line="103" pos:column="22">tmp<pos:position pos:line="103" pos:column="25"/></name><operator pos:line="103" pos:column="25">-&gt;<pos:position pos:line="103" pos:column="30"/></operator><name pos:line="103" pos:column="27">data<pos:position pos:line="103" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="103" pos:column="33">':'<pos:position pos:line="103" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="37"/></argument_list></call><operator pos:line="103" pos:column="37">)<pos:position pos:line="103" pos:column="38"/></operator></expr>)<pos:position pos:line="103" pos:column="39"/></condition><then pos:line="103" pos:column="39">
    <block pos:line="104" pos:column="5">{
      <expr_stmt><expr><name pos:line="105" pos:column="7">q<pos:position pos:line="105" pos:column="8"/></name> <operator pos:line="105" pos:column="9">=<pos:position pos:line="105" pos:column="10"/></operator> <name pos:line="105" pos:column="11">p<pos:position pos:line="105" pos:column="12"/></name></expr>;<pos:position pos:line="105" pos:column="13"/></expr_stmt>

      <expr_stmt><expr><operator pos:line="107" pos:column="7">*<pos:position pos:line="107" pos:column="8"/></operator><name pos:line="107" pos:column="8">p<pos:position pos:line="107" pos:column="9"/></name> <operator pos:line="107" pos:column="10">=<pos:position pos:line="107" pos:column="11"/></operator> <literal type="char" pos:line="107" pos:column="12">'\0'<pos:position pos:line="107" pos:column="16"/></literal></expr>;<pos:position pos:line="107" pos:column="17"/></expr_stmt>

      <expr_stmt><expr><name pos:line="109" pos:column="7">p<pos:position pos:line="109" pos:column="8"/></name> <operator pos:line="109" pos:column="9">=<pos:position pos:line="109" pos:column="10"/></operator> <call><name pos:line="109" pos:column="11">skip_email_wsp<pos:position pos:line="109" pos:column="25"/></name><argument_list pos:line="109" pos:column="25">(<argument><expr><name pos:line="109" pos:column="26">p<pos:position pos:line="109" pos:column="27"/></name> <operator pos:line="109" pos:column="28">+<pos:position pos:line="109" pos:column="29"/></operator> <literal type="number" pos:line="109" pos:column="30">1<pos:position pos:line="109" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="33"/></expr_stmt>
      <if pos:line="110" pos:column="7">if <condition pos:line="110" pos:column="10">(<expr><operator pos:line="110" pos:column="11">!<pos:position pos:line="110" pos:column="12"/></operator><operator pos:line="110" pos:column="12">*<pos:position pos:line="110" pos:column="13"/></operator><name pos:line="110" pos:column="13">p<pos:position pos:line="110" pos:column="14"/></name></expr>)<pos:position pos:line="110" pos:column="15"/></condition><then pos:line="110" pos:column="15">
      <block pos:line="111" pos:column="7">{
	<expr_stmt><expr><operator pos:line="112" pos:column="9">*<pos:position pos:line="112" pos:column="10"/></operator><name pos:line="112" pos:column="10">q<pos:position pos:line="112" pos:column="11"/></name> <operator pos:line="112" pos:column="12">=<pos:position pos:line="112" pos:column="13"/></operator> <literal type="char" pos:line="112" pos:column="14">':'<pos:position pos:line="112" pos:column="17"/></literal></expr>;<pos:position pos:line="112" pos:column="18"/></expr_stmt>
	<continue pos:line="113" pos:column="9">continue;<pos:position pos:line="113" pos:column="18"/></continue>  <comment type="block" pos:line="113" pos:column="20">/* don't emit empty fields. */</comment>
      }<pos:position pos:line="114" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="116" pos:column="7">/* check to see if the user has overridden the user-agent field */</comment>
      <if pos:line="117" pos:column="7">if <condition pos:line="117" pos:column="10">(<expr><operator pos:line="117" pos:column="11">!<pos:position pos:line="117" pos:column="12"/></operator><call><name pos:line="117" pos:column="12">ascii_strncasecmp<pos:position pos:line="117" pos:column="29"/></name> <argument_list pos:line="117" pos:column="30">(<argument><expr><literal type="string" pos:line="117" pos:column="31">"user-agent"<pos:position pos:line="117" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="45">tmp<pos:position pos:line="117" pos:column="48"/></name><operator pos:line="117" pos:column="48">-&gt;<pos:position pos:line="117" pos:column="53"/></operator><name pos:line="117" pos:column="50">data<pos:position pos:line="117" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="117" pos:column="56">10<pos:position pos:line="117" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="117" pos:column="60"/></condition><then pos:line="117" pos:column="60">
      <block pos:line="118" pos:column="7">{
	<expr_stmt><expr><name pos:line="119" pos:column="9">has_agent<pos:position pos:line="119" pos:column="18"/></name> <operator pos:line="119" pos:column="19">=<pos:position pos:line="119" pos:column="20"/></operator> <literal type="number" pos:line="119" pos:column="21">1<pos:position pos:line="119" pos:column="22"/></literal></expr>;<pos:position pos:line="119" pos:column="23"/></expr_stmt>
	<if pos:line="120" pos:column="9">if <condition pos:line="120" pos:column="12">(<expr><name pos:line="120" pos:column="13">privacy<pos:position pos:line="120" pos:column="20"/></name></expr>)<pos:position pos:line="120" pos:column="21"/></condition><then pos:line="120" pos:column="21">
	<block pos:line="121" pos:column="9">{
	  <expr_stmt><expr><operator pos:line="122" pos:column="11">*<pos:position pos:line="122" pos:column="12"/></operator><name pos:line="122" pos:column="12">q<pos:position pos:line="122" pos:column="13"/></name> <operator pos:line="122" pos:column="14">=<pos:position pos:line="122" pos:column="15"/></operator> <literal type="char" pos:line="122" pos:column="16">':'<pos:position pos:line="122" pos:column="19"/></literal></expr>;<pos:position pos:line="122" pos:column="20"/></expr_stmt>
	  <continue pos:line="123" pos:column="11">continue;<pos:position pos:line="123" pos:column="20"/></continue>
	}<pos:position pos:line="124" pos:column="10"/></block></then></if>
      }<pos:position pos:line="125" pos:column="8"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="127" pos:column="7">mutt_write_one_header<pos:position pos:line="127" pos:column="28"/></name> <argument_list pos:line="127" pos:column="29">(<argument><expr><name pos:line="127" pos:column="30">fp<pos:position pos:line="127" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="127" pos:column="34">tmp<pos:position pos:line="127" pos:column="37"/></name><operator pos:line="127" pos:column="37">-&gt;<pos:position pos:line="127" pos:column="42"/></operator><name pos:line="127" pos:column="39">data<pos:position pos:line="127" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="45">p<pos:position pos:line="127" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="48">NULL<pos:position pos:line="127" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="127" pos:column="54">0<pos:position pos:line="127" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="127" pos:column="57">0<pos:position pos:line="127" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="60"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="128" pos:column="7">*<pos:position pos:line="128" pos:column="8"/></operator><name pos:line="128" pos:column="8">q<pos:position pos:line="128" pos:column="9"/></name> <operator pos:line="128" pos:column="10">=<pos:position pos:line="128" pos:column="11"/></operator> <literal type="char" pos:line="128" pos:column="12">':'<pos:position pos:line="128" pos:column="15"/></literal></expr>;<pos:position pos:line="128" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="129" pos:column="6"/></block></then></if>
  }<pos:position pos:line="130" pos:column="4"/></block></for>

  <if pos:line="132" pos:column="3">if <condition pos:line="132" pos:column="6">(<expr><name pos:line="132" pos:column="7">mode<pos:position pos:line="132" pos:column="11"/></name> <operator pos:line="132" pos:column="12">==<pos:position pos:line="132" pos:column="14"/></operator> <literal type="number" pos:line="132" pos:column="15">0<pos:position pos:line="132" pos:column="16"/></literal> <operator pos:line="132" pos:column="17">&amp;&amp;<pos:position pos:line="132" pos:column="27"/></operator> <operator pos:line="132" pos:column="20">!<pos:position pos:line="132" pos:column="21"/></operator><name pos:line="132" pos:column="21">privacy<pos:position pos:line="132" pos:column="28"/></name> <operator pos:line="132" pos:column="29">&amp;&amp;<pos:position pos:line="132" pos:column="39"/></operator> <call><name pos:line="132" pos:column="32">option<pos:position pos:line="132" pos:column="38"/></name> <argument_list pos:line="132" pos:column="39">(<argument><expr><name pos:line="132" pos:column="40">OPTXMAILER<pos:position pos:line="132" pos:column="50"/></name></expr></argument>)<pos:position pos:line="132" pos:column="51"/></argument_list></call> <operator pos:line="132" pos:column="52">&amp;&amp;<pos:position pos:line="132" pos:column="62"/></operator> <operator pos:line="132" pos:column="55">!<pos:position pos:line="132" pos:column="56"/></operator><name pos:line="132" pos:column="56">has_agent<pos:position pos:line="132" pos:column="65"/></name></expr>)<pos:position pos:line="132" pos:column="66"/></condition><then pos:line="132" pos:column="66">
  <block pos:line="133" pos:column="3">{
    <comment type="block" pos:line="134" pos:column="5">/* Add a vanity header */</comment>
    <expr_stmt><expr><call><name pos:line="135" pos:column="5">fprintf<pos:position pos:line="135" pos:column="12"/></name> <argument_list pos:line="135" pos:column="13">(<argument><expr><name pos:line="135" pos:column="14">fp<pos:position pos:line="135" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="18">"User-Agent: Mutt/%s (%s)\n"<pos:position pos:line="135" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="135" pos:column="48">MUTT_VERSION<pos:position pos:line="135" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="62">ReleaseDate<pos:position pos:line="135" pos:column="73"/></name></expr></argument>)<pos:position pos:line="135" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="75"/></expr_stmt>
  }<pos:position pos:line="136" pos:column="4"/></block></then></if>

  <return pos:line="138" pos:column="3">return <expr><operator pos:line="138" pos:column="10">(<pos:position pos:line="138" pos:column="11"/></operator><ternary><condition><expr><call><name pos:line="138" pos:column="11">ferror<pos:position pos:line="138" pos:column="17"/></name> <argument_list pos:line="138" pos:column="18">(<argument><expr><name pos:line="138" pos:column="19">fp<pos:position pos:line="138" pos:column="21"/></name></expr></argument>)<pos:position pos:line="138" pos:column="22"/></argument_list></call> <operator pos:line="138" pos:column="23">==<pos:position pos:line="138" pos:column="25"/></operator> <literal type="number" pos:line="138" pos:column="26">0<pos:position pos:line="138" pos:column="27"/></literal></expr> ?<pos:position pos:line="138" pos:column="29"/></condition><then pos:line="138" pos:column="29"> <expr><literal type="number" pos:line="138" pos:column="30">0<pos:position pos:line="138" pos:column="31"/></literal></expr> <pos:position pos:line="138" pos:column="32"/></then><else pos:line="138" pos:column="32">: <expr><operator pos:line="138" pos:column="34">-<pos:position pos:line="138" pos:column="35"/></operator><literal type="number" pos:line="138" pos:column="35">1<pos:position pos:line="138" pos:column="36"/></literal></expr></else></ternary><operator pos:line="138" pos:column="36">)<pos:position pos:line="138" pos:column="37"/></operator></expr>;<pos:position pos:line="138" pos:column="38"/></return>
}<pos:position pos:line="139" pos:column="2"/></block></function></unit>
