<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/mutt/gumtree/mutt_repos_function_1159_mutt-1.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">try_block<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">ICONV_CONST<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">d<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">size_t<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">dlen<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
			 <parameter><decl><type><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name pos:line="2" pos:column="32">char<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">fromcode<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="48">const<pos:position pos:line="2" pos:column="53"/></specifier> <name pos:line="2" pos:column="54">char<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">tocode<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="3" pos:column="26">encoder_t<pos:position pos:line="3" pos:column="35"/></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">encoder<pos:position pos:line="3" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="46">size_t<pos:position pos:line="3" pos:column="52"/></name> <modifier pos:line="3" pos:column="53">*<pos:position pos:line="3" pos:column="54"/></modifier></type><name pos:line="3" pos:column="54">wlen<pos:position pos:line="3" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="59"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">buf1<pos:position pos:line="5" pos:column="12"/></name><index pos:line="5" pos:column="12">[<expr><name pos:line="5" pos:column="13">ENCWORD_LEN_MAX<pos:position pos:line="5" pos:column="28"/></name> <operator pos:line="5" pos:column="29">-<pos:position pos:line="5" pos:column="30"/></operator> <name pos:line="5" pos:column="31">ENCWORD_LEN_MIN<pos:position pos:line="5" pos:column="46"/></name> <operator pos:line="5" pos:column="47">+<pos:position pos:line="5" pos:column="48"/></operator> <literal type="number" pos:line="5" pos:column="49">1<pos:position pos:line="5" pos:column="50"/></literal></expr>]<pos:position pos:line="5" pos:column="51"/></index></name></decl>;<pos:position pos:line="5" pos:column="52"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">iconv_t<pos:position pos:line="6" pos:column="10"/></name></type> <name pos:line="6" pos:column="11">cd<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">ICONV_CONST<pos:position pos:line="7" pos:column="14"/></name> <name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">ib<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">ob<pos:position pos:line="8" pos:column="11"/></name></decl>, <modifier pos:line="8" pos:column="13">*<pos:position pos:line="8" pos:column="14"/></modifier><decl><type ref="prev"/><name pos:line="8" pos:column="14">p<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">ibl<pos:position pos:line="9" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="15">obl<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">count<pos:position pos:line="10" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="14">len<pos:position pos:line="10" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="19">len_b<pos:position pos:line="10" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="26">len_q<pos:position pos:line="10" pos:column="31"/></name></decl>;<pos:position pos:line="10" pos:column="32"/></decl_stmt>

  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">fromcode<pos:position pos:line="12" pos:column="15"/></name></expr>)<pos:position pos:line="12" pos:column="16"/></condition><then pos:line="12" pos:column="16">
  <block pos:line="13" pos:column="3">{
    <expr_stmt><expr><name pos:line="14" pos:column="5">cd<pos:position pos:line="14" pos:column="7"/></name> <operator pos:line="14" pos:column="8">=<pos:position pos:line="14" pos:column="9"/></operator> <call><name pos:line="14" pos:column="10">mutt_iconv_open<pos:position pos:line="14" pos:column="25"/></name> <argument_list pos:line="14" pos:column="26">(<argument><expr><name pos:line="14" pos:column="27">tocode<pos:position pos:line="14" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="35">fromcode<pos:position pos:line="14" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="45">0<pos:position pos:line="14" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">assert<pos:position pos:line="15" pos:column="11"/></name> <argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">cd<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">!=<pos:position pos:line="15" pos:column="18"/></operator> <call pos:line="15" pos:column="19">(<name pos:line="15" pos:column="20">iconv_t<pos:position pos:line="15" pos:column="27"/></name>)<argument_list pos:line="15" pos:column="28">(<argument><expr><operator pos:line="15" pos:column="29">-<pos:position pos:line="15" pos:column="30"/></operator><literal type="number" pos:line="15" pos:column="30">1<pos:position pos:line="15" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">ib<pos:position pos:line="16" pos:column="7"/></name> <operator pos:line="16" pos:column="8">=<pos:position pos:line="16" pos:column="9"/></operator> <name pos:line="16" pos:column="10">d<pos:position pos:line="16" pos:column="11"/></name></expr><operator pos:line="16" pos:column="11">,<pos:position pos:line="16" pos:column="12"/></operator> <expr><name pos:line="16" pos:column="13">ibl<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <name pos:line="16" pos:column="19">dlen<pos:position pos:line="16" pos:column="23"/></name></expr><operator pos:line="16" pos:column="23">,<pos:position pos:line="16" pos:column="24"/></operator> <expr><name pos:line="16" pos:column="25">ob<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">=<pos:position pos:line="16" pos:column="29"/></operator> <name pos:line="16" pos:column="30">buf1<pos:position pos:line="16" pos:column="34"/></name></expr><operator pos:line="16" pos:column="34">,<pos:position pos:line="16" pos:column="35"/></operator> <expr><name pos:line="16" pos:column="36">obl<pos:position pos:line="16" pos:column="39"/></name> <operator pos:line="16" pos:column="40">=<pos:position pos:line="16" pos:column="41"/></operator> <sizeof pos:line="16" pos:column="42">sizeof <argument_list pos:line="16" pos:column="49">(<argument><expr><name pos:line="16" pos:column="50">buf1<pos:position pos:line="16" pos:column="54"/></name></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></sizeof> <operator pos:line="16" pos:column="56">-<pos:position pos:line="16" pos:column="57"/></operator> <call><name pos:line="16" pos:column="58">strlen<pos:position pos:line="16" pos:column="64"/></name> <argument_list pos:line="16" pos:column="65">(<argument><expr><name pos:line="16" pos:column="66">tocode<pos:position pos:line="16" pos:column="72"/></name></expr></argument>)<pos:position pos:line="16" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="74"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name pos:line="17" pos:column="9">iconv<pos:position pos:line="17" pos:column="14"/></name> <argument_list pos:line="17" pos:column="15">(<argument><expr><name pos:line="17" pos:column="16">cd<pos:position pos:line="17" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="20">&amp;<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="21">ib<pos:position pos:line="17" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="25">&amp;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="26">ibl<pos:position pos:line="17" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="31">&amp;<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="32">ob<pos:position pos:line="17" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="36">&amp;<pos:position pos:line="17" pos:column="41"/></operator><name pos:line="17" pos:column="37">obl<pos:position pos:line="17" pos:column="40"/></name></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call> <operator pos:line="17" pos:column="42">==<pos:position pos:line="17" pos:column="44"/></operator> <call pos:line="17" pos:column="45">(<name pos:line="17" pos:column="46">size_t<pos:position pos:line="17" pos:column="52"/></name>)<argument_list pos:line="17" pos:column="53">(<argument><expr><operator pos:line="17" pos:column="54">-<pos:position pos:line="17" pos:column="55"/></operator><literal type="number" pos:line="17" pos:column="55">1<pos:position pos:line="17" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="57"/></argument_list></call> <operator pos:line="17" pos:column="58">||<pos:position pos:line="17" pos:column="60"/></operator>
	<call><name pos:line="18" pos:column="9">iconv<pos:position pos:line="18" pos:column="14"/></name> <argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">cd<pos:position pos:line="18" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="20">0<pos:position pos:line="18" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="23">0<pos:position pos:line="18" pos:column="24"/></literal></expr></argument>, <argument><expr><operator pos:line="18" pos:column="26">&amp;<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="27">ob<pos:position pos:line="18" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="31">&amp;<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="32">obl<pos:position pos:line="18" pos:column="35"/></name></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call> <operator pos:line="18" pos:column="37">==<pos:position pos:line="18" pos:column="39"/></operator> <call pos:line="18" pos:column="40">(<name pos:line="18" pos:column="41">size_t<pos:position pos:line="18" pos:column="47"/></name>)<argument_list pos:line="18" pos:column="48">(<argument><expr><operator pos:line="18" pos:column="49">-<pos:position pos:line="18" pos:column="50"/></operator><literal type="number" pos:line="18" pos:column="50">1<pos:position pos:line="18" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="53"/></condition><then pos:line="18" pos:column="53">
    <block pos:line="19" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">assert<pos:position pos:line="20" pos:column="13"/></name> <argument_list pos:line="20" pos:column="14">(<argument><expr><name pos:line="20" pos:column="15">errno<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">==<pos:position pos:line="20" pos:column="23"/></operator> <name pos:line="20" pos:column="24">E2BIG<pos:position pos:line="20" pos:column="29"/></name></expr></argument>)<pos:position pos:line="20" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">iconv_close<pos:position pos:line="21" pos:column="18"/></name> <argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">cd<pos:position pos:line="21" pos:column="22"/></name></expr></argument>)<pos:position pos:line="21" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="22" pos:column="7">assert<pos:position pos:line="22" pos:column="13"/></name> <argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">ib<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">&gt;<pos:position pos:line="22" pos:column="22"/></operator> <name pos:line="22" pos:column="20">d<pos:position pos:line="22" pos:column="21"/></name></expr></argument>)<pos:position pos:line="22" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt>
      <return pos:line="23" pos:column="7">return <expr><ternary><condition><expr><operator pos:line="23" pos:column="14">(<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">ib<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">-<pos:position pos:line="23" pos:column="19"/></operator> <name pos:line="23" pos:column="20">d<pos:position pos:line="23" pos:column="21"/></name> <operator pos:line="23" pos:column="22">==<pos:position pos:line="23" pos:column="24"/></operator> <name pos:line="23" pos:column="25">dlen<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">)<pos:position pos:line="23" pos:column="30"/></operator></expr> ?<pos:position pos:line="23" pos:column="32"/></condition><then pos:line="23" pos:column="32"> <expr><name pos:line="23" pos:column="33">dlen<pos:position pos:line="23" pos:column="37"/></name></expr> <pos:position pos:line="23" pos:column="38"/></then><else pos:line="23" pos:column="38">: <expr><name pos:line="23" pos:column="40">ib<pos:position pos:line="23" pos:column="42"/></name> <operator pos:line="23" pos:column="43">-<pos:position pos:line="23" pos:column="44"/></operator> <name pos:line="23" pos:column="45">d<pos:position pos:line="23" pos:column="46"/></name> <operator pos:line="23" pos:column="47">+<pos:position pos:line="23" pos:column="48"/></operator> <literal type="number" pos:line="23" pos:column="49">1<pos:position pos:line="23" pos:column="50"/></literal></expr></else></ternary></expr>;<pos:position pos:line="23" pos:column="51"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">iconv_close<pos:position pos:line="25" pos:column="16"/></name> <argument_list pos:line="25" pos:column="17">(<argument><expr><name pos:line="25" pos:column="18">cd<pos:position pos:line="25" pos:column="20"/></name></expr></argument>)<pos:position pos:line="25" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="26" pos:column="4"/></block></then>
  <else pos:line="27" pos:column="3">else
  <block pos:line="28" pos:column="3">{
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">dlen<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">&gt;<pos:position pos:line="29" pos:column="18"/></operator> <sizeof pos:line="29" pos:column="16">sizeof <argument_list pos:line="29" pos:column="23">(<argument><expr><name pos:line="29" pos:column="24">buf1<pos:position pos:line="29" pos:column="28"/></name></expr></argument>)<pos:position pos:line="29" pos:column="29"/></argument_list></sizeof> <operator pos:line="29" pos:column="30">-<pos:position pos:line="29" pos:column="31"/></operator> <call><name pos:line="29" pos:column="32">strlen<pos:position pos:line="29" pos:column="38"/></name> <argument_list pos:line="29" pos:column="39">(<argument><expr><name pos:line="29" pos:column="40">tocode<pos:position pos:line="29" pos:column="46"/></name></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="48"/></condition><then pos:line="29" pos:column="48">
      <block type="pseudo"><return pos:line="30" pos:column="7">return <expr><sizeof pos:line="30" pos:column="14">sizeof <argument_list pos:line="30" pos:column="21">(<argument><expr><name pos:line="30" pos:column="22">buf1<pos:position pos:line="30" pos:column="26"/></name></expr></argument>)<pos:position pos:line="30" pos:column="27"/></argument_list></sizeof> <operator pos:line="30" pos:column="28">-<pos:position pos:line="30" pos:column="29"/></operator> <call><name pos:line="30" pos:column="30">strlen<pos:position pos:line="30" pos:column="36"/></name> <argument_list pos:line="30" pos:column="37">(<argument><expr><name pos:line="30" pos:column="38">tocode<pos:position pos:line="30" pos:column="44"/></name></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call> <operator pos:line="30" pos:column="46">+<pos:position pos:line="30" pos:column="47"/></operator> <literal type="number" pos:line="30" pos:column="48">1<pos:position pos:line="30" pos:column="49"/></literal></expr>;<pos:position pos:line="30" pos:column="50"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">memcpy<pos:position pos:line="31" pos:column="11"/></name> <argument_list pos:line="31" pos:column="12">(<argument><expr><name pos:line="31" pos:column="13">buf1<pos:position pos:line="31" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="19">d<pos:position pos:line="31" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="22">dlen<pos:position pos:line="31" pos:column="26"/></name></expr></argument>)<pos:position pos:line="31" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="32" pos:column="5">ob<pos:position pos:line="32" pos:column="7"/></name> <operator pos:line="32" pos:column="8">=<pos:position pos:line="32" pos:column="9"/></operator> <name pos:line="32" pos:column="10">buf1<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">+<pos:position pos:line="32" pos:column="16"/></operator> <name pos:line="32" pos:column="17">dlen<pos:position pos:line="32" pos:column="21"/></name></expr>;<pos:position pos:line="32" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="33" pos:column="4"/></block></else></if>

  <expr_stmt><expr><name pos:line="35" pos:column="3">count<pos:position pos:line="35" pos:column="8"/></name> <operator pos:line="35" pos:column="9">=<pos:position pos:line="35" pos:column="10"/></operator> <literal type="number" pos:line="35" pos:column="11">0<pos:position pos:line="35" pos:column="12"/></literal></expr>;<pos:position pos:line="35" pos:column="13"/></expr_stmt>
  <for pos:line="36" pos:column="3">for <control pos:line="36" pos:column="7">(<init><expr><name pos:line="36" pos:column="8">p<pos:position pos:line="36" pos:column="9"/></name> <operator pos:line="36" pos:column="10">=<pos:position pos:line="36" pos:column="11"/></operator> <name pos:line="36" pos:column="12">buf1<pos:position pos:line="36" pos:column="16"/></name></expr>;<pos:position pos:line="36" pos:column="17"/></init> <condition><expr><name pos:line="36" pos:column="18">p<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">&lt;<pos:position pos:line="36" pos:column="24"/></operator> <name pos:line="36" pos:column="22">ob<pos:position pos:line="36" pos:column="24"/></name></expr>;<pos:position pos:line="36" pos:column="25"/></condition> <incr><expr><name pos:line="36" pos:column="26">p<pos:position pos:line="36" pos:column="27"/></name><operator pos:line="36" pos:column="27">++<pos:position pos:line="36" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="36" pos:column="30"/></control>
  <block pos:line="37" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="38" pos:column="5">unsigned<pos:position pos:line="38" pos:column="13"/></name> <name pos:line="38" pos:column="14">char<pos:position pos:line="38" pos:column="18"/></name></type> <name pos:line="38" pos:column="19">c<pos:position pos:line="38" pos:column="20"/></name> <init pos:line="38" pos:column="21">= <expr><operator pos:line="38" pos:column="23">*<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="24">p<pos:position pos:line="38" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="38" pos:column="26"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">assert<pos:position pos:line="39" pos:column="11"/></name> <argument_list pos:line="39" pos:column="12">(<argument><expr><call><name pos:line="39" pos:column="13">strchr<pos:position pos:line="39" pos:column="19"/></name> <argument_list pos:line="39" pos:column="20">(<argument><expr><name pos:line="39" pos:column="21">MimeSpecials<pos:position pos:line="39" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="39" pos:column="35">'?'<pos:position pos:line="39" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="41"/></expr_stmt>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">c<pos:position pos:line="40" pos:column="10"/></name> <operator pos:line="40" pos:column="11">&gt;=<pos:position pos:line="40" pos:column="16"/></operator> <literal type="number" pos:line="40" pos:column="14">0x7f<pos:position pos:line="40" pos:column="18"/></literal> <operator pos:line="40" pos:column="19">||<pos:position pos:line="40" pos:column="21"/></operator> <name pos:line="40" pos:column="22">c<pos:position pos:line="40" pos:column="23"/></name> <operator pos:line="40" pos:column="24">&lt;<pos:position pos:line="40" pos:column="28"/></operator> <literal type="number" pos:line="40" pos:column="26">0x20<pos:position pos:line="40" pos:column="30"/></literal> <operator pos:line="40" pos:column="31">||<pos:position pos:line="40" pos:column="33"/></operator> <operator pos:line="40" pos:column="34">*<pos:position pos:line="40" pos:column="35"/></operator><name pos:line="40" pos:column="35">p<pos:position pos:line="40" pos:column="36"/></name> <operator pos:line="40" pos:column="37">==<pos:position pos:line="40" pos:column="39"/></operator> <literal type="char" pos:line="40" pos:column="40">'_'<pos:position pos:line="40" pos:column="43"/></literal> <operator pos:line="40" pos:column="44">||<pos:position pos:line="40" pos:column="46"/></operator>
	<operator pos:line="41" pos:column="9">(<pos:position pos:line="41" pos:column="10"/></operator><name pos:line="41" pos:column="10">c<pos:position pos:line="41" pos:column="11"/></name> <operator pos:line="41" pos:column="12">!=<pos:position pos:line="41" pos:column="14"/></operator> <literal type="char" pos:line="41" pos:column="15">' '<pos:position pos:line="41" pos:column="18"/></literal> <operator pos:line="41" pos:column="19">&amp;&amp;<pos:position pos:line="41" pos:column="29"/></operator> <call><name pos:line="41" pos:column="22">strchr<pos:position pos:line="41" pos:column="28"/></name> <argument_list pos:line="41" pos:column="29">(<argument><expr><name pos:line="41" pos:column="30">MimeSpecials<pos:position pos:line="41" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="44">*<pos:position pos:line="41" pos:column="45"/></operator><name pos:line="41" pos:column="45">p<pos:position pos:line="41" pos:column="46"/></name></expr></argument>)<pos:position pos:line="41" pos:column="47"/></argument_list></call><operator pos:line="41" pos:column="47">)<pos:position pos:line="41" pos:column="48"/></operator></expr>)<pos:position pos:line="41" pos:column="49"/></condition><then pos:line="41" pos:column="49">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="42" pos:column="7">++<pos:position pos:line="42" pos:column="9"/></operator><name pos:line="42" pos:column="9">count<pos:position pos:line="42" pos:column="14"/></name></expr>;<pos:position pos:line="42" pos:column="15"/></expr_stmt></block></then></if>
  }<pos:position pos:line="43" pos:column="4"/></block></for>

  <expr_stmt><expr><name pos:line="45" pos:column="3">len<pos:position pos:line="45" pos:column="6"/></name> <operator pos:line="45" pos:column="7">=<pos:position pos:line="45" pos:column="8"/></operator> <name pos:line="45" pos:column="9">ENCWORD_LEN_MIN<pos:position pos:line="45" pos:column="24"/></name> <operator pos:line="45" pos:column="25">-<pos:position pos:line="45" pos:column="26"/></operator> <literal type="number" pos:line="45" pos:column="27">2<pos:position pos:line="45" pos:column="28"/></literal> <operator pos:line="45" pos:column="29">+<pos:position pos:line="45" pos:column="30"/></operator> <call><name pos:line="45" pos:column="31">strlen<pos:position pos:line="45" pos:column="37"/></name> <argument_list pos:line="45" pos:column="38">(<argument><expr><name pos:line="45" pos:column="39">tocode<pos:position pos:line="45" pos:column="45"/></name></expr></argument>)<pos:position pos:line="45" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name pos:line="46" pos:column="3">len_b<pos:position pos:line="46" pos:column="8"/></name> <operator pos:line="46" pos:column="9">=<pos:position pos:line="46" pos:column="10"/></operator> <name pos:line="46" pos:column="11">len<pos:position pos:line="46" pos:column="14"/></name> <operator pos:line="46" pos:column="15">+<pos:position pos:line="46" pos:column="16"/></operator> <operator pos:line="46" pos:column="17">(<pos:position pos:line="46" pos:column="18"/></operator><operator pos:line="46" pos:column="18">(<pos:position pos:line="46" pos:column="19"/></operator><operator pos:line="46" pos:column="19">(<pos:position pos:line="46" pos:column="20"/></operator><name pos:line="46" pos:column="20">ob<pos:position pos:line="46" pos:column="22"/></name> <operator pos:line="46" pos:column="23">-<pos:position pos:line="46" pos:column="24"/></operator> <name pos:line="46" pos:column="25">buf1<pos:position pos:line="46" pos:column="29"/></name><operator pos:line="46" pos:column="29">)<pos:position pos:line="46" pos:column="30"/></operator> <operator pos:line="46" pos:column="31">+<pos:position pos:line="46" pos:column="32"/></operator> <literal type="number" pos:line="46" pos:column="33">2<pos:position pos:line="46" pos:column="34"/></literal><operator pos:line="46" pos:column="34">)<pos:position pos:line="46" pos:column="35"/></operator> <operator pos:line="46" pos:column="36">/<pos:position pos:line="46" pos:column="37"/></operator> <literal type="number" pos:line="46" pos:column="38">3<pos:position pos:line="46" pos:column="39"/></literal><operator pos:line="46" pos:column="39">)<pos:position pos:line="46" pos:column="40"/></operator> <operator pos:line="46" pos:column="41">*<pos:position pos:line="46" pos:column="42"/></operator> <literal type="number" pos:line="46" pos:column="43">4<pos:position pos:line="46" pos:column="44"/></literal></expr>;<pos:position pos:line="46" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><name pos:line="47" pos:column="3">len_q<pos:position pos:line="47" pos:column="8"/></name> <operator pos:line="47" pos:column="9">=<pos:position pos:line="47" pos:column="10"/></operator> <name pos:line="47" pos:column="11">len<pos:position pos:line="47" pos:column="14"/></name> <operator pos:line="47" pos:column="15">+<pos:position pos:line="47" pos:column="16"/></operator> <operator pos:line="47" pos:column="17">(<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="18">ob<pos:position pos:line="47" pos:column="20"/></name> <operator pos:line="47" pos:column="21">-<pos:position pos:line="47" pos:column="22"/></operator> <name pos:line="47" pos:column="23">buf1<pos:position pos:line="47" pos:column="27"/></name><operator pos:line="47" pos:column="27">)<pos:position pos:line="47" pos:column="28"/></operator> <operator pos:line="47" pos:column="29">+<pos:position pos:line="47" pos:column="30"/></operator> <literal type="number" pos:line="47" pos:column="31">2<pos:position pos:line="47" pos:column="32"/></literal> <operator pos:line="47" pos:column="33">*<pos:position pos:line="47" pos:column="34"/></operator> <name pos:line="47" pos:column="35">count<pos:position pos:line="47" pos:column="40"/></name></expr>;<pos:position pos:line="47" pos:column="41"/></expr_stmt>

  <comment type="block" pos:line="49" pos:column="3">/* Apparently RFC 1468 says to use B encoding for iso-2022-jp. */</comment>
  <if pos:line="50" pos:column="3">if <condition pos:line="50" pos:column="6">(<expr><operator pos:line="50" pos:column="7">!<pos:position pos:line="50" pos:column="8"/></operator><call><name pos:line="50" pos:column="8">ascii_strcasecmp<pos:position pos:line="50" pos:column="24"/></name> <argument_list pos:line="50" pos:column="25">(<argument><expr><name pos:line="50" pos:column="26">tocode<pos:position pos:line="50" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="34">"ISO-2022-JP"<pos:position pos:line="50" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="49"/></condition><then pos:line="50" pos:column="49">
    <block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="5">len_q<pos:position pos:line="51" pos:column="10"/></name> <operator pos:line="51" pos:column="11">=<pos:position pos:line="51" pos:column="12"/></operator> <name pos:line="51" pos:column="13">ENCWORD_LEN_MAX<pos:position pos:line="51" pos:column="28"/></name> <operator pos:line="51" pos:column="29">+<pos:position pos:line="51" pos:column="30"/></operator> <literal type="number" pos:line="51" pos:column="31">1<pos:position pos:line="51" pos:column="32"/></literal></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt></block></then></if>

  <if pos:line="53" pos:column="3">if <condition pos:line="53" pos:column="6">(<expr><name pos:line="53" pos:column="7">len_b<pos:position pos:line="53" pos:column="12"/></name> <operator pos:line="53" pos:column="13">&lt;<pos:position pos:line="53" pos:column="17"/></operator> <name pos:line="53" pos:column="15">len_q<pos:position pos:line="53" pos:column="20"/></name> <operator pos:line="53" pos:column="21">&amp;&amp;<pos:position pos:line="53" pos:column="31"/></operator> <name pos:line="53" pos:column="24">len_b<pos:position pos:line="53" pos:column="29"/></name> <operator pos:line="53" pos:column="30">&lt;=<pos:position pos:line="53" pos:column="35"/></operator> <name pos:line="53" pos:column="33">ENCWORD_LEN_MAX<pos:position pos:line="53" pos:column="48"/></name></expr>)<pos:position pos:line="53" pos:column="49"/></condition><then pos:line="53" pos:column="49">
  <block pos:line="54" pos:column="3">{
    <expr_stmt><expr><operator pos:line="55" pos:column="5">*<pos:position pos:line="55" pos:column="6"/></operator><name pos:line="55" pos:column="6">encoder<pos:position pos:line="55" pos:column="13"/></name> <operator pos:line="55" pos:column="14">=<pos:position pos:line="55" pos:column="15"/></operator> <name pos:line="55" pos:column="16">b_encoder<pos:position pos:line="55" pos:column="25"/></name></expr>;<pos:position pos:line="55" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="56" pos:column="5">*<pos:position pos:line="56" pos:column="6"/></operator><name pos:line="56" pos:column="6">wlen<pos:position pos:line="56" pos:column="10"/></name> <operator pos:line="56" pos:column="11">=<pos:position pos:line="56" pos:column="12"/></operator> <name pos:line="56" pos:column="13">len_b<pos:position pos:line="56" pos:column="18"/></name></expr>;<pos:position pos:line="56" pos:column="19"/></expr_stmt>
    <return pos:line="57" pos:column="5">return <expr><literal type="number" pos:line="57" pos:column="12">0<pos:position pos:line="57" pos:column="13"/></literal></expr>;<pos:position pos:line="57" pos:column="14"/></return>
  }<pos:position pos:line="58" pos:column="4"/></block></then>
  <elseif pos:line="59" pos:column="3">else <if pos:line="59" pos:column="8">if <condition pos:line="59" pos:column="11">(<expr><name pos:line="59" pos:column="12">len_q<pos:position pos:line="59" pos:column="17"/></name> <operator pos:line="59" pos:column="18">&lt;=<pos:position pos:line="59" pos:column="23"/></operator> <name pos:line="59" pos:column="21">ENCWORD_LEN_MAX<pos:position pos:line="59" pos:column="36"/></name></expr>)<pos:position pos:line="59" pos:column="37"/></condition><then pos:line="59" pos:column="37">
  <block pos:line="60" pos:column="3">{
    <expr_stmt><expr><operator pos:line="61" pos:column="5">*<pos:position pos:line="61" pos:column="6"/></operator><name pos:line="61" pos:column="6">encoder<pos:position pos:line="61" pos:column="13"/></name> <operator pos:line="61" pos:column="14">=<pos:position pos:line="61" pos:column="15"/></operator> <name pos:line="61" pos:column="16">q_encoder<pos:position pos:line="61" pos:column="25"/></name></expr>;<pos:position pos:line="61" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="62" pos:column="5">*<pos:position pos:line="62" pos:column="6"/></operator><name pos:line="62" pos:column="6">wlen<pos:position pos:line="62" pos:column="10"/></name> <operator pos:line="62" pos:column="11">=<pos:position pos:line="62" pos:column="12"/></operator> <name pos:line="62" pos:column="13">len_q<pos:position pos:line="62" pos:column="18"/></name></expr>;<pos:position pos:line="62" pos:column="19"/></expr_stmt>
    <return pos:line="63" pos:column="5">return <expr><literal type="number" pos:line="63" pos:column="12">0<pos:position pos:line="63" pos:column="13"/></literal></expr>;<pos:position pos:line="63" pos:column="14"/></return>
  }<pos:position pos:line="64" pos:column="4"/></block></then></if></elseif>
  <else pos:line="65" pos:column="3">else
    <block type="pseudo"><return pos:line="66" pos:column="5">return <expr><name pos:line="66" pos:column="12">dlen<pos:position pos:line="66" pos:column="16"/></name></expr>;<pos:position pos:line="66" pos:column="17"/></return></block></else></if>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
