<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C" filename="git/repos/git-2.8.6/builtin/am.c" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
 * Builtin "git am"
 *
 * Based on git-am.sh by Junio C Hamano.
 */</comment>
<cpp:include pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">include<pos:position pos:line="6" pos:column="9"/></cpp:directive> <cpp:file pos:line="6" pos:column="10">"cache.h"<pos:position pos:line="6" pos:column="19"/></cpp:file></cpp:include>
<cpp:include pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">include<pos:position pos:line="7" pos:column="9"/></cpp:directive> <cpp:file pos:line="7" pos:column="10">"builtin.h"<pos:position pos:line="7" pos:column="21"/></cpp:file></cpp:include>
<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include<pos:position pos:line="8" pos:column="9"/></cpp:directive> <cpp:file pos:line="8" pos:column="10">"exec_cmd.h"<pos:position pos:line="8" pos:column="22"/></cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include<pos:position pos:line="9" pos:column="9"/></cpp:directive> <cpp:file pos:line="9" pos:column="10">"parse-options.h"<pos:position pos:line="9" pos:column="27"/></cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include<pos:position pos:line="10" pos:column="9"/></cpp:directive> <cpp:file pos:line="10" pos:column="10">"dir.h"<pos:position pos:line="10" pos:column="17"/></cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include<pos:position pos:line="11" pos:column="9"/></cpp:directive> <cpp:file pos:line="11" pos:column="10">"run-command.h"<pos:position pos:line="11" pos:column="25"/></cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include<pos:position pos:line="12" pos:column="9"/></cpp:directive> <cpp:file pos:line="12" pos:column="10">"quote.h"<pos:position pos:line="12" pos:column="19"/></cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include<pos:position pos:line="13" pos:column="9"/></cpp:directive> <cpp:file pos:line="13" pos:column="10">"tempfile.h"<pos:position pos:line="13" pos:column="22"/></cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include<pos:position pos:line="14" pos:column="9"/></cpp:directive> <cpp:file pos:line="14" pos:column="10">"lockfile.h"<pos:position pos:line="14" pos:column="22"/></cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include<pos:position pos:line="15" pos:column="9"/></cpp:directive> <cpp:file pos:line="15" pos:column="10">"cache-tree.h"<pos:position pos:line="15" pos:column="24"/></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include<pos:position pos:line="16" pos:column="9"/></cpp:directive> <cpp:file pos:line="16" pos:column="10">"refs.h"<pos:position pos:line="16" pos:column="18"/></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include<pos:position pos:line="17" pos:column="9"/></cpp:directive> <cpp:file pos:line="17" pos:column="10">"commit.h"<pos:position pos:line="17" pos:column="20"/></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include<pos:position pos:line="18" pos:column="9"/></cpp:directive> <cpp:file pos:line="18" pos:column="10">"diff.h"<pos:position pos:line="18" pos:column="18"/></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include<pos:position pos:line="19" pos:column="9"/></cpp:directive> <cpp:file pos:line="19" pos:column="10">"diffcore.h"<pos:position pos:line="19" pos:column="22"/></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include<pos:position pos:line="20" pos:column="9"/></cpp:directive> <cpp:file pos:line="20" pos:column="10">"unpack-trees.h"<pos:position pos:line="20" pos:column="26"/></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include<pos:position pos:line="21" pos:column="9"/></cpp:directive> <cpp:file pos:line="21" pos:column="10">"branch.h"<pos:position pos:line="21" pos:column="20"/></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include<pos:position pos:line="22" pos:column="9"/></cpp:directive> <cpp:file pos:line="22" pos:column="10">"sequencer.h"<pos:position pos:line="22" pos:column="23"/></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include<pos:position pos:line="23" pos:column="9"/></cpp:directive> <cpp:file pos:line="23" pos:column="10">"revision.h"<pos:position pos:line="23" pos:column="22"/></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include<pos:position pos:line="24" pos:column="9"/></cpp:directive> <cpp:file pos:line="24" pos:column="10">"merge-recursive.h"<pos:position pos:line="24" pos:column="29"/></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include<pos:position pos:line="25" pos:column="9"/></cpp:directive> <cpp:file pos:line="25" pos:column="10">"revision.h"<pos:position pos:line="25" pos:column="22"/></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include<pos:position pos:line="26" pos:column="9"/></cpp:directive> <cpp:file pos:line="26" pos:column="10">"log-tree.h"<pos:position pos:line="26" pos:column="22"/></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include<pos:position pos:line="27" pos:column="9"/></cpp:directive> <cpp:file pos:line="27" pos:column="10">"notes-utils.h"<pos:position pos:line="27" pos:column="25"/></cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include<pos:position pos:line="28" pos:column="9"/></cpp:directive> <cpp:file pos:line="28" pos:column="10">"rerere.h"<pos:position pos:line="28" pos:column="20"/></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include<pos:position pos:line="29" pos:column="9"/></cpp:directive> <cpp:file pos:line="29" pos:column="10">"prompt.h"<pos:position pos:line="29" pos:column="20"/></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include<pos:position pos:line="30" pos:column="9"/></cpp:directive> <cpp:file pos:line="30" pos:column="10">"mailinfo.h"<pos:position pos:line="30" pos:column="22"/></cpp:file></cpp:include>

<comment type="block" pos:line="32" pos:column="1">/**
 * Returns 1 if the file is empty or does not exist, 0 otherwise.
 */</comment>
<function><specifier pos:line="35" pos:column="1">static<pos:position pos:line="35" pos:column="7"/></specifier> <type><name pos:line="35" pos:column="8">int<pos:position pos:line="35" pos:column="11"/></name></type> <name pos:line="35" pos:column="12">is_empty_file<pos:position pos:line="35" pos:column="25"/></name><parameter_list pos:line="35" pos:column="25">(<parameter><decl><type><specifier pos:line="35" pos:column="26">const<pos:position pos:line="35" pos:column="31"/></specifier> <name pos:line="35" pos:column="32">char<pos:position pos:line="35" pos:column="36"/></name> <modifier pos:line="35" pos:column="37">*<pos:position pos:line="35" pos:column="38"/></modifier></type><name pos:line="35" pos:column="38">filename<pos:position pos:line="35" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="35" pos:column="47"/></parameter_list>
<block pos:line="36" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="37" pos:column="9">struct<pos:position pos:line="37" pos:column="15"/></name> <name pos:line="37" pos:column="16">stat<pos:position pos:line="37" pos:column="20"/></name></name></type> <name pos:line="37" pos:column="21">st<pos:position pos:line="37" pos:column="23"/></name></decl>;<pos:position pos:line="37" pos:column="24"/></decl_stmt>

	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><call><name pos:line="39" pos:column="13">stat<pos:position pos:line="39" pos:column="17"/></name><argument_list pos:line="39" pos:column="17">(<argument><expr><name pos:line="39" pos:column="18">filename<pos:position pos:line="39" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="28">&amp;<pos:position pos:line="39" pos:column="33"/></operator><name pos:line="39" pos:column="29">st<pos:position pos:line="39" pos:column="31"/></name></expr></argument>)<pos:position pos:line="39" pos:column="32"/></argument_list></call> <operator pos:line="39" pos:column="33">&lt;<pos:position pos:line="39" pos:column="37"/></operator> <literal type="number" pos:line="39" pos:column="35">0<pos:position pos:line="39" pos:column="36"/></literal></expr>)<pos:position pos:line="39" pos:column="37"/></condition><then pos:line="39" pos:column="37"> <block pos:line="39" pos:column="38">{
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">errno<pos:position pos:line="40" pos:column="26"/></name> <operator pos:line="40" pos:column="27">==<pos:position pos:line="40" pos:column="29"/></operator> <name pos:line="40" pos:column="30">ENOENT<pos:position pos:line="40" pos:column="36"/></name></expr>)<pos:position pos:line="40" pos:column="37"/></condition><then pos:line="40" pos:column="37">
			<block type="pseudo"><return pos:line="41" pos:column="25">return <expr><literal type="number" pos:line="41" pos:column="32">1<pos:position pos:line="41" pos:column="33"/></literal></expr>;<pos:position pos:line="41" pos:column="34"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">die_errno<pos:position pos:line="42" pos:column="26"/></name><argument_list pos:line="42" pos:column="26">(<argument><expr><call><name pos:line="42" pos:column="27">_<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><literal type="string" pos:line="42" pos:column="29">"could not stat %s"<pos:position pos:line="42" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="42" pos:column="51">filename<pos:position pos:line="42" pos:column="59"/></name></expr></argument>)<pos:position pos:line="42" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>

	<return pos:line="45" pos:column="9">return <expr><operator pos:line="45" pos:column="16">!<pos:position pos:line="45" pos:column="17"/></operator><name><name pos:line="45" pos:column="17">st<pos:position pos:line="45" pos:column="19"/></name><operator pos:line="45" pos:column="19">.<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="20">st_size<pos:position pos:line="45" pos:column="27"/></name></name></expr>;<pos:position pos:line="45" pos:column="28"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function>

<comment type="block" pos:line="48" pos:column="1">/**
 * Returns the length of the first line of msg.
 */</comment>
<function><specifier pos:line="51" pos:column="1">static<pos:position pos:line="51" pos:column="7"/></specifier> <type><name pos:line="51" pos:column="8">int<pos:position pos:line="51" pos:column="11"/></name></type> <name pos:line="51" pos:column="12">linelen<pos:position pos:line="51" pos:column="19"/></name><parameter_list pos:line="51" pos:column="19">(<parameter><decl><type><specifier pos:line="51" pos:column="20">const<pos:position pos:line="51" pos:column="25"/></specifier> <name pos:line="51" pos:column="26">char<pos:position pos:line="51" pos:column="30"/></name> <modifier pos:line="51" pos:column="31">*<pos:position pos:line="51" pos:column="32"/></modifier></type><name pos:line="51" pos:column="32">msg<pos:position pos:line="51" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="51" pos:column="36"/></parameter_list>
<block pos:line="52" pos:column="1">{
	<return pos:line="53" pos:column="9">return <expr><call><name pos:line="53" pos:column="16">strchrnul<pos:position pos:line="53" pos:column="25"/></name><argument_list pos:line="53" pos:column="25">(<argument><expr><name pos:line="53" pos:column="26">msg<pos:position pos:line="53" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="53" pos:column="31">'\n'<pos:position pos:line="53" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="36"/></argument_list></call> <operator pos:line="53" pos:column="37">-<pos:position pos:line="53" pos:column="38"/></operator> <name pos:line="53" pos:column="39">msg<pos:position pos:line="53" pos:column="42"/></name></expr>;<pos:position pos:line="53" pos:column="43"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function>

<comment type="block" pos:line="56" pos:column="1">/**
 * Returns true if `str` consists of only whitespace, false otherwise.
 */</comment>
<function><specifier pos:line="59" pos:column="1">static<pos:position pos:line="59" pos:column="7"/></specifier> <type><name pos:line="59" pos:column="8">int<pos:position pos:line="59" pos:column="11"/></name></type> <name pos:line="59" pos:column="12">str_isspace<pos:position pos:line="59" pos:column="23"/></name><parameter_list pos:line="59" pos:column="23">(<parameter><decl><type><specifier pos:line="59" pos:column="24">const<pos:position pos:line="59" pos:column="29"/></specifier> <name pos:line="59" pos:column="30">char<pos:position pos:line="59" pos:column="34"/></name> <modifier pos:line="59" pos:column="35">*<pos:position pos:line="59" pos:column="36"/></modifier></type><name pos:line="59" pos:column="36">str<pos:position pos:line="59" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="59" pos:column="40"/></parameter_list>
<block pos:line="60" pos:column="1">{
	<for pos:line="61" pos:column="9">for <control pos:line="61" pos:column="13">(<init pos:line="61" pos:column="14">;<pos:position pos:line="61" pos:column="15"/></init> <condition><expr><operator pos:line="61" pos:column="16">*<pos:position pos:line="61" pos:column="17"/></operator><name pos:line="61" pos:column="17">str<pos:position pos:line="61" pos:column="20"/></name></expr>;<pos:position pos:line="61" pos:column="21"/></condition> <incr><expr><name pos:line="61" pos:column="22">str<pos:position pos:line="61" pos:column="25"/></name><operator pos:line="61" pos:column="25">++<pos:position pos:line="61" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="61" pos:column="28"/></control>
		<block type="pseudo"><if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><operator pos:line="62" pos:column="21">!<pos:position pos:line="62" pos:column="22"/></operator><call><name pos:line="62" pos:column="22">isspace<pos:position pos:line="62" pos:column="29"/></name><argument_list pos:line="62" pos:column="29">(<argument><expr><operator pos:line="62" pos:column="30">*<pos:position pos:line="62" pos:column="31"/></operator><name pos:line="62" pos:column="31">str<pos:position pos:line="62" pos:column="34"/></name></expr></argument>)<pos:position pos:line="62" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="36"/></condition><then pos:line="62" pos:column="36">
			<block type="pseudo"><return pos:line="63" pos:column="25">return <expr><literal type="number" pos:line="63" pos:column="32">0<pos:position pos:line="63" pos:column="33"/></literal></expr>;<pos:position pos:line="63" pos:column="34"/></return></block></then></if></block></for>

	<return pos:line="65" pos:column="9">return <expr><literal type="number" pos:line="65" pos:column="16">1<pos:position pos:line="65" pos:column="17"/></literal></expr>;<pos:position pos:line="65" pos:column="18"/></return>
}<pos:position pos:line="66" pos:column="2"/></block></function>

<enum pos:line="68" pos:column="1">enum <name pos:line="68" pos:column="6">patch_format<pos:position pos:line="68" pos:column="18"/></name> <block pos:line="68" pos:column="19">{
	<decl><name pos:line="69" pos:column="9">PATCH_FORMAT_UNKNOWN<pos:position pos:line="69" pos:column="29"/></name> <init pos:line="69" pos:column="30">= <expr><literal type="number" pos:line="69" pos:column="32">0<pos:position pos:line="69" pos:column="33"/></literal></expr></init></decl>,
	<decl><name pos:line="70" pos:column="9">PATCH_FORMAT_MBOX<pos:position pos:line="70" pos:column="26"/></name></decl>,
	<decl><name pos:line="71" pos:column="9">PATCH_FORMAT_STGIT<pos:position pos:line="71" pos:column="27"/></name></decl>,
	<decl><name pos:line="72" pos:column="9">PATCH_FORMAT_STGIT_SERIES<pos:position pos:line="72" pos:column="34"/></name></decl>,
	<decl><name pos:line="73" pos:column="9">PATCH_FORMAT_HG<pos:position pos:line="73" pos:column="24"/></name></decl>
}<pos:position pos:line="74" pos:column="2"/></block>;<pos:position pos:line="74" pos:column="3"/></enum>

<enum pos:line="76" pos:column="1">enum <name pos:line="76" pos:column="6">keep_type<pos:position pos:line="76" pos:column="15"/></name> <block pos:line="76" pos:column="16">{
	<decl><name pos:line="77" pos:column="9">KEEP_FALSE<pos:position pos:line="77" pos:column="19"/></name> <init pos:line="77" pos:column="20">= <expr><literal type="number" pos:line="77" pos:column="22">0<pos:position pos:line="77" pos:column="23"/></literal></expr></init></decl>,
	<decl><name pos:line="78" pos:column="9">KEEP_TRUE<pos:position pos:line="78" pos:column="18"/></name></decl>,      <comment type="block" pos:line="78" pos:column="25">/* pass -k flag to git-mailinfo */</comment>
	<decl><name pos:line="79" pos:column="9">KEEP_NON_PATCH<pos:position pos:line="79" pos:column="23"/></name></decl>  <comment type="block" pos:line="79" pos:column="25">/* pass -b flag to git-mailinfo */</comment>
}<pos:position pos:line="80" pos:column="2"/></block>;<pos:position pos:line="80" pos:column="3"/></enum>

<enum pos:line="82" pos:column="1">enum <name pos:line="82" pos:column="6">scissors_type<pos:position pos:line="82" pos:column="19"/></name> <block pos:line="82" pos:column="20">{
	<decl><name pos:line="83" pos:column="9">SCISSORS_UNSET<pos:position pos:line="83" pos:column="23"/></name> <init pos:line="83" pos:column="24">= <expr><operator pos:line="83" pos:column="26">-<pos:position pos:line="83" pos:column="27"/></operator><literal type="number" pos:line="83" pos:column="27">1<pos:position pos:line="83" pos:column="28"/></literal></expr></init></decl>,
	<decl><name pos:line="84" pos:column="9">SCISSORS_FALSE<pos:position pos:line="84" pos:column="23"/></name> <init pos:line="84" pos:column="24">= <expr><literal type="number" pos:line="84" pos:column="26">0<pos:position pos:line="84" pos:column="27"/></literal></expr></init></decl>,  <comment type="block" pos:line="84" pos:column="30">/* pass --no-scissors to git-mailinfo */</comment>
	<decl><name pos:line="85" pos:column="9">SCISSORS_TRUE<pos:position pos:line="85" pos:column="22"/></name></decl>        <comment type="block" pos:line="85" pos:column="30">/* pass --scissors to git-mailinfo */</comment>
}<pos:position pos:line="86" pos:column="2"/></block>;<pos:position pos:line="86" pos:column="3"/></enum>

<enum pos:line="88" pos:column="1">enum <name pos:line="88" pos:column="6">signoff_type<pos:position pos:line="88" pos:column="18"/></name> <block pos:line="88" pos:column="19">{
	<decl><name pos:line="89" pos:column="9">SIGNOFF_FALSE<pos:position pos:line="89" pos:column="22"/></name> <init pos:line="89" pos:column="23">= <expr><literal type="number" pos:line="89" pos:column="25">0<pos:position pos:line="89" pos:column="26"/></literal></expr></init></decl>,
	<decl><name pos:line="90" pos:column="9">SIGNOFF_TRUE<pos:position pos:line="90" pos:column="21"/></name> <init pos:line="90" pos:column="22">= <expr><literal type="number" pos:line="90" pos:column="24">1<pos:position pos:line="90" pos:column="25"/></literal></expr></init></decl>,
	<decl><name pos:line="91" pos:column="9">SIGNOFF_EXPLICIT<pos:position pos:line="91" pos:column="25"/></name></decl> <comment type="block" pos:line="91" pos:column="26">/* --signoff was set on the command-line */</comment>
}<pos:position pos:line="92" pos:column="2"/></block>;<pos:position pos:line="92" pos:column="3"/></enum>

<struct pos:line="94" pos:column="1">struct <name pos:line="94" pos:column="8">am_state<pos:position pos:line="94" pos:column="16"/></name> <block pos:line="94" pos:column="17">{
	<comment type="block" pos:line="95" pos:column="9">/* state directory path */</comment>
	<decl_stmt><decl><type><name pos:line="96" pos:column="9">char<pos:position pos:line="96" pos:column="13"/></name> <modifier pos:line="96" pos:column="14">*<pos:position pos:line="96" pos:column="15"/></modifier></type><name pos:line="96" pos:column="15">dir<pos:position pos:line="96" pos:column="18"/></name></decl>;<pos:position pos:line="96" pos:column="19"/></decl_stmt>

	<comment type="block" pos:line="98" pos:column="9">/* current and last patch numbers, 1-indexed */</comment>
	<decl_stmt><decl><type><name pos:line="99" pos:column="9">int<pos:position pos:line="99" pos:column="12"/></name></type> <name pos:line="99" pos:column="13">cur<pos:position pos:line="99" pos:column="16"/></name></decl>;<pos:position pos:line="99" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="100" pos:column="9">int<pos:position pos:line="100" pos:column="12"/></name></type> <name pos:line="100" pos:column="13">last<pos:position pos:line="100" pos:column="17"/></name></decl>;<pos:position pos:line="100" pos:column="18"/></decl_stmt>

	<comment type="block" pos:line="102" pos:column="9">/* commit metadata and message */</comment>
	<decl_stmt><decl><type><name pos:line="103" pos:column="9">char<pos:position pos:line="103" pos:column="13"/></name> <modifier pos:line="103" pos:column="14">*<pos:position pos:line="103" pos:column="15"/></modifier></type><name pos:line="103" pos:column="15">author_name<pos:position pos:line="103" pos:column="26"/></name></decl>;<pos:position pos:line="103" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="104" pos:column="9">char<pos:position pos:line="104" pos:column="13"/></name> <modifier pos:line="104" pos:column="14">*<pos:position pos:line="104" pos:column="15"/></modifier></type><name pos:line="104" pos:column="15">author_email<pos:position pos:line="104" pos:column="27"/></name></decl>;<pos:position pos:line="104" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="105" pos:column="9">char<pos:position pos:line="105" pos:column="13"/></name> <modifier pos:line="105" pos:column="14">*<pos:position pos:line="105" pos:column="15"/></modifier></type><name pos:line="105" pos:column="15">author_date<pos:position pos:line="105" pos:column="26"/></name></decl>;<pos:position pos:line="105" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="106" pos:column="9">char<pos:position pos:line="106" pos:column="13"/></name> <modifier pos:line="106" pos:column="14">*<pos:position pos:line="106" pos:column="15"/></modifier></type><name pos:line="106" pos:column="15">msg<pos:position pos:line="106" pos:column="18"/></name></decl>;<pos:position pos:line="106" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="107" pos:column="9">size_t<pos:position pos:line="107" pos:column="15"/></name></type> <name pos:line="107" pos:column="16">msg_len<pos:position pos:line="107" pos:column="23"/></name></decl>;<pos:position pos:line="107" pos:column="24"/></decl_stmt>

	<comment type="block" pos:line="109" pos:column="9">/* when --rebasing, records the original commit the patch came from */</comment>
	<decl_stmt><decl><type><name pos:line="110" pos:column="9">unsigned<pos:position pos:line="110" pos:column="17"/></name> <name pos:line="110" pos:column="18">char<pos:position pos:line="110" pos:column="22"/></name></type> <name><name pos:line="110" pos:column="23">orig_commit<pos:position pos:line="110" pos:column="34"/></name><index pos:line="110" pos:column="34">[<expr><name pos:line="110" pos:column="35">GIT_SHA1_RAWSZ<pos:position pos:line="110" pos:column="49"/></name></expr>]<pos:position pos:line="110" pos:column="50"/></index></name></decl>;<pos:position pos:line="110" pos:column="51"/></decl_stmt>

	<comment type="block" pos:line="112" pos:column="9">/* number of digits in patch filename */</comment>
	<decl_stmt><decl><type><name pos:line="113" pos:column="9">int<pos:position pos:line="113" pos:column="12"/></name></type> <name pos:line="113" pos:column="13">prec<pos:position pos:line="113" pos:column="17"/></name></decl>;<pos:position pos:line="113" pos:column="18"/></decl_stmt>

	<comment type="block" pos:line="115" pos:column="9">/* various operating modes and command line options */</comment>
	<decl_stmt><decl><type><name pos:line="116" pos:column="9">int<pos:position pos:line="116" pos:column="12"/></name></type> <name pos:line="116" pos:column="13">interactive<pos:position pos:line="116" pos:column="24"/></name></decl>;<pos:position pos:line="116" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="117" pos:column="9">int<pos:position pos:line="117" pos:column="12"/></name></type> <name pos:line="117" pos:column="13">threeway<pos:position pos:line="117" pos:column="21"/></name></decl>;<pos:position pos:line="117" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="118" pos:column="9">int<pos:position pos:line="118" pos:column="12"/></name></type> <name pos:line="118" pos:column="13">quiet<pos:position pos:line="118" pos:column="18"/></name></decl>;<pos:position pos:line="118" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="119" pos:column="9">int<pos:position pos:line="119" pos:column="12"/></name></type> <name pos:line="119" pos:column="13">signoff<pos:position pos:line="119" pos:column="20"/></name></decl>;<pos:position pos:line="119" pos:column="21"/></decl_stmt> <comment type="block" pos:line="119" pos:column="22">/* enum signoff_type */</comment>
	<decl_stmt><decl><type><name pos:line="120" pos:column="9">int<pos:position pos:line="120" pos:column="12"/></name></type> <name pos:line="120" pos:column="13">utf8<pos:position pos:line="120" pos:column="17"/></name></decl>;<pos:position pos:line="120" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="121" pos:column="9">int<pos:position pos:line="121" pos:column="12"/></name></type> <name pos:line="121" pos:column="13">keep<pos:position pos:line="121" pos:column="17"/></name></decl>;<pos:position pos:line="121" pos:column="18"/></decl_stmt> <comment type="block" pos:line="121" pos:column="19">/* enum keep_type */</comment>
	<decl_stmt><decl><type><name pos:line="122" pos:column="9">int<pos:position pos:line="122" pos:column="12"/></name></type> <name pos:line="122" pos:column="13">message_id<pos:position pos:line="122" pos:column="23"/></name></decl>;<pos:position pos:line="122" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="123" pos:column="9">int<pos:position pos:line="123" pos:column="12"/></name></type> <name pos:line="123" pos:column="13">scissors<pos:position pos:line="123" pos:column="21"/></name></decl>;<pos:position pos:line="123" pos:column="22"/></decl_stmt> <comment type="block" pos:line="123" pos:column="23">/* enum scissors_type */</comment>
	<decl_stmt><decl><type><name><name pos:line="124" pos:column="9">struct<pos:position pos:line="124" pos:column="15"/></name> <name pos:line="124" pos:column="16">argv_array<pos:position pos:line="124" pos:column="26"/></name></name></type> <name pos:line="124" pos:column="27">git_apply_opts<pos:position pos:line="124" pos:column="41"/></name></decl>;<pos:position pos:line="124" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="125" pos:column="9">const<pos:position pos:line="125" pos:column="14"/></specifier> <name pos:line="125" pos:column="15">char<pos:position pos:line="125" pos:column="19"/></name> <modifier pos:line="125" pos:column="20">*<pos:position pos:line="125" pos:column="21"/></modifier></type><name pos:line="125" pos:column="21">resolvemsg<pos:position pos:line="125" pos:column="31"/></name></decl>;<pos:position pos:line="125" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="126" pos:column="9">int<pos:position pos:line="126" pos:column="12"/></name></type> <name pos:line="126" pos:column="13">committer_date_is_author_date<pos:position pos:line="126" pos:column="42"/></name></decl>;<pos:position pos:line="126" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="127" pos:column="9">int<pos:position pos:line="127" pos:column="12"/></name></type> <name pos:line="127" pos:column="13">ignore_date<pos:position pos:line="127" pos:column="24"/></name></decl>;<pos:position pos:line="127" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="128" pos:column="9">int<pos:position pos:line="128" pos:column="12"/></name></type> <name pos:line="128" pos:column="13">allow_rerere_autoupdate<pos:position pos:line="128" pos:column="36"/></name></decl>;<pos:position pos:line="128" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="129" pos:column="9">const<pos:position pos:line="129" pos:column="14"/></specifier> <name pos:line="129" pos:column="15">char<pos:position pos:line="129" pos:column="19"/></name> <modifier pos:line="129" pos:column="20">*<pos:position pos:line="129" pos:column="21"/></modifier></type><name pos:line="129" pos:column="21">sign_commit<pos:position pos:line="129" pos:column="32"/></name></decl>;<pos:position pos:line="129" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="130" pos:column="9">int<pos:position pos:line="130" pos:column="12"/></name></type> <name pos:line="130" pos:column="13">rebasing<pos:position pos:line="130" pos:column="21"/></name></decl>;<pos:position pos:line="130" pos:column="22"/></decl_stmt>
}<pos:position pos:line="131" pos:column="2"/></block>;<pos:position pos:line="131" pos:column="3"/></struct>

<comment type="block" pos:line="133" pos:column="1">/**
 * Initializes am_state with the default values. The state directory is set to
 * dir.
 */</comment>
<function><specifier pos:line="137" pos:column="1">static<pos:position pos:line="137" pos:column="7"/></specifier> <type><name pos:line="137" pos:column="8">void<pos:position pos:line="137" pos:column="12"/></name></type> <name pos:line="137" pos:column="13">am_state_init<pos:position pos:line="137" pos:column="26"/></name><parameter_list pos:line="137" pos:column="26">(<parameter><decl><type><name><name pos:line="137" pos:column="27">struct<pos:position pos:line="137" pos:column="33"/></name> <name pos:line="137" pos:column="34">am_state<pos:position pos:line="137" pos:column="42"/></name></name> <modifier pos:line="137" pos:column="43">*<pos:position pos:line="137" pos:column="44"/></modifier></type><name pos:line="137" pos:column="44">state<pos:position pos:line="137" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="137" pos:column="51">const<pos:position pos:line="137" pos:column="56"/></specifier> <name pos:line="137" pos:column="57">char<pos:position pos:line="137" pos:column="61"/></name> <modifier pos:line="137" pos:column="62">*<pos:position pos:line="137" pos:column="63"/></modifier></type><name pos:line="137" pos:column="63">dir<pos:position pos:line="137" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="137" pos:column="67"/></parameter_list>
<block pos:line="138" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="139" pos:column="9">int<pos:position pos:line="139" pos:column="12"/></name></type> <name pos:line="139" pos:column="13">gpgsign<pos:position pos:line="139" pos:column="20"/></name></decl>;<pos:position pos:line="139" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="141" pos:column="9">memset<pos:position pos:line="141" pos:column="15"/></name><argument_list pos:line="141" pos:column="15">(<argument><expr><name pos:line="141" pos:column="16">state<pos:position pos:line="141" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="141" pos:column="23">0<pos:position pos:line="141" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="141" pos:column="26">sizeof<argument_list pos:line="141" pos:column="32">(<argument><expr><operator pos:line="141" pos:column="33">*<pos:position pos:line="141" pos:column="34"/></operator><name pos:line="141" pos:column="34">state<pos:position pos:line="141" pos:column="39"/></name></expr></argument>)<pos:position pos:line="141" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="141" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="42"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="143" pos:column="9">assert<pos:position pos:line="143" pos:column="15"/></name><argument_list pos:line="143" pos:column="15">(<argument><expr><name pos:line="143" pos:column="16">dir<pos:position pos:line="143" pos:column="19"/></name></expr></argument>)<pos:position pos:line="143" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="144" pos:column="9">state<pos:position pos:line="144" pos:column="14"/></name><operator pos:line="144" pos:column="14">-&gt;<pos:position pos:line="144" pos:column="19"/></operator><name pos:line="144" pos:column="16">dir<pos:position pos:line="144" pos:column="19"/></name></name> <operator pos:line="144" pos:column="20">=<pos:position pos:line="144" pos:column="21"/></operator> <call><name pos:line="144" pos:column="22">xstrdup<pos:position pos:line="144" pos:column="29"/></name><argument_list pos:line="144" pos:column="29">(<argument><expr><name pos:line="144" pos:column="30">dir<pos:position pos:line="144" pos:column="33"/></name></expr></argument>)<pos:position pos:line="144" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="146" pos:column="9">state<pos:position pos:line="146" pos:column="14"/></name><operator pos:line="146" pos:column="14">-&gt;<pos:position pos:line="146" pos:column="19"/></operator><name pos:line="146" pos:column="16">prec<pos:position pos:line="146" pos:column="20"/></name></name> <operator pos:line="146" pos:column="21">=<pos:position pos:line="146" pos:column="22"/></operator> <literal type="number" pos:line="146" pos:column="23">4<pos:position pos:line="146" pos:column="24"/></literal></expr>;<pos:position pos:line="146" pos:column="25"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="148" pos:column="9">git_config_get_bool<pos:position pos:line="148" pos:column="28"/></name><argument_list pos:line="148" pos:column="28">(<argument><expr><literal type="string" pos:line="148" pos:column="29">"am.threeway"<pos:position pos:line="148" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="148" pos:column="44">&amp;<pos:position pos:line="148" pos:column="49"/></operator><name><name pos:line="148" pos:column="45">state<pos:position pos:line="148" pos:column="50"/></name><operator pos:line="148" pos:column="50">-&gt;<pos:position pos:line="148" pos:column="55"/></operator><name pos:line="148" pos:column="52">threeway<pos:position pos:line="148" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="148" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="62"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="150" pos:column="9">state<pos:position pos:line="150" pos:column="14"/></name><operator pos:line="150" pos:column="14">-&gt;<pos:position pos:line="150" pos:column="19"/></operator><name pos:line="150" pos:column="16">utf8<pos:position pos:line="150" pos:column="20"/></name></name> <operator pos:line="150" pos:column="21">=<pos:position pos:line="150" pos:column="22"/></operator> <literal type="number" pos:line="150" pos:column="23">1<pos:position pos:line="150" pos:column="24"/></literal></expr>;<pos:position pos:line="150" pos:column="25"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="152" pos:column="9">git_config_get_bool<pos:position pos:line="152" pos:column="28"/></name><argument_list pos:line="152" pos:column="28">(<argument><expr><literal type="string" pos:line="152" pos:column="29">"am.messageid"<pos:position pos:line="152" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="152" pos:column="45">&amp;<pos:position pos:line="152" pos:column="50"/></operator><name><name pos:line="152" pos:column="46">state<pos:position pos:line="152" pos:column="51"/></name><operator pos:line="152" pos:column="51">-&gt;<pos:position pos:line="152" pos:column="56"/></operator><name pos:line="152" pos:column="53">message_id<pos:position pos:line="152" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="152" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="65"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="154" pos:column="9">state<pos:position pos:line="154" pos:column="14"/></name><operator pos:line="154" pos:column="14">-&gt;<pos:position pos:line="154" pos:column="19"/></operator><name pos:line="154" pos:column="16">scissors<pos:position pos:line="154" pos:column="24"/></name></name> <operator pos:line="154" pos:column="25">=<pos:position pos:line="154" pos:column="26"/></operator> <name pos:line="154" pos:column="27">SCISSORS_UNSET<pos:position pos:line="154" pos:column="41"/></name></expr>;<pos:position pos:line="154" pos:column="42"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="156" pos:column="9">argv_array_init<pos:position pos:line="156" pos:column="24"/></name><argument_list pos:line="156" pos:column="24">(<argument><expr><operator pos:line="156" pos:column="25">&amp;<pos:position pos:line="156" pos:column="30"/></operator><name><name pos:line="156" pos:column="26">state<pos:position pos:line="156" pos:column="31"/></name><operator pos:line="156" pos:column="31">-&gt;<pos:position pos:line="156" pos:column="36"/></operator><name pos:line="156" pos:column="33">git_apply_opts<pos:position pos:line="156" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="156" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="49"/></expr_stmt>

	<if pos:line="158" pos:column="9">if <condition pos:line="158" pos:column="12">(<expr><operator pos:line="158" pos:column="13">!<pos:position pos:line="158" pos:column="14"/></operator><call><name pos:line="158" pos:column="14">git_config_get_bool<pos:position pos:line="158" pos:column="33"/></name><argument_list pos:line="158" pos:column="33">(<argument><expr><literal type="string" pos:line="158" pos:column="34">"commit.gpgsign"<pos:position pos:line="158" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="158" pos:column="52">&amp;<pos:position pos:line="158" pos:column="57"/></operator><name pos:line="158" pos:column="53">gpgsign<pos:position pos:line="158" pos:column="60"/></name></expr></argument>)<pos:position pos:line="158" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="158" pos:column="62"/></condition><then pos:line="158" pos:column="62">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="159" pos:column="17">state<pos:position pos:line="159" pos:column="22"/></name><operator pos:line="159" pos:column="22">-&gt;<pos:position pos:line="159" pos:column="27"/></operator><name pos:line="159" pos:column="24">sign_commit<pos:position pos:line="159" pos:column="35"/></name></name> <operator pos:line="159" pos:column="36">=<pos:position pos:line="159" pos:column="37"/></operator> <ternary><condition><expr><name pos:line="159" pos:column="38">gpgsign<pos:position pos:line="159" pos:column="45"/></name></expr> ?<pos:position pos:line="159" pos:column="47"/></condition><then pos:line="159" pos:column="47"> <expr><literal type="string" pos:line="159" pos:column="48">""<pos:position pos:line="159" pos:column="50"/></literal></expr> <pos:position pos:line="159" pos:column="51"/></then><else pos:line="159" pos:column="51">: <expr><name pos:line="159" pos:column="53">NULL<pos:position pos:line="159" pos:column="57"/></name></expr></else></ternary></expr>;<pos:position pos:line="159" pos:column="58"/></expr_stmt></block></then></if>
}<pos:position pos:line="160" pos:column="2"/></block></function>

<comment type="block" pos:line="162" pos:column="1">/**
 * Releases memory allocated by an am_state.
 */</comment>
<function><specifier pos:line="165" pos:column="1">static<pos:position pos:line="165" pos:column="7"/></specifier> <type><name pos:line="165" pos:column="8">void<pos:position pos:line="165" pos:column="12"/></name></type> <name pos:line="165" pos:column="13">am_state_release<pos:position pos:line="165" pos:column="29"/></name><parameter_list pos:line="165" pos:column="29">(<parameter><decl><type><name><name pos:line="165" pos:column="30">struct<pos:position pos:line="165" pos:column="36"/></name> <name pos:line="165" pos:column="37">am_state<pos:position pos:line="165" pos:column="45"/></name></name> <modifier pos:line="165" pos:column="46">*<pos:position pos:line="165" pos:column="47"/></modifier></type><name pos:line="165" pos:column="47">state<pos:position pos:line="165" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="165" pos:column="53"/></parameter_list>
<block pos:line="166" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="167" pos:column="9">free<pos:position pos:line="167" pos:column="13"/></name><argument_list pos:line="167" pos:column="13">(<argument><expr><name><name pos:line="167" pos:column="14">state<pos:position pos:line="167" pos:column="19"/></name><operator pos:line="167" pos:column="19">-&gt;<pos:position pos:line="167" pos:column="24"/></operator><name pos:line="167" pos:column="21">dir<pos:position pos:line="167" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="167" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="168" pos:column="9">free<pos:position pos:line="168" pos:column="13"/></name><argument_list pos:line="168" pos:column="13">(<argument><expr><name><name pos:line="168" pos:column="14">state<pos:position pos:line="168" pos:column="19"/></name><operator pos:line="168" pos:column="19">-&gt;<pos:position pos:line="168" pos:column="24"/></operator><name pos:line="168" pos:column="21">author_name<pos:position pos:line="168" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="168" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="169" pos:column="9">free<pos:position pos:line="169" pos:column="13"/></name><argument_list pos:line="169" pos:column="13">(<argument><expr><name><name pos:line="169" pos:column="14">state<pos:position pos:line="169" pos:column="19"/></name><operator pos:line="169" pos:column="19">-&gt;<pos:position pos:line="169" pos:column="24"/></operator><name pos:line="169" pos:column="21">author_email<pos:position pos:line="169" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="169" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="170" pos:column="9">free<pos:position pos:line="170" pos:column="13"/></name><argument_list pos:line="170" pos:column="13">(<argument><expr><name><name pos:line="170" pos:column="14">state<pos:position pos:line="170" pos:column="19"/></name><operator pos:line="170" pos:column="19">-&gt;<pos:position pos:line="170" pos:column="24"/></operator><name pos:line="170" pos:column="21">author_date<pos:position pos:line="170" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="170" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="171" pos:column="9">free<pos:position pos:line="171" pos:column="13"/></name><argument_list pos:line="171" pos:column="13">(<argument><expr><name><name pos:line="171" pos:column="14">state<pos:position pos:line="171" pos:column="19"/></name><operator pos:line="171" pos:column="19">-&gt;<pos:position pos:line="171" pos:column="24"/></operator><name pos:line="171" pos:column="21">msg<pos:position pos:line="171" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="171" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="172" pos:column="9">argv_array_clear<pos:position pos:line="172" pos:column="25"/></name><argument_list pos:line="172" pos:column="25">(<argument><expr><operator pos:line="172" pos:column="26">&amp;<pos:position pos:line="172" pos:column="31"/></operator><name><name pos:line="172" pos:column="27">state<pos:position pos:line="172" pos:column="32"/></name><operator pos:line="172" pos:column="32">-&gt;<pos:position pos:line="172" pos:column="37"/></operator><name pos:line="172" pos:column="34">git_apply_opts<pos:position pos:line="172" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="172" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="50"/></expr_stmt>
}<pos:position pos:line="173" pos:column="2"/></block></function>

<comment type="block" pos:line="175" pos:column="1">/**
 * Returns path relative to the am_state directory.
 */</comment>
<function><specifier pos:line="178" pos:column="1">static<pos:position pos:line="178" pos:column="7"/></specifier> <specifier pos:line="178" pos:column="8">inline<pos:position pos:line="178" pos:column="14"/></specifier> <type><specifier pos:line="178" pos:column="15">const<pos:position pos:line="178" pos:column="20"/></specifier> <name pos:line="178" pos:column="21">char<pos:position pos:line="178" pos:column="25"/></name> <modifier pos:line="178" pos:column="26">*<pos:position pos:line="178" pos:column="27"/></modifier></type><name pos:line="178" pos:column="27">am_path<pos:position pos:line="178" pos:column="34"/></name><parameter_list pos:line="178" pos:column="34">(<parameter><decl><type><specifier pos:line="178" pos:column="35">const<pos:position pos:line="178" pos:column="40"/></specifier> <name><name pos:line="178" pos:column="41">struct<pos:position pos:line="178" pos:column="47"/></name> <name pos:line="178" pos:column="48">am_state<pos:position pos:line="178" pos:column="56"/></name></name> <modifier pos:line="178" pos:column="57">*<pos:position pos:line="178" pos:column="58"/></modifier></type><name pos:line="178" pos:column="58">state<pos:position pos:line="178" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="178" pos:column="65">const<pos:position pos:line="178" pos:column="70"/></specifier> <name pos:line="178" pos:column="71">char<pos:position pos:line="178" pos:column="75"/></name> <modifier pos:line="178" pos:column="76">*<pos:position pos:line="178" pos:column="77"/></modifier></type><name pos:line="178" pos:column="77">path<pos:position pos:line="178" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="178" pos:column="82"/></parameter_list>
<block pos:line="179" pos:column="1">{
	<return pos:line="180" pos:column="9">return <expr><call><name pos:line="180" pos:column="16">mkpath<pos:position pos:line="180" pos:column="22"/></name><argument_list pos:line="180" pos:column="22">(<argument><expr><literal type="string" pos:line="180" pos:column="23">"%s/%s"<pos:position pos:line="180" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="180" pos:column="32">state<pos:position pos:line="180" pos:column="37"/></name><operator pos:line="180" pos:column="37">-&gt;<pos:position pos:line="180" pos:column="42"/></operator><name pos:line="180" pos:column="39">dir<pos:position pos:line="180" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="44">path<pos:position pos:line="180" pos:column="48"/></name></expr></argument>)<pos:position pos:line="180" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="50"/></return>
}<pos:position pos:line="181" pos:column="2"/></block></function>

<comment type="block" pos:line="183" pos:column="1">/**
 * For convenience to call write_file()
 */</comment>
<function><specifier pos:line="186" pos:column="1">static<pos:position pos:line="186" pos:column="7"/></specifier> <type><name pos:line="186" pos:column="8">int<pos:position pos:line="186" pos:column="11"/></name></type> <name pos:line="186" pos:column="12">write_state_text<pos:position pos:line="186" pos:column="28"/></name><parameter_list pos:line="186" pos:column="28">(<parameter><decl><type><specifier pos:line="186" pos:column="29">const<pos:position pos:line="186" pos:column="34"/></specifier> <name><name pos:line="186" pos:column="35">struct<pos:position pos:line="186" pos:column="41"/></name> <name pos:line="186" pos:column="42">am_state<pos:position pos:line="186" pos:column="50"/></name></name> <modifier pos:line="186" pos:column="51">*<pos:position pos:line="186" pos:column="52"/></modifier></type><name pos:line="186" pos:column="52">state<pos:position pos:line="186" pos:column="57"/></name></decl></parameter>,
			    <parameter><decl><type><specifier pos:line="187" pos:column="29">const<pos:position pos:line="187" pos:column="34"/></specifier> <name pos:line="187" pos:column="35">char<pos:position pos:line="187" pos:column="39"/></name> <modifier pos:line="187" pos:column="40">*<pos:position pos:line="187" pos:column="41"/></modifier></type><name pos:line="187" pos:column="41">name<pos:position pos:line="187" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="187" pos:column="47">const<pos:position pos:line="187" pos:column="52"/></specifier> <name pos:line="187" pos:column="53">char<pos:position pos:line="187" pos:column="57"/></name> <modifier pos:line="187" pos:column="58">*<pos:position pos:line="187" pos:column="59"/></modifier></type><name pos:line="187" pos:column="59">string<pos:position pos:line="187" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="187" pos:column="66"/></parameter_list>
<block pos:line="188" pos:column="1">{
	<return pos:line="189" pos:column="9">return <expr><call><name pos:line="189" pos:column="16">write_file<pos:position pos:line="189" pos:column="26"/></name><argument_list pos:line="189" pos:column="26">(<argument><expr><call><name pos:line="189" pos:column="27">am_path<pos:position pos:line="189" pos:column="34"/></name><argument_list pos:line="189" pos:column="34">(<argument><expr><name pos:line="189" pos:column="35">state<pos:position pos:line="189" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="189" pos:column="42">name<pos:position pos:line="189" pos:column="46"/></name></expr></argument>)<pos:position pos:line="189" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="189" pos:column="49">"%s"<pos:position pos:line="189" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="189" pos:column="55">string<pos:position pos:line="189" pos:column="61"/></name></expr></argument>)<pos:position pos:line="189" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="63"/></return>
}<pos:position pos:line="190" pos:column="2"/></block></function>

<function><specifier pos:line="192" pos:column="1">static<pos:position pos:line="192" pos:column="7"/></specifier> <type><name pos:line="192" pos:column="8">int<pos:position pos:line="192" pos:column="11"/></name></type> <name pos:line="192" pos:column="12">write_state_count<pos:position pos:line="192" pos:column="29"/></name><parameter_list pos:line="192" pos:column="29">(<parameter><decl><type><specifier pos:line="192" pos:column="30">const<pos:position pos:line="192" pos:column="35"/></specifier> <name><name pos:line="192" pos:column="36">struct<pos:position pos:line="192" pos:column="42"/></name> <name pos:line="192" pos:column="43">am_state<pos:position pos:line="192" pos:column="51"/></name></name> <modifier pos:line="192" pos:column="52">*<pos:position pos:line="192" pos:column="53"/></modifier></type><name pos:line="192" pos:column="53">state<pos:position pos:line="192" pos:column="58"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="193" pos:column="30">const<pos:position pos:line="193" pos:column="35"/></specifier> <name pos:line="193" pos:column="36">char<pos:position pos:line="193" pos:column="40"/></name> <modifier pos:line="193" pos:column="41">*<pos:position pos:line="193" pos:column="42"/></modifier></type><name pos:line="193" pos:column="42">name<pos:position pos:line="193" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="193" pos:column="48">int<pos:position pos:line="193" pos:column="51"/></name></type> <name pos:line="193" pos:column="52">value<pos:position pos:line="193" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="193" pos:column="58"/></parameter_list>
<block pos:line="194" pos:column="1">{
	<return pos:line="195" pos:column="9">return <expr><call><name pos:line="195" pos:column="16">write_file<pos:position pos:line="195" pos:column="26"/></name><argument_list pos:line="195" pos:column="26">(<argument><expr><call><name pos:line="195" pos:column="27">am_path<pos:position pos:line="195" pos:column="34"/></name><argument_list pos:line="195" pos:column="34">(<argument><expr><name pos:line="195" pos:column="35">state<pos:position pos:line="195" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="42">name<pos:position pos:line="195" pos:column="46"/></name></expr></argument>)<pos:position pos:line="195" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="195" pos:column="49">"%d"<pos:position pos:line="195" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="195" pos:column="55">value<pos:position pos:line="195" pos:column="60"/></name></expr></argument>)<pos:position pos:line="195" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="62"/></return>
}<pos:position pos:line="196" pos:column="2"/></block></function>

<function><specifier pos:line="198" pos:column="1">static<pos:position pos:line="198" pos:column="7"/></specifier> <type><name pos:line="198" pos:column="8">int<pos:position pos:line="198" pos:column="11"/></name></type> <name pos:line="198" pos:column="12">write_state_bool<pos:position pos:line="198" pos:column="28"/></name><parameter_list pos:line="198" pos:column="28">(<parameter><decl><type><specifier pos:line="198" pos:column="29">const<pos:position pos:line="198" pos:column="34"/></specifier> <name><name pos:line="198" pos:column="35">struct<pos:position pos:line="198" pos:column="41"/></name> <name pos:line="198" pos:column="42">am_state<pos:position pos:line="198" pos:column="50"/></name></name> <modifier pos:line="198" pos:column="51">*<pos:position pos:line="198" pos:column="52"/></modifier></type><name pos:line="198" pos:column="52">state<pos:position pos:line="198" pos:column="57"/></name></decl></parameter>,
			    <parameter><decl><type><specifier pos:line="199" pos:column="29">const<pos:position pos:line="199" pos:column="34"/></specifier> <name pos:line="199" pos:column="35">char<pos:position pos:line="199" pos:column="39"/></name> <modifier pos:line="199" pos:column="40">*<pos:position pos:line="199" pos:column="41"/></modifier></type><name pos:line="199" pos:column="41">name<pos:position pos:line="199" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="199" pos:column="47">int<pos:position pos:line="199" pos:column="50"/></name></type> <name pos:line="199" pos:column="51">value<pos:position pos:line="199" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="199" pos:column="57"/></parameter_list>
<block pos:line="200" pos:column="1">{
	<return pos:line="201" pos:column="9">return <expr><call><name pos:line="201" pos:column="16">write_state_text<pos:position pos:line="201" pos:column="32"/></name><argument_list pos:line="201" pos:column="32">(<argument><expr><name pos:line="201" pos:column="33">state<pos:position pos:line="201" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="201" pos:column="40">name<pos:position pos:line="201" pos:column="44"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="201" pos:column="46">value<pos:position pos:line="201" pos:column="51"/></name></expr> ?<pos:position pos:line="201" pos:column="53"/></condition><then pos:line="201" pos:column="53"> <expr><literal type="string" pos:line="201" pos:column="54">"t"<pos:position pos:line="201" pos:column="57"/></literal></expr> <pos:position pos:line="201" pos:column="58"/></then><else pos:line="201" pos:column="58">: <expr><literal type="string" pos:line="201" pos:column="60">"f"<pos:position pos:line="201" pos:column="63"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="201" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="65"/></return>
}<pos:position pos:line="202" pos:column="2"/></block></function>

<comment type="block" pos:line="204" pos:column="1">/**
 * If state-&gt;quiet is false, calls fprintf(fp, fmt, ...), and appends a newline
 * at the end.
 */</comment>
<function><specifier pos:line="208" pos:column="1">static<pos:position pos:line="208" pos:column="7"/></specifier> <type><name pos:line="208" pos:column="8">void<pos:position pos:line="208" pos:column="12"/></name></type> <name pos:line="208" pos:column="13">say<pos:position pos:line="208" pos:column="16"/></name><parameter_list pos:line="208" pos:column="16">(<parameter><decl><type><specifier pos:line="208" pos:column="17">const<pos:position pos:line="208" pos:column="22"/></specifier> <name><name pos:line="208" pos:column="23">struct<pos:position pos:line="208" pos:column="29"/></name> <name pos:line="208" pos:column="30">am_state<pos:position pos:line="208" pos:column="38"/></name></name> <modifier pos:line="208" pos:column="39">*<pos:position pos:line="208" pos:column="40"/></modifier></type><name pos:line="208" pos:column="40">state<pos:position pos:line="208" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="208" pos:column="47">FILE<pos:position pos:line="208" pos:column="51"/></name> <modifier pos:line="208" pos:column="52">*<pos:position pos:line="208" pos:column="53"/></modifier></type><name pos:line="208" pos:column="53">fp<pos:position pos:line="208" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="208" pos:column="57">const<pos:position pos:line="208" pos:column="62"/></specifier> <name pos:line="208" pos:column="63">char<pos:position pos:line="208" pos:column="67"/></name> <modifier pos:line="208" pos:column="68">*<pos:position pos:line="208" pos:column="69"/></modifier></type><name pos:line="208" pos:column="69">fmt<pos:position pos:line="208" pos:column="72"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="208" pos:column="74">...<pos:position pos:line="208" pos:column="77"/></modifier></type></decl></parameter>)<pos:position pos:line="208" pos:column="78"/></parameter_list>
<block pos:line="209" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="210" pos:column="9">va_list<pos:position pos:line="210" pos:column="16"/></name></type> <name pos:line="210" pos:column="17">ap<pos:position pos:line="210" pos:column="19"/></name></decl>;<pos:position pos:line="210" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="212" pos:column="9">va_start<pos:position pos:line="212" pos:column="17"/></name><argument_list pos:line="212" pos:column="17">(<argument><expr><name pos:line="212" pos:column="18">ap<pos:position pos:line="212" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="22">fmt<pos:position pos:line="212" pos:column="25"/></name></expr></argument>)<pos:position pos:line="212" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="27"/></expr_stmt>
	<if pos:line="213" pos:column="9">if <condition pos:line="213" pos:column="12">(<expr><operator pos:line="213" pos:column="13">!<pos:position pos:line="213" pos:column="14"/></operator><name><name pos:line="213" pos:column="14">state<pos:position pos:line="213" pos:column="19"/></name><operator pos:line="213" pos:column="19">-&gt;<pos:position pos:line="213" pos:column="24"/></operator><name pos:line="213" pos:column="21">quiet<pos:position pos:line="213" pos:column="26"/></name></name></expr>)<pos:position pos:line="213" pos:column="27"/></condition><then pos:line="213" pos:column="27"> <block pos:line="213" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="214" pos:column="17">vfprintf<pos:position pos:line="214" pos:column="25"/></name><argument_list pos:line="214" pos:column="25">(<argument><expr><name pos:line="214" pos:column="26">fp<pos:position pos:line="214" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="214" pos:column="30">fmt<pos:position pos:line="214" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="214" pos:column="35">ap<pos:position pos:line="214" pos:column="37"/></name></expr></argument>)<pos:position pos:line="214" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="215" pos:column="17">putc<pos:position pos:line="215" pos:column="21"/></name><argument_list pos:line="215" pos:column="21">(<argument><expr><literal type="char" pos:line="215" pos:column="22">'\n'<pos:position pos:line="215" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="215" pos:column="28">fp<pos:position pos:line="215" pos:column="30"/></name></expr></argument>)<pos:position pos:line="215" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="216" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="217" pos:column="9">va_end<pos:position pos:line="217" pos:column="15"/></name><argument_list pos:line="217" pos:column="15">(<argument><expr><name pos:line="217" pos:column="16">ap<pos:position pos:line="217" pos:column="18"/></name></expr></argument>)<pos:position pos:line="217" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="20"/></expr_stmt>
}<pos:position pos:line="218" pos:column="2"/></block></function>

<comment type="block" pos:line="220" pos:column="1">/**
 * Returns 1 if there is an am session in progress, 0 otherwise.
 */</comment>
<function><specifier pos:line="223" pos:column="1">static<pos:position pos:line="223" pos:column="7"/></specifier> <type><name pos:line="223" pos:column="8">int<pos:position pos:line="223" pos:column="11"/></name></type> <name pos:line="223" pos:column="12">am_in_progress<pos:position pos:line="223" pos:column="26"/></name><parameter_list pos:line="223" pos:column="26">(<parameter><decl><type><specifier pos:line="223" pos:column="27">const<pos:position pos:line="223" pos:column="32"/></specifier> <name><name pos:line="223" pos:column="33">struct<pos:position pos:line="223" pos:column="39"/></name> <name pos:line="223" pos:column="40">am_state<pos:position pos:line="223" pos:column="48"/></name></name> <modifier pos:line="223" pos:column="49">*<pos:position pos:line="223" pos:column="50"/></modifier></type><name pos:line="223" pos:column="50">state<pos:position pos:line="223" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="223" pos:column="56"/></parameter_list>
<block pos:line="224" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="225" pos:column="9">struct<pos:position pos:line="225" pos:column="15"/></name> <name pos:line="225" pos:column="16">stat<pos:position pos:line="225" pos:column="20"/></name></name></type> <name pos:line="225" pos:column="21">st<pos:position pos:line="225" pos:column="23"/></name></decl>;<pos:position pos:line="225" pos:column="24"/></decl_stmt>

	<if pos:line="227" pos:column="9">if <condition pos:line="227" pos:column="12">(<expr><call><name pos:line="227" pos:column="13">lstat<pos:position pos:line="227" pos:column="18"/></name><argument_list pos:line="227" pos:column="18">(<argument><expr><name><name pos:line="227" pos:column="19">state<pos:position pos:line="227" pos:column="24"/></name><operator pos:line="227" pos:column="24">-&gt;<pos:position pos:line="227" pos:column="29"/></operator><name pos:line="227" pos:column="26">dir<pos:position pos:line="227" pos:column="29"/></name></name></expr></argument>, <argument><expr><operator pos:line="227" pos:column="31">&amp;<pos:position pos:line="227" pos:column="36"/></operator><name pos:line="227" pos:column="32">st<pos:position pos:line="227" pos:column="34"/></name></expr></argument>)<pos:position pos:line="227" pos:column="35"/></argument_list></call> <operator pos:line="227" pos:column="36">&lt;<pos:position pos:line="227" pos:column="40"/></operator> <literal type="number" pos:line="227" pos:column="38">0<pos:position pos:line="227" pos:column="39"/></literal> <operator pos:line="227" pos:column="40">||<pos:position pos:line="227" pos:column="42"/></operator> <operator pos:line="227" pos:column="43">!<pos:position pos:line="227" pos:column="44"/></operator><call><name pos:line="227" pos:column="44">S_ISDIR<pos:position pos:line="227" pos:column="51"/></name><argument_list pos:line="227" pos:column="51">(<argument><expr><name><name pos:line="227" pos:column="52">st<pos:position pos:line="227" pos:column="54"/></name><operator pos:line="227" pos:column="54">.<pos:position pos:line="227" pos:column="55"/></operator><name pos:line="227" pos:column="55">st_mode<pos:position pos:line="227" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="227" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="227" pos:column="64"/></condition><then pos:line="227" pos:column="64">
		<block type="pseudo"><return pos:line="228" pos:column="17">return <expr><literal type="number" pos:line="228" pos:column="24">0<pos:position pos:line="228" pos:column="25"/></literal></expr>;<pos:position pos:line="228" pos:column="26"/></return></block></then></if>
	<if pos:line="229" pos:column="9">if <condition pos:line="229" pos:column="12">(<expr><call><name pos:line="229" pos:column="13">lstat<pos:position pos:line="229" pos:column="18"/></name><argument_list pos:line="229" pos:column="18">(<argument><expr><call><name pos:line="229" pos:column="19">am_path<pos:position pos:line="229" pos:column="26"/></name><argument_list pos:line="229" pos:column="26">(<argument><expr><name pos:line="229" pos:column="27">state<pos:position pos:line="229" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="229" pos:column="34">"last"<pos:position pos:line="229" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="229" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="229" pos:column="43">&amp;<pos:position pos:line="229" pos:column="48"/></operator><name pos:line="229" pos:column="44">st<pos:position pos:line="229" pos:column="46"/></name></expr></argument>)<pos:position pos:line="229" pos:column="47"/></argument_list></call> <operator pos:line="229" pos:column="48">||<pos:position pos:line="229" pos:column="50"/></operator> <operator pos:line="229" pos:column="51">!<pos:position pos:line="229" pos:column="52"/></operator><call><name pos:line="229" pos:column="52">S_ISREG<pos:position pos:line="229" pos:column="59"/></name><argument_list pos:line="229" pos:column="59">(<argument><expr><name><name pos:line="229" pos:column="60">st<pos:position pos:line="229" pos:column="62"/></name><operator pos:line="229" pos:column="62">.<pos:position pos:line="229" pos:column="63"/></operator><name pos:line="229" pos:column="63">st_mode<pos:position pos:line="229" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="229" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="229" pos:column="72"/></condition><then pos:line="229" pos:column="72">
		<block type="pseudo"><return pos:line="230" pos:column="17">return <expr><literal type="number" pos:line="230" pos:column="24">0<pos:position pos:line="230" pos:column="25"/></literal></expr>;<pos:position pos:line="230" pos:column="26"/></return></block></then></if>
	<if pos:line="231" pos:column="9">if <condition pos:line="231" pos:column="12">(<expr><call><name pos:line="231" pos:column="13">lstat<pos:position pos:line="231" pos:column="18"/></name><argument_list pos:line="231" pos:column="18">(<argument><expr><call><name pos:line="231" pos:column="19">am_path<pos:position pos:line="231" pos:column="26"/></name><argument_list pos:line="231" pos:column="26">(<argument><expr><name pos:line="231" pos:column="27">state<pos:position pos:line="231" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="231" pos:column="34">"next"<pos:position pos:line="231" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="231" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="231" pos:column="43">&amp;<pos:position pos:line="231" pos:column="48"/></operator><name pos:line="231" pos:column="44">st<pos:position pos:line="231" pos:column="46"/></name></expr></argument>)<pos:position pos:line="231" pos:column="47"/></argument_list></call> <operator pos:line="231" pos:column="48">||<pos:position pos:line="231" pos:column="50"/></operator> <operator pos:line="231" pos:column="51">!<pos:position pos:line="231" pos:column="52"/></operator><call><name pos:line="231" pos:column="52">S_ISREG<pos:position pos:line="231" pos:column="59"/></name><argument_list pos:line="231" pos:column="59">(<argument><expr><name><name pos:line="231" pos:column="60">st<pos:position pos:line="231" pos:column="62"/></name><operator pos:line="231" pos:column="62">.<pos:position pos:line="231" pos:column="63"/></operator><name pos:line="231" pos:column="63">st_mode<pos:position pos:line="231" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="231" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="231" pos:column="72"/></condition><then pos:line="231" pos:column="72">
		<block type="pseudo"><return pos:line="232" pos:column="17">return <expr><literal type="number" pos:line="232" pos:column="24">0<pos:position pos:line="232" pos:column="25"/></literal></expr>;<pos:position pos:line="232" pos:column="26"/></return></block></then></if>
	<return pos:line="233" pos:column="9">return <expr><literal type="number" pos:line="233" pos:column="16">1<pos:position pos:line="233" pos:column="17"/></literal></expr>;<pos:position pos:line="233" pos:column="18"/></return>
}<pos:position pos:line="234" pos:column="2"/></block></function>

<comment type="block" pos:line="236" pos:column="1">/**
 * Reads the contents of `file` in the `state` directory into `sb`. Returns the
 * number of bytes read on success, -1 if the file does not exist. If `trim` is
 * set, trailing whitespace will be removed.
 */</comment>
<function><specifier pos:line="241" pos:column="1">static<pos:position pos:line="241" pos:column="7"/></specifier> <type><name pos:line="241" pos:column="8">int<pos:position pos:line="241" pos:column="11"/></name></type> <name pos:line="241" pos:column="12">read_state_file<pos:position pos:line="241" pos:column="27"/></name><parameter_list pos:line="241" pos:column="27">(<parameter><decl><type><name><name pos:line="241" pos:column="28">struct<pos:position pos:line="241" pos:column="34"/></name> <name pos:line="241" pos:column="35">strbuf<pos:position pos:line="241" pos:column="41"/></name></name> <modifier pos:line="241" pos:column="42">*<pos:position pos:line="241" pos:column="43"/></modifier></type><name pos:line="241" pos:column="43">sb<pos:position pos:line="241" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="241" pos:column="47">const<pos:position pos:line="241" pos:column="52"/></specifier> <name><name pos:line="241" pos:column="53">struct<pos:position pos:line="241" pos:column="59"/></name> <name pos:line="241" pos:column="60">am_state<pos:position pos:line="241" pos:column="68"/></name></name> <modifier pos:line="241" pos:column="69">*<pos:position pos:line="241" pos:column="70"/></modifier></type><name pos:line="241" pos:column="70">state<pos:position pos:line="241" pos:column="75"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="242" pos:column="25">const<pos:position pos:line="242" pos:column="30"/></specifier> <name pos:line="242" pos:column="31">char<pos:position pos:line="242" pos:column="35"/></name> <modifier pos:line="242" pos:column="36">*<pos:position pos:line="242" pos:column="37"/></modifier></type><name pos:line="242" pos:column="37">file<pos:position pos:line="242" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="242" pos:column="43">int<pos:position pos:line="242" pos:column="46"/></name></type> <name pos:line="242" pos:column="47">trim<pos:position pos:line="242" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="242" pos:column="52"/></parameter_list>
<block pos:line="243" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="244" pos:column="9">strbuf_reset<pos:position pos:line="244" pos:column="21"/></name><argument_list pos:line="244" pos:column="21">(<argument><expr><name pos:line="244" pos:column="22">sb<pos:position pos:line="244" pos:column="24"/></name></expr></argument>)<pos:position pos:line="244" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="244" pos:column="26"/></expr_stmt>

	<if pos:line="246" pos:column="9">if <condition pos:line="246" pos:column="12">(<expr><call><name pos:line="246" pos:column="13">strbuf_read_file<pos:position pos:line="246" pos:column="29"/></name><argument_list pos:line="246" pos:column="29">(<argument><expr><name pos:line="246" pos:column="30">sb<pos:position pos:line="246" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="246" pos:column="34">am_path<pos:position pos:line="246" pos:column="41"/></name><argument_list pos:line="246" pos:column="41">(<argument><expr><name pos:line="246" pos:column="42">state<pos:position pos:line="246" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="246" pos:column="49">file<pos:position pos:line="246" pos:column="53"/></name></expr></argument>)<pos:position pos:line="246" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="246" pos:column="56">0<pos:position pos:line="246" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="246" pos:column="58"/></argument_list></call> <operator pos:line="246" pos:column="59">&gt;=<pos:position pos:line="246" pos:column="64"/></operator> <literal type="number" pos:line="246" pos:column="62">0<pos:position pos:line="246" pos:column="63"/></literal></expr>)<pos:position pos:line="246" pos:column="64"/></condition><then pos:line="246" pos:column="64"> <block pos:line="246" pos:column="65">{
		<if pos:line="247" pos:column="17">if <condition pos:line="247" pos:column="20">(<expr><name pos:line="247" pos:column="21">trim<pos:position pos:line="247" pos:column="25"/></name></expr>)<pos:position pos:line="247" pos:column="26"/></condition><then pos:line="247" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="248" pos:column="25">strbuf_trim<pos:position pos:line="248" pos:column="36"/></name><argument_list pos:line="248" pos:column="36">(<argument><expr><name pos:line="248" pos:column="37">sb<pos:position pos:line="248" pos:column="39"/></name></expr></argument>)<pos:position pos:line="248" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="248" pos:column="41"/></expr_stmt></block></then></if>

		<return pos:line="250" pos:column="17">return <expr><name><name pos:line="250" pos:column="24">sb<pos:position pos:line="250" pos:column="26"/></name><operator pos:line="250" pos:column="26">-&gt;<pos:position pos:line="250" pos:column="31"/></operator><name pos:line="250" pos:column="28">len<pos:position pos:line="250" pos:column="31"/></name></name></expr>;<pos:position pos:line="250" pos:column="32"/></return>
	}<pos:position pos:line="251" pos:column="10"/></block></then></if>

	<if pos:line="253" pos:column="9">if <condition pos:line="253" pos:column="12">(<expr><name pos:line="253" pos:column="13">errno<pos:position pos:line="253" pos:column="18"/></name> <operator pos:line="253" pos:column="19">==<pos:position pos:line="253" pos:column="21"/></operator> <name pos:line="253" pos:column="22">ENOENT<pos:position pos:line="253" pos:column="28"/></name></expr>)<pos:position pos:line="253" pos:column="29"/></condition><then pos:line="253" pos:column="29">
		<block type="pseudo"><return pos:line="254" pos:column="17">return <expr><operator pos:line="254" pos:column="24">-<pos:position pos:line="254" pos:column="25"/></operator><literal type="number" pos:line="254" pos:column="25">1<pos:position pos:line="254" pos:column="26"/></literal></expr>;<pos:position pos:line="254" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="256" pos:column="9">die_errno<pos:position pos:line="256" pos:column="18"/></name><argument_list pos:line="256" pos:column="18">(<argument><expr><call><name pos:line="256" pos:column="19">_<pos:position pos:line="256" pos:column="20"/></name><argument_list pos:line="256" pos:column="20">(<argument><expr><literal type="string" pos:line="256" pos:column="21">"could not read '%s'"<pos:position pos:line="256" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="256" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="256" pos:column="45">am_path<pos:position pos:line="256" pos:column="52"/></name><argument_list pos:line="256" pos:column="52">(<argument><expr><name pos:line="256" pos:column="53">state<pos:position pos:line="256" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="256" pos:column="60">file<pos:position pos:line="256" pos:column="64"/></name></expr></argument>)<pos:position pos:line="256" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="256" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="256" pos:column="67"/></expr_stmt>
}<pos:position pos:line="257" pos:column="2"/></block></function>

<comment type="block" pos:line="259" pos:column="1">/**
 * Reads a KEY=VALUE shell variable assignment from `fp`, returning the VALUE
 * as a newly-allocated string. VALUE must be a quoted string, and the KEY must
 * match `key`. Returns NULL on failure.
 *
 * This is used by read_author_script() to read the GIT_AUTHOR_* variables from
 * the author-script.
 */</comment>
<function><specifier pos:line="267" pos:column="1">static<pos:position pos:line="267" pos:column="7"/></specifier> <type><name pos:line="267" pos:column="8">char<pos:position pos:line="267" pos:column="12"/></name> <modifier pos:line="267" pos:column="13">*<pos:position pos:line="267" pos:column="14"/></modifier></type><name pos:line="267" pos:column="14">read_shell_var<pos:position pos:line="267" pos:column="28"/></name><parameter_list pos:line="267" pos:column="28">(<parameter><decl><type><name pos:line="267" pos:column="29">FILE<pos:position pos:line="267" pos:column="33"/></name> <modifier pos:line="267" pos:column="34">*<pos:position pos:line="267" pos:column="35"/></modifier></type><name pos:line="267" pos:column="35">fp<pos:position pos:line="267" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="267" pos:column="39">const<pos:position pos:line="267" pos:column="44"/></specifier> <name pos:line="267" pos:column="45">char<pos:position pos:line="267" pos:column="49"/></name> <modifier pos:line="267" pos:column="50">*<pos:position pos:line="267" pos:column="51"/></modifier></type><name pos:line="267" pos:column="51">key<pos:position pos:line="267" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="267" pos:column="55"/></parameter_list>
<block pos:line="268" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="269" pos:column="9">struct<pos:position pos:line="269" pos:column="15"/></name> <name pos:line="269" pos:column="16">strbuf<pos:position pos:line="269" pos:column="22"/></name></name></type> <name pos:line="269" pos:column="23">sb<pos:position pos:line="269" pos:column="25"/></name> <init pos:line="269" pos:column="26">= <expr><name pos:line="269" pos:column="28">STRBUF_INIT<pos:position pos:line="269" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="269" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="270" pos:column="9">const<pos:position pos:line="270" pos:column="14"/></specifier> <name pos:line="270" pos:column="15">char<pos:position pos:line="270" pos:column="19"/></name> <modifier pos:line="270" pos:column="20">*<pos:position pos:line="270" pos:column="21"/></modifier></type><name pos:line="270" pos:column="21">str<pos:position pos:line="270" pos:column="24"/></name></decl>;<pos:position pos:line="270" pos:column="25"/></decl_stmt>

	<if pos:line="272" pos:column="9">if <condition pos:line="272" pos:column="12">(<expr><call><name pos:line="272" pos:column="13">strbuf_getline_lf<pos:position pos:line="272" pos:column="30"/></name><argument_list pos:line="272" pos:column="30">(<argument><expr><operator pos:line="272" pos:column="31">&amp;<pos:position pos:line="272" pos:column="36"/></operator><name pos:line="272" pos:column="32">sb<pos:position pos:line="272" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="272" pos:column="36">fp<pos:position pos:line="272" pos:column="38"/></name></expr></argument>)<pos:position pos:line="272" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="272" pos:column="40"/></condition><then pos:line="272" pos:column="40">
		<block type="pseudo"><goto pos:line="273" pos:column="17">goto <name pos:line="273" pos:column="22">fail<pos:position pos:line="273" pos:column="26"/></name>;<pos:position pos:line="273" pos:column="27"/></goto></block></then></if>

	<if pos:line="275" pos:column="9">if <condition pos:line="275" pos:column="12">(<expr><operator pos:line="275" pos:column="13">!<pos:position pos:line="275" pos:column="14"/></operator><call><name pos:line="275" pos:column="14">skip_prefix<pos:position pos:line="275" pos:column="25"/></name><argument_list pos:line="275" pos:column="25">(<argument><expr><name><name pos:line="275" pos:column="26">sb<pos:position pos:line="275" pos:column="28"/></name><operator pos:line="275" pos:column="28">.<pos:position pos:line="275" pos:column="29"/></operator><name pos:line="275" pos:column="29">buf<pos:position pos:line="275" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="275" pos:column="34">key<pos:position pos:line="275" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="275" pos:column="39">&amp;<pos:position pos:line="275" pos:column="44"/></operator><name pos:line="275" pos:column="40">str<pos:position pos:line="275" pos:column="43"/></name></expr></argument>)<pos:position pos:line="275" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="275" pos:column="45"/></condition><then pos:line="275" pos:column="45">
		<block type="pseudo"><goto pos:line="276" pos:column="17">goto <name pos:line="276" pos:column="22">fail<pos:position pos:line="276" pos:column="26"/></name>;<pos:position pos:line="276" pos:column="27"/></goto></block></then></if>

	<if pos:line="278" pos:column="9">if <condition pos:line="278" pos:column="12">(<expr><operator pos:line="278" pos:column="13">!<pos:position pos:line="278" pos:column="14"/></operator><call><name pos:line="278" pos:column="14">skip_prefix<pos:position pos:line="278" pos:column="25"/></name><argument_list pos:line="278" pos:column="25">(<argument><expr><name pos:line="278" pos:column="26">str<pos:position pos:line="278" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="278" pos:column="31">"="<pos:position pos:line="278" pos:column="34"/></literal></expr></argument>, <argument><expr><operator pos:line="278" pos:column="36">&amp;<pos:position pos:line="278" pos:column="41"/></operator><name pos:line="278" pos:column="37">str<pos:position pos:line="278" pos:column="40"/></name></expr></argument>)<pos:position pos:line="278" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="278" pos:column="42"/></condition><then pos:line="278" pos:column="42">
		<block type="pseudo"><goto pos:line="279" pos:column="17">goto <name pos:line="279" pos:column="22">fail<pos:position pos:line="279" pos:column="26"/></name>;<pos:position pos:line="279" pos:column="27"/></goto></block></then></if>

	<expr_stmt><expr><call><name pos:line="281" pos:column="9">strbuf_remove<pos:position pos:line="281" pos:column="22"/></name><argument_list pos:line="281" pos:column="22">(<argument><expr><operator pos:line="281" pos:column="23">&amp;<pos:position pos:line="281" pos:column="28"/></operator><name pos:line="281" pos:column="24">sb<pos:position pos:line="281" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="281" pos:column="28">0<pos:position pos:line="281" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="281" pos:column="31">str<pos:position pos:line="281" pos:column="34"/></name> <operator pos:line="281" pos:column="35">-<pos:position pos:line="281" pos:column="36"/></operator> <name><name pos:line="281" pos:column="37">sb<pos:position pos:line="281" pos:column="39"/></name><operator pos:line="281" pos:column="39">.<pos:position pos:line="281" pos:column="40"/></operator><name pos:line="281" pos:column="40">buf<pos:position pos:line="281" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="281" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="281" pos:column="45"/></expr_stmt>

	<expr_stmt><expr><name pos:line="283" pos:column="9">str<pos:position pos:line="283" pos:column="12"/></name> <operator pos:line="283" pos:column="13">=<pos:position pos:line="283" pos:column="14"/></operator> <call><name pos:line="283" pos:column="15">sq_dequote<pos:position pos:line="283" pos:column="25"/></name><argument_list pos:line="283" pos:column="25">(<argument><expr><name><name pos:line="283" pos:column="26">sb<pos:position pos:line="283" pos:column="28"/></name><operator pos:line="283" pos:column="28">.<pos:position pos:line="283" pos:column="29"/></operator><name pos:line="283" pos:column="29">buf<pos:position pos:line="283" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="283" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="283" pos:column="34"/></expr_stmt>
	<if pos:line="284" pos:column="9">if <condition pos:line="284" pos:column="12">(<expr><operator pos:line="284" pos:column="13">!<pos:position pos:line="284" pos:column="14"/></operator><name pos:line="284" pos:column="14">str<pos:position pos:line="284" pos:column="17"/></name></expr>)<pos:position pos:line="284" pos:column="18"/></condition><then pos:line="284" pos:column="18">
		<block type="pseudo"><goto pos:line="285" pos:column="17">goto <name pos:line="285" pos:column="22">fail<pos:position pos:line="285" pos:column="26"/></name>;<pos:position pos:line="285" pos:column="27"/></goto></block></then></if>

	<return pos:line="287" pos:column="9">return <expr><call><name pos:line="287" pos:column="16">strbuf_detach<pos:position pos:line="287" pos:column="29"/></name><argument_list pos:line="287" pos:column="29">(<argument><expr><operator pos:line="287" pos:column="30">&amp;<pos:position pos:line="287" pos:column="35"/></operator><name pos:line="287" pos:column="31">sb<pos:position pos:line="287" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="287" pos:column="35">NULL<pos:position pos:line="287" pos:column="39"/></name></expr></argument>)<pos:position pos:line="287" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="287" pos:column="41"/></return>

<label><name pos:line="289" pos:column="1">fail<pos:position pos:line="289" pos:column="5"/></name>:<pos:position pos:line="289" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="290" pos:column="9">strbuf_release<pos:position pos:line="290" pos:column="23"/></name><argument_list pos:line="290" pos:column="23">(<argument><expr><operator pos:line="290" pos:column="24">&amp;<pos:position pos:line="290" pos:column="29"/></operator><name pos:line="290" pos:column="25">sb<pos:position pos:line="290" pos:column="27"/></name></expr></argument>)<pos:position pos:line="290" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="290" pos:column="29"/></expr_stmt>
	<return pos:line="291" pos:column="9">return <expr><name pos:line="291" pos:column="16">NULL<pos:position pos:line="291" pos:column="20"/></name></expr>;<pos:position pos:line="291" pos:column="21"/></return>
}<pos:position pos:line="292" pos:column="2"/></block></function>

<comment type="block" pos:line="294" pos:column="1">/**
 * Reads and parses the state directory's "author-script" file, and sets
 * state-&gt;author_name, state-&gt;author_email and state-&gt;author_date accordingly.
 * Returns 0 on success, -1 if the file could not be parsed.
 *
 * The author script is of the format:
 *
 *	GIT_AUTHOR_NAME='$author_name'
 *	GIT_AUTHOR_EMAIL='$author_email'
 *	GIT_AUTHOR_DATE='$author_date'
 *
 * where $author_name, $author_email and $author_date are quoted. We are strict
 * with our parsing, as the file was meant to be eval'd in the old git-am.sh
 * script, and thus if the file differs from what this function expects, it is
 * better to bail out than to do something that the user does not expect.
 */</comment>
<function><specifier pos:line="310" pos:column="1">static<pos:position pos:line="310" pos:column="7"/></specifier> <type><name pos:line="310" pos:column="8">int<pos:position pos:line="310" pos:column="11"/></name></type> <name pos:line="310" pos:column="12">read_author_script<pos:position pos:line="310" pos:column="30"/></name><parameter_list pos:line="310" pos:column="30">(<parameter><decl><type><name><name pos:line="310" pos:column="31">struct<pos:position pos:line="310" pos:column="37"/></name> <name pos:line="310" pos:column="38">am_state<pos:position pos:line="310" pos:column="46"/></name></name> <modifier pos:line="310" pos:column="47">*<pos:position pos:line="310" pos:column="48"/></modifier></type><name pos:line="310" pos:column="48">state<pos:position pos:line="310" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="310" pos:column="54"/></parameter_list>
<block pos:line="311" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="312" pos:column="9">const<pos:position pos:line="312" pos:column="14"/></specifier> <name pos:line="312" pos:column="15">char<pos:position pos:line="312" pos:column="19"/></name> <modifier pos:line="312" pos:column="20">*<pos:position pos:line="312" pos:column="21"/></modifier></type><name pos:line="312" pos:column="21">filename<pos:position pos:line="312" pos:column="29"/></name> <init pos:line="312" pos:column="30">= <expr><call><name pos:line="312" pos:column="32">am_path<pos:position pos:line="312" pos:column="39"/></name><argument_list pos:line="312" pos:column="39">(<argument><expr><name pos:line="312" pos:column="40">state<pos:position pos:line="312" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="312" pos:column="47">"author-script"<pos:position pos:line="312" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="312" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="312" pos:column="64"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="313" pos:column="9">FILE<pos:position pos:line="313" pos:column="13"/></name> <modifier pos:line="313" pos:column="14">*<pos:position pos:line="313" pos:column="15"/></modifier></type><name pos:line="313" pos:column="15">fp<pos:position pos:line="313" pos:column="17"/></name></decl>;<pos:position pos:line="313" pos:column="18"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="315" pos:column="9">assert<pos:position pos:line="315" pos:column="15"/></name><argument_list pos:line="315" pos:column="15">(<argument><expr><operator pos:line="315" pos:column="16">!<pos:position pos:line="315" pos:column="17"/></operator><name><name pos:line="315" pos:column="17">state<pos:position pos:line="315" pos:column="22"/></name><operator pos:line="315" pos:column="22">-&gt;<pos:position pos:line="315" pos:column="27"/></operator><name pos:line="315" pos:column="24">author_name<pos:position pos:line="315" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="315" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="315" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="316" pos:column="9">assert<pos:position pos:line="316" pos:column="15"/></name><argument_list pos:line="316" pos:column="15">(<argument><expr><operator pos:line="316" pos:column="16">!<pos:position pos:line="316" pos:column="17"/></operator><name><name pos:line="316" pos:column="17">state<pos:position pos:line="316" pos:column="22"/></name><operator pos:line="316" pos:column="22">-&gt;<pos:position pos:line="316" pos:column="27"/></operator><name pos:line="316" pos:column="24">author_email<pos:position pos:line="316" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="316" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="316" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="317" pos:column="9">assert<pos:position pos:line="317" pos:column="15"/></name><argument_list pos:line="317" pos:column="15">(<argument><expr><operator pos:line="317" pos:column="16">!<pos:position pos:line="317" pos:column="17"/></operator><name><name pos:line="317" pos:column="17">state<pos:position pos:line="317" pos:column="22"/></name><operator pos:line="317" pos:column="22">-&gt;<pos:position pos:line="317" pos:column="27"/></operator><name pos:line="317" pos:column="24">author_date<pos:position pos:line="317" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="317" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="317" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><name pos:line="319" pos:column="9">fp<pos:position pos:line="319" pos:column="11"/></name> <operator pos:line="319" pos:column="12">=<pos:position pos:line="319" pos:column="13"/></operator> <call><name pos:line="319" pos:column="14">fopen<pos:position pos:line="319" pos:column="19"/></name><argument_list pos:line="319" pos:column="19">(<argument><expr><name pos:line="319" pos:column="20">filename<pos:position pos:line="319" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="319" pos:column="30">"r"<pos:position pos:line="319" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="319" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="319" pos:column="35"/></expr_stmt>
	<if pos:line="320" pos:column="9">if <condition pos:line="320" pos:column="12">(<expr><operator pos:line="320" pos:column="13">!<pos:position pos:line="320" pos:column="14"/></operator><name pos:line="320" pos:column="14">fp<pos:position pos:line="320" pos:column="16"/></name></expr>)<pos:position pos:line="320" pos:column="17"/></condition><then pos:line="320" pos:column="17"> <block pos:line="320" pos:column="18">{
		<if pos:line="321" pos:column="17">if <condition pos:line="321" pos:column="20">(<expr><name pos:line="321" pos:column="21">errno<pos:position pos:line="321" pos:column="26"/></name> <operator pos:line="321" pos:column="27">==<pos:position pos:line="321" pos:column="29"/></operator> <name pos:line="321" pos:column="30">ENOENT<pos:position pos:line="321" pos:column="36"/></name></expr>)<pos:position pos:line="321" pos:column="37"/></condition><then pos:line="321" pos:column="37">
			<block type="pseudo"><return pos:line="322" pos:column="25">return <expr><literal type="number" pos:line="322" pos:column="32">0<pos:position pos:line="322" pos:column="33"/></literal></expr>;<pos:position pos:line="322" pos:column="34"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="323" pos:column="17">die_errno<pos:position pos:line="323" pos:column="26"/></name><argument_list pos:line="323" pos:column="26">(<argument><expr><call><name pos:line="323" pos:column="27">_<pos:position pos:line="323" pos:column="28"/></name><argument_list pos:line="323" pos:column="28">(<argument><expr><literal type="string" pos:line="323" pos:column="29">"could not open '%s' for reading"<pos:position pos:line="323" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="323" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="323" pos:column="65">filename<pos:position pos:line="323" pos:column="73"/></name></expr></argument>)<pos:position pos:line="323" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="323" pos:column="75"/></expr_stmt>
	}<pos:position pos:line="324" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="326" pos:column="9">state<pos:position pos:line="326" pos:column="14"/></name><operator pos:line="326" pos:column="14">-&gt;<pos:position pos:line="326" pos:column="19"/></operator><name pos:line="326" pos:column="16">author_name<pos:position pos:line="326" pos:column="27"/></name></name> <operator pos:line="326" pos:column="28">=<pos:position pos:line="326" pos:column="29"/></operator> <call><name pos:line="326" pos:column="30">read_shell_var<pos:position pos:line="326" pos:column="44"/></name><argument_list pos:line="326" pos:column="44">(<argument><expr><name pos:line="326" pos:column="45">fp<pos:position pos:line="326" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="326" pos:column="49">"GIT_AUTHOR_NAME"<pos:position pos:line="326" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="326" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="326" pos:column="68"/></expr_stmt>
	<if pos:line="327" pos:column="9">if <condition pos:line="327" pos:column="12">(<expr><operator pos:line="327" pos:column="13">!<pos:position pos:line="327" pos:column="14"/></operator><name><name pos:line="327" pos:column="14">state<pos:position pos:line="327" pos:column="19"/></name><operator pos:line="327" pos:column="19">-&gt;<pos:position pos:line="327" pos:column="24"/></operator><name pos:line="327" pos:column="21">author_name<pos:position pos:line="327" pos:column="32"/></name></name></expr>)<pos:position pos:line="327" pos:column="33"/></condition><then pos:line="327" pos:column="33"> <block pos:line="327" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="328" pos:column="17">fclose<pos:position pos:line="328" pos:column="23"/></name><argument_list pos:line="328" pos:column="23">(<argument><expr><name pos:line="328" pos:column="24">fp<pos:position pos:line="328" pos:column="26"/></name></expr></argument>)<pos:position pos:line="328" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="328" pos:column="28"/></expr_stmt>
		<return pos:line="329" pos:column="17">return <expr><operator pos:line="329" pos:column="24">-<pos:position pos:line="329" pos:column="25"/></operator><literal type="number" pos:line="329" pos:column="25">1<pos:position pos:line="329" pos:column="26"/></literal></expr>;<pos:position pos:line="329" pos:column="27"/></return>
	}<pos:position pos:line="330" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="332" pos:column="9">state<pos:position pos:line="332" pos:column="14"/></name><operator pos:line="332" pos:column="14">-&gt;<pos:position pos:line="332" pos:column="19"/></operator><name pos:line="332" pos:column="16">author_email<pos:position pos:line="332" pos:column="28"/></name></name> <operator pos:line="332" pos:column="29">=<pos:position pos:line="332" pos:column="30"/></operator> <call><name pos:line="332" pos:column="31">read_shell_var<pos:position pos:line="332" pos:column="45"/></name><argument_list pos:line="332" pos:column="45">(<argument><expr><name pos:line="332" pos:column="46">fp<pos:position pos:line="332" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="332" pos:column="50">"GIT_AUTHOR_EMAIL"<pos:position pos:line="332" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="332" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="332" pos:column="70"/></expr_stmt>
	<if pos:line="333" pos:column="9">if <condition pos:line="333" pos:column="12">(<expr><operator pos:line="333" pos:column="13">!<pos:position pos:line="333" pos:column="14"/></operator><name><name pos:line="333" pos:column="14">state<pos:position pos:line="333" pos:column="19"/></name><operator pos:line="333" pos:column="19">-&gt;<pos:position pos:line="333" pos:column="24"/></operator><name pos:line="333" pos:column="21">author_email<pos:position pos:line="333" pos:column="33"/></name></name></expr>)<pos:position pos:line="333" pos:column="34"/></condition><then pos:line="333" pos:column="34"> <block pos:line="333" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="334" pos:column="17">fclose<pos:position pos:line="334" pos:column="23"/></name><argument_list pos:line="334" pos:column="23">(<argument><expr><name pos:line="334" pos:column="24">fp<pos:position pos:line="334" pos:column="26"/></name></expr></argument>)<pos:position pos:line="334" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="334" pos:column="28"/></expr_stmt>
		<return pos:line="335" pos:column="17">return <expr><operator pos:line="335" pos:column="24">-<pos:position pos:line="335" pos:column="25"/></operator><literal type="number" pos:line="335" pos:column="25">1<pos:position pos:line="335" pos:column="26"/></literal></expr>;<pos:position pos:line="335" pos:column="27"/></return>
	}<pos:position pos:line="336" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="338" pos:column="9">state<pos:position pos:line="338" pos:column="14"/></name><operator pos:line="338" pos:column="14">-&gt;<pos:position pos:line="338" pos:column="19"/></operator><name pos:line="338" pos:column="16">author_date<pos:position pos:line="338" pos:column="27"/></name></name> <operator pos:line="338" pos:column="28">=<pos:position pos:line="338" pos:column="29"/></operator> <call><name pos:line="338" pos:column="30">read_shell_var<pos:position pos:line="338" pos:column="44"/></name><argument_list pos:line="338" pos:column="44">(<argument><expr><name pos:line="338" pos:column="45">fp<pos:position pos:line="338" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="338" pos:column="49">"GIT_AUTHOR_DATE"<pos:position pos:line="338" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="338" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="338" pos:column="68"/></expr_stmt>
	<if pos:line="339" pos:column="9">if <condition pos:line="339" pos:column="12">(<expr><operator pos:line="339" pos:column="13">!<pos:position pos:line="339" pos:column="14"/></operator><name><name pos:line="339" pos:column="14">state<pos:position pos:line="339" pos:column="19"/></name><operator pos:line="339" pos:column="19">-&gt;<pos:position pos:line="339" pos:column="24"/></operator><name pos:line="339" pos:column="21">author_date<pos:position pos:line="339" pos:column="32"/></name></name></expr>)<pos:position pos:line="339" pos:column="33"/></condition><then pos:line="339" pos:column="33"> <block pos:line="339" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="340" pos:column="17">fclose<pos:position pos:line="340" pos:column="23"/></name><argument_list pos:line="340" pos:column="23">(<argument><expr><name pos:line="340" pos:column="24">fp<pos:position pos:line="340" pos:column="26"/></name></expr></argument>)<pos:position pos:line="340" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="340" pos:column="28"/></expr_stmt>
		<return pos:line="341" pos:column="17">return <expr><operator pos:line="341" pos:column="24">-<pos:position pos:line="341" pos:column="25"/></operator><literal type="number" pos:line="341" pos:column="25">1<pos:position pos:line="341" pos:column="26"/></literal></expr>;<pos:position pos:line="341" pos:column="27"/></return>
	}<pos:position pos:line="342" pos:column="10"/></block></then></if>

	<if pos:line="344" pos:column="9">if <condition pos:line="344" pos:column="12">(<expr><call><name pos:line="344" pos:column="13">fgetc<pos:position pos:line="344" pos:column="18"/></name><argument_list pos:line="344" pos:column="18">(<argument><expr><name pos:line="344" pos:column="19">fp<pos:position pos:line="344" pos:column="21"/></name></expr></argument>)<pos:position pos:line="344" pos:column="22"/></argument_list></call> <operator pos:line="344" pos:column="23">!=<pos:position pos:line="344" pos:column="25"/></operator> <name pos:line="344" pos:column="26">EOF<pos:position pos:line="344" pos:column="29"/></name></expr>)<pos:position pos:line="344" pos:column="30"/></condition><then pos:line="344" pos:column="30"> <block pos:line="344" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="345" pos:column="17">fclose<pos:position pos:line="345" pos:column="23"/></name><argument_list pos:line="345" pos:column="23">(<argument><expr><name pos:line="345" pos:column="24">fp<pos:position pos:line="345" pos:column="26"/></name></expr></argument>)<pos:position pos:line="345" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="345" pos:column="28"/></expr_stmt>
		<return pos:line="346" pos:column="17">return <expr><operator pos:line="346" pos:column="24">-<pos:position pos:line="346" pos:column="25"/></operator><literal type="number" pos:line="346" pos:column="25">1<pos:position pos:line="346" pos:column="26"/></literal></expr>;<pos:position pos:line="346" pos:column="27"/></return>
	}<pos:position pos:line="347" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="349" pos:column="9">fclose<pos:position pos:line="349" pos:column="15"/></name><argument_list pos:line="349" pos:column="15">(<argument><expr><name pos:line="349" pos:column="16">fp<pos:position pos:line="349" pos:column="18"/></name></expr></argument>)<pos:position pos:line="349" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="349" pos:column="20"/></expr_stmt>
	<return pos:line="350" pos:column="9">return <expr><literal type="number" pos:line="350" pos:column="16">0<pos:position pos:line="350" pos:column="17"/></literal></expr>;<pos:position pos:line="350" pos:column="18"/></return>
}<pos:position pos:line="351" pos:column="2"/></block></function>

<comment type="block" pos:line="353" pos:column="1">/**
 * Saves state-&gt;author_name, state-&gt;author_email and state-&gt;author_date in the
 * state directory's "author-script" file.
 */</comment>
<function><specifier pos:line="357" pos:column="1">static<pos:position pos:line="357" pos:column="7"/></specifier> <type><name pos:line="357" pos:column="8">void<pos:position pos:line="357" pos:column="12"/></name></type> <name pos:line="357" pos:column="13">write_author_script<pos:position pos:line="357" pos:column="32"/></name><parameter_list pos:line="357" pos:column="32">(<parameter><decl><type><specifier pos:line="357" pos:column="33">const<pos:position pos:line="357" pos:column="38"/></specifier> <name><name pos:line="357" pos:column="39">struct<pos:position pos:line="357" pos:column="45"/></name> <name pos:line="357" pos:column="46">am_state<pos:position pos:line="357" pos:column="54"/></name></name> <modifier pos:line="357" pos:column="55">*<pos:position pos:line="357" pos:column="56"/></modifier></type><name pos:line="357" pos:column="56">state<pos:position pos:line="357" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="357" pos:column="62"/></parameter_list>
<block pos:line="358" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="359" pos:column="9">struct<pos:position pos:line="359" pos:column="15"/></name> <name pos:line="359" pos:column="16">strbuf<pos:position pos:line="359" pos:column="22"/></name></name></type> <name pos:line="359" pos:column="23">sb<pos:position pos:line="359" pos:column="25"/></name> <init pos:line="359" pos:column="26">= <expr><name pos:line="359" pos:column="28">STRBUF_INIT<pos:position pos:line="359" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="359" pos:column="40"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="361" pos:column="9">strbuf_addstr<pos:position pos:line="361" pos:column="22"/></name><argument_list pos:line="361" pos:column="22">(<argument><expr><operator pos:line="361" pos:column="23">&amp;<pos:position pos:line="361" pos:column="28"/></operator><name pos:line="361" pos:column="24">sb<pos:position pos:line="361" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="361" pos:column="28">"GIT_AUTHOR_NAME="<pos:position pos:line="361" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="361" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="361" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="362" pos:column="9">sq_quote_buf<pos:position pos:line="362" pos:column="21"/></name><argument_list pos:line="362" pos:column="21">(<argument><expr><operator pos:line="362" pos:column="22">&amp;<pos:position pos:line="362" pos:column="27"/></operator><name pos:line="362" pos:column="23">sb<pos:position pos:line="362" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="362" pos:column="27">state<pos:position pos:line="362" pos:column="32"/></name><operator pos:line="362" pos:column="32">-&gt;<pos:position pos:line="362" pos:column="37"/></operator><name pos:line="362" pos:column="34">author_name<pos:position pos:line="362" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="362" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="362" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="363" pos:column="9">strbuf_addch<pos:position pos:line="363" pos:column="21"/></name><argument_list pos:line="363" pos:column="21">(<argument><expr><operator pos:line="363" pos:column="22">&amp;<pos:position pos:line="363" pos:column="27"/></operator><name pos:line="363" pos:column="23">sb<pos:position pos:line="363" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="363" pos:column="27">'\n'<pos:position pos:line="363" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="363" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="363" pos:column="33"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="365" pos:column="9">strbuf_addstr<pos:position pos:line="365" pos:column="22"/></name><argument_list pos:line="365" pos:column="22">(<argument><expr><operator pos:line="365" pos:column="23">&amp;<pos:position pos:line="365" pos:column="28"/></operator><name pos:line="365" pos:column="24">sb<pos:position pos:line="365" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="365" pos:column="28">"GIT_AUTHOR_EMAIL="<pos:position pos:line="365" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="365" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="365" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="366" pos:column="9">sq_quote_buf<pos:position pos:line="366" pos:column="21"/></name><argument_list pos:line="366" pos:column="21">(<argument><expr><operator pos:line="366" pos:column="22">&amp;<pos:position pos:line="366" pos:column="27"/></operator><name pos:line="366" pos:column="23">sb<pos:position pos:line="366" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="366" pos:column="27">state<pos:position pos:line="366" pos:column="32"/></name><operator pos:line="366" pos:column="32">-&gt;<pos:position pos:line="366" pos:column="37"/></operator><name pos:line="366" pos:column="34">author_email<pos:position pos:line="366" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="366" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="366" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="367" pos:column="9">strbuf_addch<pos:position pos:line="367" pos:column="21"/></name><argument_list pos:line="367" pos:column="21">(<argument><expr><operator pos:line="367" pos:column="22">&amp;<pos:position pos:line="367" pos:column="27"/></operator><name pos:line="367" pos:column="23">sb<pos:position pos:line="367" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="367" pos:column="27">'\n'<pos:position pos:line="367" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="367" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="367" pos:column="33"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="369" pos:column="9">strbuf_addstr<pos:position pos:line="369" pos:column="22"/></name><argument_list pos:line="369" pos:column="22">(<argument><expr><operator pos:line="369" pos:column="23">&amp;<pos:position pos:line="369" pos:column="28"/></operator><name pos:line="369" pos:column="24">sb<pos:position pos:line="369" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="369" pos:column="28">"GIT_AUTHOR_DATE="<pos:position pos:line="369" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="369" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="369" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="370" pos:column="9">sq_quote_buf<pos:position pos:line="370" pos:column="21"/></name><argument_list pos:line="370" pos:column="21">(<argument><expr><operator pos:line="370" pos:column="22">&amp;<pos:position pos:line="370" pos:column="27"/></operator><name pos:line="370" pos:column="23">sb<pos:position pos:line="370" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="370" pos:column="27">state<pos:position pos:line="370" pos:column="32"/></name><operator pos:line="370" pos:column="32">-&gt;<pos:position pos:line="370" pos:column="37"/></operator><name pos:line="370" pos:column="34">author_date<pos:position pos:line="370" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="370" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="370" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="371" pos:column="9">strbuf_addch<pos:position pos:line="371" pos:column="21"/></name><argument_list pos:line="371" pos:column="21">(<argument><expr><operator pos:line="371" pos:column="22">&amp;<pos:position pos:line="371" pos:column="27"/></operator><name pos:line="371" pos:column="23">sb<pos:position pos:line="371" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="371" pos:column="27">'\n'<pos:position pos:line="371" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="371" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="371" pos:column="33"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="373" pos:column="9">write_state_text<pos:position pos:line="373" pos:column="25"/></name><argument_list pos:line="373" pos:column="25">(<argument><expr><name pos:line="373" pos:column="26">state<pos:position pos:line="373" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="373" pos:column="33">"author-script"<pos:position pos:line="373" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="373" pos:column="50">sb<pos:position pos:line="373" pos:column="52"/></name><operator pos:line="373" pos:column="52">.<pos:position pos:line="373" pos:column="53"/></operator><name pos:line="373" pos:column="53">buf<pos:position pos:line="373" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="373" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="373" pos:column="58"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="375" pos:column="9">strbuf_release<pos:position pos:line="375" pos:column="23"/></name><argument_list pos:line="375" pos:column="23">(<argument><expr><operator pos:line="375" pos:column="24">&amp;<pos:position pos:line="375" pos:column="29"/></operator><name pos:line="375" pos:column="25">sb<pos:position pos:line="375" pos:column="27"/></name></expr></argument>)<pos:position pos:line="375" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="375" pos:column="29"/></expr_stmt>
}<pos:position pos:line="376" pos:column="2"/></block></function>

<comment type="block" pos:line="378" pos:column="1">/**
 * Reads the commit message from the state directory's "final-commit" file,
 * setting state-&gt;msg to its contents and state-&gt;msg_len to the length of its
 * contents in bytes.
 *
 * Returns 0 on success, -1 if the file does not exist.
 */</comment>
<function><specifier pos:line="385" pos:column="1">static<pos:position pos:line="385" pos:column="7"/></specifier> <type><name pos:line="385" pos:column="8">int<pos:position pos:line="385" pos:column="11"/></name></type> <name pos:line="385" pos:column="12">read_commit_msg<pos:position pos:line="385" pos:column="27"/></name><parameter_list pos:line="385" pos:column="27">(<parameter><decl><type><name><name pos:line="385" pos:column="28">struct<pos:position pos:line="385" pos:column="34"/></name> <name pos:line="385" pos:column="35">am_state<pos:position pos:line="385" pos:column="43"/></name></name> <modifier pos:line="385" pos:column="44">*<pos:position pos:line="385" pos:column="45"/></modifier></type><name pos:line="385" pos:column="45">state<pos:position pos:line="385" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="385" pos:column="51"/></parameter_list>
<block pos:line="386" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="387" pos:column="9">struct<pos:position pos:line="387" pos:column="15"/></name> <name pos:line="387" pos:column="16">strbuf<pos:position pos:line="387" pos:column="22"/></name></name></type> <name pos:line="387" pos:column="23">sb<pos:position pos:line="387" pos:column="25"/></name> <init pos:line="387" pos:column="26">= <expr><name pos:line="387" pos:column="28">STRBUF_INIT<pos:position pos:line="387" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="387" pos:column="40"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="389" pos:column="9">assert<pos:position pos:line="389" pos:column="15"/></name><argument_list pos:line="389" pos:column="15">(<argument><expr><operator pos:line="389" pos:column="16">!<pos:position pos:line="389" pos:column="17"/></operator><name><name pos:line="389" pos:column="17">state<pos:position pos:line="389" pos:column="22"/></name><operator pos:line="389" pos:column="22">-&gt;<pos:position pos:line="389" pos:column="27"/></operator><name pos:line="389" pos:column="24">msg<pos:position pos:line="389" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="389" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="389" pos:column="29"/></expr_stmt>

	<if pos:line="391" pos:column="9">if <condition pos:line="391" pos:column="12">(<expr><call><name pos:line="391" pos:column="13">read_state_file<pos:position pos:line="391" pos:column="28"/></name><argument_list pos:line="391" pos:column="28">(<argument><expr><operator pos:line="391" pos:column="29">&amp;<pos:position pos:line="391" pos:column="34"/></operator><name pos:line="391" pos:column="30">sb<pos:position pos:line="391" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="391" pos:column="34">state<pos:position pos:line="391" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="391" pos:column="41">"final-commit"<pos:position pos:line="391" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="391" pos:column="57">0<pos:position pos:line="391" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="391" pos:column="59"/></argument_list></call> <operator pos:line="391" pos:column="60">&lt;<pos:position pos:line="391" pos:column="64"/></operator> <literal type="number" pos:line="391" pos:column="62">0<pos:position pos:line="391" pos:column="63"/></literal></expr>)<pos:position pos:line="391" pos:column="64"/></condition><then pos:line="391" pos:column="64"> <block pos:line="391" pos:column="65">{
		<expr_stmt><expr><call><name pos:line="392" pos:column="17">strbuf_release<pos:position pos:line="392" pos:column="31"/></name><argument_list pos:line="392" pos:column="31">(<argument><expr><operator pos:line="392" pos:column="32">&amp;<pos:position pos:line="392" pos:column="37"/></operator><name pos:line="392" pos:column="33">sb<pos:position pos:line="392" pos:column="35"/></name></expr></argument>)<pos:position pos:line="392" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="392" pos:column="37"/></expr_stmt>
		<return pos:line="393" pos:column="17">return <expr><operator pos:line="393" pos:column="24">-<pos:position pos:line="393" pos:column="25"/></operator><literal type="number" pos:line="393" pos:column="25">1<pos:position pos:line="393" pos:column="26"/></literal></expr>;<pos:position pos:line="393" pos:column="27"/></return>
	}<pos:position pos:line="394" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="396" pos:column="9">state<pos:position pos:line="396" pos:column="14"/></name><operator pos:line="396" pos:column="14">-&gt;<pos:position pos:line="396" pos:column="19"/></operator><name pos:line="396" pos:column="16">msg<pos:position pos:line="396" pos:column="19"/></name></name> <operator pos:line="396" pos:column="20">=<pos:position pos:line="396" pos:column="21"/></operator> <call><name pos:line="396" pos:column="22">strbuf_detach<pos:position pos:line="396" pos:column="35"/></name><argument_list pos:line="396" pos:column="35">(<argument><expr><operator pos:line="396" pos:column="36">&amp;<pos:position pos:line="396" pos:column="41"/></operator><name pos:line="396" pos:column="37">sb<pos:position pos:line="396" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="396" pos:column="41">&amp;<pos:position pos:line="396" pos:column="46"/></operator><name><name pos:line="396" pos:column="42">state<pos:position pos:line="396" pos:column="47"/></name><operator pos:line="396" pos:column="47">-&gt;<pos:position pos:line="396" pos:column="52"/></operator><name pos:line="396" pos:column="49">msg_len<pos:position pos:line="396" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="396" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="396" pos:column="58"/></expr_stmt>
	<return pos:line="397" pos:column="9">return <expr><literal type="number" pos:line="397" pos:column="16">0<pos:position pos:line="397" pos:column="17"/></literal></expr>;<pos:position pos:line="397" pos:column="18"/></return>
}<pos:position pos:line="398" pos:column="2"/></block></function>

<comment type="block" pos:line="400" pos:column="1">/**
 * Saves state-&gt;msg in the state directory's "final-commit" file.
 */</comment>
<function><specifier pos:line="403" pos:column="1">static<pos:position pos:line="403" pos:column="7"/></specifier> <type><name pos:line="403" pos:column="8">void<pos:position pos:line="403" pos:column="12"/></name></type> <name pos:line="403" pos:column="13">write_commit_msg<pos:position pos:line="403" pos:column="29"/></name><parameter_list pos:line="403" pos:column="29">(<parameter><decl><type><specifier pos:line="403" pos:column="30">const<pos:position pos:line="403" pos:column="35"/></specifier> <name><name pos:line="403" pos:column="36">struct<pos:position pos:line="403" pos:column="42"/></name> <name pos:line="403" pos:column="43">am_state<pos:position pos:line="403" pos:column="51"/></name></name> <modifier pos:line="403" pos:column="52">*<pos:position pos:line="403" pos:column="53"/></modifier></type><name pos:line="403" pos:column="53">state<pos:position pos:line="403" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="403" pos:column="59"/></parameter_list>
<block pos:line="404" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="405" pos:column="9">int<pos:position pos:line="405" pos:column="12"/></name></type> <name pos:line="405" pos:column="13">fd<pos:position pos:line="405" pos:column="15"/></name></decl>;<pos:position pos:line="405" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="406" pos:column="9">const<pos:position pos:line="406" pos:column="14"/></specifier> <name pos:line="406" pos:column="15">char<pos:position pos:line="406" pos:column="19"/></name> <modifier pos:line="406" pos:column="20">*<pos:position pos:line="406" pos:column="21"/></modifier></type><name pos:line="406" pos:column="21">filename<pos:position pos:line="406" pos:column="29"/></name> <init pos:line="406" pos:column="30">= <expr><call><name pos:line="406" pos:column="32">am_path<pos:position pos:line="406" pos:column="39"/></name><argument_list pos:line="406" pos:column="39">(<argument><expr><name pos:line="406" pos:column="40">state<pos:position pos:line="406" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="406" pos:column="47">"final-commit"<pos:position pos:line="406" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="406" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="406" pos:column="63"/></decl_stmt>

	<expr_stmt><expr><name pos:line="408" pos:column="9">fd<pos:position pos:line="408" pos:column="11"/></name> <operator pos:line="408" pos:column="12">=<pos:position pos:line="408" pos:column="13"/></operator> <call><name pos:line="408" pos:column="14">xopen<pos:position pos:line="408" pos:column="19"/></name><argument_list pos:line="408" pos:column="19">(<argument><expr><name pos:line="408" pos:column="20">filename<pos:position pos:line="408" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="408" pos:column="30">O_WRONLY<pos:position pos:line="408" pos:column="38"/></name> <operator pos:line="408" pos:column="39">|<pos:position pos:line="408" pos:column="40"/></operator> <name pos:line="408" pos:column="41">O_CREAT<pos:position pos:line="408" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="408" pos:column="50">0666<pos:position pos:line="408" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="408" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="408" pos:column="56"/></expr_stmt>
	<if pos:line="409" pos:column="9">if <condition pos:line="409" pos:column="12">(<expr><call><name pos:line="409" pos:column="13">write_in_full<pos:position pos:line="409" pos:column="26"/></name><argument_list pos:line="409" pos:column="26">(<argument><expr><name pos:line="409" pos:column="27">fd<pos:position pos:line="409" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="409" pos:column="31">state<pos:position pos:line="409" pos:column="36"/></name><operator pos:line="409" pos:column="36">-&gt;<pos:position pos:line="409" pos:column="41"/></operator><name pos:line="409" pos:column="38">msg<pos:position pos:line="409" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="409" pos:column="43">state<pos:position pos:line="409" pos:column="48"/></name><operator pos:line="409" pos:column="48">-&gt;<pos:position pos:line="409" pos:column="53"/></operator><name pos:line="409" pos:column="50">msg_len<pos:position pos:line="409" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="409" pos:column="58"/></argument_list></call> <operator pos:line="409" pos:column="59">&lt;<pos:position pos:line="409" pos:column="63"/></operator> <literal type="number" pos:line="409" pos:column="61">0<pos:position pos:line="409" pos:column="62"/></literal></expr>)<pos:position pos:line="409" pos:column="63"/></condition><then pos:line="409" pos:column="63">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="410" pos:column="17">die_errno<pos:position pos:line="410" pos:column="26"/></name><argument_list pos:line="410" pos:column="26">(<argument><expr><call><name pos:line="410" pos:column="27">_<pos:position pos:line="410" pos:column="28"/></name><argument_list pos:line="410" pos:column="28">(<argument><expr><literal type="string" pos:line="410" pos:column="29">"could not write to %s"<pos:position pos:line="410" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="410" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="410" pos:column="55">filename<pos:position pos:line="410" pos:column="63"/></name></expr></argument>)<pos:position pos:line="410" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="410" pos:column="65"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="411" pos:column="9">close<pos:position pos:line="411" pos:column="14"/></name><argument_list pos:line="411" pos:column="14">(<argument><expr><name pos:line="411" pos:column="15">fd<pos:position pos:line="411" pos:column="17"/></name></expr></argument>)<pos:position pos:line="411" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="411" pos:column="19"/></expr_stmt>
}<pos:position pos:line="412" pos:column="2"/></block></function>

<comment type="block" pos:line="414" pos:column="1">/**
 * Loads state from disk.
 */</comment>
<function><specifier pos:line="417" pos:column="1">static<pos:position pos:line="417" pos:column="7"/></specifier> <type><name pos:line="417" pos:column="8">void<pos:position pos:line="417" pos:column="12"/></name></type> <name pos:line="417" pos:column="13">am_load<pos:position pos:line="417" pos:column="20"/></name><parameter_list pos:line="417" pos:column="20">(<parameter><decl><type><name><name pos:line="417" pos:column="21">struct<pos:position pos:line="417" pos:column="27"/></name> <name pos:line="417" pos:column="28">am_state<pos:position pos:line="417" pos:column="36"/></name></name> <modifier pos:line="417" pos:column="37">*<pos:position pos:line="417" pos:column="38"/></modifier></type><name pos:line="417" pos:column="38">state<pos:position pos:line="417" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="417" pos:column="44"/></parameter_list>
<block pos:line="418" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="419" pos:column="9">struct<pos:position pos:line="419" pos:column="15"/></name> <name pos:line="419" pos:column="16">strbuf<pos:position pos:line="419" pos:column="22"/></name></name></type> <name pos:line="419" pos:column="23">sb<pos:position pos:line="419" pos:column="25"/></name> <init pos:line="419" pos:column="26">= <expr><name pos:line="419" pos:column="28">STRBUF_INIT<pos:position pos:line="419" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="419" pos:column="40"/></decl_stmt>

	<if pos:line="421" pos:column="9">if <condition pos:line="421" pos:column="12">(<expr><call><name pos:line="421" pos:column="13">read_state_file<pos:position pos:line="421" pos:column="28"/></name><argument_list pos:line="421" pos:column="28">(<argument><expr><operator pos:line="421" pos:column="29">&amp;<pos:position pos:line="421" pos:column="34"/></operator><name pos:line="421" pos:column="30">sb<pos:position pos:line="421" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="421" pos:column="34">state<pos:position pos:line="421" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="421" pos:column="41">"next"<pos:position pos:line="421" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="421" pos:column="49">1<pos:position pos:line="421" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="421" pos:column="51"/></argument_list></call> <operator pos:line="421" pos:column="52">&lt;<pos:position pos:line="421" pos:column="56"/></operator> <literal type="number" pos:line="421" pos:column="54">0<pos:position pos:line="421" pos:column="55"/></literal></expr>)<pos:position pos:line="421" pos:column="56"/></condition><then pos:line="421" pos:column="56">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="422" pos:column="17">die<pos:position pos:line="422" pos:column="20"/></name><argument_list pos:line="422" pos:column="20">(<argument><expr><literal type="string" pos:line="422" pos:column="21">"BUG: state file 'next' does not exist"<pos:position pos:line="422" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="422" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="422" pos:column="62"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="423" pos:column="9">state<pos:position pos:line="423" pos:column="14"/></name><operator pos:line="423" pos:column="14">-&gt;<pos:position pos:line="423" pos:column="19"/></operator><name pos:line="423" pos:column="16">cur<pos:position pos:line="423" pos:column="19"/></name></name> <operator pos:line="423" pos:column="20">=<pos:position pos:line="423" pos:column="21"/></operator> <call><name pos:line="423" pos:column="22">strtol<pos:position pos:line="423" pos:column="28"/></name><argument_list pos:line="423" pos:column="28">(<argument><expr><name><name pos:line="423" pos:column="29">sb<pos:position pos:line="423" pos:column="31"/></name><operator pos:line="423" pos:column="31">.<pos:position pos:line="423" pos:column="32"/></operator><name pos:line="423" pos:column="32">buf<pos:position pos:line="423" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="423" pos:column="37">NULL<pos:position pos:line="423" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="423" pos:column="43">10<pos:position pos:line="423" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="423" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="423" pos:column="47"/></expr_stmt>

	<if pos:line="425" pos:column="9">if <condition pos:line="425" pos:column="12">(<expr><call><name pos:line="425" pos:column="13">read_state_file<pos:position pos:line="425" pos:column="28"/></name><argument_list pos:line="425" pos:column="28">(<argument><expr><operator pos:line="425" pos:column="29">&amp;<pos:position pos:line="425" pos:column="34"/></operator><name pos:line="425" pos:column="30">sb<pos:position pos:line="425" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="425" pos:column="34">state<pos:position pos:line="425" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="425" pos:column="41">"last"<pos:position pos:line="425" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="425" pos:column="49">1<pos:position pos:line="425" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="425" pos:column="51"/></argument_list></call> <operator pos:line="425" pos:column="52">&lt;<pos:position pos:line="425" pos:column="56"/></operator> <literal type="number" pos:line="425" pos:column="54">0<pos:position pos:line="425" pos:column="55"/></literal></expr>)<pos:position pos:line="425" pos:column="56"/></condition><then pos:line="425" pos:column="56">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="426" pos:column="17">die<pos:position pos:line="426" pos:column="20"/></name><argument_list pos:line="426" pos:column="20">(<argument><expr><literal type="string" pos:line="426" pos:column="21">"BUG: state file 'last' does not exist"<pos:position pos:line="426" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="426" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="426" pos:column="62"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="427" pos:column="9">state<pos:position pos:line="427" pos:column="14"/></name><operator pos:line="427" pos:column="14">-&gt;<pos:position pos:line="427" pos:column="19"/></operator><name pos:line="427" pos:column="16">last<pos:position pos:line="427" pos:column="20"/></name></name> <operator pos:line="427" pos:column="21">=<pos:position pos:line="427" pos:column="22"/></operator> <call><name pos:line="427" pos:column="23">strtol<pos:position pos:line="427" pos:column="29"/></name><argument_list pos:line="427" pos:column="29">(<argument><expr><name><name pos:line="427" pos:column="30">sb<pos:position pos:line="427" pos:column="32"/></name><operator pos:line="427" pos:column="32">.<pos:position pos:line="427" pos:column="33"/></operator><name pos:line="427" pos:column="33">buf<pos:position pos:line="427" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="427" pos:column="38">NULL<pos:position pos:line="427" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="427" pos:column="44">10<pos:position pos:line="427" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="427" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="427" pos:column="48"/></expr_stmt>

	<if pos:line="429" pos:column="9">if <condition pos:line="429" pos:column="12">(<expr><call><name pos:line="429" pos:column="13">read_author_script<pos:position pos:line="429" pos:column="31"/></name><argument_list pos:line="429" pos:column="31">(<argument><expr><name pos:line="429" pos:column="32">state<pos:position pos:line="429" pos:column="37"/></name></expr></argument>)<pos:position pos:line="429" pos:column="38"/></argument_list></call> <operator pos:line="429" pos:column="39">&lt;<pos:position pos:line="429" pos:column="43"/></operator> <literal type="number" pos:line="429" pos:column="41">0<pos:position pos:line="429" pos:column="42"/></literal></expr>)<pos:position pos:line="429" pos:column="43"/></condition><then pos:line="429" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="430" pos:column="17">die<pos:position pos:line="430" pos:column="20"/></name><argument_list pos:line="430" pos:column="20">(<argument><expr><call><name pos:line="430" pos:column="21">_<pos:position pos:line="430" pos:column="22"/></name><argument_list pos:line="430" pos:column="22">(<argument><expr><literal type="string" pos:line="430" pos:column="23">"could not parse author script"<pos:position pos:line="430" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="430" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="430" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="430" pos:column="57"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="432" pos:column="9">read_commit_msg<pos:position pos:line="432" pos:column="24"/></name><argument_list pos:line="432" pos:column="24">(<argument><expr><name pos:line="432" pos:column="25">state<pos:position pos:line="432" pos:column="30"/></name></expr></argument>)<pos:position pos:line="432" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="432" pos:column="32"/></expr_stmt>

	<if pos:line="434" pos:column="9">if <condition pos:line="434" pos:column="12">(<expr><call><name pos:line="434" pos:column="13">read_state_file<pos:position pos:line="434" pos:column="28"/></name><argument_list pos:line="434" pos:column="28">(<argument><expr><operator pos:line="434" pos:column="29">&amp;<pos:position pos:line="434" pos:column="34"/></operator><name pos:line="434" pos:column="30">sb<pos:position pos:line="434" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="434" pos:column="34">state<pos:position pos:line="434" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="434" pos:column="41">"original-commit"<pos:position pos:line="434" pos:column="58"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="434" pos:column="60">1<pos:position pos:line="434" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="434" pos:column="62"/></argument_list></call> <operator pos:line="434" pos:column="63">&lt;<pos:position pos:line="434" pos:column="67"/></operator> <literal type="number" pos:line="434" pos:column="65">0<pos:position pos:line="434" pos:column="66"/></literal></expr>)<pos:position pos:line="434" pos:column="67"/></condition><then pos:line="434" pos:column="67">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="435" pos:column="17">hashclr<pos:position pos:line="435" pos:column="24"/></name><argument_list pos:line="435" pos:column="24">(<argument><expr><name><name pos:line="435" pos:column="25">state<pos:position pos:line="435" pos:column="30"/></name><operator pos:line="435" pos:column="30">-&gt;<pos:position pos:line="435" pos:column="35"/></operator><name pos:line="435" pos:column="32">orig_commit<pos:position pos:line="435" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="435" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="435" pos:column="45"/></expr_stmt></block></then>
	<elseif pos:line="436" pos:column="9">else <if pos:line="436" pos:column="14">if <condition pos:line="436" pos:column="17">(<expr><call><name pos:line="436" pos:column="18">get_sha1_hex<pos:position pos:line="436" pos:column="30"/></name><argument_list pos:line="436" pos:column="30">(<argument><expr><name><name pos:line="436" pos:column="31">sb<pos:position pos:line="436" pos:column="33"/></name><operator pos:line="436" pos:column="33">.<pos:position pos:line="436" pos:column="34"/></operator><name pos:line="436" pos:column="34">buf<pos:position pos:line="436" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="436" pos:column="39">state<pos:position pos:line="436" pos:column="44"/></name><operator pos:line="436" pos:column="44">-&gt;<pos:position pos:line="436" pos:column="49"/></operator><name pos:line="436" pos:column="46">orig_commit<pos:position pos:line="436" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="436" pos:column="58"/></argument_list></call> <operator pos:line="436" pos:column="59">&lt;<pos:position pos:line="436" pos:column="63"/></operator> <literal type="number" pos:line="436" pos:column="61">0<pos:position pos:line="436" pos:column="62"/></literal></expr>)<pos:position pos:line="436" pos:column="63"/></condition><then pos:line="436" pos:column="63">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="437" pos:column="17">die<pos:position pos:line="437" pos:column="20"/></name><argument_list pos:line="437" pos:column="20">(<argument><expr><call><name pos:line="437" pos:column="21">_<pos:position pos:line="437" pos:column="22"/></name><argument_list pos:line="437" pos:column="22">(<argument><expr><literal type="string" pos:line="437" pos:column="23">"could not parse %s"<pos:position pos:line="437" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="437" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="437" pos:column="46">am_path<pos:position pos:line="437" pos:column="53"/></name><argument_list pos:line="437" pos:column="53">(<argument><expr><name pos:line="437" pos:column="54">state<pos:position pos:line="437" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="437" pos:column="61">"original-commit"<pos:position pos:line="437" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="437" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="437" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="437" pos:column="81"/></expr_stmt></block></then></if></elseif></if>

	<expr_stmt><expr><call><name pos:line="439" pos:column="9">read_state_file<pos:position pos:line="439" pos:column="24"/></name><argument_list pos:line="439" pos:column="24">(<argument><expr><operator pos:line="439" pos:column="25">&amp;<pos:position pos:line="439" pos:column="30"/></operator><name pos:line="439" pos:column="26">sb<pos:position pos:line="439" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="439" pos:column="30">state<pos:position pos:line="439" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="439" pos:column="37">"threeway"<pos:position pos:line="439" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="439" pos:column="49">1<pos:position pos:line="439" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="439" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="439" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="440" pos:column="9">state<pos:position pos:line="440" pos:column="14"/></name><operator pos:line="440" pos:column="14">-&gt;<pos:position pos:line="440" pos:column="19"/></operator><name pos:line="440" pos:column="16">threeway<pos:position pos:line="440" pos:column="24"/></name></name> <operator pos:line="440" pos:column="25">=<pos:position pos:line="440" pos:column="26"/></operator> <operator pos:line="440" pos:column="27">!<pos:position pos:line="440" pos:column="28"/></operator><call><name pos:line="440" pos:column="28">strcmp<pos:position pos:line="440" pos:column="34"/></name><argument_list pos:line="440" pos:column="34">(<argument><expr><name><name pos:line="440" pos:column="35">sb<pos:position pos:line="440" pos:column="37"/></name><operator pos:line="440" pos:column="37">.<pos:position pos:line="440" pos:column="38"/></operator><name pos:line="440" pos:column="38">buf<pos:position pos:line="440" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="440" pos:column="43">"t"<pos:position pos:line="440" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="440" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="440" pos:column="48"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="442" pos:column="9">read_state_file<pos:position pos:line="442" pos:column="24"/></name><argument_list pos:line="442" pos:column="24">(<argument><expr><operator pos:line="442" pos:column="25">&amp;<pos:position pos:line="442" pos:column="30"/></operator><name pos:line="442" pos:column="26">sb<pos:position pos:line="442" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="442" pos:column="30">state<pos:position pos:line="442" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="442" pos:column="37">"quiet"<pos:position pos:line="442" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="442" pos:column="46">1<pos:position pos:line="442" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="442" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="442" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="443" pos:column="9">state<pos:position pos:line="443" pos:column="14"/></name><operator pos:line="443" pos:column="14">-&gt;<pos:position pos:line="443" pos:column="19"/></operator><name pos:line="443" pos:column="16">quiet<pos:position pos:line="443" pos:column="21"/></name></name> <operator pos:line="443" pos:column="22">=<pos:position pos:line="443" pos:column="23"/></operator> <operator pos:line="443" pos:column="24">!<pos:position pos:line="443" pos:column="25"/></operator><call><name pos:line="443" pos:column="25">strcmp<pos:position pos:line="443" pos:column="31"/></name><argument_list pos:line="443" pos:column="31">(<argument><expr><name><name pos:line="443" pos:column="32">sb<pos:position pos:line="443" pos:column="34"/></name><operator pos:line="443" pos:column="34">.<pos:position pos:line="443" pos:column="35"/></operator><name pos:line="443" pos:column="35">buf<pos:position pos:line="443" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="443" pos:column="40">"t"<pos:position pos:line="443" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="443" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="443" pos:column="45"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="445" pos:column="9">read_state_file<pos:position pos:line="445" pos:column="24"/></name><argument_list pos:line="445" pos:column="24">(<argument><expr><operator pos:line="445" pos:column="25">&amp;<pos:position pos:line="445" pos:column="30"/></operator><name pos:line="445" pos:column="26">sb<pos:position pos:line="445" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="445" pos:column="30">state<pos:position pos:line="445" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="445" pos:column="37">"sign"<pos:position pos:line="445" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="445" pos:column="45">1<pos:position pos:line="445" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="445" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="445" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="446" pos:column="9">state<pos:position pos:line="446" pos:column="14"/></name><operator pos:line="446" pos:column="14">-&gt;<pos:position pos:line="446" pos:column="19"/></operator><name pos:line="446" pos:column="16">signoff<pos:position pos:line="446" pos:column="23"/></name></name> <operator pos:line="446" pos:column="24">=<pos:position pos:line="446" pos:column="25"/></operator> <operator pos:line="446" pos:column="26">!<pos:position pos:line="446" pos:column="27"/></operator><call><name pos:line="446" pos:column="27">strcmp<pos:position pos:line="446" pos:column="33"/></name><argument_list pos:line="446" pos:column="33">(<argument><expr><name><name pos:line="446" pos:column="34">sb<pos:position pos:line="446" pos:column="36"/></name><operator pos:line="446" pos:column="36">.<pos:position pos:line="446" pos:column="37"/></operator><name pos:line="446" pos:column="37">buf<pos:position pos:line="446" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="446" pos:column="42">"t"<pos:position pos:line="446" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="446" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="446" pos:column="47"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="448" pos:column="9">read_state_file<pos:position pos:line="448" pos:column="24"/></name><argument_list pos:line="448" pos:column="24">(<argument><expr><operator pos:line="448" pos:column="25">&amp;<pos:position pos:line="448" pos:column="30"/></operator><name pos:line="448" pos:column="26">sb<pos:position pos:line="448" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="448" pos:column="30">state<pos:position pos:line="448" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="448" pos:column="37">"utf8"<pos:position pos:line="448" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="448" pos:column="45">1<pos:position pos:line="448" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="448" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="448" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="449" pos:column="9">state<pos:position pos:line="449" pos:column="14"/></name><operator pos:line="449" pos:column="14">-&gt;<pos:position pos:line="449" pos:column="19"/></operator><name pos:line="449" pos:column="16">utf8<pos:position pos:line="449" pos:column="20"/></name></name> <operator pos:line="449" pos:column="21">=<pos:position pos:line="449" pos:column="22"/></operator> <operator pos:line="449" pos:column="23">!<pos:position pos:line="449" pos:column="24"/></operator><call><name pos:line="449" pos:column="24">strcmp<pos:position pos:line="449" pos:column="30"/></name><argument_list pos:line="449" pos:column="30">(<argument><expr><name><name pos:line="449" pos:column="31">sb<pos:position pos:line="449" pos:column="33"/></name><operator pos:line="449" pos:column="33">.<pos:position pos:line="449" pos:column="34"/></operator><name pos:line="449" pos:column="34">buf<pos:position pos:line="449" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="449" pos:column="39">"t"<pos:position pos:line="449" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="449" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="449" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="451" pos:column="9">read_state_file<pos:position pos:line="451" pos:column="24"/></name><argument_list pos:line="451" pos:column="24">(<argument><expr><operator pos:line="451" pos:column="25">&amp;<pos:position pos:line="451" pos:column="30"/></operator><name pos:line="451" pos:column="26">sb<pos:position pos:line="451" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="451" pos:column="30">state<pos:position pos:line="451" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="451" pos:column="37">"keep"<pos:position pos:line="451" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="451" pos:column="45">1<pos:position pos:line="451" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="451" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="451" pos:column="48"/></expr_stmt>
	<if pos:line="452" pos:column="9">if <condition pos:line="452" pos:column="12">(<expr><operator pos:line="452" pos:column="13">!<pos:position pos:line="452" pos:column="14"/></operator><call><name pos:line="452" pos:column="14">strcmp<pos:position pos:line="452" pos:column="20"/></name><argument_list pos:line="452" pos:column="20">(<argument><expr><name><name pos:line="452" pos:column="21">sb<pos:position pos:line="452" pos:column="23"/></name><operator pos:line="452" pos:column="23">.<pos:position pos:line="452" pos:column="24"/></operator><name pos:line="452" pos:column="24">buf<pos:position pos:line="452" pos:column="27"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="452" pos:column="29">"t"<pos:position pos:line="452" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="452" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="452" pos:column="34"/></condition><then pos:line="452" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="453" pos:column="17">state<pos:position pos:line="453" pos:column="22"/></name><operator pos:line="453" pos:column="22">-&gt;<pos:position pos:line="453" pos:column="27"/></operator><name pos:line="453" pos:column="24">keep<pos:position pos:line="453" pos:column="28"/></name></name> <operator pos:line="453" pos:column="29">=<pos:position pos:line="453" pos:column="30"/></operator> <name pos:line="453" pos:column="31">KEEP_TRUE<pos:position pos:line="453" pos:column="40"/></name></expr>;<pos:position pos:line="453" pos:column="41"/></expr_stmt></block></then>
	<elseif pos:line="454" pos:column="9">else <if pos:line="454" pos:column="14">if <condition pos:line="454" pos:column="17">(<expr><operator pos:line="454" pos:column="18">!<pos:position pos:line="454" pos:column="19"/></operator><call><name pos:line="454" pos:column="19">strcmp<pos:position pos:line="454" pos:column="25"/></name><argument_list pos:line="454" pos:column="25">(<argument><expr><name><name pos:line="454" pos:column="26">sb<pos:position pos:line="454" pos:column="28"/></name><operator pos:line="454" pos:column="28">.<pos:position pos:line="454" pos:column="29"/></operator><name pos:line="454" pos:column="29">buf<pos:position pos:line="454" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="454" pos:column="34">"b"<pos:position pos:line="454" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="454" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="454" pos:column="39"/></condition><then pos:line="454" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="455" pos:column="17">state<pos:position pos:line="455" pos:column="22"/></name><operator pos:line="455" pos:column="22">-&gt;<pos:position pos:line="455" pos:column="27"/></operator><name pos:line="455" pos:column="24">keep<pos:position pos:line="455" pos:column="28"/></name></name> <operator pos:line="455" pos:column="29">=<pos:position pos:line="455" pos:column="30"/></operator> <name pos:line="455" pos:column="31">KEEP_NON_PATCH<pos:position pos:line="455" pos:column="45"/></name></expr>;<pos:position pos:line="455" pos:column="46"/></expr_stmt></block></then></if></elseif>
	<else pos:line="456" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="457" pos:column="17">state<pos:position pos:line="457" pos:column="22"/></name><operator pos:line="457" pos:column="22">-&gt;<pos:position pos:line="457" pos:column="27"/></operator><name pos:line="457" pos:column="24">keep<pos:position pos:line="457" pos:column="28"/></name></name> <operator pos:line="457" pos:column="29">=<pos:position pos:line="457" pos:column="30"/></operator> <name pos:line="457" pos:column="31">KEEP_FALSE<pos:position pos:line="457" pos:column="41"/></name></expr>;<pos:position pos:line="457" pos:column="42"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="459" pos:column="9">read_state_file<pos:position pos:line="459" pos:column="24"/></name><argument_list pos:line="459" pos:column="24">(<argument><expr><operator pos:line="459" pos:column="25">&amp;<pos:position pos:line="459" pos:column="30"/></operator><name pos:line="459" pos:column="26">sb<pos:position pos:line="459" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="459" pos:column="30">state<pos:position pos:line="459" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="459" pos:column="37">"messageid"<pos:position pos:line="459" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="459" pos:column="50">1<pos:position pos:line="459" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="459" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="459" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="460" pos:column="9">state<pos:position pos:line="460" pos:column="14"/></name><operator pos:line="460" pos:column="14">-&gt;<pos:position pos:line="460" pos:column="19"/></operator><name pos:line="460" pos:column="16">message_id<pos:position pos:line="460" pos:column="26"/></name></name> <operator pos:line="460" pos:column="27">=<pos:position pos:line="460" pos:column="28"/></operator> <operator pos:line="460" pos:column="29">!<pos:position pos:line="460" pos:column="30"/></operator><call><name pos:line="460" pos:column="30">strcmp<pos:position pos:line="460" pos:column="36"/></name><argument_list pos:line="460" pos:column="36">(<argument><expr><name><name pos:line="460" pos:column="37">sb<pos:position pos:line="460" pos:column="39"/></name><operator pos:line="460" pos:column="39">.<pos:position pos:line="460" pos:column="40"/></operator><name pos:line="460" pos:column="40">buf<pos:position pos:line="460" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="460" pos:column="45">"t"<pos:position pos:line="460" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="460" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="460" pos:column="50"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="462" pos:column="9">read_state_file<pos:position pos:line="462" pos:column="24"/></name><argument_list pos:line="462" pos:column="24">(<argument><expr><operator pos:line="462" pos:column="25">&amp;<pos:position pos:line="462" pos:column="30"/></operator><name pos:line="462" pos:column="26">sb<pos:position pos:line="462" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="462" pos:column="30">state<pos:position pos:line="462" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="462" pos:column="37">"scissors"<pos:position pos:line="462" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="462" pos:column="49">1<pos:position pos:line="462" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="462" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="462" pos:column="52"/></expr_stmt>
	<if pos:line="463" pos:column="9">if <condition pos:line="463" pos:column="12">(<expr><operator pos:line="463" pos:column="13">!<pos:position pos:line="463" pos:column="14"/></operator><call><name pos:line="463" pos:column="14">strcmp<pos:position pos:line="463" pos:column="20"/></name><argument_list pos:line="463" pos:column="20">(<argument><expr><name><name pos:line="463" pos:column="21">sb<pos:position pos:line="463" pos:column="23"/></name><operator pos:line="463" pos:column="23">.<pos:position pos:line="463" pos:column="24"/></operator><name pos:line="463" pos:column="24">buf<pos:position pos:line="463" pos:column="27"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="463" pos:column="29">"t"<pos:position pos:line="463" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="463" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="463" pos:column="34"/></condition><then pos:line="463" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="464" pos:column="17">state<pos:position pos:line="464" pos:column="22"/></name><operator pos:line="464" pos:column="22">-&gt;<pos:position pos:line="464" pos:column="27"/></operator><name pos:line="464" pos:column="24">scissors<pos:position pos:line="464" pos:column="32"/></name></name> <operator pos:line="464" pos:column="33">=<pos:position pos:line="464" pos:column="34"/></operator> <name pos:line="464" pos:column="35">SCISSORS_TRUE<pos:position pos:line="464" pos:column="48"/></name></expr>;<pos:position pos:line="464" pos:column="49"/></expr_stmt></block></then>
	<elseif pos:line="465" pos:column="9">else <if pos:line="465" pos:column="14">if <condition pos:line="465" pos:column="17">(<expr><operator pos:line="465" pos:column="18">!<pos:position pos:line="465" pos:column="19"/></operator><call><name pos:line="465" pos:column="19">strcmp<pos:position pos:line="465" pos:column="25"/></name><argument_list pos:line="465" pos:column="25">(<argument><expr><name><name pos:line="465" pos:column="26">sb<pos:position pos:line="465" pos:column="28"/></name><operator pos:line="465" pos:column="28">.<pos:position pos:line="465" pos:column="29"/></operator><name pos:line="465" pos:column="29">buf<pos:position pos:line="465" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="465" pos:column="34">"f"<pos:position pos:line="465" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="465" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="465" pos:column="39"/></condition><then pos:line="465" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="466" pos:column="17">state<pos:position pos:line="466" pos:column="22"/></name><operator pos:line="466" pos:column="22">-&gt;<pos:position pos:line="466" pos:column="27"/></operator><name pos:line="466" pos:column="24">scissors<pos:position pos:line="466" pos:column="32"/></name></name> <operator pos:line="466" pos:column="33">=<pos:position pos:line="466" pos:column="34"/></operator> <name pos:line="466" pos:column="35">SCISSORS_FALSE<pos:position pos:line="466" pos:column="49"/></name></expr>;<pos:position pos:line="466" pos:column="50"/></expr_stmt></block></then></if></elseif>
	<else pos:line="467" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="468" pos:column="17">state<pos:position pos:line="468" pos:column="22"/></name><operator pos:line="468" pos:column="22">-&gt;<pos:position pos:line="468" pos:column="27"/></operator><name pos:line="468" pos:column="24">scissors<pos:position pos:line="468" pos:column="32"/></name></name> <operator pos:line="468" pos:column="33">=<pos:position pos:line="468" pos:column="34"/></operator> <name pos:line="468" pos:column="35">SCISSORS_UNSET<pos:position pos:line="468" pos:column="49"/></name></expr>;<pos:position pos:line="468" pos:column="50"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="470" pos:column="9">read_state_file<pos:position pos:line="470" pos:column="24"/></name><argument_list pos:line="470" pos:column="24">(<argument><expr><operator pos:line="470" pos:column="25">&amp;<pos:position pos:line="470" pos:column="30"/></operator><name pos:line="470" pos:column="26">sb<pos:position pos:line="470" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="470" pos:column="30">state<pos:position pos:line="470" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="470" pos:column="37">"apply-opt"<pos:position pos:line="470" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="470" pos:column="50">1<pos:position pos:line="470" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="470" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="470" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="471" pos:column="9">argv_array_clear<pos:position pos:line="471" pos:column="25"/></name><argument_list pos:line="471" pos:column="25">(<argument><expr><operator pos:line="471" pos:column="26">&amp;<pos:position pos:line="471" pos:column="31"/></operator><name><name pos:line="471" pos:column="27">state<pos:position pos:line="471" pos:column="32"/></name><operator pos:line="471" pos:column="32">-&gt;<pos:position pos:line="471" pos:column="37"/></operator><name pos:line="471" pos:column="34">git_apply_opts<pos:position pos:line="471" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="471" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="471" pos:column="50"/></expr_stmt>
	<if pos:line="472" pos:column="9">if <condition pos:line="472" pos:column="12">(<expr><call><name pos:line="472" pos:column="13">sq_dequote_to_argv_array<pos:position pos:line="472" pos:column="37"/></name><argument_list pos:line="472" pos:column="37">(<argument><expr><name><name pos:line="472" pos:column="38">sb<pos:position pos:line="472" pos:column="40"/></name><operator pos:line="472" pos:column="40">.<pos:position pos:line="472" pos:column="41"/></operator><name pos:line="472" pos:column="41">buf<pos:position pos:line="472" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="472" pos:column="46">&amp;<pos:position pos:line="472" pos:column="51"/></operator><name><name pos:line="472" pos:column="47">state<pos:position pos:line="472" pos:column="52"/></name><operator pos:line="472" pos:column="52">-&gt;<pos:position pos:line="472" pos:column="57"/></operator><name pos:line="472" pos:column="54">git_apply_opts<pos:position pos:line="472" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="472" pos:column="69"/></argument_list></call> <operator pos:line="472" pos:column="70">&lt;<pos:position pos:line="472" pos:column="74"/></operator> <literal type="number" pos:line="472" pos:column="72">0<pos:position pos:line="472" pos:column="73"/></literal></expr>)<pos:position pos:line="472" pos:column="74"/></condition><then pos:line="472" pos:column="74">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="473" pos:column="17">die<pos:position pos:line="473" pos:column="20"/></name><argument_list pos:line="473" pos:column="20">(<argument><expr><call><name pos:line="473" pos:column="21">_<pos:position pos:line="473" pos:column="22"/></name><argument_list pos:line="473" pos:column="22">(<argument><expr><literal type="string" pos:line="473" pos:column="23">"could not parse %s"<pos:position pos:line="473" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="473" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="473" pos:column="46">am_path<pos:position pos:line="473" pos:column="53"/></name><argument_list pos:line="473" pos:column="53">(<argument><expr><name pos:line="473" pos:column="54">state<pos:position pos:line="473" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="473" pos:column="61">"apply-opt"<pos:position pos:line="473" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="473" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="473" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="473" pos:column="75"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="475" pos:column="9">state<pos:position pos:line="475" pos:column="14"/></name><operator pos:line="475" pos:column="14">-&gt;<pos:position pos:line="475" pos:column="19"/></operator><name pos:line="475" pos:column="16">rebasing<pos:position pos:line="475" pos:column="24"/></name></name> <operator pos:line="475" pos:column="25">=<pos:position pos:line="475" pos:column="26"/></operator> <operator pos:line="475" pos:column="27">!<pos:position pos:line="475" pos:column="28"/></operator><operator pos:line="475" pos:column="28">!<pos:position pos:line="475" pos:column="29"/></operator><call><name pos:line="475" pos:column="29">file_exists<pos:position pos:line="475" pos:column="40"/></name><argument_list pos:line="475" pos:column="40">(<argument><expr><call><name pos:line="475" pos:column="41">am_path<pos:position pos:line="475" pos:column="48"/></name><argument_list pos:line="475" pos:column="48">(<argument><expr><name pos:line="475" pos:column="49">state<pos:position pos:line="475" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="475" pos:column="56">"rebasing"<pos:position pos:line="475" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="475" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="475" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="475" pos:column="69"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="477" pos:column="9">strbuf_release<pos:position pos:line="477" pos:column="23"/></name><argument_list pos:line="477" pos:column="23">(<argument><expr><operator pos:line="477" pos:column="24">&amp;<pos:position pos:line="477" pos:column="29"/></operator><name pos:line="477" pos:column="25">sb<pos:position pos:line="477" pos:column="27"/></name></expr></argument>)<pos:position pos:line="477" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="477" pos:column="29"/></expr_stmt>
}<pos:position pos:line="478" pos:column="2"/></block></function>

<comment type="block" pos:line="480" pos:column="1">/**
 * Removes the am_state directory, forcefully terminating the current am
 * session.
 */</comment>
<function><specifier pos:line="484" pos:column="1">static<pos:position pos:line="484" pos:column="7"/></specifier> <type><name pos:line="484" pos:column="8">void<pos:position pos:line="484" pos:column="12"/></name></type> <name pos:line="484" pos:column="13">am_destroy<pos:position pos:line="484" pos:column="23"/></name><parameter_list pos:line="484" pos:column="23">(<parameter><decl><type><specifier pos:line="484" pos:column="24">const<pos:position pos:line="484" pos:column="29"/></specifier> <name><name pos:line="484" pos:column="30">struct<pos:position pos:line="484" pos:column="36"/></name> <name pos:line="484" pos:column="37">am_state<pos:position pos:line="484" pos:column="45"/></name></name> <modifier pos:line="484" pos:column="46">*<pos:position pos:line="484" pos:column="47"/></modifier></type><name pos:line="484" pos:column="47">state<pos:position pos:line="484" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="484" pos:column="53"/></parameter_list>
<block pos:line="485" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="486" pos:column="9">struct<pos:position pos:line="486" pos:column="15"/></name> <name pos:line="486" pos:column="16">strbuf<pos:position pos:line="486" pos:column="22"/></name></name></type> <name pos:line="486" pos:column="23">sb<pos:position pos:line="486" pos:column="25"/></name> <init pos:line="486" pos:column="26">= <expr><name pos:line="486" pos:column="28">STRBUF_INIT<pos:position pos:line="486" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="486" pos:column="40"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="488" pos:column="9">strbuf_addstr<pos:position pos:line="488" pos:column="22"/></name><argument_list pos:line="488" pos:column="22">(<argument><expr><operator pos:line="488" pos:column="23">&amp;<pos:position pos:line="488" pos:column="28"/></operator><name pos:line="488" pos:column="24">sb<pos:position pos:line="488" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="488" pos:column="28">state<pos:position pos:line="488" pos:column="33"/></name><operator pos:line="488" pos:column="33">-&gt;<pos:position pos:line="488" pos:column="38"/></operator><name pos:line="488" pos:column="35">dir<pos:position pos:line="488" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="488" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="488" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="489" pos:column="9">remove_dir_recursively<pos:position pos:line="489" pos:column="31"/></name><argument_list pos:line="489" pos:column="31">(<argument><expr><operator pos:line="489" pos:column="32">&amp;<pos:position pos:line="489" pos:column="37"/></operator><name pos:line="489" pos:column="33">sb<pos:position pos:line="489" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="489" pos:column="37">0<pos:position pos:line="489" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="489" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="489" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="490" pos:column="9">strbuf_release<pos:position pos:line="490" pos:column="23"/></name><argument_list pos:line="490" pos:column="23">(<argument><expr><operator pos:line="490" pos:column="24">&amp;<pos:position pos:line="490" pos:column="29"/></operator><name pos:line="490" pos:column="25">sb<pos:position pos:line="490" pos:column="27"/></name></expr></argument>)<pos:position pos:line="490" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="490" pos:column="29"/></expr_stmt>
}<pos:position pos:line="491" pos:column="2"/></block></function>

<comment type="block" pos:line="493" pos:column="1">/**
 * Runs applypatch-msg hook. Returns its exit code.
 */</comment>
<function><specifier pos:line="496" pos:column="1">static<pos:position pos:line="496" pos:column="7"/></specifier> <type><name pos:line="496" pos:column="8">int<pos:position pos:line="496" pos:column="11"/></name></type> <name pos:line="496" pos:column="12">run_applypatch_msg_hook<pos:position pos:line="496" pos:column="35"/></name><parameter_list pos:line="496" pos:column="35">(<parameter><decl><type><name><name pos:line="496" pos:column="36">struct<pos:position pos:line="496" pos:column="42"/></name> <name pos:line="496" pos:column="43">am_state<pos:position pos:line="496" pos:column="51"/></name></name> <modifier pos:line="496" pos:column="52">*<pos:position pos:line="496" pos:column="53"/></modifier></type><name pos:line="496" pos:column="53">state<pos:position pos:line="496" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="496" pos:column="59"/></parameter_list>
<block pos:line="497" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="498" pos:column="9">int<pos:position pos:line="498" pos:column="12"/></name></type> <name pos:line="498" pos:column="13">ret<pos:position pos:line="498" pos:column="16"/></name></decl>;<pos:position pos:line="498" pos:column="17"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="500" pos:column="9">assert<pos:position pos:line="500" pos:column="15"/></name><argument_list pos:line="500" pos:column="15">(<argument><expr><name><name pos:line="500" pos:column="16">state<pos:position pos:line="500" pos:column="21"/></name><operator pos:line="500" pos:column="21">-&gt;<pos:position pos:line="500" pos:column="26"/></operator><name pos:line="500" pos:column="23">msg<pos:position pos:line="500" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="500" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="500" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="501" pos:column="9">ret<pos:position pos:line="501" pos:column="12"/></name> <operator pos:line="501" pos:column="13">=<pos:position pos:line="501" pos:column="14"/></operator> <call><name pos:line="501" pos:column="15">run_hook_le<pos:position pos:line="501" pos:column="26"/></name><argument_list pos:line="501" pos:column="26">(<argument><expr><name pos:line="501" pos:column="27">NULL<pos:position pos:line="501" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="501" pos:column="33">"applypatch-msg"<pos:position pos:line="501" pos:column="49"/></literal></expr></argument>, <argument><expr><call><name pos:line="501" pos:column="51">am_path<pos:position pos:line="501" pos:column="58"/></name><argument_list pos:line="501" pos:column="58">(<argument><expr><name pos:line="501" pos:column="59">state<pos:position pos:line="501" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="501" pos:column="66">"final-commit"<pos:position pos:line="501" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="501" pos:column="81"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="501" pos:column="83">NULL<pos:position pos:line="501" pos:column="87"/></name></expr></argument>)<pos:position pos:line="501" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="501" pos:column="89"/></expr_stmt>

	<if pos:line="503" pos:column="9">if <condition pos:line="503" pos:column="12">(<expr><operator pos:line="503" pos:column="13">!<pos:position pos:line="503" pos:column="14"/></operator><name pos:line="503" pos:column="14">ret<pos:position pos:line="503" pos:column="17"/></name></expr>)<pos:position pos:line="503" pos:column="18"/></condition><then pos:line="503" pos:column="18"> <block pos:line="503" pos:column="19">{
		<expr_stmt><expr><call><name pos:line="504" pos:column="17">free<pos:position pos:line="504" pos:column="21"/></name><argument_list pos:line="504" pos:column="21">(<argument><expr><name><name pos:line="504" pos:column="22">state<pos:position pos:line="504" pos:column="27"/></name><operator pos:line="504" pos:column="27">-&gt;<pos:position pos:line="504" pos:column="32"/></operator><name pos:line="504" pos:column="29">msg<pos:position pos:line="504" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="504" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="504" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="505" pos:column="17">state<pos:position pos:line="505" pos:column="22"/></name><operator pos:line="505" pos:column="22">-&gt;<pos:position pos:line="505" pos:column="27"/></operator><name pos:line="505" pos:column="24">msg<pos:position pos:line="505" pos:column="27"/></name></name> <operator pos:line="505" pos:column="28">=<pos:position pos:line="505" pos:column="29"/></operator> <name pos:line="505" pos:column="30">NULL<pos:position pos:line="505" pos:column="34"/></name></expr>;<pos:position pos:line="505" pos:column="35"/></expr_stmt>
		<if pos:line="506" pos:column="17">if <condition pos:line="506" pos:column="20">(<expr><call><name pos:line="506" pos:column="21">read_commit_msg<pos:position pos:line="506" pos:column="36"/></name><argument_list pos:line="506" pos:column="36">(<argument><expr><name pos:line="506" pos:column="37">state<pos:position pos:line="506" pos:column="42"/></name></expr></argument>)<pos:position pos:line="506" pos:column="43"/></argument_list></call> <operator pos:line="506" pos:column="44">&lt;<pos:position pos:line="506" pos:column="48"/></operator> <literal type="number" pos:line="506" pos:column="46">0<pos:position pos:line="506" pos:column="47"/></literal></expr>)<pos:position pos:line="506" pos:column="48"/></condition><then pos:line="506" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="507" pos:column="25">die<pos:position pos:line="507" pos:column="28"/></name><argument_list pos:line="507" pos:column="28">(<argument><expr><call><name pos:line="507" pos:column="29">_<pos:position pos:line="507" pos:column="30"/></name><argument_list pos:line="507" pos:column="30">(<argument><expr><literal type="string" pos:line="507" pos:column="31">"'%s' was deleted by the applypatch-msg hook"<pos:position pos:line="507" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="507" pos:column="77"/></argument_list></call></expr></argument>,
				<argument><expr><call><name pos:line="508" pos:column="33">am_path<pos:position pos:line="508" pos:column="40"/></name><argument_list pos:line="508" pos:column="40">(<argument><expr><name pos:line="508" pos:column="41">state<pos:position pos:line="508" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="508" pos:column="48">"final-commit"<pos:position pos:line="508" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="508" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="508" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="508" pos:column="65"/></expr_stmt></block></then></if>
	}<pos:position pos:line="509" pos:column="10"/></block></then></if>

	<return pos:line="511" pos:column="9">return <expr><name pos:line="511" pos:column="16">ret<pos:position pos:line="511" pos:column="19"/></name></expr>;<pos:position pos:line="511" pos:column="20"/></return>
}<pos:position pos:line="512" pos:column="2"/></block></function>

<comment type="block" pos:line="514" pos:column="1">/**
 * Runs post-rewrite hook. Returns it exit code.
 */</comment>
<function><specifier pos:line="517" pos:column="1">static<pos:position pos:line="517" pos:column="7"/></specifier> <type><name pos:line="517" pos:column="8">int<pos:position pos:line="517" pos:column="11"/></name></type> <name pos:line="517" pos:column="12">run_post_rewrite_hook<pos:position pos:line="517" pos:column="33"/></name><parameter_list pos:line="517" pos:column="33">(<parameter><decl><type><specifier pos:line="517" pos:column="34">const<pos:position pos:line="517" pos:column="39"/></specifier> <name><name pos:line="517" pos:column="40">struct<pos:position pos:line="517" pos:column="46"/></name> <name pos:line="517" pos:column="47">am_state<pos:position pos:line="517" pos:column="55"/></name></name> <modifier pos:line="517" pos:column="56">*<pos:position pos:line="517" pos:column="57"/></modifier></type><name pos:line="517" pos:column="57">state<pos:position pos:line="517" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="517" pos:column="63"/></parameter_list>
<block pos:line="518" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="519" pos:column="9">struct<pos:position pos:line="519" pos:column="15"/></name> <name pos:line="519" pos:column="16">child_process<pos:position pos:line="519" pos:column="29"/></name></name></type> <name pos:line="519" pos:column="30">cp<pos:position pos:line="519" pos:column="32"/></name> <init pos:line="519" pos:column="33">= <expr><name pos:line="519" pos:column="35">CHILD_PROCESS_INIT<pos:position pos:line="519" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="519" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="520" pos:column="9">const<pos:position pos:line="520" pos:column="14"/></specifier> <name pos:line="520" pos:column="15">char<pos:position pos:line="520" pos:column="19"/></name> <modifier pos:line="520" pos:column="20">*<pos:position pos:line="520" pos:column="21"/></modifier></type><name pos:line="520" pos:column="21">hook<pos:position pos:line="520" pos:column="25"/></name> <init pos:line="520" pos:column="26">= <expr><call><name pos:line="520" pos:column="28">find_hook<pos:position pos:line="520" pos:column="37"/></name><argument_list pos:line="520" pos:column="37">(<argument><expr><literal type="string" pos:line="520" pos:column="38">"post-rewrite"<pos:position pos:line="520" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="520" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="520" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="521" pos:column="9">int<pos:position pos:line="521" pos:column="12"/></name></type> <name pos:line="521" pos:column="13">ret<pos:position pos:line="521" pos:column="16"/></name></decl>;<pos:position pos:line="521" pos:column="17"/></decl_stmt>

	<if pos:line="523" pos:column="9">if <condition pos:line="523" pos:column="12">(<expr><operator pos:line="523" pos:column="13">!<pos:position pos:line="523" pos:column="14"/></operator><name pos:line="523" pos:column="14">hook<pos:position pos:line="523" pos:column="18"/></name></expr>)<pos:position pos:line="523" pos:column="19"/></condition><then pos:line="523" pos:column="19">
		<block type="pseudo"><return pos:line="524" pos:column="17">return <expr><literal type="number" pos:line="524" pos:column="24">0<pos:position pos:line="524" pos:column="25"/></literal></expr>;<pos:position pos:line="524" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="526" pos:column="9">argv_array_push<pos:position pos:line="526" pos:column="24"/></name><argument_list pos:line="526" pos:column="24">(<argument><expr><operator pos:line="526" pos:column="25">&amp;<pos:position pos:line="526" pos:column="30"/></operator><name><name pos:line="526" pos:column="26">cp<pos:position pos:line="526" pos:column="28"/></name><operator pos:line="526" pos:column="28">.<pos:position pos:line="526" pos:column="29"/></operator><name pos:line="526" pos:column="29">args<pos:position pos:line="526" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="526" pos:column="35">hook<pos:position pos:line="526" pos:column="39"/></name></expr></argument>)<pos:position pos:line="526" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="526" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="527" pos:column="9">argv_array_push<pos:position pos:line="527" pos:column="24"/></name><argument_list pos:line="527" pos:column="24">(<argument><expr><operator pos:line="527" pos:column="25">&amp;<pos:position pos:line="527" pos:column="30"/></operator><name><name pos:line="527" pos:column="26">cp<pos:position pos:line="527" pos:column="28"/></name><operator pos:line="527" pos:column="28">.<pos:position pos:line="527" pos:column="29"/></operator><name pos:line="527" pos:column="29">args<pos:position pos:line="527" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="527" pos:column="35">"rebase"<pos:position pos:line="527" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="527" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="527" pos:column="45"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="529" pos:column="9">cp<pos:position pos:line="529" pos:column="11"/></name><operator pos:line="529" pos:column="11">.<pos:position pos:line="529" pos:column="12"/></operator><name pos:line="529" pos:column="12">in<pos:position pos:line="529" pos:column="14"/></name></name> <operator pos:line="529" pos:column="15">=<pos:position pos:line="529" pos:column="16"/></operator> <call><name pos:line="529" pos:column="17">xopen<pos:position pos:line="529" pos:column="22"/></name><argument_list pos:line="529" pos:column="22">(<argument><expr><call><name pos:line="529" pos:column="23">am_path<pos:position pos:line="529" pos:column="30"/></name><argument_list pos:line="529" pos:column="30">(<argument><expr><name pos:line="529" pos:column="31">state<pos:position pos:line="529" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="529" pos:column="38">"rewritten"<pos:position pos:line="529" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="529" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="529" pos:column="52">O_RDONLY<pos:position pos:line="529" pos:column="60"/></name></expr></argument>)<pos:position pos:line="529" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="529" pos:column="62"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="530" pos:column="9">cp<pos:position pos:line="530" pos:column="11"/></name><operator pos:line="530" pos:column="11">.<pos:position pos:line="530" pos:column="12"/></operator><name pos:line="530" pos:column="12">stdout_to_stderr<pos:position pos:line="530" pos:column="28"/></name></name> <operator pos:line="530" pos:column="29">=<pos:position pos:line="530" pos:column="30"/></operator> <literal type="number" pos:line="530" pos:column="31">1<pos:position pos:line="530" pos:column="32"/></literal></expr>;<pos:position pos:line="530" pos:column="33"/></expr_stmt>

	<expr_stmt><expr><name pos:line="532" pos:column="9">ret<pos:position pos:line="532" pos:column="12"/></name> <operator pos:line="532" pos:column="13">=<pos:position pos:line="532" pos:column="14"/></operator> <call><name pos:line="532" pos:column="15">run_command<pos:position pos:line="532" pos:column="26"/></name><argument_list pos:line="532" pos:column="26">(<argument><expr><operator pos:line="532" pos:column="27">&amp;<pos:position pos:line="532" pos:column="32"/></operator><name pos:line="532" pos:column="28">cp<pos:position pos:line="532" pos:column="30"/></name></expr></argument>)<pos:position pos:line="532" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="532" pos:column="32"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="534" pos:column="9">close<pos:position pos:line="534" pos:column="14"/></name><argument_list pos:line="534" pos:column="14">(<argument><expr><name><name pos:line="534" pos:column="15">cp<pos:position pos:line="534" pos:column="17"/></name><operator pos:line="534" pos:column="17">.<pos:position pos:line="534" pos:column="18"/></operator><name pos:line="534" pos:column="18">in<pos:position pos:line="534" pos:column="20"/></name></name></expr></argument>)<pos:position pos:line="534" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="534" pos:column="22"/></expr_stmt>
	<return pos:line="535" pos:column="9">return <expr><name pos:line="535" pos:column="16">ret<pos:position pos:line="535" pos:column="19"/></name></expr>;<pos:position pos:line="535" pos:column="20"/></return>
}<pos:position pos:line="536" pos:column="2"/></block></function>

<comment type="block" pos:line="538" pos:column="1">/**
 * Reads the state directory's "rewritten" file, and copies notes from the old
 * commits listed in the file to their rewritten commits.
 *
 * Returns 0 on success, -1 on failure.
 */</comment>
<function><specifier pos:line="544" pos:column="1">static<pos:position pos:line="544" pos:column="7"/></specifier> <type><name pos:line="544" pos:column="8">int<pos:position pos:line="544" pos:column="11"/></name></type> <name pos:line="544" pos:column="12">copy_notes_for_rebase<pos:position pos:line="544" pos:column="33"/></name><parameter_list pos:line="544" pos:column="33">(<parameter><decl><type><specifier pos:line="544" pos:column="34">const<pos:position pos:line="544" pos:column="39"/></specifier> <name><name pos:line="544" pos:column="40">struct<pos:position pos:line="544" pos:column="46"/></name> <name pos:line="544" pos:column="47">am_state<pos:position pos:line="544" pos:column="55"/></name></name> <modifier pos:line="544" pos:column="56">*<pos:position pos:line="544" pos:column="57"/></modifier></type><name pos:line="544" pos:column="57">state<pos:position pos:line="544" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="544" pos:column="63"/></parameter_list>
<block pos:line="545" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="546" pos:column="9">struct<pos:position pos:line="546" pos:column="15"/></name> <name pos:line="546" pos:column="16">notes_rewrite_cfg<pos:position pos:line="546" pos:column="33"/></name></name> <modifier pos:line="546" pos:column="34">*<pos:position pos:line="546" pos:column="35"/></modifier></type><name pos:line="546" pos:column="35">c<pos:position pos:line="546" pos:column="36"/></name></decl>;<pos:position pos:line="546" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="547" pos:column="9">struct<pos:position pos:line="547" pos:column="15"/></name> <name pos:line="547" pos:column="16">strbuf<pos:position pos:line="547" pos:column="22"/></name></name></type> <name pos:line="547" pos:column="23">sb<pos:position pos:line="547" pos:column="25"/></name> <init pos:line="547" pos:column="26">= <expr><name pos:line="547" pos:column="28">STRBUF_INIT<pos:position pos:line="547" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="547" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="548" pos:column="9">const<pos:position pos:line="548" pos:column="14"/></specifier> <name pos:line="548" pos:column="15">char<pos:position pos:line="548" pos:column="19"/></name> <modifier pos:line="548" pos:column="20">*<pos:position pos:line="548" pos:column="21"/></modifier></type><name pos:line="548" pos:column="21">invalid_line<pos:position pos:line="548" pos:column="33"/></name> <init pos:line="548" pos:column="34">= <expr><call><name pos:line="548" pos:column="36">_<pos:position pos:line="548" pos:column="37"/></name><argument_list pos:line="548" pos:column="37">(<argument><expr><literal type="string" pos:line="548" pos:column="38">"Malformed input line: '%s'."<pos:position pos:line="548" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="548" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="548" pos:column="69"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="549" pos:column="9">const<pos:position pos:line="549" pos:column="14"/></specifier> <name pos:line="549" pos:column="15">char<pos:position pos:line="549" pos:column="19"/></name> <modifier pos:line="549" pos:column="20">*<pos:position pos:line="549" pos:column="21"/></modifier></type><name pos:line="549" pos:column="21">msg<pos:position pos:line="549" pos:column="24"/></name> <init pos:line="549" pos:column="25">= <expr><literal type="string" pos:line="549" pos:column="27">"Notes added by 'git rebase'"<pos:position pos:line="549" pos:column="56"/></literal></expr></init></decl>;<pos:position pos:line="549" pos:column="57"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="550" pos:column="9">FILE<pos:position pos:line="550" pos:column="13"/></name> <modifier pos:line="550" pos:column="14">*<pos:position pos:line="550" pos:column="15"/></modifier></type><name pos:line="550" pos:column="15">fp<pos:position pos:line="550" pos:column="17"/></name></decl>;<pos:position pos:line="550" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="551" pos:column="9">int<pos:position pos:line="551" pos:column="12"/></name></type> <name pos:line="551" pos:column="13">ret<pos:position pos:line="551" pos:column="16"/></name> <init pos:line="551" pos:column="17">= <expr><literal type="number" pos:line="551" pos:column="19">0<pos:position pos:line="551" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="551" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="553" pos:column="9">assert<pos:position pos:line="553" pos:column="15"/></name><argument_list pos:line="553" pos:column="15">(<argument><expr><name><name pos:line="553" pos:column="16">state<pos:position pos:line="553" pos:column="21"/></name><operator pos:line="553" pos:column="21">-&gt;<pos:position pos:line="553" pos:column="26"/></operator><name pos:line="553" pos:column="23">rebasing<pos:position pos:line="553" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="553" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="553" pos:column="33"/></expr_stmt>

	<expr_stmt><expr><name pos:line="555" pos:column="9">c<pos:position pos:line="555" pos:column="10"/></name> <operator pos:line="555" pos:column="11">=<pos:position pos:line="555" pos:column="12"/></operator> <call><name pos:line="555" pos:column="13">init_copy_notes_for_rewrite<pos:position pos:line="555" pos:column="40"/></name><argument_list pos:line="555" pos:column="40">(<argument><expr><literal type="string" pos:line="555" pos:column="41">"rebase"<pos:position pos:line="555" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="555" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="555" pos:column="51"/></expr_stmt>
	<if pos:line="556" pos:column="9">if <condition pos:line="556" pos:column="12">(<expr><operator pos:line="556" pos:column="13">!<pos:position pos:line="556" pos:column="14"/></operator><name pos:line="556" pos:column="14">c<pos:position pos:line="556" pos:column="15"/></name></expr>)<pos:position pos:line="556" pos:column="16"/></condition><then pos:line="556" pos:column="16">
		<block type="pseudo"><return pos:line="557" pos:column="17">return <expr><literal type="number" pos:line="557" pos:column="24">0<pos:position pos:line="557" pos:column="25"/></literal></expr>;<pos:position pos:line="557" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="559" pos:column="9">fp<pos:position pos:line="559" pos:column="11"/></name> <operator pos:line="559" pos:column="12">=<pos:position pos:line="559" pos:column="13"/></operator> <call><name pos:line="559" pos:column="14">xfopen<pos:position pos:line="559" pos:column="20"/></name><argument_list pos:line="559" pos:column="20">(<argument><expr><call><name pos:line="559" pos:column="21">am_path<pos:position pos:line="559" pos:column="28"/></name><argument_list pos:line="559" pos:column="28">(<argument><expr><name pos:line="559" pos:column="29">state<pos:position pos:line="559" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="559" pos:column="36">"rewritten"<pos:position pos:line="559" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="559" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="559" pos:column="50">"r"<pos:position pos:line="559" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="559" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="559" pos:column="55"/></expr_stmt>

	<while pos:line="561" pos:column="9">while <condition pos:line="561" pos:column="15">(<expr><operator pos:line="561" pos:column="16">!<pos:position pos:line="561" pos:column="17"/></operator><call><name pos:line="561" pos:column="17">strbuf_getline_lf<pos:position pos:line="561" pos:column="34"/></name><argument_list pos:line="561" pos:column="34">(<argument><expr><operator pos:line="561" pos:column="35">&amp;<pos:position pos:line="561" pos:column="40"/></operator><name pos:line="561" pos:column="36">sb<pos:position pos:line="561" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="561" pos:column="40">fp<pos:position pos:line="561" pos:column="42"/></name></expr></argument>)<pos:position pos:line="561" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="561" pos:column="44"/></condition> <block pos:line="561" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="562" pos:column="17">unsigned<pos:position pos:line="562" pos:column="25"/></name> <name pos:line="562" pos:column="26">char<pos:position pos:line="562" pos:column="30"/></name></type> <name><name pos:line="562" pos:column="31">from_obj<pos:position pos:line="562" pos:column="39"/></name><index pos:line="562" pos:column="39">[<expr><name pos:line="562" pos:column="40">GIT_SHA1_RAWSZ<pos:position pos:line="562" pos:column="54"/></name></expr>]<pos:position pos:line="562" pos:column="55"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="562" pos:column="57">to_obj<pos:position pos:line="562" pos:column="63"/></name><index pos:line="562" pos:column="63">[<expr><name pos:line="562" pos:column="64">GIT_SHA1_RAWSZ<pos:position pos:line="562" pos:column="78"/></name></expr>]<pos:position pos:line="562" pos:column="79"/></index></name></decl>;<pos:position pos:line="562" pos:column="80"/></decl_stmt>

		<if pos:line="564" pos:column="17">if <condition pos:line="564" pos:column="20">(<expr><name><name pos:line="564" pos:column="21">sb<pos:position pos:line="564" pos:column="23"/></name><operator pos:line="564" pos:column="23">.<pos:position pos:line="564" pos:column="24"/></operator><name pos:line="564" pos:column="24">len<pos:position pos:line="564" pos:column="27"/></name></name> <operator pos:line="564" pos:column="28">!=<pos:position pos:line="564" pos:column="30"/></operator> <name pos:line="564" pos:column="31">GIT_SHA1_HEXSZ<pos:position pos:line="564" pos:column="45"/></name> <operator pos:line="564" pos:column="46">*<pos:position pos:line="564" pos:column="47"/></operator> <literal type="number" pos:line="564" pos:column="48">2<pos:position pos:line="564" pos:column="49"/></literal> <operator pos:line="564" pos:column="50">+<pos:position pos:line="564" pos:column="51"/></operator> <literal type="number" pos:line="564" pos:column="52">1<pos:position pos:line="564" pos:column="53"/></literal></expr>)<pos:position pos:line="564" pos:column="54"/></condition><then pos:line="564" pos:column="54"> <block pos:line="564" pos:column="55">{
			<expr_stmt><expr><name pos:line="565" pos:column="25">ret<pos:position pos:line="565" pos:column="28"/></name> <operator pos:line="565" pos:column="29">=<pos:position pos:line="565" pos:column="30"/></operator> <call><name pos:line="565" pos:column="31">error<pos:position pos:line="565" pos:column="36"/></name><argument_list pos:line="565" pos:column="36">(<argument><expr><name pos:line="565" pos:column="37">invalid_line<pos:position pos:line="565" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="565" pos:column="51">sb<pos:position pos:line="565" pos:column="53"/></name><operator pos:line="565" pos:column="53">.<pos:position pos:line="565" pos:column="54"/></operator><name pos:line="565" pos:column="54">buf<pos:position pos:line="565" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="565" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="565" pos:column="59"/></expr_stmt>
			<goto pos:line="566" pos:column="25">goto <name pos:line="566" pos:column="30">finish<pos:position pos:line="566" pos:column="36"/></name>;<pos:position pos:line="566" pos:column="37"/></goto>
		}<pos:position pos:line="567" pos:column="18"/></block></then></if>

		<if pos:line="569" pos:column="17">if <condition pos:line="569" pos:column="20">(<expr><call><name pos:line="569" pos:column="21">get_sha1_hex<pos:position pos:line="569" pos:column="33"/></name><argument_list pos:line="569" pos:column="33">(<argument><expr><name><name pos:line="569" pos:column="34">sb<pos:position pos:line="569" pos:column="36"/></name><operator pos:line="569" pos:column="36">.<pos:position pos:line="569" pos:column="37"/></operator><name pos:line="569" pos:column="37">buf<pos:position pos:line="569" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="569" pos:column="42">from_obj<pos:position pos:line="569" pos:column="50"/></name></expr></argument>)<pos:position pos:line="569" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="569" pos:column="52"/></condition><then pos:line="569" pos:column="52"> <block pos:line="569" pos:column="53">{
			<expr_stmt><expr><name pos:line="570" pos:column="25">ret<pos:position pos:line="570" pos:column="28"/></name> <operator pos:line="570" pos:column="29">=<pos:position pos:line="570" pos:column="30"/></operator> <call><name pos:line="570" pos:column="31">error<pos:position pos:line="570" pos:column="36"/></name><argument_list pos:line="570" pos:column="36">(<argument><expr><name pos:line="570" pos:column="37">invalid_line<pos:position pos:line="570" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="570" pos:column="51">sb<pos:position pos:line="570" pos:column="53"/></name><operator pos:line="570" pos:column="53">.<pos:position pos:line="570" pos:column="54"/></operator><name pos:line="570" pos:column="54">buf<pos:position pos:line="570" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="570" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="570" pos:column="59"/></expr_stmt>
			<goto pos:line="571" pos:column="25">goto <name pos:line="571" pos:column="30">finish<pos:position pos:line="571" pos:column="36"/></name>;<pos:position pos:line="571" pos:column="37"/></goto>
		}<pos:position pos:line="572" pos:column="18"/></block></then></if>

		<if pos:line="574" pos:column="17">if <condition pos:line="574" pos:column="20">(<expr><name><name pos:line="574" pos:column="21">sb<pos:position pos:line="574" pos:column="23"/></name><operator pos:line="574" pos:column="23">.<pos:position pos:line="574" pos:column="24"/></operator><name pos:line="574" pos:column="24">buf<pos:position pos:line="574" pos:column="27"/></name><index pos:line="574" pos:column="27">[<expr><name pos:line="574" pos:column="28">GIT_SHA1_HEXSZ<pos:position pos:line="574" pos:column="42"/></name></expr>]<pos:position pos:line="574" pos:column="43"/></index></name> <operator pos:line="574" pos:column="44">!=<pos:position pos:line="574" pos:column="46"/></operator> <literal type="char" pos:line="574" pos:column="47">' '<pos:position pos:line="574" pos:column="50"/></literal></expr>)<pos:position pos:line="574" pos:column="51"/></condition><then pos:line="574" pos:column="51"> <block pos:line="574" pos:column="52">{
			<expr_stmt><expr><name pos:line="575" pos:column="25">ret<pos:position pos:line="575" pos:column="28"/></name> <operator pos:line="575" pos:column="29">=<pos:position pos:line="575" pos:column="30"/></operator> <call><name pos:line="575" pos:column="31">error<pos:position pos:line="575" pos:column="36"/></name><argument_list pos:line="575" pos:column="36">(<argument><expr><name pos:line="575" pos:column="37">invalid_line<pos:position pos:line="575" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="575" pos:column="51">sb<pos:position pos:line="575" pos:column="53"/></name><operator pos:line="575" pos:column="53">.<pos:position pos:line="575" pos:column="54"/></operator><name pos:line="575" pos:column="54">buf<pos:position pos:line="575" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="575" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="575" pos:column="59"/></expr_stmt>
			<goto pos:line="576" pos:column="25">goto <name pos:line="576" pos:column="30">finish<pos:position pos:line="576" pos:column="36"/></name>;<pos:position pos:line="576" pos:column="37"/></goto>
		}<pos:position pos:line="577" pos:column="18"/></block></then></if>

		<if pos:line="579" pos:column="17">if <condition pos:line="579" pos:column="20">(<expr><call><name pos:line="579" pos:column="21">get_sha1_hex<pos:position pos:line="579" pos:column="33"/></name><argument_list pos:line="579" pos:column="33">(<argument><expr><name><name pos:line="579" pos:column="34">sb<pos:position pos:line="579" pos:column="36"/></name><operator pos:line="579" pos:column="36">.<pos:position pos:line="579" pos:column="37"/></operator><name pos:line="579" pos:column="37">buf<pos:position pos:line="579" pos:column="40"/></name></name> <operator pos:line="579" pos:column="41">+<pos:position pos:line="579" pos:column="42"/></operator> <name pos:line="579" pos:column="43">GIT_SHA1_HEXSZ<pos:position pos:line="579" pos:column="57"/></name> <operator pos:line="579" pos:column="58">+<pos:position pos:line="579" pos:column="59"/></operator> <literal type="number" pos:line="579" pos:column="60">1<pos:position pos:line="579" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="579" pos:column="63">to_obj<pos:position pos:line="579" pos:column="69"/></name></expr></argument>)<pos:position pos:line="579" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="579" pos:column="71"/></condition><then pos:line="579" pos:column="71"> <block pos:line="579" pos:column="72">{
			<expr_stmt><expr><name pos:line="580" pos:column="25">ret<pos:position pos:line="580" pos:column="28"/></name> <operator pos:line="580" pos:column="29">=<pos:position pos:line="580" pos:column="30"/></operator> <call><name pos:line="580" pos:column="31">error<pos:position pos:line="580" pos:column="36"/></name><argument_list pos:line="580" pos:column="36">(<argument><expr><name pos:line="580" pos:column="37">invalid_line<pos:position pos:line="580" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="580" pos:column="51">sb<pos:position pos:line="580" pos:column="53"/></name><operator pos:line="580" pos:column="53">.<pos:position pos:line="580" pos:column="54"/></operator><name pos:line="580" pos:column="54">buf<pos:position pos:line="580" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="580" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="580" pos:column="59"/></expr_stmt>
			<goto pos:line="581" pos:column="25">goto <name pos:line="581" pos:column="30">finish<pos:position pos:line="581" pos:column="36"/></name>;<pos:position pos:line="581" pos:column="37"/></goto>
		}<pos:position pos:line="582" pos:column="18"/></block></then></if>

		<if pos:line="584" pos:column="17">if <condition pos:line="584" pos:column="20">(<expr><call><name pos:line="584" pos:column="21">copy_note_for_rewrite<pos:position pos:line="584" pos:column="42"/></name><argument_list pos:line="584" pos:column="42">(<argument><expr><name pos:line="584" pos:column="43">c<pos:position pos:line="584" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="584" pos:column="46">from_obj<pos:position pos:line="584" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="584" pos:column="56">to_obj<pos:position pos:line="584" pos:column="62"/></name></expr></argument>)<pos:position pos:line="584" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="584" pos:column="64"/></condition><then pos:line="584" pos:column="64">
			<block type="pseudo"><expr_stmt><expr><name pos:line="585" pos:column="25">ret<pos:position pos:line="585" pos:column="28"/></name> <operator pos:line="585" pos:column="29">=<pos:position pos:line="585" pos:column="30"/></operator> <call><name pos:line="585" pos:column="31">error<pos:position pos:line="585" pos:column="36"/></name><argument_list pos:line="585" pos:column="36">(<argument><expr><call><name pos:line="585" pos:column="37">_<pos:position pos:line="585" pos:column="38"/></name><argument_list pos:line="585" pos:column="38">(<argument><expr><literal type="string" pos:line="585" pos:column="39">"Failed to copy notes from '%s' to '%s'"<pos:position pos:line="585" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="585" pos:column="80"/></argument_list></call></expr></argument>,
					<argument><expr><call><name pos:line="586" pos:column="41">sha1_to_hex<pos:position pos:line="586" pos:column="52"/></name><argument_list pos:line="586" pos:column="52">(<argument><expr><name pos:line="586" pos:column="53">from_obj<pos:position pos:line="586" pos:column="61"/></name></expr></argument>)<pos:position pos:line="586" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="586" pos:column="64">sha1_to_hex<pos:position pos:line="586" pos:column="75"/></name><argument_list pos:line="586" pos:column="75">(<argument><expr><name pos:line="586" pos:column="76">to_obj<pos:position pos:line="586" pos:column="82"/></name></expr></argument>)<pos:position pos:line="586" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="586" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="586" pos:column="85"/></expr_stmt></block></then></if>
	}<pos:position pos:line="587" pos:column="10"/></block></while>

<label><name pos:line="589" pos:column="1">finish<pos:position pos:line="589" pos:column="7"/></name>:<pos:position pos:line="589" pos:column="8"/></label>
	<expr_stmt><expr><call><name pos:line="590" pos:column="9">finish_copy_notes_for_rewrite<pos:position pos:line="590" pos:column="38"/></name><argument_list pos:line="590" pos:column="38">(<argument><expr><name pos:line="590" pos:column="39">c<pos:position pos:line="590" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="590" pos:column="42">msg<pos:position pos:line="590" pos:column="45"/></name></expr></argument>)<pos:position pos:line="590" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="590" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="591" pos:column="9">fclose<pos:position pos:line="591" pos:column="15"/></name><argument_list pos:line="591" pos:column="15">(<argument><expr><name pos:line="591" pos:column="16">fp<pos:position pos:line="591" pos:column="18"/></name></expr></argument>)<pos:position pos:line="591" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="591" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="592" pos:column="9">strbuf_release<pos:position pos:line="592" pos:column="23"/></name><argument_list pos:line="592" pos:column="23">(<argument><expr><operator pos:line="592" pos:column="24">&amp;<pos:position pos:line="592" pos:column="29"/></operator><name pos:line="592" pos:column="25">sb<pos:position pos:line="592" pos:column="27"/></name></expr></argument>)<pos:position pos:line="592" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="592" pos:column="29"/></expr_stmt>
	<return pos:line="593" pos:column="9">return <expr><name pos:line="593" pos:column="16">ret<pos:position pos:line="593" pos:column="19"/></name></expr>;<pos:position pos:line="593" pos:column="20"/></return>
}<pos:position pos:line="594" pos:column="2"/></block></function>

<comment type="block" pos:line="596" pos:column="1">/**
 * Determines if the file looks like a piece of RFC2822 mail by grabbing all
 * non-indented lines and checking if they look like they begin with valid
 * header field names.
 *
 * Returns 1 if the file looks like a piece of mail, 0 otherwise.
 */</comment>
<function><specifier pos:line="603" pos:column="1">static<pos:position pos:line="603" pos:column="7"/></specifier> <type><name pos:line="603" pos:column="8">int<pos:position pos:line="603" pos:column="11"/></name></type> <name pos:line="603" pos:column="12">is_mail<pos:position pos:line="603" pos:column="19"/></name><parameter_list pos:line="603" pos:column="19">(<parameter><decl><type><name pos:line="603" pos:column="20">FILE<pos:position pos:line="603" pos:column="24"/></name> <modifier pos:line="603" pos:column="25">*<pos:position pos:line="603" pos:column="26"/></modifier></type><name pos:line="603" pos:column="26">fp<pos:position pos:line="603" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="603" pos:column="29"/></parameter_list>
<block pos:line="604" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="605" pos:column="9">const<pos:position pos:line="605" pos:column="14"/></specifier> <name pos:line="605" pos:column="15">char<pos:position pos:line="605" pos:column="19"/></name> <modifier pos:line="605" pos:column="20">*<pos:position pos:line="605" pos:column="21"/></modifier></type><name pos:line="605" pos:column="21">header_regex<pos:position pos:line="605" pos:column="33"/></name> <init pos:line="605" pos:column="34">= <expr><literal type="string" pos:line="605" pos:column="36">"^[!-9;-~]+:"<pos:position pos:line="605" pos:column="49"/></literal></expr></init></decl>;<pos:position pos:line="605" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="606" pos:column="9">struct<pos:position pos:line="606" pos:column="15"/></name> <name pos:line="606" pos:column="16">strbuf<pos:position pos:line="606" pos:column="22"/></name></name></type> <name pos:line="606" pos:column="23">sb<pos:position pos:line="606" pos:column="25"/></name> <init pos:line="606" pos:column="26">= <expr><name pos:line="606" pos:column="28">STRBUF_INIT<pos:position pos:line="606" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="606" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="607" pos:column="9">regex_t<pos:position pos:line="607" pos:column="16"/></name></type> <name pos:line="607" pos:column="17">regex<pos:position pos:line="607" pos:column="22"/></name></decl>;<pos:position pos:line="607" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="608" pos:column="9">int<pos:position pos:line="608" pos:column="12"/></name></type> <name pos:line="608" pos:column="13">ret<pos:position pos:line="608" pos:column="16"/></name> <init pos:line="608" pos:column="17">= <expr><literal type="number" pos:line="608" pos:column="19">1<pos:position pos:line="608" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="608" pos:column="21"/></decl_stmt>

	<if pos:line="610" pos:column="9">if <condition pos:line="610" pos:column="12">(<expr><call><name pos:line="610" pos:column="13">fseek<pos:position pos:line="610" pos:column="18"/></name><argument_list pos:line="610" pos:column="18">(<argument><expr><name pos:line="610" pos:column="19">fp<pos:position pos:line="610" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="610" pos:column="23">0L<pos:position pos:line="610" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="610" pos:column="27">SEEK_SET<pos:position pos:line="610" pos:column="35"/></name></expr></argument>)<pos:position pos:line="610" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="610" pos:column="37"/></condition><then pos:line="610" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="611" pos:column="17">die_errno<pos:position pos:line="611" pos:column="26"/></name><argument_list pos:line="611" pos:column="26">(<argument><expr><call><name pos:line="611" pos:column="27">_<pos:position pos:line="611" pos:column="28"/></name><argument_list pos:line="611" pos:column="28">(<argument><expr><literal type="string" pos:line="611" pos:column="29">"fseek failed"<pos:position pos:line="611" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="611" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="611" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="611" pos:column="46"/></expr_stmt></block></then></if>

	<if pos:line="613" pos:column="9">if <condition pos:line="613" pos:column="12">(<expr><call><name pos:line="613" pos:column="13">regcomp<pos:position pos:line="613" pos:column="20"/></name><argument_list pos:line="613" pos:column="20">(<argument><expr><operator pos:line="613" pos:column="21">&amp;<pos:position pos:line="613" pos:column="26"/></operator><name pos:line="613" pos:column="22">regex<pos:position pos:line="613" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="613" pos:column="29">header_regex<pos:position pos:line="613" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="613" pos:column="43">REG_NOSUB<pos:position pos:line="613" pos:column="52"/></name> <operator pos:line="613" pos:column="53">|<pos:position pos:line="613" pos:column="54"/></operator> <name pos:line="613" pos:column="55">REG_EXTENDED<pos:position pos:line="613" pos:column="67"/></name></expr></argument>)<pos:position pos:line="613" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="613" pos:column="69"/></condition><then pos:line="613" pos:column="69">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="614" pos:column="17">die<pos:position pos:line="614" pos:column="20"/></name><argument_list pos:line="614" pos:column="20">(<argument><expr><literal type="string" pos:line="614" pos:column="21">"invalid pattern: %s"<pos:position pos:line="614" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="614" pos:column="44">header_regex<pos:position pos:line="614" pos:column="56"/></name></expr></argument>)<pos:position pos:line="614" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="614" pos:column="58"/></expr_stmt></block></then></if>

	<while pos:line="616" pos:column="9">while <condition pos:line="616" pos:column="15">(<expr><operator pos:line="616" pos:column="16">!<pos:position pos:line="616" pos:column="17"/></operator><call><name pos:line="616" pos:column="17">strbuf_getline<pos:position pos:line="616" pos:column="31"/></name><argument_list pos:line="616" pos:column="31">(<argument><expr><operator pos:line="616" pos:column="32">&amp;<pos:position pos:line="616" pos:column="37"/></operator><name pos:line="616" pos:column="33">sb<pos:position pos:line="616" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="616" pos:column="37">fp<pos:position pos:line="616" pos:column="39"/></name></expr></argument>)<pos:position pos:line="616" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="616" pos:column="41"/></condition> <block pos:line="616" pos:column="42">{
		<if pos:line="617" pos:column="17">if <condition pos:line="617" pos:column="20">(<expr><operator pos:line="617" pos:column="21">!<pos:position pos:line="617" pos:column="22"/></operator><name><name pos:line="617" pos:column="22">sb<pos:position pos:line="617" pos:column="24"/></name><operator pos:line="617" pos:column="24">.<pos:position pos:line="617" pos:column="25"/></operator><name pos:line="617" pos:column="25">len<pos:position pos:line="617" pos:column="28"/></name></name></expr>)<pos:position pos:line="617" pos:column="29"/></condition><then pos:line="617" pos:column="29">
			<block type="pseudo"><break pos:line="618" pos:column="25">break;<pos:position pos:line="618" pos:column="31"/></break></block></then></if> <comment type="block" pos:line="618" pos:column="32">/* End of header */</comment>

		<comment type="block" pos:line="620" pos:column="17">/* Ignore indented folded lines */</comment>
		<if pos:line="621" pos:column="17">if <condition pos:line="621" pos:column="20">(<expr><operator pos:line="621" pos:column="21">*<pos:position pos:line="621" pos:column="22"/></operator><name><name pos:line="621" pos:column="22">sb<pos:position pos:line="621" pos:column="24"/></name><operator pos:line="621" pos:column="24">.<pos:position pos:line="621" pos:column="25"/></operator><name pos:line="621" pos:column="25">buf<pos:position pos:line="621" pos:column="28"/></name></name> <operator pos:line="621" pos:column="29">==<pos:position pos:line="621" pos:column="31"/></operator> <literal type="char" pos:line="621" pos:column="32">'\t'<pos:position pos:line="621" pos:column="36"/></literal> <operator pos:line="621" pos:column="37">||<pos:position pos:line="621" pos:column="39"/></operator> <operator pos:line="621" pos:column="40">*<pos:position pos:line="621" pos:column="41"/></operator><name><name pos:line="621" pos:column="41">sb<pos:position pos:line="621" pos:column="43"/></name><operator pos:line="621" pos:column="43">.<pos:position pos:line="621" pos:column="44"/></operator><name pos:line="621" pos:column="44">buf<pos:position pos:line="621" pos:column="47"/></name></name> <operator pos:line="621" pos:column="48">==<pos:position pos:line="621" pos:column="50"/></operator> <literal type="char" pos:line="621" pos:column="51">' '<pos:position pos:line="621" pos:column="54"/></literal></expr>)<pos:position pos:line="621" pos:column="55"/></condition><then pos:line="621" pos:column="55">
			<block type="pseudo"><continue pos:line="622" pos:column="25">continue;<pos:position pos:line="622" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="624" pos:column="17">/* It's a header if it matches header_regex */</comment>
		<if pos:line="625" pos:column="17">if <condition pos:line="625" pos:column="20">(<expr><call><name pos:line="625" pos:column="21">regexec<pos:position pos:line="625" pos:column="28"/></name><argument_list pos:line="625" pos:column="28">(<argument><expr><operator pos:line="625" pos:column="29">&amp;<pos:position pos:line="625" pos:column="34"/></operator><name pos:line="625" pos:column="30">regex<pos:position pos:line="625" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="625" pos:column="37">sb<pos:position pos:line="625" pos:column="39"/></name><operator pos:line="625" pos:column="39">.<pos:position pos:line="625" pos:column="40"/></operator><name pos:line="625" pos:column="40">buf<pos:position pos:line="625" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="625" pos:column="45">0<pos:position pos:line="625" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="625" pos:column="48">NULL<pos:position pos:line="625" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="625" pos:column="54">0<pos:position pos:line="625" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="625" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="625" pos:column="57"/></condition><then pos:line="625" pos:column="57"> <block pos:line="625" pos:column="58">{
			<expr_stmt><expr><name pos:line="626" pos:column="25">ret<pos:position pos:line="626" pos:column="28"/></name> <operator pos:line="626" pos:column="29">=<pos:position pos:line="626" pos:column="30"/></operator> <literal type="number" pos:line="626" pos:column="31">0<pos:position pos:line="626" pos:column="32"/></literal></expr>;<pos:position pos:line="626" pos:column="33"/></expr_stmt>
			<goto pos:line="627" pos:column="25">goto <name pos:line="627" pos:column="30">done<pos:position pos:line="627" pos:column="34"/></name>;<pos:position pos:line="627" pos:column="35"/></goto>
		}<pos:position pos:line="628" pos:column="18"/></block></then></if>
	}<pos:position pos:line="629" pos:column="10"/></block></while>

<label><name pos:line="631" pos:column="1">done<pos:position pos:line="631" pos:column="5"/></name>:<pos:position pos:line="631" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="632" pos:column="9">regfree<pos:position pos:line="632" pos:column="16"/></name><argument_list pos:line="632" pos:column="16">(<argument><expr><operator pos:line="632" pos:column="17">&amp;<pos:position pos:line="632" pos:column="22"/></operator><name pos:line="632" pos:column="18">regex<pos:position pos:line="632" pos:column="23"/></name></expr></argument>)<pos:position pos:line="632" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="632" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="633" pos:column="9">strbuf_release<pos:position pos:line="633" pos:column="23"/></name><argument_list pos:line="633" pos:column="23">(<argument><expr><operator pos:line="633" pos:column="24">&amp;<pos:position pos:line="633" pos:column="29"/></operator><name pos:line="633" pos:column="25">sb<pos:position pos:line="633" pos:column="27"/></name></expr></argument>)<pos:position pos:line="633" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="633" pos:column="29"/></expr_stmt>
	<return pos:line="634" pos:column="9">return <expr><name pos:line="634" pos:column="16">ret<pos:position pos:line="634" pos:column="19"/></name></expr>;<pos:position pos:line="634" pos:column="20"/></return>
}<pos:position pos:line="635" pos:column="2"/></block></function>

<comment type="block" pos:line="637" pos:column="1">/**
 * Attempts to detect the patch_format of the patches contained in `paths`,
 * returning the PATCH_FORMAT_* enum value. Returns PATCH_FORMAT_UNKNOWN if
 * detection fails.
 */</comment>
<function><specifier pos:line="642" pos:column="1">static<pos:position pos:line="642" pos:column="7"/></specifier> <type><name pos:line="642" pos:column="8">int<pos:position pos:line="642" pos:column="11"/></name></type> <name pos:line="642" pos:column="12">detect_patch_format<pos:position pos:line="642" pos:column="31"/></name><parameter_list pos:line="642" pos:column="31">(<parameter><decl><type><specifier pos:line="642" pos:column="32">const<pos:position pos:line="642" pos:column="37"/></specifier> <name pos:line="642" pos:column="38">char<pos:position pos:line="642" pos:column="42"/></name> <modifier pos:line="642" pos:column="43">*<pos:position pos:line="642" pos:column="44"/></modifier><modifier pos:line="642" pos:column="44">*<pos:position pos:line="642" pos:column="45"/></modifier></type><name pos:line="642" pos:column="45">paths<pos:position pos:line="642" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="642" pos:column="51"/></parameter_list>
<block pos:line="643" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="644" pos:column="9">enum<pos:position pos:line="644" pos:column="13"/></name> <name pos:line="644" pos:column="14">patch_format<pos:position pos:line="644" pos:column="26"/></name></name></type> <name pos:line="644" pos:column="27">ret<pos:position pos:line="644" pos:column="30"/></name> <init pos:line="644" pos:column="31">= <expr><name pos:line="644" pos:column="33">PATCH_FORMAT_UNKNOWN<pos:position pos:line="644" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="644" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="645" pos:column="9">struct<pos:position pos:line="645" pos:column="15"/></name> <name pos:line="645" pos:column="16">strbuf<pos:position pos:line="645" pos:column="22"/></name></name></type> <name pos:line="645" pos:column="23">l1<pos:position pos:line="645" pos:column="25"/></name> <init pos:line="645" pos:column="26">= <expr><name pos:line="645" pos:column="28">STRBUF_INIT<pos:position pos:line="645" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="645" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="646" pos:column="9">struct<pos:position pos:line="646" pos:column="15"/></name> <name pos:line="646" pos:column="16">strbuf<pos:position pos:line="646" pos:column="22"/></name></name></type> <name pos:line="646" pos:column="23">l2<pos:position pos:line="646" pos:column="25"/></name> <init pos:line="646" pos:column="26">= <expr><name pos:line="646" pos:column="28">STRBUF_INIT<pos:position pos:line="646" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="646" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="647" pos:column="9">struct<pos:position pos:line="647" pos:column="15"/></name> <name pos:line="647" pos:column="16">strbuf<pos:position pos:line="647" pos:column="22"/></name></name></type> <name pos:line="647" pos:column="23">l3<pos:position pos:line="647" pos:column="25"/></name> <init pos:line="647" pos:column="26">= <expr><name pos:line="647" pos:column="28">STRBUF_INIT<pos:position pos:line="647" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="647" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="648" pos:column="9">FILE<pos:position pos:line="648" pos:column="13"/></name> <modifier pos:line="648" pos:column="14">*<pos:position pos:line="648" pos:column="15"/></modifier></type><name pos:line="648" pos:column="15">fp<pos:position pos:line="648" pos:column="17"/></name></decl>;<pos:position pos:line="648" pos:column="18"/></decl_stmt>

	<comment type="block" pos:line="650" pos:column="9">/*
	 * We default to mbox format if input is from stdin and for directories
	 */</comment>
	<if pos:line="653" pos:column="9">if <condition pos:line="653" pos:column="12">(<expr><operator pos:line="653" pos:column="13">!<pos:position pos:line="653" pos:column="14"/></operator><operator pos:line="653" pos:column="14">*<pos:position pos:line="653" pos:column="15"/></operator><name pos:line="653" pos:column="15">paths<pos:position pos:line="653" pos:column="20"/></name> <operator pos:line="653" pos:column="21">||<pos:position pos:line="653" pos:column="23"/></operator> <operator pos:line="653" pos:column="24">!<pos:position pos:line="653" pos:column="25"/></operator><call><name pos:line="653" pos:column="25">strcmp<pos:position pos:line="653" pos:column="31"/></name><argument_list pos:line="653" pos:column="31">(<argument><expr><operator pos:line="653" pos:column="32">*<pos:position pos:line="653" pos:column="33"/></operator><name pos:line="653" pos:column="33">paths<pos:position pos:line="653" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="653" pos:column="40">"-"<pos:position pos:line="653" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="653" pos:column="44"/></argument_list></call> <operator pos:line="653" pos:column="45">||<pos:position pos:line="653" pos:column="47"/></operator> <call><name pos:line="653" pos:column="48">is_directory<pos:position pos:line="653" pos:column="60"/></name><argument_list pos:line="653" pos:column="60">(<argument><expr><operator pos:line="653" pos:column="61">*<pos:position pos:line="653" pos:column="62"/></operator><name pos:line="653" pos:column="62">paths<pos:position pos:line="653" pos:column="67"/></name></expr></argument>)<pos:position pos:line="653" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="653" pos:column="69"/></condition><then pos:line="653" pos:column="69">
		<block type="pseudo"><return pos:line="654" pos:column="17">return <expr><name pos:line="654" pos:column="24">PATCH_FORMAT_MBOX<pos:position pos:line="654" pos:column="41"/></name></expr>;<pos:position pos:line="654" pos:column="42"/></return></block></then></if>

	<comment type="block" pos:line="656" pos:column="9">/*
	 * Otherwise, check the first few lines of the first patch, starting
	 * from the first non-blank line, to try to detect its format.
	 */</comment>

	<expr_stmt><expr><name pos:line="661" pos:column="9">fp<pos:position pos:line="661" pos:column="11"/></name> <operator pos:line="661" pos:column="12">=<pos:position pos:line="661" pos:column="13"/></operator> <call><name pos:line="661" pos:column="14">xfopen<pos:position pos:line="661" pos:column="20"/></name><argument_list pos:line="661" pos:column="20">(<argument><expr><operator pos:line="661" pos:column="21">*<pos:position pos:line="661" pos:column="22"/></operator><name pos:line="661" pos:column="22">paths<pos:position pos:line="661" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="661" pos:column="29">"r"<pos:position pos:line="661" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="661" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="661" pos:column="34"/></expr_stmt>

	<while pos:line="663" pos:column="9">while <condition pos:line="663" pos:column="15">(<expr><operator pos:line="663" pos:column="16">!<pos:position pos:line="663" pos:column="17"/></operator><call><name pos:line="663" pos:column="17">strbuf_getline<pos:position pos:line="663" pos:column="31"/></name><argument_list pos:line="663" pos:column="31">(<argument><expr><operator pos:line="663" pos:column="32">&amp;<pos:position pos:line="663" pos:column="37"/></operator><name pos:line="663" pos:column="33">l1<pos:position pos:line="663" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="663" pos:column="37">fp<pos:position pos:line="663" pos:column="39"/></name></expr></argument>)<pos:position pos:line="663" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="663" pos:column="41"/></condition> <block pos:line="663" pos:column="42">{
		<if pos:line="664" pos:column="17">if <condition pos:line="664" pos:column="20">(<expr><name><name pos:line="664" pos:column="21">l1<pos:position pos:line="664" pos:column="23"/></name><operator pos:line="664" pos:column="23">.<pos:position pos:line="664" pos:column="24"/></operator><name pos:line="664" pos:column="24">len<pos:position pos:line="664" pos:column="27"/></name></name></expr>)<pos:position pos:line="664" pos:column="28"/></condition><then pos:line="664" pos:column="28">
			<block type="pseudo"><break pos:line="665" pos:column="25">break;<pos:position pos:line="665" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="666" pos:column="10"/></block></while>

	<if pos:line="668" pos:column="9">if <condition pos:line="668" pos:column="12">(<expr><call><name pos:line="668" pos:column="13">starts_with<pos:position pos:line="668" pos:column="24"/></name><argument_list pos:line="668" pos:column="24">(<argument><expr><name><name pos:line="668" pos:column="25">l1<pos:position pos:line="668" pos:column="27"/></name><operator pos:line="668" pos:column="27">.<pos:position pos:line="668" pos:column="28"/></operator><name pos:line="668" pos:column="28">buf<pos:position pos:line="668" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="668" pos:column="33">"From "<pos:position pos:line="668" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="668" pos:column="41"/></argument_list></call> <operator pos:line="668" pos:column="42">||<pos:position pos:line="668" pos:column="44"/></operator> <call><name pos:line="668" pos:column="45">starts_with<pos:position pos:line="668" pos:column="56"/></name><argument_list pos:line="668" pos:column="56">(<argument><expr><name><name pos:line="668" pos:column="57">l1<pos:position pos:line="668" pos:column="59"/></name><operator pos:line="668" pos:column="59">.<pos:position pos:line="668" pos:column="60"/></operator><name pos:line="668" pos:column="60">buf<pos:position pos:line="668" pos:column="63"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="668" pos:column="65">"From: "<pos:position pos:line="668" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="668" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="668" pos:column="75"/></condition><then pos:line="668" pos:column="75"> <block pos:line="668" pos:column="76">{
		<expr_stmt><expr><name pos:line="669" pos:column="17">ret<pos:position pos:line="669" pos:column="20"/></name> <operator pos:line="669" pos:column="21">=<pos:position pos:line="669" pos:column="22"/></operator> <name pos:line="669" pos:column="23">PATCH_FORMAT_MBOX<pos:position pos:line="669" pos:column="40"/></name></expr>;<pos:position pos:line="669" pos:column="41"/></expr_stmt>
		<goto pos:line="670" pos:column="17">goto <name pos:line="670" pos:column="22">done<pos:position pos:line="670" pos:column="26"/></name>;<pos:position pos:line="670" pos:column="27"/></goto>
	}<pos:position pos:line="671" pos:column="10"/></block></then></if>

	<if pos:line="673" pos:column="9">if <condition pos:line="673" pos:column="12">(<expr><call><name pos:line="673" pos:column="13">starts_with<pos:position pos:line="673" pos:column="24"/></name><argument_list pos:line="673" pos:column="24">(<argument><expr><name><name pos:line="673" pos:column="25">l1<pos:position pos:line="673" pos:column="27"/></name><operator pos:line="673" pos:column="27">.<pos:position pos:line="673" pos:column="28"/></operator><name pos:line="673" pos:column="28">buf<pos:position pos:line="673" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="673" pos:column="33">"# This series applies on GIT commit"<pos:position pos:line="673" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="673" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="673" pos:column="72"/></condition><then pos:line="673" pos:column="72"> <block pos:line="673" pos:column="73">{
		<expr_stmt><expr><name pos:line="674" pos:column="17">ret<pos:position pos:line="674" pos:column="20"/></name> <operator pos:line="674" pos:column="21">=<pos:position pos:line="674" pos:column="22"/></operator> <name pos:line="674" pos:column="23">PATCH_FORMAT_STGIT_SERIES<pos:position pos:line="674" pos:column="48"/></name></expr>;<pos:position pos:line="674" pos:column="49"/></expr_stmt>
		<goto pos:line="675" pos:column="17">goto <name pos:line="675" pos:column="22">done<pos:position pos:line="675" pos:column="26"/></name>;<pos:position pos:line="675" pos:column="27"/></goto>
	}<pos:position pos:line="676" pos:column="10"/></block></then></if>

	<if pos:line="678" pos:column="9">if <condition pos:line="678" pos:column="12">(<expr><operator pos:line="678" pos:column="13">!<pos:position pos:line="678" pos:column="14"/></operator><call><name pos:line="678" pos:column="14">strcmp<pos:position pos:line="678" pos:column="20"/></name><argument_list pos:line="678" pos:column="20">(<argument><expr><name><name pos:line="678" pos:column="21">l1<pos:position pos:line="678" pos:column="23"/></name><operator pos:line="678" pos:column="23">.<pos:position pos:line="678" pos:column="24"/></operator><name pos:line="678" pos:column="24">buf<pos:position pos:line="678" pos:column="27"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="678" pos:column="29">"# HG changeset patch"<pos:position pos:line="678" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="678" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="678" pos:column="53"/></condition><then pos:line="678" pos:column="53"> <block pos:line="678" pos:column="54">{
		<expr_stmt><expr><name pos:line="679" pos:column="17">ret<pos:position pos:line="679" pos:column="20"/></name> <operator pos:line="679" pos:column="21">=<pos:position pos:line="679" pos:column="22"/></operator> <name pos:line="679" pos:column="23">PATCH_FORMAT_HG<pos:position pos:line="679" pos:column="38"/></name></expr>;<pos:position pos:line="679" pos:column="39"/></expr_stmt>
		<goto pos:line="680" pos:column="17">goto <name pos:line="680" pos:column="22">done<pos:position pos:line="680" pos:column="26"/></name>;<pos:position pos:line="680" pos:column="27"/></goto>
	}<pos:position pos:line="681" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="683" pos:column="9">strbuf_reset<pos:position pos:line="683" pos:column="21"/></name><argument_list pos:line="683" pos:column="21">(<argument><expr><operator pos:line="683" pos:column="22">&amp;<pos:position pos:line="683" pos:column="27"/></operator><name pos:line="683" pos:column="23">l2<pos:position pos:line="683" pos:column="25"/></name></expr></argument>)<pos:position pos:line="683" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="683" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="684" pos:column="9">strbuf_getline<pos:position pos:line="684" pos:column="23"/></name><argument_list pos:line="684" pos:column="23">(<argument><expr><operator pos:line="684" pos:column="24">&amp;<pos:position pos:line="684" pos:column="29"/></operator><name pos:line="684" pos:column="25">l2<pos:position pos:line="684" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="684" pos:column="29">fp<pos:position pos:line="684" pos:column="31"/></name></expr></argument>)<pos:position pos:line="684" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="684" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="685" pos:column="9">strbuf_reset<pos:position pos:line="685" pos:column="21"/></name><argument_list pos:line="685" pos:column="21">(<argument><expr><operator pos:line="685" pos:column="22">&amp;<pos:position pos:line="685" pos:column="27"/></operator><name pos:line="685" pos:column="23">l3<pos:position pos:line="685" pos:column="25"/></name></expr></argument>)<pos:position pos:line="685" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="685" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="686" pos:column="9">strbuf_getline<pos:position pos:line="686" pos:column="23"/></name><argument_list pos:line="686" pos:column="23">(<argument><expr><operator pos:line="686" pos:column="24">&amp;<pos:position pos:line="686" pos:column="29"/></operator><name pos:line="686" pos:column="25">l3<pos:position pos:line="686" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="686" pos:column="29">fp<pos:position pos:line="686" pos:column="31"/></name></expr></argument>)<pos:position pos:line="686" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="686" pos:column="33"/></expr_stmt>

	<comment type="block" pos:line="688" pos:column="9">/*
	 * If the second line is empty and the third is a From, Author or Date
	 * entry, this is likely an StGit patch.
	 */</comment>
	<if pos:line="692" pos:column="9">if <condition pos:line="692" pos:column="12">(<expr><name><name pos:line="692" pos:column="13">l1<pos:position pos:line="692" pos:column="15"/></name><operator pos:line="692" pos:column="15">.<pos:position pos:line="692" pos:column="16"/></operator><name pos:line="692" pos:column="16">len<pos:position pos:line="692" pos:column="19"/></name></name> <operator pos:line="692" pos:column="20">&amp;&amp;<pos:position pos:line="692" pos:column="30"/></operator> <operator pos:line="692" pos:column="23">!<pos:position pos:line="692" pos:column="24"/></operator><name><name pos:line="692" pos:column="24">l2<pos:position pos:line="692" pos:column="26"/></name><operator pos:line="692" pos:column="26">.<pos:position pos:line="692" pos:column="27"/></operator><name pos:line="692" pos:column="27">len<pos:position pos:line="692" pos:column="30"/></name></name> <operator pos:line="692" pos:column="31">&amp;&amp;<pos:position pos:line="692" pos:column="41"/></operator>
		<operator pos:line="693" pos:column="17">(<pos:position pos:line="693" pos:column="18"/></operator><call><name pos:line="693" pos:column="18">starts_with<pos:position pos:line="693" pos:column="29"/></name><argument_list pos:line="693" pos:column="29">(<argument><expr><name><name pos:line="693" pos:column="30">l3<pos:position pos:line="693" pos:column="32"/></name><operator pos:line="693" pos:column="32">.<pos:position pos:line="693" pos:column="33"/></operator><name pos:line="693" pos:column="33">buf<pos:position pos:line="693" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="693" pos:column="38">"From:"<pos:position pos:line="693" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="693" pos:column="46"/></argument_list></call> <operator pos:line="693" pos:column="47">||<pos:position pos:line="693" pos:column="49"/></operator>
		 <call><name pos:line="694" pos:column="18">starts_with<pos:position pos:line="694" pos:column="29"/></name><argument_list pos:line="694" pos:column="29">(<argument><expr><name><name pos:line="694" pos:column="30">l3<pos:position pos:line="694" pos:column="32"/></name><operator pos:line="694" pos:column="32">.<pos:position pos:line="694" pos:column="33"/></operator><name pos:line="694" pos:column="33">buf<pos:position pos:line="694" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="694" pos:column="38">"Author:"<pos:position pos:line="694" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="694" pos:column="48"/></argument_list></call> <operator pos:line="694" pos:column="49">||<pos:position pos:line="694" pos:column="51"/></operator>
		 <call><name pos:line="695" pos:column="18">starts_with<pos:position pos:line="695" pos:column="29"/></name><argument_list pos:line="695" pos:column="29">(<argument><expr><name><name pos:line="695" pos:column="30">l3<pos:position pos:line="695" pos:column="32"/></name><operator pos:line="695" pos:column="32">.<pos:position pos:line="695" pos:column="33"/></operator><name pos:line="695" pos:column="33">buf<pos:position pos:line="695" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="695" pos:column="38">"Date:"<pos:position pos:line="695" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="695" pos:column="46"/></argument_list></call><operator pos:line="695" pos:column="46">)<pos:position pos:line="695" pos:column="47"/></operator></expr>)<pos:position pos:line="695" pos:column="48"/></condition><then pos:line="695" pos:column="48"> <block pos:line="695" pos:column="49">{
		<expr_stmt><expr><name pos:line="696" pos:column="17">ret<pos:position pos:line="696" pos:column="20"/></name> <operator pos:line="696" pos:column="21">=<pos:position pos:line="696" pos:column="22"/></operator> <name pos:line="696" pos:column="23">PATCH_FORMAT_STGIT<pos:position pos:line="696" pos:column="41"/></name></expr>;<pos:position pos:line="696" pos:column="42"/></expr_stmt>
		<goto pos:line="697" pos:column="17">goto <name pos:line="697" pos:column="22">done<pos:position pos:line="697" pos:column="26"/></name>;<pos:position pos:line="697" pos:column="27"/></goto>
	}<pos:position pos:line="698" pos:column="10"/></block></then></if>

	<if pos:line="700" pos:column="9">if <condition pos:line="700" pos:column="12">(<expr><name><name pos:line="700" pos:column="13">l1<pos:position pos:line="700" pos:column="15"/></name><operator pos:line="700" pos:column="15">.<pos:position pos:line="700" pos:column="16"/></operator><name pos:line="700" pos:column="16">len<pos:position pos:line="700" pos:column="19"/></name></name> <operator pos:line="700" pos:column="20">&amp;&amp;<pos:position pos:line="700" pos:column="30"/></operator> <call><name pos:line="700" pos:column="23">is_mail<pos:position pos:line="700" pos:column="30"/></name><argument_list pos:line="700" pos:column="30">(<argument><expr><name pos:line="700" pos:column="31">fp<pos:position pos:line="700" pos:column="33"/></name></expr></argument>)<pos:position pos:line="700" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="700" pos:column="35"/></condition><then pos:line="700" pos:column="35"> <block pos:line="700" pos:column="36">{
		<expr_stmt><expr><name pos:line="701" pos:column="17">ret<pos:position pos:line="701" pos:column="20"/></name> <operator pos:line="701" pos:column="21">=<pos:position pos:line="701" pos:column="22"/></operator> <name pos:line="701" pos:column="23">PATCH_FORMAT_MBOX<pos:position pos:line="701" pos:column="40"/></name></expr>;<pos:position pos:line="701" pos:column="41"/></expr_stmt>
		<goto pos:line="702" pos:column="17">goto <name pos:line="702" pos:column="22">done<pos:position pos:line="702" pos:column="26"/></name>;<pos:position pos:line="702" pos:column="27"/></goto>
	}<pos:position pos:line="703" pos:column="10"/></block></then></if>

<label><name pos:line="705" pos:column="1">done<pos:position pos:line="705" pos:column="5"/></name>:<pos:position pos:line="705" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="706" pos:column="9">fclose<pos:position pos:line="706" pos:column="15"/></name><argument_list pos:line="706" pos:column="15">(<argument><expr><name pos:line="706" pos:column="16">fp<pos:position pos:line="706" pos:column="18"/></name></expr></argument>)<pos:position pos:line="706" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="706" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="707" pos:column="9">strbuf_release<pos:position pos:line="707" pos:column="23"/></name><argument_list pos:line="707" pos:column="23">(<argument><expr><operator pos:line="707" pos:column="24">&amp;<pos:position pos:line="707" pos:column="29"/></operator><name pos:line="707" pos:column="25">l1<pos:position pos:line="707" pos:column="27"/></name></expr></argument>)<pos:position pos:line="707" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="707" pos:column="29"/></expr_stmt>
	<return pos:line="708" pos:column="9">return <expr><name pos:line="708" pos:column="16">ret<pos:position pos:line="708" pos:column="19"/></name></expr>;<pos:position pos:line="708" pos:column="20"/></return>
}<pos:position pos:line="709" pos:column="2"/></block></function>

<comment type="block" pos:line="711" pos:column="1">/**
 * Splits out individual email patches from `paths`, where each path is either
 * a mbox file or a Maildir. Returns 0 on success, -1 on failure.
 */</comment>
<function><specifier pos:line="715" pos:column="1">static<pos:position pos:line="715" pos:column="7"/></specifier> <type><name pos:line="715" pos:column="8">int<pos:position pos:line="715" pos:column="11"/></name></type> <name pos:line="715" pos:column="12">split_mail_mbox<pos:position pos:line="715" pos:column="27"/></name><parameter_list pos:line="715" pos:column="27">(<parameter><decl><type><name><name pos:line="715" pos:column="28">struct<pos:position pos:line="715" pos:column="34"/></name> <name pos:line="715" pos:column="35">am_state<pos:position pos:line="715" pos:column="43"/></name></name> <modifier pos:line="715" pos:column="44">*<pos:position pos:line="715" pos:column="45"/></modifier></type><name pos:line="715" pos:column="45">state<pos:position pos:line="715" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="715" pos:column="52">const<pos:position pos:line="715" pos:column="57"/></specifier> <name pos:line="715" pos:column="58">char<pos:position pos:line="715" pos:column="62"/></name> <modifier pos:line="715" pos:column="63">*<pos:position pos:line="715" pos:column="64"/></modifier><modifier pos:line="715" pos:column="64">*<pos:position pos:line="715" pos:column="65"/></modifier></type><name pos:line="715" pos:column="65">paths<pos:position pos:line="715" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name pos:line="715" pos:column="72">int<pos:position pos:line="715" pos:column="75"/></name></type> <name pos:line="715" pos:column="76">keep_cr<pos:position pos:line="715" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="715" pos:column="84"/></parameter_list>
<block pos:line="716" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="717" pos:column="9">struct<pos:position pos:line="717" pos:column="15"/></name> <name pos:line="717" pos:column="16">child_process<pos:position pos:line="717" pos:column="29"/></name></name></type> <name pos:line="717" pos:column="30">cp<pos:position pos:line="717" pos:column="32"/></name> <init pos:line="717" pos:column="33">= <expr><name pos:line="717" pos:column="35">CHILD_PROCESS_INIT<pos:position pos:line="717" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="717" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="718" pos:column="9">struct<pos:position pos:line="718" pos:column="15"/></name> <name pos:line="718" pos:column="16">strbuf<pos:position pos:line="718" pos:column="22"/></name></name></type> <name pos:line="718" pos:column="23">last<pos:position pos:line="718" pos:column="27"/></name> <init pos:line="718" pos:column="28">= <expr><name pos:line="718" pos:column="30">STRBUF_INIT<pos:position pos:line="718" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="718" pos:column="42"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="720" pos:column="9">cp<pos:position pos:line="720" pos:column="11"/></name><operator pos:line="720" pos:column="11">.<pos:position pos:line="720" pos:column="12"/></operator><name pos:line="720" pos:column="12">git_cmd<pos:position pos:line="720" pos:column="19"/></name></name> <operator pos:line="720" pos:column="20">=<pos:position pos:line="720" pos:column="21"/></operator> <literal type="number" pos:line="720" pos:column="22">1<pos:position pos:line="720" pos:column="23"/></literal></expr>;<pos:position pos:line="720" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="721" pos:column="9">argv_array_push<pos:position pos:line="721" pos:column="24"/></name><argument_list pos:line="721" pos:column="24">(<argument><expr><operator pos:line="721" pos:column="25">&amp;<pos:position pos:line="721" pos:column="30"/></operator><name><name pos:line="721" pos:column="26">cp<pos:position pos:line="721" pos:column="28"/></name><operator pos:line="721" pos:column="28">.<pos:position pos:line="721" pos:column="29"/></operator><name pos:line="721" pos:column="29">args<pos:position pos:line="721" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="721" pos:column="35">"mailsplit"<pos:position pos:line="721" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="721" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="721" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="722" pos:column="9">argv_array_pushf<pos:position pos:line="722" pos:column="25"/></name><argument_list pos:line="722" pos:column="25">(<argument><expr><operator pos:line="722" pos:column="26">&amp;<pos:position pos:line="722" pos:column="31"/></operator><name><name pos:line="722" pos:column="27">cp<pos:position pos:line="722" pos:column="29"/></name><operator pos:line="722" pos:column="29">.<pos:position pos:line="722" pos:column="30"/></operator><name pos:line="722" pos:column="30">args<pos:position pos:line="722" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="722" pos:column="36">"-d%d"<pos:position pos:line="722" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="722" pos:column="44">state<pos:position pos:line="722" pos:column="49"/></name><operator pos:line="722" pos:column="49">-&gt;<pos:position pos:line="722" pos:column="54"/></operator><name pos:line="722" pos:column="51">prec<pos:position pos:line="722" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="722" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="722" pos:column="57"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="723" pos:column="9">argv_array_pushf<pos:position pos:line="723" pos:column="25"/></name><argument_list pos:line="723" pos:column="25">(<argument><expr><operator pos:line="723" pos:column="26">&amp;<pos:position pos:line="723" pos:column="31"/></operator><name><name pos:line="723" pos:column="27">cp<pos:position pos:line="723" pos:column="29"/></name><operator pos:line="723" pos:column="29">.<pos:position pos:line="723" pos:column="30"/></operator><name pos:line="723" pos:column="30">args<pos:position pos:line="723" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="723" pos:column="36">"-o%s"<pos:position pos:line="723" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="723" pos:column="44">state<pos:position pos:line="723" pos:column="49"/></name><operator pos:line="723" pos:column="49">-&gt;<pos:position pos:line="723" pos:column="54"/></operator><name pos:line="723" pos:column="51">dir<pos:position pos:line="723" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="723" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="723" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="724" pos:column="9">argv_array_push<pos:position pos:line="724" pos:column="24"/></name><argument_list pos:line="724" pos:column="24">(<argument><expr><operator pos:line="724" pos:column="25">&amp;<pos:position pos:line="724" pos:column="30"/></operator><name><name pos:line="724" pos:column="26">cp<pos:position pos:line="724" pos:column="28"/></name><operator pos:line="724" pos:column="28">.<pos:position pos:line="724" pos:column="29"/></operator><name pos:line="724" pos:column="29">args<pos:position pos:line="724" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="724" pos:column="35">"-b"<pos:position pos:line="724" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="724" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="724" pos:column="41"/></expr_stmt>
	<if pos:line="725" pos:column="9">if <condition pos:line="725" pos:column="12">(<expr><name pos:line="725" pos:column="13">keep_cr<pos:position pos:line="725" pos:column="20"/></name></expr>)<pos:position pos:line="725" pos:column="21"/></condition><then pos:line="725" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="726" pos:column="17">argv_array_push<pos:position pos:line="726" pos:column="32"/></name><argument_list pos:line="726" pos:column="32">(<argument><expr><operator pos:line="726" pos:column="33">&amp;<pos:position pos:line="726" pos:column="38"/></operator><name><name pos:line="726" pos:column="34">cp<pos:position pos:line="726" pos:column="36"/></name><operator pos:line="726" pos:column="36">.<pos:position pos:line="726" pos:column="37"/></operator><name pos:line="726" pos:column="37">args<pos:position pos:line="726" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="726" pos:column="43">"--keep-cr"<pos:position pos:line="726" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="726" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="726" pos:column="56"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="727" pos:column="9">argv_array_push<pos:position pos:line="727" pos:column="24"/></name><argument_list pos:line="727" pos:column="24">(<argument><expr><operator pos:line="727" pos:column="25">&amp;<pos:position pos:line="727" pos:column="30"/></operator><name><name pos:line="727" pos:column="26">cp<pos:position pos:line="727" pos:column="28"/></name><operator pos:line="727" pos:column="28">.<pos:position pos:line="727" pos:column="29"/></operator><name pos:line="727" pos:column="29">args<pos:position pos:line="727" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="727" pos:column="35">"--"<pos:position pos:line="727" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="727" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="727" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="728" pos:column="9">argv_array_pushv<pos:position pos:line="728" pos:column="25"/></name><argument_list pos:line="728" pos:column="25">(<argument><expr><operator pos:line="728" pos:column="26">&amp;<pos:position pos:line="728" pos:column="31"/></operator><name><name pos:line="728" pos:column="27">cp<pos:position pos:line="728" pos:column="29"/></name><operator pos:line="728" pos:column="29">.<pos:position pos:line="728" pos:column="30"/></operator><name pos:line="728" pos:column="30">args<pos:position pos:line="728" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="728" pos:column="36">paths<pos:position pos:line="728" pos:column="41"/></name></expr></argument>)<pos:position pos:line="728" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="728" pos:column="43"/></expr_stmt>

	<if pos:line="730" pos:column="9">if <condition pos:line="730" pos:column="12">(<expr><call><name pos:line="730" pos:column="13">capture_command<pos:position pos:line="730" pos:column="28"/></name><argument_list pos:line="730" pos:column="28">(<argument><expr><operator pos:line="730" pos:column="29">&amp;<pos:position pos:line="730" pos:column="34"/></operator><name pos:line="730" pos:column="30">cp<pos:position pos:line="730" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="730" pos:column="34">&amp;<pos:position pos:line="730" pos:column="39"/></operator><name pos:line="730" pos:column="35">last<pos:position pos:line="730" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="730" pos:column="41">8<pos:position pos:line="730" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="730" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="730" pos:column="44"/></condition><then pos:line="730" pos:column="44">
		<block type="pseudo"><return pos:line="731" pos:column="17">return <expr><operator pos:line="731" pos:column="24">-<pos:position pos:line="731" pos:column="25"/></operator><literal type="number" pos:line="731" pos:column="25">1<pos:position pos:line="731" pos:column="26"/></literal></expr>;<pos:position pos:line="731" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="733" pos:column="9">state<pos:position pos:line="733" pos:column="14"/></name><operator pos:line="733" pos:column="14">-&gt;<pos:position pos:line="733" pos:column="19"/></operator><name pos:line="733" pos:column="16">cur<pos:position pos:line="733" pos:column="19"/></name></name> <operator pos:line="733" pos:column="20">=<pos:position pos:line="733" pos:column="21"/></operator> <literal type="number" pos:line="733" pos:column="22">1<pos:position pos:line="733" pos:column="23"/></literal></expr>;<pos:position pos:line="733" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="734" pos:column="9">state<pos:position pos:line="734" pos:column="14"/></name><operator pos:line="734" pos:column="14">-&gt;<pos:position pos:line="734" pos:column="19"/></operator><name pos:line="734" pos:column="16">last<pos:position pos:line="734" pos:column="20"/></name></name> <operator pos:line="734" pos:column="21">=<pos:position pos:line="734" pos:column="22"/></operator> <call><name pos:line="734" pos:column="23">strtol<pos:position pos:line="734" pos:column="29"/></name><argument_list pos:line="734" pos:column="29">(<argument><expr><name><name pos:line="734" pos:column="30">last<pos:position pos:line="734" pos:column="34"/></name><operator pos:line="734" pos:column="34">.<pos:position pos:line="734" pos:column="35"/></operator><name pos:line="734" pos:column="35">buf<pos:position pos:line="734" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="734" pos:column="40">NULL<pos:position pos:line="734" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="734" pos:column="46">10<pos:position pos:line="734" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="734" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="734" pos:column="50"/></expr_stmt>

	<return pos:line="736" pos:column="9">return <expr><literal type="number" pos:line="736" pos:column="16">0<pos:position pos:line="736" pos:column="17"/></literal></expr>;<pos:position pos:line="736" pos:column="18"/></return>
}<pos:position pos:line="737" pos:column="2"/></block></function>

<comment type="block" pos:line="739" pos:column="1">/**
 * Callback signature for split_mail_conv(). The foreign patch should be
 * read from `in`, and the converted patch (in RFC2822 mail format) should be
 * written to `out`. Return 0 on success, or -1 on failure.
 */</comment>
<typedef pos:line="744" pos:column="1">typedef <function_decl><type><name pos:line="744" pos:column="9">int<pos:position pos:line="744" pos:column="12"/></name></type> (<modifier pos:line="744" pos:column="14">*<pos:position pos:line="744" pos:column="15"/></modifier><name pos:line="744" pos:column="15">mail_conv_fn<pos:position pos:line="744" pos:column="27"/></name>)<parameter_list pos:line="744" pos:column="28">(<parameter><decl><type><name pos:line="744" pos:column="29">FILE<pos:position pos:line="744" pos:column="33"/></name> <modifier pos:line="744" pos:column="34">*<pos:position pos:line="744" pos:column="35"/></modifier></type><name pos:line="744" pos:column="35">out<pos:position pos:line="744" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="744" pos:column="40">FILE<pos:position pos:line="744" pos:column="44"/></name> <modifier pos:line="744" pos:column="45">*<pos:position pos:line="744" pos:column="46"/></modifier></type><name pos:line="744" pos:column="46">in<pos:position pos:line="744" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="744" pos:column="50">int<pos:position pos:line="744" pos:column="53"/></name></type> <name pos:line="744" pos:column="54">keep_cr<pos:position pos:line="744" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="744" pos:column="62"/></parameter_list>;<pos:position pos:line="744" pos:column="63"/></function_decl></typedef>

<comment type="block" pos:line="746" pos:column="1">/**
 * Calls `fn` for each file in `paths` to convert the foreign patch to the
 * RFC2822 mail format suitable for parsing with git-mailinfo.
 *
 * Returns 0 on success, -1 on failure.
 */</comment>
<function><specifier pos:line="752" pos:column="1">static<pos:position pos:line="752" pos:column="7"/></specifier> <type><name pos:line="752" pos:column="8">int<pos:position pos:line="752" pos:column="11"/></name></type> <name pos:line="752" pos:column="12">split_mail_conv<pos:position pos:line="752" pos:column="27"/></name><parameter_list pos:line="752" pos:column="27">(<parameter><decl><type><name pos:line="752" pos:column="28">mail_conv_fn<pos:position pos:line="752" pos:column="40"/></name></type> <name pos:line="752" pos:column="41">fn<pos:position pos:line="752" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="752" pos:column="45">struct<pos:position pos:line="752" pos:column="51"/></name> <name pos:line="752" pos:column="52">am_state<pos:position pos:line="752" pos:column="60"/></name></name> <modifier pos:line="752" pos:column="61">*<pos:position pos:line="752" pos:column="62"/></modifier></type><name pos:line="752" pos:column="62">state<pos:position pos:line="752" pos:column="67"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="753" pos:column="25">const<pos:position pos:line="753" pos:column="30"/></specifier> <name pos:line="753" pos:column="31">char<pos:position pos:line="753" pos:column="35"/></name> <modifier pos:line="753" pos:column="36">*<pos:position pos:line="753" pos:column="37"/></modifier><modifier pos:line="753" pos:column="37">*<pos:position pos:line="753" pos:column="38"/></modifier></type><name pos:line="753" pos:column="38">paths<pos:position pos:line="753" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="753" pos:column="45">int<pos:position pos:line="753" pos:column="48"/></name></type> <name pos:line="753" pos:column="49">keep_cr<pos:position pos:line="753" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="753" pos:column="57"/></parameter_list>
<block pos:line="754" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="755" pos:column="9">static<pos:position pos:line="755" pos:column="15"/></specifier> <type><specifier pos:line="755" pos:column="16">const<pos:position pos:line="755" pos:column="21"/></specifier> <name pos:line="755" pos:column="22">char<pos:position pos:line="755" pos:column="26"/></name> <modifier pos:line="755" pos:column="27">*<pos:position pos:line="755" pos:column="28"/></modifier></type><name><name pos:line="755" pos:column="28">stdin_only<pos:position pos:line="755" pos:column="38"/></name><index pos:line="755" pos:column="38">[]<pos:position pos:line="755" pos:column="40"/></index></name> <init pos:line="755" pos:column="41">= <expr><block pos:line="755" pos:column="43">{<expr><literal type="string" pos:line="755" pos:column="44">"-"<pos:position pos:line="755" pos:column="47"/></literal></expr>, <expr><name pos:line="755" pos:column="49">NULL<pos:position pos:line="755" pos:column="53"/></name></expr>}<pos:position pos:line="755" pos:column="54"/></block></expr></init></decl>;<pos:position pos:line="755" pos:column="55"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="756" pos:column="9">int<pos:position pos:line="756" pos:column="12"/></name></type> <name pos:line="756" pos:column="13">i<pos:position pos:line="756" pos:column="14"/></name></decl>;<pos:position pos:line="756" pos:column="15"/></decl_stmt>

	<if pos:line="758" pos:column="9">if <condition pos:line="758" pos:column="12">(<expr><operator pos:line="758" pos:column="13">!<pos:position pos:line="758" pos:column="14"/></operator><operator pos:line="758" pos:column="14">*<pos:position pos:line="758" pos:column="15"/></operator><name pos:line="758" pos:column="15">paths<pos:position pos:line="758" pos:column="20"/></name></expr>)<pos:position pos:line="758" pos:column="21"/></condition><then pos:line="758" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="759" pos:column="17">paths<pos:position pos:line="759" pos:column="22"/></name> <operator pos:line="759" pos:column="23">=<pos:position pos:line="759" pos:column="24"/></operator> <name pos:line="759" pos:column="25">stdin_only<pos:position pos:line="759" pos:column="35"/></name></expr>;<pos:position pos:line="759" pos:column="36"/></expr_stmt></block></then></if>

	<for pos:line="761" pos:column="9">for <control pos:line="761" pos:column="13">(<init><expr><name pos:line="761" pos:column="14">i<pos:position pos:line="761" pos:column="15"/></name> <operator pos:line="761" pos:column="16">=<pos:position pos:line="761" pos:column="17"/></operator> <literal type="number" pos:line="761" pos:column="18">0<pos:position pos:line="761" pos:column="19"/></literal></expr>;<pos:position pos:line="761" pos:column="20"/></init> <condition><expr><operator pos:line="761" pos:column="21">*<pos:position pos:line="761" pos:column="22"/></operator><name pos:line="761" pos:column="22">paths<pos:position pos:line="761" pos:column="27"/></name></expr>;<pos:position pos:line="761" pos:column="28"/></condition> <incr><expr><name pos:line="761" pos:column="29">paths<pos:position pos:line="761" pos:column="34"/></name><operator pos:line="761" pos:column="34">++<pos:position pos:line="761" pos:column="36"/></operator></expr><operator pos:line="761" pos:column="36">,<pos:position pos:line="761" pos:column="37"/></operator> <expr><name pos:line="761" pos:column="38">i<pos:position pos:line="761" pos:column="39"/></name><operator pos:line="761" pos:column="39">++<pos:position pos:line="761" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="761" pos:column="42"/></control> <block pos:line="761" pos:column="43">{
		<decl_stmt><decl><type><name pos:line="762" pos:column="17">FILE<pos:position pos:line="762" pos:column="21"/></name> <modifier pos:line="762" pos:column="22">*<pos:position pos:line="762" pos:column="23"/></modifier></type><name pos:line="762" pos:column="23">in<pos:position pos:line="762" pos:column="25"/></name></decl>, <modifier pos:line="762" pos:column="27">*<pos:position pos:line="762" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="762" pos:column="28">out<pos:position pos:line="762" pos:column="31"/></name></decl>;<pos:position pos:line="762" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="763" pos:column="17">const<pos:position pos:line="763" pos:column="22"/></specifier> <name pos:line="763" pos:column="23">char<pos:position pos:line="763" pos:column="27"/></name> <modifier pos:line="763" pos:column="28">*<pos:position pos:line="763" pos:column="29"/></modifier></type><name pos:line="763" pos:column="29">mail<pos:position pos:line="763" pos:column="33"/></name></decl>;<pos:position pos:line="763" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="764" pos:column="17">int<pos:position pos:line="764" pos:column="20"/></name></type> <name pos:line="764" pos:column="21">ret<pos:position pos:line="764" pos:column="24"/></name></decl>;<pos:position pos:line="764" pos:column="25"/></decl_stmt>

		<if pos:line="766" pos:column="17">if <condition pos:line="766" pos:column="20">(<expr><operator pos:line="766" pos:column="21">!<pos:position pos:line="766" pos:column="22"/></operator><call><name pos:line="766" pos:column="22">strcmp<pos:position pos:line="766" pos:column="28"/></name><argument_list pos:line="766" pos:column="28">(<argument><expr><operator pos:line="766" pos:column="29">*<pos:position pos:line="766" pos:column="30"/></operator><name pos:line="766" pos:column="30">paths<pos:position pos:line="766" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="766" pos:column="37">"-"<pos:position pos:line="766" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="766" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="766" pos:column="42"/></condition><then pos:line="766" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><name pos:line="767" pos:column="25">in<pos:position pos:line="767" pos:column="27"/></name> <operator pos:line="767" pos:column="28">=<pos:position pos:line="767" pos:column="29"/></operator> <name pos:line="767" pos:column="30">stdin<pos:position pos:line="767" pos:column="35"/></name></expr>;<pos:position pos:line="767" pos:column="36"/></expr_stmt></block></then>
		<else pos:line="768" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="769" pos:column="25">in<pos:position pos:line="769" pos:column="27"/></name> <operator pos:line="769" pos:column="28">=<pos:position pos:line="769" pos:column="29"/></operator> <call><name pos:line="769" pos:column="30">fopen<pos:position pos:line="769" pos:column="35"/></name><argument_list pos:line="769" pos:column="35">(<argument><expr><operator pos:line="769" pos:column="36">*<pos:position pos:line="769" pos:column="37"/></operator><name pos:line="769" pos:column="37">paths<pos:position pos:line="769" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="769" pos:column="44">"r"<pos:position pos:line="769" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="769" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="769" pos:column="49"/></expr_stmt></block></else></if>

		<if pos:line="771" pos:column="17">if <condition pos:line="771" pos:column="20">(<expr><operator pos:line="771" pos:column="21">!<pos:position pos:line="771" pos:column="22"/></operator><name pos:line="771" pos:column="22">in<pos:position pos:line="771" pos:column="24"/></name></expr>)<pos:position pos:line="771" pos:column="25"/></condition><then pos:line="771" pos:column="25">
			<block type="pseudo"><return pos:line="772" pos:column="25">return <expr><call><name pos:line="772" pos:column="32">error<pos:position pos:line="772" pos:column="37"/></name><argument_list pos:line="772" pos:column="37">(<argument><expr><call><name pos:line="772" pos:column="38">_<pos:position pos:line="772" pos:column="39"/></name><argument_list pos:line="772" pos:column="39">(<argument><expr><literal type="string" pos:line="772" pos:column="40">"could not open '%s' for reading: %s"<pos:position pos:line="772" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="772" pos:column="78"/></argument_list></call></expr></argument>,
					<argument><expr><operator pos:line="773" pos:column="41">*<pos:position pos:line="773" pos:column="42"/></operator><name pos:line="773" pos:column="42">paths<pos:position pos:line="773" pos:column="47"/></name></expr></argument>, <argument><expr><call><name pos:line="773" pos:column="49">strerror<pos:position pos:line="773" pos:column="57"/></name><argument_list pos:line="773" pos:column="57">(<argument><expr><name pos:line="773" pos:column="58">errno<pos:position pos:line="773" pos:column="63"/></name></expr></argument>)<pos:position pos:line="773" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="773" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="773" pos:column="66"/></return></block></then></if>

		<expr_stmt><expr><name pos:line="775" pos:column="17">mail<pos:position pos:line="775" pos:column="21"/></name> <operator pos:line="775" pos:column="22">=<pos:position pos:line="775" pos:column="23"/></operator> <call><name pos:line="775" pos:column="24">mkpath<pos:position pos:line="775" pos:column="30"/></name><argument_list pos:line="775" pos:column="30">(<argument><expr><literal type="string" pos:line="775" pos:column="31">"%s/%0*d"<pos:position pos:line="775" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="775" pos:column="42">state<pos:position pos:line="775" pos:column="47"/></name><operator pos:line="775" pos:column="47">-&gt;<pos:position pos:line="775" pos:column="52"/></operator><name pos:line="775" pos:column="49">dir<pos:position pos:line="775" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="775" pos:column="54">state<pos:position pos:line="775" pos:column="59"/></name><operator pos:line="775" pos:column="59">-&gt;<pos:position pos:line="775" pos:column="64"/></operator><name pos:line="775" pos:column="61">prec<pos:position pos:line="775" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="775" pos:column="67">i<pos:position pos:line="775" pos:column="68"/></name> <operator pos:line="775" pos:column="69">+<pos:position pos:line="775" pos:column="70"/></operator> <literal type="number" pos:line="775" pos:column="71">1<pos:position pos:line="775" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="775" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="775" pos:column="74"/></expr_stmt>

		<expr_stmt><expr><name pos:line="777" pos:column="17">out<pos:position pos:line="777" pos:column="20"/></name> <operator pos:line="777" pos:column="21">=<pos:position pos:line="777" pos:column="22"/></operator> <call><name pos:line="777" pos:column="23">fopen<pos:position pos:line="777" pos:column="28"/></name><argument_list pos:line="777" pos:column="28">(<argument><expr><name pos:line="777" pos:column="29">mail<pos:position pos:line="777" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="777" pos:column="35">"w"<pos:position pos:line="777" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="777" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="777" pos:column="40"/></expr_stmt>
		<if pos:line="778" pos:column="17">if <condition pos:line="778" pos:column="20">(<expr><operator pos:line="778" pos:column="21">!<pos:position pos:line="778" pos:column="22"/></operator><name pos:line="778" pos:column="22">out<pos:position pos:line="778" pos:column="25"/></name></expr>)<pos:position pos:line="778" pos:column="26"/></condition><then pos:line="778" pos:column="26">
			<block type="pseudo"><return pos:line="779" pos:column="25">return <expr><call><name pos:line="779" pos:column="32">error<pos:position pos:line="779" pos:column="37"/></name><argument_list pos:line="779" pos:column="37">(<argument><expr><call><name pos:line="779" pos:column="38">_<pos:position pos:line="779" pos:column="39"/></name><argument_list pos:line="779" pos:column="39">(<argument><expr><literal type="string" pos:line="779" pos:column="40">"could not open '%s' for writing: %s"<pos:position pos:line="779" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="779" pos:column="78"/></argument_list></call></expr></argument>,
					<argument><expr><name pos:line="780" pos:column="41">mail<pos:position pos:line="780" pos:column="45"/></name></expr></argument>, <argument><expr><call><name pos:line="780" pos:column="47">strerror<pos:position pos:line="780" pos:column="55"/></name><argument_list pos:line="780" pos:column="55">(<argument><expr><name pos:line="780" pos:column="56">errno<pos:position pos:line="780" pos:column="61"/></name></expr></argument>)<pos:position pos:line="780" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="780" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="780" pos:column="64"/></return></block></then></if>

		<expr_stmt><expr><name pos:line="782" pos:column="17">ret<pos:position pos:line="782" pos:column="20"/></name> <operator pos:line="782" pos:column="21">=<pos:position pos:line="782" pos:column="22"/></operator> <call><name pos:line="782" pos:column="23">fn<pos:position pos:line="782" pos:column="25"/></name><argument_list pos:line="782" pos:column="25">(<argument><expr><name pos:line="782" pos:column="26">out<pos:position pos:line="782" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="782" pos:column="31">in<pos:position pos:line="782" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="782" pos:column="35">keep_cr<pos:position pos:line="782" pos:column="42"/></name></expr></argument>)<pos:position pos:line="782" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="782" pos:column="44"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="784" pos:column="17">fclose<pos:position pos:line="784" pos:column="23"/></name><argument_list pos:line="784" pos:column="23">(<argument><expr><name pos:line="784" pos:column="24">out<pos:position pos:line="784" pos:column="27"/></name></expr></argument>)<pos:position pos:line="784" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="784" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="785" pos:column="17">fclose<pos:position pos:line="785" pos:column="23"/></name><argument_list pos:line="785" pos:column="23">(<argument><expr><name pos:line="785" pos:column="24">in<pos:position pos:line="785" pos:column="26"/></name></expr></argument>)<pos:position pos:line="785" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="785" pos:column="28"/></expr_stmt>

		<if pos:line="787" pos:column="17">if <condition pos:line="787" pos:column="20">(<expr><name pos:line="787" pos:column="21">ret<pos:position pos:line="787" pos:column="24"/></name></expr>)<pos:position pos:line="787" pos:column="25"/></condition><then pos:line="787" pos:column="25">
			<block type="pseudo"><return pos:line="788" pos:column="25">return <expr><call><name pos:line="788" pos:column="32">error<pos:position pos:line="788" pos:column="37"/></name><argument_list pos:line="788" pos:column="37">(<argument><expr><call><name pos:line="788" pos:column="38">_<pos:position pos:line="788" pos:column="39"/></name><argument_list pos:line="788" pos:column="39">(<argument><expr><literal type="string" pos:line="788" pos:column="40">"could not parse patch '%s'"<pos:position pos:line="788" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="788" pos:column="69"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="788" pos:column="71">*<pos:position pos:line="788" pos:column="72"/></operator><name pos:line="788" pos:column="72">paths<pos:position pos:line="788" pos:column="77"/></name></expr></argument>)<pos:position pos:line="788" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="788" pos:column="79"/></return></block></then></if>
	}<pos:position pos:line="789" pos:column="10"/></block></for>

	<expr_stmt><expr><name><name pos:line="791" pos:column="9">state<pos:position pos:line="791" pos:column="14"/></name><operator pos:line="791" pos:column="14">-&gt;<pos:position pos:line="791" pos:column="19"/></operator><name pos:line="791" pos:column="16">cur<pos:position pos:line="791" pos:column="19"/></name></name> <operator pos:line="791" pos:column="20">=<pos:position pos:line="791" pos:column="21"/></operator> <literal type="number" pos:line="791" pos:column="22">1<pos:position pos:line="791" pos:column="23"/></literal></expr>;<pos:position pos:line="791" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="792" pos:column="9">state<pos:position pos:line="792" pos:column="14"/></name><operator pos:line="792" pos:column="14">-&gt;<pos:position pos:line="792" pos:column="19"/></operator><name pos:line="792" pos:column="16">last<pos:position pos:line="792" pos:column="20"/></name></name> <operator pos:line="792" pos:column="21">=<pos:position pos:line="792" pos:column="22"/></operator> <name pos:line="792" pos:column="23">i<pos:position pos:line="792" pos:column="24"/></name></expr>;<pos:position pos:line="792" pos:column="25"/></expr_stmt>
	<return pos:line="793" pos:column="9">return <expr><literal type="number" pos:line="793" pos:column="16">0<pos:position pos:line="793" pos:column="17"/></literal></expr>;<pos:position pos:line="793" pos:column="18"/></return>
}<pos:position pos:line="794" pos:column="2"/></block></function>

<comment type="block" pos:line="796" pos:column="1">/**
 * A split_mail_conv() callback that converts an StGit patch to an RFC2822
 * message suitable for parsing with git-mailinfo.
 */</comment>
<function><specifier pos:line="800" pos:column="1">static<pos:position pos:line="800" pos:column="7"/></specifier> <type><name pos:line="800" pos:column="8">int<pos:position pos:line="800" pos:column="11"/></name></type> <name pos:line="800" pos:column="12">stgit_patch_to_mail<pos:position pos:line="800" pos:column="31"/></name><parameter_list pos:line="800" pos:column="31">(<parameter><decl><type><name pos:line="800" pos:column="32">FILE<pos:position pos:line="800" pos:column="36"/></name> <modifier pos:line="800" pos:column="37">*<pos:position pos:line="800" pos:column="38"/></modifier></type><name pos:line="800" pos:column="38">out<pos:position pos:line="800" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="800" pos:column="43">FILE<pos:position pos:line="800" pos:column="47"/></name> <modifier pos:line="800" pos:column="48">*<pos:position pos:line="800" pos:column="49"/></modifier></type><name pos:line="800" pos:column="49">in<pos:position pos:line="800" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="800" pos:column="53">int<pos:position pos:line="800" pos:column="56"/></name></type> <name pos:line="800" pos:column="57">keep_cr<pos:position pos:line="800" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="800" pos:column="65"/></parameter_list>
<block pos:line="801" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="802" pos:column="9">struct<pos:position pos:line="802" pos:column="15"/></name> <name pos:line="802" pos:column="16">strbuf<pos:position pos:line="802" pos:column="22"/></name></name></type> <name pos:line="802" pos:column="23">sb<pos:position pos:line="802" pos:column="25"/></name> <init pos:line="802" pos:column="26">= <expr><name pos:line="802" pos:column="28">STRBUF_INIT<pos:position pos:line="802" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="802" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="803" pos:column="9">int<pos:position pos:line="803" pos:column="12"/></name></type> <name pos:line="803" pos:column="13">subject_printed<pos:position pos:line="803" pos:column="28"/></name> <init pos:line="803" pos:column="29">= <expr><literal type="number" pos:line="803" pos:column="31">0<pos:position pos:line="803" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="803" pos:column="33"/></decl_stmt>

	<while pos:line="805" pos:column="9">while <condition pos:line="805" pos:column="15">(<expr><operator pos:line="805" pos:column="16">!<pos:position pos:line="805" pos:column="17"/></operator><call><name pos:line="805" pos:column="17">strbuf_getline_lf<pos:position pos:line="805" pos:column="34"/></name><argument_list pos:line="805" pos:column="34">(<argument><expr><operator pos:line="805" pos:column="35">&amp;<pos:position pos:line="805" pos:column="40"/></operator><name pos:line="805" pos:column="36">sb<pos:position pos:line="805" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="805" pos:column="40">in<pos:position pos:line="805" pos:column="42"/></name></expr></argument>)<pos:position pos:line="805" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="805" pos:column="44"/></condition> <block pos:line="805" pos:column="45">{
		<decl_stmt><decl><type><specifier pos:line="806" pos:column="17">const<pos:position pos:line="806" pos:column="22"/></specifier> <name pos:line="806" pos:column="23">char<pos:position pos:line="806" pos:column="27"/></name> <modifier pos:line="806" pos:column="28">*<pos:position pos:line="806" pos:column="29"/></modifier></type><name pos:line="806" pos:column="29">str<pos:position pos:line="806" pos:column="32"/></name></decl>;<pos:position pos:line="806" pos:column="33"/></decl_stmt>

		<if pos:line="808" pos:column="17">if <condition pos:line="808" pos:column="20">(<expr><call><name pos:line="808" pos:column="21">str_isspace<pos:position pos:line="808" pos:column="32"/></name><argument_list pos:line="808" pos:column="32">(<argument><expr><name><name pos:line="808" pos:column="33">sb<pos:position pos:line="808" pos:column="35"/></name><operator pos:line="808" pos:column="35">.<pos:position pos:line="808" pos:column="36"/></operator><name pos:line="808" pos:column="36">buf<pos:position pos:line="808" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="808" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="808" pos:column="41"/></condition><then pos:line="808" pos:column="41">
			<block type="pseudo"><continue pos:line="809" pos:column="25">continue;<pos:position pos:line="809" pos:column="34"/></continue></block></then>
		<elseif pos:line="810" pos:column="17">else <if pos:line="810" pos:column="22">if <condition pos:line="810" pos:column="25">(<expr><call><name pos:line="810" pos:column="26">skip_prefix<pos:position pos:line="810" pos:column="37"/></name><argument_list pos:line="810" pos:column="37">(<argument><expr><name><name pos:line="810" pos:column="38">sb<pos:position pos:line="810" pos:column="40"/></name><operator pos:line="810" pos:column="40">.<pos:position pos:line="810" pos:column="41"/></operator><name pos:line="810" pos:column="41">buf<pos:position pos:line="810" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="810" pos:column="46">"Author:"<pos:position pos:line="810" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="810" pos:column="57">&amp;<pos:position pos:line="810" pos:column="62"/></operator><name pos:line="810" pos:column="58">str<pos:position pos:line="810" pos:column="61"/></name></expr></argument>)<pos:position pos:line="810" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="810" pos:column="63"/></condition><then pos:line="810" pos:column="63">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="811" pos:column="25">fprintf<pos:position pos:line="811" pos:column="32"/></name><argument_list pos:line="811" pos:column="32">(<argument><expr><name pos:line="811" pos:column="33">out<pos:position pos:line="811" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="811" pos:column="38">"From:%s\n"<pos:position pos:line="811" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="811" pos:column="51">str<pos:position pos:line="811" pos:column="54"/></name></expr></argument>)<pos:position pos:line="811" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="811" pos:column="56"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="812" pos:column="17">else <if pos:line="812" pos:column="22">if <condition pos:line="812" pos:column="25">(<expr><call><name pos:line="812" pos:column="26">starts_with<pos:position pos:line="812" pos:column="37"/></name><argument_list pos:line="812" pos:column="37">(<argument><expr><name><name pos:line="812" pos:column="38">sb<pos:position pos:line="812" pos:column="40"/></name><operator pos:line="812" pos:column="40">.<pos:position pos:line="812" pos:column="41"/></operator><name pos:line="812" pos:column="41">buf<pos:position pos:line="812" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="812" pos:column="46">"From"<pos:position pos:line="812" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="812" pos:column="53"/></argument_list></call> <operator pos:line="812" pos:column="54">||<pos:position pos:line="812" pos:column="56"/></operator> <call><name pos:line="812" pos:column="57">starts_with<pos:position pos:line="812" pos:column="68"/></name><argument_list pos:line="812" pos:column="68">(<argument><expr><name><name pos:line="812" pos:column="69">sb<pos:position pos:line="812" pos:column="71"/></name><operator pos:line="812" pos:column="71">.<pos:position pos:line="812" pos:column="72"/></operator><name pos:line="812" pos:column="72">buf<pos:position pos:line="812" pos:column="75"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="812" pos:column="77">"Date"<pos:position pos:line="812" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="812" pos:column="84"/></argument_list></call></expr>)<pos:position pos:line="812" pos:column="85"/></condition><then pos:line="812" pos:column="85">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="813" pos:column="25">fprintf<pos:position pos:line="813" pos:column="32"/></name><argument_list pos:line="813" pos:column="32">(<argument><expr><name pos:line="813" pos:column="33">out<pos:position pos:line="813" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="813" pos:column="38">"%s\n"<pos:position pos:line="813" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="813" pos:column="46">sb<pos:position pos:line="813" pos:column="48"/></name><operator pos:line="813" pos:column="48">.<pos:position pos:line="813" pos:column="49"/></operator><name pos:line="813" pos:column="49">buf<pos:position pos:line="813" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="813" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="813" pos:column="54"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="814" pos:column="17">else <if pos:line="814" pos:column="22">if <condition pos:line="814" pos:column="25">(<expr><operator pos:line="814" pos:column="26">!<pos:position pos:line="814" pos:column="27"/></operator><name pos:line="814" pos:column="27">subject_printed<pos:position pos:line="814" pos:column="42"/></name></expr>)<pos:position pos:line="814" pos:column="43"/></condition><then pos:line="814" pos:column="43"> <block pos:line="814" pos:column="44">{
			<expr_stmt><expr><call><name pos:line="815" pos:column="25">fprintf<pos:position pos:line="815" pos:column="32"/></name><argument_list pos:line="815" pos:column="32">(<argument><expr><name pos:line="815" pos:column="33">out<pos:position pos:line="815" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="815" pos:column="38">"Subject: %s\n"<pos:position pos:line="815" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="815" pos:column="55">sb<pos:position pos:line="815" pos:column="57"/></name><operator pos:line="815" pos:column="57">.<pos:position pos:line="815" pos:column="58"/></operator><name pos:line="815" pos:column="58">buf<pos:position pos:line="815" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="815" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="815" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><name pos:line="816" pos:column="25">subject_printed<pos:position pos:line="816" pos:column="40"/></name> <operator pos:line="816" pos:column="41">=<pos:position pos:line="816" pos:column="42"/></operator> <literal type="number" pos:line="816" pos:column="43">1<pos:position pos:line="816" pos:column="44"/></literal></expr>;<pos:position pos:line="816" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="817" pos:column="18"/></block></then></if></elseif> <else pos:line="817" pos:column="19">else <block pos:line="817" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="818" pos:column="25">fprintf<pos:position pos:line="818" pos:column="32"/></name><argument_list pos:line="818" pos:column="32">(<argument><expr><name pos:line="818" pos:column="33">out<pos:position pos:line="818" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="818" pos:column="38">"\n%s\n"<pos:position pos:line="818" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="818" pos:column="48">sb<pos:position pos:line="818" pos:column="50"/></name><operator pos:line="818" pos:column="50">.<pos:position pos:line="818" pos:column="51"/></operator><name pos:line="818" pos:column="51">buf<pos:position pos:line="818" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="818" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="818" pos:column="56"/></expr_stmt>
			<break pos:line="819" pos:column="25">break;<pos:position pos:line="819" pos:column="31"/></break>
		}<pos:position pos:line="820" pos:column="18"/></block></else></if>
	}<pos:position pos:line="821" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="823" pos:column="9">strbuf_reset<pos:position pos:line="823" pos:column="21"/></name><argument_list pos:line="823" pos:column="21">(<argument><expr><operator pos:line="823" pos:column="22">&amp;<pos:position pos:line="823" pos:column="27"/></operator><name pos:line="823" pos:column="23">sb<pos:position pos:line="823" pos:column="25"/></name></expr></argument>)<pos:position pos:line="823" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="823" pos:column="27"/></expr_stmt>
	<while pos:line="824" pos:column="9">while <condition pos:line="824" pos:column="15">(<expr><call><name pos:line="824" pos:column="16">strbuf_fread<pos:position pos:line="824" pos:column="28"/></name><argument_list pos:line="824" pos:column="28">(<argument><expr><operator pos:line="824" pos:column="29">&amp;<pos:position pos:line="824" pos:column="34"/></operator><name pos:line="824" pos:column="30">sb<pos:position pos:line="824" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="824" pos:column="34">8192<pos:position pos:line="824" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="824" pos:column="40">in<pos:position pos:line="824" pos:column="42"/></name></expr></argument>)<pos:position pos:line="824" pos:column="43"/></argument_list></call> <operator pos:line="824" pos:column="44">&gt;<pos:position pos:line="824" pos:column="48"/></operator> <literal type="number" pos:line="824" pos:column="46">0<pos:position pos:line="824" pos:column="47"/></literal></expr>)<pos:position pos:line="824" pos:column="48"/></condition> <block pos:line="824" pos:column="49">{
		<expr_stmt><expr><call><name pos:line="825" pos:column="17">fwrite<pos:position pos:line="825" pos:column="23"/></name><argument_list pos:line="825" pos:column="23">(<argument><expr><name><name pos:line="825" pos:column="24">sb<pos:position pos:line="825" pos:column="26"/></name><operator pos:line="825" pos:column="26">.<pos:position pos:line="825" pos:column="27"/></operator><name pos:line="825" pos:column="27">buf<pos:position pos:line="825" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="825" pos:column="32">1<pos:position pos:line="825" pos:column="33"/></literal></expr></argument>, <argument><expr><name><name pos:line="825" pos:column="35">sb<pos:position pos:line="825" pos:column="37"/></name><operator pos:line="825" pos:column="37">.<pos:position pos:line="825" pos:column="38"/></operator><name pos:line="825" pos:column="38">len<pos:position pos:line="825" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="825" pos:column="43">out<pos:position pos:line="825" pos:column="46"/></name></expr></argument>)<pos:position pos:line="825" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="825" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="826" pos:column="17">strbuf_reset<pos:position pos:line="826" pos:column="29"/></name><argument_list pos:line="826" pos:column="29">(<argument><expr><operator pos:line="826" pos:column="30">&amp;<pos:position pos:line="826" pos:column="35"/></operator><name pos:line="826" pos:column="31">sb<pos:position pos:line="826" pos:column="33"/></name></expr></argument>)<pos:position pos:line="826" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="826" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="827" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="829" pos:column="9">strbuf_release<pos:position pos:line="829" pos:column="23"/></name><argument_list pos:line="829" pos:column="23">(<argument><expr><operator pos:line="829" pos:column="24">&amp;<pos:position pos:line="829" pos:column="29"/></operator><name pos:line="829" pos:column="25">sb<pos:position pos:line="829" pos:column="27"/></name></expr></argument>)<pos:position pos:line="829" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="829" pos:column="29"/></expr_stmt>
	<return pos:line="830" pos:column="9">return <expr><literal type="number" pos:line="830" pos:column="16">0<pos:position pos:line="830" pos:column="17"/></literal></expr>;<pos:position pos:line="830" pos:column="18"/></return>
}<pos:position pos:line="831" pos:column="2"/></block></function>

<comment type="block" pos:line="833" pos:column="1">/**
 * This function only supports a single StGit series file in `paths`.
 *
 * Given an StGit series file, converts the StGit patches in the series into
 * RFC2822 messages suitable for parsing with git-mailinfo, and queues them in
 * the state directory.
 *
 * Returns 0 on success, -1 on failure.
 */</comment>
<function><specifier pos:line="842" pos:column="1">static<pos:position pos:line="842" pos:column="7"/></specifier> <type><name pos:line="842" pos:column="8">int<pos:position pos:line="842" pos:column="11"/></name></type> <name pos:line="842" pos:column="12">split_mail_stgit_series<pos:position pos:line="842" pos:column="35"/></name><parameter_list pos:line="842" pos:column="35">(<parameter><decl><type><name><name pos:line="842" pos:column="36">struct<pos:position pos:line="842" pos:column="42"/></name> <name pos:line="842" pos:column="43">am_state<pos:position pos:line="842" pos:column="51"/></name></name> <modifier pos:line="842" pos:column="52">*<pos:position pos:line="842" pos:column="53"/></modifier></type><name pos:line="842" pos:column="53">state<pos:position pos:line="842" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="842" pos:column="60">const<pos:position pos:line="842" pos:column="65"/></specifier> <name pos:line="842" pos:column="66">char<pos:position pos:line="842" pos:column="70"/></name> <modifier pos:line="842" pos:column="71">*<pos:position pos:line="842" pos:column="72"/></modifier><modifier pos:line="842" pos:column="72">*<pos:position pos:line="842" pos:column="73"/></modifier></type><name pos:line="842" pos:column="73">paths<pos:position pos:line="842" pos:column="78"/></name></decl></parameter>,
					<parameter><decl><type><name pos:line="843" pos:column="41">int<pos:position pos:line="843" pos:column="44"/></name></type> <name pos:line="843" pos:column="45">keep_cr<pos:position pos:line="843" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="843" pos:column="53"/></parameter_list>
<block pos:line="844" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="845" pos:column="9">const<pos:position pos:line="845" pos:column="14"/></specifier> <name pos:line="845" pos:column="15">char<pos:position pos:line="845" pos:column="19"/></name> <modifier pos:line="845" pos:column="20">*<pos:position pos:line="845" pos:column="21"/></modifier></type><name pos:line="845" pos:column="21">series_dir<pos:position pos:line="845" pos:column="31"/></name></decl>;<pos:position pos:line="845" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="846" pos:column="9">char<pos:position pos:line="846" pos:column="13"/></name> <modifier pos:line="846" pos:column="14">*<pos:position pos:line="846" pos:column="15"/></modifier></type><name pos:line="846" pos:column="15">series_dir_buf<pos:position pos:line="846" pos:column="29"/></name></decl>;<pos:position pos:line="846" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="847" pos:column="9">FILE<pos:position pos:line="847" pos:column="13"/></name> <modifier pos:line="847" pos:column="14">*<pos:position pos:line="847" pos:column="15"/></modifier></type><name pos:line="847" pos:column="15">fp<pos:position pos:line="847" pos:column="17"/></name></decl>;<pos:position pos:line="847" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="848" pos:column="9">struct<pos:position pos:line="848" pos:column="15"/></name> <name pos:line="848" pos:column="16">argv_array<pos:position pos:line="848" pos:column="26"/></name></name></type> <name pos:line="848" pos:column="27">patches<pos:position pos:line="848" pos:column="34"/></name> <init pos:line="848" pos:column="35">= <expr><name pos:line="848" pos:column="37">ARGV_ARRAY_INIT<pos:position pos:line="848" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="848" pos:column="53"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="849" pos:column="9">struct<pos:position pos:line="849" pos:column="15"/></name> <name pos:line="849" pos:column="16">strbuf<pos:position pos:line="849" pos:column="22"/></name></name></type> <name pos:line="849" pos:column="23">sb<pos:position pos:line="849" pos:column="25"/></name> <init pos:line="849" pos:column="26">= <expr><name pos:line="849" pos:column="28">STRBUF_INIT<pos:position pos:line="849" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="849" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="850" pos:column="9">int<pos:position pos:line="850" pos:column="12"/></name></type> <name pos:line="850" pos:column="13">ret<pos:position pos:line="850" pos:column="16"/></name></decl>;<pos:position pos:line="850" pos:column="17"/></decl_stmt>

	<if pos:line="852" pos:column="9">if <condition pos:line="852" pos:column="12">(<expr><operator pos:line="852" pos:column="13">!<pos:position pos:line="852" pos:column="14"/></operator><name><name pos:line="852" pos:column="14">paths<pos:position pos:line="852" pos:column="19"/></name><index pos:line="852" pos:column="19">[<expr><literal type="number" pos:line="852" pos:column="20">0<pos:position pos:line="852" pos:column="21"/></literal></expr>]<pos:position pos:line="852" pos:column="22"/></index></name> <operator pos:line="852" pos:column="23">||<pos:position pos:line="852" pos:column="25"/></operator> <name><name pos:line="852" pos:column="26">paths<pos:position pos:line="852" pos:column="31"/></name><index pos:line="852" pos:column="31">[<expr><literal type="number" pos:line="852" pos:column="32">1<pos:position pos:line="852" pos:column="33"/></literal></expr>]<pos:position pos:line="852" pos:column="34"/></index></name></expr>)<pos:position pos:line="852" pos:column="35"/></condition><then pos:line="852" pos:column="35">
		<block type="pseudo"><return pos:line="853" pos:column="17">return <expr><call><name pos:line="853" pos:column="24">error<pos:position pos:line="853" pos:column="29"/></name><argument_list pos:line="853" pos:column="29">(<argument><expr><call><name pos:line="853" pos:column="30">_<pos:position pos:line="853" pos:column="31"/></name><argument_list pos:line="853" pos:column="31">(<argument><expr><literal type="string" pos:line="853" pos:column="32">"Only one StGIT patch series can be applied at once"<pos:position pos:line="853" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="853" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="853" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="853" pos:column="87"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="855" pos:column="9">series_dir_buf<pos:position pos:line="855" pos:column="23"/></name> <operator pos:line="855" pos:column="24">=<pos:position pos:line="855" pos:column="25"/></operator> <call><name pos:line="855" pos:column="26">xstrdup<pos:position pos:line="855" pos:column="33"/></name><argument_list pos:line="855" pos:column="33">(<argument><expr><operator pos:line="855" pos:column="34">*<pos:position pos:line="855" pos:column="35"/></operator><name pos:line="855" pos:column="35">paths<pos:position pos:line="855" pos:column="40"/></name></expr></argument>)<pos:position pos:line="855" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="855" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name pos:line="856" pos:column="9">series_dir<pos:position pos:line="856" pos:column="19"/></name> <operator pos:line="856" pos:column="20">=<pos:position pos:line="856" pos:column="21"/></operator> <call><name pos:line="856" pos:column="22">dirname<pos:position pos:line="856" pos:column="29"/></name><argument_list pos:line="856" pos:column="29">(<argument><expr><name pos:line="856" pos:column="30">series_dir_buf<pos:position pos:line="856" pos:column="44"/></name></expr></argument>)<pos:position pos:line="856" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="856" pos:column="46"/></expr_stmt>

	<expr_stmt><expr><name pos:line="858" pos:column="9">fp<pos:position pos:line="858" pos:column="11"/></name> <operator pos:line="858" pos:column="12">=<pos:position pos:line="858" pos:column="13"/></operator> <call><name pos:line="858" pos:column="14">fopen<pos:position pos:line="858" pos:column="19"/></name><argument_list pos:line="858" pos:column="19">(<argument><expr><operator pos:line="858" pos:column="20">*<pos:position pos:line="858" pos:column="21"/></operator><name pos:line="858" pos:column="21">paths<pos:position pos:line="858" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="858" pos:column="28">"r"<pos:position pos:line="858" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="858" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="858" pos:column="33"/></expr_stmt>
	<if pos:line="859" pos:column="9">if <condition pos:line="859" pos:column="12">(<expr><operator pos:line="859" pos:column="13">!<pos:position pos:line="859" pos:column="14"/></operator><name pos:line="859" pos:column="14">fp<pos:position pos:line="859" pos:column="16"/></name></expr>)<pos:position pos:line="859" pos:column="17"/></condition><then pos:line="859" pos:column="17">
		<block type="pseudo"><return pos:line="860" pos:column="17">return <expr><call><name pos:line="860" pos:column="24">error<pos:position pos:line="860" pos:column="29"/></name><argument_list pos:line="860" pos:column="29">(<argument><expr><call><name pos:line="860" pos:column="30">_<pos:position pos:line="860" pos:column="31"/></name><argument_list pos:line="860" pos:column="31">(<argument><expr><literal type="string" pos:line="860" pos:column="32">"could not open '%s' for reading: %s"<pos:position pos:line="860" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="860" pos:column="70"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="860" pos:column="72">*<pos:position pos:line="860" pos:column="73"/></operator><name pos:line="860" pos:column="73">paths<pos:position pos:line="860" pos:column="78"/></name></expr></argument>,
				<argument><expr><call><name pos:line="861" pos:column="33">strerror<pos:position pos:line="861" pos:column="41"/></name><argument_list pos:line="861" pos:column="41">(<argument><expr><name pos:line="861" pos:column="42">errno<pos:position pos:line="861" pos:column="47"/></name></expr></argument>)<pos:position pos:line="861" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="861" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="861" pos:column="50"/></return></block></then></if>

	<while pos:line="863" pos:column="9">while <condition pos:line="863" pos:column="15">(<expr><operator pos:line="863" pos:column="16">!<pos:position pos:line="863" pos:column="17"/></operator><call><name pos:line="863" pos:column="17">strbuf_getline_lf<pos:position pos:line="863" pos:column="34"/></name><argument_list pos:line="863" pos:column="34">(<argument><expr><operator pos:line="863" pos:column="35">&amp;<pos:position pos:line="863" pos:column="40"/></operator><name pos:line="863" pos:column="36">sb<pos:position pos:line="863" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="863" pos:column="40">fp<pos:position pos:line="863" pos:column="42"/></name></expr></argument>)<pos:position pos:line="863" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="863" pos:column="44"/></condition> <block pos:line="863" pos:column="45">{
		<if pos:line="864" pos:column="17">if <condition pos:line="864" pos:column="20">(<expr><operator pos:line="864" pos:column="21">*<pos:position pos:line="864" pos:column="22"/></operator><name><name pos:line="864" pos:column="22">sb<pos:position pos:line="864" pos:column="24"/></name><operator pos:line="864" pos:column="24">.<pos:position pos:line="864" pos:column="25"/></operator><name pos:line="864" pos:column="25">buf<pos:position pos:line="864" pos:column="28"/></name></name> <operator pos:line="864" pos:column="29">==<pos:position pos:line="864" pos:column="31"/></operator> <literal type="char" pos:line="864" pos:column="32">'#'<pos:position pos:line="864" pos:column="35"/></literal></expr>)<pos:position pos:line="864" pos:column="36"/></condition><then pos:line="864" pos:column="36">
			<block type="pseudo"><continue pos:line="865" pos:column="25">continue;<pos:position pos:line="865" pos:column="34"/></continue></block></then></if> <comment type="block" pos:line="865" pos:column="35">/* skip comment lines */</comment>

		<expr_stmt><expr><call><name pos:line="867" pos:column="17">argv_array_push<pos:position pos:line="867" pos:column="32"/></name><argument_list pos:line="867" pos:column="32">(<argument><expr><operator pos:line="867" pos:column="33">&amp;<pos:position pos:line="867" pos:column="38"/></operator><name pos:line="867" pos:column="34">patches<pos:position pos:line="867" pos:column="41"/></name></expr></argument>, <argument><expr><call><name pos:line="867" pos:column="43">mkpath<pos:position pos:line="867" pos:column="49"/></name><argument_list pos:line="867" pos:column="49">(<argument><expr><literal type="string" pos:line="867" pos:column="50">"%s/%s"<pos:position pos:line="867" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="867" pos:column="59">series_dir<pos:position pos:line="867" pos:column="69"/></name></expr></argument>, <argument><expr><name><name pos:line="867" pos:column="71">sb<pos:position pos:line="867" pos:column="73"/></name><operator pos:line="867" pos:column="73">.<pos:position pos:line="867" pos:column="74"/></operator><name pos:line="867" pos:column="74">buf<pos:position pos:line="867" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="867" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="867" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="867" pos:column="80"/></expr_stmt>
	}<pos:position pos:line="868" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="870" pos:column="9">fclose<pos:position pos:line="870" pos:column="15"/></name><argument_list pos:line="870" pos:column="15">(<argument><expr><name pos:line="870" pos:column="16">fp<pos:position pos:line="870" pos:column="18"/></name></expr></argument>)<pos:position pos:line="870" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="870" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="871" pos:column="9">strbuf_release<pos:position pos:line="871" pos:column="23"/></name><argument_list pos:line="871" pos:column="23">(<argument><expr><operator pos:line="871" pos:column="24">&amp;<pos:position pos:line="871" pos:column="29"/></operator><name pos:line="871" pos:column="25">sb<pos:position pos:line="871" pos:column="27"/></name></expr></argument>)<pos:position pos:line="871" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="871" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="872" pos:column="9">free<pos:position pos:line="872" pos:column="13"/></name><argument_list pos:line="872" pos:column="13">(<argument><expr><name pos:line="872" pos:column="14">series_dir_buf<pos:position pos:line="872" pos:column="28"/></name></expr></argument>)<pos:position pos:line="872" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="872" pos:column="30"/></expr_stmt>

	<expr_stmt><expr><name pos:line="874" pos:column="9">ret<pos:position pos:line="874" pos:column="12"/></name> <operator pos:line="874" pos:column="13">=<pos:position pos:line="874" pos:column="14"/></operator> <call><name pos:line="874" pos:column="15">split_mail_conv<pos:position pos:line="874" pos:column="30"/></name><argument_list pos:line="874" pos:column="30">(<argument><expr><name pos:line="874" pos:column="31">stgit_patch_to_mail<pos:position pos:line="874" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="874" pos:column="52">state<pos:position pos:line="874" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="874" pos:column="59">patches<pos:position pos:line="874" pos:column="66"/></name><operator pos:line="874" pos:column="66">.<pos:position pos:line="874" pos:column="67"/></operator><name pos:line="874" pos:column="67">argv<pos:position pos:line="874" pos:column="71"/></name></name></expr></argument>, <argument><expr><name pos:line="874" pos:column="73">keep_cr<pos:position pos:line="874" pos:column="80"/></name></expr></argument>)<pos:position pos:line="874" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="874" pos:column="82"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="876" pos:column="9">argv_array_clear<pos:position pos:line="876" pos:column="25"/></name><argument_list pos:line="876" pos:column="25">(<argument><expr><operator pos:line="876" pos:column="26">&amp;<pos:position pos:line="876" pos:column="31"/></operator><name pos:line="876" pos:column="27">patches<pos:position pos:line="876" pos:column="34"/></name></expr></argument>)<pos:position pos:line="876" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="876" pos:column="36"/></expr_stmt>
	<return pos:line="877" pos:column="9">return <expr><name pos:line="877" pos:column="16">ret<pos:position pos:line="877" pos:column="19"/></name></expr>;<pos:position pos:line="877" pos:column="20"/></return>
}<pos:position pos:line="878" pos:column="2"/></block></function>

<comment type="block" pos:line="880" pos:column="1">/**
 * A split_patches_conv() callback that converts a mercurial patch to a RFC2822
 * message suitable for parsing with git-mailinfo.
 */</comment>
<function><specifier pos:line="884" pos:column="1">static<pos:position pos:line="884" pos:column="7"/></specifier> <type><name pos:line="884" pos:column="8">int<pos:position pos:line="884" pos:column="11"/></name></type> <name pos:line="884" pos:column="12">hg_patch_to_mail<pos:position pos:line="884" pos:column="28"/></name><parameter_list pos:line="884" pos:column="28">(<parameter><decl><type><name pos:line="884" pos:column="29">FILE<pos:position pos:line="884" pos:column="33"/></name> <modifier pos:line="884" pos:column="34">*<pos:position pos:line="884" pos:column="35"/></modifier></type><name pos:line="884" pos:column="35">out<pos:position pos:line="884" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="884" pos:column="40">FILE<pos:position pos:line="884" pos:column="44"/></name> <modifier pos:line="884" pos:column="45">*<pos:position pos:line="884" pos:column="46"/></modifier></type><name pos:line="884" pos:column="46">in<pos:position pos:line="884" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="884" pos:column="50">int<pos:position pos:line="884" pos:column="53"/></name></type> <name pos:line="884" pos:column="54">keep_cr<pos:position pos:line="884" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="884" pos:column="62"/></parameter_list>
<block pos:line="885" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="886" pos:column="9">struct<pos:position pos:line="886" pos:column="15"/></name> <name pos:line="886" pos:column="16">strbuf<pos:position pos:line="886" pos:column="22"/></name></name></type> <name pos:line="886" pos:column="23">sb<pos:position pos:line="886" pos:column="25"/></name> <init pos:line="886" pos:column="26">= <expr><name pos:line="886" pos:column="28">STRBUF_INIT<pos:position pos:line="886" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="886" pos:column="40"/></decl_stmt>

	<while pos:line="888" pos:column="9">while <condition pos:line="888" pos:column="15">(<expr><operator pos:line="888" pos:column="16">!<pos:position pos:line="888" pos:column="17"/></operator><call><name pos:line="888" pos:column="17">strbuf_getline_lf<pos:position pos:line="888" pos:column="34"/></name><argument_list pos:line="888" pos:column="34">(<argument><expr><operator pos:line="888" pos:column="35">&amp;<pos:position pos:line="888" pos:column="40"/></operator><name pos:line="888" pos:column="36">sb<pos:position pos:line="888" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="888" pos:column="40">in<pos:position pos:line="888" pos:column="42"/></name></expr></argument>)<pos:position pos:line="888" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="888" pos:column="44"/></condition> <block pos:line="888" pos:column="45">{
		<decl_stmt><decl><type><specifier pos:line="889" pos:column="17">const<pos:position pos:line="889" pos:column="22"/></specifier> <name pos:line="889" pos:column="23">char<pos:position pos:line="889" pos:column="27"/></name> <modifier pos:line="889" pos:column="28">*<pos:position pos:line="889" pos:column="29"/></modifier></type><name pos:line="889" pos:column="29">str<pos:position pos:line="889" pos:column="32"/></name></decl>;<pos:position pos:line="889" pos:column="33"/></decl_stmt>

		<if pos:line="891" pos:column="17">if <condition pos:line="891" pos:column="20">(<expr><call><name pos:line="891" pos:column="21">skip_prefix<pos:position pos:line="891" pos:column="32"/></name><argument_list pos:line="891" pos:column="32">(<argument><expr><name><name pos:line="891" pos:column="33">sb<pos:position pos:line="891" pos:column="35"/></name><operator pos:line="891" pos:column="35">.<pos:position pos:line="891" pos:column="36"/></operator><name pos:line="891" pos:column="36">buf<pos:position pos:line="891" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="891" pos:column="41">"# User "<pos:position pos:line="891" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="891" pos:column="52">&amp;<pos:position pos:line="891" pos:column="57"/></operator><name pos:line="891" pos:column="53">str<pos:position pos:line="891" pos:column="56"/></name></expr></argument>)<pos:position pos:line="891" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="891" pos:column="58"/></condition><then pos:line="891" pos:column="58">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="892" pos:column="25">fprintf<pos:position pos:line="892" pos:column="32"/></name><argument_list pos:line="892" pos:column="32">(<argument><expr><name pos:line="892" pos:column="33">out<pos:position pos:line="892" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="892" pos:column="38">"From: %s\n"<pos:position pos:line="892" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="892" pos:column="52">str<pos:position pos:line="892" pos:column="55"/></name></expr></argument>)<pos:position pos:line="892" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="892" pos:column="57"/></expr_stmt></block></then>
		<elseif pos:line="893" pos:column="17">else <if pos:line="893" pos:column="22">if <condition pos:line="893" pos:column="25">(<expr><call><name pos:line="893" pos:column="26">skip_prefix<pos:position pos:line="893" pos:column="37"/></name><argument_list pos:line="893" pos:column="37">(<argument><expr><name><name pos:line="893" pos:column="38">sb<pos:position pos:line="893" pos:column="40"/></name><operator pos:line="893" pos:column="40">.<pos:position pos:line="893" pos:column="41"/></operator><name pos:line="893" pos:column="41">buf<pos:position pos:line="893" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="893" pos:column="46">"# Date "<pos:position pos:line="893" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="893" pos:column="57">&amp;<pos:position pos:line="893" pos:column="62"/></operator><name pos:line="893" pos:column="58">str<pos:position pos:line="893" pos:column="61"/></name></expr></argument>)<pos:position pos:line="893" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="893" pos:column="63"/></condition><then pos:line="893" pos:column="63"> <block pos:line="893" pos:column="64">{
			<decl_stmt><decl><type><name pos:line="894" pos:column="25">unsigned<pos:position pos:line="894" pos:column="33"/></name> <name pos:line="894" pos:column="34">long<pos:position pos:line="894" pos:column="38"/></name></type> <name pos:line="894" pos:column="39">timestamp<pos:position pos:line="894" pos:column="48"/></name></decl>;<pos:position pos:line="894" pos:column="49"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="895" pos:column="25">long<pos:position pos:line="895" pos:column="29"/></name></type> <name pos:line="895" pos:column="30">tz<pos:position pos:line="895" pos:column="32"/></name></decl>, <decl><type ref="prev"/><name pos:line="895" pos:column="34">tz2<pos:position pos:line="895" pos:column="37"/></name></decl>;<pos:position pos:line="895" pos:column="38"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="896" pos:column="25">char<pos:position pos:line="896" pos:column="29"/></name> <modifier pos:line="896" pos:column="30">*<pos:position pos:line="896" pos:column="31"/></modifier></type><name pos:line="896" pos:column="31">end<pos:position pos:line="896" pos:column="34"/></name></decl>;<pos:position pos:line="896" pos:column="35"/></decl_stmt>

			<expr_stmt><expr><name pos:line="898" pos:column="25">errno<pos:position pos:line="898" pos:column="30"/></name> <operator pos:line="898" pos:column="31">=<pos:position pos:line="898" pos:column="32"/></operator> <literal type="number" pos:line="898" pos:column="33">0<pos:position pos:line="898" pos:column="34"/></literal></expr>;<pos:position pos:line="898" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><name pos:line="899" pos:column="25">timestamp<pos:position pos:line="899" pos:column="34"/></name> <operator pos:line="899" pos:column="35">=<pos:position pos:line="899" pos:column="36"/></operator> <call><name pos:line="899" pos:column="37">strtoul<pos:position pos:line="899" pos:column="44"/></name><argument_list pos:line="899" pos:column="44">(<argument><expr><name pos:line="899" pos:column="45">str<pos:position pos:line="899" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="899" pos:column="50">&amp;<pos:position pos:line="899" pos:column="55"/></operator><name pos:line="899" pos:column="51">end<pos:position pos:line="899" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="899" pos:column="56">10<pos:position pos:line="899" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="899" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="899" pos:column="60"/></expr_stmt>
			<if pos:line="900" pos:column="25">if <condition pos:line="900" pos:column="28">(<expr><name pos:line="900" pos:column="29">errno<pos:position pos:line="900" pos:column="34"/></name></expr>)<pos:position pos:line="900" pos:column="35"/></condition><then pos:line="900" pos:column="35">
				<block type="pseudo"><return pos:line="901" pos:column="33">return <expr><call><name pos:line="901" pos:column="40">error<pos:position pos:line="901" pos:column="45"/></name><argument_list pos:line="901" pos:column="45">(<argument><expr><call><name pos:line="901" pos:column="46">_<pos:position pos:line="901" pos:column="47"/></name><argument_list pos:line="901" pos:column="47">(<argument><expr><literal type="string" pos:line="901" pos:column="48">"invalid timestamp"<pos:position pos:line="901" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="901" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="901" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="901" pos:column="70"/></return></block></then></if>

			<if pos:line="903" pos:column="25">if <condition pos:line="903" pos:column="28">(<expr><operator pos:line="903" pos:column="29">!<pos:position pos:line="903" pos:column="30"/></operator><call><name pos:line="903" pos:column="30">skip_prefix<pos:position pos:line="903" pos:column="41"/></name><argument_list pos:line="903" pos:column="41">(<argument><expr><name pos:line="903" pos:column="42">end<pos:position pos:line="903" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="903" pos:column="47">" "<pos:position pos:line="903" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="903" pos:column="52">&amp;<pos:position pos:line="903" pos:column="57"/></operator><name pos:line="903" pos:column="53">str<pos:position pos:line="903" pos:column="56"/></name></expr></argument>)<pos:position pos:line="903" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="903" pos:column="58"/></condition><then pos:line="903" pos:column="58">
				<block type="pseudo"><return pos:line="904" pos:column="33">return <expr><call><name pos:line="904" pos:column="40">error<pos:position pos:line="904" pos:column="45"/></name><argument_list pos:line="904" pos:column="45">(<argument><expr><call><name pos:line="904" pos:column="46">_<pos:position pos:line="904" pos:column="47"/></name><argument_list pos:line="904" pos:column="47">(<argument><expr><literal type="string" pos:line="904" pos:column="48">"invalid Date line"<pos:position pos:line="904" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="904" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="904" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="904" pos:column="70"/></return></block></then></if>

			<expr_stmt><expr><name pos:line="906" pos:column="25">errno<pos:position pos:line="906" pos:column="30"/></name> <operator pos:line="906" pos:column="31">=<pos:position pos:line="906" pos:column="32"/></operator> <literal type="number" pos:line="906" pos:column="33">0<pos:position pos:line="906" pos:column="34"/></literal></expr>;<pos:position pos:line="906" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><name pos:line="907" pos:column="25">tz<pos:position pos:line="907" pos:column="27"/></name> <operator pos:line="907" pos:column="28">=<pos:position pos:line="907" pos:column="29"/></operator> <call><name pos:line="907" pos:column="30">strtol<pos:position pos:line="907" pos:column="36"/></name><argument_list pos:line="907" pos:column="36">(<argument><expr><name pos:line="907" pos:column="37">str<pos:position pos:line="907" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="907" pos:column="42">&amp;<pos:position pos:line="907" pos:column="47"/></operator><name pos:line="907" pos:column="43">end<pos:position pos:line="907" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="907" pos:column="48">10<pos:position pos:line="907" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="907" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="907" pos:column="52"/></expr_stmt>
			<if pos:line="908" pos:column="25">if <condition pos:line="908" pos:column="28">(<expr><name pos:line="908" pos:column="29">errno<pos:position pos:line="908" pos:column="34"/></name></expr>)<pos:position pos:line="908" pos:column="35"/></condition><then pos:line="908" pos:column="35">
				<block type="pseudo"><return pos:line="909" pos:column="33">return <expr><call><name pos:line="909" pos:column="40">error<pos:position pos:line="909" pos:column="45"/></name><argument_list pos:line="909" pos:column="45">(<argument><expr><call><name pos:line="909" pos:column="46">_<pos:position pos:line="909" pos:column="47"/></name><argument_list pos:line="909" pos:column="47">(<argument><expr><literal type="string" pos:line="909" pos:column="48">"invalid timezone offset"<pos:position pos:line="909" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="909" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="909" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="909" pos:column="76"/></return></block></then></if>

			<if pos:line="911" pos:column="25">if <condition pos:line="911" pos:column="28">(<expr><operator pos:line="911" pos:column="29">*<pos:position pos:line="911" pos:column="30"/></operator><name pos:line="911" pos:column="30">end<pos:position pos:line="911" pos:column="33"/></name></expr>)<pos:position pos:line="911" pos:column="34"/></condition><then pos:line="911" pos:column="34">
				<block type="pseudo"><return pos:line="912" pos:column="33">return <expr><call><name pos:line="912" pos:column="40">error<pos:position pos:line="912" pos:column="45"/></name><argument_list pos:line="912" pos:column="45">(<argument><expr><call><name pos:line="912" pos:column="46">_<pos:position pos:line="912" pos:column="47"/></name><argument_list pos:line="912" pos:column="47">(<argument><expr><literal type="string" pos:line="912" pos:column="48">"invalid Date line"<pos:position pos:line="912" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="912" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="912" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="912" pos:column="70"/></return></block></then></if>

			<comment type="block" pos:line="914" pos:column="25">/*
			 * mercurial's timezone is in seconds west of UTC,
			 * however git's timezone is in hours + minutes east of
			 * UTC. Convert it.
			 */</comment>
			<expr_stmt><expr><name pos:line="919" pos:column="25">tz2<pos:position pos:line="919" pos:column="28"/></name> <operator pos:line="919" pos:column="29">=<pos:position pos:line="919" pos:column="30"/></operator> <call><name pos:line="919" pos:column="31">labs<pos:position pos:line="919" pos:column="35"/></name><argument_list pos:line="919" pos:column="35">(<argument><expr><name pos:line="919" pos:column="36">tz<pos:position pos:line="919" pos:column="38"/></name></expr></argument>)<pos:position pos:line="919" pos:column="39"/></argument_list></call> <operator pos:line="919" pos:column="40">/<pos:position pos:line="919" pos:column="41"/></operator> <literal type="number" pos:line="919" pos:column="42">3600<pos:position pos:line="919" pos:column="46"/></literal> <operator pos:line="919" pos:column="47">*<pos:position pos:line="919" pos:column="48"/></operator> <literal type="number" pos:line="919" pos:column="49">100<pos:position pos:line="919" pos:column="52"/></literal> <operator pos:line="919" pos:column="53">+<pos:position pos:line="919" pos:column="54"/></operator> <call><name pos:line="919" pos:column="55">labs<pos:position pos:line="919" pos:column="59"/></name><argument_list pos:line="919" pos:column="59">(<argument><expr><name pos:line="919" pos:column="60">tz<pos:position pos:line="919" pos:column="62"/></name></expr></argument>)<pos:position pos:line="919" pos:column="63"/></argument_list></call> <operator pos:line="919" pos:column="64">%<pos:position pos:line="919" pos:column="65"/></operator> <literal type="number" pos:line="919" pos:column="66">3600<pos:position pos:line="919" pos:column="70"/></literal> <operator pos:line="919" pos:column="71">/<pos:position pos:line="919" pos:column="72"/></operator> <literal type="number" pos:line="919" pos:column="73">60<pos:position pos:line="919" pos:column="75"/></literal></expr>;<pos:position pos:line="919" pos:column="76"/></expr_stmt>
			<if pos:line="920" pos:column="25">if <condition pos:line="920" pos:column="28">(<expr><name pos:line="920" pos:column="29">tz<pos:position pos:line="920" pos:column="31"/></name> <operator pos:line="920" pos:column="32">&gt;<pos:position pos:line="920" pos:column="36"/></operator> <literal type="number" pos:line="920" pos:column="34">0<pos:position pos:line="920" pos:column="35"/></literal></expr>)<pos:position pos:line="920" pos:column="36"/></condition><then pos:line="920" pos:column="36">
				<block type="pseudo"><expr_stmt><expr><name pos:line="921" pos:column="33">tz2<pos:position pos:line="921" pos:column="36"/></name> <operator pos:line="921" pos:column="37">=<pos:position pos:line="921" pos:column="38"/></operator> <operator pos:line="921" pos:column="39">-<pos:position pos:line="921" pos:column="40"/></operator><name pos:line="921" pos:column="40">tz2<pos:position pos:line="921" pos:column="43"/></name></expr>;<pos:position pos:line="921" pos:column="44"/></expr_stmt></block></then></if>

			<expr_stmt><expr><call><name pos:line="923" pos:column="25">fprintf<pos:position pos:line="923" pos:column="32"/></name><argument_list pos:line="923" pos:column="32">(<argument><expr><name pos:line="923" pos:column="33">out<pos:position pos:line="923" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="923" pos:column="38">"Date: %s\n"<pos:position pos:line="923" pos:column="50"/></literal></expr></argument>, <argument><expr><call><name pos:line="923" pos:column="52">show_date<pos:position pos:line="923" pos:column="61"/></name><argument_list pos:line="923" pos:column="61">(<argument><expr><name pos:line="923" pos:column="62">timestamp<pos:position pos:line="923" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="923" pos:column="73">tz2<pos:position pos:line="923" pos:column="76"/></name></expr></argument>, <argument><expr><call><name pos:line="923" pos:column="78">DATE_MODE<pos:position pos:line="923" pos:column="87"/></name><argument_list pos:line="923" pos:column="87">(<argument><expr><name pos:line="923" pos:column="88">RFC2822<pos:position pos:line="923" pos:column="95"/></name></expr></argument>)<pos:position pos:line="923" pos:column="96"/></argument_list></call></expr></argument>)<pos:position pos:line="923" pos:column="97"/></argument_list></call></expr></argument>)<pos:position pos:line="923" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="923" pos:column="99"/></expr_stmt>
		}<pos:position pos:line="924" pos:column="18"/></block></then></if></elseif> <elseif pos:line="924" pos:column="19">else <if pos:line="924" pos:column="24">if <condition pos:line="924" pos:column="27">(<expr><call><name pos:line="924" pos:column="28">starts_with<pos:position pos:line="924" pos:column="39"/></name><argument_list pos:line="924" pos:column="39">(<argument><expr><name><name pos:line="924" pos:column="40">sb<pos:position pos:line="924" pos:column="42"/></name><operator pos:line="924" pos:column="42">.<pos:position pos:line="924" pos:column="43"/></operator><name pos:line="924" pos:column="43">buf<pos:position pos:line="924" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="924" pos:column="48">"# "<pos:position pos:line="924" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="924" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="924" pos:column="54"/></condition><then pos:line="924" pos:column="54"> <block pos:line="924" pos:column="55">{
			<continue pos:line="925" pos:column="25">continue;<pos:position pos:line="925" pos:column="34"/></continue>
		}<pos:position pos:line="926" pos:column="18"/></block></then></if></elseif> <else pos:line="926" pos:column="19">else <block pos:line="926" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="927" pos:column="25">fprintf<pos:position pos:line="927" pos:column="32"/></name><argument_list pos:line="927" pos:column="32">(<argument><expr><name pos:line="927" pos:column="33">out<pos:position pos:line="927" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="927" pos:column="38">"\n%s\n"<pos:position pos:line="927" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="927" pos:column="48">sb<pos:position pos:line="927" pos:column="50"/></name><operator pos:line="927" pos:column="50">.<pos:position pos:line="927" pos:column="51"/></operator><name pos:line="927" pos:column="51">buf<pos:position pos:line="927" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="927" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="927" pos:column="56"/></expr_stmt>
			<break pos:line="928" pos:column="25">break;<pos:position pos:line="928" pos:column="31"/></break>
		}<pos:position pos:line="929" pos:column="18"/></block></else></if>
	}<pos:position pos:line="930" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="932" pos:column="9">strbuf_reset<pos:position pos:line="932" pos:column="21"/></name><argument_list pos:line="932" pos:column="21">(<argument><expr><operator pos:line="932" pos:column="22">&amp;<pos:position pos:line="932" pos:column="27"/></operator><name pos:line="932" pos:column="23">sb<pos:position pos:line="932" pos:column="25"/></name></expr></argument>)<pos:position pos:line="932" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="932" pos:column="27"/></expr_stmt>
	<while pos:line="933" pos:column="9">while <condition pos:line="933" pos:column="15">(<expr><call><name pos:line="933" pos:column="16">strbuf_fread<pos:position pos:line="933" pos:column="28"/></name><argument_list pos:line="933" pos:column="28">(<argument><expr><operator pos:line="933" pos:column="29">&amp;<pos:position pos:line="933" pos:column="34"/></operator><name pos:line="933" pos:column="30">sb<pos:position pos:line="933" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="933" pos:column="34">8192<pos:position pos:line="933" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="933" pos:column="40">in<pos:position pos:line="933" pos:column="42"/></name></expr></argument>)<pos:position pos:line="933" pos:column="43"/></argument_list></call> <operator pos:line="933" pos:column="44">&gt;<pos:position pos:line="933" pos:column="48"/></operator> <literal type="number" pos:line="933" pos:column="46">0<pos:position pos:line="933" pos:column="47"/></literal></expr>)<pos:position pos:line="933" pos:column="48"/></condition> <block pos:line="933" pos:column="49">{
		<expr_stmt><expr><call><name pos:line="934" pos:column="17">fwrite<pos:position pos:line="934" pos:column="23"/></name><argument_list pos:line="934" pos:column="23">(<argument><expr><name><name pos:line="934" pos:column="24">sb<pos:position pos:line="934" pos:column="26"/></name><operator pos:line="934" pos:column="26">.<pos:position pos:line="934" pos:column="27"/></operator><name pos:line="934" pos:column="27">buf<pos:position pos:line="934" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="934" pos:column="32">1<pos:position pos:line="934" pos:column="33"/></literal></expr></argument>, <argument><expr><name><name pos:line="934" pos:column="35">sb<pos:position pos:line="934" pos:column="37"/></name><operator pos:line="934" pos:column="37">.<pos:position pos:line="934" pos:column="38"/></operator><name pos:line="934" pos:column="38">len<pos:position pos:line="934" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="934" pos:column="43">out<pos:position pos:line="934" pos:column="46"/></name></expr></argument>)<pos:position pos:line="934" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="934" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="935" pos:column="17">strbuf_reset<pos:position pos:line="935" pos:column="29"/></name><argument_list pos:line="935" pos:column="29">(<argument><expr><operator pos:line="935" pos:column="30">&amp;<pos:position pos:line="935" pos:column="35"/></operator><name pos:line="935" pos:column="31">sb<pos:position pos:line="935" pos:column="33"/></name></expr></argument>)<pos:position pos:line="935" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="935" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="936" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="938" pos:column="9">strbuf_release<pos:position pos:line="938" pos:column="23"/></name><argument_list pos:line="938" pos:column="23">(<argument><expr><operator pos:line="938" pos:column="24">&amp;<pos:position pos:line="938" pos:column="29"/></operator><name pos:line="938" pos:column="25">sb<pos:position pos:line="938" pos:column="27"/></name></expr></argument>)<pos:position pos:line="938" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="938" pos:column="29"/></expr_stmt>
	<return pos:line="939" pos:column="9">return <expr><literal type="number" pos:line="939" pos:column="16">0<pos:position pos:line="939" pos:column="17"/></literal></expr>;<pos:position pos:line="939" pos:column="18"/></return>
}<pos:position pos:line="940" pos:column="2"/></block></function>

<comment type="block" pos:line="942" pos:column="1">/**
 * Splits a list of files/directories into individual email patches. Each path
 * in `paths` must be a file/directory that is formatted according to
 * `patch_format`.
 *
 * Once split out, the individual email patches will be stored in the state
 * directory, with each patch's filename being its index, padded to state-&gt;prec
 * digits.
 *
 * state-&gt;cur will be set to the index of the first mail, and state-&gt;last will
 * be set to the index of the last mail.
 *
 * Set keep_cr to 0 to convert all lines ending with \r\n to end with \n, 1
 * to disable this behavior, -1 to use the default configured setting.
 *
 * Returns 0 on success, -1 on failure.
 */</comment>
<function><specifier pos:line="959" pos:column="1">static<pos:position pos:line="959" pos:column="7"/></specifier> <type><name pos:line="959" pos:column="8">int<pos:position pos:line="959" pos:column="11"/></name></type> <name pos:line="959" pos:column="12">split_mail<pos:position pos:line="959" pos:column="22"/></name><parameter_list pos:line="959" pos:column="22">(<parameter><decl><type><name><name pos:line="959" pos:column="23">struct<pos:position pos:line="959" pos:column="29"/></name> <name pos:line="959" pos:column="30">am_state<pos:position pos:line="959" pos:column="38"/></name></name> <modifier pos:line="959" pos:column="39">*<pos:position pos:line="959" pos:column="40"/></modifier></type><name pos:line="959" pos:column="40">state<pos:position pos:line="959" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="959" pos:column="47">enum<pos:position pos:line="959" pos:column="51"/></name> <name pos:line="959" pos:column="52">patch_format<pos:position pos:line="959" pos:column="64"/></name></name></type> <name pos:line="959" pos:column="65">patch_format<pos:position pos:line="959" pos:column="77"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="960" pos:column="25">const<pos:position pos:line="960" pos:column="30"/></specifier> <name pos:line="960" pos:column="31">char<pos:position pos:line="960" pos:column="35"/></name> <modifier pos:line="960" pos:column="36">*<pos:position pos:line="960" pos:column="37"/></modifier><modifier pos:line="960" pos:column="37">*<pos:position pos:line="960" pos:column="38"/></modifier></type><name pos:line="960" pos:column="38">paths<pos:position pos:line="960" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="960" pos:column="45">int<pos:position pos:line="960" pos:column="48"/></name></type> <name pos:line="960" pos:column="49">keep_cr<pos:position pos:line="960" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="960" pos:column="57"/></parameter_list>
<block pos:line="961" pos:column="1">{
	<if pos:line="962" pos:column="9">if <condition pos:line="962" pos:column="12">(<expr><name pos:line="962" pos:column="13">keep_cr<pos:position pos:line="962" pos:column="20"/></name> <operator pos:line="962" pos:column="21">&lt;<pos:position pos:line="962" pos:column="25"/></operator> <literal type="number" pos:line="962" pos:column="23">0<pos:position pos:line="962" pos:column="24"/></literal></expr>)<pos:position pos:line="962" pos:column="25"/></condition><then pos:line="962" pos:column="25"> <block pos:line="962" pos:column="26">{
		<expr_stmt><expr><name pos:line="963" pos:column="17">keep_cr<pos:position pos:line="963" pos:column="24"/></name> <operator pos:line="963" pos:column="25">=<pos:position pos:line="963" pos:column="26"/></operator> <literal type="number" pos:line="963" pos:column="27">0<pos:position pos:line="963" pos:column="28"/></literal></expr>;<pos:position pos:line="963" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="964" pos:column="17">git_config_get_bool<pos:position pos:line="964" pos:column="36"/></name><argument_list pos:line="964" pos:column="36">(<argument><expr><literal type="string" pos:line="964" pos:column="37">"am.keepcr"<pos:position pos:line="964" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="964" pos:column="50">&amp;<pos:position pos:line="964" pos:column="55"/></operator><name pos:line="964" pos:column="51">keep_cr<pos:position pos:line="964" pos:column="58"/></name></expr></argument>)<pos:position pos:line="964" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="964" pos:column="60"/></expr_stmt>
	}<pos:position pos:line="965" pos:column="10"/></block></then></if>

	<switch pos:line="967" pos:column="9">switch <condition pos:line="967" pos:column="16">(<expr><name pos:line="967" pos:column="17">patch_format<pos:position pos:line="967" pos:column="29"/></name></expr>)<pos:position pos:line="967" pos:column="30"/></condition> <block pos:line="967" pos:column="31">{
	<case pos:line="968" pos:column="9">case <expr><name pos:line="968" pos:column="14">PATCH_FORMAT_MBOX<pos:position pos:line="968" pos:column="31"/></name></expr>:<pos:position pos:line="968" pos:column="32"/></case>
		<return pos:line="969" pos:column="17">return <expr><call><name pos:line="969" pos:column="24">split_mail_mbox<pos:position pos:line="969" pos:column="39"/></name><argument_list pos:line="969" pos:column="39">(<argument><expr><name pos:line="969" pos:column="40">state<pos:position pos:line="969" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="969" pos:column="47">paths<pos:position pos:line="969" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="969" pos:column="54">keep_cr<pos:position pos:line="969" pos:column="61"/></name></expr></argument>)<pos:position pos:line="969" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="969" pos:column="63"/></return>
	<case pos:line="970" pos:column="9">case <expr><name pos:line="970" pos:column="14">PATCH_FORMAT_STGIT<pos:position pos:line="970" pos:column="32"/></name></expr>:<pos:position pos:line="970" pos:column="33"/></case>
		<return pos:line="971" pos:column="17">return <expr><call><name pos:line="971" pos:column="24">split_mail_conv<pos:position pos:line="971" pos:column="39"/></name><argument_list pos:line="971" pos:column="39">(<argument><expr><name pos:line="971" pos:column="40">stgit_patch_to_mail<pos:position pos:line="971" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="971" pos:column="61">state<pos:position pos:line="971" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="971" pos:column="68">paths<pos:position pos:line="971" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="971" pos:column="75">keep_cr<pos:position pos:line="971" pos:column="82"/></name></expr></argument>)<pos:position pos:line="971" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="971" pos:column="84"/></return>
	<case pos:line="972" pos:column="9">case <expr><name pos:line="972" pos:column="14">PATCH_FORMAT_STGIT_SERIES<pos:position pos:line="972" pos:column="39"/></name></expr>:<pos:position pos:line="972" pos:column="40"/></case>
		<return pos:line="973" pos:column="17">return <expr><call><name pos:line="973" pos:column="24">split_mail_stgit_series<pos:position pos:line="973" pos:column="47"/></name><argument_list pos:line="973" pos:column="47">(<argument><expr><name pos:line="973" pos:column="48">state<pos:position pos:line="973" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="973" pos:column="55">paths<pos:position pos:line="973" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="973" pos:column="62">keep_cr<pos:position pos:line="973" pos:column="69"/></name></expr></argument>)<pos:position pos:line="973" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="973" pos:column="71"/></return>
	<case pos:line="974" pos:column="9">case <expr><name pos:line="974" pos:column="14">PATCH_FORMAT_HG<pos:position pos:line="974" pos:column="29"/></name></expr>:<pos:position pos:line="974" pos:column="30"/></case>
		<return pos:line="975" pos:column="17">return <expr><call><name pos:line="975" pos:column="24">split_mail_conv<pos:position pos:line="975" pos:column="39"/></name><argument_list pos:line="975" pos:column="39">(<argument><expr><name pos:line="975" pos:column="40">hg_patch_to_mail<pos:position pos:line="975" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="975" pos:column="58">state<pos:position pos:line="975" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="975" pos:column="65">paths<pos:position pos:line="975" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="975" pos:column="72">keep_cr<pos:position pos:line="975" pos:column="79"/></name></expr></argument>)<pos:position pos:line="975" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="975" pos:column="81"/></return>
	<default pos:line="976" pos:column="9">default:<pos:position pos:line="976" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="977" pos:column="17">die<pos:position pos:line="977" pos:column="20"/></name><argument_list pos:line="977" pos:column="20">(<argument><expr><literal type="string" pos:line="977" pos:column="21">"BUG: invalid patch_format"<pos:position pos:line="977" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="977" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="977" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="978" pos:column="10"/></block></switch>
	<return pos:line="979" pos:column="9">return <expr><operator pos:line="979" pos:column="16">-<pos:position pos:line="979" pos:column="17"/></operator><literal type="number" pos:line="979" pos:column="17">1<pos:position pos:line="979" pos:column="18"/></literal></expr>;<pos:position pos:line="979" pos:column="19"/></return>
}<pos:position pos:line="980" pos:column="2"/></block></function>

<comment type="block" pos:line="982" pos:column="1">/**
 * Setup a new am session for applying patches
 */</comment>
<function><specifier pos:line="985" pos:column="1">static<pos:position pos:line="985" pos:column="7"/></specifier> <type><name pos:line="985" pos:column="8">void<pos:position pos:line="985" pos:column="12"/></name></type> <name pos:line="985" pos:column="13">am_setup<pos:position pos:line="985" pos:column="21"/></name><parameter_list pos:line="985" pos:column="21">(<parameter><decl><type><name><name pos:line="985" pos:column="22">struct<pos:position pos:line="985" pos:column="28"/></name> <name pos:line="985" pos:column="29">am_state<pos:position pos:line="985" pos:column="37"/></name></name> <modifier pos:line="985" pos:column="38">*<pos:position pos:line="985" pos:column="39"/></modifier></type><name pos:line="985" pos:column="39">state<pos:position pos:line="985" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="985" pos:column="46">enum<pos:position pos:line="985" pos:column="50"/></name> <name pos:line="985" pos:column="51">patch_format<pos:position pos:line="985" pos:column="63"/></name></name></type> <name pos:line="985" pos:column="64">patch_format<pos:position pos:line="985" pos:column="76"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="986" pos:column="25">const<pos:position pos:line="986" pos:column="30"/></specifier> <name pos:line="986" pos:column="31">char<pos:position pos:line="986" pos:column="35"/></name> <modifier pos:line="986" pos:column="36">*<pos:position pos:line="986" pos:column="37"/></modifier><modifier pos:line="986" pos:column="37">*<pos:position pos:line="986" pos:column="38"/></modifier></type><name pos:line="986" pos:column="38">paths<pos:position pos:line="986" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="986" pos:column="45">int<pos:position pos:line="986" pos:column="48"/></name></type> <name pos:line="986" pos:column="49">keep_cr<pos:position pos:line="986" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="986" pos:column="57"/></parameter_list>
<block pos:line="987" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="988" pos:column="9">unsigned<pos:position pos:line="988" pos:column="17"/></name> <name pos:line="988" pos:column="18">char<pos:position pos:line="988" pos:column="22"/></name></type> <name><name pos:line="988" pos:column="23">curr_head<pos:position pos:line="988" pos:column="32"/></name><index pos:line="988" pos:column="32">[<expr><name pos:line="988" pos:column="33">GIT_SHA1_RAWSZ<pos:position pos:line="988" pos:column="47"/></name></expr>]<pos:position pos:line="988" pos:column="48"/></index></name></decl>;<pos:position pos:line="988" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="989" pos:column="9">const<pos:position pos:line="989" pos:column="14"/></specifier> <name pos:line="989" pos:column="15">char<pos:position pos:line="989" pos:column="19"/></name> <modifier pos:line="989" pos:column="20">*<pos:position pos:line="989" pos:column="21"/></modifier></type><name pos:line="989" pos:column="21">str<pos:position pos:line="989" pos:column="24"/></name></decl>;<pos:position pos:line="989" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="990" pos:column="9">struct<pos:position pos:line="990" pos:column="15"/></name> <name pos:line="990" pos:column="16">strbuf<pos:position pos:line="990" pos:column="22"/></name></name></type> <name pos:line="990" pos:column="23">sb<pos:position pos:line="990" pos:column="25"/></name> <init pos:line="990" pos:column="26">= <expr><name pos:line="990" pos:column="28">STRBUF_INIT<pos:position pos:line="990" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="990" pos:column="40"/></decl_stmt>

	<if pos:line="992" pos:column="9">if <condition pos:line="992" pos:column="12">(<expr><operator pos:line="992" pos:column="13">!<pos:position pos:line="992" pos:column="14"/></operator><name pos:line="992" pos:column="14">patch_format<pos:position pos:line="992" pos:column="26"/></name></expr>)<pos:position pos:line="992" pos:column="27"/></condition><then pos:line="992" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name pos:line="993" pos:column="17">patch_format<pos:position pos:line="993" pos:column="29"/></name> <operator pos:line="993" pos:column="30">=<pos:position pos:line="993" pos:column="31"/></operator> <call><name pos:line="993" pos:column="32">detect_patch_format<pos:position pos:line="993" pos:column="51"/></name><argument_list pos:line="993" pos:column="51">(<argument><expr><name pos:line="993" pos:column="52">paths<pos:position pos:line="993" pos:column="57"/></name></expr></argument>)<pos:position pos:line="993" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="993" pos:column="59"/></expr_stmt></block></then></if>

	<if pos:line="995" pos:column="9">if <condition pos:line="995" pos:column="12">(<expr><operator pos:line="995" pos:column="13">!<pos:position pos:line="995" pos:column="14"/></operator><name pos:line="995" pos:column="14">patch_format<pos:position pos:line="995" pos:column="26"/></name></expr>)<pos:position pos:line="995" pos:column="27"/></condition><then pos:line="995" pos:column="27"> <block pos:line="995" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="996" pos:column="17">fprintf_ln<pos:position pos:line="996" pos:column="27"/></name><argument_list pos:line="996" pos:column="27">(<argument><expr><name pos:line="996" pos:column="28">stderr<pos:position pos:line="996" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="996" pos:column="36">_<pos:position pos:line="996" pos:column="37"/></name><argument_list pos:line="996" pos:column="37">(<argument><expr><literal type="string" pos:line="996" pos:column="38">"Patch format detection failed."<pos:position pos:line="996" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="996" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="996" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="996" pos:column="73"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="997" pos:column="17">exit<pos:position pos:line="997" pos:column="21"/></name><argument_list pos:line="997" pos:column="21">(<argument><expr><literal type="number" pos:line="997" pos:column="22">128<pos:position pos:line="997" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="997" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="997" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="998" pos:column="10"/></block></then></if>

	<if pos:line="1000" pos:column="9">if <condition pos:line="1000" pos:column="12">(<expr><call><name pos:line="1000" pos:column="13">mkdir<pos:position pos:line="1000" pos:column="18"/></name><argument_list pos:line="1000" pos:column="18">(<argument><expr><name><name pos:line="1000" pos:column="19">state<pos:position pos:line="1000" pos:column="24"/></name><operator pos:line="1000" pos:column="24">-&gt;<pos:position pos:line="1000" pos:column="29"/></operator><name pos:line="1000" pos:column="26">dir<pos:position pos:line="1000" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="1000" pos:column="31">0777<pos:position pos:line="1000" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="1000" pos:column="36"/></argument_list></call> <operator pos:line="1000" pos:column="37">&lt;<pos:position pos:line="1000" pos:column="41"/></operator> <literal type="number" pos:line="1000" pos:column="39">0<pos:position pos:line="1000" pos:column="40"/></literal> <operator pos:line="1000" pos:column="41">&amp;&amp;<pos:position pos:line="1000" pos:column="51"/></operator> <name pos:line="1000" pos:column="44">errno<pos:position pos:line="1000" pos:column="49"/></name> <operator pos:line="1000" pos:column="50">!=<pos:position pos:line="1000" pos:column="52"/></operator> <name pos:line="1000" pos:column="53">EEXIST<pos:position pos:line="1000" pos:column="59"/></name></expr>)<pos:position pos:line="1000" pos:column="60"/></condition><then pos:line="1000" pos:column="60">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1001" pos:column="17">die_errno<pos:position pos:line="1001" pos:column="26"/></name><argument_list pos:line="1001" pos:column="26">(<argument><expr><call><name pos:line="1001" pos:column="27">_<pos:position pos:line="1001" pos:column="28"/></name><argument_list pos:line="1001" pos:column="28">(<argument><expr><literal type="string" pos:line="1001" pos:column="29">"failed to create directory '%s'"<pos:position pos:line="1001" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="1001" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="1001" pos:column="65">state<pos:position pos:line="1001" pos:column="70"/></name><operator pos:line="1001" pos:column="70">-&gt;<pos:position pos:line="1001" pos:column="75"/></operator><name pos:line="1001" pos:column="72">dir<pos:position pos:line="1001" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="1001" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="1001" pos:column="77"/></expr_stmt></block></then></if>

	<if pos:line="1003" pos:column="9">if <condition pos:line="1003" pos:column="12">(<expr><call><name pos:line="1003" pos:column="13">split_mail<pos:position pos:line="1003" pos:column="23"/></name><argument_list pos:line="1003" pos:column="23">(<argument><expr><name pos:line="1003" pos:column="24">state<pos:position pos:line="1003" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="1003" pos:column="31">patch_format<pos:position pos:line="1003" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="1003" pos:column="45">paths<pos:position pos:line="1003" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="1003" pos:column="52">keep_cr<pos:position pos:line="1003" pos:column="59"/></name></expr></argument>)<pos:position pos:line="1003" pos:column="60"/></argument_list></call> <operator pos:line="1003" pos:column="61">&lt;<pos:position pos:line="1003" pos:column="65"/></operator> <literal type="number" pos:line="1003" pos:column="63">0<pos:position pos:line="1003" pos:column="64"/></literal></expr>)<pos:position pos:line="1003" pos:column="65"/></condition><then pos:line="1003" pos:column="65"> <block pos:line="1003" pos:column="66">{
		<expr_stmt><expr><call><name pos:line="1004" pos:column="17">am_destroy<pos:position pos:line="1004" pos:column="27"/></name><argument_list pos:line="1004" pos:column="27">(<argument><expr><name pos:line="1004" pos:column="28">state<pos:position pos:line="1004" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1004" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1004" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1005" pos:column="17">die<pos:position pos:line="1005" pos:column="20"/></name><argument_list pos:line="1005" pos:column="20">(<argument><expr><call><name pos:line="1005" pos:column="21">_<pos:position pos:line="1005" pos:column="22"/></name><argument_list pos:line="1005" pos:column="22">(<argument><expr><literal type="string" pos:line="1005" pos:column="23">"Failed to split patches."<pos:position pos:line="1005" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="1005" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="1005" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1005" pos:column="52"/></expr_stmt>
	}<pos:position pos:line="1006" pos:column="10"/></block></then></if>

	<if pos:line="1008" pos:column="9">if <condition pos:line="1008" pos:column="12">(<expr><name><name pos:line="1008" pos:column="13">state<pos:position pos:line="1008" pos:column="18"/></name><operator pos:line="1008" pos:column="18">-&gt;<pos:position pos:line="1008" pos:column="23"/></operator><name pos:line="1008" pos:column="20">rebasing<pos:position pos:line="1008" pos:column="28"/></name></name></expr>)<pos:position pos:line="1008" pos:column="29"/></condition><then pos:line="1008" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="1009" pos:column="17">state<pos:position pos:line="1009" pos:column="22"/></name><operator pos:line="1009" pos:column="22">-&gt;<pos:position pos:line="1009" pos:column="27"/></operator><name pos:line="1009" pos:column="24">threeway<pos:position pos:line="1009" pos:column="32"/></name></name> <operator pos:line="1009" pos:column="33">=<pos:position pos:line="1009" pos:column="34"/></operator> <literal type="number" pos:line="1009" pos:column="35">1<pos:position pos:line="1009" pos:column="36"/></literal></expr>;<pos:position pos:line="1009" pos:column="37"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="1011" pos:column="9">write_state_bool<pos:position pos:line="1011" pos:column="25"/></name><argument_list pos:line="1011" pos:column="25">(<argument><expr><name pos:line="1011" pos:column="26">state<pos:position pos:line="1011" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1011" pos:column="33">"threeway"<pos:position pos:line="1011" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="1011" pos:column="45">state<pos:position pos:line="1011" pos:column="50"/></name><operator pos:line="1011" pos:column="50">-&gt;<pos:position pos:line="1011" pos:column="55"/></operator><name pos:line="1011" pos:column="52">threeway<pos:position pos:line="1011" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="1011" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="1011" pos:column="62"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1012" pos:column="9">write_state_bool<pos:position pos:line="1012" pos:column="25"/></name><argument_list pos:line="1012" pos:column="25">(<argument><expr><name pos:line="1012" pos:column="26">state<pos:position pos:line="1012" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1012" pos:column="33">"quiet"<pos:position pos:line="1012" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="1012" pos:column="42">state<pos:position pos:line="1012" pos:column="47"/></name><operator pos:line="1012" pos:column="47">-&gt;<pos:position pos:line="1012" pos:column="52"/></operator><name pos:line="1012" pos:column="49">quiet<pos:position pos:line="1012" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="1012" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1012" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1013" pos:column="9">write_state_bool<pos:position pos:line="1013" pos:column="25"/></name><argument_list pos:line="1013" pos:column="25">(<argument><expr><name pos:line="1013" pos:column="26">state<pos:position pos:line="1013" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1013" pos:column="33">"sign"<pos:position pos:line="1013" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="1013" pos:column="41">state<pos:position pos:line="1013" pos:column="46"/></name><operator pos:line="1013" pos:column="46">-&gt;<pos:position pos:line="1013" pos:column="51"/></operator><name pos:line="1013" pos:column="48">signoff<pos:position pos:line="1013" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="1013" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1013" pos:column="57"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1014" pos:column="9">write_state_bool<pos:position pos:line="1014" pos:column="25"/></name><argument_list pos:line="1014" pos:column="25">(<argument><expr><name pos:line="1014" pos:column="26">state<pos:position pos:line="1014" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1014" pos:column="33">"utf8"<pos:position pos:line="1014" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="1014" pos:column="41">state<pos:position pos:line="1014" pos:column="46"/></name><operator pos:line="1014" pos:column="46">-&gt;<pos:position pos:line="1014" pos:column="51"/></operator><name pos:line="1014" pos:column="48">utf8<pos:position pos:line="1014" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="1014" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1014" pos:column="54"/></expr_stmt>

	<switch pos:line="1016" pos:column="9">switch <condition pos:line="1016" pos:column="16">(<expr><name><name pos:line="1016" pos:column="17">state<pos:position pos:line="1016" pos:column="22"/></name><operator pos:line="1016" pos:column="22">-&gt;<pos:position pos:line="1016" pos:column="27"/></operator><name pos:line="1016" pos:column="24">keep<pos:position pos:line="1016" pos:column="28"/></name></name></expr>)<pos:position pos:line="1016" pos:column="29"/></condition> <block pos:line="1016" pos:column="30">{
	<case pos:line="1017" pos:column="9">case <expr><name pos:line="1017" pos:column="14">KEEP_FALSE<pos:position pos:line="1017" pos:column="24"/></name></expr>:<pos:position pos:line="1017" pos:column="25"/></case>
		<expr_stmt><expr><name pos:line="1018" pos:column="17">str<pos:position pos:line="1018" pos:column="20"/></name> <operator pos:line="1018" pos:column="21">=<pos:position pos:line="1018" pos:column="22"/></operator> <literal type="string" pos:line="1018" pos:column="23">"f"<pos:position pos:line="1018" pos:column="26"/></literal></expr>;<pos:position pos:line="1018" pos:column="27"/></expr_stmt>
		<break pos:line="1019" pos:column="17">break;<pos:position pos:line="1019" pos:column="23"/></break>
	<case pos:line="1020" pos:column="9">case <expr><name pos:line="1020" pos:column="14">KEEP_TRUE<pos:position pos:line="1020" pos:column="23"/></name></expr>:<pos:position pos:line="1020" pos:column="24"/></case>
		<expr_stmt><expr><name pos:line="1021" pos:column="17">str<pos:position pos:line="1021" pos:column="20"/></name> <operator pos:line="1021" pos:column="21">=<pos:position pos:line="1021" pos:column="22"/></operator> <literal type="string" pos:line="1021" pos:column="23">"t"<pos:position pos:line="1021" pos:column="26"/></literal></expr>;<pos:position pos:line="1021" pos:column="27"/></expr_stmt>
		<break pos:line="1022" pos:column="17">break;<pos:position pos:line="1022" pos:column="23"/></break>
	<case pos:line="1023" pos:column="9">case <expr><name pos:line="1023" pos:column="14">KEEP_NON_PATCH<pos:position pos:line="1023" pos:column="28"/></name></expr>:<pos:position pos:line="1023" pos:column="29"/></case>
		<expr_stmt><expr><name pos:line="1024" pos:column="17">str<pos:position pos:line="1024" pos:column="20"/></name> <operator pos:line="1024" pos:column="21">=<pos:position pos:line="1024" pos:column="22"/></operator> <literal type="string" pos:line="1024" pos:column="23">"b"<pos:position pos:line="1024" pos:column="26"/></literal></expr>;<pos:position pos:line="1024" pos:column="27"/></expr_stmt>
		<break pos:line="1025" pos:column="17">break;<pos:position pos:line="1025" pos:column="23"/></break>
	<default pos:line="1026" pos:column="9">default:<pos:position pos:line="1026" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="1027" pos:column="17">die<pos:position pos:line="1027" pos:column="20"/></name><argument_list pos:line="1027" pos:column="20">(<argument><expr><literal type="string" pos:line="1027" pos:column="21">"BUG: invalid value for state-&gt;keep"<pos:position pos:line="1027" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="1027" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1027" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="1028" pos:column="10"/></block></switch>

	<expr_stmt><expr><call><name pos:line="1030" pos:column="9">write_state_text<pos:position pos:line="1030" pos:column="25"/></name><argument_list pos:line="1030" pos:column="25">(<argument><expr><name pos:line="1030" pos:column="26">state<pos:position pos:line="1030" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1030" pos:column="33">"keep"<pos:position pos:line="1030" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="1030" pos:column="41">str<pos:position pos:line="1030" pos:column="44"/></name></expr></argument>)<pos:position pos:line="1030" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1030" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1031" pos:column="9">write_state_bool<pos:position pos:line="1031" pos:column="25"/></name><argument_list pos:line="1031" pos:column="25">(<argument><expr><name pos:line="1031" pos:column="26">state<pos:position pos:line="1031" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1031" pos:column="33">"messageid"<pos:position pos:line="1031" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="1031" pos:column="46">state<pos:position pos:line="1031" pos:column="51"/></name><operator pos:line="1031" pos:column="51">-&gt;<pos:position pos:line="1031" pos:column="56"/></operator><name pos:line="1031" pos:column="53">message_id<pos:position pos:line="1031" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="1031" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="1031" pos:column="65"/></expr_stmt>

	<switch pos:line="1033" pos:column="9">switch <condition pos:line="1033" pos:column="16">(<expr><name><name pos:line="1033" pos:column="17">state<pos:position pos:line="1033" pos:column="22"/></name><operator pos:line="1033" pos:column="22">-&gt;<pos:position pos:line="1033" pos:column="27"/></operator><name pos:line="1033" pos:column="24">scissors<pos:position pos:line="1033" pos:column="32"/></name></name></expr>)<pos:position pos:line="1033" pos:column="33"/></condition> <block pos:line="1033" pos:column="34">{
	<case pos:line="1034" pos:column="9">case <expr><name pos:line="1034" pos:column="14">SCISSORS_UNSET<pos:position pos:line="1034" pos:column="28"/></name></expr>:<pos:position pos:line="1034" pos:column="29"/></case>
		<expr_stmt><expr><name pos:line="1035" pos:column="17">str<pos:position pos:line="1035" pos:column="20"/></name> <operator pos:line="1035" pos:column="21">=<pos:position pos:line="1035" pos:column="22"/></operator> <literal type="string" pos:line="1035" pos:column="23">""<pos:position pos:line="1035" pos:column="25"/></literal></expr>;<pos:position pos:line="1035" pos:column="26"/></expr_stmt>
		<break pos:line="1036" pos:column="17">break;<pos:position pos:line="1036" pos:column="23"/></break>
	<case pos:line="1037" pos:column="9">case <expr><name pos:line="1037" pos:column="14">SCISSORS_FALSE<pos:position pos:line="1037" pos:column="28"/></name></expr>:<pos:position pos:line="1037" pos:column="29"/></case>
		<expr_stmt><expr><name pos:line="1038" pos:column="17">str<pos:position pos:line="1038" pos:column="20"/></name> <operator pos:line="1038" pos:column="21">=<pos:position pos:line="1038" pos:column="22"/></operator> <literal type="string" pos:line="1038" pos:column="23">"f"<pos:position pos:line="1038" pos:column="26"/></literal></expr>;<pos:position pos:line="1038" pos:column="27"/></expr_stmt>
		<break pos:line="1039" pos:column="17">break;<pos:position pos:line="1039" pos:column="23"/></break>
	<case pos:line="1040" pos:column="9">case <expr><name pos:line="1040" pos:column="14">SCISSORS_TRUE<pos:position pos:line="1040" pos:column="27"/></name></expr>:<pos:position pos:line="1040" pos:column="28"/></case>
		<expr_stmt><expr><name pos:line="1041" pos:column="17">str<pos:position pos:line="1041" pos:column="20"/></name> <operator pos:line="1041" pos:column="21">=<pos:position pos:line="1041" pos:column="22"/></operator> <literal type="string" pos:line="1041" pos:column="23">"t"<pos:position pos:line="1041" pos:column="26"/></literal></expr>;<pos:position pos:line="1041" pos:column="27"/></expr_stmt>
		<break pos:line="1042" pos:column="17">break;<pos:position pos:line="1042" pos:column="23"/></break>
	<default pos:line="1043" pos:column="9">default:<pos:position pos:line="1043" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="1044" pos:column="17">die<pos:position pos:line="1044" pos:column="20"/></name><argument_list pos:line="1044" pos:column="20">(<argument><expr><literal type="string" pos:line="1044" pos:column="21">"BUG: invalid value for state-&gt;scissors"<pos:position pos:line="1044" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="1044" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="1044" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="1045" pos:column="10"/></block></switch>
	<expr_stmt><expr><call><name pos:line="1046" pos:column="9">write_state_text<pos:position pos:line="1046" pos:column="25"/></name><argument_list pos:line="1046" pos:column="25">(<argument><expr><name pos:line="1046" pos:column="26">state<pos:position pos:line="1046" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1046" pos:column="33">"scissors"<pos:position pos:line="1046" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="1046" pos:column="45">str<pos:position pos:line="1046" pos:column="48"/></name></expr></argument>)<pos:position pos:line="1046" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="1046" pos:column="50"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1048" pos:column="9">sq_quote_argv<pos:position pos:line="1048" pos:column="22"/></name><argument_list pos:line="1048" pos:column="22">(<argument><expr><operator pos:line="1048" pos:column="23">&amp;<pos:position pos:line="1048" pos:column="28"/></operator><name pos:line="1048" pos:column="24">sb<pos:position pos:line="1048" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="1048" pos:column="28">state<pos:position pos:line="1048" pos:column="33"/></name><operator pos:line="1048" pos:column="33">-&gt;<pos:position pos:line="1048" pos:column="38"/></operator><name pos:line="1048" pos:column="35">git_apply_opts<pos:position pos:line="1048" pos:column="49"/></name><operator pos:line="1048" pos:column="49">.<pos:position pos:line="1048" pos:column="50"/></operator><name pos:line="1048" pos:column="50">argv<pos:position pos:line="1048" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="1048" pos:column="56">0<pos:position pos:line="1048" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="1048" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1048" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1049" pos:column="9">write_state_text<pos:position pos:line="1049" pos:column="25"/></name><argument_list pos:line="1049" pos:column="25">(<argument><expr><name pos:line="1049" pos:column="26">state<pos:position pos:line="1049" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1049" pos:column="33">"apply-opt"<pos:position pos:line="1049" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="1049" pos:column="46">sb<pos:position pos:line="1049" pos:column="48"/></name><operator pos:line="1049" pos:column="48">.<pos:position pos:line="1049" pos:column="49"/></operator><name pos:line="1049" pos:column="49">buf<pos:position pos:line="1049" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="1049" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1049" pos:column="54"/></expr_stmt>

	<if pos:line="1051" pos:column="9">if <condition pos:line="1051" pos:column="12">(<expr><name><name pos:line="1051" pos:column="13">state<pos:position pos:line="1051" pos:column="18"/></name><operator pos:line="1051" pos:column="18">-&gt;<pos:position pos:line="1051" pos:column="23"/></operator><name pos:line="1051" pos:column="20">rebasing<pos:position pos:line="1051" pos:column="28"/></name></name></expr>)<pos:position pos:line="1051" pos:column="29"/></condition><then pos:line="1051" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1052" pos:column="17">write_state_text<pos:position pos:line="1052" pos:column="33"/></name><argument_list pos:line="1052" pos:column="33">(<argument><expr><name pos:line="1052" pos:column="34">state<pos:position pos:line="1052" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1052" pos:column="41">"rebasing"<pos:position pos:line="1052" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="1052" pos:column="53">""<pos:position pos:line="1052" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="1052" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1052" pos:column="57"/></expr_stmt></block></then>
	<else pos:line="1053" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1054" pos:column="17">write_state_text<pos:position pos:line="1054" pos:column="33"/></name><argument_list pos:line="1054" pos:column="33">(<argument><expr><name pos:line="1054" pos:column="34">state<pos:position pos:line="1054" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1054" pos:column="41">"applying"<pos:position pos:line="1054" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="1054" pos:column="53">""<pos:position pos:line="1054" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="1054" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1054" pos:column="57"/></expr_stmt></block></else></if>

	<if pos:line="1056" pos:column="9">if <condition pos:line="1056" pos:column="12">(<expr><operator pos:line="1056" pos:column="13">!<pos:position pos:line="1056" pos:column="14"/></operator><call><name pos:line="1056" pos:column="14">get_sha1<pos:position pos:line="1056" pos:column="22"/></name><argument_list pos:line="1056" pos:column="22">(<argument><expr><literal type="string" pos:line="1056" pos:column="23">"HEAD"<pos:position pos:line="1056" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="1056" pos:column="31">curr_head<pos:position pos:line="1056" pos:column="40"/></name></expr></argument>)<pos:position pos:line="1056" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="1056" pos:column="42"/></condition><then pos:line="1056" pos:column="42"> <block pos:line="1056" pos:column="43">{
		<expr_stmt><expr><call><name pos:line="1057" pos:column="17">write_state_text<pos:position pos:line="1057" pos:column="33"/></name><argument_list pos:line="1057" pos:column="33">(<argument><expr><name pos:line="1057" pos:column="34">state<pos:position pos:line="1057" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1057" pos:column="41">"abort-safety"<pos:position pos:line="1057" pos:column="55"/></literal></expr></argument>, <argument><expr><call><name pos:line="1057" pos:column="57">sha1_to_hex<pos:position pos:line="1057" pos:column="68"/></name><argument_list pos:line="1057" pos:column="68">(<argument><expr><name pos:line="1057" pos:column="69">curr_head<pos:position pos:line="1057" pos:column="78"/></name></expr></argument>)<pos:position pos:line="1057" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="1057" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="1057" pos:column="81"/></expr_stmt>
		<if pos:line="1058" pos:column="17">if <condition pos:line="1058" pos:column="20">(<expr><operator pos:line="1058" pos:column="21">!<pos:position pos:line="1058" pos:column="22"/></operator><name><name pos:line="1058" pos:column="22">state<pos:position pos:line="1058" pos:column="27"/></name><operator pos:line="1058" pos:column="27">-&gt;<pos:position pos:line="1058" pos:column="32"/></operator><name pos:line="1058" pos:column="29">rebasing<pos:position pos:line="1058" pos:column="37"/></name></name></expr>)<pos:position pos:line="1058" pos:column="38"/></condition><then pos:line="1058" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="1059" pos:column="25">update_ref<pos:position pos:line="1059" pos:column="35"/></name><argument_list pos:line="1059" pos:column="35">(<argument><expr><literal type="string" pos:line="1059" pos:column="36">"am"<pos:position pos:line="1059" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="1059" pos:column="42">"ORIG_HEAD"<pos:position pos:line="1059" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="1059" pos:column="55">curr_head<pos:position pos:line="1059" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="1059" pos:column="66">NULL<pos:position pos:line="1059" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1059" pos:column="72">0<pos:position pos:line="1059" pos:column="73"/></literal></expr></argument>,
					<argument><expr><name pos:line="1060" pos:column="41">UPDATE_REFS_DIE_ON_ERR<pos:position pos:line="1060" pos:column="63"/></name></expr></argument>)<pos:position pos:line="1060" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="1060" pos:column="65"/></expr_stmt></block></then></if>
	}<pos:position pos:line="1061" pos:column="10"/></block></then> <else pos:line="1061" pos:column="11">else <block pos:line="1061" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="1062" pos:column="17">write_state_text<pos:position pos:line="1062" pos:column="33"/></name><argument_list pos:line="1062" pos:column="33">(<argument><expr><name pos:line="1062" pos:column="34">state<pos:position pos:line="1062" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1062" pos:column="41">"abort-safety"<pos:position pos:line="1062" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="1062" pos:column="57">""<pos:position pos:line="1062" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="1062" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="1062" pos:column="61"/></expr_stmt>
		<if pos:line="1063" pos:column="17">if <condition pos:line="1063" pos:column="20">(<expr><operator pos:line="1063" pos:column="21">!<pos:position pos:line="1063" pos:column="22"/></operator><name><name pos:line="1063" pos:column="22">state<pos:position pos:line="1063" pos:column="27"/></name><operator pos:line="1063" pos:column="27">-&gt;<pos:position pos:line="1063" pos:column="32"/></operator><name pos:line="1063" pos:column="29">rebasing<pos:position pos:line="1063" pos:column="37"/></name></name></expr>)<pos:position pos:line="1063" pos:column="38"/></condition><then pos:line="1063" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="1064" pos:column="25">delete_ref<pos:position pos:line="1064" pos:column="35"/></name><argument_list pos:line="1064" pos:column="35">(<argument><expr><literal type="string" pos:line="1064" pos:column="36">"ORIG_HEAD"<pos:position pos:line="1064" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="1064" pos:column="49">NULL<pos:position pos:line="1064" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1064" pos:column="55">0<pos:position pos:line="1064" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="1064" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1064" pos:column="58"/></expr_stmt></block></then></if>
	}<pos:position pos:line="1065" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="1067" pos:column="9">/*
	 * NOTE: Since the "next" and "last" files determine if an am_state
	 * session is in progress, they should be written last.
	 */</comment>

	<expr_stmt><expr><call><name pos:line="1072" pos:column="9">write_state_count<pos:position pos:line="1072" pos:column="26"/></name><argument_list pos:line="1072" pos:column="26">(<argument><expr><name pos:line="1072" pos:column="27">state<pos:position pos:line="1072" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1072" pos:column="34">"next"<pos:position pos:line="1072" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="1072" pos:column="42">state<pos:position pos:line="1072" pos:column="47"/></name><operator pos:line="1072" pos:column="47">-&gt;<pos:position pos:line="1072" pos:column="52"/></operator><name pos:line="1072" pos:column="49">cur<pos:position pos:line="1072" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="1072" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1072" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1073" pos:column="9">write_state_count<pos:position pos:line="1073" pos:column="26"/></name><argument_list pos:line="1073" pos:column="26">(<argument><expr><name pos:line="1073" pos:column="27">state<pos:position pos:line="1073" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1073" pos:column="34">"last"<pos:position pos:line="1073" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="1073" pos:column="42">state<pos:position pos:line="1073" pos:column="47"/></name><operator pos:line="1073" pos:column="47">-&gt;<pos:position pos:line="1073" pos:column="52"/></operator><name pos:line="1073" pos:column="49">last<pos:position pos:line="1073" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="1073" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="1073" pos:column="55"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1075" pos:column="9">strbuf_release<pos:position pos:line="1075" pos:column="23"/></name><argument_list pos:line="1075" pos:column="23">(<argument><expr><operator pos:line="1075" pos:column="24">&amp;<pos:position pos:line="1075" pos:column="29"/></operator><name pos:line="1075" pos:column="25">sb<pos:position pos:line="1075" pos:column="27"/></name></expr></argument>)<pos:position pos:line="1075" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1075" pos:column="29"/></expr_stmt>
}<pos:position pos:line="1076" pos:column="2"/></block></function>

<comment type="block" pos:line="1078" pos:column="1">/**
 * Increments the patch pointer, and cleans am_state for the application of the
 * next patch.
 */</comment>
<function><specifier pos:line="1082" pos:column="1">static<pos:position pos:line="1082" pos:column="7"/></specifier> <type><name pos:line="1082" pos:column="8">void<pos:position pos:line="1082" pos:column="12"/></name></type> <name pos:line="1082" pos:column="13">am_next<pos:position pos:line="1082" pos:column="20"/></name><parameter_list pos:line="1082" pos:column="20">(<parameter><decl><type><name><name pos:line="1082" pos:column="21">struct<pos:position pos:line="1082" pos:column="27"/></name> <name pos:line="1082" pos:column="28">am_state<pos:position pos:line="1082" pos:column="36"/></name></name> <modifier pos:line="1082" pos:column="37">*<pos:position pos:line="1082" pos:column="38"/></modifier></type><name pos:line="1082" pos:column="38">state<pos:position pos:line="1082" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1082" pos:column="44"/></parameter_list>
<block pos:line="1083" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1084" pos:column="9">unsigned<pos:position pos:line="1084" pos:column="17"/></name> <name pos:line="1084" pos:column="18">char<pos:position pos:line="1084" pos:column="22"/></name></type> <name><name pos:line="1084" pos:column="23">head<pos:position pos:line="1084" pos:column="27"/></name><index pos:line="1084" pos:column="27">[<expr><name pos:line="1084" pos:column="28">GIT_SHA1_RAWSZ<pos:position pos:line="1084" pos:column="42"/></name></expr>]<pos:position pos:line="1084" pos:column="43"/></index></name></decl>;<pos:position pos:line="1084" pos:column="44"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="1086" pos:column="9">free<pos:position pos:line="1086" pos:column="13"/></name><argument_list pos:line="1086" pos:column="13">(<argument><expr><name><name pos:line="1086" pos:column="14">state<pos:position pos:line="1086" pos:column="19"/></name><operator pos:line="1086" pos:column="19">-&gt;<pos:position pos:line="1086" pos:column="24"/></operator><name pos:line="1086" pos:column="21">author_name<pos:position pos:line="1086" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="1086" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1086" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1087" pos:column="9">state<pos:position pos:line="1087" pos:column="14"/></name><operator pos:line="1087" pos:column="14">-&gt;<pos:position pos:line="1087" pos:column="19"/></operator><name pos:line="1087" pos:column="16">author_name<pos:position pos:line="1087" pos:column="27"/></name></name> <operator pos:line="1087" pos:column="28">=<pos:position pos:line="1087" pos:column="29"/></operator> <name pos:line="1087" pos:column="30">NULL<pos:position pos:line="1087" pos:column="34"/></name></expr>;<pos:position pos:line="1087" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1089" pos:column="9">free<pos:position pos:line="1089" pos:column="13"/></name><argument_list pos:line="1089" pos:column="13">(<argument><expr><name><name pos:line="1089" pos:column="14">state<pos:position pos:line="1089" pos:column="19"/></name><operator pos:line="1089" pos:column="19">-&gt;<pos:position pos:line="1089" pos:column="24"/></operator><name pos:line="1089" pos:column="21">author_email<pos:position pos:line="1089" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="1089" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1089" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1090" pos:column="9">state<pos:position pos:line="1090" pos:column="14"/></name><operator pos:line="1090" pos:column="14">-&gt;<pos:position pos:line="1090" pos:column="19"/></operator><name pos:line="1090" pos:column="16">author_email<pos:position pos:line="1090" pos:column="28"/></name></name> <operator pos:line="1090" pos:column="29">=<pos:position pos:line="1090" pos:column="30"/></operator> <name pos:line="1090" pos:column="31">NULL<pos:position pos:line="1090" pos:column="35"/></name></expr>;<pos:position pos:line="1090" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1092" pos:column="9">free<pos:position pos:line="1092" pos:column="13"/></name><argument_list pos:line="1092" pos:column="13">(<argument><expr><name><name pos:line="1092" pos:column="14">state<pos:position pos:line="1092" pos:column="19"/></name><operator pos:line="1092" pos:column="19">-&gt;<pos:position pos:line="1092" pos:column="24"/></operator><name pos:line="1092" pos:column="21">author_date<pos:position pos:line="1092" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="1092" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1092" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1093" pos:column="9">state<pos:position pos:line="1093" pos:column="14"/></name><operator pos:line="1093" pos:column="14">-&gt;<pos:position pos:line="1093" pos:column="19"/></operator><name pos:line="1093" pos:column="16">author_date<pos:position pos:line="1093" pos:column="27"/></name></name> <operator pos:line="1093" pos:column="28">=<pos:position pos:line="1093" pos:column="29"/></operator> <name pos:line="1093" pos:column="30">NULL<pos:position pos:line="1093" pos:column="34"/></name></expr>;<pos:position pos:line="1093" pos:column="35"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1095" pos:column="9">free<pos:position pos:line="1095" pos:column="13"/></name><argument_list pos:line="1095" pos:column="13">(<argument><expr><name><name pos:line="1095" pos:column="14">state<pos:position pos:line="1095" pos:column="19"/></name><operator pos:line="1095" pos:column="19">-&gt;<pos:position pos:line="1095" pos:column="24"/></operator><name pos:line="1095" pos:column="21">msg<pos:position pos:line="1095" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="1095" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1095" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1096" pos:column="9">state<pos:position pos:line="1096" pos:column="14"/></name><operator pos:line="1096" pos:column="14">-&gt;<pos:position pos:line="1096" pos:column="19"/></operator><name pos:line="1096" pos:column="16">msg<pos:position pos:line="1096" pos:column="19"/></name></name> <operator pos:line="1096" pos:column="20">=<pos:position pos:line="1096" pos:column="21"/></operator> <name pos:line="1096" pos:column="22">NULL<pos:position pos:line="1096" pos:column="26"/></name></expr>;<pos:position pos:line="1096" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1097" pos:column="9">state<pos:position pos:line="1097" pos:column="14"/></name><operator pos:line="1097" pos:column="14">-&gt;<pos:position pos:line="1097" pos:column="19"/></operator><name pos:line="1097" pos:column="16">msg_len<pos:position pos:line="1097" pos:column="23"/></name></name> <operator pos:line="1097" pos:column="24">=<pos:position pos:line="1097" pos:column="25"/></operator> <literal type="number" pos:line="1097" pos:column="26">0<pos:position pos:line="1097" pos:column="27"/></literal></expr>;<pos:position pos:line="1097" pos:column="28"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1099" pos:column="9">unlink<pos:position pos:line="1099" pos:column="15"/></name><argument_list pos:line="1099" pos:column="15">(<argument><expr><call><name pos:line="1099" pos:column="16">am_path<pos:position pos:line="1099" pos:column="23"/></name><argument_list pos:line="1099" pos:column="23">(<argument><expr><name pos:line="1099" pos:column="24">state<pos:position pos:line="1099" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1099" pos:column="31">"author-script"<pos:position pos:line="1099" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="1099" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="1099" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1099" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1100" pos:column="9">unlink<pos:position pos:line="1100" pos:column="15"/></name><argument_list pos:line="1100" pos:column="15">(<argument><expr><call><name pos:line="1100" pos:column="16">am_path<pos:position pos:line="1100" pos:column="23"/></name><argument_list pos:line="1100" pos:column="23">(<argument><expr><name pos:line="1100" pos:column="24">state<pos:position pos:line="1100" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1100" pos:column="31">"final-commit"<pos:position pos:line="1100" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="1100" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="1100" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="1100" pos:column="48"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1102" pos:column="9">hashclr<pos:position pos:line="1102" pos:column="16"/></name><argument_list pos:line="1102" pos:column="16">(<argument><expr><name><name pos:line="1102" pos:column="17">state<pos:position pos:line="1102" pos:column="22"/></name><operator pos:line="1102" pos:column="22">-&gt;<pos:position pos:line="1102" pos:column="27"/></operator><name pos:line="1102" pos:column="24">orig_commit<pos:position pos:line="1102" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="1102" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1102" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1103" pos:column="9">unlink<pos:position pos:line="1103" pos:column="15"/></name><argument_list pos:line="1103" pos:column="15">(<argument><expr><call><name pos:line="1103" pos:column="16">am_path<pos:position pos:line="1103" pos:column="23"/></name><argument_list pos:line="1103" pos:column="23">(<argument><expr><name pos:line="1103" pos:column="24">state<pos:position pos:line="1103" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1103" pos:column="31">"original-commit"<pos:position pos:line="1103" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="1103" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="1103" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="1103" pos:column="51"/></expr_stmt>

	<if pos:line="1105" pos:column="9">if <condition pos:line="1105" pos:column="12">(<expr><operator pos:line="1105" pos:column="13">!<pos:position pos:line="1105" pos:column="14"/></operator><call><name pos:line="1105" pos:column="14">get_sha1<pos:position pos:line="1105" pos:column="22"/></name><argument_list pos:line="1105" pos:column="22">(<argument><expr><literal type="string" pos:line="1105" pos:column="23">"HEAD"<pos:position pos:line="1105" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="1105" pos:column="31">head<pos:position pos:line="1105" pos:column="35"/></name></expr></argument>)<pos:position pos:line="1105" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="1105" pos:column="37"/></condition><then pos:line="1105" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1106" pos:column="17">write_state_text<pos:position pos:line="1106" pos:column="33"/></name><argument_list pos:line="1106" pos:column="33">(<argument><expr><name pos:line="1106" pos:column="34">state<pos:position pos:line="1106" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1106" pos:column="41">"abort-safety"<pos:position pos:line="1106" pos:column="55"/></literal></expr></argument>, <argument><expr><call><name pos:line="1106" pos:column="57">sha1_to_hex<pos:position pos:line="1106" pos:column="68"/></name><argument_list pos:line="1106" pos:column="68">(<argument><expr><name pos:line="1106" pos:column="69">head<pos:position pos:line="1106" pos:column="73"/></name></expr></argument>)<pos:position pos:line="1106" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="1106" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="1106" pos:column="76"/></expr_stmt></block></then>
	<else pos:line="1107" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1108" pos:column="17">write_state_text<pos:position pos:line="1108" pos:column="33"/></name><argument_list pos:line="1108" pos:column="33">(<argument><expr><name pos:line="1108" pos:column="34">state<pos:position pos:line="1108" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1108" pos:column="41">"abort-safety"<pos:position pos:line="1108" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="1108" pos:column="57">""<pos:position pos:line="1108" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="1108" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="1108" pos:column="61"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name><name pos:line="1110" pos:column="9">state<pos:position pos:line="1110" pos:column="14"/></name><operator pos:line="1110" pos:column="14">-&gt;<pos:position pos:line="1110" pos:column="19"/></operator><name pos:line="1110" pos:column="16">cur<pos:position pos:line="1110" pos:column="19"/></name></name><operator pos:line="1110" pos:column="19">++<pos:position pos:line="1110" pos:column="21"/></operator></expr>;<pos:position pos:line="1110" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1111" pos:column="9">write_state_count<pos:position pos:line="1111" pos:column="26"/></name><argument_list pos:line="1111" pos:column="26">(<argument><expr><name pos:line="1111" pos:column="27">state<pos:position pos:line="1111" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1111" pos:column="34">"next"<pos:position pos:line="1111" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="1111" pos:column="42">state<pos:position pos:line="1111" pos:column="47"/></name><operator pos:line="1111" pos:column="47">-&gt;<pos:position pos:line="1111" pos:column="52"/></operator><name pos:line="1111" pos:column="49">cur<pos:position pos:line="1111" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="1111" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1111" pos:column="54"/></expr_stmt>
}<pos:position pos:line="1112" pos:column="2"/></block></function>

<comment type="block" pos:line="1114" pos:column="1">/**
 * Returns the filename of the current patch email.
 */</comment>
<function><specifier pos:line="1117" pos:column="1">static<pos:position pos:line="1117" pos:column="7"/></specifier> <type><specifier pos:line="1117" pos:column="8">const<pos:position pos:line="1117" pos:column="13"/></specifier> <name pos:line="1117" pos:column="14">char<pos:position pos:line="1117" pos:column="18"/></name> <modifier pos:line="1117" pos:column="19">*<pos:position pos:line="1117" pos:column="20"/></modifier></type><name pos:line="1117" pos:column="20">msgnum<pos:position pos:line="1117" pos:column="26"/></name><parameter_list pos:line="1117" pos:column="26">(<parameter><decl><type><specifier pos:line="1117" pos:column="27">const<pos:position pos:line="1117" pos:column="32"/></specifier> <name><name pos:line="1117" pos:column="33">struct<pos:position pos:line="1117" pos:column="39"/></name> <name pos:line="1117" pos:column="40">am_state<pos:position pos:line="1117" pos:column="48"/></name></name> <modifier pos:line="1117" pos:column="49">*<pos:position pos:line="1117" pos:column="50"/></modifier></type><name pos:line="1117" pos:column="50">state<pos:position pos:line="1117" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1117" pos:column="56"/></parameter_list>
<block pos:line="1118" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="1119" pos:column="9">static<pos:position pos:line="1119" pos:column="15"/></specifier> <type><name><name pos:line="1119" pos:column="16">struct<pos:position pos:line="1119" pos:column="22"/></name> <name pos:line="1119" pos:column="23">strbuf<pos:position pos:line="1119" pos:column="29"/></name></name></type> <name pos:line="1119" pos:column="30">sb<pos:position pos:line="1119" pos:column="32"/></name> <init pos:line="1119" pos:column="33">= <expr><name pos:line="1119" pos:column="35">STRBUF_INIT<pos:position pos:line="1119" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="1119" pos:column="47"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="1121" pos:column="9">strbuf_reset<pos:position pos:line="1121" pos:column="21"/></name><argument_list pos:line="1121" pos:column="21">(<argument><expr><operator pos:line="1121" pos:column="22">&amp;<pos:position pos:line="1121" pos:column="27"/></operator><name pos:line="1121" pos:column="23">sb<pos:position pos:line="1121" pos:column="25"/></name></expr></argument>)<pos:position pos:line="1121" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="1121" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1122" pos:column="9">strbuf_addf<pos:position pos:line="1122" pos:column="20"/></name><argument_list pos:line="1122" pos:column="20">(<argument><expr><operator pos:line="1122" pos:column="21">&amp;<pos:position pos:line="1122" pos:column="26"/></operator><name pos:line="1122" pos:column="22">sb<pos:position pos:line="1122" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1122" pos:column="26">"%0*d"<pos:position pos:line="1122" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="1122" pos:column="34">state<pos:position pos:line="1122" pos:column="39"/></name><operator pos:line="1122" pos:column="39">-&gt;<pos:position pos:line="1122" pos:column="44"/></operator><name pos:line="1122" pos:column="41">prec<pos:position pos:line="1122" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="1122" pos:column="47">state<pos:position pos:line="1122" pos:column="52"/></name><operator pos:line="1122" pos:column="52">-&gt;<pos:position pos:line="1122" pos:column="57"/></operator><name pos:line="1122" pos:column="54">cur<pos:position pos:line="1122" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="1122" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1122" pos:column="59"/></expr_stmt>

	<return pos:line="1124" pos:column="9">return <expr><name><name pos:line="1124" pos:column="16">sb<pos:position pos:line="1124" pos:column="18"/></name><operator pos:line="1124" pos:column="18">.<pos:position pos:line="1124" pos:column="19"/></operator><name pos:line="1124" pos:column="19">buf<pos:position pos:line="1124" pos:column="22"/></name></name></expr>;<pos:position pos:line="1124" pos:column="23"/></return>
}<pos:position pos:line="1125" pos:column="2"/></block></function>

<comment type="block" pos:line="1127" pos:column="1">/**
 * Refresh and write index.
 */</comment>
<function><specifier pos:line="1130" pos:column="1">static<pos:position pos:line="1130" pos:column="7"/></specifier> <type><name pos:line="1130" pos:column="8">void<pos:position pos:line="1130" pos:column="12"/></name></type> <name pos:line="1130" pos:column="13">refresh_and_write_cache<pos:position pos:line="1130" pos:column="36"/></name><parameter_list pos:line="1130" pos:column="36">(<parameter><decl><type><name pos:line="1130" pos:column="37">void<pos:position pos:line="1130" pos:column="41"/></name></type></decl></parameter>)<pos:position pos:line="1130" pos:column="42"/></parameter_list>
<block pos:line="1131" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="1132" pos:column="9">struct<pos:position pos:line="1132" pos:column="15"/></name> <name pos:line="1132" pos:column="16">lock_file<pos:position pos:line="1132" pos:column="25"/></name></name> <modifier pos:line="1132" pos:column="26">*<pos:position pos:line="1132" pos:column="27"/></modifier></type><name pos:line="1132" pos:column="27">lock_file<pos:position pos:line="1132" pos:column="36"/></name> <init pos:line="1132" pos:column="37">= <expr><call><name pos:line="1132" pos:column="39">xcalloc<pos:position pos:line="1132" pos:column="46"/></name><argument_list pos:line="1132" pos:column="46">(<argument><expr><literal type="number" pos:line="1132" pos:column="47">1<pos:position pos:line="1132" pos:column="48"/></literal></expr></argument>, <argument><expr><sizeof pos:line="1132" pos:column="50">sizeof<argument_list pos:line="1132" pos:column="56">(<argument><expr pos:line="1132" pos:column="57">struct <name pos:line="1132" pos:column="64">lock_file<pos:position pos:line="1132" pos:column="73"/></name></expr></argument>)<pos:position pos:line="1132" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="1132" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1132" pos:column="76"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="1134" pos:column="9">hold_locked_index<pos:position pos:line="1134" pos:column="26"/></name><argument_list pos:line="1134" pos:column="26">(<argument><expr><name pos:line="1134" pos:column="27">lock_file<pos:position pos:line="1134" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1134" pos:column="38">1<pos:position pos:line="1134" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="1134" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1134" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1135" pos:column="9">refresh_cache<pos:position pos:line="1135" pos:column="22"/></name><argument_list pos:line="1135" pos:column="22">(<argument><expr><name pos:line="1135" pos:column="23">REFRESH_QUIET<pos:position pos:line="1135" pos:column="36"/></name></expr></argument>)<pos:position pos:line="1135" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1135" pos:column="38"/></expr_stmt>
	<if pos:line="1136" pos:column="9">if <condition pos:line="1136" pos:column="12">(<expr><call><name pos:line="1136" pos:column="13">write_locked_index<pos:position pos:line="1136" pos:column="31"/></name><argument_list pos:line="1136" pos:column="31">(<argument><expr><operator pos:line="1136" pos:column="32">&amp;<pos:position pos:line="1136" pos:column="37"/></operator><name pos:line="1136" pos:column="33">the_index<pos:position pos:line="1136" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1136" pos:column="44">lock_file<pos:position pos:line="1136" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="1136" pos:column="55">COMMIT_LOCK<pos:position pos:line="1136" pos:column="66"/></name></expr></argument>)<pos:position pos:line="1136" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="1136" pos:column="68"/></condition><then pos:line="1136" pos:column="68">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1137" pos:column="17">die<pos:position pos:line="1137" pos:column="20"/></name><argument_list pos:line="1137" pos:column="20">(<argument><expr><call><name pos:line="1137" pos:column="21">_<pos:position pos:line="1137" pos:column="22"/></name><argument_list pos:line="1137" pos:column="22">(<argument><expr><literal type="string" pos:line="1137" pos:column="23">"unable to write index file"<pos:position pos:line="1137" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="1137" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="1137" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1137" pos:column="54"/></expr_stmt></block></then></if>
}<pos:position pos:line="1138" pos:column="2"/></block></function>

<comment type="block" pos:line="1140" pos:column="1">/**
 * Returns 1 if the index differs from HEAD, 0 otherwise. When on an unborn
 * branch, returns 1 if there are entries in the index, 0 otherwise. If an
 * strbuf is provided, the space-separated list of files that differ will be
 * appended to it.
 */</comment>
<function><specifier pos:line="1146" pos:column="1">static<pos:position pos:line="1146" pos:column="7"/></specifier> <type><name pos:line="1146" pos:column="8">int<pos:position pos:line="1146" pos:column="11"/></name></type> <name pos:line="1146" pos:column="12">index_has_changes<pos:position pos:line="1146" pos:column="29"/></name><parameter_list pos:line="1146" pos:column="29">(<parameter><decl><type><name><name pos:line="1146" pos:column="30">struct<pos:position pos:line="1146" pos:column="36"/></name> <name pos:line="1146" pos:column="37">strbuf<pos:position pos:line="1146" pos:column="43"/></name></name> <modifier pos:line="1146" pos:column="44">*<pos:position pos:line="1146" pos:column="45"/></modifier></type><name pos:line="1146" pos:column="45">sb<pos:position pos:line="1146" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1146" pos:column="48"/></parameter_list>
<block pos:line="1147" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1148" pos:column="9">unsigned<pos:position pos:line="1148" pos:column="17"/></name> <name pos:line="1148" pos:column="18">char<pos:position pos:line="1148" pos:column="22"/></name></type> <name><name pos:line="1148" pos:column="23">head<pos:position pos:line="1148" pos:column="27"/></name><index pos:line="1148" pos:column="27">[<expr><name pos:line="1148" pos:column="28">GIT_SHA1_RAWSZ<pos:position pos:line="1148" pos:column="42"/></name></expr>]<pos:position pos:line="1148" pos:column="43"/></index></name></decl>;<pos:position pos:line="1148" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="1149" pos:column="9">int<pos:position pos:line="1149" pos:column="12"/></name></type> <name pos:line="1149" pos:column="13">i<pos:position pos:line="1149" pos:column="14"/></name></decl>;<pos:position pos:line="1149" pos:column="15"/></decl_stmt>

	<if pos:line="1151" pos:column="9">if <condition pos:line="1151" pos:column="12">(<expr><operator pos:line="1151" pos:column="13">!<pos:position pos:line="1151" pos:column="14"/></operator><call><name pos:line="1151" pos:column="14">get_sha1_tree<pos:position pos:line="1151" pos:column="27"/></name><argument_list pos:line="1151" pos:column="27">(<argument><expr><literal type="string" pos:line="1151" pos:column="28">"HEAD"<pos:position pos:line="1151" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="1151" pos:column="36">head<pos:position pos:line="1151" pos:column="40"/></name></expr></argument>)<pos:position pos:line="1151" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="1151" pos:column="42"/></condition><then pos:line="1151" pos:column="42"> <block pos:line="1151" pos:column="43">{
		<decl_stmt><decl><type><name><name pos:line="1152" pos:column="17">struct<pos:position pos:line="1152" pos:column="23"/></name> <name pos:line="1152" pos:column="24">diff_options<pos:position pos:line="1152" pos:column="36"/></name></name></type> <name pos:line="1152" pos:column="37">opt<pos:position pos:line="1152" pos:column="40"/></name></decl>;<pos:position pos:line="1152" pos:column="41"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="1154" pos:column="17">diff_setup<pos:position pos:line="1154" pos:column="27"/></name><argument_list pos:line="1154" pos:column="27">(<argument><expr><operator pos:line="1154" pos:column="28">&amp;<pos:position pos:line="1154" pos:column="33"/></operator><name pos:line="1154" pos:column="29">opt<pos:position pos:line="1154" pos:column="32"/></name></expr></argument>)<pos:position pos:line="1154" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1154" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1155" pos:column="17">DIFF_OPT_SET<pos:position pos:line="1155" pos:column="29"/></name><argument_list pos:line="1155" pos:column="29">(<argument><expr><operator pos:line="1155" pos:column="30">&amp;<pos:position pos:line="1155" pos:column="35"/></operator><name pos:line="1155" pos:column="31">opt<pos:position pos:line="1155" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="1155" pos:column="36">EXIT_WITH_STATUS<pos:position pos:line="1155" pos:column="52"/></name></expr></argument>)<pos:position pos:line="1155" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1155" pos:column="54"/></expr_stmt>
		<if pos:line="1156" pos:column="17">if <condition pos:line="1156" pos:column="20">(<expr><operator pos:line="1156" pos:column="21">!<pos:position pos:line="1156" pos:column="22"/></operator><name pos:line="1156" pos:column="22">sb<pos:position pos:line="1156" pos:column="24"/></name></expr>)<pos:position pos:line="1156" pos:column="25"/></condition><then pos:line="1156" pos:column="25">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="1157" pos:column="25">DIFF_OPT_SET<pos:position pos:line="1157" pos:column="37"/></name><argument_list pos:line="1157" pos:column="37">(<argument><expr><operator pos:line="1157" pos:column="38">&amp;<pos:position pos:line="1157" pos:column="43"/></operator><name pos:line="1157" pos:column="39">opt<pos:position pos:line="1157" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1157" pos:column="44">QUICK<pos:position pos:line="1157" pos:column="49"/></name></expr></argument>)<pos:position pos:line="1157" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="1157" pos:column="51"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="1158" pos:column="17">do_diff_cache<pos:position pos:line="1158" pos:column="30"/></name><argument_list pos:line="1158" pos:column="30">(<argument><expr><name pos:line="1158" pos:column="31">head<pos:position pos:line="1158" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="1158" pos:column="37">&amp;<pos:position pos:line="1158" pos:column="42"/></operator><name pos:line="1158" pos:column="38">opt<pos:position pos:line="1158" pos:column="41"/></name></expr></argument>)<pos:position pos:line="1158" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1158" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1159" pos:column="17">diffcore_std<pos:position pos:line="1159" pos:column="29"/></name><argument_list pos:line="1159" pos:column="29">(<argument><expr><operator pos:line="1159" pos:column="30">&amp;<pos:position pos:line="1159" pos:column="35"/></operator><name pos:line="1159" pos:column="31">opt<pos:position pos:line="1159" pos:column="34"/></name></expr></argument>)<pos:position pos:line="1159" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1159" pos:column="36"/></expr_stmt>
		<for pos:line="1160" pos:column="17">for <control pos:line="1160" pos:column="21">(<init><expr><name pos:line="1160" pos:column="22">i<pos:position pos:line="1160" pos:column="23"/></name> <operator pos:line="1160" pos:column="24">=<pos:position pos:line="1160" pos:column="25"/></operator> <literal type="number" pos:line="1160" pos:column="26">0<pos:position pos:line="1160" pos:column="27"/></literal></expr>;<pos:position pos:line="1160" pos:column="28"/></init> <condition><expr><name pos:line="1160" pos:column="29">sb<pos:position pos:line="1160" pos:column="31"/></name> <operator pos:line="1160" pos:column="32">&amp;&amp;<pos:position pos:line="1160" pos:column="42"/></operator> <name pos:line="1160" pos:column="35">i<pos:position pos:line="1160" pos:column="36"/></name> <operator pos:line="1160" pos:column="37">&lt;<pos:position pos:line="1160" pos:column="41"/></operator> <name><name pos:line="1160" pos:column="39">diff_queued_diff<pos:position pos:line="1160" pos:column="55"/></name><operator pos:line="1160" pos:column="55">.<pos:position pos:line="1160" pos:column="56"/></operator><name pos:line="1160" pos:column="56">nr<pos:position pos:line="1160" pos:column="58"/></name></name></expr>;<pos:position pos:line="1160" pos:column="59"/></condition> <incr><expr><name pos:line="1160" pos:column="60">i<pos:position pos:line="1160" pos:column="61"/></name><operator pos:line="1160" pos:column="61">++<pos:position pos:line="1160" pos:column="63"/></operator></expr></incr>)<pos:position pos:line="1160" pos:column="64"/></control> <block pos:line="1160" pos:column="65">{
			<if pos:line="1161" pos:column="25">if <condition pos:line="1161" pos:column="28">(<expr><name pos:line="1161" pos:column="29">i<pos:position pos:line="1161" pos:column="30"/></name></expr>)<pos:position pos:line="1161" pos:column="31"/></condition><then pos:line="1161" pos:column="31">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="1162" pos:column="33">strbuf_addch<pos:position pos:line="1162" pos:column="45"/></name><argument_list pos:line="1162" pos:column="45">(<argument><expr><name pos:line="1162" pos:column="46">sb<pos:position pos:line="1162" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="1162" pos:column="50">' '<pos:position pos:line="1162" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="1162" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="1162" pos:column="55"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="1163" pos:column="25">strbuf_addstr<pos:position pos:line="1163" pos:column="38"/></name><argument_list pos:line="1163" pos:column="38">(<argument><expr><name pos:line="1163" pos:column="39">sb<pos:position pos:line="1163" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="1163" pos:column="43">diff_queued_diff<pos:position pos:line="1163" pos:column="59"/></name><operator pos:line="1163" pos:column="59">.<pos:position pos:line="1163" pos:column="60"/></operator><name pos:line="1163" pos:column="60">queue<pos:position pos:line="1163" pos:column="65"/></name><index pos:line="1163" pos:column="65">[<expr><name pos:line="1163" pos:column="66">i<pos:position pos:line="1163" pos:column="67"/></name></expr>]<pos:position pos:line="1163" pos:column="68"/></index></name><operator pos:line="1163" pos:column="68">-&gt;<pos:position pos:line="1163" pos:column="73"/></operator><name><name pos:line="1163" pos:column="70">two<pos:position pos:line="1163" pos:column="73"/></name><operator pos:line="1163" pos:column="73">-&gt;<pos:position pos:line="1163" pos:column="78"/></operator><name pos:line="1163" pos:column="75">path<pos:position pos:line="1163" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="1163" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="1163" pos:column="81"/></expr_stmt>
		}<pos:position pos:line="1164" pos:column="18"/></block></for>
		<expr_stmt><expr><call><name pos:line="1165" pos:column="17">diff_flush<pos:position pos:line="1165" pos:column="27"/></name><argument_list pos:line="1165" pos:column="27">(<argument><expr><operator pos:line="1165" pos:column="28">&amp;<pos:position pos:line="1165" pos:column="33"/></operator><name pos:line="1165" pos:column="29">opt<pos:position pos:line="1165" pos:column="32"/></name></expr></argument>)<pos:position pos:line="1165" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1165" pos:column="34"/></expr_stmt>
		<return pos:line="1166" pos:column="17">return <expr><call><name pos:line="1166" pos:column="24">DIFF_OPT_TST<pos:position pos:line="1166" pos:column="36"/></name><argument_list pos:line="1166" pos:column="36">(<argument><expr><operator pos:line="1166" pos:column="37">&amp;<pos:position pos:line="1166" pos:column="42"/></operator><name pos:line="1166" pos:column="38">opt<pos:position pos:line="1166" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="1166" pos:column="43">HAS_CHANGES<pos:position pos:line="1166" pos:column="54"/></name></expr></argument>)<pos:position pos:line="1166" pos:column="55"/></argument_list></call> <operator pos:line="1166" pos:column="56">!=<pos:position pos:line="1166" pos:column="58"/></operator> <literal type="number" pos:line="1166" pos:column="59">0<pos:position pos:line="1166" pos:column="60"/></literal></expr>;<pos:position pos:line="1166" pos:column="61"/></return>
	}<pos:position pos:line="1167" pos:column="10"/></block></then> <else pos:line="1167" pos:column="11">else <block pos:line="1167" pos:column="16">{
		<for pos:line="1168" pos:column="17">for <control pos:line="1168" pos:column="21">(<init><expr><name pos:line="1168" pos:column="22">i<pos:position pos:line="1168" pos:column="23"/></name> <operator pos:line="1168" pos:column="24">=<pos:position pos:line="1168" pos:column="25"/></operator> <literal type="number" pos:line="1168" pos:column="26">0<pos:position pos:line="1168" pos:column="27"/></literal></expr>;<pos:position pos:line="1168" pos:column="28"/></init> <condition><expr><name pos:line="1168" pos:column="29">sb<pos:position pos:line="1168" pos:column="31"/></name> <operator pos:line="1168" pos:column="32">&amp;&amp;<pos:position pos:line="1168" pos:column="42"/></operator> <name pos:line="1168" pos:column="35">i<pos:position pos:line="1168" pos:column="36"/></name> <operator pos:line="1168" pos:column="37">&lt;<pos:position pos:line="1168" pos:column="41"/></operator> <name pos:line="1168" pos:column="39">active_nr<pos:position pos:line="1168" pos:column="48"/></name></expr>;<pos:position pos:line="1168" pos:column="49"/></condition> <incr><expr><name pos:line="1168" pos:column="50">i<pos:position pos:line="1168" pos:column="51"/></name><operator pos:line="1168" pos:column="51">++<pos:position pos:line="1168" pos:column="53"/></operator></expr></incr>)<pos:position pos:line="1168" pos:column="54"/></control> <block pos:line="1168" pos:column="55">{
			<if pos:line="1169" pos:column="25">if <condition pos:line="1169" pos:column="28">(<expr><name pos:line="1169" pos:column="29">i<pos:position pos:line="1169" pos:column="30"/></name></expr>)<pos:position pos:line="1169" pos:column="31"/></condition><then pos:line="1169" pos:column="31">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="1170" pos:column="33">strbuf_addch<pos:position pos:line="1170" pos:column="45"/></name><argument_list pos:line="1170" pos:column="45">(<argument><expr><name pos:line="1170" pos:column="46">sb<pos:position pos:line="1170" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="1170" pos:column="50">' '<pos:position pos:line="1170" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="1170" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="1170" pos:column="55"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="1171" pos:column="25">strbuf_addstr<pos:position pos:line="1171" pos:column="38"/></name><argument_list pos:line="1171" pos:column="38">(<argument><expr><name pos:line="1171" pos:column="39">sb<pos:position pos:line="1171" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="1171" pos:column="43">active_cache<pos:position pos:line="1171" pos:column="55"/></name><index pos:line="1171" pos:column="55">[<expr><name pos:line="1171" pos:column="56">i<pos:position pos:line="1171" pos:column="57"/></name></expr>]<pos:position pos:line="1171" pos:column="58"/></index></name><operator pos:line="1171" pos:column="58">-&gt;<pos:position pos:line="1171" pos:column="63"/></operator><name pos:line="1171" pos:column="60">name<pos:position pos:line="1171" pos:column="64"/></name></expr></argument>)<pos:position pos:line="1171" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="1171" pos:column="66"/></expr_stmt>
		}<pos:position pos:line="1172" pos:column="18"/></block></for>
		<return pos:line="1173" pos:column="17">return <expr><operator pos:line="1173" pos:column="24">!<pos:position pos:line="1173" pos:column="25"/></operator><operator pos:line="1173" pos:column="25">!<pos:position pos:line="1173" pos:column="26"/></operator><name pos:line="1173" pos:column="26">active_nr<pos:position pos:line="1173" pos:column="35"/></name></expr>;<pos:position pos:line="1173" pos:column="36"/></return>
	}<pos:position pos:line="1174" pos:column="10"/></block></else></if>
}<pos:position pos:line="1175" pos:column="2"/></block></function>

<comment type="block" pos:line="1177" pos:column="1">/**
 * Dies with a user-friendly message on how to proceed after resolving the
 * problem. This message can be overridden with state-&gt;resolvemsg.
 */</comment>
<function><specifier pos:line="1181" pos:column="1">static<pos:position pos:line="1181" pos:column="7"/></specifier> <type><name pos:line="1181" pos:column="8">void<pos:position pos:line="1181" pos:column="12"/></name> <name pos:line="1181" pos:column="13">NORETURN<pos:position pos:line="1181" pos:column="21"/></name></type> <name pos:line="1181" pos:column="22">die_user_resolve<pos:position pos:line="1181" pos:column="38"/></name><parameter_list pos:line="1181" pos:column="38">(<parameter><decl><type><specifier pos:line="1181" pos:column="39">const<pos:position pos:line="1181" pos:column="44"/></specifier> <name><name pos:line="1181" pos:column="45">struct<pos:position pos:line="1181" pos:column="51"/></name> <name pos:line="1181" pos:column="52">am_state<pos:position pos:line="1181" pos:column="60"/></name></name> <modifier pos:line="1181" pos:column="61">*<pos:position pos:line="1181" pos:column="62"/></modifier></type><name pos:line="1181" pos:column="62">state<pos:position pos:line="1181" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1181" pos:column="68"/></parameter_list>
<block pos:line="1182" pos:column="1">{
	<if pos:line="1183" pos:column="9">if <condition pos:line="1183" pos:column="12">(<expr><name><name pos:line="1183" pos:column="13">state<pos:position pos:line="1183" pos:column="18"/></name><operator pos:line="1183" pos:column="18">-&gt;<pos:position pos:line="1183" pos:column="23"/></operator><name pos:line="1183" pos:column="20">resolvemsg<pos:position pos:line="1183" pos:column="30"/></name></name></expr>)<pos:position pos:line="1183" pos:column="31"/></condition><then pos:line="1183" pos:column="31"> <block pos:line="1183" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="1184" pos:column="17">printf_ln<pos:position pos:line="1184" pos:column="26"/></name><argument_list pos:line="1184" pos:column="26">(<argument><expr><literal type="string" pos:line="1184" pos:column="27">"%s"<pos:position pos:line="1184" pos:column="31"/></literal></expr></argument>, <argument><expr><name><name pos:line="1184" pos:column="33">state<pos:position pos:line="1184" pos:column="38"/></name><operator pos:line="1184" pos:column="38">-&gt;<pos:position pos:line="1184" pos:column="43"/></operator><name pos:line="1184" pos:column="40">resolvemsg<pos:position pos:line="1184" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="1184" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1184" pos:column="52"/></expr_stmt>
	}<pos:position pos:line="1185" pos:column="10"/></block></then> <else pos:line="1185" pos:column="11">else <block pos:line="1185" pos:column="16">{
		<decl_stmt><decl><type><specifier pos:line="1186" pos:column="17">const<pos:position pos:line="1186" pos:column="22"/></specifier> <name pos:line="1186" pos:column="23">char<pos:position pos:line="1186" pos:column="27"/></name> <modifier pos:line="1186" pos:column="28">*<pos:position pos:line="1186" pos:column="29"/></modifier></type><name pos:line="1186" pos:column="29">cmdline<pos:position pos:line="1186" pos:column="36"/></name> <init pos:line="1186" pos:column="37">= <expr><ternary><condition><expr><name><name pos:line="1186" pos:column="39">state<pos:position pos:line="1186" pos:column="44"/></name><operator pos:line="1186" pos:column="44">-&gt;<pos:position pos:line="1186" pos:column="49"/></operator><name pos:line="1186" pos:column="46">interactive<pos:position pos:line="1186" pos:column="57"/></name></name></expr> ?<pos:position pos:line="1186" pos:column="59"/></condition><then pos:line="1186" pos:column="59"> <expr><literal type="string" pos:line="1186" pos:column="60">"git am -i"<pos:position pos:line="1186" pos:column="71"/></literal></expr> <pos:position pos:line="1186" pos:column="72"/></then><else pos:line="1186" pos:column="72">: <expr><literal type="string" pos:line="1186" pos:column="74">"git am"<pos:position pos:line="1186" pos:column="82"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="1186" pos:column="83"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="1188" pos:column="17">printf_ln<pos:position pos:line="1188" pos:column="26"/></name><argument_list pos:line="1188" pos:column="26">(<argument><expr><call><name pos:line="1188" pos:column="27">_<pos:position pos:line="1188" pos:column="28"/></name><argument_list pos:line="1188" pos:column="28">(<argument><expr><literal type="string" pos:line="1188" pos:column="29">"When you have resolved this problem, run \"%s --continue\"."<pos:position pos:line="1188" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="1188" pos:column="91"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="1188" pos:column="93">cmdline<pos:position pos:line="1188" pos:column="100"/></name></expr></argument>)<pos:position pos:line="1188" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="1188" pos:column="102"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1189" pos:column="17">printf_ln<pos:position pos:line="1189" pos:column="26"/></name><argument_list pos:line="1189" pos:column="26">(<argument><expr><call><name pos:line="1189" pos:column="27">_<pos:position pos:line="1189" pos:column="28"/></name><argument_list pos:line="1189" pos:column="28">(<argument><expr><literal type="string" pos:line="1189" pos:column="29">"If you prefer to skip this patch, run \"%s --skip\" instead."<pos:position pos:line="1189" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="1189" pos:column="92"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="1189" pos:column="94">cmdline<pos:position pos:line="1189" pos:column="101"/></name></expr></argument>)<pos:position pos:line="1189" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="1189" pos:column="103"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1190" pos:column="17">printf_ln<pos:position pos:line="1190" pos:column="26"/></name><argument_list pos:line="1190" pos:column="26">(<argument><expr><call><name pos:line="1190" pos:column="27">_<pos:position pos:line="1190" pos:column="28"/></name><argument_list pos:line="1190" pos:column="28">(<argument><expr><literal type="string" pos:line="1190" pos:column="29">"To restore the original branch and stop patching, run \"%s --abort\"."<pos:position pos:line="1190" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="1190" pos:column="101"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="1190" pos:column="103">cmdline<pos:position pos:line="1190" pos:column="110"/></name></expr></argument>)<pos:position pos:line="1190" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="1190" pos:column="112"/></expr_stmt>
	}<pos:position pos:line="1191" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="1193" pos:column="9">exit<pos:position pos:line="1193" pos:column="13"/></name><argument_list pos:line="1193" pos:column="13">(<argument><expr><literal type="number" pos:line="1193" pos:column="14">128<pos:position pos:line="1193" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="1193" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="1193" pos:column="19"/></expr_stmt>
}<pos:position pos:line="1194" pos:column="2"/></block></function>

<function><specifier pos:line="1196" pos:column="1">static<pos:position pos:line="1196" pos:column="7"/></specifier> <type><name pos:line="1196" pos:column="8">void<pos:position pos:line="1196" pos:column="12"/></name></type> <name pos:line="1196" pos:column="13">am_signoff<pos:position pos:line="1196" pos:column="23"/></name><parameter_list pos:line="1196" pos:column="23">(<parameter><decl><type><name><name pos:line="1196" pos:column="24">struct<pos:position pos:line="1196" pos:column="30"/></name> <name pos:line="1196" pos:column="31">strbuf<pos:position pos:line="1196" pos:column="37"/></name></name> <modifier pos:line="1196" pos:column="38">*<pos:position pos:line="1196" pos:column="39"/></modifier></type><name pos:line="1196" pos:column="39">sb<pos:position pos:line="1196" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1196" pos:column="42"/></parameter_list>
<block pos:line="1197" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1198" pos:column="9">char<pos:position pos:line="1198" pos:column="13"/></name> <modifier pos:line="1198" pos:column="14">*<pos:position pos:line="1198" pos:column="15"/></modifier></type><name pos:line="1198" pos:column="15">cp<pos:position pos:line="1198" pos:column="17"/></name></decl>;<pos:position pos:line="1198" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1199" pos:column="9">struct<pos:position pos:line="1199" pos:column="15"/></name> <name pos:line="1199" pos:column="16">strbuf<pos:position pos:line="1199" pos:column="22"/></name></name></type> <name pos:line="1199" pos:column="23">mine<pos:position pos:line="1199" pos:column="27"/></name> <init pos:line="1199" pos:column="28">= <expr><name pos:line="1199" pos:column="30">STRBUF_INIT<pos:position pos:line="1199" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="1199" pos:column="42"/></decl_stmt>

	<comment type="block" pos:line="1201" pos:column="9">/* Does it end with our own sign-off? */</comment>
	<expr_stmt><expr><call><name pos:line="1202" pos:column="9">strbuf_addf<pos:position pos:line="1202" pos:column="20"/></name><argument_list pos:line="1202" pos:column="20">(<argument><expr><operator pos:line="1202" pos:column="21">&amp;<pos:position pos:line="1202" pos:column="26"/></operator><name pos:line="1202" pos:column="22">mine<pos:position pos:line="1202" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1202" pos:column="28">"\n%s%s\n"<pos:position pos:line="1202" pos:column="38"/></literal></expr></argument>,
		    <argument><expr><name pos:line="1203" pos:column="21">sign_off_header<pos:position pos:line="1203" pos:column="36"/></name></expr></argument>,
		    <argument><expr><call><name pos:line="1204" pos:column="21">fmt_name<pos:position pos:line="1204" pos:column="29"/></name><argument_list pos:line="1204" pos:column="29">(<argument><expr><call><name pos:line="1204" pos:column="30">getenv<pos:position pos:line="1204" pos:column="36"/></name><argument_list pos:line="1204" pos:column="36">(<argument><expr><literal type="string" pos:line="1204" pos:column="37">"GIT_COMMITTER_NAME"<pos:position pos:line="1204" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="1204" pos:column="58"/></argument_list></call></expr></argument>,
			     <argument><expr><call><name pos:line="1205" pos:column="30">getenv<pos:position pos:line="1205" pos:column="36"/></name><argument_list pos:line="1205" pos:column="36">(<argument><expr><literal type="string" pos:line="1205" pos:column="37">"GIT_COMMITTER_EMAIL"<pos:position pos:line="1205" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="1205" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="1205" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="1205" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="1205" pos:column="62"/></expr_stmt>
	<if pos:line="1206" pos:column="9">if <condition pos:line="1206" pos:column="12">(<expr><name><name pos:line="1206" pos:column="13">mine<pos:position pos:line="1206" pos:column="17"/></name><operator pos:line="1206" pos:column="17">.<pos:position pos:line="1206" pos:column="18"/></operator><name pos:line="1206" pos:column="18">len<pos:position pos:line="1206" pos:column="21"/></name></name> <operator pos:line="1206" pos:column="22">&lt;<pos:position pos:line="1206" pos:column="26"/></operator> <name><name pos:line="1206" pos:column="24">sb<pos:position pos:line="1206" pos:column="26"/></name><operator pos:line="1206" pos:column="26">-&gt;<pos:position pos:line="1206" pos:column="31"/></operator><name pos:line="1206" pos:column="28">len<pos:position pos:line="1206" pos:column="31"/></name></name> <operator pos:line="1206" pos:column="32">&amp;&amp;<pos:position pos:line="1206" pos:column="42"/></operator>
	    <operator pos:line="1207" pos:column="13">!<pos:position pos:line="1207" pos:column="14"/></operator><call><name pos:line="1207" pos:column="14">strcmp<pos:position pos:line="1207" pos:column="20"/></name><argument_list pos:line="1207" pos:column="20">(<argument><expr><name><name pos:line="1207" pos:column="21">mine<pos:position pos:line="1207" pos:column="25"/></name><operator pos:line="1207" pos:column="25">.<pos:position pos:line="1207" pos:column="26"/></operator><name pos:line="1207" pos:column="26">buf<pos:position pos:line="1207" pos:column="29"/></name></name></expr></argument>, <argument><expr><name><name pos:line="1207" pos:column="31">sb<pos:position pos:line="1207" pos:column="33"/></name><operator pos:line="1207" pos:column="33">-&gt;<pos:position pos:line="1207" pos:column="38"/></operator><name pos:line="1207" pos:column="35">buf<pos:position pos:line="1207" pos:column="38"/></name></name> <operator pos:line="1207" pos:column="39">+<pos:position pos:line="1207" pos:column="40"/></operator> <name><name pos:line="1207" pos:column="41">sb<pos:position pos:line="1207" pos:column="43"/></name><operator pos:line="1207" pos:column="43">-&gt;<pos:position pos:line="1207" pos:column="48"/></operator><name pos:line="1207" pos:column="45">len<pos:position pos:line="1207" pos:column="48"/></name></name> <operator pos:line="1207" pos:column="49">-<pos:position pos:line="1207" pos:column="50"/></operator> <name><name pos:line="1207" pos:column="51">mine<pos:position pos:line="1207" pos:column="55"/></name><operator pos:line="1207" pos:column="55">.<pos:position pos:line="1207" pos:column="56"/></operator><name pos:line="1207" pos:column="56">len<pos:position pos:line="1207" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="1207" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="1207" pos:column="61"/></condition><then pos:line="1207" pos:column="61">
		<block type="pseudo"><goto pos:line="1208" pos:column="17">goto <name pos:line="1208" pos:column="22">exit<pos:position pos:line="1208" pos:column="26"/></name>;<pos:position pos:line="1208" pos:column="27"/></goto></block></then></if> <comment type="block" pos:line="1208" pos:column="28">/* no need to duplicate */</comment>

	<comment type="block" pos:line="1210" pos:column="9">/* Does it have any Signed-off-by: in the text */</comment>
	<for pos:line="1211" pos:column="9">for <control pos:line="1211" pos:column="13">(<init><expr><name pos:line="1211" pos:column="14">cp<pos:position pos:line="1211" pos:column="16"/></name> <operator pos:line="1211" pos:column="17">=<pos:position pos:line="1211" pos:column="18"/></operator> <name><name pos:line="1211" pos:column="19">sb<pos:position pos:line="1211" pos:column="21"/></name><operator pos:line="1211" pos:column="21">-&gt;<pos:position pos:line="1211" pos:column="26"/></operator><name pos:line="1211" pos:column="23">buf<pos:position pos:line="1211" pos:column="26"/></name></name></expr>;<pos:position pos:line="1211" pos:column="27"/></init>
	     <condition><expr><name pos:line="1212" pos:column="14">cp<pos:position pos:line="1212" pos:column="16"/></name> <operator pos:line="1212" pos:column="17">&amp;&amp;<pos:position pos:line="1212" pos:column="27"/></operator> <operator pos:line="1212" pos:column="20">*<pos:position pos:line="1212" pos:column="21"/></operator><name pos:line="1212" pos:column="21">cp<pos:position pos:line="1212" pos:column="23"/></name> <operator pos:line="1212" pos:column="24">&amp;&amp;<pos:position pos:line="1212" pos:column="34"/></operator> <operator pos:line="1212" pos:column="27">(<pos:position pos:line="1212" pos:column="28"/></operator><name pos:line="1212" pos:column="28">cp<pos:position pos:line="1212" pos:column="30"/></name> <operator pos:line="1212" pos:column="31">=<pos:position pos:line="1212" pos:column="32"/></operator> <call><name pos:line="1212" pos:column="33">strstr<pos:position pos:line="1212" pos:column="39"/></name><argument_list pos:line="1212" pos:column="39">(<argument><expr><name pos:line="1212" pos:column="40">cp<pos:position pos:line="1212" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1212" pos:column="44">sign_off_header<pos:position pos:line="1212" pos:column="59"/></name></expr></argument>)<pos:position pos:line="1212" pos:column="60"/></argument_list></call><operator pos:line="1212" pos:column="60">)<pos:position pos:line="1212" pos:column="61"/></operator> <operator pos:line="1212" pos:column="62">!=<pos:position pos:line="1212" pos:column="64"/></operator> <name pos:line="1212" pos:column="65">NULL<pos:position pos:line="1212" pos:column="69"/></name></expr>;<pos:position pos:line="1212" pos:column="70"/></condition>
	     <incr><expr><name pos:line="1213" pos:column="14">cp<pos:position pos:line="1213" pos:column="16"/></name> <operator pos:line="1213" pos:column="17">=<pos:position pos:line="1213" pos:column="18"/></operator> <call><name pos:line="1213" pos:column="19">strchr<pos:position pos:line="1213" pos:column="25"/></name><argument_list pos:line="1213" pos:column="25">(<argument><expr><name pos:line="1213" pos:column="26">cp<pos:position pos:line="1213" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="1213" pos:column="30">'\n'<pos:position pos:line="1213" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="1213" pos:column="35"/></argument_list></call></expr></incr>)<pos:position pos:line="1213" pos:column="36"/></control> <block pos:line="1213" pos:column="37">{
		<if pos:line="1214" pos:column="17">if <condition pos:line="1214" pos:column="20">(<expr><name><name pos:line="1214" pos:column="21">sb<pos:position pos:line="1214" pos:column="23"/></name><operator pos:line="1214" pos:column="23">-&gt;<pos:position pos:line="1214" pos:column="28"/></operator><name pos:line="1214" pos:column="25">buf<pos:position pos:line="1214" pos:column="28"/></name></name> <operator pos:line="1214" pos:column="29">==<pos:position pos:line="1214" pos:column="31"/></operator> <name pos:line="1214" pos:column="32">cp<pos:position pos:line="1214" pos:column="34"/></name> <operator pos:line="1214" pos:column="35">||<pos:position pos:line="1214" pos:column="37"/></operator> <name><name pos:line="1214" pos:column="38">cp<pos:position pos:line="1214" pos:column="40"/></name><index pos:line="1214" pos:column="40">[<expr><operator pos:line="1214" pos:column="41">-<pos:position pos:line="1214" pos:column="42"/></operator><literal type="number" pos:line="1214" pos:column="42">1<pos:position pos:line="1214" pos:column="43"/></literal></expr>]<pos:position pos:line="1214" pos:column="44"/></index></name> <operator pos:line="1214" pos:column="45">==<pos:position pos:line="1214" pos:column="47"/></operator> <literal type="char" pos:line="1214" pos:column="48">'\n'<pos:position pos:line="1214" pos:column="52"/></literal></expr>)<pos:position pos:line="1214" pos:column="53"/></condition><then pos:line="1214" pos:column="53">
			<block type="pseudo"><break pos:line="1215" pos:column="25">break;<pos:position pos:line="1215" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="1216" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="1218" pos:column="9">strbuf_addstr<pos:position pos:line="1218" pos:column="22"/></name><argument_list pos:line="1218" pos:column="22">(<argument><expr><name pos:line="1218" pos:column="23">sb<pos:position pos:line="1218" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="1218" pos:column="27">mine<pos:position pos:line="1218" pos:column="31"/></name><operator pos:line="1218" pos:column="31">.<pos:position pos:line="1218" pos:column="32"/></operator><name pos:line="1218" pos:column="32">buf<pos:position pos:line="1218" pos:column="35"/></name></name> <operator pos:line="1218" pos:column="36">+<pos:position pos:line="1218" pos:column="37"/></operator> <operator pos:line="1218" pos:column="38">!<pos:position pos:line="1218" pos:column="39"/></operator><operator pos:line="1218" pos:column="39">!<pos:position pos:line="1218" pos:column="40"/></operator><name pos:line="1218" pos:column="40">cp<pos:position pos:line="1218" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1218" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1218" pos:column="44"/></expr_stmt>
<label><name pos:line="1219" pos:column="1">exit<pos:position pos:line="1219" pos:column="5"/></name>:<pos:position pos:line="1219" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="1220" pos:column="9">strbuf_release<pos:position pos:line="1220" pos:column="23"/></name><argument_list pos:line="1220" pos:column="23">(<argument><expr><operator pos:line="1220" pos:column="24">&amp;<pos:position pos:line="1220" pos:column="29"/></operator><name pos:line="1220" pos:column="25">mine<pos:position pos:line="1220" pos:column="29"/></name></expr></argument>)<pos:position pos:line="1220" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="1220" pos:column="31"/></expr_stmt>
}<pos:position pos:line="1221" pos:column="2"/></block></function>

<comment type="block" pos:line="1223" pos:column="1">/**
 * Appends signoff to the "msg" field of the am_state.
 */</comment>
<function><specifier pos:line="1226" pos:column="1">static<pos:position pos:line="1226" pos:column="7"/></specifier> <type><name pos:line="1226" pos:column="8">void<pos:position pos:line="1226" pos:column="12"/></name></type> <name pos:line="1226" pos:column="13">am_append_signoff<pos:position pos:line="1226" pos:column="30"/></name><parameter_list pos:line="1226" pos:column="30">(<parameter><decl><type><name><name pos:line="1226" pos:column="31">struct<pos:position pos:line="1226" pos:column="37"/></name> <name pos:line="1226" pos:column="38">am_state<pos:position pos:line="1226" pos:column="46"/></name></name> <modifier pos:line="1226" pos:column="47">*<pos:position pos:line="1226" pos:column="48"/></modifier></type><name pos:line="1226" pos:column="48">state<pos:position pos:line="1226" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1226" pos:column="54"/></parameter_list>
<block pos:line="1227" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="1228" pos:column="9">struct<pos:position pos:line="1228" pos:column="15"/></name> <name pos:line="1228" pos:column="16">strbuf<pos:position pos:line="1228" pos:column="22"/></name></name></type> <name pos:line="1228" pos:column="23">sb<pos:position pos:line="1228" pos:column="25"/></name> <init pos:line="1228" pos:column="26">= <expr><name pos:line="1228" pos:column="28">STRBUF_INIT<pos:position pos:line="1228" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="1228" pos:column="40"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="1230" pos:column="9">strbuf_attach<pos:position pos:line="1230" pos:column="22"/></name><argument_list pos:line="1230" pos:column="22">(<argument><expr><operator pos:line="1230" pos:column="23">&amp;<pos:position pos:line="1230" pos:column="28"/></operator><name pos:line="1230" pos:column="24">sb<pos:position pos:line="1230" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="1230" pos:column="28">state<pos:position pos:line="1230" pos:column="33"/></name><operator pos:line="1230" pos:column="33">-&gt;<pos:position pos:line="1230" pos:column="38"/></operator><name pos:line="1230" pos:column="35">msg<pos:position pos:line="1230" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="1230" pos:column="40">state<pos:position pos:line="1230" pos:column="45"/></name><operator pos:line="1230" pos:column="45">-&gt;<pos:position pos:line="1230" pos:column="50"/></operator><name pos:line="1230" pos:column="47">msg_len<pos:position pos:line="1230" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="1230" pos:column="56">state<pos:position pos:line="1230" pos:column="61"/></name><operator pos:line="1230" pos:column="61">-&gt;<pos:position pos:line="1230" pos:column="66"/></operator><name pos:line="1230" pos:column="63">msg_len<pos:position pos:line="1230" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="1230" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="1230" pos:column="72"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1231" pos:column="9">am_signoff<pos:position pos:line="1231" pos:column="19"/></name><argument_list pos:line="1231" pos:column="19">(<argument><expr><operator pos:line="1231" pos:column="20">&amp;<pos:position pos:line="1231" pos:column="25"/></operator><name pos:line="1231" pos:column="21">sb<pos:position pos:line="1231" pos:column="23"/></name></expr></argument>)<pos:position pos:line="1231" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="1231" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1232" pos:column="9">state<pos:position pos:line="1232" pos:column="14"/></name><operator pos:line="1232" pos:column="14">-&gt;<pos:position pos:line="1232" pos:column="19"/></operator><name pos:line="1232" pos:column="16">msg<pos:position pos:line="1232" pos:column="19"/></name></name> <operator pos:line="1232" pos:column="20">=<pos:position pos:line="1232" pos:column="21"/></operator> <call><name pos:line="1232" pos:column="22">strbuf_detach<pos:position pos:line="1232" pos:column="35"/></name><argument_list pos:line="1232" pos:column="35">(<argument><expr><operator pos:line="1232" pos:column="36">&amp;<pos:position pos:line="1232" pos:column="41"/></operator><name pos:line="1232" pos:column="37">sb<pos:position pos:line="1232" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="1232" pos:column="41">&amp;<pos:position pos:line="1232" pos:column="46"/></operator><name><name pos:line="1232" pos:column="42">state<pos:position pos:line="1232" pos:column="47"/></name><operator pos:line="1232" pos:column="47">-&gt;<pos:position pos:line="1232" pos:column="52"/></operator><name pos:line="1232" pos:column="49">msg_len<pos:position pos:line="1232" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="1232" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1232" pos:column="58"/></expr_stmt>
}<pos:position pos:line="1233" pos:column="2"/></block></function>

<comment type="block" pos:line="1235" pos:column="1">/**
 * Parses `mail` using git-mailinfo, extracting its patch and authorship info.
 * state-&gt;msg will be set to the patch message. state-&gt;author_name,
 * state-&gt;author_email and state-&gt;author_date will be set to the patch author's
 * name, email and date respectively. The patch body will be written to the
 * state directory's "patch" file.
 *
 * Returns 1 if the patch should be skipped, 0 otherwise.
 */</comment>
<function><specifier pos:line="1244" pos:column="1">static<pos:position pos:line="1244" pos:column="7"/></specifier> <type><name pos:line="1244" pos:column="8">int<pos:position pos:line="1244" pos:column="11"/></name></type> <name pos:line="1244" pos:column="12">parse_mail<pos:position pos:line="1244" pos:column="22"/></name><parameter_list pos:line="1244" pos:column="22">(<parameter><decl><type><name><name pos:line="1244" pos:column="23">struct<pos:position pos:line="1244" pos:column="29"/></name> <name pos:line="1244" pos:column="30">am_state<pos:position pos:line="1244" pos:column="38"/></name></name> <modifier pos:line="1244" pos:column="39">*<pos:position pos:line="1244" pos:column="40"/></modifier></type><name pos:line="1244" pos:column="40">state<pos:position pos:line="1244" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1244" pos:column="47">const<pos:position pos:line="1244" pos:column="52"/></specifier> <name pos:line="1244" pos:column="53">char<pos:position pos:line="1244" pos:column="57"/></name> <modifier pos:line="1244" pos:column="58">*<pos:position pos:line="1244" pos:column="59"/></modifier></type><name pos:line="1244" pos:column="59">mail<pos:position pos:line="1244" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1244" pos:column="64"/></parameter_list>
<block pos:line="1245" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1246" pos:column="9">FILE<pos:position pos:line="1246" pos:column="13"/></name> <modifier pos:line="1246" pos:column="14">*<pos:position pos:line="1246" pos:column="15"/></modifier></type><name pos:line="1246" pos:column="15">fp<pos:position pos:line="1246" pos:column="17"/></name></decl>;<pos:position pos:line="1246" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1247" pos:column="9">struct<pos:position pos:line="1247" pos:column="15"/></name> <name pos:line="1247" pos:column="16">strbuf<pos:position pos:line="1247" pos:column="22"/></name></name></type> <name pos:line="1247" pos:column="23">sb<pos:position pos:line="1247" pos:column="25"/></name> <init pos:line="1247" pos:column="26">= <expr><name pos:line="1247" pos:column="28">STRBUF_INIT<pos:position pos:line="1247" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="1247" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1248" pos:column="9">struct<pos:position pos:line="1248" pos:column="15"/></name> <name pos:line="1248" pos:column="16">strbuf<pos:position pos:line="1248" pos:column="22"/></name></name></type> <name pos:line="1248" pos:column="23">msg<pos:position pos:line="1248" pos:column="26"/></name> <init pos:line="1248" pos:column="27">= <expr><name pos:line="1248" pos:column="29">STRBUF_INIT<pos:position pos:line="1248" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="1248" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1249" pos:column="9">struct<pos:position pos:line="1249" pos:column="15"/></name> <name pos:line="1249" pos:column="16">strbuf<pos:position pos:line="1249" pos:column="22"/></name></name></type> <name pos:line="1249" pos:column="23">author_name<pos:position pos:line="1249" pos:column="34"/></name> <init pos:line="1249" pos:column="35">= <expr><name pos:line="1249" pos:column="37">STRBUF_INIT<pos:position pos:line="1249" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="1249" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1250" pos:column="9">struct<pos:position pos:line="1250" pos:column="15"/></name> <name pos:line="1250" pos:column="16">strbuf<pos:position pos:line="1250" pos:column="22"/></name></name></type> <name pos:line="1250" pos:column="23">author_date<pos:position pos:line="1250" pos:column="34"/></name> <init pos:line="1250" pos:column="35">= <expr><name pos:line="1250" pos:column="37">STRBUF_INIT<pos:position pos:line="1250" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="1250" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1251" pos:column="9">struct<pos:position pos:line="1251" pos:column="15"/></name> <name pos:line="1251" pos:column="16">strbuf<pos:position pos:line="1251" pos:column="22"/></name></name></type> <name pos:line="1251" pos:column="23">author_email<pos:position pos:line="1251" pos:column="35"/></name> <init pos:line="1251" pos:column="36">= <expr><name pos:line="1251" pos:column="38">STRBUF_INIT<pos:position pos:line="1251" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="1251" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="1252" pos:column="9">int<pos:position pos:line="1252" pos:column="12"/></name></type> <name pos:line="1252" pos:column="13">ret<pos:position pos:line="1252" pos:column="16"/></name> <init pos:line="1252" pos:column="17">= <expr><literal type="number" pos:line="1252" pos:column="19">0<pos:position pos:line="1252" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="1252" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1253" pos:column="9">struct<pos:position pos:line="1253" pos:column="15"/></name> <name pos:line="1253" pos:column="16">mailinfo<pos:position pos:line="1253" pos:column="24"/></name></name></type> <name pos:line="1253" pos:column="25">mi<pos:position pos:line="1253" pos:column="27"/></name></decl>;<pos:position pos:line="1253" pos:column="28"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="1255" pos:column="9">setup_mailinfo<pos:position pos:line="1255" pos:column="23"/></name><argument_list pos:line="1255" pos:column="23">(<argument><expr><operator pos:line="1255" pos:column="24">&amp;<pos:position pos:line="1255" pos:column="29"/></operator><name pos:line="1255" pos:column="25">mi<pos:position pos:line="1255" pos:column="27"/></name></expr></argument>)<pos:position pos:line="1255" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1255" pos:column="29"/></expr_stmt>

	<if pos:line="1257" pos:column="9">if <condition pos:line="1257" pos:column="12">(<expr><name><name pos:line="1257" pos:column="13">state<pos:position pos:line="1257" pos:column="18"/></name><operator pos:line="1257" pos:column="18">-&gt;<pos:position pos:line="1257" pos:column="23"/></operator><name pos:line="1257" pos:column="20">utf8<pos:position pos:line="1257" pos:column="24"/></name></name></expr>)<pos:position pos:line="1257" pos:column="25"/></condition><then pos:line="1257" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="1258" pos:column="17">mi<pos:position pos:line="1258" pos:column="19"/></name><operator pos:line="1258" pos:column="19">.<pos:position pos:line="1258" pos:column="20"/></operator><name pos:line="1258" pos:column="20">metainfo_charset<pos:position pos:line="1258" pos:column="36"/></name></name> <operator pos:line="1258" pos:column="37">=<pos:position pos:line="1258" pos:column="38"/></operator> <call><name pos:line="1258" pos:column="39">get_commit_output_encoding<pos:position pos:line="1258" pos:column="65"/></name><argument_list pos:line="1258" pos:column="65">()<pos:position pos:line="1258" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="1258" pos:column="68"/></expr_stmt></block></then>
	<else pos:line="1259" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="1260" pos:column="17">mi<pos:position pos:line="1260" pos:column="19"/></name><operator pos:line="1260" pos:column="19">.<pos:position pos:line="1260" pos:column="20"/></operator><name pos:line="1260" pos:column="20">metainfo_charset<pos:position pos:line="1260" pos:column="36"/></name></name> <operator pos:line="1260" pos:column="37">=<pos:position pos:line="1260" pos:column="38"/></operator> <name pos:line="1260" pos:column="39">NULL<pos:position pos:line="1260" pos:column="43"/></name></expr>;<pos:position pos:line="1260" pos:column="44"/></expr_stmt></block></else></if>

	<switch pos:line="1262" pos:column="9">switch <condition pos:line="1262" pos:column="16">(<expr><name><name pos:line="1262" pos:column="17">state<pos:position pos:line="1262" pos:column="22"/></name><operator pos:line="1262" pos:column="22">-&gt;<pos:position pos:line="1262" pos:column="27"/></operator><name pos:line="1262" pos:column="24">keep<pos:position pos:line="1262" pos:column="28"/></name></name></expr>)<pos:position pos:line="1262" pos:column="29"/></condition> <block pos:line="1262" pos:column="30">{
	<case pos:line="1263" pos:column="9">case <expr><name pos:line="1263" pos:column="14">KEEP_FALSE<pos:position pos:line="1263" pos:column="24"/></name></expr>:<pos:position pos:line="1263" pos:column="25"/></case>
		<break pos:line="1264" pos:column="17">break;<pos:position pos:line="1264" pos:column="23"/></break>
	<case pos:line="1265" pos:column="9">case <expr><name pos:line="1265" pos:column="14">KEEP_TRUE<pos:position pos:line="1265" pos:column="23"/></name></expr>:<pos:position pos:line="1265" pos:column="24"/></case>
		<expr_stmt><expr><name><name pos:line="1266" pos:column="17">mi<pos:position pos:line="1266" pos:column="19"/></name><operator pos:line="1266" pos:column="19">.<pos:position pos:line="1266" pos:column="20"/></operator><name pos:line="1266" pos:column="20">keep_subject<pos:position pos:line="1266" pos:column="32"/></name></name> <operator pos:line="1266" pos:column="33">=<pos:position pos:line="1266" pos:column="34"/></operator> <literal type="number" pos:line="1266" pos:column="35">1<pos:position pos:line="1266" pos:column="36"/></literal></expr>;<pos:position pos:line="1266" pos:column="37"/></expr_stmt>
		<break pos:line="1267" pos:column="17">break;<pos:position pos:line="1267" pos:column="23"/></break>
	<case pos:line="1268" pos:column="9">case <expr><name pos:line="1268" pos:column="14">KEEP_NON_PATCH<pos:position pos:line="1268" pos:column="28"/></name></expr>:<pos:position pos:line="1268" pos:column="29"/></case>
		<expr_stmt><expr><name><name pos:line="1269" pos:column="17">mi<pos:position pos:line="1269" pos:column="19"/></name><operator pos:line="1269" pos:column="19">.<pos:position pos:line="1269" pos:column="20"/></operator><name pos:line="1269" pos:column="20">keep_non_patch_brackets_in_subject<pos:position pos:line="1269" pos:column="54"/></name></name> <operator pos:line="1269" pos:column="55">=<pos:position pos:line="1269" pos:column="56"/></operator> <literal type="number" pos:line="1269" pos:column="57">1<pos:position pos:line="1269" pos:column="58"/></literal></expr>;<pos:position pos:line="1269" pos:column="59"/></expr_stmt>
		<break pos:line="1270" pos:column="17">break;<pos:position pos:line="1270" pos:column="23"/></break>
	<default pos:line="1271" pos:column="9">default:<pos:position pos:line="1271" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="1272" pos:column="17">die<pos:position pos:line="1272" pos:column="20"/></name><argument_list pos:line="1272" pos:column="20">(<argument><expr><literal type="string" pos:line="1272" pos:column="21">"BUG: invalid value for state-&gt;keep"<pos:position pos:line="1272" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="1272" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1272" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="1273" pos:column="10"/></block></switch>

	<if pos:line="1275" pos:column="9">if <condition pos:line="1275" pos:column="12">(<expr><name><name pos:line="1275" pos:column="13">state<pos:position pos:line="1275" pos:column="18"/></name><operator pos:line="1275" pos:column="18">-&gt;<pos:position pos:line="1275" pos:column="23"/></operator><name pos:line="1275" pos:column="20">message_id<pos:position pos:line="1275" pos:column="30"/></name></name></expr>)<pos:position pos:line="1275" pos:column="31"/></condition><then pos:line="1275" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="1276" pos:column="17">mi<pos:position pos:line="1276" pos:column="19"/></name><operator pos:line="1276" pos:column="19">.<pos:position pos:line="1276" pos:column="20"/></operator><name pos:line="1276" pos:column="20">add_message_id<pos:position pos:line="1276" pos:column="34"/></name></name> <operator pos:line="1276" pos:column="35">=<pos:position pos:line="1276" pos:column="36"/></operator> <literal type="number" pos:line="1276" pos:column="37">1<pos:position pos:line="1276" pos:column="38"/></literal></expr>;<pos:position pos:line="1276" pos:column="39"/></expr_stmt></block></then></if>

	<switch pos:line="1278" pos:column="9">switch <condition pos:line="1278" pos:column="16">(<expr><name><name pos:line="1278" pos:column="17">state<pos:position pos:line="1278" pos:column="22"/></name><operator pos:line="1278" pos:column="22">-&gt;<pos:position pos:line="1278" pos:column="27"/></operator><name pos:line="1278" pos:column="24">scissors<pos:position pos:line="1278" pos:column="32"/></name></name></expr>)<pos:position pos:line="1278" pos:column="33"/></condition> <block pos:line="1278" pos:column="34">{
	<case pos:line="1279" pos:column="9">case <expr><name pos:line="1279" pos:column="14">SCISSORS_UNSET<pos:position pos:line="1279" pos:column="28"/></name></expr>:<pos:position pos:line="1279" pos:column="29"/></case>
		<break pos:line="1280" pos:column="17">break;<pos:position pos:line="1280" pos:column="23"/></break>
	<case pos:line="1281" pos:column="9">case <expr><name pos:line="1281" pos:column="14">SCISSORS_FALSE<pos:position pos:line="1281" pos:column="28"/></name></expr>:<pos:position pos:line="1281" pos:column="29"/></case>
		<expr_stmt><expr><name><name pos:line="1282" pos:column="17">mi<pos:position pos:line="1282" pos:column="19"/></name><operator pos:line="1282" pos:column="19">.<pos:position pos:line="1282" pos:column="20"/></operator><name pos:line="1282" pos:column="20">use_scissors<pos:position pos:line="1282" pos:column="32"/></name></name> <operator pos:line="1282" pos:column="33">=<pos:position pos:line="1282" pos:column="34"/></operator> <literal type="number" pos:line="1282" pos:column="35">0<pos:position pos:line="1282" pos:column="36"/></literal></expr>;<pos:position pos:line="1282" pos:column="37"/></expr_stmt>
		<break pos:line="1283" pos:column="17">break;<pos:position pos:line="1283" pos:column="23"/></break>
	<case pos:line="1284" pos:column="9">case <expr><name pos:line="1284" pos:column="14">SCISSORS_TRUE<pos:position pos:line="1284" pos:column="27"/></name></expr>:<pos:position pos:line="1284" pos:column="28"/></case>
		<expr_stmt><expr><name><name pos:line="1285" pos:column="17">mi<pos:position pos:line="1285" pos:column="19"/></name><operator pos:line="1285" pos:column="19">.<pos:position pos:line="1285" pos:column="20"/></operator><name pos:line="1285" pos:column="20">use_scissors<pos:position pos:line="1285" pos:column="32"/></name></name> <operator pos:line="1285" pos:column="33">=<pos:position pos:line="1285" pos:column="34"/></operator> <literal type="number" pos:line="1285" pos:column="35">1<pos:position pos:line="1285" pos:column="36"/></literal></expr>;<pos:position pos:line="1285" pos:column="37"/></expr_stmt>
		<break pos:line="1286" pos:column="17">break;<pos:position pos:line="1286" pos:column="23"/></break>
	<default pos:line="1287" pos:column="9">default:<pos:position pos:line="1287" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="1288" pos:column="17">die<pos:position pos:line="1288" pos:column="20"/></name><argument_list pos:line="1288" pos:column="20">(<argument><expr><literal type="string" pos:line="1288" pos:column="21">"BUG: invalid value for state-&gt;scissors"<pos:position pos:line="1288" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="1288" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="1288" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="1289" pos:column="10"/></block></switch>

	<expr_stmt><expr><name><name pos:line="1291" pos:column="9">mi<pos:position pos:line="1291" pos:column="11"/></name><operator pos:line="1291" pos:column="11">.<pos:position pos:line="1291" pos:column="12"/></operator><name pos:line="1291" pos:column="12">input<pos:position pos:line="1291" pos:column="17"/></name></name> <operator pos:line="1291" pos:column="18">=<pos:position pos:line="1291" pos:column="19"/></operator> <call><name pos:line="1291" pos:column="20">fopen<pos:position pos:line="1291" pos:column="25"/></name><argument_list pos:line="1291" pos:column="25">(<argument><expr><name pos:line="1291" pos:column="26">mail<pos:position pos:line="1291" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1291" pos:column="32">"r"<pos:position pos:line="1291" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="1291" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1291" pos:column="37"/></expr_stmt>
	<if pos:line="1292" pos:column="9">if <condition pos:line="1292" pos:column="12">(<expr><operator pos:line="1292" pos:column="13">!<pos:position pos:line="1292" pos:column="14"/></operator><name><name pos:line="1292" pos:column="14">mi<pos:position pos:line="1292" pos:column="16"/></name><operator pos:line="1292" pos:column="16">.<pos:position pos:line="1292" pos:column="17"/></operator><name pos:line="1292" pos:column="17">input<pos:position pos:line="1292" pos:column="22"/></name></name></expr>)<pos:position pos:line="1292" pos:column="23"/></condition><then pos:line="1292" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1293" pos:column="17">die<pos:position pos:line="1293" pos:column="20"/></name><argument_list pos:line="1293" pos:column="20">(<argument><expr><literal type="string" pos:line="1293" pos:column="21">"could not open input"<pos:position pos:line="1293" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="1293" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="1293" pos:column="45"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="1294" pos:column="9">mi<pos:position pos:line="1294" pos:column="11"/></name><operator pos:line="1294" pos:column="11">.<pos:position pos:line="1294" pos:column="12"/></operator><name pos:line="1294" pos:column="12">output<pos:position pos:line="1294" pos:column="18"/></name></name> <operator pos:line="1294" pos:column="19">=<pos:position pos:line="1294" pos:column="20"/></operator> <call><name pos:line="1294" pos:column="21">fopen<pos:position pos:line="1294" pos:column="26"/></name><argument_list pos:line="1294" pos:column="26">(<argument><expr><call><name pos:line="1294" pos:column="27">am_path<pos:position pos:line="1294" pos:column="34"/></name><argument_list pos:line="1294" pos:column="34">(<argument><expr><name pos:line="1294" pos:column="35">state<pos:position pos:line="1294" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1294" pos:column="42">"info"<pos:position pos:line="1294" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="1294" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="1294" pos:column="51">"w"<pos:position pos:line="1294" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="1294" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1294" pos:column="56"/></expr_stmt>
	<if pos:line="1295" pos:column="9">if <condition pos:line="1295" pos:column="12">(<expr><operator pos:line="1295" pos:column="13">!<pos:position pos:line="1295" pos:column="14"/></operator><name><name pos:line="1295" pos:column="14">mi<pos:position pos:line="1295" pos:column="16"/></name><operator pos:line="1295" pos:column="16">.<pos:position pos:line="1295" pos:column="17"/></operator><name pos:line="1295" pos:column="17">output<pos:position pos:line="1295" pos:column="23"/></name></name></expr>)<pos:position pos:line="1295" pos:column="24"/></condition><then pos:line="1295" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1296" pos:column="17">die<pos:position pos:line="1296" pos:column="20"/></name><argument_list pos:line="1296" pos:column="20">(<argument><expr><literal type="string" pos:line="1296" pos:column="21">"could not open output 'info'"<pos:position pos:line="1296" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="1296" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="1296" pos:column="53"/></expr_stmt></block></then></if>
	<if pos:line="1297" pos:column="9">if <condition pos:line="1297" pos:column="12">(<expr><call><name pos:line="1297" pos:column="13">mailinfo<pos:position pos:line="1297" pos:column="21"/></name><argument_list pos:line="1297" pos:column="21">(<argument><expr><operator pos:line="1297" pos:column="22">&amp;<pos:position pos:line="1297" pos:column="27"/></operator><name pos:line="1297" pos:column="23">mi<pos:position pos:line="1297" pos:column="25"/></name></expr></argument>, <argument><expr><call><name pos:line="1297" pos:column="27">am_path<pos:position pos:line="1297" pos:column="34"/></name><argument_list pos:line="1297" pos:column="34">(<argument><expr><name pos:line="1297" pos:column="35">state<pos:position pos:line="1297" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1297" pos:column="42">"msg"<pos:position pos:line="1297" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="1297" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="1297" pos:column="50">am_path<pos:position pos:line="1297" pos:column="57"/></name><argument_list pos:line="1297" pos:column="57">(<argument><expr><name pos:line="1297" pos:column="58">state<pos:position pos:line="1297" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1297" pos:column="65">"patch"<pos:position pos:line="1297" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="1297" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="1297" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="1297" pos:column="75"/></condition><then pos:line="1297" pos:column="75">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1298" pos:column="17">die<pos:position pos:line="1298" pos:column="20"/></name><argument_list pos:line="1298" pos:column="20">(<argument><expr><literal type="string" pos:line="1298" pos:column="21">"could not parse patch"<pos:position pos:line="1298" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="1298" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1298" pos:column="46"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="1300" pos:column="9">fclose<pos:position pos:line="1300" pos:column="15"/></name><argument_list pos:line="1300" pos:column="15">(<argument><expr><name><name pos:line="1300" pos:column="16">mi<pos:position pos:line="1300" pos:column="18"/></name><operator pos:line="1300" pos:column="18">.<pos:position pos:line="1300" pos:column="19"/></operator><name pos:line="1300" pos:column="19">input<pos:position pos:line="1300" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="1300" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1300" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1301" pos:column="9">fclose<pos:position pos:line="1301" pos:column="15"/></name><argument_list pos:line="1301" pos:column="15">(<argument><expr><name><name pos:line="1301" pos:column="16">mi<pos:position pos:line="1301" pos:column="18"/></name><operator pos:line="1301" pos:column="18">.<pos:position pos:line="1301" pos:column="19"/></operator><name pos:line="1301" pos:column="19">output<pos:position pos:line="1301" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="1301" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="1301" pos:column="27"/></expr_stmt>

	<comment type="block" pos:line="1303" pos:column="9">/* Extract message and author information */</comment>
	<expr_stmt><expr><name pos:line="1304" pos:column="9">fp<pos:position pos:line="1304" pos:column="11"/></name> <operator pos:line="1304" pos:column="12">=<pos:position pos:line="1304" pos:column="13"/></operator> <call><name pos:line="1304" pos:column="14">xfopen<pos:position pos:line="1304" pos:column="20"/></name><argument_list pos:line="1304" pos:column="20">(<argument><expr><call><name pos:line="1304" pos:column="21">am_path<pos:position pos:line="1304" pos:column="28"/></name><argument_list pos:line="1304" pos:column="28">(<argument><expr><name pos:line="1304" pos:column="29">state<pos:position pos:line="1304" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1304" pos:column="36">"info"<pos:position pos:line="1304" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="1304" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="1304" pos:column="45">"r"<pos:position pos:line="1304" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="1304" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="1304" pos:column="50"/></expr_stmt>
	<while pos:line="1305" pos:column="9">while <condition pos:line="1305" pos:column="15">(<expr><operator pos:line="1305" pos:column="16">!<pos:position pos:line="1305" pos:column="17"/></operator><call><name pos:line="1305" pos:column="17">strbuf_getline_lf<pos:position pos:line="1305" pos:column="34"/></name><argument_list pos:line="1305" pos:column="34">(<argument><expr><operator pos:line="1305" pos:column="35">&amp;<pos:position pos:line="1305" pos:column="40"/></operator><name pos:line="1305" pos:column="36">sb<pos:position pos:line="1305" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="1305" pos:column="40">fp<pos:position pos:line="1305" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1305" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="1305" pos:column="44"/></condition> <block pos:line="1305" pos:column="45">{
		<decl_stmt><decl><type><specifier pos:line="1306" pos:column="17">const<pos:position pos:line="1306" pos:column="22"/></specifier> <name pos:line="1306" pos:column="23">char<pos:position pos:line="1306" pos:column="27"/></name> <modifier pos:line="1306" pos:column="28">*<pos:position pos:line="1306" pos:column="29"/></modifier></type><name pos:line="1306" pos:column="29">x<pos:position pos:line="1306" pos:column="30"/></name></decl>;<pos:position pos:line="1306" pos:column="31"/></decl_stmt>

		<if pos:line="1308" pos:column="17">if <condition pos:line="1308" pos:column="20">(<expr><call><name pos:line="1308" pos:column="21">skip_prefix<pos:position pos:line="1308" pos:column="32"/></name><argument_list pos:line="1308" pos:column="32">(<argument><expr><name><name pos:line="1308" pos:column="33">sb<pos:position pos:line="1308" pos:column="35"/></name><operator pos:line="1308" pos:column="35">.<pos:position pos:line="1308" pos:column="36"/></operator><name pos:line="1308" pos:column="36">buf<pos:position pos:line="1308" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1308" pos:column="41">"Subject: "<pos:position pos:line="1308" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="1308" pos:column="54">&amp;<pos:position pos:line="1308" pos:column="59"/></operator><name pos:line="1308" pos:column="55">x<pos:position pos:line="1308" pos:column="56"/></name></expr></argument>)<pos:position pos:line="1308" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="1308" pos:column="58"/></condition><then pos:line="1308" pos:column="58"> <block pos:line="1308" pos:column="59">{
			<if pos:line="1309" pos:column="25">if <condition pos:line="1309" pos:column="28">(<expr><name><name pos:line="1309" pos:column="29">msg<pos:position pos:line="1309" pos:column="32"/></name><operator pos:line="1309" pos:column="32">.<pos:position pos:line="1309" pos:column="33"/></operator><name pos:line="1309" pos:column="33">len<pos:position pos:line="1309" pos:column="36"/></name></name></expr>)<pos:position pos:line="1309" pos:column="37"/></condition><then pos:line="1309" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="1310" pos:column="33">strbuf_addch<pos:position pos:line="1310" pos:column="45"/></name><argument_list pos:line="1310" pos:column="45">(<argument><expr><operator pos:line="1310" pos:column="46">&amp;<pos:position pos:line="1310" pos:column="51"/></operator><name pos:line="1310" pos:column="47">msg<pos:position pos:line="1310" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="1310" pos:column="52">'\n'<pos:position pos:line="1310" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="1310" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1310" pos:column="58"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="1311" pos:column="25">strbuf_addstr<pos:position pos:line="1311" pos:column="38"/></name><argument_list pos:line="1311" pos:column="38">(<argument><expr><operator pos:line="1311" pos:column="39">&amp;<pos:position pos:line="1311" pos:column="44"/></operator><name pos:line="1311" pos:column="40">msg<pos:position pos:line="1311" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="1311" pos:column="45">x<pos:position pos:line="1311" pos:column="46"/></name></expr></argument>)<pos:position pos:line="1311" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="1311" pos:column="48"/></expr_stmt>
		}<pos:position pos:line="1312" pos:column="18"/></block></then> <elseif pos:line="1312" pos:column="19">else <if pos:line="1312" pos:column="24">if <condition pos:line="1312" pos:column="27">(<expr><call><name pos:line="1312" pos:column="28">skip_prefix<pos:position pos:line="1312" pos:column="39"/></name><argument_list pos:line="1312" pos:column="39">(<argument><expr><name><name pos:line="1312" pos:column="40">sb<pos:position pos:line="1312" pos:column="42"/></name><operator pos:line="1312" pos:column="42">.<pos:position pos:line="1312" pos:column="43"/></operator><name pos:line="1312" pos:column="43">buf<pos:position pos:line="1312" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1312" pos:column="48">"Author: "<pos:position pos:line="1312" pos:column="58"/></literal></expr></argument>, <argument><expr><operator pos:line="1312" pos:column="60">&amp;<pos:position pos:line="1312" pos:column="65"/></operator><name pos:line="1312" pos:column="61">x<pos:position pos:line="1312" pos:column="62"/></name></expr></argument>)<pos:position pos:line="1312" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="1312" pos:column="64"/></condition><then pos:line="1312" pos:column="64">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="1313" pos:column="25">strbuf_addstr<pos:position pos:line="1313" pos:column="38"/></name><argument_list pos:line="1313" pos:column="38">(<argument><expr><operator pos:line="1313" pos:column="39">&amp;<pos:position pos:line="1313" pos:column="44"/></operator><name pos:line="1313" pos:column="40">author_name<pos:position pos:line="1313" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="1313" pos:column="53">x<pos:position pos:line="1313" pos:column="54"/></name></expr></argument>)<pos:position pos:line="1313" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1313" pos:column="56"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="1314" pos:column="17">else <if pos:line="1314" pos:column="22">if <condition pos:line="1314" pos:column="25">(<expr><call><name pos:line="1314" pos:column="26">skip_prefix<pos:position pos:line="1314" pos:column="37"/></name><argument_list pos:line="1314" pos:column="37">(<argument><expr><name><name pos:line="1314" pos:column="38">sb<pos:position pos:line="1314" pos:column="40"/></name><operator pos:line="1314" pos:column="40">.<pos:position pos:line="1314" pos:column="41"/></operator><name pos:line="1314" pos:column="41">buf<pos:position pos:line="1314" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1314" pos:column="46">"Email: "<pos:position pos:line="1314" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="1314" pos:column="57">&amp;<pos:position pos:line="1314" pos:column="62"/></operator><name pos:line="1314" pos:column="58">x<pos:position pos:line="1314" pos:column="59"/></name></expr></argument>)<pos:position pos:line="1314" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="1314" pos:column="61"/></condition><then pos:line="1314" pos:column="61">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="1315" pos:column="25">strbuf_addstr<pos:position pos:line="1315" pos:column="38"/></name><argument_list pos:line="1315" pos:column="38">(<argument><expr><operator pos:line="1315" pos:column="39">&amp;<pos:position pos:line="1315" pos:column="44"/></operator><name pos:line="1315" pos:column="40">author_email<pos:position pos:line="1315" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="1315" pos:column="54">x<pos:position pos:line="1315" pos:column="55"/></name></expr></argument>)<pos:position pos:line="1315" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1315" pos:column="57"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="1316" pos:column="17">else <if pos:line="1316" pos:column="22">if <condition pos:line="1316" pos:column="25">(<expr><call><name pos:line="1316" pos:column="26">skip_prefix<pos:position pos:line="1316" pos:column="37"/></name><argument_list pos:line="1316" pos:column="37">(<argument><expr><name><name pos:line="1316" pos:column="38">sb<pos:position pos:line="1316" pos:column="40"/></name><operator pos:line="1316" pos:column="40">.<pos:position pos:line="1316" pos:column="41"/></operator><name pos:line="1316" pos:column="41">buf<pos:position pos:line="1316" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1316" pos:column="46">"Date: "<pos:position pos:line="1316" pos:column="54"/></literal></expr></argument>, <argument><expr><operator pos:line="1316" pos:column="56">&amp;<pos:position pos:line="1316" pos:column="61"/></operator><name pos:line="1316" pos:column="57">x<pos:position pos:line="1316" pos:column="58"/></name></expr></argument>)<pos:position pos:line="1316" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="1316" pos:column="60"/></condition><then pos:line="1316" pos:column="60">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="1317" pos:column="25">strbuf_addstr<pos:position pos:line="1317" pos:column="38"/></name><argument_list pos:line="1317" pos:column="38">(<argument><expr><operator pos:line="1317" pos:column="39">&amp;<pos:position pos:line="1317" pos:column="44"/></operator><name pos:line="1317" pos:column="40">author_date<pos:position pos:line="1317" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="1317" pos:column="53">x<pos:position pos:line="1317" pos:column="54"/></name></expr></argument>)<pos:position pos:line="1317" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1317" pos:column="56"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="1318" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="1319" pos:column="9">fclose<pos:position pos:line="1319" pos:column="15"/></name><argument_list pos:line="1319" pos:column="15">(<argument><expr><name pos:line="1319" pos:column="16">fp<pos:position pos:line="1319" pos:column="18"/></name></expr></argument>)<pos:position pos:line="1319" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="1319" pos:column="20"/></expr_stmt>

	<comment type="block" pos:line="1321" pos:column="9">/* Skip pine's internal folder data */</comment>
	<if pos:line="1322" pos:column="9">if <condition pos:line="1322" pos:column="12">(<expr><operator pos:line="1322" pos:column="13">!<pos:position pos:line="1322" pos:column="14"/></operator><call><name pos:line="1322" pos:column="14">strcmp<pos:position pos:line="1322" pos:column="20"/></name><argument_list pos:line="1322" pos:column="20">(<argument><expr><name><name pos:line="1322" pos:column="21">author_name<pos:position pos:line="1322" pos:column="32"/></name><operator pos:line="1322" pos:column="32">.<pos:position pos:line="1322" pos:column="33"/></operator><name pos:line="1322" pos:column="33">buf<pos:position pos:line="1322" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1322" pos:column="38">"Mail System Internal Data"<pos:position pos:line="1322" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="1322" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="1322" pos:column="67"/></condition><then pos:line="1322" pos:column="67"> <block pos:line="1322" pos:column="68">{
		<expr_stmt><expr><name pos:line="1323" pos:column="17">ret<pos:position pos:line="1323" pos:column="20"/></name> <operator pos:line="1323" pos:column="21">=<pos:position pos:line="1323" pos:column="22"/></operator> <literal type="number" pos:line="1323" pos:column="23">1<pos:position pos:line="1323" pos:column="24"/></literal></expr>;<pos:position pos:line="1323" pos:column="25"/></expr_stmt>
		<goto pos:line="1324" pos:column="17">goto <name pos:line="1324" pos:column="22">finish<pos:position pos:line="1324" pos:column="28"/></name>;<pos:position pos:line="1324" pos:column="29"/></goto>
	}<pos:position pos:line="1325" pos:column="10"/></block></then></if>

	<if pos:line="1327" pos:column="9">if <condition pos:line="1327" pos:column="12">(<expr><call><name pos:line="1327" pos:column="13">is_empty_file<pos:position pos:line="1327" pos:column="26"/></name><argument_list pos:line="1327" pos:column="26">(<argument><expr><call><name pos:line="1327" pos:column="27">am_path<pos:position pos:line="1327" pos:column="34"/></name><argument_list pos:line="1327" pos:column="34">(<argument><expr><name pos:line="1327" pos:column="35">state<pos:position pos:line="1327" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1327" pos:column="42">"patch"<pos:position pos:line="1327" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="1327" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="1327" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="1327" pos:column="52"/></condition><then pos:line="1327" pos:column="52"> <block pos:line="1327" pos:column="53">{
		<expr_stmt><expr><call><name pos:line="1328" pos:column="17">printf_ln<pos:position pos:line="1328" pos:column="26"/></name><argument_list pos:line="1328" pos:column="26">(<argument><expr><call><name pos:line="1328" pos:column="27">_<pos:position pos:line="1328" pos:column="28"/></name><argument_list pos:line="1328" pos:column="28">(<argument><expr><literal type="string" pos:line="1328" pos:column="29">"Patch is empty. Was it split wrong?"<pos:position pos:line="1328" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="1328" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="1328" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="1328" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1329" pos:column="17">die_user_resolve<pos:position pos:line="1329" pos:column="33"/></name><argument_list pos:line="1329" pos:column="33">(<argument><expr><name pos:line="1329" pos:column="34">state<pos:position pos:line="1329" pos:column="39"/></name></expr></argument>)<pos:position pos:line="1329" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1329" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="1330" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="1332" pos:column="9">strbuf_addstr<pos:position pos:line="1332" pos:column="22"/></name><argument_list pos:line="1332" pos:column="22">(<argument><expr><operator pos:line="1332" pos:column="23">&amp;<pos:position pos:line="1332" pos:column="28"/></operator><name pos:line="1332" pos:column="24">msg<pos:position pos:line="1332" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1332" pos:column="29">"\n\n"<pos:position pos:line="1332" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="1332" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1332" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1333" pos:column="9">strbuf_addbuf<pos:position pos:line="1333" pos:column="22"/></name><argument_list pos:line="1333" pos:column="22">(<argument><expr><operator pos:line="1333" pos:column="23">&amp;<pos:position pos:line="1333" pos:column="28"/></operator><name pos:line="1333" pos:column="24">msg<pos:position pos:line="1333" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="1333" pos:column="29">&amp;<pos:position pos:line="1333" pos:column="34"/></operator><name><name pos:line="1333" pos:column="30">mi<pos:position pos:line="1333" pos:column="32"/></name><operator pos:line="1333" pos:column="32">.<pos:position pos:line="1333" pos:column="33"/></operator><name pos:line="1333" pos:column="33">log_message<pos:position pos:line="1333" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="1333" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1333" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1334" pos:column="9">strbuf_stripspace<pos:position pos:line="1334" pos:column="26"/></name><argument_list pos:line="1334" pos:column="26">(<argument><expr><operator pos:line="1334" pos:column="27">&amp;<pos:position pos:line="1334" pos:column="32"/></operator><name pos:line="1334" pos:column="28">msg<pos:position pos:line="1334" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1334" pos:column="33">0<pos:position pos:line="1334" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="1334" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1334" pos:column="36"/></expr_stmt>

	<if pos:line="1336" pos:column="9">if <condition pos:line="1336" pos:column="12">(<expr><name><name pos:line="1336" pos:column="13">state<pos:position pos:line="1336" pos:column="18"/></name><operator pos:line="1336" pos:column="18">-&gt;<pos:position pos:line="1336" pos:column="23"/></operator><name pos:line="1336" pos:column="20">signoff<pos:position pos:line="1336" pos:column="27"/></name></name></expr>)<pos:position pos:line="1336" pos:column="28"/></condition><then pos:line="1336" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1337" pos:column="17">am_signoff<pos:position pos:line="1337" pos:column="27"/></name><argument_list pos:line="1337" pos:column="27">(<argument><expr><operator pos:line="1337" pos:column="28">&amp;<pos:position pos:line="1337" pos:column="33"/></operator><name pos:line="1337" pos:column="29">msg<pos:position pos:line="1337" pos:column="32"/></name></expr></argument>)<pos:position pos:line="1337" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1337" pos:column="34"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="1339" pos:column="9">assert<pos:position pos:line="1339" pos:column="15"/></name><argument_list pos:line="1339" pos:column="15">(<argument><expr><operator pos:line="1339" pos:column="16">!<pos:position pos:line="1339" pos:column="17"/></operator><name><name pos:line="1339" pos:column="17">state<pos:position pos:line="1339" pos:column="22"/></name><operator pos:line="1339" pos:column="22">-&gt;<pos:position pos:line="1339" pos:column="27"/></operator><name pos:line="1339" pos:column="24">author_name<pos:position pos:line="1339" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="1339" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1339" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1340" pos:column="9">state<pos:position pos:line="1340" pos:column="14"/></name><operator pos:line="1340" pos:column="14">-&gt;<pos:position pos:line="1340" pos:column="19"/></operator><name pos:line="1340" pos:column="16">author_name<pos:position pos:line="1340" pos:column="27"/></name></name> <operator pos:line="1340" pos:column="28">=<pos:position pos:line="1340" pos:column="29"/></operator> <call><name pos:line="1340" pos:column="30">strbuf_detach<pos:position pos:line="1340" pos:column="43"/></name><argument_list pos:line="1340" pos:column="43">(<argument><expr><operator pos:line="1340" pos:column="44">&amp;<pos:position pos:line="1340" pos:column="49"/></operator><name pos:line="1340" pos:column="45">author_name<pos:position pos:line="1340" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="1340" pos:column="58">NULL<pos:position pos:line="1340" pos:column="62"/></name></expr></argument>)<pos:position pos:line="1340" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="1340" pos:column="64"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1342" pos:column="9">assert<pos:position pos:line="1342" pos:column="15"/></name><argument_list pos:line="1342" pos:column="15">(<argument><expr><operator pos:line="1342" pos:column="16">!<pos:position pos:line="1342" pos:column="17"/></operator><name><name pos:line="1342" pos:column="17">state<pos:position pos:line="1342" pos:column="22"/></name><operator pos:line="1342" pos:column="22">-&gt;<pos:position pos:line="1342" pos:column="27"/></operator><name pos:line="1342" pos:column="24">author_email<pos:position pos:line="1342" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="1342" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1342" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1343" pos:column="9">state<pos:position pos:line="1343" pos:column="14"/></name><operator pos:line="1343" pos:column="14">-&gt;<pos:position pos:line="1343" pos:column="19"/></operator><name pos:line="1343" pos:column="16">author_email<pos:position pos:line="1343" pos:column="28"/></name></name> <operator pos:line="1343" pos:column="29">=<pos:position pos:line="1343" pos:column="30"/></operator> <call><name pos:line="1343" pos:column="31">strbuf_detach<pos:position pos:line="1343" pos:column="44"/></name><argument_list pos:line="1343" pos:column="44">(<argument><expr><operator pos:line="1343" pos:column="45">&amp;<pos:position pos:line="1343" pos:column="50"/></operator><name pos:line="1343" pos:column="46">author_email<pos:position pos:line="1343" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="1343" pos:column="60">NULL<pos:position pos:line="1343" pos:column="64"/></name></expr></argument>)<pos:position pos:line="1343" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="1343" pos:column="66"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1345" pos:column="9">assert<pos:position pos:line="1345" pos:column="15"/></name><argument_list pos:line="1345" pos:column="15">(<argument><expr><operator pos:line="1345" pos:column="16">!<pos:position pos:line="1345" pos:column="17"/></operator><name><name pos:line="1345" pos:column="17">state<pos:position pos:line="1345" pos:column="22"/></name><operator pos:line="1345" pos:column="22">-&gt;<pos:position pos:line="1345" pos:column="27"/></operator><name pos:line="1345" pos:column="24">author_date<pos:position pos:line="1345" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="1345" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1345" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1346" pos:column="9">state<pos:position pos:line="1346" pos:column="14"/></name><operator pos:line="1346" pos:column="14">-&gt;<pos:position pos:line="1346" pos:column="19"/></operator><name pos:line="1346" pos:column="16">author_date<pos:position pos:line="1346" pos:column="27"/></name></name> <operator pos:line="1346" pos:column="28">=<pos:position pos:line="1346" pos:column="29"/></operator> <call><name pos:line="1346" pos:column="30">strbuf_detach<pos:position pos:line="1346" pos:column="43"/></name><argument_list pos:line="1346" pos:column="43">(<argument><expr><operator pos:line="1346" pos:column="44">&amp;<pos:position pos:line="1346" pos:column="49"/></operator><name pos:line="1346" pos:column="45">author_date<pos:position pos:line="1346" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="1346" pos:column="58">NULL<pos:position pos:line="1346" pos:column="62"/></name></expr></argument>)<pos:position pos:line="1346" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="1346" pos:column="64"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1348" pos:column="9">assert<pos:position pos:line="1348" pos:column="15"/></name><argument_list pos:line="1348" pos:column="15">(<argument><expr><operator pos:line="1348" pos:column="16">!<pos:position pos:line="1348" pos:column="17"/></operator><name><name pos:line="1348" pos:column="17">state<pos:position pos:line="1348" pos:column="22"/></name><operator pos:line="1348" pos:column="22">-&gt;<pos:position pos:line="1348" pos:column="27"/></operator><name pos:line="1348" pos:column="24">msg<pos:position pos:line="1348" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="1348" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1348" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1349" pos:column="9">state<pos:position pos:line="1349" pos:column="14"/></name><operator pos:line="1349" pos:column="14">-&gt;<pos:position pos:line="1349" pos:column="19"/></operator><name pos:line="1349" pos:column="16">msg<pos:position pos:line="1349" pos:column="19"/></name></name> <operator pos:line="1349" pos:column="20">=<pos:position pos:line="1349" pos:column="21"/></operator> <call><name pos:line="1349" pos:column="22">strbuf_detach<pos:position pos:line="1349" pos:column="35"/></name><argument_list pos:line="1349" pos:column="35">(<argument><expr><operator pos:line="1349" pos:column="36">&amp;<pos:position pos:line="1349" pos:column="41"/></operator><name pos:line="1349" pos:column="37">msg<pos:position pos:line="1349" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="1349" pos:column="42">&amp;<pos:position pos:line="1349" pos:column="47"/></operator><name><name pos:line="1349" pos:column="43">state<pos:position pos:line="1349" pos:column="48"/></name><operator pos:line="1349" pos:column="48">-&gt;<pos:position pos:line="1349" pos:column="53"/></operator><name pos:line="1349" pos:column="50">msg_len<pos:position pos:line="1349" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="1349" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1349" pos:column="59"/></expr_stmt>

<label><name pos:line="1351" pos:column="1">finish<pos:position pos:line="1351" pos:column="7"/></name>:<pos:position pos:line="1351" pos:column="8"/></label>
	<expr_stmt><expr><call><name pos:line="1352" pos:column="9">strbuf_release<pos:position pos:line="1352" pos:column="23"/></name><argument_list pos:line="1352" pos:column="23">(<argument><expr><operator pos:line="1352" pos:column="24">&amp;<pos:position pos:line="1352" pos:column="29"/></operator><name pos:line="1352" pos:column="25">msg<pos:position pos:line="1352" pos:column="28"/></name></expr></argument>)<pos:position pos:line="1352" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="1352" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1353" pos:column="9">strbuf_release<pos:position pos:line="1353" pos:column="23"/></name><argument_list pos:line="1353" pos:column="23">(<argument><expr><operator pos:line="1353" pos:column="24">&amp;<pos:position pos:line="1353" pos:column="29"/></operator><name pos:line="1353" pos:column="25">author_date<pos:position pos:line="1353" pos:column="36"/></name></expr></argument>)<pos:position pos:line="1353" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1353" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1354" pos:column="9">strbuf_release<pos:position pos:line="1354" pos:column="23"/></name><argument_list pos:line="1354" pos:column="23">(<argument><expr><operator pos:line="1354" pos:column="24">&amp;<pos:position pos:line="1354" pos:column="29"/></operator><name pos:line="1354" pos:column="25">author_email<pos:position pos:line="1354" pos:column="37"/></name></expr></argument>)<pos:position pos:line="1354" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="1354" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1355" pos:column="9">strbuf_release<pos:position pos:line="1355" pos:column="23"/></name><argument_list pos:line="1355" pos:column="23">(<argument><expr><operator pos:line="1355" pos:column="24">&amp;<pos:position pos:line="1355" pos:column="29"/></operator><name pos:line="1355" pos:column="25">author_name<pos:position pos:line="1355" pos:column="36"/></name></expr></argument>)<pos:position pos:line="1355" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1355" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1356" pos:column="9">strbuf_release<pos:position pos:line="1356" pos:column="23"/></name><argument_list pos:line="1356" pos:column="23">(<argument><expr><operator pos:line="1356" pos:column="24">&amp;<pos:position pos:line="1356" pos:column="29"/></operator><name pos:line="1356" pos:column="25">sb<pos:position pos:line="1356" pos:column="27"/></name></expr></argument>)<pos:position pos:line="1356" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1356" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1357" pos:column="9">clear_mailinfo<pos:position pos:line="1357" pos:column="23"/></name><argument_list pos:line="1357" pos:column="23">(<argument><expr><operator pos:line="1357" pos:column="24">&amp;<pos:position pos:line="1357" pos:column="29"/></operator><name pos:line="1357" pos:column="25">mi<pos:position pos:line="1357" pos:column="27"/></name></expr></argument>)<pos:position pos:line="1357" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1357" pos:column="29"/></expr_stmt>
	<return pos:line="1358" pos:column="9">return <expr><name pos:line="1358" pos:column="16">ret<pos:position pos:line="1358" pos:column="19"/></name></expr>;<pos:position pos:line="1358" pos:column="20"/></return>
}<pos:position pos:line="1359" pos:column="2"/></block></function>

<comment type="block" pos:line="1361" pos:column="1">/**
 * Sets commit_id to the commit hash where the mail was generated from.
 * Returns 0 on success, -1 on failure.
 */</comment>
<function><specifier pos:line="1365" pos:column="1">static<pos:position pos:line="1365" pos:column="7"/></specifier> <type><name pos:line="1365" pos:column="8">int<pos:position pos:line="1365" pos:column="11"/></name></type> <name pos:line="1365" pos:column="12">get_mail_commit_sha1<pos:position pos:line="1365" pos:column="32"/></name><parameter_list pos:line="1365" pos:column="32">(<parameter><decl><type><name pos:line="1365" pos:column="33">unsigned<pos:position pos:line="1365" pos:column="41"/></name> <name pos:line="1365" pos:column="42">char<pos:position pos:line="1365" pos:column="46"/></name> <modifier pos:line="1365" pos:column="47">*<pos:position pos:line="1365" pos:column="48"/></modifier></type><name pos:line="1365" pos:column="48">commit_id<pos:position pos:line="1365" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1365" pos:column="59">const<pos:position pos:line="1365" pos:column="64"/></specifier> <name pos:line="1365" pos:column="65">char<pos:position pos:line="1365" pos:column="69"/></name> <modifier pos:line="1365" pos:column="70">*<pos:position pos:line="1365" pos:column="71"/></modifier></type><name pos:line="1365" pos:column="71">mail<pos:position pos:line="1365" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1365" pos:column="76"/></parameter_list>
<block pos:line="1366" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="1367" pos:column="9">struct<pos:position pos:line="1367" pos:column="15"/></name> <name pos:line="1367" pos:column="16">strbuf<pos:position pos:line="1367" pos:column="22"/></name></name></type> <name pos:line="1367" pos:column="23">sb<pos:position pos:line="1367" pos:column="25"/></name> <init pos:line="1367" pos:column="26">= <expr><name pos:line="1367" pos:column="28">STRBUF_INIT<pos:position pos:line="1367" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="1367" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="1368" pos:column="9">FILE<pos:position pos:line="1368" pos:column="13"/></name> <modifier pos:line="1368" pos:column="14">*<pos:position pos:line="1368" pos:column="15"/></modifier></type><name pos:line="1368" pos:column="15">fp<pos:position pos:line="1368" pos:column="17"/></name> <init pos:line="1368" pos:column="18">= <expr><call><name pos:line="1368" pos:column="20">xfopen<pos:position pos:line="1368" pos:column="26"/></name><argument_list pos:line="1368" pos:column="26">(<argument><expr><name pos:line="1368" pos:column="27">mail<pos:position pos:line="1368" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1368" pos:column="33">"r"<pos:position pos:line="1368" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="1368" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1368" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="1369" pos:column="9">const<pos:position pos:line="1369" pos:column="14"/></specifier> <name pos:line="1369" pos:column="15">char<pos:position pos:line="1369" pos:column="19"/></name> <modifier pos:line="1369" pos:column="20">*<pos:position pos:line="1369" pos:column="21"/></modifier></type><name pos:line="1369" pos:column="21">x<pos:position pos:line="1369" pos:column="22"/></name></decl>;<pos:position pos:line="1369" pos:column="23"/></decl_stmt>

	<if pos:line="1371" pos:column="9">if <condition pos:line="1371" pos:column="12">(<expr><call><name pos:line="1371" pos:column="13">strbuf_getline_lf<pos:position pos:line="1371" pos:column="30"/></name><argument_list pos:line="1371" pos:column="30">(<argument><expr><operator pos:line="1371" pos:column="31">&amp;<pos:position pos:line="1371" pos:column="36"/></operator><name pos:line="1371" pos:column="32">sb<pos:position pos:line="1371" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="1371" pos:column="36">fp<pos:position pos:line="1371" pos:column="38"/></name></expr></argument>)<pos:position pos:line="1371" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="1371" pos:column="40"/></condition><then pos:line="1371" pos:column="40">
		<block type="pseudo"><return pos:line="1372" pos:column="17">return <expr><operator pos:line="1372" pos:column="24">-<pos:position pos:line="1372" pos:column="25"/></operator><literal type="number" pos:line="1372" pos:column="25">1<pos:position pos:line="1372" pos:column="26"/></literal></expr>;<pos:position pos:line="1372" pos:column="27"/></return></block></then></if>

	<if pos:line="1374" pos:column="9">if <condition pos:line="1374" pos:column="12">(<expr><operator pos:line="1374" pos:column="13">!<pos:position pos:line="1374" pos:column="14"/></operator><call><name pos:line="1374" pos:column="14">skip_prefix<pos:position pos:line="1374" pos:column="25"/></name><argument_list pos:line="1374" pos:column="25">(<argument><expr><name><name pos:line="1374" pos:column="26">sb<pos:position pos:line="1374" pos:column="28"/></name><operator pos:line="1374" pos:column="28">.<pos:position pos:line="1374" pos:column="29"/></operator><name pos:line="1374" pos:column="29">buf<pos:position pos:line="1374" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1374" pos:column="34">"From "<pos:position pos:line="1374" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="1374" pos:column="43">&amp;<pos:position pos:line="1374" pos:column="48"/></operator><name pos:line="1374" pos:column="44">x<pos:position pos:line="1374" pos:column="45"/></name></expr></argument>)<pos:position pos:line="1374" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="1374" pos:column="47"/></condition><then pos:line="1374" pos:column="47">
		<block type="pseudo"><return pos:line="1375" pos:column="17">return <expr><operator pos:line="1375" pos:column="24">-<pos:position pos:line="1375" pos:column="25"/></operator><literal type="number" pos:line="1375" pos:column="25">1<pos:position pos:line="1375" pos:column="26"/></literal></expr>;<pos:position pos:line="1375" pos:column="27"/></return></block></then></if>

	<if pos:line="1377" pos:column="9">if <condition pos:line="1377" pos:column="12">(<expr><call><name pos:line="1377" pos:column="13">get_sha1_hex<pos:position pos:line="1377" pos:column="25"/></name><argument_list pos:line="1377" pos:column="25">(<argument><expr><name pos:line="1377" pos:column="26">x<pos:position pos:line="1377" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="1377" pos:column="29">commit_id<pos:position pos:line="1377" pos:column="38"/></name></expr></argument>)<pos:position pos:line="1377" pos:column="39"/></argument_list></call> <operator pos:line="1377" pos:column="40">&lt;<pos:position pos:line="1377" pos:column="44"/></operator> <literal type="number" pos:line="1377" pos:column="42">0<pos:position pos:line="1377" pos:column="43"/></literal></expr>)<pos:position pos:line="1377" pos:column="44"/></condition><then pos:line="1377" pos:column="44">
		<block type="pseudo"><return pos:line="1378" pos:column="17">return <expr><operator pos:line="1378" pos:column="24">-<pos:position pos:line="1378" pos:column="25"/></operator><literal type="number" pos:line="1378" pos:column="25">1<pos:position pos:line="1378" pos:column="26"/></literal></expr>;<pos:position pos:line="1378" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="1380" pos:column="9">strbuf_release<pos:position pos:line="1380" pos:column="23"/></name><argument_list pos:line="1380" pos:column="23">(<argument><expr><operator pos:line="1380" pos:column="24">&amp;<pos:position pos:line="1380" pos:column="29"/></operator><name pos:line="1380" pos:column="25">sb<pos:position pos:line="1380" pos:column="27"/></name></expr></argument>)<pos:position pos:line="1380" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1380" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1381" pos:column="9">fclose<pos:position pos:line="1381" pos:column="15"/></name><argument_list pos:line="1381" pos:column="15">(<argument><expr><name pos:line="1381" pos:column="16">fp<pos:position pos:line="1381" pos:column="18"/></name></expr></argument>)<pos:position pos:line="1381" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="1381" pos:column="20"/></expr_stmt>
	<return pos:line="1382" pos:column="9">return <expr><literal type="number" pos:line="1382" pos:column="16">0<pos:position pos:line="1382" pos:column="17"/></literal></expr>;<pos:position pos:line="1382" pos:column="18"/></return>
}<pos:position pos:line="1383" pos:column="2"/></block></function>

<comment type="block" pos:line="1385" pos:column="1">/**
 * Sets state-&gt;msg, state-&gt;author_name, state-&gt;author_email, state-&gt;author_date
 * to the commit's respective info.
 */</comment>
<function><specifier pos:line="1389" pos:column="1">static<pos:position pos:line="1389" pos:column="7"/></specifier> <type><name pos:line="1389" pos:column="8">void<pos:position pos:line="1389" pos:column="12"/></name></type> <name pos:line="1389" pos:column="13">get_commit_info<pos:position pos:line="1389" pos:column="28"/></name><parameter_list pos:line="1389" pos:column="28">(<parameter><decl><type><name><name pos:line="1389" pos:column="29">struct<pos:position pos:line="1389" pos:column="35"/></name> <name pos:line="1389" pos:column="36">am_state<pos:position pos:line="1389" pos:column="44"/></name></name> <modifier pos:line="1389" pos:column="45">*<pos:position pos:line="1389" pos:column="46"/></modifier></type><name pos:line="1389" pos:column="46">state<pos:position pos:line="1389" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1389" pos:column="53">struct<pos:position pos:line="1389" pos:column="59"/></name> <name pos:line="1389" pos:column="60">commit<pos:position pos:line="1389" pos:column="66"/></name></name> <modifier pos:line="1389" pos:column="67">*<pos:position pos:line="1389" pos:column="68"/></modifier></type><name pos:line="1389" pos:column="68">commit<pos:position pos:line="1389" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1389" pos:column="75"/></parameter_list>
<block pos:line="1390" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="1391" pos:column="9">const<pos:position pos:line="1391" pos:column="14"/></specifier> <name pos:line="1391" pos:column="15">char<pos:position pos:line="1391" pos:column="19"/></name> <modifier pos:line="1391" pos:column="20">*<pos:position pos:line="1391" pos:column="21"/></modifier></type><name pos:line="1391" pos:column="21">buffer<pos:position pos:line="1391" pos:column="27"/></name></decl>, <modifier pos:line="1391" pos:column="29">*<pos:position pos:line="1391" pos:column="30"/></modifier><decl><type ref="prev"/><name pos:line="1391" pos:column="30">ident_line<pos:position pos:line="1391" pos:column="40"/></name></decl>, <modifier pos:line="1391" pos:column="42">*<pos:position pos:line="1391" pos:column="43"/></modifier><decl><type ref="prev"/><name pos:line="1391" pos:column="43">author_date<pos:position pos:line="1391" pos:column="54"/></name></decl>, <modifier pos:line="1391" pos:column="56">*<pos:position pos:line="1391" pos:column="57"/></modifier><decl><type ref="prev"/><name pos:line="1391" pos:column="57">msg<pos:position pos:line="1391" pos:column="60"/></name></decl>;<pos:position pos:line="1391" pos:column="61"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="1392" pos:column="9">size_t<pos:position pos:line="1392" pos:column="15"/></name></type> <name pos:line="1392" pos:column="16">ident_len<pos:position pos:line="1392" pos:column="25"/></name></decl>;<pos:position pos:line="1392" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1393" pos:column="9">struct<pos:position pos:line="1393" pos:column="15"/></name> <name pos:line="1393" pos:column="16">ident_split<pos:position pos:line="1393" pos:column="27"/></name></name></type> <name pos:line="1393" pos:column="28">ident_split<pos:position pos:line="1393" pos:column="39"/></name></decl>;<pos:position pos:line="1393" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1394" pos:column="9">struct<pos:position pos:line="1394" pos:column="15"/></name> <name pos:line="1394" pos:column="16">strbuf<pos:position pos:line="1394" pos:column="22"/></name></name></type> <name pos:line="1394" pos:column="23">sb<pos:position pos:line="1394" pos:column="25"/></name> <init pos:line="1394" pos:column="26">= <expr><name pos:line="1394" pos:column="28">STRBUF_INIT<pos:position pos:line="1394" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="1394" pos:column="40"/></decl_stmt>

	<expr_stmt><expr><name pos:line="1396" pos:column="9">buffer<pos:position pos:line="1396" pos:column="15"/></name> <operator pos:line="1396" pos:column="16">=<pos:position pos:line="1396" pos:column="17"/></operator> <call><name pos:line="1396" pos:column="18">logmsg_reencode<pos:position pos:line="1396" pos:column="33"/></name><argument_list pos:line="1396" pos:column="33">(<argument><expr><name pos:line="1396" pos:column="34">commit<pos:position pos:line="1396" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="1396" pos:column="42">NULL<pos:position pos:line="1396" pos:column="46"/></name></expr></argument>, <argument><expr><call><name pos:line="1396" pos:column="48">get_commit_output_encoding<pos:position pos:line="1396" pos:column="74"/></name><argument_list pos:line="1396" pos:column="74">()<pos:position pos:line="1396" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="1396" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="1396" pos:column="78"/></expr_stmt>

	<expr_stmt><expr><name pos:line="1398" pos:column="9">ident_line<pos:position pos:line="1398" pos:column="19"/></name> <operator pos:line="1398" pos:column="20">=<pos:position pos:line="1398" pos:column="21"/></operator> <call><name pos:line="1398" pos:column="22">find_commit_header<pos:position pos:line="1398" pos:column="40"/></name><argument_list pos:line="1398" pos:column="40">(<argument><expr><name pos:line="1398" pos:column="41">buffer<pos:position pos:line="1398" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1398" pos:column="49">"author"<pos:position pos:line="1398" pos:column="57"/></literal></expr></argument>, <argument><expr><operator pos:line="1398" pos:column="59">&amp;<pos:position pos:line="1398" pos:column="64"/></operator><name pos:line="1398" pos:column="60">ident_len<pos:position pos:line="1398" pos:column="69"/></name></expr></argument>)<pos:position pos:line="1398" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="1398" pos:column="71"/></expr_stmt>

	<if pos:line="1400" pos:column="9">if <condition pos:line="1400" pos:column="12">(<expr><call><name pos:line="1400" pos:column="13">split_ident_line<pos:position pos:line="1400" pos:column="29"/></name><argument_list pos:line="1400" pos:column="29">(<argument><expr><operator pos:line="1400" pos:column="30">&amp;<pos:position pos:line="1400" pos:column="35"/></operator><name pos:line="1400" pos:column="31">ident_split<pos:position pos:line="1400" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1400" pos:column="44">ident_line<pos:position pos:line="1400" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="1400" pos:column="56">ident_len<pos:position pos:line="1400" pos:column="65"/></name></expr></argument>)<pos:position pos:line="1400" pos:column="66"/></argument_list></call> <operator pos:line="1400" pos:column="67">&lt;<pos:position pos:line="1400" pos:column="71"/></operator> <literal type="number" pos:line="1400" pos:column="69">0<pos:position pos:line="1400" pos:column="70"/></literal></expr>)<pos:position pos:line="1400" pos:column="71"/></condition><then pos:line="1400" pos:column="71"> <block pos:line="1400" pos:column="72">{
		<expr_stmt><expr><call><name pos:line="1401" pos:column="17">strbuf_add<pos:position pos:line="1401" pos:column="27"/></name><argument_list pos:line="1401" pos:column="27">(<argument><expr><operator pos:line="1401" pos:column="28">&amp;<pos:position pos:line="1401" pos:column="33"/></operator><name pos:line="1401" pos:column="29">sb<pos:position pos:line="1401" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="1401" pos:column="33">ident_line<pos:position pos:line="1401" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="1401" pos:column="45">ident_len<pos:position pos:line="1401" pos:column="54"/></name></expr></argument>)<pos:position pos:line="1401" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1401" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1402" pos:column="17">die<pos:position pos:line="1402" pos:column="20"/></name><argument_list pos:line="1402" pos:column="20">(<argument><expr><call><name pos:line="1402" pos:column="21">_<pos:position pos:line="1402" pos:column="22"/></name><argument_list pos:line="1402" pos:column="22">(<argument><expr><literal type="string" pos:line="1402" pos:column="23">"invalid ident line: %s"<pos:position pos:line="1402" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="1402" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="1402" pos:column="50">sb<pos:position pos:line="1402" pos:column="52"/></name><operator pos:line="1402" pos:column="52">.<pos:position pos:line="1402" pos:column="53"/></operator><name pos:line="1402" pos:column="53">buf<pos:position pos:line="1402" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="1402" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1402" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="1403" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="1405" pos:column="9">assert<pos:position pos:line="1405" pos:column="15"/></name><argument_list pos:line="1405" pos:column="15">(<argument><expr><operator pos:line="1405" pos:column="16">!<pos:position pos:line="1405" pos:column="17"/></operator><name><name pos:line="1405" pos:column="17">state<pos:position pos:line="1405" pos:column="22"/></name><operator pos:line="1405" pos:column="22">-&gt;<pos:position pos:line="1405" pos:column="27"/></operator><name pos:line="1405" pos:column="24">author_name<pos:position pos:line="1405" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="1405" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1405" pos:column="37"/></expr_stmt>
	<if pos:line="1406" pos:column="9">if <condition pos:line="1406" pos:column="12">(<expr><name><name pos:line="1406" pos:column="13">ident_split<pos:position pos:line="1406" pos:column="24"/></name><operator pos:line="1406" pos:column="24">.<pos:position pos:line="1406" pos:column="25"/></operator><name pos:line="1406" pos:column="25">name_begin<pos:position pos:line="1406" pos:column="35"/></name></name></expr>)<pos:position pos:line="1406" pos:column="36"/></condition><then pos:line="1406" pos:column="36"> <block pos:line="1406" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="1407" pos:column="17">strbuf_add<pos:position pos:line="1407" pos:column="27"/></name><argument_list pos:line="1407" pos:column="27">(<argument><expr><operator pos:line="1407" pos:column="28">&amp;<pos:position pos:line="1407" pos:column="33"/></operator><name pos:line="1407" pos:column="29">sb<pos:position pos:line="1407" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="1407" pos:column="33">ident_split<pos:position pos:line="1407" pos:column="44"/></name><operator pos:line="1407" pos:column="44">.<pos:position pos:line="1407" pos:column="45"/></operator><name pos:line="1407" pos:column="45">name_begin<pos:position pos:line="1407" pos:column="55"/></name></name></expr></argument>,
			<argument><expr><name><name pos:line="1408" pos:column="25">ident_split<pos:position pos:line="1408" pos:column="36"/></name><operator pos:line="1408" pos:column="36">.<pos:position pos:line="1408" pos:column="37"/></operator><name pos:line="1408" pos:column="37">name_end<pos:position pos:line="1408" pos:column="45"/></name></name> <operator pos:line="1408" pos:column="46">-<pos:position pos:line="1408" pos:column="47"/></operator> <name><name pos:line="1408" pos:column="48">ident_split<pos:position pos:line="1408" pos:column="59"/></name><operator pos:line="1408" pos:column="59">.<pos:position pos:line="1408" pos:column="60"/></operator><name pos:line="1408" pos:column="60">name_begin<pos:position pos:line="1408" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="1408" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="1408" pos:column="72"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="1409" pos:column="17">state<pos:position pos:line="1409" pos:column="22"/></name><operator pos:line="1409" pos:column="22">-&gt;<pos:position pos:line="1409" pos:column="27"/></operator><name pos:line="1409" pos:column="24">author_name<pos:position pos:line="1409" pos:column="35"/></name></name> <operator pos:line="1409" pos:column="36">=<pos:position pos:line="1409" pos:column="37"/></operator> <call><name pos:line="1409" pos:column="38">strbuf_detach<pos:position pos:line="1409" pos:column="51"/></name><argument_list pos:line="1409" pos:column="51">(<argument><expr><operator pos:line="1409" pos:column="52">&amp;<pos:position pos:line="1409" pos:column="57"/></operator><name pos:line="1409" pos:column="53">sb<pos:position pos:line="1409" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="1409" pos:column="57">NULL<pos:position pos:line="1409" pos:column="61"/></name></expr></argument>)<pos:position pos:line="1409" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="1409" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="1410" pos:column="10"/></block></then> <else pos:line="1410" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="1411" pos:column="17">state<pos:position pos:line="1411" pos:column="22"/></name><operator pos:line="1411" pos:column="22">-&gt;<pos:position pos:line="1411" pos:column="27"/></operator><name pos:line="1411" pos:column="24">author_name<pos:position pos:line="1411" pos:column="35"/></name></name> <operator pos:line="1411" pos:column="36">=<pos:position pos:line="1411" pos:column="37"/></operator> <call><name pos:line="1411" pos:column="38">xstrdup<pos:position pos:line="1411" pos:column="45"/></name><argument_list pos:line="1411" pos:column="45">(<argument><expr><literal type="string" pos:line="1411" pos:column="46">""<pos:position pos:line="1411" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="1411" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="1411" pos:column="50"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="1413" pos:column="9">assert<pos:position pos:line="1413" pos:column="15"/></name><argument_list pos:line="1413" pos:column="15">(<argument><expr><operator pos:line="1413" pos:column="16">!<pos:position pos:line="1413" pos:column="17"/></operator><name><name pos:line="1413" pos:column="17">state<pos:position pos:line="1413" pos:column="22"/></name><operator pos:line="1413" pos:column="22">-&gt;<pos:position pos:line="1413" pos:column="27"/></operator><name pos:line="1413" pos:column="24">author_email<pos:position pos:line="1413" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="1413" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1413" pos:column="38"/></expr_stmt>
	<if pos:line="1414" pos:column="9">if <condition pos:line="1414" pos:column="12">(<expr><name><name pos:line="1414" pos:column="13">ident_split<pos:position pos:line="1414" pos:column="24"/></name><operator pos:line="1414" pos:column="24">.<pos:position pos:line="1414" pos:column="25"/></operator><name pos:line="1414" pos:column="25">mail_begin<pos:position pos:line="1414" pos:column="35"/></name></name></expr>)<pos:position pos:line="1414" pos:column="36"/></condition><then pos:line="1414" pos:column="36"> <block pos:line="1414" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="1415" pos:column="17">strbuf_add<pos:position pos:line="1415" pos:column="27"/></name><argument_list pos:line="1415" pos:column="27">(<argument><expr><operator pos:line="1415" pos:column="28">&amp;<pos:position pos:line="1415" pos:column="33"/></operator><name pos:line="1415" pos:column="29">sb<pos:position pos:line="1415" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="1415" pos:column="33">ident_split<pos:position pos:line="1415" pos:column="44"/></name><operator pos:line="1415" pos:column="44">.<pos:position pos:line="1415" pos:column="45"/></operator><name pos:line="1415" pos:column="45">mail_begin<pos:position pos:line="1415" pos:column="55"/></name></name></expr></argument>,
			<argument><expr><name><name pos:line="1416" pos:column="25">ident_split<pos:position pos:line="1416" pos:column="36"/></name><operator pos:line="1416" pos:column="36">.<pos:position pos:line="1416" pos:column="37"/></operator><name pos:line="1416" pos:column="37">mail_end<pos:position pos:line="1416" pos:column="45"/></name></name> <operator pos:line="1416" pos:column="46">-<pos:position pos:line="1416" pos:column="47"/></operator> <name><name pos:line="1416" pos:column="48">ident_split<pos:position pos:line="1416" pos:column="59"/></name><operator pos:line="1416" pos:column="59">.<pos:position pos:line="1416" pos:column="60"/></operator><name pos:line="1416" pos:column="60">mail_begin<pos:position pos:line="1416" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="1416" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="1416" pos:column="72"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="1417" pos:column="17">state<pos:position pos:line="1417" pos:column="22"/></name><operator pos:line="1417" pos:column="22">-&gt;<pos:position pos:line="1417" pos:column="27"/></operator><name pos:line="1417" pos:column="24">author_email<pos:position pos:line="1417" pos:column="36"/></name></name> <operator pos:line="1417" pos:column="37">=<pos:position pos:line="1417" pos:column="38"/></operator> <call><name pos:line="1417" pos:column="39">strbuf_detach<pos:position pos:line="1417" pos:column="52"/></name><argument_list pos:line="1417" pos:column="52">(<argument><expr><operator pos:line="1417" pos:column="53">&amp;<pos:position pos:line="1417" pos:column="58"/></operator><name pos:line="1417" pos:column="54">sb<pos:position pos:line="1417" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="1417" pos:column="58">NULL<pos:position pos:line="1417" pos:column="62"/></name></expr></argument>)<pos:position pos:line="1417" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="1417" pos:column="64"/></expr_stmt>
	}<pos:position pos:line="1418" pos:column="10"/></block></then> <else pos:line="1418" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="1419" pos:column="17">state<pos:position pos:line="1419" pos:column="22"/></name><operator pos:line="1419" pos:column="22">-&gt;<pos:position pos:line="1419" pos:column="27"/></operator><name pos:line="1419" pos:column="24">author_email<pos:position pos:line="1419" pos:column="36"/></name></name> <operator pos:line="1419" pos:column="37">=<pos:position pos:line="1419" pos:column="38"/></operator> <call><name pos:line="1419" pos:column="39">xstrdup<pos:position pos:line="1419" pos:column="46"/></name><argument_list pos:line="1419" pos:column="46">(<argument><expr><literal type="string" pos:line="1419" pos:column="47">""<pos:position pos:line="1419" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="1419" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="1419" pos:column="51"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name pos:line="1421" pos:column="9">author_date<pos:position pos:line="1421" pos:column="20"/></name> <operator pos:line="1421" pos:column="21">=<pos:position pos:line="1421" pos:column="22"/></operator> <call><name pos:line="1421" pos:column="23">show_ident_date<pos:position pos:line="1421" pos:column="38"/></name><argument_list pos:line="1421" pos:column="38">(<argument><expr><operator pos:line="1421" pos:column="39">&amp;<pos:position pos:line="1421" pos:column="44"/></operator><name pos:line="1421" pos:column="40">ident_split<pos:position pos:line="1421" pos:column="51"/></name></expr></argument>, <argument><expr><call><name pos:line="1421" pos:column="53">DATE_MODE<pos:position pos:line="1421" pos:column="62"/></name><argument_list pos:line="1421" pos:column="62">(<argument><expr><name pos:line="1421" pos:column="63">NORMAL<pos:position pos:line="1421" pos:column="69"/></name></expr></argument>)<pos:position pos:line="1421" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="1421" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="1421" pos:column="72"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1422" pos:column="9">strbuf_addstr<pos:position pos:line="1422" pos:column="22"/></name><argument_list pos:line="1422" pos:column="22">(<argument><expr><operator pos:line="1422" pos:column="23">&amp;<pos:position pos:line="1422" pos:column="28"/></operator><name pos:line="1422" pos:column="24">sb<pos:position pos:line="1422" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="1422" pos:column="28">author_date<pos:position pos:line="1422" pos:column="39"/></name></expr></argument>)<pos:position pos:line="1422" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1422" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1423" pos:column="9">assert<pos:position pos:line="1423" pos:column="15"/></name><argument_list pos:line="1423" pos:column="15">(<argument><expr><operator pos:line="1423" pos:column="16">!<pos:position pos:line="1423" pos:column="17"/></operator><name><name pos:line="1423" pos:column="17">state<pos:position pos:line="1423" pos:column="22"/></name><operator pos:line="1423" pos:column="22">-&gt;<pos:position pos:line="1423" pos:column="27"/></operator><name pos:line="1423" pos:column="24">author_date<pos:position pos:line="1423" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="1423" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1423" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1424" pos:column="9">state<pos:position pos:line="1424" pos:column="14"/></name><operator pos:line="1424" pos:column="14">-&gt;<pos:position pos:line="1424" pos:column="19"/></operator><name pos:line="1424" pos:column="16">author_date<pos:position pos:line="1424" pos:column="27"/></name></name> <operator pos:line="1424" pos:column="28">=<pos:position pos:line="1424" pos:column="29"/></operator> <call><name pos:line="1424" pos:column="30">strbuf_detach<pos:position pos:line="1424" pos:column="43"/></name><argument_list pos:line="1424" pos:column="43">(<argument><expr><operator pos:line="1424" pos:column="44">&amp;<pos:position pos:line="1424" pos:column="49"/></operator><name pos:line="1424" pos:column="45">sb<pos:position pos:line="1424" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="1424" pos:column="49">NULL<pos:position pos:line="1424" pos:column="53"/></name></expr></argument>)<pos:position pos:line="1424" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="1424" pos:column="55"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1426" pos:column="9">assert<pos:position pos:line="1426" pos:column="15"/></name><argument_list pos:line="1426" pos:column="15">(<argument><expr><operator pos:line="1426" pos:column="16">!<pos:position pos:line="1426" pos:column="17"/></operator><name><name pos:line="1426" pos:column="17">state<pos:position pos:line="1426" pos:column="22"/></name><operator pos:line="1426" pos:column="22">-&gt;<pos:position pos:line="1426" pos:column="27"/></operator><name pos:line="1426" pos:column="24">msg<pos:position pos:line="1426" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="1426" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1426" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name pos:line="1427" pos:column="9">msg<pos:position pos:line="1427" pos:column="12"/></name> <operator pos:line="1427" pos:column="13">=<pos:position pos:line="1427" pos:column="14"/></operator> <call><name pos:line="1427" pos:column="15">strstr<pos:position pos:line="1427" pos:column="21"/></name><argument_list pos:line="1427" pos:column="21">(<argument><expr><name pos:line="1427" pos:column="22">buffer<pos:position pos:line="1427" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1427" pos:column="30">"\n\n"<pos:position pos:line="1427" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="1427" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1427" pos:column="38"/></expr_stmt>
	<if pos:line="1428" pos:column="9">if <condition pos:line="1428" pos:column="12">(<expr><operator pos:line="1428" pos:column="13">!<pos:position pos:line="1428" pos:column="14"/></operator><name pos:line="1428" pos:column="14">msg<pos:position pos:line="1428" pos:column="17"/></name></expr>)<pos:position pos:line="1428" pos:column="18"/></condition><then pos:line="1428" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1429" pos:column="17">die<pos:position pos:line="1429" pos:column="20"/></name><argument_list pos:line="1429" pos:column="20">(<argument><expr><call><name pos:line="1429" pos:column="21">_<pos:position pos:line="1429" pos:column="22"/></name><argument_list pos:line="1429" pos:column="22">(<argument><expr><literal type="string" pos:line="1429" pos:column="23">"unable to parse commit %s"<pos:position pos:line="1429" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="1429" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="1429" pos:column="53">oid_to_hex<pos:position pos:line="1429" pos:column="63"/></name><argument_list pos:line="1429" pos:column="63">(<argument><expr><operator pos:line="1429" pos:column="64">&amp;<pos:position pos:line="1429" pos:column="69"/></operator><name><name pos:line="1429" pos:column="65">commit<pos:position pos:line="1429" pos:column="71"/></name><operator pos:line="1429" pos:column="71">-&gt;<pos:position pos:line="1429" pos:column="76"/></operator><name pos:line="1429" pos:column="73">object<pos:position pos:line="1429" pos:column="79"/></name><operator pos:line="1429" pos:column="79">.<pos:position pos:line="1429" pos:column="80"/></operator><name pos:line="1429" pos:column="80">oid<pos:position pos:line="1429" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="1429" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="1429" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="1429" pos:column="86"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="1430" pos:column="9">state<pos:position pos:line="1430" pos:column="14"/></name><operator pos:line="1430" pos:column="14">-&gt;<pos:position pos:line="1430" pos:column="19"/></operator><name pos:line="1430" pos:column="16">msg<pos:position pos:line="1430" pos:column="19"/></name></name> <operator pos:line="1430" pos:column="20">=<pos:position pos:line="1430" pos:column="21"/></operator> <call><name pos:line="1430" pos:column="22">xstrdup<pos:position pos:line="1430" pos:column="29"/></name><argument_list pos:line="1430" pos:column="29">(<argument><expr><name pos:line="1430" pos:column="30">msg<pos:position pos:line="1430" pos:column="33"/></name> <operator pos:line="1430" pos:column="34">+<pos:position pos:line="1430" pos:column="35"/></operator> <literal type="number" pos:line="1430" pos:column="36">2<pos:position pos:line="1430" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="1430" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="1430" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1431" pos:column="9">state<pos:position pos:line="1431" pos:column="14"/></name><operator pos:line="1431" pos:column="14">-&gt;<pos:position pos:line="1431" pos:column="19"/></operator><name pos:line="1431" pos:column="16">msg_len<pos:position pos:line="1431" pos:column="23"/></name></name> <operator pos:line="1431" pos:column="24">=<pos:position pos:line="1431" pos:column="25"/></operator> <call><name pos:line="1431" pos:column="26">strlen<pos:position pos:line="1431" pos:column="32"/></name><argument_list pos:line="1431" pos:column="32">(<argument><expr><name><name pos:line="1431" pos:column="33">state<pos:position pos:line="1431" pos:column="38"/></name><operator pos:line="1431" pos:column="38">-&gt;<pos:position pos:line="1431" pos:column="43"/></operator><name pos:line="1431" pos:column="40">msg<pos:position pos:line="1431" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="1431" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="1431" pos:column="45"/></expr_stmt>
}<pos:position pos:line="1432" pos:column="2"/></block></function>

<comment type="block" pos:line="1434" pos:column="1">/**
 * Writes `commit` as a patch to the state directory's "patch" file.
 */</comment>
<function><specifier pos:line="1437" pos:column="1">static<pos:position pos:line="1437" pos:column="7"/></specifier> <type><name pos:line="1437" pos:column="8">void<pos:position pos:line="1437" pos:column="12"/></name></type> <name pos:line="1437" pos:column="13">write_commit_patch<pos:position pos:line="1437" pos:column="31"/></name><parameter_list pos:line="1437" pos:column="31">(<parameter><decl><type><specifier pos:line="1437" pos:column="32">const<pos:position pos:line="1437" pos:column="37"/></specifier> <name><name pos:line="1437" pos:column="38">struct<pos:position pos:line="1437" pos:column="44"/></name> <name pos:line="1437" pos:column="45">am_state<pos:position pos:line="1437" pos:column="53"/></name></name> <modifier pos:line="1437" pos:column="54">*<pos:position pos:line="1437" pos:column="55"/></modifier></type><name pos:line="1437" pos:column="55">state<pos:position pos:line="1437" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1437" pos:column="62">struct<pos:position pos:line="1437" pos:column="68"/></name> <name pos:line="1437" pos:column="69">commit<pos:position pos:line="1437" pos:column="75"/></name></name> <modifier pos:line="1437" pos:column="76">*<pos:position pos:line="1437" pos:column="77"/></modifier></type><name pos:line="1437" pos:column="77">commit<pos:position pos:line="1437" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="1437" pos:column="84"/></parameter_list>
<block pos:line="1438" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="1439" pos:column="9">struct<pos:position pos:line="1439" pos:column="15"/></name> <name pos:line="1439" pos:column="16">rev_info<pos:position pos:line="1439" pos:column="24"/></name></name></type> <name pos:line="1439" pos:column="25">rev_info<pos:position pos:line="1439" pos:column="33"/></name></decl>;<pos:position pos:line="1439" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="1440" pos:column="9">FILE<pos:position pos:line="1440" pos:column="13"/></name> <modifier pos:line="1440" pos:column="14">*<pos:position pos:line="1440" pos:column="15"/></modifier></type><name pos:line="1440" pos:column="15">fp<pos:position pos:line="1440" pos:column="17"/></name></decl>;<pos:position pos:line="1440" pos:column="18"/></decl_stmt>

	<expr_stmt><expr><name pos:line="1442" pos:column="9">fp<pos:position pos:line="1442" pos:column="11"/></name> <operator pos:line="1442" pos:column="12">=<pos:position pos:line="1442" pos:column="13"/></operator> <call><name pos:line="1442" pos:column="14">xfopen<pos:position pos:line="1442" pos:column="20"/></name><argument_list pos:line="1442" pos:column="20">(<argument><expr><call><name pos:line="1442" pos:column="21">am_path<pos:position pos:line="1442" pos:column="28"/></name><argument_list pos:line="1442" pos:column="28">(<argument><expr><name pos:line="1442" pos:column="29">state<pos:position pos:line="1442" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1442" pos:column="36">"patch"<pos:position pos:line="1442" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="1442" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="1442" pos:column="46">"w"<pos:position pos:line="1442" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="1442" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="1442" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1443" pos:column="9">init_revisions<pos:position pos:line="1443" pos:column="23"/></name><argument_list pos:line="1443" pos:column="23">(<argument><expr><operator pos:line="1443" pos:column="24">&amp;<pos:position pos:line="1443" pos:column="29"/></operator><name pos:line="1443" pos:column="25">rev_info<pos:position pos:line="1443" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="1443" pos:column="35">NULL<pos:position pos:line="1443" pos:column="39"/></name></expr></argument>)<pos:position pos:line="1443" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1443" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1444" pos:column="9">rev_info<pos:position pos:line="1444" pos:column="17"/></name><operator pos:line="1444" pos:column="17">.<pos:position pos:line="1444" pos:column="18"/></operator><name pos:line="1444" pos:column="18">diff<pos:position pos:line="1444" pos:column="22"/></name></name> <operator pos:line="1444" pos:column="23">=<pos:position pos:line="1444" pos:column="24"/></operator> <literal type="number" pos:line="1444" pos:column="25">1<pos:position pos:line="1444" pos:column="26"/></literal></expr>;<pos:position pos:line="1444" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1445" pos:column="9">rev_info<pos:position pos:line="1445" pos:column="17"/></name><operator pos:line="1445" pos:column="17">.<pos:position pos:line="1445" pos:column="18"/></operator><name pos:line="1445" pos:column="18">abbrev<pos:position pos:line="1445" pos:column="24"/></name></name> <operator pos:line="1445" pos:column="25">=<pos:position pos:line="1445" pos:column="26"/></operator> <literal type="number" pos:line="1445" pos:column="27">0<pos:position pos:line="1445" pos:column="28"/></literal></expr>;<pos:position pos:line="1445" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1446" pos:column="9">rev_info<pos:position pos:line="1446" pos:column="17"/></name><operator pos:line="1446" pos:column="17">.<pos:position pos:line="1446" pos:column="18"/></operator><name pos:line="1446" pos:column="18">disable_stdin<pos:position pos:line="1446" pos:column="31"/></name></name> <operator pos:line="1446" pos:column="32">=<pos:position pos:line="1446" pos:column="33"/></operator> <literal type="number" pos:line="1446" pos:column="34">1<pos:position pos:line="1446" pos:column="35"/></literal></expr>;<pos:position pos:line="1446" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1447" pos:column="9">rev_info<pos:position pos:line="1447" pos:column="17"/></name><operator pos:line="1447" pos:column="17">.<pos:position pos:line="1447" pos:column="18"/></operator><name pos:line="1447" pos:column="18">show_root_diff<pos:position pos:line="1447" pos:column="32"/></name></name> <operator pos:line="1447" pos:column="33">=<pos:position pos:line="1447" pos:column="34"/></operator> <literal type="number" pos:line="1447" pos:column="35">1<pos:position pos:line="1447" pos:column="36"/></literal></expr>;<pos:position pos:line="1447" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1448" pos:column="9">rev_info<pos:position pos:line="1448" pos:column="17"/></name><operator pos:line="1448" pos:column="17">.<pos:position pos:line="1448" pos:column="18"/></operator><name pos:line="1448" pos:column="18">diffopt<pos:position pos:line="1448" pos:column="25"/></name><operator pos:line="1448" pos:column="25">.<pos:position pos:line="1448" pos:column="26"/></operator><name pos:line="1448" pos:column="26">output_format<pos:position pos:line="1448" pos:column="39"/></name></name> <operator pos:line="1448" pos:column="40">=<pos:position pos:line="1448" pos:column="41"/></operator> <name pos:line="1448" pos:column="42">DIFF_FORMAT_PATCH<pos:position pos:line="1448" pos:column="59"/></name></expr>;<pos:position pos:line="1448" pos:column="60"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1449" pos:column="9">rev_info<pos:position pos:line="1449" pos:column="17"/></name><operator pos:line="1449" pos:column="17">.<pos:position pos:line="1449" pos:column="18"/></operator><name pos:line="1449" pos:column="18">no_commit_id<pos:position pos:line="1449" pos:column="30"/></name></name> <operator pos:line="1449" pos:column="31">=<pos:position pos:line="1449" pos:column="32"/></operator> <literal type="number" pos:line="1449" pos:column="33">1<pos:position pos:line="1449" pos:column="34"/></literal></expr>;<pos:position pos:line="1449" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1450" pos:column="9">DIFF_OPT_SET<pos:position pos:line="1450" pos:column="21"/></name><argument_list pos:line="1450" pos:column="21">(<argument><expr><operator pos:line="1450" pos:column="22">&amp;<pos:position pos:line="1450" pos:column="27"/></operator><name><name pos:line="1450" pos:column="23">rev_info<pos:position pos:line="1450" pos:column="31"/></name><operator pos:line="1450" pos:column="31">.<pos:position pos:line="1450" pos:column="32"/></operator><name pos:line="1450" pos:column="32">diffopt<pos:position pos:line="1450" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="1450" pos:column="41">BINARY<pos:position pos:line="1450" pos:column="47"/></name></expr></argument>)<pos:position pos:line="1450" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1450" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1451" pos:column="9">DIFF_OPT_SET<pos:position pos:line="1451" pos:column="21"/></name><argument_list pos:line="1451" pos:column="21">(<argument><expr><operator pos:line="1451" pos:column="22">&amp;<pos:position pos:line="1451" pos:column="27"/></operator><name><name pos:line="1451" pos:column="23">rev_info<pos:position pos:line="1451" pos:column="31"/></name><operator pos:line="1451" pos:column="31">.<pos:position pos:line="1451" pos:column="32"/></operator><name pos:line="1451" pos:column="32">diffopt<pos:position pos:line="1451" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="1451" pos:column="41">FULL_INDEX<pos:position pos:line="1451" pos:column="51"/></name></expr></argument>)<pos:position pos:line="1451" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="1451" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1452" pos:column="9">rev_info<pos:position pos:line="1452" pos:column="17"/></name><operator pos:line="1452" pos:column="17">.<pos:position pos:line="1452" pos:column="18"/></operator><name pos:line="1452" pos:column="18">diffopt<pos:position pos:line="1452" pos:column="25"/></name><operator pos:line="1452" pos:column="25">.<pos:position pos:line="1452" pos:column="26"/></operator><name pos:line="1452" pos:column="26">use_color<pos:position pos:line="1452" pos:column="35"/></name></name> <operator pos:line="1452" pos:column="36">=<pos:position pos:line="1452" pos:column="37"/></operator> <literal type="number" pos:line="1452" pos:column="38">0<pos:position pos:line="1452" pos:column="39"/></literal></expr>;<pos:position pos:line="1452" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1453" pos:column="9">rev_info<pos:position pos:line="1453" pos:column="17"/></name><operator pos:line="1453" pos:column="17">.<pos:position pos:line="1453" pos:column="18"/></operator><name pos:line="1453" pos:column="18">diffopt<pos:position pos:line="1453" pos:column="25"/></name><operator pos:line="1453" pos:column="25">.<pos:position pos:line="1453" pos:column="26"/></operator><name pos:line="1453" pos:column="26">file<pos:position pos:line="1453" pos:column="30"/></name></name> <operator pos:line="1453" pos:column="31">=<pos:position pos:line="1453" pos:column="32"/></operator> <name pos:line="1453" pos:column="33">fp<pos:position pos:line="1453" pos:column="35"/></name></expr>;<pos:position pos:line="1453" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1454" pos:column="9">rev_info<pos:position pos:line="1454" pos:column="17"/></name><operator pos:line="1454" pos:column="17">.<pos:position pos:line="1454" pos:column="18"/></operator><name pos:line="1454" pos:column="18">diffopt<pos:position pos:line="1454" pos:column="25"/></name><operator pos:line="1454" pos:column="25">.<pos:position pos:line="1454" pos:column="26"/></operator><name pos:line="1454" pos:column="26">close_file<pos:position pos:line="1454" pos:column="36"/></name></name> <operator pos:line="1454" pos:column="37">=<pos:position pos:line="1454" pos:column="38"/></operator> <literal type="number" pos:line="1454" pos:column="39">1<pos:position pos:line="1454" pos:column="40"/></literal></expr>;<pos:position pos:line="1454" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1455" pos:column="9">add_pending_object<pos:position pos:line="1455" pos:column="27"/></name><argument_list pos:line="1455" pos:column="27">(<argument><expr><operator pos:line="1455" pos:column="28">&amp;<pos:position pos:line="1455" pos:column="33"/></operator><name pos:line="1455" pos:column="29">rev_info<pos:position pos:line="1455" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="1455" pos:column="39">&amp;<pos:position pos:line="1455" pos:column="44"/></operator><name><name pos:line="1455" pos:column="40">commit<pos:position pos:line="1455" pos:column="46"/></name><operator pos:line="1455" pos:column="46">-&gt;<pos:position pos:line="1455" pos:column="51"/></operator><name pos:line="1455" pos:column="48">object<pos:position pos:line="1455" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1455" pos:column="56">""<pos:position pos:line="1455" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="1455" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="1455" pos:column="60"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1456" pos:column="9">diff_setup_done<pos:position pos:line="1456" pos:column="24"/></name><argument_list pos:line="1456" pos:column="24">(<argument><expr><operator pos:line="1456" pos:column="25">&amp;<pos:position pos:line="1456" pos:column="30"/></operator><name><name pos:line="1456" pos:column="26">rev_info<pos:position pos:line="1456" pos:column="34"/></name><operator pos:line="1456" pos:column="34">.<pos:position pos:line="1456" pos:column="35"/></operator><name pos:line="1456" pos:column="35">diffopt<pos:position pos:line="1456" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="1456" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1456" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1457" pos:column="9">log_tree_commit<pos:position pos:line="1457" pos:column="24"/></name><argument_list pos:line="1457" pos:column="24">(<argument><expr><operator pos:line="1457" pos:column="25">&amp;<pos:position pos:line="1457" pos:column="30"/></operator><name pos:line="1457" pos:column="26">rev_info<pos:position pos:line="1457" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="1457" pos:column="36">commit<pos:position pos:line="1457" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1457" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1457" pos:column="44"/></expr_stmt>
}<pos:position pos:line="1458" pos:column="2"/></block></function>

<comment type="block" pos:line="1460" pos:column="1">/**
 * Writes the diff of the index against HEAD as a patch to the state
 * directory's "patch" file.
 */</comment>
<function><specifier pos:line="1464" pos:column="1">static<pos:position pos:line="1464" pos:column="7"/></specifier> <type><name pos:line="1464" pos:column="8">void<pos:position pos:line="1464" pos:column="12"/></name></type> <name pos:line="1464" pos:column="13">write_index_patch<pos:position pos:line="1464" pos:column="30"/></name><parameter_list pos:line="1464" pos:column="30">(<parameter><decl><type><specifier pos:line="1464" pos:column="31">const<pos:position pos:line="1464" pos:column="36"/></specifier> <name><name pos:line="1464" pos:column="37">struct<pos:position pos:line="1464" pos:column="43"/></name> <name pos:line="1464" pos:column="44">am_state<pos:position pos:line="1464" pos:column="52"/></name></name> <modifier pos:line="1464" pos:column="53">*<pos:position pos:line="1464" pos:column="54"/></modifier></type><name pos:line="1464" pos:column="54">state<pos:position pos:line="1464" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1464" pos:column="60"/></parameter_list>
<block pos:line="1465" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="1466" pos:column="9">struct<pos:position pos:line="1466" pos:column="15"/></name> <name pos:line="1466" pos:column="16">tree<pos:position pos:line="1466" pos:column="20"/></name></name> <modifier pos:line="1466" pos:column="21">*<pos:position pos:line="1466" pos:column="22"/></modifier></type><name pos:line="1466" pos:column="22">tree<pos:position pos:line="1466" pos:column="26"/></name></decl>;<pos:position pos:line="1466" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="1467" pos:column="9">unsigned<pos:position pos:line="1467" pos:column="17"/></name> <name pos:line="1467" pos:column="18">char<pos:position pos:line="1467" pos:column="22"/></name></type> <name><name pos:line="1467" pos:column="23">head<pos:position pos:line="1467" pos:column="27"/></name><index pos:line="1467" pos:column="27">[<expr><name pos:line="1467" pos:column="28">GIT_SHA1_RAWSZ<pos:position pos:line="1467" pos:column="42"/></name></expr>]<pos:position pos:line="1467" pos:column="43"/></index></name></decl>;<pos:position pos:line="1467" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1468" pos:column="9">struct<pos:position pos:line="1468" pos:column="15"/></name> <name pos:line="1468" pos:column="16">rev_info<pos:position pos:line="1468" pos:column="24"/></name></name></type> <name pos:line="1468" pos:column="25">rev_info<pos:position pos:line="1468" pos:column="33"/></name></decl>;<pos:position pos:line="1468" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="1469" pos:column="9">FILE<pos:position pos:line="1469" pos:column="13"/></name> <modifier pos:line="1469" pos:column="14">*<pos:position pos:line="1469" pos:column="15"/></modifier></type><name pos:line="1469" pos:column="15">fp<pos:position pos:line="1469" pos:column="17"/></name></decl>;<pos:position pos:line="1469" pos:column="18"/></decl_stmt>

	<if pos:line="1471" pos:column="9">if <condition pos:line="1471" pos:column="12">(<expr><operator pos:line="1471" pos:column="13">!<pos:position pos:line="1471" pos:column="14"/></operator><call><name pos:line="1471" pos:column="14">get_sha1_tree<pos:position pos:line="1471" pos:column="27"/></name><argument_list pos:line="1471" pos:column="27">(<argument><expr><literal type="string" pos:line="1471" pos:column="28">"HEAD"<pos:position pos:line="1471" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="1471" pos:column="36">head<pos:position pos:line="1471" pos:column="40"/></name></expr></argument>)<pos:position pos:line="1471" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="1471" pos:column="42"/></condition><then pos:line="1471" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><name pos:line="1472" pos:column="17">tree<pos:position pos:line="1472" pos:column="21"/></name> <operator pos:line="1472" pos:column="22">=<pos:position pos:line="1472" pos:column="23"/></operator> <call><name pos:line="1472" pos:column="24">lookup_tree<pos:position pos:line="1472" pos:column="35"/></name><argument_list pos:line="1472" pos:column="35">(<argument><expr><name pos:line="1472" pos:column="36">head<pos:position pos:line="1472" pos:column="40"/></name></expr></argument>)<pos:position pos:line="1472" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="1472" pos:column="42"/></expr_stmt></block></then>
	<else pos:line="1473" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="1474" pos:column="17">tree<pos:position pos:line="1474" pos:column="21"/></name> <operator pos:line="1474" pos:column="22">=<pos:position pos:line="1474" pos:column="23"/></operator> <call><name pos:line="1474" pos:column="24">lookup_tree<pos:position pos:line="1474" pos:column="35"/></name><argument_list pos:line="1474" pos:column="35">(<argument><expr><name pos:line="1474" pos:column="36">EMPTY_TREE_SHA1_BIN<pos:position pos:line="1474" pos:column="55"/></name></expr></argument>)<pos:position pos:line="1474" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1474" pos:column="57"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name pos:line="1476" pos:column="9">fp<pos:position pos:line="1476" pos:column="11"/></name> <operator pos:line="1476" pos:column="12">=<pos:position pos:line="1476" pos:column="13"/></operator> <call><name pos:line="1476" pos:column="14">xfopen<pos:position pos:line="1476" pos:column="20"/></name><argument_list pos:line="1476" pos:column="20">(<argument><expr><call><name pos:line="1476" pos:column="21">am_path<pos:position pos:line="1476" pos:column="28"/></name><argument_list pos:line="1476" pos:column="28">(<argument><expr><name pos:line="1476" pos:column="29">state<pos:position pos:line="1476" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1476" pos:column="36">"patch"<pos:position pos:line="1476" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="1476" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="1476" pos:column="46">"w"<pos:position pos:line="1476" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="1476" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="1476" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1477" pos:column="9">init_revisions<pos:position pos:line="1477" pos:column="23"/></name><argument_list pos:line="1477" pos:column="23">(<argument><expr><operator pos:line="1477" pos:column="24">&amp;<pos:position pos:line="1477" pos:column="29"/></operator><name pos:line="1477" pos:column="25">rev_info<pos:position pos:line="1477" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="1477" pos:column="35">NULL<pos:position pos:line="1477" pos:column="39"/></name></expr></argument>)<pos:position pos:line="1477" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1477" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1478" pos:column="9">rev_info<pos:position pos:line="1478" pos:column="17"/></name><operator pos:line="1478" pos:column="17">.<pos:position pos:line="1478" pos:column="18"/></operator><name pos:line="1478" pos:column="18">diff<pos:position pos:line="1478" pos:column="22"/></name></name> <operator pos:line="1478" pos:column="23">=<pos:position pos:line="1478" pos:column="24"/></operator> <literal type="number" pos:line="1478" pos:column="25">1<pos:position pos:line="1478" pos:column="26"/></literal></expr>;<pos:position pos:line="1478" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1479" pos:column="9">rev_info<pos:position pos:line="1479" pos:column="17"/></name><operator pos:line="1479" pos:column="17">.<pos:position pos:line="1479" pos:column="18"/></operator><name pos:line="1479" pos:column="18">disable_stdin<pos:position pos:line="1479" pos:column="31"/></name></name> <operator pos:line="1479" pos:column="32">=<pos:position pos:line="1479" pos:column="33"/></operator> <literal type="number" pos:line="1479" pos:column="34">1<pos:position pos:line="1479" pos:column="35"/></literal></expr>;<pos:position pos:line="1479" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1480" pos:column="9">rev_info<pos:position pos:line="1480" pos:column="17"/></name><operator pos:line="1480" pos:column="17">.<pos:position pos:line="1480" pos:column="18"/></operator><name pos:line="1480" pos:column="18">no_commit_id<pos:position pos:line="1480" pos:column="30"/></name></name> <operator pos:line="1480" pos:column="31">=<pos:position pos:line="1480" pos:column="32"/></operator> <literal type="number" pos:line="1480" pos:column="33">1<pos:position pos:line="1480" pos:column="34"/></literal></expr>;<pos:position pos:line="1480" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1481" pos:column="9">rev_info<pos:position pos:line="1481" pos:column="17"/></name><operator pos:line="1481" pos:column="17">.<pos:position pos:line="1481" pos:column="18"/></operator><name pos:line="1481" pos:column="18">diffopt<pos:position pos:line="1481" pos:column="25"/></name><operator pos:line="1481" pos:column="25">.<pos:position pos:line="1481" pos:column="26"/></operator><name pos:line="1481" pos:column="26">output_format<pos:position pos:line="1481" pos:column="39"/></name></name> <operator pos:line="1481" pos:column="40">=<pos:position pos:line="1481" pos:column="41"/></operator> <name pos:line="1481" pos:column="42">DIFF_FORMAT_PATCH<pos:position pos:line="1481" pos:column="59"/></name></expr>;<pos:position pos:line="1481" pos:column="60"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1482" pos:column="9">rev_info<pos:position pos:line="1482" pos:column="17"/></name><operator pos:line="1482" pos:column="17">.<pos:position pos:line="1482" pos:column="18"/></operator><name pos:line="1482" pos:column="18">diffopt<pos:position pos:line="1482" pos:column="25"/></name><operator pos:line="1482" pos:column="25">.<pos:position pos:line="1482" pos:column="26"/></operator><name pos:line="1482" pos:column="26">use_color<pos:position pos:line="1482" pos:column="35"/></name></name> <operator pos:line="1482" pos:column="36">=<pos:position pos:line="1482" pos:column="37"/></operator> <literal type="number" pos:line="1482" pos:column="38">0<pos:position pos:line="1482" pos:column="39"/></literal></expr>;<pos:position pos:line="1482" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1483" pos:column="9">rev_info<pos:position pos:line="1483" pos:column="17"/></name><operator pos:line="1483" pos:column="17">.<pos:position pos:line="1483" pos:column="18"/></operator><name pos:line="1483" pos:column="18">diffopt<pos:position pos:line="1483" pos:column="25"/></name><operator pos:line="1483" pos:column="25">.<pos:position pos:line="1483" pos:column="26"/></operator><name pos:line="1483" pos:column="26">file<pos:position pos:line="1483" pos:column="30"/></name></name> <operator pos:line="1483" pos:column="31">=<pos:position pos:line="1483" pos:column="32"/></operator> <name pos:line="1483" pos:column="33">fp<pos:position pos:line="1483" pos:column="35"/></name></expr>;<pos:position pos:line="1483" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1484" pos:column="9">rev_info<pos:position pos:line="1484" pos:column="17"/></name><operator pos:line="1484" pos:column="17">.<pos:position pos:line="1484" pos:column="18"/></operator><name pos:line="1484" pos:column="18">diffopt<pos:position pos:line="1484" pos:column="25"/></name><operator pos:line="1484" pos:column="25">.<pos:position pos:line="1484" pos:column="26"/></operator><name pos:line="1484" pos:column="26">close_file<pos:position pos:line="1484" pos:column="36"/></name></name> <operator pos:line="1484" pos:column="37">=<pos:position pos:line="1484" pos:column="38"/></operator> <literal type="number" pos:line="1484" pos:column="39">1<pos:position pos:line="1484" pos:column="40"/></literal></expr>;<pos:position pos:line="1484" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1485" pos:column="9">add_pending_object<pos:position pos:line="1485" pos:column="27"/></name><argument_list pos:line="1485" pos:column="27">(<argument><expr><operator pos:line="1485" pos:column="28">&amp;<pos:position pos:line="1485" pos:column="33"/></operator><name pos:line="1485" pos:column="29">rev_info<pos:position pos:line="1485" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="1485" pos:column="39">&amp;<pos:position pos:line="1485" pos:column="44"/></operator><name><name pos:line="1485" pos:column="40">tree<pos:position pos:line="1485" pos:column="44"/></name><operator pos:line="1485" pos:column="44">-&gt;<pos:position pos:line="1485" pos:column="49"/></operator><name pos:line="1485" pos:column="46">object<pos:position pos:line="1485" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1485" pos:column="54">""<pos:position pos:line="1485" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="1485" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1485" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1486" pos:column="9">diff_setup_done<pos:position pos:line="1486" pos:column="24"/></name><argument_list pos:line="1486" pos:column="24">(<argument><expr><operator pos:line="1486" pos:column="25">&amp;<pos:position pos:line="1486" pos:column="30"/></operator><name><name pos:line="1486" pos:column="26">rev_info<pos:position pos:line="1486" pos:column="34"/></name><operator pos:line="1486" pos:column="34">.<pos:position pos:line="1486" pos:column="35"/></operator><name pos:line="1486" pos:column="35">diffopt<pos:position pos:line="1486" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="1486" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1486" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1487" pos:column="9">run_diff_index<pos:position pos:line="1487" pos:column="23"/></name><argument_list pos:line="1487" pos:column="23">(<argument><expr><operator pos:line="1487" pos:column="24">&amp;<pos:position pos:line="1487" pos:column="29"/></operator><name pos:line="1487" pos:column="25">rev_info<pos:position pos:line="1487" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1487" pos:column="35">1<pos:position pos:line="1487" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="1487" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1487" pos:column="38"/></expr_stmt>
}<pos:position pos:line="1488" pos:column="2"/></block></function>

<comment type="block" pos:line="1490" pos:column="1">/**
 * Like parse_mail(), but parses the mail by looking up its commit ID
 * directly. This is used in --rebasing mode to bypass git-mailinfo's munging
 * of patches.
 *
 * state-&gt;orig_commit will be set to the original commit ID.
 *
 * Will always return 0 as the patch should never be skipped.
 */</comment>
<function><specifier pos:line="1499" pos:column="1">static<pos:position pos:line="1499" pos:column="7"/></specifier> <type><name pos:line="1499" pos:column="8">int<pos:position pos:line="1499" pos:column="11"/></name></type> <name pos:line="1499" pos:column="12">parse_mail_rebase<pos:position pos:line="1499" pos:column="29"/></name><parameter_list pos:line="1499" pos:column="29">(<parameter><decl><type><name><name pos:line="1499" pos:column="30">struct<pos:position pos:line="1499" pos:column="36"/></name> <name pos:line="1499" pos:column="37">am_state<pos:position pos:line="1499" pos:column="45"/></name></name> <modifier pos:line="1499" pos:column="46">*<pos:position pos:line="1499" pos:column="47"/></modifier></type><name pos:line="1499" pos:column="47">state<pos:position pos:line="1499" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1499" pos:column="54">const<pos:position pos:line="1499" pos:column="59"/></specifier> <name pos:line="1499" pos:column="60">char<pos:position pos:line="1499" pos:column="64"/></name> <modifier pos:line="1499" pos:column="65">*<pos:position pos:line="1499" pos:column="66"/></modifier></type><name pos:line="1499" pos:column="66">mail<pos:position pos:line="1499" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1499" pos:column="71"/></parameter_list>
<block pos:line="1500" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="1501" pos:column="9">struct<pos:position pos:line="1501" pos:column="15"/></name> <name pos:line="1501" pos:column="16">commit<pos:position pos:line="1501" pos:column="22"/></name></name> <modifier pos:line="1501" pos:column="23">*<pos:position pos:line="1501" pos:column="24"/></modifier></type><name pos:line="1501" pos:column="24">commit<pos:position pos:line="1501" pos:column="30"/></name></decl>;<pos:position pos:line="1501" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="1502" pos:column="9">unsigned<pos:position pos:line="1502" pos:column="17"/></name> <name pos:line="1502" pos:column="18">char<pos:position pos:line="1502" pos:column="22"/></name></type> <name><name pos:line="1502" pos:column="23">commit_sha1<pos:position pos:line="1502" pos:column="34"/></name><index pos:line="1502" pos:column="34">[<expr><name pos:line="1502" pos:column="35">GIT_SHA1_RAWSZ<pos:position pos:line="1502" pos:column="49"/></name></expr>]<pos:position pos:line="1502" pos:column="50"/></index></name></decl>;<pos:position pos:line="1502" pos:column="51"/></decl_stmt>

	<if pos:line="1504" pos:column="9">if <condition pos:line="1504" pos:column="12">(<expr><call><name pos:line="1504" pos:column="13">get_mail_commit_sha1<pos:position pos:line="1504" pos:column="33"/></name><argument_list pos:line="1504" pos:column="33">(<argument><expr><name pos:line="1504" pos:column="34">commit_sha1<pos:position pos:line="1504" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="1504" pos:column="47">mail<pos:position pos:line="1504" pos:column="51"/></name></expr></argument>)<pos:position pos:line="1504" pos:column="52"/></argument_list></call> <operator pos:line="1504" pos:column="53">&lt;<pos:position pos:line="1504" pos:column="57"/></operator> <literal type="number" pos:line="1504" pos:column="55">0<pos:position pos:line="1504" pos:column="56"/></literal></expr>)<pos:position pos:line="1504" pos:column="57"/></condition><then pos:line="1504" pos:column="57">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1505" pos:column="17">die<pos:position pos:line="1505" pos:column="20"/></name><argument_list pos:line="1505" pos:column="20">(<argument><expr><call><name pos:line="1505" pos:column="21">_<pos:position pos:line="1505" pos:column="22"/></name><argument_list pos:line="1505" pos:column="22">(<argument><expr><literal type="string" pos:line="1505" pos:column="23">"could not parse %s"<pos:position pos:line="1505" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="1505" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="1505" pos:column="46">mail<pos:position pos:line="1505" pos:column="50"/></name></expr></argument>)<pos:position pos:line="1505" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1505" pos:column="52"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="1507" pos:column="9">commit<pos:position pos:line="1507" pos:column="15"/></name> <operator pos:line="1507" pos:column="16">=<pos:position pos:line="1507" pos:column="17"/></operator> <call><name pos:line="1507" pos:column="18">lookup_commit_or_die<pos:position pos:line="1507" pos:column="38"/></name><argument_list pos:line="1507" pos:column="38">(<argument><expr><name pos:line="1507" pos:column="39">commit_sha1<pos:position pos:line="1507" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="1507" pos:column="52">mail<pos:position pos:line="1507" pos:column="56"/></name></expr></argument>)<pos:position pos:line="1507" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1507" pos:column="58"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1509" pos:column="9">get_commit_info<pos:position pos:line="1509" pos:column="24"/></name><argument_list pos:line="1509" pos:column="24">(<argument><expr><name pos:line="1509" pos:column="25">state<pos:position pos:line="1509" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="1509" pos:column="32">commit<pos:position pos:line="1509" pos:column="38"/></name></expr></argument>)<pos:position pos:line="1509" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="1509" pos:column="40"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1511" pos:column="9">write_commit_patch<pos:position pos:line="1511" pos:column="27"/></name><argument_list pos:line="1511" pos:column="27">(<argument><expr><name pos:line="1511" pos:column="28">state<pos:position pos:line="1511" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="1511" pos:column="35">commit<pos:position pos:line="1511" pos:column="41"/></name></expr></argument>)<pos:position pos:line="1511" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1511" pos:column="43"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1513" pos:column="9">hashcpy<pos:position pos:line="1513" pos:column="16"/></name><argument_list pos:line="1513" pos:column="16">(<argument><expr><name><name pos:line="1513" pos:column="17">state<pos:position pos:line="1513" pos:column="22"/></name><operator pos:line="1513" pos:column="22">-&gt;<pos:position pos:line="1513" pos:column="27"/></operator><name pos:line="1513" pos:column="24">orig_commit<pos:position pos:line="1513" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="1513" pos:column="37">commit_sha1<pos:position pos:line="1513" pos:column="48"/></name></expr></argument>)<pos:position pos:line="1513" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="1513" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1514" pos:column="9">write_state_text<pos:position pos:line="1514" pos:column="25"/></name><argument_list pos:line="1514" pos:column="25">(<argument><expr><name pos:line="1514" pos:column="26">state<pos:position pos:line="1514" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1514" pos:column="33">"original-commit"<pos:position pos:line="1514" pos:column="50"/></literal></expr></argument>, <argument><expr><call><name pos:line="1514" pos:column="52">sha1_to_hex<pos:position pos:line="1514" pos:column="63"/></name><argument_list pos:line="1514" pos:column="63">(<argument><expr><name pos:line="1514" pos:column="64">commit_sha1<pos:position pos:line="1514" pos:column="75"/></name></expr></argument>)<pos:position pos:line="1514" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="1514" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="1514" pos:column="78"/></expr_stmt>

	<return pos:line="1516" pos:column="9">return <expr><literal type="number" pos:line="1516" pos:column="16">0<pos:position pos:line="1516" pos:column="17"/></literal></expr>;<pos:position pos:line="1516" pos:column="18"/></return>
}<pos:position pos:line="1517" pos:column="2"/></block></function>

<comment type="block" pos:line="1519" pos:column="1">/**
 * Applies current patch with git-apply. Returns 0 on success, -1 otherwise. If
 * `index_file` is not NULL, the patch will be applied to that index.
 */</comment>
<function><specifier pos:line="1523" pos:column="1">static<pos:position pos:line="1523" pos:column="7"/></specifier> <type><name pos:line="1523" pos:column="8">int<pos:position pos:line="1523" pos:column="11"/></name></type> <name pos:line="1523" pos:column="12">run_apply<pos:position pos:line="1523" pos:column="21"/></name><parameter_list pos:line="1523" pos:column="21">(<parameter><decl><type><specifier pos:line="1523" pos:column="22">const<pos:position pos:line="1523" pos:column="27"/></specifier> <name><name pos:line="1523" pos:column="28">struct<pos:position pos:line="1523" pos:column="34"/></name> <name pos:line="1523" pos:column="35">am_state<pos:position pos:line="1523" pos:column="43"/></name></name> <modifier pos:line="1523" pos:column="44">*<pos:position pos:line="1523" pos:column="45"/></modifier></type><name pos:line="1523" pos:column="45">state<pos:position pos:line="1523" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1523" pos:column="52">const<pos:position pos:line="1523" pos:column="57"/></specifier> <name pos:line="1523" pos:column="58">char<pos:position pos:line="1523" pos:column="62"/></name> <modifier pos:line="1523" pos:column="63">*<pos:position pos:line="1523" pos:column="64"/></modifier></type><name pos:line="1523" pos:column="64">index_file<pos:position pos:line="1523" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1523" pos:column="75"/></parameter_list>
<block pos:line="1524" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="1525" pos:column="9">struct<pos:position pos:line="1525" pos:column="15"/></name> <name pos:line="1525" pos:column="16">child_process<pos:position pos:line="1525" pos:column="29"/></name></name></type> <name pos:line="1525" pos:column="30">cp<pos:position pos:line="1525" pos:column="32"/></name> <init pos:line="1525" pos:column="33">= <expr><name pos:line="1525" pos:column="35">CHILD_PROCESS_INIT<pos:position pos:line="1525" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="1525" pos:column="54"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="1527" pos:column="9">cp<pos:position pos:line="1527" pos:column="11"/></name><operator pos:line="1527" pos:column="11">.<pos:position pos:line="1527" pos:column="12"/></operator><name pos:line="1527" pos:column="12">git_cmd<pos:position pos:line="1527" pos:column="19"/></name></name> <operator pos:line="1527" pos:column="20">=<pos:position pos:line="1527" pos:column="21"/></operator> <literal type="number" pos:line="1527" pos:column="22">1<pos:position pos:line="1527" pos:column="23"/></literal></expr>;<pos:position pos:line="1527" pos:column="24"/></expr_stmt>

	<if pos:line="1529" pos:column="9">if <condition pos:line="1529" pos:column="12">(<expr><name pos:line="1529" pos:column="13">index_file<pos:position pos:line="1529" pos:column="23"/></name></expr>)<pos:position pos:line="1529" pos:column="24"/></condition><then pos:line="1529" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1530" pos:column="17">argv_array_pushf<pos:position pos:line="1530" pos:column="33"/></name><argument_list pos:line="1530" pos:column="33">(<argument><expr><operator pos:line="1530" pos:column="34">&amp;<pos:position pos:line="1530" pos:column="39"/></operator><name><name pos:line="1530" pos:column="35">cp<pos:position pos:line="1530" pos:column="37"/></name><operator pos:line="1530" pos:column="37">.<pos:position pos:line="1530" pos:column="38"/></operator><name pos:line="1530" pos:column="38">env_array<pos:position pos:line="1530" pos:column="47"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1530" pos:column="49">"GIT_INDEX_FILE=%s"<pos:position pos:line="1530" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="1530" pos:column="70">index_file<pos:position pos:line="1530" pos:column="80"/></name></expr></argument>)<pos:position pos:line="1530" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="1530" pos:column="82"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="1532" pos:column="9">/*
	 * If we are allowed to fall back on 3-way merge, don't give false
	 * errors during the initial attempt.
	 */</comment>
	<if pos:line="1536" pos:column="9">if <condition pos:line="1536" pos:column="12">(<expr><name><name pos:line="1536" pos:column="13">state<pos:position pos:line="1536" pos:column="18"/></name><operator pos:line="1536" pos:column="18">-&gt;<pos:position pos:line="1536" pos:column="23"/></operator><name pos:line="1536" pos:column="20">threeway<pos:position pos:line="1536" pos:column="28"/></name></name> <operator pos:line="1536" pos:column="29">&amp;&amp;<pos:position pos:line="1536" pos:column="39"/></operator> <operator pos:line="1536" pos:column="32">!<pos:position pos:line="1536" pos:column="33"/></operator><name pos:line="1536" pos:column="33">index_file<pos:position pos:line="1536" pos:column="43"/></name></expr>)<pos:position pos:line="1536" pos:column="44"/></condition><then pos:line="1536" pos:column="44"> <block pos:line="1536" pos:column="45">{
		<expr_stmt><expr><name><name pos:line="1537" pos:column="17">cp<pos:position pos:line="1537" pos:column="19"/></name><operator pos:line="1537" pos:column="19">.<pos:position pos:line="1537" pos:column="20"/></operator><name pos:line="1537" pos:column="20">no_stdout<pos:position pos:line="1537" pos:column="29"/></name></name> <operator pos:line="1537" pos:column="30">=<pos:position pos:line="1537" pos:column="31"/></operator> <literal type="number" pos:line="1537" pos:column="32">1<pos:position pos:line="1537" pos:column="33"/></literal></expr>;<pos:position pos:line="1537" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="1538" pos:column="17">cp<pos:position pos:line="1538" pos:column="19"/></name><operator pos:line="1538" pos:column="19">.<pos:position pos:line="1538" pos:column="20"/></operator><name pos:line="1538" pos:column="20">no_stderr<pos:position pos:line="1538" pos:column="29"/></name></name> <operator pos:line="1538" pos:column="30">=<pos:position pos:line="1538" pos:column="31"/></operator> <literal type="number" pos:line="1538" pos:column="32">1<pos:position pos:line="1538" pos:column="33"/></literal></expr>;<pos:position pos:line="1538" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="1539" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="1541" pos:column="9">argv_array_push<pos:position pos:line="1541" pos:column="24"/></name><argument_list pos:line="1541" pos:column="24">(<argument><expr><operator pos:line="1541" pos:column="25">&amp;<pos:position pos:line="1541" pos:column="30"/></operator><name><name pos:line="1541" pos:column="26">cp<pos:position pos:line="1541" pos:column="28"/></name><operator pos:line="1541" pos:column="28">.<pos:position pos:line="1541" pos:column="29"/></operator><name pos:line="1541" pos:column="29">args<pos:position pos:line="1541" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1541" pos:column="35">"apply"<pos:position pos:line="1541" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="1541" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1541" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1543" pos:column="9">argv_array_pushv<pos:position pos:line="1543" pos:column="25"/></name><argument_list pos:line="1543" pos:column="25">(<argument><expr><operator pos:line="1543" pos:column="26">&amp;<pos:position pos:line="1543" pos:column="31"/></operator><name><name pos:line="1543" pos:column="27">cp<pos:position pos:line="1543" pos:column="29"/></name><operator pos:line="1543" pos:column="29">.<pos:position pos:line="1543" pos:column="30"/></operator><name pos:line="1543" pos:column="30">args<pos:position pos:line="1543" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="1543" pos:column="36">state<pos:position pos:line="1543" pos:column="41"/></name><operator pos:line="1543" pos:column="41">-&gt;<pos:position pos:line="1543" pos:column="46"/></operator><name pos:line="1543" pos:column="43">git_apply_opts<pos:position pos:line="1543" pos:column="57"/></name><operator pos:line="1543" pos:column="57">.<pos:position pos:line="1543" pos:column="58"/></operator><name pos:line="1543" pos:column="58">argv<pos:position pos:line="1543" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="1543" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="1543" pos:column="64"/></expr_stmt>

	<if pos:line="1545" pos:column="9">if <condition pos:line="1545" pos:column="12">(<expr><name pos:line="1545" pos:column="13">index_file<pos:position pos:line="1545" pos:column="23"/></name></expr>)<pos:position pos:line="1545" pos:column="24"/></condition><then pos:line="1545" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1546" pos:column="17">argv_array_push<pos:position pos:line="1546" pos:column="32"/></name><argument_list pos:line="1546" pos:column="32">(<argument><expr><operator pos:line="1546" pos:column="33">&amp;<pos:position pos:line="1546" pos:column="38"/></operator><name><name pos:line="1546" pos:column="34">cp<pos:position pos:line="1546" pos:column="36"/></name><operator pos:line="1546" pos:column="36">.<pos:position pos:line="1546" pos:column="37"/></operator><name pos:line="1546" pos:column="37">args<pos:position pos:line="1546" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1546" pos:column="43">"--cached"<pos:position pos:line="1546" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="1546" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="1546" pos:column="55"/></expr_stmt></block></then>
	<else pos:line="1547" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1548" pos:column="17">argv_array_push<pos:position pos:line="1548" pos:column="32"/></name><argument_list pos:line="1548" pos:column="32">(<argument><expr><operator pos:line="1548" pos:column="33">&amp;<pos:position pos:line="1548" pos:column="38"/></operator><name><name pos:line="1548" pos:column="34">cp<pos:position pos:line="1548" pos:column="36"/></name><operator pos:line="1548" pos:column="36">.<pos:position pos:line="1548" pos:column="37"/></operator><name pos:line="1548" pos:column="37">args<pos:position pos:line="1548" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1548" pos:column="43">"--index"<pos:position pos:line="1548" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="1548" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1548" pos:column="54"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="1550" pos:column="9">argv_array_push<pos:position pos:line="1550" pos:column="24"/></name><argument_list pos:line="1550" pos:column="24">(<argument><expr><operator pos:line="1550" pos:column="25">&amp;<pos:position pos:line="1550" pos:column="30"/></operator><name><name pos:line="1550" pos:column="26">cp<pos:position pos:line="1550" pos:column="28"/></name><operator pos:line="1550" pos:column="28">.<pos:position pos:line="1550" pos:column="29"/></operator><name pos:line="1550" pos:column="29">args<pos:position pos:line="1550" pos:column="33"/></name></name></expr></argument>, <argument><expr><call><name pos:line="1550" pos:column="35">am_path<pos:position pos:line="1550" pos:column="42"/></name><argument_list pos:line="1550" pos:column="42">(<argument><expr><name pos:line="1550" pos:column="43">state<pos:position pos:line="1550" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1550" pos:column="50">"patch"<pos:position pos:line="1550" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="1550" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="1550" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="1550" pos:column="60"/></expr_stmt>

	<if pos:line="1552" pos:column="9">if <condition pos:line="1552" pos:column="12">(<expr><call><name pos:line="1552" pos:column="13">run_command<pos:position pos:line="1552" pos:column="24"/></name><argument_list pos:line="1552" pos:column="24">(<argument><expr><operator pos:line="1552" pos:column="25">&amp;<pos:position pos:line="1552" pos:column="30"/></operator><name pos:line="1552" pos:column="26">cp<pos:position pos:line="1552" pos:column="28"/></name></expr></argument>)<pos:position pos:line="1552" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="1552" pos:column="30"/></condition><then pos:line="1552" pos:column="30">
		<block type="pseudo"><return pos:line="1553" pos:column="17">return <expr><operator pos:line="1553" pos:column="24">-<pos:position pos:line="1553" pos:column="25"/></operator><literal type="number" pos:line="1553" pos:column="25">1<pos:position pos:line="1553" pos:column="26"/></literal></expr>;<pos:position pos:line="1553" pos:column="27"/></return></block></then></if>

	<comment type="block" pos:line="1555" pos:column="9">/* Reload index as git-apply will have modified it. */</comment>
	<expr_stmt><expr><call><name pos:line="1556" pos:column="9">discard_cache<pos:position pos:line="1556" pos:column="22"/></name><argument_list pos:line="1556" pos:column="22">()<pos:position pos:line="1556" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="1556" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1557" pos:column="9">read_cache_from<pos:position pos:line="1557" pos:column="24"/></name><argument_list pos:line="1557" pos:column="24">(<argument><expr><ternary><condition><expr><name pos:line="1557" pos:column="25">index_file<pos:position pos:line="1557" pos:column="35"/></name></expr> ?<pos:position pos:line="1557" pos:column="37"/></condition><then pos:line="1557" pos:column="37"> <expr><name pos:line="1557" pos:column="38">index_file<pos:position pos:line="1557" pos:column="48"/></name></expr> <pos:position pos:line="1557" pos:column="49"/></then><else pos:line="1557" pos:column="49">: <expr><call><name pos:line="1557" pos:column="51">get_index_file<pos:position pos:line="1557" pos:column="65"/></name><argument_list pos:line="1557" pos:column="65">()<pos:position pos:line="1557" pos:column="67"/></argument_list></call></expr></else></ternary></expr></argument>)<pos:position pos:line="1557" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="1557" pos:column="69"/></expr_stmt>

	<return pos:line="1559" pos:column="9">return <expr><literal type="number" pos:line="1559" pos:column="16">0<pos:position pos:line="1559" pos:column="17"/></literal></expr>;<pos:position pos:line="1559" pos:column="18"/></return>
}<pos:position pos:line="1560" pos:column="2"/></block></function>

<comment type="block" pos:line="1562" pos:column="1">/**
 * Builds an index that contains just the blobs needed for a 3way merge.
 */</comment>
<function><specifier pos:line="1565" pos:column="1">static<pos:position pos:line="1565" pos:column="7"/></specifier> <type><name pos:line="1565" pos:column="8">int<pos:position pos:line="1565" pos:column="11"/></name></type> <name pos:line="1565" pos:column="12">build_fake_ancestor<pos:position pos:line="1565" pos:column="31"/></name><parameter_list pos:line="1565" pos:column="31">(<parameter><decl><type><specifier pos:line="1565" pos:column="32">const<pos:position pos:line="1565" pos:column="37"/></specifier> <name><name pos:line="1565" pos:column="38">struct<pos:position pos:line="1565" pos:column="44"/></name> <name pos:line="1565" pos:column="45">am_state<pos:position pos:line="1565" pos:column="53"/></name></name> <modifier pos:line="1565" pos:column="54">*<pos:position pos:line="1565" pos:column="55"/></modifier></type><name pos:line="1565" pos:column="55">state<pos:position pos:line="1565" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1565" pos:column="62">const<pos:position pos:line="1565" pos:column="67"/></specifier> <name pos:line="1565" pos:column="68">char<pos:position pos:line="1565" pos:column="72"/></name> <modifier pos:line="1565" pos:column="73">*<pos:position pos:line="1565" pos:column="74"/></modifier></type><name pos:line="1565" pos:column="74">index_file<pos:position pos:line="1565" pos:column="84"/></name></decl></parameter>)<pos:position pos:line="1565" pos:column="85"/></parameter_list>
<block pos:line="1566" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="1567" pos:column="9">struct<pos:position pos:line="1567" pos:column="15"/></name> <name pos:line="1567" pos:column="16">child_process<pos:position pos:line="1567" pos:column="29"/></name></name></type> <name pos:line="1567" pos:column="30">cp<pos:position pos:line="1567" pos:column="32"/></name> <init pos:line="1567" pos:column="33">= <expr><name pos:line="1567" pos:column="35">CHILD_PROCESS_INIT<pos:position pos:line="1567" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="1567" pos:column="54"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="1569" pos:column="9">cp<pos:position pos:line="1569" pos:column="11"/></name><operator pos:line="1569" pos:column="11">.<pos:position pos:line="1569" pos:column="12"/></operator><name pos:line="1569" pos:column="12">git_cmd<pos:position pos:line="1569" pos:column="19"/></name></name> <operator pos:line="1569" pos:column="20">=<pos:position pos:line="1569" pos:column="21"/></operator> <literal type="number" pos:line="1569" pos:column="22">1<pos:position pos:line="1569" pos:column="23"/></literal></expr>;<pos:position pos:line="1569" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1570" pos:column="9">argv_array_push<pos:position pos:line="1570" pos:column="24"/></name><argument_list pos:line="1570" pos:column="24">(<argument><expr><operator pos:line="1570" pos:column="25">&amp;<pos:position pos:line="1570" pos:column="30"/></operator><name><name pos:line="1570" pos:column="26">cp<pos:position pos:line="1570" pos:column="28"/></name><operator pos:line="1570" pos:column="28">.<pos:position pos:line="1570" pos:column="29"/></operator><name pos:line="1570" pos:column="29">args<pos:position pos:line="1570" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1570" pos:column="35">"apply"<pos:position pos:line="1570" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="1570" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1570" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1571" pos:column="9">argv_array_pushv<pos:position pos:line="1571" pos:column="25"/></name><argument_list pos:line="1571" pos:column="25">(<argument><expr><operator pos:line="1571" pos:column="26">&amp;<pos:position pos:line="1571" pos:column="31"/></operator><name><name pos:line="1571" pos:column="27">cp<pos:position pos:line="1571" pos:column="29"/></name><operator pos:line="1571" pos:column="29">.<pos:position pos:line="1571" pos:column="30"/></operator><name pos:line="1571" pos:column="30">args<pos:position pos:line="1571" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="1571" pos:column="36">state<pos:position pos:line="1571" pos:column="41"/></name><operator pos:line="1571" pos:column="41">-&gt;<pos:position pos:line="1571" pos:column="46"/></operator><name pos:line="1571" pos:column="43">git_apply_opts<pos:position pos:line="1571" pos:column="57"/></name><operator pos:line="1571" pos:column="57">.<pos:position pos:line="1571" pos:column="58"/></operator><name pos:line="1571" pos:column="58">argv<pos:position pos:line="1571" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="1571" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="1571" pos:column="64"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1572" pos:column="9">argv_array_pushf<pos:position pos:line="1572" pos:column="25"/></name><argument_list pos:line="1572" pos:column="25">(<argument><expr><operator pos:line="1572" pos:column="26">&amp;<pos:position pos:line="1572" pos:column="31"/></operator><name><name pos:line="1572" pos:column="27">cp<pos:position pos:line="1572" pos:column="29"/></name><operator pos:line="1572" pos:column="29">.<pos:position pos:line="1572" pos:column="30"/></operator><name pos:line="1572" pos:column="30">args<pos:position pos:line="1572" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1572" pos:column="36">"--build-fake-ancestor=%s"<pos:position pos:line="1572" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="1572" pos:column="64">index_file<pos:position pos:line="1572" pos:column="74"/></name></expr></argument>)<pos:position pos:line="1572" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="1572" pos:column="76"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1573" pos:column="9">argv_array_push<pos:position pos:line="1573" pos:column="24"/></name><argument_list pos:line="1573" pos:column="24">(<argument><expr><operator pos:line="1573" pos:column="25">&amp;<pos:position pos:line="1573" pos:column="30"/></operator><name><name pos:line="1573" pos:column="26">cp<pos:position pos:line="1573" pos:column="28"/></name><operator pos:line="1573" pos:column="28">.<pos:position pos:line="1573" pos:column="29"/></operator><name pos:line="1573" pos:column="29">args<pos:position pos:line="1573" pos:column="33"/></name></name></expr></argument>, <argument><expr><call><name pos:line="1573" pos:column="35">am_path<pos:position pos:line="1573" pos:column="42"/></name><argument_list pos:line="1573" pos:column="42">(<argument><expr><name pos:line="1573" pos:column="43">state<pos:position pos:line="1573" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1573" pos:column="50">"patch"<pos:position pos:line="1573" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="1573" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="1573" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="1573" pos:column="60"/></expr_stmt>

	<if pos:line="1575" pos:column="9">if <condition pos:line="1575" pos:column="12">(<expr><call><name pos:line="1575" pos:column="13">run_command<pos:position pos:line="1575" pos:column="24"/></name><argument_list pos:line="1575" pos:column="24">(<argument><expr><operator pos:line="1575" pos:column="25">&amp;<pos:position pos:line="1575" pos:column="30"/></operator><name pos:line="1575" pos:column="26">cp<pos:position pos:line="1575" pos:column="28"/></name></expr></argument>)<pos:position pos:line="1575" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="1575" pos:column="30"/></condition><then pos:line="1575" pos:column="30">
		<block type="pseudo"><return pos:line="1576" pos:column="17">return <expr><operator pos:line="1576" pos:column="24">-<pos:position pos:line="1576" pos:column="25"/></operator><literal type="number" pos:line="1576" pos:column="25">1<pos:position pos:line="1576" pos:column="26"/></literal></expr>;<pos:position pos:line="1576" pos:column="27"/></return></block></then></if>

	<return pos:line="1578" pos:column="9">return <expr><literal type="number" pos:line="1578" pos:column="16">0<pos:position pos:line="1578" pos:column="17"/></literal></expr>;<pos:position pos:line="1578" pos:column="18"/></return>
}<pos:position pos:line="1579" pos:column="2"/></block></function>

<comment type="block" pos:line="1581" pos:column="1">/**
 * Do the three-way merge using fake ancestor, his tree constructed
 * from the fake ancestor and the postimage of the patch, and our
 * state.
 */</comment>
<function><specifier pos:line="1586" pos:column="1">static<pos:position pos:line="1586" pos:column="7"/></specifier> <type><name pos:line="1586" pos:column="8">int<pos:position pos:line="1586" pos:column="11"/></name></type> <name pos:line="1586" pos:column="12">run_fallback_merge_recursive<pos:position pos:line="1586" pos:column="40"/></name><parameter_list pos:line="1586" pos:column="40">(<parameter><decl><type><specifier pos:line="1586" pos:column="41">const<pos:position pos:line="1586" pos:column="46"/></specifier> <name><name pos:line="1586" pos:column="47">struct<pos:position pos:line="1586" pos:column="53"/></name> <name pos:line="1586" pos:column="54">am_state<pos:position pos:line="1586" pos:column="62"/></name></name> <modifier pos:line="1586" pos:column="63">*<pos:position pos:line="1586" pos:column="64"/></modifier></type><name pos:line="1586" pos:column="64">state<pos:position pos:line="1586" pos:column="69"/></name></decl></parameter>,
					<parameter><decl><type><name pos:line="1587" pos:column="41">unsigned<pos:position pos:line="1587" pos:column="49"/></name> <name pos:line="1587" pos:column="50">char<pos:position pos:line="1587" pos:column="54"/></name> <modifier pos:line="1587" pos:column="55">*<pos:position pos:line="1587" pos:column="56"/></modifier></type><name pos:line="1587" pos:column="56">orig_tree<pos:position pos:line="1587" pos:column="65"/></name></decl></parameter>,
					<parameter><decl><type><name pos:line="1588" pos:column="41">unsigned<pos:position pos:line="1588" pos:column="49"/></name> <name pos:line="1588" pos:column="50">char<pos:position pos:line="1588" pos:column="54"/></name> <modifier pos:line="1588" pos:column="55">*<pos:position pos:line="1588" pos:column="56"/></modifier></type><name pos:line="1588" pos:column="56">our_tree<pos:position pos:line="1588" pos:column="64"/></name></decl></parameter>,
					<parameter><decl><type><name pos:line="1589" pos:column="41">unsigned<pos:position pos:line="1589" pos:column="49"/></name> <name pos:line="1589" pos:column="50">char<pos:position pos:line="1589" pos:column="54"/></name> <modifier pos:line="1589" pos:column="55">*<pos:position pos:line="1589" pos:column="56"/></modifier></type><name pos:line="1589" pos:column="56">his_tree<pos:position pos:line="1589" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1589" pos:column="65"/></parameter_list>
<block pos:line="1590" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="1591" pos:column="9">struct<pos:position pos:line="1591" pos:column="15"/></name> <name pos:line="1591" pos:column="16">child_process<pos:position pos:line="1591" pos:column="29"/></name></name></type> <name pos:line="1591" pos:column="30">cp<pos:position pos:line="1591" pos:column="32"/></name> <init pos:line="1591" pos:column="33">= <expr><name pos:line="1591" pos:column="35">CHILD_PROCESS_INIT<pos:position pos:line="1591" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="1591" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="1592" pos:column="9">int<pos:position pos:line="1592" pos:column="12"/></name></type> <name pos:line="1592" pos:column="13">status<pos:position pos:line="1592" pos:column="19"/></name></decl>;<pos:position pos:line="1592" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="1594" pos:column="9">cp<pos:position pos:line="1594" pos:column="11"/></name><operator pos:line="1594" pos:column="11">.<pos:position pos:line="1594" pos:column="12"/></operator><name pos:line="1594" pos:column="12">git_cmd<pos:position pos:line="1594" pos:column="19"/></name></name> <operator pos:line="1594" pos:column="20">=<pos:position pos:line="1594" pos:column="21"/></operator> <literal type="number" pos:line="1594" pos:column="22">1<pos:position pos:line="1594" pos:column="23"/></literal></expr>;<pos:position pos:line="1594" pos:column="24"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1596" pos:column="9">argv_array_pushf<pos:position pos:line="1596" pos:column="25"/></name><argument_list pos:line="1596" pos:column="25">(<argument><expr><operator pos:line="1596" pos:column="26">&amp;<pos:position pos:line="1596" pos:column="31"/></operator><name><name pos:line="1596" pos:column="27">cp<pos:position pos:line="1596" pos:column="29"/></name><operator pos:line="1596" pos:column="29">.<pos:position pos:line="1596" pos:column="30"/></operator><name pos:line="1596" pos:column="30">env_array<pos:position pos:line="1596" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1596" pos:column="41">"GITHEAD_%s=%.*s"<pos:position pos:line="1596" pos:column="58"/></literal></expr></argument>,
			 <argument><expr><call><name pos:line="1597" pos:column="26">sha1_to_hex<pos:position pos:line="1597" pos:column="37"/></name><argument_list pos:line="1597" pos:column="37">(<argument><expr><name pos:line="1597" pos:column="38">his_tree<pos:position pos:line="1597" pos:column="46"/></name></expr></argument>)<pos:position pos:line="1597" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="1597" pos:column="49">linelen<pos:position pos:line="1597" pos:column="56"/></name><argument_list pos:line="1597" pos:column="56">(<argument><expr><name><name pos:line="1597" pos:column="57">state<pos:position pos:line="1597" pos:column="62"/></name><operator pos:line="1597" pos:column="62">-&gt;<pos:position pos:line="1597" pos:column="67"/></operator><name pos:line="1597" pos:column="64">msg<pos:position pos:line="1597" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="1597" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="1597" pos:column="70">state<pos:position pos:line="1597" pos:column="75"/></name><operator pos:line="1597" pos:column="75">-&gt;<pos:position pos:line="1597" pos:column="80"/></operator><name pos:line="1597" pos:column="77">msg<pos:position pos:line="1597" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="1597" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="1597" pos:column="82"/></expr_stmt>
	<if pos:line="1598" pos:column="9">if <condition pos:line="1598" pos:column="12">(<expr><name><name pos:line="1598" pos:column="13">state<pos:position pos:line="1598" pos:column="18"/></name><operator pos:line="1598" pos:column="18">-&gt;<pos:position pos:line="1598" pos:column="23"/></operator><name pos:line="1598" pos:column="20">quiet<pos:position pos:line="1598" pos:column="25"/></name></name></expr>)<pos:position pos:line="1598" pos:column="26"/></condition><then pos:line="1598" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1599" pos:column="17">argv_array_push<pos:position pos:line="1599" pos:column="32"/></name><argument_list pos:line="1599" pos:column="32">(<argument><expr><operator pos:line="1599" pos:column="33">&amp;<pos:position pos:line="1599" pos:column="38"/></operator><name><name pos:line="1599" pos:column="34">cp<pos:position pos:line="1599" pos:column="36"/></name><operator pos:line="1599" pos:column="36">.<pos:position pos:line="1599" pos:column="37"/></operator><name pos:line="1599" pos:column="37">env_array<pos:position pos:line="1599" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1599" pos:column="48">"GIT_MERGE_VERBOSITY=0"<pos:position pos:line="1599" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="1599" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="1599" pos:column="73"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="1601" pos:column="9">argv_array_push<pos:position pos:line="1601" pos:column="24"/></name><argument_list pos:line="1601" pos:column="24">(<argument><expr><operator pos:line="1601" pos:column="25">&amp;<pos:position pos:line="1601" pos:column="30"/></operator><name><name pos:line="1601" pos:column="26">cp<pos:position pos:line="1601" pos:column="28"/></name><operator pos:line="1601" pos:column="28">.<pos:position pos:line="1601" pos:column="29"/></operator><name pos:line="1601" pos:column="29">args<pos:position pos:line="1601" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1601" pos:column="35">"merge-recursive"<pos:position pos:line="1601" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="1601" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1601" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1602" pos:column="9">argv_array_push<pos:position pos:line="1602" pos:column="24"/></name><argument_list pos:line="1602" pos:column="24">(<argument><expr><operator pos:line="1602" pos:column="25">&amp;<pos:position pos:line="1602" pos:column="30"/></operator><name><name pos:line="1602" pos:column="26">cp<pos:position pos:line="1602" pos:column="28"/></name><operator pos:line="1602" pos:column="28">.<pos:position pos:line="1602" pos:column="29"/></operator><name pos:line="1602" pos:column="29">args<pos:position pos:line="1602" pos:column="33"/></name></name></expr></argument>, <argument><expr><call><name pos:line="1602" pos:column="35">sha1_to_hex<pos:position pos:line="1602" pos:column="46"/></name><argument_list pos:line="1602" pos:column="46">(<argument><expr><name pos:line="1602" pos:column="47">orig_tree<pos:position pos:line="1602" pos:column="56"/></name></expr></argument>)<pos:position pos:line="1602" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="1602" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1602" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1603" pos:column="9">argv_array_push<pos:position pos:line="1603" pos:column="24"/></name><argument_list pos:line="1603" pos:column="24">(<argument><expr><operator pos:line="1603" pos:column="25">&amp;<pos:position pos:line="1603" pos:column="30"/></operator><name><name pos:line="1603" pos:column="26">cp<pos:position pos:line="1603" pos:column="28"/></name><operator pos:line="1603" pos:column="28">.<pos:position pos:line="1603" pos:column="29"/></operator><name pos:line="1603" pos:column="29">args<pos:position pos:line="1603" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1603" pos:column="35">"--"<pos:position pos:line="1603" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="1603" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1603" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1604" pos:column="9">argv_array_push<pos:position pos:line="1604" pos:column="24"/></name><argument_list pos:line="1604" pos:column="24">(<argument><expr><operator pos:line="1604" pos:column="25">&amp;<pos:position pos:line="1604" pos:column="30"/></operator><name><name pos:line="1604" pos:column="26">cp<pos:position pos:line="1604" pos:column="28"/></name><operator pos:line="1604" pos:column="28">.<pos:position pos:line="1604" pos:column="29"/></operator><name pos:line="1604" pos:column="29">args<pos:position pos:line="1604" pos:column="33"/></name></name></expr></argument>, <argument><expr><call><name pos:line="1604" pos:column="35">sha1_to_hex<pos:position pos:line="1604" pos:column="46"/></name><argument_list pos:line="1604" pos:column="46">(<argument><expr><name pos:line="1604" pos:column="47">our_tree<pos:position pos:line="1604" pos:column="55"/></name></expr></argument>)<pos:position pos:line="1604" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="1604" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1604" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1605" pos:column="9">argv_array_push<pos:position pos:line="1605" pos:column="24"/></name><argument_list pos:line="1605" pos:column="24">(<argument><expr><operator pos:line="1605" pos:column="25">&amp;<pos:position pos:line="1605" pos:column="30"/></operator><name><name pos:line="1605" pos:column="26">cp<pos:position pos:line="1605" pos:column="28"/></name><operator pos:line="1605" pos:column="28">.<pos:position pos:line="1605" pos:column="29"/></operator><name pos:line="1605" pos:column="29">args<pos:position pos:line="1605" pos:column="33"/></name></name></expr></argument>, <argument><expr><call><name pos:line="1605" pos:column="35">sha1_to_hex<pos:position pos:line="1605" pos:column="46"/></name><argument_list pos:line="1605" pos:column="46">(<argument><expr><name pos:line="1605" pos:column="47">his_tree<pos:position pos:line="1605" pos:column="55"/></name></expr></argument>)<pos:position pos:line="1605" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="1605" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1605" pos:column="58"/></expr_stmt>

	<expr_stmt><expr><name pos:line="1607" pos:column="9">status<pos:position pos:line="1607" pos:column="15"/></name> <operator pos:line="1607" pos:column="16">=<pos:position pos:line="1607" pos:column="17"/></operator> <ternary><condition><expr><call><name pos:line="1607" pos:column="18">run_command<pos:position pos:line="1607" pos:column="29"/></name><argument_list pos:line="1607" pos:column="29">(<argument><expr><operator pos:line="1607" pos:column="30">&amp;<pos:position pos:line="1607" pos:column="35"/></operator><name pos:line="1607" pos:column="31">cp<pos:position pos:line="1607" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1607" pos:column="34"/></argument_list></call></expr> ?<pos:position pos:line="1607" pos:column="36"/></condition><then pos:line="1607" pos:column="36"> <expr><operator pos:line="1607" pos:column="37">(<pos:position pos:line="1607" pos:column="38"/></operator><operator pos:line="1607" pos:column="38">-<pos:position pos:line="1607" pos:column="39"/></operator><literal type="number" pos:line="1607" pos:column="39">1<pos:position pos:line="1607" pos:column="40"/></literal><operator pos:line="1607" pos:column="40">)<pos:position pos:line="1607" pos:column="41"/></operator></expr> <pos:position pos:line="1607" pos:column="42"/></then><else pos:line="1607" pos:column="42">: <expr><literal type="number" pos:line="1607" pos:column="44">0<pos:position pos:line="1607" pos:column="45"/></literal></expr></else></ternary></expr>;<pos:position pos:line="1607" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1608" pos:column="9">discard_cache<pos:position pos:line="1608" pos:column="22"/></name><argument_list pos:line="1608" pos:column="22">()<pos:position pos:line="1608" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="1608" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1609" pos:column="9">read_cache<pos:position pos:line="1609" pos:column="19"/></name><argument_list pos:line="1609" pos:column="19">()<pos:position pos:line="1609" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="1609" pos:column="22"/></expr_stmt>
	<return pos:line="1610" pos:column="9">return <expr><name pos:line="1610" pos:column="16">status<pos:position pos:line="1610" pos:column="22"/></name></expr>;<pos:position pos:line="1610" pos:column="23"/></return>
}<pos:position pos:line="1611" pos:column="2"/></block></function>

<comment type="block" pos:line="1613" pos:column="1">/**
 * Attempt a threeway merge, using index_path as the temporary index.
 */</comment>
<function><specifier pos:line="1616" pos:column="1">static<pos:position pos:line="1616" pos:column="7"/></specifier> <type><name pos:line="1616" pos:column="8">int<pos:position pos:line="1616" pos:column="11"/></name></type> <name pos:line="1616" pos:column="12">fall_back_threeway<pos:position pos:line="1616" pos:column="30"/></name><parameter_list pos:line="1616" pos:column="30">(<parameter><decl><type><specifier pos:line="1616" pos:column="31">const<pos:position pos:line="1616" pos:column="36"/></specifier> <name><name pos:line="1616" pos:column="37">struct<pos:position pos:line="1616" pos:column="43"/></name> <name pos:line="1616" pos:column="44">am_state<pos:position pos:line="1616" pos:column="52"/></name></name> <modifier pos:line="1616" pos:column="53">*<pos:position pos:line="1616" pos:column="54"/></modifier></type><name pos:line="1616" pos:column="54">state<pos:position pos:line="1616" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1616" pos:column="61">const<pos:position pos:line="1616" pos:column="66"/></specifier> <name pos:line="1616" pos:column="67">char<pos:position pos:line="1616" pos:column="71"/></name> <modifier pos:line="1616" pos:column="72">*<pos:position pos:line="1616" pos:column="73"/></modifier></type><name pos:line="1616" pos:column="73">index_path<pos:position pos:line="1616" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="1616" pos:column="84"/></parameter_list>
<block pos:line="1617" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1618" pos:column="9">unsigned<pos:position pos:line="1618" pos:column="17"/></name> <name pos:line="1618" pos:column="18">char<pos:position pos:line="1618" pos:column="22"/></name></type> <name><name pos:line="1618" pos:column="23">orig_tree<pos:position pos:line="1618" pos:column="32"/></name><index pos:line="1618" pos:column="32">[<expr><name pos:line="1618" pos:column="33">GIT_SHA1_RAWSZ<pos:position pos:line="1618" pos:column="47"/></name></expr>]<pos:position pos:line="1618" pos:column="48"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="1618" pos:column="50">his_tree<pos:position pos:line="1618" pos:column="58"/></name><index pos:line="1618" pos:column="58">[<expr><name pos:line="1618" pos:column="59">GIT_SHA1_RAWSZ<pos:position pos:line="1618" pos:column="73"/></name></expr>]<pos:position pos:line="1618" pos:column="74"/></index></name></decl>,
		      <decl><type ref="prev"/><name><name pos:line="1619" pos:column="23">our_tree<pos:position pos:line="1619" pos:column="31"/></name><index pos:line="1619" pos:column="31">[<expr><name pos:line="1619" pos:column="32">GIT_SHA1_RAWSZ<pos:position pos:line="1619" pos:column="46"/></name></expr>]<pos:position pos:line="1619" pos:column="47"/></index></name></decl>;<pos:position pos:line="1619" pos:column="48"/></decl_stmt>

	<if pos:line="1621" pos:column="9">if <condition pos:line="1621" pos:column="12">(<expr><call><name pos:line="1621" pos:column="13">get_sha1<pos:position pos:line="1621" pos:column="21"/></name><argument_list pos:line="1621" pos:column="21">(<argument><expr><literal type="string" pos:line="1621" pos:column="22">"HEAD"<pos:position pos:line="1621" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="1621" pos:column="30">our_tree<pos:position pos:line="1621" pos:column="38"/></name></expr></argument>)<pos:position pos:line="1621" pos:column="39"/></argument_list></call> <operator pos:line="1621" pos:column="40">&lt;<pos:position pos:line="1621" pos:column="44"/></operator> <literal type="number" pos:line="1621" pos:column="42">0<pos:position pos:line="1621" pos:column="43"/></literal></expr>)<pos:position pos:line="1621" pos:column="44"/></condition><then pos:line="1621" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1622" pos:column="17">hashcpy<pos:position pos:line="1622" pos:column="24"/></name><argument_list pos:line="1622" pos:column="24">(<argument><expr><name pos:line="1622" pos:column="25">our_tree<pos:position pos:line="1622" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="1622" pos:column="35">EMPTY_TREE_SHA1_BIN<pos:position pos:line="1622" pos:column="54"/></name></expr></argument>)<pos:position pos:line="1622" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1622" pos:column="56"/></expr_stmt></block></then></if>

	<if pos:line="1624" pos:column="9">if <condition pos:line="1624" pos:column="12">(<expr><call><name pos:line="1624" pos:column="13">build_fake_ancestor<pos:position pos:line="1624" pos:column="32"/></name><argument_list pos:line="1624" pos:column="32">(<argument><expr><name pos:line="1624" pos:column="33">state<pos:position pos:line="1624" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="1624" pos:column="40">index_path<pos:position pos:line="1624" pos:column="50"/></name></expr></argument>)<pos:position pos:line="1624" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="1624" pos:column="52"/></condition><then pos:line="1624" pos:column="52">
		<block type="pseudo"><return pos:line="1625" pos:column="17">return <expr><call><name pos:line="1625" pos:column="24">error<pos:position pos:line="1625" pos:column="29"/></name><argument_list pos:line="1625" pos:column="29">(<argument><expr><literal type="string" pos:line="1625" pos:column="30">"could not build fake ancestor"<pos:position pos:line="1625" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="1625" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="1625" pos:column="63"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="1627" pos:column="9">discard_cache<pos:position pos:line="1627" pos:column="22"/></name><argument_list pos:line="1627" pos:column="22">()<pos:position pos:line="1627" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="1627" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1628" pos:column="9">read_cache_from<pos:position pos:line="1628" pos:column="24"/></name><argument_list pos:line="1628" pos:column="24">(<argument><expr><name pos:line="1628" pos:column="25">index_path<pos:position pos:line="1628" pos:column="35"/></name></expr></argument>)<pos:position pos:line="1628" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1628" pos:column="37"/></expr_stmt>

	<if pos:line="1630" pos:column="9">if <condition pos:line="1630" pos:column="12">(<expr><call><name pos:line="1630" pos:column="13">write_index_as_tree<pos:position pos:line="1630" pos:column="32"/></name><argument_list pos:line="1630" pos:column="32">(<argument><expr><name pos:line="1630" pos:column="33">orig_tree<pos:position pos:line="1630" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="1630" pos:column="44">&amp;<pos:position pos:line="1630" pos:column="49"/></operator><name pos:line="1630" pos:column="45">the_index<pos:position pos:line="1630" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="1630" pos:column="56">index_path<pos:position pos:line="1630" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1630" pos:column="68">0<pos:position pos:line="1630" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="1630" pos:column="71">NULL<pos:position pos:line="1630" pos:column="75"/></name></expr></argument>)<pos:position pos:line="1630" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="1630" pos:column="77"/></condition><then pos:line="1630" pos:column="77">
		<block type="pseudo"><return pos:line="1631" pos:column="17">return <expr><call><name pos:line="1631" pos:column="24">error<pos:position pos:line="1631" pos:column="29"/></name><argument_list pos:line="1631" pos:column="29">(<argument><expr><call><name pos:line="1631" pos:column="30">_<pos:position pos:line="1631" pos:column="31"/></name><argument_list pos:line="1631" pos:column="31">(<argument><expr><literal type="string" pos:line="1631" pos:column="32">"Repository lacks necessary blobs to fall back on 3-way merge."<pos:position pos:line="1631" pos:column="95"/></literal></expr></argument>)<pos:position pos:line="1631" pos:column="96"/></argument_list></call></expr></argument>)<pos:position pos:line="1631" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="1631" pos:column="98"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="1633" pos:column="9">say<pos:position pos:line="1633" pos:column="12"/></name><argument_list pos:line="1633" pos:column="12">(<argument><expr><name pos:line="1633" pos:column="13">state<pos:position pos:line="1633" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="1633" pos:column="20">stdout<pos:position pos:line="1633" pos:column="26"/></name></expr></argument>, <argument><expr><call><name pos:line="1633" pos:column="28">_<pos:position pos:line="1633" pos:column="29"/></name><argument_list pos:line="1633" pos:column="29">(<argument><expr><literal type="string" pos:line="1633" pos:column="30">"Using index info to reconstruct a base tree..."<pos:position pos:line="1633" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="1633" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="1633" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="1633" pos:column="81"/></expr_stmt>

	<if pos:line="1635" pos:column="9">if <condition pos:line="1635" pos:column="12">(<expr><operator pos:line="1635" pos:column="13">!<pos:position pos:line="1635" pos:column="14"/></operator><name><name pos:line="1635" pos:column="14">state<pos:position pos:line="1635" pos:column="19"/></name><operator pos:line="1635" pos:column="19">-&gt;<pos:position pos:line="1635" pos:column="24"/></operator><name pos:line="1635" pos:column="21">quiet<pos:position pos:line="1635" pos:column="26"/></name></name></expr>)<pos:position pos:line="1635" pos:column="27"/></condition><then pos:line="1635" pos:column="27"> <block pos:line="1635" pos:column="28">{
		<comment type="block" pos:line="1636" pos:column="17">/*
		 * List paths that needed 3-way fallback, so that the user can
		 * review them with extra care to spot mismerges.
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="1640" pos:column="17">struct<pos:position pos:line="1640" pos:column="23"/></name> <name pos:line="1640" pos:column="24">rev_info<pos:position pos:line="1640" pos:column="32"/></name></name></type> <name pos:line="1640" pos:column="33">rev_info<pos:position pos:line="1640" pos:column="41"/></name></decl>;<pos:position pos:line="1640" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="1641" pos:column="17">const<pos:position pos:line="1641" pos:column="22"/></specifier> <name pos:line="1641" pos:column="23">char<pos:position pos:line="1641" pos:column="27"/></name> <modifier pos:line="1641" pos:column="28">*<pos:position pos:line="1641" pos:column="29"/></modifier></type><name pos:line="1641" pos:column="29">diff_filter_str<pos:position pos:line="1641" pos:column="44"/></name> <init pos:line="1641" pos:column="45">= <expr><literal type="string" pos:line="1641" pos:column="47">"--diff-filter=AM"<pos:position pos:line="1641" pos:column="65"/></literal></expr></init></decl>;<pos:position pos:line="1641" pos:column="66"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="1643" pos:column="17">init_revisions<pos:position pos:line="1643" pos:column="31"/></name><argument_list pos:line="1643" pos:column="31">(<argument><expr><operator pos:line="1643" pos:column="32">&amp;<pos:position pos:line="1643" pos:column="37"/></operator><name pos:line="1643" pos:column="33">rev_info<pos:position pos:line="1643" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="1643" pos:column="43">NULL<pos:position pos:line="1643" pos:column="47"/></name></expr></argument>)<pos:position pos:line="1643" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1643" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="1644" pos:column="17">rev_info<pos:position pos:line="1644" pos:column="25"/></name><operator pos:line="1644" pos:column="25">.<pos:position pos:line="1644" pos:column="26"/></operator><name pos:line="1644" pos:column="26">diffopt<pos:position pos:line="1644" pos:column="33"/></name><operator pos:line="1644" pos:column="33">.<pos:position pos:line="1644" pos:column="34"/></operator><name pos:line="1644" pos:column="34">output_format<pos:position pos:line="1644" pos:column="47"/></name></name> <operator pos:line="1644" pos:column="48">=<pos:position pos:line="1644" pos:column="49"/></operator> <name pos:line="1644" pos:column="50">DIFF_FORMAT_NAME_STATUS<pos:position pos:line="1644" pos:column="73"/></name></expr>;<pos:position pos:line="1644" pos:column="74"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1645" pos:column="17">diff_opt_parse<pos:position pos:line="1645" pos:column="31"/></name><argument_list pos:line="1645" pos:column="31">(<argument><expr><operator pos:line="1645" pos:column="32">&amp;<pos:position pos:line="1645" pos:column="37"/></operator><name><name pos:line="1645" pos:column="33">rev_info<pos:position pos:line="1645" pos:column="41"/></name><operator pos:line="1645" pos:column="41">.<pos:position pos:line="1645" pos:column="42"/></operator><name pos:line="1645" pos:column="42">diffopt<pos:position pos:line="1645" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="1645" pos:column="51">&amp;<pos:position pos:line="1645" pos:column="56"/></operator><name pos:line="1645" pos:column="52">diff_filter_str<pos:position pos:line="1645" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1645" pos:column="69">1<pos:position pos:line="1645" pos:column="70"/></literal></expr></argument>, <argument><expr><name><name pos:line="1645" pos:column="72">rev_info<pos:position pos:line="1645" pos:column="80"/></name><operator pos:line="1645" pos:column="80">.<pos:position pos:line="1645" pos:column="81"/></operator><name pos:line="1645" pos:column="81">prefix<pos:position pos:line="1645" pos:column="87"/></name></name></expr></argument>)<pos:position pos:line="1645" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="1645" pos:column="89"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1646" pos:column="17">add_pending_sha1<pos:position pos:line="1646" pos:column="33"/></name><argument_list pos:line="1646" pos:column="33">(<argument><expr><operator pos:line="1646" pos:column="34">&amp;<pos:position pos:line="1646" pos:column="39"/></operator><name pos:line="1646" pos:column="35">rev_info<pos:position pos:line="1646" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1646" pos:column="45">"HEAD"<pos:position pos:line="1646" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="1646" pos:column="53">our_tree<pos:position pos:line="1646" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1646" pos:column="63">0<pos:position pos:line="1646" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="1646" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="1646" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1647" pos:column="17">diff_setup_done<pos:position pos:line="1647" pos:column="32"/></name><argument_list pos:line="1647" pos:column="32">(<argument><expr><operator pos:line="1647" pos:column="33">&amp;<pos:position pos:line="1647" pos:column="38"/></operator><name><name pos:line="1647" pos:column="34">rev_info<pos:position pos:line="1647" pos:column="42"/></name><operator pos:line="1647" pos:column="42">.<pos:position pos:line="1647" pos:column="43"/></operator><name pos:line="1647" pos:column="43">diffopt<pos:position pos:line="1647" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="1647" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1647" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1648" pos:column="17">run_diff_index<pos:position pos:line="1648" pos:column="31"/></name><argument_list pos:line="1648" pos:column="31">(<argument><expr><operator pos:line="1648" pos:column="32">&amp;<pos:position pos:line="1648" pos:column="37"/></operator><name pos:line="1648" pos:column="33">rev_info<pos:position pos:line="1648" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1648" pos:column="43">1<pos:position pos:line="1648" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="1648" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1648" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="1649" pos:column="10"/></block></then></if>

	<if pos:line="1651" pos:column="9">if <condition pos:line="1651" pos:column="12">(<expr><call><name pos:line="1651" pos:column="13">run_apply<pos:position pos:line="1651" pos:column="22"/></name><argument_list pos:line="1651" pos:column="22">(<argument><expr><name pos:line="1651" pos:column="23">state<pos:position pos:line="1651" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="1651" pos:column="30">index_path<pos:position pos:line="1651" pos:column="40"/></name></expr></argument>)<pos:position pos:line="1651" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="1651" pos:column="42"/></condition><then pos:line="1651" pos:column="42">
		<block type="pseudo"><return pos:line="1652" pos:column="17">return <expr><call><name pos:line="1652" pos:column="24">error<pos:position pos:line="1652" pos:column="29"/></name><argument_list pos:line="1652" pos:column="29">(<argument><expr><call><name pos:line="1652" pos:column="30">_<pos:position pos:line="1652" pos:column="31"/></name><argument_list pos:line="1652" pos:column="31">(<argument><expr><literal type="string" pos:line="1652" pos:column="32">"Did you hand edit your patch?\n"<pos:position pos:line="1652" pos:column="65"/></literal>
				<literal type="string" pos:line="1653" pos:column="33">"It does not apply to blobs recorded in its index."<pos:position pos:line="1653" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="1653" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="1653" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="1653" pos:column="87"/></return></block></then></if>

	<if pos:line="1655" pos:column="9">if <condition pos:line="1655" pos:column="12">(<expr><call><name pos:line="1655" pos:column="13">write_index_as_tree<pos:position pos:line="1655" pos:column="32"/></name><argument_list pos:line="1655" pos:column="32">(<argument><expr><name pos:line="1655" pos:column="33">his_tree<pos:position pos:line="1655" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="1655" pos:column="43">&amp;<pos:position pos:line="1655" pos:column="48"/></operator><name pos:line="1655" pos:column="44">the_index<pos:position pos:line="1655" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="1655" pos:column="55">index_path<pos:position pos:line="1655" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1655" pos:column="67">0<pos:position pos:line="1655" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="1655" pos:column="70">NULL<pos:position pos:line="1655" pos:column="74"/></name></expr></argument>)<pos:position pos:line="1655" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="1655" pos:column="76"/></condition><then pos:line="1655" pos:column="76">
		<block type="pseudo"><return pos:line="1656" pos:column="17">return <expr><call><name pos:line="1656" pos:column="24">error<pos:position pos:line="1656" pos:column="29"/></name><argument_list pos:line="1656" pos:column="29">(<argument><expr><literal type="string" pos:line="1656" pos:column="30">"could not write tree"<pos:position pos:line="1656" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="1656" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1656" pos:column="54"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="1658" pos:column="9">say<pos:position pos:line="1658" pos:column="12"/></name><argument_list pos:line="1658" pos:column="12">(<argument><expr><name pos:line="1658" pos:column="13">state<pos:position pos:line="1658" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="1658" pos:column="20">stdout<pos:position pos:line="1658" pos:column="26"/></name></expr></argument>, <argument><expr><call><name pos:line="1658" pos:column="28">_<pos:position pos:line="1658" pos:column="29"/></name><argument_list pos:line="1658" pos:column="29">(<argument><expr><literal type="string" pos:line="1658" pos:column="30">"Falling back to patching base and 3-way merge..."<pos:position pos:line="1658" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="1658" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="1658" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="1658" pos:column="83"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1660" pos:column="9">discard_cache<pos:position pos:line="1660" pos:column="22"/></name><argument_list pos:line="1660" pos:column="22">()<pos:position pos:line="1660" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="1660" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1661" pos:column="9">read_cache<pos:position pos:line="1661" pos:column="19"/></name><argument_list pos:line="1661" pos:column="19">()<pos:position pos:line="1661" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="1661" pos:column="22"/></expr_stmt>

	<comment type="block" pos:line="1663" pos:column="9">/*
	 * This is not so wrong. Depending on which base we picked, orig_tree
	 * may be wildly different from ours, but his_tree has the same set of
	 * wildly different changes in parts the patch did not touch, so
	 * recursive ends up canceling them, saying that we reverted all those
	 * changes.
	 */</comment>

	<if pos:line="1671" pos:column="9">if <condition pos:line="1671" pos:column="12">(<expr><call><name pos:line="1671" pos:column="13">run_fallback_merge_recursive<pos:position pos:line="1671" pos:column="41"/></name><argument_list pos:line="1671" pos:column="41">(<argument><expr><name pos:line="1671" pos:column="42">state<pos:position pos:line="1671" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="1671" pos:column="49">orig_tree<pos:position pos:line="1671" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="1671" pos:column="60">our_tree<pos:position pos:line="1671" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="1671" pos:column="70">his_tree<pos:position pos:line="1671" pos:column="78"/></name></expr></argument>)<pos:position pos:line="1671" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="1671" pos:column="80"/></condition><then pos:line="1671" pos:column="80"> <block pos:line="1671" pos:column="81">{
		<expr_stmt><expr><call><name pos:line="1672" pos:column="17">rerere<pos:position pos:line="1672" pos:column="23"/></name><argument_list pos:line="1672" pos:column="23">(<argument><expr><name><name pos:line="1672" pos:column="24">state<pos:position pos:line="1672" pos:column="29"/></name><operator pos:line="1672" pos:column="29">-&gt;<pos:position pos:line="1672" pos:column="34"/></operator><name pos:line="1672" pos:column="31">allow_rerere_autoupdate<pos:position pos:line="1672" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="1672" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1672" pos:column="56"/></expr_stmt>
		<return pos:line="1673" pos:column="17">return <expr><call><name pos:line="1673" pos:column="24">error<pos:position pos:line="1673" pos:column="29"/></name><argument_list pos:line="1673" pos:column="29">(<argument><expr><call><name pos:line="1673" pos:column="30">_<pos:position pos:line="1673" pos:column="31"/></name><argument_list pos:line="1673" pos:column="31">(<argument><expr><literal type="string" pos:line="1673" pos:column="32">"Failed to merge in the changes."<pos:position pos:line="1673" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="1673" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="1673" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="1673" pos:column="68"/></return>
	}<pos:position pos:line="1674" pos:column="10"/></block></then></if>

	<return pos:line="1676" pos:column="9">return <expr><literal type="number" pos:line="1676" pos:column="16">0<pos:position pos:line="1676" pos:column="17"/></literal></expr>;<pos:position pos:line="1676" pos:column="18"/></return>
}<pos:position pos:line="1677" pos:column="2"/></block></function>

<comment type="block" pos:line="1679" pos:column="1">/**
 * Commits the current index with state-&gt;msg as the commit message and
 * state-&gt;author_name, state-&gt;author_email and state-&gt;author_date as the author
 * information.
 */</comment>
<function><specifier pos:line="1684" pos:column="1">static<pos:position pos:line="1684" pos:column="7"/></specifier> <type><name pos:line="1684" pos:column="8">void<pos:position pos:line="1684" pos:column="12"/></name></type> <name pos:line="1684" pos:column="13">do_commit<pos:position pos:line="1684" pos:column="22"/></name><parameter_list pos:line="1684" pos:column="22">(<parameter><decl><type><specifier pos:line="1684" pos:column="23">const<pos:position pos:line="1684" pos:column="28"/></specifier> <name><name pos:line="1684" pos:column="29">struct<pos:position pos:line="1684" pos:column="35"/></name> <name pos:line="1684" pos:column="36">am_state<pos:position pos:line="1684" pos:column="44"/></name></name> <modifier pos:line="1684" pos:column="45">*<pos:position pos:line="1684" pos:column="46"/></modifier></type><name pos:line="1684" pos:column="46">state<pos:position pos:line="1684" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1684" pos:column="52"/></parameter_list>
<block pos:line="1685" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1686" pos:column="9">unsigned<pos:position pos:line="1686" pos:column="17"/></name> <name pos:line="1686" pos:column="18">char<pos:position pos:line="1686" pos:column="22"/></name></type> <name><name pos:line="1686" pos:column="23">tree<pos:position pos:line="1686" pos:column="27"/></name><index pos:line="1686" pos:column="27">[<expr><name pos:line="1686" pos:column="28">GIT_SHA1_RAWSZ<pos:position pos:line="1686" pos:column="42"/></name></expr>]<pos:position pos:line="1686" pos:column="43"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="1686" pos:column="45">parent<pos:position pos:line="1686" pos:column="51"/></name><index pos:line="1686" pos:column="51">[<expr><name pos:line="1686" pos:column="52">GIT_SHA1_RAWSZ<pos:position pos:line="1686" pos:column="66"/></name></expr>]<pos:position pos:line="1686" pos:column="67"/></index></name></decl>,
		      <decl><type ref="prev"/><name><name pos:line="1687" pos:column="23">commit<pos:position pos:line="1687" pos:column="29"/></name><index pos:line="1687" pos:column="29">[<expr><name pos:line="1687" pos:column="30">GIT_SHA1_RAWSZ<pos:position pos:line="1687" pos:column="44"/></name></expr>]<pos:position pos:line="1687" pos:column="45"/></index></name></decl>;<pos:position pos:line="1687" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="1688" pos:column="9">unsigned<pos:position pos:line="1688" pos:column="17"/></name> <name pos:line="1688" pos:column="18">char<pos:position pos:line="1688" pos:column="22"/></name> <modifier pos:line="1688" pos:column="23">*<pos:position pos:line="1688" pos:column="24"/></modifier></type><name pos:line="1688" pos:column="24">ptr<pos:position pos:line="1688" pos:column="27"/></name></decl>;<pos:position pos:line="1688" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1689" pos:column="9">struct<pos:position pos:line="1689" pos:column="15"/></name> <name pos:line="1689" pos:column="16">commit_list<pos:position pos:line="1689" pos:column="27"/></name></name> <modifier pos:line="1689" pos:column="28">*<pos:position pos:line="1689" pos:column="29"/></modifier></type><name pos:line="1689" pos:column="29">parents<pos:position pos:line="1689" pos:column="36"/></name> <init pos:line="1689" pos:column="37">= <expr><name pos:line="1689" pos:column="39">NULL<pos:position pos:line="1689" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="1689" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="1690" pos:column="9">const<pos:position pos:line="1690" pos:column="14"/></specifier> <name pos:line="1690" pos:column="15">char<pos:position pos:line="1690" pos:column="19"/></name> <modifier pos:line="1690" pos:column="20">*<pos:position pos:line="1690" pos:column="21"/></modifier></type><name pos:line="1690" pos:column="21">reflog_msg<pos:position pos:line="1690" pos:column="31"/></name></decl>, <modifier pos:line="1690" pos:column="33">*<pos:position pos:line="1690" pos:column="34"/></modifier><decl><type ref="prev"/><name pos:line="1690" pos:column="34">author<pos:position pos:line="1690" pos:column="40"/></name></decl>;<pos:position pos:line="1690" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1691" pos:column="9">struct<pos:position pos:line="1691" pos:column="15"/></name> <name pos:line="1691" pos:column="16">strbuf<pos:position pos:line="1691" pos:column="22"/></name></name></type> <name pos:line="1691" pos:column="23">sb<pos:position pos:line="1691" pos:column="25"/></name> <init pos:line="1691" pos:column="26">= <expr><name pos:line="1691" pos:column="28">STRBUF_INIT<pos:position pos:line="1691" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="1691" pos:column="40"/></decl_stmt>

	<if pos:line="1693" pos:column="9">if <condition pos:line="1693" pos:column="12">(<expr><call><name pos:line="1693" pos:column="13">run_hook_le<pos:position pos:line="1693" pos:column="24"/></name><argument_list pos:line="1693" pos:column="24">(<argument><expr><name pos:line="1693" pos:column="25">NULL<pos:position pos:line="1693" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1693" pos:column="31">"pre-applypatch"<pos:position pos:line="1693" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="1693" pos:column="49">NULL<pos:position pos:line="1693" pos:column="53"/></name></expr></argument>)<pos:position pos:line="1693" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="1693" pos:column="55"/></condition><then pos:line="1693" pos:column="55">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1694" pos:column="17">exit<pos:position pos:line="1694" pos:column="21"/></name><argument_list pos:line="1694" pos:column="21">(<argument><expr><literal type="number" pos:line="1694" pos:column="22">1<pos:position pos:line="1694" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="1694" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="1694" pos:column="25"/></expr_stmt></block></then></if>

	<if pos:line="1696" pos:column="9">if <condition pos:line="1696" pos:column="12">(<expr><call><name pos:line="1696" pos:column="13">write_cache_as_tree<pos:position pos:line="1696" pos:column="32"/></name><argument_list pos:line="1696" pos:column="32">(<argument><expr><name pos:line="1696" pos:column="33">tree<pos:position pos:line="1696" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1696" pos:column="39">0<pos:position pos:line="1696" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="1696" pos:column="42">NULL<pos:position pos:line="1696" pos:column="46"/></name></expr></argument>)<pos:position pos:line="1696" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="1696" pos:column="48"/></condition><then pos:line="1696" pos:column="48">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1697" pos:column="17">die<pos:position pos:line="1697" pos:column="20"/></name><argument_list pos:line="1697" pos:column="20">(<argument><expr><call><name pos:line="1697" pos:column="21">_<pos:position pos:line="1697" pos:column="22"/></name><argument_list pos:line="1697" pos:column="22">(<argument><expr><literal type="string" pos:line="1697" pos:column="23">"git write-tree failed to write a tree"<pos:position pos:line="1697" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="1697" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="1697" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="1697" pos:column="65"/></expr_stmt></block></then></if>

	<if pos:line="1699" pos:column="9">if <condition pos:line="1699" pos:column="12">(<expr><operator pos:line="1699" pos:column="13">!<pos:position pos:line="1699" pos:column="14"/></operator><call><name pos:line="1699" pos:column="14">get_sha1_commit<pos:position pos:line="1699" pos:column="29"/></name><argument_list pos:line="1699" pos:column="29">(<argument><expr><literal type="string" pos:line="1699" pos:column="30">"HEAD"<pos:position pos:line="1699" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="1699" pos:column="38">parent<pos:position pos:line="1699" pos:column="44"/></name></expr></argument>)<pos:position pos:line="1699" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="1699" pos:column="46"/></condition><then pos:line="1699" pos:column="46"> <block pos:line="1699" pos:column="47">{
		<expr_stmt><expr><name pos:line="1700" pos:column="17">ptr<pos:position pos:line="1700" pos:column="20"/></name> <operator pos:line="1700" pos:column="21">=<pos:position pos:line="1700" pos:column="22"/></operator> <name pos:line="1700" pos:column="23">parent<pos:position pos:line="1700" pos:column="29"/></name></expr>;<pos:position pos:line="1700" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1701" pos:column="17">commit_list_insert<pos:position pos:line="1701" pos:column="35"/></name><argument_list pos:line="1701" pos:column="35">(<argument><expr><call><name pos:line="1701" pos:column="36">lookup_commit<pos:position pos:line="1701" pos:column="49"/></name><argument_list pos:line="1701" pos:column="49">(<argument><expr><name pos:line="1701" pos:column="50">parent<pos:position pos:line="1701" pos:column="56"/></name></expr></argument>)<pos:position pos:line="1701" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="1701" pos:column="59">&amp;<pos:position pos:line="1701" pos:column="64"/></operator><name pos:line="1701" pos:column="60">parents<pos:position pos:line="1701" pos:column="67"/></name></expr></argument>)<pos:position pos:line="1701" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="1701" pos:column="69"/></expr_stmt>
	}<pos:position pos:line="1702" pos:column="10"/></block></then> <else pos:line="1702" pos:column="11">else <block pos:line="1702" pos:column="16">{
		<expr_stmt><expr><name pos:line="1703" pos:column="17">ptr<pos:position pos:line="1703" pos:column="20"/></name> <operator pos:line="1703" pos:column="21">=<pos:position pos:line="1703" pos:column="22"/></operator> <name pos:line="1703" pos:column="23">NULL<pos:position pos:line="1703" pos:column="27"/></name></expr>;<pos:position pos:line="1703" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1704" pos:column="17">say<pos:position pos:line="1704" pos:column="20"/></name><argument_list pos:line="1704" pos:column="20">(<argument><expr><name pos:line="1704" pos:column="21">state<pos:position pos:line="1704" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="1704" pos:column="28">stderr<pos:position pos:line="1704" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="1704" pos:column="36">_<pos:position pos:line="1704" pos:column="37"/></name><argument_list pos:line="1704" pos:column="37">(<argument><expr><literal type="string" pos:line="1704" pos:column="38">"applying to an empty history"<pos:position pos:line="1704" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="1704" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="1704" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="1704" pos:column="71"/></expr_stmt>
	}<pos:position pos:line="1705" pos:column="10"/></block></else></if>

	<expr_stmt><expr><name pos:line="1707" pos:column="9">author<pos:position pos:line="1707" pos:column="15"/></name> <operator pos:line="1707" pos:column="16">=<pos:position pos:line="1707" pos:column="17"/></operator> <call><name pos:line="1707" pos:column="18">fmt_ident<pos:position pos:line="1707" pos:column="27"/></name><argument_list pos:line="1707" pos:column="27">(<argument><expr><name><name pos:line="1707" pos:column="28">state<pos:position pos:line="1707" pos:column="33"/></name><operator pos:line="1707" pos:column="33">-&gt;<pos:position pos:line="1707" pos:column="38"/></operator><name pos:line="1707" pos:column="35">author_name<pos:position pos:line="1707" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="1707" pos:column="48">state<pos:position pos:line="1707" pos:column="53"/></name><operator pos:line="1707" pos:column="53">-&gt;<pos:position pos:line="1707" pos:column="58"/></operator><name pos:line="1707" pos:column="55">author_email<pos:position pos:line="1707" pos:column="67"/></name></name></expr></argument>,
			<argument><expr><ternary><condition><expr><name><name pos:line="1708" pos:column="25">state<pos:position pos:line="1708" pos:column="30"/></name><operator pos:line="1708" pos:column="30">-&gt;<pos:position pos:line="1708" pos:column="35"/></operator><name pos:line="1708" pos:column="32">ignore_date<pos:position pos:line="1708" pos:column="43"/></name></name></expr> ?<pos:position pos:line="1708" pos:column="45"/></condition><then pos:line="1708" pos:column="45"> <expr><name pos:line="1708" pos:column="46">NULL<pos:position pos:line="1708" pos:column="50"/></name></expr> <pos:position pos:line="1708" pos:column="51"/></then><else pos:line="1708" pos:column="51">: <expr><name><name pos:line="1708" pos:column="53">state<pos:position pos:line="1708" pos:column="58"/></name><operator pos:line="1708" pos:column="58">-&gt;<pos:position pos:line="1708" pos:column="63"/></operator><name pos:line="1708" pos:column="60">author_date<pos:position pos:line="1708" pos:column="71"/></name></name></expr></else></ternary></expr></argument>,
			<argument><expr><name pos:line="1709" pos:column="25">IDENT_STRICT<pos:position pos:line="1709" pos:column="37"/></name></expr></argument>)<pos:position pos:line="1709" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="1709" pos:column="39"/></expr_stmt>

	<if pos:line="1711" pos:column="9">if <condition pos:line="1711" pos:column="12">(<expr><name><name pos:line="1711" pos:column="13">state<pos:position pos:line="1711" pos:column="18"/></name><operator pos:line="1711" pos:column="18">-&gt;<pos:position pos:line="1711" pos:column="23"/></operator><name pos:line="1711" pos:column="20">committer_date_is_author_date<pos:position pos:line="1711" pos:column="49"/></name></name></expr>)<pos:position pos:line="1711" pos:column="50"/></condition><then pos:line="1711" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1712" pos:column="17">setenv<pos:position pos:line="1712" pos:column="23"/></name><argument_list pos:line="1712" pos:column="23">(<argument><expr><literal type="string" pos:line="1712" pos:column="24">"GIT_COMMITTER_DATE"<pos:position pos:line="1712" pos:column="44"/></literal></expr></argument>,
			<argument><expr><ternary><condition><expr><name><name pos:line="1713" pos:column="25">state<pos:position pos:line="1713" pos:column="30"/></name><operator pos:line="1713" pos:column="30">-&gt;<pos:position pos:line="1713" pos:column="35"/></operator><name pos:line="1713" pos:column="32">ignore_date<pos:position pos:line="1713" pos:column="43"/></name></name></expr> ?<pos:position pos:line="1713" pos:column="45"/></condition><then pos:line="1713" pos:column="45"> <expr><literal type="string" pos:line="1713" pos:column="46">""<pos:position pos:line="1713" pos:column="48"/></literal></expr> <pos:position pos:line="1713" pos:column="49"/></then><else pos:line="1713" pos:column="49">: <expr><name><name pos:line="1713" pos:column="51">state<pos:position pos:line="1713" pos:column="56"/></name><operator pos:line="1713" pos:column="56">-&gt;<pos:position pos:line="1713" pos:column="61"/></operator><name pos:line="1713" pos:column="58">author_date<pos:position pos:line="1713" pos:column="69"/></name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number" pos:line="1713" pos:column="71">1<pos:position pos:line="1713" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="1713" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="1713" pos:column="74"/></expr_stmt></block></then></if>

	<if pos:line="1715" pos:column="9">if <condition pos:line="1715" pos:column="12">(<expr><call><name pos:line="1715" pos:column="13">commit_tree<pos:position pos:line="1715" pos:column="24"/></name><argument_list pos:line="1715" pos:column="24">(<argument><expr><name><name pos:line="1715" pos:column="25">state<pos:position pos:line="1715" pos:column="30"/></name><operator pos:line="1715" pos:column="30">-&gt;<pos:position pos:line="1715" pos:column="35"/></operator><name pos:line="1715" pos:column="32">msg<pos:position pos:line="1715" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="1715" pos:column="37">state<pos:position pos:line="1715" pos:column="42"/></name><operator pos:line="1715" pos:column="42">-&gt;<pos:position pos:line="1715" pos:column="47"/></operator><name pos:line="1715" pos:column="44">msg_len<pos:position pos:line="1715" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="1715" pos:column="53">tree<pos:position pos:line="1715" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="1715" pos:column="59">parents<pos:position pos:line="1715" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="1715" pos:column="68">commit<pos:position pos:line="1715" pos:column="74"/></name></expr></argument>,
				<argument><expr><name pos:line="1716" pos:column="33">author<pos:position pos:line="1716" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="1716" pos:column="41">state<pos:position pos:line="1716" pos:column="46"/></name><operator pos:line="1716" pos:column="46">-&gt;<pos:position pos:line="1716" pos:column="51"/></operator><name pos:line="1716" pos:column="48">sign_commit<pos:position pos:line="1716" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="1716" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="1716" pos:column="61"/></condition><then pos:line="1716" pos:column="61">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1717" pos:column="17">die<pos:position pos:line="1717" pos:column="20"/></name><argument_list pos:line="1717" pos:column="20">(<argument><expr><call><name pos:line="1717" pos:column="21">_<pos:position pos:line="1717" pos:column="22"/></name><argument_list pos:line="1717" pos:column="22">(<argument><expr><literal type="string" pos:line="1717" pos:column="23">"failed to write commit object"<pos:position pos:line="1717" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="1717" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="1717" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1717" pos:column="57"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="1719" pos:column="9">reflog_msg<pos:position pos:line="1719" pos:column="19"/></name> <operator pos:line="1719" pos:column="20">=<pos:position pos:line="1719" pos:column="21"/></operator> <call><name pos:line="1719" pos:column="22">getenv<pos:position pos:line="1719" pos:column="28"/></name><argument_list pos:line="1719" pos:column="28">(<argument><expr><literal type="string" pos:line="1719" pos:column="29">"GIT_REFLOG_ACTION"<pos:position pos:line="1719" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="1719" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="1719" pos:column="50"/></expr_stmt>
	<if pos:line="1720" pos:column="9">if <condition pos:line="1720" pos:column="12">(<expr><operator pos:line="1720" pos:column="13">!<pos:position pos:line="1720" pos:column="14"/></operator><name pos:line="1720" pos:column="14">reflog_msg<pos:position pos:line="1720" pos:column="24"/></name></expr>)<pos:position pos:line="1720" pos:column="25"/></condition><then pos:line="1720" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><name pos:line="1721" pos:column="17">reflog_msg<pos:position pos:line="1721" pos:column="27"/></name> <operator pos:line="1721" pos:column="28">=<pos:position pos:line="1721" pos:column="29"/></operator> <literal type="string" pos:line="1721" pos:column="30">"am"<pos:position pos:line="1721" pos:column="34"/></literal></expr>;<pos:position pos:line="1721" pos:column="35"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="1723" pos:column="9">strbuf_addf<pos:position pos:line="1723" pos:column="20"/></name><argument_list pos:line="1723" pos:column="20">(<argument><expr><operator pos:line="1723" pos:column="21">&amp;<pos:position pos:line="1723" pos:column="26"/></operator><name pos:line="1723" pos:column="22">sb<pos:position pos:line="1723" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1723" pos:column="26">"%s: %.*s"<pos:position pos:line="1723" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="1723" pos:column="38">reflog_msg<pos:position pos:line="1723" pos:column="48"/></name></expr></argument>, <argument><expr><call><name pos:line="1723" pos:column="50">linelen<pos:position pos:line="1723" pos:column="57"/></name><argument_list pos:line="1723" pos:column="57">(<argument><expr><name><name pos:line="1723" pos:column="58">state<pos:position pos:line="1723" pos:column="63"/></name><operator pos:line="1723" pos:column="63">-&gt;<pos:position pos:line="1723" pos:column="68"/></operator><name pos:line="1723" pos:column="65">msg<pos:position pos:line="1723" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="1723" pos:column="69"/></argument_list></call></expr></argument>,
			<argument><expr><name><name pos:line="1724" pos:column="25">state<pos:position pos:line="1724" pos:column="30"/></name><operator pos:line="1724" pos:column="30">-&gt;<pos:position pos:line="1724" pos:column="35"/></operator><name pos:line="1724" pos:column="32">msg<pos:position pos:line="1724" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="1724" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1724" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1726" pos:column="9">update_ref<pos:position pos:line="1726" pos:column="19"/></name><argument_list pos:line="1726" pos:column="19">(<argument><expr><name><name pos:line="1726" pos:column="20">sb<pos:position pos:line="1726" pos:column="22"/></name><operator pos:line="1726" pos:column="22">.<pos:position pos:line="1726" pos:column="23"/></operator><name pos:line="1726" pos:column="23">buf<pos:position pos:line="1726" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="1726" pos:column="28">"HEAD"<pos:position pos:line="1726" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="1726" pos:column="36">commit<pos:position pos:line="1726" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1726" pos:column="44">ptr<pos:position pos:line="1726" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1726" pos:column="49">0<pos:position pos:line="1726" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="1726" pos:column="52">UPDATE_REFS_DIE_ON_ERR<pos:position pos:line="1726" pos:column="74"/></name></expr></argument>)<pos:position pos:line="1726" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="1726" pos:column="76"/></expr_stmt>

	<if pos:line="1728" pos:column="9">if <condition pos:line="1728" pos:column="12">(<expr><name><name pos:line="1728" pos:column="13">state<pos:position pos:line="1728" pos:column="18"/></name><operator pos:line="1728" pos:column="18">-&gt;<pos:position pos:line="1728" pos:column="23"/></operator><name pos:line="1728" pos:column="20">rebasing<pos:position pos:line="1728" pos:column="28"/></name></name></expr>)<pos:position pos:line="1728" pos:column="29"/></condition><then pos:line="1728" pos:column="29"> <block pos:line="1728" pos:column="30">{
		<decl_stmt><decl><type><name pos:line="1729" pos:column="17">FILE<pos:position pos:line="1729" pos:column="21"/></name> <modifier pos:line="1729" pos:column="22">*<pos:position pos:line="1729" pos:column="23"/></modifier></type><name pos:line="1729" pos:column="23">fp<pos:position pos:line="1729" pos:column="25"/></name> <init pos:line="1729" pos:column="26">= <expr><call><name pos:line="1729" pos:column="28">xfopen<pos:position pos:line="1729" pos:column="34"/></name><argument_list pos:line="1729" pos:column="34">(<argument><expr><call><name pos:line="1729" pos:column="35">am_path<pos:position pos:line="1729" pos:column="42"/></name><argument_list pos:line="1729" pos:column="42">(<argument><expr><name pos:line="1729" pos:column="43">state<pos:position pos:line="1729" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1729" pos:column="50">"rewritten"<pos:position pos:line="1729" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="1729" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="1729" pos:column="64">"a"<pos:position pos:line="1729" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="1729" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1729" pos:column="69"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="1731" pos:column="17">assert<pos:position pos:line="1731" pos:column="23"/></name><argument_list pos:line="1731" pos:column="23">(<argument><expr><operator pos:line="1731" pos:column="24">!<pos:position pos:line="1731" pos:column="25"/></operator><call><name pos:line="1731" pos:column="25">is_null_sha1<pos:position pos:line="1731" pos:column="37"/></name><argument_list pos:line="1731" pos:column="37">(<argument><expr><name><name pos:line="1731" pos:column="38">state<pos:position pos:line="1731" pos:column="43"/></name><operator pos:line="1731" pos:column="43">-&gt;<pos:position pos:line="1731" pos:column="48"/></operator><name pos:line="1731" pos:column="45">orig_commit<pos:position pos:line="1731" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="1731" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="1731" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1731" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1732" pos:column="17">fprintf<pos:position pos:line="1732" pos:column="24"/></name><argument_list pos:line="1732" pos:column="24">(<argument><expr><name pos:line="1732" pos:column="25">fp<pos:position pos:line="1732" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1732" pos:column="29">"%s "<pos:position pos:line="1732" pos:column="34"/></literal></expr></argument>, <argument><expr><call><name pos:line="1732" pos:column="36">sha1_to_hex<pos:position pos:line="1732" pos:column="47"/></name><argument_list pos:line="1732" pos:column="47">(<argument><expr><name><name pos:line="1732" pos:column="48">state<pos:position pos:line="1732" pos:column="53"/></name><operator pos:line="1732" pos:column="53">-&gt;<pos:position pos:line="1732" pos:column="58"/></operator><name pos:line="1732" pos:column="55">orig_commit<pos:position pos:line="1732" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="1732" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="1732" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="1732" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1733" pos:column="17">fprintf<pos:position pos:line="1733" pos:column="24"/></name><argument_list pos:line="1733" pos:column="24">(<argument><expr><name pos:line="1733" pos:column="25">fp<pos:position pos:line="1733" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1733" pos:column="29">"%s\n"<pos:position pos:line="1733" pos:column="35"/></literal></expr></argument>, <argument><expr><call><name pos:line="1733" pos:column="37">sha1_to_hex<pos:position pos:line="1733" pos:column="48"/></name><argument_list pos:line="1733" pos:column="48">(<argument><expr><name pos:line="1733" pos:column="49">commit<pos:position pos:line="1733" pos:column="55"/></name></expr></argument>)<pos:position pos:line="1733" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="1733" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1733" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1734" pos:column="17">fclose<pos:position pos:line="1734" pos:column="23"/></name><argument_list pos:line="1734" pos:column="23">(<argument><expr><name pos:line="1734" pos:column="24">fp<pos:position pos:line="1734" pos:column="26"/></name></expr></argument>)<pos:position pos:line="1734" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="1734" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="1735" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="1737" pos:column="9">run_hook_le<pos:position pos:line="1737" pos:column="20"/></name><argument_list pos:line="1737" pos:column="20">(<argument><expr><name pos:line="1737" pos:column="21">NULL<pos:position pos:line="1737" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1737" pos:column="27">"post-applypatch"<pos:position pos:line="1737" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="1737" pos:column="46">NULL<pos:position pos:line="1737" pos:column="50"/></name></expr></argument>)<pos:position pos:line="1737" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1737" pos:column="52"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1739" pos:column="9">strbuf_release<pos:position pos:line="1739" pos:column="23"/></name><argument_list pos:line="1739" pos:column="23">(<argument><expr><operator pos:line="1739" pos:column="24">&amp;<pos:position pos:line="1739" pos:column="29"/></operator><name pos:line="1739" pos:column="25">sb<pos:position pos:line="1739" pos:column="27"/></name></expr></argument>)<pos:position pos:line="1739" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1739" pos:column="29"/></expr_stmt>
}<pos:position pos:line="1740" pos:column="2"/></block></function>

<comment type="block" pos:line="1742" pos:column="1">/**
 * Validates the am_state for resuming -- the "msg" and authorship fields must
 * be filled up.
 */</comment>
<function><specifier pos:line="1746" pos:column="1">static<pos:position pos:line="1746" pos:column="7"/></specifier> <type><name pos:line="1746" pos:column="8">void<pos:position pos:line="1746" pos:column="12"/></name></type> <name pos:line="1746" pos:column="13">validate_resume_state<pos:position pos:line="1746" pos:column="34"/></name><parameter_list pos:line="1746" pos:column="34">(<parameter><decl><type><specifier pos:line="1746" pos:column="35">const<pos:position pos:line="1746" pos:column="40"/></specifier> <name><name pos:line="1746" pos:column="41">struct<pos:position pos:line="1746" pos:column="47"/></name> <name pos:line="1746" pos:column="48">am_state<pos:position pos:line="1746" pos:column="56"/></name></name> <modifier pos:line="1746" pos:column="57">*<pos:position pos:line="1746" pos:column="58"/></modifier></type><name pos:line="1746" pos:column="58">state<pos:position pos:line="1746" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1746" pos:column="64"/></parameter_list>
<block pos:line="1747" pos:column="1">{
	<if pos:line="1748" pos:column="9">if <condition pos:line="1748" pos:column="12">(<expr><operator pos:line="1748" pos:column="13">!<pos:position pos:line="1748" pos:column="14"/></operator><name><name pos:line="1748" pos:column="14">state<pos:position pos:line="1748" pos:column="19"/></name><operator pos:line="1748" pos:column="19">-&gt;<pos:position pos:line="1748" pos:column="24"/></operator><name pos:line="1748" pos:column="21">msg<pos:position pos:line="1748" pos:column="24"/></name></name></expr>)<pos:position pos:line="1748" pos:column="25"/></condition><then pos:line="1748" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1749" pos:column="17">die<pos:position pos:line="1749" pos:column="20"/></name><argument_list pos:line="1749" pos:column="20">(<argument><expr><call><name pos:line="1749" pos:column="21">_<pos:position pos:line="1749" pos:column="22"/></name><argument_list pos:line="1749" pos:column="22">(<argument><expr><literal type="string" pos:line="1749" pos:column="23">"cannot resume: %s does not exist."<pos:position pos:line="1749" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="1749" pos:column="59"/></argument_list></call></expr></argument>,
			<argument><expr><call><name pos:line="1750" pos:column="25">am_path<pos:position pos:line="1750" pos:column="32"/></name><argument_list pos:line="1750" pos:column="32">(<argument><expr><name pos:line="1750" pos:column="33">state<pos:position pos:line="1750" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1750" pos:column="40">"final-commit"<pos:position pos:line="1750" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="1750" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="1750" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1750" pos:column="57"/></expr_stmt></block></then></if>

	<if pos:line="1752" pos:column="9">if <condition pos:line="1752" pos:column="12">(<expr><operator pos:line="1752" pos:column="13">!<pos:position pos:line="1752" pos:column="14"/></operator><name><name pos:line="1752" pos:column="14">state<pos:position pos:line="1752" pos:column="19"/></name><operator pos:line="1752" pos:column="19">-&gt;<pos:position pos:line="1752" pos:column="24"/></operator><name pos:line="1752" pos:column="21">author_name<pos:position pos:line="1752" pos:column="32"/></name></name> <operator pos:line="1752" pos:column="33">||<pos:position pos:line="1752" pos:column="35"/></operator> <operator pos:line="1752" pos:column="36">!<pos:position pos:line="1752" pos:column="37"/></operator><name><name pos:line="1752" pos:column="37">state<pos:position pos:line="1752" pos:column="42"/></name><operator pos:line="1752" pos:column="42">-&gt;<pos:position pos:line="1752" pos:column="47"/></operator><name pos:line="1752" pos:column="44">author_email<pos:position pos:line="1752" pos:column="56"/></name></name> <operator pos:line="1752" pos:column="57">||<pos:position pos:line="1752" pos:column="59"/></operator> <operator pos:line="1752" pos:column="60">!<pos:position pos:line="1752" pos:column="61"/></operator><name><name pos:line="1752" pos:column="61">state<pos:position pos:line="1752" pos:column="66"/></name><operator pos:line="1752" pos:column="66">-&gt;<pos:position pos:line="1752" pos:column="71"/></operator><name pos:line="1752" pos:column="68">author_date<pos:position pos:line="1752" pos:column="79"/></name></name></expr>)<pos:position pos:line="1752" pos:column="80"/></condition><then pos:line="1752" pos:column="80">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1753" pos:column="17">die<pos:position pos:line="1753" pos:column="20"/></name><argument_list pos:line="1753" pos:column="20">(<argument><expr><call><name pos:line="1753" pos:column="21">_<pos:position pos:line="1753" pos:column="22"/></name><argument_list pos:line="1753" pos:column="22">(<argument><expr><literal type="string" pos:line="1753" pos:column="23">"cannot resume: %s does not exist."<pos:position pos:line="1753" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="1753" pos:column="59"/></argument_list></call></expr></argument>,
			<argument><expr><call><name pos:line="1754" pos:column="25">am_path<pos:position pos:line="1754" pos:column="32"/></name><argument_list pos:line="1754" pos:column="32">(<argument><expr><name pos:line="1754" pos:column="33">state<pos:position pos:line="1754" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1754" pos:column="40">"author-script"<pos:position pos:line="1754" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="1754" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="1754" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1754" pos:column="58"/></expr_stmt></block></then></if>
}<pos:position pos:line="1755" pos:column="2"/></block></function>

<comment type="block" pos:line="1757" pos:column="1">/**
 * Interactively prompt the user on whether the current patch should be
 * applied.
 *
 * Returns 0 if the user chooses to apply the patch, 1 if the user chooses to
 * skip it.
 */</comment>
<function><specifier pos:line="1764" pos:column="1">static<pos:position pos:line="1764" pos:column="7"/></specifier> <type><name pos:line="1764" pos:column="8">int<pos:position pos:line="1764" pos:column="11"/></name></type> <name pos:line="1764" pos:column="12">do_interactive<pos:position pos:line="1764" pos:column="26"/></name><parameter_list pos:line="1764" pos:column="26">(<parameter><decl><type><name><name pos:line="1764" pos:column="27">struct<pos:position pos:line="1764" pos:column="33"/></name> <name pos:line="1764" pos:column="34">am_state<pos:position pos:line="1764" pos:column="42"/></name></name> <modifier pos:line="1764" pos:column="43">*<pos:position pos:line="1764" pos:column="44"/></modifier></type><name pos:line="1764" pos:column="44">state<pos:position pos:line="1764" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1764" pos:column="50"/></parameter_list>
<block pos:line="1765" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="1766" pos:column="9">assert<pos:position pos:line="1766" pos:column="15"/></name><argument_list pos:line="1766" pos:column="15">(<argument><expr><name><name pos:line="1766" pos:column="16">state<pos:position pos:line="1766" pos:column="21"/></name><operator pos:line="1766" pos:column="21">-&gt;<pos:position pos:line="1766" pos:column="26"/></operator><name pos:line="1766" pos:column="23">msg<pos:position pos:line="1766" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="1766" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="1766" pos:column="28"/></expr_stmt>

	<if pos:line="1768" pos:column="9">if <condition pos:line="1768" pos:column="12">(<expr><operator pos:line="1768" pos:column="13">!<pos:position pos:line="1768" pos:column="14"/></operator><call><name pos:line="1768" pos:column="14">isatty<pos:position pos:line="1768" pos:column="20"/></name><argument_list pos:line="1768" pos:column="20">(<argument><expr><literal type="number" pos:line="1768" pos:column="21">0<pos:position pos:line="1768" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="1768" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="1768" pos:column="24"/></condition><then pos:line="1768" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="1769" pos:column="17">die<pos:position pos:line="1769" pos:column="20"/></name><argument_list pos:line="1769" pos:column="20">(<argument><expr><call><name pos:line="1769" pos:column="21">_<pos:position pos:line="1769" pos:column="22"/></name><argument_list pos:line="1769" pos:column="22">(<argument><expr><literal type="string" pos:line="1769" pos:column="23">"cannot be interactive without stdin connected to a terminal."<pos:position pos:line="1769" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="1769" pos:column="86"/></argument_list></call></expr></argument>)<pos:position pos:line="1769" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="1769" pos:column="88"/></expr_stmt></block></then></if>

	<for pos:line="1771" pos:column="9">for <control pos:line="1771" pos:column="13">(<init pos:line="1771" pos:column="14">;<pos:position pos:line="1771" pos:column="15"/></init><condition pos:line="1771" pos:column="15">;<pos:position pos:line="1771" pos:column="16"/></condition><incr/>)<pos:position pos:line="1771" pos:column="17"/></control> <block pos:line="1771" pos:column="18">{
		<decl_stmt><decl><type><specifier pos:line="1772" pos:column="17">const<pos:position pos:line="1772" pos:column="22"/></specifier> <name pos:line="1772" pos:column="23">char<pos:position pos:line="1772" pos:column="27"/></name> <modifier pos:line="1772" pos:column="28">*<pos:position pos:line="1772" pos:column="29"/></modifier></type><name pos:line="1772" pos:column="29">reply<pos:position pos:line="1772" pos:column="34"/></name></decl>;<pos:position pos:line="1772" pos:column="35"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="1774" pos:column="17">puts<pos:position pos:line="1774" pos:column="21"/></name><argument_list pos:line="1774" pos:column="21">(<argument><expr><call><name pos:line="1774" pos:column="22">_<pos:position pos:line="1774" pos:column="23"/></name><argument_list pos:line="1774" pos:column="23">(<argument><expr><literal type="string" pos:line="1774" pos:column="24">"Commit Body is:"<pos:position pos:line="1774" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="1774" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="1774" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1774" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1775" pos:column="17">puts<pos:position pos:line="1775" pos:column="21"/></name><argument_list pos:line="1775" pos:column="21">(<argument><expr><literal type="string" pos:line="1775" pos:column="22">"--------------------------"<pos:position pos:line="1775" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="1775" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1775" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1776" pos:column="17">printf<pos:position pos:line="1776" pos:column="23"/></name><argument_list pos:line="1776" pos:column="23">(<argument><expr><literal type="string" pos:line="1776" pos:column="24">"%s"<pos:position pos:line="1776" pos:column="28"/></literal></expr></argument>, <argument><expr><name><name pos:line="1776" pos:column="30">state<pos:position pos:line="1776" pos:column="35"/></name><operator pos:line="1776" pos:column="35">-&gt;<pos:position pos:line="1776" pos:column="40"/></operator><name pos:line="1776" pos:column="37">msg<pos:position pos:line="1776" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="1776" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="1776" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1777" pos:column="17">puts<pos:position pos:line="1777" pos:column="21"/></name><argument_list pos:line="1777" pos:column="21">(<argument><expr><literal type="string" pos:line="1777" pos:column="22">"--------------------------"<pos:position pos:line="1777" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="1777" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1777" pos:column="52"/></expr_stmt>

		<comment type="block" pos:line="1779" pos:column="17">/*
		 * TRANSLATORS: Make sure to include [y], [n], [e], [v] and [a]
		 * in your translation. The program will only accept English
		 * input at this point.
		 */</comment>
		<expr_stmt><expr><name pos:line="1784" pos:column="17">reply<pos:position pos:line="1784" pos:column="22"/></name> <operator pos:line="1784" pos:column="23">=<pos:position pos:line="1784" pos:column="24"/></operator> <call><name pos:line="1784" pos:column="25">git_prompt<pos:position pos:line="1784" pos:column="35"/></name><argument_list pos:line="1784" pos:column="35">(<argument><expr><call><name pos:line="1784" pos:column="36">_<pos:position pos:line="1784" pos:column="37"/></name><argument_list pos:line="1784" pos:column="37">(<argument><expr><literal type="string" pos:line="1784" pos:column="38">"Apply? [y]es/[n]o/[e]dit/[v]iew patch/[a]ccept all: "<pos:position pos:line="1784" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="1784" pos:column="93"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="1784" pos:column="95">PROMPT_ECHO<pos:position pos:line="1784" pos:column="106"/></name></expr></argument>)<pos:position pos:line="1784" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="1784" pos:column="108"/></expr_stmt>

		<if pos:line="1786" pos:column="17">if <condition pos:line="1786" pos:column="20">(<expr><operator pos:line="1786" pos:column="21">!<pos:position pos:line="1786" pos:column="22"/></operator><name pos:line="1786" pos:column="22">reply<pos:position pos:line="1786" pos:column="27"/></name></expr>)<pos:position pos:line="1786" pos:column="28"/></condition><then pos:line="1786" pos:column="28"> <block pos:line="1786" pos:column="29">{
			<continue pos:line="1787" pos:column="25">continue;<pos:position pos:line="1787" pos:column="34"/></continue>
		}<pos:position pos:line="1788" pos:column="18"/></block></then> <elseif pos:line="1788" pos:column="19">else <if pos:line="1788" pos:column="24">if <condition pos:line="1788" pos:column="27">(<expr><operator pos:line="1788" pos:column="28">*<pos:position pos:line="1788" pos:column="29"/></operator><name pos:line="1788" pos:column="29">reply<pos:position pos:line="1788" pos:column="34"/></name> <operator pos:line="1788" pos:column="35">==<pos:position pos:line="1788" pos:column="37"/></operator> <literal type="char" pos:line="1788" pos:column="38">'y'<pos:position pos:line="1788" pos:column="41"/></literal> <operator pos:line="1788" pos:column="42">||<pos:position pos:line="1788" pos:column="44"/></operator> <operator pos:line="1788" pos:column="45">*<pos:position pos:line="1788" pos:column="46"/></operator><name pos:line="1788" pos:column="46">reply<pos:position pos:line="1788" pos:column="51"/></name> <operator pos:line="1788" pos:column="52">==<pos:position pos:line="1788" pos:column="54"/></operator> <literal type="char" pos:line="1788" pos:column="55">'Y'<pos:position pos:line="1788" pos:column="58"/></literal></expr>)<pos:position pos:line="1788" pos:column="59"/></condition><then pos:line="1788" pos:column="59"> <block pos:line="1788" pos:column="60">{
			<return pos:line="1789" pos:column="25">return <expr><literal type="number" pos:line="1789" pos:column="32">0<pos:position pos:line="1789" pos:column="33"/></literal></expr>;<pos:position pos:line="1789" pos:column="34"/></return>
		}<pos:position pos:line="1790" pos:column="18"/></block></then></if></elseif> <elseif pos:line="1790" pos:column="19">else <if pos:line="1790" pos:column="24">if <condition pos:line="1790" pos:column="27">(<expr><operator pos:line="1790" pos:column="28">*<pos:position pos:line="1790" pos:column="29"/></operator><name pos:line="1790" pos:column="29">reply<pos:position pos:line="1790" pos:column="34"/></name> <operator pos:line="1790" pos:column="35">==<pos:position pos:line="1790" pos:column="37"/></operator> <literal type="char" pos:line="1790" pos:column="38">'a'<pos:position pos:line="1790" pos:column="41"/></literal> <operator pos:line="1790" pos:column="42">||<pos:position pos:line="1790" pos:column="44"/></operator> <operator pos:line="1790" pos:column="45">*<pos:position pos:line="1790" pos:column="46"/></operator><name pos:line="1790" pos:column="46">reply<pos:position pos:line="1790" pos:column="51"/></name> <operator pos:line="1790" pos:column="52">==<pos:position pos:line="1790" pos:column="54"/></operator> <literal type="char" pos:line="1790" pos:column="55">'A'<pos:position pos:line="1790" pos:column="58"/></literal></expr>)<pos:position pos:line="1790" pos:column="59"/></condition><then pos:line="1790" pos:column="59"> <block pos:line="1790" pos:column="60">{
			<expr_stmt><expr><name><name pos:line="1791" pos:column="25">state<pos:position pos:line="1791" pos:column="30"/></name><operator pos:line="1791" pos:column="30">-&gt;<pos:position pos:line="1791" pos:column="35"/></operator><name pos:line="1791" pos:column="32">interactive<pos:position pos:line="1791" pos:column="43"/></name></name> <operator pos:line="1791" pos:column="44">=<pos:position pos:line="1791" pos:column="45"/></operator> <literal type="number" pos:line="1791" pos:column="46">0<pos:position pos:line="1791" pos:column="47"/></literal></expr>;<pos:position pos:line="1791" pos:column="48"/></expr_stmt>
			<return pos:line="1792" pos:column="25">return <expr><literal type="number" pos:line="1792" pos:column="32">0<pos:position pos:line="1792" pos:column="33"/></literal></expr>;<pos:position pos:line="1792" pos:column="34"/></return>
		}<pos:position pos:line="1793" pos:column="18"/></block></then></if></elseif> <elseif pos:line="1793" pos:column="19">else <if pos:line="1793" pos:column="24">if <condition pos:line="1793" pos:column="27">(<expr><operator pos:line="1793" pos:column="28">*<pos:position pos:line="1793" pos:column="29"/></operator><name pos:line="1793" pos:column="29">reply<pos:position pos:line="1793" pos:column="34"/></name> <operator pos:line="1793" pos:column="35">==<pos:position pos:line="1793" pos:column="37"/></operator> <literal type="char" pos:line="1793" pos:column="38">'n'<pos:position pos:line="1793" pos:column="41"/></literal> <operator pos:line="1793" pos:column="42">||<pos:position pos:line="1793" pos:column="44"/></operator> <operator pos:line="1793" pos:column="45">*<pos:position pos:line="1793" pos:column="46"/></operator><name pos:line="1793" pos:column="46">reply<pos:position pos:line="1793" pos:column="51"/></name> <operator pos:line="1793" pos:column="52">==<pos:position pos:line="1793" pos:column="54"/></operator> <literal type="char" pos:line="1793" pos:column="55">'N'<pos:position pos:line="1793" pos:column="58"/></literal></expr>)<pos:position pos:line="1793" pos:column="59"/></condition><then pos:line="1793" pos:column="59"> <block pos:line="1793" pos:column="60">{
			<return pos:line="1794" pos:column="25">return <expr><literal type="number" pos:line="1794" pos:column="32">1<pos:position pos:line="1794" pos:column="33"/></literal></expr>;<pos:position pos:line="1794" pos:column="34"/></return>
		}<pos:position pos:line="1795" pos:column="18"/></block></then></if></elseif> <elseif pos:line="1795" pos:column="19">else <if pos:line="1795" pos:column="24">if <condition pos:line="1795" pos:column="27">(<expr><operator pos:line="1795" pos:column="28">*<pos:position pos:line="1795" pos:column="29"/></operator><name pos:line="1795" pos:column="29">reply<pos:position pos:line="1795" pos:column="34"/></name> <operator pos:line="1795" pos:column="35">==<pos:position pos:line="1795" pos:column="37"/></operator> <literal type="char" pos:line="1795" pos:column="38">'e'<pos:position pos:line="1795" pos:column="41"/></literal> <operator pos:line="1795" pos:column="42">||<pos:position pos:line="1795" pos:column="44"/></operator> <operator pos:line="1795" pos:column="45">*<pos:position pos:line="1795" pos:column="46"/></operator><name pos:line="1795" pos:column="46">reply<pos:position pos:line="1795" pos:column="51"/></name> <operator pos:line="1795" pos:column="52">==<pos:position pos:line="1795" pos:column="54"/></operator> <literal type="char" pos:line="1795" pos:column="55">'E'<pos:position pos:line="1795" pos:column="58"/></literal></expr>)<pos:position pos:line="1795" pos:column="59"/></condition><then pos:line="1795" pos:column="59"> <block pos:line="1795" pos:column="60">{
			<decl_stmt><decl><type><name><name pos:line="1796" pos:column="25">struct<pos:position pos:line="1796" pos:column="31"/></name> <name pos:line="1796" pos:column="32">strbuf<pos:position pos:line="1796" pos:column="38"/></name></name></type> <name pos:line="1796" pos:column="39">msg<pos:position pos:line="1796" pos:column="42"/></name> <init pos:line="1796" pos:column="43">= <expr><name pos:line="1796" pos:column="45">STRBUF_INIT<pos:position pos:line="1796" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="1796" pos:column="57"/></decl_stmt>

			<if pos:line="1798" pos:column="25">if <condition pos:line="1798" pos:column="28">(<expr><operator pos:line="1798" pos:column="29">!<pos:position pos:line="1798" pos:column="30"/></operator><call><name pos:line="1798" pos:column="30">launch_editor<pos:position pos:line="1798" pos:column="43"/></name><argument_list pos:line="1798" pos:column="43">(<argument><expr><call><name pos:line="1798" pos:column="44">am_path<pos:position pos:line="1798" pos:column="51"/></name><argument_list pos:line="1798" pos:column="51">(<argument><expr><name pos:line="1798" pos:column="52">state<pos:position pos:line="1798" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1798" pos:column="59">"final-commit"<pos:position pos:line="1798" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="1798" pos:column="74"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="1798" pos:column="76">&amp;<pos:position pos:line="1798" pos:column="81"/></operator><name pos:line="1798" pos:column="77">msg<pos:position pos:line="1798" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="1798" pos:column="82">NULL<pos:position pos:line="1798" pos:column="86"/></name></expr></argument>)<pos:position pos:line="1798" pos:column="87"/></argument_list></call></expr>)<pos:position pos:line="1798" pos:column="88"/></condition><then pos:line="1798" pos:column="88"> <block pos:line="1798" pos:column="89">{
				<expr_stmt><expr><call><name pos:line="1799" pos:column="33">free<pos:position pos:line="1799" pos:column="37"/></name><argument_list pos:line="1799" pos:column="37">(<argument><expr><name><name pos:line="1799" pos:column="38">state<pos:position pos:line="1799" pos:column="43"/></name><operator pos:line="1799" pos:column="43">-&gt;<pos:position pos:line="1799" pos:column="48"/></operator><name pos:line="1799" pos:column="45">msg<pos:position pos:line="1799" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="1799" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="1799" pos:column="50"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="1800" pos:column="33">state<pos:position pos:line="1800" pos:column="38"/></name><operator pos:line="1800" pos:column="38">-&gt;<pos:position pos:line="1800" pos:column="43"/></operator><name pos:line="1800" pos:column="40">msg<pos:position pos:line="1800" pos:column="43"/></name></name> <operator pos:line="1800" pos:column="44">=<pos:position pos:line="1800" pos:column="45"/></operator> <call><name pos:line="1800" pos:column="46">strbuf_detach<pos:position pos:line="1800" pos:column="59"/></name><argument_list pos:line="1800" pos:column="59">(<argument><expr><operator pos:line="1800" pos:column="60">&amp;<pos:position pos:line="1800" pos:column="65"/></operator><name pos:line="1800" pos:column="61">msg<pos:position pos:line="1800" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="1800" pos:column="66">&amp;<pos:position pos:line="1800" pos:column="71"/></operator><name><name pos:line="1800" pos:column="67">state<pos:position pos:line="1800" pos:column="72"/></name><operator pos:line="1800" pos:column="72">-&gt;<pos:position pos:line="1800" pos:column="77"/></operator><name pos:line="1800" pos:column="74">msg_len<pos:position pos:line="1800" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="1800" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="1800" pos:column="83"/></expr_stmt>
			}<pos:position pos:line="1801" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="1802" pos:column="25">strbuf_release<pos:position pos:line="1802" pos:column="39"/></name><argument_list pos:line="1802" pos:column="39">(<argument><expr><operator pos:line="1802" pos:column="40">&amp;<pos:position pos:line="1802" pos:column="45"/></operator><name pos:line="1802" pos:column="41">msg<pos:position pos:line="1802" pos:column="44"/></name></expr></argument>)<pos:position pos:line="1802" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1802" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="1803" pos:column="18"/></block></then></if></elseif> <elseif pos:line="1803" pos:column="19">else <if pos:line="1803" pos:column="24">if <condition pos:line="1803" pos:column="27">(<expr><operator pos:line="1803" pos:column="28">*<pos:position pos:line="1803" pos:column="29"/></operator><name pos:line="1803" pos:column="29">reply<pos:position pos:line="1803" pos:column="34"/></name> <operator pos:line="1803" pos:column="35">==<pos:position pos:line="1803" pos:column="37"/></operator> <literal type="char" pos:line="1803" pos:column="38">'v'<pos:position pos:line="1803" pos:column="41"/></literal> <operator pos:line="1803" pos:column="42">||<pos:position pos:line="1803" pos:column="44"/></operator> <operator pos:line="1803" pos:column="45">*<pos:position pos:line="1803" pos:column="46"/></operator><name pos:line="1803" pos:column="46">reply<pos:position pos:line="1803" pos:column="51"/></name> <operator pos:line="1803" pos:column="52">==<pos:position pos:line="1803" pos:column="54"/></operator> <literal type="char" pos:line="1803" pos:column="55">'V'<pos:position pos:line="1803" pos:column="58"/></literal></expr>)<pos:position pos:line="1803" pos:column="59"/></condition><then pos:line="1803" pos:column="59"> <block pos:line="1803" pos:column="60">{
			<decl_stmt><decl><type><specifier pos:line="1804" pos:column="25">const<pos:position pos:line="1804" pos:column="30"/></specifier> <name pos:line="1804" pos:column="31">char<pos:position pos:line="1804" pos:column="35"/></name> <modifier pos:line="1804" pos:column="36">*<pos:position pos:line="1804" pos:column="37"/></modifier></type><name pos:line="1804" pos:column="37">pager<pos:position pos:line="1804" pos:column="42"/></name> <init pos:line="1804" pos:column="43">= <expr><call><name pos:line="1804" pos:column="45">git_pager<pos:position pos:line="1804" pos:column="54"/></name><argument_list pos:line="1804" pos:column="54">(<argument><expr><literal type="number" pos:line="1804" pos:column="55">1<pos:position pos:line="1804" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="1804" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1804" pos:column="58"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="1805" pos:column="25">struct<pos:position pos:line="1805" pos:column="31"/></name> <name pos:line="1805" pos:column="32">child_process<pos:position pos:line="1805" pos:column="45"/></name></name></type> <name pos:line="1805" pos:column="46">cp<pos:position pos:line="1805" pos:column="48"/></name> <init pos:line="1805" pos:column="49">= <expr><name pos:line="1805" pos:column="51">CHILD_PROCESS_INIT<pos:position pos:line="1805" pos:column="69"/></name></expr></init></decl>;<pos:position pos:line="1805" pos:column="70"/></decl_stmt>

			<if pos:line="1807" pos:column="25">if <condition pos:line="1807" pos:column="28">(<expr><operator pos:line="1807" pos:column="29">!<pos:position pos:line="1807" pos:column="30"/></operator><name pos:line="1807" pos:column="30">pager<pos:position pos:line="1807" pos:column="35"/></name></expr>)<pos:position pos:line="1807" pos:column="36"/></condition><then pos:line="1807" pos:column="36">
				<block type="pseudo"><expr_stmt><expr><name pos:line="1808" pos:column="33">pager<pos:position pos:line="1808" pos:column="38"/></name> <operator pos:line="1808" pos:column="39">=<pos:position pos:line="1808" pos:column="40"/></operator> <literal type="string" pos:line="1808" pos:column="41">"cat"<pos:position pos:line="1808" pos:column="46"/></literal></expr>;<pos:position pos:line="1808" pos:column="47"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="1809" pos:column="25">prepare_pager_args<pos:position pos:line="1809" pos:column="43"/></name><argument_list pos:line="1809" pos:column="43">(<argument><expr><operator pos:line="1809" pos:column="44">&amp;<pos:position pos:line="1809" pos:column="49"/></operator><name pos:line="1809" pos:column="45">cp<pos:position pos:line="1809" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="1809" pos:column="49">pager<pos:position pos:line="1809" pos:column="54"/></name></expr></argument>)<pos:position pos:line="1809" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1809" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="1810" pos:column="25">argv_array_push<pos:position pos:line="1810" pos:column="40"/></name><argument_list pos:line="1810" pos:column="40">(<argument><expr><operator pos:line="1810" pos:column="41">&amp;<pos:position pos:line="1810" pos:column="46"/></operator><name><name pos:line="1810" pos:column="42">cp<pos:position pos:line="1810" pos:column="44"/></name><operator pos:line="1810" pos:column="44">.<pos:position pos:line="1810" pos:column="45"/></operator><name pos:line="1810" pos:column="45">args<pos:position pos:line="1810" pos:column="49"/></name></name></expr></argument>, <argument><expr><call><name pos:line="1810" pos:column="51">am_path<pos:position pos:line="1810" pos:column="58"/></name><argument_list pos:line="1810" pos:column="58">(<argument><expr><name pos:line="1810" pos:column="59">state<pos:position pos:line="1810" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1810" pos:column="66">"patch"<pos:position pos:line="1810" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="1810" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="1810" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="1810" pos:column="76"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="1811" pos:column="25">run_command<pos:position pos:line="1811" pos:column="36"/></name><argument_list pos:line="1811" pos:column="36">(<argument><expr><operator pos:line="1811" pos:column="37">&amp;<pos:position pos:line="1811" pos:column="42"/></operator><name pos:line="1811" pos:column="38">cp<pos:position pos:line="1811" pos:column="40"/></name></expr></argument>)<pos:position pos:line="1811" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="1811" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="1812" pos:column="18"/></block></then></if></elseif></if>
	}<pos:position pos:line="1813" pos:column="10"/></block></for>
}<pos:position pos:line="1814" pos:column="2"/></block></function>

<comment type="block" pos:line="1816" pos:column="1">/**
 * Applies all queued mail.
 *
 * If `resume` is true, we are "resuming". The "msg" and authorship fields, as
 * well as the state directory's "patch" file is used as-is for applying the
 * patch and committing it.
 */</comment>
<function><specifier pos:line="1823" pos:column="1">static<pos:position pos:line="1823" pos:column="7"/></specifier> <type><name pos:line="1823" pos:column="8">void<pos:position pos:line="1823" pos:column="12"/></name></type> <name pos:line="1823" pos:column="13">am_run<pos:position pos:line="1823" pos:column="19"/></name><parameter_list pos:line="1823" pos:column="19">(<parameter><decl><type><name><name pos:line="1823" pos:column="20">struct<pos:position pos:line="1823" pos:column="26"/></name> <name pos:line="1823" pos:column="27">am_state<pos:position pos:line="1823" pos:column="35"/></name></name> <modifier pos:line="1823" pos:column="36">*<pos:position pos:line="1823" pos:column="37"/></modifier></type><name pos:line="1823" pos:column="37">state<pos:position pos:line="1823" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1823" pos:column="44">int<pos:position pos:line="1823" pos:column="47"/></name></type> <name pos:line="1823" pos:column="48">resume<pos:position pos:line="1823" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1823" pos:column="55"/></parameter_list>
<block pos:line="1824" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="1825" pos:column="9">const<pos:position pos:line="1825" pos:column="14"/></specifier> <name pos:line="1825" pos:column="15">char<pos:position pos:line="1825" pos:column="19"/></name> <modifier pos:line="1825" pos:column="20">*<pos:position pos:line="1825" pos:column="21"/></modifier></type><name><name pos:line="1825" pos:column="21">argv_gc_auto<pos:position pos:line="1825" pos:column="33"/></name><index pos:line="1825" pos:column="33">[]<pos:position pos:line="1825" pos:column="35"/></index></name> <init pos:line="1825" pos:column="36">= <expr><block pos:line="1825" pos:column="38">{<expr><literal type="string" pos:line="1825" pos:column="39">"gc"<pos:position pos:line="1825" pos:column="43"/></literal></expr>, <expr><literal type="string" pos:line="1825" pos:column="45">"--auto"<pos:position pos:line="1825" pos:column="53"/></literal></expr>, <expr><name pos:line="1825" pos:column="55">NULL<pos:position pos:line="1825" pos:column="59"/></name></expr>}<pos:position pos:line="1825" pos:column="60"/></block></expr></init></decl>;<pos:position pos:line="1825" pos:column="61"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1826" pos:column="9">struct<pos:position pos:line="1826" pos:column="15"/></name> <name pos:line="1826" pos:column="16">strbuf<pos:position pos:line="1826" pos:column="22"/></name></name></type> <name pos:line="1826" pos:column="23">sb<pos:position pos:line="1826" pos:column="25"/></name> <init pos:line="1826" pos:column="26">= <expr><name pos:line="1826" pos:column="28">STRBUF_INIT<pos:position pos:line="1826" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="1826" pos:column="40"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="1828" pos:column="9">unlink<pos:position pos:line="1828" pos:column="15"/></name><argument_list pos:line="1828" pos:column="15">(<argument><expr><call><name pos:line="1828" pos:column="16">am_path<pos:position pos:line="1828" pos:column="23"/></name><argument_list pos:line="1828" pos:column="23">(<argument><expr><name pos:line="1828" pos:column="24">state<pos:position pos:line="1828" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1828" pos:column="31">"dirtyindex"<pos:position pos:line="1828" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="1828" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="1828" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1828" pos:column="46"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1830" pos:column="9">refresh_and_write_cache<pos:position pos:line="1830" pos:column="32"/></name><argument_list pos:line="1830" pos:column="32">()<pos:position pos:line="1830" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1830" pos:column="35"/></expr_stmt>

	<if pos:line="1832" pos:column="9">if <condition pos:line="1832" pos:column="12">(<expr><call><name pos:line="1832" pos:column="13">index_has_changes<pos:position pos:line="1832" pos:column="30"/></name><argument_list pos:line="1832" pos:column="30">(<argument><expr><operator pos:line="1832" pos:column="31">&amp;<pos:position pos:line="1832" pos:column="36"/></operator><name pos:line="1832" pos:column="32">sb<pos:position pos:line="1832" pos:column="34"/></name></expr></argument>)<pos:position pos:line="1832" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="1832" pos:column="36"/></condition><then pos:line="1832" pos:column="36"> <block pos:line="1832" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="1833" pos:column="17">write_state_bool<pos:position pos:line="1833" pos:column="33"/></name><argument_list pos:line="1833" pos:column="33">(<argument><expr><name pos:line="1833" pos:column="34">state<pos:position pos:line="1833" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1833" pos:column="41">"dirtyindex"<pos:position pos:line="1833" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="1833" pos:column="55">1<pos:position pos:line="1833" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="1833" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1833" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1834" pos:column="17">die<pos:position pos:line="1834" pos:column="20"/></name><argument_list pos:line="1834" pos:column="20">(<argument><expr><call><name pos:line="1834" pos:column="21">_<pos:position pos:line="1834" pos:column="22"/></name><argument_list pos:line="1834" pos:column="22">(<argument><expr><literal type="string" pos:line="1834" pos:column="23">"Dirty index: cannot apply patches (dirty: %s)"<pos:position pos:line="1834" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="1834" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="1834" pos:column="73">sb<pos:position pos:line="1834" pos:column="75"/></name><operator pos:line="1834" pos:column="75">.<pos:position pos:line="1834" pos:column="76"/></operator><name pos:line="1834" pos:column="76">buf<pos:position pos:line="1834" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="1834" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="1834" pos:column="81"/></expr_stmt>
	}<pos:position pos:line="1835" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="1837" pos:column="9">strbuf_release<pos:position pos:line="1837" pos:column="23"/></name><argument_list pos:line="1837" pos:column="23">(<argument><expr><operator pos:line="1837" pos:column="24">&amp;<pos:position pos:line="1837" pos:column="29"/></operator><name pos:line="1837" pos:column="25">sb<pos:position pos:line="1837" pos:column="27"/></name></expr></argument>)<pos:position pos:line="1837" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1837" pos:column="29"/></expr_stmt>

	<while pos:line="1839" pos:column="9">while <condition pos:line="1839" pos:column="15">(<expr><name><name pos:line="1839" pos:column="16">state<pos:position pos:line="1839" pos:column="21"/></name><operator pos:line="1839" pos:column="21">-&gt;<pos:position pos:line="1839" pos:column="26"/></operator><name pos:line="1839" pos:column="23">cur<pos:position pos:line="1839" pos:column="26"/></name></name> <operator pos:line="1839" pos:column="27">&lt;=<pos:position pos:line="1839" pos:column="32"/></operator> <name><name pos:line="1839" pos:column="30">state<pos:position pos:line="1839" pos:column="35"/></name><operator pos:line="1839" pos:column="35">-&gt;<pos:position pos:line="1839" pos:column="40"/></operator><name pos:line="1839" pos:column="37">last<pos:position pos:line="1839" pos:column="41"/></name></name></expr>)<pos:position pos:line="1839" pos:column="42"/></condition> <block pos:line="1839" pos:column="43">{
		<decl_stmt><decl><type><specifier pos:line="1840" pos:column="17">const<pos:position pos:line="1840" pos:column="22"/></specifier> <name pos:line="1840" pos:column="23">char<pos:position pos:line="1840" pos:column="27"/></name> <modifier pos:line="1840" pos:column="28">*<pos:position pos:line="1840" pos:column="29"/></modifier></type><name pos:line="1840" pos:column="29">mail<pos:position pos:line="1840" pos:column="33"/></name> <init pos:line="1840" pos:column="34">= <expr><call><name pos:line="1840" pos:column="36">am_path<pos:position pos:line="1840" pos:column="43"/></name><argument_list pos:line="1840" pos:column="43">(<argument><expr><name pos:line="1840" pos:column="44">state<pos:position pos:line="1840" pos:column="49"/></name></expr></argument>, <argument><expr><call><name pos:line="1840" pos:column="51">msgnum<pos:position pos:line="1840" pos:column="57"/></name><argument_list pos:line="1840" pos:column="57">(<argument><expr><name pos:line="1840" pos:column="58">state<pos:position pos:line="1840" pos:column="63"/></name></expr></argument>)<pos:position pos:line="1840" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="1840" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1840" pos:column="66"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="1841" pos:column="17">int<pos:position pos:line="1841" pos:column="20"/></name></type> <name pos:line="1841" pos:column="21">apply_status<pos:position pos:line="1841" pos:column="33"/></name></decl>;<pos:position pos:line="1841" pos:column="34"/></decl_stmt>

		<if pos:line="1843" pos:column="17">if <condition pos:line="1843" pos:column="20">(<expr><operator pos:line="1843" pos:column="21">!<pos:position pos:line="1843" pos:column="22"/></operator><call><name pos:line="1843" pos:column="22">file_exists<pos:position pos:line="1843" pos:column="33"/></name><argument_list pos:line="1843" pos:column="33">(<argument><expr><name pos:line="1843" pos:column="34">mail<pos:position pos:line="1843" pos:column="38"/></name></expr></argument>)<pos:position pos:line="1843" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="1843" pos:column="40"/></condition><then pos:line="1843" pos:column="40">
			<block type="pseudo"><goto pos:line="1844" pos:column="25">goto <name pos:line="1844" pos:column="30">next<pos:position pos:line="1844" pos:column="34"/></name>;<pos:position pos:line="1844" pos:column="35"/></goto></block></then></if>

		<if pos:line="1846" pos:column="17">if <condition pos:line="1846" pos:column="20">(<expr><name pos:line="1846" pos:column="21">resume<pos:position pos:line="1846" pos:column="27"/></name></expr>)<pos:position pos:line="1846" pos:column="28"/></condition><then pos:line="1846" pos:column="28"> <block pos:line="1846" pos:column="29">{
			<expr_stmt><expr><call><name pos:line="1847" pos:column="25">validate_resume_state<pos:position pos:line="1847" pos:column="46"/></name><argument_list pos:line="1847" pos:column="46">(<argument><expr><name pos:line="1847" pos:column="47">state<pos:position pos:line="1847" pos:column="52"/></name></expr></argument>)<pos:position pos:line="1847" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1847" pos:column="54"/></expr_stmt>
		}<pos:position pos:line="1848" pos:column="18"/></block></then> <else pos:line="1848" pos:column="19">else <block pos:line="1848" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="1849" pos:column="25">int<pos:position pos:line="1849" pos:column="28"/></name></type> <name pos:line="1849" pos:column="29">skip<pos:position pos:line="1849" pos:column="33"/></name></decl>;<pos:position pos:line="1849" pos:column="34"/></decl_stmt>

			<if pos:line="1851" pos:column="25">if <condition pos:line="1851" pos:column="28">(<expr><name><name pos:line="1851" pos:column="29">state<pos:position pos:line="1851" pos:column="34"/></name><operator pos:line="1851" pos:column="34">-&gt;<pos:position pos:line="1851" pos:column="39"/></operator><name pos:line="1851" pos:column="36">rebasing<pos:position pos:line="1851" pos:column="44"/></name></name></expr>)<pos:position pos:line="1851" pos:column="45"/></condition><then pos:line="1851" pos:column="45">
				<block type="pseudo"><expr_stmt><expr><name pos:line="1852" pos:column="33">skip<pos:position pos:line="1852" pos:column="37"/></name> <operator pos:line="1852" pos:column="38">=<pos:position pos:line="1852" pos:column="39"/></operator> <call><name pos:line="1852" pos:column="40">parse_mail_rebase<pos:position pos:line="1852" pos:column="57"/></name><argument_list pos:line="1852" pos:column="57">(<argument><expr><name pos:line="1852" pos:column="58">state<pos:position pos:line="1852" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="1852" pos:column="65">mail<pos:position pos:line="1852" pos:column="69"/></name></expr></argument>)<pos:position pos:line="1852" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="1852" pos:column="71"/></expr_stmt></block></then>
			<else pos:line="1853" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="1854" pos:column="33">skip<pos:position pos:line="1854" pos:column="37"/></name> <operator pos:line="1854" pos:column="38">=<pos:position pos:line="1854" pos:column="39"/></operator> <call><name pos:line="1854" pos:column="40">parse_mail<pos:position pos:line="1854" pos:column="50"/></name><argument_list pos:line="1854" pos:column="50">(<argument><expr><name pos:line="1854" pos:column="51">state<pos:position pos:line="1854" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="1854" pos:column="58">mail<pos:position pos:line="1854" pos:column="62"/></name></expr></argument>)<pos:position pos:line="1854" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="1854" pos:column="64"/></expr_stmt></block></else></if>

			<if pos:line="1856" pos:column="25">if <condition pos:line="1856" pos:column="28">(<expr><name pos:line="1856" pos:column="29">skip<pos:position pos:line="1856" pos:column="33"/></name></expr>)<pos:position pos:line="1856" pos:column="34"/></condition><then pos:line="1856" pos:column="34">
				<block type="pseudo"><goto pos:line="1857" pos:column="33">goto <name pos:line="1857" pos:column="38">next<pos:position pos:line="1857" pos:column="42"/></name>;<pos:position pos:line="1857" pos:column="43"/></goto></block></then></if> <comment type="block" pos:line="1857" pos:column="44">/* mail should be skipped */</comment>

			<expr_stmt><expr><call><name pos:line="1859" pos:column="25">write_author_script<pos:position pos:line="1859" pos:column="44"/></name><argument_list pos:line="1859" pos:column="44">(<argument><expr><name pos:line="1859" pos:column="45">state<pos:position pos:line="1859" pos:column="50"/></name></expr></argument>)<pos:position pos:line="1859" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1859" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="1860" pos:column="25">write_commit_msg<pos:position pos:line="1860" pos:column="41"/></name><argument_list pos:line="1860" pos:column="41">(<argument><expr><name pos:line="1860" pos:column="42">state<pos:position pos:line="1860" pos:column="47"/></name></expr></argument>)<pos:position pos:line="1860" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1860" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="1861" pos:column="18"/></block></else></if>

		<if pos:line="1863" pos:column="17">if <condition pos:line="1863" pos:column="20">(<expr><name><name pos:line="1863" pos:column="21">state<pos:position pos:line="1863" pos:column="26"/></name><operator pos:line="1863" pos:column="26">-&gt;<pos:position pos:line="1863" pos:column="31"/></operator><name pos:line="1863" pos:column="28">interactive<pos:position pos:line="1863" pos:column="39"/></name></name> <operator pos:line="1863" pos:column="40">&amp;&amp;<pos:position pos:line="1863" pos:column="50"/></operator> <call><name pos:line="1863" pos:column="43">do_interactive<pos:position pos:line="1863" pos:column="57"/></name><argument_list pos:line="1863" pos:column="57">(<argument><expr><name pos:line="1863" pos:column="58">state<pos:position pos:line="1863" pos:column="63"/></name></expr></argument>)<pos:position pos:line="1863" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="1863" pos:column="65"/></condition><then pos:line="1863" pos:column="65">
			<block type="pseudo"><goto pos:line="1864" pos:column="25">goto <name pos:line="1864" pos:column="30">next<pos:position pos:line="1864" pos:column="34"/></name>;<pos:position pos:line="1864" pos:column="35"/></goto></block></then></if>

		<if pos:line="1866" pos:column="17">if <condition pos:line="1866" pos:column="20">(<expr><call><name pos:line="1866" pos:column="21">run_applypatch_msg_hook<pos:position pos:line="1866" pos:column="44"/></name><argument_list pos:line="1866" pos:column="44">(<argument><expr><name pos:line="1866" pos:column="45">state<pos:position pos:line="1866" pos:column="50"/></name></expr></argument>)<pos:position pos:line="1866" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="1866" pos:column="52"/></condition><then pos:line="1866" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="1867" pos:column="25">exit<pos:position pos:line="1867" pos:column="29"/></name><argument_list pos:line="1867" pos:column="29">(<argument><expr><literal type="number" pos:line="1867" pos:column="30">1<pos:position pos:line="1867" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="1867" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1867" pos:column="33"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="1869" pos:column="17">say<pos:position pos:line="1869" pos:column="20"/></name><argument_list pos:line="1869" pos:column="20">(<argument><expr><name pos:line="1869" pos:column="21">state<pos:position pos:line="1869" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="1869" pos:column="28">stdout<pos:position pos:line="1869" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="1869" pos:column="36">_<pos:position pos:line="1869" pos:column="37"/></name><argument_list pos:line="1869" pos:column="37">(<argument><expr><literal type="string" pos:line="1869" pos:column="38">"Applying: %.*s"<pos:position pos:line="1869" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="1869" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="1869" pos:column="57">linelen<pos:position pos:line="1869" pos:column="64"/></name><argument_list pos:line="1869" pos:column="64">(<argument><expr><name><name pos:line="1869" pos:column="65">state<pos:position pos:line="1869" pos:column="70"/></name><operator pos:line="1869" pos:column="70">-&gt;<pos:position pos:line="1869" pos:column="75"/></operator><name pos:line="1869" pos:column="72">msg<pos:position pos:line="1869" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="1869" pos:column="76"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="1869" pos:column="78">state<pos:position pos:line="1869" pos:column="83"/></name><operator pos:line="1869" pos:column="83">-&gt;<pos:position pos:line="1869" pos:column="88"/></operator><name pos:line="1869" pos:column="85">msg<pos:position pos:line="1869" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="1869" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="1869" pos:column="90"/></expr_stmt>

		<expr_stmt><expr><name pos:line="1871" pos:column="17">apply_status<pos:position pos:line="1871" pos:column="29"/></name> <operator pos:line="1871" pos:column="30">=<pos:position pos:line="1871" pos:column="31"/></operator> <call><name pos:line="1871" pos:column="32">run_apply<pos:position pos:line="1871" pos:column="41"/></name><argument_list pos:line="1871" pos:column="41">(<argument><expr><name pos:line="1871" pos:column="42">state<pos:position pos:line="1871" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="1871" pos:column="49">NULL<pos:position pos:line="1871" pos:column="53"/></name></expr></argument>)<pos:position pos:line="1871" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="1871" pos:column="55"/></expr_stmt>

		<if pos:line="1873" pos:column="17">if <condition pos:line="1873" pos:column="20">(<expr><name pos:line="1873" pos:column="21">apply_status<pos:position pos:line="1873" pos:column="33"/></name> <operator pos:line="1873" pos:column="34">&amp;&amp;<pos:position pos:line="1873" pos:column="44"/></operator> <name><name pos:line="1873" pos:column="37">state<pos:position pos:line="1873" pos:column="42"/></name><operator pos:line="1873" pos:column="42">-&gt;<pos:position pos:line="1873" pos:column="47"/></operator><name pos:line="1873" pos:column="44">threeway<pos:position pos:line="1873" pos:column="52"/></name></name></expr>)<pos:position pos:line="1873" pos:column="53"/></condition><then pos:line="1873" pos:column="53"> <block pos:line="1873" pos:column="54">{
			<decl_stmt><decl><type><name><name pos:line="1874" pos:column="25">struct<pos:position pos:line="1874" pos:column="31"/></name> <name pos:line="1874" pos:column="32">strbuf<pos:position pos:line="1874" pos:column="38"/></name></name></type> <name pos:line="1874" pos:column="39">sb<pos:position pos:line="1874" pos:column="41"/></name> <init pos:line="1874" pos:column="42">= <expr><name pos:line="1874" pos:column="44">STRBUF_INIT<pos:position pos:line="1874" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="1874" pos:column="56"/></decl_stmt>

			<expr_stmt><expr><call><name pos:line="1876" pos:column="25">strbuf_addstr<pos:position pos:line="1876" pos:column="38"/></name><argument_list pos:line="1876" pos:column="38">(<argument><expr><operator pos:line="1876" pos:column="39">&amp;<pos:position pos:line="1876" pos:column="44"/></operator><name pos:line="1876" pos:column="40">sb<pos:position pos:line="1876" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="1876" pos:column="44">am_path<pos:position pos:line="1876" pos:column="51"/></name><argument_list pos:line="1876" pos:column="51">(<argument><expr><name pos:line="1876" pos:column="52">state<pos:position pos:line="1876" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1876" pos:column="59">"patch-merge-index"<pos:position pos:line="1876" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="1876" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="1876" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="1876" pos:column="81"/></expr_stmt>
			<expr_stmt><expr><name pos:line="1877" pos:column="25">apply_status<pos:position pos:line="1877" pos:column="37"/></name> <operator pos:line="1877" pos:column="38">=<pos:position pos:line="1877" pos:column="39"/></operator> <call><name pos:line="1877" pos:column="40">fall_back_threeway<pos:position pos:line="1877" pos:column="58"/></name><argument_list pos:line="1877" pos:column="58">(<argument><expr><name pos:line="1877" pos:column="59">state<pos:position pos:line="1877" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="1877" pos:column="66">sb<pos:position pos:line="1877" pos:column="68"/></name><operator pos:line="1877" pos:column="68">.<pos:position pos:line="1877" pos:column="69"/></operator><name pos:line="1877" pos:column="69">buf<pos:position pos:line="1877" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="1877" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="1877" pos:column="74"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="1878" pos:column="25">strbuf_release<pos:position pos:line="1878" pos:column="39"/></name><argument_list pos:line="1878" pos:column="39">(<argument><expr><operator pos:line="1878" pos:column="40">&amp;<pos:position pos:line="1878" pos:column="45"/></operator><name pos:line="1878" pos:column="41">sb<pos:position pos:line="1878" pos:column="43"/></name></expr></argument>)<pos:position pos:line="1878" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="1878" pos:column="45"/></expr_stmt>

			<comment type="block" pos:line="1880" pos:column="25">/*
			 * Applying the patch to an earlier tree and merging
			 * the result may have produced the same tree as ours.
			 */</comment>
			<if pos:line="1884" pos:column="25">if <condition pos:line="1884" pos:column="28">(<expr><operator pos:line="1884" pos:column="29">!<pos:position pos:line="1884" pos:column="30"/></operator><name pos:line="1884" pos:column="30">apply_status<pos:position pos:line="1884" pos:column="42"/></name> <operator pos:line="1884" pos:column="43">&amp;&amp;<pos:position pos:line="1884" pos:column="53"/></operator> <operator pos:line="1884" pos:column="46">!<pos:position pos:line="1884" pos:column="47"/></operator><call><name pos:line="1884" pos:column="47">index_has_changes<pos:position pos:line="1884" pos:column="64"/></name><argument_list pos:line="1884" pos:column="64">(<argument><expr><name pos:line="1884" pos:column="65">NULL<pos:position pos:line="1884" pos:column="69"/></name></expr></argument>)<pos:position pos:line="1884" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="1884" pos:column="71"/></condition><then pos:line="1884" pos:column="71"> <block pos:line="1884" pos:column="72">{
				<expr_stmt><expr><call><name pos:line="1885" pos:column="33">say<pos:position pos:line="1885" pos:column="36"/></name><argument_list pos:line="1885" pos:column="36">(<argument><expr><name pos:line="1885" pos:column="37">state<pos:position pos:line="1885" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="1885" pos:column="44">stdout<pos:position pos:line="1885" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="1885" pos:column="52">_<pos:position pos:line="1885" pos:column="53"/></name><argument_list pos:line="1885" pos:column="53">(<argument><expr><literal type="string" pos:line="1885" pos:column="54">"No changes -- Patch already applied."<pos:position pos:line="1885" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="1885" pos:column="93"/></argument_list></call></expr></argument>)<pos:position pos:line="1885" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="1885" pos:column="95"/></expr_stmt>
				<goto pos:line="1886" pos:column="33">goto <name pos:line="1886" pos:column="38">next<pos:position pos:line="1886" pos:column="42"/></name>;<pos:position pos:line="1886" pos:column="43"/></goto>
			}<pos:position pos:line="1887" pos:column="26"/></block></then></if>
		}<pos:position pos:line="1888" pos:column="18"/></block></then></if>

		<if pos:line="1890" pos:column="17">if <condition pos:line="1890" pos:column="20">(<expr><name pos:line="1890" pos:column="21">apply_status<pos:position pos:line="1890" pos:column="33"/></name></expr>)<pos:position pos:line="1890" pos:column="34"/></condition><then pos:line="1890" pos:column="34"> <block pos:line="1890" pos:column="35">{
			<decl_stmt><decl><type><name pos:line="1891" pos:column="25">int<pos:position pos:line="1891" pos:column="28"/></name></type> <name pos:line="1891" pos:column="29">advice_amworkdir<pos:position pos:line="1891" pos:column="45"/></name> <init pos:line="1891" pos:column="46">= <expr><literal type="number" pos:line="1891" pos:column="48">1<pos:position pos:line="1891" pos:column="49"/></literal></expr></init></decl>;<pos:position pos:line="1891" pos:column="50"/></decl_stmt>

			<expr_stmt><expr><call><name pos:line="1893" pos:column="25">printf_ln<pos:position pos:line="1893" pos:column="34"/></name><argument_list pos:line="1893" pos:column="34">(<argument><expr><call><name pos:line="1893" pos:column="35">_<pos:position pos:line="1893" pos:column="36"/></name><argument_list pos:line="1893" pos:column="36">(<argument><expr><literal type="string" pos:line="1893" pos:column="37">"Patch failed at %s %.*s"<pos:position pos:line="1893" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="1893" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="1893" pos:column="65">msgnum<pos:position pos:line="1893" pos:column="71"/></name><argument_list pos:line="1893" pos:column="71">(<argument><expr><name pos:line="1893" pos:column="72">state<pos:position pos:line="1893" pos:column="77"/></name></expr></argument>)<pos:position pos:line="1893" pos:column="78"/></argument_list></call></expr></argument>,
				<argument><expr><call><name pos:line="1894" pos:column="33">linelen<pos:position pos:line="1894" pos:column="40"/></name><argument_list pos:line="1894" pos:column="40">(<argument><expr><name><name pos:line="1894" pos:column="41">state<pos:position pos:line="1894" pos:column="46"/></name><operator pos:line="1894" pos:column="46">-&gt;<pos:position pos:line="1894" pos:column="51"/></operator><name pos:line="1894" pos:column="48">msg<pos:position pos:line="1894" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="1894" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="1894" pos:column="54">state<pos:position pos:line="1894" pos:column="59"/></name><operator pos:line="1894" pos:column="59">-&gt;<pos:position pos:line="1894" pos:column="64"/></operator><name pos:line="1894" pos:column="61">msg<pos:position pos:line="1894" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="1894" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="1894" pos:column="66"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="1896" pos:column="25">git_config_get_bool<pos:position pos:line="1896" pos:column="44"/></name><argument_list pos:line="1896" pos:column="44">(<argument><expr><literal type="string" pos:line="1896" pos:column="45">"advice.amworkdir"<pos:position pos:line="1896" pos:column="63"/></literal></expr></argument>, <argument><expr><operator pos:line="1896" pos:column="65">&amp;<pos:position pos:line="1896" pos:column="70"/></operator><name pos:line="1896" pos:column="66">advice_amworkdir<pos:position pos:line="1896" pos:column="82"/></name></expr></argument>)<pos:position pos:line="1896" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="1896" pos:column="84"/></expr_stmt>

			<if pos:line="1898" pos:column="25">if <condition pos:line="1898" pos:column="28">(<expr><name pos:line="1898" pos:column="29">advice_amworkdir<pos:position pos:line="1898" pos:column="45"/></name></expr>)<pos:position pos:line="1898" pos:column="46"/></condition><then pos:line="1898" pos:column="46">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="1899" pos:column="33">printf_ln<pos:position pos:line="1899" pos:column="42"/></name><argument_list pos:line="1899" pos:column="42">(<argument><expr><call><name pos:line="1899" pos:column="43">_<pos:position pos:line="1899" pos:column="44"/></name><argument_list pos:line="1899" pos:column="44">(<argument><expr><literal type="string" pos:line="1899" pos:column="45">"The copy of the patch that failed is found in: %s"<pos:position pos:line="1899" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="1899" pos:column="97"/></argument_list></call></expr></argument>,
						<argument><expr><call><name pos:line="1900" pos:column="49">am_path<pos:position pos:line="1900" pos:column="56"/></name><argument_list pos:line="1900" pos:column="56">(<argument><expr><name pos:line="1900" pos:column="57">state<pos:position pos:line="1900" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1900" pos:column="64">"patch"<pos:position pos:line="1900" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="1900" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="1900" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="1900" pos:column="74"/></expr_stmt></block></then></if>

			<expr_stmt><expr><call><name pos:line="1902" pos:column="25">die_user_resolve<pos:position pos:line="1902" pos:column="41"/></name><argument_list pos:line="1902" pos:column="41">(<argument><expr><name pos:line="1902" pos:column="42">state<pos:position pos:line="1902" pos:column="47"/></name></expr></argument>)<pos:position pos:line="1902" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1902" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="1903" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="1905" pos:column="17">do_commit<pos:position pos:line="1905" pos:column="26"/></name><argument_list pos:line="1905" pos:column="26">(<argument><expr><name pos:line="1905" pos:column="27">state<pos:position pos:line="1905" pos:column="32"/></name></expr></argument>)<pos:position pos:line="1905" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1905" pos:column="34"/></expr_stmt>

<label><name pos:line="1907" pos:column="1">next<pos:position pos:line="1907" pos:column="5"/></name>:<pos:position pos:line="1907" pos:column="6"/></label>
		<expr_stmt><expr><call><name pos:line="1908" pos:column="17">am_next<pos:position pos:line="1908" pos:column="24"/></name><argument_list pos:line="1908" pos:column="24">(<argument><expr><name pos:line="1908" pos:column="25">state<pos:position pos:line="1908" pos:column="30"/></name></expr></argument>)<pos:position pos:line="1908" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="1908" pos:column="32"/></expr_stmt>

		<if pos:line="1910" pos:column="17">if <condition pos:line="1910" pos:column="20">(<expr><name pos:line="1910" pos:column="21">resume<pos:position pos:line="1910" pos:column="27"/></name></expr>)<pos:position pos:line="1910" pos:column="28"/></condition><then pos:line="1910" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="1911" pos:column="25">am_load<pos:position pos:line="1911" pos:column="32"/></name><argument_list pos:line="1911" pos:column="32">(<argument><expr><name pos:line="1911" pos:column="33">state<pos:position pos:line="1911" pos:column="38"/></name></expr></argument>)<pos:position pos:line="1911" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="1911" pos:column="40"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="1912" pos:column="17">resume<pos:position pos:line="1912" pos:column="23"/></name> <operator pos:line="1912" pos:column="24">=<pos:position pos:line="1912" pos:column="25"/></operator> <literal type="number" pos:line="1912" pos:column="26">0<pos:position pos:line="1912" pos:column="27"/></literal></expr>;<pos:position pos:line="1912" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="1913" pos:column="10"/></block></while>

	<if pos:line="1915" pos:column="9">if <condition pos:line="1915" pos:column="12">(<expr><operator pos:line="1915" pos:column="13">!<pos:position pos:line="1915" pos:column="14"/></operator><call><name pos:line="1915" pos:column="14">is_empty_file<pos:position pos:line="1915" pos:column="27"/></name><argument_list pos:line="1915" pos:column="27">(<argument><expr><call><name pos:line="1915" pos:column="28">am_path<pos:position pos:line="1915" pos:column="35"/></name><argument_list pos:line="1915" pos:column="35">(<argument><expr><name pos:line="1915" pos:column="36">state<pos:position pos:line="1915" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1915" pos:column="43">"rewritten"<pos:position pos:line="1915" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="1915" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="1915" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="1915" pos:column="57"/></condition><then pos:line="1915" pos:column="57"> <block pos:line="1915" pos:column="58">{
		<expr_stmt><expr><call><name pos:line="1916" pos:column="17">assert<pos:position pos:line="1916" pos:column="23"/></name><argument_list pos:line="1916" pos:column="23">(<argument><expr><name><name pos:line="1916" pos:column="24">state<pos:position pos:line="1916" pos:column="29"/></name><operator pos:line="1916" pos:column="29">-&gt;<pos:position pos:line="1916" pos:column="34"/></operator><name pos:line="1916" pos:column="31">rebasing<pos:position pos:line="1916" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="1916" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1916" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1917" pos:column="17">copy_notes_for_rebase<pos:position pos:line="1917" pos:column="38"/></name><argument_list pos:line="1917" pos:column="38">(<argument><expr><name pos:line="1917" pos:column="39">state<pos:position pos:line="1917" pos:column="44"/></name></expr></argument>)<pos:position pos:line="1917" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1917" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1918" pos:column="17">run_post_rewrite_hook<pos:position pos:line="1918" pos:column="38"/></name><argument_list pos:line="1918" pos:column="38">(<argument><expr><name pos:line="1918" pos:column="39">state<pos:position pos:line="1918" pos:column="44"/></name></expr></argument>)<pos:position pos:line="1918" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1918" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="1919" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="1921" pos:column="9">/*
	 * In rebasing mode, it's up to the caller to take care of
	 * housekeeping.
	 */</comment>
	<if pos:line="1925" pos:column="9">if <condition pos:line="1925" pos:column="12">(<expr><operator pos:line="1925" pos:column="13">!<pos:position pos:line="1925" pos:column="14"/></operator><name><name pos:line="1925" pos:column="14">state<pos:position pos:line="1925" pos:column="19"/></name><operator pos:line="1925" pos:column="19">-&gt;<pos:position pos:line="1925" pos:column="24"/></operator><name pos:line="1925" pos:column="21">rebasing<pos:position pos:line="1925" pos:column="29"/></name></name></expr>)<pos:position pos:line="1925" pos:column="30"/></condition><then pos:line="1925" pos:column="30"> <block pos:line="1925" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="1926" pos:column="17">am_destroy<pos:position pos:line="1926" pos:column="27"/></name><argument_list pos:line="1926" pos:column="27">(<argument><expr><name pos:line="1926" pos:column="28">state<pos:position pos:line="1926" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1926" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1926" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1927" pos:column="17">close_all_packs<pos:position pos:line="1927" pos:column="32"/></name><argument_list pos:line="1927" pos:column="32">()<pos:position pos:line="1927" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1927" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1928" pos:column="17">run_command_v_opt<pos:position pos:line="1928" pos:column="34"/></name><argument_list pos:line="1928" pos:column="34">(<argument><expr><name pos:line="1928" pos:column="35">argv_gc_auto<pos:position pos:line="1928" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="1928" pos:column="49">RUN_GIT_CMD<pos:position pos:line="1928" pos:column="60"/></name></expr></argument>)<pos:position pos:line="1928" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="1928" pos:column="62"/></expr_stmt>
	}<pos:position pos:line="1929" pos:column="10"/></block></then></if>
}<pos:position pos:line="1930" pos:column="2"/></block></function>

<comment type="block" pos:line="1932" pos:column="1">/**
 * Resume the current am session after patch application failure. The user did
 * all the hard work, and we do not have to do any patch application. Just
 * trust and commit what the user has in the index and working tree.
 */</comment>
<function><specifier pos:line="1937" pos:column="1">static<pos:position pos:line="1937" pos:column="7"/></specifier> <type><name pos:line="1937" pos:column="8">void<pos:position pos:line="1937" pos:column="12"/></name></type> <name pos:line="1937" pos:column="13">am_resolve<pos:position pos:line="1937" pos:column="23"/></name><parameter_list pos:line="1937" pos:column="23">(<parameter><decl><type><name><name pos:line="1937" pos:column="24">struct<pos:position pos:line="1937" pos:column="30"/></name> <name pos:line="1937" pos:column="31">am_state<pos:position pos:line="1937" pos:column="39"/></name></name> <modifier pos:line="1937" pos:column="40">*<pos:position pos:line="1937" pos:column="41"/></modifier></type><name pos:line="1937" pos:column="41">state<pos:position pos:line="1937" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="1937" pos:column="47"/></parameter_list>
<block pos:line="1938" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="1939" pos:column="9">validate_resume_state<pos:position pos:line="1939" pos:column="30"/></name><argument_list pos:line="1939" pos:column="30">(<argument><expr><name pos:line="1939" pos:column="31">state<pos:position pos:line="1939" pos:column="36"/></name></expr></argument>)<pos:position pos:line="1939" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1939" pos:column="38"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1941" pos:column="9">say<pos:position pos:line="1941" pos:column="12"/></name><argument_list pos:line="1941" pos:column="12">(<argument><expr><name pos:line="1941" pos:column="13">state<pos:position pos:line="1941" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="1941" pos:column="20">stdout<pos:position pos:line="1941" pos:column="26"/></name></expr></argument>, <argument><expr><call><name pos:line="1941" pos:column="28">_<pos:position pos:line="1941" pos:column="29"/></name><argument_list pos:line="1941" pos:column="29">(<argument><expr><literal type="string" pos:line="1941" pos:column="30">"Applying: %.*s"<pos:position pos:line="1941" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="1941" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="1941" pos:column="49">linelen<pos:position pos:line="1941" pos:column="56"/></name><argument_list pos:line="1941" pos:column="56">(<argument><expr><name><name pos:line="1941" pos:column="57">state<pos:position pos:line="1941" pos:column="62"/></name><operator pos:line="1941" pos:column="62">-&gt;<pos:position pos:line="1941" pos:column="67"/></operator><name pos:line="1941" pos:column="64">msg<pos:position pos:line="1941" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="1941" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="1941" pos:column="70">state<pos:position pos:line="1941" pos:column="75"/></name><operator pos:line="1941" pos:column="75">-&gt;<pos:position pos:line="1941" pos:column="80"/></operator><name pos:line="1941" pos:column="77">msg<pos:position pos:line="1941" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="1941" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="1941" pos:column="82"/></expr_stmt>

	<if pos:line="1943" pos:column="9">if <condition pos:line="1943" pos:column="12">(<expr><operator pos:line="1943" pos:column="13">!<pos:position pos:line="1943" pos:column="14"/></operator><call><name pos:line="1943" pos:column="14">index_has_changes<pos:position pos:line="1943" pos:column="31"/></name><argument_list pos:line="1943" pos:column="31">(<argument><expr><name pos:line="1943" pos:column="32">NULL<pos:position pos:line="1943" pos:column="36"/></name></expr></argument>)<pos:position pos:line="1943" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="1943" pos:column="38"/></condition><then pos:line="1943" pos:column="38"> <block pos:line="1943" pos:column="39">{
		<expr_stmt><expr><call><name pos:line="1944" pos:column="17">printf_ln<pos:position pos:line="1944" pos:column="26"/></name><argument_list pos:line="1944" pos:column="26">(<argument><expr><call><name pos:line="1944" pos:column="27">_<pos:position pos:line="1944" pos:column="28"/></name><argument_list pos:line="1944" pos:column="28">(<argument><expr><literal type="string" pos:line="1944" pos:column="29">"No changes - did you forget to use 'git add'?\n"<pos:position pos:line="1944" pos:column="78"/></literal>
			<literal type="string" pos:line="1945" pos:column="25">"If there is nothing left to stage, chances are that something else\n"<pos:position pos:line="1945" pos:column="95"/></literal>
			<literal type="string" pos:line="1946" pos:column="25">"already introduced the same changes; you might want to skip this patch."<pos:position pos:line="1946" pos:column="98"/></literal></expr></argument>)<pos:position pos:line="1946" pos:column="99"/></argument_list></call></expr></argument>)<pos:position pos:line="1946" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="1946" pos:column="101"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1947" pos:column="17">die_user_resolve<pos:position pos:line="1947" pos:column="33"/></name><argument_list pos:line="1947" pos:column="33">(<argument><expr><name pos:line="1947" pos:column="34">state<pos:position pos:line="1947" pos:column="39"/></name></expr></argument>)<pos:position pos:line="1947" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1947" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="1948" pos:column="10"/></block></then></if>

	<if pos:line="1950" pos:column="9">if <condition pos:line="1950" pos:column="12">(<expr><call><name pos:line="1950" pos:column="13">unmerged_cache<pos:position pos:line="1950" pos:column="27"/></name><argument_list pos:line="1950" pos:column="27">()<pos:position pos:line="1950" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="1950" pos:column="30"/></condition><then pos:line="1950" pos:column="30"> <block pos:line="1950" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="1951" pos:column="17">printf_ln<pos:position pos:line="1951" pos:column="26"/></name><argument_list pos:line="1951" pos:column="26">(<argument><expr><call><name pos:line="1951" pos:column="27">_<pos:position pos:line="1951" pos:column="28"/></name><argument_list pos:line="1951" pos:column="28">(<argument><expr><literal type="string" pos:line="1951" pos:column="29">"You still have unmerged paths in your index.\n"<pos:position pos:line="1951" pos:column="77"/></literal>
			<literal type="string" pos:line="1952" pos:column="25">"Did you forget to use 'git add'?"<pos:position pos:line="1952" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="1952" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="1952" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="1952" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="1953" pos:column="17">die_user_resolve<pos:position pos:line="1953" pos:column="33"/></name><argument_list pos:line="1953" pos:column="33">(<argument><expr><name pos:line="1953" pos:column="34">state<pos:position pos:line="1953" pos:column="39"/></name></expr></argument>)<pos:position pos:line="1953" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1953" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="1954" pos:column="10"/></block></then></if>

	<if pos:line="1956" pos:column="9">if <condition pos:line="1956" pos:column="12">(<expr><name><name pos:line="1956" pos:column="13">state<pos:position pos:line="1956" pos:column="18"/></name><operator pos:line="1956" pos:column="18">-&gt;<pos:position pos:line="1956" pos:column="23"/></operator><name pos:line="1956" pos:column="20">interactive<pos:position pos:line="1956" pos:column="31"/></name></name></expr>)<pos:position pos:line="1956" pos:column="32"/></condition><then pos:line="1956" pos:column="32"> <block pos:line="1956" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="1957" pos:column="17">write_index_patch<pos:position pos:line="1957" pos:column="34"/></name><argument_list pos:line="1957" pos:column="34">(<argument><expr><name pos:line="1957" pos:column="35">state<pos:position pos:line="1957" pos:column="40"/></name></expr></argument>)<pos:position pos:line="1957" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="1957" pos:column="42"/></expr_stmt>
		<if pos:line="1958" pos:column="17">if <condition pos:line="1958" pos:column="20">(<expr><call><name pos:line="1958" pos:column="21">do_interactive<pos:position pos:line="1958" pos:column="35"/></name><argument_list pos:line="1958" pos:column="35">(<argument><expr><name pos:line="1958" pos:column="36">state<pos:position pos:line="1958" pos:column="41"/></name></expr></argument>)<pos:position pos:line="1958" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="1958" pos:column="43"/></condition><then pos:line="1958" pos:column="43">
			<block type="pseudo"><goto pos:line="1959" pos:column="25">goto <name pos:line="1959" pos:column="30">next<pos:position pos:line="1959" pos:column="34"/></name>;<pos:position pos:line="1959" pos:column="35"/></goto></block></then></if>
	}<pos:position pos:line="1960" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="1962" pos:column="9">rerere<pos:position pos:line="1962" pos:column="15"/></name><argument_list pos:line="1962" pos:column="15">(<argument><expr><literal type="number" pos:line="1962" pos:column="16">0<pos:position pos:line="1962" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="1962" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="1962" pos:column="19"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1964" pos:column="9">do_commit<pos:position pos:line="1964" pos:column="18"/></name><argument_list pos:line="1964" pos:column="18">(<argument><expr><name pos:line="1964" pos:column="19">state<pos:position pos:line="1964" pos:column="24"/></name></expr></argument>)<pos:position pos:line="1964" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1964" pos:column="26"/></expr_stmt>

<label><name pos:line="1966" pos:column="1">next<pos:position pos:line="1966" pos:column="5"/></name>:<pos:position pos:line="1966" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="1967" pos:column="9">am_next<pos:position pos:line="1967" pos:column="16"/></name><argument_list pos:line="1967" pos:column="16">(<argument><expr><name pos:line="1967" pos:column="17">state<pos:position pos:line="1967" pos:column="22"/></name></expr></argument>)<pos:position pos:line="1967" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="1967" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1968" pos:column="9">am_load<pos:position pos:line="1968" pos:column="16"/></name><argument_list pos:line="1968" pos:column="16">(<argument><expr><name pos:line="1968" pos:column="17">state<pos:position pos:line="1968" pos:column="22"/></name></expr></argument>)<pos:position pos:line="1968" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="1968" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1969" pos:column="9">am_run<pos:position pos:line="1969" pos:column="15"/></name><argument_list pos:line="1969" pos:column="15">(<argument><expr><name pos:line="1969" pos:column="16">state<pos:position pos:line="1969" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1969" pos:column="23">0<pos:position pos:line="1969" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="1969" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1969" pos:column="26"/></expr_stmt>
}<pos:position pos:line="1970" pos:column="2"/></block></function>

<comment type="block" pos:line="1972" pos:column="1">/**
 * Performs a checkout fast-forward from `head` to `remote`. If `reset` is
 * true, any unmerged entries will be discarded. Returns 0 on success, -1 on
 * failure.
 */</comment>
<function><specifier pos:line="1977" pos:column="1">static<pos:position pos:line="1977" pos:column="7"/></specifier> <type><name pos:line="1977" pos:column="8">int<pos:position pos:line="1977" pos:column="11"/></name></type> <name pos:line="1977" pos:column="12">fast_forward_to<pos:position pos:line="1977" pos:column="27"/></name><parameter_list pos:line="1977" pos:column="27">(<parameter><decl><type><name><name pos:line="1977" pos:column="28">struct<pos:position pos:line="1977" pos:column="34"/></name> <name pos:line="1977" pos:column="35">tree<pos:position pos:line="1977" pos:column="39"/></name></name> <modifier pos:line="1977" pos:column="40">*<pos:position pos:line="1977" pos:column="41"/></modifier></type><name pos:line="1977" pos:column="41">head<pos:position pos:line="1977" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1977" pos:column="47">struct<pos:position pos:line="1977" pos:column="53"/></name> <name pos:line="1977" pos:column="54">tree<pos:position pos:line="1977" pos:column="58"/></name></name> <modifier pos:line="1977" pos:column="59">*<pos:position pos:line="1977" pos:column="60"/></modifier></type><name pos:line="1977" pos:column="60">remote<pos:position pos:line="1977" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1977" pos:column="68">int<pos:position pos:line="1977" pos:column="71"/></name></type> <name pos:line="1977" pos:column="72">reset<pos:position pos:line="1977" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1977" pos:column="78"/></parameter_list>
<block pos:line="1978" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="1979" pos:column="9">struct<pos:position pos:line="1979" pos:column="15"/></name> <name pos:line="1979" pos:column="16">lock_file<pos:position pos:line="1979" pos:column="25"/></name></name> <modifier pos:line="1979" pos:column="26">*<pos:position pos:line="1979" pos:column="27"/></modifier></type><name pos:line="1979" pos:column="27">lock_file<pos:position pos:line="1979" pos:column="36"/></name></decl>;<pos:position pos:line="1979" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1980" pos:column="9">struct<pos:position pos:line="1980" pos:column="15"/></name> <name pos:line="1980" pos:column="16">unpack_trees_options<pos:position pos:line="1980" pos:column="36"/></name></name></type> <name pos:line="1980" pos:column="37">opts<pos:position pos:line="1980" pos:column="41"/></name></decl>;<pos:position pos:line="1980" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1981" pos:column="9">struct<pos:position pos:line="1981" pos:column="15"/></name> <name pos:line="1981" pos:column="16">tree_desc<pos:position pos:line="1981" pos:column="25"/></name></name></type> <name><name pos:line="1981" pos:column="26">t<pos:position pos:line="1981" pos:column="27"/></name><index pos:line="1981" pos:column="27">[<expr><literal type="number" pos:line="1981" pos:column="28">2<pos:position pos:line="1981" pos:column="29"/></literal></expr>]<pos:position pos:line="1981" pos:column="30"/></index></name></decl>;<pos:position pos:line="1981" pos:column="31"/></decl_stmt>

	<if pos:line="1983" pos:column="9">if <condition pos:line="1983" pos:column="12">(<expr><call><name pos:line="1983" pos:column="13">parse_tree<pos:position pos:line="1983" pos:column="23"/></name><argument_list pos:line="1983" pos:column="23">(<argument><expr><name pos:line="1983" pos:column="24">head<pos:position pos:line="1983" pos:column="28"/></name></expr></argument>)<pos:position pos:line="1983" pos:column="29"/></argument_list></call> <operator pos:line="1983" pos:column="30">||<pos:position pos:line="1983" pos:column="32"/></operator> <call><name pos:line="1983" pos:column="33">parse_tree<pos:position pos:line="1983" pos:column="43"/></name><argument_list pos:line="1983" pos:column="43">(<argument><expr><name pos:line="1983" pos:column="44">remote<pos:position pos:line="1983" pos:column="50"/></name></expr></argument>)<pos:position pos:line="1983" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="1983" pos:column="52"/></condition><then pos:line="1983" pos:column="52">
		<block type="pseudo"><return pos:line="1984" pos:column="17">return <expr><operator pos:line="1984" pos:column="24">-<pos:position pos:line="1984" pos:column="25"/></operator><literal type="number" pos:line="1984" pos:column="25">1<pos:position pos:line="1984" pos:column="26"/></literal></expr>;<pos:position pos:line="1984" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="1986" pos:column="9">lock_file<pos:position pos:line="1986" pos:column="18"/></name> <operator pos:line="1986" pos:column="19">=<pos:position pos:line="1986" pos:column="20"/></operator> <call><name pos:line="1986" pos:column="21">xcalloc<pos:position pos:line="1986" pos:column="28"/></name><argument_list pos:line="1986" pos:column="28">(<argument><expr><literal type="number" pos:line="1986" pos:column="29">1<pos:position pos:line="1986" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="1986" pos:column="32">sizeof<argument_list pos:line="1986" pos:column="38">(<argument><expr pos:line="1986" pos:column="39">struct <name pos:line="1986" pos:column="46">lock_file<pos:position pos:line="1986" pos:column="55"/></name></expr></argument>)<pos:position pos:line="1986" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="1986" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1986" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1987" pos:column="9">hold_locked_index<pos:position pos:line="1987" pos:column="26"/></name><argument_list pos:line="1987" pos:column="26">(<argument><expr><name pos:line="1987" pos:column="27">lock_file<pos:position pos:line="1987" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1987" pos:column="38">1<pos:position pos:line="1987" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="1987" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1987" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1989" pos:column="9">refresh_cache<pos:position pos:line="1989" pos:column="22"/></name><argument_list pos:line="1989" pos:column="22">(<argument><expr><name pos:line="1989" pos:column="23">REFRESH_QUIET<pos:position pos:line="1989" pos:column="36"/></name></expr></argument>)<pos:position pos:line="1989" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1989" pos:column="38"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="1991" pos:column="9">memset<pos:position pos:line="1991" pos:column="15"/></name><argument_list pos:line="1991" pos:column="15">(<argument><expr><operator pos:line="1991" pos:column="16">&amp;<pos:position pos:line="1991" pos:column="21"/></operator><name pos:line="1991" pos:column="17">opts<pos:position pos:line="1991" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1991" pos:column="23">0<pos:position pos:line="1991" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="1991" pos:column="26">sizeof<argument_list pos:line="1991" pos:column="32">(<argument><expr><name pos:line="1991" pos:column="33">opts<pos:position pos:line="1991" pos:column="37"/></name></expr></argument>)<pos:position pos:line="1991" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="1991" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="1991" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1992" pos:column="9">opts<pos:position pos:line="1992" pos:column="13"/></name><operator pos:line="1992" pos:column="13">.<pos:position pos:line="1992" pos:column="14"/></operator><name pos:line="1992" pos:column="14">head_idx<pos:position pos:line="1992" pos:column="22"/></name></name> <operator pos:line="1992" pos:column="23">=<pos:position pos:line="1992" pos:column="24"/></operator> <literal type="number" pos:line="1992" pos:column="25">1<pos:position pos:line="1992" pos:column="26"/></literal></expr>;<pos:position pos:line="1992" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1993" pos:column="9">opts<pos:position pos:line="1993" pos:column="13"/></name><operator pos:line="1993" pos:column="13">.<pos:position pos:line="1993" pos:column="14"/></operator><name pos:line="1993" pos:column="14">src_index<pos:position pos:line="1993" pos:column="23"/></name></name> <operator pos:line="1993" pos:column="24">=<pos:position pos:line="1993" pos:column="25"/></operator> <operator pos:line="1993" pos:column="26">&amp;<pos:position pos:line="1993" pos:column="31"/></operator><name pos:line="1993" pos:column="27">the_index<pos:position pos:line="1993" pos:column="36"/></name></expr>;<pos:position pos:line="1993" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1994" pos:column="9">opts<pos:position pos:line="1994" pos:column="13"/></name><operator pos:line="1994" pos:column="13">.<pos:position pos:line="1994" pos:column="14"/></operator><name pos:line="1994" pos:column="14">dst_index<pos:position pos:line="1994" pos:column="23"/></name></name> <operator pos:line="1994" pos:column="24">=<pos:position pos:line="1994" pos:column="25"/></operator> <operator pos:line="1994" pos:column="26">&amp;<pos:position pos:line="1994" pos:column="31"/></operator><name pos:line="1994" pos:column="27">the_index<pos:position pos:line="1994" pos:column="36"/></name></expr>;<pos:position pos:line="1994" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1995" pos:column="9">opts<pos:position pos:line="1995" pos:column="13"/></name><operator pos:line="1995" pos:column="13">.<pos:position pos:line="1995" pos:column="14"/></operator><name pos:line="1995" pos:column="14">update<pos:position pos:line="1995" pos:column="20"/></name></name> <operator pos:line="1995" pos:column="21">=<pos:position pos:line="1995" pos:column="22"/></operator> <literal type="number" pos:line="1995" pos:column="23">1<pos:position pos:line="1995" pos:column="24"/></literal></expr>;<pos:position pos:line="1995" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1996" pos:column="9">opts<pos:position pos:line="1996" pos:column="13"/></name><operator pos:line="1996" pos:column="13">.<pos:position pos:line="1996" pos:column="14"/></operator><name pos:line="1996" pos:column="14">merge<pos:position pos:line="1996" pos:column="19"/></name></name> <operator pos:line="1996" pos:column="20">=<pos:position pos:line="1996" pos:column="21"/></operator> <literal type="number" pos:line="1996" pos:column="22">1<pos:position pos:line="1996" pos:column="23"/></literal></expr>;<pos:position pos:line="1996" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1997" pos:column="9">opts<pos:position pos:line="1997" pos:column="13"/></name><operator pos:line="1997" pos:column="13">.<pos:position pos:line="1997" pos:column="14"/></operator><name pos:line="1997" pos:column="14">reset<pos:position pos:line="1997" pos:column="19"/></name></name> <operator pos:line="1997" pos:column="20">=<pos:position pos:line="1997" pos:column="21"/></operator> <name pos:line="1997" pos:column="22">reset<pos:position pos:line="1997" pos:column="27"/></name></expr>;<pos:position pos:line="1997" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="1998" pos:column="9">opts<pos:position pos:line="1998" pos:column="13"/></name><operator pos:line="1998" pos:column="13">.<pos:position pos:line="1998" pos:column="14"/></operator><name pos:line="1998" pos:column="14">fn<pos:position pos:line="1998" pos:column="16"/></name></name> <operator pos:line="1998" pos:column="17">=<pos:position pos:line="1998" pos:column="18"/></operator> <name pos:line="1998" pos:column="19">twoway_merge<pos:position pos:line="1998" pos:column="31"/></name></expr>;<pos:position pos:line="1998" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="1999" pos:column="9">init_tree_desc<pos:position pos:line="1999" pos:column="23"/></name><argument_list pos:line="1999" pos:column="23">(<argument><expr><operator pos:line="1999" pos:column="24">&amp;<pos:position pos:line="1999" pos:column="29"/></operator><name><name pos:line="1999" pos:column="25">t<pos:position pos:line="1999" pos:column="26"/></name><index pos:line="1999" pos:column="26">[<expr><literal type="number" pos:line="1999" pos:column="27">0<pos:position pos:line="1999" pos:column="28"/></literal></expr>]<pos:position pos:line="1999" pos:column="29"/></index></name></expr></argument>, <argument><expr><name><name pos:line="1999" pos:column="31">head<pos:position pos:line="1999" pos:column="35"/></name><operator pos:line="1999" pos:column="35">-&gt;<pos:position pos:line="1999" pos:column="40"/></operator><name pos:line="1999" pos:column="37">buffer<pos:position pos:line="1999" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="1999" pos:column="45">head<pos:position pos:line="1999" pos:column="49"/></name><operator pos:line="1999" pos:column="49">-&gt;<pos:position pos:line="1999" pos:column="54"/></operator><name pos:line="1999" pos:column="51">size<pos:position pos:line="1999" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="1999" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1999" pos:column="57"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="2000" pos:column="9">init_tree_desc<pos:position pos:line="2000" pos:column="23"/></name><argument_list pos:line="2000" pos:column="23">(<argument><expr><operator pos:line="2000" pos:column="24">&amp;<pos:position pos:line="2000" pos:column="29"/></operator><name><name pos:line="2000" pos:column="25">t<pos:position pos:line="2000" pos:column="26"/></name><index pos:line="2000" pos:column="26">[<expr><literal type="number" pos:line="2000" pos:column="27">1<pos:position pos:line="2000" pos:column="28"/></literal></expr>]<pos:position pos:line="2000" pos:column="29"/></index></name></expr></argument>, <argument><expr><name><name pos:line="2000" pos:column="31">remote<pos:position pos:line="2000" pos:column="37"/></name><operator pos:line="2000" pos:column="37">-&gt;<pos:position pos:line="2000" pos:column="42"/></operator><name pos:line="2000" pos:column="39">buffer<pos:position pos:line="2000" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="2000" pos:column="47">remote<pos:position pos:line="2000" pos:column="53"/></name><operator pos:line="2000" pos:column="53">-&gt;<pos:position pos:line="2000" pos:column="58"/></operator><name pos:line="2000" pos:column="55">size<pos:position pos:line="2000" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="2000" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="2000" pos:column="61"/></expr_stmt>

	<if pos:line="2002" pos:column="9">if <condition pos:line="2002" pos:column="12">(<expr><call><name pos:line="2002" pos:column="13">unpack_trees<pos:position pos:line="2002" pos:column="25"/></name><argument_list pos:line="2002" pos:column="25">(<argument><expr><literal type="number" pos:line="2002" pos:column="26">2<pos:position pos:line="2002" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="2002" pos:column="29">t<pos:position pos:line="2002" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="2002" pos:column="32">&amp;<pos:position pos:line="2002" pos:column="37"/></operator><name pos:line="2002" pos:column="33">opts<pos:position pos:line="2002" pos:column="37"/></name></expr></argument>)<pos:position pos:line="2002" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="2002" pos:column="39"/></condition><then pos:line="2002" pos:column="39"> <block pos:line="2002" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="2003" pos:column="17">rollback_lock_file<pos:position pos:line="2003" pos:column="35"/></name><argument_list pos:line="2003" pos:column="35">(<argument><expr><name pos:line="2003" pos:column="36">lock_file<pos:position pos:line="2003" pos:column="45"/></name></expr></argument>)<pos:position pos:line="2003" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="2003" pos:column="47"/></expr_stmt>
		<return pos:line="2004" pos:column="17">return <expr><operator pos:line="2004" pos:column="24">-<pos:position pos:line="2004" pos:column="25"/></operator><literal type="number" pos:line="2004" pos:column="25">1<pos:position pos:line="2004" pos:column="26"/></literal></expr>;<pos:position pos:line="2004" pos:column="27"/></return>
	}<pos:position pos:line="2005" pos:column="10"/></block></then></if>

	<if pos:line="2007" pos:column="9">if <condition pos:line="2007" pos:column="12">(<expr><call><name pos:line="2007" pos:column="13">write_locked_index<pos:position pos:line="2007" pos:column="31"/></name><argument_list pos:line="2007" pos:column="31">(<argument><expr><operator pos:line="2007" pos:column="32">&amp;<pos:position pos:line="2007" pos:column="37"/></operator><name pos:line="2007" pos:column="33">the_index<pos:position pos:line="2007" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="2007" pos:column="44">lock_file<pos:position pos:line="2007" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="2007" pos:column="55">COMMIT_LOCK<pos:position pos:line="2007" pos:column="66"/></name></expr></argument>)<pos:position pos:line="2007" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="2007" pos:column="68"/></condition><then pos:line="2007" pos:column="68">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="2008" pos:column="17">die<pos:position pos:line="2008" pos:column="20"/></name><argument_list pos:line="2008" pos:column="20">(<argument><expr><call><name pos:line="2008" pos:column="21">_<pos:position pos:line="2008" pos:column="22"/></name><argument_list pos:line="2008" pos:column="22">(<argument><expr><literal type="string" pos:line="2008" pos:column="23">"unable to write new index file"<pos:position pos:line="2008" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="2008" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="2008" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="2008" pos:column="58"/></expr_stmt></block></then></if>

	<return pos:line="2010" pos:column="9">return <expr><literal type="number" pos:line="2010" pos:column="16">0<pos:position pos:line="2010" pos:column="17"/></literal></expr>;<pos:position pos:line="2010" pos:column="18"/></return>
}<pos:position pos:line="2011" pos:column="2"/></block></function>

<comment type="block" pos:line="2013" pos:column="1">/**
 * Merges a tree into the index. The index's stat info will take precedence
 * over the merged tree's. Returns 0 on success, -1 on failure.
 */</comment>
<function><specifier pos:line="2017" pos:column="1">static<pos:position pos:line="2017" pos:column="7"/></specifier> <type><name pos:line="2017" pos:column="8">int<pos:position pos:line="2017" pos:column="11"/></name></type> <name pos:line="2017" pos:column="12">merge_tree<pos:position pos:line="2017" pos:column="22"/></name><parameter_list pos:line="2017" pos:column="22">(<parameter><decl><type><name><name pos:line="2017" pos:column="23">struct<pos:position pos:line="2017" pos:column="29"/></name> <name pos:line="2017" pos:column="30">tree<pos:position pos:line="2017" pos:column="34"/></name></name> <modifier pos:line="2017" pos:column="35">*<pos:position pos:line="2017" pos:column="36"/></modifier></type><name pos:line="2017" pos:column="36">tree<pos:position pos:line="2017" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2017" pos:column="41"/></parameter_list>
<block pos:line="2018" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="2019" pos:column="9">struct<pos:position pos:line="2019" pos:column="15"/></name> <name pos:line="2019" pos:column="16">lock_file<pos:position pos:line="2019" pos:column="25"/></name></name> <modifier pos:line="2019" pos:column="26">*<pos:position pos:line="2019" pos:column="27"/></modifier></type><name pos:line="2019" pos:column="27">lock_file<pos:position pos:line="2019" pos:column="36"/></name></decl>;<pos:position pos:line="2019" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="2020" pos:column="9">struct<pos:position pos:line="2020" pos:column="15"/></name> <name pos:line="2020" pos:column="16">unpack_trees_options<pos:position pos:line="2020" pos:column="36"/></name></name></type> <name pos:line="2020" pos:column="37">opts<pos:position pos:line="2020" pos:column="41"/></name></decl>;<pos:position pos:line="2020" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="2021" pos:column="9">struct<pos:position pos:line="2021" pos:column="15"/></name> <name pos:line="2021" pos:column="16">tree_desc<pos:position pos:line="2021" pos:column="25"/></name></name></type> <name><name pos:line="2021" pos:column="26">t<pos:position pos:line="2021" pos:column="27"/></name><index pos:line="2021" pos:column="27">[<expr><literal type="number" pos:line="2021" pos:column="28">1<pos:position pos:line="2021" pos:column="29"/></literal></expr>]<pos:position pos:line="2021" pos:column="30"/></index></name></decl>;<pos:position pos:line="2021" pos:column="31"/></decl_stmt>

	<if pos:line="2023" pos:column="9">if <condition pos:line="2023" pos:column="12">(<expr><call><name pos:line="2023" pos:column="13">parse_tree<pos:position pos:line="2023" pos:column="23"/></name><argument_list pos:line="2023" pos:column="23">(<argument><expr><name pos:line="2023" pos:column="24">tree<pos:position pos:line="2023" pos:column="28"/></name></expr></argument>)<pos:position pos:line="2023" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="2023" pos:column="30"/></condition><then pos:line="2023" pos:column="30">
		<block type="pseudo"><return pos:line="2024" pos:column="17">return <expr><operator pos:line="2024" pos:column="24">-<pos:position pos:line="2024" pos:column="25"/></operator><literal type="number" pos:line="2024" pos:column="25">1<pos:position pos:line="2024" pos:column="26"/></literal></expr>;<pos:position pos:line="2024" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="2026" pos:column="9">lock_file<pos:position pos:line="2026" pos:column="18"/></name> <operator pos:line="2026" pos:column="19">=<pos:position pos:line="2026" pos:column="20"/></operator> <call><name pos:line="2026" pos:column="21">xcalloc<pos:position pos:line="2026" pos:column="28"/></name><argument_list pos:line="2026" pos:column="28">(<argument><expr><literal type="number" pos:line="2026" pos:column="29">1<pos:position pos:line="2026" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="2026" pos:column="32">sizeof<argument_list pos:line="2026" pos:column="38">(<argument><expr pos:line="2026" pos:column="39">struct <name pos:line="2026" pos:column="46">lock_file<pos:position pos:line="2026" pos:column="55"/></name></expr></argument>)<pos:position pos:line="2026" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="2026" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="2026" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="2027" pos:column="9">hold_locked_index<pos:position pos:line="2027" pos:column="26"/></name><argument_list pos:line="2027" pos:column="26">(<argument><expr><name pos:line="2027" pos:column="27">lock_file<pos:position pos:line="2027" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2027" pos:column="38">1<pos:position pos:line="2027" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="2027" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="2027" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="2029" pos:column="9">memset<pos:position pos:line="2029" pos:column="15"/></name><argument_list pos:line="2029" pos:column="15">(<argument><expr><operator pos:line="2029" pos:column="16">&amp;<pos:position pos:line="2029" pos:column="21"/></operator><name pos:line="2029" pos:column="17">opts<pos:position pos:line="2029" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2029" pos:column="23">0<pos:position pos:line="2029" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="2029" pos:column="26">sizeof<argument_list pos:line="2029" pos:column="32">(<argument><expr><name pos:line="2029" pos:column="33">opts<pos:position pos:line="2029" pos:column="37"/></name></expr></argument>)<pos:position pos:line="2029" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="2029" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="2029" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="2030" pos:column="9">opts<pos:position pos:line="2030" pos:column="13"/></name><operator pos:line="2030" pos:column="13">.<pos:position pos:line="2030" pos:column="14"/></operator><name pos:line="2030" pos:column="14">head_idx<pos:position pos:line="2030" pos:column="22"/></name></name> <operator pos:line="2030" pos:column="23">=<pos:position pos:line="2030" pos:column="24"/></operator> <literal type="number" pos:line="2030" pos:column="25">1<pos:position pos:line="2030" pos:column="26"/></literal></expr>;<pos:position pos:line="2030" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="2031" pos:column="9">opts<pos:position pos:line="2031" pos:column="13"/></name><operator pos:line="2031" pos:column="13">.<pos:position pos:line="2031" pos:column="14"/></operator><name pos:line="2031" pos:column="14">src_index<pos:position pos:line="2031" pos:column="23"/></name></name> <operator pos:line="2031" pos:column="24">=<pos:position pos:line="2031" pos:column="25"/></operator> <operator pos:line="2031" pos:column="26">&amp;<pos:position pos:line="2031" pos:column="31"/></operator><name pos:line="2031" pos:column="27">the_index<pos:position pos:line="2031" pos:column="36"/></name></expr>;<pos:position pos:line="2031" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="2032" pos:column="9">opts<pos:position pos:line="2032" pos:column="13"/></name><operator pos:line="2032" pos:column="13">.<pos:position pos:line="2032" pos:column="14"/></operator><name pos:line="2032" pos:column="14">dst_index<pos:position pos:line="2032" pos:column="23"/></name></name> <operator pos:line="2032" pos:column="24">=<pos:position pos:line="2032" pos:column="25"/></operator> <operator pos:line="2032" pos:column="26">&amp;<pos:position pos:line="2032" pos:column="31"/></operator><name pos:line="2032" pos:column="27">the_index<pos:position pos:line="2032" pos:column="36"/></name></expr>;<pos:position pos:line="2032" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="2033" pos:column="9">opts<pos:position pos:line="2033" pos:column="13"/></name><operator pos:line="2033" pos:column="13">.<pos:position pos:line="2033" pos:column="14"/></operator><name pos:line="2033" pos:column="14">merge<pos:position pos:line="2033" pos:column="19"/></name></name> <operator pos:line="2033" pos:column="20">=<pos:position pos:line="2033" pos:column="21"/></operator> <literal type="number" pos:line="2033" pos:column="22">1<pos:position pos:line="2033" pos:column="23"/></literal></expr>;<pos:position pos:line="2033" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="2034" pos:column="9">opts<pos:position pos:line="2034" pos:column="13"/></name><operator pos:line="2034" pos:column="13">.<pos:position pos:line="2034" pos:column="14"/></operator><name pos:line="2034" pos:column="14">fn<pos:position pos:line="2034" pos:column="16"/></name></name> <operator pos:line="2034" pos:column="17">=<pos:position pos:line="2034" pos:column="18"/></operator> <name pos:line="2034" pos:column="19">oneway_merge<pos:position pos:line="2034" pos:column="31"/></name></expr>;<pos:position pos:line="2034" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="2035" pos:column="9">init_tree_desc<pos:position pos:line="2035" pos:column="23"/></name><argument_list pos:line="2035" pos:column="23">(<argument><expr><operator pos:line="2035" pos:column="24">&amp;<pos:position pos:line="2035" pos:column="29"/></operator><name><name pos:line="2035" pos:column="25">t<pos:position pos:line="2035" pos:column="26"/></name><index pos:line="2035" pos:column="26">[<expr><literal type="number" pos:line="2035" pos:column="27">0<pos:position pos:line="2035" pos:column="28"/></literal></expr>]<pos:position pos:line="2035" pos:column="29"/></index></name></expr></argument>, <argument><expr><name><name pos:line="2035" pos:column="31">tree<pos:position pos:line="2035" pos:column="35"/></name><operator pos:line="2035" pos:column="35">-&gt;<pos:position pos:line="2035" pos:column="40"/></operator><name pos:line="2035" pos:column="37">buffer<pos:position pos:line="2035" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="2035" pos:column="45">tree<pos:position pos:line="2035" pos:column="49"/></name><operator pos:line="2035" pos:column="49">-&gt;<pos:position pos:line="2035" pos:column="54"/></operator><name pos:line="2035" pos:column="51">size<pos:position pos:line="2035" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="2035" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="2035" pos:column="57"/></expr_stmt>

	<if pos:line="2037" pos:column="9">if <condition pos:line="2037" pos:column="12">(<expr><call><name pos:line="2037" pos:column="13">unpack_trees<pos:position pos:line="2037" pos:column="25"/></name><argument_list pos:line="2037" pos:column="25">(<argument><expr><literal type="number" pos:line="2037" pos:column="26">1<pos:position pos:line="2037" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="2037" pos:column="29">t<pos:position pos:line="2037" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="2037" pos:column="32">&amp;<pos:position pos:line="2037" pos:column="37"/></operator><name pos:line="2037" pos:column="33">opts<pos:position pos:line="2037" pos:column="37"/></name></expr></argument>)<pos:position pos:line="2037" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="2037" pos:column="39"/></condition><then pos:line="2037" pos:column="39"> <block pos:line="2037" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="2038" pos:column="17">rollback_lock_file<pos:position pos:line="2038" pos:column="35"/></name><argument_list pos:line="2038" pos:column="35">(<argument><expr><name pos:line="2038" pos:column="36">lock_file<pos:position pos:line="2038" pos:column="45"/></name></expr></argument>)<pos:position pos:line="2038" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="2038" pos:column="47"/></expr_stmt>
		<return pos:line="2039" pos:column="17">return <expr><operator pos:line="2039" pos:column="24">-<pos:position pos:line="2039" pos:column="25"/></operator><literal type="number" pos:line="2039" pos:column="25">1<pos:position pos:line="2039" pos:column="26"/></literal></expr>;<pos:position pos:line="2039" pos:column="27"/></return>
	}<pos:position pos:line="2040" pos:column="10"/></block></then></if>

	<if pos:line="2042" pos:column="9">if <condition pos:line="2042" pos:column="12">(<expr><call><name pos:line="2042" pos:column="13">write_locked_index<pos:position pos:line="2042" pos:column="31"/></name><argument_list pos:line="2042" pos:column="31">(<argument><expr><operator pos:line="2042" pos:column="32">&amp;<pos:position pos:line="2042" pos:column="37"/></operator><name pos:line="2042" pos:column="33">the_index<pos:position pos:line="2042" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="2042" pos:column="44">lock_file<pos:position pos:line="2042" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="2042" pos:column="55">COMMIT_LOCK<pos:position pos:line="2042" pos:column="66"/></name></expr></argument>)<pos:position pos:line="2042" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="2042" pos:column="68"/></condition><then pos:line="2042" pos:column="68">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="2043" pos:column="17">die<pos:position pos:line="2043" pos:column="20"/></name><argument_list pos:line="2043" pos:column="20">(<argument><expr><call><name pos:line="2043" pos:column="21">_<pos:position pos:line="2043" pos:column="22"/></name><argument_list pos:line="2043" pos:column="22">(<argument><expr><literal type="string" pos:line="2043" pos:column="23">"unable to write new index file"<pos:position pos:line="2043" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="2043" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="2043" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="2043" pos:column="58"/></expr_stmt></block></then></if>

	<return pos:line="2045" pos:column="9">return <expr><literal type="number" pos:line="2045" pos:column="16">0<pos:position pos:line="2045" pos:column="17"/></literal></expr>;<pos:position pos:line="2045" pos:column="18"/></return>
}<pos:position pos:line="2046" pos:column="2"/></block></function>

<comment type="block" pos:line="2048" pos:column="1">/**
 * Clean the index without touching entries that are not modified between
 * `head` and `remote`.
 */</comment>
<function><specifier pos:line="2052" pos:column="1">static<pos:position pos:line="2052" pos:column="7"/></specifier> <type><name pos:line="2052" pos:column="8">int<pos:position pos:line="2052" pos:column="11"/></name></type> <name pos:line="2052" pos:column="12">clean_index<pos:position pos:line="2052" pos:column="23"/></name><parameter_list pos:line="2052" pos:column="23">(<parameter><decl><type><specifier pos:line="2052" pos:column="24">const<pos:position pos:line="2052" pos:column="29"/></specifier> <name pos:line="2052" pos:column="30">unsigned<pos:position pos:line="2052" pos:column="38"/></name> <name pos:line="2052" pos:column="39">char<pos:position pos:line="2052" pos:column="43"/></name> <modifier pos:line="2052" pos:column="44">*<pos:position pos:line="2052" pos:column="45"/></modifier></type><name pos:line="2052" pos:column="45">head<pos:position pos:line="2052" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2052" pos:column="51">const<pos:position pos:line="2052" pos:column="56"/></specifier> <name pos:line="2052" pos:column="57">unsigned<pos:position pos:line="2052" pos:column="65"/></name> <name pos:line="2052" pos:column="66">char<pos:position pos:line="2052" pos:column="70"/></name> <modifier pos:line="2052" pos:column="71">*<pos:position pos:line="2052" pos:column="72"/></modifier></type><name pos:line="2052" pos:column="72">remote<pos:position pos:line="2052" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="2052" pos:column="79"/></parameter_list>
<block pos:line="2053" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="2054" pos:column="9">struct<pos:position pos:line="2054" pos:column="15"/></name> <name pos:line="2054" pos:column="16">tree<pos:position pos:line="2054" pos:column="20"/></name></name> <modifier pos:line="2054" pos:column="21">*<pos:position pos:line="2054" pos:column="22"/></modifier></type><name pos:line="2054" pos:column="22">head_tree<pos:position pos:line="2054" pos:column="31"/></name></decl>, <modifier pos:line="2054" pos:column="33">*<pos:position pos:line="2054" pos:column="34"/></modifier><decl><type ref="prev"/><name pos:line="2054" pos:column="34">remote_tree<pos:position pos:line="2054" pos:column="45"/></name></decl>, <modifier pos:line="2054" pos:column="47">*<pos:position pos:line="2054" pos:column="48"/></modifier><decl><type ref="prev"/><name pos:line="2054" pos:column="48">index_tree<pos:position pos:line="2054" pos:column="58"/></name></decl>;<pos:position pos:line="2054" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="2055" pos:column="9">unsigned<pos:position pos:line="2055" pos:column="17"/></name> <name pos:line="2055" pos:column="18">char<pos:position pos:line="2055" pos:column="22"/></name></type> <name><name pos:line="2055" pos:column="23">index<pos:position pos:line="2055" pos:column="28"/></name><index pos:line="2055" pos:column="28">[<expr><name pos:line="2055" pos:column="29">GIT_SHA1_RAWSZ<pos:position pos:line="2055" pos:column="43"/></name></expr>]<pos:position pos:line="2055" pos:column="44"/></index></name></decl>;<pos:position pos:line="2055" pos:column="45"/></decl_stmt>

	<expr_stmt><expr><name pos:line="2057" pos:column="9">head_tree<pos:position pos:line="2057" pos:column="18"/></name> <operator pos:line="2057" pos:column="19">=<pos:position pos:line="2057" pos:column="20"/></operator> <call><name pos:line="2057" pos:column="21">parse_tree_indirect<pos:position pos:line="2057" pos:column="40"/></name><argument_list pos:line="2057" pos:column="40">(<argument><expr><name pos:line="2057" pos:column="41">head<pos:position pos:line="2057" pos:column="45"/></name></expr></argument>)<pos:position pos:line="2057" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="2057" pos:column="47"/></expr_stmt>
	<if pos:line="2058" pos:column="9">if <condition pos:line="2058" pos:column="12">(<expr><operator pos:line="2058" pos:column="13">!<pos:position pos:line="2058" pos:column="14"/></operator><name pos:line="2058" pos:column="14">head_tree<pos:position pos:line="2058" pos:column="23"/></name></expr>)<pos:position pos:line="2058" pos:column="24"/></condition><then pos:line="2058" pos:column="24">
		<block type="pseudo"><return pos:line="2059" pos:column="17">return <expr><call><name pos:line="2059" pos:column="24">error<pos:position pos:line="2059" pos:column="29"/></name><argument_list pos:line="2059" pos:column="29">(<argument><expr><call><name pos:line="2059" pos:column="30">_<pos:position pos:line="2059" pos:column="31"/></name><argument_list pos:line="2059" pos:column="31">(<argument><expr><literal type="string" pos:line="2059" pos:column="32">"Could not parse object '%s'."<pos:position pos:line="2059" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="2059" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="2059" pos:column="65">sha1_to_hex<pos:position pos:line="2059" pos:column="76"/></name><argument_list pos:line="2059" pos:column="76">(<argument><expr><name pos:line="2059" pos:column="77">head<pos:position pos:line="2059" pos:column="81"/></name></expr></argument>)<pos:position pos:line="2059" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="2059" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="2059" pos:column="84"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="2061" pos:column="9">remote_tree<pos:position pos:line="2061" pos:column="20"/></name> <operator pos:line="2061" pos:column="21">=<pos:position pos:line="2061" pos:column="22"/></operator> <call><name pos:line="2061" pos:column="23">parse_tree_indirect<pos:position pos:line="2061" pos:column="42"/></name><argument_list pos:line="2061" pos:column="42">(<argument><expr><name pos:line="2061" pos:column="43">remote<pos:position pos:line="2061" pos:column="49"/></name></expr></argument>)<pos:position pos:line="2061" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="2061" pos:column="51"/></expr_stmt>
	<if pos:line="2062" pos:column="9">if <condition pos:line="2062" pos:column="12">(<expr><operator pos:line="2062" pos:column="13">!<pos:position pos:line="2062" pos:column="14"/></operator><name pos:line="2062" pos:column="14">remote_tree<pos:position pos:line="2062" pos:column="25"/></name></expr>)<pos:position pos:line="2062" pos:column="26"/></condition><then pos:line="2062" pos:column="26">
		<block type="pseudo"><return pos:line="2063" pos:column="17">return <expr><call><name pos:line="2063" pos:column="24">error<pos:position pos:line="2063" pos:column="29"/></name><argument_list pos:line="2063" pos:column="29">(<argument><expr><call><name pos:line="2063" pos:column="30">_<pos:position pos:line="2063" pos:column="31"/></name><argument_list pos:line="2063" pos:column="31">(<argument><expr><literal type="string" pos:line="2063" pos:column="32">"Could not parse object '%s'."<pos:position pos:line="2063" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="2063" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="2063" pos:column="65">sha1_to_hex<pos:position pos:line="2063" pos:column="76"/></name><argument_list pos:line="2063" pos:column="76">(<argument><expr><name pos:line="2063" pos:column="77">remote<pos:position pos:line="2063" pos:column="83"/></name></expr></argument>)<pos:position pos:line="2063" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="2063" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="2063" pos:column="86"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="2065" pos:column="9">read_cache_unmerged<pos:position pos:line="2065" pos:column="28"/></name><argument_list pos:line="2065" pos:column="28">()<pos:position pos:line="2065" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="2065" pos:column="31"/></expr_stmt>

	<if pos:line="2067" pos:column="9">if <condition pos:line="2067" pos:column="12">(<expr><call><name pos:line="2067" pos:column="13">fast_forward_to<pos:position pos:line="2067" pos:column="28"/></name><argument_list pos:line="2067" pos:column="28">(<argument><expr><name pos:line="2067" pos:column="29">head_tree<pos:position pos:line="2067" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="2067" pos:column="40">head_tree<pos:position pos:line="2067" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2067" pos:column="51">1<pos:position pos:line="2067" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="2067" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="2067" pos:column="54"/></condition><then pos:line="2067" pos:column="54">
		<block type="pseudo"><return pos:line="2068" pos:column="17">return <expr><operator pos:line="2068" pos:column="24">-<pos:position pos:line="2068" pos:column="25"/></operator><literal type="number" pos:line="2068" pos:column="25">1<pos:position pos:line="2068" pos:column="26"/></literal></expr>;<pos:position pos:line="2068" pos:column="27"/></return></block></then></if>

	<if pos:line="2070" pos:column="9">if <condition pos:line="2070" pos:column="12">(<expr><call><name pos:line="2070" pos:column="13">write_cache_as_tree<pos:position pos:line="2070" pos:column="32"/></name><argument_list pos:line="2070" pos:column="32">(<argument><expr><name pos:line="2070" pos:column="33">index<pos:position pos:line="2070" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2070" pos:column="40">0<pos:position pos:line="2070" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="2070" pos:column="43">NULL<pos:position pos:line="2070" pos:column="47"/></name></expr></argument>)<pos:position pos:line="2070" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="2070" pos:column="49"/></condition><then pos:line="2070" pos:column="49">
		<block type="pseudo"><return pos:line="2071" pos:column="17">return <expr><operator pos:line="2071" pos:column="24">-<pos:position pos:line="2071" pos:column="25"/></operator><literal type="number" pos:line="2071" pos:column="25">1<pos:position pos:line="2071" pos:column="26"/></literal></expr>;<pos:position pos:line="2071" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="2073" pos:column="9">index_tree<pos:position pos:line="2073" pos:column="19"/></name> <operator pos:line="2073" pos:column="20">=<pos:position pos:line="2073" pos:column="21"/></operator> <call><name pos:line="2073" pos:column="22">parse_tree_indirect<pos:position pos:line="2073" pos:column="41"/></name><argument_list pos:line="2073" pos:column="41">(<argument><expr><name pos:line="2073" pos:column="42">index<pos:position pos:line="2073" pos:column="47"/></name></expr></argument>)<pos:position pos:line="2073" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="2073" pos:column="49"/></expr_stmt>
	<if pos:line="2074" pos:column="9">if <condition pos:line="2074" pos:column="12">(<expr><operator pos:line="2074" pos:column="13">!<pos:position pos:line="2074" pos:column="14"/></operator><name pos:line="2074" pos:column="14">index_tree<pos:position pos:line="2074" pos:column="24"/></name></expr>)<pos:position pos:line="2074" pos:column="25"/></condition><then pos:line="2074" pos:column="25">
		<block type="pseudo"><return pos:line="2075" pos:column="17">return <expr><call><name pos:line="2075" pos:column="24">error<pos:position pos:line="2075" pos:column="29"/></name><argument_list pos:line="2075" pos:column="29">(<argument><expr><call><name pos:line="2075" pos:column="30">_<pos:position pos:line="2075" pos:column="31"/></name><argument_list pos:line="2075" pos:column="31">(<argument><expr><literal type="string" pos:line="2075" pos:column="32">"Could not parse object '%s'."<pos:position pos:line="2075" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="2075" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="2075" pos:column="65">sha1_to_hex<pos:position pos:line="2075" pos:column="76"/></name><argument_list pos:line="2075" pos:column="76">(<argument><expr><name pos:line="2075" pos:column="77">index<pos:position pos:line="2075" pos:column="82"/></name></expr></argument>)<pos:position pos:line="2075" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="2075" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="2075" pos:column="85"/></return></block></then></if>

	<if pos:line="2077" pos:column="9">if <condition pos:line="2077" pos:column="12">(<expr><call><name pos:line="2077" pos:column="13">fast_forward_to<pos:position pos:line="2077" pos:column="28"/></name><argument_list pos:line="2077" pos:column="28">(<argument><expr><name pos:line="2077" pos:column="29">index_tree<pos:position pos:line="2077" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="2077" pos:column="41">remote_tree<pos:position pos:line="2077" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2077" pos:column="54">0<pos:position pos:line="2077" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="2077" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="2077" pos:column="57"/></condition><then pos:line="2077" pos:column="57">
		<block type="pseudo"><return pos:line="2078" pos:column="17">return <expr><operator pos:line="2078" pos:column="24">-<pos:position pos:line="2078" pos:column="25"/></operator><literal type="number" pos:line="2078" pos:column="25">1<pos:position pos:line="2078" pos:column="26"/></literal></expr>;<pos:position pos:line="2078" pos:column="27"/></return></block></then></if>

	<if pos:line="2080" pos:column="9">if <condition pos:line="2080" pos:column="12">(<expr><call><name pos:line="2080" pos:column="13">merge_tree<pos:position pos:line="2080" pos:column="23"/></name><argument_list pos:line="2080" pos:column="23">(<argument><expr><name pos:line="2080" pos:column="24">remote_tree<pos:position pos:line="2080" pos:column="35"/></name></expr></argument>)<pos:position pos:line="2080" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="2080" pos:column="37"/></condition><then pos:line="2080" pos:column="37">
		<block type="pseudo"><return pos:line="2081" pos:column="17">return <expr><operator pos:line="2081" pos:column="24">-<pos:position pos:line="2081" pos:column="25"/></operator><literal type="number" pos:line="2081" pos:column="25">1<pos:position pos:line="2081" pos:column="26"/></literal></expr>;<pos:position pos:line="2081" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="2083" pos:column="9">remove_branch_state<pos:position pos:line="2083" pos:column="28"/></name><argument_list pos:line="2083" pos:column="28">()<pos:position pos:line="2083" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="2083" pos:column="31"/></expr_stmt>

	<return pos:line="2085" pos:column="9">return <expr><literal type="number" pos:line="2085" pos:column="16">0<pos:position pos:line="2085" pos:column="17"/></literal></expr>;<pos:position pos:line="2085" pos:column="18"/></return>
}<pos:position pos:line="2086" pos:column="2"/></block></function>

<comment type="block" pos:line="2088" pos:column="1">/**
 * Resets rerere's merge resolution metadata.
 */</comment>
<function><specifier pos:line="2091" pos:column="1">static<pos:position pos:line="2091" pos:column="7"/></specifier> <type><name pos:line="2091" pos:column="8">void<pos:position pos:line="2091" pos:column="12"/></name></type> <name pos:line="2091" pos:column="13">am_rerere_clear<pos:position pos:line="2091" pos:column="28"/></name><parameter_list pos:line="2091" pos:column="28">(<parameter><decl><type><name pos:line="2091" pos:column="29">void<pos:position pos:line="2091" pos:column="33"/></name></type></decl></parameter>)<pos:position pos:line="2091" pos:column="34"/></parameter_list>
<block pos:line="2092" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="2093" pos:column="9">struct<pos:position pos:line="2093" pos:column="15"/></name> <name pos:line="2093" pos:column="16">string_list<pos:position pos:line="2093" pos:column="27"/></name></name></type> <name pos:line="2093" pos:column="28">merge_rr<pos:position pos:line="2093" pos:column="36"/></name> <init pos:line="2093" pos:column="37">= <expr><name pos:line="2093" pos:column="39">STRING_LIST_INIT_DUP<pos:position pos:line="2093" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="2093" pos:column="60"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="2094" pos:column="9">rerere_clear<pos:position pos:line="2094" pos:column="21"/></name><argument_list pos:line="2094" pos:column="21">(<argument><expr><operator pos:line="2094" pos:column="22">&amp;<pos:position pos:line="2094" pos:column="27"/></operator><name pos:line="2094" pos:column="23">merge_rr<pos:position pos:line="2094" pos:column="31"/></name></expr></argument>)<pos:position pos:line="2094" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="2094" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="2095" pos:column="9">string_list_clear<pos:position pos:line="2095" pos:column="26"/></name><argument_list pos:line="2095" pos:column="26">(<argument><expr><operator pos:line="2095" pos:column="27">&amp;<pos:position pos:line="2095" pos:column="32"/></operator><name pos:line="2095" pos:column="28">merge_rr<pos:position pos:line="2095" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2095" pos:column="38">1<pos:position pos:line="2095" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="2095" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="2095" pos:column="41"/></expr_stmt>
}<pos:position pos:line="2096" pos:column="2"/></block></function>

<comment type="block" pos:line="2098" pos:column="1">/**
 * Resume the current am session by skipping the current patch.
 */</comment>
<function><specifier pos:line="2101" pos:column="1">static<pos:position pos:line="2101" pos:column="7"/></specifier> <type><name pos:line="2101" pos:column="8">void<pos:position pos:line="2101" pos:column="12"/></name></type> <name pos:line="2101" pos:column="13">am_skip<pos:position pos:line="2101" pos:column="20"/></name><parameter_list pos:line="2101" pos:column="20">(<parameter><decl><type><name><name pos:line="2101" pos:column="21">struct<pos:position pos:line="2101" pos:column="27"/></name> <name pos:line="2101" pos:column="28">am_state<pos:position pos:line="2101" pos:column="36"/></name></name> <modifier pos:line="2101" pos:column="37">*<pos:position pos:line="2101" pos:column="38"/></modifier></type><name pos:line="2101" pos:column="38">state<pos:position pos:line="2101" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="2101" pos:column="44"/></parameter_list>
<block pos:line="2102" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="2103" pos:column="9">unsigned<pos:position pos:line="2103" pos:column="17"/></name> <name pos:line="2103" pos:column="18">char<pos:position pos:line="2103" pos:column="22"/></name></type> <name><name pos:line="2103" pos:column="23">head<pos:position pos:line="2103" pos:column="27"/></name><index pos:line="2103" pos:column="27">[<expr><name pos:line="2103" pos:column="28">GIT_SHA1_RAWSZ<pos:position pos:line="2103" pos:column="42"/></name></expr>]<pos:position pos:line="2103" pos:column="43"/></index></name></decl>;<pos:position pos:line="2103" pos:column="44"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="2105" pos:column="9">am_rerere_clear<pos:position pos:line="2105" pos:column="24"/></name><argument_list pos:line="2105" pos:column="24">()<pos:position pos:line="2105" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="2105" pos:column="27"/></expr_stmt>

	<if pos:line="2107" pos:column="9">if <condition pos:line="2107" pos:column="12">(<expr><call><name pos:line="2107" pos:column="13">get_sha1<pos:position pos:line="2107" pos:column="21"/></name><argument_list pos:line="2107" pos:column="21">(<argument><expr><literal type="string" pos:line="2107" pos:column="22">"HEAD"<pos:position pos:line="2107" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="2107" pos:column="30">head<pos:position pos:line="2107" pos:column="34"/></name></expr></argument>)<pos:position pos:line="2107" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="2107" pos:column="36"/></condition><then pos:line="2107" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="2108" pos:column="17">hashcpy<pos:position pos:line="2108" pos:column="24"/></name><argument_list pos:line="2108" pos:column="24">(<argument><expr><name pos:line="2108" pos:column="25">head<pos:position pos:line="2108" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="2108" pos:column="31">EMPTY_TREE_SHA1_BIN<pos:position pos:line="2108" pos:column="50"/></name></expr></argument>)<pos:position pos:line="2108" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="2108" pos:column="52"/></expr_stmt></block></then></if>

	<if pos:line="2110" pos:column="9">if <condition pos:line="2110" pos:column="12">(<expr><call><name pos:line="2110" pos:column="13">clean_index<pos:position pos:line="2110" pos:column="24"/></name><argument_list pos:line="2110" pos:column="24">(<argument><expr><name pos:line="2110" pos:column="25">head<pos:position pos:line="2110" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="2110" pos:column="31">head<pos:position pos:line="2110" pos:column="35"/></name></expr></argument>)<pos:position pos:line="2110" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="2110" pos:column="37"/></condition><then pos:line="2110" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="2111" pos:column="17">die<pos:position pos:line="2111" pos:column="20"/></name><argument_list pos:line="2111" pos:column="20">(<argument><expr><call><name pos:line="2111" pos:column="21">_<pos:position pos:line="2111" pos:column="22"/></name><argument_list pos:line="2111" pos:column="22">(<argument><expr><literal type="string" pos:line="2111" pos:column="23">"failed to clean index"<pos:position pos:line="2111" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="2111" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="2111" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="2111" pos:column="49"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="2113" pos:column="9">am_next<pos:position pos:line="2113" pos:column="16"/></name><argument_list pos:line="2113" pos:column="16">(<argument><expr><name pos:line="2113" pos:column="17">state<pos:position pos:line="2113" pos:column="22"/></name></expr></argument>)<pos:position pos:line="2113" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="2113" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="2114" pos:column="9">am_load<pos:position pos:line="2114" pos:column="16"/></name><argument_list pos:line="2114" pos:column="16">(<argument><expr><name pos:line="2114" pos:column="17">state<pos:position pos:line="2114" pos:column="22"/></name></expr></argument>)<pos:position pos:line="2114" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="2114" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="2115" pos:column="9">am_run<pos:position pos:line="2115" pos:column="15"/></name><argument_list pos:line="2115" pos:column="15">(<argument><expr><name pos:line="2115" pos:column="16">state<pos:position pos:line="2115" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2115" pos:column="23">0<pos:position pos:line="2115" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="2115" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="2115" pos:column="26"/></expr_stmt>
}<pos:position pos:line="2116" pos:column="2"/></block></function>

<comment type="block" pos:line="2118" pos:column="1">/**
 * Returns true if it is safe to reset HEAD to the ORIG_HEAD, false otherwise.
 *
 * It is not safe to reset HEAD when:
 * 1. git-am previously failed because the index was dirty.
 * 2. HEAD has moved since git-am previously failed.
 */</comment>
<function><specifier pos:line="2125" pos:column="1">static<pos:position pos:line="2125" pos:column="7"/></specifier> <type><name pos:line="2125" pos:column="8">int<pos:position pos:line="2125" pos:column="11"/></name></type> <name pos:line="2125" pos:column="12">safe_to_abort<pos:position pos:line="2125" pos:column="25"/></name><parameter_list pos:line="2125" pos:column="25">(<parameter><decl><type><specifier pos:line="2125" pos:column="26">const<pos:position pos:line="2125" pos:column="31"/></specifier> <name><name pos:line="2125" pos:column="32">struct<pos:position pos:line="2125" pos:column="38"/></name> <name pos:line="2125" pos:column="39">am_state<pos:position pos:line="2125" pos:column="47"/></name></name> <modifier pos:line="2125" pos:column="48">*<pos:position pos:line="2125" pos:column="49"/></modifier></type><name pos:line="2125" pos:column="49">state<pos:position pos:line="2125" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2125" pos:column="55"/></parameter_list>
<block pos:line="2126" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="2127" pos:column="9">struct<pos:position pos:line="2127" pos:column="15"/></name> <name pos:line="2127" pos:column="16">strbuf<pos:position pos:line="2127" pos:column="22"/></name></name></type> <name pos:line="2127" pos:column="23">sb<pos:position pos:line="2127" pos:column="25"/></name> <init pos:line="2127" pos:column="26">= <expr><name pos:line="2127" pos:column="28">STRBUF_INIT<pos:position pos:line="2127" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="2127" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="2128" pos:column="9">unsigned<pos:position pos:line="2128" pos:column="17"/></name> <name pos:line="2128" pos:column="18">char<pos:position pos:line="2128" pos:column="22"/></name></type> <name><name pos:line="2128" pos:column="23">abort_safety<pos:position pos:line="2128" pos:column="35"/></name><index pos:line="2128" pos:column="35">[<expr><name pos:line="2128" pos:column="36">GIT_SHA1_RAWSZ<pos:position pos:line="2128" pos:column="50"/></name></expr>]<pos:position pos:line="2128" pos:column="51"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="2128" pos:column="53">head<pos:position pos:line="2128" pos:column="57"/></name><index pos:line="2128" pos:column="57">[<expr><name pos:line="2128" pos:column="58">GIT_SHA1_RAWSZ<pos:position pos:line="2128" pos:column="72"/></name></expr>]<pos:position pos:line="2128" pos:column="73"/></index></name></decl>;<pos:position pos:line="2128" pos:column="74"/></decl_stmt>

	<if pos:line="2130" pos:column="9">if <condition pos:line="2130" pos:column="12">(<expr><call><name pos:line="2130" pos:column="13">file_exists<pos:position pos:line="2130" pos:column="24"/></name><argument_list pos:line="2130" pos:column="24">(<argument><expr><call><name pos:line="2130" pos:column="25">am_path<pos:position pos:line="2130" pos:column="32"/></name><argument_list pos:line="2130" pos:column="32">(<argument><expr><name pos:line="2130" pos:column="33">state<pos:position pos:line="2130" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2130" pos:column="40">"dirtyindex"<pos:position pos:line="2130" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="2130" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="2130" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="2130" pos:column="55"/></condition><then pos:line="2130" pos:column="55">
		<block type="pseudo"><return pos:line="2131" pos:column="17">return <expr><literal type="number" pos:line="2131" pos:column="24">0<pos:position pos:line="2131" pos:column="25"/></literal></expr>;<pos:position pos:line="2131" pos:column="26"/></return></block></then></if>

	<if pos:line="2133" pos:column="9">if <condition pos:line="2133" pos:column="12">(<expr><call><name pos:line="2133" pos:column="13">read_state_file<pos:position pos:line="2133" pos:column="28"/></name><argument_list pos:line="2133" pos:column="28">(<argument><expr><operator pos:line="2133" pos:column="29">&amp;<pos:position pos:line="2133" pos:column="34"/></operator><name pos:line="2133" pos:column="30">sb<pos:position pos:line="2133" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="2133" pos:column="34">state<pos:position pos:line="2133" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2133" pos:column="41">"abort-safety"<pos:position pos:line="2133" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="2133" pos:column="57">1<pos:position pos:line="2133" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="2133" pos:column="59"/></argument_list></call> <operator pos:line="2133" pos:column="60">&gt;<pos:position pos:line="2133" pos:column="64"/></operator> <literal type="number" pos:line="2133" pos:column="62">0<pos:position pos:line="2133" pos:column="63"/></literal></expr>)<pos:position pos:line="2133" pos:column="64"/></condition><then pos:line="2133" pos:column="64"> <block pos:line="2133" pos:column="65">{
		<if pos:line="2134" pos:column="17">if <condition pos:line="2134" pos:column="20">(<expr><call><name pos:line="2134" pos:column="21">get_sha1_hex<pos:position pos:line="2134" pos:column="33"/></name><argument_list pos:line="2134" pos:column="33">(<argument><expr><name><name pos:line="2134" pos:column="34">sb<pos:position pos:line="2134" pos:column="36"/></name><operator pos:line="2134" pos:column="36">.<pos:position pos:line="2134" pos:column="37"/></operator><name pos:line="2134" pos:column="37">buf<pos:position pos:line="2134" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="2134" pos:column="42">abort_safety<pos:position pos:line="2134" pos:column="54"/></name></expr></argument>)<pos:position pos:line="2134" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="2134" pos:column="56"/></condition><then pos:line="2134" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="2135" pos:column="25">die<pos:position pos:line="2135" pos:column="28"/></name><argument_list pos:line="2135" pos:column="28">(<argument><expr><call><name pos:line="2135" pos:column="29">_<pos:position pos:line="2135" pos:column="30"/></name><argument_list pos:line="2135" pos:column="30">(<argument><expr><literal type="string" pos:line="2135" pos:column="31">"could not parse %s"<pos:position pos:line="2135" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="2135" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="2135" pos:column="54">am_path<pos:position pos:line="2135" pos:column="61"/></name><argument_list pos:line="2135" pos:column="61">(<argument><expr><name pos:line="2135" pos:column="62">state<pos:position pos:line="2135" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2135" pos:column="69">"abort_safety"<pos:position pos:line="2135" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="2135" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="2135" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="2135" pos:column="86"/></expr_stmt></block></then></if>
	}<pos:position pos:line="2136" pos:column="10"/></block></then> <else pos:line="2136" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="2137" pos:column="17">hashclr<pos:position pos:line="2137" pos:column="24"/></name><argument_list pos:line="2137" pos:column="24">(<argument><expr><name pos:line="2137" pos:column="25">abort_safety<pos:position pos:line="2137" pos:column="37"/></name></expr></argument>)<pos:position pos:line="2137" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="2137" pos:column="39"/></expr_stmt></block></else></if>

	<if pos:line="2139" pos:column="9">if <condition pos:line="2139" pos:column="12">(<expr><call><name pos:line="2139" pos:column="13">get_sha1<pos:position pos:line="2139" pos:column="21"/></name><argument_list pos:line="2139" pos:column="21">(<argument><expr><literal type="string" pos:line="2139" pos:column="22">"HEAD"<pos:position pos:line="2139" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="2139" pos:column="30">head<pos:position pos:line="2139" pos:column="34"/></name></expr></argument>)<pos:position pos:line="2139" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="2139" pos:column="36"/></condition><then pos:line="2139" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="2140" pos:column="17">hashclr<pos:position pos:line="2140" pos:column="24"/></name><argument_list pos:line="2140" pos:column="24">(<argument><expr><name pos:line="2140" pos:column="25">head<pos:position pos:line="2140" pos:column="29"/></name></expr></argument>)<pos:position pos:line="2140" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="2140" pos:column="31"/></expr_stmt></block></then></if>

	<if pos:line="2142" pos:column="9">if <condition pos:line="2142" pos:column="12">(<expr><operator pos:line="2142" pos:column="13">!<pos:position pos:line="2142" pos:column="14"/></operator><call><name pos:line="2142" pos:column="14">hashcmp<pos:position pos:line="2142" pos:column="21"/></name><argument_list pos:line="2142" pos:column="21">(<argument><expr><name pos:line="2142" pos:column="22">head<pos:position pos:line="2142" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="2142" pos:column="28">abort_safety<pos:position pos:line="2142" pos:column="40"/></name></expr></argument>)<pos:position pos:line="2142" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="2142" pos:column="42"/></condition><then pos:line="2142" pos:column="42">
		<block type="pseudo"><return pos:line="2143" pos:column="17">return <expr><literal type="number" pos:line="2143" pos:column="24">1<pos:position pos:line="2143" pos:column="25"/></literal></expr>;<pos:position pos:line="2143" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="2145" pos:column="9">error<pos:position pos:line="2145" pos:column="14"/></name><argument_list pos:line="2145" pos:column="14">(<argument><expr><call><name pos:line="2145" pos:column="15">_<pos:position pos:line="2145" pos:column="16"/></name><argument_list pos:line="2145" pos:column="16">(<argument><expr><literal type="string" pos:line="2145" pos:column="17">"You seem to have moved HEAD since the last 'am' failure.\n"<pos:position pos:line="2145" pos:column="77"/></literal>
		<literal type="string" pos:line="2146" pos:column="17">"Not rewinding to ORIG_HEAD"<pos:position pos:line="2146" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="2146" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="2146" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="2146" pos:column="48"/></expr_stmt>

	<return pos:line="2148" pos:column="9">return <expr><literal type="number" pos:line="2148" pos:column="16">0<pos:position pos:line="2148" pos:column="17"/></literal></expr>;<pos:position pos:line="2148" pos:column="18"/></return>
}<pos:position pos:line="2149" pos:column="2"/></block></function>

<comment type="block" pos:line="2151" pos:column="1">/**
 * Aborts the current am session if it is safe to do so.
 */</comment>
<function><specifier pos:line="2154" pos:column="1">static<pos:position pos:line="2154" pos:column="7"/></specifier> <type><name pos:line="2154" pos:column="8">void<pos:position pos:line="2154" pos:column="12"/></name></type> <name pos:line="2154" pos:column="13">am_abort<pos:position pos:line="2154" pos:column="21"/></name><parameter_list pos:line="2154" pos:column="21">(<parameter><decl><type><name><name pos:line="2154" pos:column="22">struct<pos:position pos:line="2154" pos:column="28"/></name> <name pos:line="2154" pos:column="29">am_state<pos:position pos:line="2154" pos:column="37"/></name></name> <modifier pos:line="2154" pos:column="38">*<pos:position pos:line="2154" pos:column="39"/></modifier></type><name pos:line="2154" pos:column="39">state<pos:position pos:line="2154" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2154" pos:column="45"/></parameter_list>
<block pos:line="2155" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="2156" pos:column="9">unsigned<pos:position pos:line="2156" pos:column="17"/></name> <name pos:line="2156" pos:column="18">char<pos:position pos:line="2156" pos:column="22"/></name></type> <name><name pos:line="2156" pos:column="23">curr_head<pos:position pos:line="2156" pos:column="32"/></name><index pos:line="2156" pos:column="32">[<expr><name pos:line="2156" pos:column="33">GIT_SHA1_RAWSZ<pos:position pos:line="2156" pos:column="47"/></name></expr>]<pos:position pos:line="2156" pos:column="48"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="2156" pos:column="50">orig_head<pos:position pos:line="2156" pos:column="59"/></name><index pos:line="2156" pos:column="59">[<expr><name pos:line="2156" pos:column="60">GIT_SHA1_RAWSZ<pos:position pos:line="2156" pos:column="74"/></name></expr>]<pos:position pos:line="2156" pos:column="75"/></index></name></decl>;<pos:position pos:line="2156" pos:column="76"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="2157" pos:column="9">int<pos:position pos:line="2157" pos:column="12"/></name></type> <name pos:line="2157" pos:column="13">has_curr_head<pos:position pos:line="2157" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="2157" pos:column="28">has_orig_head<pos:position pos:line="2157" pos:column="41"/></name></decl>;<pos:position pos:line="2157" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="2158" pos:column="9">char<pos:position pos:line="2158" pos:column="13"/></name> <modifier pos:line="2158" pos:column="14">*<pos:position pos:line="2158" pos:column="15"/></modifier></type><name pos:line="2158" pos:column="15">curr_branch<pos:position pos:line="2158" pos:column="26"/></name></decl>;<pos:position pos:line="2158" pos:column="27"/></decl_stmt>

	<if pos:line="2160" pos:column="9">if <condition pos:line="2160" pos:column="12">(<expr><operator pos:line="2160" pos:column="13">!<pos:position pos:line="2160" pos:column="14"/></operator><call><name pos:line="2160" pos:column="14">safe_to_abort<pos:position pos:line="2160" pos:column="27"/></name><argument_list pos:line="2160" pos:column="27">(<argument><expr><name pos:line="2160" pos:column="28">state<pos:position pos:line="2160" pos:column="33"/></name></expr></argument>)<pos:position pos:line="2160" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="2160" pos:column="35"/></condition><then pos:line="2160" pos:column="35"> <block pos:line="2160" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="2161" pos:column="17">am_destroy<pos:position pos:line="2161" pos:column="27"/></name><argument_list pos:line="2161" pos:column="27">(<argument><expr><name pos:line="2161" pos:column="28">state<pos:position pos:line="2161" pos:column="33"/></name></expr></argument>)<pos:position pos:line="2161" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="2161" pos:column="35"/></expr_stmt>
		<return pos:line="2162" pos:column="17">return;<pos:position pos:line="2162" pos:column="24"/></return>
	}<pos:position pos:line="2163" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="2165" pos:column="9">am_rerere_clear<pos:position pos:line="2165" pos:column="24"/></name><argument_list pos:line="2165" pos:column="24">()<pos:position pos:line="2165" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="2165" pos:column="27"/></expr_stmt>

	<expr_stmt><expr><name pos:line="2167" pos:column="9">curr_branch<pos:position pos:line="2167" pos:column="20"/></name> <operator pos:line="2167" pos:column="21">=<pos:position pos:line="2167" pos:column="22"/></operator> <call><name pos:line="2167" pos:column="23">resolve_refdup<pos:position pos:line="2167" pos:column="37"/></name><argument_list pos:line="2167" pos:column="37">(<argument><expr><literal type="string" pos:line="2167" pos:column="38">"HEAD"<pos:position pos:line="2167" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="2167" pos:column="46">0<pos:position pos:line="2167" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="2167" pos:column="49">curr_head<pos:position pos:line="2167" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="2167" pos:column="60">NULL<pos:position pos:line="2167" pos:column="64"/></name></expr></argument>)<pos:position pos:line="2167" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="2167" pos:column="66"/></expr_stmt>
	<expr_stmt><expr><name pos:line="2168" pos:column="9">has_curr_head<pos:position pos:line="2168" pos:column="22"/></name> <operator pos:line="2168" pos:column="23">=<pos:position pos:line="2168" pos:column="24"/></operator> <operator pos:line="2168" pos:column="25">!<pos:position pos:line="2168" pos:column="26"/></operator><call><name pos:line="2168" pos:column="26">is_null_sha1<pos:position pos:line="2168" pos:column="38"/></name><argument_list pos:line="2168" pos:column="38">(<argument><expr><name pos:line="2168" pos:column="39">curr_head<pos:position pos:line="2168" pos:column="48"/></name></expr></argument>)<pos:position pos:line="2168" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="2168" pos:column="50"/></expr_stmt>
	<if pos:line="2169" pos:column="9">if <condition pos:line="2169" pos:column="12">(<expr><operator pos:line="2169" pos:column="13">!<pos:position pos:line="2169" pos:column="14"/></operator><name pos:line="2169" pos:column="14">has_curr_head<pos:position pos:line="2169" pos:column="27"/></name></expr>)<pos:position pos:line="2169" pos:column="28"/></condition><then pos:line="2169" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="2170" pos:column="17">hashcpy<pos:position pos:line="2170" pos:column="24"/></name><argument_list pos:line="2170" pos:column="24">(<argument><expr><name pos:line="2170" pos:column="25">curr_head<pos:position pos:line="2170" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="2170" pos:column="36">EMPTY_TREE_SHA1_BIN<pos:position pos:line="2170" pos:column="55"/></name></expr></argument>)<pos:position pos:line="2170" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="2170" pos:column="57"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="2172" pos:column="9">has_orig_head<pos:position pos:line="2172" pos:column="22"/></name> <operator pos:line="2172" pos:column="23">=<pos:position pos:line="2172" pos:column="24"/></operator> <operator pos:line="2172" pos:column="25">!<pos:position pos:line="2172" pos:column="26"/></operator><call><name pos:line="2172" pos:column="26">get_sha1<pos:position pos:line="2172" pos:column="34"/></name><argument_list pos:line="2172" pos:column="34">(<argument><expr><literal type="string" pos:line="2172" pos:column="35">"ORIG_HEAD"<pos:position pos:line="2172" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="2172" pos:column="48">orig_head<pos:position pos:line="2172" pos:column="57"/></name></expr></argument>)<pos:position pos:line="2172" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="2172" pos:column="59"/></expr_stmt>
	<if pos:line="2173" pos:column="9">if <condition pos:line="2173" pos:column="12">(<expr><operator pos:line="2173" pos:column="13">!<pos:position pos:line="2173" pos:column="14"/></operator><name pos:line="2173" pos:column="14">has_orig_head<pos:position pos:line="2173" pos:column="27"/></name></expr>)<pos:position pos:line="2173" pos:column="28"/></condition><then pos:line="2173" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="2174" pos:column="17">hashcpy<pos:position pos:line="2174" pos:column="24"/></name><argument_list pos:line="2174" pos:column="24">(<argument><expr><name pos:line="2174" pos:column="25">orig_head<pos:position pos:line="2174" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="2174" pos:column="36">EMPTY_TREE_SHA1_BIN<pos:position pos:line="2174" pos:column="55"/></name></expr></argument>)<pos:position pos:line="2174" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="2174" pos:column="57"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="2176" pos:column="9">clean_index<pos:position pos:line="2176" pos:column="20"/></name><argument_list pos:line="2176" pos:column="20">(<argument><expr><name pos:line="2176" pos:column="21">curr_head<pos:position pos:line="2176" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="2176" pos:column="32">orig_head<pos:position pos:line="2176" pos:column="41"/></name></expr></argument>)<pos:position pos:line="2176" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="2176" pos:column="43"/></expr_stmt>

	<if pos:line="2178" pos:column="9">if <condition pos:line="2178" pos:column="12">(<expr><name pos:line="2178" pos:column="13">has_orig_head<pos:position pos:line="2178" pos:column="26"/></name></expr>)<pos:position pos:line="2178" pos:column="27"/></condition><then pos:line="2178" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="2179" pos:column="17">update_ref<pos:position pos:line="2179" pos:column="27"/></name><argument_list pos:line="2179" pos:column="27">(<argument><expr><literal type="string" pos:line="2179" pos:column="28">"am --abort"<pos:position pos:line="2179" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2179" pos:column="42">"HEAD"<pos:position pos:line="2179" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="2179" pos:column="50">orig_head<pos:position pos:line="2179" pos:column="59"/></name></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="2180" pos:column="33">has_curr_head<pos:position pos:line="2180" pos:column="46"/></name></expr> ?<pos:position pos:line="2180" pos:column="48"/></condition><then pos:line="2180" pos:column="48"> <expr><name pos:line="2180" pos:column="49">curr_head<pos:position pos:line="2180" pos:column="58"/></name></expr> <pos:position pos:line="2180" pos:column="59"/></then><else pos:line="2180" pos:column="59">: <expr><name pos:line="2180" pos:column="61">NULL<pos:position pos:line="2180" pos:column="65"/></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number" pos:line="2180" pos:column="67">0<pos:position pos:line="2180" pos:column="68"/></literal></expr></argument>,
				<argument><expr><name pos:line="2181" pos:column="33">UPDATE_REFS_DIE_ON_ERR<pos:position pos:line="2181" pos:column="55"/></name></expr></argument>)<pos:position pos:line="2181" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="2181" pos:column="57"/></expr_stmt></block></then>
	<elseif pos:line="2182" pos:column="9">else <if pos:line="2182" pos:column="14">if <condition pos:line="2182" pos:column="17">(<expr><name pos:line="2182" pos:column="18">curr_branch<pos:position pos:line="2182" pos:column="29"/></name></expr>)<pos:position pos:line="2182" pos:column="30"/></condition><then pos:line="2182" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="2183" pos:column="17">delete_ref<pos:position pos:line="2183" pos:column="27"/></name><argument_list pos:line="2183" pos:column="27">(<argument><expr><name pos:line="2183" pos:column="28">curr_branch<pos:position pos:line="2183" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="2183" pos:column="41">NULL<pos:position pos:line="2183" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="2183" pos:column="47">REF_NODEREF<pos:position pos:line="2183" pos:column="58"/></name></expr></argument>)<pos:position pos:line="2183" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="2183" pos:column="60"/></expr_stmt></block></then></if></elseif></if>

	<expr_stmt><expr><call><name pos:line="2185" pos:column="9">free<pos:position pos:line="2185" pos:column="13"/></name><argument_list pos:line="2185" pos:column="13">(<argument><expr><name pos:line="2185" pos:column="14">curr_branch<pos:position pos:line="2185" pos:column="25"/></name></expr></argument>)<pos:position pos:line="2185" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="2185" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="2186" pos:column="9">am_destroy<pos:position pos:line="2186" pos:column="19"/></name><argument_list pos:line="2186" pos:column="19">(<argument><expr><name pos:line="2186" pos:column="20">state<pos:position pos:line="2186" pos:column="25"/></name></expr></argument>)<pos:position pos:line="2186" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="2186" pos:column="27"/></expr_stmt>
}<pos:position pos:line="2187" pos:column="2"/></block></function>

<comment type="block" pos:line="2189" pos:column="1">/**
 * parse_options() callback that validates and sets opt-&gt;value to the
 * PATCH_FORMAT_* enum value corresponding to `arg`.
 */</comment>
<function><specifier pos:line="2193" pos:column="1">static<pos:position pos:line="2193" pos:column="7"/></specifier> <type><name pos:line="2193" pos:column="8">int<pos:position pos:line="2193" pos:column="11"/></name></type> <name pos:line="2193" pos:column="12">parse_opt_patchformat<pos:position pos:line="2193" pos:column="33"/></name><parameter_list pos:line="2193" pos:column="33">(<parameter><decl><type><specifier pos:line="2193" pos:column="34">const<pos:position pos:line="2193" pos:column="39"/></specifier> <name><name pos:line="2193" pos:column="40">struct<pos:position pos:line="2193" pos:column="46"/></name> <name pos:line="2193" pos:column="47">option<pos:position pos:line="2193" pos:column="53"/></name></name> <modifier pos:line="2193" pos:column="54">*<pos:position pos:line="2193" pos:column="55"/></modifier></type><name pos:line="2193" pos:column="55">opt<pos:position pos:line="2193" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2193" pos:column="60">const<pos:position pos:line="2193" pos:column="65"/></specifier> <name pos:line="2193" pos:column="66">char<pos:position pos:line="2193" pos:column="70"/></name> <modifier pos:line="2193" pos:column="71">*<pos:position pos:line="2193" pos:column="72"/></modifier></type><name pos:line="2193" pos:column="72">arg<pos:position pos:line="2193" pos:column="75"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2193" pos:column="77">int<pos:position pos:line="2193" pos:column="80"/></name></type> <name pos:line="2193" pos:column="81">unset<pos:position pos:line="2193" pos:column="86"/></name></decl></parameter>)<pos:position pos:line="2193" pos:column="87"/></parameter_list>
<block pos:line="2194" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="2195" pos:column="9">int<pos:position pos:line="2195" pos:column="12"/></name> <modifier pos:line="2195" pos:column="13">*<pos:position pos:line="2195" pos:column="14"/></modifier></type><name pos:line="2195" pos:column="14">opt_value<pos:position pos:line="2195" pos:column="23"/></name> <init pos:line="2195" pos:column="24">= <expr><name><name pos:line="2195" pos:column="26">opt<pos:position pos:line="2195" pos:column="29"/></name><operator pos:line="2195" pos:column="29">-&gt;<pos:position pos:line="2195" pos:column="34"/></operator><name pos:line="2195" pos:column="31">value<pos:position pos:line="2195" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="2195" pos:column="37"/></decl_stmt>

	<if pos:line="2197" pos:column="9">if <condition pos:line="2197" pos:column="12">(<expr><operator pos:line="2197" pos:column="13">!<pos:position pos:line="2197" pos:column="14"/></operator><call><name pos:line="2197" pos:column="14">strcmp<pos:position pos:line="2197" pos:column="20"/></name><argument_list pos:line="2197" pos:column="20">(<argument><expr><name pos:line="2197" pos:column="21">arg<pos:position pos:line="2197" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2197" pos:column="26">"mbox"<pos:position pos:line="2197" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="2197" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="2197" pos:column="34"/></condition><then pos:line="2197" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="2198" pos:column="17">*<pos:position pos:line="2198" pos:column="18"/></operator><name pos:line="2198" pos:column="18">opt_value<pos:position pos:line="2198" pos:column="27"/></name> <operator pos:line="2198" pos:column="28">=<pos:position pos:line="2198" pos:column="29"/></operator> <name pos:line="2198" pos:column="30">PATCH_FORMAT_MBOX<pos:position pos:line="2198" pos:column="47"/></name></expr>;<pos:position pos:line="2198" pos:column="48"/></expr_stmt></block></then>
	<elseif pos:line="2199" pos:column="9">else <if pos:line="2199" pos:column="14">if <condition pos:line="2199" pos:column="17">(<expr><operator pos:line="2199" pos:column="18">!<pos:position pos:line="2199" pos:column="19"/></operator><call><name pos:line="2199" pos:column="19">strcmp<pos:position pos:line="2199" pos:column="25"/></name><argument_list pos:line="2199" pos:column="25">(<argument><expr><name pos:line="2199" pos:column="26">arg<pos:position pos:line="2199" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2199" pos:column="31">"stgit"<pos:position pos:line="2199" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="2199" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="2199" pos:column="40"/></condition><then pos:line="2199" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="2200" pos:column="17">*<pos:position pos:line="2200" pos:column="18"/></operator><name pos:line="2200" pos:column="18">opt_value<pos:position pos:line="2200" pos:column="27"/></name> <operator pos:line="2200" pos:column="28">=<pos:position pos:line="2200" pos:column="29"/></operator> <name pos:line="2200" pos:column="30">PATCH_FORMAT_STGIT<pos:position pos:line="2200" pos:column="48"/></name></expr>;<pos:position pos:line="2200" pos:column="49"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="2201" pos:column="9">else <if pos:line="2201" pos:column="14">if <condition pos:line="2201" pos:column="17">(<expr><operator pos:line="2201" pos:column="18">!<pos:position pos:line="2201" pos:column="19"/></operator><call><name pos:line="2201" pos:column="19">strcmp<pos:position pos:line="2201" pos:column="25"/></name><argument_list pos:line="2201" pos:column="25">(<argument><expr><name pos:line="2201" pos:column="26">arg<pos:position pos:line="2201" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2201" pos:column="31">"stgit-series"<pos:position pos:line="2201" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="2201" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="2201" pos:column="47"/></condition><then pos:line="2201" pos:column="47">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="2202" pos:column="17">*<pos:position pos:line="2202" pos:column="18"/></operator><name pos:line="2202" pos:column="18">opt_value<pos:position pos:line="2202" pos:column="27"/></name> <operator pos:line="2202" pos:column="28">=<pos:position pos:line="2202" pos:column="29"/></operator> <name pos:line="2202" pos:column="30">PATCH_FORMAT_STGIT_SERIES<pos:position pos:line="2202" pos:column="55"/></name></expr>;<pos:position pos:line="2202" pos:column="56"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="2203" pos:column="9">else <if pos:line="2203" pos:column="14">if <condition pos:line="2203" pos:column="17">(<expr><operator pos:line="2203" pos:column="18">!<pos:position pos:line="2203" pos:column="19"/></operator><call><name pos:line="2203" pos:column="19">strcmp<pos:position pos:line="2203" pos:column="25"/></name><argument_list pos:line="2203" pos:column="25">(<argument><expr><name pos:line="2203" pos:column="26">arg<pos:position pos:line="2203" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2203" pos:column="31">"hg"<pos:position pos:line="2203" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="2203" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="2203" pos:column="37"/></condition><then pos:line="2203" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="2204" pos:column="17">*<pos:position pos:line="2204" pos:column="18"/></operator><name pos:line="2204" pos:column="18">opt_value<pos:position pos:line="2204" pos:column="27"/></name> <operator pos:line="2204" pos:column="28">=<pos:position pos:line="2204" pos:column="29"/></operator> <name pos:line="2204" pos:column="30">PATCH_FORMAT_HG<pos:position pos:line="2204" pos:column="45"/></name></expr>;<pos:position pos:line="2204" pos:column="46"/></expr_stmt></block></then></if></elseif>
	<else pos:line="2205" pos:column="9">else
		<block type="pseudo"><return pos:line="2206" pos:column="17">return <expr><call><name pos:line="2206" pos:column="24">error<pos:position pos:line="2206" pos:column="29"/></name><argument_list pos:line="2206" pos:column="29">(<argument><expr><call><name pos:line="2206" pos:column="30">_<pos:position pos:line="2206" pos:column="31"/></name><argument_list pos:line="2206" pos:column="31">(<argument><expr><literal type="string" pos:line="2206" pos:column="32">"Invalid value for --patch-format: %s"<pos:position pos:line="2206" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="2206" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="2206" pos:column="73">arg<pos:position pos:line="2206" pos:column="76"/></name></expr></argument>)<pos:position pos:line="2206" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="2206" pos:column="78"/></return></block></else></if>
	<return pos:line="2207" pos:column="9">return <expr><literal type="number" pos:line="2207" pos:column="16">0<pos:position pos:line="2207" pos:column="17"/></literal></expr>;<pos:position pos:line="2207" pos:column="18"/></return>
}<pos:position pos:line="2208" pos:column="2"/></block></function>

<enum pos:line="2210" pos:column="1">enum <name pos:line="2210" pos:column="6">resume_mode<pos:position pos:line="2210" pos:column="17"/></name> <block pos:line="2210" pos:column="18">{
	<decl><name pos:line="2211" pos:column="9">RESUME_FALSE<pos:position pos:line="2211" pos:column="21"/></name> <init pos:line="2211" pos:column="22">= <expr><literal type="number" pos:line="2211" pos:column="24">0<pos:position pos:line="2211" pos:column="25"/></literal></expr></init></decl>,
	<decl><name pos:line="2212" pos:column="9">RESUME_APPLY<pos:position pos:line="2212" pos:column="21"/></name></decl>,
	<decl><name pos:line="2213" pos:column="9">RESUME_RESOLVED<pos:position pos:line="2213" pos:column="24"/></name></decl>,
	<decl><name pos:line="2214" pos:column="9">RESUME_SKIP<pos:position pos:line="2214" pos:column="20"/></name></decl>,
	<decl><name pos:line="2215" pos:column="9">RESUME_ABORT<pos:position pos:line="2215" pos:column="21"/></name></decl>
}<pos:position pos:line="2216" pos:column="2"/></block>;<pos:position pos:line="2216" pos:column="3"/></enum>

<function><specifier pos:line="2218" pos:column="1">static<pos:position pos:line="2218" pos:column="7"/></specifier> <type><name pos:line="2218" pos:column="8">int<pos:position pos:line="2218" pos:column="11"/></name></type> <name pos:line="2218" pos:column="12">git_am_config<pos:position pos:line="2218" pos:column="25"/></name><parameter_list pos:line="2218" pos:column="25">(<parameter><decl><type><specifier pos:line="2218" pos:column="26">const<pos:position pos:line="2218" pos:column="31"/></specifier> <name pos:line="2218" pos:column="32">char<pos:position pos:line="2218" pos:column="36"/></name> <modifier pos:line="2218" pos:column="37">*<pos:position pos:line="2218" pos:column="38"/></modifier></type><name pos:line="2218" pos:column="38">k<pos:position pos:line="2218" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2218" pos:column="41">const<pos:position pos:line="2218" pos:column="46"/></specifier> <name pos:line="2218" pos:column="47">char<pos:position pos:line="2218" pos:column="51"/></name> <modifier pos:line="2218" pos:column="52">*<pos:position pos:line="2218" pos:column="53"/></modifier></type><name pos:line="2218" pos:column="53">v<pos:position pos:line="2218" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2218" pos:column="56">void<pos:position pos:line="2218" pos:column="60"/></name> <modifier pos:line="2218" pos:column="61">*<pos:position pos:line="2218" pos:column="62"/></modifier></type><name pos:line="2218" pos:column="62">cb<pos:position pos:line="2218" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2218" pos:column="65"/></parameter_list>
<block pos:line="2219" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="2220" pos:column="9">int<pos:position pos:line="2220" pos:column="12"/></name></type> <name pos:line="2220" pos:column="13">status<pos:position pos:line="2220" pos:column="19"/></name></decl>;<pos:position pos:line="2220" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><name pos:line="2222" pos:column="9">status<pos:position pos:line="2222" pos:column="15"/></name> <operator pos:line="2222" pos:column="16">=<pos:position pos:line="2222" pos:column="17"/></operator> <call><name pos:line="2222" pos:column="18">git_gpg_config<pos:position pos:line="2222" pos:column="32"/></name><argument_list pos:line="2222" pos:column="32">(<argument><expr><name pos:line="2222" pos:column="33">k<pos:position pos:line="2222" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="2222" pos:column="36">v<pos:position pos:line="2222" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="2222" pos:column="39">NULL<pos:position pos:line="2222" pos:column="43"/></name></expr></argument>)<pos:position pos:line="2222" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="2222" pos:column="45"/></expr_stmt>
	<if pos:line="2223" pos:column="9">if <condition pos:line="2223" pos:column="12">(<expr><name pos:line="2223" pos:column="13">status<pos:position pos:line="2223" pos:column="19"/></name></expr>)<pos:position pos:line="2223" pos:column="20"/></condition><then pos:line="2223" pos:column="20">
		<block type="pseudo"><return pos:line="2224" pos:column="17">return <expr><name pos:line="2224" pos:column="24">status<pos:position pos:line="2224" pos:column="30"/></name></expr>;<pos:position pos:line="2224" pos:column="31"/></return></block></then></if>

	<return pos:line="2226" pos:column="9">return <expr><call><name pos:line="2226" pos:column="16">git_default_config<pos:position pos:line="2226" pos:column="34"/></name><argument_list pos:line="2226" pos:column="34">(<argument><expr><name pos:line="2226" pos:column="35">k<pos:position pos:line="2226" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="2226" pos:column="38">v<pos:position pos:line="2226" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="2226" pos:column="41">NULL<pos:position pos:line="2226" pos:column="45"/></name></expr></argument>)<pos:position pos:line="2226" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="2226" pos:column="47"/></return>
}<pos:position pos:line="2227" pos:column="2"/></block></function>

<function><type><name pos:line="2229" pos:column="1">int<pos:position pos:line="2229" pos:column="4"/></name></type> <name pos:line="2229" pos:column="5">cmd_am<pos:position pos:line="2229" pos:column="11"/></name><parameter_list pos:line="2229" pos:column="11">(<parameter><decl><type><name pos:line="2229" pos:column="12">int<pos:position pos:line="2229" pos:column="15"/></name></type> <name pos:line="2229" pos:column="16">argc<pos:position pos:line="2229" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2229" pos:column="22">const<pos:position pos:line="2229" pos:column="27"/></specifier> <name pos:line="2229" pos:column="28">char<pos:position pos:line="2229" pos:column="32"/></name> <modifier pos:line="2229" pos:column="33">*<pos:position pos:line="2229" pos:column="34"/></modifier><modifier pos:line="2229" pos:column="34">*<pos:position pos:line="2229" pos:column="35"/></modifier></type><name pos:line="2229" pos:column="35">argv<pos:position pos:line="2229" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2229" pos:column="41">const<pos:position pos:line="2229" pos:column="46"/></specifier> <name pos:line="2229" pos:column="47">char<pos:position pos:line="2229" pos:column="51"/></name> <modifier pos:line="2229" pos:column="52">*<pos:position pos:line="2229" pos:column="53"/></modifier></type><name pos:line="2229" pos:column="53">prefix<pos:position pos:line="2229" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2229" pos:column="60"/></parameter_list>
<block pos:line="2230" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="2231" pos:column="9">struct<pos:position pos:line="2231" pos:column="15"/></name> <name pos:line="2231" pos:column="16">am_state<pos:position pos:line="2231" pos:column="24"/></name></name></type> <name pos:line="2231" pos:column="25">state<pos:position pos:line="2231" pos:column="30"/></name></decl>;<pos:position pos:line="2231" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="2232" pos:column="9">int<pos:position pos:line="2232" pos:column="12"/></name></type> <name pos:line="2232" pos:column="13">binary<pos:position pos:line="2232" pos:column="19"/></name> <init pos:line="2232" pos:column="20">= <expr><operator pos:line="2232" pos:column="22">-<pos:position pos:line="2232" pos:column="23"/></operator><literal type="number" pos:line="2232" pos:column="23">1<pos:position pos:line="2232" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="2232" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="2233" pos:column="9">int<pos:position pos:line="2233" pos:column="12"/></name></type> <name pos:line="2233" pos:column="13">keep_cr<pos:position pos:line="2233" pos:column="20"/></name> <init pos:line="2233" pos:column="21">= <expr><operator pos:line="2233" pos:column="23">-<pos:position pos:line="2233" pos:column="24"/></operator><literal type="number" pos:line="2233" pos:column="24">1<pos:position pos:line="2233" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="2233" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="2234" pos:column="9">int<pos:position pos:line="2234" pos:column="12"/></name></type> <name pos:line="2234" pos:column="13">patch_format<pos:position pos:line="2234" pos:column="25"/></name> <init pos:line="2234" pos:column="26">= <expr><name pos:line="2234" pos:column="28">PATCH_FORMAT_UNKNOWN<pos:position pos:line="2234" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="2234" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="2235" pos:column="9">enum<pos:position pos:line="2235" pos:column="13"/></name> <name pos:line="2235" pos:column="14">resume_mode<pos:position pos:line="2235" pos:column="25"/></name></name></type> <name pos:line="2235" pos:column="26">resume<pos:position pos:line="2235" pos:column="32"/></name> <init pos:line="2235" pos:column="33">= <expr><name pos:line="2235" pos:column="35">RESUME_FALSE<pos:position pos:line="2235" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="2235" pos:column="48"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="2236" pos:column="9">int<pos:position pos:line="2236" pos:column="12"/></name></type> <name pos:line="2236" pos:column="13">in_progress<pos:position pos:line="2236" pos:column="24"/></name></decl>;<pos:position pos:line="2236" pos:column="25"/></decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="2238" pos:column="9">const<pos:position pos:line="2238" pos:column="14"/></specifier> <name pos:line="2238" pos:column="15">char<pos:position pos:line="2238" pos:column="19"/></name> <modifier pos:line="2238" pos:column="20">*<pos:position pos:line="2238" pos:column="21"/></modifier> <specifier pos:line="2238" pos:column="22">const<pos:position pos:line="2238" pos:column="27"/></specifier></type> <name><name pos:line="2238" pos:column="28">usage<pos:position pos:line="2238" pos:column="33"/></name><index pos:line="2238" pos:column="33">[]<pos:position pos:line="2238" pos:column="35"/></index></name> <init pos:line="2238" pos:column="36">= <expr><block pos:line="2238" pos:column="38">{
		<expr><call><name pos:line="2239" pos:column="17">N_<pos:position pos:line="2239" pos:column="19"/></name><argument_list pos:line="2239" pos:column="19">(<argument><expr><literal type="string" pos:line="2239" pos:column="20">"git am [&lt;options&gt;] [(&lt;mbox&gt;|&lt;Maildir&gt;)...]"<pos:position pos:line="2239" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="2239" pos:column="65"/></argument_list></call></expr>,
		<expr><call><name pos:line="2240" pos:column="17">N_<pos:position pos:line="2240" pos:column="19"/></name><argument_list pos:line="2240" pos:column="19">(<argument><expr><literal type="string" pos:line="2240" pos:column="20">"git am [&lt;options&gt;] (--continue | --skip | --abort)"<pos:position pos:line="2240" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="2240" pos:column="73"/></argument_list></call></expr>,
		<expr><name pos:line="2241" pos:column="17">NULL<pos:position pos:line="2241" pos:column="21"/></name></expr>
	}<pos:position pos:line="2242" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="2242" pos:column="11"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="2244" pos:column="9">struct<pos:position pos:line="2244" pos:column="15"/></name> <name pos:line="2244" pos:column="16">option<pos:position pos:line="2244" pos:column="22"/></name></name></type> <name><name pos:line="2244" pos:column="23">options<pos:position pos:line="2244" pos:column="30"/></name><index pos:line="2244" pos:column="30">[]<pos:position pos:line="2244" pos:column="32"/></index></name> <init pos:line="2244" pos:column="33">= <expr><block pos:line="2244" pos:column="35">{
		<expr><call><name pos:line="2245" pos:column="17">OPT_BOOL<pos:position pos:line="2245" pos:column="25"/></name><argument_list pos:line="2245" pos:column="25">(<argument><expr><literal type="char" pos:line="2245" pos:column="26">'i'<pos:position pos:line="2245" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2245" pos:column="31">"interactive"<pos:position pos:line="2245" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="2245" pos:column="46">&amp;<pos:position pos:line="2245" pos:column="51"/></operator><name><name pos:line="2245" pos:column="47">state<pos:position pos:line="2245" pos:column="52"/></name><operator pos:line="2245" pos:column="52">.<pos:position pos:line="2245" pos:column="53"/></operator><name pos:line="2245" pos:column="53">interactive<pos:position pos:line="2245" pos:column="64"/></name></name></expr></argument>,
			<argument><expr><call><name pos:line="2246" pos:column="25">N_<pos:position pos:line="2246" pos:column="27"/></name><argument_list pos:line="2246" pos:column="27">(<argument><expr><literal type="string" pos:line="2246" pos:column="28">"run interactively"<pos:position pos:line="2246" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="2246" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="2246" pos:column="49"/></argument_list></call></expr>,
		<expr><call><name pos:line="2247" pos:column="17">OPT_HIDDEN_BOOL<pos:position pos:line="2247" pos:column="32"/></name><argument_list pos:line="2247" pos:column="32">(<argument><expr><literal type="char" pos:line="2247" pos:column="33">'b'<pos:position pos:line="2247" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2247" pos:column="38">"binary"<pos:position pos:line="2247" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="2247" pos:column="48">&amp;<pos:position pos:line="2247" pos:column="53"/></operator><name pos:line="2247" pos:column="49">binary<pos:position pos:line="2247" pos:column="55"/></name></expr></argument>,
			<argument><expr><call><name pos:line="2248" pos:column="25">N_<pos:position pos:line="2248" pos:column="27"/></name><argument_list pos:line="2248" pos:column="27">(<argument><expr><literal type="string" pos:line="2248" pos:column="28">"historical option -- no-op"<pos:position pos:line="2248" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="2248" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="2248" pos:column="58"/></argument_list></call></expr>,
		<expr><call><name pos:line="2249" pos:column="17">OPT_BOOL<pos:position pos:line="2249" pos:column="25"/></name><argument_list pos:line="2249" pos:column="25">(<argument><expr><literal type="char" pos:line="2249" pos:column="26">'3'<pos:position pos:line="2249" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2249" pos:column="31">"3way"<pos:position pos:line="2249" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="2249" pos:column="39">&amp;<pos:position pos:line="2249" pos:column="44"/></operator><name><name pos:line="2249" pos:column="40">state<pos:position pos:line="2249" pos:column="45"/></name><operator pos:line="2249" pos:column="45">.<pos:position pos:line="2249" pos:column="46"/></operator><name pos:line="2249" pos:column="46">threeway<pos:position pos:line="2249" pos:column="54"/></name></name></expr></argument>,
			<argument><expr><call><name pos:line="2250" pos:column="25">N_<pos:position pos:line="2250" pos:column="27"/></name><argument_list pos:line="2250" pos:column="27">(<argument><expr><literal type="string" pos:line="2250" pos:column="28">"allow fall back on 3way merging if needed"<pos:position pos:line="2250" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="2250" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="2250" pos:column="73"/></argument_list></call></expr>,
		<expr><call><name pos:line="2251" pos:column="17">OPT__QUIET<pos:position pos:line="2251" pos:column="27"/></name><argument_list pos:line="2251" pos:column="27">(<argument><expr><operator pos:line="2251" pos:column="28">&amp;<pos:position pos:line="2251" pos:column="33"/></operator><name><name pos:line="2251" pos:column="29">state<pos:position pos:line="2251" pos:column="34"/></name><operator pos:line="2251" pos:column="34">.<pos:position pos:line="2251" pos:column="35"/></operator><name pos:line="2251" pos:column="35">quiet<pos:position pos:line="2251" pos:column="40"/></name></name></expr></argument>, <argument><expr><call><name pos:line="2251" pos:column="42">N_<pos:position pos:line="2251" pos:column="44"/></name><argument_list pos:line="2251" pos:column="44">(<argument><expr><literal type="string" pos:line="2251" pos:column="45">"be quiet"<pos:position pos:line="2251" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="2251" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="2251" pos:column="57"/></argument_list></call></expr>,
		<expr><call><name pos:line="2252" pos:column="17">OPT_SET_INT<pos:position pos:line="2252" pos:column="28"/></name><argument_list pos:line="2252" pos:column="28">(<argument><expr><literal type="char" pos:line="2252" pos:column="29">'s'<pos:position pos:line="2252" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2252" pos:column="34">"signoff"<pos:position pos:line="2252" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="2252" pos:column="45">&amp;<pos:position pos:line="2252" pos:column="50"/></operator><name><name pos:line="2252" pos:column="46">state<pos:position pos:line="2252" pos:column="51"/></name><operator pos:line="2252" pos:column="51">.<pos:position pos:line="2252" pos:column="52"/></operator><name pos:line="2252" pos:column="52">signoff<pos:position pos:line="2252" pos:column="59"/></name></name></expr></argument>,
			<argument><expr><call><name pos:line="2253" pos:column="25">N_<pos:position pos:line="2253" pos:column="27"/></name><argument_list pos:line="2253" pos:column="27">(<argument><expr><literal type="string" pos:line="2253" pos:column="28">"add a Signed-off-by line to the commit message"<pos:position pos:line="2253" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="2253" pos:column="77"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="2254" pos:column="25">SIGNOFF_EXPLICIT<pos:position pos:line="2254" pos:column="41"/></name></expr></argument>)<pos:position pos:line="2254" pos:column="42"/></argument_list></call></expr>,
		<expr><call><name pos:line="2255" pos:column="17">OPT_BOOL<pos:position pos:line="2255" pos:column="25"/></name><argument_list pos:line="2255" pos:column="25">(<argument><expr><literal type="char" pos:line="2255" pos:column="26">'u'<pos:position pos:line="2255" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2255" pos:column="31">"utf8"<pos:position pos:line="2255" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="2255" pos:column="39">&amp;<pos:position pos:line="2255" pos:column="44"/></operator><name><name pos:line="2255" pos:column="40">state<pos:position pos:line="2255" pos:column="45"/></name><operator pos:line="2255" pos:column="45">.<pos:position pos:line="2255" pos:column="46"/></operator><name pos:line="2255" pos:column="46">utf8<pos:position pos:line="2255" pos:column="50"/></name></name></expr></argument>,
			<argument><expr><call><name pos:line="2256" pos:column="25">N_<pos:position pos:line="2256" pos:column="27"/></name><argument_list pos:line="2256" pos:column="27">(<argument><expr><literal type="string" pos:line="2256" pos:column="28">"recode into utf8 (default)"<pos:position pos:line="2256" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="2256" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="2256" pos:column="58"/></argument_list></call></expr>,
		<expr><call><name pos:line="2257" pos:column="17">OPT_SET_INT<pos:position pos:line="2257" pos:column="28"/></name><argument_list pos:line="2257" pos:column="28">(<argument><expr><literal type="char" pos:line="2257" pos:column="29">'k'<pos:position pos:line="2257" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2257" pos:column="34">"keep"<pos:position pos:line="2257" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="2257" pos:column="42">&amp;<pos:position pos:line="2257" pos:column="47"/></operator><name><name pos:line="2257" pos:column="43">state<pos:position pos:line="2257" pos:column="48"/></name><operator pos:line="2257" pos:column="48">.<pos:position pos:line="2257" pos:column="49"/></operator><name pos:line="2257" pos:column="49">keep<pos:position pos:line="2257" pos:column="53"/></name></name></expr></argument>,
			<argument><expr><call><name pos:line="2258" pos:column="25">N_<pos:position pos:line="2258" pos:column="27"/></name><argument_list pos:line="2258" pos:column="27">(<argument><expr><literal type="string" pos:line="2258" pos:column="28">"pass -k flag to git-mailinfo"<pos:position pos:line="2258" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="2258" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="2258" pos:column="61">KEEP_TRUE<pos:position pos:line="2258" pos:column="70"/></name></expr></argument>)<pos:position pos:line="2258" pos:column="71"/></argument_list></call></expr>,
		<expr><call><name pos:line="2259" pos:column="17">OPT_SET_INT<pos:position pos:line="2259" pos:column="28"/></name><argument_list pos:line="2259" pos:column="28">(<argument><expr><literal type="number" pos:line="2259" pos:column="29">0<pos:position pos:line="2259" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2259" pos:column="32">"keep-non-patch"<pos:position pos:line="2259" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="2259" pos:column="50">&amp;<pos:position pos:line="2259" pos:column="55"/></operator><name><name pos:line="2259" pos:column="51">state<pos:position pos:line="2259" pos:column="56"/></name><operator pos:line="2259" pos:column="56">.<pos:position pos:line="2259" pos:column="57"/></operator><name pos:line="2259" pos:column="57">keep<pos:position pos:line="2259" pos:column="61"/></name></name></expr></argument>,
			<argument><expr><call><name pos:line="2260" pos:column="25">N_<pos:position pos:line="2260" pos:column="27"/></name><argument_list pos:line="2260" pos:column="27">(<argument><expr><literal type="string" pos:line="2260" pos:column="28">"pass -b flag to git-mailinfo"<pos:position pos:line="2260" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="2260" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="2260" pos:column="61">KEEP_NON_PATCH<pos:position pos:line="2260" pos:column="75"/></name></expr></argument>)<pos:position pos:line="2260" pos:column="76"/></argument_list></call></expr>,
		<expr><call><name pos:line="2261" pos:column="17">OPT_BOOL<pos:position pos:line="2261" pos:column="25"/></name><argument_list pos:line="2261" pos:column="25">(<argument><expr><literal type="char" pos:line="2261" pos:column="26">'m'<pos:position pos:line="2261" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2261" pos:column="31">"message-id"<pos:position pos:line="2261" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="2261" pos:column="45">&amp;<pos:position pos:line="2261" pos:column="50"/></operator><name><name pos:line="2261" pos:column="46">state<pos:position pos:line="2261" pos:column="51"/></name><operator pos:line="2261" pos:column="51">.<pos:position pos:line="2261" pos:column="52"/></operator><name pos:line="2261" pos:column="52">message_id<pos:position pos:line="2261" pos:column="62"/></name></name></expr></argument>,
			<argument><expr><call><name pos:line="2262" pos:column="25">N_<pos:position pos:line="2262" pos:column="27"/></name><argument_list pos:line="2262" pos:column="27">(<argument><expr><literal type="string" pos:line="2262" pos:column="28">"pass -m flag to git-mailinfo"<pos:position pos:line="2262" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="2262" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="2262" pos:column="60"/></argument_list></call></expr>,
		<expr><block pos:line="2263" pos:column="17">{ <expr><name pos:line="2263" pos:column="19">OPTION_SET_INT<pos:position pos:line="2263" pos:column="33"/></name></expr>, <expr><literal type="number" pos:line="2263" pos:column="35">0<pos:position pos:line="2263" pos:column="36"/></literal></expr>, <expr><literal type="string" pos:line="2263" pos:column="38">"keep-cr"<pos:position pos:line="2263" pos:column="47"/></literal></expr>, <expr><operator pos:line="2263" pos:column="49">&amp;<pos:position pos:line="2263" pos:column="54"/></operator><name pos:line="2263" pos:column="50">keep_cr<pos:position pos:line="2263" pos:column="57"/></name></expr>, <expr><name pos:line="2263" pos:column="59">NULL<pos:position pos:line="2263" pos:column="63"/></name></expr>,
		  <expr><call><name pos:line="2264" pos:column="19">N_<pos:position pos:line="2264" pos:column="21"/></name><argument_list pos:line="2264" pos:column="21">(<argument><expr><literal type="string" pos:line="2264" pos:column="22">"pass --keep-cr flag to git-mailsplit for mbox format"<pos:position pos:line="2264" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="2264" pos:column="77"/></argument_list></call></expr>,
		  <expr><name pos:line="2265" pos:column="19">PARSE_OPT_NOARG<pos:position pos:line="2265" pos:column="34"/></name> <operator pos:line="2265" pos:column="35">|<pos:position pos:line="2265" pos:column="36"/></operator> <name pos:line="2265" pos:column="37">PARSE_OPT_NONEG<pos:position pos:line="2265" pos:column="52"/></name></expr>, <expr><name pos:line="2265" pos:column="54">NULL<pos:position pos:line="2265" pos:column="58"/></name></expr>, <expr><literal type="number" pos:line="2265" pos:column="60">1<pos:position pos:line="2265" pos:column="61"/></literal></expr>}<pos:position pos:line="2265" pos:column="62"/></block></expr>,
		<expr><block pos:line="2266" pos:column="17">{ <expr><name pos:line="2266" pos:column="19">OPTION_SET_INT<pos:position pos:line="2266" pos:column="33"/></name></expr>, <expr><literal type="number" pos:line="2266" pos:column="35">0<pos:position pos:line="2266" pos:column="36"/></literal></expr>, <expr><literal type="string" pos:line="2266" pos:column="38">"no-keep-cr"<pos:position pos:line="2266" pos:column="50"/></literal></expr>, <expr><operator pos:line="2266" pos:column="52">&amp;<pos:position pos:line="2266" pos:column="57"/></operator><name pos:line="2266" pos:column="53">keep_cr<pos:position pos:line="2266" pos:column="60"/></name></expr>, <expr><name pos:line="2266" pos:column="62">NULL<pos:position pos:line="2266" pos:column="66"/></name></expr>,
		  <expr><call><name pos:line="2267" pos:column="19">N_<pos:position pos:line="2267" pos:column="21"/></name><argument_list pos:line="2267" pos:column="21">(<argument><expr><literal type="string" pos:line="2267" pos:column="22">"do not pass --keep-cr flag to git-mailsplit independent of am.keepcr"<pos:position pos:line="2267" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="2267" pos:column="93"/></argument_list></call></expr>,
		  <expr><name pos:line="2268" pos:column="19">PARSE_OPT_NOARG<pos:position pos:line="2268" pos:column="34"/></name> <operator pos:line="2268" pos:column="35">|<pos:position pos:line="2268" pos:column="36"/></operator> <name pos:line="2268" pos:column="37">PARSE_OPT_NONEG<pos:position pos:line="2268" pos:column="52"/></name></expr>, <expr><name pos:line="2268" pos:column="54">NULL<pos:position pos:line="2268" pos:column="58"/></name></expr>, <expr><literal type="number" pos:line="2268" pos:column="60">0<pos:position pos:line="2268" pos:column="61"/></literal></expr>}<pos:position pos:line="2268" pos:column="62"/></block></expr>,
		<expr><call><name pos:line="2269" pos:column="17">OPT_BOOL<pos:position pos:line="2269" pos:column="25"/></name><argument_list pos:line="2269" pos:column="25">(<argument><expr><literal type="char" pos:line="2269" pos:column="26">'c'<pos:position pos:line="2269" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2269" pos:column="31">"scissors"<pos:position pos:line="2269" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="2269" pos:column="43">&amp;<pos:position pos:line="2269" pos:column="48"/></operator><name><name pos:line="2269" pos:column="44">state<pos:position pos:line="2269" pos:column="49"/></name><operator pos:line="2269" pos:column="49">.<pos:position pos:line="2269" pos:column="50"/></operator><name pos:line="2269" pos:column="50">scissors<pos:position pos:line="2269" pos:column="58"/></name></name></expr></argument>,
			<argument><expr><call><name pos:line="2270" pos:column="25">N_<pos:position pos:line="2270" pos:column="27"/></name><argument_list pos:line="2270" pos:column="27">(<argument><expr><literal type="string" pos:line="2270" pos:column="28">"strip everything before a scissors line"<pos:position pos:line="2270" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="2270" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="2270" pos:column="71"/></argument_list></call></expr>,
		<expr><call><name pos:line="2271" pos:column="17">OPT_PASSTHRU_ARGV<pos:position pos:line="2271" pos:column="34"/></name><argument_list pos:line="2271" pos:column="34">(<argument><expr><literal type="number" pos:line="2271" pos:column="35">0<pos:position pos:line="2271" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2271" pos:column="38">"whitespace"<pos:position pos:line="2271" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="2271" pos:column="52">&amp;<pos:position pos:line="2271" pos:column="57"/></operator><name><name pos:line="2271" pos:column="53">state<pos:position pos:line="2271" pos:column="58"/></name><operator pos:line="2271" pos:column="58">.<pos:position pos:line="2271" pos:column="59"/></operator><name pos:line="2271" pos:column="59">git_apply_opts<pos:position pos:line="2271" pos:column="73"/></name></name></expr></argument>, <argument><expr><call><name pos:line="2271" pos:column="75">N_<pos:position pos:line="2271" pos:column="77"/></name><argument_list pos:line="2271" pos:column="77">(<argument><expr><literal type="string" pos:line="2271" pos:column="78">"action"<pos:position pos:line="2271" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="2271" pos:column="87"/></argument_list></call></expr></argument>,
			<argument><expr><call><name pos:line="2272" pos:column="25">N_<pos:position pos:line="2272" pos:column="27"/></name><argument_list pos:line="2272" pos:column="27">(<argument><expr><literal type="string" pos:line="2272" pos:column="28">"pass it through git-apply"<pos:position pos:line="2272" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="2272" pos:column="56"/></argument_list></call></expr></argument>,
			<argument><expr><literal type="number" pos:line="2273" pos:column="25">0<pos:position pos:line="2273" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="2273" pos:column="27"/></argument_list></call></expr>,
		<expr><call><name pos:line="2274" pos:column="17">OPT_PASSTHRU_ARGV<pos:position pos:line="2274" pos:column="34"/></name><argument_list pos:line="2274" pos:column="34">(<argument><expr><literal type="number" pos:line="2274" pos:column="35">0<pos:position pos:line="2274" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2274" pos:column="38">"ignore-space-change"<pos:position pos:line="2274" pos:column="59"/></literal></expr></argument>, <argument><expr><operator pos:line="2274" pos:column="61">&amp;<pos:position pos:line="2274" pos:column="66"/></operator><name><name pos:line="2274" pos:column="62">state<pos:position pos:line="2274" pos:column="67"/></name><operator pos:line="2274" pos:column="67">.<pos:position pos:line="2274" pos:column="68"/></operator><name pos:line="2274" pos:column="68">git_apply_opts<pos:position pos:line="2274" pos:column="82"/></name></name></expr></argument>, <argument><expr><name pos:line="2274" pos:column="84">NULL<pos:position pos:line="2274" pos:column="88"/></name></expr></argument>,
			<argument><expr><call><name pos:line="2275" pos:column="25">N_<pos:position pos:line="2275" pos:column="27"/></name><argument_list pos:line="2275" pos:column="27">(<argument><expr><literal type="string" pos:line="2275" pos:column="28">"pass it through git-apply"<pos:position pos:line="2275" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="2275" pos:column="56"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="2276" pos:column="25">PARSE_OPT_NOARG<pos:position pos:line="2276" pos:column="40"/></name></expr></argument>)<pos:position pos:line="2276" pos:column="41"/></argument_list></call></expr>,
		<expr><call><name pos:line="2277" pos:column="17">OPT_PASSTHRU_ARGV<pos:position pos:line="2277" pos:column="34"/></name><argument_list pos:line="2277" pos:column="34">(<argument><expr><literal type="number" pos:line="2277" pos:column="35">0<pos:position pos:line="2277" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2277" pos:column="38">"ignore-whitespace"<pos:position pos:line="2277" pos:column="57"/></literal></expr></argument>, <argument><expr><operator pos:line="2277" pos:column="59">&amp;<pos:position pos:line="2277" pos:column="64"/></operator><name><name pos:line="2277" pos:column="60">state<pos:position pos:line="2277" pos:column="65"/></name><operator pos:line="2277" pos:column="65">.<pos:position pos:line="2277" pos:column="66"/></operator><name pos:line="2277" pos:column="66">git_apply_opts<pos:position pos:line="2277" pos:column="80"/></name></name></expr></argument>, <argument><expr><name pos:line="2277" pos:column="82">NULL<pos:position pos:line="2277" pos:column="86"/></name></expr></argument>,
			<argument><expr><call><name pos:line="2278" pos:column="25">N_<pos:position pos:line="2278" pos:column="27"/></name><argument_list pos:line="2278" pos:column="27">(<argument><expr><literal type="string" pos:line="2278" pos:column="28">"pass it through git-apply"<pos:position pos:line="2278" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="2278" pos:column="56"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="2279" pos:column="25">PARSE_OPT_NOARG<pos:position pos:line="2279" pos:column="40"/></name></expr></argument>)<pos:position pos:line="2279" pos:column="41"/></argument_list></call></expr>,
		<expr><call><name pos:line="2280" pos:column="17">OPT_PASSTHRU_ARGV<pos:position pos:line="2280" pos:column="34"/></name><argument_list pos:line="2280" pos:column="34">(<argument><expr><literal type="number" pos:line="2280" pos:column="35">0<pos:position pos:line="2280" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2280" pos:column="38">"directory"<pos:position pos:line="2280" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="2280" pos:column="51">&amp;<pos:position pos:line="2280" pos:column="56"/></operator><name><name pos:line="2280" pos:column="52">state<pos:position pos:line="2280" pos:column="57"/></name><operator pos:line="2280" pos:column="57">.<pos:position pos:line="2280" pos:column="58"/></operator><name pos:line="2280" pos:column="58">git_apply_opts<pos:position pos:line="2280" pos:column="72"/></name></name></expr></argument>, <argument><expr><call><name pos:line="2280" pos:column="74">N_<pos:position pos:line="2280" pos:column="76"/></name><argument_list pos:line="2280" pos:column="76">(<argument><expr><literal type="string" pos:line="2280" pos:column="77">"root"<pos:position pos:line="2280" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="2280" pos:column="84"/></argument_list></call></expr></argument>,
			<argument><expr><call><name pos:line="2281" pos:column="25">N_<pos:position pos:line="2281" pos:column="27"/></name><argument_list pos:line="2281" pos:column="27">(<argument><expr><literal type="string" pos:line="2281" pos:column="28">"pass it through git-apply"<pos:position pos:line="2281" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="2281" pos:column="56"/></argument_list></call></expr></argument>,
			<argument><expr><literal type="number" pos:line="2282" pos:column="25">0<pos:position pos:line="2282" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="2282" pos:column="27"/></argument_list></call></expr>,
		<expr><call><name pos:line="2283" pos:column="17">OPT_PASSTHRU_ARGV<pos:position pos:line="2283" pos:column="34"/></name><argument_list pos:line="2283" pos:column="34">(<argument><expr><literal type="number" pos:line="2283" pos:column="35">0<pos:position pos:line="2283" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2283" pos:column="38">"exclude"<pos:position pos:line="2283" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="2283" pos:column="49">&amp;<pos:position pos:line="2283" pos:column="54"/></operator><name><name pos:line="2283" pos:column="50">state<pos:position pos:line="2283" pos:column="55"/></name><operator pos:line="2283" pos:column="55">.<pos:position pos:line="2283" pos:column="56"/></operator><name pos:line="2283" pos:column="56">git_apply_opts<pos:position pos:line="2283" pos:column="70"/></name></name></expr></argument>, <argument><expr><call><name pos:line="2283" pos:column="72">N_<pos:position pos:line="2283" pos:column="74"/></name><argument_list pos:line="2283" pos:column="74">(<argument><expr><literal type="string" pos:line="2283" pos:column="75">"path"<pos:position pos:line="2283" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="2283" pos:column="82"/></argument_list></call></expr></argument>,
			<argument><expr><call><name pos:line="2284" pos:column="25">N_<pos:position pos:line="2284" pos:column="27"/></name><argument_list pos:line="2284" pos:column="27">(<argument><expr><literal type="string" pos:line="2284" pos:column="28">"pass it through git-apply"<pos:position pos:line="2284" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="2284" pos:column="56"/></argument_list></call></expr></argument>,
			<argument><expr><literal type="number" pos:line="2285" pos:column="25">0<pos:position pos:line="2285" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="2285" pos:column="27"/></argument_list></call></expr>,
		<expr><call><name pos:line="2286" pos:column="17">OPT_PASSTHRU_ARGV<pos:position pos:line="2286" pos:column="34"/></name><argument_list pos:line="2286" pos:column="34">(<argument><expr><literal type="number" pos:line="2286" pos:column="35">0<pos:position pos:line="2286" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2286" pos:column="38">"include"<pos:position pos:line="2286" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="2286" pos:column="49">&amp;<pos:position pos:line="2286" pos:column="54"/></operator><name><name pos:line="2286" pos:column="50">state<pos:position pos:line="2286" pos:column="55"/></name><operator pos:line="2286" pos:column="55">.<pos:position pos:line="2286" pos:column="56"/></operator><name pos:line="2286" pos:column="56">git_apply_opts<pos:position pos:line="2286" pos:column="70"/></name></name></expr></argument>, <argument><expr><call><name pos:line="2286" pos:column="72">N_<pos:position pos:line="2286" pos:column="74"/></name><argument_list pos:line="2286" pos:column="74">(<argument><expr><literal type="string" pos:line="2286" pos:column="75">"path"<pos:position pos:line="2286" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="2286" pos:column="82"/></argument_list></call></expr></argument>,
			<argument><expr><call><name pos:line="2287" pos:column="25">N_<pos:position pos:line="2287" pos:column="27"/></name><argument_list pos:line="2287" pos:column="27">(<argument><expr><literal type="string" pos:line="2287" pos:column="28">"pass it through git-apply"<pos:position pos:line="2287" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="2287" pos:column="56"/></argument_list></call></expr></argument>,
			<argument><expr><literal type="number" pos:line="2288" pos:column="25">0<pos:position pos:line="2288" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="2288" pos:column="27"/></argument_list></call></expr>,
		<expr><call><name pos:line="2289" pos:column="17">OPT_PASSTHRU_ARGV<pos:position pos:line="2289" pos:column="34"/></name><argument_list pos:line="2289" pos:column="34">(<argument><expr><literal type="char" pos:line="2289" pos:column="35">'C'<pos:position pos:line="2289" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="2289" pos:column="40">NULL<pos:position pos:line="2289" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="2289" pos:column="46">&amp;<pos:position pos:line="2289" pos:column="51"/></operator><name><name pos:line="2289" pos:column="47">state<pos:position pos:line="2289" pos:column="52"/></name><operator pos:line="2289" pos:column="52">.<pos:position pos:line="2289" pos:column="53"/></operator><name pos:line="2289" pos:column="53">git_apply_opts<pos:position pos:line="2289" pos:column="67"/></name></name></expr></argument>, <argument><expr><call><name pos:line="2289" pos:column="69">N_<pos:position pos:line="2289" pos:column="71"/></name><argument_list pos:line="2289" pos:column="71">(<argument><expr><literal type="string" pos:line="2289" pos:column="72">"n"<pos:position pos:line="2289" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="2289" pos:column="76"/></argument_list></call></expr></argument>,
			<argument><expr><call><name pos:line="2290" pos:column="25">N_<pos:position pos:line="2290" pos:column="27"/></name><argument_list pos:line="2290" pos:column="27">(<argument><expr><literal type="string" pos:line="2290" pos:column="28">"pass it through git-apply"<pos:position pos:line="2290" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="2290" pos:column="56"/></argument_list></call></expr></argument>,
			<argument><expr><literal type="number" pos:line="2291" pos:column="25">0<pos:position pos:line="2291" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="2291" pos:column="27"/></argument_list></call></expr>,
		<expr><call><name pos:line="2292" pos:column="17">OPT_PASSTHRU_ARGV<pos:position pos:line="2292" pos:column="34"/></name><argument_list pos:line="2292" pos:column="34">(<argument><expr><literal type="char" pos:line="2292" pos:column="35">'p'<pos:position pos:line="2292" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="2292" pos:column="40">NULL<pos:position pos:line="2292" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="2292" pos:column="46">&amp;<pos:position pos:line="2292" pos:column="51"/></operator><name><name pos:line="2292" pos:column="47">state<pos:position pos:line="2292" pos:column="52"/></name><operator pos:line="2292" pos:column="52">.<pos:position pos:line="2292" pos:column="53"/></operator><name pos:line="2292" pos:column="53">git_apply_opts<pos:position pos:line="2292" pos:column="67"/></name></name></expr></argument>, <argument><expr><call><name pos:line="2292" pos:column="69">N_<pos:position pos:line="2292" pos:column="71"/></name><argument_list pos:line="2292" pos:column="71">(<argument><expr><literal type="string" pos:line="2292" pos:column="72">"num"<pos:position pos:line="2292" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="2292" pos:column="78"/></argument_list></call></expr></argument>,
			<argument><expr><call><name pos:line="2293" pos:column="25">N_<pos:position pos:line="2293" pos:column="27"/></name><argument_list pos:line="2293" pos:column="27">(<argument><expr><literal type="string" pos:line="2293" pos:column="28">"pass it through git-apply"<pos:position pos:line="2293" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="2293" pos:column="56"/></argument_list></call></expr></argument>,
			<argument><expr><literal type="number" pos:line="2294" pos:column="25">0<pos:position pos:line="2294" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="2294" pos:column="27"/></argument_list></call></expr>,
		<expr><call><name pos:line="2295" pos:column="17">OPT_CALLBACK<pos:position pos:line="2295" pos:column="29"/></name><argument_list pos:line="2295" pos:column="29">(<argument><expr><literal type="number" pos:line="2295" pos:column="30">0<pos:position pos:line="2295" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2295" pos:column="33">"patch-format"<pos:position pos:line="2295" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="2295" pos:column="49">&amp;<pos:position pos:line="2295" pos:column="54"/></operator><name pos:line="2295" pos:column="50">patch_format<pos:position pos:line="2295" pos:column="62"/></name></expr></argument>, <argument><expr><call><name pos:line="2295" pos:column="64">N_<pos:position pos:line="2295" pos:column="66"/></name><argument_list pos:line="2295" pos:column="66">(<argument><expr><literal type="string" pos:line="2295" pos:column="67">"format"<pos:position pos:line="2295" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="2295" pos:column="76"/></argument_list></call></expr></argument>,
			<argument><expr><call><name pos:line="2296" pos:column="25">N_<pos:position pos:line="2296" pos:column="27"/></name><argument_list pos:line="2296" pos:column="27">(<argument><expr><literal type="string" pos:line="2296" pos:column="28">"format the patch(es) are in"<pos:position pos:line="2296" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="2296" pos:column="58"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="2297" pos:column="25">parse_opt_patchformat<pos:position pos:line="2297" pos:column="46"/></name></expr></argument>)<pos:position pos:line="2297" pos:column="47"/></argument_list></call></expr>,
		<expr><call><name pos:line="2298" pos:column="17">OPT_PASSTHRU_ARGV<pos:position pos:line="2298" pos:column="34"/></name><argument_list pos:line="2298" pos:column="34">(<argument><expr><literal type="number" pos:line="2298" pos:column="35">0<pos:position pos:line="2298" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2298" pos:column="38">"reject"<pos:position pos:line="2298" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="2298" pos:column="48">&amp;<pos:position pos:line="2298" pos:column="53"/></operator><name><name pos:line="2298" pos:column="49">state<pos:position pos:line="2298" pos:column="54"/></name><operator pos:line="2298" pos:column="54">.<pos:position pos:line="2298" pos:column="55"/></operator><name pos:line="2298" pos:column="55">git_apply_opts<pos:position pos:line="2298" pos:column="69"/></name></name></expr></argument>, <argument><expr><name pos:line="2298" pos:column="71">NULL<pos:position pos:line="2298" pos:column="75"/></name></expr></argument>,
			<argument><expr><call><name pos:line="2299" pos:column="25">N_<pos:position pos:line="2299" pos:column="27"/></name><argument_list pos:line="2299" pos:column="27">(<argument><expr><literal type="string" pos:line="2299" pos:column="28">"pass it through git-apply"<pos:position pos:line="2299" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="2299" pos:column="56"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="2300" pos:column="25">PARSE_OPT_NOARG<pos:position pos:line="2300" pos:column="40"/></name></expr></argument>)<pos:position pos:line="2300" pos:column="41"/></argument_list></call></expr>,
		<expr><call><name pos:line="2301" pos:column="17">OPT_STRING<pos:position pos:line="2301" pos:column="27"/></name><argument_list pos:line="2301" pos:column="27">(<argument><expr><literal type="number" pos:line="2301" pos:column="28">0<pos:position pos:line="2301" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2301" pos:column="31">"resolvemsg"<pos:position pos:line="2301" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="2301" pos:column="45">&amp;<pos:position pos:line="2301" pos:column="50"/></operator><name><name pos:line="2301" pos:column="46">state<pos:position pos:line="2301" pos:column="51"/></name><operator pos:line="2301" pos:column="51">.<pos:position pos:line="2301" pos:column="52"/></operator><name pos:line="2301" pos:column="52">resolvemsg<pos:position pos:line="2301" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="2301" pos:column="64">NULL<pos:position pos:line="2301" pos:column="68"/></name></expr></argument>,
			<argument><expr><call><name pos:line="2302" pos:column="25">N_<pos:position pos:line="2302" pos:column="27"/></name><argument_list pos:line="2302" pos:column="27">(<argument><expr><literal type="string" pos:line="2302" pos:column="28">"override error message when patch failure occurs"<pos:position pos:line="2302" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="2302" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="2302" pos:column="80"/></argument_list></call></expr>,
		<expr><call><name pos:line="2303" pos:column="17">OPT_CMDMODE<pos:position pos:line="2303" pos:column="28"/></name><argument_list pos:line="2303" pos:column="28">(<argument><expr><literal type="number" pos:line="2303" pos:column="29">0<pos:position pos:line="2303" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2303" pos:column="32">"continue"<pos:position pos:line="2303" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="2303" pos:column="44">&amp;<pos:position pos:line="2303" pos:column="49"/></operator><name pos:line="2303" pos:column="45">resume<pos:position pos:line="2303" pos:column="51"/></name></expr></argument>,
			<argument><expr><call><name pos:line="2304" pos:column="25">N_<pos:position pos:line="2304" pos:column="27"/></name><argument_list pos:line="2304" pos:column="27">(<argument><expr><literal type="string" pos:line="2304" pos:column="28">"continue applying patches after resolving a conflict"<pos:position pos:line="2304" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="2304" pos:column="83"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="2305" pos:column="25">RESUME_RESOLVED<pos:position pos:line="2305" pos:column="40"/></name></expr></argument>)<pos:position pos:line="2305" pos:column="41"/></argument_list></call></expr>,
		<expr><call><name pos:line="2306" pos:column="17">OPT_CMDMODE<pos:position pos:line="2306" pos:column="28"/></name><argument_list pos:line="2306" pos:column="28">(<argument><expr><literal type="char" pos:line="2306" pos:column="29">'r'<pos:position pos:line="2306" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2306" pos:column="34">"resolved"<pos:position pos:line="2306" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="2306" pos:column="46">&amp;<pos:position pos:line="2306" pos:column="51"/></operator><name pos:line="2306" pos:column="47">resume<pos:position pos:line="2306" pos:column="53"/></name></expr></argument>,
			<argument><expr><call><name pos:line="2307" pos:column="25">N_<pos:position pos:line="2307" pos:column="27"/></name><argument_list pos:line="2307" pos:column="27">(<argument><expr><literal type="string" pos:line="2307" pos:column="28">"synonyms for --continue"<pos:position pos:line="2307" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="2307" pos:column="54"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="2308" pos:column="25">RESUME_RESOLVED<pos:position pos:line="2308" pos:column="40"/></name></expr></argument>)<pos:position pos:line="2308" pos:column="41"/></argument_list></call></expr>,
		<expr><call><name pos:line="2309" pos:column="17">OPT_CMDMODE<pos:position pos:line="2309" pos:column="28"/></name><argument_list pos:line="2309" pos:column="28">(<argument><expr><literal type="number" pos:line="2309" pos:column="29">0<pos:position pos:line="2309" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2309" pos:column="32">"skip"<pos:position pos:line="2309" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="2309" pos:column="40">&amp;<pos:position pos:line="2309" pos:column="45"/></operator><name pos:line="2309" pos:column="41">resume<pos:position pos:line="2309" pos:column="47"/></name></expr></argument>,
			<argument><expr><call><name pos:line="2310" pos:column="25">N_<pos:position pos:line="2310" pos:column="27"/></name><argument_list pos:line="2310" pos:column="27">(<argument><expr><literal type="string" pos:line="2310" pos:column="28">"skip the current patch"<pos:position pos:line="2310" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="2310" pos:column="53"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="2311" pos:column="25">RESUME_SKIP<pos:position pos:line="2311" pos:column="36"/></name></expr></argument>)<pos:position pos:line="2311" pos:column="37"/></argument_list></call></expr>,
		<expr><call><name pos:line="2312" pos:column="17">OPT_CMDMODE<pos:position pos:line="2312" pos:column="28"/></name><argument_list pos:line="2312" pos:column="28">(<argument><expr><literal type="number" pos:line="2312" pos:column="29">0<pos:position pos:line="2312" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2312" pos:column="32">"abort"<pos:position pos:line="2312" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="2312" pos:column="41">&amp;<pos:position pos:line="2312" pos:column="46"/></operator><name pos:line="2312" pos:column="42">resume<pos:position pos:line="2312" pos:column="48"/></name></expr></argument>,
			<argument><expr><call><name pos:line="2313" pos:column="25">N_<pos:position pos:line="2313" pos:column="27"/></name><argument_list pos:line="2313" pos:column="27">(<argument><expr><literal type="string" pos:line="2313" pos:column="28">"restore the original branch and abort the patching operation."<pos:position pos:line="2313" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="2313" pos:column="92"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="2314" pos:column="25">RESUME_ABORT<pos:position pos:line="2314" pos:column="37"/></name></expr></argument>)<pos:position pos:line="2314" pos:column="38"/></argument_list></call></expr>,
		<expr><call><name pos:line="2315" pos:column="17">OPT_BOOL<pos:position pos:line="2315" pos:column="25"/></name><argument_list pos:line="2315" pos:column="25">(<argument><expr><literal type="number" pos:line="2315" pos:column="26">0<pos:position pos:line="2315" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2315" pos:column="29">"committer-date-is-author-date"<pos:position pos:line="2315" pos:column="60"/></literal></expr></argument>,
			<argument><expr><operator pos:line="2316" pos:column="25">&amp;<pos:position pos:line="2316" pos:column="30"/></operator><name><name pos:line="2316" pos:column="26">state<pos:position pos:line="2316" pos:column="31"/></name><operator pos:line="2316" pos:column="31">.<pos:position pos:line="2316" pos:column="32"/></operator><name pos:line="2316" pos:column="32">committer_date_is_author_date<pos:position pos:line="2316" pos:column="61"/></name></name></expr></argument>,
			<argument><expr><call><name pos:line="2317" pos:column="25">N_<pos:position pos:line="2317" pos:column="27"/></name><argument_list pos:line="2317" pos:column="27">(<argument><expr><literal type="string" pos:line="2317" pos:column="28">"lie about committer date"<pos:position pos:line="2317" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="2317" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="2317" pos:column="56"/></argument_list></call></expr>,
		<expr><call><name pos:line="2318" pos:column="17">OPT_BOOL<pos:position pos:line="2318" pos:column="25"/></name><argument_list pos:line="2318" pos:column="25">(<argument><expr><literal type="number" pos:line="2318" pos:column="26">0<pos:position pos:line="2318" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2318" pos:column="29">"ignore-date"<pos:position pos:line="2318" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="2318" pos:column="44">&amp;<pos:position pos:line="2318" pos:column="49"/></operator><name><name pos:line="2318" pos:column="45">state<pos:position pos:line="2318" pos:column="50"/></name><operator pos:line="2318" pos:column="50">.<pos:position pos:line="2318" pos:column="51"/></operator><name pos:line="2318" pos:column="51">ignore_date<pos:position pos:line="2318" pos:column="62"/></name></name></expr></argument>,
			<argument><expr><call><name pos:line="2319" pos:column="25">N_<pos:position pos:line="2319" pos:column="27"/></name><argument_list pos:line="2319" pos:column="27">(<argument><expr><literal type="string" pos:line="2319" pos:column="28">"use current timestamp for author date"<pos:position pos:line="2319" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="2319" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="2319" pos:column="69"/></argument_list></call></expr>,
		<expr><call><name pos:line="2320" pos:column="17">OPT_RERERE_AUTOUPDATE<pos:position pos:line="2320" pos:column="38"/></name><argument_list pos:line="2320" pos:column="38">(<argument><expr><operator pos:line="2320" pos:column="39">&amp;<pos:position pos:line="2320" pos:column="44"/></operator><name><name pos:line="2320" pos:column="40">state<pos:position pos:line="2320" pos:column="45"/></name><operator pos:line="2320" pos:column="45">.<pos:position pos:line="2320" pos:column="46"/></operator><name pos:line="2320" pos:column="46">allow_rerere_autoupdate<pos:position pos:line="2320" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="2320" pos:column="70"/></argument_list></call></expr>,
		<expr><block pos:line="2321" pos:column="17">{ <expr><name pos:line="2321" pos:column="19">OPTION_STRING<pos:position pos:line="2321" pos:column="32"/></name></expr>, <expr><literal type="char" pos:line="2321" pos:column="34">'S'<pos:position pos:line="2321" pos:column="37"/></literal></expr>, <expr><literal type="string" pos:line="2321" pos:column="39">"gpg-sign"<pos:position pos:line="2321" pos:column="49"/></literal></expr>, <expr><operator pos:line="2321" pos:column="51">&amp;<pos:position pos:line="2321" pos:column="56"/></operator><name><name pos:line="2321" pos:column="52">state<pos:position pos:line="2321" pos:column="57"/></name><operator pos:line="2321" pos:column="57">.<pos:position pos:line="2321" pos:column="58"/></operator><name pos:line="2321" pos:column="58">sign_commit<pos:position pos:line="2321" pos:column="69"/></name></name></expr>, <expr><call><name pos:line="2321" pos:column="71">N_<pos:position pos:line="2321" pos:column="73"/></name><argument_list pos:line="2321" pos:column="73">(<argument><expr><literal type="string" pos:line="2321" pos:column="74">"key-id"<pos:position pos:line="2321" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="2321" pos:column="83"/></argument_list></call></expr>,
		  <expr><call><name pos:line="2322" pos:column="19">N_<pos:position pos:line="2322" pos:column="21"/></name><argument_list pos:line="2322" pos:column="21">(<argument><expr><literal type="string" pos:line="2322" pos:column="22">"GPG-sign commits"<pos:position pos:line="2322" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="2322" pos:column="41"/></argument_list></call></expr>,
		  <expr><name pos:line="2323" pos:column="19">PARSE_OPT_OPTARG<pos:position pos:line="2323" pos:column="35"/></name></expr>, <expr><name pos:line="2323" pos:column="37">NULL<pos:position pos:line="2323" pos:column="41"/></name></expr>, <expr><operator pos:line="2323" pos:column="43">(<pos:position pos:line="2323" pos:column="44"/></operator><name pos:line="2323" pos:column="44">intptr_t<pos:position pos:line="2323" pos:column="52"/></name><operator pos:line="2323" pos:column="52">)<pos:position pos:line="2323" pos:column="53"/></operator> <literal type="string" pos:line="2323" pos:column="54">""<pos:position pos:line="2323" pos:column="56"/></literal></expr> }<pos:position pos:line="2323" pos:column="58"/></block></expr>,
		<expr><call><name pos:line="2324" pos:column="17">OPT_HIDDEN_BOOL<pos:position pos:line="2324" pos:column="32"/></name><argument_list pos:line="2324" pos:column="32">(<argument><expr><literal type="number" pos:line="2324" pos:column="33">0<pos:position pos:line="2324" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="2324" pos:column="36">"rebasing"<pos:position pos:line="2324" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="2324" pos:column="48">&amp;<pos:position pos:line="2324" pos:column="53"/></operator><name><name pos:line="2324" pos:column="49">state<pos:position pos:line="2324" pos:column="54"/></name><operator pos:line="2324" pos:column="54">.<pos:position pos:line="2324" pos:column="55"/></operator><name pos:line="2324" pos:column="55">rebasing<pos:position pos:line="2324" pos:column="63"/></name></name></expr></argument>,
			<argument><expr><call><name pos:line="2325" pos:column="25">N_<pos:position pos:line="2325" pos:column="27"/></name><argument_list pos:line="2325" pos:column="27">(<argument><expr><literal type="string" pos:line="2325" pos:column="28">"(internal use for git-rebase)"<pos:position pos:line="2325" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="2325" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="2325" pos:column="61"/></argument_list></call></expr>,
		<macro><name pos:line="2326" pos:column="17">OPT_END<pos:position pos:line="2326" pos:column="24"/></name><argument_list pos:line="2326" pos:column="24">()<pos:position pos:line="2326" pos:column="26"/></argument_list></macro>
	}<pos:position pos:line="2327" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="2327" pos:column="11"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="2329" pos:column="9">git_config<pos:position pos:line="2329" pos:column="19"/></name><argument_list pos:line="2329" pos:column="19">(<argument><expr><name pos:line="2329" pos:column="20">git_am_config<pos:position pos:line="2329" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="2329" pos:column="35">NULL<pos:position pos:line="2329" pos:column="39"/></name></expr></argument>)<pos:position pos:line="2329" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="2329" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="2331" pos:column="9">am_state_init<pos:position pos:line="2331" pos:column="22"/></name><argument_list pos:line="2331" pos:column="22">(<argument><expr><operator pos:line="2331" pos:column="23">&amp;<pos:position pos:line="2331" pos:column="28"/></operator><name pos:line="2331" pos:column="24">state<pos:position pos:line="2331" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="2331" pos:column="31">git_path<pos:position pos:line="2331" pos:column="39"/></name><argument_list pos:line="2331" pos:column="39">(<argument><expr><literal type="string" pos:line="2331" pos:column="40">"rebase-apply"<pos:position pos:line="2331" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="2331" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="2331" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="2331" pos:column="57"/></expr_stmt>

	<expr_stmt><expr><name pos:line="2333" pos:column="9">in_progress<pos:position pos:line="2333" pos:column="20"/></name> <operator pos:line="2333" pos:column="21">=<pos:position pos:line="2333" pos:column="22"/></operator> <call><name pos:line="2333" pos:column="23">am_in_progress<pos:position pos:line="2333" pos:column="37"/></name><argument_list pos:line="2333" pos:column="37">(<argument><expr><operator pos:line="2333" pos:column="38">&amp;<pos:position pos:line="2333" pos:column="43"/></operator><name pos:line="2333" pos:column="39">state<pos:position pos:line="2333" pos:column="44"/></name></expr></argument>)<pos:position pos:line="2333" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="2333" pos:column="46"/></expr_stmt>
	<if pos:line="2334" pos:column="9">if <condition pos:line="2334" pos:column="12">(<expr><name pos:line="2334" pos:column="13">in_progress<pos:position pos:line="2334" pos:column="24"/></name></expr>)<pos:position pos:line="2334" pos:column="25"/></condition><then pos:line="2334" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="2335" pos:column="17">am_load<pos:position pos:line="2335" pos:column="24"/></name><argument_list pos:line="2335" pos:column="24">(<argument><expr><operator pos:line="2335" pos:column="25">&amp;<pos:position pos:line="2335" pos:column="30"/></operator><name pos:line="2335" pos:column="26">state<pos:position pos:line="2335" pos:column="31"/></name></expr></argument>)<pos:position pos:line="2335" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="2335" pos:column="33"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="2337" pos:column="9">argc<pos:position pos:line="2337" pos:column="13"/></name> <operator pos:line="2337" pos:column="14">=<pos:position pos:line="2337" pos:column="15"/></operator> <call><name pos:line="2337" pos:column="16">parse_options<pos:position pos:line="2337" pos:column="29"/></name><argument_list pos:line="2337" pos:column="29">(<argument><expr><name pos:line="2337" pos:column="30">argc<pos:position pos:line="2337" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="2337" pos:column="36">argv<pos:position pos:line="2337" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="2337" pos:column="42">prefix<pos:position pos:line="2337" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="2337" pos:column="50">options<pos:position pos:line="2337" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="2337" pos:column="59">usage<pos:position pos:line="2337" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2337" pos:column="66">0<pos:position pos:line="2337" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="2337" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="2337" pos:column="69"/></expr_stmt>

	<if pos:line="2339" pos:column="9">if <condition pos:line="2339" pos:column="12">(<expr><name pos:line="2339" pos:column="13">binary<pos:position pos:line="2339" pos:column="19"/></name> <operator pos:line="2339" pos:column="20">&gt;=<pos:position pos:line="2339" pos:column="25"/></operator> <literal type="number" pos:line="2339" pos:column="23">0<pos:position pos:line="2339" pos:column="24"/></literal></expr>)<pos:position pos:line="2339" pos:column="25"/></condition><then pos:line="2339" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="2340" pos:column="17">fprintf_ln<pos:position pos:line="2340" pos:column="27"/></name><argument_list pos:line="2340" pos:column="27">(<argument><expr><name pos:line="2340" pos:column="28">stderr<pos:position pos:line="2340" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="2340" pos:column="36">_<pos:position pos:line="2340" pos:column="37"/></name><argument_list pos:line="2340" pos:column="37">(<argument><expr><literal type="string" pos:line="2340" pos:column="38">"The -b/--binary option has been a no-op for long time, and\n"<pos:position pos:line="2340" pos:column="100"/></literal>
				<literal type="string" pos:line="2341" pos:column="33">"it will be removed. Please do not use it anymore."<pos:position pos:line="2341" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="2341" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="2341" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="2341" pos:column="87"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="2343" pos:column="9">/* Ensure a valid committer ident can be constructed */</comment>
	<expr_stmt><expr><call><name pos:line="2344" pos:column="9">git_committer_info<pos:position pos:line="2344" pos:column="27"/></name><argument_list pos:line="2344" pos:column="27">(<argument><expr><name pos:line="2344" pos:column="28">IDENT_STRICT<pos:position pos:line="2344" pos:column="40"/></name></expr></argument>)<pos:position pos:line="2344" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="2344" pos:column="42"/></expr_stmt>

	<if pos:line="2346" pos:column="9">if <condition pos:line="2346" pos:column="12">(<expr><call><name pos:line="2346" pos:column="13">read_index_preload<pos:position pos:line="2346" pos:column="31"/></name><argument_list pos:line="2346" pos:column="31">(<argument><expr><operator pos:line="2346" pos:column="32">&amp;<pos:position pos:line="2346" pos:column="37"/></operator><name pos:line="2346" pos:column="33">the_index<pos:position pos:line="2346" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="2346" pos:column="44">NULL<pos:position pos:line="2346" pos:column="48"/></name></expr></argument>)<pos:position pos:line="2346" pos:column="49"/></argument_list></call> <operator pos:line="2346" pos:column="50">&lt;<pos:position pos:line="2346" pos:column="54"/></operator> <literal type="number" pos:line="2346" pos:column="52">0<pos:position pos:line="2346" pos:column="53"/></literal></expr>)<pos:position pos:line="2346" pos:column="54"/></condition><then pos:line="2346" pos:column="54">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="2347" pos:column="17">die<pos:position pos:line="2347" pos:column="20"/></name><argument_list pos:line="2347" pos:column="20">(<argument><expr><call><name pos:line="2347" pos:column="21">_<pos:position pos:line="2347" pos:column="22"/></name><argument_list pos:line="2347" pos:column="22">(<argument><expr><literal type="string" pos:line="2347" pos:column="23">"failed to read the index"<pos:position pos:line="2347" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="2347" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="2347" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="2347" pos:column="52"/></expr_stmt></block></then></if>

	<if pos:line="2349" pos:column="9">if <condition pos:line="2349" pos:column="12">(<expr><name pos:line="2349" pos:column="13">in_progress<pos:position pos:line="2349" pos:column="24"/></name></expr>)<pos:position pos:line="2349" pos:column="25"/></condition><then pos:line="2349" pos:column="25"> <block pos:line="2349" pos:column="26">{
		<comment type="block" pos:line="2350" pos:column="17">/*
		 * Catch user error to feed us patches when there is a session
		 * in progress:
		 *
		 * 1. mbox path(s) are provided on the command-line.
		 * 2. stdin is not a tty: the user is trying to feed us a patch
		 *    from standard input. This is somewhat unreliable -- stdin
		 *    could be /dev/null for example and the caller did not
		 *    intend to feed us a patch but wanted to continue
		 *    unattended.
		 */</comment>
		<if pos:line="2361" pos:column="17">if <condition pos:line="2361" pos:column="20">(<expr><name pos:line="2361" pos:column="21">argc<pos:position pos:line="2361" pos:column="25"/></name> <operator pos:line="2361" pos:column="26">||<pos:position pos:line="2361" pos:column="28"/></operator> <operator pos:line="2361" pos:column="29">(<pos:position pos:line="2361" pos:column="30"/></operator><name pos:line="2361" pos:column="30">resume<pos:position pos:line="2361" pos:column="36"/></name> <operator pos:line="2361" pos:column="37">==<pos:position pos:line="2361" pos:column="39"/></operator> <name pos:line="2361" pos:column="40">RESUME_FALSE<pos:position pos:line="2361" pos:column="52"/></name> <operator pos:line="2361" pos:column="53">&amp;&amp;<pos:position pos:line="2361" pos:column="63"/></operator> <operator pos:line="2361" pos:column="56">!<pos:position pos:line="2361" pos:column="57"/></operator><call><name pos:line="2361" pos:column="57">isatty<pos:position pos:line="2361" pos:column="63"/></name><argument_list pos:line="2361" pos:column="63">(<argument><expr><literal type="number" pos:line="2361" pos:column="64">0<pos:position pos:line="2361" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="2361" pos:column="66"/></argument_list></call><operator pos:line="2361" pos:column="66">)<pos:position pos:line="2361" pos:column="67"/></operator></expr>)<pos:position pos:line="2361" pos:column="68"/></condition><then pos:line="2361" pos:column="68">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="2362" pos:column="25">die<pos:position pos:line="2362" pos:column="28"/></name><argument_list pos:line="2362" pos:column="28">(<argument><expr><call><name pos:line="2362" pos:column="29">_<pos:position pos:line="2362" pos:column="30"/></name><argument_list pos:line="2362" pos:column="30">(<argument><expr><literal type="string" pos:line="2362" pos:column="31">"previous rebase directory %s still exists but mbox given."<pos:position pos:line="2362" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="2362" pos:column="91"/></argument_list></call></expr></argument>,
				<argument><expr><name><name pos:line="2363" pos:column="33">state<pos:position pos:line="2363" pos:column="38"/></name><operator pos:line="2363" pos:column="38">.<pos:position pos:line="2363" pos:column="39"/></operator><name pos:line="2363" pos:column="39">dir<pos:position pos:line="2363" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="2363" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="2363" pos:column="44"/></expr_stmt></block></then></if>

		<if pos:line="2365" pos:column="17">if <condition pos:line="2365" pos:column="20">(<expr><name pos:line="2365" pos:column="21">resume<pos:position pos:line="2365" pos:column="27"/></name> <operator pos:line="2365" pos:column="28">==<pos:position pos:line="2365" pos:column="30"/></operator> <name pos:line="2365" pos:column="31">RESUME_FALSE<pos:position pos:line="2365" pos:column="43"/></name></expr>)<pos:position pos:line="2365" pos:column="44"/></condition><then pos:line="2365" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><name pos:line="2366" pos:column="25">resume<pos:position pos:line="2366" pos:column="31"/></name> <operator pos:line="2366" pos:column="32">=<pos:position pos:line="2366" pos:column="33"/></operator> <name pos:line="2366" pos:column="34">RESUME_APPLY<pos:position pos:line="2366" pos:column="46"/></name></expr>;<pos:position pos:line="2366" pos:column="47"/></expr_stmt></block></then></if>

		<if pos:line="2368" pos:column="17">if <condition pos:line="2368" pos:column="20">(<expr><name><name pos:line="2368" pos:column="21">state<pos:position pos:line="2368" pos:column="26"/></name><operator pos:line="2368" pos:column="26">.<pos:position pos:line="2368" pos:column="27"/></operator><name pos:line="2368" pos:column="27">signoff<pos:position pos:line="2368" pos:column="34"/></name></name> <operator pos:line="2368" pos:column="35">==<pos:position pos:line="2368" pos:column="37"/></operator> <name pos:line="2368" pos:column="38">SIGNOFF_EXPLICIT<pos:position pos:line="2368" pos:column="54"/></name></expr>)<pos:position pos:line="2368" pos:column="55"/></condition><then pos:line="2368" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="2369" pos:column="25">am_append_signoff<pos:position pos:line="2369" pos:column="42"/></name><argument_list pos:line="2369" pos:column="42">(<argument><expr><operator pos:line="2369" pos:column="43">&amp;<pos:position pos:line="2369" pos:column="48"/></operator><name pos:line="2369" pos:column="44">state<pos:position pos:line="2369" pos:column="49"/></name></expr></argument>)<pos:position pos:line="2369" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="2369" pos:column="51"/></expr_stmt></block></then></if>
	}<pos:position pos:line="2370" pos:column="10"/></block></then> <else pos:line="2370" pos:column="11">else <block pos:line="2370" pos:column="16">{
		<decl_stmt><decl><type><name><name pos:line="2371" pos:column="17">struct<pos:position pos:line="2371" pos:column="23"/></name> <name pos:line="2371" pos:column="24">argv_array<pos:position pos:line="2371" pos:column="34"/></name></name></type> <name pos:line="2371" pos:column="35">paths<pos:position pos:line="2371" pos:column="40"/></name> <init pos:line="2371" pos:column="41">= <expr><name pos:line="2371" pos:column="43">ARGV_ARRAY_INIT<pos:position pos:line="2371" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="2371" pos:column="59"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="2372" pos:column="17">int<pos:position pos:line="2372" pos:column="20"/></name></type> <name pos:line="2372" pos:column="21">i<pos:position pos:line="2372" pos:column="22"/></name></decl>;<pos:position pos:line="2372" pos:column="23"/></decl_stmt>

		<comment type="block" pos:line="2374" pos:column="17">/*
		 * Handle stray state directory in the independent-run case. In
		 * the --rebasing case, it is up to the caller to take care of
		 * stray directories.
		 */</comment>
		<if pos:line="2379" pos:column="17">if <condition pos:line="2379" pos:column="20">(<expr><call><name pos:line="2379" pos:column="21">file_exists<pos:position pos:line="2379" pos:column="32"/></name><argument_list pos:line="2379" pos:column="32">(<argument><expr><name><name pos:line="2379" pos:column="33">state<pos:position pos:line="2379" pos:column="38"/></name><operator pos:line="2379" pos:column="38">.<pos:position pos:line="2379" pos:column="39"/></operator><name pos:line="2379" pos:column="39">dir<pos:position pos:line="2379" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="2379" pos:column="43"/></argument_list></call> <operator pos:line="2379" pos:column="44">&amp;&amp;<pos:position pos:line="2379" pos:column="54"/></operator> <operator pos:line="2379" pos:column="47">!<pos:position pos:line="2379" pos:column="48"/></operator><name><name pos:line="2379" pos:column="48">state<pos:position pos:line="2379" pos:column="53"/></name><operator pos:line="2379" pos:column="53">.<pos:position pos:line="2379" pos:column="54"/></operator><name pos:line="2379" pos:column="54">rebasing<pos:position pos:line="2379" pos:column="62"/></name></name></expr>)<pos:position pos:line="2379" pos:column="63"/></condition><then pos:line="2379" pos:column="63"> <block pos:line="2379" pos:column="64">{
			<if pos:line="2380" pos:column="25">if <condition pos:line="2380" pos:column="28">(<expr><name pos:line="2380" pos:column="29">resume<pos:position pos:line="2380" pos:column="35"/></name> <operator pos:line="2380" pos:column="36">==<pos:position pos:line="2380" pos:column="38"/></operator> <name pos:line="2380" pos:column="39">RESUME_ABORT<pos:position pos:line="2380" pos:column="51"/></name></expr>)<pos:position pos:line="2380" pos:column="52"/></condition><then pos:line="2380" pos:column="52"> <block pos:line="2380" pos:column="53">{
				<expr_stmt><expr><call><name pos:line="2381" pos:column="33">am_destroy<pos:position pos:line="2381" pos:column="43"/></name><argument_list pos:line="2381" pos:column="43">(<argument><expr><operator pos:line="2381" pos:column="44">&amp;<pos:position pos:line="2381" pos:column="49"/></operator><name pos:line="2381" pos:column="45">state<pos:position pos:line="2381" pos:column="50"/></name></expr></argument>)<pos:position pos:line="2381" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="2381" pos:column="52"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="2382" pos:column="33">am_state_release<pos:position pos:line="2382" pos:column="49"/></name><argument_list pos:line="2382" pos:column="49">(<argument><expr><operator pos:line="2382" pos:column="50">&amp;<pos:position pos:line="2382" pos:column="55"/></operator><name pos:line="2382" pos:column="51">state<pos:position pos:line="2382" pos:column="56"/></name></expr></argument>)<pos:position pos:line="2382" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="2382" pos:column="58"/></expr_stmt>
				<return pos:line="2383" pos:column="33">return <expr><literal type="number" pos:line="2383" pos:column="40">0<pos:position pos:line="2383" pos:column="41"/></literal></expr>;<pos:position pos:line="2383" pos:column="42"/></return>
			}<pos:position pos:line="2384" pos:column="26"/></block></then></if>

			<expr_stmt><expr><call><name pos:line="2386" pos:column="25">die<pos:position pos:line="2386" pos:column="28"/></name><argument_list pos:line="2386" pos:column="28">(<argument><expr><call><name pos:line="2386" pos:column="29">_<pos:position pos:line="2386" pos:column="30"/></name><argument_list pos:line="2386" pos:column="30">(<argument><expr><literal type="string" pos:line="2386" pos:column="31">"Stray %s directory found.\n"<pos:position pos:line="2386" pos:column="60"/></literal>
				<literal type="string" pos:line="2387" pos:column="33">"Use \"git am --abort\" to remove it."<pos:position pos:line="2387" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="2387" pos:column="72"/></argument_list></call></expr></argument>,
				<argument><expr><name><name pos:line="2388" pos:column="33">state<pos:position pos:line="2388" pos:column="38"/></name><operator pos:line="2388" pos:column="38">.<pos:position pos:line="2388" pos:column="39"/></operator><name pos:line="2388" pos:column="39">dir<pos:position pos:line="2388" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="2388" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="2388" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="2389" pos:column="18"/></block></then></if>

		<if pos:line="2391" pos:column="17">if <condition pos:line="2391" pos:column="20">(<expr><name pos:line="2391" pos:column="21">resume<pos:position pos:line="2391" pos:column="27"/></name></expr>)<pos:position pos:line="2391" pos:column="28"/></condition><then pos:line="2391" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="2392" pos:column="25">die<pos:position pos:line="2392" pos:column="28"/></name><argument_list pos:line="2392" pos:column="28">(<argument><expr><call><name pos:line="2392" pos:column="29">_<pos:position pos:line="2392" pos:column="30"/></name><argument_list pos:line="2392" pos:column="30">(<argument><expr><literal type="string" pos:line="2392" pos:column="31">"Resolve operation not in progress, we are not resuming."<pos:position pos:line="2392" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="2392" pos:column="89"/></argument_list></call></expr></argument>)<pos:position pos:line="2392" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="2392" pos:column="91"/></expr_stmt></block></then></if>

		<for pos:line="2394" pos:column="17">for <control pos:line="2394" pos:column="21">(<init><expr><name pos:line="2394" pos:column="22">i<pos:position pos:line="2394" pos:column="23"/></name> <operator pos:line="2394" pos:column="24">=<pos:position pos:line="2394" pos:column="25"/></operator> <literal type="number" pos:line="2394" pos:column="26">0<pos:position pos:line="2394" pos:column="27"/></literal></expr>;<pos:position pos:line="2394" pos:column="28"/></init> <condition><expr><name pos:line="2394" pos:column="29">i<pos:position pos:line="2394" pos:column="30"/></name> <operator pos:line="2394" pos:column="31">&lt;<pos:position pos:line="2394" pos:column="35"/></operator> <name pos:line="2394" pos:column="33">argc<pos:position pos:line="2394" pos:column="37"/></name></expr>;<pos:position pos:line="2394" pos:column="38"/></condition> <incr><expr><name pos:line="2394" pos:column="39">i<pos:position pos:line="2394" pos:column="40"/></name><operator pos:line="2394" pos:column="40">++<pos:position pos:line="2394" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="2394" pos:column="43"/></control> <block pos:line="2394" pos:column="44">{
			<if pos:line="2395" pos:column="25">if <condition pos:line="2395" pos:column="28">(<expr><call><name pos:line="2395" pos:column="29">is_absolute_path<pos:position pos:line="2395" pos:column="45"/></name><argument_list pos:line="2395" pos:column="45">(<argument><expr><name><name pos:line="2395" pos:column="46">argv<pos:position pos:line="2395" pos:column="50"/></name><index pos:line="2395" pos:column="50">[<expr><name pos:line="2395" pos:column="51">i<pos:position pos:line="2395" pos:column="52"/></name></expr>]<pos:position pos:line="2395" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="2395" pos:column="54"/></argument_list></call> <operator pos:line="2395" pos:column="55">||<pos:position pos:line="2395" pos:column="57"/></operator> <operator pos:line="2395" pos:column="58">!<pos:position pos:line="2395" pos:column="59"/></operator><name pos:line="2395" pos:column="59">prefix<pos:position pos:line="2395" pos:column="65"/></name></expr>)<pos:position pos:line="2395" pos:column="66"/></condition><then pos:line="2395" pos:column="66">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="2396" pos:column="33">argv_array_push<pos:position pos:line="2396" pos:column="48"/></name><argument_list pos:line="2396" pos:column="48">(<argument><expr><operator pos:line="2396" pos:column="49">&amp;<pos:position pos:line="2396" pos:column="54"/></operator><name pos:line="2396" pos:column="50">paths<pos:position pos:line="2396" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="2396" pos:column="57">argv<pos:position pos:line="2396" pos:column="61"/></name><index pos:line="2396" pos:column="61">[<expr><name pos:line="2396" pos:column="62">i<pos:position pos:line="2396" pos:column="63"/></name></expr>]<pos:position pos:line="2396" pos:column="64"/></index></name></expr></argument>)<pos:position pos:line="2396" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="2396" pos:column="66"/></expr_stmt></block></then>
			<else pos:line="2397" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="2398" pos:column="33">argv_array_push<pos:position pos:line="2398" pos:column="48"/></name><argument_list pos:line="2398" pos:column="48">(<argument><expr><operator pos:line="2398" pos:column="49">&amp;<pos:position pos:line="2398" pos:column="54"/></operator><name pos:line="2398" pos:column="50">paths<pos:position pos:line="2398" pos:column="55"/></name></expr></argument>, <argument><expr><call><name pos:line="2398" pos:column="57">mkpath<pos:position pos:line="2398" pos:column="63"/></name><argument_list pos:line="2398" pos:column="63">(<argument><expr><literal type="string" pos:line="2398" pos:column="64">"%s/%s"<pos:position pos:line="2398" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="2398" pos:column="73">prefix<pos:position pos:line="2398" pos:column="79"/></name></expr></argument>, <argument><expr><name><name pos:line="2398" pos:column="81">argv<pos:position pos:line="2398" pos:column="85"/></name><index pos:line="2398" pos:column="85">[<expr><name pos:line="2398" pos:column="86">i<pos:position pos:line="2398" pos:column="87"/></name></expr>]<pos:position pos:line="2398" pos:column="88"/></index></name></expr></argument>)<pos:position pos:line="2398" pos:column="89"/></argument_list></call></expr></argument>)<pos:position pos:line="2398" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="2398" pos:column="91"/></expr_stmt></block></else></if>
		}<pos:position pos:line="2399" pos:column="18"/></block></for>

		<expr_stmt><expr><call><name pos:line="2401" pos:column="17">am_setup<pos:position pos:line="2401" pos:column="25"/></name><argument_list pos:line="2401" pos:column="25">(<argument><expr><operator pos:line="2401" pos:column="26">&amp;<pos:position pos:line="2401" pos:column="31"/></operator><name pos:line="2401" pos:column="27">state<pos:position pos:line="2401" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="2401" pos:column="34">patch_format<pos:position pos:line="2401" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="2401" pos:column="48">paths<pos:position pos:line="2401" pos:column="53"/></name><operator pos:line="2401" pos:column="53">.<pos:position pos:line="2401" pos:column="54"/></operator><name pos:line="2401" pos:column="54">argv<pos:position pos:line="2401" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="2401" pos:column="60">keep_cr<pos:position pos:line="2401" pos:column="67"/></name></expr></argument>)<pos:position pos:line="2401" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="2401" pos:column="69"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="2403" pos:column="17">argv_array_clear<pos:position pos:line="2403" pos:column="33"/></name><argument_list pos:line="2403" pos:column="33">(<argument><expr><operator pos:line="2403" pos:column="34">&amp;<pos:position pos:line="2403" pos:column="39"/></operator><name pos:line="2403" pos:column="35">paths<pos:position pos:line="2403" pos:column="40"/></name></expr></argument>)<pos:position pos:line="2403" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="2403" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="2404" pos:column="10"/></block></else></if>

	<switch pos:line="2406" pos:column="9">switch <condition pos:line="2406" pos:column="16">(<expr><name pos:line="2406" pos:column="17">resume<pos:position pos:line="2406" pos:column="23"/></name></expr>)<pos:position pos:line="2406" pos:column="24"/></condition> <block pos:line="2406" pos:column="25">{
	<case pos:line="2407" pos:column="9">case <expr><name pos:line="2407" pos:column="14">RESUME_FALSE<pos:position pos:line="2407" pos:column="26"/></name></expr>:<pos:position pos:line="2407" pos:column="27"/></case>
		<expr_stmt><expr><call><name pos:line="2408" pos:column="17">am_run<pos:position pos:line="2408" pos:column="23"/></name><argument_list pos:line="2408" pos:column="23">(<argument><expr><operator pos:line="2408" pos:column="24">&amp;<pos:position pos:line="2408" pos:column="29"/></operator><name pos:line="2408" pos:column="25">state<pos:position pos:line="2408" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2408" pos:column="32">0<pos:position pos:line="2408" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="2408" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="2408" pos:column="35"/></expr_stmt>
		<break pos:line="2409" pos:column="17">break;<pos:position pos:line="2409" pos:column="23"/></break>
	<case pos:line="2410" pos:column="9">case <expr><name pos:line="2410" pos:column="14">RESUME_APPLY<pos:position pos:line="2410" pos:column="26"/></name></expr>:<pos:position pos:line="2410" pos:column="27"/></case>
		<expr_stmt><expr><call><name pos:line="2411" pos:column="17">am_run<pos:position pos:line="2411" pos:column="23"/></name><argument_list pos:line="2411" pos:column="23">(<argument><expr><operator pos:line="2411" pos:column="24">&amp;<pos:position pos:line="2411" pos:column="29"/></operator><name pos:line="2411" pos:column="25">state<pos:position pos:line="2411" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2411" pos:column="32">1<pos:position pos:line="2411" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="2411" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="2411" pos:column="35"/></expr_stmt>
		<break pos:line="2412" pos:column="17">break;<pos:position pos:line="2412" pos:column="23"/></break>
	<case pos:line="2413" pos:column="9">case <expr><name pos:line="2413" pos:column="14">RESUME_RESOLVED<pos:position pos:line="2413" pos:column="29"/></name></expr>:<pos:position pos:line="2413" pos:column="30"/></case>
		<expr_stmt><expr><call><name pos:line="2414" pos:column="17">am_resolve<pos:position pos:line="2414" pos:column="27"/></name><argument_list pos:line="2414" pos:column="27">(<argument><expr><operator pos:line="2414" pos:column="28">&amp;<pos:position pos:line="2414" pos:column="33"/></operator><name pos:line="2414" pos:column="29">state<pos:position pos:line="2414" pos:column="34"/></name></expr></argument>)<pos:position pos:line="2414" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="2414" pos:column="36"/></expr_stmt>
		<break pos:line="2415" pos:column="17">break;<pos:position pos:line="2415" pos:column="23"/></break>
	<case pos:line="2416" pos:column="9">case <expr><name pos:line="2416" pos:column="14">RESUME_SKIP<pos:position pos:line="2416" pos:column="25"/></name></expr>:<pos:position pos:line="2416" pos:column="26"/></case>
		<expr_stmt><expr><call><name pos:line="2417" pos:column="17">am_skip<pos:position pos:line="2417" pos:column="24"/></name><argument_list pos:line="2417" pos:column="24">(<argument><expr><operator pos:line="2417" pos:column="25">&amp;<pos:position pos:line="2417" pos:column="30"/></operator><name pos:line="2417" pos:column="26">state<pos:position pos:line="2417" pos:column="31"/></name></expr></argument>)<pos:position pos:line="2417" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="2417" pos:column="33"/></expr_stmt>
		<break pos:line="2418" pos:column="17">break;<pos:position pos:line="2418" pos:column="23"/></break>
	<case pos:line="2419" pos:column="9">case <expr><name pos:line="2419" pos:column="14">RESUME_ABORT<pos:position pos:line="2419" pos:column="26"/></name></expr>:<pos:position pos:line="2419" pos:column="27"/></case>
		<expr_stmt><expr><call><name pos:line="2420" pos:column="17">am_abort<pos:position pos:line="2420" pos:column="25"/></name><argument_list pos:line="2420" pos:column="25">(<argument><expr><operator pos:line="2420" pos:column="26">&amp;<pos:position pos:line="2420" pos:column="31"/></operator><name pos:line="2420" pos:column="27">state<pos:position pos:line="2420" pos:column="32"/></name></expr></argument>)<pos:position pos:line="2420" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="2420" pos:column="34"/></expr_stmt>
		<break pos:line="2421" pos:column="17">break;<pos:position pos:line="2421" pos:column="23"/></break>
	<default pos:line="2422" pos:column="9">default:<pos:position pos:line="2422" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="2423" pos:column="17">die<pos:position pos:line="2423" pos:column="20"/></name><argument_list pos:line="2423" pos:column="20">(<argument><expr><literal type="string" pos:line="2423" pos:column="21">"BUG: invalid resume value"<pos:position pos:line="2423" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="2423" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="2423" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="2424" pos:column="10"/></block></switch>

	<expr_stmt><expr><call><name pos:line="2426" pos:column="9">am_state_release<pos:position pos:line="2426" pos:column="25"/></name><argument_list pos:line="2426" pos:column="25">(<argument><expr><operator pos:line="2426" pos:column="26">&amp;<pos:position pos:line="2426" pos:column="31"/></operator><name pos:line="2426" pos:column="27">state<pos:position pos:line="2426" pos:column="32"/></name></expr></argument>)<pos:position pos:line="2426" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="2426" pos:column="34"/></expr_stmt>

	<return pos:line="2428" pos:column="9">return <expr><literal type="number" pos:line="2428" pos:column="16">0<pos:position pos:line="2428" pos:column="17"/></literal></expr>;<pos:position pos:line="2428" pos:column="18"/></return>
}<pos:position pos:line="2429" pos:column="2"/></block></function>
</unit>
