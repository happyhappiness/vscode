<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3628_httpd-2.4.17.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">ap_expr_yyensure_buffer_stack<pos:position pos:line="1" pos:column="42"/></name> <parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name pos:line="1" pos:column="44">yyscan_t<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">yyscanner<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">num_to_alloc<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">yyguts_t<pos:position pos:line="4" pos:column="20"/></name></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type> <name pos:line="4" pos:column="23">yyg<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><operator pos:line="4" pos:column="29">(<pos:position pos:line="4" pos:column="30"/></operator>struct <name pos:line="4" pos:column="37">yyguts_t<pos:position pos:line="4" pos:column="45"/></name><operator pos:line="4" pos:column="45">*<pos:position pos:line="4" pos:column="46"/></operator><operator pos:line="4" pos:column="46">)<pos:position pos:line="4" pos:column="47"/></operator><name pos:line="4" pos:column="47">yyscanner<pos:position pos:line="4" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="57"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><name><name pos:line="6" pos:column="14">yyg<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">-&gt;<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="19">yy_buffer_stack<pos:position pos:line="6" pos:column="34"/></name></name></expr>)<pos:position pos:line="6" pos:column="35"/></condition><then pos:line="6" pos:column="35"> <block pos:line="6" pos:column="36">{

		<comment type="block" pos:line="8" pos:column="17">/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */</comment>
		<expr_stmt><expr><name pos:line="12" pos:column="17">num_to_alloc<pos:position pos:line="12" pos:column="29"/></name> <operator pos:line="12" pos:column="30">=<pos:position pos:line="12" pos:column="31"/></operator> <literal type="number" pos:line="12" pos:column="32">1<pos:position pos:line="12" pos:column="33"/></literal></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="13" pos:column="17">yyg<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">-&gt;<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="22">yy_buffer_stack<pos:position pos:line="13" pos:column="37"/></name></name> <operator pos:line="13" pos:column="38">=<pos:position pos:line="13" pos:column="39"/></operator> <operator pos:line="13" pos:column="40">(<pos:position pos:line="13" pos:column="41"/></operator>struct <name pos:line="13" pos:column="48">yy_buffer_state<pos:position pos:line="13" pos:column="63"/></name><operator pos:line="13" pos:column="63">*<pos:position pos:line="13" pos:column="64"/></operator><operator pos:line="13" pos:column="64">*<pos:position pos:line="13" pos:column="65"/></operator><operator pos:line="13" pos:column="65">)<pos:position pos:line="13" pos:column="66"/></operator><call><name pos:line="13" pos:column="66">ap_expr_yyalloc<pos:position pos:line="13" pos:column="81"/></name>
								<argument_list pos:line="14" pos:column="65">(<argument><expr><name pos:line="14" pos:column="66">num_to_alloc<pos:position pos:line="14" pos:column="78"/></name> <operator pos:line="14" pos:column="79">*<pos:position pos:line="14" pos:column="80"/></operator> <sizeof pos:line="14" pos:column="81">sizeof<argument_list pos:line="14" pos:column="87">(<argument><expr pos:line="14" pos:column="88">struct <name pos:line="14" pos:column="95">yy_buffer_state<pos:position pos:line="14" pos:column="110"/></name><operator pos:line="14" pos:column="110">*<pos:position pos:line="14" pos:column="111"/></operator></expr></argument>)<pos:position pos:line="14" pos:column="112"/></argument_list></sizeof></expr></argument>
								, <argument><expr><name pos:line="15" pos:column="67">yyscanner<pos:position pos:line="15" pos:column="76"/></name></expr></argument>)<pos:position pos:line="15" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="78"/></expr_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">( <expr><operator pos:line="16" pos:column="22">!<pos:position pos:line="16" pos:column="23"/></operator> <name><name pos:line="16" pos:column="24">yyg<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">-&gt;<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="29">yy_buffer_stack<pos:position pos:line="16" pos:column="44"/></name></name></expr> )<pos:position pos:line="16" pos:column="46"/></condition><then pos:line="16" pos:column="46">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="25">YY_FATAL_ERROR<pos:position pos:line="17" pos:column="39"/></name><argument_list pos:line="17" pos:column="39">( <argument><expr><literal type="string" pos:line="17" pos:column="41">"out of dynamic memory in ap_expr_yyensure_buffer_stack()"<pos:position pos:line="17" pos:column="99"/></literal></expr></argument> )<pos:position pos:line="17" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="102"/></expr_stmt></block></then></if>
								  
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">memset<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><name><name pos:line="19" pos:column="24">yyg<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">-&gt;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="29">yy_buffer_stack<pos:position pos:line="19" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="46">0<pos:position pos:line="19" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="49">num_to_alloc<pos:position pos:line="19" pos:column="61"/></name> <operator pos:line="19" pos:column="62">*<pos:position pos:line="19" pos:column="63"/></operator> <sizeof pos:line="19" pos:column="64">sizeof<argument_list pos:line="19" pos:column="70">(<argument><expr pos:line="19" pos:column="71">struct <name pos:line="19" pos:column="78">yy_buffer_state<pos:position pos:line="19" pos:column="93"/></name><operator pos:line="19" pos:column="93">*<pos:position pos:line="19" pos:column="94"/></operator></expr></argument>)<pos:position pos:line="19" pos:column="95"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="97"/></expr_stmt>
				
		<expr_stmt><expr><name><name pos:line="21" pos:column="17">yyg<pos:position pos:line="21" pos:column="20"/></name><operator pos:line="21" pos:column="20">-&gt;<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="22">yy_buffer_stack_max<pos:position pos:line="21" pos:column="41"/></name></name> <operator pos:line="21" pos:column="42">=<pos:position pos:line="21" pos:column="43"/></operator> <name pos:line="21" pos:column="44">num_to_alloc<pos:position pos:line="21" pos:column="56"/></name></expr>;<pos:position pos:line="21" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="22" pos:column="17">yyg<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">-&gt;<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="22">yy_buffer_stack_top<pos:position pos:line="22" pos:column="41"/></name></name> <operator pos:line="22" pos:column="42">=<pos:position pos:line="22" pos:column="43"/></operator> <literal type="number" pos:line="22" pos:column="44">0<pos:position pos:line="22" pos:column="45"/></literal></expr>;<pos:position pos:line="22" pos:column="46"/></expr_stmt>
		<return pos:line="23" pos:column="17">return;<pos:position pos:line="23" pos:column="24"/></return>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>

	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">yyg<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">-&gt;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="18">yy_buffer_stack_top<pos:position pos:line="26" pos:column="37"/></name></name> <operator pos:line="26" pos:column="38">&gt;=<pos:position pos:line="26" pos:column="43"/></operator> <operator pos:line="26" pos:column="41">(<pos:position pos:line="26" pos:column="42"/></operator><name><name pos:line="26" pos:column="42">yyg<pos:position pos:line="26" pos:column="45"/></name><operator pos:line="26" pos:column="45">-&gt;<pos:position pos:line="26" pos:column="50"/></operator><name pos:line="26" pos:column="47">yy_buffer_stack_max<pos:position pos:line="26" pos:column="66"/></name></name><operator pos:line="26" pos:column="66">)<pos:position pos:line="26" pos:column="67"/></operator> <operator pos:line="26" pos:column="68">-<pos:position pos:line="26" pos:column="69"/></operator> <literal type="number" pos:line="26" pos:column="70">1<pos:position pos:line="26" pos:column="71"/></literal></expr>)<pos:position pos:line="26" pos:column="72"/></condition><then><block pos:line="26" pos:column="72">{

		<comment type="block" pos:line="28" pos:column="17">/* Increase the buffer to prepare for a possible push. */</comment>
		<decl_stmt><decl><type><name pos:line="29" pos:column="17">int<pos:position pos:line="29" pos:column="20"/></name></type> <name pos:line="29" pos:column="21">grow_size<pos:position pos:line="29" pos:column="30"/></name> <init pos:line="29" pos:column="31">= <expr><literal type="number" pos:line="29" pos:column="33">8<pos:position pos:line="29" pos:column="34"/></literal></expr></init></decl> <comment type="block" pos:line="29" pos:column="35">/* arbitrary grow size */</comment>;<pos:position pos:line="29" pos:column="61"/></decl_stmt>

		<expr_stmt><expr><name pos:line="31" pos:column="17">num_to_alloc<pos:position pos:line="31" pos:column="29"/></name> <operator pos:line="31" pos:column="30">=<pos:position pos:line="31" pos:column="31"/></operator> <name><name pos:line="31" pos:column="32">yyg<pos:position pos:line="31" pos:column="35"/></name><operator pos:line="31" pos:column="35">-&gt;<pos:position pos:line="31" pos:column="40"/></operator><name pos:line="31" pos:column="37">yy_buffer_stack_max<pos:position pos:line="31" pos:column="56"/></name></name> <operator pos:line="31" pos:column="57">+<pos:position pos:line="31" pos:column="58"/></operator> <name pos:line="31" pos:column="59">grow_size<pos:position pos:line="31" pos:column="68"/></name></expr>;<pos:position pos:line="31" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="32" pos:column="17">yyg<pos:position pos:line="32" pos:column="20"/></name><operator pos:line="32" pos:column="20">-&gt;<pos:position pos:line="32" pos:column="25"/></operator><name pos:line="32" pos:column="22">yy_buffer_stack<pos:position pos:line="32" pos:column="37"/></name></name> <operator pos:line="32" pos:column="38">=<pos:position pos:line="32" pos:column="39"/></operator> <operator pos:line="32" pos:column="40">(<pos:position pos:line="32" pos:column="41"/></operator>struct <name pos:line="32" pos:column="48">yy_buffer_state<pos:position pos:line="32" pos:column="63"/></name><operator pos:line="32" pos:column="63">*<pos:position pos:line="32" pos:column="64"/></operator><operator pos:line="32" pos:column="64">*<pos:position pos:line="32" pos:column="65"/></operator><operator pos:line="32" pos:column="65">)<pos:position pos:line="32" pos:column="66"/></operator><call><name pos:line="32" pos:column="66">ap_expr_yyrealloc<pos:position pos:line="32" pos:column="83"/></name>
								<argument_list pos:line="33" pos:column="65">(<argument><expr><name><name pos:line="33" pos:column="66">yyg<pos:position pos:line="33" pos:column="69"/></name><operator pos:line="33" pos:column="69">-&gt;<pos:position pos:line="33" pos:column="74"/></operator><name pos:line="33" pos:column="71">yy_buffer_stack<pos:position pos:line="33" pos:column="86"/></name></name></expr></argument>,
								<argument><expr><name pos:line="34" pos:column="65">num_to_alloc<pos:position pos:line="34" pos:column="77"/></name> <operator pos:line="34" pos:column="78">*<pos:position pos:line="34" pos:column="79"/></operator> <sizeof pos:line="34" pos:column="80">sizeof<argument_list pos:line="34" pos:column="86">(<argument><expr pos:line="34" pos:column="87">struct <name pos:line="34" pos:column="94">yy_buffer_state<pos:position pos:line="34" pos:column="109"/></name><operator pos:line="34" pos:column="109">*<pos:position pos:line="34" pos:column="110"/></operator></expr></argument>)<pos:position pos:line="34" pos:column="111"/></argument_list></sizeof></expr></argument>
								, <argument><expr><name pos:line="35" pos:column="67">yyscanner<pos:position pos:line="35" pos:column="76"/></name></expr></argument>)<pos:position pos:line="35" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="78"/></expr_stmt>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">( <expr><operator pos:line="36" pos:column="22">!<pos:position pos:line="36" pos:column="23"/></operator> <name><name pos:line="36" pos:column="24">yyg<pos:position pos:line="36" pos:column="27"/></name><operator pos:line="36" pos:column="27">-&gt;<pos:position pos:line="36" pos:column="32"/></operator><name pos:line="36" pos:column="29">yy_buffer_stack<pos:position pos:line="36" pos:column="44"/></name></name></expr> )<pos:position pos:line="36" pos:column="46"/></condition><then pos:line="36" pos:column="46">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="25">YY_FATAL_ERROR<pos:position pos:line="37" pos:column="39"/></name><argument_list pos:line="37" pos:column="39">( <argument><expr><literal type="string" pos:line="37" pos:column="41">"out of dynamic memory in ap_expr_yyensure_buffer_stack()"<pos:position pos:line="37" pos:column="99"/></literal></expr></argument> )<pos:position pos:line="37" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="102"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="39" pos:column="17">/* zero only the new slots.*/</comment>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">memset<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><name><name pos:line="40" pos:column="24">yyg<pos:position pos:line="40" pos:column="27"/></name><operator pos:line="40" pos:column="27">-&gt;<pos:position pos:line="40" pos:column="32"/></operator><name pos:line="40" pos:column="29">yy_buffer_stack<pos:position pos:line="40" pos:column="44"/></name></name> <operator pos:line="40" pos:column="45">+<pos:position pos:line="40" pos:column="46"/></operator> <name><name pos:line="40" pos:column="47">yyg<pos:position pos:line="40" pos:column="50"/></name><operator pos:line="40" pos:column="50">-&gt;<pos:position pos:line="40" pos:column="55"/></operator><name pos:line="40" pos:column="52">yy_buffer_stack_max<pos:position pos:line="40" pos:column="71"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="73">0<pos:position pos:line="40" pos:column="74"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="76">grow_size<pos:position pos:line="40" pos:column="85"/></name> <operator pos:line="40" pos:column="86">*<pos:position pos:line="40" pos:column="87"/></operator> <sizeof pos:line="40" pos:column="88">sizeof<argument_list pos:line="40" pos:column="94">(<argument><expr pos:line="40" pos:column="95">struct <name pos:line="40" pos:column="102">yy_buffer_state<pos:position pos:line="40" pos:column="117"/></name><operator pos:line="40" pos:column="117">*<pos:position pos:line="40" pos:column="118"/></operator></expr></argument>)<pos:position pos:line="40" pos:column="119"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="120"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="121"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="41" pos:column="17">yyg<pos:position pos:line="41" pos:column="20"/></name><operator pos:line="41" pos:column="20">-&gt;<pos:position pos:line="41" pos:column="25"/></operator><name pos:line="41" pos:column="22">yy_buffer_stack_max<pos:position pos:line="41" pos:column="41"/></name></name> <operator pos:line="41" pos:column="42">=<pos:position pos:line="41" pos:column="43"/></operator> <name pos:line="41" pos:column="44">num_to_alloc<pos:position pos:line="41" pos:column="56"/></name></expr>;<pos:position pos:line="41" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
