<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2992_httpd-2.0.44.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">apr_socket_connect<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">apr_socket_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">sock<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">apr_sockaddr_t<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">sa<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">rc<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>        

    <do pos:line="5" pos:column="5">do <block pos:line="5" pos:column="8">{
        <expr_stmt><expr><name pos:line="6" pos:column="9">rc<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">=<pos:position pos:line="6" pos:column="13"/></operator> <call><name pos:line="6" pos:column="14">connect<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><name><name pos:line="6" pos:column="22">sock<pos:position pos:line="6" pos:column="26"/></name><operator pos:line="6" pos:column="26">-&gt;<pos:position pos:line="6" pos:column="31"/></operator><name pos:line="6" pos:column="28">socketdes<pos:position pos:line="6" pos:column="37"/></name></name></expr></argument>,
                     <argument><expr><operator pos:line="7" pos:column="22">(<pos:position pos:line="7" pos:column="23"/></operator><specifier pos:line="7" pos:column="23">const<pos:position pos:line="7" pos:column="28"/></specifier> struct <name pos:line="7" pos:column="36">sockaddr<pos:position pos:line="7" pos:column="44"/></name> <operator pos:line="7" pos:column="45">*<pos:position pos:line="7" pos:column="46"/></operator><operator pos:line="7" pos:column="46">)<pos:position pos:line="7" pos:column="47"/></operator><operator pos:line="7" pos:column="47">&amp;<pos:position pos:line="7" pos:column="52"/></operator><name><name pos:line="7" pos:column="48">sa<pos:position pos:line="7" pos:column="50"/></name><operator pos:line="7" pos:column="50">-&gt;<pos:position pos:line="7" pos:column="55"/></operator><name pos:line="7" pos:column="52">sa<pos:position pos:line="7" pos:column="54"/></name><operator pos:line="7" pos:column="54">.<pos:position pos:line="7" pos:column="55"/></operator><name pos:line="7" pos:column="55">sin<pos:position pos:line="7" pos:column="58"/></name></name></expr></argument>,
                     <argument><expr><name><name pos:line="8" pos:column="22">sa<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">-&gt;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="26">salen<pos:position pos:line="8" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block> while <condition pos:line="9" pos:column="13">(<expr><name pos:line="9" pos:column="14">rc<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">==<pos:position pos:line="9" pos:column="19"/></operator> <operator pos:line="9" pos:column="20">-<pos:position pos:line="9" pos:column="21"/></operator><literal type="number" pos:line="9" pos:column="21">1<pos:position pos:line="9" pos:column="22"/></literal> <operator pos:line="9" pos:column="23">&amp;&amp;<pos:position pos:line="9" pos:column="33"/></operator> <name pos:line="9" pos:column="26">errno<pos:position pos:line="9" pos:column="31"/></name> <operator pos:line="9" pos:column="32">==<pos:position pos:line="9" pos:column="34"/></operator> <name pos:line="9" pos:column="35">EINTR<pos:position pos:line="9" pos:column="40"/></name></expr>)<pos:position pos:line="9" pos:column="41"/></condition>;<pos:position pos:line="9" pos:column="42"/></do>

    <comment type="block" pos:line="11" pos:column="5">/* we can see EINPROGRESS the first time connect is called on a non-blocking
     * socket; if called again, we can see EALREADY
     */</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">rc<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">==<pos:position pos:line="14" pos:column="14"/></operator> <operator pos:line="14" pos:column="15">-<pos:position pos:line="14" pos:column="16"/></operator><literal type="number" pos:line="14" pos:column="16">1<pos:position pos:line="14" pos:column="17"/></literal> <operator pos:line="14" pos:column="18">&amp;&amp;<pos:position pos:line="14" pos:column="28"/></operator> <operator pos:line="14" pos:column="21">(<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">errno<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">==<pos:position pos:line="14" pos:column="30"/></operator> <name pos:line="14" pos:column="31">EINPROGRESS<pos:position pos:line="14" pos:column="42"/></name> <operator pos:line="14" pos:column="43">||<pos:position pos:line="14" pos:column="45"/></operator> <name pos:line="14" pos:column="46">errno<pos:position pos:line="14" pos:column="51"/></name> <operator pos:line="14" pos:column="52">==<pos:position pos:line="14" pos:column="54"/></operator> <name pos:line="14" pos:column="55">EALREADY<pos:position pos:line="14" pos:column="63"/></name><operator pos:line="14" pos:column="63">)<pos:position pos:line="14" pos:column="64"/></operator> <operator pos:line="14" pos:column="65">&amp;&amp;<pos:position pos:line="14" pos:column="75"/></operator> <name><name pos:line="14" pos:column="68">sock<pos:position pos:line="14" pos:column="72"/></name><operator pos:line="14" pos:column="72">-&gt;<pos:position pos:line="14" pos:column="77"/></operator><name pos:line="14" pos:column="74">timeout<pos:position pos:line="14" pos:column="81"/></name></name> <operator pos:line="14" pos:column="82">!=<pos:position pos:line="14" pos:column="84"/></operator> <literal type="number" pos:line="14" pos:column="85">0<pos:position pos:line="14" pos:column="86"/></literal></expr>)<pos:position pos:line="14" pos:column="87"/></condition><then pos:line="14" pos:column="87"> <block pos:line="14" pos:column="88">{
        <expr_stmt><expr><name pos:line="15" pos:column="9">rc<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <call><name pos:line="15" pos:column="14">apr_wait_for_io_or_timeout<pos:position pos:line="15" pos:column="40"/></name><argument_list pos:line="15" pos:column="40">(<argument><expr><name pos:line="15" pos:column="41">NULL<pos:position pos:line="15" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="47">sock<pos:position pos:line="15" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="53">0<pos:position pos:line="15" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="56"/></expr_stmt>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">rc<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">!=<pos:position pos:line="16" pos:column="18"/></operator> <name pos:line="16" pos:column="19">APR_SUCCESS<pos:position pos:line="16" pos:column="30"/></name></expr>)<pos:position pos:line="16" pos:column="31"/></condition><then pos:line="16" pos:column="31"> <block pos:line="16" pos:column="32">{
            <return pos:line="17" pos:column="13">return <expr><name pos:line="17" pos:column="20">rc<pos:position pos:line="17" pos:column="22"/></name></expr>;<pos:position pos:line="17" pos:column="23"/></return>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>

<cpp:ifdef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifdef<pos:position pos:line="20" pos:column="7"/></cpp:directive> <name pos:line="20" pos:column="8">SO_ERROR<pos:position pos:line="20" pos:column="16"/></name></cpp:ifdef>
        <block pos:line="21" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="22" pos:column="13">int<pos:position pos:line="22" pos:column="16"/></name></type> <name pos:line="22" pos:column="17">error<pos:position pos:line="22" pos:column="22"/></name></decl>;<pos:position pos:line="22" pos:column="23"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">apr_socklen_t<pos:position pos:line="23" pos:column="26"/></name></type> <name pos:line="23" pos:column="27">len<pos:position pos:line="23" pos:column="30"/></name> <init pos:line="23" pos:column="31">= <expr><sizeof pos:line="23" pos:column="33">sizeof<argument_list pos:line="23" pos:column="39">(<argument><expr><name pos:line="23" pos:column="40">error<pos:position pos:line="23" pos:column="45"/></name></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="23" pos:column="47"/></decl_stmt>
            <if pos:line="24" pos:column="13">if <condition pos:line="24" pos:column="16">(<expr><operator pos:line="24" pos:column="17">(<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">rc<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <call><name pos:line="24" pos:column="23">getsockopt<pos:position pos:line="24" pos:column="33"/></name><argument_list pos:line="24" pos:column="33">(<argument><expr><name><name pos:line="24" pos:column="34">sock<pos:position pos:line="24" pos:column="38"/></name><operator pos:line="24" pos:column="38">-&gt;<pos:position pos:line="24" pos:column="43"/></operator><name pos:line="24" pos:column="40">socketdes<pos:position pos:line="24" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="51">SOL_SOCKET<pos:position pos:line="24" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="63">SO_ERROR<pos:position pos:line="24" pos:column="71"/></name></expr></argument>, 
                                 <argument><expr><operator pos:line="25" pos:column="34">(<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="35">char<pos:position pos:line="25" pos:column="39"/></name> <operator pos:line="25" pos:column="40">*<pos:position pos:line="25" pos:column="41"/></operator><operator pos:line="25" pos:column="41">)<pos:position pos:line="25" pos:column="42"/></operator><operator pos:line="25" pos:column="42">&amp;<pos:position pos:line="25" pos:column="47"/></operator><name pos:line="25" pos:column="43">error<pos:position pos:line="25" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="50">&amp;<pos:position pos:line="25" pos:column="55"/></operator><name pos:line="25" pos:column="51">len<pos:position pos:line="25" pos:column="54"/></name></expr></argument>)<pos:position pos:line="25" pos:column="55"/></argument_list></call><operator pos:line="25" pos:column="55">)<pos:position pos:line="25" pos:column="56"/></operator> <operator pos:line="25" pos:column="57">&lt;<pos:position pos:line="25" pos:column="61"/></operator> <literal type="number" pos:line="25" pos:column="59">0<pos:position pos:line="25" pos:column="60"/></literal></expr>)<pos:position pos:line="25" pos:column="61"/></condition><then pos:line="25" pos:column="61"> <block pos:line="25" pos:column="62">{
                <return pos:line="26" pos:column="17">return <expr><name pos:line="26" pos:column="24">errno<pos:position pos:line="26" pos:column="29"/></name></expr>;<pos:position pos:line="26" pos:column="30"/></return>
            }<pos:position pos:line="27" pos:column="14"/></block></then></if>
            <if pos:line="28" pos:column="13">if <condition pos:line="28" pos:column="16">(<expr><name pos:line="28" pos:column="17">error<pos:position pos:line="28" pos:column="22"/></name></expr>)<pos:position pos:line="28" pos:column="23"/></condition><then pos:line="28" pos:column="23"> <block pos:line="28" pos:column="24">{
                <return pos:line="29" pos:column="17">return <expr><name pos:line="29" pos:column="24">error<pos:position pos:line="29" pos:column="29"/></name></expr>;<pos:position pos:line="29" pos:column="30"/></return>
            }<pos:position pos:line="30" pos:column="14"/></block></then></if>
        }<pos:position pos:line="31" pos:column="10"/></block>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="32" pos:column="8">/* SO_ERROR */</comment>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name pos:line="35" pos:column="9">rc<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">==<pos:position pos:line="35" pos:column="14"/></operator> <operator pos:line="35" pos:column="15">-<pos:position pos:line="35" pos:column="16"/></operator><literal type="number" pos:line="35" pos:column="16">1<pos:position pos:line="35" pos:column="17"/></literal></expr>)<pos:position pos:line="35" pos:column="18"/></condition><then pos:line="35" pos:column="18"> <block pos:line="35" pos:column="19">{
        <return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">errno<pos:position pos:line="36" pos:column="21"/></name></expr>;<pos:position pos:line="36" pos:column="22"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="39" pos:column="5">sock<pos:position pos:line="39" pos:column="9"/></name><operator pos:line="39" pos:column="9">-&gt;<pos:position pos:line="39" pos:column="14"/></operator><name pos:line="39" pos:column="11">remote_addr<pos:position pos:line="39" pos:column="22"/></name></name> <operator pos:line="39" pos:column="23">=<pos:position pos:line="39" pos:column="24"/></operator> <name pos:line="39" pos:column="25">sa<pos:position pos:line="39" pos:column="27"/></name></expr>;<pos:position pos:line="39" pos:column="28"/></expr_stmt>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name><name pos:line="40" pos:column="9">sock<pos:position pos:line="40" pos:column="13"/></name><operator pos:line="40" pos:column="13">-&gt;<pos:position pos:line="40" pos:column="18"/></operator><name pos:line="40" pos:column="15">local_addr<pos:position pos:line="40" pos:column="25"/></name><operator pos:line="40" pos:column="25">-&gt;<pos:position pos:line="40" pos:column="30"/></operator><name pos:line="40" pos:column="27">port<pos:position pos:line="40" pos:column="31"/></name></name> <operator pos:line="40" pos:column="32">==<pos:position pos:line="40" pos:column="34"/></operator> <literal type="number" pos:line="40" pos:column="35">0<pos:position pos:line="40" pos:column="36"/></literal></expr>)<pos:position pos:line="40" pos:column="37"/></condition><then pos:line="40" pos:column="37"> <block pos:line="40" pos:column="38">{
        <comment type="block" pos:line="41" pos:column="9">/* connect() got us an ephemeral port */</comment>
        <expr_stmt><expr><name><name pos:line="42" pos:column="9">sock<pos:position pos:line="42" pos:column="13"/></name><operator pos:line="42" pos:column="13">-&gt;<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="15">local_port_unknown<pos:position pos:line="42" pos:column="33"/></name></name> <operator pos:line="42" pos:column="34">=<pos:position pos:line="42" pos:column="35"/></operator> <literal type="number" pos:line="42" pos:column="36">1<pos:position pos:line="42" pos:column="37"/></literal></expr>;<pos:position pos:line="42" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><operator pos:line="44" pos:column="9">!<pos:position pos:line="44" pos:column="10"/></operator><call><name pos:line="44" pos:column="10">memcmp<pos:position pos:line="44" pos:column="16"/></name><argument_list pos:line="44" pos:column="16">(<argument><expr><name><name pos:line="44" pos:column="17">sock<pos:position pos:line="44" pos:column="21"/></name><operator pos:line="44" pos:column="21">-&gt;<pos:position pos:line="44" pos:column="26"/></operator><name pos:line="44" pos:column="23">local_addr<pos:position pos:line="44" pos:column="33"/></name><operator pos:line="44" pos:column="33">-&gt;<pos:position pos:line="44" pos:column="38"/></operator><name pos:line="44" pos:column="35">ipaddr_ptr<pos:position pos:line="44" pos:column="45"/></name></name></expr></argument>,
                <argument><expr><name pos:line="45" pos:column="17">generic_inaddr_any<pos:position pos:line="45" pos:column="35"/></name></expr></argument>,
                <argument><expr><name><name pos:line="46" pos:column="17">sock<pos:position pos:line="46" pos:column="21"/></name><operator pos:line="46" pos:column="21">-&gt;<pos:position pos:line="46" pos:column="26"/></operator><name pos:line="46" pos:column="23">local_addr<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">-&gt;<pos:position pos:line="46" pos:column="38"/></operator><name pos:line="46" pos:column="35">ipaddr_len<pos:position pos:line="46" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="47"/></condition><then pos:line="46" pos:column="47"> <block pos:line="46" pos:column="48">{
        <comment type="block" pos:line="47" pos:column="9">/* not bound to specific local interface; connect() had to assign
         * one for the socket
         */</comment>
        <expr_stmt><expr><name><name pos:line="50" pos:column="9">sock<pos:position pos:line="50" pos:column="13"/></name><operator pos:line="50" pos:column="13">-&gt;<pos:position pos:line="50" pos:column="18"/></operator><name pos:line="50" pos:column="15">local_interface_unknown<pos:position pos:line="50" pos:column="38"/></name></name> <operator pos:line="50" pos:column="39">=<pos:position pos:line="50" pos:column="40"/></operator> <literal type="number" pos:line="50" pos:column="41">1<pos:position pos:line="50" pos:column="42"/></literal></expr>;<pos:position pos:line="50" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>
<cpp:ifndef pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">ifndef<pos:position pos:line="52" pos:column="8"/></cpp:directive> <name pos:line="52" pos:column="9">HAVE_POLL<pos:position pos:line="52" pos:column="18"/></name></cpp:ifndef>
    <expr_stmt><expr><name><name pos:line="53" pos:column="5">sock<pos:position pos:line="53" pos:column="9"/></name><operator pos:line="53" pos:column="9">-&gt;<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="11">connected<pos:position pos:line="53" pos:column="20"/></name></name><operator pos:line="53" pos:column="20">=<pos:position pos:line="53" pos:column="21"/></operator><literal type="number" pos:line="53" pos:column="21">1<pos:position pos:line="53" pos:column="22"/></literal></expr>;<pos:position pos:line="53" pos:column="23"/></expr_stmt>
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif<pos:position pos:line="54" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="55" pos:column="5">return <expr><name pos:line="55" pos:column="12">APR_SUCCESS<pos:position pos:line="55" pos:column="23"/></name></expr>;<pos:position pos:line="55" pos:column="24"/></return>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
