<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2141_httpd-2.0.65.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">perform_idle_server_maintenance<pos:position pos:line="1" pos:column="44"/></name><parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><name pos:line="1" pos:column="45">apr_pool_t<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">p<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">i<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">to_kill<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">idle_count<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">worker_score<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier></type><name pos:line="6" pos:column="19">ws<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">free_length<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name><name pos:line="8" pos:column="9">free_slots<pos:position pos:line="8" pos:column="19"/></name><index pos:line="8" pos:column="19">[<expr><name pos:line="8" pos:column="20">MAX_SPAWN_RATE<pos:position pos:line="8" pos:column="34"/></name></expr>]<pos:position pos:line="8" pos:column="35"/></index></name></decl>;<pos:position pos:line="8" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">last_non_dead<pos:position pos:line="9" pos:column="22"/></name></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">total_non_dead<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* initialize the free_list */</comment>
    <expr_stmt><expr><name pos:line="13" pos:column="5">free_length<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">=<pos:position pos:line="13" pos:column="18"/></operator> <literal type="number" pos:line="13" pos:column="19">0<pos:position pos:line="13" pos:column="20"/></literal></expr>;<pos:position pos:line="13" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><name pos:line="15" pos:column="5">to_kill<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <operator pos:line="15" pos:column="15">-<pos:position pos:line="15" pos:column="16"/></operator><literal type="number" pos:line="15" pos:column="16">1<pos:position pos:line="15" pos:column="17"/></literal></expr>;<pos:position pos:line="15" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">idle_count<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <literal type="number" pos:line="16" pos:column="18">0<pos:position pos:line="16" pos:column="19"/></literal></expr>;<pos:position pos:line="16" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">last_non_dead<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <operator pos:line="17" pos:column="21">-<pos:position pos:line="17" pos:column="22"/></operator><literal type="number" pos:line="17" pos:column="22">1<pos:position pos:line="17" pos:column="23"/></literal></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">total_non_dead<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <literal type="number" pos:line="18" pos:column="22">0<pos:position pos:line="18" pos:column="23"/></literal></expr>;<pos:position pos:line="18" pos:column="24"/></expr_stmt>

    <for pos:line="20" pos:column="5">for <control pos:line="20" pos:column="9">(<init><expr><name pos:line="20" pos:column="10">i<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <literal type="number" pos:line="20" pos:column="14">0<pos:position pos:line="20" pos:column="15"/></literal></expr>;<pos:position pos:line="20" pos:column="16"/></init> <condition><expr><name pos:line="20" pos:column="17">i<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">&lt;<pos:position pos:line="20" pos:column="23"/></operator> <name pos:line="20" pos:column="21">ap_threads_limit<pos:position pos:line="20" pos:column="37"/></name></expr>;<pos:position pos:line="20" pos:column="38"/></condition> <incr><expr><operator pos:line="20" pos:column="39">++<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="41">i<pos:position pos:line="20" pos:column="42"/></name></expr></incr>)<pos:position pos:line="20" pos:column="43"/></control> <block pos:line="20" pos:column="44">{
        <decl_stmt><decl><type><name pos:line="21" pos:column="9">int<pos:position pos:line="21" pos:column="12"/></name></type> <name pos:line="21" pos:column="13">status<pos:position pos:line="21" pos:column="19"/></name></decl>;<pos:position pos:line="21" pos:column="20"/></decl_stmt>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">i<pos:position pos:line="23" pos:column="14"/></name> <operator pos:line="23" pos:column="15">&gt;=<pos:position pos:line="23" pos:column="20"/></operator> <name pos:line="23" pos:column="18">ap_max_workers_limit<pos:position pos:line="23" pos:column="38"/></name> <operator pos:line="23" pos:column="39">&amp;&amp;<pos:position pos:line="23" pos:column="49"/></operator> <name pos:line="23" pos:column="42">free_length<pos:position pos:line="23" pos:column="53"/></name> <operator pos:line="23" pos:column="54">==<pos:position pos:line="23" pos:column="56"/></operator> <name pos:line="23" pos:column="57">idle_spawn_rate<pos:position pos:line="23" pos:column="72"/></name></expr>)<pos:position pos:line="23" pos:column="73"/></condition><then pos:line="23" pos:column="73">
            <block type="pseudo"><break pos:line="24" pos:column="13">break;<pos:position pos:line="24" pos:column="19"/></break></block></then></if>
        <expr_stmt><expr><name pos:line="25" pos:column="9">ws<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <operator pos:line="25" pos:column="14">&amp;<pos:position pos:line="25" pos:column="19"/></operator><name><name pos:line="25" pos:column="15">ap_scoreboard_image<pos:position pos:line="25" pos:column="34"/></name><operator pos:line="25" pos:column="34">-&gt;<pos:position pos:line="25" pos:column="39"/></operator><name pos:line="25" pos:column="36">servers<pos:position pos:line="25" pos:column="43"/></name><index pos:line="25" pos:column="43">[<expr><literal type="number" pos:line="25" pos:column="44">0<pos:position pos:line="25" pos:column="45"/></literal></expr>]<pos:position pos:line="25" pos:column="46"/></index><index pos:line="25" pos:column="46">[<expr><name pos:line="25" pos:column="47">i<pos:position pos:line="25" pos:column="48"/></name></expr>]<pos:position pos:line="25" pos:column="49"/></index></name></expr>;<pos:position pos:line="25" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><name pos:line="26" pos:column="9">status<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <name><name pos:line="26" pos:column="18">ws<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">-&gt;<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="22">status<pos:position pos:line="26" pos:column="28"/></name></name></expr>;<pos:position pos:line="26" pos:column="29"/></expr_stmt>
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">status<pos:position pos:line="27" pos:column="19"/></name> <operator pos:line="27" pos:column="20">==<pos:position pos:line="27" pos:column="22"/></operator> <name pos:line="27" pos:column="23">WORKER_DEAD<pos:position pos:line="27" pos:column="34"/></name></expr>)<pos:position pos:line="27" pos:column="35"/></condition><then pos:line="27" pos:column="35"> <block pos:line="27" pos:column="36">{
            <comment type="block" pos:line="28" pos:column="13">/* try to keep children numbers as low as possible */</comment>
            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><name pos:line="29" pos:column="17">free_length<pos:position pos:line="29" pos:column="28"/></name> <operator pos:line="29" pos:column="29">&lt;<pos:position pos:line="29" pos:column="33"/></operator> <name pos:line="29" pos:column="31">idle_spawn_rate<pos:position pos:line="29" pos:column="46"/></name></expr>)<pos:position pos:line="29" pos:column="47"/></condition><then pos:line="29" pos:column="47"> <block pos:line="29" pos:column="48">{
                <expr_stmt><expr><name><name pos:line="30" pos:column="17">free_slots<pos:position pos:line="30" pos:column="27"/></name><index pos:line="30" pos:column="27">[<expr><name pos:line="30" pos:column="28">free_length<pos:position pos:line="30" pos:column="39"/></name></expr>]<pos:position pos:line="30" pos:column="40"/></index></name> <operator pos:line="30" pos:column="41">=<pos:position pos:line="30" pos:column="42"/></operator> <name pos:line="30" pos:column="43">i<pos:position pos:line="30" pos:column="44"/></name></expr>;<pos:position pos:line="30" pos:column="45"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="31" pos:column="17">++<pos:position pos:line="31" pos:column="19"/></operator><name pos:line="31" pos:column="19">free_length<pos:position pos:line="31" pos:column="30"/></name></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>
            }<pos:position pos:line="32" pos:column="14"/></block></then></if>
        }<pos:position pos:line="33" pos:column="10"/></block></then>
        <elseif pos:line="34" pos:column="9">else <if pos:line="34" pos:column="14">if <condition pos:line="34" pos:column="17">(<expr><name pos:line="34" pos:column="18">status<pos:position pos:line="34" pos:column="24"/></name> <operator pos:line="34" pos:column="25">==<pos:position pos:line="34" pos:column="27"/></operator> <name pos:line="34" pos:column="28">WORKER_IDLE_KILL<pos:position pos:line="34" pos:column="44"/></name></expr>)<pos:position pos:line="34" pos:column="45"/></condition><then pos:line="34" pos:column="45"> <block pos:line="34" pos:column="46">{
            <comment type="block" pos:line="35" pos:column="13">/* If it is already marked to die, skip it */</comment>
            <continue pos:line="36" pos:column="13">continue;<pos:position pos:line="36" pos:column="22"/></continue>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if></elseif>
        <else pos:line="38" pos:column="9">else <block pos:line="38" pos:column="14">{
            <comment type="block" pos:line="39" pos:column="13">/* We consider a starting server as idle because we started it
            * at least a cycle ago, and if it still hasn't finished starting
            * then we're just going to swamp things worse by forking more.
            * So we hopefully won't need to fork more if we count it.
            * This depends on the ordering of SERVER_READY and SERVER_STARTING.
            */</comment>
            <if pos:line="45" pos:column="13">if <condition pos:line="45" pos:column="16">(<expr><name pos:line="45" pos:column="17">status<pos:position pos:line="45" pos:column="23"/></name> <operator pos:line="45" pos:column="24">&lt;=<pos:position pos:line="45" pos:column="29"/></operator> <name pos:line="45" pos:column="27">WORKER_READY<pos:position pos:line="45" pos:column="39"/></name></expr>)<pos:position pos:line="45" pos:column="40"/></condition><then pos:line="45" pos:column="40"> <block pos:line="45" pos:column="41">{
                <expr_stmt><expr><operator pos:line="46" pos:column="17">++<pos:position pos:line="46" pos:column="19"/></operator> <name pos:line="46" pos:column="20">idle_count<pos:position pos:line="46" pos:column="30"/></name></expr>;<pos:position pos:line="46" pos:column="31"/></expr_stmt>
                <comment type="block" pos:line="47" pos:column="17">/* always kill the highest numbered child if we have to...
                * no really well thought out reason ... other than observing
                * the server behaviour under linux where lower numbered children
                * tend to service more hits (and hence are more likely to have
                * their data in cpu caches).
                */</comment>
                <expr_stmt><expr><name pos:line="53" pos:column="17">to_kill<pos:position pos:line="53" pos:column="24"/></name> <operator pos:line="53" pos:column="25">=<pos:position pos:line="53" pos:column="26"/></operator> <name pos:line="53" pos:column="27">i<pos:position pos:line="53" pos:column="28"/></name></expr>;<pos:position pos:line="53" pos:column="29"/></expr_stmt>
            }<pos:position pos:line="54" pos:column="14"/></block></then></if>

            <expr_stmt><expr><operator pos:line="56" pos:column="13">++<pos:position pos:line="56" pos:column="15"/></operator><name pos:line="56" pos:column="15">total_non_dead<pos:position pos:line="56" pos:column="29"/></name></expr>;<pos:position pos:line="56" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><name pos:line="57" pos:column="13">last_non_dead<pos:position pos:line="57" pos:column="26"/></name> <operator pos:line="57" pos:column="27">=<pos:position pos:line="57" pos:column="28"/></operator> <name pos:line="57" pos:column="29">i<pos:position pos:line="57" pos:column="30"/></name></expr>;<pos:position pos:line="57" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="58" pos:column="10"/></block></else></if>
    }<pos:position pos:line="59" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">DBPRINT2<pos:position pos:line="60" pos:column="13"/></name><argument_list pos:line="60" pos:column="13">(<argument><expr><literal type="string" pos:line="60" pos:column="14">"Total: %d Idle Count: %d  \r"<pos:position pos:line="60" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="46">total_non_dead<pos:position pos:line="60" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="62">idle_count<pos:position pos:line="60" pos:column="72"/></name></expr></argument>)<pos:position pos:line="60" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><name pos:line="61" pos:column="5">ap_max_workers_limit<pos:position pos:line="61" pos:column="25"/></name> <operator pos:line="61" pos:column="26">=<pos:position pos:line="61" pos:column="27"/></operator> <name pos:line="61" pos:column="28">last_non_dead<pos:position pos:line="61" pos:column="41"/></name> <operator pos:line="61" pos:column="42">+<pos:position pos:line="61" pos:column="43"/></operator> <literal type="number" pos:line="61" pos:column="44">1<pos:position pos:line="61" pos:column="45"/></literal></expr>;<pos:position pos:line="61" pos:column="46"/></expr_stmt>
    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><name pos:line="62" pos:column="9">idle_count<pos:position pos:line="62" pos:column="19"/></name> <operator pos:line="62" pos:column="20">&gt;<pos:position pos:line="62" pos:column="24"/></operator> <name pos:line="62" pos:column="22">ap_threads_max_free<pos:position pos:line="62" pos:column="41"/></name></expr>)<pos:position pos:line="62" pos:column="42"/></condition><then pos:line="62" pos:column="42"> <block pos:line="62" pos:column="43">{
        <comment type="block" pos:line="63" pos:column="9">/* kill off one child... we use the pod because that'll cause it to
        * shut down gracefully, in case it happened to pick up a request
        * while we were counting
        */</comment>
        <expr_stmt><expr><name pos:line="67" pos:column="9">idle_spawn_rate<pos:position pos:line="67" pos:column="24"/></name> <operator pos:line="67" pos:column="25">=<pos:position pos:line="67" pos:column="26"/></operator> <literal type="number" pos:line="67" pos:column="27">1<pos:position pos:line="67" pos:column="28"/></literal></expr>;<pos:position pos:line="67" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="68" pos:column="9">ap_update_child_status_from_indexes<pos:position pos:line="68" pos:column="44"/></name><argument_list pos:line="68" pos:column="44">(<argument><expr><literal type="number" pos:line="68" pos:column="45">0<pos:position pos:line="68" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="48">last_non_dead<pos:position pos:line="68" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="63">WORKER_IDLE_KILL<pos:position pos:line="68" pos:column="79"/></name></expr></argument>, 
                                            <argument><expr><operator pos:line="69" pos:column="45">(<pos:position pos:line="69" pos:column="46"/></operator><name pos:line="69" pos:column="46">request_rec<pos:position pos:line="69" pos:column="57"/></name> <operator pos:line="69" pos:column="58">*<pos:position pos:line="69" pos:column="59"/></operator><operator pos:line="69" pos:column="59">)<pos:position pos:line="69" pos:column="60"/></operator> <name pos:line="69" pos:column="61">NULL<pos:position pos:line="69" pos:column="65"/></name></expr></argument>)<pos:position pos:line="69" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">DBPRINT1<pos:position pos:line="70" pos:column="17"/></name><argument_list pos:line="70" pos:column="17">(<argument><expr><literal type="string" pos:line="70" pos:column="18">"\nKilling idle thread: %d\n"<pos:position pos:line="70" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="49">last_non_dead<pos:position pos:line="70" pos:column="62"/></name></expr></argument>)<pos:position pos:line="70" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="71" pos:column="6"/></block></then>
    <elseif pos:line="72" pos:column="5">else <if pos:line="72" pos:column="10">if <condition pos:line="72" pos:column="13">(<expr><name pos:line="72" pos:column="14">idle_count<pos:position pos:line="72" pos:column="24"/></name> <operator pos:line="72" pos:column="25">&lt;<pos:position pos:line="72" pos:column="29"/></operator> <name pos:line="72" pos:column="27">ap_threads_min_free<pos:position pos:line="72" pos:column="46"/></name></expr>)<pos:position pos:line="72" pos:column="47"/></condition><then pos:line="72" pos:column="47"> <block pos:line="72" pos:column="48">{
        <comment type="block" pos:line="73" pos:column="9">/* terminate the free list */</comment>
        <if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">free_length<pos:position pos:line="74" pos:column="24"/></name> <operator pos:line="74" pos:column="25">==<pos:position pos:line="74" pos:column="27"/></operator> <literal type="number" pos:line="74" pos:column="28">0<pos:position pos:line="74" pos:column="29"/></literal></expr>)<pos:position pos:line="74" pos:column="30"/></condition><then pos:line="74" pos:column="30"> <block pos:line="74" pos:column="31">{
            <comment type="block" pos:line="75" pos:column="13">/* only report this condition once */</comment>
            <decl_stmt><decl><specifier pos:line="76" pos:column="13">static<pos:position pos:line="76" pos:column="19"/></specifier> <type><name pos:line="76" pos:column="20">int<pos:position pos:line="76" pos:column="23"/></name></type> <name pos:line="76" pos:column="24">reported<pos:position pos:line="76" pos:column="32"/></name> <init pos:line="76" pos:column="33">= <expr><literal type="number" pos:line="76" pos:column="35">0<pos:position pos:line="76" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="76" pos:column="37"/></decl_stmt>

            <if pos:line="78" pos:column="13">if <condition pos:line="78" pos:column="16">(<expr><operator pos:line="78" pos:column="17">!<pos:position pos:line="78" pos:column="18"/></operator><name pos:line="78" pos:column="18">reported<pos:position pos:line="78" pos:column="26"/></name></expr>)<pos:position pos:line="78" pos:column="27"/></condition><then pos:line="78" pos:column="27"> <block pos:line="78" pos:column="28">{
                <expr_stmt><expr><call><name pos:line="79" pos:column="17">ap_log_error<pos:position pos:line="79" pos:column="29"/></name><argument_list pos:line="79" pos:column="29">(<argument><expr><name pos:line="79" pos:column="30">APLOG_MARK<pos:position pos:line="79" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="42">APLOG_ERR<pos:position pos:line="79" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="53">0<pos:position pos:line="79" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="56">ap_server_conf<pos:position pos:line="79" pos:column="70"/></name></expr></argument>,
                    <argument><expr><literal type="string" pos:line="80" pos:column="21">"server reached MaxClients setting, consider"<pos:position pos:line="80" pos:column="66"/></literal>
                    <literal type="string" pos:line="81" pos:column="21">" raising the MaxClients setting"<pos:position pos:line="81" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="56"/></expr_stmt>
                <expr_stmt><expr><name pos:line="82" pos:column="17">reported<pos:position pos:line="82" pos:column="25"/></name> <operator pos:line="82" pos:column="26">=<pos:position pos:line="82" pos:column="27"/></operator> <literal type="number" pos:line="82" pos:column="28">1<pos:position pos:line="82" pos:column="29"/></literal></expr>;<pos:position pos:line="82" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="83" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="84" pos:column="13">idle_spawn_rate<pos:position pos:line="84" pos:column="28"/></name> <operator pos:line="84" pos:column="29">=<pos:position pos:line="84" pos:column="30"/></operator> <literal type="number" pos:line="84" pos:column="31">1<pos:position pos:line="84" pos:column="32"/></literal></expr>;<pos:position pos:line="84" pos:column="33"/></expr_stmt>
        }<pos:position pos:line="85" pos:column="10"/></block></then>
        <else pos:line="86" pos:column="9">else <block pos:line="86" pos:column="14">{
            <if pos:line="87" pos:column="13">if <condition pos:line="87" pos:column="16">(<expr><name pos:line="87" pos:column="17">idle_spawn_rate<pos:position pos:line="87" pos:column="32"/></name> <operator pos:line="87" pos:column="33">&gt;=<pos:position pos:line="87" pos:column="38"/></operator> <literal type="number" pos:line="87" pos:column="36">8<pos:position pos:line="87" pos:column="37"/></literal></expr>)<pos:position pos:line="87" pos:column="38"/></condition><then pos:line="87" pos:column="38"> <block pos:line="87" pos:column="39">{
                <expr_stmt><expr><call><name pos:line="88" pos:column="17">ap_log_error<pos:position pos:line="88" pos:column="29"/></name><argument_list pos:line="88" pos:column="29">(<argument><expr><name pos:line="88" pos:column="30">APLOG_MARK<pos:position pos:line="88" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="42">APLOG_INFO<pos:position pos:line="88" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="54">0<pos:position pos:line="88" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="88" pos:column="57">ap_server_conf<pos:position pos:line="88" pos:column="71"/></name></expr></argument>,
                    <argument><expr><literal type="string" pos:line="89" pos:column="21">"server seems busy, (you may need "<pos:position pos:line="89" pos:column="56"/></literal>
                    <literal type="string" pos:line="90" pos:column="21">"to increase StartServers, or Min/MaxSpareServers), "<pos:position pos:line="90" pos:column="74"/></literal>
                    <literal type="string" pos:line="91" pos:column="21">"spawning %d children, there are %d idle, and "<pos:position pos:line="91" pos:column="68"/></literal>
                    <literal type="string" pos:line="92" pos:column="21">"%d total children"<pos:position pos:line="92" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="42">idle_spawn_rate<pos:position pos:line="92" pos:column="57"/></name></expr></argument>,
                    <argument><expr><name pos:line="93" pos:column="21">idle_count<pos:position pos:line="93" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="33">total_non_dead<pos:position pos:line="93" pos:column="47"/></name></expr></argument>)<pos:position pos:line="93" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="49"/></expr_stmt>
            }<pos:position pos:line="94" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="95" pos:column="13">DBPRINT0<pos:position pos:line="95" pos:column="21"/></name><argument_list pos:line="95" pos:column="21">(<argument><expr><literal type="string" pos:line="95" pos:column="22">"\n"<pos:position pos:line="95" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="28"/></expr_stmt>
            <for pos:line="96" pos:column="13">for <control pos:line="96" pos:column="17">(<init><expr><name pos:line="96" pos:column="18">i<pos:position pos:line="96" pos:column="19"/></name> <operator pos:line="96" pos:column="20">=<pos:position pos:line="96" pos:column="21"/></operator> <literal type="number" pos:line="96" pos:column="22">0<pos:position pos:line="96" pos:column="23"/></literal></expr>;<pos:position pos:line="96" pos:column="24"/></init> <condition><expr><name pos:line="96" pos:column="25">i<pos:position pos:line="96" pos:column="26"/></name> <operator pos:line="96" pos:column="27">&lt;<pos:position pos:line="96" pos:column="31"/></operator> <name pos:line="96" pos:column="29">free_length<pos:position pos:line="96" pos:column="40"/></name></expr>;<pos:position pos:line="96" pos:column="41"/></condition> <incr><expr><operator pos:line="96" pos:column="42">++<pos:position pos:line="96" pos:column="44"/></operator><name pos:line="96" pos:column="44">i<pos:position pos:line="96" pos:column="45"/></name></expr></incr>)<pos:position pos:line="96" pos:column="46"/></control> <block pos:line="96" pos:column="47">{
                <expr_stmt><expr><call><name pos:line="97" pos:column="17">DBPRINT1<pos:position pos:line="97" pos:column="25"/></name><argument_list pos:line="97" pos:column="25">(<argument><expr><literal type="string" pos:line="97" pos:column="26">"Spawning additional thread slot: %d\n"<pos:position pos:line="97" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="67">free_slots<pos:position pos:line="97" pos:column="77"/></name><index pos:line="97" pos:column="77">[<expr><name pos:line="97" pos:column="78">i<pos:position pos:line="97" pos:column="79"/></name></expr>]<pos:position pos:line="97" pos:column="80"/></index></name></expr></argument>)<pos:position pos:line="97" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="82"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="98" pos:column="17">make_child<pos:position pos:line="98" pos:column="27"/></name><argument_list pos:line="98" pos:column="27">(<argument><expr><name pos:line="98" pos:column="28">ap_server_conf<pos:position pos:line="98" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="98" pos:column="44">free_slots<pos:position pos:line="98" pos:column="54"/></name><index pos:line="98" pos:column="54">[<expr><name pos:line="98" pos:column="55">i<pos:position pos:line="98" pos:column="56"/></name></expr>]<pos:position pos:line="98" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="98" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="59"/></expr_stmt>
            }<pos:position pos:line="99" pos:column="14"/></block></for>
            <comment type="block" pos:line="100" pos:column="13">/* the next time around we want to spawn twice as many if this
            * wasn't good enough, but not if we've just done a graceful
            */</comment>
            <if pos:line="103" pos:column="13">if <condition pos:line="103" pos:column="16">(<expr><name pos:line="103" pos:column="17">hold_off_on_exponential_spawning<pos:position pos:line="103" pos:column="49"/></name></expr>)<pos:position pos:line="103" pos:column="50"/></condition><then pos:line="103" pos:column="50"> <block pos:line="103" pos:column="51">{
                <expr_stmt><expr><operator pos:line="104" pos:column="17">--<pos:position pos:line="104" pos:column="19"/></operator><name pos:line="104" pos:column="19">hold_off_on_exponential_spawning<pos:position pos:line="104" pos:column="51"/></name></expr>;<pos:position pos:line="104" pos:column="52"/></expr_stmt>
            }<pos:position pos:line="105" pos:column="14"/></block></then>
            <elseif pos:line="106" pos:column="13">else <if pos:line="106" pos:column="18">if <condition pos:line="106" pos:column="21">(<macro><name pos:line="106" pos:column="22">idle_spawn_rate<pos:position pos:line="106" pos:column="37"/></name></macro></condition></if></elseif></if></block></else></if></block></then></if></elseif></if></block></function></unit>
