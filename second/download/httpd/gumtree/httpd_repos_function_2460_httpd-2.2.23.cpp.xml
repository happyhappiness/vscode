<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2460_httpd-2.2.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">child_main<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">child_num_arg<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_pool_t<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">ptrans<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_allocator_t<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">allocator<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">status<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">i<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">ap_listen_rec<pos:position pos:line="7" pos:column="18"/></name> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type><name pos:line="7" pos:column="20">lr<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_pollset_t<pos:position pos:line="8" pos:column="18"/></name> <modifier pos:line="8" pos:column="19">*<pos:position pos:line="8" pos:column="20"/></modifier></type><name pos:line="8" pos:column="20">pollset<pos:position pos:line="8" pos:column="27"/></name></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">ap_sb_handle_t<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">sbh<pos:position pos:line="9" pos:column="24"/></name></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_bucket_alloc_t<pos:position pos:line="10" pos:column="23"/></name> <modifier pos:line="10" pos:column="24">*<pos:position pos:line="10" pos:column="25"/></modifier></type><name pos:line="10" pos:column="25">bucket_alloc<pos:position pos:line="10" pos:column="37"/></name></decl>;<pos:position pos:line="10" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">last_poll_idx<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><literal type="number" pos:line="11" pos:column="25">0<pos:position pos:line="11" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>

    <expr_stmt><expr><name pos:line="13" pos:column="5">mpm_state<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <name pos:line="13" pos:column="17">AP_MPMQ_STARTING<pos:position pos:line="13" pos:column="33"/></name></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt> <comment type="block" pos:line="13" pos:column="35">/* for benefit of any hooks that run as this
                                   * child initializes
                                   */</comment>

    <expr_stmt><expr><name pos:line="17" pos:column="5">my_child_num<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <name pos:line="17" pos:column="20">child_num_arg<pos:position pos:line="17" pos:column="33"/></name></expr>;<pos:position pos:line="17" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">ap_my_pid<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <call><name pos:line="18" pos:column="17">getpid<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">()<pos:position pos:line="18" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">requests_this_child<pos:position pos:line="19" pos:column="24"/></name> <operator pos:line="19" pos:column="25">=<pos:position pos:line="19" pos:column="26"/></operator> <literal type="number" pos:line="19" pos:column="27">0<pos:position pos:line="19" pos:column="28"/></literal></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">ap_fatal_signal_child_setup<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><name pos:line="21" pos:column="33">ap_server_conf<pos:position pos:line="21" pos:column="47"/></name></expr></argument>)<pos:position pos:line="21" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="49"/></expr_stmt>

    <comment type="block" pos:line="23" pos:column="5">/* Get a sub context for global allocations in this child, so that
     * we can have cleanups occur when the child exits.
     */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">apr_allocator_create<pos:position pos:line="26" pos:column="25"/></name><argument_list pos:line="26" pos:column="25">(<argument><expr><operator pos:line="26" pos:column="26">&amp;<pos:position pos:line="26" pos:column="31"/></operator><name pos:line="26" pos:column="27">allocator<pos:position pos:line="26" pos:column="36"/></name></expr></argument>)<pos:position pos:line="26" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">apr_allocator_max_free_set<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">allocator<pos:position pos:line="27" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="43">ap_max_mem_free<pos:position pos:line="27" pos:column="58"/></name></expr></argument>)<pos:position pos:line="27" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">apr_pool_create_ex<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><operator pos:line="28" pos:column="24">&amp;<pos:position pos:line="28" pos:column="29"/></operator><name pos:line="28" pos:column="25">pchild<pos:position pos:line="28" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="33">pconf<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="40">NULL<pos:position pos:line="28" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="46">allocator<pos:position pos:line="28" pos:column="55"/></name></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">apr_allocator_owner_set<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><name pos:line="29" pos:column="29">allocator<pos:position pos:line="29" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="40">pchild<pos:position pos:line="29" pos:column="46"/></name></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="31" pos:column="5">apr_pool_create<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><operator pos:line="31" pos:column="21">&amp;<pos:position pos:line="31" pos:column="26"/></operator><name pos:line="31" pos:column="22">ptrans<pos:position pos:line="31" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="30">pchild<pos:position pos:line="31" pos:column="36"/></name></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">apr_pool_tag<pos:position pos:line="32" pos:column="17"/></name><argument_list pos:line="32" pos:column="17">(<argument><expr><name pos:line="32" pos:column="18">ptrans<pos:position pos:line="32" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="26">"transaction"<pos:position pos:line="32" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>

    <comment type="block" pos:line="34" pos:column="5">/* needs to be done before we switch UIDs so we have permissions */</comment>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">ap_reopen_scoreboard<pos:position pos:line="35" pos:column="25"/></name><argument_list pos:line="35" pos:column="25">(<argument><expr><name pos:line="35" pos:column="26">pchild<pos:position pos:line="35" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="34">NULL<pos:position pos:line="35" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="40">0<pos:position pos:line="35" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="36" pos:column="5">status<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <call><name pos:line="36" pos:column="14">apr_proc_mutex_child_init<pos:position pos:line="36" pos:column="39"/></name><argument_list pos:line="36" pos:column="39">(<argument><expr><operator pos:line="36" pos:column="40">&amp;<pos:position pos:line="36" pos:column="45"/></operator><name pos:line="36" pos:column="41">accept_mutex<pos:position pos:line="36" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="55">ap_lock_fname<pos:position pos:line="36" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="70">pchild<pos:position pos:line="36" pos:column="76"/></name></expr></argument>)<pos:position pos:line="36" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="78"/></expr_stmt>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">status<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">!=<pos:position pos:line="37" pos:column="18"/></operator> <name pos:line="37" pos:column="19">APR_SUCCESS<pos:position pos:line="37" pos:column="30"/></name></expr>)<pos:position pos:line="37" pos:column="31"/></condition><then pos:line="37" pos:column="31"> <block pos:line="37" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">ap_log_error<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name pos:line="38" pos:column="22">APLOG_MARK<pos:position pos:line="38" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="34">APLOG_EMERG<pos:position pos:line="38" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="47">status<pos:position pos:line="38" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="55">ap_server_conf<pos:position pos:line="38" pos:column="69"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="39" pos:column="22">"Couldn't initialize cross-process lock in child "<pos:position pos:line="39" pos:column="72"/></literal>
                     <literal type="string" pos:line="40" pos:column="22">"(%s) (%d)"<pos:position pos:line="40" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="35">ap_lock_fname<pos:position pos:line="40" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="50">ap_accept_lock_mech<pos:position pos:line="40" pos:column="69"/></name></expr></argument>)<pos:position pos:line="40" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">clean_child_exit<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">(<argument><expr><name pos:line="41" pos:column="26">APEXIT_CHILDFATAL<pos:position pos:line="41" pos:column="43"/></name></expr></argument>)<pos:position pos:line="41" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><call><name pos:line="44" pos:column="9">unixd_setup_child<pos:position pos:line="44" pos:column="26"/></name><argument_list pos:line="44" pos:column="26">()<pos:position pos:line="44" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="29"/></condition><then pos:line="44" pos:column="29"> <block pos:line="44" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">clean_child_exit<pos:position pos:line="45" pos:column="25"/></name><argument_list pos:line="45" pos:column="25">(<argument><expr><name pos:line="45" pos:column="26">APEXIT_CHILDFATAL<pos:position pos:line="45" pos:column="43"/></name></expr></argument>)<pos:position pos:line="45" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="48" pos:column="5">ap_run_child_init<pos:position pos:line="48" pos:column="22"/></name><argument_list pos:line="48" pos:column="22">(<argument><expr><name pos:line="48" pos:column="23">pchild<pos:position pos:line="48" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="31">ap_server_conf<pos:position pos:line="48" pos:column="45"/></name></expr></argument>)<pos:position pos:line="48" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="47"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="50" pos:column="5">ap_create_sb_handle<pos:position pos:line="50" pos:column="24"/></name><argument_list pos:line="50" pos:column="24">(<argument><expr><operator pos:line="50" pos:column="25">&amp;<pos:position pos:line="50" pos:column="30"/></operator><name pos:line="50" pos:column="26">sbh<pos:position pos:line="50" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="31">pchild<pos:position pos:line="50" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="39">my_child_num<pos:position pos:line="50" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="53">0<pos:position pos:line="50" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="56"/></expr_stmt>

    <expr_stmt><expr><operator pos:line="52" pos:column="5">(<pos:position pos:line="52" pos:column="6"/></operator><name pos:line="52" pos:column="6">void<pos:position pos:line="52" pos:column="10"/></name><operator pos:line="52" pos:column="10">)<pos:position pos:line="52" pos:column="11"/></operator> <call><name pos:line="52" pos:column="12">ap_update_child_status<pos:position pos:line="52" pos:column="34"/></name><argument_list pos:line="52" pos:column="34">(<argument><expr><name pos:line="52" pos:column="35">sbh<pos:position pos:line="52" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="40">SERVER_READY<pos:position pos:line="52" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="54">(<pos:position pos:line="52" pos:column="55"/></operator><name pos:line="52" pos:column="55">request_rec<pos:position pos:line="52" pos:column="66"/></name> <operator pos:line="52" pos:column="67">*<pos:position pos:line="52" pos:column="68"/></operator><operator pos:line="52" pos:column="68">)<pos:position pos:line="52" pos:column="69"/></operator> <name pos:line="52" pos:column="70">NULL<pos:position pos:line="52" pos:column="74"/></name></expr></argument>)<pos:position pos:line="52" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="76"/></expr_stmt>

    <comment type="block" pos:line="54" pos:column="5">/* Set up the pollfd array */</comment>
    <expr_stmt><expr><name pos:line="55" pos:column="5">status<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">=<pos:position pos:line="55" pos:column="13"/></operator> <call><name pos:line="55" pos:column="14">apr_pollset_create<pos:position pos:line="55" pos:column="32"/></name><argument_list pos:line="55" pos:column="32">(<argument><expr><operator pos:line="55" pos:column="33">&amp;<pos:position pos:line="55" pos:column="38"/></operator><name pos:line="55" pos:column="34">pollset<pos:position pos:line="55" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="43">num_listensocks<pos:position pos:line="55" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="60">pchild<pos:position pos:line="55" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="68">0<pos:position pos:line="55" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="71"/></expr_stmt>
    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><name pos:line="56" pos:column="9">status<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">!=<pos:position pos:line="56" pos:column="18"/></operator> <name pos:line="56" pos:column="19">APR_SUCCESS<pos:position pos:line="56" pos:column="30"/></name></expr>)<pos:position pos:line="56" pos:column="31"/></condition><then pos:line="56" pos:column="31"> <block pos:line="56" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">ap_log_error<pos:position pos:line="57" pos:column="21"/></name><argument_list pos:line="57" pos:column="21">(<argument><expr><name pos:line="57" pos:column="22">APLOG_MARK<pos:position pos:line="57" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="34">APLOG_EMERG<pos:position pos:line="57" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="47">status<pos:position pos:line="57" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="55">ap_server_conf<pos:position pos:line="57" pos:column="69"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="58" pos:column="22">"Couldn't create pollset in child; check system or user limits"<pos:position pos:line="58" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="87"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">clean_child_exit<pos:position pos:line="59" pos:column="25"/></name><argument_list pos:line="59" pos:column="25">(<argument><expr><name pos:line="59" pos:column="26">APEXIT_CHILDSICK<pos:position pos:line="59" pos:column="42"/></name></expr></argument>)<pos:position pos:line="59" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="44"/></expr_stmt> <comment type="block" pos:line="59" pos:column="45">/* assume temporary resource issue */</comment>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>

    <for pos:line="62" pos:column="5">for <control pos:line="62" pos:column="9">(<init><expr><name pos:line="62" pos:column="10">lr<pos:position pos:line="62" pos:column="12"/></name> <operator pos:line="62" pos:column="13">=<pos:position pos:line="62" pos:column="14"/></operator> <name pos:line="62" pos:column="15">ap_listeners<pos:position pos:line="62" pos:column="27"/></name></expr><operator pos:line="62" pos:column="27">,<pos:position pos:line="62" pos:column="28"/></operator> <expr><name pos:line="62" pos:column="29">i<pos:position pos:line="62" pos:column="30"/></name> <operator pos:line="62" pos:column="31">=<pos:position pos:line="62" pos:column="32"/></operator> <name pos:line="62" pos:column="33">num_listensocks<pos:position pos:line="62" pos:column="48"/></name></expr>;<pos:position pos:line="62" pos:column="49"/></init> <condition><expr><name pos:line="62" pos:column="50">i<pos:position pos:line="62" pos:column="51"/></name><operator pos:line="62" pos:column="51">--<pos:position pos:line="62" pos:column="53"/></operator></expr>;<pos:position pos:line="62" pos:column="54"/></condition> <incr><expr><name pos:line="62" pos:column="55">lr<pos:position pos:line="62" pos:column="57"/></name> <operator pos:line="62" pos:column="58">=<pos:position pos:line="62" pos:column="59"/></operator> <name><name pos:line="62" pos:column="60">lr<pos:position pos:line="62" pos:column="62"/></name><operator pos:line="62" pos:column="62">-&gt;<pos:position pos:line="62" pos:column="67"/></operator><name pos:line="62" pos:column="64">next<pos:position pos:line="62" pos:column="68"/></name></name></expr></incr>)<pos:position pos:line="62" pos:column="69"/></control> <block pos:line="62" pos:column="70">{
        <decl_stmt><decl><type><name pos:line="63" pos:column="9">apr_pollfd_t<pos:position pos:line="63" pos:column="21"/></name></type> <name pos:line="63" pos:column="22">pfd<pos:position pos:line="63" pos:column="25"/></name> <init pos:line="63" pos:column="26">= <expr><block pos:line="63" pos:column="28">{ <expr><literal type="number" pos:line="63" pos:column="30">0<pos:position pos:line="63" pos:column="31"/></literal></expr> }<pos:position pos:line="63" pos:column="33"/></block></expr></init></decl>;<pos:position pos:line="63" pos:column="34"/></decl_stmt>

        <expr_stmt><expr><name><name pos:line="65" pos:column="9">pfd<pos:position pos:line="65" pos:column="12"/></name><operator pos:line="65" pos:column="12">.<pos:position pos:line="65" pos:column="13"/></operator><name pos:line="65" pos:column="13">desc_type<pos:position pos:line="65" pos:column="22"/></name></name> <operator pos:line="65" pos:column="23">=<pos:position pos:line="65" pos:column="24"/></operator> <name pos:line="65" pos:column="25">APR_POLL_SOCKET<pos:position pos:line="65" pos:column="40"/></name></expr>;<pos:position pos:line="65" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="66" pos:column="9">pfd<pos:position pos:line="66" pos:column="12"/></name><operator pos:line="66" pos:column="12">.<pos:position pos:line="66" pos:column="13"/></operator><name pos:line="66" pos:column="13">desc<pos:position pos:line="66" pos:column="17"/></name><operator pos:line="66" pos:column="17">.<pos:position pos:line="66" pos:column="18"/></operator><name pos:line="66" pos:column="18">s<pos:position pos:line="66" pos:column="19"/></name></name> <operator pos:line="66" pos:column="20">=<pos:position pos:line="66" pos:column="21"/></operator> <name><name pos:line="66" pos:column="22">lr<pos:position pos:line="66" pos:column="24"/></name><operator pos:line="66" pos:column="24">-&gt;<pos:position pos:line="66" pos:column="29"/></operator><name pos:line="66" pos:column="26">sd<pos:position pos:line="66" pos:column="28"/></name></name></expr>;<pos:position pos:line="66" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="67" pos:column="9">pfd<pos:position pos:line="67" pos:column="12"/></name><operator pos:line="67" pos:column="12">.<pos:position pos:line="67" pos:column="13"/></operator><name pos:line="67" pos:column="13">reqevents<pos:position pos:line="67" pos:column="22"/></name></name> <operator pos:line="67" pos:column="23">=<pos:position pos:line="67" pos:column="24"/></operator> <name pos:line="67" pos:column="25">APR_POLLIN<pos:position pos:line="67" pos:column="35"/></name></expr>;<pos:position pos:line="67" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="68" pos:column="9">pfd<pos:position pos:line="68" pos:column="12"/></name><operator pos:line="68" pos:column="12">.<pos:position pos:line="68" pos:column="13"/></operator><name pos:line="68" pos:column="13">client_data<pos:position pos:line="68" pos:column="24"/></name></name> <operator pos:line="68" pos:column="25">=<pos:position pos:line="68" pos:column="26"/></operator> <name pos:line="68" pos:column="27">lr<pos:position pos:line="68" pos:column="29"/></name></expr>;<pos:position pos:line="68" pos:column="30"/></expr_stmt>

        <comment type="block" pos:line="70" pos:column="9">/* ### check the status */</comment>
        <expr_stmt><expr><operator pos:line="71" pos:column="9">(<pos:position pos:line="71" pos:column="10"/></operator><name pos:line="71" pos:column="10">void<pos:position pos:line="71" pos:column="14"/></name><operator pos:line="71" pos:column="14">)<pos:position pos:line="71" pos:column="15"/></operator> <call><name pos:line="71" pos:column="16">apr_pollset_add<pos:position pos:line="71" pos:column="31"/></name><argument_list pos:line="71" pos:column="31">(<argument><expr><name pos:line="71" pos:column="32">pollset<pos:position pos:line="71" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="41">&amp;<pos:position pos:line="71" pos:column="46"/></operator><name pos:line="71" pos:column="42">pfd<pos:position pos:line="71" pos:column="45"/></name></expr></argument>)<pos:position pos:line="71" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="72" pos:column="6"/></block></for>

    <expr_stmt><expr><name pos:line="74" pos:column="5">mpm_state<pos:position pos:line="74" pos:column="14"/></name> <operator pos:line="74" pos:column="15">=<pos:position pos:line="74" pos:column="16"/></operator> <name pos:line="74" pos:column="17">AP_MPMQ_RUNNING<pos:position pos:line="74" pos:column="32"/></name></expr>;<pos:position pos:line="74" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><name pos:line="76" pos:column="5">bucket_alloc<pos:position pos:line="76" pos:column="17"/></name> <operator pos:line="76" pos:column="18">=<pos:position pos:line="76" pos:column="19"/></operator> <call><name pos:line="76" pos:column="20">apr_bucket_alloc_create<pos:position pos:line="76" pos:column="43"/></name><argument_list pos:line="76" pos:column="43">(<argument><expr><name pos:line="76" pos:column="44">pchild<pos:position pos:line="76" pos:column="50"/></name></expr></argument>)<pos:position pos:line="76" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="52"/></expr_stmt>

    <comment type="block" pos:line="78" pos:column="5">/* die_now is set when AP_SIG_GRACEFUL is received in the child;
     * shutdown_pending is set when SIGTERM is received when running
     * in single process mode.  */</comment>
    <while pos:line="81" pos:column="5">while <condition pos:line="81" pos:column="11">(<expr><operator pos:line="81" pos:column="12">!<pos:position pos:line="81" pos:column="13"/></operator><name pos:line="81" pos:column="13">die_now<pos:position pos:line="81" pos:column="20"/></name> <operator pos:line="81" pos:column="21">&amp;&amp;<pos:position pos:line="81" pos:column="31"/></operator> <operator pos:line="81" pos:column="24">!<pos:position pos:line="81" pos:column="25"/></operator><name pos:line="81" pos:column="25">shutdown_pending<pos:position pos:line="81" pos:column="41"/></name></expr>)<pos:position pos:line="81" pos:column="42"/></condition> <block pos:line="81" pos:column="43">{
        <decl_stmt><decl><type><name pos:line="82" pos:column="9">conn_rec<pos:position pos:line="82" pos:column="17"/></name> <modifier pos:line="82" pos:column="18">*<pos:position pos:line="82" pos:column="19"/></modifier></type><name pos:line="82" pos:column="19">current_conn<pos:position pos:line="82" pos:column="31"/></name></decl>;<pos:position pos:line="82" pos:column="32"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="83" pos:column="9">void<pos:position pos:line="83" pos:column="13"/></name> <modifier pos:line="83" pos:column="14">*<pos:position pos:line="83" pos:column="15"/></modifier></type><name pos:line="83" pos:column="15">csd<pos:position pos:line="83" pos:column="18"/></name></decl>;<pos:position pos:line="83" pos:column="19"/></decl_stmt>

        <comment type="block" pos:line="85" pos:column="9">/*
         * (Re)initialize this child to a pre-connection state.
         */</comment>

        <expr_stmt><expr><call><name pos:line="89" pos:column="9">apr_pool_clear<pos:position pos:line="89" pos:column="23"/></name><argument_list pos:line="89" pos:column="23">(<argument><expr><name pos:line="89" pos:column="24">ptrans<pos:position pos:line="89" pos:column="30"/></name></expr></argument>)<pos:position pos:line="89" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="32"/></expr_stmt>

        <if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><operator pos:line="91" pos:column="13">(<pos:position pos:line="91" pos:column="14"/></operator><name pos:line="91" pos:column="14">ap_max_requests_per_child<pos:position pos:line="91" pos:column="39"/></name> <operator pos:line="91" pos:column="40">&gt;<pos:position pos:line="91" pos:column="44"/></operator> <literal type="number" pos:line="91" pos:column="42">0<pos:position pos:line="91" pos:column="43"/></literal>
             <operator pos:line="92" pos:column="14">&amp;&amp;<pos:position pos:line="92" pos:column="24"/></operator> <name pos:line="92" pos:column="17">requests_this_child<pos:position pos:line="92" pos:column="36"/></name><operator pos:line="92" pos:column="36">++<pos:position pos:line="92" pos:column="38"/></operator> <operator pos:line="92" pos:column="39">&gt;=<pos:position pos:line="92" pos:column="44"/></operator> <name pos:line="92" pos:column="42">ap_max_requests_per_child<pos:position pos:line="92" pos:column="67"/></name><operator pos:line="92" pos:column="67">)<pos:position pos:line="92" pos:column="68"/></operator></expr>)<pos:position pos:line="92" pos:column="69"/></condition><then pos:line="92" pos:column="69"> <block pos:line="92" pos:column="70">{
            <expr_stmt><expr><call><name pos:line="93" pos:column="13">clean_child_exit<pos:position pos:line="93" pos:column="29"/></name><argument_list pos:line="93" pos:column="29">(<argument><expr><literal type="number" pos:line="93" pos:column="30">0<pos:position pos:line="93" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="33"/></expr_stmt>
        }<pos:position pos:line="94" pos:column="10"/></block></then></if>

        <expr_stmt><expr><operator pos:line="96" pos:column="9">(<pos:position pos:line="96" pos:column="10"/></operator><name pos:line="96" pos:column="10">void<pos:position pos:line="96" pos:column="14"/></name><operator pos:line="96" pos:column="14">)<pos:position pos:line="96" pos:column="15"/></operator> <call><name pos:line="96" pos:column="16">ap_update_child_status<pos:position pos:line="96" pos:column="38"/></name><argument_list pos:line="96" pos:column="38">(<argument><expr><name pos:line="96" pos:column="39">sbh<pos:position pos:line="96" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="44">SERVER_READY<pos:position pos:line="96" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="58">(<pos:position pos:line="96" pos:column="59"/></operator><name pos:line="96" pos:column="59">request_rec<pos:position pos:line="96" pos:column="70"/></name> <operator pos:line="96" pos:column="71">*<pos:position pos:line="96" pos:column="72"/></operator><operator pos:line="96" pos:column="72">)<pos:position pos:line="96" pos:column="73"/></operator> <name pos:line="96" pos:column="74">NULL<pos:position pos:line="96" pos:column="78"/></name></expr></argument>)<pos:position pos:line="96" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="80"/></expr_stmt>

        <comment type="block" pos:line="98" pos:column="9">/*
         * Wait for an acceptable connection to arrive.
         */</comment>

        <comment type="block" pos:line="102" pos:column="9">/* Lock around "accept", if necessary */</comment>
        <expr_stmt><expr><call><name pos:line="103" pos:column="9">SAFE_ACCEPT<pos:position pos:line="103" pos:column="20"/></name><argument_list pos:line="103" pos:column="20">(<argument><expr><call><name pos:line="103" pos:column="21">accept_mutex_on<pos:position pos:line="103" pos:column="36"/></name><argument_list pos:line="103" pos:column="36">()<pos:position pos:line="103" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="103" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="40"/></expr_stmt>

        <if pos:line="105" pos:column="9">if <condition pos:line="105" pos:column="12">(<expr><name pos:line="105" pos:column="13">num_listensocks<pos:position pos:line="105" pos:column="28"/></name> <operator pos:line="105" pos:column="29">==<pos:position pos:line="105" pos:column="31"/></operator> <literal type="number" pos:line="105" pos:column="32">1<pos:position pos:line="105" pos:column="33"/></literal></expr>)<pos:position pos:line="105" pos:column="34"/></condition><then pos:line="105" pos:column="34"> <block pos:line="105" pos:column="35">{
            <comment type="block" pos:line="106" pos:column="13">/* There is only one listener record, so refer to that one. */</comment>
            <expr_stmt><expr><name pos:line="107" pos:column="13">lr<pos:position pos:line="107" pos:column="15"/></name> <operator pos:line="107" pos:column="16">=<pos:position pos:line="107" pos:column="17"/></operator> <name pos:line="107" pos:column="18">ap_listeners<pos:position pos:line="107" pos:column="30"/></name></expr>;<pos:position pos:line="107" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="108" pos:column="10"/></block></then>
        <else pos:line="109" pos:column="9">else <block pos:line="109" pos:column="14">{
            <comment type="block" pos:line="110" pos:column="13">/* multiple listening sockets - need to poll */</comment>
            <for pos:line="111" pos:column="13">for <control pos:line="111" pos:column="17">(<init pos:line="111" pos:column="18">;<pos:position pos:line="111" pos:column="19"/></init><condition pos:line="111" pos:column="19">;<pos:position pos:line="111" pos:column="20"/></condition><incr/>)<pos:position pos:line="111" pos:column="21"/></control> <block pos:line="111" pos:column="22">{
                <decl_stmt><decl><type><name pos:line="112" pos:column="17">apr_int32_t<pos:position pos:line="112" pos:column="28"/></name></type> <name pos:line="112" pos:column="29">numdesc<pos:position pos:line="112" pos:column="36"/></name></decl>;<pos:position pos:line="112" pos:column="37"/></decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="113" pos:column="17">const<pos:position pos:line="113" pos:column="22"/></specifier> <name pos:line="113" pos:column="23">apr_pollfd_t<pos:position pos:line="113" pos:column="35"/></name> <modifier pos:line="113" pos:column="36">*<pos:position pos:line="113" pos:column="37"/></modifier></type><name pos:line="113" pos:column="37">pdesc<pos:position pos:line="113" pos:column="42"/></name></decl>;<pos:position pos:line="113" pos:column="43"/></decl_stmt>

                <comment type="block" pos:line="115" pos:column="17">/* check for termination first so we don't sleep for a while in
                 * poll if already signalled
                 */</comment>
                <if pos:line="118" pos:column="17">if <condition pos:line="118" pos:column="20">(<expr><name pos:line="118" pos:column="21">one_process<pos:position pos:line="118" pos:column="32"/></name> <operator pos:line="118" pos:column="33">&amp;&amp;<pos:position pos:line="118" pos:column="43"/></operator> <name pos:line="118" pos:column="36">shutdown_pending<pos:position pos:line="118" pos:column="52"/></name></expr>)<pos:position pos:line="118" pos:column="53"/></condition><then pos:line="118" pos:column="53"> <block pos:line="118" pos:column="54">{
                    <expr_stmt><expr><call><name pos:line="119" pos:column="21">SAFE_ACCEPT<pos:position pos:line="119" pos:column="32"/></name><argument_list pos:line="119" pos:column="32">(<argument><expr><call><name pos:line="119" pos:column="33">accept_mutex_off<pos:position pos:line="119" pos:column="49"/></name><argument_list pos:line="119" pos:column="49">()<pos:position pos:line="119" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="119" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="53"/></expr_stmt>
                    <return pos:line="120" pos:column="21">return;<pos:position pos:line="120" pos:column="28"/></return>
                }<pos:position pos:line="121" pos:column="18"/></block></then>
                <elseif pos:line="122" pos:column="17">else <if pos:line="122" pos:column="22">if <condition pos:line="122" pos:column="25">(<expr><name pos:line="122" pos:column="26">die_now<pos:position pos:line="122" pos:column="33"/></name></expr>)<pos:position pos:line="122" pos:column="34"/></condition><then pos:line="122" pos:column="34"> <block pos:line="122" pos:column="35">{
                    <comment type="block" pos:line="123" pos:column="21">/* In graceful stop/restart; drop the mutex
                     * and terminate the child. */</comment>
                    <expr_stmt><expr><call><name pos:line="125" pos:column="21">SAFE_ACCEPT<pos:position pos:line="125" pos:column="32"/></name><argument_list pos:line="125" pos:column="32">(<argument><expr><call><name pos:line="125" pos:column="33">accept_mutex_off<pos:position pos:line="125" pos:column="49"/></name><argument_list pos:line="125" pos:column="49">()<pos:position pos:line="125" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="125" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="53"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="126" pos:column="21">clean_child_exit<pos:position pos:line="126" pos:column="37"/></name><argument_list pos:line="126" pos:column="37">(<argument><expr><literal type="number" pos:line="126" pos:column="38">0<pos:position pos:line="126" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="41"/></expr_stmt>
                }<pos:position pos:line="127" pos:column="18"/></block></then></if></elseif></if>
                <comment type="block" pos:line="128" pos:column="17">/* timeout == 10 seconds to avoid a hang at graceful restart/stop
                 * caused by the closing of sockets by the signal handler
                 */</comment>
                <expr_stmt><expr><name pos:line="131" pos:column="17">status<pos:position pos:line="131" pos:column="23"/></name> <operator pos:line="131" pos:column="24">=<pos:position pos:line="131" pos:column="25"/></operator> <call><name pos:line="131" pos:column="26">apr_pollset_poll<pos:position pos:line="131" pos:column="42"/></name><argument_list pos:line="131" pos:column="42">(<argument><expr><name pos:line="131" pos:column="43">pollset<pos:position pos:line="131" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="131" pos:column="52">apr_time_from_sec<pos:position pos:line="131" pos:column="69"/></name><argument_list pos:line="131" pos:column="69">(<argument><expr><literal type="number" pos:line="131" pos:column="70">10<pos:position pos:line="131" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="73"/></argument_list></call></expr></argument>, 
                                          <argument><expr><operator pos:line="132" pos:column="43">&amp;<pos:position pos:line="132" pos:column="48"/></operator><name pos:line="132" pos:column="44">numdesc<pos:position pos:line="132" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="132" pos:column="53">&amp;<pos:position pos:line="132" pos:column="58"/></operator><name pos:line="132" pos:column="54">pdesc<pos:position pos:line="132" pos:column="59"/></name></expr></argument>)<pos:position pos:line="132" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="61"/></expr_stmt>
                <if pos:line="133" pos:column="17">if <condition pos:line="133" pos:column="20">(<expr><name pos:line="133" pos:column="21">status<pos:position pos:line="133" pos:column="27"/></name> <operator pos:line="133" pos:column="28">!=<pos:position pos:line="133" pos:column="30"/></operator> <name pos:line="133" pos:column="31">APR_SUCCESS<pos:position pos:line="133" pos:column="42"/></name></expr>)<pos:position pos:line="133" pos:column="43"/></condition><then pos:line="133" pos:column="43"> <block pos:line="133" pos:column="44">{
                    <if pos:line="134" pos:column="21">if <condition pos:line="134" pos:column="24">(<expr><call><name pos:line="134" pos:column="25">APR_STATUS_IS_TIMEUP<pos:position pos:line="134" pos:column="45"/></name><argument_list pos:line="134" pos:column="45">(<argument><expr><name pos:line="134" pos:column="46">status<pos:position pos:line="134" pos:column="52"/></name></expr></argument>)<pos:position pos:line="134" pos:column="53"/></argument_list></call> <operator pos:line="134" pos:column="54">||<pos:position pos:line="134" pos:column="56"/></operator>
                        <call><name pos:line="135" pos:column="25">APR_STATUS_IS_EINTR<pos:position pos:line="135" pos:column="44"/></name><argument_list pos:line="135" pos:column="44">(<argument><expr><name pos:line="135" pos:column="45">status<pos:position pos:line="135" pos:column="51"/></name></expr></argument>)<pos:position pos:line="135" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="135" pos:column="53"/></condition><then pos:line="135" pos:column="53"> <block pos:line="135" pos:column="54">{
                        <continue pos:line="136" pos:column="25">continue;<pos:position pos:line="136" pos:column="34"/></continue>
                    }<pos:position pos:line="137" pos:column="22"/></block></then></if>
                    <comment type="block" pos:line="138" pos:column="21">/* Single Unix documents select as returning errnos
                     * EBADF, EINTR, and EINVAL... and in none of those
                     * cases does it make sense to continue.  In fact
                     * on Linux 2.0.x we seem to end up with EFAULT
                     * occasionally, and we'd loop forever due to it.
                     */</comment>
                    <expr_stmt><expr><call><name pos:line="144" pos:column="21">ap_log_error<pos:position pos:line="144" pos:column="33"/></name><argument_list pos:line="144" pos:column="33">(<argument><expr><name pos:line="144" pos:column="34">APLOG_MARK<pos:position pos:line="144" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="46">APLOG_ERR<pos:position pos:line="144" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="57">status<pos:position pos:line="144" pos:column="63"/></name></expr></argument>,
                                 <argument><expr><name pos:line="145" pos:column="34">ap_server_conf<pos:position pos:line="145" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="145" pos:column="50">"apr_pollset_poll: (listen)"<pos:position pos:line="145" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="80"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="146" pos:column="21">SAFE_ACCEPT<pos:position pos:line="146" pos:column="32"/></name><argument_list pos:line="146" pos:column="32">(<argument><expr><call><name pos:line="146" pos:column="33">accept_mutex_off<pos:position pos:line="146" pos:column="49"/></name><argument_list pos:line="146" pos:column="49">()<pos:position pos:line="146" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="146" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="53"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="147" pos:column="21">clean_child_exit<pos:position pos:line="147" pos:column="37"/></name><argument_list pos:line="147" pos:column="37">(<argument><expr><name pos:line="147" pos:column="38">APEXIT_CHILDSICK<pos:position pos:line="147" pos:column="54"/></name></expr></argument>)<pos:position pos:line="147" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="56"/></expr_stmt>
                }<pos:position pos:line="148" pos:column="18"/></block></then></if>

                <comment type="block" pos:line="150" pos:column="17">/* We can always use pdesc[0], but sockets at position N
                 * could end up completely starved of attention in a very
                 * busy server. Therefore, we round-robin across the
                 * returned set of descriptors. While it is possible that
                 * the returned set of descriptors might flip around and
                 * continue to starve some sockets, we happen to know the
                 * internal pollset implementation retains ordering
                 * stability of the sockets. Thus, the round-robin should
                 * ensure that a socket will eventually be serviced.
                 */</comment>
                <if pos:line="160" pos:column="17">if <condition pos:line="160" pos:column="20">(<expr><name pos:line="160" pos:column="21">last_poll_idx<pos:position pos:line="160" pos:column="34"/></name> <operator pos:line="160" pos:column="35">&gt;=<pos:position pos:line="160" pos:column="40"/></operator> <name pos:line="160" pos:column="38">numdesc<pos:position pos:line="160" pos:column="45"/></name></expr>)<pos:position pos:line="160" pos:column="46"/></condition><then pos:line="160" pos:column="46">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="161" pos:column="21">last_poll_idx<pos:position pos:line="161" pos:column="34"/></name> <operator pos:line="161" pos:column="35">=<pos:position pos:line="161" pos:column="36"/></operator> <literal type="number" pos:line="161" pos:column="37">0<pos:position pos:line="161" pos:column="38"/></literal></expr>;<pos:position pos:line="161" pos:column="39"/></expr_stmt></block></then></if>

                <comment type="block" pos:line="163" pos:column="17">/* Grab a listener record from the client_data of the poll
                 * descriptor, and advance our saved index to round-robin
                 * the next fetch.
                 *
                 * ### hmm... this descriptor might have POLLERR rather
                 * ### than POLLIN
                 */</comment>
                <expr_stmt><expr><name pos:line="170" pos:column="17">lr<pos:position pos:line="170" pos:column="19"/></name> <operator pos:line="170" pos:column="20">=<pos:position pos:line="170" pos:column="21"/></operator> <name><name pos:line="170" pos:column="22">pdesc<pos:position pos:line="170" pos:column="27"/></name><index pos:line="170" pos:column="27">[<expr><name pos:line="170" pos:column="28">last_poll_idx<pos:position pos:line="170" pos:column="41"/></name><operator pos:line="170" pos:column="41">++<pos:position pos:line="170" pos:column="43"/></operator></expr>]<pos:position pos:line="170" pos:column="44"/></index></name><operator pos:line="170" pos:column="44">.<pos:position pos:line="170" pos:column="45"/></operator><name pos:line="170" pos:column="45">client_data<pos:position pos:line="170" pos:column="56"/></name></expr>;<pos:position pos:line="170" pos:column="57"/></expr_stmt>
                <goto pos:line="171" pos:column="17">goto <name pos:line="171" pos:column="22">got_fd<pos:position pos:line="171" pos:column="28"/></name>;<pos:position pos:line="171" pos:column="29"/></goto>
            }<pos:position pos:line="172" pos:column="14"/></block></for>
        }<pos:position pos:line="173" pos:column="10"/></block></else></if>
    <label><name pos:line="174" pos:column="5">got_fd<pos:position pos:line="174" pos:column="11"/></name>:<pos:position pos:line="174" pos:column="12"/></label>
        <comment type="block" pos:line="175" pos:column="9">/* if we accept() something we don't want to die, so we have to
         * defer the exit
         */</comment>
        <expr_stmt><expr><name pos:line="178" pos:column="9">status<pos:position pos:line="178" pos:column="15"/></name> <operator pos:line="178" pos:column="16">=<pos:position pos:line="178" pos:column="17"/></operator> <call><name><name pos:line="178" pos:column="18">lr<pos:position pos:line="178" pos:column="20"/></name><operator pos:line="178" pos:column="20">-&gt;<pos:position pos:line="178" pos:column="25"/></operator><name pos:line="178" pos:column="22">accept_func<pos:position pos:line="178" pos:column="33"/></name></name><argument_list pos:line="178" pos:column="33">(<argument><expr><operator pos:line="178" pos:column="34">&amp;<pos:position pos:line="178" pos:column="39"/></operator><name pos:line="178" pos:column="35">csd<pos:position pos:line="178" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="40">lr<pos:position pos:line="178" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="44">ptrans<pos:position pos:line="178" pos:column="50"/></name></expr></argument>)<pos:position pos:line="178" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="52"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="180" pos:column="9">SAFE_ACCEPT<pos:position pos:line="180" pos:column="20"/></name><argument_list pos:line="180" pos:column="20">(<argument><expr><call><name pos:line="180" pos:column="21">accept_mutex_off<pos:position pos:line="180" pos:column="37"/></name><argument_list pos:line="180" pos:column="37">()<pos:position pos:line="180" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="180" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="41"/></expr_stmt>      <comment type="block" pos:line="180" pos:column="47">/* unlock after "accept" */</comment>

        <if pos:line="182" pos:column="9">if <condition pos:line="182" pos:column="12">(<expr><name pos:line="182" pos:column="13">status<pos:position pos:line="182" pos:column="19"/></name> <operator pos:line="182" pos:column="20">==<pos:position pos:line="182" pos:column="22"/></operator> <name pos:line="182" pos:column="23">APR_EGENERAL<pos:position pos:line="182" pos:column="35"/></name></expr>)<pos:position pos:line="182" pos:column="36"/></condition><then pos:line="182" pos:column="36"> <block pos:line="182" pos:column="37">{
            <comment type="block" pos:line="183" pos:column="13">/* resource shortage or should-not-occur occured */</comment>
            <expr_stmt><expr><call><name pos:line="184" pos:column="13">clean_child_exit<pos:position pos:line="184" pos:column="29"/></name><argument_list pos:line="184" pos:column="29">(<argument><expr><name pos:line="184" pos:column="30">APEXIT_CHILDSICK<pos:position pos:line="184" pos:column="46"/></name></expr></argument>)<pos:position pos:line="184" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="48"/></expr_stmt>
        }<pos:position pos:line="185" pos:column="10"/></block></then>
        <elseif pos:line="186" pos:column="9">else <if pos:line="186" pos:column="14">if <condition pos:line="186" pos:column="17">(<expr><name pos:line="186" pos:column="18">status<pos:position pos:line="186" pos:column="24"/></name> <operator pos:line="186" pos:column="25">!=<pos:position pos:line="186" pos:column="27"/></operator> <name pos:line="186" pos:column="28">APR_SUCCESS<pos:position pos:line="186" pos:column="39"/></name></expr>)<pos:position pos:line="186" pos:column="40"/></condition><then pos:line="186" pos:column="40"> <block pos:line="186" pos:column="41">{
            <continue pos:line="187" pos:column="13">continue;<pos:position pos:line="187" pos:column="22"/></continue>
        }<pos:position pos:line="188" pos:column="10"/></block></then></if></elseif></if>

        <comment type="block" pos:line="190" pos:column="9">/*
         * We now have a connection, so set it up with the appropriate
         * socket options, file descriptors, and read/write buffers.
         */</comment>

        <expr_stmt><expr><name pos:line="195" pos:column="9">current_conn<pos:position pos:line="195" pos:column="21"/></name> <operator pos:line="195" pos:column="22">=<pos:position pos:line="195" pos:column="23"/></operator> <call><name pos:line="195" pos:column="24">ap_run_create_connection<pos:position pos:line="195" pos:column="48"/></name><argument_list pos:line="195" pos:column="48">(<argument><expr><name pos:line="195" pos:column="49">ptrans<pos:position pos:line="195" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="57">ap_server_conf<pos:position pos:line="195" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="73">csd<pos:position pos:line="195" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="78">my_child_num<pos:position pos:line="195" pos:column="90"/></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="92">sbh<pos:position pos:line="195" pos:column="95"/></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="97">bucket_alloc<pos:position pos:line="195" pos:column="109"/></name></expr></argument>)<pos:position pos:line="195" pos:column="110"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="111"/></expr_stmt>
        <if pos:line="196" pos:column="9">if <condition pos:line="196" pos:column="12">(<expr><name pos:line="196" pos:column="13">current_conn<pos:position pos:line="196" pos:column="25"/></name></expr>)<pos:position pos:line="196" pos:column="26"/></condition><then pos:line="196" pos:column="26"> <block pos:line="196" pos:column="27">{
            <expr_stmt><expr><call><name pos:line="197" pos:column="13">ap_process_connection<pos:position pos:line="197" pos:column="34"/></name><argument_list pos:line="197" pos:column="34">(<argument><expr><name pos:line="197" pos:column="35">current_conn<pos:position pos:line="197" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="49">csd<pos:position pos:line="197" pos:column="52"/></name></expr></argument>)<pos:position pos:line="197" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="54"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="198" pos:column="13">ap_lingering_close<pos:position pos:line="198" pos:column="31"/></name><argument_list pos:line="198" pos:column="31">(<argument><expr><name pos:line="198" pos:column="32">current_conn<pos:position pos:line="198" pos:column="44"/></name></expr></argument>)<pos:position pos:line="198" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="199" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="201" pos:column="9">/* Check the pod and the generation number after processing a
         * connection so that we'll go away if a graceful restart occurred
         * while we were processing the connection or we are the lucky
         * idle server process that gets to die.
         */</comment>
        <if pos:line="206" pos:column="9">if <condition pos:line="206" pos:column="12">(<expr><call><name pos:line="206" pos:column="13">ap_mpm_pod_check<pos:position pos:line="206" pos:column="29"/></name><argument_list pos:line="206" pos:column="29">(<argument><expr><name pos:line="206" pos:column="30">pod<pos:position pos:line="206" pos:column="33"/></name></expr></argument>)<pos:position pos:line="206" pos:column="34"/></argument_list></call> <operator pos:line="206" pos:column="35">==<pos:position pos:line="206" pos:column="37"/></operator> <name pos:line="206" pos:column="38">APR_SUCCESS<pos:position pos:line="206" pos:column="49"/></name></expr>)<pos:position pos:line="206" pos:column="50"/></condition><then pos:line="206" pos:column="50"> <block pos:line="206" pos:column="51">{ <comment type="block" pos:line="206" pos:column="53">/* selected as idle? */</comment>
            <expr_stmt><expr><name pos:line="207" pos:column="13">die_now<pos:position pos:line="207" pos:column="20"/></name> <operator pos:line="207" pos:column="21">=<pos:position pos:line="207" pos:column="22"/></operator> <literal type="number" pos:line="207" pos:column="23">1<pos:position pos:line="207" pos:column="24"/></literal></expr>;<pos:position pos:line="207" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="208" pos:column="10"/></block></then>
        <elseif pos:line="209" pos:column="9">else <if pos:line="209" pos:column="14">if <condition pos:line="209" pos:column="17">(<expr><name pos:line="209" pos:column="18">ap_my_generation<pos:position pos:line="209" pos:column="34"/></name> <operator pos:line="209" pos:column="35">!=<pos:position pos:line="209" pos:column="37"/></operator>
                 <name><name pos:line="210" pos:column="18">ap_scoreboard_image<pos:position pos:line="210" pos:column="37"/></name><operator pos:line="210" pos:column="37">-&gt;<pos:position pos:line="210" pos:column="42"/></operator><name pos:line="210" pos:column="39">global<pos:position pos:line="210" pos:column="45"/></name><operator pos:line="210" pos:column="45">-&gt;<pos:position pos:line="210" pos:column="50"/></operator><name pos:line="210" pos:column="47">running_generation<pos:position pos:line="210" pos:column="65"/></name></name></expr>)<pos:position pos:line="210" pos:column="66"/></condition><then pos:line="210" pos:column="66"> <block pos:line="210" pos:column="67">{ <comment type="block" pos:line="210" pos:column="69">/* restart? */</comment>
            <comment type="block" pos:line="211" pos:column="13">/* yeah, this could be non-graceful restart, in which case the
             * parent will kill us soon enough, but why bother checking?
             */</comment>
            <expr_stmt><expr><name pos:line="214" pos:column="13">die_now<pos:position pos:line="214" pos:column="20"/></name> <operator pos:line="214" pos:column="21">=<pos:position pos:line="214" pos:column="22"/></operator> <literal type="number" pos:line="214" pos:column="23">1<pos:position pos:line="214" pos:column="24"/></literal></expr>;<pos:position pos:line="214" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="215" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="216" pos:column="6"/></block></while>
    <comment type="block" pos:line="217" pos:column="5">/* This apr_pool_clear call is redundant, should be redundant, but compensates
     * a flaw in the apr reslist code.  This should be removed once that flaw has
     * been addressed.
     */</comment>
    <expr_stmt><expr><call><name pos:line="221" pos:column="5">apr_pool_clear<pos:position pos:line="221" pos:column="19"/></name><argument_list pos:line="221" pos:column="19">(<argument><expr><name pos:line="221" pos:column="20">ptrans<pos:position pos:line="221" pos:column="26"/></name></expr></argument>)<pos:position pos:line="221" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="222" pos:column="5">clean_child_exit<pos:position pos:line="222" pos:column="21"/></name><argument_list pos:line="222" pos:column="21">(<argument><expr><literal type="number" pos:line="222" pos:column="22">0<pos:position pos:line="222" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="222" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="25"/></expr_stmt>
}<pos:position pos:line="223" pos:column="2"/></block></function></unit>
