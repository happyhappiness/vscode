<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_4237_httpd-2.4.20.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">process_lingering_close<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">event_conn_state_t<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">cs<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="61">const<pos:position pos:line="1" pos:column="66"/></specifier> <name pos:line="1" pos:column="67">apr_pollfd_t<pos:position pos:line="1" pos:column="79"/></name> <modifier pos:line="1" pos:column="80">*<pos:position pos:line="1" pos:column="81"/></modifier></type><name pos:line="1" pos:column="81">pfd<pos:position pos:line="1" pos:column="84"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="85"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_socket_t<pos:position pos:line="3" pos:column="17"/></name> <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier></type><name pos:line="3" pos:column="19">csd<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><call><name pos:line="3" pos:column="25">ap_get_conn_socket<pos:position pos:line="3" pos:column="43"/></name><argument_list pos:line="3" pos:column="43">(<argument><expr><name><name pos:line="3" pos:column="44">cs<pos:position pos:line="3" pos:column="46"/></name><operator pos:line="3" pos:column="46">-&gt;<pos:position pos:line="3" pos:column="51"/></operator><name pos:line="3" pos:column="48">c<pos:position pos:line="3" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="3" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="51"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">dummybuf<pos:position pos:line="4" pos:column="18"/></name><index pos:line="4" pos:column="18">[<expr><literal type="number" pos:line="4" pos:column="19">2048<pos:position pos:line="4" pos:column="23"/></literal></expr>]<pos:position pos:line="4" pos:column="24"/></index></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">nbytes<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">rv<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">timeout_queue<pos:position pos:line="7" pos:column="25"/></name></name> <modifier pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></modifier></type><name pos:line="7" pos:column="27">q<pos:position pos:line="7" pos:column="28"/></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
    <expr_stmt><expr><name pos:line="8" pos:column="5">q<pos:position pos:line="8" pos:column="6"/></name> <operator pos:line="8" pos:column="7">=<pos:position pos:line="8" pos:column="8"/></operator> <ternary><condition><expr><operator pos:line="8" pos:column="9">(<pos:position pos:line="8" pos:column="10"/></operator><name><name pos:line="8" pos:column="10">cs<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">-&gt;<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="14">pub<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">.<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="18">state<pos:position pos:line="8" pos:column="23"/></name></name> <operator pos:line="8" pos:column="24">==<pos:position pos:line="8" pos:column="26"/></operator> <name pos:line="8" pos:column="27">CONN_STATE_LINGER_SHORT<pos:position pos:line="8" pos:column="50"/></name><operator pos:line="8" pos:column="50">)<pos:position pos:line="8" pos:column="51"/></operator></expr> ?<pos:position pos:line="8" pos:column="53"/></condition><then pos:line="8" pos:column="53"> <expr><name pos:line="8" pos:column="54">short_linger_q<pos:position pos:line="8" pos:column="68"/></name></expr> <pos:position pos:line="8" pos:column="69"/></then><else pos:line="8" pos:column="69">: <expr><name pos:line="8" pos:column="71">linger_q<pos:position pos:line="8" pos:column="79"/></name></expr></else></ternary></expr>;<pos:position pos:line="8" pos:column="80"/></expr_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* socket is already in non-blocking state */</comment>
    <do pos:line="11" pos:column="5">do <block pos:line="11" pos:column="8">{
        <expr_stmt><expr><name pos:line="12" pos:column="9">nbytes<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <sizeof pos:line="12" pos:column="18">sizeof<argument_list pos:line="12" pos:column="24">(<argument><expr><name pos:line="12" pos:column="25">dummybuf<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></sizeof></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="13" pos:column="9">rv<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <call><name pos:line="13" pos:column="14">apr_socket_recv<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">csd<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="35">dummybuf<pos:position pos:line="13" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="45">&amp;<pos:position pos:line="13" pos:column="50"/></operator><name pos:line="13" pos:column="46">nbytes<pos:position pos:line="13" pos:column="52"/></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block> while <condition pos:line="14" pos:column="13">(<expr><name pos:line="14" pos:column="14">rv<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">==<pos:position pos:line="14" pos:column="19"/></operator> <name pos:line="14" pos:column="20">APR_SUCCESS<pos:position pos:line="14" pos:column="31"/></name></expr>)<pos:position pos:line="14" pos:column="32"/></condition>;<pos:position pos:line="14" pos:column="33"/></do>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><call><name pos:line="16" pos:column="9">APR_STATUS_IS_EAGAIN<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">rv<pos:position pos:line="16" pos:column="32"/></name></expr></argument>)<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="34"/></condition><then pos:line="16" pos:column="34"> <block pos:line="16" pos:column="35">{
        <return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">apr_thread_mutex_lock<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">(<argument><expr><name pos:line="20" pos:column="27">timeout_mutex<pos:position pos:line="20" pos:column="40"/></name></expr></argument>)<pos:position pos:line="20" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">rv<pos:position pos:line="21" pos:column="7"/></name> <operator pos:line="21" pos:column="8">=<pos:position pos:line="21" pos:column="9"/></operator> <call><name pos:line="21" pos:column="10">apr_pollset_remove<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">event_pollset<pos:position pos:line="21" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="44">pfd<pos:position pos:line="21" pos:column="47"/></name></expr></argument>)<pos:position pos:line="21" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">AP_DEBUG_ASSERT<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">rv<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">==<pos:position pos:line="22" pos:column="26"/></operator> <name pos:line="22" pos:column="27">APR_SUCCESS<pos:position pos:line="22" pos:column="38"/></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><name pos:line="24" pos:column="5">rv<pos:position pos:line="24" pos:column="7"/></name> <operator pos:line="24" pos:column="8">=<pos:position pos:line="24" pos:column="9"/></operator> <call><name pos:line="24" pos:column="10">apr_socket_close<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">(<argument><expr><name pos:line="24" pos:column="27">csd<pos:position pos:line="24" pos:column="30"/></name></expr></argument>)<pos:position pos:line="24" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">AP_DEBUG_ASSERT<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><name pos:line="25" pos:column="21">rv<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">==<pos:position pos:line="25" pos:column="26"/></operator> <name pos:line="25" pos:column="27">APR_SUCCESS<pos:position pos:line="25" pos:column="38"/></name></expr></argument>)<pos:position pos:line="25" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">TO_QUEUE_REMOVE<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><name pos:line="27" pos:column="21">q<pos:position pos:line="27" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="24">cs<pos:position pos:line="27" pos:column="26"/></name></expr></argument>)<pos:position pos:line="27" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">apr_thread_mutex_unlock<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><name pos:line="28" pos:column="29">timeout_mutex<pos:position pos:line="28" pos:column="42"/></name></expr></argument>)<pos:position pos:line="28" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">TO_QUEUE_ELEM_INIT<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">(<argument><expr><name pos:line="29" pos:column="24">cs<pos:position pos:line="29" pos:column="26"/></name></expr></argument>)<pos:position pos:line="29" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="31" pos:column="5">ap_push_pool<pos:position pos:line="31" pos:column="17"/></name><argument_list pos:line="31" pos:column="17">(<argument><expr><name pos:line="31" pos:column="18">worker_queue_info<pos:position pos:line="31" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="37">cs<pos:position pos:line="31" pos:column="39"/></name><operator pos:line="31" pos:column="39">-&gt;<pos:position pos:line="31" pos:column="44"/></operator><name pos:line="31" pos:column="41">p<pos:position pos:line="31" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="44"/></expr_stmt>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
