<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_4857.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">OCSP_RESPONSE<pos:position pos:line="1" pos:column="21"/></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">read_response<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">apr_socket_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">sd<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">BIO<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">bio<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">conn_rec<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">c<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="2" pos:column="37">apr_pool_t<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">p<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_bucket_brigade<pos:position pos:line="4" pos:column="23"/></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">bb<pos:position pos:line="4" pos:column="27"/></name></decl>, <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="30">tmpbb<pos:position pos:line="4" pos:column="35"/></name></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">OCSP_RESPONSE<pos:position pos:line="5" pos:column="18"/></name> <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">response<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">line<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">count<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_int64_t<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">code<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* Using brigades for response parsing is much simpler than using
     * apr_socket_* directly. */</comment>
    <expr_stmt><expr><name pos:line="12" pos:column="5">bb<pos:position pos:line="12" pos:column="7"/></name> <operator pos:line="12" pos:column="8">=<pos:position pos:line="12" pos:column="9"/></operator> <call><name pos:line="12" pos:column="10">apr_brigade_create<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><name pos:line="12" pos:column="29">p<pos:position pos:line="12" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="32">c<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">-&gt;<pos:position pos:line="12" pos:column="38"/></operator><name pos:line="12" pos:column="35">bucket_alloc<pos:position pos:line="12" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="13" pos:column="5">tmpbb<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <call><name pos:line="13" pos:column="13">apr_brigade_create<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">p<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="35">c<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">-&gt;<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="38">bucket_alloc<pos:position pos:line="13" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">bb<pos:position pos:line="14" pos:column="31"/></name></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="33">apr_bucket_socket_create<pos:position pos:line="14" pos:column="57"/></name><argument_list pos:line="14" pos:column="57">(<argument><expr><name pos:line="14" pos:column="58">sd<pos:position pos:line="14" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="62">c<pos:position pos:line="14" pos:column="63"/></name><operator pos:line="14" pos:column="63">-&gt;<pos:position pos:line="14" pos:column="68"/></operator><name pos:line="14" pos:column="65">bucket_alloc<pos:position pos:line="14" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="80"/></expr_stmt>

    <expr_stmt><expr><name pos:line="16" pos:column="5">line<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">get_line<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name pos:line="16" pos:column="21">tmpbb<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="28">bb<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="32">c<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="35">p<pos:position pos:line="16" pos:column="36"/></name></expr></argument>)<pos:position pos:line="16" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">!<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">line<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">||<pos:position pos:line="17" pos:column="17"/></operator> <call><name pos:line="17" pos:column="18">strncmp<pos:position pos:line="17" pos:column="25"/></name><argument_list pos:line="17" pos:column="25">(<argument><expr><name pos:line="17" pos:column="26">line<pos:position pos:line="17" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="32">"HTTP/"<pos:position pos:line="17" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="41">5<pos:position pos:line="17" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call>
        <operator pos:line="18" pos:column="9">||<pos:position pos:line="18" pos:column="11"/></operator> <operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">line<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <call><name pos:line="18" pos:column="20">ap_strchr<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">line<pos:position pos:line="18" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="18" pos:column="36">' '<pos:position pos:line="18" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call><operator pos:line="18" pos:column="40">)<pos:position pos:line="18" pos:column="41"/></operator> <operator pos:line="18" pos:column="42">==<pos:position pos:line="18" pos:column="44"/></operator> <name pos:line="18" pos:column="45">NULL<pos:position pos:line="18" pos:column="49"/></name>
        <operator pos:line="19" pos:column="9">||<pos:position pos:line="19" pos:column="11"/></operator> <operator pos:line="19" pos:column="12">(<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="13">code<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">=<pos:position pos:line="19" pos:column="19"/></operator> <call><name pos:line="19" pos:column="20">apr_atoi64<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><operator pos:line="19" pos:column="31">++<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="33">line<pos:position pos:line="19" pos:column="37"/></name></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call><operator pos:line="19" pos:column="38">)<pos:position pos:line="19" pos:column="39"/></operator> <operator pos:line="19" pos:column="40">&lt;<pos:position pos:line="19" pos:column="44"/></operator> <literal type="number" pos:line="19" pos:column="42">200<pos:position pos:line="19" pos:column="45"/></literal> <operator pos:line="19" pos:column="46">||<pos:position pos:line="19" pos:column="48"/></operator> <name pos:line="19" pos:column="49">code<pos:position pos:line="19" pos:column="53"/></name> <operator pos:line="19" pos:column="54">&gt;<pos:position pos:line="19" pos:column="58"/></operator> <literal type="number" pos:line="19" pos:column="56">299<pos:position pos:line="19" pos:column="59"/></literal></expr>)<pos:position pos:line="19" pos:column="60"/></condition><then pos:line="19" pos:column="60"> <block pos:line="19" pos:column="61">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">ap_log_cerror<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">APLOG_MARK<pos:position pos:line="20" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="35">APLOG_ERR<pos:position pos:line="20" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="46">0<pos:position pos:line="20" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="49">c<pos:position pos:line="20" pos:column="50"/></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="21" pos:column="23">"bad response from OCSP server: %s"<pos:position pos:line="21" pos:column="58"/></literal></expr></argument>,
                      <argument><expr><ternary><condition><expr><name pos:line="22" pos:column="23">line<pos:position pos:line="22" pos:column="27"/></name></expr> ?<pos:position pos:line="22" pos:column="29"/></condition><then pos:line="22" pos:column="29"> <expr><name pos:line="22" pos:column="30">line<pos:position pos:line="22" pos:column="34"/></name></expr> <pos:position pos:line="22" pos:column="35"/></then><else pos:line="22" pos:column="35">: <expr><literal type="string" pos:line="22" pos:column="37">"(none)"<pos:position pos:line="22" pos:column="45"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="22" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="47"/></expr_stmt>
        <return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">NULL<pos:position pos:line="23" pos:column="20"/></name></expr>;<pos:position pos:line="23" pos:column="21"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="26" pos:column="5">/* Read till end of headers; don't have to even bother parsing the
     * Content-Length since the server is obliged to close the
     * connection after the response anyway for HTTP/1.0. */</comment>
    <expr_stmt><expr><name pos:line="29" pos:column="5">count<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">=<pos:position pos:line="29" pos:column="12"/></operator> <literal type="number" pos:line="29" pos:column="13">0<pos:position pos:line="29" pos:column="14"/></literal></expr>;<pos:position pos:line="29" pos:column="15"/></expr_stmt>
    <while pos:line="30" pos:column="5">while <condition pos:line="30" pos:column="11">(<expr><operator pos:line="30" pos:column="12">(<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="13">line<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">=<pos:position pos:line="30" pos:column="19"/></operator> <call><name pos:line="30" pos:column="20">get_line<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><name pos:line="30" pos:column="29">tmpbb<pos:position pos:line="30" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="36">bb<pos:position pos:line="30" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="40">c<pos:position pos:line="30" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="43">p<pos:position pos:line="30" pos:column="44"/></name></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call><operator pos:line="30" pos:column="45">)<pos:position pos:line="30" pos:column="46"/></operator> <operator pos:line="30" pos:column="47">!=<pos:position pos:line="30" pos:column="49"/></operator> <name pos:line="30" pos:column="50">NULL<pos:position pos:line="30" pos:column="54"/></name> <operator pos:line="30" pos:column="55">&amp;&amp;<pos:position pos:line="30" pos:column="65"/></operator> <name><name pos:line="30" pos:column="58">line<pos:position pos:line="30" pos:column="62"/></name><index pos:line="30" pos:column="62">[<expr><literal type="number" pos:line="30" pos:column="63">0<pos:position pos:line="30" pos:column="64"/></literal></expr>]<pos:position pos:line="30" pos:column="65"/></index></name>
           <operator pos:line="31" pos:column="12">&amp;&amp;<pos:position pos:line="31" pos:column="22"/></operator> <operator pos:line="31" pos:column="15">++<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="17">count<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">&lt;<pos:position pos:line="31" pos:column="27"/></operator> <name pos:line="31" pos:column="25">MAX_HEADERS<pos:position pos:line="31" pos:column="36"/></name></expr>)<pos:position pos:line="31" pos:column="37"/></condition> <block pos:line="31" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">ap_log_cerror<pos:position pos:line="32" pos:column="22"/></name><argument_list pos:line="32" pos:column="22">(<argument><expr><name pos:line="32" pos:column="23">APLOG_MARK<pos:position pos:line="32" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="35">APLOG_DEBUG<pos:position pos:line="32" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="48">0<pos:position pos:line="32" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="51">c<pos:position pos:line="32" pos:column="52"/></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="33" pos:column="23">"OCSP response header: %s"<pos:position pos:line="33" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="51">line<pos:position pos:line="33" pos:column="55"/></name></expr></argument>)<pos:position pos:line="33" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></while>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">count<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">==<pos:position pos:line="36" pos:column="17"/></operator> <name pos:line="36" pos:column="18">MAX_HEADERS<pos:position pos:line="36" pos:column="29"/></name></expr>)<pos:position pos:line="36" pos:column="30"/></condition><then pos:line="36" pos:column="30"> <block pos:line="36" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">ap_log_cerror<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><name pos:line="37" pos:column="23">APLOG_MARK<pos:position pos:line="37" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="35">APLOG_ERR<pos:position pos:line="37" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="46">0<pos:position pos:line="37" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="49">c<pos:position pos:line="37" pos:column="50"/></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="38" pos:column="23">"could not read response headers from OCSP server, "<pos:position pos:line="38" pos:column="75"/></literal>
                      <literal type="string" pos:line="39" pos:column="23">"exceeded maximum count (%u)"<pos:position pos:line="39" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="54">MAX_HEADERS<pos:position pos:line="39" pos:column="65"/></name></expr></argument>)<pos:position pos:line="39" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="67"/></expr_stmt>
        <return pos:line="40" pos:column="9">return <expr><name pos:line="40" pos:column="16">NULL<pos:position pos:line="40" pos:column="20"/></name></expr>;<pos:position pos:line="40" pos:column="21"/></return>
    }<pos:position pos:line="41" pos:column="6"/></block></then>
    <elseif pos:line="42" pos:column="5">else <if pos:line="42" pos:column="10">if <condition pos:line="42" pos:column="13">(<expr><operator pos:line="42" pos:column="14">!<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="15">line<pos:position pos:line="42" pos:column="19"/></name></expr>)<pos:position pos:line="42" pos:column="20"/></condition><then pos:line="42" pos:column="20"> <block pos:line="42" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">ap_log_cerror<pos:position pos:line="43" pos:column="22"/></name><argument_list pos:line="43" pos:column="22">(<argument><expr><name pos:line="43" pos:column="23">APLOG_MARK<pos:position pos:line="43" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="35">APLOG_ERR<pos:position pos:line="43" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="46">0<pos:position pos:line="43" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="49">c<pos:position pos:line="43" pos:column="50"/></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="44" pos:column="23">"could not read response header from OCSP server"<pos:position pos:line="44" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="74"/></expr_stmt>
        <return pos:line="45" pos:column="9">return <expr><name pos:line="45" pos:column="16">NULL<pos:position pos:line="45" pos:column="20"/></name></expr>;<pos:position pos:line="45" pos:column="21"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="48" pos:column="5">/* Read the response body into the memory BIO. */</comment>
    <expr_stmt><expr><name pos:line="49" pos:column="5">count<pos:position pos:line="49" pos:column="10"/></name> <operator pos:line="49" pos:column="11">=<pos:position pos:line="49" pos:column="12"/></operator> <literal type="number" pos:line="49" pos:column="13">0<pos:position pos:line="49" pos:column="14"/></literal></expr>;<pos:position pos:line="49" pos:column="15"/></expr_stmt>
    <while pos:line="50" pos:column="5">while <condition pos:line="50" pos:column="11">(<expr><operator pos:line="50" pos:column="12">!<pos:position pos:line="50" pos:column="13"/></operator><call><name pos:line="50" pos:column="13">APR_BRIGADE_EMPTY<pos:position pos:line="50" pos:column="30"/></name><argument_list pos:line="50" pos:column="30">(<argument><expr><name pos:line="50" pos:column="31">bb<pos:position pos:line="50" pos:column="33"/></name></expr></argument>)<pos:position pos:line="50" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="35"/></condition> <block pos:line="50" pos:column="36">{
        <decl_stmt><decl><type><specifier pos:line="51" pos:column="9">const<pos:position pos:line="51" pos:column="14"/></specifier> <name pos:line="51" pos:column="15">char<pos:position pos:line="51" pos:column="19"/></name> <modifier pos:line="51" pos:column="20">*<pos:position pos:line="51" pos:column="21"/></modifier></type><name pos:line="51" pos:column="21">data<pos:position pos:line="51" pos:column="25"/></name></decl>;<pos:position pos:line="51" pos:column="26"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="52" pos:column="9">apr_size_t<pos:position pos:line="52" pos:column="19"/></name></type> <name pos:line="52" pos:column="20">len<pos:position pos:line="52" pos:column="23"/></name></decl>;<pos:position pos:line="52" pos:column="24"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="53" pos:column="9">apr_status_t<pos:position pos:line="53" pos:column="21"/></name></type> <name pos:line="53" pos:column="22">rv<pos:position pos:line="53" pos:column="24"/></name></decl>;<pos:position pos:line="53" pos:column="25"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="54" pos:column="9">apr_bucket<pos:position pos:line="54" pos:column="19"/></name> <modifier pos:line="54" pos:column="20">*<pos:position pos:line="54" pos:column="21"/></modifier></type><name pos:line="54" pos:column="21">e<pos:position pos:line="54" pos:column="22"/></name> <init pos:line="54" pos:column="23">= <expr><call><name pos:line="54" pos:column="25">APR_BRIGADE_FIRST<pos:position pos:line="54" pos:column="42"/></name><argument_list pos:line="54" pos:column="42">(<argument><expr><name pos:line="54" pos:column="43">bb<pos:position pos:line="54" pos:column="45"/></name></expr></argument>)<pos:position pos:line="54" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="54" pos:column="47"/></decl_stmt>

        <expr_stmt><expr><name pos:line="56" pos:column="9">rv<pos:position pos:line="56" pos:column="11"/></name> <operator pos:line="56" pos:column="12">=<pos:position pos:line="56" pos:column="13"/></operator> <call><name pos:line="56" pos:column="14">apr_bucket_read<pos:position pos:line="56" pos:column="29"/></name><argument_list pos:line="56" pos:column="29">(<argument><expr><name pos:line="56" pos:column="30">e<pos:position pos:line="56" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="33">&amp;<pos:position pos:line="56" pos:column="38"/></operator><name pos:line="56" pos:column="34">data<pos:position pos:line="56" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="40">&amp;<pos:position pos:line="56" pos:column="45"/></operator><name pos:line="56" pos:column="41">len<pos:position pos:line="56" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="46">APR_BLOCK_READ<pos:position pos:line="56" pos:column="60"/></name></expr></argument>)<pos:position pos:line="56" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="62"/></expr_stmt>
        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name pos:line="57" pos:column="13">rv<pos:position pos:line="57" pos:column="15"/></name> <operator pos:line="57" pos:column="16">==<pos:position pos:line="57" pos:column="18"/></operator> <name pos:line="57" pos:column="19">APR_EOF<pos:position pos:line="57" pos:column="26"/></name> <operator pos:line="57" pos:column="27">||<pos:position pos:line="57" pos:column="29"/></operator> <operator pos:line="57" pos:column="30">(<pos:position pos:line="57" pos:column="31"/></operator><name pos:line="57" pos:column="31">rv<pos:position pos:line="57" pos:column="33"/></name> <operator pos:line="57" pos:column="34">==<pos:position pos:line="57" pos:column="36"/></operator> <name pos:line="57" pos:column="37">APR_SUCCESS<pos:position pos:line="57" pos:column="48"/></name> <operator pos:line="57" pos:column="49">&amp;&amp;<pos:position pos:line="57" pos:column="59"/></operator> <name pos:line="57" pos:column="52">len<pos:position pos:line="57" pos:column="55"/></name> <operator pos:line="57" pos:column="56">==<pos:position pos:line="57" pos:column="58"/></operator> <literal type="number" pos:line="57" pos:column="59">0<pos:position pos:line="57" pos:column="60"/></literal><operator pos:line="57" pos:column="60">)<pos:position pos:line="57" pos:column="61"/></operator></expr>)<pos:position pos:line="57" pos:column="62"/></condition><then pos:line="57" pos:column="62"> <block pos:line="57" pos:column="63">{
            <expr_stmt><expr><call><name pos:line="58" pos:column="13">ap_log_cerror<pos:position pos:line="58" pos:column="26"/></name><argument_list pos:line="58" pos:column="26">(<argument><expr><name pos:line="58" pos:column="27">APLOG_MARK<pos:position pos:line="58" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="39">APLOG_DEBUG<pos:position pos:line="58" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="52">0<pos:position pos:line="58" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="55">c<pos:position pos:line="58" pos:column="56"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="59" pos:column="27">"OCSP response: got EOF"<pos:position pos:line="59" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="53"/></expr_stmt>
            <break pos:line="60" pos:column="13">break;<pos:position pos:line="60" pos:column="19"/></break>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if>
        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><name pos:line="62" pos:column="13">rv<pos:position pos:line="62" pos:column="15"/></name> <operator pos:line="62" pos:column="16">!=<pos:position pos:line="62" pos:column="18"/></operator> <name pos:line="62" pos:column="19">APR_SUCCESS<pos:position pos:line="62" pos:column="30"/></name></expr>)<pos:position pos:line="62" pos:column="31"/></condition><then pos:line="62" pos:column="31"> <block pos:line="62" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="63" pos:column="13">ap_log_cerror<pos:position pos:line="63" pos:column="26"/></name><argument_list pos:line="63" pos:column="26">(<argument><expr><name pos:line="63" pos:column="27">APLOG_MARK<pos:position pos:line="63" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="39">APLOG_ERR<pos:position pos:line="63" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="50">rv<pos:position pos:line="63" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="54">c<pos:position pos:line="63" pos:column="55"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="64" pos:column="27">"error reading response from OCSP server"<pos:position pos:line="64" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="70"/></expr_stmt>
            <return pos:line="65" pos:column="13">return <expr><name pos:line="65" pos:column="20">NULL<pos:position pos:line="65" pos:column="24"/></name></expr>;<pos:position pos:line="65" pos:column="25"/></return>
        }<pos:position pos:line="66" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="67" pos:column="9">count<pos:position pos:line="67" pos:column="14"/></name> <operator pos:line="67" pos:column="15">+=<pos:position pos:line="67" pos:column="17"/></operator> <name pos:line="67" pos:column="18">len<pos:position pos:line="67" pos:column="21"/></name></expr>;<pos:position pos:line="67" pos:column="22"/></expr_stmt>
        <if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name pos:line="68" pos:column="13">count<pos:position pos:line="68" pos:column="18"/></name> <operator pos:line="68" pos:column="19">&gt;<pos:position pos:line="68" pos:column="23"/></operator> <name pos:line="68" pos:column="21">MAX_CONTENT<pos:position pos:line="68" pos:column="32"/></name></expr>)<pos:position pos:line="68" pos:column="33"/></condition><then pos:line="68" pos:column="33"> <block pos:line="68" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="69" pos:column="13">ap_log_cerror<pos:position pos:line="69" pos:column="26"/></name><argument_list pos:line="69" pos:column="26">(<argument><expr><name pos:line="69" pos:column="27">APLOG_MARK<pos:position pos:line="69" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="39">APLOG_ERR<pos:position pos:line="69" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="50">rv<pos:position pos:line="69" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="54">c<pos:position pos:line="69" pos:column="55"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="70" pos:column="27">"OCSP response size exceeds %u byte limit"<pos:position pos:line="70" pos:column="69"/></literal></expr></argument>,
                          <argument><expr><name pos:line="71" pos:column="27">MAX_CONTENT<pos:position pos:line="71" pos:column="38"/></name></expr></argument>)<pos:position pos:line="71" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="40"/></expr_stmt>
            <return pos:line="72" pos:column="13">return <expr><name pos:line="72" pos:column="20">NULL<pos:position pos:line="72" pos:column="24"/></name></expr>;<pos:position pos:line="72" pos:column="25"/></return>
        }<pos:position pos:line="73" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">ap_log_cerror<pos:position pos:line="74" pos:column="22"/></name><argument_list pos:line="74" pos:column="22">(<argument><expr><name pos:line="74" pos:column="23">APLOG_MARK<pos:position pos:line="74" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="35">APLOG_DEBUG<pos:position pos:line="74" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="48">0<pos:position pos:line="74" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="51">c<pos:position pos:line="74" pos:column="52"/></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="75" pos:column="23">"OCSP response: got %"<pos:position pos:line="75" pos:column="45"/></literal> <name pos:line="75" pos:column="46">APR_SIZE_T_FMT<pos:position pos:line="75" pos:column="60"/></name> 
                      <literal type="string" pos:line="76" pos:column="23">" bytes, %"<pos:position pos:line="76" pos:column="34"/></literal> <name pos:line="76" pos:column="35">APR_SIZE_T_FMT<pos:position pos:line="76" pos:column="49"/></name> <literal type="string" pos:line="76" pos:column="50">" total"<pos:position pos:line="76" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="60">len<pos:position pos:line="76" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="65">count<pos:position pos:line="76" pos:column="70"/></name></expr></argument>)<pos:position pos:line="76" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="72"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="78" pos:column="9">BIO_write<pos:position pos:line="78" pos:column="18"/></name><argument_list pos:line="78" pos:column="18">(<argument><expr><name pos:line="78" pos:column="19">bio<pos:position pos:line="78" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="24">data<pos:position pos:line="78" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="30">(<pos:position pos:line="78" pos:column="31"/></operator><name pos:line="78" pos:column="31">int<pos:position pos:line="78" pos:column="34"/></name><operator pos:line="78" pos:column="34">)<pos:position pos:line="78" pos:column="35"/></operator><name pos:line="78" pos:column="35">len<pos:position pos:line="78" pos:column="38"/></name></expr></argument>)<pos:position pos:line="78" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="79" pos:column="9">apr_bucket_delete<pos:position pos:line="79" pos:column="26"/></name><argument_list pos:line="79" pos:column="26">(<argument><expr><name pos:line="79" pos:column="27">e<pos:position pos:line="79" pos:column="28"/></name></expr></argument>)<pos:position pos:line="79" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="80" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="82" pos:column="5">apr_brigade_destroy<pos:position pos:line="82" pos:column="24"/></name><argument_list pos:line="82" pos:column="24">(<argument><expr><name pos:line="82" pos:column="25">bb<pos:position pos:line="82" pos:column="27"/></name></expr></argument>)<pos:position pos:line="82" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">apr_brigade_destroy<pos:position pos:line="83" pos:column="24"/></name><argument_list pos:line="83" pos:column="24">(<argument><expr><name pos:line="83" pos:column="25">tmpbb<pos:position pos:line="83" pos:column="30"/></name></expr></argument>)<pos:position pos:line="83" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="32"/></expr_stmt>

    <comment type="block" pos:line="85" pos:column="5">/* Finally decode the OCSP response from what's stored in the
     * bio. */</comment>
    <expr_stmt><expr><name pos:line="87" pos:column="5">response<pos:position pos:line="87" pos:column="13"/></name> <operator pos:line="87" pos:column="14">=<pos:position pos:line="87" pos:column="15"/></operator> <call><name pos:line="87" pos:column="16">d2i_OCSP_RESPONSE_bio<pos:position pos:line="87" pos:column="37"/></name><argument_list pos:line="87" pos:column="37">(<argument><expr><name pos:line="87" pos:column="38">bio<pos:position pos:line="87" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="43">NULL<pos:position pos:line="87" pos:column="47"/></name></expr></argument>)<pos:position pos:line="87" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="49"/></expr_stmt>
    <if pos:line="88" pos:column="5">if <condition pos:line="88" pos:column="8">(<expr><name pos:line="88" pos:column="9">response<pos:position pos:line="88" pos:column="17"/></name> <operator pos:line="88" pos:column="18">==<pos:position pos:line="88" pos:column="20"/></operator> <name pos:line="88" pos:column="21">NULL<pos:position pos:line="88" pos:column="25"/></name></expr>)<pos:position pos:line="88" pos:column="26"/></condition><then pos:line="88" pos:column="26"> <block pos:line="88" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="89" pos:column="9">ssl_log_ssl_error<pos:position pos:line="89" pos:column="26"/></name><argument_list pos:line="89" pos:column="26">(<argument><expr><name pos:line="89" pos:column="27">SSLLOG_MARK<pos:position pos:line="89" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="40">APLOG_ERR<pos:position pos:line="89" pos:column="49"/></name></expr></argument>, <argument><expr><call><name pos:line="89" pos:column="51">mySrvFromConn<pos:position pos:line="89" pos:column="64"/></name><argument_list pos:line="89" pos:column="64">(<argument><expr><name pos:line="89" pos:column="65">c<pos:position pos:line="89" pos:column="66"/></name></expr></argument>)<pos:position pos:line="89" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="89" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="90" pos:column="9">ap_log_cerror<pos:position pos:line="90" pos:column="22"/></name><argument_list pos:line="90" pos:column="22">(<argument><expr><name pos:line="90" pos:column="23">APLOG_MARK<pos:position pos:line="90" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="35">APLOG_ERR<pos:position pos:line="90" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="46">0<pos:position pos:line="90" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="49">c<pos:position pos:line="90" pos:column="50"/></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="91" pos:column="23">"failed to decode OCSP response data"<pos:position pos:line="91" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="62"/></expr_stmt>
    }<pos:position pos:line="92" pos:column="6"/></block></then></if>

    <return pos:line="94" pos:column="5">return <expr><name pos:line="94" pos:column="12">response<pos:position pos:line="94" pos:column="20"/></name></expr>;<pos:position pos:line="94" pos:column="21"/></return>
}<pos:position pos:line="95" pos:column="2"/></block></function></unit>
