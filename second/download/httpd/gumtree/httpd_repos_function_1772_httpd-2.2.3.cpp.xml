<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1772_httpd-2.2.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">util_ald_cache_remove<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">util_ald_cache_t<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">cache<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">void<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">payload<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">unsigned<pos:position pos:line="3" pos:column="13"/></name> <name pos:line="3" pos:column="14">long<pos:position pos:line="3" pos:column="18"/></name></type> <name pos:line="3" pos:column="19">hashval<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">util_cache_node_t<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">p<pos:position pos:line="4" pos:column="25"/></name></decl>, <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="28">q<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">cache<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">==<pos:position pos:line="6" pos:column="17"/></operator> <name pos:line="6" pos:column="18">NULL<pos:position pos:line="6" pos:column="22"/></name></expr>)<pos:position pos:line="6" pos:column="23"/></condition><then pos:line="6" pos:column="23">
        <block type="pseudo"><return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><name><name pos:line="9" pos:column="5">cache<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">-&gt;<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="12">removes<pos:position pos:line="9" pos:column="19"/></name></name><operator pos:line="9" pos:column="19">++<pos:position pos:line="9" pos:column="21"/></operator></expr>;<pos:position pos:line="9" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="10" pos:column="5">hashval<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">=<pos:position pos:line="10" pos:column="14"/></operator> <call pos:line="10" pos:column="15">(<modifier pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></modifier><name><name pos:line="10" pos:column="17">cache<pos:position pos:line="10" pos:column="22"/></name><operator pos:line="10" pos:column="22">-&gt;<pos:position pos:line="10" pos:column="27"/></operator><name pos:line="10" pos:column="24">hash<pos:position pos:line="10" pos:column="28"/></name></name>)<argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">payload<pos:position pos:line="10" pos:column="37"/></name></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></call> <operator pos:line="10" pos:column="39">%<pos:position pos:line="10" pos:column="40"/></operator> <name><name pos:line="10" pos:column="41">cache<pos:position pos:line="10" pos:column="46"/></name><operator pos:line="10" pos:column="46">-&gt;<pos:position pos:line="10" pos:column="51"/></operator><name pos:line="10" pos:column="48">size<pos:position pos:line="10" pos:column="52"/></name></name></expr>;<pos:position pos:line="10" pos:column="53"/></expr_stmt>
    <for pos:line="11" pos:column="5">for <control pos:line="11" pos:column="9">(<init><expr><name pos:line="11" pos:column="10">p<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <name><name pos:line="11" pos:column="14">cache<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">-&gt;<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="21">nodes<pos:position pos:line="11" pos:column="26"/></name><index pos:line="11" pos:column="26">[<expr><name pos:line="11" pos:column="27">hashval<pos:position pos:line="11" pos:column="34"/></name></expr>]<pos:position pos:line="11" pos:column="35"/></index></name></expr><operator pos:line="11" pos:column="35">,<pos:position pos:line="11" pos:column="36"/></operator> <expr><name pos:line="11" pos:column="37">q<pos:position pos:line="11" pos:column="38"/></name><operator pos:line="11" pos:column="38">=<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="39">NULL<pos:position pos:line="11" pos:column="43"/></name></expr>;<pos:position pos:line="11" pos:column="44"/></init>
         <condition><expr><name pos:line="12" pos:column="10">p<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">&amp;&amp;<pos:position pos:line="12" pos:column="22"/></operator> <operator pos:line="12" pos:column="15">!<pos:position pos:line="12" pos:column="16"/></operator><call pos:line="12" pos:column="16">(<modifier pos:line="12" pos:column="17">*<pos:position pos:line="12" pos:column="18"/></modifier><name><name pos:line="12" pos:column="18">cache<pos:position pos:line="12" pos:column="23"/></name><operator pos:line="12" pos:column="23">-&gt;<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="25">compare<pos:position pos:line="12" pos:column="32"/></name></name>)<argument_list pos:line="12" pos:column="33">(<argument><expr><name><name pos:line="12" pos:column="34">p<pos:position pos:line="12" pos:column="35"/></name><operator pos:line="12" pos:column="35">-&gt;<pos:position pos:line="12" pos:column="40"/></operator><name pos:line="12" pos:column="37">payload<pos:position pos:line="12" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="46">payload<pos:position pos:line="12" pos:column="53"/></name></expr></argument>)<pos:position pos:line="12" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="55"/></condition>
         <incr><expr><name pos:line="13" pos:column="10">p<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <name><name pos:line="13" pos:column="14">p<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">-&gt;<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="17">next<pos:position pos:line="13" pos:column="21"/></name></name></expr></incr>)<pos:position pos:line="13" pos:column="22"/></control> <block pos:line="13" pos:column="23">{
         <expr_stmt><expr><name pos:line="14" pos:column="10">q<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <name pos:line="14" pos:column="14">p<pos:position pos:line="14" pos:column="15"/></name></expr>;<pos:position pos:line="14" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></for>

    <comment type="block" pos:line="17" pos:column="5">/* If p is null, it means that we couldn't find the node, so just return */</comment>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">p<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">==<pos:position pos:line="18" pos:column="13"/></operator> <name pos:line="18" pos:column="14">NULL<pos:position pos:line="18" pos:column="18"/></name></expr>)<pos:position pos:line="18" pos:column="19"/></condition><then pos:line="18" pos:column="19">
        <block type="pseudo"><return pos:line="19" pos:column="9">return;<pos:position pos:line="19" pos:column="16"/></return></block></then></if>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">q<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">==<pos:position pos:line="21" pos:column="13"/></operator> <name pos:line="21" pos:column="14">NULL<pos:position pos:line="21" pos:column="18"/></name></expr>)<pos:position pos:line="21" pos:column="19"/></condition><then pos:line="21" pos:column="19"> <block pos:line="21" pos:column="20">{
        <comment type="block" pos:line="22" pos:column="9">/* We found the node, and it's the first in the list */</comment>
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">cache<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">-&gt;<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="16">nodes<pos:position pos:line="23" pos:column="21"/></name><index pos:line="23" pos:column="21">[<expr><name pos:line="23" pos:column="22">hashval<pos:position pos:line="23" pos:column="29"/></name></expr>]<pos:position pos:line="23" pos:column="30"/></index></name> <operator pos:line="23" pos:column="31">=<pos:position pos:line="23" pos:column="32"/></operator> <name><name pos:line="23" pos:column="33">p<pos:position pos:line="23" pos:column="34"/></name><operator pos:line="23" pos:column="34">-&gt;<pos:position pos:line="23" pos:column="39"/></operator><name pos:line="23" pos:column="36">next<pos:position pos:line="23" pos:column="40"/></name></name></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then>
    <else pos:line="25" pos:column="5">else <block pos:line="25" pos:column="10">{
        <comment type="block" pos:line="26" pos:column="9">/* We found the node and it's not the first in the list */</comment>
        <expr_stmt><expr><name><name pos:line="27" pos:column="9">q<pos:position pos:line="27" pos:column="10"/></name><operator pos:line="27" pos:column="10">-&gt;<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="12">next<pos:position pos:line="27" pos:column="16"/></name></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <name><name pos:line="27" pos:column="19">p<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">-&gt;<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="22">next<pos:position pos:line="27" pos:column="26"/></name></name></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call pos:line="29" pos:column="5">(<modifier pos:line="29" pos:column="6">*<pos:position pos:line="29" pos:column="7"/></modifier><name><name pos:line="29" pos:column="7">cache<pos:position pos:line="29" pos:column="12"/></name><operator pos:line="29" pos:column="12">-&gt;<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="14">free<pos:position pos:line="29" pos:column="18"/></name></name>)<argument_list pos:line="29" pos:column="19">(<argument><expr><name pos:line="29" pos:column="20">cache<pos:position pos:line="29" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="27">p<pos:position pos:line="29" pos:column="28"/></name><operator pos:line="29" pos:column="28">-&gt;<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="30">payload<pos:position pos:line="29" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">util_ald_free<pos:position pos:line="30" pos:column="18"/></name><argument_list pos:line="30" pos:column="18">(<argument><expr><name pos:line="30" pos:column="19">cache<pos:position pos:line="30" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="26">p<pos:position pos:line="30" pos:column="27"/></name></expr></argument>)<pos:position pos:line="30" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">cache<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">-&gt;<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="12">numentries<pos:position pos:line="31" pos:column="22"/></name></name><operator pos:line="31" pos:column="22">--<pos:position pos:line="31" pos:column="24"/></operator></expr>;<pos:position pos:line="31" pos:column="25"/></expr_stmt>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
