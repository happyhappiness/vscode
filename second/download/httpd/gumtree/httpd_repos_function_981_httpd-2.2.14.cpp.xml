<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_981_httpd-2.2.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">read_table<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">cache_handle_t<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">handle<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">request_rec<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">r<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="2" pos:column="32">apr_table_t<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">table<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">apr_file_t<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">file<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="69"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">w<pos:position pos:line="4" pos:column="11"/></name><index pos:line="4" pos:column="11">[<expr><name pos:line="4" pos:column="12">MAX_STRING_LEN<pos:position pos:line="4" pos:column="26"/></name></expr>]<pos:position pos:line="4" pos:column="27"/></index></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">l<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">p<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_status_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">rv<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>

    <while pos:line="9" pos:column="5">while <condition pos:line="9" pos:column="11">(<expr><literal type="number" pos:line="9" pos:column="12">1<pos:position pos:line="9" pos:column="13"/></literal></expr>)<pos:position pos:line="9" pos:column="14"/></condition> <block pos:line="9" pos:column="15">{

        <comment type="block" pos:line="11" pos:column="9">/* ### What about APR_EOF? */</comment>
        <expr_stmt><expr><name pos:line="12" pos:column="9">rv<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">apr_file_gets<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">w<pos:position pos:line="12" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="31">MAX_STRING_LEN<pos:position pos:line="12" pos:column="45"/></name> <operator pos:line="12" pos:column="46">-<pos:position pos:line="12" pos:column="47"/></operator> <literal type="number" pos:line="12" pos:column="48">1<pos:position pos:line="12" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="51">file<pos:position pos:line="12" pos:column="55"/></name></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="57"/></expr_stmt>
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">rv<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">!=<pos:position pos:line="13" pos:column="18"/></operator> <name pos:line="13" pos:column="19">APR_SUCCESS<pos:position pos:line="13" pos:column="30"/></name></expr>)<pos:position pos:line="13" pos:column="31"/></condition><then pos:line="13" pos:column="31"> <block pos:line="13" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">ap_log_rerror<pos:position pos:line="14" pos:column="26"/></name><argument_list pos:line="14" pos:column="26">(<argument><expr><name pos:line="14" pos:column="27">APLOG_MARK<pos:position pos:line="14" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="39">APLOG_ERR<pos:position pos:line="14" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="50">0<pos:position pos:line="14" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="53">r<pos:position pos:line="14" pos:column="54"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="15" pos:column="27">"Premature end of cache headers."<pos:position pos:line="15" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="62"/></expr_stmt>
            <return pos:line="16" pos:column="13">return <expr><name pos:line="16" pos:column="20">rv<pos:position pos:line="16" pos:column="22"/></name></expr>;<pos:position pos:line="16" pos:column="23"/></return>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="19" pos:column="9">/* Delete terminal (CR?)LF */</comment>

        <expr_stmt><expr><name pos:line="21" pos:column="9">p<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <call><name pos:line="21" pos:column="13">strlen<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">w<pos:position pos:line="21" pos:column="21"/></name></expr></argument>)<pos:position pos:line="21" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt>
        <comment type="block" pos:line="22" pos:column="9">/* Indeed, the host's '\n':
           '\012' for UNIX; '\015' for MacOS; '\025' for OS/390
           -- whatever the script generates.
        */</comment>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">p<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">&gt;<pos:position pos:line="26" pos:column="19"/></operator> <literal type="number" pos:line="26" pos:column="17">0<pos:position pos:line="26" pos:column="18"/></literal> <operator pos:line="26" pos:column="19">&amp;&amp;<pos:position pos:line="26" pos:column="29"/></operator> <name><name pos:line="26" pos:column="22">w<pos:position pos:line="26" pos:column="23"/></name><index pos:line="26" pos:column="23">[<expr><name pos:line="26" pos:column="24">p<pos:position pos:line="26" pos:column="25"/></name> <operator pos:line="26" pos:column="26">-<pos:position pos:line="26" pos:column="27"/></operator> <literal type="number" pos:line="26" pos:column="28">1<pos:position pos:line="26" pos:column="29"/></literal></expr>]<pos:position pos:line="26" pos:column="30"/></index></name> <operator pos:line="26" pos:column="31">==<pos:position pos:line="26" pos:column="33"/></operator> <literal type="char" pos:line="26" pos:column="34">'\n'<pos:position pos:line="26" pos:column="38"/></literal></expr>)<pos:position pos:line="26" pos:column="39"/></condition><then pos:line="26" pos:column="39"> <block pos:line="26" pos:column="40">{
            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><name pos:line="27" pos:column="17">p<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">&gt;<pos:position pos:line="27" pos:column="23"/></operator> <literal type="number" pos:line="27" pos:column="21">1<pos:position pos:line="27" pos:column="22"/></literal> <operator pos:line="27" pos:column="23">&amp;&amp;<pos:position pos:line="27" pos:column="33"/></operator> <name><name pos:line="27" pos:column="26">w<pos:position pos:line="27" pos:column="27"/></name><index pos:line="27" pos:column="27">[<expr><name pos:line="27" pos:column="28">p<pos:position pos:line="27" pos:column="29"/></name> <operator pos:line="27" pos:column="30">-<pos:position pos:line="27" pos:column="31"/></operator> <literal type="number" pos:line="27" pos:column="32">2<pos:position pos:line="27" pos:column="33"/></literal></expr>]<pos:position pos:line="27" pos:column="34"/></index></name> <operator pos:line="27" pos:column="35">==<pos:position pos:line="27" pos:column="37"/></operator> <name pos:line="27" pos:column="38">CR<pos:position pos:line="27" pos:column="40"/></name></expr>)<pos:position pos:line="27" pos:column="41"/></condition><then pos:line="27" pos:column="41"> <block pos:line="27" pos:column="42">{
                <expr_stmt><expr><name><name pos:line="28" pos:column="17">w<pos:position pos:line="28" pos:column="18"/></name><index pos:line="28" pos:column="18">[<expr><name pos:line="28" pos:column="19">p<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">-<pos:position pos:line="28" pos:column="22"/></operator> <literal type="number" pos:line="28" pos:column="23">2<pos:position pos:line="28" pos:column="24"/></literal></expr>]<pos:position pos:line="28" pos:column="25"/></index></name> <operator pos:line="28" pos:column="26">=<pos:position pos:line="28" pos:column="27"/></operator> <literal type="char" pos:line="28" pos:column="28">'\0'<pos:position pos:line="28" pos:column="32"/></literal></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="29" pos:column="14"/></block></then>
            <else pos:line="30" pos:column="13">else <block pos:line="30" pos:column="18">{
                <expr_stmt><expr><name><name pos:line="31" pos:column="17">w<pos:position pos:line="31" pos:column="18"/></name><index pos:line="31" pos:column="18">[<expr><name pos:line="31" pos:column="19">p<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">-<pos:position pos:line="31" pos:column="22"/></operator> <literal type="number" pos:line="31" pos:column="23">1<pos:position pos:line="31" pos:column="24"/></literal></expr>]<pos:position pos:line="31" pos:column="25"/></index></name> <operator pos:line="31" pos:column="26">=<pos:position pos:line="31" pos:column="27"/></operator> <literal type="char" pos:line="31" pos:column="28">'\0'<pos:position pos:line="31" pos:column="32"/></literal></expr>;<pos:position pos:line="31" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="32" pos:column="14"/></block></else></if>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="35" pos:column="9">/* If we've finished reading the headers, break out of the loop. */</comment>
        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name><name pos:line="36" pos:column="13">w<pos:position pos:line="36" pos:column="14"/></name><index pos:line="36" pos:column="14">[<expr><literal type="number" pos:line="36" pos:column="15">0<pos:position pos:line="36" pos:column="16"/></literal></expr>]<pos:position pos:line="36" pos:column="17"/></index></name> <operator pos:line="36" pos:column="18">==<pos:position pos:line="36" pos:column="20"/></operator> <literal type="char" pos:line="36" pos:column="21">'\0'<pos:position pos:line="36" pos:column="25"/></literal></expr>)<pos:position pos:line="36" pos:column="26"/></condition><then pos:line="36" pos:column="26"> <block pos:line="36" pos:column="27">{
            <break pos:line="37" pos:column="13">break;<pos:position pos:line="37" pos:column="19"/></break>
        }<pos:position pos:line="38" pos:column="10"/></block></then></if>

<cpp:if pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">if<pos:position pos:line="40" pos:column="4"/></cpp:directive> <expr><name pos:line="40" pos:column="5">APR_CHARSET_EBCDIC<pos:position pos:line="40" pos:column="23"/></name></expr></cpp:if>
        <comment type="block" pos:line="41" pos:column="9">/* Chances are that we received an ASCII header text instead of
         * the expected EBCDIC header lines. Try to auto-detect:
         */</comment>
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><operator pos:line="44" pos:column="13">!<pos:position pos:line="44" pos:column="14"/></operator><operator pos:line="44" pos:column="14">(<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="15">l<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">=<pos:position pos:line="44" pos:column="18"/></operator> <call><name pos:line="44" pos:column="19">strchr<pos:position pos:line="44" pos:column="25"/></name><argument_list pos:line="44" pos:column="25">(<argument><expr><name pos:line="44" pos:column="26">w<pos:position pos:line="44" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="44" pos:column="29">':'<pos:position pos:line="44" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call><operator pos:line="44" pos:column="33">)<pos:position pos:line="44" pos:column="34"/></operator></expr>)<pos:position pos:line="44" pos:column="35"/></condition><then pos:line="44" pos:column="35"> <block pos:line="44" pos:column="36">{
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">int<pos:position pos:line="45" pos:column="16"/></name></type> <name pos:line="45" pos:column="17">maybeASCII<pos:position pos:line="45" pos:column="27"/></name> <init pos:line="45" pos:column="28">= <expr><literal type="number" pos:line="45" pos:column="30">0<pos:position pos:line="45" pos:column="31"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="45" pos:column="33">maybeEBCDIC<pos:position pos:line="45" pos:column="44"/></name> <init pos:line="45" pos:column="45">= <expr><literal type="number" pos:line="45" pos:column="47">0<pos:position pos:line="45" pos:column="48"/></literal></expr></init></decl>;<pos:position pos:line="45" pos:column="49"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="46" pos:column="13">unsigned<pos:position pos:line="46" pos:column="21"/></name> <name pos:line="46" pos:column="22">char<pos:position pos:line="46" pos:column="26"/></name> <modifier pos:line="46" pos:column="27">*<pos:position pos:line="46" pos:column="28"/></modifier></type><name pos:line="46" pos:column="28">cp<pos:position pos:line="46" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="46" pos:column="32">native<pos:position pos:line="46" pos:column="38"/></name></decl>;<pos:position pos:line="46" pos:column="39"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">apr_size_t<pos:position pos:line="47" pos:column="23"/></name></type> <name pos:line="47" pos:column="24">inbytes_left<pos:position pos:line="47" pos:column="36"/></name></decl>, <decl><type ref="prev"/><name pos:line="47" pos:column="38">outbytes_left<pos:position pos:line="47" pos:column="51"/></name></decl>;<pos:position pos:line="47" pos:column="52"/></decl_stmt>

            <for pos:line="49" pos:column="13">for <control pos:line="49" pos:column="17">(<init><expr><name pos:line="49" pos:column="18">cp<pos:position pos:line="49" pos:column="20"/></name> <operator pos:line="49" pos:column="21">=<pos:position pos:line="49" pos:column="22"/></operator> <name pos:line="49" pos:column="23">w<pos:position pos:line="49" pos:column="24"/></name></expr>;<pos:position pos:line="49" pos:column="25"/></init> <condition><expr><operator pos:line="49" pos:column="26">*<pos:position pos:line="49" pos:column="27"/></operator><name pos:line="49" pos:column="27">cp<pos:position pos:line="49" pos:column="29"/></name> <operator pos:line="49" pos:column="30">!=<pos:position pos:line="49" pos:column="32"/></operator> <literal type="char" pos:line="49" pos:column="33">'\0'<pos:position pos:line="49" pos:column="37"/></literal></expr>;<pos:position pos:line="49" pos:column="38"/></condition> <incr><expr><operator pos:line="49" pos:column="39">++<pos:position pos:line="49" pos:column="41"/></operator><name pos:line="49" pos:column="41">cp<pos:position pos:line="49" pos:column="43"/></name></expr></incr>)<pos:position pos:line="49" pos:column="44"/></control> <block pos:line="49" pos:column="45">{
                <expr_stmt><expr><name pos:line="50" pos:column="17">native<pos:position pos:line="50" pos:column="23"/></name> <operator pos:line="50" pos:column="24">=<pos:position pos:line="50" pos:column="25"/></operator> <call><name pos:line="50" pos:column="26">apr_xlate_conv_byte<pos:position pos:line="50" pos:column="45"/></name><argument_list pos:line="50" pos:column="45">(<argument><expr><name pos:line="50" pos:column="46">ap_hdrs_from_ascii<pos:position pos:line="50" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="66">*<pos:position pos:line="50" pos:column="67"/></operator><name pos:line="50" pos:column="67">cp<pos:position pos:line="50" pos:column="69"/></name></expr></argument>)<pos:position pos:line="50" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="71"/></expr_stmt>
                <if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><call><name pos:line="51" pos:column="21">apr_isprint<pos:position pos:line="51" pos:column="32"/></name><argument_list pos:line="51" pos:column="32">(<argument><expr><operator pos:line="51" pos:column="33">*<pos:position pos:line="51" pos:column="34"/></operator><name pos:line="51" pos:column="34">cp<pos:position pos:line="51" pos:column="36"/></name></expr></argument>)<pos:position pos:line="51" pos:column="37"/></argument_list></call> <operator pos:line="51" pos:column="38">&amp;&amp;<pos:position pos:line="51" pos:column="48"/></operator> <operator pos:line="51" pos:column="41">!<pos:position pos:line="51" pos:column="42"/></operator><call><name pos:line="51" pos:column="42">apr_isprint<pos:position pos:line="51" pos:column="53"/></name><argument_list pos:line="51" pos:column="53">(<argument><expr><name pos:line="51" pos:column="54">native<pos:position pos:line="51" pos:column="60"/></name></expr></argument>)<pos:position pos:line="51" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="62"/></condition><then pos:line="51" pos:column="62">
                    <block type="pseudo"><expr_stmt><expr><operator pos:line="52" pos:column="21">++<pos:position pos:line="52" pos:column="23"/></operator><name pos:line="52" pos:column="23">maybeEBCDIC<pos:position pos:line="52" pos:column="34"/></name></expr>;<pos:position pos:line="52" pos:column="35"/></expr_stmt></block></then></if>
                <if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><operator pos:line="53" pos:column="21">!<pos:position pos:line="53" pos:column="22"/></operator><call><name pos:line="53" pos:column="22">apr_isprint<pos:position pos:line="53" pos:column="33"/></name><argument_list pos:line="53" pos:column="33">(<argument><expr><operator pos:line="53" pos:column="34">*<pos:position pos:line="53" pos:column="35"/></operator><name pos:line="53" pos:column="35">cp<pos:position pos:line="53" pos:column="37"/></name></expr></argument>)<pos:position pos:line="53" pos:column="38"/></argument_list></call> <operator pos:line="53" pos:column="39">&amp;&amp;<pos:position pos:line="53" pos:column="49"/></operator> <call><name pos:line="53" pos:column="42">apr_isprint<pos:position pos:line="53" pos:column="53"/></name><argument_list pos:line="53" pos:column="53">(<argument><expr><name pos:line="53" pos:column="54">native<pos:position pos:line="53" pos:column="60"/></name></expr></argument>)<pos:position pos:line="53" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="62"/></condition><then pos:line="53" pos:column="62">
                    <block type="pseudo"><expr_stmt><expr><operator pos:line="54" pos:column="21">++<pos:position pos:line="54" pos:column="23"/></operator><name pos:line="54" pos:column="23">maybeASCII<pos:position pos:line="54" pos:column="33"/></name></expr>;<pos:position pos:line="54" pos:column="34"/></expr_stmt></block></then></if>
            }<pos:position pos:line="55" pos:column="14"/></block></for>
            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">(<expr><name pos:line="56" pos:column="17">maybeASCII<pos:position pos:line="56" pos:column="27"/></name> <operator pos:line="56" pos:column="28">&gt;<pos:position pos:line="56" pos:column="32"/></operator> <name pos:line="56" pos:column="30">maybeEBCDIC<pos:position pos:line="56" pos:column="41"/></name></expr>)<pos:position pos:line="56" pos:column="42"/></condition><then pos:line="56" pos:column="42"> <block pos:line="56" pos:column="43">{
                <expr_stmt><expr><call><name pos:line="57" pos:column="17">ap_log_error<pos:position pos:line="57" pos:column="29"/></name><argument_list pos:line="57" pos:column="29">(<argument><expr><name pos:line="57" pos:column="30">APLOG_MARK<pos:position pos:line="57" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="42">APLOG_ERR<pos:position pos:line="57" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="53">0<pos:position pos:line="57" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="56">r<pos:position pos:line="57" pos:column="57"/></name><operator pos:line="57" pos:column="57">-&gt;<pos:position pos:line="57" pos:column="62"/></operator><name pos:line="57" pos:column="59">server<pos:position pos:line="57" pos:column="65"/></name></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="58" pos:column="30">"CGI Interface Error: Script headers apparently ASCII: (CGI = %s)"<pos:position pos:line="58" pos:column="96"/></literal></expr></argument>,
                             <argument><expr><name><name pos:line="59" pos:column="30">r<pos:position pos:line="59" pos:column="31"/></name><operator pos:line="59" pos:column="31">-&gt;<pos:position pos:line="59" pos:column="36"/></operator><name pos:line="59" pos:column="33">filename<pos:position pos:line="59" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="43"/></expr_stmt>
                <expr_stmt><expr><name pos:line="60" pos:column="17">inbytes_left<pos:position pos:line="60" pos:column="29"/></name> <operator pos:line="60" pos:column="30">=<pos:position pos:line="60" pos:column="31"/></operator> <name pos:line="60" pos:column="32">outbytes_left<pos:position pos:line="60" pos:column="45"/></name> <operator pos:line="60" pos:column="46">=<pos:position pos:line="60" pos:column="47"/></operator> <name pos:line="60" pos:column="48">cp<pos:position pos:line="60" pos:column="50"/></name> <operator pos:line="60" pos:column="51">-<pos:position pos:line="60" pos:column="52"/></operator> <name pos:line="60" pos:column="53">w<pos:position pos:line="60" pos:column="54"/></name></expr>;<pos:position pos:line="60" pos:column="55"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="61" pos:column="17">apr_xlate_conv_buffer<pos:position pos:line="61" pos:column="38"/></name><argument_list pos:line="61" pos:column="38">(<argument><expr><name pos:line="61" pos:column="39">ap_hdrs_from_ascii<pos:position pos:line="61" pos:column="57"/></name></expr></argument>,
                                      <argument><expr><name pos:line="62" pos:column="39">w<pos:position pos:line="62" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="42">&amp;<pos:position pos:line="62" pos:column="47"/></operator><name pos:line="62" pos:column="43">inbytes_left<pos:position pos:line="62" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="57">w<pos:position pos:line="62" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="60">&amp;<pos:position pos:line="62" pos:column="65"/></operator><name pos:line="62" pos:column="61">outbytes_left<pos:position pos:line="62" pos:column="74"/></name></expr></argument>)<pos:position pos:line="62" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="76"/></expr_stmt>
            }<pos:position pos:line="63" pos:column="14"/></block></then></if>
        }<pos:position pos:line="64" pos:column="10"/></block></then></if>
<cpp:endif pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">endif<pos:position pos:line="65" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="65" pos:column="8">/*APR_CHARSET_EBCDIC*/</comment>

        <comment type="block" pos:line="67" pos:column="9">/* if we see a bogus header don't ignore it. Shout and scream */</comment>
        <if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><operator pos:line="68" pos:column="13">!<pos:position pos:line="68" pos:column="14"/></operator><operator pos:line="68" pos:column="14">(<pos:position pos:line="68" pos:column="15"/></operator><name pos:line="68" pos:column="15">l<pos:position pos:line="68" pos:column="16"/></name> <operator pos:line="68" pos:column="17">=<pos:position pos:line="68" pos:column="18"/></operator> <call><name pos:line="68" pos:column="19">strchr<pos:position pos:line="68" pos:column="25"/></name><argument_list pos:line="68" pos:column="25">(<argument><expr><name pos:line="68" pos:column="26">w<pos:position pos:line="68" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="68" pos:column="29">':'<pos:position pos:line="68" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="33"/></argument_list></call><operator pos:line="68" pos:column="33">)<pos:position pos:line="68" pos:column="34"/></operator></expr>)<pos:position pos:line="68" pos:column="35"/></condition><then pos:line="68" pos:column="35"> <block pos:line="68" pos:column="36">{
            <return pos:line="69" pos:column="13">return <expr><name pos:line="69" pos:column="20">APR_EGENERAL<pos:position pos:line="69" pos:column="32"/></name></expr>;<pos:position pos:line="69" pos:column="33"/></return>
        }<pos:position pos:line="70" pos:column="10"/></block></then></if>

        <expr_stmt><expr><operator pos:line="72" pos:column="9">*<pos:position pos:line="72" pos:column="10"/></operator><name pos:line="72" pos:column="10">l<pos:position pos:line="72" pos:column="11"/></name><operator pos:line="72" pos:column="11">++<pos:position pos:line="72" pos:column="13"/></operator> <operator pos:line="72" pos:column="14">=<pos:position pos:line="72" pos:column="15"/></operator> <literal type="char" pos:line="72" pos:column="16">'\0'<pos:position pos:line="72" pos:column="20"/></literal></expr>;<pos:position pos:line="72" pos:column="21"/></expr_stmt>
        <while pos:line="73" pos:column="9">while <condition pos:line="73" pos:column="15">(<expr><operator pos:line="73" pos:column="16">*<pos:position pos:line="73" pos:column="17"/></operator><name pos:line="73" pos:column="17">l<pos:position pos:line="73" pos:column="18"/></name> <operator pos:line="73" pos:column="19">&amp;&amp;<pos:position pos:line="73" pos:column="29"/></operator> <call><name pos:line="73" pos:column="22">apr_isspace<pos:position pos:line="73" pos:column="33"/></name><argument_list pos:line="73" pos:column="33">(<argument><expr><operator pos:line="73" pos:column="34">*<pos:position pos:line="73" pos:column="35"/></operator><name pos:line="73" pos:column="35">l<pos:position pos:line="73" pos:column="36"/></name></expr></argument>)<pos:position pos:line="73" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="38"/></condition> <block pos:line="73" pos:column="39">{
            <expr_stmt><expr><operator pos:line="74" pos:column="13">++<pos:position pos:line="74" pos:column="15"/></operator><name pos:line="74" pos:column="15">l<pos:position pos:line="74" pos:column="16"/></name></expr>;<pos:position pos:line="74" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="75" pos:column="10"/></block></while>

        <expr_stmt><expr><call><name pos:line="77" pos:column="9">apr_table_add<pos:position pos:line="77" pos:column="22"/></name><argument_list pos:line="77" pos:column="22">(<argument><expr><name pos:line="77" pos:column="23">table<pos:position pos:line="77" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="30">w<pos:position pos:line="77" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="33">l<pos:position pos:line="77" pos:column="34"/></name></expr></argument>)<pos:position pos:line="77" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="78" pos:column="6"/></block></while>

    <return pos:line="80" pos:column="5">return <expr><name pos:line="80" pos:column="12">APR_SUCCESS<pos:position pos:line="80" pos:column="23"/></name></expr>;<pos:position pos:line="80" pos:column="24"/></return>
}<pos:position pos:line="81" pos:column="2"/></block></function></unit>
