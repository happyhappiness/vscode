<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3439_httpd-2.2.15.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">check_library_exists<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">command_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">cmd<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">arg<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">int<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">pathlen<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">libdircheck<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="45">enum<pos:position pos:line="2" pos:column="49"/></name> <name pos:line="2" pos:column="50">lib_type<pos:position pos:line="2" pos:column="58"/></name></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">libtype<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">newarg<pos:position pos:line="4" pos:column="17"/></name></decl>, <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="20">ext<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">pass<pos:position pos:line="5" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="15">rv<pos:position pos:line="5" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="19">newpathlen<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>

    <expr_stmt><expr><name pos:line="7" pos:column="5">newarg<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <operator pos:line="7" pos:column="14">(<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></operator><operator pos:line="7" pos:column="21">)<pos:position pos:line="7" pos:column="22"/></operator><call><name pos:line="7" pos:column="22">malloc<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><call><name pos:line="7" pos:column="29">strlen<pos:position pos:line="7" pos:column="35"/></name><argument_list pos:line="7" pos:column="35">(<argument><expr><name pos:line="7" pos:column="36">arg<pos:position pos:line="7" pos:column="39"/></name></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></call> <operator pos:line="7" pos:column="41">+<pos:position pos:line="7" pos:column="42"/></operator> <literal type="number" pos:line="7" pos:column="43">10<pos:position pos:line="7" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">strcpy<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">newarg<pos:position pos:line="8" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="20">arg<pos:position pos:line="8" pos:column="23"/></name></expr></argument>)<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="9" pos:column="5">newarg<pos:position pos:line="9" pos:column="11"/></name><index pos:line="9" pos:column="11">[<expr><name pos:line="9" pos:column="12">pathlen<pos:position pos:line="9" pos:column="19"/></name></expr>]<pos:position pos:line="9" pos:column="20"/></index></name> <operator pos:line="9" pos:column="21">=<pos:position pos:line="9" pos:column="22"/></operator> <literal type="number" pos:line="9" pos:column="23">0<pos:position pos:line="9" pos:column="24"/></literal></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><name pos:line="11" pos:column="5">newpathlen<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <name pos:line="11" pos:column="18">pathlen<pos:position pos:line="11" pos:column="25"/></name></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">libdircheck<pos:position pos:line="12" pos:column="20"/></name></expr>)<pos:position pos:line="12" pos:column="21"/></condition><then pos:line="12" pos:column="21"> <block pos:line="12" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">strcat<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><name pos:line="13" pos:column="16">newarg<pos:position pos:line="13" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="24">".libs/"<pos:position pos:line="13" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name pos:line="14" pos:column="9">newpathlen<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">+=<pos:position pos:line="14" pos:column="22"/></operator> <sizeof pos:line="14" pos:column="23">sizeof<argument_list pos:line="14" pos:column="29">(<argument><expr><literal type="string" pos:line="14" pos:column="30">".libs/"<pos:position pos:line="14" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></sizeof> <operator pos:line="14" pos:column="40">-<pos:position pos:line="14" pos:column="41"/></operator> <literal type="number" pos:line="14" pos:column="42">1<pos:position pos:line="14" pos:column="43"/></literal></expr>;<pos:position pos:line="14" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">strcpy<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name pos:line="17" pos:column="12">newarg<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">+<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="19">newpathlen<pos:position pos:line="17" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="31">arg<pos:position pos:line="17" pos:column="34"/></name><operator pos:line="17" pos:column="34">+<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="35">pathlen<pos:position pos:line="17" pos:column="42"/></name></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">ext<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <call><name pos:line="18" pos:column="11">strrchr<pos:position pos:line="18" pos:column="18"/></name><argument_list pos:line="18" pos:column="18">(<argument><expr><name pos:line="18" pos:column="19">newarg<pos:position pos:line="18" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="18" pos:column="27">'.'<pos:position pos:line="18" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="31"/></argument_list></call> <operator pos:line="18" pos:column="32">+<pos:position pos:line="18" pos:column="33"/></operator> <literal type="number" pos:line="18" pos:column="34">1<pos:position pos:line="18" pos:column="35"/></literal></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><name pos:line="20" pos:column="5">pass<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <literal type="number" pos:line="20" pos:column="12">0<pos:position pos:line="20" pos:column="13"/></literal></expr>;<pos:position pos:line="20" pos:column="14"/></expr_stmt>

    <do pos:line="22" pos:column="5">do <block pos:line="22" pos:column="8">{
        <decl_stmt><decl><type><name><name pos:line="23" pos:column="9">struct<pos:position pos:line="23" pos:column="15"/></name> <name pos:line="23" pos:column="16">stat<pos:position pos:line="23" pos:column="20"/></name></name></type> <name pos:line="23" pos:column="21">sb<pos:position pos:line="23" pos:column="23"/></name></decl>;<pos:position pos:line="23" pos:column="24"/></decl_stmt>

        <switch pos:line="25" pos:column="9">switch <condition pos:line="25" pos:column="16">(<expr><name pos:line="25" pos:column="17">pass<pos:position pos:line="25" pos:column="21"/></name></expr>)<pos:position pos:line="25" pos:column="22"/></condition> <block pos:line="25" pos:column="23">{
        <case pos:line="26" pos:column="9">case <expr><literal type="number" pos:line="26" pos:column="14">0<pos:position pos:line="26" pos:column="15"/></literal></expr>:<pos:position pos:line="26" pos:column="16"/></case>
            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><name><name pos:line="27" pos:column="17">cmd<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">-&gt;<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="22">options<pos:position pos:line="27" pos:column="29"/></name><operator pos:line="27" pos:column="29">.<pos:position pos:line="27" pos:column="30"/></operator><name pos:line="27" pos:column="30">pic_mode<pos:position pos:line="27" pos:column="38"/></name></name> <operator pos:line="27" pos:column="39">!=<pos:position pos:line="27" pos:column="41"/></operator> <name pos:line="27" pos:column="42">pic_AVOID<pos:position pos:line="27" pos:column="51"/></name> <operator pos:line="27" pos:column="52">&amp;&amp;<pos:position pos:line="27" pos:column="62"/></operator>
                <name><name pos:line="28" pos:column="17">cmd<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">-&gt;<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="22">options<pos:position pos:line="28" pos:column="29"/></name><operator pos:line="28" pos:column="29">.<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="30">shared<pos:position pos:line="28" pos:column="36"/></name></name> <operator pos:line="28" pos:column="37">!=<pos:position pos:line="28" pos:column="39"/></operator> <name pos:line="28" pos:column="40">share_STATIC<pos:position pos:line="28" pos:column="52"/></name></expr>)<pos:position pos:line="28" pos:column="53"/></condition><then pos:line="28" pos:column="53"> <block pos:line="28" pos:column="54">{
                <expr_stmt><expr><call><name pos:line="29" pos:column="17">strcpy<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">(<argument><expr><name pos:line="29" pos:column="24">ext<pos:position pos:line="29" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="29">DYNAMIC_LIB_EXT<pos:position pos:line="29" pos:column="44"/></name></expr></argument>)<pos:position pos:line="29" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="46"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="30" pos:column="17">*<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="18">libtype<pos:position pos:line="30" pos:column="25"/></name> <operator pos:line="30" pos:column="26">=<pos:position pos:line="30" pos:column="27"/></operator> <name pos:line="30" pos:column="28">type_DYNAMIC_LIB<pos:position pos:line="30" pos:column="44"/></name></expr>;<pos:position pos:line="30" pos:column="45"/></expr_stmt>
                <break pos:line="31" pos:column="17">break;<pos:position pos:line="31" pos:column="23"/></break>
            }<pos:position pos:line="32" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="33" pos:column="13">pass<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">=<pos:position pos:line="33" pos:column="19"/></operator> <literal type="number" pos:line="33" pos:column="20">1<pos:position pos:line="33" pos:column="21"/></literal></expr>;<pos:position pos:line="33" pos:column="22"/></expr_stmt>
            <comment type="block" pos:line="34" pos:column="13">/* Fall through */</comment>
        <case pos:line="35" pos:column="9">case <expr><literal type="number" pos:line="35" pos:column="14">1<pos:position pos:line="35" pos:column="15"/></literal></expr>:<pos:position pos:line="35" pos:column="16"/></case>
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">strcpy<pos:position pos:line="36" pos:column="19"/></name><argument_list pos:line="36" pos:column="19">(<argument><expr><name pos:line="36" pos:column="20">ext<pos:position pos:line="36" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="25">STATIC_LIB_EXT<pos:position pos:line="36" pos:column="39"/></name></expr></argument>)<pos:position pos:line="36" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="37" pos:column="13">*<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="14">libtype<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">=<pos:position pos:line="37" pos:column="23"/></operator> <name pos:line="37" pos:column="24">type_STATIC_LIB<pos:position pos:line="37" pos:column="39"/></name></expr>;<pos:position pos:line="37" pos:column="40"/></expr_stmt>
            <break pos:line="38" pos:column="13">break;<pos:position pos:line="38" pos:column="19"/></break>
        <case pos:line="39" pos:column="9">case <expr><literal type="number" pos:line="39" pos:column="14">2<pos:position pos:line="39" pos:column="15"/></literal></expr>:<pos:position pos:line="39" pos:column="16"/></case>
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">strcpy<pos:position pos:line="40" pos:column="19"/></name><argument_list pos:line="40" pos:column="19">(<argument><expr><name pos:line="40" pos:column="20">ext<pos:position pos:line="40" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="25">MODULE_LIB_EXT<pos:position pos:line="40" pos:column="39"/></name></expr></argument>)<pos:position pos:line="40" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="41" pos:column="13">*<pos:position pos:line="41" pos:column="14"/></operator><name pos:line="41" pos:column="14">libtype<pos:position pos:line="41" pos:column="21"/></name> <operator pos:line="41" pos:column="22">=<pos:position pos:line="41" pos:column="23"/></operator> <name pos:line="41" pos:column="24">type_MODULE_LIB<pos:position pos:line="41" pos:column="39"/></name></expr>;<pos:position pos:line="41" pos:column="40"/></expr_stmt>
            <break pos:line="42" pos:column="13">break;<pos:position pos:line="42" pos:column="19"/></break>
        <case pos:line="43" pos:column="9">case <expr><literal type="number" pos:line="43" pos:column="14">3<pos:position pos:line="43" pos:column="15"/></literal></expr>:<pos:position pos:line="43" pos:column="16"/></case>
            <expr_stmt><expr><call><name pos:line="44" pos:column="13">strcpy<pos:position pos:line="44" pos:column="19"/></name><argument_list pos:line="44" pos:column="19">(<argument><expr><name pos:line="44" pos:column="20">ext<pos:position pos:line="44" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="25">OBJECT_EXT<pos:position pos:line="44" pos:column="35"/></name></expr></argument>)<pos:position pos:line="44" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="45" pos:column="13">*<pos:position pos:line="45" pos:column="14"/></operator><name pos:line="45" pos:column="14">libtype<pos:position pos:line="45" pos:column="21"/></name> <operator pos:line="45" pos:column="22">=<pos:position pos:line="45" pos:column="23"/></operator> <name pos:line="45" pos:column="24">type_OBJECT<pos:position pos:line="45" pos:column="35"/></name></expr>;<pos:position pos:line="45" pos:column="36"/></expr_stmt>
            <break pos:line="46" pos:column="13">break;<pos:position pos:line="46" pos:column="19"/></break>
        <default pos:line="47" pos:column="9">default:<pos:position pos:line="47" pos:column="17"/></default>
            <expr_stmt><expr><operator pos:line="48" pos:column="13">*<pos:position pos:line="48" pos:column="14"/></operator><name pos:line="48" pos:column="14">libtype<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">=<pos:position pos:line="48" pos:column="23"/></operator> <name pos:line="48" pos:column="24">type_UNKNOWN<pos:position pos:line="48" pos:column="36"/></name></expr>;<pos:position pos:line="48" pos:column="37"/></expr_stmt>
            <break pos:line="49" pos:column="13">break;<pos:position pos:line="49" pos:column="19"/></break>
        }<pos:position pos:line="50" pos:column="10"/></block></switch> 

        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><operator pos:line="52" pos:column="13">!<pos:position pos:line="52" pos:column="14"/></operator><name><name pos:line="52" pos:column="14">cmd<pos:position pos:line="52" pos:column="17"/></name><operator pos:line="52" pos:column="17">-&gt;<pos:position pos:line="52" pos:column="22"/></operator><name pos:line="52" pos:column="19">options<pos:position pos:line="52" pos:column="26"/></name><operator pos:line="52" pos:column="26">.<pos:position pos:line="52" pos:column="27"/></operator><name pos:line="52" pos:column="27">silent<pos:position pos:line="52" pos:column="33"/></name></name></expr>)<pos:position pos:line="52" pos:column="34"/></condition><then pos:line="52" pos:column="34"> <block pos:line="52" pos:column="35">{
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">printf<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><literal type="string" pos:line="53" pos:column="20">"Checking (lib): %s\n"<pos:position pos:line="53" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="44">newarg<pos:position pos:line="53" pos:column="50"/></name></expr></argument>)<pos:position pos:line="53" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="52"/></expr_stmt>
        }<pos:position pos:line="54" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="55" pos:column="9">rv<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">=<pos:position pos:line="55" pos:column="13"/></operator> <call><name pos:line="55" pos:column="14">stat<pos:position pos:line="55" pos:column="18"/></name><argument_list pos:line="55" pos:column="18">(<argument><expr><name pos:line="55" pos:column="19">newarg<pos:position pos:line="55" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="27">&amp;<pos:position pos:line="55" pos:column="32"/></operator><name pos:line="55" pos:column="28">sb<pos:position pos:line="55" pos:column="30"/></name></expr></argument>)<pos:position pos:line="55" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block>
    while <condition pos:line="57" pos:column="11">(<expr><name pos:line="57" pos:column="12">rv<pos:position pos:line="57" pos:column="14"/></name> <operator pos:line="57" pos:column="15">!=<pos:position pos:line="57" pos:column="17"/></operator> <literal type="number" pos:line="57" pos:column="18">0<pos:position pos:line="57" pos:column="19"/></literal> <operator pos:line="57" pos:column="20">&amp;&amp;<pos:position pos:line="57" pos:column="30"/></operator> <operator pos:line="57" pos:column="23">++<pos:position pos:line="57" pos:column="25"/></operator><name pos:line="57" pos:column="25">pass<pos:position pos:line="57" pos:column="29"/></name> <operator pos:line="57" pos:column="30">&lt;<pos:position pos:line="57" pos:column="34"/></operator> <literal type="number" pos:line="57" pos:column="32">4<pos:position pos:line="57" pos:column="33"/></literal></expr>)<pos:position pos:line="57" pos:column="34"/></condition>;<pos:position pos:line="57" pos:column="35"/></do>

    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name pos:line="59" pos:column="9">rv<pos:position pos:line="59" pos:column="11"/></name> <operator pos:line="59" pos:column="12">==<pos:position pos:line="59" pos:column="14"/></operator> <literal type="number" pos:line="59" pos:column="15">0<pos:position pos:line="59" pos:column="16"/></literal></expr>)<pos:position pos:line="59" pos:column="17"/></condition><then pos:line="59" pos:column="17"> <block pos:line="59" pos:column="18">{
        <return pos:line="60" pos:column="9">return <expr><name pos:line="60" pos:column="16">newarg<pos:position pos:line="60" pos:column="22"/></name></expr>;<pos:position pos:line="60" pos:column="23"/></return>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>

    <return pos:line="63" pos:column="5">return <expr><name pos:line="63" pos:column="12">NULL<pos:position pos:line="63" pos:column="16"/></name></expr>;<pos:position pos:line="63" pos:column="17"/></return>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
