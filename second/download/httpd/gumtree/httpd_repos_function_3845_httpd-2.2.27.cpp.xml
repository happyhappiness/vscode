<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3845_httpd-2.2.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">asyncio<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name><name pos:line="1" pos:column="20">struct<pos:position pos:line="1" pos:column="26"/></name> <name pos:line="1" pos:column="27">aiocb<pos:position pos:line="1" pos:column="32"/></name></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">a<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">DBG_BUFF<pos:position pos:line="3" pos:column="13"/></name>
    <name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">rv<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>

<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">_LP64<pos:position pos:line="6" pos:column="13"/></name></cpp:ifdef>
<cpp:define pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">define<pos:position pos:line="7" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="7" pos:column="9">AIO<pos:position pos:line="7" pos:column="12"/></name></cpp:macro> <cpp:value pos:line="7" pos:column="13">BPX4AIO<pos:position pos:line="7" pos:column="20"/></cpp:value></cpp:define>
<cpp:else pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">else<pos:position pos:line="8" pos:column="6"/></cpp:directive></cpp:else>
<cpp:define pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">define<pos:position pos:line="9" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="9" pos:column="9">AIO<pos:position pos:line="9" pos:column="12"/></name></cpp:macro> <cpp:value pos:line="9" pos:column="13">BPX1AIO<pos:position pos:line="9" pos:column="20"/></cpp:value></cpp:define>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">AIO<pos:position pos:line="12" pos:column="8"/></name><argument_list pos:line="12" pos:column="8">(<argument><expr><sizeof pos:line="12" pos:column="9">sizeof<argument_list pos:line="12" pos:column="15">(<argument><expr pos:line="12" pos:column="16">struct <name pos:line="12" pos:column="23">aiocb<pos:position pos:line="12" pos:column="28"/></name></expr></argument>)<pos:position pos:line="12" pos:column="29"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="12" pos:column="31">a<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="34">&amp;<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="35">rv<pos:position pos:line="12" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="39">&amp;<pos:position pos:line="12" pos:column="44"/></operator><name pos:line="12" pos:column="40">errno<pos:position pos:line="12" pos:column="45"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="47">__err2ad<pos:position pos:line="12" pos:column="55"/></name><argument_list pos:line="12" pos:column="55">()<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">DBG2<pos:position pos:line="13" pos:column="9"/></name><argument_list pos:line="13" pos:column="9">(<argument><expr><literal type="number" pos:line="13" pos:column="10">4<pos:position pos:line="13" pos:column="11"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="13">"BPX4AIO aiocb %p rv %d\n"<pos:position pos:line="13" pos:column="39"/></literal></expr></argument>,
             <argument><expr><name pos:line="14" pos:column="14">a<pos:position pos:line="14" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="17">rv<pos:position pos:line="14" pos:column="19"/></name></expr></argument>)<pos:position pos:line="14" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="21"/></expr_stmt>
<cpp:ifdef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifdef<pos:position pos:line="15" pos:column="7"/></cpp:directive> <name pos:line="15" pos:column="8">DEBUG<pos:position pos:line="15" pos:column="13"/></name></cpp:ifdef>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">rv<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">&lt;<pos:position pos:line="16" pos:column="16"/></operator> <literal type="number" pos:line="16" pos:column="14">0<pos:position pos:line="16" pos:column="15"/></literal></expr>)<pos:position pos:line="16" pos:column="16"/></condition><then pos:line="16" pos:column="16"> <block pos:line="16" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">DBG2<pos:position pos:line="17" pos:column="13"/></name><argument_list pos:line="17" pos:column="13">(<argument><expr><literal type="number" pos:line="17" pos:column="14">4<pos:position pos:line="17" pos:column="15"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="17">"errno %d errnojr %08x\n"<pos:position pos:line="17" pos:column="42"/></literal></expr></argument>,
                 <argument><expr><name pos:line="18" pos:column="18">errno<pos:position pos:line="18" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="25">*<pos:position pos:line="18" pos:column="26"/></operator><call><name pos:line="18" pos:column="26">__err2ad<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">()<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">rv<pos:position pos:line="21" pos:column="14"/></name></expr>;<pos:position pos:line="21" pos:column="15"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
