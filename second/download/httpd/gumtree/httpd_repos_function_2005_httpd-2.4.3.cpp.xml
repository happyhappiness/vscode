<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2005_httpd-2.4.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">do_pattmatch<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">ap_filter_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">f<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">apr_bucket<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">inb<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="2" pos:column="34">apr_bucket_brigade<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">mybb<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="3" pos:column="34">apr_pool_t<pos:position pos:line="3" pos:column="44"/></name> <modifier pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></modifier></type><name pos:line="3" pos:column="46">pool<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="51"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">i<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">force_quick<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><literal type="number" pos:line="6" pos:column="23">0<pos:position pos:line="6" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">ap_regmatch_t<pos:position pos:line="7" pos:column="18"/></name></type> <name><name pos:line="7" pos:column="19">regm<pos:position pos:line="7" pos:column="23"/></name><index pos:line="7" pos:column="23">[<expr><name pos:line="7" pos:column="24">AP_MAX_REG_MATCH<pos:position pos:line="7" pos:column="40"/></name></expr>]<pos:position pos:line="7" pos:column="41"/></index></name></decl>;<pos:position pos:line="7" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_size_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">bytes<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_size_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">len<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">char<pos:position pos:line="10" pos:column="15"/></name> <modifier pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></modifier></type><name pos:line="10" pos:column="17">buff<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">struct<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">ap_varbuf<pos:position pos:line="11" pos:column="21"/></name></name></type> <name pos:line="11" pos:column="22">vb<pos:position pos:line="11" pos:column="24"/></name></decl>;<pos:position pos:line="11" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">apr_bucket<pos:position pos:line="12" pos:column="15"/></name> <modifier pos:line="12" pos:column="16">*<pos:position pos:line="12" pos:column="17"/></modifier></type><name pos:line="12" pos:column="17">b<pos:position pos:line="12" pos:column="18"/></name></decl>;<pos:position pos:line="12" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">apr_bucket<pos:position pos:line="13" pos:column="15"/></name> <modifier pos:line="13" pos:column="16">*<pos:position pos:line="13" pos:column="17"/></modifier></type><name pos:line="13" pos:column="17">tmp_b<pos:position pos:line="13" pos:column="22"/></name></decl>;<pos:position pos:line="13" pos:column="23"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="15" pos:column="5">subst_dir_conf<pos:position pos:line="15" pos:column="19"/></name> <modifier pos:line="15" pos:column="20">*<pos:position pos:line="15" pos:column="21"/></modifier></type><name pos:line="15" pos:column="21">cfg<pos:position pos:line="15" pos:column="24"/></name> <init pos:line="15" pos:column="25">=
    <expr><operator pos:line="16" pos:column="5">(<pos:position pos:line="16" pos:column="6"/></operator><name pos:line="16" pos:column="6">subst_dir_conf<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">*<pos:position pos:line="16" pos:column="22"/></operator><operator pos:line="16" pos:column="22">)<pos:position pos:line="16" pos:column="23"/></operator> <call><name pos:line="16" pos:column="24">ap_get_module_config<pos:position pos:line="16" pos:column="44"/></name><argument_list pos:line="16" pos:column="44">(<argument><expr><name><name pos:line="16" pos:column="45">f<pos:position pos:line="16" pos:column="46"/></name><operator pos:line="16" pos:column="46">-&gt;<pos:position pos:line="16" pos:column="51"/></operator><name pos:line="16" pos:column="48">r<pos:position pos:line="16" pos:column="49"/></name><operator pos:line="16" pos:column="49">-&gt;<pos:position pos:line="16" pos:column="54"/></operator><name pos:line="16" pos:column="51">per_dir_config<pos:position pos:line="16" pos:column="65"/></name></name></expr></argument>,
                                             <argument><expr><operator pos:line="17" pos:column="46">&amp;<pos:position pos:line="17" pos:column="51"/></operator><name pos:line="17" pos:column="47">substitute_module<pos:position pos:line="17" pos:column="64"/></name></expr></argument>)<pos:position pos:line="17" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="66"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">subst_pattern_t<pos:position pos:line="18" pos:column="20"/></name> <modifier pos:line="18" pos:column="21">*<pos:position pos:line="18" pos:column="22"/></modifier></type><name pos:line="18" pos:column="22">script<pos:position pos:line="18" pos:column="28"/></name></decl>;<pos:position pos:line="18" pos:column="29"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><name pos:line="20" pos:column="29">mybb<pos:position pos:line="20" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="35">inb<pos:position pos:line="20" pos:column="38"/></name></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">ap_varbuf_init<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">pool<pos:position pos:line="21" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="26">&amp;<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="27">vb<pos:position pos:line="21" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="31">0<pos:position pos:line="21" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><name pos:line="23" pos:column="5">script<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <operator pos:line="23" pos:column="14">(<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">subst_pattern_t<pos:position pos:line="23" pos:column="30"/></name> <operator pos:line="23" pos:column="31">*<pos:position pos:line="23" pos:column="32"/></operator><operator pos:line="23" pos:column="32">)<pos:position pos:line="23" pos:column="33"/></operator> <name><name pos:line="23" pos:column="34">cfg<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">-&gt;<pos:position pos:line="23" pos:column="42"/></operator><name pos:line="23" pos:column="39">patterns<pos:position pos:line="23" pos:column="47"/></name><operator pos:line="23" pos:column="47">-&gt;<pos:position pos:line="23" pos:column="52"/></operator><name pos:line="23" pos:column="49">elts<pos:position pos:line="23" pos:column="53"/></name></name></expr>;<pos:position pos:line="23" pos:column="54"/></expr_stmt>
    <comment type="block" pos:line="24" pos:column="5">/*
     * Simple optimization. If we only have one pattern, then
     * we can safely avoid the overhead of flattening
     */</comment>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name><name pos:line="28" pos:column="9">cfg<pos:position pos:line="28" pos:column="12"/></name><operator pos:line="28" pos:column="12">-&gt;<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="14">patterns<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">-&gt;<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="24">nelts<pos:position pos:line="28" pos:column="29"/></name></name> <operator pos:line="28" pos:column="30">==<pos:position pos:line="28" pos:column="32"/></operator> <literal type="number" pos:line="28" pos:column="33">1<pos:position pos:line="28" pos:column="34"/></literal></expr>)<pos:position pos:line="28" pos:column="35"/></condition><then pos:line="28" pos:column="35"> <block pos:line="28" pos:column="36">{
       <expr_stmt><expr><name pos:line="29" pos:column="8">force_quick<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">=<pos:position pos:line="29" pos:column="21"/></operator> <literal type="number" pos:line="29" pos:column="22">1<pos:position pos:line="29" pos:column="23"/></literal></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
    <for pos:line="31" pos:column="5">for <control pos:line="31" pos:column="9">(<init><expr><name pos:line="31" pos:column="10">i<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <literal type="number" pos:line="31" pos:column="14">0<pos:position pos:line="31" pos:column="15"/></literal></expr>;<pos:position pos:line="31" pos:column="16"/></init> <condition><expr><name pos:line="31" pos:column="17">i<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">&lt;<pos:position pos:line="31" pos:column="23"/></operator> <name><name pos:line="31" pos:column="21">cfg<pos:position pos:line="31" pos:column="24"/></name><operator pos:line="31" pos:column="24">-&gt;<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="26">patterns<pos:position pos:line="31" pos:column="34"/></name><operator pos:line="31" pos:column="34">-&gt;<pos:position pos:line="31" pos:column="39"/></operator><name pos:line="31" pos:column="36">nelts<pos:position pos:line="31" pos:column="41"/></name></name></expr>;<pos:position pos:line="31" pos:column="42"/></condition> <incr><expr><name pos:line="31" pos:column="43">i<pos:position pos:line="31" pos:column="44"/></name><operator pos:line="31" pos:column="44">++<pos:position pos:line="31" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="31" pos:column="47"/></control> <block pos:line="31" pos:column="48">{
        <for pos:line="32" pos:column="9">for <control pos:line="32" pos:column="13">(<init><expr><name pos:line="32" pos:column="14">b<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator> <call><name pos:line="32" pos:column="18">APR_BRIGADE_FIRST<pos:position pos:line="32" pos:column="35"/></name><argument_list pos:line="32" pos:column="35">(<argument><expr><name pos:line="32" pos:column="36">mybb<pos:position pos:line="32" pos:column="40"/></name></expr></argument>)<pos:position pos:line="32" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="42"/></init>
             <condition><expr><name pos:line="33" pos:column="14">b<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">!=<pos:position pos:line="33" pos:column="18"/></operator> <call><name pos:line="33" pos:column="19">APR_BRIGADE_SENTINEL<pos:position pos:line="33" pos:column="39"/></name><argument_list pos:line="33" pos:column="39">(<argument><expr><name pos:line="33" pos:column="40">mybb<pos:position pos:line="33" pos:column="44"/></name></expr></argument>)<pos:position pos:line="33" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="46"/></condition>
             <incr><expr><name pos:line="34" pos:column="14">b<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <call><name pos:line="34" pos:column="18">APR_BUCKET_NEXT<pos:position pos:line="34" pos:column="33"/></name><argument_list pos:line="34" pos:column="33">(<argument><expr><name pos:line="34" pos:column="34">b<pos:position pos:line="34" pos:column="35"/></name></expr></argument>)<pos:position pos:line="34" pos:column="36"/></argument_list></call></expr></incr>)<pos:position pos:line="34" pos:column="37"/></control> <block pos:line="34" pos:column="38">{
            <if pos:line="35" pos:column="13">if <condition pos:line="35" pos:column="16">(<expr><call><name pos:line="35" pos:column="17">APR_BUCKET_IS_METADATA<pos:position pos:line="35" pos:column="39"/></name><argument_list pos:line="35" pos:column="39">(<argument><expr><name pos:line="35" pos:column="40">b<pos:position pos:line="35" pos:column="41"/></name></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="43"/></condition><then pos:line="35" pos:column="43"> <block pos:line="35" pos:column="44">{
                <comment type="block" pos:line="36" pos:column="17">/*
                 * we should NEVER see this, because we should never
                 * be passed any, but "handle" it just in case.
                 */</comment>
                <continue pos:line="40" pos:column="17">continue;<pos:position pos:line="40" pos:column="26"/></continue>
            }<pos:position pos:line="41" pos:column="14"/></block></then></if>
            <if pos:line="42" pos:column="13">if <condition pos:line="42" pos:column="16">(<expr><call><name pos:line="42" pos:column="17">apr_bucket_read<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><name pos:line="42" pos:column="33">b<pos:position pos:line="42" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="36">&amp;<pos:position pos:line="42" pos:column="41"/></operator><name pos:line="42" pos:column="37">buff<pos:position pos:line="42" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="43">&amp;<pos:position pos:line="42" pos:column="48"/></operator><name pos:line="42" pos:column="44">bytes<pos:position pos:line="42" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="51">APR_BLOCK_READ<pos:position pos:line="42" pos:column="65"/></name></expr></argument>)<pos:position pos:line="42" pos:column="66"/></argument_list></call>
                    <operator pos:line="43" pos:column="21">==<pos:position pos:line="43" pos:column="23"/></operator> <name pos:line="43" pos:column="24">APR_SUCCESS<pos:position pos:line="43" pos:column="35"/></name></expr>)<pos:position pos:line="43" pos:column="36"/></condition><then pos:line="43" pos:column="36"> <block pos:line="43" pos:column="37">{
                <decl_stmt><decl><type><name pos:line="44" pos:column="17">int<pos:position pos:line="44" pos:column="20"/></name></type> <name pos:line="44" pos:column="21">have_match<pos:position pos:line="44" pos:column="31"/></name> <init pos:line="44" pos:column="32">= <expr><literal type="number" pos:line="44" pos:column="34">0<pos:position pos:line="44" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="44" pos:column="36"/></decl_stmt>
                <expr_stmt><expr><name><name pos:line="45" pos:column="17">vb<pos:position pos:line="45" pos:column="19"/></name><operator pos:line="45" pos:column="19">.<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="20">strlen<pos:position pos:line="45" pos:column="26"/></name></name> <operator pos:line="45" pos:column="27">=<pos:position pos:line="45" pos:column="28"/></operator> <literal type="number" pos:line="45" pos:column="29">0<pos:position pos:line="45" pos:column="30"/></literal></expr>;<pos:position pos:line="45" pos:column="31"/></expr_stmt>
                <if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><name><name pos:line="46" pos:column="21">script<pos:position pos:line="46" pos:column="27"/></name><operator pos:line="46" pos:column="27">-&gt;<pos:position pos:line="46" pos:column="32"/></operator><name pos:line="46" pos:column="29">pattern<pos:position pos:line="46" pos:column="36"/></name></name></expr>)<pos:position pos:line="46" pos:column="37"/></condition><then pos:line="46" pos:column="37"> <block pos:line="46" pos:column="38">{
                    <decl_stmt><decl><type><specifier pos:line="47" pos:column="21">const<pos:position pos:line="47" pos:column="26"/></specifier> <name pos:line="47" pos:column="27">char<pos:position pos:line="47" pos:column="31"/></name> <modifier pos:line="47" pos:column="32">*<pos:position pos:line="47" pos:column="33"/></modifier></type><name pos:line="47" pos:column="33">repl<pos:position pos:line="47" pos:column="37"/></name></decl>;<pos:position pos:line="47" pos:column="38"/></decl_stmt>
                    <comment type="block" pos:line="48" pos:column="21">/*
                     * space_left counts how many bytes we have left until the
                     * line length reaches AP_SUBST_MAX_LINE_LENGTH.
                     */</comment>
                    <decl_stmt><decl><type><name pos:line="52" pos:column="21">apr_size_t<pos:position pos:line="52" pos:column="31"/></name></type> <name pos:line="52" pos:column="32">space_left<pos:position pos:line="52" pos:column="42"/></name> <init pos:line="52" pos:column="43">= <expr><name pos:line="52" pos:column="45">AP_SUBST_MAX_LINE_LENGTH<pos:position pos:line="52" pos:column="69"/></name></expr></init></decl>;<pos:position pos:line="52" pos:column="70"/></decl_stmt>
                    <decl_stmt><decl><type><name pos:line="53" pos:column="21">apr_size_t<pos:position pos:line="53" pos:column="31"/></name></type> <name pos:line="53" pos:column="32">repl_len<pos:position pos:line="53" pos:column="40"/></name> <init pos:line="53" pos:column="41">= <expr><call><name pos:line="53" pos:column="43">strlen<pos:position pos:line="53" pos:column="49"/></name><argument_list pos:line="53" pos:column="49">(<argument><expr><name><name pos:line="53" pos:column="50">script<pos:position pos:line="53" pos:column="56"/></name><operator pos:line="53" pos:column="56">-&gt;<pos:position pos:line="53" pos:column="61"/></operator><name pos:line="53" pos:column="58">replacement<pos:position pos:line="53" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="53" pos:column="71"/></decl_stmt>
                    <while pos:line="54" pos:column="21">while <condition pos:line="54" pos:column="27">(<expr><operator pos:line="54" pos:column="28">(<pos:position pos:line="54" pos:column="29"/></operator><name pos:line="54" pos:column="29">repl<pos:position pos:line="54" pos:column="33"/></name> <operator pos:line="54" pos:column="34">=<pos:position pos:line="54" pos:column="35"/></operator> <call><name pos:line="54" pos:column="36">apr_strmatch<pos:position pos:line="54" pos:column="48"/></name><argument_list pos:line="54" pos:column="48">(<argument><expr><name><name pos:line="54" pos:column="49">script<pos:position pos:line="54" pos:column="55"/></name><operator pos:line="54" pos:column="55">-&gt;<pos:position pos:line="54" pos:column="60"/></operator><name pos:line="54" pos:column="57">pattern<pos:position pos:line="54" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="66">buff<pos:position pos:line="54" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="72">bytes<pos:position pos:line="54" pos:column="77"/></name></expr></argument>)<pos:position pos:line="54" pos:column="78"/></argument_list></call><operator pos:line="54" pos:column="78">)<pos:position pos:line="54" pos:column="79"/></operator></expr>)<pos:position pos:line="54" pos:column="80"/></condition>
                    <block pos:line="55" pos:column="21">{
                        <expr_stmt><expr><name pos:line="56" pos:column="25">have_match<pos:position pos:line="56" pos:column="35"/></name> <operator pos:line="56" pos:column="36">=<pos:position pos:line="56" pos:column="37"/></operator> <literal type="number" pos:line="56" pos:column="38">1<pos:position pos:line="56" pos:column="39"/></literal></expr>;<pos:position pos:line="56" pos:column="40"/></expr_stmt>
                        <comment type="block" pos:line="57" pos:column="25">/* get offset into buff for pattern */</comment>
                        <expr_stmt><expr><name pos:line="58" pos:column="25">len<pos:position pos:line="58" pos:column="28"/></name> <operator pos:line="58" pos:column="29">=<pos:position pos:line="58" pos:column="30"/></operator> <call pos:line="58" pos:column="31">(<name pos:line="58" pos:column="32">apr_size_t<pos:position pos:line="58" pos:column="42"/></name>) <argument_list pos:line="58" pos:column="44">(<argument><expr><name pos:line="58" pos:column="45">repl<pos:position pos:line="58" pos:column="49"/></name> <operator pos:line="58" pos:column="50">-<pos:position pos:line="58" pos:column="51"/></operator> <name pos:line="58" pos:column="52">buff<pos:position pos:line="58" pos:column="56"/></name></expr></argument>)<pos:position pos:line="58" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="58"/></expr_stmt>
                        <if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><name><name pos:line="59" pos:column="29">script<pos:position pos:line="59" pos:column="35"/></name><operator pos:line="59" pos:column="35">-&gt;<pos:position pos:line="59" pos:column="40"/></operator><name pos:line="59" pos:column="37">flatten<pos:position pos:line="59" pos:column="44"/></name></name> <operator pos:line="59" pos:column="45">&amp;&amp;<pos:position pos:line="59" pos:column="55"/></operator> <operator pos:line="59" pos:column="48">!<pos:position pos:line="59" pos:column="49"/></operator><name pos:line="59" pos:column="49">force_quick<pos:position pos:line="59" pos:column="60"/></name></expr>)<pos:position pos:line="59" pos:column="61"/></condition><then pos:line="59" pos:column="61"> <block pos:line="59" pos:column="62">{
                            <comment type="block" pos:line="60" pos:column="29">/*
                             * We are flattening the buckets here, meaning
                             * that we don't do the fast bucket splits.
                             * Instead we copy over what the buckets would
                             * contain and use them. This is slow, since we
                             * are constanting allocing space and copying
                             * strings.
                             */</comment>
                            <if pos:line="68" pos:column="29">if <condition pos:line="68" pos:column="32">(<expr><name><name pos:line="68" pos:column="33">vb<pos:position pos:line="68" pos:column="35"/></name><operator pos:line="68" pos:column="35">.<pos:position pos:line="68" pos:column="36"/></operator><name pos:line="68" pos:column="36">strlen<pos:position pos:line="68" pos:column="42"/></name></name> <operator pos:line="68" pos:column="43">+<pos:position pos:line="68" pos:column="44"/></operator> <name pos:line="68" pos:column="45">len<pos:position pos:line="68" pos:column="48"/></name> <operator pos:line="68" pos:column="49">+<pos:position pos:line="68" pos:column="50"/></operator> <name pos:line="68" pos:column="51">repl_len<pos:position pos:line="68" pos:column="59"/></name> <operator pos:line="68" pos:column="60">&gt;<pos:position pos:line="68" pos:column="64"/></operator> <name pos:line="68" pos:column="62">AP_SUBST_MAX_LINE_LENGTH<pos:position pos:line="68" pos:column="86"/></name></expr>)<pos:position pos:line="68" pos:column="87"/></condition><then pos:line="68" pos:column="87">
                                <block type="pseudo"><return pos:line="69" pos:column="33">return <expr><name pos:line="69" pos:column="40">APR_ENOMEM<pos:position pos:line="69" pos:column="50"/></name></expr>;<pos:position pos:line="69" pos:column="51"/></return></block></then></if>
                            <expr_stmt><expr><call><name pos:line="70" pos:column="29">ap_varbuf_strmemcat<pos:position pos:line="70" pos:column="48"/></name><argument_list pos:line="70" pos:column="48">(<argument><expr><operator pos:line="70" pos:column="49">&amp;<pos:position pos:line="70" pos:column="54"/></operator><name pos:line="70" pos:column="50">vb<pos:position pos:line="70" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="54">buff<pos:position pos:line="70" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="60">len<pos:position pos:line="70" pos:column="63"/></name></expr></argument>)<pos:position pos:line="70" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="65"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="71" pos:column="29">ap_varbuf_strmemcat<pos:position pos:line="71" pos:column="48"/></name><argument_list pos:line="71" pos:column="48">(<argument><expr><operator pos:line="71" pos:column="49">&amp;<pos:position pos:line="71" pos:column="54"/></operator><name pos:line="71" pos:column="50">vb<pos:position pos:line="71" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="54">script<pos:position pos:line="71" pos:column="60"/></name><operator pos:line="71" pos:column="60">-&gt;<pos:position pos:line="71" pos:column="65"/></operator><name pos:line="71" pos:column="62">replacement<pos:position pos:line="71" pos:column="73"/></name></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="75">repl_len<pos:position pos:line="71" pos:column="83"/></name></expr></argument>)<pos:position pos:line="71" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="85"/></expr_stmt>
                        }<pos:position pos:line="72" pos:column="26"/></block></then>
                        <else pos:line="73" pos:column="25">else <block pos:line="73" pos:column="30">{
                            <comment type="block" pos:line="74" pos:column="29">/*
                             * The string before the match but after the
                             * previous match (if any) has length 'len'.
                             * Check if we still have space for this string and
                             * the replacement string.
                             */</comment>
                            <if pos:line="80" pos:column="29">if <condition pos:line="80" pos:column="32">(<expr><name pos:line="80" pos:column="33">space_left<pos:position pos:line="80" pos:column="43"/></name> <operator pos:line="80" pos:column="44">&lt;<pos:position pos:line="80" pos:column="48"/></operator> <name pos:line="80" pos:column="46">len<pos:position pos:line="80" pos:column="49"/></name> <operator pos:line="80" pos:column="50">+<pos:position pos:line="80" pos:column="51"/></operator> <name pos:line="80" pos:column="52">repl_len<pos:position pos:line="80" pos:column="60"/></name></expr>)<pos:position pos:line="80" pos:column="61"/></condition><then pos:line="80" pos:column="61">
                                <block type="pseudo"><return pos:line="81" pos:column="33">return <expr><name pos:line="81" pos:column="40">APR_ENOMEM<pos:position pos:line="81" pos:column="50"/></name></expr>;<pos:position pos:line="81" pos:column="51"/></return></block></then></if>
                            <expr_stmt><expr><name pos:line="82" pos:column="29">space_left<pos:position pos:line="82" pos:column="39"/></name> <operator pos:line="82" pos:column="40">-=<pos:position pos:line="82" pos:column="42"/></operator> <name pos:line="82" pos:column="43">len<pos:position pos:line="82" pos:column="46"/></name> <operator pos:line="82" pos:column="47">+<pos:position pos:line="82" pos:column="48"/></operator> <name pos:line="82" pos:column="49">repl_len<pos:position pos:line="82" pos:column="57"/></name></expr>;<pos:position pos:line="82" pos:column="58"/></expr_stmt>
                            <comment type="block" pos:line="83" pos:column="29">/*
                             * We now split off the string before the match
                             * as its own bucket, then isolate the matched
                             * string and delete it.
                             */</comment>
                            <expr_stmt><expr><call><name pos:line="88" pos:column="29">SEDRMPATBCKT<pos:position pos:line="88" pos:column="41"/></name><argument_list pos:line="88" pos:column="41">(<argument><expr><name pos:line="88" pos:column="42">b<pos:position pos:line="88" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="45">len<pos:position pos:line="88" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="50">tmp_b<pos:position pos:line="88" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="57">script<pos:position pos:line="88" pos:column="63"/></name><operator pos:line="88" pos:column="63">-&gt;<pos:position pos:line="88" pos:column="68"/></operator><name pos:line="88" pos:column="65">patlen<pos:position pos:line="88" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="73"/></expr_stmt>
                            <comment type="block" pos:line="89" pos:column="29">/*
                             * Finally, we create a bucket that contains the
                             * replacement...
                             */</comment>
                            <expr_stmt><expr><name pos:line="93" pos:column="29">tmp_b<pos:position pos:line="93" pos:column="34"/></name> <operator pos:line="93" pos:column="35">=<pos:position pos:line="93" pos:column="36"/></operator> <call><name pos:line="93" pos:column="37">apr_bucket_transient_create<pos:position pos:line="93" pos:column="64"/></name><argument_list pos:line="93" pos:column="64">(<argument><expr><name><name pos:line="93" pos:column="65">script<pos:position pos:line="93" pos:column="71"/></name><operator pos:line="93" pos:column="71">-&gt;<pos:position pos:line="93" pos:column="76"/></operator><name pos:line="93" pos:column="73">replacement<pos:position pos:line="93" pos:column="84"/></name></name></expr></argument>,
                                      <argument><expr><name><name pos:line="94" pos:column="39">script<pos:position pos:line="94" pos:column="45"/></name><operator pos:line="94" pos:column="45">-&gt;<pos:position pos:line="94" pos:column="50"/></operator><name pos:line="94" pos:column="47">replen<pos:position pos:line="94" pos:column="53"/></name></name></expr></argument>,
                                      <argument><expr><name><name pos:line="95" pos:column="39">f<pos:position pos:line="95" pos:column="40"/></name><operator pos:line="95" pos:column="40">-&gt;<pos:position pos:line="95" pos:column="45"/></operator><name pos:line="95" pos:column="42">r<pos:position pos:line="95" pos:column="43"/></name><operator pos:line="95" pos:column="43">-&gt;<pos:position pos:line="95" pos:column="48"/></operator><name pos:line="95" pos:column="45">connection<pos:position pos:line="95" pos:column="55"/></name><operator pos:line="95" pos:column="55">-&gt;<pos:position pos:line="95" pos:column="60"/></operator><name pos:line="95" pos:column="57">bucket_alloc<pos:position pos:line="95" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="71"/></expr_stmt>
                            <comment type="block" pos:line="96" pos:column="29">/* ... and insert it */</comment>
                            <expr_stmt><expr><call><name pos:line="97" pos:column="29">APR_BUCKET_INSERT_BEFORE<pos:position pos:line="97" pos:column="53"/></name><argument_list pos:line="97" pos:column="53">(<argument><expr><name pos:line="97" pos:column="54">b<pos:position pos:line="97" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="57">tmp_b<pos:position pos:line="97" pos:column="62"/></name></expr></argument>)<pos:position pos:line="97" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="64"/></expr_stmt>
                        }<pos:position pos:line="98" pos:column="26"/></block></else></if>
                        <comment type="block" pos:line="99" pos:column="25">/* now we need to adjust buff for all these changes */</comment>
                        <expr_stmt><expr><name pos:line="100" pos:column="25">len<pos:position pos:line="100" pos:column="28"/></name> <operator pos:line="100" pos:column="29">+=<pos:position pos:line="100" pos:column="31"/></operator> <name><name pos:line="100" pos:column="32">script<pos:position pos:line="100" pos:column="38"/></name><operator pos:line="100" pos:column="38">-&gt;<pos:position pos:line="100" pos:column="43"/></operator><name pos:line="100" pos:column="40">patlen<pos:position pos:line="100" pos:column="46"/></name></name></expr>;<pos:position pos:line="100" pos:column="47"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="101" pos:column="25">bytes<pos:position pos:line="101" pos:column="30"/></name> <operator pos:line="101" pos:column="31">-=<pos:position pos:line="101" pos:column="33"/></operator> <name pos:line="101" pos:column="34">len<pos:position pos:line="101" pos:column="37"/></name></expr>;<pos:position pos:line="101" pos:column="38"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="102" pos:column="25">buff<pos:position pos:line="102" pos:column="29"/></name> <operator pos:line="102" pos:column="30">+=<pos:position pos:line="102" pos:column="32"/></operator> <name pos:line="102" pos:column="33">len<pos:position pos:line="102" pos:column="36"/></name></expr>;<pos:position pos:line="102" pos:column="37"/></expr_stmt>
                    }<pos:position pos:line="103" pos:column="22"/></block></while>
                    <if pos:line="104" pos:column="21">if <condition pos:line="104" pos:column="24">(<expr><name pos:line="104" pos:column="25">have_match<pos:position pos:line="104" pos:column="35"/></name></expr>)<pos:position pos:line="104" pos:column="36"/></condition><then pos:line="104" pos:column="36"> <block pos:line="104" pos:column="37">{
                        <if pos:line="105" pos:column="25">if <condition pos:line="105" pos:column="28">(<expr><name><name pos:line="105" pos:column="29">script<pos:position pos:line="105" pos:column="35"/></name><operator pos:line="105" pos:column="35">-&gt;<pos:position pos:line="105" pos:column="40"/></operator><name pos:line="105" pos:column="37">flatten<pos:position pos:line="105" pos:column="44"/></name></name> <operator pos:line="105" pos:column="45">&amp;&amp;<pos:position pos:line="105" pos:column="55"/></operator> <operator pos:line="105" pos:column="48">!<pos:position pos:line="105" pos:column="49"/></operator><name pos:line="105" pos:column="49">force_quick<pos:position pos:line="105" pos:column="60"/></name></expr>)<pos:position pos:line="105" pos:column="61"/></condition><then pos:line="105" pos:column="61"> <block pos:line="105" pos:column="62">{
                            <comment type="block" pos:line="106" pos:column="29">/* XXX: we should check for AP_MAX_BUCKETS here and
                             * XXX: call ap_pass_brigade accordingly
                             */</comment>
                            <decl_stmt><decl><type><name pos:line="109" pos:column="29">char<pos:position pos:line="109" pos:column="33"/></name> <modifier pos:line="109" pos:column="34">*<pos:position pos:line="109" pos:column="35"/></modifier></type><name pos:line="109" pos:column="35">copy<pos:position pos:line="109" pos:column="39"/></name> <init pos:line="109" pos:column="40">= <expr><call><name pos:line="109" pos:column="42">ap_varbuf_pdup<pos:position pos:line="109" pos:column="56"/></name><argument_list pos:line="109" pos:column="56">(<argument><expr><name pos:line="109" pos:column="57">pool<pos:position pos:line="109" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="109" pos:column="63">&amp;<pos:position pos:line="109" pos:column="68"/></operator><name pos:line="109" pos:column="64">vb<pos:position pos:line="109" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="68">NULL<pos:position pos:line="109" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="109" pos:column="74">0<pos:position pos:line="109" pos:column="75"/></literal></expr></argument>,
                                                        <argument><expr><name pos:line="110" pos:column="57">buff<pos:position pos:line="110" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="63">bytes<pos:position pos:line="110" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="110" pos:column="70">&amp;<pos:position pos:line="110" pos:column="75"/></operator><name pos:line="110" pos:column="71">len<pos:position pos:line="110" pos:column="74"/></name></expr></argument>)<pos:position pos:line="110" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="110" pos:column="76"/></decl_stmt>
                            <expr_stmt><expr><name pos:line="111" pos:column="29">tmp_b<pos:position pos:line="111" pos:column="34"/></name> <operator pos:line="111" pos:column="35">=<pos:position pos:line="111" pos:column="36"/></operator> <call><name pos:line="111" pos:column="37">apr_bucket_pool_create<pos:position pos:line="111" pos:column="59"/></name><argument_list pos:line="111" pos:column="59">(<argument><expr><name pos:line="111" pos:column="60">copy<pos:position pos:line="111" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="66">len<pos:position pos:line="111" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="71">pool<pos:position pos:line="111" pos:column="75"/></name></expr></argument>,
                                                           <argument><expr><name><name pos:line="112" pos:column="60">f<pos:position pos:line="112" pos:column="61"/></name><operator pos:line="112" pos:column="61">-&gt;<pos:position pos:line="112" pos:column="66"/></operator><name pos:line="112" pos:column="63">r<pos:position pos:line="112" pos:column="64"/></name><operator pos:line="112" pos:column="64">-&gt;<pos:position pos:line="112" pos:column="69"/></operator><name pos:line="112" pos:column="66">connection<pos:position pos:line="112" pos:column="76"/></name><operator pos:line="112" pos:column="76">-&gt;<pos:position pos:line="112" pos:column="81"/></operator><name pos:line="112" pos:column="78">bucket_alloc<pos:position pos:line="112" pos:column="90"/></name></name></expr></argument>)<pos:position pos:line="112" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="92"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="113" pos:column="29">APR_BUCKET_INSERT_BEFORE<pos:position pos:line="113" pos:column="53"/></name><argument_list pos:line="113" pos:column="53">(<argument><expr><name pos:line="113" pos:column="54">b<pos:position pos:line="113" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="57">tmp_b<pos:position pos:line="113" pos:column="62"/></name></expr></argument>)<pos:position pos:line="113" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="64"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="114" pos:column="29">apr_bucket_delete<pos:position pos:line="114" pos:column="46"/></name><argument_list pos:line="114" pos:column="46">(<argument><expr><name pos:line="114" pos:column="47">b<pos:position pos:line="114" pos:column="48"/></name></expr></argument>)<pos:position pos:line="114" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="50"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="115" pos:column="29">b<pos:position pos:line="115" pos:column="30"/></name> <operator pos:line="115" pos:column="31">=<pos:position pos:line="115" pos:column="32"/></operator> <name pos:line="115" pos:column="33">tmp_b<pos:position pos:line="115" pos:column="38"/></name></expr>;<pos:position pos:line="115" pos:column="39"/></expr_stmt>
                        }<pos:position pos:line="116" pos:column="26"/></block></then>
                        <else pos:line="117" pos:column="25">else <block pos:line="117" pos:column="30">{
                            <comment type="block" pos:line="118" pos:column="29">/*
                             * We want the behaviour to be predictable.
                             * Therefore we try to always error out if the
                             * line length is larger than the limit,
                             * regardless of the content of the line. So,
                             * let's check if the remaining non-matching
                             * string does not exceed the limit.
                             */</comment>
                            <if pos:line="126" pos:column="29">if <condition pos:line="126" pos:column="32">(<expr><name pos:line="126" pos:column="33">space_left<pos:position pos:line="126" pos:column="43"/></name> <operator pos:line="126" pos:column="44">&lt;<pos:position pos:line="126" pos:column="48"/></operator> <name><name pos:line="126" pos:column="46">b<pos:position pos:line="126" pos:column="47"/></name><operator pos:line="126" pos:column="47">-&gt;<pos:position pos:line="126" pos:column="52"/></operator><name pos:line="126" pos:column="49">length<pos:position pos:line="126" pos:column="55"/></name></name></expr>)<pos:position pos:line="126" pos:column="56"/></condition><then pos:line="126" pos:column="56">
                                <block type="pseudo"><return pos:line="127" pos:column="33">return <expr><name pos:line="127" pos:column="40">APR_ENOMEM<pos:position pos:line="127" pos:column="50"/></name></expr>;<pos:position pos:line="127" pos:column="51"/></return></block></then></if>
                        }<pos:position pos:line="128" pos:column="26"/></block></else></if>
                    }<pos:position pos:line="129" pos:column="22"/></block></then></if>
                }<pos:position pos:line="130" pos:column="18"/></block></then>
                <elseif pos:line="131" pos:column="17">else <if pos:line="131" pos:column="22">if <condition pos:line="131" pos:column="25">(<expr><name><name pos:line="131" pos:column="26">script<pos:position pos:line="131" pos:column="32"/></name><operator pos:line="131" pos:column="32">-&gt;<pos:position pos:line="131" pos:column="37"/></operator><name pos:line="131" pos:column="34">regexp<pos:position pos:line="131" pos:column="40"/></name></name></expr>)<pos:position pos:line="131" pos:column="41"/></condition><then pos:line="131" pos:column="41"> <block pos:line="131" pos:column="42">{
                    <decl_stmt><decl><type><name pos:line="132" pos:column="21">int<pos:position pos:line="132" pos:column="24"/></name></type> <name pos:line="132" pos:column="25">left<pos:position pos:line="132" pos:column="29"/></name> <init pos:line="132" pos:column="30">= <expr><name pos:line="132" pos:column="32">bytes<pos:position pos:line="132" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="132" pos:column="38"/></decl_stmt>
                    <decl_stmt><decl><type><specifier pos:line="133" pos:column="21">const<pos:position pos:line="133" pos:column="26"/></specifier> <name pos:line="133" pos:column="27">char<pos:position pos:line="133" pos:column="31"/></name> <modifier pos:line="133" pos:column="32">*<pos:position pos:line="133" pos:column="33"/></modifier></type><name pos:line="133" pos:column="33">pos<pos:position pos:line="133" pos:column="36"/></name> <init pos:line="133" pos:column="37">= <expr><name pos:line="133" pos:column="39">buff<pos:position pos:line="133" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="133" pos:column="44"/></decl_stmt>
                    <decl_stmt><decl><type><name pos:line="134" pos:column="21">char<pos:position pos:line="134" pos:column="25"/></name> <modifier pos:line="134" pos:column="26">*<pos:position pos:line="134" pos:column="27"/></modifier></type><name pos:line="134" pos:column="27">repl<pos:position pos:line="134" pos:column="31"/></name></decl>;<pos:position pos:line="134" pos:column="32"/></decl_stmt>
                    <decl_stmt><decl><type><name pos:line="135" pos:column="21">apr_size_t<pos:position pos:line="135" pos:column="31"/></name></type> <name pos:line="135" pos:column="32">space_left<pos:position pos:line="135" pos:column="42"/></name> <init pos:line="135" pos:column="43">= <expr><name pos:line="135" pos:column="45">AP_SUBST_MAX_LINE_LENGTH<pos:position pos:line="135" pos:column="69"/></name></expr></init></decl>;<pos:position pos:line="135" pos:column="70"/></decl_stmt>
                    <while pos:line="136" pos:column="21">while <condition pos:line="136" pos:column="27">(<expr><operator pos:line="136" pos:column="28">!<pos:position pos:line="136" pos:column="29"/></operator><call><name pos:line="136" pos:column="29">ap_regexec_len<pos:position pos:line="136" pos:column="43"/></name><argument_list pos:line="136" pos:column="43">(<argument><expr><name><name pos:line="136" pos:column="44">script<pos:position pos:line="136" pos:column="50"/></name><operator pos:line="136" pos:column="50">-&gt;<pos:position pos:line="136" pos:column="55"/></operator><name pos:line="136" pos:column="52">regexp<pos:position pos:line="136" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="60">pos<pos:position pos:line="136" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="65">left<pos:position pos:line="136" pos:column="69"/></name></expr></argument>,
                                       <argument><expr><name pos:line="137" pos:column="40">AP_MAX_REG_MATCH<pos:position pos:line="137" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="58">regm<pos:position pos:line="137" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="137" pos:column="64">0<pos:position pos:line="137" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="137" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="137" pos:column="67"/></condition> <block pos:line="137" pos:column="68">{
                        <decl_stmt><decl><type><name pos:line="138" pos:column="25">apr_status_t<pos:position pos:line="138" pos:column="37"/></name></type> <name pos:line="138" pos:column="38">rv<pos:position pos:line="138" pos:column="40"/></name></decl>;<pos:position pos:line="138" pos:column="41"/></decl_stmt>
                        <expr_stmt><expr><name pos:line="139" pos:column="25">have_match<pos:position pos:line="139" pos:column="35"/></name> <operator pos:line="139" pos:column="36">=<pos:position pos:line="139" pos:column="37"/></operator> <literal type="number" pos:line="139" pos:column="38">1<pos:position pos:line="139" pos:column="39"/></literal></expr>;<pos:position pos:line="139" pos:column="40"/></expr_stmt>
                        <if pos:line="140" pos:column="25">if <condition pos:line="140" pos:column="28">(<expr><name><name pos:line="140" pos:column="29">script<pos:position pos:line="140" pos:column="35"/></name><operator pos:line="140" pos:column="35">-&gt;<pos:position pos:line="140" pos:column="40"/></operator><name pos:line="140" pos:column="37">flatten<pos:position pos:line="140" pos:column="44"/></name></name> <operator pos:line="140" pos:column="45">&amp;&amp;<pos:position pos:line="140" pos:column="55"/></operator> <operator pos:line="140" pos:column="48">!<pos:position pos:line="140" pos:column="49"/></operator><name pos:line="140" pos:column="49">force_quick<pos:position pos:line="140" pos:column="60"/></name></expr>)<pos:position pos:line="140" pos:column="61"/></condition><then pos:line="140" pos:column="61"> <block pos:line="140" pos:column="62">{
                            <comment type="block" pos:line="141" pos:column="29">/* copy bytes before the match */</comment>
                            <if pos:line="142" pos:column="29">if <condition pos:line="142" pos:column="32">(<expr><name><name pos:line="142" pos:column="33">regm<pos:position pos:line="142" pos:column="37"/></name><index pos:line="142" pos:column="37">[<expr><literal type="number" pos:line="142" pos:column="38">0<pos:position pos:line="142" pos:column="39"/></literal></expr>]<pos:position pos:line="142" pos:column="40"/></index></name><operator pos:line="142" pos:column="40">.<pos:position pos:line="142" pos:column="41"/></operator><name pos:line="142" pos:column="41">rm_so<pos:position pos:line="142" pos:column="46"/></name> <operator pos:line="142" pos:column="47">&gt;<pos:position pos:line="142" pos:column="51"/></operator> <literal type="number" pos:line="142" pos:column="49">0<pos:position pos:line="142" pos:column="50"/></literal></expr>)<pos:position pos:line="142" pos:column="51"/></condition><then pos:line="142" pos:column="51">
                                <block type="pseudo"><expr_stmt><expr><call><name pos:line="143" pos:column="33">ap_varbuf_strmemcat<pos:position pos:line="143" pos:column="52"/></name><argument_list pos:line="143" pos:column="52">(<argument><expr><operator pos:line="143" pos:column="53">&amp;<pos:position pos:line="143" pos:column="58"/></operator><name pos:line="143" pos:column="54">vb<pos:position pos:line="143" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="58">pos<pos:position pos:line="143" pos:column="61"/></name></expr></argument>, <argument><expr><name><name pos:line="143" pos:column="63">regm<pos:position pos:line="143" pos:column="67"/></name><index pos:line="143" pos:column="67">[<expr><literal type="number" pos:line="143" pos:column="68">0<pos:position pos:line="143" pos:column="69"/></literal></expr>]<pos:position pos:line="143" pos:column="70"/></index></name><operator pos:line="143" pos:column="70">.<pos:position pos:line="143" pos:column="71"/></operator><name pos:line="143" pos:column="71">rm_so<pos:position pos:line="143" pos:column="76"/></name></expr></argument>)<pos:position pos:line="143" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="78"/></expr_stmt></block></then></if>
                            <comment type="block" pos:line="144" pos:column="29">/* add replacement string */</comment>
                            <expr_stmt><expr><name pos:line="145" pos:column="29">rv<pos:position pos:line="145" pos:column="31"/></name> <operator pos:line="145" pos:column="32">=<pos:position pos:line="145" pos:column="33"/></operator> <call><name pos:line="145" pos:column="34">ap_varbuf_regsub<pos:position pos:line="145" pos:column="50"/></name><argument_list pos:line="145" pos:column="50">(<argument><expr><operator pos:line="145" pos:column="51">&amp;<pos:position pos:line="145" pos:column="56"/></operator><name pos:line="145" pos:column="52">vb<pos:position pos:line="145" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="145" pos:column="56">script<pos:position pos:line="145" pos:column="62"/></name><operator pos:line="145" pos:column="62">-&gt;<pos:position pos:line="145" pos:column="67"/></operator><name pos:line="145" pos:column="64">replacement<pos:position pos:line="145" pos:column="75"/></name></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="77">pos<pos:position pos:line="145" pos:column="80"/></name></expr></argument>,
                                                  <argument><expr><name pos:line="146" pos:column="51">AP_MAX_REG_MATCH<pos:position pos:line="146" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="69">regm<pos:position pos:line="146" pos:column="73"/></name></expr></argument>,
                                                  <argument><expr><name pos:line="147" pos:column="51">AP_SUBST_MAX_LINE_LENGTH<pos:position pos:line="147" pos:column="75"/></name> <operator pos:line="147" pos:column="76">-<pos:position pos:line="147" pos:column="77"/></operator> <name><name pos:line="147" pos:column="78">vb<pos:position pos:line="147" pos:column="80"/></name><operator pos:line="147" pos:column="80">.<pos:position pos:line="147" pos:column="81"/></operator><name pos:line="147" pos:column="81">strlen<pos:position pos:line="147" pos:column="87"/></name></name></expr></argument>)<pos:position pos:line="147" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="89"/></expr_stmt>
                            <if pos:line="148" pos:column="29">if <condition pos:line="148" pos:column="32">(<expr><name pos:line="148" pos:column="33">rv<pos:position pos:line="148" pos:column="35"/></name> <operator pos:line="148" pos:column="36">!=<pos:position pos:line="148" pos:column="38"/></operator> <name pos:line="148" pos:column="39">APR_SUCCESS<pos:position pos:line="148" pos:column="50"/></name></expr>)<pos:position pos:line="148" pos:column="51"/></condition><then pos:line="148" pos:column="51">
                                <block type="pseudo"><return pos:line="149" pos:column="33">return <expr><name pos:line="149" pos:column="40">rv<pos:position pos:line="149" pos:column="42"/></name></expr>;<pos:position pos:line="149" pos:column="43"/></return></block></then></if>
                        }<pos:position pos:line="150" pos:column="26"/></block></then>
                        <else pos:line="151" pos:column="25">else <block pos:line="151" pos:column="30">{
                            <decl_stmt><decl><type><name pos:line="152" pos:column="29">apr_size_t<pos:position pos:line="152" pos:column="39"/></name></type> <name pos:line="152" pos:column="40">repl_len<pos:position pos:line="152" pos:column="48"/></name></decl>;<pos:position pos:line="152" pos:column="49"/></decl_stmt>
                            <comment type="block" pos:line="153" pos:column="29">/* acount for string before the match */</comment>
                            <if pos:line="154" pos:column="29">if <condition pos:line="154" pos:column="32">(<expr><name pos:line="154" pos:column="33">space_left<pos:position pos:line="154" pos:column="43"/></name> <operator pos:line="154" pos:column="44">&lt;=<pos:position pos:line="154" pos:column="49"/></operator> <name><name pos:line="154" pos:column="47">regm<pos:position pos:line="154" pos:column="51"/></name><index pos:line="154" pos:column="51">[<expr><literal type="number" pos:line="154" pos:column="52">0<pos:position pos:line="154" pos:column="53"/></literal></expr>]<pos:position pos:line="154" pos:column="54"/></index></name><operator pos:line="154" pos:column="54">.<pos:position pos:line="154" pos:column="55"/></operator><name pos:line="154" pos:column="55">rm_so<pos:position pos:line="154" pos:column="60"/></name></expr>)<pos:position pos:line="154" pos:column="61"/></condition><then pos:line="154" pos:column="61">
                                <block type="pseudo"><return pos:line="155" pos:column="33">return <expr><name pos:line="155" pos:column="40">APR_ENOMEM<pos:position pos:line="155" pos:column="50"/></name></expr>;<pos:position pos:line="155" pos:column="51"/></return></block></then></if>
                            <expr_stmt><expr><name pos:line="156" pos:column="29">space_left<pos:position pos:line="156" pos:column="39"/></name> <operator pos:line="156" pos:column="40">-=<pos:position pos:line="156" pos:column="42"/></operator> <name><name pos:line="156" pos:column="43">regm<pos:position pos:line="156" pos:column="47"/></name><index pos:line="156" pos:column="47">[<expr><literal type="number" pos:line="156" pos:column="48">0<pos:position pos:line="156" pos:column="49"/></literal></expr>]<pos:position pos:line="156" pos:column="50"/></index></name><operator pos:line="156" pos:column="50">.<pos:position pos:line="156" pos:column="51"/></operator><name pos:line="156" pos:column="51">rm_so<pos:position pos:line="156" pos:column="56"/></name></expr>;<pos:position pos:line="156" pos:column="57"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="157" pos:column="29">rv<pos:position pos:line="157" pos:column="31"/></name> <operator pos:line="157" pos:column="32">=<pos:position pos:line="157" pos:column="33"/></operator> <call><name pos:line="157" pos:column="34">ap_pregsub_ex<pos:position pos:line="157" pos:column="47"/></name><argument_list pos:line="157" pos:column="47">(<argument><expr><name pos:line="157" pos:column="48">pool<pos:position pos:line="157" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="157" pos:column="54">&amp;<pos:position pos:line="157" pos:column="59"/></operator><name pos:line="157" pos:column="55">repl<pos:position pos:line="157" pos:column="59"/></name></expr></argument>,
                                               <argument><expr><name><name pos:line="158" pos:column="48">script<pos:position pos:line="158" pos:column="54"/></name><operator pos:line="158" pos:column="54">-&gt;<pos:position pos:line="158" pos:column="59"/></operator><name pos:line="158" pos:column="56">replacement<pos:position pos:line="158" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="158" pos:column="69">pos<pos:position pos:line="158" pos:column="72"/></name></expr></argument>,
                                               <argument><expr><name pos:line="159" pos:column="48">AP_MAX_REG_MATCH<pos:position pos:line="159" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="66">regm<pos:position pos:line="159" pos:column="70"/></name></expr></argument>,
                                               <argument><expr><name pos:line="160" pos:column="48">space_left<pos:position pos:line="160" pos:column="58"/></name></expr></argument>)<pos:position pos:line="160" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="60"/></expr_stmt>
                            <if pos:line="161" pos:column="29">if <condition pos:line="161" pos:column="32">(<expr><name pos:line="161" pos:column="33">rv<pos:position pos:line="161" pos:column="35"/></name> <operator pos:line="161" pos:column="36">!=<pos:position pos:line="161" pos:column="38"/></operator> <name pos:line="161" pos:column="39">APR_SUCCESS<pos:position pos:line="161" pos:column="50"/></name></expr>)<pos:position pos:line="161" pos:column="51"/></condition><then pos:line="161" pos:column="51">
                                <block type="pseudo"><return pos:line="162" pos:column="33">return <expr><name pos:line="162" pos:column="40">rv<pos:position pos:line="162" pos:column="42"/></name></expr>;<pos:position pos:line="162" pos:column="43"/></return></block></then></if>
                            <expr_stmt><expr><name pos:line="163" pos:column="29">repl_len<pos:position pos:line="163" pos:column="37"/></name> <operator pos:line="163" pos:column="38">=<pos:position pos:line="163" pos:column="39"/></operator> <call><name pos:line="163" pos:column="40">strlen<pos:position pos:line="163" pos:column="46"/></name><argument_list pos:line="163" pos:column="46">(<argument><expr><name pos:line="163" pos:column="47">repl<pos:position pos:line="163" pos:column="51"/></name></expr></argument>)<pos:position pos:line="163" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="53"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="164" pos:column="29">space_left<pos:position pos:line="164" pos:column="39"/></name> <operator pos:line="164" pos:column="40">-=<pos:position pos:line="164" pos:column="42"/></operator> <name pos:line="164" pos:column="43">repl_len<pos:position pos:line="164" pos:column="51"/></name></expr>;<pos:position pos:line="164" pos:column="52"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="165" pos:column="29">len<pos:position pos:line="165" pos:column="32"/></name> <operator pos:line="165" pos:column="33">=<pos:position pos:line="165" pos:column="34"/></operator> <call pos:line="165" pos:column="35">(<name pos:line="165" pos:column="36">apr_size_t<pos:position pos:line="165" pos:column="46"/></name>) <argument_list pos:line="165" pos:column="48">(<argument><expr><name><name pos:line="165" pos:column="49">regm<pos:position pos:line="165" pos:column="53"/></name><index pos:line="165" pos:column="53">[<expr><literal type="number" pos:line="165" pos:column="54">0<pos:position pos:line="165" pos:column="55"/></literal></expr>]<pos:position pos:line="165" pos:column="56"/></index></name><operator pos:line="165" pos:column="56">.<pos:position pos:line="165" pos:column="57"/></operator><name pos:line="165" pos:column="57">rm_eo<pos:position pos:line="165" pos:column="62"/></name> <operator pos:line="165" pos:column="63">-<pos:position pos:line="165" pos:column="64"/></operator> <name><name pos:line="165" pos:column="65">regm<pos:position pos:line="165" pos:column="69"/></name><index pos:line="165" pos:column="69">[<expr><literal type="number" pos:line="165" pos:column="70">0<pos:position pos:line="165" pos:column="71"/></literal></expr>]<pos:position pos:line="165" pos:column="72"/></index></name><operator pos:line="165" pos:column="72">.<pos:position pos:line="165" pos:column="73"/></operator><name pos:line="165" pos:column="73">rm_so<pos:position pos:line="165" pos:column="78"/></name></expr></argument>)<pos:position pos:line="165" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="80"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="166" pos:column="29">SEDRMPATBCKT<pos:position pos:line="166" pos:column="41"/></name><argument_list pos:line="166" pos:column="41">(<argument><expr><name pos:line="166" pos:column="42">b<pos:position pos:line="166" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="166" pos:column="45">regm<pos:position pos:line="166" pos:column="49"/></name><index pos:line="166" pos:column="49">[<expr><literal type="number" pos:line="166" pos:column="50">0<pos:position pos:line="166" pos:column="51"/></literal></expr>]<pos:position pos:line="166" pos:column="52"/></index></name><operator pos:line="166" pos:column="52">.<pos:position pos:line="166" pos:column="53"/></operator><name pos:line="166" pos:column="53">rm_so<pos:position pos:line="166" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="166" pos:column="60">tmp_b<pos:position pos:line="166" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="166" pos:column="67">len<pos:position pos:line="166" pos:column="70"/></name></expr></argument>)<pos:position pos:line="166" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="72"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="167" pos:column="29">tmp_b<pos:position pos:line="167" pos:column="34"/></name> <operator pos:line="167" pos:column="35">=<pos:position pos:line="167" pos:column="36"/></operator> <call><name pos:line="167" pos:column="37">apr_bucket_transient_create<pos:position pos:line="167" pos:column="64"/></name><argument_list pos:line="167" pos:column="64">(<argument><expr><name pos:line="167" pos:column="65">repl<pos:position pos:line="167" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="71">repl_len<pos:position pos:line="167" pos:column="79"/></name></expr></argument>,
                                                <argument><expr><name><name pos:line="168" pos:column="49">f<pos:position pos:line="168" pos:column="50"/></name><operator pos:line="168" pos:column="50">-&gt;<pos:position pos:line="168" pos:column="55"/></operator><name pos:line="168" pos:column="52">r<pos:position pos:line="168" pos:column="53"/></name><operator pos:line="168" pos:column="53">-&gt;<pos:position pos:line="168" pos:column="58"/></operator><name pos:line="168" pos:column="55">connection<pos:position pos:line="168" pos:column="65"/></name><operator pos:line="168" pos:column="65">-&gt;<pos:position pos:line="168" pos:column="70"/></operator><name pos:line="168" pos:column="67">bucket_alloc<pos:position pos:line="168" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="168" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="81"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="169" pos:column="29">APR_BUCKET_INSERT_BEFORE<pos:position pos:line="169" pos:column="53"/></name><argument_list pos:line="169" pos:column="53">(<argument><expr><name pos:line="169" pos:column="54">b<pos:position pos:line="169" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="169" pos:column="57">tmp_b<pos:position pos:line="169" pos:column="62"/></name></expr></argument>)<pos:position pos:line="169" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="64"/></expr_stmt>
                        }<pos:position pos:line="170" pos:column="26"/></block></else></if>
                        <comment type="block" pos:line="171" pos:column="25">/*
                         * reset to past what we just did. pos now maps to b
                         * again
                         */</comment>
                        <expr_stmt><expr><name pos:line="175" pos:column="25">pos<pos:position pos:line="175" pos:column="28"/></name> <operator pos:line="175" pos:column="29">+=<pos:position pos:line="175" pos:column="31"/></operator> <name><name pos:line="175" pos:column="32">regm<pos:position pos:line="175" pos:column="36"/></name><index pos:line="175" pos:column="36">[<expr><literal type="number" pos:line="175" pos:column="37">0<pos:position pos:line="175" pos:column="38"/></literal></expr>]<pos:position pos:line="175" pos:column="39"/></index></name><operator pos:line="175" pos:column="39">.<pos:position pos:line="175" pos:column="40"/></operator><name pos:line="175" pos:column="40">rm_eo<pos:position pos:line="175" pos:column="45"/></name></expr>;<pos:position pos:line="175" pos:column="46"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="176" pos:column="25">left<pos:position pos:line="176" pos:column="29"/></name> <operator pos:line="176" pos:column="30">-=<pos:position pos:line="176" pos:column="32"/></operator> <name><name pos:line="176" pos:column="33">regm<pos:position pos:line="176" pos:column="37"/></name><index pos:line="176" pos:column="37">[<expr><literal type="number" pos:line="176" pos:column="38">0<pos:position pos:line="176" pos:column="39"/></literal></expr>]<pos:position pos:line="176" pos:column="40"/></index></name><operator pos:line="176" pos:column="40">.<pos:position pos:line="176" pos:column="41"/></operator><name pos:line="176" pos:column="41">rm_eo<pos:position pos:line="176" pos:column="46"/></name></expr>;<pos:position pos:line="176" pos:column="47"/></expr_stmt>
                    }<pos:position pos:line="177" pos:column="22"/></block></while>
                    <if pos:line="178" pos:column="21">if <condition pos:line="178" pos:column="24">(<expr><name pos:line="178" pos:column="25">have_match<pos:position pos:line="178" pos:column="35"/></name> <operator pos:line="178" pos:column="36">&amp;&amp;<pos:position pos:line="178" pos:column="46"/></operator> <name><name pos:line="178" pos:column="39">script<pos:position pos:line="178" pos:column="45"/></name><operator pos:line="178" pos:column="45">-&gt;<pos:position pos:line="178" pos:column="50"/></operator><name pos:line="178" pos:column="47">flatten<pos:position pos:line="178" pos:column="54"/></name></name> <operator pos:line="178" pos:column="55">&amp;&amp;<pos:position pos:line="178" pos:column="65"/></operator> <operator pos:line="178" pos:column="58">!<pos:position pos:line="178" pos:column="59"/></operator><name pos:line="178" pos:column="59">force_quick<pos:position pos:line="178" pos:column="70"/></name></expr>)<pos:position pos:line="178" pos:column="71"/></condition><then pos:line="178" pos:column="71"> <block pos:line="178" pos:column="72">{
                        <decl_stmt><decl><type><name pos:line="179" pos:column="25">char<pos:position pos:line="179" pos:column="29"/></name> <modifier pos:line="179" pos:column="30">*<pos:position pos:line="179" pos:column="31"/></modifier></type><name pos:line="179" pos:column="31">copy<pos:position pos:line="179" pos:column="35"/></name></decl>;<pos:position pos:line="179" pos:column="36"/></decl_stmt>
                        <comment type="block" pos:line="180" pos:column="25">/* Copy result plus the part after the last match into
                         * a bucket.
                         */</comment>
                        <expr_stmt><expr><name pos:line="183" pos:column="25">copy<pos:position pos:line="183" pos:column="29"/></name> <operator pos:line="183" pos:column="30">=<pos:position pos:line="183" pos:column="31"/></operator> <call><name pos:line="183" pos:column="32">ap_varbuf_pdup<pos:position pos:line="183" pos:column="46"/></name><argument_list pos:line="183" pos:column="46">(<argument><expr><name pos:line="183" pos:column="47">pool<pos:position pos:line="183" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="183" pos:column="53">&amp;<pos:position pos:line="183" pos:column="58"/></operator><name pos:line="183" pos:column="54">vb<pos:position pos:line="183" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="183" pos:column="58">NULL<pos:position pos:line="183" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="183" pos:column="64">0<pos:position pos:line="183" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="183" pos:column="67">pos<pos:position pos:line="183" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="183" pos:column="72">left<pos:position pos:line="183" pos:column="76"/></name></expr></argument>,
                                              <argument><expr><operator pos:line="184" pos:column="47">&amp;<pos:position pos:line="184" pos:column="52"/></operator><name pos:line="184" pos:column="48">len<pos:position pos:line="184" pos:column="51"/></name></expr></argument>)<pos:position pos:line="184" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="53"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="185" pos:column="25">tmp_b<pos:position pos:line="185" pos:column="30"/></name> <operator pos:line="185" pos:column="31">=<pos:position pos:line="185" pos:column="32"/></operator> <call><name pos:line="185" pos:column="33">apr_bucket_pool_create<pos:position pos:line="185" pos:column="55"/></name><argument_list pos:line="185" pos:column="55">(<argument><expr><name pos:line="185" pos:column="56">copy<pos:position pos:line="185" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="185" pos:column="62">len<pos:position pos:line="185" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="185" pos:column="67">pool<pos:position pos:line="185" pos:column="71"/></name></expr></argument>,
                                           <argument><expr><name><name pos:line="186" pos:column="44">f<pos:position pos:line="186" pos:column="45"/></name><operator pos:line="186" pos:column="45">-&gt;<pos:position pos:line="186" pos:column="50"/></operator><name pos:line="186" pos:column="47">r<pos:position pos:line="186" pos:column="48"/></name><operator pos:line="186" pos:column="48">-&gt;<pos:position pos:line="186" pos:column="53"/></operator><name pos:line="186" pos:column="50">connection<pos:position pos:line="186" pos:column="60"/></name><operator pos:line="186" pos:column="60">-&gt;<pos:position pos:line="186" pos:column="65"/></operator><name pos:line="186" pos:column="62">bucket_alloc<pos:position pos:line="186" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="186" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="76"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="187" pos:column="25">APR_BUCKET_INSERT_BEFORE<pos:position pos:line="187" pos:column="49"/></name><argument_list pos:line="187" pos:column="49">(<argument><expr><name pos:line="187" pos:column="50">b<pos:position pos:line="187" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="187" pos:column="53">tmp_b<pos:position pos:line="187" pos:column="58"/></name></expr></argument>)<pos:position pos:line="187" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="60"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="188" pos:column="25">apr_bucket_delete<pos:position pos:line="188" pos:column="42"/></name><argument_list pos:line="188" pos:column="42">(<argument><expr><name pos:line="188" pos:column="43">b<pos:position pos:line="188" pos:column="44"/></name></expr></argument>)<pos:position pos:line="188" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="46"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="189" pos:column="25">b<pos:position pos:line="189" pos:column="26"/></name> <operator pos:line="189" pos:column="27">=<pos:position pos:line="189" pos:column="28"/></operator> <name pos:line="189" pos:column="29">tmp_b<pos:position pos:line="189" pos:column="34"/></name></expr>;<pos:position pos:line="189" pos:column="35"/></expr_stmt>
                    }<pos:position pos:line="190" pos:column="22"/></block></then></if>
                }<pos:position pos:line="191" pos:column="18"/></block></then></if></elseif>
                <else pos:line="192" pos:column="17">else <block pos:line="192" pos:column="22">{
                    <expr_stmt><expr><call><name pos:line="193" pos:column="21">ap_assert<pos:position pos:line="193" pos:column="30"/></name><argument_list pos:line="193" pos:column="30">(<argument><expr><literal type="number" pos:line="193" pos:column="31">0<pos:position pos:line="193" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="193" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="34"/></expr_stmt>
                    <continue pos:line="194" pos:column="21">continue;<pos:position pos:line="194" pos:column="30"/></continue>
                }<pos:position pos:line="195" pos:column="18"/></block></else></if>
            }<pos:position pos:line="196" pos:column="14"/></block></then></if>
        }<pos:position pos:line="197" pos:column="10"/></block></for>
        <expr_stmt><expr><name pos:line="198" pos:column="9">script<pos:position pos:line="198" pos:column="15"/></name><operator pos:line="198" pos:column="15">++<pos:position pos:line="198" pos:column="17"/></operator></expr>;<pos:position pos:line="198" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="199" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="200" pos:column="5">ap_varbuf_free<pos:position pos:line="200" pos:column="19"/></name><argument_list pos:line="200" pos:column="19">(<argument><expr><operator pos:line="200" pos:column="20">&amp;<pos:position pos:line="200" pos:column="25"/></operator><name pos:line="200" pos:column="21">vb<pos:position pos:line="200" pos:column="23"/></name></expr></argument>)<pos:position pos:line="200" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="25"/></expr_stmt>
    <return pos:line="201" pos:column="5">return <expr><name pos:line="201" pos:column="12">APR_SUCCESS<pos:position pos:line="201" pos:column="23"/></name></expr>;<pos:position pos:line="201" pos:column="24"/></return>
}<pos:position pos:line="202" pos:column="2"/></block></function></unit>
