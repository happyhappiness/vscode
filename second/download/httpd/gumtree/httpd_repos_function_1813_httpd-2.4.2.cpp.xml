<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1813_httpd-2.4.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">ftp_string_read<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">conn_rec<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">c<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">apr_bucket_brigade<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">bb<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
        <parameter><decl><type><name pos:line="2" pos:column="9">char<pos:position pos:line="2" pos:column="13"/></name> <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier></type><name pos:line="2" pos:column="15">buff<pos:position pos:line="2" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="21">apr_size_t<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">bufflen<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">int<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">eos<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_bucket<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">e<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">rv<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">pos<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><name pos:line="6" pos:column="17">buff<pos:position pos:line="6" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">response<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">found<pos:position pos:line="8" pos:column="14"/></name> <init pos:line="8" pos:column="15">= <expr><literal type="number" pos:line="8" pos:column="17">0<pos:position pos:line="8" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_size_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">len<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>

    <comment type="block" pos:line="11" pos:column="5">/* start with an empty string */</comment>
    <expr_stmt><expr><name><name pos:line="12" pos:column="5">buff<pos:position pos:line="12" pos:column="9"/></name><index pos:line="12" pos:column="9">[<expr><literal type="number" pos:line="12" pos:column="10">0<pos:position pos:line="12" pos:column="11"/></literal></expr>]<pos:position pos:line="12" pos:column="12"/></index></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <literal type="number" pos:line="12" pos:column="15">0<pos:position pos:line="12" pos:column="16"/></literal></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="13" pos:column="5">*<pos:position pos:line="13" pos:column="6"/></operator><name pos:line="13" pos:column="6">eos<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <literal type="number" pos:line="13" pos:column="12">0<pos:position pos:line="13" pos:column="13"/></literal></expr>;<pos:position pos:line="13" pos:column="14"/></expr_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* loop through each brigade */</comment>
    <while pos:line="16" pos:column="5">while <condition pos:line="16" pos:column="11">(<expr><operator pos:line="16" pos:column="12">!<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">found<pos:position pos:line="16" pos:column="18"/></name></expr>)<pos:position pos:line="16" pos:column="19"/></condition> <block pos:line="16" pos:column="20">{
        <comment type="block" pos:line="17" pos:column="9">/* get brigade from network one line at a time */</comment>
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">APR_SUCCESS<pos:position pos:line="18" pos:column="24"/></name> <operator pos:line="18" pos:column="25">!=<pos:position pos:line="18" pos:column="27"/></operator> <operator pos:line="18" pos:column="28">(<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="29">rv<pos:position pos:line="18" pos:column="31"/></name> <operator pos:line="18" pos:column="32">=<pos:position pos:line="18" pos:column="33"/></operator> <call><name pos:line="18" pos:column="34">ap_get_brigade<pos:position pos:line="18" pos:column="48"/></name><argument_list pos:line="18" pos:column="48">(<argument><expr><name><name pos:line="18" pos:column="49">c<pos:position pos:line="18" pos:column="50"/></name><operator pos:line="18" pos:column="50">-&gt;<pos:position pos:line="18" pos:column="55"/></operator><name pos:line="18" pos:column="52">input_filters<pos:position pos:line="18" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="67">bb<pos:position pos:line="18" pos:column="69"/></name></expr></argument>,
                                                <argument><expr><name pos:line="19" pos:column="49">AP_MODE_GETLINE<pos:position pos:line="19" pos:column="64"/></name></expr></argument>,
                                                <argument><expr><name pos:line="20" pos:column="49">APR_BLOCK_READ<pos:position pos:line="20" pos:column="63"/></name></expr></argument>,
                                                <argument><expr><literal type="number" pos:line="21" pos:column="49">0<pos:position pos:line="21" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="51"/></argument_list></call><operator pos:line="21" pos:column="51">)<pos:position pos:line="21" pos:column="52"/></operator></expr>)<pos:position pos:line="21" pos:column="53"/></condition><then pos:line="21" pos:column="53"> <block pos:line="21" pos:column="54">{
            <return pos:line="22" pos:column="13">return <expr><name pos:line="22" pos:column="20">rv<pos:position pos:line="22" pos:column="22"/></name></expr>;<pos:position pos:line="22" pos:column="23"/></return>
        }<pos:position pos:line="23" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="24" pos:column="9">/* loop through each bucket */</comment>
        <while pos:line="25" pos:column="9">while <condition pos:line="25" pos:column="15">(<expr><operator pos:line="25" pos:column="16">!<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="17">found<pos:position pos:line="25" pos:column="22"/></name></expr>)<pos:position pos:line="25" pos:column="23"/></condition> <block pos:line="25" pos:column="24">{
            <if pos:line="26" pos:column="13">if <condition pos:line="26" pos:column="16">(<expr><operator pos:line="26" pos:column="17">*<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="18">eos<pos:position pos:line="26" pos:column="21"/></name> <operator pos:line="26" pos:column="22">||<pos:position pos:line="26" pos:column="24"/></operator> <call><name pos:line="26" pos:column="25">APR_BRIGADE_EMPTY<pos:position pos:line="26" pos:column="42"/></name><argument_list pos:line="26" pos:column="42">(<argument><expr><name pos:line="26" pos:column="43">bb<pos:position pos:line="26" pos:column="45"/></name></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="47"/></condition><then pos:line="26" pos:column="47"> <block pos:line="26" pos:column="48">{
                <comment type="block" pos:line="27" pos:column="17">/* The connection aborted or timed out */</comment>
                <return pos:line="28" pos:column="17">return <expr><name pos:line="28" pos:column="24">APR_ECONNABORTED<pos:position pos:line="28" pos:column="40"/></name></expr>;<pos:position pos:line="28" pos:column="41"/></return>
            }<pos:position pos:line="29" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="30" pos:column="13">e<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">=<pos:position pos:line="30" pos:column="16"/></operator> <call><name pos:line="30" pos:column="17">APR_BRIGADE_FIRST<pos:position pos:line="30" pos:column="34"/></name><argument_list pos:line="30" pos:column="34">(<argument><expr><name pos:line="30" pos:column="35">bb<pos:position pos:line="30" pos:column="37"/></name></expr></argument>)<pos:position pos:line="30" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt>
            <if pos:line="31" pos:column="13">if <condition pos:line="31" pos:column="16">(<expr><call><name pos:line="31" pos:column="17">APR_BUCKET_IS_EOS<pos:position pos:line="31" pos:column="34"/></name><argument_list pos:line="31" pos:column="34">(<argument><expr><name pos:line="31" pos:column="35">e<pos:position pos:line="31" pos:column="36"/></name></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="38"/></condition><then pos:line="31" pos:column="38"> <block pos:line="31" pos:column="39">{
                <expr_stmt><expr><operator pos:line="32" pos:column="17">*<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="18">eos<pos:position pos:line="32" pos:column="21"/></name> <operator pos:line="32" pos:column="22">=<pos:position pos:line="32" pos:column="23"/></operator> <literal type="number" pos:line="32" pos:column="24">1<pos:position pos:line="32" pos:column="25"/></literal></expr>;<pos:position pos:line="32" pos:column="26"/></expr_stmt>
            }<pos:position pos:line="33" pos:column="14"/></block></then>
            <else pos:line="34" pos:column="13">else <block pos:line="34" pos:column="18">{
                <if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">APR_SUCCESS<pos:position pos:line="35" pos:column="32"/></name> <operator pos:line="35" pos:column="33">!=<pos:position pos:line="35" pos:column="35"/></operator> <operator pos:line="35" pos:column="36">(<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="37">rv<pos:position pos:line="35" pos:column="39"/></name> <operator pos:line="35" pos:column="40">=<pos:position pos:line="35" pos:column="41"/></operator> <call><name pos:line="35" pos:column="42">apr_bucket_read<pos:position pos:line="35" pos:column="57"/></name><argument_list pos:line="35" pos:column="57">(<argument><expr><name pos:line="35" pos:column="58">e<pos:position pos:line="35" pos:column="59"/></name></expr></argument>,
                                                         <argument><expr><operator pos:line="36" pos:column="58">(<pos:position pos:line="36" pos:column="59"/></operator><specifier pos:line="36" pos:column="59">const<pos:position pos:line="36" pos:column="64"/></specifier> <name pos:line="36" pos:column="65">char<pos:position pos:line="36" pos:column="69"/></name> <operator pos:line="36" pos:column="70">*<pos:position pos:line="36" pos:column="71"/></operator><operator pos:line="36" pos:column="71">*<pos:position pos:line="36" pos:column="72"/></operator><operator pos:line="36" pos:column="72">)<pos:position pos:line="36" pos:column="73"/></operator><operator pos:line="36" pos:column="73">&amp;<pos:position pos:line="36" pos:column="78"/></operator><name pos:line="36" pos:column="74">response<pos:position pos:line="36" pos:column="82"/></name></expr></argument>,
                                                         <argument><expr><operator pos:line="37" pos:column="58">&amp;<pos:position pos:line="37" pos:column="63"/></operator><name pos:line="37" pos:column="59">len<pos:position pos:line="37" pos:column="62"/></name></expr></argument>,
                                                         <argument><expr><name pos:line="38" pos:column="58">APR_BLOCK_READ<pos:position pos:line="38" pos:column="72"/></name></expr></argument>)<pos:position pos:line="38" pos:column="73"/></argument_list></call><operator pos:line="38" pos:column="73">)<pos:position pos:line="38" pos:column="74"/></operator></expr>)<pos:position pos:line="38" pos:column="75"/></condition><then pos:line="38" pos:column="75"> <block pos:line="38" pos:column="76">{
                    <return pos:line="39" pos:column="21">return <expr><name pos:line="39" pos:column="28">rv<pos:position pos:line="39" pos:column="30"/></name></expr>;<pos:position pos:line="39" pos:column="31"/></return>
                }<pos:position pos:line="40" pos:column="18"/></block></then></if>
                <comment type="block" pos:line="41" pos:column="17">/*
                 * is string LF terminated?
                 * XXX: This check can be made more efficient by simply checking
                 * if the last character in the 'response' buffer is an ASCII_LF.
                 * See ap_rgetline() for an example.
                 */</comment>
                <if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><call><name pos:line="47" pos:column="21">memchr<pos:position pos:line="47" pos:column="27"/></name><argument_list pos:line="47" pos:column="27">(<argument><expr><name pos:line="47" pos:column="28">response<pos:position pos:line="47" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="38">APR_ASCII_LF<pos:position pos:line="47" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="52">len<pos:position pos:line="47" pos:column="55"/></name></expr></argument>)<pos:position pos:line="47" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="57"/></condition><then pos:line="47" pos:column="57"> <block pos:line="47" pos:column="58">{
                    <expr_stmt><expr><name pos:line="48" pos:column="21">found<pos:position pos:line="48" pos:column="26"/></name> <operator pos:line="48" pos:column="27">=<pos:position pos:line="48" pos:column="28"/></operator> <literal type="number" pos:line="48" pos:column="29">1<pos:position pos:line="48" pos:column="30"/></literal></expr>;<pos:position pos:line="48" pos:column="31"/></expr_stmt>
                }<pos:position pos:line="49" pos:column="18"/></block></then></if>
                <comment type="block" pos:line="50" pos:column="17">/* concat strings until buff is full - then throw the data away */</comment>
                <if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><name pos:line="51" pos:column="21">len<pos:position pos:line="51" pos:column="24"/></name> <operator pos:line="51" pos:column="25">&gt;<pos:position pos:line="51" pos:column="29"/></operator> <operator pos:line="51" pos:column="27">(<pos:position pos:line="51" pos:column="28"/></operator><operator pos:line="51" pos:column="28">(<pos:position pos:line="51" pos:column="29"/></operator><name pos:line="51" pos:column="29">bufflen<pos:position pos:line="51" pos:column="36"/></name><operator pos:line="51" pos:column="36">-<pos:position pos:line="51" pos:column="37"/></operator><literal type="number" pos:line="51" pos:column="37">1<pos:position pos:line="51" pos:column="38"/></literal><operator pos:line="51" pos:column="38">)<pos:position pos:line="51" pos:column="39"/></operator><operator pos:line="51" pos:column="39">-<pos:position pos:line="51" pos:column="40"/></operator><operator pos:line="51" pos:column="40">(<pos:position pos:line="51" pos:column="41"/></operator><name pos:line="51" pos:column="41">pos<pos:position pos:line="51" pos:column="44"/></name><operator pos:line="51" pos:column="44">-<pos:position pos:line="51" pos:column="45"/></operator><name pos:line="51" pos:column="45">buff<pos:position pos:line="51" pos:column="49"/></name><operator pos:line="51" pos:column="49">)<pos:position pos:line="51" pos:column="50"/></operator><operator pos:line="51" pos:column="50">)<pos:position pos:line="51" pos:column="51"/></operator></expr>)<pos:position pos:line="51" pos:column="52"/></condition><then pos:line="51" pos:column="52"> <block pos:line="51" pos:column="53">{
                    <expr_stmt><expr><name pos:line="52" pos:column="21">len<pos:position pos:line="52" pos:column="24"/></name> <operator pos:line="52" pos:column="25">=<pos:position pos:line="52" pos:column="26"/></operator> <operator pos:line="52" pos:column="27">(<pos:position pos:line="52" pos:column="28"/></operator><name pos:line="52" pos:column="28">bufflen<pos:position pos:line="52" pos:column="35"/></name><operator pos:line="52" pos:column="35">-<pos:position pos:line="52" pos:column="36"/></operator><literal type="number" pos:line="52" pos:column="36">1<pos:position pos:line="52" pos:column="37"/></literal><operator pos:line="52" pos:column="37">)<pos:position pos:line="52" pos:column="38"/></operator><operator pos:line="52" pos:column="38">-<pos:position pos:line="52" pos:column="39"/></operator><operator pos:line="52" pos:column="39">(<pos:position pos:line="52" pos:column="40"/></operator><name pos:line="52" pos:column="40">pos<pos:position pos:line="52" pos:column="43"/></name><operator pos:line="52" pos:column="43">-<pos:position pos:line="52" pos:column="44"/></operator><name pos:line="52" pos:column="44">buff<pos:position pos:line="52" pos:column="48"/></name><operator pos:line="52" pos:column="48">)<pos:position pos:line="52" pos:column="49"/></operator></expr>;<pos:position pos:line="52" pos:column="50"/></expr_stmt>
                }<pos:position pos:line="53" pos:column="18"/></block></then></if>
                <if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><name pos:line="54" pos:column="21">len<pos:position pos:line="54" pos:column="24"/></name> <operator pos:line="54" pos:column="25">&gt;<pos:position pos:line="54" pos:column="29"/></operator> <literal type="number" pos:line="54" pos:column="27">0<pos:position pos:line="54" pos:column="28"/></literal></expr>)<pos:position pos:line="54" pos:column="29"/></condition><then pos:line="54" pos:column="29"> <block pos:line="54" pos:column="30">{
                    <expr_stmt><expr><call><name pos:line="55" pos:column="21">memcpy<pos:position pos:line="55" pos:column="27"/></name><argument_list pos:line="55" pos:column="27">(<argument><expr><name pos:line="55" pos:column="28">pos<pos:position pos:line="55" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="33">response<pos:position pos:line="55" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="43">len<pos:position pos:line="55" pos:column="46"/></name></expr></argument>)<pos:position pos:line="55" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="48"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="56" pos:column="21">pos<pos:position pos:line="56" pos:column="24"/></name> <operator pos:line="56" pos:column="25">+=<pos:position pos:line="56" pos:column="27"/></operator> <name pos:line="56" pos:column="28">len<pos:position pos:line="56" pos:column="31"/></name></expr>;<pos:position pos:line="56" pos:column="32"/></expr_stmt>
                }<pos:position pos:line="57" pos:column="18"/></block></then></if>
            }<pos:position pos:line="58" pos:column="14"/></block></else></if>
            <expr_stmt><expr><call><name pos:line="59" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="59" pos:column="30"/></name><argument_list pos:line="59" pos:column="30">(<argument><expr><name pos:line="59" pos:column="31">e<pos:position pos:line="59" pos:column="32"/></name></expr></argument>)<pos:position pos:line="59" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="60" pos:column="13">apr_bucket_destroy<pos:position pos:line="60" pos:column="31"/></name><argument_list pos:line="60" pos:column="31">(<argument><expr><name pos:line="60" pos:column="32">e<pos:position pos:line="60" pos:column="33"/></name></expr></argument>)<pos:position pos:line="60" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="61" pos:column="10"/></block></while>
        <expr_stmt><expr><operator pos:line="62" pos:column="9">*<pos:position pos:line="62" pos:column="10"/></operator><name pos:line="62" pos:column="10">pos<pos:position pos:line="62" pos:column="13"/></name> <operator pos:line="62" pos:column="14">=<pos:position pos:line="62" pos:column="15"/></operator> <literal type="char" pos:line="62" pos:column="16">'\0'<pos:position pos:line="62" pos:column="20"/></literal></expr>;<pos:position pos:line="62" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="63" pos:column="6"/></block></while>

    <return pos:line="65" pos:column="5">return <expr><name pos:line="65" pos:column="12">APR_SUCCESS<pos:position pos:line="65" pos:column="23"/></name></expr>;<pos:position pos:line="65" pos:column="24"/></return>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
