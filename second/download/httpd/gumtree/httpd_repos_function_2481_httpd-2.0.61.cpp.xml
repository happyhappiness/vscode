<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2481_httpd-2.0.61.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">XML_ParserFree<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">XML_Parser<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">parser<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <for pos:line="3" pos:column="3">for <control pos:line="3" pos:column="7">(<init pos:line="3" pos:column="8">;<pos:position pos:line="3" pos:column="9"/></init><condition pos:line="3" pos:column="9">;<pos:position pos:line="3" pos:column="10"/></condition><incr/>)<pos:position pos:line="3" pos:column="11"/></control> <block pos:line="3" pos:column="12">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">TAG<pos:position pos:line="4" pos:column="8"/></name> <modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type><name pos:line="4" pos:column="10">p<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">tagStack<pos:position pos:line="5" pos:column="17"/></name> <operator pos:line="5" pos:column="18">==<pos:position pos:line="5" pos:column="20"/></operator> <literal type="number" pos:line="5" pos:column="21">0<pos:position pos:line="5" pos:column="22"/></literal></expr>)<pos:position pos:line="5" pos:column="23"/></condition><then pos:line="5" pos:column="23"> <block pos:line="5" pos:column="24">{
      <if pos:line="6" pos:column="7">if <condition pos:line="6" pos:column="10">(<expr><name pos:line="6" pos:column="11">freeTagList<pos:position pos:line="6" pos:column="22"/></name> <operator pos:line="6" pos:column="23">==<pos:position pos:line="6" pos:column="25"/></operator> <literal type="number" pos:line="6" pos:column="26">0<pos:position pos:line="6" pos:column="27"/></literal></expr>)<pos:position pos:line="6" pos:column="28"/></condition><then pos:line="6" pos:column="28">
	<block type="pseudo"><break pos:line="7" pos:column="9">break;<pos:position pos:line="7" pos:column="15"/></break></block></then></if>
      <expr_stmt><expr><name pos:line="8" pos:column="7">tagStack<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">=<pos:position pos:line="8" pos:column="17"/></operator> <name pos:line="8" pos:column="18">freeTagList<pos:position pos:line="8" pos:column="29"/></name></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name pos:line="9" pos:column="7">freeTagList<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">=<pos:position pos:line="9" pos:column="20"/></operator> <literal type="number" pos:line="9" pos:column="21">0<pos:position pos:line="9" pos:column="22"/></literal></expr>;<pos:position pos:line="9" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="11" pos:column="5">p<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">=<pos:position pos:line="11" pos:column="8"/></operator> <name pos:line="11" pos:column="9">tagStack<pos:position pos:line="11" pos:column="17"/></name></expr>;<pos:position pos:line="11" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">tagStack<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <name><name pos:line="12" pos:column="16">tagStack<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">-&gt;<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="26">parent<pos:position pos:line="12" pos:column="32"/></name></name></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">FREE<pos:position pos:line="13" pos:column="9"/></name><argument_list pos:line="13" pos:column="9">(<argument><expr><name><name pos:line="13" pos:column="10">p<pos:position pos:line="13" pos:column="11"/></name><operator pos:line="13" pos:column="11">-&gt;<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="13">buf<pos:position pos:line="13" pos:column="16"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">destroyBindings<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name><name pos:line="14" pos:column="21">p<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">-&gt;<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="24">bindings<pos:position pos:line="14" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="34">parser<pos:position pos:line="14" pos:column="40"/></name></expr></argument>)<pos:position pos:line="14" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">FREE<pos:position pos:line="15" pos:column="9"/></name><argument_list pos:line="15" pos:column="9">(<argument><expr><name pos:line="15" pos:column="10">p<pos:position pos:line="15" pos:column="11"/></name></expr></argument>)<pos:position pos:line="15" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">destroyBindings<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">freeBindingList<pos:position pos:line="17" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="36">parser<pos:position pos:line="17" pos:column="42"/></name></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">destroyBindings<pos:position pos:line="18" pos:column="18"/></name><argument_list pos:line="18" pos:column="18">(<argument><expr><name pos:line="18" pos:column="19">inheritedBindings<pos:position pos:line="18" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="38">parser<pos:position pos:line="18" pos:column="44"/></name></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">poolDestroy<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><operator pos:line="19" pos:column="15">&amp;<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="16">tempPool<pos:position pos:line="19" pos:column="24"/></name></expr></argument>)<pos:position pos:line="19" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">poolDestroy<pos:position pos:line="20" pos:column="14"/></name><argument_list pos:line="20" pos:column="14">(<argument><expr><operator pos:line="20" pos:column="15">&amp;<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="16">temp2Pool<pos:position pos:line="20" pos:column="25"/></name></expr></argument>)<pos:position pos:line="20" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>
<cpp:ifdef pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">ifdef<pos:position pos:line="21" pos:column="7"/></cpp:directive> <name pos:line="21" pos:column="8">XML_DTD<pos:position pos:line="21" pos:column="15"/></name></cpp:ifdef>
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><name pos:line="22" pos:column="7">parentParser<pos:position pos:line="22" pos:column="19"/></name></expr>)<pos:position pos:line="22" pos:column="20"/></condition><then pos:line="22" pos:column="20"> <block pos:line="22" pos:column="21">{
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">hadExternalDoctype<pos:position pos:line="23" pos:column="27"/></name></expr>)<pos:position pos:line="23" pos:column="28"/></condition><then pos:line="23" pos:column="28">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="24" pos:column="7">dtd<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">.<pos:position pos:line="24" pos:column="11"/></operator><name pos:line="24" pos:column="11">complete<pos:position pos:line="24" pos:column="19"/></name></name> <operator pos:line="24" pos:column="20">=<pos:position pos:line="24" pos:column="21"/></operator> <literal type="number" pos:line="24" pos:column="22">0<pos:position pos:line="24" pos:column="23"/></literal></expr>;<pos:position pos:line="24" pos:column="24"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">dtdSwap<pos:position pos:line="25" pos:column="12"/></name><argument_list pos:line="25" pos:column="12">(<argument><expr><operator pos:line="25" pos:column="13">&amp;<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="14">dtd<pos:position pos:line="25" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="19">&amp;<pos:position pos:line="25" pos:column="24"/></operator><operator pos:line="25" pos:column="20">(<pos:position pos:line="25" pos:column="21"/></operator><operator pos:line="25" pos:column="21">(<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">Parser<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">*<pos:position pos:line="25" pos:column="30"/></operator><operator pos:line="25" pos:column="30">)<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="31">parentParser<pos:position pos:line="25" pos:column="43"/></name><operator pos:line="25" pos:column="43">)<pos:position pos:line="25" pos:column="44"/></operator><operator pos:line="25" pos:column="44">-&gt;<pos:position pos:line="25" pos:column="49"/></operator><name pos:line="25" pos:column="46">m_dtd<pos:position pos:line="25" pos:column="51"/></name></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="53"/></expr_stmt>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="27" pos:column="8">/* XML_DTD */</comment>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">dtdDestroy<pos:position pos:line="28" pos:column="13"/></name><argument_list pos:line="28" pos:column="13">(<argument><expr><operator pos:line="28" pos:column="14">&amp;<pos:position pos:line="28" pos:column="19"/></operator><name pos:line="28" pos:column="15">dtd<pos:position pos:line="28" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="20">parser<pos:position pos:line="28" pos:column="26"/></name></expr></argument>)<pos:position pos:line="28" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="29" pos:column="3">FREE<pos:position pos:line="29" pos:column="7"/></name><argument_list pos:line="29" pos:column="7">(<argument><expr><operator pos:line="29" pos:column="8">(<pos:position pos:line="29" pos:column="9"/></operator><name pos:line="29" pos:column="9">void<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">*<pos:position pos:line="29" pos:column="15"/></operator><operator pos:line="29" pos:column="15">)<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="16">atts<pos:position pos:line="29" pos:column="20"/></name></expr></argument>)<pos:position pos:line="29" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="22"/></expr_stmt>
  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><name pos:line="30" pos:column="7">groupConnector<pos:position pos:line="30" pos:column="21"/></name></expr>)<pos:position pos:line="30" pos:column="22"/></condition><then pos:line="30" pos:column="22">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="5">FREE<pos:position pos:line="31" pos:column="9"/></name><argument_list pos:line="31" pos:column="9">(<argument><expr><name pos:line="31" pos:column="10">groupConnector<pos:position pos:line="31" pos:column="24"/></name></expr></argument>)<pos:position pos:line="31" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="26"/></expr_stmt></block></then></if>
  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><name pos:line="32" pos:column="7">buffer<pos:position pos:line="32" pos:column="13"/></name></expr>)<pos:position pos:line="32" pos:column="14"/></condition><then pos:line="32" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="5">FREE<pos:position pos:line="33" pos:column="9"/></name><argument_list pos:line="33" pos:column="9">(<argument><expr><name pos:line="33" pos:column="10">buffer<pos:position pos:line="33" pos:column="16"/></name></expr></argument>)<pos:position pos:line="33" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="18"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="34" pos:column="3">FREE<pos:position pos:line="34" pos:column="7"/></name><argument_list pos:line="34" pos:column="7">(<argument><expr><name pos:line="34" pos:column="8">dataBuf<pos:position pos:line="34" pos:column="15"/></name></expr></argument>)<pos:position pos:line="34" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="17"/></expr_stmt>
  <if pos:line="35" pos:column="3">if <condition pos:line="35" pos:column="6">(<expr><name pos:line="35" pos:column="7">unknownEncodingMem<pos:position pos:line="35" pos:column="25"/></name></expr>)<pos:position pos:line="35" pos:column="26"/></condition><then pos:line="35" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="5">FREE<pos:position pos:line="36" pos:column="9"/></name><argument_list pos:line="36" pos:column="9">(<argument><expr><name pos:line="36" pos:column="10">unknownEncodingMem<pos:position pos:line="36" pos:column="28"/></name></expr></argument>)<pos:position pos:line="36" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="30"/></expr_stmt></block></then></if>
  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><name pos:line="37" pos:column="7">unknownEncodingRelease<pos:position pos:line="37" pos:column="29"/></name></expr>)<pos:position pos:line="37" pos:column="30"/></condition><then pos:line="37" pos:column="30">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="5">unknownEncodingRelease<pos:position pos:line="38" pos:column="27"/></name><argument_list pos:line="38" pos:column="27">(<argument><expr><name pos:line="38" pos:column="28">unknownEncodingData<pos:position pos:line="38" pos:column="47"/></name></expr></argument>)<pos:position pos:line="38" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="49"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="39" pos:column="3">FREE<pos:position pos:line="39" pos:column="7"/></name><argument_list pos:line="39" pos:column="7">(<argument><expr><name pos:line="39" pos:column="8">parser<pos:position pos:line="39" pos:column="14"/></name></expr></argument>)<pos:position pos:line="39" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="16"/></expr_stmt>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
