<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3720_httpd-2.4.18.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">yy_push_state<pos:position pos:line="1" pos:column="26"/></name> <parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">int<pos:position pos:line="1" pos:column="31"/></name></type>  <name pos:line="1" pos:column="33">new_state<pos:position pos:line="1" pos:column="42"/></name></decl></parameter> , <parameter><decl><type><name pos:line="1" pos:column="45">yyscan_t<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">yyscanner<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="3" pos:column="5">struct<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">yyguts_t<pos:position pos:line="3" pos:column="20"/></name></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type> <name pos:line="3" pos:column="23">yyg<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><operator pos:line="3" pos:column="29">(<pos:position pos:line="3" pos:column="30"/></operator>struct <name pos:line="3" pos:column="37">yyguts_t<pos:position pos:line="3" pos:column="45"/></name><operator pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></operator><operator pos:line="3" pos:column="46">)<pos:position pos:line="3" pos:column="47"/></operator><name pos:line="3" pos:column="47">yyscanner<pos:position pos:line="3" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="57"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">( <expr><name><name pos:line="4" pos:column="14">yyg<pos:position pos:line="4" pos:column="17"/></name><operator pos:line="4" pos:column="17">-&gt;<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="19">yy_start_stack_ptr<pos:position pos:line="4" pos:column="37"/></name></name> <operator pos:line="4" pos:column="38">&gt;=<pos:position pos:line="4" pos:column="43"/></operator> <name><name pos:line="4" pos:column="41">yyg<pos:position pos:line="4" pos:column="44"/></name><operator pos:line="4" pos:column="44">-&gt;<pos:position pos:line="4" pos:column="49"/></operator><name pos:line="4" pos:column="46">yy_start_stack_depth<pos:position pos:line="4" pos:column="66"/></name></name></expr> )<pos:position pos:line="4" pos:column="68"/></condition><then pos:line="4" pos:column="68">
		<block pos:line="5" pos:column="17">{
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">yy_size_t<pos:position pos:line="6" pos:column="26"/></name></type> <name pos:line="6" pos:column="27">new_size<pos:position pos:line="6" pos:column="35"/></name></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>

		<expr_stmt><expr><name><name pos:line="8" pos:column="17">yyg<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">-&gt;<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="22">yy_start_stack_depth<pos:position pos:line="8" pos:column="42"/></name></name> <operator pos:line="8" pos:column="43">+=<pos:position pos:line="8" pos:column="45"/></operator> <name pos:line="8" pos:column="46">YY_START_STACK_INCR<pos:position pos:line="8" pos:column="65"/></name></expr>;<pos:position pos:line="8" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><name pos:line="9" pos:column="17">new_size<pos:position pos:line="9" pos:column="25"/></name> <operator pos:line="9" pos:column="26">=<pos:position pos:line="9" pos:column="27"/></operator> <name><name pos:line="9" pos:column="28">yyg<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">-&gt;<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="33">yy_start_stack_depth<pos:position pos:line="9" pos:column="53"/></name></name> <operator pos:line="9" pos:column="54">*<pos:position pos:line="9" pos:column="55"/></operator> <sizeof pos:line="9" pos:column="56">sizeof<argument_list pos:line="9" pos:column="62">( <argument><expr><name pos:line="9" pos:column="64">int<pos:position pos:line="9" pos:column="67"/></name></expr></argument> )<pos:position pos:line="9" pos:column="69"/></argument_list></sizeof></expr>;<pos:position pos:line="9" pos:column="70"/></expr_stmt>

		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">( <expr><operator pos:line="11" pos:column="22">!<pos:position pos:line="11" pos:column="23"/></operator> <name><name pos:line="11" pos:column="24">yyg<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">-&gt;<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="29">yy_start_stack<pos:position pos:line="11" pos:column="43"/></name></name></expr> )<pos:position pos:line="11" pos:column="45"/></condition><then pos:line="11" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="12" pos:column="25">yyg<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">-&gt;<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="30">yy_start_stack<pos:position pos:line="12" pos:column="44"/></name></name> <operator pos:line="12" pos:column="45">=<pos:position pos:line="12" pos:column="46"/></operator> <operator pos:line="12" pos:column="47">(<pos:position pos:line="12" pos:column="48"/></operator><name pos:line="12" pos:column="48">int<pos:position pos:line="12" pos:column="51"/></name> <operator pos:line="12" pos:column="52">*<pos:position pos:line="12" pos:column="53"/></operator><operator pos:line="12" pos:column="53">)<pos:position pos:line="12" pos:column="54"/></operator> <call><name pos:line="12" pos:column="55">ap_expr_yyalloc<pos:position pos:line="12" pos:column="70"/></name><argument_list pos:line="12" pos:column="70">(<argument><expr><name pos:line="12" pos:column="71">new_size<pos:position pos:line="12" pos:column="79"/></name></expr></argument> ,<argument><expr><name pos:line="12" pos:column="81">yyscanner<pos:position pos:line="12" pos:column="90"/></name></expr></argument> )<pos:position pos:line="12" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="93"/></expr_stmt></block></then>

		<else pos:line="14" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="15" pos:column="25">yyg<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">-&gt;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="30">yy_start_stack<pos:position pos:line="15" pos:column="44"/></name></name> <operator pos:line="15" pos:column="45">=<pos:position pos:line="15" pos:column="46"/></operator> <operator pos:line="15" pos:column="47">(<pos:position pos:line="15" pos:column="48"/></operator><name pos:line="15" pos:column="48">int<pos:position pos:line="15" pos:column="51"/></name> <operator pos:line="15" pos:column="52">*<pos:position pos:line="15" pos:column="53"/></operator><operator pos:line="15" pos:column="53">)<pos:position pos:line="15" pos:column="54"/></operator> <call><name pos:line="15" pos:column="55">ap_expr_yyrealloc<pos:position pos:line="15" pos:column="72"/></name><argument_list pos:line="15" pos:column="72">(<argument><expr><operator pos:line="15" pos:column="73">(<pos:position pos:line="15" pos:column="74"/></operator><name pos:line="15" pos:column="74">void<pos:position pos:line="15" pos:column="78"/></name> <operator pos:line="15" pos:column="79">*<pos:position pos:line="15" pos:column="80"/></operator><operator pos:line="15" pos:column="80">)<pos:position pos:line="15" pos:column="81"/></operator> <name><name pos:line="15" pos:column="82">yyg<pos:position pos:line="15" pos:column="85"/></name><operator pos:line="15" pos:column="85">-&gt;<pos:position pos:line="15" pos:column="90"/></operator><name pos:line="15" pos:column="87">yy_start_stack<pos:position pos:line="15" pos:column="101"/></name></name></expr></argument>,<argument><expr><name pos:line="15" pos:column="102">new_size<pos:position pos:line="15" pos:column="110"/></name></expr></argument> ,<argument><expr><name pos:line="15" pos:column="112">yyscanner<pos:position pos:line="15" pos:column="121"/></name></expr></argument> )<pos:position pos:line="15" pos:column="123"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="124"/></expr_stmt></block></else></if>

		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">( <expr><operator pos:line="17" pos:column="22">!<pos:position pos:line="17" pos:column="23"/></operator> <name><name pos:line="17" pos:column="24">yyg<pos:position pos:line="17" pos:column="27"/></name><operator pos:line="17" pos:column="27">-&gt;<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="29">yy_start_stack<pos:position pos:line="17" pos:column="43"/></name></name></expr> )<pos:position pos:line="17" pos:column="45"/></condition><then pos:line="17" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="25">YY_FATAL_ERROR<pos:position pos:line="18" pos:column="39"/></name><argument_list pos:line="18" pos:column="39">( <argument><expr><literal type="string" pos:line="18" pos:column="41">"out of memory expanding start-condition stack"<pos:position pos:line="18" pos:column="88"/></literal></expr></argument> )<pos:position pos:line="18" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="91"/></expr_stmt></block></then></if>
		}<pos:position pos:line="19" pos:column="18"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="21" pos:column="9">yyg<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">-&gt;<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="14">yy_start_stack<pos:position pos:line="21" pos:column="28"/></name><index pos:line="21" pos:column="28">[<expr><name><name pos:line="21" pos:column="29">yyg<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">-&gt;<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="34">yy_start_stack_ptr<pos:position pos:line="21" pos:column="52"/></name></name><operator pos:line="21" pos:column="52">++<pos:position pos:line="21" pos:column="54"/></operator></expr>]<pos:position pos:line="21" pos:column="55"/></index></name> <operator pos:line="21" pos:column="56">=<pos:position pos:line="21" pos:column="57"/></operator> <name pos:line="21" pos:column="58">YY_START<pos:position pos:line="21" pos:column="66"/></name></expr>;<pos:position pos:line="21" pos:column="67"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="23" pos:column="9">BEGIN<pos:position pos:line="23" pos:column="14"/></name><argument_list pos:line="23" pos:column="14">(<argument><expr><name pos:line="23" pos:column="15">new_state<pos:position pos:line="23" pos:column="24"/></name></expr></argument>)<pos:position pos:line="23" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="26"/></expr_stmt>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
