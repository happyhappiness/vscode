<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2350_httpd-2.4.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_ptoken<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">include_ctx_t<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">ctx<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier><modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">parse<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="63">token_t<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">token<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="79">token_t<pos:position pos:line="1" pos:column="86"/></name> <modifier pos:line="1" pos:column="87">*<pos:position pos:line="1" pos:column="88"/></modifier></type><name pos:line="1" pos:column="88">previous<pos:position pos:line="1" pos:column="96"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="97"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">char<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">p<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">shift<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">unmatched<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="7" pos:column="5">token<pos:position pos:line="7" pos:column="10"/></name><operator pos:line="7" pos:column="10">-&gt;<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="12">value<pos:position pos:line="7" pos:column="17"/></name></name> <operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator> <name pos:line="7" pos:column="20">NULL<pos:position pos:line="7" pos:column="24"/></name></expr>;<pos:position pos:line="7" pos:column="25"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><operator pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">parse<pos:position pos:line="9" pos:column="16"/></name></expr>)<pos:position pos:line="9" pos:column="17"/></condition><then pos:line="9" pos:column="17"> <block pos:line="9" pos:column="18">{
        <return pos:line="10" pos:column="9">return <expr><literal type="number" pos:line="10" pos:column="16">0<pos:position pos:line="10" pos:column="17"/></literal></expr>;<pos:position pos:line="10" pos:column="18"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="13" pos:column="5">/* Skip leading white space */</comment>
    <while pos:line="14" pos:column="5">while <condition pos:line="14" pos:column="11">(<expr><call><name pos:line="14" pos:column="12">apr_isspace<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><operator pos:line="14" pos:column="24">*<pos:position pos:line="14" pos:column="25"/></operator><operator pos:line="14" pos:column="25">*<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="26">parse<pos:position pos:line="14" pos:column="31"/></name></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="33"/></condition> <block pos:line="14" pos:column="34">{
        <expr_stmt><expr><operator pos:line="15" pos:column="9">++<pos:position pos:line="15" pos:column="11"/></operator><operator pos:line="15" pos:column="11">*<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="12">parse<pos:position pos:line="15" pos:column="17"/></name></expr>;<pos:position pos:line="15" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></while>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">!<pos:position pos:line="18" pos:column="10"/></operator><operator pos:line="18" pos:column="10">*<pos:position pos:line="18" pos:column="11"/></operator><operator pos:line="18" pos:column="11">*<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">parse<pos:position pos:line="18" pos:column="17"/></name></expr>)<pos:position pos:line="18" pos:column="18"/></condition><then pos:line="18" pos:column="18"> <block pos:line="18" pos:column="19">{
        <expr_stmt><expr><operator pos:line="19" pos:column="9">*<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">parse<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <name pos:line="19" pos:column="18">NULL<pos:position pos:line="19" pos:column="22"/></name></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><literal type="number" pos:line="20" pos:column="16">0<pos:position pos:line="20" pos:column="17"/></literal></expr>;<pos:position pos:line="20" pos:column="18"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">TYPE_TOKEN<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><name pos:line="23" pos:column="16">token<pos:position pos:line="23" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="23">TOKEN_STRING<pos:position pos:line="23" pos:column="35"/></name></expr></argument>)<pos:position pos:line="23" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt> <comment type="block" pos:line="23" pos:column="38">/* the default type */</comment>
    <expr_stmt><expr><name pos:line="24" pos:column="5">p<pos:position pos:line="24" pos:column="6"/></name> <operator pos:line="24" pos:column="7">=<pos:position pos:line="24" pos:column="8"/></operator> <operator pos:line="24" pos:column="9">*<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">parse<pos:position pos:line="24" pos:column="15"/></name></expr>;<pos:position pos:line="24" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="25" pos:column="5">unmatched<pos:position pos:line="25" pos:column="14"/></name> <operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator> <literal type="number" pos:line="25" pos:column="17">0<pos:position pos:line="25" pos:column="18"/></literal></expr>;<pos:position pos:line="25" pos:column="19"/></expr_stmt>

    <switch pos:line="27" pos:column="5">switch <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">*<pos:position pos:line="27" pos:column="14"/></operator><operator pos:line="27" pos:column="14">(<pos:position pos:line="27" pos:column="15"/></operator><operator pos:line="27" pos:column="15">*<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="16">parse<pos:position pos:line="27" pos:column="21"/></name><operator pos:line="27" pos:column="21">)<pos:position pos:line="27" pos:column="22"/></operator><operator pos:line="27" pos:column="22">++<pos:position pos:line="27" pos:column="24"/></operator></expr>)<pos:position pos:line="27" pos:column="25"/></condition> <block pos:line="27" pos:column="26">{
    <case pos:line="28" pos:column="5">case <expr><literal type="char" pos:line="28" pos:column="10">'('<pos:position pos:line="28" pos:column="13"/></literal></expr>:<pos:position pos:line="28" pos:column="14"/></case>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">TYPE_TOKEN<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><name pos:line="29" pos:column="20">token<pos:position pos:line="29" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="27">TOKEN_LBRACE<pos:position pos:line="29" pos:column="39"/></name></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>
        <return pos:line="30" pos:column="9">return <expr><literal type="number" pos:line="30" pos:column="16">0<pos:position pos:line="30" pos:column="17"/></literal></expr>;<pos:position pos:line="30" pos:column="18"/></return>
    <case pos:line="31" pos:column="5">case <expr><literal type="char" pos:line="31" pos:column="10">')'<pos:position pos:line="31" pos:column="13"/></literal></expr>:<pos:position pos:line="31" pos:column="14"/></case>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">TYPE_TOKEN<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name pos:line="32" pos:column="20">token<pos:position pos:line="32" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="27">TOKEN_RBRACE<pos:position pos:line="32" pos:column="39"/></name></expr></argument>)<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>
        <return pos:line="33" pos:column="9">return <expr><literal type="number" pos:line="33" pos:column="16">0<pos:position pos:line="33" pos:column="17"/></literal></expr>;<pos:position pos:line="33" pos:column="18"/></return>
    <case pos:line="34" pos:column="5">case <expr><literal type="char" pos:line="34" pos:column="10">'='<pos:position pos:line="34" pos:column="13"/></literal></expr>:<pos:position pos:line="34" pos:column="14"/></case>
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><operator pos:line="35" pos:column="13">*<pos:position pos:line="35" pos:column="14"/></operator><operator pos:line="35" pos:column="14">*<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="15">parse<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">==<pos:position pos:line="35" pos:column="23"/></operator> <literal type="char" pos:line="35" pos:column="24">'='<pos:position pos:line="35" pos:column="27"/></literal></expr>)<pos:position pos:line="35" pos:column="28"/></condition><then pos:line="35" pos:column="28"> <block type="pseudo"><expr_stmt><expr><operator pos:line="35" pos:column="29">++<pos:position pos:line="35" pos:column="31"/></operator><operator pos:line="35" pos:column="31">*<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="32">parse<pos:position pos:line="35" pos:column="37"/></name></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">TYPE_TOKEN<pos:position pos:line="36" pos:column="19"/></name><argument_list pos:line="36" pos:column="19">(<argument><expr><name pos:line="36" pos:column="20">token<pos:position pos:line="36" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="27">TOKEN_EQ<pos:position pos:line="36" pos:column="35"/></name></expr></argument>)<pos:position pos:line="36" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt>
        <return pos:line="37" pos:column="9">return <expr><literal type="number" pos:line="37" pos:column="16">0<pos:position pos:line="37" pos:column="17"/></literal></expr>;<pos:position pos:line="37" pos:column="18"/></return>
    <case pos:line="38" pos:column="5">case <expr><literal type="char" pos:line="38" pos:column="10">'!'<pos:position pos:line="38" pos:column="13"/></literal></expr>:<pos:position pos:line="38" pos:column="14"/></case>
        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><operator pos:line="39" pos:column="13">*<pos:position pos:line="39" pos:column="14"/></operator><operator pos:line="39" pos:column="14">*<pos:position pos:line="39" pos:column="15"/></operator><name pos:line="39" pos:column="15">parse<pos:position pos:line="39" pos:column="20"/></name> <operator pos:line="39" pos:column="21">==<pos:position pos:line="39" pos:column="23"/></operator> <literal type="char" pos:line="39" pos:column="24">'='<pos:position pos:line="39" pos:column="27"/></literal></expr>)<pos:position pos:line="39" pos:column="28"/></condition><then pos:line="39" pos:column="28"> <block pos:line="39" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">TYPE_TOKEN<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><name pos:line="40" pos:column="24">token<pos:position pos:line="40" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="31">TOKEN_NE<pos:position pos:line="40" pos:column="39"/></name></expr></argument>)<pos:position pos:line="40" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="41" pos:column="13">++<pos:position pos:line="41" pos:column="15"/></operator><operator pos:line="41" pos:column="15">*<pos:position pos:line="41" pos:column="16"/></operator><name pos:line="41" pos:column="16">parse<pos:position pos:line="41" pos:column="21"/></name></expr>;<pos:position pos:line="41" pos:column="22"/></expr_stmt>
            <return pos:line="42" pos:column="13">return <expr><literal type="number" pos:line="42" pos:column="20">0<pos:position pos:line="42" pos:column="21"/></literal></expr>;<pos:position pos:line="42" pos:column="22"/></return>
        }<pos:position pos:line="43" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">TYPE_TOKEN<pos:position pos:line="44" pos:column="19"/></name><argument_list pos:line="44" pos:column="19">(<argument><expr><name pos:line="44" pos:column="20">token<pos:position pos:line="44" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="27">TOKEN_NOT<pos:position pos:line="44" pos:column="36"/></name></expr></argument>)<pos:position pos:line="44" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="38"/></expr_stmt>
        <return pos:line="45" pos:column="9">return <expr><literal type="number" pos:line="45" pos:column="16">0<pos:position pos:line="45" pos:column="17"/></literal></expr>;<pos:position pos:line="45" pos:column="18"/></return>
    <case pos:line="46" pos:column="5">case <expr><literal type="char" pos:line="46" pos:column="10">'\''<pos:position pos:line="46" pos:column="14"/></literal></expr>:<pos:position pos:line="46" pos:column="15"/></case>
        <expr_stmt><expr><name pos:line="47" pos:column="9">unmatched<pos:position pos:line="47" pos:column="18"/></name> <operator pos:line="47" pos:column="19">=<pos:position pos:line="47" pos:column="20"/></operator> <literal type="char" pos:line="47" pos:column="21">'\''<pos:position pos:line="47" pos:column="25"/></literal></expr>;<pos:position pos:line="47" pos:column="26"/></expr_stmt>
        <break pos:line="48" pos:column="9">break;<pos:position pos:line="48" pos:column="15"/></break>
    <case pos:line="49" pos:column="5">case <expr><literal type="char" pos:line="49" pos:column="10">'/'<pos:position pos:line="49" pos:column="13"/></literal></expr>:<pos:position pos:line="49" pos:column="14"/></case>
        <comment type="block" pos:line="50" pos:column="9">/* if last token was ACCESS, this token is STRING */</comment>
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">previous<pos:position pos:line="51" pos:column="21"/></name> <operator pos:line="51" pos:column="22">!=<pos:position pos:line="51" pos:column="24"/></operator> <name pos:line="51" pos:column="25">NULL<pos:position pos:line="51" pos:column="29"/></name> <operator pos:line="51" pos:column="30">&amp;&amp;<pos:position pos:line="51" pos:column="40"/></operator> <name pos:line="51" pos:column="33">TOKEN_ACCESS<pos:position pos:line="51" pos:column="45"/></name> <operator pos:line="51" pos:column="46">==<pos:position pos:line="51" pos:column="48"/></operator> <name><name pos:line="51" pos:column="49">previous<pos:position pos:line="51" pos:column="57"/></name><operator pos:line="51" pos:column="57">-&gt;<pos:position pos:line="51" pos:column="62"/></operator><name pos:line="51" pos:column="59">type<pos:position pos:line="51" pos:column="63"/></name></name></expr>)<pos:position pos:line="51" pos:column="64"/></condition><then pos:line="51" pos:column="64"> <block pos:line="51" pos:column="65">{
            <break pos:line="52" pos:column="13">break;<pos:position pos:line="52" pos:column="19"/></break>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">TYPE_TOKEN<pos:position pos:line="54" pos:column="19"/></name><argument_list pos:line="54" pos:column="19">(<argument><expr><name pos:line="54" pos:column="20">token<pos:position pos:line="54" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="27">TOKEN_RE<pos:position pos:line="54" pos:column="35"/></name></expr></argument>)<pos:position pos:line="54" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name pos:line="55" pos:column="9">unmatched<pos:position pos:line="55" pos:column="18"/></name> <operator pos:line="55" pos:column="19">=<pos:position pos:line="55" pos:column="20"/></operator> <literal type="char" pos:line="55" pos:column="21">'/'<pos:position pos:line="55" pos:column="24"/></literal></expr>;<pos:position pos:line="55" pos:column="25"/></expr_stmt>
        <break pos:line="56" pos:column="9">break;<pos:position pos:line="56" pos:column="15"/></break>
    <case pos:line="57" pos:column="5">case <expr><literal type="char" pos:line="57" pos:column="10">'|'<pos:position pos:line="57" pos:column="13"/></literal></expr>:<pos:position pos:line="57" pos:column="14"/></case>
        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><operator pos:line="58" pos:column="13">*<pos:position pos:line="58" pos:column="14"/></operator><operator pos:line="58" pos:column="14">*<pos:position pos:line="58" pos:column="15"/></operator><name pos:line="58" pos:column="15">parse<pos:position pos:line="58" pos:column="20"/></name> <operator pos:line="58" pos:column="21">==<pos:position pos:line="58" pos:column="23"/></operator> <literal type="char" pos:line="58" pos:column="24">'|'<pos:position pos:line="58" pos:column="27"/></literal></expr>)<pos:position pos:line="58" pos:column="28"/></condition><then pos:line="58" pos:column="28"> <block pos:line="58" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="59" pos:column="13">TYPE_TOKEN<pos:position pos:line="59" pos:column="23"/></name><argument_list pos:line="59" pos:column="23">(<argument><expr><name pos:line="59" pos:column="24">token<pos:position pos:line="59" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="31">TOKEN_OR<pos:position pos:line="59" pos:column="39"/></name></expr></argument>)<pos:position pos:line="59" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="60" pos:column="13">++<pos:position pos:line="60" pos:column="15"/></operator><operator pos:line="60" pos:column="15">*<pos:position pos:line="60" pos:column="16"/></operator><name pos:line="60" pos:column="16">parse<pos:position pos:line="60" pos:column="21"/></name></expr>;<pos:position pos:line="60" pos:column="22"/></expr_stmt>
            <return pos:line="61" pos:column="13">return <expr><literal type="number" pos:line="61" pos:column="20">0<pos:position pos:line="61" pos:column="21"/></literal></expr>;<pos:position pos:line="61" pos:column="22"/></return>
        }<pos:position pos:line="62" pos:column="10"/></block></then></if>
        <break pos:line="63" pos:column="9">break;<pos:position pos:line="63" pos:column="15"/></break>
    <case pos:line="64" pos:column="5">case <expr><literal type="char" pos:line="64" pos:column="10">'&amp;'<pos:position pos:line="64" pos:column="17"/></literal></expr>:<pos:position pos:line="64" pos:column="14"/></case>
        <if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><operator pos:line="65" pos:column="13">*<pos:position pos:line="65" pos:column="14"/></operator><operator pos:line="65" pos:column="14">*<pos:position pos:line="65" pos:column="15"/></operator><name pos:line="65" pos:column="15">parse<pos:position pos:line="65" pos:column="20"/></name> <operator pos:line="65" pos:column="21">==<pos:position pos:line="65" pos:column="23"/></operator> <literal type="char" pos:line="65" pos:column="24">'&amp;'<pos:position pos:line="65" pos:column="31"/></literal></expr>)<pos:position pos:line="65" pos:column="28"/></condition><then pos:line="65" pos:column="28"> <block pos:line="65" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="66" pos:column="13">TYPE_TOKEN<pos:position pos:line="66" pos:column="23"/></name><argument_list pos:line="66" pos:column="23">(<argument><expr><name pos:line="66" pos:column="24">token<pos:position pos:line="66" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="31">TOKEN_AND<pos:position pos:line="66" pos:column="40"/></name></expr></argument>)<pos:position pos:line="66" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="67" pos:column="13">++<pos:position pos:line="67" pos:column="15"/></operator><operator pos:line="67" pos:column="15">*<pos:position pos:line="67" pos:column="16"/></operator><name pos:line="67" pos:column="16">parse<pos:position pos:line="67" pos:column="21"/></name></expr>;<pos:position pos:line="67" pos:column="22"/></expr_stmt>
            <return pos:line="68" pos:column="13">return <expr><literal type="number" pos:line="68" pos:column="20">0<pos:position pos:line="68" pos:column="21"/></literal></expr>;<pos:position pos:line="68" pos:column="22"/></return>
        }<pos:position pos:line="69" pos:column="10"/></block></then></if>
        <break pos:line="70" pos:column="9">break;<pos:position pos:line="70" pos:column="15"/></break>
    <case pos:line="71" pos:column="5">case <expr><literal type="char" pos:line="71" pos:column="10">'&gt;'<pos:position pos:line="71" pos:column="16"/></literal></expr>:<pos:position pos:line="71" pos:column="14"/></case>
        <if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><operator pos:line="72" pos:column="13">*<pos:position pos:line="72" pos:column="14"/></operator><operator pos:line="72" pos:column="14">*<pos:position pos:line="72" pos:column="15"/></operator><name pos:line="72" pos:column="15">parse<pos:position pos:line="72" pos:column="20"/></name> <operator pos:line="72" pos:column="21">==<pos:position pos:line="72" pos:column="23"/></operator> <literal type="char" pos:line="72" pos:column="24">'='<pos:position pos:line="72" pos:column="27"/></literal></expr>)<pos:position pos:line="72" pos:column="28"/></condition><then pos:line="72" pos:column="28"> <block pos:line="72" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="73" pos:column="13">TYPE_TOKEN<pos:position pos:line="73" pos:column="23"/></name><argument_list pos:line="73" pos:column="23">(<argument><expr><name pos:line="73" pos:column="24">token<pos:position pos:line="73" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="31">TOKEN_GE<pos:position pos:line="73" pos:column="39"/></name></expr></argument>)<pos:position pos:line="73" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="74" pos:column="13">++<pos:position pos:line="74" pos:column="15"/></operator><operator pos:line="74" pos:column="15">*<pos:position pos:line="74" pos:column="16"/></operator><name pos:line="74" pos:column="16">parse<pos:position pos:line="74" pos:column="21"/></name></expr>;<pos:position pos:line="74" pos:column="22"/></expr_stmt>
            <return pos:line="75" pos:column="13">return <expr><literal type="number" pos:line="75" pos:column="20">0<pos:position pos:line="75" pos:column="21"/></literal></expr>;<pos:position pos:line="75" pos:column="22"/></return>
        }<pos:position pos:line="76" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">TYPE_TOKEN<pos:position pos:line="77" pos:column="19"/></name><argument_list pos:line="77" pos:column="19">(<argument><expr><name pos:line="77" pos:column="20">token<pos:position pos:line="77" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="27">TOKEN_GT<pos:position pos:line="77" pos:column="35"/></name></expr></argument>)<pos:position pos:line="77" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="37"/></expr_stmt>
        <return pos:line="78" pos:column="9">return <expr><literal type="number" pos:line="78" pos:column="16">0<pos:position pos:line="78" pos:column="17"/></literal></expr>;<pos:position pos:line="78" pos:column="18"/></return>
    <case pos:line="79" pos:column="5">case <expr><literal type="char" pos:line="79" pos:column="10">'&lt;'<pos:position pos:line="79" pos:column="16"/></literal></expr>:<pos:position pos:line="79" pos:column="14"/></case>
        <if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><operator pos:line="80" pos:column="13">*<pos:position pos:line="80" pos:column="14"/></operator><operator pos:line="80" pos:column="14">*<pos:position pos:line="80" pos:column="15"/></operator><name pos:line="80" pos:column="15">parse<pos:position pos:line="80" pos:column="20"/></name> <operator pos:line="80" pos:column="21">==<pos:position pos:line="80" pos:column="23"/></operator> <literal type="char" pos:line="80" pos:column="24">'='<pos:position pos:line="80" pos:column="27"/></literal></expr>)<pos:position pos:line="80" pos:column="28"/></condition><then pos:line="80" pos:column="28"> <block pos:line="80" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="81" pos:column="13">TYPE_TOKEN<pos:position pos:line="81" pos:column="23"/></name><argument_list pos:line="81" pos:column="23">(<argument><expr><name pos:line="81" pos:column="24">token<pos:position pos:line="81" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="31">TOKEN_LE<pos:position pos:line="81" pos:column="39"/></name></expr></argument>)<pos:position pos:line="81" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="82" pos:column="13">++<pos:position pos:line="82" pos:column="15"/></operator><operator pos:line="82" pos:column="15">*<pos:position pos:line="82" pos:column="16"/></operator><name pos:line="82" pos:column="16">parse<pos:position pos:line="82" pos:column="21"/></name></expr>;<pos:position pos:line="82" pos:column="22"/></expr_stmt>
            <return pos:line="83" pos:column="13">return <expr><literal type="number" pos:line="83" pos:column="20">0<pos:position pos:line="83" pos:column="21"/></literal></expr>;<pos:position pos:line="83" pos:column="22"/></return>
        }<pos:position pos:line="84" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="85" pos:column="9">TYPE_TOKEN<pos:position pos:line="85" pos:column="19"/></name><argument_list pos:line="85" pos:column="19">(<argument><expr><name pos:line="85" pos:column="20">token<pos:position pos:line="85" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="27">TOKEN_LT<pos:position pos:line="85" pos:column="35"/></name></expr></argument>)<pos:position pos:line="85" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="37"/></expr_stmt>
        <return pos:line="86" pos:column="9">return <expr><literal type="number" pos:line="86" pos:column="16">0<pos:position pos:line="86" pos:column="17"/></literal></expr>;<pos:position pos:line="86" pos:column="18"/></return>
    <case pos:line="87" pos:column="5">case <expr><literal type="char" pos:line="87" pos:column="10">'-'<pos:position pos:line="87" pos:column="13"/></literal></expr>:<pos:position pos:line="87" pos:column="14"/></case>
        <if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><operator pos:line="88" pos:column="13">*<pos:position pos:line="88" pos:column="14"/></operator><operator pos:line="88" pos:column="14">*<pos:position pos:line="88" pos:column="15"/></operator><name pos:line="88" pos:column="15">parse<pos:position pos:line="88" pos:column="20"/></name> <operator pos:line="88" pos:column="21">==<pos:position pos:line="88" pos:column="23"/></operator> <literal type="char" pos:line="88" pos:column="24">'A'<pos:position pos:line="88" pos:column="27"/></literal></expr>)<pos:position pos:line="88" pos:column="28"/></condition><then pos:line="88" pos:column="28"> <block pos:line="88" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="89" pos:column="13">TYPE_TOKEN<pos:position pos:line="89" pos:column="23"/></name><argument_list pos:line="89" pos:column="23">(<argument><expr><name pos:line="89" pos:column="24">token<pos:position pos:line="89" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="31">TOKEN_ACCESS<pos:position pos:line="89" pos:column="43"/></name></expr></argument>)<pos:position pos:line="89" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="90" pos:column="13">++<pos:position pos:line="90" pos:column="15"/></operator><operator pos:line="90" pos:column="15">*<pos:position pos:line="90" pos:column="16"/></operator><name pos:line="90" pos:column="16">parse<pos:position pos:line="90" pos:column="21"/></name></expr>;<pos:position pos:line="90" pos:column="22"/></expr_stmt>
            <return pos:line="91" pos:column="13">return <expr><literal type="number" pos:line="91" pos:column="20">0<pos:position pos:line="91" pos:column="21"/></literal></expr>;<pos:position pos:line="91" pos:column="22"/></return>
        }<pos:position pos:line="92" pos:column="10"/></block></then></if>
        <break pos:line="93" pos:column="9">break;<pos:position pos:line="93" pos:column="15"/></break>
    }<pos:position pos:line="94" pos:column="6"/></block></switch>

    <comment type="block" pos:line="96" pos:column="5">/* It's a string or regex token
     * Now search for the next token, which finishes this string
     */</comment>
    <expr_stmt><expr><name pos:line="99" pos:column="5">shift<pos:position pos:line="99" pos:column="10"/></name> <operator pos:line="99" pos:column="11">=<pos:position pos:line="99" pos:column="12"/></operator> <literal type="number" pos:line="99" pos:column="13">0<pos:position pos:line="99" pos:column="14"/></literal></expr>;<pos:position pos:line="99" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="100" pos:column="5">p<pos:position pos:line="100" pos:column="6"/></name> <operator pos:line="100" pos:column="7">=<pos:position pos:line="100" pos:column="8"/></operator> <operator pos:line="100" pos:column="9">*<pos:position pos:line="100" pos:column="10"/></operator><name pos:line="100" pos:column="10">parse<pos:position pos:line="100" pos:column="15"/></name> <operator pos:line="100" pos:column="16">=<pos:position pos:line="100" pos:column="17"/></operator> <name><name pos:line="100" pos:column="18">token<pos:position pos:line="100" pos:column="23"/></name><operator pos:line="100" pos:column="23">-&gt;<pos:position pos:line="100" pos:column="28"/></operator><name pos:line="100" pos:column="25">value<pos:position pos:line="100" pos:column="30"/></name></name> <operator pos:line="100" pos:column="31">=<pos:position pos:line="100" pos:column="32"/></operator> <ternary><condition><expr><name pos:line="100" pos:column="33">unmatched<pos:position pos:line="100" pos:column="42"/></name></expr> ?<pos:position pos:line="100" pos:column="44"/></condition><then pos:line="100" pos:column="44"> <expr><operator pos:line="100" pos:column="45">*<pos:position pos:line="100" pos:column="46"/></operator><name pos:line="100" pos:column="46">parse<pos:position pos:line="100" pos:column="51"/></name></expr> <pos:position pos:line="100" pos:column="52"/></then><else pos:line="100" pos:column="52">: <expr><name pos:line="100" pos:column="54">p<pos:position pos:line="100" pos:column="55"/></name></expr></else></ternary></expr>;<pos:position pos:line="100" pos:column="56"/></expr_stmt>

    <for pos:line="102" pos:column="5">for <control pos:line="102" pos:column="9">(<init pos:line="102" pos:column="10">;<pos:position pos:line="102" pos:column="11"/></init> <condition><expr><operator pos:line="102" pos:column="12">*<pos:position pos:line="102" pos:column="13"/></operator><operator pos:line="102" pos:column="13">*<pos:position pos:line="102" pos:column="14"/></operator><name pos:line="102" pos:column="14">parse<pos:position pos:line="102" pos:column="19"/></name></expr>;<pos:position pos:line="102" pos:column="20"/></condition> <incr><expr><name pos:line="102" pos:column="21">p<pos:position pos:line="102" pos:column="22"/></name> <operator pos:line="102" pos:column="23">=<pos:position pos:line="102" pos:column="24"/></operator> <operator pos:line="102" pos:column="25">++<pos:position pos:line="102" pos:column="27"/></operator><operator pos:line="102" pos:column="27">*<pos:position pos:line="102" pos:column="28"/></operator><name pos:line="102" pos:column="28">parse<pos:position pos:line="102" pos:column="33"/></name></expr></incr>)<pos:position pos:line="102" pos:column="34"/></control> <block pos:line="102" pos:column="35">{
        <if pos:line="103" pos:column="9">if <condition pos:line="103" pos:column="12">(<expr><operator pos:line="103" pos:column="13">*<pos:position pos:line="103" pos:column="14"/></operator><operator pos:line="103" pos:column="14">*<pos:position pos:line="103" pos:column="15"/></operator><name pos:line="103" pos:column="15">parse<pos:position pos:line="103" pos:column="20"/></name> <operator pos:line="103" pos:column="21">==<pos:position pos:line="103" pos:column="23"/></operator> <literal type="char" pos:line="103" pos:column="24">'\\'<pos:position pos:line="103" pos:column="28"/></literal></expr>)<pos:position pos:line="103" pos:column="29"/></condition><then pos:line="103" pos:column="29"> <block pos:line="103" pos:column="30">{
            <if pos:line="104" pos:column="13">if <condition pos:line="104" pos:column="16">(<expr><operator pos:line="104" pos:column="17">!<pos:position pos:line="104" pos:column="18"/></operator><operator pos:line="104" pos:column="18">*<pos:position pos:line="104" pos:column="19"/></operator><operator pos:line="104" pos:column="19">(<pos:position pos:line="104" pos:column="20"/></operator><operator pos:line="104" pos:column="20">++<pos:position pos:line="104" pos:column="22"/></operator><operator pos:line="104" pos:column="22">*<pos:position pos:line="104" pos:column="23"/></operator><name pos:line="104" pos:column="23">parse<pos:position pos:line="104" pos:column="28"/></name><operator pos:line="104" pos:column="28">)<pos:position pos:line="104" pos:column="29"/></operator></expr>)<pos:position pos:line="104" pos:column="30"/></condition><then pos:line="104" pos:column="30"> <block pos:line="104" pos:column="31">{
                <expr_stmt><expr><name pos:line="105" pos:column="17">p<pos:position pos:line="105" pos:column="18"/></name> <operator pos:line="105" pos:column="19">=<pos:position pos:line="105" pos:column="20"/></operator> <operator pos:line="105" pos:column="21">*<pos:position pos:line="105" pos:column="22"/></operator><name pos:line="105" pos:column="22">parse<pos:position pos:line="105" pos:column="27"/></name></expr>;<pos:position pos:line="105" pos:column="28"/></expr_stmt>
                <break pos:line="106" pos:column="17">break;<pos:position pos:line="106" pos:column="23"/></break>
            }<pos:position pos:line="107" pos:column="14"/></block></then></if>

            <expr_stmt><expr><operator pos:line="109" pos:column="13">++<pos:position pos:line="109" pos:column="15"/></operator><name pos:line="109" pos:column="15">shift<pos:position pos:line="109" pos:column="20"/></name></expr>;<pos:position pos:line="109" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="110" pos:column="10"/></block></then>
        <else pos:line="111" pos:column="9">else <block pos:line="111" pos:column="14">{
            <if pos:line="112" pos:column="13">if <condition pos:line="112" pos:column="16">(<expr><name pos:line="112" pos:column="17">unmatched<pos:position pos:line="112" pos:column="26"/></name></expr>)<pos:position pos:line="112" pos:column="27"/></condition><then pos:line="112" pos:column="27"> <block pos:line="112" pos:column="28">{
                <if pos:line="113" pos:column="17">if <condition pos:line="113" pos:column="20">(<expr><operator pos:line="113" pos:column="21">*<pos:position pos:line="113" pos:column="22"/></operator><operator pos:line="113" pos:column="22">*<pos:position pos:line="113" pos:column="23"/></operator><name pos:line="113" pos:column="23">parse<pos:position pos:line="113" pos:column="28"/></name> <operator pos:line="113" pos:column="29">==<pos:position pos:line="113" pos:column="31"/></operator> <name pos:line="113" pos:column="32">unmatched<pos:position pos:line="113" pos:column="41"/></name></expr>)<pos:position pos:line="113" pos:column="42"/></condition><then pos:line="113" pos:column="42"> <block pos:line="113" pos:column="43">{
                    <expr_stmt><expr><name pos:line="114" pos:column="21">unmatched<pos:position pos:line="114" pos:column="30"/></name> <operator pos:line="114" pos:column="31">=<pos:position pos:line="114" pos:column="32"/></operator> <literal type="number" pos:line="114" pos:column="33">0<pos:position pos:line="114" pos:column="34"/></literal></expr>;<pos:position pos:line="114" pos:column="35"/></expr_stmt>
                    <expr_stmt><expr><operator pos:line="115" pos:column="21">++<pos:position pos:line="115" pos:column="23"/></operator><operator pos:line="115" pos:column="23">*<pos:position pos:line="115" pos:column="24"/></operator><name pos:line="115" pos:column="24">parse<pos:position pos:line="115" pos:column="29"/></name></expr>;<pos:position pos:line="115" pos:column="30"/></expr_stmt>
                    <break pos:line="116" pos:column="21">break;<pos:position pos:line="116" pos:column="27"/></break>
                }<pos:position pos:line="117" pos:column="18"/></block></then></if>
            }<pos:position pos:line="118" pos:column="14"/></block></then> <elseif pos:line="118" pos:column="15">else <if pos:line="118" pos:column="20">if <condition pos:line="118" pos:column="23">(<expr><call><name pos:line="118" pos:column="24">apr_isspace<pos:position pos:line="118" pos:column="35"/></name><argument_list pos:line="118" pos:column="35">(<argument><expr><operator pos:line="118" pos:column="36">*<pos:position pos:line="118" pos:column="37"/></operator><operator pos:line="118" pos:column="37">*<pos:position pos:line="118" pos:column="38"/></operator><name pos:line="118" pos:column="38">parse<pos:position pos:line="118" pos:column="43"/></name></expr></argument>)<pos:position pos:line="118" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="118" pos:column="45"/></condition><then pos:line="118" pos:column="45"> <block pos:line="118" pos:column="46">{
                <break pos:line="119" pos:column="17">break;<pos:position pos:line="119" pos:column="23"/></break>
            }<pos:position pos:line="120" pos:column="14"/></block></then></if></elseif>
            <else pos:line="121" pos:column="13">else <block pos:line="121" pos:column="18">{
                <decl_stmt><decl><type><name pos:line="122" pos:column="17">int<pos:position pos:line="122" pos:column="20"/></name></type> <name pos:line="122" pos:column="21">found<pos:position pos:line="122" pos:column="26"/></name> <init pos:line="122" pos:column="27">= <expr><literal type="number" pos:line="122" pos:column="29">0<pos:position pos:line="122" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="122" pos:column="31"/></decl_stmt>

                <switch pos:line="124" pos:column="17">switch <condition pos:line="124" pos:column="24">(<expr><operator pos:line="124" pos:column="25">*<pos:position pos:line="124" pos:column="26"/></operator><operator pos:line="124" pos:column="26">*<pos:position pos:line="124" pos:column="27"/></operator><name pos:line="124" pos:column="27">parse<pos:position pos:line="124" pos:column="32"/></name></expr>)<pos:position pos:line="124" pos:column="33"/></condition> <block pos:line="124" pos:column="34">{
                <case pos:line="125" pos:column="17">case <expr><literal type="char" pos:line="125" pos:column="22">'('<pos:position pos:line="125" pos:column="25"/></literal></expr>:<pos:position pos:line="125" pos:column="26"/></case>
                <case pos:line="126" pos:column="17">case <expr><literal type="char" pos:line="126" pos:column="22">')'<pos:position pos:line="126" pos:column="25"/></literal></expr>:<pos:position pos:line="126" pos:column="26"/></case>
                <case pos:line="127" pos:column="17">case <expr><literal type="char" pos:line="127" pos:column="22">'='<pos:position pos:line="127" pos:column="25"/></literal></expr>:<pos:position pos:line="127" pos:column="26"/></case>
                <case pos:line="128" pos:column="17">case <expr><literal type="char" pos:line="128" pos:column="22">'!'<pos:position pos:line="128" pos:column="25"/></literal></expr>:<pos:position pos:line="128" pos:column="26"/></case>
                <case pos:line="129" pos:column="17">case <expr><literal type="char" pos:line="129" pos:column="22">'&lt;'<pos:position pos:line="129" pos:column="28"/></literal></expr>:<pos:position pos:line="129" pos:column="26"/></case>
                <case pos:line="130" pos:column="17">case <expr><literal type="char" pos:line="130" pos:column="22">'&gt;'<pos:position pos:line="130" pos:column="28"/></literal></expr>:<pos:position pos:line="130" pos:column="26"/></case>
                    <expr_stmt><expr><operator pos:line="131" pos:column="21">++<pos:position pos:line="131" pos:column="23"/></operator><name pos:line="131" pos:column="23">found<pos:position pos:line="131" pos:column="28"/></name></expr>;<pos:position pos:line="131" pos:column="29"/></expr_stmt>
                    <break pos:line="132" pos:column="21">break;<pos:position pos:line="132" pos:column="27"/></break>

                <case pos:line="134" pos:column="17">case <expr><literal type="char" pos:line="134" pos:column="22">'|'<pos:position pos:line="134" pos:column="25"/></literal></expr>:<pos:position pos:line="134" pos:column="26"/></case>
                <case pos:line="135" pos:column="17">case <expr><literal type="char" pos:line="135" pos:column="22">'&amp;'<pos:position pos:line="135" pos:column="29"/></literal></expr>:<pos:position pos:line="135" pos:column="26"/></case>
                    <if pos:line="136" pos:column="21">if <condition pos:line="136" pos:column="24">(<expr><operator pos:line="136" pos:column="25">(<pos:position pos:line="136" pos:column="26"/></operator><operator pos:line="136" pos:column="26">*<pos:position pos:line="136" pos:column="27"/></operator><name pos:line="136" pos:column="27">parse<pos:position pos:line="136" pos:column="32"/></name><operator pos:line="136" pos:column="32">)<pos:position pos:line="136" pos:column="33"/></operator><index pos:line="136" pos:column="33">[<expr><literal type="number" pos:line="136" pos:column="34">1<pos:position pos:line="136" pos:column="35"/></literal></expr>]<pos:position pos:line="136" pos:column="36"/></index> <operator pos:line="136" pos:column="37">==<pos:position pos:line="136" pos:column="39"/></operator> <operator pos:line="136" pos:column="40">*<pos:position pos:line="136" pos:column="41"/></operator><operator pos:line="136" pos:column="41">*<pos:position pos:line="136" pos:column="42"/></operator><name pos:line="136" pos:column="42">parse<pos:position pos:line="136" pos:column="47"/></name></expr>)<pos:position pos:line="136" pos:column="48"/></condition><then pos:line="136" pos:column="48"> <block pos:line="136" pos:column="49">{
                        <expr_stmt><expr><operator pos:line="137" pos:column="25">++<pos:position pos:line="137" pos:column="27"/></operator><name pos:line="137" pos:column="27">found<pos:position pos:line="137" pos:column="32"/></name></expr>;<pos:position pos:line="137" pos:column="33"/></expr_stmt>
                    }<pos:position pos:line="138" pos:column="22"/></block></then></if>
                    <break pos:line="139" pos:column="21">break;<pos:position pos:line="139" pos:column="27"/></break>
                }<pos:position pos:line="140" pos:column="18"/></block></switch>

                <if pos:line="142" pos:column="17">if <condition pos:line="142" pos:column="20">(<expr><name pos:line="142" pos:column="21">found<pos:position pos:line="142" pos:column="26"/></name></expr>)<pos:position pos:line="142" pos:column="27"/></condition><then pos:line="142" pos:column="27"> <block pos:line="142" pos:column="28">{
                    <break pos:line="143" pos:column="21">break;<pos:position pos:line="143" pos:column="27"/></break>
                }<pos:position pos:line="144" pos:column="18"/></block></then></if>
            }<pos:position pos:line="145" pos:column="14"/></block></else></if>
        }<pos:position pos:line="146" pos:column="10"/></block></else></if>
    }<pos:position pos:line="147" pos:column="6"/></block></for>

    <if pos:line="149" pos:column="5">if <condition pos:line="149" pos:column="8">(<expr><name pos:line="149" pos:column="9">unmatched<pos:position pos:line="149" pos:column="18"/></name></expr>)<pos:position pos:line="149" pos:column="19"/></condition><then pos:line="149" pos:column="19"> <block pos:line="149" pos:column="20">{
        <expr_stmt><expr><name><name pos:line="150" pos:column="9">token<pos:position pos:line="150" pos:column="14"/></name><operator pos:line="150" pos:column="14">-&gt;<pos:position pos:line="150" pos:column="19"/></operator><name pos:line="150" pos:column="16">value<pos:position pos:line="150" pos:column="21"/></name></name> <operator pos:line="150" pos:column="22">=<pos:position pos:line="150" pos:column="23"/></operator> <call><name pos:line="150" pos:column="24">apr_pstrdup<pos:position pos:line="150" pos:column="35"/></name><argument_list pos:line="150" pos:column="35">(<argument><expr><name><name pos:line="150" pos:column="36">ctx<pos:position pos:line="150" pos:column="39"/></name><operator pos:line="150" pos:column="39">-&gt;<pos:position pos:line="150" pos:column="44"/></operator><name pos:line="150" pos:column="41">dpool<pos:position pos:line="150" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="150" pos:column="48">""<pos:position pos:line="150" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="150" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="151" pos:column="6"/></block></then>
    <else pos:line="152" pos:column="5">else <block pos:line="152" pos:column="10">{
        <decl_stmt><decl><type><name pos:line="153" pos:column="9">apr_size_t<pos:position pos:line="153" pos:column="19"/></name></type> <name pos:line="153" pos:column="20">len<pos:position pos:line="153" pos:column="23"/></name> <init pos:line="153" pos:column="24">= <expr><name pos:line="153" pos:column="26">p<pos:position pos:line="153" pos:column="27"/></name> <operator pos:line="153" pos:column="28">-<pos:position pos:line="153" pos:column="29"/></operator> <name><name pos:line="153" pos:column="30">token<pos:position pos:line="153" pos:column="35"/></name><operator pos:line="153" pos:column="35">-&gt;<pos:position pos:line="153" pos:column="40"/></operator><name pos:line="153" pos:column="37">value<pos:position pos:line="153" pos:column="42"/></name></name> <operator pos:line="153" pos:column="43">-<pos:position pos:line="153" pos:column="44"/></operator> <name pos:line="153" pos:column="45">shift<pos:position pos:line="153" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="153" pos:column="51"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="154" pos:column="9">char<pos:position pos:line="154" pos:column="13"/></name> <modifier pos:line="154" pos:column="14">*<pos:position pos:line="154" pos:column="15"/></modifier></type><name pos:line="154" pos:column="15">c<pos:position pos:line="154" pos:column="16"/></name> <init pos:line="154" pos:column="17">= <expr><call><name pos:line="154" pos:column="19">apr_palloc<pos:position pos:line="154" pos:column="29"/></name><argument_list pos:line="154" pos:column="29">(<argument><expr><name><name pos:line="154" pos:column="30">ctx<pos:position pos:line="154" pos:column="33"/></name><operator pos:line="154" pos:column="33">-&gt;<pos:position pos:line="154" pos:column="38"/></operator><name pos:line="154" pos:column="35">dpool<pos:position pos:line="154" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="42">len<pos:position pos:line="154" pos:column="45"/></name> <operator pos:line="154" pos:column="46">+<pos:position pos:line="154" pos:column="47"/></operator> <literal type="number" pos:line="154" pos:column="48">1<pos:position pos:line="154" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="154" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="154" pos:column="51"/></decl_stmt>

        <expr_stmt><expr><name pos:line="156" pos:column="9">p<pos:position pos:line="156" pos:column="10"/></name> <operator pos:line="156" pos:column="11">=<pos:position pos:line="156" pos:column="12"/></operator> <name><name pos:line="156" pos:column="13">token<pos:position pos:line="156" pos:column="18"/></name><operator pos:line="156" pos:column="18">-&gt;<pos:position pos:line="156" pos:column="23"/></operator><name pos:line="156" pos:column="20">value<pos:position pos:line="156" pos:column="25"/></name></name></expr>;<pos:position pos:line="156" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="157" pos:column="9">token<pos:position pos:line="157" pos:column="14"/></name><operator pos:line="157" pos:column="14">-&gt;<pos:position pos:line="157" pos:column="19"/></operator><name pos:line="157" pos:column="16">value<pos:position pos:line="157" pos:column="21"/></name></name> <operator pos:line="157" pos:column="22">=<pos:position pos:line="157" pos:column="23"/></operator> <name pos:line="157" pos:column="24">c<pos:position pos:line="157" pos:column="25"/></name></expr>;<pos:position pos:line="157" pos:column="26"/></expr_stmt>

        <while pos:line="159" pos:column="9">while <condition pos:line="159" pos:column="15">(<expr><name pos:line="159" pos:column="16">shift<pos:position pos:line="159" pos:column="21"/></name><operator pos:line="159" pos:column="21">--<pos:position pos:line="159" pos:column="23"/></operator></expr>)<pos:position pos:line="159" pos:column="24"/></condition> <block pos:line="159" pos:column="25">{
            <decl_stmt><decl><type><specifier pos:line="160" pos:column="13">const<pos:position pos:line="160" pos:column="18"/></specifier> <name pos:line="160" pos:column="19">char<pos:position pos:line="160" pos:column="23"/></name> <modifier pos:line="160" pos:column="24">*<pos:position pos:line="160" pos:column="25"/></modifier></type><name pos:line="160" pos:column="25">e<pos:position pos:line="160" pos:column="26"/></name> <init pos:line="160" pos:column="27">= <expr><call><name pos:line="160" pos:column="29">ap_strchr_c<pos:position pos:line="160" pos:column="40"/></name><argument_list pos:line="160" pos:column="40">(<argument><expr><name pos:line="160" pos:column="41">p<pos:position pos:line="160" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="160" pos:column="44">'\\'<pos:position pos:line="160" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="160" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="160" pos:column="50"/></decl_stmt>

            <expr_stmt><expr><call><name pos:line="162" pos:column="13">memcpy<pos:position pos:line="162" pos:column="19"/></name><argument_list pos:line="162" pos:column="19">(<argument><expr><name pos:line="162" pos:column="20">c<pos:position pos:line="162" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="162" pos:column="23">p<pos:position pos:line="162" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="162" pos:column="26">e<pos:position pos:line="162" pos:column="27"/></name><operator pos:line="162" pos:column="27">-<pos:position pos:line="162" pos:column="28"/></operator><name pos:line="162" pos:column="28">p<pos:position pos:line="162" pos:column="29"/></name></expr></argument>)<pos:position pos:line="162" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name pos:line="163" pos:column="13">c<pos:position pos:line="163" pos:column="14"/></name>   <operator pos:line="163" pos:column="17">+=<pos:position pos:line="163" pos:column="19"/></operator> <name pos:line="163" pos:column="20">e<pos:position pos:line="163" pos:column="21"/></name><operator pos:line="163" pos:column="21">-<pos:position pos:line="163" pos:column="22"/></operator><name pos:line="163" pos:column="22">p<pos:position pos:line="163" pos:column="23"/></name></expr>;<pos:position pos:line="163" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="164" pos:column="13">*<pos:position pos:line="164" pos:column="14"/></operator><name pos:line="164" pos:column="14">c<pos:position pos:line="164" pos:column="15"/></name><operator pos:line="164" pos:column="15">++<pos:position pos:line="164" pos:column="17"/></operator> <operator pos:line="164" pos:column="18">=<pos:position pos:line="164" pos:column="19"/></operator> <operator pos:line="164" pos:column="20">*<pos:position pos:line="164" pos:column="21"/></operator><operator pos:line="164" pos:column="21">++<pos:position pos:line="164" pos:column="23"/></operator><name pos:line="164" pos:column="23">e<pos:position pos:line="164" pos:column="24"/></name></expr>;<pos:position pos:line="164" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><name pos:line="165" pos:column="13">len<pos:position pos:line="165" pos:column="16"/></name> <operator pos:line="165" pos:column="17">-=<pos:position pos:line="165" pos:column="19"/></operator> <name pos:line="165" pos:column="20">e<pos:position pos:line="165" pos:column="21"/></name><operator pos:line="165" pos:column="21">-<pos:position pos:line="165" pos:column="22"/></operator><name pos:line="165" pos:column="22">p<pos:position pos:line="165" pos:column="23"/></name></expr>;<pos:position pos:line="165" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><name pos:line="166" pos:column="13">p<pos:position pos:line="166" pos:column="14"/></name>    <operator pos:line="166" pos:column="18">=<pos:position pos:line="166" pos:column="19"/></operator> <name pos:line="166" pos:column="20">e<pos:position pos:line="166" pos:column="21"/></name><operator pos:line="166" pos:column="21">+<pos:position pos:line="166" pos:column="22"/></operator><literal type="number" pos:line="166" pos:column="22">1<pos:position pos:line="166" pos:column="23"/></literal></expr>;<pos:position pos:line="166" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="167" pos:column="10"/></block></while>

        <if pos:line="169" pos:column="9">if <condition pos:line="169" pos:column="12">(<expr><name pos:line="169" pos:column="13">len<pos:position pos:line="169" pos:column="16"/></name></expr>)<pos:position pos:line="169" pos:column="17"/></condition><then pos:line="169" pos:column="17"> <block pos:line="169" pos:column="18">{
            <expr_stmt><expr><call><name pos:line="170" pos:column="13">memcpy<pos:position pos:line="170" pos:column="19"/></name><argument_list pos:line="170" pos:column="19">(<argument><expr><name pos:line="170" pos:column="20">c<pos:position pos:line="170" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="170" pos:column="23">p<pos:position pos:line="170" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="170" pos:column="26">len<pos:position pos:line="170" pos:column="29"/></name></expr></argument>)<pos:position pos:line="170" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="171" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="172" pos:column="9">c<pos:position pos:line="172" pos:column="10"/></name><index pos:line="172" pos:column="10">[<expr><name pos:line="172" pos:column="11">len<pos:position pos:line="172" pos:column="14"/></name></expr>]<pos:position pos:line="172" pos:column="15"/></index></name> <operator pos:line="172" pos:column="16">=<pos:position pos:line="172" pos:column="17"/></operator> <literal type="char" pos:line="172" pos:column="18">'\0'<pos:position pos:line="172" pos:column="22"/></literal></expr>;<pos:position pos:line="172" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="173" pos:column="6"/></block></else></if>

    <return pos:line="175" pos:column="5">return <expr><name pos:line="175" pos:column="12">unmatched<pos:position pos:line="175" pos:column="21"/></name></expr>;<pos:position pos:line="175" pos:column="22"/></return>
}<pos:position pos:line="176" pos:column="2"/></block></function></unit>
