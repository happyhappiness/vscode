<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1592_httpd-2.3.6.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">ap_process_async_request<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">request_rec<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">r<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">conn_rec<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">c<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><name><name pos:line="3" pos:column="19">r<pos:position pos:line="3" pos:column="20"/></name><operator pos:line="3" pos:column="20">-&gt;<pos:position pos:line="3" pos:column="25"/></operator><name pos:line="3" pos:column="22">connection<pos:position pos:line="3" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">access_status<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* Give quick handlers a shot at serving the request on the fast
     * path, bypassing all of the other Apache hooks.
     *
     * This hook was added to enable serving files out of a URI keyed
     * content cache ( e.g., Mike Abbott's Quick Shortcut Cache,
     * described here: http://oss.sgi.com/projects/apache/mod_qsc.html )
     *
     * It may have other uses as well, such as routing requests directly to
     * content handlers that have the ability to grok HTTP and do their
     * own access checking, etc (e.g. servlet engines).
     *
     * Use this hook with extreme care and only if you know what you are
     * doing.
     */</comment>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">AP_PROCESS_REQUEST_ENTRY<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><operator pos:line="20" pos:column="30">(<pos:position pos:line="20" pos:column="31"/></operator><name pos:line="20" pos:column="31">uintptr_t<pos:position pos:line="20" pos:column="40"/></name><operator pos:line="20" pos:column="40">)<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="41">r<pos:position pos:line="20" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="44">r<pos:position pos:line="20" pos:column="45"/></name><operator pos:line="20" pos:column="45">-&gt;<pos:position pos:line="20" pos:column="50"/></operator><name pos:line="20" pos:column="47">uri<pos:position pos:line="20" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">ap_extended_status<pos:position pos:line="21" pos:column="27"/></name></expr>)<pos:position pos:line="21" pos:column="28"/></condition><then pos:line="21" pos:column="28"> <block pos:line="21" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">ap_time_process_request<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><name><name pos:line="22" pos:column="33">r<pos:position pos:line="22" pos:column="34"/></name><operator pos:line="22" pos:column="34">-&gt;<pos:position pos:line="22" pos:column="39"/></operator><name pos:line="22" pos:column="36">connection<pos:position pos:line="22" pos:column="46"/></name><operator pos:line="22" pos:column="46">-&gt;<pos:position pos:line="22" pos:column="51"/></operator><name pos:line="22" pos:column="48">sbh<pos:position pos:line="22" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="53">START_PREQUEST<pos:position pos:line="22" pos:column="67"/></name></expr></argument>)<pos:position pos:line="22" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="69"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

<cpp:if pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">if<pos:position pos:line="25" pos:column="4"/></cpp:directive> <expr><name pos:line="25" pos:column="5">APR_HAS_THREADS<pos:position pos:line="25" pos:column="20"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">apr_thread_mutex_create<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><operator pos:line="26" pos:column="29">&amp;<pos:position pos:line="26" pos:column="34"/></operator><name><name pos:line="26" pos:column="30">r<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">-&gt;<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="33">invoke_mtx<pos:position pos:line="26" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="45">APR_THREAD_MUTEX_DEFAULT<pos:position pos:line="26" pos:column="69"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="71">r<pos:position pos:line="26" pos:column="72"/></name><operator pos:line="26" pos:column="72">-&gt;<pos:position pos:line="26" pos:column="77"/></operator><name pos:line="26" pos:column="74">pool<pos:position pos:line="26" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">apr_thread_mutex_lock<pos:position pos:line="27" pos:column="26"/></name><argument_list pos:line="27" pos:column="26">(<argument><expr><name><name pos:line="27" pos:column="27">r<pos:position pos:line="27" pos:column="28"/></name><operator pos:line="27" pos:column="28">-&gt;<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="30">invoke_mtx<pos:position pos:line="27" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="42"/></expr_stmt>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="29" pos:column="5">access_status<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <call><name pos:line="29" pos:column="21">ap_run_quick_handler<pos:position pos:line="29" pos:column="41"/></name><argument_list pos:line="29" pos:column="41">(<argument><expr><name pos:line="29" pos:column="42">r<pos:position pos:line="29" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="45">0<pos:position pos:line="29" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt>  <comment type="block" pos:line="29" pos:column="50">/* Not a look-up request */</comment>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">access_status<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">==<pos:position pos:line="30" pos:column="25"/></operator> <name pos:line="30" pos:column="26">DECLINED<pos:position pos:line="30" pos:column="34"/></name></expr>)<pos:position pos:line="30" pos:column="35"/></condition><then pos:line="30" pos:column="35"> <block pos:line="30" pos:column="36">{
        <expr_stmt><expr><name pos:line="31" pos:column="9">access_status<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">=<pos:position pos:line="31" pos:column="24"/></operator> <call><name pos:line="31" pos:column="25">ap_process_request_internal<pos:position pos:line="31" pos:column="52"/></name><argument_list pos:line="31" pos:column="52">(<argument><expr><name pos:line="31" pos:column="53">r<pos:position pos:line="31" pos:column="54"/></name></expr></argument>)<pos:position pos:line="31" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="56"/></expr_stmt>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">access_status<pos:position pos:line="32" pos:column="26"/></name> <operator pos:line="32" pos:column="27">==<pos:position pos:line="32" pos:column="29"/></operator> <name pos:line="32" pos:column="30">OK<pos:position pos:line="32" pos:column="32"/></name></expr>)<pos:position pos:line="32" pos:column="33"/></condition><then pos:line="32" pos:column="33"> <block pos:line="32" pos:column="34">{
            <expr_stmt><expr><name pos:line="33" pos:column="13">access_status<pos:position pos:line="33" pos:column="26"/></name> <operator pos:line="33" pos:column="27">=<pos:position pos:line="33" pos:column="28"/></operator> <call><name pos:line="33" pos:column="29">ap_invoke_handler<pos:position pos:line="33" pos:column="46"/></name><argument_list pos:line="33" pos:column="46">(<argument><expr><name pos:line="33" pos:column="47">r<pos:position pos:line="33" pos:column="48"/></name></expr></argument>)<pos:position pos:line="33" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="50"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">access_status<pos:position pos:line="37" pos:column="22"/></name> <operator pos:line="37" pos:column="23">==<pos:position pos:line="37" pos:column="25"/></operator> <name pos:line="37" pos:column="26">SUSPENDED<pos:position pos:line="37" pos:column="35"/></name></expr>)<pos:position pos:line="37" pos:column="36"/></condition><then pos:line="37" pos:column="36"> <block pos:line="37" pos:column="37">{
        <comment type="block" pos:line="38" pos:column="9">/* TODO: Should move these steps into a generic function, so modules
         * working on a suspended request can also call _ENTRY again.
         */</comment>
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">AP_PROCESS_REQUEST_RETURN<pos:position pos:line="41" pos:column="34"/></name><argument_list pos:line="41" pos:column="34">(<argument><expr><operator pos:line="41" pos:column="35">(<pos:position pos:line="41" pos:column="36"/></operator><name pos:line="41" pos:column="36">uintptr_t<pos:position pos:line="41" pos:column="45"/></name><operator pos:line="41" pos:column="45">)<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="46">r<pos:position pos:line="41" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="49">r<pos:position pos:line="41" pos:column="50"/></name><operator pos:line="41" pos:column="50">-&gt;<pos:position pos:line="41" pos:column="55"/></operator><name pos:line="41" pos:column="52">uri<pos:position pos:line="41" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="57">access_status<pos:position pos:line="41" pos:column="70"/></name></expr></argument>)<pos:position pos:line="41" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="72"/></expr_stmt>
        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">ap_extended_status<pos:position pos:line="42" pos:column="31"/></name></expr>)<pos:position pos:line="42" pos:column="32"/></condition><then pos:line="42" pos:column="32"> <block pos:line="42" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">ap_time_process_request<pos:position pos:line="43" pos:column="36"/></name><argument_list pos:line="43" pos:column="36">(<argument><expr><name><name pos:line="43" pos:column="37">c<pos:position pos:line="43" pos:column="38"/></name><operator pos:line="43" pos:column="38">-&gt;<pos:position pos:line="43" pos:column="43"/></operator><name pos:line="43" pos:column="40">sbh<pos:position pos:line="43" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="45">STOP_PREQUEST<pos:position pos:line="43" pos:column="58"/></name></expr></argument>)<pos:position pos:line="43" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="60"/></expr_stmt>
        }<pos:position pos:line="44" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="45" pos:column="9">c<pos:position pos:line="45" pos:column="10"/></name><operator pos:line="45" pos:column="10">-&gt;<pos:position pos:line="45" pos:column="15"/></operator><name pos:line="45" pos:column="12">cs<pos:position pos:line="45" pos:column="14"/></name><operator pos:line="45" pos:column="14">-&gt;<pos:position pos:line="45" pos:column="19"/></operator><name pos:line="45" pos:column="16">state<pos:position pos:line="45" pos:column="21"/></name></name> <operator pos:line="45" pos:column="22">=<pos:position pos:line="45" pos:column="23"/></operator> <name pos:line="45" pos:column="24">CONN_STATE_SUSPENDED<pos:position pos:line="45" pos:column="44"/></name></expr>;<pos:position pos:line="45" pos:column="45"/></expr_stmt>
<cpp:if pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">if<pos:position pos:line="46" pos:column="4"/></cpp:directive> <expr><name pos:line="46" pos:column="5">APR_HAS_THREADS<pos:position pos:line="46" pos:column="20"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="47" pos:column="32"/></name><argument_list pos:line="47" pos:column="32">(<argument><expr><name><name pos:line="47" pos:column="33">r<pos:position pos:line="47" pos:column="34"/></name><operator pos:line="47" pos:column="34">-&gt;<pos:position pos:line="47" pos:column="39"/></operator><name pos:line="47" pos:column="36">invoke_mtx<pos:position pos:line="47" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="48"/></expr_stmt>
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif>
        <return pos:line="49" pos:column="9">return;<pos:position pos:line="49" pos:column="16"/></return>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>
<cpp:if pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">if<pos:position pos:line="51" pos:column="4"/></cpp:directive> <expr><name pos:line="51" pos:column="5">APR_HAS_THREADS<pos:position pos:line="51" pos:column="20"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">apr_thread_mutex_unlock<pos:position pos:line="52" pos:column="28"/></name><argument_list pos:line="52" pos:column="28">(<argument><expr><name><name pos:line="52" pos:column="29">r<pos:position pos:line="52" pos:column="30"/></name><operator pos:line="52" pos:column="30">-&gt;<pos:position pos:line="52" pos:column="35"/></operator><name pos:line="52" pos:column="32">invoke_mtx<pos:position pos:line="52" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">endif<pos:position pos:line="53" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="55" pos:column="5">if <condition pos:line="55" pos:column="8">(<expr><name pos:line="55" pos:column="9">access_status<pos:position pos:line="55" pos:column="22"/></name> <operator pos:line="55" pos:column="23">==<pos:position pos:line="55" pos:column="25"/></operator> <name pos:line="55" pos:column="26">DONE<pos:position pos:line="55" pos:column="30"/></name></expr>)<pos:position pos:line="55" pos:column="31"/></condition><then pos:line="55" pos:column="31"> <block pos:line="55" pos:column="32">{
        <comment type="block" pos:line="56" pos:column="9">/* e.g., something not in storage like TRACE */</comment>
        <expr_stmt><expr><name pos:line="57" pos:column="9">access_status<pos:position pos:line="57" pos:column="22"/></name> <operator pos:line="57" pos:column="23">=<pos:position pos:line="57" pos:column="24"/></operator> <name pos:line="57" pos:column="25">OK<pos:position pos:line="57" pos:column="27"/></name></expr>;<pos:position pos:line="57" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>

    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><name pos:line="60" pos:column="9">access_status<pos:position pos:line="60" pos:column="22"/></name> <operator pos:line="60" pos:column="23">==<pos:position pos:line="60" pos:column="25"/></operator> <name pos:line="60" pos:column="26">OK<pos:position pos:line="60" pos:column="28"/></name></expr>)<pos:position pos:line="60" pos:column="29"/></condition><then pos:line="60" pos:column="29"> <block pos:line="60" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">ap_finalize_request_protocol<pos:position pos:line="61" pos:column="37"/></name><argument_list pos:line="61" pos:column="37">(<argument><expr><name pos:line="61" pos:column="38">r<pos:position pos:line="61" pos:column="39"/></name></expr></argument>)<pos:position pos:line="61" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="62" pos:column="6"/></block></then>
    <else pos:line="63" pos:column="5">else <block pos:line="63" pos:column="10">{
        <expr_stmt><expr><name><name pos:line="64" pos:column="9">r<pos:position pos:line="64" pos:column="10"/></name><operator pos:line="64" pos:column="10">-&gt;<pos:position pos:line="64" pos:column="15"/></operator><name pos:line="64" pos:column="12">status<pos:position pos:line="64" pos:column="18"/></name></name> <operator pos:line="64" pos:column="19">=<pos:position pos:line="64" pos:column="20"/></operator> <name pos:line="64" pos:column="21">HTTP_OK<pos:position pos:line="64" pos:column="28"/></name></expr>;<pos:position pos:line="64" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">ap_die<pos:position pos:line="65" pos:column="15"/></name><argument_list pos:line="65" pos:column="15">(<argument><expr><name pos:line="65" pos:column="16">access_status<pos:position pos:line="65" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="31">r<pos:position pos:line="65" pos:column="32"/></name></expr></argument>)<pos:position pos:line="65" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="66" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="68" pos:column="5">ap_process_request_after_handler<pos:position pos:line="68" pos:column="37"/></name><argument_list pos:line="68" pos:column="37">(<argument><expr><name pos:line="68" pos:column="38">r<pos:position pos:line="68" pos:column="39"/></name></expr></argument>)<pos:position pos:line="68" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="41"/></expr_stmt>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
