<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_6250.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier><name pos:line="1" pos:column="14">APR_THREAD_FUNC<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">start_threads<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name pos:line="1" pos:column="44">apr_thread_t<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type> <name pos:line="1" pos:column="59">thd<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="64">void<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">dummy<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">thread_starter<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">ts<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><name pos:line="3" pos:column="26">dummy<pos:position pos:line="3" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_thread_t<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier><modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">threads<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><name><name pos:line="4" pos:column="30">ts<pos:position pos:line="4" pos:column="32"/></name><operator pos:line="4" pos:column="32">-&gt;<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="34">threads<pos:position pos:line="4" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_threadattr_t<pos:position pos:line="5" pos:column="21"/></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">thread_attr<pos:position pos:line="5" pos:column="34"/></name> <init pos:line="5" pos:column="35">= <expr><name><name pos:line="5" pos:column="37">ts<pos:position pos:line="5" pos:column="39"/></name><operator pos:line="5" pos:column="39">-&gt;<pos:position pos:line="5" pos:column="44"/></operator><name pos:line="5" pos:column="41">threadattr<pos:position pos:line="5" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="52"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">child_num_arg<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><name><name pos:line="6" pos:column="25">ts<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">-&gt;<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="29">child_num_arg<pos:position pos:line="6" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">my_child_num<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><name pos:line="7" pos:column="24">child_num_arg<pos:position pos:line="7" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">proc_info<pos:position pos:line="8" pos:column="14"/></name> <modifier pos:line="8" pos:column="15">*<pos:position pos:line="8" pos:column="16"/></modifier></type><name pos:line="8" pos:column="16">my_info<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_status_t<pos:position pos:line="9" pos:column="17"/></name></type> <name pos:line="9" pos:column="18">rv<pos:position pos:line="9" pos:column="20"/></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">i<pos:position pos:line="10" pos:column="10"/></name></decl>;<pos:position pos:line="10" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">threads_created<pos:position pos:line="11" pos:column="24"/></name> <init pos:line="11" pos:column="25">= <expr><literal type="number" pos:line="11" pos:column="27">0<pos:position pos:line="11" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">listener_started<pos:position pos:line="12" pos:column="25"/></name> <init pos:line="12" pos:column="26">= <expr><literal type="number" pos:line="12" pos:column="28">0<pos:position pos:line="12" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">loops<pos:position pos:line="13" pos:column="14"/></name></decl>;<pos:position pos:line="13" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">prev_threads_created<pos:position pos:line="14" pos:column="29"/></name></decl>;<pos:position pos:line="14" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">max_recycled_pools<pos:position pos:line="15" pos:column="27"/></name> <init pos:line="15" pos:column="28">= <expr><operator pos:line="15" pos:column="30">-<pos:position pos:line="15" pos:column="31"/></operator><literal type="number" pos:line="15" pos:column="31">1<pos:position pos:line="15" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">int<pos:position pos:line="16" pos:column="8"/></name></type> <name><name pos:line="16" pos:column="9">good_methods<pos:position pos:line="16" pos:column="21"/></name><index pos:line="16" pos:column="21">[]<pos:position pos:line="16" pos:column="23"/></index></name> <init pos:line="16" pos:column="24">= <expr><block pos:line="16" pos:column="26">{<expr><name pos:line="16" pos:column="27">APR_POLLSET_KQUEUE<pos:position pos:line="16" pos:column="45"/></name></expr>, <expr><name pos:line="16" pos:column="47">APR_POLLSET_PORT<pos:position pos:line="16" pos:column="63"/></name></expr>, <expr><name pos:line="16" pos:column="65">APR_POLLSET_EPOLL<pos:position pos:line="16" pos:column="82"/></name></expr>}<pos:position pos:line="16" pos:column="83"/></block></expr></init></decl>;<pos:position pos:line="16" pos:column="84"/></decl_stmt>

    <comment type="block" pos:line="18" pos:column="5">/* We must create the fd queues before we start up the listener
     * and worker threads. */</comment>
    <expr_stmt><expr><name pos:line="20" pos:column="5">worker_queue<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <call><name pos:line="20" pos:column="20">apr_pcalloc<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">pchild<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="40">sizeof<argument_list pos:line="20" pos:column="46">(<argument><expr><operator pos:line="20" pos:column="47">*<pos:position pos:line="20" pos:column="48"/></operator><name pos:line="20" pos:column="48">worker_queue<pos:position pos:line="20" pos:column="60"/></name></expr></argument>)<pos:position pos:line="20" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">rv<pos:position pos:line="21" pos:column="7"/></name> <operator pos:line="21" pos:column="8">=<pos:position pos:line="21" pos:column="9"/></operator> <call><name pos:line="21" pos:column="10">ap_queue_init<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">worker_queue<pos:position pos:line="21" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="38">threads_per_child<pos:position pos:line="21" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="57">pchild<pos:position pos:line="21" pos:column="63"/></name></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="65"/></expr_stmt>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">rv<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">!=<pos:position pos:line="22" pos:column="14"/></operator> <name pos:line="22" pos:column="15">APR_SUCCESS<pos:position pos:line="22" pos:column="26"/></name></expr>)<pos:position pos:line="22" pos:column="27"/></condition><then pos:line="22" pos:column="27"> <block pos:line="22" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">ap_log_error<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">(<argument><expr><name pos:line="23" pos:column="22">APLOG_MARK<pos:position pos:line="23" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="34">APLOG_ALERT<pos:position pos:line="23" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="47">rv<pos:position pos:line="23" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="51">ap_server_conf<pos:position pos:line="23" pos:column="65"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="24" pos:column="22">"ap_queue_init() failed"<pos:position pos:line="24" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">clean_child_exit<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><name pos:line="25" pos:column="26">APEXIT_CHILDFATAL<pos:position pos:line="25" pos:column="43"/></name></expr></argument>)<pos:position pos:line="25" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">ap_max_mem_free<pos:position pos:line="28" pos:column="24"/></name> <operator pos:line="28" pos:column="25">!=<pos:position pos:line="28" pos:column="27"/></operator> <name pos:line="28" pos:column="28">APR_ALLOCATOR_MAX_FREE_UNLIMITED<pos:position pos:line="28" pos:column="60"/></name></expr>)<pos:position pos:line="28" pos:column="61"/></condition><then pos:line="28" pos:column="61"> <block pos:line="28" pos:column="62">{
        <comment type="block" pos:line="29" pos:column="9">/* If we want to conserve memory, let's not keep an unlimited number of
         * pools &amp; allocators.
         * XXX: This should probably be a separate config directive
         */</comment>
        <expr_stmt><expr><name pos:line="33" pos:column="9">max_recycled_pools<pos:position pos:line="33" pos:column="27"/></name> <operator pos:line="33" pos:column="28">=<pos:position pos:line="33" pos:column="29"/></operator> <name pos:line="33" pos:column="30">threads_per_child<pos:position pos:line="33" pos:column="47"/></name> <operator pos:line="33" pos:column="48">*<pos:position pos:line="33" pos:column="49"/></operator> <literal type="number" pos:line="33" pos:column="50">3<pos:position pos:line="33" pos:column="51"/></literal> <operator pos:line="33" pos:column="52">/<pos:position pos:line="33" pos:column="53"/></operator> <literal type="number" pos:line="33" pos:column="54">4<pos:position pos:line="33" pos:column="55"/></literal></expr> ;<pos:position pos:line="33" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="35" pos:column="5">rv<pos:position pos:line="35" pos:column="7"/></name> <operator pos:line="35" pos:column="8">=<pos:position pos:line="35" pos:column="9"/></operator> <call><name pos:line="35" pos:column="10">ap_queue_info_create<pos:position pos:line="35" pos:column="30"/></name><argument_list pos:line="35" pos:column="30">(<argument><expr><operator pos:line="35" pos:column="31">&amp;<pos:position pos:line="35" pos:column="36"/></operator><name pos:line="35" pos:column="32">worker_queue_info<pos:position pos:line="35" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="51">pchild<pos:position pos:line="35" pos:column="57"/></name></expr></argument>,
                              <argument><expr><name pos:line="36" pos:column="31">threads_per_child<pos:position pos:line="36" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="50">max_recycled_pools<pos:position pos:line="36" pos:column="68"/></name></expr></argument>)<pos:position pos:line="36" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="70"/></expr_stmt>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">rv<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">!=<pos:position pos:line="37" pos:column="14"/></operator> <name pos:line="37" pos:column="15">APR_SUCCESS<pos:position pos:line="37" pos:column="26"/></name></expr>)<pos:position pos:line="37" pos:column="27"/></condition><then pos:line="37" pos:column="27"> <block pos:line="37" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">ap_log_error<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name pos:line="38" pos:column="22">APLOG_MARK<pos:position pos:line="38" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="34">APLOG_ALERT<pos:position pos:line="38" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="47">rv<pos:position pos:line="38" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="51">ap_server_conf<pos:position pos:line="38" pos:column="65"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="39" pos:column="22">"ap_queue_info_create() failed"<pos:position pos:line="39" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">clean_child_exit<pos:position pos:line="40" pos:column="25"/></name><argument_list pos:line="40" pos:column="25">(<argument><expr><name pos:line="40" pos:column="26">APEXIT_CHILDFATAL<pos:position pos:line="40" pos:column="43"/></name></expr></argument>)<pos:position pos:line="40" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="43" pos:column="5">/* Create the timeout mutex and main pollset before the listener
     * thread starts.
     */</comment>
    <expr_stmt><expr><name pos:line="46" pos:column="5">rv<pos:position pos:line="46" pos:column="7"/></name> <operator pos:line="46" pos:column="8">=<pos:position pos:line="46" pos:column="9"/></operator> <call><name pos:line="46" pos:column="10">apr_thread_mutex_create<pos:position pos:line="46" pos:column="33"/></name><argument_list pos:line="46" pos:column="33">(<argument><expr><operator pos:line="46" pos:column="34">&amp;<pos:position pos:line="46" pos:column="39"/></operator><name pos:line="46" pos:column="35">timeout_mutex<pos:position pos:line="46" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="50">APR_THREAD_MUTEX_DEFAULT<pos:position pos:line="46" pos:column="74"/></name></expr></argument>,
                                 <argument><expr><name pos:line="47" pos:column="34">pchild<pos:position pos:line="47" pos:column="40"/></name></expr></argument>)<pos:position pos:line="47" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="42"/></expr_stmt>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name pos:line="48" pos:column="9">rv<pos:position pos:line="48" pos:column="11"/></name> <operator pos:line="48" pos:column="12">!=<pos:position pos:line="48" pos:column="14"/></operator> <name pos:line="48" pos:column="15">APR_SUCCESS<pos:position pos:line="48" pos:column="26"/></name></expr>)<pos:position pos:line="48" pos:column="27"/></condition><then pos:line="48" pos:column="27"> <block pos:line="48" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">ap_log_error<pos:position pos:line="49" pos:column="21"/></name><argument_list pos:line="49" pos:column="21">(<argument><expr><name pos:line="49" pos:column="22">APLOG_MARK<pos:position pos:line="49" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="34">APLOG_ERR<pos:position pos:line="49" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="45">rv<pos:position pos:line="49" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="49">ap_server_conf<pos:position pos:line="49" pos:column="63"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="50" pos:column="22">"creation of the timeout mutex failed."<pos:position pos:line="50" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">clean_child_exit<pos:position pos:line="51" pos:column="25"/></name><argument_list pos:line="51" pos:column="25">(<argument><expr><name pos:line="51" pos:column="26">APEXIT_CHILDFATAL<pos:position pos:line="51" pos:column="43"/></name></expr></argument>)<pos:position pos:line="51" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="54" pos:column="5">/* Create the main pollset */</comment>
    <for pos:line="55" pos:column="5">for <control pos:line="55" pos:column="9">(<init><expr><name pos:line="55" pos:column="10">i<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">=<pos:position pos:line="55" pos:column="13"/></operator> <literal type="number" pos:line="55" pos:column="14">0<pos:position pos:line="55" pos:column="15"/></literal></expr>;<pos:position pos:line="55" pos:column="16"/></init> <condition><expr><name pos:line="55" pos:column="17">i<pos:position pos:line="55" pos:column="18"/></name> <operator pos:line="55" pos:column="19">&lt;<pos:position pos:line="55" pos:column="23"/></operator> <sizeof pos:line="55" pos:column="21">sizeof<argument_list pos:line="55" pos:column="27">(<argument><expr><name pos:line="55" pos:column="28">good_methods<pos:position pos:line="55" pos:column="40"/></name></expr></argument>)<pos:position pos:line="55" pos:column="41"/></argument_list></sizeof> <operator pos:line="55" pos:column="42">/<pos:position pos:line="55" pos:column="43"/></operator> <sizeof pos:line="55" pos:column="44">sizeof<argument_list pos:line="55" pos:column="50">(<argument><expr><name pos:line="55" pos:column="51">void<pos:position pos:line="55" pos:column="55"/></name><operator pos:line="55" pos:column="55">*<pos:position pos:line="55" pos:column="56"/></operator></expr></argument>)<pos:position pos:line="55" pos:column="57"/></argument_list></sizeof></expr>;<pos:position pos:line="55" pos:column="58"/></condition> <incr><expr><name pos:line="55" pos:column="59">i<pos:position pos:line="55" pos:column="60"/></name><operator pos:line="55" pos:column="60">++<pos:position pos:line="55" pos:column="62"/></operator></expr></incr>)<pos:position pos:line="55" pos:column="63"/></control> <block pos:line="55" pos:column="64">{
        <expr_stmt><expr><name pos:line="56" pos:column="9">rv<pos:position pos:line="56" pos:column="11"/></name> <operator pos:line="56" pos:column="12">=<pos:position pos:line="56" pos:column="13"/></operator> <call><name pos:line="56" pos:column="14">apr_pollset_create_ex<pos:position pos:line="56" pos:column="35"/></name><argument_list pos:line="56" pos:column="35">(<argument><expr><operator pos:line="56" pos:column="36">&amp;<pos:position pos:line="56" pos:column="41"/></operator><name pos:line="56" pos:column="37">event_pollset<pos:position pos:line="56" pos:column="50"/></name></expr></argument>,
                            <argument><expr><name pos:line="57" pos:column="29">threads_per_child<pos:position pos:line="57" pos:column="46"/></name><operator pos:line="57" pos:column="46">*<pos:position pos:line="57" pos:column="47"/></operator><literal type="number" pos:line="57" pos:column="47">2<pos:position pos:line="57" pos:column="48"/></literal></expr></argument>, <comment type="block" pos:line="57" pos:column="50">/* XXX don't we need more, to handle
                                                * connections in K-A or lingering
                                                * close?
                                                */</comment>
                            <argument><expr><name pos:line="61" pos:column="29">pchild<pos:position pos:line="61" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="37">APR_POLLSET_THREADSAFE<pos:position pos:line="61" pos:column="59"/></name> <operator pos:line="61" pos:column="60">|<pos:position pos:line="61" pos:column="61"/></operator> <name pos:line="61" pos:column="62">APR_POLLSET_NOCOPY<pos:position pos:line="61" pos:column="80"/></name> <operator pos:line="61" pos:column="81">|<pos:position pos:line="61" pos:column="82"/></operator> <name pos:line="61" pos:column="83">APR_POLLSET_NODEFAULT<pos:position pos:line="61" pos:column="104"/></name></expr></argument>,
                            <argument><expr><name><name pos:line="62" pos:column="29">good_methods<pos:position pos:line="62" pos:column="41"/></name><index pos:line="62" pos:column="41">[<expr><name pos:line="62" pos:column="42">i<pos:position pos:line="62" pos:column="43"/></name></expr>]<pos:position pos:line="62" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="62" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="46"/></expr_stmt>
        <if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">rv<pos:position pos:line="63" pos:column="15"/></name> <operator pos:line="63" pos:column="16">==<pos:position pos:line="63" pos:column="18"/></operator> <name pos:line="63" pos:column="19">APR_SUCCESS<pos:position pos:line="63" pos:column="30"/></name></expr>)<pos:position pos:line="63" pos:column="31"/></condition><then pos:line="63" pos:column="31"> <block pos:line="63" pos:column="32">{
            <break pos:line="64" pos:column="13">break;<pos:position pos:line="64" pos:column="19"/></break>
        }<pos:position pos:line="65" pos:column="10"/></block></then></if>
    }<pos:position pos:line="66" pos:column="6"/></block></for>
    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><name pos:line="67" pos:column="9">rv<pos:position pos:line="67" pos:column="11"/></name> <operator pos:line="67" pos:column="12">!=<pos:position pos:line="67" pos:column="14"/></operator> <name pos:line="67" pos:column="15">APR_SUCCESS<pos:position pos:line="67" pos:column="26"/></name></expr>)<pos:position pos:line="67" pos:column="27"/></condition><then pos:line="67" pos:column="27"> <block pos:line="67" pos:column="28">{
        <expr_stmt><expr><name pos:line="68" pos:column="9">rv<pos:position pos:line="68" pos:column="11"/></name> <operator pos:line="68" pos:column="12">=<pos:position pos:line="68" pos:column="13"/></operator> <call><name pos:line="68" pos:column="14">apr_pollset_create<pos:position pos:line="68" pos:column="32"/></name><argument_list pos:line="68" pos:column="32">(<argument><expr><operator pos:line="68" pos:column="33">&amp;<pos:position pos:line="68" pos:column="38"/></operator><name pos:line="68" pos:column="34">event_pollset<pos:position pos:line="68" pos:column="47"/></name></expr></argument>,
                               <argument><expr><name pos:line="69" pos:column="32">threads_per_child<pos:position pos:line="69" pos:column="49"/></name><operator pos:line="69" pos:column="49">*<pos:position pos:line="69" pos:column="50"/></operator><literal type="number" pos:line="69" pos:column="50">2<pos:position pos:line="69" pos:column="51"/></literal></expr></argument>, <comment type="block" pos:line="69" pos:column="53">/* XXX don't we need more, to handle
                                                     * connections in K-A or lingering
                                                     * close?
                                                     */</comment>
                               <argument><expr><name pos:line="73" pos:column="32">pchild<pos:position pos:line="73" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="40">APR_POLLSET_THREADSAFE<pos:position pos:line="73" pos:column="62"/></name> <operator pos:line="73" pos:column="63">|<pos:position pos:line="73" pos:column="64"/></operator> <name pos:line="73" pos:column="65">APR_POLLSET_NOCOPY<pos:position pos:line="73" pos:column="83"/></name></expr></argument>)<pos:position pos:line="73" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="85"/></expr_stmt>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>
    <if pos:line="75" pos:column="5">if <condition pos:line="75" pos:column="8">(<expr><name pos:line="75" pos:column="9">rv<pos:position pos:line="75" pos:column="11"/></name> <operator pos:line="75" pos:column="12">!=<pos:position pos:line="75" pos:column="14"/></operator> <name pos:line="75" pos:column="15">APR_SUCCESS<pos:position pos:line="75" pos:column="26"/></name></expr>)<pos:position pos:line="75" pos:column="27"/></condition><then pos:line="75" pos:column="27"> <block pos:line="75" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="76" pos:column="9">ap_log_error<pos:position pos:line="76" pos:column="21"/></name><argument_list pos:line="76" pos:column="21">(<argument><expr><name pos:line="76" pos:column="22">APLOG_MARK<pos:position pos:line="76" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="34">APLOG_ERR<pos:position pos:line="76" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="45">rv<pos:position pos:line="76" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="49">ap_server_conf<pos:position pos:line="76" pos:column="63"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="77" pos:column="22">"apr_pollset_create with Thread Safety failed."<pos:position pos:line="77" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="78" pos:column="9">clean_child_exit<pos:position pos:line="78" pos:column="25"/></name><argument_list pos:line="78" pos:column="25">(<argument><expr><name pos:line="78" pos:column="26">APEXIT_CHILDFATAL<pos:position pos:line="78" pos:column="43"/></name></expr></argument>)<pos:position pos:line="78" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="81" pos:column="5">ap_log_error<pos:position pos:line="81" pos:column="17"/></name><argument_list pos:line="81" pos:column="17">(<argument><expr><name pos:line="81" pos:column="18">APLOG_MARK<pos:position pos:line="81" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="30">APLOG_DEBUG<pos:position pos:line="81" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="81" pos:column="43">0<pos:position pos:line="81" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="46">ap_server_conf<pos:position pos:line="81" pos:column="60"/></name></expr></argument>, <argument><expr><call><name pos:line="81" pos:column="62">APLOGNO<pos:position pos:line="81" pos:column="69"/></name><argument_list pos:line="81" pos:column="69">(<argument><expr><literal type="number" pos:line="81" pos:column="70">02471<pos:position pos:line="81" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="76"/></argument_list></call>
                 <literal type="string" pos:line="82" pos:column="18">"start_threads: Using %s"<pos:position pos:line="82" pos:column="43"/></literal></expr></argument>, <argument><expr><call><name pos:line="82" pos:column="45">apr_pollset_method_name<pos:position pos:line="82" pos:column="68"/></name><argument_list pos:line="82" pos:column="68">(<argument><expr><name pos:line="82" pos:column="69">event_pollset<pos:position pos:line="82" pos:column="82"/></name></expr></argument>)<pos:position pos:line="82" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="82" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="85"/></expr_stmt>
    <expr_stmt><expr><name pos:line="83" pos:column="5">worker_sockets<pos:position pos:line="83" pos:column="19"/></name> <operator pos:line="83" pos:column="20">=<pos:position pos:line="83" pos:column="21"/></operator> <call><name pos:line="83" pos:column="22">apr_pcalloc<pos:position pos:line="83" pos:column="33"/></name><argument_list pos:line="83" pos:column="33">(<argument><expr><name pos:line="83" pos:column="34">pchild<pos:position pos:line="83" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="42">threads_per_child<pos:position pos:line="83" pos:column="59"/></name>
                                 <operator pos:line="84" pos:column="34">*<pos:position pos:line="84" pos:column="35"/></operator> <sizeof pos:line="84" pos:column="36">sizeof<argument_list pos:line="84" pos:column="42">(<argument><expr><name pos:line="84" pos:column="43">apr_socket_t<pos:position pos:line="84" pos:column="55"/></name> <operator pos:line="84" pos:column="56">*<pos:position pos:line="84" pos:column="57"/></operator></expr></argument>)<pos:position pos:line="84" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="84" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="60"/></expr_stmt>

    <expr_stmt><expr><name pos:line="86" pos:column="5">loops<pos:position pos:line="86" pos:column="10"/></name> <operator pos:line="86" pos:column="11">=<pos:position pos:line="86" pos:column="12"/></operator> <name pos:line="86" pos:column="13">prev_threads_created<pos:position pos:line="86" pos:column="33"/></name> <operator pos:line="86" pos:column="34">=<pos:position pos:line="86" pos:column="35"/></operator> <literal type="number" pos:line="86" pos:column="36">0<pos:position pos:line="86" pos:column="37"/></literal></expr>;<pos:position pos:line="86" pos:column="38"/></expr_stmt>
    <while pos:line="87" pos:column="5">while <condition pos:line="87" pos:column="11">(<expr><literal type="number" pos:line="87" pos:column="12">1<pos:position pos:line="87" pos:column="13"/></literal></expr>)<pos:position pos:line="87" pos:column="14"/></condition> <block pos:line="87" pos:column="15">{
        <comment type="block" pos:line="88" pos:column="9">/* threads_per_child does not include the listener thread */</comment>
        <for pos:line="89" pos:column="9">for <control pos:line="89" pos:column="13">(<init><expr><name pos:line="89" pos:column="14">i<pos:position pos:line="89" pos:column="15"/></name> <operator pos:line="89" pos:column="16">=<pos:position pos:line="89" pos:column="17"/></operator> <literal type="number" pos:line="89" pos:column="18">0<pos:position pos:line="89" pos:column="19"/></literal></expr>;<pos:position pos:line="89" pos:column="20"/></init> <condition><expr><name pos:line="89" pos:column="21">i<pos:position pos:line="89" pos:column="22"/></name> <operator pos:line="89" pos:column="23">&lt;<pos:position pos:line="89" pos:column="27"/></operator> <name pos:line="89" pos:column="25">threads_per_child<pos:position pos:line="89" pos:column="42"/></name></expr>;<pos:position pos:line="89" pos:column="43"/></condition> <incr><expr><name pos:line="89" pos:column="44">i<pos:position pos:line="89" pos:column="45"/></name><operator pos:line="89" pos:column="45">++<pos:position pos:line="89" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="89" pos:column="48"/></control> <block pos:line="89" pos:column="49">{
            <decl_stmt><decl><type><name pos:line="90" pos:column="13">int<pos:position pos:line="90" pos:column="16"/></name></type> <name pos:line="90" pos:column="17">status<pos:position pos:line="90" pos:column="23"/></name> <init pos:line="90" pos:column="24">=
                <expr><name><name pos:line="91" pos:column="17">ap_scoreboard_image<pos:position pos:line="91" pos:column="36"/></name><operator pos:line="91" pos:column="36">-&gt;<pos:position pos:line="91" pos:column="41"/></operator><name pos:line="91" pos:column="38">servers<pos:position pos:line="91" pos:column="45"/></name><index pos:line="91" pos:column="45">[<expr><name pos:line="91" pos:column="46">child_num_arg<pos:position pos:line="91" pos:column="59"/></name></expr>]<pos:position pos:line="91" pos:column="60"/></index><index pos:line="91" pos:column="60">[<expr><name pos:line="91" pos:column="61">i<pos:position pos:line="91" pos:column="62"/></name></expr>]<pos:position pos:line="91" pos:column="63"/></index></name><operator pos:line="91" pos:column="63">.<pos:position pos:line="91" pos:column="64"/></operator><name pos:line="91" pos:column="64">status<pos:position pos:line="91" pos:column="70"/></name></expr></init></decl>;<pos:position pos:line="91" pos:column="71"/></decl_stmt>

            <if pos:line="93" pos:column="13">if <condition pos:line="93" pos:column="16">(<expr><name pos:line="93" pos:column="17">status<pos:position pos:line="93" pos:column="23"/></name> <operator pos:line="93" pos:column="24">!=<pos:position pos:line="93" pos:column="26"/></operator> <name pos:line="93" pos:column="27">SERVER_GRACEFUL<pos:position pos:line="93" pos:column="42"/></name> <operator pos:line="93" pos:column="43">&amp;&amp;<pos:position pos:line="93" pos:column="53"/></operator> <name pos:line="93" pos:column="46">status<pos:position pos:line="93" pos:column="52"/></name> <operator pos:line="93" pos:column="53">!=<pos:position pos:line="93" pos:column="55"/></operator> <name pos:line="93" pos:column="56">SERVER_DEAD<pos:position pos:line="93" pos:column="67"/></name></expr>)<pos:position pos:line="93" pos:column="68"/></condition><then pos:line="93" pos:column="68"> <block pos:line="93" pos:column="69">{
                <continue pos:line="94" pos:column="17">continue;<pos:position pos:line="94" pos:column="26"/></continue>
            }<pos:position pos:line="95" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="97" pos:column="13">my_info<pos:position pos:line="97" pos:column="20"/></name> <operator pos:line="97" pos:column="21">=<pos:position pos:line="97" pos:column="22"/></operator> <operator pos:line="97" pos:column="23">(<pos:position pos:line="97" pos:column="24"/></operator><name pos:line="97" pos:column="24">proc_info<pos:position pos:line="97" pos:column="33"/></name> <operator pos:line="97" pos:column="34">*<pos:position pos:line="97" pos:column="35"/></operator><operator pos:line="97" pos:column="35">)<pos:position pos:line="97" pos:column="36"/></operator> <call><name pos:line="97" pos:column="37">ap_malloc<pos:position pos:line="97" pos:column="46"/></name><argument_list pos:line="97" pos:column="46">(<argument><expr><sizeof pos:line="97" pos:column="47">sizeof<argument_list pos:line="97" pos:column="53">(<argument><expr><name pos:line="97" pos:column="54">proc_info<pos:position pos:line="97" pos:column="63"/></name></expr></argument>)<pos:position pos:line="97" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="97" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="98" pos:column="13">my_info<pos:position pos:line="98" pos:column="20"/></name><operator pos:line="98" pos:column="20">-&gt;<pos:position pos:line="98" pos:column="25"/></operator><name pos:line="98" pos:column="22">pid<pos:position pos:line="98" pos:column="25"/></name></name> <operator pos:line="98" pos:column="26">=<pos:position pos:line="98" pos:column="27"/></operator> <name pos:line="98" pos:column="28">my_child_num<pos:position pos:line="98" pos:column="40"/></name></expr>;<pos:position pos:line="98" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="99" pos:column="13">my_info<pos:position pos:line="99" pos:column="20"/></name><operator pos:line="99" pos:column="20">-&gt;<pos:position pos:line="99" pos:column="25"/></operator><name pos:line="99" pos:column="22">tid<pos:position pos:line="99" pos:column="25"/></name></name> <operator pos:line="99" pos:column="26">=<pos:position pos:line="99" pos:column="27"/></operator> <name pos:line="99" pos:column="28">i<pos:position pos:line="99" pos:column="29"/></name></expr>;<pos:position pos:line="99" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="100" pos:column="13">my_info<pos:position pos:line="100" pos:column="20"/></name><operator pos:line="100" pos:column="20">-&gt;<pos:position pos:line="100" pos:column="25"/></operator><name pos:line="100" pos:column="22">sd<pos:position pos:line="100" pos:column="24"/></name></name> <operator pos:line="100" pos:column="25">=<pos:position pos:line="100" pos:column="26"/></operator> <literal type="number" pos:line="100" pos:column="27">0<pos:position pos:line="100" pos:column="28"/></literal></expr>;<pos:position pos:line="100" pos:column="29"/></expr_stmt>

            <comment type="block" pos:line="102" pos:column="13">/* We are creating threads right now */</comment>
            <expr_stmt><expr><call><name pos:line="103" pos:column="13">ap_update_child_status_from_indexes<pos:position pos:line="103" pos:column="48"/></name><argument_list pos:line="103" pos:column="48">(<argument><expr><name pos:line="103" pos:column="49">my_child_num<pos:position pos:line="103" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="63">i<pos:position pos:line="103" pos:column="64"/></name></expr></argument>,
                                                <argument><expr><name pos:line="104" pos:column="49">SERVER_STARTING<pos:position pos:line="104" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="66">NULL<pos:position pos:line="104" pos:column="70"/></name></expr></argument>)<pos:position pos:line="104" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="72"/></expr_stmt>
            <comment type="block" pos:line="105" pos:column="13">/* We let each thread update its own scoreboard entry.  This is
             * done because it lets us deal with tid better.
             */</comment>
            <expr_stmt><expr><name pos:line="108" pos:column="13">rv<pos:position pos:line="108" pos:column="15"/></name> <operator pos:line="108" pos:column="16">=<pos:position pos:line="108" pos:column="17"/></operator> <call><name pos:line="108" pos:column="18">apr_thread_create<pos:position pos:line="108" pos:column="35"/></name><argument_list pos:line="108" pos:column="35">(<argument><expr><operator pos:line="108" pos:column="36">&amp;<pos:position pos:line="108" pos:column="41"/></operator><name><name pos:line="108" pos:column="37">threads<pos:position pos:line="108" pos:column="44"/></name><index pos:line="108" pos:column="44">[<expr><name pos:line="108" pos:column="45">i<pos:position pos:line="108" pos:column="46"/></name></expr>]<pos:position pos:line="108" pos:column="47"/></index></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="49">thread_attr<pos:position pos:line="108" pos:column="60"/></name></expr></argument>,
                                   <argument><expr><name pos:line="109" pos:column="36">worker_thread<pos:position pos:line="109" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="51">my_info<pos:position pos:line="109" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="60">pchild<pos:position pos:line="109" pos:column="66"/></name></expr></argument>)<pos:position pos:line="109" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="68"/></expr_stmt>
            <if pos:line="110" pos:column="13">if <condition pos:line="110" pos:column="16">(<expr><name pos:line="110" pos:column="17">rv<pos:position pos:line="110" pos:column="19"/></name> <operator pos:line="110" pos:column="20">!=<pos:position pos:line="110" pos:column="22"/></operator> <name pos:line="110" pos:column="23">APR_SUCCESS<pos:position pos:line="110" pos:column="34"/></name></expr>)<pos:position pos:line="110" pos:column="35"/></condition><then pos:line="110" pos:column="35"> <block pos:line="110" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="111" pos:column="17">ap_log_error<pos:position pos:line="111" pos:column="29"/></name><argument_list pos:line="111" pos:column="29">(<argument><expr><name pos:line="111" pos:column="30">APLOG_MARK<pos:position pos:line="111" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="42">APLOG_ALERT<pos:position pos:line="111" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="55">rv<pos:position pos:line="111" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="59">ap_server_conf<pos:position pos:line="111" pos:column="73"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="112" pos:column="30">"apr_thread_create: unable to create worker thread"<pos:position pos:line="112" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="83"/></expr_stmt>
                <comment type="block" pos:line="113" pos:column="17">/* let the parent decide how bad this really is */</comment>
                <expr_stmt><expr><call><name pos:line="114" pos:column="17">clean_child_exit<pos:position pos:line="114" pos:column="33"/></name><argument_list pos:line="114" pos:column="33">(<argument><expr><name pos:line="114" pos:column="34">APEXIT_CHILDSICK<pos:position pos:line="114" pos:column="50"/></name></expr></argument>)<pos:position pos:line="114" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="52"/></expr_stmt>
            }<pos:position pos:line="115" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="116" pos:column="13">threads_created<pos:position pos:line="116" pos:column="28"/></name><operator pos:line="116" pos:column="28">++<pos:position pos:line="116" pos:column="30"/></operator></expr>;<pos:position pos:line="116" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="117" pos:column="10"/></block></for>

        <comment type="block" pos:line="119" pos:column="9">/* Start the listener only when there are workers available */</comment>
        <if pos:line="120" pos:column="9">if <condition pos:line="120" pos:column="12">(<expr><operator pos:line="120" pos:column="13">!<pos:position pos:line="120" pos:column="14"/></operator><name pos:line="120" pos:column="14">listener_started<pos:position pos:line="120" pos:column="30"/></name> <operator pos:line="120" pos:column="31">&amp;&amp;<pos:position pos:line="120" pos:column="41"/></operator> <name pos:line="120" pos:column="34">threads_created<pos:position pos:line="120" pos:column="49"/></name></expr>)<pos:position pos:line="120" pos:column="50"/></condition><then pos:line="120" pos:column="50"> <block pos:line="120" pos:column="51">{
            <expr_stmt><expr><call><name pos:line="121" pos:column="13">create_listener_thread<pos:position pos:line="121" pos:column="35"/></name><argument_list pos:line="121" pos:column="35">(<argument><expr><name pos:line="121" pos:column="36">ts<pos:position pos:line="121" pos:column="38"/></name></expr></argument>)<pos:position pos:line="121" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><name pos:line="122" pos:column="13">listener_started<pos:position pos:line="122" pos:column="29"/></name> <operator pos:line="122" pos:column="30">=<pos:position pos:line="122" pos:column="31"/></operator> <literal type="number" pos:line="122" pos:column="32">1<pos:position pos:line="122" pos:column="33"/></literal></expr>;<pos:position pos:line="122" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="123" pos:column="10"/></block></then></if>


        <if pos:line="126" pos:column="9">if <condition pos:line="126" pos:column="12">(<expr><name pos:line="126" pos:column="13">start_thread_may_exit<pos:position pos:line="126" pos:column="34"/></name> <operator pos:line="126" pos:column="35">||<pos:position pos:line="126" pos:column="37"/></operator> <name pos:line="126" pos:column="38">threads_created<pos:position pos:line="126" pos:column="53"/></name> <operator pos:line="126" pos:column="54">==<pos:position pos:line="126" pos:column="56"/></operator> <name pos:line="126" pos:column="57">threads_per_child<pos:position pos:line="126" pos:column="74"/></name></expr>)<pos:position pos:line="126" pos:column="75"/></condition><then pos:line="126" pos:column="75"> <block pos:line="126" pos:column="76">{
            <break pos:line="127" pos:column="13">break;<pos:position pos:line="127" pos:column="19"/></break>
        }<pos:position pos:line="128" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="129" pos:column="9">/* wait for previous generation to clean up an entry */</comment>
        <expr_stmt><expr><call><name pos:line="130" pos:column="9">apr_sleep<pos:position pos:line="130" pos:column="18"/></name><argument_list pos:line="130" pos:column="18">(<argument><expr><call><name pos:line="130" pos:column="19">apr_time_from_sec<pos:position pos:line="130" pos:column="36"/></name><argument_list pos:line="130" pos:column="36">(<argument><expr><literal type="number" pos:line="130" pos:column="37">1<pos:position pos:line="130" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="130" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="131" pos:column="9">++<pos:position pos:line="131" pos:column="11"/></operator><name pos:line="131" pos:column="11">loops<pos:position pos:line="131" pos:column="16"/></name></expr>;<pos:position pos:line="131" pos:column="17"/></expr_stmt>
        <if pos:line="132" pos:column="9">if <condition pos:line="132" pos:column="12">(<expr><name pos:line="132" pos:column="13">loops<pos:position pos:line="132" pos:column="18"/></name> <operator pos:line="132" pos:column="19">%<pos:position pos:line="132" pos:column="20"/></operator> <literal type="number" pos:line="132" pos:column="21">120<pos:position pos:line="132" pos:column="24"/></literal> <operator pos:line="132" pos:column="25">==<pos:position pos:line="132" pos:column="27"/></operator> <literal type="number" pos:line="132" pos:column="28">0<pos:position pos:line="132" pos:column="29"/></literal></expr>)<pos:position pos:line="132" pos:column="30"/></condition><then pos:line="132" pos:column="30"> <block pos:line="132" pos:column="31">{ <comment type="block" pos:line="132" pos:column="33">/* every couple of minutes */</comment>
            <if pos:line="133" pos:column="13">if <condition pos:line="133" pos:column="16">(<expr><name pos:line="133" pos:column="17">prev_threads_created<pos:position pos:line="133" pos:column="37"/></name> <operator pos:line="133" pos:column="38">==<pos:position pos:line="133" pos:column="40"/></operator> <name pos:line="133" pos:column="41">threads_created<pos:position pos:line="133" pos:column="56"/></name></expr>)<pos:position pos:line="133" pos:column="57"/></condition><then pos:line="133" pos:column="57"> <block pos:line="133" pos:column="58">{
                <expr_stmt><expr><call><name pos:line="134" pos:column="17">ap_log_error<pos:position pos:line="134" pos:column="29"/></name><argument_list pos:line="134" pos:column="29">(<argument><expr><name pos:line="134" pos:column="30">APLOG_MARK<pos:position pos:line="134" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="42">APLOG_DEBUG<pos:position pos:line="134" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="134" pos:column="55">0<pos:position pos:line="134" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="134" pos:column="58">ap_server_conf<pos:position pos:line="134" pos:column="72"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="135" pos:column="30">"child %"<pos:position pos:line="135" pos:column="39"/></literal> <name pos:line="135" pos:column="40">APR_PID_T_FMT<pos:position pos:line="135" pos:column="53"/></name> <literal type="string" pos:line="135" pos:column="54">" isn't taking over "<pos:position pos:line="135" pos:column="75"/></literal>
                             <literal type="string" pos:line="136" pos:column="30">"slots very quickly (%d of %d)"<pos:position pos:line="136" pos:column="61"/></literal></expr></argument>,
                             <argument><expr><name pos:line="137" pos:column="30">ap_my_pid<pos:position pos:line="137" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="41">threads_created<pos:position pos:line="137" pos:column="56"/></name></expr></argument>,
                             <argument><expr><name pos:line="138" pos:column="30">threads_per_child<pos:position pos:line="138" pos:column="47"/></name></expr></argument>)<pos:position pos:line="138" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="49"/></expr_stmt>
            }<pos:position pos:line="139" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="140" pos:column="13">prev_threads_created<pos:position pos:line="140" pos:column="33"/></name> <operator pos:line="140" pos:column="34">=<pos:position pos:line="140" pos:column="35"/></operator> <name pos:line="140" pos:column="36">threads_created<pos:position pos:line="140" pos:column="51"/></name></expr>;<pos:position pos:line="140" pos:column="52"/></expr_stmt>
        }<pos:position pos:line="141" pos:column="10"/></block></then></if>
    }<pos:position pos:line="142" pos:column="6"/></block></while>

    <comment type="block" pos:line="144" pos:column="5">/* What state should this child_main process be listed as in the
     * scoreboard...?
     *  ap_update_child_status_from_indexes(my_child_num, i, SERVER_STARTING,
     *                                      (request_rec *) NULL);
     *
     *  This state should be listed separately in the scoreboard, in some kind
     *  of process_status, not mixed in with the worker threads' status.
     *  "life_status" is almost right, but it's in the worker's structure, and
     *  the name could be clearer.   gla
     */</comment>
    <expr_stmt><expr><call><name pos:line="154" pos:column="5">apr_thread_exit<pos:position pos:line="154" pos:column="20"/></name><argument_list pos:line="154" pos:column="20">(<argument><expr><name pos:line="154" pos:column="21">thd<pos:position pos:line="154" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="26">APR_SUCCESS<pos:position pos:line="154" pos:column="37"/></name></expr></argument>)<pos:position pos:line="154" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="39"/></expr_stmt>
    <return pos:line="155" pos:column="5">return <expr><name pos:line="155" pos:column="12">NULL<pos:position pos:line="155" pos:column="16"/></name></expr>;<pos:position pos:line="155" pos:column="17"/></return>
}<pos:position pos:line="156" pos:column="2"/></block></function></unit>
