<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2627_httpd-2.0.43.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">int<pos:position pos:line="2" pos:column="4"/></name> <name pos:line="2" pos:column="5">PREFIX<pos:position pos:line="2" pos:column="11"/></name></type>(<name pos:line="2" pos:column="12">scanAtts<pos:position pos:line="2" pos:column="20"/></name>)<parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">ENCODING<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">enc<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier> <name pos:line="2" pos:column="49">char<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">ptr<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="60">const<pos:position pos:line="2" pos:column="65"/></specifier> <name pos:line="2" pos:column="66">char<pos:position pos:line="2" pos:column="70"/></name> <modifier pos:line="2" pos:column="71">*<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="72">end<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>,
		     <parameter><decl><type><specifier pos:line="3" pos:column="22">const<pos:position pos:line="3" pos:column="27"/></specifier> <name pos:line="3" pos:column="28">char<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier><modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">nextTokPtr<pos:position pos:line="3" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="46"/></parameter_list>
<block pos:line="4" pos:column="1">{
<cpp:ifdef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifdef<pos:position pos:line="5" pos:column="7"/></cpp:directive> <name pos:line="5" pos:column="8">XML_NS<pos:position pos:line="5" pos:column="14"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">hadColon<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>
  <while pos:line="8" pos:column="3">while <condition pos:line="8" pos:column="9">(<expr><name pos:line="8" pos:column="10">ptr<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">!=<pos:position pos:line="8" pos:column="16"/></operator> <name pos:line="8" pos:column="17">end<pos:position pos:line="8" pos:column="20"/></name></expr>)<pos:position pos:line="8" pos:column="21"/></condition> <block pos:line="8" pos:column="22">{
    <switch pos:line="9" pos:column="5">switch <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">BYTE_TYPE<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">enc<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="28">ptr<pos:position pos:line="9" pos:column="31"/></name></expr></argument>)<pos:position pos:line="9" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="33"/></condition> <block pos:line="9" pos:column="34">{
    <macro><name pos:line="10" pos:column="5">CHECK_NAME_CASES<pos:position pos:line="10" pos:column="21"/></name><argument_list pos:line="10" pos:column="21">(<argument pos:line="10" pos:column="22">enc<pos:position pos:line="10" pos:column="25"/></argument>, <argument pos:line="10" pos:column="27">ptr<pos:position pos:line="10" pos:column="30"/></argument>, <argument pos:line="10" pos:column="32">end<pos:position pos:line="10" pos:column="35"/></argument>, <argument pos:line="10" pos:column="37">nextTokPtr<pos:position pos:line="10" pos:column="47"/></argument>)<pos:position pos:line="10" pos:column="48"/></argument_list></macro>
<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef<pos:position pos:line="11" pos:column="7"/></cpp:directive> <name pos:line="11" pos:column="8">XML_NS<pos:position pos:line="11" pos:column="14"/></name></cpp:ifdef>
    <case pos:line="12" pos:column="5">case <expr><name pos:line="12" pos:column="10">BT_COLON<pos:position pos:line="12" pos:column="18"/></name></expr>:<pos:position pos:line="12" pos:column="19"/></case>
      <if pos:line="13" pos:column="7">if <condition pos:line="13" pos:column="10">(<expr><name pos:line="13" pos:column="11">hadColon<pos:position pos:line="13" pos:column="19"/></name></expr>)<pos:position pos:line="13" pos:column="20"/></condition><then pos:line="13" pos:column="20"> <block pos:line="13" pos:column="21">{
	<expr_stmt><expr><operator pos:line="14" pos:column="9">*<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">nextTokPtr<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <name pos:line="14" pos:column="23">ptr<pos:position pos:line="14" pos:column="26"/></name></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>
	<return pos:line="15" pos:column="9">return <expr><name pos:line="15" pos:column="16">XML_TOK_INVALID<pos:position pos:line="15" pos:column="31"/></name></expr>;<pos:position pos:line="15" pos:column="32"/></return>
      }<pos:position pos:line="16" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="17" pos:column="7">hadColon<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <literal type="number" pos:line="17" pos:column="18">1<pos:position pos:line="17" pos:column="19"/></literal></expr>;<pos:position pos:line="17" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><name pos:line="18" pos:column="7">ptr<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">+=<pos:position pos:line="18" pos:column="13"/></operator> <call><name pos:line="18" pos:column="14">MINBPC<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><name pos:line="18" pos:column="21">enc<pos:position pos:line="18" pos:column="24"/></name></expr></argument>)<pos:position pos:line="18" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>
      <if pos:line="19" pos:column="7">if <condition pos:line="19" pos:column="10">(<expr><name pos:line="19" pos:column="11">ptr<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">==<pos:position pos:line="19" pos:column="17"/></operator> <name pos:line="19" pos:column="18">end<pos:position pos:line="19" pos:column="21"/></name></expr>)<pos:position pos:line="19" pos:column="22"/></condition><then pos:line="19" pos:column="22">
	<block type="pseudo"><return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">XML_TOK_PARTIAL<pos:position pos:line="20" pos:column="31"/></name></expr>;<pos:position pos:line="20" pos:column="32"/></return></block></then></if>
      <switch pos:line="21" pos:column="7">switch <condition pos:line="21" pos:column="14">(<expr><call><name pos:line="21" pos:column="15">BYTE_TYPE<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">enc<pos:position pos:line="21" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="30">ptr<pos:position pos:line="21" pos:column="33"/></name></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="35"/></condition> <block pos:line="21" pos:column="36">{
      <macro><name pos:line="22" pos:column="7">CHECK_NMSTRT_CASES<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument pos:line="22" pos:column="26">enc<pos:position pos:line="22" pos:column="29"/></argument>, <argument pos:line="22" pos:column="31">ptr<pos:position pos:line="22" pos:column="34"/></argument>, <argument pos:line="22" pos:column="36">end<pos:position pos:line="22" pos:column="39"/></argument>, <argument pos:line="22" pos:column="41">nextTokPtr<pos:position pos:line="22" pos:column="51"/></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></macro>
      <default pos:line="23" pos:column="7">default:<pos:position pos:line="23" pos:column="15"/></default>
	<expr_stmt><expr><operator pos:line="24" pos:column="9">*<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">nextTokPtr<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <name pos:line="24" pos:column="23">ptr<pos:position pos:line="24" pos:column="26"/></name></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>
	<return pos:line="25" pos:column="9">return <expr><name pos:line="25" pos:column="16">XML_TOK_INVALID<pos:position pos:line="25" pos:column="31"/></name></expr>;<pos:position pos:line="25" pos:column="32"/></return>
      }<pos:position pos:line="26" pos:column="8"/></block></switch>
      <break pos:line="27" pos:column="7">break;<pos:position pos:line="27" pos:column="13"/></break>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>
    <case pos:line="29" pos:column="5">case <expr><name pos:line="29" pos:column="10">BT_S<pos:position pos:line="29" pos:column="14"/></name></expr>:<pos:position pos:line="29" pos:column="15"/></case> <case pos:line="29" pos:column="16">case <expr><name pos:line="29" pos:column="21">BT_CR<pos:position pos:line="29" pos:column="26"/></name></expr>:<pos:position pos:line="29" pos:column="27"/></case> <case pos:line="29" pos:column="28">case <expr><name pos:line="29" pos:column="33">BT_LF<pos:position pos:line="29" pos:column="38"/></name></expr>:<pos:position pos:line="29" pos:column="39"/></case>
      <for pos:line="30" pos:column="7">for <control pos:line="30" pos:column="11">(<init pos:line="30" pos:column="12">;<pos:position pos:line="30" pos:column="13"/></init><condition pos:line="30" pos:column="13">;<pos:position pos:line="30" pos:column="14"/></condition><incr/>)<pos:position pos:line="30" pos:column="15"/></control> <block pos:line="30" pos:column="16">{
	<decl_stmt><decl><type><name pos:line="31" pos:column="9">int<pos:position pos:line="31" pos:column="12"/></name></type> <name pos:line="31" pos:column="13">t<pos:position pos:line="31" pos:column="14"/></name></decl>;<pos:position pos:line="31" pos:column="15"/></decl_stmt>

	<expr_stmt><expr><name pos:line="33" pos:column="9">ptr<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">+=<pos:position pos:line="33" pos:column="15"/></operator> <call><name pos:line="33" pos:column="16">MINBPC<pos:position pos:line="33" pos:column="22"/></name><argument_list pos:line="33" pos:column="22">(<argument><expr><name pos:line="33" pos:column="23">enc<pos:position pos:line="33" pos:column="26"/></name></expr></argument>)<pos:position pos:line="33" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">ptr<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">==<pos:position pos:line="34" pos:column="19"/></operator> <name pos:line="34" pos:column="20">end<pos:position pos:line="34" pos:column="23"/></name></expr>)<pos:position pos:line="34" pos:column="24"/></condition><then pos:line="34" pos:column="24">
	  <block type="pseudo"><return pos:line="35" pos:column="11">return <expr><name pos:line="35" pos:column="18">XML_TOK_PARTIAL<pos:position pos:line="35" pos:column="33"/></name></expr>;<pos:position pos:line="35" pos:column="34"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="36" pos:column="9">t<pos:position pos:line="36" pos:column="10"/></name> <operator pos:line="36" pos:column="11">=<pos:position pos:line="36" pos:column="12"/></operator> <call><name pos:line="36" pos:column="13">BYTE_TYPE<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><name pos:line="36" pos:column="23">enc<pos:position pos:line="36" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="28">ptr<pos:position pos:line="36" pos:column="31"/></name></expr></argument>)<pos:position pos:line="36" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="33"/></expr_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">t<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">==<pos:position pos:line="37" pos:column="17"/></operator> <name pos:line="37" pos:column="18">BT_EQUALS<pos:position pos:line="37" pos:column="27"/></name></expr>)<pos:position pos:line="37" pos:column="28"/></condition><then pos:line="37" pos:column="28">
	  <block type="pseudo"><break pos:line="38" pos:column="11">break;<pos:position pos:line="38" pos:column="17"/></break></block></then></if>
	<switch pos:line="39" pos:column="9">switch <condition pos:line="39" pos:column="16">(<expr><name pos:line="39" pos:column="17">t<pos:position pos:line="39" pos:column="18"/></name></expr>)<pos:position pos:line="39" pos:column="19"/></condition> <block pos:line="39" pos:column="20">{
	<case pos:line="40" pos:column="9">case <expr><name pos:line="40" pos:column="14">BT_S<pos:position pos:line="40" pos:column="18"/></name></expr>:<pos:position pos:line="40" pos:column="19"/></case>
	<case pos:line="41" pos:column="9">case <expr><name pos:line="41" pos:column="14">BT_LF<pos:position pos:line="41" pos:column="19"/></name></expr>:<pos:position pos:line="41" pos:column="20"/></case>
	<case pos:line="42" pos:column="9">case <expr><name pos:line="42" pos:column="14">BT_CR<pos:position pos:line="42" pos:column="19"/></name></expr>:<pos:position pos:line="42" pos:column="20"/></case>
	  <break pos:line="43" pos:column="11">break;<pos:position pos:line="43" pos:column="17"/></break>
	<default pos:line="44" pos:column="9">default:<pos:position pos:line="44" pos:column="17"/></default>
	  <expr_stmt><expr><operator pos:line="45" pos:column="11">*<pos:position pos:line="45" pos:column="12"/></operator><name pos:line="45" pos:column="12">nextTokPtr<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">=<pos:position pos:line="45" pos:column="24"/></operator> <name pos:line="45" pos:column="25">ptr<pos:position pos:line="45" pos:column="28"/></name></expr>;<pos:position pos:line="45" pos:column="29"/></expr_stmt>
	  <return pos:line="46" pos:column="11">return <expr><name pos:line="46" pos:column="18">XML_TOK_INVALID<pos:position pos:line="46" pos:column="33"/></name></expr>;<pos:position pos:line="46" pos:column="34"/></return>
	}<pos:position pos:line="47" pos:column="10"/></block></switch>
      }<pos:position pos:line="48" pos:column="8"/></block></for>
    <comment type="block" pos:line="49" pos:column="5">/* fall through */</comment>
    <case pos:line="50" pos:column="5">case <expr><name pos:line="50" pos:column="10">BT_EQUALS<pos:position pos:line="50" pos:column="19"/></name></expr>:<pos:position pos:line="50" pos:column="20"/></case>
      <block pos:line="51" pos:column="7">{
	<decl_stmt><decl><type><name pos:line="52" pos:column="9">int<pos:position pos:line="52" pos:column="12"/></name></type> <name pos:line="52" pos:column="13">open<pos:position pos:line="52" pos:column="17"/></name></decl>;<pos:position pos:line="52" pos:column="18"/></decl_stmt>
<cpp:ifdef pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">ifdef<pos:position pos:line="53" pos:column="7"/></cpp:directive> <name pos:line="53" pos:column="8">XML_NS<pos:position pos:line="53" pos:column="14"/></name></cpp:ifdef>
	<expr_stmt><expr><name pos:line="54" pos:column="9">hadColon<pos:position pos:line="54" pos:column="17"/></name> <operator pos:line="54" pos:column="18">=<pos:position pos:line="54" pos:column="19"/></operator> <literal type="number" pos:line="54" pos:column="20">0<pos:position pos:line="54" pos:column="21"/></literal></expr>;<pos:position pos:line="54" pos:column="22"/></expr_stmt>
<cpp:endif pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">endif<pos:position pos:line="55" pos:column="7"/></cpp:directive></cpp:endif>
	<for pos:line="56" pos:column="9">for <control pos:line="56" pos:column="13">(<init pos:line="56" pos:column="14">;<pos:position pos:line="56" pos:column="15"/></init><condition pos:line="56" pos:column="15">;<pos:position pos:line="56" pos:column="16"/></condition><incr/>)<pos:position pos:line="56" pos:column="17"/></control> <block pos:line="56" pos:column="18">{
	  
	  <expr_stmt><expr><name pos:line="58" pos:column="11">ptr<pos:position pos:line="58" pos:column="14"/></name> <operator pos:line="58" pos:column="15">+=<pos:position pos:line="58" pos:column="17"/></operator> <call><name pos:line="58" pos:column="18">MINBPC<pos:position pos:line="58" pos:column="24"/></name><argument_list pos:line="58" pos:column="24">(<argument><expr><name pos:line="58" pos:column="25">enc<pos:position pos:line="58" pos:column="28"/></name></expr></argument>)<pos:position pos:line="58" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="30"/></expr_stmt>
	  <if pos:line="59" pos:column="11">if <condition pos:line="59" pos:column="14">(<expr><name pos:line="59" pos:column="15">ptr<pos:position pos:line="59" pos:column="18"/></name> <operator pos:line="59" pos:column="19">==<pos:position pos:line="59" pos:column="21"/></operator> <name pos:line="59" pos:column="22">end<pos:position pos:line="59" pos:column="25"/></name></expr>)<pos:position pos:line="59" pos:column="26"/></condition><then pos:line="59" pos:column="26">
	    <block type="pseudo"><return pos:line="60" pos:column="13">return <expr><name pos:line="60" pos:column="20">XML_TOK_PARTIAL<pos:position pos:line="60" pos:column="35"/></name></expr>;<pos:position pos:line="60" pos:column="36"/></return></block></then></if>
	  <expr_stmt><expr><name pos:line="61" pos:column="11">open<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">=<pos:position pos:line="61" pos:column="17"/></operator> <call><name pos:line="61" pos:column="18">BYTE_TYPE<pos:position pos:line="61" pos:column="27"/></name><argument_list pos:line="61" pos:column="27">(<argument><expr><name pos:line="61" pos:column="28">enc<pos:position pos:line="61" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="33">ptr<pos:position pos:line="61" pos:column="36"/></name></expr></argument>)<pos:position pos:line="61" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="38"/></expr_stmt>
	  <if pos:line="62" pos:column="11">if <condition pos:line="62" pos:column="14">(<expr><name pos:line="62" pos:column="15">open<pos:position pos:line="62" pos:column="19"/></name> <operator pos:line="62" pos:column="20">==<pos:position pos:line="62" pos:column="22"/></operator> <name pos:line="62" pos:column="23">BT_QUOT<pos:position pos:line="62" pos:column="30"/></name> <operator pos:line="62" pos:column="31">||<pos:position pos:line="62" pos:column="33"/></operator> <name pos:line="62" pos:column="34">open<pos:position pos:line="62" pos:column="38"/></name> <operator pos:line="62" pos:column="39">==<pos:position pos:line="62" pos:column="41"/></operator> <name pos:line="62" pos:column="42">BT_APOS<pos:position pos:line="62" pos:column="49"/></name></expr>)<pos:position pos:line="62" pos:column="50"/></condition><then pos:line="62" pos:column="50">
	    <block type="pseudo"><break pos:line="63" pos:column="13">break;<pos:position pos:line="63" pos:column="19"/></break></block></then></if>
	  <switch pos:line="64" pos:column="11">switch <condition pos:line="64" pos:column="18">(<expr><name pos:line="64" pos:column="19">open<pos:position pos:line="64" pos:column="23"/></name></expr>)<pos:position pos:line="64" pos:column="24"/></condition> <block pos:line="64" pos:column="25">{
	  <case pos:line="65" pos:column="11">case <expr><name pos:line="65" pos:column="16">BT_S<pos:position pos:line="65" pos:column="20"/></name></expr>:<pos:position pos:line="65" pos:column="21"/></case>
	  <case pos:line="66" pos:column="11">case <expr><name pos:line="66" pos:column="16">BT_LF<pos:position pos:line="66" pos:column="21"/></name></expr>:<pos:position pos:line="66" pos:column="22"/></case>
	  <case pos:line="67" pos:column="11">case <expr><name pos:line="67" pos:column="16">BT_CR<pos:position pos:line="67" pos:column="21"/></name></expr>:<pos:position pos:line="67" pos:column="22"/></case>
	    <break pos:line="68" pos:column="13">break;<pos:position pos:line="68" pos:column="19"/></break>
	  <default pos:line="69" pos:column="11">default:<pos:position pos:line="69" pos:column="19"/></default>
	    <expr_stmt><expr><operator pos:line="70" pos:column="13">*<pos:position pos:line="70" pos:column="14"/></operator><name pos:line="70" pos:column="14">nextTokPtr<pos:position pos:line="70" pos:column="24"/></name> <operator pos:line="70" pos:column="25">=<pos:position pos:line="70" pos:column="26"/></operator> <name pos:line="70" pos:column="27">ptr<pos:position pos:line="70" pos:column="30"/></name></expr>;<pos:position pos:line="70" pos:column="31"/></expr_stmt>
	    <return pos:line="71" pos:column="13">return <expr><name pos:line="71" pos:column="20">XML_TOK_INVALID<pos:position pos:line="71" pos:column="35"/></name></expr>;<pos:position pos:line="71" pos:column="36"/></return>
	  }<pos:position pos:line="72" pos:column="12"/></block></switch>
	}<pos:position pos:line="73" pos:column="10"/></block></for>
	<expr_stmt><expr><name pos:line="74" pos:column="9">ptr<pos:position pos:line="74" pos:column="12"/></name> <operator pos:line="74" pos:column="13">+=<pos:position pos:line="74" pos:column="15"/></operator> <call><name pos:line="74" pos:column="16">MINBPC<pos:position pos:line="74" pos:column="22"/></name><argument_list pos:line="74" pos:column="22">(<argument><expr><name pos:line="74" pos:column="23">enc<pos:position pos:line="74" pos:column="26"/></name></expr></argument>)<pos:position pos:line="74" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="28"/></expr_stmt>
	<comment type="block" pos:line="75" pos:column="9">/* in attribute value */</comment>
	<for pos:line="76" pos:column="9">for <control pos:line="76" pos:column="13">(<init pos:line="76" pos:column="14">;<pos:position pos:line="76" pos:column="15"/></init><condition pos:line="76" pos:column="15">;<pos:position pos:line="76" pos:column="16"/></condition><incr/>)<pos:position pos:line="76" pos:column="17"/></control> <block pos:line="76" pos:column="18">{
	  <decl_stmt><decl><type><name pos:line="77" pos:column="11">int<pos:position pos:line="77" pos:column="14"/></name></type> <name pos:line="77" pos:column="15">t<pos:position pos:line="77" pos:column="16"/></name></decl>;<pos:position pos:line="77" pos:column="17"/></decl_stmt>
	  <if pos:line="78" pos:column="11">if <condition pos:line="78" pos:column="14">(<expr><name pos:line="78" pos:column="15">ptr<pos:position pos:line="78" pos:column="18"/></name> <operator pos:line="78" pos:column="19">==<pos:position pos:line="78" pos:column="21"/></operator> <name pos:line="78" pos:column="22">end<pos:position pos:line="78" pos:column="25"/></name></expr>)<pos:position pos:line="78" pos:column="26"/></condition><then pos:line="78" pos:column="26">
	    <block type="pseudo"><return pos:line="79" pos:column="13">return <expr><name pos:line="79" pos:column="20">XML_TOK_PARTIAL<pos:position pos:line="79" pos:column="35"/></name></expr>;<pos:position pos:line="79" pos:column="36"/></return></block></then></if>
	  <expr_stmt><expr><name pos:line="80" pos:column="11">t<pos:position pos:line="80" pos:column="12"/></name> <operator pos:line="80" pos:column="13">=<pos:position pos:line="80" pos:column="14"/></operator> <call><name pos:line="80" pos:column="15">BYTE_TYPE<pos:position pos:line="80" pos:column="24"/></name><argument_list pos:line="80" pos:column="24">(<argument><expr><name pos:line="80" pos:column="25">enc<pos:position pos:line="80" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="30">ptr<pos:position pos:line="80" pos:column="33"/></name></expr></argument>)<pos:position pos:line="80" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="35"/></expr_stmt>
	  <if pos:line="81" pos:column="11">if <condition pos:line="81" pos:column="14">(<expr><name pos:line="81" pos:column="15">t<pos:position pos:line="81" pos:column="16"/></name> <operator pos:line="81" pos:column="17">==<pos:position pos:line="81" pos:column="19"/></operator> <name pos:line="81" pos:column="20">open<pos:position pos:line="81" pos:column="24"/></name></expr>)<pos:position pos:line="81" pos:column="25"/></condition><then pos:line="81" pos:column="25">
	    <block type="pseudo"><break pos:line="82" pos:column="13">break;<pos:position pos:line="82" pos:column="19"/></break></block></then></if>
	  <switch pos:line="83" pos:column="11">switch <condition pos:line="83" pos:column="18">(<expr><name pos:line="83" pos:column="19">t<pos:position pos:line="83" pos:column="20"/></name></expr>)<pos:position pos:line="83" pos:column="21"/></condition> <block pos:line="83" pos:column="22">{
	  <macro><name pos:line="84" pos:column="11">INVALID_CASES<pos:position pos:line="84" pos:column="24"/></name><argument_list pos:line="84" pos:column="24">(<argument pos:line="84" pos:column="25">ptr<pos:position pos:line="84" pos:column="28"/></argument>, <argument pos:line="84" pos:column="30">nextTokPtr<pos:position pos:line="84" pos:column="40"/></argument>)<pos:position pos:line="84" pos:column="41"/></argument_list></macro>
	  <case pos:line="85" pos:column="11">case <expr><name pos:line="85" pos:column="16">BT_AMP<pos:position pos:line="85" pos:column="22"/></name></expr>:<pos:position pos:line="85" pos:column="23"/></case>
	    <block pos:line="86" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="87" pos:column="15">int<pos:position pos:line="87" pos:column="18"/></name></type> <name pos:line="87" pos:column="19">tok<pos:position pos:line="87" pos:column="22"/></name> <init pos:line="87" pos:column="23">= <expr><call><call><name pos:line="87" pos:column="25">PREFIX<pos:position pos:line="87" pos:column="31"/></name><argument_list pos:line="87" pos:column="31">(<argument><expr><name pos:line="87" pos:column="32">scanRef<pos:position pos:line="87" pos:column="39"/></name></expr></argument>)<pos:position pos:line="87" pos:column="40"/></argument_list></call><argument_list pos:line="87" pos:column="40">(<argument><expr><name pos:line="87" pos:column="41">enc<pos:position pos:line="87" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="46">ptr<pos:position pos:line="87" pos:column="49"/></name> <operator pos:line="87" pos:column="50">+<pos:position pos:line="87" pos:column="51"/></operator> <call><name pos:line="87" pos:column="52">MINBPC<pos:position pos:line="87" pos:column="58"/></name><argument_list pos:line="87" pos:column="58">(<argument><expr><name pos:line="87" pos:column="59">enc<pos:position pos:line="87" pos:column="62"/></name></expr></argument>)<pos:position pos:line="87" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="87" pos:column="65">end<pos:position pos:line="87" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="87" pos:column="70">&amp;<pos:position pos:line="87" pos:column="75"/></operator><name pos:line="87" pos:column="71">ptr<pos:position pos:line="87" pos:column="74"/></name></expr></argument>)<pos:position pos:line="87" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="87" pos:column="76"/></decl_stmt>
	      <if pos:line="88" pos:column="15">if <condition pos:line="88" pos:column="18">(<expr><name pos:line="88" pos:column="19">tok<pos:position pos:line="88" pos:column="22"/></name> <operator pos:line="88" pos:column="23">&lt;=<pos:position pos:line="88" pos:column="28"/></operator> <literal type="number" pos:line="88" pos:column="26">0<pos:position pos:line="88" pos:column="27"/></literal></expr>)<pos:position pos:line="88" pos:column="28"/></condition><then pos:line="88" pos:column="28"> <block pos:line="88" pos:column="29">{
		<if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><name pos:line="89" pos:column="21">tok<pos:position pos:line="89" pos:column="24"/></name> <operator pos:line="89" pos:column="25">==<pos:position pos:line="89" pos:column="27"/></operator> <name pos:line="89" pos:column="28">XML_TOK_INVALID<pos:position pos:line="89" pos:column="43"/></name></expr>)<pos:position pos:line="89" pos:column="44"/></condition><then pos:line="89" pos:column="44">
		  <block type="pseudo"><expr_stmt><expr><operator pos:line="90" pos:column="19">*<pos:position pos:line="90" pos:column="20"/></operator><name pos:line="90" pos:column="20">nextTokPtr<pos:position pos:line="90" pos:column="30"/></name> <operator pos:line="90" pos:column="31">=<pos:position pos:line="90" pos:column="32"/></operator> <name pos:line="90" pos:column="33">ptr<pos:position pos:line="90" pos:column="36"/></name></expr>;<pos:position pos:line="90" pos:column="37"/></expr_stmt></block></then></if>
		<return pos:line="91" pos:column="17">return <expr><name pos:line="91" pos:column="24">tok<pos:position pos:line="91" pos:column="27"/></name></expr>;<pos:position pos:line="91" pos:column="28"/></return>
	      }<pos:position pos:line="92" pos:column="16"/></block></then></if>
	      <break pos:line="93" pos:column="15">break;<pos:position pos:line="93" pos:column="21"/></break>
	    }<pos:position pos:line="94" pos:column="14"/></block>
	  <case pos:line="95" pos:column="11">case <expr><name pos:line="95" pos:column="16">BT_LT<pos:position pos:line="95" pos:column="21"/></name></expr>:<pos:position pos:line="95" pos:column="22"/></case>
	    <expr_stmt><expr><operator pos:line="96" pos:column="13">*<pos:position pos:line="96" pos:column="14"/></operator><name pos:line="96" pos:column="14">nextTokPtr<pos:position pos:line="96" pos:column="24"/></name> <operator pos:line="96" pos:column="25">=<pos:position pos:line="96" pos:column="26"/></operator> <name pos:line="96" pos:column="27">ptr<pos:position pos:line="96" pos:column="30"/></name></expr>;<pos:position pos:line="96" pos:column="31"/></expr_stmt>
	    <return pos:line="97" pos:column="13">return <expr><name pos:line="97" pos:column="20">XML_TOK_INVALID<pos:position pos:line="97" pos:column="35"/></name></expr>;<pos:position pos:line="97" pos:column="36"/></return>
	  <default pos:line="98" pos:column="11">default:<pos:position pos:line="98" pos:column="19"/></default>
	    <expr_stmt><expr><name pos:line="99" pos:column="13">ptr<pos:position pos:line="99" pos:column="16"/></name> <operator pos:line="99" pos:column="17">+=<pos:position pos:line="99" pos:column="19"/></operator> <call><name pos:line="99" pos:column="20">MINBPC<pos:position pos:line="99" pos:column="26"/></name><argument_list pos:line="99" pos:column="26">(<argument><expr><name pos:line="99" pos:column="27">enc<pos:position pos:line="99" pos:column="30"/></name></expr></argument>)<pos:position pos:line="99" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="32"/></expr_stmt>
	    <break pos:line="100" pos:column="13">break;<pos:position pos:line="100" pos:column="19"/></break>
	  }<pos:position pos:line="101" pos:column="12"/></block></switch>
	}<pos:position pos:line="102" pos:column="10"/></block></for>
	<expr_stmt><expr><name pos:line="103" pos:column="9">ptr<pos:position pos:line="103" pos:column="12"/></name> <operator pos:line="103" pos:column="13">+=<pos:position pos:line="103" pos:column="15"/></operator> <call><name pos:line="103" pos:column="16">MINBPC<pos:position pos:line="103" pos:column="22"/></name><argument_list pos:line="103" pos:column="22">(<argument><expr><name pos:line="103" pos:column="23">enc<pos:position pos:line="103" pos:column="26"/></name></expr></argument>)<pos:position pos:line="103" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="28"/></expr_stmt>
	<if pos:line="104" pos:column="9">if <condition pos:line="104" pos:column="12">(<expr><name pos:line="104" pos:column="13">ptr<pos:position pos:line="104" pos:column="16"/></name> <operator pos:line="104" pos:column="17">==<pos:position pos:line="104" pos:column="19"/></operator> <name pos:line="104" pos:column="20">end<pos:position pos:line="104" pos:column="23"/></name></expr>)<pos:position pos:line="104" pos:column="24"/></condition><then pos:line="104" pos:column="24">
	  <block type="pseudo"><return pos:line="105" pos:column="11">return <expr><name pos:line="105" pos:column="18">XML_TOK_PARTIAL<pos:position pos:line="105" pos:column="33"/></name></expr>;<pos:position pos:line="105" pos:column="34"/></return></block></then></if>
	<switch pos:line="106" pos:column="9">switch <condition pos:line="106" pos:column="16">(<expr><call><name pos:line="106" pos:column="17">BYTE_TYPE<pos:position pos:line="106" pos:column="26"/></name><argument_list pos:line="106" pos:column="26">(<argument><expr><name pos:line="106" pos:column="27">enc<pos:position pos:line="106" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="32">ptr<pos:position pos:line="106" pos:column="35"/></name></expr></argument>)<pos:position pos:line="106" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="106" pos:column="37"/></condition> <block pos:line="106" pos:column="38">{
	<case pos:line="107" pos:column="9">case <expr><name pos:line="107" pos:column="14">BT_S<pos:position pos:line="107" pos:column="18"/></name></expr>:<pos:position pos:line="107" pos:column="19"/></case>
	<case pos:line="108" pos:column="9">case <expr><name pos:line="108" pos:column="14">BT_CR<pos:position pos:line="108" pos:column="19"/></name></expr>:<pos:position pos:line="108" pos:column="20"/></case>
	<case pos:line="109" pos:column="9">case <expr><name pos:line="109" pos:column="14">BT_LF<pos:position pos:line="109" pos:column="19"/></name></expr>:<pos:position pos:line="109" pos:column="20"/></case>
	  <break pos:line="110" pos:column="11">break;<pos:position pos:line="110" pos:column="17"/></break>
	<case pos:line="111" pos:column="9">case <expr><name pos:line="111" pos:column="14">BT_SOL<pos:position pos:line="111" pos:column="20"/></name></expr>:<pos:position pos:line="111" pos:column="21"/></case>
	  <goto pos:line="112" pos:column="11">goto <name pos:line="112" pos:column="16">sol<pos:position pos:line="112" pos:column="19"/></name>;<pos:position pos:line="112" pos:column="20"/></goto>
	<case pos:line="113" pos:column="9">case <expr><name pos:line="113" pos:column="14">BT_GT<pos:position pos:line="113" pos:column="19"/></name></expr>:<pos:position pos:line="113" pos:column="20"/></case>
	  <goto pos:line="114" pos:column="11">goto <name pos:line="114" pos:column="16">gt<pos:position pos:line="114" pos:column="18"/></name>;<pos:position pos:line="114" pos:column="19"/></goto>
	<default pos:line="115" pos:column="9">default:<pos:position pos:line="115" pos:column="17"/></default>
	  <expr_stmt><expr><operator pos:line="116" pos:column="11">*<pos:position pos:line="116" pos:column="12"/></operator><name pos:line="116" pos:column="12">nextTokPtr<pos:position pos:line="116" pos:column="22"/></name> <operator pos:line="116" pos:column="23">=<pos:position pos:line="116" pos:column="24"/></operator> <name pos:line="116" pos:column="25">ptr<pos:position pos:line="116" pos:column="28"/></name></expr>;<pos:position pos:line="116" pos:column="29"/></expr_stmt>
	  <return pos:line="117" pos:column="11">return <expr><name pos:line="117" pos:column="18">XML_TOK_INVALID<pos:position pos:line="117" pos:column="33"/></name></expr>;<pos:position pos:line="117" pos:column="34"/></return>
	}<pos:position pos:line="118" pos:column="10"/></block></switch>
	<comment type="block" pos:line="119" pos:column="9">/* ptr points to closing quote */</comment>
	<for pos:line="120" pos:column="9">for <control pos:line="120" pos:column="13">(<init pos:line="120" pos:column="14">;<pos:position pos:line="120" pos:column="15"/></init><condition pos:line="120" pos:column="15">;<pos:position pos:line="120" pos:column="16"/></condition><incr/>)<pos:position pos:line="120" pos:column="17"/></control> <block pos:line="120" pos:column="18">{
	  <expr_stmt><expr><name pos:line="121" pos:column="11">ptr<pos:position pos:line="121" pos:column="14"/></name> <operator pos:line="121" pos:column="15">+=<pos:position pos:line="121" pos:column="17"/></operator> <call><name pos:line="121" pos:column="18">MINBPC<pos:position pos:line="121" pos:column="24"/></name><argument_list pos:line="121" pos:column="24">(<argument><expr><name pos:line="121" pos:column="25">enc<pos:position pos:line="121" pos:column="28"/></name></expr></argument>)<pos:position pos:line="121" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="30"/></expr_stmt>
	  <if pos:line="122" pos:column="11">if <condition pos:line="122" pos:column="14">(<expr><name pos:line="122" pos:column="15">ptr<pos:position pos:line="122" pos:column="18"/></name> <operator pos:line="122" pos:column="19">==<pos:position pos:line="122" pos:column="21"/></operator> <name pos:line="122" pos:column="22">end<pos:position pos:line="122" pos:column="25"/></name></expr>)<pos:position pos:line="122" pos:column="26"/></condition><then pos:line="122" pos:column="26">
	    <block type="pseudo"><return pos:line="123" pos:column="13">return <expr><name pos:line="123" pos:column="20">XML_TOK_PARTIAL<pos:position pos:line="123" pos:column="35"/></name></expr>;<pos:position pos:line="123" pos:column="36"/></return></block></then></if>
	  <switch pos:line="124" pos:column="11">switch <condition pos:line="124" pos:column="18">(<expr><call><name pos:line="124" pos:column="19">BYTE_TYPE<pos:position pos:line="124" pos:column="28"/></name><argument_list pos:line="124" pos:column="28">(<argument><expr><name pos:line="124" pos:column="29">enc<pos:position pos:line="124" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="34">ptr<pos:position pos:line="124" pos:column="37"/></name></expr></argument>)<pos:position pos:line="124" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="124" pos:column="39"/></condition> <block pos:line="124" pos:column="40">{
	  <macro><name pos:line="125" pos:column="11">CHECK_NMSTRT_CASES<pos:position pos:line="125" pos:column="29"/></name><argument_list pos:line="125" pos:column="29">(<argument pos:line="125" pos:column="30">enc<pos:position pos:line="125" pos:column="33"/></argument>, <argument pos:line="125" pos:column="35">ptr<pos:position pos:line="125" pos:column="38"/></argument>, <argument pos:line="125" pos:column="40">end<pos:position pos:line="125" pos:column="43"/></argument>, <argument pos:line="125" pos:column="45">nextTokPtr<pos:position pos:line="125" pos:column="55"/></argument>)<pos:position pos:line="125" pos:column="56"/></argument_list></macro>
	  <case pos:line="126" pos:column="11">case <expr><name pos:line="126" pos:column="16">BT_S<pos:position pos:line="126" pos:column="20"/></name></expr>:<pos:position pos:line="126" pos:column="21"/></case> <case pos:line="126" pos:column="22">case <expr><name pos:line="126" pos:column="27">BT_CR<pos:position pos:line="126" pos:column="32"/></name></expr>:<pos:position pos:line="126" pos:column="33"/></case> <case pos:line="126" pos:column="34">case <expr><name pos:line="126" pos:column="39">BT_LF<pos:position pos:line="126" pos:column="44"/></name></expr>:<pos:position pos:line="126" pos:column="45"/></case>
	    <continue pos:line="127" pos:column="13">continue;<pos:position pos:line="127" pos:column="22"/></continue>
	  <case pos:line="128" pos:column="11">case <expr><name pos:line="128" pos:column="16">BT_GT<pos:position pos:line="128" pos:column="21"/></name></expr>:<pos:position pos:line="128" pos:column="22"/></case>
          <label><name pos:line="129" pos:column="11">gt<pos:position pos:line="129" pos:column="13"/></name>:<pos:position pos:line="129" pos:column="14"/></label>
	    <expr_stmt><expr><operator pos:line="130" pos:column="13">*<pos:position pos:line="130" pos:column="14"/></operator><name pos:line="130" pos:column="14">nextTokPtr<pos:position pos:line="130" pos:column="24"/></name> <operator pos:line="130" pos:column="25">=<pos:position pos:line="130" pos:column="26"/></operator> <name pos:line="130" pos:column="27">ptr<pos:position pos:line="130" pos:column="30"/></name> <operator pos:line="130" pos:column="31">+<pos:position pos:line="130" pos:column="32"/></operator> <call><name pos:line="130" pos:column="33">MINBPC<pos:position pos:line="130" pos:column="39"/></name><argument_list pos:line="130" pos:column="39">(<argument><expr><name pos:line="130" pos:column="40">enc<pos:position pos:line="130" pos:column="43"/></name></expr></argument>)<pos:position pos:line="130" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="45"/></expr_stmt>
	    <return pos:line="131" pos:column="13">return <expr><name pos:line="131" pos:column="20">XML_TOK_START_TAG_WITH_ATTS<pos:position pos:line="131" pos:column="47"/></name></expr>;<pos:position pos:line="131" pos:column="48"/></return>
	  <case pos:line="132" pos:column="11">case <expr><name pos:line="132" pos:column="16">BT_SOL<pos:position pos:line="132" pos:column="22"/></name></expr>:<pos:position pos:line="132" pos:column="23"/></case>
          <label><name pos:line="133" pos:column="11">sol<pos:position pos:line="133" pos:column="14"/></name>:<pos:position pos:line="133" pos:column="15"/></label>
	    <expr_stmt><expr><name pos:line="134" pos:column="13">ptr<pos:position pos:line="134" pos:column="16"/></name> <operator pos:line="134" pos:column="17">+=<pos:position pos:line="134" pos:column="19"/></operator> <call><name pos:line="134" pos:column="20">MINBPC<pos:position pos:line="134" pos:column="26"/></name><argument_list pos:line="134" pos:column="26">(<argument><expr><name pos:line="134" pos:column="27">enc<pos:position pos:line="134" pos:column="30"/></name></expr></argument>)<pos:position pos:line="134" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="32"/></expr_stmt>
	    <if pos:line="135" pos:column="13">if <condition pos:line="135" pos:column="16">(<expr><name pos:line="135" pos:column="17">ptr<pos:position pos:line="135" pos:column="20"/></name> <operator pos:line="135" pos:column="21">==<pos:position pos:line="135" pos:column="23"/></operator> <name pos:line="135" pos:column="24">end<pos:position pos:line="135" pos:column="27"/></name></expr>)<pos:position pos:line="135" pos:column="28"/></condition><then pos:line="135" pos:column="28">
	      <block type="pseudo"><return pos:line="136" pos:column="15">return <expr><name pos:line="136" pos:column="22">XML_TOK_PARTIAL<pos:position pos:line="136" pos:column="37"/></name></expr>;<pos:position pos:line="136" pos:column="38"/></return></block></then></if>
	    <if pos:line="137" pos:column="13">if <condition pos:line="137" pos:column="16">(<expr><operator pos:line="137" pos:column="17">!<pos:position pos:line="137" pos:column="18"/></operator><call><name pos:line="137" pos:column="18">CHAR_MATCHES<pos:position pos:line="137" pos:column="30"/></name><argument_list pos:line="137" pos:column="30">(<argument><expr><name pos:line="137" pos:column="31">enc<pos:position pos:line="137" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="36">ptr<pos:position pos:line="137" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="41">ASCII_GT<pos:position pos:line="137" pos:column="49"/></name></expr></argument>)<pos:position pos:line="137" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="137" pos:column="51"/></condition><then pos:line="137" pos:column="51"> <block pos:line="137" pos:column="52">{
	      <expr_stmt><expr><operator pos:line="138" pos:column="15">*<pos:position pos:line="138" pos:column="16"/></operator><name pos:line="138" pos:column="16">nextTokPtr<pos:position pos:line="138" pos:column="26"/></name> <operator pos:line="138" pos:column="27">=<pos:position pos:line="138" pos:column="28"/></operator> <name pos:line="138" pos:column="29">ptr<pos:position pos:line="138" pos:column="32"/></name></expr>;<pos:position pos:line="138" pos:column="33"/></expr_stmt>
	      <return pos:line="139" pos:column="15">return <expr><name pos:line="139" pos:column="22">XML_TOK_INVALID<pos:position pos:line="139" pos:column="37"/></name></expr>;<pos:position pos:line="139" pos:column="38"/></return>
	    }<pos:position pos:line="140" pos:column="14"/></block></then></if>
	    <expr_stmt><expr><operator pos:line="141" pos:column="13">*<pos:position pos:line="141" pos:column="14"/></operator><name pos:line="141" pos:column="14">nextTokPtr<pos:position pos:line="141" pos:column="24"/></name> <operator pos:line="141" pos:column="25">=<pos:position pos:line="141" pos:column="26"/></operator> <name pos:line="141" pos:column="27">ptr<pos:position pos:line="141" pos:column="30"/></name> <operator pos:line="141" pos:column="31">+<pos:position pos:line="141" pos:column="32"/></operator> <call><name pos:line="141" pos:column="33">MINBPC<pos:position pos:line="141" pos:column="39"/></name><argument_list pos:line="141" pos:column="39">(<argument><expr><name pos:line="141" pos:column="40">enc<pos:position pos:line="141" pos:column="43"/></name></expr></argument>)<pos:position pos:line="141" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="45"/></expr_stmt>
	    <return pos:line="142" pos:column="13">return <expr><name pos:line="142" pos:column="20">XML_TOK_EMPTY_ELEMENT_WITH_ATTS<pos:position pos:line="142" pos:column="51"/></name></expr>;<pos:position pos:line="142" pos:column="52"/></return>
	  <default pos:line="143" pos:column="11">default:<pos:position pos:line="143" pos:column="19"/></default>
	    <expr_stmt><expr><operator pos:line="144" pos:column="13">*<pos:position pos:line="144" pos:column="14"/></operator><name pos:line="144" pos:column="14">nextTokPtr<pos:position pos:line="144" pos:column="24"/></name> <operator pos:line="144" pos:column="25">=<pos:position pos:line="144" pos:column="26"/></operator> <name pos:line="144" pos:column="27">ptr<pos:position pos:line="144" pos:column="30"/></name></expr>;<pos:position pos:line="144" pos:column="31"/></expr_stmt>
	    <return pos:line="145" pos:column="13">return <expr><name pos:line="145" pos:column="20">XML_TOK_INVALID<pos:position pos:line="145" pos:column="35"/></name></expr>;<pos:position pos:line="145" pos:column="36"/></return>
	  }<pos:position pos:line="146" pos:column="12"/></block></switch>
	  <break pos:line="147" pos:column="11">break;<pos:position pos:line="147" pos:column="17"/></break>
	}<pos:position pos:line="148" pos:column="10"/></block></for>
	<break pos:line="149" pos:column="9">break;<pos:position pos:line="149" pos:column="15"/></break>
      }<pos:position pos:line="150" pos:column="8"/></block>
    <default pos:line="151" pos:column="5">default:<pos:position pos:line="151" pos:column="13"/></default>
      <expr_stmt><expr><operator pos:line="152" pos:column="7">*<pos:position pos:line="152" pos:column="8"/></operator><name pos:line="152" pos:column="8">nextTokPtr<pos:position pos:line="152" pos:column="18"/></name> <operator pos:line="152" pos:column="19">=<pos:position pos:line="152" pos:column="20"/></operator> <name pos:line="152" pos:column="21">ptr<pos:position pos:line="152" pos:column="24"/></name></expr>;<pos:position pos:line="152" pos:column="25"/></expr_stmt>
      <return pos:line="153" pos:column="7">return <expr><name pos:line="153" pos:column="14">XML_TOK_INVALID<pos:position pos:line="153" pos:column="29"/></name></expr>;<pos:position pos:line="153" pos:column="30"/></return>
    }<pos:position pos:line="154" pos:column="6"/></block></switch>
  }<pos:position pos:line="155" pos:column="4"/></block></while>
  <return pos:line="156" pos:column="3">return <expr><name pos:line="156" pos:column="10">XML_TOK_PARTIAL<pos:position pos:line="156" pos:column="25"/></name></expr>;<pos:position pos:line="156" pos:column="26"/></return>
}<pos:position pos:line="157" pos:column="2"/></block></function></unit>
