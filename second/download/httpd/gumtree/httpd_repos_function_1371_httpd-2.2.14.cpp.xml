<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1371_httpd-2.2.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">ap_http_chunk_filter<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">ap_filter_t<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">f<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">apr_bucket_brigade<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">b<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:define pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">define<pos:position pos:line="3" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="3" pos:column="9">ASCII_CRLF<pos:position pos:line="3" pos:column="19"/></name></cpp:macro>  <cpp:value pos:line="3" pos:column="21">"\015\012"<pos:position pos:line="3" pos:column="31"/></cpp:value></cpp:define>
<cpp:define pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">define<pos:position pos:line="4" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="4" pos:column="9">ASCII_ZERO<pos:position pos:line="4" pos:column="19"/></name></cpp:macro>  <cpp:value pos:line="4" pos:column="21">"\060"<pos:position pos:line="4" pos:column="27"/></cpp:value></cpp:define>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">conn_rec<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">c<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><name><name pos:line="5" pos:column="19">f<pos:position pos:line="5" pos:column="20"/></name><operator pos:line="5" pos:column="20">-&gt;<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="22">r<pos:position pos:line="5" pos:column="23"/></name><operator pos:line="5" pos:column="23">-&gt;<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="25">connection<pos:position pos:line="5" pos:column="35"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_bucket_brigade<pos:position pos:line="6" pos:column="23"/></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">more<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_bucket<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">e<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_status_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">rv<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>

    <for pos:line="10" pos:column="5">for <control pos:line="10" pos:column="9">(<init><expr><name pos:line="10" pos:column="10">more<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <name pos:line="10" pos:column="17">NULL<pos:position pos:line="10" pos:column="21"/></name></expr>;<pos:position pos:line="10" pos:column="22"/></init> <condition><expr><name pos:line="10" pos:column="23">b<pos:position pos:line="10" pos:column="24"/></name></expr>;<pos:position pos:line="10" pos:column="25"/></condition> <incr><expr><name pos:line="10" pos:column="26">b<pos:position pos:line="10" pos:column="27"/></name> <operator pos:line="10" pos:column="28">=<pos:position pos:line="10" pos:column="29"/></operator> <name pos:line="10" pos:column="30">more<pos:position pos:line="10" pos:column="34"/></name></expr><operator pos:line="10" pos:column="34">,<pos:position pos:line="10" pos:column="35"/></operator> <expr><name pos:line="10" pos:column="36">more<pos:position pos:line="10" pos:column="40"/></name> <operator pos:line="10" pos:column="41">=<pos:position pos:line="10" pos:column="42"/></operator> <name pos:line="10" pos:column="43">NULL<pos:position pos:line="10" pos:column="47"/></name></expr></incr>)<pos:position pos:line="10" pos:column="48"/></control> <block pos:line="10" pos:column="49">{
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">apr_off_t<pos:position pos:line="11" pos:column="18"/></name></type> <name pos:line="11" pos:column="19">bytes<pos:position pos:line="11" pos:column="24"/></name> <init pos:line="11" pos:column="25">= <expr><literal type="number" pos:line="11" pos:column="27">0<pos:position pos:line="11" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">apr_bucket<pos:position pos:line="12" pos:column="19"/></name> <modifier pos:line="12" pos:column="20">*<pos:position pos:line="12" pos:column="21"/></modifier></type><name pos:line="12" pos:column="21">eos<pos:position pos:line="12" pos:column="24"/></name> <init pos:line="12" pos:column="25">= <expr><name pos:line="12" pos:column="27">NULL<pos:position pos:line="12" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="32"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="13" pos:column="9">apr_bucket<pos:position pos:line="13" pos:column="19"/></name> <modifier pos:line="13" pos:column="20">*<pos:position pos:line="13" pos:column="21"/></modifier></type><name pos:line="13" pos:column="21">flush<pos:position pos:line="13" pos:column="26"/></name> <init pos:line="13" pos:column="27">= <expr><name pos:line="13" pos:column="29">NULL<pos:position pos:line="13" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="34"/></decl_stmt>
        <comment type="block" pos:line="14" pos:column="9">/* XXX: chunk_hdr must remain at this scope since it is used in a
         *      transient bucket.
         */</comment>
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">char<pos:position pos:line="17" pos:column="13"/></name></type> <name><name pos:line="17" pos:column="14">chunk_hdr<pos:position pos:line="17" pos:column="23"/></name><index pos:line="17" pos:column="23">[<expr><literal type="number" pos:line="17" pos:column="24">20<pos:position pos:line="17" pos:column="26"/></literal></expr>]<pos:position pos:line="17" pos:column="27"/></index></name></decl>;<pos:position pos:line="17" pos:column="28"/></decl_stmt> <comment type="block" pos:line="17" pos:column="29">/* enough space for the snprintf below */</comment>


        <for pos:line="20" pos:column="9">for <control pos:line="20" pos:column="13">(<init><expr><name pos:line="20" pos:column="14">e<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <call><name pos:line="20" pos:column="18">APR_BRIGADE_FIRST<pos:position pos:line="20" pos:column="35"/></name><argument_list pos:line="20" pos:column="35">(<argument><expr><name pos:line="20" pos:column="36">b<pos:position pos:line="20" pos:column="37"/></name></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="39"/></init>
             <condition><expr><name pos:line="21" pos:column="14">e<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">!=<pos:position pos:line="21" pos:column="18"/></operator> <call><name pos:line="21" pos:column="19">APR_BRIGADE_SENTINEL<pos:position pos:line="21" pos:column="39"/></name><argument_list pos:line="21" pos:column="39">(<argument><expr><name pos:line="21" pos:column="40">b<pos:position pos:line="21" pos:column="41"/></name></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="43"/></condition>
             <incr><expr><name pos:line="22" pos:column="14">e<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <call><name pos:line="22" pos:column="18">APR_BUCKET_NEXT<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">(<argument><expr><name pos:line="22" pos:column="34">e<pos:position pos:line="22" pos:column="35"/></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr></incr>)<pos:position pos:line="22" pos:column="37"/></control>
        <block pos:line="23" pos:column="9">{
            <if pos:line="24" pos:column="13">if <condition pos:line="24" pos:column="16">(<expr><call><name pos:line="24" pos:column="17">APR_BUCKET_IS_EOS<pos:position pos:line="24" pos:column="34"/></name><argument_list pos:line="24" pos:column="34">(<argument><expr><name pos:line="24" pos:column="35">e<pos:position pos:line="24" pos:column="36"/></name></expr></argument>)<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="38"/></condition><then pos:line="24" pos:column="38"> <block pos:line="24" pos:column="39">{
                <comment type="block" pos:line="25" pos:column="17">/* there shouldn't be anything after the eos */</comment>
                <expr_stmt><expr><name pos:line="26" pos:column="17">eos<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">e<pos:position pos:line="26" pos:column="24"/></name></expr>;<pos:position pos:line="26" pos:column="25"/></expr_stmt>
                <break pos:line="27" pos:column="17">break;<pos:position pos:line="27" pos:column="23"/></break>
            }<pos:position pos:line="28" pos:column="14"/></block></then></if>
            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><call><name pos:line="29" pos:column="17">AP_BUCKET_IS_ERROR<pos:position pos:line="29" pos:column="35"/></name><argument_list pos:line="29" pos:column="35">(<argument><expr><name pos:line="29" pos:column="36">e<pos:position pos:line="29" pos:column="37"/></name></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call>
                <operator pos:line="30" pos:column="17">&amp;&amp;<pos:position pos:line="30" pos:column="27"/></operator> <operator pos:line="30" pos:column="20">(<pos:position pos:line="30" pos:column="21"/></operator><operator pos:line="30" pos:column="21">(<pos:position pos:line="30" pos:column="22"/></operator><operator pos:line="30" pos:column="22">(<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="23">ap_bucket_error<pos:position pos:line="30" pos:column="38"/></name> <operator pos:line="30" pos:column="39">*<pos:position pos:line="30" pos:column="40"/></operator><operator pos:line="30" pos:column="40">)<pos:position pos:line="30" pos:column="41"/></operator><operator pos:line="30" pos:column="41">(<pos:position pos:line="30" pos:column="42"/></operator><name><name pos:line="30" pos:column="42">e<pos:position pos:line="30" pos:column="43"/></name><operator pos:line="30" pos:column="43">-&gt;<pos:position pos:line="30" pos:column="48"/></operator><name pos:line="30" pos:column="45">data<pos:position pos:line="30" pos:column="49"/></name></name><operator pos:line="30" pos:column="49">)<pos:position pos:line="30" pos:column="50"/></operator><operator pos:line="30" pos:column="50">)<pos:position pos:line="30" pos:column="51"/></operator><operator pos:line="30" pos:column="51">-&gt;<pos:position pos:line="30" pos:column="56"/></operator><name pos:line="30" pos:column="53">status<pos:position pos:line="30" pos:column="59"/></name>
                    <operator pos:line="31" pos:column="21">==<pos:position pos:line="31" pos:column="23"/></operator> <name pos:line="31" pos:column="24">HTTP_BAD_GATEWAY<pos:position pos:line="31" pos:column="40"/></name><operator pos:line="31" pos:column="40">)<pos:position pos:line="31" pos:column="41"/></operator></expr>)<pos:position pos:line="31" pos:column="42"/></condition><then pos:line="31" pos:column="42"> <block pos:line="31" pos:column="43">{
                <comment type="block" pos:line="32" pos:column="17">/*
                 * We had a broken backend. Memorize this in the filter
                 * context.
                 */</comment>
                <expr_stmt><expr><name><name pos:line="36" pos:column="17">f<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">-&gt;<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="20">ctx<pos:position pos:line="36" pos:column="23"/></name></name> <operator pos:line="36" pos:column="24">=<pos:position pos:line="36" pos:column="25"/></operator> <operator pos:line="36" pos:column="26">&amp;<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="27">bad_gateway_seen<pos:position pos:line="36" pos:column="43"/></name></expr>;<pos:position pos:line="36" pos:column="44"/></expr_stmt>
                <continue pos:line="37" pos:column="17">continue;<pos:position pos:line="37" pos:column="26"/></continue>
            }<pos:position pos:line="38" pos:column="14"/></block></then></if>
            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><call><name pos:line="39" pos:column="17">APR_BUCKET_IS_FLUSH<pos:position pos:line="39" pos:column="36"/></name><argument_list pos:line="39" pos:column="36">(<argument><expr><name pos:line="39" pos:column="37">e<pos:position pos:line="39" pos:column="38"/></name></expr></argument>)<pos:position pos:line="39" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="40"/></condition><then pos:line="39" pos:column="40"> <block pos:line="39" pos:column="41">{
                <expr_stmt><expr><name pos:line="40" pos:column="17">flush<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">=<pos:position pos:line="40" pos:column="24"/></operator> <name pos:line="40" pos:column="25">e<pos:position pos:line="40" pos:column="26"/></name></expr>;<pos:position pos:line="40" pos:column="27"/></expr_stmt>
                <if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">e<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">!=<pos:position pos:line="41" pos:column="25"/></operator> <call><name pos:line="41" pos:column="26">APR_BRIGADE_LAST<pos:position pos:line="41" pos:column="42"/></name><argument_list pos:line="41" pos:column="42">(<argument><expr><name pos:line="41" pos:column="43">b<pos:position pos:line="41" pos:column="44"/></name></expr></argument>)<pos:position pos:line="41" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="46"/></condition><then pos:line="41" pos:column="46"> <block pos:line="41" pos:column="47">{
                    <expr_stmt><expr><name pos:line="42" pos:column="21">more<pos:position pos:line="42" pos:column="25"/></name> <operator pos:line="42" pos:column="26">=<pos:position pos:line="42" pos:column="27"/></operator> <call><name pos:line="42" pos:column="28">apr_brigade_split<pos:position pos:line="42" pos:column="45"/></name><argument_list pos:line="42" pos:column="45">(<argument><expr><name pos:line="42" pos:column="46">b<pos:position pos:line="42" pos:column="47"/></name></expr></argument>, <argument><expr><call><name pos:line="42" pos:column="49">APR_BUCKET_NEXT<pos:position pos:line="42" pos:column="64"/></name><argument_list pos:line="42" pos:column="64">(<argument><expr><name pos:line="42" pos:column="65">e<pos:position pos:line="42" pos:column="66"/></name></expr></argument>)<pos:position pos:line="42" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="69"/></expr_stmt>
                }<pos:position pos:line="43" pos:column="18"/></block></then></if>
                <break pos:line="44" pos:column="17">break;<pos:position pos:line="44" pos:column="23"/></break>
            }<pos:position pos:line="45" pos:column="14"/></block></then>
            <elseif pos:line="46" pos:column="13">else <if pos:line="46" pos:column="18">if <condition pos:line="46" pos:column="21">(<expr><name><name pos:line="46" pos:column="22">e<pos:position pos:line="46" pos:column="23"/></name><operator pos:line="46" pos:column="23">-&gt;<pos:position pos:line="46" pos:column="28"/></operator><name pos:line="46" pos:column="25">length<pos:position pos:line="46" pos:column="31"/></name></name> <operator pos:line="46" pos:column="32">==<pos:position pos:line="46" pos:column="34"/></operator> <operator pos:line="46" pos:column="35">(<pos:position pos:line="46" pos:column="36"/></operator><name pos:line="46" pos:column="36">apr_size_t<pos:position pos:line="46" pos:column="46"/></name><operator pos:line="46" pos:column="46">)<pos:position pos:line="46" pos:column="47"/></operator><operator pos:line="46" pos:column="47">-<pos:position pos:line="46" pos:column="48"/></operator><literal type="number" pos:line="46" pos:column="48">1<pos:position pos:line="46" pos:column="49"/></literal></expr>)<pos:position pos:line="46" pos:column="50"/></condition><then pos:line="46" pos:column="50"> <block pos:line="46" pos:column="51">{
                <comment type="block" pos:line="47" pos:column="17">/* unknown amount of data (e.g. a pipe) */</comment>
                <decl_stmt><decl><type><specifier pos:line="48" pos:column="17">const<pos:position pos:line="48" pos:column="22"/></specifier> <name pos:line="48" pos:column="23">char<pos:position pos:line="48" pos:column="27"/></name> <modifier pos:line="48" pos:column="28">*<pos:position pos:line="48" pos:column="29"/></modifier></type><name pos:line="48" pos:column="29">data<pos:position pos:line="48" pos:column="33"/></name></decl>;<pos:position pos:line="48" pos:column="34"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="49" pos:column="17">apr_size_t<pos:position pos:line="49" pos:column="27"/></name></type> <name pos:line="49" pos:column="28">len<pos:position pos:line="49" pos:column="31"/></name></decl>;<pos:position pos:line="49" pos:column="32"/></decl_stmt>

                <expr_stmt><expr><name pos:line="51" pos:column="17">rv<pos:position pos:line="51" pos:column="19"/></name> <operator pos:line="51" pos:column="20">=<pos:position pos:line="51" pos:column="21"/></operator> <call><name pos:line="51" pos:column="22">apr_bucket_read<pos:position pos:line="51" pos:column="37"/></name><argument_list pos:line="51" pos:column="37">(<argument><expr><name pos:line="51" pos:column="38">e<pos:position pos:line="51" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="41">&amp;<pos:position pos:line="51" pos:column="46"/></operator><name pos:line="51" pos:column="42">data<pos:position pos:line="51" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="48">&amp;<pos:position pos:line="51" pos:column="53"/></operator><name pos:line="51" pos:column="49">len<pos:position pos:line="51" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="54">APR_BLOCK_READ<pos:position pos:line="51" pos:column="68"/></name></expr></argument>)<pos:position pos:line="51" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="70"/></expr_stmt>
                <if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">rv<pos:position pos:line="52" pos:column="23"/></name> <operator pos:line="52" pos:column="24">!=<pos:position pos:line="52" pos:column="26"/></operator> <name pos:line="52" pos:column="27">APR_SUCCESS<pos:position pos:line="52" pos:column="38"/></name></expr>)<pos:position pos:line="52" pos:column="39"/></condition><then pos:line="52" pos:column="39"> <block pos:line="52" pos:column="40">{
                    <return pos:line="53" pos:column="21">return <expr><name pos:line="53" pos:column="28">rv<pos:position pos:line="53" pos:column="30"/></name></expr>;<pos:position pos:line="53" pos:column="31"/></return>
                }<pos:position pos:line="54" pos:column="18"/></block></then></if>
                <if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><name pos:line="55" pos:column="21">len<pos:position pos:line="55" pos:column="24"/></name> <operator pos:line="55" pos:column="25">&gt;<pos:position pos:line="55" pos:column="29"/></operator> <literal type="number" pos:line="55" pos:column="27">0<pos:position pos:line="55" pos:column="28"/></literal></expr>)<pos:position pos:line="55" pos:column="29"/></condition><then pos:line="55" pos:column="29"> <block pos:line="55" pos:column="30">{
                    <comment type="block" pos:line="56" pos:column="21">/*
                     * There may be a new next bucket representing the
                     * rest of the data stream on which a read() may
                     * block so we pass down what we have so far.
                     */</comment>
                    <expr_stmt><expr><name pos:line="61" pos:column="21">bytes<pos:position pos:line="61" pos:column="26"/></name> <operator pos:line="61" pos:column="27">+=<pos:position pos:line="61" pos:column="29"/></operator> <name pos:line="61" pos:column="30">len<pos:position pos:line="61" pos:column="33"/></name></expr>;<pos:position pos:line="61" pos:column="34"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="62" pos:column="21">more<pos:position pos:line="62" pos:column="25"/></name> <operator pos:line="62" pos:column="26">=<pos:position pos:line="62" pos:column="27"/></operator> <call><name pos:line="62" pos:column="28">apr_brigade_split<pos:position pos:line="62" pos:column="45"/></name><argument_list pos:line="62" pos:column="45">(<argument><expr><name pos:line="62" pos:column="46">b<pos:position pos:line="62" pos:column="47"/></name></expr></argument>, <argument><expr><call><name pos:line="62" pos:column="49">APR_BUCKET_NEXT<pos:position pos:line="62" pos:column="64"/></name><argument_list pos:line="62" pos:column="64">(<argument><expr><name pos:line="62" pos:column="65">e<pos:position pos:line="62" pos:column="66"/></name></expr></argument>)<pos:position pos:line="62" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="62" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="69"/></expr_stmt>
                    <break pos:line="63" pos:column="21">break;<pos:position pos:line="63" pos:column="27"/></break>
                }<pos:position pos:line="64" pos:column="18"/></block></then>
                <else pos:line="65" pos:column="17">else <block pos:line="65" pos:column="22">{
                    <comment type="block" pos:line="66" pos:column="21">/* If there was nothing in this bucket then we can
                     * safely move on to the next one without pausing
                     * to pass down what we have counted up so far.
                     */</comment>
                    <continue pos:line="70" pos:column="21">continue;<pos:position pos:line="70" pos:column="30"/></continue>
                }<pos:position pos:line="71" pos:column="18"/></block></else></if>
            }<pos:position pos:line="72" pos:column="14"/></block></then></if></elseif>
            <else pos:line="73" pos:column="13">else <block pos:line="73" pos:column="18">{
                <expr_stmt><expr><name pos:line="74" pos:column="17">bytes<pos:position pos:line="74" pos:column="22"/></name> <operator pos:line="74" pos:column="23">+=<pos:position pos:line="74" pos:column="25"/></operator> <name><name pos:line="74" pos:column="26">e<pos:position pos:line="74" pos:column="27"/></name><operator pos:line="74" pos:column="27">-&gt;<pos:position pos:line="74" pos:column="32"/></operator><name pos:line="74" pos:column="29">length<pos:position pos:line="74" pos:column="35"/></name></name></expr>;<pos:position pos:line="74" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="75" pos:column="14"/></block></else></if>
        }<pos:position pos:line="76" pos:column="10"/></block></for>

        <comment type="block" pos:line="78" pos:column="9">/*
         * XXX: if there aren't very many bytes at this point it may
         * be a good idea to set them aside and return for more,
         * unless we haven't finished counting this brigade yet.
         */</comment>
        <comment type="block" pos:line="83" pos:column="9">/* if there are content bytes, then wrap them in a chunk */</comment>
        <if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><name pos:line="84" pos:column="13">bytes<pos:position pos:line="84" pos:column="18"/></name> <operator pos:line="84" pos:column="19">&gt;<pos:position pos:line="84" pos:column="23"/></operator> <literal type="number" pos:line="84" pos:column="21">0<pos:position pos:line="84" pos:column="22"/></literal></expr>)<pos:position pos:line="84" pos:column="23"/></condition><then pos:line="84" pos:column="23"> <block pos:line="84" pos:column="24">{
            <decl_stmt><decl><type><name pos:line="85" pos:column="13">apr_size_t<pos:position pos:line="85" pos:column="23"/></name></type> <name pos:line="85" pos:column="24">hdr_len<pos:position pos:line="85" pos:column="31"/></name></decl>;<pos:position pos:line="85" pos:column="32"/></decl_stmt>
            <comment type="block" pos:line="86" pos:column="13">/*
             * Insert the chunk header, specifying the number of bytes in
             * the chunk.
             */</comment>
            <expr_stmt><expr><name pos:line="90" pos:column="13">hdr_len<pos:position pos:line="90" pos:column="20"/></name> <operator pos:line="90" pos:column="21">=<pos:position pos:line="90" pos:column="22"/></operator> <macro><name pos:line="90" pos:column="23">apr_snprintf<pos:position pos:line="90" pos:column="35"/></name><argument_list pos:line="90" pos:column="35">(<argument pos:line="90" pos:column="36">chunk_hdr<pos:position pos:line="90" pos:column="45"/></argument>, <argument pos:line="90" pos:column="47">sizeof(chunk_hdr)<pos:position pos:line="90" pos:column="64"/></argument>,
                                   <argument><literal type="string" pos:line="91" pos:column="36">"%"<pos:position pos:line="91" pos:column="39"/></literal> APR_UINT64_T_HEX_FMT CRLF<pos:position pos:line="91" pos:column="65"/></argument>, <argument pos:line="91" pos:column="67">(apr_uint64_t)bytes<pos:position pos:line="91" pos:column="86"/></argument>)<pos:position pos:line="91" pos:column="87"/></argument_list></macro></expr>;<pos:position pos:line="91" pos:column="88"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="92" pos:column="13">ap_xlate_proto_to_ascii<pos:position pos:line="92" pos:column="36"/></name><argument_list pos:line="92" pos:column="36">(<argument><expr><name pos:line="92" pos:column="37">chunk_hdr<pos:position pos:line="92" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="48">hdr_len<pos:position pos:line="92" pos:column="55"/></name></expr></argument>)<pos:position pos:line="92" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><name pos:line="93" pos:column="13">e<pos:position pos:line="93" pos:column="14"/></name> <operator pos:line="93" pos:column="15">=<pos:position pos:line="93" pos:column="16"/></operator> <call><name pos:line="93" pos:column="17">apr_bucket_transient_create<pos:position pos:line="93" pos:column="44"/></name><argument_list pos:line="93" pos:column="44">(<argument><expr><name pos:line="93" pos:column="45">chunk_hdr<pos:position pos:line="93" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="56">hdr_len<pos:position pos:line="93" pos:column="63"/></name></expr></argument>,
                                            <argument><expr><name><name pos:line="94" pos:column="45">c<pos:position pos:line="94" pos:column="46"/></name><operator pos:line="94" pos:column="46">-&gt;<pos:position pos:line="94" pos:column="51"/></operator><name pos:line="94" pos:column="48">bucket_alloc<pos:position pos:line="94" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="94" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="62"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="95" pos:column="13">APR_BRIGADE_INSERT_HEAD<pos:position pos:line="95" pos:column="36"/></name><argument_list pos:line="95" pos:column="36">(<argument><expr><name pos:line="95" pos:column="37">b<pos:position pos:line="95" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="40">e<pos:position pos:line="95" pos:column="41"/></name></expr></argument>)<pos:position pos:line="95" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="43"/></expr_stmt>

            <comment type="block" pos:line="97" pos:column="13">/*
             * Insert the end-of-chunk CRLF before an EOS or
             * FLUSH bucket, or appended to the brigade
             */</comment>
            <expr_stmt><expr><name pos:line="101" pos:column="13">e<pos:position pos:line="101" pos:column="14"/></name> <operator pos:line="101" pos:column="15">=<pos:position pos:line="101" pos:column="16"/></operator> <call><name pos:line="101" pos:column="17">apr_bucket_immortal_create<pos:position pos:line="101" pos:column="43"/></name><argument_list pos:line="101" pos:column="43">(<argument><expr><name pos:line="101" pos:column="44">ASCII_CRLF<pos:position pos:line="101" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="101" pos:column="56">2<pos:position pos:line="101" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="59">c<pos:position pos:line="101" pos:column="60"/></name><operator pos:line="101" pos:column="60">-&gt;<pos:position pos:line="101" pos:column="65"/></operator><name pos:line="101" pos:column="62">bucket_alloc<pos:position pos:line="101" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="76"/></expr_stmt>
            <if pos:line="102" pos:column="13">if <condition pos:line="102" pos:column="16">(<expr><name pos:line="102" pos:column="17">eos<pos:position pos:line="102" pos:column="20"/></name> <operator pos:line="102" pos:column="21">!=<pos:position pos:line="102" pos:column="23"/></operator> <name pos:line="102" pos:column="24">NULL<pos:position pos:line="102" pos:column="28"/></name></expr>)<pos:position pos:line="102" pos:column="29"/></condition><then pos:line="102" pos:column="29"> <block pos:line="102" pos:column="30">{
                <expr_stmt><expr><call><name pos:line="103" pos:column="17">APR_BUCKET_INSERT_BEFORE<pos:position pos:line="103" pos:column="41"/></name><argument_list pos:line="103" pos:column="41">(<argument><expr><name pos:line="103" pos:column="42">eos<pos:position pos:line="103" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="47">e<pos:position pos:line="103" pos:column="48"/></name></expr></argument>)<pos:position pos:line="103" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="50"/></expr_stmt>
            }<pos:position pos:line="104" pos:column="14"/></block></then>
            <elseif pos:line="105" pos:column="13">else <if pos:line="105" pos:column="18">if <condition pos:line="105" pos:column="21">(<expr><name pos:line="105" pos:column="22">flush<pos:position pos:line="105" pos:column="27"/></name> <operator pos:line="105" pos:column="28">!=<pos:position pos:line="105" pos:column="30"/></operator> <name pos:line="105" pos:column="31">NULL<pos:position pos:line="105" pos:column="35"/></name></expr>)<pos:position pos:line="105" pos:column="36"/></condition><then pos:line="105" pos:column="36"> <block pos:line="105" pos:column="37">{
                <expr_stmt><expr><call><name pos:line="106" pos:column="17">APR_BUCKET_INSERT_BEFORE<pos:position pos:line="106" pos:column="41"/></name><argument_list pos:line="106" pos:column="41">(<argument><expr><name pos:line="106" pos:column="42">flush<pos:position pos:line="106" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="49">e<pos:position pos:line="106" pos:column="50"/></name></expr></argument>)<pos:position pos:line="106" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="52"/></expr_stmt>
            }<pos:position pos:line="107" pos:column="14"/></block></then></if></elseif>
            <else pos:line="108" pos:column="13">else <block pos:line="108" pos:column="18">{
                <expr_stmt><expr><call><name pos:line="109" pos:column="17">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="109" pos:column="40"/></name><argument_list pos:line="109" pos:column="40">(<argument><expr><name pos:line="109" pos:column="41">b<pos:position pos:line="109" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="44">e<pos:position pos:line="109" pos:column="45"/></name></expr></argument>)<pos:position pos:line="109" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="47"/></expr_stmt>
            }<pos:position pos:line="110" pos:column="14"/></block></else></if>
        }<pos:position pos:line="111" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="113" pos:column="9">/* RFC 2616, Section 3.6.1
         *
         * If there is an EOS bucket, then prefix it with:
         *   1) the last-chunk marker ("0" CRLF)
         *   2) the trailer
         *   3) the end-of-chunked body CRLF
         *
         * We only do this if we have not seen an error bucket with
         * status HTTP_BAD_GATEWAY. We have memorized an
         * error bucket that we had seen in the filter context.
         * The error bucket with status HTTP_BAD_GATEWAY indicates that the
         * connection to the backend (mod_proxy) broke in the middle of the
         * response. In order to signal the client that something went wrong
         * we do not create the last-chunk marker and set c-&gt;keepalive to
         * AP_CONN_CLOSE in the core output filter.
         *
         * XXX: it would be nice to combine this with the end-of-chunk
         * marker above, but this is a bit more straight-forward for
         * now.
         */</comment>
        <if pos:line="133" pos:column="9">if <condition pos:line="133" pos:column="12">(<expr><name pos:line="133" pos:column="13">eos<pos:position pos:line="133" pos:column="16"/></name> <operator pos:line="133" pos:column="17">&amp;&amp;<pos:position pos:line="133" pos:column="27"/></operator> <operator pos:line="133" pos:column="20">!<pos:position pos:line="133" pos:column="21"/></operator><name><name pos:line="133" pos:column="21">f<pos:position pos:line="133" pos:column="22"/></name><operator pos:line="133" pos:column="22">-&gt;<pos:position pos:line="133" pos:column="27"/></operator><name pos:line="133" pos:column="24">ctx<pos:position pos:line="133" pos:column="27"/></name></name></expr>)<pos:position pos:line="133" pos:column="28"/></condition><then pos:line="133" pos:column="28"> <block pos:line="133" pos:column="29">{
            <comment type="block" pos:line="134" pos:column="13">/* XXX: (2) trailers ... does not yet exist */</comment>
            <expr_stmt><expr><name pos:line="135" pos:column="13">e<pos:position pos:line="135" pos:column="14"/></name> <operator pos:line="135" pos:column="15">=<pos:position pos:line="135" pos:column="16"/></operator> <macro><name pos:line="135" pos:column="17">apr_bucket_immortal_create<pos:position pos:line="135" pos:column="43"/></name><argument_list pos:line="135" pos:column="43">(<argument pos:line="135" pos:column="44">ASCII_ZERO ASCII_CRLF
                                           <comment type="block" pos:line="136" pos:column="44">/* &lt;trailers&gt; */</comment>
                                           ASCII_CRLF<pos:position pos:line="137" pos:column="54"/></argument>, <argument><literal type="number" pos:line="137" pos:column="56">5<pos:position pos:line="137" pos:column="57"/></literal></argument>, <argument pos:line="137" pos:column="59">c-&gt;bucket_alloc<pos:position pos:line="137" pos:column="74"/></argument>)<pos:position pos:line="137" pos:column="75"/></argument_list></macro></expr>;<pos:position pos:line="137" pos:column="76"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="138" pos:column="13">APR_BUCKET_INSERT_BEFORE<pos:position pos:line="138" pos:column="37"/></name><argument_list pos:line="138" pos:column="37">(<argument><expr><name pos:line="138" pos:column="38">eos<pos:position pos:line="138" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="43">e<pos:position pos:line="138" pos:column="44"/></name></expr></argument>)<pos:position pos:line="138" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="139" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="141" pos:column="9">/* pass the brigade to the next filter. */</comment>
        <expr_stmt><expr><name pos:line="142" pos:column="9">rv<pos:position pos:line="142" pos:column="11"/></name> <operator pos:line="142" pos:column="12">=<pos:position pos:line="142" pos:column="13"/></operator> <call><name pos:line="142" pos:column="14">ap_pass_brigade<pos:position pos:line="142" pos:column="29"/></name><argument_list pos:line="142" pos:column="29">(<argument><expr><name><name pos:line="142" pos:column="30">f<pos:position pos:line="142" pos:column="31"/></name><operator pos:line="142" pos:column="31">-&gt;<pos:position pos:line="142" pos:column="36"/></operator><name pos:line="142" pos:column="33">next<pos:position pos:line="142" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="39">b<pos:position pos:line="142" pos:column="40"/></name></expr></argument>)<pos:position pos:line="142" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="42"/></expr_stmt>
        <if pos:line="143" pos:column="9">if <condition pos:line="143" pos:column="12">(<expr><name pos:line="143" pos:column="13">rv<pos:position pos:line="143" pos:column="15"/></name> <operator pos:line="143" pos:column="16">!=<pos:position pos:line="143" pos:column="18"/></operator> <name pos:line="143" pos:column="19">APR_SUCCESS<pos:position pos:line="143" pos:column="30"/></name> <operator pos:line="143" pos:column="31">||<pos:position pos:line="143" pos:column="33"/></operator> <name pos:line="143" pos:column="34">eos<pos:position pos:line="143" pos:column="37"/></name> <operator pos:line="143" pos:column="38">!=<pos:position pos:line="143" pos:column="40"/></operator> <name pos:line="143" pos:column="41">NULL<pos:position pos:line="143" pos:column="45"/></name></expr>)<pos:position pos:line="143" pos:column="46"/></condition><then pos:line="143" pos:column="46"> <block pos:line="143" pos:column="47">{
            <return pos:line="144" pos:column="13">return <expr><name pos:line="144" pos:column="20">rv<pos:position pos:line="144" pos:column="22"/></name></expr>;<pos:position pos:line="144" pos:column="23"/></return>
        }<pos:position pos:line="145" pos:column="10"/></block></then></if>
    }<pos:position pos:line="146" pos:column="6"/></block></for>
    <return pos:line="147" pos:column="5">return <expr><name pos:line="147" pos:column="12">APR_SUCCESS<pos:position pos:line="147" pos:column="23"/></name></expr>;<pos:position pos:line="147" pos:column="24"/></return>
}<pos:position pos:line="148" pos:column="2"/></block></function></unit>
