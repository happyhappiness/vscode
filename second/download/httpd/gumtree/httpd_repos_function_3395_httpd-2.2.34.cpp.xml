<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3395_httpd-2.2.34.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name> <name pos:line="1" pos:column="12">PTRCALL<pos:position pos:line="1" pos:column="19"/></name>
<name pos:line="2" pos:column="1">PREFIX<pos:position pos:line="2" pos:column="7"/></name></type>(<name pos:line="2" pos:column="8">sameName<pos:position pos:line="2" pos:column="16"/></name>)<parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name pos:line="2" pos:column="24">ENCODING<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">enc<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <name pos:line="2" pos:column="45">char<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">ptr1<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="57">const<pos:position pos:line="2" pos:column="62"/></specifier> <name pos:line="2" pos:column="63">char<pos:position pos:line="2" pos:column="67"/></name> <modifier pos:line="2" pos:column="68">*<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="69">ptr2<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="74"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <for pos:line="4" pos:column="3">for <control pos:line="4" pos:column="7">(<init pos:line="4" pos:column="8">;<pos:position pos:line="4" pos:column="9"/></init><condition pos:line="4" pos:column="9">;<pos:position pos:line="4" pos:column="10"/></condition><incr/>)<pos:position pos:line="4" pos:column="11"/></control> <block pos:line="4" pos:column="12">{
    <switch pos:line="5" pos:column="5">switch <condition pos:line="5" pos:column="12">(<expr><call><name pos:line="5" pos:column="13">BYTE_TYPE<pos:position pos:line="5" pos:column="22"/></name><argument_list pos:line="5" pos:column="22">(<argument><expr><name pos:line="5" pos:column="23">enc<pos:position pos:line="5" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="28">ptr1<pos:position pos:line="5" pos:column="32"/></name></expr></argument>)<pos:position pos:line="5" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="34"/></condition> <block pos:line="5" pos:column="35">{
<cpp:define pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">define<pos:position pos:line="6" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="6" pos:column="9">LEAD_CASE<pos:position pos:line="6" pos:column="18"/></name><parameter_list pos:line="6" pos:column="18">(<parameter><type><name pos:line="6" pos:column="19">n<pos:position pos:line="6" pos:column="20"/></name></type></parameter>)<pos:position pos:line="6" pos:column="21"/></parameter_list></cpp:macro> \
    <cpp:value pos:line="7" pos:column="5">case BT_LEAD ## n: \
      if (*ptr1++ != *ptr2++) \
        return 0;<pos:position pos:line="9" pos:column="18"/></cpp:value></cpp:define>
    <macro><name pos:line="10" pos:column="5">LEAD_CASE<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><literal type="number" pos:line="10" pos:column="15">4<pos:position pos:line="10" pos:column="16"/></literal></argument>)<pos:position pos:line="10" pos:column="17"/></argument_list></macro> <macro><name pos:line="10" pos:column="18">LEAD_CASE<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><literal type="number" pos:line="10" pos:column="28">3<pos:position pos:line="10" pos:column="29"/></literal></argument>)<pos:position pos:line="10" pos:column="30"/></argument_list></macro> <macro><name pos:line="10" pos:column="31">LEAD_CASE<pos:position pos:line="10" pos:column="40"/></name><argument_list pos:line="10" pos:column="40">(<argument><literal type="number" pos:line="10" pos:column="41">2<pos:position pos:line="10" pos:column="42"/></literal></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></macro>
<cpp:undef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">undef<pos:position pos:line="11" pos:column="7"/></cpp:directive> <name pos:line="11" pos:column="8">LEAD_CASE<pos:position pos:line="11" pos:column="17"/></name></cpp:undef>
      <comment type="block" pos:line="12" pos:column="7">/* fall through */</comment>
      <if pos:line="13" pos:column="7">if <condition pos:line="13" pos:column="10">(<expr><operator pos:line="13" pos:column="11">*<pos:position pos:line="13" pos:column="12"/></operator><name pos:line="13" pos:column="12">ptr1<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">++<pos:position pos:line="13" pos:column="18"/></operator> <operator pos:line="13" pos:column="19">!=<pos:position pos:line="13" pos:column="21"/></operator> <operator pos:line="13" pos:column="22">*<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="23">ptr2<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">++<pos:position pos:line="13" pos:column="29"/></operator></expr>)<pos:position pos:line="13" pos:column="30"/></condition><then pos:line="13" pos:column="30">
        <block type="pseudo"><return pos:line="14" pos:column="9">return <expr><literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></return></block></then></if>
      <break pos:line="15" pos:column="7">break;<pos:position pos:line="15" pos:column="13"/></break>
    <case pos:line="16" pos:column="5">case <expr><name pos:line="16" pos:column="10">BT_NONASCII<pos:position pos:line="16" pos:column="21"/></name></expr>:<pos:position pos:line="16" pos:column="22"/></case>
    <case pos:line="17" pos:column="5">case <expr><name pos:line="17" pos:column="10">BT_NMSTRT<pos:position pos:line="17" pos:column="19"/></name></expr>:<pos:position pos:line="17" pos:column="20"/></case>
<cpp:ifdef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifdef<pos:position pos:line="18" pos:column="7"/></cpp:directive> <name pos:line="18" pos:column="8">XML_NS<pos:position pos:line="18" pos:column="14"/></name></cpp:ifdef>
    <case pos:line="19" pos:column="5">case <expr><name pos:line="19" pos:column="10">BT_COLON<pos:position pos:line="19" pos:column="18"/></name></expr>:<pos:position pos:line="19" pos:column="19"/></case>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>
    <case pos:line="21" pos:column="5">case <expr><name pos:line="21" pos:column="10">BT_HEX<pos:position pos:line="21" pos:column="16"/></name></expr>:<pos:position pos:line="21" pos:column="17"/></case>
    <case pos:line="22" pos:column="5">case <expr><name pos:line="22" pos:column="10">BT_DIGIT<pos:position pos:line="22" pos:column="18"/></name></expr>:<pos:position pos:line="22" pos:column="19"/></case>
    <case pos:line="23" pos:column="5">case <expr><name pos:line="23" pos:column="10">BT_NAME<pos:position pos:line="23" pos:column="17"/></name></expr>:<pos:position pos:line="23" pos:column="18"/></case>
    <case pos:line="24" pos:column="5">case <expr><name pos:line="24" pos:column="10">BT_MINUS<pos:position pos:line="24" pos:column="18"/></name></expr>:<pos:position pos:line="24" pos:column="19"/></case>
      <if pos:line="25" pos:column="7">if <condition pos:line="25" pos:column="10">(<expr><operator pos:line="25" pos:column="11">*<pos:position pos:line="25" pos:column="12"/></operator><name pos:line="25" pos:column="12">ptr2<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">++<pos:position pos:line="25" pos:column="18"/></operator> <operator pos:line="25" pos:column="19">!=<pos:position pos:line="25" pos:column="21"/></operator> <operator pos:line="25" pos:column="22">*<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="23">ptr1<pos:position pos:line="25" pos:column="27"/></name><operator pos:line="25" pos:column="27">++<pos:position pos:line="25" pos:column="29"/></operator></expr>)<pos:position pos:line="25" pos:column="30"/></condition><then pos:line="25" pos:column="30">
        <block type="pseudo"><return pos:line="26" pos:column="9">return <expr><literal type="number" pos:line="26" pos:column="16">0<pos:position pos:line="26" pos:column="17"/></literal></expr>;<pos:position pos:line="26" pos:column="18"/></return></block></then></if>
      <if pos:line="27" pos:column="7">if <condition pos:line="27" pos:column="10">(<expr><call><name pos:line="27" pos:column="11">MINBPC<pos:position pos:line="27" pos:column="17"/></name><argument_list pos:line="27" pos:column="17">(<argument><expr><name pos:line="27" pos:column="18">enc<pos:position pos:line="27" pos:column="21"/></name></expr></argument>)<pos:position pos:line="27" pos:column="22"/></argument_list></call> <operator pos:line="27" pos:column="23">&gt;<pos:position pos:line="27" pos:column="27"/></operator> <literal type="number" pos:line="27" pos:column="25">1<pos:position pos:line="27" pos:column="26"/></literal></expr>)<pos:position pos:line="27" pos:column="27"/></condition><then pos:line="27" pos:column="27"> <block pos:line="27" pos:column="28">{
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><operator pos:line="28" pos:column="13">*<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">ptr2<pos:position pos:line="28" pos:column="18"/></name><operator pos:line="28" pos:column="18">++<pos:position pos:line="28" pos:column="20"/></operator> <operator pos:line="28" pos:column="21">!=<pos:position pos:line="28" pos:column="23"/></operator> <operator pos:line="28" pos:column="24">*<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">ptr1<pos:position pos:line="28" pos:column="29"/></name><operator pos:line="28" pos:column="29">++<pos:position pos:line="28" pos:column="31"/></operator></expr>)<pos:position pos:line="28" pos:column="32"/></condition><then pos:line="28" pos:column="32">
          <block type="pseudo"><return pos:line="29" pos:column="11">return <expr><literal type="number" pos:line="29" pos:column="18">0<pos:position pos:line="29" pos:column="19"/></literal></expr>;<pos:position pos:line="29" pos:column="20"/></return></block></then></if>
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">MINBPC<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><name pos:line="30" pos:column="20">enc<pos:position pos:line="30" pos:column="23"/></name></expr></argument>)<pos:position pos:line="30" pos:column="24"/></argument_list></call> <operator pos:line="30" pos:column="25">&gt;<pos:position pos:line="30" pos:column="29"/></operator> <literal type="number" pos:line="30" pos:column="27">2<pos:position pos:line="30" pos:column="28"/></literal></expr>)<pos:position pos:line="30" pos:column="29"/></condition><then pos:line="30" pos:column="29"> <block pos:line="30" pos:column="30">{
          <if pos:line="31" pos:column="11">if <condition pos:line="31" pos:column="14">(<expr><operator pos:line="31" pos:column="15">*<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="16">ptr2<pos:position pos:line="31" pos:column="20"/></name><operator pos:line="31" pos:column="20">++<pos:position pos:line="31" pos:column="22"/></operator> <operator pos:line="31" pos:column="23">!=<pos:position pos:line="31" pos:column="25"/></operator> <operator pos:line="31" pos:column="26">*<pos:position pos:line="31" pos:column="27"/></operator><name pos:line="31" pos:column="27">ptr1<pos:position pos:line="31" pos:column="31"/></name><operator pos:line="31" pos:column="31">++<pos:position pos:line="31" pos:column="33"/></operator></expr>)<pos:position pos:line="31" pos:column="34"/></condition><then pos:line="31" pos:column="34">
            <block type="pseudo"><return pos:line="32" pos:column="13">return <expr><literal type="number" pos:line="32" pos:column="20">0<pos:position pos:line="32" pos:column="21"/></literal></expr>;<pos:position pos:line="32" pos:column="22"/></return></block></then></if>
          <if pos:line="33" pos:column="11">if <condition pos:line="33" pos:column="14">(<expr><call><name pos:line="33" pos:column="15">MINBPC<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">enc<pos:position pos:line="33" pos:column="25"/></name></expr></argument>)<pos:position pos:line="33" pos:column="26"/></argument_list></call> <operator pos:line="33" pos:column="27">&gt;<pos:position pos:line="33" pos:column="31"/></operator> <literal type="number" pos:line="33" pos:column="29">3<pos:position pos:line="33" pos:column="30"/></literal></expr>)<pos:position pos:line="33" pos:column="31"/></condition><then pos:line="33" pos:column="31"> <block pos:line="33" pos:column="32">{
            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><operator pos:line="34" pos:column="17">*<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="18">ptr2<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">++<pos:position pos:line="34" pos:column="24"/></operator> <operator pos:line="34" pos:column="25">!=<pos:position pos:line="34" pos:column="27"/></operator> <operator pos:line="34" pos:column="28">*<pos:position pos:line="34" pos:column="29"/></operator><name pos:line="34" pos:column="29">ptr1<pos:position pos:line="34" pos:column="33"/></name><operator pos:line="34" pos:column="33">++<pos:position pos:line="34" pos:column="35"/></operator></expr>)<pos:position pos:line="34" pos:column="36"/></condition><then pos:line="34" pos:column="36">
              <block type="pseudo"><return pos:line="35" pos:column="15">return <expr><literal type="number" pos:line="35" pos:column="22">0<pos:position pos:line="35" pos:column="23"/></literal></expr>;<pos:position pos:line="35" pos:column="24"/></return></block></then></if>
          }<pos:position pos:line="36" pos:column="12"/></block></then></if>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if>
      }<pos:position pos:line="38" pos:column="8"/></block></then></if>
      <break pos:line="39" pos:column="7">break;<pos:position pos:line="39" pos:column="13"/></break>
    <default pos:line="40" pos:column="5">default:<pos:position pos:line="40" pos:column="13"/></default>
      <if pos:line="41" pos:column="7">if <condition pos:line="41" pos:column="10">(<expr><call><name pos:line="41" pos:column="11">MINBPC<pos:position pos:line="41" pos:column="17"/></name><argument_list pos:line="41" pos:column="17">(<argument><expr><name pos:line="41" pos:column="18">enc<pos:position pos:line="41" pos:column="21"/></name></expr></argument>)<pos:position pos:line="41" pos:column="22"/></argument_list></call> <operator pos:line="41" pos:column="23">==<pos:position pos:line="41" pos:column="25"/></operator> <literal type="number" pos:line="41" pos:column="26">1<pos:position pos:line="41" pos:column="27"/></literal> <operator pos:line="41" pos:column="28">&amp;&amp;<pos:position pos:line="41" pos:column="38"/></operator> <operator pos:line="41" pos:column="31">*<pos:position pos:line="41" pos:column="32"/></operator><name pos:line="41" pos:column="32">ptr1<pos:position pos:line="41" pos:column="36"/></name> <operator pos:line="41" pos:column="37">==<pos:position pos:line="41" pos:column="39"/></operator> <operator pos:line="41" pos:column="40">*<pos:position pos:line="41" pos:column="41"/></operator><name pos:line="41" pos:column="41">ptr2<pos:position pos:line="41" pos:column="45"/></name></expr>)<pos:position pos:line="41" pos:column="46"/></condition><then pos:line="41" pos:column="46">
        <block type="pseudo"><return pos:line="42" pos:column="9">return <expr><literal type="number" pos:line="42" pos:column="16">1<pos:position pos:line="42" pos:column="17"/></literal></expr>;<pos:position pos:line="42" pos:column="18"/></return></block></then></if>
      <switch pos:line="43" pos:column="7">switch <condition pos:line="43" pos:column="14">(<expr><call><name pos:line="43" pos:column="15">BYTE_TYPE<pos:position pos:line="43" pos:column="24"/></name><argument_list pos:line="43" pos:column="24">(<argument><expr><name pos:line="43" pos:column="25">enc<pos:position pos:line="43" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="30">ptr2<pos:position pos:line="43" pos:column="34"/></name></expr></argument>)<pos:position pos:line="43" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="36"/></condition> <block pos:line="43" pos:column="37">{
      <case pos:line="44" pos:column="7">case <expr><name pos:line="44" pos:column="12">BT_LEAD2<pos:position pos:line="44" pos:column="20"/></name></expr>:<pos:position pos:line="44" pos:column="21"/></case>
      <case pos:line="45" pos:column="7">case <expr><name pos:line="45" pos:column="12">BT_LEAD3<pos:position pos:line="45" pos:column="20"/></name></expr>:<pos:position pos:line="45" pos:column="21"/></case>
      <case pos:line="46" pos:column="7">case <expr><name pos:line="46" pos:column="12">BT_LEAD4<pos:position pos:line="46" pos:column="20"/></name></expr>:<pos:position pos:line="46" pos:column="21"/></case>
      <case pos:line="47" pos:column="7">case <expr><name pos:line="47" pos:column="12">BT_NONASCII<pos:position pos:line="47" pos:column="23"/></name></expr>:<pos:position pos:line="47" pos:column="24"/></case>
      <case pos:line="48" pos:column="7">case <expr><name pos:line="48" pos:column="12">BT_NMSTRT<pos:position pos:line="48" pos:column="21"/></name></expr>:<pos:position pos:line="48" pos:column="22"/></case>
<cpp:ifdef pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">ifdef<pos:position pos:line="49" pos:column="7"/></cpp:directive> <name pos:line="49" pos:column="8">XML_NS<pos:position pos:line="49" pos:column="14"/></name></cpp:ifdef>
      <case pos:line="50" pos:column="7">case <expr><name pos:line="50" pos:column="12">BT_COLON<pos:position pos:line="50" pos:column="20"/></name></expr>:<pos:position pos:line="50" pos:column="21"/></case>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif>
      <case pos:line="52" pos:column="7">case <expr><name pos:line="52" pos:column="12">BT_HEX<pos:position pos:line="52" pos:column="18"/></name></expr>:<pos:position pos:line="52" pos:column="19"/></case>
      <case pos:line="53" pos:column="7">case <expr><name pos:line="53" pos:column="12">BT_DIGIT<pos:position pos:line="53" pos:column="20"/></name></expr>:<pos:position pos:line="53" pos:column="21"/></case>
      <case pos:line="54" pos:column="7">case <expr><name pos:line="54" pos:column="12">BT_NAME<pos:position pos:line="54" pos:column="19"/></name></expr>:<pos:position pos:line="54" pos:column="20"/></case>
      <case pos:line="55" pos:column="7">case <expr><name pos:line="55" pos:column="12">BT_MINUS<pos:position pos:line="55" pos:column="20"/></name></expr>:<pos:position pos:line="55" pos:column="21"/></case>
        <return pos:line="56" pos:column="9">return <expr><literal type="number" pos:line="56" pos:column="16">0<pos:position pos:line="56" pos:column="17"/></literal></expr>;<pos:position pos:line="56" pos:column="18"/></return>
      <default pos:line="57" pos:column="7">default:<pos:position pos:line="57" pos:column="15"/></default>
        <return pos:line="58" pos:column="9">return <expr><literal type="number" pos:line="58" pos:column="16">1<pos:position pos:line="58" pos:column="17"/></literal></expr>;<pos:position pos:line="58" pos:column="18"/></return>
      }<pos:position pos:line="59" pos:column="8"/></block></switch>
    }<pos:position pos:line="60" pos:column="6"/></block></switch>
  }<pos:position pos:line="61" pos:column="4"/></block></for>
  <comment type="block" pos:line="62" pos:column="3">/* not reached */</comment>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
