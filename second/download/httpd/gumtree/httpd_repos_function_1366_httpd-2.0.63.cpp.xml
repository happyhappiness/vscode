<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1366_httpd-2.0.63.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_size_t<pos:position pos:line="1" pos:column="18"/></name></type> <name pos:line="1" pos:column="19">find_arg_or_tail<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">ssi_ctx_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">ctx<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">data<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="2" pos:column="36">apr_size_t<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">len<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">p<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">data<pos:position pos:line="4" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">ep<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><name pos:line="5" pos:column="22">data<pos:position pos:line="5" pos:column="26"/></name> <operator pos:line="5" pos:column="27">+<pos:position pos:line="5" pos:column="28"/></operator> <name pos:line="5" pos:column="29">len<pos:position pos:line="5" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/* skip leading WS */</comment>
    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><name pos:line="8" pos:column="12">p<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">&lt;<pos:position pos:line="8" pos:column="18"/></operator> <name pos:line="8" pos:column="16">ep<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">&amp;&amp;<pos:position pos:line="8" pos:column="29"/></operator> <call><name pos:line="8" pos:column="22">apr_isspace<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">(<argument><expr><operator pos:line="8" pos:column="34">*<pos:position pos:line="8" pos:column="35"/></operator><name pos:line="8" pos:column="35">p<pos:position pos:line="8" pos:column="36"/></name></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="38"/></condition> <block pos:line="8" pos:column="39">{
        <expr_stmt><expr><operator pos:line="9" pos:column="9">++<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">p<pos:position pos:line="9" pos:column="12"/></name></expr>;<pos:position pos:line="9" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></while>

    <comment type="block" pos:line="12" pos:column="5">/* buffer doesn't consist of whitespaces only */</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">p<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">&lt;<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="13">ep<pos:position pos:line="13" pos:column="15"/></name></expr>)<pos:position pos:line="13" pos:column="16"/></condition><then pos:line="13" pos:column="16"> <block pos:line="13" pos:column="17">{
        <expr_stmt><expr><name><name pos:line="14" pos:column="9">ctx<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">-&gt;<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="14">state<pos:position pos:line="14" pos:column="19"/></name></name> <operator pos:line="14" pos:column="20">=<pos:position pos:line="14" pos:column="21"/></operator> <ternary><condition><expr><operator pos:line="14" pos:column="22">(<pos:position pos:line="14" pos:column="23"/></operator><operator pos:line="14" pos:column="23">*<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="24">p<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">==<pos:position pos:line="14" pos:column="28"/></operator> <operator pos:line="14" pos:column="29">*<pos:position pos:line="14" pos:column="30"/></operator><name><name pos:line="14" pos:column="30">ctx<pos:position pos:line="14" pos:column="33"/></name><operator pos:line="14" pos:column="33">-&gt;<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="35">ctx<pos:position pos:line="14" pos:column="38"/></name><operator pos:line="14" pos:column="38">-&gt;<pos:position pos:line="14" pos:column="43"/></operator><name pos:line="14" pos:column="40">end_seq<pos:position pos:line="14" pos:column="47"/></name></name><operator pos:line="14" pos:column="47">)<pos:position pos:line="14" pos:column="48"/></operator></expr> ?<pos:position pos:line="14" pos:column="50"/></condition><then pos:line="14" pos:column="50"> <expr><name pos:line="14" pos:column="51">PARSE_TAIL<pos:position pos:line="14" pos:column="61"/></name></expr> <pos:position pos:line="14" pos:column="62"/></then><else pos:line="14" pos:column="62">: <expr><name pos:line="14" pos:column="64">PARSE_ARG<pos:position pos:line="14" pos:column="73"/></name></expr></else></ternary></expr>;<pos:position pos:line="14" pos:column="74"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <return pos:line="17" pos:column="5">return <expr><operator pos:line="17" pos:column="12">(<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">p<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">-<pos:position pos:line="17" pos:column="16"/></operator> <name pos:line="17" pos:column="17">data<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">)<pos:position pos:line="17" pos:column="22"/></operator></expr>;<pos:position pos:line="17" pos:column="23"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
