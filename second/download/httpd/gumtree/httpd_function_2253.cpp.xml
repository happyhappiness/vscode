<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_2253.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">PCOMP_CONTEXT<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">winnt_get_connection<pos:position pos:line="1" pos:column="42"/></name><parameter_list pos:line="1" pos:column="42">(<parameter><decl><type><name pos:line="1" pos:column="43">PCOMP_CONTEXT<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">context<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">rc<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">DWORD<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">BytesRead<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">LPOVERLAPPED<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">pol<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">_WIN64<pos:position pos:line="6" pos:column="14"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">ULONG_PTR<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">CompKey<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
<cpp:else pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">else<pos:position pos:line="8" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">DWORD<pos:position pos:line="9" pos:column="10"/></name></type> <name pos:line="9" pos:column="11">CompKey<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">mpm_recycle_completion_context<pos:position pos:line="12" pos:column="35"/></name><argument_list pos:line="12" pos:column="35">(<argument><expr><name pos:line="12" pos:column="36">context<pos:position pos:line="12" pos:column="43"/></name></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">apr_atomic_inc32<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><operator pos:line="14" pos:column="22">&amp;<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="23">g_blocked_threads<pos:position pos:line="14" pos:column="40"/></name></expr></argument>)<pos:position pos:line="14" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="42"/></expr_stmt>
    <while pos:line="15" pos:column="5">while <condition pos:line="15" pos:column="11">(<expr><literal type="number" pos:line="15" pos:column="12">1<pos:position pos:line="15" pos:column="13"/></literal></expr>)<pos:position pos:line="15" pos:column="14"/></condition> <block pos:line="15" pos:column="15">{
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">workers_may_exit<pos:position pos:line="16" pos:column="29"/></name></expr>)<pos:position pos:line="16" pos:column="30"/></condition><then pos:line="16" pos:column="30"> <block pos:line="16" pos:column="31">{
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">apr_atomic_dec32<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><operator pos:line="17" pos:column="30">&amp;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="31">g_blocked_threads<pos:position pos:line="17" pos:column="48"/></name></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt>
            <return pos:line="18" pos:column="13">return <expr><name pos:line="18" pos:column="20">NULL<pos:position pos:line="18" pos:column="24"/></name></expr>;<pos:position pos:line="18" pos:column="25"/></return>
        }<pos:position pos:line="19" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="20" pos:column="9">rc<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <call><name pos:line="20" pos:column="14">GetQueuedCompletionStatus<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><name pos:line="20" pos:column="40">ThreadDispatchIOCP<pos:position pos:line="20" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="60">&amp;<pos:position pos:line="20" pos:column="65"/></operator><name pos:line="20" pos:column="61">BytesRead<pos:position pos:line="20" pos:column="70"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="72">&amp;<pos:position pos:line="20" pos:column="77"/></operator><name pos:line="20" pos:column="73">CompKey<pos:position pos:line="20" pos:column="80"/></name></expr></argument>,
                                       <argument><expr><operator pos:line="21" pos:column="40">&amp;<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="41">pol<pos:position pos:line="21" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="46">INFINITE<pos:position pos:line="21" pos:column="54"/></name></expr></argument>)<pos:position pos:line="21" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="56"/></expr_stmt>
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">rc<pos:position pos:line="22" pos:column="16"/></name></expr>)<pos:position pos:line="22" pos:column="17"/></condition><then pos:line="22" pos:column="17"> <block pos:line="22" pos:column="18">{
            <expr_stmt><expr><name pos:line="23" pos:column="13">rc<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <call><name pos:line="23" pos:column="18">apr_get_os_error<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">()<pos:position pos:line="23" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">ap_log_error<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">APLOG_MARK<pos:position pos:line="24" pos:column="36"/></name></expr></argument>,<argument><expr><name pos:line="24" pos:column="37">APLOG_DEBUG<pos:position pos:line="24" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="50">rc<pos:position pos:line="24" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="54">ap_server_conf<pos:position pos:line="24" pos:column="68"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="25" pos:column="30">"Child %lu: GetQueuedComplationStatus returned %d"<pos:position pos:line="25" pos:column="80"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="82">my_pid<pos:position pos:line="25" pos:column="88"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="90">rc<pos:position pos:line="25" pos:column="92"/></name></expr></argument>)<pos:position pos:line="25" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="94"/></expr_stmt>
            <continue pos:line="26" pos:column="13">continue;<pos:position pos:line="26" pos:column="22"/></continue>
        }<pos:position pos:line="27" pos:column="10"/></block></then></if>

        <switch pos:line="29" pos:column="9">switch <condition pos:line="29" pos:column="16">(<expr><name pos:line="29" pos:column="17">CompKey<pos:position pos:line="29" pos:column="24"/></name></expr>)<pos:position pos:line="29" pos:column="25"/></condition> <block pos:line="29" pos:column="26">{
        <case pos:line="30" pos:column="9">case <expr><name pos:line="30" pos:column="14">IOCP_CONNECTION_ACCEPTED<pos:position pos:line="30" pos:column="38"/></name></expr>:<pos:position pos:line="30" pos:column="39"/></case>
            <expr_stmt><expr><name pos:line="31" pos:column="13">context<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">=<pos:position pos:line="31" pos:column="22"/></operator> <call><name pos:line="31" pos:column="23">CONTAINING_RECORD<pos:position pos:line="31" pos:column="40"/></name><argument_list pos:line="31" pos:column="40">(<argument><expr><name pos:line="31" pos:column="41">pol<pos:position pos:line="31" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="46">COMP_CONTEXT<pos:position pos:line="31" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="60">Overlapped<pos:position pos:line="31" pos:column="70"/></name></expr></argument>)<pos:position pos:line="31" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="72"/></expr_stmt>
            <break pos:line="32" pos:column="13">break;<pos:position pos:line="32" pos:column="19"/></break>
        <case pos:line="33" pos:column="9">case <expr><name pos:line="33" pos:column="14">IOCP_SHUTDOWN<pos:position pos:line="33" pos:column="27"/></name></expr>:<pos:position pos:line="33" pos:column="28"/></case>
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">apr_atomic_dec32<pos:position pos:line="34" pos:column="29"/></name><argument_list pos:line="34" pos:column="29">(<argument><expr><operator pos:line="34" pos:column="30">&amp;<pos:position pos:line="34" pos:column="35"/></operator><name pos:line="34" pos:column="31">g_blocked_threads<pos:position pos:line="34" pos:column="48"/></name></expr></argument>)<pos:position pos:line="34" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="50"/></expr_stmt>
            <return pos:line="35" pos:column="13">return <expr><name pos:line="35" pos:column="20">NULL<pos:position pos:line="35" pos:column="24"/></name></expr>;<pos:position pos:line="35" pos:column="25"/></return>
        <default pos:line="36" pos:column="9">default:<pos:position pos:line="36" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="37" pos:column="13">apr_atomic_dec32<pos:position pos:line="37" pos:column="29"/></name><argument_list pos:line="37" pos:column="29">(<argument><expr><operator pos:line="37" pos:column="30">&amp;<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="31">g_blocked_threads<pos:position pos:line="37" pos:column="48"/></name></expr></argument>)<pos:position pos:line="37" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="50"/></expr_stmt>
            <return pos:line="38" pos:column="13">return <expr><name pos:line="38" pos:column="20">NULL<pos:position pos:line="38" pos:column="24"/></name></expr>;<pos:position pos:line="38" pos:column="25"/></return>
        }<pos:position pos:line="39" pos:column="10"/></block></switch>
        <break pos:line="40" pos:column="9">break;<pos:position pos:line="40" pos:column="15"/></break>
    }<pos:position pos:line="41" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">apr_atomic_dec32<pos:position pos:line="42" pos:column="21"/></name><argument_list pos:line="42" pos:column="21">(<argument><expr><operator pos:line="42" pos:column="22">&amp;<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="23">g_blocked_threads<pos:position pos:line="42" pos:column="40"/></name></expr></argument>)<pos:position pos:line="42" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="42"/></expr_stmt>

    <return pos:line="44" pos:column="5">return <expr><name pos:line="44" pos:column="12">context<pos:position pos:line="44" pos:column="19"/></name></expr>;<pos:position pos:line="44" pos:column="20"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
