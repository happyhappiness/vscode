<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3528_httpd-2.2.8.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">apr_atomic_casptr<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">volatile<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">void<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier><modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">mem_ptr<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="2" pos:column="25">void<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">swap_ptr<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>,
                        <parameter><decl><type><specifier pos:line="3" pos:column="25">const<pos:position pos:line="3" pos:column="30"/></specifier> <name pos:line="3" pos:column="31">void<pos:position pos:line="3" pos:column="35"/></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">cmp_ptr<pos:position pos:line="3" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="45"/></parameter_list>
<block pos:line="4" pos:column="1">{
     <expr_stmt><expr><call><name pos:line="5" pos:column="6">__cs1<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><operator pos:line="5" pos:column="12">&amp;<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="13">cmp_ptr<pos:position pos:line="5" pos:column="20"/></name></expr></argument>,     <comment type="block" pos:line="5" pos:column="26">/* automatically updated from mem on __cs1 failure  */</comment>
           <argument><expr><name pos:line="6" pos:column="12">mem_ptr<pos:position pos:line="6" pos:column="19"/></name></expr></argument>,      <comment type="block" pos:line="6" pos:column="26">/* set from swap when __cs1 succeeds                */</comment>
           <argument><expr><operator pos:line="7" pos:column="12">&amp;<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="13">swap_ptr<pos:position pos:line="7" pos:column="21"/></name></expr></argument>)<pos:position pos:line="7" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="23"/></expr_stmt>
     <return pos:line="8" pos:column="6">return <expr><operator pos:line="8" pos:column="13">(<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">void<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">*<pos:position pos:line="8" pos:column="20"/></operator><operator pos:line="8" pos:column="20">)<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">cmp_ptr<pos:position pos:line="8" pos:column="28"/></name></expr>;<pos:position pos:line="8" pos:column="29"/></return>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
