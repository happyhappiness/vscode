<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3615_httpd-2.4.18.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">expr_lookup_not_found<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">ap_expr_lookup_parms<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">parms<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">char<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">type<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">prefix<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><literal type="string" pos:line="4" pos:column="26">""<pos:position pos:line="4" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

    <switch pos:line="6" pos:column="5">switch <condition pos:line="6" pos:column="12">(<expr><name><name pos:line="6" pos:column="13">parms<pos:position pos:line="6" pos:column="18"/></name><operator pos:line="6" pos:column="18">-&gt;<pos:position pos:line="6" pos:column="23"/></operator><name pos:line="6" pos:column="20">type<pos:position pos:line="6" pos:column="24"/></name></name></expr>)<pos:position pos:line="6" pos:column="25"/></condition> <block pos:line="6" pos:column="26">{
    <case pos:line="7" pos:column="5">case <expr><name pos:line="7" pos:column="10">AP_EXPR_FUNC_VAR<pos:position pos:line="7" pos:column="26"/></name></expr>:<pos:position pos:line="7" pos:column="27"/></case>
        <expr_stmt><expr><name pos:line="8" pos:column="9">type<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <literal type="string" pos:line="8" pos:column="16">"Variable"<pos:position pos:line="8" pos:column="26"/></literal></expr>;<pos:position pos:line="8" pos:column="27"/></expr_stmt>
        <break pos:line="9" pos:column="9">break;<pos:position pos:line="9" pos:column="15"/></break>
    <case pos:line="10" pos:column="5">case <expr><name pos:line="10" pos:column="10">AP_EXPR_FUNC_STRING<pos:position pos:line="10" pos:column="29"/></name></expr>:<pos:position pos:line="10" pos:column="30"/></case>
        <expr_stmt><expr><name pos:line="11" pos:column="9">type<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <literal type="string" pos:line="11" pos:column="16">"Function"<pos:position pos:line="11" pos:column="26"/></literal></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt>
        <break pos:line="12" pos:column="9">break;<pos:position pos:line="12" pos:column="15"/></break>
    <case pos:line="13" pos:column="5">case <expr><name pos:line="13" pos:column="10">AP_EXPR_FUNC_LIST<pos:position pos:line="13" pos:column="27"/></name></expr>:<pos:position pos:line="13" pos:column="28"/></case>
        <expr_stmt><expr><name pos:line="14" pos:column="9">type<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <literal type="string" pos:line="14" pos:column="16">"List-returning function"<pos:position pos:line="14" pos:column="41"/></literal></expr>;<pos:position pos:line="14" pos:column="42"/></expr_stmt>
        <break pos:line="15" pos:column="9">break;<pos:position pos:line="15" pos:column="15"/></break>
    <case pos:line="16" pos:column="5">case <expr><name pos:line="16" pos:column="10">AP_EXPR_FUNC_OP_UNARY<pos:position pos:line="16" pos:column="31"/></name></expr>:<pos:position pos:line="16" pos:column="32"/></case>
        <expr_stmt><expr><name pos:line="17" pos:column="9">type<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <literal type="string" pos:line="17" pos:column="16">"Unary operator"<pos:position pos:line="17" pos:column="32"/></literal></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>
        <break pos:line="18" pos:column="9">break;<pos:position pos:line="18" pos:column="15"/></break>
    <case pos:line="19" pos:column="5">case <expr><name pos:line="19" pos:column="10">AP_EXPR_FUNC_OP_BINARY<pos:position pos:line="19" pos:column="32"/></name></expr>:<pos:position pos:line="19" pos:column="33"/></case>
        <expr_stmt><expr><name pos:line="20" pos:column="9">type<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <literal type="string" pos:line="20" pos:column="16">"Binary operator"<pos:position pos:line="20" pos:column="33"/></literal></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
        <break pos:line="21" pos:column="9">break;<pos:position pos:line="21" pos:column="15"/></break>
    <default pos:line="22" pos:column="5">default:<pos:position pos:line="22" pos:column="13"/></default>
        <expr_stmt><expr><operator pos:line="23" pos:column="9">*<pos:position pos:line="23" pos:column="10"/></operator><name><name pos:line="23" pos:column="10">parms<pos:position pos:line="23" pos:column="15"/></name><operator pos:line="23" pos:column="15">-&gt;<pos:position pos:line="23" pos:column="20"/></operator><name pos:line="23" pos:column="17">err<pos:position pos:line="23" pos:column="20"/></name></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <literal type="string" pos:line="23" pos:column="23">"Inavalid expression type in expr_lookup"<pos:position pos:line="23" pos:column="64"/></literal></expr>;<pos:position pos:line="23" pos:column="65"/></expr_stmt>
        <return pos:line="24" pos:column="9">return <expr><operator pos:line="24" pos:column="16">!<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="17">OK<pos:position pos:line="24" pos:column="19"/></name></expr>;<pos:position pos:line="24" pos:column="20"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></switch>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(   <expr><name><name pos:line="26" pos:column="12">parms<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">-&gt;<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="19">type<pos:position pos:line="26" pos:column="23"/></name></name> <operator pos:line="26" pos:column="24">==<pos:position pos:line="26" pos:column="26"/></operator> <name pos:line="26" pos:column="27">AP_EXPR_FUNC_OP_UNARY<pos:position pos:line="26" pos:column="48"/></name>
        <operator pos:line="27" pos:column="9">||<pos:position pos:line="27" pos:column="11"/></operator> <name><name pos:line="27" pos:column="12">parms<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">-&gt;<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="19">type<pos:position pos:line="27" pos:column="23"/></name></name> <operator pos:line="27" pos:column="24">==<pos:position pos:line="27" pos:column="26"/></operator> <name pos:line="27" pos:column="27">AP_EXPR_FUNC_OP_BINARY<pos:position pos:line="27" pos:column="49"/></name></expr>)<pos:position pos:line="27" pos:column="50"/></condition><then pos:line="27" pos:column="50"> <block pos:line="27" pos:column="51">{
        <expr_stmt><expr><name pos:line="28" pos:column="9">prefix<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <literal type="string" pos:line="28" pos:column="18">"-"<pos:position pos:line="28" pos:column="21"/></literal></expr>;<pos:position pos:line="28" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="30" pos:column="5">*<pos:position pos:line="30" pos:column="6"/></operator><name><name pos:line="30" pos:column="6">parms<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">-&gt;<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="13">err<pos:position pos:line="30" pos:column="16"/></name></name> <operator pos:line="30" pos:column="17">=<pos:position pos:line="30" pos:column="18"/></operator> <call><name pos:line="30" pos:column="19">apr_psprintf<pos:position pos:line="30" pos:column="31"/></name><argument_list pos:line="30" pos:column="31">(<argument><expr><name><name pos:line="30" pos:column="32">parms<pos:position pos:line="30" pos:column="37"/></name><operator pos:line="30" pos:column="37">-&gt;<pos:position pos:line="30" pos:column="42"/></operator><name pos:line="30" pos:column="39">ptemp<pos:position pos:line="30" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="46">"%s '%s%s' does not exist"<pos:position pos:line="30" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="74">type<pos:position pos:line="30" pos:column="78"/></name></expr></argument>,
                               <argument><expr><name pos:line="31" pos:column="32">prefix<pos:position pos:line="31" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="40">parms<pos:position pos:line="31" pos:column="45"/></name><operator pos:line="31" pos:column="45">-&gt;<pos:position pos:line="31" pos:column="50"/></operator><name pos:line="31" pos:column="47">name<pos:position pos:line="31" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt>
    <return pos:line="32" pos:column="5">return <expr><operator pos:line="32" pos:column="12">!<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="13">OK<pos:position pos:line="32" pos:column="15"/></name></expr>;<pos:position pos:line="32" pos:column="16"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
