<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_614_httpd-2.0.64.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">BOOL<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">SSL_X509_getBC<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">X509<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">cert<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">int<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">ca<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">pathlen<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">HAVE_SSL_X509V3_EXT_d2i<pos:position pos:line="3" pos:column="31"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">X509_EXTENSION<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">ext<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">BASIC_CONSTRAINTS<pos:position pos:line="5" pos:column="22"/></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">bc<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">idx<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">BIGNUM<pos:position pos:line="7" pos:column="11"/></name> <modifier pos:line="7" pos:column="12">*<pos:position pos:line="7" pos:column="13"/></modifier></type><name pos:line="7" pos:column="13">bn<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><name pos:line="7" pos:column="18">NULL<pos:position pos:line="7" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">cp<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>
    
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">(<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">idx<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">=<pos:position pos:line="10" pos:column="15"/></operator> <call><name pos:line="10" pos:column="16">X509_get_ext_by_NID<pos:position pos:line="10" pos:column="35"/></name><argument_list pos:line="10" pos:column="35">(<argument><expr><name pos:line="10" pos:column="36">cert<pos:position pos:line="10" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="42">NID_basic_constraints<pos:position pos:line="10" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="65">-<pos:position pos:line="10" pos:column="66"/></operator><literal type="number" pos:line="10" pos:column="66">1<pos:position pos:line="10" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="68"/></argument_list></call><operator pos:line="10" pos:column="68">)<pos:position pos:line="10" pos:column="69"/></operator> <operator pos:line="10" pos:column="70">&lt;<pos:position pos:line="10" pos:column="74"/></operator> <literal type="number" pos:line="10" pos:column="72">0<pos:position pos:line="10" pos:column="73"/></literal></expr>)<pos:position pos:line="10" pos:column="74"/></condition><then pos:line="10" pos:column="74">
        <block type="pseudo"><return pos:line="11" pos:column="9">return <expr><name pos:line="11" pos:column="16">FALSE<pos:position pos:line="11" pos:column="21"/></name></expr>;<pos:position pos:line="11" pos:column="22"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="12" pos:column="5">ext<pos:position pos:line="12" pos:column="8"/></name> <operator pos:line="12" pos:column="9">=<pos:position pos:line="12" pos:column="10"/></operator> <call><name pos:line="12" pos:column="11">X509_get_ext<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name pos:line="12" pos:column="24">cert<pos:position pos:line="12" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="30">idx<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">ext<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">==<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">NULL<pos:position pos:line="13" pos:column="20"/></name></expr>)<pos:position pos:line="13" pos:column="21"/></condition><then pos:line="13" pos:column="21">
        <block type="pseudo"><return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">FALSE<pos:position pos:line="14" pos:column="21"/></name></expr>;<pos:position pos:line="14" pos:column="22"/></return></block></then></if>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">bc<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <operator pos:line="15" pos:column="15">(<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">BASIC_CONSTRAINTS<pos:position pos:line="15" pos:column="33"/></name> <operator pos:line="15" pos:column="34">*<pos:position pos:line="15" pos:column="35"/></operator><operator pos:line="15" pos:column="35">)<pos:position pos:line="15" pos:column="36"/></operator><call><name pos:line="15" pos:column="36">X509V3_EXT_d2i<pos:position pos:line="15" pos:column="50"/></name><argument_list pos:line="15" pos:column="50">(<argument><expr><name pos:line="15" pos:column="51">ext<pos:position pos:line="15" pos:column="54"/></name></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></call><operator pos:line="15" pos:column="55">)<pos:position pos:line="15" pos:column="56"/></operator> <operator pos:line="15" pos:column="57">==<pos:position pos:line="15" pos:column="59"/></operator> <name pos:line="15" pos:column="60">NULL<pos:position pos:line="15" pos:column="64"/></name></expr>)<pos:position pos:line="15" pos:column="65"/></condition><then pos:line="15" pos:column="65">
        <block type="pseudo"><return pos:line="16" pos:column="9">return <expr><name pos:line="16" pos:column="16">FALSE<pos:position pos:line="16" pos:column="21"/></name></expr>;<pos:position pos:line="16" pos:column="22"/></return></block></then></if>
    <expr_stmt><expr><operator pos:line="17" pos:column="5">*<pos:position pos:line="17" pos:column="6"/></operator><name pos:line="17" pos:column="6">ca<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">=<pos:position pos:line="17" pos:column="10"/></operator> <name><name pos:line="17" pos:column="11">bc<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">-&gt;<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="15">ca<pos:position pos:line="17" pos:column="17"/></name></name></expr>;<pos:position pos:line="17" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="18" pos:column="5">*<pos:position pos:line="18" pos:column="6"/></operator><name pos:line="18" pos:column="6">pathlen<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <operator pos:line="18" pos:column="16">-<pos:position pos:line="18" pos:column="17"/></operator><literal type="number" pos:line="18" pos:column="17">1<pos:position pos:line="18" pos:column="18"/></literal></expr> <comment type="block" pos:line="18" pos:column="19">/* unlimited */</comment>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">bc<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">-&gt;<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="13">pathlen<pos:position pos:line="19" pos:column="20"/></name></name> <operator pos:line="19" pos:column="21">!=<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">NULL<pos:position pos:line="19" pos:column="28"/></name></expr>)<pos:position pos:line="19" pos:column="29"/></condition><then pos:line="19" pos:column="29"> <block pos:line="19" pos:column="30">{
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">(<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">bn<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <call><name pos:line="20" pos:column="19">ASN1_INTEGER_to_BN<pos:position pos:line="20" pos:column="37"/></name><argument_list pos:line="20" pos:column="37">(<argument><expr><name><name pos:line="20" pos:column="38">bc<pos:position pos:line="20" pos:column="40"/></name><operator pos:line="20" pos:column="40">-&gt;<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="42">pathlen<pos:position pos:line="20" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="51">NULL<pos:position pos:line="20" pos:column="55"/></name></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call><operator pos:line="20" pos:column="56">)<pos:position pos:line="20" pos:column="57"/></operator> <operator pos:line="20" pos:column="58">==<pos:position pos:line="20" pos:column="60"/></operator> <name pos:line="20" pos:column="61">NULL<pos:position pos:line="20" pos:column="65"/></name></expr>)<pos:position pos:line="20" pos:column="66"/></condition><then pos:line="20" pos:column="66">
            <block type="pseudo"><return pos:line="21" pos:column="13">return <expr><name pos:line="21" pos:column="20">FALSE<pos:position pos:line="21" pos:column="25"/></name></expr>;<pos:position pos:line="21" pos:column="26"/></return></block></then></if>
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">(<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">cp<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <call><name pos:line="22" pos:column="19">BN_bn2dec<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">bn<pos:position pos:line="22" pos:column="31"/></name></expr></argument>)<pos:position pos:line="22" pos:column="32"/></argument_list></call><operator pos:line="22" pos:column="32">)<pos:position pos:line="22" pos:column="33"/></operator> <operator pos:line="22" pos:column="34">==<pos:position pos:line="22" pos:column="36"/></operator> <name pos:line="22" pos:column="37">NULL<pos:position pos:line="22" pos:column="41"/></name></expr>)<pos:position pos:line="22" pos:column="42"/></condition><then pos:line="22" pos:column="42">
            <block type="pseudo"><return pos:line="23" pos:column="13">return <expr><name pos:line="23" pos:column="20">FALSE<pos:position pos:line="23" pos:column="25"/></name></expr>;<pos:position pos:line="23" pos:column="26"/></return></block></then></if>
        <expr_stmt><expr><operator pos:line="24" pos:column="9">*<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">pathlen<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">=<pos:position pos:line="24" pos:column="19"/></operator> <call><name pos:line="24" pos:column="20">atoi<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">cp<pos:position pos:line="24" pos:column="27"/></name></expr></argument>)<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">free<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><name pos:line="25" pos:column="14">cp<pos:position pos:line="25" pos:column="16"/></name></expr></argument>)<pos:position pos:line="25" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">BN_free<pos:position pos:line="26" pos:column="16"/></name><argument_list pos:line="26" pos:column="16">(<argument><expr><name pos:line="26" pos:column="17">bn<pos:position pos:line="26" pos:column="19"/></name></expr></argument>)<pos:position pos:line="26" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">BASIC_CONSTRAINTS_free<pos:position pos:line="28" pos:column="27"/></name><argument_list pos:line="28" pos:column="27">(<argument><expr><name pos:line="28" pos:column="28">bc<pos:position pos:line="28" pos:column="30"/></name></expr></argument>)<pos:position pos:line="28" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="32"/></expr_stmt>
    <return pos:line="29" pos:column="5">return <expr><name pos:line="29" pos:column="12">TRUE<pos:position pos:line="29" pos:column="16"/></name></expr>;<pos:position pos:line="29" pos:column="17"/></return>
<cpp:else pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">else<pos:position pos:line="30" pos:column="6"/></cpp:directive></cpp:else>
    <return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">FALSE<pos:position pos:line="31" pos:column="17"/></name></expr>;<pos:position pos:line="31" pos:column="18"/></return>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
