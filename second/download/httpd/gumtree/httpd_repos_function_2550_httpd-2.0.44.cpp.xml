<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2550_httpd-2.0.44.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">void<pos:position pos:line="2" pos:column="5"/></name></type> <name pos:line="2" pos:column="6">unknown_toUtf16<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">ENCODING<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">enc<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>,
		     <parameter><decl><type><specifier pos:line="3" pos:column="22">const<pos:position pos:line="3" pos:column="27"/></specifier> <name pos:line="3" pos:column="28">char<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier><modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">fromP<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="42">const<pos:position pos:line="3" pos:column="47"/></specifier> <name pos:line="3" pos:column="48">char<pos:position pos:line="3" pos:column="52"/></name> <modifier pos:line="3" pos:column="53">*<pos:position pos:line="3" pos:column="54"/></modifier></type><name pos:line="3" pos:column="54">fromLim<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>,
		     <parameter><decl><type><name pos:line="4" pos:column="22">unsigned<pos:position pos:line="4" pos:column="30"/></name> <name pos:line="4" pos:column="31">short<pos:position pos:line="4" pos:column="36"/></name> <modifier pos:line="4" pos:column="37">*<pos:position pos:line="4" pos:column="38"/></modifier><modifier pos:line="4" pos:column="38">*<pos:position pos:line="4" pos:column="39"/></modifier></type><name pos:line="4" pos:column="39">toP<pos:position pos:line="4" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="4" pos:column="44">const<pos:position pos:line="4" pos:column="49"/></specifier> <name pos:line="4" pos:column="50">unsigned<pos:position pos:line="4" pos:column="58"/></name> <name pos:line="4" pos:column="59">short<pos:position pos:line="4" pos:column="64"/></name> <modifier pos:line="4" pos:column="65">*<pos:position pos:line="4" pos:column="66"/></modifier></type><name pos:line="4" pos:column="66">toLim<pos:position pos:line="4" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="72"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <while pos:line="6" pos:column="3">while <condition pos:line="6" pos:column="9">(<expr><operator pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></operator><name pos:line="6" pos:column="11">fromP<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">!=<pos:position pos:line="6" pos:column="19"/></operator> <name pos:line="6" pos:column="20">fromLim<pos:position pos:line="6" pos:column="27"/></name> <operator pos:line="6" pos:column="28">&amp;&amp;<pos:position pos:line="6" pos:column="38"/></operator> <operator pos:line="6" pos:column="31">*<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="32">toP<pos:position pos:line="6" pos:column="35"/></name> <operator pos:line="6" pos:column="36">!=<pos:position pos:line="6" pos:column="38"/></operator> <name pos:line="6" pos:column="39">toLim<pos:position pos:line="6" pos:column="44"/></name></expr>)<pos:position pos:line="6" pos:column="45"/></condition> <block pos:line="6" pos:column="46">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">unsigned<pos:position pos:line="7" pos:column="13"/></name> <name pos:line="7" pos:column="14">short<pos:position pos:line="7" pos:column="19"/></name></type> <name pos:line="7" pos:column="20">c<pos:position pos:line="7" pos:column="21"/></name>
      <init pos:line="8" pos:column="7">= <expr><operator pos:line="8" pos:column="9">(<pos:position pos:line="8" pos:column="10"/></operator><operator pos:line="8" pos:column="10">(<pos:position pos:line="8" pos:column="11"/></operator><specifier pos:line="8" pos:column="11">const<pos:position pos:line="8" pos:column="16"/></specifier> struct <name pos:line="8" pos:column="24">unknown_encoding<pos:position pos:line="8" pos:column="40"/></name> <operator pos:line="8" pos:column="41">*<pos:position pos:line="8" pos:column="42"/></operator><operator pos:line="8" pos:column="42">)<pos:position pos:line="8" pos:column="43"/></operator><name pos:line="8" pos:column="43">enc<pos:position pos:line="8" pos:column="46"/></name><operator pos:line="8" pos:column="46">)<pos:position pos:line="8" pos:column="47"/></operator><operator pos:line="8" pos:column="47">-&gt;<pos:position pos:line="8" pos:column="52"/></operator><name><name pos:line="8" pos:column="49">utf16<pos:position pos:line="8" pos:column="54"/></name><index pos:line="8" pos:column="54">[<expr><operator pos:line="8" pos:column="55">(<pos:position pos:line="8" pos:column="56"/></operator><name pos:line="8" pos:column="56">unsigned<pos:position pos:line="8" pos:column="64"/></name> <name pos:line="8" pos:column="65">char<pos:position pos:line="8" pos:column="69"/></name><operator pos:line="8" pos:column="69">)<pos:position pos:line="8" pos:column="70"/></operator><operator pos:line="8" pos:column="70">*<pos:position pos:line="8" pos:column="71"/></operator><operator pos:line="8" pos:column="71">*<pos:position pos:line="8" pos:column="72"/></operator><name pos:line="8" pos:column="72">fromP<pos:position pos:line="8" pos:column="77"/></name></expr>]<pos:position pos:line="8" pos:column="78"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="79"/></decl_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">c<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">==<pos:position pos:line="9" pos:column="13"/></operator> <literal type="number" pos:line="9" pos:column="14">0<pos:position pos:line="9" pos:column="15"/></literal></expr>)<pos:position pos:line="9" pos:column="16"/></condition><then pos:line="9" pos:column="16"> <block pos:line="9" pos:column="17">{
      <expr_stmt><expr><name pos:line="10" pos:column="7">c<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">=<pos:position pos:line="10" pos:column="10"/></operator> <call pos:line="10" pos:column="11">(<name pos:line="10" pos:column="12">unsigned<pos:position pos:line="10" pos:column="20"/></name> <name pos:line="10" pos:column="21">short<pos:position pos:line="10" pos:column="26"/></name>)<argument_list pos:line="10" pos:column="27">(<argument><expr><operator pos:line="10" pos:column="28">(<pos:position pos:line="10" pos:column="29"/></operator><specifier pos:line="10" pos:column="29">const<pos:position pos:line="10" pos:column="34"/></specifier> struct <name pos:line="10" pos:column="42">unknown_encoding<pos:position pos:line="10" pos:column="58"/></name> <operator pos:line="10" pos:column="59">*<pos:position pos:line="10" pos:column="60"/></operator><operator pos:line="10" pos:column="60">)<pos:position pos:line="10" pos:column="61"/></operator><name pos:line="10" pos:column="61">enc<pos:position pos:line="10" pos:column="64"/></name></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call>
	   <operator pos:line="11" pos:column="12">-&gt;<pos:position pos:line="11" pos:column="17"/></operator><call><name pos:line="11" pos:column="14">convert<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><operator pos:line="11" pos:column="22">(<pos:position pos:line="11" pos:column="23"/></operator><operator pos:line="11" pos:column="23">(<pos:position pos:line="11" pos:column="24"/></operator><specifier pos:line="11" pos:column="24">const<pos:position pos:line="11" pos:column="29"/></specifier> struct <name pos:line="11" pos:column="37">unknown_encoding<pos:position pos:line="11" pos:column="53"/></name> <operator pos:line="11" pos:column="54">*<pos:position pos:line="11" pos:column="55"/></operator><operator pos:line="11" pos:column="55">)<pos:position pos:line="11" pos:column="56"/></operator><name pos:line="11" pos:column="56">enc<pos:position pos:line="11" pos:column="59"/></name><operator pos:line="11" pos:column="59">)<pos:position pos:line="11" pos:column="60"/></operator><operator pos:line="11" pos:column="60">-&gt;<pos:position pos:line="11" pos:column="65"/></operator><name pos:line="11" pos:column="62">userData<pos:position pos:line="11" pos:column="70"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="72">*<pos:position pos:line="11" pos:column="73"/></operator><name pos:line="11" pos:column="73">fromP<pos:position pos:line="11" pos:column="78"/></name></expr></argument>)<pos:position pos:line="11" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="80"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="12" pos:column="7">*<pos:position pos:line="12" pos:column="8"/></operator><name pos:line="12" pos:column="8">fromP<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">+=<pos:position pos:line="12" pos:column="16"/></operator> <operator pos:line="12" pos:column="17">(<pos:position pos:line="12" pos:column="18"/></operator><operator pos:line="12" pos:column="18">(<pos:position pos:line="12" pos:column="19"/></operator><specifier pos:line="12" pos:column="19">const<pos:position pos:line="12" pos:column="24"/></specifier> struct <name pos:line="12" pos:column="32">normal_encoding<pos:position pos:line="12" pos:column="47"/></name> <operator pos:line="12" pos:column="48">*<pos:position pos:line="12" pos:column="49"/></operator><operator pos:line="12" pos:column="49">)<pos:position pos:line="12" pos:column="50"/></operator><name pos:line="12" pos:column="50">enc<pos:position pos:line="12" pos:column="53"/></name><operator pos:line="12" pos:column="53">)<pos:position pos:line="12" pos:column="54"/></operator><operator pos:line="12" pos:column="54">-&gt;<pos:position pos:line="12" pos:column="59"/></operator><name><name pos:line="12" pos:column="56">type<pos:position pos:line="12" pos:column="60"/></name><index pos:line="12" pos:column="60">[<expr><operator pos:line="12" pos:column="61">(<pos:position pos:line="12" pos:column="62"/></operator><name pos:line="12" pos:column="62">unsigned<pos:position pos:line="12" pos:column="70"/></name> <name pos:line="12" pos:column="71">char<pos:position pos:line="12" pos:column="75"/></name><operator pos:line="12" pos:column="75">)<pos:position pos:line="12" pos:column="76"/></operator><operator pos:line="12" pos:column="76">*<pos:position pos:line="12" pos:column="77"/></operator><operator pos:line="12" pos:column="77">*<pos:position pos:line="12" pos:column="78"/></operator><name pos:line="12" pos:column="78">fromP<pos:position pos:line="12" pos:column="83"/></name></expr>]<pos:position pos:line="12" pos:column="84"/></index></name>
	         <operator pos:line="13" pos:column="18">-<pos:position pos:line="13" pos:column="19"/></operator> <operator pos:line="13" pos:column="20">(<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">BT_LEAD2<pos:position pos:line="13" pos:column="29"/></name> <operator pos:line="13" pos:column="30">-<pos:position pos:line="13" pos:column="31"/></operator> <literal type="number" pos:line="13" pos:column="32">2<pos:position pos:line="13" pos:column="33"/></literal><operator pos:line="13" pos:column="33">)<pos:position pos:line="13" pos:column="34"/></operator></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then>
    <else pos:line="15" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><operator pos:line="16" pos:column="7">(<pos:position pos:line="16" pos:column="8"/></operator><operator pos:line="16" pos:column="8">*<pos:position pos:line="16" pos:column="9"/></operator><name pos:line="16" pos:column="9">fromP<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">)<pos:position pos:line="16" pos:column="15"/></operator><operator pos:line="16" pos:column="15">++<pos:position pos:line="16" pos:column="17"/></operator></expr>;<pos:position pos:line="16" pos:column="18"/></expr_stmt></block></else></if>
    <expr_stmt><expr><operator pos:line="17" pos:column="5">*<pos:position pos:line="17" pos:column="6"/></operator><operator pos:line="17" pos:column="6">(<pos:position pos:line="17" pos:column="7"/></operator><operator pos:line="17" pos:column="7">*<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">toP<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">)<pos:position pos:line="17" pos:column="12"/></operator><operator pos:line="17" pos:column="12">++<pos:position pos:line="17" pos:column="14"/></operator> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <name pos:line="17" pos:column="17">c<pos:position pos:line="17" pos:column="18"/></name></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></while>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
