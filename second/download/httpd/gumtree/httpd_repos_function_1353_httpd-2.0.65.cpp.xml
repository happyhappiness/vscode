<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1353_httpd-2.0.65.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">get_include_var<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">request_rec<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">r<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">include_ctx_t<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">ctx<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>, 
                                   <parameter><decl><type><specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <name pos:line="2" pos:column="42">char<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">var<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">val<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><call><name pos:line="5" pos:column="9">apr_isdigit<pos:position pos:line="5" pos:column="20"/></name><argument_list pos:line="5" pos:column="20">(<argument><expr><operator pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></operator><name pos:line="5" pos:column="22">var<pos:position pos:line="5" pos:column="25"/></name></expr></argument>)<pos:position pos:line="5" pos:column="26"/></argument_list></call> <operator pos:line="5" pos:column="27">&amp;&amp;<pos:position pos:line="5" pos:column="37"/></operator> <operator pos:line="5" pos:column="30">!<pos:position pos:line="5" pos:column="31"/></operator><name><name pos:line="5" pos:column="31">var<pos:position pos:line="5" pos:column="34"/></name><index pos:line="5" pos:column="34">[<expr><literal type="number" pos:line="5" pos:column="35">1<pos:position pos:line="5" pos:column="36"/></literal></expr>]<pos:position pos:line="5" pos:column="37"/></index></name></expr>)<pos:position pos:line="5" pos:column="38"/></condition><then pos:line="5" pos:column="38"> <block pos:line="5" pos:column="39">{
        <comment type="block" pos:line="6" pos:column="9">/* Handle $0 .. $9 from the last regex evaluated.
         * The choice of returning NULL strings on not-found,
         * v.s. empty strings on an empty match is deliberate.
         */</comment>
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name><name pos:line="10" pos:column="14">ctx<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">-&gt;<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="19">re_result<pos:position pos:line="10" pos:column="28"/></name></name> <operator pos:line="10" pos:column="29">||<pos:position pos:line="10" pos:column="31"/></operator> <operator pos:line="10" pos:column="32">!<pos:position pos:line="10" pos:column="33"/></operator><name><name pos:line="10" pos:column="33">ctx<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">-&gt;<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="38">re_string<pos:position pos:line="10" pos:column="47"/></name></name></expr>)<pos:position pos:line="10" pos:column="48"/></condition><then pos:line="10" pos:column="48"> <block pos:line="10" pos:column="49">{
            <return pos:line="11" pos:column="13">return <expr><name pos:line="11" pos:column="20">NULL<pos:position pos:line="11" pos:column="24"/></name></expr>;<pos:position pos:line="11" pos:column="25"/></return>
        }<pos:position pos:line="12" pos:column="10"/></block></then>
        <else pos:line="13" pos:column="9">else <block pos:line="13" pos:column="14">{
            <decl_stmt><decl><type><name pos:line="14" pos:column="13">int<pos:position pos:line="14" pos:column="16"/></name></type> <name pos:line="14" pos:column="17">idx<pos:position pos:line="14" pos:column="20"/></name> <init pos:line="14" pos:column="21">= <expr><call><name pos:line="14" pos:column="23">atoi<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">var<pos:position pos:line="14" pos:column="31"/></name></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="33"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">apr_size_t<pos:position pos:line="15" pos:column="23"/></name></type> <name pos:line="15" pos:column="24">len<pos:position pos:line="15" pos:column="27"/></name> <init pos:line="15" pos:column="28">= <expr><operator pos:line="15" pos:column="30">(<pos:position pos:line="15" pos:column="31"/></operator><operator pos:line="15" pos:column="31">*<pos:position pos:line="15" pos:column="32"/></operator><name><name pos:line="15" pos:column="32">ctx<pos:position pos:line="15" pos:column="35"/></name><operator pos:line="15" pos:column="35">-&gt;<pos:position pos:line="15" pos:column="40"/></operator><name pos:line="15" pos:column="37">re_result<pos:position pos:line="15" pos:column="46"/></name></name><operator pos:line="15" pos:column="46">)<pos:position pos:line="15" pos:column="47"/></operator><index pos:line="15" pos:column="47">[<expr><name pos:line="15" pos:column="48">idx<pos:position pos:line="15" pos:column="51"/></name></expr>]<pos:position pos:line="15" pos:column="52"/></index><operator pos:line="15" pos:column="52">.<pos:position pos:line="15" pos:column="53"/></operator><name pos:line="15" pos:column="53">rm_eo<pos:position pos:line="15" pos:column="58"/></name>
                           <operator pos:line="16" pos:column="28">-<pos:position pos:line="16" pos:column="29"/></operator> <operator pos:line="16" pos:column="30">(<pos:position pos:line="16" pos:column="31"/></operator><operator pos:line="16" pos:column="31">*<pos:position pos:line="16" pos:column="32"/></operator><name><name pos:line="16" pos:column="32">ctx<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">-&gt;<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="37">re_result<pos:position pos:line="16" pos:column="46"/></name></name><operator pos:line="16" pos:column="46">)<pos:position pos:line="16" pos:column="47"/></operator><index pos:line="16" pos:column="47">[<expr><name pos:line="16" pos:column="48">idx<pos:position pos:line="16" pos:column="51"/></name></expr>]<pos:position pos:line="16" pos:column="52"/></index><operator pos:line="16" pos:column="52">.<pos:position pos:line="16" pos:column="53"/></operator><name pos:line="16" pos:column="53">rm_so<pos:position pos:line="16" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="59"/></decl_stmt>
            <if pos:line="17" pos:column="13">if <condition pos:line="17" pos:column="16">(    <expr><operator pos:line="17" pos:column="21">(<pos:position pos:line="17" pos:column="22"/></operator><operator pos:line="17" pos:column="22">*<pos:position pos:line="17" pos:column="23"/></operator><name><name pos:line="17" pos:column="23">ctx<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">-&gt;<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="28">re_result<pos:position pos:line="17" pos:column="37"/></name></name><operator pos:line="17" pos:column="37">)<pos:position pos:line="17" pos:column="38"/></operator><index pos:line="17" pos:column="38">[<expr><name pos:line="17" pos:column="39">idx<pos:position pos:line="17" pos:column="42"/></name></expr>]<pos:position pos:line="17" pos:column="43"/></index><operator pos:line="17" pos:column="43">.<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="44">rm_so<pos:position pos:line="17" pos:column="49"/></name> <operator pos:line="17" pos:column="50">&lt;<pos:position pos:line="17" pos:column="54"/></operator> <literal type="number" pos:line="17" pos:column="52">0<pos:position pos:line="17" pos:column="53"/></literal>
                 <operator pos:line="18" pos:column="18">||<pos:position pos:line="18" pos:column="20"/></operator> <operator pos:line="18" pos:column="21">(<pos:position pos:line="18" pos:column="22"/></operator><operator pos:line="18" pos:column="22">*<pos:position pos:line="18" pos:column="23"/></operator><name><name pos:line="18" pos:column="23">ctx<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">-&gt;<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="28">re_result<pos:position pos:line="18" pos:column="37"/></name></name><operator pos:line="18" pos:column="37">)<pos:position pos:line="18" pos:column="38"/></operator><index pos:line="18" pos:column="38">[<expr><name pos:line="18" pos:column="39">idx<pos:position pos:line="18" pos:column="42"/></name></expr>]<pos:position pos:line="18" pos:column="43"/></index><operator pos:line="18" pos:column="43">.<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="44">rm_eo<pos:position pos:line="18" pos:column="49"/></name> <operator pos:line="18" pos:column="50">&lt;<pos:position pos:line="18" pos:column="54"/></operator> <literal type="number" pos:line="18" pos:column="52">0<pos:position pos:line="18" pos:column="53"/></literal></expr>)<pos:position pos:line="18" pos:column="54"/></condition><then pos:line="18" pos:column="54"> <block pos:line="18" pos:column="55">{
                <return pos:line="19" pos:column="17">return <expr><name pos:line="19" pos:column="24">NULL<pos:position pos:line="19" pos:column="28"/></name></expr>;<pos:position pos:line="19" pos:column="29"/></return>
            }<pos:position pos:line="20" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="21" pos:column="13">val<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <call><name pos:line="21" pos:column="19">apr_pstrmemdup<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name><name pos:line="21" pos:column="34">r<pos:position pos:line="21" pos:column="35"/></name><operator pos:line="21" pos:column="35">-&gt;<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="37">pool<pos:position pos:line="21" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="43">ctx<pos:position pos:line="21" pos:column="46"/></name><operator pos:line="21" pos:column="46">-&gt;<pos:position pos:line="21" pos:column="51"/></operator><name pos:line="21" pos:column="48">re_string<pos:position pos:line="21" pos:column="57"/></name></name> 
                                        <operator pos:line="22" pos:column="41">+<pos:position pos:line="22" pos:column="42"/></operator> <operator pos:line="22" pos:column="43">(<pos:position pos:line="22" pos:column="44"/></operator><operator pos:line="22" pos:column="44">*<pos:position pos:line="22" pos:column="45"/></operator><name><name pos:line="22" pos:column="45">ctx<pos:position pos:line="22" pos:column="48"/></name><operator pos:line="22" pos:column="48">-&gt;<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="50">re_result<pos:position pos:line="22" pos:column="59"/></name></name><operator pos:line="22" pos:column="59">)<pos:position pos:line="22" pos:column="60"/></operator><index pos:line="22" pos:column="60">[<expr><name pos:line="22" pos:column="61">idx<pos:position pos:line="22" pos:column="64"/></name></expr>]<pos:position pos:line="22" pos:column="65"/></index><operator pos:line="22" pos:column="65">.<pos:position pos:line="22" pos:column="66"/></operator><name pos:line="22" pos:column="66">rm_so<pos:position pos:line="22" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="73">len<pos:position pos:line="22" pos:column="76"/></name></expr></argument>)<pos:position pos:line="22" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="78"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></else></if>
    }<pos:position pos:line="24" pos:column="6"/></block></then>
    <else pos:line="25" pos:column="5">else <block pos:line="25" pos:column="10">{
        <expr_stmt><expr><name pos:line="26" pos:column="9">val<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <call><name pos:line="26" pos:column="15">apr_table_get<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><name><name pos:line="26" pos:column="29">r<pos:position pos:line="26" pos:column="30"/></name><operator pos:line="26" pos:column="30">-&gt;<pos:position pos:line="26" pos:column="35"/></operator><name pos:line="26" pos:column="32">subprocess_env<pos:position pos:line="26" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="48">var<pos:position pos:line="26" pos:column="51"/></name></expr></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="53"/></expr_stmt>

        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">val<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">==<pos:position pos:line="28" pos:column="19"/></operator> <name pos:line="28" pos:column="20">LAZY_VALUE<pos:position pos:line="28" pos:column="30"/></name></expr>)<pos:position pos:line="28" pos:column="31"/></condition><then pos:line="28" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="13">val<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">=<pos:position pos:line="29" pos:column="18"/></operator> <call><name pos:line="29" pos:column="19">add_include_vars_lazy<pos:position pos:line="29" pos:column="40"/></name><argument_list pos:line="29" pos:column="40">(<argument><expr><name pos:line="29" pos:column="41">r<pos:position pos:line="29" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="44">var<pos:position pos:line="29" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="49">ctx<pos:position pos:line="29" pos:column="52"/></name><operator pos:line="29" pos:column="52">-&gt;<pos:position pos:line="29" pos:column="57"/></operator><name pos:line="29" pos:column="54">time_str<pos:position pos:line="29" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="64"/></expr_stmt></block></then></if>
    }<pos:position pos:line="30" pos:column="6"/></block></else></if>
    <return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">val<pos:position pos:line="31" pos:column="15"/></name></expr>;<pos:position pos:line="31" pos:column="16"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
