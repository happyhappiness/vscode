<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1405_httpd-2.4.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">get_entry<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">apr_pool_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">p<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">accept_rec<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">result<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>,
                             <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">accept_line<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name><name pos:line="4" pos:column="5">result<pos:position pos:line="4" pos:column="11"/></name><operator pos:line="4" pos:column="11">-&gt;<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="13">quality<pos:position pos:line="4" pos:column="20"/></name></name> <operator pos:line="4" pos:column="21">=<pos:position pos:line="4" pos:column="22"/></operator> <literal type="number" pos:line="4" pos:column="23">1.0f<pos:position pos:line="4" pos:column="27"/></literal></expr>;<pos:position pos:line="4" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5" pos:column="5">result<pos:position pos:line="5" pos:column="11"/></name><operator pos:line="5" pos:column="11">-&gt;<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="13">level<pos:position pos:line="5" pos:column="18"/></name></name> <operator pos:line="5" pos:column="19">=<pos:position pos:line="5" pos:column="20"/></operator> <literal type="number" pos:line="5" pos:column="21">0.0f<pos:position pos:line="5" pos:column="25"/></literal></expr>;<pos:position pos:line="5" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="6" pos:column="5">result<pos:position pos:line="6" pos:column="11"/></name><operator pos:line="6" pos:column="11">-&gt;<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="13">charset<pos:position pos:line="6" pos:column="20"/></name></name> <operator pos:line="6" pos:column="21">=<pos:position pos:line="6" pos:column="22"/></operator> <literal type="string" pos:line="6" pos:column="23">""<pos:position pos:line="6" pos:column="25"/></literal></expr>;<pos:position pos:line="6" pos:column="26"/></expr_stmt>

    <comment type="block" pos:line="8" pos:column="5">/*
     * Note that this handles what I gather is the "old format",
     *
     *    Accept: text/html text/plain moo/zot
     *
     * without any compatibility kludges --- if the token after the
     * MIME type begins with a semicolon, we know we're looking at parms,
     * otherwise, we know we aren't.  (So why all the pissing and moaning
     * in the CERN server code?  I must be missing something).
     */</comment>

    <expr_stmt><expr><name><name pos:line="19" pos:column="5">result<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">-&gt;<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="13">name<pos:position pos:line="19" pos:column="17"/></name></name> <operator pos:line="19" pos:column="18">=<pos:position pos:line="19" pos:column="19"/></operator> <call><name pos:line="19" pos:column="20">ap_get_token<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">p<pos:position pos:line="19" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="36">&amp;<pos:position pos:line="19" pos:column="41"/></operator><name pos:line="19" pos:column="37">accept_line<pos:position pos:line="19" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="50">0<pos:position pos:line="19" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">ap_str_tolower<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name><name pos:line="20" pos:column="20">result<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">-&gt;<pos:position pos:line="20" pos:column="31"/></operator><name pos:line="20" pos:column="28">name<pos:position pos:line="20" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>     <comment type="block" pos:line="20" pos:column="39">/* You want case insensitive,
                                       * you'll *get* case insensitive.
                                       */</comment>

    <comment type="block" pos:line="24" pos:column="5">/* KLUDGE!!! Default HTML to level 2.0 unless the browser
     * *explicitly* says something else.
     */</comment>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><operator pos:line="28" pos:column="9">!<pos:position pos:line="28" pos:column="10"/></operator><call><name pos:line="28" pos:column="10">strcmp<pos:position pos:line="28" pos:column="16"/></name><argument_list pos:line="28" pos:column="16">(<argument><expr><name><name pos:line="28" pos:column="17">result<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">-&gt;<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="25">name<pos:position pos:line="28" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="31">"text/html"<pos:position pos:line="28" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="43"/></argument_list></call> <operator pos:line="28" pos:column="44">&amp;&amp;<pos:position pos:line="28" pos:column="54"/></operator> <operator pos:line="28" pos:column="47">(<pos:position pos:line="28" pos:column="48"/></operator><name><name pos:line="28" pos:column="48">result<pos:position pos:line="28" pos:column="54"/></name><operator pos:line="28" pos:column="54">-&gt;<pos:position pos:line="28" pos:column="59"/></operator><name pos:line="28" pos:column="56">level<pos:position pos:line="28" pos:column="61"/></name></name> <operator pos:line="28" pos:column="62">==<pos:position pos:line="28" pos:column="64"/></operator> <literal type="number" pos:line="28" pos:column="65">0.0<pos:position pos:line="28" pos:column="68"/></literal><operator pos:line="28" pos:column="68">)<pos:position pos:line="28" pos:column="69"/></operator></expr>)<pos:position pos:line="28" pos:column="70"/></condition><then pos:line="28" pos:column="70"> <block pos:line="28" pos:column="71">{
        <expr_stmt><expr><name><name pos:line="29" pos:column="9">result<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">level<pos:position pos:line="29" pos:column="22"/></name></name> <operator pos:line="29" pos:column="23">=<pos:position pos:line="29" pos:column="24"/></operator> <literal type="number" pos:line="29" pos:column="25">2.0f<pos:position pos:line="29" pos:column="29"/></literal></expr>;<pos:position pos:line="29" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then>
    <elseif pos:line="31" pos:column="5">else <if pos:line="31" pos:column="10">if <condition pos:line="31" pos:column="13">(<expr><operator pos:line="31" pos:column="14">!<pos:position pos:line="31" pos:column="15"/></operator><call><name pos:line="31" pos:column="15">strcmp<pos:position pos:line="31" pos:column="21"/></name><argument_list pos:line="31" pos:column="21">(<argument><expr><name><name pos:line="31" pos:column="22">result<pos:position pos:line="31" pos:column="28"/></name><operator pos:line="31" pos:column="28">-&gt;<pos:position pos:line="31" pos:column="33"/></operator><name pos:line="31" pos:column="30">name<pos:position pos:line="31" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="36">INCLUDES_MAGIC_TYPE<pos:position pos:line="31" pos:column="55"/></name></expr></argument>)<pos:position pos:line="31" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="57"/></condition><then pos:line="31" pos:column="57"> <block pos:line="31" pos:column="58">{
        <expr_stmt><expr><name><name pos:line="32" pos:column="9">result<pos:position pos:line="32" pos:column="15"/></name><operator pos:line="32" pos:column="15">-&gt;<pos:position pos:line="32" pos:column="20"/></operator><name pos:line="32" pos:column="17">level<pos:position pos:line="32" pos:column="22"/></name></name> <operator pos:line="32" pos:column="23">=<pos:position pos:line="32" pos:column="24"/></operator> <literal type="number" pos:line="32" pos:column="25">2.0f<pos:position pos:line="32" pos:column="29"/></literal></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="34" pos:column="5">else <if pos:line="34" pos:column="10">if <condition pos:line="34" pos:column="13">(<expr><operator pos:line="34" pos:column="14">!<pos:position pos:line="34" pos:column="15"/></operator><call><name pos:line="34" pos:column="15">strcmp<pos:position pos:line="34" pos:column="21"/></name><argument_list pos:line="34" pos:column="21">(<argument><expr><name><name pos:line="34" pos:column="22">result<pos:position pos:line="34" pos:column="28"/></name><operator pos:line="34" pos:column="28">-&gt;<pos:position pos:line="34" pos:column="33"/></operator><name pos:line="34" pos:column="30">name<pos:position pos:line="34" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="36">INCLUDES_MAGIC_TYPE3<pos:position pos:line="34" pos:column="56"/></name></expr></argument>)<pos:position pos:line="34" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="58"/></condition><then pos:line="34" pos:column="58"> <block pos:line="34" pos:column="59">{
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">result<pos:position pos:line="35" pos:column="15"/></name><operator pos:line="35" pos:column="15">-&gt;<pos:position pos:line="35" pos:column="20"/></operator><name pos:line="35" pos:column="17">level<pos:position pos:line="35" pos:column="22"/></name></name> <operator pos:line="35" pos:column="23">=<pos:position pos:line="35" pos:column="24"/></operator> <literal type="number" pos:line="35" pos:column="25">3.0f<pos:position pos:line="35" pos:column="29"/></literal></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if></elseif></if>

    <while pos:line="38" pos:column="5">while <condition pos:line="38" pos:column="11">(<expr><operator pos:line="38" pos:column="12">*<pos:position pos:line="38" pos:column="13"/></operator><name pos:line="38" pos:column="13">accept_line<pos:position pos:line="38" pos:column="24"/></name> <operator pos:line="38" pos:column="25">==<pos:position pos:line="38" pos:column="27"/></operator> <literal type="char" pos:line="38" pos:column="28">';'<pos:position pos:line="38" pos:column="31"/></literal></expr>)<pos:position pos:line="38" pos:column="32"/></condition> <block pos:line="38" pos:column="33">{
        <comment type="block" pos:line="39" pos:column="9">/* Parameters ... */</comment>

        <decl_stmt><decl><type><name pos:line="41" pos:column="9">char<pos:position pos:line="41" pos:column="13"/></name> <modifier pos:line="41" pos:column="14">*<pos:position pos:line="41" pos:column="15"/></modifier></type><name pos:line="41" pos:column="15">parm<pos:position pos:line="41" pos:column="19"/></name></decl>;<pos:position pos:line="41" pos:column="20"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="42" pos:column="9">char<pos:position pos:line="42" pos:column="13"/></name> <modifier pos:line="42" pos:column="14">*<pos:position pos:line="42" pos:column="15"/></modifier></type><name pos:line="42" pos:column="15">cp<pos:position pos:line="42" pos:column="17"/></name></decl>;<pos:position pos:line="42" pos:column="18"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="43" pos:column="9">char<pos:position pos:line="43" pos:column="13"/></name> <modifier pos:line="43" pos:column="14">*<pos:position pos:line="43" pos:column="15"/></modifier></type><name pos:line="43" pos:column="15">end<pos:position pos:line="43" pos:column="18"/></name></decl>;<pos:position pos:line="43" pos:column="19"/></decl_stmt>

        <expr_stmt><expr><operator pos:line="45" pos:column="9">++<pos:position pos:line="45" pos:column="11"/></operator><name pos:line="45" pos:column="11">accept_line<pos:position pos:line="45" pos:column="22"/></name></expr>;<pos:position pos:line="45" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="46" pos:column="9">parm<pos:position pos:line="46" pos:column="13"/></name> <operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator> <call><name pos:line="46" pos:column="16">ap_get_token<pos:position pos:line="46" pos:column="28"/></name><argument_list pos:line="46" pos:column="28">(<argument><expr><name pos:line="46" pos:column="29">p<pos:position pos:line="46" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="32">&amp;<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="33">accept_line<pos:position pos:line="46" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="46">1<pos:position pos:line="46" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="49"/></expr_stmt>

        <comment type="block" pos:line="48" pos:column="9">/* Look for 'var = value' --- and make sure the var is in lcase. */</comment>

        <for pos:line="50" pos:column="9">for <control pos:line="50" pos:column="13">(<init><expr><name pos:line="50" pos:column="14">cp<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">=<pos:position pos:line="50" pos:column="18"/></operator> <name pos:line="50" pos:column="19">parm<pos:position pos:line="50" pos:column="23"/></name></expr>;<pos:position pos:line="50" pos:column="24"/></init> <condition><expr><operator pos:line="50" pos:column="25">(<pos:position pos:line="50" pos:column="26"/></operator><operator pos:line="50" pos:column="26">*<pos:position pos:line="50" pos:column="27"/></operator><name pos:line="50" pos:column="27">cp<pos:position pos:line="50" pos:column="29"/></name> <operator pos:line="50" pos:column="30">&amp;&amp;<pos:position pos:line="50" pos:column="40"/></operator> <operator pos:line="50" pos:column="33">!<pos:position pos:line="50" pos:column="34"/></operator><call><name pos:line="50" pos:column="34">apr_isspace<pos:position pos:line="50" pos:column="45"/></name><argument_list pos:line="50" pos:column="45">(<argument><expr><operator pos:line="50" pos:column="46">*<pos:position pos:line="50" pos:column="47"/></operator><name pos:line="50" pos:column="47">cp<pos:position pos:line="50" pos:column="49"/></name></expr></argument>)<pos:position pos:line="50" pos:column="50"/></argument_list></call> <operator pos:line="50" pos:column="51">&amp;&amp;<pos:position pos:line="50" pos:column="61"/></operator> <operator pos:line="50" pos:column="54">*<pos:position pos:line="50" pos:column="55"/></operator><name pos:line="50" pos:column="55">cp<pos:position pos:line="50" pos:column="57"/></name> <operator pos:line="50" pos:column="58">!=<pos:position pos:line="50" pos:column="60"/></operator> <literal type="char" pos:line="50" pos:column="61">'='<pos:position pos:line="50" pos:column="64"/></literal><operator pos:line="50" pos:column="64">)<pos:position pos:line="50" pos:column="65"/></operator></expr>;<pos:position pos:line="50" pos:column="66"/></condition> <incr><expr><operator pos:line="50" pos:column="67">++<pos:position pos:line="50" pos:column="69"/></operator><name pos:line="50" pos:column="69">cp<pos:position pos:line="50" pos:column="71"/></name></expr></incr>)<pos:position pos:line="50" pos:column="72"/></control> <block pos:line="50" pos:column="73">{
            <expr_stmt><expr><operator pos:line="51" pos:column="13">*<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="14">cp<pos:position pos:line="51" pos:column="16"/></name> <operator pos:line="51" pos:column="17">=<pos:position pos:line="51" pos:column="18"/></operator> <call><name pos:line="51" pos:column="19">apr_tolower<pos:position pos:line="51" pos:column="30"/></name><argument_list pos:line="51" pos:column="30">(<argument><expr><operator pos:line="51" pos:column="31">*<pos:position pos:line="51" pos:column="32"/></operator><name pos:line="51" pos:column="32">cp<pos:position pos:line="51" pos:column="34"/></name></expr></argument>)<pos:position pos:line="51" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="36"/></expr_stmt>
        }<pos:position pos:line="52" pos:column="10"/></block></for>

        <if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><operator pos:line="54" pos:column="13">!<pos:position pos:line="54" pos:column="14"/></operator><operator pos:line="54" pos:column="14">*<pos:position pos:line="54" pos:column="15"/></operator><name pos:line="54" pos:column="15">cp<pos:position pos:line="54" pos:column="17"/></name></expr>)<pos:position pos:line="54" pos:column="18"/></condition><then pos:line="54" pos:column="18"> <block pos:line="54" pos:column="19">{
            <continue pos:line="55" pos:column="13">continue;<pos:position pos:line="55" pos:column="22"/></continue>           <comment type="block" pos:line="55" pos:column="33">/* No '='; just ignore it. */</comment>
        }<pos:position pos:line="56" pos:column="10"/></block></then></if>

        <expr_stmt><expr><operator pos:line="58" pos:column="9">*<pos:position pos:line="58" pos:column="10"/></operator><name pos:line="58" pos:column="10">cp<pos:position pos:line="58" pos:column="12"/></name><operator pos:line="58" pos:column="12">++<pos:position pos:line="58" pos:column="14"/></operator> <operator pos:line="58" pos:column="15">=<pos:position pos:line="58" pos:column="16"/></operator> <literal type="char" pos:line="58" pos:column="17">'\0'<pos:position pos:line="58" pos:column="21"/></literal></expr>;<pos:position pos:line="58" pos:column="22"/></expr_stmt>           <comment type="block" pos:line="58" pos:column="33">/* Delimit var */</comment>
        <while pos:line="59" pos:column="9">while <condition pos:line="59" pos:column="15">(<expr><operator pos:line="59" pos:column="16">*<pos:position pos:line="59" pos:column="17"/></operator><name pos:line="59" pos:column="17">cp<pos:position pos:line="59" pos:column="19"/></name> <operator pos:line="59" pos:column="20">&amp;&amp;<pos:position pos:line="59" pos:column="30"/></operator> <operator pos:line="59" pos:column="23">(<pos:position pos:line="59" pos:column="24"/></operator><call><name pos:line="59" pos:column="24">apr_isspace<pos:position pos:line="59" pos:column="35"/></name><argument_list pos:line="59" pos:column="35">(<argument><expr><operator pos:line="59" pos:column="36">*<pos:position pos:line="59" pos:column="37"/></operator><name pos:line="59" pos:column="37">cp<pos:position pos:line="59" pos:column="39"/></name></expr></argument>)<pos:position pos:line="59" pos:column="40"/></argument_list></call> <operator pos:line="59" pos:column="41">||<pos:position pos:line="59" pos:column="43"/></operator> <operator pos:line="59" pos:column="44">*<pos:position pos:line="59" pos:column="45"/></operator><name pos:line="59" pos:column="45">cp<pos:position pos:line="59" pos:column="47"/></name> <operator pos:line="59" pos:column="48">==<pos:position pos:line="59" pos:column="50"/></operator> <literal type="char" pos:line="59" pos:column="51">'='<pos:position pos:line="59" pos:column="54"/></literal><operator pos:line="59" pos:column="54">)<pos:position pos:line="59" pos:column="55"/></operator></expr>)<pos:position pos:line="59" pos:column="56"/></condition> <block pos:line="59" pos:column="57">{
            <expr_stmt><expr><operator pos:line="60" pos:column="13">++<pos:position pos:line="60" pos:column="15"/></operator><name pos:line="60" pos:column="15">cp<pos:position pos:line="60" pos:column="17"/></name></expr>;<pos:position pos:line="60" pos:column="18"/></expr_stmt>
        }<pos:position pos:line="61" pos:column="10"/></block></while>

        <if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><operator pos:line="63" pos:column="13">*<pos:position pos:line="63" pos:column="14"/></operator><name pos:line="63" pos:column="14">cp<pos:position pos:line="63" pos:column="16"/></name> <operator pos:line="63" pos:column="17">==<pos:position pos:line="63" pos:column="19"/></operator> <literal type="char" pos:line="63" pos:column="20">'"'<pos:position pos:line="63" pos:column="23"/></literal></expr>)<pos:position pos:line="63" pos:column="24"/></condition><then pos:line="63" pos:column="24"> <block pos:line="63" pos:column="25">{
            <expr_stmt><expr><operator pos:line="64" pos:column="13">++<pos:position pos:line="64" pos:column="15"/></operator><name pos:line="64" pos:column="15">cp<pos:position pos:line="64" pos:column="17"/></name></expr>;<pos:position pos:line="64" pos:column="18"/></expr_stmt>
            <for pos:line="65" pos:column="13">for <control pos:line="65" pos:column="17">(<init><expr><name pos:line="65" pos:column="18">end<pos:position pos:line="65" pos:column="21"/></name> <operator pos:line="65" pos:column="22">=<pos:position pos:line="65" pos:column="23"/></operator> <name pos:line="65" pos:column="24">cp<pos:position pos:line="65" pos:column="26"/></name></expr>;<pos:position pos:line="65" pos:column="27"/></init>
                 <condition><expr><operator pos:line="66" pos:column="18">(<pos:position pos:line="66" pos:column="19"/></operator><operator pos:line="66" pos:column="19">*<pos:position pos:line="66" pos:column="20"/></operator><name pos:line="66" pos:column="20">end<pos:position pos:line="66" pos:column="23"/></name> <operator pos:line="66" pos:column="24">&amp;&amp;<pos:position pos:line="66" pos:column="34"/></operator> <operator pos:line="66" pos:column="27">*<pos:position pos:line="66" pos:column="28"/></operator><name pos:line="66" pos:column="28">end<pos:position pos:line="66" pos:column="31"/></name> <operator pos:line="66" pos:column="32">!=<pos:position pos:line="66" pos:column="34"/></operator> <literal type="char" pos:line="66" pos:column="35">'\n'<pos:position pos:line="66" pos:column="39"/></literal> <operator pos:line="66" pos:column="40">&amp;&amp;<pos:position pos:line="66" pos:column="50"/></operator> <operator pos:line="66" pos:column="43">*<pos:position pos:line="66" pos:column="44"/></operator><name pos:line="66" pos:column="44">end<pos:position pos:line="66" pos:column="47"/></name> <operator pos:line="66" pos:column="48">!=<pos:position pos:line="66" pos:column="50"/></operator> <literal type="char" pos:line="66" pos:column="51">'\r'<pos:position pos:line="66" pos:column="55"/></literal> <operator pos:line="66" pos:column="56">&amp;&amp;<pos:position pos:line="66" pos:column="66"/></operator> <operator pos:line="66" pos:column="59">*<pos:position pos:line="66" pos:column="60"/></operator><name pos:line="66" pos:column="60">end<pos:position pos:line="66" pos:column="63"/></name> <operator pos:line="66" pos:column="64">!=<pos:position pos:line="66" pos:column="66"/></operator> <literal type="char" pos:line="66" pos:column="67">'\"'<pos:position pos:line="66" pos:column="71"/></literal><operator pos:line="66" pos:column="71">)<pos:position pos:line="66" pos:column="72"/></operator></expr>;<pos:position pos:line="66" pos:column="73"/></condition>
                 <incr><expr><name pos:line="67" pos:column="18">end<pos:position pos:line="67" pos:column="21"/></name><operator pos:line="67" pos:column="21">++<pos:position pos:line="67" pos:column="23"/></operator></expr></incr>)<pos:position pos:line="67" pos:column="24"/></control><block type="pseudo"><empty_stmt pos:line="67" pos:column="24">;<pos:position pos:line="67" pos:column="25"/></empty_stmt></block></for>
        }<pos:position pos:line="68" pos:column="10"/></block></then>
        <else pos:line="69" pos:column="9">else <block pos:line="69" pos:column="14">{
            <for pos:line="70" pos:column="13">for <control pos:line="70" pos:column="17">(<init><expr><name pos:line="70" pos:column="18">end<pos:position pos:line="70" pos:column="21"/></name> <operator pos:line="70" pos:column="22">=<pos:position pos:line="70" pos:column="23"/></operator> <name pos:line="70" pos:column="24">cp<pos:position pos:line="70" pos:column="26"/></name></expr>;<pos:position pos:line="70" pos:column="27"/></init> <condition><expr><operator pos:line="70" pos:column="28">(<pos:position pos:line="70" pos:column="29"/></operator><operator pos:line="70" pos:column="29">*<pos:position pos:line="70" pos:column="30"/></operator><name pos:line="70" pos:column="30">end<pos:position pos:line="70" pos:column="33"/></name> <operator pos:line="70" pos:column="34">&amp;&amp;<pos:position pos:line="70" pos:column="44"/></operator> <operator pos:line="70" pos:column="37">!<pos:position pos:line="70" pos:column="38"/></operator><call><name pos:line="70" pos:column="38">apr_isspace<pos:position pos:line="70" pos:column="49"/></name><argument_list pos:line="70" pos:column="49">(<argument><expr><operator pos:line="70" pos:column="50">*<pos:position pos:line="70" pos:column="51"/></operator><name pos:line="70" pos:column="51">end<pos:position pos:line="70" pos:column="54"/></name></expr></argument>)<pos:position pos:line="70" pos:column="55"/></argument_list></call><operator pos:line="70" pos:column="55">)<pos:position pos:line="70" pos:column="56"/></operator></expr>;<pos:position pos:line="70" pos:column="57"/></condition> <incr><expr><name pos:line="70" pos:column="58">end<pos:position pos:line="70" pos:column="61"/></name><operator pos:line="70" pos:column="61">++<pos:position pos:line="70" pos:column="63"/></operator></expr></incr>)<pos:position pos:line="70" pos:column="64"/></control><block type="pseudo"><empty_stmt pos:line="70" pos:column="64">;<pos:position pos:line="70" pos:column="65"/></empty_stmt></block></for>
        }<pos:position pos:line="71" pos:column="10"/></block></else></if>
        <if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><operator pos:line="72" pos:column="13">*<pos:position pos:line="72" pos:column="14"/></operator><name pos:line="72" pos:column="14">end<pos:position pos:line="72" pos:column="17"/></name></expr>)<pos:position pos:line="72" pos:column="18"/></condition><then pos:line="72" pos:column="18"> <block pos:line="72" pos:column="19">{
            <expr_stmt><expr><operator pos:line="73" pos:column="13">*<pos:position pos:line="73" pos:column="14"/></operator><name pos:line="73" pos:column="14">end<pos:position pos:line="73" pos:column="17"/></name> <operator pos:line="73" pos:column="18">=<pos:position pos:line="73" pos:column="19"/></operator> <literal type="char" pos:line="73" pos:column="20">'\0'<pos:position pos:line="73" pos:column="24"/></literal></expr>;<pos:position pos:line="73" pos:column="25"/></expr_stmt>        <comment type="block" pos:line="73" pos:column="33">/* strip ending quote or return */</comment>
        }<pos:position pos:line="74" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">ap_str_tolower<pos:position pos:line="75" pos:column="23"/></name><argument_list pos:line="75" pos:column="23">(<argument><expr><name pos:line="75" pos:column="24">cp<pos:position pos:line="75" pos:column="26"/></name></expr></argument>)<pos:position pos:line="75" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="28"/></expr_stmt>

        <if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><name><name pos:line="77" pos:column="13">parm<pos:position pos:line="77" pos:column="17"/></name><index pos:line="77" pos:column="17">[<expr><literal type="number" pos:line="77" pos:column="18">0<pos:position pos:line="77" pos:column="19"/></literal></expr>]<pos:position pos:line="77" pos:column="20"/></index></name> <operator pos:line="77" pos:column="21">==<pos:position pos:line="77" pos:column="23"/></operator> <literal type="char" pos:line="77" pos:column="24">'q'<pos:position pos:line="77" pos:column="27"/></literal>
            <operator pos:line="78" pos:column="13">&amp;&amp;<pos:position pos:line="78" pos:column="23"/></operator> <operator pos:line="78" pos:column="16">(<pos:position pos:line="78" pos:column="17"/></operator><name><name pos:line="78" pos:column="17">parm<pos:position pos:line="78" pos:column="21"/></name><index pos:line="78" pos:column="21">[<expr><literal type="number" pos:line="78" pos:column="22">1<pos:position pos:line="78" pos:column="23"/></literal></expr>]<pos:position pos:line="78" pos:column="24"/></index></name> <operator pos:line="78" pos:column="25">==<pos:position pos:line="78" pos:column="27"/></operator> <literal type="char" pos:line="78" pos:column="28">'\0'<pos:position pos:line="78" pos:column="32"/></literal> <operator pos:line="78" pos:column="33">||<pos:position pos:line="78" pos:column="35"/></operator> <operator pos:line="78" pos:column="36">(<pos:position pos:line="78" pos:column="37"/></operator><name><name pos:line="78" pos:column="37">parm<pos:position pos:line="78" pos:column="41"/></name><index pos:line="78" pos:column="41">[<expr><literal type="number" pos:line="78" pos:column="42">1<pos:position pos:line="78" pos:column="43"/></literal></expr>]<pos:position pos:line="78" pos:column="44"/></index></name> <operator pos:line="78" pos:column="45">==<pos:position pos:line="78" pos:column="47"/></operator> <literal type="char" pos:line="78" pos:column="48">'s'<pos:position pos:line="78" pos:column="51"/></literal> <operator pos:line="78" pos:column="52">&amp;&amp;<pos:position pos:line="78" pos:column="62"/></operator> <name><name pos:line="78" pos:column="55">parm<pos:position pos:line="78" pos:column="59"/></name><index pos:line="78" pos:column="59">[<expr><literal type="number" pos:line="78" pos:column="60">2<pos:position pos:line="78" pos:column="61"/></literal></expr>]<pos:position pos:line="78" pos:column="62"/></index></name> <operator pos:line="78" pos:column="63">==<pos:position pos:line="78" pos:column="65"/></operator> <literal type="char" pos:line="78" pos:column="66">'\0'<pos:position pos:line="78" pos:column="70"/></literal><operator pos:line="78" pos:column="70">)<pos:position pos:line="78" pos:column="71"/></operator><operator pos:line="78" pos:column="71">)<pos:position pos:line="78" pos:column="72"/></operator></expr>)<pos:position pos:line="78" pos:column="73"/></condition><then pos:line="78" pos:column="73"> <block pos:line="78" pos:column="74">{
            <expr_stmt><expr><name><name pos:line="79" pos:column="13">result<pos:position pos:line="79" pos:column="19"/></name><operator pos:line="79" pos:column="19">-&gt;<pos:position pos:line="79" pos:column="24"/></operator><name pos:line="79" pos:column="21">quality<pos:position pos:line="79" pos:column="28"/></name></name> <operator pos:line="79" pos:column="29">=<pos:position pos:line="79" pos:column="30"/></operator> <call><name pos:line="79" pos:column="31">atoq<pos:position pos:line="79" pos:column="35"/></name><argument_list pos:line="79" pos:column="35">(<argument><expr><name pos:line="79" pos:column="36">cp<pos:position pos:line="79" pos:column="38"/></name></expr></argument>)<pos:position pos:line="79" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="80" pos:column="10"/></block></then>
        <elseif pos:line="81" pos:column="9">else <if pos:line="81" pos:column="14">if <condition pos:line="81" pos:column="17">(<expr><name><name pos:line="81" pos:column="18">parm<pos:position pos:line="81" pos:column="22"/></name><index pos:line="81" pos:column="22">[<expr><literal type="number" pos:line="81" pos:column="23">0<pos:position pos:line="81" pos:column="24"/></literal></expr>]<pos:position pos:line="81" pos:column="25"/></index></name> <operator pos:line="81" pos:column="26">==<pos:position pos:line="81" pos:column="28"/></operator> <literal type="char" pos:line="81" pos:column="29">'l'<pos:position pos:line="81" pos:column="32"/></literal> <operator pos:line="81" pos:column="33">&amp;&amp;<pos:position pos:line="81" pos:column="43"/></operator> <operator pos:line="81" pos:column="36">!<pos:position pos:line="81" pos:column="37"/></operator><call><name pos:line="81" pos:column="37">strcmp<pos:position pos:line="81" pos:column="43"/></name><argument_list pos:line="81" pos:column="43">(<argument><expr><operator pos:line="81" pos:column="44">&amp;<pos:position pos:line="81" pos:column="49"/></operator><name><name pos:line="81" pos:column="45">parm<pos:position pos:line="81" pos:column="49"/></name><index pos:line="81" pos:column="49">[<expr><literal type="number" pos:line="81" pos:column="50">1<pos:position pos:line="81" pos:column="51"/></literal></expr>]<pos:position pos:line="81" pos:column="52"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="54">"evel"<pos:position pos:line="81" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="62"/></condition><then pos:line="81" pos:column="62"> <block pos:line="81" pos:column="63">{
            <expr_stmt><expr><name><name pos:line="82" pos:column="13">result<pos:position pos:line="82" pos:column="19"/></name><operator pos:line="82" pos:column="19">-&gt;<pos:position pos:line="82" pos:column="24"/></operator><name pos:line="82" pos:column="21">level<pos:position pos:line="82" pos:column="26"/></name></name> <operator pos:line="82" pos:column="27">=<pos:position pos:line="82" pos:column="28"/></operator> <operator pos:line="82" pos:column="29">(<pos:position pos:line="82" pos:column="30"/></operator><name pos:line="82" pos:column="30">float<pos:position pos:line="82" pos:column="35"/></name><operator pos:line="82" pos:column="35">)<pos:position pos:line="82" pos:column="36"/></operator><call><name pos:line="82" pos:column="36">atoi<pos:position pos:line="82" pos:column="40"/></name><argument_list pos:line="82" pos:column="40">(<argument><expr><name pos:line="82" pos:column="41">cp<pos:position pos:line="82" pos:column="43"/></name></expr></argument>)<pos:position pos:line="82" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="83" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="84" pos:column="9">else <if pos:line="84" pos:column="14">if <condition pos:line="84" pos:column="17">(<expr><operator pos:line="84" pos:column="18">!<pos:position pos:line="84" pos:column="19"/></operator><call><name pos:line="84" pos:column="19">strcmp<pos:position pos:line="84" pos:column="25"/></name><argument_list pos:line="84" pos:column="25">(<argument><expr><name pos:line="84" pos:column="26">parm<pos:position pos:line="84" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="32">"charset"<pos:position pos:line="84" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="43"/></condition><then pos:line="84" pos:column="43"> <block pos:line="84" pos:column="44">{
            <expr_stmt><expr><name><name pos:line="85" pos:column="13">result<pos:position pos:line="85" pos:column="19"/></name><operator pos:line="85" pos:column="19">-&gt;<pos:position pos:line="85" pos:column="24"/></operator><name pos:line="85" pos:column="21">charset<pos:position pos:line="85" pos:column="28"/></name></name> <operator pos:line="85" pos:column="29">=<pos:position pos:line="85" pos:column="30"/></operator> <name pos:line="85" pos:column="31">cp<pos:position pos:line="85" pos:column="33"/></name></expr>;<pos:position pos:line="85" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="86" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="87" pos:column="6"/></block></while>

    <if pos:line="89" pos:column="5">if <condition pos:line="89" pos:column="8">(<expr><operator pos:line="89" pos:column="9">*<pos:position pos:line="89" pos:column="10"/></operator><name pos:line="89" pos:column="10">accept_line<pos:position pos:line="89" pos:column="21"/></name> <operator pos:line="89" pos:column="22">==<pos:position pos:line="89" pos:column="24"/></operator> <literal type="char" pos:line="89" pos:column="25">','<pos:position pos:line="89" pos:column="28"/></literal></expr>)<pos:position pos:line="89" pos:column="29"/></condition><then pos:line="89" pos:column="29"> <block pos:line="89" pos:column="30">{
        <expr_stmt><expr><operator pos:line="90" pos:column="9">++<pos:position pos:line="90" pos:column="11"/></operator><name pos:line="90" pos:column="11">accept_line<pos:position pos:line="90" pos:column="22"/></name></expr>;<pos:position pos:line="90" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="91" pos:column="6"/></block></then></if>

    <return pos:line="93" pos:column="5">return <expr><name pos:line="93" pos:column="12">accept_line<pos:position pos:line="93" pos:column="23"/></name></expr>;<pos:position pos:line="93" pos:column="24"/></return>
}<pos:position pos:line="94" pos:column="2"/></block></function></unit>
