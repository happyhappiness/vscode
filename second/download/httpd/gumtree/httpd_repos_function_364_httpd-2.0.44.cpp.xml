<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_364_httpd-2.0.44.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">dav_get_props_result<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">dav_get_allprops<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">dav_propdb<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">propdb<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">dav_prop_insert<pos:position pos:line="1" pos:column="74"/></name></type> <name pos:line="1" pos:column="75">what<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">dav_hooks_db<pos:position pos:line="3" pos:column="23"/></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">db_hooks<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><name><name pos:line="3" pos:column="36">propdb<pos:position pos:line="3" pos:column="42"/></name><operator pos:line="3" pos:column="42">-&gt;<pos:position pos:line="3" pos:column="47"/></operator><name pos:line="3" pos:column="44">db_hooks<pos:position pos:line="3" pos:column="52"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="53"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_text_header<pos:position pos:line="4" pos:column="20"/></name></type> <name pos:line="4" pos:column="21">hdr<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><block pos:line="4" pos:column="27">{ <expr><literal type="number" pos:line="4" pos:column="29">0<pos:position pos:line="4" pos:column="30"/></literal></expr> }<pos:position pos:line="4" pos:column="32"/></block></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_text_header<pos:position pos:line="5" pos:column="20"/></name></type> <name pos:line="5" pos:column="21">hdr_ns<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><block pos:line="5" pos:column="30">{ <expr><literal type="number" pos:line="5" pos:column="32">0<pos:position pos:line="5" pos:column="33"/></literal></expr> }<pos:position pos:line="5" pos:column="35"/></block></expr></init></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">dav_get_props_result<pos:position pos:line="6" pos:column="25"/></name></type> <name pos:line="6" pos:column="26">result<pos:position pos:line="6" pos:column="32"/></name> <init pos:line="6" pos:column="33">= <expr><block pos:line="6" pos:column="35">{ <expr><literal type="number" pos:line="6" pos:column="37">0<pos:position pos:line="6" pos:column="38"/></literal></expr> }<pos:position pos:line="6" pos:column="40"/></block></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">found_contenttype<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><literal type="number" pos:line="7" pos:column="29">0<pos:position pos:line="7" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">found_contentlang<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><literal type="number" pos:line="8" pos:column="29">0<pos:position pos:line="8" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">dav_prop_insert<pos:position pos:line="9" pos:column="20"/></name></type> <name pos:line="9" pos:column="21">unused_inserted<pos:position pos:line="9" pos:column="36"/></name></decl>;<pos:position pos:line="9" pos:column="37"/></decl_stmt>

    <comment type="block" pos:line="11" pos:column="5">/* if not just getting supported live properties,
     * scan all properties in the dead prop database
     */</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">what<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">!=<pos:position pos:line="14" pos:column="16"/></operator> <name pos:line="14" pos:column="17">DAV_PROP_INSERT_SUPPORTED<pos:position pos:line="14" pos:column="42"/></name></expr>)<pos:position pos:line="14" pos:column="43"/></condition><then pos:line="14" pos:column="43"> <block pos:line="14" pos:column="44">{
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name><name pos:line="15" pos:column="13">propdb<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">-&gt;<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="21">deferred<pos:position pos:line="15" pos:column="29"/></name></name></expr>)<pos:position pos:line="15" pos:column="30"/></condition><then pos:line="15" pos:column="30"> <block pos:line="15" pos:column="31">{
            <comment type="block" pos:line="16" pos:column="13">/* ### what to do with db open error? */</comment>
            <expr_stmt><expr><operator pos:line="17" pos:column="13">(<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">void<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">)<pos:position pos:line="17" pos:column="19"/></operator> <call><name pos:line="17" pos:column="20">dav_really_open_db<pos:position pos:line="17" pos:column="38"/></name><argument_list pos:line="17" pos:column="38">(<argument><expr><name pos:line="17" pos:column="39">propdb<pos:position pos:line="17" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="47">1<pos:position pos:line="17" pos:column="48"/></literal></expr></argument> <comment type="block" pos:line="17" pos:column="49">/*ro*/</comment>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="20" pos:column="9">/* initialize the result with some start tags... */</comment>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">apr_text_append<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name><name pos:line="21" pos:column="25">propdb<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">-&gt;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="33">p<pos:position pos:line="21" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="36">&amp;<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="37">hdr<pos:position pos:line="21" pos:column="40"/></name></expr></argument>,
                        <argument><expr><literal type="string" pos:line="22" pos:column="25">"&lt;D:propstat&gt;"<pos:position pos:line="22" pos:column="45"/></literal> <name pos:line="22" pos:column="40">DEBUG_CR<pos:position pos:line="22" pos:column="48"/></name>
                        <literal type="string" pos:line="23" pos:column="25">"&lt;D:prop&gt;"<pos:position pos:line="23" pos:column="41"/></literal> <name pos:line="23" pos:column="36">DEBUG_CR<pos:position pos:line="23" pos:column="44"/></name></expr></argument>)<pos:position pos:line="23" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="46"/></expr_stmt>

        <comment type="block" pos:line="25" pos:column="9">/* if there ARE properties, then scan them */</comment>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">propdb<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">-&gt;<pos:position pos:line="26" pos:column="24"/></operator><name pos:line="26" pos:column="21">db<pos:position pos:line="26" pos:column="23"/></name></name> <operator pos:line="26" pos:column="24">!=<pos:position pos:line="26" pos:column="26"/></operator> <name pos:line="26" pos:column="27">NULL<pos:position pos:line="26" pos:column="31"/></name></expr>)<pos:position pos:line="26" pos:column="32"/></condition><then pos:line="26" pos:column="32"> <block pos:line="26" pos:column="33">{
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">dav_xmlns_info<pos:position pos:line="27" pos:column="27"/></name> <modifier pos:line="27" pos:column="28">*<pos:position pos:line="27" pos:column="29"/></modifier></type><name pos:line="27" pos:column="29">xi<pos:position pos:line="27" pos:column="31"/></name> <init pos:line="27" pos:column="32">= <expr><call><name pos:line="27" pos:column="34">dav_xmlns_create<pos:position pos:line="27" pos:column="50"/></name><argument_list pos:line="27" pos:column="50">(<argument><expr><name><name pos:line="27" pos:column="51">propdb<pos:position pos:line="27" pos:column="57"/></name><operator pos:line="27" pos:column="57">-&gt;<pos:position pos:line="27" pos:column="62"/></operator><name pos:line="27" pos:column="59">p<pos:position pos:line="27" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="62"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">dav_prop_name<pos:position pos:line="28" pos:column="26"/></name></type> <name pos:line="28" pos:column="27">name<pos:position pos:line="28" pos:column="31"/></name></decl>;<pos:position pos:line="28" pos:column="32"/></decl_stmt>

            <comment type="block" pos:line="30" pos:column="13">/* define (up front) any namespaces the db might need */</comment>
            <expr_stmt><expr><call><call pos:line="31" pos:column="13">(<name pos:line="31" pos:column="14">void<pos:position pos:line="31" pos:column="18"/></name>) <argument_list pos:line="31" pos:column="20">(<argument><expr><operator pos:line="31" pos:column="21">*<pos:position pos:line="31" pos:column="22"/></operator><name><name pos:line="31" pos:column="22">db_hooks<pos:position pos:line="31" pos:column="30"/></name><operator pos:line="31" pos:column="30">-&gt;<pos:position pos:line="31" pos:column="35"/></operator><name pos:line="31" pos:column="32">define_namespaces<pos:position pos:line="31" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="50"/></argument_list></call><argument_list pos:line="31" pos:column="50">(<argument><expr><name><name pos:line="31" pos:column="51">propdb<pos:position pos:line="31" pos:column="57"/></name><operator pos:line="31" pos:column="57">-&gt;<pos:position pos:line="31" pos:column="62"/></operator><name pos:line="31" pos:column="59">db<pos:position pos:line="31" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="63">xi<pos:position pos:line="31" pos:column="65"/></name></expr></argument>)<pos:position pos:line="31" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="67"/></expr_stmt>

            <comment type="block" pos:line="33" pos:column="13">/* get the first property name, beginning the scan */</comment>
            <expr_stmt><expr><call><call pos:line="34" pos:column="13">(<name pos:line="34" pos:column="14">void<pos:position pos:line="34" pos:column="18"/></name>) <argument_list pos:line="34" pos:column="20">(<argument><expr><operator pos:line="34" pos:column="21">*<pos:position pos:line="34" pos:column="22"/></operator><name><name pos:line="34" pos:column="22">db_hooks<pos:position pos:line="34" pos:column="30"/></name><operator pos:line="34" pos:column="30">-&gt;<pos:position pos:line="34" pos:column="35"/></operator><name pos:line="34" pos:column="32">first_name<pos:position pos:line="34" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call><argument_list pos:line="34" pos:column="43">(<argument><expr><name><name pos:line="34" pos:column="44">propdb<pos:position pos:line="34" pos:column="50"/></name><operator pos:line="34" pos:column="50">-&gt;<pos:position pos:line="34" pos:column="55"/></operator><name pos:line="34" pos:column="52">db<pos:position pos:line="34" pos:column="54"/></name></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="56">&amp;<pos:position pos:line="34" pos:column="61"/></operator><name pos:line="34" pos:column="57">name<pos:position pos:line="34" pos:column="61"/></name></expr></argument>)<pos:position pos:line="34" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="63"/></expr_stmt>
            <while pos:line="35" pos:column="13">while <condition pos:line="35" pos:column="19">(<expr><name><name pos:line="35" pos:column="20">name<pos:position pos:line="35" pos:column="24"/></name><operator pos:line="35" pos:column="24">.<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="25">ns<pos:position pos:line="35" pos:column="27"/></name></name> <operator pos:line="35" pos:column="28">!=<pos:position pos:line="35" pos:column="30"/></operator> <name pos:line="35" pos:column="31">NULL<pos:position pos:line="35" pos:column="35"/></name></expr>)<pos:position pos:line="35" pos:column="36"/></condition> <block pos:line="35" pos:column="37">{

                <comment type="block" pos:line="37" pos:column="17">/*
                ** We also look for &lt;DAV:getcontenttype&gt; and
                ** &lt;DAV:getcontentlanguage&gt;. If they are not stored as dead
                ** properties, then we need to perform a subrequest to get
                ** their values (if any).
                */</comment>
                <if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><operator pos:line="43" pos:column="21">*<pos:position pos:line="43" pos:column="22"/></operator><name><name pos:line="43" pos:column="22">name<pos:position pos:line="43" pos:column="26"/></name><operator pos:line="43" pos:column="26">.<pos:position pos:line="43" pos:column="27"/></operator><name pos:line="43" pos:column="27">ns<pos:position pos:line="43" pos:column="29"/></name></name> <operator pos:line="43" pos:column="30">==<pos:position pos:line="43" pos:column="32"/></operator> <literal type="char" pos:line="43" pos:column="33">'D'<pos:position pos:line="43" pos:column="36"/></literal> <operator pos:line="43" pos:column="37">&amp;&amp;<pos:position pos:line="43" pos:column="47"/></operator> <call><name pos:line="43" pos:column="40">strcmp<pos:position pos:line="43" pos:column="46"/></name><argument_list pos:line="43" pos:column="46">(<argument><expr><name><name pos:line="43" pos:column="47">name<pos:position pos:line="43" pos:column="51"/></name><operator pos:line="43" pos:column="51">.<pos:position pos:line="43" pos:column="52"/></operator><name pos:line="43" pos:column="52">ns<pos:position pos:line="43" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="56">"DAV:"<pos:position pos:line="43" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="63"/></argument_list></call> <operator pos:line="43" pos:column="64">==<pos:position pos:line="43" pos:column="66"/></operator> <literal type="number" pos:line="43" pos:column="67">0<pos:position pos:line="43" pos:column="68"/></literal>
                    <operator pos:line="44" pos:column="21">&amp;&amp;<pos:position pos:line="44" pos:column="31"/></operator> <operator pos:line="44" pos:column="24">*<pos:position pos:line="44" pos:column="25"/></operator><name><name pos:line="44" pos:column="25">name<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">.<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="30">name<pos:position pos:line="44" pos:column="34"/></name></name> <operator pos:line="44" pos:column="35">==<pos:position pos:line="44" pos:column="37"/></operator> <literal type="char" pos:line="44" pos:column="38">'g'<pos:position pos:line="44" pos:column="41"/></literal></expr>)<pos:position pos:line="44" pos:column="42"/></condition><then pos:line="44" pos:column="42"> <block pos:line="44" pos:column="43">{
                    <if pos:line="45" pos:column="21">if <condition pos:line="45" pos:column="24">(<expr><call><name pos:line="45" pos:column="25">strcmp<pos:position pos:line="45" pos:column="31"/></name><argument_list pos:line="45" pos:column="31">(<argument><expr><name><name pos:line="45" pos:column="32">name<pos:position pos:line="45" pos:column="36"/></name><operator pos:line="45" pos:column="36">.<pos:position pos:line="45" pos:column="37"/></operator><name pos:line="45" pos:column="37">name<pos:position pos:line="45" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="43">"getcontenttype"<pos:position pos:line="45" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="60"/></argument_list></call> <operator pos:line="45" pos:column="61">==<pos:position pos:line="45" pos:column="63"/></operator> <literal type="number" pos:line="45" pos:column="64">0<pos:position pos:line="45" pos:column="65"/></literal></expr>)<pos:position pos:line="45" pos:column="66"/></condition><then pos:line="45" pos:column="66"> <block pos:line="45" pos:column="67">{
                        <expr_stmt><expr><name pos:line="46" pos:column="25">found_contenttype<pos:position pos:line="46" pos:column="42"/></name> <operator pos:line="46" pos:column="43">=<pos:position pos:line="46" pos:column="44"/></operator> <literal type="number" pos:line="46" pos:column="45">1<pos:position pos:line="46" pos:column="46"/></literal></expr>;<pos:position pos:line="46" pos:column="47"/></expr_stmt>
                    }<pos:position pos:line="47" pos:column="22"/></block></then>
                    <elseif pos:line="48" pos:column="21">else <if pos:line="48" pos:column="26">if <condition pos:line="48" pos:column="29">(<expr><call><name pos:line="48" pos:column="30">strcmp<pos:position pos:line="48" pos:column="36"/></name><argument_list pos:line="48" pos:column="36">(<argument><expr><name><name pos:line="48" pos:column="37">name<pos:position pos:line="48" pos:column="41"/></name><operator pos:line="48" pos:column="41">.<pos:position pos:line="48" pos:column="42"/></operator><name pos:line="48" pos:column="42">name<pos:position pos:line="48" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="48">"getcontentlanguage"<pos:position pos:line="48" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="69"/></argument_list></call> <operator pos:line="48" pos:column="70">==<pos:position pos:line="48" pos:column="72"/></operator> <literal type="number" pos:line="48" pos:column="73">0<pos:position pos:line="48" pos:column="74"/></literal></expr>)<pos:position pos:line="48" pos:column="75"/></condition><then pos:line="48" pos:column="75"> <block pos:line="48" pos:column="76">{
                        <expr_stmt><expr><name pos:line="49" pos:column="25">found_contentlang<pos:position pos:line="49" pos:column="42"/></name> <operator pos:line="49" pos:column="43">=<pos:position pos:line="49" pos:column="44"/></operator> <literal type="number" pos:line="49" pos:column="45">1<pos:position pos:line="49" pos:column="46"/></literal></expr>;<pos:position pos:line="49" pos:column="47"/></expr_stmt>
                    }<pos:position pos:line="50" pos:column="22"/></block></then></if></elseif></if>
                }<pos:position pos:line="51" pos:column="18"/></block></then></if>

                <if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name pos:line="53" pos:column="21">what<pos:position pos:line="53" pos:column="25"/></name> <operator pos:line="53" pos:column="26">==<pos:position pos:line="53" pos:column="28"/></operator> <name pos:line="53" pos:column="29">DAV_PROP_INSERT_VALUE<pos:position pos:line="53" pos:column="50"/></name></expr>)<pos:position pos:line="53" pos:column="51"/></condition><then pos:line="53" pos:column="51"> <block pos:line="53" pos:column="52">{
                    <decl_stmt><decl><type><name pos:line="54" pos:column="21">dav_error<pos:position pos:line="54" pos:column="30"/></name> <modifier pos:line="54" pos:column="31">*<pos:position pos:line="54" pos:column="32"/></modifier></type><name pos:line="54" pos:column="32">err<pos:position pos:line="54" pos:column="35"/></name></decl>;<pos:position pos:line="54" pos:column="36"/></decl_stmt>
                    <decl_stmt><decl><type><name pos:line="55" pos:column="21">int<pos:position pos:line="55" pos:column="24"/></name></type> <name pos:line="55" pos:column="25">found<pos:position pos:line="55" pos:column="30"/></name></decl>;<pos:position pos:line="55" pos:column="31"/></decl_stmt>

                    <if pos:line="57" pos:column="21">if <condition pos:line="57" pos:column="24">(<expr><operator pos:line="57" pos:column="25">(<pos:position pos:line="57" pos:column="26"/></operator><name pos:line="57" pos:column="26">err<pos:position pos:line="57" pos:column="29"/></name> <operator pos:line="57" pos:column="30">=<pos:position pos:line="57" pos:column="31"/></operator> <call pos:line="57" pos:column="32">(<modifier pos:line="57" pos:column="33">*<pos:position pos:line="57" pos:column="34"/></modifier><name><name pos:line="57" pos:column="34">db_hooks<pos:position pos:line="57" pos:column="42"/></name><operator pos:line="57" pos:column="42">-&gt;<pos:position pos:line="57" pos:column="47"/></operator><name pos:line="57" pos:column="44">output_value<pos:position pos:line="57" pos:column="56"/></name></name>)<argument_list pos:line="57" pos:column="57">(<argument><expr><name><name pos:line="57" pos:column="58">propdb<pos:position pos:line="57" pos:column="64"/></name><operator pos:line="57" pos:column="64">-&gt;<pos:position pos:line="57" pos:column="69"/></operator><name pos:line="57" pos:column="66">db<pos:position pos:line="57" pos:column="68"/></name></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="70">&amp;<pos:position pos:line="57" pos:column="75"/></operator><name pos:line="57" pos:column="71">name<pos:position pos:line="57" pos:column="75"/></name></expr></argument>,
                                                         <argument><expr><name pos:line="58" pos:column="58">xi<pos:position pos:line="58" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="62">&amp;<pos:position pos:line="58" pos:column="67"/></operator><name pos:line="58" pos:column="63">hdr<pos:position pos:line="58" pos:column="66"/></name></expr></argument>,
                                                         <argument><expr><operator pos:line="59" pos:column="58">&amp;<pos:position pos:line="59" pos:column="63"/></operator><name pos:line="59" pos:column="59">found<pos:position pos:line="59" pos:column="64"/></name></expr></argument>)<pos:position pos:line="59" pos:column="65"/></argument_list></call><operator pos:line="59" pos:column="65">)<pos:position pos:line="59" pos:column="66"/></operator> <operator pos:line="59" pos:column="67">!=<pos:position pos:line="59" pos:column="69"/></operator> <name pos:line="59" pos:column="70">NULL<pos:position pos:line="59" pos:column="74"/></name></expr>)<pos:position pos:line="59" pos:column="75"/></condition><then pos:line="59" pos:column="75"> <block pos:line="59" pos:column="76">{
                        <comment type="block" pos:line="60" pos:column="25">/* ### anything better to do? */</comment>
                        <comment type="block" pos:line="61" pos:column="25">/* ### probably should enter a 500 error */</comment>
                        <goto pos:line="62" pos:column="25">goto <name pos:line="62" pos:column="30">next_key<pos:position pos:line="62" pos:column="38"/></name>;<pos:position pos:line="62" pos:column="39"/></goto>
                    }<pos:position pos:line="63" pos:column="22"/></block></then></if>
                    <comment type="block" pos:line="64" pos:column="21">/* assert: found == 1 */</comment>
                }<pos:position pos:line="65" pos:column="18"/></block></then>
                <else pos:line="66" pos:column="17">else <block pos:line="66" pos:column="22">{
                    <comment type="block" pos:line="67" pos:column="21">/* the value was not requested, so just add an empty
                       tag specifying the property name. */</comment>
                    <expr_stmt><expr><call><name pos:line="69" pos:column="21">dav_output_prop_name<pos:position pos:line="69" pos:column="41"/></name><argument_list pos:line="69" pos:column="41">(<argument><expr><name><name pos:line="69" pos:column="42">propdb<pos:position pos:line="69" pos:column="48"/></name><operator pos:line="69" pos:column="48">-&gt;<pos:position pos:line="69" pos:column="53"/></operator><name pos:line="69" pos:column="50">p<pos:position pos:line="69" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="53">&amp;<pos:position pos:line="69" pos:column="58"/></operator><name pos:line="69" pos:column="54">name<pos:position pos:line="69" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="60">xi<pos:position pos:line="69" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="64">&amp;<pos:position pos:line="69" pos:column="69"/></operator><name pos:line="69" pos:column="65">hdr<pos:position pos:line="69" pos:column="68"/></name></expr></argument>)<pos:position pos:line="69" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="70"/></expr_stmt>
                }<pos:position pos:line="70" pos:column="18"/></block></else></if>

              <label><name pos:line="72" pos:column="15">next_key<pos:position pos:line="72" pos:column="23"/></name>:<pos:position pos:line="72" pos:column="24"/></label>
                <expr_stmt><expr><call><call pos:line="73" pos:column="17">(<name pos:line="73" pos:column="18">void<pos:position pos:line="73" pos:column="22"/></name>) <argument_list pos:line="73" pos:column="24">(<argument><expr><operator pos:line="73" pos:column="25">*<pos:position pos:line="73" pos:column="26"/></operator><name><name pos:line="73" pos:column="26">db_hooks<pos:position pos:line="73" pos:column="34"/></name><operator pos:line="73" pos:column="34">-&gt;<pos:position pos:line="73" pos:column="39"/></operator><name pos:line="73" pos:column="36">next_name<pos:position pos:line="73" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="46"/></argument_list></call><argument_list pos:line="73" pos:column="46">(<argument><expr><name><name pos:line="73" pos:column="47">propdb<pos:position pos:line="73" pos:column="53"/></name><operator pos:line="73" pos:column="53">-&gt;<pos:position pos:line="73" pos:column="58"/></operator><name pos:line="73" pos:column="55">db<pos:position pos:line="73" pos:column="57"/></name></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="59">&amp;<pos:position pos:line="73" pos:column="64"/></operator><name pos:line="73" pos:column="60">name<pos:position pos:line="73" pos:column="64"/></name></expr></argument>)<pos:position pos:line="73" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="66"/></expr_stmt>
            }<pos:position pos:line="74" pos:column="14"/></block></while>

            <comment type="block" pos:line="76" pos:column="13">/* all namespaces have been entered into xi. generate them into
               the output now. */</comment>
            <expr_stmt><expr><call><name pos:line="78" pos:column="13">dav_xmlns_generate<pos:position pos:line="78" pos:column="31"/></name><argument_list pos:line="78" pos:column="31">(<argument><expr><name pos:line="78" pos:column="32">xi<pos:position pos:line="78" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="36">&amp;<pos:position pos:line="78" pos:column="41"/></operator><name pos:line="78" pos:column="37">hdr_ns<pos:position pos:line="78" pos:column="43"/></name></expr></argument>)<pos:position pos:line="78" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="45"/></expr_stmt>

        }<pos:position pos:line="80" pos:column="10"/></block></then></if> <comment type="block" pos:line="80" pos:column="11">/* propdb-&gt;db != NULL */</comment>

        <comment type="block" pos:line="82" pos:column="9">/* add namespaces for all the liveprop providers */</comment>
        <expr_stmt><expr><call><name pos:line="83" pos:column="9">dav_add_all_liveprop_xmlns<pos:position pos:line="83" pos:column="35"/></name><argument_list pos:line="83" pos:column="35">(<argument><expr><name><name pos:line="83" pos:column="36">propdb<pos:position pos:line="83" pos:column="42"/></name><operator pos:line="83" pos:column="42">-&gt;<pos:position pos:line="83" pos:column="47"/></operator><name pos:line="83" pos:column="44">p<pos:position pos:line="83" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="47">&amp;<pos:position pos:line="83" pos:column="52"/></operator><name pos:line="83" pos:column="48">hdr_ns<pos:position pos:line="83" pos:column="54"/></name></expr></argument>)<pos:position pos:line="83" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="84" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="86" pos:column="5">/* ask the liveprop providers to insert their properties */</comment>
    <expr_stmt><expr><call><name pos:line="87" pos:column="5">dav_run_insert_all_liveprops<pos:position pos:line="87" pos:column="33"/></name><argument_list pos:line="87" pos:column="33">(<argument><expr><name><name pos:line="87" pos:column="34">propdb<pos:position pos:line="87" pos:column="40"/></name><operator pos:line="87" pos:column="40">-&gt;<pos:position pos:line="87" pos:column="45"/></operator><name pos:line="87" pos:column="42">r<pos:position pos:line="87" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="45">propdb<pos:position pos:line="87" pos:column="51"/></name><operator pos:line="87" pos:column="51">-&gt;<pos:position pos:line="87" pos:column="56"/></operator><name pos:line="87" pos:column="53">resource<pos:position pos:line="87" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="63">what<pos:position pos:line="87" pos:column="67"/></name></expr></argument>, <argument><expr><operator pos:line="87" pos:column="69">&amp;<pos:position pos:line="87" pos:column="74"/></operator><name pos:line="87" pos:column="70">hdr<pos:position pos:line="87" pos:column="73"/></name></expr></argument>)<pos:position pos:line="87" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="75"/></expr_stmt>

    <comment type="block" pos:line="89" pos:column="5">/* insert the standard properties */</comment>
    <comment type="block" pos:line="90" pos:column="5">/* ### should be handling the return errors here */</comment>
    <expr_stmt><expr><operator pos:line="91" pos:column="5">(<pos:position pos:line="91" pos:column="6"/></operator><name pos:line="91" pos:column="6">void<pos:position pos:line="91" pos:column="10"/></name><operator pos:line="91" pos:column="10">)<pos:position pos:line="91" pos:column="11"/></operator><call><name pos:line="91" pos:column="11">dav_insert_coreprop<pos:position pos:line="91" pos:column="30"/></name><argument_list pos:line="91" pos:column="30">(<argument><expr><name pos:line="91" pos:column="31">propdb<pos:position pos:line="91" pos:column="37"/></name></expr></argument>,
                              <argument><expr><name pos:line="92" pos:column="31">DAV_PROPID_CORE_supportedlock<pos:position pos:line="92" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="62">"supportedlock"<pos:position pos:line="92" pos:column="77"/></literal></expr></argument>,
                              <argument><expr><name pos:line="93" pos:column="31">what<pos:position pos:line="93" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="37">&amp;<pos:position pos:line="93" pos:column="42"/></operator><name pos:line="93" pos:column="38">hdr<pos:position pos:line="93" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="43">&amp;<pos:position pos:line="93" pos:column="48"/></operator><name pos:line="93" pos:column="44">unused_inserted<pos:position pos:line="93" pos:column="59"/></name></expr></argument>)<pos:position pos:line="93" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="94" pos:column="5">(<pos:position pos:line="94" pos:column="6"/></operator><name pos:line="94" pos:column="6">void<pos:position pos:line="94" pos:column="10"/></name><operator pos:line="94" pos:column="10">)<pos:position pos:line="94" pos:column="11"/></operator><call><name pos:line="94" pos:column="11">dav_insert_coreprop<pos:position pos:line="94" pos:column="30"/></name><argument_list pos:line="94" pos:column="30">(<argument><expr><name pos:line="94" pos:column="31">propdb<pos:position pos:line="94" pos:column="37"/></name></expr></argument>,
                              <argument><expr><name pos:line="95" pos:column="31">DAV_PROPID_CORE_lockdiscovery<pos:position pos:line="95" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="62">"lockdiscovery"<pos:position pos:line="95" pos:column="77"/></literal></expr></argument>,
                              <argument><expr><name pos:line="96" pos:column="31">what<pos:position pos:line="96" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="37">&amp;<pos:position pos:line="96" pos:column="42"/></operator><name pos:line="96" pos:column="38">hdr<pos:position pos:line="96" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="43">&amp;<pos:position pos:line="96" pos:column="48"/></operator><name pos:line="96" pos:column="44">unused_inserted<pos:position pos:line="96" pos:column="59"/></name></expr></argument>)<pos:position pos:line="96" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="61"/></expr_stmt>

    <comment type="block" pos:line="98" pos:column="5">/* if we didn't find these, then do the whole subreq thing. */</comment>
    <if pos:line="99" pos:column="5">if <condition pos:line="99" pos:column="8">(<expr><operator pos:line="99" pos:column="9">!<pos:position pos:line="99" pos:column="10"/></operator><name pos:line="99" pos:column="10">found_contenttype<pos:position pos:line="99" pos:column="27"/></name></expr>)<pos:position pos:line="99" pos:column="28"/></condition><then pos:line="99" pos:column="28"> <block pos:line="99" pos:column="29">{
        <comment type="block" pos:line="100" pos:column="9">/* ### should be handling the return error here */</comment>
        <expr_stmt><expr><operator pos:line="101" pos:column="9">(<pos:position pos:line="101" pos:column="10"/></operator><name pos:line="101" pos:column="10">void<pos:position pos:line="101" pos:column="14"/></name><operator pos:line="101" pos:column="14">)<pos:position pos:line="101" pos:column="15"/></operator><call><name pos:line="101" pos:column="15">dav_insert_coreprop<pos:position pos:line="101" pos:column="34"/></name><argument_list pos:line="101" pos:column="34">(<argument><expr><name pos:line="101" pos:column="35">propdb<pos:position pos:line="101" pos:column="41"/></name></expr></argument>,
                                  <argument><expr><name pos:line="102" pos:column="35">DAV_PROPID_CORE_getcontenttype<pos:position pos:line="102" pos:column="65"/></name></expr></argument>,
                                  <argument><expr><literal type="string" pos:line="103" pos:column="35">"getcontenttype"<pos:position pos:line="103" pos:column="51"/></literal></expr></argument>,
                                  <argument><expr><name pos:line="104" pos:column="35">what<pos:position pos:line="104" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="104" pos:column="41">&amp;<pos:position pos:line="104" pos:column="46"/></operator><name pos:line="104" pos:column="42">hdr<pos:position pos:line="104" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="104" pos:column="47">&amp;<pos:position pos:line="104" pos:column="52"/></operator><name pos:line="104" pos:column="48">unused_inserted<pos:position pos:line="104" pos:column="63"/></name></expr></argument>)<pos:position pos:line="104" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="105" pos:column="6"/></block></then></if>
    <if pos:line="106" pos:column="5">if <condition pos:line="106" pos:column="8">(<expr><operator pos:line="106" pos:column="9">!<pos:position pos:line="106" pos:column="10"/></operator><name pos:line="106" pos:column="10">found_contentlang<pos:position pos:line="106" pos:column="27"/></name></expr>)<pos:position pos:line="106" pos:column="28"/></condition><then pos:line="106" pos:column="28"> <block pos:line="106" pos:column="29">{
        <comment type="block" pos:line="107" pos:column="9">/* ### should be handling the return error here */</comment>
        <expr_stmt><expr><operator pos:line="108" pos:column="9">(<pos:position pos:line="108" pos:column="10"/></operator><name pos:line="108" pos:column="10">void<pos:position pos:line="108" pos:column="14"/></name><operator pos:line="108" pos:column="14">)<pos:position pos:line="108" pos:column="15"/></operator><call><name pos:line="108" pos:column="15">dav_insert_coreprop<pos:position pos:line="108" pos:column="34"/></name><argument_list pos:line="108" pos:column="34">(<argument><expr><name pos:line="108" pos:column="35">propdb<pos:position pos:line="108" pos:column="41"/></name></expr></argument>,
                                  <argument><expr><name pos:line="109" pos:column="35">DAV_PROPID_CORE_getcontentlanguage<pos:position pos:line="109" pos:column="69"/></name></expr></argument>,
                                  <argument><expr><literal type="string" pos:line="110" pos:column="35">"getcontentlanguage"<pos:position pos:line="110" pos:column="55"/></literal></expr></argument>,
                                  <argument><expr><name pos:line="111" pos:column="35">what<pos:position pos:line="111" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="111" pos:column="41">&amp;<pos:position pos:line="111" pos:column="46"/></operator><name pos:line="111" pos:column="42">hdr<pos:position pos:line="111" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="111" pos:column="47">&amp;<pos:position pos:line="111" pos:column="52"/></operator><name pos:line="111" pos:column="48">unused_inserted<pos:position pos:line="111" pos:column="63"/></name></expr></argument>)<pos:position pos:line="111" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="112" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="114" pos:column="5">/* if not just reporting on supported live props,
     * terminate the result */</comment>
    <if pos:line="116" pos:column="5">if <condition pos:line="116" pos:column="8">(<expr><name pos:line="116" pos:column="9">what<pos:position pos:line="116" pos:column="13"/></name> <operator pos:line="116" pos:column="14">!=<pos:position pos:line="116" pos:column="16"/></operator> <name pos:line="116" pos:column="17">DAV_PROP_INSERT_SUPPORTED<pos:position pos:line="116" pos:column="42"/></name></expr>)<pos:position pos:line="116" pos:column="43"/></condition><then pos:line="116" pos:column="43"> <block pos:line="116" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="117" pos:column="9">apr_text_append<pos:position pos:line="117" pos:column="24"/></name><argument_list pos:line="117" pos:column="24">(<argument><expr><name><name pos:line="117" pos:column="25">propdb<pos:position pos:line="117" pos:column="31"/></name><operator pos:line="117" pos:column="31">-&gt;<pos:position pos:line="117" pos:column="36"/></operator><name pos:line="117" pos:column="33">p<pos:position pos:line="117" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="117" pos:column="36">&amp;<pos:position pos:line="117" pos:column="41"/></operator><name pos:line="117" pos:column="37">hdr<pos:position pos:line="117" pos:column="40"/></name></expr></argument>,
                        <argument><expr><literal type="string" pos:line="118" pos:column="25">"&lt;/D:prop&gt;"<pos:position pos:line="118" pos:column="42"/></literal> <name pos:line="118" pos:column="37">DEBUG_CR<pos:position pos:line="118" pos:column="45"/></name>
                        <literal type="string" pos:line="119" pos:column="25">"&lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;"<pos:position pos:line="119" pos:column="75"/></literal> <name pos:line="119" pos:column="64">DEBUG_CR<pos:position pos:line="119" pos:column="72"/></name>
                        <literal type="string" pos:line="120" pos:column="25">"&lt;/D:propstat&gt;"<pos:position pos:line="120" pos:column="46"/></literal> <name pos:line="120" pos:column="41">DEBUG_CR<pos:position pos:line="120" pos:column="49"/></name></expr></argument>)<pos:position pos:line="120" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="51"/></expr_stmt>
    }<pos:position pos:line="121" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="123" pos:column="5">result<pos:position pos:line="123" pos:column="11"/></name><operator pos:line="123" pos:column="11">.<pos:position pos:line="123" pos:column="12"/></operator><name pos:line="123" pos:column="12">propstats<pos:position pos:line="123" pos:column="21"/></name></name> <operator pos:line="123" pos:column="22">=<pos:position pos:line="123" pos:column="23"/></operator> <name><name pos:line="123" pos:column="24">hdr<pos:position pos:line="123" pos:column="27"/></name><operator pos:line="123" pos:column="27">.<pos:position pos:line="123" pos:column="28"/></operator><name pos:line="123" pos:column="28">first<pos:position pos:line="123" pos:column="33"/></name></name></expr>;<pos:position pos:line="123" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="124" pos:column="5">result<pos:position pos:line="124" pos:column="11"/></name><operator pos:line="124" pos:column="11">.<pos:position pos:line="124" pos:column="12"/></operator><name pos:line="124" pos:column="12">xmlns<pos:position pos:line="124" pos:column="17"/></name></name> <operator pos:line="124" pos:column="18">=<pos:position pos:line="124" pos:column="19"/></operator> <name><name pos:line="124" pos:column="20">hdr_ns<pos:position pos:line="124" pos:column="26"/></name><operator pos:line="124" pos:column="26">.<pos:position pos:line="124" pos:column="27"/></operator><name pos:line="124" pos:column="27">first<pos:position pos:line="124" pos:column="32"/></name></name></expr>;<pos:position pos:line="124" pos:column="33"/></expr_stmt>
    <return pos:line="125" pos:column="5">return <expr><name pos:line="125" pos:column="12">result<pos:position pos:line="125" pos:column="18"/></name></expr>;<pos:position pos:line="125" pos:column="19"/></return>
}<pos:position pos:line="126" pos:column="2"/></block></function></unit>
