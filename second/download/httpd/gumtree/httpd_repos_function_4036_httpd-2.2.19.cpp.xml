<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_4036_httpd-2.2.19.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">BOOL<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">is_startline<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><specifier pos:line="2" pos:column="14">const<pos:position pos:line="2" pos:column="19"/></specifier> <name pos:line="2" pos:column="20">uschar<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">code<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">unsigned<pos:position pos:line="2" pos:column="42"/></name> <name pos:line="2" pos:column="43">int<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">bracket_map<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>,
  <parameter><decl><type><name pos:line="3" pos:column="3">unsigned<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">int<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">backref_map<pos:position pos:line="3" pos:column="27"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="28"/></parameter_list>
<block pos:line="4" pos:column="1">{
<do pos:line="5" pos:column="1">do <block pos:line="5" pos:column="4">{
   <decl_stmt><decl><type><specifier pos:line="6" pos:column="4">const<pos:position pos:line="6" pos:column="9"/></specifier> <name pos:line="6" pos:column="10">uschar<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">scode<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><call><name pos:line="6" pos:column="26">first_significant_code<pos:position pos:line="6" pos:column="48"/></name><argument_list pos:line="6" pos:column="48">(<argument><expr><name pos:line="6" pos:column="49">code<pos:position pos:line="6" pos:column="53"/></name> <operator pos:line="6" pos:column="54">+<pos:position pos:line="6" pos:column="55"/></operator> <literal type="number" pos:line="6" pos:column="56">1<pos:position pos:line="6" pos:column="57"/></literal><operator pos:line="6" pos:column="57">+<pos:position pos:line="6" pos:column="58"/></operator><name pos:line="6" pos:column="58">LINK_SIZE<pos:position pos:line="6" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="69">NULL<pos:position pos:line="6" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="75">0<pos:position pos:line="6" pos:column="76"/></literal></expr></argument>,
     <argument><expr><name pos:line="7" pos:column="6">FALSE<pos:position pos:line="7" pos:column="11"/></name></expr></argument>)<pos:position pos:line="7" pos:column="12"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
   <decl_stmt><decl><type><specifier pos:line="8" pos:column="4">register<pos:position pos:line="8" pos:column="12"/></specifier> <name pos:line="8" pos:column="13">int<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">op<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><operator pos:line="8" pos:column="22">*<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="23">scode<pos:position pos:line="8" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>

   <comment type="block" pos:line="10" pos:column="4">/* Capturing brackets */</comment>

   <if pos:line="12" pos:column="4">if <condition pos:line="12" pos:column="7">(<expr><name pos:line="12" pos:column="8">op<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">&gt;<pos:position pos:line="12" pos:column="15"/></operator> <name pos:line="12" pos:column="13">OP_BRA<pos:position pos:line="12" pos:column="19"/></name></expr>)<pos:position pos:line="12" pos:column="20"/></condition><then pos:line="12" pos:column="20">
     <block pos:line="13" pos:column="6">{
     <decl_stmt><decl><type><name pos:line="14" pos:column="6">int<pos:position pos:line="14" pos:column="9"/></name></type> <name pos:line="14" pos:column="10">new_map<pos:position pos:line="14" pos:column="17"/></name></decl>;<pos:position pos:line="14" pos:column="18"/></decl_stmt>
     <expr_stmt><expr><name pos:line="15" pos:column="6">op<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">-=<pos:position pos:line="15" pos:column="11"/></operator> <name pos:line="15" pos:column="12">OP_BRA<pos:position pos:line="15" pos:column="18"/></name></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>
     <if pos:line="16" pos:column="6">if <condition pos:line="16" pos:column="9">(<expr><name pos:line="16" pos:column="10">op<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">&gt;<pos:position pos:line="16" pos:column="17"/></operator> <name pos:line="16" pos:column="15">EXTRACT_BASIC_MAX<pos:position pos:line="16" pos:column="32"/></name></expr>)<pos:position pos:line="16" pos:column="33"/></condition><then pos:line="16" pos:column="33"> <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="34">op<pos:position pos:line="16" pos:column="36"/></name> <operator pos:line="16" pos:column="37">=<pos:position pos:line="16" pos:column="38"/></operator> <call><name pos:line="16" pos:column="39">GET2<pos:position pos:line="16" pos:column="43"/></name><argument_list pos:line="16" pos:column="43">(<argument><expr><name pos:line="16" pos:column="44">scode<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="51">2<pos:position pos:line="16" pos:column="52"/></literal><operator pos:line="16" pos:column="52">+<pos:position pos:line="16" pos:column="53"/></operator><name pos:line="16" pos:column="53">LINK_SIZE<pos:position pos:line="16" pos:column="62"/></name></expr></argument>)<pos:position pos:line="16" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="64"/></expr_stmt></block></then></if>
     <expr_stmt><expr><name pos:line="17" pos:column="6">new_map<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <name pos:line="17" pos:column="16">bracket_map<pos:position pos:line="17" pos:column="27"/></name> <operator pos:line="17" pos:column="28">|<pos:position pos:line="17" pos:column="29"/></operator> <operator pos:line="17" pos:column="30">(<pos:position pos:line="17" pos:column="31"/></operator><ternary><condition><expr><operator pos:line="17" pos:column="31">(<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="32">op<pos:position pos:line="17" pos:column="34"/></name> <operator pos:line="17" pos:column="35">&lt;<pos:position pos:line="17" pos:column="39"/></operator> <literal type="number" pos:line="17" pos:column="37">32<pos:position pos:line="17" pos:column="39"/></literal><operator pos:line="17" pos:column="39">)<pos:position pos:line="17" pos:column="40"/></operator></expr>?<pos:position pos:line="17" pos:column="41"/></condition><then pos:line="17" pos:column="41"> <expr><operator pos:line="17" pos:column="42">(<pos:position pos:line="17" pos:column="43"/></operator><literal type="number" pos:line="17" pos:column="43">1<pos:position pos:line="17" pos:column="44"/></literal> <operator pos:line="17" pos:column="45">&lt;&lt;<pos:position pos:line="17" pos:column="53"/></operator> <name pos:line="17" pos:column="48">op<pos:position pos:line="17" pos:column="50"/></name><operator pos:line="17" pos:column="50">)<pos:position pos:line="17" pos:column="51"/></operator></expr> <pos:position pos:line="17" pos:column="52"/></then><else pos:line="17" pos:column="52">: <expr><literal type="number" pos:line="17" pos:column="54">1<pos:position pos:line="17" pos:column="55"/></literal></expr></else></ternary><operator pos:line="17" pos:column="55">)<pos:position pos:line="17" pos:column="56"/></operator></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt>
     <if pos:line="18" pos:column="6">if <condition pos:line="18" pos:column="9">(<expr><operator pos:line="18" pos:column="10">!<pos:position pos:line="18" pos:column="11"/></operator><call><name pos:line="18" pos:column="11">is_startline<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name pos:line="18" pos:column="24">scode<pos:position pos:line="18" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="31">new_map<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="40">backref_map<pos:position pos:line="18" pos:column="51"/></name></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="53"/></condition><then pos:line="18" pos:column="53"> <block type="pseudo"><return pos:line="18" pos:column="54">return <expr><name pos:line="18" pos:column="61">FALSE<pos:position pos:line="18" pos:column="66"/></name></expr>;<pos:position pos:line="18" pos:column="67"/></return></block></then></if>
     }<pos:position pos:line="19" pos:column="7"/></block></then>

   <comment type="block" pos:line="21" pos:column="4">/* Other brackets */</comment>

   <elseif pos:line="23" pos:column="4">else <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">op<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">==<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">OP_BRA<pos:position pos:line="23" pos:column="25"/></name> <operator pos:line="23" pos:column="26">||<pos:position pos:line="23" pos:column="28"/></operator> <name pos:line="23" pos:column="29">op<pos:position pos:line="23" pos:column="31"/></name> <operator pos:line="23" pos:column="32">==<pos:position pos:line="23" pos:column="34"/></operator> <name pos:line="23" pos:column="35">OP_ASSERT<pos:position pos:line="23" pos:column="44"/></name> <operator pos:line="23" pos:column="45">||<pos:position pos:line="23" pos:column="47"/></operator> <name pos:line="23" pos:column="48">op<pos:position pos:line="23" pos:column="50"/></name> <operator pos:line="23" pos:column="51">==<pos:position pos:line="23" pos:column="53"/></operator> <name pos:line="23" pos:column="54">OP_ONCE<pos:position pos:line="23" pos:column="61"/></name> <operator pos:line="23" pos:column="62">||<pos:position pos:line="23" pos:column="64"/></operator> <name pos:line="23" pos:column="65">op<pos:position pos:line="23" pos:column="67"/></name> <operator pos:line="23" pos:column="68">==<pos:position pos:line="23" pos:column="70"/></operator> <name pos:line="23" pos:column="71">OP_COND<pos:position pos:line="23" pos:column="78"/></name></expr>)<pos:position pos:line="23" pos:column="79"/></condition><then pos:line="23" pos:column="79">
     <block pos:line="24" pos:column="6">{ <if pos:line="24" pos:column="8">if <condition pos:line="24" pos:column="11">(<expr><operator pos:line="24" pos:column="12">!<pos:position pos:line="24" pos:column="13"/></operator><call><name pos:line="24" pos:column="13">is_startline<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">scode<pos:position pos:line="24" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="33">bracket_map<pos:position pos:line="24" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="46">backref_map<pos:position pos:line="24" pos:column="57"/></name></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="59"/></condition><then pos:line="24" pos:column="59"> <block type="pseudo"><return pos:line="24" pos:column="60">return <expr><name pos:line="24" pos:column="67">FALSE<pos:position pos:line="24" pos:column="72"/></name></expr>;<pos:position pos:line="24" pos:column="73"/></return></block></then></if> }<pos:position pos:line="24" pos:column="75"/></block></then></if></elseif>

   <comment type="block" pos:line="26" pos:column="4">/* .* means "start at start or after \n" if it isn't in brackets that
   may be referenced. */</comment>

   <elseif pos:line="29" pos:column="4">else <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">op<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">==<pos:position pos:line="29" pos:column="18"/></operator> <name pos:line="29" pos:column="19">OP_TYPESTAR<pos:position pos:line="29" pos:column="30"/></name> <operator pos:line="29" pos:column="31">||<pos:position pos:line="29" pos:column="33"/></operator> <name pos:line="29" pos:column="34">op<pos:position pos:line="29" pos:column="36"/></name> <operator pos:line="29" pos:column="37">==<pos:position pos:line="29" pos:column="39"/></operator> <name pos:line="29" pos:column="40">OP_TYPEMINSTAR<pos:position pos:line="29" pos:column="54"/></name></expr>)<pos:position pos:line="29" pos:column="55"/></condition><then pos:line="29" pos:column="55">
     <block pos:line="30" pos:column="6">{
     <if pos:line="31" pos:column="6">if <condition pos:line="31" pos:column="9">(<expr><name><name pos:line="31" pos:column="10">scode<pos:position pos:line="31" pos:column="15"/></name><index pos:line="31" pos:column="15">[<expr><literal type="number" pos:line="31" pos:column="16">1<pos:position pos:line="31" pos:column="17"/></literal></expr>]<pos:position pos:line="31" pos:column="18"/></index></name> <operator pos:line="31" pos:column="19">!=<pos:position pos:line="31" pos:column="21"/></operator> <name pos:line="31" pos:column="22">OP_ANY<pos:position pos:line="31" pos:column="28"/></name> <operator pos:line="31" pos:column="29">||<pos:position pos:line="31" pos:column="31"/></operator> <operator pos:line="31" pos:column="32">(<pos:position pos:line="31" pos:column="33"/></operator><name pos:line="31" pos:column="33">bracket_map<pos:position pos:line="31" pos:column="44"/></name> <operator pos:line="31" pos:column="45">&amp;<pos:position pos:line="31" pos:column="50"/></operator> <name pos:line="31" pos:column="47">backref_map<pos:position pos:line="31" pos:column="58"/></name><operator pos:line="31" pos:column="58">)<pos:position pos:line="31" pos:column="59"/></operator> <operator pos:line="31" pos:column="60">!=<pos:position pos:line="31" pos:column="62"/></operator> <literal type="number" pos:line="31" pos:column="63">0<pos:position pos:line="31" pos:column="64"/></literal></expr>)<pos:position pos:line="31" pos:column="65"/></condition><then pos:line="31" pos:column="65"> <block type="pseudo"><return pos:line="31" pos:column="66">return <expr><name pos:line="31" pos:column="73">FALSE<pos:position pos:line="31" pos:column="78"/></name></expr>;<pos:position pos:line="31" pos:column="79"/></return></block></then></if>
     }<pos:position pos:line="32" pos:column="7"/></block></then></if></elseif>

   <comment type="block" pos:line="34" pos:column="4">/* Check for explicit circumflex */</comment>

   <elseif pos:line="36" pos:column="4">else <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">op<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">!=<pos:position pos:line="36" pos:column="18"/></operator> <name pos:line="36" pos:column="19">OP_CIRC<pos:position pos:line="36" pos:column="26"/></name></expr>)<pos:position pos:line="36" pos:column="27"/></condition><then pos:line="36" pos:column="27"> <block type="pseudo"><return pos:line="36" pos:column="28">return <expr><name pos:line="36" pos:column="35">FALSE<pos:position pos:line="36" pos:column="40"/></name></expr>;<pos:position pos:line="36" pos:column="41"/></return></block></then></if></elseif></if>

   <comment type="block" pos:line="38" pos:column="4">/* Move on to the next alternative */</comment>

   <expr_stmt><expr><name pos:line="40" pos:column="4">code<pos:position pos:line="40" pos:column="8"/></name> <operator pos:line="40" pos:column="9">+=<pos:position pos:line="40" pos:column="11"/></operator> <call><name pos:line="40" pos:column="12">GET<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><name pos:line="40" pos:column="16">code<pos:position pos:line="40" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="22">1<pos:position pos:line="40" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="25"/></expr_stmt>
   }<pos:position pos:line="41" pos:column="5"/></block>
while <condition pos:line="42" pos:column="7">(<expr><operator pos:line="42" pos:column="8">*<pos:position pos:line="42" pos:column="9"/></operator><name pos:line="42" pos:column="9">code<pos:position pos:line="42" pos:column="13"/></name> <operator pos:line="42" pos:column="14">==<pos:position pos:line="42" pos:column="16"/></operator> <name pos:line="42" pos:column="17">OP_ALT<pos:position pos:line="42" pos:column="23"/></name></expr>)<pos:position pos:line="42" pos:column="24"/></condition>;<pos:position pos:line="42" pos:column="25"/></do>  <comment type="block" pos:line="42" pos:column="27">/* Loop for each alternative */</comment>
<return pos:line="43" pos:column="1">return <expr><name pos:line="43" pos:column="8">TRUE<pos:position pos:line="43" pos:column="12"/></name></expr>;<pos:position pos:line="43" pos:column="13"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
