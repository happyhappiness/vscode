<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1648_httpd-2.4.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">macro_section<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">cmd_parms<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type> <name pos:line="1" pos:column="46">cmd<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="2" pos:column="34">void<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">dummy<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="47">const<pos:position pos:line="2" pos:column="52"/></specifier> <name pos:line="2" pos:column="53">char<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">arg<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_pool_t<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">pool<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">endp<pos:position pos:line="5" pos:column="15"/></name></decl>, <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="18">name<pos:position pos:line="5" pos:column="22"/></name></decl>, <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="25">where<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">errmsg<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">ap_macro_t<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">macro<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debug<pos:position pos:line="9" pos:column="10"/></name><argument_list pos:line="9" pos:column="10">(<argument><expr><call><name pos:line="9" pos:column="11">fprintf<pos:position pos:line="9" pos:column="18"/></name><argument_list pos:line="9" pos:column="18">(<argument><expr><name pos:line="9" pos:column="19">stderr<pos:position pos:line="9" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="27">"macro_section: arg='%s'\n"<pos:position pos:line="9" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="56">arg<pos:position pos:line="9" pos:column="59"/></name></expr></argument>)<pos:position pos:line="9" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="62"/></expr_stmt>

    <comment type="block" pos:line="11" pos:column="5">/* lazy initialization */</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">ap_macros<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">==<pos:position pos:line="12" pos:column="21"/></operator> <name pos:line="12" pos:column="22">NULL<pos:position pos:line="12" pos:column="26"/></name></expr>)<pos:position pos:line="12" pos:column="27"/></condition><then pos:line="12" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="9">ap_macros<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <call><name pos:line="13" pos:column="21">apr_hash_make<pos:position pos:line="13" pos:column="34"/></name><argument_list pos:line="13" pos:column="34">(<argument><expr><name><name pos:line="13" pos:column="35">cmd<pos:position pos:line="13" pos:column="38"/></name><operator pos:line="13" pos:column="38">-&gt;<pos:position pos:line="13" pos:column="43"/></operator><name pos:line="13" pos:column="40">temp_pool<pos:position pos:line="13" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">ap_assert<pos:position pos:line="14" pos:column="14"/></name><argument_list pos:line="14" pos:column="14">(<argument><expr><name pos:line="14" pos:column="15">ap_macros<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">!=<pos:position pos:line="14" pos:column="27"/></operator> <name pos:line="14" pos:column="28">NULL<pos:position pos:line="14" pos:column="32"/></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><name pos:line="16" pos:column="5">pool<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">apr_hash_pool_get<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">ap_macros<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><name pos:line="18" pos:column="5">endp<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">char<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">*<pos:position pos:line="18" pos:column="19"/></operator><operator pos:line="18" pos:column="19">)<pos:position pos:line="18" pos:column="20"/></operator> <call><name pos:line="18" pos:column="21">ap_strrchr_c<pos:position pos:line="18" pos:column="33"/></name><argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">arg<pos:position pos:line="18" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="18" pos:column="39">'&gt;'<pos:position pos:line="18" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">endp<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">==<pos:position pos:line="20" pos:column="16"/></operator> <name pos:line="20" pos:column="17">NULL<pos:position pos:line="20" pos:column="21"/></name></expr>)<pos:position pos:line="20" pos:column="22"/></condition><then pos:line="20" pos:column="22"> <block pos:line="20" pos:column="23">{
        <return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">BEGIN_MACRO<pos:position pos:line="21" pos:column="27"/></name> <literal type="string" pos:line="21" pos:column="28">"&gt; directive missing closing '&gt;'"<pos:position pos:line="21" pos:column="67"/></literal></expr>;<pos:position pos:line="21" pos:column="62"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">endp<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">==<pos:position pos:line="24" pos:column="16"/></operator> <name pos:line="24" pos:column="17">arg<pos:position pos:line="24" pos:column="20"/></name></expr>)<pos:position pos:line="24" pos:column="21"/></condition><then pos:line="24" pos:column="21"> <block pos:line="24" pos:column="22">{
        <return pos:line="25" pos:column="9">return <expr><name pos:line="25" pos:column="16">BEGIN_MACRO<pos:position pos:line="25" pos:column="27"/></name> <literal type="string" pos:line="25" pos:column="28">" macro definition: empty name"<pos:position pos:line="25" pos:column="59"/></literal></expr>;<pos:position pos:line="25" pos:column="60"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">warn_if_non_blank<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><literal type="string" pos:line="28" pos:column="23">"non blank chars found after "<pos:position pos:line="28" pos:column="53"/></literal> <name pos:line="28" pos:column="54">BEGIN_MACRO<pos:position pos:line="28" pos:column="65"/></name> <literal type="string" pos:line="28" pos:column="66">" closing '&gt;'"<pos:position pos:line="28" pos:column="83"/></literal></expr></argument>,
                      <argument><expr><name pos:line="29" pos:column="23">endp<pos:position pos:line="29" pos:column="27"/></name><operator pos:line="29" pos:column="27">+<pos:position pos:line="29" pos:column="28"/></operator><literal type="number" pos:line="29" pos:column="28">1<pos:position pos:line="29" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="31">cmd<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">-&gt;<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="36">config_file<pos:position pos:line="29" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="49"/></expr_stmt>

    <comment type="block" pos:line="31" pos:column="5">/* coldly drop '&gt;[^&gt;]*$' out */</comment>
    <expr_stmt><expr><operator pos:line="32" pos:column="5">*<pos:position pos:line="32" pos:column="6"/></operator><name pos:line="32" pos:column="6">endp<pos:position pos:line="32" pos:column="10"/></name> <operator pos:line="32" pos:column="11">=<pos:position pos:line="32" pos:column="12"/></operator> <literal type="char" pos:line="32" pos:column="13">'\0'<pos:position pos:line="32" pos:column="17"/></literal></expr>;<pos:position pos:line="32" pos:column="18"/></expr_stmt>

    <comment type="block" pos:line="34" pos:column="5">/* get lowercase macro name */</comment>
    <expr_stmt><expr><name pos:line="35" pos:column="5">name<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <call><name pos:line="35" pos:column="12">ap_getword_conf<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">pool<pos:position pos:line="35" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="34">&amp;<pos:position pos:line="35" pos:column="39"/></operator><name pos:line="35" pos:column="35">arg<pos:position pos:line="35" pos:column="38"/></name></expr></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><call><name pos:line="36" pos:column="9">empty_string_p<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">(<argument><expr><name pos:line="36" pos:column="24">name<pos:position pos:line="36" pos:column="28"/></name></expr></argument>)<pos:position pos:line="36" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="30"/></condition><then pos:line="36" pos:column="30"> <block pos:line="36" pos:column="31">{
        <return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">BEGIN_MACRO<pos:position pos:line="37" pos:column="27"/></name> <literal type="string" pos:line="37" pos:column="28">" macro definition: name not found"<pos:position pos:line="37" pos:column="63"/></literal></expr>;<pos:position pos:line="37" pos:column="64"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">ap_str_tolower<pos:position pos:line="40" pos:column="19"/></name><argument_list pos:line="40" pos:column="19">(<argument><expr><name pos:line="40" pos:column="20">name<pos:position pos:line="40" pos:column="24"/></name></expr></argument>)<pos:position pos:line="40" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="41" pos:column="5">macro<pos:position pos:line="41" pos:column="10"/></name> <operator pos:line="41" pos:column="11">=<pos:position pos:line="41" pos:column="12"/></operator> <call><name pos:line="41" pos:column="13">apr_hash_get<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">(<argument><expr><name pos:line="41" pos:column="26">ap_macros<pos:position pos:line="41" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="37">name<pos:position pos:line="41" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="43">APR_HASH_KEY_STRING<pos:position pos:line="41" pos:column="62"/></name></expr></argument>)<pos:position pos:line="41" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="64"/></expr_stmt>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">macro<pos:position pos:line="43" pos:column="14"/></name> <operator pos:line="43" pos:column="15">!=<pos:position pos:line="43" pos:column="17"/></operator> <name pos:line="43" pos:column="18">NULL<pos:position pos:line="43" pos:column="22"/></name></expr>)<pos:position pos:line="43" pos:column="23"/></condition><then pos:line="43" pos:column="23"> <block pos:line="43" pos:column="24">{
        <comment type="block" pos:line="44" pos:column="9">/* already defined: warn about the redefinition */</comment>
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">ap_log_error<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><name pos:line="45" pos:column="22">APLOG_MARK<pos:position pos:line="45" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="34">APLOG_NOERRNO<pos:position pos:line="45" pos:column="47"/></name> <operator pos:line="45" pos:column="48">|<pos:position pos:line="45" pos:column="49"/></operator> <name pos:line="45" pos:column="50">APLOG_WARNING<pos:position pos:line="45" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="65">0<pos:position pos:line="45" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="68">NULL<pos:position pos:line="45" pos:column="72"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="46" pos:column="22">"macro '%s' multiply defined: "<pos:position pos:line="46" pos:column="53"/></literal>
                     <literal type="string" pos:line="47" pos:column="22">"%s, redefined on line %d of \"%s\""<pos:position pos:line="47" pos:column="58"/></literal></expr></argument>,
                     <argument><expr><name><name pos:line="48" pos:column="22">macro<pos:position pos:line="48" pos:column="27"/></name><operator pos:line="48" pos:column="27">-&gt;<pos:position pos:line="48" pos:column="32"/></operator><name pos:line="48" pos:column="29">name<pos:position pos:line="48" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="35">macro<pos:position pos:line="48" pos:column="40"/></name><operator pos:line="48" pos:column="40">-&gt;<pos:position pos:line="48" pos:column="45"/></operator><name pos:line="48" pos:column="42">location<pos:position pos:line="48" pos:column="50"/></name></name></expr></argument>,
                     <argument><expr><name><name pos:line="49" pos:column="22">cmd<pos:position pos:line="49" pos:column="25"/></name><operator pos:line="49" pos:column="25">-&gt;<pos:position pos:line="49" pos:column="30"/></operator><name pos:line="49" pos:column="27">config_file<pos:position pos:line="49" pos:column="38"/></name><operator pos:line="49" pos:column="38">-&gt;<pos:position pos:line="49" pos:column="43"/></operator><name pos:line="49" pos:column="40">line_number<pos:position pos:line="49" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="53">cmd<pos:position pos:line="49" pos:column="56"/></name><operator pos:line="49" pos:column="56">-&gt;<pos:position pos:line="49" pos:column="61"/></operator><name pos:line="49" pos:column="58">config_file<pos:position pos:line="49" pos:column="69"/></name><operator pos:line="49" pos:column="69">-&gt;<pos:position pos:line="49" pos:column="74"/></operator><name pos:line="49" pos:column="71">name<pos:position pos:line="49" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="77"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></then>
    <else pos:line="51" pos:column="5">else <block pos:line="51" pos:column="10">{
        <comment type="block" pos:line="52" pos:column="9">/* allocate a new macro */</comment>
        <expr_stmt><expr><name pos:line="53" pos:column="9">macro<pos:position pos:line="53" pos:column="14"/></name> <operator pos:line="53" pos:column="15">=<pos:position pos:line="53" pos:column="16"/></operator> <operator pos:line="53" pos:column="17">(<pos:position pos:line="53" pos:column="18"/></operator><name pos:line="53" pos:column="18">ap_macro_t<pos:position pos:line="53" pos:column="28"/></name> <operator pos:line="53" pos:column="29">*<pos:position pos:line="53" pos:column="30"/></operator><operator pos:line="53" pos:column="30">)<pos:position pos:line="53" pos:column="31"/></operator> <call><name pos:line="53" pos:column="32">apr_palloc<pos:position pos:line="53" pos:column="42"/></name><argument_list pos:line="53" pos:column="42">(<argument><expr><name pos:line="53" pos:column="43">pool<pos:position pos:line="53" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="49">sizeof<argument_list pos:line="53" pos:column="55">(<argument><expr><name pos:line="53" pos:column="56">ap_macro_t<pos:position pos:line="53" pos:column="66"/></name></expr></argument>)<pos:position pos:line="53" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="54" pos:column="9">macro<pos:position pos:line="54" pos:column="14"/></name><operator pos:line="54" pos:column="14">-&gt;<pos:position pos:line="54" pos:column="19"/></operator><name pos:line="54" pos:column="16">name<pos:position pos:line="54" pos:column="20"/></name></name> <operator pos:line="54" pos:column="21">=<pos:position pos:line="54" pos:column="22"/></operator> <name pos:line="54" pos:column="23">name<pos:position pos:line="54" pos:column="27"/></name></expr>;<pos:position pos:line="54" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="55" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="57" pos:column="5">debug<pos:position pos:line="57" pos:column="10"/></name><argument_list pos:line="57" pos:column="10">(<argument><expr><call><name pos:line="57" pos:column="11">fprintf<pos:position pos:line="57" pos:column="18"/></name><argument_list pos:line="57" pos:column="18">(<argument><expr><name pos:line="57" pos:column="19">stderr<pos:position pos:line="57" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="27">"macro_section: name=%s\n"<pos:position pos:line="57" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="55">name<pos:position pos:line="57" pos:column="59"/></name></expr></argument>)<pos:position pos:line="57" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="62"/></expr_stmt>

    <comment type="block" pos:line="59" pos:column="5">/* get macro arguments */</comment>
    <expr_stmt><expr><name><name pos:line="60" pos:column="5">macro<pos:position pos:line="60" pos:column="10"/></name><operator pos:line="60" pos:column="10">-&gt;<pos:position pos:line="60" pos:column="15"/></operator><name pos:line="60" pos:column="12">location<pos:position pos:line="60" pos:column="20"/></name></name> <operator pos:line="60" pos:column="21">=<pos:position pos:line="60" pos:column="22"/></operator> <call><name pos:line="60" pos:column="23">apr_psprintf<pos:position pos:line="60" pos:column="35"/></name><argument_list pos:line="60" pos:column="35">(<argument><expr><name pos:line="60" pos:column="36">pool<pos:position pos:line="60" pos:column="40"/></name></expr></argument>,
                                   <argument><expr><literal type="string" pos:line="61" pos:column="36">"defined on line %d of \"%s\""<pos:position pos:line="61" pos:column="66"/></literal></expr></argument>,
                                   <argument><expr><name><name pos:line="62" pos:column="36">cmd<pos:position pos:line="62" pos:column="39"/></name><operator pos:line="62" pos:column="39">-&gt;<pos:position pos:line="62" pos:column="44"/></operator><name pos:line="62" pos:column="41">config_file<pos:position pos:line="62" pos:column="52"/></name><operator pos:line="62" pos:column="52">-&gt;<pos:position pos:line="62" pos:column="57"/></operator><name pos:line="62" pos:column="54">line_number<pos:position pos:line="62" pos:column="65"/></name></name></expr></argument>,
                                   <argument><expr><name><name pos:line="63" pos:column="36">cmd<pos:position pos:line="63" pos:column="39"/></name><operator pos:line="63" pos:column="39">-&gt;<pos:position pos:line="63" pos:column="44"/></operator><name pos:line="63" pos:column="41">config_file<pos:position pos:line="63" pos:column="52"/></name><operator pos:line="63" pos:column="52">-&gt;<pos:position pos:line="63" pos:column="57"/></operator><name pos:line="63" pos:column="54">name<pos:position pos:line="63" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">debug<pos:position pos:line="64" pos:column="10"/></name><argument_list pos:line="64" pos:column="10">(<argument><expr><call><name pos:line="64" pos:column="11">fprintf<pos:position pos:line="64" pos:column="18"/></name><argument_list pos:line="64" pos:column="18">(<argument><expr><name pos:line="64" pos:column="19">stderr<pos:position pos:line="64" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="27">"macro_section: location=%s\n"<pos:position pos:line="64" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="59">macro<pos:position pos:line="64" pos:column="64"/></name><operator pos:line="64" pos:column="64">-&gt;<pos:position pos:line="64" pos:column="69"/></operator><name pos:line="64" pos:column="66">location<pos:position pos:line="64" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="77"/></expr_stmt>

    <expr_stmt><expr><name pos:line="66" pos:column="5">where<pos:position pos:line="66" pos:column="10"/></name> <operator pos:line="66" pos:column="11">=<pos:position pos:line="66" pos:column="12"/></operator>
        <call><name pos:line="67" pos:column="9">apr_psprintf<pos:position pos:line="67" pos:column="21"/></name><argument_list pos:line="67" pos:column="21">(<argument><expr><name pos:line="67" pos:column="22">pool<pos:position pos:line="67" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="28">"macro '%s' (%s)"<pos:position pos:line="67" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="47">macro<pos:position pos:line="67" pos:column="52"/></name><operator pos:line="67" pos:column="52">-&gt;<pos:position pos:line="67" pos:column="57"/></operator><name pos:line="67" pos:column="54">name<pos:position pos:line="67" pos:column="58"/></name></name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="60">macro<pos:position pos:line="67" pos:column="65"/></name><operator pos:line="67" pos:column="65">-&gt;<pos:position pos:line="67" pos:column="70"/></operator><name pos:line="67" pos:column="67">location<pos:position pos:line="67" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="77"/></expr_stmt>

    <if pos:line="69" pos:column="5">if <condition pos:line="69" pos:column="8">(<expr><call><name pos:line="69" pos:column="9">looks_like_an_argument<pos:position pos:line="69" pos:column="31"/></name><argument_list pos:line="69" pos:column="31">(<argument><expr><name pos:line="69" pos:column="32">name<pos:position pos:line="69" pos:column="36"/></name></expr></argument>)<pos:position pos:line="69" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="38"/></condition><then pos:line="69" pos:column="38"> <block pos:line="69" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">ap_log_error<pos:position pos:line="70" pos:column="21"/></name><argument_list pos:line="70" pos:column="21">(<argument><expr><name pos:line="70" pos:column="22">APLOG_MARK<pos:position pos:line="70" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="34">APLOG_NOERRNO<pos:position pos:line="70" pos:column="47"/></name> <operator pos:line="70" pos:column="48">|<pos:position pos:line="70" pos:column="49"/></operator> <name pos:line="70" pos:column="50">APLOG_WARNING<pos:position pos:line="70" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="70" pos:column="65">0<pos:position pos:line="70" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="68">NULL<pos:position pos:line="70" pos:column="72"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="71" pos:column="22">"%s better prefix a macro name with any of '%s'"<pos:position pos:line="71" pos:column="70"/></literal></expr></argument>,
                     <argument><expr><name pos:line="72" pos:column="22">where<pos:position pos:line="72" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="29">ARG_PREFIX<pos:position pos:line="72" pos:column="39"/></name></expr></argument>)<pos:position pos:line="72" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="75" pos:column="5">/* get macro parameters */</comment>
    <expr_stmt><expr><name><name pos:line="76" pos:column="5">macro<pos:position pos:line="76" pos:column="10"/></name><operator pos:line="76" pos:column="10">-&gt;<pos:position pos:line="76" pos:column="15"/></operator><name pos:line="76" pos:column="12">arguments<pos:position pos:line="76" pos:column="21"/></name></name> <operator pos:line="76" pos:column="22">=<pos:position pos:line="76" pos:column="23"/></operator> <call><name pos:line="76" pos:column="24">get_arguments<pos:position pos:line="76" pos:column="37"/></name><argument_list pos:line="76" pos:column="37">(<argument><expr><name pos:line="76" pos:column="38">pool<pos:position pos:line="76" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="44">arg<pos:position pos:line="76" pos:column="47"/></name></expr></argument>)<pos:position pos:line="76" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="49"/></expr_stmt>

    <expr_stmt><expr><name pos:line="78" pos:column="5">errmsg<pos:position pos:line="78" pos:column="11"/></name> <operator pos:line="78" pos:column="12">=<pos:position pos:line="78" pos:column="13"/></operator> <call><name pos:line="78" pos:column="14">check_macro_arguments<pos:position pos:line="78" pos:column="35"/></name><argument_list pos:line="78" pos:column="35">(<argument><expr><name><name pos:line="78" pos:column="36">cmd<pos:position pos:line="78" pos:column="39"/></name><operator pos:line="78" pos:column="39">-&gt;<pos:position pos:line="78" pos:column="44"/></operator><name pos:line="78" pos:column="41">temp_pool<pos:position pos:line="78" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="52">macro<pos:position pos:line="78" pos:column="57"/></name></expr></argument>)<pos:position pos:line="78" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="59"/></expr_stmt>

    <if pos:line="80" pos:column="5">if <condition pos:line="80" pos:column="8">(<expr><name pos:line="80" pos:column="9">errmsg<pos:position pos:line="80" pos:column="15"/></name></expr>)<pos:position pos:line="80" pos:column="16"/></condition><then pos:line="80" pos:column="16"> <block pos:line="80" pos:column="17">{
        <return pos:line="81" pos:column="9">return <expr><name pos:line="81" pos:column="16">errmsg<pos:position pos:line="81" pos:column="22"/></name></expr>;<pos:position pos:line="81" pos:column="23"/></return>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="84" pos:column="5">errmsg<pos:position pos:line="84" pos:column="11"/></name> <operator pos:line="84" pos:column="12">=<pos:position pos:line="84" pos:column="13"/></operator> <call><name pos:line="84" pos:column="14">get_lines_till_end_token<pos:position pos:line="84" pos:column="38"/></name><argument_list pos:line="84" pos:column="38">(<argument><expr><name pos:line="84" pos:column="39">pool<pos:position pos:line="84" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="45">cmd<pos:position pos:line="84" pos:column="48"/></name><operator pos:line="84" pos:column="48">-&gt;<pos:position pos:line="84" pos:column="53"/></operator><name pos:line="84" pos:column="50">config_file<pos:position pos:line="84" pos:column="61"/></name></name></expr></argument>,
                                      <argument><expr><name pos:line="85" pos:column="39">END_MACRO<pos:position pos:line="85" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="50">BEGIN_MACRO<pos:position pos:line="85" pos:column="61"/></name></expr></argument>,
                                      <argument><expr><name pos:line="86" pos:column="39">where<pos:position pos:line="86" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="46">&amp;<pos:position pos:line="86" pos:column="51"/></operator><name><name pos:line="86" pos:column="47">macro<pos:position pos:line="86" pos:column="52"/></name><operator pos:line="86" pos:column="52">-&gt;<pos:position pos:line="86" pos:column="57"/></operator><name pos:line="86" pos:column="54">contents<pos:position pos:line="86" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="86" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="64"/></expr_stmt>

    <if pos:line="88" pos:column="5">if <condition pos:line="88" pos:column="8">(<expr><name pos:line="88" pos:column="9">errmsg<pos:position pos:line="88" pos:column="15"/></name></expr>)<pos:position pos:line="88" pos:column="16"/></condition><then pos:line="88" pos:column="16"> <block pos:line="88" pos:column="17">{
        <return pos:line="89" pos:column="9">return <expr><call><name pos:line="89" pos:column="16">apr_psprintf<pos:position pos:line="89" pos:column="28"/></name><argument_list pos:line="89" pos:column="28">(<argument><expr><name><name pos:line="89" pos:column="29">cmd<pos:position pos:line="89" pos:column="32"/></name><operator pos:line="89" pos:column="32">-&gt;<pos:position pos:line="89" pos:column="37"/></operator><name pos:line="89" pos:column="34">temp_pool<pos:position pos:line="89" pos:column="43"/></name></name></expr></argument>,
                            <argument><expr><literal type="string" pos:line="90" pos:column="29">"%s"<pos:position pos:line="90" pos:column="33"/></literal> <name pos:line="90" pos:column="34">APR_EOL_STR<pos:position pos:line="90" pos:column="45"/></name> <literal type="string" pos:line="90" pos:column="46">"\tcontents error: %s"<pos:position pos:line="90" pos:column="68"/></literal></expr></argument>,
                            <argument><expr><name pos:line="91" pos:column="29">where<pos:position pos:line="91" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="36">errmsg<pos:position pos:line="91" pos:column="42"/></name></expr></argument>)<pos:position pos:line="91" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="44"/></return>
    }<pos:position pos:line="92" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="94" pos:column="5">errmsg<pos:position pos:line="94" pos:column="11"/></name> <operator pos:line="94" pos:column="12">=<pos:position pos:line="94" pos:column="13"/></operator> <call><name pos:line="94" pos:column="14">check_macro_contents<pos:position pos:line="94" pos:column="34"/></name><argument_list pos:line="94" pos:column="34">(<argument><expr><name><name pos:line="94" pos:column="35">cmd<pos:position pos:line="94" pos:column="38"/></name><operator pos:line="94" pos:column="38">-&gt;<pos:position pos:line="94" pos:column="43"/></operator><name pos:line="94" pos:column="40">temp_pool<pos:position pos:line="94" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="51">macro<pos:position pos:line="94" pos:column="56"/></name></expr></argument>)<pos:position pos:line="94" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="58"/></expr_stmt>

    <if pos:line="96" pos:column="5">if <condition pos:line="96" pos:column="8">(<expr><name pos:line="96" pos:column="9">errmsg<pos:position pos:line="96" pos:column="15"/></name></expr>)<pos:position pos:line="96" pos:column="16"/></condition><then pos:line="96" pos:column="16"> <block pos:line="96" pos:column="17">{
        <return pos:line="97" pos:column="9">return <expr><call><name pos:line="97" pos:column="16">apr_psprintf<pos:position pos:line="97" pos:column="28"/></name><argument_list pos:line="97" pos:column="28">(<argument><expr><name><name pos:line="97" pos:column="29">cmd<pos:position pos:line="97" pos:column="32"/></name><operator pos:line="97" pos:column="32">-&gt;<pos:position pos:line="97" pos:column="37"/></operator><name pos:line="97" pos:column="34">temp_pool<pos:position pos:line="97" pos:column="43"/></name></name></expr></argument>,
                            <argument><expr><literal type="string" pos:line="98" pos:column="29">"%s"<pos:position pos:line="98" pos:column="33"/></literal> <name pos:line="98" pos:column="34">APR_EOL_STR<pos:position pos:line="98" pos:column="45"/></name> <literal type="string" pos:line="98" pos:column="46">"\tcontents checking error: %s"<pos:position pos:line="98" pos:column="77"/></literal></expr></argument>,
                            <argument><expr><name pos:line="99" pos:column="29">where<pos:position pos:line="99" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="36">errmsg<pos:position pos:line="99" pos:column="42"/></name></expr></argument>)<pos:position pos:line="99" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="44"/></return>
    }<pos:position pos:line="100" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="102" pos:column="5">/* store the new macro */</comment>
    <expr_stmt><expr><call><name pos:line="103" pos:column="5">apr_hash_set<pos:position pos:line="103" pos:column="17"/></name><argument_list pos:line="103" pos:column="17">(<argument><expr><name pos:line="103" pos:column="18">ap_macros<pos:position pos:line="103" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="29">name<pos:position pos:line="103" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="35">APR_HASH_KEY_STRING<pos:position pos:line="103" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="56">macro<pos:position pos:line="103" pos:column="61"/></name></expr></argument>)<pos:position pos:line="103" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="63"/></expr_stmt>

    <return pos:line="105" pos:column="5">return <expr><name pos:line="105" pos:column="12">NULL<pos:position pos:line="105" pos:column="16"/></name></expr>;<pos:position pos:line="105" pos:column="17"/></return>
}<pos:position pos:line="106" pos:column="2"/></block></function></unit>
