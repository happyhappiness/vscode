<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3802_httpd-2.2.11.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">APR_INLINE<pos:position pos:line="1" pos:column="18"/></name> <name pos:line="1" pos:column="19">apr_thread_mutex_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">mutex_hash<pos:position pos:line="1" pos:column="49"/></name><parameter_list pos:line="1" pos:column="49">(<parameter><decl><type><specifier pos:line="1" pos:column="50">volatile<pos:position pos:line="1" pos:column="58"/></specifier> <name pos:line="1" pos:column="59">apr_uint32_t<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">mem<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_thread_mutex_t<pos:position pos:line="3" pos:column="23"/></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">mutex<pos:position pos:line="3" pos:column="30"/></name> <init pos:line="3" pos:column="31">= <expr><name><name pos:line="3" pos:column="33">hash_mutex<pos:position pos:line="3" pos:column="43"/></name><index pos:line="3" pos:column="43">[<expr><call><name pos:line="3" pos:column="44">ATOMIC_HASH<pos:position pos:line="3" pos:column="55"/></name><argument_list pos:line="3" pos:column="55">(<argument><expr><name pos:line="3" pos:column="56">mem<pos:position pos:line="3" pos:column="59"/></name></expr></argument>)<pos:position pos:line="3" pos:column="60"/></argument_list></call></expr>]<pos:position pos:line="3" pos:column="61"/></index></name></expr></init></decl>;<pos:position pos:line="3" pos:column="62"/></decl_stmt>

    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><call><name pos:line="5" pos:column="9">apr_thread_mutex_lock<pos:position pos:line="5" pos:column="30"/></name><argument_list pos:line="5" pos:column="30">(<argument><expr><name pos:line="5" pos:column="31">mutex<pos:position pos:line="5" pos:column="36"/></name></expr></argument>)<pos:position pos:line="5" pos:column="37"/></argument_list></call> <operator pos:line="5" pos:column="38">!=<pos:position pos:line="5" pos:column="40"/></operator> <name pos:line="5" pos:column="41">APR_SUCCESS<pos:position pos:line="5" pos:column="52"/></name></expr>)<pos:position pos:line="5" pos:column="53"/></condition><then pos:line="5" pos:column="53"> <block pos:line="5" pos:column="54">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">abort<pos:position pos:line="6" pos:column="14"/></name><argument_list pos:line="6" pos:column="14">()<pos:position pos:line="6" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>

    <return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">mutex<pos:position pos:line="9" pos:column="17"/></name></expr>;<pos:position pos:line="9" pos:column="18"/></return>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
