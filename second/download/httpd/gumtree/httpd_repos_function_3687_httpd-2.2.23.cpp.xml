<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3687_httpd-2.2.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">read_with_timeout<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">apr_file_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">file<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">void<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">buf<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="68">apr_size_t<pos:position pos:line="1" pos:column="78"/></name></type> <name pos:line="1" pos:column="79">len_in<pos:position pos:line="1" pos:column="85"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="87">apr_size_t<pos:position pos:line="1" pos:column="97"/></name> <modifier pos:line="1" pos:column="98">*<pos:position pos:line="1" pos:column="99"/></modifier></type><name pos:line="1" pos:column="99">nbytes<pos:position pos:line="1" pos:column="105"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="106"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_status_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">rv<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">DWORD<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">res<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">DWORD<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">len<pos:position pos:line="5" pos:column="14"/></name> <init pos:line="5" pos:column="15">= <expr><operator pos:line="5" pos:column="17">(<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="18">DWORD<pos:position pos:line="5" pos:column="23"/></name><operator pos:line="5" pos:column="23">)<pos:position pos:line="5" pos:column="24"/></operator><name pos:line="5" pos:column="24">len_in<pos:position pos:line="5" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">DWORD<pos:position pos:line="6" pos:column="10"/></name></type> <name pos:line="6" pos:column="11">bytesread<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><literal type="number" pos:line="6" pos:column="23">0<pos:position pos:line="6" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* Handle the zero timeout non-blocking case */</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">file<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">-&gt;<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="15">timeout<pos:position pos:line="9" pos:column="22"/></name></name> <operator pos:line="9" pos:column="23">==<pos:position pos:line="9" pos:column="25"/></operator> <literal type="number" pos:line="9" pos:column="26">0<pos:position pos:line="9" pos:column="27"/></literal></expr>)<pos:position pos:line="9" pos:column="28"/></condition><then pos:line="9" pos:column="28"> <block pos:line="9" pos:column="29">{
        <comment type="block" pos:line="10" pos:column="9">/* Peek at the pipe. If there is no data available, return APR_EAGAIN.
         * If data is available, go ahead and read it.
         */</comment>
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name><name pos:line="13" pos:column="13">file<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">-&gt;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="19">pipe<pos:position pos:line="13" pos:column="23"/></name></name></expr>)<pos:position pos:line="13" pos:column="24"/></condition><then pos:line="13" pos:column="24"> <block pos:line="13" pos:column="25">{
            <decl_stmt><decl><type><name pos:line="14" pos:column="13">DWORD<pos:position pos:line="14" pos:column="18"/></name></type> <name pos:line="14" pos:column="19">bytes<pos:position pos:line="14" pos:column="24"/></name></decl>;<pos:position pos:line="14" pos:column="25"/></decl_stmt>
            <if pos:line="15" pos:column="13">if <condition pos:line="15" pos:column="16">(<expr><operator pos:line="15" pos:column="17">!<pos:position pos:line="15" pos:column="18"/></operator><call><name pos:line="15" pos:column="18">PeekNamedPipe<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><name><name pos:line="15" pos:column="32">file<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">-&gt;<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="38">filehand<pos:position pos:line="15" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="48">NULL<pos:position pos:line="15" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="54">0<pos:position pos:line="15" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="57">NULL<pos:position pos:line="15" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="63">&amp;<pos:position pos:line="15" pos:column="68"/></operator><name pos:line="15" pos:column="64">bytes<pos:position pos:line="15" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="71">NULL<pos:position pos:line="15" pos:column="75"/></name></expr></argument>)<pos:position pos:line="15" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="77"/></condition><then pos:line="15" pos:column="77"> <block pos:line="15" pos:column="78">{
                <expr_stmt><expr><name pos:line="16" pos:column="17">rv<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <call><name pos:line="16" pos:column="22">apr_get_os_error<pos:position pos:line="16" pos:column="38"/></name><argument_list pos:line="16" pos:column="38">()<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt>
                <if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">rv<pos:position pos:line="17" pos:column="23"/></name> <operator pos:line="17" pos:column="24">==<pos:position pos:line="17" pos:column="26"/></operator> <call><name pos:line="17" pos:column="27">APR_FROM_OS_ERROR<pos:position pos:line="17" pos:column="44"/></name><argument_list pos:line="17" pos:column="44">(<argument><expr><name pos:line="17" pos:column="45">ERROR_BROKEN_PIPE<pos:position pos:line="17" pos:column="62"/></name></expr></argument>)<pos:position pos:line="17" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="64"/></condition><then pos:line="17" pos:column="64"> <block pos:line="17" pos:column="65">{
                    <expr_stmt><expr><name pos:line="18" pos:column="21">rv<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <name pos:line="18" pos:column="26">APR_EOF<pos:position pos:line="18" pos:column="33"/></name></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt>
                }<pos:position pos:line="19" pos:column="18"/></block></then></if>
                <expr_stmt><expr><operator pos:line="20" pos:column="17">*<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">nbytes<pos:position pos:line="20" pos:column="24"/></name> <operator pos:line="20" pos:column="25">=<pos:position pos:line="20" pos:column="26"/></operator> <literal type="number" pos:line="20" pos:column="27">0<pos:position pos:line="20" pos:column="28"/></literal></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
                <return pos:line="21" pos:column="17">return <expr><name pos:line="21" pos:column="24">rv<pos:position pos:line="21" pos:column="26"/></name></expr>;<pos:position pos:line="21" pos:column="27"/></return>
            }<pos:position pos:line="22" pos:column="14"/></block></then>
            <else pos:line="23" pos:column="13">else <block pos:line="23" pos:column="18">{
                <if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">bytes<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">==<pos:position pos:line="24" pos:column="29"/></operator> <literal type="number" pos:line="24" pos:column="30">0<pos:position pos:line="24" pos:column="31"/></literal></expr>)<pos:position pos:line="24" pos:column="32"/></condition><then pos:line="24" pos:column="32"> <block pos:line="24" pos:column="33">{
                    <expr_stmt><expr><operator pos:line="25" pos:column="21">*<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">nbytes<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">=<pos:position pos:line="25" pos:column="30"/></operator> <literal type="number" pos:line="25" pos:column="31">0<pos:position pos:line="25" pos:column="32"/></literal></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt>
                    <return pos:line="26" pos:column="21">return <expr><name pos:line="26" pos:column="28">APR_EAGAIN<pos:position pos:line="26" pos:column="38"/></name></expr>;<pos:position pos:line="26" pos:column="39"/></return>
                }<pos:position pos:line="27" pos:column="18"/></block></then></if>
                <if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">len<pos:position pos:line="28" pos:column="24"/></name> <operator pos:line="28" pos:column="25">&gt;<pos:position pos:line="28" pos:column="29"/></operator> <name pos:line="28" pos:column="27">bytes<pos:position pos:line="28" pos:column="32"/></name></expr>)<pos:position pos:line="28" pos:column="33"/></condition><then pos:line="28" pos:column="33"> <block pos:line="28" pos:column="34">{
                    <expr_stmt><expr><name pos:line="29" pos:column="21">len<pos:position pos:line="29" pos:column="24"/></name> <operator pos:line="29" pos:column="25">=<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="27">bytes<pos:position pos:line="29" pos:column="32"/></name></expr>;<pos:position pos:line="29" pos:column="33"/></expr_stmt>
                }<pos:position pos:line="30" pos:column="18"/></block></then></if>
            }<pos:position pos:line="31" pos:column="14"/></block></else></if>
        }<pos:position pos:line="32" pos:column="10"/></block></then>
        <else pos:line="33" pos:column="9">else <block pos:line="33" pos:column="14">{
            <comment type="block" pos:line="34" pos:column="13">/* ToDo: Handle zero timeout non-blocking file i/o 
             * This is not needed until an APR application needs to
             * timeout file i/o (which means setting file i/o non-blocking)
             */</comment>
        }<pos:position pos:line="38" pos:column="10"/></block></else></if>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name><name pos:line="41" pos:column="9">file<pos:position pos:line="41" pos:column="13"/></name><operator pos:line="41" pos:column="13">-&gt;<pos:position pos:line="41" pos:column="18"/></operator><name pos:line="41" pos:column="15">pOverlapped<pos:position pos:line="41" pos:column="26"/></name></name> <operator pos:line="41" pos:column="27">&amp;&amp;<pos:position pos:line="41" pos:column="37"/></operator> <operator pos:line="41" pos:column="30">!<pos:position pos:line="41" pos:column="31"/></operator><name><name pos:line="41" pos:column="31">file<pos:position pos:line="41" pos:column="35"/></name><operator pos:line="41" pos:column="35">-&gt;<pos:position pos:line="41" pos:column="40"/></operator><name pos:line="41" pos:column="37">pipe<pos:position pos:line="41" pos:column="41"/></name></name></expr>)<pos:position pos:line="41" pos:column="42"/></condition><then pos:line="41" pos:column="42"> <block pos:line="41" pos:column="43">{
        <expr_stmt><expr><name><name pos:line="42" pos:column="9">file<pos:position pos:line="42" pos:column="13"/></name><operator pos:line="42" pos:column="13">-&gt;<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="15">pOverlapped<pos:position pos:line="42" pos:column="26"/></name><operator pos:line="42" pos:column="26">-&gt;<pos:position pos:line="42" pos:column="31"/></operator><name pos:line="42" pos:column="28">Offset<pos:position pos:line="42" pos:column="34"/></name></name>     <operator pos:line="42" pos:column="39">=<pos:position pos:line="42" pos:column="40"/></operator> <operator pos:line="42" pos:column="41">(<pos:position pos:line="42" pos:column="42"/></operator><name pos:line="42" pos:column="42">DWORD<pos:position pos:line="42" pos:column="47"/></name><operator pos:line="42" pos:column="47">)<pos:position pos:line="42" pos:column="48"/></operator><name><name pos:line="42" pos:column="48">file<pos:position pos:line="42" pos:column="52"/></name><operator pos:line="42" pos:column="52">-&gt;<pos:position pos:line="42" pos:column="57"/></operator><name pos:line="42" pos:column="54">filePtr<pos:position pos:line="42" pos:column="61"/></name></name></expr>;<pos:position pos:line="42" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="43" pos:column="9">file<pos:position pos:line="43" pos:column="13"/></name><operator pos:line="43" pos:column="13">-&gt;<pos:position pos:line="43" pos:column="18"/></operator><name pos:line="43" pos:column="15">pOverlapped<pos:position pos:line="43" pos:column="26"/></name><operator pos:line="43" pos:column="26">-&gt;<pos:position pos:line="43" pos:column="31"/></operator><name pos:line="43" pos:column="28">OffsetHigh<pos:position pos:line="43" pos:column="38"/></name></name> <operator pos:line="43" pos:column="39">=<pos:position pos:line="43" pos:column="40"/></operator> <call pos:line="43" pos:column="41">(<name pos:line="43" pos:column="42">DWORD<pos:position pos:line="43" pos:column="47"/></name>)<argument_list pos:line="43" pos:column="48">(<argument><expr><name><name pos:line="43" pos:column="49">file<pos:position pos:line="43" pos:column="53"/></name><operator pos:line="43" pos:column="53">-&gt;<pos:position pos:line="43" pos:column="58"/></operator><name pos:line="43" pos:column="55">filePtr<pos:position pos:line="43" pos:column="62"/></name></name> <operator pos:line="43" pos:column="63">&gt;&gt;<pos:position pos:line="43" pos:column="68"/></operator> <literal type="number" pos:line="43" pos:column="66">32<pos:position pos:line="43" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="70"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><call><name pos:line="46" pos:column="9">ReadFile<pos:position pos:line="46" pos:column="17"/></name><argument_list pos:line="46" pos:column="17">(<argument><expr><name><name pos:line="46" pos:column="18">file<pos:position pos:line="46" pos:column="22"/></name><operator pos:line="46" pos:column="22">-&gt;<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="24">filehand<pos:position pos:line="46" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="34">buf<pos:position pos:line="46" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="39">len<pos:position pos:line="46" pos:column="42"/></name></expr></argument>, 
                 <argument><expr><operator pos:line="47" pos:column="18">&amp;<pos:position pos:line="47" pos:column="23"/></operator><name pos:line="47" pos:column="19">bytesread<pos:position pos:line="47" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="30">file<pos:position pos:line="47" pos:column="34"/></name><operator pos:line="47" pos:column="34">-&gt;<pos:position pos:line="47" pos:column="39"/></operator><name pos:line="47" pos:column="36">pOverlapped<pos:position pos:line="47" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="49"/></condition><then pos:line="47" pos:column="49"> <block pos:line="47" pos:column="50">{
        <expr_stmt><expr><name pos:line="48" pos:column="9">rv<pos:position pos:line="48" pos:column="11"/></name> <operator pos:line="48" pos:column="12">=<pos:position pos:line="48" pos:column="13"/></operator> <name pos:line="48" pos:column="14">APR_SUCCESS<pos:position pos:line="48" pos:column="25"/></name></expr>;<pos:position pos:line="48" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></then>
    <else pos:line="50" pos:column="5">else <block pos:line="50" pos:column="10">{
        <expr_stmt><expr><name pos:line="51" pos:column="9">rv<pos:position pos:line="51" pos:column="11"/></name> <operator pos:line="51" pos:column="12">=<pos:position pos:line="51" pos:column="13"/></operator> <call><name pos:line="51" pos:column="14">apr_get_os_error<pos:position pos:line="51" pos:column="30"/></name><argument_list pos:line="51" pos:column="30">()<pos:position pos:line="51" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt>
        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name pos:line="52" pos:column="13">rv<pos:position pos:line="52" pos:column="15"/></name> <operator pos:line="52" pos:column="16">==<pos:position pos:line="52" pos:column="18"/></operator> <call><name pos:line="52" pos:column="19">APR_FROM_OS_ERROR<pos:position pos:line="52" pos:column="36"/></name><argument_list pos:line="52" pos:column="36">(<argument><expr><name pos:line="52" pos:column="37">ERROR_IO_PENDING<pos:position pos:line="52" pos:column="53"/></name></expr></argument>)<pos:position pos:line="52" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="55"/></condition><then pos:line="52" pos:column="55"> <block pos:line="52" pos:column="56">{
            <comment type="block" pos:line="53" pos:column="13">/* Wait for the pending i/o, timeout converted from us to ms
             * Note that we loop if someone gives up the event, since
             * folks suggest that WAIT_ABANDONED isn't actually a result
             * but an alert that ownership of the event has passed from
             * one owner to a new proc/thread.
             */</comment>
            <do pos:line="59" pos:column="13">do <block pos:line="59" pos:column="16">{
                <expr_stmt><expr><name pos:line="60" pos:column="17">res<pos:position pos:line="60" pos:column="20"/></name> <operator pos:line="60" pos:column="21">=<pos:position pos:line="60" pos:column="22"/></operator> <call><name pos:line="60" pos:column="23">WaitForSingleObject<pos:position pos:line="60" pos:column="42"/></name><argument_list pos:line="60" pos:column="42">(<argument><expr><name><name pos:line="60" pos:column="43">file<pos:position pos:line="60" pos:column="47"/></name><operator pos:line="60" pos:column="47">-&gt;<pos:position pos:line="60" pos:column="52"/></operator><name pos:line="60" pos:column="49">pOverlapped<pos:position pos:line="60" pos:column="60"/></name><operator pos:line="60" pos:column="60">-&gt;<pos:position pos:line="60" pos:column="65"/></operator><name pos:line="60" pos:column="62">hEvent<pos:position pos:line="60" pos:column="68"/></name></name></expr></argument>, 
                                          <argument><expr><ternary><condition><expr><operator pos:line="61" pos:column="43">(<pos:position pos:line="61" pos:column="44"/></operator><name><name pos:line="61" pos:column="44">file<pos:position pos:line="61" pos:column="48"/></name><operator pos:line="61" pos:column="48">-&gt;<pos:position pos:line="61" pos:column="53"/></operator><name pos:line="61" pos:column="50">timeout<pos:position pos:line="61" pos:column="57"/></name></name> <operator pos:line="61" pos:column="58">&gt;<pos:position pos:line="61" pos:column="62"/></operator> <literal type="number" pos:line="61" pos:column="60">0<pos:position pos:line="61" pos:column="61"/></literal><operator pos:line="61" pos:column="61">)<pos:position pos:line="61" pos:column="62"/></operator></expr>
                                            ?<pos:position pos:line="62" pos:column="46"/></condition><then pos:line="62" pos:column="46"> <expr><call pos:line="62" pos:column="47">(<name pos:line="62" pos:column="48">DWORD<pos:position pos:line="62" pos:column="53"/></name>)<argument_list pos:line="62" pos:column="54">(<argument><expr><name><name pos:line="62" pos:column="55">file<pos:position pos:line="62" pos:column="59"/></name><operator pos:line="62" pos:column="59">-&gt;<pos:position pos:line="62" pos:column="64"/></operator><name pos:line="62" pos:column="61">timeout<pos:position pos:line="62" pos:column="68"/></name></name><operator pos:line="62" pos:column="68">/<pos:position pos:line="62" pos:column="69"/></operator><literal type="number" pos:line="62" pos:column="69">1000<pos:position pos:line="62" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="74"/></argument_list></call></expr>
                                            <pos:position pos:line="63" pos:column="45"/></then><else pos:line="63" pos:column="45">: <expr><operator pos:line="63" pos:column="47">(<pos:position pos:line="63" pos:column="48"/></operator><ternary><condition><expr><operator pos:line="63" pos:column="48">(<pos:position pos:line="63" pos:column="49"/></operator><name><name pos:line="63" pos:column="49">file<pos:position pos:line="63" pos:column="53"/></name><operator pos:line="63" pos:column="53">-&gt;<pos:position pos:line="63" pos:column="58"/></operator><name pos:line="63" pos:column="55">timeout<pos:position pos:line="63" pos:column="62"/></name></name> <operator pos:line="63" pos:column="63">==<pos:position pos:line="63" pos:column="65"/></operator> <operator pos:line="63" pos:column="66">-<pos:position pos:line="63" pos:column="67"/></operator><literal type="number" pos:line="63" pos:column="67">1<pos:position pos:line="63" pos:column="68"/></literal><operator pos:line="63" pos:column="68">)<pos:position pos:line="63" pos:column="69"/></operator></expr> 
                                                 ?<pos:position pos:line="64" pos:column="51"/></condition><then pos:line="64" pos:column="51"> <expr><name pos:line="64" pos:column="52">INFINITE<pos:position pos:line="64" pos:column="60"/></name></expr> <pos:position pos:line="64" pos:column="61"/></then><else pos:line="64" pos:column="61">: <expr><literal type="number" pos:line="64" pos:column="63">0<pos:position pos:line="64" pos:column="64"/></literal></expr></else></ternary><operator pos:line="64" pos:column="64">)<pos:position pos:line="64" pos:column="65"/></operator></expr></else></ternary></expr></argument>)<pos:position pos:line="64" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="67"/></expr_stmt>
            }<pos:position pos:line="65" pos:column="14"/></block> while <condition pos:line="65" pos:column="21">(<expr><name pos:line="65" pos:column="22">res<pos:position pos:line="65" pos:column="25"/></name> <operator pos:line="65" pos:column="26">==<pos:position pos:line="65" pos:column="28"/></operator> <name pos:line="65" pos:column="29">WAIT_ABANDONED<pos:position pos:line="65" pos:column="43"/></name></expr>)<pos:position pos:line="65" pos:column="44"/></condition>;<pos:position pos:line="65" pos:column="45"/></do>

            <comment type="block" pos:line="67" pos:column="13">/* There is one case that represents entirely
             * successful operations, otherwise we will cancel
             * the operation in progress.
             */</comment>
            <if pos:line="71" pos:column="13">if <condition pos:line="71" pos:column="16">(<expr><name pos:line="71" pos:column="17">res<pos:position pos:line="71" pos:column="20"/></name> <operator pos:line="71" pos:column="21">!=<pos:position pos:line="71" pos:column="23"/></operator> <name pos:line="71" pos:column="24">WAIT_OBJECT_0<pos:position pos:line="71" pos:column="37"/></name></expr>)<pos:position pos:line="71" pos:column="38"/></condition><then pos:line="71" pos:column="38"> <block pos:line="71" pos:column="39">{
                <expr_stmt><expr><call><name pos:line="72" pos:column="17">CancelIo<pos:position pos:line="72" pos:column="25"/></name><argument_list pos:line="72" pos:column="25">(<argument><expr><name><name pos:line="72" pos:column="26">file<pos:position pos:line="72" pos:column="30"/></name><operator pos:line="72" pos:column="30">-&gt;<pos:position pos:line="72" pos:column="35"/></operator><name pos:line="72" pos:column="32">filehand<pos:position pos:line="72" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="42"/></expr_stmt>
            }<pos:position pos:line="73" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="75" pos:column="13">/* Ignore any failures above.  Attempt to complete
             * the overlapped operation and use only _its_ result.
             * For example, CancelIo or WaitForSingleObject can
             * fail if the handle is closed, yet the read may have
             * completed before we attempted to CancelIo...
             */</comment>
            <if pos:line="81" pos:column="13">if <condition pos:line="81" pos:column="16">(<expr><call><name pos:line="81" pos:column="17">GetOverlappedResult<pos:position pos:line="81" pos:column="36"/></name><argument_list pos:line="81" pos:column="36">(<argument><expr><name><name pos:line="81" pos:column="37">file<pos:position pos:line="81" pos:column="41"/></name><operator pos:line="81" pos:column="41">-&gt;<pos:position pos:line="81" pos:column="46"/></operator><name pos:line="81" pos:column="43">filehand<pos:position pos:line="81" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="53">file<pos:position pos:line="81" pos:column="57"/></name><operator pos:line="81" pos:column="57">-&gt;<pos:position pos:line="81" pos:column="62"/></operator><name pos:line="81" pos:column="59">pOverlapped<pos:position pos:line="81" pos:column="70"/></name></name></expr></argument>, 
                                    <argument><expr><operator pos:line="82" pos:column="37">&amp;<pos:position pos:line="82" pos:column="42"/></operator><name pos:line="82" pos:column="38">bytesread<pos:position pos:line="82" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="49">TRUE<pos:position pos:line="82" pos:column="53"/></name></expr></argument>)<pos:position pos:line="82" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="82" pos:column="55"/></condition><then pos:line="82" pos:column="55"> <block pos:line="82" pos:column="56">{
                <expr_stmt><expr><name pos:line="83" pos:column="17">rv<pos:position pos:line="83" pos:column="19"/></name> <operator pos:line="83" pos:column="20">=<pos:position pos:line="83" pos:column="21"/></operator> <name pos:line="83" pos:column="22">APR_SUCCESS<pos:position pos:line="83" pos:column="33"/></name></expr>;<pos:position pos:line="83" pos:column="34"/></expr_stmt>
            }<pos:position pos:line="84" pos:column="14"/></block></then>
            <else pos:line="85" pos:column="13">else <block pos:line="85" pos:column="18">{
                <expr_stmt><expr><name pos:line="86" pos:column="17">rv<pos:position pos:line="86" pos:column="19"/></name> <operator pos:line="86" pos:column="20">=<pos:position pos:line="86" pos:column="21"/></operator> <call><name pos:line="86" pos:column="22">apr_get_os_error<pos:position pos:line="86" pos:column="38"/></name><argument_list pos:line="86" pos:column="38">()<pos:position pos:line="86" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="41"/></expr_stmt>
                <if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><operator pos:line="87" pos:column="21">(<pos:position pos:line="87" pos:column="22"/></operator><operator pos:line="87" pos:column="22">(<pos:position pos:line="87" pos:column="23"/></operator><name pos:line="87" pos:column="23">rv<pos:position pos:line="87" pos:column="25"/></name> <operator pos:line="87" pos:column="26">==<pos:position pos:line="87" pos:column="28"/></operator> <call><name pos:line="87" pos:column="29">APR_FROM_OS_ERROR<pos:position pos:line="87" pos:column="46"/></name><argument_list pos:line="87" pos:column="46">(<argument><expr><name pos:line="87" pos:column="47">ERROR_IO_INCOMPLETE<pos:position pos:line="87" pos:column="66"/></name></expr></argument>)<pos:position pos:line="87" pos:column="67"/></argument_list></call><operator pos:line="87" pos:column="67">)<pos:position pos:line="87" pos:column="68"/></operator>
                        <operator pos:line="88" pos:column="25">||<pos:position pos:line="88" pos:column="27"/></operator> <operator pos:line="88" pos:column="28">(<pos:position pos:line="88" pos:column="29"/></operator><name pos:line="88" pos:column="29">rv<pos:position pos:line="88" pos:column="31"/></name> <operator pos:line="88" pos:column="32">==<pos:position pos:line="88" pos:column="34"/></operator> <call><name pos:line="88" pos:column="35">APR_FROM_OS_ERROR<pos:position pos:line="88" pos:column="52"/></name><argument_list pos:line="88" pos:column="52">(<argument><expr><name pos:line="88" pos:column="53">ERROR_OPERATION_ABORTED<pos:position pos:line="88" pos:column="76"/></name></expr></argument>)<pos:position pos:line="88" pos:column="77"/></argument_list></call><operator pos:line="88" pos:column="77">)<pos:position pos:line="88" pos:column="78"/></operator><operator pos:line="88" pos:column="78">)<pos:position pos:line="88" pos:column="79"/></operator>
                    <operator pos:line="89" pos:column="21">&amp;&amp;<pos:position pos:line="89" pos:column="31"/></operator> <operator pos:line="89" pos:column="24">(<pos:position pos:line="89" pos:column="25"/></operator><name pos:line="89" pos:column="25">res<pos:position pos:line="89" pos:column="28"/></name> <operator pos:line="89" pos:column="29">==<pos:position pos:line="89" pos:column="31"/></operator> <name pos:line="89" pos:column="32">WAIT_TIMEOUT<pos:position pos:line="89" pos:column="44"/></name><operator pos:line="89" pos:column="44">)<pos:position pos:line="89" pos:column="45"/></operator></expr>)<pos:position pos:line="89" pos:column="46"/></condition><then pos:line="89" pos:column="46">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="90" pos:column="21">rv<pos:position pos:line="90" pos:column="23"/></name> <operator pos:line="90" pos:column="24">=<pos:position pos:line="90" pos:column="25"/></operator> <name pos:line="90" pos:column="26">APR_TIMEUP<pos:position pos:line="90" pos:column="36"/></name></expr>;<pos:position pos:line="90" pos:column="37"/></expr_stmt></block></then></if>
            }<pos:position pos:line="91" pos:column="14"/></block></else></if>
        }<pos:position pos:line="92" pos:column="10"/></block></then></if>
        <if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><name pos:line="93" pos:column="13">rv<pos:position pos:line="93" pos:column="15"/></name> <operator pos:line="93" pos:column="16">==<pos:position pos:line="93" pos:column="18"/></operator> <call><name pos:line="93" pos:column="19">APR_FROM_OS_ERROR<pos:position pos:line="93" pos:column="36"/></name><argument_list pos:line="93" pos:column="36">(<argument><expr><name pos:line="93" pos:column="37">ERROR_BROKEN_PIPE<pos:position pos:line="93" pos:column="54"/></name></expr></argument>)<pos:position pos:line="93" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="93" pos:column="56"/></condition><then pos:line="93" pos:column="56"> <block pos:line="93" pos:column="57">{
            <comment type="block" pos:line="94" pos:column="13">/* Assume ERROR_BROKEN_PIPE signals an EOF reading from a pipe */</comment>
            <expr_stmt><expr><name pos:line="95" pos:column="13">rv<pos:position pos:line="95" pos:column="15"/></name> <operator pos:line="95" pos:column="16">=<pos:position pos:line="95" pos:column="17"/></operator> <name pos:line="95" pos:column="18">APR_EOF<pos:position pos:line="95" pos:column="25"/></name></expr>;<pos:position pos:line="95" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="96" pos:column="10"/></block></then> <elseif pos:line="96" pos:column="11">else <if pos:line="96" pos:column="16">if <condition pos:line="96" pos:column="19">(<expr><name pos:line="96" pos:column="20">rv<pos:position pos:line="96" pos:column="22"/></name> <operator pos:line="96" pos:column="23">==<pos:position pos:line="96" pos:column="25"/></operator> <call><name pos:line="96" pos:column="26">APR_FROM_OS_ERROR<pos:position pos:line="96" pos:column="43"/></name><argument_list pos:line="96" pos:column="43">(<argument><expr><name pos:line="96" pos:column="44">ERROR_HANDLE_EOF<pos:position pos:line="96" pos:column="60"/></name></expr></argument>)<pos:position pos:line="96" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="62"/></condition><then pos:line="96" pos:column="62"> <block pos:line="96" pos:column="63">{
            <comment type="block" pos:line="97" pos:column="13">/* Did we hit EOF reading from the handle? */</comment>
            <expr_stmt><expr><name pos:line="98" pos:column="13">rv<pos:position pos:line="98" pos:column="15"/></name> <operator pos:line="98" pos:column="16">=<pos:position pos:line="98" pos:column="17"/></operator> <name pos:line="98" pos:column="18">APR_EOF<pos:position pos:line="98" pos:column="25"/></name></expr>;<pos:position pos:line="98" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="99" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="100" pos:column="6"/></block></else></if>
    
    <comment type="block" pos:line="102" pos:column="5">/* OK and 0 bytes read ==&gt; end of file */</comment>
    <if pos:line="103" pos:column="5">if <condition pos:line="103" pos:column="8">(<expr><name pos:line="103" pos:column="9">rv<pos:position pos:line="103" pos:column="11"/></name> <operator pos:line="103" pos:column="12">==<pos:position pos:line="103" pos:column="14"/></operator> <name pos:line="103" pos:column="15">APR_SUCCESS<pos:position pos:line="103" pos:column="26"/></name> <operator pos:line="103" pos:column="27">&amp;&amp;<pos:position pos:line="103" pos:column="37"/></operator> <name pos:line="103" pos:column="30">bytesread<pos:position pos:line="103" pos:column="39"/></name> <operator pos:line="103" pos:column="40">==<pos:position pos:line="103" pos:column="42"/></operator> <literal type="number" pos:line="103" pos:column="43">0<pos:position pos:line="103" pos:column="44"/></literal></expr>)<pos:position pos:line="103" pos:column="45"/></condition><then pos:line="103" pos:column="45">
        <block type="pseudo"><expr_stmt><expr><name pos:line="104" pos:column="9">rv<pos:position pos:line="104" pos:column="11"/></name> <operator pos:line="104" pos:column="12">=<pos:position pos:line="104" pos:column="13"/></operator> <name pos:line="104" pos:column="14">APR_EOF<pos:position pos:line="104" pos:column="21"/></name></expr>;<pos:position pos:line="104" pos:column="22"/></expr_stmt></block></then></if>
    
    <if pos:line="106" pos:column="5">if <condition pos:line="106" pos:column="8">(<expr><name pos:line="106" pos:column="9">rv<pos:position pos:line="106" pos:column="11"/></name> <operator pos:line="106" pos:column="12">==<pos:position pos:line="106" pos:column="14"/></operator> <name pos:line="106" pos:column="15">APR_SUCCESS<pos:position pos:line="106" pos:column="26"/></name> <operator pos:line="106" pos:column="27">&amp;&amp;<pos:position pos:line="106" pos:column="37"/></operator> <name><name pos:line="106" pos:column="30">file<pos:position pos:line="106" pos:column="34"/></name><operator pos:line="106" pos:column="34">-&gt;<pos:position pos:line="106" pos:column="39"/></operator><name pos:line="106" pos:column="36">pOverlapped<pos:position pos:line="106" pos:column="47"/></name></name> <operator pos:line="106" pos:column="48">&amp;&amp;<pos:position pos:line="106" pos:column="58"/></operator> <operator pos:line="106" pos:column="51">!<pos:position pos:line="106" pos:column="52"/></operator><name><name pos:line="106" pos:column="52">file<pos:position pos:line="106" pos:column="56"/></name><operator pos:line="106" pos:column="56">-&gt;<pos:position pos:line="106" pos:column="61"/></operator><name pos:line="106" pos:column="58">pipe<pos:position pos:line="106" pos:column="62"/></name></name></expr>)<pos:position pos:line="106" pos:column="63"/></condition><then pos:line="106" pos:column="63"> <block pos:line="106" pos:column="64">{
        <expr_stmt><expr><name><name pos:line="107" pos:column="9">file<pos:position pos:line="107" pos:column="13"/></name><operator pos:line="107" pos:column="13">-&gt;<pos:position pos:line="107" pos:column="18"/></operator><name pos:line="107" pos:column="15">filePtr<pos:position pos:line="107" pos:column="22"/></name></name> <operator pos:line="107" pos:column="23">+=<pos:position pos:line="107" pos:column="25"/></operator> <name pos:line="107" pos:column="26">bytesread<pos:position pos:line="107" pos:column="35"/></name></expr>;<pos:position pos:line="107" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="108" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="109" pos:column="5">*<pos:position pos:line="109" pos:column="6"/></operator><name pos:line="109" pos:column="6">nbytes<pos:position pos:line="109" pos:column="12"/></name> <operator pos:line="109" pos:column="13">=<pos:position pos:line="109" pos:column="14"/></operator> <name pos:line="109" pos:column="15">bytesread<pos:position pos:line="109" pos:column="24"/></name></expr>;<pos:position pos:line="109" pos:column="25"/></expr_stmt>
    <return pos:line="110" pos:column="5">return <expr><name pos:line="110" pos:column="12">rv<pos:position pos:line="110" pos:column="14"/></name></expr>;<pos:position pos:line="110" pos:column="15"/></return>
}<pos:position pos:line="111" pos:column="2"/></block></function></unit>
