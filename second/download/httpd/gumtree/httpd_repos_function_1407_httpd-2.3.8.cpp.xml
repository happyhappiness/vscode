<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1407_httpd-2.3.8.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">setup_choice_response<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">request_rec<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">r<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">negotiation_state<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">neg<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="2" pos:column="34">var_rec<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">variant<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">request_rec<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">sub_req<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">sub_vary<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name><name pos:line="7" pos:column="10">variant<pos:position pos:line="7" pos:column="17"/></name><operator pos:line="7" pos:column="17">-&gt;<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="19">sub_req<pos:position pos:line="7" pos:column="26"/></name></name></expr>)<pos:position pos:line="7" pos:column="27"/></condition><then pos:line="7" pos:column="27"> <block pos:line="7" pos:column="28">{
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">status<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>

        <expr_stmt><expr><name pos:line="10" pos:column="9">sub_req<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">=<pos:position pos:line="10" pos:column="18"/></operator> <call><name pos:line="10" pos:column="19">ap_sub_req_lookup_file<pos:position pos:line="10" pos:column="41"/></name><argument_list pos:line="10" pos:column="41">(<argument><expr><name><name pos:line="10" pos:column="42">variant<pos:position pos:line="10" pos:column="49"/></name><operator pos:line="10" pos:column="49">-&gt;<pos:position pos:line="10" pos:column="54"/></operator><name pos:line="10" pos:column="51">file_name<pos:position pos:line="10" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="62">r<pos:position pos:line="10" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="65">r<pos:position pos:line="10" pos:column="66"/></name><operator pos:line="10" pos:column="66">-&gt;<pos:position pos:line="10" pos:column="71"/></operator><name pos:line="10" pos:column="68">output_filters<pos:position pos:line="10" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="84"/></expr_stmt>
        <expr_stmt><expr><name pos:line="11" pos:column="9">status<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <name><name pos:line="11" pos:column="18">sub_req<pos:position pos:line="11" pos:column="25"/></name><operator pos:line="11" pos:column="25">-&gt;<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="27">status<pos:position pos:line="11" pos:column="33"/></name></name></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>

        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">status<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">!=<pos:position pos:line="13" pos:column="22"/></operator> <name pos:line="13" pos:column="23">HTTP_OK<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">&amp;&amp;<pos:position pos:line="13" pos:column="41"/></operator>
            <operator pos:line="14" pos:column="13">!<pos:position pos:line="14" pos:column="14"/></operator><call><name pos:line="14" pos:column="14">apr_table_get<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><name><name pos:line="14" pos:column="28">sub_req<pos:position pos:line="14" pos:column="35"/></name><operator pos:line="14" pos:column="35">-&gt;<pos:position pos:line="14" pos:column="40"/></operator><name pos:line="14" pos:column="37">err_headers_out<pos:position pos:line="14" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="54">"TCN"<pos:position pos:line="14" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="61"/></condition><then pos:line="14" pos:column="61"> <block pos:line="14" pos:column="62">{
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">ap_destroy_sub_req<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><name pos:line="15" pos:column="32">sub_req<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
            <return pos:line="16" pos:column="13">return <expr><name pos:line="16" pos:column="20">status<pos:position pos:line="16" pos:column="26"/></name></expr>;<pos:position pos:line="16" pos:column="27"/></return>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="18" pos:column="9">variant<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">-&gt;<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="18">sub_req<pos:position pos:line="18" pos:column="25"/></name></name> <operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator> <name pos:line="18" pos:column="28">sub_req<pos:position pos:line="18" pos:column="35"/></name></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then>
    <else pos:line="20" pos:column="5">else <block pos:line="20" pos:column="10">{
        <expr_stmt><expr><name pos:line="21" pos:column="9">sub_req<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <name><name pos:line="21" pos:column="19">variant<pos:position pos:line="21" pos:column="26"/></name><operator pos:line="21" pos:column="26">-&gt;<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="28">sub_req<pos:position pos:line="21" pos:column="35"/></name></name></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="24" pos:column="5">/* The variant selection algorithm told us to return a "Choice"
     * response. This is the normal variant response, with
     * some extra headers. First, ensure that the chosen
     * variant did or will not itself engage in transparent negotiation.
     * If not, set the appropriate headers, and fall through to
     * the normal variant handling
     */</comment>

    <comment type="block" pos:line="32" pos:column="5">/* This catches the error that a transparent type map selects a
     * transparent multiviews resource as the best variant.
     *
     * XXX: We do not signal an error if a transparent type map
     * selects a _non_transparent multiviews resource as the best
     * variant, because we can generate a legal negotiation response
     * in this case.  In this case, the vlist_validator of the
     * nontransparent subrequest will be lost however.  This could
     * lead to cases in which a change in the set of variants or the
     * negotiation algorithm of the nontransparent resource is never
     * propagated up to a HTTP/1.1 cache which interprets Vary.  To be
     * completely on the safe side we should return HTTP_VARIANT_ALSO_VARIES
     * for this type of recursive negotiation too.
     */</comment>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name><name pos:line="46" pos:column="9">neg<pos:position pos:line="46" pos:column="12"/></name><operator pos:line="46" pos:column="12">-&gt;<pos:position pos:line="46" pos:column="17"/></operator><name pos:line="46" pos:column="14">is_transparent<pos:position pos:line="46" pos:column="28"/></name></name> <operator pos:line="46" pos:column="29">&amp;&amp;<pos:position pos:line="46" pos:column="39"/></operator>
        <call><name pos:line="47" pos:column="9">apr_table_get<pos:position pos:line="47" pos:column="22"/></name><argument_list pos:line="47" pos:column="22">(<argument><expr><name><name pos:line="47" pos:column="23">sub_req<pos:position pos:line="47" pos:column="30"/></name><operator pos:line="47" pos:column="30">-&gt;<pos:position pos:line="47" pos:column="35"/></operator><name pos:line="47" pos:column="32">err_headers_out<pos:position pos:line="47" pos:column="47"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="49">"TCN"<pos:position pos:line="47" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="56"/></condition><then pos:line="47" pos:column="56"> <block pos:line="47" pos:column="57">{
        <return pos:line="48" pos:column="9">return <expr><name pos:line="48" pos:column="16">HTTP_VARIANT_ALSO_VARIES<pos:position pos:line="48" pos:column="40"/></name></expr>;<pos:position pos:line="48" pos:column="41"/></return>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="51" pos:column="5">/* This catches the error that a transparent type map recursively
     * selects, as the best variant, another type map which itself
     * causes transparent negotiation to be done.
     *
     * XXX: Actually, we catch this error by catching all cases of
     * type map recursion.  There are some borderline recursive type
     * map arrangements which would not produce transparent
     * negotiation protocol errors or lack of cache propagation
     * problems, but such arrangements are very hard to detect at this
     * point in the control flow, so we do not bother to single them
     * out.
     *
     * Recursive type maps imply a recursive arrangement of negotiated
     * resources which is visible to outside clients, and this is not
     * supported by the transparent negotiation caching protocols, so
     * if we are to have generic support for recursive type maps, we
     * have to create some configuration setting which makes all type
     * maps non-transparent when recursion is enabled.  Also, if we
     * want recursive type map support which ensures propagation of
     * type map changes into HTTP/1.1 caches that handle Vary, we
     * would have to extend the current mechanism for generating
     * variant list validators.
     */</comment>
    <if pos:line="74" pos:column="5">if <condition pos:line="74" pos:column="8">(<expr><name><name pos:line="74" pos:column="9">sub_req<pos:position pos:line="74" pos:column="16"/></name><operator pos:line="74" pos:column="16">-&gt;<pos:position pos:line="74" pos:column="21"/></operator><name pos:line="74" pos:column="18">handler<pos:position pos:line="74" pos:column="25"/></name></name> <operator pos:line="74" pos:column="26">&amp;&amp;<pos:position pos:line="74" pos:column="36"/></operator> <call><name pos:line="74" pos:column="29">strcmp<pos:position pos:line="74" pos:column="35"/></name><argument_list pos:line="74" pos:column="35">(<argument><expr><name><name pos:line="74" pos:column="36">sub_req<pos:position pos:line="74" pos:column="43"/></name><operator pos:line="74" pos:column="43">-&gt;<pos:position pos:line="74" pos:column="48"/></operator><name pos:line="74" pos:column="45">handler<pos:position pos:line="74" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="54">"type-map"<pos:position pos:line="74" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="65"/></argument_list></call> <operator pos:line="74" pos:column="66">==<pos:position pos:line="74" pos:column="68"/></operator> <literal type="number" pos:line="74" pos:column="69">0<pos:position pos:line="74" pos:column="70"/></literal></expr>)<pos:position pos:line="74" pos:column="71"/></condition><then pos:line="74" pos:column="71"> <block pos:line="74" pos:column="72">{
        <return pos:line="75" pos:column="9">return <expr><name pos:line="75" pos:column="16">HTTP_VARIANT_ALSO_VARIES<pos:position pos:line="75" pos:column="40"/></name></expr>;<pos:position pos:line="75" pos:column="41"/></return>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="78" pos:column="5">/* This adds an appropriate Variant-Vary header if the subrequest
     * is a multiviews resource.
     *
     * XXX: TODO: Note that this does _not_ handle any Vary header
     * returned by a CGI if sub_req is a CGI script, because we don't
     * see that Vary header yet at this point in the control flow.
     * This won't cause any cache consistency problems _unless_ the
     * CGI script also returns a Cache-Control header marking the
     * response as cachable.  This needs to be fixed, also there are
     * problems if a CGI returns an Etag header which also need to be
     * fixed.
     */</comment>
    <if pos:line="90" pos:column="5">if <condition pos:line="90" pos:column="8">(<expr><operator pos:line="90" pos:column="9">(<pos:position pos:line="90" pos:column="10"/></operator><name pos:line="90" pos:column="10">sub_vary<pos:position pos:line="90" pos:column="18"/></name> <operator pos:line="90" pos:column="19">=<pos:position pos:line="90" pos:column="20"/></operator> <call><name pos:line="90" pos:column="21">apr_table_get<pos:position pos:line="90" pos:column="34"/></name><argument_list pos:line="90" pos:column="34">(<argument><expr><name><name pos:line="90" pos:column="35">sub_req<pos:position pos:line="90" pos:column="42"/></name><operator pos:line="90" pos:column="42">-&gt;<pos:position pos:line="90" pos:column="47"/></operator><name pos:line="90" pos:column="44">err_headers_out<pos:position pos:line="90" pos:column="59"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="61">"Vary"<pos:position pos:line="90" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="68"/></argument_list></call><operator pos:line="90" pos:column="68">)<pos:position pos:line="90" pos:column="69"/></operator> <operator pos:line="90" pos:column="70">!=<pos:position pos:line="90" pos:column="72"/></operator> <name pos:line="90" pos:column="73">NULL<pos:position pos:line="90" pos:column="77"/></name></expr>)<pos:position pos:line="90" pos:column="78"/></condition><then pos:line="90" pos:column="78"> <block pos:line="90" pos:column="79">{
        <expr_stmt><expr><call><name pos:line="91" pos:column="9">apr_table_setn<pos:position pos:line="91" pos:column="23"/></name><argument_list pos:line="91" pos:column="23">(<argument><expr><name><name pos:line="91" pos:column="24">r<pos:position pos:line="91" pos:column="25"/></name><operator pos:line="91" pos:column="25">-&gt;<pos:position pos:line="91" pos:column="30"/></operator><name pos:line="91" pos:column="27">err_headers_out<pos:position pos:line="91" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="44">"Variant-Vary"<pos:position pos:line="91" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="91" pos:column="60">sub_vary<pos:position pos:line="91" pos:column="68"/></name></expr></argument>)<pos:position pos:line="91" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="70"/></expr_stmt></block></then></if></block></function>

        <comment type="block" pos:line="93" pos:column="9">/* Move </comment></unit>
