<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3007_httpd-2.0.44.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">call_resolver<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">apr_sockaddr_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier><modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">sa<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
                                  <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">hostname<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="57">apr_int32_t<pos:position pos:line="2" pos:column="68"/></name></type> <name pos:line="2" pos:column="69">family<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>,
                                  <parameter><decl><type><name pos:line="3" pos:column="35">apr_port_t<pos:position pos:line="3" pos:column="45"/></name></type> <name pos:line="3" pos:column="46">port<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="52">apr_int32_t<pos:position pos:line="3" pos:column="63"/></name></type> <name pos:line="3" pos:column="64">flags<pos:position pos:line="3" pos:column="69"/></name></decl></parameter>, 
                                  <parameter><decl><type><name pos:line="4" pos:column="35">apr_pool_t<pos:position pos:line="4" pos:column="45"/></name> <modifier pos:line="4" pos:column="46">*<pos:position pos:line="4" pos:column="47"/></modifier></type><name pos:line="4" pos:column="47">p<pos:position pos:line="4" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="49"/></parameter_list>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">addrinfo<pos:position pos:line="6" pos:column="20"/></name></name></type> <name pos:line="6" pos:column="21">hints<pos:position pos:line="6" pos:column="26"/></name></decl>, <modifier pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="29">ai<pos:position pos:line="6" pos:column="31"/></name></decl>, <modifier pos:line="6" pos:column="33">*<pos:position pos:line="6" pos:column="34"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="34">ai_list<pos:position pos:line="6" pos:column="41"/></name></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_sockaddr_t<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">prev_sa<pos:position pos:line="7" pos:column="28"/></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">error<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">memset<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><operator pos:line="10" pos:column="12">&amp;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="13">hints<pos:position pos:line="10" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="20">0<pos:position pos:line="10" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="23">sizeof<argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">hints<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="11" pos:column="5">hints<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">.<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">ai_family<pos:position pos:line="11" pos:column="20"/></name></name> <operator pos:line="11" pos:column="21">=<pos:position pos:line="11" pos:column="22"/></operator> <name pos:line="11" pos:column="23">family<pos:position pos:line="11" pos:column="29"/></name></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="12" pos:column="5">hints<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">.<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">ai_socktype<pos:position pos:line="12" pos:column="22"/></name></name> <operator pos:line="12" pos:column="23">=<pos:position pos:line="12" pos:column="24"/></operator> <name pos:line="12" pos:column="25">SOCK_STREAM<pos:position pos:line="12" pos:column="36"/></name></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="13" pos:column="5">error<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <call><name pos:line="13" pos:column="13">getaddrinfo<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">hostname<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="35">NULL<pos:position pos:line="13" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="41">&amp;<pos:position pos:line="13" pos:column="46"/></operator><name pos:line="13" pos:column="42">hints<pos:position pos:line="13" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="49">&amp;<pos:position pos:line="13" pos:column="54"/></operator><name pos:line="13" pos:column="50">ai_list<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">error<pos:position pos:line="14" pos:column="14"/></name></expr>)<pos:position pos:line="14" pos:column="15"/></condition><then pos:line="14" pos:column="15"> <block pos:line="14" pos:column="16">{
<cpp:ifndef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifndef<pos:position pos:line="15" pos:column="8"/></cpp:directive> <name pos:line="15" pos:column="9">WIN32<pos:position pos:line="15" pos:column="14"/></name></cpp:ifndef>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">error<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">==<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">EAI_SYSTEM<pos:position pos:line="16" pos:column="32"/></name></expr>)<pos:position pos:line="16" pos:column="33"/></condition><then pos:line="16" pos:column="33"> <block pos:line="16" pos:column="34">{
            <return pos:line="17" pos:column="13">return <expr><name pos:line="17" pos:column="20">errno<pos:position pos:line="17" pos:column="25"/></name></expr>;<pos:position pos:line="17" pos:column="26"/></return>
        }<pos:position pos:line="18" pos:column="10"/></block></then>
        <else pos:line="19" pos:column="9">else 
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>
        <block pos:line="21" pos:column="9">{
            <comment type="block" pos:line="22" pos:column="13">/* issues with representing this with APR's error scheme:
             * glibc uses negative values for these numbers, perhaps so 
             * they don't conflict with h_errno values...  Tru64 uses 
             * positive values which conflict with h_errno values
             */</comment>
<cpp:if pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">if<pos:position pos:line="27" pos:column="4"/></cpp:directive> <expr><call><name pos:line="27" pos:column="5">defined<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><name pos:line="27" pos:column="13">NEGATIVE_EAI<pos:position pos:line="27" pos:column="25"/></name></expr></argument>)<pos:position pos:line="27" pos:column="26"/></argument_list></call></expr></cpp:if>
            <expr_stmt><expr><name pos:line="28" pos:column="13">error<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">=<pos:position pos:line="28" pos:column="20"/></operator> <operator pos:line="28" pos:column="21">-<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="22">error<pos:position pos:line="28" pos:column="27"/></name></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>
            <return pos:line="30" pos:column="13">return <expr><name pos:line="30" pos:column="20">error<pos:position pos:line="30" pos:column="25"/></name> <operator pos:line="30" pos:column="26">+<pos:position pos:line="30" pos:column="27"/></operator> <name pos:line="30" pos:column="28">APR_OS_START_EAIERR<pos:position pos:line="30" pos:column="47"/></name></expr>;<pos:position pos:line="30" pos:column="48"/></return>
        }<pos:position pos:line="31" pos:column="10"/></block></else></if>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="34" pos:column="5">prev_sa<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <name pos:line="34" pos:column="15">NULL<pos:position pos:line="34" pos:column="19"/></name></expr>;<pos:position pos:line="34" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="35" pos:column="5">ai<pos:position pos:line="35" pos:column="7"/></name> <operator pos:line="35" pos:column="8">=<pos:position pos:line="35" pos:column="9"/></operator> <name pos:line="35" pos:column="10">ai_list<pos:position pos:line="35" pos:column="17"/></name></expr>;<pos:position pos:line="35" pos:column="18"/></expr_stmt>
    <while pos:line="36" pos:column="5">while <condition pos:line="36" pos:column="11">(<expr><name pos:line="36" pos:column="12">ai<pos:position pos:line="36" pos:column="14"/></name></expr>)<pos:position pos:line="36" pos:column="15"/></condition> <block pos:line="36" pos:column="16">{ <comment type="block" pos:line="36" pos:column="18">/* while more addresses to report */</comment>
        <decl_stmt><decl><type><name pos:line="37" pos:column="9">apr_sockaddr_t<pos:position pos:line="37" pos:column="23"/></name> <modifier pos:line="37" pos:column="24">*<pos:position pos:line="37" pos:column="25"/></modifier></type><name pos:line="37" pos:column="25">new_sa<pos:position pos:line="37" pos:column="31"/></name> <init pos:line="37" pos:column="32">= <expr><call><name pos:line="37" pos:column="34">apr_pcalloc<pos:position pos:line="37" pos:column="45"/></name><argument_list pos:line="37" pos:column="45">(<argument><expr><name pos:line="37" pos:column="46">p<pos:position pos:line="37" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="49">sizeof<argument_list pos:line="37" pos:column="55">(<argument><expr><name pos:line="37" pos:column="56">apr_sockaddr_t<pos:position pos:line="37" pos:column="70"/></name></expr></argument>)<pos:position pos:line="37" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="73"/></decl_stmt>

        <expr_stmt><expr><name><name pos:line="39" pos:column="9">new_sa<pos:position pos:line="39" pos:column="15"/></name><operator pos:line="39" pos:column="15">-&gt;<pos:position pos:line="39" pos:column="20"/></operator><name pos:line="39" pos:column="17">pool<pos:position pos:line="39" pos:column="21"/></name></name> <operator pos:line="39" pos:column="22">=<pos:position pos:line="39" pos:column="23"/></operator> <name pos:line="39" pos:column="24">p<pos:position pos:line="39" pos:column="25"/></name></expr>;<pos:position pos:line="39" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">memcpy<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><operator pos:line="40" pos:column="16">&amp;<pos:position pos:line="40" pos:column="21"/></operator><name><name pos:line="40" pos:column="17">new_sa<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">-&gt;<pos:position pos:line="40" pos:column="28"/></operator><name pos:line="40" pos:column="25">sa<pos:position pos:line="40" pos:column="27"/></name></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="29">ai<pos:position pos:line="40" pos:column="31"/></name><operator pos:line="40" pos:column="31">-&gt;<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="33">ai_addr<pos:position pos:line="40" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="42">ai<pos:position pos:line="40" pos:column="44"/></name><operator pos:line="40" pos:column="44">-&gt;<pos:position pos:line="40" pos:column="49"/></operator><name pos:line="40" pos:column="46">ai_addrlen<pos:position pos:line="40" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">apr_sockaddr_vars_set<pos:position pos:line="41" pos:column="30"/></name><argument_list pos:line="41" pos:column="30">(<argument><expr><name pos:line="41" pos:column="31">new_sa<pos:position pos:line="41" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="39">ai<pos:position pos:line="41" pos:column="41"/></name><operator pos:line="41" pos:column="41">-&gt;<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="43">ai_family<pos:position pos:line="41" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="54">port<pos:position pos:line="41" pos:column="58"/></name></expr></argument>)<pos:position pos:line="41" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="60"/></expr_stmt>

        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><operator pos:line="43" pos:column="13">!<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="14">prev_sa<pos:position pos:line="43" pos:column="21"/></name></expr>)<pos:position pos:line="43" pos:column="22"/></condition><then pos:line="43" pos:column="22"> <block pos:line="43" pos:column="23">{ <comment type="block" pos:line="43" pos:column="25">/* first element in new list */</comment>
            <expr_stmt><expr><name><name pos:line="44" pos:column="13">new_sa<pos:position pos:line="44" pos:column="19"/></name><operator pos:line="44" pos:column="19">-&gt;<pos:position pos:line="44" pos:column="24"/></operator><name pos:line="44" pos:column="21">hostname<pos:position pos:line="44" pos:column="29"/></name></name> <operator pos:line="44" pos:column="30">=<pos:position pos:line="44" pos:column="31"/></operator> <call><name pos:line="44" pos:column="32">apr_pstrdup<pos:position pos:line="44" pos:column="43"/></name><argument_list pos:line="44" pos:column="43">(<argument><expr><name pos:line="44" pos:column="44">p<pos:position pos:line="44" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="47">hostname<pos:position pos:line="44" pos:column="55"/></name></expr></argument>)<pos:position pos:line="44" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="45" pos:column="13">*<pos:position pos:line="45" pos:column="14"/></operator><name pos:line="45" pos:column="14">sa<pos:position pos:line="45" pos:column="16"/></name> <operator pos:line="45" pos:column="17">=<pos:position pos:line="45" pos:column="18"/></operator> <name pos:line="45" pos:column="19">new_sa<pos:position pos:line="45" pos:column="25"/></name></expr>;<pos:position pos:line="45" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="46" pos:column="10"/></block></then>
        <else pos:line="47" pos:column="9">else <block pos:line="47" pos:column="14">{
            <expr_stmt><expr><name><name pos:line="48" pos:column="13">prev_sa<pos:position pos:line="48" pos:column="20"/></name><operator pos:line="48" pos:column="20">-&gt;<pos:position pos:line="48" pos:column="25"/></operator><name pos:line="48" pos:column="22">next<pos:position pos:line="48" pos:column="26"/></name></name> <operator pos:line="48" pos:column="27">=<pos:position pos:line="48" pos:column="28"/></operator> <name pos:line="48" pos:column="29">new_sa<pos:position pos:line="48" pos:column="35"/></name></expr>;<pos:position pos:line="48" pos:column="36"/></expr_stmt>
        }<pos:position pos:line="49" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name pos:line="51" pos:column="9">prev_sa<pos:position pos:line="51" pos:column="16"/></name> <operator pos:line="51" pos:column="17">=<pos:position pos:line="51" pos:column="18"/></operator> <name pos:line="51" pos:column="19">new_sa<pos:position pos:line="51" pos:column="25"/></name></expr>;<pos:position pos:line="51" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="52" pos:column="9">ai<pos:position pos:line="52" pos:column="11"/></name> <operator pos:line="52" pos:column="12">=<pos:position pos:line="52" pos:column="13"/></operator> <name><name pos:line="52" pos:column="14">ai<pos:position pos:line="52" pos:column="16"/></name><operator pos:line="52" pos:column="16">-&gt;<pos:position pos:line="52" pos:column="21"/></operator><name pos:line="52" pos:column="18">ai_next<pos:position pos:line="52" pos:column="25"/></name></name></expr>;<pos:position pos:line="52" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">freeaddrinfo<pos:position pos:line="54" pos:column="17"/></name><argument_list pos:line="54" pos:column="17">(<argument><expr><name pos:line="54" pos:column="18">ai_list<pos:position pos:line="54" pos:column="25"/></name></expr></argument>)<pos:position pos:line="54" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="27"/></expr_stmt>
    <return pos:line="55" pos:column="5">return <expr><name pos:line="55" pos:column="12">APR_SUCCESS<pos:position pos:line="55" pos:column="23"/></name></expr>;<pos:position pos:line="55" pos:column="24"/></return>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
