<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3202_httpd-2.0.65.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">apr_atomic_inc<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><specifier pos:line="1" pos:column="21">volatile<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">apr_uint32_t<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">mem<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list> 
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">APR_HAS_THREADS<pos:position pos:line="3" pos:column="20"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_thread_mutex_t<pos:position pos:line="4" pos:column="23"/></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">lock<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><name><name pos:line="4" pos:column="32">hash_mutex<pos:position pos:line="4" pos:column="42"/></name><index pos:line="4" pos:column="42">[<expr><call><name pos:line="4" pos:column="43">ATOMIC_HASH<pos:position pos:line="4" pos:column="54"/></name><argument_list pos:line="4" pos:column="54">(<argument><expr><name pos:line="4" pos:column="55">mem<pos:position pos:line="4" pos:column="58"/></name></expr></argument>)<pos:position pos:line="4" pos:column="59"/></argument_list></call></expr>]<pos:position pos:line="4" pos:column="60"/></index></name></expr></init></decl>;<pos:position pos:line="4" pos:column="61"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_uint32_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">prev<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">apr_thread_mutex_lock<pos:position pos:line="7" pos:column="30"/></name><argument_list pos:line="7" pos:column="30">(<argument><expr><name pos:line="7" pos:column="31">lock<pos:position pos:line="7" pos:column="35"/></name></expr></argument>)<pos:position pos:line="7" pos:column="36"/></argument_list></call> <operator pos:line="7" pos:column="37">==<pos:position pos:line="7" pos:column="39"/></operator> <name pos:line="7" pos:column="40">APR_SUCCESS<pos:position pos:line="7" pos:column="51"/></name></expr>)<pos:position pos:line="7" pos:column="52"/></condition><then pos:line="7" pos:column="52"> <block pos:line="7" pos:column="53">{
        <expr_stmt><expr><name pos:line="8" pos:column="9">prev<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <operator pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">mem<pos:position pos:line="8" pos:column="20"/></name></expr>;<pos:position pos:line="8" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="9" pos:column="9">(<pos:position pos:line="9" pos:column="10"/></operator><operator pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">mem<pos:position pos:line="9" pos:column="14"/></name><operator pos:line="9" pos:column="14">)<pos:position pos:line="9" pos:column="15"/></operator><operator pos:line="9" pos:column="15">++<pos:position pos:line="9" pos:column="17"/></operator></expr>;<pos:position pos:line="9" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">(<argument><expr><name pos:line="10" pos:column="33">lock<pos:position pos:line="10" pos:column="37"/></name></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
<cpp:else pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">else<pos:position pos:line="12" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><operator pos:line="13" pos:column="5">(<pos:position pos:line="13" pos:column="6"/></operator><operator pos:line="13" pos:column="6">*<pos:position pos:line="13" pos:column="7"/></operator><name pos:line="13" pos:column="7">mem<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">)<pos:position pos:line="13" pos:column="11"/></operator><operator pos:line="13" pos:column="11">++<pos:position pos:line="13" pos:column="13"/></operator></expr>;<pos:position pos:line="13" pos:column="14"/></expr_stmt>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="14" pos:column="8">/* APR_HAS_THREADS */</comment>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
