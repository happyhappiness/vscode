<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1004_httpd-2.0.64.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">lookup_map_program<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">request_rec<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">r<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">apr_file_t<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">fpin<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="2" pos:column="33">apr_file_t<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">fpout<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">char<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">key<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">buf<pos:position pos:line="4" pos:column="13"/></name><index pos:line="4" pos:column="13">[<expr><name pos:line="4" pos:column="14">LONG_STRING_LEN<pos:position pos:line="4" pos:column="29"/></name></expr>]<pos:position pos:line="4" pos:column="30"/></index></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">c<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">i<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">nbytes<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_status_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">rv<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>

<cpp:ifndef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifndef<pos:position pos:line="10" pos:column="8"/></cpp:directive> <name pos:line="10" pos:column="9">NO_WRITEV<pos:position pos:line="10" pos:column="18"/></name></cpp:ifndef>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">struct<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">iovec<pos:position pos:line="11" pos:column="17"/></name></name></type> <name><name pos:line="11" pos:column="18">iova<pos:position pos:line="11" pos:column="22"/></name><index pos:line="11" pos:column="22">[<expr><literal type="number" pos:line="11" pos:column="23">2<pos:position pos:line="11" pos:column="24"/></literal></expr>]<pos:position pos:line="11" pos:column="25"/></index></name></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">apr_size_t<pos:position pos:line="12" pos:column="15"/></name></type> <name pos:line="12" pos:column="16">niov<pos:position pos:line="12" pos:column="20"/></name></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="15" pos:column="5">/* when `RewriteEngine off' was used in the per-server
     * context then the rewritemap-programs were not spawned.
     * In this case using such a map (usually in per-dir context)
     * is useless because it is not available.
     *
     * newlines in the key leave bytes in the pipe and cause
     * bad things to happen (next map lookup will use the chars
     * after the \n instead of the new key etc etc - in other words,
     * the Rewritemap falls out of sync with the requests).
     */</comment>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">fpin<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">==<pos:position pos:line="25" pos:column="16"/></operator> <name pos:line="25" pos:column="17">NULL<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">||<pos:position pos:line="25" pos:column="24"/></operator> <name pos:line="25" pos:column="25">fpout<pos:position pos:line="25" pos:column="30"/></name> <operator pos:line="25" pos:column="31">==<pos:position pos:line="25" pos:column="33"/></operator> <name pos:line="25" pos:column="34">NULL<pos:position pos:line="25" pos:column="38"/></name> <operator pos:line="25" pos:column="39">||<pos:position pos:line="25" pos:column="41"/></operator> <call><name pos:line="25" pos:column="42">ap_strchr<pos:position pos:line="25" pos:column="51"/></name><argument_list pos:line="25" pos:column="51">(<argument><expr><name pos:line="25" pos:column="52">key<pos:position pos:line="25" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="25" pos:column="57">'\n'<pos:position pos:line="25" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="63"/></condition><then pos:line="25" pos:column="63"> <block pos:line="25" pos:column="64">{
        <return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">NULL<pos:position pos:line="26" pos:column="20"/></name></expr>;<pos:position pos:line="26" pos:column="21"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>
 
    <comment type="block" pos:line="29" pos:column="5">/* take the lock */</comment>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">rewrite_mapr_lock_acquire<pos:position pos:line="31" pos:column="34"/></name></expr>)<pos:position pos:line="31" pos:column="35"/></condition><then pos:line="31" pos:column="35"> <block pos:line="31" pos:column="36">{
        <expr_stmt><expr><name pos:line="32" pos:column="9">rv<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <call><name pos:line="32" pos:column="14">apr_global_mutex_lock<pos:position pos:line="32" pos:column="35"/></name><argument_list pos:line="32" pos:column="35">(<argument><expr><name pos:line="32" pos:column="36">rewrite_mapr_lock_acquire<pos:position pos:line="32" pos:column="61"/></name></expr></argument>)<pos:position pos:line="32" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="63"/></expr_stmt>
        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">rv<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">!=<pos:position pos:line="33" pos:column="18"/></operator> <name pos:line="33" pos:column="19">APR_SUCCESS<pos:position pos:line="33" pos:column="30"/></name></expr>)<pos:position pos:line="33" pos:column="31"/></condition><then pos:line="33" pos:column="31"> <block pos:line="33" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">ap_log_rerror<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument><expr><name pos:line="34" pos:column="27">APLOG_MARK<pos:position pos:line="34" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="39">APLOG_ERR<pos:position pos:line="34" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="50">rv<pos:position pos:line="34" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="54">r<pos:position pos:line="34" pos:column="55"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="35" pos:column="27">"apr_global_mutex_lock(rewrite_mapr_lock_acquire) "<pos:position pos:line="35" pos:column="78"/></literal>
                          <literal type="string" pos:line="36" pos:column="27">"failed"<pos:position pos:line="36" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt>
            <return pos:line="37" pos:column="13">return <expr><name pos:line="37" pos:column="20">NULL<pos:position pos:line="37" pos:column="24"/></name></expr>;<pos:position pos:line="37" pos:column="25"/></return> <comment type="block" pos:line="37" pos:column="26">/* Maybe this should be fatal? */</comment>
        }<pos:position pos:line="38" pos:column="10"/></block></then></if>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="41" pos:column="5">/* write out the request key */</comment>
<cpp:ifdef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifdef<pos:position pos:line="42" pos:column="7"/></cpp:directive> <name pos:line="42" pos:column="8">NO_WRITEV<pos:position pos:line="42" pos:column="17"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="43" pos:column="5">nbytes<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <call><name pos:line="43" pos:column="14">strlen<pos:position pos:line="43" pos:column="20"/></name><argument_list pos:line="43" pos:column="20">(<argument><expr><name pos:line="43" pos:column="21">key<pos:position pos:line="43" pos:column="24"/></name></expr></argument>)<pos:position pos:line="43" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">apr_file_write<pos:position pos:line="44" pos:column="19"/></name><argument_list pos:line="44" pos:column="19">(<argument><expr><name pos:line="44" pos:column="20">fpin<pos:position pos:line="44" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="26">key<pos:position pos:line="44" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="31">&amp;<pos:position pos:line="44" pos:column="36"/></operator><name pos:line="44" pos:column="32">nbytes<pos:position pos:line="44" pos:column="38"/></name></expr></argument>)<pos:position pos:line="44" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name pos:line="45" pos:column="5">nbytes<pos:position pos:line="45" pos:column="11"/></name> <operator pos:line="45" pos:column="12">=<pos:position pos:line="45" pos:column="13"/></operator> <literal type="number" pos:line="45" pos:column="14">1<pos:position pos:line="45" pos:column="15"/></literal></expr>;<pos:position pos:line="45" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">apr_file_write<pos:position pos:line="46" pos:column="19"/></name><argument_list pos:line="46" pos:column="19">(<argument><expr><name pos:line="46" pos:column="20">fpin<pos:position pos:line="46" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="26">"\n"<pos:position pos:line="46" pos:column="30"/></literal></expr></argument>, <argument><expr><operator pos:line="46" pos:column="32">&amp;<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="33">nbytes<pos:position pos:line="46" pos:column="39"/></name></expr></argument>)<pos:position pos:line="46" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="41"/></expr_stmt>
<cpp:else pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">else<pos:position pos:line="47" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name><name pos:line="48" pos:column="5">iova<pos:position pos:line="48" pos:column="9"/></name><index pos:line="48" pos:column="9">[<expr><literal type="number" pos:line="48" pos:column="10">0<pos:position pos:line="48" pos:column="11"/></literal></expr>]<pos:position pos:line="48" pos:column="12"/></index></name><operator pos:line="48" pos:column="12">.<pos:position pos:line="48" pos:column="13"/></operator><name pos:line="48" pos:column="13">iov_base<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">=<pos:position pos:line="48" pos:column="23"/></operator> <name pos:line="48" pos:column="24">key<pos:position pos:line="48" pos:column="27"/></name></expr>;<pos:position pos:line="48" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="49" pos:column="5">iova<pos:position pos:line="49" pos:column="9"/></name><index pos:line="49" pos:column="9">[<expr><literal type="number" pos:line="49" pos:column="10">0<pos:position pos:line="49" pos:column="11"/></literal></expr>]<pos:position pos:line="49" pos:column="12"/></index></name><operator pos:line="49" pos:column="12">.<pos:position pos:line="49" pos:column="13"/></operator><name pos:line="49" pos:column="13">iov_len<pos:position pos:line="49" pos:column="20"/></name> <operator pos:line="49" pos:column="21">=<pos:position pos:line="49" pos:column="22"/></operator> <call><name pos:line="49" pos:column="23">strlen<pos:position pos:line="49" pos:column="29"/></name><argument_list pos:line="49" pos:column="29">(<argument><expr><name pos:line="49" pos:column="30">key<pos:position pos:line="49" pos:column="33"/></name></expr></argument>)<pos:position pos:line="49" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="50" pos:column="5">iova<pos:position pos:line="50" pos:column="9"/></name><index pos:line="50" pos:column="9">[<expr><literal type="number" pos:line="50" pos:column="10">1<pos:position pos:line="50" pos:column="11"/></literal></expr>]<pos:position pos:line="50" pos:column="12"/></index></name><operator pos:line="50" pos:column="12">.<pos:position pos:line="50" pos:column="13"/></operator><name pos:line="50" pos:column="13">iov_base<pos:position pos:line="50" pos:column="21"/></name> <operator pos:line="50" pos:column="22">=<pos:position pos:line="50" pos:column="23"/></operator> <literal type="string" pos:line="50" pos:column="24">"\n"<pos:position pos:line="50" pos:column="28"/></literal></expr>;<pos:position pos:line="50" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="51" pos:column="5">iova<pos:position pos:line="51" pos:column="9"/></name><index pos:line="51" pos:column="9">[<expr><literal type="number" pos:line="51" pos:column="10">1<pos:position pos:line="51" pos:column="11"/></literal></expr>]<pos:position pos:line="51" pos:column="12"/></index></name><operator pos:line="51" pos:column="12">.<pos:position pos:line="51" pos:column="13"/></operator><name pos:line="51" pos:column="13">iov_len<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">=<pos:position pos:line="51" pos:column="22"/></operator> <literal type="number" pos:line="51" pos:column="23">1<pos:position pos:line="51" pos:column="24"/></literal></expr>;<pos:position pos:line="51" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><name pos:line="53" pos:column="5">niov<pos:position pos:line="53" pos:column="9"/></name> <operator pos:line="53" pos:column="10">=<pos:position pos:line="53" pos:column="11"/></operator> <literal type="number" pos:line="53" pos:column="12">2<pos:position pos:line="53" pos:column="13"/></literal></expr>;<pos:position pos:line="53" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">apr_file_writev<pos:position pos:line="54" pos:column="20"/></name><argument_list pos:line="54" pos:column="20">(<argument><expr><name pos:line="54" pos:column="21">fpin<pos:position pos:line="54" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="27">iova<pos:position pos:line="54" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="33">niov<pos:position pos:line="54" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="39">&amp;<pos:position pos:line="54" pos:column="44"/></operator><name pos:line="54" pos:column="40">nbytes<pos:position pos:line="54" pos:column="46"/></name></expr></argument>)<pos:position pos:line="54" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="48"/></expr_stmt>
<cpp:endif pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">endif<pos:position pos:line="55" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="57" pos:column="5">/* read in the response value */</comment>
    <expr_stmt><expr><name pos:line="58" pos:column="5">i<pos:position pos:line="58" pos:column="6"/></name> <operator pos:line="58" pos:column="7">=<pos:position pos:line="58" pos:column="8"/></operator> <literal type="number" pos:line="58" pos:column="9">0<pos:position pos:line="58" pos:column="10"/></literal></expr>;<pos:position pos:line="58" pos:column="11"/></expr_stmt>
    <expr_stmt><expr><name pos:line="59" pos:column="5">nbytes<pos:position pos:line="59" pos:column="11"/></name> <operator pos:line="59" pos:column="12">=<pos:position pos:line="59" pos:column="13"/></operator> <literal type="number" pos:line="59" pos:column="14">1<pos:position pos:line="59" pos:column="15"/></literal></expr>;<pos:position pos:line="59" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">apr_file_read<pos:position pos:line="60" pos:column="18"/></name><argument_list pos:line="60" pos:column="18">(<argument><expr><name pos:line="60" pos:column="19">fpout<pos:position pos:line="60" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="26">&amp;<pos:position pos:line="60" pos:column="31"/></operator><name pos:line="60" pos:column="27">c<pos:position pos:line="60" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="30">&amp;<pos:position pos:line="60" pos:column="35"/></operator><name pos:line="60" pos:column="31">nbytes<pos:position pos:line="60" pos:column="37"/></name></expr></argument>)<pos:position pos:line="60" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="39"/></expr_stmt>
    <while pos:line="61" pos:column="5">while <condition pos:line="61" pos:column="11">(<expr><name pos:line="61" pos:column="12">nbytes<pos:position pos:line="61" pos:column="18"/></name> <operator pos:line="61" pos:column="19">==<pos:position pos:line="61" pos:column="21"/></operator> <literal type="number" pos:line="61" pos:column="22">1<pos:position pos:line="61" pos:column="23"/></literal> <operator pos:line="61" pos:column="24">&amp;&amp;<pos:position pos:line="61" pos:column="34"/></operator> <operator pos:line="61" pos:column="27">(<pos:position pos:line="61" pos:column="28"/></operator><name pos:line="61" pos:column="28">i<pos:position pos:line="61" pos:column="29"/></name> <operator pos:line="61" pos:column="30">&lt;<pos:position pos:line="61" pos:column="34"/></operator> <name pos:line="61" pos:column="32">LONG_STRING_LEN<pos:position pos:line="61" pos:column="47"/></name><operator pos:line="61" pos:column="47">-<pos:position pos:line="61" pos:column="48"/></operator><literal type="number" pos:line="61" pos:column="48">1<pos:position pos:line="61" pos:column="49"/></literal><operator pos:line="61" pos:column="49">)<pos:position pos:line="61" pos:column="50"/></operator></expr>)<pos:position pos:line="61" pos:column="51"/></condition> <block pos:line="61" pos:column="52">{
        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><name pos:line="62" pos:column="13">c<pos:position pos:line="62" pos:column="14"/></name> <operator pos:line="62" pos:column="15">==<pos:position pos:line="62" pos:column="17"/></operator> <literal type="char" pos:line="62" pos:column="18">'\n'<pos:position pos:line="62" pos:column="22"/></literal></expr>)<pos:position pos:line="62" pos:column="23"/></condition><then pos:line="62" pos:column="23"> <block pos:line="62" pos:column="24">{
            <break pos:line="63" pos:column="13">break;<pos:position pos:line="63" pos:column="19"/></break>
        }<pos:position pos:line="64" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="65" pos:column="9">buf<pos:position pos:line="65" pos:column="12"/></name><index pos:line="65" pos:column="12">[<expr><name pos:line="65" pos:column="13">i<pos:position pos:line="65" pos:column="14"/></name><operator pos:line="65" pos:column="14">++<pos:position pos:line="65" pos:column="16"/></operator></expr>]<pos:position pos:line="65" pos:column="17"/></index></name> <operator pos:line="65" pos:column="18">=<pos:position pos:line="65" pos:column="19"/></operator> <name pos:line="65" pos:column="20">c<pos:position pos:line="65" pos:column="21"/></name></expr>;<pos:position pos:line="65" pos:column="22"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="67" pos:column="9">apr_file_read<pos:position pos:line="67" pos:column="22"/></name><argument_list pos:line="67" pos:column="22">(<argument><expr><name pos:line="67" pos:column="23">fpout<pos:position pos:line="67" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="30">&amp;<pos:position pos:line="67" pos:column="35"/></operator><name pos:line="67" pos:column="31">c<pos:position pos:line="67" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="34">&amp;<pos:position pos:line="67" pos:column="39"/></operator><name pos:line="67" pos:column="35">nbytes<pos:position pos:line="67" pos:column="41"/></name></expr></argument>)<pos:position pos:line="67" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="68" pos:column="6"/></block></while>
    <expr_stmt><expr><name><name pos:line="69" pos:column="5">buf<pos:position pos:line="69" pos:column="8"/></name><index pos:line="69" pos:column="8">[<expr><name pos:line="69" pos:column="9">i<pos:position pos:line="69" pos:column="10"/></name></expr>]<pos:position pos:line="69" pos:column="11"/></index></name> <operator pos:line="69" pos:column="12">=<pos:position pos:line="69" pos:column="13"/></operator> <literal type="char" pos:line="69" pos:column="14">'\0'<pos:position pos:line="69" pos:column="18"/></literal></expr>;<pos:position pos:line="69" pos:column="19"/></expr_stmt>

    <comment type="block" pos:line="71" pos:column="5">/* give the lock back */</comment>
    <if pos:line="72" pos:column="5">if <condition pos:line="72" pos:column="8">(<expr><name pos:line="72" pos:column="9">rewrite_mapr_lock_acquire<pos:position pos:line="72" pos:column="34"/></name></expr>)<pos:position pos:line="72" pos:column="35"/></condition><then pos:line="72" pos:column="35"> <block pos:line="72" pos:column="36">{
        <expr_stmt><expr><name pos:line="73" pos:column="9">rv<pos:position pos:line="73" pos:column="11"/></name> <operator pos:line="73" pos:column="12">=<pos:position pos:line="73" pos:column="13"/></operator> <call><name pos:line="73" pos:column="14">apr_global_mutex_unlock<pos:position pos:line="73" pos:column="37"/></name><argument_list pos:line="73" pos:column="37">(<argument><expr><name pos:line="73" pos:column="38">rewrite_mapr_lock_acquire<pos:position pos:line="73" pos:column="63"/></name></expr></argument>)<pos:position pos:line="73" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="65"/></expr_stmt>
        <if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">rv<pos:position pos:line="74" pos:column="15"/></name> <operator pos:line="74" pos:column="16">!=<pos:position pos:line="74" pos:column="18"/></operator> <name pos:line="74" pos:column="19">APR_SUCCESS<pos:position pos:line="74" pos:column="30"/></name></expr>)<pos:position pos:line="74" pos:column="31"/></condition><then pos:line="74" pos:column="31"> <block pos:line="74" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="75" pos:column="13">ap_log_rerror<pos:position pos:line="75" pos:column="26"/></name><argument_list pos:line="75" pos:column="26">(<argument><expr><name pos:line="75" pos:column="27">APLOG_MARK<pos:position pos:line="75" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="39">APLOG_ERR<pos:position pos:line="75" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="50">rv<pos:position pos:line="75" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="54">r<pos:position pos:line="75" pos:column="55"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="76" pos:column="27">"apr_global_mutex_unlock(rewrite_mapr_lock_acquire) "<pos:position pos:line="76" pos:column="80"/></literal>
                          <literal type="string" pos:line="77" pos:column="27">"failed"<pos:position pos:line="77" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="37"/></expr_stmt>
            <return pos:line="78" pos:column="13">return <expr><name pos:line="78" pos:column="20">NULL<pos:position pos:line="78" pos:column="24"/></name></expr>;<pos:position pos:line="78" pos:column="25"/></return> <comment type="block" pos:line="78" pos:column="26">/* Maybe this should be fatal? */</comment>
        }<pos:position pos:line="79" pos:column="10"/></block></then></if>
    }<pos:position pos:line="80" pos:column="6"/></block></then></if>

    <if pos:line="82" pos:column="5">if <condition pos:line="82" pos:column="8">(<expr><call><name pos:line="82" pos:column="9">strcasecmp<pos:position pos:line="82" pos:column="19"/></name><argument_list pos:line="82" pos:column="19">(<argument><expr><name pos:line="82" pos:column="20">buf<pos:position pos:line="82" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="25">"NULL"<pos:position pos:line="82" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="32"/></argument_list></call> <operator pos:line="82" pos:column="33">==<pos:position pos:line="82" pos:column="35"/></operator> <literal type="number" pos:line="82" pos:column="36">0<pos:position pos:line="82" pos:column="37"/></literal></expr>)<pos:position pos:line="82" pos:column="38"/></condition><then pos:line="82" pos:column="38"> <block pos:line="82" pos:column="39">{
        <return pos:line="83" pos:column="9">return <expr><name pos:line="83" pos:column="16">NULL<pos:position pos:line="83" pos:column="20"/></name></expr>;<pos:position pos:line="83" pos:column="21"/></return>
    }<pos:position pos:line="84" pos:column="6"/></block></then>
    <else pos:line="85" pos:column="5">else <block pos:line="85" pos:column="10">{
        <return pos:line="86" pos:column="9">return <expr><call><name pos:line="86" pos:column="16">apr_pstrdup<pos:position pos:line="86" pos:column="27"/></name><argument_list pos:line="86" pos:column="27">(<argument><expr><name><name pos:line="86" pos:column="28">r<pos:position pos:line="86" pos:column="29"/></name><operator pos:line="86" pos:column="29">-&gt;<pos:position pos:line="86" pos:column="34"/></operator><name pos:line="86" pos:column="31">pool<pos:position pos:line="86" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="37">buf<pos:position pos:line="86" pos:column="40"/></name></expr></argument>)<pos:position pos:line="86" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="42"/></return>
    }<pos:position pos:line="87" pos:column="6"/></block></else></if>
}<pos:position pos:line="88" pos:column="2"/></block></function></unit>
