<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_1161.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
<decl_stmt><decl><type><name pos:line="3" pos:column="1">pcre<pos:position pos:line="3" pos:column="5"/></name> <modifier pos:line="3" pos:column="6">*<pos:position pos:line="3" pos:column="7"/></modifier></type><name pos:line="3" pos:column="7">re<pos:position pos:line="3" pos:column="9"/></name></decl>;<pos:position pos:line="3" pos:column="10"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="4" pos:column="1">const<pos:position pos:line="4" pos:column="6"/></specifier> <name pos:line="4" pos:column="7">char<pos:position pos:line="4" pos:column="11"/></name> <modifier pos:line="4" pos:column="12">*<pos:position pos:line="4" pos:column="13"/></modifier></type><name pos:line="4" pos:column="13">error<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">char<pos:position pos:line="5" pos:column="5"/></name> <modifier pos:line="5" pos:column="6">*<pos:position pos:line="5" pos:column="7"/></modifier></type><name pos:line="5" pos:column="7">pattern<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="6" pos:column="1">char<pos:position pos:line="6" pos:column="5"/></name> <modifier pos:line="6" pos:column="6">*<pos:position pos:line="6" pos:column="7"/></modifier></type><name pos:line="6" pos:column="7">subject<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="7" pos:column="1">unsigned<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">char<pos:position pos:line="7" pos:column="14"/></name> <modifier pos:line="7" pos:column="15">*<pos:position pos:line="7" pos:column="16"/></modifier></type><name pos:line="7" pos:column="16">name_table<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="8" pos:column="1">int<pos:position pos:line="8" pos:column="4"/></name></type> <name pos:line="8" pos:column="5">erroffset<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="9" pos:column="1">int<pos:position pos:line="9" pos:column="4"/></name></type> <name pos:line="9" pos:column="5">find_all<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="10" pos:column="1">int<pos:position pos:line="10" pos:column="4"/></name></type> <name pos:line="10" pos:column="5">namecount<pos:position pos:line="10" pos:column="14"/></name></decl>;<pos:position pos:line="10" pos:column="15"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="11" pos:column="1">int<pos:position pos:line="11" pos:column="4"/></name></type> <name pos:line="11" pos:column="5">name_entry_size<pos:position pos:line="11" pos:column="20"/></name></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="12" pos:column="1">int<pos:position pos:line="12" pos:column="4"/></name></type> <name><name pos:line="12" pos:column="5">ovector<pos:position pos:line="12" pos:column="12"/></name><index pos:line="12" pos:column="12">[<expr><name pos:line="12" pos:column="13">OVECCOUNT<pos:position pos:line="12" pos:column="22"/></name></expr>]<pos:position pos:line="12" pos:column="23"/></index></name></decl>;<pos:position pos:line="12" pos:column="24"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="13" pos:column="1">int<pos:position pos:line="13" pos:column="4"/></name></type> <name pos:line="13" pos:column="5">subject_length<pos:position pos:line="13" pos:column="19"/></name></decl>;<pos:position pos:line="13" pos:column="20"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="14" pos:column="1">int<pos:position pos:line="14" pos:column="4"/></name></type> <name pos:line="14" pos:column="5">rc<pos:position pos:line="14" pos:column="7"/></name></decl>, <decl><type ref="prev"/><name pos:line="14" pos:column="9">i<pos:position pos:line="14" pos:column="10"/></name></decl>;<pos:position pos:line="14" pos:column="11"/></decl_stmt>


<comment type="block" format="doxygen" pos:line="17" pos:column="1">/**************************************************************************
* First, sort out the command line. There is only one possible option at  *
* the moment, "-g" to request repeated matching to find all occurrences,  *
* like Perl's /g option. We set the variable find_all to a non-zero value *
* if the -g option is present. Apart from that, there must be exactly two *
* arguments.                                                              *
**************************************************************************/</comment>

<expr_stmt><expr><name pos:line="25" pos:column="1">find_all<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">=<pos:position pos:line="25" pos:column="11"/></operator> <literal type="number" pos:line="25" pos:column="12">0<pos:position pos:line="25" pos:column="13"/></literal></expr>;<pos:position pos:line="25" pos:column="14"/></expr_stmt>
<for pos:line="26" pos:column="1">for <control pos:line="26" pos:column="5">(<init><expr><name pos:line="26" pos:column="6">i<pos:position pos:line="26" pos:column="7"/></name> <operator pos:line="26" pos:column="8">=<pos:position pos:line="26" pos:column="9"/></operator> <literal type="number" pos:line="26" pos:column="10">1<pos:position pos:line="26" pos:column="11"/></literal></expr>;<pos:position pos:line="26" pos:column="12"/></init> <condition><expr><name pos:line="26" pos:column="13">i<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">&lt;<pos:position pos:line="26" pos:column="19"/></operator> <name pos:line="26" pos:column="17">argc<pos:position pos:line="26" pos:column="21"/></name></expr>;<pos:position pos:line="26" pos:column="22"/></condition> <incr><expr><name pos:line="26" pos:column="23">i<pos:position pos:line="26" pos:column="24"/></name><operator pos:line="26" pos:column="24">++<pos:position pos:line="26" pos:column="26"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="27"/></control>
  <block pos:line="27" pos:column="3">{
  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><call><name pos:line="28" pos:column="7">strcmp<pos:position pos:line="28" pos:column="13"/></name><argument_list pos:line="28" pos:column="13">(<argument><expr><name><name pos:line="28" pos:column="14">argv<pos:position pos:line="28" pos:column="18"/></name><index pos:line="28" pos:column="18">[<expr><name pos:line="28" pos:column="19">i<pos:position pos:line="28" pos:column="20"/></name></expr>]<pos:position pos:line="28" pos:column="21"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="23">"-g"<pos:position pos:line="28" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="28"/></argument_list></call> <operator pos:line="28" pos:column="29">==<pos:position pos:line="28" pos:column="31"/></operator> <literal type="number" pos:line="28" pos:column="32">0<pos:position pos:line="28" pos:column="33"/></literal></expr>)<pos:position pos:line="28" pos:column="34"/></condition><then pos:line="28" pos:column="34"> <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="35">find_all<pos:position pos:line="28" pos:column="43"/></name> <operator pos:line="28" pos:column="44">=<pos:position pos:line="28" pos:column="45"/></operator> <literal type="number" pos:line="28" pos:column="46">1<pos:position pos:line="28" pos:column="47"/></literal></expr>;<pos:position pos:line="28" pos:column="48"/></expr_stmt></block></then>
    <else pos:line="29" pos:column="5">else <block type="pseudo"><break pos:line="29" pos:column="10">break;<pos:position pos:line="29" pos:column="16"/></break></block></else></if>
  }<pos:position pos:line="30" pos:column="4"/></block></for>

<comment type="block" pos:line="32" pos:column="1">/* After the options, we require exactly two arguments, which are the pattern,
and the subject string. */</comment>

<if pos:line="35" pos:column="1">if <condition pos:line="35" pos:column="4">(<expr><name pos:line="35" pos:column="5">argc<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">-<pos:position pos:line="35" pos:column="11"/></operator> <name pos:line="35" pos:column="12">i<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">!=<pos:position pos:line="35" pos:column="16"/></operator> <literal type="number" pos:line="35" pos:column="17">2<pos:position pos:line="35" pos:column="18"/></literal></expr>)<pos:position pos:line="35" pos:column="19"/></condition><then pos:line="35" pos:column="19">
  <block pos:line="36" pos:column="3">{
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">printf<pos:position pos:line="37" pos:column="9"/></name><argument_list pos:line="37" pos:column="9">(<argument><expr><literal type="string" pos:line="37" pos:column="10">"Two arguments required: a regex and a subject string\n"<pos:position pos:line="37" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="68"/></expr_stmt>
  <return pos:line="38" pos:column="3">return <expr><literal type="number" pos:line="38" pos:column="10">1<pos:position pos:line="38" pos:column="11"/></literal></expr>;<pos:position pos:line="38" pos:column="12"/></return>
  }<pos:position pos:line="39" pos:column="4"/></block></then></if>

<expr_stmt><expr><name pos:line="41" pos:column="1">pattern<pos:position pos:line="41" pos:column="8"/></name> <operator pos:line="41" pos:column="9">=<pos:position pos:line="41" pos:column="10"/></operator> <name><name pos:line="41" pos:column="11">argv<pos:position pos:line="41" pos:column="15"/></name><index pos:line="41" pos:column="15">[<expr><name pos:line="41" pos:column="16">i<pos:position pos:line="41" pos:column="17"/></name></expr>]<pos:position pos:line="41" pos:column="18"/></index></name></expr>;<pos:position pos:line="41" pos:column="19"/></expr_stmt>
<expr_stmt><expr><name pos:line="42" pos:column="1">subject<pos:position pos:line="42" pos:column="8"/></name> <operator pos:line="42" pos:column="9">=<pos:position pos:line="42" pos:column="10"/></operator> <name><name pos:line="42" pos:column="11">argv<pos:position pos:line="42" pos:column="15"/></name><index pos:line="42" pos:column="15">[<expr><name pos:line="42" pos:column="16">i<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">+<pos:position pos:line="42" pos:column="18"/></operator><literal type="number" pos:line="42" pos:column="18">1<pos:position pos:line="42" pos:column="19"/></literal></expr>]<pos:position pos:line="42" pos:column="20"/></index></name></expr>;<pos:position pos:line="42" pos:column="21"/></expr_stmt>
<expr_stmt><expr><name pos:line="43" pos:column="1">subject_length<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <operator pos:line="43" pos:column="18">(<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="19">int<pos:position pos:line="43" pos:column="22"/></name><operator pos:line="43" pos:column="22">)<pos:position pos:line="43" pos:column="23"/></operator><call><name pos:line="43" pos:column="23">strlen<pos:position pos:line="43" pos:column="29"/></name><argument_list pos:line="43" pos:column="29">(<argument><expr><name pos:line="43" pos:column="30">subject<pos:position pos:line="43" pos:column="37"/></name></expr></argument>)<pos:position pos:line="43" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="39"/></expr_stmt>


<comment type="block" format="doxygen" pos:line="46" pos:column="1">/*************************************************************************
* Now we are going to compile the regular expression pattern, and handle *
* and errors that are detected.                                          *
*************************************************************************/</comment>

<expr_stmt><expr><name pos:line="51" pos:column="1">re<pos:position pos:line="51" pos:column="3"/></name> <operator pos:line="51" pos:column="4">=<pos:position pos:line="51" pos:column="5"/></operator> <call><name pos:line="51" pos:column="6">pcre_compile<pos:position pos:line="51" pos:column="18"/></name><argument_list pos:line="51" pos:column="18">(
  <argument><expr><name pos:line="52" pos:column="3">pattern<pos:position pos:line="52" pos:column="10"/></name></expr></argument>,              <comment type="block" pos:line="52" pos:column="25">/* the pattern */</comment>
  <argument><expr><literal type="number" pos:line="53" pos:column="3">0<pos:position pos:line="53" pos:column="4"/></literal></expr></argument>,                    <comment type="block" pos:line="53" pos:column="25">/* default options */</comment>
  <argument><expr><operator pos:line="54" pos:column="3">&amp;<pos:position pos:line="54" pos:column="8"/></operator><name pos:line="54" pos:column="4">error<pos:position pos:line="54" pos:column="9"/></name></expr></argument>,               <comment type="block" pos:line="54" pos:column="25">/* for error message */</comment>
  <argument><expr><operator pos:line="55" pos:column="3">&amp;<pos:position pos:line="55" pos:column="8"/></operator><name pos:line="55" pos:column="4">erroffset<pos:position pos:line="55" pos:column="13"/></name></expr></argument>,           <comment type="block" pos:line="55" pos:column="25">/* for error offset */</comment>
  <argument><expr><name pos:line="56" pos:column="3">NULL<pos:position pos:line="56" pos:column="7"/></name></expr></argument>)<pos:position pos:line="56" pos:column="8"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="9"/></expr_stmt>                <comment type="block" pos:line="56" pos:column="25">/* use default character tables */</comment>

<comment type="block" pos:line="58" pos:column="1">/* Compilation failed: print the error message and exit */</comment>

<if pos:line="60" pos:column="1">if <condition pos:line="60" pos:column="4">(<expr><name pos:line="60" pos:column="5">re<pos:position pos:line="60" pos:column="7"/></name> <operator pos:line="60" pos:column="8">==<pos:position pos:line="60" pos:column="10"/></operator> <name pos:line="60" pos:column="11">NULL<pos:position pos:line="60" pos:column="15"/></name></expr>)<pos:position pos:line="60" pos:column="16"/></condition><then pos:line="60" pos:column="16">
  <block pos:line="61" pos:column="3">{
  <expr_stmt><expr><call><name pos:line="62" pos:column="3">printf<pos:position pos:line="62" pos:column="9"/></name><argument_list pos:line="62" pos:column="9">(<argument><expr><literal type="string" pos:line="62" pos:column="10">"PCRE compilation failed at offset %d: %s\n"<pos:position pos:line="62" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="56">erroffset<pos:position pos:line="62" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="67">error<pos:position pos:line="62" pos:column="72"/></name></expr></argument>)<pos:position pos:line="62" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="74"/></expr_stmt>
  <return pos:line="63" pos:column="3">return <expr><literal type="number" pos:line="63" pos:column="10">1<pos:position pos:line="63" pos:column="11"/></literal></expr>;<pos:position pos:line="63" pos:column="12"/></return>
  }<pos:position pos:line="64" pos:column="4"/></block></then></if>


<comment type="block" format="doxygen" pos:line="67" pos:column="1">/*************************************************************************
* If the compilation succeeded, we call PCRE again, in order to do a     *
* pattern match against the subject string. This does just ONE match. If *
* further matching is needed, it will be done below.                     *
*************************************************************************/</comment>

<expr_stmt><expr><name pos:line="73" pos:column="1">rc<pos:position pos:line="73" pos:column="3"/></name> <operator pos:line="73" pos:column="4">=<pos:position pos:line="73" pos:column="5"/></operator> <call><name pos:line="73" pos:column="6">pcre_exec<pos:position pos:line="73" pos:column="15"/></name><argument_list pos:line="73" pos:column="15">(
  <argument><expr><name pos:line="74" pos:column="3">re<pos:position pos:line="74" pos:column="5"/></name></expr></argument>,                   <comment type="block" pos:line="74" pos:column="25">/* the compiled pattern */</comment>
  <argument><expr><name pos:line="75" pos:column="3">NULL<pos:position pos:line="75" pos:column="7"/></name></expr></argument>,                 <comment type="block" pos:line="75" pos:column="25">/* no extra data - we didn't study the pattern */</comment>
  <argument><expr><name pos:line="76" pos:column="3">subject<pos:position pos:line="76" pos:column="10"/></name></expr></argument>,              <comment type="block" pos:line="76" pos:column="25">/* the subject string */</comment>
  <argument><expr><name pos:line="77" pos:column="3">subject_length<pos:position pos:line="77" pos:column="17"/></name></expr></argument>,       <comment type="block" pos:line="77" pos:column="25">/* the length of the subject */</comment>
  <argument><expr><literal type="number" pos:line="78" pos:column="3">0<pos:position pos:line="78" pos:column="4"/></literal></expr></argument>,                    <comment type="block" pos:line="78" pos:column="25">/* start at offset 0 in the subject */</comment>
  <argument><expr><literal type="number" pos:line="79" pos:column="3">0<pos:position pos:line="79" pos:column="4"/></literal></expr></argument>,                    <comment type="block" pos:line="79" pos:column="25">/* default options */</comment>
  <argument><expr><name pos:line="80" pos:column="3">ovector<pos:position pos:line="80" pos:column="10"/></name></expr></argument>,              <comment type="block" pos:line="80" pos:column="25">/* output vector for substring information */</comment>
  <argument><expr><name pos:line="81" pos:column="3">OVECCOUNT<pos:position pos:line="81" pos:column="12"/></name></expr></argument>)<pos:position pos:line="81" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="14"/></expr_stmt>           <comment type="block" pos:line="81" pos:column="25">/* number of elements in the output vector */</comment>

<comment type="block" pos:line="83" pos:column="1">/* Matching failed: handle error cases */</comment>

<if pos:line="85" pos:column="1">if <condition pos:line="85" pos:column="4">(<expr><name pos:line="85" pos:column="5">rc<pos:position pos:line="85" pos:column="7"/></name> <operator pos:line="85" pos:column="8">&lt;<pos:position pos:line="85" pos:column="12"/></operator> <literal type="number" pos:line="85" pos:column="10">0<pos:position pos:line="85" pos:column="11"/></literal></expr>)<pos:position pos:line="85" pos:column="12"/></condition><then pos:line="85" pos:column="12">
  <block pos:line="86" pos:column="3">{
  <switch pos:line="87" pos:column="3">switch<condition pos:line="87" pos:column="9">(<expr><name pos:line="87" pos:column="10">rc<pos:position pos:line="87" pos:column="12"/></name></expr>)<pos:position pos:line="87" pos:column="13"/></condition>
    <block pos:line="88" pos:column="5">{
    <case pos:line="89" pos:column="5">case <expr><name pos:line="89" pos:column="10">PCRE_ERROR_NOMATCH<pos:position pos:line="89" pos:column="28"/></name></expr>:<pos:position pos:line="89" pos:column="29"/></case> <expr_stmt><expr><call><name pos:line="89" pos:column="30">printf<pos:position pos:line="89" pos:column="36"/></name><argument_list pos:line="89" pos:column="36">(<argument><expr><literal type="string" pos:line="89" pos:column="37">"No match\n"<pos:position pos:line="89" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="51"/></expr_stmt> <break pos:line="89" pos:column="52">break;<pos:position pos:line="89" pos:column="58"/></break>
    <comment type="block" pos:line="90" pos:column="5">/*
    Handle other special cases if you like
    */</comment>
    <default pos:line="93" pos:column="5">default:<pos:position pos:line="93" pos:column="13"/></default> <expr_stmt><expr><call><name pos:line="93" pos:column="14">printf<pos:position pos:line="93" pos:column="20"/></name><argument_list pos:line="93" pos:column="20">(<argument><expr><literal type="string" pos:line="93" pos:column="21">"Matching error %d\n"<pos:position pos:line="93" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="44">rc<pos:position pos:line="93" pos:column="46"/></name></expr></argument>)<pos:position pos:line="93" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="48"/></expr_stmt> <break pos:line="93" pos:column="49">break;<pos:position pos:line="93" pos:column="55"/></break>
    }<pos:position pos:line="94" pos:column="6"/></block></switch>
  <expr_stmt><expr><call><name pos:line="95" pos:column="3">free<pos:position pos:line="95" pos:column="7"/></name><argument_list pos:line="95" pos:column="7">(<argument><expr><name pos:line="95" pos:column="8">re<pos:position pos:line="95" pos:column="10"/></name></expr></argument>)<pos:position pos:line="95" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="12"/></expr_stmt>     <comment type="block" pos:line="95" pos:column="17">/* Release memory used for the compiled pattern */</comment>
  <return pos:line="96" pos:column="3">return <expr><literal type="number" pos:line="96" pos:column="10">1<pos:position pos:line="96" pos:column="11"/></literal></expr>;<pos:position pos:line="96" pos:column="12"/></return>
  }<pos:position pos:line="97" pos:column="4"/></block></then></if>

<comment type="block" pos:line="99" pos:column="1">/* Match succeded */</comment>

<expr_stmt><expr><call><name pos:line="101" pos:column="1">printf<pos:position pos:line="101" pos:column="7"/></name><argument_list pos:line="101" pos:column="7">(<argument><expr><literal type="string" pos:line="101" pos:column="8">"\nMatch succeeded at offset %d\n"<pos:position pos:line="101" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="44">ovector<pos:position pos:line="101" pos:column="51"/></name><index pos:line="101" pos:column="51">[<expr><literal type="number" pos:line="101" pos:column="52">0<pos:position pos:line="101" pos:column="53"/></literal></expr>]<pos:position pos:line="101" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="101" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="56"/></expr_stmt>


<comment type="block" format="doxygen" pos:line="104" pos:column="1">/*************************************************************************
* We have found the first match within the subject string. If the output *
* vector wasn't big enough, set its size to the maximum. Then output any *
* substrings that were captured.                                         *
*************************************************************************/</comment>

<comment type="block" pos:line="110" pos:column="1">/* The output vector wasn't big enough */</comment>

<if pos:line="112" pos:column="1">if <condition pos:line="112" pos:column="4">(<expr><name pos:line="112" pos:column="5">rc<pos:position pos:line="112" pos:column="7"/></name> <operator pos:line="112" pos:column="8">==<pos:position pos:line="112" pos:column="10"/></operator> <literal type="number" pos:line="112" pos:column="11">0<pos:position pos:line="112" pos:column="12"/></literal></expr>)<pos:position pos:line="112" pos:column="13"/></condition><then pos:line="112" pos:column="13">
  <block pos:line="113" pos:column="3">{
  <expr_stmt><expr><name pos:line="114" pos:column="3">rc<pos:position pos:line="114" pos:column="5"/></name> <operator pos:line="114" pos:column="6">=<pos:position pos:line="114" pos:column="7"/></operator> <name pos:line="114" pos:column="8">OVECCOUNT<pos:position pos:line="114" pos:column="17"/></name><operator pos:line="114" pos:column="17">/<pos:position pos:line="114" pos:column="18"/></operator><literal type="number" pos:line="114" pos:column="18">3<pos:position pos:line="114" pos:column="19"/></literal></expr>;<pos:position pos:line="114" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="115" pos:column="3">printf<pos:position pos:line="115" pos:column="9"/></name><argument_list pos:line="115" pos:column="9">(<argument><expr><literal type="string" pos:line="115" pos:column="10">"ovector only has room for %d captured substrings\n"<pos:position pos:line="115" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="115" pos:column="64">rc<pos:position pos:line="115" pos:column="66"/></name> <operator pos:line="115" pos:column="67">-<pos:position pos:line="115" pos:column="68"/></operator> <literal type="number" pos:line="115" pos:column="69">1<pos:position pos:line="115" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="72"/></expr_stmt>
  }<pos:position pos:line="116" pos:column="4"/></block></then></if>

<comment type="block" pos:line="118" pos:column="1">/* Show substrings stored in the output vector by number. Obviously, in a real
application you might want to do things other than print them. */</comment>

<for pos:line="121" pos:column="1">for <control pos:line="121" pos:column="5">(<init><expr><name pos:line="121" pos:column="6">i<pos:position pos:line="121" pos:column="7"/></name> <operator pos:line="121" pos:column="8">=<pos:position pos:line="121" pos:column="9"/></operator> <literal type="number" pos:line="121" pos:column="10">0<pos:position pos:line="121" pos:column="11"/></literal></expr>;<pos:position pos:line="121" pos:column="12"/></init> <condition><expr><name pos:line="121" pos:column="13">i<pos:position pos:line="121" pos:column="14"/></name> <operator pos:line="121" pos:column="15">&lt;<pos:position pos:line="121" pos:column="19"/></operator> <name pos:line="121" pos:column="17">rc<pos:position pos:line="121" pos:column="19"/></name></expr>;<pos:position pos:line="121" pos:column="20"/></condition> <incr><expr><name pos:line="121" pos:column="21">i<pos:position pos:line="121" pos:column="22"/></name><operator pos:line="121" pos:column="22">++<pos:position pos:line="121" pos:column="24"/></operator></expr></incr>)<pos:position pos:line="121" pos:column="25"/></control>
  <block pos:line="122" pos:column="3">{
  <decl_stmt><decl><type><name pos:line="123" pos:column="3">char<pos:position pos:line="123" pos:column="7"/></name> <modifier pos:line="123" pos:column="8">*<pos:position pos:line="123" pos:column="9"/></modifier></type><name pos:line="123" pos:column="9">substring_start<pos:position pos:line="123" pos:column="24"/></name> <init pos:line="123" pos:column="25">= <expr><name pos:line="123" pos:column="27">subject<pos:position pos:line="123" pos:column="34"/></name> <operator pos:line="123" pos:column="35">+<pos:position pos:line="123" pos:column="36"/></operator> <name><name pos:line="123" pos:column="37">ovector<pos:position pos:line="123" pos:column="44"/></name><index pos:line="123" pos:column="44">[<expr><literal type="number" pos:line="123" pos:column="45">2<pos:position pos:line="123" pos:column="46"/></literal><operator pos:line="123" pos:column="46">*<pos:position pos:line="123" pos:column="47"/></operator><name pos:line="123" pos:column="47">i<pos:position pos:line="123" pos:column="48"/></name></expr>]<pos:position pos:line="123" pos:column="49"/></index></name></expr></init></decl>;<pos:position pos:line="123" pos:column="50"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="124" pos:column="3">int<pos:position pos:line="124" pos:column="6"/></name></type> <name pos:line="124" pos:column="7">substring_length<pos:position pos:line="124" pos:column="23"/></name> <init pos:line="124" pos:column="24">= <expr><name><name pos:line="124" pos:column="26">ovector<pos:position pos:line="124" pos:column="33"/></name><index pos:line="124" pos:column="33">[<expr><literal type="number" pos:line="124" pos:column="34">2<pos:position pos:line="124" pos:column="35"/></literal><operator pos:line="124" pos:column="35">*<pos:position pos:line="124" pos:column="36"/></operator><name pos:line="124" pos:column="36">i<pos:position pos:line="124" pos:column="37"/></name><operator pos:line="124" pos:column="37">+<pos:position pos:line="124" pos:column="38"/></operator><literal type="number" pos:line="124" pos:column="38">1<pos:position pos:line="124" pos:column="39"/></literal></expr>]<pos:position pos:line="124" pos:column="40"/></index></name> <operator pos:line="124" pos:column="41">-<pos:position pos:line="124" pos:column="42"/></operator> <name><name pos:line="124" pos:column="43">ovector<pos:position pos:line="124" pos:column="50"/></name><index pos:line="124" pos:column="50">[<expr><literal type="number" pos:line="124" pos:column="51">2<pos:position pos:line="124" pos:column="52"/></literal><operator pos:line="124" pos:column="52">*<pos:position pos:line="124" pos:column="53"/></operator><name pos:line="124" pos:column="53">i<pos:position pos:line="124" pos:column="54"/></name></expr>]<pos:position pos:line="124" pos:column="55"/></index></name></expr></init></decl>;<pos:position pos:line="124" pos:column="56"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="125" pos:column="3">printf<pos:position pos:line="125" pos:column="9"/></name><argument_list pos:line="125" pos:column="9">(<argument><expr><literal type="string" pos:line="125" pos:column="10">"%2d: %.*s\n"<pos:position pos:line="125" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="25">i<pos:position pos:line="125" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="28">substring_length<pos:position pos:line="125" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="46">substring_start<pos:position pos:line="125" pos:column="61"/></name></expr></argument>)<pos:position pos:line="125" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="63"/></expr_stmt>
  }<pos:position pos:line="126" pos:column="4"/></block></for>


<comment type="block" format="doxygen" pos:line="129" pos:column="1">/**************************************************************************
* That concludes the basic part of this demonstration program. We have    *
* compiled a pattern, and performed a single match. The code that follows *
* first shows how to access named substrings, and then how to code for    *
* repeated matches on the same subject.                                   *
**************************************************************************/</comment>

<comment type="block" pos:line="136" pos:column="1">/* See if there are any named substrings, and if so, show them by name. First
we have to extract the count of named parentheses from the pattern. */</comment>

<expr_stmt><expr><operator pos:line="139" pos:column="1">(<pos:position pos:line="139" pos:column="2"/></operator><name pos:line="139" pos:column="2">void<pos:position pos:line="139" pos:column="6"/></name><operator pos:line="139" pos:column="6">)<pos:position pos:line="139" pos:column="7"/></operator><call><name pos:line="139" pos:column="7">pcre_fullinfo<pos:position pos:line="139" pos:column="20"/></name><argument_list pos:line="139" pos:column="20">(
  <argument><expr><name pos:line="140" pos:column="3">re<pos:position pos:line="140" pos:column="5"/></name></expr></argument>,                   <comment type="block" pos:line="140" pos:column="25">/* the compiled pattern */</comment>
  <argument><expr><name pos:line="141" pos:column="3">NULL<pos:position pos:line="141" pos:column="7"/></name></expr></argument>,                 <comment type="block" pos:line="141" pos:column="25">/* no extra data - we didn't study the pattern */</comment>
  <argument><expr><name pos:line="142" pos:column="3">PCRE_INFO_NAMECOUNT<pos:position pos:line="142" pos:column="22"/></name></expr></argument>,  <comment type="block" pos:line="142" pos:column="25">/* number of named substrings */</comment>
  <argument><expr><operator pos:line="143" pos:column="3">&amp;<pos:position pos:line="143" pos:column="8"/></operator><name pos:line="143" pos:column="4">namecount<pos:position pos:line="143" pos:column="13"/></name></expr></argument>)<pos:position pos:line="143" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="15"/></expr_stmt>          <comment type="block" pos:line="143" pos:column="25">/* where to put the answer */</comment>

<if pos:line="145" pos:column="1">if <condition pos:line="145" pos:column="4">(<expr><name pos:line="145" pos:column="5">namecount<pos:position pos:line="145" pos:column="14"/></name> <operator pos:line="145" pos:column="15">&lt;=<pos:position pos:line="145" pos:column="20"/></operator> <literal type="number" pos:line="145" pos:column="18">0<pos:position pos:line="145" pos:column="19"/></literal></expr>)<pos:position pos:line="145" pos:column="20"/></condition><then pos:line="145" pos:column="20"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="145" pos:column="21">printf<pos:position pos:line="145" pos:column="27"/></name><argument_list pos:line="145" pos:column="27">(<argument><expr><literal type="string" pos:line="145" pos:column="28">"No named substrings\n"<pos:position pos:line="145" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="53"/></expr_stmt></block></then> <else pos:line="145" pos:column="54">else
  <block pos:line="146" pos:column="3">{
  <decl_stmt><decl><type><name pos:line="147" pos:column="3">unsigned<pos:position pos:line="147" pos:column="11"/></name> <name pos:line="147" pos:column="12">char<pos:position pos:line="147" pos:column="16"/></name> <modifier pos:line="147" pos:column="17">*<pos:position pos:line="147" pos:column="18"/></modifier></type><name pos:line="147" pos:column="18">tabptr<pos:position pos:line="147" pos:column="24"/></name></decl>;<pos:position pos:line="147" pos:column="25"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="148" pos:column="3">printf<pos:position pos:line="148" pos:column="9"/></name><argument_list pos:line="148" pos:column="9">(<argument><expr><literal type="string" pos:line="148" pos:column="10">"Named substrings\n"<pos:position pos:line="148" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="32"/></expr_stmt>

  <comment type="block" pos:line="150" pos:column="3">/* Before we can access the substrings, we must extract the table for
  translating names to numbers, and the size of each entry in the table. */</comment>

  <expr_stmt><expr><operator pos:line="153" pos:column="3">(<pos:position pos:line="153" pos:column="4"/></operator><name pos:line="153" pos:column="4">void<pos:position pos:line="153" pos:column="8"/></name><operator pos:line="153" pos:column="8">)<pos:position pos:line="153" pos:column="9"/></operator><call><name pos:line="153" pos:column="9">pcre_fullinfo<pos:position pos:line="153" pos:column="22"/></name><argument_list pos:line="153" pos:column="22">(
    <argument><expr><name pos:line="154" pos:column="5">re<pos:position pos:line="154" pos:column="7"/></name></expr></argument>,                       <comment type="block" pos:line="154" pos:column="31">/* the compiled pattern */</comment>
    <argument><expr><name pos:line="155" pos:column="5">NULL<pos:position pos:line="155" pos:column="9"/></name></expr></argument>,                     <comment type="block" pos:line="155" pos:column="31">/* no extra data - we didn't study the pattern */</comment>
    <argument><expr><name pos:line="156" pos:column="5">PCRE_INFO_NAMETABLE<pos:position pos:line="156" pos:column="24"/></name></expr></argument>,      <comment type="block" pos:line="156" pos:column="31">/* address of the table */</comment>
    <argument><expr><operator pos:line="157" pos:column="5">&amp;<pos:position pos:line="157" pos:column="10"/></operator><name pos:line="157" pos:column="6">name_table<pos:position pos:line="157" pos:column="16"/></name></expr></argument>)<pos:position pos:line="157" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="18"/></expr_stmt>             <comment type="block" pos:line="157" pos:column="31">/* where to put the answer */</comment>

  <expr_stmt><expr><operator pos:line="159" pos:column="3">(<pos:position pos:line="159" pos:column="4"/></operator><name pos:line="159" pos:column="4">void<pos:position pos:line="159" pos:column="8"/></name><operator pos:line="159" pos:column="8">)<pos:position pos:line="159" pos:column="9"/></operator><call><name pos:line="159" pos:column="9">pcre_fullinfo<pos:position pos:line="159" pos:column="22"/></name><argument_list pos:line="159" pos:column="22">(
    <argument><expr><name pos:line="160" pos:column="5">re<pos:position pos:line="160" pos:column="7"/></name></expr></argument>,                       <comment type="block" pos:line="160" pos:column="31">/* the compiled pattern */</comment>
    <argument><expr><name pos:line="161" pos:column="5">NULL<pos:position pos:line="161" pos:column="9"/></name></expr></argument>,                     <comment type="block" pos:line="161" pos:column="31">/* no extra data - we didn't study the pattern */</comment>
    <argument><expr><name pos:line="162" pos:column="5">PCRE_INFO_NAMEENTRYSIZE<pos:position pos:line="162" pos:column="28"/></name></expr></argument>,  <comment type="block" pos:line="162" pos:column="31">/* size of each entry in the table */</comment>
    <argument><expr><operator pos:line="163" pos:column="5">&amp;<pos:position pos:line="163" pos:column="10"/></operator><name pos:line="163" pos:column="6">name_entry_size<pos:position pos:line="163" pos:column="21"/></name></expr></argument>)<pos:position pos:line="163" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="23"/></expr_stmt>        <comment type="block" pos:line="163" pos:column="31">/* where to put the answer */</comment>

  <comment type="block" pos:line="165" pos:column="3">/* Now we can scan the table and, for each entry, print the number, the name,
  and the substring itself. */</comment>

  <expr_stmt><expr><name pos:line="168" pos:column="3">tabptr<pos:position pos:line="168" pos:column="9"/></name> <operator pos:line="168" pos:column="10">=<pos:position pos:line="168" pos:column="11"/></operator> <name pos:line="168" pos:column="12">name_table<pos:position pos:line="168" pos:column="22"/></name></expr>;<pos:position pos:line="168" pos:column="23"/></expr_stmt>
  <for pos:line="169" pos:column="3">for <control pos:line="169" pos:column="7">(<init><expr><name pos:line="169" pos:column="8">i<pos:position pos:line="169" pos:column="9"/></name> <operator pos:line="169" pos:column="10">=<pos:position pos:line="169" pos:column="11"/></operator> <literal type="number" pos:line="169" pos:column="12">0<pos:position pos:line="169" pos:column="13"/></literal></expr>;<pos:position pos:line="169" pos:column="14"/></init> <condition><expr><name pos:line="169" pos:column="15">i<pos:position pos:line="169" pos:column="16"/></name> <operator pos:line="169" pos:column="17">&lt;<pos:position pos:line="169" pos:column="21"/></operator> <name pos:line="169" pos:column="19">namecount<pos:position pos:line="169" pos:column="28"/></name></expr>;<pos:position pos:line="169" pos:column="29"/></condition> <incr><expr><name pos:line="169" pos:column="30">i<pos:position pos:line="169" pos:column="31"/></name><operator pos:line="169" pos:column="31">++<pos:position pos:line="169" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="169" pos:column="34"/></control>
    <block pos:line="170" pos:column="5">{
    <decl_stmt><decl><type><name pos:line="171" pos:column="5">int<pos:position pos:line="171" pos:column="8"/></name></type> <name pos:line="171" pos:column="9">n<pos:position pos:line="171" pos:column="10"/></name> <init pos:line="171" pos:column="11">= <expr><operator pos:line="171" pos:column="13">(<pos:position pos:line="171" pos:column="14"/></operator><name><name pos:line="171" pos:column="14">tabptr<pos:position pos:line="171" pos:column="20"/></name><index pos:line="171" pos:column="20">[<expr><literal type="number" pos:line="171" pos:column="21">0<pos:position pos:line="171" pos:column="22"/></literal></expr>]<pos:position pos:line="171" pos:column="23"/></index></name> <operator pos:line="171" pos:column="24">&lt;&lt;<pos:position pos:line="171" pos:column="32"/></operator> <literal type="number" pos:line="171" pos:column="27">8<pos:position pos:line="171" pos:column="28"/></literal><operator pos:line="171" pos:column="28">)<pos:position pos:line="171" pos:column="29"/></operator> <operator pos:line="171" pos:column="30">|<pos:position pos:line="171" pos:column="31"/></operator> <name><name pos:line="171" pos:column="32">tabptr<pos:position pos:line="171" pos:column="38"/></name><index pos:line="171" pos:column="38">[<expr><literal type="number" pos:line="171" pos:column="39">1<pos:position pos:line="171" pos:column="40"/></literal></expr>]<pos:position pos:line="171" pos:column="41"/></index></name></expr></init></decl>;<pos:position pos:line="171" pos:column="42"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="172" pos:column="5">printf<pos:position pos:line="172" pos:column="11"/></name><argument_list pos:line="172" pos:column="11">(<argument><expr><literal type="string" pos:line="172" pos:column="12">"(%d) %*s: %.*s\n"<pos:position pos:line="172" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="172" pos:column="32">n<pos:position pos:line="172" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="35">name_entry_size<pos:position pos:line="172" pos:column="50"/></name> <operator pos:line="172" pos:column="51">-<pos:position pos:line="172" pos:column="52"/></operator> <literal type="number" pos:line="172" pos:column="53">3<pos:position pos:line="172" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="172" pos:column="56">tabptr<pos:position pos:line="172" pos:column="62"/></name> <operator pos:line="172" pos:column="63">+<pos:position pos:line="172" pos:column="64"/></operator> <literal type="number" pos:line="172" pos:column="65">2<pos:position pos:line="172" pos:column="66"/></literal></expr></argument>,
      <argument><expr><name><name pos:line="173" pos:column="7">ovector<pos:position pos:line="173" pos:column="14"/></name><index pos:line="173" pos:column="14">[<expr><literal type="number" pos:line="173" pos:column="15">2<pos:position pos:line="173" pos:column="16"/></literal><operator pos:line="173" pos:column="16">*<pos:position pos:line="173" pos:column="17"/></operator><name pos:line="173" pos:column="17">n<pos:position pos:line="173" pos:column="18"/></name><operator pos:line="173" pos:column="18">+<pos:position pos:line="173" pos:column="19"/></operator><literal type="number" pos:line="173" pos:column="19">1<pos:position pos:line="173" pos:column="20"/></literal></expr>]<pos:position pos:line="173" pos:column="21"/></index></name> <operator pos:line="173" pos:column="22">-<pos:position pos:line="173" pos:column="23"/></operator> <name><name pos:line="173" pos:column="24">ovector<pos:position pos:line="173" pos:column="31"/></name><index pos:line="173" pos:column="31">[<expr><literal type="number" pos:line="173" pos:column="32">2<pos:position pos:line="173" pos:column="33"/></literal><operator pos:line="173" pos:column="33">*<pos:position pos:line="173" pos:column="34"/></operator><name pos:line="173" pos:column="34">n<pos:position pos:line="173" pos:column="35"/></name></expr>]<pos:position pos:line="173" pos:column="36"/></index></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="38">subject<pos:position pos:line="173" pos:column="45"/></name> <operator pos:line="173" pos:column="46">+<pos:position pos:line="173" pos:column="47"/></operator> <name><name pos:line="173" pos:column="48">ovector<pos:position pos:line="173" pos:column="55"/></name><index pos:line="173" pos:column="55">[<expr><literal type="number" pos:line="173" pos:column="56">2<pos:position pos:line="173" pos:column="57"/></literal><operator pos:line="173" pos:column="57">*<pos:position pos:line="173" pos:column="58"/></operator><name pos:line="173" pos:column="58">n<pos:position pos:line="173" pos:column="59"/></name></expr>]<pos:position pos:line="173" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="173" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name pos:line="174" pos:column="5">tabptr<pos:position pos:line="174" pos:column="11"/></name> <operator pos:line="174" pos:column="12">+=<pos:position pos:line="174" pos:column="14"/></operator> <name pos:line="174" pos:column="15">name_entry_size<pos:position pos:line="174" pos:column="30"/></name></expr>;<pos:position pos:line="174" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="175" pos:column="6"/></block></for>
  }<pos:position pos:line="176" pos:column="4"/></block></else></if>


<comment type="block" format="doxygen" pos:line="179" pos:column="1">/*************************************************************************
* If the "-g" option was given on the command line, we want to continue  *
* to search for additional matches in the subject string, in a similar   *
* way to the /g option in Perl. This turns out to be trickier than you   *
* might think because of the possibility of matching an empty string.    *
* What happens is as follows:                                            *
*                                                                        *
* If the previous match was NOT for an empty string, we can just start   *
* the next match at the end of the previous one.                         *
*                                                                        *
* If the previous match WAS for an empty string, we can't do that, as it *
* would lead to an infinite loop. Instead, a special call of pcre_exec() *
* is made with the PCRE_NOTEMPTY and PCRE_ANCHORED flags set. The first  *
* of these tells PCRE that an empty string is not a valid match; other   *
* possibilities must be tried. The second flag restricts PCRE to one     *
* match attempt at the initial string position. If this match succeeds,  *
* an alternative to the empty string match has been found, and we can    *
* proceed round the loop.                                                *
*************************************************************************/</comment>

<if pos:line="199" pos:column="1">if <condition pos:line="199" pos:column="4">(<expr><operator pos:line="199" pos:column="5">!<pos:position pos:line="199" pos:column="6"/></operator><name pos:line="199" pos:column="6">find_all<pos:position pos:line="199" pos:column="14"/></name></expr>)<pos:position pos:line="199" pos:column="15"/></condition><then pos:line="199" pos:column="15">
  <block pos:line="200" pos:column="3">{
  <expr_stmt><expr><call><name pos:line="201" pos:column="3">free<pos:position pos:line="201" pos:column="7"/></name><argument_list pos:line="201" pos:column="7">(<argument><expr><name pos:line="201" pos:column="8">re<pos:position pos:line="201" pos:column="10"/></name></expr></argument>)<pos:position pos:line="201" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="12"/></expr_stmt>   <comment type="block" pos:line="201" pos:column="15">/* Release the memory used for the compiled pattern */</comment>
  <return pos:line="202" pos:column="3">return <expr><literal type="number" pos:line="202" pos:column="10">0<pos:position pos:line="202" pos:column="11"/></literal></expr>;<pos:position pos:line="202" pos:column="12"/></return>   <comment type="block" pos:line="202" pos:column="15">/* Finish unless -g was given */</comment>
  }<pos:position pos:line="203" pos:column="4"/></block></then></if>

<comment type="block" pos:line="205" pos:column="1">/* Loop for second and subsequent matches */</comment>

<for pos:line="207" pos:column="1">for <control pos:line="207" pos:column="5">(<init pos:line="207" pos:column="6">;<pos:position pos:line="207" pos:column="7"/></init><condition pos:line="207" pos:column="7">;<pos:position pos:line="207" pos:column="8"/></condition><incr/>)<pos:position pos:line="207" pos:column="9"/></control>
  <block pos:line="208" pos:column="3">{
  <decl_stmt><decl><type><name pos:line="209" pos:column="3">int<pos:position pos:line="209" pos:column="6"/></name></type> <name pos:line="209" pos:column="7">options<pos:position pos:line="209" pos:column="14"/></name> <init pos:line="209" pos:column="15">= <expr><literal type="number" pos:line="209" pos:column="17">0<pos:position pos:line="209" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="209" pos:column="19"/></decl_stmt>                 <comment type="block" pos:line="209" pos:column="36">/* Normally no options */</comment>
  <decl_stmt><decl><type><name pos:line="210" pos:column="3">int<pos:position pos:line="210" pos:column="6"/></name></type> <name pos:line="210" pos:column="7">start_offset<pos:position pos:line="210" pos:column="19"/></name> <init pos:line="210" pos:column="20">= <expr><name><name pos:line="210" pos:column="22">ovector<pos:position pos:line="210" pos:column="29"/></name><index pos:line="210" pos:column="29">[<expr><literal type="number" pos:line="210" pos:column="30">1<pos:position pos:line="210" pos:column="31"/></literal></expr>]<pos:position pos:line="210" pos:column="32"/></index></name></expr></init></decl>;<pos:position pos:line="210" pos:column="33"/></decl_stmt>   <comment type="block" pos:line="210" pos:column="36">/* Start at end of previous match */</comment>

  <comment type="block" pos:line="212" pos:column="3">/* If the previous match was for an empty string, we are finished if we are
  at the end of the subject. Otherwise, arrange to run another match at the
  same point to see if a non-empty match can be found. */</comment>

  <if pos:line="216" pos:column="3">if <condition pos:line="216" pos:column="6">(<expr><name><name pos:line="216" pos:column="7">ovector<pos:position pos:line="216" pos:column="14"/></name><index pos:line="216" pos:column="14">[<expr><literal type="number" pos:line="216" pos:column="15">0<pos:position pos:line="216" pos:column="16"/></literal></expr>]<pos:position pos:line="216" pos:column="17"/></index></name> <operator pos:line="216" pos:column="18">==<pos:position pos:line="216" pos:column="20"/></operator> <name><name pos:line="216" pos:column="21">ovector<pos:position pos:line="216" pos:column="28"/></name><index pos:line="216" pos:column="28">[<expr><literal type="number" pos:line="216" pos:column="29">1<pos:position pos:line="216" pos:column="30"/></literal></expr>]<pos:position pos:line="216" pos:column="31"/></index></name></expr>)<pos:position pos:line="216" pos:column="32"/></condition><then pos:line="216" pos:column="32">
    <block pos:line="217" pos:column="5">{
    <if pos:line="218" pos:column="5">if <condition pos:line="218" pos:column="8">(<expr><name><name pos:line="218" pos:column="9">ovector<pos:position pos:line="218" pos:column="16"/></name><index pos:line="218" pos:column="16">[<expr><literal type="number" pos:line="218" pos:column="17">0<pos:position pos:line="218" pos:column="18"/></literal></expr>]<pos:position pos:line="218" pos:column="19"/></index></name> <operator pos:line="218" pos:column="20">==<pos:position pos:line="218" pos:column="22"/></operator> <name pos:line="218" pos:column="23">subject_length<pos:position pos:line="218" pos:column="37"/></name></expr>)<pos:position pos:line="218" pos:column="38"/></condition><then pos:line="218" pos:column="38"> <block type="pseudo"><break pos:line="218" pos:column="39">break;<pos:position pos:line="218" pos:column="45"/></break></block></then></if>
    <expr_stmt><expr><name pos:line="219" pos:column="5">options<pos:position pos:line="219" pos:column="12"/></name> <operator pos:line="219" pos:column="13">=<pos:position pos:line="219" pos:column="14"/></operator> <name pos:line="219" pos:column="15">PCRE_NOTEMPTY<pos:position pos:line="219" pos:column="28"/></name> <operator pos:line="219" pos:column="29">|<pos:position pos:line="219" pos:column="30"/></operator> <name pos:line="219" pos:column="31">PCRE_ANCHORED<pos:position pos:line="219" pos:column="44"/></name></expr>;<pos:position pos:line="219" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="220" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="222" pos:column="3">/* Run the next matching operation */</comment>

  <expr_stmt><expr><name pos:line="224" pos:column="3">rc<pos:position pos:line="224" pos:column="5"/></name> <operator pos:line="224" pos:column="6">=<pos:position pos:line="224" pos:column="7"/></operator> <call><name pos:line="224" pos:column="8">pcre_exec<pos:position pos:line="224" pos:column="17"/></name><argument_list pos:line="224" pos:column="17">(
    <argument><expr><name pos:line="225" pos:column="5">re<pos:position pos:line="225" pos:column="7"/></name></expr></argument>,                   <comment type="block" pos:line="225" pos:column="27">/* the compiled pattern */</comment>
    <argument><expr><name pos:line="226" pos:column="5">NULL<pos:position pos:line="226" pos:column="9"/></name></expr></argument>,                 <comment type="block" pos:line="226" pos:column="27">/* no extra data - we didn't study the pattern */</comment>
    <argument><expr><name pos:line="227" pos:column="5">subject<pos:position pos:line="227" pos:column="12"/></name></expr></argument>,              <comment type="block" pos:line="227" pos:column="27">/* the subject string */</comment>
    <argument><expr><name pos:line="228" pos:column="5">subject_length<pos:position pos:line="228" pos:column="19"/></name></expr></argument>,       <comment type="block" pos:line="228" pos:column="27">/* the length of the subject */</comment>
    <argument><expr><name pos:line="229" pos:column="5">start_offset<pos:position pos:line="229" pos:column="17"/></name></expr></argument>,         <comment type="block" pos:line="229" pos:column="27">/* starting offset in the subject */</comment>
    <argument><expr><name pos:line="230" pos:column="5">options<pos:position pos:line="230" pos:column="12"/></name></expr></argument>,              <comment type="block" pos:line="230" pos:column="27">/* options */</comment>
    <argument><expr><name pos:line="231" pos:column="5">ovector<pos:position pos:line="231" pos:column="12"/></name></expr></argument>,              <comment type="block" pos:line="231" pos:column="27">/* output vector for substring information */</comment>
    <argument><expr><name pos:line="232" pos:column="5">OVECCOUNT<pos:position pos:line="232" pos:column="14"/></name></expr></argument>)<pos:position pos:line="232" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="16"/></expr_stmt>           <comment type="block" pos:line="232" pos:column="27">/* number of elements in the output vector */</comment>

  <comment type="block" pos:line="234" pos:column="3">/* This time, a result of NOMATCH isn't an error. If the value in "options"
  is zero, it just means we have found all possible matches, so the loop ends.
  Otherwise, it means we have failed to find a non-empty-string match at a
  point where there was a previous empty-string match. In this case, we do what
  Perl does: advance the matching position by one, and continue. We do this by
  setting the "end of previous match" offset, because that is picked up at the
  top of the loop as the point at which to start again. */</comment>

  <if pos:line="242" pos:column="3">if <condition pos:line="242" pos:column="6">(<expr><name pos:line="242" pos:column="7">rc<pos:position pos:line="242" pos:column="9"/></name> <operator pos:line="242" pos:column="10">==<pos:position pos:line="242" pos:column="12"/></operator> <name pos:line="242" pos:column="13">PCRE_ERROR_NOMATCH<pos:position pos:line="242" pos:column="31"/></name></expr>)<pos:position pos:line="242" pos:column="32"/></condition><then pos:line="242" pos:column="32">
    <block pos:line="243" pos:column="5">{
    <if pos:line="244" pos:column="5">if <condition pos:line="244" pos:column="8">(<expr><name pos:line="244" pos:column="9">options<pos:position pos:line="244" pos:column="16"/></name> <operator pos:line="244" pos:column="17">==<pos:position pos:line="244" pos:column="19"/></operator> <literal type="number" pos:line="244" pos:column="20">0<pos:position pos:line="244" pos:column="21"/></literal></expr>)<pos:position pos:line="244" pos:column="22"/></condition><then pos:line="244" pos:column="22"> <block type="pseudo"><break pos:line="244" pos:column="23">break;<pos:position pos:line="244" pos:column="29"/></break></block></then></if>
    <expr_stmt><expr><name><name pos:line="245" pos:column="5">ovector<pos:position pos:line="245" pos:column="12"/></name><index pos:line="245" pos:column="12">[<expr><literal type="number" pos:line="245" pos:column="13">1<pos:position pos:line="245" pos:column="14"/></literal></expr>]<pos:position pos:line="245" pos:column="15"/></index></name> <operator pos:line="245" pos:column="16">=<pos:position pos:line="245" pos:column="17"/></operator> <name pos:line="245" pos:column="18">start_offset<pos:position pos:line="245" pos:column="30"/></name> <operator pos:line="245" pos:column="31">+<pos:position pos:line="245" pos:column="32"/></operator> <literal type="number" pos:line="245" pos:column="33">1<pos:position pos:line="245" pos:column="34"/></literal></expr>;<pos:position pos:line="245" pos:column="35"/></expr_stmt>
    <continue pos:line="246" pos:column="5">continue;<pos:position pos:line="246" pos:column="14"/></continue>    <comment type="block" pos:line="246" pos:column="18">/* Go round the loop again */</comment>
    }<pos:position pos:line="247" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="249" pos:column="3">/* Other matching errors are not recoverable. */</comment>

  <if pos:line="251" pos:column="3">if <condition pos:line="251" pos:column="6">(<expr><name pos:line="251" pos:column="7">rc<pos:position pos:line="251" pos:column="9"/></name> <operator pos:line="251" pos:column="10">&lt;<pos:position pos:line="251" pos:column="14"/></operator> <literal type="number" pos:line="251" pos:column="12">0<pos:position pos:line="251" pos:column="13"/></literal></expr>)<pos:position pos:line="251" pos:column="14"/></condition><then pos:line="251" pos:column="14">
    <block pos:line="252" pos:column="5">{
    <expr_stmt><expr><call><name pos:line="253" pos:column="5">printf<pos:position pos:line="253" pos:column="11"/></name><argument_list pos:line="253" pos:column="11">(<argument><expr><literal type="string" pos:line="253" pos:column="12">"Matching error %d\n"<pos:position pos:line="253" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="253" pos:column="35">rc<pos:position pos:line="253" pos:column="37"/></name></expr></argument>)<pos:position pos:line="253" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="253" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="254" pos:column="5">free<pos:position pos:line="254" pos:column="9"/></name><argument_list pos:line="254" pos:column="9">(<argument><expr><name pos:line="254" pos:column="10">re<pos:position pos:line="254" pos:column="12"/></name></expr></argument>)<pos:position pos:line="254" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="254" pos:column="14"/></expr_stmt>    <comment type="block" pos:line="254" pos:column="18">/* Release memory used for the compiled pattern */</comment>
    <return pos:line="255" pos:column="5">return <expr><literal type="number" pos:line="255" pos:column="12">1<pos:position pos:line="255" pos:column="13"/></literal></expr>;<pos:position pos:line="255" pos:column="14"/></return>
    }<pos:position pos:line="256" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="258" pos:column="3">/* Match succeded */</comment>

  <expr_stmt><expr><call><name pos:line="260" pos:column="3">printf<pos:position pos:line="260" pos:column="9"/></name><argument_list pos:line="260" pos:column="9">(<argument><expr><literal type="string" pos:line="260" pos:column="10">"\nMatch succeeded again at offset %d\n"<pos:position pos:line="260" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="260" pos:column="52">ovector<pos:position pos:line="260" pos:column="59"/></name><index pos:line="260" pos:column="59">[<expr><literal type="number" pos:line="260" pos:column="60">0<pos:position pos:line="260" pos:column="61"/></literal></expr>]<pos:position pos:line="260" pos:column="62"/></index></name></expr></argument>)<pos:position pos:line="260" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="260" pos:column="64"/></expr_stmt>

  <comment type="block" pos:line="262" pos:column="3">/* The match succeeded, but the output vector wasn't big enough. */</comment>

  <if pos:line="264" pos:column="3">if <condition pos:line="264" pos:column="6">(<expr><name pos:line="264" pos:column="7">rc<pos:position pos:line="264" pos:column="9"/></name> <operator pos:line="264" pos:column="10">==<pos:position pos:line="264" pos:column="12"/></operator> <literal type="number" pos:line="264" pos:column="13">0<pos:position pos:line="264" pos:column="14"/></literal></expr>)<pos:position pos:line="264" pos:column="15"/></condition><then pos:line="264" pos:column="15">
    <block pos:line="265" pos:column="5">{
    <expr_stmt><expr><name pos:line="266" pos:column="5">rc<pos:position pos:line="266" pos:column="7"/></name> <operator pos:line="266" pos:column="8">=<pos:position pos:line="266" pos:column="9"/></operator> <name pos:line="266" pos:column="10">OVECCOUNT<pos:position pos:line="266" pos:column="19"/></name><operator pos:line="266" pos:column="19">/<pos:position pos:line="266" pos:column="20"/></operator><literal type="number" pos:line="266" pos:column="20">3<pos:position pos:line="266" pos:column="21"/></literal></expr>;<pos:position pos:line="266" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="267" pos:column="5">printf<pos:position pos:line="267" pos:column="11"/></name><argument_list pos:line="267" pos:column="11">(<argument><expr><literal type="string" pos:line="267" pos:column="12">"ovector only has room for %d captured substrings\n"<pos:position pos:line="267" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="267" pos:column="66">rc<pos:position pos:line="267" pos:column="68"/></name> <operator pos:line="267" pos:column="69">-<pos:position pos:line="267" pos:column="70"/></operator> <literal type="number" pos:line="267" pos:column="71">1<pos:position pos:line="267" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="267" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="267" pos:column="74"/></expr_stmt>
    }<pos:position pos:line="268" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="270" pos:column="3">/* As before, show substrings stored in the output vector by number, and then
  also any named substrings. */</comment>

  <for pos:line="273" pos:column="3">for <control pos:line="273" pos:column="7">(<init><expr><name pos:line="273" pos:column="8">i<pos:position pos:line="273" pos:column="9"/></name> <operator pos:line="273" pos:column="10">=<pos:position pos:line="273" pos:column="11"/></operator> <literal type="number" pos:line="273" pos:column="12">0<pos:position pos:line="273" pos:column="13"/></literal></expr>;<pos:position pos:line="273" pos:column="14"/></init> <condition><expr><name pos:line="273" pos:column="15">i<pos:position pos:line="273" pos:column="16"/></name> <operator pos:line="273" pos:column="17">&lt;<pos:position pos:line="273" pos:column="21"/></operator> <name pos:line="273" pos:column="19">rc<pos:position pos:line="273" pos:column="21"/></name></expr>;<pos:position pos:line="273" pos:column="22"/></condition> <incr><expr><name pos:line="273" pos:column="23">i<pos:position pos:line="273" pos:column="24"/></name><operator pos:line="273" pos:column="24">++<pos:position pos:line="273" pos:column="26"/></operator></expr></incr>)<pos:position pos:line="273" pos:column="27"/></control>
    <block pos:line="274" pos:column="5">{
    <decl_stmt><decl><type><name pos:line="275" pos:column="5">char<pos:position pos:line="275" pos:column="9"/></name> <modifier pos:line="275" pos:column="10">*<pos:position pos:line="275" pos:column="11"/></modifier></type><name pos:line="275" pos:column="11">substring_start<pos:position pos:line="275" pos:column="26"/></name> <init pos:line="275" pos:column="27">= <expr><name pos:line="275" pos:column="29">subject<pos:position pos:line="275" pos:column="36"/></name> <operator pos:line="275" pos:column="37">+<pos:position pos:line="275" pos:column="38"/></operator> <name><name pos:line="275" pos:column="39">ovector<pos:position pos:line="275" pos:column="46"/></name><index pos:line="275" pos:column="46">[<expr><literal type="number" pos:line="275" pos:column="47">2<pos:position pos:line="275" pos:column="48"/></literal><operator pos:line="275" pos:column="48">*<pos:position pos:line="275" pos:column="49"/></operator><name pos:line="275" pos:column="49">i<pos:position pos:line="275" pos:column="50"/></name></expr>]<pos:position pos:line="275" pos:column="51"/></index></name></expr></init></decl>;<pos:position pos:line="275" pos:column="52"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="276" pos:column="5">int<pos:position pos:line="276" pos:column="8"/></name></type> <name pos:line="276" pos:column="9">substring_length<pos:position pos:line="276" pos:column="25"/></name> <init pos:line="276" pos:column="26">= <expr><name><name pos:line="276" pos:column="28">ovector<pos:position pos:line="276" pos:column="35"/></name><index pos:line="276" pos:column="35">[<expr><literal type="number" pos:line="276" pos:column="36">2<pos:position pos:line="276" pos:column="37"/></literal><operator pos:line="276" pos:column="37">*<pos:position pos:line="276" pos:column="38"/></operator><name pos:line="276" pos:column="38">i<pos:position pos:line="276" pos:column="39"/></name><operator pos:line="276" pos:column="39">+<pos:position pos:line="276" pos:column="40"/></operator><literal type="number" pos:line="276" pos:column="40">1<pos:position pos:line="276" pos:column="41"/></literal></expr>]<pos:position pos:line="276" pos:column="42"/></index></name> <operator pos:line="276" pos:column="43">-<pos:position pos:line="276" pos:column="44"/></operator> <name><name pos:line="276" pos:column="45">ovector<pos:position pos:line="276" pos:column="52"/></name><index pos:line="276" pos:column="52">[<expr><literal type="number" pos:line="276" pos:column="53">2<pos:position pos:line="276" pos:column="54"/></literal><operator pos:line="276" pos:column="54">*<pos:position pos:line="276" pos:column="55"/></operator><name pos:line="276" pos:column="55">i<pos:position pos:line="276" pos:column="56"/></name></expr>]<pos:position pos:line="276" pos:column="57"/></index></name></expr></init></decl>;<pos:position pos:line="276" pos:column="58"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="277" pos:column="5">printf<pos:position pos:line="277" pos:column="11"/></name><argument_list pos:line="277" pos:column="11">(<argument><expr><literal type="string" pos:line="277" pos:column="12">"%2d: %.*s\n"<pos:position pos:line="277" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="277" pos:column="27">i<pos:position pos:line="277" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="277" pos:column="30">substring_length<pos:position pos:line="277" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="277" pos:column="48">substring_start<pos:position pos:line="277" pos:column="63"/></name></expr></argument>)<pos:position pos:line="277" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="277" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="278" pos:column="6"/></block></for>

  <if pos:line="280" pos:column="3">if <condition pos:line="280" pos:column="6">(<expr><name pos:line="280" pos:column="7">namecount<pos:position pos:line="280" pos:column="16"/></name> <operator pos:line="280" pos:column="17">&lt;=<pos:position pos:line="280" pos:column="22"/></operator> <literal type="number" pos:line="280" pos:column="20">0<pos:position pos:line="280" pos:column="21"/></literal></expr>)<pos:position pos:line="280" pos:column="22"/></condition><then pos:line="280" pos:column="22"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="280" pos:column="23">printf<pos:position pos:line="280" pos:column="29"/></name><argument_list pos:line="280" pos:column="29">(<argument><expr><literal type="string" pos:line="280" pos:column="30">"No named substrings\n"<pos:position pos:line="280" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="280" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="280" pos:column="55"/></expr_stmt></block></then> <else pos:line="280" pos:column="56">else
    <block pos:line="281" pos:column="5">{
    <decl_stmt><decl><type><name pos:line="282" pos:column="5">unsigned<pos:position pos:line="282" pos:column="13"/></name> <name pos:line="282" pos:column="14">char<pos:position pos:line="282" pos:column="18"/></name> <modifier pos:line="282" pos:column="19">*<pos:position pos:line="282" pos:column="20"/></modifier></type><name pos:line="282" pos:column="20">tabptr<pos:position pos:line="282" pos:column="26"/></name> <init pos:line="282" pos:column="27">= <expr><name pos:line="282" pos:column="29">name_table<pos:position pos:line="282" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="282" pos:column="40"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="283" pos:column="5">printf<pos:position pos:line="283" pos:column="11"/></name><argument_list pos:line="283" pos:column="11">(<argument><expr><literal type="string" pos:line="283" pos:column="12">"Named substrings\n"<pos:position pos:line="283" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="283" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="283" pos:column="34"/></expr_stmt>
    <for pos:line="284" pos:column="5">for <control pos:line="284" pos:column="9">(<init><expr><name pos:line="284" pos:column="10">i<pos:position pos:line="284" pos:column="11"/></name> <operator pos:line="284" pos:column="12">=<pos:position pos:line="284" pos:column="13"/></operator> <literal type="number" pos:line="284" pos:column="14">0<pos:position pos:line="284" pos:column="15"/></literal></expr>;<pos:position pos:line="284" pos:column="16"/></init> <condition><expr><name pos:line="284" pos:column="17">i<pos:position pos:line="284" pos:column="18"/></name> <operator pos:line="284" pos:column="19">&lt;<pos:position pos:line="284" pos:column="23"/></operator> <name pos:line="284" pos:column="21">namecount<pos:position pos:line="284" pos:column="30"/></name></expr>;<pos:position pos:line="284" pos:column="31"/></condition> <incr><expr><name pos:line="284" pos:column="32">i<pos:position pos:line="284" pos:column="33"/></name><operator pos:line="284" pos:column="33">++<pos:position pos:line="284" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="284" pos:column="36"/></control>
      <block pos:line="285" pos:column="7">{
      <decl_stmt><decl><type><name pos:line="286" pos:column="7">int<pos:position pos:line="286" pos:column="10"/></name></type> <name pos:line="286" pos:column="11">n<pos:position pos:line="286" pos:column="12"/></name> <init pos:line="286" pos:column="13">= <expr><operator pos:line="286" pos:column="15">(<pos:position pos:line="286" pos:column="16"/></operator><name><name pos:line="286" pos:column="16">tabptr<pos:position pos:line="286" pos:column="22"/></name><index pos:line="286" pos:column="22">[<expr><literal type="number" pos:line="286" pos:column="23">0<pos:position pos:line="286" pos:column="24"/></literal></expr>]<pos:position pos:line="286" pos:column="25"/></index></name> <operator pos:line="286" pos:column="26">&lt;&lt;<pos:position pos:line="286" pos:column="34"/></operator> <literal type="number" pos:line="286" pos:column="29">8<pos:position pos:line="286" pos:column="30"/></literal><operator pos:line="286" pos:column="30">)<pos:position pos:line="286" pos:column="31"/></operator> <operator pos:line="286" pos:column="32">|<pos:position pos:line="286" pos:column="33"/></operator> <name><name pos:line="286" pos:column="34">tabptr<pos:position pos:line="286" pos:column="40"/></name><index pos:line="286" pos:column="40">[<expr><literal type="number" pos:line="286" pos:column="41">1<pos:position pos:line="286" pos:column="42"/></literal></expr>]<pos:position pos:line="286" pos:column="43"/></index></name></expr></init></decl>;<pos:position pos:line="286" pos:column="44"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="287" pos:column="7">printf<pos:position pos:line="287" pos:column="13"/></name><argument_list pos:line="287" pos:column="13">(<argument><expr><literal type="string" pos:line="287" pos:column="14">"(%d) %*s: %.*s\n"<pos:position pos:line="287" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="287" pos:column="34">n<pos:position pos:line="287" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="287" pos:column="37">name_entry_size<pos:position pos:line="287" pos:column="52"/></name> <operator pos:line="287" pos:column="53">-<pos:position pos:line="287" pos:column="54"/></operator> <literal type="number" pos:line="287" pos:column="55">3<pos:position pos:line="287" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="287" pos:column="58">tabptr<pos:position pos:line="287" pos:column="64"/></name> <operator pos:line="287" pos:column="65">+<pos:position pos:line="287" pos:column="66"/></operator> <literal type="number" pos:line="287" pos:column="67">2<pos:position pos:line="287" pos:column="68"/></literal></expr></argument>,
        <argument><expr><name><name pos:line="288" pos:column="9">ovector<pos:position pos:line="288" pos:column="16"/></name><index pos:line="288" pos:column="16">[<expr><literal type="number" pos:line="288" pos:column="17">2<pos:position pos:line="288" pos:column="18"/></literal><operator pos:line="288" pos:column="18">*<pos:position pos:line="288" pos:column="19"/></operator><name pos:line="288" pos:column="19">n<pos:position pos:line="288" pos:column="20"/></name><operator pos:line="288" pos:column="20">+<pos:position pos:line="288" pos:column="21"/></operator><literal type="number" pos:line="288" pos:column="21">1<pos:position pos:line="288" pos:column="22"/></literal></expr>]<pos:position pos:line="288" pos:column="23"/></index></name> <operator pos:line="288" pos:column="24">-<pos:position pos:line="288" pos:column="25"/></operator> <name><name pos:line="288" pos:column="26">ovector<pos:position pos:line="288" pos:column="33"/></name><index pos:line="288" pos:column="33">[<expr><literal type="number" pos:line="288" pos:column="34">2<pos:position pos:line="288" pos:column="35"/></literal><operator pos:line="288" pos:column="35">*<pos:position pos:line="288" pos:column="36"/></operator><name pos:line="288" pos:column="36">n<pos:position pos:line="288" pos:column="37"/></name></expr>]<pos:position pos:line="288" pos:column="38"/></index></name></expr></argument>, <argument><expr><name pos:line="288" pos:column="40">subject<pos:position pos:line="288" pos:column="47"/></name> <operator pos:line="288" pos:column="48">+<pos:position pos:line="288" pos:column="49"/></operator> <name><name pos:line="288" pos:column="50">ovector<pos:position pos:line="288" pos:column="57"/></name><index pos:line="288" pos:column="57">[<expr><literal type="number" pos:line="288" pos:column="58">2<pos:position pos:line="288" pos:column="59"/></literal><operator pos:line="288" pos:column="59">*<pos:position pos:line="288" pos:column="60"/></operator><name pos:line="288" pos:column="60">n<pos:position pos:line="288" pos:column="61"/></name></expr>]<pos:position pos:line="288" pos:column="62"/></index></name></expr></argument>)<pos:position pos:line="288" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="288" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><name pos:line="289" pos:column="7">tabptr<pos:position pos:line="289" pos:column="13"/></name> <operator pos:line="289" pos:column="14">+=<pos:position pos:line="289" pos:column="16"/></operator> <name pos:line="289" pos:column="17">name_entry_size<pos:position pos:line="289" pos:column="32"/></name></expr>;<pos:position pos:line="289" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="290" pos:column="8"/></block></for>
    }<pos:position pos:line="291" pos:column="6"/></block></else></if>
  }<pos:position pos:line="292" pos:column="4"/></block></for>      <comment type="block" pos:line="292" pos:column="10">/* End of loop to find second and subsequent matches */</comment>

<expr_stmt><expr><call><name pos:line="294" pos:column="1">printf<pos:position pos:line="294" pos:column="7"/></name><argument_list pos:line="294" pos:column="7">(<argument><expr><literal type="string" pos:line="294" pos:column="8">"\n"<pos:position pos:line="294" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="294" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="294" pos:column="14"/></expr_stmt>
<expr_stmt><expr><call><name pos:line="295" pos:column="1">free<pos:position pos:line="295" pos:column="5"/></name><argument_list pos:line="295" pos:column="5">(<argument><expr><name pos:line="295" pos:column="6">re<pos:position pos:line="295" pos:column="8"/></name></expr></argument>)<pos:position pos:line="295" pos:column="9"/></argument_list></call></expr>;<pos:position pos:line="295" pos:column="10"/></expr_stmt>       <comment type="block" pos:line="295" pos:column="17">/* Release memory used for the compiled pattern */</comment>
<return pos:line="296" pos:column="1">return <expr><literal type="number" pos:line="296" pos:column="8">0<pos:position pos:line="296" pos:column="9"/></literal></expr>;<pos:position pos:line="296" pos:column="10"/></return>
}<pos:position pos:line="297" pos:column="2"/></block></function></unit>
