<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1667.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">add_cluster<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">cmd_parms<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">cmd<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">void<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">d<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="2" pos:column="32">int<pos:position pos:line="2" pos:column="35"/></name></type> <name pos:line="2" pos:column="36">argc<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="42">char<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier><specifier pos:line="2" pos:column="48">const<pos:position pos:line="2" pos:column="53"/></specifier></type> <name><name pos:line="2" pos:column="54">argv<pos:position pos:line="2" pos:column="58"/></name><index pos:line="2" pos:column="58">[]<pos:position pos:line="2" pos:column="60"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">rv<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">ap_serf_cluster_provider_t<pos:position pos:line="5" pos:column="31"/></name> <modifier pos:line="5" pos:column="32">*<pos:position pos:line="5" pos:column="33"/></modifier></type><name pos:line="5" pos:column="33">backend<pos:position pos:line="5" pos:column="40"/></name></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">i<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">serf_cluster_t<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">cluster<pos:position pos:line="7" pos:column="28"/></name> <init pos:line="7" pos:column="29">= <expr><name pos:line="7" pos:column="31">NULL<pos:position pos:line="7" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">serf_server_config_t<pos:position pos:line="8" pos:column="25"/></name> <modifier pos:line="8" pos:column="26">*<pos:position pos:line="8" pos:column="27"/></modifier></type><name pos:line="8" pos:column="27">ctx<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= 
        <expr><operator pos:line="9" pos:column="9">(<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">serf_server_config_t<pos:position pos:line="9" pos:column="30"/></name> <operator pos:line="9" pos:column="31">*<pos:position pos:line="9" pos:column="32"/></operator><operator pos:line="9" pos:column="32">)<pos:position pos:line="9" pos:column="33"/></operator><call><name pos:line="9" pos:column="33">ap_get_module_config<pos:position pos:line="9" pos:column="53"/></name><argument_list pos:line="9" pos:column="53">(<argument><expr><name><name pos:line="9" pos:column="54">cmd<pos:position pos:line="9" pos:column="57"/></name><operator pos:line="9" pos:column="57">-&gt;<pos:position pos:line="9" pos:column="62"/></operator><name pos:line="9" pos:column="59">server<pos:position pos:line="9" pos:column="65"/></name><operator pos:line="9" pos:column="65">-&gt;<pos:position pos:line="9" pos:column="70"/></operator><name pos:line="9" pos:column="67">module_config<pos:position pos:line="9" pos:column="80"/></name></name></expr></argument>,
                                                     <argument><expr><operator pos:line="10" pos:column="54">&amp;<pos:position pos:line="10" pos:column="59"/></operator><name pos:line="10" pos:column="55">serf_module<pos:position pos:line="10" pos:column="66"/></name></expr></argument>)<pos:position pos:line="10" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="68"/></decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">char<pos:position pos:line="12" pos:column="15"/></name> <modifier pos:line="12" pos:column="16">*<pos:position pos:line="12" pos:column="17"/></modifier></type><name pos:line="12" pos:column="17">err<pos:position pos:line="12" pos:column="20"/></name> <init pos:line="12" pos:column="21">= <expr><call><name pos:line="12" pos:column="23">ap_check_cmd_context<pos:position pos:line="12" pos:column="43"/></name><argument_list pos:line="12" pos:column="43">(<argument><expr><name pos:line="12" pos:column="44">cmd<pos:position pos:line="12" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="49">GLOBAL_ONLY<pos:position pos:line="12" pos:column="60"/></name></expr></argument>)<pos:position pos:line="12" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="62"/></decl_stmt>
  
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">err<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">!=<pos:position pos:line="14" pos:column="15"/></operator> <name pos:line="14" pos:column="16">NULL<pos:position pos:line="14" pos:column="20"/></name></expr>)<pos:position pos:line="14" pos:column="21"/></condition><then pos:line="14" pos:column="21"> <block pos:line="14" pos:column="22">{
        <return pos:line="15" pos:column="9">return <expr><name pos:line="15" pos:column="16">err<pos:position pos:line="15" pos:column="19"/></name></expr>;<pos:position pos:line="15" pos:column="20"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">argc<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">&lt;<pos:position pos:line="18" pos:column="18"/></operator> <literal type="number" pos:line="18" pos:column="16">2<pos:position pos:line="18" pos:column="17"/></literal></expr>)<pos:position pos:line="18" pos:column="18"/></condition><then pos:line="18" pos:column="18"> <block pos:line="18" pos:column="19">{
        <return pos:line="19" pos:column="9">return <expr><literal type="string" pos:line="19" pos:column="16">"SerfCluster must have at least a name and provider."<pos:position pos:line="19" pos:column="69"/></literal></expr>;<pos:position pos:line="19" pos:column="70"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
    
    <expr_stmt><expr><name pos:line="22" pos:column="5">cluster<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <call><name pos:line="22" pos:column="15">apr_palloc<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name><name pos:line="22" pos:column="26">cmd<pos:position pos:line="22" pos:column="29"/></name><operator pos:line="22" pos:column="29">-&gt;<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="31">pool<pos:position pos:line="22" pos:column="35"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="37">sizeof<argument_list pos:line="22" pos:column="43">(<argument><expr><name pos:line="22" pos:column="44">serf_cluster_t<pos:position pos:line="22" pos:column="58"/></name></expr></argument>)<pos:position pos:line="22" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">cluster<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">-&gt;<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="14">name<pos:position pos:line="23" pos:column="18"/></name></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <call><name pos:line="23" pos:column="21">apr_pstrdup<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name><name pos:line="23" pos:column="33">cmd<pos:position pos:line="23" pos:column="36"/></name><operator pos:line="23" pos:column="36">-&gt;<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="38">pool<pos:position pos:line="23" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="44">argv<pos:position pos:line="23" pos:column="48"/></name><index pos:line="23" pos:column="48">[<expr><literal type="number" pos:line="23" pos:column="49">0<pos:position pos:line="23" pos:column="50"/></literal></expr>]<pos:position pos:line="23" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">cluster<pos:position pos:line="24" pos:column="12"/></name><operator pos:line="24" pos:column="12">-&gt;<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="14">provider<pos:position pos:line="24" pos:column="22"/></name></name> <operator pos:line="24" pos:column="23">=<pos:position pos:line="24" pos:column="24"/></operator> <call><name pos:line="24" pos:column="25">apr_pstrdup<pos:position pos:line="24" pos:column="36"/></name><argument_list pos:line="24" pos:column="36">(<argument><expr><name><name pos:line="24" pos:column="37">cmd<pos:position pos:line="24" pos:column="40"/></name><operator pos:line="24" pos:column="40">-&gt;<pos:position pos:line="24" pos:column="45"/></operator><name pos:line="24" pos:column="42">pool<pos:position pos:line="24" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="48">argv<pos:position pos:line="24" pos:column="52"/></name><index pos:line="24" pos:column="52">[<expr><literal type="number" pos:line="24" pos:column="53">1<pos:position pos:line="24" pos:column="54"/></literal></expr>]<pos:position pos:line="24" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="24" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">cluster<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">-&gt;<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="14">params<pos:position pos:line="25" pos:column="20"/></name></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <call><name pos:line="25" pos:column="23">apr_table_make<pos:position pos:line="25" pos:column="37"/></name><argument_list pos:line="25" pos:column="37">(<argument><expr><name><name pos:line="25" pos:column="38">cmd<pos:position pos:line="25" pos:column="41"/></name><operator pos:line="25" pos:column="41">-&gt;<pos:position pos:line="25" pos:column="46"/></operator><name pos:line="25" pos:column="43">pool<pos:position pos:line="25" pos:column="47"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="49">6<pos:position pos:line="25" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="52"/></expr_stmt>

    <expr_stmt><expr><name pos:line="27" pos:column="5">backend<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <call><name pos:line="27" pos:column="15">ap_lookup_provider<pos:position pos:line="27" pos:column="33"/></name><argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">AP_SERF_CLUSTER_PROVIDER<pos:position pos:line="27" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="60">cluster<pos:position pos:line="27" pos:column="67"/></name><operator pos:line="27" pos:column="67">-&gt;<pos:position pos:line="27" pos:column="72"/></operator><name pos:line="27" pos:column="69">provider<pos:position pos:line="27" pos:column="77"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="79">"0"<pos:position pos:line="27" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="84"/></expr_stmt>
    
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">backend<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">==<pos:position pos:line="29" pos:column="19"/></operator> <name pos:line="29" pos:column="20">NULL<pos:position pos:line="29" pos:column="24"/></name></expr>)<pos:position pos:line="29" pos:column="25"/></condition><then pos:line="29" pos:column="25"> <block pos:line="29" pos:column="26">{
        <return pos:line="30" pos:column="9">return <expr><call><name pos:line="30" pos:column="16">apr_psprintf<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><name><name pos:line="30" pos:column="29">cmd<pos:position pos:line="30" pos:column="32"/></name><operator pos:line="30" pos:column="32">-&gt;<pos:position pos:line="30" pos:column="37"/></operator><name pos:line="30" pos:column="34">pool<pos:position pos:line="30" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="40">"SerfCluster: unable to find "<pos:position pos:line="30" pos:column="70"/></literal>
                            <literal type="string" pos:line="31" pos:column="29">"provider '%s'"<pos:position pos:line="31" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="46">cluster<pos:position pos:line="31" pos:column="53"/></name><operator pos:line="31" pos:column="53">-&gt;<pos:position pos:line="31" pos:column="58"/></operator><name pos:line="31" pos:column="55">provider<pos:position pos:line="31" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="65"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <for pos:line="34" pos:column="5">for <control pos:line="34" pos:column="9">(<init><expr><name pos:line="34" pos:column="10">i<pos:position pos:line="34" pos:column="11"/></name> <operator pos:line="34" pos:column="12">=<pos:position pos:line="34" pos:column="13"/></operator> <literal type="number" pos:line="34" pos:column="14">2<pos:position pos:line="34" pos:column="15"/></literal></expr>;<pos:position pos:line="34" pos:column="16"/></init> <condition><expr><name pos:line="34" pos:column="17">i<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">&lt;<pos:position pos:line="34" pos:column="23"/></operator> <name pos:line="34" pos:column="21">argc<pos:position pos:line="34" pos:column="25"/></name></expr>;<pos:position pos:line="34" pos:column="26"/></condition> <incr><expr><name pos:line="34" pos:column="27">i<pos:position pos:line="34" pos:column="28"/></name><operator pos:line="34" pos:column="28">++<pos:position pos:line="34" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="34" pos:column="31"/></control> <block pos:line="34" pos:column="32">{
        <decl_stmt><decl><type><specifier pos:line="35" pos:column="9">const<pos:position pos:line="35" pos:column="14"/></specifier> <name pos:line="35" pos:column="15">char<pos:position pos:line="35" pos:column="19"/></name> <modifier pos:line="35" pos:column="20">*<pos:position pos:line="35" pos:column="21"/></modifier></type><name pos:line="35" pos:column="21">p<pos:position pos:line="35" pos:column="22"/></name> <init pos:line="35" pos:column="23">= <expr><name><name pos:line="35" pos:column="25">argv<pos:position pos:line="35" pos:column="29"/></name><index pos:line="35" pos:column="29">[<expr><name pos:line="35" pos:column="30">i<pos:position pos:line="35" pos:column="31"/></name></expr>]<pos:position pos:line="35" pos:column="32"/></index></name></expr></init></decl>;<pos:position pos:line="35" pos:column="33"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">const<pos:position pos:line="36" pos:column="14"/></specifier> <name pos:line="36" pos:column="15">char<pos:position pos:line="36" pos:column="19"/></name> <modifier pos:line="36" pos:column="20">*<pos:position pos:line="36" pos:column="21"/></modifier></type><name pos:line="36" pos:column="21">x<pos:position pos:line="36" pos:column="22"/></name> <init pos:line="36" pos:column="23">= <expr><call><name pos:line="36" pos:column="25">ap_strchr_c<pos:position pos:line="36" pos:column="36"/></name><argument_list pos:line="36" pos:column="36">(<argument><expr><name pos:line="36" pos:column="37">p<pos:position pos:line="36" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="36" pos:column="40">'='<pos:position pos:line="36" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="45"/></decl_stmt>

        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">x<pos:position pos:line="38" pos:column="14"/></name> <operator pos:line="38" pos:column="15">&amp;&amp;<pos:position pos:line="38" pos:column="25"/></operator> <call><name pos:line="38" pos:column="18">strlen<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><name pos:line="38" pos:column="25">p<pos:position pos:line="38" pos:column="26"/></name></expr></argument>)<pos:position pos:line="38" pos:column="27"/></argument_list></call> <operator pos:line="38" pos:column="28">&gt;<pos:position pos:line="38" pos:column="32"/></operator> <literal type="number" pos:line="38" pos:column="30">1<pos:position pos:line="38" pos:column="31"/></literal></expr>)<pos:position pos:line="38" pos:column="32"/></condition><then pos:line="38" pos:column="32"> <block pos:line="38" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">apr_table_addn<pos:position pos:line="39" pos:column="27"/></name><argument_list pos:line="39" pos:column="27">(<argument><expr><name><name pos:line="39" pos:column="28">cluster<pos:position pos:line="39" pos:column="35"/></name><operator pos:line="39" pos:column="35">-&gt;<pos:position pos:line="39" pos:column="40"/></operator><name pos:line="39" pos:column="37">params<pos:position pos:line="39" pos:column="43"/></name></name></expr></argument>,
                           <argument><expr><call><name pos:line="40" pos:column="28">apr_pstrndup<pos:position pos:line="40" pos:column="40"/></name><argument_list pos:line="40" pos:column="40">(<argument><expr><name><name pos:line="40" pos:column="41">cmd<pos:position pos:line="40" pos:column="44"/></name><operator pos:line="40" pos:column="44">-&gt;<pos:position pos:line="40" pos:column="49"/></operator><name pos:line="40" pos:column="46">pool<pos:position pos:line="40" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="52">p<pos:position pos:line="40" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="55">x<pos:position pos:line="40" pos:column="56"/></name><operator pos:line="40" pos:column="56">-<pos:position pos:line="40" pos:column="57"/></operator><name pos:line="40" pos:column="57">p<pos:position pos:line="40" pos:column="58"/></name></expr></argument>)<pos:position pos:line="40" pos:column="59"/></argument_list></call></expr></argument>,
                           <argument><expr><name pos:line="41" pos:column="28">x<pos:position pos:line="41" pos:column="29"/></name><operator pos:line="41" pos:column="29">+<pos:position pos:line="41" pos:column="30"/></operator><literal type="number" pos:line="41" pos:column="30">1<pos:position pos:line="41" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="33"/></expr_stmt>
        }<pos:position pos:line="42" pos:column="10"/></block></then>
        <else pos:line="43" pos:column="9">else <block pos:line="43" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="44" pos:column="13">apr_table_addn<pos:position pos:line="44" pos:column="27"/></name><argument_list pos:line="44" pos:column="27">(<argument><expr><name><name pos:line="44" pos:column="28">cluster<pos:position pos:line="44" pos:column="35"/></name><operator pos:line="44" pos:column="35">-&gt;<pos:position pos:line="44" pos:column="40"/></operator><name pos:line="44" pos:column="37">params<pos:position pos:line="44" pos:column="43"/></name></name></expr></argument>, 
                           <argument><expr><call><name pos:line="45" pos:column="28">apr_pstrdup<pos:position pos:line="45" pos:column="39"/></name><argument_list pos:line="45" pos:column="39">(<argument><expr><name><name pos:line="45" pos:column="40">cmd<pos:position pos:line="45" pos:column="43"/></name><operator pos:line="45" pos:column="43">-&gt;<pos:position pos:line="45" pos:column="48"/></operator><name pos:line="45" pos:column="45">pool<pos:position pos:line="45" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="51">p<pos:position pos:line="45" pos:column="52"/></name></expr></argument>)<pos:position pos:line="45" pos:column="53"/></argument_list></call></expr></argument>,
                           <argument><expr><literal type="string" pos:line="46" pos:column="28">""<pos:position pos:line="46" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="47" pos:column="10"/></block></else></if>
    }<pos:position pos:line="48" pos:column="6"/></block></for>

    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name><name pos:line="50" pos:column="9">backend<pos:position pos:line="50" pos:column="16"/></name><operator pos:line="50" pos:column="16">-&gt;<pos:position pos:line="50" pos:column="21"/></operator><name pos:line="50" pos:column="18">check_config<pos:position pos:line="50" pos:column="30"/></name></name> <operator pos:line="50" pos:column="31">==<pos:position pos:line="50" pos:column="33"/></operator> <name pos:line="50" pos:column="34">NULL<pos:position pos:line="50" pos:column="38"/></name></expr>)<pos:position pos:line="50" pos:column="39"/></condition><then pos:line="50" pos:column="39"> <block pos:line="50" pos:column="40">{
        <return pos:line="51" pos:column="9">return <expr><call><name pos:line="51" pos:column="16">apr_psprintf<pos:position pos:line="51" pos:column="28"/></name><argument_list pos:line="51" pos:column="28">(<argument><expr><name><name pos:line="51" pos:column="29">cmd<pos:position pos:line="51" pos:column="32"/></name><operator pos:line="51" pos:column="32">-&gt;<pos:position pos:line="51" pos:column="37"/></operator><name pos:line="51" pos:column="34">pool<pos:position pos:line="51" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="40">"SerfCluster: Provider '%s' failed to "<pos:position pos:line="51" pos:column="79"/></literal>
                             <literal type="string" pos:line="52" pos:column="30">"provider a configuration checker"<pos:position pos:line="52" pos:column="64"/></literal></expr></argument>,
                            <argument><expr><name><name pos:line="53" pos:column="29">cluster<pos:position pos:line="53" pos:column="36"/></name><operator pos:line="53" pos:column="36">-&gt;<pos:position pos:line="53" pos:column="41"/></operator><name pos:line="53" pos:column="38">provider<pos:position pos:line="53" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="48"/></return>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="56" pos:column="5">rv<pos:position pos:line="56" pos:column="7"/></name> <operator pos:line="56" pos:column="8">=<pos:position pos:line="56" pos:column="9"/></operator> <call><name><name pos:line="56" pos:column="10">backend<pos:position pos:line="56" pos:column="17"/></name><operator pos:line="56" pos:column="17">-&gt;<pos:position pos:line="56" pos:column="22"/></operator><name pos:line="56" pos:column="19">check_config<pos:position pos:line="56" pos:column="31"/></name></name><argument_list pos:line="56" pos:column="31">(<argument><expr><name><name pos:line="56" pos:column="32">backend<pos:position pos:line="56" pos:column="39"/></name><operator pos:line="56" pos:column="39">-&gt;<pos:position pos:line="56" pos:column="44"/></operator><name pos:line="56" pos:column="41">baton<pos:position pos:line="56" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="48">cmd<pos:position pos:line="56" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="53">cluster<pos:position pos:line="56" pos:column="60"/></name><operator pos:line="56" pos:column="60">-&gt;<pos:position pos:line="56" pos:column="65"/></operator><name pos:line="56" pos:column="62">params<pos:position pos:line="56" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="70"/></expr_stmt>
    
    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><name pos:line="58" pos:column="9">rv<pos:position pos:line="58" pos:column="11"/></name></expr>)<pos:position pos:line="58" pos:column="12"/></condition><then pos:line="58" pos:column="12"> <block pos:line="58" pos:column="13">{
        <return pos:line="59" pos:column="9">return <expr><name pos:line="59" pos:column="16">rv<pos:position pos:line="59" pos:column="18"/></name></expr>;<pos:position pos:line="59" pos:column="19"/></return>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="62" pos:column="5">apr_hash_set<pos:position pos:line="62" pos:column="17"/></name><argument_list pos:line="62" pos:column="17">(<argument><expr><name><name pos:line="62" pos:column="18">ctx<pos:position pos:line="62" pos:column="21"/></name><operator pos:line="62" pos:column="21">-&gt;<pos:position pos:line="62" pos:column="26"/></operator><name pos:line="62" pos:column="23">clusters<pos:position pos:line="62" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="33">cluster<pos:position pos:line="62" pos:column="40"/></name><operator pos:line="62" pos:column="40">-&gt;<pos:position pos:line="62" pos:column="45"/></operator><name pos:line="62" pos:column="42">name<pos:position pos:line="62" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="48">APR_HASH_KEY_STRING<pos:position pos:line="62" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="69">cluster<pos:position pos:line="62" pos:column="76"/></name></expr></argument>)<pos:position pos:line="62" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="78"/></expr_stmt>

    <return pos:line="64" pos:column="5">return <expr><name pos:line="64" pos:column="12">NULL<pos:position pos:line="64" pos:column="16"/></name></expr>;<pos:position pos:line="64" pos:column="17"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
