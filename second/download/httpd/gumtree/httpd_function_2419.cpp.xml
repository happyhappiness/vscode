<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_2419.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">ap_mpm_safe_kill<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">pid_t<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">pid<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">sig<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifndef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifndef<pos:position pos:line="3" pos:column="8"/></cpp:directive> <name pos:line="3" pos:column="9">HAVE_GETPGID<pos:position pos:line="3" pos:column="21"/></name></cpp:ifndef>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_proc_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">proc<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">rv<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_exit_why_e<pos:position pos:line="6" pos:column="19"/></name></type> <name pos:line="6" pos:column="20">why<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">status<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* Ensure pid sanity */</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">pid<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">&lt;<pos:position pos:line="10" pos:column="17"/></operator> <literal type="number" pos:line="10" pos:column="15">1<pos:position pos:line="10" pos:column="16"/></literal></expr>)<pos:position pos:line="10" pos:column="17"/></condition><then pos:line="10" pos:column="17"> <block pos:line="10" pos:column="18">{
        <return pos:line="11" pos:column="9">return <expr><name pos:line="11" pos:column="16">APR_EINVAL<pos:position pos:line="11" pos:column="26"/></name></expr>;<pos:position pos:line="11" pos:column="27"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="14" pos:column="5">proc<pos:position pos:line="14" pos:column="9"/></name><operator pos:line="14" pos:column="9">.<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">pid<pos:position pos:line="14" pos:column="13"/></name></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <name pos:line="14" pos:column="16">pid<pos:position pos:line="14" pos:column="19"/></name></expr>;<pos:position pos:line="14" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">rv<pos:position pos:line="15" pos:column="7"/></name> <operator pos:line="15" pos:column="8">=<pos:position pos:line="15" pos:column="9"/></operator> <call><name pos:line="15" pos:column="10">apr_proc_wait<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><operator pos:line="15" pos:column="24">&amp;<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="25">proc<pos:position pos:line="15" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="31">&amp;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="32">status<pos:position pos:line="15" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="40">&amp;<pos:position pos:line="15" pos:column="45"/></operator><name pos:line="15" pos:column="41">why<pos:position pos:line="15" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="46">APR_NOWAIT<pos:position pos:line="15" pos:column="56"/></name></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="58"/></expr_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">rv<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">==<pos:position pos:line="16" pos:column="14"/></operator> <name pos:line="16" pos:column="15">APR_CHILD_DONE<pos:position pos:line="16" pos:column="29"/></name></expr>)<pos:position pos:line="16" pos:column="30"/></condition><then pos:line="16" pos:column="30"> <block pos:line="16" pos:column="31">{
<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef<pos:position pos:line="17" pos:column="7"/></cpp:directive> <name pos:line="17" pos:column="8">AP_MPM_WANT_PROCESS_CHILD_STATUS<pos:position pos:line="17" pos:column="40"/></name></cpp:ifdef>
        <comment type="block" pos:line="18" pos:column="9">/* The child already died - log the termination status if
         * necessary: */</comment>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">ap_process_child_status<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><operator pos:line="20" pos:column="33">&amp;<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="34">proc<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="40">why<pos:position pos:line="20" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="45">status<pos:position pos:line="20" pos:column="51"/></name></expr></argument>)<pos:position pos:line="20" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="53"/></expr_stmt>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>
        <return pos:line="22" pos:column="9">return <expr><name pos:line="22" pos:column="16">APR_EINVAL<pos:position pos:line="22" pos:column="26"/></name></expr>;<pos:position pos:line="22" pos:column="27"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then>
    <elseif pos:line="24" pos:column="5">else <if pos:line="24" pos:column="10">if <condition pos:line="24" pos:column="13">(<expr><name pos:line="24" pos:column="14">rv<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">!=<pos:position pos:line="24" pos:column="19"/></operator> <name pos:line="24" pos:column="20">APR_CHILD_NOTDONE<pos:position pos:line="24" pos:column="37"/></name></expr>)<pos:position pos:line="24" pos:column="38"/></condition><then pos:line="24" pos:column="38"> <block pos:line="24" pos:column="39">{
        <comment type="block" pos:line="25" pos:column="9">/* The child is already dead and reaped, or was a bogus pid -
         * log this either way. */</comment>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">ap_log_error<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><name pos:line="27" pos:column="22">APLOG_MARK<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="34">APLOG_NOTICE<pos:position pos:line="27" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="48">rv<pos:position pos:line="27" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="52">ap_server_conf<pos:position pos:line="27" pos:column="66"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="28" pos:column="22">"cannot send signal %d to pid %ld (non-child or "<pos:position pos:line="28" pos:column="71"/></literal>
                     <literal type="string" pos:line="29" pos:column="22">"already dead)"<pos:position pos:line="29" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="39">sig<pos:position pos:line="29" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="44">(<pos:position pos:line="29" pos:column="45"/></operator><name pos:line="29" pos:column="45">long<pos:position pos:line="29" pos:column="49"/></name><operator pos:line="29" pos:column="49">)<pos:position pos:line="29" pos:column="50"/></operator><name pos:line="29" pos:column="50">pid<pos:position pos:line="29" pos:column="53"/></name></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="55"/></expr_stmt>
        <return pos:line="30" pos:column="9">return <expr><name pos:line="30" pos:column="16">APR_EINVAL<pos:position pos:line="30" pos:column="26"/></name></expr>;<pos:position pos:line="30" pos:column="27"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if></elseif></if>
<cpp:else pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">else<pos:position pos:line="32" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">pid_t<pos:position pos:line="33" pos:column="10"/></name></type> <name pos:line="33" pos:column="11">pg<pos:position pos:line="33" pos:column="13"/></name></decl>;<pos:position pos:line="33" pos:column="14"/></decl_stmt>

    <comment type="block" pos:line="35" pos:column="5">/* Ensure pid sanity. */</comment>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">pid<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">&lt;<pos:position pos:line="36" pos:column="17"/></operator> <literal type="number" pos:line="36" pos:column="15">1<pos:position pos:line="36" pos:column="16"/></literal></expr>)<pos:position pos:line="36" pos:column="17"/></condition><then pos:line="36" pos:column="17"> <block pos:line="36" pos:column="18">{
        <return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">APR_EINVAL<pos:position pos:line="37" pos:column="26"/></name></expr>;<pos:position pos:line="37" pos:column="27"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="40" pos:column="5">pg<pos:position pos:line="40" pos:column="7"/></name> <operator pos:line="40" pos:column="8">=<pos:position pos:line="40" pos:column="9"/></operator> <call><name pos:line="40" pos:column="10">getpgid<pos:position pos:line="40" pos:column="17"/></name><argument_list pos:line="40" pos:column="17">(<argument><expr><name pos:line="40" pos:column="18">pid<pos:position pos:line="40" pos:column="21"/></name></expr></argument>)<pos:position pos:line="40" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>    
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">pg<pos:position pos:line="41" pos:column="11"/></name> <operator pos:line="41" pos:column="12">==<pos:position pos:line="41" pos:column="14"/></operator> <operator pos:line="41" pos:column="15">-<pos:position pos:line="41" pos:column="16"/></operator><literal type="number" pos:line="41" pos:column="16">1<pos:position pos:line="41" pos:column="17"/></literal></expr>)<pos:position pos:line="41" pos:column="18"/></condition><then pos:line="41" pos:column="18"> <block pos:line="41" pos:column="19">{
        <comment type="block" pos:line="42" pos:column="9">/* Process already dead... */</comment>
        <return pos:line="43" pos:column="9">return <expr><name pos:line="43" pos:column="16">errno<pos:position pos:line="43" pos:column="21"/></name></expr>;<pos:position pos:line="43" pos:column="22"/></return>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">pg<pos:position pos:line="46" pos:column="11"/></name> <operator pos:line="46" pos:column="12">!=<pos:position pos:line="46" pos:column="14"/></operator> <call><name pos:line="46" pos:column="15">getpgrp<pos:position pos:line="46" pos:column="22"/></name><argument_list pos:line="46" pos:column="22">()<pos:position pos:line="46" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="25"/></condition><then pos:line="46" pos:column="25"> <block pos:line="46" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">ap_log_error<pos:position pos:line="47" pos:column="21"/></name><argument_list pos:line="47" pos:column="21">(<argument><expr><name pos:line="47" pos:column="22">APLOG_MARK<pos:position pos:line="47" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="34">APLOG_ALERT<pos:position pos:line="47" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="47">0<pos:position pos:line="47" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="50">ap_server_conf<pos:position pos:line="47" pos:column="64"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="48" pos:column="22">"refusing to send signal %d to pid %ld outside "<pos:position pos:line="48" pos:column="70"/></literal>
                     <literal type="string" pos:line="49" pos:column="22">"process group"<pos:position pos:line="49" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="39">sig<pos:position pos:line="49" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="44">(<pos:position pos:line="49" pos:column="45"/></operator><name pos:line="49" pos:column="45">long<pos:position pos:line="49" pos:column="49"/></name><operator pos:line="49" pos:column="49">)<pos:position pos:line="49" pos:column="50"/></operator><name pos:line="49" pos:column="50">pid<pos:position pos:line="49" pos:column="53"/></name></expr></argument>)<pos:position pos:line="49" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="55"/></expr_stmt>
        <return pos:line="50" pos:column="9">return <expr><name pos:line="50" pos:column="16">APR_EINVAL<pos:position pos:line="50" pos:column="26"/></name></expr>;<pos:position pos:line="50" pos:column="27"/></return>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>
<cpp:endif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">endif<pos:position pos:line="52" pos:column="7"/></cpp:directive></cpp:endif>        

    <return pos:line="54" pos:column="5">return <expr><ternary><condition><expr><call><name pos:line="54" pos:column="12">kill<pos:position pos:line="54" pos:column="16"/></name><argument_list pos:line="54" pos:column="16">(<argument><expr><name pos:line="54" pos:column="17">pid<pos:position pos:line="54" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="22">sig<pos:position pos:line="54" pos:column="25"/></name></expr></argument>)<pos:position pos:line="54" pos:column="26"/></argument_list></call></expr> ?<pos:position pos:line="54" pos:column="28"/></condition><then pos:line="54" pos:column="28"> <expr><name pos:line="54" pos:column="29">errno<pos:position pos:line="54" pos:column="34"/></name></expr> <pos:position pos:line="54" pos:column="35"/></then><else pos:line="54" pos:column="35">: <expr><name pos:line="54" pos:column="37">APR_SUCCESS<pos:position pos:line="54" pos:column="48"/></name></expr></else></ternary></expr>;<pos:position pos:line="54" pos:column="49"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
