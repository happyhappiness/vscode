<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3359_httpd-2.2.19.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">load_ldap<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">apr_pool_t<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">pool<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">modname<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_dso_handle_sym_t<pos:position pos:line="4" pos:column="25"/></name></type> <name pos:line="4" pos:column="26">symbol<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">rv<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/* deprecate in 2.0 - permit implicit initialization */</comment>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">apu_dso_init<pos:position pos:line="8" pos:column="17"/></name><argument_list pos:line="8" pos:column="17">(<argument><expr><name pos:line="8" pos:column="18">pool<pos:position pos:line="8" pos:column="22"/></name></expr></argument>)<pos:position pos:line="8" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name pos:line="10" pos:column="5">rv<pos:position pos:line="10" pos:column="7"/></name> <operator pos:line="10" pos:column="8">=<pos:position pos:line="10" pos:column="9"/></operator> <call><name pos:line="10" pos:column="10">apu_dso_mutex_lock<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">()<pos:position pos:line="10" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">rv<pos:position pos:line="11" pos:column="11"/></name></expr>)<pos:position pos:line="11" pos:column="12"/></condition><then pos:line="11" pos:column="12"> <block pos:line="11" pos:column="13">{
        <return pos:line="12" pos:column="9">return <expr><name pos:line="12" pos:column="16">rv<pos:position pos:line="12" pos:column="18"/></name></expr>;<pos:position pos:line="12" pos:column="19"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

<cpp:if pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">if<pos:position pos:line="15" pos:column="4"/></cpp:directive> <expr><call><name pos:line="15" pos:column="5">defined<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">WIN32<pos:position pos:line="15" pos:column="18"/></name></expr></argument>)<pos:position pos:line="15" pos:column="19"/></argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name pos:line="16" pos:column="5">modname<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <literal type="string" pos:line="16" pos:column="15">"apr_ldap-"<pos:position pos:line="16" pos:column="26"/></literal> <call><name pos:line="16" pos:column="27">APU_STRINGIFY<pos:position pos:line="16" pos:column="40"/></name><argument_list pos:line="16" pos:column="40">(<argument><expr><name pos:line="16" pos:column="41">APU_MAJOR_VERSION<pos:position pos:line="16" pos:column="58"/></name></expr></argument>)<pos:position pos:line="16" pos:column="59"/></argument_list></call> <literal type="string" pos:line="16" pos:column="60">".dll"<pos:position pos:line="16" pos:column="66"/></literal></expr>;<pos:position pos:line="16" pos:column="67"/></expr_stmt>
<cpp:else pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">else<pos:position pos:line="17" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name pos:line="18" pos:column="5">modname<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <literal type="string" pos:line="18" pos:column="15">"apr_ldap-"<pos:position pos:line="18" pos:column="26"/></literal> <call><name pos:line="18" pos:column="27">APU_STRINGIFY<pos:position pos:line="18" pos:column="40"/></name><argument_list pos:line="18" pos:column="40">(<argument><expr><name pos:line="18" pos:column="41">APU_MAJOR_VERSION<pos:position pos:line="18" pos:column="58"/></name></expr></argument>)<pos:position pos:line="18" pos:column="59"/></argument_list></call> <literal type="string" pos:line="18" pos:column="60">".so"<pos:position pos:line="18" pos:column="65"/></literal></expr>;<pos:position pos:line="18" pos:column="66"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="20" pos:column="5">rv<pos:position pos:line="20" pos:column="7"/></name> <operator pos:line="20" pos:column="8">=<pos:position pos:line="20" pos:column="9"/></operator> <call><name pos:line="20" pos:column="10">apu_dso_load<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><operator pos:line="20" pos:column="23">&amp;<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="24">symbol<pos:position pos:line="20" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="32">modname<pos:position pos:line="20" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="41">"apr__ldap_fns"<pos:position pos:line="20" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="58">pool<pos:position pos:line="20" pos:column="62"/></name></expr></argument>)<pos:position pos:line="20" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="64"/></expr_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">rv<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">==<pos:position pos:line="21" pos:column="14"/></operator> <name pos:line="21" pos:column="15">APR_SUCCESS<pos:position pos:line="21" pos:column="26"/></name></expr>)<pos:position pos:line="21" pos:column="27"/></condition><then pos:line="21" pos:column="27"> <block pos:line="21" pos:column="28">{
        <expr_stmt><expr><name pos:line="22" pos:column="9">lfn<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <name pos:line="22" pos:column="15">symbol<pos:position pos:line="22" pos:column="21"/></name></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">apu_dso_mutex_unlock<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">()<pos:position pos:line="24" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>

    <return pos:line="26" pos:column="5">return <expr><name pos:line="26" pos:column="12">rv<pos:position pos:line="26" pos:column="14"/></name></expr>;<pos:position pos:line="26" pos:column="15"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
