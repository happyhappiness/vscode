<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1852_httpd-2.4.20.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">parse_chunk_size<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">http_ctx_t<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">ctx<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name pos:line="1" pos:column="61">char<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">buffer<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
                                     <parameter><decl><type><name pos:line="2" pos:column="38">apr_size_t<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">len<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">int<pos:position pos:line="2" pos:column="57"/></name></type> <name pos:line="2" pos:column="58">linelimit<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">i<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><literal type="number" pos:line="4" pos:column="20">0<pos:position pos:line="4" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>

    <while pos:line="6" pos:column="5">while <condition pos:line="6" pos:column="11">(<expr><name pos:line="6" pos:column="12">i<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">&lt;<pos:position pos:line="6" pos:column="18"/></operator> <name pos:line="6" pos:column="16">len<pos:position pos:line="6" pos:column="19"/></name></expr>)<pos:position pos:line="6" pos:column="20"/></condition> <block pos:line="6" pos:column="21">{
        <decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">c<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><name><name pos:line="7" pos:column="18">buffer<pos:position pos:line="7" pos:column="24"/></name><index pos:line="7" pos:column="24">[<expr><name pos:line="7" pos:column="25">i<pos:position pos:line="7" pos:column="26"/></name></expr>]<pos:position pos:line="7" pos:column="27"/></index></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="9" pos:column="9">ap_xlate_proto_from_ascii<pos:position pos:line="9" pos:column="34"/></name><argument_list pos:line="9" pos:column="34">(<argument><expr><operator pos:line="9" pos:column="35">&amp;<pos:position pos:line="9" pos:column="40"/></operator><name pos:line="9" pos:column="36">c<pos:position pos:line="9" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="39">1<pos:position pos:line="9" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="42"/></expr_stmt>

        <comment type="block" pos:line="11" pos:column="9">/* handle CRLF after the chunk */</comment>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name><name pos:line="12" pos:column="13">ctx<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">-&gt;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="18">state<pos:position pos:line="12" pos:column="23"/></name></name> <operator pos:line="12" pos:column="24">==<pos:position pos:line="12" pos:column="26"/></operator> <name pos:line="12" pos:column="27">BODY_CHUNK_END<pos:position pos:line="12" pos:column="41"/></name>
                <operator pos:line="13" pos:column="17">||<pos:position pos:line="13" pos:column="19"/></operator> <name><name pos:line="13" pos:column="20">ctx<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">-&gt;<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="25">state<pos:position pos:line="13" pos:column="30"/></name></name> <operator pos:line="13" pos:column="31">==<pos:position pos:line="13" pos:column="33"/></operator> <name pos:line="13" pos:column="34">BODY_CHUNK_END_LF<pos:position pos:line="13" pos:column="51"/></name></expr>)<pos:position pos:line="13" pos:column="52"/></condition><then pos:line="13" pos:column="52"> <block pos:line="13" pos:column="53">{
            <if pos:line="14" pos:column="13">if <condition pos:line="14" pos:column="16">(<expr><name pos:line="14" pos:column="17">c<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">==<pos:position pos:line="14" pos:column="21"/></operator> <name pos:line="14" pos:column="22">LF<pos:position pos:line="14" pos:column="24"/></name></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25"> <block pos:line="14" pos:column="26">{
                <expr_stmt><expr><name><name pos:line="15" pos:column="17">ctx<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">-&gt;<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="22">state<pos:position pos:line="15" pos:column="27"/></name></name> <operator pos:line="15" pos:column="28">=<pos:position pos:line="15" pos:column="29"/></operator> <name pos:line="15" pos:column="30">BODY_CHUNK<pos:position pos:line="15" pos:column="40"/></name></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="16" pos:column="14"/></block></then>
            <elseif pos:line="17" pos:column="13">else <if pos:line="17" pos:column="18">if <condition pos:line="17" pos:column="21">(<expr><name pos:line="17" pos:column="22">c<pos:position pos:line="17" pos:column="23"/></name> <operator pos:line="17" pos:column="24">==<pos:position pos:line="17" pos:column="26"/></operator> <name pos:line="17" pos:column="27">CR<pos:position pos:line="17" pos:column="29"/></name> <operator pos:line="17" pos:column="30">&amp;&amp;<pos:position pos:line="17" pos:column="40"/></operator> <name><name pos:line="17" pos:column="33">ctx<pos:position pos:line="17" pos:column="36"/></name><operator pos:line="17" pos:column="36">-&gt;<pos:position pos:line="17" pos:column="41"/></operator><name pos:line="17" pos:column="38">state<pos:position pos:line="17" pos:column="43"/></name></name> <operator pos:line="17" pos:column="44">==<pos:position pos:line="17" pos:column="46"/></operator> <name pos:line="17" pos:column="47">BODY_CHUNK_END<pos:position pos:line="17" pos:column="61"/></name></expr>)<pos:position pos:line="17" pos:column="62"/></condition><then pos:line="17" pos:column="62"> <block pos:line="17" pos:column="63">{
                <expr_stmt><expr><name><name pos:line="18" pos:column="17">ctx<pos:position pos:line="18" pos:column="20"/></name><operator pos:line="18" pos:column="20">-&gt;<pos:position pos:line="18" pos:column="25"/></operator><name pos:line="18" pos:column="22">state<pos:position pos:line="18" pos:column="27"/></name></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <name pos:line="18" pos:column="30">BODY_CHUNK_END_LF<pos:position pos:line="18" pos:column="47"/></name></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
            }<pos:position pos:line="19" pos:column="14"/></block></then></if></elseif>
            <else pos:line="20" pos:column="13">else <block pos:line="20" pos:column="18">{
                <comment type="block" pos:line="21" pos:column="17">/*
                 * LF expected.
                 */</comment>
                <return pos:line="24" pos:column="17">return <expr><name pos:line="24" pos:column="24">APR_EINVAL<pos:position pos:line="24" pos:column="34"/></name></expr>;<pos:position pos:line="24" pos:column="35"/></return>
            }<pos:position pos:line="25" pos:column="14"/></block></else></if>
            <expr_stmt><expr><name pos:line="26" pos:column="13">i<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">++<pos:position pos:line="26" pos:column="16"/></operator></expr>;<pos:position pos:line="26" pos:column="17"/></expr_stmt>
            <continue pos:line="27" pos:column="13">continue;<pos:position pos:line="27" pos:column="22"/></continue>
        }<pos:position pos:line="28" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="30" pos:column="9">/* handle start of the chunk */</comment>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name><name pos:line="31" pos:column="13">ctx<pos:position pos:line="31" pos:column="16"/></name><operator pos:line="31" pos:column="16">-&gt;<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="18">state<pos:position pos:line="31" pos:column="23"/></name></name> <operator pos:line="31" pos:column="24">==<pos:position pos:line="31" pos:column="26"/></operator> <name pos:line="31" pos:column="27">BODY_CHUNK<pos:position pos:line="31" pos:column="37"/></name></expr>)<pos:position pos:line="31" pos:column="38"/></condition><then pos:line="31" pos:column="38"> <block pos:line="31" pos:column="39">{
            <if pos:line="32" pos:column="13">if <condition pos:line="32" pos:column="16">(<expr><operator pos:line="32" pos:column="17">!<pos:position pos:line="32" pos:column="18"/></operator><call><name pos:line="32" pos:column="18">apr_isxdigit<pos:position pos:line="32" pos:column="30"/></name><argument_list pos:line="32" pos:column="30">(<argument><expr><name pos:line="32" pos:column="31">c<pos:position pos:line="32" pos:column="32"/></name></expr></argument>)<pos:position pos:line="32" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="34"/></condition><then pos:line="32" pos:column="34"> <block pos:line="32" pos:column="35">{
                <comment type="block" pos:line="33" pos:column="17">/*
                 * Detect invalid character at beginning. This also works for
                 * empty chunk size lines.
                 */</comment>
                <return pos:line="37" pos:column="17">return <expr><name pos:line="37" pos:column="24">APR_EINVAL<pos:position pos:line="37" pos:column="34"/></name></expr>;<pos:position pos:line="37" pos:column="35"/></return>
            }<pos:position pos:line="38" pos:column="14"/></block></then>
            <else pos:line="39" pos:column="13">else <block pos:line="39" pos:column="18">{
                <expr_stmt><expr><name><name pos:line="40" pos:column="17">ctx<pos:position pos:line="40" pos:column="20"/></name><operator pos:line="40" pos:column="20">-&gt;<pos:position pos:line="40" pos:column="25"/></operator><name pos:line="40" pos:column="22">state<pos:position pos:line="40" pos:column="27"/></name></name> <operator pos:line="40" pos:column="28">=<pos:position pos:line="40" pos:column="29"/></operator> <name pos:line="40" pos:column="30">BODY_CHUNK_PART<pos:position pos:line="40" pos:column="45"/></name></expr>;<pos:position pos:line="40" pos:column="46"/></expr_stmt>
            }<pos:position pos:line="41" pos:column="14"/></block></else></if>
            <expr_stmt><expr><name><name pos:line="42" pos:column="13">ctx<pos:position pos:line="42" pos:column="16"/></name><operator pos:line="42" pos:column="16">-&gt;<pos:position pos:line="42" pos:column="21"/></operator><name pos:line="42" pos:column="18">remaining<pos:position pos:line="42" pos:column="27"/></name></name> <operator pos:line="42" pos:column="28">=<pos:position pos:line="42" pos:column="29"/></operator> <literal type="number" pos:line="42" pos:column="30">0<pos:position pos:line="42" pos:column="31"/></literal></expr>;<pos:position pos:line="42" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="43" pos:column="13">ctx<pos:position pos:line="43" pos:column="16"/></name><operator pos:line="43" pos:column="16">-&gt;<pos:position pos:line="43" pos:column="21"/></operator><name pos:line="43" pos:column="18">chunkbits<pos:position pos:line="43" pos:column="27"/></name></name> <operator pos:line="43" pos:column="28">=<pos:position pos:line="43" pos:column="29"/></operator> <sizeof pos:line="43" pos:column="30">sizeof<argument_list pos:line="43" pos:column="36">(<argument><expr><name pos:line="43" pos:column="37">apr_off_t<pos:position pos:line="43" pos:column="46"/></name></expr></argument>)<pos:position pos:line="43" pos:column="47"/></argument_list></sizeof> <operator pos:line="43" pos:column="48">*<pos:position pos:line="43" pos:column="49"/></operator> <literal type="number" pos:line="43" pos:column="50">8<pos:position pos:line="43" pos:column="51"/></literal></expr>;<pos:position pos:line="43" pos:column="52"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="44" pos:column="13">ctx<pos:position pos:line="44" pos:column="16"/></name><operator pos:line="44" pos:column="16">-&gt;<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="18">chunk_used<pos:position pos:line="44" pos:column="28"/></name></name> <operator pos:line="44" pos:column="29">=<pos:position pos:line="44" pos:column="30"/></operator> <literal type="number" pos:line="44" pos:column="31">0<pos:position pos:line="44" pos:column="32"/></literal></expr>;<pos:position pos:line="44" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="45" pos:column="13">ctx<pos:position pos:line="45" pos:column="16"/></name><operator pos:line="45" pos:column="16">-&gt;<pos:position pos:line="45" pos:column="21"/></operator><name pos:line="45" pos:column="18">chunk_bws<pos:position pos:line="45" pos:column="27"/></name></name> <operator pos:line="45" pos:column="28">=<pos:position pos:line="45" pos:column="29"/></operator> <literal type="number" pos:line="45" pos:column="30">0<pos:position pos:line="45" pos:column="31"/></literal></expr>;<pos:position pos:line="45" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if>

        <if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">c<pos:position pos:line="48" pos:column="14"/></name> <operator pos:line="48" pos:column="15">==<pos:position pos:line="48" pos:column="17"/></operator> <name pos:line="48" pos:column="18">LF<pos:position pos:line="48" pos:column="20"/></name></expr>)<pos:position pos:line="48" pos:column="21"/></condition><then pos:line="48" pos:column="21"> <block pos:line="48" pos:column="22">{
            <if pos:line="49" pos:column="13">if <condition pos:line="49" pos:column="16">(<expr><name><name pos:line="49" pos:column="17">ctx<pos:position pos:line="49" pos:column="20"/></name><operator pos:line="49" pos:column="20">-&gt;<pos:position pos:line="49" pos:column="25"/></operator><name pos:line="49" pos:column="22">remaining<pos:position pos:line="49" pos:column="31"/></name></name></expr>)<pos:position pos:line="49" pos:column="32"/></condition><then pos:line="49" pos:column="32"> <block pos:line="49" pos:column="33">{
                <expr_stmt><expr><name><name pos:line="50" pos:column="17">ctx<pos:position pos:line="50" pos:column="20"/></name><operator pos:line="50" pos:column="20">-&gt;<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="22">state<pos:position pos:line="50" pos:column="27"/></name></name> <operator pos:line="50" pos:column="28">=<pos:position pos:line="50" pos:column="29"/></operator> <name pos:line="50" pos:column="30">BODY_CHUNK_DATA<pos:position pos:line="50" pos:column="45"/></name></expr>;<pos:position pos:line="50" pos:column="46"/></expr_stmt>
            }<pos:position pos:line="51" pos:column="14"/></block></then>
            <else pos:line="52" pos:column="13">else <block pos:line="52" pos:column="18">{
                <expr_stmt><expr><name><name pos:line="53" pos:column="17">ctx<pos:position pos:line="53" pos:column="20"/></name><operator pos:line="53" pos:column="20">-&gt;<pos:position pos:line="53" pos:column="25"/></operator><name pos:line="53" pos:column="22">state<pos:position pos:line="53" pos:column="27"/></name></name> <operator pos:line="53" pos:column="28">=<pos:position pos:line="53" pos:column="29"/></operator> <name pos:line="53" pos:column="30">BODY_CHUNK_TRAILER<pos:position pos:line="53" pos:column="48"/></name></expr>;<pos:position pos:line="53" pos:column="49"/></expr_stmt>
            }<pos:position pos:line="54" pos:column="14"/></block></else></if>
        }<pos:position pos:line="55" pos:column="10"/></block></then>
        <elseif pos:line="56" pos:column="9">else <if pos:line="56" pos:column="14">if <condition pos:line="56" pos:column="17">(<expr><name><name pos:line="56" pos:column="18">ctx<pos:position pos:line="56" pos:column="21"/></name><operator pos:line="56" pos:column="21">-&gt;<pos:position pos:line="56" pos:column="26"/></operator><name pos:line="56" pos:column="23">state<pos:position pos:line="56" pos:column="28"/></name></name> <operator pos:line="56" pos:column="29">==<pos:position pos:line="56" pos:column="31"/></operator> <name pos:line="56" pos:column="32">BODY_CHUNK_LF<pos:position pos:line="56" pos:column="45"/></name></expr>)<pos:position pos:line="56" pos:column="46"/></condition><then pos:line="56" pos:column="46"> <block pos:line="56" pos:column="47">{
            <comment type="block" pos:line="57" pos:column="13">/*
             * LF expected.
             */</comment>
            <return pos:line="60" pos:column="13">return <expr><name pos:line="60" pos:column="20">APR_EINVAL<pos:position pos:line="60" pos:column="30"/></name></expr>;<pos:position pos:line="60" pos:column="31"/></return>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="62" pos:column="9">else <if pos:line="62" pos:column="14">if <condition pos:line="62" pos:column="17">(<expr><name pos:line="62" pos:column="18">c<pos:position pos:line="62" pos:column="19"/></name> <operator pos:line="62" pos:column="20">==<pos:position pos:line="62" pos:column="22"/></operator> <name pos:line="62" pos:column="23">CR<pos:position pos:line="62" pos:column="25"/></name></expr>)<pos:position pos:line="62" pos:column="26"/></condition><then pos:line="62" pos:column="26"> <block pos:line="62" pos:column="27">{
            <expr_stmt><expr><name><name pos:line="63" pos:column="13">ctx<pos:position pos:line="63" pos:column="16"/></name><operator pos:line="63" pos:column="16">-&gt;<pos:position pos:line="63" pos:column="21"/></operator><name pos:line="63" pos:column="18">state<pos:position pos:line="63" pos:column="23"/></name></name> <operator pos:line="63" pos:column="24">=<pos:position pos:line="63" pos:column="25"/></operator> <name pos:line="63" pos:column="26">BODY_CHUNK_LF<pos:position pos:line="63" pos:column="39"/></name></expr>;<pos:position pos:line="63" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="64" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="65" pos:column="9">else <if pos:line="65" pos:column="14">if <condition pos:line="65" pos:column="17">(<expr><name pos:line="65" pos:column="18">c<pos:position pos:line="65" pos:column="19"/></name> <operator pos:line="65" pos:column="20">==<pos:position pos:line="65" pos:column="22"/></operator> <literal type="char" pos:line="65" pos:column="23">';'<pos:position pos:line="65" pos:column="26"/></literal></expr>)<pos:position pos:line="65" pos:column="27"/></condition><then pos:line="65" pos:column="27"> <block pos:line="65" pos:column="28">{
            <expr_stmt><expr><name><name pos:line="66" pos:column="13">ctx<pos:position pos:line="66" pos:column="16"/></name><operator pos:line="66" pos:column="16">-&gt;<pos:position pos:line="66" pos:column="21"/></operator><name pos:line="66" pos:column="18">state<pos:position pos:line="66" pos:column="23"/></name></name> <operator pos:line="66" pos:column="24">=<pos:position pos:line="66" pos:column="25"/></operator> <name pos:line="66" pos:column="26">BODY_CHUNK_EXT<pos:position pos:line="66" pos:column="40"/></name></expr>;<pos:position pos:line="66" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="67" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="68" pos:column="9">else <if pos:line="68" pos:column="14">if <condition pos:line="68" pos:column="17">(<expr><name><name pos:line="68" pos:column="18">ctx<pos:position pos:line="68" pos:column="21"/></name><operator pos:line="68" pos:column="21">-&gt;<pos:position pos:line="68" pos:column="26"/></operator><name pos:line="68" pos:column="23">state<pos:position pos:line="68" pos:column="28"/></name></name> <operator pos:line="68" pos:column="29">==<pos:position pos:line="68" pos:column="31"/></operator> <name pos:line="68" pos:column="32">BODY_CHUNK_EXT<pos:position pos:line="68" pos:column="46"/></name></expr>)<pos:position pos:line="68" pos:column="47"/></condition><then pos:line="68" pos:column="47"> <block pos:line="68" pos:column="48">{
            <comment type="block" pos:line="69" pos:column="13">/*
             * Control chars (but tabs) are invalid.
             */</comment>
            <if pos:line="72" pos:column="13">if <condition pos:line="72" pos:column="16">(<expr><name pos:line="72" pos:column="17">c<pos:position pos:line="72" pos:column="18"/></name> <operator pos:line="72" pos:column="19">!=<pos:position pos:line="72" pos:column="21"/></operator> <literal type="char" pos:line="72" pos:column="22">'\t'<pos:position pos:line="72" pos:column="26"/></literal> <operator pos:line="72" pos:column="27">&amp;&amp;<pos:position pos:line="72" pos:column="37"/></operator> <call><name pos:line="72" pos:column="30">apr_iscntrl<pos:position pos:line="72" pos:column="41"/></name><argument_list pos:line="72" pos:column="41">(<argument><expr><name pos:line="72" pos:column="42">c<pos:position pos:line="72" pos:column="43"/></name></expr></argument>)<pos:position pos:line="72" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="45"/></condition><then pos:line="72" pos:column="45"> <block pos:line="72" pos:column="46">{
                <return pos:line="73" pos:column="17">return <expr><name pos:line="73" pos:column="24">APR_EINVAL<pos:position pos:line="73" pos:column="34"/></name></expr>;<pos:position pos:line="73" pos:column="35"/></return>
            }<pos:position pos:line="74" pos:column="14"/></block></then></if>
        }<pos:position pos:line="75" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="76" pos:column="9">else <if pos:line="76" pos:column="14">if <condition pos:line="76" pos:column="17">(<expr><name pos:line="76" pos:column="18">c<pos:position pos:line="76" pos:column="19"/></name> <operator pos:line="76" pos:column="20">==<pos:position pos:line="76" pos:column="22"/></operator> <literal type="char" pos:line="76" pos:column="23">' '<pos:position pos:line="76" pos:column="26"/></literal> <operator pos:line="76" pos:column="27">||<pos:position pos:line="76" pos:column="29"/></operator> <name pos:line="76" pos:column="30">c<pos:position pos:line="76" pos:column="31"/></name> <operator pos:line="76" pos:column="32">==<pos:position pos:line="76" pos:column="34"/></operator> <literal type="char" pos:line="76" pos:column="35">'\t'<pos:position pos:line="76" pos:column="39"/></literal></expr>)<pos:position pos:line="76" pos:column="40"/></condition><then pos:line="76" pos:column="40"> <block pos:line="76" pos:column="41">{
            <comment type="block" pos:line="77" pos:column="13">/* Be lenient up to 10 BWS (term from rfc7230 - 3.2.3).
             */</comment>
            <expr_stmt><expr><name><name pos:line="79" pos:column="13">ctx<pos:position pos:line="79" pos:column="16"/></name><operator pos:line="79" pos:column="16">-&gt;<pos:position pos:line="79" pos:column="21"/></operator><name pos:line="79" pos:column="18">state<pos:position pos:line="79" pos:column="23"/></name></name> <operator pos:line="79" pos:column="24">=<pos:position pos:line="79" pos:column="25"/></operator> <name pos:line="79" pos:column="26">BODY_CHUNK_CR<pos:position pos:line="79" pos:column="39"/></name></expr>;<pos:position pos:line="79" pos:column="40"/></expr_stmt>
            <if pos:line="80" pos:column="13">if <condition pos:line="80" pos:column="16">(<expr><operator pos:line="80" pos:column="17">++<pos:position pos:line="80" pos:column="19"/></operator><name><name pos:line="80" pos:column="19">ctx<pos:position pos:line="80" pos:column="22"/></name><operator pos:line="80" pos:column="22">-&gt;<pos:position pos:line="80" pos:column="27"/></operator><name pos:line="80" pos:column="24">chunk_bws<pos:position pos:line="80" pos:column="33"/></name></name> <operator pos:line="80" pos:column="34">&gt;<pos:position pos:line="80" pos:column="38"/></operator> <literal type="number" pos:line="80" pos:column="36">10<pos:position pos:line="80" pos:column="38"/></literal></expr>)<pos:position pos:line="80" pos:column="39"/></condition><then pos:line="80" pos:column="39"> <block pos:line="80" pos:column="40">{
                <return pos:line="81" pos:column="17">return <expr><name pos:line="81" pos:column="24">APR_EINVAL<pos:position pos:line="81" pos:column="34"/></name></expr>;<pos:position pos:line="81" pos:column="35"/></return>
            }<pos:position pos:line="82" pos:column="14"/></block></then></if>
        }<pos:position pos:line="83" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="84" pos:column="9">else <if pos:line="84" pos:column="14">if <condition pos:line="84" pos:column="17">(<expr><name><name pos:line="84" pos:column="18">ctx<pos:position pos:line="84" pos:column="21"/></name><operator pos:line="84" pos:column="21">-&gt;<pos:position pos:line="84" pos:column="26"/></operator><name pos:line="84" pos:column="23">state<pos:position pos:line="84" pos:column="28"/></name></name> <operator pos:line="84" pos:column="29">==<pos:position pos:line="84" pos:column="31"/></operator> <name pos:line="84" pos:column="32">BODY_CHUNK_CR<pos:position pos:line="84" pos:column="45"/></name></expr>)<pos:position pos:line="84" pos:column="46"/></condition><then pos:line="84" pos:column="46"> <block pos:line="84" pos:column="47">{
            <comment type="block" pos:line="85" pos:column="13">/*
             * ';', CR or LF expected.
             */</comment>
            <return pos:line="88" pos:column="13">return <expr><name pos:line="88" pos:column="20">APR_EINVAL<pos:position pos:line="88" pos:column="30"/></name></expr>;<pos:position pos:line="88" pos:column="31"/></return>
        }<pos:position pos:line="89" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="90" pos:column="9">else <if pos:line="90" pos:column="14">if <condition pos:line="90" pos:column="17">(<expr><name><name pos:line="90" pos:column="18">ctx<pos:position pos:line="90" pos:column="21"/></name><operator pos:line="90" pos:column="21">-&gt;<pos:position pos:line="90" pos:column="26"/></operator><name pos:line="90" pos:column="23">state<pos:position pos:line="90" pos:column="28"/></name></name> <operator pos:line="90" pos:column="29">==<pos:position pos:line="90" pos:column="31"/></operator> <name pos:line="90" pos:column="32">BODY_CHUNK_PART<pos:position pos:line="90" pos:column="47"/></name></expr>)<pos:position pos:line="90" pos:column="48"/></condition><then pos:line="90" pos:column="48"> <block pos:line="90" pos:column="49">{
            <decl_stmt><decl><type><name pos:line="91" pos:column="13">int<pos:position pos:line="91" pos:column="16"/></name></type> <name pos:line="91" pos:column="17">xvalue<pos:position pos:line="91" pos:column="23"/></name></decl>;<pos:position pos:line="91" pos:column="24"/></decl_stmt>

            <comment type="block" pos:line="93" pos:column="13">/* ignore leading zeros */</comment>
            <if pos:line="94" pos:column="13">if <condition pos:line="94" pos:column="16">(<expr><operator pos:line="94" pos:column="17">!<pos:position pos:line="94" pos:column="18"/></operator><name><name pos:line="94" pos:column="18">ctx<pos:position pos:line="94" pos:column="21"/></name><operator pos:line="94" pos:column="21">-&gt;<pos:position pos:line="94" pos:column="26"/></operator><name pos:line="94" pos:column="23">remaining<pos:position pos:line="94" pos:column="32"/></name></name> <operator pos:line="94" pos:column="33">&amp;&amp;<pos:position pos:line="94" pos:column="43"/></operator> <name pos:line="94" pos:column="36">c<pos:position pos:line="94" pos:column="37"/></name> <operator pos:line="94" pos:column="38">==<pos:position pos:line="94" pos:column="40"/></operator> <literal type="char" pos:line="94" pos:column="41">'0'<pos:position pos:line="94" pos:column="44"/></literal></expr>)<pos:position pos:line="94" pos:column="45"/></condition><then pos:line="94" pos:column="45"> <block pos:line="94" pos:column="46">{
                <expr_stmt><expr><name pos:line="95" pos:column="17">i<pos:position pos:line="95" pos:column="18"/></name><operator pos:line="95" pos:column="18">++<pos:position pos:line="95" pos:column="20"/></operator></expr>;<pos:position pos:line="95" pos:column="21"/></expr_stmt>
                <continue pos:line="96" pos:column="17">continue;<pos:position pos:line="96" pos:column="26"/></continue>
            }<pos:position pos:line="97" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name><name pos:line="99" pos:column="13">ctx<pos:position pos:line="99" pos:column="16"/></name><operator pos:line="99" pos:column="16">-&gt;<pos:position pos:line="99" pos:column="21"/></operator><name pos:line="99" pos:column="18">chunkbits<pos:position pos:line="99" pos:column="27"/></name></name> <operator pos:line="99" pos:column="28">-=<pos:position pos:line="99" pos:column="30"/></operator> <literal type="number" pos:line="99" pos:column="31">4<pos:position pos:line="99" pos:column="32"/></literal></expr>;<pos:position pos:line="99" pos:column="33"/></expr_stmt>
            <if pos:line="100" pos:column="13">if <condition pos:line="100" pos:column="16">(<expr><name><name pos:line="100" pos:column="17">ctx<pos:position pos:line="100" pos:column="20"/></name><operator pos:line="100" pos:column="20">-&gt;<pos:position pos:line="100" pos:column="25"/></operator><name pos:line="100" pos:column="22">chunkbits<pos:position pos:line="100" pos:column="31"/></name></name> <operator pos:line="100" pos:column="32">&lt;<pos:position pos:line="100" pos:column="36"/></operator> <literal type="number" pos:line="100" pos:column="34">0<pos:position pos:line="100" pos:column="35"/></literal></expr>)<pos:position pos:line="100" pos:column="36"/></condition><then pos:line="100" pos:column="36"> <block pos:line="100" pos:column="37">{
                <comment type="block" pos:line="101" pos:column="17">/* overflow */</comment>
                <return pos:line="102" pos:column="17">return <expr><name pos:line="102" pos:column="24">APR_ENOSPC<pos:position pos:line="102" pos:column="34"/></name></expr>;<pos:position pos:line="102" pos:column="35"/></return>
            }<pos:position pos:line="103" pos:column="14"/></block></then></if>

            <if pos:line="105" pos:column="13">if <condition pos:line="105" pos:column="16">(<expr><name pos:line="105" pos:column="17">c<pos:position pos:line="105" pos:column="18"/></name> <operator pos:line="105" pos:column="19">&gt;=<pos:position pos:line="105" pos:column="24"/></operator> <literal type="char" pos:line="105" pos:column="22">'0'<pos:position pos:line="105" pos:column="25"/></literal> <operator pos:line="105" pos:column="26">&amp;&amp;<pos:position pos:line="105" pos:column="36"/></operator> <name pos:line="105" pos:column="29">c<pos:position pos:line="105" pos:column="30"/></name> <operator pos:line="105" pos:column="31">&lt;=<pos:position pos:line="105" pos:column="36"/></operator> <literal type="char" pos:line="105" pos:column="34">'9'<pos:position pos:line="105" pos:column="37"/></literal></expr>)<pos:position pos:line="105" pos:column="38"/></condition><then pos:line="105" pos:column="38"> <block pos:line="105" pos:column="39">{
                <expr_stmt><expr><name pos:line="106" pos:column="17">xvalue<pos:position pos:line="106" pos:column="23"/></name> <operator pos:line="106" pos:column="24">=<pos:position pos:line="106" pos:column="25"/></operator> <name pos:line="106" pos:column="26">c<pos:position pos:line="106" pos:column="27"/></name> <operator pos:line="106" pos:column="28">-<pos:position pos:line="106" pos:column="29"/></operator> <literal type="char" pos:line="106" pos:column="30">'0'<pos:position pos:line="106" pos:column="33"/></literal></expr>;<pos:position pos:line="106" pos:column="34"/></expr_stmt>
            }<pos:position pos:line="107" pos:column="14"/></block></then>
            <elseif pos:line="108" pos:column="13">else <if pos:line="108" pos:column="18">if <condition pos:line="108" pos:column="21">(<expr><name pos:line="108" pos:column="22">c<pos:position pos:line="108" pos:column="23"/></name> <operator pos:line="108" pos:column="24">&gt;=<pos:position pos:line="108" pos:column="29"/></operator> <literal type="char" pos:line="108" pos:column="27">'A'<pos:position pos:line="108" pos:column="30"/></literal> <operator pos:line="108" pos:column="31">&amp;&amp;<pos:position pos:line="108" pos:column="41"/></operator> <name pos:line="108" pos:column="34">c<pos:position pos:line="108" pos:column="35"/></name> <operator pos:line="108" pos:column="36">&lt;=<pos:position pos:line="108" pos:column="41"/></operator> <literal type="char" pos:line="108" pos:column="39">'F'<pos:position pos:line="108" pos:column="42"/></literal></expr>)<pos:position pos:line="108" pos:column="43"/></condition><then pos:line="108" pos:column="43"> <block pos:line="108" pos:column="44">{
                <expr_stmt><expr><name pos:line="109" pos:column="17">xvalue<pos:position pos:line="109" pos:column="23"/></name> <operator pos:line="109" pos:column="24">=<pos:position pos:line="109" pos:column="25"/></operator> <name pos:line="109" pos:column="26">c<pos:position pos:line="109" pos:column="27"/></name> <operator pos:line="109" pos:column="28">-<pos:position pos:line="109" pos:column="29"/></operator> <literal type="char" pos:line="109" pos:column="30">'A'<pos:position pos:line="109" pos:column="33"/></literal> <operator pos:line="109" pos:column="34">+<pos:position pos:line="109" pos:column="35"/></operator> <literal type="number" pos:line="109" pos:column="36">0xa<pos:position pos:line="109" pos:column="39"/></literal></expr>;<pos:position pos:line="109" pos:column="40"/></expr_stmt>
            }<pos:position pos:line="110" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="111" pos:column="13">else <if pos:line="111" pos:column="18">if <condition pos:line="111" pos:column="21">(<expr><name pos:line="111" pos:column="22">c<pos:position pos:line="111" pos:column="23"/></name> <operator pos:line="111" pos:column="24">&gt;=<pos:position pos:line="111" pos:column="29"/></operator> <literal type="char" pos:line="111" pos:column="27">'a'<pos:position pos:line="111" pos:column="30"/></literal> <operator pos:line="111" pos:column="31">&amp;&amp;<pos:position pos:line="111" pos:column="41"/></operator> <name pos:line="111" pos:column="34">c<pos:position pos:line="111" pos:column="35"/></name> <operator pos:line="111" pos:column="36">&lt;=<pos:position pos:line="111" pos:column="41"/></operator> <literal type="char" pos:line="111" pos:column="39">'f'<pos:position pos:line="111" pos:column="42"/></literal></expr>)<pos:position pos:line="111" pos:column="43"/></condition><then pos:line="111" pos:column="43"> <block pos:line="111" pos:column="44">{
                <expr_stmt><expr><name pos:line="112" pos:column="17">xvalue<pos:position pos:line="112" pos:column="23"/></name> <operator pos:line="112" pos:column="24">=<pos:position pos:line="112" pos:column="25"/></operator> <name pos:line="112" pos:column="26">c<pos:position pos:line="112" pos:column="27"/></name> <operator pos:line="112" pos:column="28">-<pos:position pos:line="112" pos:column="29"/></operator> <literal type="char" pos:line="112" pos:column="30">'a'<pos:position pos:line="112" pos:column="33"/></literal> <operator pos:line="112" pos:column="34">+<pos:position pos:line="112" pos:column="35"/></operator> <literal type="number" pos:line="112" pos:column="36">0xa<pos:position pos:line="112" pos:column="39"/></literal></expr>;<pos:position pos:line="112" pos:column="40"/></expr_stmt>
            }<pos:position pos:line="113" pos:column="14"/></block></then></if></elseif>
            <else pos:line="114" pos:column="13">else <block pos:line="114" pos:column="18">{
                <comment type="block" pos:line="115" pos:column="17">/* bogus character */</comment>
                <return pos:line="116" pos:column="17">return <expr><name pos:line="116" pos:column="24">APR_EINVAL<pos:position pos:line="116" pos:column="34"/></name></expr>;<pos:position pos:line="116" pos:column="35"/></return>
            }<pos:position pos:line="117" pos:column="14"/></block></else></if>

            <expr_stmt><expr><name><name pos:line="119" pos:column="13">ctx<pos:position pos:line="119" pos:column="16"/></name><operator pos:line="119" pos:column="16">-&gt;<pos:position pos:line="119" pos:column="21"/></operator><name pos:line="119" pos:column="18">remaining<pos:position pos:line="119" pos:column="27"/></name></name> <operator pos:line="119" pos:column="28">=<pos:position pos:line="119" pos:column="29"/></operator> <operator pos:line="119" pos:column="30">(<pos:position pos:line="119" pos:column="31"/></operator><name><name pos:line="119" pos:column="31">ctx<pos:position pos:line="119" pos:column="34"/></name><operator pos:line="119" pos:column="34">-&gt;<pos:position pos:line="119" pos:column="39"/></operator><name pos:line="119" pos:column="36">remaining<pos:position pos:line="119" pos:column="45"/></name></name> <operator pos:line="119" pos:column="46">&lt;&lt;<pos:position pos:line="119" pos:column="54"/></operator> <literal type="number" pos:line="119" pos:column="49">4<pos:position pos:line="119" pos:column="50"/></literal><operator pos:line="119" pos:column="50">)<pos:position pos:line="119" pos:column="51"/></operator> <operator pos:line="119" pos:column="52">|<pos:position pos:line="119" pos:column="53"/></operator> <name pos:line="119" pos:column="54">xvalue<pos:position pos:line="119" pos:column="60"/></name></expr>;<pos:position pos:line="119" pos:column="61"/></expr_stmt>
            <if pos:line="120" pos:column="13">if <condition pos:line="120" pos:column="16">(<expr><name><name pos:line="120" pos:column="17">ctx<pos:position pos:line="120" pos:column="20"/></name><operator pos:line="120" pos:column="20">-&gt;<pos:position pos:line="120" pos:column="25"/></operator><name pos:line="120" pos:column="22">remaining<pos:position pos:line="120" pos:column="31"/></name></name> <operator pos:line="120" pos:column="32">&lt;<pos:position pos:line="120" pos:column="36"/></operator> <literal type="number" pos:line="120" pos:column="34">0<pos:position pos:line="120" pos:column="35"/></literal></expr>)<pos:position pos:line="120" pos:column="36"/></condition><then pos:line="120" pos:column="36"> <block pos:line="120" pos:column="37">{
                <comment type="block" pos:line="121" pos:column="17">/* overflow */</comment>
                <return pos:line="122" pos:column="17">return <expr><name pos:line="122" pos:column="24">APR_ENOSPC<pos:position pos:line="122" pos:column="34"/></name></expr>;<pos:position pos:line="122" pos:column="35"/></return>
            }<pos:position pos:line="123" pos:column="14"/></block></then></if>
        }<pos:position pos:line="124" pos:column="10"/></block></then></if></elseif>
        <else pos:line="125" pos:column="9">else <block pos:line="125" pos:column="14">{
            <comment type="block" pos:line="126" pos:column="13">/* Should not happen */</comment>
            <return pos:line="127" pos:column="13">return <expr><name pos:line="127" pos:column="20">APR_EGENERAL<pos:position pos:line="127" pos:column="32"/></name></expr>;<pos:position pos:line="127" pos:column="33"/></return>
        }<pos:position pos:line="128" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name pos:line="130" pos:column="9">i<pos:position pos:line="130" pos:column="10"/></name><operator pos:line="130" pos:column="10">++<pos:position pos:line="130" pos:column="12"/></operator></expr>;<pos:position pos:line="130" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="131" pos:column="6"/></block></while>

    <comment type="block" pos:line="133" pos:column="5">/* sanity check */</comment>
    <expr_stmt><expr><name><name pos:line="134" pos:column="5">ctx<pos:position pos:line="134" pos:column="8"/></name><operator pos:line="134" pos:column="8">-&gt;<pos:position pos:line="134" pos:column="13"/></operator><name pos:line="134" pos:column="10">chunk_used<pos:position pos:line="134" pos:column="20"/></name></name> <operator pos:line="134" pos:column="21">+=<pos:position pos:line="134" pos:column="23"/></operator> <name pos:line="134" pos:column="24">len<pos:position pos:line="134" pos:column="27"/></name></expr>;<pos:position pos:line="134" pos:column="28"/></expr_stmt>
    <if pos:line="135" pos:column="5">if <condition pos:line="135" pos:column="8">(<expr><name><name pos:line="135" pos:column="9">ctx<pos:position pos:line="135" pos:column="12"/></name><operator pos:line="135" pos:column="12">-&gt;<pos:position pos:line="135" pos:column="17"/></operator><name><name pos:line="135" pos:column="14">chunk_used<pos:position pos:line="135" pos:column="24"/></name> <argument_list type="generic" pos:line="135" pos:column="25">&lt; <argument><expr><literal type="number" pos:line="135" pos:column="27">0<pos:position pos:line="135" pos:column="28"/></literal> <operator pos:line="135" pos:column="29">||<pos:position pos:line="135" pos:column="31"/></operator> <name><name pos:line="135" pos:column="32">ctx<pos:position pos:line="135" pos:column="35"/></name><operator pos:line="135" pos:column="35">-&gt;<pos:position pos:line="135" pos:column="40"/></operator><name pos:line="135" pos:column="37">chunk_used<pos:position pos:line="135" pos:column="47"/></name></name></expr></argument> &gt;<pos:position pos:line="135" pos:column="52"/></argument_list></name></name> <name pos:line="135" pos:column="50">linelimit<pos:position pos:line="135" pos:column="59"/></name></expr>)<pos:position pos:line="135" pos:column="60"/></condition><then pos:line="135" pos:column="60"> <block pos:line="135" pos:column="61">{
        <return pos:line="136" pos:column="9">return <expr><name pos:line="136" pos:column="16">APR_ENOSPC<pos:position pos:line="136" pos:column="26"/></name></expr>;<pos:position pos:line="136" pos:column="27"/></return>
    }<pos:position pos:line="137" pos:column="6"/></block></then></if>

    <return pos:line="139" pos:column="5">return <expr><name pos:line="139" pos:column="12">APR_SUCCESS<pos:position pos:line="139" pos:column="23"/></name></expr>;<pos:position pos:line="139" pos:column="24"/></return>
}<pos:position pos:line="140" pos:column="2"/></block></function></unit>
