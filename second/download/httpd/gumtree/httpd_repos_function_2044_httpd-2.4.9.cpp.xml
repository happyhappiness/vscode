<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2044_httpd-2.4.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">proxy_match_hostname<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">dirconn_entry<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">This<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">request_rec<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">r<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">host<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><name><name pos:line="3" pos:column="18">This<pos:position pos:line="3" pos:column="22"/></name><operator pos:line="3" pos:column="22">-&gt;<pos:position pos:line="3" pos:column="27"/></operator><name pos:line="3" pos:column="24">name<pos:position pos:line="3" pos:column="28"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">host2<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><call><name pos:line="4" pos:column="25">proxy_get_host_of_request<pos:position pos:line="4" pos:column="50"/></name><argument_list pos:line="4" pos:column="50">(<argument><expr><name pos:line="4" pos:column="51">r<pos:position pos:line="4" pos:column="52"/></name></expr></argument>)<pos:position pos:line="4" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="54"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">h2_len<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">h1_len<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">host<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">==<pos:position pos:line="8" pos:column="16"/></operator> <name pos:line="8" pos:column="17">NULL<pos:position pos:line="8" pos:column="21"/></name> <operator pos:line="8" pos:column="22">||<pos:position pos:line="8" pos:column="24"/></operator> <name pos:line="8" pos:column="25">host2<pos:position pos:line="8" pos:column="30"/></name> <operator pos:line="8" pos:column="31">==<pos:position pos:line="8" pos:column="33"/></operator> <name pos:line="8" pos:column="34">NULL<pos:position pos:line="8" pos:column="38"/></name></expr>)<pos:position pos:line="8" pos:column="39"/></condition><then pos:line="8" pos:column="39"> <block pos:line="8" pos:column="40">{
        <return pos:line="9" pos:column="9">return <expr><literal type="number" pos:line="9" pos:column="16">0<pos:position pos:line="9" pos:column="17"/></literal></expr>;<pos:position pos:line="9" pos:column="18"/></return> <comment type="block" pos:line="9" pos:column="19">/* oops! */</comment>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="12" pos:column="5">h2_len<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">strlen<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">host2<pos:position pos:line="12" pos:column="26"/></name></expr></argument>)<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="13" pos:column="5">h1_len<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <call><name pos:line="13" pos:column="14">strlen<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name pos:line="13" pos:column="21">host<pos:position pos:line="13" pos:column="25"/></name></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>

<cpp:if pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">if<pos:position pos:line="15" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="15" pos:column="5">0<pos:position pos:line="15" pos:column="6"/></literal></expr></cpp:if>
    struct apr_sockaddr_t *addr = *This-&gt;hostaddr;

    <comment type="block" pos:line="18" pos:column="5">/* Try to deal with multiple IP addr's for a host */</comment>
    while (addr) {
        if (addr-&gt;ipaddr_ptr == ? ? ? ? ? ? ? ? ? ? ? ? ?)
            return 1;
        addr = addr-&gt;next;
    }
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="26" pos:column="5">/* Ignore trailing dots in host2 comparison: */</comment>
    <while pos:line="27" pos:column="5">while <condition pos:line="27" pos:column="11">(<expr><name pos:line="27" pos:column="12">h2_len<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">&gt;<pos:position pos:line="27" pos:column="23"/></operator> <literal type="number" pos:line="27" pos:column="21">0<pos:position pos:line="27" pos:column="22"/></literal> <operator pos:line="27" pos:column="23">&amp;&amp;<pos:position pos:line="27" pos:column="33"/></operator> <name><name pos:line="27" pos:column="26">host2<pos:position pos:line="27" pos:column="31"/></name><index pos:line="27" pos:column="31">[<expr><name pos:line="27" pos:column="32">h2_len<pos:position pos:line="27" pos:column="38"/></name> <operator pos:line="27" pos:column="39">-<pos:position pos:line="27" pos:column="40"/></operator> <literal type="number" pos:line="27" pos:column="41">1<pos:position pos:line="27" pos:column="42"/></literal></expr>]<pos:position pos:line="27" pos:column="43"/></index></name> <operator pos:line="27" pos:column="44">==<pos:position pos:line="27" pos:column="46"/></operator> <literal type="char" pos:line="27" pos:column="47">'.'<pos:position pos:line="27" pos:column="50"/></literal></expr>)<pos:position pos:line="27" pos:column="51"/></condition> <block pos:line="27" pos:column="52">{
        <expr_stmt><expr><operator pos:line="28" pos:column="9">--<pos:position pos:line="28" pos:column="11"/></operator><name pos:line="28" pos:column="11">h2_len<pos:position pos:line="28" pos:column="17"/></name></expr>;<pos:position pos:line="28" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></while>
    <while pos:line="30" pos:column="5">while <condition pos:line="30" pos:column="11">(<expr><name pos:line="30" pos:column="12">h1_len<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">&gt;<pos:position pos:line="30" pos:column="23"/></operator> <literal type="number" pos:line="30" pos:column="21">0<pos:position pos:line="30" pos:column="22"/></literal> <operator pos:line="30" pos:column="23">&amp;&amp;<pos:position pos:line="30" pos:column="33"/></operator> <name><name pos:line="30" pos:column="26">host<pos:position pos:line="30" pos:column="30"/></name><index pos:line="30" pos:column="30">[<expr><name pos:line="30" pos:column="31">h1_len<pos:position pos:line="30" pos:column="37"/></name> <operator pos:line="30" pos:column="38">-<pos:position pos:line="30" pos:column="39"/></operator> <literal type="number" pos:line="30" pos:column="40">1<pos:position pos:line="30" pos:column="41"/></literal></expr>]<pos:position pos:line="30" pos:column="42"/></index></name> <operator pos:line="30" pos:column="43">==<pos:position pos:line="30" pos:column="45"/></operator> <literal type="char" pos:line="30" pos:column="46">'.'<pos:position pos:line="30" pos:column="49"/></literal></expr>)<pos:position pos:line="30" pos:column="50"/></condition> <block pos:line="30" pos:column="51">{
        <expr_stmt><expr><operator pos:line="31" pos:column="9">--<pos:position pos:line="31" pos:column="11"/></operator><name pos:line="31" pos:column="11">h1_len<pos:position pos:line="31" pos:column="17"/></name></expr>;<pos:position pos:line="31" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></while>
    <return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">h1_len<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">==<pos:position pos:line="33" pos:column="21"/></operator> <name pos:line="33" pos:column="22">h2_len<pos:position pos:line="33" pos:column="28"/></name>
        <operator pos:line="34" pos:column="9">&amp;&amp;<pos:position pos:line="34" pos:column="19"/></operator> <call><name pos:line="34" pos:column="12">strncasecmp<pos:position pos:line="34" pos:column="23"/></name><argument_list pos:line="34" pos:column="23">(<argument><expr><name pos:line="34" pos:column="24">host<pos:position pos:line="34" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="30">host2<pos:position pos:line="34" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="37">h1_len<pos:position pos:line="34" pos:column="43"/></name></expr></argument>)<pos:position pos:line="34" pos:column="44"/></argument_list></call> <operator pos:line="34" pos:column="45">==<pos:position pos:line="34" pos:column="47"/></operator> <literal type="number" pos:line="34" pos:column="48">0<pos:position pos:line="34" pos:column="49"/></literal></expr>;<pos:position pos:line="34" pos:column="50"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
