<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_656_httpd-2.2.16.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">yy_flex_realloc<pos:position pos:line="1" pos:column="29"/></name><argument_list pos:line="1" pos:column="29">( <argument><expr><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name> <operator pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></operator><name pos:line="1" pos:column="37">ptr<pos:position pos:line="1" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="1" pos:column="42">yy_size_t<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">size<pos:position pos:line="1" pos:column="56"/></name></expr></argument> )<pos:position pos:line="1" pos:column="58"/></argument_list>
<cpp:else pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">else<pos:position pos:line="2" pos:column="6"/></cpp:directive></cpp:else>
static <name pos:line="3" pos:column="8">void<pos:position pos:line="3" pos:column="12"/></name> <modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier><name pos:line="3" pos:column="14">yy_flex_realloc<pos:position pos:line="3" pos:column="29"/></name><argument_list pos:line="3" pos:column="29">( <argument><expr><name pos:line="3" pos:column="31">ptr<pos:position pos:line="3" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="36">size<pos:position pos:line="3" pos:column="40"/></name></expr></argument> )<pos:position pos:line="3" pos:column="42"/></argument_list>
<name pos:line="4" pos:column="1">void<pos:position pos:line="4" pos:column="5"/></name> <modifier pos:line="4" pos:column="6">*<pos:position pos:line="4" pos:column="7"/></modifier><name pos:line="4" pos:column="7">ptr<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">yy_size_t<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">size<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif>
        <block pos:line="7" pos:column="9">{
        <comment type="block" pos:line="8" pos:column="9">/* The cast to (char *) in the following accommodates both
         * implementations that use char* generic pointers, and those
         * that use void* generic pointers.  It works with the latter
         * because both ANSI C and C++ allow castless assignment from
         * any pointer type to void*, and deal with argument conversions
         * as though doing an assignment.
         */</comment>
        <return pos:line="15" pos:column="9">return <expr><operator pos:line="15" pos:column="16">(<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">void<pos:position pos:line="15" pos:column="21"/></name> <operator pos:line="15" pos:column="22">*<pos:position pos:line="15" pos:column="23"/></operator><operator pos:line="15" pos:column="23">)<pos:position pos:line="15" pos:column="24"/></operator> <call><name pos:line="15" pos:column="25">realloc<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">( <argument><expr><operator pos:line="15" pos:column="34">(<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="35">char<pos:position pos:line="15" pos:column="39"/></name> <operator pos:line="15" pos:column="40">*<pos:position pos:line="15" pos:column="41"/></operator><operator pos:line="15" pos:column="41">)<pos:position pos:line="15" pos:column="42"/></operator> <name pos:line="15" pos:column="43">ptr<pos:position pos:line="15" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="48">size<pos:position pos:line="15" pos:column="52"/></name></expr></argument> )<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="55"/></return>
        }<pos:position pos:line="16" pos:column="10"/></block></unit>
