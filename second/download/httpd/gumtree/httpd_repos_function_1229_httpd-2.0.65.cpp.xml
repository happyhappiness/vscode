<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1229_httpd-2.0.65.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">strtoff<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">apr_off_t<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">offset<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">nptr<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">char<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier><modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">endptr<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">int<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">base<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
   <expr_stmt><expr><name pos:line="4" pos:column="4">errno<pos:position pos:line="4" pos:column="9"/></name> <operator pos:line="4" pos:column="10">=<pos:position pos:line="4" pos:column="11"/></operator> <literal type="number" pos:line="4" pos:column="12">0<pos:position pos:line="4" pos:column="13"/></literal></expr>;<pos:position pos:line="4" pos:column="14"/></expr_stmt>
   <if pos:line="5" pos:column="4">if <condition pos:line="5" pos:column="7">(<expr><sizeof pos:line="5" pos:column="8">sizeof<argument_list pos:line="5" pos:column="14">(<argument><expr><name pos:line="5" pos:column="15">apr_off_t<pos:position pos:line="5" pos:column="24"/></name></expr></argument>)<pos:position pos:line="5" pos:column="25"/></argument_list></sizeof> <operator pos:line="5" pos:column="26">==<pos:position pos:line="5" pos:column="28"/></operator> <literal type="number" pos:line="5" pos:column="29">4<pos:position pos:line="5" pos:column="30"/></literal></expr>)<pos:position pos:line="5" pos:column="31"/></condition><then pos:line="5" pos:column="31"> <block pos:line="5" pos:column="32">{
       <expr_stmt><expr><operator pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></operator><name pos:line="6" pos:column="9">offset<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">=<pos:position pos:line="6" pos:column="17"/></operator> <call><name pos:line="6" pos:column="18">strtol<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">nptr<pos:position pos:line="6" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="31">endptr<pos:position pos:line="6" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="39">base<pos:position pos:line="6" pos:column="43"/></name></expr></argument>)<pos:position pos:line="6" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="45"/></expr_stmt>
   }<pos:position pos:line="7" pos:column="5"/></block></then>
   <else pos:line="8" pos:column="4">else <block pos:line="8" pos:column="9">{
       <expr_stmt><expr><operator pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></operator><name pos:line="9" pos:column="9">offset<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <call><name pos:line="9" pos:column="18">apr_strtoi64<pos:position pos:line="9" pos:column="30"/></name><argument_list pos:line="9" pos:column="30">(<argument><expr><name pos:line="9" pos:column="31">nptr<pos:position pos:line="9" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="37">endptr<pos:position pos:line="9" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="45">base<pos:position pos:line="9" pos:column="49"/></name></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="51"/></expr_stmt>
   }<pos:position pos:line="10" pos:column="5"/></block></else></if>
   <return pos:line="11" pos:column="4">return <expr><call><name pos:line="11" pos:column="11">APR_FROM_OS_ERROR<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><name pos:line="11" pos:column="29">errno<pos:position pos:line="11" pos:column="34"/></name></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></return>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
