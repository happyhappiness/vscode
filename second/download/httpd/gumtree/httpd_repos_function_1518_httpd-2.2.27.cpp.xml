<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1518_httpd-2.2.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type> <name pos:line="1" pos:column="21">add_pass_reverse<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">cmd_parms<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">cmd<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">void<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">dconf<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="67">const<pos:position pos:line="1" pos:column="72"/></specifier> <name pos:line="1" pos:column="73">char<pos:position pos:line="1" pos:column="77"/></name> <modifier pos:line="1" pos:column="78">*<pos:position pos:line="1" pos:column="79"/></modifier></type><name pos:line="1" pos:column="79">f<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>,
                                     <parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name pos:line="2" pos:column="44">char<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">r<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="53">const<pos:position pos:line="2" pos:column="58"/></specifier> <name pos:line="2" pos:column="59">char<pos:position pos:line="2" pos:column="63"/></name> <modifier pos:line="2" pos:column="64">*<pos:position pos:line="2" pos:column="65"/></modifier></type><name pos:line="2" pos:column="65">i<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="67"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">proxy_dir_conf<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">conf<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name pos:line="4" pos:column="28">dconf<pos:position pos:line="4" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
    struct <expr_stmt><expr><name pos:line="5" pos:column="12">proxy_alias<pos:position pos:line="5" pos:column="23"/></name> <operator pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></operator><operator pos:line="5" pos:column="25">new<pos:position pos:line="5" pos:column="28"/></operator></expr>;<pos:position pos:line="5" pos:column="29"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">fake<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">real<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">char<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">interp<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">cmd<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">-&gt;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="14">path<pos:position pos:line="10" pos:column="18"/></name></name> <operator pos:line="10" pos:column="19">==<pos:position pos:line="10" pos:column="21"/></operator> <name pos:line="10" pos:column="22">NULL<pos:position pos:line="10" pos:column="26"/></name></expr>)<pos:position pos:line="10" pos:column="27"/></condition><then pos:line="10" pos:column="27"> <block pos:line="10" pos:column="28">{
        <expr_stmt><expr><name pos:line="11" pos:column="9">fake<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <name pos:line="11" pos:column="16">f<pos:position pos:line="11" pos:column="17"/></name></expr>;<pos:position pos:line="11" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><name pos:line="12" pos:column="9">real<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <name pos:line="12" pos:column="16">r<pos:position pos:line="12" pos:column="17"/></name></expr>;<pos:position pos:line="12" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><name pos:line="13" pos:column="9">interp<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <name pos:line="13" pos:column="18">i<pos:position pos:line="13" pos:column="19"/></name></expr>;<pos:position pos:line="13" pos:column="20"/></expr_stmt>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">r<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">==<pos:position pos:line="14" pos:column="17"/></operator> <name pos:line="14" pos:column="18">NULL<pos:position pos:line="14" pos:column="22"/></name> <operator pos:line="14" pos:column="23">||<pos:position pos:line="14" pos:column="25"/></operator> <operator pos:line="14" pos:column="26">!<pos:position pos:line="14" pos:column="27"/></operator><call><name pos:line="14" pos:column="27">strcasecmp<pos:position pos:line="14" pos:column="37"/></name><argument_list pos:line="14" pos:column="37">(<argument><expr><name pos:line="14" pos:column="38">r<pos:position pos:line="14" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="41">"interpolate"<pos:position pos:line="14" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="56"/></condition><then pos:line="14" pos:column="56"> <block pos:line="14" pos:column="57">{
            <return pos:line="15" pos:column="13">return <expr><literal type="string" pos:line="15" pos:column="20">"ProxyPassReverse needs a path when not defined in a location"<pos:position pos:line="15" pos:column="82"/></literal></expr>;<pos:position pos:line="15" pos:column="83"/></return>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>
    }<pos:position pos:line="17" pos:column="6"/></block></then>
    <else pos:line="18" pos:column="5">else <block pos:line="18" pos:column="10">{
        <expr_stmt><expr><name pos:line="19" pos:column="9">fake<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <name><name pos:line="19" pos:column="16">cmd<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">-&gt;<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="21">path<pos:position pos:line="19" pos:column="25"/></name></name></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="20" pos:column="9">real<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <name pos:line="20" pos:column="16">f<pos:position pos:line="20" pos:column="17"/></name></expr>;<pos:position pos:line="20" pos:column="18"/></expr_stmt>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">r<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">&amp;&amp;<pos:position pos:line="21" pos:column="25"/></operator> <call><name pos:line="21" pos:column="18">strcasecmp<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">r<pos:position pos:line="21" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="32">"interpolate"<pos:position pos:line="21" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="47"/></condition><then pos:line="21" pos:column="47"> <block pos:line="21" pos:column="48">{
            <return pos:line="22" pos:column="13">return <expr><literal type="string" pos:line="22" pos:column="20">"ProxyPassReverse can not have a path when defined in a location"<pos:position pos:line="22" pos:column="85"/></literal></expr>;<pos:position pos:line="22" pos:column="86"/></return>
        }<pos:position pos:line="23" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="24" pos:column="9">interp<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <name pos:line="24" pos:column="18">r<pos:position pos:line="24" pos:column="19"/></name></expr>;<pos:position pos:line="24" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></else></if>

    <expr_stmt><expr><operator pos:line="27" pos:column="5">new<pos:position pos:line="27" pos:column="8"/></operator> <operator pos:line="27" pos:column="9">=<pos:position pos:line="27" pos:column="10"/></operator> <call><name pos:line="27" pos:column="11">apr_array_push<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name><name pos:line="27" pos:column="26">conf<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">-&gt;<pos:position pos:line="27" pos:column="35"/></operator><name pos:line="27" pos:column="32">raliases<pos:position pos:line="27" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="28" pos:column="5">new<pos:position pos:line="28" pos:column="8"/></operator><operator pos:line="28" pos:column="8">-&gt;<pos:position pos:line="28" pos:column="13"/></operator><name pos:line="28" pos:column="10">fake<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">=<pos:position pos:line="28" pos:column="16"/></operator> <name pos:line="28" pos:column="17">fake<pos:position pos:line="28" pos:column="21"/></name></expr>;<pos:position pos:line="28" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="29" pos:column="5">new<pos:position pos:line="29" pos:column="8"/></operator><operator pos:line="29" pos:column="8">-&gt;<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="10">real<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">=<pos:position pos:line="29" pos:column="16"/></operator> <name pos:line="29" pos:column="17">real<pos:position pos:line="29" pos:column="21"/></name></expr>;<pos:position pos:line="29" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="30" pos:column="5">new<pos:position pos:line="30" pos:column="8"/></operator><operator pos:line="30" pos:column="8">-&gt;<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="10">flags<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <ternary><condition><expr><name pos:line="30" pos:column="18">interp<pos:position pos:line="30" pos:column="24"/></name></expr> ?<pos:position pos:line="30" pos:column="26"/></condition><then pos:line="30" pos:column="26"> <expr><name pos:line="30" pos:column="27">PROXYPASS_INTERPOLATE<pos:position pos:line="30" pos:column="48"/></name></expr> <pos:position pos:line="30" pos:column="49"/></then><else pos:line="30" pos:column="49">: <expr><literal type="number" pos:line="30" pos:column="51">0<pos:position pos:line="30" pos:column="52"/></literal></expr></else></ternary></expr>;<pos:position pos:line="30" pos:column="53"/></expr_stmt>

    <return pos:line="32" pos:column="5">return <expr><name pos:line="32" pos:column="12">NULL<pos:position pos:line="32" pos:column="16"/></name></expr>;<pos:position pos:line="32" pos:column="17"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
