<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2663_httpd-2.2.23.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">delpair<pos:position pos:line="2" pos:column="8"/></name><argument_list pos:line="2" pos:column="8">(<argument><expr><name pos:line="2" pos:column="9">pag<pos:position pos:line="2" pos:column="12"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="14">key<pos:position pos:line="2" pos:column="17"/></name></expr></argument>)<pos:position pos:line="2" pos:column="18"/></argument_list>
<name pos:line="3" pos:column="1">char<pos:position pos:line="3" pos:column="5"/></name> <modifier pos:line="3" pos:column="6">*<pos:position pos:line="3" pos:column="7"/></modifier><name pos:line="3" pos:column="7">pag<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="4" pos:column="1">apr_sdbm_datum_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">key<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">register<pos:position pos:line="6" pos:column="17"/></specifier> <name pos:line="6" pos:column="18">int<pos:position pos:line="6" pos:column="21"/></name></type> <name pos:line="6" pos:column="22">n<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">register<pos:position pos:line="7" pos:column="17"/></specifier> <name pos:line="7" pos:column="18">int<pos:position pos:line="7" pos:column="21"/></name></type> <name pos:line="7" pos:column="22">i<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">register<pos:position pos:line="8" pos:column="17"/></specifier> <name pos:line="8" pos:column="18">short<pos:position pos:line="8" pos:column="23"/></name> <modifier pos:line="8" pos:column="24">*<pos:position pos:line="8" pos:column="25"/></modifier></type><name pos:line="8" pos:column="25">ino<pos:position pos:line="8" pos:column="28"/></name> <init pos:line="8" pos:column="29">= <expr><operator pos:line="8" pos:column="31">(<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="32">short<pos:position pos:line="8" pos:column="37"/></name> <operator pos:line="8" pos:column="38">*<pos:position pos:line="8" pos:column="39"/></operator><operator pos:line="8" pos:column="39">)<pos:position pos:line="8" pos:column="40"/></operator> <name pos:line="8" pos:column="41">pag<pos:position pos:line="8" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="45"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">(<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">n<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <name><name pos:line="10" pos:column="18">ino<pos:position pos:line="10" pos:column="21"/></name><index pos:line="10" pos:column="21">[<expr><literal type="number" pos:line="10" pos:column="22">0<pos:position pos:line="10" pos:column="23"/></literal></expr>]<pos:position pos:line="10" pos:column="24"/></index></name><operator pos:line="10" pos:column="24">)<pos:position pos:line="10" pos:column="25"/></operator> <operator pos:line="10" pos:column="26">==<pos:position pos:line="10" pos:column="28"/></operator> <literal type="number" pos:line="10" pos:column="29">0<pos:position pos:line="10" pos:column="30"/></literal></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></return></block></then></if>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">(<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">i<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <call><name pos:line="13" pos:column="18">seepair<pos:position pos:line="13" pos:column="25"/></name><argument_list pos:line="13" pos:column="25">(<argument><expr><name pos:line="13" pos:column="26">pag<pos:position pos:line="13" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="31">n<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="34">key<pos:position pos:line="13" pos:column="37"/></name><operator pos:line="13" pos:column="37">.<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="38">dptr<pos:position pos:line="13" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="44">key<pos:position pos:line="13" pos:column="47"/></name><operator pos:line="13" pos:column="47">.<pos:position pos:line="13" pos:column="48"/></operator><name pos:line="13" pos:column="48">dsize<pos:position pos:line="13" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></call><operator pos:line="13" pos:column="54">)<pos:position pos:line="13" pos:column="55"/></operator> <operator pos:line="13" pos:column="56">==<pos:position pos:line="13" pos:column="58"/></operator> <literal type="number" pos:line="13" pos:column="59">0<pos:position pos:line="13" pos:column="60"/></literal></expr>)<pos:position pos:line="13" pos:column="61"/></condition><then pos:line="13" pos:column="61">
		<block type="pseudo"><return pos:line="14" pos:column="17">return <expr><literal type="number" pos:line="14" pos:column="24">0<pos:position pos:line="14" pos:column="25"/></literal></expr>;<pos:position pos:line="14" pos:column="26"/></return></block></then></if>
<comment type="block" pos:line="15" pos:column="1">/*
 * found the key. if it is the last entry
 * [i.e. i == n - 1] we just adjust the entry count.
 * hard case: move all data down onto the deleted pair,
 * shift offsets onto deleted offsets, and adjust them.
 * [note: 0 &lt; i &lt; n]
 */</comment>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">i<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">&lt;<pos:position pos:line="22" pos:column="19"/></operator> <name pos:line="22" pos:column="17">n<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">-<pos:position pos:line="22" pos:column="20"/></operator> <literal type="number" pos:line="22" pos:column="21">1<pos:position pos:line="22" pos:column="22"/></literal></expr>)<pos:position pos:line="22" pos:column="23"/></condition><then pos:line="22" pos:column="23"> <block pos:line="22" pos:column="24">{
		<decl_stmt><decl><type><specifier pos:line="23" pos:column="17">register<pos:position pos:line="23" pos:column="25"/></specifier> <name pos:line="23" pos:column="26">int<pos:position pos:line="23" pos:column="29"/></name></type> <name pos:line="23" pos:column="30">m<pos:position pos:line="23" pos:column="31"/></name></decl>;<pos:position pos:line="23" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="24" pos:column="17">register<pos:position pos:line="24" pos:column="25"/></specifier> <name pos:line="24" pos:column="26">char<pos:position pos:line="24" pos:column="30"/></name> <modifier pos:line="24" pos:column="31">*<pos:position pos:line="24" pos:column="32"/></modifier></type><name pos:line="24" pos:column="32">dst<pos:position pos:line="24" pos:column="35"/></name> <init pos:line="24" pos:column="36">= <expr><name pos:line="24" pos:column="38">pag<pos:position pos:line="24" pos:column="41"/></name> <operator pos:line="24" pos:column="42">+<pos:position pos:line="24" pos:column="43"/></operator> <operator pos:line="24" pos:column="44">(<pos:position pos:line="24" pos:column="45"/></operator><ternary><condition><expr><name pos:line="24" pos:column="45">i<pos:position pos:line="24" pos:column="46"/></name> <operator pos:line="24" pos:column="47">==<pos:position pos:line="24" pos:column="49"/></operator> <literal type="number" pos:line="24" pos:column="50">1<pos:position pos:line="24" pos:column="51"/></literal></expr> ?<pos:position pos:line="24" pos:column="53"/></condition><then pos:line="24" pos:column="53"> <expr><name pos:line="24" pos:column="54">PBLKSIZ<pos:position pos:line="24" pos:column="61"/></name></expr> <pos:position pos:line="24" pos:column="62"/></then><else pos:line="24" pos:column="62">: <expr><name><name pos:line="24" pos:column="64">ino<pos:position pos:line="24" pos:column="67"/></name><index pos:line="24" pos:column="67">[<expr><name pos:line="24" pos:column="68">i<pos:position pos:line="24" pos:column="69"/></name> <operator pos:line="24" pos:column="70">-<pos:position pos:line="24" pos:column="71"/></operator> <literal type="number" pos:line="24" pos:column="72">1<pos:position pos:line="24" pos:column="73"/></literal></expr>]<pos:position pos:line="24" pos:column="74"/></index></name></expr></else></ternary><operator pos:line="24" pos:column="74">)<pos:position pos:line="24" pos:column="75"/></operator></expr></init></decl>;<pos:position pos:line="24" pos:column="76"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="25" pos:column="17">register<pos:position pos:line="25" pos:column="25"/></specifier> <name pos:line="25" pos:column="26">char<pos:position pos:line="25" pos:column="30"/></name> <modifier pos:line="25" pos:column="31">*<pos:position pos:line="25" pos:column="32"/></modifier></type><name pos:line="25" pos:column="32">src<pos:position pos:line="25" pos:column="35"/></name> <init pos:line="25" pos:column="36">= <expr><name pos:line="25" pos:column="38">pag<pos:position pos:line="25" pos:column="41"/></name> <operator pos:line="25" pos:column="42">+<pos:position pos:line="25" pos:column="43"/></operator> <name><name pos:line="25" pos:column="44">ino<pos:position pos:line="25" pos:column="47"/></name><index pos:line="25" pos:column="47">[<expr><name pos:line="25" pos:column="48">i<pos:position pos:line="25" pos:column="49"/></name> <operator pos:line="25" pos:column="50">+<pos:position pos:line="25" pos:column="51"/></operator> <literal type="number" pos:line="25" pos:column="52">1<pos:position pos:line="25" pos:column="53"/></literal></expr>]<pos:position pos:line="25" pos:column="54"/></index></name></expr></init></decl>;<pos:position pos:line="25" pos:column="55"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="26" pos:column="17">register<pos:position pos:line="26" pos:column="25"/></specifier> <name pos:line="26" pos:column="26">short<pos:position pos:line="26" pos:column="31"/></name></type> <name pos:line="26" pos:column="32">zoo<pos:position pos:line="26" pos:column="35"/></name> <init pos:line="26" pos:column="36">= <expr><call pos:line="26" pos:column="38">(<name pos:line="26" pos:column="39">short<pos:position pos:line="26" pos:column="44"/></name>) <argument_list pos:line="26" pos:column="46">(<argument><expr><name pos:line="26" pos:column="47">dst<pos:position pos:line="26" pos:column="50"/></name> <operator pos:line="26" pos:column="51">-<pos:position pos:line="26" pos:column="52"/></operator> <name pos:line="26" pos:column="53">src<pos:position pos:line="26" pos:column="56"/></name></expr></argument>)<pos:position pos:line="26" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="58"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="28" pos:column="17">debug<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><operator pos:line="28" pos:column="23">(<pos:position pos:line="28" pos:column="24"/></operator><literal type="string" pos:line="28" pos:column="24">"free-up %d "<pos:position pos:line="28" pos:column="37"/></literal><operator pos:line="28" pos:column="37">,<pos:position pos:line="28" pos:column="38"/></operator> <name pos:line="28" pos:column="39">zoo<pos:position pos:line="28" pos:column="42"/></name><operator pos:line="28" pos:column="42">)<pos:position pos:line="28" pos:column="43"/></operator></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="45"/></expr_stmt>
<comment type="block" pos:line="29" pos:column="1">/*
 * shift data/keys down
 */</comment>
		<expr_stmt><expr><name pos:line="32" pos:column="17">m<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <name><name pos:line="32" pos:column="21">ino<pos:position pos:line="32" pos:column="24"/></name><index pos:line="32" pos:column="24">[<expr><name pos:line="32" pos:column="25">i<pos:position pos:line="32" pos:column="26"/></name> <operator pos:line="32" pos:column="27">+<pos:position pos:line="32" pos:column="28"/></operator> <literal type="number" pos:line="32" pos:column="29">1<pos:position pos:line="32" pos:column="30"/></literal></expr>]<pos:position pos:line="32" pos:column="31"/></index></name> <operator pos:line="32" pos:column="32">-<pos:position pos:line="32" pos:column="33"/></operator> <name><name pos:line="32" pos:column="34">ino<pos:position pos:line="32" pos:column="37"/></name><index pos:line="32" pos:column="37">[<expr><name pos:line="32" pos:column="38">n<pos:position pos:line="32" pos:column="39"/></name></expr>]<pos:position pos:line="32" pos:column="40"/></index></name></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>

<cpp:undef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">undef<pos:position pos:line="34" pos:column="7"/></cpp:directive> <name pos:line="34" pos:column="8">DUFF<pos:position pos:line="34" pos:column="12"/></name></cpp:undef>	<comment type="block" pos:line="34" pos:column="17">/* just use memmove. it should be plenty fast. */</comment>
<cpp:ifdef pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">ifdef<pos:position pos:line="35" pos:column="7"/></cpp:directive> <name pos:line="35" pos:column="8">DUFF<pos:position pos:line="35" pos:column="12"/></name></cpp:ifdef>
<cpp:define pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">define<pos:position pos:line="36" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="36" pos:column="9">MOVB<pos:position pos:line="36" pos:column="13"/></name></cpp:macro> 	<cpp:value pos:line="36" pos:column="17">*--dst = *--src<pos:position pos:line="36" pos:column="32"/></cpp:value></cpp:define>

		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">m<pos:position pos:line="38" pos:column="22"/></name> <operator pos:line="38" pos:column="23">&gt;<pos:position pos:line="38" pos:column="27"/></operator> <literal type="number" pos:line="38" pos:column="25">0<pos:position pos:line="38" pos:column="26"/></literal></expr>)<pos:position pos:line="38" pos:column="27"/></condition><then pos:line="38" pos:column="27"> <block pos:line="38" pos:column="28">{
			<decl_stmt><decl><type><specifier pos:line="39" pos:column="25">register<pos:position pos:line="39" pos:column="33"/></specifier> <name pos:line="39" pos:column="34">int<pos:position pos:line="39" pos:column="37"/></name></type> <name pos:line="39" pos:column="38">loop<pos:position pos:line="39" pos:column="42"/></name> <init pos:line="39" pos:column="43">= <expr><operator pos:line="39" pos:column="45">(<pos:position pos:line="39" pos:column="46"/></operator><name pos:line="39" pos:column="46">m<pos:position pos:line="39" pos:column="47"/></name> <operator pos:line="39" pos:column="48">+<pos:position pos:line="39" pos:column="49"/></operator> <literal type="number" pos:line="39" pos:column="50">8<pos:position pos:line="39" pos:column="51"/></literal> <operator pos:line="39" pos:column="52">-<pos:position pos:line="39" pos:column="53"/></operator> <literal type="number" pos:line="39" pos:column="54">1<pos:position pos:line="39" pos:column="55"/></literal><operator pos:line="39" pos:column="55">)<pos:position pos:line="39" pos:column="56"/></operator> <operator pos:line="39" pos:column="57">&gt;&gt;<pos:position pos:line="39" pos:column="62"/></operator> <literal type="number" pos:line="39" pos:column="60">3<pos:position pos:line="39" pos:column="61"/></literal></expr></init></decl>;<pos:position pos:line="39" pos:column="62"/></decl_stmt>

			<switch pos:line="41" pos:column="25">switch <condition pos:line="41" pos:column="32">(<expr><name pos:line="41" pos:column="33">m<pos:position pos:line="41" pos:column="34"/></name> <operator pos:line="41" pos:column="35">&amp;<pos:position pos:line="41" pos:column="40"/></operator> <operator pos:line="41" pos:column="37">(<pos:position pos:line="41" pos:column="38"/></operator><literal type="number" pos:line="41" pos:column="38">8<pos:position pos:line="41" pos:column="39"/></literal> <operator pos:line="41" pos:column="40">-<pos:position pos:line="41" pos:column="41"/></operator> <literal type="number" pos:line="41" pos:column="42">1<pos:position pos:line="41" pos:column="43"/></literal><operator pos:line="41" pos:column="43">)<pos:position pos:line="41" pos:column="44"/></operator></expr>)<pos:position pos:line="41" pos:column="45"/></condition> <block pos:line="41" pos:column="46">{
			<case pos:line="42" pos:column="25">case <expr><literal type="number" pos:line="42" pos:column="30">0<pos:position pos:line="42" pos:column="31"/></literal></expr>:<pos:position pos:line="42" pos:column="32"/></case>	<do pos:line="42" pos:column="33">do <block pos:line="42" pos:column="36">{
				<expr_stmt><expr><name pos:line="43" pos:column="33">MOVB<pos:position pos:line="43" pos:column="37"/></name></expr>;<pos:position pos:line="43" pos:column="38"/></expr_stmt>	<case pos:line="43" pos:column="41">case <expr><literal type="number" pos:line="43" pos:column="46">7<pos:position pos:line="43" pos:column="47"/></literal></expr>:<pos:position pos:line="43" pos:column="48"/></case>	<expr_stmt><expr><name pos:line="43" pos:column="49">MOVB<pos:position pos:line="43" pos:column="53"/></name></expr>;<pos:position pos:line="43" pos:column="54"/></expr_stmt>
			<case pos:line="44" pos:column="25">case <expr><literal type="number" pos:line="44" pos:column="30">6<pos:position pos:line="44" pos:column="31"/></literal></expr>:<pos:position pos:line="44" pos:column="32"/></case>	<expr_stmt><expr><name pos:line="44" pos:column="33">MOVB<pos:position pos:line="44" pos:column="37"/></name></expr>;<pos:position pos:line="44" pos:column="38"/></expr_stmt>	<case pos:line="44" pos:column="41">case <expr><literal type="number" pos:line="44" pos:column="46">5<pos:position pos:line="44" pos:column="47"/></literal></expr>:<pos:position pos:line="44" pos:column="48"/></case>	<expr_stmt><expr><name pos:line="44" pos:column="49">MOVB<pos:position pos:line="44" pos:column="53"/></name></expr>;<pos:position pos:line="44" pos:column="54"/></expr_stmt>
			<case pos:line="45" pos:column="25">case <expr><literal type="number" pos:line="45" pos:column="30">4<pos:position pos:line="45" pos:column="31"/></literal></expr>:<pos:position pos:line="45" pos:column="32"/></case>	<expr_stmt><expr><name pos:line="45" pos:column="33">MOVB<pos:position pos:line="45" pos:column="37"/></name></expr>;<pos:position pos:line="45" pos:column="38"/></expr_stmt>	<case pos:line="45" pos:column="41">case <expr><literal type="number" pos:line="45" pos:column="46">3<pos:position pos:line="45" pos:column="47"/></literal></expr>:<pos:position pos:line="45" pos:column="48"/></case>	<expr_stmt><expr><name pos:line="45" pos:column="49">MOVB<pos:position pos:line="45" pos:column="53"/></name></expr>;<pos:position pos:line="45" pos:column="54"/></expr_stmt>
			<case pos:line="46" pos:column="25">case <expr><literal type="number" pos:line="46" pos:column="30">2<pos:position pos:line="46" pos:column="31"/></literal></expr>:<pos:position pos:line="46" pos:column="32"/></case>	<expr_stmt><expr><name pos:line="46" pos:column="33">MOVB<pos:position pos:line="46" pos:column="37"/></name></expr>;<pos:position pos:line="46" pos:column="38"/></expr_stmt>	<case pos:line="46" pos:column="41">case <expr><literal type="number" pos:line="46" pos:column="46">1<pos:position pos:line="46" pos:column="47"/></literal></expr>:<pos:position pos:line="46" pos:column="48"/></case>	<expr_stmt><expr><name pos:line="46" pos:column="49">MOVB<pos:position pos:line="46" pos:column="53"/></name></expr>;<pos:position pos:line="46" pos:column="54"/></expr_stmt>
				}<pos:position pos:line="47" pos:column="34"/></block> while <condition pos:line="47" pos:column="41">(<expr><operator pos:line="47" pos:column="42">--<pos:position pos:line="47" pos:column="44"/></operator><name pos:line="47" pos:column="44">loop<pos:position pos:line="47" pos:column="48"/></name></expr>)<pos:position pos:line="47" pos:column="49"/></condition>;<pos:position pos:line="47" pos:column="50"/></do>
			}<pos:position pos:line="48" pos:column="26"/></block></switch>
		}<pos:position pos:line="49" pos:column="18"/></block></then></if>
<cpp:else pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">else<pos:position pos:line="50" pos:column="6"/></cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="51" pos:column="17">dst<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">-=<pos:position pos:line="51" pos:column="23"/></operator> <name pos:line="51" pos:column="24">m<pos:position pos:line="51" pos:column="25"/></name></expr>;<pos:position pos:line="51" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><name pos:line="52" pos:column="17">src<pos:position pos:line="52" pos:column="20"/></name> <operator pos:line="52" pos:column="21">-=<pos:position pos:line="52" pos:column="23"/></operator> <name pos:line="52" pos:column="24">m<pos:position pos:line="52" pos:column="25"/></name></expr>;<pos:position pos:line="52" pos:column="26"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">memmove<pos:position pos:line="53" pos:column="24"/></name><argument_list pos:line="53" pos:column="24">(<argument><expr><name pos:line="53" pos:column="25">dst<pos:position pos:line="53" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="30">src<pos:position pos:line="53" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="35">m<pos:position pos:line="53" pos:column="36"/></name></expr></argument>)<pos:position pos:line="53" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif<pos:position pos:line="54" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="56" pos:column="1">/*
 * adjust offset index up
 */</comment>
		<while pos:line="59" pos:column="17">while <condition pos:line="59" pos:column="23">(<expr><name pos:line="59" pos:column="24">i<pos:position pos:line="59" pos:column="25"/></name> <operator pos:line="59" pos:column="26">&lt;<pos:position pos:line="59" pos:column="30"/></operator> <name pos:line="59" pos:column="28">n<pos:position pos:line="59" pos:column="29"/></name> <operator pos:line="59" pos:column="30">-<pos:position pos:line="59" pos:column="31"/></operator> <literal type="number" pos:line="59" pos:column="32">1<pos:position pos:line="59" pos:column="33"/></literal></expr>)<pos:position pos:line="59" pos:column="34"/></condition> <block pos:line="59" pos:column="35">{
			<expr_stmt><expr><name><name pos:line="60" pos:column="25">ino<pos:position pos:line="60" pos:column="28"/></name><index pos:line="60" pos:column="28">[<expr><name pos:line="60" pos:column="29">i<pos:position pos:line="60" pos:column="30"/></name></expr>]<pos:position pos:line="60" pos:column="31"/></index></name> <operator pos:line="60" pos:column="32">=<pos:position pos:line="60" pos:column="33"/></operator> <name><name pos:line="60" pos:column="34">ino<pos:position pos:line="60" pos:column="37"/></name><index pos:line="60" pos:column="37">[<expr><name pos:line="60" pos:column="38">i<pos:position pos:line="60" pos:column="39"/></name> <operator pos:line="60" pos:column="40">+<pos:position pos:line="60" pos:column="41"/></operator> <literal type="number" pos:line="60" pos:column="42">2<pos:position pos:line="60" pos:column="43"/></literal></expr>]<pos:position pos:line="60" pos:column="44"/></index></name> <operator pos:line="60" pos:column="45">+<pos:position pos:line="60" pos:column="46"/></operator> <name pos:line="60" pos:column="47">zoo<pos:position pos:line="60" pos:column="50"/></name></expr>;<pos:position pos:line="60" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name pos:line="61" pos:column="25">i<pos:position pos:line="61" pos:column="26"/></name><operator pos:line="61" pos:column="26">++<pos:position pos:line="61" pos:column="28"/></operator></expr>;<pos:position pos:line="61" pos:column="29"/></expr_stmt>
		}<pos:position pos:line="62" pos:column="18"/></block></while>
	}<pos:position pos:line="63" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="64" pos:column="9">ino<pos:position pos:line="64" pos:column="12"/></name><index pos:line="64" pos:column="12">[<expr><literal type="number" pos:line="64" pos:column="13">0<pos:position pos:line="64" pos:column="14"/></literal></expr>]<pos:position pos:line="64" pos:column="15"/></index></name> <operator pos:line="64" pos:column="16">-=<pos:position pos:line="64" pos:column="18"/></operator> <literal type="number" pos:line="64" pos:column="19">2<pos:position pos:line="64" pos:column="20"/></literal></expr>;<pos:position pos:line="64" pos:column="21"/></expr_stmt>
	<return pos:line="65" pos:column="9">return <expr><literal type="number" pos:line="65" pos:column="16">1<pos:position pos:line="65" pos:column="17"/></literal></expr>;<pos:position pos:line="65" pos:column="18"/></return>
}<pos:position pos:line="66" pos:column="2"/></block></unit>
