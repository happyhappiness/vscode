<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_6039.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">gset_decode_next<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">gset_decoder<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">decoder<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">apr_uint64_t<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">phash<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="81"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_uint64_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">flex<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><literal type="number" pos:line="3" pos:column="25">0<pos:position pos:line="3" pos:column="26"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="28">fixed<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><literal type="number" pos:line="3" pos:column="36">0<pos:position pos:line="3" pos:column="37"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="39">delta<pos:position pos:line="3" pos:column="44"/></name></decl>;<pos:position pos:line="3" pos:column="45"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">i<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
    
    <comment type="block" pos:line="6" pos:column="5">/* read 1 bits until we encounter 0, then read log2n(diary-P) bits.
     * On a malformed bit-string, this will not fail, but produce results
     * which are pbly too large. Luckily, the diary will modulo the hash.
     */</comment>
    <while pos:line="10" pos:column="5">while <condition pos:line="10" pos:column="11">(<expr><literal type="number" pos:line="10" pos:column="12">1<pos:position pos:line="10" pos:column="13"/></literal></expr>)<pos:position pos:line="10" pos:column="14"/></condition> <block pos:line="10" pos:column="15">{
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">bit<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><call><name pos:line="11" pos:column="19">gset_decode_next_bit<pos:position pos:line="11" pos:column="39"/></name><argument_list pos:line="11" pos:column="39">(<argument><expr><name pos:line="11" pos:column="40">decoder<pos:position pos:line="11" pos:column="47"/></name></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="49"/></decl_stmt>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">bit<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">==<pos:position pos:line="12" pos:column="19"/></operator> <operator pos:line="12" pos:column="20">-<pos:position pos:line="12" pos:column="21"/></operator><literal type="number" pos:line="12" pos:column="21">1<pos:position pos:line="12" pos:column="22"/></literal></expr>)<pos:position pos:line="12" pos:column="23"/></condition><then pos:line="12" pos:column="23"> <block pos:line="12" pos:column="24">{
            <return pos:line="13" pos:column="13">return <expr><name pos:line="13" pos:column="20">APR_EINVAL<pos:position pos:line="13" pos:column="30"/></name></expr>;<pos:position pos:line="13" pos:column="31"/></return>
        }<pos:position pos:line="14" pos:column="10"/></block></then></if>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">bit<pos:position pos:line="15" pos:column="17"/></name></expr>)<pos:position pos:line="15" pos:column="18"/></condition><then pos:line="15" pos:column="18"> <block pos:line="15" pos:column="19">{
            <break pos:line="16" pos:column="13">break;<pos:position pos:line="16" pos:column="19"/></break>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="18" pos:column="9">++<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">flex<pos:position pos:line="18" pos:column="15"/></name></expr>;<pos:position pos:line="18" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></while>
    
    <for pos:line="21" pos:column="5">for <control pos:line="21" pos:column="9">(<init><expr><name pos:line="21" pos:column="10">i<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <literal type="number" pos:line="21" pos:column="14">0<pos:position pos:line="21" pos:column="15"/></literal></expr>;<pos:position pos:line="21" pos:column="16"/></init> <condition><expr><name pos:line="21" pos:column="17">i<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">&lt;<pos:position pos:line="21" pos:column="23"/></operator> <name><name pos:line="21" pos:column="21">decoder<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">-&gt;<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="30">log2p<pos:position pos:line="21" pos:column="35"/></name></name></expr>;<pos:position pos:line="21" pos:column="36"/></condition> <incr><expr><operator pos:line="21" pos:column="37">++<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="39">i<pos:position pos:line="21" pos:column="40"/></name></expr></incr>)<pos:position pos:line="21" pos:column="41"/></control> <block pos:line="21" pos:column="42">{
        <decl_stmt><decl><type><name pos:line="22" pos:column="9">int<pos:position pos:line="22" pos:column="12"/></name></type> <name pos:line="22" pos:column="13">bit<pos:position pos:line="22" pos:column="16"/></name> <init pos:line="22" pos:column="17">= <expr><call><name pos:line="22" pos:column="19">gset_decode_next_bit<pos:position pos:line="22" pos:column="39"/></name><argument_list pos:line="22" pos:column="39">(<argument><expr><name pos:line="22" pos:column="40">decoder<pos:position pos:line="22" pos:column="47"/></name></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="49"/></decl_stmt>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">bit<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">==<pos:position pos:line="23" pos:column="19"/></operator> <operator pos:line="23" pos:column="20">-<pos:position pos:line="23" pos:column="21"/></operator><literal type="number" pos:line="23" pos:column="21">1<pos:position pos:line="23" pos:column="22"/></literal></expr>)<pos:position pos:line="23" pos:column="23"/></condition><then pos:line="23" pos:column="23"> <block pos:line="23" pos:column="24">{
            <return pos:line="24" pos:column="13">return <expr><name pos:line="24" pos:column="20">APR_EINVAL<pos:position pos:line="24" pos:column="30"/></name></expr>;<pos:position pos:line="24" pos:column="31"/></return>
        }<pos:position pos:line="25" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="26" pos:column="9">fixed<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <operator pos:line="26" pos:column="17">(<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="18">fixed<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">&lt;&lt;<pos:position pos:line="26" pos:column="32"/></operator> <literal type="number" pos:line="26" pos:column="27">1<pos:position pos:line="26" pos:column="28"/></literal><operator pos:line="26" pos:column="28">)<pos:position pos:line="26" pos:column="29"/></operator> <operator pos:line="26" pos:column="30">|<pos:position pos:line="26" pos:column="31"/></operator> <name pos:line="26" pos:column="32">bit<pos:position pos:line="26" pos:column="35"/></name></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></for>
    
    <expr_stmt><expr><name pos:line="29" pos:column="5">delta<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">=<pos:position pos:line="29" pos:column="12"/></operator> <operator pos:line="29" pos:column="13">(<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">flex<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">&lt;&lt;<pos:position pos:line="29" pos:column="27"/></operator> <name><name pos:line="29" pos:column="22">decoder<pos:position pos:line="29" pos:column="29"/></name><operator pos:line="29" pos:column="29">-&gt;<pos:position pos:line="29" pos:column="34"/></operator><name pos:line="29" pos:column="31">log2p<pos:position pos:line="29" pos:column="36"/></name></name><operator pos:line="29" pos:column="36">)<pos:position pos:line="29" pos:column="37"/></operator> <operator pos:line="29" pos:column="38">|<pos:position pos:line="29" pos:column="39"/></operator> <name pos:line="29" pos:column="40">fixed<pos:position pos:line="29" pos:column="45"/></name></expr>;<pos:position pos:line="29" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="30" pos:column="5">*<pos:position pos:line="30" pos:column="6"/></operator><name pos:line="30" pos:column="6">phash<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <name pos:line="30" pos:column="14">delta<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">+<pos:position pos:line="30" pos:column="21"/></operator> <name><name pos:line="30" pos:column="22">decoder<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">-&gt;<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="31">last_val<pos:position pos:line="30" pos:column="39"/></name></name></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">decoder<pos:position pos:line="31" pos:column="12"/></name><operator pos:line="31" pos:column="12">-&gt;<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="14">last_val<pos:position pos:line="31" pos:column="22"/></name></name> <operator pos:line="31" pos:column="23">=<pos:position pos:line="31" pos:column="24"/></operator> <operator pos:line="31" pos:column="25">*<pos:position pos:line="31" pos:column="26"/></operator><name pos:line="31" pos:column="26">phash<pos:position pos:line="31" pos:column="31"/></name></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt>
    
    <comment type="block" pos:line="33" pos:column="5">/* Intentional no APLOGNO */</comment>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">ap_log_perror<pos:position pos:line="34" pos:column="18"/></name><argument_list pos:line="34" pos:column="18">(<argument><expr><name pos:line="34" pos:column="19">APLOG_MARK<pos:position pos:line="34" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="31">GCSLOG_LEVEL<pos:position pos:line="34" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="45">0<pos:position pos:line="34" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="48">decoder<pos:position pos:line="34" pos:column="55"/></name><operator pos:line="34" pos:column="55">-&gt;<pos:position pos:line="34" pos:column="60"/></operator><name pos:line="34" pos:column="57">pool<pos:position pos:line="34" pos:column="61"/></name></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="35" pos:column="19">"h2_push_diary_digest_dec: val=%"<pos:position pos:line="35" pos:column="52"/></literal><name pos:line="35" pos:column="52">APR_UINT64_T_HEX_FMT<pos:position pos:line="35" pos:column="72"/></name><literal type="string" pos:line="35" pos:column="72">", delta=%"<pos:position pos:line="35" pos:column="83"/></literal>
                  <name pos:line="36" pos:column="19">APR_UINT64_T_HEX_FMT<pos:position pos:line="36" pos:column="39"/></name><literal type="string" pos:line="36" pos:column="39">", flex=%d, fixed=%"<pos:position pos:line="36" pos:column="59"/></literal><name pos:line="36" pos:column="59">APR_UINT64_T_HEX_FMT<pos:position pos:line="36" pos:column="79"/></name></expr></argument>, 
                  <argument><expr><operator pos:line="37" pos:column="19">*<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="20">phash<pos:position pos:line="37" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="27">delta<pos:position pos:line="37" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="34">(<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="35">int<pos:position pos:line="37" pos:column="38"/></name><operator pos:line="37" pos:column="38">)<pos:position pos:line="37" pos:column="39"/></operator><name pos:line="37" pos:column="39">flex<pos:position pos:line="37" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="45">fixed<pos:position pos:line="37" pos:column="50"/></name></expr></argument>)<pos:position pos:line="37" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="52"/></expr_stmt>
                  
    <return pos:line="39" pos:column="5">return <expr><name pos:line="39" pos:column="12">APR_SUCCESS<pos:position pos:line="39" pos:column="23"/></name></expr>;<pos:position pos:line="39" pos:column="24"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
