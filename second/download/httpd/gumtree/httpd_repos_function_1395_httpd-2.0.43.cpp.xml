<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1395_httpd-2.0.43.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">util_ald_strdup<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">s<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">APR_HAS_SHARED_MEMORY<pos:position pos:line="3" pos:column="26"/></name></expr></cpp:if>
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">util_ldap_shm<pos:position pos:line="4" pos:column="22"/></name></expr>)<pos:position pos:line="4" pos:column="23"/></condition><then pos:line="4" pos:column="23"> <block pos:line="4" pos:column="24">{
        <decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">buf<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><operator pos:line="5" pos:column="21">(<pos:position pos:line="5" pos:column="22"/></operator><name pos:line="5" pos:column="22">char<pos:position pos:line="5" pos:column="26"/></name> <operator pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></operator><operator pos:line="5" pos:column="28">)<pos:position pos:line="5" pos:column="29"/></operator><call><name pos:line="5" pos:column="29">apr_rmm_addr_get<pos:position pos:line="5" pos:column="45"/></name><argument_list pos:line="5" pos:column="45">(<argument><expr><name pos:line="5" pos:column="46">util_ldap_rmm<pos:position pos:line="5" pos:column="59"/></name></expr></argument>, <argument><expr><call><name pos:line="5" pos:column="61">apr_rmm_calloc<pos:position pos:line="5" pos:column="75"/></name><argument_list pos:line="5" pos:column="75">(<argument><expr><name pos:line="5" pos:column="76">util_ldap_rmm<pos:position pos:line="5" pos:column="89"/></name></expr></argument>, <argument><expr><call><name pos:line="5" pos:column="91">strlen<pos:position pos:line="5" pos:column="97"/></name><argument_list pos:line="5" pos:column="97">(<argument><expr><name pos:line="5" pos:column="98">s<pos:position pos:line="5" pos:column="99"/></name></expr></argument>)<pos:position pos:line="5" pos:column="100"/></argument_list></call><operator pos:line="5" pos:column="100">+<pos:position pos:line="5" pos:column="101"/></operator><literal type="number" pos:line="5" pos:column="101">1<pos:position pos:line="5" pos:column="102"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="103"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="104"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="105"/></decl_stmt>
        <if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">buf<pos:position pos:line="6" pos:column="16"/></name></expr>)<pos:position pos:line="6" pos:column="17"/></condition><then pos:line="6" pos:column="17"> <block pos:line="6" pos:column="18">{
            <expr_stmt><expr><call><name pos:line="7" pos:column="13">strcpy<pos:position pos:line="7" pos:column="19"/></name><argument_list pos:line="7" pos:column="19">(<argument><expr><name pos:line="7" pos:column="20">buf<pos:position pos:line="7" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="25">s<pos:position pos:line="7" pos:column="26"/></name></expr></argument>)<pos:position pos:line="7" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="28"/></expr_stmt>
            <return pos:line="8" pos:column="13">return <expr><name pos:line="8" pos:column="20">buf<pos:position pos:line="8" pos:column="23"/></name></expr>;<pos:position pos:line="8" pos:column="24"/></return>
        }<pos:position pos:line="9" pos:column="10"/></block></then>
        <else pos:line="10" pos:column="9">else <block pos:line="10" pos:column="14">{
            <return pos:line="11" pos:column="13">return <expr><name pos:line="11" pos:column="20">NULL<pos:position pos:line="11" pos:column="24"/></name></expr>;<pos:position pos:line="11" pos:column="25"/></return>
        }<pos:position pos:line="12" pos:column="10"/></block></else></if>
    }<pos:position pos:line="13" pos:column="6"/></block></then> <else pos:line="13" pos:column="7">else <block pos:line="13" pos:column="12">{
        <return pos:line="14" pos:column="9">return <expr><call><name pos:line="14" pos:column="16">strdup<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">s<pos:position pos:line="14" pos:column="24"/></name></expr></argument>)<pos:position pos:line="14" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="26"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></else></if>
<cpp:else pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">else<pos:position pos:line="16" pos:column="6"/></cpp:directive></cpp:else>
    <return pos:line="17" pos:column="5">return <expr><call><name pos:line="17" pos:column="12">strdup<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">s<pos:position pos:line="17" pos:column="20"/></name></expr></argument>)<pos:position pos:line="17" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="22"/></return>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
