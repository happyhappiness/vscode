<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2302_httpd-2.2.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">mpm_nt_eventlog_stderr_open<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">argv0<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">apr_pool_t<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">p<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">SECURITY_ATTRIBUTES<pos:position pos:line="3" pos:column="24"/></name></type> <name pos:line="3" pos:column="25">sa<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">HANDLE<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">hProc<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><call><name pos:line="4" pos:column="20">GetCurrentProcess<pos:position pos:line="4" pos:column="37"/></name><argument_list pos:line="4" pos:column="37">()<pos:position pos:line="4" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">HANDLE<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">hPipeRead<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><name pos:line="5" pos:column="24">NULL<pos:position pos:line="5" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">HANDLE<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">hPipeWrite<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><name pos:line="6" pos:column="25">NULL<pos:position pos:line="6" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">HANDLE<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">hDup<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><name pos:line="7" pos:column="19">NULL<pos:position pos:line="7" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">DWORD<pos:position pos:line="8" pos:column="10"/></name></type>  <name pos:line="8" pos:column="12">threadid<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_file_t<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">eventlog_file<pos:position pos:line="9" pos:column="30"/></name></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_file_t<pos:position pos:line="10" pos:column="15"/></name> <modifier pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></modifier></type><name pos:line="10" pos:column="17">stderr_file<pos:position pos:line="10" pos:column="28"/></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>

    <expr_stmt><expr><name pos:line="12" pos:column="5">display_name<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <name pos:line="12" pos:column="20">argv0<pos:position pos:line="12" pos:column="25"/></name></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>

    <comment type="block" pos:line="14" pos:column="5">/* Create a pipe to send stderr messages to the system error log.
     *
     * _dup2() duplicates the write handle inheritable for us.
     */</comment>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">sa<pos:position pos:line="18" pos:column="7"/></name><operator pos:line="18" pos:column="7">.<pos:position pos:line="18" pos:column="8"/></operator><name pos:line="18" pos:column="8">nLength<pos:position pos:line="18" pos:column="15"/></name></name> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <sizeof pos:line="18" pos:column="18">sizeof<argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">sa<pos:position pos:line="18" pos:column="27"/></name></expr></argument>)<pos:position pos:line="18" pos:column="28"/></argument_list></sizeof></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">sa<pos:position pos:line="19" pos:column="7"/></name><operator pos:line="19" pos:column="7">.<pos:position pos:line="19" pos:column="8"/></operator><name pos:line="19" pos:column="8">lpSecurityDescriptor<pos:position pos:line="19" pos:column="28"/></name></name> <operator pos:line="19" pos:column="29">=<pos:position pos:line="19" pos:column="30"/></operator> <name pos:line="19" pos:column="31">NULL<pos:position pos:line="19" pos:column="35"/></name></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">sa<pos:position pos:line="20" pos:column="7"/></name><operator pos:line="20" pos:column="7">.<pos:position pos:line="20" pos:column="8"/></operator><name pos:line="20" pos:column="8">bInheritHandle<pos:position pos:line="20" pos:column="22"/></name></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <name pos:line="20" pos:column="25">FALSE<pos:position pos:line="20" pos:column="30"/></name></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">CreatePipe<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><operator pos:line="21" pos:column="16">&amp;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="17">hPipeRead<pos:position pos:line="21" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="28">&amp;<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="29">hPipeWrite<pos:position pos:line="21" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="41">NULL<pos:position pos:line="21" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="47">0<pos:position pos:line="21" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">ap_assert<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">hPipeRead<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">&amp;&amp;<pos:position pos:line="22" pos:column="35"/></operator> <name pos:line="22" pos:column="28">hPipeWrite<pos:position pos:line="22" pos:column="38"/></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><name pos:line="24" pos:column="5">stderr_ready<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">=<pos:position pos:line="24" pos:column="19"/></operator> <call><name pos:line="24" pos:column="20">CreateEvent<pos:position pos:line="24" pos:column="31"/></name><argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">NULL<pos:position pos:line="24" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="38">FALSE<pos:position pos:line="24" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="45">FALSE<pos:position pos:line="24" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="52">NULL<pos:position pos:line="24" pos:column="56"/></name></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><name pos:line="25" pos:column="5">stderr_thread<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">=<pos:position pos:line="25" pos:column="20"/></operator> <call><name pos:line="25" pos:column="21">CreateThread<pos:position pos:line="25" pos:column="33"/></name><argument_list pos:line="25" pos:column="33">(<argument><expr><name pos:line="25" pos:column="34">NULL<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="40">0<pos:position pos:line="25" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="43">service_stderr_thread<pos:position pos:line="25" pos:column="64"/></name></expr></argument>,
                                 <argument><expr><operator pos:line="26" pos:column="34">(<pos:position pos:line="26" pos:column="35"/></operator><name pos:line="26" pos:column="35">LPVOID<pos:position pos:line="26" pos:column="41"/></name><operator pos:line="26" pos:column="41">)<pos:position pos:line="26" pos:column="42"/></operator> <name pos:line="26" pos:column="43">hPipeRead<pos:position pos:line="26" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="54">0<pos:position pos:line="26" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="26" pos:column="57">&amp;<pos:position pos:line="26" pos:column="62"/></operator><name pos:line="26" pos:column="58">threadid<pos:position pos:line="26" pos:column="66"/></name></expr></argument>)<pos:position pos:line="26" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">ap_assert<pos:position pos:line="27" pos:column="14"/></name><argument_list pos:line="27" pos:column="14">(<argument><expr><name pos:line="27" pos:column="15">stderr_ready<pos:position pos:line="27" pos:column="27"/></name> <operator pos:line="27" pos:column="28">&amp;&amp;<pos:position pos:line="27" pos:column="38"/></operator> <name pos:line="27" pos:column="31">stderr_thread<pos:position pos:line="27" pos:column="44"/></name></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">WaitForSingleObject<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">stderr_ready<pos:position pos:line="29" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="39">INFINITE<pos:position pos:line="29" pos:column="47"/></name></expr></argument>)<pos:position pos:line="29" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="49"/></expr_stmt>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><operator pos:line="31" pos:column="9">(<pos:position pos:line="31" pos:column="10"/></operator><call><name pos:line="31" pos:column="10">apr_file_open_stderr<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><operator pos:line="31" pos:column="31">&amp;<pos:position pos:line="31" pos:column="36"/></operator><name pos:line="31" pos:column="32">stderr_file<pos:position pos:line="31" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="45">p<pos:position pos:line="31" pos:column="46"/></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call> 
             <operator pos:line="32" pos:column="14">==<pos:position pos:line="32" pos:column="16"/></operator> <name pos:line="32" pos:column="17">APR_SUCCESS<pos:position pos:line="32" pos:column="28"/></name><operator pos:line="32" pos:column="28">)<pos:position pos:line="32" pos:column="29"/></operator>
     <operator pos:line="33" pos:column="6">&amp;&amp;<pos:position pos:line="33" pos:column="16"/></operator> <operator pos:line="33" pos:column="9">(<pos:position pos:line="33" pos:column="10"/></operator><call><name pos:line="33" pos:column="10">apr_os_file_put<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">(<argument><expr><operator pos:line="33" pos:column="26">&amp;<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="27">eventlog_file<pos:position pos:line="33" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="42">&amp;<pos:position pos:line="33" pos:column="47"/></operator><name pos:line="33" pos:column="43">hPipeWrite<pos:position pos:line="33" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="55">APR_WRITE<pos:position pos:line="33" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="66">p<pos:position pos:line="33" pos:column="67"/></name></expr></argument>)<pos:position pos:line="33" pos:column="68"/></argument_list></call>
             <operator pos:line="34" pos:column="14">==<pos:position pos:line="34" pos:column="16"/></operator> <name pos:line="34" pos:column="17">APR_SUCCESS<pos:position pos:line="34" pos:column="28"/></name><operator pos:line="34" pos:column="28">)<pos:position pos:line="34" pos:column="29"/></operator></expr>)<pos:position pos:line="34" pos:column="30"/></condition><then pos:line="34" pos:column="30">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="9">apr_file_dup2<pos:position pos:line="35" pos:column="22"/></name><argument_list pos:line="35" pos:column="22">(<argument><expr><name pos:line="35" pos:column="23">stderr_file<pos:position pos:line="35" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="36">eventlog_file<pos:position pos:line="35" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="51">p<pos:position pos:line="35" pos:column="52"/></name></expr></argument>)<pos:position pos:line="35" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="54"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="37" pos:column="5">/* The code above _will_ corrupt the StdHandle...
     * and we must do so anyways.  We set this up only
     * after we initialized the posix stderr API.
     */</comment>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">ap_open_stderr_log<pos:position pos:line="41" pos:column="23"/></name><argument_list pos:line="41" pos:column="23">(<argument><expr><name pos:line="41" pos:column="24">p<pos:position pos:line="41" pos:column="25"/></name></expr></argument>)<pos:position pos:line="41" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
