<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3150_httpd-2.2.22.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">XML_LChar<pos:position pos:line="1" pos:column="16"/></name> <modifier pos:line="1" pos:column="17">*<pos:position pos:line="1" pos:column="18"/></modifier> <name pos:line="1" pos:column="19">XMLCALL<pos:position pos:line="1" pos:column="26"/></name></type>
<name pos:line="2" pos:column="1">XML_ExpatVersion<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">void<pos:position pos:line="2" pos:column="22"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="23"/></parameter_list> <block pos:line="2" pos:column="24">{

  <comment type="block" pos:line="4" pos:column="3">/* V1 is used to string-ize the version number. However, it would
     string-ize the actual version macro *names* unless we get them
     substituted before being passed to V1. CPP is defined to expand
     a macro, then rescan for more expansions. Thus, we use V2 to expand
     the version macros, then CPP will expand the resulting V1() macro
     with the correct numerals. */</comment>
  <comment type="block" pos:line="10" pos:column="3">/* ### I'm assuming cpp is portable in this respect... */</comment>

<cpp:define pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">define<pos:position pos:line="12" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="12" pos:column="9">V1<pos:position pos:line="12" pos:column="11"/></name><parameter_list pos:line="12" pos:column="11">(<parameter><type><name pos:line="12" pos:column="12">a<pos:position pos:line="12" pos:column="13"/></name></type></parameter>,<parameter><type><name pos:line="12" pos:column="14">b<pos:position pos:line="12" pos:column="15"/></name></type></parameter>,<parameter><type><name pos:line="12" pos:column="16">c<pos:position pos:line="12" pos:column="17"/></name></type></parameter>)<pos:position pos:line="12" pos:column="18"/></parameter_list></cpp:macro> <cpp:value pos:line="12" pos:column="19">XML_L(#a)XML_L(".")XML_L(#b)XML_L(".")XML_L(#c)<pos:position pos:line="12" pos:column="66"/></cpp:value></cpp:define>
<cpp:define pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">define<pos:position pos:line="13" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="13" pos:column="9">V2<pos:position pos:line="13" pos:column="11"/></name><parameter_list pos:line="13" pos:column="11">(<parameter><type><name pos:line="13" pos:column="12">a<pos:position pos:line="13" pos:column="13"/></name></type></parameter>,<parameter><type><name pos:line="13" pos:column="14">b<pos:position pos:line="13" pos:column="15"/></name></type></parameter>,<parameter><type><name pos:line="13" pos:column="16">c<pos:position pos:line="13" pos:column="17"/></name></type></parameter>)<pos:position pos:line="13" pos:column="18"/></parameter_list></cpp:macro> <cpp:value pos:line="13" pos:column="19">XML_L("expat_")V1(a,b,c)<pos:position pos:line="13" pos:column="43"/></cpp:value></cpp:define>

  <return pos:line="15" pos:column="3">return <expr><call><name pos:line="15" pos:column="10">V2<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">XML_MAJOR_VERSION<pos:position pos:line="15" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="32">XML_MINOR_VERSION<pos:position pos:line="15" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="51">XML_MICRO_VERSION<pos:position pos:line="15" pos:column="68"/></name></expr></argument>)<pos:position pos:line="15" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="70"/></return>

<cpp:undef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">undef<pos:position pos:line="17" pos:column="7"/></cpp:directive> <name pos:line="17" pos:column="8">V1<pos:position pos:line="17" pos:column="10"/></name></cpp:undef>
<cpp:undef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">undef<pos:position pos:line="18" pos:column="7"/></cpp:directive> <name pos:line="18" pos:column="8">V2<pos:position pos:line="18" pos:column="10"/></name></cpp:undef>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
