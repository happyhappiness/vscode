<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1968_httpd-2.0.61.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">core_input_filter<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">ap_filter_t<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">f<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">apr_bucket_brigade<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">b<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">ap_input_mode_t<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">mode<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">apr_read_type_e<pos:position pos:line="2" pos:column="67"/></name></type> <name pos:line="2" pos:column="68">block<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="3" pos:column="30">apr_off_t<pos:position pos:line="3" pos:column="39"/></name></type> <name pos:line="3" pos:column="40">readbytes<pos:position pos:line="3" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="50"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_bucket<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">e<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">rv<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">core_net_rec<pos:position pos:line="7" pos:column="17"/></name> <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier></type><name pos:line="7" pos:column="19">net<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><name><name pos:line="7" pos:column="25">f<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">-&gt;<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="28">ctx<pos:position pos:line="7" pos:column="31"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">core_ctx_t<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">ctx<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><name><name pos:line="8" pos:column="23">net<pos:position pos:line="8" pos:column="26"/></name><operator pos:line="8" pos:column="26">-&gt;<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="28">in_ctx<pos:position pos:line="8" pos:column="34"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">char<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">str<pos:position pos:line="9" pos:column="20"/></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_size_t<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">len<pos:position pos:line="10" pos:column="19"/></name></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">mode<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">==<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">AP_MODE_INIT<pos:position pos:line="12" pos:column="29"/></name></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30"> <block pos:line="12" pos:column="31">{
        <comment type="block" pos:line="13" pos:column="9">/*
         * this mode is for filters that might need to 'initialize'
         * a connection before reading request data from a client.
         * NNTP over SSL for example needs to handshake before the
         * server sends the welcome message.
         * such filters would have changed the mode before this point
         * is reached.  however, protocol modules such as NNTP should
         * not need to know anything about SSL.  given the example, if
         * SSL is not in the filter chain, AP_MODE_INIT is a noop.
         */</comment>
        <return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">APR_SUCCESS<pos:position pos:line="23" pos:column="27"/></name></expr>;<pos:position pos:line="23" pos:column="28"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">!<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">ctx<pos:position pos:line="26" pos:column="13"/></name></expr>)<pos:position pos:line="26" pos:column="14"/></condition><then pos:line="26" pos:column="14">
    <block pos:line="27" pos:column="5">{
        <expr_stmt><expr><name pos:line="28" pos:column="9">ctx<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">=<pos:position pos:line="28" pos:column="14"/></operator> <call><name pos:line="28" pos:column="15">apr_pcalloc<pos:position pos:line="28" pos:column="26"/></name><argument_list pos:line="28" pos:column="26">(<argument><expr><name><name pos:line="28" pos:column="27">f<pos:position pos:line="28" pos:column="28"/></name><operator pos:line="28" pos:column="28">-&gt;<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="30">c<pos:position pos:line="28" pos:column="31"/></name><operator pos:line="28" pos:column="31">-&gt;<pos:position pos:line="28" pos:column="36"/></operator><name pos:line="28" pos:column="33">pool<pos:position pos:line="28" pos:column="37"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="39">sizeof<argument_list pos:line="28" pos:column="45">(<argument><expr><operator pos:line="28" pos:column="46">*<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="47">ctx<pos:position pos:line="28" pos:column="50"/></name></expr></argument>)<pos:position pos:line="28" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="29" pos:column="9">ctx<pos:position pos:line="29" pos:column="12"/></name><operator pos:line="29" pos:column="12">-&gt;<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="14">b<pos:position pos:line="29" pos:column="15"/></name></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <call><name pos:line="29" pos:column="18">apr_brigade_create<pos:position pos:line="29" pos:column="36"/></name><argument_list pos:line="29" pos:column="36">(<argument><expr><name><name pos:line="29" pos:column="37">f<pos:position pos:line="29" pos:column="38"/></name><operator pos:line="29" pos:column="38">-&gt;<pos:position pos:line="29" pos:column="43"/></operator><name pos:line="29" pos:column="40">c<pos:position pos:line="29" pos:column="41"/></name><operator pos:line="29" pos:column="41">-&gt;<pos:position pos:line="29" pos:column="46"/></operator><name pos:line="29" pos:column="43">pool<pos:position pos:line="29" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="49">f<pos:position pos:line="29" pos:column="50"/></name><operator pos:line="29" pos:column="50">-&gt;<pos:position pos:line="29" pos:column="55"/></operator><name pos:line="29" pos:column="52">c<pos:position pos:line="29" pos:column="53"/></name><operator pos:line="29" pos:column="53">-&gt;<pos:position pos:line="29" pos:column="58"/></operator><name pos:line="29" pos:column="55">bucket_alloc<pos:position pos:line="29" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">ctx<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">-&gt;<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="14">tmpbb<pos:position pos:line="30" pos:column="19"/></name></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <call><name pos:line="30" pos:column="22">apr_brigade_create<pos:position pos:line="30" pos:column="40"/></name><argument_list pos:line="30" pos:column="40">(<argument><expr><name><name pos:line="30" pos:column="41">ctx<pos:position pos:line="30" pos:column="44"/></name><operator pos:line="30" pos:column="44">-&gt;<pos:position pos:line="30" pos:column="49"/></operator><name pos:line="30" pos:column="46">b<pos:position pos:line="30" pos:column="47"/></name><operator pos:line="30" pos:column="47">-&gt;<pos:position pos:line="30" pos:column="52"/></operator><name pos:line="30" pos:column="49">p<pos:position pos:line="30" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="52">ctx<pos:position pos:line="30" pos:column="55"/></name><operator pos:line="30" pos:column="55">-&gt;<pos:position pos:line="30" pos:column="60"/></operator><name pos:line="30" pos:column="57">b<pos:position pos:line="30" pos:column="58"/></name><operator pos:line="30" pos:column="58">-&gt;<pos:position pos:line="30" pos:column="63"/></operator><name pos:line="30" pos:column="60">bucket_alloc<pos:position pos:line="30" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="74"/></expr_stmt>

        <comment type="block" pos:line="32" pos:column="9">/* seed the brigade with the client socket. */</comment>
        <expr_stmt><expr><name pos:line="33" pos:column="9">e<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">=<pos:position pos:line="33" pos:column="12"/></operator> <call><name pos:line="33" pos:column="13">apr_bucket_socket_create<pos:position pos:line="33" pos:column="37"/></name><argument_list pos:line="33" pos:column="37">(<argument><expr><name><name pos:line="33" pos:column="38">net<pos:position pos:line="33" pos:column="41"/></name><operator pos:line="33" pos:column="41">-&gt;<pos:position pos:line="33" pos:column="46"/></operator><name pos:line="33" pos:column="43">client_socket<pos:position pos:line="33" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="58">f<pos:position pos:line="33" pos:column="59"/></name><operator pos:line="33" pos:column="59">-&gt;<pos:position pos:line="33" pos:column="64"/></operator><name pos:line="33" pos:column="61">c<pos:position pos:line="33" pos:column="62"/></name><operator pos:line="33" pos:column="62">-&gt;<pos:position pos:line="33" pos:column="67"/></operator><name pos:line="33" pos:column="64">bucket_alloc<pos:position pos:line="33" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="78"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="34" pos:column="32"/></name><argument_list pos:line="34" pos:column="32">(<argument><expr><name><name pos:line="34" pos:column="33">ctx<pos:position pos:line="34" pos:column="36"/></name><operator pos:line="34" pos:column="36">-&gt;<pos:position pos:line="34" pos:column="41"/></operator><name pos:line="34" pos:column="38">b<pos:position pos:line="34" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="41">e<pos:position pos:line="34" pos:column="42"/></name></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">net<pos:position pos:line="35" pos:column="12"/></name><operator pos:line="35" pos:column="12">-&gt;<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="14">in_ctx<pos:position pos:line="35" pos:column="20"/></name></name> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <name pos:line="35" pos:column="23">ctx<pos:position pos:line="35" pos:column="26"/></name></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then>
    <elseif pos:line="37" pos:column="5">else <if pos:line="37" pos:column="10">if <condition pos:line="37" pos:column="13">(<expr><call><name pos:line="37" pos:column="14">APR_BRIGADE_EMPTY<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><name><name pos:line="37" pos:column="32">ctx<pos:position pos:line="37" pos:column="35"/></name><operator pos:line="37" pos:column="35">-&gt;<pos:position pos:line="37" pos:column="40"/></operator><name pos:line="37" pos:column="37">b<pos:position pos:line="37" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="40"/></condition><then pos:line="37" pos:column="40"> <block pos:line="37" pos:column="41">{
        <return pos:line="38" pos:column="9">return <expr><name pos:line="38" pos:column="16">APR_EOF<pos:position pos:line="38" pos:column="23"/></name></expr>;<pos:position pos:line="38" pos:column="24"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="41" pos:column="5">/* ### This is bad. */</comment>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">BRIGADE_NORMALIZE<pos:position pos:line="42" pos:column="22"/></name><argument_list pos:line="42" pos:column="22">(<argument><expr><name><name pos:line="42" pos:column="23">ctx<pos:position pos:line="42" pos:column="26"/></name><operator pos:line="42" pos:column="26">-&gt;<pos:position pos:line="42" pos:column="31"/></operator><name pos:line="42" pos:column="28">b<pos:position pos:line="42" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="44" pos:column="5">/* check for empty brigade again *AFTER* BRIGADE_NORMALIZE()
     * If we have lost our socket bucket (see above), we are EOF.
     *
     * Ideally, this should be returning SUCCESS with EOS bucket, but
     * some higher-up APIs (spec. read_request_line via ap_rgetline)
     * want an error code. */</comment>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><call><name pos:line="50" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="50" pos:column="26"/></name><argument_list pos:line="50" pos:column="26">(<argument><expr><name><name pos:line="50" pos:column="27">ctx<pos:position pos:line="50" pos:column="30"/></name><operator pos:line="50" pos:column="30">-&gt;<pos:position pos:line="50" pos:column="35"/></operator><name pos:line="50" pos:column="32">b<pos:position pos:line="50" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="35"/></condition><then pos:line="50" pos:column="35"> <block pos:line="50" pos:column="36">{
        <return pos:line="51" pos:column="9">return <expr><name pos:line="51" pos:column="16">APR_EOF<pos:position pos:line="51" pos:column="23"/></name></expr>;<pos:position pos:line="51" pos:column="24"/></return>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>

    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name pos:line="54" pos:column="9">mode<pos:position pos:line="54" pos:column="13"/></name> <operator pos:line="54" pos:column="14">==<pos:position pos:line="54" pos:column="16"/></operator> <name pos:line="54" pos:column="17">AP_MODE_GETLINE<pos:position pos:line="54" pos:column="32"/></name></expr>)<pos:position pos:line="54" pos:column="33"/></condition><then pos:line="54" pos:column="33"> <block pos:line="54" pos:column="34">{
        <comment type="block" pos:line="55" pos:column="9">/* we are reading a single LF line, e.g. the HTTP headers */</comment>
        <expr_stmt><expr><name pos:line="56" pos:column="9">rv<pos:position pos:line="56" pos:column="11"/></name> <operator pos:line="56" pos:column="12">=<pos:position pos:line="56" pos:column="13"/></operator> <call><name pos:line="56" pos:column="14">apr_brigade_split_line<pos:position pos:line="56" pos:column="36"/></name><argument_list pos:line="56" pos:column="36">(<argument><expr><name pos:line="56" pos:column="37">b<pos:position pos:line="56" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="40">ctx<pos:position pos:line="56" pos:column="43"/></name><operator pos:line="56" pos:column="43">-&gt;<pos:position pos:line="56" pos:column="48"/></operator><name pos:line="56" pos:column="45">b<pos:position pos:line="56" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="48">block<pos:position pos:line="56" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="55">HUGE_STRING_LEN<pos:position pos:line="56" pos:column="70"/></name></expr></argument>)<pos:position pos:line="56" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="72"/></expr_stmt>
        <comment type="block" pos:line="57" pos:column="9">/* We should treat EAGAIN here the same as we do for EOF (brigade is
         * empty).  We do this by returning whatever we have read.  This may
         * or may not be bogus, but is consistent (for now) with EOF logic.
         */</comment>
        <if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><call><name pos:line="61" pos:column="13">APR_STATUS_IS_EAGAIN<pos:position pos:line="61" pos:column="33"/></name><argument_list pos:line="61" pos:column="33">(<argument><expr><name pos:line="61" pos:column="34">rv<pos:position pos:line="61" pos:column="36"/></name></expr></argument>)<pos:position pos:line="61" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="38"/></condition><then pos:line="61" pos:column="38"> <block pos:line="61" pos:column="39">{
            <expr_stmt><expr><name pos:line="62" pos:column="13">rv<pos:position pos:line="62" pos:column="15"/></name> <operator pos:line="62" pos:column="16">=<pos:position pos:line="62" pos:column="17"/></operator> <name pos:line="62" pos:column="18">APR_SUCCESS<pos:position pos:line="62" pos:column="29"/></name></expr>;<pos:position pos:line="62" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="63" pos:column="10"/></block></then></if>
        <return pos:line="64" pos:column="9">return <expr><name pos:line="64" pos:column="16">rv<pos:position pos:line="64" pos:column="18"/></name></expr>;<pos:position pos:line="64" pos:column="19"/></return>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="67" pos:column="5">/* ### AP_MODE_PEEK is a horrific name for this mode because we also
     * eat any CRLFs that we see.  That's not the obvious intention of
     * this mode.  Determine whether anyone actually uses this or not. */</comment>
    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><name pos:line="70" pos:column="9">mode<pos:position pos:line="70" pos:column="13"/></name> <operator pos:line="70" pos:column="14">==<pos:position pos:line="70" pos:column="16"/></operator> <name pos:line="70" pos:column="17">AP_MODE_EATCRLF<pos:position pos:line="70" pos:column="32"/></name></expr>)<pos:position pos:line="70" pos:column="33"/></condition><then pos:line="70" pos:column="33"> <block pos:line="70" pos:column="34">{
        <decl_stmt><decl><type><name pos:line="71" pos:column="9">apr_bucket<pos:position pos:line="71" pos:column="19"/></name> <modifier pos:line="71" pos:column="20">*<pos:position pos:line="71" pos:column="21"/></modifier></type><name pos:line="71" pos:column="21">e<pos:position pos:line="71" pos:column="22"/></name></decl>;<pos:position pos:line="71" pos:column="23"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="72" pos:column="9">const<pos:position pos:line="72" pos:column="14"/></specifier> <name pos:line="72" pos:column="15">char<pos:position pos:line="72" pos:column="19"/></name> <modifier pos:line="72" pos:column="20">*<pos:position pos:line="72" pos:column="21"/></modifier></type><name pos:line="72" pos:column="21">c<pos:position pos:line="72" pos:column="22"/></name></decl>;<pos:position pos:line="72" pos:column="23"/></decl_stmt>

        <comment type="block" pos:line="74" pos:column="9">/* The purpose of this loop is to ignore any CRLF (or LF) at the end
         * of a request.  Many browsers send extra lines at the end of POST
         * requests.  We use the PEEK method to determine if there is more
         * data on the socket, so that we know if we should delay sending the
         * end of one request until we have served the second request in a
         * pipelined situation.  We don't want to actually delay sending a
         * response if the server finds a CRLF (or LF), becuause that doesn't
         * mean that there is another request, just a blank line.
         */</comment>
        <while pos:line="83" pos:column="9">while <condition pos:line="83" pos:column="15">(<expr><literal type="number" pos:line="83" pos:column="16">1<pos:position pos:line="83" pos:column="17"/></literal></expr>)<pos:position pos:line="83" pos:column="18"/></condition> <block pos:line="83" pos:column="19">{
            <if pos:line="84" pos:column="13">if <condition pos:line="84" pos:column="16">(<expr><call><name pos:line="84" pos:column="17">APR_BRIGADE_EMPTY<pos:position pos:line="84" pos:column="34"/></name><argument_list pos:line="84" pos:column="34">(<argument><expr><name><name pos:line="84" pos:column="35">ctx<pos:position pos:line="84" pos:column="38"/></name><operator pos:line="84" pos:column="38">-&gt;<pos:position pos:line="84" pos:column="43"/></operator><name pos:line="84" pos:column="40">b<pos:position pos:line="84" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="43"/></condition><then pos:line="84" pos:column="43">
                <block type="pseudo"><return pos:line="85" pos:column="17">return <expr><name pos:line="85" pos:column="24">APR_EOF<pos:position pos:line="85" pos:column="31"/></name></expr>;<pos:position pos:line="85" pos:column="32"/></return></block></then></if>

            <expr_stmt><expr><name pos:line="87" pos:column="13">e<pos:position pos:line="87" pos:column="14"/></name> <operator pos:line="87" pos:column="15">=<pos:position pos:line="87" pos:column="16"/></operator> <call><name pos:line="87" pos:column="17">APR_BRIGADE_FIRST<pos:position pos:line="87" pos:column="34"/></name><argument_list pos:line="87" pos:column="34">(<argument><expr><name><name pos:line="87" pos:column="35">ctx<pos:position pos:line="87" pos:column="38"/></name><operator pos:line="87" pos:column="38">-&gt;<pos:position pos:line="87" pos:column="43"/></operator><name pos:line="87" pos:column="40">b<pos:position pos:line="87" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="43"/></expr_stmt>

            <expr_stmt><expr><name pos:line="89" pos:column="13">rv<pos:position pos:line="89" pos:column="15"/></name> <operator pos:line="89" pos:column="16">=<pos:position pos:line="89" pos:column="17"/></operator> <call><name pos:line="89" pos:column="18">apr_bucket_read<pos:position pos:line="89" pos:column="33"/></name><argument_list pos:line="89" pos:column="33">(<argument><expr><name pos:line="89" pos:column="34">e<pos:position pos:line="89" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="37">&amp;<pos:position pos:line="89" pos:column="42"/></operator><name pos:line="89" pos:column="38">str<pos:position pos:line="89" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="43">&amp;<pos:position pos:line="89" pos:column="48"/></operator><name pos:line="89" pos:column="44">len<pos:position pos:line="89" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="49">APR_NONBLOCK_READ<pos:position pos:line="89" pos:column="66"/></name></expr></argument>)<pos:position pos:line="89" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="68"/></expr_stmt>

            <if pos:line="91" pos:column="13">if <condition pos:line="91" pos:column="16">(<expr><name pos:line="91" pos:column="17">rv<pos:position pos:line="91" pos:column="19"/></name> <operator pos:line="91" pos:column="20">!=<pos:position pos:line="91" pos:column="22"/></operator> <name pos:line="91" pos:column="23">APR_SUCCESS<pos:position pos:line="91" pos:column="34"/></name></expr>)<pos:position pos:line="91" pos:column="35"/></condition><then pos:line="91" pos:column="35">
                <block type="pseudo"><return pos:line="92" pos:column="17">return <expr><name pos:line="92" pos:column="24">rv<pos:position pos:line="92" pos:column="26"/></name></expr>;<pos:position pos:line="92" pos:column="27"/></return></block></then></if>

            <expr_stmt><expr><name pos:line="94" pos:column="13">c<pos:position pos:line="94" pos:column="14"/></name> <operator pos:line="94" pos:column="15">=<pos:position pos:line="94" pos:column="16"/></operator> <name pos:line="94" pos:column="17">str<pos:position pos:line="94" pos:column="20"/></name></expr>;<pos:position pos:line="94" pos:column="21"/></expr_stmt>
            <while pos:line="95" pos:column="13">while <condition pos:line="95" pos:column="19">(<expr><name pos:line="95" pos:column="20">c<pos:position pos:line="95" pos:column="21"/></name> <operator pos:line="95" pos:column="22">&lt;<pos:position pos:line="95" pos:column="26"/></operator> <name pos:line="95" pos:column="24">str<pos:position pos:line="95" pos:column="27"/></name> <operator pos:line="95" pos:column="28">+<pos:position pos:line="95" pos:column="29"/></operator> <name pos:line="95" pos:column="30">len<pos:position pos:line="95" pos:column="33"/></name></expr>)<pos:position pos:line="95" pos:column="34"/></condition> <block pos:line="95" pos:column="35">{
                <if pos:line="96" pos:column="17">if <condition pos:line="96" pos:column="20">(<expr><operator pos:line="96" pos:column="21">*<pos:position pos:line="96" pos:column="22"/></operator><name pos:line="96" pos:column="22">c<pos:position pos:line="96" pos:column="23"/></name> <operator pos:line="96" pos:column="24">==<pos:position pos:line="96" pos:column="26"/></operator> <name pos:line="96" pos:column="27">APR_ASCII_LF<pos:position pos:line="96" pos:column="39"/></name></expr>)<pos:position pos:line="96" pos:column="40"/></condition><then pos:line="96" pos:column="40">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="97" pos:column="21">c<pos:position pos:line="97" pos:column="22"/></name><operator pos:line="97" pos:column="22">++<pos:position pos:line="97" pos:column="24"/></operator></expr>;<pos:position pos:line="97" pos:column="25"/></expr_stmt></block></then>
                <elseif pos:line="98" pos:column="17">else <if pos:line="98" pos:column="22">if <condition pos:line="98" pos:column="25">(<expr><operator pos:line="98" pos:column="26">*<pos:position pos:line="98" pos:column="27"/></operator><name pos:line="98" pos:column="27">c<pos:position pos:line="98" pos:column="28"/></name> <operator pos:line="98" pos:column="29">==<pos:position pos:line="98" pos:column="31"/></operator> <name pos:line="98" pos:column="32">APR_ASCII_CR<pos:position pos:line="98" pos:column="44"/></name> <operator pos:line="98" pos:column="45">&amp;&amp;<pos:position pos:line="98" pos:column="55"/></operator> <operator pos:line="98" pos:column="48">*<pos:position pos:line="98" pos:column="49"/></operator><operator pos:line="98" pos:column="49">(<pos:position pos:line="98" pos:column="50"/></operator><name pos:line="98" pos:column="50">c<pos:position pos:line="98" pos:column="51"/></name> <operator pos:line="98" pos:column="52">+<pos:position pos:line="98" pos:column="53"/></operator> <literal type="number" pos:line="98" pos:column="54">1<pos:position pos:line="98" pos:column="55"/></literal><operator pos:line="98" pos:column="55">)<pos:position pos:line="98" pos:column="56"/></operator> <operator pos:line="98" pos:column="57">==<pos:position pos:line="98" pos:column="59"/></operator> <name pos:line="98" pos:column="60">APR_ASCII_LF<pos:position pos:line="98" pos:column="72"/></name></expr>)<pos:position pos:line="98" pos:column="73"/></condition><then pos:line="98" pos:column="73">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="99" pos:column="21">c<pos:position pos:line="99" pos:column="22"/></name> <operator pos:line="99" pos:column="23">+=<pos:position pos:line="99" pos:column="25"/></operator> <literal type="number" pos:line="99" pos:column="26">2<pos:position pos:line="99" pos:column="27"/></literal></expr>;<pos:position pos:line="99" pos:column="28"/></expr_stmt></block></then></if></elseif>
                <else pos:line="100" pos:column="17">else
                    <block type="pseudo"><return pos:line="101" pos:column="21">return <expr><name pos:line="101" pos:column="28">APR_SUCCESS<pos:position pos:line="101" pos:column="39"/></name></expr>;<pos:position pos:line="101" pos:column="40"/></return></block></else></if>
            }<pos:position pos:line="102" pos:column="14"/></block></while>

            <comment type="block" pos:line="104" pos:column="13">/* If we reach here, we were a bucket just full of CRLFs, so
             * just toss the bucket. */</comment>
            <comment type="block" pos:line="106" pos:column="13">/* FIXME: Is this the right thing to do in the core? */</comment>
            <macro><name pos:line="107" pos:column="13">apr_<pos:position pos:line="107" pos:column="17"/></name></macro></block></while></block></then></if></block></function></unit>
