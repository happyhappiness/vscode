<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1987_httpd-2.2.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">initialize_module<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">apr_pool_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">p<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">apr_pool_t<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">plog<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">apr_pool_t<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">ptemp<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">server_rec<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">s<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">void<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">data<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">userdata_key<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><literal type="string" pos:line="5" pos:column="32">"auth_digest_init"<pos:position pos:line="5" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="51"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/* initialize_module() will be called twice, and if it's a DSO
     * then all static data from the first call will be lost. Only
     * set up our static data on the second call. */</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">apr_pool_userdata_get<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><operator pos:line="10" pos:column="27">&amp;<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="28">data<pos:position pos:line="10" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="34">userdata_key<pos:position pos:line="10" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="48">s<pos:position pos:line="10" pos:column="49"/></name><operator pos:line="10" pos:column="49">-&gt;<pos:position pos:line="10" pos:column="54"/></operator><name pos:line="10" pos:column="51">process<pos:position pos:line="10" pos:column="58"/></name><operator pos:line="10" pos:column="58">-&gt;<pos:position pos:line="10" pos:column="63"/></operator><name pos:line="10" pos:column="60">pool<pos:position pos:line="10" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="66"/></expr_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">data<pos:position pos:line="11" pos:column="14"/></name></expr>)<pos:position pos:line="11" pos:column="15"/></condition><then pos:line="11" pos:column="15"> <block pos:line="11" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">apr_pool_userdata_set<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><operator pos:line="12" pos:column="31">(<pos:position pos:line="12" pos:column="32"/></operator><specifier pos:line="12" pos:column="32">const<pos:position pos:line="12" pos:column="37"/></specifier> <name pos:line="12" pos:column="38">void<pos:position pos:line="12" pos:column="42"/></name> <operator pos:line="12" pos:column="43">*<pos:position pos:line="12" pos:column="44"/></operator><operator pos:line="12" pos:column="44">)<pos:position pos:line="12" pos:column="45"/></operator><literal type="number" pos:line="12" pos:column="45">1<pos:position pos:line="12" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="48">userdata_key<pos:position pos:line="12" pos:column="60"/></name></expr></argument>,
                               <argument><expr><name pos:line="13" pos:column="32">apr_pool_cleanup_null<pos:position pos:line="13" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="55">s<pos:position pos:line="13" pos:column="56"/></name><operator pos:line="13" pos:column="56">-&gt;<pos:position pos:line="13" pos:column="61"/></operator><name pos:line="13" pos:column="58">process<pos:position pos:line="13" pos:column="65"/></name><operator pos:line="13" pos:column="65">-&gt;<pos:position pos:line="13" pos:column="70"/></operator><name pos:line="13" pos:column="67">pool<pos:position pos:line="13" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="73"/></expr_stmt>
        <return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">OK<pos:position pos:line="14" pos:column="18"/></name></expr>;<pos:position pos:line="14" pos:column="19"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><call><name pos:line="16" pos:column="9">initialize_secret<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">s<pos:position pos:line="16" pos:column="28"/></name></expr></argument>)<pos:position pos:line="16" pos:column="29"/></argument_list></call> <operator pos:line="16" pos:column="30">!=<pos:position pos:line="16" pos:column="32"/></operator> <name pos:line="16" pos:column="33">APR_SUCCESS<pos:position pos:line="16" pos:column="44"/></name></expr>)<pos:position pos:line="16" pos:column="45"/></condition><then pos:line="16" pos:column="45"> <block pos:line="16" pos:column="46">{
        <return pos:line="17" pos:column="9">return <expr><operator pos:line="17" pos:column="16">!<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">OK<pos:position pos:line="17" pos:column="19"/></name></expr>;<pos:position pos:line="17" pos:column="20"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><name pos:line="20" pos:column="5">APR_HAS_SHARED_MEMORY<pos:position pos:line="20" pos:column="26"/></name></expr></cpp:if>
    <comment type="block" pos:line="21" pos:column="5">/* Note: this stuff is currently fixed for the lifetime of the server,
     * i.e. even across restarts. This means that A) any shmem-size
     * configuration changes are ignored, and B) certain optimizations,
     * such as only allocating the smallest necessary entry for each
     * client, can't be done. However, the alternative is a nightmare:
     * we can't call apr_shm_destroy on a graceful restart because there
     * will be children using the tables, and we also don't know when the
     * last child dies. Therefore we can never clean up the old stuff,
     * creating a creeping memory leak.
     */</comment>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">initialize_tables<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><name pos:line="31" pos:column="23">s<pos:position pos:line="31" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="26">p<pos:position pos:line="31" pos:column="27"/></name></expr></argument>)<pos:position pos:line="31" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">apr_pool_cleanup_register<pos:position pos:line="32" pos:column="30"/></name><argument_list pos:line="32" pos:column="30">(<argument><expr><name pos:line="32" pos:column="31">p<pos:position pos:line="32" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="34">NULL<pos:position pos:line="32" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="40">cleanup_tables<pos:position pos:line="32" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="56">apr_pool_cleanup_null<pos:position pos:line="32" pos:column="77"/></name></expr></argument>)<pos:position pos:line="32" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="79"/></expr_stmt>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>  <comment type="block" pos:line="33" pos:column="9">/* APR_HAS_SHARED_MEMORY */</comment>
    <return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">OK<pos:position pos:line="34" pos:column="14"/></name></expr>;<pos:position pos:line="34" pos:column="15"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
