<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3466_httpd-2.4.17.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">ap_create_scoreboard<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">apr_pool_t<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">p<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">ap_scoreboard_e<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">sb_type<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">i<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">APR_HAS_SHARED_MEMORY<pos:position pos:line="4" pos:column="26"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">rv<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">ap_scoreboard_image<pos:position pos:line="8" pos:column="28"/></name></expr>)<pos:position pos:line="8" pos:column="29"/></condition><then pos:line="8" pos:column="29"> <block pos:line="8" pos:column="30">{
        <expr_stmt><expr><name><name pos:line="9" pos:column="9">ap_scoreboard_image<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">-&gt;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="30">global<pos:position pos:line="9" pos:column="36"/></name><operator pos:line="9" pos:column="36">-&gt;<pos:position pos:line="9" pos:column="41"/></operator><name pos:line="9" pos:column="38">restart_time<pos:position pos:line="9" pos:column="50"/></name></name> <operator pos:line="9" pos:column="51">=<pos:position pos:line="9" pos:column="52"/></operator> <call><name pos:line="9" pos:column="53">apr_time_now<pos:position pos:line="9" pos:column="65"/></name><argument_list pos:line="9" pos:column="65">()<pos:position pos:line="9" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">memset<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name><name pos:line="10" pos:column="16">ap_scoreboard_image<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">-&gt;<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="37">parent<pos:position pos:line="10" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="45">0<pos:position pos:line="10" pos:column="46"/></literal></expr></argument>,
               <argument><expr><sizeof pos:line="11" pos:column="16">sizeof<argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">process_score<pos:position pos:line="11" pos:column="36"/></name></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></sizeof> <operator pos:line="11" pos:column="38">*<pos:position pos:line="11" pos:column="39"/></operator> <name pos:line="11" pos:column="40">server_limit<pos:position pos:line="11" pos:column="52"/></name></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="54"/></expr_stmt>
        <for pos:line="12" pos:column="9">for <control pos:line="12" pos:column="13">(<init><expr><name pos:line="12" pos:column="14">i<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr>;<pos:position pos:line="12" pos:column="20"/></init> <condition><expr><name pos:line="12" pos:column="21">i<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">&lt;<pos:position pos:line="12" pos:column="27"/></operator> <name pos:line="12" pos:column="25">server_limit<pos:position pos:line="12" pos:column="37"/></name></expr>;<pos:position pos:line="12" pos:column="38"/></condition> <incr><expr><name pos:line="12" pos:column="39">i<pos:position pos:line="12" pos:column="40"/></name><operator pos:line="12" pos:column="40">++<pos:position pos:line="12" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="12" pos:column="43"/></control> <block pos:line="12" pos:column="44">{
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">memset<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name><name pos:line="13" pos:column="20">ap_scoreboard_image<pos:position pos:line="13" pos:column="39"/></name><operator pos:line="13" pos:column="39">-&gt;<pos:position pos:line="13" pos:column="44"/></operator><name pos:line="13" pos:column="41">servers<pos:position pos:line="13" pos:column="48"/></name><index pos:line="13" pos:column="48">[<expr><name pos:line="13" pos:column="49">i<pos:position pos:line="13" pos:column="50"/></name></expr>]<pos:position pos:line="13" pos:column="51"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="53">0<pos:position pos:line="13" pos:column="54"/></literal></expr></argument>,
                   <argument><expr><sizeof pos:line="14" pos:column="20">sizeof<argument_list pos:line="14" pos:column="26">(<argument><expr><name pos:line="14" pos:column="27">worker_score<pos:position pos:line="14" pos:column="39"/></name></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></sizeof> <operator pos:line="14" pos:column="41">*<pos:position pos:line="14" pos:column="42"/></operator> <name pos:line="14" pos:column="43">thread_limit<pos:position pos:line="14" pos:column="55"/></name></expr></argument>)<pos:position pos:line="14" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="57"/></expr_stmt>
        }<pos:position pos:line="15" pos:column="10"/></block></for>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">ap_init_scoreboard<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">NULL<pos:position pos:line="16" pos:column="32"/></name></expr></argument>)<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt>
        <return pos:line="17" pos:column="9">return <expr><name pos:line="17" pos:column="16">OK<pos:position pos:line="17" pos:column="18"/></name></expr>;<pos:position pos:line="17" pos:column="19"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">ap_calc_scoreboard_size<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">()<pos:position pos:line="20" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
<cpp:if pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">if<pos:position pos:line="21" pos:column="4"/></cpp:directive> <expr><name pos:line="21" pos:column="5">APR_HAS_SHARED_MEMORY<pos:position pos:line="21" pos:column="26"/></name></expr></cpp:if>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">sb_type<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">==<pos:position pos:line="22" pos:column="19"/></operator> <name pos:line="22" pos:column="20">SB_SHARED<pos:position pos:line="22" pos:column="29"/></name></expr>)<pos:position pos:line="22" pos:column="30"/></condition><then pos:line="22" pos:column="30"> <block pos:line="22" pos:column="31">{
        <decl_stmt><decl><type><name pos:line="23" pos:column="9">void<pos:position pos:line="23" pos:column="13"/></name> <modifier pos:line="23" pos:column="14">*<pos:position pos:line="23" pos:column="15"/></modifier></type><name pos:line="23" pos:column="15">sb_shared<pos:position pos:line="23" pos:column="24"/></name></decl>;<pos:position pos:line="23" pos:column="25"/></decl_stmt>
        <expr_stmt><expr><name pos:line="24" pos:column="9">rv<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <call><name pos:line="24" pos:column="14">open_scoreboard<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">p<pos:position pos:line="24" pos:column="31"/></name></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">rv<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">||<pos:position pos:line="25" pos:column="18"/></operator> <operator pos:line="25" pos:column="19">!<pos:position pos:line="25" pos:column="20"/></operator><operator pos:line="25" pos:column="20">(<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="21">sb_shared<pos:position pos:line="25" pos:column="30"/></name> <operator pos:line="25" pos:column="31">=<pos:position pos:line="25" pos:column="32"/></operator> <call><name pos:line="25" pos:column="33">apr_shm_baseaddr_get<pos:position pos:line="25" pos:column="53"/></name><argument_list pos:line="25" pos:column="53">(<argument><expr><name pos:line="25" pos:column="54">ap_scoreboard_shm<pos:position pos:line="25" pos:column="71"/></name></expr></argument>)<pos:position pos:line="25" pos:column="72"/></argument_list></call><operator pos:line="25" pos:column="72">)<pos:position pos:line="25" pos:column="73"/></operator></expr>)<pos:position pos:line="25" pos:column="74"/></condition><then pos:line="25" pos:column="74"> <block pos:line="25" pos:column="75">{
            <return pos:line="26" pos:column="13">return <expr><name pos:line="26" pos:column="20">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="26" pos:column="46"/></name></expr>;<pos:position pos:line="26" pos:column="47"/></return>
        }<pos:position pos:line="27" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">memset<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><name pos:line="28" pos:column="16">sb_shared<pos:position pos:line="28" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="27">0<pos:position pos:line="28" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="30">scoreboard_size<pos:position pos:line="28" pos:column="45"/></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">ap_init_scoreboard<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">sb_shared<pos:position pos:line="29" pos:column="37"/></name></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then>
    <else pos:line="31" pos:column="5">else
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>
    <block pos:line="33" pos:column="5">{
        <comment type="block" pos:line="34" pos:column="9">/* A simple malloc will suffice */</comment>
        <decl_stmt><decl><type><name pos:line="35" pos:column="9">void<pos:position pos:line="35" pos:column="13"/></name> <modifier pos:line="35" pos:column="14">*<pos:position pos:line="35" pos:column="15"/></modifier></type><name pos:line="35" pos:column="15">sb_mem<pos:position pos:line="35" pos:column="21"/></name> <init pos:line="35" pos:column="22">= <expr><call><name pos:line="35" pos:column="24">ap_calloc<pos:position pos:line="35" pos:column="33"/></name><argument_list pos:line="35" pos:column="33">(<argument><expr><literal type="number" pos:line="35" pos:column="34">1<pos:position pos:line="35" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="37">scoreboard_size<pos:position pos:line="35" pos:column="52"/></name></expr></argument>)<pos:position pos:line="35" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="35" pos:column="54"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">ap_init_scoreboard<pos:position pos:line="36" pos:column="27"/></name><argument_list pos:line="36" pos:column="27">(<argument><expr><name pos:line="36" pos:column="28">sb_mem<pos:position pos:line="36" pos:column="34"/></name></expr></argument>)<pos:position pos:line="36" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="39" pos:column="5">scoreboard_type<pos:position pos:line="39" pos:column="20"/></name> <operator pos:line="39" pos:column="21">=<pos:position pos:line="39" pos:column="22"/></operator> <name pos:line="39" pos:column="23">sb_type<pos:position pos:line="39" pos:column="30"/></name></expr>;<pos:position pos:line="39" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="40" pos:column="5">ap_scoreboard_image<pos:position pos:line="40" pos:column="24"/></name><operator pos:line="40" pos:column="24">-&gt;<pos:position pos:line="40" pos:column="29"/></operator><name pos:line="40" pos:column="26">global<pos:position pos:line="40" pos:column="32"/></name><operator pos:line="40" pos:column="32">-&gt;<pos:position pos:line="40" pos:column="37"/></operator><name pos:line="40" pos:column="34">running_generation<pos:position pos:line="40" pos:column="52"/></name></name> <operator pos:line="40" pos:column="53">=<pos:position pos:line="40" pos:column="54"/></operator> <literal type="number" pos:line="40" pos:column="55">0<pos:position pos:line="40" pos:column="56"/></literal></expr>;<pos:position pos:line="40" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="41" pos:column="5">ap_scoreboard_image<pos:position pos:line="41" pos:column="24"/></name><operator pos:line="41" pos:column="24">-&gt;<pos:position pos:line="41" pos:column="29"/></operator><name pos:line="41" pos:column="26">global<pos:position pos:line="41" pos:column="32"/></name><operator pos:line="41" pos:column="32">-&gt;<pos:position pos:line="41" pos:column="37"/></operator><name pos:line="41" pos:column="34">restart_time<pos:position pos:line="41" pos:column="46"/></name></name> <operator pos:line="41" pos:column="47">=<pos:position pos:line="41" pos:column="48"/></operator> <call><name pos:line="41" pos:column="49">apr_time_now<pos:position pos:line="41" pos:column="61"/></name><argument_list pos:line="41" pos:column="61">()<pos:position pos:line="41" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="64"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="43" pos:column="5">apr_pool_cleanup_register<pos:position pos:line="43" pos:column="30"/></name><argument_list pos:line="43" pos:column="30">(<argument><expr><name pos:line="43" pos:column="31">p<pos:position pos:line="43" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="34">NULL<pos:position pos:line="43" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="40">ap_cleanup_scoreboard<pos:position pos:line="43" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="63">apr_pool_cleanup_null<pos:position pos:line="43" pos:column="84"/></name></expr></argument>)<pos:position pos:line="43" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="86"/></expr_stmt>

    <return pos:line="45" pos:column="5">return <expr><name pos:line="45" pos:column="12">OK<pos:position pos:line="45" pos:column="14"/></name></expr>;<pos:position pos:line="45" pos:column="15"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
