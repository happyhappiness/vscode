<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3199_httpd-2.2.11.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">ENCODING<pos:position pos:line="1" pos:column="15"/></name> <modifier pos:line="1" pos:column="16">*<pos:position pos:line="1" pos:column="17"/></modifier><name pos:line="1" pos:column="17">NS<pos:position pos:line="1" pos:column="19"/></name></type>(<name pos:line="1" pos:column="20">XmlGetUtf16InternalEncoding<pos:position pos:line="1" pos:column="47"/></name>)<parameter_list pos:line="1" pos:column="48">(<parameter><decl><type><name pos:line="1" pos:column="49">void<pos:position pos:line="1" pos:column="53"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">XML_BYTE_ORDER<pos:position pos:line="3" pos:column="19"/></name> <operator pos:line="3" pos:column="20">==<pos:position pos:line="3" pos:column="22"/></operator> <literal type="number" pos:line="3" pos:column="23">12<pos:position pos:line="3" pos:column="25"/></literal></expr></cpp:if>
  <return pos:line="4" pos:column="3">return <expr><operator pos:line="4" pos:column="10">&amp;<pos:position pos:line="4" pos:column="15"/></operator><call><name pos:line="4" pos:column="11">ns<pos:position pos:line="4" pos:column="13"/></name><argument_list pos:line="4" pos:column="13">(<argument><expr><name pos:line="4" pos:column="14">internal_little2_encoding<pos:position pos:line="4" pos:column="39"/></name></expr></argument>)<pos:position pos:line="4" pos:column="40"/></argument_list></call><operator pos:line="4" pos:column="40">.<pos:position pos:line="4" pos:column="41"/></operator><name pos:line="4" pos:column="41">enc<pos:position pos:line="4" pos:column="44"/></name></expr>;<pos:position pos:line="4" pos:column="45"/></return>
<cpp:elif pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">elif<pos:position pos:line="5" pos:column="6"/></cpp:directive> <expr><name pos:line="5" pos:column="7">XML_BYTE_ORDER<pos:position pos:line="5" pos:column="21"/></name> <operator pos:line="5" pos:column="22">==<pos:position pos:line="5" pos:column="24"/></operator> <literal type="number" pos:line="5" pos:column="25">21<pos:position pos:line="5" pos:column="27"/></literal></expr></cpp:elif>
  <return pos:line="6" pos:column="3">return <expr><operator pos:line="6" pos:column="10">&amp;<pos:position pos:line="6" pos:column="15"/></operator><call><name pos:line="6" pos:column="11">ns<pos:position pos:line="6" pos:column="13"/></name><argument_list pos:line="6" pos:column="13">(<argument><expr><name pos:line="6" pos:column="14">internal_big2_encoding<pos:position pos:line="6" pos:column="36"/></name></expr></argument>)<pos:position pos:line="6" pos:column="37"/></argument_list></call><operator pos:line="6" pos:column="37">.<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="38">enc<pos:position pos:line="6" pos:column="41"/></name></expr>;<pos:position pos:line="6" pos:column="42"/></return>
<cpp:else pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">else<pos:position pos:line="7" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">short<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">n<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><literal type="number" pos:line="8" pos:column="19">1<pos:position pos:line="8" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
  <return pos:line="9" pos:column="3">return <expr><ternary><condition><expr><operator pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></operator><operator pos:line="9" pos:column="11">(<pos:position pos:line="9" pos:column="12"/></operator><specifier pos:line="9" pos:column="12">const<pos:position pos:line="9" pos:column="17"/></specifier> <name pos:line="9" pos:column="18">char<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">*<pos:position pos:line="9" pos:column="24"/></operator><operator pos:line="9" pos:column="24">)<pos:position pos:line="9" pos:column="25"/></operator><operator pos:line="9" pos:column="25">&amp;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="26">n<pos:position pos:line="9" pos:column="27"/></name></expr> ?<pos:position pos:line="9" pos:column="29"/></condition><then pos:line="9" pos:column="29"> <expr><operator pos:line="9" pos:column="30">&amp;<pos:position pos:line="9" pos:column="35"/></operator><call><name pos:line="9" pos:column="31">ns<pos:position pos:line="9" pos:column="33"/></name><argument_list pos:line="9" pos:column="33">(<argument><expr><name pos:line="9" pos:column="34">internal_little2_encoding<pos:position pos:line="9" pos:column="59"/></name></expr></argument>)<pos:position pos:line="9" pos:column="60"/></argument_list></call><operator pos:line="9" pos:column="60">.<pos:position pos:line="9" pos:column="61"/></operator><name pos:line="9" pos:column="61">enc<pos:position pos:line="9" pos:column="64"/></name></expr> <pos:position pos:line="9" pos:column="65"/></then><else pos:line="9" pos:column="65">: <expr><operator pos:line="9" pos:column="67">&amp;<pos:position pos:line="9" pos:column="72"/></operator><call><name pos:line="9" pos:column="68">ns<pos:position pos:line="9" pos:column="70"/></name><argument_list pos:line="9" pos:column="70">(<argument><expr><name pos:line="9" pos:column="71">internal_big2_encoding<pos:position pos:line="9" pos:column="93"/></name></expr></argument>)<pos:position pos:line="9" pos:column="94"/></argument_list></call><operator pos:line="9" pos:column="94">.<pos:position pos:line="9" pos:column="95"/></operator><name pos:line="9" pos:column="95">enc<pos:position pos:line="9" pos:column="98"/></name></expr></else></ternary></expr>;<pos:position pos:line="9" pos:column="99"/></return>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
