<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3138_httpd-2.2.23.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">enum<pos:position pos:line="1" pos:column="5"/></name> <name pos:line="1" pos:column="6">XML_Status<pos:position pos:line="1" pos:column="16"/></name></name> <name pos:line="1" pos:column="17">XMLCALL<pos:position pos:line="1" pos:column="24"/></name></type>
<name pos:line="2" pos:column="1">XML_Parse<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">XML_Parser<pos:position pos:line="2" pos:column="21"/></name></type> <name pos:line="2" pos:column="22">parser<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">s<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">int<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">len<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">int<pos:position pos:line="2" pos:column="57"/></name></type> <name pos:line="2" pos:column="58">isFinal<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name pos:line="4" pos:column="7">len<pos:position pos:line="4" pos:column="10"/></name> <operator pos:line="4" pos:column="11">==<pos:position pos:line="4" pos:column="13"/></operator> <literal type="number" pos:line="4" pos:column="14">0<pos:position pos:line="4" pos:column="15"/></literal></expr>)<pos:position pos:line="4" pos:column="16"/></condition><then pos:line="4" pos:column="16"> <block pos:line="4" pos:column="17">{
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">isFinal<pos:position pos:line="5" pos:column="17"/></name></expr>)<pos:position pos:line="5" pos:column="18"/></condition><then pos:line="5" pos:column="18">
      <block type="pseudo"><return pos:line="6" pos:column="7">return <expr><name pos:line="6" pos:column="14">XML_STATUS_OK<pos:position pos:line="6" pos:column="27"/></name></expr>;<pos:position pos:line="6" pos:column="28"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="7" pos:column="5">positionPtr<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">=<pos:position pos:line="7" pos:column="18"/></operator> <name pos:line="7" pos:column="19">bufferPtr<pos:position pos:line="7" pos:column="28"/></name></expr>;<pos:position pos:line="7" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="8" pos:column="5">errorCode<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">=<pos:position pos:line="8" pos:column="16"/></operator> <call><name pos:line="8" pos:column="17">processor<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">parser<pos:position pos:line="8" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="35">bufferPtr<pos:position pos:line="8" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="46">parseEndPtr<pos:position pos:line="8" pos:column="57"/></name> <operator pos:line="8" pos:column="58">=<pos:position pos:line="8" pos:column="59"/></operator> <name pos:line="8" pos:column="60">bufferEnd<pos:position pos:line="8" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="71">0<pos:position pos:line="8" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="74"/></expr_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">errorCode<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">==<pos:position pos:line="9" pos:column="21"/></operator> <name pos:line="9" pos:column="22">XML_ERROR_NONE<pos:position pos:line="9" pos:column="36"/></name></expr>)<pos:position pos:line="9" pos:column="37"/></condition><then pos:line="9" pos:column="37">
      <block type="pseudo"><return pos:line="10" pos:column="7">return <expr><name pos:line="10" pos:column="14">XML_STATUS_OK<pos:position pos:line="10" pos:column="27"/></name></expr>;<pos:position pos:line="10" pos:column="28"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="11" pos:column="5">eventEndPtr<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">=<pos:position pos:line="11" pos:column="18"/></operator> <name pos:line="11" pos:column="19">eventPtr<pos:position pos:line="11" pos:column="27"/></name></expr>;<pos:position pos:line="11" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">processor<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">=<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">errorProcessor<pos:position pos:line="12" pos:column="31"/></name></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt>
    <return pos:line="13" pos:column="5">return <expr><name pos:line="13" pos:column="12">XML_STATUS_ERROR<pos:position pos:line="13" pos:column="28"/></name></expr>;<pos:position pos:line="13" pos:column="29"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then>
<cpp:ifndef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifndef<pos:position pos:line="15" pos:column="8"/></cpp:directive> <name pos:line="15" pos:column="9">XML_CONTEXT_BYTES<pos:position pos:line="15" pos:column="26"/></name></cpp:ifndef>
  <elseif pos:line="16" pos:column="3">else <if pos:line="16" pos:column="8">if <condition pos:line="16" pos:column="11">(<expr><name pos:line="16" pos:column="12">bufferPtr<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">==<pos:position pos:line="16" pos:column="24"/></operator> <name pos:line="16" pos:column="25">bufferEnd<pos:position pos:line="16" pos:column="34"/></name></expr>)<pos:position pos:line="16" pos:column="35"/></condition><then pos:line="16" pos:column="35"> <block pos:line="16" pos:column="36">{
    <decl_stmt><decl><type><specifier pos:line="17" pos:column="5">const<pos:position pos:line="17" pos:column="10"/></specifier> <name pos:line="17" pos:column="11">char<pos:position pos:line="17" pos:column="15"/></name> <modifier pos:line="17" pos:column="16">*<pos:position pos:line="17" pos:column="17"/></modifier></type><name pos:line="17" pos:column="17">end<pos:position pos:line="17" pos:column="20"/></name></decl>;<pos:position pos:line="17" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">int<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">nLeftOver<pos:position pos:line="18" pos:column="18"/></name></decl>;<pos:position pos:line="18" pos:column="19"/></decl_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">parseEndByteIndex<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">+=<pos:position pos:line="19" pos:column="25"/></operator> <name pos:line="19" pos:column="26">len<pos:position pos:line="19" pos:column="29"/></name></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">positionPtr<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <name pos:line="20" pos:column="19">s<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">isFinal<pos:position pos:line="21" pos:column="16"/></name></expr>)<pos:position pos:line="21" pos:column="17"/></condition><then pos:line="21" pos:column="17"> <block pos:line="21" pos:column="18">{
      <expr_stmt><expr><name pos:line="22" pos:column="7">errorCode<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <call><name pos:line="22" pos:column="19">processor<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">parser<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="37">s<pos:position pos:line="22" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="40">parseEndPtr<pos:position pos:line="22" pos:column="51"/></name> <operator pos:line="22" pos:column="52">=<pos:position pos:line="22" pos:column="53"/></operator> <name pos:line="22" pos:column="54">s<pos:position pos:line="22" pos:column="55"/></name> <operator pos:line="22" pos:column="56">+<pos:position pos:line="22" pos:column="57"/></operator> <name pos:line="22" pos:column="58">len<pos:position pos:line="22" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="63">0<pos:position pos:line="22" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="66"/></expr_stmt>
      <if pos:line="23" pos:column="7">if <condition pos:line="23" pos:column="10">(<expr><name pos:line="23" pos:column="11">errorCode<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">==<pos:position pos:line="23" pos:column="23"/></operator> <name pos:line="23" pos:column="24">XML_ERROR_NONE<pos:position pos:line="23" pos:column="38"/></name></expr>)<pos:position pos:line="23" pos:column="39"/></condition><then pos:line="23" pos:column="39">
        <block type="pseudo"><return pos:line="24" pos:column="9">return <expr><name pos:line="24" pos:column="16">XML_STATUS_OK<pos:position pos:line="24" pos:column="29"/></name></expr>;<pos:position pos:line="24" pos:column="30"/></return></block></then></if>
      <expr_stmt><expr><name pos:line="25" pos:column="7">eventEndPtr<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">=<pos:position pos:line="25" pos:column="20"/></operator> <name pos:line="25" pos:column="21">eventPtr<pos:position pos:line="25" pos:column="29"/></name></expr>;<pos:position pos:line="25" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name pos:line="26" pos:column="7">processor<pos:position pos:line="26" pos:column="16"/></name> <operator pos:line="26" pos:column="17">=<pos:position pos:line="26" pos:column="18"/></operator> <name pos:line="26" pos:column="19">errorProcessor<pos:position pos:line="26" pos:column="33"/></name></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>
      <return pos:line="27" pos:column="7">return <expr><name pos:line="27" pos:column="14">XML_STATUS_ERROR<pos:position pos:line="27" pos:column="30"/></name></expr>;<pos:position pos:line="27" pos:column="31"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="29" pos:column="5">errorCode<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">=<pos:position pos:line="29" pos:column="16"/></operator> <call><name pos:line="29" pos:column="17">processor<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name pos:line="29" pos:column="27">parser<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="35">s<pos:position pos:line="29" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="38">parseEndPtr<pos:position pos:line="29" pos:column="49"/></name> <operator pos:line="29" pos:column="50">=<pos:position pos:line="29" pos:column="51"/></operator> <name pos:line="29" pos:column="52">s<pos:position pos:line="29" pos:column="53"/></name> <operator pos:line="29" pos:column="54">+<pos:position pos:line="29" pos:column="55"/></operator> <name pos:line="29" pos:column="56">len<pos:position pos:line="29" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="61">&amp;<pos:position pos:line="29" pos:column="66"/></operator><name pos:line="29" pos:column="62">end<pos:position pos:line="29" pos:column="65"/></name></expr></argument>)<pos:position pos:line="29" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="67"/></expr_stmt>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">errorCode<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">!=<pos:position pos:line="30" pos:column="21"/></operator> <name pos:line="30" pos:column="22">XML_ERROR_NONE<pos:position pos:line="30" pos:column="36"/></name></expr>)<pos:position pos:line="30" pos:column="37"/></condition><then pos:line="30" pos:column="37"> <block pos:line="30" pos:column="38">{
      <expr_stmt><expr><name pos:line="31" pos:column="7">eventEndPtr<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">=<pos:position pos:line="31" pos:column="20"/></operator> <name pos:line="31" pos:column="21">eventPtr<pos:position pos:line="31" pos:column="29"/></name></expr>;<pos:position pos:line="31" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name pos:line="32" pos:column="7">processor<pos:position pos:line="32" pos:column="16"/></name> <operator pos:line="32" pos:column="17">=<pos:position pos:line="32" pos:column="18"/></operator> <name pos:line="32" pos:column="19">errorProcessor<pos:position pos:line="32" pos:column="33"/></name></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>
      <return pos:line="33" pos:column="7">return <expr><name pos:line="33" pos:column="14">XML_STATUS_ERROR<pos:position pos:line="33" pos:column="30"/></name></expr>;<pos:position pos:line="33" pos:column="31"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">XmlUpdatePosition<pos:position pos:line="35" pos:column="22"/></name><argument_list pos:line="35" pos:column="22">(<argument><expr><name pos:line="35" pos:column="23">encoding<pos:position pos:line="35" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="33">positionPtr<pos:position pos:line="35" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="46">end<pos:position pos:line="35" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="51">&amp;<pos:position pos:line="35" pos:column="56"/></operator><name pos:line="35" pos:column="52">position<pos:position pos:line="35" pos:column="60"/></name></expr></argument>)<pos:position pos:line="35" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name pos:line="36" pos:column="5">positionPtr<pos:position pos:line="36" pos:column="16"/></name> <operator pos:line="36" pos:column="17">=<pos:position pos:line="36" pos:column="18"/></operator> <name pos:line="36" pos:column="19">end<pos:position pos:line="36" pos:column="22"/></name></expr>;<pos:position pos:line="36" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="37" pos:column="5">nLeftOver<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator> <name pos:line="37" pos:column="17">s<pos:position pos:line="37" pos:column="18"/></name> <operator pos:line="37" pos:column="19">+<pos:position pos:line="37" pos:column="20"/></operator> <name pos:line="37" pos:column="21">len<pos:position pos:line="37" pos:column="24"/></name> <operator pos:line="37" pos:column="25">-<pos:position pos:line="37" pos:column="26"/></operator> <name pos:line="37" pos:column="27">end<pos:position pos:line="37" pos:column="30"/></name></expr>;<pos:position pos:line="37" pos:column="31"/></expr_stmt>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">nLeftOver<pos:position pos:line="38" pos:column="18"/></name></expr>)<pos:position pos:line="38" pos:column="19"/></condition><then pos:line="38" pos:column="19"> <block pos:line="38" pos:column="20">{
      <if pos:line="39" pos:column="7">if <condition pos:line="39" pos:column="10">(<expr><name pos:line="39" pos:column="11">buffer<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">==<pos:position pos:line="39" pos:column="20"/></operator> <name pos:line="39" pos:column="21">NULL<pos:position pos:line="39" pos:column="25"/></name> <operator pos:line="39" pos:column="26">||<pos:position pos:line="39" pos:column="28"/></operator> <name pos:line="39" pos:column="29">nLeftOver<pos:position pos:line="39" pos:column="38"/></name> <operator pos:line="39" pos:column="39">&gt;<pos:position pos:line="39" pos:column="43"/></operator> <name pos:line="39" pos:column="41">bufferLim<pos:position pos:line="39" pos:column="50"/></name> <operator pos:line="39" pos:column="51">-<pos:position pos:line="39" pos:column="52"/></operator> <name pos:line="39" pos:column="53">buffer<pos:position pos:line="39" pos:column="59"/></name></expr>)<pos:position pos:line="39" pos:column="60"/></condition><then pos:line="39" pos:column="60"> <block pos:line="39" pos:column="61">{
        <comment type="block" pos:line="40" pos:column="9">/* FIXME avoid integer overflow */</comment>
        <decl_stmt><decl><type><name pos:line="41" pos:column="9">char<pos:position pos:line="41" pos:column="13"/></name> <modifier pos:line="41" pos:column="14">*<pos:position pos:line="41" pos:column="15"/></modifier></type><name pos:line="41" pos:column="15">temp<pos:position pos:line="41" pos:column="19"/></name></decl>;<pos:position pos:line="41" pos:column="20"/></decl_stmt>
        <expr_stmt><expr><name pos:line="42" pos:column="9">temp<pos:position pos:line="42" pos:column="13"/></name> <operator pos:line="42" pos:column="14">=<pos:position pos:line="42" pos:column="15"/></operator> <operator pos:line="42" pos:column="16">(<pos:position pos:line="42" pos:column="17"/></operator><ternary><condition><expr><name pos:line="42" pos:column="17">buffer<pos:position pos:line="42" pos:column="23"/></name> <operator pos:line="42" pos:column="24">==<pos:position pos:line="42" pos:column="26"/></operator> <name pos:line="42" pos:column="27">NULL<pos:position pos:line="42" pos:column="31"/></name></expr>
                ?<pos:position pos:line="43" pos:column="18"/></condition><then pos:line="43" pos:column="18"> <expr><operator pos:line="43" pos:column="19">(<pos:position pos:line="43" pos:column="20"/></operator><name pos:line="43" pos:column="20">char<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">*<pos:position pos:line="43" pos:column="26"/></operator><operator pos:line="43" pos:column="26">)<pos:position pos:line="43" pos:column="27"/></operator><call><name pos:line="43" pos:column="27">MALLOC<pos:position pos:line="43" pos:column="33"/></name><argument_list pos:line="43" pos:column="33">(<argument><expr><name pos:line="43" pos:column="34">len<pos:position pos:line="43" pos:column="37"/></name> <operator pos:line="43" pos:column="38">*<pos:position pos:line="43" pos:column="39"/></operator> <literal type="number" pos:line="43" pos:column="40">2<pos:position pos:line="43" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="42"/></argument_list></call></expr>
                <pos:position pos:line="44" pos:column="17"/></then><else pos:line="44" pos:column="17">: <expr><operator pos:line="44" pos:column="19">(<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="20">char<pos:position pos:line="44" pos:column="24"/></name> <operator pos:line="44" pos:column="25">*<pos:position pos:line="44" pos:column="26"/></operator><operator pos:line="44" pos:column="26">)<pos:position pos:line="44" pos:column="27"/></operator><call><name pos:line="44" pos:column="27">REALLOC<pos:position pos:line="44" pos:column="34"/></name><argument_list pos:line="44" pos:column="34">(<argument><expr><name pos:line="44" pos:column="35">buffer<pos:position pos:line="44" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="43">len<pos:position pos:line="44" pos:column="46"/></name> <operator pos:line="44" pos:column="47">*<pos:position pos:line="44" pos:column="48"/></operator> <literal type="number" pos:line="44" pos:column="49">2<pos:position pos:line="44" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="51"/></argument_list></call></expr></else></ternary><operator pos:line="44" pos:column="51">)<pos:position pos:line="44" pos:column="52"/></operator></expr>;<pos:position pos:line="44" pos:column="53"/></expr_stmt>
        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">temp<pos:position pos:line="45" pos:column="17"/></name> <operator pos:line="45" pos:column="18">==<pos:position pos:line="45" pos:column="20"/></operator> <name pos:line="45" pos:column="21">NULL<pos:position pos:line="45" pos:column="25"/></name></expr>)<pos:position pos:line="45" pos:column="26"/></condition><then pos:line="45" pos:column="26"> <block pos:line="45" pos:column="27">{
          <expr_stmt><expr><name pos:line="46" pos:column="11">errorCode<pos:position pos:line="46" pos:column="20"/></name> <operator pos:line="46" pos:column="21">=<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="23">XML_ERROR_NO_MEMORY<pos:position pos:line="46" pos:column="42"/></name></expr>;<pos:position pos:line="46" pos:column="43"/></expr_stmt>
          <return pos:line="47" pos:column="11">return <expr><name pos:line="47" pos:column="18">XML_STATUS_ERROR<pos:position pos:line="47" pos:column="34"/></name></expr>;<pos:position pos:line="47" pos:column="35"/></return>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="49" pos:column="9">buffer<pos:position pos:line="49" pos:column="15"/></name> <operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator> <name pos:line="49" pos:column="18">temp<pos:position pos:line="49" pos:column="22"/></name></expr>;<pos:position pos:line="49" pos:column="23"/></expr_stmt>
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">!<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="14">buffer<pos:position pos:line="50" pos:column="20"/></name></expr>)<pos:position pos:line="50" pos:column="21"/></condition><then pos:line="50" pos:column="21"> <block pos:line="50" pos:column="22">{
          <expr_stmt><expr><name pos:line="51" pos:column="11">errorCode<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">=<pos:position pos:line="51" pos:column="22"/></operator> <name pos:line="51" pos:column="23">XML_ERROR_NO_MEMORY<pos:position pos:line="51" pos:column="42"/></name></expr>;<pos:position pos:line="51" pos:column="43"/></expr_stmt>
          <expr_stmt><expr><name pos:line="52" pos:column="11">eventPtr<pos:position pos:line="52" pos:column="19"/></name> <operator pos:line="52" pos:column="20">=<pos:position pos:line="52" pos:column="21"/></operator> <name pos:line="52" pos:column="22">eventEndPtr<pos:position pos:line="52" pos:column="33"/></name> <operator pos:line="52" pos:column="34">=<pos:position pos:line="52" pos:column="35"/></operator> <name pos:line="52" pos:column="36">NULL<pos:position pos:line="52" pos:column="40"/></name></expr>;<pos:position pos:line="52" pos:column="41"/></expr_stmt>
          <expr_stmt><expr><name pos:line="53" pos:column="11">processor<pos:position pos:line="53" pos:column="20"/></name> <operator pos:line="53" pos:column="21">=<pos:position pos:line="53" pos:column="22"/></operator> <name pos:line="53" pos:column="23">errorProcessor<pos:position pos:line="53" pos:column="37"/></name></expr>;<pos:position pos:line="53" pos:column="38"/></expr_stmt>
          <return pos:line="54" pos:column="11">return <expr><name pos:line="54" pos:column="18">XML_STATUS_ERROR<pos:position pos:line="54" pos:column="34"/></name></expr>;<pos:position pos:line="54" pos:column="35"/></return>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="56" pos:column="9">bufferLim<pos:position pos:line="56" pos:column="18"/></name> <operator pos:line="56" pos:column="19">=<pos:position pos:line="56" pos:column="20"/></operator> <name pos:line="56" pos:column="21">buffer<pos:position pos:line="56" pos:column="27"/></name> <operator pos:line="56" pos:column="28">+<pos:position pos:line="56" pos:column="29"/></operator> <name pos:line="56" pos:column="30">len<pos:position pos:line="56" pos:column="33"/></name> <operator pos:line="56" pos:column="34">*<pos:position pos:line="56" pos:column="35"/></operator> <literal type="number" pos:line="56" pos:column="36">2<pos:position pos:line="56" pos:column="37"/></literal></expr>;<pos:position pos:line="56" pos:column="38"/></expr_stmt>
      }<pos:position pos:line="57" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="58" pos:column="7">memcpy<pos:position pos:line="58" pos:column="13"/></name><argument_list pos:line="58" pos:column="13">(<argument><expr><name pos:line="58" pos:column="14">buffer<pos:position pos:line="58" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="22">end<pos:position pos:line="58" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="27">nLeftOver<pos:position pos:line="58" pos:column="36"/></name></expr></argument>)<pos:position pos:line="58" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><name pos:line="59" pos:column="7">bufferPtr<pos:position pos:line="59" pos:column="16"/></name> <operator pos:line="59" pos:column="17">=<pos:position pos:line="59" pos:column="18"/></operator> <name pos:line="59" pos:column="19">buffer<pos:position pos:line="59" pos:column="25"/></name></expr>;<pos:position pos:line="59" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name pos:line="60" pos:column="7">bufferEnd<pos:position pos:line="60" pos:column="16"/></name> <operator pos:line="60" pos:column="17">=<pos:position pos:line="60" pos:column="18"/></operator> <name pos:line="60" pos:column="19">buffer<pos:position pos:line="60" pos:column="25"/></name> <operator pos:line="60" pos:column="26">+<pos:position pos:line="60" pos:column="27"/></operator> <name pos:line="60" pos:column="28">nLeftOver<pos:position pos:line="60" pos:column="37"/></name></expr>;<pos:position pos:line="60" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>
    <return pos:line="62" pos:column="5">return <expr><name pos:line="62" pos:column="12">XML_STATUS_OK<pos:position pos:line="62" pos:column="25"/></name></expr>;<pos:position pos:line="62" pos:column="26"/></return>
  }<pos:position pos:line="63" pos:column="4"/></block></then></if></elseif>
<cpp:endif pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">endif<pos:position pos:line="64" pos:column="7"/></cpp:directive></cpp:endif>  <comment type="block" pos:line="64" pos:column="9">/* not defined XML_CONTEXT_BYTES */</comment>
  <else pos:line="65" pos:column="3">else <block pos:line="65" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="66" pos:column="5">void<pos:position pos:line="66" pos:column="9"/></name> <modifier pos:line="66" pos:column="10">*<pos:position pos:line="66" pos:column="11"/></modifier></type><name pos:line="66" pos:column="11">buff<pos:position pos:line="66" pos:column="15"/></name> <init pos:line="66" pos:column="16">= <expr><call><name pos:line="66" pos:column="18">XML_GetBuffer<pos:position pos:line="66" pos:column="31"/></name><argument_list pos:line="66" pos:column="31">(<argument><expr><name pos:line="66" pos:column="32">parser<pos:position pos:line="66" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="40">len<pos:position pos:line="66" pos:column="43"/></name></expr></argument>)<pos:position pos:line="66" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="66" pos:column="45"/></decl_stmt>
    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><name pos:line="67" pos:column="9">buff<pos:position pos:line="67" pos:column="13"/></name> <operator pos:line="67" pos:column="14">==<pos:position pos:line="67" pos:column="16"/></operator> <name pos:line="67" pos:column="17">NULL<pos:position pos:line="67" pos:column="21"/></name></expr>)<pos:position pos:line="67" pos:column="22"/></condition><then pos:line="67" pos:column="22">
      <block type="pseudo"><return pos:line="68" pos:column="7">return <expr><name pos:line="68" pos:column="14">XML_STATUS_ERROR<pos:position pos:line="68" pos:column="30"/></name></expr>;<pos:position pos:line="68" pos:column="31"/></return></block></then>
    <else pos:line="69" pos:column="5">else <block pos:line="69" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="70" pos:column="7">memcpy<pos:position pos:line="70" pos:column="13"/></name><argument_list pos:line="70" pos:column="13">(<argument><expr><name pos:line="70" pos:column="14">buff<pos:position pos:line="70" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="20">s<pos:position pos:line="70" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="23">len<pos:position pos:line="70" pos:column="26"/></name></expr></argument>)<pos:position pos:line="70" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="28"/></expr_stmt>
      <return pos:line="71" pos:column="7">return <expr><call><name pos:line="71" pos:column="14">XML_ParseBuffer<pos:position pos:line="71" pos:column="29"/></name><argument_list pos:line="71" pos:column="29">(<argument><expr><name pos:line="71" pos:column="30">parser<pos:position pos:line="71" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="38">len<pos:position pos:line="71" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="43">isFinal<pos:position pos:line="71" pos:column="50"/></name></expr></argument>)<pos:position pos:line="71" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="52"/></return>
    }<pos:position pos:line="72" pos:column="6"/></block></else></if>
  }<pos:position pos:line="73" pos:column="4"/></block></else></if>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
