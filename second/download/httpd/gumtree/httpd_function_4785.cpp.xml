<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_4785.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">ssl_log_cert_error<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">file<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">int<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">line<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">int<pos:position pos:line="1" pos:column="63"/></name></type> <name pos:line="1" pos:column="64">level<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="2" pos:column="32">apr_status_t<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">rv<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="49">const<pos:position pos:line="2" pos:column="54"/></specifier> <name pos:line="2" pos:column="55">server_rec<pos:position pos:line="2" pos:column="65"/></name> <modifier pos:line="2" pos:column="66">*<pos:position pos:line="2" pos:column="67"/></modifier></type><name pos:line="2" pos:column="67">s<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>,
                               <parameter><decl><type><specifier pos:line="3" pos:column="32">const<pos:position pos:line="3" pos:column="37"/></specifier> <name pos:line="3" pos:column="38">conn_rec<pos:position pos:line="3" pos:column="46"/></name> <modifier pos:line="3" pos:column="47">*<pos:position pos:line="3" pos:column="48"/></modifier></type><name pos:line="3" pos:column="48">c<pos:position pos:line="3" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="51">const<pos:position pos:line="3" pos:column="56"/></specifier> <name pos:line="3" pos:column="57">request_rec<pos:position pos:line="3" pos:column="68"/></name> <modifier pos:line="3" pos:column="69">*<pos:position pos:line="3" pos:column="70"/></modifier></type><name pos:line="3" pos:column="70">r<pos:position pos:line="3" pos:column="71"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="4" pos:column="32">apr_pool_t<pos:position pos:line="4" pos:column="42"/></name> <modifier pos:line="4" pos:column="43">*<pos:position pos:line="4" pos:column="44"/></modifier></type><name pos:line="4" pos:column="44">p<pos:position pos:line="4" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="47">X509<pos:position pos:line="4" pos:column="51"/></name> <modifier pos:line="4" pos:column="52">*<pos:position pos:line="4" pos:column="53"/></modifier></type><name pos:line="4" pos:column="53">cert<pos:position pos:line="4" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="4" pos:column="59">const<pos:position pos:line="4" pos:column="64"/></specifier> <name pos:line="4" pos:column="65">char<pos:position pos:line="4" pos:column="69"/></name> <modifier pos:line="4" pos:column="70">*<pos:position pos:line="4" pos:column="71"/></modifier></type><name pos:line="4" pos:column="71">format<pos:position pos:line="4" pos:column="77"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="5" pos:column="32">va_list<pos:position pos:line="5" pos:column="39"/></name></type> <name pos:line="5" pos:column="40">ap<pos:position pos:line="5" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="43"/></parameter_list>
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name><name pos:line="7" pos:column="10">buf<pos:position pos:line="7" pos:column="13"/></name><index pos:line="7" pos:column="13">[<expr><name pos:line="7" pos:column="14">HUGE_STRING_LEN<pos:position pos:line="7" pos:column="29"/></name></expr>]<pos:position pos:line="7" pos:column="30"/></index></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">msglen<pos:position pos:line="8" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="17">n<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">name<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">apr_vsnprintf<pos:position pos:line="11" pos:column="18"/></name><argument_list pos:line="11" pos:column="18">(<argument><expr><name pos:line="11" pos:column="19">buf<pos:position pos:line="11" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="24">sizeof <name pos:line="11" pos:column="31">buf<pos:position pos:line="11" pos:column="34"/></name></sizeof></expr></argument>, <argument><expr><name pos:line="11" pos:column="36">format<pos:position pos:line="11" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="44">ap<pos:position pos:line="11" pos:column="46"/></name></expr></argument>)<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><name pos:line="13" pos:column="5">msglen<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <call><name pos:line="13" pos:column="14">strlen<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name pos:line="13" pos:column="21">buf<pos:position pos:line="13" pos:column="24"/></name></expr></argument>)<pos:position pos:line="13" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">cert<pos:position pos:line="15" pos:column="13"/></name></expr>)<pos:position pos:line="15" pos:column="14"/></condition><then pos:line="15" pos:column="14"> <block pos:line="15" pos:column="15">{
        <decl_stmt><decl><type><name pos:line="16" pos:column="9">BIO<pos:position pos:line="16" pos:column="12"/></name> <modifier pos:line="16" pos:column="13">*<pos:position pos:line="16" pos:column="14"/></modifier></type><name pos:line="16" pos:column="14">bio<pos:position pos:line="16" pos:column="17"/></name> <init pos:line="16" pos:column="18">= <expr><call><name pos:line="16" pos:column="20">BIO_new<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><call><name pos:line="16" pos:column="28">BIO_s_mem<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">()<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="41"/></decl_stmt>

        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">bio<pos:position pos:line="18" pos:column="16"/></name></expr>)<pos:position pos:line="18" pos:column="17"/></condition><then pos:line="18" pos:column="17"> <block pos:line="18" pos:column="18">{
            <comment type="block" pos:line="19" pos:column="13">/*
             * Limit the maximum length of the subject and issuer DN strings
             * in the log message. 300 characters should always be sufficient
             * for holding both the timestamp, module name, pid etc. stuff
             * at the beginning of the line and the trailing information about
             * serial, notbefore and notafter.
             */</comment>
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">int<pos:position pos:line="26" pos:column="16"/></name></type> <name pos:line="26" pos:column="17">maxdnlen<pos:position pos:line="26" pos:column="25"/></name> <init pos:line="26" pos:column="26">= <expr><operator pos:line="26" pos:column="28">(<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="29">HUGE_STRING_LEN<pos:position pos:line="26" pos:column="44"/></name> <operator pos:line="26" pos:column="45">-<pos:position pos:line="26" pos:column="46"/></operator> <name pos:line="26" pos:column="47">msglen<pos:position pos:line="26" pos:column="53"/></name> <operator pos:line="26" pos:column="54">-<pos:position pos:line="26" pos:column="55"/></operator> <literal type="number" pos:line="26" pos:column="56">300<pos:position pos:line="26" pos:column="59"/></literal><operator pos:line="26" pos:column="59">)<pos:position pos:line="26" pos:column="60"/></operator> <operator pos:line="26" pos:column="61">/<pos:position pos:line="26" pos:column="62"/></operator> <literal type="number" pos:line="26" pos:column="63">2<pos:position pos:line="26" pos:column="64"/></literal></expr></init></decl>;<pos:position pos:line="26" pos:column="65"/></decl_stmt>

            <expr_stmt><expr><call><name pos:line="28" pos:column="13">BIO_puts<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><name pos:line="28" pos:column="22">bio<pos:position pos:line="28" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="27">" [subject: "<pos:position pos:line="28" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name pos:line="29" pos:column="13">name<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">=<pos:position pos:line="29" pos:column="19"/></operator> <call><name pos:line="29" pos:column="20">SSL_X509_NAME_to_string<pos:position pos:line="29" pos:column="43"/></name><argument_list pos:line="29" pos:column="43">(<argument><expr><name pos:line="29" pos:column="44">p<pos:position pos:line="29" pos:column="45"/></name></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="47">X509_get_subject_name<pos:position pos:line="29" pos:column="68"/></name><argument_list pos:line="29" pos:column="68">(<argument><expr><name pos:line="29" pos:column="69">cert<pos:position pos:line="29" pos:column="73"/></name></expr></argument>)<pos:position pos:line="29" pos:column="74"/></argument_list></call></expr></argument>,
                                           <argument><expr><name pos:line="30" pos:column="44">maxdnlen<pos:position pos:line="30" pos:column="52"/></name></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="54"/></expr_stmt>
            <if pos:line="31" pos:column="13">if <condition pos:line="31" pos:column="16">(<expr><operator pos:line="31" pos:column="17">!<pos:position pos:line="31" pos:column="18"/></operator><call><name pos:line="31" pos:column="18">strIsEmpty<pos:position pos:line="31" pos:column="28"/></name><argument_list pos:line="31" pos:column="28">(<argument><expr><name pos:line="31" pos:column="29">name<pos:position pos:line="31" pos:column="33"/></name></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="35"/></condition><then pos:line="31" pos:column="35"> <block pos:line="31" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="32" pos:column="17">BIO_puts<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">(<argument><expr><name pos:line="32" pos:column="26">bio<pos:position pos:line="32" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="31">name<pos:position pos:line="32" pos:column="35"/></name></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="33" pos:column="14"/></block></then> <else pos:line="33" pos:column="15">else <block pos:line="33" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="34" pos:column="17">BIO_puts<pos:position pos:line="34" pos:column="25"/></name><argument_list pos:line="34" pos:column="25">(<argument><expr><name pos:line="34" pos:column="26">bio<pos:position pos:line="34" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="31">"-empty-"<pos:position pos:line="34" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt>
            }<pos:position pos:line="35" pos:column="14"/></block></else></if>

            <expr_stmt><expr><call><name pos:line="37" pos:column="13">BIO_puts<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><name pos:line="37" pos:column="22">bio<pos:position pos:line="37" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="27">" / issuer: "<pos:position pos:line="37" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name pos:line="38" pos:column="13">name<pos:position pos:line="38" pos:column="17"/></name> <operator pos:line="38" pos:column="18">=<pos:position pos:line="38" pos:column="19"/></operator> <call><name pos:line="38" pos:column="20">SSL_X509_NAME_to_string<pos:position pos:line="38" pos:column="43"/></name><argument_list pos:line="38" pos:column="43">(<argument><expr><name pos:line="38" pos:column="44">p<pos:position pos:line="38" pos:column="45"/></name></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="47">X509_get_issuer_name<pos:position pos:line="38" pos:column="67"/></name><argument_list pos:line="38" pos:column="67">(<argument><expr><name pos:line="38" pos:column="68">cert<pos:position pos:line="38" pos:column="72"/></name></expr></argument>)<pos:position pos:line="38" pos:column="73"/></argument_list></call></expr></argument>,
                                           <argument><expr><name pos:line="39" pos:column="44">maxdnlen<pos:position pos:line="39" pos:column="52"/></name></expr></argument>)<pos:position pos:line="39" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="54"/></expr_stmt>
            <if pos:line="40" pos:column="13">if <condition pos:line="40" pos:column="16">(<expr><operator pos:line="40" pos:column="17">!<pos:position pos:line="40" pos:column="18"/></operator><call><name pos:line="40" pos:column="18">strIsEmpty<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">(<argument><expr><name pos:line="40" pos:column="29">name<pos:position pos:line="40" pos:column="33"/></name></expr></argument>)<pos:position pos:line="40" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="35"/></condition><then pos:line="40" pos:column="35"> <block pos:line="40" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="41" pos:column="17">BIO_puts<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">(<argument><expr><name pos:line="41" pos:column="26">bio<pos:position pos:line="41" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="31">name<pos:position pos:line="41" pos:column="35"/></name></expr></argument>)<pos:position pos:line="41" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="42" pos:column="14"/></block></then> <else pos:line="42" pos:column="15">else <block pos:line="42" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="43" pos:column="17">BIO_puts<pos:position pos:line="43" pos:column="25"/></name><argument_list pos:line="43" pos:column="25">(<argument><expr><name pos:line="43" pos:column="26">bio<pos:position pos:line="43" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="31">"-empty-"<pos:position pos:line="43" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="42"/></expr_stmt>
            }<pos:position pos:line="44" pos:column="14"/></block></else></if>

            <expr_stmt><expr><call><name pos:line="46" pos:column="13">BIO_puts<pos:position pos:line="46" pos:column="21"/></name><argument_list pos:line="46" pos:column="21">(<argument><expr><name pos:line="46" pos:column="22">bio<pos:position pos:line="46" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="27">" / serial: "<pos:position pos:line="46" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="42"/></expr_stmt>
            <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">(<expr><call><name pos:line="47" pos:column="17">i2a_ASN1_INTEGER<pos:position pos:line="47" pos:column="33"/></name><argument_list pos:line="47" pos:column="33">(<argument><expr><name pos:line="47" pos:column="34">bio<pos:position pos:line="47" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="47" pos:column="39">X509_get_serialNumber<pos:position pos:line="47" pos:column="60"/></name><argument_list pos:line="47" pos:column="60">(<argument><expr><name pos:line="47" pos:column="61">cert<pos:position pos:line="47" pos:column="65"/></name></expr></argument>)<pos:position pos:line="47" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="67"/></argument_list></call> <operator pos:line="47" pos:column="68">==<pos:position pos:line="47" pos:column="70"/></operator> <operator pos:line="47" pos:column="71">-<pos:position pos:line="47" pos:column="72"/></operator><literal type="number" pos:line="47" pos:column="72">1<pos:position pos:line="47" pos:column="73"/></literal></expr>)<pos:position pos:line="47" pos:column="74"/></condition><then pos:line="47" pos:column="74">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="17">BIO_puts<pos:position pos:line="48" pos:column="25"/></name><argument_list pos:line="48" pos:column="25">(<argument><expr><name pos:line="48" pos:column="26">bio<pos:position pos:line="48" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="31">"(ERROR)"<pos:position pos:line="48" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="42"/></expr_stmt></block></then></if>

            <expr_stmt><expr><call><name pos:line="50" pos:column="13">BIO_puts<pos:position pos:line="50" pos:column="21"/></name><argument_list pos:line="50" pos:column="21">(<argument><expr><name pos:line="50" pos:column="22">bio<pos:position pos:line="50" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="27">" / notbefore: "<pos:position pos:line="50" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">ASN1_TIME_print<pos:position pos:line="51" pos:column="28"/></name><argument_list pos:line="51" pos:column="28">(<argument><expr><name pos:line="51" pos:column="29">bio<pos:position pos:line="51" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="51" pos:column="34">X509_get_notBefore<pos:position pos:line="51" pos:column="52"/></name><argument_list pos:line="51" pos:column="52">(<argument><expr><name pos:line="51" pos:column="53">cert<pos:position pos:line="51" pos:column="57"/></name></expr></argument>)<pos:position pos:line="51" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="60"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="53" pos:column="13">BIO_puts<pos:position pos:line="53" pos:column="21"/></name><argument_list pos:line="53" pos:column="21">(<argument><expr><name pos:line="53" pos:column="22">bio<pos:position pos:line="53" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="27">" / notafter: "<pos:position pos:line="53" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="44"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">ASN1_TIME_print<pos:position pos:line="54" pos:column="28"/></name><argument_list pos:line="54" pos:column="28">(<argument><expr><name pos:line="54" pos:column="29">bio<pos:position pos:line="54" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="54" pos:column="34">X509_get_notAfter<pos:position pos:line="54" pos:column="51"/></name><argument_list pos:line="54" pos:column="51">(<argument><expr><name pos:line="54" pos:column="52">cert<pos:position pos:line="54" pos:column="56"/></name></expr></argument>)<pos:position pos:line="54" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="59"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="56" pos:column="13">BIO_puts<pos:position pos:line="56" pos:column="21"/></name><argument_list pos:line="56" pos:column="21">(<argument><expr><name pos:line="56" pos:column="22">bio<pos:position pos:line="56" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="27">"]"<pos:position pos:line="56" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="32"/></expr_stmt>

            <expr_stmt><expr><name pos:line="58" pos:column="13">n<pos:position pos:line="58" pos:column="14"/></name> <operator pos:line="58" pos:column="15">=<pos:position pos:line="58" pos:column="16"/></operator> <call><name pos:line="58" pos:column="17">BIO_read<pos:position pos:line="58" pos:column="25"/></name><argument_list pos:line="58" pos:column="25">(<argument><expr><name pos:line="58" pos:column="26">bio<pos:position pos:line="58" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="31">buf<pos:position pos:line="58" pos:column="34"/></name> <operator pos:line="58" pos:column="35">+<pos:position pos:line="58" pos:column="36"/></operator> <name pos:line="58" pos:column="37">msglen<pos:position pos:line="58" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="58" pos:column="45">sizeof <name pos:line="58" pos:column="52">buf<pos:position pos:line="58" pos:column="55"/></name></sizeof> <operator pos:line="58" pos:column="56">-<pos:position pos:line="58" pos:column="57"/></operator> <name pos:line="58" pos:column="58">msglen<pos:position pos:line="58" pos:column="64"/></name> <operator pos:line="58" pos:column="65">-<pos:position pos:line="58" pos:column="66"/></operator> <literal type="number" pos:line="58" pos:column="67">1<pos:position pos:line="58" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="70"/></expr_stmt>
            <if pos:line="59" pos:column="13">if <condition pos:line="59" pos:column="16">(<expr><name pos:line="59" pos:column="17">n<pos:position pos:line="59" pos:column="18"/></name> <operator pos:line="59" pos:column="19">&gt;<pos:position pos:line="59" pos:column="23"/></operator> <literal type="number" pos:line="59" pos:column="21">0<pos:position pos:line="59" pos:column="22"/></literal></expr>)<pos:position pos:line="59" pos:column="23"/></condition><then pos:line="59" pos:column="23">
               <block type="pseudo"><expr_stmt><expr><name><name pos:line="60" pos:column="16">buf<pos:position pos:line="60" pos:column="19"/></name><index pos:line="60" pos:column="19">[<expr><name pos:line="60" pos:column="20">msglen<pos:position pos:line="60" pos:column="26"/></name> <operator pos:line="60" pos:column="27">+<pos:position pos:line="60" pos:column="28"/></operator> <name pos:line="60" pos:column="29">n<pos:position pos:line="60" pos:column="30"/></name></expr>]<pos:position pos:line="60" pos:column="31"/></index></name> <operator pos:line="60" pos:column="32">=<pos:position pos:line="60" pos:column="33"/></operator> <literal type="char" pos:line="60" pos:column="34">'\0'<pos:position pos:line="60" pos:column="38"/></literal></expr>;<pos:position pos:line="60" pos:column="39"/></expr_stmt></block></then></if>

            <expr_stmt><expr><call><name pos:line="62" pos:column="13">BIO_free<pos:position pos:line="62" pos:column="21"/></name><argument_list pos:line="62" pos:column="21">(<argument><expr><name pos:line="62" pos:column="22">bio<pos:position pos:line="62" pos:column="25"/></name></expr></argument>)<pos:position pos:line="62" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="63" pos:column="10"/></block></then></if>
    }<pos:position pos:line="64" pos:column="6"/></block></then>
    <else pos:line="65" pos:column="5">else <block pos:line="65" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">apr_snprintf<pos:position pos:line="66" pos:column="21"/></name><argument_list pos:line="66" pos:column="21">(<argument><expr><name pos:line="66" pos:column="22">buf<pos:position pos:line="66" pos:column="25"/></name> <operator pos:line="66" pos:column="26">+<pos:position pos:line="66" pos:column="27"/></operator> <name pos:line="66" pos:column="28">msglen<pos:position pos:line="66" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="66" pos:column="36">sizeof <name pos:line="66" pos:column="43">buf<pos:position pos:line="66" pos:column="46"/></name></sizeof> <operator pos:line="66" pos:column="47">-<pos:position pos:line="66" pos:column="48"/></operator> <name pos:line="66" pos:column="49">msglen<pos:position pos:line="66" pos:column="55"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="67" pos:column="22">" [certificate: -not available-]"<pos:position pos:line="67" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="68" pos:column="6"/></block></else></if>

    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><name pos:line="70" pos:column="9">r<pos:position pos:line="70" pos:column="10"/></name></expr>)<pos:position pos:line="70" pos:column="11"/></condition><then pos:line="70" pos:column="11"> <block pos:line="70" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">ap_log_rerror<pos:position pos:line="71" pos:column="22"/></name><argument_list pos:line="71" pos:column="22">(<argument><expr><name pos:line="71" pos:column="23">file<pos:position pos:line="71" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="29">line<pos:position pos:line="71" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="35">APLOG_MODULE_INDEX<pos:position pos:line="71" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="55">level<pos:position pos:line="71" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="62">rv<pos:position pos:line="71" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="66">r<pos:position pos:line="71" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="69">"%s"<pos:position pos:line="71" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="75">buf<pos:position pos:line="71" pos:column="78"/></name></expr></argument>)<pos:position pos:line="71" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="80"/></expr_stmt>
    }<pos:position pos:line="72" pos:column="6"/></block></then>
    <elseif pos:line="73" pos:column="5">else <if pos:line="73" pos:column="10">if <condition pos:line="73" pos:column="13">(<expr><name pos:line="73" pos:column="14">c<pos:position pos:line="73" pos:column="15"/></name></expr>)<pos:position pos:line="73" pos:column="16"/></condition><then pos:line="73" pos:column="16"> <block pos:line="73" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">ap_log_cerror<pos:position pos:line="74" pos:column="22"/></name><argument_list pos:line="74" pos:column="22">(<argument><expr><name pos:line="74" pos:column="23">file<pos:position pos:line="74" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="29">line<pos:position pos:line="74" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="35">APLOG_MODULE_INDEX<pos:position pos:line="74" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="55">level<pos:position pos:line="74" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="62">rv<pos:position pos:line="74" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="66">c<pos:position pos:line="74" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="69">"%s"<pos:position pos:line="74" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="75">buf<pos:position pos:line="74" pos:column="78"/></name></expr></argument>)<pos:position pos:line="74" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="80"/></expr_stmt>
    }<pos:position pos:line="75" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="76" pos:column="5">else <if pos:line="76" pos:column="10">if <condition pos:line="76" pos:column="13">(<expr><name pos:line="76" pos:column="14">s<pos:position pos:line="76" pos:column="15"/></name></expr>)<pos:position pos:line="76" pos:column="16"/></condition><then pos:line="76" pos:column="16"> <block pos:line="76" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">ap_log_error<pos:position pos:line="77" pos:column="21"/></name><argument_list pos:line="77" pos:column="21">(<argument><expr><name pos:line="77" pos:column="22">file<pos:position pos:line="77" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="28">line<pos:position pos:line="77" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="34">APLOG_MODULE_INDEX<pos:position pos:line="77" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="54">level<pos:position pos:line="77" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="61">rv<pos:position pos:line="77" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="65">s<pos:position pos:line="77" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="68">"%s"<pos:position pos:line="77" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="74">buf<pos:position pos:line="77" pos:column="77"/></name></expr></argument>)<pos:position pos:line="77" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="79"/></expr_stmt>
    }<pos:position pos:line="78" pos:column="6"/></block></then></if></elseif></if>

}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
