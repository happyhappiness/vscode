<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_5003.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">piped_log_maintenance<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">int<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">reason<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">void<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">data<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">apr_wait_t<pos:position pos:line="1" pos:column="69"/></name></type> <name pos:line="1" pos:column="70">status<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">piped_log<pos:position pos:line="3" pos:column="14"/></name> <modifier pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></modifier></type><name pos:line="3" pos:column="16">pl<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name pos:line="3" pos:column="21">data<pos:position pos:line="3" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">stats<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">mpm_state<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>

    <switch pos:line="7" pos:column="5">switch <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">reason<pos:position pos:line="7" pos:column="19"/></name></expr>)<pos:position pos:line="7" pos:column="20"/></condition> <block pos:line="7" pos:column="21">{
    <case pos:line="8" pos:column="5">case <expr><name pos:line="8" pos:column="10">APR_OC_REASON_DEATH<pos:position pos:line="8" pos:column="29"/></name></expr>:<pos:position pos:line="8" pos:column="30"/></case>
    <case pos:line="9" pos:column="5">case <expr><name pos:line="9" pos:column="10">APR_OC_REASON_LOST<pos:position pos:line="9" pos:column="28"/></name></expr>:<pos:position pos:line="9" pos:column="29"/></case>
        <expr_stmt><expr><name><name pos:line="10" pos:column="9">pl<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">-&gt;<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="13">pid<pos:position pos:line="10" pos:column="16"/></name></name> <operator pos:line="10" pos:column="17">=<pos:position pos:line="10" pos:column="18"/></operator> <name pos:line="10" pos:column="19">NULL<pos:position pos:line="10" pos:column="23"/></name></expr>;<pos:position pos:line="10" pos:column="24"/></expr_stmt> <comment type="block" pos:line="10" pos:column="25">/* in case we don't get it going again, this
                         * tells other logic not to try to kill it
                         */</comment>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">apr_proc_other_child_unregister<pos:position pos:line="13" pos:column="40"/></name><argument_list pos:line="13" pos:column="40">(<argument><expr><name pos:line="13" pos:column="41">pl<pos:position pos:line="13" pos:column="43"/></name></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name pos:line="14" pos:column="9">stats<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <call><name pos:line="14" pos:column="17">ap_mpm_query<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">AP_MPMQ_MPM_STATE<pos:position pos:line="14" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="49">&amp;<pos:position pos:line="14" pos:column="54"/></operator><name pos:line="14" pos:column="50">mpm_state<pos:position pos:line="14" pos:column="59"/></name></expr></argument>)<pos:position pos:line="14" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="61"/></expr_stmt>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">stats<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">!=<pos:position pos:line="15" pos:column="21"/></operator> <name pos:line="15" pos:column="22">APR_SUCCESS<pos:position pos:line="15" pos:column="33"/></name></expr>)<pos:position pos:line="15" pos:column="34"/></condition><then pos:line="15" pos:column="34"> <block pos:line="15" pos:column="35">{
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">ap_log_error<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">APLOG_MARK<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="38">APLOG_STARTUP<pos:position pos:line="16" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="53">0<pos:position pos:line="16" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="56">NULL<pos:position pos:line="16" pos:column="60"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="17" pos:column="26">"can't query MPM state; not restarting "<pos:position pos:line="17" pos:column="66"/></literal>
                         <literal type="string" pos:line="18" pos:column="26">"piped log program '%s'"<pos:position pos:line="18" pos:column="50"/></literal></expr></argument>,
                         <argument><expr><name><name pos:line="19" pos:column="26">pl<pos:position pos:line="19" pos:column="28"/></name><operator pos:line="19" pos:column="28">-&gt;<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="30">program<pos:position pos:line="19" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="20" pos:column="10"/></block></then>
        <elseif pos:line="21" pos:column="9">else <if pos:line="21" pos:column="14">if <condition pos:line="21" pos:column="17">(<expr><name pos:line="21" pos:column="18">mpm_state<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">!=<pos:position pos:line="21" pos:column="30"/></operator> <name pos:line="21" pos:column="31">AP_MPMQ_STOPPING<pos:position pos:line="21" pos:column="47"/></name></expr>)<pos:position pos:line="21" pos:column="48"/></condition><then pos:line="21" pos:column="48"> <block pos:line="21" pos:column="49">{
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">ap_log_error<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">APLOG_MARK<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="38">APLOG_STARTUP<pos:position pos:line="22" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="53">0<pos:position pos:line="22" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="56">NULL<pos:position pos:line="22" pos:column="60"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="23" pos:column="26">"piped log program '%s' failed unexpectedly"<pos:position pos:line="23" pos:column="70"/></literal></expr></argument>,
                         <argument><expr><name><name pos:line="24" pos:column="26">pl<pos:position pos:line="24" pos:column="28"/></name><operator pos:line="24" pos:column="28">-&gt;<pos:position pos:line="24" pos:column="33"/></operator><name pos:line="24" pos:column="30">program<pos:position pos:line="24" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>
            <if pos:line="25" pos:column="13">if <condition pos:line="25" pos:column="16">(<expr><operator pos:line="25" pos:column="17">(<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="18">stats<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">=<pos:position pos:line="25" pos:column="25"/></operator> <call><name pos:line="25" pos:column="26">piped_log_spawn<pos:position pos:line="25" pos:column="41"/></name><argument_list pos:line="25" pos:column="41">(<argument><expr><name pos:line="25" pos:column="42">pl<pos:position pos:line="25" pos:column="44"/></name></expr></argument>)<pos:position pos:line="25" pos:column="45"/></argument_list></call><operator pos:line="25" pos:column="45">)<pos:position pos:line="25" pos:column="46"/></operator> <operator pos:line="25" pos:column="47">!=<pos:position pos:line="25" pos:column="49"/></operator> <name pos:line="25" pos:column="50">APR_SUCCESS<pos:position pos:line="25" pos:column="61"/></name></expr>)<pos:position pos:line="25" pos:column="62"/></condition><then pos:line="25" pos:column="62"> <block pos:line="25" pos:column="63">{
                <comment type="block" pos:line="26" pos:column="17">/* what can we do?  This could be the error log we're having
                 * problems opening up... */</comment>
                <decl_stmt><decl><type><name pos:line="28" pos:column="17">char<pos:position pos:line="28" pos:column="21"/></name></type> <name><name pos:line="28" pos:column="22">buf<pos:position pos:line="28" pos:column="25"/></name><index pos:line="28" pos:column="25">[<expr><literal type="number" pos:line="28" pos:column="26">120<pos:position pos:line="28" pos:column="29"/></literal></expr>]<pos:position pos:line="28" pos:column="30"/></index></name></decl>;<pos:position pos:line="28" pos:column="31"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="29" pos:column="17">ap_log_error<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><name pos:line="29" pos:column="30">APLOG_MARK<pos:position pos:line="29" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="42">APLOG_STARTUP<pos:position pos:line="29" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="57">0<pos:position pos:line="29" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="60">NULL<pos:position pos:line="29" pos:column="64"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="30" pos:column="30">"piped_log_maintenance: unable to respawn '%s': %s"<pos:position pos:line="30" pos:column="81"/></literal></expr></argument>,
                             <argument><expr><name><name pos:line="31" pos:column="30">pl<pos:position pos:line="31" pos:column="32"/></name><operator pos:line="31" pos:column="32">-&gt;<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="34">program<pos:position pos:line="31" pos:column="41"/></name></name></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="43">apr_strerror<pos:position pos:line="31" pos:column="55"/></name><argument_list pos:line="31" pos:column="55">(<argument><expr><name pos:line="31" pos:column="56">stats<pos:position pos:line="31" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="63">buf<pos:position pos:line="31" pos:column="66"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="68">sizeof<argument_list pos:line="31" pos:column="74">(<argument><expr><name pos:line="31" pos:column="75">buf<pos:position pos:line="31" pos:column="78"/></name></expr></argument>)<pos:position pos:line="31" pos:column="79"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="82"/></expr_stmt>
            }<pos:position pos:line="32" pos:column="14"/></block></then></if>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if></elseif></if>
        <break pos:line="34" pos:column="9">break;<pos:position pos:line="34" pos:column="15"/></break>

    <case pos:line="36" pos:column="5">case <expr><name pos:line="36" pos:column="10">APR_OC_REASON_UNWRITABLE<pos:position pos:line="36" pos:column="34"/></name></expr>:<pos:position pos:line="36" pos:column="35"/></case>
        <comment type="block" pos:line="37" pos:column="9">/* We should not kill off the pipe here, since it may only be full.
         * If it really is locked, we should kill it off manually. */</comment>
    <break pos:line="39" pos:column="5">break;<pos:position pos:line="39" pos:column="11"/></break>

    <case pos:line="41" pos:column="5">case <expr><name pos:line="41" pos:column="10">APR_OC_REASON_RESTART<pos:position pos:line="41" pos:column="31"/></name></expr>:<pos:position pos:line="41" pos:column="32"/></case>
        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name><name pos:line="42" pos:column="13">pl<pos:position pos:line="42" pos:column="15"/></name><operator pos:line="42" pos:column="15">-&gt;<pos:position pos:line="42" pos:column="20"/></operator><name pos:line="42" pos:column="17">pid<pos:position pos:line="42" pos:column="20"/></name></name> <operator pos:line="42" pos:column="21">!=<pos:position pos:line="42" pos:column="23"/></operator> <name pos:line="42" pos:column="24">NULL<pos:position pos:line="42" pos:column="28"/></name></expr>)<pos:position pos:line="42" pos:column="29"/></condition><then pos:line="42" pos:column="29"> <block pos:line="42" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">apr_proc_kill<pos:position pos:line="43" pos:column="26"/></name><argument_list pos:line="43" pos:column="26">(<argument><expr><name><name pos:line="43" pos:column="27">pl<pos:position pos:line="43" pos:column="29"/></name><operator pos:line="43" pos:column="29">-&gt;<pos:position pos:line="43" pos:column="34"/></operator><name pos:line="43" pos:column="31">pid<pos:position pos:line="43" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="36">SIGTERM<pos:position pos:line="43" pos:column="43"/></name></expr></argument>)<pos:position pos:line="43" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="44" pos:column="13">pl<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">-&gt;<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="17">pid<pos:position pos:line="44" pos:column="20"/></name></name> <operator pos:line="44" pos:column="21">=<pos:position pos:line="44" pos:column="22"/></operator> <name pos:line="44" pos:column="23">NULL<pos:position pos:line="44" pos:column="27"/></name></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="45" pos:column="10"/></block></then></if>
        <break pos:line="46" pos:column="9">break;<pos:position pos:line="46" pos:column="15"/></break>

    <case pos:line="48" pos:column="5">case <expr><name pos:line="48" pos:column="10">APR_OC_REASON_UNREGISTER<pos:position pos:line="48" pos:column="34"/></name></expr>:<pos:position pos:line="48" pos:column="35"/></case>
        <break pos:line="49" pos:column="9">break;<pos:position pos:line="49" pos:column="15"/></break>
    }<pos:position pos:line="50" pos:column="6"/></block></switch>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
