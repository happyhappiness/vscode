<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1405_httpd-2.2.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">proxy_connect_handler<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">request_rec<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">r<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">proxy_worker<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">worker<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="2" pos:column="34">proxy_server_conf<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="53">conf<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="3" pos:column="34">char<pos:position pos:line="3" pos:column="38"/></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="40">url<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="45">const<pos:position pos:line="3" pos:column="50"/></specifier> <name pos:line="3" pos:column="51">char<pos:position pos:line="3" pos:column="55"/></name> <modifier pos:line="3" pos:column="56">*<pos:position pos:line="3" pos:column="57"/></modifier></type><name pos:line="3" pos:column="57">proxyname<pos:position pos:line="3" pos:column="66"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="4" pos:column="34">apr_port_t<pos:position pos:line="4" pos:column="44"/></name></type> <name pos:line="4" pos:column="45">proxyport<pos:position pos:line="4" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="55"/></parameter_list>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_pool_t<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">p<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><name><name pos:line="6" pos:column="21">r<pos:position pos:line="6" pos:column="22"/></name><operator pos:line="6" pos:column="22">-&gt;<pos:position pos:line="6" pos:column="27"/></operator><name pos:line="6" pos:column="24">pool<pos:position pos:line="6" pos:column="28"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_socket_t<pos:position pos:line="7" pos:column="17"/></name> <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier></type><name pos:line="7" pos:column="19">sock<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_status_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">err<pos:position pos:line="8" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="23">rv<pos:position pos:line="8" pos:column="25"/></name></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_size_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">i<pos:position pos:line="9" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="19">o<pos:position pos:line="9" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="22">nbytes<pos:position pos:line="9" pos:column="28"/></name></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name></type> <name><name pos:line="10" pos:column="10">buffer<pos:position pos:line="10" pos:column="16"/></name><index pos:line="10" pos:column="16">[<expr><name pos:line="10" pos:column="17">HUGE_STRING_LEN<pos:position pos:line="10" pos:column="32"/></name></expr>]<pos:position pos:line="10" pos:column="33"/></index></name></decl>;<pos:position pos:line="10" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">apr_socket_t<pos:position pos:line="11" pos:column="17"/></name> <modifier pos:line="11" pos:column="18">*<pos:position pos:line="11" pos:column="19"/></modifier></type><name pos:line="11" pos:column="19">client_socket<pos:position pos:line="11" pos:column="32"/></name> <init pos:line="11" pos:column="33">= <expr><call><name pos:line="11" pos:column="35">ap_get_module_config<pos:position pos:line="11" pos:column="55"/></name><argument_list pos:line="11" pos:column="55">(<argument><expr><name><name pos:line="11" pos:column="56">r<pos:position pos:line="11" pos:column="57"/></name><operator pos:line="11" pos:column="57">-&gt;<pos:position pos:line="11" pos:column="62"/></operator><name pos:line="11" pos:column="59">connection<pos:position pos:line="11" pos:column="69"/></name><operator pos:line="11" pos:column="69">-&gt;<pos:position pos:line="11" pos:column="74"/></operator><name pos:line="11" pos:column="71">conn_config<pos:position pos:line="11" pos:column="82"/></name></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="84">&amp;<pos:position pos:line="11" pos:column="89"/></operator><name pos:line="11" pos:column="85">core_module<pos:position pos:line="11" pos:column="96"/></name></expr></argument>)<pos:position pos:line="11" pos:column="97"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="98"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">failed<pos:position pos:line="12" pos:column="15"/></name></decl>;<pos:position pos:line="12" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">apr_pollset_t<pos:position pos:line="13" pos:column="18"/></name> <modifier pos:line="13" pos:column="19">*<pos:position pos:line="13" pos:column="20"/></modifier></type><name pos:line="13" pos:column="20">pollset<pos:position pos:line="13" pos:column="27"/></name></decl>;<pos:position pos:line="13" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">apr_pollfd_t<pos:position pos:line="14" pos:column="17"/></name></type> <name pos:line="14" pos:column="18">pollfd<pos:position pos:line="14" pos:column="24"/></name></decl>;<pos:position pos:line="14" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="15" pos:column="5">const<pos:position pos:line="15" pos:column="10"/></specifier> <name pos:line="15" pos:column="11">apr_pollfd_t<pos:position pos:line="15" pos:column="23"/></name> <modifier pos:line="15" pos:column="24">*<pos:position pos:line="15" pos:column="25"/></modifier></type><name pos:line="15" pos:column="25">signalled<pos:position pos:line="15" pos:column="34"/></name></decl>;<pos:position pos:line="15" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">apr_int32_t<pos:position pos:line="16" pos:column="16"/></name></type> <name pos:line="16" pos:column="17">pollcnt<pos:position pos:line="16" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="16" pos:column="26">pi<pos:position pos:line="16" pos:column="28"/></name></decl>;<pos:position pos:line="16" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">apr_int16_t<pos:position pos:line="17" pos:column="16"/></name></type> <name pos:line="17" pos:column="17">pollevent<pos:position pos:line="17" pos:column="26"/></name></decl>;<pos:position pos:line="17" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">apr_sockaddr_t<pos:position pos:line="18" pos:column="19"/></name> <modifier pos:line="18" pos:column="20">*<pos:position pos:line="18" pos:column="21"/></modifier></type><name pos:line="18" pos:column="21">uri_addr<pos:position pos:line="18" pos:column="29"/></name></decl>, <modifier pos:line="18" pos:column="31">*<pos:position pos:line="18" pos:column="32"/></modifier><decl><type ref="prev"/><name pos:line="18" pos:column="32">connect_addr<pos:position pos:line="18" pos:column="44"/></name></decl>;<pos:position pos:line="18" pos:column="45"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="20" pos:column="5">apr_uri_t<pos:position pos:line="20" pos:column="14"/></name></type> <name pos:line="20" pos:column="15">uri<pos:position pos:line="20" pos:column="18"/></name></decl>;<pos:position pos:line="20" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="21" pos:column="5">const<pos:position pos:line="21" pos:column="10"/></specifier> <name pos:line="21" pos:column="11">char<pos:position pos:line="21" pos:column="15"/></name> <modifier pos:line="21" pos:column="16">*<pos:position pos:line="21" pos:column="17"/></modifier></type><name pos:line="21" pos:column="17">connectname<pos:position pos:line="21" pos:column="28"/></name></decl>;<pos:position pos:line="21" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">int<pos:position pos:line="22" pos:column="8"/></name></type> <name pos:line="22" pos:column="9">connectport<pos:position pos:line="22" pos:column="20"/></name> <init pos:line="22" pos:column="21">= <expr><literal type="number" pos:line="22" pos:column="23">0<pos:position pos:line="22" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="25"/></decl_stmt>

    <comment type="block" pos:line="24" pos:column="5">/* is this for us? */</comment>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name><name pos:line="25" pos:column="9">r<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">-&gt;<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="12">method_number<pos:position pos:line="25" pos:column="25"/></name></name> <operator pos:line="25" pos:column="26">!=<pos:position pos:line="25" pos:column="28"/></operator> <name pos:line="25" pos:column="29">M_CONNECT<pos:position pos:line="25" pos:column="38"/></name></expr>)<pos:position pos:line="25" pos:column="39"/></condition><then pos:line="25" pos:column="39"> <block pos:line="25" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">ap_log_error<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><name pos:line="26" pos:column="22">APLOG_MARK<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="34">APLOG_DEBUG<pos:position pos:line="26" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="47">0<pos:position pos:line="26" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="50">r<pos:position pos:line="26" pos:column="51"/></name><operator pos:line="26" pos:column="51">-&gt;<pos:position pos:line="26" pos:column="56"/></operator><name pos:line="26" pos:column="53">server<pos:position pos:line="26" pos:column="59"/></name></name></expr></argument>,
             <argument><expr><literal type="string" pos:line="27" pos:column="14">"proxy: CONNECT: declining URL %s"<pos:position pos:line="27" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="50">url<pos:position pos:line="27" pos:column="53"/></name></expr></argument>)<pos:position pos:line="27" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="55"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">DECLINED<pos:position pos:line="28" pos:column="20"/></name></expr>;<pos:position pos:line="28" pos:column="21"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">ap_log_error<pos:position pos:line="30" pos:column="17"/></name><argument_list pos:line="30" pos:column="17">(<argument><expr><name pos:line="30" pos:column="18">APLOG_MARK<pos:position pos:line="30" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="30">APLOG_DEBUG<pos:position pos:line="30" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="43">0<pos:position pos:line="30" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="46">r<pos:position pos:line="30" pos:column="47"/></name><operator pos:line="30" pos:column="47">-&gt;<pos:position pos:line="30" pos:column="52"/></operator><name pos:line="30" pos:column="49">server<pos:position pos:line="30" pos:column="55"/></name></name></expr></argument>,
         <argument><expr><literal type="string" pos:line="31" pos:column="10">"proxy: CONNECT: serving URL %s"<pos:position pos:line="31" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="44">url<pos:position pos:line="31" pos:column="47"/></name></expr></argument>)<pos:position pos:line="31" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="49"/></expr_stmt>


    <comment type="block" pos:line="34" pos:column="5">/*
     * Step One: Determine Who To Connect To
     *
     * Break up the URL to determine the host to connect to
     */</comment>

    <comment type="block" pos:line="40" pos:column="5">/* we break the URL into host, port, uri */</comment>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">APR_SUCCESS<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">!=<pos:position pos:line="41" pos:column="23"/></operator> <call><name pos:line="41" pos:column="24">apr_uri_parse_hostinfo<pos:position pos:line="41" pos:column="46"/></name><argument_list pos:line="41" pos:column="46">(<argument><expr><name pos:line="41" pos:column="47">p<pos:position pos:line="41" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="50">url<pos:position pos:line="41" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="55">&amp;<pos:position pos:line="41" pos:column="60"/></operator><name pos:line="41" pos:column="56">uri<pos:position pos:line="41" pos:column="59"/></name></expr></argument>)<pos:position pos:line="41" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="61"/></condition><then pos:line="41" pos:column="61"> <block pos:line="41" pos:column="62">{
    <return pos:line="42" pos:column="5">return <expr><call><name pos:line="42" pos:column="12">ap_proxyerror<pos:position pos:line="42" pos:column="25"/></name><argument_list pos:line="42" pos:column="25">(<argument><expr><name pos:line="42" pos:column="26">r<pos:position pos:line="42" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="29">HTTP_BAD_REQUEST<pos:position pos:line="42" pos:column="45"/></name></expr></argument>,
                 <argument><expr><call><name pos:line="43" pos:column="18">apr_pstrcat<pos:position pos:line="43" pos:column="29"/></name><argument_list pos:line="43" pos:column="29">(<argument><expr><name pos:line="43" pos:column="30">p<pos:position pos:line="43" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="33">"URI cannot be parsed: "<pos:position pos:line="43" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="59">url<pos:position pos:line="43" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="64">NULL<pos:position pos:line="43" pos:column="68"/></name></expr></argument>)<pos:position pos:line="43" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="71"/></return>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="46" pos:column="5">ap_log_error<pos:position pos:line="46" pos:column="17"/></name><argument_list pos:line="46" pos:column="17">(<argument><expr><name pos:line="46" pos:column="18">APLOG_MARK<pos:position pos:line="46" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="30">APLOG_DEBUG<pos:position pos:line="46" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="43">0<pos:position pos:line="46" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="46">r<pos:position pos:line="46" pos:column="47"/></name><operator pos:line="46" pos:column="47">-&gt;<pos:position pos:line="46" pos:column="52"/></operator><name pos:line="46" pos:column="49">server<pos:position pos:line="46" pos:column="55"/></name></name></expr></argument>,
         <argument><expr><literal type="string" pos:line="47" pos:column="10">"proxy: CONNECT: connecting %s to %s:%d"<pos:position pos:line="47" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="52">url<pos:position pos:line="47" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="57">uri<pos:position pos:line="47" pos:column="60"/></name><operator pos:line="47" pos:column="60">.<pos:position pos:line="47" pos:column="61"/></operator><name pos:line="47" pos:column="61">hostname<pos:position pos:line="47" pos:column="69"/></name></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="71">uri<pos:position pos:line="47" pos:column="74"/></name><operator pos:line="47" pos:column="74">.<pos:position pos:line="47" pos:column="75"/></operator><name pos:line="47" pos:column="75">port<pos:position pos:line="47" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="81"/></expr_stmt>

    <comment type="block" pos:line="49" pos:column="5">/* do a DNS lookup for the destination host */</comment>
    <expr_stmt><expr><name pos:line="50" pos:column="5">err<pos:position pos:line="50" pos:column="8"/></name> <operator pos:line="50" pos:column="9">=<pos:position pos:line="50" pos:column="10"/></operator> <call><name pos:line="50" pos:column="11">apr_sockaddr_info_get<pos:position pos:line="50" pos:column="32"/></name><argument_list pos:line="50" pos:column="32">(<argument><expr><operator pos:line="50" pos:column="33">&amp;<pos:position pos:line="50" pos:column="38"/></operator><name pos:line="50" pos:column="34">uri_addr<pos:position pos:line="50" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="44">uri<pos:position pos:line="50" pos:column="47"/></name><operator pos:line="50" pos:column="47">.<pos:position pos:line="50" pos:column="48"/></operator><name pos:line="50" pos:column="48">hostname<pos:position pos:line="50" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="58">APR_UNSPEC<pos:position pos:line="50" pos:column="68"/></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="70">uri<pos:position pos:line="50" pos:column="73"/></name><operator pos:line="50" pos:column="73">.<pos:position pos:line="50" pos:column="74"/></operator><name pos:line="50" pos:column="74">port<pos:position pos:line="50" pos:column="78"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="80">0<pos:position pos:line="50" pos:column="81"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="83">p<pos:position pos:line="50" pos:column="84"/></name></expr></argument>)<pos:position pos:line="50" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="86"/></expr_stmt>

    <comment type="block" pos:line="52" pos:column="5">/* are we connecting directly, or via a proxy? */</comment>
    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><name pos:line="53" pos:column="9">proxyname<pos:position pos:line="53" pos:column="18"/></name></expr>)<pos:position pos:line="53" pos:column="19"/></condition><then pos:line="53" pos:column="19"> <block pos:line="53" pos:column="20">{
    <expr_stmt><expr><name pos:line="54" pos:column="5">connectname<pos:position pos:line="54" pos:column="16"/></name> <operator pos:line="54" pos:column="17">=<pos:position pos:line="54" pos:column="18"/></operator> <name pos:line="54" pos:column="19">proxyname<pos:position pos:line="54" pos:column="28"/></name></expr>;<pos:position pos:line="54" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="55" pos:column="5">connectport<pos:position pos:line="55" pos:column="16"/></name> <operator pos:line="55" pos:column="17">=<pos:position pos:line="55" pos:column="18"/></operator> <name pos:line="55" pos:column="19">proxyport<pos:position pos:line="55" pos:column="28"/></name></expr>;<pos:position pos:line="55" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="56" pos:column="9">err<pos:position pos:line="56" pos:column="12"/></name> <operator pos:line="56" pos:column="13">=<pos:position pos:line="56" pos:column="14"/></operator> <call><name pos:line="56" pos:column="15">apr_sockaddr_info_get<pos:position pos:line="56" pos:column="36"/></name><argument_list pos:line="56" pos:column="36">(<argument><expr><operator pos:line="56" pos:column="37">&amp;<pos:position pos:line="56" pos:column="42"/></operator><name pos:line="56" pos:column="38">connect_addr<pos:position pos:line="56" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="52">proxyname<pos:position pos:line="56" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="63">APR_UNSPEC<pos:position pos:line="56" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="75">proxyport<pos:position pos:line="56" pos:column="84"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="86">0<pos:position pos:line="56" pos:column="87"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="89">p<pos:position pos:line="56" pos:column="90"/></name></expr></argument>)<pos:position pos:line="56" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="92"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block></then>
    <else pos:line="58" pos:column="5">else <block pos:line="58" pos:column="10">{
    <expr_stmt><expr><name pos:line="59" pos:column="5">connectname<pos:position pos:line="59" pos:column="16"/></name> <operator pos:line="59" pos:column="17">=<pos:position pos:line="59" pos:column="18"/></operator> <name><name pos:line="59" pos:column="19">uri<pos:position pos:line="59" pos:column="22"/></name><operator pos:line="59" pos:column="22">.<pos:position pos:line="59" pos:column="23"/></operator><name pos:line="59" pos:column="23">hostname<pos:position pos:line="59" pos:column="31"/></name></name></expr>;<pos:position pos:line="59" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="60" pos:column="5">connectport<pos:position pos:line="60" pos:column="16"/></name> <operator pos:line="60" pos:column="17">=<pos:position pos:line="60" pos:column="18"/></operator> <name><name pos:line="60" pos:column="19">uri<pos:position pos:line="60" pos:column="22"/></name><operator pos:line="60" pos:column="22">.<pos:position pos:line="60" pos:column="23"/></operator><name pos:line="60" pos:column="23">port<pos:position pos:line="60" pos:column="27"/></name></name></expr>;<pos:position pos:line="60" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="61" pos:column="5">connect_addr<pos:position pos:line="61" pos:column="17"/></name> <operator pos:line="61" pos:column="18">=<pos:position pos:line="61" pos:column="19"/></operator> <name pos:line="61" pos:column="20">uri_addr<pos:position pos:line="61" pos:column="28"/></name></expr>;<pos:position pos:line="61" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="62" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">ap_log_error<pos:position pos:line="63" pos:column="17"/></name><argument_list pos:line="63" pos:column="17">(<argument><expr><name pos:line="63" pos:column="18">APLOG_MARK<pos:position pos:line="63" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="30">APLOG_DEBUG<pos:position pos:line="63" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="43">0<pos:position pos:line="63" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="46">r<pos:position pos:line="63" pos:column="47"/></name><operator pos:line="63" pos:column="47">-&gt;<pos:position pos:line="63" pos:column="52"/></operator><name pos:line="63" pos:column="49">server<pos:position pos:line="63" pos:column="55"/></name></name></expr></argument>,
         <argument><expr><literal type="string" pos:line="64" pos:column="10">"proxy: CONNECT: connecting to remote proxy %s on port %d"<pos:position pos:line="64" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="70">connectname<pos:position pos:line="64" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="83">connectport<pos:position pos:line="64" pos:column="94"/></name></expr></argument>)<pos:position pos:line="64" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="96"/></expr_stmt>

    <comment type="block" pos:line="66" pos:column="5">/* check if ProxyBlock directive on this host */</comment>
    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><name pos:line="67" pos:column="9">OK<pos:position pos:line="67" pos:column="11"/></name> <operator pos:line="67" pos:column="12">!=<pos:position pos:line="67" pos:column="14"/></operator> <call><name pos:line="67" pos:column="15">ap_proxy_checkproxyblock<pos:position pos:line="67" pos:column="39"/></name><argument_list pos:line="67" pos:column="39">(<argument><expr><name pos:line="67" pos:column="40">r<pos:position pos:line="67" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="43">conf<pos:position pos:line="67" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="49">uri_addr<pos:position pos:line="67" pos:column="57"/></name></expr></argument>)<pos:position pos:line="67" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="59"/></condition><then pos:line="67" pos:column="59"> <block pos:line="67" pos:column="60">{
    <return pos:line="68" pos:column="5">return <expr><call><name pos:line="68" pos:column="12">ap_proxyerror<pos:position pos:line="68" pos:column="25"/></name><argument_list pos:line="68" pos:column="25">(<argument><expr><name pos:line="68" pos:column="26">r<pos:position pos:line="68" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="29">HTTP_FORBIDDEN<pos:position pos:line="68" pos:column="43"/></name></expr></argument>,
                 <argument><expr><literal type="string" pos:line="69" pos:column="18">"Connect to remote machine blocked"<pos:position pos:line="69" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="55"/></return>
    }<pos:position pos:line="70" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="72" pos:column="5">/* Check if it is an allowed port */</comment>
    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><name><name pos:line="73" pos:column="9">conf<pos:position pos:line="73" pos:column="13"/></name><operator pos:line="73" pos:column="13">-&gt;<pos:position pos:line="73" pos:column="18"/></operator><name pos:line="73" pos:column="15">allowed_connect_ports<pos:position pos:line="73" pos:column="36"/></name><operator pos:line="73" pos:column="36">-&gt;<pos:position pos:line="73" pos:column="41"/></operator><name pos:line="73" pos:column="38">nelts<pos:position pos:line="73" pos:column="43"/></name></name> <operator pos:line="73" pos:column="44">==<pos:position pos:line="73" pos:column="46"/></operator> <literal type="number" pos:line="73" pos:column="47">0<pos:position pos:line="73" pos:column="48"/></literal></expr>)<pos:position pos:line="73" pos:column="49"/></condition><then pos:line="73" pos:column="49"> <block pos:line="73" pos:column="50">{
    <comment type="block" pos:line="74" pos:column="5">/* Default setting if not overridden by AllowCONNECT */</comment>
    <switch pos:line="75" pos:column="5">switch <condition pos:line="75" pos:column="12">(<expr><name><name pos:line="75" pos:column="13">uri<pos:position pos:line="75" pos:column="16"/></name><operator pos:line="75" pos:column="16">.<pos:position pos:line="75" pos:column="17"/></operator><name pos:line="75" pos:column="17">port<pos:position pos:line="75" pos:column="21"/></name></name></expr>)<pos:position pos:line="75" pos:column="22"/></condition> <block pos:line="75" pos:column="23">{
        <case pos:line="76" pos:column="9">case <expr><name pos:line="76" pos:column="14">APR_URI_HTTPS_DEFAULT_PORT<pos:position pos:line="76" pos:column="40"/></name></expr>:<pos:position pos:line="76" pos:column="41"/></case>
        <case pos:line="77" pos:column="9">case <expr><name pos:line="77" pos:column="14">APR_URI_SNEWS_DEFAULT_PORT<pos:position pos:line="77" pos:column="40"/></name></expr>:<pos:position pos:line="77" pos:column="41"/></case>
        <break pos:line="78" pos:column="9">break;<pos:position pos:line="78" pos:column="15"/></break>
        <default pos:line="79" pos:column="9">default:<pos:position pos:line="79" pos:column="17"/></default>
                <comment type="block" pos:line="80" pos:column="17">/* XXX can we call ap_proxyerror() here to get a nice log message? */</comment>
        <return pos:line="81" pos:column="9">return <expr><name pos:line="81" pos:column="16">HTTP_FORBIDDEN<pos:position pos:line="81" pos:column="30"/></name></expr>;<pos:position pos:line="81" pos:column="31"/></return>
    }<pos:position pos:line="82" pos:column="6"/></block></switch>
    }<pos:position pos:line="83" pos:column="6"/></block></then> <elseif pos:line="83" pos:column="7">else <if pos:line="83" pos:column="12">if<condition pos:line="83" pos:column="14">(<expr><operator pos:line="83" pos:column="15">!<pos:position pos:line="83" pos:column="16"/></operator><call><name pos:line="83" pos:column="16">allowed_port<pos:position pos:line="83" pos:column="28"/></name><argument_list pos:line="83" pos:column="28">(<argument><expr><name pos:line="83" pos:column="29">conf<pos:position pos:line="83" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="35">uri<pos:position pos:line="83" pos:column="38"/></name><operator pos:line="83" pos:column="38">.<pos:position pos:line="83" pos:column="39"/></operator><name pos:line="83" pos:column="39">port<pos:position pos:line="83" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="45"/></condition><then pos:line="83" pos:column="45"> <block pos:line="83" pos:column="46">{
        <comment type="block" pos:line="84" pos:column="9">/* XXX can we call ap_proxyerror() here to get a nice log message? */</comment>
    <return pos:line="85" pos:column="5">return <expr><name pos:line="85" pos:column="12">HTTP_FORBIDDEN<pos:position pos:line="85" pos:column="26"/></name></expr>;<pos:position pos:line="85" pos:column="27"/></return>
    }<pos:position pos:line="86" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="88" pos:column="5">/*
     * Step Two: Make the Connection
     *
     * We have determined who to connect to. Now make the connection.
     */</comment>

    <comment type="block" pos:line="94" pos:column="5">/* get all the possible IP addresses for the destname and loop through them
     * until we get a successful connection
     */</comment>
    <if pos:line="97" pos:column="5">if <condition pos:line="97" pos:column="8">(<expr><name pos:line="97" pos:column="9">APR_SUCCESS<pos:position pos:line="97" pos:column="20"/></name> <operator pos:line="97" pos:column="21">!=<pos:position pos:line="97" pos:column="23"/></operator> <name pos:line="97" pos:column="24">err<pos:position pos:line="97" pos:column="27"/></name></expr>)<pos:position pos:line="97" pos:column="28"/></condition><then pos:line="97" pos:column="28"> <block pos:line="97" pos:column="29">{
    <return pos:line="98" pos:column="5">return <expr><call><name pos:line="98" pos:column="12">ap_proxyerror<pos:position pos:line="98" pos:column="25"/></name><argument_list pos:line="98" pos:column="25">(<argument><expr><name pos:line="98" pos:column="26">r<pos:position pos:line="98" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="29">HTTP_BAD_GATEWAY<pos:position pos:line="98" pos:column="45"/></name></expr></argument>, <argument><expr><call><name pos:line="98" pos:column="47">apr_pstrcat<pos:position pos:line="98" pos:column="58"/></name><argument_list pos:line="98" pos:column="58">(<argument><expr><name pos:line="98" pos:column="59">p<pos:position pos:line="98" pos:column="60"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="99" pos:column="30">"DNS lookup failure for: "<pos:position pos:line="99" pos:column="56"/></literal></expr></argument>,
                             <argument><expr><name pos:line="100" pos:column="30">connectname<pos:position pos:line="100" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="43">NULL<pos:position pos:line="100" pos:column="47"/></name></expr></argument>)<pos:position pos:line="100" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="100" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="50"/></return>
    }<pos:position pos:line="101" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="103" pos:column="5">/*
     * At this point we have a list of one or more IP addresses of
     * the machine to connect to. If configured, reorder this
     * list so that the "best candidate" is first try. "best
     * candidate" could mean the least loaded server, the fastest
     * responding server, whatever.
     *
     * For now we do nothing, ie we get DNS round robin.
     * XXX FIXME
     */</comment>
    <expr_stmt><expr><name pos:line="113" pos:column="5">failed<pos:position pos:line="113" pos:column="11"/></name> <operator pos:line="113" pos:column="12">=<pos:position pos:line="113" pos:column="13"/></operator> <call><name pos:line="113" pos:column="14">ap_proxy_connect_to_backend<pos:position pos:line="113" pos:column="41"/></name><argument_list pos:line="113" pos:column="41">(<argument><expr><operator pos:line="113" pos:column="42">&amp;<pos:position pos:line="113" pos:column="47"/></operator><name pos:line="113" pos:column="43">sock<pos:position pos:line="113" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="49">"CONNECT"<pos:position pos:line="113" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="60">connect_addr<pos:position pos:line="113" pos:column="72"/></name></expr></argument>,
                                         <argument><expr><name pos:line="114" pos:column="42">connectname<pos:position pos:line="114" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="55">conf<pos:position pos:line="114" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="61">r<pos:position pos:line="114" pos:column="62"/></name><operator pos:line="114" pos:column="62">-&gt;<pos:position pos:line="114" pos:column="67"/></operator><name pos:line="114" pos:column="64">server<pos:position pos:line="114" pos:column="70"/></name></name></expr></argument>,
                                         <argument><expr><name><name pos:line="115" pos:column="42">r<pos:position pos:line="115" pos:column="43"/></name><operator pos:line="115" pos:column="43">-&gt;<pos:position pos:line="115" pos:column="48"/></operator><name pos:line="115" pos:column="45">pool<pos:position pos:line="115" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="115" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="51"/></expr_stmt>

    <comment type="block" pos:line="117" pos:column="5">/* handle a permanent error from the above loop */</comment>
    <if pos:line="118" pos:column="5">if <condition pos:line="118" pos:column="8">(<expr><name pos:line="118" pos:column="9">failed<pos:position pos:line="118" pos:column="15"/></name></expr>)<pos:position pos:line="118" pos:column="16"/></condition><then pos:line="118" pos:column="16"> <block pos:line="118" pos:column="17">{
        <if pos:line="119" pos:column="9">if <condition pos:line="119" pos:column="12">(<expr><name pos:line="119" pos:column="13">proxyname<pos:position pos:line="119" pos:column="22"/></name></expr>)<pos:position pos:line="119" pos:column="23"/></condition><then pos:line="119" pos:column="23"> <block pos:line="119" pos:column="24">{
            <return pos:line="120" pos:column="13">return <expr><name pos:line="120" pos:column="20">DECLINED<pos:position pos:line="120" pos:column="28"/></name></expr>;<pos:position pos:line="120" pos:column="29"/></return>
        }<pos:position pos:line="121" pos:column="10"/></block></then>
        <else pos:line="122" pos:column="9">else <block pos:line="122" pos:column="14">{
            <return pos:line="123" pos:column="13">return <expr><name pos:line="123" pos:column="20">HTTP_BAD_GATEWAY<pos:position pos:line="123" pos:column="36"/></name></expr>;<pos:position pos:line="123" pos:column="37"/></return>
        }<pos:position pos:line="124" pos:column="10"/></block></else></if>
    }<pos:position pos:line="125" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="127" pos:column="5">/*
     * Step Three: Send the Request
     *
     * Send the HTTP/1.1 CONNECT request to the remote server
     */</comment>

    <comment type="block" pos:line="133" pos:column="5">/* we are acting as a tunnel - the output filter stack should
     * be completely empty, because when we are done here we are done completely.
     * We add the NULL filter to the stack to do this...
     */</comment>
    <expr_stmt><expr><name><name pos:line="137" pos:column="5">r<pos:position pos:line="137" pos:column="6"/></name><operator pos:line="137" pos:column="6">-&gt;<pos:position pos:line="137" pos:column="11"/></operator><name pos:line="137" pos:column="8">output_filters<pos:position pos:line="137" pos:column="22"/></name></name> <operator pos:line="137" pos:column="23">=<pos:position pos:line="137" pos:column="24"/></operator> <name pos:line="137" pos:column="25">NULL<pos:position pos:line="137" pos:column="29"/></name></expr>;<pos:position pos:line="137" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="138" pos:column="5">r<pos:position pos:line="138" pos:column="6"/></name><operator pos:line="138" pos:column="6">-&gt;<pos:position pos:line="138" pos:column="11"/></operator><name pos:line="138" pos:column="8">connection<pos:position pos:line="138" pos:column="18"/></name><operator pos:line="138" pos:column="18">-&gt;<pos:position pos:line="138" pos:column="23"/></operator><name pos:line="138" pos:column="20">output_filters<pos:position pos:line="138" pos:column="34"/></name></name> <operator pos:line="138" pos:column="35">=<pos:position pos:line="138" pos:column="36"/></operator> <name pos:line="138" pos:column="37">NULL<pos:position pos:line="138" pos:column="41"/></name></expr>;<pos:position pos:line="138" pos:column="42"/></expr_stmt>


    <comment type="block" pos:line="141" pos:column="5">/* If we are connecting through a remote proxy, we need to pass
     * the CONNECT request on to it.
     */</comment>
    <if pos:line="144" pos:column="5">if <condition pos:line="144" pos:column="8">(<expr><name pos:line="144" pos:column="9">proxyport<pos:position pos:line="144" pos:column="18"/></name></expr>)<pos:position pos:line="144" pos:column="19"/></condition><then pos:line="144" pos:column="19"> <block pos:line="144" pos:column="20">{
    <comment type="block" pos:line="145" pos:column="5">/* FIXME: Error checking ignored.
     */</comment>
        <expr_stmt><expr><call><name pos:line="147" pos:column="9">ap_log_error<pos:position pos:line="147" pos:column="21"/></name><argument_list pos:line="147" pos:column="21">(<argument><expr><name pos:line="147" pos:column="22">APLOG_MARK<pos:position pos:line="147" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="34">APLOG_DEBUG<pos:position pos:line="147" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="147" pos:column="47">0<pos:position pos:line="147" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="147" pos:column="50">r<pos:position pos:line="147" pos:column="51"/></name><operator pos:line="147" pos:column="51">-&gt;<pos:position pos:line="147" pos:column="56"/></operator><name pos:line="147" pos:column="53">server<pos:position pos:line="147" pos:column="59"/></name></name></expr></argument>,
             <argument><expr><literal type="string" pos:line="148" pos:column="14">"proxy: CONNECT: sending the CONNECT request to the remote proxy"<pos:position pos:line="148" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="81"/></expr_stmt>
        <expr_stmt><expr><name pos:line="149" pos:column="9">nbytes<pos:position pos:line="149" pos:column="15"/></name> <operator pos:line="149" pos:column="16">=<pos:position pos:line="149" pos:column="17"/></operator> <call><name pos:line="149" pos:column="18">apr_snprintf<pos:position pos:line="149" pos:column="30"/></name><argument_list pos:line="149" pos:column="30">(<argument><expr><name pos:line="149" pos:column="31">buffer<pos:position pos:line="149" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="149" pos:column="39">sizeof<argument_list pos:line="149" pos:column="45">(<argument><expr><name pos:line="149" pos:column="46">buffer<pos:position pos:line="149" pos:column="52"/></name></expr></argument>)<pos:position pos:line="149" pos:column="53"/></argument_list></sizeof></expr></argument>,
                  <argument><expr><literal type="string" pos:line="150" pos:column="19">"CONNECT %s HTTP/1.0"<pos:position pos:line="150" pos:column="40"/></literal> <name pos:line="150" pos:column="41">CRLF<pos:position pos:line="150" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="150" pos:column="47">r<pos:position pos:line="150" pos:column="48"/></name><operator pos:line="150" pos:column="48">-&gt;<pos:position pos:line="150" pos:column="53"/></operator><name pos:line="150" pos:column="50">uri<pos:position pos:line="150" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="150" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="151" pos:column="9">apr_socket_send<pos:position pos:line="151" pos:column="24"/></name><argument_list pos:line="151" pos:column="24">(<argument><expr><name pos:line="151" pos:column="25">sock<pos:position pos:line="151" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="151" pos:column="31">buffer<pos:position pos:line="151" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="151" pos:column="39">&amp;<pos:position pos:line="151" pos:column="44"/></operator><name pos:line="151" pos:column="40">nbytes<pos:position pos:line="151" pos:column="46"/></name></expr></argument>)<pos:position pos:line="151" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><name pos:line="152" pos:column="9">nbytes<pos:position pos:line="152" pos:column="15"/></name> <operator pos:line="152" pos:column="16">=<pos:position pos:line="152" pos:column="17"/></operator> <macro><name pos:line="152" pos:column="18">apr_snprintf<pos:position pos:line="152" pos:column="30"/></name><argument_list pos:line="152" pos:column="30">(<argument pos:line="152" pos:column="31">buffer<pos:position pos:line="152" pos:column="37"/></argument>, <argument pos:line="152" pos:column="39">sizeof(buffer)<pos:position pos:line="152" pos:column="53"/></argument>,
                  <argument><literal type="string" pos:line="153" pos:column="19">"Proxy-agent: %s"<pos:position pos:line="153" pos:column="36"/></literal> CRLF CRLF<pos:position pos:line="153" pos:column="46"/></argument>, <argument pos:line="153" pos:column="48">ap_get_server_version()<pos:position pos:line="153" pos:column="71"/></argument>)<pos:position pos:line="153" pos:column="72"/></argument_list></macro></expr>;<pos:position pos:line="153" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="154" pos:column="9">apr_socket_send<pos:position pos:line="154" pos:column="24"/></name><argument_list pos:line="154" pos:column="24">(<argument><expr><name pos:line="154" pos:column="25">sock<pos:position pos:line="154" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="31">buffer<pos:position pos:line="154" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="154" pos:column="39">&amp;<pos:position pos:line="154" pos:column="44"/></operator><name pos:line="154" pos:column="40">nbytes<pos:position pos:line="154" pos:column="46"/></name></expr></argument>)<pos:position pos:line="154" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="155" pos:column="6"/></block></then>
    <else pos:line="156" pos:column="5">else <block pos:line="156" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="157" pos:column="9">ap_log_error<pos:position pos:line="157" pos:column="21"/></name><argument_list pos:line="157" pos:column="21">(<argument><expr><name pos:line="157" pos:column="22">APLOG_MARK<pos:position pos:line="157" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="157" pos:column="34">APLOG_DEBUG<pos:position pos:line="157" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="157" pos:column="47">0<pos:position pos:line="157" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="157" pos:column="50">r<pos:position pos:line="157" pos:column="51"/></name><operator pos:line="157" pos:column="51">-&gt;<pos:position pos:line="157" pos:column="56"/></operator><name pos:line="157" pos:column="53">server<pos:position pos:line="157" pos:column="59"/></name></name></expr></argument>,
             <argument><expr><literal type="string" pos:line="158" pos:column="14">"proxy: CONNECT: Returning 200 OK Status"<pos:position pos:line="158" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="158" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><name pos:line="159" pos:column="9">nbytes<pos:position pos:line="159" pos:column="15"/></name> <operator pos:line="159" pos:column="16">=<pos:position pos:line="159" pos:column="17"/></operator> <call><name pos:line="159" pos:column="18">apr_snprintf<pos:position pos:line="159" pos:column="30"/></name><argument_list pos:line="159" pos:column="30">(<argument><expr><name pos:line="159" pos:column="31">buffer<pos:position pos:line="159" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="159" pos:column="39">sizeof<argument_list pos:line="159" pos:column="45">(<argument><expr><name pos:line="159" pos:column="46">buffer<pos:position pos:line="159" pos:column="52"/></name></expr></argument>)<pos:position pos:line="159" pos:column="53"/></argument_list></sizeof></expr></argument>,
                  <argument><expr><literal type="string" pos:line="160" pos:column="19">"HTTP/1.0 200 Connection Established"<pos:position pos:line="160" pos:column="56"/></literal> <name pos:line="160" pos:column="57">CRLF<pos:position pos:line="160" pos:column="61"/></name></expr></argument>)<pos:position pos:line="160" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="161" pos:column="9">ap_xlate_proto_to_ascii<pos:position pos:line="161" pos:column="32"/></name><argument_list pos:line="161" pos:column="32">(<argument><expr><name pos:line="161" pos:column="33">buffer<pos:position pos:line="161" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="41">nbytes<pos:position pos:line="161" pos:column="47"/></name></expr></argument>)<pos:position pos:line="161" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="162" pos:column="9">apr_socket_send<pos:position pos:line="162" pos:column="24"/></name><argument_list pos:line="162" pos:column="24">(<argument><expr><name pos:line="162" pos:column="25">client_socket<pos:position pos:line="162" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="162" pos:column="40">buffer<pos:position pos:line="162" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="162" pos:column="48">&amp;<pos:position pos:line="162" pos:column="53"/></operator><name pos:line="162" pos:column="49">nbytes<pos:position pos:line="162" pos:column="55"/></name></expr></argument>)<pos:position pos:line="162" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><name pos:line="163" pos:column="9">nbytes<pos:position pos:line="163" pos:column="15"/></name> <operator pos:line="163" pos:column="16">=<pos:position pos:line="163" pos:column="17"/></operator> <macro><name pos:line="163" pos:column="18">apr_snprintf<pos:position pos:line="163" pos:column="30"/></name><argument_list pos:line="163" pos:column="30">(<argument pos:line="163" pos:column="31">buffer<pos:position pos:line="163" pos:column="37"/></argument>, <argument pos:line="163" pos:column="39">sizeof(buffer)<pos:position pos:line="163" pos:column="53"/></argument>,
                  <argument><literal type="string" pos:line="164" pos:column="19">"Proxy-agent: %s"<pos:position pos:line="164" pos:column="36"/></literal> CRLF CRLF<pos:position pos:line="164" pos:column="46"/></argument>, <argument pos:line="164" pos:column="48">ap_get_server_version()<pos:position pos:line="164" pos:column="71"/></argument>)<pos:position pos:line="164" pos:column="72"/></argument_list></macro></expr>;<pos:position pos:line="164" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="165" pos:column="9">ap_xlate_proto_to_ascii<pos:position pos:line="165" pos:column="32"/></name><argument_list pos:line="165" pos:column="32">(<argument><expr><name pos:line="165" pos:column="33">buffer<pos:position pos:line="165" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="165" pos:column="41">nbytes<pos:position pos:line="165" pos:column="47"/></name></expr></argument>)<pos:position pos:line="165" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="166" pos:column="9">apr_socket_send<pos:position pos:line="166" pos:column="24"/></name><argument_list pos:line="166" pos:column="24">(<argument><expr><name pos:line="166" pos:column="25">client_socket<pos:position pos:line="166" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="166" pos:column="40">buffer<pos:position pos:line="166" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="166" pos:column="48">&amp;<pos:position pos:line="166" pos:column="53"/></operator><name pos:line="166" pos:column="49">nbytes<pos:position pos:line="166" pos:column="55"/></name></expr></argument>)<pos:position pos:line="166" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="57"/></expr_stmt>
<cpp:if pos:line="167" pos:column="1">#<cpp:directive pos:line="167" pos:column="2">if<pos:position pos:line="167" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="167" pos:column="5">0<pos:position pos:line="167" pos:column="6"/></literal></expr></cpp:if>
        <comment type="block" pos:line="168" pos:column="9">/* This is safer code, but it doesn't work yet.  I'm leaving it
         * here so that I can fix it later.
         */</comment>
        r-&gt;status = HTTP_OK;
        r-&gt;header_only = 1;
        apr_table_set(r-&gt;headers_out, "Proxy-agent: %s", ap_get_server_version());
        ap_rflush(r);
<cpp:endif pos:line="175" pos:column="1">#<cpp:directive pos:line="175" pos:column="2">endif<pos:position pos:line="175" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="176" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="178" pos:column="5">ap_log_error<pos:position pos:line="178" pos:column="17"/></name><argument_list pos:line="178" pos:column="17">(<argument><expr><name pos:line="178" pos:column="18">APLOG_MARK<pos:position pos:line="178" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="30">APLOG_DEBUG<pos:position pos:line="178" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="178" pos:column="43">0<pos:position pos:line="178" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="178" pos:column="46">r<pos:position pos:line="178" pos:column="47"/></name><operator pos:line="178" pos:column="47">-&gt;<pos:position pos:line="178" pos:column="52"/></operator><name pos:line="178" pos:column="49">server<pos:position pos:line="178" pos:column="55"/></name></name></expr></argument>,
         <argument><expr><literal type="string" pos:line="179" pos:column="10">"proxy: CONNECT: setting up poll()"<pos:position pos:line="179" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="179" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="47"/></expr_stmt>

    <comment type="block" pos:line="181" pos:column="5">/*
     * Step Four: Handle Data Transfer
     *
     * Handle two way transfer of data over the socket (this is a tunnel).
     */</comment>

<comment type="block" pos:line="187" pos:column="1">/*    r-&gt;sent_bodyct = 1;*/</comment>

    <if pos:line="189" pos:column="5">if <condition pos:line="189" pos:column="8">(<expr><operator pos:line="189" pos:column="9">(<pos:position pos:line="189" pos:column="10"/></operator><name pos:line="189" pos:column="10">rv<pos:position pos:line="189" pos:column="12"/></name> <operator pos:line="189" pos:column="13">=<pos:position pos:line="189" pos:column="14"/></operator> <call><name pos:line="189" pos:column="15">apr_pollset_create<pos:position pos:line="189" pos:column="33"/></name><argument_list pos:line="189" pos:column="33">(<argument><expr><operator pos:line="189" pos:column="34">&amp;<pos:position pos:line="189" pos:column="39"/></operator><name pos:line="189" pos:column="35">pollset<pos:position pos:line="189" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="189" pos:column="44">2<pos:position pos:line="189" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="47">r<pos:position pos:line="189" pos:column="48"/></name><operator pos:line="189" pos:column="48">-&gt;<pos:position pos:line="189" pos:column="53"/></operator><name pos:line="189" pos:column="50">pool<pos:position pos:line="189" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="189" pos:column="56">0<pos:position pos:line="189" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="189" pos:column="58"/></argument_list></call><operator pos:line="189" pos:column="58">)<pos:position pos:line="189" pos:column="59"/></operator> <operator pos:line="189" pos:column="60">!=<pos:position pos:line="189" pos:column="62"/></operator> <name pos:line="189" pos:column="63">APR_SUCCESS<pos:position pos:line="189" pos:column="74"/></name></expr>)<pos:position pos:line="189" pos:column="75"/></condition><then pos:line="189" pos:column="75">
    <block pos:line="190" pos:column="5">{
    <expr_stmt><expr><call><name pos:line="191" pos:column="5">apr_socket_close<pos:position pos:line="191" pos:column="21"/></name><argument_list pos:line="191" pos:column="21">(<argument><expr><name pos:line="191" pos:column="22">sock<pos:position pos:line="191" pos:column="26"/></name></expr></argument>)<pos:position pos:line="191" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="192" pos:column="9">ap_log_rerror<pos:position pos:line="192" pos:column="22"/></name><argument_list pos:line="192" pos:column="22">(<argument><expr><name pos:line="192" pos:column="23">APLOG_MARK<pos:position pos:line="192" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="192" pos:column="35">APLOG_ERR<pos:position pos:line="192" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="192" pos:column="46">rv<pos:position pos:line="192" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="192" pos:column="50">r<pos:position pos:line="192" pos:column="51"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="193" pos:column="13">"proxy: CONNECT: error apr_pollset_create()"<pos:position pos:line="193" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="193" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="59"/></expr_stmt>
        <return pos:line="194" pos:column="9">return <expr><name pos:line="194" pos:column="16">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="194" pos:column="42"/></name></expr>;<pos:position pos:line="194" pos:column="43"/></return>
    }<pos:position pos:line="195" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="197" pos:column="5">/* Add client side to the poll */</comment>
    <expr_stmt><expr><name><name pos:line="198" pos:column="5">pollfd<pos:position pos:line="198" pos:column="11"/></name><operator pos:line="198" pos:column="11">.<pos:position pos:line="198" pos:column="12"/></operator><name pos:line="198" pos:column="12">p<pos:position pos:line="198" pos:column="13"/></name></name> <operator pos:line="198" pos:column="14">=<pos:position pos:line="198" pos:column="15"/></operator> <name><name pos:line="198" pos:column="16">r<pos:position pos:line="198" pos:column="17"/></name><operator pos:line="198" pos:column="17">-&gt;<pos:position pos:line="198" pos:column="22"/></operator><name pos:line="198" pos:column="19">pool<pos:position pos:line="198" pos:column="23"/></name></name></expr>;<pos:position pos:line="198" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="199" pos:column="5">pollfd<pos:position pos:line="199" pos:column="11"/></name><operator pos:line="199" pos:column="11">.<pos:position pos:line="199" pos:column="12"/></operator><name pos:line="199" pos:column="12">desc_type<pos:position pos:line="199" pos:column="21"/></name></name> <operator pos:line="199" pos:column="22">=<pos:position pos:line="199" pos:column="23"/></operator> <name pos:line="199" pos:column="24">APR_POLL_SOCKET<pos:position pos:line="199" pos:column="39"/></name></expr>;<pos:position pos:line="199" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="200" pos:column="5">pollfd<pos:position pos:line="200" pos:column="11"/></name><operator pos:line="200" pos:column="11">.<pos:position pos:line="200" pos:column="12"/></operator><name pos:line="200" pos:column="12">reqevents<pos:position pos:line="200" pos:column="21"/></name></name> <operator pos:line="200" pos:column="22">=<pos:position pos:line="200" pos:column="23"/></operator> <name pos:line="200" pos:column="24">APR_POLLIN<pos:position pos:line="200" pos:column="34"/></name></expr>;<pos:position pos:line="200" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="201" pos:column="5">pollfd<pos:position pos:line="201" pos:column="11"/></name><operator pos:line="201" pos:column="11">.<pos:position pos:line="201" pos:column="12"/></operator><name pos:line="201" pos:column="12">desc<pos:position pos:line="201" pos:column="16"/></name><operator pos:line="201" pos:column="16">.<pos:position pos:line="201" pos:column="17"/></operator><name pos:line="201" pos:column="17">s<pos:position pos:line="201" pos:column="18"/></name></name> <operator pos:line="201" pos:column="19">=<pos:position pos:line="201" pos:column="20"/></operator> <name pos:line="201" pos:column="21">client_socket<pos:position pos:line="201" pos:column="34"/></name></expr>;<pos:position pos:line="201" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="202" pos:column="5">pollfd<pos:position pos:line="202" pos:column="11"/></name><operator pos:line="202" pos:column="11">.<pos:position pos:line="202" pos:column="12"/></operator><name pos:line="202" pos:column="12">client_data<pos:position pos:line="202" pos:column="23"/></name></name> <operator pos:line="202" pos:column="24">=<pos:position pos:line="202" pos:column="25"/></operator> <name pos:line="202" pos:column="26">NULL<pos:position pos:line="202" pos:column="30"/></name></expr>;<pos:position pos:line="202" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="203" pos:column="5">apr_pollset_add<pos:position pos:line="203" pos:column="20"/></name><argument_list pos:line="203" pos:column="20">(<argument><expr><name pos:line="203" pos:column="21">pollset<pos:position pos:line="203" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="203" pos:column="30">&amp;<pos:position pos:line="203" pos:column="35"/></operator><name pos:line="203" pos:column="31">pollfd<pos:position pos:line="203" pos:column="37"/></name></expr></argument>)<pos:position pos:line="203" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="39"/></expr_stmt>

    <comment type="block" pos:line="205" pos:column="5">/* Add the server side to the poll */</comment>
    <expr_stmt><expr><name><name pos:line="206" pos:column="5">pollfd<pos:position pos:line="206" pos:column="11"/></name><operator pos:line="206" pos:column="11">.<pos:position pos:line="206" pos:column="12"/></operator><name pos:line="206" pos:column="12">desc<pos:position pos:line="206" pos:column="16"/></name><operator pos:line="206" pos:column="16">.<pos:position pos:line="206" pos:column="17"/></operator><name pos:line="206" pos:column="17">s<pos:position pos:line="206" pos:column="18"/></name></name> <operator pos:line="206" pos:column="19">=<pos:position pos:line="206" pos:column="20"/></operator> <name pos:line="206" pos:column="21">sock<pos:position pos:line="206" pos:column="25"/></name></expr>;<pos:position pos:line="206" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="207" pos:column="5">apr_pollset_add<pos:position pos:line="207" pos:column="20"/></name><argument_list pos:line="207" pos:column="20">(<argument><expr><name pos:line="207" pos:column="21">pollset<pos:position pos:line="207" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="207" pos:column="30">&amp;<pos:position pos:line="207" pos:column="35"/></operator><name pos:line="207" pos:column="31">pollfd<pos:position pos:line="207" pos:column="37"/></name></expr></argument>)<pos:position pos:line="207" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="39"/></expr_stmt>

    <while pos:line="209" pos:column="5">while <condition pos:line="209" pos:column="11">(<expr><literal type="number" pos:line="209" pos:column="12">1<pos:position pos:line="209" pos:column="13"/></literal></expr>)<pos:position pos:line="209" pos:column="14"/></condition> <block pos:line="209" pos:column="15">{ <comment type="block" pos:line="209" pos:column="17">/* Infinite loop until error (one side closes the connection) */</comment>
        <if pos:line="210" pos:column="9">if <condition pos:line="210" pos:column="12">(<expr><operator pos:line="210" pos:column="13">(<pos:position pos:line="210" pos:column="14"/></operator><name pos:line="210" pos:column="14">rv<pos:position pos:line="210" pos:column="16"/></name> <operator pos:line="210" pos:column="17">=<pos:position pos:line="210" pos:column="18"/></operator> <call><name pos:line="210" pos:column="19">apr_pollset_poll<pos:position pos:line="210" pos:column="35"/></name><argument_list pos:line="210" pos:column="35">(<argument><expr><name pos:line="210" pos:column="36">pollset<pos:position pos:line="210" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="210" pos:column="45">-<pos:position pos:line="210" pos:column="46"/></operator><literal type="number" pos:line="210" pos:column="46">1<pos:position pos:line="210" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="210" pos:column="49">&amp;<pos:position pos:line="210" pos:column="54"/></operator><name pos:line="210" pos:column="50">pollcnt<pos:position pos:line="210" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="210" pos:column="59">&amp;<pos:position pos:line="210" pos:column="64"/></operator><name pos:line="210" pos:column="60">signalled<pos:position pos:line="210" pos:column="69"/></name></expr></argument>)<pos:position pos:line="210" pos:column="70"/></argument_list></call><operator pos:line="210" pos:column="70">)<pos:position pos:line="210" pos:column="71"/></operator> <operator pos:line="210" pos:column="72">!=<pos:position pos:line="210" pos:column="74"/></operator> <name pos:line="210" pos:column="75">APR_SUCCESS<pos:position pos:line="210" pos:column="86"/></name></expr>)<pos:position pos:line="210" pos:column="87"/></condition><then pos:line="210" pos:column="87"> <block pos:line="210" pos:column="88">{
        <expr_stmt><expr><call><name pos:line="211" pos:column="9">apr_socket_close<pos:position pos:line="211" pos:column="25"/></name><argument_list pos:line="211" pos:column="25">(<argument><expr><name pos:line="211" pos:column="26">sock<pos:position pos:line="211" pos:column="30"/></name></expr></argument>)<pos:position pos:line="211" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="212" pos:column="13">ap_log_rerror<pos:position pos:line="212" pos:column="26"/></name><argument_list pos:line="212" pos:column="26">(<argument><expr><name pos:line="212" pos:column="27">APLOG_MARK<pos:position pos:line="212" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="39">APLOG_ERR<pos:position pos:line="212" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="50">rv<pos:position pos:line="212" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="54">r<pos:position pos:line="212" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="212" pos:column="57">"proxy: CONNECT: error apr_poll()"<pos:position pos:line="212" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="212" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="93"/></expr_stmt>
            <return pos:line="213" pos:column="13">return <expr><name pos:line="213" pos:column="20">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="213" pos:column="46"/></name></expr>;<pos:position pos:line="213" pos:column="47"/></return>
        }<pos:position pos:line="214" pos:column="10"/></block></then></if>
<cpp:ifdef pos:line="215" pos:column="1">#<cpp:directive pos:line="215" pos:column="2">ifdef<pos:position pos:line="215" pos:column="7"/></cpp:directive> <name pos:line="215" pos:column="8">DEBUGGING<pos:position pos:line="215" pos:column="17"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="216" pos:column="9">ap_log_error<pos:position pos:line="216" pos:column="21"/></name><argument_list pos:line="216" pos:column="21">(<argument><expr><name pos:line="216" pos:column="22">APLOG_MARK<pos:position pos:line="216" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="34">APLOG_DEBUG<pos:position pos:line="216" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="216" pos:column="47">0<pos:position pos:line="216" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="216" pos:column="50">r<pos:position pos:line="216" pos:column="51"/></name><operator pos:line="216" pos:column="51">-&gt;<pos:position pos:line="216" pos:column="56"/></operator><name pos:line="216" pos:column="53">server<pos:position pos:line="216" pos:column="59"/></name></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="217" pos:column="22">"proxy: CONNECT: woke from select(), i=%d"<pos:position pos:line="217" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="217" pos:column="66">pollcnt<pos:position pos:line="217" pos:column="73"/></name></expr></argument>)<pos:position pos:line="217" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="75"/></expr_stmt>
<cpp:endif pos:line="218" pos:column="1">#<cpp:directive pos:line="218" pos:column="2">endif<pos:position pos:line="218" pos:column="7"/></cpp:directive></cpp:endif>

        <for pos:line="220" pos:column="9">for <control pos:line="220" pos:column="13">(<init><expr><name pos:line="220" pos:column="14">pi<pos:position pos:line="220" pos:column="16"/></name> <operator pos:line="220" pos:column="17">=<pos:position pos:line="220" pos:column="18"/></operator> <literal type="number" pos:line="220" pos:column="19">0<pos:position pos:line="220" pos:column="20"/></literal></expr>;<pos:position pos:line="220" pos:column="21"/></init> <condition><expr><name pos:line="220" pos:column="22">pi<pos:position pos:line="220" pos:column="24"/></name> <operator pos:line="220" pos:column="25">&lt;<pos:position pos:line="220" pos:column="29"/></operator> <name pos:line="220" pos:column="27">pollcnt<pos:position pos:line="220" pos:column="34"/></name></expr>;<pos:position pos:line="220" pos:column="35"/></condition> <incr><expr><name pos:line="220" pos:column="36">pi<pos:position pos:line="220" pos:column="38"/></name><operator pos:line="220" pos:column="38">++<pos:position pos:line="220" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="220" pos:column="41"/></control> <block pos:line="220" pos:column="42">{
            <decl_stmt><decl><type><specifier pos:line="221" pos:column="13">const<pos:position pos:line="221" pos:column="18"/></specifier> <name pos:line="221" pos:column="19">apr_pollfd_t<pos:position pos:line="221" pos:column="31"/></name> <modifier pos:line="221" pos:column="32">*<pos:position pos:line="221" pos:column="33"/></modifier></type><name pos:line="221" pos:column="33">cur<pos:position pos:line="221" pos:column="36"/></name> <init pos:line="221" pos:column="37">= <expr><operator pos:line="221" pos:column="39">&amp;<pos:position pos:line="221" pos:column="44"/></operator><name><name pos:line="221" pos:column="40">signalled<pos:position pos:line="221" pos:column="49"/></name><index pos:line="221" pos:column="49">[<expr><name pos:line="221" pos:column="50">pi<pos:position pos:line="221" pos:column="52"/></name></expr>]<pos:position pos:line="221" pos:column="53"/></index></name></expr></init></decl>;<pos:position pos:line="221" pos:column="54"/></decl_stmt>

            <if pos:line="223" pos:column="13">if <condition pos:line="223" pos:column="16">(<expr><name><name pos:line="223" pos:column="17">cur<pos:position pos:line="223" pos:column="20"/></name><operator pos:line="223" pos:column="20">-&gt;<pos:position pos:line="223" pos:column="25"/></operator><name pos:line="223" pos:column="22">desc<pos:position pos:line="223" pos:column="26"/></name><operator pos:line="223" pos:column="26">.<pos:position pos:line="223" pos:column="27"/></operator><name pos:line="223" pos:column="27">s<pos:position pos:line="223" pos:column="28"/></name></name> <operator pos:line="223" pos:column="29">==<pos:position pos:line="223" pos:column="31"/></operator> <name pos:line="223" pos:column="32">sock<pos:position pos:line="223" pos:column="36"/></name></expr>)<pos:position pos:line="223" pos:column="37"/></condition><then pos:line="223" pos:column="37"> <block pos:line="223" pos:column="38">{
                <expr_stmt><expr><name pos:line="224" pos:column="17">pollevent<pos:position pos:line="224" pos:column="26"/></name> <operator pos:line="224" pos:column="27">=<pos:position pos:line="224" pos:column="28"/></operator> <name><name pos:line="224" pos:column="29">cur<pos:position pos:line="224" pos:column="32"/></name><operator pos:line="224" pos:column="32">-&gt;<pos:position pos:line="224" pos:column="37"/></operator><name pos:line="224" pos:column="34">rtnevents<pos:position pos:line="224" pos:column="43"/></name></name></expr>;<pos:position pos:line="224" pos:column="44"/></expr_stmt>
                <if pos:line="225" pos:column="17">if <condition pos:line="225" pos:column="20">(<expr><name pos:line="225" pos:column="21">pollevent<pos:position pos:line="225" pos:column="30"/></name> <operator pos:line="225" pos:column="31">&amp;<pos:position pos:line="225" pos:column="36"/></operator> <name pos:line="225" pos:column="33">APR_POLLIN<pos:position pos:line="225" pos:column="43"/></name></expr>)<pos:position pos:line="225" pos:column="44"/></condition><then pos:line="225" pos:column="44"> <block pos:line="225" pos:column="45">{
<cpp:ifdef pos:line="226" pos:column="1">#<cpp:directive pos:line="226" pos:column="2">ifdef<pos:position pos:line="226" pos:column="7"/></cpp:directive> <name pos:line="226" pos:column="8">DEBUGGING<pos:position pos:line="226" pos:column="17"/></name></cpp:ifdef>
                    <expr_stmt><expr><call><name pos:line="227" pos:column="21">ap_log_error<pos:position pos:line="227" pos:column="33"/></name><argument_list pos:line="227" pos:column="33">(<argument><expr><name pos:line="227" pos:column="34">APLOG_MARK<pos:position pos:line="227" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="227" pos:column="46">APLOG_DEBUG<pos:position pos:line="227" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="227" pos:column="59">0<pos:position pos:line="227" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="227" pos:column="62">r<pos:position pos:line="227" pos:column="63"/></name><operator pos:line="227" pos:column="63">-&gt;<pos:position pos:line="227" pos:column="68"/></operator><name pos:line="227" pos:column="65">server<pos:position pos:line="227" pos:column="71"/></name></name></expr></argument>,
                                 <argument><expr><literal type="string" pos:line="228" pos:column="34">"proxy: CONNECT: sock was set"<pos:position pos:line="228" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="228" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="228" pos:column="66"/></expr_stmt>
<cpp:endif pos:line="229" pos:column="1">#<cpp:directive pos:line="229" pos:column="2">endif<pos:position pos:line="229" pos:column="7"/></cpp:directive></cpp:endif>
                    <expr_stmt><expr><name pos:line="230" pos:column="21">nbytes<pos:position pos:line="230" pos:column="27"/></name> <operator pos:line="230" pos:column="28">=<pos:position pos:line="230" pos:column="29"/></operator> <sizeof pos:line="230" pos:column="30">sizeof<argument_list pos:line="230" pos:column="36">(<argument><expr><name pos:line="230" pos:column="37">buffer<pos:position pos:line="230" pos:column="43"/></name></expr></argument>)<pos:position pos:line="230" pos:column="44"/></argument_list></sizeof></expr>;<pos:position pos:line="230" pos:column="45"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="231" pos:column="21">rv<pos:position pos:line="231" pos:column="23"/></name> <operator pos:line="231" pos:column="24">=<pos:position pos:line="231" pos:column="25"/></operator> <call><name pos:line="231" pos:column="26">apr_socket_recv<pos:position pos:line="231" pos:column="41"/></name><argument_list pos:line="231" pos:column="41">(<argument><expr><name pos:line="231" pos:column="42">sock<pos:position pos:line="231" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="231" pos:column="48">buffer<pos:position pos:line="231" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="231" pos:column="56">&amp;<pos:position pos:line="231" pos:column="61"/></operator><name pos:line="231" pos:column="57">nbytes<pos:position pos:line="231" pos:column="63"/></name></expr></argument>)<pos:position pos:line="231" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="231" pos:column="65"/></expr_stmt>
                    <if pos:line="232" pos:column="21">if <condition pos:line="232" pos:column="24">(<expr><name pos:line="232" pos:column="25">rv<pos:position pos:line="232" pos:column="27"/></name> <operator pos:line="232" pos:column="28">==<pos:position pos:line="232" pos:column="30"/></operator> <name pos:line="232" pos:column="31">APR_SUCCESS<pos:position pos:line="232" pos:column="42"/></name></expr>)<pos:position pos:line="232" pos:column="43"/></condition><then pos:line="232" pos:column="43"> <block pos:line="232" pos:column="44">{
                        <expr_stmt><expr><name pos:line="233" pos:column="25">o<pos:position pos:line="233" pos:column="26"/></name> <operator pos:line="233" pos:column="27">=<pos:position pos:line="233" pos:column="28"/></operator> <literal type="number" pos:line="233" pos:column="29">0<pos:position pos:line="233" pos:column="30"/></literal></expr>;<pos:position pos:line="233" pos:column="31"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="234" pos:column="25">i<pos:position pos:line="234" pos:column="26"/></name> <operator pos:line="234" pos:column="27">=<pos:position pos:line="234" pos:column="28"/></operator> <name pos:line="234" pos:column="29">nbytes<pos:position pos:line="234" pos:column="35"/></name></expr>;<pos:position pos:line="234" pos:column="36"/></expr_stmt>
                        <while pos:line="235" pos:column="25">while<condition pos:line="235" pos:column="30">(<expr><name pos:line="235" pos:column="31">i<pos:position pos:line="235" pos:column="32"/></name> <operator pos:line="235" pos:column="33">&gt;<pos:position pos:line="235" pos:column="37"/></operator> <literal type="number" pos:line="235" pos:column="35">0<pos:position pos:line="235" pos:column="36"/></literal></expr>)<pos:position pos:line="235" pos:column="37"/></condition>
                        <block pos:line="236" pos:column="25">{
                            <expr_stmt><expr><name pos:line="237" pos:column="29">nbytes<pos:position pos:line="237" pos:column="35"/></name> <operator pos:line="237" pos:column="36">=<pos:position pos:line="237" pos:column="37"/></operator> <name pos:line="237" pos:column="38">i<pos:position pos:line="237" pos:column="39"/></name></expr>;<pos:position pos:line="237" pos:column="40"/></expr_stmt>
    <comment type="block" pos:line="238" pos:column="5">/* This is just plain wrong.  No module should ever write directly
     * to the client.  For now, this works, but this is high on my list of
     * things to fix.  The correct line is:
     * if ((nbytes = ap_rwrite(buffer + o, nbytes, r)) &lt; 0)
     * rbb
     */</comment>
                            <expr_stmt><expr><name pos:line="244" pos:column="29">rv<pos:position pos:line="244" pos:column="31"/></name> <operator pos:line="244" pos:column="32">=<pos:position pos:line="244" pos:column="33"/></operator> <call><name pos:line="244" pos:column="34">apr_socket_send<pos:position pos:line="244" pos:column="49"/></name><argument_list pos:line="244" pos:column="49">(<argument><expr><name pos:line="244" pos:column="50">client_socket<pos:position pos:line="244" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="244" pos:column="65">buffer<pos:position pos:line="244" pos:column="71"/></name> <operator pos:line="244" pos:column="72">+<pos:position pos:line="244" pos:column="73"/></operator> <name pos:line="244" pos:column="74">o<pos:position pos:line="244" pos:column="75"/></name></expr></argument>, <argument><expr><operator pos:line="244" pos:column="77">&amp;<pos:position pos:line="244" pos:column="82"/></operator><name pos:line="244" pos:column="78">nbytes<pos:position pos:line="244" pos:column="84"/></name></expr></argument>)<pos:position pos:line="244" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="244" pos:column="86"/></expr_stmt>
                            <if pos:line="245" pos:column="29">if <condition pos:line="245" pos:column="32">(<expr><name pos:line="245" pos:column="33">rv<pos:position pos:line="245" pos:column="35"/></name> <operator pos:line="245" pos:column="36">!=<pos:position pos:line="245" pos:column="38"/></operator> <name pos:line="245" pos:column="39">APR_SUCCESS<pos:position pos:line="245" pos:column="50"/></name></expr>)<pos:position pos:line="245" pos:column="51"/></condition><then pos:line="245" pos:column="51">
                                <block type="pseudo"><break pos:line="246" pos:column="33">break;<pos:position pos:line="246" pos:column="39"/></break></block></then></if>
                            <expr_stmt><expr><name pos:line="247" pos:column="29">o<pos:position pos:line="247" pos:column="30"/></name> <operator pos:line="247" pos:column="31">+=<pos:position pos:line="247" pos:column="33"/></operator> <name pos:line="247" pos:column="34">nbytes<pos:position pos:line="247" pos:column="40"/></name></expr>;<pos:position pos:line="247" pos:column="41"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="248" pos:column="29">i<pos:position pos:line="248" pos:column="30"/></name> <operator pos:line="248" pos:column="31">-=<pos:position pos:line="248" pos:column="33"/></operator> <name pos:line="248" pos:column="34">nbytes<pos:position pos:line="248" pos:column="40"/></name></expr>;<pos:position pos:line="248" pos:column="41"/></expr_stmt>
                        }<pos:position pos:line="249" pos:column="26"/></block></while>
                    }<pos:position pos:line="250" pos:column="22"/></block></then>
                    <else pos:line="251" pos:column="21">else
                        <block type="pseudo"><break pos:line="252" pos:column="25">break;<pos:position pos:line="252" pos:column="31"/></break></block></else></if>
                }<pos:position pos:line="253" pos:column="18"/></block></then>
                <elseif pos:line="254" pos:column="17">else <if pos:line="254" pos:column="22">if <condition pos:line="254" pos:column="25">(<expr><operator pos:line="254" pos:column="26">(<pos:position pos:line="254" pos:column="27"/></operator><name pos:line="254" pos:column="27">pollevent<pos:position pos:line="254" pos:column="36"/></name> <operator pos:line="254" pos:column="37">&amp;<pos:position pos:line="254" pos:column="42"/></operator> <name pos:line="254" pos:column="39">APR_POLLERR<pos:position pos:line="254" pos:column="50"/></name><operator pos:line="254" pos:column="50">)<pos:position pos:line="254" pos:column="51"/></operator> <operator pos:line="254" pos:column="52">||<pos:position pos:line="254" pos:column="54"/></operator> <operator pos:line="254" pos:column="55">(<pos:position pos:line="254" pos:column="56"/></operator><name pos:line="254" pos:column="56">pollevent<pos:position pos:line="254" pos:column="65"/></name> <operator pos:line="254" pos:column="66">&amp;<pos:position pos:line="254" pos:column="71"/></operator> <name pos:line="254" pos:column="68">APR_POLLHUP<pos:position pos:line="254" pos:column="79"/></name><operator pos:line="254" pos:column="79">)<pos:position pos:line="254" pos:column="80"/></operator></expr>)<pos:position pos:line="254" pos:column="81"/></condition><then pos:line="254" pos:column="81">
                    <block type="pseudo"><break pos:line="255" pos:column="21">break;<pos:position pos:line="255" pos:column="27"/></break></block></then></if></elseif></if>
            }<pos:position pos:line="256" pos:column="14"/></block></then>
            <elseif pos:line="257" pos:column="13">else <if pos:line="257" pos:column="18">if <condition pos:line="257" pos:column="21">(<expr><name><name pos:line="257" pos:column="22">cur<pos:position pos:line="257" pos:column="25"/></name><operator pos:line="257" pos:column="25">-&gt;<pos:position pos:line="257" pos:column="30"/></operator><name pos:line="257" pos:column="27">desc<pos:position pos:line="257" pos:column="31"/></name><operator pos:line="257" pos:column="31">.<pos:position pos:line="257" pos:column="32"/></operator><name pos:line="257" pos:column="32">s<pos:position pos:line="257" pos:column="33"/></name></name> <operator pos:line="257" pos:column="34">==<pos:position pos:line="257" pos:column="36"/></operator> <name pos:line="257" pos:column="37">client_socket<pos:position pos:line="257" pos:column="50"/></name></expr>)<pos:position pos:line="257" pos:column="51"/></condition><then pos:line="257" pos:column="51"> <block pos:line="257" pos:column="52">{
                <expr_stmt><expr><name pos:line="258" pos:column="17">pollevent<pos:position pos:line="258" pos:column="26"/></name> <operator pos:line="258" pos:column="27">=<pos:position pos:line="258" pos:column="28"/></operator> <name><name pos:line="258" pos:column="29">cur<pos:position pos:line="258" pos:column="32"/></name><operator pos:line="258" pos:column="32">-&gt;<pos:position pos:line="258" pos:column="37"/></operator><name pos:line="258" pos:column="34">rtnevents<pos:position pos:line="258" pos:column="43"/></name></name></expr>;<pos:position pos:line="258" pos:column="44"/></expr_stmt>
                <if pos:line="259" pos:column="17">if <condition pos:line="259" pos:column="20">(<expr><name pos:line="259" pos:column="21">pollevent<pos:position pos:line="259" pos:column="30"/></name> <operator pos:line="259" pos:column="31">&amp;<pos:position pos:line="259" pos:column="36"/></operator> <name pos:line="259" pos:column="33">APR_POLLIN<pos:position pos:line="259" pos:column="43"/></name></expr>)<pos:position pos:line="259" pos:column="44"/></condition><then pos:line="259" pos:column="44"> <block pos:line="259" pos:column="45">{
<cpp:ifdef pos:line="260" pos:column="1">#<cpp:directive pos:line="260" pos:column="2">ifdef<pos:position pos:line="260" pos:column="7"/></cpp:directive> <name pos:line="260" pos:column="8">DEBUGGING<pos:position pos:line="260" pos:column="17"/></name></cpp:ifdef>
                    <expr_stmt><expr><call><name pos:line="261" pos:column="21">ap_log_error<pos:position pos:line="261" pos:column="33"/></name><argument_list pos:line="261" pos:column="33">(<argument><expr><name pos:line="261" pos:column="34">APLOG_MARK<pos:position pos:line="261" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="261" pos:column="46">APLOG_DEBUG<pos:position pos:line="261" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="261" pos:column="59">0<pos:position pos:line="261" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="261" pos:column="62">r<pos:position pos:line="261" pos:column="63"/></name><operator pos:line="261" pos:column="63">-&gt;<pos:position pos:line="261" pos:column="68"/></operator><name pos:line="261" pos:column="65">server<pos:position pos:line="261" pos:column="71"/></name></name></expr></argument>,
                                 <argument><expr><literal type="string" pos:line="262" pos:column="34">"proxy: CONNECT: client was set"<pos:position pos:line="262" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="262" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="262" pos:column="68"/></expr_stmt>
<cpp:endif pos:line="263" pos:column="1">#<cpp:directive pos:line="263" pos:column="2">endif<pos:position pos:line="263" pos:column="7"/></cpp:directive></cpp:endif>
                    <expr_stmt><expr><name pos:line="264" pos:column="21">nbytes<pos:position pos:line="264" pos:column="27"/></name> <operator pos:line="264" pos:column="28">=<pos:position pos:line="264" pos:column="29"/></operator> <sizeof pos:line="264" pos:column="30">sizeof<argument_list pos:line="264" pos:column="36">(<argument><expr><name pos:line="264" pos:column="37">buffer<pos:position pos:line="264" pos:column="43"/></name></expr></argument>)<pos:position pos:line="264" pos:column="44"/></argument_list></sizeof></expr>;<pos:position pos:line="264" pos:column="45"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="265" pos:column="21">rv<pos:position pos:line="265" pos:column="23"/></name> <operator pos:line="265" pos:column="24">=<pos:position pos:line="265" pos:column="25"/></operator> <call><name pos:line="265" pos:column="26">apr_socket_recv<pos:position pos:line="265" pos:column="41"/></name><argument_list pos:line="265" pos:column="41">(<argument><expr><name pos:line="265" pos:column="42">client_socket<pos:position pos:line="265" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="265" pos:column="57">buffer<pos:position pos:line="265" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="265" pos:column="65">&amp;<pos:position pos:line="265" pos:column="70"/></operator><name pos:line="265" pos:column="66">nbytes<pos:position pos:line="265" pos:column="72"/></name></expr></argument>)<pos:position pos:line="265" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="265" pos:column="74"/></expr_stmt>
                    <if pos:line="266" pos:column="21">if <condition pos:line="266" pos:column="24">(<expr><name pos:line="266" pos:column="25">rv<pos:position pos:line="266" pos:column="27"/></name> <operator pos:line="266" pos:column="28">==<pos:position pos:line="266" pos:column="30"/></operator> <name pos:line="266" pos:column="31">APR_SUCCESS<pos:position pos:line="266" pos:column="42"/></name></expr>)<pos:position pos:line="266" pos:column="43"/></condition><then pos:line="266" pos:column="43"> <block pos:line="266" pos:column="44">{
                        <expr_stmt><expr><name pos:line="267" pos:column="25">o<pos:position pos:line="267" pos:column="26"/></name> <operator pos:line="267" pos:column="27">=<pos:position pos:line="267" pos:column="28"/></operator> <literal type="number" pos:line="267" pos:column="29">0<pos:position pos:line="267" pos:column="30"/></literal></expr>;<pos:position pos:line="267" pos:column="31"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="268" pos:column="25">i<pos:position pos:line="268" pos:column="26"/></name> <operator pos:line="268" pos:column="27">=<pos:position pos:line="268" pos:column="28"/></operator> <name pos:line="268" pos:column="29">nbytes<pos:position pos:line="268" pos:column="35"/></name></expr>;<pos:position pos:line="268" pos:column="36"/></expr_stmt>
<cpp:ifdef pos:line="269" pos:column="1">#<cpp:directive pos:line="269" pos:column="2">ifdef<pos:position pos:line="269" pos:column="7"/></cpp:directive> <name pos:line="269" pos:column="8">DEBUGGING<pos:position pos:line="269" pos:column="17"/></name></cpp:ifdef>
                        <expr_stmt><expr><call><name pos:line="270" pos:column="25">ap_log_error<pos:position pos:line="270" pos:column="37"/></name><argument_list pos:line="270" pos:column="37">(<argument><expr><name pos:line="270" pos:column="38">APLOG_MARK<pos:position pos:line="270" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="270" pos:column="50">APLOG_DEBUG<pos:position pos:line="270" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="270" pos:column="63">0<pos:position pos:line="270" pos:column="64"/></literal></expr></argument>, <argument><expr><name><name pos:line="270" pos:column="66">r<pos:position pos:line="270" pos:column="67"/></name><operator pos:line="270" pos:column="67">-&gt;<pos:position pos:line="270" pos:column="72"/></operator><name pos:line="270" pos:column="69">server<pos:position pos:line="270" pos:column="75"/></name></name></expr></argument>,
                                     <argument><expr><literal type="string" pos:line="271" pos:column="38">"proxy: CONNECT: read %d from client"<pos:position pos:line="271" pos:column="75"/></literal></expr></argument>, <argument><expr><name pos:line="271" pos:column="77">i<pos:position pos:line="271" pos:column="78"/></name></expr></argument>)<pos:position pos:line="271" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="271" pos:column="80"/></expr_stmt>
<cpp:endif pos:line="272" pos:column="1">#<cpp:directive pos:line="272" pos:column="2">endif<pos:position pos:line="272" pos:column="7"/></cpp:directive></cpp:endif>
                        <while pos:line="273" pos:column="25">while<condition pos:line="273" pos:column="30">(<expr><name pos:line="273" pos:column="31">i<pos:position pos:line="273" pos:column="32"/></name> <operator pos:line="273" pos:column="33">&gt;<pos:position pos:line="273" pos:column="37"/></operator> <literal type="number" pos:line="273" pos:column="35">0<pos:position pos:line="273" pos:column="36"/></literal></expr>)<pos:position pos:line="273" pos:column="37"/></condition>
                        <block pos:line="274" pos:column="25">{
                            <expr_stmt><expr><name pos:line="275" pos:column="29">nbytes<pos:position pos:line="275" pos:column="35"/></name> <operator pos:line="275" pos:column="36">=<pos:position pos:line="275" pos:column="37"/></operator> <name pos:line="275" pos:column="38">i<pos:position pos:line="275" pos:column="39"/></name></expr>;<pos:position pos:line="275" pos:column="40"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="276" pos:column="29">rv<pos:position pos:line="276" pos:column="31"/></name> <operator pos:line="276" pos:column="32">=<pos:position pos:line="276" pos:column="33"/></operator> <call><name pos:line="276" pos:column="34">apr_socket_send<pos:position pos:line="276" pos:column="49"/></name><argument_list pos:line="276" pos:column="49">(<argument><expr><name pos:line="276" pos:column="50">sock<pos:position pos:line="276" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="276" pos:column="56">buffer<pos:position pos:line="276" pos:column="62"/></name> <operator pos:line="276" pos:column="63">+<pos:position pos:line="276" pos:column="64"/></operator> <name pos:line="276" pos:column="65">o<pos:position pos:line="276" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="276" pos:column="68">&amp;<pos:position pos:line="276" pos:column="73"/></operator><name pos:line="276" pos:column="69">nbytes<pos:position pos:line="276" pos:column="75"/></name></expr></argument>)<pos:position pos:line="276" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="276" pos:column="77"/></expr_stmt>
                            <if pos:line="277" pos:column="29">if <condition pos:line="277" pos:column="32">(<expr><name pos:line="277" pos:column="33">rv<pos:position pos:line="277" pos:column="35"/></name> <operator pos:line="277" pos:column="36">!=<pos:position pos:line="277" pos:column="38"/></operator> <name pos:line="277" pos:column="39">APR_SUCCESS<pos:position pos:line="277" pos:column="50"/></name></expr>)<pos:position pos:line="277" pos:column="51"/></condition><then pos:line="277" pos:column="51">
                                <block type="pseudo"><break pos:line="278" pos:column="33">break;<pos:position pos:line="278" pos:column="39"/></break></block></then></if>
                            <expr_stmt><expr><name pos:line="279" pos:column="29">o<pos:position pos:line="279" pos:column="30"/></name> <operator pos:line="279" pos:column="31">+=<pos:position pos:line="279" pos:column="33"/></operator> <name pos:line="279" pos:column="34">nbytes<pos:position pos:line="279" pos:column="40"/></name></expr>;<pos:position pos:line="279" pos:column="41"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="280" pos:column="29">i<pos:position pos:line="280" pos:column="30"/></name> <operator pos:line="280" pos:column="31">-=<pos:position pos:line="280" pos:column="33"/></operator> <name pos:line="280" pos:column="34">nbytes<pos:position pos:line="280" pos:column="40"/></name></expr>;<pos:position pos:line="280" pos:column="41"/></expr_stmt>
                        }<pos:position pos:line="281" pos:column="26"/></block></while>
                    }<pos:position pos:line="282" pos:column="22"/></block></then>
                    <else pos:line="283" pos:column="21">else
                        <block type="pseudo"><break pos:line="284" pos:column="25">break;<pos:position pos:line="284" pos:column="31"/></break></block></else></if>
                }<pos:position pos:line="285" pos:column="18"/></block></then>
                <elseif pos:line="286" pos:column="17">else <if pos:line="286" pos:column="22">if <condition pos:line="286" pos:column="25">(<expr><operator pos:line="286" pos:column="26">(<pos:position pos:line="286" pos:column="27"/></operator><name pos:line="286" pos:column="27">pollevent<pos:position pos:line="286" pos:column="36"/></name> <operator pos:line="286" pos:column="37">&amp;<pos:position pos:line="286" pos:column="42"/></operator> <name pos:line="286" pos:column="39">APR_POLLERR<pos:position pos:line="286" pos:column="50"/></name><operator pos:line="286" pos:column="50">)<pos:position pos:line="286" pos:column="51"/></operator> <operator pos:line="286" pos:column="52">||<pos:position pos:line="286" pos:column="54"/></operator> <operator pos:line="286" pos:column="55">(<pos:position pos:line="286" pos:column="56"/></operator><name pos:line="286" pos:column="56">pollevent<pos:position pos:line="286" pos:column="65"/></name> <operator pos:line="286" pos:column="66">&amp;<pos:position pos:line="286" pos:column="71"/></operator> <name pos:line="286" pos:column="68">APR_POLLHUP<pos:position pos:line="286" pos:column="79"/></name><operator pos:line="286" pos:column="79">)<pos:position pos:line="286" pos:column="80"/></operator></expr>)<pos:position pos:line="286" pos:column="81"/></condition><then pos:line="286" pos:column="81"> <block pos:line="286" pos:column="82">{
                    <expr_stmt><expr><name pos:line="287" pos:column="21">rv<pos:position pos:line="287" pos:column="23"/></name> <operator pos:line="287" pos:column="24">=<pos:position pos:line="287" pos:column="25"/></operator> <name pos:line="287" pos:column="26">APR_EOF<pos:position pos:line="287" pos:column="33"/></name></expr>;<pos:position pos:line="287" pos:column="34"/></expr_stmt>
                    <break pos:line="288" pos:column="21">break;<pos:position pos:line="288" pos:column="27"/></break>
                }<pos:position pos:line="289" pos:column="18"/></block></then></if></elseif></if>
            }<pos:position pos:line="290" pos:column="14"/></block></then></if></elseif>
            <else pos:line="291" pos:column="13">else
                <block type="pseudo"><break pos:line="292" pos:column="17">break;<pos:position pos:line="292" pos:column="23"/></break></block></else></if>
        }<pos:position pos:line="293" pos:column="10"/></block></for>
        <if pos:line="294" pos:column="9">if <condition pos:line="294" pos:column="12">(<expr><name pos:line="294" pos:column="13">rv<pos:position pos:line="294" pos:column="15"/></name> <operator pos:line="294" pos:column="16">!=<pos:position pos:line="294" pos:column="18"/></operator> <name pos:line="294" pos:column="19">APR_SUCCESS<pos:position pos:line="294" pos:column="30"/></name></expr>)<pos:position pos:line="294" pos:column="31"/></condition><then pos:line="294" pos:column="31"> <block pos:line="294" pos:column="32">{
            <break pos:line="295" pos:column="13">break;<pos:position pos:line="295" pos:column="19"/></break>
        }<pos:position pos:line="296" pos:column="10"/></block></then></if>
    }<pos:position pos:line="297" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="299" pos:column="5">ap_log_error<pos:position pos:line="299" pos:column="17"/></name><argument_list pos:line="299" pos:column="17">(<argument><expr><name pos:line="299" pos:column="18">APLOG_MARK<pos:position pos:line="299" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="299" pos:column="30">APLOG_DEBUG<pos:position pos:line="299" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="299" pos:column="43">0<pos:position pos:line="299" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="299" pos:column="46">r<pos:position pos:line="299" pos:column="47"/></name><operator pos:line="299" pos:column="47">-&gt;<pos:position pos:line="299" pos:column="52"/></operator><name pos:line="299" pos:column="49">server<pos:position pos:line="299" pos:column="55"/></name></name></expr></argument>,
         <argument><expr><literal type="string" pos:line="300" pos:column="10">"proxy: CONNECT: finished with poll() - cleaning up"<pos:position pos:line="300" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="300" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="300" pos:column="64"/></expr_stmt>

    <comment type="block" pos:line="302" pos:column="5">/*
     * Step Five: Clean Up
     *
     * Close the socket and clean up
     */</comment>

    <expr_stmt><expr><call><name pos:line="308" pos:column="5">apr_socket_close<pos:position pos:line="308" pos:column="21"/></name><argument_list pos:line="308" pos:column="21">(<argument><expr><name pos:line="308" pos:column="22">sock<pos:position pos:line="308" pos:column="26"/></name></expr></argument>)<pos:position pos:line="308" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="308" pos:column="28"/></expr_stmt>

    <return pos:line="310" pos:column="5">return <expr><name pos:line="310" pos:column="12">OK<pos:position pos:line="310" pos:column="14"/></name></expr>;<pos:position pos:line="310" pos:column="15"/></return>
}<pos:position pos:line="311" pos:column="2"/></block></function></unit>
