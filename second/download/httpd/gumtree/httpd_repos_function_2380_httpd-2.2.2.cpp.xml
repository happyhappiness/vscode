<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2380_httpd-2.2.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">join_workers<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">apr_thread_t<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">listener<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">apr_thread_t<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier><modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">threads<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">i<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="22">thread_rv<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">listener<pos:position pos:line="6" pos:column="17"/></name></expr>)<pos:position pos:line="6" pos:column="18"/></condition><then pos:line="6" pos:column="18"> <block pos:line="6" pos:column="19">{
        <decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">iter<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>

        <comment type="block" pos:line="9" pos:column="9">/* deal with a rare timing window which affects waking up the
         * listener thread...  if the signal sent to the listener thread
         * is delivered between the time it verifies that the
         * listener_may_exit flag is clear and the time it enters a
         * blocking syscall, the signal didn't do any good...  work around
         * that by sleeping briefly and sending it again
         */</comment>

        <expr_stmt><expr><name pos:line="17" pos:column="9">iter<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <literal type="number" pos:line="17" pos:column="16">0<pos:position pos:line="17" pos:column="17"/></literal></expr>;<pos:position pos:line="17" pos:column="18"/></expr_stmt>
        <while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><name pos:line="18" pos:column="16">iter<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">&lt;<pos:position pos:line="18" pos:column="25"/></operator> <literal type="number" pos:line="18" pos:column="23">10<pos:position pos:line="18" pos:column="25"/></literal> <operator pos:line="18" pos:column="26">&amp;&amp;<pos:position pos:line="18" pos:column="36"/></operator>
<cpp:ifdef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifdef<pos:position pos:line="19" pos:column="7"/></cpp:directive> <name pos:line="19" pos:column="8">HAVE_PTHREAD_KILL<pos:position pos:line="19" pos:column="25"/></name></cpp:ifdef>
               <macro><name pos:line="20" pos:column="16">pthread_kill<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument pos:line="20" pos:column="29">*listener_os_thread<pos:position pos:line="20" pos:column="48"/></argument>, <argument><literal type="number" pos:line="20" pos:column="50">0<pos:position pos:line="20" pos:column="51"/></literal></argument>)<pos:position pos:line="20" pos:column="52"/></argument_list></macro>
<cpp:else pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">else<pos:position pos:line="21" pos:column="6"/></cpp:directive></cpp:else>
               <call><name pos:line="22" pos:column="16">kill<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">ap_my_pid<pos:position pos:line="22" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="32">0<pos:position pos:line="22" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></call>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>
               <operator pos:line="24" pos:column="16">==<pos:position pos:line="24" pos:column="18"/></operator> <literal type="number" pos:line="24" pos:column="19">0<pos:position pos:line="24" pos:column="20"/></literal></expr>)<pos:position pos:line="24" pos:column="21"/></condition> <block pos:line="24" pos:column="22">{
            <comment type="block" pos:line="25" pos:column="13">/* listener not dead yet */</comment>
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">apr_sleep<pos:position pos:line="26" pos:column="22"/></name><argument_list pos:line="26" pos:column="22">(<argument><expr><call><name pos:line="26" pos:column="23">apr_time_make<pos:position pos:line="26" pos:column="36"/></name><argument_list pos:line="26" pos:column="36">(<argument><expr><literal type="number" pos:line="26" pos:column="37">0<pos:position pos:line="26" pos:column="38"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="40">500000<pos:position pos:line="26" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">wakeup_listener<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">()<pos:position pos:line="27" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="28" pos:column="13">++<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="15">iter<pos:position pos:line="28" pos:column="19"/></name></expr>;<pos:position pos:line="28" pos:column="20"/></expr_stmt>
        }<pos:position pos:line="29" pos:column="10"/></block></while>
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">iter<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">&gt;=<pos:position pos:line="30" pos:column="23"/></operator> <literal type="number" pos:line="30" pos:column="21">10<pos:position pos:line="30" pos:column="23"/></literal></expr>)<pos:position pos:line="30" pos:column="24"/></condition><then pos:line="30" pos:column="24"> <block pos:line="30" pos:column="25">{
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">ap_log_error<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name pos:line="31" pos:column="26">APLOG_MARK<pos:position pos:line="31" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="38">APLOG_DEBUG<pos:position pos:line="31" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="51">0<pos:position pos:line="31" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="54">ap_server_conf<pos:position pos:line="31" pos:column="68"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="32" pos:column="26">"the listener thread didn't exit"<pos:position pos:line="32" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="61"/></expr_stmt>
        }<pos:position pos:line="33" pos:column="10"/></block></then>
        <else pos:line="34" pos:column="9">else <block pos:line="34" pos:column="14">{
            <expr_stmt><expr><name pos:line="35" pos:column="13">rv<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <call><name pos:line="35" pos:column="18">apr_thread_join<pos:position pos:line="35" pos:column="33"/></name><argument_list pos:line="35" pos:column="33">(<argument><expr><operator pos:line="35" pos:column="34">&amp;<pos:position pos:line="35" pos:column="39"/></operator><name pos:line="35" pos:column="35">thread_rv<pos:position pos:line="35" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="46">listener<pos:position pos:line="35" pos:column="54"/></name></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="56"/></expr_stmt>
            <if pos:line="36" pos:column="13">if <condition pos:line="36" pos:column="16">(<expr><name pos:line="36" pos:column="17">rv<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">!=<pos:position pos:line="36" pos:column="22"/></operator> <name pos:line="36" pos:column="23">APR_SUCCESS<pos:position pos:line="36" pos:column="34"/></name></expr>)<pos:position pos:line="36" pos:column="35"/></condition><then pos:line="36" pos:column="35"> <block pos:line="36" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="37" pos:column="17">ap_log_error<pos:position pos:line="37" pos:column="29"/></name><argument_list pos:line="37" pos:column="29">(<argument><expr><name pos:line="37" pos:column="30">APLOG_MARK<pos:position pos:line="37" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="42">APLOG_CRIT<pos:position pos:line="37" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="54">rv<pos:position pos:line="37" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="58">ap_server_conf<pos:position pos:line="37" pos:column="72"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="38" pos:column="30">"apr_thread_join: unable to join listener thread"<pos:position pos:line="38" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="81"/></expr_stmt>
            }<pos:position pos:line="39" pos:column="14"/></block></then></if>
        }<pos:position pos:line="40" pos:column="10"/></block></else></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <for pos:line="43" pos:column="5">for <control pos:line="43" pos:column="9">(<init><expr><name pos:line="43" pos:column="10">i<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <literal type="number" pos:line="43" pos:column="14">0<pos:position pos:line="43" pos:column="15"/></literal></expr>;<pos:position pos:line="43" pos:column="16"/></init> <condition><expr><name pos:line="43" pos:column="17">i<pos:position pos:line="43" pos:column="18"/></name> <operator pos:line="43" pos:column="19">&lt;<pos:position pos:line="43" pos:column="23"/></operator> <name pos:line="43" pos:column="21">ap_threads_per_child<pos:position pos:line="43" pos:column="41"/></name></expr>;<pos:position pos:line="43" pos:column="42"/></condition> <incr><expr><name pos:line="43" pos:column="43">i<pos:position pos:line="43" pos:column="44"/></name><operator pos:line="43" pos:column="44">++<pos:position pos:line="43" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="43" pos:column="47"/></control> <block pos:line="43" pos:column="48">{
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name><name pos:line="44" pos:column="13">threads<pos:position pos:line="44" pos:column="20"/></name><index pos:line="44" pos:column="20">[<expr><name pos:line="44" pos:column="21">i<pos:position pos:line="44" pos:column="22"/></name></expr>]<pos:position pos:line="44" pos:column="23"/></index></name></expr>)<pos:position pos:line="44" pos:column="24"/></condition><then pos:line="44" pos:column="24"> <block pos:line="44" pos:column="25">{ <comment type="block" pos:line="44" pos:column="27">/* if we ever created this thread */</comment>
            <expr_stmt><expr><name pos:line="45" pos:column="13">rv<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">=<pos:position pos:line="45" pos:column="17"/></operator> <call><name pos:line="45" pos:column="18">apr_thread_join<pos:position pos:line="45" pos:column="33"/></name><argument_list pos:line="45" pos:column="33">(<argument><expr><operator pos:line="45" pos:column="34">&amp;<pos:position pos:line="45" pos:column="39"/></operator><name pos:line="45" pos:column="35">thread_rv<pos:position pos:line="45" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="46">threads<pos:position pos:line="45" pos:column="53"/></name><index pos:line="45" pos:column="53">[<expr><name pos:line="45" pos:column="54">i<pos:position pos:line="45" pos:column="55"/></name></expr>]<pos:position pos:line="45" pos:column="56"/></index></name></expr></argument>)<pos:position pos:line="45" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="58"/></expr_stmt>
            <if pos:line="46" pos:column="13">if <condition pos:line="46" pos:column="16">(<expr><name pos:line="46" pos:column="17">rv<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">!=<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="23">APR_SUCCESS<pos:position pos:line="46" pos:column="34"/></name></expr>)<pos:position pos:line="46" pos:column="35"/></condition><then pos:line="46" pos:column="35"> <block pos:line="46" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="47" pos:column="17">ap_log_error<pos:position pos:line="47" pos:column="29"/></name><argument_list pos:line="47" pos:column="29">(<argument><expr><name pos:line="47" pos:column="30">APLOG_MARK<pos:position pos:line="47" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="42">APLOG_CRIT<pos:position pos:line="47" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="54">rv<pos:position pos:line="47" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="58">ap_server_conf<pos:position pos:line="47" pos:column="72"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="48" pos:column="30">"apr_thread_join: unable to join worker "<pos:position pos:line="48" pos:column="71"/></literal>
                             <literal type="string" pos:line="49" pos:column="30">"thread %d"<pos:position pos:line="49" pos:column="41"/></literal></expr></argument>,
                             <argument><expr><name pos:line="50" pos:column="30">i<pos:position pos:line="50" pos:column="31"/></name></expr></argument>)<pos:position pos:line="50" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="51" pos:column="14"/></block></then></if>
        }<pos:position pos:line="52" pos:column="10"/></block></then></if>
    }<pos:position pos:line="53" pos:column="6"/></block></for>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
