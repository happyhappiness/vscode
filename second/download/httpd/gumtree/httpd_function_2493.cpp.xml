<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_2493.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">test<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">void<pos:position pos:line="1" pos:column="22"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="23"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_time_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">stoptime<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_int16_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">rtnev<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">rv<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">i<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_status_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">status<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">snprintf_res<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><literal type="number" pos:line="8" pos:column="24">0<pos:position pos:line="8" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef<pos:position pos:line="9" pos:column="7"/></cpp:directive> <name pos:line="9" pos:column="8">NOT_ASCII<pos:position pos:line="9" pos:column="17"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_size_t<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">inbytes_left<pos:position pos:line="10" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="30">outbytes_left<pos:position pos:line="10" pos:column="43"/></name></decl>;<pos:position pos:line="10" pos:column="44"/></decl_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">isproxy<pos:position pos:line="13" pos:column="16"/></name></expr>)<pos:position pos:line="13" pos:column="17"/></condition><then pos:line="13" pos:column="17"> <block pos:line="13" pos:column="18">{
        <expr_stmt><expr><name pos:line="14" pos:column="9">connecthost<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <call><name pos:line="14" pos:column="23">apr_pstrdup<pos:position pos:line="14" pos:column="34"/></name><argument_list pos:line="14" pos:column="34">(<argument><expr><name pos:line="14" pos:column="35">cntxt<pos:position pos:line="14" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="42">proxyhost<pos:position pos:line="14" pos:column="51"/></name></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name pos:line="15" pos:column="9">connectport<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">=<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="23">proxyport<pos:position pos:line="15" pos:column="32"/></name></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then>
    <else pos:line="17" pos:column="5">else <block pos:line="17" pos:column="10">{
        <expr_stmt><expr><name pos:line="18" pos:column="9">connecthost<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <call><name pos:line="18" pos:column="23">apr_pstrdup<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">(<argument><expr><name pos:line="18" pos:column="35">cntxt<pos:position pos:line="18" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="42">hostname<pos:position pos:line="18" pos:column="50"/></name></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name pos:line="19" pos:column="9">connectport<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <name pos:line="19" pos:column="23">port<pos:position pos:line="19" pos:column="27"/></name></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></else></if>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">!<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">use_html<pos:position pos:line="22" pos:column="18"/></name></expr>)<pos:position pos:line="22" pos:column="19"/></condition><then pos:line="22" pos:column="19"> <block pos:line="22" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">printf<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><literal type="string" pos:line="23" pos:column="16">"Benchmarking %s "<pos:position pos:line="23" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="36">hostname<pos:position pos:line="23" pos:column="44"/></name></expr></argument>)<pos:position pos:line="23" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="46"/></expr_stmt>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">isproxy<pos:position pos:line="24" pos:column="16"/></name></expr>)<pos:position pos:line="24" pos:column="17"/></condition><then pos:line="24" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="9">printf<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="string" pos:line="25" pos:column="16">"[through %s:%d] "<pos:position pos:line="25" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="36">proxyhost<pos:position pos:line="25" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="47">proxyport<pos:position pos:line="25" pos:column="56"/></name></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="58"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">printf<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><literal type="string" pos:line="26" pos:column="12">"(be patient)%s"<pos:position pos:line="26" pos:column="28"/></literal></expr></argument>,
           <argument><expr><operator pos:line="27" pos:column="12">(<pos:position pos:line="27" pos:column="13"/></operator><ternary><condition><expr><name pos:line="27" pos:column="13">heartbeatres<pos:position pos:line="27" pos:column="25"/></name></expr> ?<pos:position pos:line="27" pos:column="27"/></condition><then pos:line="27" pos:column="27"> <expr><literal type="string" pos:line="27" pos:column="28">"\n"<pos:position pos:line="27" pos:column="32"/></literal></expr> <pos:position pos:line="27" pos:column="33"/></then><else pos:line="27" pos:column="33">: <expr><literal type="string" pos:line="27" pos:column="35">"..."<pos:position pos:line="27" pos:column="40"/></literal></expr></else></ternary><operator pos:line="27" pos:column="40">)<pos:position pos:line="27" pos:column="41"/></operator></expr></argument>)<pos:position pos:line="27" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">fflush<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><name pos:line="28" pos:column="12">stdout<pos:position pos:line="28" pos:column="18"/></name></expr></argument>)<pos:position pos:line="28" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="31" pos:column="5">con<pos:position pos:line="31" pos:column="8"/></name> <operator pos:line="31" pos:column="9">=<pos:position pos:line="31" pos:column="10"/></operator> <call><name pos:line="31" pos:column="11">calloc<pos:position pos:line="31" pos:column="17"/></name><argument_list pos:line="31" pos:column="17">(<argument><expr><name pos:line="31" pos:column="18">concurrency<pos:position pos:line="31" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="31">sizeof<argument_list pos:line="31" pos:column="37">(<argument><expr pos:line="31" pos:column="38">struct <name pos:line="31" pos:column="45">connection<pos:position pos:line="31" pos:column="55"/></name></expr></argument>)<pos:position pos:line="31" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="58"/></expr_stmt>

    <comment type="block" pos:line="33" pos:column="5">/*
     * XXX: a way to calculate the stats without requiring O(requests) memory
     * XXX: would be nice.
     */</comment>
    <expr_stmt><expr><name pos:line="37" pos:column="5">stats<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">=<pos:position pos:line="37" pos:column="12"/></operator> <call><name pos:line="37" pos:column="13">calloc<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><name pos:line="37" pos:column="20">requests<pos:position pos:line="37" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="30">sizeof<argument_list pos:line="37" pos:column="36">(<argument><expr pos:line="37" pos:column="37">struct <name pos:line="37" pos:column="44">data<pos:position pos:line="37" pos:column="48"/></name></expr></argument>)<pos:position pos:line="37" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="51"/></expr_stmt>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">stats<pos:position pos:line="38" pos:column="14"/></name> <operator pos:line="38" pos:column="15">==<pos:position pos:line="38" pos:column="17"/></operator> <name pos:line="38" pos:column="18">NULL<pos:position pos:line="38" pos:column="22"/></name></expr>)<pos:position pos:line="38" pos:column="23"/></condition><then pos:line="38" pos:column="23"> <block pos:line="38" pos:column="24">{
    	<expr_stmt><expr><call><name pos:line="39" pos:column="9">err<pos:position pos:line="39" pos:column="12"/></name><argument_list pos:line="39" pos:column="12">(<argument><expr><literal type="string" pos:line="39" pos:column="13">"Cannot allocate memory for result statistics"<pos:position pos:line="39" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><operator pos:line="42" pos:column="9">(<pos:position pos:line="42" pos:column="10"/></operator><name pos:line="42" pos:column="10">status<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">=<pos:position pos:line="42" pos:column="18"/></operator> <call><name pos:line="42" pos:column="19">apr_pollset_create<pos:position pos:line="42" pos:column="37"/></name><argument_list pos:line="42" pos:column="37">(<argument><expr><operator pos:line="42" pos:column="38">&amp;<pos:position pos:line="42" pos:column="43"/></operator><name pos:line="42" pos:column="39">readbits<pos:position pos:line="42" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="49">concurrency<pos:position pos:line="42" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="62">cntxt<pos:position pos:line="42" pos:column="67"/></name></expr></argument>,
                                     <argument><expr><name pos:line="43" pos:column="38">APR_POLLSET_NOCOPY<pos:position pos:line="43" pos:column="56"/></name></expr></argument>)<pos:position pos:line="43" pos:column="57"/></argument_list></call><operator pos:line="43" pos:column="57">)<pos:position pos:line="43" pos:column="58"/></operator> <operator pos:line="43" pos:column="59">!=<pos:position pos:line="43" pos:column="61"/></operator> <name pos:line="43" pos:column="62">APR_SUCCESS<pos:position pos:line="43" pos:column="73"/></name></expr>)<pos:position pos:line="43" pos:column="74"/></condition><then pos:line="43" pos:column="74"> <block pos:line="43" pos:column="75">{
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">apr_err<pos:position pos:line="44" pos:column="16"/></name><argument_list pos:line="44" pos:column="16">(<argument><expr><literal type="string" pos:line="44" pos:column="17">"apr_pollset_create failed"<pos:position pos:line="44" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="46">status<pos:position pos:line="44" pos:column="52"/></name></expr></argument>)<pos:position pos:line="44" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="47" pos:column="5">/* add default headers if necessary */</comment>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><operator pos:line="48" pos:column="9">!<pos:position pos:line="48" pos:column="10"/></operator><name pos:line="48" pos:column="10">opt_host<pos:position pos:line="48" pos:column="18"/></name></expr>)<pos:position pos:line="48" pos:column="19"/></condition><then pos:line="48" pos:column="19"> <block pos:line="48" pos:column="20">{
        <comment type="block" pos:line="49" pos:column="9">/* Host: header not overridden, add default value to hdrs */</comment>
        <expr_stmt><expr><name pos:line="50" pos:column="9">hdrs<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">=<pos:position pos:line="50" pos:column="15"/></operator> <call><name pos:line="50" pos:column="16">apr_pstrcat<pos:position pos:line="50" pos:column="27"/></name><argument_list pos:line="50" pos:column="27">(<argument><expr><name pos:line="50" pos:column="28">cntxt<pos:position pos:line="50" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="35">hdrs<pos:position pos:line="50" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="41">"Host: "<pos:position pos:line="50" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="51">host_field<pos:position pos:line="50" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="63">colonhost<pos:position pos:line="50" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="74">"\r\n"<pos:position pos:line="50" pos:column="80"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="82">NULL<pos:position pos:line="50" pos:column="86"/></name></expr></argument>)<pos:position pos:line="50" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="88"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then>
    <else pos:line="52" pos:column="5">else <block pos:line="52" pos:column="10">{
        <comment type="block" pos:line="53" pos:column="9">/* Header overridden, no need to add, as it is already in hdrs */</comment>
    }<pos:position pos:line="54" pos:column="6"/></block></else></if>

    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><operator pos:line="56" pos:column="9">!<pos:position pos:line="56" pos:column="10"/></operator><name pos:line="56" pos:column="10">opt_useragent<pos:position pos:line="56" pos:column="23"/></name></expr>)<pos:position pos:line="56" pos:column="24"/></condition><then pos:line="56" pos:column="24"> <block pos:line="56" pos:column="25">{
        <comment type="block" pos:line="57" pos:column="9">/* User-Agent: header not overridden, add default value to hdrs */</comment>
        <expr_stmt><expr><name pos:line="58" pos:column="9">hdrs<pos:position pos:line="58" pos:column="13"/></name> <operator pos:line="58" pos:column="14">=<pos:position pos:line="58" pos:column="15"/></operator> <call><name pos:line="58" pos:column="16">apr_pstrcat<pos:position pos:line="58" pos:column="27"/></name><argument_list pos:line="58" pos:column="27">(<argument><expr><name pos:line="58" pos:column="28">cntxt<pos:position pos:line="58" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="35">hdrs<pos:position pos:line="58" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="41">"User-Agent: ApacheBench/"<pos:position pos:line="58" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="69">AP_AB_BASEREVISION<pos:position pos:line="58" pos:column="87"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="89">"\r\n"<pos:position pos:line="58" pos:column="95"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="97">NULL<pos:position pos:line="58" pos:column="101"/></name></expr></argument>)<pos:position pos:line="58" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="103"/></expr_stmt>
    }<pos:position pos:line="59" pos:column="6"/></block></then>
    <else pos:line="60" pos:column="5">else <block pos:line="60" pos:column="10">{
        <comment type="block" pos:line="61" pos:column="9">/* Header overridden, no need to add, as it is already in hdrs */</comment>
    }<pos:position pos:line="62" pos:column="6"/></block></else></if>

    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><operator pos:line="64" pos:column="9">!<pos:position pos:line="64" pos:column="10"/></operator><name pos:line="64" pos:column="10">opt_accept<pos:position pos:line="64" pos:column="20"/></name></expr>)<pos:position pos:line="64" pos:column="21"/></condition><then pos:line="64" pos:column="21"> <block pos:line="64" pos:column="22">{
        <comment type="block" pos:line="65" pos:column="9">/* Accept: header not overridden, add default value to hdrs */</comment>
        <expr_stmt><expr><name pos:line="66" pos:column="9">hdrs<pos:position pos:line="66" pos:column="13"/></name> <operator pos:line="66" pos:column="14">=<pos:position pos:line="66" pos:column="15"/></operator> <call><name pos:line="66" pos:column="16">apr_pstrcat<pos:position pos:line="66" pos:column="27"/></name><argument_list pos:line="66" pos:column="27">(<argument><expr><name pos:line="66" pos:column="28">cntxt<pos:position pos:line="66" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="35">hdrs<pos:position pos:line="66" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="41">"Accept: */*\r\n"<pos:position pos:line="66" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="60">NULL<pos:position pos:line="66" pos:column="64"/></name></expr></argument>)<pos:position pos:line="66" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="67" pos:column="6"/></block></then>
    <else pos:line="68" pos:column="5">else <block pos:line="68" pos:column="10">{
        <comment type="block" pos:line="69" pos:column="9">/* Header overridden, no need to add, as it is already in hdrs */</comment>
    }<pos:position pos:line="70" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="72" pos:column="5">/* setup request */</comment>
    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><operator pos:line="73" pos:column="9">!<pos:position pos:line="73" pos:column="10"/></operator><name pos:line="73" pos:column="10">send_body<pos:position pos:line="73" pos:column="19"/></name></expr>)<pos:position pos:line="73" pos:column="20"/></condition><then pos:line="73" pos:column="20"> <block pos:line="73" pos:column="21">{
        <expr_stmt><expr><name pos:line="74" pos:column="9">snprintf_res<pos:position pos:line="74" pos:column="21"/></name> <operator pos:line="74" pos:column="22">=<pos:position pos:line="74" pos:column="23"/></operator> <call><name pos:line="74" pos:column="24">apr_snprintf<pos:position pos:line="74" pos:column="36"/></name><argument_list pos:line="74" pos:column="36">(<argument><expr><name pos:line="74" pos:column="37">request<pos:position pos:line="74" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="74" pos:column="46">sizeof<argument_list pos:line="74" pos:column="52">(<argument><expr><name pos:line="74" pos:column="53">_request<pos:position pos:line="74" pos:column="61"/></name></expr></argument>)<pos:position pos:line="74" pos:column="62"/></argument_list></sizeof></expr></argument>,
            <argument><expr><literal type="string" pos:line="75" pos:column="13">"%s %s HTTP/1.0\r\n"<pos:position pos:line="75" pos:column="33"/></literal>
            <literal type="string" pos:line="76" pos:column="13">"%s"<pos:position pos:line="76" pos:column="17"/></literal> <literal type="string" pos:line="76" pos:column="18">"%s"<pos:position pos:line="76" pos:column="22"/></literal> <literal type="string" pos:line="76" pos:column="23">"%s"<pos:position pos:line="76" pos:column="27"/></literal>
            <literal type="string" pos:line="77" pos:column="13">"%s"<pos:position pos:line="77" pos:column="17"/></literal> <literal type="string" pos:line="77" pos:column="18">"\r\n"<pos:position pos:line="77" pos:column="24"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="78" pos:column="13">method_str<pos:position pos:line="78" pos:column="23"/></name><index pos:line="78" pos:column="23">[<expr><name pos:line="78" pos:column="24">method<pos:position pos:line="78" pos:column="30"/></name></expr>]<pos:position pos:line="78" pos:column="31"/></index></name></expr></argument>,
            <argument><expr><ternary><condition><expr><operator pos:line="79" pos:column="13">(<pos:position pos:line="79" pos:column="14"/></operator><name pos:line="79" pos:column="14">isproxy<pos:position pos:line="79" pos:column="21"/></name><operator pos:line="79" pos:column="21">)<pos:position pos:line="79" pos:column="22"/></operator></expr> ?<pos:position pos:line="79" pos:column="24"/></condition><then pos:line="79" pos:column="24"> <expr><name pos:line="79" pos:column="25">fullurl<pos:position pos:line="79" pos:column="32"/></name></expr> <pos:position pos:line="79" pos:column="33"/></then><else pos:line="79" pos:column="33">: <expr><name pos:line="79" pos:column="35">path<pos:position pos:line="79" pos:column="39"/></name></expr></else></ternary></expr></argument>,
            <argument><expr><ternary><condition><expr><name pos:line="80" pos:column="13">keepalive<pos:position pos:line="80" pos:column="22"/></name></expr> ?<pos:position pos:line="80" pos:column="24"/></condition><then pos:line="80" pos:column="24"> <expr><literal type="string" pos:line="80" pos:column="25">"Connection: Keep-Alive\r\n"<pos:position pos:line="80" pos:column="53"/></literal></expr> <pos:position pos:line="80" pos:column="54"/></then><else pos:line="80" pos:column="54">: <expr><literal type="string" pos:line="80" pos:column="56">""<pos:position pos:line="80" pos:column="58"/></literal></expr></else></ternary></expr></argument>,
            <argument><expr><name pos:line="81" pos:column="13">cookie<pos:position pos:line="81" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="21">auth<pos:position pos:line="81" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="27">hdrs<pos:position pos:line="81" pos:column="31"/></name></expr></argument>)<pos:position pos:line="81" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="82" pos:column="6"/></block></then>
    <else pos:line="83" pos:column="5">else <block pos:line="83" pos:column="10">{
        <expr_stmt><expr><name pos:line="84" pos:column="9">snprintf_res<pos:position pos:line="84" pos:column="21"/></name> <operator pos:line="84" pos:column="22">=<pos:position pos:line="84" pos:column="23"/></operator> <call><name pos:line="84" pos:column="24">apr_snprintf<pos:position pos:line="84" pos:column="36"/></name><argument_list pos:line="84" pos:column="36">(<argument><expr><name pos:line="84" pos:column="37">request<pos:position pos:line="84" pos:column="44"/></name></expr></argument>,  <argument><expr><sizeof pos:line="84" pos:column="47">sizeof<argument_list pos:line="84" pos:column="53">(<argument><expr><name pos:line="84" pos:column="54">_request<pos:position pos:line="84" pos:column="62"/></name></expr></argument>)<pos:position pos:line="84" pos:column="63"/></argument_list></sizeof></expr></argument>,
            <argument><expr><literal type="string" pos:line="85" pos:column="13">"%s %s HTTP/1.0\r\n"<pos:position pos:line="85" pos:column="33"/></literal>
            <literal type="string" pos:line="86" pos:column="13">"%s"<pos:position pos:line="86" pos:column="17"/></literal> <literal type="string" pos:line="86" pos:column="18">"%s"<pos:position pos:line="86" pos:column="22"/></literal> <literal type="string" pos:line="86" pos:column="23">"%s"<pos:position pos:line="86" pos:column="27"/></literal>
            <literal type="string" pos:line="87" pos:column="13">"Content-length: %"<pos:position pos:line="87" pos:column="32"/></literal> <name pos:line="87" pos:column="33">APR_SIZE_T_FMT<pos:position pos:line="87" pos:column="47"/></name> <literal type="string" pos:line="87" pos:column="48">"\r\n"<pos:position pos:line="87" pos:column="54"/></literal>
            <literal type="string" pos:line="88" pos:column="13">"Content-type: %s\r\n"<pos:position pos:line="88" pos:column="35"/></literal>
            <literal type="string" pos:line="89" pos:column="13">"%s"<pos:position pos:line="89" pos:column="17"/></literal>
            <literal type="string" pos:line="90" pos:column="13">"\r\n"<pos:position pos:line="90" pos:column="19"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="91" pos:column="13">method_str<pos:position pos:line="91" pos:column="23"/></name><index pos:line="91" pos:column="23">[<expr><name pos:line="91" pos:column="24">method<pos:position pos:line="91" pos:column="30"/></name></expr>]<pos:position pos:line="91" pos:column="31"/></index></name></expr></argument>,
            <argument><expr><ternary><condition><expr><operator pos:line="92" pos:column="13">(<pos:position pos:line="92" pos:column="14"/></operator><name pos:line="92" pos:column="14">isproxy<pos:position pos:line="92" pos:column="21"/></name><operator pos:line="92" pos:column="21">)<pos:position pos:line="92" pos:column="22"/></operator></expr> ?<pos:position pos:line="92" pos:column="24"/></condition><then pos:line="92" pos:column="24"> <expr><name pos:line="92" pos:column="25">fullurl<pos:position pos:line="92" pos:column="32"/></name></expr> <pos:position pos:line="92" pos:column="33"/></then><else pos:line="92" pos:column="33">: <expr><name pos:line="92" pos:column="35">path<pos:position pos:line="92" pos:column="39"/></name></expr></else></ternary></expr></argument>,
            <argument><expr><ternary><condition><expr><name pos:line="93" pos:column="13">keepalive<pos:position pos:line="93" pos:column="22"/></name></expr> ?<pos:position pos:line="93" pos:column="24"/></condition><then pos:line="93" pos:column="24"> <expr><literal type="string" pos:line="93" pos:column="25">"Connection: Keep-Alive\r\n"<pos:position pos:line="93" pos:column="53"/></literal></expr> <pos:position pos:line="93" pos:column="54"/></then><else pos:line="93" pos:column="54">: <expr><literal type="string" pos:line="93" pos:column="56">""<pos:position pos:line="93" pos:column="58"/></literal></expr></else></ternary></expr></argument>,
            <argument><expr><name pos:line="94" pos:column="13">cookie<pos:position pos:line="94" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="21">auth<pos:position pos:line="94" pos:column="25"/></name></expr></argument>,
            <argument><expr><name pos:line="95" pos:column="13">postlen<pos:position pos:line="95" pos:column="20"/></name></expr></argument>,
            <argument><expr><ternary><condition><expr><operator pos:line="96" pos:column="13">(<pos:position pos:line="96" pos:column="14"/></operator><name><name pos:line="96" pos:column="14">content_type<pos:position pos:line="96" pos:column="26"/></name><index pos:line="96" pos:column="26">[<expr><literal type="number" pos:line="96" pos:column="27">0<pos:position pos:line="96" pos:column="28"/></literal></expr>]<pos:position pos:line="96" pos:column="29"/></index></name><operator pos:line="96" pos:column="29">)<pos:position pos:line="96" pos:column="30"/></operator></expr> ?<pos:position pos:line="96" pos:column="32"/></condition><then pos:line="96" pos:column="32"> <expr><name pos:line="96" pos:column="33">content_type<pos:position pos:line="96" pos:column="45"/></name></expr> <pos:position pos:line="96" pos:column="46"/></then><else pos:line="96" pos:column="46">: <expr><literal type="string" pos:line="96" pos:column="48">"text/plain"<pos:position pos:line="96" pos:column="60"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="96" pos:column="62">hdrs<pos:position pos:line="96" pos:column="66"/></name></expr></argument>)<pos:position pos:line="96" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="68"/></expr_stmt>
    }<pos:position pos:line="97" pos:column="6"/></block></else></if>
    <if pos:line="98" pos:column="5">if <condition pos:line="98" pos:column="8">(<expr><name pos:line="98" pos:column="9">snprintf_res<pos:position pos:line="98" pos:column="21"/></name> <operator pos:line="98" pos:column="22">&gt;=<pos:position pos:line="98" pos:column="27"/></operator> <sizeof pos:line="98" pos:column="25">sizeof<argument_list pos:line="98" pos:column="31">(<argument><expr><name pos:line="98" pos:column="32">_request<pos:position pos:line="98" pos:column="40"/></name></expr></argument>)<pos:position pos:line="98" pos:column="41"/></argument_list></sizeof></expr>)<pos:position pos:line="98" pos:column="42"/></condition><then pos:line="98" pos:column="42"> <block pos:line="98" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="99" pos:column="9">err<pos:position pos:line="99" pos:column="12"/></name><argument_list pos:line="99" pos:column="12">(<argument><expr><literal type="string" pos:line="99" pos:column="13">"Request too long\n"<pos:position pos:line="99" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="100" pos:column="6"/></block></then></if>

    <if pos:line="102" pos:column="5">if <condition pos:line="102" pos:column="8">(<expr><name pos:line="102" pos:column="9">verbosity<pos:position pos:line="102" pos:column="18"/></name> <operator pos:line="102" pos:column="19">&gt;=<pos:position pos:line="102" pos:column="24"/></operator> <literal type="number" pos:line="102" pos:column="22">2<pos:position pos:line="102" pos:column="23"/></literal></expr>)<pos:position pos:line="102" pos:column="24"/></condition><then pos:line="102" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="103" pos:column="9">printf<pos:position pos:line="103" pos:column="15"/></name><argument_list pos:line="103" pos:column="15">(<argument><expr><literal type="string" pos:line="103" pos:column="16">"INFO: %s header == \n---\n%s\n---\n"<pos:position pos:line="103" pos:column="53"/></literal></expr></argument>, 
               <argument><expr><name><name pos:line="104" pos:column="16">method_str<pos:position pos:line="104" pos:column="26"/></name><index pos:line="104" pos:column="26">[<expr><name pos:line="104" pos:column="27">method<pos:position pos:line="104" pos:column="33"/></name></expr>]<pos:position pos:line="104" pos:column="34"/></index></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="36">request<pos:position pos:line="104" pos:column="43"/></name></expr></argument>)<pos:position pos:line="104" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="45"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="106" pos:column="5">reqlen<pos:position pos:line="106" pos:column="11"/></name> <operator pos:line="106" pos:column="12">=<pos:position pos:line="106" pos:column="13"/></operator> <call><name pos:line="106" pos:column="14">strlen<pos:position pos:line="106" pos:column="20"/></name><argument_list pos:line="106" pos:column="20">(<argument><expr><name pos:line="106" pos:column="21">request<pos:position pos:line="106" pos:column="28"/></name></expr></argument>)<pos:position pos:line="106" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="30"/></expr_stmt>

    <comment type="block" pos:line="108" pos:column="5">/*
     * Combine headers and (optional) post file into one continuous buffer
     */</comment>
    <if pos:line="111" pos:column="5">if <condition pos:line="111" pos:column="8">(<expr><name pos:line="111" pos:column="9">send_body<pos:position pos:line="111" pos:column="18"/></name></expr>)<pos:position pos:line="111" pos:column="19"/></condition><then pos:line="111" pos:column="19"> <block pos:line="111" pos:column="20">{
        <decl_stmt><decl><type><name pos:line="112" pos:column="9">char<pos:position pos:line="112" pos:column="13"/></name> <modifier pos:line="112" pos:column="14">*<pos:position pos:line="112" pos:column="15"/></modifier></type><name pos:line="112" pos:column="15">buff<pos:position pos:line="112" pos:column="19"/></name> <init pos:line="112" pos:column="20">= <expr><call><name pos:line="112" pos:column="22">malloc<pos:position pos:line="112" pos:column="28"/></name><argument_list pos:line="112" pos:column="28">(<argument><expr><name pos:line="112" pos:column="29">postlen<pos:position pos:line="112" pos:column="36"/></name> <operator pos:line="112" pos:column="37">+<pos:position pos:line="112" pos:column="38"/></operator> <name pos:line="112" pos:column="39">reqlen<pos:position pos:line="112" pos:column="45"/></name> <operator pos:line="112" pos:column="46">+<pos:position pos:line="112" pos:column="47"/></operator> <literal type="number" pos:line="112" pos:column="48">1<pos:position pos:line="112" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="112" pos:column="51"/></decl_stmt>
        <if pos:line="113" pos:column="9">if <condition pos:line="113" pos:column="12">(<expr><operator pos:line="113" pos:column="13">!<pos:position pos:line="113" pos:column="14"/></operator><name pos:line="113" pos:column="14">buff<pos:position pos:line="113" pos:column="18"/></name></expr>)<pos:position pos:line="113" pos:column="19"/></condition><then pos:line="113" pos:column="19"> <block pos:line="113" pos:column="20">{
            <expr_stmt><expr><call><name pos:line="114" pos:column="13">fprintf<pos:position pos:line="114" pos:column="20"/></name><argument_list pos:line="114" pos:column="20">(<argument><expr><name pos:line="114" pos:column="21">stderr<pos:position pos:line="114" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="29">"error creating request buffer: out of memory\n"<pos:position pos:line="114" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="79"/></expr_stmt>
            <return pos:line="115" pos:column="13">return;<pos:position pos:line="115" pos:column="20"/></return>
        }<pos:position pos:line="116" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="117" pos:column="9">strcpy<pos:position pos:line="117" pos:column="15"/></name><argument_list pos:line="117" pos:column="15">(<argument><expr><name pos:line="117" pos:column="16">buff<pos:position pos:line="117" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="22">request<pos:position pos:line="117" pos:column="29"/></name></expr></argument>)<pos:position pos:line="117" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="118" pos:column="9">memcpy<pos:position pos:line="118" pos:column="15"/></name><argument_list pos:line="118" pos:column="15">(<argument><expr><name pos:line="118" pos:column="16">buff<pos:position pos:line="118" pos:column="20"/></name> <operator pos:line="118" pos:column="21">+<pos:position pos:line="118" pos:column="22"/></operator> <name pos:line="118" pos:column="23">reqlen<pos:position pos:line="118" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="31">postdata<pos:position pos:line="118" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="41">postlen<pos:position pos:line="118" pos:column="48"/></name></expr></argument>)<pos:position pos:line="118" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><name pos:line="119" pos:column="9">request<pos:position pos:line="119" pos:column="16"/></name> <operator pos:line="119" pos:column="17">=<pos:position pos:line="119" pos:column="18"/></operator> <name pos:line="119" pos:column="19">buff<pos:position pos:line="119" pos:column="23"/></name></expr>;<pos:position pos:line="119" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="120" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="122" pos:column="1">#<cpp:directive pos:line="122" pos:column="2">ifdef<pos:position pos:line="122" pos:column="7"/></cpp:directive> <name pos:line="122" pos:column="8">NOT_ASCII<pos:position pos:line="122" pos:column="17"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="123" pos:column="5">inbytes_left<pos:position pos:line="123" pos:column="17"/></name> <operator pos:line="123" pos:column="18">=<pos:position pos:line="123" pos:column="19"/></operator> <name pos:line="123" pos:column="20">outbytes_left<pos:position pos:line="123" pos:column="33"/></name> <operator pos:line="123" pos:column="34">=<pos:position pos:line="123" pos:column="35"/></operator> <name pos:line="123" pos:column="36">reqlen<pos:position pos:line="123" pos:column="42"/></name></expr>;<pos:position pos:line="123" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="124" pos:column="5">status<pos:position pos:line="124" pos:column="11"/></name> <operator pos:line="124" pos:column="12">=<pos:position pos:line="124" pos:column="13"/></operator> <call><name pos:line="124" pos:column="14">apr_xlate_conv_buffer<pos:position pos:line="124" pos:column="35"/></name><argument_list pos:line="124" pos:column="35">(<argument><expr><name pos:line="124" pos:column="36">to_ascii<pos:position pos:line="124" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="46">request<pos:position pos:line="124" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="124" pos:column="55">&amp;<pos:position pos:line="124" pos:column="60"/></operator><name pos:line="124" pos:column="56">inbytes_left<pos:position pos:line="124" pos:column="68"/></name></expr></argument>,
                   <argument><expr><name pos:line="125" pos:column="20">request<pos:position pos:line="125" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="125" pos:column="29">&amp;<pos:position pos:line="125" pos:column="34"/></operator><name pos:line="125" pos:column="30">outbytes_left<pos:position pos:line="125" pos:column="43"/></name></expr></argument>)<pos:position pos:line="125" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="45"/></expr_stmt>
    <if pos:line="126" pos:column="5">if <condition pos:line="126" pos:column="8">(<expr><name pos:line="126" pos:column="9">status<pos:position pos:line="126" pos:column="15"/></name> <operator pos:line="126" pos:column="16">||<pos:position pos:line="126" pos:column="18"/></operator> <name pos:line="126" pos:column="19">inbytes_left<pos:position pos:line="126" pos:column="31"/></name> <operator pos:line="126" pos:column="32">||<pos:position pos:line="126" pos:column="34"/></operator> <name pos:line="126" pos:column="35">outbytes_left<pos:position pos:line="126" pos:column="48"/></name></expr>)<pos:position pos:line="126" pos:column="49"/></condition><then pos:line="126" pos:column="49"> <block pos:line="126" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="127" pos:column="9">fprintf<pos:position pos:line="127" pos:column="16"/></name><argument_list pos:line="127" pos:column="16">(<argument><expr><name pos:line="127" pos:column="17">stderr<pos:position pos:line="127" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="127" pos:column="25">"only simple translation is supported (%d/%"<pos:position pos:line="127" pos:column="69"/></literal>
                        <name pos:line="128" pos:column="25">APR_SIZE_T_FMT<pos:position pos:line="128" pos:column="39"/></name> <literal type="string" pos:line="128" pos:column="40">"/%"<pos:position pos:line="128" pos:column="44"/></literal> <name pos:line="128" pos:column="45">APR_SIZE_T_FMT<pos:position pos:line="128" pos:column="59"/></name> <literal type="string" pos:line="128" pos:column="60">")\n"<pos:position pos:line="128" pos:column="65"/></literal></expr></argument>,
                        <argument><expr><name pos:line="129" pos:column="25">status<pos:position pos:line="129" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="33">inbytes_left<pos:position pos:line="129" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="47">outbytes_left<pos:position pos:line="129" pos:column="60"/></name></expr></argument>)<pos:position pos:line="129" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="130" pos:column="9">exit<pos:position pos:line="130" pos:column="13"/></name><argument_list pos:line="130" pos:column="13">(<argument><expr><literal type="number" pos:line="130" pos:column="14">1<pos:position pos:line="130" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="131" pos:column="6"/></block></then></if>
<cpp:endif pos:line="132" pos:column="1">#<cpp:directive pos:line="132" pos:column="2">endif<pos:position pos:line="132" pos:column="7"/></cpp:directive></cpp:endif>              <comment type="block" pos:line="132" pos:column="21">/* NOT_ASCII */</comment>

    <comment type="block" pos:line="134" pos:column="5">/* This only needs to be done once */</comment>
    <if pos:line="135" pos:column="5">if <condition pos:line="135" pos:column="8">(<expr><operator pos:line="135" pos:column="9">(<pos:position pos:line="135" pos:column="10"/></operator><name pos:line="135" pos:column="10">rv<pos:position pos:line="135" pos:column="12"/></name> <operator pos:line="135" pos:column="13">=<pos:position pos:line="135" pos:column="14"/></operator> <call><name pos:line="135" pos:column="15">apr_sockaddr_info_get<pos:position pos:line="135" pos:column="36"/></name><argument_list pos:line="135" pos:column="36">(<argument><expr><operator pos:line="135" pos:column="37">&amp;<pos:position pos:line="135" pos:column="42"/></operator><name pos:line="135" pos:column="38">destsa<pos:position pos:line="135" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="46">connecthost<pos:position pos:line="135" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="59">APR_UNSPEC<pos:position pos:line="135" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="71">connectport<pos:position pos:line="135" pos:column="82"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="135" pos:column="84">0<pos:position pos:line="135" pos:column="85"/></literal></expr></argument>, <argument><expr><name pos:line="135" pos:column="87">cntxt<pos:position pos:line="135" pos:column="92"/></name></expr></argument>)<pos:position pos:line="135" pos:column="93"/></argument_list></call><operator pos:line="135" pos:column="93">)<pos:position pos:line="135" pos:column="94"/></operator>
       <operator pos:line="136" pos:column="8">!=<pos:position pos:line="136" pos:column="10"/></operator> <name pos:line="136" pos:column="11">APR_SUCCESS<pos:position pos:line="136" pos:column="22"/></name></expr>)<pos:position pos:line="136" pos:column="23"/></condition><then pos:line="136" pos:column="23"> <block pos:line="136" pos:column="24">{
        <decl_stmt><decl><type><name pos:line="137" pos:column="9">char<pos:position pos:line="137" pos:column="13"/></name></type> <name><name pos:line="137" pos:column="14">buf<pos:position pos:line="137" pos:column="17"/></name><index pos:line="137" pos:column="17">[<expr><literal type="number" pos:line="137" pos:column="18">120<pos:position pos:line="137" pos:column="21"/></literal></expr>]<pos:position pos:line="137" pos:column="22"/></index></name></decl>;<pos:position pos:line="137" pos:column="23"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="138" pos:column="9">apr_snprintf<pos:position pos:line="138" pos:column="21"/></name><argument_list pos:line="138" pos:column="21">(<argument><expr><name pos:line="138" pos:column="22">buf<pos:position pos:line="138" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="138" pos:column="27">sizeof<argument_list pos:line="138" pos:column="33">(<argument><expr><name pos:line="138" pos:column="34">buf<pos:position pos:line="138" pos:column="37"/></name></expr></argument>)<pos:position pos:line="138" pos:column="38"/></argument_list></sizeof></expr></argument>,
                 <argument><expr><literal type="string" pos:line="139" pos:column="18">"apr_sockaddr_info_get() for %s"<pos:position pos:line="139" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="139" pos:column="52">connecthost<pos:position pos:line="139" pos:column="63"/></name></expr></argument>)<pos:position pos:line="139" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="140" pos:column="9">apr_err<pos:position pos:line="140" pos:column="16"/></name><argument_list pos:line="140" pos:column="16">(<argument><expr><name pos:line="140" pos:column="17">buf<pos:position pos:line="140" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="22">rv<pos:position pos:line="140" pos:column="24"/></name></expr></argument>)<pos:position pos:line="140" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="141" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="143" pos:column="5">/* ok - lets start */</comment>
    <expr_stmt><expr><name pos:line="144" pos:column="5">start<pos:position pos:line="144" pos:column="10"/></name> <operator pos:line="144" pos:column="11">=<pos:position pos:line="144" pos:column="12"/></operator> <name pos:line="144" pos:column="13">lasttime<pos:position pos:line="144" pos:column="21"/></name> <operator pos:line="144" pos:column="22">=<pos:position pos:line="144" pos:column="23"/></operator> <call><name pos:line="144" pos:column="24">apr_time_now<pos:position pos:line="144" pos:column="36"/></name><argument_list pos:line="144" pos:column="36">()<pos:position pos:line="144" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="145" pos:column="5">stoptime<pos:position pos:line="145" pos:column="13"/></name> <operator pos:line="145" pos:column="14">=<pos:position pos:line="145" pos:column="15"/></operator> <ternary><condition><expr><name pos:line="145" pos:column="16">tlimit<pos:position pos:line="145" pos:column="22"/></name></expr> ?<pos:position pos:line="145" pos:column="24"/></condition><then pos:line="145" pos:column="24"> <expr><operator pos:line="145" pos:column="25">(<pos:position pos:line="145" pos:column="26"/></operator><name pos:line="145" pos:column="26">start<pos:position pos:line="145" pos:column="31"/></name> <operator pos:line="145" pos:column="32">+<pos:position pos:line="145" pos:column="33"/></operator> <call><name pos:line="145" pos:column="34">apr_time_from_sec<pos:position pos:line="145" pos:column="51"/></name><argument_list pos:line="145" pos:column="51">(<argument><expr><name pos:line="145" pos:column="52">tlimit<pos:position pos:line="145" pos:column="58"/></name></expr></argument>)<pos:position pos:line="145" pos:column="59"/></argument_list></call><operator pos:line="145" pos:column="59">)<pos:position pos:line="145" pos:column="60"/></operator></expr> <pos:position pos:line="145" pos:column="61"/></then><else pos:line="145" pos:column="61">: <expr><name pos:line="145" pos:column="63">AB_MAX<pos:position pos:line="145" pos:column="69"/></name></expr></else></ternary></expr>;<pos:position pos:line="145" pos:column="70"/></expr_stmt>

<cpp:ifdef pos:line="147" pos:column="1">#<cpp:directive pos:line="147" pos:column="2">ifdef<pos:position pos:line="147" pos:column="7"/></cpp:directive> <name pos:line="147" pos:column="8">SIGINT<pos:position pos:line="147" pos:column="14"/></name></cpp:ifdef> 
    <comment type="block" pos:line="148" pos:column="5">/* Output the results if the user terminates the run early. */</comment>
    <expr_stmt><expr><call><name pos:line="149" pos:column="5">apr_signal<pos:position pos:line="149" pos:column="15"/></name><argument_list pos:line="149" pos:column="15">(<argument><expr><name pos:line="149" pos:column="16">SIGINT<pos:position pos:line="149" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="24">output_results<pos:position pos:line="149" pos:column="38"/></name></expr></argument>)<pos:position pos:line="149" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="150" pos:column="1">#<cpp:directive pos:line="150" pos:column="2">endif<pos:position pos:line="150" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="152" pos:column="5">/* initialise lots of requests */</comment>
    <for pos:line="153" pos:column="5">for <control pos:line="153" pos:column="9">(<init><expr><name pos:line="153" pos:column="10">i<pos:position pos:line="153" pos:column="11"/></name> <operator pos:line="153" pos:column="12">=<pos:position pos:line="153" pos:column="13"/></operator> <literal type="number" pos:line="153" pos:column="14">0<pos:position pos:line="153" pos:column="15"/></literal></expr>;<pos:position pos:line="153" pos:column="16"/></init> <condition><expr><name pos:line="153" pos:column="17">i<pos:position pos:line="153" pos:column="18"/></name> <operator pos:line="153" pos:column="19">&lt;<pos:position pos:line="153" pos:column="23"/></operator> <name pos:line="153" pos:column="21">concurrency<pos:position pos:line="153" pos:column="32"/></name></expr>;<pos:position pos:line="153" pos:column="33"/></condition> <incr><expr><name pos:line="153" pos:column="34">i<pos:position pos:line="153" pos:column="35"/></name><operator pos:line="153" pos:column="35">++<pos:position pos:line="153" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="153" pos:column="38"/></control> <block pos:line="153" pos:column="39">{
        <expr_stmt><expr><name><name pos:line="154" pos:column="9">con<pos:position pos:line="154" pos:column="12"/></name><index pos:line="154" pos:column="12">[<expr><name pos:line="154" pos:column="13">i<pos:position pos:line="154" pos:column="14"/></name></expr>]<pos:position pos:line="154" pos:column="15"/></index></name><operator pos:line="154" pos:column="15">.<pos:position pos:line="154" pos:column="16"/></operator><name pos:line="154" pos:column="16">socknum<pos:position pos:line="154" pos:column="23"/></name> <operator pos:line="154" pos:column="24">=<pos:position pos:line="154" pos:column="25"/></operator> <name pos:line="154" pos:column="26">i<pos:position pos:line="154" pos:column="27"/></name></expr>;<pos:position pos:line="154" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="155" pos:column="9">start_connect<pos:position pos:line="155" pos:column="22"/></name><argument_list pos:line="155" pos:column="22">(<argument><expr><operator pos:line="155" pos:column="23">&amp;<pos:position pos:line="155" pos:column="28"/></operator><name><name pos:line="155" pos:column="24">con<pos:position pos:line="155" pos:column="27"/></name><index pos:line="155" pos:column="27">[<expr><name pos:line="155" pos:column="28">i<pos:position pos:line="155" pos:column="29"/></name></expr>]<pos:position pos:line="155" pos:column="30"/></index></name></expr></argument>)<pos:position pos:line="155" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="156" pos:column="6"/></block></for>

    <do pos:line="158" pos:column="5">do <block pos:line="158" pos:column="8">{
        <decl_stmt><decl><type><name pos:line="159" pos:column="9">apr_int32_t<pos:position pos:line="159" pos:column="20"/></name></type> <name pos:line="159" pos:column="21">n<pos:position pos:line="159" pos:column="22"/></name></decl>;<pos:position pos:line="159" pos:column="23"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="160" pos:column="9">const<pos:position pos:line="160" pos:column="14"/></specifier> <name pos:line="160" pos:column="15">apr_pollfd_t<pos:position pos:line="160" pos:column="27"/></name> <modifier pos:line="160" pos:column="28">*<pos:position pos:line="160" pos:column="29"/></modifier></type><name pos:line="160" pos:column="29">pollresults<pos:position pos:line="160" pos:column="40"/></name></decl>;<pos:position pos:line="160" pos:column="41"/></decl_stmt>

        <expr_stmt><expr><name pos:line="162" pos:column="9">n<pos:position pos:line="162" pos:column="10"/></name> <operator pos:line="162" pos:column="11">=<pos:position pos:line="162" pos:column="12"/></operator> <name pos:line="162" pos:column="13">concurrency<pos:position pos:line="162" pos:column="24"/></name></expr>;<pos:position pos:line="162" pos:column="25"/></expr_stmt>
        <do pos:line="163" pos:column="9">do <block pos:line="163" pos:column="12">{
            <expr_stmt><expr><name pos:line="164" pos:column="13">status<pos:position pos:line="164" pos:column="19"/></name> <operator pos:line="164" pos:column="20">=<pos:position pos:line="164" pos:column="21"/></operator> <call><name pos:line="164" pos:column="22">apr_pollset_poll<pos:position pos:line="164" pos:column="38"/></name><argument_list pos:line="164" pos:column="38">(<argument><expr><name pos:line="164" pos:column="39">readbits<pos:position pos:line="164" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="164" pos:column="49">aprtimeout<pos:position pos:line="164" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="164" pos:column="61">&amp;<pos:position pos:line="164" pos:column="66"/></operator><name pos:line="164" pos:column="62">n<pos:position pos:line="164" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="164" pos:column="65">&amp;<pos:position pos:line="164" pos:column="70"/></operator><name pos:line="164" pos:column="66">pollresults<pos:position pos:line="164" pos:column="77"/></name></expr></argument>)<pos:position pos:line="164" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="79"/></expr_stmt>
        }<pos:position pos:line="165" pos:column="10"/></block> while <condition pos:line="165" pos:column="17">(<expr><call><name pos:line="165" pos:column="18">APR_STATUS_IS_EINTR<pos:position pos:line="165" pos:column="37"/></name><argument_list pos:line="165" pos:column="37">(<argument><expr><name pos:line="165" pos:column="38">status<pos:position pos:line="165" pos:column="44"/></name></expr></argument>)<pos:position pos:line="165" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="165" pos:column="46"/></condition>;<pos:position pos:line="165" pos:column="47"/></do>
        <if pos:line="166" pos:column="9">if <condition pos:line="166" pos:column="12">(<expr><name pos:line="166" pos:column="13">status<pos:position pos:line="166" pos:column="19"/></name> <operator pos:line="166" pos:column="20">!=<pos:position pos:line="166" pos:column="22"/></operator> <name pos:line="166" pos:column="23">APR_SUCCESS<pos:position pos:line="166" pos:column="34"/></name></expr>)<pos:position pos:line="166" pos:column="35"/></condition><then pos:line="166" pos:column="35">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="167" pos:column="13">apr_err<pos:position pos:line="167" pos:column="20"/></name><argument_list pos:line="167" pos:column="20">(<argument><expr><literal type="string" pos:line="167" pos:column="21">"apr_poll"<pos:position pos:line="167" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="167" pos:column="33">status<pos:position pos:line="167" pos:column="39"/></name></expr></argument>)<pos:position pos:line="167" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="41"/></expr_stmt></block></then></if>

        <if pos:line="169" pos:column="9">if <condition pos:line="169" pos:column="12">(<expr><operator pos:line="169" pos:column="13">!<pos:position pos:line="169" pos:column="14"/></operator><name pos:line="169" pos:column="14">n<pos:position pos:line="169" pos:column="15"/></name></expr>)<pos:position pos:line="169" pos:column="16"/></condition><then pos:line="169" pos:column="16"> <block pos:line="169" pos:column="17">{
            <expr_stmt><expr><call><name pos:line="170" pos:column="13">err<pos:position pos:line="170" pos:column="16"/></name><argument_list pos:line="170" pos:column="16">(<argument><expr><literal type="string" pos:line="170" pos:column="17">"\nServer timed out\n\n"<pos:position pos:line="170" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="170" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="43"/></expr_stmt>
        }<pos:position pos:line="171" pos:column="10"/></block></then></if>

        <for pos:line="173" pos:column="9">for <control pos:line="173" pos:column="13">(<init><expr><name pos:line="173" pos:column="14">i<pos:position pos:line="173" pos:column="15"/></name> <operator pos:line="173" pos:column="16">=<pos:position pos:line="173" pos:column="17"/></operator> <literal type="number" pos:line="173" pos:column="18">0<pos:position pos:line="173" pos:column="19"/></literal></expr>;<pos:position pos:line="173" pos:column="20"/></init> <condition><expr><name pos:line="173" pos:column="21">i<pos:position pos:line="173" pos:column="22"/></name> <operator pos:line="173" pos:column="23">&lt;<pos:position pos:line="173" pos:column="27"/></operator> <name pos:line="173" pos:column="25">n<pos:position pos:line="173" pos:column="26"/></name></expr>;<pos:position pos:line="173" pos:column="27"/></condition> <incr><expr><name pos:line="173" pos:column="28">i<pos:position pos:line="173" pos:column="29"/></name><operator pos:line="173" pos:column="29">++<pos:position pos:line="173" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="173" pos:column="32"/></control> <block pos:line="173" pos:column="33">{
            <decl_stmt><decl><type><specifier pos:line="174" pos:column="13">const<pos:position pos:line="174" pos:column="18"/></specifier> <name pos:line="174" pos:column="19">apr_pollfd_t<pos:position pos:line="174" pos:column="31"/></name> <modifier pos:line="174" pos:column="32">*<pos:position pos:line="174" pos:column="33"/></modifier></type><name pos:line="174" pos:column="33">next_fd<pos:position pos:line="174" pos:column="40"/></name> <init pos:line="174" pos:column="41">= <expr><operator pos:line="174" pos:column="43">&amp;<pos:position pos:line="174" pos:column="48"/></operator><operator pos:line="174" pos:column="44">(<pos:position pos:line="174" pos:column="45"/></operator><name><name pos:line="174" pos:column="45">pollresults<pos:position pos:line="174" pos:column="56"/></name><index pos:line="174" pos:column="56">[<expr><name pos:line="174" pos:column="57">i<pos:position pos:line="174" pos:column="58"/></name></expr>]<pos:position pos:line="174" pos:column="59"/></index></name><operator pos:line="174" pos:column="59">)<pos:position pos:line="174" pos:column="60"/></operator></expr></init></decl>;<pos:position pos:line="174" pos:column="61"/></decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="175" pos:column="13">struct<pos:position pos:line="175" pos:column="19"/></name> <name pos:line="175" pos:column="20">connection<pos:position pos:line="175" pos:column="30"/></name></name> <modifier pos:line="175" pos:column="31">*<pos:position pos:line="175" pos:column="32"/></modifier></type><name pos:line="175" pos:column="32">c<pos:position pos:line="175" pos:column="33"/></name></decl>;<pos:position pos:line="175" pos:column="34"/></decl_stmt>

            <expr_stmt><expr><name pos:line="177" pos:column="13">c<pos:position pos:line="177" pos:column="14"/></name> <operator pos:line="177" pos:column="15">=<pos:position pos:line="177" pos:column="16"/></operator> <name><name pos:line="177" pos:column="17">next_fd<pos:position pos:line="177" pos:column="24"/></name><operator pos:line="177" pos:column="24">-&gt;<pos:position pos:line="177" pos:column="29"/></operator><name pos:line="177" pos:column="26">client_data<pos:position pos:line="177" pos:column="37"/></name></name></expr>;<pos:position pos:line="177" pos:column="38"/></expr_stmt>

            <comment type="block" pos:line="179" pos:column="13">/*
             * If the connection isn't connected how can we check it?
             */</comment>
            <if pos:line="182" pos:column="13">if <condition pos:line="182" pos:column="16">(<expr><name><name pos:line="182" pos:column="17">c<pos:position pos:line="182" pos:column="18"/></name><operator pos:line="182" pos:column="18">-&gt;<pos:position pos:line="182" pos:column="23"/></operator><name pos:line="182" pos:column="20">state<pos:position pos:line="182" pos:column="25"/></name></name> <operator pos:line="182" pos:column="26">==<pos:position pos:line="182" pos:column="28"/></operator> <name pos:line="182" pos:column="29">STATE_UNCONNECTED<pos:position pos:line="182" pos:column="46"/></name></expr>)<pos:position pos:line="182" pos:column="47"/></condition><then pos:line="182" pos:column="47">
                <block type="pseudo"><continue pos:line="183" pos:column="17">continue;<pos:position pos:line="183" pos:column="26"/></continue></block></then></if>

            <expr_stmt><expr><name pos:line="185" pos:column="13">rtnev<pos:position pos:line="185" pos:column="18"/></name> <operator pos:line="185" pos:column="19">=<pos:position pos:line="185" pos:column="20"/></operator> <name><name pos:line="185" pos:column="21">next_fd<pos:position pos:line="185" pos:column="28"/></name><operator pos:line="185" pos:column="28">-&gt;<pos:position pos:line="185" pos:column="33"/></operator><name pos:line="185" pos:column="30">rtnevents<pos:position pos:line="185" pos:column="39"/></name></name></expr>;<pos:position pos:line="185" pos:column="40"/></expr_stmt>

<cpp:ifdef pos:line="187" pos:column="1">#<cpp:directive pos:line="187" pos:column="2">ifdef<pos:position pos:line="187" pos:column="7"/></cpp:directive> <name pos:line="187" pos:column="8">USE_SSL<pos:position pos:line="187" pos:column="15"/></name></cpp:ifdef>
            <if pos:line="188" pos:column="13">if <condition pos:line="188" pos:column="16">(<expr><name><name pos:line="188" pos:column="17">c<pos:position pos:line="188" pos:column="18"/></name><operator pos:line="188" pos:column="18">-&gt;<pos:position pos:line="188" pos:column="23"/></operator><name pos:line="188" pos:column="20">state<pos:position pos:line="188" pos:column="25"/></name></name> <operator pos:line="188" pos:column="26">==<pos:position pos:line="188" pos:column="28"/></operator> <name pos:line="188" pos:column="29">STATE_CONNECTED<pos:position pos:line="188" pos:column="44"/></name> <operator pos:line="188" pos:column="45">&amp;&amp;<pos:position pos:line="188" pos:column="55"/></operator> <name><name pos:line="188" pos:column="48">c<pos:position pos:line="188" pos:column="49"/></name><operator pos:line="188" pos:column="49">-&gt;<pos:position pos:line="188" pos:column="54"/></operator><name pos:line="188" pos:column="51">ssl<pos:position pos:line="188" pos:column="54"/></name></name> <operator pos:line="188" pos:column="55">&amp;&amp;<pos:position pos:line="188" pos:column="65"/></operator> <call><name pos:line="188" pos:column="58">SSL_in_init<pos:position pos:line="188" pos:column="69"/></name><argument_list pos:line="188" pos:column="69">(<argument><expr><name><name pos:line="188" pos:column="70">c<pos:position pos:line="188" pos:column="71"/></name><operator pos:line="188" pos:column="71">-&gt;<pos:position pos:line="188" pos:column="76"/></operator><name pos:line="188" pos:column="73">ssl<pos:position pos:line="188" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="188" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="188" pos:column="78"/></condition><then pos:line="188" pos:column="78"> <block pos:line="188" pos:column="79">{
                <expr_stmt><expr><call><name pos:line="189" pos:column="17">ssl_proceed_handshake<pos:position pos:line="189" pos:column="38"/></name><argument_list pos:line="189" pos:column="38">(<argument><expr><name pos:line="189" pos:column="39">c<pos:position pos:line="189" pos:column="40"/></name></expr></argument>)<pos:position pos:line="189" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="42"/></expr_stmt>
                <continue pos:line="190" pos:column="17">continue;<pos:position pos:line="190" pos:column="26"/></continue>
            }<pos:position pos:line="191" pos:column="14"/></block></then></if>
<cpp:endif pos:line="192" pos:column="1">#<cpp:directive pos:line="192" pos:column="2">endif<pos:position pos:line="192" pos:column="7"/></cpp:directive></cpp:endif>

            <comment type="block" pos:line="194" pos:column="13">/*
             * Notes: APR_POLLHUP is set after FIN is received on some
             * systems, so treat that like APR_POLLIN so that we try to read
             * again.
             *
             * Some systems return APR_POLLERR with APR_POLLHUP.  We need to
             * call read_connection() for APR_POLLHUP, so check for
             * APR_POLLHUP first so that a closed connection isn't treated
             * like an I/O error.  If it is, we never figure out that the
             * connection is done and we loop here endlessly calling
             * apr_poll().
             */</comment>
            <if pos:line="206" pos:column="13">if <condition pos:line="206" pos:column="16">(<expr><operator pos:line="206" pos:column="17">(<pos:position pos:line="206" pos:column="18"/></operator><name pos:line="206" pos:column="18">rtnev<pos:position pos:line="206" pos:column="23"/></name> <operator pos:line="206" pos:column="24">&amp;<pos:position pos:line="206" pos:column="29"/></operator> <name pos:line="206" pos:column="26">APR_POLLIN<pos:position pos:line="206" pos:column="36"/></name><operator pos:line="206" pos:column="36">)<pos:position pos:line="206" pos:column="37"/></operator> <operator pos:line="206" pos:column="38">||<pos:position pos:line="206" pos:column="40"/></operator> <operator pos:line="206" pos:column="41">(<pos:position pos:line="206" pos:column="42"/></operator><name pos:line="206" pos:column="42">rtnev<pos:position pos:line="206" pos:column="47"/></name> <operator pos:line="206" pos:column="48">&amp;<pos:position pos:line="206" pos:column="53"/></operator> <name pos:line="206" pos:column="50">APR_POLLPRI<pos:position pos:line="206" pos:column="61"/></name><operator pos:line="206" pos:column="61">)<pos:position pos:line="206" pos:column="62"/></operator> <operator pos:line="206" pos:column="63">||<pos:position pos:line="206" pos:column="65"/></operator> <operator pos:line="206" pos:column="66">(<pos:position pos:line="206" pos:column="67"/></operator><name pos:line="206" pos:column="67">rtnev<pos:position pos:line="206" pos:column="72"/></name> <operator pos:line="206" pos:column="73">&amp;<pos:position pos:line="206" pos:column="78"/></operator> <name pos:line="206" pos:column="75">APR_POLLHUP<pos:position pos:line="206" pos:column="86"/></name><operator pos:line="206" pos:column="86">)<pos:position pos:line="206" pos:column="87"/></operator></expr>)<pos:position pos:line="206" pos:column="88"/></condition><then pos:line="206" pos:column="88">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="207" pos:column="17">read_connection<pos:position pos:line="207" pos:column="32"/></name><argument_list pos:line="207" pos:column="32">(<argument><expr><name pos:line="207" pos:column="33">c<pos:position pos:line="207" pos:column="34"/></name></expr></argument>)<pos:position pos:line="207" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="36"/></expr_stmt></block></then></if>
            <if pos:line="208" pos:column="13">if <condition pos:line="208" pos:column="16">(<expr><operator pos:line="208" pos:column="17">(<pos:position pos:line="208" pos:column="18"/></operator><name pos:line="208" pos:column="18">rtnev<pos:position pos:line="208" pos:column="23"/></name> <operator pos:line="208" pos:column="24">&amp;<pos:position pos:line="208" pos:column="29"/></operator> <name pos:line="208" pos:column="26">APR_POLLERR<pos:position pos:line="208" pos:column="37"/></name><operator pos:line="208" pos:column="37">)<pos:position pos:line="208" pos:column="38"/></operator> <operator pos:line="208" pos:column="39">||<pos:position pos:line="208" pos:column="41"/></operator> <operator pos:line="208" pos:column="42">(<pos:position pos:line="208" pos:column="43"/></operator><name pos:line="208" pos:column="43">rtnev<pos:position pos:line="208" pos:column="48"/></name> <operator pos:line="208" pos:column="49">&amp;<pos:position pos:line="208" pos:column="54"/></operator> <name pos:line="208" pos:column="51">APR_POLLNVAL<pos:position pos:line="208" pos:column="63"/></name><operator pos:line="208" pos:column="63">)<pos:position pos:line="208" pos:column="64"/></operator></expr>)<pos:position pos:line="208" pos:column="65"/></condition><then pos:line="208" pos:column="65"> <block pos:line="208" pos:column="66">{
                <expr_stmt><expr><name pos:line="209" pos:column="17">bad<pos:position pos:line="209" pos:column="20"/></name><operator pos:line="209" pos:column="20">++<pos:position pos:line="209" pos:column="22"/></operator></expr>;<pos:position pos:line="209" pos:column="23"/></expr_stmt>
                <expr_stmt><expr><name pos:line="210" pos:column="17">err_except<pos:position pos:line="210" pos:column="27"/></name><operator pos:line="210" pos:column="27">++<pos:position pos:line="210" pos:column="29"/></operator></expr>;<pos:position pos:line="210" pos:column="30"/></expr_stmt>
                <comment type="block" pos:line="211" pos:column="17">/* avoid apr_poll/EINPROGRESS loop on HP-UX, let recv discover ECONNREFUSED */</comment>
                <if pos:line="212" pos:column="17">if <condition pos:line="212" pos:column="20">(<expr><name><name pos:line="212" pos:column="21">c<pos:position pos:line="212" pos:column="22"/></name><operator pos:line="212" pos:column="22">-&gt;<pos:position pos:line="212" pos:column="27"/></operator><name pos:line="212" pos:column="24">state<pos:position pos:line="212" pos:column="29"/></name></name> <operator pos:line="212" pos:column="30">==<pos:position pos:line="212" pos:column="32"/></operator> <name pos:line="212" pos:column="33">STATE_CONNECTING<pos:position pos:line="212" pos:column="49"/></name></expr>)<pos:position pos:line="212" pos:column="50"/></condition><then pos:line="212" pos:column="50"> <block pos:line="212" pos:column="51">{ 
                    <expr_stmt><expr><call><name pos:line="213" pos:column="21">read_connection<pos:position pos:line="213" pos:column="36"/></name><argument_list pos:line="213" pos:column="36">(<argument><expr><name pos:line="213" pos:column="37">c<pos:position pos:line="213" pos:column="38"/></name></expr></argument>)<pos:position pos:line="213" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="40"/></expr_stmt>
                }<pos:position pos:line="214" pos:column="18"/></block></then>
                <else pos:line="215" pos:column="17">else <block pos:line="215" pos:column="22">{ 
                    <expr_stmt><expr><call><name pos:line="216" pos:column="21">start_connect<pos:position pos:line="216" pos:column="34"/></name><argument_list pos:line="216" pos:column="34">(<argument><expr><name pos:line="216" pos:column="35">c<pos:position pos:line="216" pos:column="36"/></name></expr></argument>)<pos:position pos:line="216" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="38"/></expr_stmt>
                }<pos:position pos:line="217" pos:column="18"/></block></else></if>
                <continue pos:line="218" pos:column="17">continue;<pos:position pos:line="218" pos:column="26"/></continue>
            }<pos:position pos:line="219" pos:column="14"/></block></then></if>
            <if pos:line="220" pos:column="13">if <condition pos:line="220" pos:column="16">(<expr><name pos:line="220" pos:column="17">rtnev<pos:position pos:line="220" pos:column="22"/></name> <operator pos:line="220" pos:column="23">&amp;<pos:position pos:line="220" pos:column="28"/></operator> <name pos:line="220" pos:column="25">APR_POLLOUT<pos:position pos:line="220" pos:column="36"/></name></expr>)<pos:position pos:line="220" pos:column="37"/></condition><then pos:line="220" pos:column="37"> <block pos:line="220" pos:column="38">{
                <if pos:line="221" pos:column="17">if <condition pos:line="221" pos:column="20">(<expr><name><name pos:line="221" pos:column="21">c<pos:position pos:line="221" pos:column="22"/></name><operator pos:line="221" pos:column="22">-&gt;<pos:position pos:line="221" pos:column="27"/></operator><name pos:line="221" pos:column="24">state<pos:position pos:line="221" pos:column="29"/></name></name> <operator pos:line="221" pos:column="30">==<pos:position pos:line="221" pos:column="32"/></operator> <name pos:line="221" pos:column="33">STATE_CONNECTING<pos:position pos:line="221" pos:column="49"/></name></expr>)<pos:position pos:line="221" pos:column="50"/></condition><then pos:line="221" pos:column="50"> <block pos:line="221" pos:column="51">{
                    <expr_stmt><expr><name pos:line="222" pos:column="21">rv<pos:position pos:line="222" pos:column="23"/></name> <operator pos:line="222" pos:column="24">=<pos:position pos:line="222" pos:column="25"/></operator> <call><name pos:line="222" pos:column="26">apr_socket_connect<pos:position pos:line="222" pos:column="44"/></name><argument_list pos:line="222" pos:column="44">(<argument><expr><name><name pos:line="222" pos:column="45">c<pos:position pos:line="222" pos:column="46"/></name><operator pos:line="222" pos:column="46">-&gt;<pos:position pos:line="222" pos:column="51"/></operator><name pos:line="222" pos:column="48">aprsock<pos:position pos:line="222" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="222" pos:column="57">destsa<pos:position pos:line="222" pos:column="63"/></name></expr></argument>)<pos:position pos:line="222" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="65"/></expr_stmt>
                    <if pos:line="223" pos:column="21">if <condition pos:line="223" pos:column="24">(<expr><name pos:line="223" pos:column="25">rv<pos:position pos:line="223" pos:column="27"/></name> <operator pos:line="223" pos:column="28">!=<pos:position pos:line="223" pos:column="30"/></operator> <name pos:line="223" pos:column="31">APR_SUCCESS<pos:position pos:line="223" pos:column="42"/></name></expr>)<pos:position pos:line="223" pos:column="43"/></condition><then pos:line="223" pos:column="43"> <block pos:line="223" pos:column="44">{
                        <expr_stmt><expr><call><name pos:line="224" pos:column="25">set_conn_state<pos:position pos:line="224" pos:column="39"/></name><argument_list pos:line="224" pos:column="39">(<argument><expr><name pos:line="224" pos:column="40">c<pos:position pos:line="224" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="224" pos:column="43">STATE_UNCONNECTED<pos:position pos:line="224" pos:column="60"/></name></expr></argument>)<pos:position pos:line="224" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="62"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="225" pos:column="25">apr_socket_close<pos:position pos:line="225" pos:column="41"/></name><argument_list pos:line="225" pos:column="41">(<argument><expr><name><name pos:line="225" pos:column="42">c<pos:position pos:line="225" pos:column="43"/></name><operator pos:line="225" pos:column="43">-&gt;<pos:position pos:line="225" pos:column="48"/></operator><name pos:line="225" pos:column="45">aprsock<pos:position pos:line="225" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="225" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="225" pos:column="54"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="226" pos:column="25">err_conn<pos:position pos:line="226" pos:column="33"/></name><operator pos:line="226" pos:column="33">++<pos:position pos:line="226" pos:column="35"/></operator></expr>;<pos:position pos:line="226" pos:column="36"/></expr_stmt>
                        <if pos:line="227" pos:column="25">if <condition pos:line="227" pos:column="28">(<expr><name pos:line="227" pos:column="29">bad<pos:position pos:line="227" pos:column="32"/></name><operator pos:line="227" pos:column="32">++<pos:position pos:line="227" pos:column="34"/></operator> <operator pos:line="227" pos:column="35">&gt;<pos:position pos:line="227" pos:column="39"/></operator> <literal type="number" pos:line="227" pos:column="37">10<pos:position pos:line="227" pos:column="39"/></literal></expr>)<pos:position pos:line="227" pos:column="40"/></condition><then pos:line="227" pos:column="40"> <block pos:line="227" pos:column="41">{
                            <expr_stmt><expr><call><name pos:line="228" pos:column="29">fprintf<pos:position pos:line="228" pos:column="36"/></name><argument_list pos:line="228" pos:column="36">(<argument><expr><name pos:line="228" pos:column="37">stderr<pos:position pos:line="228" pos:column="43"/></name></expr></argument>,
                                    <argument><expr><literal type="string" pos:line="229" pos:column="37">"\nTest aborted after 10 failures\n\n"<pos:position pos:line="229" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="229" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="229" pos:column="77"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="230" pos:column="29">apr_err<pos:position pos:line="230" pos:column="36"/></name><argument_list pos:line="230" pos:column="36">(<argument><expr><literal type="string" pos:line="230" pos:column="37">"apr_socket_connect()"<pos:position pos:line="230" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="230" pos:column="61">rv<pos:position pos:line="230" pos:column="63"/></name></expr></argument>)<pos:position pos:line="230" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="230" pos:column="65"/></expr_stmt>
                        }<pos:position pos:line="231" pos:column="26"/></block></then></if>
                        <expr_stmt><expr><call><name pos:line="232" pos:column="25">start_connect<pos:position pos:line="232" pos:column="38"/></name><argument_list pos:line="232" pos:column="38">(<argument><expr><name pos:line="232" pos:column="39">c<pos:position pos:line="232" pos:column="40"/></name></expr></argument>)<pos:position pos:line="232" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="42"/></expr_stmt>
                        <continue pos:line="233" pos:column="25">continue;<pos:position pos:line="233" pos:column="34"/></continue>
                    }<pos:position pos:line="234" pos:column="22"/></block></then>
                    <else pos:line="235" pos:column="21">else <block pos:line="235" pos:column="26">{
                        <expr_stmt><expr><call><name pos:line="236" pos:column="25">set_conn_state<pos:position pos:line="236" pos:column="39"/></name><argument_list pos:line="236" pos:column="39">(<argument><expr><name pos:line="236" pos:column="40">c<pos:position pos:line="236" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="236" pos:column="43">STATE_CONNECTED<pos:position pos:line="236" pos:column="58"/></name></expr></argument>)<pos:position pos:line="236" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="60"/></expr_stmt>
<cpp:ifdef pos:line="237" pos:column="1">#<cpp:directive pos:line="237" pos:column="2">ifdef<pos:position pos:line="237" pos:column="7"/></cpp:directive> <name pos:line="237" pos:column="8">USE_SSL<pos:position pos:line="237" pos:column="15"/></name></cpp:ifdef>
                        <if pos:line="238" pos:column="25">if <condition pos:line="238" pos:column="28">(<expr><name><name pos:line="238" pos:column="29">c<pos:position pos:line="238" pos:column="30"/></name><operator pos:line="238" pos:column="30">-&gt;<pos:position pos:line="238" pos:column="35"/></operator><name pos:line="238" pos:column="32">ssl<pos:position pos:line="238" pos:column="35"/></name></name></expr>)<pos:position pos:line="238" pos:column="36"/></condition><then pos:line="238" pos:column="36">
                            <block type="pseudo"><expr_stmt><expr><call><name pos:line="239" pos:column="29">ssl_proceed_handshake<pos:position pos:line="239" pos:column="50"/></name><argument_list pos:line="239" pos:column="50">(<argument><expr><name pos:line="239" pos:column="51">c<pos:position pos:line="239" pos:column="52"/></name></expr></argument>)<pos:position pos:line="239" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="239" pos:column="54"/></expr_stmt></block></then>
                        <else pos:line="240" pos:column="25">else
<cpp:endif pos:line="241" pos:column="1">#<cpp:directive pos:line="241" pos:column="2">endif<pos:position pos:line="241" pos:column="7"/></cpp:directive></cpp:endif>
                        <block type="pseudo"><expr_stmt><expr><call><name pos:line="242" pos:column="25">write_request<pos:position pos:line="242" pos:column="38"/></name><argument_list pos:line="242" pos:column="38">(<argument><expr><name pos:line="242" pos:column="39">c<pos:position pos:line="242" pos:column="40"/></name></expr></argument>)<pos:position pos:line="242" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="42"/></expr_stmt></block></else></if>
                    }<pos:position pos:line="243" pos:column="22"/></block></else></if>
                }<pos:position pos:line="244" pos:column="18"/></block></then>
                <else pos:line="245" pos:column="17">else <block pos:line="245" pos:column="22">{
                    <expr_stmt><expr><call><name pos:line="246" pos:column="21">write_request<pos:position pos:line="246" pos:column="34"/></name><argument_list pos:line="246" pos:column="34">(<argument><expr><name pos:line="246" pos:column="35">c<pos:position pos:line="246" pos:column="36"/></name></expr></argument>)<pos:position pos:line="246" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="246" pos:column="38"/></expr_stmt>
                }<pos:position pos:line="247" pos:column="18"/></block></else></if>
            }<pos:position pos:line="248" pos:column="14"/></block></then></if>
        }<pos:position pos:line="249" pos:column="10"/></block></for>
    }<pos:position pos:line="250" pos:column="6"/></block> while <condition pos:line="250" pos:column="13">(<expr><name pos:line="250" pos:column="14">lasttime<pos:position pos:line="250" pos:column="22"/></name> <operator pos:line="250" pos:column="23">&lt;<pos:position pos:line="250" pos:column="27"/></operator> <name pos:line="250" pos:column="25">stoptime<pos:position pos:line="250" pos:column="33"/></name> <operator pos:line="250" pos:column="34">&amp;&amp;<pos:position pos:line="250" pos:column="44"/></operator> <name pos:line="250" pos:column="37">done<pos:position pos:line="250" pos:column="41"/></name> <operator pos:line="250" pos:column="42">&lt;<pos:position pos:line="250" pos:column="46"/></operator> <name pos:line="250" pos:column="44">requests<pos:position pos:line="250" pos:column="52"/></name></expr>)<pos:position pos:line="250" pos:column="53"/></condition>;<pos:position pos:line="250" pos:column="54"/></do>
    
    <if pos:line="252" pos:column="5">if <condition pos:line="252" pos:column="8">(<expr><name pos:line="252" pos:column="9">heartbeatres<pos:position pos:line="252" pos:column="21"/></name></expr>)<pos:position pos:line="252" pos:column="22"/></condition><then pos:line="252" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="253" pos:column="9">fprintf<pos:position pos:line="253" pos:column="16"/></name><argument_list pos:line="253" pos:column="16">(<argument><expr><name pos:line="253" pos:column="17">stderr<pos:position pos:line="253" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="253" pos:column="25">"Finished %d requests\n"<pos:position pos:line="253" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="253" pos:column="51">done<pos:position pos:line="253" pos:column="55"/></name></expr></argument>)<pos:position pos:line="253" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="253" pos:column="57"/></expr_stmt></block></then>
    <else pos:line="254" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="255" pos:column="9">printf<pos:position pos:line="255" pos:column="15"/></name><argument_list pos:line="255" pos:column="15">(<argument><expr><literal type="string" pos:line="255" pos:column="16">"..done\n"<pos:position pos:line="255" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="255" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="255" pos:column="28"/></expr_stmt></block></else></if>

    <if pos:line="257" pos:column="5">if <condition pos:line="257" pos:column="8">(<expr><name pos:line="257" pos:column="9">use_html<pos:position pos:line="257" pos:column="17"/></name></expr>)<pos:position pos:line="257" pos:column="18"/></condition><then pos:line="257" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="258" pos:column="9">output_html_results<pos:position pos:line="258" pos:column="28"/></name><argument_list pos:line="258" pos:column="28">()<pos:position pos:line="258" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="258" pos:column="31"/></expr_stmt></block></then>
    <else pos:line="259" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="260" pos:column="9">output_results<pos:position pos:line="260" pos:column="23"/></name><argument_list pos:line="260" pos:column="23">(<argument><expr><literal type="number" pos:line="260" pos:column="24">0<pos:position pos:line="260" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="260" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="260" pos:column="27"/></expr_stmt></block></else></if>
}<pos:position pos:line="261" pos:column="2"/></block></function></unit>
