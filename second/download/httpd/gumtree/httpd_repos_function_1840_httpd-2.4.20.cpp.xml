<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1840_httpd-2.4.20.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ap_process_http_sync_connection<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name pos:line="1" pos:column="44">conn_rec<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">c<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">request_rec<pos:position pos:line="3" pos:column="16"/></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">r<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">conn_state_t<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">cs<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><name><name pos:line="4" pos:column="24">c<pos:position pos:line="4" pos:column="25"/></name><operator pos:line="4" pos:column="25">-&gt;<pos:position pos:line="4" pos:column="30"/></operator><name pos:line="4" pos:column="27">cs<pos:position pos:line="4" pos:column="29"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_socket_t<pos:position pos:line="5" pos:column="17"/></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">csd<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><name pos:line="5" pos:column="25">NULL<pos:position pos:line="5" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">mpm_state<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><literal type="number" pos:line="6" pos:column="21">0<pos:position pos:line="6" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>

    <comment type="block" pos:line="8" pos:column="5">/*
     * Read and process each request found on our connection
     * until no requests are left or we decide to close.
     */</comment>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">ap_update_child_status_from_conn<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name><name pos:line="13" pos:column="38">c<pos:position pos:line="13" pos:column="39"/></name><operator pos:line="13" pos:column="39">-&gt;<pos:position pos:line="13" pos:column="44"/></operator><name pos:line="13" pos:column="41">sbh<pos:position pos:line="13" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="46">SERVER_BUSY_READ<pos:position pos:line="13" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="64">c<pos:position pos:line="13" pos:column="65"/></name></expr></argument>)<pos:position pos:line="13" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="67"/></expr_stmt>
    <while pos:line="14" pos:column="5">while <condition pos:line="14" pos:column="11">(<expr><operator pos:line="14" pos:column="12">(<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">r<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <call><name pos:line="14" pos:column="17">ap_read_request<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">(<argument><expr><name pos:line="14" pos:column="33">c<pos:position pos:line="14" pos:column="34"/></name></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></call><operator pos:line="14" pos:column="35">)<pos:position pos:line="14" pos:column="36"/></operator> <operator pos:line="14" pos:column="37">!=<pos:position pos:line="14" pos:column="39"/></operator> <name pos:line="14" pos:column="40">NULL<pos:position pos:line="14" pos:column="44"/></name></expr>)<pos:position pos:line="14" pos:column="45"/></condition> <block pos:line="14" pos:column="46">{
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">apr_interval_time_t<pos:position pos:line="15" pos:column="28"/></name></type> <name pos:line="15" pos:column="29">keep_alive_timeout<pos:position pos:line="15" pos:column="47"/></name> <init pos:line="15" pos:column="48">= <expr><name><name pos:line="15" pos:column="50">r<pos:position pos:line="15" pos:column="51"/></name><operator pos:line="15" pos:column="51">-&gt;<pos:position pos:line="15" pos:column="56"/></operator><name pos:line="15" pos:column="53">server<pos:position pos:line="15" pos:column="59"/></name><operator pos:line="15" pos:column="59">-&gt;<pos:position pos:line="15" pos:column="64"/></operator><name pos:line="15" pos:column="61">keep_alive_timeout<pos:position pos:line="15" pos:column="79"/></name></name></expr></init></decl>;<pos:position pos:line="15" pos:column="80"/></decl_stmt>

        <comment type="block" pos:line="17" pos:column="9">/* To preserve legacy behaviour, use the keepalive timeout from the
         * base server (first on this IP:port) when none is explicitly
         * configured on this server.
         */</comment>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">!<pos:position pos:line="21" pos:column="14"/></operator><name><name pos:line="21" pos:column="14">r<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">-&gt;<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="17">server<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">-&gt;<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="25">keep_alive_timeout_set<pos:position pos:line="21" pos:column="47"/></name></name></expr>)<pos:position pos:line="21" pos:column="48"/></condition><then pos:line="21" pos:column="48"> <block pos:line="21" pos:column="49">{
            <expr_stmt><expr><name pos:line="22" pos:column="13">keep_alive_timeout<pos:position pos:line="22" pos:column="31"/></name> <operator pos:line="22" pos:column="32">=<pos:position pos:line="22" pos:column="33"/></operator> <name><name pos:line="22" pos:column="34">c<pos:position pos:line="22" pos:column="35"/></name><operator pos:line="22" pos:column="35">-&gt;<pos:position pos:line="22" pos:column="40"/></operator><name pos:line="22" pos:column="37">base_server<pos:position pos:line="22" pos:column="48"/></name><operator pos:line="22" pos:column="48">-&gt;<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="50">keep_alive_timeout<pos:position pos:line="22" pos:column="68"/></name></name></expr>;<pos:position pos:line="22" pos:column="69"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name><name pos:line="25" pos:column="9">c<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">-&gt;<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="12">keepalive<pos:position pos:line="25" pos:column="21"/></name></name> <operator pos:line="25" pos:column="22">=<pos:position pos:line="25" pos:column="23"/></operator> <name pos:line="25" pos:column="24">AP_CONN_UNKNOWN<pos:position pos:line="25" pos:column="39"/></name></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt>
        <comment type="block" pos:line="26" pos:column="9">/* process the request if it was read without error */</comment>

        <expr_stmt><expr><call><name pos:line="28" pos:column="9">ap_update_child_status<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name><name pos:line="28" pos:column="32">c<pos:position pos:line="28" pos:column="33"/></name><operator pos:line="28" pos:column="33">-&gt;<pos:position pos:line="28" pos:column="38"/></operator><name pos:line="28" pos:column="35">sbh<pos:position pos:line="28" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="40">SERVER_BUSY_WRITE<pos:position pos:line="28" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="59">r<pos:position pos:line="28" pos:column="60"/></name></expr></argument>)<pos:position pos:line="28" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="62"/></expr_stmt>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name><name pos:line="29" pos:column="13">r<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">-&gt;<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="16">status<pos:position pos:line="29" pos:column="22"/></name></name> <operator pos:line="29" pos:column="23">==<pos:position pos:line="29" pos:column="25"/></operator> <name pos:line="29" pos:column="26">HTTP_OK<pos:position pos:line="29" pos:column="33"/></name></expr>)<pos:position pos:line="29" pos:column="34"/></condition><then pos:line="29" pos:column="34"> <block pos:line="29" pos:column="35">{
            <if pos:line="30" pos:column="13">if <condition pos:line="30" pos:column="16">(<expr><name pos:line="30" pos:column="17">cs<pos:position pos:line="30" pos:column="19"/></name></expr>)<pos:position pos:line="30" pos:column="20"/></condition><then pos:line="30" pos:column="20">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="17">cs<pos:position pos:line="31" pos:column="19"/></name><operator pos:line="31" pos:column="19">-&gt;<pos:position pos:line="31" pos:column="24"/></operator><name pos:line="31" pos:column="21">state<pos:position pos:line="31" pos:column="26"/></name></name> <operator pos:line="31" pos:column="27">=<pos:position pos:line="31" pos:column="28"/></operator> <name pos:line="31" pos:column="29">CONN_STATE_HANDLER<pos:position pos:line="31" pos:column="47"/></name></expr>;<pos:position pos:line="31" pos:column="48"/></expr_stmt></block></then></if>
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">ap_process_request<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><name pos:line="32" pos:column="32">r<pos:position pos:line="32" pos:column="33"/></name></expr></argument>)<pos:position pos:line="32" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="35"/></expr_stmt>
            <comment type="block" pos:line="33" pos:column="13">/* After the call to ap_process_request, the
             * request pool will have been deleted.  We set
             * r=NULL here to ensure that any dereference
             * of r that might be added later in this function
             * will result in a segfault immediately instead
             * of nondeterministic failures later.
             */</comment>
            <expr_stmt><expr><name pos:line="40" pos:column="13">r<pos:position pos:line="40" pos:column="14"/></name> <operator pos:line="40" pos:column="15">=<pos:position pos:line="40" pos:column="16"/></operator> <name pos:line="40" pos:column="17">NULL<pos:position pos:line="40" pos:column="21"/></name></expr>;<pos:position pos:line="40" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="41" pos:column="10"/></block></then></if>

        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name><name pos:line="43" pos:column="13">c<pos:position pos:line="43" pos:column="14"/></name><operator pos:line="43" pos:column="14">-&gt;<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="16">keepalive<pos:position pos:line="43" pos:column="25"/></name></name> <operator pos:line="43" pos:column="26">!=<pos:position pos:line="43" pos:column="28"/></operator> <name pos:line="43" pos:column="29">AP_CONN_KEEPALIVE<pos:position pos:line="43" pos:column="46"/></name> <operator pos:line="43" pos:column="47">||<pos:position pos:line="43" pos:column="49"/></operator> <name><name pos:line="43" pos:column="50">c<pos:position pos:line="43" pos:column="51"/></name><operator pos:line="43" pos:column="51">-&gt;<pos:position pos:line="43" pos:column="56"/></operator><name pos:line="43" pos:column="53">aborted<pos:position pos:line="43" pos:column="60"/></name></name></expr>)<pos:position pos:line="43" pos:column="61"/></condition><then pos:line="43" pos:column="61">
            <block type="pseudo"><break pos:line="44" pos:column="13">break;<pos:position pos:line="44" pos:column="19"/></break></block></then></if>

        <expr_stmt><expr><call><name pos:line="46" pos:column="9">ap_update_child_status<pos:position pos:line="46" pos:column="31"/></name><argument_list pos:line="46" pos:column="31">(<argument><expr><name><name pos:line="46" pos:column="32">c<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">-&gt;<pos:position pos:line="46" pos:column="38"/></operator><name pos:line="46" pos:column="35">sbh<pos:position pos:line="46" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="40">SERVER_BUSY_KEEPALIVE<pos:position pos:line="46" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="63">NULL<pos:position pos:line="46" pos:column="67"/></name></expr></argument>)<pos:position pos:line="46" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="69"/></expr_stmt>

        <if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><call><name pos:line="48" pos:column="13">ap_mpm_query<pos:position pos:line="48" pos:column="25"/></name><argument_list pos:line="48" pos:column="25">(<argument><expr><name pos:line="48" pos:column="26">AP_MPMQ_MPM_STATE<pos:position pos:line="48" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="45">&amp;<pos:position pos:line="48" pos:column="50"/></operator><name pos:line="48" pos:column="46">mpm_state<pos:position pos:line="48" pos:column="55"/></name></expr></argument>)<pos:position pos:line="48" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="57"/></condition><then pos:line="48" pos:column="57"> <block pos:line="48" pos:column="58">{
            <break pos:line="49" pos:column="13">break;<pos:position pos:line="49" pos:column="19"/></break>
        }<pos:position pos:line="50" pos:column="10"/></block></then></if>

        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name pos:line="52" pos:column="13">mpm_state<pos:position pos:line="52" pos:column="22"/></name> <operator pos:line="52" pos:column="23">==<pos:position pos:line="52" pos:column="25"/></operator> <name pos:line="52" pos:column="26">AP_MPMQ_STOPPING<pos:position pos:line="52" pos:column="42"/></name></expr>)<pos:position pos:line="52" pos:column="43"/></condition><then pos:line="52" pos:column="43"> <block pos:line="52" pos:column="44">{
          <break pos:line="53" pos:column="11">break;<pos:position pos:line="53" pos:column="17"/></break>
        }<pos:position pos:line="54" pos:column="10"/></block></then></if>

        <if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><operator pos:line="56" pos:column="13">!<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="14">csd<pos:position pos:line="56" pos:column="17"/></name></expr>)<pos:position pos:line="56" pos:column="18"/></condition><then pos:line="56" pos:column="18"> <block pos:line="56" pos:column="19">{
            <expr_stmt><expr><name pos:line="57" pos:column="13">csd<pos:position pos:line="57" pos:column="16"/></name> <operator pos:line="57" pos:column="17">=<pos:position pos:line="57" pos:column="18"/></operator> <call><name pos:line="57" pos:column="19">ap_get_conn_socket<pos:position pos:line="57" pos:column="37"/></name><argument_list pos:line="57" pos:column="37">(<argument><expr><name pos:line="57" pos:column="38">c<pos:position pos:line="57" pos:column="39"/></name></expr></argument>)<pos:position pos:line="57" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="58" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">apr_socket_opt_set<pos:position pos:line="59" pos:column="27"/></name><argument_list pos:line="59" pos:column="27">(<argument><expr><name pos:line="59" pos:column="28">csd<pos:position pos:line="59" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="33">APR_INCOMPLETE_READ<pos:position pos:line="59" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="54">1<pos:position pos:line="59" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">apr_socket_timeout_set<pos:position pos:line="60" pos:column="31"/></name><argument_list pos:line="60" pos:column="31">(<argument><expr><name pos:line="60" pos:column="32">csd<pos:position pos:line="60" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="37">keep_alive_timeout<pos:position pos:line="60" pos:column="55"/></name></expr></argument>)<pos:position pos:line="60" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="57"/></expr_stmt>
        <comment type="block" pos:line="61" pos:column="9">/* Go straight to select() to wait for the next request */</comment>
    }<pos:position pos:line="62" pos:column="6"/></block></while>

    <return pos:line="64" pos:column="5">return <expr><name pos:line="64" pos:column="12">OK<pos:position pos:line="64" pos:column="14"/></name></expr>;<pos:position pos:line="64" pos:column="15"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
