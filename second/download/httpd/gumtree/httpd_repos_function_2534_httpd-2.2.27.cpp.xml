<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2534_httpd-2.2.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">ap_pop_pool<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">apr_pool_t<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier><modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type> <name pos:line="1" pos:column="32">recycled_pool<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">fd_queue_info_t<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type> <name pos:line="1" pos:column="65">queue_info<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <comment type="block" pos:line="3" pos:column="5">/* Atomically pop a pool from the recycled list */</comment>

    <comment type="block" pos:line="5" pos:column="5">/* This function is safe only as long as it is single threaded because
     * it reaches into the queue and accesses "next" which can change.
     * We are OK today because it is only called from the listener thread.
     * cas-based pushes do not have the same limitation - any number can
     * happen concurrently with a single cas-based pop.
     */</comment>

    <expr_stmt><expr><operator pos:line="12" pos:column="5">*<pos:position pos:line="12" pos:column="6"/></operator><name pos:line="12" pos:column="6">recycled_pool<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <name pos:line="12" pos:column="22">NULL<pos:position pos:line="12" pos:column="26"/></name></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt>


    <comment type="block" pos:line="15" pos:column="5">/* Atomically pop a pool from the recycled list */</comment>
    <for pos:line="16" pos:column="5">for <control pos:line="16" pos:column="9">(<init pos:line="16" pos:column="10">;<pos:position pos:line="16" pos:column="11"/></init><condition pos:line="16" pos:column="11">;<pos:position pos:line="16" pos:column="12"/></condition><incr/>)<pos:position pos:line="16" pos:column="13"/></control> <block pos:line="16" pos:column="14">{
        <decl_stmt><decl><type><name><name pos:line="17" pos:column="9">struct<pos:position pos:line="17" pos:column="15"/></name> <name pos:line="17" pos:column="16">recycled_pool<pos:position pos:line="17" pos:column="29"/></name></name> <modifier pos:line="17" pos:column="30">*<pos:position pos:line="17" pos:column="31"/></modifier></type><name pos:line="17" pos:column="31">first_pool<pos:position pos:line="17" pos:column="41"/></name> <init pos:line="17" pos:column="42">= <expr><name><name pos:line="17" pos:column="44">queue_info<pos:position pos:line="17" pos:column="54"/></name><operator pos:line="17" pos:column="54">-&gt;<pos:position pos:line="17" pos:column="59"/></operator><name pos:line="17" pos:column="56">recycled_pools<pos:position pos:line="17" pos:column="70"/></name></name></expr></init></decl>;<pos:position pos:line="17" pos:column="71"/></decl_stmt>
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">first_pool<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">==<pos:position pos:line="18" pos:column="26"/></operator> <name pos:line="18" pos:column="27">NULL<pos:position pos:line="18" pos:column="31"/></name></expr>)<pos:position pos:line="18" pos:column="32"/></condition><then pos:line="18" pos:column="32"> <block pos:line="18" pos:column="33">{
            <break pos:line="19" pos:column="13">break;<pos:position pos:line="19" pos:column="19"/></break>
        }<pos:position pos:line="20" pos:column="10"/></block></then></if>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">apr_atomic_casptr<pos:position pos:line="21" pos:column="30"/></name>
            <argument_list pos:line="22" pos:column="13">(<argument><expr><operator pos:line="22" pos:column="14">(<pos:position pos:line="22" pos:column="15"/></operator><specifier pos:line="22" pos:column="15">volatile<pos:position pos:line="22" pos:column="23"/></specifier> <name pos:line="22" pos:column="24">void<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">*<pos:position pos:line="22" pos:column="30"/></operator><operator pos:line="22" pos:column="30">*<pos:position pos:line="22" pos:column="31"/></operator><operator pos:line="22" pos:column="31">)<pos:position pos:line="22" pos:column="32"/></operator> <operator pos:line="22" pos:column="33">&amp;<pos:position pos:line="22" pos:column="38"/></operator><operator pos:line="22" pos:column="34">(<pos:position pos:line="22" pos:column="35"/></operator><name><name pos:line="22" pos:column="35">queue_info<pos:position pos:line="22" pos:column="45"/></name><operator pos:line="22" pos:column="45">-&gt;<pos:position pos:line="22" pos:column="50"/></operator><name pos:line="22" pos:column="47">recycled_pools<pos:position pos:line="22" pos:column="61"/></name></name><operator pos:line="22" pos:column="61">)<pos:position pos:line="22" pos:column="62"/></operator></expr></argument>,
             <argument><expr><name><name pos:line="23" pos:column="14">first_pool<pos:position pos:line="23" pos:column="24"/></name><operator pos:line="23" pos:column="24">-&gt;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="26">next<pos:position pos:line="23" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="32">first_pool<pos:position pos:line="23" pos:column="42"/></name></expr></argument>)<pos:position pos:line="23" pos:column="43"/></argument_list></call> <operator pos:line="23" pos:column="44">==<pos:position pos:line="23" pos:column="46"/></operator> <name pos:line="23" pos:column="47">first_pool<pos:position pos:line="23" pos:column="57"/></name></expr>)<pos:position pos:line="23" pos:column="58"/></condition><then pos:line="23" pos:column="58"> <block pos:line="23" pos:column="59">{
            <expr_stmt><expr><operator pos:line="24" pos:column="13">*<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">recycled_pool<pos:position pos:line="24" pos:column="27"/></name> <operator pos:line="24" pos:column="28">=<pos:position pos:line="24" pos:column="29"/></operator> <name><name pos:line="24" pos:column="30">first_pool<pos:position pos:line="24" pos:column="40"/></name><operator pos:line="24" pos:column="40">-&gt;<pos:position pos:line="24" pos:column="45"/></operator><name pos:line="24" pos:column="42">pool<pos:position pos:line="24" pos:column="46"/></name></name></expr>;<pos:position pos:line="24" pos:column="47"/></expr_stmt>
            <break pos:line="25" pos:column="13">break;<pos:position pos:line="25" pos:column="19"/></break>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>
    }<pos:position pos:line="27" pos:column="6"/></block></for>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
