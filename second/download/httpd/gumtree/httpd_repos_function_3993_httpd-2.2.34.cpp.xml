<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3993_httpd-2.2.34.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">apr_socket_accept_filter<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">apr_socket_t<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">sock<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">nonconst_name<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>, 
                                      <parameter><decl><type><name pos:line="2" pos:column="39">char<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">nonconst_args<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* these should have been const; act like they are */</comment>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">name<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><name pos:line="5" pos:column="24">nonconst_name<pos:position pos:line="5" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">args<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><name pos:line="6" pos:column="24">nonconst_args<pos:position pos:line="6" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="38"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">accept_filter_arg<pos:position pos:line="8" pos:column="29"/></name></name></type> <name pos:line="8" pos:column="30">af<pos:position pos:line="8" pos:column="32"/></name></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">socklen_t<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">optlen<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><sizeof pos:line="9" pos:column="24">sizeof<argument_list pos:line="9" pos:column="30">(<argument><expr><name pos:line="9" pos:column="31">af<pos:position pos:line="9" pos:column="33"/></name></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="9" pos:column="35"/></decl_stmt>

    <comment type="block" pos:line="11" pos:column="5">/* FreeBSD returns an error if the filter is already set; ignore
     * this call if we previously set it to the same value.
     */</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">(<pos:position pos:line="14" pos:column="10"/></operator><call><name pos:line="14" pos:column="10">getsockopt<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name><name pos:line="14" pos:column="21">sock<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">-&gt;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="27">socketdes<pos:position pos:line="14" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="38">SOL_SOCKET<pos:position pos:line="14" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="50">SO_ACCEPTFILTER<pos:position pos:line="14" pos:column="65"/></name></expr></argument>,
                    <argument><expr><operator pos:line="15" pos:column="21">&amp;<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="22">af<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="26">&amp;<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="27">optlen<pos:position pos:line="15" pos:column="33"/></name></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call><operator pos:line="15" pos:column="34">)<pos:position pos:line="15" pos:column="35"/></operator> <operator pos:line="15" pos:column="36">==<pos:position pos:line="15" pos:column="38"/></operator> <literal type="number" pos:line="15" pos:column="39">0<pos:position pos:line="15" pos:column="40"/></literal></expr>)<pos:position pos:line="15" pos:column="41"/></condition><then pos:line="15" pos:column="41"> <block pos:line="15" pos:column="42">{
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><call><name pos:line="16" pos:column="14">strcmp<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name pos:line="16" pos:column="21">name<pos:position pos:line="16" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="27">af<pos:position pos:line="16" pos:column="29"/></name><operator pos:line="16" pos:column="29">.<pos:position pos:line="16" pos:column="30"/></operator><name pos:line="16" pos:column="30">af_name<pos:position pos:line="16" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call> <operator pos:line="16" pos:column="39">&amp;&amp;<pos:position pos:line="16" pos:column="49"/></operator> <operator pos:line="16" pos:column="42">!<pos:position pos:line="16" pos:column="43"/></operator><call><name pos:line="16" pos:column="43">strcmp<pos:position pos:line="16" pos:column="49"/></name><argument_list pos:line="16" pos:column="49">(<argument><expr><name pos:line="16" pos:column="50">args<pos:position pos:line="16" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="56">af<pos:position pos:line="16" pos:column="58"/></name><operator pos:line="16" pos:column="58">.<pos:position pos:line="16" pos:column="59"/></operator><name pos:line="16" pos:column="59">af_arg<pos:position pos:line="16" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="67"/></condition><then pos:line="16" pos:column="67"> <block pos:line="16" pos:column="68">{
            <return pos:line="17" pos:column="13">return <expr><name pos:line="17" pos:column="20">APR_SUCCESS<pos:position pos:line="17" pos:column="31"/></name></expr>;<pos:position pos:line="17" pos:column="32"/></return>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="21" pos:column="5">/* Uhh, at least in FreeBSD 9 the fields are declared as arrays of
     * these lengths; did sizeof not work in some ancient release?
     *
     * FreeBSD kernel sets the last byte to a '\0'.
     */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">apr_cpystrn<pos:position pos:line="26" pos:column="16"/></name><argument_list pos:line="26" pos:column="16">(<argument><expr><name><name pos:line="26" pos:column="17">af<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">.<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="20">af_name<pos:position pos:line="26" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="29">name<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="35">16<pos:position pos:line="26" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">apr_cpystrn<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">(<argument><expr><name><name pos:line="27" pos:column="17">af<pos:position pos:line="27" pos:column="19"/></name><operator pos:line="27" pos:column="19">.<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="20">af_arg<pos:position pos:line="27" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="28">args<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="34">256<pos:position pos:line="27" pos:column="37"/></literal> <operator pos:line="27" pos:column="38">-<pos:position pos:line="27" pos:column="39"/></operator> <literal type="number" pos:line="27" pos:column="40">16<pos:position pos:line="27" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><call><name pos:line="29" pos:column="10">setsockopt<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><name><name pos:line="29" pos:column="21">sock<pos:position pos:line="29" pos:column="25"/></name><operator pos:line="29" pos:column="25">-&gt;<pos:position pos:line="29" pos:column="30"/></operator><name pos:line="29" pos:column="27">socketdes<pos:position pos:line="29" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="38">SOL_SOCKET<pos:position pos:line="29" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="50">SO_ACCEPTFILTER<pos:position pos:line="29" pos:column="65"/></name></expr></argument>,
          <argument><expr><operator pos:line="30" pos:column="11">&amp;<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="12">af<pos:position pos:line="30" pos:column="14"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="16">sizeof<argument_list pos:line="30" pos:column="22">(<argument><expr><name pos:line="30" pos:column="23">af<pos:position pos:line="30" pos:column="25"/></name></expr></argument>)<pos:position pos:line="30" pos:column="26"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="27"/></argument_list></call><operator pos:line="30" pos:column="27">)<pos:position pos:line="30" pos:column="28"/></operator> <operator pos:line="30" pos:column="29">&lt;<pos:position pos:line="30" pos:column="33"/></operator> <literal type="number" pos:line="30" pos:column="31">0<pos:position pos:line="30" pos:column="32"/></literal></expr>)<pos:position pos:line="30" pos:column="33"/></condition><then pos:line="30" pos:column="33"> <block pos:line="30" pos:column="34">{
        <return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">errno<pos:position pos:line="31" pos:column="21"/></name></expr>;<pos:position pos:line="31" pos:column="22"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
    <return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">APR_SUCCESS<pos:position pos:line="33" pos:column="23"/></name></expr>;<pos:position pos:line="33" pos:column="24"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
