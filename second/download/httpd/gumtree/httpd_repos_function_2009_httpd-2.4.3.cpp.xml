<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2009_httpd-2.4.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">data_out_filter<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">ap_filter_t<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">f<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">apr_bucket_brigade<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">bb<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_bucket<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">e<pos:position pos:line="3" pos:column="18"/></name></decl>, <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="21">ee<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">request_rec<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">r<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><name><name pos:line="4" pos:column="22">f<pos:position pos:line="4" pos:column="23"/></name><operator pos:line="4" pos:column="23">-&gt;<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="25">r<pos:position pos:line="4" pos:column="26"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">data_ctx<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">ctx<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name><name pos:line="5" pos:column="21">f<pos:position pos:line="5" pos:column="22"/></name><operator pos:line="5" pos:column="22">-&gt;<pos:position pos:line="5" pos:column="27"/></operator><name pos:line="5" pos:column="24">ctx<pos:position pos:line="5" pos:column="27"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">rv<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">APR_SUCCESS<pos:position pos:line="6" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* first time in? create a context */</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">ctx<pos:position pos:line="9" pos:column="13"/></name></expr>)<pos:position pos:line="9" pos:column="14"/></condition><then pos:line="9" pos:column="14"> <block pos:line="9" pos:column="15">{
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">char<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier></type><name pos:line="10" pos:column="15">type<pos:position pos:line="10" pos:column="19"/></name></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">charset<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><name pos:line="11" pos:column="25">NULL<pos:position pos:line="11" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name pos:line="12" pos:column="15">end<pos:position pos:line="12" pos:column="18"/></name></decl>;<pos:position pos:line="12" pos:column="19"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">const<pos:position pos:line="13" pos:column="14"/></specifier> <name pos:line="13" pos:column="15">char<pos:position pos:line="13" pos:column="19"/></name> <modifier pos:line="13" pos:column="20">*<pos:position pos:line="13" pos:column="21"/></modifier></type><name pos:line="13" pos:column="21">content_length<pos:position pos:line="13" pos:column="35"/></name></decl>;<pos:position pos:line="13" pos:column="36"/></decl_stmt>

        <comment type="block" pos:line="15" pos:column="9">/* base64-ing won't work on subrequests, it would be nice if
         * it did. Within subrequests, we have no EOS to check for,
         * so we don't know when to flush the tail to the network.
         */</comment>
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><call><name pos:line="19" pos:column="14">ap_is_initial_req<pos:position pos:line="19" pos:column="31"/></name><argument_list pos:line="19" pos:column="31">(<argument><expr><name><name pos:line="19" pos:column="32">f<pos:position pos:line="19" pos:column="33"/></name><operator pos:line="19" pos:column="33">-&gt;<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="35">r<pos:position pos:line="19" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="38"/></condition><then pos:line="19" pos:column="38"> <block pos:line="19" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">ap_remove_output_filter<pos:position pos:line="20" pos:column="36"/></name><argument_list pos:line="20" pos:column="36">(<argument><expr><name pos:line="20" pos:column="37">f<pos:position pos:line="20" pos:column="38"/></name></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt>
            <return pos:line="21" pos:column="13">return <expr><call><name pos:line="21" pos:column="20">ap_pass_brigade<pos:position pos:line="21" pos:column="35"/></name><argument_list pos:line="21" pos:column="35">(<argument><expr><name><name pos:line="21" pos:column="36">f<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">-&gt;<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="39">next<pos:position pos:line="21" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="45">bb<pos:position pos:line="21" pos:column="47"/></name></expr></argument>)<pos:position pos:line="21" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="49"/></return>
        }<pos:position pos:line="22" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="24" pos:column="9">ctx<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <name><name pos:line="24" pos:column="15">f<pos:position pos:line="24" pos:column="16"/></name><operator pos:line="24" pos:column="16">-&gt;<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="18">ctx<pos:position pos:line="24" pos:column="21"/></name></name> <operator pos:line="24" pos:column="22">=<pos:position pos:line="24" pos:column="23"/></operator> <call><name pos:line="24" pos:column="24">apr_pcalloc<pos:position pos:line="24" pos:column="35"/></name><argument_list pos:line="24" pos:column="35">(<argument><expr><name><name pos:line="24" pos:column="36">r<pos:position pos:line="24" pos:column="37"/></name><operator pos:line="24" pos:column="37">-&gt;<pos:position pos:line="24" pos:column="42"/></operator><name pos:line="24" pos:column="39">pool<pos:position pos:line="24" pos:column="43"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="45">sizeof<argument_list pos:line="24" pos:column="51">(<argument><expr><operator pos:line="24" pos:column="52">*<pos:position pos:line="24" pos:column="53"/></operator><name pos:line="24" pos:column="53">ctx<pos:position pos:line="24" pos:column="56"/></name></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="25" pos:column="9">ctx<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">-&gt;<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="14">bb<pos:position pos:line="25" pos:column="16"/></name></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <call><name pos:line="25" pos:column="19">apr_brigade_create<pos:position pos:line="25" pos:column="37"/></name><argument_list pos:line="25" pos:column="37">(<argument><expr><name><name pos:line="25" pos:column="38">r<pos:position pos:line="25" pos:column="39"/></name><operator pos:line="25" pos:column="39">-&gt;<pos:position pos:line="25" pos:column="44"/></operator><name pos:line="25" pos:column="41">pool<pos:position pos:line="25" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="47">f<pos:position pos:line="25" pos:column="48"/></name><operator pos:line="25" pos:column="48">-&gt;<pos:position pos:line="25" pos:column="53"/></operator><name pos:line="25" pos:column="50">c<pos:position pos:line="25" pos:column="51"/></name><operator pos:line="25" pos:column="51">-&gt;<pos:position pos:line="25" pos:column="56"/></operator><name pos:line="25" pos:column="53">bucket_alloc<pos:position pos:line="25" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="67"/></expr_stmt>

        <expr_stmt><expr><name pos:line="27" pos:column="9">type<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">=<pos:position pos:line="27" pos:column="15"/></operator> <call><name pos:line="27" pos:column="16">apr_pstrdup<pos:position pos:line="27" pos:column="27"/></name><argument_list pos:line="27" pos:column="27">(<argument><expr><name><name pos:line="27" pos:column="28">r<pos:position pos:line="27" pos:column="29"/></name><operator pos:line="27" pos:column="29">-&gt;<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="31">pool<pos:position pos:line="27" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="37">r<pos:position pos:line="27" pos:column="38"/></name><operator pos:line="27" pos:column="38">-&gt;<pos:position pos:line="27" pos:column="43"/></operator><name pos:line="27" pos:column="40">content_type<pos:position pos:line="27" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="54"/></expr_stmt>
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">type<pos:position pos:line="28" pos:column="17"/></name></expr>)<pos:position pos:line="28" pos:column="18"/></condition><then pos:line="28" pos:column="18"> <block pos:line="28" pos:column="19">{
            <expr_stmt><expr><name pos:line="29" pos:column="13">charset<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">=<pos:position pos:line="29" pos:column="22"/></operator> <call><name pos:line="29" pos:column="23">strchr<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><name pos:line="29" pos:column="30">type<pos:position pos:line="29" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="29" pos:column="36">' '<pos:position pos:line="29" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>
            <if pos:line="30" pos:column="13">if <condition pos:line="30" pos:column="16">(<expr><name pos:line="30" pos:column="17">charset<pos:position pos:line="30" pos:column="24"/></name></expr>)<pos:position pos:line="30" pos:column="25"/></condition><then pos:line="30" pos:column="25"> <block pos:line="30" pos:column="26">{
                <expr_stmt><expr><operator pos:line="31" pos:column="17">*<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="18">charset<pos:position pos:line="31" pos:column="25"/></name><operator pos:line="31" pos:column="25">++<pos:position pos:line="31" pos:column="27"/></operator> <operator pos:line="31" pos:column="28">=<pos:position pos:line="31" pos:column="29"/></operator> <literal type="number" pos:line="31" pos:column="30">0<pos:position pos:line="31" pos:column="31"/></literal></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt>
                <expr_stmt><expr><name pos:line="32" pos:column="17">end<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <call><name pos:line="32" pos:column="23">strchr<pos:position pos:line="32" pos:column="29"/></name><argument_list pos:line="32" pos:column="29">(<argument><expr><name pos:line="32" pos:column="30">charset<pos:position pos:line="32" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="32" pos:column="39">' '<pos:position pos:line="32" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="44"/></expr_stmt>
                <if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name pos:line="33" pos:column="21">end<pos:position pos:line="33" pos:column="24"/></name></expr>)<pos:position pos:line="33" pos:column="25"/></condition><then pos:line="33" pos:column="25"> <block pos:line="33" pos:column="26">{
                    <expr_stmt><expr><operator pos:line="34" pos:column="21">*<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="22">end<pos:position pos:line="34" pos:column="25"/></name><operator pos:line="34" pos:column="25">++<pos:position pos:line="34" pos:column="27"/></operator> <operator pos:line="34" pos:column="28">=<pos:position pos:line="34" pos:column="29"/></operator> <literal type="number" pos:line="34" pos:column="30">0<pos:position pos:line="34" pos:column="31"/></literal></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>
                }<pos:position pos:line="35" pos:column="18"/></block></then></if>
            }<pos:position pos:line="36" pos:column="14"/></block></then></if>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="39" pos:column="9">apr_brigade_printf<pos:position pos:line="39" pos:column="27"/></name><argument_list pos:line="39" pos:column="27">(<argument><expr><name><name pos:line="39" pos:column="28">ctx<pos:position pos:line="39" pos:column="31"/></name><operator pos:line="39" pos:column="31">-&gt;<pos:position pos:line="39" pos:column="36"/></operator><name pos:line="39" pos:column="33">bb<pos:position pos:line="39" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="37">NULL<pos:position pos:line="39" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="43">NULL<pos:position pos:line="39" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="49">"data:%s%s;base64,"<pos:position pos:line="39" pos:column="68"/></literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name pos:line="40" pos:column="17">type<pos:position pos:line="40" pos:column="21"/></name></expr> ?<pos:position pos:line="40" pos:column="23"/></condition><then pos:line="40" pos:column="23"> <expr><name pos:line="40" pos:column="24">type<pos:position pos:line="40" pos:column="28"/></name></expr> <pos:position pos:line="40" pos:column="29"/></then><else pos:line="40" pos:column="29">: <expr><literal type="string" pos:line="40" pos:column="31">""<pos:position pos:line="40" pos:column="33"/></literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="40" pos:column="35">charset<pos:position pos:line="40" pos:column="42"/></name></expr> ?<pos:position pos:line="40" pos:column="44"/></condition><then pos:line="40" pos:column="44"> <expr><name pos:line="40" pos:column="45">charset<pos:position pos:line="40" pos:column="52"/></name></expr> <pos:position pos:line="40" pos:column="53"/></then><else pos:line="40" pos:column="53">: <expr><literal type="string" pos:line="40" pos:column="55">""<pos:position pos:line="40" pos:column="57"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="40" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="59"/></expr_stmt>

        <expr_stmt><expr><name pos:line="42" pos:column="9">content_length<pos:position pos:line="42" pos:column="23"/></name> <operator pos:line="42" pos:column="24">=<pos:position pos:line="42" pos:column="25"/></operator> <call><name pos:line="42" pos:column="26">apr_table_get<pos:position pos:line="42" pos:column="39"/></name><argument_list pos:line="42" pos:column="39">(<argument><expr><name><name pos:line="42" pos:column="40">r<pos:position pos:line="42" pos:column="41"/></name><operator pos:line="42" pos:column="41">-&gt;<pos:position pos:line="42" pos:column="46"/></operator><name pos:line="42" pos:column="43">headers_out<pos:position pos:line="42" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="56">"Content-Length"<pos:position pos:line="42" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="74"/></expr_stmt>
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">content_length<pos:position pos:line="43" pos:column="27"/></name></expr>)<pos:position pos:line="43" pos:column="28"/></condition><then pos:line="43" pos:column="28"> <block pos:line="43" pos:column="29">{
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">apr_off_t<pos:position pos:line="44" pos:column="22"/></name></type> <name pos:line="44" pos:column="23">len<pos:position pos:line="44" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="44" pos:column="28">clen<pos:position pos:line="44" pos:column="32"/></name></decl>;<pos:position pos:line="44" pos:column="33"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">apr_brigade_length<pos:position pos:line="45" pos:column="31"/></name><argument_list pos:line="45" pos:column="31">(<argument><expr><name><name pos:line="45" pos:column="32">ctx<pos:position pos:line="45" pos:column="35"/></name><operator pos:line="45" pos:column="35">-&gt;<pos:position pos:line="45" pos:column="40"/></operator><name pos:line="45" pos:column="37">bb<pos:position pos:line="45" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="41">1<pos:position pos:line="45" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="45" pos:column="44">&amp;<pos:position pos:line="45" pos:column="49"/></operator><name pos:line="45" pos:column="45">len<pos:position pos:line="45" pos:column="48"/></name></expr></argument>)<pos:position pos:line="45" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><name pos:line="46" pos:column="13">clen<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">=<pos:position pos:line="46" pos:column="19"/></operator> <call><name pos:line="46" pos:column="20">apr_atoi64<pos:position pos:line="46" pos:column="30"/></name><argument_list pos:line="46" pos:column="30">(<argument><expr><name pos:line="46" pos:column="31">content_length<pos:position pos:line="46" pos:column="45"/></name></expr></argument>)<pos:position pos:line="46" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="47"/></expr_stmt>
            <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">(<expr><name pos:line="47" pos:column="17">clen<pos:position pos:line="47" pos:column="21"/></name> <operator pos:line="47" pos:column="22">&gt;=<pos:position pos:line="47" pos:column="27"/></operator> <literal type="number" pos:line="47" pos:column="25">0<pos:position pos:line="47" pos:column="26"/></literal> <operator pos:line="47" pos:column="27">&amp;&amp;<pos:position pos:line="47" pos:column="37"/></operator> <name pos:line="47" pos:column="30">clen<pos:position pos:line="47" pos:column="34"/></name> <operator pos:line="47" pos:column="35">&lt;<pos:position pos:line="47" pos:column="39"/></operator> <name pos:line="47" pos:column="37">APR_INT32_MAX<pos:position pos:line="47" pos:column="50"/></name></expr>)<pos:position pos:line="47" pos:column="51"/></condition><then pos:line="47" pos:column="51"> <block pos:line="47" pos:column="52">{
                <expr_stmt><expr><call><name pos:line="48" pos:column="17">ap_set_content_length<pos:position pos:line="48" pos:column="38"/></name><argument_list pos:line="48" pos:column="38">(<argument><expr><name pos:line="48" pos:column="39">r<pos:position pos:line="48" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="42">len<pos:position pos:line="48" pos:column="45"/></name> <operator pos:line="48" pos:column="46">+<pos:position pos:line="48" pos:column="47"/></operator> <call><name pos:line="48" pos:column="48">apr_base64_encode_len<pos:position pos:line="48" pos:column="69"/></name><argument_list pos:line="48" pos:column="69">(<argument><expr><name pos:line="48" pos:column="70">clen<pos:position pos:line="48" pos:column="74"/></name></expr></argument>)<pos:position pos:line="48" pos:column="75"/></argument_list></call> <operator pos:line="48" pos:column="76">-<pos:position pos:line="48" pos:column="77"/></operator> <literal type="number" pos:line="48" pos:column="78">1<pos:position pos:line="48" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="81"/></expr_stmt>
            }<pos:position pos:line="49" pos:column="14"/></block></then>
            <else pos:line="50" pos:column="13">else <block pos:line="50" pos:column="18">{
                <expr_stmt><expr><call><name pos:line="51" pos:column="17">apr_table_unset<pos:position pos:line="51" pos:column="32"/></name><argument_list pos:line="51" pos:column="32">(<argument><expr><name><name pos:line="51" pos:column="33">r<pos:position pos:line="51" pos:column="34"/></name><operator pos:line="51" pos:column="34">-&gt;<pos:position pos:line="51" pos:column="39"/></operator><name pos:line="51" pos:column="36">headers_out<pos:position pos:line="51" pos:column="47"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="49">"Content-Length"<pos:position pos:line="51" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="67"/></expr_stmt>
            }<pos:position pos:line="52" pos:column="14"/></block></else></if>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="55" pos:column="9">ap_set_content_type<pos:position pos:line="55" pos:column="28"/></name><argument_list pos:line="55" pos:column="28">(<argument><expr><name pos:line="55" pos:column="29">r<pos:position pos:line="55" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="32">"text/plain"<pos:position pos:line="55" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="46"/></expr_stmt>

    }<pos:position pos:line="57" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="59" pos:column="5">/* Do nothing if asked to filter nothing. */</comment>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><call><name pos:line="60" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="60" pos:column="26"/></name><argument_list pos:line="60" pos:column="26">(<argument><expr><name pos:line="60" pos:column="27">bb<pos:position pos:line="60" pos:column="29"/></name></expr></argument>)<pos:position pos:line="60" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="31"/></condition><then pos:line="60" pos:column="31"> <block pos:line="60" pos:column="32">{
        <return pos:line="61" pos:column="9">return <expr><call><name pos:line="61" pos:column="16">ap_pass_brigade<pos:position pos:line="61" pos:column="31"/></name><argument_list pos:line="61" pos:column="31">(<argument><expr><name><name pos:line="61" pos:column="32">f<pos:position pos:line="61" pos:column="33"/></name><operator pos:line="61" pos:column="33">-&gt;<pos:position pos:line="61" pos:column="38"/></operator><name pos:line="61" pos:column="35">next<pos:position pos:line="61" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="41">bb<pos:position pos:line="61" pos:column="43"/></name></expr></argument>)<pos:position pos:line="61" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="45"/></return>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>

    <while pos:line="64" pos:column="5">while <condition pos:line="64" pos:column="11">(<expr><name pos:line="64" pos:column="12">APR_SUCCESS<pos:position pos:line="64" pos:column="23"/></name> <operator pos:line="64" pos:column="24">==<pos:position pos:line="64" pos:column="26"/></operator> <name pos:line="64" pos:column="27">rv<pos:position pos:line="64" pos:column="29"/></name> <operator pos:line="64" pos:column="30">&amp;&amp;<pos:position pos:line="64" pos:column="40"/></operator> <operator pos:line="64" pos:column="33">!<pos:position pos:line="64" pos:column="34"/></operator><call><name pos:line="64" pos:column="34">APR_BRIGADE_EMPTY<pos:position pos:line="64" pos:column="51"/></name><argument_list pos:line="64" pos:column="51">(<argument><expr><name pos:line="64" pos:column="52">bb<pos:position pos:line="64" pos:column="54"/></name></expr></argument>)<pos:position pos:line="64" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="56"/></condition> <block pos:line="64" pos:column="57">{
        <decl_stmt><decl><type><specifier pos:line="65" pos:column="9">const<pos:position pos:line="65" pos:column="14"/></specifier> <name pos:line="65" pos:column="15">char<pos:position pos:line="65" pos:column="19"/></name> <modifier pos:line="65" pos:column="20">*<pos:position pos:line="65" pos:column="21"/></modifier></type><name pos:line="65" pos:column="21">data<pos:position pos:line="65" pos:column="25"/></name></decl>;<pos:position pos:line="65" pos:column="26"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="66" pos:column="9">apr_size_t<pos:position pos:line="66" pos:column="19"/></name></type> <name pos:line="66" pos:column="20">size<pos:position pos:line="66" pos:column="24"/></name></decl>;<pos:position pos:line="66" pos:column="25"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="67" pos:column="9">apr_size_t<pos:position pos:line="67" pos:column="19"/></name></type> <name pos:line="67" pos:column="20">tail<pos:position pos:line="67" pos:column="24"/></name></decl>;<pos:position pos:line="67" pos:column="25"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="68" pos:column="9">apr_size_t<pos:position pos:line="68" pos:column="19"/></name></type> <name pos:line="68" pos:column="20">len<pos:position pos:line="68" pos:column="23"/></name></decl>;<pos:position pos:line="68" pos:column="24"/></decl_stmt>
        <comment type="block" pos:line="69" pos:column="9">/* buffer big enough for 8000 encoded bytes (6000 raw bytes) and terminator */</comment>
        <decl_stmt><decl><type><name pos:line="70" pos:column="9">char<pos:position pos:line="70" pos:column="13"/></name></type> <name><name pos:line="70" pos:column="14">buffer<pos:position pos:line="70" pos:column="20"/></name><index pos:line="70" pos:column="20">[<expr><name pos:line="70" pos:column="21">APR_BUCKET_BUFF_SIZE<pos:position pos:line="70" pos:column="41"/></name> <operator pos:line="70" pos:column="42">+<pos:position pos:line="70" pos:column="43"/></operator> <literal type="number" pos:line="70" pos:column="44">1<pos:position pos:line="70" pos:column="45"/></literal></expr>]<pos:position pos:line="70" pos:column="46"/></index></name></decl>;<pos:position pos:line="70" pos:column="47"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="71" pos:column="9">char<pos:position pos:line="71" pos:column="13"/></name></type> <name><name pos:line="71" pos:column="14">encoded<pos:position pos:line="71" pos:column="21"/></name><index pos:line="71" pos:column="21">[<expr><operator pos:line="71" pos:column="22">(<pos:position pos:line="71" pos:column="23"/></operator><operator pos:line="71" pos:column="23">(<pos:position pos:line="71" pos:column="24"/></operator><sizeof pos:line="71" pos:column="24">sizeof<argument_list pos:line="71" pos:column="30">(<argument><expr><name><name pos:line="71" pos:column="31">ctx<pos:position pos:line="71" pos:column="34"/></name><operator pos:line="71" pos:column="34">-&gt;<pos:position pos:line="71" pos:column="39"/></operator><name pos:line="71" pos:column="36">overflow<pos:position pos:line="71" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="45"/></argument_list></sizeof><operator pos:line="71" pos:column="45">)<pos:position pos:line="71" pos:column="46"/></operator> <operator pos:line="71" pos:column="47">/<pos:position pos:line="71" pos:column="48"/></operator> <literal type="number" pos:line="71" pos:column="49">3<pos:position pos:line="71" pos:column="50"/></literal><operator pos:line="71" pos:column="50">)<pos:position pos:line="71" pos:column="51"/></operator> <operator pos:line="71" pos:column="52">*<pos:position pos:line="71" pos:column="53"/></operator> <literal type="number" pos:line="71" pos:column="54">4<pos:position pos:line="71" pos:column="55"/></literal> <operator pos:line="71" pos:column="56">+<pos:position pos:line="71" pos:column="57"/></operator> <literal type="number" pos:line="71" pos:column="58">1<pos:position pos:line="71" pos:column="59"/></literal></expr>]<pos:position pos:line="71" pos:column="60"/></index></name></decl>;<pos:position pos:line="71" pos:column="61"/></decl_stmt>

        <expr_stmt><expr><name pos:line="73" pos:column="9">e<pos:position pos:line="73" pos:column="10"/></name> <operator pos:line="73" pos:column="11">=<pos:position pos:line="73" pos:column="12"/></operator> <call><name pos:line="73" pos:column="13">APR_BRIGADE_FIRST<pos:position pos:line="73" pos:column="30"/></name><argument_list pos:line="73" pos:column="30">(<argument><expr><name pos:line="73" pos:column="31">bb<pos:position pos:line="73" pos:column="33"/></name></expr></argument>)<pos:position pos:line="73" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="35"/></expr_stmt>

        <comment type="block" pos:line="75" pos:column="9">/* EOS means we are done. */</comment>
        <if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><call><name pos:line="76" pos:column="13">APR_BUCKET_IS_EOS<pos:position pos:line="76" pos:column="30"/></name><argument_list pos:line="76" pos:column="30">(<argument><expr><name pos:line="76" pos:column="31">e<pos:position pos:line="76" pos:column="32"/></name></expr></argument>)<pos:position pos:line="76" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="34"/></condition><then pos:line="76" pos:column="34"> <block pos:line="76" pos:column="35">{

            <comment type="block" pos:line="78" pos:column="13">/* write away the tail */</comment>
            <if pos:line="79" pos:column="13">if <condition pos:line="79" pos:column="16">(<expr><name><name pos:line="79" pos:column="17">ctx<pos:position pos:line="79" pos:column="20"/></name><operator pos:line="79" pos:column="20">-&gt;<pos:position pos:line="79" pos:column="25"/></operator><name pos:line="79" pos:column="22">count<pos:position pos:line="79" pos:column="27"/></name></name></expr>)<pos:position pos:line="79" pos:column="28"/></condition><then pos:line="79" pos:column="28"> <block pos:line="79" pos:column="29">{
                <expr_stmt><expr><name pos:line="80" pos:column="17">len<pos:position pos:line="80" pos:column="20"/></name> <operator pos:line="80" pos:column="21">=<pos:position pos:line="80" pos:column="22"/></operator> <call><name pos:line="80" pos:column="23">apr_base64_encode_binary<pos:position pos:line="80" pos:column="47"/></name><argument_list pos:line="80" pos:column="47">(<argument><expr><name pos:line="80" pos:column="48">encoded<pos:position pos:line="80" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="57">ctx<pos:position pos:line="80" pos:column="60"/></name><operator pos:line="80" pos:column="60">-&gt;<pos:position pos:line="80" pos:column="65"/></operator><name pos:line="80" pos:column="62">overflow<pos:position pos:line="80" pos:column="70"/></name></name></expr></argument>,
                        <argument><expr><name><name pos:line="81" pos:column="25">ctx<pos:position pos:line="81" pos:column="28"/></name><operator pos:line="81" pos:column="28">-&gt;<pos:position pos:line="81" pos:column="33"/></operator><name pos:line="81" pos:column="30">count<pos:position pos:line="81" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="82" pos:column="17">apr_brigade_write<pos:position pos:line="82" pos:column="34"/></name><argument_list pos:line="82" pos:column="34">(<argument><expr><name><name pos:line="82" pos:column="35">ctx<pos:position pos:line="82" pos:column="38"/></name><operator pos:line="82" pos:column="38">-&gt;<pos:position pos:line="82" pos:column="43"/></operator><name pos:line="82" pos:column="40">bb<pos:position pos:line="82" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="44">NULL<pos:position pos:line="82" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="50">NULL<pos:position pos:line="82" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="56">encoded<pos:position pos:line="82" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="65">len<pos:position pos:line="82" pos:column="68"/></name> <operator pos:line="82" pos:column="69">-<pos:position pos:line="82" pos:column="70"/></operator> <literal type="number" pos:line="82" pos:column="71">1<pos:position pos:line="82" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="74"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="83" pos:column="17">ctx<pos:position pos:line="83" pos:column="20"/></name><operator pos:line="83" pos:column="20">-&gt;<pos:position pos:line="83" pos:column="25"/></operator><name pos:line="83" pos:column="22">count<pos:position pos:line="83" pos:column="27"/></name></name> <operator pos:line="83" pos:column="28">=<pos:position pos:line="83" pos:column="29"/></operator> <literal type="number" pos:line="83" pos:column="30">0<pos:position pos:line="83" pos:column="31"/></literal></expr>;<pos:position pos:line="83" pos:column="32"/></expr_stmt>
            }<pos:position pos:line="84" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="86" pos:column="13">/* pass the EOS across */</comment>
            <expr_stmt><expr><call><name pos:line="87" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="87" pos:column="30"/></name><argument_list pos:line="87" pos:column="30">(<argument><expr><name pos:line="87" pos:column="31">e<pos:position pos:line="87" pos:column="32"/></name></expr></argument>)<pos:position pos:line="87" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="88" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="88" pos:column="36"/></name><argument_list pos:line="88" pos:column="36">(<argument><expr><name><name pos:line="88" pos:column="37">ctx<pos:position pos:line="88" pos:column="40"/></name><operator pos:line="88" pos:column="40">-&gt;<pos:position pos:line="88" pos:column="45"/></operator><name pos:line="88" pos:column="42">bb<pos:position pos:line="88" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="46">e<pos:position pos:line="88" pos:column="47"/></name></expr></argument>)<pos:position pos:line="88" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="49"/></expr_stmt>

            <comment type="block" pos:line="90" pos:column="13">/* pass what we have down the chain */</comment>
            <expr_stmt><expr><call><name pos:line="91" pos:column="13">ap_remove_output_filter<pos:position pos:line="91" pos:column="36"/></name><argument_list pos:line="91" pos:column="36">(<argument><expr><name pos:line="91" pos:column="37">f<pos:position pos:line="91" pos:column="38"/></name></expr></argument>)<pos:position pos:line="91" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><name pos:line="92" pos:column="13">rv<pos:position pos:line="92" pos:column="15"/></name> <operator pos:line="92" pos:column="16">=<pos:position pos:line="92" pos:column="17"/></operator> <call><name pos:line="92" pos:column="18">ap_pass_brigade<pos:position pos:line="92" pos:column="33"/></name><argument_list pos:line="92" pos:column="33">(<argument><expr><name><name pos:line="92" pos:column="34">f<pos:position pos:line="92" pos:column="35"/></name><operator pos:line="92" pos:column="35">-&gt;<pos:position pos:line="92" pos:column="40"/></operator><name pos:line="92" pos:column="37">next<pos:position pos:line="92" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="43">ctx<pos:position pos:line="92" pos:column="46"/></name><operator pos:line="92" pos:column="46">-&gt;<pos:position pos:line="92" pos:column="51"/></operator><name pos:line="92" pos:column="48">bb<pos:position pos:line="92" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="52"/></expr_stmt>

            <comment type="block" pos:line="94" pos:column="13">/* pass any stray buckets after the EOS down the stack */</comment>
            <if pos:line="95" pos:column="13">if <condition pos:line="95" pos:column="16">(<expr><operator pos:line="95" pos:column="17">(<pos:position pos:line="95" pos:column="18"/></operator><name pos:line="95" pos:column="18">APR_SUCCESS<pos:position pos:line="95" pos:column="29"/></name> <operator pos:line="95" pos:column="30">==<pos:position pos:line="95" pos:column="32"/></operator> <name pos:line="95" pos:column="33">rv<pos:position pos:line="95" pos:column="35"/></name><operator pos:line="95" pos:column="35">)<pos:position pos:line="95" pos:column="36"/></operator> <operator pos:line="95" pos:column="37">&amp;&amp;<pos:position pos:line="95" pos:column="47"/></operator> <operator pos:line="95" pos:column="40">(<pos:position pos:line="95" pos:column="41"/></operator><operator pos:line="95" pos:column="41">!<pos:position pos:line="95" pos:column="42"/></operator><call><name pos:line="95" pos:column="42">APR_BRIGADE_EMPTY<pos:position pos:line="95" pos:column="59"/></name><argument_list pos:line="95" pos:column="59">(<argument><expr><name pos:line="95" pos:column="60">bb<pos:position pos:line="95" pos:column="62"/></name></expr></argument>)<pos:position pos:line="95" pos:column="63"/></argument_list></call><operator pos:line="95" pos:column="63">)<pos:position pos:line="95" pos:column="64"/></operator></expr>)<pos:position pos:line="95" pos:column="65"/></condition><then pos:line="95" pos:column="65"> <block pos:line="95" pos:column="66">{
               <expr_stmt><expr><name pos:line="96" pos:column="16">rv<pos:position pos:line="96" pos:column="18"/></name> <operator pos:line="96" pos:column="19">=<pos:position pos:line="96" pos:column="20"/></operator> <call><name pos:line="96" pos:column="21">ap_pass_brigade<pos:position pos:line="96" pos:column="36"/></name><argument_list pos:line="96" pos:column="36">(<argument><expr><name><name pos:line="96" pos:column="37">f<pos:position pos:line="96" pos:column="38"/></name><operator pos:line="96" pos:column="38">-&gt;<pos:position pos:line="96" pos:column="43"/></operator><name pos:line="96" pos:column="40">next<pos:position pos:line="96" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="46">bb<pos:position pos:line="96" pos:column="48"/></name></expr></argument>)<pos:position pos:line="96" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="50"/></expr_stmt>
            }<pos:position pos:line="97" pos:column="14"/></block></then></if>
            <continue pos:line="98" pos:column="13">continue;<pos:position pos:line="98" pos:column="22"/></continue>
        }<pos:position pos:line="99" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="101" pos:column="9">/* flush what we can, we can't flush the tail until EOS */</comment>
        <if pos:line="102" pos:column="9">if <condition pos:line="102" pos:column="12">(<expr><call><name pos:line="102" pos:column="13">APR_BUCKET_IS_FLUSH<pos:position pos:line="102" pos:column="32"/></name><argument_list pos:line="102" pos:column="32">(<argument><expr><name pos:line="102" pos:column="33">e<pos:position pos:line="102" pos:column="34"/></name></expr></argument>)<pos:position pos:line="102" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="102" pos:column="36"/></condition><then pos:line="102" pos:column="36"> <block pos:line="102" pos:column="37">{

            <comment type="block" pos:line="104" pos:column="13">/* pass the flush bucket across */</comment>
            <expr_stmt><expr><call><name pos:line="105" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="105" pos:column="30"/></name><argument_list pos:line="105" pos:column="30">(<argument><expr><name pos:line="105" pos:column="31">e<pos:position pos:line="105" pos:column="32"/></name></expr></argument>)<pos:position pos:line="105" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="106" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="106" pos:column="36"/></name><argument_list pos:line="106" pos:column="36">(<argument><expr><name><name pos:line="106" pos:column="37">ctx<pos:position pos:line="106" pos:column="40"/></name><operator pos:line="106" pos:column="40">-&gt;<pos:position pos:line="106" pos:column="45"/></operator><name pos:line="106" pos:column="42">bb<pos:position pos:line="106" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="46">e<pos:position pos:line="106" pos:column="47"/></name></expr></argument>)<pos:position pos:line="106" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="49"/></expr_stmt>

            <comment type="block" pos:line="108" pos:column="13">/* pass what we have down the chain */</comment>
            <expr_stmt><expr><name pos:line="109" pos:column="13">rv<pos:position pos:line="109" pos:column="15"/></name> <operator pos:line="109" pos:column="16">=<pos:position pos:line="109" pos:column="17"/></operator> <call><name pos:line="109" pos:column="18">ap_pass_brigade<pos:position pos:line="109" pos:column="33"/></name><argument_list pos:line="109" pos:column="33">(<argument><expr><name><name pos:line="109" pos:column="34">f<pos:position pos:line="109" pos:column="35"/></name><operator pos:line="109" pos:column="35">-&gt;<pos:position pos:line="109" pos:column="40"/></operator><name pos:line="109" pos:column="37">next<pos:position pos:line="109" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="109" pos:column="43">ctx<pos:position pos:line="109" pos:column="46"/></name><operator pos:line="109" pos:column="46">-&gt;<pos:position pos:line="109" pos:column="51"/></operator><name pos:line="109" pos:column="48">bb<pos:position pos:line="109" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="109" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="52"/></expr_stmt>
            <continue pos:line="110" pos:column="13">continue;<pos:position pos:line="110" pos:column="22"/></continue>
        }<pos:position pos:line="111" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="113" pos:column="9">/* metadata buckets are preserved as is */</comment>
        <if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">(<expr><call><name pos:line="114" pos:column="13">APR_BUCKET_IS_METADATA<pos:position pos:line="114" pos:column="35"/></name><argument_list pos:line="114" pos:column="35">(<argument><expr><name pos:line="114" pos:column="36">e<pos:position pos:line="114" pos:column="37"/></name></expr></argument>)<pos:position pos:line="114" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="114" pos:column="39"/></condition><then pos:line="114" pos:column="39"> <block pos:line="114" pos:column="40">{
            <comment type="block" pos:line="115" pos:column="13">/*
             * Remove meta data bucket from old brigade and insert into the
             * new.
             */</comment>
            <expr_stmt><expr><call><name pos:line="119" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="119" pos:column="30"/></name><argument_list pos:line="119" pos:column="30">(<argument><expr><name pos:line="119" pos:column="31">e<pos:position pos:line="119" pos:column="32"/></name></expr></argument>)<pos:position pos:line="119" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="120" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="120" pos:column="36"/></name><argument_list pos:line="120" pos:column="36">(<argument><expr><name><name pos:line="120" pos:column="37">ctx<pos:position pos:line="120" pos:column="40"/></name><operator pos:line="120" pos:column="40">-&gt;<pos:position pos:line="120" pos:column="45"/></operator><name pos:line="120" pos:column="42">bb<pos:position pos:line="120" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="46">e<pos:position pos:line="120" pos:column="47"/></name></expr></argument>)<pos:position pos:line="120" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="49"/></expr_stmt>
            <continue pos:line="121" pos:column="13">continue;<pos:position pos:line="121" pos:column="22"/></continue>
        }<pos:position pos:line="122" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="124" pos:column="9">/* make sure we don't read more than 6000 bytes at a time */</comment>
        <expr_stmt><expr><call><name pos:line="125" pos:column="9">apr_brigade_partition<pos:position pos:line="125" pos:column="30"/></name><argument_list pos:line="125" pos:column="30">(<argument><expr><name pos:line="125" pos:column="31">bb<pos:position pos:line="125" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="125" pos:column="35">(<pos:position pos:line="125" pos:column="36"/></operator><name pos:line="125" pos:column="36">APR_BUCKET_BUFF_SIZE<pos:position pos:line="125" pos:column="56"/></name> <operator pos:line="125" pos:column="57">/<pos:position pos:line="125" pos:column="58"/></operator> <literal type="number" pos:line="125" pos:column="59">4<pos:position pos:line="125" pos:column="60"/></literal> <operator pos:line="125" pos:column="61">*<pos:position pos:line="125" pos:column="62"/></operator> <literal type="number" pos:line="125" pos:column="63">3<pos:position pos:line="125" pos:column="64"/></literal><operator pos:line="125" pos:column="64">)<pos:position pos:line="125" pos:column="65"/></operator></expr></argument>, <argument><expr><operator pos:line="125" pos:column="67">&amp;<pos:position pos:line="125" pos:column="72"/></operator><name pos:line="125" pos:column="68">ee<pos:position pos:line="125" pos:column="70"/></name></expr></argument>)<pos:position pos:line="125" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="72"/></expr_stmt>

        <comment type="block" pos:line="127" pos:column="9">/* size will never be more than 6000 bytes */</comment>
        <if pos:line="128" pos:column="9">if <condition pos:line="128" pos:column="12">(<expr><name pos:line="128" pos:column="13">APR_SUCCESS<pos:position pos:line="128" pos:column="24"/></name> <operator pos:line="128" pos:column="25">==<pos:position pos:line="128" pos:column="27"/></operator> <operator pos:line="128" pos:column="28">(<pos:position pos:line="128" pos:column="29"/></operator><name pos:line="128" pos:column="29">rv<pos:position pos:line="128" pos:column="31"/></name> <operator pos:line="128" pos:column="32">=<pos:position pos:line="128" pos:column="33"/></operator> <call><name pos:line="128" pos:column="34">apr_bucket_read<pos:position pos:line="128" pos:column="49"/></name><argument_list pos:line="128" pos:column="49">(<argument><expr><name pos:line="128" pos:column="50">e<pos:position pos:line="128" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="128" pos:column="53">&amp;<pos:position pos:line="128" pos:column="58"/></operator><name pos:line="128" pos:column="54">data<pos:position pos:line="128" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="128" pos:column="60">&amp;<pos:position pos:line="128" pos:column="65"/></operator><name pos:line="128" pos:column="61">size<pos:position pos:line="128" pos:column="65"/></name></expr></argument>,
                <argument><expr><name pos:line="129" pos:column="17">APR_BLOCK_READ<pos:position pos:line="129" pos:column="31"/></name></expr></argument>)<pos:position pos:line="129" pos:column="32"/></argument_list></call><operator pos:line="129" pos:column="32">)<pos:position pos:line="129" pos:column="33"/></operator></expr>)<pos:position pos:line="129" pos:column="34"/></condition><then pos:line="129" pos:column="34"> <block pos:line="129" pos:column="35">{

            <comment type="block" pos:line="131" pos:column="13">/* fill up and write out our overflow buffer if partially used */</comment>
            <while pos:line="132" pos:column="13">while <condition pos:line="132" pos:column="19">(<expr><name pos:line="132" pos:column="20">size<pos:position pos:line="132" pos:column="24"/></name> <operator pos:line="132" pos:column="25">&amp;&amp;<pos:position pos:line="132" pos:column="35"/></operator> <name><name pos:line="132" pos:column="28">ctx<pos:position pos:line="132" pos:column="31"/></name><operator pos:line="132" pos:column="31">-&gt;<pos:position pos:line="132" pos:column="36"/></operator><name pos:line="132" pos:column="33">count<pos:position pos:line="132" pos:column="38"/></name></name> <operator pos:line="132" pos:column="39">&amp;&amp;<pos:position pos:line="132" pos:column="49"/></operator> <name><name pos:line="132" pos:column="42">ctx<pos:position pos:line="132" pos:column="45"/></name><operator pos:line="132" pos:column="45">-&gt;<pos:position pos:line="132" pos:column="50"/></operator><name pos:line="132" pos:column="47">count<pos:position pos:line="132" pos:column="52"/></name></name> <operator pos:line="132" pos:column="53">&lt;<pos:position pos:line="132" pos:column="57"/></operator> <sizeof pos:line="132" pos:column="55">sizeof<argument_list pos:line="132" pos:column="61">(<argument><expr><name><name pos:line="132" pos:column="62">ctx<pos:position pos:line="132" pos:column="65"/></name><operator pos:line="132" pos:column="65">-&gt;<pos:position pos:line="132" pos:column="70"/></operator><name pos:line="132" pos:column="67">overflow<pos:position pos:line="132" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="132" pos:column="76"/></argument_list></sizeof></expr>)<pos:position pos:line="132" pos:column="77"/></condition> <block pos:line="132" pos:column="78">{
                <expr_stmt><expr><name><name pos:line="133" pos:column="17">ctx<pos:position pos:line="133" pos:column="20"/></name><operator pos:line="133" pos:column="20">-&gt;<pos:position pos:line="133" pos:column="25"/></operator><name pos:line="133" pos:column="22">overflow<pos:position pos:line="133" pos:column="30"/></name><index pos:line="133" pos:column="30">[<expr><name><name pos:line="133" pos:column="31">ctx<pos:position pos:line="133" pos:column="34"/></name><operator pos:line="133" pos:column="34">-&gt;<pos:position pos:line="133" pos:column="39"/></operator><name pos:line="133" pos:column="36">count<pos:position pos:line="133" pos:column="41"/></name></name><operator pos:line="133" pos:column="41">++<pos:position pos:line="133" pos:column="43"/></operator></expr>]<pos:position pos:line="133" pos:column="44"/></index></name> <operator pos:line="133" pos:column="45">=<pos:position pos:line="133" pos:column="46"/></operator> <operator pos:line="133" pos:column="47">*<pos:position pos:line="133" pos:column="48"/></operator><name pos:line="133" pos:column="48">data<pos:position pos:line="133" pos:column="52"/></name><operator pos:line="133" pos:column="52">++<pos:position pos:line="133" pos:column="54"/></operator></expr>;<pos:position pos:line="133" pos:column="55"/></expr_stmt>
                <expr_stmt><expr><name pos:line="134" pos:column="17">size<pos:position pos:line="134" pos:column="21"/></name><operator pos:line="134" pos:column="21">--<pos:position pos:line="134" pos:column="23"/></operator></expr>;<pos:position pos:line="134" pos:column="24"/></expr_stmt>
            }<pos:position pos:line="135" pos:column="14"/></block></while>
            <if pos:line="136" pos:column="13">if <condition pos:line="136" pos:column="16">(<expr><name><name pos:line="136" pos:column="17">ctx<pos:position pos:line="136" pos:column="20"/></name><operator pos:line="136" pos:column="20">-&gt;<pos:position pos:line="136" pos:column="25"/></operator><name pos:line="136" pos:column="22">count<pos:position pos:line="136" pos:column="27"/></name></name> <operator pos:line="136" pos:column="28">==<pos:position pos:line="136" pos:column="30"/></operator> <sizeof pos:line="136" pos:column="31">sizeof<argument_list pos:line="136" pos:column="37">(<argument><expr><name><name pos:line="136" pos:column="38">ctx<pos:position pos:line="136" pos:column="41"/></name><operator pos:line="136" pos:column="41">-&gt;<pos:position pos:line="136" pos:column="46"/></operator><name pos:line="136" pos:column="43">overflow<pos:position pos:line="136" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="136" pos:column="52"/></argument_list></sizeof></expr>)<pos:position pos:line="136" pos:column="53"/></condition><then pos:line="136" pos:column="53"> <block pos:line="136" pos:column="54">{
                <expr_stmt><expr><name pos:line="137" pos:column="17">len<pos:position pos:line="137" pos:column="20"/></name> <operator pos:line="137" pos:column="21">=<pos:position pos:line="137" pos:column="22"/></operator> <call><name pos:line="137" pos:column="23">apr_base64_encode_binary<pos:position pos:line="137" pos:column="47"/></name><argument_list pos:line="137" pos:column="47">(<argument><expr><name pos:line="137" pos:column="48">encoded<pos:position pos:line="137" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="137" pos:column="57">ctx<pos:position pos:line="137" pos:column="60"/></name><operator pos:line="137" pos:column="60">-&gt;<pos:position pos:line="137" pos:column="65"/></operator><name pos:line="137" pos:column="62">overflow<pos:position pos:line="137" pos:column="70"/></name></name></expr></argument>,
                        <argument><expr><sizeof pos:line="138" pos:column="25">sizeof<argument_list pos:line="138" pos:column="31">(<argument><expr><name><name pos:line="138" pos:column="32">ctx<pos:position pos:line="138" pos:column="35"/></name><operator pos:line="138" pos:column="35">-&gt;<pos:position pos:line="138" pos:column="40"/></operator><name pos:line="138" pos:column="37">overflow<pos:position pos:line="138" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="138" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="138" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="48"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="139" pos:column="17">apr_brigade_write<pos:position pos:line="139" pos:column="34"/></name><argument_list pos:line="139" pos:column="34">(<argument><expr><name><name pos:line="139" pos:column="35">ctx<pos:position pos:line="139" pos:column="38"/></name><operator pos:line="139" pos:column="38">-&gt;<pos:position pos:line="139" pos:column="43"/></operator><name pos:line="139" pos:column="40">bb<pos:position pos:line="139" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="44">NULL<pos:position pos:line="139" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="50">NULL<pos:position pos:line="139" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="56">encoded<pos:position pos:line="139" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="65">len<pos:position pos:line="139" pos:column="68"/></name> <operator pos:line="139" pos:column="69">-<pos:position pos:line="139" pos:column="70"/></operator> <literal type="number" pos:line="139" pos:column="71">1<pos:position pos:line="139" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="139" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="74"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="140" pos:column="17">ctx<pos:position pos:line="140" pos:column="20"/></name><operator pos:line="140" pos:column="20">-&gt;<pos:position pos:line="140" pos:column="25"/></operator><name pos:line="140" pos:column="22">count<pos:position pos:line="140" pos:column="27"/></name></name> <operator pos:line="140" pos:column="28">=<pos:position pos:line="140" pos:column="29"/></operator> <literal type="number" pos:line="140" pos:column="30">0<pos:position pos:line="140" pos:column="31"/></literal></expr>;<pos:position pos:line="140" pos:column="32"/></expr_stmt>
            }<pos:position pos:line="141" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="143" pos:column="13">/* write the main base64 chunk */</comment>
            <expr_stmt><expr><name pos:line="144" pos:column="13">tail<pos:position pos:line="144" pos:column="17"/></name> <operator pos:line="144" pos:column="18">=<pos:position pos:line="144" pos:column="19"/></operator> <name pos:line="144" pos:column="20">size<pos:position pos:line="144" pos:column="24"/></name> <operator pos:line="144" pos:column="25">%<pos:position pos:line="144" pos:column="26"/></operator> <sizeof pos:line="144" pos:column="27">sizeof<argument_list pos:line="144" pos:column="33">(<argument><expr><name><name pos:line="144" pos:column="34">ctx<pos:position pos:line="144" pos:column="37"/></name><operator pos:line="144" pos:column="37">-&gt;<pos:position pos:line="144" pos:column="42"/></operator><name pos:line="144" pos:column="39">overflow<pos:position pos:line="144" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="144" pos:column="48"/></argument_list></sizeof></expr>;<pos:position pos:line="144" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><name pos:line="145" pos:column="13">size<pos:position pos:line="145" pos:column="17"/></name> <operator pos:line="145" pos:column="18">-=<pos:position pos:line="145" pos:column="20"/></operator> <name pos:line="145" pos:column="21">tail<pos:position pos:line="145" pos:column="25"/></name></expr>;<pos:position pos:line="145" pos:column="26"/></expr_stmt>
            <if pos:line="146" pos:column="13">if <condition pos:line="146" pos:column="16">(<expr><name pos:line="146" pos:column="17">size<pos:position pos:line="146" pos:column="21"/></name></expr>)<pos:position pos:line="146" pos:column="22"/></condition><then pos:line="146" pos:column="22"> <block pos:line="146" pos:column="23">{
                <expr_stmt><expr><name pos:line="147" pos:column="17">len<pos:position pos:line="147" pos:column="20"/></name> <operator pos:line="147" pos:column="21">=<pos:position pos:line="147" pos:column="22"/></operator> <call><name pos:line="147" pos:column="23">apr_base64_encode_binary<pos:position pos:line="147" pos:column="47"/></name><argument_list pos:line="147" pos:column="47">(<argument><expr><name pos:line="147" pos:column="48">buffer<pos:position pos:line="147" pos:column="54"/></name></expr></argument>,
                        <argument><expr><operator pos:line="148" pos:column="25">(<pos:position pos:line="148" pos:column="26"/></operator><specifier pos:line="148" pos:column="26">const<pos:position pos:line="148" pos:column="31"/></specifier> <name pos:line="148" pos:column="32">unsigned<pos:position pos:line="148" pos:column="40"/></name> <name pos:line="148" pos:column="41">char<pos:position pos:line="148" pos:column="45"/></name> <operator pos:line="148" pos:column="46">*<pos:position pos:line="148" pos:column="47"/></operator><operator pos:line="148" pos:column="47">)<pos:position pos:line="148" pos:column="48"/></operator> <name pos:line="148" pos:column="49">data<pos:position pos:line="148" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="55">size<pos:position pos:line="148" pos:column="59"/></name></expr></argument>)<pos:position pos:line="148" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="61"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="149" pos:column="17">apr_brigade_write<pos:position pos:line="149" pos:column="34"/></name><argument_list pos:line="149" pos:column="34">(<argument><expr><name><name pos:line="149" pos:column="35">ctx<pos:position pos:line="149" pos:column="38"/></name><operator pos:line="149" pos:column="38">-&gt;<pos:position pos:line="149" pos:column="43"/></operator><name pos:line="149" pos:column="40">bb<pos:position pos:line="149" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="44">NULL<pos:position pos:line="149" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="50">NULL<pos:position pos:line="149" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="56">buffer<pos:position pos:line="149" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="64">len<pos:position pos:line="149" pos:column="67"/></name> <operator pos:line="149" pos:column="68">-<pos:position pos:line="149" pos:column="69"/></operator> <literal type="number" pos:line="149" pos:column="70">1<pos:position pos:line="149" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="149" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="73"/></expr_stmt>
            }<pos:position pos:line="150" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="152" pos:column="13">/* save away any tail in the overflow buffer */</comment>
            <if pos:line="153" pos:column="13">if <condition pos:line="153" pos:column="16">(<expr><name pos:line="153" pos:column="17">tail<pos:position pos:line="153" pos:column="21"/></name></expr>)<pos:position pos:line="153" pos:column="22"/></condition><then pos:line="153" pos:column="22"> <block pos:line="153" pos:column="23">{
                <expr_stmt><expr><call><name pos:line="154" pos:column="17">memcpy<pos:position pos:line="154" pos:column="23"/></name><argument_list pos:line="154" pos:column="23">(<argument><expr><name><name pos:line="154" pos:column="24">ctx<pos:position pos:line="154" pos:column="27"/></name><operator pos:line="154" pos:column="27">-&gt;<pos:position pos:line="154" pos:column="32"/></operator><name pos:line="154" pos:column="29">overflow<pos:position pos:line="154" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="39">data<pos:position pos:line="154" pos:column="43"/></name> <operator pos:line="154" pos:column="44">+<pos:position pos:line="154" pos:column="45"/></operator> <name pos:line="154" pos:column="46">size<pos:position pos:line="154" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="52">tail<pos:position pos:line="154" pos:column="56"/></name></expr></argument>)<pos:position pos:line="154" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="58"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="155" pos:column="17">ctx<pos:position pos:line="155" pos:column="20"/></name><operator pos:line="155" pos:column="20">-&gt;<pos:position pos:line="155" pos:column="25"/></operator><name pos:line="155" pos:column="22">count<pos:position pos:line="155" pos:column="27"/></name></name> <operator pos:line="155" pos:column="28">+=<pos:position pos:line="155" pos:column="30"/></operator> <name pos:line="155" pos:column="31">tail<pos:position pos:line="155" pos:column="35"/></name></expr>;<pos:position pos:line="155" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="156" pos:column="14"/></block></then></if>

            <expr_stmt><expr><call><name pos:line="158" pos:column="13">apr_bucket_delete<pos:position pos:line="158" pos:column="30"/></name><argument_list pos:line="158" pos:column="30">(<argument><expr><name pos:line="158" pos:column="31">e<pos:position pos:line="158" pos:column="32"/></name></expr></argument>)<pos:position pos:line="158" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="34"/></expr_stmt>

            <comment type="block" pos:line="160" pos:column="13">/* pass what we have down the chain */</comment>
            <expr_stmt><expr><name pos:line="161" pos:column="13">rv<pos:position pos:line="161" pos:column="15"/></name> <operator pos:line="161" pos:column="16">=<pos:position pos:line="161" pos:column="17"/></operator> <call><name pos:line="161" pos:column="18">ap_pass_brigade<pos:position pos:line="161" pos:column="33"/></name><argument_list pos:line="161" pos:column="33">(<argument><expr><name><name pos:line="161" pos:column="34">f<pos:position pos:line="161" pos:column="35"/></name><operator pos:line="161" pos:column="35">-&gt;<pos:position pos:line="161" pos:column="40"/></operator><name pos:line="161" pos:column="37">next<pos:position pos:line="161" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="161" pos:column="43">ctx<pos:position pos:line="161" pos:column="46"/></name><operator pos:line="161" pos:column="46">-&gt;<pos:position pos:line="161" pos:column="51"/></operator><name pos:line="161" pos:column="48">bb<pos:position pos:line="161" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="161" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="52"/></expr_stmt>
            <if pos:line="162" pos:column="13">if <condition pos:line="162" pos:column="16">(<expr><name pos:line="162" pos:column="17">rv<pos:position pos:line="162" pos:column="19"/></name></expr>)<pos:position pos:line="162" pos:column="20"/></condition><then pos:line="162" pos:column="20"> <block pos:line="162" pos:column="21">{
                <comment type="block" pos:line="163" pos:column="17">/* should break out of the loop, since our write to the client
                 * failed in some way. */</comment>
                <continue pos:line="165" pos:column="17">continue;<pos:position pos:line="165" pos:column="26"/></continue>
            }<pos:position pos:line="166" pos:column="14"/></block></then></if>

        }<pos:position pos:line="168" pos:column="10"/></block></then></if>

    }<pos:position pos:line="170" pos:column="6"/></block></while>

    <return pos:line="172" pos:column="5">return <expr><name pos:line="172" pos:column="12">rv<pos:position pos:line="172" pos:column="14"/></name></expr>;<pos:position pos:line="172" pos:column="15"/></return>

}<pos:position pos:line="174" pos:column="2"/></block></function></unit>
