<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2532_httpd-2.2.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">ap_queue_info_wait_for_idler<pos:position pos:line="1" pos:column="42"/></name><parameter_list pos:line="1" pos:column="42">(<parameter><decl><type><name pos:line="1" pos:column="43">fd_queue_info_t<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type> <name pos:line="1" pos:column="61">queue_info<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_status_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">rv<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">prev_idlers<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* Atomically decrement the idle worker count, saving the old value */</comment>
    <expr_stmt><expr><name pos:line="7" pos:column="5">prev_idlers<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">=<pos:position pos:line="7" pos:column="18"/></operator> <call><name pos:line="7" pos:column="19">apr_atomic_add32<pos:position pos:line="7" pos:column="35"/></name><argument_list pos:line="7" pos:column="35">(<argument><expr><operator pos:line="7" pos:column="36">&amp;<pos:position pos:line="7" pos:column="41"/></operator><operator pos:line="7" pos:column="37">(<pos:position pos:line="7" pos:column="38"/></operator><name><name pos:line="7" pos:column="38">queue_info<pos:position pos:line="7" pos:column="48"/></name><operator pos:line="7" pos:column="48">-&gt;<pos:position pos:line="7" pos:column="53"/></operator><name pos:line="7" pos:column="50">idlers<pos:position pos:line="7" pos:column="56"/></name></name><operator pos:line="7" pos:column="56">)<pos:position pos:line="7" pos:column="57"/></operator></expr></argument>, <argument><expr><operator pos:line="7" pos:column="59">-<pos:position pos:line="7" pos:column="60"/></operator><literal type="number" pos:line="7" pos:column="60">1<pos:position pos:line="7" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="63"/></expr_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* Block if there weren't any idle workers */</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">prev_idlers<pos:position pos:line="10" pos:column="20"/></name> <operator pos:line="10" pos:column="21">&lt;=<pos:position pos:line="10" pos:column="26"/></operator> <literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr>)<pos:position pos:line="10" pos:column="26"/></condition><then pos:line="10" pos:column="26"> <block pos:line="10" pos:column="27">{
        <expr_stmt><expr><name pos:line="11" pos:column="9">rv<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">apr_thread_mutex_lock<pos:position pos:line="11" pos:column="35"/></name><argument_list pos:line="11" pos:column="35">(<argument><expr><name><name pos:line="11" pos:column="36">queue_info<pos:position pos:line="11" pos:column="46"/></name><operator pos:line="11" pos:column="46">-&gt;<pos:position pos:line="11" pos:column="51"/></operator><name pos:line="11" pos:column="48">idlers_mutex<pos:position pos:line="11" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="62"/></expr_stmt>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">rv<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">!=<pos:position pos:line="12" pos:column="18"/></operator> <name pos:line="12" pos:column="19">APR_SUCCESS<pos:position pos:line="12" pos:column="30"/></name></expr>)<pos:position pos:line="12" pos:column="31"/></condition><then pos:line="12" pos:column="31"> <block pos:line="12" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">AP_DEBUG_ASSERT<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><literal type="number" pos:line="13" pos:column="29">0<pos:position pos:line="13" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">apr_atomic_inc32<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><operator pos:line="14" pos:column="30">&amp;<pos:position pos:line="14" pos:column="35"/></operator><operator pos:line="14" pos:column="31">(<pos:position pos:line="14" pos:column="32"/></operator><name><name pos:line="14" pos:column="32">queue_info<pos:position pos:line="14" pos:column="42"/></name><operator pos:line="14" pos:column="42">-&gt;<pos:position pos:line="14" pos:column="47"/></operator><name pos:line="14" pos:column="44">idlers<pos:position pos:line="14" pos:column="50"/></name></name><operator pos:line="14" pos:column="50">)<pos:position pos:line="14" pos:column="51"/></operator></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt>    <comment type="block" pos:line="14" pos:column="57">/* back out dec */</comment>
            <return pos:line="15" pos:column="13">return <expr><name pos:line="15" pos:column="20">rv<pos:position pos:line="15" pos:column="22"/></name></expr>;<pos:position pos:line="15" pos:column="23"/></return>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="17" pos:column="9">/* Re-check the idle worker count to guard against a
         * race condition.  Now that we're in the mutex-protected
         * region, one of two things may have happened:
         *   - If the idle worker count is still negative, the
         *     workers are all still busy, so it's safe to
         *     block on a condition variable.
         *   - If the idle worker count is non-negative, then a
         *     worker has become idle since the first check
         *     of queue_info-&gt;idlers above.  It's possible
         *     that the worker has also signaled the condition
         *     variable--and if so, the listener missed it
         *     because it wasn't yet blocked on the condition
         *     variable.  But if the idle worker count is
         *     now non-negative, it's safe for this function to
         *     return immediately.
         *
         *     A negative value in queue_info-&gt;idlers tells how many
         *     threads are waiting on an idle worker.
         */</comment>
        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name><name pos:line="36" pos:column="13">queue_info<pos:position pos:line="36" pos:column="23"/></name><operator pos:line="36" pos:column="23">-&gt;<pos:position pos:line="36" pos:column="28"/></operator><name pos:line="36" pos:column="25">idlers<pos:position pos:line="36" pos:column="31"/></name></name> <operator pos:line="36" pos:column="32">&lt;<pos:position pos:line="36" pos:column="36"/></operator> <literal type="number" pos:line="36" pos:column="34">0<pos:position pos:line="36" pos:column="35"/></literal></expr>)<pos:position pos:line="36" pos:column="36"/></condition><then pos:line="36" pos:column="36"> <block pos:line="36" pos:column="37">{
            <expr_stmt><expr><name pos:line="37" pos:column="13">rv<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <call><name pos:line="37" pos:column="18">apr_thread_cond_wait<pos:position pos:line="37" pos:column="38"/></name><argument_list pos:line="37" pos:column="38">(<argument><expr><name><name pos:line="37" pos:column="39">queue_info<pos:position pos:line="37" pos:column="49"/></name><operator pos:line="37" pos:column="49">-&gt;<pos:position pos:line="37" pos:column="54"/></operator><name pos:line="37" pos:column="51">wait_for_idler<pos:position pos:line="37" pos:column="65"/></name></name></expr></argument>,
                                      <argument><expr><name><name pos:line="38" pos:column="39">queue_info<pos:position pos:line="38" pos:column="49"/></name><operator pos:line="38" pos:column="49">-&gt;<pos:position pos:line="38" pos:column="54"/></operator><name pos:line="38" pos:column="51">idlers_mutex<pos:position pos:line="38" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="65"/></expr_stmt>
            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><name pos:line="39" pos:column="17">rv<pos:position pos:line="39" pos:column="19"/></name> <operator pos:line="39" pos:column="20">!=<pos:position pos:line="39" pos:column="22"/></operator> <name pos:line="39" pos:column="23">APR_SUCCESS<pos:position pos:line="39" pos:column="34"/></name></expr>)<pos:position pos:line="39" pos:column="35"/></condition><then pos:line="39" pos:column="35"> <block pos:line="39" pos:column="36">{
                <decl_stmt><decl><type><name pos:line="40" pos:column="17">apr_status_t<pos:position pos:line="40" pos:column="29"/></name></type> <name pos:line="40" pos:column="30">rv2<pos:position pos:line="40" pos:column="33"/></name></decl>;<pos:position pos:line="40" pos:column="34"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="41" pos:column="17">AP_DEBUG_ASSERT<pos:position pos:line="41" pos:column="32"/></name><argument_list pos:line="41" pos:column="32">(<argument><expr><literal type="number" pos:line="41" pos:column="33">0<pos:position pos:line="41" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="36"/></expr_stmt>
                <expr_stmt><expr><name pos:line="42" pos:column="17">rv2<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">=<pos:position pos:line="42" pos:column="22"/></operator> <call><name pos:line="42" pos:column="23">apr_thread_mutex_unlock<pos:position pos:line="42" pos:column="46"/></name><argument_list pos:line="42" pos:column="46">(<argument><expr><name><name pos:line="42" pos:column="47">queue_info<pos:position pos:line="42" pos:column="57"/></name><operator pos:line="42" pos:column="57">-&gt;<pos:position pos:line="42" pos:column="62"/></operator><name pos:line="42" pos:column="59">idlers_mutex<pos:position pos:line="42" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="73"/></expr_stmt>
                <if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">rv2<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">!=<pos:position pos:line="43" pos:column="27"/></operator> <name pos:line="43" pos:column="28">APR_SUCCESS<pos:position pos:line="43" pos:column="39"/></name></expr>)<pos:position pos:line="43" pos:column="40"/></condition><then pos:line="43" pos:column="40"> <block pos:line="43" pos:column="41">{
                    <return pos:line="44" pos:column="21">return <expr><name pos:line="44" pos:column="28">rv2<pos:position pos:line="44" pos:column="31"/></name></expr>;<pos:position pos:line="44" pos:column="32"/></return>
                }<pos:position pos:line="45" pos:column="18"/></block></then></if>
                <return pos:line="46" pos:column="17">return <expr><name pos:line="46" pos:column="24">rv<pos:position pos:line="46" pos:column="26"/></name></expr>;<pos:position pos:line="46" pos:column="27"/></return>
            }<pos:position pos:line="47" pos:column="14"/></block></then></if>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="49" pos:column="9">rv<pos:position pos:line="49" pos:column="11"/></name> <operator pos:line="49" pos:column="12">=<pos:position pos:line="49" pos:column="13"/></operator> <call><name pos:line="49" pos:column="14">apr_thread_mutex_unlock<pos:position pos:line="49" pos:column="37"/></name><argument_list pos:line="49" pos:column="37">(<argument><expr><name><name pos:line="49" pos:column="38">queue_info<pos:position pos:line="49" pos:column="48"/></name><operator pos:line="49" pos:column="48">-&gt;<pos:position pos:line="49" pos:column="53"/></operator><name pos:line="49" pos:column="50">idlers_mutex<pos:position pos:line="49" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="64"/></expr_stmt>
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">rv<pos:position pos:line="50" pos:column="15"/></name> <operator pos:line="50" pos:column="16">!=<pos:position pos:line="50" pos:column="18"/></operator> <name pos:line="50" pos:column="19">APR_SUCCESS<pos:position pos:line="50" pos:column="30"/></name></expr>)<pos:position pos:line="50" pos:column="31"/></condition><then pos:line="50" pos:column="31"> <block pos:line="50" pos:column="32">{
            <return pos:line="51" pos:column="13">return <expr><name pos:line="51" pos:column="20">rv<pos:position pos:line="51" pos:column="22"/></name></expr>;<pos:position pos:line="51" pos:column="23"/></return>
        }<pos:position pos:line="52" pos:column="10"/></block></then></if>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>

    <if pos:line="55" pos:column="5">if <condition pos:line="55" pos:column="8">(<expr><name><name pos:line="55" pos:column="9">queue_info<pos:position pos:line="55" pos:column="19"/></name><operator pos:line="55" pos:column="19">-&gt;<pos:position pos:line="55" pos:column="24"/></operator><name pos:line="55" pos:column="21">terminated<pos:position pos:line="55" pos:column="31"/></name></name></expr>)<pos:position pos:line="55" pos:column="32"/></condition><then pos:line="55" pos:column="32"> <block pos:line="55" pos:column="33">{
        <return pos:line="56" pos:column="9">return <expr><name pos:line="56" pos:column="16">APR_EOF<pos:position pos:line="56" pos:column="23"/></name></expr>;<pos:position pos:line="56" pos:column="24"/></return>
    }<pos:position pos:line="57" pos:column="6"/></block></then>
    <else pos:line="58" pos:column="5">else <block pos:line="58" pos:column="10">{
        <return pos:line="59" pos:column="9">return <expr><name pos:line="59" pos:column="16">APR_SUCCESS<pos:position pos:line="59" pos:column="27"/></name></expr>;<pos:position pos:line="59" pos:column="28"/></return>
    }<pos:position pos:line="60" pos:column="6"/></block></else></if>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
