<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2766_httpd-2.4.20.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">proxy_html_filter<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">ap_filter_t<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">f<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">apr_bucket_brigade<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">bb<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_bucket<pos:position pos:line="3" pos:column="15"/></name><modifier pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></modifier></type> <name pos:line="3" pos:column="17">b<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">meta<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">m<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><name pos:line="4" pos:column="15">NULL<pos:position pos:line="4" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">xmlCharEncoding<pos:position pos:line="5" pos:column="20"/></name></type> <name pos:line="5" pos:column="21">enc<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">buf<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><literal type="number" pos:line="6" pos:column="23">0<pos:position pos:line="6" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">bytes<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
<cpp:ifndef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifndef<pos:position pos:line="8" pos:column="8"/></cpp:directive> <name pos:line="8" pos:column="9">USE_OLD_LIBXML2<pos:position pos:line="8" pos:column="24"/></name></cpp:ifndef>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">xmlopts<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><name pos:line="9" pos:column="19">XML_PARSE_RECOVER<pos:position pos:line="9" pos:column="36"/></name> <operator pos:line="9" pos:column="37">|<pos:position pos:line="9" pos:column="38"/></operator> <name pos:line="9" pos:column="39">XML_PARSE_NONET<pos:position pos:line="9" pos:column="54"/></name> <operator pos:line="9" pos:column="55">|<pos:position pos:line="9" pos:column="56"/></operator>
                  <name pos:line="10" pos:column="19">XML_PARSE_NOBLANKS<pos:position pos:line="10" pos:column="37"/></name> <operator pos:line="10" pos:column="38">|<pos:position pos:line="10" pos:column="39"/></operator> <name pos:line="10" pos:column="40">XML_PARSE_NOERROR<pos:position pos:line="10" pos:column="57"/></name> <operator pos:line="10" pos:column="58">|<pos:position pos:line="10" pos:column="59"/></operator> <name pos:line="10" pos:column="60">XML_PARSE_NOWARNING<pos:position pos:line="10" pos:column="79"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="80"/></decl_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">saxctxt<pos:position pos:line="13" pos:column="12"/></name> <modifier pos:line="13" pos:column="13">*<pos:position pos:line="13" pos:column="14"/></modifier></type><name pos:line="13" pos:column="14">ctxt<pos:position pos:line="13" pos:column="18"/></name> <init pos:line="13" pos:column="19">= <expr><call><name pos:line="13" pos:column="21">check_filter_init<pos:position pos:line="13" pos:column="38"/></name><argument_list pos:line="13" pos:column="38">(<argument><expr><name pos:line="13" pos:column="39">f<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="42"/></decl_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">ctxt<pos:position pos:line="14" pos:column="14"/></name></expr>)<pos:position pos:line="14" pos:column="15"/></condition><then pos:line="14" pos:column="15">
        <block type="pseudo"><return pos:line="15" pos:column="9">return <expr><call><name pos:line="15" pos:column="16">ap_pass_brigade<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><name><name pos:line="15" pos:column="32">f<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">-&gt;<pos:position pos:line="15" pos:column="38"/></operator><name pos:line="15" pos:column="35">next<pos:position pos:line="15" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="41">bb<pos:position pos:line="15" pos:column="43"/></name></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="45"/></return></block></then></if>
    <for pos:line="16" pos:column="5">for <control pos:line="16" pos:column="9">(<init><expr><name pos:line="16" pos:column="10">b<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <call><name pos:line="16" pos:column="14">APR_BRIGADE_FIRST<pos:position pos:line="16" pos:column="31"/></name><argument_list pos:line="16" pos:column="31">(<argument><expr><name pos:line="16" pos:column="32">bb<pos:position pos:line="16" pos:column="34"/></name></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></init>
         <condition><expr><name pos:line="17" pos:column="10">b<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">!=<pos:position pos:line="17" pos:column="14"/></operator> <call><name pos:line="17" pos:column="15">APR_BRIGADE_SENTINEL<pos:position pos:line="17" pos:column="35"/></name><argument_list pos:line="17" pos:column="35">(<argument><expr><name pos:line="17" pos:column="36">bb<pos:position pos:line="17" pos:column="38"/></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="40"/></condition>
         <incr><expr><name pos:line="18" pos:column="10">b<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <call><name pos:line="18" pos:column="14">APR_BUCKET_NEXT<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">b<pos:position pos:line="18" pos:column="31"/></name></expr></argument>)<pos:position pos:line="18" pos:column="32"/></argument_list></call></expr></incr>)<pos:position pos:line="18" pos:column="33"/></control> <block pos:line="18" pos:column="34">{
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name pos:line="19" pos:column="13">APR_BUCKET_IS_METADATA<pos:position pos:line="19" pos:column="35"/></name><argument_list pos:line="19" pos:column="35">(<argument><expr><name pos:line="19" pos:column="36">b<pos:position pos:line="19" pos:column="37"/></name></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="39"/></condition><then pos:line="19" pos:column="39"> <block pos:line="19" pos:column="40">{
            <if pos:line="20" pos:column="13">if <condition pos:line="20" pos:column="16">(<expr><call><name pos:line="20" pos:column="17">APR_BUCKET_IS_EOS<pos:position pos:line="20" pos:column="34"/></name><argument_list pos:line="20" pos:column="34">(<argument><expr><name pos:line="20" pos:column="35">b<pos:position pos:line="20" pos:column="36"/></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="38"/></condition><then pos:line="20" pos:column="38"> <block pos:line="20" pos:column="39">{
                <if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name><name pos:line="21" pos:column="21">ctxt<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">-&gt;<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="27">parser<pos:position pos:line="21" pos:column="33"/></name></name> <operator pos:line="21" pos:column="34">!=<pos:position pos:line="21" pos:column="36"/></operator> <name pos:line="21" pos:column="37">NULL<pos:position pos:line="21" pos:column="41"/></name></expr>)<pos:position pos:line="21" pos:column="42"/></condition><then pos:line="21" pos:column="42"> <block pos:line="21" pos:column="43">{
                    <expr_stmt><expr><call><name pos:line="22" pos:column="21">consume_buffer<pos:position pos:line="22" pos:column="35"/></name><argument_list pos:line="22" pos:column="35">(<argument><expr><name pos:line="22" pos:column="36">ctxt<pos:position pos:line="22" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="42">buf<pos:position pos:line="22" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="47">0<pos:position pos:line="22" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="50">1<pos:position pos:line="22" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="53"/></expr_stmt>
                }<pos:position pos:line="23" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="24" pos:column="17">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="24" pos:column="40"/></name><argument_list pos:line="24" pos:column="40">(<argument><expr><name><name pos:line="24" pos:column="41">ctxt<pos:position pos:line="24" pos:column="45"/></name><operator pos:line="24" pos:column="45">-&gt;<pos:position pos:line="24" pos:column="50"/></operator><name pos:line="24" pos:column="47">bb<pos:position pos:line="24" pos:column="49"/></name></name></expr></argument>,
                <argument><expr><call><name pos:line="25" pos:column="17">apr_bucket_eos_create<pos:position pos:line="25" pos:column="38"/></name><argument_list pos:line="25" pos:column="38">(<argument><expr><name><name pos:line="25" pos:column="39">ctxt<pos:position pos:line="25" pos:column="43"/></name><operator pos:line="25" pos:column="43">-&gt;<pos:position pos:line="25" pos:column="48"/></operator><name pos:line="25" pos:column="45">bb<pos:position pos:line="25" pos:column="47"/></name><operator pos:line="25" pos:column="47">-&gt;<pos:position pos:line="25" pos:column="52"/></operator><name pos:line="25" pos:column="49">bucket_alloc<pos:position pos:line="25" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="64"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="26" pos:column="17">ap_pass_brigade<pos:position pos:line="26" pos:column="32"/></name><argument_list pos:line="26" pos:column="32">(<argument><expr><name><name pos:line="26" pos:column="33">ctxt<pos:position pos:line="26" pos:column="37"/></name><operator pos:line="26" pos:column="37">-&gt;<pos:position pos:line="26" pos:column="42"/></operator><name pos:line="26" pos:column="39">f<pos:position pos:line="26" pos:column="40"/></name><operator pos:line="26" pos:column="40">-&gt;<pos:position pos:line="26" pos:column="45"/></operator><name pos:line="26" pos:column="42">next<pos:position pos:line="26" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="48">ctxt<pos:position pos:line="26" pos:column="52"/></name><operator pos:line="26" pos:column="52">-&gt;<pos:position pos:line="26" pos:column="57"/></operator><name pos:line="26" pos:column="54">bb<pos:position pos:line="26" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="58"/></expr_stmt>
            }<pos:position pos:line="27" pos:column="14"/></block></then>
            <elseif pos:line="28" pos:column="13">else <if pos:line="28" pos:column="18">if <condition pos:line="28" pos:column="21">(<expr><call><name pos:line="28" pos:column="22">APR_BUCKET_IS_FLUSH<pos:position pos:line="28" pos:column="41"/></name><argument_list pos:line="28" pos:column="41">(<argument><expr><name pos:line="28" pos:column="42">b<pos:position pos:line="28" pos:column="43"/></name></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="45"/></condition><then pos:line="28" pos:column="45"> <block pos:line="28" pos:column="46">{
                <comment type="block" pos:line="29" pos:column="17">/* pass on flush, except at start where it would cause
                 * headers to be sent before doc sniffing
                 */</comment>
                <if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name><name pos:line="32" pos:column="21">ctxt<pos:position pos:line="32" pos:column="25"/></name><operator pos:line="32" pos:column="25">-&gt;<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="27">parser<pos:position pos:line="32" pos:column="33"/></name></name> <operator pos:line="32" pos:column="34">!=<pos:position pos:line="32" pos:column="36"/></operator> <name pos:line="32" pos:column="37">NULL<pos:position pos:line="32" pos:column="41"/></name></expr>)<pos:position pos:line="32" pos:column="42"/></condition><then pos:line="32" pos:column="42"> <block pos:line="32" pos:column="43">{
                    <expr_stmt><expr><call><name pos:line="33" pos:column="21">ap_fflush<pos:position pos:line="33" pos:column="30"/></name><argument_list pos:line="33" pos:column="30">(<argument><expr><name><name pos:line="33" pos:column="31">ctxt<pos:position pos:line="33" pos:column="35"/></name><operator pos:line="33" pos:column="35">-&gt;<pos:position pos:line="33" pos:column="40"/></operator><name pos:line="33" pos:column="37">f<pos:position pos:line="33" pos:column="38"/></name><operator pos:line="33" pos:column="38">-&gt;<pos:position pos:line="33" pos:column="43"/></operator><name pos:line="33" pos:column="40">next<pos:position pos:line="33" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="46">ctxt<pos:position pos:line="33" pos:column="50"/></name><operator pos:line="33" pos:column="50">-&gt;<pos:position pos:line="33" pos:column="55"/></operator><name pos:line="33" pos:column="52">bb<pos:position pos:line="33" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="56"/></expr_stmt>
                }<pos:position pos:line="34" pos:column="18"/></block></then></if>
            }<pos:position pos:line="35" pos:column="14"/></block></then></if></elseif></if>
        }<pos:position pos:line="36" pos:column="10"/></block></then>
        <elseif pos:line="37" pos:column="9">else <if pos:line="37" pos:column="14">if <condition pos:line="37" pos:column="17">(<expr><call><name pos:line="37" pos:column="18">apr_bucket_read<pos:position pos:line="37" pos:column="33"/></name><argument_list pos:line="37" pos:column="33">(<argument><expr><name pos:line="37" pos:column="34">b<pos:position pos:line="37" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="37">&amp;<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="38">buf<pos:position pos:line="37" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="43">&amp;<pos:position pos:line="37" pos:column="48"/></operator><name pos:line="37" pos:column="44">bytes<pos:position pos:line="37" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="51">APR_BLOCK_READ<pos:position pos:line="37" pos:column="65"/></name></expr></argument>)<pos:position pos:line="37" pos:column="66"/></argument_list></call>
                 <operator pos:line="38" pos:column="18">==<pos:position pos:line="38" pos:column="20"/></operator> <name pos:line="38" pos:column="21">APR_SUCCESS<pos:position pos:line="38" pos:column="32"/></name></expr>)<pos:position pos:line="38" pos:column="33"/></condition><then pos:line="38" pos:column="33"> <block pos:line="38" pos:column="34">{
            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><name><name pos:line="39" pos:column="17">ctxt<pos:position pos:line="39" pos:column="21"/></name><operator pos:line="39" pos:column="21">-&gt;<pos:position pos:line="39" pos:column="26"/></operator><name pos:line="39" pos:column="23">parser<pos:position pos:line="39" pos:column="29"/></name></name> <operator pos:line="39" pos:column="30">==<pos:position pos:line="39" pos:column="32"/></operator> <name pos:line="39" pos:column="33">NULL<pos:position pos:line="39" pos:column="37"/></name></expr>)<pos:position pos:line="39" pos:column="38"/></condition><then pos:line="39" pos:column="38"> <block pos:line="39" pos:column="39">{
                <decl_stmt><decl><type><specifier pos:line="40" pos:column="17">const<pos:position pos:line="40" pos:column="22"/></specifier> <name pos:line="40" pos:column="23">char<pos:position pos:line="40" pos:column="27"/></name> <modifier pos:line="40" pos:column="28">*<pos:position pos:line="40" pos:column="29"/></modifier></type><name pos:line="40" pos:column="29">cenc<pos:position pos:line="40" pos:column="33"/></name></decl>;<pos:position pos:line="40" pos:column="34"/></decl_stmt>
                <if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><operator pos:line="41" pos:column="21">!<pos:position pos:line="41" pos:column="22"/></operator><name pos:line="41" pos:column="22">xml2enc_charset<pos:position pos:line="41" pos:column="37"/></name> <operator pos:line="41" pos:column="38">||<pos:position pos:line="41" pos:column="40"/></operator>
                    <operator pos:line="42" pos:column="21">(<pos:position pos:line="42" pos:column="22"/></operator><call><name pos:line="42" pos:column="22">xml2enc_charset<pos:position pos:line="42" pos:column="37"/></name><argument_list pos:line="42" pos:column="37">(<argument><expr><name><name pos:line="42" pos:column="38">f<pos:position pos:line="42" pos:column="39"/></name><operator pos:line="42" pos:column="39">-&gt;<pos:position pos:line="42" pos:column="44"/></operator><name pos:line="42" pos:column="41">r<pos:position pos:line="42" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="44">&amp;<pos:position pos:line="42" pos:column="49"/></operator><name pos:line="42" pos:column="45">enc<pos:position pos:line="42" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="50">&amp;<pos:position pos:line="42" pos:column="55"/></operator><name pos:line="42" pos:column="51">cenc<pos:position pos:line="42" pos:column="55"/></name></expr></argument>)<pos:position pos:line="42" pos:column="56"/></argument_list></call> <operator pos:line="42" pos:column="57">!=<pos:position pos:line="42" pos:column="59"/></operator> <name pos:line="42" pos:column="60">APR_SUCCESS<pos:position pos:line="42" pos:column="71"/></name><operator pos:line="42" pos:column="71">)<pos:position pos:line="42" pos:column="72"/></operator></expr>)<pos:position pos:line="42" pos:column="73"/></condition><then pos:line="42" pos:column="73"> <block pos:line="42" pos:column="74">{
                    <if pos:line="43" pos:column="21">if <condition pos:line="43" pos:column="24">(<expr><operator pos:line="43" pos:column="25">!<pos:position pos:line="43" pos:column="26"/></operator><name pos:line="43" pos:column="26">xml2enc_charset<pos:position pos:line="43" pos:column="41"/></name></expr>)<pos:position pos:line="43" pos:column="42"/></condition><then pos:line="43" pos:column="42">
                        <block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="25">ap_log_rerror<pos:position pos:line="44" pos:column="38"/></name><argument_list pos:line="44" pos:column="38">(<argument><expr><name pos:line="44" pos:column="39">APLOG_MARK<pos:position pos:line="44" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="51">APLOG_WARNING<pos:position pos:line="44" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="66">0<pos:position pos:line="44" pos:column="67"/></literal></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="69">f<pos:position pos:line="44" pos:column="70"/></name><operator pos:line="44" pos:column="70">-&gt;<pos:position pos:line="44" pos:column="75"/></operator><name pos:line="44" pos:column="72">r<pos:position pos:line="44" pos:column="73"/></name></name></expr></argument>, <argument><expr><call><name pos:line="44" pos:column="75">APLOGNO<pos:position pos:line="44" pos:column="82"/></name><argument_list pos:line="44" pos:column="82">(<argument><expr><literal type="number" pos:line="44" pos:column="83">01422<pos:position pos:line="44" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="89"/></argument_list></call>
                     <literal type="string" pos:line="45" pos:column="22">"No i18n support found.  Install mod_xml2enc if required"<pos:position pos:line="45" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="81"/></expr_stmt></block></then></if>
                    <expr_stmt><expr><name pos:line="46" pos:column="21">enc<pos:position pos:line="46" pos:column="24"/></name> <operator pos:line="46" pos:column="25">=<pos:position pos:line="46" pos:column="26"/></operator> <name pos:line="46" pos:column="27">XML_CHAR_ENCODING_NONE<pos:position pos:line="46" pos:column="49"/></name></expr>;<pos:position pos:line="46" pos:column="50"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="47" pos:column="21">ap_set_content_type<pos:position pos:line="47" pos:column="40"/></name><argument_list pos:line="47" pos:column="40">(<argument><expr><name><name pos:line="47" pos:column="41">f<pos:position pos:line="47" pos:column="42"/></name><operator pos:line="47" pos:column="42">-&gt;<pos:position pos:line="47" pos:column="47"/></operator><name pos:line="47" pos:column="44">r<pos:position pos:line="47" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="47">"text/html;charset=utf-8"<pos:position pos:line="47" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="74"/></expr_stmt>
                }<pos:position pos:line="48" pos:column="18"/></block></then>
                <else pos:line="49" pos:column="17">else <block pos:line="49" pos:column="22">{
                    <comment type="block" pos:line="50" pos:column="21">/* if we wanted a non-default charset_out, insert the
                     * xml2enc filter now that we've sniffed it
                     */</comment>
                    <if pos:line="53" pos:column="21">if <condition pos:line="53" pos:column="24">(<expr><name><name pos:line="53" pos:column="25">ctxt<pos:position pos:line="53" pos:column="29"/></name><operator pos:line="53" pos:column="29">-&gt;<pos:position pos:line="53" pos:column="34"/></operator><name pos:line="53" pos:column="31">cfg<pos:position pos:line="53" pos:column="34"/></name><operator pos:line="53" pos:column="34">-&gt;<pos:position pos:line="53" pos:column="39"/></operator><name pos:line="53" pos:column="36">charset_out<pos:position pos:line="53" pos:column="47"/></name></name> <operator pos:line="53" pos:column="48">&amp;&amp;<pos:position pos:line="53" pos:column="58"/></operator> <name pos:line="53" pos:column="51">xml2enc_filter<pos:position pos:line="53" pos:column="65"/></name></expr>)<pos:position pos:line="53" pos:column="66"/></condition><then pos:line="53" pos:column="66"> <block pos:line="53" pos:column="67">{
                        <if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><operator pos:line="54" pos:column="29">*<pos:position pos:line="54" pos:column="30"/></operator><name><name pos:line="54" pos:column="30">ctxt<pos:position pos:line="54" pos:column="34"/></name><operator pos:line="54" pos:column="34">-&gt;<pos:position pos:line="54" pos:column="39"/></operator><name pos:line="54" pos:column="36">cfg<pos:position pos:line="54" pos:column="39"/></name><operator pos:line="54" pos:column="39">-&gt;<pos:position pos:line="54" pos:column="44"/></operator><name pos:line="54" pos:column="41">charset_out<pos:position pos:line="54" pos:column="52"/></name></name> <operator pos:line="54" pos:column="53">!=<pos:position pos:line="54" pos:column="55"/></operator> <literal type="char" pos:line="54" pos:column="56">'*'<pos:position pos:line="54" pos:column="59"/></literal></expr>)<pos:position pos:line="54" pos:column="60"/></condition><then pos:line="54" pos:column="60">
                            <block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="29">cenc<pos:position pos:line="55" pos:column="33"/></name> <operator pos:line="55" pos:column="34">=<pos:position pos:line="55" pos:column="35"/></operator> <name><name pos:line="55" pos:column="36">ctxt<pos:position pos:line="55" pos:column="40"/></name><operator pos:line="55" pos:column="40">-&gt;<pos:position pos:line="55" pos:column="45"/></operator><name pos:line="55" pos:column="42">cfg<pos:position pos:line="55" pos:column="45"/></name><operator pos:line="55" pos:column="45">-&gt;<pos:position pos:line="55" pos:column="50"/></operator><name pos:line="55" pos:column="47">charset_out<pos:position pos:line="55" pos:column="58"/></name></name></expr>;<pos:position pos:line="55" pos:column="59"/></expr_stmt></block></then></if>
                        <expr_stmt><expr><call><name pos:line="56" pos:column="25">xml2enc_filter<pos:position pos:line="56" pos:column="39"/></name><argument_list pos:line="56" pos:column="39">(<argument><expr><name><name pos:line="56" pos:column="40">f<pos:position pos:line="56" pos:column="41"/></name><operator pos:line="56" pos:column="41">-&gt;<pos:position pos:line="56" pos:column="46"/></operator><name pos:line="56" pos:column="43">r<pos:position pos:line="56" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="46">cenc<pos:position pos:line="56" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="52">ENCIO_OUTPUT<pos:position pos:line="56" pos:column="64"/></name></expr></argument>)<pos:position pos:line="56" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="66"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="57" pos:column="25">ap_set_content_type<pos:position pos:line="57" pos:column="44"/></name><argument_list pos:line="57" pos:column="44">(<argument><expr><name><name pos:line="57" pos:column="45">f<pos:position pos:line="57" pos:column="46"/></name><operator pos:line="57" pos:column="46">-&gt;<pos:position pos:line="57" pos:column="51"/></operator><name pos:line="57" pos:column="48">r<pos:position pos:line="57" pos:column="49"/></name></name></expr></argument>,
                                            <argument><expr><call><name pos:line="58" pos:column="45">apr_pstrcat<pos:position pos:line="58" pos:column="56"/></name><argument_list pos:line="58" pos:column="56">(<argument><expr><name><name pos:line="58" pos:column="57">f<pos:position pos:line="58" pos:column="58"/></name><operator pos:line="58" pos:column="58">-&gt;<pos:position pos:line="58" pos:column="63"/></operator><name pos:line="58" pos:column="60">r<pos:position pos:line="58" pos:column="61"/></name><operator pos:line="58" pos:column="61">-&gt;<pos:position pos:line="58" pos:column="66"/></operator><name pos:line="58" pos:column="63">pool<pos:position pos:line="58" pos:column="67"/></name></name></expr></argument>,
                                                        <argument><expr><literal type="string" pos:line="59" pos:column="57">"text/html;charset="<pos:position pos:line="59" pos:column="77"/></literal></expr></argument>,
                                                        <argument><expr><name pos:line="60" pos:column="57">cenc<pos:position pos:line="60" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="63">NULL<pos:position pos:line="60" pos:column="67"/></name></expr></argument>)<pos:position pos:line="60" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="70"/></expr_stmt>
                    }<pos:position pos:line="61" pos:column="22"/></block></then>
                    <else pos:line="62" pos:column="21">else <comment type="block" pos:line="62" pos:column="26">/* Normal case, everything worked, utf-8 output */</comment>
                        <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="25">ap_set_content_type<pos:position pos:line="63" pos:column="44"/></name><argument_list pos:line="63" pos:column="44">(<argument><expr><name><name pos:line="63" pos:column="45">f<pos:position pos:line="63" pos:column="46"/></name><operator pos:line="63" pos:column="46">-&gt;<pos:position pos:line="63" pos:column="51"/></operator><name pos:line="63" pos:column="48">r<pos:position pos:line="63" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="51">"text/html;charset=utf-8"<pos:position pos:line="63" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="78"/></expr_stmt></block></else></if>
                }<pos:position pos:line="64" pos:column="18"/></block></else></if>

                <expr_stmt><expr><call><name pos:line="66" pos:column="17">ap_fputs<pos:position pos:line="66" pos:column="25"/></name><argument_list pos:line="66" pos:column="25">(<argument><expr><name><name pos:line="66" pos:column="26">f<pos:position pos:line="66" pos:column="27"/></name><operator pos:line="66" pos:column="27">-&gt;<pos:position pos:line="66" pos:column="32"/></operator><name pos:line="66" pos:column="29">next<pos:position pos:line="66" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="35">ctxt<pos:position pos:line="66" pos:column="39"/></name><operator pos:line="66" pos:column="39">-&gt;<pos:position pos:line="66" pos:column="44"/></operator><name pos:line="66" pos:column="41">bb<pos:position pos:line="66" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="45">ctxt<pos:position pos:line="66" pos:column="49"/></name><operator pos:line="66" pos:column="49">-&gt;<pos:position pos:line="66" pos:column="54"/></operator><name pos:line="66" pos:column="51">cfg<pos:position pos:line="66" pos:column="54"/></name><operator pos:line="66" pos:column="54">-&gt;<pos:position pos:line="66" pos:column="59"/></operator><name pos:line="66" pos:column="56">doctype<pos:position pos:line="66" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="65"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="67" pos:column="17">ctxt<pos:position pos:line="67" pos:column="21"/></name><operator pos:line="67" pos:column="21">-&gt;<pos:position pos:line="67" pos:column="26"/></operator><name pos:line="67" pos:column="23">parser<pos:position pos:line="67" pos:column="29"/></name></name> <operator pos:line="67" pos:column="30">=<pos:position pos:line="67" pos:column="31"/></operator> <call><name pos:line="67" pos:column="32">htmlCreatePushParserCtxt<pos:position pos:line="67" pos:column="56"/></name><argument_list pos:line="67" pos:column="56">(<argument><expr><operator pos:line="67" pos:column="57">&amp;<pos:position pos:line="67" pos:column="62"/></operator><name pos:line="67" pos:column="58">sax<pos:position pos:line="67" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="63">ctxt<pos:position pos:line="67" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="69">buf<pos:position pos:line="67" pos:column="72"/></name></expr></argument>,
                                                        <argument><expr><literal type="number" pos:line="68" pos:column="57">4<pos:position pos:line="68" pos:column="58"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="60">0<pos:position pos:line="68" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="63">enc<pos:position pos:line="68" pos:column="66"/></name></expr></argument>)<pos:position pos:line="68" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="68"/></expr_stmt>
                <expr_stmt><expr><name pos:line="69" pos:column="17">buf<pos:position pos:line="69" pos:column="20"/></name> <operator pos:line="69" pos:column="21">+=<pos:position pos:line="69" pos:column="23"/></operator> <literal type="number" pos:line="69" pos:column="24">4<pos:position pos:line="69" pos:column="25"/></literal></expr>;<pos:position pos:line="69" pos:column="26"/></expr_stmt>
                <expr_stmt><expr><name pos:line="70" pos:column="17">bytes<pos:position pos:line="70" pos:column="22"/></name> <operator pos:line="70" pos:column="23">-=<pos:position pos:line="70" pos:column="25"/></operator> <literal type="number" pos:line="70" pos:column="26">4<pos:position pos:line="70" pos:column="27"/></literal></expr>;<pos:position pos:line="70" pos:column="28"/></expr_stmt>
                <if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><name><name pos:line="71" pos:column="21">ctxt<pos:position pos:line="71" pos:column="25"/></name><operator pos:line="71" pos:column="25">-&gt;<pos:position pos:line="71" pos:column="30"/></operator><name pos:line="71" pos:column="27">parser<pos:position pos:line="71" pos:column="33"/></name></name> <operator pos:line="71" pos:column="34">==<pos:position pos:line="71" pos:column="36"/></operator> <name pos:line="71" pos:column="37">NULL<pos:position pos:line="71" pos:column="41"/></name></expr>)<pos:position pos:line="71" pos:column="42"/></condition><then pos:line="71" pos:column="42"> <block pos:line="71" pos:column="43">{
                    <decl_stmt><decl><type><name pos:line="72" pos:column="21">apr_status_t<pos:position pos:line="72" pos:column="33"/></name></type> <name pos:line="72" pos:column="34">rv<pos:position pos:line="72" pos:column="36"/></name> <init pos:line="72" pos:column="37">= <expr><call><name pos:line="72" pos:column="39">ap_pass_brigade<pos:position pos:line="72" pos:column="54"/></name><argument_list pos:line="72" pos:column="54">(<argument><expr><name><name pos:line="72" pos:column="55">f<pos:position pos:line="72" pos:column="56"/></name><operator pos:line="72" pos:column="56">-&gt;<pos:position pos:line="72" pos:column="61"/></operator><name pos:line="72" pos:column="58">next<pos:position pos:line="72" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="64">bb<pos:position pos:line="72" pos:column="66"/></name></expr></argument>)<pos:position pos:line="72" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="72" pos:column="68"/></decl_stmt>
                    <expr_stmt><expr><call><name pos:line="73" pos:column="21">ap_remove_output_filter<pos:position pos:line="73" pos:column="44"/></name><argument_list pos:line="73" pos:column="44">(<argument><expr><name pos:line="73" pos:column="45">f<pos:position pos:line="73" pos:column="46"/></name></expr></argument>)<pos:position pos:line="73" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="48"/></expr_stmt>
                    <return pos:line="74" pos:column="21">return <expr><name pos:line="74" pos:column="28">rv<pos:position pos:line="74" pos:column="30"/></name></expr>;<pos:position pos:line="74" pos:column="31"/></return>
                }<pos:position pos:line="75" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="76" pos:column="17">apr_pool_cleanup_register<pos:position pos:line="76" pos:column="42"/></name><argument_list pos:line="76" pos:column="42">(<argument><expr><name><name pos:line="76" pos:column="43">f<pos:position pos:line="76" pos:column="44"/></name><operator pos:line="76" pos:column="44">-&gt;<pos:position pos:line="76" pos:column="49"/></operator><name pos:line="76" pos:column="46">r<pos:position pos:line="76" pos:column="47"/></name><operator pos:line="76" pos:column="47">-&gt;<pos:position pos:line="76" pos:column="52"/></operator><name pos:line="76" pos:column="49">pool<pos:position pos:line="76" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="55">ctxt<pos:position pos:line="76" pos:column="59"/></name><operator pos:line="76" pos:column="59">-&gt;<pos:position pos:line="76" pos:column="64"/></operator><name pos:line="76" pos:column="61">parser<pos:position pos:line="76" pos:column="67"/></name></name></expr></argument>,
                                          <argument><expr><operator pos:line="77" pos:column="43">(<pos:position pos:line="77" pos:column="44"/></operator><call><call><name pos:line="77" pos:column="44">int<pos:position pos:line="77" pos:column="47"/></name><argument_list pos:line="77" pos:column="47">(<argument><expr><operator pos:line="77" pos:column="48">*<pos:position pos:line="77" pos:column="49"/></operator></expr></argument>)<pos:position pos:line="77" pos:column="50"/></argument_list></call><argument_list pos:line="77" pos:column="50">(<argument><expr><name pos:line="77" pos:column="51">void<pos:position pos:line="77" pos:column="55"/></name><operator pos:line="77" pos:column="55">*<pos:position pos:line="77" pos:column="56"/></operator></expr></argument>)<pos:position pos:line="77" pos:column="57"/></argument_list></call><operator pos:line="77" pos:column="57">)<pos:position pos:line="77" pos:column="58"/></operator><name pos:line="77" pos:column="58">htmlFreeParserCtxt<pos:position pos:line="77" pos:column="76"/></name></expr></argument>,
                                          <argument><expr><name pos:line="78" pos:column="43">apr_pool_cleanup_null<pos:position pos:line="78" pos:column="64"/></name></expr></argument>)<pos:position pos:line="78" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="66"/></expr_stmt>
<cpp:ifndef pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">ifndef<pos:position pos:line="79" pos:column="8"/></cpp:directive> <name pos:line="79" pos:column="9">USE_OLD_LIBXML2<pos:position pos:line="79" pos:column="24"/></name></cpp:ifndef>
                <if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">(<expr><name pos:line="80" pos:column="21">xmlopts<pos:position pos:line="80" pos:column="28"/></name> <operator pos:line="80" pos:column="29">=<pos:position pos:line="80" pos:column="30"/></operator> <call><name pos:line="80" pos:column="31">xmlCtxtUseOptions<pos:position pos:line="80" pos:column="48"/></name><argument_list pos:line="80" pos:column="48">(<argument><expr><name><name pos:line="80" pos:column="49">ctxt<pos:position pos:line="80" pos:column="53"/></name><operator pos:line="80" pos:column="53">-&gt;<pos:position pos:line="80" pos:column="58"/></operator><name pos:line="80" pos:column="55">parser<pos:position pos:line="80" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="63">xmlopts<pos:position pos:line="80" pos:column="70"/></name></expr></argument>)<pos:position pos:line="80" pos:column="71"/></argument_list></call></expr><operator pos:line="80" pos:column="71">,<pos:position pos:line="80" pos:column="72"/></operator> <expr><name pos:line="80" pos:column="73">xmlopts<pos:position pos:line="80" pos:column="80"/></name></expr>)<pos:position pos:line="80" pos:column="81"/></condition><then pos:line="80" pos:column="81">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="81" pos:column="21">ap_log_rerror<pos:position pos:line="81" pos:column="34"/></name><argument_list pos:line="81" pos:column="34">(<argument><expr><name pos:line="81" pos:column="35">APLOG_MARK<pos:position pos:line="81" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="47">APLOG_WARNING<pos:position pos:line="81" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="81" pos:column="62">0<pos:position pos:line="81" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="65">f<pos:position pos:line="81" pos:column="66"/></name><operator pos:line="81" pos:column="66">-&gt;<pos:position pos:line="81" pos:column="71"/></operator><name pos:line="81" pos:column="68">r<pos:position pos:line="81" pos:column="69"/></name></name></expr></argument>, <argument><expr><call><name pos:line="81" pos:column="71">APLOGNO<pos:position pos:line="81" pos:column="78"/></name><argument_list pos:line="81" pos:column="78">(<argument><expr><literal type="number" pos:line="81" pos:column="79">01423<pos:position pos:line="81" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="85"/></argument_list></call>
                                  <literal type="string" pos:line="82" pos:column="35">"Unsupported parser opts %x"<pos:position pos:line="82" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="65">xmlopts<pos:position pos:line="82" pos:column="72"/></name></expr></argument>)<pos:position pos:line="82" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="74"/></expr_stmt></block></then></if>
<cpp:endif pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">endif<pos:position pos:line="83" pos:column="7"/></cpp:directive></cpp:endif>
                <if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><name><name pos:line="84" pos:column="21">ctxt<pos:position pos:line="84" pos:column="25"/></name><operator pos:line="84" pos:column="25">-&gt;<pos:position pos:line="84" pos:column="30"/></operator><name pos:line="84" pos:column="27">cfg<pos:position pos:line="84" pos:column="30"/></name><operator pos:line="84" pos:column="30">-&gt;<pos:position pos:line="84" pos:column="35"/></operator><name pos:line="84" pos:column="32">metafix<pos:position pos:line="84" pos:column="39"/></name></name></expr>)<pos:position pos:line="84" pos:column="40"/></condition><then pos:line="84" pos:column="40">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="85" pos:column="21">m<pos:position pos:line="85" pos:column="22"/></name> <operator pos:line="85" pos:column="23">=<pos:position pos:line="85" pos:column="24"/></operator> <call><name pos:line="85" pos:column="25">metafix<pos:position pos:line="85" pos:column="32"/></name><argument_list pos:line="85" pos:column="32">(<argument><expr><name><name pos:line="85" pos:column="33">f<pos:position pos:line="85" pos:column="34"/></name><operator pos:line="85" pos:column="34">-&gt;<pos:position pos:line="85" pos:column="39"/></operator><name pos:line="85" pos:column="36">r<pos:position pos:line="85" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="39">buf<pos:position pos:line="85" pos:column="42"/></name></expr></argument>)<pos:position pos:line="85" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="44"/></expr_stmt></block></then></if>
                <if pos:line="86" pos:column="17">if <condition pos:line="86" pos:column="20">(<expr><name pos:line="86" pos:column="21">m<pos:position pos:line="86" pos:column="22"/></name></expr>)<pos:position pos:line="86" pos:column="23"/></condition><then pos:line="86" pos:column="23"> <block pos:line="86" pos:column="24">{
                    <expr_stmt><expr><call><name pos:line="87" pos:column="21">consume_buffer<pos:position pos:line="87" pos:column="35"/></name><argument_list pos:line="87" pos:column="35">(<argument><expr><name pos:line="87" pos:column="36">ctxt<pos:position pos:line="87" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="42">buf<pos:position pos:line="87" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="47">m<pos:position pos:line="87" pos:column="48"/></name><operator pos:line="87" pos:column="48">-&gt;<pos:position pos:line="87" pos:column="53"/></operator><name pos:line="87" pos:column="50">start<pos:position pos:line="87" pos:column="55"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="87" pos:column="57">0<pos:position pos:line="87" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="60"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="88" pos:column="21">consume_buffer<pos:position pos:line="88" pos:column="35"/></name><argument_list pos:line="88" pos:column="35">(<argument><expr><name pos:line="88" pos:column="36">ctxt<pos:position pos:line="88" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="42">buf<pos:position pos:line="88" pos:column="45"/></name><operator pos:line="88" pos:column="45">+<pos:position pos:line="88" pos:column="46"/></operator><name><name pos:line="88" pos:column="46">m<pos:position pos:line="88" pos:column="47"/></name><operator pos:line="88" pos:column="47">-&gt;<pos:position pos:line="88" pos:column="52"/></operator><name pos:line="88" pos:column="49">end<pos:position pos:line="88" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="54">bytes<pos:position pos:line="88" pos:column="59"/></name><operator pos:line="88" pos:column="59">-<pos:position pos:line="88" pos:column="60"/></operator><name><name pos:line="88" pos:column="60">m<pos:position pos:line="88" pos:column="61"/></name><operator pos:line="88" pos:column="61">-&gt;<pos:position pos:line="88" pos:column="66"/></operator><name pos:line="88" pos:column="63">end<pos:position pos:line="88" pos:column="66"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="68">0<pos:position pos:line="88" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="71"/></expr_stmt>
                }<pos:position pos:line="89" pos:column="18"/></block></then>
                <else pos:line="90" pos:column="17">else <block pos:line="90" pos:column="22">{
                    <expr_stmt><expr><call><name pos:line="91" pos:column="21">consume_buffer<pos:position pos:line="91" pos:column="35"/></name><argument_list pos:line="91" pos:column="35">(<argument><expr><name pos:line="91" pos:column="36">ctxt<pos:position pos:line="91" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="42">buf<pos:position pos:line="91" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="47">bytes<pos:position pos:line="91" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="91" pos:column="54">0<pos:position pos:line="91" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="57"/></expr_stmt>
                }<pos:position pos:line="92" pos:column="18"/></block></else></if>
            }<pos:position pos:line="93" pos:column="14"/></block></then>
            <else pos:line="94" pos:column="13">else <block pos:line="94" pos:column="18">{
                <expr_stmt><expr><call><name pos:line="95" pos:column="17">consume_buffer<pos:position pos:line="95" pos:column="31"/></name><argument_list pos:line="95" pos:column="31">(<argument><expr><name pos:line="95" pos:column="32">ctxt<pos:position pos:line="95" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="38">buf<pos:position pos:line="95" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="43">bytes<pos:position pos:line="95" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="95" pos:column="50">0<pos:position pos:line="95" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="53"/></expr_stmt>
            }<pos:position pos:line="96" pos:column="14"/></block></else></if>
        }<pos:position pos:line="97" pos:column="10"/></block></then></if></elseif>
        <else pos:line="98" pos:column="9">else <block pos:line="98" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="99" pos:column="13">ap_log_rerror<pos:position pos:line="99" pos:column="26"/></name><argument_list pos:line="99" pos:column="26">(<argument><expr><name pos:line="99" pos:column="27">APLOG_MARK<pos:position pos:line="99" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="39">APLOG_ERR<pos:position pos:line="99" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="99" pos:column="50">0<pos:position pos:line="99" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="53">f<pos:position pos:line="99" pos:column="54"/></name><operator pos:line="99" pos:column="54">-&gt;<pos:position pos:line="99" pos:column="59"/></operator><name pos:line="99" pos:column="56">r<pos:position pos:line="99" pos:column="57"/></name></name></expr></argument>, <argument><expr><call><name pos:line="99" pos:column="59">APLOGNO<pos:position pos:line="99" pos:column="66"/></name><argument_list pos:line="99" pos:column="66">(<argument><expr><literal type="number" pos:line="99" pos:column="67">01424<pos:position pos:line="99" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="73"/></argument_list></call>
                          <literal type="string" pos:line="100" pos:column="27">"Error in bucket read"<pos:position pos:line="100" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="51"/></expr_stmt>
        }<pos:position pos:line="101" pos:column="10"/></block></else></if>
    }<pos:position pos:line="102" pos:column="6"/></block></for>
    <comment type="block" pos:line="103" pos:column="5">/*ap_fflush(ctxt-&gt;f-&gt;next, ctxt-&gt;bb);        // uncomment for debug */</comment>
    <expr_stmt><expr><call><name pos:line="104" pos:column="5">apr_brigade_cleanup<pos:position pos:line="104" pos:column="24"/></name><argument_list pos:line="104" pos:column="24">(<argument><expr><name pos:line="104" pos:column="25">bb<pos:position pos:line="104" pos:column="27"/></name></expr></argument>)<pos:position pos:line="104" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="29"/></expr_stmt>
    <return pos:line="105" pos:column="5">return <expr><name pos:line="105" pos:column="12">APR_SUCCESS<pos:position pos:line="105" pos:column="23"/></name></expr>;<pos:position pos:line="105" pos:column="24"/></return>
}<pos:position pos:line="106" pos:column="2"/></block></function></unit>
