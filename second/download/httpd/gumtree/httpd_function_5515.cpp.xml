<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_5515.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">fix_hostname<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">request_rec<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">r<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">host<pos:position pos:line="3" pos:column="15"/></name></decl>, <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="18">scope_id<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">dst<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_port_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">port<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">rv<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">c<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* According to RFC 2616, Host header field CAN be blank. */</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><operator pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></operator><name><name pos:line="10" pos:column="11">r<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">-&gt;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="14">hostname<pos:position pos:line="10" pos:column="22"/></name></name></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23"> <block pos:line="10" pos:column="24">{
        <return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="14" pos:column="5">/* apr_parse_addr_port will interpret a bare integer as a port
     * which is incorrect in this context.  So treat it separately.
     */</comment>
    <for pos:line="17" pos:column="5">for <control pos:line="17" pos:column="9">(<init><expr><name pos:line="17" pos:column="10">c<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <name><name pos:line="17" pos:column="14">r<pos:position pos:line="17" pos:column="15"/></name><operator pos:line="17" pos:column="15">-&gt;<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="17">hostname<pos:position pos:line="17" pos:column="25"/></name></name></expr>;<pos:position pos:line="17" pos:column="26"/></init> <condition><expr><call><name pos:line="17" pos:column="27">apr_isdigit<pos:position pos:line="17" pos:column="38"/></name><argument_list pos:line="17" pos:column="38">(<argument><expr><operator pos:line="17" pos:column="39">*<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="40">c<pos:position pos:line="17" pos:column="41"/></name></expr></argument>)<pos:position pos:line="17" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="43"/></condition> <incr><expr><operator pos:line="17" pos:column="44">++<pos:position pos:line="17" pos:column="46"/></operator><name pos:line="17" pos:column="46">c<pos:position pos:line="17" pos:column="47"/></name></expr></incr>)<pos:position pos:line="17" pos:column="48"/></control><block type="pseudo"><empty_stmt pos:line="17" pos:column="48">;<pos:position pos:line="17" pos:column="49"/></empty_stmt></block></for>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">!<pos:position pos:line="18" pos:column="10"/></operator><operator pos:line="18" pos:column="10">*<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">c<pos:position pos:line="18" pos:column="12"/></name></expr>)<pos:position pos:line="18" pos:column="13"/></condition><then pos:line="18" pos:column="13"> <block pos:line="18" pos:column="14">{  <comment type="block" pos:line="18" pos:column="17">/* pure integer */</comment>
        <return pos:line="19" pos:column="9">return;<pos:position pos:line="19" pos:column="16"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="22" pos:column="5">rv<pos:position pos:line="22" pos:column="7"/></name> <operator pos:line="22" pos:column="8">=<pos:position pos:line="22" pos:column="9"/></operator> <call><name pos:line="22" pos:column="10">apr_parse_addr_port<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><operator pos:line="22" pos:column="30">&amp;<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="31">host<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="37">&amp;<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="38">scope_id<pos:position pos:line="22" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="48">&amp;<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="49">port<pos:position pos:line="22" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="55">r<pos:position pos:line="22" pos:column="56"/></name><operator pos:line="22" pos:column="56">-&gt;<pos:position pos:line="22" pos:column="61"/></operator><name pos:line="22" pos:column="58">hostname<pos:position pos:line="22" pos:column="66"/></name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="68">r<pos:position pos:line="22" pos:column="69"/></name><operator pos:line="22" pos:column="69">-&gt;<pos:position pos:line="22" pos:column="74"/></operator><name pos:line="22" pos:column="71">pool<pos:position pos:line="22" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="77"/></expr_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">rv<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">!=<pos:position pos:line="23" pos:column="14"/></operator> <name pos:line="23" pos:column="15">APR_SUCCESS<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">||<pos:position pos:line="23" pos:column="29"/></operator> <name pos:line="23" pos:column="30">scope_id<pos:position pos:line="23" pos:column="38"/></name></expr>)<pos:position pos:line="23" pos:column="39"/></condition><then pos:line="23" pos:column="39"> <block pos:line="23" pos:column="40">{
        <goto pos:line="24" pos:column="9">goto <name pos:line="24" pos:column="14">bad<pos:position pos:line="24" pos:column="17"/></name>;<pos:position pos:line="24" pos:column="18"/></goto>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">port<pos:position pos:line="27" pos:column="13"/></name></expr>)<pos:position pos:line="27" pos:column="14"/></condition><then pos:line="27" pos:column="14"> <block pos:line="27" pos:column="15">{
        <comment type="block" pos:line="28" pos:column="9">/* Don't throw the Host: header's port number away:
           save it in parsed_uri -- ap_get_server_port() needs it! */</comment>
        <comment type="block" pos:line="30" pos:column="9">/* @@@ XXX there should be a better way to pass the port.
         *         Like r-&gt;hostname, there should be a r-&gt;portno
         */</comment>
        <expr_stmt><expr><name><name pos:line="33" pos:column="9">r<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">-&gt;<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="12">parsed_uri<pos:position pos:line="33" pos:column="22"/></name><operator pos:line="33" pos:column="22">.<pos:position pos:line="33" pos:column="23"/></operator><name pos:line="33" pos:column="23">port<pos:position pos:line="33" pos:column="27"/></name></name> <operator pos:line="33" pos:column="28">=<pos:position pos:line="33" pos:column="29"/></operator> <name pos:line="33" pos:column="30">port<pos:position pos:line="33" pos:column="34"/></name></expr>;<pos:position pos:line="33" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="34" pos:column="9">r<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">-&gt;<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="12">parsed_uri<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">.<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="23">port_str<pos:position pos:line="34" pos:column="31"/></name></name> <operator pos:line="34" pos:column="32">=<pos:position pos:line="34" pos:column="33"/></operator> <call><name pos:line="34" pos:column="34">apr_itoa<pos:position pos:line="34" pos:column="42"/></name><argument_list pos:line="34" pos:column="42">(<argument><expr><name><name pos:line="34" pos:column="43">r<pos:position pos:line="34" pos:column="44"/></name><operator pos:line="34" pos:column="44">-&gt;<pos:position pos:line="34" pos:column="49"/></operator><name pos:line="34" pos:column="46">pool<pos:position pos:line="34" pos:column="50"/></name></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="52">(<pos:position pos:line="34" pos:column="53"/></operator><name pos:line="34" pos:column="53">int<pos:position pos:line="34" pos:column="56"/></name><operator pos:line="34" pos:column="56">)<pos:position pos:line="34" pos:column="57"/></operator><name pos:line="34" pos:column="57">port<pos:position pos:line="34" pos:column="61"/></name></expr></argument>)<pos:position pos:line="34" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="37" pos:column="5">/* if the hostname is an IPv6 numeric address string, it was validated
     * already; otherwise, further validation is needed
     */</comment>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name><name pos:line="40" pos:column="9">r<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">-&gt;<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="12">hostname<pos:position pos:line="40" pos:column="20"/></name><index pos:line="40" pos:column="20">[<expr><literal type="number" pos:line="40" pos:column="21">0<pos:position pos:line="40" pos:column="22"/></literal></expr>]<pos:position pos:line="40" pos:column="23"/></index></name> <operator pos:line="40" pos:column="24">!=<pos:position pos:line="40" pos:column="26"/></operator> <literal type="char" pos:line="40" pos:column="27">'['<pos:position pos:line="40" pos:column="30"/></literal></expr>)<pos:position pos:line="40" pos:column="31"/></condition><then pos:line="40" pos:column="31"> <block pos:line="40" pos:column="32">{
        <for pos:line="41" pos:column="9">for <control pos:line="41" pos:column="13">(<init><expr><name pos:line="41" pos:column="14">dst<pos:position pos:line="41" pos:column="17"/></name> <operator pos:line="41" pos:column="18">=<pos:position pos:line="41" pos:column="19"/></operator> <name pos:line="41" pos:column="20">host<pos:position pos:line="41" pos:column="24"/></name></expr>;<pos:position pos:line="41" pos:column="25"/></init> <condition><expr><operator pos:line="41" pos:column="26">*<pos:position pos:line="41" pos:column="27"/></operator><name pos:line="41" pos:column="27">dst<pos:position pos:line="41" pos:column="30"/></name></expr>;<pos:position pos:line="41" pos:column="31"/></condition> <incr><expr><name pos:line="41" pos:column="32">dst<pos:position pos:line="41" pos:column="35"/></name><operator pos:line="41" pos:column="35">++<pos:position pos:line="41" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="41" pos:column="38"/></control> <block pos:line="41" pos:column="39">{
            <if pos:line="42" pos:column="13">if <condition pos:line="42" pos:column="16">(<expr><call><name pos:line="42" pos:column="17">apr_islower<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><operator pos:line="42" pos:column="29">*<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="30">dst<pos:position pos:line="42" pos:column="33"/></name></expr></argument>)<pos:position pos:line="42" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="35"/></condition><then pos:line="42" pos:column="35"> <block pos:line="42" pos:column="36">{
                <comment type="block" pos:line="43" pos:column="17">/* leave char unchanged */</comment>
            }<pos:position pos:line="44" pos:column="14"/></block></then>
            <elseif pos:line="45" pos:column="13">else <if pos:line="45" pos:column="18">if <condition pos:line="45" pos:column="21">(<expr><operator pos:line="45" pos:column="22">*<pos:position pos:line="45" pos:column="23"/></operator><name pos:line="45" pos:column="23">dst<pos:position pos:line="45" pos:column="26"/></name> <operator pos:line="45" pos:column="27">==<pos:position pos:line="45" pos:column="29"/></operator> <literal type="char" pos:line="45" pos:column="30">'.'<pos:position pos:line="45" pos:column="33"/></literal></expr>)<pos:position pos:line="45" pos:column="34"/></condition><then pos:line="45" pos:column="34"> <block pos:line="45" pos:column="35">{
                <if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><operator pos:line="46" pos:column="21">*<pos:position pos:line="46" pos:column="22"/></operator><operator pos:line="46" pos:column="22">(<pos:position pos:line="46" pos:column="23"/></operator><name pos:line="46" pos:column="23">dst<pos:position pos:line="46" pos:column="26"/></name> <operator pos:line="46" pos:column="27">+<pos:position pos:line="46" pos:column="28"/></operator> <literal type="number" pos:line="46" pos:column="29">1<pos:position pos:line="46" pos:column="30"/></literal><operator pos:line="46" pos:column="30">)<pos:position pos:line="46" pos:column="31"/></operator> <operator pos:line="46" pos:column="32">==<pos:position pos:line="46" pos:column="34"/></operator> <literal type="char" pos:line="46" pos:column="35">'.'<pos:position pos:line="46" pos:column="38"/></literal></expr>)<pos:position pos:line="46" pos:column="39"/></condition><then pos:line="46" pos:column="39"> <block pos:line="46" pos:column="40">{
                    <goto pos:line="47" pos:column="21">goto <name pos:line="47" pos:column="26">bad<pos:position pos:line="47" pos:column="29"/></name>;<pos:position pos:line="47" pos:column="30"/></goto>
                }<pos:position pos:line="48" pos:column="18"/></block></then></if>
            }<pos:position pos:line="49" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="50" pos:column="13">else <if pos:line="50" pos:column="18">if <condition pos:line="50" pos:column="21">(<expr><call><name pos:line="50" pos:column="22">apr_isupper<pos:position pos:line="50" pos:column="33"/></name><argument_list pos:line="50" pos:column="33">(<argument><expr><operator pos:line="50" pos:column="34">*<pos:position pos:line="50" pos:column="35"/></operator><name pos:line="50" pos:column="35">dst<pos:position pos:line="50" pos:column="38"/></name></expr></argument>)<pos:position pos:line="50" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="40"/></condition><then pos:line="50" pos:column="40"> <block pos:line="50" pos:column="41">{
                <expr_stmt><expr><operator pos:line="51" pos:column="17">*<pos:position pos:line="51" pos:column="18"/></operator><name pos:line="51" pos:column="18">dst<pos:position pos:line="51" pos:column="21"/></name> <operator pos:line="51" pos:column="22">=<pos:position pos:line="51" pos:column="23"/></operator> <call><name pos:line="51" pos:column="24">apr_tolower<pos:position pos:line="51" pos:column="35"/></name><argument_list pos:line="51" pos:column="35">(<argument><expr><operator pos:line="51" pos:column="36">*<pos:position pos:line="51" pos:column="37"/></operator><name pos:line="51" pos:column="37">dst<pos:position pos:line="51" pos:column="40"/></name></expr></argument>)<pos:position pos:line="51" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="42"/></expr_stmt>
            }<pos:position pos:line="52" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="53" pos:column="13">else <if pos:line="53" pos:column="18">if <condition pos:line="53" pos:column="21">(<expr><operator pos:line="53" pos:column="22">*<pos:position pos:line="53" pos:column="23"/></operator><name pos:line="53" pos:column="23">dst<pos:position pos:line="53" pos:column="26"/></name> <operator pos:line="53" pos:column="27">==<pos:position pos:line="53" pos:column="29"/></operator> <literal type="char" pos:line="53" pos:column="30">'/'<pos:position pos:line="53" pos:column="33"/></literal> <operator pos:line="53" pos:column="34">||<pos:position pos:line="53" pos:column="36"/></operator> <operator pos:line="53" pos:column="37">*<pos:position pos:line="53" pos:column="38"/></operator><name pos:line="53" pos:column="38">dst<pos:position pos:line="53" pos:column="41"/></name> <operator pos:line="53" pos:column="42">==<pos:position pos:line="53" pos:column="44"/></operator> <literal type="char" pos:line="53" pos:column="45">'\\'<pos:position pos:line="53" pos:column="49"/></literal></expr>)<pos:position pos:line="53" pos:column="50"/></condition><then pos:line="53" pos:column="50"> <block pos:line="53" pos:column="51">{
                <goto pos:line="54" pos:column="17">goto <name pos:line="54" pos:column="22">bad<pos:position pos:line="54" pos:column="25"/></name>;<pos:position pos:line="54" pos:column="26"/></goto>
            }<pos:position pos:line="55" pos:column="14"/></block></then></if></elseif></if>
        }<pos:position pos:line="56" pos:column="10"/></block></for>
        <comment type="block" pos:line="57" pos:column="9">/* strip trailing gubbins */</comment>
        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">dst<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">&gt;<pos:position pos:line="58" pos:column="21"/></operator> <name pos:line="58" pos:column="19">host<pos:position pos:line="58" pos:column="23"/></name> <operator pos:line="58" pos:column="24">&amp;&amp;<pos:position pos:line="58" pos:column="34"/></operator> <name><name pos:line="58" pos:column="27">dst<pos:position pos:line="58" pos:column="30"/></name><index pos:line="58" pos:column="30">[<expr><operator pos:line="58" pos:column="31">-<pos:position pos:line="58" pos:column="32"/></operator><literal type="number" pos:line="58" pos:column="32">1<pos:position pos:line="58" pos:column="33"/></literal></expr>]<pos:position pos:line="58" pos:column="34"/></index></name> <operator pos:line="58" pos:column="35">==<pos:position pos:line="58" pos:column="37"/></operator> <literal type="char" pos:line="58" pos:column="38">'.'<pos:position pos:line="58" pos:column="41"/></literal></expr>)<pos:position pos:line="58" pos:column="42"/></condition><then pos:line="58" pos:column="42"> <block pos:line="58" pos:column="43">{
            <expr_stmt><expr><name><name pos:line="59" pos:column="13">dst<pos:position pos:line="59" pos:column="16"/></name><index pos:line="59" pos:column="16">[<expr><operator pos:line="59" pos:column="17">-<pos:position pos:line="59" pos:column="18"/></operator><literal type="number" pos:line="59" pos:column="18">1<pos:position pos:line="59" pos:column="19"/></literal></expr>]<pos:position pos:line="59" pos:column="20"/></index></name> <operator pos:line="59" pos:column="21">=<pos:position pos:line="59" pos:column="22"/></operator> <literal type="char" pos:line="59" pos:column="23">'\0'<pos:position pos:line="59" pos:column="27"/></literal></expr>;<pos:position pos:line="59" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="60" pos:column="10"/></block></then></if>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="62" pos:column="5">r<pos:position pos:line="62" pos:column="6"/></name><operator pos:line="62" pos:column="6">-&gt;<pos:position pos:line="62" pos:column="11"/></operator><name pos:line="62" pos:column="8">hostname<pos:position pos:line="62" pos:column="16"/></name></name> <operator pos:line="62" pos:column="17">=<pos:position pos:line="62" pos:column="18"/></operator> <name pos:line="62" pos:column="19">host<pos:position pos:line="62" pos:column="23"/></name></expr>;<pos:position pos:line="62" pos:column="24"/></expr_stmt>
    <return pos:line="63" pos:column="5">return;<pos:position pos:line="63" pos:column="12"/></return>

<label><name pos:line="65" pos:column="1">bad<pos:position pos:line="65" pos:column="4"/></name>:<pos:position pos:line="65" pos:column="5"/></label>
    <expr_stmt><expr><name><name pos:line="66" pos:column="5">r<pos:position pos:line="66" pos:column="6"/></name><operator pos:line="66" pos:column="6">-&gt;<pos:position pos:line="66" pos:column="11"/></operator><name pos:line="66" pos:column="8">status<pos:position pos:line="66" pos:column="14"/></name></name> <operator pos:line="66" pos:column="15">=<pos:position pos:line="66" pos:column="16"/></operator> <name pos:line="66" pos:column="17">HTTP_BAD_REQUEST<pos:position pos:line="66" pos:column="33"/></name></expr>;<pos:position pos:line="66" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">ap_log_rerror<pos:position pos:line="67" pos:column="18"/></name><argument_list pos:line="67" pos:column="18">(<argument><expr><name pos:line="67" pos:column="19">APLOG_MARK<pos:position pos:line="67" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="31">APLOG_ERR<pos:position pos:line="67" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="42">0<pos:position pos:line="67" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="45">r<pos:position pos:line="67" pos:column="46"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="68" pos:column="19">"Client sent malformed Host header"<pos:position pos:line="68" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="56"/></expr_stmt>
    <return pos:line="69" pos:column="5">return;<pos:position pos:line="69" pos:column="12"/></return>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
