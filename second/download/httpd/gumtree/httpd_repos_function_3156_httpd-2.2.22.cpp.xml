<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3156_httpd-2.2.22.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">enum<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">XML_Error<pos:position pos:line="1" pos:column="22"/></name></name> <name pos:line="1" pos:column="23">PTRCALL<pos:position pos:line="1" pos:column="30"/></name></type>
<name pos:line="2" pos:column="1">externalEntityInitProcessor2<pos:position pos:line="2" pos:column="29"/></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><name pos:line="2" pos:column="30">XML_Parser<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">parser<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>,
                             <parameter><decl><type><specifier pos:line="3" pos:column="30">const<pos:position pos:line="3" pos:column="35"/></specifier> <name pos:line="3" pos:column="36">char<pos:position pos:line="3" pos:column="40"/></name> <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier></type><name pos:line="3" pos:column="42">start<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>,
                             <parameter><decl><type><specifier pos:line="4" pos:column="30">const<pos:position pos:line="4" pos:column="35"/></specifier> <name pos:line="4" pos:column="36">char<pos:position pos:line="4" pos:column="40"/></name> <modifier pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></modifier></type><name pos:line="4" pos:column="42">end<pos:position pos:line="4" pos:column="45"/></name></decl></parameter>,
                             <parameter><decl><type><specifier pos:line="5" pos:column="30">const<pos:position pos:line="5" pos:column="35"/></specifier> <name pos:line="5" pos:column="36">char<pos:position pos:line="5" pos:column="40"/></name> <modifier pos:line="5" pos:column="41">*<pos:position pos:line="5" pos:column="42"/></modifier><modifier pos:line="5" pos:column="42">*<pos:position pos:line="5" pos:column="43"/></modifier></type><name pos:line="5" pos:column="43">endPtr<pos:position pos:line="5" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="50"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">next<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><name pos:line="7" pos:column="22">start<pos:position pos:line="7" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt> <comment type="block" pos:line="7" pos:column="29">/* XmlContentTok doesn't always set the last arg */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">tok<pos:position pos:line="8" pos:column="10"/></name> <init pos:line="8" pos:column="11">= <expr><call><name pos:line="8" pos:column="13">XmlContentTok<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">encoding<pos:position pos:line="8" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="37">start<pos:position pos:line="8" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="44">end<pos:position pos:line="8" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="49">&amp;<pos:position pos:line="8" pos:column="54"/></operator><name pos:line="8" pos:column="50">next<pos:position pos:line="8" pos:column="54"/></name></expr></argument>)<pos:position pos:line="8" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="56"/></decl_stmt>
  <switch pos:line="9" pos:column="3">switch <condition pos:line="9" pos:column="10">(<expr><name pos:line="9" pos:column="11">tok<pos:position pos:line="9" pos:column="14"/></name></expr>)<pos:position pos:line="9" pos:column="15"/></condition> <block pos:line="9" pos:column="16">{
  <case pos:line="10" pos:column="3">case <expr><name pos:line="10" pos:column="8">XML_TOK_BOM<pos:position pos:line="10" pos:column="19"/></name></expr>:<pos:position pos:line="10" pos:column="20"/></case>
    <comment type="block" pos:line="11" pos:column="5">/* If we are at the end of the buffer, this would cause the next stage,
       i.e. externalEntityInitProcessor3, to pass control directly to
       doContent (by detecting XML_TOK_NONE) without processing any xml text
       declaration - causing the error XML_ERROR_MISPLACED_XML_PI in doContent.
    */</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">next<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">==<pos:position pos:line="16" pos:column="16"/></operator> <name pos:line="16" pos:column="17">end<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">&amp;&amp;<pos:position pos:line="16" pos:column="31"/></operator> <name pos:line="16" pos:column="24">endPtr<pos:position pos:line="16" pos:column="30"/></name></expr>)<pos:position pos:line="16" pos:column="31"/></condition><then pos:line="16" pos:column="31"> <block pos:line="16" pos:column="32">{
      <expr_stmt><expr><operator pos:line="17" pos:column="7">*<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">endPtr<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <name pos:line="17" pos:column="17">next<pos:position pos:line="17" pos:column="21"/></name></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>
      <return pos:line="18" pos:column="7">return <expr><name pos:line="18" pos:column="14">XML_ERROR_NONE<pos:position pos:line="18" pos:column="28"/></name></expr>;<pos:position pos:line="18" pos:column="29"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="20" pos:column="5">start<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <name pos:line="20" pos:column="13">next<pos:position pos:line="20" pos:column="17"/></name></expr>;<pos:position pos:line="20" pos:column="18"/></expr_stmt>
    <break pos:line="21" pos:column="5">break;<pos:position pos:line="21" pos:column="11"/></break>
  <case pos:line="22" pos:column="3">case <expr><name pos:line="22" pos:column="8">XML_TOK_PARTIAL<pos:position pos:line="22" pos:column="23"/></name></expr>:<pos:position pos:line="22" pos:column="24"/></case>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">endPtr<pos:position pos:line="23" pos:column="15"/></name></expr>)<pos:position pos:line="23" pos:column="16"/></condition><then pos:line="23" pos:column="16"> <block pos:line="23" pos:column="17">{
      <expr_stmt><expr><operator pos:line="24" pos:column="7">*<pos:position pos:line="24" pos:column="8"/></operator><name pos:line="24" pos:column="8">endPtr<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <name pos:line="24" pos:column="17">start<pos:position pos:line="24" pos:column="22"/></name></expr>;<pos:position pos:line="24" pos:column="23"/></expr_stmt>
      <return pos:line="25" pos:column="7">return <expr><name pos:line="25" pos:column="14">XML_ERROR_NONE<pos:position pos:line="25" pos:column="28"/></name></expr>;<pos:position pos:line="25" pos:column="29"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="27" pos:column="5">eventPtr<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">=<pos:position pos:line="27" pos:column="15"/></operator> <name pos:line="27" pos:column="16">start<pos:position pos:line="27" pos:column="21"/></name></expr>;<pos:position pos:line="27" pos:column="22"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">XML_ERROR_UNCLOSED_TOKEN<pos:position pos:line="28" pos:column="36"/></name></expr>;<pos:position pos:line="28" pos:column="37"/></return>
  <case pos:line="29" pos:column="3">case <expr><name pos:line="29" pos:column="8">XML_TOK_PARTIAL_CHAR<pos:position pos:line="29" pos:column="28"/></name></expr>:<pos:position pos:line="29" pos:column="29"/></case>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">endPtr<pos:position pos:line="30" pos:column="15"/></name></expr>)<pos:position pos:line="30" pos:column="16"/></condition><then pos:line="30" pos:column="16"> <block pos:line="30" pos:column="17">{
      <expr_stmt><expr><operator pos:line="31" pos:column="7">*<pos:position pos:line="31" pos:column="8"/></operator><name pos:line="31" pos:column="8">endPtr<pos:position pos:line="31" pos:column="14"/></name> <operator pos:line="31" pos:column="15">=<pos:position pos:line="31" pos:column="16"/></operator> <name pos:line="31" pos:column="17">start<pos:position pos:line="31" pos:column="22"/></name></expr>;<pos:position pos:line="31" pos:column="23"/></expr_stmt>
      <return pos:line="32" pos:column="7">return <expr><name pos:line="32" pos:column="14">XML_ERROR_NONE<pos:position pos:line="32" pos:column="28"/></name></expr>;<pos:position pos:line="32" pos:column="29"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="34" pos:column="5">eventPtr<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">=<pos:position pos:line="34" pos:column="15"/></operator> <name pos:line="34" pos:column="16">start<pos:position pos:line="34" pos:column="21"/></name></expr>;<pos:position pos:line="34" pos:column="22"/></expr_stmt>
    <return pos:line="35" pos:column="5">return <expr><name pos:line="35" pos:column="12">XML_ERROR_PARTIAL_CHAR<pos:position pos:line="35" pos:column="34"/></name></expr>;<pos:position pos:line="35" pos:column="35"/></return>
  }<pos:position pos:line="36" pos:column="4"/></block></switch>
  <expr_stmt><expr><name pos:line="37" pos:column="3">processor<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <name pos:line="37" pos:column="15">externalEntityInitProcessor3<pos:position pos:line="37" pos:column="43"/></name></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt>
  <return pos:line="38" pos:column="3">return <expr><call><name pos:line="38" pos:column="10">externalEntityInitProcessor3<pos:position pos:line="38" pos:column="38"/></name><argument_list pos:line="38" pos:column="38">(<argument><expr><name pos:line="38" pos:column="39">parser<pos:position pos:line="38" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="47">start<pos:position pos:line="38" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="54">end<pos:position pos:line="38" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="59">endPtr<pos:position pos:line="38" pos:column="65"/></name></expr></argument>)<pos:position pos:line="38" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="67"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
