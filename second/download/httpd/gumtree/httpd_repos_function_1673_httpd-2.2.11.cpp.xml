<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1673_httpd-2.2.11.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">flush_libz_buffer<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">deflate_ctx<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">ctx<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">deflate_filter_config<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">c<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
                             <parameter><decl><type><name><name pos:line="2" pos:column="30">struct<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">apr_bucket_alloc_t<pos:position pos:line="2" pos:column="55"/></name></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">bucket_alloc<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>,
                             <parameter><function_decl><type><name pos:line="3" pos:column="30">int<pos:position pos:line="3" pos:column="33"/></name></type> (<modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier><name pos:line="3" pos:column="36">libz_func<pos:position pos:line="3" pos:column="45"/></name>)<parameter_list pos:line="3" pos:column="46">(<parameter><decl><type><name pos:line="3" pos:column="47">z_streamp<pos:position pos:line="3" pos:column="56"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="58">int<pos:position pos:line="3" pos:column="61"/></name></type></decl></parameter>)<pos:position pos:line="3" pos:column="62"/></parameter_list></function_decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="64">int<pos:position pos:line="3" pos:column="67"/></name></type> <name pos:line="3" pos:column="68">flush<pos:position pos:line="3" pos:column="73"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="4" pos:column="30">int<pos:position pos:line="4" pos:column="33"/></name></type> <name pos:line="4" pos:column="34">crc<pos:position pos:line="4" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="38"/></parameter_list>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">zRC<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><name pos:line="6" pos:column="15">Z_OK<pos:position pos:line="6" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">done<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">unsigned<pos:position pos:line="8" pos:column="13"/></name> <name pos:line="8" pos:column="14">int<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">deflate_len<pos:position pos:line="8" pos:column="29"/></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_bucket<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">b<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>

    <for pos:line="11" pos:column="5">for <control pos:line="11" pos:column="9">(<init pos:line="11" pos:column="10">;<pos:position pos:line="11" pos:column="11"/></init><condition pos:line="11" pos:column="11">;<pos:position pos:line="11" pos:column="12"/></condition><incr/>)<pos:position pos:line="11" pos:column="13"/></control> <block pos:line="11" pos:column="14">{
         <expr_stmt><expr><name pos:line="12" pos:column="10">deflate_len<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <name><name pos:line="12" pos:column="24">c<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">-&gt;<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="27">bufferSize<pos:position pos:line="12" pos:column="37"/></name></name> <operator pos:line="12" pos:column="38">-<pos:position pos:line="12" pos:column="39"/></operator> <name><name pos:line="12" pos:column="40">ctx<pos:position pos:line="12" pos:column="43"/></name><operator pos:line="12" pos:column="43">-&gt;<pos:position pos:line="12" pos:column="48"/></operator><name pos:line="12" pos:column="45">stream<pos:position pos:line="12" pos:column="51"/></name><operator pos:line="12" pos:column="51">.<pos:position pos:line="12" pos:column="52"/></operator><name pos:line="12" pos:column="52">avail_out<pos:position pos:line="12" pos:column="61"/></name></name></expr>;<pos:position pos:line="12" pos:column="62"/></expr_stmt>

         <if pos:line="14" pos:column="10">if <condition pos:line="14" pos:column="13">(<expr><name pos:line="14" pos:column="14">deflate_len<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">!=<pos:position pos:line="14" pos:column="28"/></operator> <literal type="number" pos:line="14" pos:column="29">0<pos:position pos:line="14" pos:column="30"/></literal></expr>)<pos:position pos:line="14" pos:column="31"/></condition><then pos:line="14" pos:column="31"> <block pos:line="14" pos:column="32">{
             <comment type="block" pos:line="15" pos:column="14">/*
              * Do we need to update ctx-&gt;crc? Usually this is the case for
              * inflate action where we need to do a crc on the output, whereas
              * in the deflate case we need to do a crc on the input
              */</comment>
             <if pos:line="20" pos:column="14">if <condition pos:line="20" pos:column="17">(<expr><name pos:line="20" pos:column="18">crc<pos:position pos:line="20" pos:column="21"/></name></expr>)<pos:position pos:line="20" pos:column="22"/></condition><then pos:line="20" pos:column="22"> <block pos:line="20" pos:column="23">{
                 <expr_stmt><expr><name><name pos:line="21" pos:column="18">ctx<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">-&gt;<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="23">crc<pos:position pos:line="21" pos:column="26"/></name></name> <operator pos:line="21" pos:column="27">=<pos:position pos:line="21" pos:column="28"/></operator> <call><name pos:line="21" pos:column="29">crc32<pos:position pos:line="21" pos:column="34"/></name><argument_list pos:line="21" pos:column="34">(<argument><expr><name><name pos:line="21" pos:column="35">ctx<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">-&gt;<pos:position pos:line="21" pos:column="43"/></operator><name pos:line="21" pos:column="40">crc<pos:position pos:line="21" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="45">(<pos:position pos:line="21" pos:column="46"/></operator><specifier pos:line="21" pos:column="46">const<pos:position pos:line="21" pos:column="51"/></specifier> <name pos:line="21" pos:column="52">Bytef<pos:position pos:line="21" pos:column="57"/></name> <operator pos:line="21" pos:column="58">*<pos:position pos:line="21" pos:column="59"/></operator><operator pos:line="21" pos:column="59">)<pos:position pos:line="21" pos:column="60"/></operator><name><name pos:line="21" pos:column="60">ctx<pos:position pos:line="21" pos:column="63"/></name><operator pos:line="21" pos:column="63">-&gt;<pos:position pos:line="21" pos:column="68"/></operator><name pos:line="21" pos:column="65">buffer<pos:position pos:line="21" pos:column="71"/></name></name></expr></argument>,
                                  <argument><expr><name pos:line="22" pos:column="35">deflate_len<pos:position pos:line="22" pos:column="46"/></name></expr></argument>)<pos:position pos:line="22" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="48"/></expr_stmt>
             }<pos:position pos:line="23" pos:column="15"/></block></then></if>
             <expr_stmt><expr><name pos:line="24" pos:column="14">b<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <call><name pos:line="24" pos:column="18">apr_bucket_heap_create<pos:position pos:line="24" pos:column="40"/></name><argument_list pos:line="24" pos:column="40">(<argument><expr><operator pos:line="24" pos:column="41">(<pos:position pos:line="24" pos:column="42"/></operator><name pos:line="24" pos:column="42">char<pos:position pos:line="24" pos:column="46"/></name> <operator pos:line="24" pos:column="47">*<pos:position pos:line="24" pos:column="48"/></operator><operator pos:line="24" pos:column="48">)<pos:position pos:line="24" pos:column="49"/></operator><name><name pos:line="24" pos:column="49">ctx<pos:position pos:line="24" pos:column="52"/></name><operator pos:line="24" pos:column="52">-&gt;<pos:position pos:line="24" pos:column="57"/></operator><name pos:line="24" pos:column="54">buffer<pos:position pos:line="24" pos:column="60"/></name></name></expr></argument>,
                                        <argument><expr><name pos:line="25" pos:column="41">deflate_len<pos:position pos:line="25" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="54">NULL<pos:position pos:line="25" pos:column="58"/></name></expr></argument>,
                                        <argument><expr><name pos:line="26" pos:column="41">bucket_alloc<pos:position pos:line="26" pos:column="53"/></name></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="55"/></expr_stmt>
             <expr_stmt><expr><call><name pos:line="27" pos:column="14">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><name><name pos:line="27" pos:column="38">ctx<pos:position pos:line="27" pos:column="41"/></name><operator pos:line="27" pos:column="41">-&gt;<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="43">bb<pos:position pos:line="27" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="47">b<pos:position pos:line="27" pos:column="48"/></name></expr></argument>)<pos:position pos:line="27" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="50"/></expr_stmt>
             <expr_stmt><expr><name><name pos:line="28" pos:column="14">ctx<pos:position pos:line="28" pos:column="17"/></name><operator pos:line="28" pos:column="17">-&gt;<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="19">stream<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">.<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="26">next_out<pos:position pos:line="28" pos:column="34"/></name></name> <operator pos:line="28" pos:column="35">=<pos:position pos:line="28" pos:column="36"/></operator> <name><name pos:line="28" pos:column="37">ctx<pos:position pos:line="28" pos:column="40"/></name><operator pos:line="28" pos:column="40">-&gt;<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="42">buffer<pos:position pos:line="28" pos:column="48"/></name></name></expr>;<pos:position pos:line="28" pos:column="49"/></expr_stmt>
             <expr_stmt><expr><name><name pos:line="29" pos:column="14">ctx<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">-&gt;<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="19">stream<pos:position pos:line="29" pos:column="25"/></name><operator pos:line="29" pos:column="25">.<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="26">avail_out<pos:position pos:line="29" pos:column="35"/></name></name> <operator pos:line="29" pos:column="36">=<pos:position pos:line="29" pos:column="37"/></operator> <name><name pos:line="29" pos:column="38">c<pos:position pos:line="29" pos:column="39"/></name><operator pos:line="29" pos:column="39">-&gt;<pos:position pos:line="29" pos:column="44"/></operator><name pos:line="29" pos:column="41">bufferSize<pos:position pos:line="29" pos:column="51"/></name></name></expr>;<pos:position pos:line="29" pos:column="52"/></expr_stmt>
         }<pos:position pos:line="30" pos:column="11"/></block></then></if>

         <if pos:line="32" pos:column="10">if <condition pos:line="32" pos:column="13">(<expr><name pos:line="32" pos:column="14">done<pos:position pos:line="32" pos:column="18"/></name></expr>)<pos:position pos:line="32" pos:column="19"/></condition><then pos:line="32" pos:column="19">
             <block type="pseudo"><break pos:line="33" pos:column="14">break;<pos:position pos:line="33" pos:column="20"/></break></block></then></if>

         <expr_stmt><expr><name pos:line="35" pos:column="10">zRC<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">=<pos:position pos:line="35" pos:column="15"/></operator> <call><name pos:line="35" pos:column="16">libz_func<pos:position pos:line="35" pos:column="25"/></name><argument_list pos:line="35" pos:column="25">(<argument><expr><operator pos:line="35" pos:column="26">&amp;<pos:position pos:line="35" pos:column="31"/></operator><name><name pos:line="35" pos:column="27">ctx<pos:position pos:line="35" pos:column="30"/></name><operator pos:line="35" pos:column="30">-&gt;<pos:position pos:line="35" pos:column="35"/></operator><name pos:line="35" pos:column="32">stream<pos:position pos:line="35" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="40">flush<pos:position pos:line="35" pos:column="45"/></name></expr></argument>)<pos:position pos:line="35" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="47"/></expr_stmt>

         <comment type="block" pos:line="37" pos:column="10">/*
          * We can ignore Z_BUF_ERROR because:
          * When we call libz_func we can assume that
          *
          * - avail_in is zero (due to the surrounding code that calls
          *   flush_libz_buffer)
          * - avail_out is non zero due to our actions some lines above
          *
          * So the only reason for Z_BUF_ERROR is that the internal libz
          * buffers are now empty and thus we called libz_func one time
          * too often. This does not hurt. It simply says that we are done.
          */</comment>
         <if pos:line="49" pos:column="10">if <condition pos:line="49" pos:column="13">(<expr><name pos:line="49" pos:column="14">zRC<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">==<pos:position pos:line="49" pos:column="20"/></operator> <name pos:line="49" pos:column="21">Z_BUF_ERROR<pos:position pos:line="49" pos:column="32"/></name></expr>)<pos:position pos:line="49" pos:column="33"/></condition><then pos:line="49" pos:column="33"> <block pos:line="49" pos:column="34">{
             <expr_stmt><expr><name pos:line="50" pos:column="14">zRC<pos:position pos:line="50" pos:column="17"/></name> <operator pos:line="50" pos:column="18">=<pos:position pos:line="50" pos:column="19"/></operator> <name pos:line="50" pos:column="20">Z_OK<pos:position pos:line="50" pos:column="24"/></name></expr>;<pos:position pos:line="50" pos:column="25"/></expr_stmt>
             <break pos:line="51" pos:column="14">break;<pos:position pos:line="51" pos:column="20"/></break>
         }<pos:position pos:line="52" pos:column="11"/></block></then></if>

         <expr_stmt><expr><name pos:line="54" pos:column="10">done<pos:position pos:line="54" pos:column="14"/></name> <operator pos:line="54" pos:column="15">=<pos:position pos:line="54" pos:column="16"/></operator> <operator pos:line="54" pos:column="17">(<pos:position pos:line="54" pos:column="18"/></operator><name><name pos:line="54" pos:column="18">ctx<pos:position pos:line="54" pos:column="21"/></name><operator pos:line="54" pos:column="21">-&gt;<pos:position pos:line="54" pos:column="26"/></operator><name pos:line="54" pos:column="23">stream<pos:position pos:line="54" pos:column="29"/></name><operator pos:line="54" pos:column="29">.<pos:position pos:line="54" pos:column="30"/></operator><name pos:line="54" pos:column="30">avail_out<pos:position pos:line="54" pos:column="39"/></name></name> <operator pos:line="54" pos:column="40">!=<pos:position pos:line="54" pos:column="42"/></operator> <literal type="number" pos:line="54" pos:column="43">0<pos:position pos:line="54" pos:column="44"/></literal> <operator pos:line="54" pos:column="45">||<pos:position pos:line="54" pos:column="47"/></operator> <name pos:line="54" pos:column="48">zRC<pos:position pos:line="54" pos:column="51"/></name> <operator pos:line="54" pos:column="52">==<pos:position pos:line="54" pos:column="54"/></operator> <name pos:line="54" pos:column="55">Z_STREAM_END<pos:position pos:line="54" pos:column="67"/></name><operator pos:line="54" pos:column="67">)<pos:position pos:line="54" pos:column="68"/></operator></expr>;<pos:position pos:line="54" pos:column="69"/></expr_stmt>

         <if pos:line="56" pos:column="10">if <condition pos:line="56" pos:column="13">(<expr><name pos:line="56" pos:column="14">zRC<pos:position pos:line="56" pos:column="17"/></name> <operator pos:line="56" pos:column="18">!=<pos:position pos:line="56" pos:column="20"/></operator> <name pos:line="56" pos:column="21">Z_OK<pos:position pos:line="56" pos:column="25"/></name> <operator pos:line="56" pos:column="26">&amp;&amp;<pos:position pos:line="56" pos:column="36"/></operator> <name pos:line="56" pos:column="29">zRC<pos:position pos:line="56" pos:column="32"/></name> <operator pos:line="56" pos:column="33">!=<pos:position pos:line="56" pos:column="35"/></operator> <name pos:line="56" pos:column="36">Z_STREAM_END<pos:position pos:line="56" pos:column="48"/></name></expr>)<pos:position pos:line="56" pos:column="49"/></condition><then pos:line="56" pos:column="49">
             <block type="pseudo"><break pos:line="57" pos:column="14">break;<pos:position pos:line="57" pos:column="20"/></break></block></then></if>
    }<pos:position pos:line="58" pos:column="6"/></block></for>
    <return pos:line="59" pos:column="5">return <expr><name pos:line="59" pos:column="12">zRC<pos:position pos:line="59" pos:column="15"/></name></expr>;<pos:position pos:line="59" pos:column="16"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
