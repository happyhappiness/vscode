<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2446_httpd-2.0.55.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">get_random_info<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">unsigned<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name></type> <name><name pos:line="1" pos:column="43">node<pos:position pos:line="1" pos:column="47"/></name><index pos:line="1" pos:column="47">[<expr><name pos:line="1" pos:column="48">NODE_LENGTH<pos:position pos:line="1" pos:column="59"/></name></expr>]<pos:position pos:line="1" pos:column="60"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">APR_HAS_RANDOM<pos:position pos:line="3" pos:column="19"/></name></expr></cpp:if>

    <expr_stmt><expr><operator pos:line="5" pos:column="5">(<pos:position pos:line="5" pos:column="6"/></operator><name pos:line="5" pos:column="6">void<pos:position pos:line="5" pos:column="10"/></name><operator pos:line="5" pos:column="10">)<pos:position pos:line="5" pos:column="11"/></operator> <call><name pos:line="5" pos:column="12">apr_generate_random_bytes<pos:position pos:line="5" pos:column="37"/></name><argument_list pos:line="5" pos:column="37">(<argument><expr><name pos:line="5" pos:column="38">node<pos:position pos:line="5" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="44">NODE_LENGTH<pos:position pos:line="5" pos:column="55"/></name></expr></argument>)<pos:position pos:line="5" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="57"/></expr_stmt>

<cpp:else pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">else<pos:position pos:line="7" pos:column="6"/></cpp:directive></cpp:else>

    <decl_stmt><decl><type><name pos:line="9" pos:column="5">unsigned<pos:position pos:line="9" pos:column="13"/></name> <name pos:line="9" pos:column="14">char<pos:position pos:line="9" pos:column="18"/></name></type> <name><name pos:line="9" pos:column="19">seed<pos:position pos:line="9" pos:column="23"/></name><index pos:line="9" pos:column="23">[<expr><name pos:line="9" pos:column="24">MD5_DIGESTSIZE<pos:position pos:line="9" pos:column="38"/></name></expr>]<pos:position pos:line="9" pos:column="39"/></index></name></decl>;<pos:position pos:line="9" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_md5_ctx_t<pos:position pos:line="10" pos:column="18"/></name></type> <name pos:line="10" pos:column="19">c<pos:position pos:line="10" pos:column="20"/></name></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* ### probably should revise some of this to be a bit more portable */</comment>

    <comment type="block" pos:line="14" pos:column="5">/* Leach &amp; Salz use Linux-specific struct sysinfo;
     * replace with pid/tid for portability (in the spirit of mod_unique_id) */</comment>
    <struct pos:line="16" pos:column="5">struct <block pos:line="16" pos:column="12">{<public type="default" pos:line="16" pos:column="13">
	<comment type="block" pos:line="17" pos:column="9">/* Add thread id here, if applicable, when we get to pthread or apr */</comment>
        <decl_stmt><decl><type><name pos:line="18" pos:column="9">pid_t<pos:position pos:line="18" pos:column="14"/></name></type> <name pos:line="18" pos:column="15">pid<pos:position pos:line="18" pos:column="18"/></name></decl>;<pos:position pos:line="18" pos:column="19"/></decl_stmt>
<cpp:ifdef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifdef<pos:position pos:line="19" pos:column="7"/></cpp:directive> <name pos:line="19" pos:column="8">NETWARE<pos:position pos:line="19" pos:column="15"/></name></cpp:ifdef>
        <decl_stmt><decl><type><name pos:line="20" pos:column="9">apr_uint64_t<pos:position pos:line="20" pos:column="21"/></name></type> <name pos:line="20" pos:column="22">t<pos:position pos:line="20" pos:column="23"/></name></decl>;<pos:position pos:line="20" pos:column="24"/></decl_stmt>
<cpp:else pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">else<pos:position pos:line="21" pos:column="6"/></cpp:directive></cpp:else>
        <decl_stmt><decl><type><name><name pos:line="22" pos:column="9">struct<pos:position pos:line="22" pos:column="15"/></name> <name pos:line="22" pos:column="16">timeval<pos:position pos:line="22" pos:column="23"/></name></name></type> <name pos:line="22" pos:column="24">t<pos:position pos:line="22" pos:column="25"/></name></decl>;<pos:position pos:line="22" pos:column="26"/></decl_stmt>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>
        <decl_stmt><decl><type><name pos:line="24" pos:column="9">char<pos:position pos:line="24" pos:column="13"/></name></type> <name><name pos:line="24" pos:column="14">hostname<pos:position pos:line="24" pos:column="22"/></name><index pos:line="24" pos:column="22">[<expr><literal type="number" pos:line="24" pos:column="23">257<pos:position pos:line="24" pos:column="26"/></literal></expr>]<pos:position pos:line="24" pos:column="27"/></index></name></decl>;<pos:position pos:line="24" pos:column="28"/></decl_stmt>

    <pos:position pos:line="26" pos:column="5"/></public>}<pos:position pos:line="26" pos:column="6"/></block> <decl><name pos:line="26" pos:column="7">r<pos:position pos:line="26" pos:column="8"/></name></decl>;<pos:position pos:line="26" pos:column="9"/></struct>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">apr_md5_init<pos:position pos:line="28" pos:column="17"/></name><argument_list pos:line="28" pos:column="17">(<argument><expr><operator pos:line="28" pos:column="18">&amp;<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="19">c<pos:position pos:line="28" pos:column="20"/></name></expr></argument>)<pos:position pos:line="28" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="22"/></expr_stmt>
<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef<pos:position pos:line="29" pos:column="7"/></cpp:directive> <name pos:line="29" pos:column="8">NETWARE<pos:position pos:line="29" pos:column="15"/></name></cpp:ifdef>
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">r<pos:position pos:line="30" pos:column="6"/></name><operator pos:line="30" pos:column="6">.<pos:position pos:line="30" pos:column="7"/></operator><name pos:line="30" pos:column="7">pid<pos:position pos:line="30" pos:column="10"/></name></name> <operator pos:line="30" pos:column="11">=<pos:position pos:line="30" pos:column="12"/></operator> <call><name pos:line="30" pos:column="13">NXThreadGetId<pos:position pos:line="30" pos:column="26"/></name><argument_list pos:line="30" pos:column="26">()<pos:position pos:line="30" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">NXGetTime<pos:position pos:line="31" pos:column="14"/></name><argument_list pos:line="31" pos:column="14">(<argument><expr><name pos:line="31" pos:column="15">NX_SINCE_BOOT<pos:position pos:line="31" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="30">NX_USECONDS<pos:position pos:line="31" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="43">&amp;<pos:position pos:line="31" pos:column="48"/></operator><operator pos:line="31" pos:column="44">(<pos:position pos:line="31" pos:column="45"/></operator><name><name pos:line="31" pos:column="45">r<pos:position pos:line="31" pos:column="46"/></name><operator pos:line="31" pos:column="46">.<pos:position pos:line="31" pos:column="47"/></operator><name pos:line="31" pos:column="47">t<pos:position pos:line="31" pos:column="48"/></name></name><operator pos:line="31" pos:column="48">)<pos:position pos:line="31" pos:column="49"/></operator></expr></argument>)<pos:position pos:line="31" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="51"/></expr_stmt>
<cpp:else pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">else<pos:position pos:line="32" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">r<pos:position pos:line="33" pos:column="6"/></name><operator pos:line="33" pos:column="6">.<pos:position pos:line="33" pos:column="7"/></operator><name pos:line="33" pos:column="7">pid<pos:position pos:line="33" pos:column="10"/></name></name> <operator pos:line="33" pos:column="11">=<pos:position pos:line="33" pos:column="12"/></operator> <call><name pos:line="33" pos:column="13">getpid<pos:position pos:line="33" pos:column="19"/></name><argument_list pos:line="33" pos:column="19">()<pos:position pos:line="33" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">gettimeofday<pos:position pos:line="34" pos:column="17"/></name><argument_list pos:line="34" pos:column="17">(<argument><expr><operator pos:line="34" pos:column="18">&amp;<pos:position pos:line="34" pos:column="23"/></operator><name><name pos:line="34" pos:column="19">r<pos:position pos:line="34" pos:column="20"/></name><operator pos:line="34" pos:column="20">.<pos:position pos:line="34" pos:column="21"/></operator><name pos:line="34" pos:column="21">t<pos:position pos:line="34" pos:column="22"/></name></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="24">(<pos:position pos:line="34" pos:column="25"/></operator>struct <name pos:line="34" pos:column="32">timezone<pos:position pos:line="34" pos:column="40"/></name> <operator pos:line="34" pos:column="41">*<pos:position pos:line="34" pos:column="42"/></operator><operator pos:line="34" pos:column="42">)<pos:position pos:line="34" pos:column="43"/></operator><literal type="number" pos:line="34" pos:column="43">0<pos:position pos:line="34" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="46"/></expr_stmt>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">gethostname<pos:position pos:line="36" pos:column="16"/></name><argument_list pos:line="36" pos:column="16">(<argument><expr><name><name pos:line="36" pos:column="17">r<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">.<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="19">hostname<pos:position pos:line="36" pos:column="27"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="29">256<pos:position pos:line="36" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">apr_md5_update<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><operator pos:line="37" pos:column="20">&amp;<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="21">c<pos:position pos:line="37" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="24">(<pos:position pos:line="37" pos:column="25"/></operator><specifier pos:line="37" pos:column="25">const<pos:position pos:line="37" pos:column="30"/></specifier> <name pos:line="37" pos:column="31">unsigned<pos:position pos:line="37" pos:column="39"/></name> <name pos:line="37" pos:column="40">char<pos:position pos:line="37" pos:column="44"/></name> <operator pos:line="37" pos:column="45">*<pos:position pos:line="37" pos:column="46"/></operator><operator pos:line="37" pos:column="46">)<pos:position pos:line="37" pos:column="47"/></operator><operator pos:line="37" pos:column="47">&amp;<pos:position pos:line="37" pos:column="52"/></operator><name pos:line="37" pos:column="48">r<pos:position pos:line="37" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="51">sizeof<argument_list pos:line="37" pos:column="57">(<argument><expr><name pos:line="37" pos:column="58">r<pos:position pos:line="37" pos:column="59"/></name></expr></argument>)<pos:position pos:line="37" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">apr_md5_final<pos:position pos:line="38" pos:column="18"/></name><argument_list pos:line="38" pos:column="18">(<argument><expr><name pos:line="38" pos:column="19">seed<pos:position pos:line="38" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="25">&amp;<pos:position pos:line="38" pos:column="30"/></operator><name pos:line="38" pos:column="26">c<pos:position pos:line="38" pos:column="27"/></name></expr></argument>)<pos:position pos:line="38" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">memcpy<pos:position pos:line="40" pos:column="11"/></name><argument_list pos:line="40" pos:column="11">(<argument><expr><name pos:line="40" pos:column="12">node<pos:position pos:line="40" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="18">seed<pos:position pos:line="40" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="24">NODE_LENGTH<pos:position pos:line="40" pos:column="35"/></name></expr></argument>)<pos:position pos:line="40" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>    <comment type="block" pos:line="40" pos:column="41">/* use a subset of the seed bytes */</comment>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
