<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_922_httpd-2.4.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">ssl_var_lookup_ssl_cert_dn_oneline<pos:position pos:line="1" pos:column="48"/></name><parameter_list pos:line="1" pos:column="48">(<parameter><decl><type><name pos:line="1" pos:column="49">apr_pool_t<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">p<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="64">request_rec<pos:position pos:line="1" pos:column="75"/></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type><name pos:line="1" pos:column="77">r<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,
                                                <parameter><decl><type><name pos:line="2" pos:column="49">X509_NAME<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">xsname<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="67"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">result<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><name pos:line="4" pos:column="20">NULL<pos:position pos:line="4" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">SSLDirConfigRec<pos:position pos:line="5" pos:column="20"/></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">dc<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">legacy_format<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><literal type="number" pos:line="6" pos:column="25">0<pos:position pos:line="6" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">r<pos:position pos:line="7" pos:column="10"/></name></expr>)<pos:position pos:line="7" pos:column="11"/></condition><then pos:line="7" pos:column="11"> <block pos:line="7" pos:column="12">{
        <expr_stmt><expr><name pos:line="8" pos:column="9">dc<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <call><name pos:line="8" pos:column="14">myDirConfig<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">(<argument><expr><name pos:line="8" pos:column="26">r<pos:position pos:line="8" pos:column="27"/></name></expr></argument>)<pos:position pos:line="8" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="9" pos:column="9">legacy_format<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">=<pos:position pos:line="9" pos:column="24"/></operator> <name><name pos:line="9" pos:column="25">dc<pos:position pos:line="9" pos:column="27"/></name><operator pos:line="9" pos:column="27">-&gt;<pos:position pos:line="9" pos:column="32"/></operator><name pos:line="9" pos:column="29">nOptions<pos:position pos:line="9" pos:column="37"/></name></name> <operator pos:line="9" pos:column="38">&amp;<pos:position pos:line="9" pos:column="43"/></operator> <name pos:line="9" pos:column="40">SSL_OPT_LEGACYDNFORMAT<pos:position pos:line="9" pos:column="62"/></name></expr>;<pos:position pos:line="9" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">legacy_format<pos:position pos:line="11" pos:column="22"/></name></expr>)<pos:position pos:line="11" pos:column="23"/></condition><then pos:line="11" pos:column="23"> <block pos:line="11" pos:column="24">{
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name pos:line="12" pos:column="15">cp<pos:position pos:line="12" pos:column="17"/></name> <init pos:line="12" pos:column="18">= <expr><call><name pos:line="12" pos:column="20">X509_NAME_oneline<pos:position pos:line="12" pos:column="37"/></name><argument_list pos:line="12" pos:column="37">(<argument><expr><name pos:line="12" pos:column="38">xsname<pos:position pos:line="12" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="46">NULL<pos:position pos:line="12" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="52">0<pos:position pos:line="12" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="55"/></decl_stmt>
        <expr_stmt><expr><name pos:line="13" pos:column="9">result<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <call><name pos:line="13" pos:column="18">apr_pstrdup<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">p<pos:position pos:line="13" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="33">cp<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">OPENSSL_free<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">cp<pos:position pos:line="14" pos:column="24"/></name></expr></argument>)<pos:position pos:line="14" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then>
    <else pos:line="16" pos:column="5">else <block pos:line="16" pos:column="10">{
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">BIO<pos:position pos:line="17" pos:column="12"/></name><modifier pos:line="17" pos:column="12">*<pos:position pos:line="17" pos:column="13"/></modifier></type> <name pos:line="17" pos:column="14">bio<pos:position pos:line="17" pos:column="17"/></name></decl>;<pos:position pos:line="17" pos:column="18"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="18" pos:column="9">int<pos:position pos:line="18" pos:column="12"/></name></type> <name pos:line="18" pos:column="13">n<pos:position pos:line="18" pos:column="14"/></name></decl>;<pos:position pos:line="18" pos:column="15"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="19" pos:column="9">unsigned<pos:position pos:line="19" pos:column="17"/></name> <name pos:line="19" pos:column="18">long<pos:position pos:line="19" pos:column="22"/></name></type> <name pos:line="19" pos:column="23">flags<pos:position pos:line="19" pos:column="28"/></name> <init pos:line="19" pos:column="29">= <expr><name pos:line="19" pos:column="31">XN_FLAG_RFC2253<pos:position pos:line="19" pos:column="46"/></name> <operator pos:line="19" pos:column="47">&amp;<pos:position pos:line="19" pos:column="52"/></operator> <operator pos:line="19" pos:column="49">~<pos:position pos:line="19" pos:column="50"/></operator><name pos:line="19" pos:column="50">ASN1_STRFLGS_ESC_MSB<pos:position pos:line="19" pos:column="70"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="71"/></decl_stmt>
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">(<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">bio<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <call><name pos:line="20" pos:column="20">BIO_new<pos:position pos:line="20" pos:column="27"/></name><argument_list pos:line="20" pos:column="27">(<argument><expr><call><name pos:line="20" pos:column="28">BIO_s_mem<pos:position pos:line="20" pos:column="37"/></name><argument_list pos:line="20" pos:column="37">()<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call><operator pos:line="20" pos:column="40">)<pos:position pos:line="20" pos:column="41"/></operator> <operator pos:line="20" pos:column="42">==<pos:position pos:line="20" pos:column="44"/></operator> <name pos:line="20" pos:column="45">NULL<pos:position pos:line="20" pos:column="49"/></name></expr>)<pos:position pos:line="20" pos:column="50"/></condition><then pos:line="20" pos:column="50">
            <block type="pseudo"><return pos:line="21" pos:column="13">return <expr><name pos:line="21" pos:column="20">NULL<pos:position pos:line="21" pos:column="24"/></name></expr>;<pos:position pos:line="21" pos:column="25"/></return></block></then></if>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">X509_NAME_print_ex<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">bio<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="33">xsname<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="41">0<pos:position pos:line="22" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="44">flags<pos:position pos:line="22" pos:column="49"/></name></expr></argument>)<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><name pos:line="23" pos:column="9">n<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <call><name pos:line="23" pos:column="13">BIO_pending<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">bio<pos:position pos:line="23" pos:column="28"/></name></expr></argument>)<pos:position pos:line="23" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt>
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">n<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">&gt;<pos:position pos:line="24" pos:column="19"/></operator> <literal type="number" pos:line="24" pos:column="17">0<pos:position pos:line="24" pos:column="18"/></literal></expr>)<pos:position pos:line="24" pos:column="19"/></condition><then pos:line="24" pos:column="19"> <block pos:line="24" pos:column="20">{
            <expr_stmt><expr><name pos:line="25" pos:column="13">result<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">=<pos:position pos:line="25" pos:column="21"/></operator> <call><name pos:line="25" pos:column="22">apr_palloc<pos:position pos:line="25" pos:column="32"/></name><argument_list pos:line="25" pos:column="32">(<argument><expr><name pos:line="25" pos:column="33">p<pos:position pos:line="25" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="36">n<pos:position pos:line="25" pos:column="37"/></name><operator pos:line="25" pos:column="37">+<pos:position pos:line="25" pos:column="38"/></operator><literal type="number" pos:line="25" pos:column="38">1<pos:position pos:line="25" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><name pos:line="26" pos:column="13">n<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <call><name pos:line="26" pos:column="17">BIO_read<pos:position pos:line="26" pos:column="25"/></name><argument_list pos:line="26" pos:column="25">(<argument><expr><name pos:line="26" pos:column="26">bio<pos:position pos:line="26" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="31">result<pos:position pos:line="26" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="39">n<pos:position pos:line="26" pos:column="40"/></name></expr></argument>)<pos:position pos:line="26" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="27" pos:column="13">result<pos:position pos:line="27" pos:column="19"/></name><index pos:line="27" pos:column="19">[<expr><name pos:line="27" pos:column="20">n<pos:position pos:line="27" pos:column="21"/></name></expr>]<pos:position pos:line="27" pos:column="22"/></index></name> <operator pos:line="27" pos:column="23">=<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">NUL<pos:position pos:line="27" pos:column="28"/></name></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">BIO_free<pos:position pos:line="29" pos:column="17"/></name><argument_list pos:line="29" pos:column="17">(<argument><expr><name pos:line="29" pos:column="18">bio<pos:position pos:line="29" pos:column="21"/></name></expr></argument>)<pos:position pos:line="29" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></else></if>
    <return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">result<pos:position pos:line="31" pos:column="18"/></name></expr>;<pos:position pos:line="31" pos:column="19"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
