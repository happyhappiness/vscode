<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3041_httpd-2.2.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">md5_update_buffer<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">apr_md5_ctx_t<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">context<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
                                      <parameter><decl><type><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <name pos:line="2" pos:column="45">void<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">vinput<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="3" pos:column="39">apr_size_t<pos:position pos:line="3" pos:column="49"/></name></type> <name pos:line="3" pos:column="50">inputLen<pos:position pos:line="3" pos:column="58"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="4" pos:column="39">int<pos:position pos:line="4" pos:column="42"/></name></type> <name pos:line="4" pos:column="43">xlate_buffer<pos:position pos:line="4" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="56"/></parameter_list>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">unsigned<pos:position pos:line="6" pos:column="19"/></name> <name pos:line="6" pos:column="20">char<pos:position pos:line="6" pos:column="24"/></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier></type><name pos:line="6" pos:column="26">input<pos:position pos:line="6" pos:column="31"/></name> <init pos:line="6" pos:column="32">= <expr><name pos:line="6" pos:column="34">vinput<pos:position pos:line="6" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">unsigned<pos:position pos:line="7" pos:column="13"/></name> <name pos:line="7" pos:column="14">int<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">i<pos:position pos:line="7" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="21">idx<pos:position pos:line="7" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="26">partLen<pos:position pos:line="7" pos:column="33"/></name></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>
<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">APR_HAS_XLATE<pos:position pos:line="8" pos:column="18"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_size_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">inbytes_left<pos:position pos:line="9" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="30">outbytes_left<pos:position pos:line="9" pos:column="43"/></name></decl>;<pos:position pos:line="9" pos:column="44"/></decl_stmt>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="12" pos:column="5">/* Compute number of bytes mod 64 */</comment>
    <expr_stmt><expr><name pos:line="13" pos:column="5">idx<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">=<pos:position pos:line="13" pos:column="10"/></operator> <call pos:line="13" pos:column="11">(<name pos:line="13" pos:column="12">unsigned<pos:position pos:line="13" pos:column="20"/></name> <name pos:line="13" pos:column="21">int<pos:position pos:line="13" pos:column="24"/></name>)<argument_list pos:line="13" pos:column="25">(<argument><expr><operator pos:line="13" pos:column="26">(<pos:position pos:line="13" pos:column="27"/></operator><name><name pos:line="13" pos:column="27">context<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">-&gt;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="36">count<pos:position pos:line="13" pos:column="41"/></name><index pos:line="13" pos:column="41">[<expr><literal type="number" pos:line="13" pos:column="42">0<pos:position pos:line="13" pos:column="43"/></literal></expr>]<pos:position pos:line="13" pos:column="44"/></index></name> <operator pos:line="13" pos:column="45">&gt;&gt;<pos:position pos:line="13" pos:column="50"/></operator> <literal type="number" pos:line="13" pos:column="48">3<pos:position pos:line="13" pos:column="49"/></literal><operator pos:line="13" pos:column="49">)<pos:position pos:line="13" pos:column="50"/></operator> <operator pos:line="13" pos:column="51">&amp;<pos:position pos:line="13" pos:column="56"/></operator> <literal type="number" pos:line="13" pos:column="53">0x3F<pos:position pos:line="13" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* Update number of bits */</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">(<pos:position pos:line="16" pos:column="10"/></operator><name><name pos:line="16" pos:column="10">context<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">-&gt;<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="19">count<pos:position pos:line="16" pos:column="24"/></name><index pos:line="16" pos:column="24">[<expr><literal type="number" pos:line="16" pos:column="25">0<pos:position pos:line="16" pos:column="26"/></literal></expr>]<pos:position pos:line="16" pos:column="27"/></index></name> <operator pos:line="16" pos:column="28">+=<pos:position pos:line="16" pos:column="30"/></operator> <operator pos:line="16" pos:column="31">(<pos:position pos:line="16" pos:column="32"/></operator><operator pos:line="16" pos:column="32">(<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="33">apr_uint32_t<pos:position pos:line="16" pos:column="45"/></name><operator pos:line="16" pos:column="45">)<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="46">inputLen<pos:position pos:line="16" pos:column="54"/></name> <operator pos:line="16" pos:column="55">&lt;&lt;<pos:position pos:line="16" pos:column="63"/></operator> <literal type="number" pos:line="16" pos:column="58">3<pos:position pos:line="16" pos:column="59"/></literal><operator pos:line="16" pos:column="59">)<pos:position pos:line="16" pos:column="60"/></operator><operator pos:line="16" pos:column="60">)<pos:position pos:line="16" pos:column="61"/></operator> 
            <operator pos:line="17" pos:column="13">&lt;<pos:position pos:line="17" pos:column="17"/></operator> <operator pos:line="17" pos:column="15">(<pos:position pos:line="17" pos:column="16"/></operator><operator pos:line="17" pos:column="16">(<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">apr_uint32_t<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">)<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="30">inputLen<pos:position pos:line="17" pos:column="38"/></name> <operator pos:line="17" pos:column="39">&lt;&lt;<pos:position pos:line="17" pos:column="47"/></operator> <literal type="number" pos:line="17" pos:column="42">3<pos:position pos:line="17" pos:column="43"/></literal><operator pos:line="17" pos:column="43">)<pos:position pos:line="17" pos:column="44"/></operator></expr>)<pos:position pos:line="17" pos:column="45"/></condition><then pos:line="17" pos:column="45">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="18" pos:column="9">context<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">-&gt;<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="18">count<pos:position pos:line="18" pos:column="23"/></name><index pos:line="18" pos:column="23">[<expr><literal type="number" pos:line="18" pos:column="24">1<pos:position pos:line="18" pos:column="25"/></literal></expr>]<pos:position pos:line="18" pos:column="26"/></index></name><operator pos:line="18" pos:column="26">++<pos:position pos:line="18" pos:column="28"/></operator></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">context<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">count<pos:position pos:line="19" pos:column="19"/></name><index pos:line="19" pos:column="19">[<expr><literal type="number" pos:line="19" pos:column="20">1<pos:position pos:line="19" pos:column="21"/></literal></expr>]<pos:position pos:line="19" pos:column="22"/></index></name> <operator pos:line="19" pos:column="23">+=<pos:position pos:line="19" pos:column="25"/></operator> <operator pos:line="19" pos:column="26">(<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">apr_uint32_t<pos:position pos:line="19" pos:column="39"/></name><operator pos:line="19" pos:column="39">)<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="40">inputLen<pos:position pos:line="19" pos:column="48"/></name> <operator pos:line="19" pos:column="49">&gt;&gt;<pos:position pos:line="19" pos:column="54"/></operator> <literal type="number" pos:line="19" pos:column="52">29<pos:position pos:line="19" pos:column="54"/></literal></expr>;<pos:position pos:line="19" pos:column="55"/></expr_stmt>

    <expr_stmt><expr><name pos:line="21" pos:column="5">partLen<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <literal type="number" pos:line="21" pos:column="15">64<pos:position pos:line="21" pos:column="17"/></literal> <operator pos:line="21" pos:column="18">-<pos:position pos:line="21" pos:column="19"/></operator> <name pos:line="21" pos:column="20">idx<pos:position pos:line="21" pos:column="23"/></name></expr>;<pos:position pos:line="21" pos:column="24"/></expr_stmt>

    <comment type="block" pos:line="23" pos:column="5">/* Transform as many times as possible. */</comment>
<cpp:if pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">if<pos:position pos:line="24" pos:column="4"/></cpp:directive> <expr><operator pos:line="24" pos:column="5">!<pos:position pos:line="24" pos:column="6"/></operator><name pos:line="24" pos:column="6">APR_HAS_XLATE<pos:position pos:line="24" pos:column="19"/></name></expr></cpp:if>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">inputLen<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">&gt;=<pos:position pos:line="25" pos:column="23"/></operator> <name pos:line="25" pos:column="21">partLen<pos:position pos:line="25" pos:column="28"/></name></expr>)<pos:position pos:line="25" pos:column="29"/></condition><then pos:line="25" pos:column="29"> <block pos:line="25" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">memcpy<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><operator pos:line="26" pos:column="16">&amp;<pos:position pos:line="26" pos:column="21"/></operator><name><name pos:line="26" pos:column="17">context<pos:position pos:line="26" pos:column="24"/></name><operator pos:line="26" pos:column="24">-&gt;<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="26">buffer<pos:position pos:line="26" pos:column="32"/></name><index pos:line="26" pos:column="32">[<expr><name pos:line="26" pos:column="33">idx<pos:position pos:line="26" pos:column="36"/></name></expr>]<pos:position pos:line="26" pos:column="37"/></index></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="39">input<pos:position pos:line="26" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="46">partLen<pos:position pos:line="26" pos:column="53"/></name></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">MD5Transform<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><name><name pos:line="27" pos:column="22">context<pos:position pos:line="27" pos:column="29"/></name><operator pos:line="27" pos:column="29">-&gt;<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="31">state<pos:position pos:line="27" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="38">context<pos:position pos:line="27" pos:column="45"/></name><operator pos:line="27" pos:column="45">-&gt;<pos:position pos:line="27" pos:column="50"/></operator><name pos:line="27" pos:column="47">buffer<pos:position pos:line="27" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="55"/></expr_stmt>

        <for pos:line="29" pos:column="9">for <control pos:line="29" pos:column="13">(<init><expr><name pos:line="29" pos:column="14">i<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <name pos:line="29" pos:column="18">partLen<pos:position pos:line="29" pos:column="25"/></name></expr>;<pos:position pos:line="29" pos:column="26"/></init> <condition><expr><name pos:line="29" pos:column="27">i<pos:position pos:line="29" pos:column="28"/></name> <operator pos:line="29" pos:column="29">+<pos:position pos:line="29" pos:column="30"/></operator> <literal type="number" pos:line="29" pos:column="31">63<pos:position pos:line="29" pos:column="33"/></literal> <operator pos:line="29" pos:column="34">&lt;<pos:position pos:line="29" pos:column="38"/></operator> <name pos:line="29" pos:column="36">inputLen<pos:position pos:line="29" pos:column="44"/></name></expr>;<pos:position pos:line="29" pos:column="45"/></condition> <incr><expr><name pos:line="29" pos:column="46">i<pos:position pos:line="29" pos:column="47"/></name> <operator pos:line="29" pos:column="48">+=<pos:position pos:line="29" pos:column="50"/></operator> <literal type="number" pos:line="29" pos:column="51">64<pos:position pos:line="29" pos:column="53"/></literal></expr></incr>)<pos:position pos:line="29" pos:column="54"/></control>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="13">MD5Transform<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr><name><name pos:line="30" pos:column="26">context<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">-&gt;<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="35">state<pos:position pos:line="30" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="42">&amp;<pos:position pos:line="30" pos:column="47"/></operator><name><name pos:line="30" pos:column="43">input<pos:position pos:line="30" pos:column="48"/></name><index pos:line="30" pos:column="48">[<expr><name pos:line="30" pos:column="49">i<pos:position pos:line="30" pos:column="50"/></name></expr>]<pos:position pos:line="30" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="53"/></expr_stmt></block></for>

        <expr_stmt><expr><name pos:line="32" pos:column="9">idx<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <literal type="number" pos:line="32" pos:column="15">0<pos:position pos:line="32" pos:column="16"/></literal></expr>;<pos:position pos:line="32" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></then>
    <else pos:line="34" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="9">i<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">=<pos:position pos:line="35" pos:column="12"/></operator> <literal type="number" pos:line="35" pos:column="13">0<pos:position pos:line="35" pos:column="14"/></literal></expr>;<pos:position pos:line="35" pos:column="15"/></expr_stmt></block></else></if>

    <comment type="block" pos:line="37" pos:column="5">/* Buffer remaining input */</comment>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">memcpy<pos:position pos:line="38" pos:column="11"/></name><argument_list pos:line="38" pos:column="11">(<argument><expr><operator pos:line="38" pos:column="12">&amp;<pos:position pos:line="38" pos:column="17"/></operator><name><name pos:line="38" pos:column="13">context<pos:position pos:line="38" pos:column="20"/></name><operator pos:line="38" pos:column="20">-&gt;<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="22">buffer<pos:position pos:line="38" pos:column="28"/></name><index pos:line="38" pos:column="28">[<expr><name pos:line="38" pos:column="29">idx<pos:position pos:line="38" pos:column="32"/></name></expr>]<pos:position pos:line="38" pos:column="33"/></index></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="35">&amp;<pos:position pos:line="38" pos:column="40"/></operator><name><name pos:line="38" pos:column="36">input<pos:position pos:line="38" pos:column="41"/></name><index pos:line="38" pos:column="41">[<expr><name pos:line="38" pos:column="42">i<pos:position pos:line="38" pos:column="43"/></name></expr>]<pos:position pos:line="38" pos:column="44"/></index></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="46">inputLen<pos:position pos:line="38" pos:column="54"/></name> <operator pos:line="38" pos:column="55">-<pos:position pos:line="38" pos:column="56"/></operator> <name pos:line="38" pos:column="57">i<pos:position pos:line="38" pos:column="58"/></name></expr></argument>)<pos:position pos:line="38" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="60"/></expr_stmt>
<cpp:else pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">else<pos:position pos:line="39" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="39" pos:column="7">/*APR_HAS_XLATE*/</comment>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">inputLen<pos:position pos:line="40" pos:column="17"/></name> <operator pos:line="40" pos:column="18">&gt;=<pos:position pos:line="40" pos:column="23"/></operator> <name pos:line="40" pos:column="21">partLen<pos:position pos:line="40" pos:column="28"/></name></expr>)<pos:position pos:line="40" pos:column="29"/></condition><then pos:line="40" pos:column="29"> <block pos:line="40" pos:column="30">{
        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name><name pos:line="41" pos:column="13">context<pos:position pos:line="41" pos:column="20"/></name><operator pos:line="41" pos:column="20">-&gt;<pos:position pos:line="41" pos:column="25"/></operator><name pos:line="41" pos:column="22">xlate<pos:position pos:line="41" pos:column="27"/></name></name> <operator pos:line="41" pos:column="28">&amp;&amp;<pos:position pos:line="41" pos:column="38"/></operator> <operator pos:line="41" pos:column="31">(<pos:position pos:line="41" pos:column="32"/></operator><name pos:line="41" pos:column="32">xlate_buffer<pos:position pos:line="41" pos:column="44"/></name> <operator pos:line="41" pos:column="45">==<pos:position pos:line="41" pos:column="47"/></operator> <name pos:line="41" pos:column="48">DO_XLATE<pos:position pos:line="41" pos:column="56"/></name><operator pos:line="41" pos:column="56">)<pos:position pos:line="41" pos:column="57"/></operator></expr>)<pos:position pos:line="41" pos:column="58"/></condition><then pos:line="41" pos:column="58"> <block pos:line="41" pos:column="59">{
            <expr_stmt><expr><name pos:line="42" pos:column="13">inbytes_left<pos:position pos:line="42" pos:column="25"/></name> <operator pos:line="42" pos:column="26">=<pos:position pos:line="42" pos:column="27"/></operator> <name pos:line="42" pos:column="28">outbytes_left<pos:position pos:line="42" pos:column="41"/></name> <operator pos:line="42" pos:column="42">=<pos:position pos:line="42" pos:column="43"/></operator> <name pos:line="42" pos:column="44">partLen<pos:position pos:line="42" pos:column="51"/></name></expr>;<pos:position pos:line="42" pos:column="52"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">apr_xlate_conv_buffer<pos:position pos:line="43" pos:column="34"/></name><argument_list pos:line="43" pos:column="34">(<argument><expr><name><name pos:line="43" pos:column="35">context<pos:position pos:line="43" pos:column="42"/></name><operator pos:line="43" pos:column="42">-&gt;<pos:position pos:line="43" pos:column="47"/></operator><name pos:line="43" pos:column="44">xlate<pos:position pos:line="43" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="51">(<pos:position pos:line="43" pos:column="52"/></operator><specifier pos:line="43" pos:column="52">const<pos:position pos:line="43" pos:column="57"/></specifier> <name pos:line="43" pos:column="58">char<pos:position pos:line="43" pos:column="62"/></name> <operator pos:line="43" pos:column="63">*<pos:position pos:line="43" pos:column="64"/></operator><operator pos:line="43" pos:column="64">)<pos:position pos:line="43" pos:column="65"/></operator><name pos:line="43" pos:column="65">input<pos:position pos:line="43" pos:column="70"/></name></expr></argument>, 
                                  <argument><expr><operator pos:line="44" pos:column="35">&amp;<pos:position pos:line="44" pos:column="40"/></operator><name pos:line="44" pos:column="36">inbytes_left<pos:position pos:line="44" pos:column="48"/></name></expr></argument>,
                                  <argument><expr><operator pos:line="45" pos:column="35">(<pos:position pos:line="45" pos:column="36"/></operator><name pos:line="45" pos:column="36">char<pos:position pos:line="45" pos:column="40"/></name> <operator pos:line="45" pos:column="41">*<pos:position pos:line="45" pos:column="42"/></operator><operator pos:line="45" pos:column="42">)<pos:position pos:line="45" pos:column="43"/></operator><operator pos:line="45" pos:column="43">&amp;<pos:position pos:line="45" pos:column="48"/></operator><name><name pos:line="45" pos:column="44">context<pos:position pos:line="45" pos:column="51"/></name><operator pos:line="45" pos:column="51">-&gt;<pos:position pos:line="45" pos:column="56"/></operator><name pos:line="45" pos:column="53">buffer<pos:position pos:line="45" pos:column="59"/></name><index pos:line="45" pos:column="59">[<expr><name pos:line="45" pos:column="60">idx<pos:position pos:line="45" pos:column="63"/></name></expr>]<pos:position pos:line="45" pos:column="64"/></index></name></expr></argument>, 
                                  <argument><expr><operator pos:line="46" pos:column="35">&amp;<pos:position pos:line="46" pos:column="40"/></operator><name pos:line="46" pos:column="36">outbytes_left<pos:position pos:line="46" pos:column="49"/></name></expr></argument>)<pos:position pos:line="46" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="51"/></expr_stmt>
        }<pos:position pos:line="47" pos:column="10"/></block></then>
        <else pos:line="48" pos:column="9">else <block pos:line="48" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="49" pos:column="13">memcpy<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">(<argument><expr><operator pos:line="49" pos:column="20">&amp;<pos:position pos:line="49" pos:column="25"/></operator><name><name pos:line="49" pos:column="21">context<pos:position pos:line="49" pos:column="28"/></name><operator pos:line="49" pos:column="28">-&gt;<pos:position pos:line="49" pos:column="33"/></operator><name pos:line="49" pos:column="30">buffer<pos:position pos:line="49" pos:column="36"/></name><index pos:line="49" pos:column="36">[<expr><name pos:line="49" pos:column="37">idx<pos:position pos:line="49" pos:column="40"/></name></expr>]<pos:position pos:line="49" pos:column="41"/></index></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="43">input<pos:position pos:line="49" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="50">partLen<pos:position pos:line="49" pos:column="57"/></name></expr></argument>)<pos:position pos:line="49" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="59"/></expr_stmt>
        }<pos:position pos:line="50" pos:column="10"/></block></else></if>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">MD5Transform<pos:position pos:line="51" pos:column="21"/></name><argument_list pos:line="51" pos:column="21">(<argument><expr><name><name pos:line="51" pos:column="22">context<pos:position pos:line="51" pos:column="29"/></name><operator pos:line="51" pos:column="29">-&gt;<pos:position pos:line="51" pos:column="34"/></operator><name pos:line="51" pos:column="31">state<pos:position pos:line="51" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="38">context<pos:position pos:line="51" pos:column="45"/></name><operator pos:line="51" pos:column="45">-&gt;<pos:position pos:line="51" pos:column="50"/></operator><name pos:line="51" pos:column="47">buffer<pos:position pos:line="51" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="55"/></expr_stmt>

        <for pos:line="53" pos:column="9">for <control pos:line="53" pos:column="13">(<init><expr><name pos:line="53" pos:column="14">i<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">=<pos:position pos:line="53" pos:column="17"/></operator> <name pos:line="53" pos:column="18">partLen<pos:position pos:line="53" pos:column="25"/></name></expr>;<pos:position pos:line="53" pos:column="26"/></init> <condition><expr><name pos:line="53" pos:column="27">i<pos:position pos:line="53" pos:column="28"/></name> <operator pos:line="53" pos:column="29">+<pos:position pos:line="53" pos:column="30"/></operator> <literal type="number" pos:line="53" pos:column="31">63<pos:position pos:line="53" pos:column="33"/></literal> <operator pos:line="53" pos:column="34">&lt;<pos:position pos:line="53" pos:column="38"/></operator> <name pos:line="53" pos:column="36">inputLen<pos:position pos:line="53" pos:column="44"/></name></expr>;<pos:position pos:line="53" pos:column="45"/></condition> <incr><expr><name pos:line="53" pos:column="46">i<pos:position pos:line="53" pos:column="47"/></name> <operator pos:line="53" pos:column="48">+=<pos:position pos:line="53" pos:column="50"/></operator> <literal type="number" pos:line="53" pos:column="51">64<pos:position pos:line="53" pos:column="53"/></literal></expr></incr>)<pos:position pos:line="53" pos:column="54"/></control> <block pos:line="53" pos:column="55">{
            <if pos:line="54" pos:column="13">if <condition pos:line="54" pos:column="16">(<expr><name><name pos:line="54" pos:column="17">context<pos:position pos:line="54" pos:column="24"/></name><operator pos:line="54" pos:column="24">-&gt;<pos:position pos:line="54" pos:column="29"/></operator><name pos:line="54" pos:column="26">xlate<pos:position pos:line="54" pos:column="31"/></name></name> <operator pos:line="54" pos:column="32">&amp;&amp;<pos:position pos:line="54" pos:column="42"/></operator> <operator pos:line="54" pos:column="35">(<pos:position pos:line="54" pos:column="36"/></operator><name pos:line="54" pos:column="36">xlate_buffer<pos:position pos:line="54" pos:column="48"/></name> <operator pos:line="54" pos:column="49">==<pos:position pos:line="54" pos:column="51"/></operator> <name pos:line="54" pos:column="52">DO_XLATE<pos:position pos:line="54" pos:column="60"/></name><operator pos:line="54" pos:column="60">)<pos:position pos:line="54" pos:column="61"/></operator></expr>)<pos:position pos:line="54" pos:column="62"/></condition><then pos:line="54" pos:column="62"> <block pos:line="54" pos:column="63">{
                <decl_stmt><decl><type><name pos:line="55" pos:column="17">unsigned<pos:position pos:line="55" pos:column="25"/></name> <name pos:line="55" pos:column="26">char<pos:position pos:line="55" pos:column="30"/></name></type> <name><name pos:line="55" pos:column="31">inp_tmp<pos:position pos:line="55" pos:column="38"/></name><index pos:line="55" pos:column="38">[<expr><literal type="number" pos:line="55" pos:column="39">64<pos:position pos:line="55" pos:column="41"/></literal></expr>]<pos:position pos:line="55" pos:column="42"/></index></name></decl>;<pos:position pos:line="55" pos:column="43"/></decl_stmt>
                <expr_stmt><expr><name pos:line="56" pos:column="17">inbytes_left<pos:position pos:line="56" pos:column="29"/></name> <operator pos:line="56" pos:column="30">=<pos:position pos:line="56" pos:column="31"/></operator> <name pos:line="56" pos:column="32">outbytes_left<pos:position pos:line="56" pos:column="45"/></name> <operator pos:line="56" pos:column="46">=<pos:position pos:line="56" pos:column="47"/></operator> <literal type="number" pos:line="56" pos:column="48">64<pos:position pos:line="56" pos:column="50"/></literal></expr>;<pos:position pos:line="56" pos:column="51"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="57" pos:column="17">apr_xlate_conv_buffer<pos:position pos:line="57" pos:column="38"/></name><argument_list pos:line="57" pos:column="38">(<argument><expr><name><name pos:line="57" pos:column="39">context<pos:position pos:line="57" pos:column="46"/></name><operator pos:line="57" pos:column="46">-&gt;<pos:position pos:line="57" pos:column="51"/></operator><name pos:line="57" pos:column="48">xlate<pos:position pos:line="57" pos:column="53"/></name></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="55">(<pos:position pos:line="57" pos:column="56"/></operator><specifier pos:line="57" pos:column="56">const<pos:position pos:line="57" pos:column="61"/></specifier> <name pos:line="57" pos:column="62">char<pos:position pos:line="57" pos:column="66"/></name> <operator pos:line="57" pos:column="67">*<pos:position pos:line="57" pos:column="68"/></operator><operator pos:line="57" pos:column="68">)<pos:position pos:line="57" pos:column="69"/></operator><operator pos:line="57" pos:column="69">&amp;<pos:position pos:line="57" pos:column="74"/></operator><name><name pos:line="57" pos:column="70">input<pos:position pos:line="57" pos:column="75"/></name><index pos:line="57" pos:column="75">[<expr><name pos:line="57" pos:column="76">i<pos:position pos:line="57" pos:column="77"/></name></expr>]<pos:position pos:line="57" pos:column="78"/></index></name></expr></argument>, 
                                      <argument><expr><operator pos:line="58" pos:column="39">&amp;<pos:position pos:line="58" pos:column="44"/></operator><name pos:line="58" pos:column="40">inbytes_left<pos:position pos:line="58" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="54">(<pos:position pos:line="58" pos:column="55"/></operator><name pos:line="58" pos:column="55">char<pos:position pos:line="58" pos:column="59"/></name> <operator pos:line="58" pos:column="60">*<pos:position pos:line="58" pos:column="61"/></operator><operator pos:line="58" pos:column="61">)<pos:position pos:line="58" pos:column="62"/></operator><name pos:line="58" pos:column="62">inp_tmp<pos:position pos:line="58" pos:column="69"/></name></expr></argument>, 
                                      <argument><expr><operator pos:line="59" pos:column="39">&amp;<pos:position pos:line="59" pos:column="44"/></operator><name pos:line="59" pos:column="40">outbytes_left<pos:position pos:line="59" pos:column="53"/></name></expr></argument>)<pos:position pos:line="59" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="55"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="60" pos:column="17">MD5Transform<pos:position pos:line="60" pos:column="29"/></name><argument_list pos:line="60" pos:column="29">(<argument><expr><name><name pos:line="60" pos:column="30">context<pos:position pos:line="60" pos:column="37"/></name><operator pos:line="60" pos:column="37">-&gt;<pos:position pos:line="60" pos:column="42"/></operator><name pos:line="60" pos:column="39">state<pos:position pos:line="60" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="46">inp_tmp<pos:position pos:line="60" pos:column="53"/></name></expr></argument>)<pos:position pos:line="60" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="55"/></expr_stmt>
            }<pos:position pos:line="61" pos:column="14"/></block></then>
            <else pos:line="62" pos:column="13">else <block pos:line="62" pos:column="18">{
                <expr_stmt><expr><call><name pos:line="63" pos:column="17">MD5Transform<pos:position pos:line="63" pos:column="29"/></name><argument_list pos:line="63" pos:column="29">(<argument><expr><name><name pos:line="63" pos:column="30">context<pos:position pos:line="63" pos:column="37"/></name><operator pos:line="63" pos:column="37">-&gt;<pos:position pos:line="63" pos:column="42"/></operator><name pos:line="63" pos:column="39">state<pos:position pos:line="63" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="46">&amp;<pos:position pos:line="63" pos:column="51"/></operator><name><name pos:line="63" pos:column="47">input<pos:position pos:line="63" pos:column="52"/></name><index pos:line="63" pos:column="52">[<expr><name pos:line="63" pos:column="53">i<pos:position pos:line="63" pos:column="54"/></name></expr>]<pos:position pos:line="63" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="63" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="57"/></expr_stmt>
            }<pos:position pos:line="64" pos:column="14"/></block></else></if>
        }<pos:position pos:line="65" pos:column="10"/></block></for>

        <expr_stmt><expr><name pos:line="67" pos:column="9">idx<pos:position pos:line="67" pos:column="12"/></name> <operator pos:line="67" pos:column="13">=<pos:position pos:line="67" pos:column="14"/></operator> <literal type="number" pos:line="67" pos:column="15">0<pos:position pos:line="67" pos:column="16"/></literal></expr>;<pos:position pos:line="67" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="68" pos:column="6"/></block></then>
    <else pos:line="69" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="70" pos:column="9">i<pos:position pos:line="70" pos:column="10"/></name> <operator pos:line="70" pos:column="11">=<pos:position pos:line="70" pos:column="12"/></operator> <literal type="number" pos:line="70" pos:column="13">0<pos:position pos:line="70" pos:column="14"/></literal></expr>;<pos:position pos:line="70" pos:column="15"/></expr_stmt></block></else></if>

    <comment type="block" pos:line="72" pos:column="5">/* Buffer remaining input */</comment>
    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><name><name pos:line="73" pos:column="9">context<pos:position pos:line="73" pos:column="16"/></name><operator pos:line="73" pos:column="16">-&gt;<pos:position pos:line="73" pos:column="21"/></operator><name pos:line="73" pos:column="18">xlate<pos:position pos:line="73" pos:column="23"/></name></name> <operator pos:line="73" pos:column="24">&amp;&amp;<pos:position pos:line="73" pos:column="34"/></operator> <operator pos:line="73" pos:column="27">(<pos:position pos:line="73" pos:column="28"/></operator><name pos:line="73" pos:column="28">xlate_buffer<pos:position pos:line="73" pos:column="40"/></name> <operator pos:line="73" pos:column="41">==<pos:position pos:line="73" pos:column="43"/></operator> <name pos:line="73" pos:column="44">DO_XLATE<pos:position pos:line="73" pos:column="52"/></name><operator pos:line="73" pos:column="52">)<pos:position pos:line="73" pos:column="53"/></operator></expr>)<pos:position pos:line="73" pos:column="54"/></condition><then pos:line="73" pos:column="54"> <block pos:line="73" pos:column="55">{
        <expr_stmt><expr><name pos:line="74" pos:column="9">inbytes_left<pos:position pos:line="74" pos:column="21"/></name> <operator pos:line="74" pos:column="22">=<pos:position pos:line="74" pos:column="23"/></operator> <name pos:line="74" pos:column="24">outbytes_left<pos:position pos:line="74" pos:column="37"/></name> <operator pos:line="74" pos:column="38">=<pos:position pos:line="74" pos:column="39"/></operator> <name pos:line="74" pos:column="40">inputLen<pos:position pos:line="74" pos:column="48"/></name> <operator pos:line="74" pos:column="49">-<pos:position pos:line="74" pos:column="50"/></operator> <name pos:line="74" pos:column="51">i<pos:position pos:line="74" pos:column="52"/></name></expr>;<pos:position pos:line="74" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">apr_xlate_conv_buffer<pos:position pos:line="75" pos:column="30"/></name><argument_list pos:line="75" pos:column="30">(<argument><expr><name><name pos:line="75" pos:column="31">context<pos:position pos:line="75" pos:column="38"/></name><operator pos:line="75" pos:column="38">-&gt;<pos:position pos:line="75" pos:column="43"/></operator><name pos:line="75" pos:column="40">xlate<pos:position pos:line="75" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="47">(<pos:position pos:line="75" pos:column="48"/></operator><specifier pos:line="75" pos:column="48">const<pos:position pos:line="75" pos:column="53"/></specifier> <name pos:line="75" pos:column="54">char<pos:position pos:line="75" pos:column="58"/></name> <operator pos:line="75" pos:column="59">*<pos:position pos:line="75" pos:column="60"/></operator><operator pos:line="75" pos:column="60">)<pos:position pos:line="75" pos:column="61"/></operator><operator pos:line="75" pos:column="61">&amp;<pos:position pos:line="75" pos:column="66"/></operator><name><name pos:line="75" pos:column="62">input<pos:position pos:line="75" pos:column="67"/></name><index pos:line="75" pos:column="67">[<expr><name pos:line="75" pos:column="68">i<pos:position pos:line="75" pos:column="69"/></name></expr>]<pos:position pos:line="75" pos:column="70"/></index></name></expr></argument>, 
                              <argument><expr><operator pos:line="76" pos:column="31">&amp;<pos:position pos:line="76" pos:column="36"/></operator><name pos:line="76" pos:column="32">inbytes_left<pos:position pos:line="76" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="46">(<pos:position pos:line="76" pos:column="47"/></operator><name pos:line="76" pos:column="47">char<pos:position pos:line="76" pos:column="51"/></name> <operator pos:line="76" pos:column="52">*<pos:position pos:line="76" pos:column="53"/></operator><operator pos:line="76" pos:column="53">)<pos:position pos:line="76" pos:column="54"/></operator><operator pos:line="76" pos:column="54">&amp;<pos:position pos:line="76" pos:column="59"/></operator><name><name pos:line="76" pos:column="55">context<pos:position pos:line="76" pos:column="62"/></name><operator pos:line="76" pos:column="62">-&gt;<pos:position pos:line="76" pos:column="67"/></operator><name pos:line="76" pos:column="64">buffer<pos:position pos:line="76" pos:column="70"/></name><index pos:line="76" pos:column="70">[<expr><name pos:line="76" pos:column="71">idx<pos:position pos:line="76" pos:column="74"/></name></expr>]<pos:position pos:line="76" pos:column="75"/></index></name></expr></argument>, 
                              <argument><expr><operator pos:line="77" pos:column="31">&amp;<pos:position pos:line="77" pos:column="36"/></operator><name pos:line="77" pos:column="32">outbytes_left<pos:position pos:line="77" pos:column="45"/></name></expr></argument>)<pos:position pos:line="77" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="78" pos:column="6"/></block></then>
    <else pos:line="79" pos:column="5">else <block pos:line="79" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="80" pos:column="9">memcpy<pos:position pos:line="80" pos:column="15"/></name><argument_list pos:line="80" pos:column="15">(<argument><expr><operator pos:line="80" pos:column="16">&amp;<pos:position pos:line="80" pos:column="21"/></operator><name><name pos:line="80" pos:column="17">context<pos:position pos:line="80" pos:column="24"/></name><operator pos:line="80" pos:column="24">-&gt;<pos:position pos:line="80" pos:column="29"/></operator><name pos:line="80" pos:column="26">buffer<pos:position pos:line="80" pos:column="32"/></name><index pos:line="80" pos:column="32">[<expr><name pos:line="80" pos:column="33">idx<pos:position pos:line="80" pos:column="36"/></name></expr>]<pos:position pos:line="80" pos:column="37"/></index></name></expr></argument>, <argument><expr><operator pos:line="80" pos:column="39">&amp;<pos:position pos:line="80" pos:column="44"/></operator><name><name pos:line="80" pos:column="40">input<pos:position pos:line="80" pos:column="45"/></name><index pos:line="80" pos:column="45">[<expr><name pos:line="80" pos:column="46">i<pos:position pos:line="80" pos:column="47"/></name></expr>]<pos:position pos:line="80" pos:column="48"/></index></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="50">inputLen<pos:position pos:line="80" pos:column="58"/></name> <operator pos:line="80" pos:column="59">-<pos:position pos:line="80" pos:column="60"/></operator> <name pos:line="80" pos:column="61">i<pos:position pos:line="80" pos:column="62"/></name></expr></argument>)<pos:position pos:line="80" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="81" pos:column="6"/></block></else></if>
<cpp:endif pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">endif<pos:position pos:line="82" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="82" pos:column="8">/*APR_HAS_XLATE*/</comment>
    <return pos:line="83" pos:column="5">return <expr><name pos:line="83" pos:column="12">APR_SUCCESS<pos:position pos:line="83" pos:column="23"/></name></expr>;<pos:position pos:line="83" pos:column="24"/></return>
}<pos:position pos:line="84" pos:column="2"/></block></function></unit>
