<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3728_httpd-2.4.20.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">expr_dump_tree<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">ap_expr_t<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">e<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">server_rec<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">s<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">loglevel<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="42">int<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">indent<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <switch pos:line="4" pos:column="5">switch <condition pos:line="4" pos:column="12">(<expr><name><name pos:line="4" pos:column="13">e<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">-&gt;<pos:position pos:line="4" pos:column="19"/></operator><name pos:line="4" pos:column="16">node_op<pos:position pos:line="4" pos:column="23"/></name></name></expr>)<pos:position pos:line="4" pos:column="24"/></condition> <block pos:line="4" pos:column="25">{
    <comment type="block" pos:line="5" pos:column="5">/* no arg */</comment>
    <case pos:line="6" pos:column="5">case <expr><name pos:line="6" pos:column="10">op_NOP<pos:position pos:line="6" pos:column="16"/></name></expr>:<pos:position pos:line="6" pos:column="17"/></case>
    <case pos:line="7" pos:column="5">case <expr><name pos:line="7" pos:column="10">op_True<pos:position pos:line="7" pos:column="17"/></name></expr>:<pos:position pos:line="7" pos:column="18"/></case>
    <case pos:line="8" pos:column="5">case <expr><name pos:line="8" pos:column="10">op_False<pos:position pos:line="8" pos:column="18"/></name></expr>:<pos:position pos:line="8" pos:column="19"/></case>
        <block pos:line="9" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="10" pos:column="13">char<pos:position pos:line="10" pos:column="17"/></name> <modifier pos:line="10" pos:column="18">*<pos:position pos:line="10" pos:column="19"/></modifier></type><name pos:line="10" pos:column="19">name<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
            <switch pos:line="11" pos:column="13">switch <condition pos:line="11" pos:column="20">(<expr><name><name pos:line="11" pos:column="21">e<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">-&gt;<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="24">node_op<pos:position pos:line="11" pos:column="31"/></name></name></expr>)<pos:position pos:line="11" pos:column="32"/></condition> <block pos:line="11" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="12" pos:column="13">CASE_OP<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">op_NOP<pos:position pos:line="12" pos:column="27"/></name></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">CASE_OP<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name pos:line="13" pos:column="21">op_True<pos:position pos:line="13" pos:column="28"/></name></expr></argument>)<pos:position pos:line="13" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">CASE_OP<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">op_False<pos:position pos:line="14" pos:column="29"/></name></expr></argument>)<pos:position pos:line="14" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt>
            <default pos:line="15" pos:column="13">default:<pos:position pos:line="15" pos:column="21"/></default>
                <expr_stmt><expr><call><name pos:line="16" pos:column="17">ap_assert<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><literal type="number" pos:line="16" pos:column="27">0<pos:position pos:line="16" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="17" pos:column="14"/></block></switch>
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">ap_log_error<pos:position pos:line="18" pos:column="25"/></name><argument_list pos:line="18" pos:column="25">(<argument><expr><name pos:line="18" pos:column="26">MARK<pos:position pos:line="18" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="32">"%*s%s"<pos:position pos:line="18" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="41">indent<pos:position pos:line="18" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="49">" "<pos:position pos:line="18" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="54">name<pos:position pos:line="18" pos:column="58"/></name></expr></argument>)<pos:position pos:line="18" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="60"/></expr_stmt>
        }<pos:position pos:line="19" pos:column="10"/></block>
        <break pos:line="20" pos:column="9">break;<pos:position pos:line="20" pos:column="15"/></break>

    <comment type="block" pos:line="22" pos:column="5">/* arg1: string, arg2: expr */</comment>
    <case pos:line="23" pos:column="5">case <expr><name pos:line="23" pos:column="10">op_UnaryOpCall<pos:position pos:line="23" pos:column="24"/></name></expr>:<pos:position pos:line="23" pos:column="25"/></case>
    <case pos:line="24" pos:column="5">case <expr><name pos:line="24" pos:column="10">op_BinaryOpCall<pos:position pos:line="24" pos:column="25"/></name></expr>:<pos:position pos:line="24" pos:column="26"/></case>
    <case pos:line="25" pos:column="5">case <expr><name pos:line="25" pos:column="10">op_BinaryOpArgs<pos:position pos:line="25" pos:column="25"/></name></expr>:<pos:position pos:line="25" pos:column="26"/></case>
        <block pos:line="26" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">char<pos:position pos:line="27" pos:column="17"/></name> <modifier pos:line="27" pos:column="18">*<pos:position pos:line="27" pos:column="19"/></modifier></type><name pos:line="27" pos:column="19">name<pos:position pos:line="27" pos:column="23"/></name></decl>;<pos:position pos:line="27" pos:column="24"/></decl_stmt>
            <switch pos:line="28" pos:column="13">switch <condition pos:line="28" pos:column="20">(<expr><name><name pos:line="28" pos:column="21">e<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">-&gt;<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="24">node_op<pos:position pos:line="28" pos:column="31"/></name></name></expr>)<pos:position pos:line="28" pos:column="32"/></condition> <block pos:line="28" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">CASE_OP<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><name pos:line="29" pos:column="21">op_BinaryOpCall<pos:position pos:line="29" pos:column="36"/></name></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">CASE_OP<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><name pos:line="30" pos:column="21">op_UnaryOpCall<pos:position pos:line="30" pos:column="35"/></name></expr></argument>)<pos:position pos:line="30" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">CASE_OP<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><name pos:line="31" pos:column="21">op_BinaryOpArgs<pos:position pos:line="31" pos:column="36"/></name></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt>
            <default pos:line="32" pos:column="13">default:<pos:position pos:line="32" pos:column="21"/></default>
                <expr_stmt><expr><call><name pos:line="33" pos:column="17">ap_assert<pos:position pos:line="33" pos:column="26"/></name><argument_list pos:line="33" pos:column="26">(<argument><expr><literal type="number" pos:line="33" pos:column="27">0<pos:position pos:line="33" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="34" pos:column="14"/></block></switch>
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">DUMP_S_E<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">name<pos:position pos:line="35" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="28">e<pos:position pos:line="35" pos:column="29"/></name><operator pos:line="35" pos:column="29">-&gt;<pos:position pos:line="35" pos:column="34"/></operator><name pos:line="35" pos:column="31">node_arg1<pos:position pos:line="35" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="42">e<pos:position pos:line="35" pos:column="43"/></name><operator pos:line="35" pos:column="43">-&gt;<pos:position pos:line="35" pos:column="48"/></operator><name pos:line="35" pos:column="45">node_arg2<pos:position pos:line="35" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="56"/></expr_stmt>
        }<pos:position pos:line="36" pos:column="10"/></block>
        <break pos:line="37" pos:column="9">break;<pos:position pos:line="37" pos:column="15"/></break>

    <comment type="block" pos:line="39" pos:column="5">/* arg1: expr, arg2: expr */</comment>
    <case pos:line="40" pos:column="5">case <expr><name pos:line="40" pos:column="10">op_Comp<pos:position pos:line="40" pos:column="17"/></name></expr>:<pos:position pos:line="40" pos:column="18"/></case>
    <case pos:line="41" pos:column="5">case <expr><name pos:line="41" pos:column="10">op_Not<pos:position pos:line="41" pos:column="16"/></name></expr>:<pos:position pos:line="41" pos:column="17"/></case>
    <case pos:line="42" pos:column="5">case <expr><name pos:line="42" pos:column="10">op_Or<pos:position pos:line="42" pos:column="15"/></name></expr>:<pos:position pos:line="42" pos:column="16"/></case>
    <case pos:line="43" pos:column="5">case <expr><name pos:line="43" pos:column="10">op_And<pos:position pos:line="43" pos:column="16"/></name></expr>:<pos:position pos:line="43" pos:column="17"/></case>
    <case pos:line="44" pos:column="5">case <expr><name pos:line="44" pos:column="10">op_EQ<pos:position pos:line="44" pos:column="15"/></name></expr>:<pos:position pos:line="44" pos:column="16"/></case>
    <case pos:line="45" pos:column="5">case <expr><name pos:line="45" pos:column="10">op_NE<pos:position pos:line="45" pos:column="15"/></name></expr>:<pos:position pos:line="45" pos:column="16"/></case>
    <case pos:line="46" pos:column="5">case <expr><name pos:line="46" pos:column="10">op_LT<pos:position pos:line="46" pos:column="15"/></name></expr>:<pos:position pos:line="46" pos:column="16"/></case>
    <case pos:line="47" pos:column="5">case <expr><name pos:line="47" pos:column="10">op_LE<pos:position pos:line="47" pos:column="15"/></name></expr>:<pos:position pos:line="47" pos:column="16"/></case>
    <case pos:line="48" pos:column="5">case <expr><name pos:line="48" pos:column="10">op_GT<pos:position pos:line="48" pos:column="15"/></name></expr>:<pos:position pos:line="48" pos:column="16"/></case>
    <case pos:line="49" pos:column="5">case <expr><name pos:line="49" pos:column="10">op_GE<pos:position pos:line="49" pos:column="15"/></name></expr>:<pos:position pos:line="49" pos:column="16"/></case>
    <case pos:line="50" pos:column="5">case <expr><name pos:line="50" pos:column="10">op_STR_EQ<pos:position pos:line="50" pos:column="19"/></name></expr>:<pos:position pos:line="50" pos:column="20"/></case>
    <case pos:line="51" pos:column="5">case <expr><name pos:line="51" pos:column="10">op_STR_NE<pos:position pos:line="51" pos:column="19"/></name></expr>:<pos:position pos:line="51" pos:column="20"/></case>
    <case pos:line="52" pos:column="5">case <expr><name pos:line="52" pos:column="10">op_STR_LT<pos:position pos:line="52" pos:column="19"/></name></expr>:<pos:position pos:line="52" pos:column="20"/></case>
    <case pos:line="53" pos:column="5">case <expr><name pos:line="53" pos:column="10">op_STR_LE<pos:position pos:line="53" pos:column="19"/></name></expr>:<pos:position pos:line="53" pos:column="20"/></case>
    <case pos:line="54" pos:column="5">case <expr><name pos:line="54" pos:column="10">op_STR_GT<pos:position pos:line="54" pos:column="19"/></name></expr>:<pos:position pos:line="54" pos:column="20"/></case>
    <case pos:line="55" pos:column="5">case <expr><name pos:line="55" pos:column="10">op_STR_GE<pos:position pos:line="55" pos:column="19"/></name></expr>:<pos:position pos:line="55" pos:column="20"/></case>
    <case pos:line="56" pos:column="5">case <expr><name pos:line="56" pos:column="10">op_IN<pos:position pos:line="56" pos:column="15"/></name></expr>:<pos:position pos:line="56" pos:column="16"/></case>
    <case pos:line="57" pos:column="5">case <expr><name pos:line="57" pos:column="10">op_REG<pos:position pos:line="57" pos:column="16"/></name></expr>:<pos:position pos:line="57" pos:column="17"/></case>
    <case pos:line="58" pos:column="5">case <expr><name pos:line="58" pos:column="10">op_NRE<pos:position pos:line="58" pos:column="16"/></name></expr>:<pos:position pos:line="58" pos:column="17"/></case>
    <case pos:line="59" pos:column="5">case <expr><name pos:line="59" pos:column="10">op_Concat<pos:position pos:line="59" pos:column="19"/></name></expr>:<pos:position pos:line="59" pos:column="20"/></case>
    <case pos:line="60" pos:column="5">case <expr><name pos:line="60" pos:column="10">op_StringFuncCall<pos:position pos:line="60" pos:column="27"/></name></expr>:<pos:position pos:line="60" pos:column="28"/></case>
    <case pos:line="61" pos:column="5">case <expr><name pos:line="61" pos:column="10">op_ListFuncCall<pos:position pos:line="61" pos:column="25"/></name></expr>:<pos:position pos:line="61" pos:column="26"/></case>
    <case pos:line="62" pos:column="5">case <expr><name pos:line="62" pos:column="10">op_ListElement<pos:position pos:line="62" pos:column="24"/></name></expr>:<pos:position pos:line="62" pos:column="25"/></case>
        <block pos:line="63" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="64" pos:column="13">char<pos:position pos:line="64" pos:column="17"/></name> <modifier pos:line="64" pos:column="18">*<pos:position pos:line="64" pos:column="19"/></modifier></type><name pos:line="64" pos:column="19">name<pos:position pos:line="64" pos:column="23"/></name></decl>;<pos:position pos:line="64" pos:column="24"/></decl_stmt>
            <switch pos:line="65" pos:column="13">switch <condition pos:line="65" pos:column="20">(<expr><name><name pos:line="65" pos:column="21">e<pos:position pos:line="65" pos:column="22"/></name><operator pos:line="65" pos:column="22">-&gt;<pos:position pos:line="65" pos:column="27"/></operator><name pos:line="65" pos:column="24">node_op<pos:position pos:line="65" pos:column="31"/></name></name></expr>)<pos:position pos:line="65" pos:column="32"/></condition> <block pos:line="65" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="66" pos:column="13">CASE_OP<pos:position pos:line="66" pos:column="20"/></name><argument_list pos:line="66" pos:column="20">(<argument><expr><name pos:line="66" pos:column="21">op_Comp<pos:position pos:line="66" pos:column="28"/></name></expr></argument>)<pos:position pos:line="66" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="67" pos:column="13">CASE_OP<pos:position pos:line="67" pos:column="20"/></name><argument_list pos:line="67" pos:column="20">(<argument><expr><name pos:line="67" pos:column="21">op_Not<pos:position pos:line="67" pos:column="27"/></name></expr></argument>)<pos:position pos:line="67" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="68" pos:column="13">CASE_OP<pos:position pos:line="68" pos:column="20"/></name><argument_list pos:line="68" pos:column="20">(<argument><expr><name pos:line="68" pos:column="21">op_Or<pos:position pos:line="68" pos:column="26"/></name></expr></argument>)<pos:position pos:line="68" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="69" pos:column="13">CASE_OP<pos:position pos:line="69" pos:column="20"/></name><argument_list pos:line="69" pos:column="20">(<argument><expr><name pos:line="69" pos:column="21">op_And<pos:position pos:line="69" pos:column="27"/></name></expr></argument>)<pos:position pos:line="69" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="70" pos:column="13">CASE_OP<pos:position pos:line="70" pos:column="20"/></name><argument_list pos:line="70" pos:column="20">(<argument><expr><name pos:line="70" pos:column="21">op_EQ<pos:position pos:line="70" pos:column="26"/></name></expr></argument>)<pos:position pos:line="70" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="71" pos:column="13">CASE_OP<pos:position pos:line="71" pos:column="20"/></name><argument_list pos:line="71" pos:column="20">(<argument><expr><name pos:line="71" pos:column="21">op_NE<pos:position pos:line="71" pos:column="26"/></name></expr></argument>)<pos:position pos:line="71" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="72" pos:column="13">CASE_OP<pos:position pos:line="72" pos:column="20"/></name><argument_list pos:line="72" pos:column="20">(<argument><expr><name pos:line="72" pos:column="21">op_LT<pos:position pos:line="72" pos:column="26"/></name></expr></argument>)<pos:position pos:line="72" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="73" pos:column="13">CASE_OP<pos:position pos:line="73" pos:column="20"/></name><argument_list pos:line="73" pos:column="20">(<argument><expr><name pos:line="73" pos:column="21">op_LE<pos:position pos:line="73" pos:column="26"/></name></expr></argument>)<pos:position pos:line="73" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="74" pos:column="13">CASE_OP<pos:position pos:line="74" pos:column="20"/></name><argument_list pos:line="74" pos:column="20">(<argument><expr><name pos:line="74" pos:column="21">op_GT<pos:position pos:line="74" pos:column="26"/></name></expr></argument>)<pos:position pos:line="74" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="75" pos:column="13">CASE_OP<pos:position pos:line="75" pos:column="20"/></name><argument_list pos:line="75" pos:column="20">(<argument><expr><name pos:line="75" pos:column="21">op_GE<pos:position pos:line="75" pos:column="26"/></name></expr></argument>)<pos:position pos:line="75" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="76" pos:column="13">CASE_OP<pos:position pos:line="76" pos:column="20"/></name><argument_list pos:line="76" pos:column="20">(<argument><expr><name pos:line="76" pos:column="21">op_STR_EQ<pos:position pos:line="76" pos:column="30"/></name></expr></argument>)<pos:position pos:line="76" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="77" pos:column="13">CASE_OP<pos:position pos:line="77" pos:column="20"/></name><argument_list pos:line="77" pos:column="20">(<argument><expr><name pos:line="77" pos:column="21">op_STR_NE<pos:position pos:line="77" pos:column="30"/></name></expr></argument>)<pos:position pos:line="77" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="78" pos:column="13">CASE_OP<pos:position pos:line="78" pos:column="20"/></name><argument_list pos:line="78" pos:column="20">(<argument><expr><name pos:line="78" pos:column="21">op_STR_LT<pos:position pos:line="78" pos:column="30"/></name></expr></argument>)<pos:position pos:line="78" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="79" pos:column="13">CASE_OP<pos:position pos:line="79" pos:column="20"/></name><argument_list pos:line="79" pos:column="20">(<argument><expr><name pos:line="79" pos:column="21">op_STR_LE<pos:position pos:line="79" pos:column="30"/></name></expr></argument>)<pos:position pos:line="79" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="80" pos:column="13">CASE_OP<pos:position pos:line="80" pos:column="20"/></name><argument_list pos:line="80" pos:column="20">(<argument><expr><name pos:line="80" pos:column="21">op_STR_GT<pos:position pos:line="80" pos:column="30"/></name></expr></argument>)<pos:position pos:line="80" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="81" pos:column="13">CASE_OP<pos:position pos:line="81" pos:column="20"/></name><argument_list pos:line="81" pos:column="20">(<argument><expr><name pos:line="81" pos:column="21">op_STR_GE<pos:position pos:line="81" pos:column="30"/></name></expr></argument>)<pos:position pos:line="81" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="82" pos:column="13">CASE_OP<pos:position pos:line="82" pos:column="20"/></name><argument_list pos:line="82" pos:column="20">(<argument><expr><name pos:line="82" pos:column="21">op_IN<pos:position pos:line="82" pos:column="26"/></name></expr></argument>)<pos:position pos:line="82" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="83" pos:column="13">CASE_OP<pos:position pos:line="83" pos:column="20"/></name><argument_list pos:line="83" pos:column="20">(<argument><expr><name pos:line="83" pos:column="21">op_REG<pos:position pos:line="83" pos:column="27"/></name></expr></argument>)<pos:position pos:line="83" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="84" pos:column="13">CASE_OP<pos:position pos:line="84" pos:column="20"/></name><argument_list pos:line="84" pos:column="20">(<argument><expr><name pos:line="84" pos:column="21">op_NRE<pos:position pos:line="84" pos:column="27"/></name></expr></argument>)<pos:position pos:line="84" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="85" pos:column="13">CASE_OP<pos:position pos:line="85" pos:column="20"/></name><argument_list pos:line="85" pos:column="20">(<argument><expr><name pos:line="85" pos:column="21">op_Concat<pos:position pos:line="85" pos:column="30"/></name></expr></argument>)<pos:position pos:line="85" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="86" pos:column="13">CASE_OP<pos:position pos:line="86" pos:column="20"/></name><argument_list pos:line="86" pos:column="20">(<argument><expr><name pos:line="86" pos:column="21">op_StringFuncCall<pos:position pos:line="86" pos:column="38"/></name></expr></argument>)<pos:position pos:line="86" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="87" pos:column="13">CASE_OP<pos:position pos:line="87" pos:column="20"/></name><argument_list pos:line="87" pos:column="20">(<argument><expr><name pos:line="87" pos:column="21">op_ListFuncCall<pos:position pos:line="87" pos:column="36"/></name></expr></argument>)<pos:position pos:line="87" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="88" pos:column="13">CASE_OP<pos:position pos:line="88" pos:column="20"/></name><argument_list pos:line="88" pos:column="20">(<argument><expr><name pos:line="88" pos:column="21">op_ListElement<pos:position pos:line="88" pos:column="35"/></name></expr></argument>)<pos:position pos:line="88" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="37"/></expr_stmt>
            <default pos:line="89" pos:column="13">default:<pos:position pos:line="89" pos:column="21"/></default>
                <expr_stmt><expr><call><name pos:line="90" pos:column="17">ap_assert<pos:position pos:line="90" pos:column="26"/></name><argument_list pos:line="90" pos:column="26">(<argument><expr><literal type="number" pos:line="90" pos:column="27">0<pos:position pos:line="90" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="91" pos:column="14"/></block></switch>
            <expr_stmt><expr><call><name pos:line="92" pos:column="13">DUMP_E_E<pos:position pos:line="92" pos:column="21"/></name><argument_list pos:line="92" pos:column="21">(<argument><expr><name pos:line="92" pos:column="22">name<pos:position pos:line="92" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="28">e<pos:position pos:line="92" pos:column="29"/></name><operator pos:line="92" pos:column="29">-&gt;<pos:position pos:line="92" pos:column="34"/></operator><name pos:line="92" pos:column="31">node_arg1<pos:position pos:line="92" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="42">e<pos:position pos:line="92" pos:column="43"/></name><operator pos:line="92" pos:column="43">-&gt;<pos:position pos:line="92" pos:column="48"/></operator><name pos:line="92" pos:column="45">node_arg2<pos:position pos:line="92" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="56"/></expr_stmt>
        }<pos:position pos:line="93" pos:column="10"/></block>
        <break pos:line="94" pos:column="9">break;<pos:position pos:line="94" pos:column="15"/></break>
    <comment type="block" pos:line="95" pos:column="5">/* arg1: string */</comment>
    <case pos:line="96" pos:column="5">case <expr><name pos:line="96" pos:column="10">op_Digit<pos:position pos:line="96" pos:column="18"/></name></expr>:<pos:position pos:line="96" pos:column="19"/></case>
    <case pos:line="97" pos:column="5">case <expr><name pos:line="97" pos:column="10">op_String<pos:position pos:line="97" pos:column="19"/></name></expr>:<pos:position pos:line="97" pos:column="20"/></case>
        <block pos:line="98" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="99" pos:column="13">char<pos:position pos:line="99" pos:column="17"/></name> <modifier pos:line="99" pos:column="18">*<pos:position pos:line="99" pos:column="19"/></modifier></type><name pos:line="99" pos:column="19">name<pos:position pos:line="99" pos:column="23"/></name></decl>;<pos:position pos:line="99" pos:column="24"/></decl_stmt>
            <switch pos:line="100" pos:column="13">switch <condition pos:line="100" pos:column="20">(<expr><name><name pos:line="100" pos:column="21">e<pos:position pos:line="100" pos:column="22"/></name><operator pos:line="100" pos:column="22">-&gt;<pos:position pos:line="100" pos:column="27"/></operator><name pos:line="100" pos:column="24">node_op<pos:position pos:line="100" pos:column="31"/></name></name></expr>)<pos:position pos:line="100" pos:column="32"/></condition> <block pos:line="100" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="101" pos:column="13">CASE_OP<pos:position pos:line="101" pos:column="20"/></name><argument_list pos:line="101" pos:column="20">(<argument><expr><name pos:line="101" pos:column="21">op_Digit<pos:position pos:line="101" pos:column="29"/></name></expr></argument>)<pos:position pos:line="101" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="102" pos:column="13">CASE_OP<pos:position pos:line="102" pos:column="20"/></name><argument_list pos:line="102" pos:column="20">(<argument><expr><name pos:line="102" pos:column="21">op_String<pos:position pos:line="102" pos:column="30"/></name></expr></argument>)<pos:position pos:line="102" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="32"/></expr_stmt>
            <default pos:line="103" pos:column="13">default:<pos:position pos:line="103" pos:column="21"/></default>
                <expr_stmt><expr><call><name pos:line="104" pos:column="17">ap_assert<pos:position pos:line="104" pos:column="26"/></name><argument_list pos:line="104" pos:column="26">(<argument><expr><literal type="number" pos:line="104" pos:column="27">0<pos:position pos:line="104" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="105" pos:column="14"/></block></switch>
            <expr_stmt><expr><call><name pos:line="106" pos:column="13">DUMP_S<pos:position pos:line="106" pos:column="19"/></name><argument_list pos:line="106" pos:column="19">(<argument><expr><name pos:line="106" pos:column="20">name<pos:position pos:line="106" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="26">e<pos:position pos:line="106" pos:column="27"/></name><operator pos:line="106" pos:column="27">-&gt;<pos:position pos:line="106" pos:column="32"/></operator><name pos:line="106" pos:column="29">node_arg1<pos:position pos:line="106" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="106" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="107" pos:column="10"/></block>
        <break pos:line="108" pos:column="9">break;<pos:position pos:line="108" pos:column="15"/></break>
    <comment type="block" pos:line="109" pos:column="5">/* arg1: pointer, arg2: pointer */</comment>
    <case pos:line="110" pos:column="5">case <expr><name pos:line="110" pos:column="10">op_Var<pos:position pos:line="110" pos:column="16"/></name></expr>:<pos:position pos:line="110" pos:column="17"/></case>
    <case pos:line="111" pos:column="5">case <expr><name pos:line="111" pos:column="10">op_StringFuncInfo<pos:position pos:line="111" pos:column="27"/></name></expr>:<pos:position pos:line="111" pos:column="28"/></case>
    <case pos:line="112" pos:column="5">case <expr><name pos:line="112" pos:column="10">op_UnaryOpInfo<pos:position pos:line="112" pos:column="24"/></name></expr>:<pos:position pos:line="112" pos:column="25"/></case>
    <case pos:line="113" pos:column="5">case <expr><name pos:line="113" pos:column="10">op_BinaryOpInfo<pos:position pos:line="113" pos:column="25"/></name></expr>:<pos:position pos:line="113" pos:column="26"/></case>
    <case pos:line="114" pos:column="5">case <expr><name pos:line="114" pos:column="10">op_ListFuncInfo<pos:position pos:line="114" pos:column="25"/></name></expr>:<pos:position pos:line="114" pos:column="26"/></case>
        <block pos:line="115" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="116" pos:column="13">char<pos:position pos:line="116" pos:column="17"/></name> <modifier pos:line="116" pos:column="18">*<pos:position pos:line="116" pos:column="19"/></modifier></type><name pos:line="116" pos:column="19">name<pos:position pos:line="116" pos:column="23"/></name></decl>;<pos:position pos:line="116" pos:column="24"/></decl_stmt>
            <switch pos:line="117" pos:column="13">switch <condition pos:line="117" pos:column="20">(<expr><name><name pos:line="117" pos:column="21">e<pos:position pos:line="117" pos:column="22"/></name><operator pos:line="117" pos:column="22">-&gt;<pos:position pos:line="117" pos:column="27"/></operator><name pos:line="117" pos:column="24">node_op<pos:position pos:line="117" pos:column="31"/></name></name></expr>)<pos:position pos:line="117" pos:column="32"/></condition> <block pos:line="117" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="118" pos:column="13">CASE_OP<pos:position pos:line="118" pos:column="20"/></name><argument_list pos:line="118" pos:column="20">(<argument><expr><name pos:line="118" pos:column="21">op_Var<pos:position pos:line="118" pos:column="27"/></name></expr></argument>)<pos:position pos:line="118" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="119" pos:column="13">CASE_OP<pos:position pos:line="119" pos:column="20"/></name><argument_list pos:line="119" pos:column="20">(<argument><expr><name pos:line="119" pos:column="21">op_StringFuncInfo<pos:position pos:line="119" pos:column="38"/></name></expr></argument>)<pos:position pos:line="119" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="120" pos:column="13">CASE_OP<pos:position pos:line="120" pos:column="20"/></name><argument_list pos:line="120" pos:column="20">(<argument><expr><name pos:line="120" pos:column="21">op_UnaryOpInfo<pos:position pos:line="120" pos:column="35"/></name></expr></argument>)<pos:position pos:line="120" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="121" pos:column="13">CASE_OP<pos:position pos:line="121" pos:column="20"/></name><argument_list pos:line="121" pos:column="20">(<argument><expr><name pos:line="121" pos:column="21">op_BinaryOpInfo<pos:position pos:line="121" pos:column="36"/></name></expr></argument>)<pos:position pos:line="121" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="122" pos:column="13">CASE_OP<pos:position pos:line="122" pos:column="20"/></name><argument_list pos:line="122" pos:column="20">(<argument><expr><name pos:line="122" pos:column="21">op_ListFuncInfo<pos:position pos:line="122" pos:column="36"/></name></expr></argument>)<pos:position pos:line="122" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="38"/></expr_stmt>
            <default pos:line="123" pos:column="13">default:<pos:position pos:line="123" pos:column="21"/></default>
                <expr_stmt><expr><call><name pos:line="124" pos:column="17">ap_assert<pos:position pos:line="124" pos:column="26"/></name><argument_list pos:line="124" pos:column="26">(<argument><expr><literal type="number" pos:line="124" pos:column="27">0<pos:position pos:line="124" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="125" pos:column="14"/></block></switch>
            <expr_stmt><expr><call><name pos:line="126" pos:column="13">DUMP_P_P<pos:position pos:line="126" pos:column="21"/></name><argument_list pos:line="126" pos:column="21">(<argument><expr><name pos:line="126" pos:column="22">name<pos:position pos:line="126" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="126" pos:column="28">e<pos:position pos:line="126" pos:column="29"/></name><operator pos:line="126" pos:column="29">-&gt;<pos:position pos:line="126" pos:column="34"/></operator><name pos:line="126" pos:column="31">node_arg1<pos:position pos:line="126" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="126" pos:column="42">e<pos:position pos:line="126" pos:column="43"/></name><operator pos:line="126" pos:column="43">-&gt;<pos:position pos:line="126" pos:column="48"/></operator><name pos:line="126" pos:column="45">node_arg2<pos:position pos:line="126" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="126" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="56"/></expr_stmt>
        }<pos:position pos:line="127" pos:column="10"/></block>
        <break pos:line="128" pos:column="9">break;<pos:position pos:line="128" pos:column="15"/></break>
    <comment type="block" pos:line="129" pos:column="5">/* arg1: pointer */</comment>
    <case pos:line="130" pos:column="5">case <expr><name pos:line="130" pos:column="10">op_Regex<pos:position pos:line="130" pos:column="18"/></name></expr>:<pos:position pos:line="130" pos:column="19"/></case>
        <expr_stmt><expr><call><name pos:line="131" pos:column="9">DUMP_P<pos:position pos:line="131" pos:column="15"/></name><argument_list pos:line="131" pos:column="15">(<argument><expr><literal type="string" pos:line="131" pos:column="16">"op_Regex"<pos:position pos:line="131" pos:column="26"/></literal></expr></argument>, <argument><expr><name><name pos:line="131" pos:column="28">e<pos:position pos:line="131" pos:column="29"/></name><operator pos:line="131" pos:column="29">-&gt;<pos:position pos:line="131" pos:column="34"/></operator><name pos:line="131" pos:column="31">node_arg1<pos:position pos:line="131" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="131" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="42"/></expr_stmt>
        <break pos:line="132" pos:column="9">break;<pos:position pos:line="132" pos:column="15"/></break>
    <comment type="block" pos:line="133" pos:column="5">/* arg1: pointer to int */</comment>
    <case pos:line="134" pos:column="5">case <expr><name pos:line="134" pos:column="10">op_RegexBackref<pos:position pos:line="134" pos:column="25"/></name></expr>:<pos:position pos:line="134" pos:column="26"/></case>
        <expr_stmt><expr><call><name pos:line="135" pos:column="9">DUMP_IP<pos:position pos:line="135" pos:column="16"/></name><argument_list pos:line="135" pos:column="16">(<argument><expr><literal type="string" pos:line="135" pos:column="17">"op_RegexBackref"<pos:position pos:line="135" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="36">e<pos:position pos:line="135" pos:column="37"/></name><operator pos:line="135" pos:column="37">-&gt;<pos:position pos:line="135" pos:column="42"/></operator><name pos:line="135" pos:column="39">node_arg1<pos:position pos:line="135" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="135" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="50"/></expr_stmt>
        <break pos:line="136" pos:column="9">break;<pos:position pos:line="136" pos:column="15"/></break>
    <default pos:line="137" pos:column="5">default:<pos:position pos:line="137" pos:column="13"/></default>
        <expr_stmt><expr><call><name pos:line="138" pos:column="9">ap_log_error<pos:position pos:line="138" pos:column="21"/></name><argument_list pos:line="138" pos:column="21">(<argument><expr><name pos:line="138" pos:column="22">MARK<pos:position pos:line="138" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="138" pos:column="28">"%*sERROR: INVALID OP %d"<pos:position pos:line="138" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="138" pos:column="55">indent<pos:position pos:line="138" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="138" pos:column="63">" "<pos:position pos:line="138" pos:column="66"/></literal></expr></argument>, <argument><expr><name><name pos:line="138" pos:column="68">e<pos:position pos:line="138" pos:column="69"/></name><operator pos:line="138" pos:column="69">-&gt;<pos:position pos:line="138" pos:column="74"/></operator><name pos:line="138" pos:column="71">node_op<pos:position pos:line="138" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="138" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="80"/></expr_stmt>
        <break pos:line="139" pos:column="9">break;<pos:position pos:line="139" pos:column="15"/></break>
    }<pos:position pos:line="140" pos:column="6"/></block></switch>
}<pos:position pos:line="141" pos:column="2"/></block></function></unit>
