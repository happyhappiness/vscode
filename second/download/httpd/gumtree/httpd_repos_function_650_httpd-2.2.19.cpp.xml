<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_650_httpd-2.2.19.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">yy_push_state<pos:position pos:line="1" pos:column="26"/></name><argument_list pos:line="1" pos:column="26">( <argument><expr><name pos:line="1" pos:column="28">int<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">new_state<pos:position pos:line="1" pos:column="41"/></name></expr></argument> )<pos:position pos:line="1" pos:column="43"/></argument_list>
<cpp:else pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">else<pos:position pos:line="2" pos:column="6"/></cpp:directive></cpp:else>
static <name pos:line="3" pos:column="8">void<pos:position pos:line="3" pos:column="12"/></name> <name pos:line="3" pos:column="13">yy_push_state<pos:position pos:line="3" pos:column="26"/></name><argument_list pos:line="3" pos:column="26">( <argument><expr><name pos:line="3" pos:column="28">new_state<pos:position pos:line="3" pos:column="37"/></name></expr></argument> )<pos:position pos:line="3" pos:column="39"/></argument_list>
<name pos:line="4" pos:column="1">int<pos:position pos:line="4" pos:column="4"/></name> <name pos:line="4" pos:column="5">new_state<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
<cpp:endif pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">endif<pos:position pos:line="5" pos:column="7"/></cpp:directive></cpp:endif>
        <block pos:line="6" pos:column="9">{
        <if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">( <expr><name pos:line="7" pos:column="14">yy_start_stack_ptr<pos:position pos:line="7" pos:column="32"/></name> <operator pos:line="7" pos:column="33">&gt;=<pos:position pos:line="7" pos:column="38"/></operator> <name pos:line="7" pos:column="36">yy_start_stack_depth<pos:position pos:line="7" pos:column="56"/></name></expr> )<pos:position pos:line="7" pos:column="58"/></condition><then pos:line="7" pos:column="58">
                <block pos:line="8" pos:column="17">{
                <decl_stmt><decl><type><name pos:line="9" pos:column="17">yy_size_t<pos:position pos:line="9" pos:column="26"/></name></type> <name pos:line="9" pos:column="27">new_size<pos:position pos:line="9" pos:column="35"/></name></decl>;<pos:position pos:line="9" pos:column="36"/></decl_stmt>

                <expr_stmt><expr><name pos:line="11" pos:column="17">yy_start_stack_depth<pos:position pos:line="11" pos:column="37"/></name> <operator pos:line="11" pos:column="38">+=<pos:position pos:line="11" pos:column="40"/></operator> <name pos:line="11" pos:column="41">YY_START_STACK_INCR<pos:position pos:line="11" pos:column="60"/></name></expr>;<pos:position pos:line="11" pos:column="61"/></expr_stmt>
                <expr_stmt><expr><name pos:line="12" pos:column="17">new_size<pos:position pos:line="12" pos:column="25"/></name> <operator pos:line="12" pos:column="26">=<pos:position pos:line="12" pos:column="27"/></operator> <name pos:line="12" pos:column="28">yy_start_stack_depth<pos:position pos:line="12" pos:column="48"/></name> <operator pos:line="12" pos:column="49">*<pos:position pos:line="12" pos:column="50"/></operator> <sizeof pos:line="12" pos:column="51">sizeof<argument_list pos:line="12" pos:column="57">( <argument><expr><name pos:line="12" pos:column="59">int<pos:position pos:line="12" pos:column="62"/></name></expr></argument> )<pos:position pos:line="12" pos:column="64"/></argument_list></sizeof></expr>;<pos:position pos:line="12" pos:column="65"/></expr_stmt>

                <if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">( <expr><operator pos:line="14" pos:column="22">!<pos:position pos:line="14" pos:column="23"/></operator> <name pos:line="14" pos:column="24">yy_start_stack<pos:position pos:line="14" pos:column="38"/></name></expr> )<pos:position pos:line="14" pos:column="40"/></condition><then pos:line="14" pos:column="40">
                        <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="25">yy_start_stack<pos:position pos:line="15" pos:column="39"/></name> <operator pos:line="15" pos:column="40">=<pos:position pos:line="15" pos:column="41"/></operator> <operator pos:line="15" pos:column="42">(<pos:position pos:line="15" pos:column="43"/></operator><name pos:line="15" pos:column="43">int<pos:position pos:line="15" pos:column="46"/></name> <operator pos:line="15" pos:column="47">*<pos:position pos:line="15" pos:column="48"/></operator><operator pos:line="15" pos:column="48">)<pos:position pos:line="15" pos:column="49"/></operator> <call><name pos:line="15" pos:column="50">yy_flex_alloc<pos:position pos:line="15" pos:column="63"/></name><argument_list pos:line="15" pos:column="63">( <argument><expr><name pos:line="15" pos:column="65">new_size<pos:position pos:line="15" pos:column="73"/></name></expr></argument> )<pos:position pos:line="15" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="76"/></expr_stmt></block></then>

                <else pos:line="17" pos:column="17">else
                        <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="25">yy_start_stack<pos:position pos:line="18" pos:column="39"/></name> <operator pos:line="18" pos:column="40">=<pos:position pos:line="18" pos:column="41"/></operator> <operator pos:line="18" pos:column="42">(<pos:position pos:line="18" pos:column="43"/></operator><name pos:line="18" pos:column="43">int<pos:position pos:line="18" pos:column="46"/></name> <operator pos:line="18" pos:column="47">*<pos:position pos:line="18" pos:column="48"/></operator><operator pos:line="18" pos:column="48">)<pos:position pos:line="18" pos:column="49"/></operator> <call><name pos:line="18" pos:column="50">yy_flex_realloc<pos:position pos:line="18" pos:column="65"/></name><argument_list pos:line="18" pos:column="65">(
                                        <argument><expr><operator pos:line="19" pos:column="41">(<pos:position pos:line="19" pos:column="42"/></operator><name pos:line="19" pos:column="42">void<pos:position pos:line="19" pos:column="46"/></name> <operator pos:line="19" pos:column="47">*<pos:position pos:line="19" pos:column="48"/></operator><operator pos:line="19" pos:column="48">)<pos:position pos:line="19" pos:column="49"/></operator> <name pos:line="19" pos:column="50">yy_start_stack<pos:position pos:line="19" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="66">new_size<pos:position pos:line="19" pos:column="74"/></name></expr></argument> )<pos:position pos:line="19" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="77"/></expr_stmt></block></else></if>

                <if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">( <expr><operator pos:line="21" pos:column="22">!<pos:position pos:line="21" pos:column="23"/></operator> <name pos:line="21" pos:column="24">yy_start_stack<pos:position pos:line="21" pos:column="38"/></name></expr> )<pos:position pos:line="21" pos:column="40"/></condition><then pos:line="21" pos:column="40">
                        <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="25">YY_FATAL_ERROR<pos:position pos:line="22" pos:column="39"/></name><argument_list pos:line="22" pos:column="39">(
                        <argument><expr><literal type="string" pos:line="23" pos:column="25">"out of memory expanding start-condition stack"<pos:position pos:line="23" pos:column="72"/></literal></expr></argument> )<pos:position pos:line="23" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="75"/></expr_stmt></block></then></if>
                }<pos:position pos:line="24" pos:column="18"/></block></then></if>

        <expr_stmt><expr><name><name pos:line="26" pos:column="9">yy_start_stack<pos:position pos:line="26" pos:column="23"/></name><index pos:line="26" pos:column="23">[<expr><name pos:line="26" pos:column="24">yy_start_stack_ptr<pos:position pos:line="26" pos:column="42"/></name><operator pos:line="26" pos:column="42">++<pos:position pos:line="26" pos:column="44"/></operator></expr>]<pos:position pos:line="26" pos:column="45"/></index></name> <operator pos:line="26" pos:column="46">=<pos:position pos:line="26" pos:column="47"/></operator> <name pos:line="26" pos:column="48">YY_START<pos:position pos:line="26" pos:column="56"/></name></expr>;<pos:position pos:line="26" pos:column="57"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="28" pos:column="9">BEGIN<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><name pos:line="28" pos:column="15">new_state<pos:position pos:line="28" pos:column="24"/></name></expr></argument>)<pos:position pos:line="28" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="29" pos:column="10"/></block></unit>
