<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3273_httpd-2.0.64.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
<decl_stmt><decl><type><name pos:line="3" pos:column="1">pcre<pos:position pos:line="3" pos:column="5"/></name> <modifier pos:line="3" pos:column="6">*<pos:position pos:line="3" pos:column="7"/></modifier></type><name pos:line="3" pos:column="7">re<pos:position pos:line="3" pos:column="9"/></name></decl>;<pos:position pos:line="3" pos:column="10"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="4" pos:column="1">const<pos:position pos:line="4" pos:column="6"/></specifier> <name pos:line="4" pos:column="7">char<pos:position pos:line="4" pos:column="11"/></name> <modifier pos:line="4" pos:column="12">*<pos:position pos:line="4" pos:column="13"/></modifier></type><name pos:line="4" pos:column="13">error<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">int<pos:position pos:line="5" pos:column="4"/></name></type> <name pos:line="5" pos:column="5">erroffset<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="6" pos:column="1">int<pos:position pos:line="6" pos:column="4"/></name></type> <name><name pos:line="6" pos:column="5">ovector<pos:position pos:line="6" pos:column="12"/></name><index pos:line="6" pos:column="12">[<expr><name pos:line="6" pos:column="13">OVECCOUNT<pos:position pos:line="6" pos:column="22"/></name></expr>]<pos:position pos:line="6" pos:column="23"/></index></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="7" pos:column="1">int<pos:position pos:line="7" pos:column="4"/></name></type> <name pos:line="7" pos:column="5">rc<pos:position pos:line="7" pos:column="7"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="9">i<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>

<if pos:line="9" pos:column="1">if <condition pos:line="9" pos:column="4">(<expr><name pos:line="9" pos:column="5">argc<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">!=<pos:position pos:line="9" pos:column="12"/></operator> <literal type="number" pos:line="9" pos:column="13">3<pos:position pos:line="9" pos:column="14"/></literal></expr>)<pos:position pos:line="9" pos:column="15"/></condition><then pos:line="9" pos:column="15">
  <block pos:line="10" pos:column="3">{
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">printf<pos:position pos:line="11" pos:column="9"/></name><argument_list pos:line="11" pos:column="9">(<argument><expr><literal type="string" pos:line="11" pos:column="10">"Two arguments required: a regex and a subject string\n"<pos:position pos:line="11" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="68"/></expr_stmt>
  <return pos:line="12" pos:column="3">return <expr><literal type="number" pos:line="12" pos:column="10">1<pos:position pos:line="12" pos:column="11"/></literal></expr>;<pos:position pos:line="12" pos:column="12"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

<comment type="block" pos:line="15" pos:column="1">/* Compile the regular expression in the first argument */</comment>

<expr_stmt><expr><name pos:line="17" pos:column="1">re<pos:position pos:line="17" pos:column="3"/></name> <operator pos:line="17" pos:column="4">=<pos:position pos:line="17" pos:column="5"/></operator> <call><name pos:line="17" pos:column="6">pcre_compile<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(
  <argument><expr><name><name pos:line="18" pos:column="3">argv<pos:position pos:line="18" pos:column="7"/></name><index pos:line="18" pos:column="7">[<expr><literal type="number" pos:line="18" pos:column="8">1<pos:position pos:line="18" pos:column="9"/></literal></expr>]<pos:position pos:line="18" pos:column="10"/></index></name></expr></argument>,              <comment type="block" pos:line="18" pos:column="25">/* the pattern */</comment>
  <argument><expr><literal type="number" pos:line="19" pos:column="3">0<pos:position pos:line="19" pos:column="4"/></literal></expr></argument>,                    <comment type="block" pos:line="19" pos:column="25">/* default options */</comment>
  <argument><expr><operator pos:line="20" pos:column="3">&amp;<pos:position pos:line="20" pos:column="8"/></operator><name pos:line="20" pos:column="4">error<pos:position pos:line="20" pos:column="9"/></name></expr></argument>,               <comment type="block" pos:line="20" pos:column="25">/* for error message */</comment>
  <argument><expr><operator pos:line="21" pos:column="3">&amp;<pos:position pos:line="21" pos:column="8"/></operator><name pos:line="21" pos:column="4">erroffset<pos:position pos:line="21" pos:column="13"/></name></expr></argument>,           <comment type="block" pos:line="21" pos:column="25">/* for error offset */</comment>
  <argument><expr><name pos:line="22" pos:column="3">NULL<pos:position pos:line="22" pos:column="7"/></name></expr></argument>)<pos:position pos:line="22" pos:column="8"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="9"/></expr_stmt>                <comment type="block" pos:line="22" pos:column="25">/* use default character tables */</comment>

<comment type="block" pos:line="24" pos:column="1">/* Compilation failed: print the error message and exit */</comment>

<if pos:line="26" pos:column="1">if <condition pos:line="26" pos:column="4">(<expr><name pos:line="26" pos:column="5">re<pos:position pos:line="26" pos:column="7"/></name> <operator pos:line="26" pos:column="8">==<pos:position pos:line="26" pos:column="10"/></operator> <name pos:line="26" pos:column="11">NULL<pos:position pos:line="26" pos:column="15"/></name></expr>)<pos:position pos:line="26" pos:column="16"/></condition><then pos:line="26" pos:column="16">
  <block pos:line="27" pos:column="3">{
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">printf<pos:position pos:line="28" pos:column="9"/></name><argument_list pos:line="28" pos:column="9">(<argument><expr><literal type="string" pos:line="28" pos:column="10">"PCRE compilation failed at offset %d: %s\n"<pos:position pos:line="28" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="56">erroffset<pos:position pos:line="28" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="67">error<pos:position pos:line="28" pos:column="72"/></name></expr></argument>)<pos:position pos:line="28" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="74"/></expr_stmt>
  <return pos:line="29" pos:column="3">return <expr><literal type="number" pos:line="29" pos:column="10">1<pos:position pos:line="29" pos:column="11"/></literal></expr>;<pos:position pos:line="29" pos:column="12"/></return>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

<comment type="block" pos:line="32" pos:column="1">/* Compilation succeeded: match the subject in the second argument */</comment>

<expr_stmt><expr><name pos:line="34" pos:column="1">rc<pos:position pos:line="34" pos:column="3"/></name> <operator pos:line="34" pos:column="4">=<pos:position pos:line="34" pos:column="5"/></operator> <call><name pos:line="34" pos:column="6">pcre_exec<pos:position pos:line="34" pos:column="15"/></name><argument_list pos:line="34" pos:column="15">(
  <argument><expr><name pos:line="35" pos:column="3">re<pos:position pos:line="35" pos:column="5"/></name></expr></argument>,                   <comment type="block" pos:line="35" pos:column="25">/* the compiled pattern */</comment>
  <argument><expr><name pos:line="36" pos:column="3">NULL<pos:position pos:line="36" pos:column="7"/></name></expr></argument>,                 <comment type="block" pos:line="36" pos:column="25">/* no extra data - we didn't study the pattern */</comment>
  <argument><expr><name><name pos:line="37" pos:column="3">argv<pos:position pos:line="37" pos:column="7"/></name><index pos:line="37" pos:column="7">[<expr><literal type="number" pos:line="37" pos:column="8">2<pos:position pos:line="37" pos:column="9"/></literal></expr>]<pos:position pos:line="37" pos:column="10"/></index></name></expr></argument>,              <comment type="block" pos:line="37" pos:column="25">/* the subject string */</comment>
  <argument><expr><operator pos:line="38" pos:column="3">(<pos:position pos:line="38" pos:column="4"/></operator><name pos:line="38" pos:column="4">int<pos:position pos:line="38" pos:column="7"/></name><operator pos:line="38" pos:column="7">)<pos:position pos:line="38" pos:column="8"/></operator><call><name pos:line="38" pos:column="8">strlen<pos:position pos:line="38" pos:column="14"/></name><argument_list pos:line="38" pos:column="14">(<argument><expr><name><name pos:line="38" pos:column="15">argv<pos:position pos:line="38" pos:column="19"/></name><index pos:line="38" pos:column="19">[<expr><literal type="number" pos:line="38" pos:column="20">2<pos:position pos:line="38" pos:column="21"/></literal></expr>]<pos:position pos:line="38" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="38" pos:column="23"/></argument_list></call></expr></argument>, <comment type="block" pos:line="38" pos:column="25">/* the length of the subject */</comment>
  <argument><expr><literal type="number" pos:line="39" pos:column="3">0<pos:position pos:line="39" pos:column="4"/></literal></expr></argument>,                    <comment type="block" pos:line="39" pos:column="25">/* start at offset 0 in the subject */</comment>
  <argument><expr><literal type="number" pos:line="40" pos:column="3">0<pos:position pos:line="40" pos:column="4"/></literal></expr></argument>,                    <comment type="block" pos:line="40" pos:column="25">/* default options */</comment>
  <argument><expr><name pos:line="41" pos:column="3">ovector<pos:position pos:line="41" pos:column="10"/></name></expr></argument>,              <comment type="block" pos:line="41" pos:column="25">/* output vector for substring information */</comment>
  <argument><expr><name pos:line="42" pos:column="3">OVECCOUNT<pos:position pos:line="42" pos:column="12"/></name></expr></argument>)<pos:position pos:line="42" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="14"/></expr_stmt>           <comment type="block" pos:line="42" pos:column="25">/* number of elements in the output vector */</comment>

<comment type="block" pos:line="44" pos:column="1">/* Matching failed: handle error cases */</comment>

<if pos:line="46" pos:column="1">if <condition pos:line="46" pos:column="4">(<expr><name pos:line="46" pos:column="5">rc<pos:position pos:line="46" pos:column="7"/></name> <operator pos:line="46" pos:column="8">&lt;<pos:position pos:line="46" pos:column="12"/></operator> <literal type="number" pos:line="46" pos:column="10">0<pos:position pos:line="46" pos:column="11"/></literal></expr>)<pos:position pos:line="46" pos:column="12"/></condition><then pos:line="46" pos:column="12">
  <block pos:line="47" pos:column="3">{
  <switch pos:line="48" pos:column="3">switch<condition pos:line="48" pos:column="9">(<expr><name pos:line="48" pos:column="10">rc<pos:position pos:line="48" pos:column="12"/></name></expr>)<pos:position pos:line="48" pos:column="13"/></condition>
    <block pos:line="49" pos:column="5">{
    <case pos:line="50" pos:column="5">case <expr><name pos:line="50" pos:column="10">PCRE_ERROR_NOMATCH<pos:position pos:line="50" pos:column="28"/></name></expr>:<pos:position pos:line="50" pos:column="29"/></case> <expr_stmt><expr><call><name pos:line="50" pos:column="30">printf<pos:position pos:line="50" pos:column="36"/></name><argument_list pos:line="50" pos:column="36">(<argument><expr><literal type="string" pos:line="50" pos:column="37">"No match\n"<pos:position pos:line="50" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="51"/></expr_stmt> <break pos:line="50" pos:column="52">break;<pos:position pos:line="50" pos:column="58"/></break>
    <comment type="block" pos:line="51" pos:column="5">/*
    Handle other special cases if you like
    */</comment>
    <default pos:line="54" pos:column="5">default:<pos:position pos:line="54" pos:column="13"/></default> <expr_stmt><expr><call><name pos:line="54" pos:column="14">printf<pos:position pos:line="54" pos:column="20"/></name><argument_list pos:line="54" pos:column="20">(<argument><expr><literal type="string" pos:line="54" pos:column="21">"Matching error %d\n"<pos:position pos:line="54" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="44">rc<pos:position pos:line="54" pos:column="46"/></name></expr></argument>)<pos:position pos:line="54" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="48"/></expr_stmt> <break pos:line="54" pos:column="49">break;<pos:position pos:line="54" pos:column="55"/></break>
    }<pos:position pos:line="55" pos:column="6"/></block></switch>
  <return pos:line="56" pos:column="3">return <expr><literal type="number" pos:line="56" pos:column="10">1<pos:position pos:line="56" pos:column="11"/></literal></expr>;<pos:position pos:line="56" pos:column="12"/></return>
  }<pos:position pos:line="57" pos:column="4"/></block></then></if>

<comment type="block" pos:line="59" pos:column="1">/* Match succeded */</comment>

<expr_stmt><expr><call><name pos:line="61" pos:column="1">printf<pos:position pos:line="61" pos:column="7"/></name><argument_list pos:line="61" pos:column="7">(<argument><expr><literal type="string" pos:line="61" pos:column="8">"Match succeeded\n"<pos:position pos:line="61" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="29"/></expr_stmt>

<comment type="block" pos:line="63" pos:column="1">/* The output vector wasn't big enough */</comment>

<if pos:line="65" pos:column="1">if <condition pos:line="65" pos:column="4">(<expr><name pos:line="65" pos:column="5">rc<pos:position pos:line="65" pos:column="7"/></name> <operator pos:line="65" pos:column="8">==<pos:position pos:line="65" pos:column="10"/></operator> <literal type="number" pos:line="65" pos:column="11">0<pos:position pos:line="65" pos:column="12"/></literal></expr>)<pos:position pos:line="65" pos:column="13"/></condition><then pos:line="65" pos:column="13">
  <block pos:line="66" pos:column="3">{
  <expr_stmt><expr><name pos:line="67" pos:column="3">rc<pos:position pos:line="67" pos:column="5"/></name> <operator pos:line="67" pos:column="6">=<pos:position pos:line="67" pos:column="7"/></operator> <name pos:line="67" pos:column="8">OVECCOUNT<pos:position pos:line="67" pos:column="17"/></name><operator pos:line="67" pos:column="17">/<pos:position pos:line="67" pos:column="18"/></operator><literal type="number" pos:line="67" pos:column="18">3<pos:position pos:line="67" pos:column="19"/></literal></expr>;<pos:position pos:line="67" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="68" pos:column="3">printf<pos:position pos:line="68" pos:column="9"/></name><argument_list pos:line="68" pos:column="9">(<argument><expr><literal type="string" pos:line="68" pos:column="10">"ovector only has room for %d captured substrings\n"<pos:position pos:line="68" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="64">rc<pos:position pos:line="68" pos:column="66"/></name> <operator pos:line="68" pos:column="67">-<pos:position pos:line="68" pos:column="68"/></operator> <literal type="number" pos:line="68" pos:column="69">1<pos:position pos:line="68" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="72"/></expr_stmt>
  }<pos:position pos:line="69" pos:column="4"/></block></then></if>

<comment type="block" pos:line="71" pos:column="1">/* Show substrings stored in the output vector */</comment>

<for pos:line="73" pos:column="1">for <control pos:line="73" pos:column="5">(<init><expr><name pos:line="73" pos:column="6">i<pos:position pos:line="73" pos:column="7"/></name> <operator pos:line="73" pos:column="8">=<pos:position pos:line="73" pos:column="9"/></operator> <literal type="number" pos:line="73" pos:column="10">0<pos:position pos:line="73" pos:column="11"/></literal></expr>;<pos:position pos:line="73" pos:column="12"/></init> <condition><expr><name pos:line="73" pos:column="13">i<pos:position pos:line="73" pos:column="14"/></name> <operator pos:line="73" pos:column="15">&lt;<pos:position pos:line="73" pos:column="19"/></operator> <name pos:line="73" pos:column="17">rc<pos:position pos:line="73" pos:column="19"/></name></expr>;<pos:position pos:line="73" pos:column="20"/></condition> <incr><expr><name pos:line="73" pos:column="21">i<pos:position pos:line="73" pos:column="22"/></name><operator pos:line="73" pos:column="22">++<pos:position pos:line="73" pos:column="24"/></operator></expr></incr>)<pos:position pos:line="73" pos:column="25"/></control>
  <block pos:line="74" pos:column="3">{
  <decl_stmt><decl><type><name pos:line="75" pos:column="3">char<pos:position pos:line="75" pos:column="7"/></name> <modifier pos:line="75" pos:column="8">*<pos:position pos:line="75" pos:column="9"/></modifier></type><name pos:line="75" pos:column="9">substring_start<pos:position pos:line="75" pos:column="24"/></name> <init pos:line="75" pos:column="25">= <expr><name><name pos:line="75" pos:column="27">argv<pos:position pos:line="75" pos:column="31"/></name><index pos:line="75" pos:column="31">[<expr><literal type="number" pos:line="75" pos:column="32">2<pos:position pos:line="75" pos:column="33"/></literal></expr>]<pos:position pos:line="75" pos:column="34"/></index></name> <operator pos:line="75" pos:column="35">+<pos:position pos:line="75" pos:column="36"/></operator> <name><name pos:line="75" pos:column="37">ovector<pos:position pos:line="75" pos:column="44"/></name><index pos:line="75" pos:column="44">[<expr><literal type="number" pos:line="75" pos:column="45">2<pos:position pos:line="75" pos:column="46"/></literal><operator pos:line="75" pos:column="46">*<pos:position pos:line="75" pos:column="47"/></operator><name pos:line="75" pos:column="47">i<pos:position pos:line="75" pos:column="48"/></name></expr>]<pos:position pos:line="75" pos:column="49"/></index></name></expr></init></decl>;<pos:position pos:line="75" pos:column="50"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="76" pos:column="3">int<pos:position pos:line="76" pos:column="6"/></name></type> <name pos:line="76" pos:column="7">substring_length<pos:position pos:line="76" pos:column="23"/></name> <init pos:line="76" pos:column="24">= <expr><name><name pos:line="76" pos:column="26">ovector<pos:position pos:line="76" pos:column="33"/></name><index pos:line="76" pos:column="33">[<expr><literal type="number" pos:line="76" pos:column="34">2<pos:position pos:line="76" pos:column="35"/></literal><operator pos:line="76" pos:column="35">*<pos:position pos:line="76" pos:column="36"/></operator><name pos:line="76" pos:column="36">i<pos:position pos:line="76" pos:column="37"/></name><operator pos:line="76" pos:column="37">+<pos:position pos:line="76" pos:column="38"/></operator><literal type="number" pos:line="76" pos:column="38">1<pos:position pos:line="76" pos:column="39"/></literal></expr>]<pos:position pos:line="76" pos:column="40"/></index></name> <operator pos:line="76" pos:column="41">-<pos:position pos:line="76" pos:column="42"/></operator> <name><name pos:line="76" pos:column="43">ovector<pos:position pos:line="76" pos:column="50"/></name><index pos:line="76" pos:column="50">[<expr><literal type="number" pos:line="76" pos:column="51">2<pos:position pos:line="76" pos:column="52"/></literal><operator pos:line="76" pos:column="52">*<pos:position pos:line="76" pos:column="53"/></operator><name pos:line="76" pos:column="53">i<pos:position pos:line="76" pos:column="54"/></name></expr>]<pos:position pos:line="76" pos:column="55"/></index></name></expr></init></decl>;<pos:position pos:line="76" pos:column="56"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="77" pos:column="3">printf<pos:position pos:line="77" pos:column="9"/></name><argument_list pos:line="77" pos:column="9">(<argument><expr><literal type="string" pos:line="77" pos:column="10">"%2d: %.*s\n"<pos:position pos:line="77" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="25">i<pos:position pos:line="77" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="28">substring_length<pos:position pos:line="77" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="46">substring_start<pos:position pos:line="77" pos:column="61"/></name></expr></argument>)<pos:position pos:line="77" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="63"/></expr_stmt>
  }<pos:position pos:line="78" pos:column="4"/></block></for>

<return pos:line="80" pos:column="1">return <expr><literal type="number" pos:line="80" pos:column="8">0<pos:position pos:line="80" pos:column="9"/></literal></expr>;<pos:position pos:line="80" pos:column="10"/></return>
}<pos:position pos:line="81" pos:column="2"/></block></function></unit>
