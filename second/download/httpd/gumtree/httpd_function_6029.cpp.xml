<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_6029.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">task_done<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">h2_mplx<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">m<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">h2_task<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">task<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">h2_req_engine<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">ngn<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><name pos:line="3" pos:column="9">task<pos:position pos:line="3" pos:column="13"/></name></expr>)<pos:position pos:line="3" pos:column="14"/></condition><then pos:line="3" pos:column="14"> <block pos:line="3" pos:column="15">{
        <decl_stmt><decl><type><name pos:line="4" pos:column="9">h2_io<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">io<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><call><name pos:line="4" pos:column="21">h2_io_set_get<pos:position pos:line="4" pos:column="34"/></name><argument_list pos:line="4" pos:column="34">(<argument><expr><name><name pos:line="4" pos:column="35">m<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">-&gt;<pos:position pos:line="4" pos:column="41"/></operator><name pos:line="4" pos:column="38">stream_ios<pos:position pos:line="4" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="4" pos:column="50">task<pos:position pos:line="4" pos:column="54"/></name><operator pos:line="4" pos:column="54">-&gt;<pos:position pos:line="4" pos:column="59"/></operator><name pos:line="4" pos:column="56">stream_id<pos:position pos:line="4" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="67"/></decl_stmt>
        
        <if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name><name pos:line="6" pos:column="13">task<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">-&gt;<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="19">frozen<pos:position pos:line="6" pos:column="25"/></name></name></expr>)<pos:position pos:line="6" pos:column="26"/></condition><then pos:line="6" pos:column="26"> <block pos:line="6" pos:column="27">{
            <comment type="block" pos:line="7" pos:column="13">/* this task was handed over to an engine for processing 
             * and the original worker has finished. That means the 
             * engine may start processing now. */</comment>
            <expr_stmt><expr><call><name pos:line="10" pos:column="13">h2_task_thaw<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><name pos:line="10" pos:column="26">task<pos:position pos:line="10" pos:column="30"/></name></expr></argument>)<pos:position pos:line="10" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt>
            <comment type="block" pos:line="11" pos:column="13">/* we do not want the task to block on writing response
             * bodies into the mplx. */</comment>
            <comment type="block" pos:line="13" pos:column="13">/* FIXME: this implementation is incomplete. */</comment>
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">h2_task_set_io_blocking<pos:position pos:line="14" pos:column="36"/></name><argument_list pos:line="14" pos:column="36">(<argument><expr><name pos:line="14" pos:column="37">task<pos:position pos:line="14" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="43">0<pos:position pos:line="14" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="46"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">apr_thread_cond_broadcast<pos:position pos:line="15" pos:column="38"/></name><argument_list pos:line="15" pos:column="38">(<argument><expr><name><name pos:line="15" pos:column="39">m<pos:position pos:line="15" pos:column="40"/></name><operator pos:line="15" pos:column="40">-&gt;<pos:position pos:line="15" pos:column="45"/></operator><name pos:line="15" pos:column="42">task_thawed<pos:position pos:line="15" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="55"/></expr_stmt>
        }<pos:position pos:line="16" pos:column="10"/></block></then>
        <else pos:line="17" pos:column="9">else <block pos:line="17" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">ap_log_cerror<pos:position pos:line="18" pos:column="26"/></name><argument_list pos:line="18" pos:column="26">(<argument><expr><name pos:line="18" pos:column="27">APLOG_MARK<pos:position pos:line="18" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="39">APLOG_TRACE1<pos:position pos:line="18" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="53">0<pos:position pos:line="18" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="56">m<pos:position pos:line="18" pos:column="57"/></name><operator pos:line="18" pos:column="57">-&gt;<pos:position pos:line="18" pos:column="62"/></operator><name pos:line="18" pos:column="59">c<pos:position pos:line="18" pos:column="60"/></name></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="19" pos:column="27">"h2_mplx(%ld): task(%s) done"<pos:position pos:line="19" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="58">m<pos:position pos:line="19" pos:column="59"/></name><operator pos:line="19" pos:column="59">-&gt;<pos:position pos:line="19" pos:column="64"/></operator><name pos:line="19" pos:column="61">id<pos:position pos:line="19" pos:column="63"/></name></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="65">task<pos:position pos:line="19" pos:column="69"/></name><operator pos:line="19" pos:column="69">-&gt;<pos:position pos:line="19" pos:column="74"/></operator><name pos:line="19" pos:column="71">id<pos:position pos:line="19" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="75"/></expr_stmt>
            <comment type="block" pos:line="20" pos:column="13">/* clean our references and report request as done. Signal
             * that we want another unless we have been aborted */</comment>
            <comment type="block" pos:line="22" pos:column="13">/* TODO: this will keep a worker attached to this h2_mplx as
             * long as it has requests to handle. Might no be fair to
             * other mplx's. Perhaps leave after n requests? */</comment>
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">h2_mplx_out_close<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">(<argument><expr><name pos:line="25" pos:column="31">m<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="34">task<pos:position pos:line="25" pos:column="38"/></name><operator pos:line="25" pos:column="38">-&gt;<pos:position pos:line="25" pos:column="43"/></operator><name pos:line="25" pos:column="40">stream_id<pos:position pos:line="25" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="51"/></expr_stmt>
            
            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><name pos:line="27" pos:column="17">ngn<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">&amp;&amp;<pos:position pos:line="27" pos:column="31"/></operator> <name pos:line="27" pos:column="24">io<pos:position pos:line="27" pos:column="26"/></name></expr>)<pos:position pos:line="27" pos:column="27"/></condition><then pos:line="27" pos:column="27"> <block pos:line="27" pos:column="28">{
                <decl_stmt><decl><type><name pos:line="28" pos:column="17">apr_off_t<pos:position pos:line="28" pos:column="26"/></name></type> <name pos:line="28" pos:column="27">bytes<pos:position pos:line="28" pos:column="32"/></name> <init pos:line="28" pos:column="33">= <expr><name><name pos:line="28" pos:column="35">io<pos:position pos:line="28" pos:column="37"/></name><operator pos:line="28" pos:column="37">-&gt;<pos:position pos:line="28" pos:column="42"/></operator><name pos:line="28" pos:column="39">output_consumed<pos:position pos:line="28" pos:column="54"/></name></name> <operator pos:line="28" pos:column="55">+<pos:position pos:line="28" pos:column="56"/></operator> <call><name pos:line="28" pos:column="57">h2_io_out_length<pos:position pos:line="28" pos:column="73"/></name><argument_list pos:line="28" pos:column="73">(<argument><expr><name pos:line="28" pos:column="74">io<pos:position pos:line="28" pos:column="76"/></name></expr></argument>)<pos:position pos:line="28" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="78"/></decl_stmt>
                <if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">bytes<pos:position pos:line="29" pos:column="26"/></name> <operator pos:line="29" pos:column="27">&gt;<pos:position pos:line="29" pos:column="31"/></operator> <literal type="number" pos:line="29" pos:column="29">0<pos:position pos:line="29" pos:column="30"/></literal></expr>)<pos:position pos:line="29" pos:column="31"/></condition><then pos:line="29" pos:column="31"> <block pos:line="29" pos:column="32">{
                    <comment type="block" pos:line="30" pos:column="21">/* we need to report consumed and current buffered output
                     * to the engine. The request will be streamed out or cancelled,
                     * no more data is coming from it and the engine should update
                     * its calculations before we destroy this information. */</comment>
                    <expr_stmt><expr><call><name pos:line="34" pos:column="21">h2_req_engine_out_consumed<pos:position pos:line="34" pos:column="47"/></name><argument_list pos:line="34" pos:column="47">(<argument><expr><name pos:line="34" pos:column="48">ngn<pos:position pos:line="34" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="53">task<pos:position pos:line="34" pos:column="57"/></name><operator pos:line="34" pos:column="57">-&gt;<pos:position pos:line="34" pos:column="62"/></operator><name pos:line="34" pos:column="59">c<pos:position pos:line="34" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="62">bytes<pos:position pos:line="34" pos:column="67"/></name></expr></argument>)<pos:position pos:line="34" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="69"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="35" pos:column="21">io<pos:position pos:line="35" pos:column="23"/></name><operator pos:line="35" pos:column="23">-&gt;<pos:position pos:line="35" pos:column="28"/></operator><name pos:line="35" pos:column="25">output_consumed<pos:position pos:line="35" pos:column="40"/></name></name> <operator pos:line="35" pos:column="41">=<pos:position pos:line="35" pos:column="42"/></operator> <literal type="number" pos:line="35" pos:column="43">0<pos:position pos:line="35" pos:column="44"/></literal></expr>;<pos:position pos:line="35" pos:column="45"/></expr_stmt>
                }<pos:position pos:line="36" pos:column="18"/></block></then></if>
            }<pos:position pos:line="37" pos:column="14"/></block></then></if>
            
            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><name><name pos:line="39" pos:column="17">task<pos:position pos:line="39" pos:column="21"/></name><operator pos:line="39" pos:column="21">-&gt;<pos:position pos:line="39" pos:column="26"/></operator><name pos:line="39" pos:column="23">engine<pos:position pos:line="39" pos:column="29"/></name></name></expr>)<pos:position pos:line="39" pos:column="30"/></condition><then pos:line="39" pos:column="30"> <block pos:line="39" pos:column="31">{
                <if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><operator pos:line="40" pos:column="21">!<pos:position pos:line="40" pos:column="22"/></operator><call><name pos:line="40" pos:column="22">h2_req_engine_is_shutdown<pos:position pos:line="40" pos:column="47"/></name><argument_list pos:line="40" pos:column="47">(<argument><expr><name><name pos:line="40" pos:column="48">task<pos:position pos:line="40" pos:column="52"/></name><operator pos:line="40" pos:column="52">-&gt;<pos:position pos:line="40" pos:column="57"/></operator><name pos:line="40" pos:column="54">engine<pos:position pos:line="40" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="62"/></condition><then pos:line="40" pos:column="62"> <block pos:line="40" pos:column="63">{
                    <expr_stmt><expr><call><name pos:line="41" pos:column="21">ap_log_cerror<pos:position pos:line="41" pos:column="34"/></name><argument_list pos:line="41" pos:column="34">(<argument><expr><name pos:line="41" pos:column="35">APLOG_MARK<pos:position pos:line="41" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="47">APLOG_WARNING<pos:position pos:line="41" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="62">0<pos:position pos:line="41" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="65">m<pos:position pos:line="41" pos:column="66"/></name><operator pos:line="41" pos:column="66">-&gt;<pos:position pos:line="41" pos:column="71"/></operator><name pos:line="41" pos:column="68">c<pos:position pos:line="41" pos:column="69"/></name></name></expr></argument>,
                                  <argument><expr><literal type="string" pos:line="42" pos:column="35">"h2_mplx(%ld): task(%s) has not-shutdown "<pos:position pos:line="42" pos:column="77"/></literal>
                                  <literal type="string" pos:line="43" pos:column="35">"engine(%s)"<pos:position pos:line="43" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="49">m<pos:position pos:line="43" pos:column="50"/></name><operator pos:line="43" pos:column="50">-&gt;<pos:position pos:line="43" pos:column="55"/></operator><name pos:line="43" pos:column="52">id<pos:position pos:line="43" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="56">task<pos:position pos:line="43" pos:column="60"/></name><operator pos:line="43" pos:column="60">-&gt;<pos:position pos:line="43" pos:column="65"/></operator><name pos:line="43" pos:column="62">id<pos:position pos:line="43" pos:column="64"/></name></name></expr></argument>, 
                                  <argument><expr><call><name pos:line="44" pos:column="35">h2_req_engine_get_id<pos:position pos:line="44" pos:column="55"/></name><argument_list pos:line="44" pos:column="55">(<argument><expr><name><name pos:line="44" pos:column="56">task<pos:position pos:line="44" pos:column="60"/></name><operator pos:line="44" pos:column="60">-&gt;<pos:position pos:line="44" pos:column="65"/></operator><name pos:line="44" pos:column="62">engine<pos:position pos:line="44" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="71"/></expr_stmt>
                }<pos:position pos:line="45" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="46" pos:column="17">h2_ngn_shed_done_ngn<pos:position pos:line="46" pos:column="37"/></name><argument_list pos:line="46" pos:column="37">(<argument><expr><name><name pos:line="46" pos:column="38">m<pos:position pos:line="46" pos:column="39"/></name><operator pos:line="46" pos:column="39">-&gt;<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="41">ngn_shed<pos:position pos:line="46" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="51">task<pos:position pos:line="46" pos:column="55"/></name><operator pos:line="46" pos:column="55">-&gt;<pos:position pos:line="46" pos:column="60"/></operator><name pos:line="46" pos:column="57">engine<pos:position pos:line="46" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="65"/></expr_stmt>
            }<pos:position pos:line="47" pos:column="14"/></block></then></if>
            
            <if pos:line="49" pos:column="13">if <condition pos:line="49" pos:column="16">(<expr><name pos:line="49" pos:column="17">io<pos:position pos:line="49" pos:column="19"/></name></expr>)<pos:position pos:line="49" pos:column="20"/></condition><then pos:line="49" pos:column="20"> <block pos:line="49" pos:column="21">{
                <decl_stmt><decl><type><name pos:line="50" pos:column="17">apr_time_t<pos:position pos:line="50" pos:column="27"/></name></type> <name pos:line="50" pos:column="28">now<pos:position pos:line="50" pos:column="31"/></name> <init pos:line="50" pos:column="32">= <expr><call><name pos:line="50" pos:column="34">apr_time_now<pos:position pos:line="50" pos:column="46"/></name><argument_list pos:line="50" pos:column="46">()<pos:position pos:line="50" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="50" pos:column="49"/></decl_stmt>
                <if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><operator pos:line="51" pos:column="21">!<pos:position pos:line="51" pos:column="22"/></operator><name><name pos:line="51" pos:column="22">io<pos:position pos:line="51" pos:column="24"/></name><operator pos:line="51" pos:column="24">-&gt;<pos:position pos:line="51" pos:column="29"/></operator><name pos:line="51" pos:column="26">orphaned<pos:position pos:line="51" pos:column="34"/></name></name> <operator pos:line="51" pos:column="35">&amp;&amp;<pos:position pos:line="51" pos:column="45"/></operator> <name><name pos:line="51" pos:column="38">m<pos:position pos:line="51" pos:column="39"/></name><operator pos:line="51" pos:column="39">-&gt;<pos:position pos:line="51" pos:column="44"/></operator><name pos:line="51" pos:column="41">redo_ios<pos:position pos:line="51" pos:column="49"/></name></name>
                    <operator pos:line="52" pos:column="21">&amp;&amp;<pos:position pos:line="52" pos:column="31"/></operator> <call><name pos:line="52" pos:column="24">h2_io_set_get<pos:position pos:line="52" pos:column="37"/></name><argument_list pos:line="52" pos:column="37">(<argument><expr><name><name pos:line="52" pos:column="38">m<pos:position pos:line="52" pos:column="39"/></name><operator pos:line="52" pos:column="39">-&gt;<pos:position pos:line="52" pos:column="44"/></operator><name pos:line="52" pos:column="41">redo_ios<pos:position pos:line="52" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="51">io<pos:position pos:line="52" pos:column="53"/></name><operator pos:line="52" pos:column="53">-&gt;<pos:position pos:line="52" pos:column="58"/></operator><name pos:line="52" pos:column="55">id<pos:position pos:line="52" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="59"/></condition><then pos:line="52" pos:column="59"> <block pos:line="52" pos:column="60">{
                    <comment type="block" pos:line="53" pos:column="21">/* reset and schedule again */</comment>
                    <expr_stmt><expr><call><name pos:line="54" pos:column="21">h2_io_redo<pos:position pos:line="54" pos:column="31"/></name><argument_list pos:line="54" pos:column="31">(<argument><expr><name pos:line="54" pos:column="32">io<pos:position pos:line="54" pos:column="34"/></name></expr></argument>)<pos:position pos:line="54" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="36"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="55" pos:column="21">h2_io_set_remove<pos:position pos:line="55" pos:column="37"/></name><argument_list pos:line="55" pos:column="37">(<argument><expr><name><name pos:line="55" pos:column="38">m<pos:position pos:line="55" pos:column="39"/></name><operator pos:line="55" pos:column="39">-&gt;<pos:position pos:line="55" pos:column="44"/></operator><name pos:line="55" pos:column="41">redo_ios<pos:position pos:line="55" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="51">io<pos:position pos:line="55" pos:column="53"/></name></expr></argument>)<pos:position pos:line="55" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="55"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="56" pos:column="21">h2_iq_add<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><name><name pos:line="56" pos:column="31">m<pos:position pos:line="56" pos:column="32"/></name><operator pos:line="56" pos:column="32">-&gt;<pos:position pos:line="56" pos:column="37"/></operator><name pos:line="56" pos:column="34">q<pos:position pos:line="56" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="37">io<pos:position pos:line="56" pos:column="39"/></name><operator pos:line="56" pos:column="39">-&gt;<pos:position pos:line="56" pos:column="44"/></operator><name pos:line="56" pos:column="41">id<pos:position pos:line="56" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="45">NULL<pos:position pos:line="56" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="51">NULL<pos:position pos:line="56" pos:column="55"/></name></expr></argument>)<pos:position pos:line="56" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="57"/></expr_stmt>
                }<pos:position pos:line="57" pos:column="18"/></block></then>
                <else pos:line="58" pos:column="17">else <block pos:line="58" pos:column="22">{
                    <expr_stmt><expr><name><name pos:line="59" pos:column="21">io<pos:position pos:line="59" pos:column="23"/></name><operator pos:line="59" pos:column="23">-&gt;<pos:position pos:line="59" pos:column="28"/></operator><name pos:line="59" pos:column="25">worker_done<pos:position pos:line="59" pos:column="36"/></name></name> <operator pos:line="59" pos:column="37">=<pos:position pos:line="59" pos:column="38"/></operator> <literal type="number" pos:line="59" pos:column="39">1<pos:position pos:line="59" pos:column="40"/></literal></expr>;<pos:position pos:line="59" pos:column="41"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="60" pos:column="21">io<pos:position pos:line="60" pos:column="23"/></name><operator pos:line="60" pos:column="23">-&gt;<pos:position pos:line="60" pos:column="28"/></operator><name pos:line="60" pos:column="25">done_at<pos:position pos:line="60" pos:column="32"/></name></name> <operator pos:line="60" pos:column="33">=<pos:position pos:line="60" pos:column="34"/></operator> <name pos:line="60" pos:column="35">now<pos:position pos:line="60" pos:column="38"/></name></expr>;<pos:position pos:line="60" pos:column="39"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="61" pos:column="21">ap_log_cerror<pos:position pos:line="61" pos:column="34"/></name><argument_list pos:line="61" pos:column="34">(<argument><expr><name pos:line="61" pos:column="35">APLOG_MARK<pos:position pos:line="61" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="47">APLOG_TRACE1<pos:position pos:line="61" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="61">0<pos:position pos:line="61" pos:column="62"/></literal></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="64">m<pos:position pos:line="61" pos:column="65"/></name><operator pos:line="61" pos:column="65">-&gt;<pos:position pos:line="61" pos:column="70"/></operator><name pos:line="61" pos:column="67">c<pos:position pos:line="61" pos:column="68"/></name></name></expr></argument>,
                                  <argument><expr><literal type="string" pos:line="62" pos:column="35">"h2_mplx(%ld): request(%d) done, %f ms"<pos:position pos:line="62" pos:column="74"/></literal>
                                  <literal type="string" pos:line="63" pos:column="35">" elapsed"<pos:position pos:line="63" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="47">m<pos:position pos:line="63" pos:column="48"/></name><operator pos:line="63" pos:column="48">-&gt;<pos:position pos:line="63" pos:column="53"/></operator><name pos:line="63" pos:column="50">id<pos:position pos:line="63" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="54">io<pos:position pos:line="63" pos:column="56"/></name><operator pos:line="63" pos:column="56">-&gt;<pos:position pos:line="63" pos:column="61"/></operator><name pos:line="63" pos:column="58">id<pos:position pos:line="63" pos:column="60"/></name></name></expr></argument>, 
                                  <argument><expr><operator pos:line="64" pos:column="35">(<pos:position pos:line="64" pos:column="36"/></operator><name><name pos:line="64" pos:column="36">io<pos:position pos:line="64" pos:column="38"/></name><operator pos:line="64" pos:column="38">-&gt;<pos:position pos:line="64" pos:column="43"/></operator><name pos:line="64" pos:column="40">done_at<pos:position pos:line="64" pos:column="47"/></name></name> <operator pos:line="64" pos:column="48">-<pos:position pos:line="64" pos:column="49"/></operator> <name><name pos:line="64" pos:column="50">io<pos:position pos:line="64" pos:column="52"/></name><operator pos:line="64" pos:column="52">-&gt;<pos:position pos:line="64" pos:column="57"/></operator><name pos:line="64" pos:column="54">started_at<pos:position pos:line="64" pos:column="64"/></name></name><operator pos:line="64" pos:column="64">)<pos:position pos:line="64" pos:column="65"/></operator> <operator pos:line="64" pos:column="66">/<pos:position pos:line="64" pos:column="67"/></operator> <literal type="number" pos:line="64" pos:column="68">1000.0<pos:position pos:line="64" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="76"/></expr_stmt>
                    <if pos:line="65" pos:column="21">if <condition pos:line="65" pos:column="24">(<expr><name><name pos:line="65" pos:column="25">io<pos:position pos:line="65" pos:column="27"/></name><operator pos:line="65" pos:column="27">-&gt;<pos:position pos:line="65" pos:column="32"/></operator><name pos:line="65" pos:column="29">started_at<pos:position pos:line="65" pos:column="39"/></name></name> <operator pos:line="65" pos:column="40">&gt;<pos:position pos:line="65" pos:column="44"/></operator> <name><name pos:line="65" pos:column="42">m<pos:position pos:line="65" pos:column="43"/></name><operator pos:line="65" pos:column="43">-&gt;<pos:position pos:line="65" pos:column="48"/></operator><name pos:line="65" pos:column="45">last_idle_block<pos:position pos:line="65" pos:column="60"/></name></name></expr>)<pos:position pos:line="65" pos:column="61"/></condition><then pos:line="65" pos:column="61"> <block pos:line="65" pos:column="62">{
                        <comment type="block" pos:line="66" pos:column="25">/* this task finished without causing an 'idle block', e.g.
                         * a block by flow control.
                         */</comment>
                        <if pos:line="69" pos:column="25">if <condition pos:line="69" pos:column="28">(<expr><name pos:line="69" pos:column="29">now<pos:position pos:line="69" pos:column="32"/></name> <operator pos:line="69" pos:column="33">-<pos:position pos:line="69" pos:column="34"/></operator> <name><name pos:line="69" pos:column="35">m<pos:position pos:line="69" pos:column="36"/></name><operator pos:line="69" pos:column="36">-&gt;<pos:position pos:line="69" pos:column="41"/></operator><name pos:line="69" pos:column="38">last_limit_change<pos:position pos:line="69" pos:column="55"/></name></name> <operator pos:line="69" pos:column="56">&gt;=<pos:position pos:line="69" pos:column="61"/></operator> <name><name pos:line="69" pos:column="59">m<pos:position pos:line="69" pos:column="60"/></name><operator pos:line="69" pos:column="60">-&gt;<pos:position pos:line="69" pos:column="65"/></operator><name pos:line="69" pos:column="62">limit_change_interval<pos:position pos:line="69" pos:column="83"/></name></name>
                            <operator pos:line="70" pos:column="29">&amp;&amp;<pos:position pos:line="70" pos:column="39"/></operator> <name><name pos:line="70" pos:column="32">m<pos:position pos:line="70" pos:column="33"/></name><operator pos:line="70" pos:column="33">-&gt;<pos:position pos:line="70" pos:column="38"/></operator><name pos:line="70" pos:column="35">workers_limit<pos:position pos:line="70" pos:column="48"/></name></name> <operator pos:line="70" pos:column="49">&lt;<pos:position pos:line="70" pos:column="53"/></operator> <name><name pos:line="70" pos:column="51">m<pos:position pos:line="70" pos:column="52"/></name><operator pos:line="70" pos:column="52">-&gt;<pos:position pos:line="70" pos:column="57"/></operator><name pos:line="70" pos:column="54">workers_max<pos:position pos:line="70" pos:column="65"/></name></name></expr>)<pos:position pos:line="70" pos:column="66"/></condition><then pos:line="70" pos:column="66"> <block pos:line="70" pos:column="67">{
                            <comment type="block" pos:line="71" pos:column="29">/* Well behaving stream, allow it more workers */</comment>
                            <expr_stmt><expr><name><name pos:line="72" pos:column="29">m<pos:position pos:line="72" pos:column="30"/></name><operator pos:line="72" pos:column="30">-&gt;<pos:position pos:line="72" pos:column="35"/></operator><name pos:line="72" pos:column="32">workers_limit<pos:position pos:line="72" pos:column="45"/></name></name> <operator pos:line="72" pos:column="46">=<pos:position pos:line="72" pos:column="47"/></operator> <call><name pos:line="72" pos:column="48">H2MIN<pos:position pos:line="72" pos:column="53"/></name><argument_list pos:line="72" pos:column="53">(<argument><expr><name><name pos:line="72" pos:column="54">m<pos:position pos:line="72" pos:column="55"/></name><operator pos:line="72" pos:column="55">-&gt;<pos:position pos:line="72" pos:column="60"/></operator><name pos:line="72" pos:column="57">workers_limit<pos:position pos:line="72" pos:column="70"/></name></name> <operator pos:line="72" pos:column="71">*<pos:position pos:line="72" pos:column="72"/></operator> <literal type="number" pos:line="72" pos:column="73">2<pos:position pos:line="72" pos:column="74"/></literal></expr></argument>, 
                                                     <argument><expr><name><name pos:line="73" pos:column="54">m<pos:position pos:line="73" pos:column="55"/></name><operator pos:line="73" pos:column="55">-&gt;<pos:position pos:line="73" pos:column="60"/></operator><name pos:line="73" pos:column="57">workers_max<pos:position pos:line="73" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="70"/></expr_stmt>
                            <expr_stmt><expr><name><name pos:line="74" pos:column="29">m<pos:position pos:line="74" pos:column="30"/></name><operator pos:line="74" pos:column="30">-&gt;<pos:position pos:line="74" pos:column="35"/></operator><name pos:line="74" pos:column="32">last_limit_change<pos:position pos:line="74" pos:column="49"/></name></name> <operator pos:line="74" pos:column="50">=<pos:position pos:line="74" pos:column="51"/></operator> <name pos:line="74" pos:column="52">now<pos:position pos:line="74" pos:column="55"/></name></expr>;<pos:position pos:line="74" pos:column="56"/></expr_stmt>
                            <expr_stmt><expr><name><name pos:line="75" pos:column="29">m<pos:position pos:line="75" pos:column="30"/></name><operator pos:line="75" pos:column="30">-&gt;<pos:position pos:line="75" pos:column="35"/></operator><name pos:line="75" pos:column="32">need_registration<pos:position pos:line="75" pos:column="49"/></name></name> <operator pos:line="75" pos:column="50">=<pos:position pos:line="75" pos:column="51"/></operator> <literal type="number" pos:line="75" pos:column="52">1<pos:position pos:line="75" pos:column="53"/></literal></expr>;<pos:position pos:line="75" pos:column="54"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="76" pos:column="29">ap_log_cerror<pos:position pos:line="76" pos:column="42"/></name><argument_list pos:line="76" pos:column="42">(<argument><expr><name pos:line="76" pos:column="43">APLOG_MARK<pos:position pos:line="76" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="55">APLOG_TRACE1<pos:position pos:line="76" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="69">0<pos:position pos:line="76" pos:column="70"/></literal></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="72">m<pos:position pos:line="76" pos:column="73"/></name><operator pos:line="76" pos:column="73">-&gt;<pos:position pos:line="76" pos:column="78"/></operator><name pos:line="76" pos:column="75">c<pos:position pos:line="76" pos:column="76"/></name></name></expr></argument>,
                                          <argument><expr><literal type="string" pos:line="77" pos:column="43">"h2_mplx(%ld): increase worker limit to %d"<pos:position pos:line="77" pos:column="86"/></literal></expr></argument>,
                                          <argument><expr><name><name pos:line="78" pos:column="43">m<pos:position pos:line="78" pos:column="44"/></name><operator pos:line="78" pos:column="44">-&gt;<pos:position pos:line="78" pos:column="49"/></operator><name pos:line="78" pos:column="46">id<pos:position pos:line="78" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="50">m<pos:position pos:line="78" pos:column="51"/></name><operator pos:line="78" pos:column="51">-&gt;<pos:position pos:line="78" pos:column="56"/></operator><name pos:line="78" pos:column="53">workers_limit<pos:position pos:line="78" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="68"/></expr_stmt>
                        }<pos:position pos:line="79" pos:column="26"/></block></then></if>
                    }<pos:position pos:line="80" pos:column="22"/></block></then></if>
                }<pos:position pos:line="81" pos:column="18"/></block></else></if>
                
                <if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><name><name pos:line="83" pos:column="21">io<pos:position pos:line="83" pos:column="23"/></name><operator pos:line="83" pos:column="23">-&gt;<pos:position pos:line="83" pos:column="28"/></operator><name pos:line="83" pos:column="25">orphaned<pos:position pos:line="83" pos:column="33"/></name></name></expr>)<pos:position pos:line="83" pos:column="34"/></condition><then pos:line="83" pos:column="34"> <block pos:line="83" pos:column="35">{
                    <expr_stmt><expr><call><name pos:line="84" pos:column="21">io_destroy<pos:position pos:line="84" pos:column="31"/></name><argument_list pos:line="84" pos:column="31">(<argument><expr><name pos:line="84" pos:column="32">m<pos:position pos:line="84" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="35">io<pos:position pos:line="84" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="84" pos:column="39">0<pos:position pos:line="84" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="42"/></expr_stmt>
                    <if pos:line="85" pos:column="21">if <condition pos:line="85" pos:column="24">(<expr><name><name pos:line="85" pos:column="25">m<pos:position pos:line="85" pos:column="26"/></name><operator pos:line="85" pos:column="26">-&gt;<pos:position pos:line="85" pos:column="31"/></operator><name pos:line="85" pos:column="28">join_wait<pos:position pos:line="85" pos:column="37"/></name></name></expr>)<pos:position pos:line="85" pos:column="38"/></condition><then pos:line="85" pos:column="38"> <block pos:line="85" pos:column="39">{
                        <expr_stmt><expr><call><name pos:line="86" pos:column="25">apr_thread_cond_signal<pos:position pos:line="86" pos:column="47"/></name><argument_list pos:line="86" pos:column="47">(<argument><expr><name><name pos:line="86" pos:column="48">m<pos:position pos:line="86" pos:column="49"/></name><operator pos:line="86" pos:column="49">-&gt;<pos:position pos:line="86" pos:column="54"/></operator><name pos:line="86" pos:column="51">join_wait<pos:position pos:line="86" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="86" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="62"/></expr_stmt>
                    }<pos:position pos:line="87" pos:column="22"/></block></then></if>
                }<pos:position pos:line="88" pos:column="18"/></block></then>
                <else pos:line="89" pos:column="17">else <block pos:line="89" pos:column="22">{
                    <comment type="block" pos:line="90" pos:column="21">/* hang around until the stream deregisters */</comment>
                }<pos:position pos:line="91" pos:column="18"/></block></else></if>
            }<pos:position pos:line="92" pos:column="14"/></block></then>
            <else pos:line="93" pos:column="13">else <block pos:line="93" pos:column="18">{
                <expr_stmt><expr><call><name pos:line="94" pos:column="17">ap_log_cerror<pos:position pos:line="94" pos:column="30"/></name><argument_list pos:line="94" pos:column="30">(<argument><expr><name pos:line="94" pos:column="31">APLOG_MARK<pos:position pos:line="94" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="43">APLOG_WARNING<pos:position pos:line="94" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="94" pos:column="58">0<pos:position pos:line="94" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="61">m<pos:position pos:line="94" pos:column="62"/></name><operator pos:line="94" pos:column="62">-&gt;<pos:position pos:line="94" pos:column="67"/></operator><name pos:line="94" pos:column="64">c<pos:position pos:line="94" pos:column="65"/></name></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="95" pos:column="31">"h2_mplx(%ld): task %s without corresp. h2_io"<pos:position pos:line="95" pos:column="77"/></literal></expr></argument>,
                              <argument><expr><name><name pos:line="96" pos:column="31">m<pos:position pos:line="96" pos:column="32"/></name><operator pos:line="96" pos:column="32">-&gt;<pos:position pos:line="96" pos:column="37"/></operator><name pos:line="96" pos:column="34">id<pos:position pos:line="96" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="96" pos:column="38">task<pos:position pos:line="96" pos:column="42"/></name><operator pos:line="96" pos:column="42">-&gt;<pos:position pos:line="96" pos:column="47"/></operator><name pos:line="96" pos:column="44">id<pos:position pos:line="96" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="96" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="48"/></expr_stmt>
            }<pos:position pos:line="97" pos:column="14"/></block></else></if>
        }<pos:position pos:line="98" pos:column="10"/></block></else></if>
    }<pos:position pos:line="99" pos:column="6"/></block></then></if>
}<pos:position pos:line="100" pos:column="2"/></block></function></unit>
