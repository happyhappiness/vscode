<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1144_httpd-2.0.43.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_req<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">fd<pos:position pos:line="1" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="28">request_rec<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">r<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier><modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">argv0<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier><modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier><modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">env<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="71">int<pos:position pos:line="1" pos:column="74"/></name> <modifier pos:line="1" pos:column="75">*<pos:position pos:line="1" pos:column="76"/></modifier></type><name pos:line="1" pos:column="76">req_type<pos:position pos:line="1" pos:column="84"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="85"/></parameter_list> 
<block pos:line="2" pos:column="1">{ 
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">i<pos:position pos:line="3" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="12">len<pos:position pos:line="3" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="17">j<pos:position pos:line="3" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="20">rc<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt> 
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">unsigned<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">char<pos:position pos:line="4" pos:column="18"/></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">data<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt> 
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier><modifier pos:line="5" pos:column="11">*<pos:position pos:line="5" pos:column="12"/></modifier></type><name pos:line="5" pos:column="12">environ<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt> 
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">core_dir_config<pos:position pos:line="6" pos:column="20"/></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">temp_core<pos:position pos:line="6" pos:column="31"/></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt> 
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">void<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier><modifier pos:line="7" pos:column="11">*<pos:position pos:line="7" pos:column="12"/></modifier></type><name pos:line="7" pos:column="12">dconf<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt> 
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">module<pos:position pos:line="8" pos:column="11"/></name> <modifier pos:line="8" pos:column="12">*<pos:position pos:line="8" pos:column="13"/></modifier></type><name pos:line="8" pos:column="13">suexec_mod<pos:position pos:line="8" pos:column="23"/></name> <init pos:line="8" pos:column="24">= <expr><call><name pos:line="8" pos:column="26">ap_find_linked_module<pos:position pos:line="8" pos:column="47"/></name><argument_list pos:line="8" pos:column="47">(<argument><expr><literal type="string" pos:line="8" pos:column="48">"mod_suexec.c"<pos:position pos:line="8" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="64"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="10" pos:column="5">r<pos:position pos:line="10" pos:column="6"/></name><operator pos:line="10" pos:column="6">-&gt;<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="8">server<pos:position pos:line="10" pos:column="14"/></name></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <call><name pos:line="10" pos:column="17">apr_pcalloc<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name><name pos:line="10" pos:column="29">r<pos:position pos:line="10" pos:column="30"/></name><operator pos:line="10" pos:column="30">-&gt;<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="32">pool<pos:position pos:line="10" pos:column="36"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="38">sizeof<argument_list pos:line="10" pos:column="44">(<argument><expr><name pos:line="10" pos:column="45">server_rec<pos:position pos:line="10" pos:column="55"/></name></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="58"/></expr_stmt> 

    <expr_stmt><expr><name pos:line="12" pos:column="5">rc<pos:position pos:line="12" pos:column="7"/></name> <operator pos:line="12" pos:column="8">=<pos:position pos:line="12" pos:column="9"/></operator> <call><name pos:line="12" pos:column="10">read<pos:position pos:line="12" pos:column="14"/></name><argument_list pos:line="12" pos:column="14">(<argument><expr><name pos:line="12" pos:column="15">fd<pos:position pos:line="12" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="19">req_type<pos:position pos:line="12" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="29">sizeof<argument_list pos:line="12" pos:column="35">(<argument><expr><name pos:line="12" pos:column="36">int<pos:position pos:line="12" pos:column="39"/></name></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="42"/></expr_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">rc<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">!=<pos:position pos:line="13" pos:column="14"/></operator> <sizeof pos:line="13" pos:column="15">sizeof<argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">int<pos:position pos:line="13" pos:column="25"/></name></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></sizeof></expr>)<pos:position pos:line="13" pos:column="27"/></condition><then pos:line="13" pos:column="27"> <block pos:line="13" pos:column="28">{
        <return pos:line="14" pos:column="9">return <expr><literal type="number" pos:line="14" pos:column="16">1<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="16" pos:column="5">rc<pos:position pos:line="16" pos:column="7"/></name> <operator pos:line="16" pos:column="8">=<pos:position pos:line="16" pos:column="9"/></operator> <call><name pos:line="16" pos:column="10">read<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><name pos:line="16" pos:column="15">fd<pos:position pos:line="16" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="19">&amp;<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="20">j<pos:position pos:line="16" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="23">sizeof<argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">int<pos:position pos:line="16" pos:column="33"/></name></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">rc<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">!=<pos:position pos:line="17" pos:column="14"/></operator> <sizeof pos:line="17" pos:column="15">sizeof<argument_list pos:line="17" pos:column="21">(<argument><expr><name pos:line="17" pos:column="22">int<pos:position pos:line="17" pos:column="25"/></name></expr></argument>)<pos:position pos:line="17" pos:column="26"/></argument_list></sizeof></expr>)<pos:position pos:line="17" pos:column="27"/></condition><then pos:line="17" pos:column="27"> <block pos:line="17" pos:column="28">{
        <return pos:line="18" pos:column="9">return <expr><literal type="number" pos:line="18" pos:column="16">1<pos:position pos:line="18" pos:column="17"/></literal></expr>;<pos:position pos:line="18" pos:column="18"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="20" pos:column="5">rc<pos:position pos:line="20" pos:column="7"/></name> <operator pos:line="20" pos:column="8">=<pos:position pos:line="20" pos:column="9"/></operator> <call><name pos:line="20" pos:column="10">read<pos:position pos:line="20" pos:column="14"/></name><argument_list pos:line="20" pos:column="14">(<argument><expr><name pos:line="20" pos:column="15">fd<pos:position pos:line="20" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="19">&amp;<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="20">len<pos:position pos:line="20" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="25">sizeof<argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">int<pos:position pos:line="20" pos:column="35"/></name></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">rc<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">!=<pos:position pos:line="21" pos:column="14"/></operator> <sizeof pos:line="21" pos:column="15">sizeof<argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">int<pos:position pos:line="21" pos:column="25"/></name></expr></argument>)<pos:position pos:line="21" pos:column="26"/></argument_list></sizeof></expr>)<pos:position pos:line="21" pos:column="27"/></condition><then pos:line="21" pos:column="27"> <block pos:line="21" pos:column="28">{
        <return pos:line="22" pos:column="9">return <expr><literal type="number" pos:line="22" pos:column="16">1<pos:position pos:line="22" pos:column="17"/></literal></expr>;<pos:position pos:line="22" pos:column="18"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="25" pos:column="5">data<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">=<pos:position pos:line="25" pos:column="11"/></operator> <call><name pos:line="25" pos:column="12">apr_pcalloc<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><name><name pos:line="25" pos:column="24">r<pos:position pos:line="25" pos:column="25"/></name><operator pos:line="25" pos:column="25">-&gt;<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="27">pool<pos:position pos:line="25" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="33">len<pos:position pos:line="25" pos:column="36"/></name> <operator pos:line="25" pos:column="37">+<pos:position pos:line="25" pos:column="38"/></operator> <literal type="number" pos:line="25" pos:column="39">1<pos:position pos:line="25" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="42"/></expr_stmt> <comment type="block" pos:line="25" pos:column="43">/* get a cleared byte for final '\0' */</comment>
    <expr_stmt><expr><name pos:line="26" pos:column="5">rc<pos:position pos:line="26" pos:column="7"/></name> <operator pos:line="26" pos:column="8">=<pos:position pos:line="26" pos:column="9"/></operator> <call><name pos:line="26" pos:column="10">read<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">(<argument><expr><name pos:line="26" pos:column="15">fd<pos:position pos:line="26" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="19">data<pos:position pos:line="26" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="25">len<pos:position pos:line="26" pos:column="28"/></name></expr></argument>)<pos:position pos:line="26" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="30"/></expr_stmt> 
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">rc<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">!=<pos:position pos:line="27" pos:column="14"/></operator> <name pos:line="27" pos:column="15">len<pos:position pos:line="27" pos:column="18"/></name></expr>)<pos:position pos:line="27" pos:column="19"/></condition><then pos:line="27" pos:column="19"> <block pos:line="27" pos:column="20">{
        <return pos:line="28" pos:column="9">return <expr><literal type="number" pos:line="28" pos:column="16">1<pos:position pos:line="28" pos:column="17"/></literal></expr>;<pos:position pos:line="28" pos:column="18"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="31" pos:column="5">r<pos:position pos:line="31" pos:column="6"/></name><operator pos:line="31" pos:column="6">-&gt;<pos:position pos:line="31" pos:column="11"/></operator><name pos:line="31" pos:column="8">filename<pos:position pos:line="31" pos:column="16"/></name></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <call><name pos:line="31" pos:column="19">ap_getword<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name><name pos:line="31" pos:column="30">r<pos:position pos:line="31" pos:column="31"/></name><operator pos:line="31" pos:column="31">-&gt;<pos:position pos:line="31" pos:column="36"/></operator><name pos:line="31" pos:column="33">pool<pos:position pos:line="31" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="39">(<pos:position pos:line="31" pos:column="40"/></operator><specifier pos:line="31" pos:column="40">const<pos:position pos:line="31" pos:column="45"/></specifier> <name pos:line="31" pos:column="46">char<pos:position pos:line="31" pos:column="50"/></name> <operator pos:line="31" pos:column="51">*<pos:position pos:line="31" pos:column="52"/></operator><operator pos:line="31" pos:column="52">*<pos:position pos:line="31" pos:column="53"/></operator><operator pos:line="31" pos:column="53">)<pos:position pos:line="31" pos:column="54"/></operator><operator pos:line="31" pos:column="54">&amp;<pos:position pos:line="31" pos:column="59"/></operator><name pos:line="31" pos:column="55">data<pos:position pos:line="31" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="31" pos:column="61">'\n'<pos:position pos:line="31" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="67"/></expr_stmt> 
    <expr_stmt><expr><operator pos:line="32" pos:column="5">*<pos:position pos:line="32" pos:column="6"/></operator><name pos:line="32" pos:column="6">argv0<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <call><name pos:line="32" pos:column="14">ap_getword<pos:position pos:line="32" pos:column="24"/></name><argument_list pos:line="32" pos:column="24">(<argument><expr><name><name pos:line="32" pos:column="25">r<pos:position pos:line="32" pos:column="26"/></name><operator pos:line="32" pos:column="26">-&gt;<pos:position pos:line="32" pos:column="31"/></operator><name pos:line="32" pos:column="28">pool<pos:position pos:line="32" pos:column="32"/></name></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="34">(<pos:position pos:line="32" pos:column="35"/></operator><specifier pos:line="32" pos:column="35">const<pos:position pos:line="32" pos:column="40"/></specifier> <name pos:line="32" pos:column="41">char<pos:position pos:line="32" pos:column="45"/></name> <operator pos:line="32" pos:column="46">*<pos:position pos:line="32" pos:column="47"/></operator><operator pos:line="32" pos:column="47">*<pos:position pos:line="32" pos:column="48"/></operator><operator pos:line="32" pos:column="48">)<pos:position pos:line="32" pos:column="49"/></operator><operator pos:line="32" pos:column="49">&amp;<pos:position pos:line="32" pos:column="54"/></operator><name pos:line="32" pos:column="50">data<pos:position pos:line="32" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="32" pos:column="56">'\n'<pos:position pos:line="32" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="62"/></expr_stmt> 

    <expr_stmt><expr><name><name pos:line="34" pos:column="5">r<pos:position pos:line="34" pos:column="6"/></name><operator pos:line="34" pos:column="6">-&gt;<pos:position pos:line="34" pos:column="11"/></operator><name pos:line="34" pos:column="8">uri<pos:position pos:line="34" pos:column="11"/></name></name> <operator pos:line="34" pos:column="12">=<pos:position pos:line="34" pos:column="13"/></operator> <call><name pos:line="34" pos:column="14">ap_getword<pos:position pos:line="34" pos:column="24"/></name><argument_list pos:line="34" pos:column="24">(<argument><expr><name><name pos:line="34" pos:column="25">r<pos:position pos:line="34" pos:column="26"/></name><operator pos:line="34" pos:column="26">-&gt;<pos:position pos:line="34" pos:column="31"/></operator><name pos:line="34" pos:column="28">pool<pos:position pos:line="34" pos:column="32"/></name></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="34">(<pos:position pos:line="34" pos:column="35"/></operator><specifier pos:line="34" pos:column="35">const<pos:position pos:line="34" pos:column="40"/></specifier> <name pos:line="34" pos:column="41">char<pos:position pos:line="34" pos:column="45"/></name> <operator pos:line="34" pos:column="46">*<pos:position pos:line="34" pos:column="47"/></operator><operator pos:line="34" pos:column="47">*<pos:position pos:line="34" pos:column="48"/></operator><operator pos:line="34" pos:column="48">)<pos:position pos:line="34" pos:column="49"/></operator><operator pos:line="34" pos:column="49">&amp;<pos:position pos:line="34" pos:column="54"/></operator><name pos:line="34" pos:column="50">data<pos:position pos:line="34" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="34" pos:column="56">'\n'<pos:position pos:line="34" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="62"/></expr_stmt> 
    
    <expr_stmt><expr><name pos:line="36" pos:column="5">environ<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <call><name pos:line="36" pos:column="15">apr_pcalloc<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">(<argument><expr><name><name pos:line="36" pos:column="27">r<pos:position pos:line="36" pos:column="28"/></name><operator pos:line="36" pos:column="28">-&gt;<pos:position pos:line="36" pos:column="33"/></operator><name pos:line="36" pos:column="30">pool<pos:position pos:line="36" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="36">(<pos:position pos:line="36" pos:column="37"/></operator><name pos:line="36" pos:column="37">j<pos:position pos:line="36" pos:column="38"/></name> <operator pos:line="36" pos:column="39">+<pos:position pos:line="36" pos:column="40"/></operator> <literal type="number" pos:line="36" pos:column="41">2<pos:position pos:line="36" pos:column="42"/></literal><operator pos:line="36" pos:column="42">)<pos:position pos:line="36" pos:column="43"/></operator> <operator pos:line="36" pos:column="44">*<pos:position pos:line="36" pos:column="45"/></operator><sizeof pos:line="36" pos:column="45">sizeof<argument_list pos:line="36" pos:column="51">(<argument><expr><name pos:line="36" pos:column="52">char<pos:position pos:line="36" pos:column="56"/></name> <operator pos:line="36" pos:column="57">*<pos:position pos:line="36" pos:column="58"/></operator></expr></argument>)<pos:position pos:line="36" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="61"/></expr_stmt> 
    <expr_stmt><expr><name pos:line="37" pos:column="5">i<pos:position pos:line="37" pos:column="6"/></name> <operator pos:line="37" pos:column="7">=<pos:position pos:line="37" pos:column="8"/></operator> <literal type="number" pos:line="37" pos:column="9">0<pos:position pos:line="37" pos:column="10"/></literal></expr>;<pos:position pos:line="37" pos:column="11"/></expr_stmt> 
    <for pos:line="38" pos:column="5">for <control pos:line="38" pos:column="9">(<init><expr><name pos:line="38" pos:column="10">i<pos:position pos:line="38" pos:column="11"/></name> <operator pos:line="38" pos:column="12">=<pos:position pos:line="38" pos:column="13"/></operator> <literal type="number" pos:line="38" pos:column="14">0<pos:position pos:line="38" pos:column="15"/></literal></expr>;<pos:position pos:line="38" pos:column="16"/></init> <condition><expr><name pos:line="38" pos:column="17">i<pos:position pos:line="38" pos:column="18"/></name> <operator pos:line="38" pos:column="19">&lt;<pos:position pos:line="38" pos:column="23"/></operator> <name pos:line="38" pos:column="21">j<pos:position pos:line="38" pos:column="22"/></name></expr>;<pos:position pos:line="38" pos:column="23"/></condition> <incr><expr><name pos:line="38" pos:column="24">i<pos:position pos:line="38" pos:column="25"/></name><operator pos:line="38" pos:column="25">++<pos:position pos:line="38" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="38" pos:column="28"/></control> <block pos:line="38" pos:column="29">{ 
        <expr_stmt><expr><name><name pos:line="39" pos:column="9">environ<pos:position pos:line="39" pos:column="16"/></name><index pos:line="39" pos:column="16">[<expr><name pos:line="39" pos:column="17">i<pos:position pos:line="39" pos:column="18"/></name></expr>]<pos:position pos:line="39" pos:column="19"/></index></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <call><name pos:line="39" pos:column="22">ap_getword<pos:position pos:line="39" pos:column="32"/></name><argument_list pos:line="39" pos:column="32">(<argument><expr><name><name pos:line="39" pos:column="33">r<pos:position pos:line="39" pos:column="34"/></name><operator pos:line="39" pos:column="34">-&gt;<pos:position pos:line="39" pos:column="39"/></operator><name pos:line="39" pos:column="36">pool<pos:position pos:line="39" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="42">(<pos:position pos:line="39" pos:column="43"/></operator><specifier pos:line="39" pos:column="43">const<pos:position pos:line="39" pos:column="48"/></specifier> <name pos:line="39" pos:column="49">char<pos:position pos:line="39" pos:column="53"/></name> <operator pos:line="39" pos:column="54">*<pos:position pos:line="39" pos:column="55"/></operator><operator pos:line="39" pos:column="55">*<pos:position pos:line="39" pos:column="56"/></operator><operator pos:line="39" pos:column="56">)<pos:position pos:line="39" pos:column="57"/></operator><operator pos:line="39" pos:column="57">&amp;<pos:position pos:line="39" pos:column="62"/></operator><name pos:line="39" pos:column="58">data<pos:position pos:line="39" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="39" pos:column="64">'\n'<pos:position pos:line="39" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="70"/></expr_stmt> 
    }<pos:position pos:line="40" pos:column="6"/></block></for> 
    <expr_stmt><expr><operator pos:line="41" pos:column="5">*<pos:position pos:line="41" pos:column="6"/></operator><name pos:line="41" pos:column="6">env<pos:position pos:line="41" pos:column="9"/></name> <operator pos:line="41" pos:column="10">=<pos:position pos:line="41" pos:column="11"/></operator> <name pos:line="41" pos:column="12">environ<pos:position pos:line="41" pos:column="19"/></name></expr>;<pos:position pos:line="41" pos:column="20"/></expr_stmt> 
    <expr_stmt><expr><name><name pos:line="42" pos:column="5">r<pos:position pos:line="42" pos:column="6"/></name><operator pos:line="42" pos:column="6">-&gt;<pos:position pos:line="42" pos:column="11"/></operator><name pos:line="42" pos:column="8">args<pos:position pos:line="42" pos:column="12"/></name></name> <operator pos:line="42" pos:column="13">=<pos:position pos:line="42" pos:column="14"/></operator> <call><name pos:line="42" pos:column="15">ap_getword<pos:position pos:line="42" pos:column="25"/></name><argument_list pos:line="42" pos:column="25">(<argument><expr><name><name pos:line="42" pos:column="26">r<pos:position pos:line="42" pos:column="27"/></name><operator pos:line="42" pos:column="27">-&gt;<pos:position pos:line="42" pos:column="32"/></operator><name pos:line="42" pos:column="29">pool<pos:position pos:line="42" pos:column="33"/></name></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="35">(<pos:position pos:line="42" pos:column="36"/></operator><specifier pos:line="42" pos:column="36">const<pos:position pos:line="42" pos:column="41"/></specifier> <name pos:line="42" pos:column="42">char<pos:position pos:line="42" pos:column="46"/></name> <operator pos:line="42" pos:column="47">*<pos:position pos:line="42" pos:column="48"/></operator><operator pos:line="42" pos:column="48">*<pos:position pos:line="42" pos:column="49"/></operator><operator pos:line="42" pos:column="49">)<pos:position pos:line="42" pos:column="50"/></operator><operator pos:line="42" pos:column="50">&amp;<pos:position pos:line="42" pos:column="55"/></operator><name pos:line="42" pos:column="51">data<pos:position pos:line="42" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="42" pos:column="57">'\n'<pos:position pos:line="42" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="63"/></expr_stmt> 
  
    <expr_stmt><expr><name pos:line="44" pos:column="5">rc<pos:position pos:line="44" pos:column="7"/></name> <operator pos:line="44" pos:column="8">=<pos:position pos:line="44" pos:column="9"/></operator> <call><name pos:line="44" pos:column="10">read<pos:position pos:line="44" pos:column="14"/></name><argument_list pos:line="44" pos:column="14">(<argument><expr><name pos:line="44" pos:column="15">fd<pos:position pos:line="44" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="19">&amp;<pos:position pos:line="44" pos:column="24"/></operator><name pos:line="44" pos:column="20">i<pos:position pos:line="44" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="44" pos:column="23">sizeof<argument_list pos:line="44" pos:column="29">(<argument><expr><name pos:line="44" pos:column="30">int<pos:position pos:line="44" pos:column="33"/></name></expr></argument>)<pos:position pos:line="44" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="44" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt> 
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">rc<pos:position pos:line="45" pos:column="11"/></name> <operator pos:line="45" pos:column="12">!=<pos:position pos:line="45" pos:column="14"/></operator> <sizeof pos:line="45" pos:column="15">sizeof<argument_list pos:line="45" pos:column="21">(<argument><expr><name pos:line="45" pos:column="22">int<pos:position pos:line="45" pos:column="25"/></name></expr></argument>)<pos:position pos:line="45" pos:column="26"/></argument_list></sizeof></expr>)<pos:position pos:line="45" pos:column="27"/></condition><then pos:line="45" pos:column="27"> <block pos:line="45" pos:column="28">{
        <return pos:line="46" pos:column="9">return <expr><literal type="number" pos:line="46" pos:column="16">1<pos:position pos:line="46" pos:column="17"/></literal></expr>;<pos:position pos:line="46" pos:column="18"/></return>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>
     
    <comment type="block" pos:line="49" pos:column="5">/* add 1, so that if i == 0, we still malloc something. */</comment> 

    <expr_stmt><expr><name pos:line="51" pos:column="5">dconf<pos:position pos:line="51" pos:column="10"/></name> <operator pos:line="51" pos:column="11">=<pos:position pos:line="51" pos:column="12"/></operator> <operator pos:line="51" pos:column="13">(<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="14">void<pos:position pos:line="51" pos:column="18"/></name> <operator pos:line="51" pos:column="19">*<pos:position pos:line="51" pos:column="20"/></operator><operator pos:line="51" pos:column="20">*<pos:position pos:line="51" pos:column="21"/></operator><operator pos:line="51" pos:column="21">)<pos:position pos:line="51" pos:column="22"/></operator> <call><name pos:line="51" pos:column="23">apr_pcalloc<pos:position pos:line="51" pos:column="34"/></name><argument_list pos:line="51" pos:column="34">(<argument><expr><name><name pos:line="51" pos:column="35">r<pos:position pos:line="51" pos:column="36"/></name><operator pos:line="51" pos:column="36">-&gt;<pos:position pos:line="51" pos:column="41"/></operator><name pos:line="51" pos:column="38">pool<pos:position pos:line="51" pos:column="42"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="51" pos:column="44">sizeof<argument_list pos:line="51" pos:column="50">(<argument><expr><name pos:line="51" pos:column="51">void<pos:position pos:line="51" pos:column="55"/></name> <operator pos:line="51" pos:column="56">*<pos:position pos:line="51" pos:column="57"/></operator></expr></argument>)<pos:position pos:line="51" pos:column="58"/></argument_list></sizeof> <operator pos:line="51" pos:column="59">*<pos:position pos:line="51" pos:column="60"/></operator> <operator pos:line="51" pos:column="61">(<pos:position pos:line="51" pos:column="62"/></operator><name pos:line="51" pos:column="62">total_modules<pos:position pos:line="51" pos:column="75"/></name> <operator pos:line="51" pos:column="76">+<pos:position pos:line="51" pos:column="77"/></operator> <name pos:line="51" pos:column="78">DYNAMIC_MODULE_LIMIT<pos:position pos:line="51" pos:column="98"/></name><operator pos:line="51" pos:column="98">)<pos:position pos:line="51" pos:column="99"/></operator></expr></argument>)<pos:position pos:line="51" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="101"/></expr_stmt>

    <expr_stmt><expr><name pos:line="53" pos:column="5">temp_core<pos:position pos:line="53" pos:column="14"/></name> <operator pos:line="53" pos:column="15">=<pos:position pos:line="53" pos:column="16"/></operator> <operator pos:line="53" pos:column="17">(<pos:position pos:line="53" pos:column="18"/></operator><name pos:line="53" pos:column="18">core_dir_config<pos:position pos:line="53" pos:column="33"/></name> <operator pos:line="53" pos:column="34">*<pos:position pos:line="53" pos:column="35"/></operator><operator pos:line="53" pos:column="35">)<pos:position pos:line="53" pos:column="36"/></operator><call><name pos:line="53" pos:column="36">apr_palloc<pos:position pos:line="53" pos:column="46"/></name><argument_list pos:line="53" pos:column="46">(<argument><expr><name><name pos:line="53" pos:column="47">r<pos:position pos:line="53" pos:column="48"/></name><operator pos:line="53" pos:column="48">-&gt;<pos:position pos:line="53" pos:column="53"/></operator><name pos:line="53" pos:column="50">pool<pos:position pos:line="53" pos:column="54"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="56">sizeof<argument_list pos:line="53" pos:column="62">(<argument><expr><name pos:line="53" pos:column="63">core_module<pos:position pos:line="53" pos:column="74"/></name></expr></argument>)<pos:position pos:line="53" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="77"/></expr_stmt> 

    <expr_stmt><expr><name><name pos:line="55" pos:column="5">dconf<pos:position pos:line="55" pos:column="10"/></name><index pos:line="55" pos:column="10">[<expr><name pos:line="55" pos:column="11">i<pos:position pos:line="55" pos:column="12"/></name></expr>]<pos:position pos:line="55" pos:column="13"/></index></name> <operator pos:line="55" pos:column="14">=<pos:position pos:line="55" pos:column="15"/></operator> <operator pos:line="55" pos:column="16">(<pos:position pos:line="55" pos:column="17"/></operator><name pos:line="55" pos:column="17">void<pos:position pos:line="55" pos:column="21"/></name> <operator pos:line="55" pos:column="22">*<pos:position pos:line="55" pos:column="23"/></operator><operator pos:line="55" pos:column="23">)<pos:position pos:line="55" pos:column="24"/></operator><name pos:line="55" pos:column="24">temp_core<pos:position pos:line="55" pos:column="33"/></name></expr>;<pos:position pos:line="55" pos:column="34"/></expr_stmt> 

    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">suexec_mod<pos:position pos:line="57" pos:column="19"/></name></expr>)<pos:position pos:line="57" pos:column="20"/></condition><then pos:line="57" pos:column="20"> <block pos:line="57" pos:column="21">{
        <decl_stmt><decl><type><name pos:line="58" pos:column="9">suexec_config_t<pos:position pos:line="58" pos:column="24"/></name> <modifier pos:line="58" pos:column="25">*<pos:position pos:line="58" pos:column="26"/></modifier></type><name pos:line="58" pos:column="26">suexec_cfg<pos:position pos:line="58" pos:column="36"/></name> <init pos:line="58" pos:column="37">= <expr><call><name pos:line="58" pos:column="39">apr_pcalloc<pos:position pos:line="58" pos:column="50"/></name><argument_list pos:line="58" pos:column="50">(<argument><expr><name><name pos:line="58" pos:column="51">r<pos:position pos:line="58" pos:column="52"/></name><operator pos:line="58" pos:column="52">-&gt;<pos:position pos:line="58" pos:column="57"/></operator><name pos:line="58" pos:column="54">pool<pos:position pos:line="58" pos:column="58"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="58" pos:column="60">sizeof<argument_list pos:line="58" pos:column="66">(<argument><expr><operator pos:line="58" pos:column="67">*<pos:position pos:line="58" pos:column="68"/></operator><name pos:line="58" pos:column="68">suexec_cfg<pos:position pos:line="58" pos:column="78"/></name></expr></argument>)<pos:position pos:line="58" pos:column="79"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="58" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="58" pos:column="81"/></decl_stmt>

        <expr_stmt><expr><name pos:line="60" pos:column="9">rc<pos:position pos:line="60" pos:column="11"/></name> <operator pos:line="60" pos:column="12">=<pos:position pos:line="60" pos:column="13"/></operator> <call><name pos:line="60" pos:column="14">read<pos:position pos:line="60" pos:column="18"/></name><argument_list pos:line="60" pos:column="18">(<argument><expr><name pos:line="60" pos:column="19">fd<pos:position pos:line="60" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="23">&amp;<pos:position pos:line="60" pos:column="28"/></operator><name pos:line="60" pos:column="24">i<pos:position pos:line="60" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="27">sizeof<argument_list pos:line="60" pos:column="33">(<argument><expr><name pos:line="60" pos:column="34">int<pos:position pos:line="60" pos:column="37"/></name></expr></argument>)<pos:position pos:line="60" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="60" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="40"/></expr_stmt>
        <if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">rc<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">!=<pos:position pos:line="61" pos:column="18"/></operator> <sizeof pos:line="61" pos:column="19">sizeof<argument_list pos:line="61" pos:column="25">(<argument><expr><name pos:line="61" pos:column="26">int<pos:position pos:line="61" pos:column="29"/></name></expr></argument>)<pos:position pos:line="61" pos:column="30"/></argument_list></sizeof></expr>)<pos:position pos:line="61" pos:column="31"/></condition><then pos:line="61" pos:column="31"> <block pos:line="61" pos:column="32">{
            <return pos:line="62" pos:column="13">return <expr><literal type="number" pos:line="62" pos:column="20">1<pos:position pos:line="62" pos:column="21"/></literal></expr>;<pos:position pos:line="62" pos:column="22"/></return>
        }<pos:position pos:line="63" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="64" pos:column="9">rc<pos:position pos:line="64" pos:column="11"/></name> <operator pos:line="64" pos:column="12">=<pos:position pos:line="64" pos:column="13"/></operator> <call><name pos:line="64" pos:column="14">read<pos:position pos:line="64" pos:column="18"/></name><argument_list pos:line="64" pos:column="18">(<argument><expr><name pos:line="64" pos:column="19">fd<pos:position pos:line="64" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="23">suexec_cfg<pos:position pos:line="64" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="64" pos:column="35">sizeof<argument_list pos:line="64" pos:column="41">(<argument><expr><operator pos:line="64" pos:column="42">*<pos:position pos:line="64" pos:column="43"/></operator><name pos:line="64" pos:column="43">suexec_cfg<pos:position pos:line="64" pos:column="53"/></name></expr></argument>)<pos:position pos:line="64" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="64" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="56"/></expr_stmt>
        <if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name pos:line="65" pos:column="13">rc<pos:position pos:line="65" pos:column="15"/></name> <operator pos:line="65" pos:column="16">!=<pos:position pos:line="65" pos:column="18"/></operator> <sizeof pos:line="65" pos:column="19">sizeof<argument_list pos:line="65" pos:column="25">(<argument><expr><operator pos:line="65" pos:column="26">*<pos:position pos:line="65" pos:column="27"/></operator><name pos:line="65" pos:column="27">suexec_cfg<pos:position pos:line="65" pos:column="37"/></name></expr></argument>)<pos:position pos:line="65" pos:column="38"/></argument_list></sizeof></expr>)<pos:position pos:line="65" pos:column="39"/></condition><then pos:line="65" pos:column="39"> <block pos:line="65" pos:column="40">{
            <return pos:line="66" pos:column="13">return <expr><literal type="number" pos:line="66" pos:column="20">1<pos:position pos:line="66" pos:column="21"/></literal></expr>;<pos:position pos:line="66" pos:column="22"/></return>
        }<pos:position pos:line="67" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="68" pos:column="9">dconf<pos:position pos:line="68" pos:column="14"/></name><index pos:line="68" pos:column="14">[<expr><name pos:line="68" pos:column="15">i<pos:position pos:line="68" pos:column="16"/></name></expr>]<pos:position pos:line="68" pos:column="17"/></index></name> <operator pos:line="68" pos:column="18">=<pos:position pos:line="68" pos:column="19"/></operator> <operator pos:line="68" pos:column="20">(<pos:position pos:line="68" pos:column="21"/></operator><name pos:line="68" pos:column="21">void<pos:position pos:line="68" pos:column="25"/></name> <operator pos:line="68" pos:column="26">*<pos:position pos:line="68" pos:column="27"/></operator><operator pos:line="68" pos:column="27">)<pos:position pos:line="68" pos:column="28"/></operator><name pos:line="68" pos:column="28">suexec_cfg<pos:position pos:line="68" pos:column="38"/></name></expr>;<pos:position pos:line="68" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="71" pos:column="5">r<pos:position pos:line="71" pos:column="6"/></name><operator pos:line="71" pos:column="6">-&gt;<pos:position pos:line="71" pos:column="11"/></operator><name pos:line="71" pos:column="8">per_dir_config<pos:position pos:line="71" pos:column="22"/></name></name> <operator pos:line="71" pos:column="23">=<pos:position pos:line="71" pos:column="24"/></operator> <operator pos:line="71" pos:column="25">(<pos:position pos:line="71" pos:column="26"/></operator><name pos:line="71" pos:column="26">ap_conf_vector_t<pos:position pos:line="71" pos:column="42"/></name> <operator pos:line="71" pos:column="43">*<pos:position pos:line="71" pos:column="44"/></operator><operator pos:line="71" pos:column="44">)<pos:position pos:line="71" pos:column="45"/></operator><name pos:line="71" pos:column="45">dconf<pos:position pos:line="71" pos:column="50"/></name></expr>;<pos:position pos:line="71" pos:column="51"/></expr_stmt> 
<cpp:if pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">if<pos:position pos:line="72" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="72" pos:column="5">0<pos:position pos:line="72" pos:column="6"/></literal></expr></cpp:if>
<cpp:ifdef pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">ifdef<pos:position pos:line="73" pos:column="7"/></cpp:directive> <name pos:line="73" pos:column="8">RLIMIT_CPU<pos:position pos:line="73" pos:column="18"/></name></cpp:ifdef> 
    read(fd, &amp;j, sizeof(int)); 
    if (j) { 
        temp_core-&gt;limit_cpu = (struct rlimit *)apr_palloc (sizeof(struct rlimit)); 
        read(fd, temp_core-&gt;limit_cpu, sizeof(struct rlimit)); 
    } 
    else { 
        temp_core-&gt;limit_cpu = NULL; 
    } 
<cpp:endif pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">endif<pos:position pos:line="82" pos:column="7"/></cpp:directive></cpp:endif> 

<cpp:if pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">if<pos:position pos:line="84" pos:column="4"/></cpp:directive> <expr><call><name pos:line="84" pos:column="5">defined<pos:position pos:line="84" pos:column="12"/></name> <argument_list pos:line="84" pos:column="13">(<argument><expr><name pos:line="84" pos:column="14">RLIMIT_DATA<pos:position pos:line="84" pos:column="25"/></name></expr></argument>)<pos:position pos:line="84" pos:column="26"/></argument_list></call> <operator pos:line="84" pos:column="27">||<pos:position pos:line="84" pos:column="29"/></operator> <call><name pos:line="84" pos:column="30">defined<pos:position pos:line="84" pos:column="37"/></name><argument_list pos:line="84" pos:column="37">(<argument><expr><name pos:line="84" pos:column="38">RLIMIT_VMEM<pos:position pos:line="84" pos:column="49"/></name></expr></argument>)<pos:position pos:line="84" pos:column="50"/></argument_list></call> <operator pos:line="84" pos:column="51">||<pos:position pos:line="84" pos:column="53"/></operator> <call><name pos:line="84" pos:column="54">defined<pos:position pos:line="84" pos:column="61"/></name><argument_list pos:line="84" pos:column="61">(<argument><expr><name pos:line="84" pos:column="62">RLIMIT_AS<pos:position pos:line="84" pos:column="71"/></name></expr></argument>)<pos:position pos:line="84" pos:column="72"/></argument_list></call></expr></cpp:if> 
    read(fd, &amp;j, sizeof(int)); 
    if (j) { 
        temp_core-&gt;limit_mem = (struct rlimit *)apr_palloc(r-&gt;pool, sizeof(struct rlimit)); 
        read(fd, temp_core-&gt;limit_mem, sizeof(struct rlimit)); 
    } 
    else { 
        temp_core-&gt;limit_mem = NULL; 
    } 
<cpp:endif pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">endif<pos:position pos:line="93" pos:column="7"/></cpp:directive></cpp:endif> 

<cpp:ifdef pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">ifdef<pos:position pos:line="95" pos:column="7"/></cpp:directive> <name pos:line="95" pos:column="8">RLIMIT_NPROC<pos:position pos:line="95" pos:column="20"/></name></cpp:ifdef> 
    read(fd, &amp;j, sizeof(int)); 
    if (j) { 
        temp_core-&gt;limit_nproc = (struct rlimit *)apr_palloc(r-&gt;pool, sizeof(struct rlimit)); 
        read(fd, temp_core-&gt;limit_nproc, sizeof(struct rlimit)); 
    } 
    else { 
        temp_core-&gt;limit_nproc = NULL; 
    } 
<cpp:endif pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">endif<pos:position pos:line="104" pos:column="7"/></cpp:directive></cpp:endif> 
<cpp:endif pos:line="105" pos:column="1">#<cpp:directive pos:line="105" pos:column="2">endif<pos:position pos:line="105" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="107" pos:column="5">/* basic notes table to avoid segfaults */</comment>
    <expr_stmt><expr><name><name pos:line="108" pos:column="5">r<pos:position pos:line="108" pos:column="6"/></name><operator pos:line="108" pos:column="6">-&gt;<pos:position pos:line="108" pos:column="11"/></operator><name pos:line="108" pos:column="8">notes<pos:position pos:line="108" pos:column="13"/></name></name> <operator pos:line="108" pos:column="14">=<pos:position pos:line="108" pos:column="15"/></operator> <call><name pos:line="108" pos:column="16">apr_table_make<pos:position pos:line="108" pos:column="30"/></name><argument_list pos:line="108" pos:column="30">(<argument><expr><name><name pos:line="108" pos:column="31">r<pos:position pos:line="108" pos:column="32"/></name><operator pos:line="108" pos:column="32">-&gt;<pos:position pos:line="108" pos:column="37"/></operator><name pos:line="108" pos:column="34">pool<pos:position pos:line="108" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="108" pos:column="40">1<pos:position pos:line="108" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="43"/></expr_stmt>

    <comment type="block" pos:line="110" pos:column="5">/* mod_userdir requires the mod_userdir_user note */</comment>
    <expr_stmt><expr><name pos:line="111" pos:column="5">rc<pos:position pos:line="111" pos:column="7"/></name> <operator pos:line="111" pos:column="8">=<pos:position pos:line="111" pos:column="9"/></operator> <call><name pos:line="111" pos:column="10">read<pos:position pos:line="111" pos:column="14"/></name><argument_list pos:line="111" pos:column="14">(<argument><expr><name pos:line="111" pos:column="15">fd<pos:position pos:line="111" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="111" pos:column="19">&amp;<pos:position pos:line="111" pos:column="24"/></operator><name pos:line="111" pos:column="20">len<pos:position pos:line="111" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="111" pos:column="25">sizeof<argument_list pos:line="111" pos:column="31">(<argument><expr><name pos:line="111" pos:column="32">len<pos:position pos:line="111" pos:column="35"/></name></expr></argument>)<pos:position pos:line="111" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="111" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="38"/></expr_stmt>
    <if pos:line="112" pos:column="5">if <condition pos:line="112" pos:column="8">(<expr><operator pos:line="112" pos:column="9">(<pos:position pos:line="112" pos:column="10"/></operator><name pos:line="112" pos:column="10">rc<pos:position pos:line="112" pos:column="12"/></name> <operator pos:line="112" pos:column="13">==<pos:position pos:line="112" pos:column="15"/></operator> <sizeof pos:line="112" pos:column="16">sizeof<argument_list pos:line="112" pos:column="22">(<argument><expr><name pos:line="112" pos:column="23">len<pos:position pos:line="112" pos:column="26"/></name></expr></argument>)<pos:position pos:line="112" pos:column="27"/></argument_list></sizeof><operator pos:line="112" pos:column="27">)<pos:position pos:line="112" pos:column="28"/></operator> <operator pos:line="112" pos:column="29">&amp;&amp;<pos:position pos:line="112" pos:column="39"/></operator> <name pos:line="112" pos:column="32">len<pos:position pos:line="112" pos:column="35"/></name></expr>)<pos:position pos:line="112" pos:column="36"/></condition><then pos:line="112" pos:column="36"> <block pos:line="112" pos:column="37">{
        <expr_stmt><expr><name pos:line="113" pos:column="9">data<pos:position pos:line="113" pos:column="13"/></name> <operator pos:line="113" pos:column="14">=<pos:position pos:line="113" pos:column="15"/></operator> <call><name pos:line="113" pos:column="16">apr_pcalloc<pos:position pos:line="113" pos:column="27"/></name><argument_list pos:line="113" pos:column="27">(<argument><expr><name><name pos:line="113" pos:column="28">r<pos:position pos:line="113" pos:column="29"/></name><operator pos:line="113" pos:column="29">-&gt;<pos:position pos:line="113" pos:column="34"/></operator><name pos:line="113" pos:column="31">pool<pos:position pos:line="113" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="37">len<pos:position pos:line="113" pos:column="40"/></name> <operator pos:line="113" pos:column="41">+<pos:position pos:line="113" pos:column="42"/></operator> <literal type="number" pos:line="113" pos:column="43">1<pos:position pos:line="113" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="46"/></expr_stmt> <comment type="block" pos:line="113" pos:column="47">/* last byte is '\0' */</comment>
        <expr_stmt><expr><name pos:line="114" pos:column="9">rc<pos:position pos:line="114" pos:column="11"/></name> <operator pos:line="114" pos:column="12">=<pos:position pos:line="114" pos:column="13"/></operator> <call><name pos:line="114" pos:column="14">read<pos:position pos:line="114" pos:column="18"/></name><argument_list pos:line="114" pos:column="18">(<argument><expr><name pos:line="114" pos:column="19">fd<pos:position pos:line="114" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="23">data<pos:position pos:line="114" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="29">len<pos:position pos:line="114" pos:column="32"/></name></expr></argument>)<pos:position pos:line="114" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="34"/></expr_stmt>
        <if pos:line="115" pos:column="9">if <condition pos:line="115" pos:column="12">(<expr><name pos:line="115" pos:column="13">rc<pos:position pos:line="115" pos:column="15"/></name> <operator pos:line="115" pos:column="16">!=<pos:position pos:line="115" pos:column="18"/></operator> <name pos:line="115" pos:column="19">len<pos:position pos:line="115" pos:column="22"/></name></expr>)<pos:position pos:line="115" pos:column="23"/></condition><then pos:line="115" pos:column="23"> <block pos:line="115" pos:column="24">{
            <return pos:line="116" pos:column="13">return <expr><literal type="number" pos:line="116" pos:column="20">1<pos:position pos:line="116" pos:column="21"/></literal></expr>;<pos:position pos:line="116" pos:column="22"/></return>
        }<pos:position pos:line="117" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="118" pos:column="9">apr_table_set<pos:position pos:line="118" pos:column="22"/></name><argument_list pos:line="118" pos:column="22">(<argument><expr><name><name pos:line="118" pos:column="23">r<pos:position pos:line="118" pos:column="24"/></name><operator pos:line="118" pos:column="24">-&gt;<pos:position pos:line="118" pos:column="29"/></operator><name pos:line="118" pos:column="26">notes<pos:position pos:line="118" pos:column="31"/></name></name></expr></argument>,<argument><expr><literal type="string" pos:line="118" pos:column="32">"mod_userdir_user"<pos:position pos:line="118" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="118" pos:column="52">(<pos:position pos:line="118" pos:column="53"/></operator><specifier pos:line="118" pos:column="53">const<pos:position pos:line="118" pos:column="58"/></specifier> <name pos:line="118" pos:column="59">char<pos:position pos:line="118" pos:column="63"/></name> <operator pos:line="118" pos:column="64">*<pos:position pos:line="118" pos:column="65"/></operator><operator pos:line="118" pos:column="65">)<pos:position pos:line="118" pos:column="66"/></operator><name pos:line="118" pos:column="66">data<pos:position pos:line="118" pos:column="70"/></name></expr></argument>)<pos:position pos:line="118" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="72"/></expr_stmt>
    }<pos:position pos:line="119" pos:column="6"/></block></then></if>
    <return pos:line="120" pos:column="5">return <expr><literal type="number" pos:line="120" pos:column="12">0<pos:position pos:line="120" pos:column="13"/></literal></expr>;<pos:position pos:line="120" pos:column="14"/></return>
}<pos:position pos:line="121" pos:column="2"/></block></function></unit>
