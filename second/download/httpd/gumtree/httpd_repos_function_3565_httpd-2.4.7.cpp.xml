<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3565_httpd-2.4.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">clean_child_exit<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">code<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><name pos:line="3" pos:column="5">mpm_state<pos:position pos:line="3" pos:column="14"/></name> <operator pos:line="3" pos:column="15">=<pos:position pos:line="3" pos:column="16"/></operator> <name pos:line="3" pos:column="17">AP_MPMQ_STOPPING<pos:position pos:line="3" pos:column="33"/></name></expr>;<pos:position pos:line="3" pos:column="34"/></expr_stmt>
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">pchild<pos:position pos:line="4" pos:column="15"/></name></expr>)<pos:position pos:line="4" pos:column="16"/></condition><then pos:line="4" pos:column="16"> <block pos:line="4" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">apr_pool_destroy<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">pchild<pos:position pos:line="5" pos:column="32"/></name></expr></argument>)<pos:position pos:line="5" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="6" pos:column="6"/></block></then></if>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">one_process<pos:position pos:line="8" pos:column="20"/></name></expr>)<pos:position pos:line="8" pos:column="21"/></condition><then pos:line="8" pos:column="21"> <block pos:line="8" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">event_note_child_killed<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<comment type="block" pos:line="9" pos:column="33">/* slot */</comment> <argument><expr><literal type="number" pos:line="9" pos:column="44">0<pos:position pos:line="9" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="47">0<pos:position pos:line="9" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="50">0<pos:position pos:line="9" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">exit<pos:position pos:line="12" pos:column="9"/></name><argument_list pos:line="12" pos:column="9">(<argument><expr><name pos:line="12" pos:column="10">code<pos:position pos:line="12" pos:column="14"/></name></expr></argument>)<pos:position pos:line="12" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="16"/></expr_stmt>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
