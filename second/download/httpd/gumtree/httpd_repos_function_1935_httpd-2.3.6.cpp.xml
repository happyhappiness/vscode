<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1935_httpd-2.3.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">do_pattmatch<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">ap_filter_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">f<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">apr_bucket<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">inb<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="2" pos:column="26">apr_bucket_brigade<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">mybb<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="3" pos:column="26">apr_pool_t<pos:position pos:line="3" pos:column="36"/></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type><name pos:line="3" pos:column="38">tmp_pool<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="47"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">i<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">force_quick<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><literal type="number" pos:line="6" pos:column="23">0<pos:position pos:line="6" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">ap_regmatch_t<pos:position pos:line="7" pos:column="18"/></name></type> <name><name pos:line="7" pos:column="19">regm<pos:position pos:line="7" pos:column="23"/></name><index pos:line="7" pos:column="23">[<expr><name pos:line="7" pos:column="24">AP_MAX_REG_MATCH<pos:position pos:line="7" pos:column="40"/></name></expr>]<pos:position pos:line="7" pos:column="41"/></index></name></decl>;<pos:position pos:line="7" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_size_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">bytes<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_size_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">len<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_size_t<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">fbytes<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">char<pos:position pos:line="11" pos:column="15"/></name> <modifier pos:line="11" pos:column="16">*<pos:position pos:line="11" pos:column="17"/></modifier></type><name pos:line="11" pos:column="17">buff<pos:position pos:line="11" pos:column="21"/></name></decl>;<pos:position pos:line="11" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">char<pos:position pos:line="12" pos:column="15"/></name> <modifier pos:line="12" pos:column="16">*<pos:position pos:line="12" pos:column="17"/></modifier></type><name pos:line="12" pos:column="17">repl<pos:position pos:line="12" pos:column="21"/></name></decl>;<pos:position pos:line="12" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name> <modifier pos:line="13" pos:column="10">*<pos:position pos:line="13" pos:column="11"/></modifier></type><name pos:line="13" pos:column="11">scratch<pos:position pos:line="13" pos:column="18"/></name></decl>;<pos:position pos:line="13" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">char<pos:position pos:line="14" pos:column="9"/></name> <modifier pos:line="14" pos:column="10">*<pos:position pos:line="14" pos:column="11"/></modifier></type><name pos:line="14" pos:column="11">p<pos:position pos:line="14" pos:column="12"/></name></decl>;<pos:position pos:line="14" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">char<pos:position pos:line="15" pos:column="9"/></name> <modifier pos:line="15" pos:column="10">*<pos:position pos:line="15" pos:column="11"/></modifier></type><name pos:line="15" pos:column="11">s1<pos:position pos:line="15" pos:column="13"/></name></decl>;<pos:position pos:line="15" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">char<pos:position pos:line="16" pos:column="9"/></name> <modifier pos:line="16" pos:column="10">*<pos:position pos:line="16" pos:column="11"/></modifier></type><name pos:line="16" pos:column="11">s2<pos:position pos:line="16" pos:column="13"/></name></decl>;<pos:position pos:line="16" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">apr_bucket<pos:position pos:line="17" pos:column="15"/></name> <modifier pos:line="17" pos:column="16">*<pos:position pos:line="17" pos:column="17"/></modifier></type><name pos:line="17" pos:column="17">b<pos:position pos:line="17" pos:column="18"/></name></decl>;<pos:position pos:line="17" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">apr_bucket<pos:position pos:line="18" pos:column="15"/></name> <modifier pos:line="18" pos:column="16">*<pos:position pos:line="18" pos:column="17"/></modifier></type><name pos:line="18" pos:column="17">tmp_b<pos:position pos:line="18" pos:column="22"/></name></decl>;<pos:position pos:line="18" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">apr_pool_t<pos:position pos:line="19" pos:column="15"/></name> <modifier pos:line="19" pos:column="16">*<pos:position pos:line="19" pos:column="17"/></modifier></type><name pos:line="19" pos:column="17">tpool<pos:position pos:line="19" pos:column="22"/></name></decl>;<pos:position pos:line="19" pos:column="23"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="21" pos:column="5">subst_dir_conf<pos:position pos:line="21" pos:column="19"/></name> <modifier pos:line="21" pos:column="20">*<pos:position pos:line="21" pos:column="21"/></modifier></type><name pos:line="21" pos:column="21">cfg<pos:position pos:line="21" pos:column="24"/></name> <init pos:line="21" pos:column="25">=
    <expr><operator pos:line="22" pos:column="5">(<pos:position pos:line="22" pos:column="6"/></operator><name pos:line="22" pos:column="6">subst_dir_conf<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">*<pos:position pos:line="22" pos:column="22"/></operator><operator pos:line="22" pos:column="22">)<pos:position pos:line="22" pos:column="23"/></operator> <call><name pos:line="22" pos:column="24">ap_get_module_config<pos:position pos:line="22" pos:column="44"/></name><argument_list pos:line="22" pos:column="44">(<argument><expr><name><name pos:line="22" pos:column="45">f<pos:position pos:line="22" pos:column="46"/></name><operator pos:line="22" pos:column="46">-&gt;<pos:position pos:line="22" pos:column="51"/></operator><name pos:line="22" pos:column="48">r<pos:position pos:line="22" pos:column="49"/></name><operator pos:line="22" pos:column="49">-&gt;<pos:position pos:line="22" pos:column="54"/></operator><name pos:line="22" pos:column="51">per_dir_config<pos:position pos:line="22" pos:column="65"/></name></name></expr></argument>,
                                             <argument><expr><operator pos:line="23" pos:column="46">&amp;<pos:position pos:line="23" pos:column="51"/></operator><name pos:line="23" pos:column="47">substitute_module<pos:position pos:line="23" pos:column="64"/></name></expr></argument>)<pos:position pos:line="23" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="66"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">subst_pattern_t<pos:position pos:line="24" pos:column="20"/></name> <modifier pos:line="24" pos:column="21">*<pos:position pos:line="24" pos:column="22"/></modifier></type><name pos:line="24" pos:column="22">script<pos:position pos:line="24" pos:column="28"/></name></decl>;<pos:position pos:line="24" pos:column="29"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="26" pos:column="5">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><name pos:line="26" pos:column="29">mybb<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="35">inb<pos:position pos:line="26" pos:column="38"/></name></expr></argument>)<pos:position pos:line="26" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="40"/></expr_stmt>
    
    <expr_stmt><expr><name pos:line="28" pos:column="5">script<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <operator pos:line="28" pos:column="14">(<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="15">subst_pattern_t<pos:position pos:line="28" pos:column="30"/></name> <operator pos:line="28" pos:column="31">*<pos:position pos:line="28" pos:column="32"/></operator><operator pos:line="28" pos:column="32">)<pos:position pos:line="28" pos:column="33"/></operator> <name><name pos:line="28" pos:column="34">cfg<pos:position pos:line="28" pos:column="37"/></name><operator pos:line="28" pos:column="37">-&gt;<pos:position pos:line="28" pos:column="42"/></operator><name pos:line="28" pos:column="39">patterns<pos:position pos:line="28" pos:column="47"/></name><operator pos:line="28" pos:column="47">-&gt;<pos:position pos:line="28" pos:column="52"/></operator><name pos:line="28" pos:column="49">elts<pos:position pos:line="28" pos:column="53"/></name></name></expr>;<pos:position pos:line="28" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">apr_pool_create<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><operator pos:line="29" pos:column="21">&amp;<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="22">tpool<pos:position pos:line="29" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="29">tmp_pool<pos:position pos:line="29" pos:column="37"/></name></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="30" pos:column="5">scratch<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">=<pos:position pos:line="30" pos:column="14"/></operator> <name pos:line="30" pos:column="15">NULL<pos:position pos:line="30" pos:column="19"/></name></expr>;<pos:position pos:line="30" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="31" pos:column="5">fbytes<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <literal type="number" pos:line="31" pos:column="14">0<pos:position pos:line="31" pos:column="15"/></literal></expr>;<pos:position pos:line="31" pos:column="16"/></expr_stmt>
    <comment type="block" pos:line="32" pos:column="5">/*
     * Simple optimization. If we only have one pattern, then
     * we can safely avoid the overhead of flattening
     */</comment>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name><name pos:line="36" pos:column="9">cfg<pos:position pos:line="36" pos:column="12"/></name><operator pos:line="36" pos:column="12">-&gt;<pos:position pos:line="36" pos:column="17"/></operator><name pos:line="36" pos:column="14">patterns<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">-&gt;<pos:position pos:line="36" pos:column="27"/></operator><name pos:line="36" pos:column="24">nelts<pos:position pos:line="36" pos:column="29"/></name></name> <operator pos:line="36" pos:column="30">==<pos:position pos:line="36" pos:column="32"/></operator> <literal type="number" pos:line="36" pos:column="33">1<pos:position pos:line="36" pos:column="34"/></literal></expr>)<pos:position pos:line="36" pos:column="35"/></condition><then pos:line="36" pos:column="35"> <block pos:line="36" pos:column="36">{
       <expr_stmt><expr><name pos:line="37" pos:column="8">force_quick<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">=<pos:position pos:line="37" pos:column="21"/></operator> <literal type="number" pos:line="37" pos:column="22">1<pos:position pos:line="37" pos:column="23"/></literal></expr>;<pos:position pos:line="37" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>
    <for pos:line="39" pos:column="5">for <control pos:line="39" pos:column="9">(<init><expr><name pos:line="39" pos:column="10">i<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <literal type="number" pos:line="39" pos:column="14">0<pos:position pos:line="39" pos:column="15"/></literal></expr>;<pos:position pos:line="39" pos:column="16"/></init> <condition><expr><name pos:line="39" pos:column="17">i<pos:position pos:line="39" pos:column="18"/></name> <operator pos:line="39" pos:column="19">&lt;<pos:position pos:line="39" pos:column="23"/></operator> <name><name pos:line="39" pos:column="21">cfg<pos:position pos:line="39" pos:column="24"/></name><operator pos:line="39" pos:column="24">-&gt;<pos:position pos:line="39" pos:column="29"/></operator><name pos:line="39" pos:column="26">patterns<pos:position pos:line="39" pos:column="34"/></name><operator pos:line="39" pos:column="34">-&gt;<pos:position pos:line="39" pos:column="39"/></operator><name pos:line="39" pos:column="36">nelts<pos:position pos:line="39" pos:column="41"/></name></name></expr>;<pos:position pos:line="39" pos:column="42"/></condition> <incr><expr><name pos:line="39" pos:column="43">i<pos:position pos:line="39" pos:column="44"/></name><operator pos:line="39" pos:column="44">++<pos:position pos:line="39" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="39" pos:column="47"/></control> <block pos:line="39" pos:column="48">{
        <for pos:line="40" pos:column="9">for <control pos:line="40" pos:column="13">(<init><expr><name pos:line="40" pos:column="14">b<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <call><name pos:line="40" pos:column="18">APR_BRIGADE_FIRST<pos:position pos:line="40" pos:column="35"/></name><argument_list pos:line="40" pos:column="35">(<argument><expr><name pos:line="40" pos:column="36">mybb<pos:position pos:line="40" pos:column="40"/></name></expr></argument>)<pos:position pos:line="40" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="42"/></init>
             <condition><expr><name pos:line="41" pos:column="14">b<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">!=<pos:position pos:line="41" pos:column="18"/></operator> <call><name pos:line="41" pos:column="19">APR_BRIGADE_SENTINEL<pos:position pos:line="41" pos:column="39"/></name><argument_list pos:line="41" pos:column="39">(<argument><expr><name pos:line="41" pos:column="40">mybb<pos:position pos:line="41" pos:column="44"/></name></expr></argument>)<pos:position pos:line="41" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="46"/></condition>
             <incr><expr><name pos:line="42" pos:column="14">b<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">=<pos:position pos:line="42" pos:column="17"/></operator> <call><name pos:line="42" pos:column="18">APR_BUCKET_NEXT<pos:position pos:line="42" pos:column="33"/></name><argument_list pos:line="42" pos:column="33">(<argument><expr><name pos:line="42" pos:column="34">b<pos:position pos:line="42" pos:column="35"/></name></expr></argument>)<pos:position pos:line="42" pos:column="36"/></argument_list></call></expr></incr>)<pos:position pos:line="42" pos:column="37"/></control> <block pos:line="42" pos:column="38">{
            <if pos:line="43" pos:column="13">if <condition pos:line="43" pos:column="16">(<expr><call><name pos:line="43" pos:column="17">APR_BUCKET_IS_METADATA<pos:position pos:line="43" pos:column="39"/></name><argument_list pos:line="43" pos:column="39">(<argument><expr><name pos:line="43" pos:column="40">b<pos:position pos:line="43" pos:column="41"/></name></expr></argument>)<pos:position pos:line="43" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="43"/></condition><then pos:line="43" pos:column="43"> <block pos:line="43" pos:column="44">{
                <comment type="block" pos:line="44" pos:column="17">/*
                 * we should NEVER see this, because we should never
                 * be passed any, but "handle" it just in case.
                 */</comment>
                <continue pos:line="48" pos:column="17">continue;<pos:position pos:line="48" pos:column="26"/></continue>
            }<pos:position pos:line="49" pos:column="14"/></block></then></if>
            <if pos:line="50" pos:column="13">if <condition pos:line="50" pos:column="16">(<expr><call><name pos:line="50" pos:column="17">apr_bucket_read<pos:position pos:line="50" pos:column="32"/></name><argument_list pos:line="50" pos:column="32">(<argument><expr><name pos:line="50" pos:column="33">b<pos:position pos:line="50" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="36">&amp;<pos:position pos:line="50" pos:column="41"/></operator><name pos:line="50" pos:column="37">buff<pos:position pos:line="50" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="43">&amp;<pos:position pos:line="50" pos:column="48"/></operator><name pos:line="50" pos:column="44">bytes<pos:position pos:line="50" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="51">APR_BLOCK_READ<pos:position pos:line="50" pos:column="65"/></name></expr></argument>)<pos:position pos:line="50" pos:column="66"/></argument_list></call>
                    <operator pos:line="51" pos:column="21">==<pos:position pos:line="51" pos:column="23"/></operator> <name pos:line="51" pos:column="24">APR_SUCCESS<pos:position pos:line="51" pos:column="35"/></name></expr>)<pos:position pos:line="51" pos:column="36"/></condition><then pos:line="51" pos:column="36"> <block pos:line="51" pos:column="37">{
                <expr_stmt><expr><name pos:line="52" pos:column="17">s1<pos:position pos:line="52" pos:column="19"/></name> <operator pos:line="52" pos:column="20">=<pos:position pos:line="52" pos:column="21"/></operator> <name pos:line="52" pos:column="22">NULL<pos:position pos:line="52" pos:column="26"/></name></expr>;<pos:position pos:line="52" pos:column="27"/></expr_stmt>
                <if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name><name pos:line="53" pos:column="21">script<pos:position pos:line="53" pos:column="27"/></name><operator pos:line="53" pos:column="27">-&gt;<pos:position pos:line="53" pos:column="32"/></operator><name pos:line="53" pos:column="29">pattern<pos:position pos:line="53" pos:column="36"/></name></name></expr>)<pos:position pos:line="53" pos:column="37"/></condition><then pos:line="53" pos:column="37"> <block pos:line="53" pos:column="38">{
                    <while pos:line="54" pos:column="21">while <condition pos:line="54" pos:column="27">(<expr><operator pos:line="54" pos:column="28">(<pos:position pos:line="54" pos:column="29"/></operator><name pos:line="54" pos:column="29">repl<pos:position pos:line="54" pos:column="33"/></name> <operator pos:line="54" pos:column="34">=<pos:position pos:line="54" pos:column="35"/></operator> <call><name pos:line="54" pos:column="36">apr_strmatch<pos:position pos:line="54" pos:column="48"/></name><argument_list pos:line="54" pos:column="48">(<argument><expr><name><name pos:line="54" pos:column="49">script<pos:position pos:line="54" pos:column="55"/></name><operator pos:line="54" pos:column="55">-&gt;<pos:position pos:line="54" pos:column="60"/></operator><name pos:line="54" pos:column="57">pattern<pos:position pos:line="54" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="66">buff<pos:position pos:line="54" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="72">bytes<pos:position pos:line="54" pos:column="77"/></name></expr></argument>)<pos:position pos:line="54" pos:column="78"/></argument_list></call><operator pos:line="54" pos:column="78">)<pos:position pos:line="54" pos:column="79"/></operator></expr>)<pos:position pos:line="54" pos:column="80"/></condition>
                    <block pos:line="55" pos:column="21">{
                        <comment type="block" pos:line="56" pos:column="25">/* get offset into buff for pattern */</comment>
                        <expr_stmt><expr><name pos:line="57" pos:column="25">len<pos:position pos:line="57" pos:column="28"/></name> <operator pos:line="57" pos:column="29">=<pos:position pos:line="57" pos:column="30"/></operator> <call pos:line="57" pos:column="31">(<name pos:line="57" pos:column="32">apr_size_t<pos:position pos:line="57" pos:column="42"/></name>) <argument_list pos:line="57" pos:column="44">(<argument><expr><name pos:line="57" pos:column="45">repl<pos:position pos:line="57" pos:column="49"/></name> <operator pos:line="57" pos:column="50">-<pos:position pos:line="57" pos:column="51"/></operator> <name pos:line="57" pos:column="52">buff<pos:position pos:line="57" pos:column="56"/></name></expr></argument>)<pos:position pos:line="57" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="58"/></expr_stmt>
                        <if pos:line="58" pos:column="25">if <condition pos:line="58" pos:column="28">(<expr><name><name pos:line="58" pos:column="29">script<pos:position pos:line="58" pos:column="35"/></name><operator pos:line="58" pos:column="35">-&gt;<pos:position pos:line="58" pos:column="40"/></operator><name pos:line="58" pos:column="37">flatten<pos:position pos:line="58" pos:column="44"/></name></name> <operator pos:line="58" pos:column="45">&amp;&amp;<pos:position pos:line="58" pos:column="55"/></operator> <operator pos:line="58" pos:column="48">!<pos:position pos:line="58" pos:column="49"/></operator><name pos:line="58" pos:column="49">force_quick<pos:position pos:line="58" pos:column="60"/></name></expr>)<pos:position pos:line="58" pos:column="61"/></condition><then pos:line="58" pos:column="61"> <block pos:line="58" pos:column="62">{
                            <comment type="block" pos:line="59" pos:column="29">/*
                             * We are flattening the buckets here, meaning
                             * that we don't do the fast bucket splits.
                             * Instead we copy over what the buckets would
                             * contain and use them. This is slow, since we
                             * are constanting allocing space and copying
                             * strings.
                             */</comment>
                            <expr_stmt><expr><call><name pos:line="67" pos:column="29">SEDSCAT<pos:position pos:line="67" pos:column="36"/></name><argument_list pos:line="67" pos:column="36">(<argument><expr><name pos:line="67" pos:column="37">s1<pos:position pos:line="67" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="41">s2<pos:position pos:line="67" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="45">tmp_pool<pos:position pos:line="67" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="55">buff<pos:position pos:line="67" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="61">len<pos:position pos:line="67" pos:column="64"/></name></expr></argument>,
                                    <argument><expr><name><name pos:line="68" pos:column="37">script<pos:position pos:line="68" pos:column="43"/></name><operator pos:line="68" pos:column="43">-&gt;<pos:position pos:line="68" pos:column="48"/></operator><name pos:line="68" pos:column="45">replacement<pos:position pos:line="68" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="58"/></expr_stmt>
                        }<pos:position pos:line="69" pos:column="26"/></block></then>
                        <else pos:line="70" pos:column="25">else <block pos:line="70" pos:column="30">{
                            <comment type="block" pos:line="71" pos:column="29">/*
                             * We now split off the stuff before the regex
                             * as its own bucket, then isolate the pattern
                             * and delete it.
                             */</comment>
                            <expr_stmt><expr><call><name pos:line="76" pos:column="29">SEDRMPATBCKT<pos:position pos:line="76" pos:column="41"/></name><argument_list pos:line="76" pos:column="41">(<argument><expr><name pos:line="76" pos:column="42">b<pos:position pos:line="76" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="45">len<pos:position pos:line="76" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="50">tmp_b<pos:position pos:line="76" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="57">script<pos:position pos:line="76" pos:column="63"/></name><operator pos:line="76" pos:column="63">-&gt;<pos:position pos:line="76" pos:column="68"/></operator><name pos:line="76" pos:column="65">patlen<pos:position pos:line="76" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="73"/></expr_stmt>
                            <comment type="block" pos:line="77" pos:column="29">/*
                             * Finally, we create a bucket that contains the
                             * replacement...
                             */</comment>
                            <expr_stmt><expr><name pos:line="81" pos:column="29">tmp_b<pos:position pos:line="81" pos:column="34"/></name> <operator pos:line="81" pos:column="35">=<pos:position pos:line="81" pos:column="36"/></operator> <call><name pos:line="81" pos:column="37">apr_bucket_transient_create<pos:position pos:line="81" pos:column="64"/></name><argument_list pos:line="81" pos:column="64">(<argument><expr><name><name pos:line="81" pos:column="65">script<pos:position pos:line="81" pos:column="71"/></name><operator pos:line="81" pos:column="71">-&gt;<pos:position pos:line="81" pos:column="76"/></operator><name pos:line="81" pos:column="73">replacement<pos:position pos:line="81" pos:column="84"/></name></name></expr></argument>,
                                      <argument><expr><name><name pos:line="82" pos:column="39">script<pos:position pos:line="82" pos:column="45"/></name><operator pos:line="82" pos:column="45">-&gt;<pos:position pos:line="82" pos:column="50"/></operator><name pos:line="82" pos:column="47">replen<pos:position pos:line="82" pos:column="53"/></name></name></expr></argument>,
                                      <argument><expr><name><name pos:line="83" pos:column="39">f<pos:position pos:line="83" pos:column="40"/></name><operator pos:line="83" pos:column="40">-&gt;<pos:position pos:line="83" pos:column="45"/></operator><name pos:line="83" pos:column="42">r<pos:position pos:line="83" pos:column="43"/></name><operator pos:line="83" pos:column="43">-&gt;<pos:position pos:line="83" pos:column="48"/></operator><name pos:line="83" pos:column="45">connection<pos:position pos:line="83" pos:column="55"/></name><operator pos:line="83" pos:column="55">-&gt;<pos:position pos:line="83" pos:column="60"/></operator><name pos:line="83" pos:column="57">bucket_alloc<pos:position pos:line="83" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="71"/></expr_stmt>
                            <comment type="block" pos:line="84" pos:column="29">/* ... and insert it */</comment>
                            <expr_stmt><expr><call><name pos:line="85" pos:column="29">APR_BUCKET_INSERT_BEFORE<pos:position pos:line="85" pos:column="53"/></name><argument_list pos:line="85" pos:column="53">(<argument><expr><name pos:line="85" pos:column="54">b<pos:position pos:line="85" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="57">tmp_b<pos:position pos:line="85" pos:column="62"/></name></expr></argument>)<pos:position pos:line="85" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="64"/></expr_stmt>
                        }<pos:position pos:line="86" pos:column="26"/></block></else></if>
                        <comment type="block" pos:line="87" pos:column="25">/* now we need to adjust buff for all these changes */</comment>
                        <expr_stmt><expr><name pos:line="88" pos:column="25">len<pos:position pos:line="88" pos:column="28"/></name> <operator pos:line="88" pos:column="29">+=<pos:position pos:line="88" pos:column="31"/></operator> <name><name pos:line="88" pos:column="32">script<pos:position pos:line="88" pos:column="38"/></name><operator pos:line="88" pos:column="38">-&gt;<pos:position pos:line="88" pos:column="43"/></operator><name pos:line="88" pos:column="40">patlen<pos:position pos:line="88" pos:column="46"/></name></name></expr>;<pos:position pos:line="88" pos:column="47"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="89" pos:column="25">bytes<pos:position pos:line="89" pos:column="30"/></name> <operator pos:line="89" pos:column="31">-=<pos:position pos:line="89" pos:column="33"/></operator> <name pos:line="89" pos:column="34">len<pos:position pos:line="89" pos:column="37"/></name></expr>;<pos:position pos:line="89" pos:column="38"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="90" pos:column="25">buff<pos:position pos:line="90" pos:column="29"/></name> <operator pos:line="90" pos:column="30">+=<pos:position pos:line="90" pos:column="32"/></operator> <name pos:line="90" pos:column="33">len<pos:position pos:line="90" pos:column="36"/></name></expr>;<pos:position pos:line="90" pos:column="37"/></expr_stmt>
                    }<pos:position pos:line="91" pos:column="22"/></block></while>
                    <if pos:line="92" pos:column="21">if <condition pos:line="92" pos:column="24">(<expr><name><name pos:line="92" pos:column="25">script<pos:position pos:line="92" pos:column="31"/></name><operator pos:line="92" pos:column="31">-&gt;<pos:position pos:line="92" pos:column="36"/></operator><name pos:line="92" pos:column="33">flatten<pos:position pos:line="92" pos:column="40"/></name></name> <operator pos:line="92" pos:column="41">&amp;&amp;<pos:position pos:line="92" pos:column="51"/></operator> <name pos:line="92" pos:column="44">s1<pos:position pos:line="92" pos:column="46"/></name> <operator pos:line="92" pos:column="47">&amp;&amp;<pos:position pos:line="92" pos:column="57"/></operator> <operator pos:line="92" pos:column="50">!<pos:position pos:line="92" pos:column="51"/></operator><name pos:line="92" pos:column="51">force_quick<pos:position pos:line="92" pos:column="62"/></name></expr>)<pos:position pos:line="92" pos:column="63"/></condition><then pos:line="92" pos:column="63"> <block pos:line="92" pos:column="64">{
                        <comment type="block" pos:line="93" pos:column="25">/*
                         * we've finished looking at the bucket, so remove the
                         * old one and add in our new one
                         */</comment>
                        <expr_stmt><expr><name pos:line="97" pos:column="25">s2<pos:position pos:line="97" pos:column="27"/></name> <operator pos:line="97" pos:column="28">=<pos:position pos:line="97" pos:column="29"/></operator> <call><name pos:line="97" pos:column="30">apr_pstrmemdup<pos:position pos:line="97" pos:column="44"/></name><argument_list pos:line="97" pos:column="44">(<argument><expr><name pos:line="97" pos:column="45">tmp_pool<pos:position pos:line="97" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="55">buff<pos:position pos:line="97" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="61">bytes<pos:position pos:line="97" pos:column="66"/></name></expr></argument>)<pos:position pos:line="97" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="68"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="98" pos:column="25">s1<pos:position pos:line="98" pos:column="27"/></name> <operator pos:line="98" pos:column="28">=<pos:position pos:line="98" pos:column="29"/></operator> <call><name pos:line="98" pos:column="30">apr_pstrcat<pos:position pos:line="98" pos:column="41"/></name><argument_list pos:line="98" pos:column="41">(<argument><expr><name pos:line="98" pos:column="42">tmp_pool<pos:position pos:line="98" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="52">s1<pos:position pos:line="98" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="56">s2<pos:position pos:line="98" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="60">NULL<pos:position pos:line="98" pos:column="64"/></name></expr></argument>)<pos:position pos:line="98" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="66"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="99" pos:column="25">tmp_b<pos:position pos:line="99" pos:column="30"/></name> <operator pos:line="99" pos:column="31">=<pos:position pos:line="99" pos:column="32"/></operator> <call><name pos:line="99" pos:column="33">apr_bucket_transient_create<pos:position pos:line="99" pos:column="60"/></name><argument_list pos:line="99" pos:column="60">(<argument><expr><name pos:line="99" pos:column="61">s1<pos:position pos:line="99" pos:column="63"/></name></expr></argument>, <argument><expr><call><name pos:line="99" pos:column="65">strlen<pos:position pos:line="99" pos:column="71"/></name><argument_list pos:line="99" pos:column="71">(<argument><expr><name pos:line="99" pos:column="72">s1<pos:position pos:line="99" pos:column="74"/></name></expr></argument>)<pos:position pos:line="99" pos:column="75"/></argument_list></call></expr></argument>,
                                            <argument><expr><name><name pos:line="100" pos:column="45">f<pos:position pos:line="100" pos:column="46"/></name><operator pos:line="100" pos:column="46">-&gt;<pos:position pos:line="100" pos:column="51"/></operator><name pos:line="100" pos:column="48">r<pos:position pos:line="100" pos:column="49"/></name><operator pos:line="100" pos:column="49">-&gt;<pos:position pos:line="100" pos:column="54"/></operator><name pos:line="100" pos:column="51">connection<pos:position pos:line="100" pos:column="61"/></name><operator pos:line="100" pos:column="61">-&gt;<pos:position pos:line="100" pos:column="66"/></operator><name pos:line="100" pos:column="63">bucket_alloc<pos:position pos:line="100" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="77"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="101" pos:column="25">APR_BUCKET_INSERT_BEFORE<pos:position pos:line="101" pos:column="49"/></name><argument_list pos:line="101" pos:column="49">(<argument><expr><name pos:line="101" pos:column="50">b<pos:position pos:line="101" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="53">tmp_b<pos:position pos:line="101" pos:column="58"/></name></expr></argument>)<pos:position pos:line="101" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="60"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="102" pos:column="25">apr_bucket_delete<pos:position pos:line="102" pos:column="42"/></name><argument_list pos:line="102" pos:column="42">(<argument><expr><name pos:line="102" pos:column="43">b<pos:position pos:line="102" pos:column="44"/></name></expr></argument>)<pos:position pos:line="102" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="46"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="103" pos:column="25">b<pos:position pos:line="103" pos:column="26"/></name> <operator pos:line="103" pos:column="27">=<pos:position pos:line="103" pos:column="28"/></operator> <name pos:line="103" pos:column="29">tmp_b<pos:position pos:line="103" pos:column="34"/></name></expr>;<pos:position pos:line="103" pos:column="35"/></expr_stmt>
                    }<pos:position pos:line="104" pos:column="22"/></block></then></if>

                }<pos:position pos:line="106" pos:column="18"/></block></then>
                <elseif pos:line="107" pos:column="17">else <if pos:line="107" pos:column="22">if <condition pos:line="107" pos:column="25">(<expr><name><name pos:line="107" pos:column="26">script<pos:position pos:line="107" pos:column="32"/></name><operator pos:line="107" pos:column="32">-&gt;<pos:position pos:line="107" pos:column="37"/></operator><name pos:line="107" pos:column="34">regexp<pos:position pos:line="107" pos:column="40"/></name></name></expr>)<pos:position pos:line="107" pos:column="41"/></condition><then pos:line="107" pos:column="41"> <block pos:line="107" pos:column="42">{
                    <comment type="block" pos:line="108" pos:column="21">/*
                     * we need a null terminated string here :(. To hopefully
                     * save time and memory, we don't alloc for each run
                     * through, but only if we need to have a larger chunk
                     * to save the string to. So we keep track of how much
                     * we've allocated and only re-alloc when we need it.
                     * NOTE: this screams for a macro.
                     */</comment>
                    <if pos:line="116" pos:column="21">if <condition pos:line="116" pos:column="24">(<expr><operator pos:line="116" pos:column="25">!<pos:position pos:line="116" pos:column="26"/></operator><name pos:line="116" pos:column="26">scratch<pos:position pos:line="116" pos:column="33"/></name> <operator pos:line="116" pos:column="34">||<pos:position pos:line="116" pos:column="36"/></operator> <operator pos:line="116" pos:column="37">(<pos:position pos:line="116" pos:column="38"/></operator><name pos:line="116" pos:column="38">bytes<pos:position pos:line="116" pos:column="43"/></name> <operator pos:line="116" pos:column="44">&gt;<pos:position pos:line="116" pos:column="48"/></operator> <operator pos:line="116" pos:column="46">(<pos:position pos:line="116" pos:column="47"/></operator><name pos:line="116" pos:column="47">fbytes<pos:position pos:line="116" pos:column="53"/></name> <operator pos:line="116" pos:column="54">+<pos:position pos:line="116" pos:column="55"/></operator> <literal type="number" pos:line="116" pos:column="56">1<pos:position pos:line="116" pos:column="57"/></literal><operator pos:line="116" pos:column="57">)<pos:position pos:line="116" pos:column="58"/></operator><operator pos:line="116" pos:column="58">)<pos:position pos:line="116" pos:column="59"/></operator></expr>)<pos:position pos:line="116" pos:column="60"/></condition><then pos:line="116" pos:column="60"> <block pos:line="116" pos:column="61">{
                        <expr_stmt><expr><name pos:line="117" pos:column="25">fbytes<pos:position pos:line="117" pos:column="31"/></name> <operator pos:line="117" pos:column="32">=<pos:position pos:line="117" pos:column="33"/></operator> <name pos:line="117" pos:column="34">bytes<pos:position pos:line="117" pos:column="39"/></name> <operator pos:line="117" pos:column="40">+<pos:position pos:line="117" pos:column="41"/></operator> <literal type="number" pos:line="117" pos:column="42">1<pos:position pos:line="117" pos:column="43"/></literal></expr>;<pos:position pos:line="117" pos:column="44"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="118" pos:column="25">scratch<pos:position pos:line="118" pos:column="32"/></name> <operator pos:line="118" pos:column="33">=<pos:position pos:line="118" pos:column="34"/></operator> <call><name pos:line="118" pos:column="35">apr_palloc<pos:position pos:line="118" pos:column="45"/></name><argument_list pos:line="118" pos:column="45">(<argument><expr><name pos:line="118" pos:column="46">tpool<pos:position pos:line="118" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="53">fbytes<pos:position pos:line="118" pos:column="59"/></name></expr></argument>)<pos:position pos:line="118" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="61"/></expr_stmt>
                    }<pos:position pos:line="119" pos:column="22"/></block></then></if>
                    <comment type="block" pos:line="120" pos:column="21">/* reset pointer to the scratch space */</comment>
                    <expr_stmt><expr><name pos:line="121" pos:column="21">p<pos:position pos:line="121" pos:column="22"/></name> <operator pos:line="121" pos:column="23">=<pos:position pos:line="121" pos:column="24"/></operator> <name pos:line="121" pos:column="25">scratch<pos:position pos:line="121" pos:column="32"/></name></expr>;<pos:position pos:line="121" pos:column="33"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="122" pos:column="21">memcpy<pos:position pos:line="122" pos:column="27"/></name><argument_list pos:line="122" pos:column="27">(<argument><expr><name pos:line="122" pos:column="28">p<pos:position pos:line="122" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="31">buff<pos:position pos:line="122" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="37">bytes<pos:position pos:line="122" pos:column="42"/></name></expr></argument>)<pos:position pos:line="122" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="44"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="123" pos:column="21">p<pos:position pos:line="123" pos:column="22"/></name><index pos:line="123" pos:column="22">[<expr><name pos:line="123" pos:column="23">bytes<pos:position pos:line="123" pos:column="28"/></name></expr>]<pos:position pos:line="123" pos:column="29"/></index></name> <operator pos:line="123" pos:column="30">=<pos:position pos:line="123" pos:column="31"/></operator> <literal type="char" pos:line="123" pos:column="32">'\0'<pos:position pos:line="123" pos:column="36"/></literal></expr>;<pos:position pos:line="123" pos:column="37"/></expr_stmt>
                    <while pos:line="124" pos:column="21">while <condition pos:line="124" pos:column="27">(<expr><operator pos:line="124" pos:column="28">!<pos:position pos:line="124" pos:column="29"/></operator><call><name pos:line="124" pos:column="29">ap_regexec<pos:position pos:line="124" pos:column="39"/></name><argument_list pos:line="124" pos:column="39">(<argument><expr><name><name pos:line="124" pos:column="40">script<pos:position pos:line="124" pos:column="46"/></name><operator pos:line="124" pos:column="46">-&gt;<pos:position pos:line="124" pos:column="51"/></operator><name pos:line="124" pos:column="48">regexp<pos:position pos:line="124" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="56">p<pos:position pos:line="124" pos:column="57"/></name></expr></argument>,
                                       <argument><expr><name pos:line="125" pos:column="40">AP_MAX_REG_MATCH<pos:position pos:line="125" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="58">regm<pos:position pos:line="125" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="125" pos:column="64">0<pos:position pos:line="125" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="125" pos:column="67"/></condition> <block pos:line="125" pos:column="68">{
                        <comment type="block" pos:line="126" pos:column="25">/* first, grab the replacement string */</comment>
                        <expr_stmt><expr><name pos:line="127" pos:column="25">repl<pos:position pos:line="127" pos:column="29"/></name> <operator pos:line="127" pos:column="30">=<pos:position pos:line="127" pos:column="31"/></operator> <call><name pos:line="127" pos:column="32">ap_pregsub<pos:position pos:line="127" pos:column="42"/></name><argument_list pos:line="127" pos:column="42">(<argument><expr><name pos:line="127" pos:column="43">tmp_pool<pos:position pos:line="127" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="127" pos:column="53">script<pos:position pos:line="127" pos:column="59"/></name><operator pos:line="127" pos:column="59">-&gt;<pos:position pos:line="127" pos:column="64"/></operator><name pos:line="127" pos:column="61">replacement<pos:position pos:line="127" pos:column="72"/></name></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="74">p<pos:position pos:line="127" pos:column="75"/></name></expr></argument>,
                                          <argument><expr><name pos:line="128" pos:column="43">AP_MAX_REG_MATCH<pos:position pos:line="128" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="61">regm<pos:position pos:line="128" pos:column="65"/></name></expr></argument>)<pos:position pos:line="128" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="67"/></expr_stmt>
                        <if pos:line="129" pos:column="25">if <condition pos:line="129" pos:column="28">(<expr><name><name pos:line="129" pos:column="29">script<pos:position pos:line="129" pos:column="35"/></name><operator pos:line="129" pos:column="35">-&gt;<pos:position pos:line="129" pos:column="40"/></operator><name pos:line="129" pos:column="37">flatten<pos:position pos:line="129" pos:column="44"/></name></name> <operator pos:line="129" pos:column="45">&amp;&amp;<pos:position pos:line="129" pos:column="55"/></operator> <operator pos:line="129" pos:column="48">!<pos:position pos:line="129" pos:column="49"/></operator><name pos:line="129" pos:column="49">force_quick<pos:position pos:line="129" pos:column="60"/></name></expr>)<pos:position pos:line="129" pos:column="61"/></condition><then pos:line="129" pos:column="61"> <block pos:line="129" pos:column="62">{
                            <expr_stmt><expr><call><name pos:line="130" pos:column="29">SEDSCAT<pos:position pos:line="130" pos:column="36"/></name><argument_list pos:line="130" pos:column="36">(<argument><expr><name pos:line="130" pos:column="37">s1<pos:position pos:line="130" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="41">s2<pos:position pos:line="130" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="45">tmp_pool<pos:position pos:line="130" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="55">p<pos:position pos:line="130" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="130" pos:column="58">regm<pos:position pos:line="130" pos:column="62"/></name><index pos:line="130" pos:column="62">[<expr><literal type="number" pos:line="130" pos:column="63">0<pos:position pos:line="130" pos:column="64"/></literal></expr>]<pos:position pos:line="130" pos:column="65"/></index></name><operator pos:line="130" pos:column="65">.<pos:position pos:line="130" pos:column="66"/></operator><name pos:line="130" pos:column="66">rm_so<pos:position pos:line="130" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="73">repl<pos:position pos:line="130" pos:column="77"/></name></expr></argument>)<pos:position pos:line="130" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="79"/></expr_stmt>
                        }<pos:position pos:line="131" pos:column="26"/></block></then>
                        <else pos:line="132" pos:column="25">else <block pos:line="132" pos:column="30">{
                            <expr_stmt><expr><name pos:line="133" pos:column="29">len<pos:position pos:line="133" pos:column="32"/></name> <operator pos:line="133" pos:column="33">=<pos:position pos:line="133" pos:column="34"/></operator> <call pos:line="133" pos:column="35">(<name pos:line="133" pos:column="36">apr_size_t<pos:position pos:line="133" pos:column="46"/></name>) <argument_list pos:line="133" pos:column="48">(<argument><expr><name><name pos:line="133" pos:column="49">regm<pos:position pos:line="133" pos:column="53"/></name><index pos:line="133" pos:column="53">[<expr><literal type="number" pos:line="133" pos:column="54">0<pos:position pos:line="133" pos:column="55"/></literal></expr>]<pos:position pos:line="133" pos:column="56"/></index></name><operator pos:line="133" pos:column="56">.<pos:position pos:line="133" pos:column="57"/></operator><name pos:line="133" pos:column="57">rm_eo<pos:position pos:line="133" pos:column="62"/></name> <operator pos:line="133" pos:column="63">-<pos:position pos:line="133" pos:column="64"/></operator> <name><name pos:line="133" pos:column="65">regm<pos:position pos:line="133" pos:column="69"/></name><index pos:line="133" pos:column="69">[<expr><literal type="number" pos:line="133" pos:column="70">0<pos:position pos:line="133" pos:column="71"/></literal></expr>]<pos:position pos:line="133" pos:column="72"/></index></name><operator pos:line="133" pos:column="72">.<pos:position pos:line="133" pos:column="73"/></operator><name pos:line="133" pos:column="73">rm_so<pos:position pos:line="133" pos:column="78"/></name></expr></argument>)<pos:position pos:line="133" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="80"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="134" pos:column="29">SEDRMPATBCKT<pos:position pos:line="134" pos:column="41"/></name><argument_list pos:line="134" pos:column="41">(<argument><expr><name pos:line="134" pos:column="42">b<pos:position pos:line="134" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="134" pos:column="45">regm<pos:position pos:line="134" pos:column="49"/></name><index pos:line="134" pos:column="49">[<expr><literal type="number" pos:line="134" pos:column="50">0<pos:position pos:line="134" pos:column="51"/></literal></expr>]<pos:position pos:line="134" pos:column="52"/></index></name><operator pos:line="134" pos:column="52">.<pos:position pos:line="134" pos:column="53"/></operator><name pos:line="134" pos:column="53">rm_so<pos:position pos:line="134" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="60">tmp_b<pos:position pos:line="134" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="67">len<pos:position pos:line="134" pos:column="70"/></name></expr></argument>)<pos:position pos:line="134" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="72"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="135" pos:column="29">tmp_b<pos:position pos:line="135" pos:column="34"/></name> <operator pos:line="135" pos:column="35">=<pos:position pos:line="135" pos:column="36"/></operator> <call><name pos:line="135" pos:column="37">apr_bucket_transient_create<pos:position pos:line="135" pos:column="64"/></name><argument_list pos:line="135" pos:column="64">(<argument><expr><name pos:line="135" pos:column="65">repl<pos:position pos:line="135" pos:column="69"/></name></expr></argument>,
                                                                <argument><expr><call><name pos:line="136" pos:column="65">strlen<pos:position pos:line="136" pos:column="71"/></name><argument_list pos:line="136" pos:column="71">(<argument><expr><name pos:line="136" pos:column="72">repl<pos:position pos:line="136" pos:column="76"/></name></expr></argument>)<pos:position pos:line="136" pos:column="77"/></argument_list></call></expr></argument>,
                                             <argument><expr><name><name pos:line="137" pos:column="46">f<pos:position pos:line="137" pos:column="47"/></name><operator pos:line="137" pos:column="47">-&gt;<pos:position pos:line="137" pos:column="52"/></operator><name pos:line="137" pos:column="49">r<pos:position pos:line="137" pos:column="50"/></name><operator pos:line="137" pos:column="50">-&gt;<pos:position pos:line="137" pos:column="55"/></operator><name pos:line="137" pos:column="52">connection<pos:position pos:line="137" pos:column="62"/></name><operator pos:line="137" pos:column="62">-&gt;<pos:position pos:line="137" pos:column="67"/></operator><name pos:line="137" pos:column="64">bucket_alloc<pos:position pos:line="137" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="137" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="78"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="138" pos:column="29">APR_BUCKET_INSERT_BEFORE<pos:position pos:line="138" pos:column="53"/></name><argument_list pos:line="138" pos:column="53">(<argument><expr><name pos:line="138" pos:column="54">b<pos:position pos:line="138" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="57">tmp_b<pos:position pos:line="138" pos:column="62"/></name></expr></argument>)<pos:position pos:line="138" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="64"/></expr_stmt>
                        }<pos:position pos:line="139" pos:column="26"/></block></else></if>
                        <comment type="block" pos:line="140" pos:column="25">/*
                         * reset to past what we just did. buff now maps to b
                         * again
                         */</comment>
                        <expr_stmt><expr><name pos:line="144" pos:column="25">p<pos:position pos:line="144" pos:column="26"/></name> <operator pos:line="144" pos:column="27">+=<pos:position pos:line="144" pos:column="29"/></operator> <name><name pos:line="144" pos:column="30">regm<pos:position pos:line="144" pos:column="34"/></name><index pos:line="144" pos:column="34">[<expr><literal type="number" pos:line="144" pos:column="35">0<pos:position pos:line="144" pos:column="36"/></literal></expr>]<pos:position pos:line="144" pos:column="37"/></index></name><operator pos:line="144" pos:column="37">.<pos:position pos:line="144" pos:column="38"/></operator><name pos:line="144" pos:column="38">rm_eo<pos:position pos:line="144" pos:column="43"/></name></expr>;<pos:position pos:line="144" pos:column="44"/></expr_stmt>
                    }<pos:position pos:line="145" pos:column="22"/></block></while>
                    <if pos:line="146" pos:column="21">if <condition pos:line="146" pos:column="24">(<expr><name><name pos:line="146" pos:column="25">script<pos:position pos:line="146" pos:column="31"/></name><operator pos:line="146" pos:column="31">-&gt;<pos:position pos:line="146" pos:column="36"/></operator><name pos:line="146" pos:column="33">flatten<pos:position pos:line="146" pos:column="40"/></name></name> <operator pos:line="146" pos:column="41">&amp;&amp;<pos:position pos:line="146" pos:column="51"/></operator> <name pos:line="146" pos:column="44">s1<pos:position pos:line="146" pos:column="46"/></name> <operator pos:line="146" pos:column="47">&amp;&amp;<pos:position pos:line="146" pos:column="57"/></operator> <operator pos:line="146" pos:column="50">!<pos:position pos:line="146" pos:column="51"/></operator><name pos:line="146" pos:column="51">force_quick<pos:position pos:line="146" pos:column="62"/></name></expr>)<pos:position pos:line="146" pos:column="63"/></condition><then pos:line="146" pos:column="63"> <block pos:line="146" pos:column="64">{
                        <expr_stmt><expr><name pos:line="147" pos:column="25">s1<pos:position pos:line="147" pos:column="27"/></name> <operator pos:line="147" pos:column="28">=<pos:position pos:line="147" pos:column="29"/></operator> <call><name pos:line="147" pos:column="30">apr_pstrcat<pos:position pos:line="147" pos:column="41"/></name><argument_list pos:line="147" pos:column="41">(<argument><expr><name pos:line="147" pos:column="42">tmp_pool<pos:position pos:line="147" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="52">s1<pos:position pos:line="147" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="56">p<pos:position pos:line="147" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="59">NULL<pos:position pos:line="147" pos:column="63"/></name></expr></argument>)<pos:position pos:line="147" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="65"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="148" pos:column="25">tmp_b<pos:position pos:line="148" pos:column="30"/></name> <operator pos:line="148" pos:column="31">=<pos:position pos:line="148" pos:column="32"/></operator> <call><name pos:line="148" pos:column="33">apr_bucket_transient_create<pos:position pos:line="148" pos:column="60"/></name><argument_list pos:line="148" pos:column="60">(<argument><expr><name pos:line="148" pos:column="61">s1<pos:position pos:line="148" pos:column="63"/></name></expr></argument>, <argument><expr><call><name pos:line="148" pos:column="65">strlen<pos:position pos:line="148" pos:column="71"/></name><argument_list pos:line="148" pos:column="71">(<argument><expr><name pos:line="148" pos:column="72">s1<pos:position pos:line="148" pos:column="74"/></name></expr></argument>)<pos:position pos:line="148" pos:column="75"/></argument_list></call></expr></argument>,
                                            <argument><expr><name><name pos:line="149" pos:column="45">f<pos:position pos:line="149" pos:column="46"/></name><operator pos:line="149" pos:column="46">-&gt;<pos:position pos:line="149" pos:column="51"/></operator><name pos:line="149" pos:column="48">r<pos:position pos:line="149" pos:column="49"/></name><operator pos:line="149" pos:column="49">-&gt;<pos:position pos:line="149" pos:column="54"/></operator><name pos:line="149" pos:column="51">connection<pos:position pos:line="149" pos:column="61"/></name><operator pos:line="149" pos:column="61">-&gt;<pos:position pos:line="149" pos:column="66"/></operator><name pos:line="149" pos:column="63">bucket_alloc<pos:position pos:line="149" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="149" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="77"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="150" pos:column="25">APR_BUCKET_INSERT_BEFORE<pos:position pos:line="150" pos:column="49"/></name><argument_list pos:line="150" pos:column="49">(<argument><expr><name pos:line="150" pos:column="50">b<pos:position pos:line="150" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="53">tmp_b<pos:position pos:line="150" pos:column="58"/></name></expr></argument>)<pos:position pos:line="150" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="60"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="151" pos:column="25">apr_bucket_delete<pos:position pos:line="151" pos:column="42"/></name><argument_list pos:line="151" pos:column="42">(<argument><expr><name pos:line="151" pos:column="43">b<pos:position pos:line="151" pos:column="44"/></name></expr></argument>)<pos:position pos:line="151" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="46"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="152" pos:column="25">b<pos:position pos:line="152" pos:column="26"/></name> <operator pos:line="152" pos:column="27">=<pos:position pos:line="152" pos:column="28"/></operator> <name pos:line="152" pos:column="29">tmp_b<pos:position pos:line="152" pos:column="34"/></name></expr>;<pos:position pos:line="152" pos:column="35"/></expr_stmt>
                    }<pos:position pos:line="153" pos:column="22"/></block></then></if>

                }<pos:position pos:line="155" pos:column="18"/></block></then></if></elseif>
                <else pos:line="156" pos:column="17">else <block pos:line="156" pos:column="22">{
                    <comment type="block" pos:line="157" pos:column="21">/* huh? */</comment>
                    <continue pos:line="158" pos:column="21">continue;<pos:position pos:line="158" pos:column="30"/></continue>
                }<pos:position pos:line="159" pos:column="18"/></block></else></if>
            }<pos:position pos:line="160" pos:column="14"/></block></then></if>
        }<pos:position pos:line="161" pos:column="10"/></block></for>
        <expr_stmt><expr><name pos:line="162" pos:column="9">script<pos:position pos:line="162" pos:column="15"/></name><operator pos:line="162" pos:column="15">++<pos:position pos:line="162" pos:column="17"/></operator></expr>;<pos:position pos:line="162" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="163" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="165" pos:column="5">apr_pool_destroy<pos:position pos:line="165" pos:column="21"/></name><argument_list pos:line="165" pos:column="21">(<argument><expr><name pos:line="165" pos:column="22">tpool<pos:position pos:line="165" pos:column="27"/></name></expr></argument>)<pos:position pos:line="165" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="29"/></expr_stmt>

    <return pos:line="167" pos:column="5">return;<pos:position pos:line="167" pos:column="12"/></return>
}<pos:position pos:line="168" pos:column="2"/></block></function></unit>
