<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3125_httpd-2.4.25.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">check_gzip<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">request_rec<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">r<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">apr_table_t<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">hdrs1<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">apr_table_t<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">hdrs2<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">found<pos:position pos:line="3" pos:column="14"/></name> <init pos:line="3" pos:column="15">= <expr><literal type="number" pos:line="3" pos:column="17">0<pos:position pos:line="3" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_table_t<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">hdrs<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><name pos:line="4" pos:column="25">hdrs1<pos:position pos:line="4" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">encoding<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><call><name pos:line="5" pos:column="28">apr_table_get<pos:position pos:line="5" pos:column="41"/></name><argument_list pos:line="5" pos:column="41">(<argument><expr><name pos:line="5" pos:column="42">hdrs<pos:position pos:line="5" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="48">"Content-Encoding"<pos:position pos:line="5" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="68"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">encoding<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">&amp;&amp;<pos:position pos:line="7" pos:column="29"/></operator> <operator pos:line="7" pos:column="22">(<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="23">hdrs2<pos:position pos:line="7" pos:column="28"/></name> <operator pos:line="7" pos:column="29">!=<pos:position pos:line="7" pos:column="31"/></operator> <name pos:line="7" pos:column="32">NULL<pos:position pos:line="7" pos:column="36"/></name><operator pos:line="7" pos:column="36">)<pos:position pos:line="7" pos:column="37"/></operator></expr>)<pos:position pos:line="7" pos:column="38"/></condition><then pos:line="7" pos:column="38"> <block pos:line="7" pos:column="39">{
        <comment type="block" pos:line="8" pos:column="9">/* the output filter has two tables and a content_encoding to check */</comment>
        <expr_stmt><expr><name pos:line="9" pos:column="9">encoding<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">=<pos:position pos:line="9" pos:column="19"/></operator> <call><name pos:line="9" pos:column="20">apr_table_get<pos:position pos:line="9" pos:column="33"/></name><argument_list pos:line="9" pos:column="33">(<argument><expr><name pos:line="9" pos:column="34">hdrs2<pos:position pos:line="9" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="41">"Content-Encoding"<pos:position pos:line="9" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><name pos:line="10" pos:column="9">hdrs<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">=<pos:position pos:line="10" pos:column="15"/></operator> <name pos:line="10" pos:column="16">hdrs2<pos:position pos:line="10" pos:column="21"/></name></expr>;<pos:position pos:line="10" pos:column="22"/></expr_stmt>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">encoding<pos:position pos:line="11" pos:column="22"/></name></expr>)<pos:position pos:line="11" pos:column="23"/></condition><then pos:line="11" pos:column="23"> <block pos:line="11" pos:column="24">{
            <expr_stmt><expr><name pos:line="12" pos:column="13">encoding<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <name><name pos:line="12" pos:column="24">r<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">-&gt;<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="27">content_encoding<pos:position pos:line="12" pos:column="43"/></name></name></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt>
            <expr_stmt><expr><name pos:line="13" pos:column="13">hdrs<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <name pos:line="13" pos:column="20">NULL<pos:position pos:line="13" pos:column="24"/></name></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="14" pos:column="10"/></block></then></if>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">encoding<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">&amp;&amp;<pos:position pos:line="16" pos:column="28"/></operator> <operator pos:line="16" pos:column="21">*<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">encoding<pos:position pos:line="16" pos:column="30"/></name></expr>)<pos:position pos:line="16" pos:column="31"/></condition><then pos:line="16" pos:column="31"> <block pos:line="16" pos:column="32">{

        <comment type="block" pos:line="18" pos:column="9">/* check the usual/simple case first */</comment>
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><call><name pos:line="19" pos:column="14">strcasecmp<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">encoding<pos:position pos:line="19" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="35">"gzip"<pos:position pos:line="19" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call>
            <operator pos:line="20" pos:column="13">||<pos:position pos:line="20" pos:column="15"/></operator> <operator pos:line="20" pos:column="16">!<pos:position pos:line="20" pos:column="17"/></operator><call><name pos:line="20" pos:column="17">strcasecmp<pos:position pos:line="20" pos:column="27"/></name><argument_list pos:line="20" pos:column="27">(<argument><expr><name pos:line="20" pos:column="28">encoding<pos:position pos:line="20" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="38">"x-gzip"<pos:position pos:line="20" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="48"/></condition><then pos:line="20" pos:column="48"> <block pos:line="20" pos:column="49">{
            <expr_stmt><expr><name pos:line="21" pos:column="13">found<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <literal type="number" pos:line="21" pos:column="21">1<pos:position pos:line="21" pos:column="22"/></literal></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt>
            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><name pos:line="22" pos:column="17">hdrs<pos:position pos:line="22" pos:column="21"/></name></expr>)<pos:position pos:line="22" pos:column="22"/></condition><then pos:line="22" pos:column="22"> <block pos:line="22" pos:column="23">{
                <expr_stmt><expr><call><name pos:line="23" pos:column="17">apr_table_unset<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name pos:line="23" pos:column="33">hdrs<pos:position pos:line="23" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="39">"Content-Encoding"<pos:position pos:line="23" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="59"/></expr_stmt>
            }<pos:position pos:line="24" pos:column="14"/></block></then>
            <else pos:line="25" pos:column="13">else <block pos:line="25" pos:column="18">{
                <expr_stmt><expr><name><name pos:line="26" pos:column="17">r<pos:position pos:line="26" pos:column="18"/></name><operator pos:line="26" pos:column="18">-&gt;<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="20">content_encoding<pos:position pos:line="26" pos:column="36"/></name></name> <operator pos:line="26" pos:column="37">=<pos:position pos:line="26" pos:column="38"/></operator> <name pos:line="26" pos:column="39">NULL<pos:position pos:line="26" pos:column="43"/></name></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt>
            }<pos:position pos:line="27" pos:column="14"/></block></else></if>
        }<pos:position pos:line="28" pos:column="10"/></block></then>
        <elseif pos:line="29" pos:column="9">else <if pos:line="29" pos:column="14">if <condition pos:line="29" pos:column="17">(<expr><call><name pos:line="29" pos:column="18">ap_strchr_c<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><name pos:line="29" pos:column="30">encoding<pos:position pos:line="29" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="29" pos:column="40">','<pos:position pos:line="29" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="44"/></argument_list></call> <operator pos:line="29" pos:column="45">!=<pos:position pos:line="29" pos:column="47"/></operator> <name pos:line="29" pos:column="48">NULL<pos:position pos:line="29" pos:column="52"/></name></expr>)<pos:position pos:line="29" pos:column="53"/></condition><then pos:line="29" pos:column="53"> <block pos:line="29" pos:column="54">{
            <comment type="block" pos:line="30" pos:column="13">/* If the outermost encoding isn't gzip, there's nothing
             * we can do.  So only check the last non-identity token
             */</comment>
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">char<pos:position pos:line="33" pos:column="17"/></name> <modifier pos:line="33" pos:column="18">*<pos:position pos:line="33" pos:column="19"/></modifier></type><name pos:line="33" pos:column="19">new_encoding<pos:position pos:line="33" pos:column="31"/></name> <init pos:line="33" pos:column="32">= <expr><call><name pos:line="33" pos:column="34">apr_pstrdup<pos:position pos:line="33" pos:column="45"/></name><argument_list pos:line="33" pos:column="45">(<argument><expr><name><name pos:line="33" pos:column="46">r<pos:position pos:line="33" pos:column="47"/></name><operator pos:line="33" pos:column="47">-&gt;<pos:position pos:line="33" pos:column="52"/></operator><name pos:line="33" pos:column="49">pool<pos:position pos:line="33" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="55">encoding<pos:position pos:line="33" pos:column="63"/></name></expr></argument>)<pos:position pos:line="33" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="65"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">char<pos:position pos:line="34" pos:column="17"/></name> <modifier pos:line="34" pos:column="18">*<pos:position pos:line="34" pos:column="19"/></modifier></type><name pos:line="34" pos:column="19">ptr<pos:position pos:line="34" pos:column="22"/></name></decl>;<pos:position pos:line="34" pos:column="23"/></decl_stmt>
            <for pos:line="35" pos:column="13">for<control pos:line="35" pos:column="16">(<init pos:line="35" pos:column="17">;<pos:position pos:line="35" pos:column="18"/></init><condition pos:line="35" pos:column="18">;<pos:position pos:line="35" pos:column="19"/></condition><incr/>)<pos:position pos:line="35" pos:column="20"/></control> <block pos:line="35" pos:column="21">{
                <decl_stmt><decl><type><name pos:line="36" pos:column="17">char<pos:position pos:line="36" pos:column="21"/></name> <modifier pos:line="36" pos:column="22">*<pos:position pos:line="36" pos:column="23"/></modifier></type><name pos:line="36" pos:column="23">token<pos:position pos:line="36" pos:column="28"/></name> <init pos:line="36" pos:column="29">= <expr><call><name pos:line="36" pos:column="31">ap_strrchr<pos:position pos:line="36" pos:column="41"/></name><argument_list pos:line="36" pos:column="41">(<argument><expr><name pos:line="36" pos:column="42">new_encoding<pos:position pos:line="36" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="36" pos:column="56">','<pos:position pos:line="36" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="61"/></decl_stmt>
                <if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><operator pos:line="37" pos:column="21">!<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="22">token<pos:position pos:line="37" pos:column="27"/></name></expr>)<pos:position pos:line="37" pos:column="28"/></condition><then pos:line="37" pos:column="28"> <block pos:line="37" pos:column="29">{        <comment type="block" pos:line="37" pos:column="38">/* gzip:identity or other:identity */</comment>
                    <if pos:line="38" pos:column="21">if <condition pos:line="38" pos:column="24">(<expr><operator pos:line="38" pos:column="25">!<pos:position pos:line="38" pos:column="26"/></operator><call><name pos:line="38" pos:column="26">strcasecmp<pos:position pos:line="38" pos:column="36"/></name><argument_list pos:line="38" pos:column="36">(<argument><expr><name pos:line="38" pos:column="37">new_encoding<pos:position pos:line="38" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="51">"gzip"<pos:position pos:line="38" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="58"/></argument_list></call>
                        <operator pos:line="39" pos:column="25">||<pos:position pos:line="39" pos:column="27"/></operator> <operator pos:line="39" pos:column="28">!<pos:position pos:line="39" pos:column="29"/></operator><call><name pos:line="39" pos:column="29">strcasecmp<pos:position pos:line="39" pos:column="39"/></name><argument_list pos:line="39" pos:column="39">(<argument><expr><name pos:line="39" pos:column="40">new_encoding<pos:position pos:line="39" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="54">"x-gzip"<pos:position pos:line="39" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="64"/></condition><then pos:line="39" pos:column="64"> <block pos:line="39" pos:column="65">{
                        <expr_stmt><expr><name pos:line="40" pos:column="25">found<pos:position pos:line="40" pos:column="30"/></name> <operator pos:line="40" pos:column="31">=<pos:position pos:line="40" pos:column="32"/></operator> <literal type="number" pos:line="40" pos:column="33">1<pos:position pos:line="40" pos:column="34"/></literal></expr>;<pos:position pos:line="40" pos:column="35"/></expr_stmt>
                        <if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><name pos:line="41" pos:column="29">hdrs<pos:position pos:line="41" pos:column="33"/></name></expr>)<pos:position pos:line="41" pos:column="34"/></condition><then pos:line="41" pos:column="34"> <block pos:line="41" pos:column="35">{
                            <expr_stmt><expr><call><name pos:line="42" pos:column="29">apr_table_unset<pos:position pos:line="42" pos:column="44"/></name><argument_list pos:line="42" pos:column="44">(<argument><expr><name pos:line="42" pos:column="45">hdrs<pos:position pos:line="42" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="51">"Content-Encoding"<pos:position pos:line="42" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="71"/></expr_stmt>
                        }<pos:position pos:line="43" pos:column="26"/></block></then>
                        <else pos:line="44" pos:column="25">else <block pos:line="44" pos:column="30">{
                            <expr_stmt><expr><name><name pos:line="45" pos:column="29">r<pos:position pos:line="45" pos:column="30"/></name><operator pos:line="45" pos:column="30">-&gt;<pos:position pos:line="45" pos:column="35"/></operator><name pos:line="45" pos:column="32">content_encoding<pos:position pos:line="45" pos:column="48"/></name></name> <operator pos:line="45" pos:column="49">=<pos:position pos:line="45" pos:column="50"/></operator> <name pos:line="45" pos:column="51">NULL<pos:position pos:line="45" pos:column="55"/></name></expr>;<pos:position pos:line="45" pos:column="56"/></expr_stmt>
                        }<pos:position pos:line="46" pos:column="26"/></block></else></if>
                    }<pos:position pos:line="47" pos:column="22"/></block></then></if>
                    <break pos:line="48" pos:column="21">break;<pos:position pos:line="48" pos:column="27"/></break> <comment type="block" pos:line="48" pos:column="28">/* seen all tokens */</comment>
                }<pos:position pos:line="49" pos:column="18"/></block></then></if>
                <for pos:line="50" pos:column="17">for <control pos:line="50" pos:column="21">(<init><expr><name pos:line="50" pos:column="22">ptr<pos:position pos:line="50" pos:column="25"/></name><operator pos:line="50" pos:column="25">=<pos:position pos:line="50" pos:column="26"/></operator><name pos:line="50" pos:column="26">token<pos:position pos:line="50" pos:column="31"/></name><operator pos:line="50" pos:column="31">+<pos:position pos:line="50" pos:column="32"/></operator><literal type="number" pos:line="50" pos:column="32">1<pos:position pos:line="50" pos:column="33"/></literal></expr>;<pos:position pos:line="50" pos:column="34"/></init> <condition><expr><call><name pos:line="50" pos:column="35">apr_isspace<pos:position pos:line="50" pos:column="46"/></name><argument_list pos:line="50" pos:column="46">(<argument><expr><operator pos:line="50" pos:column="47">*<pos:position pos:line="50" pos:column="48"/></operator><name pos:line="50" pos:column="48">ptr<pos:position pos:line="50" pos:column="51"/></name></expr></argument>)<pos:position pos:line="50" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="53"/></condition> <incr><expr><operator pos:line="50" pos:column="54">++<pos:position pos:line="50" pos:column="56"/></operator><name pos:line="50" pos:column="56">ptr<pos:position pos:line="50" pos:column="59"/></name></expr></incr>)<pos:position pos:line="50" pos:column="60"/></control><block type="pseudo"><empty_stmt pos:line="50" pos:column="60">;<pos:position pos:line="50" pos:column="61"/></empty_stmt></block></for>
                <if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><operator pos:line="51" pos:column="21">!<pos:position pos:line="51" pos:column="22"/></operator><call><name pos:line="51" pos:column="22">strcasecmp<pos:position pos:line="51" pos:column="32"/></name><argument_list pos:line="51" pos:column="32">(<argument><expr><name pos:line="51" pos:column="33">ptr<pos:position pos:line="51" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="38">"gzip"<pos:position pos:line="51" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="45"/></argument_list></call>
                    <operator pos:line="52" pos:column="21">||<pos:position pos:line="52" pos:column="23"/></operator> <operator pos:line="52" pos:column="24">!<pos:position pos:line="52" pos:column="25"/></operator><call><name pos:line="52" pos:column="25">strcasecmp<pos:position pos:line="52" pos:column="35"/></name><argument_list pos:line="52" pos:column="35">(<argument><expr><name pos:line="52" pos:column="36">ptr<pos:position pos:line="52" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="41">"x-gzip"<pos:position pos:line="52" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="51"/></condition><then pos:line="52" pos:column="51"> <block pos:line="52" pos:column="52">{
                    <expr_stmt><expr><operator pos:line="53" pos:column="21">*<pos:position pos:line="53" pos:column="22"/></operator><name pos:line="53" pos:column="22">token<pos:position pos:line="53" pos:column="27"/></name> <operator pos:line="53" pos:column="28">=<pos:position pos:line="53" pos:column="29"/></operator> <literal type="char" pos:line="53" pos:column="30">'\0'<pos:position pos:line="53" pos:column="34"/></literal></expr>;<pos:position pos:line="53" pos:column="35"/></expr_stmt>
                    <if pos:line="54" pos:column="21">if <condition pos:line="54" pos:column="24">(<expr><name pos:line="54" pos:column="25">hdrs<pos:position pos:line="54" pos:column="29"/></name></expr>)<pos:position pos:line="54" pos:column="30"/></condition><then pos:line="54" pos:column="30"> <block pos:line="54" pos:column="31">{
                        <expr_stmt><expr><call><name pos:line="55" pos:column="25">apr_table_setn<pos:position pos:line="55" pos:column="39"/></name><argument_list pos:line="55" pos:column="39">(<argument><expr><name pos:line="55" pos:column="40">hdrs<pos:position pos:line="55" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="46">"Content-Encoding"<pos:position pos:line="55" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="66">new_encoding<pos:position pos:line="55" pos:column="78"/></name></expr></argument>)<pos:position pos:line="55" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="80"/></expr_stmt>
                    }<pos:position pos:line="56" pos:column="22"/></block></then>
                    <else pos:line="57" pos:column="21">else <block pos:line="57" pos:column="26">{
                        <expr_stmt><expr><name><name pos:line="58" pos:column="25">r<pos:position pos:line="58" pos:column="26"/></name><operator pos:line="58" pos:column="26">-&gt;<pos:position pos:line="58" pos:column="31"/></operator><name pos:line="58" pos:column="28">content_encoding<pos:position pos:line="58" pos:column="44"/></name></name> <operator pos:line="58" pos:column="45">=<pos:position pos:line="58" pos:column="46"/></operator> <name pos:line="58" pos:column="47">new_encoding<pos:position pos:line="58" pos:column="59"/></name></expr>;<pos:position pos:line="58" pos:column="60"/></expr_stmt>
                    }<pos:position pos:line="59" pos:column="22"/></block></else></if>
                    <expr_stmt><expr><name pos:line="60" pos:column="21">found<pos:position pos:line="60" pos:column="26"/></name> <operator pos:line="60" pos:column="27">=<pos:position pos:line="60" pos:column="28"/></operator> <literal type="number" pos:line="60" pos:column="29">1<pos:position pos:line="60" pos:column="30"/></literal></expr>;<pos:position pos:line="60" pos:column="31"/></expr_stmt>
                }<pos:position pos:line="61" pos:column="18"/></block></then>
                <elseif pos:line="62" pos:column="17">else <if pos:line="62" pos:column="22">if <condition pos:line="62" pos:column="25">(<expr><operator pos:line="62" pos:column="26">!<pos:position pos:line="62" pos:column="27"/></operator><name><name pos:line="62" pos:column="27">ptr<pos:position pos:line="62" pos:column="30"/></name><index pos:line="62" pos:column="30">[<expr><literal type="number" pos:line="62" pos:column="31">0<pos:position pos:line="62" pos:column="32"/></literal></expr>]<pos:position pos:line="62" pos:column="33"/></index></name> <operator pos:line="62" pos:column="34">||<pos:position pos:line="62" pos:column="36"/></operator> <operator pos:line="62" pos:column="37">!<pos:position pos:line="62" pos:column="38"/></operator><call><name pos:line="62" pos:column="38">strcasecmp<pos:position pos:line="62" pos:column="48"/></name><argument_list pos:line="62" pos:column="48">(<argument><expr><name pos:line="62" pos:column="49">ptr<pos:position pos:line="62" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="54">"identity"<pos:position pos:line="62" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="66"/></condition><then pos:line="62" pos:column="66"> <block pos:line="62" pos:column="67">{
                    <expr_stmt><expr><operator pos:line="63" pos:column="21">*<pos:position pos:line="63" pos:column="22"/></operator><name pos:line="63" pos:column="22">token<pos:position pos:line="63" pos:column="27"/></name> <operator pos:line="63" pos:column="28">=<pos:position pos:line="63" pos:column="29"/></operator> <literal type="char" pos:line="63" pos:column="30">'\0'<pos:position pos:line="63" pos:column="34"/></literal></expr>;<pos:position pos:line="63" pos:column="35"/></expr_stmt>
                    <continue pos:line="64" pos:column="21">continue;<pos:position pos:line="64" pos:column="30"/></continue> <comment type="block" pos:line="64" pos:column="31">/* strip the token and find the next one */</comment>
                }<pos:position pos:line="65" pos:column="18"/></block></then></if></elseif></if>
                <break pos:line="66" pos:column="17">break;<pos:position pos:line="66" pos:column="23"/></break> <comment type="block" pos:line="66" pos:column="24">/* found a non-identity token */</comment>
            }<pos:position pos:line="67" pos:column="14"/></block></for>
        }<pos:position pos:line="68" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="70" pos:column="5">/*
     * If we have dealt with the headers above but content_encoding was set
     * before sync it with the new value in the hdrs table as
     * r-&gt;content_encoding takes precedence later on in the http_header_filter
     * and hence would destroy what we have just set in the hdrs table.
     */</comment>
    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><name pos:line="76" pos:column="9">hdrs<pos:position pos:line="76" pos:column="13"/></name> <operator pos:line="76" pos:column="14">&amp;&amp;<pos:position pos:line="76" pos:column="24"/></operator> <name><name pos:line="76" pos:column="17">r<pos:position pos:line="76" pos:column="18"/></name><operator pos:line="76" pos:column="18">-&gt;<pos:position pos:line="76" pos:column="23"/></operator><name pos:line="76" pos:column="20">content_encoding<pos:position pos:line="76" pos:column="36"/></name></name></expr>)<pos:position pos:line="76" pos:column="37"/></condition><then pos:line="76" pos:column="37"> <block pos:line="76" pos:column="38">{
        <expr_stmt><expr><name><name pos:line="77" pos:column="9">r<pos:position pos:line="77" pos:column="10"/></name><operator pos:line="77" pos:column="10">-&gt;<pos:position pos:line="77" pos:column="15"/></operator><name pos:line="77" pos:column="12">content_encoding<pos:position pos:line="77" pos:column="28"/></name></name> <operator pos:line="77" pos:column="29">=<pos:position pos:line="77" pos:column="30"/></operator> <call><name pos:line="77" pos:column="31">apr_table_get<pos:position pos:line="77" pos:column="44"/></name><argument_list pos:line="77" pos:column="44">(<argument><expr><name pos:line="77" pos:column="45">hdrs<pos:position pos:line="77" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="51">"Content-Encoding"<pos:position pos:line="77" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="71"/></expr_stmt>
    }<pos:position pos:line="78" pos:column="6"/></block></then></if>
    <return pos:line="79" pos:column="5">return <expr><name pos:line="79" pos:column="12">found<pos:position pos:line="79" pos:column="17"/></name></expr>;<pos:position pos:line="79" pos:column="18"/></return>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
