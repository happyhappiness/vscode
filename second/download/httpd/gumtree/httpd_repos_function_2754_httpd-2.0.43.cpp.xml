<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2754_httpd-2.0.43.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">proc_mutex_posix_create<pos:position pos:line="1" pos:column="44"/></name><parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><name pos:line="1" pos:column="45">apr_proc_mutex_t<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">new_mutex<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
                                            <parameter><decl><type><specifier pos:line="2" pos:column="45">const<pos:position pos:line="2" pos:column="50"/></specifier> <name pos:line="2" pos:column="51">char<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">fname<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">sem_t<pos:position pos:line="4" pos:column="10"/></name> <modifier pos:line="4" pos:column="11">*<pos:position pos:line="4" pos:column="12"/></modifier></type><name pos:line="4" pos:column="12">psem<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">stat<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">semname<pos:position pos:line="6" pos:column="17"/></name><index pos:line="6" pos:column="17">[<expr><literal type="number" pos:line="6" pos:column="18">14<pos:position pos:line="6" pos:column="20"/></literal></expr>]<pos:position pos:line="6" pos:column="21"/></index></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_time_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">now<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">unsigned<pos:position pos:line="8" pos:column="13"/></name> <name pos:line="8" pos:column="14">long<pos:position pos:line="8" pos:column="18"/></name></type> <name pos:line="8" pos:column="19">epoch<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
    
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">new_mutex<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">-&gt;<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="16">interproc<pos:position pos:line="10" pos:column="25"/></name></name> <operator pos:line="10" pos:column="26">=<pos:position pos:line="10" pos:column="27"/></operator> <call><name pos:line="10" pos:column="28">apr_palloc<pos:position pos:line="10" pos:column="38"/></name><argument_list pos:line="10" pos:column="38">(<argument><expr><name><name pos:line="10" pos:column="39">new_mutex<pos:position pos:line="10" pos:column="48"/></name><operator pos:line="10" pos:column="48">-&gt;<pos:position pos:line="10" pos:column="53"/></operator><name pos:line="10" pos:column="50">pool<pos:position pos:line="10" pos:column="54"/></name></name></expr></argument>,
                                      <argument><expr><sizeof pos:line="11" pos:column="39">sizeof<argument_list pos:line="11" pos:column="45">(<argument><expr><operator pos:line="11" pos:column="46">*<pos:position pos:line="11" pos:column="47"/></operator><name><name pos:line="11" pos:column="47">new_mutex<pos:position pos:line="11" pos:column="56"/></name><operator pos:line="11" pos:column="56">-&gt;<pos:position pos:line="11" pos:column="61"/></operator><name pos:line="11" pos:column="58">interproc<pos:position pos:line="11" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="70"/></expr_stmt>
    <comment type="block" pos:line="12" pos:column="5">/*
     * This bogusness is to follow what appears to be the
     * lowest common denominator in Posix semaphore naming:
     *   - start with '/'
     *   - be at most 14 chars
     *   - be unique and not match anything on the filesystem
     *
     * Because of this, we ignore fname and craft our own.
     *
     * FIXME: There is a small window of opportunity where
     * instead of getting a new semaphore descriptor, we get
     * a previously obtained one. This can happen if the requests
     * are made at the "same time" (within a second, due to the
     * apr_time_now() call) and in the small span of time between
     * the sem_open and the sem_unlink. Use of O_EXCL does not
     * help here however...
     */</comment>
    <expr_stmt><expr><name pos:line="29" pos:column="5">now<pos:position pos:line="29" pos:column="8"/></name> <operator pos:line="29" pos:column="9">=<pos:position pos:line="29" pos:column="10"/></operator> <call><name pos:line="29" pos:column="11">apr_time_now<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">()<pos:position pos:line="29" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="30" pos:column="5">epoch<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">=<pos:position pos:line="30" pos:column="12"/></operator> <call><name pos:line="30" pos:column="13">apr_time_sec<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr><name pos:line="30" pos:column="26">now<pos:position pos:line="30" pos:column="29"/></name></expr></argument>)<pos:position pos:line="30" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">apr_snprintf<pos:position pos:line="31" pos:column="17"/></name><argument_list pos:line="31" pos:column="17">(<argument><expr><name pos:line="31" pos:column="18">semname<pos:position pos:line="31" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="27">sizeof<argument_list pos:line="31" pos:column="33">(<argument><expr><name pos:line="31" pos:column="34">semname<pos:position pos:line="31" pos:column="41"/></name></expr></argument>)<pos:position pos:line="31" pos:column="42"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="44">"/ApR.%lx"<pos:position pos:line="31" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="56">epoch<pos:position pos:line="31" pos:column="61"/></name></expr></argument>)<pos:position pos:line="31" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><name pos:line="32" pos:column="5">psem<pos:position pos:line="32" pos:column="9"/></name> <operator pos:line="32" pos:column="10">=<pos:position pos:line="32" pos:column="11"/></operator> <call><name pos:line="32" pos:column="12">sem_open<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><operator pos:line="32" pos:column="21">(<pos:position pos:line="32" pos:column="22"/></operator><specifier pos:line="32" pos:column="22">const<pos:position pos:line="32" pos:column="27"/></specifier> <name pos:line="32" pos:column="28">char<pos:position pos:line="32" pos:column="32"/></name> <operator pos:line="32" pos:column="33">*<pos:position pos:line="32" pos:column="34"/></operator><operator pos:line="32" pos:column="34">)<pos:position pos:line="32" pos:column="35"/></operator> <name pos:line="32" pos:column="36">semname<pos:position pos:line="32" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="45">O_CREAT<pos:position pos:line="32" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="54">0644<pos:position pos:line="32" pos:column="58"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="60">1<pos:position pos:line="32" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="63"/></expr_stmt>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">psem<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">==<pos:position pos:line="34" pos:column="16"/></operator> <operator pos:line="34" pos:column="17">(<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="18">sem_t<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">*<pos:position pos:line="34" pos:column="25"/></operator><operator pos:line="34" pos:column="25">)<pos:position pos:line="34" pos:column="26"/></operator><name pos:line="34" pos:column="26">SEM_FAILED<pos:position pos:line="34" pos:column="36"/></name></expr>)<pos:position pos:line="34" pos:column="37"/></condition><then pos:line="34" pos:column="37"> <block pos:line="34" pos:column="38">{
        <expr_stmt><expr><name pos:line="35" pos:column="9">stat<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">=<pos:position pos:line="35" pos:column="15"/></operator> <name pos:line="35" pos:column="16">errno<pos:position pos:line="35" pos:column="21"/></name></expr>;<pos:position pos:line="35" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">proc_mutex_posix_cleanup<pos:position pos:line="36" pos:column="33"/></name><argument_list pos:line="36" pos:column="33">(<argument><expr><name pos:line="36" pos:column="34">new_mutex<pos:position pos:line="36" pos:column="43"/></name></expr></argument>)<pos:position pos:line="36" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="45"/></expr_stmt>
        <return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">stat<pos:position pos:line="37" pos:column="20"/></name></expr>;<pos:position pos:line="37" pos:column="21"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="39" pos:column="5">/* Ahhh. The joys of Posix sems. Predelete it... */</comment>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">sem_unlink<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><operator pos:line="40" pos:column="16">(<pos:position pos:line="40" pos:column="17"/></operator><specifier pos:line="40" pos:column="17">const<pos:position pos:line="40" pos:column="22"/></specifier> <name pos:line="40" pos:column="23">char<pos:position pos:line="40" pos:column="27"/></name> <operator pos:line="40" pos:column="28">*<pos:position pos:line="40" pos:column="29"/></operator><operator pos:line="40" pos:column="29">)<pos:position pos:line="40" pos:column="30"/></operator> <name pos:line="40" pos:column="31">semname<pos:position pos:line="40" pos:column="38"/></name></expr></argument>)<pos:position pos:line="40" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="41" pos:column="5">new_mutex<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">-&gt;<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="16">interproc<pos:position pos:line="41" pos:column="25"/></name><operator pos:line="41" pos:column="25">-&gt;<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="27">filedes<pos:position pos:line="41" pos:column="34"/></name></name> <operator pos:line="41" pos:column="35">=<pos:position pos:line="41" pos:column="36"/></operator> <operator pos:line="41" pos:column="37">(<pos:position pos:line="41" pos:column="38"/></operator><name pos:line="41" pos:column="38">int<pos:position pos:line="41" pos:column="41"/></name><operator pos:line="41" pos:column="41">)<pos:position pos:line="41" pos:column="42"/></operator><name pos:line="41" pos:column="42">psem<pos:position pos:line="41" pos:column="46"/></name></expr>;<pos:position pos:line="41" pos:column="47"/></expr_stmt>	<comment type="block" pos:line="41" pos:column="49">/* Ugg */</comment>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">apr_pool_cleanup_register<pos:position pos:line="42" pos:column="30"/></name><argument_list pos:line="42" pos:column="30">(<argument><expr><name><name pos:line="42" pos:column="31">new_mutex<pos:position pos:line="42" pos:column="40"/></name><operator pos:line="42" pos:column="40">-&gt;<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="42">pool<pos:position pos:line="42" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="48">(<pos:position pos:line="42" pos:column="49"/></operator><name pos:line="42" pos:column="49">void<pos:position pos:line="42" pos:column="53"/></name> <operator pos:line="42" pos:column="54">*<pos:position pos:line="42" pos:column="55"/></operator><operator pos:line="42" pos:column="55">)<pos:position pos:line="42" pos:column="56"/></operator><name pos:line="42" pos:column="56">new_mutex<pos:position pos:line="42" pos:column="65"/></name></expr></argument>,
                              <argument><expr><name pos:line="43" pos:column="31">proc_mutex_posix_cleanup<pos:position pos:line="43" pos:column="55"/></name></expr></argument>, 
                              <argument><expr><name pos:line="44" pos:column="31">apr_pool_cleanup_null<pos:position pos:line="44" pos:column="52"/></name></expr></argument>)<pos:position pos:line="44" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="54"/></expr_stmt>
    <return pos:line="45" pos:column="5">return <expr><name pos:line="45" pos:column="12">APR_SUCCESS<pos:position pos:line="45" pos:column="23"/></name></expr>;<pos:position pos:line="45" pos:column="24"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
