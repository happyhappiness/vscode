<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_221_httpd-2.0.55.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">dav_error<pos:position pos:line="1" pos:column="17"/></name> <modifier pos:line="1" pos:column="18">*<pos:position pos:line="1" pos:column="19"/></modifier></type> <name pos:line="1" pos:column="20">dav_dbm_open<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">apr_pool_t<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type> <name pos:line="1" pos:column="46">p<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">dav_resource<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">resource<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="2" pos:column="33">int<pos:position pos:line="2" pos:column="36"/></name></type> <name pos:line="2" pos:column="37">ro<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">dav_db<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier><modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">pdb<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">dirpath<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">fname<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">pathname<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* Get directory and filename for resource */</comment>
    <comment type="block" pos:line="9" pos:column="5">/* ### should test this result value... */</comment>
    <expr_stmt><expr><operator pos:line="10" pos:column="5">(<pos:position pos:line="10" pos:column="6"/></operator><name pos:line="10" pos:column="6">void<pos:position pos:line="10" pos:column="10"/></name><operator pos:line="10" pos:column="10">)<pos:position pos:line="10" pos:column="11"/></operator> <call><name pos:line="10" pos:column="12">dav_fs_dir_file_name<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">(<argument><expr><name pos:line="10" pos:column="33">resource<pos:position pos:line="10" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="43">&amp;<pos:position pos:line="10" pos:column="48"/></operator><name pos:line="10" pos:column="44">dirpath<pos:position pos:line="10" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="53">&amp;<pos:position pos:line="10" pos:column="58"/></operator><name pos:line="10" pos:column="54">fname<pos:position pos:line="10" pos:column="59"/></name></expr></argument>)<pos:position pos:line="10" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="61"/></expr_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* If not opening read-only, ensure the state dir exists */</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">ro<pos:position pos:line="13" pos:column="12"/></name></expr>)<pos:position pos:line="13" pos:column="13"/></condition><then pos:line="13" pos:column="13"> <block pos:line="13" pos:column="14">{
        <comment type="block" pos:line="14" pos:column="9">/* ### what are the perf implications of always checking this? */</comment>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">dav_fs_ensure_state_dir<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">p<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="36">dirpath<pos:position pos:line="15" pos:column="43"/></name></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="18" pos:column="5">pathname<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <call><name pos:line="18" pos:column="16">apr_pstrcat<pos:position pos:line="18" pos:column="27"/></name><argument_list pos:line="18" pos:column="27">(<argument><expr><name pos:line="18" pos:column="28">p<pos:position pos:line="18" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="31">dirpath<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="40">"/"<pos:position pos:line="18" pos:column="43"/></literal> <name pos:line="18" pos:column="44">DAV_FS_STATE_DIR<pos:position pos:line="18" pos:column="60"/></name> <literal type="string" pos:line="18" pos:column="61">"/"<pos:position pos:line="18" pos:column="64"/></literal></expr></argument>,
                              <argument><expr><ternary><condition><expr><name pos:line="19" pos:column="31">fname<pos:position pos:line="19" pos:column="36"/></name></expr> ?<pos:position pos:line="19" pos:column="38"/></condition><then pos:line="19" pos:column="38"> <expr><name pos:line="19" pos:column="39">fname<pos:position pos:line="19" pos:column="44"/></name></expr> <pos:position pos:line="19" pos:column="45"/></then><else pos:line="19" pos:column="45">: <expr><name pos:line="19" pos:column="47">DAV_FS_STATE_FILE_FOR_DIR<pos:position pos:line="19" pos:column="72"/></name></expr></else></ternary></expr></argument>,
                              <argument><expr><name pos:line="20" pos:column="31">NULL<pos:position pos:line="20" pos:column="35"/></name></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>

    <comment type="block" pos:line="22" pos:column="5">/* ### readers cannot open while a writer has this open; we should
       ### perform a few retries with random pauses. */</comment>

    <comment type="block" pos:line="25" pos:column="5">/* ### do we need to deal with the umask? */</comment>

    <return pos:line="27" pos:column="5">return <expr><call><name pos:line="27" pos:column="12">dav_dbm_open_direct<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">p<pos:position pos:line="27" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="35">pathname<pos:position pos:line="27" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="45">ro<pos:position pos:line="27" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="49">pdb<pos:position pos:line="27" pos:column="52"/></name></expr></argument>)<pos:position pos:line="27" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="54"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
