<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2692_httpd-2.0.44.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">server<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">void<pos:position pos:line="1" pos:column="23"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="24"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_status_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">rv<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_socket_t<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">sock<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_pool_t<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">p<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">buf<pos:position pos:line="6" pos:column="13"/></name><index pos:line="6" pos:column="13">[<expr><literal type="number" pos:line="6" pos:column="14">120<pos:position pos:line="6" pos:column="17"/></literal></expr>]<pos:position pos:line="6" pos:column="18"/></index></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">i<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_socket_t<pos:position pos:line="8" pos:column="17"/></name> <modifier pos:line="8" pos:column="18">*<pos:position pos:line="8" pos:column="19"/></modifier></type><name pos:line="8" pos:column="19">newsock<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><name pos:line="8" pos:column="29">NULL<pos:position pos:line="8" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_size_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">bytes_read<pos:position pos:line="9" pos:column="26"/></name></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_sockaddr_t<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">localsa<pos:position pos:line="10" pos:column="28"/></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">family<pos:position pos:line="11" pos:column="15"/></name></decl>;<pos:position pos:line="11" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="13" pos:column="5">family<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <name pos:line="13" pos:column="14">APR_UNSPEC<pos:position pos:line="13" pos:column="24"/></name></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">apr_setup<pos:position pos:line="14" pos:column="14"/></name><argument_list pos:line="14" pos:column="14">(<argument><expr><operator pos:line="14" pos:column="15">&amp;<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="16">p<pos:position pos:line="14" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="19">&amp;<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="20">sock<pos:position pos:line="14" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="26">&amp;<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="27">family<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>

    <expr_stmt><expr><name pos:line="16" pos:column="5">rv<pos:position pos:line="16" pos:column="7"/></name> <operator pos:line="16" pos:column="8">=<pos:position pos:line="16" pos:column="9"/></operator> <call><name pos:line="16" pos:column="10">apr_socket_opt_set<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">sock<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="35">APR_SO_REUSEADDR<pos:position pos:line="16" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="53">1<pos:position pos:line="16" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="56"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">rv<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">!=<pos:position pos:line="17" pos:column="14"/></operator> <name pos:line="17" pos:column="15">APR_SUCCESS<pos:position pos:line="17" pos:column="26"/></name></expr>)<pos:position pos:line="17" pos:column="27"/></condition><then pos:line="17" pos:column="27"> <block pos:line="17" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">fprintf<pos:position pos:line="18" pos:column="16"/></name><argument_list pos:line="18" pos:column="16">(<argument><expr><name pos:line="18" pos:column="17">stderr<pos:position pos:line="18" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="25">"apr_socket_opt_set()-&gt;%d/%s\n"<pos:position pos:line="18" pos:column="59"/></literal></expr></argument>,
                <argument><expr><name pos:line="19" pos:column="17">rv<pos:position pos:line="19" pos:column="19"/></name></expr></argument>,
		<argument><expr><call><name pos:line="20" pos:column="17">apr_strerror<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">rv<pos:position pos:line="20" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="34">buf<pos:position pos:line="20" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="39">sizeof <name pos:line="20" pos:column="46">buf<pos:position pos:line="20" pos:column="49"/></name></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">exit<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><literal type="number" pos:line="21" pos:column="14">1<pos:position pos:line="21" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="24" pos:column="5">rv<pos:position pos:line="24" pos:column="7"/></name> <operator pos:line="24" pos:column="8">=<pos:position pos:line="24" pos:column="9"/></operator> <call><name pos:line="24" pos:column="10">apr_sockaddr_info_get<pos:position pos:line="24" pos:column="31"/></name><argument_list pos:line="24" pos:column="31">(<argument><expr><operator pos:line="24" pos:column="32">&amp;<pos:position pos:line="24" pos:column="37"/></operator><name pos:line="24" pos:column="33">localsa<pos:position pos:line="24" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="42">NULL<pos:position pos:line="24" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="48">family<pos:position pos:line="24" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="56">TESTSF_PORT<pos:position pos:line="24" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="69">0<pos:position pos:line="24" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="72">p<pos:position pos:line="24" pos:column="73"/></name></expr></argument>)<pos:position pos:line="24" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="75"/></expr_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">rv<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">!=<pos:position pos:line="25" pos:column="14"/></operator> <name pos:line="25" pos:column="15">APR_SUCCESS<pos:position pos:line="25" pos:column="26"/></name></expr>)<pos:position pos:line="25" pos:column="27"/></condition><then pos:line="25" pos:column="27"> <block pos:line="25" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">fprintf<pos:position pos:line="26" pos:column="16"/></name><argument_list pos:line="26" pos:column="16">(<argument><expr><name pos:line="26" pos:column="17">stderr<pos:position pos:line="26" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="25">"apr_sockaddr_info_get()-&gt;%d/%s\n"<pos:position pos:line="26" pos:column="62"/></literal></expr></argument>,
                <argument><expr><name pos:line="27" pos:column="17">rv<pos:position pos:line="27" pos:column="19"/></name></expr></argument>,
		<argument><expr><call><name pos:line="28" pos:column="17">apr_strerror<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">rv<pos:position pos:line="28" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="34">buf<pos:position pos:line="28" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="39">sizeof <name pos:line="28" pos:column="46">buf<pos:position pos:line="28" pos:column="49"/></name></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">exit<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">(<argument><expr><literal type="number" pos:line="29" pos:column="14">1<pos:position pos:line="29" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="32" pos:column="5">rv<pos:position pos:line="32" pos:column="7"/></name> <operator pos:line="32" pos:column="8">=<pos:position pos:line="32" pos:column="9"/></operator> <call><name pos:line="32" pos:column="10">apr_socket_bind<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">(<argument><expr><name pos:line="32" pos:column="26">sock<pos:position pos:line="32" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="32">localsa<pos:position pos:line="32" pos:column="39"/></name></expr></argument>)<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">rv<pos:position pos:line="33" pos:column="11"/></name> <operator pos:line="33" pos:column="12">!=<pos:position pos:line="33" pos:column="14"/></operator> <name pos:line="33" pos:column="15">APR_SUCCESS<pos:position pos:line="33" pos:column="26"/></name></expr>)<pos:position pos:line="33" pos:column="27"/></condition><then pos:line="33" pos:column="27"> <block pos:line="33" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">fprintf<pos:position pos:line="34" pos:column="16"/></name><argument_list pos:line="34" pos:column="16">(<argument><expr><name pos:line="34" pos:column="17">stderr<pos:position pos:line="34" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="25">"apr_socket_bind()-&gt;%d/%s\n"<pos:position pos:line="34" pos:column="56"/></literal></expr></argument>,
                <argument><expr><name pos:line="35" pos:column="17">rv<pos:position pos:line="35" pos:column="19"/></name></expr></argument>,
		<argument><expr><call><name pos:line="36" pos:column="17">apr_strerror<pos:position pos:line="36" pos:column="29"/></name><argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">rv<pos:position pos:line="36" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="34">buf<pos:position pos:line="36" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="39">sizeof <name pos:line="36" pos:column="46">buf<pos:position pos:line="36" pos:column="49"/></name></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">exit<pos:position pos:line="37" pos:column="13"/></name><argument_list pos:line="37" pos:column="13">(<argument><expr><literal type="number" pos:line="37" pos:column="14">1<pos:position pos:line="37" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="40" pos:column="5">rv<pos:position pos:line="40" pos:column="7"/></name> <operator pos:line="40" pos:column="8">=<pos:position pos:line="40" pos:column="9"/></operator> <call><name pos:line="40" pos:column="10">apr_socket_listen<pos:position pos:line="40" pos:column="27"/></name><argument_list pos:line="40" pos:column="27">(<argument><expr><name pos:line="40" pos:column="28">sock<pos:position pos:line="40" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="34">5<pos:position pos:line="40" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">rv<pos:position pos:line="41" pos:column="11"/></name> <operator pos:line="41" pos:column="12">!=<pos:position pos:line="41" pos:column="14"/></operator> <name pos:line="41" pos:column="15">APR_SUCCESS<pos:position pos:line="41" pos:column="26"/></name></expr>)<pos:position pos:line="41" pos:column="27"/></condition><then pos:line="41" pos:column="27"> <block pos:line="41" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">fprintf<pos:position pos:line="42" pos:column="16"/></name><argument_list pos:line="42" pos:column="16">(<argument><expr><name pos:line="42" pos:column="17">stderr<pos:position pos:line="42" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="25">"apr_socket_listen()-&gt;%d/%s\n"<pos:position pos:line="42" pos:column="58"/></literal></expr></argument>,
                <argument><expr><name pos:line="43" pos:column="17">rv<pos:position pos:line="43" pos:column="19"/></name></expr></argument>,
		<argument><expr><call><name pos:line="44" pos:column="17">apr_strerror<pos:position pos:line="44" pos:column="29"/></name><argument_list pos:line="44" pos:column="29">(<argument><expr><name pos:line="44" pos:column="30">rv<pos:position pos:line="44" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="34">buf<pos:position pos:line="44" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="44" pos:column="39">sizeof <name pos:line="44" pos:column="46">buf<pos:position pos:line="44" pos:column="49"/></name></sizeof></expr></argument>)<pos:position pos:line="44" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">exit<pos:position pos:line="45" pos:column="13"/></name><argument_list pos:line="45" pos:column="13">(<argument><expr><literal type="number" pos:line="45" pos:column="14">1<pos:position pos:line="45" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="48" pos:column="5">printf<pos:position pos:line="48" pos:column="11"/></name><argument_list pos:line="48" pos:column="11">(<argument><expr><literal type="string" pos:line="48" pos:column="12">"Waiting for a client to connect...\n"<pos:position pos:line="48" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="52"/></expr_stmt>

    <expr_stmt><expr><name pos:line="50" pos:column="5">rv<pos:position pos:line="50" pos:column="7"/></name> <operator pos:line="50" pos:column="8">=<pos:position pos:line="50" pos:column="9"/></operator> <call><name pos:line="50" pos:column="10">apr_socket_accept<pos:position pos:line="50" pos:column="27"/></name><argument_list pos:line="50" pos:column="27">(<argument><expr><operator pos:line="50" pos:column="28">&amp;<pos:position pos:line="50" pos:column="33"/></operator><name pos:line="50" pos:column="29">newsock<pos:position pos:line="50" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="38">sock<pos:position pos:line="50" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="44">p<pos:position pos:line="50" pos:column="45"/></name></expr></argument>)<pos:position pos:line="50" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="47"/></expr_stmt>
    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><name pos:line="51" pos:column="9">rv<pos:position pos:line="51" pos:column="11"/></name> <operator pos:line="51" pos:column="12">!=<pos:position pos:line="51" pos:column="14"/></operator> <name pos:line="51" pos:column="15">APR_SUCCESS<pos:position pos:line="51" pos:column="26"/></name></expr>)<pos:position pos:line="51" pos:column="27"/></condition><then pos:line="51" pos:column="27"> <block pos:line="51" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">fprintf<pos:position pos:line="52" pos:column="16"/></name><argument_list pos:line="52" pos:column="16">(<argument><expr><name pos:line="52" pos:column="17">stderr<pos:position pos:line="52" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="25">"apr_socket_accept()-&gt;%d/%s\n"<pos:position pos:line="52" pos:column="58"/></literal></expr></argument>,
                <argument><expr><name pos:line="53" pos:column="17">rv<pos:position pos:line="53" pos:column="19"/></name></expr></argument>,
		<argument><expr><call><name pos:line="54" pos:column="17">apr_strerror<pos:position pos:line="54" pos:column="29"/></name><argument_list pos:line="54" pos:column="29">(<argument><expr><name pos:line="54" pos:column="30">rv<pos:position pos:line="54" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="34">buf<pos:position pos:line="54" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="54" pos:column="39">sizeof <name pos:line="54" pos:column="46">buf<pos:position pos:line="54" pos:column="49"/></name></sizeof></expr></argument>)<pos:position pos:line="54" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">exit<pos:position pos:line="55" pos:column="13"/></name><argument_list pos:line="55" pos:column="13">(<argument><expr><literal type="number" pos:line="55" pos:column="14">1<pos:position pos:line="55" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="58" pos:column="5">printf<pos:position pos:line="58" pos:column="11"/></name><argument_list pos:line="58" pos:column="11">(<argument><expr><literal type="string" pos:line="58" pos:column="12">"Processing a client...\n"<pos:position pos:line="58" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="60" pos:column="5">assert<pos:position pos:line="60" pos:column="11"/></name><argument_list pos:line="60" pos:column="11">(<argument><expr><sizeof pos:line="60" pos:column="12">sizeof <name pos:line="60" pos:column="19">buf<pos:position pos:line="60" pos:column="22"/></name></sizeof> <operator pos:line="60" pos:column="23">&gt;<pos:position pos:line="60" pos:column="27"/></operator> <call><name pos:line="60" pos:column="25">strlen<pos:position pos:line="60" pos:column="31"/></name><argument_list pos:line="60" pos:column="31">(<argument><expr><name pos:line="60" pos:column="32">HDR1<pos:position pos:line="60" pos:column="36"/></name></expr></argument>)<pos:position pos:line="60" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="61" pos:column="5">bytes_read<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">=<pos:position pos:line="61" pos:column="17"/></operator> <call><name pos:line="61" pos:column="18">strlen<pos:position pos:line="61" pos:column="24"/></name><argument_list pos:line="61" pos:column="24">(<argument><expr><name pos:line="61" pos:column="25">HDR1<pos:position pos:line="61" pos:column="29"/></name></expr></argument>)<pos:position pos:line="61" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="62" pos:column="5">rv<pos:position pos:line="62" pos:column="7"/></name> <operator pos:line="62" pos:column="8">=<pos:position pos:line="62" pos:column="9"/></operator> <call><name pos:line="62" pos:column="10">apr_socket_recv<pos:position pos:line="62" pos:column="25"/></name><argument_list pos:line="62" pos:column="25">(<argument><expr><name pos:line="62" pos:column="26">newsock<pos:position pos:line="62" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="35">buf<pos:position pos:line="62" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="40">&amp;<pos:position pos:line="62" pos:column="45"/></operator><name pos:line="62" pos:column="41">bytes_read<pos:position pos:line="62" pos:column="51"/></name></expr></argument>)<pos:position pos:line="62" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="53"/></expr_stmt>
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">rv<pos:position pos:line="63" pos:column="11"/></name> <operator pos:line="63" pos:column="12">!=<pos:position pos:line="63" pos:column="14"/></operator> <name pos:line="63" pos:column="15">APR_SUCCESS<pos:position pos:line="63" pos:column="26"/></name></expr>)<pos:position pos:line="63" pos:column="27"/></condition><then pos:line="63" pos:column="27"> <block pos:line="63" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">fprintf<pos:position pos:line="64" pos:column="16"/></name><argument_list pos:line="64" pos:column="16">(<argument><expr><name pos:line="64" pos:column="17">stderr<pos:position pos:line="64" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="25">"apr_socket_recv()-&gt;%d/%s\n"<pos:position pos:line="64" pos:column="56"/></literal></expr></argument>,
                <argument><expr><name pos:line="65" pos:column="17">rv<pos:position pos:line="65" pos:column="19"/></name></expr></argument>,
		<argument><expr><call><name pos:line="66" pos:column="17">apr_strerror<pos:position pos:line="66" pos:column="29"/></name><argument_list pos:line="66" pos:column="29">(<argument><expr><name pos:line="66" pos:column="30">rv<pos:position pos:line="66" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="34">buf<pos:position pos:line="66" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="66" pos:column="39">sizeof <name pos:line="66" pos:column="46">buf<pos:position pos:line="66" pos:column="49"/></name></sizeof></expr></argument>)<pos:position pos:line="66" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="66" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="67" pos:column="9">exit<pos:position pos:line="67" pos:column="13"/></name><argument_list pos:line="67" pos:column="13">(<argument><expr><literal type="number" pos:line="67" pos:column="14">1<pos:position pos:line="67" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if>
    <if pos:line="69" pos:column="5">if <condition pos:line="69" pos:column="8">(<expr><name pos:line="69" pos:column="9">bytes_read<pos:position pos:line="69" pos:column="19"/></name> <operator pos:line="69" pos:column="20">!=<pos:position pos:line="69" pos:column="22"/></operator> <call><name pos:line="69" pos:column="23">strlen<pos:position pos:line="69" pos:column="29"/></name><argument_list pos:line="69" pos:column="29">(<argument><expr><name pos:line="69" pos:column="30">HDR1<pos:position pos:line="69" pos:column="34"/></name></expr></argument>)<pos:position pos:line="69" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="36"/></condition><then pos:line="69" pos:column="36"> <block pos:line="69" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">fprintf<pos:position pos:line="70" pos:column="16"/></name><argument_list pos:line="70" pos:column="16">(<argument><expr><name pos:line="70" pos:column="17">stderr<pos:position pos:line="70" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="25">"wrong data read (1)\n"<pos:position pos:line="70" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">exit<pos:position pos:line="71" pos:column="13"/></name><argument_list pos:line="71" pos:column="13">(<argument><expr><literal type="number" pos:line="71" pos:column="14">1<pos:position pos:line="71" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="72" pos:column="6"/></block></then></if>
    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><call><name pos:line="73" pos:column="9">memcmp<pos:position pos:line="73" pos:column="15"/></name><argument_list pos:line="73" pos:column="15">(<argument><expr><name pos:line="73" pos:column="16">buf<pos:position pos:line="73" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="21">HDR1<pos:position pos:line="73" pos:column="25"/></name></expr></argument>, <argument><expr><call><name pos:line="73" pos:column="27">strlen<pos:position pos:line="73" pos:column="33"/></name><argument_list pos:line="73" pos:column="33">(<argument><expr><name pos:line="73" pos:column="34">HDR1<pos:position pos:line="73" pos:column="38"/></name></expr></argument>)<pos:position pos:line="73" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="73" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="41"/></condition><then pos:line="73" pos:column="41"> <block pos:line="73" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">fprintf<pos:position pos:line="74" pos:column="16"/></name><argument_list pos:line="74" pos:column="16">(<argument><expr><name pos:line="74" pos:column="17">stderr<pos:position pos:line="74" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="25">"wrong data read (2)\n"<pos:position pos:line="74" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">fprintf<pos:position pos:line="75" pos:column="16"/></name><argument_list pos:line="75" pos:column="16">(<argument><expr><name pos:line="75" pos:column="17">stderr<pos:position pos:line="75" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="25">"received: `%.*s'\nexpected: `%s'\n"<pos:position pos:line="75" pos:column="61"/></literal></expr></argument>,
                <argument><expr><operator pos:line="76" pos:column="17">(<pos:position pos:line="76" pos:column="18"/></operator><name pos:line="76" pos:column="18">int<pos:position pos:line="76" pos:column="21"/></name><operator pos:line="76" pos:column="21">)<pos:position pos:line="76" pos:column="22"/></operator><name pos:line="76" pos:column="22">bytes_read<pos:position pos:line="76" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="34">buf<pos:position pos:line="76" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="39">HDR1<pos:position pos:line="76" pos:column="43"/></name></expr></argument>)<pos:position pos:line="76" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">exit<pos:position pos:line="77" pos:column="13"/></name><argument_list pos:line="77" pos:column="13">(<argument><expr><literal type="number" pos:line="77" pos:column="14">1<pos:position pos:line="77" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="78" pos:column="6"/></block></then></if>
        
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">assert<pos:position pos:line="80" pos:column="11"/></name><argument_list pos:line="80" pos:column="11">(<argument><expr><sizeof pos:line="80" pos:column="12">sizeof <name pos:line="80" pos:column="19">buf<pos:position pos:line="80" pos:column="22"/></name></sizeof> <operator pos:line="80" pos:column="23">&gt;<pos:position pos:line="80" pos:column="27"/></operator> <call><name pos:line="80" pos:column="25">strlen<pos:position pos:line="80" pos:column="31"/></name><argument_list pos:line="80" pos:column="31">(<argument><expr><name pos:line="80" pos:column="32">HDR2<pos:position pos:line="80" pos:column="36"/></name></expr></argument>)<pos:position pos:line="80" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="80" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="81" pos:column="5">bytes_read<pos:position pos:line="81" pos:column="15"/></name> <operator pos:line="81" pos:column="16">=<pos:position pos:line="81" pos:column="17"/></operator> <call><name pos:line="81" pos:column="18">strlen<pos:position pos:line="81" pos:column="24"/></name><argument_list pos:line="81" pos:column="24">(<argument><expr><name pos:line="81" pos:column="25">HDR2<pos:position pos:line="81" pos:column="29"/></name></expr></argument>)<pos:position pos:line="81" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="82" pos:column="5">rv<pos:position pos:line="82" pos:column="7"/></name> <operator pos:line="82" pos:column="8">=<pos:position pos:line="82" pos:column="9"/></operator> <call><name pos:line="82" pos:column="10">apr_socket_recv<pos:position pos:line="82" pos:column="25"/></name><argument_list pos:line="82" pos:column="25">(<argument><expr><name pos:line="82" pos:column="26">newsock<pos:position pos:line="82" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="35">buf<pos:position pos:line="82" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="40">&amp;<pos:position pos:line="82" pos:column="45"/></operator><name pos:line="82" pos:column="41">bytes_read<pos:position pos:line="82" pos:column="51"/></name></expr></argument>)<pos:position pos:line="82" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="53"/></expr_stmt>
    <if pos:line="83" pos:column="5">if <condition pos:line="83" pos:column="8">(<expr><name pos:line="83" pos:column="9">rv<pos:position pos:line="83" pos:column="11"/></name> <operator pos:line="83" pos:column="12">!=<pos:position pos:line="83" pos:column="14"/></operator> <name pos:line="83" pos:column="15">APR_SUCCESS<pos:position pos:line="83" pos:column="26"/></name></expr>)<pos:position pos:line="83" pos:column="27"/></condition><then pos:line="83" pos:column="27"> <block pos:line="83" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="84" pos:column="9">fprintf<pos:position pos:line="84" pos:column="16"/></name><argument_list pos:line="84" pos:column="16">(<argument><expr><name pos:line="84" pos:column="17">stderr<pos:position pos:line="84" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="25">"apr_socket_recv()-&gt;%d/%s\n"<pos:position pos:line="84" pos:column="56"/></literal></expr></argument>,
                <argument><expr><name pos:line="85" pos:column="17">rv<pos:position pos:line="85" pos:column="19"/></name></expr></argument>,
		<argument><expr><call><name pos:line="86" pos:column="17">apr_strerror<pos:position pos:line="86" pos:column="29"/></name><argument_list pos:line="86" pos:column="29">(<argument><expr><name pos:line="86" pos:column="30">rv<pos:position pos:line="86" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="34">buf<pos:position pos:line="86" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="86" pos:column="39">sizeof <name pos:line="86" pos:column="46">buf<pos:position pos:line="86" pos:column="49"/></name></sizeof></expr></argument>)<pos:position pos:line="86" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="86" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="87" pos:column="9">exit<pos:position pos:line="87" pos:column="13"/></name><argument_list pos:line="87" pos:column="13">(<argument><expr><literal type="number" pos:line="87" pos:column="14">1<pos:position pos:line="87" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="88" pos:column="6"/></block></then></if>
    <if pos:line="89" pos:column="5">if <condition pos:line="89" pos:column="8">(<expr><name pos:line="89" pos:column="9">bytes_read<pos:position pos:line="89" pos:column="19"/></name> <operator pos:line="89" pos:column="20">!=<pos:position pos:line="89" pos:column="22"/></operator> <call><name pos:line="89" pos:column="23">strlen<pos:position pos:line="89" pos:column="29"/></name><argument_list pos:line="89" pos:column="29">(<argument><expr><name pos:line="89" pos:column="30">HDR2<pos:position pos:line="89" pos:column="34"/></name></expr></argument>)<pos:position pos:line="89" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="89" pos:column="36"/></condition><then pos:line="89" pos:column="36"> <block pos:line="89" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="90" pos:column="9">fprintf<pos:position pos:line="90" pos:column="16"/></name><argument_list pos:line="90" pos:column="16">(<argument><expr><name pos:line="90" pos:column="17">stderr<pos:position pos:line="90" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="25">"wrong data read (3)\n"<pos:position pos:line="90" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="91" pos:column="9">exit<pos:position pos:line="91" pos:column="13"/></name><argument_list pos:line="91" pos:column="13">(<argument><expr><literal type="number" pos:line="91" pos:column="14">1<pos:position pos:line="91" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="92" pos:column="6"/></block></then></if>
    <if pos:line="93" pos:column="5">if <condition pos:line="93" pos:column="8">(<expr><call><name pos:line="93" pos:column="9">memcmp<pos:position pos:line="93" pos:column="15"/></name><argument_list pos:line="93" pos:column="15">(<argument><expr><name pos:line="93" pos:column="16">buf<pos:position pos:line="93" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="21">HDR2<pos:position pos:line="93" pos:column="25"/></name></expr></argument>, <argument><expr><call><name pos:line="93" pos:column="27">strlen<pos:position pos:line="93" pos:column="33"/></name><argument_list pos:line="93" pos:column="33">(<argument><expr><name pos:line="93" pos:column="34">HDR2<pos:position pos:line="93" pos:column="38"/></name></expr></argument>)<pos:position pos:line="93" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="93" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="93" pos:column="41"/></condition><then pos:line="93" pos:column="41"> <block pos:line="93" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="94" pos:column="9">fprintf<pos:position pos:line="94" pos:column="16"/></name><argument_list pos:line="94" pos:column="16">(<argument><expr><name pos:line="94" pos:column="17">stderr<pos:position pos:line="94" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="25">"wrong data read (4)\n"<pos:position pos:line="94" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="95" pos:column="9">fprintf<pos:position pos:line="95" pos:column="16"/></name><argument_list pos:line="95" pos:column="16">(<argument><expr><name pos:line="95" pos:column="17">stderr<pos:position pos:line="95" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="25">"received: `%.*s'\nexpected: `%s'\n"<pos:position pos:line="95" pos:column="61"/></literal></expr></argument>,
                <argument><expr><operator pos:line="96" pos:column="17">(<pos:position pos:line="96" pos:column="18"/></operator><name pos:line="96" pos:column="18">int<pos:position pos:line="96" pos:column="21"/></name><operator pos:line="96" pos:column="21">)<pos:position pos:line="96" pos:column="22"/></operator><name pos:line="96" pos:column="22">bytes_read<pos:position pos:line="96" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="34">buf<pos:position pos:line="96" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="39">HDR2<pos:position pos:line="96" pos:column="43"/></name></expr></argument>)<pos:position pos:line="96" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="97" pos:column="9">exit<pos:position pos:line="97" pos:column="13"/></name><argument_list pos:line="97" pos:column="13">(<argument><expr><literal type="number" pos:line="97" pos:column="14">1<pos:position pos:line="97" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="98" pos:column="6"/></block></then></if>

    <for pos:line="100" pos:column="5">for <control pos:line="100" pos:column="9">(<init><expr><name pos:line="100" pos:column="10">i<pos:position pos:line="100" pos:column="11"/></name> <operator pos:line="100" pos:column="12">=<pos:position pos:line="100" pos:column="13"/></operator> <literal type="number" pos:line="100" pos:column="14">0<pos:position pos:line="100" pos:column="15"/></literal></expr>;<pos:position pos:line="100" pos:column="16"/></init> <condition><expr><name pos:line="100" pos:column="17">i<pos:position pos:line="100" pos:column="18"/></name> <operator pos:line="100" pos:column="19">&lt;<pos:position pos:line="100" pos:column="23"/></operator> <name pos:line="100" pos:column="21">HDR3_LEN<pos:position pos:line="100" pos:column="29"/></name></expr>;<pos:position pos:line="100" pos:column="30"/></condition> <incr><expr><name pos:line="100" pos:column="31">i<pos:position pos:line="100" pos:column="32"/></name><operator pos:line="100" pos:column="32">++<pos:position pos:line="100" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="100" pos:column="35"/></control> <block pos:line="100" pos:column="36">{
        <expr_stmt><expr><name pos:line="101" pos:column="9">bytes_read<pos:position pos:line="101" pos:column="19"/></name> <operator pos:line="101" pos:column="20">=<pos:position pos:line="101" pos:column="21"/></operator> <literal type="number" pos:line="101" pos:column="22">1<pos:position pos:line="101" pos:column="23"/></literal></expr>;<pos:position pos:line="101" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="102" pos:column="9">rv<pos:position pos:line="102" pos:column="11"/></name> <operator pos:line="102" pos:column="12">=<pos:position pos:line="102" pos:column="13"/></operator> <call><name pos:line="102" pos:column="14">apr_socket_recv<pos:position pos:line="102" pos:column="29"/></name><argument_list pos:line="102" pos:column="29">(<argument><expr><name pos:line="102" pos:column="30">newsock<pos:position pos:line="102" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="39">buf<pos:position pos:line="102" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="102" pos:column="44">&amp;<pos:position pos:line="102" pos:column="49"/></operator><name pos:line="102" pos:column="45">bytes_read<pos:position pos:line="102" pos:column="55"/></name></expr></argument>)<pos:position pos:line="102" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="57"/></expr_stmt>
        <if pos:line="103" pos:column="9">if <condition pos:line="103" pos:column="12">(<expr><name pos:line="103" pos:column="13">rv<pos:position pos:line="103" pos:column="15"/></name> <operator pos:line="103" pos:column="16">!=<pos:position pos:line="103" pos:column="18"/></operator> <name pos:line="103" pos:column="19">APR_SUCCESS<pos:position pos:line="103" pos:column="30"/></name></expr>)<pos:position pos:line="103" pos:column="31"/></condition><then pos:line="103" pos:column="31"> <block pos:line="103" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="104" pos:column="13">fprintf<pos:position pos:line="104" pos:column="20"/></name><argument_list pos:line="104" pos:column="20">(<argument><expr><name pos:line="104" pos:column="21">stderr<pos:position pos:line="104" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="104" pos:column="29">"apr_socket_recv()-&gt;%d/%s\n"<pos:position pos:line="104" pos:column="60"/></literal></expr></argument>,
                    <argument><expr><name pos:line="105" pos:column="21">rv<pos:position pos:line="105" pos:column="23"/></name></expr></argument>,
                    <argument><expr><call><name pos:line="106" pos:column="21">apr_strerror<pos:position pos:line="106" pos:column="33"/></name><argument_list pos:line="106" pos:column="33">(<argument><expr><name pos:line="106" pos:column="34">rv<pos:position pos:line="106" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="38">buf<pos:position pos:line="106" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="106" pos:column="43">sizeof <name pos:line="106" pos:column="50">buf<pos:position pos:line="106" pos:column="53"/></name></sizeof></expr></argument>)<pos:position pos:line="106" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="106" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="107" pos:column="13">exit<pos:position pos:line="107" pos:column="17"/></name><argument_list pos:line="107" pos:column="17">(<argument><expr><literal type="number" pos:line="107" pos:column="18">1<pos:position pos:line="107" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="108" pos:column="10"/></block></then></if>
        <if pos:line="109" pos:column="9">if <condition pos:line="109" pos:column="12">(<expr><name pos:line="109" pos:column="13">bytes_read<pos:position pos:line="109" pos:column="23"/></name> <operator pos:line="109" pos:column="24">!=<pos:position pos:line="109" pos:column="26"/></operator> <literal type="number" pos:line="109" pos:column="27">1<pos:position pos:line="109" pos:column="28"/></literal></expr>)<pos:position pos:line="109" pos:column="29"/></condition><then pos:line="109" pos:column="29"> <block pos:line="109" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="110" pos:column="13">fprintf<pos:position pos:line="110" pos:column="20"/></name><argument_list pos:line="110" pos:column="20">(<argument><expr><name pos:line="110" pos:column="21">stderr<pos:position pos:line="110" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="29">"apr_socket_recv()-&gt;%ld bytes instead of 1\n"<pos:position pos:line="110" pos:column="77"/></literal></expr></argument>,
                    <argument><expr><operator pos:line="111" pos:column="21">(<pos:position pos:line="111" pos:column="22"/></operator><name pos:line="111" pos:column="22">long<pos:position pos:line="111" pos:column="26"/></name> <name pos:line="111" pos:column="27">int<pos:position pos:line="111" pos:column="30"/></name><operator pos:line="111" pos:column="30">)<pos:position pos:line="111" pos:column="31"/></operator><name pos:line="111" pos:column="31">bytes_read<pos:position pos:line="111" pos:column="41"/></name></expr></argument>)<pos:position pos:line="111" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="112" pos:column="13">exit<pos:position pos:line="112" pos:column="17"/></name><argument_list pos:line="112" pos:column="17">(<argument><expr><literal type="number" pos:line="112" pos:column="18">1<pos:position pos:line="112" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="113" pos:column="10"/></block></then></if>
        <if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">(<expr><name><name pos:line="114" pos:column="13">buf<pos:position pos:line="114" pos:column="16"/></name><index pos:line="114" pos:column="16">[<expr><literal type="number" pos:line="114" pos:column="17">0<pos:position pos:line="114" pos:column="18"/></literal></expr>]<pos:position pos:line="114" pos:column="19"/></index></name> <operator pos:line="114" pos:column="20">!=<pos:position pos:line="114" pos:column="22"/></operator> <name pos:line="114" pos:column="23">HDR3_CHAR<pos:position pos:line="114" pos:column="32"/></name></expr>)<pos:position pos:line="114" pos:column="33"/></condition><then pos:line="114" pos:column="33"> <block pos:line="114" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="115" pos:column="13">fprintf<pos:position pos:line="115" pos:column="20"/></name><argument_list pos:line="115" pos:column="20">(<argument><expr><name pos:line="115" pos:column="21">stderr<pos:position pos:line="115" pos:column="27"/></name></expr></argument>,
                    <argument><expr><literal type="string" pos:line="116" pos:column="21">"problem with data read (byte %d of hdr 3):\n"<pos:position pos:line="116" pos:column="67"/></literal></expr></argument>,
                    <argument><expr><name pos:line="117" pos:column="21">i<pos:position pos:line="117" pos:column="22"/></name></expr></argument>)<pos:position pos:line="117" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="118" pos:column="13">fprintf<pos:position pos:line="118" pos:column="20"/></name><argument_list pos:line="118" pos:column="20">(<argument><expr><name pos:line="118" pos:column="21">stderr<pos:position pos:line="118" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="118" pos:column="29">"read `%c' (0x%x) from client; expected "<pos:position pos:line="118" pos:column="70"/></literal>
                    <literal type="string" pos:line="119" pos:column="21">"`%c'\n"<pos:position pos:line="119" pos:column="29"/></literal></expr></argument>,
                    <argument><expr><name><name pos:line="120" pos:column="21">buf<pos:position pos:line="120" pos:column="24"/></name><index pos:line="120" pos:column="24">[<expr><literal type="number" pos:line="120" pos:column="25">0<pos:position pos:line="120" pos:column="26"/></literal></expr>]<pos:position pos:line="120" pos:column="27"/></index></name></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="29">buf<pos:position pos:line="120" pos:column="32"/></name><index pos:line="120" pos:column="32">[<expr><literal type="number" pos:line="120" pos:column="33">0<pos:position pos:line="120" pos:column="34"/></literal></expr>]<pos:position pos:line="120" pos:column="35"/></index></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="37">HDR3_CHAR<pos:position pos:line="120" pos:column="46"/></name></expr></argument>)<pos:position pos:line="120" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="121" pos:column="13">exit<pos:position pos:line="121" pos:column="17"/></name><argument_list pos:line="121" pos:column="17">(<argument><expr><literal type="number" pos:line="121" pos:column="18">1<pos:position pos:line="121" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="122" pos:column="10"/></block></then></if>
    }<pos:position pos:line="123" pos:column="6"/></block></for>
        
    <for pos:line="125" pos:column="5">for <control pos:line="125" pos:column="9">(<init><expr><name pos:line="125" pos:column="10">i<pos:position pos:line="125" pos:column="11"/></name> <operator pos:line="125" pos:column="12">=<pos:position pos:line="125" pos:column="13"/></operator> <literal type="number" pos:line="125" pos:column="14">0<pos:position pos:line="125" pos:column="15"/></literal></expr>;<pos:position pos:line="125" pos:column="16"/></init> <condition><expr><name pos:line="125" pos:column="17">i<pos:position pos:line="125" pos:column="18"/></name> <operator pos:line="125" pos:column="19">&lt;<pos:position pos:line="125" pos:column="23"/></operator> <name pos:line="125" pos:column="21">FILE_LENGTH<pos:position pos:line="125" pos:column="32"/></name></expr>;<pos:position pos:line="125" pos:column="33"/></condition> <incr><expr><name pos:line="125" pos:column="34">i<pos:position pos:line="125" pos:column="35"/></name><operator pos:line="125" pos:column="35">++<pos:position pos:line="125" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="125" pos:column="38"/></control> <block pos:line="125" pos:column="39">{
        <expr_stmt><expr><name pos:line="126" pos:column="9">bytes_read<pos:position pos:line="126" pos:column="19"/></name> <operator pos:line="126" pos:column="20">=<pos:position pos:line="126" pos:column="21"/></operator> <literal type="number" pos:line="126" pos:column="22">1<pos:position pos:line="126" pos:column="23"/></literal></expr>;<pos:position pos:line="126" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="127" pos:column="9">rv<pos:position pos:line="127" pos:column="11"/></name> <operator pos:line="127" pos:column="12">=<pos:position pos:line="127" pos:column="13"/></operator> <call><name pos:line="127" pos:column="14">apr_socket_recv<pos:position pos:line="127" pos:column="29"/></name><argument_list pos:line="127" pos:column="29">(<argument><expr><name pos:line="127" pos:column="30">newsock<pos:position pos:line="127" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="39">buf<pos:position pos:line="127" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="127" pos:column="44">&amp;<pos:position pos:line="127" pos:column="49"/></operator><name pos:line="127" pos:column="45">bytes_read<pos:position pos:line="127" pos:column="55"/></name></expr></argument>)<pos:position pos:line="127" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="57"/></expr_stmt>
        <if pos:line="128" pos:column="9">if <condition pos:line="128" pos:column="12">(<expr><name pos:line="128" pos:column="13">rv<pos:position pos:line="128" pos:column="15"/></name> <operator pos:line="128" pos:column="16">!=<pos:position pos:line="128" pos:column="18"/></operator> <name pos:line="128" pos:column="19">APR_SUCCESS<pos:position pos:line="128" pos:column="30"/></name></expr>)<pos:position pos:line="128" pos:column="31"/></condition><then pos:line="128" pos:column="31"> <block pos:line="128" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="129" pos:column="13">fprintf<pos:position pos:line="129" pos:column="20"/></name><argument_list pos:line="129" pos:column="20">(<argument><expr><name pos:line="129" pos:column="21">stderr<pos:position pos:line="129" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="129" pos:column="29">"apr_socket_recv()-&gt;%d/%s\n"<pos:position pos:line="129" pos:column="60"/></literal></expr></argument>,
                    <argument><expr><name pos:line="130" pos:column="21">rv<pos:position pos:line="130" pos:column="23"/></name></expr></argument>,
                    <argument><expr><call><name pos:line="131" pos:column="21">apr_strerror<pos:position pos:line="131" pos:column="33"/></name><argument_list pos:line="131" pos:column="33">(<argument><expr><name pos:line="131" pos:column="34">rv<pos:position pos:line="131" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="38">buf<pos:position pos:line="131" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="131" pos:column="43">sizeof <name pos:line="131" pos:column="50">buf<pos:position pos:line="131" pos:column="53"/></name></sizeof></expr></argument>)<pos:position pos:line="131" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="131" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="132" pos:column="13">exit<pos:position pos:line="132" pos:column="17"/></name><argument_list pos:line="132" pos:column="17">(<argument><expr><literal type="number" pos:line="132" pos:column="18">1<pos:position pos:line="132" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="132" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="133" pos:column="10"/></block></then></if>
        <if pos:line="134" pos:column="9">if <condition pos:line="134" pos:column="12">(<expr><name pos:line="134" pos:column="13">bytes_read<pos:position pos:line="134" pos:column="23"/></name> <operator pos:line="134" pos:column="24">!=<pos:position pos:line="134" pos:column="26"/></operator> <literal type="number" pos:line="134" pos:column="27">1<pos:position pos:line="134" pos:column="28"/></literal></expr>)<pos:position pos:line="134" pos:column="29"/></condition><then pos:line="134" pos:column="29"> <block pos:line="134" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="135" pos:column="13">fprintf<pos:position pos:line="135" pos:column="20"/></name><argument_list pos:line="135" pos:column="20">(<argument><expr><name pos:line="135" pos:column="21">stderr<pos:position pos:line="135" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="29">"apr_socket_recv()-&gt;%ld bytes instead of 1\n"<pos:position pos:line="135" pos:column="77"/></literal></expr></argument>,
                    <argument><expr><operator pos:line="136" pos:column="21">(<pos:position pos:line="136" pos:column="22"/></operator><name pos:line="136" pos:column="22">long<pos:position pos:line="136" pos:column="26"/></name> <name pos:line="136" pos:column="27">int<pos:position pos:line="136" pos:column="30"/></name><operator pos:line="136" pos:column="30">)<pos:position pos:line="136" pos:column="31"/></operator><name pos:line="136" pos:column="31">bytes_read<pos:position pos:line="136" pos:column="41"/></name></expr></argument>)<pos:position pos:line="136" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="137" pos:column="13">exit<pos:position pos:line="137" pos:column="17"/></name><argument_list pos:line="137" pos:column="17">(<argument><expr><literal type="number" pos:line="137" pos:column="18">1<pos:position pos:line="137" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="137" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="138" pos:column="10"/></block></then></if>
        <if pos:line="139" pos:column="9">if <condition pos:line="139" pos:column="12">(<expr><name><name pos:line="139" pos:column="13">buf<pos:position pos:line="139" pos:column="16"/></name><index pos:line="139" pos:column="16">[<pos:position pos:line="139" pos:column="17"/></index></name></expr></condition></if></block></for></block></function></unit>
