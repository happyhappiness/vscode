<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3448_httpd-2.4.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">winnt_post_config<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">apr_pool_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">pconf<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">apr_pool_t<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">plog<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">apr_pool_t<pos:position pos:line="1" pos:column="77"/></name> <modifier pos:line="1" pos:column="78">*<pos:position pos:line="1" pos:column="79"/></modifier></type><name pos:line="1" pos:column="79">ptemp<pos:position pos:line="1" pos:column="84"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="86">server_rec<pos:position pos:line="1" pos:column="96"/></name><modifier pos:line="1" pos:column="96">*<pos:position pos:line="1" pos:column="97"/></modifier></type> <name pos:line="1" pos:column="98">s<pos:position pos:line="1" pos:column="99"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="100"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_status_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">rv<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><literal type="number" pos:line="3" pos:column="23">0<pos:position pos:line="3" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>

    <comment type="block" pos:line="5" pos:column="5">/* Handle the following SCM aspects in this phase:
     *
     *   -k install (catch and exit as install was handled in rewrite_args)
     *   -k config  (catch and exit as config was handled in rewrite_args)
     *   -k start
     *   -k restart
     *   -k runservice [Win95, only once - after we parsed the config]
     *
     * because all of these signals are useful _only_ if there
     * is a valid conf\httpd.conf environment to start.
     *
     * We reached this phase by avoiding errors that would cause
     * these options to fail unexpectedly in another process.
     */</comment>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">!<pos:position pos:line="20" pos:column="10"/></operator><call><name pos:line="20" pos:column="10">strcasecmp<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">signal_arg<pos:position pos:line="20" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="33">"install"<pos:position pos:line="20" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="44"/></condition><then pos:line="20" pos:column="44"> <block pos:line="20" pos:column="45">{
        <comment type="block" pos:line="21" pos:column="9">/* Service install happens in the rewrite_args hooks. If we
         * made it this far, the server configuration is clean and the
         * service will successfully start.
         */</comment>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">apr_pool_destroy<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><name><name pos:line="25" pos:column="26">s<pos:position pos:line="25" pos:column="27"/></name><operator pos:line="25" pos:column="27">-&gt;<pos:position pos:line="25" pos:column="32"/></operator><name pos:line="25" pos:column="29">process<pos:position pos:line="25" pos:column="36"/></name><operator pos:line="25" pos:column="36">-&gt;<pos:position pos:line="25" pos:column="41"/></operator><name pos:line="25" pos:column="38">pool<pos:position pos:line="25" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">apr_terminate<pos:position pos:line="26" pos:column="22"/></name><argument_list pos:line="26" pos:column="22">()<pos:position pos:line="26" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">exit<pos:position pos:line="27" pos:column="13"/></name><argument_list pos:line="27" pos:column="13">(<argument><expr><literal type="number" pos:line="27" pos:column="14">0<pos:position pos:line="27" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">!<pos:position pos:line="29" pos:column="10"/></operator><call><name pos:line="29" pos:column="10">strcasecmp<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><name pos:line="29" pos:column="21">signal_arg<pos:position pos:line="29" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="33">"config"<pos:position pos:line="29" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="43"/></condition><then pos:line="29" pos:column="43"> <block pos:line="29" pos:column="44">{
        <comment type="block" pos:line="30" pos:column="9">/* Service reconfiguration happens in the rewrite_args hooks. If we
         * made it this far, the server configuration is clean and the
         * service will successfully start.
         */</comment>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">apr_pool_destroy<pos:position pos:line="34" pos:column="25"/></name><argument_list pos:line="34" pos:column="25">(<argument><expr><name><name pos:line="34" pos:column="26">s<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">-&gt;<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="29">process<pos:position pos:line="34" pos:column="36"/></name><operator pos:line="34" pos:column="36">-&gt;<pos:position pos:line="34" pos:column="41"/></operator><name pos:line="34" pos:column="38">pool<pos:position pos:line="34" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">apr_terminate<pos:position pos:line="35" pos:column="22"/></name><argument_list pos:line="35" pos:column="22">()<pos:position pos:line="35" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">exit<pos:position pos:line="36" pos:column="13"/></name><argument_list pos:line="36" pos:column="13">(<argument><expr><literal type="number" pos:line="36" pos:column="14">0<pos:position pos:line="36" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><operator pos:line="39" pos:column="9">!<pos:position pos:line="39" pos:column="10"/></operator><call><name pos:line="39" pos:column="10">strcasecmp<pos:position pos:line="39" pos:column="20"/></name><argument_list pos:line="39" pos:column="20">(<argument><expr><name pos:line="39" pos:column="21">signal_arg<pos:position pos:line="39" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="33">"start"<pos:position pos:line="39" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="42"/></condition><then pos:line="39" pos:column="42"> <block pos:line="39" pos:column="43">{
        <decl_stmt><decl><type><name pos:line="40" pos:column="9">ap_listen_rec<pos:position pos:line="40" pos:column="22"/></name> <modifier pos:line="40" pos:column="23">*<pos:position pos:line="40" pos:column="24"/></modifier></type><name pos:line="40" pos:column="24">lr<pos:position pos:line="40" pos:column="26"/></name></decl>;<pos:position pos:line="40" pos:column="27"/></decl_stmt>

        <comment type="block" pos:line="42" pos:column="9">/* Close the listening sockets. */</comment>
        <for pos:line="43" pos:column="9">for <control pos:line="43" pos:column="13">(<init><expr><name pos:line="43" pos:column="14">lr<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">=<pos:position pos:line="43" pos:column="18"/></operator> <name pos:line="43" pos:column="19">ap_listeners<pos:position pos:line="43" pos:column="31"/></name></expr>;<pos:position pos:line="43" pos:column="32"/></init> <condition><expr><name pos:line="43" pos:column="33">lr<pos:position pos:line="43" pos:column="35"/></name></expr>;<pos:position pos:line="43" pos:column="36"/></condition> <incr><expr><name pos:line="43" pos:column="37">lr<pos:position pos:line="43" pos:column="39"/></name> <operator pos:line="43" pos:column="40">=<pos:position pos:line="43" pos:column="41"/></operator> <name><name pos:line="43" pos:column="42">lr<pos:position pos:line="43" pos:column="44"/></name><operator pos:line="43" pos:column="44">-&gt;<pos:position pos:line="43" pos:column="49"/></operator><name pos:line="43" pos:column="46">next<pos:position pos:line="43" pos:column="50"/></name></name></expr></incr>)<pos:position pos:line="43" pos:column="51"/></control> <block pos:line="43" pos:column="52">{
            <expr_stmt><expr><call><name pos:line="44" pos:column="13">apr_socket_close<pos:position pos:line="44" pos:column="29"/></name><argument_list pos:line="44" pos:column="29">(<argument><expr><name><name pos:line="44" pos:column="30">lr<pos:position pos:line="44" pos:column="32"/></name><operator pos:line="44" pos:column="32">-&gt;<pos:position pos:line="44" pos:column="37"/></operator><name pos:line="44" pos:column="34">sd<pos:position pos:line="44" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="45" pos:column="13">lr<pos:position pos:line="45" pos:column="15"/></name><operator pos:line="45" pos:column="15">-&gt;<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="17">active<pos:position pos:line="45" pos:column="23"/></name></name> <operator pos:line="45" pos:column="24">=<pos:position pos:line="45" pos:column="25"/></operator> <literal type="number" pos:line="45" pos:column="26">0<pos:position pos:line="45" pos:column="27"/></literal></expr>;<pos:position pos:line="45" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="46" pos:column="10"/></block></for>
        <expr_stmt><expr><name pos:line="47" pos:column="9">rv<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">=<pos:position pos:line="47" pos:column="13"/></operator> <call><name pos:line="47" pos:column="14">mpm_service_start<pos:position pos:line="47" pos:column="31"/></name><argument_list pos:line="47" pos:column="31">(<argument><expr><name pos:line="47" pos:column="32">ptemp<pos:position pos:line="47" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="39">inst_argc<pos:position pos:line="47" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="50">inst_argv<pos:position pos:line="47" pos:column="59"/></name></expr></argument>)<pos:position pos:line="47" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">apr_pool_destroy<pos:position pos:line="48" pos:column="25"/></name><argument_list pos:line="48" pos:column="25">(<argument><expr><name><name pos:line="48" pos:column="26">s<pos:position pos:line="48" pos:column="27"/></name><operator pos:line="48" pos:column="27">-&gt;<pos:position pos:line="48" pos:column="32"/></operator><name pos:line="48" pos:column="29">process<pos:position pos:line="48" pos:column="36"/></name><operator pos:line="48" pos:column="36">-&gt;<pos:position pos:line="48" pos:column="41"/></operator><name pos:line="48" pos:column="38">pool<pos:position pos:line="48" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">apr_terminate<pos:position pos:line="49" pos:column="22"/></name><argument_list pos:line="49" pos:column="22">()<pos:position pos:line="49" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">exit<pos:position pos:line="50" pos:column="13"/></name> <argument_list pos:line="50" pos:column="14">(<argument><expr><name pos:line="50" pos:column="15">rv<pos:position pos:line="50" pos:column="17"/></name></expr></argument>)<pos:position pos:line="50" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>

    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><operator pos:line="53" pos:column="9">!<pos:position pos:line="53" pos:column="10"/></operator><call><name pos:line="53" pos:column="10">strcasecmp<pos:position pos:line="53" pos:column="20"/></name><argument_list pos:line="53" pos:column="20">(<argument><expr><name pos:line="53" pos:column="21">signal_arg<pos:position pos:line="53" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="33">"restart"<pos:position pos:line="53" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="44"/></condition><then pos:line="53" pos:column="44"> <block pos:line="53" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">mpm_signal_service<pos:position pos:line="54" pos:column="27"/></name><argument_list pos:line="54" pos:column="27">(<argument><expr><name pos:line="54" pos:column="28">ptemp<pos:position pos:line="54" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="35">1<pos:position pos:line="54" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">apr_pool_destroy<pos:position pos:line="55" pos:column="25"/></name><argument_list pos:line="55" pos:column="25">(<argument><expr><name><name pos:line="55" pos:column="26">s<pos:position pos:line="55" pos:column="27"/></name><operator pos:line="55" pos:column="27">-&gt;<pos:position pos:line="55" pos:column="32"/></operator><name pos:line="55" pos:column="29">process<pos:position pos:line="55" pos:column="36"/></name><operator pos:line="55" pos:column="36">-&gt;<pos:position pos:line="55" pos:column="41"/></operator><name pos:line="55" pos:column="38">pool<pos:position pos:line="55" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">apr_terminate<pos:position pos:line="56" pos:column="22"/></name><argument_list pos:line="56" pos:column="22">()<pos:position pos:line="56" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">exit<pos:position pos:line="57" pos:column="13"/></name> <argument_list pos:line="57" pos:column="14">(<argument><expr><name pos:line="57" pos:column="15">rv<pos:position pos:line="57" pos:column="17"/></name></expr></argument>)<pos:position pos:line="57" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>

    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><name pos:line="60" pos:column="9">parent_pid<pos:position pos:line="60" pos:column="19"/></name> <operator pos:line="60" pos:column="20">==<pos:position pos:line="60" pos:column="22"/></operator> <name pos:line="60" pos:column="23">my_pid<pos:position pos:line="60" pos:column="29"/></name></expr>)<pos:position pos:line="60" pos:column="30"/></condition><then pos:line="60" pos:column="30">
    <block pos:line="61" pos:column="5">{
        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><call><name pos:line="62" pos:column="13">ap_state_query<pos:position pos:line="62" pos:column="27"/></name><argument_list pos:line="62" pos:column="27">(<argument><expr><name pos:line="62" pos:column="28">AP_SQ_MAIN_STATE<pos:position pos:line="62" pos:column="44"/></name></expr></argument>)<pos:position pos:line="62" pos:column="45"/></argument_list></call> <operator pos:line="62" pos:column="46">!=<pos:position pos:line="62" pos:column="48"/></operator> <name pos:line="62" pos:column="49">AP_SQ_MS_CREATE_PRE_CONFIG<pos:position pos:line="62" pos:column="75"/></name>
            <operator pos:line="63" pos:column="13">&amp;&amp;<pos:position pos:line="63" pos:column="23"/></operator> <call><name pos:line="63" pos:column="16">ap_state_query<pos:position pos:line="63" pos:column="30"/></name><argument_list pos:line="63" pos:column="30">(<argument><expr><name pos:line="63" pos:column="31">AP_SQ_CONFIG_GEN<pos:position pos:line="63" pos:column="47"/></name></expr></argument>)<pos:position pos:line="63" pos:column="48"/></argument_list></call> <operator pos:line="63" pos:column="49">==<pos:position pos:line="63" pos:column="51"/></operator> <literal type="number" pos:line="63" pos:column="52">1<pos:position pos:line="63" pos:column="53"/></literal></expr>)<pos:position pos:line="63" pos:column="54"/></condition><then pos:line="63" pos:column="54">
        <block pos:line="64" pos:column="9">{
            <comment type="block" pos:line="65" pos:column="13">/* This code should be run once in the parent and not run
             * across a restart
             */</comment>
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">PSECURITY_ATTRIBUTES<pos:position pos:line="68" pos:column="33"/></name></type> <name pos:line="68" pos:column="34">sa<pos:position pos:line="68" pos:column="36"/></name> <init pos:line="68" pos:column="37">= <expr><call><name pos:line="68" pos:column="39">GetNullACL<pos:position pos:line="68" pos:column="49"/></name><argument_list pos:line="68" pos:column="49">()<pos:position pos:line="68" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="68" pos:column="52"/></decl_stmt>  <comment type="block" pos:line="68" pos:column="54">/* returns NULL if invalid (Win95?) */</comment>
            <expr_stmt><expr><call><name pos:line="69" pos:column="13">setup_signal_names<pos:position pos:line="69" pos:column="31"/></name><argument_list pos:line="69" pos:column="31">(<argument><expr><call><name pos:line="69" pos:column="32">apr_psprintf<pos:position pos:line="69" pos:column="44"/></name><argument_list pos:line="69" pos:column="44">(<argument><expr><name pos:line="69" pos:column="45">pconf<pos:position pos:line="69" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="52">"ap%lu"<pos:position pos:line="69" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="61">parent_pid<pos:position pos:line="69" pos:column="71"/></name></expr></argument>)<pos:position pos:line="69" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="69" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="74"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="71" pos:column="13">ap_log_pid<pos:position pos:line="71" pos:column="23"/></name><argument_list pos:line="71" pos:column="23">(<argument><expr><name pos:line="71" pos:column="24">pconf<pos:position pos:line="71" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="31">ap_pid_fname<pos:position pos:line="71" pos:column="43"/></name></expr></argument>)<pos:position pos:line="71" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="45"/></expr_stmt>

            <comment type="block" pos:line="73" pos:column="13">/* Create shutdown event, apPID_shutdown, where PID is the parent
             * Apache process ID. Shutdown is signaled by 'apache -k shutdown'.
             */</comment>
            <expr_stmt><expr><name pos:line="76" pos:column="13">shutdown_event<pos:position pos:line="76" pos:column="27"/></name> <operator pos:line="76" pos:column="28">=<pos:position pos:line="76" pos:column="29"/></operator> <call><name pos:line="76" pos:column="30">CreateEvent<pos:position pos:line="76" pos:column="41"/></name><argument_list pos:line="76" pos:column="41">(<argument><expr><name pos:line="76" pos:column="42">sa<pos:position pos:line="76" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="46">FALSE<pos:position pos:line="76" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="53">FALSE<pos:position pos:line="76" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="60">signal_shutdown_name<pos:position pos:line="76" pos:column="80"/></name></expr></argument>)<pos:position pos:line="76" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="82"/></expr_stmt>
            <if pos:line="77" pos:column="13">if <condition pos:line="77" pos:column="16">(<expr><operator pos:line="77" pos:column="17">!<pos:position pos:line="77" pos:column="18"/></operator><name pos:line="77" pos:column="18">shutdown_event<pos:position pos:line="77" pos:column="32"/></name></expr>)<pos:position pos:line="77" pos:column="33"/></condition><then pos:line="77" pos:column="33"> <block pos:line="77" pos:column="34">{
                <expr_stmt><expr><call><name pos:line="78" pos:column="17">ap_log_error<pos:position pos:line="78" pos:column="29"/></name><argument_list pos:line="78" pos:column="29">(<argument><expr><name pos:line="78" pos:column="30">APLOG_MARK<pos:position pos:line="78" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="42">APLOG_CRIT<pos:position pos:line="78" pos:column="52"/></name></expr></argument>, <argument><expr><call><name pos:line="78" pos:column="54">apr_get_os_error<pos:position pos:line="78" pos:column="70"/></name><argument_list pos:line="78" pos:column="70">()<pos:position pos:line="78" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="78" pos:column="74">ap_server_conf<pos:position pos:line="78" pos:column="88"/></name></expr></argument>, <argument><expr><call><name pos:line="78" pos:column="90">APLOGNO<pos:position pos:line="78" pos:column="97"/></name><argument_list pos:line="78" pos:column="97">(<argument><expr><literal type="number" pos:line="78" pos:column="98">00448<pos:position pos:line="78" pos:column="103"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="104"/></argument_list></call>
                             <literal type="string" pos:line="79" pos:column="30">"Parent: Cannot create shutdown event %s"<pos:position pos:line="79" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="73">signal_shutdown_name<pos:position pos:line="79" pos:column="93"/></name></expr></argument>)<pos:position pos:line="79" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="95"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="80" pos:column="17">CleanNullACL<pos:position pos:line="80" pos:column="29"/></name><argument_list pos:line="80" pos:column="29">(<argument><expr><operator pos:line="80" pos:column="30">(<pos:position pos:line="80" pos:column="31"/></operator><name pos:line="80" pos:column="31">void<pos:position pos:line="80" pos:column="35"/></name> <operator pos:line="80" pos:column="36">*<pos:position pos:line="80" pos:column="37"/></operator><operator pos:line="80" pos:column="37">)<pos:position pos:line="80" pos:column="38"/></operator><name pos:line="80" pos:column="38">sa<pos:position pos:line="80" pos:column="40"/></name></expr></argument>)<pos:position pos:line="80" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="42"/></expr_stmt>
                <return pos:line="81" pos:column="17">return <expr><name pos:line="81" pos:column="24">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="81" pos:column="50"/></name></expr>;<pos:position pos:line="81" pos:column="51"/></return>
            }<pos:position pos:line="82" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="84" pos:column="13">/* Create restart event, apPID_restart, where PID is the parent
             * Apache process ID. Restart is signaled by 'apache -k restart'.
             */</comment>
            <expr_stmt><expr><name pos:line="87" pos:column="13">restart_event<pos:position pos:line="87" pos:column="26"/></name> <operator pos:line="87" pos:column="27">=<pos:position pos:line="87" pos:column="28"/></operator> <call><name pos:line="87" pos:column="29">CreateEvent<pos:position pos:line="87" pos:column="40"/></name><argument_list pos:line="87" pos:column="40">(<argument><expr><name pos:line="87" pos:column="41">sa<pos:position pos:line="87" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="45">FALSE<pos:position pos:line="87" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="52">FALSE<pos:position pos:line="87" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="59">signal_restart_name<pos:position pos:line="87" pos:column="78"/></name></expr></argument>)<pos:position pos:line="87" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="80"/></expr_stmt>
            <if pos:line="88" pos:column="13">if <condition pos:line="88" pos:column="16">(<expr><operator pos:line="88" pos:column="17">!<pos:position pos:line="88" pos:column="18"/></operator><name pos:line="88" pos:column="18">restart_event<pos:position pos:line="88" pos:column="31"/></name></expr>)<pos:position pos:line="88" pos:column="32"/></condition><then pos:line="88" pos:column="32"> <block pos:line="88" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="89" pos:column="17">CloseHandle<pos:position pos:line="89" pos:column="28"/></name><argument_list pos:line="89" pos:column="28">(<argument><expr><name pos:line="89" pos:column="29">shutdown_event<pos:position pos:line="89" pos:column="43"/></name></expr></argument>)<pos:position pos:line="89" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="45"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="90" pos:column="17">ap_log_error<pos:position pos:line="90" pos:column="29"/></name><argument_list pos:line="90" pos:column="29">(<argument><expr><name pos:line="90" pos:column="30">APLOG_MARK<pos:position pos:line="90" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="42">APLOG_CRIT<pos:position pos:line="90" pos:column="52"/></name></expr></argument>, <argument><expr><call><name pos:line="90" pos:column="54">apr_get_os_error<pos:position pos:line="90" pos:column="70"/></name><argument_list pos:line="90" pos:column="70">()<pos:position pos:line="90" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="90" pos:column="74">ap_server_conf<pos:position pos:line="90" pos:column="88"/></name></expr></argument>, <argument><expr><call><name pos:line="90" pos:column="90">APLOGNO<pos:position pos:line="90" pos:column="97"/></name><argument_list pos:line="90" pos:column="97">(<argument><expr><literal type="number" pos:line="90" pos:column="98">00449<pos:position pos:line="90" pos:column="103"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="104"/></argument_list></call>
                             <literal type="string" pos:line="91" pos:column="30">"Parent: Cannot create restart event %s"<pos:position pos:line="91" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="91" pos:column="72">signal_restart_name<pos:position pos:line="91" pos:column="91"/></name></expr></argument>)<pos:position pos:line="91" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="93"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="92" pos:column="17">CleanNullACL<pos:position pos:line="92" pos:column="29"/></name><argument_list pos:line="92" pos:column="29">(<argument><expr><operator pos:line="92" pos:column="30">(<pos:position pos:line="92" pos:column="31"/></operator><name pos:line="92" pos:column="31">void<pos:position pos:line="92" pos:column="35"/></name> <operator pos:line="92" pos:column="36">*<pos:position pos:line="92" pos:column="37"/></operator><operator pos:line="92" pos:column="37">)<pos:position pos:line="92" pos:column="38"/></operator><name pos:line="92" pos:column="38">sa<pos:position pos:line="92" pos:column="40"/></name></expr></argument>)<pos:position pos:line="92" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="42"/></expr_stmt>
                <return pos:line="93" pos:column="17">return <expr><name pos:line="93" pos:column="24">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="93" pos:column="50"/></name></expr>;<pos:position pos:line="93" pos:column="51"/></return>
            }<pos:position pos:line="94" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="95" pos:column="13">CleanNullACL<pos:position pos:line="95" pos:column="25"/></name><argument_list pos:line="95" pos:column="25">(<argument><expr><operator pos:line="95" pos:column="26">(<pos:position pos:line="95" pos:column="27"/></operator><name pos:line="95" pos:column="27">void<pos:position pos:line="95" pos:column="31"/></name> <operator pos:line="95" pos:column="32">*<pos:position pos:line="95" pos:column="33"/></operator><operator pos:line="95" pos:column="33">)<pos:position pos:line="95" pos:column="34"/></operator><name pos:line="95" pos:column="34">sa<pos:position pos:line="95" pos:column="36"/></name></expr></argument>)<pos:position pos:line="95" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="38"/></expr_stmt>

            <comment type="block" pos:line="97" pos:column="13">/* Create the start mutex, as an unnamed object for security.
             * Ths start mutex is used during a restart to prevent more than
             * one child process from entering the accept loop at once.
             */</comment>
            <expr_stmt><expr><name pos:line="101" pos:column="13">rv<pos:position pos:line="101" pos:column="15"/></name> <operator pos:line="101" pos:column="16">=<pos:position pos:line="101" pos:column="17"/></operator>  <call><name pos:line="101" pos:column="19">apr_proc_mutex_create<pos:position pos:line="101" pos:column="40"/></name><argument_list pos:line="101" pos:column="40">(<argument><expr><operator pos:line="101" pos:column="41">&amp;<pos:position pos:line="101" pos:column="46"/></operator><name pos:line="101" pos:column="42">start_mutex<pos:position pos:line="101" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="55">NULL<pos:position pos:line="101" pos:column="59"/></name></expr></argument>,
                                        <argument><expr><name pos:line="102" pos:column="41">APR_LOCK_DEFAULT<pos:position pos:line="102" pos:column="57"/></name></expr></argument>,
                                        <argument><expr><name><name pos:line="103" pos:column="41">ap_server_conf<pos:position pos:line="103" pos:column="55"/></name><operator pos:line="103" pos:column="55">-&gt;<pos:position pos:line="103" pos:column="60"/></operator><name pos:line="103" pos:column="57">process<pos:position pos:line="103" pos:column="64"/></name><operator pos:line="103" pos:column="64">-&gt;<pos:position pos:line="103" pos:column="69"/></operator><name pos:line="103" pos:column="66">pool<pos:position pos:line="103" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="103" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="72"/></expr_stmt>
            <if pos:line="104" pos:column="13">if <condition pos:line="104" pos:column="16">(<expr><name pos:line="104" pos:column="17">rv<pos:position pos:line="104" pos:column="19"/></name> <operator pos:line="104" pos:column="20">!=<pos:position pos:line="104" pos:column="22"/></operator> <name pos:line="104" pos:column="23">APR_SUCCESS<pos:position pos:line="104" pos:column="34"/></name></expr>)<pos:position pos:line="104" pos:column="35"/></condition><then pos:line="104" pos:column="35"> <block pos:line="104" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="105" pos:column="17">ap_log_error<pos:position pos:line="105" pos:column="29"/></name><argument_list pos:line="105" pos:column="29">(<argument><expr><name pos:line="105" pos:column="30">APLOG_MARK<pos:position pos:line="105" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="105" pos:column="41">APLOG_ERR<pos:position pos:line="105" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="52">rv<pos:position pos:line="105" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="56">ap_server_conf<pos:position pos:line="105" pos:column="70"/></name></expr></argument>, <argument><expr><call><name pos:line="105" pos:column="72">APLOGNO<pos:position pos:line="105" pos:column="79"/></name><argument_list pos:line="105" pos:column="79">(<argument><expr><literal type="number" pos:line="105" pos:column="80">00450<pos:position pos:line="105" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="86"/></argument_list></call>
                             <literal type="string" pos:line="106" pos:column="30">"%s: Unable to create the start_mutex."<pos:position pos:line="106" pos:column="69"/></literal></expr></argument>,
                             <argument><expr><name pos:line="107" pos:column="30">service_name<pos:position pos:line="107" pos:column="42"/></name></expr></argument>)<pos:position pos:line="107" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="44"/></expr_stmt>
                <return pos:line="108" pos:column="17">return <expr><name pos:line="108" pos:column="24">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="108" pos:column="50"/></name></expr>;<pos:position pos:line="108" pos:column="51"/></return>
            }<pos:position pos:line="109" pos:column="14"/></block></then></if>
        }<pos:position pos:line="110" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="111" pos:column="9">/* Always reset our console handler to be the first, even on a restart
        *  because some modules (e.g. mod_perl) might have set a console
        *  handler to terminate the process.
        */</comment>
        <if pos:line="115" pos:column="9">if <condition pos:line="115" pos:column="12">(<expr><call><name pos:line="115" pos:column="13">strcasecmp<pos:position pos:line="115" pos:column="23"/></name><argument_list pos:line="115" pos:column="23">(<argument><expr><name pos:line="115" pos:column="24">signal_arg<pos:position pos:line="115" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="36">"runservice"<pos:position pos:line="115" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="115" pos:column="50"/></condition><then pos:line="115" pos:column="50">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="116" pos:column="13">mpm_start_console_handler<pos:position pos:line="116" pos:column="38"/></name><argument_list pos:line="116" pos:column="38">()<pos:position pos:line="116" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="41"/></expr_stmt></block></then></if>
    }<pos:position pos:line="117" pos:column="6"/></block></then>
    <else pos:line="118" pos:column="5">else <comment type="block" pos:line="118" pos:column="10">/* parent_pid != my_pid */</comment>
    <block pos:line="119" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="120" pos:column="9">mpm_start_child_console_handler<pos:position pos:line="120" pos:column="40"/></name><argument_list pos:line="120" pos:column="40">()<pos:position pos:line="120" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="121" pos:column="6"/></block></else></if>
    <return pos:line="122" pos:column="5">return <expr><name pos:line="122" pos:column="12">OK<pos:position pos:line="122" pos:column="14"/></name></expr>;<pos:position pos:line="122" pos:column="15"/></return>
}<pos:position pos:line="123" pos:column="2"/></block></function></unit>
