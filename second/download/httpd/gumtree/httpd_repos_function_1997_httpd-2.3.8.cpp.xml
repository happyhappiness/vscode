<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1997_httpd-2.3.8.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">substitute<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">sed_eval_t<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">eval<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">sed_reptr_t<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">ipc<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
                      <parameter><decl><type><name pos:line="2" pos:column="23">step_vars_storage<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">step_vars<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if<condition pos:line="4" pos:column="7">(<expr><call><name pos:line="4" pos:column="8">match<pos:position pos:line="4" pos:column="13"/></name><argument_list pos:line="4" pos:column="13">(<argument><expr><name pos:line="4" pos:column="14">eval<pos:position pos:line="4" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="4" pos:column="20">ipc<pos:position pos:line="4" pos:column="23"/></name><operator pos:line="4" pos:column="23">-&gt;<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="25">re1<pos:position pos:line="4" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="30">0<pos:position pos:line="4" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="33">step_vars<pos:position pos:line="4" pos:column="42"/></name></expr></argument>)<pos:position pos:line="4" pos:column="43"/></argument_list></call> <operator pos:line="4" pos:column="44">==<pos:position pos:line="4" pos:column="46"/></operator> <literal type="number" pos:line="4" pos:column="47">0<pos:position pos:line="4" pos:column="48"/></literal></expr>)<pos:position pos:line="4" pos:column="49"/></condition><then pos:line="4" pos:column="49">    <block type="pseudo"><return pos:line="4" pos:column="53">return<expr><operator pos:line="4" pos:column="59">(<pos:position pos:line="4" pos:column="60"/></operator><literal type="number" pos:line="4" pos:column="60">0<pos:position pos:line="4" pos:column="61"/></literal><operator pos:line="4" pos:column="61">)<pos:position pos:line="4" pos:column="62"/></operator></expr>;<pos:position pos:line="4" pos:column="63"/></return></block></then></if>

    <expr_stmt><expr><name><name pos:line="6" pos:column="5">eval<pos:position pos:line="6" pos:column="9"/></name><operator pos:line="6" pos:column="9">-&gt;<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="11">numpass<pos:position pos:line="6" pos:column="18"/></name></name> <operator pos:line="6" pos:column="19">=<pos:position pos:line="6" pos:column="20"/></operator> <literal type="number" pos:line="6" pos:column="21">0<pos:position pos:line="6" pos:column="22"/></literal></expr>;<pos:position pos:line="6" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="7" pos:column="5">eval<pos:position pos:line="7" pos:column="9"/></name><operator pos:line="7" pos:column="9">-&gt;<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="11">sflag<pos:position pos:line="7" pos:column="16"/></name></name> <operator pos:line="7" pos:column="17">=<pos:position pos:line="7" pos:column="18"/></operator> <literal type="number" pos:line="7" pos:column="19">0<pos:position pos:line="7" pos:column="20"/></literal></expr>;<pos:position pos:line="7" pos:column="21"/></expr_stmt>        <comment type="block" pos:line="7" pos:column="29">/* Flags if any substitution was made */</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name pos:line="8" pos:column="9">dosub<pos:position pos:line="8" pos:column="14"/></name><argument_list pos:line="8" pos:column="14">(<argument><expr><name pos:line="8" pos:column="15">eval<pos:position pos:line="8" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="21">ipc<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">-&gt;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="26">rhs<pos:position pos:line="8" pos:column="29"/></name></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="31">ipc<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">-&gt;<pos:position pos:line="8" pos:column="39"/></operator><name pos:line="8" pos:column="36">gfl<pos:position pos:line="8" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="41">step_vars<pos:position pos:line="8" pos:column="50"/></name></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></call> <operator pos:line="8" pos:column="52">!=<pos:position pos:line="8" pos:column="54"/></operator> <name pos:line="8" pos:column="55">APR_SUCCESS<pos:position pos:line="8" pos:column="66"/></name></expr>)<pos:position pos:line="8" pos:column="67"/></condition><then pos:line="8" pos:column="67">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><operator pos:line="9" pos:column="16">-<pos:position pos:line="9" pos:column="17"/></operator><literal type="number" pos:line="9" pos:column="17">1<pos:position pos:line="9" pos:column="18"/></literal></expr>;<pos:position pos:line="9" pos:column="19"/></return></block></then></if>

    <if pos:line="11" pos:column="5">if<condition pos:line="11" pos:column="7">(<expr><name><name pos:line="11" pos:column="8">ipc<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">-&gt;<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="13">gfl<pos:position pos:line="11" pos:column="16"/></name></name></expr>)<pos:position pos:line="11" pos:column="17"/></condition><then pos:line="11" pos:column="17"> <block pos:line="11" pos:column="18">{
        <while pos:line="12" pos:column="9">while<condition pos:line="12" pos:column="14">(<expr><operator pos:line="12" pos:column="15">*<pos:position pos:line="12" pos:column="16"/></operator><name><name pos:line="12" pos:column="16">step_vars<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">-&gt;<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="27">loc2<pos:position pos:line="12" pos:column="31"/></name></name></expr>)<pos:position pos:line="12" pos:column="32"/></condition> <block pos:line="12" pos:column="33">{
            <if pos:line="13" pos:column="13">if<condition pos:line="13" pos:column="15">(<expr><call><name pos:line="13" pos:column="16">match<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">eval<pos:position pos:line="13" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="28">ipc<pos:position pos:line="13" pos:column="31"/></name><operator pos:line="13" pos:column="31">-&gt;<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="33">re1<pos:position pos:line="13" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="38">1<pos:position pos:line="13" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="41">step_vars<pos:position pos:line="13" pos:column="50"/></name></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call> <operator pos:line="13" pos:column="52">==<pos:position pos:line="13" pos:column="54"/></operator> <literal type="number" pos:line="13" pos:column="55">0<pos:position pos:line="13" pos:column="56"/></literal></expr>)<pos:position pos:line="13" pos:column="57"/></condition><then pos:line="13" pos:column="57"> <block type="pseudo"><break pos:line="13" pos:column="58">break;<pos:position pos:line="13" pos:column="64"/></break></block></then></if>
            <if pos:line="14" pos:column="13">if <condition pos:line="14" pos:column="16">(<expr><call><name pos:line="14" pos:column="17">dosub<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">eval<pos:position pos:line="14" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="29">ipc<pos:position pos:line="14" pos:column="32"/></name><operator pos:line="14" pos:column="32">-&gt;<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="34">rhs<pos:position pos:line="14" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="39">ipc<pos:position pos:line="14" pos:column="42"/></name><operator pos:line="14" pos:column="42">-&gt;<pos:position pos:line="14" pos:column="47"/></operator><name pos:line="14" pos:column="44">gfl<pos:position pos:line="14" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="49">step_vars<pos:position pos:line="14" pos:column="58"/></name></expr></argument>)<pos:position pos:line="14" pos:column="59"/></argument_list></call> <operator pos:line="14" pos:column="60">!=<pos:position pos:line="14" pos:column="62"/></operator> <name pos:line="14" pos:column="63">APR_SUCCESS<pos:position pos:line="14" pos:column="74"/></name></expr>)<pos:position pos:line="14" pos:column="75"/></condition><then pos:line="14" pos:column="75">
                <block type="pseudo"><return pos:line="15" pos:column="17">return <expr><operator pos:line="15" pos:column="24">-<pos:position pos:line="15" pos:column="25"/></operator><literal type="number" pos:line="15" pos:column="25">1<pos:position pos:line="15" pos:column="26"/></literal></expr>;<pos:position pos:line="15" pos:column="27"/></return></block></then></if>
        }<pos:position pos:line="16" pos:column="10"/></block></while>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
    <return pos:line="18" pos:column="5">return<expr><operator pos:line="18" pos:column="11">(<pos:position pos:line="18" pos:column="12"/></operator><name><name pos:line="18" pos:column="12">eval<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">-&gt;<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="18">sflag<pos:position pos:line="18" pos:column="23"/></name></name><operator pos:line="18" pos:column="23">)<pos:position pos:line="18" pos:column="24"/></operator></expr>;<pos:position pos:line="18" pos:column="25"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
