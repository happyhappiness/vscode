<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_985_httpd-2.0.63.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">do_expand<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">request_rec<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">r<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">input<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">buffer<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">int<pos:position pos:line="1" pos:column="69"/></name></type> <name pos:line="1" pos:column="70">nbuf<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>,
                      <parameter><decl><type><name pos:line="2" pos:column="23">backrefinfo<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">briRR<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">backrefinfo<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">briRC<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">inp<pos:position pos:line="4" pos:column="14"/></name></decl>, <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="17">outp<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">span<pos:position pos:line="5" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="22">space<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/*
     * for security reasons this expansion must be performed in a
     * single pass, otherwise an attacker can arrange for the result
     * of an earlier expansion to include expansion specifiers that
     * are interpreted by a later expansion, producing results that
     * were not intended by the administrator.
     */</comment>

    <expr_stmt><expr><name pos:line="15" pos:column="5">inp<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <name pos:line="15" pos:column="11">input<pos:position pos:line="15" pos:column="16"/></name></expr>;<pos:position pos:line="15" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">outp<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <name pos:line="16" pos:column="12">buffer<pos:position pos:line="16" pos:column="18"/></name></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">space<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">=<pos:position pos:line="17" pos:column="12"/></operator> <name pos:line="17" pos:column="13">nbuf<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">-<pos:position pos:line="17" pos:column="19"/></operator> <literal type="number" pos:line="17" pos:column="20">1<pos:position pos:line="17" pos:column="21"/></literal></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt> <comment type="block" pos:line="17" pos:column="23">/* room for '\0' */</comment>

    <for pos:line="19" pos:column="5">for <control pos:line="19" pos:column="9">(<init pos:line="19" pos:column="10">;<pos:position pos:line="19" pos:column="11"/></init><condition pos:line="19" pos:column="11">;<pos:position pos:line="19" pos:column="12"/></condition><incr/>)<pos:position pos:line="19" pos:column="13"/></control> <block pos:line="19" pos:column="14">{
        <expr_stmt><expr><name pos:line="20" pos:column="9">span<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <call><name pos:line="20" pos:column="16">strcspn<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><name pos:line="20" pos:column="24">inp<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="29">"\\$%"<pos:position pos:line="20" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">span<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">&gt;<pos:position pos:line="21" pos:column="22"/></operator> <name pos:line="21" pos:column="20">space<pos:position pos:line="21" pos:column="25"/></name></expr>)<pos:position pos:line="21" pos:column="26"/></condition><then pos:line="21" pos:column="26"> <block pos:line="21" pos:column="27">{
            <expr_stmt><expr><name pos:line="22" pos:column="13">span<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <name pos:line="22" pos:column="20">space<pos:position pos:line="22" pos:column="25"/></name></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">memcpy<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><name pos:line="24" pos:column="16">outp<pos:position pos:line="24" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="22">inp<pos:position pos:line="24" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="27">span<pos:position pos:line="24" pos:column="31"/></name></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="25" pos:column="9">inp<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">+=<pos:position pos:line="25" pos:column="15"/></operator> <name pos:line="25" pos:column="16">span<pos:position pos:line="25" pos:column="20"/></name></expr>;<pos:position pos:line="25" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name pos:line="26" pos:column="9">outp<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">+=<pos:position pos:line="26" pos:column="16"/></operator> <name pos:line="26" pos:column="17">span<pos:position pos:line="26" pos:column="21"/></name></expr>;<pos:position pos:line="26" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><name pos:line="27" pos:column="9">space<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">-=<pos:position pos:line="27" pos:column="17"/></operator> <name pos:line="27" pos:column="18">span<pos:position pos:line="27" pos:column="22"/></name></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt>
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">space<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">==<pos:position pos:line="28" pos:column="21"/></operator> <literal type="number" pos:line="28" pos:column="22">0<pos:position pos:line="28" pos:column="23"/></literal> <operator pos:line="28" pos:column="24">||<pos:position pos:line="28" pos:column="26"/></operator> <operator pos:line="28" pos:column="27">*<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="28">inp<pos:position pos:line="28" pos:column="31"/></name> <operator pos:line="28" pos:column="32">==<pos:position pos:line="28" pos:column="34"/></operator> <literal type="char" pos:line="28" pos:column="35">'\0'<pos:position pos:line="28" pos:column="39"/></literal></expr>)<pos:position pos:line="28" pos:column="40"/></condition><then pos:line="28" pos:column="40"> <block pos:line="28" pos:column="41">{
            <break pos:line="29" pos:column="13">break;<pos:position pos:line="29" pos:column="19"/></break>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="31" pos:column="9">/* now we have a '\', '$', or '%' */</comment>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name><name pos:line="32" pos:column="13">inp<pos:position pos:line="32" pos:column="16"/></name><index pos:line="32" pos:column="16">[<expr><literal type="number" pos:line="32" pos:column="17">0<pos:position pos:line="32" pos:column="18"/></literal></expr>]<pos:position pos:line="32" pos:column="19"/></index></name> <operator pos:line="32" pos:column="20">==<pos:position pos:line="32" pos:column="22"/></operator> <literal type="char" pos:line="32" pos:column="23">'\\'<pos:position pos:line="32" pos:column="27"/></literal></expr>)<pos:position pos:line="32" pos:column="28"/></condition><then pos:line="32" pos:column="28"> <block pos:line="32" pos:column="29">{
            <if pos:line="33" pos:column="13">if <condition pos:line="33" pos:column="16">(<expr><name><name pos:line="33" pos:column="17">inp<pos:position pos:line="33" pos:column="20"/></name><index pos:line="33" pos:column="20">[<expr><literal type="number" pos:line="33" pos:column="21">1<pos:position pos:line="33" pos:column="22"/></literal></expr>]<pos:position pos:line="33" pos:column="23"/></index></name> <operator pos:line="33" pos:column="24">!=<pos:position pos:line="33" pos:column="26"/></operator> <literal type="char" pos:line="33" pos:column="27">'\0'<pos:position pos:line="33" pos:column="31"/></literal></expr>)<pos:position pos:line="33" pos:column="32"/></condition><then pos:line="33" pos:column="32"> <block pos:line="33" pos:column="33">{
                <expr_stmt><expr><name pos:line="34" pos:column="17">inp<pos:position pos:line="34" pos:column="20"/></name><operator pos:line="34" pos:column="20">++<pos:position pos:line="34" pos:column="22"/></operator></expr>;<pos:position pos:line="34" pos:column="23"/></expr_stmt>
                <goto pos:line="35" pos:column="17">goto <name pos:line="35" pos:column="22">skip<pos:position pos:line="35" pos:column="26"/></name>;<pos:position pos:line="35" pos:column="27"/></goto>
            }<pos:position pos:line="36" pos:column="14"/></block></then></if>
        }<pos:position pos:line="37" pos:column="10"/></block></then>
        <elseif pos:line="38" pos:column="9">else <if pos:line="38" pos:column="14">if <condition pos:line="38" pos:column="17">(<expr><name><name pos:line="38" pos:column="18">inp<pos:position pos:line="38" pos:column="21"/></name><index pos:line="38" pos:column="21">[<expr><literal type="number" pos:line="38" pos:column="22">1<pos:position pos:line="38" pos:column="23"/></literal></expr>]<pos:position pos:line="38" pos:column="24"/></index></name> <operator pos:line="38" pos:column="25">==<pos:position pos:line="38" pos:column="27"/></operator> <literal type="char" pos:line="38" pos:column="28">'{'<pos:position pos:line="38" pos:column="31"/></literal></expr>)<pos:position pos:line="38" pos:column="32"/></condition><then pos:line="38" pos:column="32"> <block pos:line="38" pos:column="33">{
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">char<pos:position pos:line="39" pos:column="17"/></name> <modifier pos:line="39" pos:column="18">*<pos:position pos:line="39" pos:column="19"/></modifier></type><name pos:line="39" pos:column="19">endp<pos:position pos:line="39" pos:column="23"/></name></decl>;<pos:position pos:line="39" pos:column="24"/></decl_stmt>
            <expr_stmt><expr><name pos:line="40" pos:column="13">endp<pos:position pos:line="40" pos:column="17"/></name> <operator pos:line="40" pos:column="18">=<pos:position pos:line="40" pos:column="19"/></operator> <call><name pos:line="40" pos:column="20">find_closing_bracket<pos:position pos:line="40" pos:column="40"/></name><argument_list pos:line="40" pos:column="40">(<argument><expr><name pos:line="40" pos:column="41">inp<pos:position pos:line="40" pos:column="44"/></name><operator pos:line="40" pos:column="44">+<pos:position pos:line="40" pos:column="45"/></operator><literal type="number" pos:line="40" pos:column="45">2<pos:position pos:line="40" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="40" pos:column="48">'{'<pos:position pos:line="40" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="40" pos:column="53">'}'<pos:position pos:line="40" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="58"/></expr_stmt>
            <if pos:line="41" pos:column="13">if <condition pos:line="41" pos:column="16">(<expr><name pos:line="41" pos:column="17">endp<pos:position pos:line="41" pos:column="21"/></name> <operator pos:line="41" pos:column="22">==<pos:position pos:line="41" pos:column="24"/></operator> <name pos:line="41" pos:column="25">NULL<pos:position pos:line="41" pos:column="29"/></name></expr>)<pos:position pos:line="41" pos:column="30"/></condition><then pos:line="41" pos:column="30"> <block pos:line="41" pos:column="31">{
                <goto pos:line="42" pos:column="17">goto <name pos:line="42" pos:column="22">skip<pos:position pos:line="42" pos:column="26"/></name>;<pos:position pos:line="42" pos:column="27"/></goto>
            }<pos:position pos:line="43" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="44" pos:column="13">/*
            * These lookups may be recursive in a very convoluted
            * fashion -- see the LA-U and LA-F variable expansion
            * prefixes -- so we copy lookup keys to a separate buffer
            * rather than adding zero bytes in order to use them in
            * place.
            */</comment>
            <if pos:line="51" pos:column="13">if <condition pos:line="51" pos:column="16">(<expr><name><name pos:line="51" pos:column="17">inp<pos:position pos:line="51" pos:column="20"/></name><index pos:line="51" pos:column="20">[<expr><literal type="number" pos:line="51" pos:column="21">0<pos:position pos:line="51" pos:column="22"/></literal></expr>]<pos:position pos:line="51" pos:column="23"/></index></name> <operator pos:line="51" pos:column="24">==<pos:position pos:line="51" pos:column="26"/></operator> <literal type="char" pos:line="51" pos:column="27">'$'<pos:position pos:line="51" pos:column="30"/></literal></expr>)<pos:position pos:line="51" pos:column="31"/></condition><then pos:line="51" pos:column="31"> <block pos:line="51" pos:column="32">{
                <comment type="block" pos:line="52" pos:column="17">/* ${...} map lookup expansion */</comment>
                <comment type="block" pos:line="53" pos:column="17">/*
                * To make rewrite maps useful the lookup key and
                * default values must be expanded, so we make
                * recursive calls to do the work. For security
                * reasons we must never expand a string that includes
                * verbatim data from the network. The recursion here
                * isn't a problem because the result of expansion is
                * only passed to lookup_map() so it cannot be
                * re-expanded, only re-looked-up. Another way of
                * looking at it is that the recursion is entirely
                * driven by the syntax of the nested curly brackets.
                */</comment>
                <decl_stmt><decl><type><name pos:line="65" pos:column="17">char<pos:position pos:line="65" pos:column="21"/></name> <modifier pos:line="65" pos:column="22">*<pos:position pos:line="65" pos:column="23"/></modifier></type><name pos:line="65" pos:column="23">map<pos:position pos:line="65" pos:column="26"/></name></decl>, <modifier pos:line="65" pos:column="28">*<pos:position pos:line="65" pos:column="29"/></modifier><decl><type ref="prev"/><name pos:line="65" pos:column="29">key<pos:position pos:line="65" pos:column="32"/></name></decl>, <modifier pos:line="65" pos:column="34">*<pos:position pos:line="65" pos:column="35"/></modifier><decl><type ref="prev"/><name pos:line="65" pos:column="35">dflt<pos:position pos:line="65" pos:column="39"/></name></decl>, <modifier pos:line="65" pos:column="41">*<pos:position pos:line="65" pos:column="42"/></modifier><decl><type ref="prev"/><name pos:line="65" pos:column="42">result<pos:position pos:line="65" pos:column="48"/></name></decl>;<pos:position pos:line="65" pos:column="49"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="66" pos:column="17">char<pos:position pos:line="66" pos:column="21"/></name></type> <name><name pos:line="66" pos:column="22">xkey<pos:position pos:line="66" pos:column="26"/></name><index pos:line="66" pos:column="26">[<expr><name pos:line="66" pos:column="27">MAX_STRING_LEN<pos:position pos:line="66" pos:column="41"/></name></expr>]<pos:position pos:line="66" pos:column="42"/></index></name></decl>;<pos:position pos:line="66" pos:column="43"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="67" pos:column="17">char<pos:position pos:line="67" pos:column="21"/></name></type> <name><name pos:line="67" pos:column="22">xdflt<pos:position pos:line="67" pos:column="27"/></name><index pos:line="67" pos:column="27">[<expr><name pos:line="67" pos:column="28">MAX_STRING_LEN<pos:position pos:line="67" pos:column="42"/></name></expr>]<pos:position pos:line="67" pos:column="43"/></index></name></decl>;<pos:position pos:line="67" pos:column="44"/></decl_stmt>
                <expr_stmt><expr><name pos:line="68" pos:column="17">key<pos:position pos:line="68" pos:column="20"/></name> <operator pos:line="68" pos:column="21">=<pos:position pos:line="68" pos:column="22"/></operator> <call><name pos:line="68" pos:column="23">find_char_in_brackets<pos:position pos:line="68" pos:column="44"/></name><argument_list pos:line="68" pos:column="44">(<argument><expr><name pos:line="68" pos:column="45">inp<pos:position pos:line="68" pos:column="48"/></name><operator pos:line="68" pos:column="48">+<pos:position pos:line="68" pos:column="49"/></operator><literal type="number" pos:line="68" pos:column="49">2<pos:position pos:line="68" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="68" pos:column="52">':'<pos:position pos:line="68" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="68" pos:column="57">'{'<pos:position pos:line="68" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="68" pos:column="62">'}'<pos:position pos:line="68" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="67"/></expr_stmt>
                <if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name pos:line="69" pos:column="21">key<pos:position pos:line="69" pos:column="24"/></name> <operator pos:line="69" pos:column="25">==<pos:position pos:line="69" pos:column="27"/></operator> <name pos:line="69" pos:column="28">NULL<pos:position pos:line="69" pos:column="32"/></name></expr>)<pos:position pos:line="69" pos:column="33"/></condition><then pos:line="69" pos:column="33"> <block pos:line="69" pos:column="34">{
                    <goto pos:line="70" pos:column="21">goto <name pos:line="70" pos:column="26">skip<pos:position pos:line="70" pos:column="30"/></name>;<pos:position pos:line="70" pos:column="31"/></goto>
                }<pos:position pos:line="71" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="72" pos:column="17">map<pos:position pos:line="72" pos:column="20"/></name>  <operator pos:line="72" pos:column="22">=<pos:position pos:line="72" pos:column="23"/></operator> <call><name pos:line="72" pos:column="24">apr_pstrndup<pos:position pos:line="72" pos:column="36"/></name><argument_list pos:line="72" pos:column="36">(<argument><expr><name><name pos:line="72" pos:column="37">r<pos:position pos:line="72" pos:column="38"/></name><operator pos:line="72" pos:column="38">-&gt;<pos:position pos:line="72" pos:column="43"/></operator><name pos:line="72" pos:column="40">pool<pos:position pos:line="72" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="46">inp<pos:position pos:line="72" pos:column="49"/></name><operator pos:line="72" pos:column="49">+<pos:position pos:line="72" pos:column="50"/></operator><literal type="number" pos:line="72" pos:column="50">2<pos:position pos:line="72" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="53">key<pos:position pos:line="72" pos:column="56"/></name><operator pos:line="72" pos:column="56">-<pos:position pos:line="72" pos:column="57"/></operator><name pos:line="72" pos:column="57">inp<pos:position pos:line="72" pos:column="60"/></name><operator pos:line="72" pos:column="60">-<pos:position pos:line="72" pos:column="61"/></operator><literal type="number" pos:line="72" pos:column="61">2<pos:position pos:line="72" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="64"/></expr_stmt>
                <expr_stmt><expr><name pos:line="73" pos:column="17">dflt<pos:position pos:line="73" pos:column="21"/></name> <operator pos:line="73" pos:column="22">=<pos:position pos:line="73" pos:column="23"/></operator> <call><name pos:line="73" pos:column="24">find_char_in_brackets<pos:position pos:line="73" pos:column="45"/></name><argument_list pos:line="73" pos:column="45">(<argument><expr><name pos:line="73" pos:column="46">key<pos:position pos:line="73" pos:column="49"/></name><operator pos:line="73" pos:column="49">+<pos:position pos:line="73" pos:column="50"/></operator><literal type="number" pos:line="73" pos:column="50">1<pos:position pos:line="73" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="73" pos:column="53">'|'<pos:position pos:line="73" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="73" pos:column="58">'{'<pos:position pos:line="73" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="73" pos:column="63">'}'<pos:position pos:line="73" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="68"/></expr_stmt>
                <if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><name pos:line="74" pos:column="21">dflt<pos:position pos:line="74" pos:column="25"/></name> <operator pos:line="74" pos:column="26">==<pos:position pos:line="74" pos:column="28"/></operator> <name pos:line="74" pos:column="29">NULL<pos:position pos:line="74" pos:column="33"/></name></expr>)<pos:position pos:line="74" pos:column="34"/></condition><then pos:line="74" pos:column="34"> <block pos:line="74" pos:column="35">{
                    <expr_stmt><expr><name pos:line="75" pos:column="21">key<pos:position pos:line="75" pos:column="24"/></name>  <operator pos:line="75" pos:column="26">=<pos:position pos:line="75" pos:column="27"/></operator> <call><name pos:line="75" pos:column="28">apr_pstrndup<pos:position pos:line="75" pos:column="40"/></name><argument_list pos:line="75" pos:column="40">(<argument><expr><name><name pos:line="75" pos:column="41">r<pos:position pos:line="75" pos:column="42"/></name><operator pos:line="75" pos:column="42">-&gt;<pos:position pos:line="75" pos:column="47"/></operator><name pos:line="75" pos:column="44">pool<pos:position pos:line="75" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="50">key<pos:position pos:line="75" pos:column="53"/></name><operator pos:line="75" pos:column="53">+<pos:position pos:line="75" pos:column="54"/></operator><literal type="number" pos:line="75" pos:column="54">1<pos:position pos:line="75" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="57">endp<pos:position pos:line="75" pos:column="61"/></name><operator pos:line="75" pos:column="61">-<pos:position pos:line="75" pos:column="62"/></operator><name pos:line="75" pos:column="62">key<pos:position pos:line="75" pos:column="65"/></name><operator pos:line="75" pos:column="65">-<pos:position pos:line="75" pos:column="66"/></operator><literal type="number" pos:line="75" pos:column="66">1<pos:position pos:line="75" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="69"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="76" pos:column="21">dflt<pos:position pos:line="76" pos:column="25"/></name> <operator pos:line="76" pos:column="26">=<pos:position pos:line="76" pos:column="27"/></operator> <literal type="string" pos:line="76" pos:column="28">""<pos:position pos:line="76" pos:column="30"/></literal></expr>;<pos:position pos:line="76" pos:column="31"/></expr_stmt>
                }<pos:position pos:line="77" pos:column="18"/></block></then>
                <else pos:line="78" pos:column="17">else <block pos:line="78" pos:column="22">{
                    <expr_stmt><expr><name pos:line="79" pos:column="21">key<pos:position pos:line="79" pos:column="24"/></name>  <operator pos:line="79" pos:column="26">=<pos:position pos:line="79" pos:column="27"/></operator> <call><name pos:line="79" pos:column="28">apr_pstrndup<pos:position pos:line="79" pos:column="40"/></name><argument_list pos:line="79" pos:column="40">(<argument><expr><name><name pos:line="79" pos:column="41">r<pos:position pos:line="79" pos:column="42"/></name><operator pos:line="79" pos:column="42">-&gt;<pos:position pos:line="79" pos:column="47"/></operator><name pos:line="79" pos:column="44">pool<pos:position pos:line="79" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="50">key<pos:position pos:line="79" pos:column="53"/></name><operator pos:line="79" pos:column="53">+<pos:position pos:line="79" pos:column="54"/></operator><literal type="number" pos:line="79" pos:column="54">1<pos:position pos:line="79" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="57">dflt<pos:position pos:line="79" pos:column="61"/></name><operator pos:line="79" pos:column="61">-<pos:position pos:line="79" pos:column="62"/></operator><name pos:line="79" pos:column="62">key<pos:position pos:line="79" pos:column="65"/></name><operator pos:line="79" pos:column="65">-<pos:position pos:line="79" pos:column="66"/></operator><literal type="number" pos:line="79" pos:column="66">1<pos:position pos:line="79" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="69"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="80" pos:column="21">dflt<pos:position pos:line="80" pos:column="25"/></name> <operator pos:line="80" pos:column="26">=<pos:position pos:line="80" pos:column="27"/></operator> <call><name pos:line="80" pos:column="28">apr_pstrndup<pos:position pos:line="80" pos:column="40"/></name><argument_list pos:line="80" pos:column="40">(<argument><expr><name><name pos:line="80" pos:column="41">r<pos:position pos:line="80" pos:column="42"/></name><operator pos:line="80" pos:column="42">-&gt;<pos:position pos:line="80" pos:column="47"/></operator><name pos:line="80" pos:column="44">pool<pos:position pos:line="80" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="50">dflt<pos:position pos:line="80" pos:column="54"/></name><operator pos:line="80" pos:column="54">+<pos:position pos:line="80" pos:column="55"/></operator><literal type="number" pos:line="80" pos:column="55">1<pos:position pos:line="80" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="80" pos:column="58">endp<pos:position pos:line="80" pos:column="62"/></name><operator pos:line="80" pos:column="62">-<pos:position pos:line="80" pos:column="63"/></operator><name pos:line="80" pos:column="63">dflt<pos:position pos:line="80" pos:column="67"/></name><operator pos:line="80" pos:column="67">-<pos:position pos:line="80" pos:column="68"/></operator><literal type="number" pos:line="80" pos:column="68">1<pos:position pos:line="80" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="71"/></expr_stmt>
                }<pos:position pos:line="81" pos:column="18"/></block></else></if>
                <expr_stmt><expr><call><name pos:line="82" pos:column="17">do_expand<pos:position pos:line="82" pos:column="26"/></name><argument_list pos:line="82" pos:column="26">(<argument><expr><name pos:line="82" pos:column="27">r<pos:position pos:line="82" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="30">key<pos:position pos:line="82" pos:column="33"/></name></expr></argument>,  <argument><expr><name pos:line="82" pos:column="36">xkey<pos:position pos:line="82" pos:column="40"/></name></expr></argument>,  <argument><expr><sizeof pos:line="82" pos:column="43">sizeof<argument_list pos:line="82" pos:column="49">(<argument><expr><name pos:line="82" pos:column="50">xkey<pos:position pos:line="82" pos:column="54"/></name></expr></argument>)<pos:position pos:line="82" pos:column="55"/></argument_list></sizeof></expr></argument>,  <argument><expr><name pos:line="82" pos:column="58">briRR<pos:position pos:line="82" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="65">briRC<pos:position pos:line="82" pos:column="70"/></name></expr></argument>)<pos:position pos:line="82" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="72"/></expr_stmt>
                <expr_stmt><expr><name pos:line="83" pos:column="17">result<pos:position pos:line="83" pos:column="23"/></name> <operator pos:line="83" pos:column="24">=<pos:position pos:line="83" pos:column="25"/></operator> <call><name pos:line="83" pos:column="26">lookup_map<pos:position pos:line="83" pos:column="36"/></name><argument_list pos:line="83" pos:column="36">(<argument><expr><name pos:line="83" pos:column="37">r<pos:position pos:line="83" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="40">map<pos:position pos:line="83" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="45">xkey<pos:position pos:line="83" pos:column="49"/></name></expr></argument>)<pos:position pos:line="83" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="51"/></expr_stmt>
                <if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><name pos:line="84" pos:column="21">result<pos:position pos:line="84" pos:column="27"/></name></expr>)<pos:position pos:line="84" pos:column="28"/></condition><then pos:line="84" pos:column="28"> <block pos:line="84" pos:column="29">{
                    <expr_stmt><expr><name pos:line="85" pos:column="21">span<pos:position pos:line="85" pos:column="25"/></name> <operator pos:line="85" pos:column="26">=<pos:position pos:line="85" pos:column="27"/></operator> <call><name pos:line="85" pos:column="28">apr_cpystrn<pos:position pos:line="85" pos:column="39"/></name><argument_list pos:line="85" pos:column="39">(<argument><expr><name pos:line="85" pos:column="40">outp<pos:position pos:line="85" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="46">result<pos:position pos:line="85" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="54">space<pos:position pos:line="85" pos:column="59"/></name></expr></argument>)<pos:position pos:line="85" pos:column="60"/></argument_list></call> <operator pos:line="85" pos:column="61">-<pos:position pos:line="85" pos:column="62"/></operator> <name pos:line="85" pos:column="63">outp<pos:position pos:line="85" pos:column="67"/></name></expr>;<pos:position pos:line="85" pos:column="68"/></expr_stmt>
                }<pos:position pos:line="86" pos:column="18"/></block></then>
                <else pos:line="87" pos:column="17">else <block pos:line="87" pos:column="22">{
                    <expr_stmt><expr><call><name pos:line="88" pos:column="21">do_expand<pos:position pos:line="88" pos:column="30"/></name><argument_list pos:line="88" pos:column="30">(<argument><expr><name pos:line="88" pos:column="31">r<pos:position pos:line="88" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="34">dflt<pos:position pos:line="88" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="40">xdflt<pos:position pos:line="88" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="88" pos:column="47">sizeof<argument_list pos:line="88" pos:column="53">(<argument><expr><name pos:line="88" pos:column="54">xdflt<pos:position pos:line="88" pos:column="59"/></name></expr></argument>)<pos:position pos:line="88" pos:column="60"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="88" pos:column="62">briRR<pos:position pos:line="88" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="69">briRC<pos:position pos:line="88" pos:column="74"/></name></expr></argument>)<pos:position pos:line="88" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="76"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="89" pos:column="21">span<pos:position pos:line="89" pos:column="25"/></name> <operator pos:line="89" pos:column="26">=<pos:position pos:line="89" pos:column="27"/></operator> <call><name pos:line="89" pos:column="28">apr_cpystrn<pos:position pos:line="89" pos:column="39"/></name><argument_list pos:line="89" pos:column="39">(<argument><expr><name pos:line="89" pos:column="40">outp<pos:position pos:line="89" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="46">xdflt<pos:position pos:line="89" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="53">space<pos:position pos:line="89" pos:column="58"/></name></expr></argument>)<pos:position pos:line="89" pos:column="59"/></argument_list></call> <operator pos:line="89" pos:column="60">-<pos:position pos:line="89" pos:column="61"/></operator> <name pos:line="89" pos:column="62">outp<pos:position pos:line="89" pos:column="66"/></name></expr>;<pos:position pos:line="89" pos:column="67"/></expr_stmt>
                }<pos:position pos:line="90" pos:column="18"/></block></else></if>
            }<pos:position pos:line="91" pos:column="14"/></block></then>
            <elseif pos:line="92" pos:column="13">else <if pos:line="92" pos:column="18">if <condition pos:line="92" pos:column="21">(<expr><name><name pos:line="92" pos:column="22">inp<pos:position pos:line="92" pos:column="25"/></name><index pos:line="92" pos:column="25">[<expr><literal type="number" pos:line="92" pos:column="26">0<pos:position pos:line="92" pos:column="27"/></literal></expr>]<pos:position pos:line="92" pos:column="28"/></index></name> <operator pos:line="92" pos:column="29">==<pos:position pos:line="92" pos:column="31"/></operator> <literal type="char" pos:line="92" pos:column="32">'%'<pos:position pos:line="92" pos:column="35"/></literal></expr>)<pos:position pos:line="92" pos:column="36"/></condition><then pos:line="92" pos:column="36"> <block pos:line="92" pos:column="37">{
                <comment type="block" pos:line="93" pos:column="17">/* %{...} variable lookup expansion */</comment>
                <decl_stmt><decl><type><name pos:line="94" pos:column="17">char<pos:position pos:line="94" pos:column="21"/></name> <modifier pos:line="94" pos:column="22">*<pos:position pos:line="94" pos:column="23"/></modifier></type><name pos:line="94" pos:column="23">var<pos:position pos:line="94" pos:column="26"/></name></decl>;<pos:position pos:line="94" pos:column="27"/></decl_stmt>
                <expr_stmt><expr><name pos:line="95" pos:column="17">var<pos:position pos:line="95" pos:column="20"/></name>  <operator pos:line="95" pos:column="22">=<pos:position pos:line="95" pos:column="23"/></operator> <call><name pos:line="95" pos:column="24">apr_pstrndup<pos:position pos:line="95" pos:column="36"/></name><argument_list pos:line="95" pos:column="36">(<argument><expr><name><name pos:line="95" pos:column="37">r<pos:position pos:line="95" pos:column="38"/></name><operator pos:line="95" pos:column="38">-&gt;<pos:position pos:line="95" pos:column="43"/></operator><name pos:line="95" pos:column="40">pool<pos:position pos:line="95" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="46">inp<pos:position pos:line="95" pos:column="49"/></name><operator pos:line="95" pos:column="49">+<pos:position pos:line="95" pos:column="50"/></operator><literal type="number" pos:line="95" pos:column="50">2<pos:position pos:line="95" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="95" pos:column="53">endp<pos:position pos:line="95" pos:column="57"/></name><operator pos:line="95" pos:column="57">-<pos:position pos:line="95" pos:column="58"/></operator><name pos:line="95" pos:column="58">inp<pos:position pos:line="95" pos:column="61"/></name><operator pos:line="95" pos:column="61">-<pos:position pos:line="95" pos:column="62"/></operator><literal type="number" pos:line="95" pos:column="62">2<pos:position pos:line="95" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="65"/></expr_stmt>
                <expr_stmt><expr><name pos:line="96" pos:column="17">span<pos:position pos:line="96" pos:column="21"/></name> <operator pos:line="96" pos:column="22">=<pos:position pos:line="96" pos:column="23"/></operator> <call><name pos:line="96" pos:column="24">apr_cpystrn<pos:position pos:line="96" pos:column="35"/></name><argument_list pos:line="96" pos:column="35">(<argument><expr><name pos:line="96" pos:column="36">outp<pos:position pos:line="96" pos:column="40"/></name></expr></argument>, <argument><expr><call><name pos:line="96" pos:column="42">lookup_variable<pos:position pos:line="96" pos:column="57"/></name><argument_list pos:line="96" pos:column="57">(<argument><expr><name pos:line="96" pos:column="58">r<pos:position pos:line="96" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="61">var<pos:position pos:line="96" pos:column="64"/></name></expr></argument>)<pos:position pos:line="96" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="96" pos:column="67">space<pos:position pos:line="96" pos:column="72"/></name></expr></argument>)<pos:position pos:line="96" pos:column="73"/></argument_list></call> <operator pos:line="96" pos:column="74">-<pos:position pos:line="96" pos:column="75"/></operator> <name pos:line="96" pos:column="76">outp<pos:position pos:line="96" pos:column="80"/></name></expr>;<pos:position pos:line="96" pos:column="81"/></expr_stmt>
            }<pos:position pos:line="97" pos:column="14"/></block></then></if></elseif>
            <else pos:line="98" pos:column="13">else <block pos:line="98" pos:column="18">{
                <expr_stmt><expr><name pos:line="99" pos:column="17">span<pos:position pos:line="99" pos:column="21"/></name> <operator pos:line="99" pos:column="22">=<pos:position pos:line="99" pos:column="23"/></operator> <literal type="number" pos:line="99" pos:column="24">0<pos:position pos:line="99" pos:column="25"/></literal></expr>;<pos:position pos:line="99" pos:column="26"/></expr_stmt>
            }<pos:position pos:line="100" pos:column="14"/></block></else></if>
            <expr_stmt><expr><name pos:line="101" pos:column="13">inp<pos:position pos:line="101" pos:column="16"/></name> <operator pos:line="101" pos:column="17">=<pos:position pos:line="101" pos:column="18"/></operator> <name pos:line="101" pos:column="19">endp<pos:position pos:line="101" pos:column="23"/></name><operator pos:line="101" pos:column="23">+<pos:position pos:line="101" pos:column="24"/></operator><literal type="number" pos:line="101" pos:column="24">1<pos:position pos:line="101" pos:column="25"/></literal></expr>;<pos:position pos:line="101" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><name pos:line="102" pos:column="13">outp<pos:position pos:line="102" pos:column="17"/></name> <operator pos:line="102" pos:column="18">+=<pos:position pos:line="102" pos:column="20"/></operator> <name pos:line="102" pos:column="21">span<pos:position pos:line="102" pos:column="25"/></name></expr>;<pos:position pos:line="102" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><name pos:line="103" pos:column="13">space<pos:position pos:line="103" pos:column="18"/></name> <operator pos:line="103" pos:column="19">-=<pos:position pos:line="103" pos:column="21"/></operator> <name pos:line="103" pos:column="22">span<pos:position pos:line="103" pos:column="26"/></name></expr>;<pos:position pos:line="103" pos:column="27"/></expr_stmt>
            <continue pos:line="104" pos:column="13">continue;<pos:position pos:line="104" pos:column="22"/></continue>
        }<pos:position pos:line="105" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="106" pos:column="9">else <if pos:line="106" pos:column="14">if <condition pos:line="106" pos:column="17">(<expr><call><name pos:line="106" pos:column="18">apr_isdigit<pos:position pos:line="106" pos:column="29"/></name><argument_list pos:line="106" pos:column="29">(<argument><expr><name><name pos:line="106" pos:column="30">inp<pos:position pos:line="106" pos:column="33"/></name><index pos:line="106" pos:column="33">[<expr><literal type="number" pos:line="106" pos:column="34">1<pos:position pos:line="106" pos:column="35"/></literal></expr>]<pos:position pos:line="106" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="106" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="106" pos:column="38"/></condition><then pos:line="106" pos:column="38"> <block pos:line="106" pos:column="39">{
            <decl_stmt><decl><type><name pos:line="107" pos:column="13">int<pos:position pos:line="107" pos:column="16"/></name></type> <name pos:line="107" pos:column="17">n<pos:position pos:line="107" pos:column="18"/></name> <init pos:line="107" pos:column="19">= <expr><name><name pos:line="107" pos:column="21">inp<pos:position pos:line="107" pos:column="24"/></name><index pos:line="107" pos:column="24">[<expr><literal type="number" pos:line="107" pos:column="25">1<pos:position pos:line="107" pos:column="26"/></literal></expr>]<pos:position pos:line="107" pos:column="27"/></index></name> <operator pos:line="107" pos:column="28">-<pos:position pos:line="107" pos:column="29"/></operator> <literal type="char" pos:line="107" pos:column="30">'0'<pos:position pos:line="107" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="107" pos:column="34"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="108" pos:column="13">backrefinfo<pos:position pos:line="108" pos:column="24"/></name> <modifier pos:line="108" pos:column="25">*<pos:position pos:line="108" pos:column="26"/></modifier></type><name pos:line="108" pos:column="26">bri<pos:position pos:line="108" pos:column="29"/></name> <init pos:line="108" pos:column="30">= <expr><name pos:line="108" pos:column="32">NULL<pos:position pos:line="108" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="108" pos:column="37"/></decl_stmt>
            <if pos:line="109" pos:column="13">if <condition pos:line="109" pos:column="16">(<expr><name><name pos:line="109" pos:column="17">inp<pos:position pos:line="109" pos:column="20"/></name><index pos:line="109" pos:column="20">[<expr><literal type="number" pos:line="109" pos:column="21">0<pos:position pos:line="109" pos:column="22"/></literal></expr>]<pos:position pos:line="109" pos:column="23"/></index></name> <operator pos:line="109" pos:column="24">==<pos:position pos:line="109" pos:column="26"/></operator> <literal type="char" pos:line="109" pos:column="27">'$'<pos:position pos:line="109" pos:column="30"/></literal></expr>)<pos:position pos:line="109" pos:column="31"/></condition><then pos:line="109" pos:column="31"> <block pos:line="109" pos:column="32">{
                <comment type="block" pos:line="110" pos:column="17">/* $N RewriteRule regexp backref expansion */</comment>
                <expr_stmt><expr><name pos:line="111" pos:column="17">bri<pos:position pos:line="111" pos:column="20"/></name> <operator pos:line="111" pos:column="21">=<pos:position pos:line="111" pos:column="22"/></operator> <name pos:line="111" pos:column="23">briRR<pos:position pos:line="111" pos:column="28"/></name></expr>;<pos:position pos:line="111" pos:column="29"/></expr_stmt>
            }<pos:position pos:line="112" pos:column="14"/></block></then>
            <elseif pos:line="113" pos:column="13">else <if pos:line="113" pos:column="18">if <condition pos:line="113" pos:column="21">(<expr><name><name pos:line="113" pos:column="22">inp<pos:position pos:line="113" pos:column="25"/></name><index pos:line="113" pos:column="25">[<expr><literal type="number" pos:line="113" pos:column="26">0<pos:position pos:line="113" pos:column="27"/></literal></expr>]<pos:position pos:line="113" pos:column="28"/></index></name> <operator pos:line="113" pos:column="29">==<pos:position pos:line="113" pos:column="31"/></operator> <literal type="char" pos:line="113" pos:column="32">'%'<pos:position pos:line="113" pos:column="35"/></literal></expr>)<pos:position pos:line="113" pos:column="36"/></condition><then pos:line="113" pos:column="36"> <block pos:line="113" pos:column="37">{
                <comment type="block" pos:line="114" pos:column="17">/* %N RewriteCond regexp backref expansion */</comment>
                <expr_stmt><expr><name pos:line="115" pos:column="17">bri<pos:position pos:line="115" pos:column="20"/></name> <operator pos:line="115" pos:column="21">=<pos:position pos:line="115" pos:column="22"/></operator> <name pos:line="115" pos:column="23">briRC<pos:position pos:line="115" pos:column="28"/></name></expr>;<pos:position pos:line="115" pos:column="29"/></expr_stmt>
            }<pos:position pos:line="116" pos:column="14"/></block></then></if></elseif></if>
            <comment type="block" pos:line="117" pos:column="13">/* see ap_pregsub() in src/main/util.c */</comment>
            <if pos:line="118" pos:column="13">if <condition pos:line="118" pos:column="16">(<expr><name pos:line="118" pos:column="17">bri<pos:position pos:line="118" pos:column="20"/></name> <operator pos:line="118" pos:column="21">&amp;&amp;<pos:position pos:line="118" pos:column="31"/></operator> <name pos:line="118" pos:column="24">n<pos:position pos:line="118" pos:column="25"/></name> <operator pos:line="118" pos:column="26">&lt;<pos:position pos:line="118" pos:column="30"/></operator> <name pos:line="118" pos:column="28">AP_MAX_REG_MATCH<pos:position pos:line="118" pos:column="44"/></name>
                <operator pos:line="119" pos:column="17">&amp;&amp;<pos:position pos:line="119" pos:column="27"/></operator> <name><name pos:line="119" pos:column="20">bri<pos:position pos:line="119" pos:column="23"/></name><operator pos:line="119" pos:column="23">-&gt;<pos:position pos:line="119" pos:column="28"/></operator><name pos:line="119" pos:column="25">regmatch<pos:position pos:line="119" pos:column="33"/></name><index pos:line="119" pos:column="33">[<expr><name pos:line="119" pos:column="34">n<pos:position pos:line="119" pos:column="35"/></name></expr>]<pos:position pos:line="119" pos:column="36"/></index></name><operator pos:line="119" pos:column="36">.<pos:position pos:line="119" pos:column="37"/></operator><name pos:line="119" pos:column="37">rm_eo<pos:position pos:line="119" pos:column="42"/></name> <operator pos:line="119" pos:column="43">&gt;<pos:position pos:line="119" pos:column="47"/></operator> <name><name pos:line="119" pos:column="45">bri<pos:position pos:line="119" pos:column="48"/></name><operator pos:line="119" pos:column="48">-&gt;<pos:position pos:line="119" pos:column="53"/></operator><name pos:line="119" pos:column="50">regmatch<pos:position pos:line="119" pos:column="58"/></name><index pos:line="119" pos:column="58">[<expr><name pos:line="119" pos:column="59">n<pos:position pos:line="119" pos:column="60"/></name></expr>]<pos:position pos:line="119" pos:column="61"/></index></name><operator pos:line="119" pos:column="61">.<pos:position pos:line="119" pos:column="62"/></operator><name pos:line="119" pos:column="62">rm_so<pos:position pos:line="119" pos:column="67"/></name></expr>)<pos:position pos:line="119" pos:column="68"/></condition><then pos:line="119" pos:column="68"> <block pos:line="119" pos:column="69">{
                <expr_stmt><expr><name pos:line="120" pos:column="17">span<pos:position pos:line="120" pos:column="21"/></name> <operator pos:line="120" pos:column="22">=<pos:position pos:line="120" pos:column="23"/></operator> <name><name pos:line="120" pos:column="24">bri<pos:position pos:line="120" pos:column="27"/></name><operator pos:line="120" pos:column="27">-&gt;<pos:position pos:line="120" pos:column="32"/></operator><name pos:line="120" pos:column="29">regmatch<pos:position pos:line="120" pos:column="37"/></name><index pos:line="120" pos:column="37">[<expr><name pos:line="120" pos:column="38">n<pos:position pos:line="120" pos:column="39"/></name></expr>]<pos:position pos:line="120" pos:column="40"/></index></name><operator pos:line="120" pos:column="40">.<pos:position pos:line="120" pos:column="41"/></operator><name pos:line="120" pos:column="41">rm_eo<pos:position pos:line="120" pos:column="46"/></name> <operator pos:line="120" pos:column="47">-<pos:position pos:line="120" pos:column="48"/></operator> <name><name pos:line="120" pos:column="49">bri<pos:position pos:line="120" pos:column="52"/></name><operator pos:line="120" pos:column="52">-&gt;<pos:position pos:line="120" pos:column="57"/></operator><name pos:line="120" pos:column="54">regmatch<pos:position pos:line="120" pos:column="62"/></name><index pos:line="120" pos:column="62">[<expr><name pos:line="120" pos:column="63">n<pos:position pos:line="120" pos:column="64"/></name></expr>]<pos:position pos:line="120" pos:column="65"/></index></name><operator pos:line="120" pos:column="65">.<pos:position pos:line="120" pos:column="66"/></operator><name pos:line="120" pos:column="66">rm_so<pos:position pos:line="120" pos:column="71"/></name></expr>;<pos:position pos:line="120" pos:column="72"/></expr_stmt>
                <if pos:line="121" pos:column="17">if <condition pos:line="121" pos:column="20">(<expr><name pos:line="121" pos:column="21">span<pos:position pos:line="121" pos:column="25"/></name> <operator pos:line="121" pos:column="26">&gt;<pos:position pos:line="121" pos:column="30"/></operator> <name pos:line="121" pos:column="28">space<pos:position pos:line="121" pos:column="33"/></name></expr>)<pos:position pos:line="121" pos:column="34"/></condition><then pos:line="121" pos:column="34"> <block pos:line="121" pos:column="35">{
                    <expr_stmt><expr><name pos:line="122" pos:column="21">span<pos:position pos:line="122" pos:column="25"/></name> <operator pos:line="122" pos:column="26">=<pos:position pos:line="122" pos:column="27"/></operator> <name pos:line="122" pos:column="28">space<pos:position pos:line="122" pos:column="33"/></name></expr>;<pos:position pos:line="122" pos:column="34"/></expr_stmt>
                }<pos:position pos:line="123" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="124" pos:column="17">memcpy<pos:position pos:line="124" pos:column="23"/></name><argument_list pos:line="124" pos:column="23">(<argument><expr><name pos:line="124" pos:column="24">outp<pos:position pos:line="124" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="124" pos:column="30">bri<pos:position pos:line="124" pos:column="33"/></name><operator pos:line="124" pos:column="33">-&gt;<pos:position pos:line="124" pos:column="38"/></operator><name pos:line="124" pos:column="35">source<pos:position pos:line="124" pos:column="41"/></name></name> <operator pos:line="124" pos:column="42">+<pos:position pos:line="124" pos:column="43"/></operator> <name><name pos:line="124" pos:column="44">bri<pos:position pos:line="124" pos:column="47"/></name><operator pos:line="124" pos:column="47">-&gt;<pos:position pos:line="124" pos:column="52"/></operator><name pos:line="124" pos:column="49">regmatch<pos:position pos:line="124" pos:column="57"/></name><index pos:line="124" pos:column="57">[<expr><name pos:line="124" pos:column="58">n<pos:position pos:line="124" pos:column="59"/></name></expr>]<pos:position pos:line="124" pos:column="60"/></index></name><operator pos:line="124" pos:column="60">.<pos:position pos:line="124" pos:column="61"/></operator><name pos:line="124" pos:column="61">rm_so<pos:position pos:line="124" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="68">span<pos:position pos:line="124" pos:column="72"/></name></expr></argument>)<pos:position pos:line="124" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="74"/></expr_stmt>
                <expr_stmt><expr><name pos:line="125" pos:column="17">outp<pos:position pos:line="125" pos:column="21"/></name> <operator pos:line="125" pos:column="22">+=<pos:position pos:line="125" pos:column="24"/></operator> <name pos:line="125" pos:column="25">span<pos:position pos:line="125" pos:column="29"/></name></expr>;<pos:position pos:line="125" pos:column="30"/></expr_stmt>
                <expr_stmt><expr><name pos:line="126" pos:column="17">space<pos:position pos:line="126" pos:column="22"/></name> <operator pos:line="126" pos:column="23">-=<pos:position pos:line="126" pos:column="25"/></operator> <name pos:line="126" pos:column="26">span<pos:position pos:line="126" pos:column="30"/></name></expr>;<pos:position pos:line="126" pos:column="31"/></expr_stmt>
            }<pos:position pos:line="127" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="128" pos:column="13">inp<pos:position pos:line="128" pos:column="16"/></name> <operator pos:line="128" pos:column="17">+=<pos:position pos:line="128" pos:column="19"/></operator> <literal type="number" pos:line="128" pos:column="20">2<pos:position pos:line="128" pos:column="21"/></literal></expr>;<pos:position pos:line="128" pos:column="22"/></expr_stmt>
            <continue pos:line="129" pos:column="13">continue;<pos:position pos:line="129" pos:column="22"/></continue>
        }<pos:position pos:line="130" pos:column="10"/></block></then></if></elseif></if>
        <label><name pos:line="131" pos:column="9">skip<pos:position pos:line="131" pos:column="13"/></name>:<pos:position pos:line="131" pos:column="14"/></label>
        <expr_stmt><expr><operator pos:line="132" pos:column="9">*<pos:position pos:line="132" pos:column="10"/></operator><name pos:line="132" pos:column="10">outp<pos:position pos:line="132" pos:column="14"/></name><operator pos:line="132" pos:column="14">++<pos:position pos:line="132" pos:column="16"/></operator> <operator pos:line="132" pos:column="17">=<pos:position pos:line="132" pos:column="18"/></operator> <operator pos:line="132" pos:column="19">*<pos:position pos:line="132" pos:column="20"/></operator><name pos:line="132" pos:column="20">inp<pos:position pos:line="132" pos:column="23"/></name><operator pos:line="132" pos:column="23">++<pos:position pos:line="132" pos:column="25"/></operator></expr>;<pos:position pos:line="132" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="133" pos:column="9">space<pos:position pos:line="133" pos:column="14"/></name><operator pos:line="133" pos:column="14">--<pos:position pos:line="133" pos:column="16"/></operator></expr>;<pos:position pos:line="133" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="134" pos:column="6"/></block></for>
    <expr_stmt><expr><operator pos:line="135" pos:column="5">*<pos:position pos:line="135" pos:column="6"/></operator><name pos:line="135" pos:column="6">outp<pos:position pos:line="135" pos:column="10"/></name><operator pos:line="135" pos:column="10">++<pos:position pos:line="135" pos:column="12"/></operator> <operator pos:line="135" pos:column="13">=<pos:position pos:line="135" pos:column="14"/></operator> <literal type="char" pos:line="135" pos:column="15">'\0'<pos:position pos:line="135" pos:column="19"/></literal></expr>;<pos:position pos:line="135" pos:column="20"/></expr_stmt>
}<pos:position pos:line="136" pos:column="2"/></block></function></unit>
